<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\Apps\Pedometer-master\src\main\java\de\j4velin\pedometer\Database.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 * Copyright 2013 Thomas Hoffmann
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package pos:line="17" pos:column="1">package <name><name pos:line="17" pos:column="9">de</name><op:operator pos:line="17" pos:column="11">.</op:operator><name pos:line="17" pos:column="12">j4velin</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">pedometer</name></name>;</package>

<import pos:line="19" pos:column="1">import <name><name pos:line="19" pos:column="8">android</name><op:operator pos:line="19" pos:column="15">.</op:operator><name pos:line="19" pos:column="16">content</name><op:operator pos:line="19" pos:column="23">.</op:operator><name pos:line="19" pos:column="24">ContentValues</name></name>;</import>
<import pos:line="20" pos:column="1">import <name><name pos:line="20" pos:column="8">android</name><op:operator pos:line="20" pos:column="15">.</op:operator><name pos:line="20" pos:column="16">content</name><op:operator pos:line="20" pos:column="23">.</op:operator><name pos:line="20" pos:column="24">Context</name></name>;</import>
<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">android</name><op:operator pos:line="21" pos:column="15">.</op:operator><name pos:line="21" pos:column="16">database</name><op:operator pos:line="21" pos:column="24">.</op:operator><name pos:line="21" pos:column="25">Cursor</name></name>;</import>
<import pos:line="22" pos:column="1">import <name><name pos:line="22" pos:column="8">android</name><op:operator pos:line="22" pos:column="15">.</op:operator><name pos:line="22" pos:column="16">database</name><op:operator pos:line="22" pos:column="24">.</op:operator><name pos:line="22" pos:column="25">sqlite</name><op:operator pos:line="22" pos:column="31">.</op:operator><name pos:line="22" pos:column="32">SQLiteDatabase</name></name>;</import>
<import pos:line="23" pos:column="1">import <name><name pos:line="23" pos:column="8">android</name><op:operator pos:line="23" pos:column="15">.</op:operator><name pos:line="23" pos:column="16">database</name><op:operator pos:line="23" pos:column="24">.</op:operator><name pos:line="23" pos:column="25">sqlite</name><op:operator pos:line="23" pos:column="31">.</op:operator><name pos:line="23" pos:column="32">SQLiteOpenHelper</name></name>;</import>
<import pos:line="24" pos:column="1">import <name><name pos:line="24" pos:column="8">android</name><op:operator pos:line="24" pos:column="15">.</op:operator><name pos:line="24" pos:column="16">util</name><op:operator pos:line="24" pos:column="20">.</op:operator><name pos:line="24" pos:column="21">Pair</name></name>;</import>

<import pos:line="26" pos:column="1">import <name><name pos:line="26" pos:column="8">java</name><op:operator pos:line="26" pos:column="12">.</op:operator><name pos:line="26" pos:column="13">util</name><op:operator pos:line="26" pos:column="17">.</op:operator><name pos:line="26" pos:column="18">Date</name></name>;</import>
<import pos:line="27" pos:column="1">import <name><name pos:line="27" pos:column="8">java</name><op:operator pos:line="27" pos:column="12">.</op:operator><name pos:line="27" pos:column="13">util</name><op:operator pos:line="27" pos:column="17">.</op:operator><name pos:line="27" pos:column="18">concurrent</name><op:operator pos:line="27" pos:column="28">.</op:operator><name pos:line="27" pos:column="29">atomic</name><op:operator pos:line="27" pos:column="35">.</op:operator><name pos:line="27" pos:column="36">AtomicInteger</name></name>;</import>

<import pos:line="29" pos:column="1">import <name><name pos:line="29" pos:column="8">de</name><op:operator pos:line="29" pos:column="10">.</op:operator><name pos:line="29" pos:column="11">j4velin</name><op:operator pos:line="29" pos:column="18">.</op:operator><name pos:line="29" pos:column="19">pedometer</name><op:operator pos:line="29" pos:column="28">.</op:operator><name pos:line="29" pos:column="29">util</name><op:operator pos:line="29" pos:column="33">.</op:operator><name pos:line="29" pos:column="34">Logger</name></name>;</import>
<import pos:line="30" pos:column="1">import <name><name pos:line="30" pos:column="8">de</name><op:operator pos:line="30" pos:column="10">.</op:operator><name pos:line="30" pos:column="11">j4velin</name><op:operator pos:line="30" pos:column="18">.</op:operator><name pos:line="30" pos:column="19">pedometer</name><op:operator pos:line="30" pos:column="28">.</op:operator><name pos:line="30" pos:column="29">util</name><op:operator pos:line="30" pos:column="33">.</op:operator><name pos:line="30" pos:column="34">Util</name></name>;</import>

<class><specifier pos:line="32" pos:column="1">public</specifier> class <name pos:line="32" pos:column="14">Database</name> <super><extends pos:line="32" pos:column="23">extends <name pos:line="32" pos:column="31">SQLiteOpenHelper</name></extends></super> <block pos:line="32" pos:column="48">{

    <decl_stmt><decl><type><specifier pos:line="34" pos:column="5">private</specifier> <specifier pos:line="34" pos:column="13">final</specifier> <specifier pos:line="34" pos:column="19">static</specifier> <name pos:line="34" pos:column="26">String</name></type> <name pos:line="34" pos:column="33">DB_NAME</name> <init pos:line="34" pos:column="41">= <expr><lit:literal type="string" pos:line="34" pos:column="43">"steps"</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="35" pos:column="5">private</specifier> <specifier pos:line="35" pos:column="13">final</specifier> <specifier pos:line="35" pos:column="19">static</specifier> <name pos:line="35" pos:column="26">int</name></type> <name pos:line="35" pos:column="30">DB_VERSION</name> <init pos:line="35" pos:column="41">= <expr><lit:literal type="number" pos:line="35" pos:column="43">2</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="37" pos:column="5">private</specifier> <specifier pos:line="37" pos:column="13">static</specifier> <name pos:line="37" pos:column="20">Database</name></type> <name pos:line="37" pos:column="29">instance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="38" pos:column="5">private</specifier> <specifier pos:line="38" pos:column="13">static</specifier> <specifier pos:line="38" pos:column="20">final</specifier> <name pos:line="38" pos:column="26">AtomicInteger</name></type> <name pos:line="38" pos:column="40">openCounter</name> <init pos:line="38" pos:column="52">= <expr><op:operator pos:line="38" pos:column="54">new</op:operator> <call><name pos:line="38" pos:column="58">AtomicInteger</name><argument_list pos:line="38" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier pos:line="40" pos:column="5">private</specifier> <name pos:line="40" pos:column="13">Database</name><parameter_list pos:line="40" pos:column="21">(<param><decl><type><specifier pos:line="40" pos:column="22">final</specifier> <name pos:line="40" pos:column="28">Context</name></type> <name pos:line="40" pos:column="36">context</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">super</name><argument_list pos:line="41" pos:column="14">(<argument><expr><name pos:line="41" pos:column="15">context</name></expr></argument>, <argument><expr><name pos:line="41" pos:column="24">DB_NAME</name></expr></argument>, <argument><expr><lit:literal type="null" pos:line="41" pos:column="33">null</lit:literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="39">DB_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><specifier pos:line="44" pos:column="5">public</specifier> <specifier pos:line="44" pos:column="12">static</specifier> <specifier pos:line="44" pos:column="19">synchronized</specifier> <name pos:line="44" pos:column="32">Database</name></type> <name pos:line="44" pos:column="41">getInstance</name><parameter_list pos:line="44" pos:column="52">(<param><decl><type><specifier pos:line="44" pos:column="53">final</specifier> <name pos:line="44" pos:column="59">Context</name></type> <name pos:line="44" pos:column="67">c</name></decl></param>)</parameter_list> <block pos:line="44" pos:column="70">{
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">instance</name> <op:operator pos:line="45" pos:column="22">==</op:operator> <lit:literal type="null" pos:line="45" pos:column="25">null</lit:literal></expr>)</condition><then pos:line="45" pos:column="30"> <block pos:line="45" pos:column="31">{
            <expr_stmt><expr><name pos:line="46" pos:column="13">instance</name> <op:operator pos:line="46" pos:column="22">=</op:operator> <op:operator pos:line="46" pos:column="24">new</op:operator> <call><name pos:line="46" pos:column="28">Database</name><argument_list pos:line="46" pos:column="36">(<argument><expr><call><name><name pos:line="46" pos:column="37">c</name><op:operator pos:line="46" pos:column="38">.</op:operator><name pos:line="46" pos:column="39">getApplicationContext</name></name><argument_list pos:line="46" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name pos:line="48" pos:column="9">openCounter</name><op:operator pos:line="48" pos:column="20">.</op:operator><name pos:line="48" pos:column="21">incrementAndGet</name></name><argument_list pos:line="48" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">instance</name></expr>;</return>
    }</block></function>

    <function><type><annotation pos:line="52" pos:column="5">@<name pos:line="52" pos:column="6">Override</name></annotation>
    <specifier pos:line="53" pos:column="5">public</specifier> <name pos:line="53" pos:column="12">void</name></type> <name pos:line="53" pos:column="17">close</name><parameter_list pos:line="53" pos:column="22">()</parameter_list> <block pos:line="53" pos:column="25">{
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name><name pos:line="54" pos:column="13">openCounter</name><op:operator pos:line="54" pos:column="24">.</op:operator><name pos:line="54" pos:column="25">decrementAndGet</name></name><argument_list pos:line="54" pos:column="40">()</argument_list></call> <op:operator pos:line="54" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="54" pos:column="46">0</lit:literal></expr>)</condition><then pos:line="54" pos:column="48"> <block pos:line="54" pos:column="49">{
            <expr_stmt><expr><call><name><name pos:line="55" pos:column="13">super</name><op:operator pos:line="55" pos:column="18">.</op:operator><name pos:line="55" pos:column="19">close</name></name><argument_list pos:line="55" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><annotation pos:line="59" pos:column="5">@<name pos:line="59" pos:column="6">Override</name></annotation>
    <specifier pos:line="60" pos:column="5">public</specifier> <name pos:line="60" pos:column="12">void</name></type> <name pos:line="60" pos:column="17">onCreate</name><parameter_list pos:line="60" pos:column="25">(<param><decl><type><specifier pos:line="60" pos:column="26">final</specifier> <name pos:line="60" pos:column="32">SQLiteDatabase</name></type> <name pos:line="60" pos:column="47">db</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="51">{
        <expr_stmt><expr><call><name><name pos:line="61" pos:column="9">db</name><op:operator pos:line="61" pos:column="11">.</op:operator><name pos:line="61" pos:column="12">execSQL</name></name><argument_list pos:line="61" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="61" pos:column="20">"CREATE TABLE "</lit:literal> <op:operator pos:line="61" pos:column="36">+</op:operator> <name pos:line="61" pos:column="38">DB_NAME</name> <op:operator pos:line="61" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="61" pos:column="48">" (date INTEGER, steps INTEGER)"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation pos:line="64" pos:column="5">@<name pos:line="64" pos:column="6">Override</name></annotation>
    <specifier pos:line="65" pos:column="5">public</specifier> <name pos:line="65" pos:column="12">void</name></type> <name pos:line="65" pos:column="17">onUpgrade</name><parameter_list pos:line="65" pos:column="26">(<param><decl><type><specifier pos:line="65" pos:column="27">final</specifier> <name pos:line="65" pos:column="33">SQLiteDatabase</name></type> <name pos:line="65" pos:column="48">db</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="52">int</name></type> <name pos:line="65" pos:column="56">oldVersion</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="68">int</name></type> <name pos:line="65" pos:column="72">newVersion</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="84">{
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><name pos:line="66" pos:column="13">oldVersion</name> <op:operator pos:line="66" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="66" pos:column="27">1</lit:literal></expr>)</condition><then pos:line="66" pos:column="29"> <block pos:line="66" pos:column="30">{
            <comment type="line" pos:line="67" pos:column="13">// drop PRIMARY KEY constraint</comment>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">db</name><op:operator pos:line="68" pos:column="15">.</op:operator><name pos:line="68" pos:column="16">execSQL</name></name><argument_list pos:line="68" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="24">"CREATE TABLE "</lit:literal> <op:operator pos:line="68" pos:column="40">+</op:operator> <name pos:line="68" pos:column="42">DB_NAME</name> <op:operator pos:line="68" pos:column="50">+</op:operator> <lit:literal type="string" pos:line="68" pos:column="52">"2 (date INTEGER, steps INTEGER)"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">db</name><op:operator pos:line="69" pos:column="15">.</op:operator><name pos:line="69" pos:column="16">execSQL</name></name><argument_list pos:line="69" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="24">"INSERT INTO "</lit:literal> <op:operator pos:line="69" pos:column="39">+</op:operator> <name pos:line="69" pos:column="41">DB_NAME</name> <op:operator pos:line="69" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="69" pos:column="51">"2 (date, steps) SELECT date, steps FROM "</lit:literal> <op:operator pos:line="69" pos:column="94">+</op:operator>
                    <name pos:line="70" pos:column="21">DB_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="71" pos:column="13">db</name><op:operator pos:line="71" pos:column="15">.</op:operator><name pos:line="71" pos:column="16">execSQL</name></name><argument_list pos:line="71" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="24">"DROP TABLE "</lit:literal> <op:operator pos:line="71" pos:column="38">+</op:operator> <name pos:line="71" pos:column="40">DB_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">db</name><op:operator pos:line="72" pos:column="15">.</op:operator><name pos:line="72" pos:column="16">execSQL</name></name><argument_list pos:line="72" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="72" pos:column="24">"ALTER TABLE "</lit:literal> <op:operator pos:line="72" pos:column="39">+</op:operator> <name pos:line="72" pos:column="41">DB_NAME</name> <op:operator pos:line="72" pos:column="49">+</op:operator> <lit:literal type="string" pos:line="72" pos:column="51">"2 RENAME TO "</lit:literal> <op:operator pos:line="72" pos:column="66">+</op:operator> <name pos:line="72" pos:column="68">DB_NAME</name> <op:operator pos:line="72" pos:column="76">+</op:operator> <lit:literal type="string" pos:line="72" pos:column="78">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="76" pos:column="5">/**
     * Query the 'steps' table. Remember to close the cursor!
     *
     * @param columns       the colums
     * @param selection     the selection
     * @param selectionArgs the selction arguments
     * @param groupBy       the group by statement
     * @param having        the having statement
     * @param orderBy       the order by statement
     * @return the cursor
     */</comment>
    <function><type><specifier pos:line="87" pos:column="5">public</specifier> <name pos:line="87" pos:column="12">Cursor</name></type> <name pos:line="87" pos:column="19">query</name><parameter_list pos:line="87" pos:column="24">(<param><decl><type><specifier pos:line="87" pos:column="25">final</specifier> <name><name pos:line="87" pos:column="31">String</name><index pos:line="87" pos:column="37">[]</index></name></type> <name pos:line="87" pos:column="40">columns</name></decl></param>, <param><decl><type><specifier pos:line="87" pos:column="49">final</specifier> <name pos:line="87" pos:column="55">String</name></type> <name pos:line="87" pos:column="62">selection</name></decl></param>, <param><decl><type><specifier pos:line="87" pos:column="73">final</specifier> <name><name pos:line="87" pos:column="79">String</name><index pos:line="87" pos:column="85">[]</index></name></type> <name pos:line="87" pos:column="88">selectionArgs</name></decl></param>, <param><decl><type><specifier pos:line="87" pos:column="103">final</specifier> <name pos:line="87" pos:column="109">String</name></type> <name pos:line="87" pos:column="116">groupBy</name></decl></param>, <param><decl><type><specifier pos:line="87" pos:column="125">final</specifier> <name pos:line="87" pos:column="131">String</name></type> <name pos:line="87" pos:column="138">having</name></decl></param>, <param><decl><type><specifier pos:line="87" pos:column="146">final</specifier> <name pos:line="87" pos:column="152">String</name></type> <name pos:line="87" pos:column="159">orderBy</name></decl></param>, <param><decl><type><specifier pos:line="87" pos:column="168">final</specifier> <name pos:line="87" pos:column="174">String</name></type> <name pos:line="87" pos:column="181">limit</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="188">{
        <return pos:line="88" pos:column="9">return <expr><call><name pos:line="88" pos:column="16">getReadableDatabase</name><argument_list pos:line="88" pos:column="35">()</argument_list></call>
                <op:operator pos:line="89" pos:column="17">.</op:operator><call><name pos:line="89" pos:column="18">query</name><argument_list pos:line="89" pos:column="23">(<argument><expr><name pos:line="89" pos:column="24">DB_NAME</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="33">columns</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="42">selection</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="53">selectionArgs</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="68">groupBy</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="77">having</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="85">orderBy</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="94">limit</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="92" pos:column="5">/**
     * Inserts a new entry in the database, if there is no entry for the given
     * date yet. Steps should be the current number of steps and it's negative
     * value will be used as offset for the new date. Also adds 'steps' steps to
     * the previous day, if there is an entry for that date.
     * &lt;p/&gt;
     * This method does nothing if there is already an entry for 'date' - use
     * {@link #updateSteps} in this case.
     * &lt;p/&gt;
     * To restore data from a backup, use {@link #insertDayFromBackup}
     *
     * @param date  the date in ms since 1970
     * @param steps the current step value to be used as negative offset for the
     *              new day; must be &gt;= 0
     */</comment>
    <function><type><specifier pos:line="107" pos:column="5">public</specifier> <name pos:line="107" pos:column="12">void</name></type> <name pos:line="107" pos:column="17">insertNewDay</name><parameter_list pos:line="107" pos:column="29">(<param><decl><type><name pos:line="107" pos:column="30">long</name></type> <name pos:line="107" pos:column="35">date</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="41">int</name></type> <name pos:line="107" pos:column="45">steps</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="108" pos:column="9">getWritableDatabase</name><argument_list pos:line="108" pos:column="28">()</argument_list></call><op:operator pos:line="108" pos:column="30">.</op:operator><call><name pos:line="108" pos:column="31">beginTransaction</name><argument_list pos:line="108" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
        <try pos:line="109" pos:column="9">try <block pos:line="109" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">Cursor</name></type> <name pos:line="110" pos:column="20">c</name> <init pos:line="110" pos:column="22">= <expr><call><name pos:line="110" pos:column="24">getReadableDatabase</name><argument_list pos:line="110" pos:column="43">()</argument_list></call><op:operator pos:line="110" pos:column="45">.</op:operator><call><name pos:line="110" pos:column="46">query</name><argument_list pos:line="110" pos:column="51">(<argument><expr><name pos:line="110" pos:column="52">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="110" pos:column="61">new</op:operator> <name><name pos:line="110" pos:column="65">String</name><index pos:line="110" pos:column="71">[]</index></name><block pos:line="110" pos:column="73">{<expr><lit:literal type="string" pos:line="110" pos:column="74">"date"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="110" pos:column="83">"date = ?"</lit:literal></expr></argument>,
                    <argument><expr><op:operator pos:line="111" pos:column="21">new</op:operator> <name><name pos:line="111" pos:column="25">String</name><index pos:line="111" pos:column="31">[]</index></name><block pos:line="111" pos:column="33">{<expr><call><name><name pos:line="111" pos:column="34">String</name><op:operator pos:line="111" pos:column="40">.</op:operator><name pos:line="111" pos:column="41">valueOf</name></name><argument_list pos:line="111" pos:column="48">(<argument><expr><name pos:line="111" pos:column="49">date</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><lit:literal type="null" pos:line="111" pos:column="57">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="111" pos:column="63">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="111" pos:column="69">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><call><name><name pos:line="112" pos:column="17">c</name><op:operator pos:line="112" pos:column="18">.</op:operator><name pos:line="112" pos:column="19">getCount</name></name><argument_list pos:line="112" pos:column="27">()</argument_list></call> <op:operator pos:line="112" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="112" pos:column="33">0</lit:literal> <op:operator pos:line="112" pos:column="35">&amp;&amp;</op:operator> <name pos:line="112" pos:column="38">steps</name> <op:operator pos:line="112" pos:column="44">&gt;=</op:operator> <lit:literal type="number" pos:line="112" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="112" pos:column="49"> <block pos:line="112" pos:column="50">{
                <decl_stmt><decl><type><name pos:line="113" pos:column="17">ContentValues</name></type> <name pos:line="113" pos:column="31">values</name> <init pos:line="113" pos:column="38">= <expr><op:operator pos:line="113" pos:column="40">new</op:operator> <call><name pos:line="113" pos:column="44">ContentValues</name><argument_list pos:line="113" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="114" pos:column="17">values</name><op:operator pos:line="114" pos:column="23">.</op:operator><name pos:line="114" pos:column="24">put</name></name><argument_list pos:line="114" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="28">"date"</lit:literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="36">date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line" pos:line="115" pos:column="17">// use the negative steps as offset</comment>
                <expr_stmt><expr><call><name><name pos:line="116" pos:column="17">values</name><op:operator pos:line="116" pos:column="23">.</op:operator><name pos:line="116" pos:column="24">put</name></name><argument_list pos:line="116" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="28">"steps"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="116" pos:column="37">-</op:operator><name pos:line="116" pos:column="38">steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="117" pos:column="17">getWritableDatabase</name><argument_list pos:line="117" pos:column="36">()</argument_list></call><op:operator pos:line="117" pos:column="38">.</op:operator><call><name pos:line="117" pos:column="39">insert</name><argument_list pos:line="117" pos:column="45">(<argument><expr><name pos:line="117" pos:column="46">DB_NAME</name></expr></argument>, <argument><expr><lit:literal type="null" pos:line="117" pos:column="55">null</lit:literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="61">values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line" pos:line="119" pos:column="17">// add 'steps' to yesterdays count</comment>
                <expr_stmt><expr><name pos:line="120" pos:column="17">date</name> <op:operator pos:line="120" pos:column="22">-=</op:operator> <lit:literal type="number" pos:line="120" pos:column="25">24</lit:literal> <op:operator pos:line="120" pos:column="28">*</op:operator> <lit:literal type="number" pos:line="120" pos:column="30">60</lit:literal> <op:operator pos:line="120" pos:column="33">*</op:operator> <lit:literal type="number" pos:line="120" pos:column="35">60</lit:literal> <op:operator pos:line="120" pos:column="38">*</op:operator> <lit:literal type="number" pos:line="120" pos:column="40">1000</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="121" pos:column="17">updateSteps</name><argument_list pos:line="121" pos:column="28">(<argument><expr><name pos:line="121" pos:column="29">date</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="35">steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="123" pos:column="13">c</name><op:operator pos:line="123" pos:column="14">.</op:operator><name pos:line="123" pos:column="15">close</name></name><argument_list pos:line="123" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
            <if pos:line="124" pos:column="13">if <condition pos:line="124" pos:column="16">(<expr><name><name pos:line="124" pos:column="17">BuildConfig</name><op:operator pos:line="124" pos:column="28">.</op:operator><name pos:line="124" pos:column="29">DEBUG</name></name></expr>)</condition><then pos:line="124" pos:column="35"> <block pos:line="124" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="125" pos:column="17">Logger</name><op:operator pos:line="125" pos:column="23">.</op:operator><name pos:line="125" pos:column="24">log</name></name><argument_list pos:line="125" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="28">"insertDay "</lit:literal> <op:operator pos:line="125" pos:column="41">+</op:operator> <name pos:line="125" pos:column="43">date</name> <op:operator pos:line="125" pos:column="48">+</op:operator> <lit:literal type="string" pos:line="125" pos:column="50">" / "</lit:literal> <op:operator pos:line="125" pos:column="56">+</op:operator> <name pos:line="125" pos:column="58">steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="126" pos:column="17">logState</name><argument_list pos:line="126" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name pos:line="128" pos:column="13">getWritableDatabase</name><argument_list pos:line="128" pos:column="32">()</argument_list></call><op:operator pos:line="128" pos:column="34">.</op:operator><call><name pos:line="128" pos:column="35">setTransactionSuccessful</name><argument_list pos:line="128" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally pos:line="129" pos:column="11">finally <block pos:line="129" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="130" pos:column="13">getWritableDatabase</name><argument_list pos:line="130" pos:column="32">()</argument_list></call><op:operator pos:line="130" pos:column="34">.</op:operator><call><name pos:line="130" pos:column="35">endTransaction</name><argument_list pos:line="130" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="134" pos:column="5">/**
     * Inserts a new entry in the database, if there is no entry for the given
     * date yet. Use this method for restoring data from a backup.
     * &lt;p/&gt;
     * This method does nothing if there is already an entry for 'date'.
     *
     * @param date  the date in ms since 1970
     * @param steps the step value for 'date'; must be &gt;= 0
     * @return true if a new entry was created, false if there was already an
     * entry for 'date'
     */</comment>
    <function><type><specifier pos:line="145" pos:column="5">public</specifier> <name pos:line="145" pos:column="12">boolean</name></type> <name pos:line="145" pos:column="20">insertDayFromBackup</name><parameter_list pos:line="145" pos:column="39">(<param><decl><type><name pos:line="145" pos:column="40">long</name></type> <name pos:line="145" pos:column="45">date</name></decl></param>, <param><decl><type><name pos:line="145" pos:column="51">int</name></type> <name pos:line="145" pos:column="55">steps</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">getWritableDatabase</name><argument_list pos:line="146" pos:column="28">()</argument_list></call><op:operator pos:line="146" pos:column="30">.</op:operator><call><name pos:line="146" pos:column="31">beginTransaction</name><argument_list pos:line="146" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="147" pos:column="9">boolean</name></type> <name pos:line="147" pos:column="17">re</name></decl>;</decl_stmt>
        <try pos:line="148" pos:column="9">try <block pos:line="148" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="149" pos:column="13">Cursor</name></type> <name pos:line="149" pos:column="20">c</name> <init pos:line="149" pos:column="22">= <expr><call><name pos:line="149" pos:column="24">getReadableDatabase</name><argument_list pos:line="149" pos:column="43">()</argument_list></call><op:operator pos:line="149" pos:column="45">.</op:operator><call><name pos:line="149" pos:column="46">query</name><argument_list pos:line="149" pos:column="51">(<argument><expr><name pos:line="149" pos:column="52">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="149" pos:column="61">new</op:operator> <name><name pos:line="149" pos:column="65">String</name><index pos:line="149" pos:column="71">[]</index></name><block pos:line="149" pos:column="73">{<expr><lit:literal type="string" pos:line="149" pos:column="74">"date"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="149" pos:column="83">"date = ?"</lit:literal></expr></argument>,
                    <argument><expr><op:operator pos:line="150" pos:column="21">new</op:operator> <name><name pos:line="150" pos:column="25">String</name><index pos:line="150" pos:column="31">[]</index></name><block pos:line="150" pos:column="33">{<expr><call><name><name pos:line="150" pos:column="34">String</name><op:operator pos:line="150" pos:column="40">.</op:operator><name pos:line="150" pos:column="41">valueOf</name></name><argument_list pos:line="150" pos:column="48">(<argument><expr><name pos:line="150" pos:column="49">date</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><lit:literal type="null" pos:line="150" pos:column="57">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="150" pos:column="63">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="150" pos:column="69">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name pos:line="151" pos:column="13">re</name> <op:operator pos:line="151" pos:column="16">=</op:operator> <call><name><name pos:line="151" pos:column="18">c</name><op:operator pos:line="151" pos:column="19">.</op:operator><name pos:line="151" pos:column="20">getCount</name></name><argument_list pos:line="151" pos:column="28">()</argument_list></call> <op:operator pos:line="151" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="151" pos:column="34">0</lit:literal> <op:operator pos:line="151" pos:column="36">&amp;&amp;</op:operator> <name pos:line="151" pos:column="39">steps</name> <op:operator pos:line="151" pos:column="45">&gt;=</op:operator> <lit:literal type="number" pos:line="151" pos:column="48">0</lit:literal></expr>;</expr_stmt>
            <if pos:line="152" pos:column="13">if <condition pos:line="152" pos:column="16">(<expr><name pos:line="152" pos:column="17">re</name></expr>)</condition><then pos:line="152" pos:column="20"> <block pos:line="152" pos:column="21">{
                <decl_stmt><decl><type><name pos:line="153" pos:column="17">ContentValues</name></type> <name pos:line="153" pos:column="31">values</name> <init pos:line="153" pos:column="38">= <expr><op:operator pos:line="153" pos:column="40">new</op:operator> <call><name pos:line="153" pos:column="44">ContentValues</name><argument_list pos:line="153" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="154" pos:column="17">values</name><op:operator pos:line="154" pos:column="23">.</op:operator><name pos:line="154" pos:column="24">put</name></name><argument_list pos:line="154" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="28">"date"</lit:literal></expr></argument>, <argument><expr><name pos:line="154" pos:column="36">date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="155" pos:column="17">values</name><op:operator pos:line="155" pos:column="23">.</op:operator><name pos:line="155" pos:column="24">put</name></name><argument_list pos:line="155" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="28">"steps"</lit:literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="37">steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="156" pos:column="17">getWritableDatabase</name><argument_list pos:line="156" pos:column="36">()</argument_list></call><op:operator pos:line="156" pos:column="38">.</op:operator><call><name pos:line="156" pos:column="39">insert</name><argument_list pos:line="156" pos:column="45">(<argument><expr><name pos:line="156" pos:column="46">DB_NAME</name></expr></argument>, <argument><expr><lit:literal type="null" pos:line="156" pos:column="55">null</lit:literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="61">values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">c</name><op:operator pos:line="158" pos:column="14">.</op:operator><name pos:line="158" pos:column="15">close</name></name><argument_list pos:line="158" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="159" pos:column="13">getWritableDatabase</name><argument_list pos:line="159" pos:column="32">()</argument_list></call><op:operator pos:line="159" pos:column="34">.</op:operator><call><name pos:line="159" pos:column="35">setTransactionSuccessful</name><argument_list pos:line="159" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally pos:line="160" pos:column="11">finally <block pos:line="160" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="161" pos:column="13">getWritableDatabase</name><argument_list pos:line="161" pos:column="32">()</argument_list></call><op:operator pos:line="161" pos:column="34">.</op:operator><call><name pos:line="161" pos:column="35">endTransaction</name><argument_list pos:line="161" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <return pos:line="163" pos:column="9">return <expr><name pos:line="163" pos:column="16">re</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="166" pos:column="5">/**
     * Writes the current steps database to the log
     */</comment>
    <function><type><specifier pos:line="169" pos:column="5">public</specifier> <name pos:line="169" pos:column="12">void</name></type> <name pos:line="169" pos:column="17">logState</name><parameter_list pos:line="169" pos:column="25">()</parameter_list> <block pos:line="169" pos:column="28">{
        <if pos:line="170" pos:column="9">if <condition pos:line="170" pos:column="12">(<expr><name><name pos:line="170" pos:column="13">BuildConfig</name><op:operator pos:line="170" pos:column="24">.</op:operator><name pos:line="170" pos:column="25">DEBUG</name></name></expr>)</condition><then pos:line="170" pos:column="31"> <block pos:line="170" pos:column="32">{
            <decl_stmt><decl><type><name pos:line="171" pos:column="13">Cursor</name></type> <name pos:line="171" pos:column="20">c</name> <init pos:line="171" pos:column="22">= <expr><call><name pos:line="171" pos:column="24">getReadableDatabase</name><argument_list pos:line="171" pos:column="43">()</argument_list></call>
                    <op:operator pos:line="172" pos:column="21">.</op:operator><call><name pos:line="172" pos:column="22">query</name><argument_list pos:line="172" pos:column="27">(<argument><expr><name pos:line="172" pos:column="28">DB_NAME</name></expr></argument>, <argument><expr><lit:literal type="null" pos:line="172" pos:column="37">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="172" pos:column="43">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="172" pos:column="49">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="172" pos:column="55">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="172" pos:column="61">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="67">"date DESC"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="172" pos:column="80">"5"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="173" pos:column="13">Logger</name><op:operator pos:line="173" pos:column="19">.</op:operator><name pos:line="173" pos:column="20">log</name></name><argument_list pos:line="173" pos:column="23">(<argument><expr><name pos:line="173" pos:column="24">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="174" pos:column="13">c</name><op:operator pos:line="174" pos:column="14">.</op:operator><name pos:line="174" pos:column="15">close</name></name><argument_list pos:line="174" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="178" pos:column="5">/**
     * Adds 'steps' steps to the row for the date 'date'. Won't do anything if
     * there isn't a row for the given date
     *
     * @param date  the date to update the steps for in millis since 1970
     * @param steps the steps to add to the current steps-value for the date
     */</comment>
    <function><type><specifier pos:line="185" pos:column="5">public</specifier> <name pos:line="185" pos:column="12">void</name></type> <name pos:line="185" pos:column="17">updateSteps</name><parameter_list pos:line="185" pos:column="28">(<param><decl><type><specifier pos:line="185" pos:column="29">final</specifier> <name pos:line="185" pos:column="35">long</name></type> <name pos:line="185" pos:column="40">date</name></decl></param>, <param><decl><type><name pos:line="185" pos:column="46">int</name></type> <name pos:line="185" pos:column="50">steps</name></decl></param>)</parameter_list> <block pos:line="185" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="186" pos:column="9">getWritableDatabase</name><argument_list pos:line="186" pos:column="28">()</argument_list></call><op:operator pos:line="186" pos:column="30">.</op:operator><call><name pos:line="186" pos:column="31">execSQL</name><argument_list pos:line="186" pos:column="38">(
                <argument><expr><lit:literal type="string" pos:line="187" pos:column="17">"UPDATE "</lit:literal> <op:operator pos:line="187" pos:column="27">+</op:operator> <name pos:line="187" pos:column="29">DB_NAME</name> <op:operator pos:line="187" pos:column="37">+</op:operator> <lit:literal type="string" pos:line="187" pos:column="39">" SET steps = steps + "</lit:literal> <op:operator pos:line="187" pos:column="63">+</op:operator> <name pos:line="187" pos:column="65">steps</name> <op:operator pos:line="187" pos:column="71">+</op:operator> <lit:literal type="string" pos:line="187" pos:column="73">" WHERE date = "</lit:literal> <op:operator pos:line="187" pos:column="90">+</op:operator> <name pos:line="187" pos:column="92">date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="188" pos:column="9">if <condition pos:line="188" pos:column="12">(<expr><name><name pos:line="188" pos:column="13">BuildConfig</name><op:operator pos:line="188" pos:column="24">.</op:operator><name pos:line="188" pos:column="25">DEBUG</name></name></expr>)</condition><then pos:line="188" pos:column="31"> <block pos:line="188" pos:column="32">{
            <expr_stmt><expr><call><name><name pos:line="189" pos:column="13">Logger</name><op:operator pos:line="189" pos:column="19">.</op:operator><name pos:line="189" pos:column="20">log</name></name><argument_list pos:line="189" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="24">"updateSteps "</lit:literal> <op:operator pos:line="189" pos:column="39">+</op:operator> <name pos:line="189" pos:column="41">date</name> <op:operator pos:line="189" pos:column="46">+</op:operator> <lit:literal type="string" pos:line="189" pos:column="48">" / "</lit:literal> <op:operator pos:line="189" pos:column="54">+</op:operator> <name pos:line="189" pos:column="56">steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="190" pos:column="13">logState</name><argument_list pos:line="190" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="194" pos:column="5">/**
     * Get the total of steps taken without today's value
     *
     * @return number of steps taken, ignoring today
     */</comment>
    <function><type><specifier pos:line="199" pos:column="5">public</specifier> <name pos:line="199" pos:column="12">int</name></type> <name pos:line="199" pos:column="16">getTotalWithoutToday</name><parameter_list pos:line="199" pos:column="36">()</parameter_list> <block pos:line="199" pos:column="39">{
        <decl_stmt><decl><type><name pos:line="200" pos:column="9">Cursor</name></type> <name pos:line="200" pos:column="16">c</name> <init pos:line="200" pos:column="18">= <expr><call><name pos:line="200" pos:column="20">getReadableDatabase</name><argument_list pos:line="200" pos:column="39">()</argument_list></call>
                <op:operator pos:line="201" pos:column="17">.</op:operator><call><name pos:line="201" pos:column="18">query</name><argument_list pos:line="201" pos:column="23">(<argument><expr><name pos:line="201" pos:column="24">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="201" pos:column="33">new</op:operator> <name><name pos:line="201" pos:column="37">String</name><index pos:line="201" pos:column="43">[]</index></name><block pos:line="201" pos:column="45">{<expr><lit:literal type="string" pos:line="201" pos:column="46">"SUM(steps)"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="201" pos:column="61">"steps &gt; 0 AND date &gt; 0 AND date &lt; ?"</lit:literal></expr></argument>,
                        <argument><expr><op:operator pos:line="202" pos:column="25">new</op:operator> <name><name pos:line="202" pos:column="29">String</name><index pos:line="202" pos:column="35">[]</index></name><block pos:line="202" pos:column="37">{<expr><call><name><name pos:line="202" pos:column="38">String</name><op:operator pos:line="202" pos:column="44">.</op:operator><name pos:line="202" pos:column="45">valueOf</name></name><argument_list pos:line="202" pos:column="52">(<argument><expr><call><name><name pos:line="202" pos:column="53">Util</name><op:operator pos:line="202" pos:column="57">.</op:operator><name pos:line="202" pos:column="58">getToday</name></name><argument_list pos:line="202" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><lit:literal type="null" pos:line="202" pos:column="72">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="202" pos:column="78">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="202" pos:column="84">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="203" pos:column="9">c</name><op:operator pos:line="203" pos:column="10">.</op:operator><name pos:line="203" pos:column="11">moveToFirst</name></name><argument_list pos:line="203" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="204" pos:column="9">int</name></type> <name pos:line="204" pos:column="13">re</name> <init pos:line="204" pos:column="16">= <expr><call><name><name pos:line="204" pos:column="18">c</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">getInt</name></name><argument_list pos:line="204" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="204" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="205" pos:column="9">c</name><op:operator pos:line="205" pos:column="10">.</op:operator><name pos:line="205" pos:column="11">close</name></name><argument_list pos:line="205" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="206" pos:column="9">return <expr><name pos:line="206" pos:column="16">re</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="209" pos:column="5">/**
     * Get the maximum of steps walked in one day
     *
     * @return the maximum number of steps walked in one day
     */</comment>
    <function><type><specifier pos:line="214" pos:column="5">public</specifier> <name pos:line="214" pos:column="12">int</name></type> <name pos:line="214" pos:column="16">getRecord</name><parameter_list pos:line="214" pos:column="25">()</parameter_list> <block pos:line="214" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="215" pos:column="9">Cursor</name></type> <name pos:line="215" pos:column="16">c</name> <init pos:line="215" pos:column="18">= <expr><call><name pos:line="215" pos:column="20">getReadableDatabase</name><argument_list pos:line="215" pos:column="39">()</argument_list></call>
                <op:operator pos:line="216" pos:column="17">.</op:operator><call><name pos:line="216" pos:column="18">query</name><argument_list pos:line="216" pos:column="23">(<argument><expr><name pos:line="216" pos:column="24">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="216" pos:column="33">new</op:operator> <name><name pos:line="216" pos:column="37">String</name><index pos:line="216" pos:column="43">[]</index></name><block pos:line="216" pos:column="45">{<expr><lit:literal type="string" pos:line="216" pos:column="46">"MAX(steps)"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="216" pos:column="61">"date &gt; 0"</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="216" pos:column="73">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="216" pos:column="79">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="216" pos:column="85">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="216" pos:column="91">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="217" pos:column="9">c</name><op:operator pos:line="217" pos:column="10">.</op:operator><name pos:line="217" pos:column="11">moveToFirst</name></name><argument_list pos:line="217" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="218" pos:column="9">int</name></type> <name pos:line="218" pos:column="13">re</name> <init pos:line="218" pos:column="16">= <expr><call><name><name pos:line="218" pos:column="18">c</name><op:operator pos:line="218" pos:column="19">.</op:operator><name pos:line="218" pos:column="20">getInt</name></name><argument_list pos:line="218" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="218" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="219" pos:column="9">c</name><op:operator pos:line="219" pos:column="10">.</op:operator><name pos:line="219" pos:column="11">close</name></name><argument_list pos:line="219" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="220" pos:column="9">return <expr><name pos:line="220" pos:column="16">re</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="223" pos:column="5">/**
     * Get the maximum of steps walked in one day and the date that happend
     *
     * @return a pair containing the date (Date) in millis since 1970 and the
     * step value (Integer)
     */</comment>
    <function><type><specifier pos:line="229" pos:column="5">public</specifier> <name><name pos:line="229" pos:column="12">Pair</name><argument_list pos:line="229" pos:column="16">&lt;<argument><name pos:line="229" pos:column="17">Date</name></argument>, <argument><name pos:line="229" pos:column="23">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="229" pos:column="32">getRecordData</name><parameter_list pos:line="229" pos:column="45">()</parameter_list> <block pos:line="229" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="230" pos:column="9">Cursor</name></type> <name pos:line="230" pos:column="16">c</name> <init pos:line="230" pos:column="18">= <expr><call><name pos:line="230" pos:column="20">getReadableDatabase</name><argument_list pos:line="230" pos:column="39">()</argument_list></call>
                <op:operator pos:line="231" pos:column="17">.</op:operator><call><name pos:line="231" pos:column="18">query</name><argument_list pos:line="231" pos:column="23">(<argument><expr><name pos:line="231" pos:column="24">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="231" pos:column="33">new</op:operator> <name><name pos:line="231" pos:column="37">String</name><index pos:line="231" pos:column="43">[]</index></name><block pos:line="231" pos:column="45">{<expr><lit:literal type="string" pos:line="231" pos:column="46">"date, steps"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="231" pos:column="62">"date &gt; 0"</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="231" pos:column="74">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="231" pos:column="80">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="231" pos:column="86">null</lit:literal></expr></argument>,
                        <argument><expr><lit:literal type="string" pos:line="232" pos:column="25">"steps DESC"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="232" pos:column="39">"1"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="233" pos:column="9">c</name><op:operator pos:line="233" pos:column="10">.</op:operator><name pos:line="233" pos:column="11">moveToFirst</name></name><argument_list pos:line="233" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name pos:line="234" pos:column="9">Pair</name><argument_list pos:line="234" pos:column="13">&lt;<argument><name pos:line="234" pos:column="14">Date</name></argument>, <argument><name pos:line="234" pos:column="20">Integer</name></argument>&gt;</argument_list></name></type> <name pos:line="234" pos:column="29">p</name> <init pos:line="234" pos:column="31">= <expr><op:operator pos:line="234" pos:column="33">new</op:operator> <call><name><name pos:line="234" pos:column="37">Pair</name><argument_list pos:line="234" pos:column="41">&lt;<argument><name pos:line="234" pos:column="42">Date</name></argument>, <argument><name pos:line="234" pos:column="48">Integer</name></argument>&gt;</argument_list></name><argument_list pos:line="234" pos:column="56">(<argument><expr><op:operator pos:line="234" pos:column="57">new</op:operator> <call><name pos:line="234" pos:column="61">Date</name><argument_list pos:line="234" pos:column="65">(<argument><expr><call><name><name pos:line="234" pos:column="66">c</name><op:operator pos:line="234" pos:column="67">.</op:operator><name pos:line="234" pos:column="68">getLong</name></name><argument_list pos:line="234" pos:column="75">(<argument><expr><lit:literal type="number" pos:line="234" pos:column="76">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="234" pos:column="81">c</name><op:operator pos:line="234" pos:column="82">.</op:operator><name pos:line="234" pos:column="83">getInt</name></name><argument_list pos:line="234" pos:column="89">(<argument><expr><lit:literal type="number" pos:line="234" pos:column="90">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="235" pos:column="9">c</name><op:operator pos:line="235" pos:column="10">.</op:operator><name pos:line="235" pos:column="11">close</name></name><argument_list pos:line="235" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="236" pos:column="9">return <expr><name pos:line="236" pos:column="16">p</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="239" pos:column="5">/**
     * Get the number of steps taken for a specific date.
     * &lt;p/&gt;
     * If date is Util.getToday(), this method returns the offset which needs to
     * be added to the value returned by getCurrentSteps() to get todays steps.
     *
     * @param date the date in millis since 1970
     * @return the steps taken on this date or Integer.MIN_VALUE if date doesn't
     * exist in the database
     */</comment>
    <function><type><specifier pos:line="249" pos:column="5">public</specifier> <name pos:line="249" pos:column="12">int</name></type> <name pos:line="249" pos:column="16">getSteps</name><parameter_list pos:line="249" pos:column="24">(<param><decl><type><specifier pos:line="249" pos:column="25">final</specifier> <name pos:line="249" pos:column="31">long</name></type> <name pos:line="249" pos:column="36">date</name></decl></param>)</parameter_list> <block pos:line="249" pos:column="42">{
        <decl_stmt><decl><type><name pos:line="250" pos:column="9">Cursor</name></type> <name pos:line="250" pos:column="16">c</name> <init pos:line="250" pos:column="18">= <expr><call><name pos:line="250" pos:column="20">getReadableDatabase</name><argument_list pos:line="250" pos:column="39">()</argument_list></call><op:operator pos:line="250" pos:column="41">.</op:operator><call><name pos:line="250" pos:column="42">query</name><argument_list pos:line="250" pos:column="47">(<argument><expr><name pos:line="250" pos:column="48">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="250" pos:column="57">new</op:operator> <name><name pos:line="250" pos:column="61">String</name><index pos:line="250" pos:column="67">[]</index></name><block pos:line="250" pos:column="69">{<expr><lit:literal type="string" pos:line="250" pos:column="70">"steps"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="250" pos:column="80">"date = ?"</lit:literal></expr></argument>,
                <argument><expr><op:operator pos:line="251" pos:column="17">new</op:operator> <name><name pos:line="251" pos:column="21">String</name><index pos:line="251" pos:column="27">[]</index></name><block pos:line="251" pos:column="29">{<expr><call><name><name pos:line="251" pos:column="30">String</name><op:operator pos:line="251" pos:column="36">.</op:operator><name pos:line="251" pos:column="37">valueOf</name></name><argument_list pos:line="251" pos:column="44">(<argument><expr><name pos:line="251" pos:column="45">date</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><lit:literal type="null" pos:line="251" pos:column="53">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="251" pos:column="59">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="251" pos:column="65">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="252" pos:column="9">c</name><op:operator pos:line="252" pos:column="10">.</op:operator><name pos:line="252" pos:column="11">moveToFirst</name></name><argument_list pos:line="252" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="253" pos:column="9">int</name></type> <name pos:line="253" pos:column="13">re</name></decl>;</decl_stmt>
        <if pos:line="254" pos:column="9">if <condition pos:line="254" pos:column="12">(<expr><call><name><name pos:line="254" pos:column="13">c</name><op:operator pos:line="254" pos:column="14">.</op:operator><name pos:line="254" pos:column="15">getCount</name></name><argument_list pos:line="254" pos:column="23">()</argument_list></call> <op:operator pos:line="254" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="254" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="254" pos:column="31"> <expr_stmt><expr><name pos:line="254" pos:column="32">re</name> <op:operator pos:line="254" pos:column="35">=</op:operator> <name><name pos:line="254" pos:column="37">Integer</name><op:operator pos:line="254" pos:column="44">.</op:operator><name pos:line="254" pos:column="45">MIN_VALUE</name></name></expr>;</expr_stmt></then>
        <else pos:line="255" pos:column="9">else <expr_stmt><expr><name pos:line="255" pos:column="14">re</name> <op:operator pos:line="255" pos:column="17">=</op:operator> <call><name><name pos:line="255" pos:column="19">c</name><op:operator pos:line="255" pos:column="20">.</op:operator><name pos:line="255" pos:column="21">getInt</name></name><argument_list pos:line="255" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="255" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><call><name><name pos:line="256" pos:column="9">c</name><op:operator pos:line="256" pos:column="10">.</op:operator><name pos:line="256" pos:column="11">close</name></name><argument_list pos:line="256" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="257" pos:column="9">return <expr><name pos:line="257" pos:column="16">re</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="260" pos:column="5">/**
     * Get the number of steps taken between 'start' and 'end' date
     * &lt;p/&gt;
     * Note that todays entry might have a negative value, so take care of that
     * if 'end' &gt;= Util.getToday()!
     *
     * @param start start date in ms since 1970 (steps for this date included)
     * @param end   end date in ms since 1970 (steps for this date included)
     * @return the number of steps from 'start' to 'end'. Can be &lt; 0 as todays
     * entry might have negative value
     */</comment>
    <function><type><specifier pos:line="271" pos:column="5">public</specifier> <name pos:line="271" pos:column="12">int</name></type> <name pos:line="271" pos:column="16">getSteps</name><parameter_list pos:line="271" pos:column="24">(<param><decl><type><specifier pos:line="271" pos:column="25">final</specifier> <name pos:line="271" pos:column="31">long</name></type> <name pos:line="271" pos:column="36">start</name></decl></param>, <param><decl><type><specifier pos:line="271" pos:column="43">final</specifier> <name pos:line="271" pos:column="49">long</name></type> <name pos:line="271" pos:column="54">end</name></decl></param>)</parameter_list> <block pos:line="271" pos:column="59">{
        <decl_stmt><decl><type><name pos:line="272" pos:column="9">Cursor</name></type> <name pos:line="272" pos:column="16">c</name> <init pos:line="272" pos:column="18">= <expr><call><name pos:line="272" pos:column="20">getReadableDatabase</name><argument_list pos:line="272" pos:column="39">()</argument_list></call>
                <op:operator pos:line="273" pos:column="17">.</op:operator><call><name pos:line="273" pos:column="18">query</name><argument_list pos:line="273" pos:column="23">(<argument><expr><name pos:line="273" pos:column="24">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="273" pos:column="33">new</op:operator> <name><name pos:line="273" pos:column="37">String</name><index pos:line="273" pos:column="43">[]</index></name><block pos:line="273" pos:column="45">{<expr><lit:literal type="string" pos:line="273" pos:column="46">"SUM(steps)"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="273" pos:column="61">"date &gt;= ? AND date &lt;= ?"</lit:literal></expr></argument>,
                        <argument><expr><op:operator pos:line="274" pos:column="25">new</op:operator> <name><name pos:line="274" pos:column="29">String</name><index pos:line="274" pos:column="35">[]</index></name><block pos:line="274" pos:column="37">{<expr><call><name><name pos:line="274" pos:column="38">String</name><op:operator pos:line="274" pos:column="44">.</op:operator><name pos:line="274" pos:column="45">valueOf</name></name><argument_list pos:line="274" pos:column="52">(<argument><expr><name pos:line="274" pos:column="53">start</name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="274" pos:column="61">String</name><op:operator pos:line="274" pos:column="67">.</op:operator><name pos:line="274" pos:column="68">valueOf</name></name><argument_list pos:line="274" pos:column="75">(<argument><expr><name pos:line="274" pos:column="76">end</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><lit:literal type="null" pos:line="274" pos:column="83">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="274" pos:column="89">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="274" pos:column="95">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="275" pos:column="9">int</name></type> <name pos:line="275" pos:column="13">re</name></decl>;</decl_stmt>
        <if pos:line="276" pos:column="9">if <condition pos:line="276" pos:column="12">(<expr><call><name><name pos:line="276" pos:column="13">c</name><op:operator pos:line="276" pos:column="14">.</op:operator><name pos:line="276" pos:column="15">getCount</name></name><argument_list pos:line="276" pos:column="23">()</argument_list></call> <op:operator pos:line="276" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="276" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="276" pos:column="31"> <block pos:line="276" pos:column="32">{
            <expr_stmt><expr><name pos:line="277" pos:column="13">re</name> <op:operator pos:line="277" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="277" pos:column="18">0</lit:literal></expr>;</expr_stmt>
        }</block></then> <else pos:line="278" pos:column="11">else <block pos:line="278" pos:column="16">{
            <expr_stmt><expr><call><name><name pos:line="279" pos:column="13">c</name><op:operator pos:line="279" pos:column="14">.</op:operator><name pos:line="279" pos:column="15">moveToFirst</name></name><argument_list pos:line="279" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="280" pos:column="13">re</name> <op:operator pos:line="280" pos:column="16">=</op:operator> <call><name><name pos:line="280" pos:column="18">c</name><op:operator pos:line="280" pos:column="19">.</op:operator><name pos:line="280" pos:column="20">getInt</name></name><argument_list pos:line="280" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="280" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name pos:line="282" pos:column="9">c</name><op:operator pos:line="282" pos:column="10">.</op:operator><name pos:line="282" pos:column="11">close</name></name><argument_list pos:line="282" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="283" pos:column="9">return <expr><name pos:line="283" pos:column="16">re</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="286" pos:column="5">/**
     * Removes all entries with negative values.
     * &lt;p/&gt;
     * Only call this directly after boot, otherwise it might remove the current
     * day as the current offset is likely to be negative
     */</comment>
    <function><type><name pos:line="292" pos:column="5">void</name></type> <name pos:line="292" pos:column="10">removeNegativeEntries</name><parameter_list pos:line="292" pos:column="31">()</parameter_list> <block pos:line="292" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="293" pos:column="9">getWritableDatabase</name><argument_list pos:line="293" pos:column="28">()</argument_list></call><op:operator pos:line="293" pos:column="30">.</op:operator><call><name pos:line="293" pos:column="31">delete</name><argument_list pos:line="293" pos:column="37">(<argument><expr><name pos:line="293" pos:column="38">DB_NAME</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="293" pos:column="47">"steps &lt; ?"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="293" pos:column="60">new</op:operator> <name><name pos:line="293" pos:column="64">String</name><index pos:line="293" pos:column="70">[]</index></name><block pos:line="293" pos:column="72">{<expr><lit:literal type="string" pos:line="293" pos:column="73">"0"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="296" pos:column="5">/**
     * Removes invalid entries from the database.
     * &lt;p/&gt;
     * Currently, an invalid input is such with steps &gt;= 200,000
     */</comment>
    <function><type><specifier pos:line="301" pos:column="5">public</specifier> <name pos:line="301" pos:column="12">void</name></type> <name pos:line="301" pos:column="17">removeInvalidEntries</name><parameter_list pos:line="301" pos:column="37">()</parameter_list> <block pos:line="301" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="302" pos:column="9">getWritableDatabase</name><argument_list pos:line="302" pos:column="28">()</argument_list></call><op:operator pos:line="302" pos:column="30">.</op:operator><call><name pos:line="302" pos:column="31">delete</name><argument_list pos:line="302" pos:column="37">(<argument><expr><name pos:line="302" pos:column="38">DB_NAME</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="302" pos:column="47">"steps &gt;= ?"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="302" pos:column="61">new</op:operator> <name><name pos:line="302" pos:column="65">String</name><index pos:line="302" pos:column="71">[]</index></name><block pos:line="302" pos:column="73">{<expr><lit:literal type="string" pos:line="302" pos:column="74">"200000"</lit:literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="305" pos:column="5">/**
     * Get the number of 'valid' days (= days with a step value &gt; 0).
     * &lt;p/&gt;
     * The current day is also added to this number, even if the value in the
     * database might still be &lt; 0.
     * &lt;p/&gt;
     * It is safe to divide by the return value as this will be at least 1 (and
     * not 0).
     *
     * @return the number of days with a step value &gt; 0, return will be &gt;= 1
     */</comment>
    <function><type><specifier pos:line="316" pos:column="5">public</specifier> <name pos:line="316" pos:column="12">int</name></type> <name pos:line="316" pos:column="16">getDays</name><parameter_list pos:line="316" pos:column="23">()</parameter_list> <block pos:line="316" pos:column="26">{
        <decl_stmt><decl><type><name pos:line="317" pos:column="9">Cursor</name></type> <name pos:line="317" pos:column="16">c</name> <init pos:line="317" pos:column="18">= <expr><call><name pos:line="317" pos:column="20">getReadableDatabase</name><argument_list pos:line="317" pos:column="39">()</argument_list></call>
                <op:operator pos:line="318" pos:column="17">.</op:operator><call><name pos:line="318" pos:column="18">query</name><argument_list pos:line="318" pos:column="23">(<argument><expr><name pos:line="318" pos:column="24">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="318" pos:column="33">new</op:operator> <name><name pos:line="318" pos:column="37">String</name><index pos:line="318" pos:column="43">[]</index></name><block pos:line="318" pos:column="45">{<expr><lit:literal type="string" pos:line="318" pos:column="46">"COUNT(*)"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="string" pos:line="318" pos:column="59">"steps &gt; ? AND date &lt; ? AND date &gt; 0"</lit:literal></expr></argument>,
                        <argument><expr><op:operator pos:line="319" pos:column="25">new</op:operator> <name><name pos:line="319" pos:column="29">String</name><index pos:line="319" pos:column="35">[]</index></name><block pos:line="319" pos:column="37">{<expr><call><name><name pos:line="319" pos:column="38">String</name><op:operator pos:line="319" pos:column="44">.</op:operator><name pos:line="319" pos:column="45">valueOf</name></name><argument_list pos:line="319" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="319" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name><name pos:line="319" pos:column="57">String</name><op:operator pos:line="319" pos:column="63">.</op:operator><name pos:line="319" pos:column="64">valueOf</name></name><argument_list pos:line="319" pos:column="71">(<argument><expr><call><name><name pos:line="319" pos:column="72">Util</name><op:operator pos:line="319" pos:column="76">.</op:operator><name pos:line="319" pos:column="77">getToday</name></name><argument_list pos:line="319" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><lit:literal type="null" pos:line="319" pos:column="91">null</lit:literal></expr></argument>,
                        <argument><expr><lit:literal type="null" pos:line="320" pos:column="25">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="320" pos:column="31">null</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="321" pos:column="9">c</name><op:operator pos:line="321" pos:column="10">.</op:operator><name pos:line="321" pos:column="11">moveToFirst</name></name><argument_list pos:line="321" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:line="322" pos:column="9">// todays is not counted yet</comment>
        <decl_stmt><decl><type><name pos:line="323" pos:column="9">int</name></type> <name pos:line="323" pos:column="13">re</name> <init pos:line="323" pos:column="16">= <expr><call><name><name pos:line="323" pos:column="18">c</name><op:operator pos:line="323" pos:column="19">.</op:operator><name pos:line="323" pos:column="20">getInt</name></name><argument_list pos:line="323" pos:column="26">(<argument><expr><lit:literal type="number" pos:line="323" pos:column="27">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="323" pos:column="30">+</op:operator> <lit:literal type="number" pos:line="323" pos:column="32">1</lit:literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="324" pos:column="9">c</name><op:operator pos:line="324" pos:column="10">.</op:operator><name pos:line="324" pos:column="11">close</name></name><argument_list pos:line="324" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="325" pos:column="9">return <expr><name pos:line="325" pos:column="16">re</name> <op:operator pos:line="325" pos:column="19">&lt;=</op:operator> <lit:literal type="number" pos:line="325" pos:column="22">0</lit:literal> <op:operator pos:line="325" pos:column="24">?</op:operator> <lit:literal type="number" pos:line="325" pos:column="26">1</lit:literal> <op:operator pos:line="325" pos:column="28">:</op:operator> <name pos:line="325" pos:column="30">re</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="328" pos:column="5">/**
     * Saves the current 'steps since boot' sensor value in the database.
     *
     * @param steps since boot
     */</comment>
    <function><type><specifier pos:line="333" pos:column="5">public</specifier> <name pos:line="333" pos:column="12">void</name></type> <name pos:line="333" pos:column="17">saveCurrentSteps</name><parameter_list pos:line="333" pos:column="33">(<param><decl><type><name pos:line="333" pos:column="34">int</name></type> <name pos:line="333" pos:column="38">steps</name></decl></param>)</parameter_list> <block pos:line="333" pos:column="45">{
        <decl_stmt><decl><type><name pos:line="334" pos:column="9">ContentValues</name></type> <name pos:line="334" pos:column="23">values</name> <init pos:line="334" pos:column="30">= <expr><op:operator pos:line="334" pos:column="32">new</op:operator> <call><name pos:line="334" pos:column="36">ContentValues</name><argument_list pos:line="334" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="335" pos:column="9">values</name><op:operator pos:line="335" pos:column="15">.</op:operator><name pos:line="335" pos:column="16">put</name></name><argument_list pos:line="335" pos:column="19">(<argument><expr><lit:literal type="string" pos:line="335" pos:column="20">"steps"</lit:literal></expr></argument>, <argument><expr><name pos:line="335" pos:column="29">steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="336" pos:column="9">if <condition pos:line="336" pos:column="12">(<expr><call><name pos:line="336" pos:column="13">getWritableDatabase</name><argument_list pos:line="336" pos:column="32">()</argument_list></call><op:operator pos:line="336" pos:column="34">.</op:operator><call><name pos:line="336" pos:column="35">update</name><argument_list pos:line="336" pos:column="41">(<argument><expr><name pos:line="336" pos:column="42">DB_NAME</name></expr></argument>, <argument><expr><name pos:line="336" pos:column="51">values</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="336" pos:column="59">"date = -1"</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="336" pos:column="72">null</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="336" pos:column="78">==</op:operator> <lit:literal type="number" pos:line="336" pos:column="81">0</lit:literal></expr>)</condition><then pos:line="336" pos:column="83"> <block pos:line="336" pos:column="84">{
            <expr_stmt><expr><call><name><name pos:line="337" pos:column="13">values</name><op:operator pos:line="337" pos:column="19">.</op:operator><name pos:line="337" pos:column="20">put</name></name><argument_list pos:line="337" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="337" pos:column="24">"date"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="337" pos:column="32">-</op:operator><lit:literal type="number" pos:line="337" pos:column="33">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="338" pos:column="13">getWritableDatabase</name><argument_list pos:line="338" pos:column="32">()</argument_list></call><op:operator pos:line="338" pos:column="34">.</op:operator><call><name pos:line="338" pos:column="35">insert</name><argument_list pos:line="338" pos:column="41">(<argument><expr><name pos:line="338" pos:column="42">DB_NAME</name></expr></argument>, <argument><expr><lit:literal type="null" pos:line="338" pos:column="51">null</lit:literal></expr></argument>, <argument><expr><name pos:line="338" pos:column="57">values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if pos:line="340" pos:column="9">if <condition pos:line="340" pos:column="12">(<expr><name><name pos:line="340" pos:column="13">BuildConfig</name><op:operator pos:line="340" pos:column="24">.</op:operator><name pos:line="340" pos:column="25">DEBUG</name></name></expr>)</condition><then pos:line="340" pos:column="31"> <block pos:line="340" pos:column="32">{
            <expr_stmt><expr><call><name><name pos:line="341" pos:column="13">Logger</name><op:operator pos:line="341" pos:column="19">.</op:operator><name pos:line="341" pos:column="20">log</name></name><argument_list pos:line="341" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="341" pos:column="24">"saving steps in db: "</lit:literal> <op:operator pos:line="341" pos:column="47">+</op:operator> <name pos:line="341" pos:column="49">steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="345" pos:column="5">/**
     * Reads the latest saved value for the 'steps since boot' sensor value.
     *
     * @return the current number of steps saved in the database or 0 if there
     * is no entry
     */</comment>
    <function><type><specifier pos:line="351" pos:column="5">public</specifier> <name pos:line="351" pos:column="12">int</name></type> <name pos:line="351" pos:column="16">getCurrentSteps</name><parameter_list pos:line="351" pos:column="31">()</parameter_list> <block pos:line="351" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="352" pos:column="9">int</name></type> <name pos:line="352" pos:column="13">re</name> <init pos:line="352" pos:column="16">= <expr><call><name pos:line="352" pos:column="18">getSteps</name><argument_list pos:line="352" pos:column="26">(<argument><expr><op:operator pos:line="352" pos:column="27">-</op:operator><lit:literal type="number" pos:line="352" pos:column="28">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return pos:line="353" pos:column="9">return <expr><name pos:line="353" pos:column="16">re</name> <op:operator pos:line="353" pos:column="19">==</op:operator> <name><name pos:line="353" pos:column="22">Integer</name><op:operator pos:line="353" pos:column="29">.</op:operator><name pos:line="353" pos:column="30">MIN_VALUE</name></name> <op:operator pos:line="353" pos:column="40">?</op:operator> <lit:literal type="number" pos:line="353" pos:column="42">0</lit:literal> <op:operator pos:line="353" pos:column="44">:</op:operator> <name pos:line="353" pos:column="46">re</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="356" pos:column="5">/**
     * Should be called when the timezone on the device changes. This will adjust the databas entries
     * so that each entry still translates to midnight of a day.
     *
     * @param offsetDifference the difference in the rawOffsets of the two timeZones (new - old) in milliseconds
     */</comment>
    <function><type><specifier pos:line="362" pos:column="5">public</specifier> <name pos:line="362" pos:column="12">void</name></type> <name pos:line="362" pos:column="17">timeZoneChanged</name><parameter_list pos:line="362" pos:column="32">(<param><decl><type><name pos:line="362" pos:column="33">int</name></type> <name pos:line="362" pos:column="37">offsetDifference</name></decl></param>)</parameter_list> <block pos:line="362" pos:column="55">{
        <try pos:line="363" pos:column="9">try <block pos:line="363" pos:column="13">{
            <expr_stmt><expr><call><name pos:line="364" pos:column="13">getWritableDatabase</name><argument_list pos:line="364" pos:column="32">()</argument_list></call>
                    <op:operator pos:line="365" pos:column="21">.</op:operator><call><name pos:line="365" pos:column="22">execSQL</name><argument_list pos:line="365" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="365" pos:column="30">"UPDATE "</lit:literal> <op:operator pos:line="365" pos:column="40">+</op:operator> <name pos:line="365" pos:column="42">DB_NAME</name> <op:operator pos:line="365" pos:column="50">+</op:operator> <lit:literal type="string" pos:line="365" pos:column="52">" SET date = date - '"</lit:literal> <op:operator pos:line="365" pos:column="75">+</op:operator> <name pos:line="365" pos:column="77">offsetDifference</name> <op:operator pos:line="365" pos:column="94">+</op:operator>
                            <lit:literal type="string" pos:line="366" pos:column="29">"' WHERE date &gt; 0"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="367" pos:column="11">catch <parameter_list pos:line="367" pos:column="17">(<param><decl><type><name pos:line="367" pos:column="18">Exception</name></type> <name pos:line="367" pos:column="28">e</name></decl></param>)</parameter_list> <block pos:line="367" pos:column="31">{
            <comment type="line" pos:line="368" pos:column="13">// try calling the upgrade method again to drop the PRIMARY KEY constraint</comment>
            <expr_stmt><expr><call><name pos:line="369" pos:column="13">onUpgrade</name><argument_list pos:line="369" pos:column="22">(<argument><expr><call><name pos:line="369" pos:column="23">getWritableDatabase</name><argument_list pos:line="369" pos:column="42">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="369" pos:column="46">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="369" pos:column="49">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="373" pos:column="5">/**
     * Gets the date of the newest entry
     *
     * @return the date in milliseconds since 1970
     */</comment>
    <function><type><specifier pos:line="378" pos:column="5">public</specifier> <name pos:line="378" pos:column="12">long</name></type> <name pos:line="378" pos:column="17">getLastDay</name><parameter_list pos:line="378" pos:column="27">()</parameter_list> <block pos:line="378" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="379" pos:column="9">Cursor</name></type> <name pos:line="379" pos:column="16">c</name> <init pos:line="379" pos:column="18">= <expr><call><name pos:line="379" pos:column="20">getReadableDatabase</name><argument_list pos:line="379" pos:column="39">()</argument_list></call>
                <op:operator pos:line="380" pos:column="17">.</op:operator><call><name pos:line="380" pos:column="18">query</name><argument_list pos:line="380" pos:column="23">(<argument><expr><name pos:line="380" pos:column="24">DB_NAME</name></expr></argument>, <argument><expr><op:operator pos:line="380" pos:column="33">new</op:operator> <name><name pos:line="380" pos:column="37">String</name><index pos:line="380" pos:column="43">[]</index></name><block pos:line="380" pos:column="45">{<expr><lit:literal type="string" pos:line="380" pos:column="46">"date"</lit:literal></expr>}</block></expr></argument>, <argument><expr><lit:literal type="null" pos:line="380" pos:column="55">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="380" pos:column="61">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="380" pos:column="67">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="null" pos:line="380" pos:column="73">null</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="380" pos:column="79">"date DESC"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="380" pos:column="92">"1"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="381" pos:column="9">c</name><op:operator pos:line="381" pos:column="10">.</op:operator><name pos:line="381" pos:column="11">moveToFirst</name></name><argument_list pos:line="381" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="382" pos:column="9">long</name></type> <name pos:line="382" pos:column="14">re</name> <init pos:line="382" pos:column="17">= <expr><call><name><name pos:line="382" pos:column="19">c</name><op:operator pos:line="382" pos:column="20">.</op:operator><name pos:line="382" pos:column="21">getLong</name></name><argument_list pos:line="382" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="382" pos:column="29">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="383" pos:column="9">c</name><op:operator pos:line="383" pos:column="10">.</op:operator><name pos:line="383" pos:column="11">close</name></name><argument_list pos:line="383" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="384" pos:column="9">return <expr><name pos:line="384" pos:column="16">re</name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
