<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\Apps\Pedometer-master\src\main\java\de\j4velin\pedometer\util\Logger.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 * Copyright 2013 Thomas Hoffmann
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package pos:line="17" pos:column="1">package <name><name pos:line="17" pos:column="9">de</name><op:operator pos:line="17" pos:column="11">.</op:operator><name pos:line="17" pos:column="12">j4velin</name><op:operator pos:line="17" pos:column="19">.</op:operator><name pos:line="17" pos:column="20">pedometer</name><op:operator pos:line="17" pos:column="29">.</op:operator><name pos:line="17" pos:column="30">util</name></name>;</package>

<import pos:line="19" pos:column="1">import <name><name pos:line="19" pos:column="8">java</name><op:operator pos:line="19" pos:column="12">.</op:operator><name pos:line="19" pos:column="13">io</name><op:operator pos:line="19" pos:column="15">.</op:operator><name pos:line="19" pos:column="16">File</name></name>;</import>
<import pos:line="20" pos:column="1">import <name><name pos:line="20" pos:column="8">java</name><op:operator pos:line="20" pos:column="12">.</op:operator><name pos:line="20" pos:column="13">io</name><op:operator pos:line="20" pos:column="15">.</op:operator><name pos:line="20" pos:column="16">FileWriter</name></name>;</import>
<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">java</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">io</name><op:operator pos:line="21" pos:column="15">.</op:operator><name pos:line="21" pos:column="16">IOException</name></name>;</import>
<import pos:line="22" pos:column="1">import <name><name pos:line="22" pos:column="8">java</name><op:operator pos:line="22" pos:column="12">.</op:operator><name pos:line="22" pos:column="13">util</name><op:operator pos:line="22" pos:column="17">.</op:operator><name pos:line="22" pos:column="18">Date</name></name>;</import>

<import pos:line="24" pos:column="1">import <name><name pos:line="24" pos:column="8">android</name><op:operator pos:line="24" pos:column="15">.</op:operator><name pos:line="24" pos:column="16">database</name><op:operator pos:line="24" pos:column="24">.</op:operator><name pos:line="24" pos:column="25">Cursor</name></name>;</import>
<import pos:line="25" pos:column="1">import <name><name pos:line="25" pos:column="8">android</name><op:operator pos:line="25" pos:column="15">.</op:operator><name pos:line="25" pos:column="16">os</name><op:operator pos:line="25" pos:column="18">.</op:operator><name pos:line="25" pos:column="19">Environment</name></name>;</import>

<import pos:line="27" pos:column="1">import <name><name pos:line="27" pos:column="8">de</name><op:operator pos:line="27" pos:column="10">.</op:operator><name pos:line="27" pos:column="11">j4velin</name><op:operator pos:line="27" pos:column="18">.</op:operator><name pos:line="27" pos:column="19">pedometer</name><op:operator pos:line="27" pos:column="28">.</op:operator><name pos:line="27" pos:column="29">BuildConfig</name></name>;</import>

<class><specifier pos:line="29" pos:column="1">public</specifier> class <name pos:line="29" pos:column="14">Logger</name> <block pos:line="29" pos:column="21">{

    <decl_stmt><decl><type><specifier pos:line="31" pos:column="5">private</specifier> <specifier pos:line="31" pos:column="13">static</specifier> <name pos:line="31" pos:column="20">FileWriter</name></type> <name pos:line="31" pos:column="31">fw</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="32" pos:column="5">private</specifier> <specifier pos:line="32" pos:column="13">static</specifier> <specifier pos:line="32" pos:column="20">final</specifier> <name pos:line="32" pos:column="26">Date</name></type> <name pos:line="32" pos:column="31">date</name> <init pos:line="32" pos:column="36">= <expr><op:operator pos:line="32" pos:column="38">new</op:operator> <call><name pos:line="32" pos:column="42">Date</name><argument_list pos:line="32" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="33" pos:column="5">private</specifier> <specifier pos:line="33" pos:column="13">final</specifier> <specifier pos:line="33" pos:column="19">static</specifier> <name pos:line="33" pos:column="26">String</name></type> <name pos:line="33" pos:column="33">APP</name> <init pos:line="33" pos:column="37">= <expr><lit:literal type="string" pos:line="33" pos:column="39">"Pedometer"</lit:literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="35" pos:column="5">public</specifier> <specifier pos:line="35" pos:column="12">static</specifier> <name pos:line="35" pos:column="19">void</name></type> <name pos:line="35" pos:column="24">log</name><parameter_list pos:line="35" pos:column="27">(<param><decl><type><name pos:line="35" pos:column="28">Throwable</name></type> <name pos:line="35" pos:column="38">ex</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">log</name><argument_list pos:line="36" pos:column="12">(<argument><expr><call><name><name pos:line="36" pos:column="13">ex</name><op:operator pos:line="36" pos:column="15">.</op:operator><name pos:line="36" pos:column="16">getMessage</name></name><argument_list pos:line="36" pos:column="26">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for pos:line="37" pos:column="9">for (<init><decl><type><name pos:line="37" pos:column="14">StackTraceElement</name></type> <name pos:line="37" pos:column="32">ste</name> <range pos:line="37" pos:column="36">: <expr><call><name><name pos:line="37" pos:column="38">ex</name><op:operator pos:line="37" pos:column="40">.</op:operator><name pos:line="37" pos:column="41">getStackTrace</name></name><argument_list pos:line="37" pos:column="54">()</argument_list></call></expr></range></decl></init>) <block pos:line="37" pos:column="58">{
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">log</name><argument_list pos:line="38" pos:column="16">(<argument><expr><call><name><name pos:line="38" pos:column="17">ste</name><op:operator pos:line="38" pos:column="20">.</op:operator><name pos:line="38" pos:column="21">toString</name></name><argument_list pos:line="38" pos:column="29">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><specifier pos:line="42" pos:column="5">public</specifier> <specifier pos:line="42" pos:column="12">static</specifier> <name pos:line="42" pos:column="19">void</name></type> <name pos:line="42" pos:column="24">log</name><parameter_list pos:line="42" pos:column="27">(<param><decl><type><specifier pos:line="42" pos:column="28">final</specifier> <name pos:line="42" pos:column="34">Cursor</name></type> <name pos:line="42" pos:column="41">c</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="44">{
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><op:operator pos:line="43" pos:column="13">!</op:operator><name><name pos:line="43" pos:column="14">BuildConfig</name><op:operator pos:line="43" pos:column="25">.</op:operator><name pos:line="43" pos:column="26">DEBUG</name></name></expr>)</condition><then pos:line="43" pos:column="32"> <return pos:line="43" pos:column="33">return;</return></then></if>
        <expr_stmt><expr><call><name><name pos:line="44" pos:column="9">c</name><op:operator pos:line="44" pos:column="10">.</op:operator><name pos:line="44" pos:column="11">moveToFirst</name></name><argument_list pos:line="44" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="45" pos:column="9">String</name></type> <name pos:line="45" pos:column="16">title</name> <init pos:line="45" pos:column="22">= <expr><lit:literal type="string" pos:line="45" pos:column="24">""</lit:literal></expr></init></decl>;</decl_stmt>
        <for pos:line="46" pos:column="9">for (<init><decl><type><name pos:line="46" pos:column="14">int</name></type> <name pos:line="46" pos:column="18">i</name> <init pos:line="46" pos:column="20">= <expr><lit:literal type="number" pos:line="46" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="46" pos:column="25">i</name> <op:operator pos:line="46" pos:column="27">&lt;</op:operator> <call><name><name pos:line="46" pos:column="29">c</name><op:operator pos:line="46" pos:column="30">.</op:operator><name pos:line="46" pos:column="31">getColumnCount</name></name><argument_list pos:line="46" pos:column="45">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="46" pos:column="49">i</name><op:operator pos:line="46" pos:column="50">++</op:operator></expr></incr>)
            <expr_stmt><expr><name pos:line="47" pos:column="13">title</name> <op:operator pos:line="47" pos:column="19">+=</op:operator> <call><name><name pos:line="47" pos:column="22">c</name><op:operator pos:line="47" pos:column="23">.</op:operator><name pos:line="47" pos:column="24">getColumnName</name></name><argument_list pos:line="47" pos:column="37">(<argument><expr><name pos:line="47" pos:column="38">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="47" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="47" pos:column="43">" | "</lit:literal></expr>;</expr_stmt></for>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">log</name><argument_list pos:line="48" pos:column="12">(<argument><expr><name pos:line="48" pos:column="13">title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while pos:line="49" pos:column="9">while <condition pos:line="49" pos:column="15">(<expr><op:operator pos:line="49" pos:column="16">!</op:operator><call><name><name pos:line="49" pos:column="17">c</name><op:operator pos:line="49" pos:column="18">.</op:operator><name pos:line="49" pos:column="19">isAfterLast</name></name><argument_list pos:line="49" pos:column="30">()</argument_list></call></expr>)</condition> <block pos:line="49" pos:column="34">{
            <expr_stmt><expr><name pos:line="50" pos:column="13">title</name> <op:operator pos:line="50" pos:column="19">=</op:operator> <lit:literal type="string" pos:line="50" pos:column="21">""</lit:literal></expr>;</expr_stmt>
            <for pos:line="51" pos:column="13">for (<init><decl><type><name pos:line="51" pos:column="18">int</name></type> <name pos:line="51" pos:column="22">i</name> <init pos:line="51" pos:column="24">= <expr><lit:literal type="number" pos:line="51" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="51" pos:column="29">i</name> <op:operator pos:line="51" pos:column="31">&lt;</op:operator> <call><name><name pos:line="51" pos:column="33">c</name><op:operator pos:line="51" pos:column="34">.</op:operator><name pos:line="51" pos:column="35">getColumnCount</name></name><argument_list pos:line="51" pos:column="49">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="51" pos:column="53">i</name><op:operator pos:line="51" pos:column="54">++</op:operator></expr></incr>)
                <expr_stmt><expr><name pos:line="52" pos:column="17">title</name> <op:operator pos:line="52" pos:column="23">+=</op:operator> <call><name><name pos:line="52" pos:column="26">c</name><op:operator pos:line="52" pos:column="27">.</op:operator><name pos:line="52" pos:column="28">getString</name></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="41">+</op:operator> <lit:literal type="string" pos:line="52" pos:column="43">" | "</lit:literal></expr>;</expr_stmt></for>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">log</name><argument_list pos:line="53" pos:column="16">(<argument><expr><name pos:line="53" pos:column="17">title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">c</name><op:operator pos:line="54" pos:column="14">.</op:operator><name pos:line="54" pos:column="15">moveToNext</name></name><argument_list pos:line="54" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

    <function><type><annotation pos:line="58" pos:column="5">@<name pos:line="58" pos:column="6">SuppressWarnings</name><argument_list pos:line="58" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="23">"deprecation"</lit:literal></expr></argument>)</argument_list></annotation>
    <specifier pos:line="59" pos:column="5">public</specifier> <specifier pos:line="59" pos:column="12">static</specifier> <name pos:line="59" pos:column="19">void</name></type> <name pos:line="59" pos:column="24">log</name><parameter_list pos:line="59" pos:column="27">(<param><decl><type><name pos:line="59" pos:column="28">String</name></type> <name pos:line="59" pos:column="35">msg</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="40">{
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><op:operator pos:line="60" pos:column="13">!</op:operator><name><name pos:line="60" pos:column="14">BuildConfig</name><op:operator pos:line="60" pos:column="25">.</op:operator><name pos:line="60" pos:column="26">DEBUG</name></name></expr>)</condition><then pos:line="60" pos:column="32"> <return pos:line="60" pos:column="33">return;</return></then></if>
        <expr_stmt><expr><call><name><name pos:line="61" pos:column="9">android</name><op:operator pos:line="61" pos:column="16">.</op:operator><name pos:line="61" pos:column="17">util</name><op:operator pos:line="61" pos:column="21">.</op:operator><name pos:line="61" pos:column="22">Log</name><op:operator pos:line="61" pos:column="25">.</op:operator><name pos:line="61" pos:column="26">d</name></name><argument_list pos:line="61" pos:column="27">(<argument><expr><name pos:line="61" pos:column="28">APP</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="33">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try pos:line="62" pos:column="9">try <block pos:line="62" pos:column="13">{
            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><name pos:line="63" pos:column="17">fw</name> <op:operator pos:line="63" pos:column="20">==</op:operator> <lit:literal type="null" pos:line="63" pos:column="23">null</lit:literal></expr>)</condition><then pos:line="63" pos:column="28"> <block pos:line="63" pos:column="29">{
                <expr_stmt><expr><name pos:line="64" pos:column="17">fw</name> <op:operator pos:line="64" pos:column="20">=</op:operator> <op:operator pos:line="64" pos:column="22">new</op:operator> <call><name pos:line="64" pos:column="26">FileWriter</name><argument_list pos:line="64" pos:column="36">(<argument><expr><op:operator pos:line="64" pos:column="37">new</op:operator> <call><name pos:line="64" pos:column="41">File</name><argument_list pos:line="64" pos:column="45">(
                        <argument><expr><call><name><name pos:line="65" pos:column="25">Environment</name><op:operator pos:line="65" pos:column="36">.</op:operator><name pos:line="65" pos:column="37">getExternalStorageDirectory</name></name><argument_list pos:line="65" pos:column="64">()</argument_list></call><op:operator pos:line="65" pos:column="66">.</op:operator><call><name pos:line="65" pos:column="67">toString</name><argument_list pos:line="65" pos:column="75">()</argument_list></call> <op:operator pos:line="65" pos:column="78">+</op:operator> <lit:literal type="string" pos:line="65" pos:column="80">"/"</lit:literal> <op:operator pos:line="65" pos:column="84">+</op:operator> <name pos:line="65" pos:column="86">APP</name> <op:operator pos:line="65" pos:column="90">+</op:operator> <lit:literal type="string" pos:line="65" pos:column="92">".log"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><lit:literal type="boolean" pos:line="66" pos:column="25">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name pos:line="68" pos:column="13">date</name><op:operator pos:line="68" pos:column="17">.</op:operator><name pos:line="68" pos:column="18">setTime</name></name><argument_list pos:line="68" pos:column="25">(<argument><expr><call><name><name pos:line="68" pos:column="26">System</name><op:operator pos:line="68" pos:column="32">.</op:operator><name pos:line="68" pos:column="33">currentTimeMillis</name></name><argument_list pos:line="68" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="69" pos:column="13">fw</name><op:operator pos:line="69" pos:column="15">.</op:operator><name pos:line="69" pos:column="16">write</name></name><argument_list pos:line="69" pos:column="21">(<argument><expr><call><name><name pos:line="69" pos:column="22">date</name><op:operator pos:line="69" pos:column="26">.</op:operator><name pos:line="69" pos:column="27">toLocaleString</name></name><argument_list pos:line="69" pos:column="41">()</argument_list></call> <op:operator pos:line="69" pos:column="44">+</op:operator> <lit:literal type="string" pos:line="69" pos:column="46">" - "</lit:literal> <op:operator pos:line="69" pos:column="52">+</op:operator> <name pos:line="69" pos:column="54">msg</name> <op:operator pos:line="69" pos:column="58">+</op:operator> <lit:literal type="string" pos:line="69" pos:column="60">"\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="70" pos:column="13">fw</name><op:operator pos:line="70" pos:column="15">.</op:operator><name pos:line="70" pos:column="16">flush</name></name><argument_list pos:line="70" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch pos:line="71" pos:column="11">catch <parameter_list pos:line="71" pos:column="17">(<param><decl><type><name pos:line="71" pos:column="18">IOException</name></type> <name pos:line="71" pos:column="30">e</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="33">{
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">e</name><op:operator pos:line="72" pos:column="14">.</op:operator><name pos:line="72" pos:column="15">printStackTrace</name></name><argument_list pos:line="72" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <comment type="line" pos:line="74" pos:column="9">// }</comment>
    }</block></function>

    <function><type><specifier pos:line="77" pos:column="5">protected</specifier> <name pos:line="77" pos:column="15">void</name></type> <name pos:line="77" pos:column="20">finalize</name><parameter_list pos:line="77" pos:column="28">()</parameter_list> <throws pos:line="77" pos:column="31">throws <argument><expr><name pos:line="77" pos:column="38">Throwable</name></expr></argument></throws> <block pos:line="77" pos:column="48">{
        <try pos:line="78" pos:column="9">try <block pos:line="78" pos:column="13">{
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><name pos:line="79" pos:column="17">fw</name> <op:operator pos:line="79" pos:column="20">!=</op:operator> <lit:literal type="null" pos:line="79" pos:column="23">null</lit:literal></expr>)</condition><then pos:line="79" pos:column="28"> <expr_stmt><expr><call><name><name pos:line="79" pos:column="29">fw</name><op:operator pos:line="79" pos:column="31">.</op:operator><name pos:line="79" pos:column="32">close</name></name><argument_list pos:line="79" pos:column="37">()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block> <finally pos:line="80" pos:column="11">finally <block pos:line="80" pos:column="19">{
            <expr_stmt><expr><call><name><name pos:line="81" pos:column="13">super</name><op:operator pos:line="81" pos:column="18">.</op:operator><name pos:line="81" pos:column="19">finalize</name></name><argument_list pos:line="81" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

}</block></class>
</unit>
