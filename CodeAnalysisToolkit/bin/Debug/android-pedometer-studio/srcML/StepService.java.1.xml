<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\android-pedometer-studio\app\src\main\java\name\bagi\levente\pedometer\StepService.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 *  Pedometer - Android App
 *  Copyright (C) 2009 Levente Bagi
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package pos:line="19" pos:column="1">package <name><name pos:line="19" pos:column="9">name</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">bagi</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">levente</name><op:operator pos:line="19" pos:column="26">.</op:operator><name pos:line="19" pos:column="27">pedometer</name></name>;</package>

<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">android</name><op:operator pos:line="21" pos:column="15">.</op:operator><name pos:line="21" pos:column="16">app</name><op:operator pos:line="21" pos:column="19">.</op:operator><name pos:line="21" pos:column="20">Notification</name></name>;</import>
<import pos:line="22" pos:column="1">import <name><name pos:line="22" pos:column="8">android</name><op:operator pos:line="22" pos:column="15">.</op:operator><name pos:line="22" pos:column="16">app</name><op:operator pos:line="22" pos:column="19">.</op:operator><name pos:line="22" pos:column="20">NotificationManager</name></name>;</import>
<import pos:line="23" pos:column="1">import <name><name pos:line="23" pos:column="8">android</name><op:operator pos:line="23" pos:column="15">.</op:operator><name pos:line="23" pos:column="16">app</name><op:operator pos:line="23" pos:column="19">.</op:operator><name pos:line="23" pos:column="20">PendingIntent</name></name>;</import>
<import pos:line="24" pos:column="1">import <name><name pos:line="24" pos:column="8">android</name><op:operator pos:line="24" pos:column="15">.</op:operator><name pos:line="24" pos:column="16">app</name><op:operator pos:line="24" pos:column="19">.</op:operator><name pos:line="24" pos:column="20">Service</name></name>;</import>
<import pos:line="25" pos:column="1">import <name><name pos:line="25" pos:column="8">android</name><op:operator pos:line="25" pos:column="15">.</op:operator><name pos:line="25" pos:column="16">content</name><op:operator pos:line="25" pos:column="23">.</op:operator><name pos:line="25" pos:column="24">BroadcastReceiver</name></name>;</import>
<import pos:line="26" pos:column="1">import <name><name pos:line="26" pos:column="8">android</name><op:operator pos:line="26" pos:column="15">.</op:operator><name pos:line="26" pos:column="16">content</name><op:operator pos:line="26" pos:column="23">.</op:operator><name pos:line="26" pos:column="24">ComponentName</name></name>;</import>
<import pos:line="27" pos:column="1">import <name><name pos:line="27" pos:column="8">android</name><op:operator pos:line="27" pos:column="15">.</op:operator><name pos:line="27" pos:column="16">content</name><op:operator pos:line="27" pos:column="23">.</op:operator><name pos:line="27" pos:column="24">Context</name></name>;</import>
<import pos:line="28" pos:column="1">import <name><name pos:line="28" pos:column="8">android</name><op:operator pos:line="28" pos:column="15">.</op:operator><name pos:line="28" pos:column="16">content</name><op:operator pos:line="28" pos:column="23">.</op:operator><name pos:line="28" pos:column="24">Intent</name></name>;</import>
<import pos:line="29" pos:column="1">import <name><name pos:line="29" pos:column="8">android</name><op:operator pos:line="29" pos:column="15">.</op:operator><name pos:line="29" pos:column="16">content</name><op:operator pos:line="29" pos:column="23">.</op:operator><name pos:line="29" pos:column="24">IntentFilter</name></name>;</import>
<import pos:line="30" pos:column="1">import <name><name pos:line="30" pos:column="8">android</name><op:operator pos:line="30" pos:column="15">.</op:operator><name pos:line="30" pos:column="16">content</name><op:operator pos:line="30" pos:column="23">.</op:operator><name pos:line="30" pos:column="24">SharedPreferences</name></name>;</import>
<import pos:line="31" pos:column="1">import <name><name pos:line="31" pos:column="8">android</name><op:operator pos:line="31" pos:column="15">.</op:operator><name pos:line="31" pos:column="16">hardware</name><op:operator pos:line="31" pos:column="24">.</op:operator><name pos:line="31" pos:column="25">Sensor</name></name>;</import>
<import pos:line="32" pos:column="1">import <name><name pos:line="32" pos:column="8">android</name><op:operator pos:line="32" pos:column="15">.</op:operator><name pos:line="32" pos:column="16">hardware</name><op:operator pos:line="32" pos:column="24">.</op:operator><name pos:line="32" pos:column="25">SensorManager</name></name>;</import>
<import pos:line="33" pos:column="1">import <name><name pos:line="33" pos:column="8">android</name><op:operator pos:line="33" pos:column="15">.</op:operator><name pos:line="33" pos:column="16">os</name><op:operator pos:line="33" pos:column="18">.</op:operator><name pos:line="33" pos:column="19">Binder</name></name>;</import>
<import pos:line="34" pos:column="1">import <name><name pos:line="34" pos:column="8">android</name><op:operator pos:line="34" pos:column="15">.</op:operator><name pos:line="34" pos:column="16">os</name><op:operator pos:line="34" pos:column="18">.</op:operator><name pos:line="34" pos:column="19">IBinder</name></name>;</import>
<import pos:line="35" pos:column="1">import <name><name pos:line="35" pos:column="8">android</name><op:operator pos:line="35" pos:column="15">.</op:operator><name pos:line="35" pos:column="16">os</name><op:operator pos:line="35" pos:column="18">.</op:operator><name pos:line="35" pos:column="19">PowerManager</name></name>;</import>
<import pos:line="36" pos:column="1">import <name><name pos:line="36" pos:column="8">android</name><op:operator pos:line="36" pos:column="15">.</op:operator><name pos:line="36" pos:column="16">preference</name><op:operator pos:line="36" pos:column="26">.</op:operator><name pos:line="36" pos:column="27">PreferenceManager</name></name>;</import>
<import pos:line="37" pos:column="1">import <name><name pos:line="37" pos:column="8">android</name><op:operator pos:line="37" pos:column="15">.</op:operator><name pos:line="37" pos:column="16">util</name><op:operator pos:line="37" pos:column="20">.</op:operator><name pos:line="37" pos:column="21">Log</name></name>;</import>
<import pos:line="38" pos:column="1">import <name><name pos:line="38" pos:column="8">android</name><op:operator pos:line="38" pos:column="15">.</op:operator><name pos:line="38" pos:column="16">widget</name><op:operator pos:line="38" pos:column="22">.</op:operator><name pos:line="38" pos:column="23">Toast</name></name>;</import>



<comment type="block" format="javadoc" pos:line="42" pos:column="1">/**
 * This is an example of implementing an application service that runs locally
 * in the same process as the application.  The {@link StepServiceController}
 * and {@link StepServiceBinding} classes show how to interact with the
 * service.
 *
 * &lt;p&gt;Notice the use of the {@link NotificationManager} when interesting things
 * happen in the service.  This is generally how background services should
 * interact with the user, rather than doing something more disruptive such as
 * calling startActivity().
 */</comment>
<class><specifier pos:line="53" pos:column="1">public</specifier> class <name pos:line="53" pos:column="14">StepService</name> <super><extends pos:line="53" pos:column="26">extends <name pos:line="53" pos:column="34">Service</name></extends></super> <block pos:line="53" pos:column="42">{
	<decl_stmt><decl><type><specifier pos:line="54" pos:column="9">private</specifier> <specifier pos:line="54" pos:column="17">static</specifier> <specifier pos:line="54" pos:column="24">final</specifier> <name pos:line="54" pos:column="30">String</name></type> <name pos:line="54" pos:column="37">TAG</name> <init pos:line="54" pos:column="41">= <expr><lit:literal type="string" pos:line="54" pos:column="43">"name.bagi.levente.pedometer.StepService"</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="55" pos:column="5">private</specifier> <name pos:line="55" pos:column="13">SharedPreferences</name></type> <name pos:line="55" pos:column="31">mSettings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="56" pos:column="5">private</specifier> <name pos:line="56" pos:column="13">PedometerSettings</name></type> <name pos:line="56" pos:column="31">mPedometerSettings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="57" pos:column="5">private</specifier> <name pos:line="57" pos:column="13">SharedPreferences</name></type> <name pos:line="57" pos:column="31">mState</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="58" pos:column="5">private</specifier> <name><name pos:line="58" pos:column="13">SharedPreferences</name><op:operator pos:line="58" pos:column="30">.</op:operator><name pos:line="58" pos:column="31">Editor</name></name></type> <name pos:line="58" pos:column="38">mStateEditor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="59" pos:column="5">private</specifier> <name pos:line="59" pos:column="13">Utils</name></type> <name pos:line="59" pos:column="19">mUtils</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="60" pos:column="5">private</specifier> <name pos:line="60" pos:column="13">SensorManager</name></type> <name pos:line="60" pos:column="27">mSensorManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="61" pos:column="5">private</specifier> <name pos:line="61" pos:column="13">Sensor</name></type> <name pos:line="61" pos:column="20">mSensor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="62" pos:column="5">private</specifier> <name pos:line="62" pos:column="13">StepDetector</name></type> <name pos:line="62" pos:column="26">mStepDetector</name></decl>;</decl_stmt>
    <comment type="line" pos:line="63" pos:column="5">// private StepBuzzer mStepBuzzer; // used for debugging</comment>
    <decl_stmt><decl><type><specifier pos:line="64" pos:column="5">private</specifier> <name pos:line="64" pos:column="13">StepDisplayer</name></type> <name pos:line="64" pos:column="27">mStepDisplayer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="65" pos:column="5">private</specifier> <name pos:line="65" pos:column="13">PaceNotifier</name></type> <name pos:line="65" pos:column="26">mPaceNotifier</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="66" pos:column="5">private</specifier> <name pos:line="66" pos:column="13">DistanceNotifier</name></type> <name pos:line="66" pos:column="30">mDistanceNotifier</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="67" pos:column="5">private</specifier> <name pos:line="67" pos:column="13">SpeedNotifier</name></type> <name pos:line="67" pos:column="27">mSpeedNotifier</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="68" pos:column="5">private</specifier> <name pos:line="68" pos:column="13">CaloriesNotifier</name></type> <name pos:line="68" pos:column="30">mCaloriesNotifier</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="69" pos:column="5">private</specifier> <name pos:line="69" pos:column="13">SpeakingTimer</name></type> <name pos:line="69" pos:column="27">mSpeakingTimer</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier pos:line="71" pos:column="5">private</specifier> <name><name pos:line="71" pos:column="13">PowerManager</name><op:operator pos:line="71" pos:column="25">.</op:operator><name pos:line="71" pos:column="26">WakeLock</name></name></type> <name pos:line="71" pos:column="35">wakeLock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="72" pos:column="5">private</specifier> <name pos:line="72" pos:column="13">NotificationManager</name></type> <name pos:line="72" pos:column="33">mNM</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="74" pos:column="5">private</specifier> <name pos:line="74" pos:column="13">int</name></type> <name pos:line="74" pos:column="17">mSteps</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="75" pos:column="5">private</specifier> <name pos:line="75" pos:column="13">int</name></type> <name pos:line="75" pos:column="17">mPace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="76" pos:column="5">private</specifier> <name pos:line="76" pos:column="13">float</name></type> <name pos:line="76" pos:column="19">mDistance</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="77" pos:column="5">private</specifier> <name pos:line="77" pos:column="13">float</name></type> <name pos:line="77" pos:column="19">mSpeed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="78" pos:column="5">private</specifier> <name pos:line="78" pos:column="13">float</name></type> <name pos:line="78" pos:column="19">mCalories</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc" pos:line="80" pos:column="5">/**
     * Class for clients to access.  Because we know this service always
     * runs in the same process as its clients, we don't need to deal with
     * IPC.
     */</comment>
    <class><specifier pos:line="85" pos:column="5">public</specifier> class <name pos:line="85" pos:column="18">StepBinder</name> <super><extends pos:line="85" pos:column="29">extends <name pos:line="85" pos:column="37">Binder</name></extends></super> <block pos:line="85" pos:column="44">{
        <function><type><name pos:line="86" pos:column="9">StepService</name></type> <name pos:line="86" pos:column="21">getService</name><parameter_list pos:line="86" pos:column="31">()</parameter_list> <block pos:line="86" pos:column="34">{
            <return pos:line="87" pos:column="13">return <expr><name><name pos:line="87" pos:column="20">StepService</name><op:operator pos:line="87" pos:column="31">.</op:operator><name pos:line="87" pos:column="32">this</name></name></expr>;</return>
        }</block></function>
    }</block></class>
    
    <function><type><annotation pos:line="91" pos:column="5">@<name pos:line="91" pos:column="6">Override</name></annotation>
    <specifier pos:line="92" pos:column="5">public</specifier> <name pos:line="92" pos:column="12">void</name></type> <name pos:line="92" pos:column="17">onCreate</name><parameter_list pos:line="92" pos:column="25">()</parameter_list> <block pos:line="92" pos:column="28">{
        <expr_stmt><expr><call><name><name pos:line="93" pos:column="9">Log</name><op:operator pos:line="93" pos:column="12">.</op:operator><name pos:line="93" pos:column="13">i</name></name><argument_list pos:line="93" pos:column="14">(<argument><expr><name pos:line="93" pos:column="15">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="20">"[SERVICE] onCreate"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="94" pos:column="9">super</name><op:operator pos:line="94" pos:column="14">.</op:operator><name pos:line="94" pos:column="15">onCreate</name></name><argument_list pos:line="94" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name pos:line="96" pos:column="9">mNM</name> <op:operator pos:line="96" pos:column="13">=</op:operator> <op:operator pos:line="96" pos:column="15">(</op:operator><name pos:line="96" pos:column="16">NotificationManager</name><op:operator pos:line="96" pos:column="35">)</op:operator><call><name pos:line="96" pos:column="36">getSystemService</name><argument_list pos:line="96" pos:column="52">(<argument><expr><name pos:line="96" pos:column="53">NOTIFICATION_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">showNotification</name><argument_list pos:line="97" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line" pos:line="99" pos:column="9">// Load settings</comment>
        <expr_stmt><expr><name pos:line="100" pos:column="9">mSettings</name> <op:operator pos:line="100" pos:column="19">=</op:operator> <call><name><name pos:line="100" pos:column="21">PreferenceManager</name><op:operator pos:line="100" pos:column="38">.</op:operator><name pos:line="100" pos:column="39">getDefaultSharedPreferences</name></name><argument_list pos:line="100" pos:column="66">(<argument><expr><name pos:line="100" pos:column="67">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="101" pos:column="9">mPedometerSettings</name> <op:operator pos:line="101" pos:column="28">=</op:operator> <op:operator pos:line="101" pos:column="30">new</op:operator> <call><name pos:line="101" pos:column="34">PedometerSettings</name><argument_list pos:line="101" pos:column="51">(<argument><expr><name pos:line="101" pos:column="52">mSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="102" pos:column="9">mState</name> <op:operator pos:line="102" pos:column="16">=</op:operator> <call><name pos:line="102" pos:column="18">getSharedPreferences</name><argument_list pos:line="102" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="39">"state"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="102" pos:column="48">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name pos:line="104" pos:column="9">mUtils</name> <op:operator pos:line="104" pos:column="16">=</op:operator> <call><name><name pos:line="104" pos:column="18">Utils</name><op:operator pos:line="104" pos:column="23">.</op:operator><name pos:line="104" pos:column="24">getInstance</name></name><argument_list pos:line="104" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="105" pos:column="9">mUtils</name><op:operator pos:line="105" pos:column="15">.</op:operator><name pos:line="105" pos:column="16">setService</name></name><argument_list pos:line="105" pos:column="26">(<argument><expr><name pos:line="105" pos:column="27">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="106" pos:column="9">mUtils</name><op:operator pos:line="106" pos:column="15">.</op:operator><name pos:line="106" pos:column="16">initTTS</name></name><argument_list pos:line="106" pos:column="23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name pos:line="108" pos:column="9">acquireWakeLock</name><argument_list pos:line="108" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line" pos:line="110" pos:column="9">// Start detecting</comment>
        <expr_stmt><expr><name pos:line="111" pos:column="9">mStepDetector</name> <op:operator pos:line="111" pos:column="23">=</op:operator> <op:operator pos:line="111" pos:column="25">new</op:operator> <call><name pos:line="111" pos:column="29">StepDetector</name><argument_list pos:line="111" pos:column="41">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="112" pos:column="9">mSensorManager</name> <op:operator pos:line="112" pos:column="24">=</op:operator> <op:operator pos:line="112" pos:column="26">(</op:operator><name pos:line="112" pos:column="27">SensorManager</name><op:operator pos:line="112" pos:column="40">)</op:operator> <call><name pos:line="112" pos:column="42">getSystemService</name><argument_list pos:line="112" pos:column="58">(<argument><expr><name pos:line="112" pos:column="59">SENSOR_SERVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="113" pos:column="9">registerDetector</name><argument_list pos:line="113" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="115" pos:column="9">// Register our receiver for the ACTION_SCREEN_OFF action. This will make our receiver</comment>
        <comment type="line" pos:line="116" pos:column="9">// code be called whenever the phone enters standby mode.</comment>
        <decl_stmt><decl><type><name pos:line="117" pos:column="9">IntentFilter</name></type> <name pos:line="117" pos:column="22">filter</name> <init pos:line="117" pos:column="29">= <expr><op:operator pos:line="117" pos:column="31">new</op:operator> <call><name pos:line="117" pos:column="35">IntentFilter</name><argument_list pos:line="117" pos:column="47">(<argument><expr><name><name pos:line="117" pos:column="48">Intent</name><op:operator pos:line="117" pos:column="54">.</op:operator><name pos:line="117" pos:column="55">ACTION_SCREEN_OFF</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">registerReceiver</name><argument_list pos:line="118" pos:column="25">(<argument><expr><name pos:line="118" pos:column="26">mReceiver</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="37">filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name pos:line="120" pos:column="9">mStepDisplayer</name> <op:operator pos:line="120" pos:column="24">=</op:operator> <op:operator pos:line="120" pos:column="26">new</op:operator> <call><name pos:line="120" pos:column="30">StepDisplayer</name><argument_list pos:line="120" pos:column="43">(<argument><expr><name pos:line="120" pos:column="44">mPedometerSettings</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="64">mUtils</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="121" pos:column="9">mStepDisplayer</name><op:operator pos:line="121" pos:column="23">.</op:operator><name pos:line="121" pos:column="24">setSteps</name></name><argument_list pos:line="121" pos:column="32">(<argument><expr><name pos:line="121" pos:column="33">mSteps</name> <op:operator pos:line="121" pos:column="40">=</op:operator> <call><name><name pos:line="121" pos:column="42">mState</name><op:operator pos:line="121" pos:column="48">.</op:operator><name pos:line="121" pos:column="49">getInt</name></name><argument_list pos:line="121" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="56">"steps"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="121" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="122" pos:column="9">mStepDisplayer</name><op:operator pos:line="122" pos:column="23">.</op:operator><name pos:line="122" pos:column="24">addListener</name></name><argument_list pos:line="122" pos:column="35">(<argument><expr><name pos:line="122" pos:column="36">mStepListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="123" pos:column="9">mStepDetector</name><op:operator pos:line="123" pos:column="22">.</op:operator><name pos:line="123" pos:column="23">addStepListener</name></name><argument_list pos:line="123" pos:column="38">(<argument><expr><name pos:line="123" pos:column="39">mStepDisplayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name pos:line="125" pos:column="9">mPaceNotifier</name>     <op:operator pos:line="125" pos:column="27">=</op:operator> <op:operator pos:line="125" pos:column="29">new</op:operator> <call><name pos:line="125" pos:column="33">PaceNotifier</name><argument_list pos:line="125" pos:column="45">(<argument><expr><name pos:line="125" pos:column="46">mPedometerSettings</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="66">mUtils</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="126" pos:column="9">mPaceNotifier</name><op:operator pos:line="126" pos:column="22">.</op:operator><name pos:line="126" pos:column="23">setPace</name></name><argument_list pos:line="126" pos:column="30">(<argument><expr><name pos:line="126" pos:column="31">mPace</name> <op:operator pos:line="126" pos:column="37">=</op:operator> <call><name><name pos:line="126" pos:column="39">mState</name><op:operator pos:line="126" pos:column="45">.</op:operator><name pos:line="126" pos:column="46">getInt</name></name><argument_list pos:line="126" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="53">"pace"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="126" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="127" pos:column="9">mPaceNotifier</name><op:operator pos:line="127" pos:column="22">.</op:operator><name pos:line="127" pos:column="23">addListener</name></name><argument_list pos:line="127" pos:column="34">(<argument><expr><name pos:line="127" pos:column="35">mPaceListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="128" pos:column="9">mStepDetector</name><op:operator pos:line="128" pos:column="22">.</op:operator><name pos:line="128" pos:column="23">addStepListener</name></name><argument_list pos:line="128" pos:column="38">(<argument><expr><name pos:line="128" pos:column="39">mPaceNotifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name pos:line="130" pos:column="9">mDistanceNotifier</name> <op:operator pos:line="130" pos:column="27">=</op:operator> <op:operator pos:line="130" pos:column="29">new</op:operator> <call><name pos:line="130" pos:column="33">DistanceNotifier</name><argument_list pos:line="130" pos:column="49">(<argument><expr><name pos:line="130" pos:column="50">mDistanceListener</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="69">mPedometerSettings</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="89">mUtils</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="131" pos:column="9">mDistanceNotifier</name><op:operator pos:line="131" pos:column="26">.</op:operator><name pos:line="131" pos:column="27">setDistance</name></name><argument_list pos:line="131" pos:column="38">(<argument><expr><name pos:line="131" pos:column="39">mDistance</name> <op:operator pos:line="131" pos:column="49">=</op:operator> <call><name><name pos:line="131" pos:column="51">mState</name><op:operator pos:line="131" pos:column="57">.</op:operator><name pos:line="131" pos:column="58">getFloat</name></name><argument_list pos:line="131" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="67">"distance"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="131" pos:column="79">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="132" pos:column="9">mStepDetector</name><op:operator pos:line="132" pos:column="22">.</op:operator><name pos:line="132" pos:column="23">addStepListener</name></name><argument_list pos:line="132" pos:column="38">(<argument><expr><name pos:line="132" pos:column="39">mDistanceNotifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name pos:line="134" pos:column="9">mSpeedNotifier</name>    <op:operator pos:line="134" pos:column="27">=</op:operator> <op:operator pos:line="134" pos:column="29">new</op:operator> <call><name pos:line="134" pos:column="33">SpeedNotifier</name><argument_list pos:line="134" pos:column="46">(<argument><expr><name pos:line="134" pos:column="47">mSpeedListener</name></expr></argument>,    <argument><expr><name pos:line="134" pos:column="66">mPedometerSettings</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="86">mUtils</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="135" pos:column="9">mSpeedNotifier</name><op:operator pos:line="135" pos:column="23">.</op:operator><name pos:line="135" pos:column="24">setSpeed</name></name><argument_list pos:line="135" pos:column="32">(<argument><expr><name pos:line="135" pos:column="33">mSpeed</name> <op:operator pos:line="135" pos:column="40">=</op:operator> <call><name><name pos:line="135" pos:column="42">mState</name><op:operator pos:line="135" pos:column="48">.</op:operator><name pos:line="135" pos:column="49">getFloat</name></name><argument_list pos:line="135" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="58">"speed"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="135" pos:column="67">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="136" pos:column="9">mPaceNotifier</name><op:operator pos:line="136" pos:column="22">.</op:operator><name pos:line="136" pos:column="23">addListener</name></name><argument_list pos:line="136" pos:column="34">(<argument><expr><name pos:line="136" pos:column="35">mSpeedNotifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name pos:line="138" pos:column="9">mCaloriesNotifier</name> <op:operator pos:line="138" pos:column="27">=</op:operator> <op:operator pos:line="138" pos:column="29">new</op:operator> <call><name pos:line="138" pos:column="33">CaloriesNotifier</name><argument_list pos:line="138" pos:column="49">(<argument><expr><name pos:line="138" pos:column="50">mCaloriesListener</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="69">mPedometerSettings</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="89">mUtils</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="139" pos:column="9">mCaloriesNotifier</name><op:operator pos:line="139" pos:column="26">.</op:operator><name pos:line="139" pos:column="27">setCalories</name></name><argument_list pos:line="139" pos:column="38">(<argument><expr><name pos:line="139" pos:column="39">mCalories</name> <op:operator pos:line="139" pos:column="49">=</op:operator> <call><name><name pos:line="139" pos:column="51">mState</name><op:operator pos:line="139" pos:column="57">.</op:operator><name pos:line="139" pos:column="58">getFloat</name></name><argument_list pos:line="139" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="67">"calories"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="139" pos:column="79">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="140" pos:column="9">mStepDetector</name><op:operator pos:line="140" pos:column="22">.</op:operator><name pos:line="140" pos:column="23">addStepListener</name></name><argument_list pos:line="140" pos:column="38">(<argument><expr><name pos:line="140" pos:column="39">mCaloriesNotifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name pos:line="142" pos:column="9">mSpeakingTimer</name> <op:operator pos:line="142" pos:column="24">=</op:operator> <op:operator pos:line="142" pos:column="26">new</op:operator> <call><name pos:line="142" pos:column="30">SpeakingTimer</name><argument_list pos:line="142" pos:column="43">(<argument><expr><name pos:line="142" pos:column="44">mPedometerSettings</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="64">mUtils</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="143" pos:column="9">mSpeakingTimer</name><op:operator pos:line="143" pos:column="23">.</op:operator><name pos:line="143" pos:column="24">addListener</name></name><argument_list pos:line="143" pos:column="35">(<argument><expr><name pos:line="143" pos:column="36">mStepDisplayer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="144" pos:column="9">mSpeakingTimer</name><op:operator pos:line="144" pos:column="23">.</op:operator><name pos:line="144" pos:column="24">addListener</name></name><argument_list pos:line="144" pos:column="35">(<argument><expr><name pos:line="144" pos:column="36">mPaceNotifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="145" pos:column="9">mSpeakingTimer</name><op:operator pos:line="145" pos:column="23">.</op:operator><name pos:line="145" pos:column="24">addListener</name></name><argument_list pos:line="145" pos:column="35">(<argument><expr><name pos:line="145" pos:column="36">mDistanceNotifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="146" pos:column="9">mSpeakingTimer</name><op:operator pos:line="146" pos:column="23">.</op:operator><name pos:line="146" pos:column="24">addListener</name></name><argument_list pos:line="146" pos:column="35">(<argument><expr><name pos:line="146" pos:column="36">mSpeedNotifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="147" pos:column="9">mSpeakingTimer</name><op:operator pos:line="147" pos:column="23">.</op:operator><name pos:line="147" pos:column="24">addListener</name></name><argument_list pos:line="147" pos:column="35">(<argument><expr><name pos:line="147" pos:column="36">mCaloriesNotifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="148" pos:column="9">mStepDetector</name><op:operator pos:line="148" pos:column="22">.</op:operator><name pos:line="148" pos:column="23">addStepListener</name></name><argument_list pos:line="148" pos:column="38">(<argument><expr><name pos:line="148" pos:column="39">mSpeakingTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line" pos:line="150" pos:column="9">// Used when debugging:</comment>
        <comment type="line" pos:line="151" pos:column="9">// mStepBuzzer = new StepBuzzer(this);</comment>
        <comment type="line" pos:line="152" pos:column="9">// mStepDetector.addStepListener(mStepBuzzer);</comment>

        <comment type="line" pos:line="154" pos:column="9">// Start voice</comment>
        <expr_stmt><expr><call><name pos:line="155" pos:column="9">reloadSettings</name><argument_list pos:line="155" pos:column="23">()</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="157" pos:column="9">// Tell the user we started.</comment>
        <expr_stmt><expr><call><name><name pos:line="158" pos:column="9">Toast</name><op:operator pos:line="158" pos:column="14">.</op:operator><name pos:line="158" pos:column="15">makeText</name></name><argument_list pos:line="158" pos:column="23">(<argument><expr><name pos:line="158" pos:column="24">this</name></expr></argument>, <argument><expr><call><name pos:line="158" pos:column="30">getText</name><argument_list pos:line="158" pos:column="37">(<argument><expr><name><name pos:line="158" pos:column="38">R</name><op:operator pos:line="158" pos:column="39">.</op:operator><name pos:line="158" pos:column="40">string</name><op:operator pos:line="158" pos:column="46">.</op:operator><name pos:line="158" pos:column="47">started</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="57">Toast</name><op:operator pos:line="158" pos:column="62">.</op:operator><name pos:line="158" pos:column="63">LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><op:operator pos:line="158" pos:column="76">.</op:operator><call><name pos:line="158" pos:column="77">show</name><argument_list pos:line="158" pos:column="81">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><annotation pos:line="161" pos:column="5">@<name pos:line="161" pos:column="6">Override</name></annotation>
    <specifier pos:line="162" pos:column="5">public</specifier> <name pos:line="162" pos:column="12">void</name></type> <name pos:line="162" pos:column="17">onStart</name><parameter_list pos:line="162" pos:column="24">(<param><decl><type><name pos:line="162" pos:column="25">Intent</name></type> <name pos:line="162" pos:column="32">intent</name></decl></param>, <param><decl><type><name pos:line="162" pos:column="40">int</name></type> <name pos:line="162" pos:column="44">startId</name></decl></param>)</parameter_list> <block pos:line="162" pos:column="53">{
        <expr_stmt><expr><call><name><name pos:line="163" pos:column="9">Log</name><op:operator pos:line="163" pos:column="12">.</op:operator><name pos:line="163" pos:column="13">i</name></name><argument_list pos:line="163" pos:column="14">(<argument><expr><name pos:line="163" pos:column="15">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="163" pos:column="20">"[SERVICE] onStart"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="164" pos:column="9">super</name><op:operator pos:line="164" pos:column="14">.</op:operator><name pos:line="164" pos:column="15">onStart</name></name><argument_list pos:line="164" pos:column="22">(<argument><expr><name pos:line="164" pos:column="23">intent</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="31">startId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation pos:line="167" pos:column="5">@<name pos:line="167" pos:column="6">Override</name></annotation>
    <specifier pos:line="168" pos:column="5">public</specifier> <name pos:line="168" pos:column="12">void</name></type> <name pos:line="168" pos:column="17">onDestroy</name><parameter_list pos:line="168" pos:column="26">()</parameter_list> <block pos:line="168" pos:column="29">{
        <expr_stmt><expr><call><name><name pos:line="169" pos:column="9">Log</name><op:operator pos:line="169" pos:column="12">.</op:operator><name pos:line="169" pos:column="13">i</name></name><argument_list pos:line="169" pos:column="14">(<argument><expr><name pos:line="169" pos:column="15">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="169" pos:column="20">"[SERVICE] onDestroy"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="170" pos:column="9">mUtils</name><op:operator pos:line="170" pos:column="15">.</op:operator><name pos:line="170" pos:column="16">shutdownTTS</name></name><argument_list pos:line="170" pos:column="27">()</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="172" pos:column="9">// Unregister our receiver.</comment>
        <expr_stmt><expr><call><name pos:line="173" pos:column="9">unregisterReceiver</name><argument_list pos:line="173" pos:column="27">(<argument><expr><name pos:line="173" pos:column="28">mReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="174" pos:column="9">unregisterDetector</name><argument_list pos:line="174" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name pos:line="176" pos:column="9">mStateEditor</name> <op:operator pos:line="176" pos:column="22">=</op:operator> <call><name><name pos:line="176" pos:column="24">mState</name><op:operator pos:line="176" pos:column="30">.</op:operator><name pos:line="176" pos:column="31">edit</name></name><argument_list pos:line="176" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="177" pos:column="9">mStateEditor</name><op:operator pos:line="177" pos:column="21">.</op:operator><name pos:line="177" pos:column="22">putInt</name></name><argument_list pos:line="177" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="29">"steps"</lit:literal></expr></argument>, <argument><expr><name pos:line="177" pos:column="38">mSteps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="178" pos:column="9">mStateEditor</name><op:operator pos:line="178" pos:column="21">.</op:operator><name pos:line="178" pos:column="22">putInt</name></name><argument_list pos:line="178" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="29">"pace"</lit:literal></expr></argument>, <argument><expr><name pos:line="178" pos:column="37">mPace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="179" pos:column="9">mStateEditor</name><op:operator pos:line="179" pos:column="21">.</op:operator><name pos:line="179" pos:column="22">putFloat</name></name><argument_list pos:line="179" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="179" pos:column="31">"distance"</lit:literal></expr></argument>, <argument><expr><name pos:line="179" pos:column="43">mDistance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="180" pos:column="9">mStateEditor</name><op:operator pos:line="180" pos:column="21">.</op:operator><name pos:line="180" pos:column="22">putFloat</name></name><argument_list pos:line="180" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="31">"speed"</lit:literal></expr></argument>, <argument><expr><name pos:line="180" pos:column="40">mSpeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="181" pos:column="9">mStateEditor</name><op:operator pos:line="181" pos:column="21">.</op:operator><name pos:line="181" pos:column="22">putFloat</name></name><argument_list pos:line="181" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="181" pos:column="31">"calories"</lit:literal></expr></argument>, <argument><expr><name pos:line="181" pos:column="43">mCalories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="182" pos:column="9">mStateEditor</name><op:operator pos:line="182" pos:column="21">.</op:operator><name pos:line="182" pos:column="22">commit</name></name><argument_list pos:line="182" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name pos:line="184" pos:column="9">mNM</name><op:operator pos:line="184" pos:column="12">.</op:operator><name pos:line="184" pos:column="13">cancel</name></name><argument_list pos:line="184" pos:column="19">(<argument><expr><name><name pos:line="184" pos:column="20">R</name><op:operator pos:line="184" pos:column="21">.</op:operator><name pos:line="184" pos:column="22">string</name><op:operator pos:line="184" pos:column="28">.</op:operator><name pos:line="184" pos:column="29">app_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="186" pos:column="9">wakeLock</name><op:operator pos:line="186" pos:column="17">.</op:operator><name pos:line="186" pos:column="18">release</name></name><argument_list pos:line="186" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name pos:line="188" pos:column="9">super</name><op:operator pos:line="188" pos:column="14">.</op:operator><name pos:line="188" pos:column="15">onDestroy</name></name><argument_list pos:line="188" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line" pos:line="190" pos:column="9">// Stop detecting</comment>
        <expr_stmt><expr><call><name><name pos:line="191" pos:column="9">mSensorManager</name><op:operator pos:line="191" pos:column="23">.</op:operator><name pos:line="191" pos:column="24">unregisterListener</name></name><argument_list pos:line="191" pos:column="42">(<argument><expr><name pos:line="191" pos:column="43">mStepDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="193" pos:column="9">// Tell the user we stopped.</comment>
        <expr_stmt><expr><call><name><name pos:line="194" pos:column="9">Toast</name><op:operator pos:line="194" pos:column="14">.</op:operator><name pos:line="194" pos:column="15">makeText</name></name><argument_list pos:line="194" pos:column="23">(<argument><expr><name pos:line="194" pos:column="24">this</name></expr></argument>, <argument><expr><call><name pos:line="194" pos:column="30">getText</name><argument_list pos:line="194" pos:column="37">(<argument><expr><name><name pos:line="194" pos:column="38">R</name><op:operator pos:line="194" pos:column="39">.</op:operator><name pos:line="194" pos:column="40">string</name><op:operator pos:line="194" pos:column="46">.</op:operator><name pos:line="194" pos:column="47">stopped</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="194" pos:column="57">Toast</name><op:operator pos:line="194" pos:column="62">.</op:operator><name pos:line="194" pos:column="63">LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><op:operator pos:line="194" pos:column="76">.</op:operator><call><name pos:line="194" pos:column="77">show</name><argument_list pos:line="194" pos:column="81">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="197" pos:column="5">private</specifier> <name pos:line="197" pos:column="13">void</name></type> <name pos:line="197" pos:column="18">registerDetector</name><parameter_list pos:line="197" pos:column="34">()</parameter_list> <block pos:line="197" pos:column="37">{
        <expr_stmt><expr><name pos:line="198" pos:column="9">mSensor</name> <op:operator pos:line="198" pos:column="17">=</op:operator> <call><name><name pos:line="198" pos:column="19">mSensorManager</name><op:operator pos:line="198" pos:column="33">.</op:operator><name pos:line="198" pos:column="34">getDefaultSensor</name></name><argument_list pos:line="198" pos:column="50">(
            <argument><expr><name><name pos:line="199" pos:column="13">Sensor</name><op:operator pos:line="199" pos:column="19">.</op:operator><name pos:line="199" pos:column="20">TYPE_ACCELEROMETER</name></name></expr></argument> <comment type="block" pos:line="199" pos:column="39">/*| 
            Sensor.TYPE_MAGNETIC_FIELD | 
            Sensor.TYPE_ORIENTATION*/</comment>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="202" pos:column="9">mSensorManager</name><op:operator pos:line="202" pos:column="23">.</op:operator><name pos:line="202" pos:column="24">registerListener</name></name><argument_list pos:line="202" pos:column="40">(<argument><expr><name pos:line="202" pos:column="41">mStepDetector</name></expr></argument>,
            <argument><expr><name pos:line="203" pos:column="13">mSensor</name></expr></argument>,
            <argument><expr><name><name pos:line="204" pos:column="13">SensorManager</name><op:operator pos:line="204" pos:column="26">.</op:operator><name pos:line="204" pos:column="27">SENSOR_DELAY_FASTEST</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="207" pos:column="5">private</specifier> <name pos:line="207" pos:column="13">void</name></type> <name pos:line="207" pos:column="18">unregisterDetector</name><parameter_list pos:line="207" pos:column="36">()</parameter_list> <block pos:line="207" pos:column="39">{
        <expr_stmt><expr><call><name><name pos:line="208" pos:column="9">mSensorManager</name><op:operator pos:line="208" pos:column="23">.</op:operator><name pos:line="208" pos:column="24">unregisterListener</name></name><argument_list pos:line="208" pos:column="42">(<argument><expr><name pos:line="208" pos:column="43">mStepDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><annotation pos:line="211" pos:column="5">@<name pos:line="211" pos:column="6">Override</name></annotation>
    <specifier pos:line="212" pos:column="5">public</specifier> <name pos:line="212" pos:column="12">IBinder</name></type> <name pos:line="212" pos:column="20">onBind</name><parameter_list pos:line="212" pos:column="26">(<param><decl><type><name pos:line="212" pos:column="27">Intent</name></type> <name pos:line="212" pos:column="34">intent</name></decl></param>)</parameter_list> <block pos:line="212" pos:column="42">{
        <expr_stmt><expr><call><name><name pos:line="213" pos:column="9">Log</name><op:operator pos:line="213" pos:column="12">.</op:operator><name pos:line="213" pos:column="13">i</name></name><argument_list pos:line="213" pos:column="14">(<argument><expr><name pos:line="213" pos:column="15">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="20">"[SERVICE] onBind"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="214" pos:column="9">return <expr><name pos:line="214" pos:column="16">mBinder</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc" pos:line="217" pos:column="5">/**
     * Receives messages from activity.
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="220" pos:column="5">private</specifier> <specifier pos:line="220" pos:column="13">final</specifier> <name pos:line="220" pos:column="19">IBinder</name></type> <name pos:line="220" pos:column="27">mBinder</name> <init pos:line="220" pos:column="35">= <expr><op:operator pos:line="220" pos:column="37">new</op:operator> <call><name pos:line="220" pos:column="41">StepBinder</name><argument_list pos:line="220" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <class type="interface"><specifier pos:line="222" pos:column="5">public</specifier> interface <name pos:line="222" pos:column="22">ICallback</name> <block pos:line="222" pos:column="32">{
        <function_decl><type><specifier pos:line="223" pos:column="9">public</specifier> <name pos:line="223" pos:column="16">void</name></type> <name pos:line="223" pos:column="21">stepsChanged</name><parameter_list pos:line="223" pos:column="33">(<param><decl><type><name pos:line="223" pos:column="34">int</name></type> <name pos:line="223" pos:column="38">value</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier pos:line="224" pos:column="9">public</specifier> <name pos:line="224" pos:column="16">void</name></type> <name pos:line="224" pos:column="21">paceChanged</name><parameter_list pos:line="224" pos:column="32">(<param><decl><type><name pos:line="224" pos:column="33">int</name></type> <name pos:line="224" pos:column="37">value</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier pos:line="225" pos:column="9">public</specifier> <name pos:line="225" pos:column="16">void</name></type> <name pos:line="225" pos:column="21">distanceChanged</name><parameter_list pos:line="225" pos:column="36">(<param><decl><type><name pos:line="225" pos:column="37">float</name></type> <name pos:line="225" pos:column="43">value</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier pos:line="226" pos:column="9">public</specifier> <name pos:line="226" pos:column="16">void</name></type> <name pos:line="226" pos:column="21">speedChanged</name><parameter_list pos:line="226" pos:column="33">(<param><decl><type><name pos:line="226" pos:column="34">float</name></type> <name pos:line="226" pos:column="40">value</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier pos:line="227" pos:column="9">public</specifier> <name pos:line="227" pos:column="16">void</name></type> <name pos:line="227" pos:column="21">caloriesChanged</name><parameter_list pos:line="227" pos:column="36">(<param><decl><type><name pos:line="227" pos:column="37">float</name></type> <name pos:line="227" pos:column="43">value</name></decl></param>)</parameter_list>;</function_decl>
    }</block></class>
    
    <decl_stmt><decl><type><specifier pos:line="230" pos:column="5">private</specifier> <name pos:line="230" pos:column="13">ICallback</name></type> <name pos:line="230" pos:column="23">mCallback</name></decl>;</decl_stmt>

    <function><type><specifier pos:line="232" pos:column="5">public</specifier> <name pos:line="232" pos:column="12">void</name></type> <name pos:line="232" pos:column="17">registerCallback</name><parameter_list pos:line="232" pos:column="33">(<param><decl><type><name pos:line="232" pos:column="34">ICallback</name></type> <name pos:line="232" pos:column="44">cb</name></decl></param>)</parameter_list> <block pos:line="232" pos:column="48">{
        <expr_stmt><expr><name pos:line="233" pos:column="9">mCallback</name> <op:operator pos:line="233" pos:column="19">=</op:operator> <name pos:line="233" pos:column="21">cb</name></expr>;</expr_stmt>
        <comment type="line" pos:line="234" pos:column="9">//mStepDisplayer.passValue();</comment>
        <comment type="line" pos:line="235" pos:column="9">//mPaceListener.passValue();</comment>
    }</block></function>
    
    <decl_stmt><decl><type><specifier pos:line="238" pos:column="5">private</specifier> <name pos:line="238" pos:column="13">int</name></type> <name pos:line="238" pos:column="17">mDesiredPace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="239" pos:column="5">private</specifier> <name pos:line="239" pos:column="13">float</name></type> <name pos:line="239" pos:column="19">mDesiredSpeed</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc" pos:line="241" pos:column="5">/**
     * Called by activity to pass the desired pace value, 
     * whenever it is modified by the user.
     * @param desiredPace
     */</comment>
    <function><type><specifier pos:line="246" pos:column="5">public</specifier> <name pos:line="246" pos:column="12">void</name></type> <name pos:line="246" pos:column="17">setDesiredPace</name><parameter_list pos:line="246" pos:column="31">(<param><decl><type><name pos:line="246" pos:column="32">int</name></type> <name pos:line="246" pos:column="36">desiredPace</name></decl></param>)</parameter_list> <block pos:line="246" pos:column="49">{
        <expr_stmt><expr><name pos:line="247" pos:column="9">mDesiredPace</name> <op:operator pos:line="247" pos:column="22">=</op:operator> <name pos:line="247" pos:column="24">desiredPace</name></expr>;</expr_stmt>
        <if pos:line="248" pos:column="9">if <condition pos:line="248" pos:column="12">(<expr><name pos:line="248" pos:column="13">mPaceNotifier</name> <op:operator pos:line="248" pos:column="27">!=</op:operator> <lit:literal type="null" pos:line="248" pos:column="30">null</lit:literal></expr>)</condition><then pos:line="248" pos:column="35"> <block pos:line="248" pos:column="36">{
            <expr_stmt><expr><call><name><name pos:line="249" pos:column="13">mPaceNotifier</name><op:operator pos:line="249" pos:column="26">.</op:operator><name pos:line="249" pos:column="27">setDesiredPace</name></name><argument_list pos:line="249" pos:column="41">(<argument><expr><name pos:line="249" pos:column="42">mDesiredPace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <comment type="block" format="javadoc" pos:line="252" pos:column="5">/**
     * Called by activity to pass the desired speed value, 
     * whenever it is modified by the user.
     * @param desiredSpeed
     */</comment>
    <function><type><specifier pos:line="257" pos:column="5">public</specifier> <name pos:line="257" pos:column="12">void</name></type> <name pos:line="257" pos:column="17">setDesiredSpeed</name><parameter_list pos:line="257" pos:column="32">(<param><decl><type><name pos:line="257" pos:column="33">float</name></type> <name pos:line="257" pos:column="39">desiredSpeed</name></decl></param>)</parameter_list> <block pos:line="257" pos:column="53">{
        <expr_stmt><expr><name pos:line="258" pos:column="9">mDesiredSpeed</name> <op:operator pos:line="258" pos:column="23">=</op:operator> <name pos:line="258" pos:column="25">desiredSpeed</name></expr>;</expr_stmt>
        <if pos:line="259" pos:column="9">if <condition pos:line="259" pos:column="12">(<expr><name pos:line="259" pos:column="13">mSpeedNotifier</name> <op:operator pos:line="259" pos:column="28">!=</op:operator> <lit:literal type="null" pos:line="259" pos:column="31">null</lit:literal></expr>)</condition><then pos:line="259" pos:column="36"> <block pos:line="259" pos:column="37">{
            <expr_stmt><expr><call><name><name pos:line="260" pos:column="13">mSpeedNotifier</name><op:operator pos:line="260" pos:column="27">.</op:operator><name pos:line="260" pos:column="28">setDesiredSpeed</name></name><argument_list pos:line="260" pos:column="43">(<argument><expr><name pos:line="260" pos:column="44">mDesiredSpeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <function><type><specifier pos:line="264" pos:column="5">public</specifier> <name pos:line="264" pos:column="12">void</name></type> <name pos:line="264" pos:column="17">reloadSettings</name><parameter_list pos:line="264" pos:column="31">()</parameter_list> <block pos:line="264" pos:column="34">{
        <expr_stmt><expr><name pos:line="265" pos:column="9">mSettings</name> <op:operator pos:line="265" pos:column="19">=</op:operator> <call><name><name pos:line="265" pos:column="21">PreferenceManager</name><op:operator pos:line="265" pos:column="38">.</op:operator><name pos:line="265" pos:column="39">getDefaultSharedPreferences</name></name><argument_list pos:line="265" pos:column="66">(<argument><expr><name pos:line="265" pos:column="67">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if pos:line="267" pos:column="9">if <condition pos:line="267" pos:column="12">(<expr><name pos:line="267" pos:column="13">mStepDetector</name> <op:operator pos:line="267" pos:column="27">!=</op:operator> <lit:literal type="null" pos:line="267" pos:column="30">null</lit:literal></expr>)</condition><then pos:line="267" pos:column="35"> <block pos:line="267" pos:column="36">{ 
            <expr_stmt><expr><call><name><name pos:line="268" pos:column="13">mStepDetector</name><op:operator pos:line="268" pos:column="26">.</op:operator><name pos:line="268" pos:column="27">setSensitivity</name></name><argument_list pos:line="268" pos:column="41">(
                    <argument><expr><call><name><name pos:line="269" pos:column="21">Float</name><op:operator pos:line="269" pos:column="26">.</op:operator><name pos:line="269" pos:column="27">valueOf</name></name><argument_list pos:line="269" pos:column="34">(<argument><expr><call><name><name pos:line="269" pos:column="35">mSettings</name><op:operator pos:line="269" pos:column="44">.</op:operator><name pos:line="269" pos:column="45">getString</name></name><argument_list pos:line="269" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="269" pos:column="55">"sensitivity"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="269" pos:column="70">"10"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if pos:line="273" pos:column="9">if <condition pos:line="273" pos:column="12">(<expr><name pos:line="273" pos:column="13">mStepDisplayer</name>    <op:operator pos:line="273" pos:column="31">!=</op:operator> <lit:literal type="null" pos:line="273" pos:column="34">null</lit:literal></expr>)</condition><then pos:line="273" pos:column="39"> <expr_stmt><expr><call><name><name pos:line="273" pos:column="40">mStepDisplayer</name><op:operator pos:line="273" pos:column="54">.</op:operator><name pos:line="273" pos:column="55">reloadSettings</name></name><argument_list pos:line="273" pos:column="69">()</argument_list></call></expr>;</expr_stmt></then></if>
        <if pos:line="274" pos:column="9">if <condition pos:line="274" pos:column="12">(<expr><name pos:line="274" pos:column="13">mPaceNotifier</name>     <op:operator pos:line="274" pos:column="31">!=</op:operator> <lit:literal type="null" pos:line="274" pos:column="34">null</lit:literal></expr>)</condition><then pos:line="274" pos:column="39"> <expr_stmt><expr><call><name><name pos:line="274" pos:column="40">mPaceNotifier</name><op:operator pos:line="274" pos:column="53">.</op:operator><name pos:line="274" pos:column="54">reloadSettings</name></name><argument_list pos:line="274" pos:column="68">()</argument_list></call></expr>;</expr_stmt></then></if>
        <if pos:line="275" pos:column="9">if <condition pos:line="275" pos:column="12">(<expr><name pos:line="275" pos:column="13">mDistanceNotifier</name> <op:operator pos:line="275" pos:column="31">!=</op:operator> <lit:literal type="null" pos:line="275" pos:column="34">null</lit:literal></expr>)</condition><then pos:line="275" pos:column="39"> <expr_stmt><expr><call><name><name pos:line="275" pos:column="40">mDistanceNotifier</name><op:operator pos:line="275" pos:column="57">.</op:operator><name pos:line="275" pos:column="58">reloadSettings</name></name><argument_list pos:line="275" pos:column="72">()</argument_list></call></expr>;</expr_stmt></then></if>
        <if pos:line="276" pos:column="9">if <condition pos:line="276" pos:column="12">(<expr><name pos:line="276" pos:column="13">mSpeedNotifier</name>    <op:operator pos:line="276" pos:column="31">!=</op:operator> <lit:literal type="null" pos:line="276" pos:column="34">null</lit:literal></expr>)</condition><then pos:line="276" pos:column="39"> <expr_stmt><expr><call><name><name pos:line="276" pos:column="40">mSpeedNotifier</name><op:operator pos:line="276" pos:column="54">.</op:operator><name pos:line="276" pos:column="55">reloadSettings</name></name><argument_list pos:line="276" pos:column="69">()</argument_list></call></expr>;</expr_stmt></then></if>
        <if pos:line="277" pos:column="9">if <condition pos:line="277" pos:column="12">(<expr><name pos:line="277" pos:column="13">mCaloriesNotifier</name> <op:operator pos:line="277" pos:column="31">!=</op:operator> <lit:literal type="null" pos:line="277" pos:column="34">null</lit:literal></expr>)</condition><then pos:line="277" pos:column="39"> <expr_stmt><expr><call><name><name pos:line="277" pos:column="40">mCaloriesNotifier</name><op:operator pos:line="277" pos:column="57">.</op:operator><name pos:line="277" pos:column="58">reloadSettings</name></name><argument_list pos:line="277" pos:column="72">()</argument_list></call></expr>;</expr_stmt></then></if>
        <if pos:line="278" pos:column="9">if <condition pos:line="278" pos:column="12">(<expr><name pos:line="278" pos:column="13">mSpeakingTimer</name>    <op:operator pos:line="278" pos:column="31">!=</op:operator> <lit:literal type="null" pos:line="278" pos:column="34">null</lit:literal></expr>)</condition><then pos:line="278" pos:column="39"> <expr_stmt><expr><call><name><name pos:line="278" pos:column="40">mSpeakingTimer</name><op:operator pos:line="278" pos:column="54">.</op:operator><name pos:line="278" pos:column="55">reloadSettings</name></name><argument_list pos:line="278" pos:column="69">()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></function>
    
    <function><type><specifier pos:line="281" pos:column="5">public</specifier> <name pos:line="281" pos:column="12">void</name></type> <name pos:line="281" pos:column="17">resetValues</name><parameter_list pos:line="281" pos:column="28">()</parameter_list> <block pos:line="281" pos:column="31">{
        <expr_stmt><expr><call><name><name pos:line="282" pos:column="9">mStepDisplayer</name><op:operator pos:line="282" pos:column="23">.</op:operator><name pos:line="282" pos:column="24">setSteps</name></name><argument_list pos:line="282" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="282" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="283" pos:column="9">mPaceNotifier</name><op:operator pos:line="283" pos:column="22">.</op:operator><name pos:line="283" pos:column="23">setPace</name></name><argument_list pos:line="283" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="283" pos:column="31">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="284" pos:column="9">mDistanceNotifier</name><op:operator pos:line="284" pos:column="26">.</op:operator><name pos:line="284" pos:column="27">setDistance</name></name><argument_list pos:line="284" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="284" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="285" pos:column="9">mSpeedNotifier</name><op:operator pos:line="285" pos:column="23">.</op:operator><name pos:line="285" pos:column="24">setSpeed</name></name><argument_list pos:line="285" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="285" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="286" pos:column="9">mCaloriesNotifier</name><op:operator pos:line="286" pos:column="26">.</op:operator><name pos:line="286" pos:column="27">setCalories</name></name><argument_list pos:line="286" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="286" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="block" format="javadoc" pos:line="289" pos:column="5">/**
     * Forwards pace values from PaceNotifier to the activity. 
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="292" pos:column="5">private</specifier> <name><name pos:line="292" pos:column="13">StepDisplayer</name><op:operator pos:line="292" pos:column="26">.</op:operator><name pos:line="292" pos:column="27">Listener</name></name></type> <name pos:line="292" pos:column="36">mStepListener</name> <init pos:line="292" pos:column="50">= <expr><op:operator pos:line="292" pos:column="52">new</op:operator> <class><super><name><name pos:line="292" pos:column="56">StepDisplayer</name><op:operator pos:line="292" pos:column="69">.</op:operator><name pos:line="292" pos:column="70">Listener</name></name></super><argument_list pos:line="292" pos:column="78">()</argument_list> <block pos:line="292" pos:column="81">{
        <function><type><specifier pos:line="293" pos:column="9">public</specifier> <name pos:line="293" pos:column="16">void</name></type> <name pos:line="293" pos:column="21">stepsChanged</name><parameter_list pos:line="293" pos:column="33">(<param><decl><type><name pos:line="293" pos:column="34">int</name></type> <name pos:line="293" pos:column="38">value</name></decl></param>)</parameter_list> <block pos:line="293" pos:column="45">{
            <expr_stmt><expr><name pos:line="294" pos:column="13">mSteps</name> <op:operator pos:line="294" pos:column="20">=</op:operator> <name pos:line="294" pos:column="22">value</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="295" pos:column="13">passValue</name><argument_list pos:line="295" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier pos:line="297" pos:column="9">public</specifier> <name pos:line="297" pos:column="16">void</name></type> <name pos:line="297" pos:column="21">passValue</name><parameter_list pos:line="297" pos:column="30">()</parameter_list> <block pos:line="297" pos:column="33">{
            <if pos:line="298" pos:column="13">if <condition pos:line="298" pos:column="16">(<expr><name pos:line="298" pos:column="17">mCallback</name> <op:operator pos:line="298" pos:column="27">!=</op:operator> <lit:literal type="null" pos:line="298" pos:column="30">null</lit:literal></expr>)</condition><then pos:line="298" pos:column="35"> <block pos:line="298" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="299" pos:column="17">mCallback</name><op:operator pos:line="299" pos:column="26">.</op:operator><name pos:line="299" pos:column="27">stepsChanged</name></name><argument_list pos:line="299" pos:column="39">(<argument><expr><name pos:line="299" pos:column="40">mSteps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc" pos:line="303" pos:column="5">/**
     * Forwards pace values from PaceNotifier to the activity. 
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="306" pos:column="5">private</specifier> <name><name pos:line="306" pos:column="13">PaceNotifier</name><op:operator pos:line="306" pos:column="25">.</op:operator><name pos:line="306" pos:column="26">Listener</name></name></type> <name pos:line="306" pos:column="35">mPaceListener</name> <init pos:line="306" pos:column="49">= <expr><op:operator pos:line="306" pos:column="51">new</op:operator> <class><super><name><name pos:line="306" pos:column="55">PaceNotifier</name><op:operator pos:line="306" pos:column="67">.</op:operator><name pos:line="306" pos:column="68">Listener</name></name></super><argument_list pos:line="306" pos:column="76">()</argument_list> <block pos:line="306" pos:column="79">{
        <function><type><specifier pos:line="307" pos:column="9">public</specifier> <name pos:line="307" pos:column="16">void</name></type> <name pos:line="307" pos:column="21">paceChanged</name><parameter_list pos:line="307" pos:column="32">(<param><decl><type><name pos:line="307" pos:column="33">int</name></type> <name pos:line="307" pos:column="37">value</name></decl></param>)</parameter_list> <block pos:line="307" pos:column="44">{
            <expr_stmt><expr><name pos:line="308" pos:column="13">mPace</name> <op:operator pos:line="308" pos:column="19">=</op:operator> <name pos:line="308" pos:column="21">value</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="309" pos:column="13">passValue</name><argument_list pos:line="309" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier pos:line="311" pos:column="9">public</specifier> <name pos:line="311" pos:column="16">void</name></type> <name pos:line="311" pos:column="21">passValue</name><parameter_list pos:line="311" pos:column="30">()</parameter_list> <block pos:line="311" pos:column="33">{
            <if pos:line="312" pos:column="13">if <condition pos:line="312" pos:column="16">(<expr><name pos:line="312" pos:column="17">mCallback</name> <op:operator pos:line="312" pos:column="27">!=</op:operator> <lit:literal type="null" pos:line="312" pos:column="30">null</lit:literal></expr>)</condition><then pos:line="312" pos:column="35"> <block pos:line="312" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="313" pos:column="17">mCallback</name><op:operator pos:line="313" pos:column="26">.</op:operator><name pos:line="313" pos:column="27">paceChanged</name></name><argument_list pos:line="313" pos:column="38">(<argument><expr><name pos:line="313" pos:column="39">mPace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc" pos:line="317" pos:column="5">/**
     * Forwards distance values from DistanceNotifier to the activity. 
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="320" pos:column="5">private</specifier> <name><name pos:line="320" pos:column="13">DistanceNotifier</name><op:operator pos:line="320" pos:column="29">.</op:operator><name pos:line="320" pos:column="30">Listener</name></name></type> <name pos:line="320" pos:column="39">mDistanceListener</name> <init pos:line="320" pos:column="57">= <expr><op:operator pos:line="320" pos:column="59">new</op:operator> <class><super><name><name pos:line="320" pos:column="63">DistanceNotifier</name><op:operator pos:line="320" pos:column="79">.</op:operator><name pos:line="320" pos:column="80">Listener</name></name></super><argument_list pos:line="320" pos:column="88">()</argument_list> <block pos:line="320" pos:column="91">{
        <function><type><specifier pos:line="321" pos:column="9">public</specifier> <name pos:line="321" pos:column="16">void</name></type> <name pos:line="321" pos:column="21">valueChanged</name><parameter_list pos:line="321" pos:column="33">(<param><decl><type><name pos:line="321" pos:column="34">float</name></type> <name pos:line="321" pos:column="40">value</name></decl></param>)</parameter_list> <block pos:line="321" pos:column="47">{
            <expr_stmt><expr><name pos:line="322" pos:column="13">mDistance</name> <op:operator pos:line="322" pos:column="23">=</op:operator> <name pos:line="322" pos:column="25">value</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="323" pos:column="13">passValue</name><argument_list pos:line="323" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier pos:line="325" pos:column="9">public</specifier> <name pos:line="325" pos:column="16">void</name></type> <name pos:line="325" pos:column="21">passValue</name><parameter_list pos:line="325" pos:column="30">()</parameter_list> <block pos:line="325" pos:column="33">{
            <if pos:line="326" pos:column="13">if <condition pos:line="326" pos:column="16">(<expr><name pos:line="326" pos:column="17">mCallback</name> <op:operator pos:line="326" pos:column="27">!=</op:operator> <lit:literal type="null" pos:line="326" pos:column="30">null</lit:literal></expr>)</condition><then pos:line="326" pos:column="35"> <block pos:line="326" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="327" pos:column="17">mCallback</name><op:operator pos:line="327" pos:column="26">.</op:operator><name pos:line="327" pos:column="27">distanceChanged</name></name><argument_list pos:line="327" pos:column="42">(<argument><expr><name pos:line="327" pos:column="43">mDistance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc" pos:line="331" pos:column="5">/**
     * Forwards speed values from SpeedNotifier to the activity. 
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="334" pos:column="5">private</specifier> <name><name pos:line="334" pos:column="13">SpeedNotifier</name><op:operator pos:line="334" pos:column="26">.</op:operator><name pos:line="334" pos:column="27">Listener</name></name></type> <name pos:line="334" pos:column="36">mSpeedListener</name> <init pos:line="334" pos:column="51">= <expr><op:operator pos:line="334" pos:column="53">new</op:operator> <class><super><name><name pos:line="334" pos:column="57">SpeedNotifier</name><op:operator pos:line="334" pos:column="70">.</op:operator><name pos:line="334" pos:column="71">Listener</name></name></super><argument_list pos:line="334" pos:column="79">()</argument_list> <block pos:line="334" pos:column="82">{
        <function><type><specifier pos:line="335" pos:column="9">public</specifier> <name pos:line="335" pos:column="16">void</name></type> <name pos:line="335" pos:column="21">valueChanged</name><parameter_list pos:line="335" pos:column="33">(<param><decl><type><name pos:line="335" pos:column="34">float</name></type> <name pos:line="335" pos:column="40">value</name></decl></param>)</parameter_list> <block pos:line="335" pos:column="47">{
            <expr_stmt><expr><name pos:line="336" pos:column="13">mSpeed</name> <op:operator pos:line="336" pos:column="20">=</op:operator> <name pos:line="336" pos:column="22">value</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="337" pos:column="13">passValue</name><argument_list pos:line="337" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier pos:line="339" pos:column="9">public</specifier> <name pos:line="339" pos:column="16">void</name></type> <name pos:line="339" pos:column="21">passValue</name><parameter_list pos:line="339" pos:column="30">()</parameter_list> <block pos:line="339" pos:column="33">{
            <if pos:line="340" pos:column="13">if <condition pos:line="340" pos:column="16">(<expr><name pos:line="340" pos:column="17">mCallback</name> <op:operator pos:line="340" pos:column="27">!=</op:operator> <lit:literal type="null" pos:line="340" pos:column="30">null</lit:literal></expr>)</condition><then pos:line="340" pos:column="35"> <block pos:line="340" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="341" pos:column="17">mCallback</name><op:operator pos:line="341" pos:column="26">.</op:operator><name pos:line="341" pos:column="27">speedChanged</name></name><argument_list pos:line="341" pos:column="39">(<argument><expr><name pos:line="341" pos:column="40">mSpeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <comment type="block" format="javadoc" pos:line="345" pos:column="5">/**
     * Forwards calories values from CaloriesNotifier to the activity. 
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="348" pos:column="5">private</specifier> <name><name pos:line="348" pos:column="13">CaloriesNotifier</name><op:operator pos:line="348" pos:column="29">.</op:operator><name pos:line="348" pos:column="30">Listener</name></name></type> <name pos:line="348" pos:column="39">mCaloriesListener</name> <init pos:line="348" pos:column="57">= <expr><op:operator pos:line="348" pos:column="59">new</op:operator> <class><super><name><name pos:line="348" pos:column="63">CaloriesNotifier</name><op:operator pos:line="348" pos:column="79">.</op:operator><name pos:line="348" pos:column="80">Listener</name></name></super><argument_list pos:line="348" pos:column="88">()</argument_list> <block pos:line="348" pos:column="91">{
        <function><type><specifier pos:line="349" pos:column="9">public</specifier> <name pos:line="349" pos:column="16">void</name></type> <name pos:line="349" pos:column="21">valueChanged</name><parameter_list pos:line="349" pos:column="33">(<param><decl><type><name pos:line="349" pos:column="34">float</name></type> <name pos:line="349" pos:column="40">value</name></decl></param>)</parameter_list> <block pos:line="349" pos:column="47">{
            <expr_stmt><expr><name pos:line="350" pos:column="13">mCalories</name> <op:operator pos:line="350" pos:column="23">=</op:operator> <name pos:line="350" pos:column="25">value</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="351" pos:column="13">passValue</name><argument_list pos:line="351" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        }</block></function>
        <function><type><specifier pos:line="353" pos:column="9">public</specifier> <name pos:line="353" pos:column="16">void</name></type> <name pos:line="353" pos:column="21">passValue</name><parameter_list pos:line="353" pos:column="30">()</parameter_list> <block pos:line="353" pos:column="33">{
            <if pos:line="354" pos:column="13">if <condition pos:line="354" pos:column="16">(<expr><name pos:line="354" pos:column="17">mCallback</name> <op:operator pos:line="354" pos:column="27">!=</op:operator> <lit:literal type="null" pos:line="354" pos:column="30">null</lit:literal></expr>)</condition><then pos:line="354" pos:column="35"> <block pos:line="354" pos:column="36">{
                <expr_stmt><expr><call><name><name pos:line="355" pos:column="17">mCallback</name><op:operator pos:line="355" pos:column="26">.</op:operator><name pos:line="355" pos:column="27">caloriesChanged</name></name><argument_list pos:line="355" pos:column="42">(<argument><expr><name pos:line="355" pos:column="43">mCalories</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc" pos:line="360" pos:column="5">/**
     * Show a notification while this service is running.
     */</comment>
    <function><type><specifier pos:line="363" pos:column="5">private</specifier> <name pos:line="363" pos:column="13">void</name></type> <name pos:line="363" pos:column="18">showNotification</name><parameter_list pos:line="363" pos:column="34">()</parameter_list> <block pos:line="363" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="364" pos:column="9">CharSequence</name></type> <name pos:line="364" pos:column="22">text</name> <init pos:line="364" pos:column="27">= <expr><call><name pos:line="364" pos:column="29">getText</name><argument_list pos:line="364" pos:column="36">(<argument><expr><name><name pos:line="364" pos:column="37">R</name><op:operator pos:line="364" pos:column="38">.</op:operator><name pos:line="364" pos:column="39">string</name><op:operator pos:line="364" pos:column="45">.</op:operator><name pos:line="364" pos:column="46">app_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="365" pos:column="9">Notification</name></type> <name pos:line="365" pos:column="22">notification</name> <init pos:line="365" pos:column="35">= <expr><op:operator pos:line="365" pos:column="37">new</op:operator> <call><name pos:line="365" pos:column="41">Notification</name><argument_list pos:line="365" pos:column="53">(<argument><expr><name><name pos:line="365" pos:column="54">R</name><op:operator pos:line="365" pos:column="55">.</op:operator><name pos:line="365" pos:column="56">drawable</name><op:operator pos:line="365" pos:column="64">.</op:operator><name pos:line="365" pos:column="65">ic_notification</name></name></expr></argument>, <argument><expr><lit:literal type="null" pos:line="365" pos:column="82">null</lit:literal></expr></argument>,
                <argument><expr><call><name><name pos:line="366" pos:column="17">System</name><op:operator pos:line="366" pos:column="23">.</op:operator><name pos:line="366" pos:column="24">currentTimeMillis</name></name><argument_list pos:line="366" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name pos:line="367" pos:column="9">notification</name><op:operator pos:line="367" pos:column="21">.</op:operator><name pos:line="367" pos:column="22">flags</name></name> <op:operator pos:line="367" pos:column="28">=</op:operator> <name><name pos:line="367" pos:column="30">Notification</name><op:operator pos:line="367" pos:column="42">.</op:operator><name pos:line="367" pos:column="43">FLAG_NO_CLEAR</name></name> <op:operator pos:line="367" pos:column="57">|</op:operator> <name><name pos:line="367" pos:column="59">Notification</name><op:operator pos:line="367" pos:column="71">.</op:operator><name pos:line="367" pos:column="72">FLAG_ONGOING_EVENT</name></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="368" pos:column="9">Intent</name></type> <name pos:line="368" pos:column="16">pedometerIntent</name> <init pos:line="368" pos:column="32">= <expr><op:operator pos:line="368" pos:column="34">new</op:operator> <call><name pos:line="368" pos:column="38">Intent</name><argument_list pos:line="368" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="369" pos:column="9">pedometerIntent</name><op:operator pos:line="369" pos:column="24">.</op:operator><name pos:line="369" pos:column="25">setComponent</name></name><argument_list pos:line="369" pos:column="37">(<argument><expr><op:operator pos:line="369" pos:column="38">new</op:operator> <call><name pos:line="369" pos:column="42">ComponentName</name><argument_list pos:line="369" pos:column="55">(<argument><expr><name pos:line="369" pos:column="56">this</name></expr></argument>, <argument><expr><name><name pos:line="369" pos:column="62">Pedometer</name><op:operator pos:line="369" pos:column="71">.</op:operator><name pos:line="369" pos:column="72">class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="370" pos:column="9">pedometerIntent</name><op:operator pos:line="370" pos:column="24">.</op:operator><name pos:line="370" pos:column="25">addFlags</name></name><argument_list pos:line="370" pos:column="33">(<argument><expr><name><name pos:line="370" pos:column="34">Intent</name><op:operator pos:line="370" pos:column="40">.</op:operator><name pos:line="370" pos:column="41">FLAG_ACTIVITY_CLEAR_TOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="371" pos:column="9">PendingIntent</name></type> <name pos:line="371" pos:column="23">contentIntent</name> <init pos:line="371" pos:column="37">= <expr><call><name><name pos:line="371" pos:column="39">PendingIntent</name><op:operator pos:line="371" pos:column="52">.</op:operator><name pos:line="371" pos:column="53">getActivity</name></name><argument_list pos:line="371" pos:column="64">(<argument><expr><name pos:line="371" pos:column="65">this</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="371" pos:column="71">0</lit:literal></expr></argument>,
                <argument><expr><name pos:line="372" pos:column="17">pedometerIntent</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="372" pos:column="34">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="373" pos:column="9">notification</name><op:operator pos:line="373" pos:column="21">.</op:operator><name pos:line="373" pos:column="22">setLatestEventInfo</name></name><argument_list pos:line="373" pos:column="40">(<argument><expr><name pos:line="373" pos:column="41">this</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="47">text</name></expr></argument>,
                <argument><expr><call><name pos:line="374" pos:column="17">getText</name><argument_list pos:line="374" pos:column="24">(<argument><expr><name><name pos:line="374" pos:column="25">R</name><op:operator pos:line="374" pos:column="26">.</op:operator><name pos:line="374" pos:column="27">string</name><op:operator pos:line="374" pos:column="33">.</op:operator><name pos:line="374" pos:column="34">notification_subtitle</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="374" pos:column="58">contentIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name pos:line="376" pos:column="9">mNM</name><op:operator pos:line="376" pos:column="12">.</op:operator><name pos:line="376" pos:column="13">notify</name></name><argument_list pos:line="376" pos:column="19">(<argument><expr><name><name pos:line="376" pos:column="20">R</name><op:operator pos:line="376" pos:column="21">.</op:operator><name pos:line="376" pos:column="22">string</name><op:operator pos:line="376" pos:column="28">.</op:operator><name pos:line="376" pos:column="29">app_name</name></name></expr></argument>, <argument><expr><name pos:line="376" pos:column="39">notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="line" pos:line="380" pos:column="5">// BroadcastReceiver for handling ACTION_SCREEN_OFF.</comment>
    <decl_stmt><decl><type><specifier pos:line="381" pos:column="5">private</specifier> <name pos:line="381" pos:column="13">BroadcastReceiver</name></type> <name pos:line="381" pos:column="31">mReceiver</name> <init pos:line="381" pos:column="41">= <expr><op:operator pos:line="381" pos:column="43">new</op:operator> <class><super><name pos:line="381" pos:column="47">BroadcastReceiver</name></super><argument_list pos:line="381" pos:column="64">()</argument_list> <block pos:line="381" pos:column="67">{
        <function><type><annotation pos:line="382" pos:column="9">@<name pos:line="382" pos:column="10">Override</name></annotation>
        <specifier pos:line="383" pos:column="9">public</specifier> <name pos:line="383" pos:column="16">void</name></type> <name pos:line="383" pos:column="21">onReceive</name><parameter_list pos:line="383" pos:column="30">(<param><decl><type><name pos:line="383" pos:column="31">Context</name></type> <name pos:line="383" pos:column="39">context</name></decl></param>, <param><decl><type><name pos:line="383" pos:column="48">Intent</name></type> <name pos:line="383" pos:column="55">intent</name></decl></param>)</parameter_list> <block pos:line="383" pos:column="63">{
            <comment type="line" pos:line="384" pos:column="13">// Check action just to be on the safe side.</comment>
            <if pos:line="385" pos:column="13">if <condition pos:line="385" pos:column="16">(<expr><call><name><name pos:line="385" pos:column="17">intent</name><op:operator pos:line="385" pos:column="23">.</op:operator><name pos:line="385" pos:column="24">getAction</name></name><argument_list pos:line="385" pos:column="33">()</argument_list></call><op:operator pos:line="385" pos:column="35">.</op:operator><call><name pos:line="385" pos:column="36">equals</name><argument_list pos:line="385" pos:column="42">(<argument><expr><name><name pos:line="385" pos:column="43">Intent</name><op:operator pos:line="385" pos:column="49">.</op:operator><name pos:line="385" pos:column="50">ACTION_SCREEN_OFF</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="385" pos:column="69"> <block pos:line="385" pos:column="70">{
                <comment type="line" pos:line="386" pos:column="17">// Unregisters the listener and registers it again.</comment>
                <expr_stmt><expr><call><name><name pos:line="387" pos:column="17">StepService</name><op:operator pos:line="387" pos:column="28">.</op:operator><name pos:line="387" pos:column="29">this</name><op:operator pos:line="387" pos:column="33">.</op:operator><name pos:line="387" pos:column="34">unregisterDetector</name></name><argument_list pos:line="387" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="388" pos:column="17">StepService</name><op:operator pos:line="388" pos:column="28">.</op:operator><name pos:line="388" pos:column="29">this</name><op:operator pos:line="388" pos:column="33">.</op:operator><name pos:line="388" pos:column="34">registerDetector</name></name><argument_list pos:line="388" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
                <if pos:line="389" pos:column="17">if <condition pos:line="389" pos:column="20">(<expr><call><name><name pos:line="389" pos:column="21">mPedometerSettings</name><op:operator pos:line="389" pos:column="39">.</op:operator><name pos:line="389" pos:column="40">wakeAggressively</name></name><argument_list pos:line="389" pos:column="56">()</argument_list></call></expr>)</condition><then pos:line="389" pos:column="59"> <block pos:line="389" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="390" pos:column="21">wakeLock</name><op:operator pos:line="390" pos:column="29">.</op:operator><name pos:line="390" pos:column="30">release</name></name><argument_list pos:line="390" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name pos:line="391" pos:column="21">acquireWakeLock</name><argument_list pos:line="391" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="397" pos:column="5">private</specifier> <name pos:line="397" pos:column="13">void</name></type> <name pos:line="397" pos:column="18">acquireWakeLock</name><parameter_list pos:line="397" pos:column="33">()</parameter_list> <block pos:line="397" pos:column="36">{
        <decl_stmt><decl><type><name pos:line="398" pos:column="9">PowerManager</name></type> <name pos:line="398" pos:column="22">pm</name> <init pos:line="398" pos:column="25">= <expr><op:operator pos:line="398" pos:column="27">(</op:operator><name pos:line="398" pos:column="28">PowerManager</name><op:operator pos:line="398" pos:column="40">)</op:operator> <call><name pos:line="398" pos:column="42">getSystemService</name><argument_list pos:line="398" pos:column="58">(<argument><expr><name><name pos:line="398" pos:column="59">Context</name><op:operator pos:line="398" pos:column="66">.</op:operator><name pos:line="398" pos:column="67">POWER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="399" pos:column="9">int</name></type> <name pos:line="399" pos:column="13">wakeFlags</name></decl>;</decl_stmt>
        <if pos:line="400" pos:column="9">if <condition pos:line="400" pos:column="12">(<expr><call><name><name pos:line="400" pos:column="13">mPedometerSettings</name><op:operator pos:line="400" pos:column="31">.</op:operator><name pos:line="400" pos:column="32">wakeAggressively</name></name><argument_list pos:line="400" pos:column="48">()</argument_list></call></expr>)</condition><then pos:line="400" pos:column="51"> <block pos:line="400" pos:column="52">{
            <expr_stmt><expr><name pos:line="401" pos:column="13">wakeFlags</name> <op:operator pos:line="401" pos:column="23">=</op:operator> <name><name pos:line="401" pos:column="25">PowerManager</name><op:operator pos:line="401" pos:column="37">.</op:operator><name pos:line="401" pos:column="38">SCREEN_DIM_WAKE_LOCK</name></name> <op:operator pos:line="401" pos:column="59">|</op:operator> <name><name pos:line="401" pos:column="61">PowerManager</name><op:operator pos:line="401" pos:column="73">.</op:operator><name pos:line="401" pos:column="74">ACQUIRE_CAUSES_WAKEUP</name></name></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="403" pos:column="9">else <if pos:line="403" pos:column="14">if <condition pos:line="403" pos:column="17">(<expr><call><name><name pos:line="403" pos:column="18">mPedometerSettings</name><op:operator pos:line="403" pos:column="36">.</op:operator><name pos:line="403" pos:column="37">keepScreenOn</name></name><argument_list pos:line="403" pos:column="49">()</argument_list></call></expr>)</condition><then pos:line="403" pos:column="52"> <block pos:line="403" pos:column="53">{
            <expr_stmt><expr><name pos:line="404" pos:column="13">wakeFlags</name> <op:operator pos:line="404" pos:column="23">=</op:operator> <name><name pos:line="404" pos:column="25">PowerManager</name><op:operator pos:line="404" pos:column="37">.</op:operator><name pos:line="404" pos:column="38">SCREEN_DIM_WAKE_LOCK</name></name></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="406" pos:column="9">else <block pos:line="406" pos:column="14">{
            <expr_stmt><expr><name pos:line="407" pos:column="13">wakeFlags</name> <op:operator pos:line="407" pos:column="23">=</op:operator> <name><name pos:line="407" pos:column="25">PowerManager</name><op:operator pos:line="407" pos:column="37">.</op:operator><name pos:line="407" pos:column="38">PARTIAL_WAKE_LOCK</name></name></expr>;</expr_stmt>
        }</block></else></if></else></if>
        <expr_stmt><expr><name pos:line="409" pos:column="9">wakeLock</name> <op:operator pos:line="409" pos:column="18">=</op:operator> <call><name><name pos:line="409" pos:column="20">pm</name><op:operator pos:line="409" pos:column="22">.</op:operator><name pos:line="409" pos:column="23">newWakeLock</name></name><argument_list pos:line="409" pos:column="34">(<argument><expr><name pos:line="409" pos:column="35">wakeFlags</name></expr></argument>, <argument><expr><name pos:line="409" pos:column="46">TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="410" pos:column="9">wakeLock</name><op:operator pos:line="410" pos:column="17">.</op:operator><name pos:line="410" pos:column="18">acquire</name></name><argument_list pos:line="410" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>

</unit>
