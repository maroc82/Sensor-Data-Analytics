<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\android-pedometer-studio\app\src\main\java\name\bagi\levente\pedometer\PaceNotifier.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 *  Pedometer - Android App
 *  Copyright (C) 2009 Levente Bagi
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package pos:line="19" pos:column="1">package <name><name pos:line="19" pos:column="9">name</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">bagi</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">levente</name><op:operator pos:line="19" pos:column="26">.</op:operator><name pos:line="19" pos:column="27">pedometer</name></name>;</package>

<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">java</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">util</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">ArrayList</name></name>;</import>

<comment type="block" format="javadoc" pos:line="23" pos:column="1">/**
 * Calculates and displays pace (steps / minute), handles input of desired pace,
 * notifies user if he/she has to go faster or slower.  
 * @author Levente Bagi
 */</comment>
<class><specifier pos:line="28" pos:column="1">public</specifier> class <name pos:line="28" pos:column="14">PaceNotifier</name> <super><implements pos:line="28" pos:column="27">implements <name pos:line="28" pos:column="38">StepListener</name>, <name><name pos:line="28" pos:column="52">SpeakingTimer</name><op:operator pos:line="28" pos:column="65">.</op:operator><name pos:line="28" pos:column="66">Listener</name></name></implements></super> <block pos:line="28" pos:column="75">{

    <class type="interface"><specifier pos:line="30" pos:column="5">public</specifier> interface <name pos:line="30" pos:column="22">Listener</name> <block pos:line="30" pos:column="31">{
        <function_decl><type><specifier pos:line="31" pos:column="9">public</specifier> <name pos:line="31" pos:column="16">void</name></type> <name pos:line="31" pos:column="21">paceChanged</name><parameter_list pos:line="31" pos:column="32">(<param><decl><type><name pos:line="31" pos:column="33">int</name></type> <name pos:line="31" pos:column="37">value</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier pos:line="32" pos:column="9">public</specifier> <name pos:line="32" pos:column="16">void</name></type> <name pos:line="32" pos:column="21">passValue</name><parameter_list pos:line="32" pos:column="30">()</parameter_list>;</function_decl>
    }</block></class>
    <decl_stmt><decl><type><specifier pos:line="34" pos:column="5">private</specifier> <name><name pos:line="34" pos:column="13">ArrayList</name><argument_list pos:line="34" pos:column="22">&lt;<argument><name pos:line="34" pos:column="23">Listener</name></argument>&gt;</argument_list></name></type> <name pos:line="34" pos:column="33">mListeners</name> <init pos:line="34" pos:column="44">= <expr><op:operator pos:line="34" pos:column="46">new</op:operator> <call><name><name pos:line="34" pos:column="50">ArrayList</name><argument_list pos:line="34" pos:column="59">&lt;<argument><name pos:line="34" pos:column="60">Listener</name></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name pos:line="36" pos:column="5">int</name></type> <name pos:line="36" pos:column="9">mCounter</name> <init pos:line="36" pos:column="18">= <expr><lit:literal type="number" pos:line="36" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier pos:line="38" pos:column="5">private</specifier> <name pos:line="38" pos:column="13">long</name></type> <name pos:line="38" pos:column="18">mLastStepTime</name> <init pos:line="38" pos:column="32">= <expr><lit:literal type="number" pos:line="38" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="39" pos:column="5">private</specifier> <name pos:line="39" pos:column="13">long</name><index pos:line="39" pos:column="17">[]</index></type> <name pos:line="39" pos:column="20">mLastStepDeltas</name> <init pos:line="39" pos:column="36">= <expr><block pos:line="39" pos:column="38">{<expr><op:operator pos:line="39" pos:column="39">-</op:operator><lit:literal type="number" pos:line="39" pos:column="40">1</lit:literal></expr>, <expr><op:operator pos:line="39" pos:column="43">-</op:operator><lit:literal type="number" pos:line="39" pos:column="44">1</lit:literal></expr>, <expr><op:operator pos:line="39" pos:column="47">-</op:operator><lit:literal type="number" pos:line="39" pos:column="48">1</lit:literal></expr>, <expr><op:operator pos:line="39" pos:column="51">-</op:operator><lit:literal type="number" pos:line="39" pos:column="52">1</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="40" pos:column="5">private</specifier> <name pos:line="40" pos:column="13">int</name></type> <name pos:line="40" pos:column="17">mLastStepDeltasIndex</name> <init pos:line="40" pos:column="38">= <expr><lit:literal type="number" pos:line="40" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="41" pos:column="5">private</specifier> <name pos:line="41" pos:column="13">long</name></type> <name pos:line="41" pos:column="18">mPace</name> <init pos:line="41" pos:column="24">= <expr><lit:literal type="number" pos:line="41" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name pos:line="43" pos:column="5">PedometerSettings</name></type> <name pos:line="43" pos:column="23">mSettings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="44" pos:column="5">Utils</name></type> <name pos:line="44" pos:column="11">mUtils</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc" pos:line="46" pos:column="5">/** Desired pace, adjusted by the user */</comment>
    <decl_stmt><decl><type><name pos:line="47" pos:column="5">int</name></type> <name pos:line="47" pos:column="9">mDesiredPace</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc" pos:line="49" pos:column="5">/** Should we speak? */</comment>
    <decl_stmt><decl><type><name pos:line="50" pos:column="5">boolean</name></type> <name pos:line="50" pos:column="13">mShouldTellFasterslower</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc" pos:line="52" pos:column="5">/** When did the TTS speak last time */</comment>
    <decl_stmt><decl><type><specifier pos:line="53" pos:column="5">private</specifier> <name pos:line="53" pos:column="13">long</name></type> <name pos:line="53" pos:column="18">mSpokenAt</name> <init pos:line="53" pos:column="28">= <expr><lit:literal type="number" pos:line="53" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier pos:line="55" pos:column="5">public</specifier> <name pos:line="55" pos:column="12">PaceNotifier</name><parameter_list pos:line="55" pos:column="24">(<param><decl><type><name pos:line="55" pos:column="25">PedometerSettings</name></type> <name pos:line="55" pos:column="43">settings</name></decl></param>, <param><decl><type><name pos:line="55" pos:column="53">Utils</name></type> <name pos:line="55" pos:column="59">utils</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="66">{
        <expr_stmt><expr><name pos:line="56" pos:column="9">mUtils</name> <op:operator pos:line="56" pos:column="16">=</op:operator> <name pos:line="56" pos:column="18">utils</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="57" pos:column="9">mSettings</name> <op:operator pos:line="57" pos:column="19">=</op:operator> <name pos:line="57" pos:column="21">settings</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="58" pos:column="9">mDesiredPace</name> <op:operator pos:line="58" pos:column="22">=</op:operator> <call><name><name pos:line="58" pos:column="24">mSettings</name><op:operator pos:line="58" pos:column="33">.</op:operator><name pos:line="58" pos:column="34">getDesiredPace</name></name><argument_list pos:line="58" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">reloadSettings</name><argument_list pos:line="59" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <function><type><specifier pos:line="61" pos:column="5">public</specifier> <name pos:line="61" pos:column="12">void</name></type> <name pos:line="61" pos:column="17">setPace</name><parameter_list pos:line="61" pos:column="24">(<param><decl><type><name pos:line="61" pos:column="25">int</name></type> <name pos:line="61" pos:column="29">pace</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="35">{
        <expr_stmt><expr><name pos:line="62" pos:column="9">mPace</name> <op:operator pos:line="62" pos:column="15">=</op:operator> <name pos:line="62" pos:column="17">pace</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="63" pos:column="9">int</name></type> <name pos:line="63" pos:column="13">avg</name> <init pos:line="63" pos:column="17">= <expr><call pos:line="63" pos:column="19">(<name pos:line="63" pos:column="20">int</name>)<argument_list pos:line="63" pos:column="24">(<argument><expr><lit:literal type="number" pos:line="63" pos:column="25">60</lit:literal><op:operator pos:line="63" pos:column="27">*</op:operator><lit:literal type="number" pos:line="63" pos:column="28">1000.0</lit:literal> <op:operator pos:line="63" pos:column="35">/</op:operator> <name pos:line="63" pos:column="37">mPace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for pos:line="64" pos:column="9">for (<init><decl><type><name pos:line="64" pos:column="14">int</name></type> <name pos:line="64" pos:column="18">i</name> <init pos:line="64" pos:column="20">= <expr><lit:literal type="number" pos:line="64" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="64" pos:column="25">i</name> <op:operator pos:line="64" pos:column="27">&lt;</op:operator> <name><name pos:line="64" pos:column="29">mLastStepDeltas</name><op:operator pos:line="64" pos:column="44">.</op:operator><name pos:line="64" pos:column="45">length</name></name></expr>;</condition> <incr><expr><name pos:line="64" pos:column="53">i</name><op:operator pos:line="64" pos:column="54">++</op:operator></expr></incr>) <block pos:line="64" pos:column="58">{
            <expr_stmt><expr><name><name pos:line="65" pos:column="13">mLastStepDeltas</name><index pos:line="65" pos:column="28">[<expr><name pos:line="65" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="65" pos:column="32">=</op:operator> <name pos:line="65" pos:column="34">avg</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">notifyListener</name><argument_list pos:line="67" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="69" pos:column="5">public</specifier> <name pos:line="69" pos:column="12">void</name></type> <name pos:line="69" pos:column="17">reloadSettings</name><parameter_list pos:line="69" pos:column="31">()</parameter_list> <block pos:line="69" pos:column="34">{
        <expr_stmt><expr><name pos:line="70" pos:column="9">mShouldTellFasterslower</name> <op:operator pos:line="70" pos:column="33">=</op:operator> 
            <call><name><name pos:line="71" pos:column="13">mSettings</name><op:operator pos:line="71" pos:column="22">.</op:operator><name pos:line="71" pos:column="23">shouldTellFasterslower</name></name><argument_list pos:line="71" pos:column="45">()</argument_list></call>
            <op:operator pos:line="72" pos:column="13">&amp;&amp;</op:operator> <call><name><name pos:line="72" pos:column="16">mSettings</name><op:operator pos:line="72" pos:column="25">.</op:operator><name pos:line="72" pos:column="26">getMaintainOption</name></name><argument_list pos:line="72" pos:column="43">()</argument_list></call> <op:operator pos:line="72" pos:column="46">==</op:operator> <name><name pos:line="72" pos:column="49">PedometerSettings</name><op:operator pos:line="72" pos:column="66">.</op:operator><name pos:line="72" pos:column="67">M_PACE</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">notifyListener</name><argument_list pos:line="73" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier pos:line="76" pos:column="5">public</specifier> <name pos:line="76" pos:column="12">void</name></type> <name pos:line="76" pos:column="17">addListener</name><parameter_list pos:line="76" pos:column="28">(<param><decl><type><name pos:line="76" pos:column="29">Listener</name></type> <name pos:line="76" pos:column="38">l</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="41">{
        <expr_stmt><expr><call><name><name pos:line="77" pos:column="9">mListeners</name><op:operator pos:line="77" pos:column="19">.</op:operator><name pos:line="77" pos:column="20">add</name></name><argument_list pos:line="77" pos:column="23">(<argument><expr><name pos:line="77" pos:column="24">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="80" pos:column="5">public</specifier> <name pos:line="80" pos:column="12">void</name></type> <name pos:line="80" pos:column="17">setDesiredPace</name><parameter_list pos:line="80" pos:column="31">(<param><decl><type><name pos:line="80" pos:column="32">int</name></type> <name pos:line="80" pos:column="36">desiredPace</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="49">{
        <expr_stmt><expr><name pos:line="81" pos:column="9">mDesiredPace</name> <op:operator pos:line="81" pos:column="22">=</op:operator> <name pos:line="81" pos:column="24">desiredPace</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="84" pos:column="5">public</specifier> <name pos:line="84" pos:column="12">void</name></type> <name pos:line="84" pos:column="17">onStep</name><parameter_list pos:line="84" pos:column="23">()</parameter_list> <block pos:line="84" pos:column="26">{
        <decl_stmt><decl><type><name pos:line="85" pos:column="9">long</name></type> <name pos:line="85" pos:column="14">thisStepTime</name> <init pos:line="85" pos:column="27">= <expr><call><name><name pos:line="85" pos:column="29">System</name><op:operator pos:line="85" pos:column="35">.</op:operator><name pos:line="85" pos:column="36">currentTimeMillis</name></name><argument_list pos:line="85" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="86" pos:column="9">mCounter</name> <op:operator pos:line="86" pos:column="18">++</op:operator></expr>;</expr_stmt>
        
        <comment type="line" pos:line="88" pos:column="9">// Calculate pace based on last x steps</comment>
        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">mLastStepTime</name> <op:operator pos:line="89" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="89" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="89" pos:column="31"> <block pos:line="89" pos:column="32">{
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">long</name></type> <name pos:line="90" pos:column="18">delta</name> <init pos:line="90" pos:column="24">= <expr><name pos:line="90" pos:column="26">thisStepTime</name> <op:operator pos:line="90" pos:column="39">-</op:operator> <name pos:line="90" pos:column="41">mLastStepTime</name></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name><name pos:line="92" pos:column="13">mLastStepDeltas</name><index pos:line="92" pos:column="28">[<expr><name pos:line="92" pos:column="29">mLastStepDeltasIndex</name></expr>]</index></name> <op:operator pos:line="92" pos:column="51">=</op:operator> <name pos:line="92" pos:column="53">delta</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="93" pos:column="13">mLastStepDeltasIndex</name> <op:operator pos:line="93" pos:column="34">=</op:operator> <op:operator pos:line="93" pos:column="36">(</op:operator><name pos:line="93" pos:column="37">mLastStepDeltasIndex</name> <op:operator pos:line="93" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="93" pos:column="60">1</lit:literal><op:operator pos:line="93" pos:column="61">)</op:operator> <op:operator pos:line="93" pos:column="63">%</op:operator> <name><name pos:line="93" pos:column="65">mLastStepDeltas</name><op:operator pos:line="93" pos:column="80">.</op:operator><name pos:line="93" pos:column="81">length</name></name></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name pos:line="95" pos:column="13">long</name></type> <name pos:line="95" pos:column="18">sum</name> <init pos:line="95" pos:column="22">= <expr><lit:literal type="number" pos:line="95" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="96" pos:column="13">boolean</name></type> <name pos:line="96" pos:column="21">isMeaningfull</name> <init pos:line="96" pos:column="35">= <expr><lit:literal type="boolean" pos:line="96" pos:column="37">true</lit:literal></expr></init></decl>;</decl_stmt>
            <for pos:line="97" pos:column="13">for (<init><decl><type><name pos:line="97" pos:column="18">int</name></type> <name pos:line="97" pos:column="22">i</name> <init pos:line="97" pos:column="24">= <expr><lit:literal type="number" pos:line="97" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="97" pos:column="29">i</name> <op:operator pos:line="97" pos:column="31">&lt;</op:operator> <name><name pos:line="97" pos:column="33">mLastStepDeltas</name><op:operator pos:line="97" pos:column="48">.</op:operator><name pos:line="97" pos:column="49">length</name></name></expr>;</condition> <incr><expr><name pos:line="97" pos:column="57">i</name><op:operator pos:line="97" pos:column="58">++</op:operator></expr></incr>) <block pos:line="97" pos:column="62">{
                <if pos:line="98" pos:column="17">if <condition pos:line="98" pos:column="20">(<expr><name><name pos:line="98" pos:column="21">mLastStepDeltas</name><index pos:line="98" pos:column="36">[<expr><name pos:line="98" pos:column="37">i</name></expr>]</index></name> <op:operator pos:line="98" pos:column="40">&lt;</op:operator> <lit:literal type="number" pos:line="98" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="98" pos:column="44"> <block pos:line="98" pos:column="45">{
                    <expr_stmt><expr><name pos:line="99" pos:column="21">isMeaningfull</name> <op:operator pos:line="99" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="99" pos:column="37">false</lit:literal></expr>;</expr_stmt>
                    <break pos:line="100" pos:column="21">break;</break>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="102" pos:column="17">sum</name> <op:operator pos:line="102" pos:column="21">+=</op:operator> <name><name pos:line="102" pos:column="24">mLastStepDeltas</name><index pos:line="102" pos:column="39">[<expr><name pos:line="102" pos:column="40">i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">isMeaningfull</name> <op:operator pos:line="104" pos:column="31">&amp;&amp;</op:operator> <name pos:line="104" pos:column="34">sum</name> <op:operator pos:line="104" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="104" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="104" pos:column="42"> <block pos:line="104" pos:column="43">{
                <decl_stmt><decl><type><name pos:line="105" pos:column="17">long</name></type> <name pos:line="105" pos:column="22">avg</name> <init pos:line="105" pos:column="26">= <expr><name pos:line="105" pos:column="28">sum</name> <op:operator pos:line="105" pos:column="32">/</op:operator> <name><name pos:line="105" pos:column="34">mLastStepDeltas</name><op:operator pos:line="105" pos:column="49">.</op:operator><name pos:line="105" pos:column="50">length</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name pos:line="106" pos:column="17">mPace</name> <op:operator pos:line="106" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="106" pos:column="25">60</lit:literal><op:operator pos:line="106" pos:column="27">*</op:operator><lit:literal type="number" pos:line="106" pos:column="28">1000</lit:literal> <op:operator pos:line="106" pos:column="33">/</op:operator> <name pos:line="106" pos:column="35">avg</name></expr>;</expr_stmt>
                
                <comment type="line" pos:line="108" pos:column="17">// TODO: remove duplication. This also exists in SpeedNotifier</comment>
                <if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><name pos:line="109" pos:column="21">mShouldTellFasterslower</name> <op:operator pos:line="109" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="109" pos:column="48">!</op:operator><call><name><name pos:line="109" pos:column="49">mUtils</name><op:operator pos:line="109" pos:column="55">.</op:operator><name pos:line="109" pos:column="56">isSpeakingEnabled</name></name><argument_list pos:line="109" pos:column="73">()</argument_list></call></expr>)</condition><then pos:line="109" pos:column="76"> <block pos:line="109" pos:column="77">{
                    <if pos:line="110" pos:column="21">if <condition pos:line="110" pos:column="24">(<expr><name pos:line="110" pos:column="25">thisStepTime</name> <op:operator pos:line="110" pos:column="38">-</op:operator> <name pos:line="110" pos:column="40">mSpokenAt</name> <op:operator pos:line="110" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="110" pos:column="52">3000</lit:literal> <op:operator pos:line="110" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="110" pos:column="60">!</op:operator><call><name><name pos:line="110" pos:column="61">mUtils</name><op:operator pos:line="110" pos:column="67">.</op:operator><name pos:line="110" pos:column="68">isSpeakingNow</name></name><argument_list pos:line="110" pos:column="81">()</argument_list></call></expr>)</condition><then pos:line="110" pos:column="84"> <block pos:line="110" pos:column="85">{
                        <decl_stmt><decl><type><name pos:line="111" pos:column="25">float</name></type> <name pos:line="111" pos:column="31">little</name> <init pos:line="111" pos:column="38">= <expr><lit:literal type="number" pos:line="111" pos:column="40">0.10f</lit:literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="112" pos:column="25">float</name></type> <name pos:line="112" pos:column="31">normal</name> <init pos:line="112" pos:column="38">= <expr><lit:literal type="number" pos:line="112" pos:column="40">0.30f</lit:literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name pos:line="113" pos:column="25">float</name></type> <name pos:line="113" pos:column="31">much</name> <init pos:line="113" pos:column="36">= <expr><lit:literal type="number" pos:line="113" pos:column="38">0.50f</lit:literal></expr></init></decl>;</decl_stmt>
                        
                        <decl_stmt><decl><type><name pos:line="115" pos:column="25">boolean</name></type> <name pos:line="115" pos:column="33">spoken</name> <init pos:line="115" pos:column="40">= <expr><lit:literal type="boolean" pos:line="115" pos:column="42">true</lit:literal></expr></init></decl>;</decl_stmt>
                        <if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><name pos:line="116" pos:column="29">mPace</name> <op:operator pos:line="116" pos:column="35">&lt;</op:operator> <name pos:line="116" pos:column="37">mDesiredPace</name> <op:operator pos:line="116" pos:column="50">*</op:operator> <op:operator pos:line="116" pos:column="52">(</op:operator><lit:literal type="number" pos:line="116" pos:column="53">1</lit:literal> <op:operator pos:line="116" pos:column="55">-</op:operator> <name pos:line="116" pos:column="57">much</name><op:operator pos:line="116" pos:column="61">)</op:operator></expr>)</condition><then pos:line="116" pos:column="63"> <block pos:line="116" pos:column="64">{
                            <expr_stmt><expr><call><name><name pos:line="117" pos:column="29">mUtils</name><op:operator pos:line="117" pos:column="35">.</op:operator><name pos:line="117" pos:column="36">say</name></name><argument_list pos:line="117" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="40">"much faster!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="119" pos:column="25">else
                        <if pos:line="120" pos:column="25">if <condition pos:line="120" pos:column="28">(<expr><name pos:line="120" pos:column="29">mPace</name> <op:operator pos:line="120" pos:column="35">&gt;</op:operator> <name pos:line="120" pos:column="37">mDesiredPace</name> <op:operator pos:line="120" pos:column="50">*</op:operator> <op:operator pos:line="120" pos:column="52">(</op:operator><lit:literal type="number" pos:line="120" pos:column="53">1</lit:literal> <op:operator pos:line="120" pos:column="55">+</op:operator> <name pos:line="120" pos:column="57">much</name><op:operator pos:line="120" pos:column="61">)</op:operator></expr>)</condition><then pos:line="120" pos:column="63"> <block pos:line="120" pos:column="64">{
                            <expr_stmt><expr><call><name><name pos:line="121" pos:column="29">mUtils</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">say</name></name><argument_list pos:line="121" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="40">"much slower!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="123" pos:column="25">else
                        <if pos:line="124" pos:column="25">if <condition pos:line="124" pos:column="28">(<expr><name pos:line="124" pos:column="29">mPace</name> <op:operator pos:line="124" pos:column="35">&lt;</op:operator> <name pos:line="124" pos:column="37">mDesiredPace</name> <op:operator pos:line="124" pos:column="50">*</op:operator> <op:operator pos:line="124" pos:column="52">(</op:operator><lit:literal type="number" pos:line="124" pos:column="53">1</lit:literal> <op:operator pos:line="124" pos:column="55">-</op:operator> <name pos:line="124" pos:column="57">normal</name><op:operator pos:line="124" pos:column="63">)</op:operator></expr>)</condition><then pos:line="124" pos:column="65"> <block pos:line="124" pos:column="66">{
                            <expr_stmt><expr><call><name><name pos:line="125" pos:column="29">mUtils</name><op:operator pos:line="125" pos:column="35">.</op:operator><name pos:line="125" pos:column="36">say</name></name><argument_list pos:line="125" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="40">"faster!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="127" pos:column="25">else
                        <if pos:line="128" pos:column="25">if <condition pos:line="128" pos:column="28">(<expr><name pos:line="128" pos:column="29">mPace</name> <op:operator pos:line="128" pos:column="35">&gt;</op:operator> <name pos:line="128" pos:column="37">mDesiredPace</name> <op:operator pos:line="128" pos:column="50">*</op:operator> <op:operator pos:line="128" pos:column="52">(</op:operator><lit:literal type="number" pos:line="128" pos:column="53">1</lit:literal> <op:operator pos:line="128" pos:column="55">+</op:operator> <name pos:line="128" pos:column="57">normal</name><op:operator pos:line="128" pos:column="63">)</op:operator></expr>)</condition><then pos:line="128" pos:column="65"> <block pos:line="128" pos:column="66">{
                            <expr_stmt><expr><call><name><name pos:line="129" pos:column="29">mUtils</name><op:operator pos:line="129" pos:column="35">.</op:operator><name pos:line="129" pos:column="36">say</name></name><argument_list pos:line="129" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="40">"slower!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="131" pos:column="25">else
                        <if pos:line="132" pos:column="25">if <condition pos:line="132" pos:column="28">(<expr><name pos:line="132" pos:column="29">mPace</name> <op:operator pos:line="132" pos:column="35">&lt;</op:operator> <name pos:line="132" pos:column="37">mDesiredPace</name> <op:operator pos:line="132" pos:column="50">*</op:operator> <op:operator pos:line="132" pos:column="52">(</op:operator><lit:literal type="number" pos:line="132" pos:column="53">1</lit:literal> <op:operator pos:line="132" pos:column="55">-</op:operator> <name pos:line="132" pos:column="57">little</name><op:operator pos:line="132" pos:column="63">)</op:operator></expr>)</condition><then pos:line="132" pos:column="65"> <block pos:line="132" pos:column="66">{
                            <expr_stmt><expr><call><name><name pos:line="133" pos:column="29">mUtils</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">say</name></name><argument_list pos:line="133" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="40">"a little faster!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="135" pos:column="25">else
                        <if pos:line="136" pos:column="25">if <condition pos:line="136" pos:column="28">(<expr><name pos:line="136" pos:column="29">mPace</name> <op:operator pos:line="136" pos:column="35">&gt;</op:operator> <name pos:line="136" pos:column="37">mDesiredPace</name> <op:operator pos:line="136" pos:column="50">*</op:operator> <op:operator pos:line="136" pos:column="52">(</op:operator><lit:literal type="number" pos:line="136" pos:column="53">1</lit:literal> <op:operator pos:line="136" pos:column="55">+</op:operator> <name pos:line="136" pos:column="57">little</name><op:operator pos:line="136" pos:column="63">)</op:operator></expr>)</condition><then pos:line="136" pos:column="65"> <block pos:line="136" pos:column="66">{
                            <expr_stmt><expr><call><name><name pos:line="137" pos:column="29">mUtils</name><op:operator pos:line="137" pos:column="35">.</op:operator><name pos:line="137" pos:column="36">say</name></name><argument_list pos:line="137" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="40">"a little slower!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else pos:line="139" pos:column="25">else <block pos:line="139" pos:column="30">{
                            <expr_stmt><expr><name pos:line="140" pos:column="29">spoken</name> <op:operator pos:line="140" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="140" pos:column="38">false</lit:literal></expr>;</expr_stmt>
                        }</block></else></if></else></if></else></if></else></if></else></if></else></if>
                        <if pos:line="142" pos:column="25">if <condition pos:line="142" pos:column="28">(<expr><name pos:line="142" pos:column="29">spoken</name></expr>)</condition><then pos:line="142" pos:column="36"> <block pos:line="142" pos:column="37">{
                            <expr_stmt><expr><name pos:line="143" pos:column="29">mSpokenAt</name> <op:operator pos:line="143" pos:column="39">=</op:operator> <name pos:line="143" pos:column="41">thisStepTime</name></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then></if>
            }</block></then>
            <else pos:line="148" pos:column="13">else <block pos:line="148" pos:column="18">{
                <expr_stmt><expr><name pos:line="149" pos:column="17">mPace</name> <op:operator pos:line="149" pos:column="23">=</op:operator> <op:operator pos:line="149" pos:column="25">-</op:operator><lit:literal type="number" pos:line="149" pos:column="26">1</lit:literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><name pos:line="152" pos:column="9">mLastStepTime</name> <op:operator pos:line="152" pos:column="23">=</op:operator> <name pos:line="152" pos:column="25">thisStepTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="153" pos:column="9">notifyListener</name><argument_list pos:line="153" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier pos:line="156" pos:column="5">private</specifier> <name pos:line="156" pos:column="13">void</name></type> <name pos:line="156" pos:column="18">notifyListener</name><parameter_list pos:line="156" pos:column="32">()</parameter_list> <block pos:line="156" pos:column="35">{
        <for pos:line="157" pos:column="9">for (<init><decl><type><name pos:line="157" pos:column="14">Listener</name></type> <name pos:line="157" pos:column="23">listener</name> <range pos:line="157" pos:column="32">: <expr><name pos:line="157" pos:column="34">mListeners</name></expr></range></decl></init>) <block pos:line="157" pos:column="46">{
            <expr_stmt><expr><call><name><name pos:line="158" pos:column="13">listener</name><op:operator pos:line="158" pos:column="21">.</op:operator><name pos:line="158" pos:column="22">paceChanged</name></name><argument_list pos:line="158" pos:column="33">(<argument><expr><op:operator pos:line="158" pos:column="34">(</op:operator><name pos:line="158" pos:column="35">int</name><op:operator pos:line="158" pos:column="38">)</op:operator><name pos:line="158" pos:column="39">mPace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    
    <function><type><specifier pos:line="162" pos:column="5">public</specifier> <name pos:line="162" pos:column="12">void</name></type> <name pos:line="162" pos:column="17">passValue</name><parameter_list pos:line="162" pos:column="26">()</parameter_list> <block pos:line="162" pos:column="29">{
        <comment type="line" pos:line="163" pos:column="9">// Not used</comment>
    }</block></function>

    <comment type="line" pos:line="166" pos:column="5">//-----------------------------------------------------</comment>
    <comment type="line" pos:line="167" pos:column="5">// Speaking</comment>
    
    <function><type><specifier pos:line="169" pos:column="5">public</specifier> <name pos:line="169" pos:column="12">void</name></type> <name pos:line="169" pos:column="17">speak</name><parameter_list pos:line="169" pos:column="22">()</parameter_list> <block pos:line="169" pos:column="25">{
        <if pos:line="170" pos:column="9">if <condition pos:line="170" pos:column="12">(<expr><call><name><name pos:line="170" pos:column="13">mSettings</name><op:operator pos:line="170" pos:column="22">.</op:operator><name pos:line="170" pos:column="23">shouldTellPace</name></name><argument_list pos:line="170" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="170" pos:column="40"> <block pos:line="170" pos:column="41">{
            <if pos:line="171" pos:column="13">if <condition pos:line="171" pos:column="16">(<expr><name pos:line="171" pos:column="17">mPace</name> <op:operator pos:line="171" pos:column="23">&gt;</op:operator> <lit:literal type="number" pos:line="171" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="171" pos:column="27"> <block pos:line="171" pos:column="28">{
                <expr_stmt><expr><call><name><name pos:line="172" pos:column="17">mUtils</name><op:operator pos:line="172" pos:column="23">.</op:operator><name pos:line="172" pos:column="24">say</name></name><argument_list pos:line="172" pos:column="27">(<argument><expr><name pos:line="172" pos:column="28">mPace</name> <op:operator pos:line="172" pos:column="34">+</op:operator> <lit:literal type="string" pos:line="172" pos:column="36">" steps per minute"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    

}</block></class>

</unit>
