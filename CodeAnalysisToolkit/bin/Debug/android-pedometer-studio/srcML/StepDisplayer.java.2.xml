<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\Users\kosta\Documents\Sensor-Data-Analytics\projects\android-pedometer-studio\app\src\main\java\name\bagi\levente\pedometer\StepDisplayer.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 *  Pedometer - Android App
 *  Copyright (C) 2009 Levente Bagi
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package pos:line="19" pos:column="1">package <name><name pos:line="19" pos:column="9">name</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">bagi</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">levente</name><op:operator pos:line="19" pos:column="26">.</op:operator><name pos:line="19" pos:column="27">pedometer</name></name>;</package>

<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">java</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">util</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">ArrayList</name></name>;</import>

<comment type="block" format="javadoc" pos:line="23" pos:column="1">/**
 * Counts steps provided by StepDetector and passes the current
 * step count to the activity.
 */</comment>
<class><specifier pos:line="27" pos:column="1">public</specifier> class <name pos:line="27" pos:column="14">StepDisplayer</name> <super><implements pos:line="27" pos:column="28">implements <name pos:line="27" pos:column="39">StepListener</name>, <name><name pos:line="27" pos:column="53">SpeakingTimer</name><op:operator pos:line="27" pos:column="66">.</op:operator><name pos:line="27" pos:column="67">Listener</name></name></implements></super> <block pos:line="27" pos:column="76">{

    <decl_stmt><decl><type><specifier pos:line="29" pos:column="5">private</specifier> <name pos:line="29" pos:column="13">int</name></type> <name pos:line="29" pos:column="17">mCount</name> <init pos:line="29" pos:column="24">= <expr><lit:literal type="number" pos:line="29" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="30" pos:column="5">PedometerSettings</name></type> <name pos:line="30" pos:column="23">mSettings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">Utils</name></type> <name pos:line="31" pos:column="11">mUtils</name></decl>;</decl_stmt>

    <constructor><specifier pos:line="33" pos:column="5">public</specifier> <name pos:line="33" pos:column="12">StepDisplayer</name><parameter_list pos:line="33" pos:column="25">(<param><decl><type><name pos:line="33" pos:column="26">PedometerSettings</name></type> <name pos:line="33" pos:column="44">settings</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="54">Utils</name></type> <name pos:line="33" pos:column="60">utils</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="67">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">mUtils</name> <op:operator pos:line="34" pos:column="16">=</op:operator> <name pos:line="34" pos:column="18">utils</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">mSettings</name> <op:operator pos:line="35" pos:column="19">=</op:operator> <name pos:line="35" pos:column="21">settings</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">notifyListener</name><argument_list pos:line="36" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <function><type><specifier pos:line="38" pos:column="5">public</specifier> <name pos:line="38" pos:column="12">void</name></type> <name pos:line="38" pos:column="17">setUtils</name><parameter_list pos:line="38" pos:column="25">(<param><decl><type><name pos:line="38" pos:column="26">Utils</name></type> <name pos:line="38" pos:column="32">utils</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="39">{
        <expr_stmt><expr><name pos:line="39" pos:column="9">mUtils</name> <op:operator pos:line="39" pos:column="16">=</op:operator> <name pos:line="39" pos:column="18">utils</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="42" pos:column="5">public</specifier> <name pos:line="42" pos:column="12">void</name></type> <name pos:line="42" pos:column="17">setSteps</name><parameter_list pos:line="42" pos:column="25">(<param><decl><type><name pos:line="42" pos:column="26">int</name></type> <name pos:line="42" pos:column="30">steps</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="37">{
        <expr_stmt><expr><name pos:line="43" pos:column="9">mCount</name> <op:operator pos:line="43" pos:column="16">=</op:operator> <name pos:line="43" pos:column="18">steps</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">notifyListener</name><argument_list pos:line="44" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="46" pos:column="5">public</specifier> <name pos:line="46" pos:column="12">void</name></type> <name pos:line="46" pos:column="17">onStep</name><parameter_list pos:line="46" pos:column="23">()</parameter_list> <block pos:line="46" pos:column="26">{
        <expr_stmt><expr><name pos:line="47" pos:column="9">mCount</name> <op:operator pos:line="47" pos:column="16">++</op:operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">notifyListener</name><argument_list pos:line="48" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="50" pos:column="5">public</specifier> <name pos:line="50" pos:column="12">void</name></type> <name pos:line="50" pos:column="17">reloadSettings</name><parameter_list pos:line="50" pos:column="31">()</parameter_list> <block pos:line="50" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">notifyListener</name><argument_list pos:line="51" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="53" pos:column="5">public</specifier> <name pos:line="53" pos:column="12">void</name></type> <name pos:line="53" pos:column="17">passValue</name><parameter_list pos:line="53" pos:column="26">()</parameter_list> <block pos:line="53" pos:column="29">{
    }</block></function>
    
    

    <comment type="line" pos:line="58" pos:column="5">//-----------------------------------------------------</comment>
    <comment type="line" pos:line="59" pos:column="5">// Listener</comment>
    
    <class type="interface"><specifier pos:line="61" pos:column="5">public</specifier> interface <name pos:line="61" pos:column="22">Listener</name> <block pos:line="61" pos:column="31">{
        <function_decl><type><specifier pos:line="62" pos:column="9">public</specifier> <name pos:line="62" pos:column="16">void</name></type> <name pos:line="62" pos:column="21">stepsChanged</name><parameter_list pos:line="62" pos:column="33">(<param><decl><type><name pos:line="62" pos:column="34">int</name></type> <name pos:line="62" pos:column="38">value</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier pos:line="63" pos:column="9">public</specifier> <name pos:line="63" pos:column="16">void</name></type> <name pos:line="63" pos:column="21">passValue</name><parameter_list pos:line="63" pos:column="30">()</parameter_list>;</function_decl>
    }</block></class>
    <decl_stmt><decl><type><specifier pos:line="65" pos:column="5">private</specifier> <name><name pos:line="65" pos:column="13">ArrayList</name><argument_list pos:line="65" pos:column="22">&lt;<argument><name pos:line="65" pos:column="23">Listener</name></argument>&gt;</argument_list></name></type> <name pos:line="65" pos:column="33">mListeners</name> <init pos:line="65" pos:column="44">= <expr><op:operator pos:line="65" pos:column="46">new</op:operator> <call><name><name pos:line="65" pos:column="50">ArrayList</name><argument_list pos:line="65" pos:column="59">&lt;<argument><name pos:line="65" pos:column="60">Listener</name></argument>&gt;</argument_list></name><argument_list pos:line="65" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="67" pos:column="5">public</specifier> <name pos:line="67" pos:column="12">void</name></type> <name pos:line="67" pos:column="17">addListener</name><parameter_list pos:line="67" pos:column="28">(<param><decl><type><name pos:line="67" pos:column="29">Listener</name></type> <name pos:line="67" pos:column="38">l</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="41">{
        <expr_stmt><expr><call><name><name pos:line="68" pos:column="9">mListeners</name><op:operator pos:line="68" pos:column="19">.</op:operator><name pos:line="68" pos:column="20">add</name></name><argument_list pos:line="68" pos:column="23">(<argument><expr><name pos:line="68" pos:column="24">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="70" pos:column="5">public</specifier> <name pos:line="70" pos:column="12">void</name></type> <name pos:line="70" pos:column="17">notifyListener</name><parameter_list pos:line="70" pos:column="31">()</parameter_list> <block pos:line="70" pos:column="34">{
        <for pos:line="71" pos:column="9">for (<init><decl><type><name pos:line="71" pos:column="14">Listener</name></type> <name pos:line="71" pos:column="23">listener</name> <range pos:line="71" pos:column="32">: <expr><name pos:line="71" pos:column="34">mListeners</name></expr></range></decl></init>) <block pos:line="71" pos:column="46">{
            <expr_stmt><expr><call><name><name pos:line="72" pos:column="13">listener</name><op:operator pos:line="72" pos:column="21">.</op:operator><name pos:line="72" pos:column="22">stepsChanged</name></name><argument_list pos:line="72" pos:column="34">(<argument><expr><op:operator pos:line="72" pos:column="35">(</op:operator><name pos:line="72" pos:column="36">int</name><op:operator pos:line="72" pos:column="39">)</op:operator><name pos:line="72" pos:column="40">mCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    
    <comment type="line" pos:line="76" pos:column="5">//-----------------------------------------------------</comment>
    <comment type="line" pos:line="77" pos:column="5">// Speaking</comment>
    
    <function><type><specifier pos:line="79" pos:column="5">public</specifier> <name pos:line="79" pos:column="12">void</name></type> <name pos:line="79" pos:column="17">speak</name><parameter_list pos:line="79" pos:column="22">()</parameter_list> <block pos:line="79" pos:column="25">{
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><call><name><name pos:line="80" pos:column="13">mSettings</name><op:operator pos:line="80" pos:column="22">.</op:operator><name pos:line="80" pos:column="23">shouldTellSteps</name></name><argument_list pos:line="80" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="80" pos:column="41"> <block pos:line="80" pos:column="42">{ 
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><name pos:line="81" pos:column="17">mCount</name> <op:operator pos:line="81" pos:column="24">&gt;</op:operator> <lit:literal type="number" pos:line="81" pos:column="26">0</lit:literal></expr>)</condition><then pos:line="81" pos:column="28"> <block pos:line="81" pos:column="29">{
                <expr_stmt><expr><call><name><name pos:line="82" pos:column="17">mUtils</name><op:operator pos:line="82" pos:column="23">.</op:operator><name pos:line="82" pos:column="24">say</name></name><argument_list pos:line="82" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="28">""</lit:literal> <op:operator pos:line="82" pos:column="31">+</op:operator> <name pos:line="82" pos:column="33">mCount</name> <op:operator pos:line="82" pos:column="40">+</op:operator> <lit:literal type="string" pos:line="82" pos:column="42">" steps"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    
    
}</block></class>
</unit>
