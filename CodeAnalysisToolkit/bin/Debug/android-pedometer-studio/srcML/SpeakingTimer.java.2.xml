<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\Users\kosta\Documents\Sensor-Data-Analytics\projects\android-pedometer-studio\app\src\main\java\name\bagi\levente\pedometer\SpeakingTimer.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 *  Pedometer - Android App
 *  Copyright (C) 2009 Levente Bagi
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package pos:line="19" pos:column="1">package <name><name pos:line="19" pos:column="9">name</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">bagi</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">levente</name><op:operator pos:line="19" pos:column="26">.</op:operator><name pos:line="19" pos:column="27">pedometer</name></name>;</package>

<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">java</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">util</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">ArrayList</name></name>;</import>

<comment type="block" format="javadoc" pos:line="23" pos:column="1">/**
 * Call all listening objects repeatedly. 
 * The interval is defined by the user settings.
 * @author Levente Bagi
 */</comment>
<class><specifier pos:line="28" pos:column="1">public</specifier> class <name pos:line="28" pos:column="14">SpeakingTimer</name> <super><implements pos:line="28" pos:column="28">implements <name pos:line="28" pos:column="39">StepListener</name></implements></super> <block pos:line="28" pos:column="52">{

    <decl_stmt><decl><type><name pos:line="30" pos:column="5">PedometerSettings</name></type> <name pos:line="30" pos:column="23">mSettings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="31" pos:column="5">Utils</name></type> <name pos:line="31" pos:column="11">mUtils</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="32" pos:column="5">boolean</name></type> <name pos:line="32" pos:column="13">mShouldSpeak</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="33" pos:column="5">float</name></type> <name pos:line="33" pos:column="11">mInterval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="34" pos:column="5">long</name></type> <name pos:line="34" pos:column="10">mLastSpeakTime</name></decl>;</decl_stmt>
    
    <constructor><specifier pos:line="36" pos:column="5">public</specifier> <name pos:line="36" pos:column="12">SpeakingTimer</name><parameter_list pos:line="36" pos:column="25">(<param><decl><type><name pos:line="36" pos:column="26">PedometerSettings</name></type> <name pos:line="36" pos:column="44">settings</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="54">Utils</name></type> <name pos:line="36" pos:column="60">utils</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="67">{
        <expr_stmt><expr><name pos:line="37" pos:column="9">mLastSpeakTime</name> <op:operator pos:line="37" pos:column="24">=</op:operator> <call><name><name pos:line="37" pos:column="26">System</name><op:operator pos:line="37" pos:column="32">.</op:operator><name pos:line="37" pos:column="33">currentTimeMillis</name></name><argument_list pos:line="37" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="38" pos:column="9">mSettings</name> <op:operator pos:line="38" pos:column="19">=</op:operator> <name pos:line="38" pos:column="21">settings</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">mUtils</name> <op:operator pos:line="39" pos:column="16">=</op:operator> <name pos:line="39" pos:column="18">utils</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">reloadSettings</name><argument_list pos:line="40" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <function><type><specifier pos:line="42" pos:column="5">public</specifier> <name pos:line="42" pos:column="12">void</name></type> <name pos:line="42" pos:column="17">reloadSettings</name><parameter_list pos:line="42" pos:column="31">()</parameter_list> <block pos:line="42" pos:column="34">{
        <expr_stmt><expr><name pos:line="43" pos:column="9">mShouldSpeak</name> <op:operator pos:line="43" pos:column="22">=</op:operator> <call><name><name pos:line="43" pos:column="24">mSettings</name><op:operator pos:line="43" pos:column="33">.</op:operator><name pos:line="43" pos:column="34">shouldSpeak</name></name><argument_list pos:line="43" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="44" pos:column="9">mInterval</name> <op:operator pos:line="44" pos:column="19">=</op:operator> <call><name><name pos:line="44" pos:column="21">mSettings</name><op:operator pos:line="44" pos:column="30">.</op:operator><name pos:line="44" pos:column="31">getSpeakingInterval</name></name><argument_list pos:line="44" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier pos:line="47" pos:column="5">public</specifier> <name pos:line="47" pos:column="12">void</name></type> <name pos:line="47" pos:column="17">onStep</name><parameter_list pos:line="47" pos:column="23">()</parameter_list> <block pos:line="47" pos:column="26">{
        <decl_stmt><decl><type><name pos:line="48" pos:column="9">long</name></type> <name pos:line="48" pos:column="14">now</name> <init pos:line="48" pos:column="18">= <expr><call><name><name pos:line="48" pos:column="20">System</name><op:operator pos:line="48" pos:column="26">.</op:operator><name pos:line="48" pos:column="27">currentTimeMillis</name></name><argument_list pos:line="48" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">long</name></type> <name pos:line="49" pos:column="14">delta</name> <init pos:line="49" pos:column="20">= <expr><name pos:line="49" pos:column="22">now</name> <op:operator pos:line="49" pos:column="26">-</op:operator> <name pos:line="49" pos:column="28">mLastSpeakTime</name></expr></init></decl>;</decl_stmt>
        
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">delta</name> <op:operator pos:line="51" pos:column="19">/</op:operator> <lit:literal type="number" pos:line="51" pos:column="21">60000.0</lit:literal> <op:operator pos:line="51" pos:column="29">&gt;=</op:operator> <name pos:line="51" pos:column="32">mInterval</name></expr>)</condition><then pos:line="51" pos:column="42"> <block pos:line="51" pos:column="43">{
            <expr_stmt><expr><name pos:line="52" pos:column="13">mLastSpeakTime</name> <op:operator pos:line="52" pos:column="28">=</op:operator> <name pos:line="52" pos:column="30">now</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">notifyListeners</name><argument_list pos:line="53" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    
    <function><type><specifier pos:line="57" pos:column="5">public</specifier> <name pos:line="57" pos:column="12">void</name></type> <name pos:line="57" pos:column="17">passValue</name><parameter_list pos:line="57" pos:column="26">()</parameter_list> <block pos:line="57" pos:column="29">{
        <comment type="line" pos:line="58" pos:column="9">// not used</comment>
    }</block></function>

    
    <comment type="line" pos:line="62" pos:column="5">//-----------------------------------------------------</comment>
    <comment type="line" pos:line="63" pos:column="5">// Listener</comment>
    
    <class type="interface"><specifier pos:line="65" pos:column="5">public</specifier> interface <name pos:line="65" pos:column="22">Listener</name> <block pos:line="65" pos:column="31">{
        <function_decl><type><specifier pos:line="66" pos:column="9">public</specifier> <name pos:line="66" pos:column="16">void</name></type> <name pos:line="66" pos:column="21">speak</name><parameter_list pos:line="66" pos:column="26">()</parameter_list>;</function_decl>
    }</block></class>
    <decl_stmt><decl><type><specifier pos:line="68" pos:column="5">private</specifier> <name><name pos:line="68" pos:column="13">ArrayList</name><argument_list pos:line="68" pos:column="22">&lt;<argument><name pos:line="68" pos:column="23">Listener</name></argument>&gt;</argument_list></name></type> <name pos:line="68" pos:column="33">mListeners</name> <init pos:line="68" pos:column="44">= <expr><op:operator pos:line="68" pos:column="46">new</op:operator> <call><name><name pos:line="68" pos:column="50">ArrayList</name><argument_list pos:line="68" pos:column="59">&lt;<argument><name pos:line="68" pos:column="60">Listener</name></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="69">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="70" pos:column="5">public</specifier> <name pos:line="70" pos:column="12">void</name></type> <name pos:line="70" pos:column="17">addListener</name><parameter_list pos:line="70" pos:column="28">(<param><decl><type><name pos:line="70" pos:column="29">Listener</name></type> <name pos:line="70" pos:column="38">l</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="41">{
        <expr_stmt><expr><call><name><name pos:line="71" pos:column="9">mListeners</name><op:operator pos:line="71" pos:column="19">.</op:operator><name pos:line="71" pos:column="20">add</name></name><argument_list pos:line="71" pos:column="23">(<argument><expr><name pos:line="71" pos:column="24">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="73" pos:column="5">public</specifier> <name pos:line="73" pos:column="12">void</name></type> <name pos:line="73" pos:column="17">notifyListeners</name><parameter_list pos:line="73" pos:column="32">()</parameter_list> <block pos:line="73" pos:column="35">{
        <expr_stmt><expr><call><name><name pos:line="74" pos:column="9">mUtils</name><op:operator pos:line="74" pos:column="15">.</op:operator><name pos:line="74" pos:column="16">ding</name></name><argument_list pos:line="74" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
        <for pos:line="75" pos:column="9">for (<init><decl><type><name pos:line="75" pos:column="14">Listener</name></type> <name pos:line="75" pos:column="23">listener</name> <range pos:line="75" pos:column="32">: <expr><name pos:line="75" pos:column="34">mListeners</name></expr></range></decl></init>) <block pos:line="75" pos:column="46">{
            <expr_stmt><expr><call><name><name pos:line="76" pos:column="13">listener</name><op:operator pos:line="76" pos:column="21">.</op:operator><name pos:line="76" pos:column="22">speak</name></name><argument_list pos:line="76" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="line" pos:line="80" pos:column="5">//-----------------------------------------------------</comment>
    <comment type="line" pos:line="81" pos:column="5">// Speaking</comment>
    
    <function><type><specifier pos:line="83" pos:column="5">public</specifier> <name pos:line="83" pos:column="12">boolean</name></type> <name pos:line="83" pos:column="20">isSpeaking</name><parameter_list pos:line="83" pos:column="30">()</parameter_list> <block pos:line="83" pos:column="33">{
        <return pos:line="84" pos:column="9">return <expr><call><name><name pos:line="84" pos:column="16">mUtils</name><op:operator pos:line="84" pos:column="22">.</op:operator><name pos:line="84" pos:column="23">isSpeakingNow</name></name><argument_list pos:line="84" pos:column="36">()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>

</unit>
