<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\android-pedometer-studio\app\src\androidTest\java\sysnetlab\android\sdc\replay\test\StepServiceTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">sysnetlab</name><op:operator pos:line="1" pos:column="18">.</op:operator><name pos:line="1" pos:column="19">android</name><op:operator pos:line="1" pos:column="26">.</op:operator><name pos:line="1" pos:column="27">sdc</name><op:operator pos:line="1" pos:column="30">.</op:operator><name pos:line="1" pos:column="31">replay</name><op:operator pos:line="1" pos:column="37">.</op:operator><name pos:line="1" pos:column="38">test</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">io</name><op:operator pos:line="3" pos:column="15">.</op:operator><name pos:line="3" pos:column="16">InputStream</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">List</name></name>;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">name</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">bagi</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">levente</name><op:operator pos:line="6" pos:column="25">.</op:operator><name pos:line="6" pos:column="26">pedometer</name><op:operator pos:line="6" pos:column="35">.</op:operator><name pos:line="6" pos:column="36">StepDetector</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">name</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">bagi</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">levente</name><op:operator pos:line="7" pos:column="25">.</op:operator><name pos:line="7" pos:column="26">pedometer</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">StepListener</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">name</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">bagi</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">levente</name><op:operator pos:line="8" pos:column="25">.</op:operator><name pos:line="8" pos:column="26">pedometer</name><op:operator pos:line="8" pos:column="35">.</op:operator><name pos:line="8" pos:column="36">StepService</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">sysnetlab</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">android</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">sdc</name><op:operator pos:line="9" pos:column="29">.</op:operator><name pos:line="9" pos:column="30">replay</name><op:operator pos:line="9" pos:column="36">.</op:operator><name pos:line="9" pos:column="37">MockSensingContext</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">sysnetlab</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">android</name><op:operator pos:line="10" pos:column="25">.</op:operator><name pos:line="10" pos:column="26">sdc</name><op:operator pos:line="10" pos:column="29">.</op:operator><name pos:line="10" pos:column="30">replay</name><op:operator pos:line="10" pos:column="36">.</op:operator><name pos:line="10" pos:column="37">SenSeeSensingReplayer</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">sysnetlab</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">android</name><op:operator pos:line="11" pos:column="25">.</op:operator><name pos:line="11" pos:column="26">sdc</name><op:operator pos:line="11" pos:column="29">.</op:operator><name pos:line="11" pos:column="30">replay</name><op:operator pos:line="11" pos:column="36">.</op:operator><name pos:line="11" pos:column="37">SensingReplayer</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">sysnetlab</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">android</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">sdc</name><op:operator pos:line="12" pos:column="29">.</op:operator><name pos:line="12" pos:column="30">replay</name><op:operator pos:line="12" pos:column="36">.</op:operator><name pos:line="12" pos:column="37">metamorphic</name><op:operator pos:line="12" pos:column="48">.</op:operator><name pos:line="12" pos:column="49">AddAvgNoise2</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">sysnetlab</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">android</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">sdc</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">replay</name><op:operator pos:line="13" pos:column="36">.</op:operator><name pos:line="13" pos:column="37">metamorphic</name><op:operator pos:line="13" pos:column="48">.</op:operator><name pos:line="13" pos:column="49">AddRandomNoise</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">sysnetlab</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">android</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">sdc</name><op:operator pos:line="14" pos:column="29">.</op:operator><name pos:line="14" pos:column="30">replay</name><op:operator pos:line="14" pos:column="36">.</op:operator><name pos:line="14" pos:column="37">metamorphic</name><op:operator pos:line="14" pos:column="48">.</op:operator><name pos:line="14" pos:column="49">BaseLineShift</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">sysnetlab</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">android</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">sdc</name><op:operator pos:line="15" pos:column="29">.</op:operator><name pos:line="15" pos:column="30">replay</name><op:operator pos:line="15" pos:column="36">.</op:operator><name pos:line="15" pos:column="37">metamorphic</name><op:operator pos:line="15" pos:column="48">.</op:operator><name pos:line="15" pos:column="49">DownSample</name></name>;</import>
<import pos:line="16" pos:column="1">import <name><name pos:line="16" pos:column="8">sysnetlab</name><op:operator pos:line="16" pos:column="17">.</op:operator><name pos:line="16" pos:column="18">android</name><op:operator pos:line="16" pos:column="25">.</op:operator><name pos:line="16" pos:column="26">sdc</name><op:operator pos:line="16" pos:column="29">.</op:operator><name pos:line="16" pos:column="30">replay</name><op:operator pos:line="16" pos:column="36">.</op:operator><name pos:line="16" pos:column="37">metamorphic</name><op:operator pos:line="16" pos:column="48">.</op:operator><name pos:line="16" pos:column="49">InsertNoise</name></name>;</import>
<import pos:line="17" pos:column="1">import <name><name pos:line="17" pos:column="8">sysnetlab</name><op:operator pos:line="17" pos:column="17">.</op:operator><name pos:line="17" pos:column="18">android</name><op:operator pos:line="17" pos:column="25">.</op:operator><name pos:line="17" pos:column="26">sdc</name><op:operator pos:line="17" pos:column="29">.</op:operator><name pos:line="17" pos:column="30">replay</name><op:operator pos:line="17" pos:column="36">.</op:operator><name pos:line="17" pos:column="37">metamorphic</name><op:operator pos:line="17" pos:column="48">.</op:operator><name pos:line="17" pos:column="49">Interpolating</name></name>;</import>
<import pos:line="18" pos:column="1">import <name><name pos:line="18" pos:column="8">sysnetlab</name><op:operator pos:line="18" pos:column="17">.</op:operator><name pos:line="18" pos:column="18">android</name><op:operator pos:line="18" pos:column="25">.</op:operator><name pos:line="18" pos:column="26">sdc</name><op:operator pos:line="18" pos:column="29">.</op:operator><name pos:line="18" pos:column="30">replay</name><op:operator pos:line="18" pos:column="36">.</op:operator><name pos:line="18" pos:column="37">metamorphic</name><op:operator pos:line="18" pos:column="48">.</op:operator><name pos:line="18" pos:column="49">MultiplyByTwo</name></name>;</import>
<import pos:line="19" pos:column="1">import <name><name pos:line="19" pos:column="8">sysnetlab</name><op:operator pos:line="19" pos:column="17">.</op:operator><name pos:line="19" pos:column="18">android</name><op:operator pos:line="19" pos:column="25">.</op:operator><name pos:line="19" pos:column="26">sdc</name><op:operator pos:line="19" pos:column="29">.</op:operator><name pos:line="19" pos:column="30">replay</name><op:operator pos:line="19" pos:column="36">.</op:operator><name pos:line="19" pos:column="37">metamorphic</name><op:operator pos:line="19" pos:column="48">.</op:operator><name pos:line="19" pos:column="49">MultiplyZAxisByTwo</name></name>;</import>
<import pos:line="20" pos:column="1">import <name><name pos:line="20" pos:column="8">sysnetlab</name><op:operator pos:line="20" pos:column="17">.</op:operator><name pos:line="20" pos:column="18">android</name><op:operator pos:line="20" pos:column="25">.</op:operator><name pos:line="20" pos:column="26">sdc</name><op:operator pos:line="20" pos:column="29">.</op:operator><name pos:line="20" pos:column="30">replay</name><op:operator pos:line="20" pos:column="36">.</op:operator><name pos:line="20" pos:column="37">metamorphic</name><op:operator pos:line="20" pos:column="48">.</op:operator><name pos:line="20" pos:column="49">NoEffectMetamorphicTransform</name></name>;</import>
<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">sysnetlab</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">android</name><op:operator pos:line="21" pos:column="25">.</op:operator><name pos:line="21" pos:column="26">sdc</name><op:operator pos:line="21" pos:column="29">.</op:operator><name pos:line="21" pos:column="30">replay</name><op:operator pos:line="21" pos:column="36">.</op:operator><name pos:line="21" pos:column="37">metamorphic</name><op:operator pos:line="21" pos:column="48">.</op:operator><name pos:line="21" pos:column="49">Semantic</name></name>;</import>

<import pos:line="23" pos:column="1">import <name><name pos:line="23" pos:column="8">android</name><op:operator pos:line="23" pos:column="15">.</op:operator><name pos:line="23" pos:column="16">content</name><op:operator pos:line="23" pos:column="23">.</op:operator><name pos:line="23" pos:column="24">Context</name></name>;</import>
<import pos:line="24" pos:column="1">import <name><name pos:line="24" pos:column="8">android</name><op:operator pos:line="24" pos:column="15">.</op:operator><name pos:line="24" pos:column="16">content</name><op:operator pos:line="24" pos:column="23">.</op:operator><name pos:line="24" pos:column="24">Intent</name></name>;</import>
<import pos:line="25" pos:column="1">import <name><name pos:line="25" pos:column="8">android</name><op:operator pos:line="25" pos:column="15">.</op:operator><name pos:line="25" pos:column="16">hardware</name><op:operator pos:line="25" pos:column="24">.</op:operator><name pos:line="25" pos:column="25">Sensor</name></name>;</import>
<import pos:line="26" pos:column="1">import <name><name pos:line="26" pos:column="8">android</name><op:operator pos:line="26" pos:column="15">.</op:operator><name pos:line="26" pos:column="16">hardware</name><op:operator pos:line="26" pos:column="24">.</op:operator><name pos:line="26" pos:column="25">SensorEventListener</name></name>;</import>
<import pos:line="27" pos:column="1">import <name><name pos:line="27" pos:column="8">android</name><op:operator pos:line="27" pos:column="15">.</op:operator><name pos:line="27" pos:column="16">test</name><op:operator pos:line="27" pos:column="20">.</op:operator><name pos:line="27" pos:column="21">ServiceTestCase</name></name>;</import>

<class><specifier pos:line="29" pos:column="1">public</specifier> class <name pos:line="29" pos:column="14">StepServiceTest</name> 
		<super><extends pos:line="30" pos:column="17">extends <name><name pos:line="30" pos:column="25">ServiceTestCase</name><argument_list pos:line="30" pos:column="40">&lt;<argument><name pos:line="30" pos:column="41">StepService</name></argument>&gt;</argument_list></name></extends></super> <block pos:line="30" pos:column="54">{

    <decl_stmt><decl><type><specifier pos:line="32" pos:column="5">private</specifier> <name pos:line="32" pos:column="13">int</name></type> <name pos:line="32" pos:column="17">stepsCountedByStepDetector</name> <init pos:line="32" pos:column="44">= <expr><lit:literal type="number" pos:line="32" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">StepServiceTest</name><parameter_list pos:line="34" pos:column="31">()</parameter_list> 
	<block pos:line="35" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">super</name><argument_list pos:line="36" pos:column="22">(<argument><expr><name><name pos:line="36" pos:column="23">StepService</name><op:operator pos:line="36" pos:column="34">.</op:operator><name pos:line="36" pos:column="35">class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">setUp</name><parameter_list pos:line="39" pos:column="26">()</parameter_list> <throws pos:line="39" pos:column="29">throws <argument><expr><name pos:line="39" pos:column="36">Exception</name></expr></argument></throws> <block pos:line="39" pos:column="46">{
	}</block></function>

	<function><type><specifier pos:line="42" pos:column="9">public</specifier> <name pos:line="42" pos:column="16">void</name></type> <name pos:line="42" pos:column="21">tearDown</name><parameter_list pos:line="42" pos:column="29">()</parameter_list> <throws pos:line="42" pos:column="32">throws <argument><expr><name pos:line="42" pos:column="39">Exception</name></expr></argument></throws> <block pos:line="42" pos:column="49">{
	}</block></function>
	
	<function><type><specifier pos:line="45" pos:column="9">public</specifier> <name pos:line="45" pos:column="16">void</name></type> <name pos:line="45" pos:column="21">testReplayInStepService</name><parameter_list pos:line="45" pos:column="44">()</parameter_list> <throws pos:line="45" pos:column="47">throws <argument><expr><name pos:line="45" pos:column="54">Exception</name></expr></argument></throws> 
	<block pos:line="46" pos:column="9">{
        <comment type="line" pos:line="47" pos:column="9">//set up mock context to capture the application's sensor data listener</comment>
		<decl_stmt><decl><type><name pos:line="48" pos:column="17">MockSensingContext</name></type> <name pos:line="48" pos:column="36">mockContext</name> <init pos:line="48" pos:column="48">= <expr><op:operator pos:line="48" pos:column="50">new</op:operator> <call><name pos:line="48" pos:column="54">MockSensingContext</name><argument_list pos:line="48" pos:column="72">(<argument><expr><call><name pos:line="48" pos:column="73">getContext</name><argument_list pos:line="48" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">setContext</name><argument_list pos:line="49" pos:column="19">(<argument><expr><name pos:line="49" pos:column="20">mockContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="51" pos:column="9">//start the StepService</comment>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">startService</name><argument_list pos:line="52" pos:column="21">(<argument><expr><op:operator pos:line="52" pos:column="22">new</op:operator> <call><name pos:line="52" pos:column="26">Intent</name><argument_list pos:line="52" pos:column="32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        <decl_stmt><decl><type><name pos:line="53" pos:column="9">StepService</name></type> <name pos:line="53" pos:column="21">stepService</name> <init pos:line="53" pos:column="33">= <expr><op:operator pos:line="53" pos:column="35">(</op:operator><name pos:line="53" pos:column="36">StepService</name><op:operator pos:line="53" pos:column="47">)</op:operator> <call><name pos:line="53" pos:column="49">getService</name><argument_list pos:line="53" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">assertNotNull</name><argument_list pos:line="54" pos:column="22">(<argument><expr><name pos:line="54" pos:column="23">stepService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      

        <comment type="line" pos:line="56" pos:column="9">//set up the replayer, using files from SenSee and the captured listener</comment>
        <decl_stmt><decl><type><name pos:line="57" pos:column="9">SensorEventListener</name></type> <name pos:line="57" pos:column="29">capturedListener</name> <init pos:line="57" pos:column="46">= <expr><call><name><name pos:line="57" pos:column="48">mockContext</name><op:operator pos:line="57" pos:column="59">.</op:operator><name pos:line="57" pos:column="60">getCapturedEventListener</name></name><argument_list pos:line="57" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">assertNotNull</name><argument_list pos:line="58" pos:column="22">(<argument><expr><name pos:line="58" pos:column="23">capturedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="59" pos:column="9">StepDetector</name></type> <name pos:line="59" pos:column="22">stepDetector</name> <init pos:line="59" pos:column="35">= <expr><op:operator pos:line="59" pos:column="37">(</op:operator><name pos:line="59" pos:column="38">StepDetector</name><op:operator pos:line="59" pos:column="50">)</op:operator> <name pos:line="59" pos:column="52">capturedListener</name></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="59" pos:column="71">//-----------------------------</comment>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">assertNotNull</name><argument_list pos:line="60" pos:column="22">(<argument><expr><name pos:line="60" pos:column="23">stepDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name pos:line="62" pos:column="9">Context</name></type> <name pos:line="62" pos:column="17">testContext</name> <init pos:line="62" pos:column="29">= <expr><op:operator pos:line="62" pos:column="31">(</op:operator><name pos:line="62" pos:column="32">Context</name><op:operator pos:line="62" pos:column="39">)</op:operator><call><name pos:line="62" pos:column="40">getClass</name><argument_list pos:line="62" pos:column="48">()</argument_list></call><op:operator pos:line="62" pos:column="50">.</op:operator><call><name pos:line="62" pos:column="51">getMethod</name><argument_list pos:line="62" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="62" pos:column="61">"getTestContext"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="78">.</op:operator><call><name pos:line="62" pos:column="79">invoke</name><argument_list pos:line="62" pos:column="85">(<argument><expr><name pos:line="62" pos:column="86">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="63" pos:column="9">InputStream</name></type> <name pos:line="63" pos:column="21">dataStream</name> <init pos:line="63" pos:column="32">= <expr><call><name><name pos:line="63" pos:column="34">testContext</name><op:operator pos:line="63" pos:column="45">.</op:operator><name pos:line="63" pos:column="46">getAssets</name></name><argument_list pos:line="63" pos:column="55">()</argument_list></call><op:operator pos:line="63" pos:column="57">.</op:operator><call><name pos:line="63" pos:column="58">open</name><argument_list pos:line="63" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="63" pos:column="63">"accelerometer.csv"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="64" pos:column="9">int</name></type> <name pos:line="64" pos:column="13">stepsInSenSeeExperiment</name> <init pos:line="64" pos:column="37">= <expr><lit:literal type="number" pos:line="64" pos:column="39">25</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name pos:line="66" pos:column="9">SensingReplayer</name></type> <name pos:line="66" pos:column="25">replayer</name> <init pos:line="66" pos:column="34">= <expr><op:operator pos:line="66" pos:column="36">new</op:operator> <call><name pos:line="66" pos:column="40">SenSeeSensingReplayer</name><argument_list pos:line="66" pos:column="61">(<argument><expr><name pos:line="66" pos:column="62">dataStream</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="74">capturedListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="68" pos:column="9">//set up a step listener to detect when the application counts a step</comment>
        <expr_stmt><expr><call><name><name pos:line="69" pos:column="9">stepDetector</name><op:operator pos:line="69" pos:column="21">.</op:operator><name pos:line="69" pos:column="22">clearStepListeners</name></name><argument_list pos:line="69" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="70" pos:column="9">stepDetector</name><op:operator pos:line="70" pos:column="21">.</op:operator><name pos:line="70" pos:column="22">addStepListener</name></name><argument_list pos:line="70" pos:column="37">(<argument><expr><op:operator pos:line="70" pos:column="38">new</op:operator> <class><super><name pos:line="70" pos:column="42">StepListener</name></super><argument_list pos:line="70" pos:column="54">()</argument_list> <block pos:line="70" pos:column="57">{
            <function><type><annotation pos:line="71" pos:column="13">@<name pos:line="71" pos:column="14">Override</name></annotation>
            <specifier pos:line="72" pos:column="13">public</specifier> <name pos:line="72" pos:column="20">void</name></type> <name pos:line="72" pos:column="25">onStep</name><parameter_list pos:line="72" pos:column="31">()</parameter_list> <block pos:line="72" pos:column="34">{
                <expr_stmt><expr><name pos:line="73" pos:column="17">stepsCountedByStepDetector</name><op:operator pos:line="73" pos:column="43">++</op:operator></expr>;</expr_stmt>
            }</block></function>

            <function><type><annotation pos:line="76" pos:column="13">@<name pos:line="76" pos:column="14">Override</name></annotation>
            <specifier pos:line="77" pos:column="13">public</specifier> <name pos:line="77" pos:column="20">void</name></type> <name pos:line="77" pos:column="25">passValue</name><parameter_list pos:line="77" pos:column="34">()</parameter_list> <block pos:line="77" pos:column="37">{
                <comment type="line" pos:line="78" pos:column="17">//do nothing</comment>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name pos:line="82" pos:column="9">int</name></type> <name pos:line="82" pos:column="13">TransformID</name> <init pos:line="82" pos:column="25">= <expr><lit:literal type="number" pos:line="82" pos:column="27">10</lit:literal></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="84" pos:column="9">//replay</comment>

        <decl_stmt><decl><type><name><name pos:line="86" pos:column="9">List</name><argument_list pos:line="86" pos:column="13">&lt;<argument><name pos:line="86" pos:column="14">float</name><index pos:line="86" pos:column="19">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="86" pos:column="23">allSensorValues</name> <init pos:line="86" pos:column="39">= <expr><call><name><name pos:line="86" pos:column="41">replayer</name><op:operator pos:line="86" pos:column="49">.</op:operator><name pos:line="86" pos:column="50">getAllSensorValuesForReplay</name></name><argument_list pos:line="86" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="87" pos:column="9">replayInStepDetectorAndAssert</name><argument_list pos:line="87" pos:column="38">(<argument><expr><name pos:line="87" pos:column="39">stepDetector</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="78">allSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="89" pos:column="9">//List of Transform Functions Below</comment>

        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name pos:line="91" pos:column="13">TransformID</name> <op:operator pos:line="91" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="91" pos:column="28">1</lit:literal></expr>)</condition><then><block pos:line="91" pos:column="30">{
            <comment type="line" pos:line="92" pos:column="13">//transform and replay again--------------------</comment>
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">NoEffectMetamorphicTransform</name></type> <name pos:line="93" pos:column="42">transformOne</name> <init pos:line="93" pos:column="55">= <expr><op:operator pos:line="93" pos:column="57">new</op:operator> <call><name pos:line="93" pos:column="61">NoEffectMetamorphicTransform</name><argument_list pos:line="93" pos:column="89">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="94" pos:column="13">List</name><argument_list pos:line="94" pos:column="17">&lt;<argument><name pos:line="94" pos:column="18">float</name><index pos:line="94" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="94" pos:column="27">morphedSensorValues</name> <init pos:line="94" pos:column="47">= <expr><call><name><name pos:line="94" pos:column="49">transformOne</name><op:operator pos:line="94" pos:column="61">.</op:operator><name pos:line="94" pos:column="62">transform</name></name><argument_list pos:line="94" pos:column="71">(<argument><expr><name pos:line="94" pos:column="72">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="95" pos:column="42">(<argument><expr><name pos:line="95" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">TransformID</name> <op:operator pos:line="98" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="98" pos:column="28">2</lit:literal></expr>)</condition><then pos:line="98" pos:column="30"> <block pos:line="98" pos:column="31">{
            <comment type="line" pos:line="99" pos:column="13">// This Transform Multiples all X,Y,Z coordinate values by a Factor of 2</comment>
            <decl_stmt><decl><type><name pos:line="100" pos:column="13">MultiplyByTwo</name></type> <name pos:line="100" pos:column="27">transformTwo</name> <init pos:line="100" pos:column="40">= <expr><op:operator pos:line="100" pos:column="42">new</op:operator> <call><name pos:line="100" pos:column="46">MultiplyByTwo</name><argument_list pos:line="100" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="101" pos:column="13">List</name><argument_list pos:line="101" pos:column="17">&lt;<argument><name pos:line="101" pos:column="18">float</name><index pos:line="101" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="101" pos:column="27">morphedSensorValues</name> <init pos:line="101" pos:column="47">= <expr><call><name><name pos:line="101" pos:column="49">transformTwo</name><op:operator pos:line="101" pos:column="61">.</op:operator><name pos:line="101" pos:column="62">transform</name></name><argument_list pos:line="101" pos:column="71">(<argument><expr><name pos:line="101" pos:column="72">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="102" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="102" pos:column="42">(<argument><expr><name pos:line="102" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">TransformID</name> <op:operator pos:line="105" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="105" pos:column="28">3</lit:literal></expr>)</condition><then pos:line="105" pos:column="30"> <block pos:line="105" pos:column="31">{
            <comment type="line" pos:line="106" pos:column="13">// This Transform Multiples all Z coordinate values by a Factor of 2</comment>
            <decl_stmt><decl><type><name pos:line="107" pos:column="13">MultiplyZAxisByTwo</name></type> <name pos:line="107" pos:column="32">transformThree</name> <init pos:line="107" pos:column="47">= <expr><op:operator pos:line="107" pos:column="49">new</op:operator> <call><name pos:line="107" pos:column="53">MultiplyZAxisByTwo</name><argument_list pos:line="107" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="108" pos:column="13">List</name><argument_list pos:line="108" pos:column="17">&lt;<argument><name pos:line="108" pos:column="18">float</name><index pos:line="108" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="108" pos:column="27">morphedSensorValues</name> <init pos:line="108" pos:column="47">= <expr><call><name><name pos:line="108" pos:column="49">transformThree</name><op:operator pos:line="108" pos:column="63">.</op:operator><name pos:line="108" pos:column="64">transform</name></name><argument_list pos:line="108" pos:column="73">(<argument><expr><name pos:line="108" pos:column="74">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="109" pos:column="42">(<argument><expr><name pos:line="109" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">TransformID</name> <op:operator pos:line="112" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="112" pos:column="28">4</lit:literal></expr>)</condition><then pos:line="112" pos:column="30"> <block pos:line="112" pos:column="31">{
            <comment type="line" pos:line="113" pos:column="13">// This Transform Adds Noise to the array plus/minus 1 to every to every value in the array</comment>
            <comment type="line" pos:line="114" pos:column="13">// effectively doubling the size if the array</comment>
            <decl_stmt><decl><type><name pos:line="115" pos:column="13">InsertNoise</name></type> <name pos:line="115" pos:column="25">transformFour</name> <init pos:line="115" pos:column="39">= <expr><op:operator pos:line="115" pos:column="41">new</op:operator> <call><name pos:line="115" pos:column="45">InsertNoise</name><argument_list pos:line="115" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="116" pos:column="13">List</name><argument_list pos:line="116" pos:column="17">&lt;<argument><name pos:line="116" pos:column="18">float</name><index pos:line="116" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="116" pos:column="27">morphedSensorValues</name> <init pos:line="116" pos:column="47">= <expr><call><name><name pos:line="116" pos:column="49">transformFour</name><op:operator pos:line="116" pos:column="62">.</op:operator><name pos:line="116" pos:column="63">transform</name></name><argument_list pos:line="116" pos:column="72">(<argument><expr><name pos:line="116" pos:column="73">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="117" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="117" pos:column="42">(<argument><expr><name pos:line="117" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><name pos:line="120" pos:column="13">TransformID</name> <op:operator pos:line="120" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="120" pos:column="28">5</lit:literal></expr>)</condition><then pos:line="120" pos:column="30"> <block pos:line="120" pos:column="31">{
            <comment type="line" pos:line="121" pos:column="13">// This Transform modifies all the existing array values by adding random noise to</comment>
            <comment type="line" pos:line="122" pos:column="13">// the value</comment>
            <decl_stmt><decl><type><name pos:line="123" pos:column="13">AddRandomNoise</name></type> <name pos:line="123" pos:column="28">transformFive</name> <init pos:line="123" pos:column="42">= <expr><op:operator pos:line="123" pos:column="44">new</op:operator> <call><name pos:line="123" pos:column="48">AddRandomNoise</name><argument_list pos:line="123" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="124" pos:column="13">List</name><argument_list pos:line="124" pos:column="17">&lt;<argument><name pos:line="124" pos:column="18">float</name><index pos:line="124" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="124" pos:column="27">morphedSensorValues</name> <init pos:line="124" pos:column="47">= <expr><call><name><name pos:line="124" pos:column="49">transformFive</name><op:operator pos:line="124" pos:column="62">.</op:operator><name pos:line="124" pos:column="63">transform</name></name><argument_list pos:line="124" pos:column="72">(<argument><expr><name pos:line="124" pos:column="73">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="125" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="125" pos:column="42">(<argument><expr><name pos:line="125" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><name pos:line="128" pos:column="13">TransformID</name> <op:operator pos:line="128" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="128" pos:column="28">6</lit:literal></expr>)</condition><then pos:line="128" pos:column="30"> <block pos:line="128" pos:column="31">{
            <comment type="line" pos:line="129" pos:column="13">// This Transform create inputs that are have the same âmeaningâ as the original</comment>
            <decl_stmt><decl><type><name pos:line="130" pos:column="13">Semantic</name></type> <name pos:line="130" pos:column="22">transformSix</name> <init pos:line="130" pos:column="35">= <expr><op:operator pos:line="130" pos:column="37">new</op:operator> <call><name pos:line="130" pos:column="41">Semantic</name><argument_list pos:line="130" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="131" pos:column="13">List</name><argument_list pos:line="131" pos:column="17">&lt;<argument><name pos:line="131" pos:column="18">float</name><index pos:line="131" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="131" pos:column="27">morphedSensorValues</name> <init pos:line="131" pos:column="47">= <expr><call><name><name pos:line="131" pos:column="49">transformSix</name><op:operator pos:line="131" pos:column="61">.</op:operator><name pos:line="131" pos:column="62">transform</name></name><argument_list pos:line="131" pos:column="71">(<argument><expr><name pos:line="131" pos:column="72">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="132" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="132" pos:column="42">(<argument><expr><name pos:line="132" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><name pos:line="135" pos:column="13">TransformID</name> <op:operator pos:line="135" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="135" pos:column="28">7</lit:literal></expr>)</condition><then pos:line="135" pos:column="30"> <block pos:line="135" pos:column="31">{
            <comment type="line" pos:line="136" pos:column="13">// Transform that adds average noise to the data set</comment>
            <decl_stmt><decl><type><name pos:line="137" pos:column="13">AddAvgNoise2</name></type> <name pos:line="137" pos:column="26">transformSeven</name> <init pos:line="137" pos:column="41">= <expr><op:operator pos:line="137" pos:column="43">new</op:operator> <call><name pos:line="137" pos:column="47">AddAvgNoise2</name><argument_list pos:line="137" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="138" pos:column="13">List</name><argument_list pos:line="138" pos:column="17">&lt;<argument><name pos:line="138" pos:column="18">float</name><index pos:line="138" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="138" pos:column="27">morphedSensorValues</name> <init pos:line="138" pos:column="47">= <expr><call><name><name pos:line="138" pos:column="49">transformSeven</name><op:operator pos:line="138" pos:column="63">.</op:operator><name pos:line="138" pos:column="64">transform</name></name><argument_list pos:line="138" pos:column="73">(<argument><expr><name pos:line="138" pos:column="74">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="139" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="139" pos:column="42">(<argument><expr><name pos:line="139" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="142" pos:column="9">if <condition pos:line="142" pos:column="12">(<expr><name pos:line="142" pos:column="13">TransformID</name> <op:operator pos:line="142" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="142" pos:column="28">8</lit:literal></expr>)</condition><then><block pos:line="142" pos:column="30">{
            <comment type="line" pos:line="143" pos:column="13">// This Transform down sizes the array by deleting a certain percentage of</comment>
            <comment type="line" pos:line="144" pos:column="13">// the values</comment>
            <decl_stmt><decl><type><name pos:line="145" pos:column="13">DownSample</name></type> <name pos:line="145" pos:column="24">transformSeven</name> <init pos:line="145" pos:column="39">= <expr><op:operator pos:line="145" pos:column="41">new</op:operator> <call><name pos:line="145" pos:column="45">DownSample</name><argument_list pos:line="145" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="146" pos:column="13">List</name><argument_list pos:line="146" pos:column="17">&lt;<argument><name pos:line="146" pos:column="18">float</name><index pos:line="146" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="146" pos:column="27">morphedSensorValues</name> <init pos:line="146" pos:column="47">= <expr><call><name><name pos:line="146" pos:column="49">transformSeven</name><op:operator pos:line="146" pos:column="63">.</op:operator><name pos:line="146" pos:column="64">transform</name></name><argument_list pos:line="146" pos:column="73">(<argument><expr><name pos:line="146" pos:column="74">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="147" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="147" pos:column="42">(<argument><expr><name pos:line="147" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if pos:line="150" pos:column="9">if <condition pos:line="150" pos:column="12">(<expr><name pos:line="150" pos:column="13">TransformID</name> <op:operator pos:line="150" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="150" pos:column="28">9</lit:literal></expr>)</condition><then><block pos:line="150" pos:column="30">{
            <comment type="line" pos:line="151" pos:column="13">// This Transform down sizes the array by deleting a certain percentage of</comment>
            <comment type="line" pos:line="152" pos:column="13">// the values</comment>
            <decl_stmt><decl><type><name pos:line="153" pos:column="13">Interpolating</name></type> <name pos:line="153" pos:column="27">transformEight</name> <init pos:line="153" pos:column="42">= <expr><op:operator pos:line="153" pos:column="44">new</op:operator> <call><name pos:line="153" pos:column="48">Interpolating</name><argument_list pos:line="153" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="154" pos:column="13">List</name><argument_list pos:line="154" pos:column="17">&lt;<argument><name pos:line="154" pos:column="18">float</name><index pos:line="154" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="154" pos:column="27">morphedSensorValues</name> <init pos:line="154" pos:column="47">= <expr><call><name><name pos:line="154" pos:column="49">transformEight</name><op:operator pos:line="154" pos:column="63">.</op:operator><name pos:line="154" pos:column="64">transform</name></name><argument_list pos:line="154" pos:column="73">(<argument><expr><name pos:line="154" pos:column="74">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="155" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="155" pos:column="42">(<argument><expr><name pos:line="155" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>

        <else pos:line="158" pos:column="9">else<block pos:line="158" pos:column="13">{
            <comment type="line" pos:line="159" pos:column="13">// This Transform move the base line of the input data based on defined Rise and</comment>
            <comment type="line" pos:line="160" pos:column="13">// Run values</comment>
            <decl_stmt><decl><type><name pos:line="161" pos:column="13">BaseLineShift</name></type> <name pos:line="161" pos:column="27">transformNine</name> <init pos:line="161" pos:column="41">= <expr><op:operator pos:line="161" pos:column="43">new</op:operator> <call><name pos:line="161" pos:column="47">BaseLineShift</name><argument_list pos:line="161" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="162" pos:column="13">List</name><argument_list pos:line="162" pos:column="17">&lt;<argument><name pos:line="162" pos:column="18">float</name><index pos:line="162" pos:column="23">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="162" pos:column="27">morphedSensorValues</name> <init pos:line="162" pos:column="47">= <expr><call><name><name pos:line="162" pos:column="49">transformNine</name><op:operator pos:line="162" pos:column="62">.</op:operator><name pos:line="162" pos:column="63">transform</name></name><argument_list pos:line="162" pos:column="72">(<argument><expr><name pos:line="162" pos:column="73">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="163" pos:column="13">replayInStepDetectorAndAssert</name><argument_list pos:line="163" pos:column="42">(<argument><expr><name pos:line="163" pos:column="43">stepDetector</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="57">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="82">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>


        <comment type="line" pos:line="167" pos:column="9">// Next transform Goes here</comment>


	}</block></function>

    <function><type><specifier pos:line="172" pos:column="5">private</specifier> <name pos:line="172" pos:column="13">void</name></type> <name pos:line="172" pos:column="18">replayInStepDetectorAndAssert</name><parameter_list pos:line="172" pos:column="47">(<param><decl><type><name pos:line="172" pos:column="48">StepDetector</name></type> <name pos:line="172" pos:column="61">stepDetector</name></decl></param>,
                                               <param><decl><type><name pos:line="173" pos:column="48">int</name></type> <name pos:line="173" pos:column="52">stepsInSenSeeExperiment</name></decl></param>,
                                               <param><decl><type><name><name pos:line="174" pos:column="48">List</name><argument_list pos:line="174" pos:column="52">&lt;<argument><name><name pos:line="174" pos:column="53">float</name><index pos:line="174" pos:column="58">[]</index></name></argument>&gt;</argument_list></name></type> <name pos:line="174" pos:column="62">morphedSensorValues</name></decl></param>)</parameter_list> <block pos:line="174" pos:column="83">{

        <for pos:line="176" pos:column="9">for(<init><decl><type><name pos:line="176" pos:column="13">float</name><index pos:line="176" pos:column="18">[]</index></type> <name pos:line="176" pos:column="21">sensorValues</name> <range pos:line="176" pos:column="34">: <expr><name pos:line="176" pos:column="36">morphedSensorValues</name></expr></range></decl></init>)
        <block pos:line="177" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="178" pos:column="13">stepDetector</name><op:operator pos:line="178" pos:column="25">.</op:operator><name pos:line="178" pos:column="26">onSensorChanged</name></name><argument_list pos:line="178" pos:column="41">(<argument><expr><name><name pos:line="178" pos:column="42">Sensor</name><op:operator pos:line="178" pos:column="48">.</op:operator><name pos:line="178" pos:column="49">TYPE_ACCELEROMETER</name></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="69">sensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <comment type="line" pos:line="181" pos:column="9">//-----Code to Output Morphed Values so they can be graphed--------------------</comment>

         <decl_stmt><decl><type><name pos:line="183" pos:column="10">float</name><index pos:line="183" pos:column="15">[]</index></type> <name pos:line="183" pos:column="18">morphedArrX</name> <init pos:line="183" pos:column="30">= <expr><op:operator pos:line="183" pos:column="32">new</op:operator> <name><name pos:line="183" pos:column="36">float</name><index pos:line="183" pos:column="41">[<expr><call><name><name pos:line="183" pos:column="42">morphedSensorValues</name><op:operator pos:line="183" pos:column="61">.</op:operator><name pos:line="183" pos:column="62">size</name></name><argument_list pos:line="183" pos:column="66">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
         <for pos:line="184" pos:column="10">for (<init><decl><type><name pos:line="184" pos:column="15">int</name></type> <name pos:line="184" pos:column="19">i</name> <init pos:line="184" pos:column="21">= <expr><lit:literal type="number" pos:line="184" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="184" pos:column="26">i</name> <op:operator pos:line="184" pos:column="28">&lt;</op:operator> <call><name><name pos:line="184" pos:column="30">morphedSensorValues</name><op:operator pos:line="184" pos:column="49">.</op:operator><name pos:line="184" pos:column="50">size</name></name><argument_list pos:line="184" pos:column="54">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="184" pos:column="58">i</name><op:operator pos:line="184" pos:column="59">++</op:operator></expr></incr>) <block pos:line="184" pos:column="63">{
                <expr_stmt><expr><name><name pos:line="185" pos:column="17">morphedArrX</name><index pos:line="185" pos:column="28">[<expr><name pos:line="185" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="185" pos:column="32">=</op:operator> <call><name><name pos:line="185" pos:column="34">morphedSensorValues</name><op:operator pos:line="185" pos:column="53">.</op:operator><name pos:line="185" pos:column="54">get</name></name><argument_list pos:line="185" pos:column="57">(<argument><expr><name pos:line="185" pos:column="58">i</name></expr></argument>)</argument_list></call><index pos:line="185" pos:column="60">[<expr><lit:literal type="number" pos:line="185" pos:column="61">0</lit:literal></expr>]</index></expr>;</expr_stmt>
            }</block></for>

        <decl_stmt><decl><type><name pos:line="188" pos:column="9">float</name><index pos:line="188" pos:column="14">[]</index></type> <name pos:line="188" pos:column="17">morphedArrY</name> <init pos:line="188" pos:column="29">= <expr><op:operator pos:line="188" pos:column="31">new</op:operator> <name><name pos:line="188" pos:column="35">float</name><index pos:line="188" pos:column="40">[<expr><call><name><name pos:line="188" pos:column="41">morphedSensorValues</name><op:operator pos:line="188" pos:column="60">.</op:operator><name pos:line="188" pos:column="61">size</name></name><argument_list pos:line="188" pos:column="65">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for pos:line="189" pos:column="9">for (<init><decl><type><name pos:line="189" pos:column="14">int</name></type> <name pos:line="189" pos:column="18">i</name> <init pos:line="189" pos:column="20">= <expr><lit:literal type="number" pos:line="189" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="189" pos:column="25">i</name> <op:operator pos:line="189" pos:column="27">&lt;</op:operator> <call><name><name pos:line="189" pos:column="29">morphedSensorValues</name><op:operator pos:line="189" pos:column="48">.</op:operator><name pos:line="189" pos:column="49">size</name></name><argument_list pos:line="189" pos:column="53">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="189" pos:column="57">i</name><op:operator pos:line="189" pos:column="58">++</op:operator></expr></incr>) <block pos:line="189" pos:column="62">{
            <expr_stmt><expr><name><name pos:line="190" pos:column="13">morphedArrY</name><index pos:line="190" pos:column="24">[<expr><name pos:line="190" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="190" pos:column="28">=</op:operator> <call><name><name pos:line="190" pos:column="30">morphedSensorValues</name><op:operator pos:line="190" pos:column="49">.</op:operator><name pos:line="190" pos:column="50">get</name></name><argument_list pos:line="190" pos:column="53">(<argument><expr><name pos:line="190" pos:column="54">i</name></expr></argument>)</argument_list></call><index pos:line="190" pos:column="56">[<expr><lit:literal type="number" pos:line="190" pos:column="57">1</lit:literal></expr>]</index></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name pos:line="193" pos:column="9">float</name><index pos:line="193" pos:column="14">[]</index></type> <name pos:line="193" pos:column="17">morphedArrZ</name> <init pos:line="193" pos:column="29">= <expr><op:operator pos:line="193" pos:column="31">new</op:operator> <name><name pos:line="193" pos:column="35">float</name><index pos:line="193" pos:column="40">[<expr><call><name><name pos:line="193" pos:column="41">morphedSensorValues</name><op:operator pos:line="193" pos:column="60">.</op:operator><name pos:line="193" pos:column="61">size</name></name><argument_list pos:line="193" pos:column="65">()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for pos:line="194" pos:column="9">for (<init><decl><type><name pos:line="194" pos:column="14">int</name></type> <name pos:line="194" pos:column="18">i</name> <init pos:line="194" pos:column="20">= <expr><lit:literal type="number" pos:line="194" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="194" pos:column="25">i</name> <op:operator pos:line="194" pos:column="27">&lt;</op:operator> <call><name><name pos:line="194" pos:column="29">morphedSensorValues</name><op:operator pos:line="194" pos:column="48">.</op:operator><name pos:line="194" pos:column="49">size</name></name><argument_list pos:line="194" pos:column="53">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="194" pos:column="57">i</name><op:operator pos:line="194" pos:column="58">++</op:operator></expr></incr>) <block pos:line="194" pos:column="62">{
            <expr_stmt><expr><name><name pos:line="195" pos:column="13">morphedArrZ</name><index pos:line="195" pos:column="24">[<expr><name pos:line="195" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="195" pos:column="28">=</op:operator> <call><name><name pos:line="195" pos:column="30">morphedSensorValues</name><op:operator pos:line="195" pos:column="49">.</op:operator><name pos:line="195" pos:column="50">get</name></name><argument_list pos:line="195" pos:column="53">(<argument><expr><name pos:line="195" pos:column="54">i</name></expr></argument>)</argument_list></call><index pos:line="195" pos:column="56">[<expr><lit:literal type="number" pos:line="195" pos:column="57">2</lit:literal></expr>]</index></expr>;</expr_stmt>
        }</block></for>

        <comment type="line" pos:line="198" pos:column="9">//----End of Graphing Code-----------------------------------------------------</comment>

        <decl_stmt><decl><type><name pos:line="200" pos:column="9">double</name></type> <name pos:line="200" pos:column="16">errorThreshold</name> <init pos:line="200" pos:column="31">= <expr><op:operator pos:line="200" pos:column="33">(</op:operator><name pos:line="200" pos:column="34">stepsInSenSeeExperiment</name> <op:operator pos:line="200" pos:column="58">*</op:operator> <lit:literal type="number" pos:line="200" pos:column="60">.2</lit:literal><op:operator pos:line="200" pos:column="62">)</op:operator></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="200" pos:column="65">//80% accuracy</comment>
        <expr_stmt><expr><call><name pos:line="201" pos:column="9">assertTrue</name><argument_list pos:line="201" pos:column="19">(<argument><expr><call><name><name pos:line="201" pos:column="20">Math</name><op:operator pos:line="201" pos:column="24">.</op:operator><name pos:line="201" pos:column="25">abs</name></name><argument_list pos:line="201" pos:column="28">(<argument><expr><name pos:line="201" pos:column="29">stepsCountedByStepDetector</name> <op:operator pos:line="201" pos:column="56">-</op:operator> <name pos:line="201" pos:column="58">stepsInSenSeeExperiment</name></expr></argument>)</argument_list></call> <op:operator pos:line="201" pos:column="83">&lt;=</op:operator> <name pos:line="201" pos:column="86">errorThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="202" pos:column="9">stepsCountedByStepDetector</name> <op:operator pos:line="202" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="202" pos:column="38">0</lit:literal></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
