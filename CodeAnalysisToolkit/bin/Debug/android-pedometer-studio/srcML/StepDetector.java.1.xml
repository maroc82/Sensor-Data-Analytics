<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\android-pedometer-studio\app\src\main\java\name\bagi\levente\pedometer\StepDetector.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 *  Pedometer - Android App
 *  Copyright (C) 2009 Levente Bagi
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package pos:line="19" pos:column="1">package <name><name pos:line="19" pos:column="9">name</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">bagi</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">levente</name><op:operator pos:line="19" pos:column="26">.</op:operator><name pos:line="19" pos:column="27">pedometer</name></name>;</package>

<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">java</name><op:operator pos:line="21" pos:column="12">.</op:operator><name pos:line="21" pos:column="13">util</name><op:operator pos:line="21" pos:column="17">.</op:operator><name pos:line="21" pos:column="18">ArrayList</name></name>;</import>

<import pos:line="23" pos:column="1">import <name><name pos:line="23" pos:column="8">android</name><op:operator pos:line="23" pos:column="15">.</op:operator><name pos:line="23" pos:column="16">hardware</name><op:operator pos:line="23" pos:column="24">.</op:operator><name pos:line="23" pos:column="25">Sensor</name></name>;</import>
<import pos:line="24" pos:column="1">import <name><name pos:line="24" pos:column="8">android</name><op:operator pos:line="24" pos:column="15">.</op:operator><name pos:line="24" pos:column="16">hardware</name><op:operator pos:line="24" pos:column="24">.</op:operator><name pos:line="24" pos:column="25">SensorEvent</name></name>;</import>
<import pos:line="25" pos:column="1">import <name><name pos:line="25" pos:column="8">android</name><op:operator pos:line="25" pos:column="15">.</op:operator><name pos:line="25" pos:column="16">hardware</name><op:operator pos:line="25" pos:column="24">.</op:operator><name pos:line="25" pos:column="25">SensorEventListener</name></name>;</import>
<import pos:line="26" pos:column="1">import <name><name pos:line="26" pos:column="8">android</name><op:operator pos:line="26" pos:column="15">.</op:operator><name pos:line="26" pos:column="16">hardware</name><op:operator pos:line="26" pos:column="24">.</op:operator><name pos:line="26" pos:column="25">SensorManager</name></name>;</import>
<import pos:line="27" pos:column="1">import <name><name pos:line="27" pos:column="8">android</name><op:operator pos:line="27" pos:column="15">.</op:operator><name pos:line="27" pos:column="16">util</name><op:operator pos:line="27" pos:column="20">.</op:operator><name pos:line="27" pos:column="21">Log</name></name>;</import>

<comment type="block" format="javadoc" pos:line="29" pos:column="1">/**
 * Detects steps and notifies all listeners (that implement StepListener).
 * @author Levente Bagi
 * @todo REFACTOR: SensorListener is deprecated
 */</comment>
<class><specifier pos:line="34" pos:column="1">public</specifier> class <name pos:line="34" pos:column="14">StepDetector</name> <super><implements pos:line="34" pos:column="27">implements <name pos:line="34" pos:column="38">SensorEventListener</name></implements></super>
<block pos:line="35" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="36" pos:column="5">private</specifier> <specifier pos:line="36" pos:column="13">final</specifier> <specifier pos:line="36" pos:column="19">static</specifier> <name pos:line="36" pos:column="26">String</name></type> <name pos:line="36" pos:column="33">TAG</name> <init pos:line="36" pos:column="37">= <expr><lit:literal type="string" pos:line="36" pos:column="39">"StepDetector"</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="37" pos:column="5">private</specifier> <name pos:line="37" pos:column="13">float</name></type>   <name pos:line="37" pos:column="21">mLimit</name> <init pos:line="37" pos:column="28">= <expr><lit:literal type="number" pos:line="37" pos:column="30">10</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="38" pos:column="5">private</specifier> <name pos:line="38" pos:column="13">float</name></type>   <name><name pos:line="38" pos:column="21">mLastValues</name><index pos:line="38" pos:column="32">[]</index></name> <init pos:line="38" pos:column="35">= <expr><op:operator pos:line="38" pos:column="37">new</op:operator> <name><name pos:line="38" pos:column="41">float</name><index pos:line="38" pos:column="46">[<expr><lit:literal type="number" pos:line="38" pos:column="47">3</lit:literal><op:operator pos:line="38" pos:column="48">*</op:operator><lit:literal type="number" pos:line="38" pos:column="49">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="39" pos:column="5">private</specifier> <name pos:line="39" pos:column="13">float</name></type>   <name><name pos:line="39" pos:column="21">mScale</name><index pos:line="39" pos:column="27">[]</index></name> <init pos:line="39" pos:column="30">= <expr><op:operator pos:line="39" pos:column="32">new</op:operator> <name><name pos:line="39" pos:column="36">float</name><index pos:line="39" pos:column="41">[<expr><lit:literal type="number" pos:line="39" pos:column="42">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="40" pos:column="5">private</specifier> <name pos:line="40" pos:column="13">float</name></type>   <name pos:line="40" pos:column="21">mYOffset</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="42" pos:column="5">private</specifier> <name pos:line="42" pos:column="13">float</name></type>   <name><name pos:line="42" pos:column="21">mLastDirections</name><index pos:line="42" pos:column="36">[]</index></name> <init pos:line="42" pos:column="39">= <expr><op:operator pos:line="42" pos:column="41">new</op:operator> <name><name pos:line="42" pos:column="45">float</name><index pos:line="42" pos:column="50">[<expr><lit:literal type="number" pos:line="42" pos:column="51">3</lit:literal><op:operator pos:line="42" pos:column="52">*</op:operator><lit:literal type="number" pos:line="42" pos:column="53">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="43" pos:column="5">private</specifier> <name pos:line="43" pos:column="13">float</name></type>   <name><name pos:line="43" pos:column="21">mLastExtremes</name><index pos:line="43" pos:column="34">[]</index><index pos:line="43" pos:column="36">[]</index></name> <init pos:line="43" pos:column="39">= <expr><block pos:line="43" pos:column="41">{ <expr><op:operator pos:line="43" pos:column="43">new</op:operator> <name><name pos:line="43" pos:column="47">float</name><index pos:line="43" pos:column="52">[<expr><lit:literal type="number" pos:line="43" pos:column="53">3</lit:literal><op:operator pos:line="43" pos:column="54">*</op:operator><lit:literal type="number" pos:line="43" pos:column="55">2</lit:literal></expr>]</index></name></expr>, <expr><op:operator pos:line="43" pos:column="59">new</op:operator> <name><name pos:line="43" pos:column="63">float</name><index pos:line="43" pos:column="68">[<expr><lit:literal type="number" pos:line="43" pos:column="69">3</lit:literal><op:operator pos:line="43" pos:column="70">*</op:operator><lit:literal type="number" pos:line="43" pos:column="71">2</lit:literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="44" pos:column="5">private</specifier> <name pos:line="44" pos:column="13">float</name></type>   <name><name pos:line="44" pos:column="21">mLastDiff</name><index pos:line="44" pos:column="30">[]</index></name> <init pos:line="44" pos:column="33">= <expr><op:operator pos:line="44" pos:column="35">new</op:operator> <name><name pos:line="44" pos:column="39">float</name><index pos:line="44" pos:column="44">[<expr><lit:literal type="number" pos:line="44" pos:column="45">3</lit:literal><op:operator pos:line="44" pos:column="46">*</op:operator><lit:literal type="number" pos:line="44" pos:column="47">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="45" pos:column="5">private</specifier> <name pos:line="45" pos:column="13">int</name></type>     <name pos:line="45" pos:column="21">mLastMatch</name> <init pos:line="45" pos:column="32">= <expr><op:operator pos:line="45" pos:column="34">-</op:operator><lit:literal type="number" pos:line="45" pos:column="35">1</lit:literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier pos:line="47" pos:column="5">private</specifier> <name><name pos:line="47" pos:column="13">ArrayList</name><argument_list pos:line="47" pos:column="22">&lt;<argument><name pos:line="47" pos:column="23">StepListener</name></argument>&gt;</argument_list></name></type> <name pos:line="47" pos:column="37">mStepListeners</name> <init pos:line="47" pos:column="52">= <expr><op:operator pos:line="47" pos:column="54">new</op:operator> <call><name><name pos:line="47" pos:column="58">ArrayList</name><argument_list pos:line="47" pos:column="67">&lt;<argument><name pos:line="47" pos:column="68">StepListener</name></argument>&gt;</argument_list></name><argument_list pos:line="47" pos:column="81">()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <constructor><specifier pos:line="49" pos:column="5">public</specifier> <name pos:line="49" pos:column="12">StepDetector</name><parameter_list pos:line="49" pos:column="24">()</parameter_list> <block pos:line="49" pos:column="27">{
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">int</name></type> <name pos:line="50" pos:column="13">h</name> <init pos:line="50" pos:column="15">= <expr><lit:literal type="number" pos:line="50" pos:column="17">480</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="50" pos:column="22">// TODO: remove this constant //--------------------------------------------</comment>
        <expr_stmt><expr><name pos:line="51" pos:column="9">mYOffset</name> <op:operator pos:line="51" pos:column="18">=</op:operator> <name pos:line="51" pos:column="20">h</name> <op:operator pos:line="51" pos:column="22">*</op:operator> <lit:literal type="number" pos:line="51" pos:column="24">0.5f</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="52" pos:column="9">mScale</name><index pos:line="52" pos:column="15">[<expr><lit:literal type="number" pos:line="52" pos:column="16">0</lit:literal></expr>]</index></name> <op:operator pos:line="52" pos:column="19">=</op:operator> <op:operator pos:line="52" pos:column="21">-</op:operator> <op:operator pos:line="52" pos:column="23">(</op:operator><name pos:line="52" pos:column="24">h</name> <op:operator pos:line="52" pos:column="26">*</op:operator> <lit:literal type="number" pos:line="52" pos:column="28">0.5f</lit:literal> <op:operator pos:line="52" pos:column="33">*</op:operator> <op:operator pos:line="52" pos:column="35">(</op:operator><lit:literal type="number" pos:line="52" pos:column="36">1.0f</lit:literal> <op:operator pos:line="52" pos:column="41">/</op:operator> <op:operator pos:line="52" pos:column="43">(</op:operator><name><name pos:line="52" pos:column="44">SensorManager</name><op:operator pos:line="52" pos:column="57">.</op:operator><name pos:line="52" pos:column="58">STANDARD_GRAVITY</name></name> <op:operator pos:line="52" pos:column="75">*</op:operator> <lit:literal type="number" pos:line="52" pos:column="77">2</lit:literal><op:operator pos:line="52" pos:column="78">)</op:operator><op:operator pos:line="52" pos:column="79">)</op:operator><op:operator pos:line="52" pos:column="80">)</op:operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="53" pos:column="9">mScale</name><index pos:line="53" pos:column="15">[<expr><lit:literal type="number" pos:line="53" pos:column="16">1</lit:literal></expr>]</index></name> <op:operator pos:line="53" pos:column="19">=</op:operator> <op:operator pos:line="53" pos:column="21">-</op:operator> <op:operator pos:line="53" pos:column="23">(</op:operator><name pos:line="53" pos:column="24">h</name> <op:operator pos:line="53" pos:column="26">*</op:operator> <lit:literal type="number" pos:line="53" pos:column="28">0.5f</lit:literal> <op:operator pos:line="53" pos:column="33">*</op:operator> <op:operator pos:line="53" pos:column="35">(</op:operator><lit:literal type="number" pos:line="53" pos:column="36">1.0f</lit:literal> <op:operator pos:line="53" pos:column="41">/</op:operator> <op:operator pos:line="53" pos:column="43">(</op:operator><name><name pos:line="53" pos:column="44">SensorManager</name><op:operator pos:line="53" pos:column="57">.</op:operator><name pos:line="53" pos:column="58">MAGNETIC_FIELD_EARTH_MAX</name></name><op:operator pos:line="53" pos:column="82">)</op:operator><op:operator pos:line="53" pos:column="83">)</op:operator><op:operator pos:line="53" pos:column="84">)</op:operator></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><specifier pos:line="56" pos:column="5">public</specifier> <name pos:line="56" pos:column="12">void</name></type> <name pos:line="56" pos:column="17">setSensitivity</name><parameter_list pos:line="56" pos:column="31">(<param><decl><type><name pos:line="56" pos:column="32">float</name></type> <name pos:line="56" pos:column="38">sensitivity</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="51">{
        <expr_stmt><expr><name pos:line="57" pos:column="9">mLimit</name> <op:operator pos:line="57" pos:column="16">=</op:operator> <name pos:line="57" pos:column="18">sensitivity</name></expr>;</expr_stmt> <comment type="line" pos:line="57" pos:column="31">// 1.97  2.96  4.44  6.66  10.00  15.00  22.50  33.75  50.62</comment>
    }</block></function>
    
    <function><type><specifier pos:line="60" pos:column="5">public</specifier> <name pos:line="60" pos:column="12">void</name></type> <name pos:line="60" pos:column="17">addStepListener</name><parameter_list pos:line="60" pos:column="32">(<param><decl><type><name pos:line="60" pos:column="33">StepListener</name></type> <name pos:line="60" pos:column="46">sl</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="50">{
        <expr_stmt><expr><call><name><name pos:line="61" pos:column="9">mStepListeners</name><op:operator pos:line="61" pos:column="23">.</op:operator><name pos:line="61" pos:column="24">add</name></name><argument_list pos:line="61" pos:column="27">(<argument><expr><name pos:line="61" pos:column="28">sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="64" pos:column="5">public</specifier> <name pos:line="64" pos:column="12">void</name></type> <name pos:line="64" pos:column="17">clearStepListeners</name><parameter_list pos:line="64" pos:column="35">()</parameter_list> <block pos:line="64" pos:column="38">{
        <expr_stmt><expr><call><name><name pos:line="65" pos:column="9">mStepListeners</name><op:operator pos:line="65" pos:column="23">.</op:operator><name pos:line="65" pos:column="24">clear</name></name><argument_list pos:line="65" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line" pos:line="68" pos:column="5">//---------------------------------------------------</comment>
    <function><type><specifier pos:line="69" pos:column="5">public</specifier> <name pos:line="69" pos:column="12">void</name></type> <name pos:line="69" pos:column="17">onSensorChanged</name><parameter_list pos:line="69" pos:column="32">(<param><decl><type><name pos:line="69" pos:column="33">int</name></type> <name pos:line="69" pos:column="37">sensor</name></decl></param>, <param><decl><type><name><name pos:line="69" pos:column="45">float</name><index pos:line="69" pos:column="50">[]</index></name></type> <name pos:line="69" pos:column="53">values</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="61">{
        <synchronized pos:line="70" pos:column="9">synchronized (<expr><name pos:line="70" pos:column="23">this</name></expr>) <block pos:line="70" pos:column="29">{
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><name pos:line="71" pos:column="17">sensor</name> <op:operator pos:line="71" pos:column="24">==</op:operator> <name><name pos:line="71" pos:column="27">Sensor</name><op:operator pos:line="71" pos:column="33">.</op:operator><name pos:line="71" pos:column="34">TYPE_ORIENTATION</name></name></expr>)</condition><then pos:line="71" pos:column="51"> <block pos:line="71" pos:column="52">{
            }</block></then>
            <else pos:line="73" pos:column="13">else <block pos:line="73" pos:column="18">{
                <decl_stmt><decl><type><name pos:line="74" pos:column="17">int</name></type> <name pos:line="74" pos:column="21">j</name> <init pos:line="74" pos:column="23">= <expr><op:operator pos:line="74" pos:column="25">(</op:operator><name pos:line="74" pos:column="26">sensor</name> <op:operator pos:line="74" pos:column="33">==</op:operator> <name><name pos:line="74" pos:column="36">Sensor</name><op:operator pos:line="74" pos:column="42">.</op:operator><name pos:line="74" pos:column="43">TYPE_ACCELEROMETER</name></name><op:operator pos:line="74" pos:column="61">)</op:operator> <op:operator pos:line="74" pos:column="63">?</op:operator> <lit:literal type="number" pos:line="74" pos:column="65">1</lit:literal> <op:operator pos:line="74" pos:column="67">:</op:operator> <lit:literal type="number" pos:line="74" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">j</name> <op:operator pos:line="75" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="75" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="75" pos:column="28"> <block pos:line="75" pos:column="29">{
                    <decl_stmt><decl><type><name pos:line="76" pos:column="21">float</name></type> <name pos:line="76" pos:column="27">vSum</name> <init pos:line="76" pos:column="32">= <expr><lit:literal type="number" pos:line="76" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <for pos:line="77" pos:column="21">for (<init><decl><type><name pos:line="77" pos:column="26">int</name></type> <name pos:line="77" pos:column="30">i</name><init pos:line="77" pos:column="31">=<expr><lit:literal type="number" pos:line="77" pos:column="32">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="77" pos:column="36">i</name><op:operator pos:line="77" pos:column="37">&lt;</op:operator><lit:literal type="number" pos:line="77" pos:column="38">3</lit:literal></expr> ;</condition> <incr><expr><name pos:line="77" pos:column="42">i</name><op:operator pos:line="77" pos:column="43">++</op:operator></expr></incr>) <block pos:line="77" pos:column="47">{
                        <decl_stmt><decl><type><specifier pos:line="78" pos:column="25">final</specifier> <name pos:line="78" pos:column="31">float</name></type> <name pos:line="78" pos:column="37">v</name> <init pos:line="78" pos:column="39">= <expr><name pos:line="78" pos:column="41">mYOffset</name> <op:operator pos:line="78" pos:column="50">+</op:operator> <name><name pos:line="78" pos:column="52">values</name><index pos:line="78" pos:column="58">[<expr><name pos:line="78" pos:column="59">i</name></expr>]</index></name> <op:operator pos:line="78" pos:column="62">*</op:operator> <name><name pos:line="78" pos:column="64">mScale</name><index pos:line="78" pos:column="70">[<expr><name pos:line="78" pos:column="71">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name pos:line="79" pos:column="25">vSum</name> <op:operator pos:line="79" pos:column="30">+=</op:operator> <name pos:line="79" pos:column="33">v</name></expr>;</expr_stmt>
                    }</block></for>
                    <decl_stmt><decl><type><name pos:line="81" pos:column="21">int</name></type> <name pos:line="81" pos:column="25">k</name> <init pos:line="81" pos:column="27">= <expr><lit:literal type="number" pos:line="81" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name pos:line="82" pos:column="21">float</name></type> <name pos:line="82" pos:column="27">v</name> <init pos:line="82" pos:column="29">= <expr><name pos:line="82" pos:column="31">vSum</name> <op:operator pos:line="82" pos:column="36">/</op:operator> <lit:literal type="number" pos:line="82" pos:column="38">3</lit:literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name pos:line="84" pos:column="21">float</name></type> <name pos:line="84" pos:column="27">direction</name> <init pos:line="84" pos:column="37">= <expr><op:operator pos:line="84" pos:column="39">(</op:operator><name pos:line="84" pos:column="40">v</name> <op:operator pos:line="84" pos:column="42">&gt;</op:operator> <name><name pos:line="84" pos:column="44">mLastValues</name><index pos:line="84" pos:column="55">[<expr><name pos:line="84" pos:column="56">k</name></expr>]</index></name> <op:operator pos:line="84" pos:column="59">?</op:operator> <lit:literal type="number" pos:line="84" pos:column="61">1</lit:literal> <op:operator pos:line="84" pos:column="63">:</op:operator> <op:operator pos:line="84" pos:column="65">(</op:operator><name pos:line="84" pos:column="66">v</name> <op:operator pos:line="84" pos:column="68">&lt;</op:operator> <name><name pos:line="84" pos:column="70">mLastValues</name><index pos:line="84" pos:column="81">[<expr><name pos:line="84" pos:column="82">k</name></expr>]</index></name> <op:operator pos:line="84" pos:column="85">?</op:operator> <op:operator pos:line="84" pos:column="87">-</op:operator><lit:literal type="number" pos:line="84" pos:column="88">1</lit:literal> <op:operator pos:line="84" pos:column="90">:</op:operator> <lit:literal type="number" pos:line="84" pos:column="92">0</lit:literal><op:operator pos:line="84" pos:column="93">)</op:operator><op:operator pos:line="84" pos:column="94">)</op:operator></expr></init></decl>;</decl_stmt>
                    <if pos:line="85" pos:column="21">if <condition pos:line="85" pos:column="24">(<expr><name pos:line="85" pos:column="25">direction</name> <op:operator pos:line="85" pos:column="35">==</op:operator> <op:operator pos:line="85" pos:column="38">-</op:operator> <name><name pos:line="85" pos:column="40">mLastDirections</name><index pos:line="85" pos:column="55">[<expr><name pos:line="85" pos:column="56">k</name></expr>]</index></name></expr>)</condition><then pos:line="85" pos:column="59"> <block pos:line="85" pos:column="60">{
                        <comment type="line" pos:line="86" pos:column="25">// Direction changed</comment>
                        <decl_stmt><decl><type><name pos:line="87" pos:column="25">int</name></type> <name pos:line="87" pos:column="29">extType</name> <init pos:line="87" pos:column="37">= <expr><op:operator pos:line="87" pos:column="39">(</op:operator><name pos:line="87" pos:column="40">direction</name> <op:operator pos:line="87" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="87" pos:column="52">0</lit:literal> <op:operator pos:line="87" pos:column="54">?</op:operator> <lit:literal type="number" pos:line="87" pos:column="56">0</lit:literal> <op:operator pos:line="87" pos:column="58">:</op:operator> <lit:literal type="number" pos:line="87" pos:column="60">1</lit:literal><op:operator pos:line="87" pos:column="61">)</op:operator></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="87" pos:column="64">// minumum or maximum?</comment>
                        <expr_stmt><expr><name><name pos:line="88" pos:column="25">mLastExtremes</name><index pos:line="88" pos:column="38">[<expr><name pos:line="88" pos:column="39">extType</name></expr>]</index><index pos:line="88" pos:column="47">[<expr><name pos:line="88" pos:column="48">k</name></expr>]</index></name> <op:operator pos:line="88" pos:column="51">=</op:operator> <name><name pos:line="88" pos:column="53">mLastValues</name><index pos:line="88" pos:column="64">[<expr><name pos:line="88" pos:column="65">k</name></expr>]</index></name></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name pos:line="89" pos:column="25">float</name></type> <name pos:line="89" pos:column="31">diff</name> <init pos:line="89" pos:column="36">= <expr><call><name><name pos:line="89" pos:column="38">Math</name><op:operator pos:line="89" pos:column="42">.</op:operator><name pos:line="89" pos:column="43">abs</name></name><argument_list pos:line="89" pos:column="46">(<argument><expr><name><name pos:line="89" pos:column="47">mLastExtremes</name><index pos:line="89" pos:column="60">[<expr><name pos:line="89" pos:column="61">extType</name></expr>]</index><index pos:line="89" pos:column="69">[<expr><name pos:line="89" pos:column="70">k</name></expr>]</index></name> <op:operator pos:line="89" pos:column="73">-</op:operator> <name><name pos:line="89" pos:column="75">mLastExtremes</name><index pos:line="89" pos:column="88">[<expr><lit:literal type="number" pos:line="89" pos:column="89">1</lit:literal> <op:operator pos:line="89" pos:column="91">-</op:operator> <name pos:line="89" pos:column="93">extType</name></expr>]</index><index pos:line="89" pos:column="101">[<expr><name pos:line="89" pos:column="102">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><name pos:line="91" pos:column="29">diff</name> <op:operator pos:line="91" pos:column="34">&gt;</op:operator> <name pos:line="91" pos:column="36">mLimit</name></expr>)</condition><then pos:line="91" pos:column="43"> <block pos:line="91" pos:column="44">{

                            <decl_stmt><decl><type><name pos:line="93" pos:column="29">boolean</name></type> <name pos:line="93" pos:column="37">isAlmostAsLargeAsPrevious</name> <init pos:line="93" pos:column="63">= <expr><name pos:line="93" pos:column="65">diff</name> <op:operator pos:line="93" pos:column="70">&gt;</op:operator> <op:operator pos:line="93" pos:column="72">(</op:operator><name><name pos:line="93" pos:column="73">mLastDiff</name><index pos:line="93" pos:column="82">[<expr><name pos:line="93" pos:column="83">k</name></expr>]</index></name><op:operator pos:line="93" pos:column="85">*</op:operator><lit:literal type="number" pos:line="93" pos:column="86">2</lit:literal><op:operator pos:line="93" pos:column="87">/</op:operator><lit:literal type="number" pos:line="93" pos:column="88">3</lit:literal><op:operator pos:line="93" pos:column="89">)</op:operator></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="94" pos:column="29">boolean</name></type> <name pos:line="94" pos:column="37">isPreviousLargeEnough</name> <init pos:line="94" pos:column="59">= <expr><name><name pos:line="94" pos:column="61">mLastDiff</name><index pos:line="94" pos:column="70">[<expr><name pos:line="94" pos:column="71">k</name></expr>]</index></name> <op:operator pos:line="94" pos:column="74">&gt;</op:operator> <op:operator pos:line="94" pos:column="76">(</op:operator><name pos:line="94" pos:column="77">diff</name><op:operator pos:line="94" pos:column="81">/</op:operator><lit:literal type="number" pos:line="94" pos:column="82">3</lit:literal><op:operator pos:line="94" pos:column="83">)</op:operator></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name pos:line="95" pos:column="29">boolean</name></type> <name pos:line="95" pos:column="37">isNotContra</name> <init pos:line="95" pos:column="49">= <expr><op:operator pos:line="95" pos:column="51">(</op:operator><name pos:line="95" pos:column="52">mLastMatch</name> <op:operator pos:line="95" pos:column="63">!=</op:operator> <lit:literal type="number" pos:line="95" pos:column="66">1</lit:literal> <op:operator pos:line="95" pos:column="68">-</op:operator> <name pos:line="95" pos:column="70">extType</name><op:operator pos:line="95" pos:column="77">)</op:operator></expr></init></decl>;</decl_stmt>

                            <if pos:line="97" pos:column="29">if <condition pos:line="97" pos:column="32">(<expr><name pos:line="97" pos:column="33">isAlmostAsLargeAsPrevious</name> <op:operator pos:line="97" pos:column="59">&amp;&amp;</op:operator> <name pos:line="97" pos:column="62">isPreviousLargeEnough</name> <op:operator pos:line="97" pos:column="84">&amp;&amp;</op:operator> <name pos:line="97" pos:column="87">isNotContra</name></expr>)</condition><then pos:line="97" pos:column="99"> <block pos:line="97" pos:column="100">{
                                <expr_stmt><expr><call><name><name pos:line="98" pos:column="33">Log</name><op:operator pos:line="98" pos:column="36">.</op:operator><name pos:line="98" pos:column="37">i</name></name><argument_list pos:line="98" pos:column="38">(<argument><expr><name pos:line="98" pos:column="39">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="98" pos:column="44">"step"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <for pos:line="99" pos:column="33">for (<init><decl><type><name pos:line="99" pos:column="38">StepListener</name></type> <name pos:line="99" pos:column="51">stepListener</name> <range pos:line="99" pos:column="64">: <expr><name pos:line="99" pos:column="66">mStepListeners</name></expr></range></decl></init>) <block pos:line="99" pos:column="82">{
                                    <expr_stmt><expr><call><name><name pos:line="100" pos:column="37">stepListener</name><op:operator pos:line="100" pos:column="49">.</op:operator><name pos:line="100" pos:column="50">onStep</name></name><argument_list pos:line="100" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
                                }</block></for>
                                <expr_stmt><expr><name pos:line="102" pos:column="33">mLastMatch</name> <op:operator pos:line="102" pos:column="44">=</op:operator> <name pos:line="102" pos:column="46">extType</name></expr>;</expr_stmt>
                            }</block></then>
                            <else pos:line="104" pos:column="29">else <block pos:line="104" pos:column="34">{
                                <expr_stmt><expr><name pos:line="105" pos:column="33">mLastMatch</name> <op:operator pos:line="105" pos:column="44">=</op:operator> <op:operator pos:line="105" pos:column="46">-</op:operator><lit:literal type="number" pos:line="105" pos:column="47">1</lit:literal></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then></if>
                        <expr_stmt><expr><name><name pos:line="108" pos:column="25">mLastDiff</name><index pos:line="108" pos:column="34">[<expr><name pos:line="108" pos:column="35">k</name></expr>]</index></name> <op:operator pos:line="108" pos:column="38">=</op:operator> <name pos:line="108" pos:column="40">diff</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name><name pos:line="110" pos:column="21">mLastDirections</name><index pos:line="110" pos:column="36">[<expr><name pos:line="110" pos:column="37">k</name></expr>]</index></name> <op:operator pos:line="110" pos:column="40">=</op:operator> <name pos:line="110" pos:column="42">direction</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name pos:line="111" pos:column="21">mLastValues</name><index pos:line="111" pos:column="32">[<expr><name pos:line="111" pos:column="33">k</name></expr>]</index></name> <op:operator pos:line="111" pos:column="36">=</op:operator> <name pos:line="111" pos:column="38">v</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></synchronized>
    }</block></function>


    <function><type><specifier pos:line="118" pos:column="5">public</specifier> <name pos:line="118" pos:column="12">void</name></type> <name pos:line="118" pos:column="17">onSensorChanged</name><parameter_list pos:line="118" pos:column="32">(<param><decl><type><name pos:line="118" pos:column="33">SensorEvent</name></type> <name pos:line="118" pos:column="45">event</name></decl></param>)</parameter_list> <block pos:line="118" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="119" pos:column="9">onSensorChanged</name><argument_list pos:line="119" pos:column="24">(<argument><expr><call><name><name pos:line="119" pos:column="25">event</name><op:operator pos:line="119" pos:column="30">.</op:operator><name pos:line="119" pos:column="31">sensor</name><op:operator pos:line="119" pos:column="37">.</op:operator><name pos:line="119" pos:column="38">getType</name></name><argument_list pos:line="119" pos:column="45">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="49">event</name><op:operator pos:line="119" pos:column="54">.</op:operator><name pos:line="119" pos:column="55">values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier pos:line="122" pos:column="5">public</specifier> <name pos:line="122" pos:column="12">void</name></type> <name pos:line="122" pos:column="17">onAccuracyChanged</name><parameter_list pos:line="122" pos:column="34">(<param><decl><type><name pos:line="122" pos:column="35">Sensor</name></type> <name pos:line="122" pos:column="42">sensor</name></decl></param>, <param><decl><type><name pos:line="122" pos:column="50">int</name></type> <name pos:line="122" pos:column="54">accuracy</name></decl></param>)</parameter_list> <block pos:line="122" pos:column="64">{
        <comment type="line" pos:line="123" pos:column="9">// TODO Auto-generated method stub</comment>
    }</block></function>

}</block></class></unit>
