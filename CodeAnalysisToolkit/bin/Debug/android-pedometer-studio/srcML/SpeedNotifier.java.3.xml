<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\android-pedometer-studio\app\src\main\java\name\bagi\levente\pedometer\SpeedNotifier.java" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
 *  Pedometer - Android App
 *  Copyright (C) 2009 Levente Bagi
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package pos:line="19" pos:column="1">package <name><name pos:line="19" pos:column="9">name</name><op:operator pos:line="19" pos:column="13">.</op:operator><name pos:line="19" pos:column="14">bagi</name><op:operator pos:line="19" pos:column="18">.</op:operator><name pos:line="19" pos:column="19">levente</name><op:operator pos:line="19" pos:column="26">.</op:operator><name pos:line="19" pos:column="27">pedometer</name></name>;</package>


<comment type="block" format="javadoc" pos:line="22" pos:column="1">/**
 * Calculates and displays pace (steps / minute), handles input of desired pace,
 * notifies user if he/she has to go faster or slower.
 * 
 * Uses {@link PaceNotifier}, calculates speed as product of pace and step length.
 * 
 * @author Levente Bagi
 */</comment>
<class><specifier pos:line="30" pos:column="1">public</specifier> class <name pos:line="30" pos:column="14">SpeedNotifier</name> <super><implements pos:line="30" pos:column="28">implements <name><name pos:line="30" pos:column="39">PaceNotifier</name><op:operator pos:line="30" pos:column="51">.</op:operator><name pos:line="30" pos:column="52">Listener</name></name>, <name><name pos:line="30" pos:column="62">SpeakingTimer</name><op:operator pos:line="30" pos:column="75">.</op:operator><name pos:line="30" pos:column="76">Listener</name></name></implements></super> <block pos:line="30" pos:column="85">{

    <class type="interface"><specifier pos:line="32" pos:column="5">public</specifier> interface <name pos:line="32" pos:column="22">Listener</name> <block pos:line="32" pos:column="31">{
        <function_decl><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">valueChanged</name><parameter_list pos:line="33" pos:column="33">(<param><decl><type><name pos:line="33" pos:column="34">float</name></type> <name pos:line="33" pos:column="40">value</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><specifier pos:line="34" pos:column="9">public</specifier> <name pos:line="34" pos:column="16">void</name></type> <name pos:line="34" pos:column="21">passValue</name><parameter_list pos:line="34" pos:column="30">()</parameter_list>;</function_decl>
    }</block></class>
    <decl_stmt><decl><type><specifier pos:line="36" pos:column="5">private</specifier> <name pos:line="36" pos:column="13">Listener</name></type> <name pos:line="36" pos:column="22">mListener</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">int</name></type> <name pos:line="38" pos:column="9">mCounter</name> <init pos:line="38" pos:column="18">= <expr><lit:literal type="number" pos:line="38" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="39" pos:column="5">float</name></type> <name pos:line="39" pos:column="11">mSpeed</name> <init pos:line="39" pos:column="18">= <expr><lit:literal type="number" pos:line="39" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">boolean</name></type> <name pos:line="41" pos:column="13">mIsMetric</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="42" pos:column="5">float</name></type> <name pos:line="42" pos:column="11">mStepLength</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="44" pos:column="5">PedometerSettings</name></type> <name pos:line="44" pos:column="23">mSettings</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="45" pos:column="5">Utils</name></type> <name pos:line="45" pos:column="11">mUtils</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc" pos:line="47" pos:column="5">/** Desired speed, adjusted by the user */</comment>
    <decl_stmt><decl><type><name pos:line="48" pos:column="5">float</name></type> <name pos:line="48" pos:column="11">mDesiredSpeed</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc" pos:line="50" pos:column="5">/** Should we speak? */</comment>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">boolean</name></type> <name pos:line="51" pos:column="13">mShouldTellFasterslower</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="52" pos:column="5">boolean</name></type> <name pos:line="52" pos:column="13">mShouldTellSpeed</name></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc" pos:line="54" pos:column="5">/** When did the TTS speak last time */</comment>
    <decl_stmt><decl><type><specifier pos:line="55" pos:column="5">private</specifier> <name pos:line="55" pos:column="13">long</name></type> <name pos:line="55" pos:column="18">mSpokenAt</name> <init pos:line="55" pos:column="28">= <expr><lit:literal type="number" pos:line="55" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
    
    <constructor><specifier pos:line="57" pos:column="5">public</specifier> <name pos:line="57" pos:column="12">SpeedNotifier</name><parameter_list pos:line="57" pos:column="25">(<param><decl><type><name pos:line="57" pos:column="26">Listener</name></type> <name pos:line="57" pos:column="35">listener</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="45">PedometerSettings</name></type> <name pos:line="57" pos:column="63">settings</name></decl></param>, <param><decl><type><name pos:line="57" pos:column="73">Utils</name></type> <name pos:line="57" pos:column="79">utils</name></decl></param>)</parameter_list> <block pos:line="57" pos:column="86">{
        <expr_stmt><expr><name pos:line="58" pos:column="9">mListener</name> <op:operator pos:line="58" pos:column="19">=</op:operator> <name pos:line="58" pos:column="21">listener</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="59" pos:column="9">mUtils</name> <op:operator pos:line="59" pos:column="16">=</op:operator> <name pos:line="59" pos:column="18">utils</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="60" pos:column="9">mSettings</name> <op:operator pos:line="60" pos:column="19">=</op:operator> <name pos:line="60" pos:column="21">settings</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="61" pos:column="9">mDesiredSpeed</name> <op:operator pos:line="61" pos:column="23">=</op:operator> <call><name><name pos:line="61" pos:column="25">mSettings</name><op:operator pos:line="61" pos:column="34">.</op:operator><name pos:line="61" pos:column="35">getDesiredSpeed</name></name><argument_list pos:line="61" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">reloadSettings</name><argument_list pos:line="62" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <function><type><specifier pos:line="64" pos:column="5">public</specifier> <name pos:line="64" pos:column="12">void</name></type> <name pos:line="64" pos:column="17">setSpeed</name><parameter_list pos:line="64" pos:column="25">(<param><decl><type><name pos:line="64" pos:column="26">float</name></type> <name pos:line="64" pos:column="32">speed</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="39">{
        <expr_stmt><expr><name pos:line="65" pos:column="9">mSpeed</name> <op:operator pos:line="65" pos:column="16">=</op:operator> <name pos:line="65" pos:column="18">speed</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">notifyListener</name><argument_list pos:line="66" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="68" pos:column="5">public</specifier> <name pos:line="68" pos:column="12">void</name></type> <name pos:line="68" pos:column="17">reloadSettings</name><parameter_list pos:line="68" pos:column="31">()</parameter_list> <block pos:line="68" pos:column="34">{
        <expr_stmt><expr><name pos:line="69" pos:column="9">mIsMetric</name> <op:operator pos:line="69" pos:column="19">=</op:operator> <call><name><name pos:line="69" pos:column="21">mSettings</name><op:operator pos:line="69" pos:column="30">.</op:operator><name pos:line="69" pos:column="31">isMetric</name></name><argument_list pos:line="69" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="70" pos:column="9">mStepLength</name> <op:operator pos:line="70" pos:column="21">=</op:operator> <call><name><name pos:line="70" pos:column="23">mSettings</name><op:operator pos:line="70" pos:column="32">.</op:operator><name pos:line="70" pos:column="33">getStepLength</name></name><argument_list pos:line="70" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="71" pos:column="9">mShouldTellSpeed</name> <op:operator pos:line="71" pos:column="26">=</op:operator> <call><name><name pos:line="71" pos:column="28">mSettings</name><op:operator pos:line="71" pos:column="37">.</op:operator><name pos:line="71" pos:column="38">shouldTellSpeed</name></name><argument_list pos:line="71" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="72" pos:column="9">mShouldTellFasterslower</name> <op:operator pos:line="72" pos:column="33">=</op:operator> 
            <call><name><name pos:line="73" pos:column="13">mSettings</name><op:operator pos:line="73" pos:column="22">.</op:operator><name pos:line="73" pos:column="23">shouldTellFasterslower</name></name><argument_list pos:line="73" pos:column="45">()</argument_list></call>
            <op:operator pos:line="74" pos:column="13">&amp;&amp;</op:operator> <call><name><name pos:line="74" pos:column="16">mSettings</name><op:operator pos:line="74" pos:column="25">.</op:operator><name pos:line="74" pos:column="26">getMaintainOption</name></name><argument_list pos:line="74" pos:column="43">()</argument_list></call> <op:operator pos:line="74" pos:column="46">==</op:operator> <name><name pos:line="74" pos:column="49">PedometerSettings</name><op:operator pos:line="74" pos:column="66">.</op:operator><name pos:line="74" pos:column="67">M_SPEED</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">notifyListener</name><argument_list pos:line="75" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="77" pos:column="5">public</specifier> <name pos:line="77" pos:column="12">void</name></type> <name pos:line="77" pos:column="17">setDesiredSpeed</name><parameter_list pos:line="77" pos:column="32">(<param><decl><type><name pos:line="77" pos:column="33">float</name></type> <name pos:line="77" pos:column="39">desiredSpeed</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="53">{
        <expr_stmt><expr><name pos:line="78" pos:column="9">mDesiredSpeed</name> <op:operator pos:line="78" pos:column="23">=</op:operator> <name pos:line="78" pos:column="25">desiredSpeed</name></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier pos:line="81" pos:column="5">private</specifier> <name pos:line="81" pos:column="13">void</name></type> <name pos:line="81" pos:column="18">notifyListener</name><parameter_list pos:line="81" pos:column="32">()</parameter_list> <block pos:line="81" pos:column="35">{
        <expr_stmt><expr><call><name><name pos:line="82" pos:column="9">mListener</name><op:operator pos:line="82" pos:column="18">.</op:operator><name pos:line="82" pos:column="19">valueChanged</name></name><argument_list pos:line="82" pos:column="31">(<argument><expr><name pos:line="82" pos:column="32">mSpeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><type><specifier pos:line="85" pos:column="5">public</specifier> <name pos:line="85" pos:column="12">void</name></type> <name pos:line="85" pos:column="17">paceChanged</name><parameter_list pos:line="85" pos:column="28">(<param><decl><type><name pos:line="85" pos:column="29">int</name></type> <name pos:line="85" pos:column="33">value</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="40">{
        <if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><name pos:line="86" pos:column="13">mIsMetric</name></expr>)</condition><then pos:line="86" pos:column="23"> <block pos:line="86" pos:column="24">{
            <expr_stmt><expr><name pos:line="87" pos:column="13">mSpeed</name> <op:operator pos:line="87" pos:column="20">=</op:operator> <comment type="line" pos:line="87" pos:column="22">// kilometers / hour</comment>
                <name pos:line="88" pos:column="17">value</name> <op:operator pos:line="88" pos:column="23">*</op:operator> <name pos:line="88" pos:column="25">mStepLength</name> <comment type="line" pos:line="88" pos:column="37">// centimeters / minute</comment>
                <op:operator pos:line="89" pos:column="17">/</op:operator> <lit:literal type="number" pos:line="89" pos:column="19">100000f</lit:literal> <op:operator pos:line="89" pos:column="27">*</op:operator> <lit:literal type="number" pos:line="89" pos:column="29">60f</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="89" pos:column="34">// centimeters/kilometer</comment>
        }</block></then>
        <else pos:line="91" pos:column="9">else <block pos:line="91" pos:column="14">{
            <expr_stmt><expr><name pos:line="92" pos:column="13">mSpeed</name> <op:operator pos:line="92" pos:column="20">=</op:operator> <comment type="line" pos:line="92" pos:column="22">// miles / hour</comment>
                <name pos:line="93" pos:column="17">value</name> <op:operator pos:line="93" pos:column="23">*</op:operator> <name pos:line="93" pos:column="25">mStepLength</name> <comment type="line" pos:line="93" pos:column="37">// inches / minute</comment>
                <op:operator pos:line="94" pos:column="17">/</op:operator> <lit:literal type="number" pos:line="94" pos:column="19">63360f</lit:literal> <op:operator pos:line="94" pos:column="26">*</op:operator> <lit:literal type="number" pos:line="94" pos:column="28">60f</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="94" pos:column="33">// inches/mile </comment>
        }</block></else></if>
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">tellFasterSlower</name><argument_list pos:line="96" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">notifyListener</name><argument_list pos:line="97" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="block" format="javadoc" pos:line="100" pos:column="5">/**
     * Say slower/faster, if needed.
     */</comment>
    <function><type><specifier pos:line="103" pos:column="5">private</specifier> <name pos:line="103" pos:column="13">void</name></type> <name pos:line="103" pos:column="18">tellFasterSlower</name><parameter_list pos:line="103" pos:column="34">()</parameter_list> <block pos:line="103" pos:column="37">{
        <if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">mShouldTellFasterslower</name> <op:operator pos:line="104" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="104" pos:column="40">mUtils</name><op:operator pos:line="104" pos:column="46">.</op:operator><name pos:line="104" pos:column="47">isSpeakingEnabled</name></name><argument_list pos:line="104" pos:column="64">()</argument_list></call></expr>)</condition><then pos:line="104" pos:column="67"> <block pos:line="104" pos:column="68">{
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">long</name></type> <name pos:line="105" pos:column="18">now</name> <init pos:line="105" pos:column="22">= <expr><call><name><name pos:line="105" pos:column="24">System</name><op:operator pos:line="105" pos:column="30">.</op:operator><name pos:line="105" pos:column="31">currentTimeMillis</name></name><argument_list pos:line="105" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="106" pos:column="13">if <condition pos:line="106" pos:column="16">(<expr><name pos:line="106" pos:column="17">now</name> <op:operator pos:line="106" pos:column="21">-</op:operator> <name pos:line="106" pos:column="23">mSpokenAt</name> <op:operator pos:line="106" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="106" pos:column="35">3000</lit:literal> <op:operator pos:line="106" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="106" pos:column="43">!</op:operator><call><name><name pos:line="106" pos:column="44">mUtils</name><op:operator pos:line="106" pos:column="50">.</op:operator><name pos:line="106" pos:column="51">isSpeakingNow</name></name><argument_list pos:line="106" pos:column="64">()</argument_list></call></expr>)</condition><then pos:line="106" pos:column="67"> <block pos:line="106" pos:column="68">{
                <decl_stmt><decl><type><name pos:line="107" pos:column="17">float</name></type> <name pos:line="107" pos:column="23">little</name> <init pos:line="107" pos:column="30">= <expr><lit:literal type="number" pos:line="107" pos:column="32">0.10f</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="108" pos:column="17">float</name></type> <name pos:line="108" pos:column="23">normal</name> <init pos:line="108" pos:column="30">= <expr><lit:literal type="number" pos:line="108" pos:column="32">0.30f</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="109" pos:column="17">float</name></type> <name pos:line="109" pos:column="23">much</name> <init pos:line="109" pos:column="28">= <expr><lit:literal type="number" pos:line="109" pos:column="30">0.50f</lit:literal></expr></init></decl>;</decl_stmt>
                
                <decl_stmt><decl><type><name pos:line="111" pos:column="17">boolean</name></type> <name pos:line="111" pos:column="25">spoken</name> <init pos:line="111" pos:column="32">= <expr><lit:literal type="boolean" pos:line="111" pos:column="34">true</lit:literal></expr></init></decl>;</decl_stmt>
                <if pos:line="112" pos:column="17">if <condition pos:line="112" pos:column="20">(<expr><name pos:line="112" pos:column="21">mSpeed</name> <op:operator pos:line="112" pos:column="28">&lt;</op:operator> <name pos:line="112" pos:column="30">mDesiredSpeed</name> <op:operator pos:line="112" pos:column="44">*</op:operator> <op:operator pos:line="112" pos:column="46">(</op:operator><lit:literal type="number" pos:line="112" pos:column="47">1</lit:literal> <op:operator pos:line="112" pos:column="49">-</op:operator> <name pos:line="112" pos:column="51">much</name><op:operator pos:line="112" pos:column="55">)</op:operator></expr>)</condition><then pos:line="112" pos:column="57"> <block pos:line="112" pos:column="58">{
                    <expr_stmt><expr><call><name><name pos:line="113" pos:column="21">mUtils</name><op:operator pos:line="113" pos:column="27">.</op:operator><name pos:line="113" pos:column="28">say</name></name><argument_list pos:line="113" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="32">"much faster!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="115" pos:column="17">else
                <if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><name pos:line="116" pos:column="21">mSpeed</name> <op:operator pos:line="116" pos:column="28">&gt;</op:operator> <name pos:line="116" pos:column="30">mDesiredSpeed</name> <op:operator pos:line="116" pos:column="44">*</op:operator> <op:operator pos:line="116" pos:column="46">(</op:operator><lit:literal type="number" pos:line="116" pos:column="47">1</lit:literal> <op:operator pos:line="116" pos:column="49">+</op:operator> <name pos:line="116" pos:column="51">much</name><op:operator pos:line="116" pos:column="55">)</op:operator></expr>)</condition><then pos:line="116" pos:column="57"> <block pos:line="116" pos:column="58">{
                    <expr_stmt><expr><call><name><name pos:line="117" pos:column="21">mUtils</name><op:operator pos:line="117" pos:column="27">.</op:operator><name pos:line="117" pos:column="28">say</name></name><argument_list pos:line="117" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="32">"much slower!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="119" pos:column="17">else
                <if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name pos:line="120" pos:column="21">mSpeed</name> <op:operator pos:line="120" pos:column="28">&lt;</op:operator> <name pos:line="120" pos:column="30">mDesiredSpeed</name> <op:operator pos:line="120" pos:column="44">*</op:operator> <op:operator pos:line="120" pos:column="46">(</op:operator><lit:literal type="number" pos:line="120" pos:column="47">1</lit:literal> <op:operator pos:line="120" pos:column="49">-</op:operator> <name pos:line="120" pos:column="51">normal</name><op:operator pos:line="120" pos:column="57">)</op:operator></expr>)</condition><then pos:line="120" pos:column="59"> <block pos:line="120" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="121" pos:column="21">mUtils</name><op:operator pos:line="121" pos:column="27">.</op:operator><name pos:line="121" pos:column="28">say</name></name><argument_list pos:line="121" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="32">"faster!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="123" pos:column="17">else
                <if pos:line="124" pos:column="17">if <condition pos:line="124" pos:column="20">(<expr><name pos:line="124" pos:column="21">mSpeed</name> <op:operator pos:line="124" pos:column="28">&gt;</op:operator> <name pos:line="124" pos:column="30">mDesiredSpeed</name> <op:operator pos:line="124" pos:column="44">*</op:operator> <op:operator pos:line="124" pos:column="46">(</op:operator><lit:literal type="number" pos:line="124" pos:column="47">1</lit:literal> <op:operator pos:line="124" pos:column="49">+</op:operator> <name pos:line="124" pos:column="51">normal</name><op:operator pos:line="124" pos:column="57">)</op:operator></expr>)</condition><then pos:line="124" pos:column="59"> <block pos:line="124" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="125" pos:column="21">mUtils</name><op:operator pos:line="125" pos:column="27">.</op:operator><name pos:line="125" pos:column="28">say</name></name><argument_list pos:line="125" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="32">"slower!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="127" pos:column="17">else
                <if pos:line="128" pos:column="17">if <condition pos:line="128" pos:column="20">(<expr><name pos:line="128" pos:column="21">mSpeed</name> <op:operator pos:line="128" pos:column="28">&lt;</op:operator> <name pos:line="128" pos:column="30">mDesiredSpeed</name> <op:operator pos:line="128" pos:column="44">*</op:operator> <op:operator pos:line="128" pos:column="46">(</op:operator><lit:literal type="number" pos:line="128" pos:column="47">1</lit:literal> <op:operator pos:line="128" pos:column="49">-</op:operator> <name pos:line="128" pos:column="51">little</name><op:operator pos:line="128" pos:column="57">)</op:operator></expr>)</condition><then pos:line="128" pos:column="59"> <block pos:line="128" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="129" pos:column="21">mUtils</name><op:operator pos:line="129" pos:column="27">.</op:operator><name pos:line="129" pos:column="28">say</name></name><argument_list pos:line="129" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="32">"a little faster!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="131" pos:column="17">else
                <if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><name pos:line="132" pos:column="21">mSpeed</name> <op:operator pos:line="132" pos:column="28">&gt;</op:operator> <name pos:line="132" pos:column="30">mDesiredSpeed</name> <op:operator pos:line="132" pos:column="44">*</op:operator> <op:operator pos:line="132" pos:column="46">(</op:operator><lit:literal type="number" pos:line="132" pos:column="47">1</lit:literal> <op:operator pos:line="132" pos:column="49">+</op:operator> <name pos:line="132" pos:column="51">little</name><op:operator pos:line="132" pos:column="57">)</op:operator></expr>)</condition><then pos:line="132" pos:column="59"> <block pos:line="132" pos:column="60">{
                    <expr_stmt><expr><call><name><name pos:line="133" pos:column="21">mUtils</name><op:operator pos:line="133" pos:column="27">.</op:operator><name pos:line="133" pos:column="28">say</name></name><argument_list pos:line="133" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="32">"a little slower!"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="135" pos:column="17">else <block pos:line="135" pos:column="22">{
                    <expr_stmt><expr><name pos:line="136" pos:column="21">spoken</name> <op:operator pos:line="136" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="136" pos:column="30">false</lit:literal></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if></else></if></else></if></else></if>
                <if pos:line="138" pos:column="17">if <condition pos:line="138" pos:column="20">(<expr><name pos:line="138" pos:column="21">spoken</name></expr>)</condition><then pos:line="138" pos:column="28"> <block pos:line="138" pos:column="29">{
                    <expr_stmt><expr><name pos:line="139" pos:column="21">mSpokenAt</name> <op:operator pos:line="139" pos:column="31">=</op:operator> <name pos:line="139" pos:column="33">now</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if>
    }</block></function>
    
    <function><type><specifier pos:line="145" pos:column="5">public</specifier> <name pos:line="145" pos:column="12">void</name></type> <name pos:line="145" pos:column="17">passValue</name><parameter_list pos:line="145" pos:column="26">()</parameter_list> <block pos:line="145" pos:column="29">{
        <comment type="line" pos:line="146" pos:column="9">// Not used</comment>
    }</block></function>

    <function><type><specifier pos:line="149" pos:column="5">public</specifier> <name pos:line="149" pos:column="12">void</name></type> <name pos:line="149" pos:column="17">speak</name><parameter_list pos:line="149" pos:column="22">()</parameter_list> <block pos:line="149" pos:column="25">{
        <if pos:line="150" pos:column="9">if <condition pos:line="150" pos:column="12">(<expr><call><name><name pos:line="150" pos:column="13">mSettings</name><op:operator pos:line="150" pos:column="22">.</op:operator><name pos:line="150" pos:column="23">shouldTellSpeed</name></name><argument_list pos:line="150" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="150" pos:column="41"> <block pos:line="150" pos:column="42">{
            <if pos:line="151" pos:column="13">if <condition pos:line="151" pos:column="16">(<expr><name pos:line="151" pos:column="17">mSpeed</name> <op:operator pos:line="151" pos:column="24">&gt;=</op:operator> <lit:literal type="number" pos:line="151" pos:column="27">.01f</lit:literal></expr>)</condition><then pos:line="151" pos:column="32"> <block pos:line="151" pos:column="33">{
                <expr_stmt><expr><call><name><name pos:line="152" pos:column="17">mUtils</name><op:operator pos:line="152" pos:column="23">.</op:operator><name pos:line="152" pos:column="24">say</name></name><argument_list pos:line="152" pos:column="27">(<argument><expr><op:operator pos:line="152" pos:column="28">(</op:operator><lit:literal type="string" pos:line="152" pos:column="29">""</lit:literal> <op:operator pos:line="152" pos:column="32">+</op:operator> <op:operator pos:line="152" pos:column="34">(</op:operator><name pos:line="152" pos:column="35">mSpeed</name> <op:operator pos:line="152" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="152" pos:column="44">0.000001f</lit:literal><op:operator pos:line="152" pos:column="53">)</op:operator><op:operator pos:line="152" pos:column="54">)</op:operator><op:operator pos:line="152" pos:column="55">.</op:operator><call><name pos:line="152" pos:column="56">substring</name><argument_list pos:line="152" pos:column="65">(<argument><expr><lit:literal type="number" pos:line="152" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="152" pos:column="69">4</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="152" pos:column="72">+</op:operator> <op:operator pos:line="152" pos:column="74">(</op:operator><name pos:line="152" pos:column="75">mIsMetric</name> <op:operator pos:line="152" pos:column="85">?</op:operator> <lit:literal type="string" pos:line="152" pos:column="87">" kilometers per hour"</lit:literal> <op:operator pos:line="152" pos:column="110">:</op:operator> <lit:literal type="string" pos:line="152" pos:column="112">" miles per hour"</lit:literal><op:operator pos:line="152" pos:column="129">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        
    }</block></function>

}</block></class>

</unit>
