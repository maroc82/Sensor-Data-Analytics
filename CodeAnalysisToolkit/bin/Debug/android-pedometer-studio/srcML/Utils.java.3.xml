<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\School\Grad School (Comp Sci)\Thesis\android-pedometer-studio\app\src\main\java\name\bagi\levente\pedometer\Utils.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">name</name><op:operator pos:line="1" pos:column="13">.</op:operator><name pos:line="1" pos:column="14">bagi</name><op:operator pos:line="1" pos:column="18">.</op:operator><name pos:line="1" pos:column="19">levente</name><op:operator pos:line="1" pos:column="26">.</op:operator><name pos:line="1" pos:column="27">pedometer</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">util</name><op:operator pos:line="3" pos:column="17">.</op:operator><name pos:line="3" pos:column="18">Locale</name></name>;</import>

<import pos:line="5" pos:column="1">import <name><name pos:line="5" pos:column="8">android</name><op:operator pos:line="5" pos:column="15">.</op:operator><name pos:line="5" pos:column="16">app</name><op:operator pos:line="5" pos:column="19">.</op:operator><name pos:line="5" pos:column="20">Service</name></name>;</import>
<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">android</name><op:operator pos:line="6" pos:column="15">.</op:operator><name pos:line="6" pos:column="16">speech</name><op:operator pos:line="6" pos:column="22">.</op:operator><name pos:line="6" pos:column="23">tts</name><op:operator pos:line="6" pos:column="26">.</op:operator><name pos:line="6" pos:column="27">TextToSpeech</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">android</name><op:operator pos:line="7" pos:column="15">.</op:operator><name pos:line="7" pos:column="16">text</name><op:operator pos:line="7" pos:column="20">.</op:operator><name pos:line="7" pos:column="21">format</name><op:operator pos:line="7" pos:column="27">.</op:operator><name pos:line="7" pos:column="28">Time</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">android</name><op:operator pos:line="8" pos:column="15">.</op:operator><name pos:line="8" pos:column="16">util</name><op:operator pos:line="8" pos:column="20">.</op:operator><name pos:line="8" pos:column="21">Log</name></name>;</import>

<class><specifier pos:line="10" pos:column="1">public</specifier> class <name pos:line="10" pos:column="14">Utils</name> <super><implements pos:line="10" pos:column="20">implements <name><name pos:line="10" pos:column="31">TextToSpeech</name><op:operator pos:line="10" pos:column="43">.</op:operator><name pos:line="10" pos:column="44">OnInitListener</name></name></implements></super> <block pos:line="10" pos:column="59">{
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">private</specifier> <specifier pos:line="11" pos:column="13">static</specifier> <specifier pos:line="11" pos:column="20">final</specifier> <name pos:line="11" pos:column="26">String</name></type> <name pos:line="11" pos:column="33">TAG</name> <init pos:line="11" pos:column="37">= <expr><lit:literal type="string" pos:line="11" pos:column="39">"Utils"</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">private</specifier> <name pos:line="12" pos:column="13">Service</name></type> <name pos:line="12" pos:column="21">mService</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">private</specifier> <specifier pos:line="14" pos:column="13">static</specifier> <name pos:line="14" pos:column="20">Utils</name></type> <name pos:line="14" pos:column="26">instance</name> <init pos:line="14" pos:column="35">= <expr><lit:literal type="null" pos:line="14" pos:column="37">null</lit:literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier pos:line="16" pos:column="5">private</specifier> <name pos:line="16" pos:column="13">Utils</name><parameter_list pos:line="16" pos:column="18">()</parameter_list> <block pos:line="16" pos:column="21">{
    }</block></constructor>
     
    <function><type><specifier pos:line="19" pos:column="5">public</specifier> <specifier pos:line="19" pos:column="12">static</specifier> <name pos:line="19" pos:column="19">Utils</name></type> <name pos:line="19" pos:column="25">getInstance</name><parameter_list pos:line="19" pos:column="36">()</parameter_list> <block pos:line="19" pos:column="39">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">instance</name> <op:operator pos:line="20" pos:column="22">==</op:operator> <lit:literal type="null" pos:line="20" pos:column="25">null</lit:literal></expr>)</condition><then pos:line="20" pos:column="30"> <block pos:line="20" pos:column="31">{
            <expr_stmt><expr><name pos:line="21" pos:column="13">instance</name> <op:operator pos:line="21" pos:column="22">=</op:operator> <op:operator pos:line="21" pos:column="24">new</op:operator> <call><name pos:line="21" pos:column="28">Utils</name><argument_list pos:line="21" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">instance</name></expr>;</return>
    }</block></function>
    
    <function><type><specifier pos:line="26" pos:column="5">public</specifier> <name pos:line="26" pos:column="12">void</name></type> <name pos:line="26" pos:column="17">setService</name><parameter_list pos:line="26" pos:column="27">(<param><decl><type><name pos:line="26" pos:column="28">Service</name></type> <name pos:line="26" pos:column="36">service</name></decl></param>)</parameter_list> <block pos:line="26" pos:column="45">{
        <expr_stmt><expr><name pos:line="27" pos:column="9">mService</name> <op:operator pos:line="27" pos:column="18">=</op:operator> <name pos:line="27" pos:column="20">service</name></expr>;</expr_stmt>
    }</block></function>
    
    <comment type="block" format="javadoc" pos:line="30" pos:column="5">/********** SPEAKING **********/</comment>
    
    <decl_stmt><decl><type><specifier pos:line="32" pos:column="5">private</specifier> <name pos:line="32" pos:column="13">TextToSpeech</name></type> <name pos:line="32" pos:column="26">mTts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="33" pos:column="5">private</specifier> <name pos:line="33" pos:column="13">boolean</name></type> <name pos:line="33" pos:column="21">mSpeak</name> <init pos:line="33" pos:column="28">= <expr><lit:literal type="boolean" pos:line="33" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="34" pos:column="5">private</specifier> <name pos:line="34" pos:column="13">boolean</name></type> <name pos:line="34" pos:column="21">mSpeakingEngineAvailable</name> <init pos:line="34" pos:column="46">= <expr><lit:literal type="boolean" pos:line="34" pos:column="48">false</lit:literal></expr></init></decl>;</decl_stmt>

    <function><type><specifier pos:line="36" pos:column="5">public</specifier> <name pos:line="36" pos:column="12">void</name></type> <name pos:line="36" pos:column="17">initTTS</name><parameter_list pos:line="36" pos:column="24">()</parameter_list> <block pos:line="36" pos:column="27">{
        <comment type="line" pos:line="37" pos:column="9">// Initialize text-to-speech. This is an asynchronous operation.</comment>
        <comment type="line" pos:line="38" pos:column="9">// The OnInitListener (second argument) is called after initialization completes.</comment>
        <expr_stmt><expr><call><name><name pos:line="39" pos:column="9">Log</name><op:operator pos:line="39" pos:column="12">.</op:operator><name pos:line="39" pos:column="13">i</name></name><argument_list pos:line="39" pos:column="14">(<argument><expr><name pos:line="39" pos:column="15">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="39" pos:column="20">"Initializing TextToSpeech..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">mTts</name> <op:operator pos:line="40" pos:column="14">=</op:operator> <op:operator pos:line="40" pos:column="16">new</op:operator> <call><name pos:line="40" pos:column="20">TextToSpeech</name><argument_list pos:line="40" pos:column="32">(<argument><expr><name pos:line="40" pos:column="33">mService</name></expr></argument>,
            <argument><expr><name pos:line="41" pos:column="13">this</name></expr></argument>  <comment type="line" pos:line="41" pos:column="19">// TextToSpeech.OnInitListener</comment>
            )</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><specifier pos:line="44" pos:column="5">public</specifier> <name pos:line="44" pos:column="12">void</name></type> <name pos:line="44" pos:column="17">shutdownTTS</name><parameter_list pos:line="44" pos:column="28">()</parameter_list> <block pos:line="44" pos:column="31">{
        <expr_stmt><expr><call><name><name pos:line="45" pos:column="9">Log</name><op:operator pos:line="45" pos:column="12">.</op:operator><name pos:line="45" pos:column="13">i</name></name><argument_list pos:line="45" pos:column="14">(<argument><expr><name pos:line="45" pos:column="15">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="45" pos:column="20">"Shutting Down TextToSpeech..."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name pos:line="47" pos:column="9">mSpeakingEngineAvailable</name> <op:operator pos:line="47" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="47" pos:column="36">false</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="48" pos:column="9">mTts</name><op:operator pos:line="48" pos:column="13">.</op:operator><name pos:line="48" pos:column="14">shutdown</name></name><argument_list pos:line="48" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="49" pos:column="9">Log</name><op:operator pos:line="49" pos:column="12">.</op:operator><name pos:line="49" pos:column="13">i</name></name><argument_list pos:line="49" pos:column="14">(<argument><expr><name pos:line="49" pos:column="15">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="20">"TextToSpeech Shut Down."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    <function><type><specifier pos:line="52" pos:column="5">public</specifier> <name pos:line="52" pos:column="12">void</name></type> <name pos:line="52" pos:column="17">say</name><parameter_list pos:line="52" pos:column="20">(<param><decl><type><name pos:line="52" pos:column="21">String</name></type> <name pos:line="52" pos:column="28">text</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="34">{
        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">mSpeak</name> <op:operator pos:line="53" pos:column="20">&amp;&amp;</op:operator> <name pos:line="53" pos:column="23">mSpeakingEngineAvailable</name></expr>)</condition><then pos:line="53" pos:column="48"> <block pos:line="53" pos:column="49">{
            <expr_stmt><expr><call><name><name pos:line="54" pos:column="13">mTts</name><op:operator pos:line="54" pos:column="17">.</op:operator><name pos:line="54" pos:column="18">speak</name></name><argument_list pos:line="54" pos:column="23">(<argument><expr><name pos:line="54" pos:column="24">text</name></expr></argument>,
                    <argument><expr><name><name pos:line="55" pos:column="21">TextToSpeech</name><op:operator pos:line="55" pos:column="33">.</op:operator><name pos:line="55" pos:column="34">QUEUE_ADD</name></name></expr></argument>,  <comment type="line" pos:line="55" pos:column="46">// Drop all pending entries in the playback queue.</comment>
                    <argument><expr><lit:literal type="null" pos:line="56" pos:column="21">null</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="line" pos:line="60" pos:column="5">// Implements TextToSpeech.OnInitListener.</comment>
    <function><type><specifier pos:line="61" pos:column="5">public</specifier> <name pos:line="61" pos:column="12">void</name></type> <name pos:line="61" pos:column="17">onInit</name><parameter_list pos:line="61" pos:column="23">(<param><decl><type><name pos:line="61" pos:column="24">int</name></type> <name pos:line="61" pos:column="28">status</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="36">{
        <comment type="line" pos:line="62" pos:column="9">// status can be either TextToSpeech.SUCCESS or TextToSpeech.ERROR.</comment>
        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">status</name> <op:operator pos:line="63" pos:column="20">==</op:operator> <name><name pos:line="63" pos:column="23">TextToSpeech</name><op:operator pos:line="63" pos:column="35">.</op:operator><name pos:line="63" pos:column="36">SUCCESS</name></name></expr>)</condition><then pos:line="63" pos:column="44"> <block pos:line="63" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="64" pos:column="13">int</name></type> <name pos:line="64" pos:column="17">result</name> <init pos:line="64" pos:column="24">= <expr><call><name><name pos:line="64" pos:column="26">mTts</name><op:operator pos:line="64" pos:column="30">.</op:operator><name pos:line="64" pos:column="31">setLanguage</name></name><argument_list pos:line="64" pos:column="42">(<argument><expr><name><name pos:line="64" pos:column="43">Locale</name><op:operator pos:line="64" pos:column="49">.</op:operator><name pos:line="64" pos:column="50">US</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><name pos:line="65" pos:column="17">result</name> <op:operator pos:line="65" pos:column="24">==</op:operator> <name><name pos:line="65" pos:column="27">TextToSpeech</name><op:operator pos:line="65" pos:column="39">.</op:operator><name pos:line="65" pos:column="40">LANG_MISSING_DATA</name></name> <op:operator pos:line="65" pos:column="58">||</op:operator>
                <name pos:line="66" pos:column="17">result</name> <op:operator pos:line="66" pos:column="24">==</op:operator> <name><name pos:line="66" pos:column="27">TextToSpeech</name><op:operator pos:line="66" pos:column="39">.</op:operator><name pos:line="66" pos:column="40">LANG_NOT_SUPPORTED</name></name></expr>)</condition><then pos:line="66" pos:column="59"> <block pos:line="66" pos:column="60">{
               <comment type="line" pos:line="67" pos:column="16">// Language data is missing or the language is not supported.</comment>
                <expr_stmt><expr><call><name><name pos:line="68" pos:column="17">Log</name><op:operator pos:line="68" pos:column="20">.</op:operator><name pos:line="68" pos:column="21">e</name></name><argument_list pos:line="68" pos:column="22">(<argument><expr><name pos:line="68" pos:column="23">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="68" pos:column="28">"Language is not available."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else pos:line="69" pos:column="15">else <block pos:line="69" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="70" pos:column="17">Log</name><op:operator pos:line="70" pos:column="20">.</op:operator><name pos:line="70" pos:column="21">i</name></name><argument_list pos:line="70" pos:column="22">(<argument><expr><name pos:line="70" pos:column="23">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="70" pos:column="28">"TextToSpeech Initialized."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="71" pos:column="17">mSpeakingEngineAvailable</name> <op:operator pos:line="71" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="71" pos:column="44">true</lit:literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else pos:line="73" pos:column="11">else <block pos:line="73" pos:column="16">{
            <comment type="line" pos:line="74" pos:column="13">// Initialization failed.</comment>
            <expr_stmt><expr><call><name><name pos:line="75" pos:column="13">Log</name><op:operator pos:line="75" pos:column="16">.</op:operator><name pos:line="75" pos:column="17">e</name></name><argument_list pos:line="75" pos:column="18">(<argument><expr><name pos:line="75" pos:column="19">TAG</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="75" pos:column="24">"Could not initialize TextToSpeech."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><specifier pos:line="79" pos:column="5">public</specifier> <name pos:line="79" pos:column="12">void</name></type> <name pos:line="79" pos:column="17">setSpeak</name><parameter_list pos:line="79" pos:column="25">(<param><decl><type><name pos:line="79" pos:column="26">boolean</name></type> <name pos:line="79" pos:column="34">speak</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="41">{
        <expr_stmt><expr><name pos:line="80" pos:column="9">mSpeak</name> <op:operator pos:line="80" pos:column="16">=</op:operator> <name pos:line="80" pos:column="18">speak</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><specifier pos:line="83" pos:column="5">public</specifier> <name pos:line="83" pos:column="12">boolean</name></type> <name pos:line="83" pos:column="20">isSpeakingEnabled</name><parameter_list pos:line="83" pos:column="37">()</parameter_list> <block pos:line="83" pos:column="40">{
        <return pos:line="84" pos:column="9">return <expr><name pos:line="84" pos:column="16">mSpeak</name></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="87" pos:column="5">public</specifier> <name pos:line="87" pos:column="12">boolean</name></type> <name pos:line="87" pos:column="20">isSpeakingNow</name><parameter_list pos:line="87" pos:column="33">()</parameter_list> <block pos:line="87" pos:column="36">{
        <return pos:line="88" pos:column="9">return <expr><call><name><name pos:line="88" pos:column="16">mTts</name><op:operator pos:line="88" pos:column="20">.</op:operator><name pos:line="88" pos:column="21">isSpeaking</name></name><argument_list pos:line="88" pos:column="31">()</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><specifier pos:line="91" pos:column="5">public</specifier> <name pos:line="91" pos:column="12">void</name></type> <name pos:line="91" pos:column="17">ding</name><parameter_list pos:line="91" pos:column="21">()</parameter_list> <block pos:line="91" pos:column="24">{
    }</block></function>
    
    <comment type="block" format="javadoc" pos:line="94" pos:column="5">/********** Time **********/</comment>
    
    <function><type><specifier pos:line="96" pos:column="5">public</specifier> <specifier pos:line="96" pos:column="12">static</specifier> <name pos:line="96" pos:column="19">long</name></type> <name pos:line="96" pos:column="24">currentTimeInMillis</name><parameter_list pos:line="96" pos:column="43">()</parameter_list> <block pos:line="96" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="97" pos:column="9">Time</name></type> <name pos:line="97" pos:column="14">time</name> <init pos:line="97" pos:column="19">= <expr><op:operator pos:line="97" pos:column="21">new</op:operator> <call><name pos:line="97" pos:column="25">Time</name><argument_list pos:line="97" pos:column="29">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name pos:line="98" pos:column="9">time</name><op:operator pos:line="98" pos:column="13">.</op:operator><name pos:line="98" pos:column="14">setToNow</name></name><argument_list pos:line="98" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
        <return pos:line="99" pos:column="9">return <expr><call><name><name pos:line="99" pos:column="16">time</name><op:operator pos:line="99" pos:column="20">.</op:operator><name pos:line="99" pos:column="21">toMillis</name></name><argument_list pos:line="99" pos:column="29">(<argument><expr><lit:literal type="boolean" pos:line="99" pos:column="30">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
