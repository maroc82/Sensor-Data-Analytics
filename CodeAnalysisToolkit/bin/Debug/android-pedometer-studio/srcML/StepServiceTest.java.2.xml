<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="Java" filename="C:\Users\kosta\Documents\Sensor-Data-Analytics\projects\android-pedometer-studio\app\src\androidTest\java\sysnetlab\android\sdc\replay\test\StepServiceTest.java" pos:tabs="8"><package pos:line="1" pos:column="1">package <name><name pos:line="1" pos:column="9">sysnetlab</name><op:operator pos:line="1" pos:column="18">.</op:operator><name pos:line="1" pos:column="19">android</name><op:operator pos:line="1" pos:column="26">.</op:operator><name pos:line="1" pos:column="27">sdc</name><op:operator pos:line="1" pos:column="30">.</op:operator><name pos:line="1" pos:column="31">replay</name><op:operator pos:line="1" pos:column="37">.</op:operator><name pos:line="1" pos:column="38">test</name></name>;</package>

<import pos:line="3" pos:column="1">import <name><name pos:line="3" pos:column="8">java</name><op:operator pos:line="3" pos:column="12">.</op:operator><name pos:line="3" pos:column="13">io</name><op:operator pos:line="3" pos:column="15">.</op:operator><name pos:line="3" pos:column="16">InputStream</name></name>;</import>
<import pos:line="4" pos:column="1">import <name><name pos:line="4" pos:column="8">java</name><op:operator pos:line="4" pos:column="12">.</op:operator><name pos:line="4" pos:column="13">util</name><op:operator pos:line="4" pos:column="17">.</op:operator><name pos:line="4" pos:column="18">List</name></name>;</import>

<import pos:line="6" pos:column="1">import <name><name pos:line="6" pos:column="8">name</name><op:operator pos:line="6" pos:column="12">.</op:operator><name pos:line="6" pos:column="13">bagi</name><op:operator pos:line="6" pos:column="17">.</op:operator><name pos:line="6" pos:column="18">levente</name><op:operator pos:line="6" pos:column="25">.</op:operator><name pos:line="6" pos:column="26">pedometer</name><op:operator pos:line="6" pos:column="35">.</op:operator><name pos:line="6" pos:column="36">StepDetector</name></name>;</import>
<import pos:line="7" pos:column="1">import <name><name pos:line="7" pos:column="8">name</name><op:operator pos:line="7" pos:column="12">.</op:operator><name pos:line="7" pos:column="13">bagi</name><op:operator pos:line="7" pos:column="17">.</op:operator><name pos:line="7" pos:column="18">levente</name><op:operator pos:line="7" pos:column="25">.</op:operator><name pos:line="7" pos:column="26">pedometer</name><op:operator pos:line="7" pos:column="35">.</op:operator><name pos:line="7" pos:column="36">StepListener</name></name>;</import>
<import pos:line="8" pos:column="1">import <name><name pos:line="8" pos:column="8">name</name><op:operator pos:line="8" pos:column="12">.</op:operator><name pos:line="8" pos:column="13">bagi</name><op:operator pos:line="8" pos:column="17">.</op:operator><name pos:line="8" pos:column="18">levente</name><op:operator pos:line="8" pos:column="25">.</op:operator><name pos:line="8" pos:column="26">pedometer</name><op:operator pos:line="8" pos:column="35">.</op:operator><name pos:line="8" pos:column="36">StepService</name></name>;</import>
<import pos:line="9" pos:column="1">import <name><name pos:line="9" pos:column="8">sysnetlab</name><op:operator pos:line="9" pos:column="17">.</op:operator><name pos:line="9" pos:column="18">android</name><op:operator pos:line="9" pos:column="25">.</op:operator><name pos:line="9" pos:column="26">sdc</name><op:operator pos:line="9" pos:column="29">.</op:operator><name pos:line="9" pos:column="30">replay</name><op:operator pos:line="9" pos:column="36">.</op:operator><name pos:line="9" pos:column="37">SensingAssertionEnforcer</name></name>;</import>
<import pos:line="10" pos:column="1">import <name><name pos:line="10" pos:column="8">sysnetlab</name><op:operator pos:line="10" pos:column="17">.</op:operator><name pos:line="10" pos:column="18">android</name><op:operator pos:line="10" pos:column="25">.</op:operator><name pos:line="10" pos:column="26">sdc</name><op:operator pos:line="10" pos:column="29">.</op:operator><name pos:line="10" pos:column="30">replay</name><op:operator pos:line="10" pos:column="36">.</op:operator><name pos:line="10" pos:column="37">MockSensingContext</name></name>;</import>
<import pos:line="11" pos:column="1">import <name><name pos:line="11" pos:column="8">sysnetlab</name><op:operator pos:line="11" pos:column="17">.</op:operator><name pos:line="11" pos:column="18">android</name><op:operator pos:line="11" pos:column="25">.</op:operator><name pos:line="11" pos:column="26">sdc</name><op:operator pos:line="11" pos:column="29">.</op:operator><name pos:line="11" pos:column="30">replay</name><op:operator pos:line="11" pos:column="36">.</op:operator><name pos:line="11" pos:column="37">SenSeeSensingAssertionEnforcer</name></name>;</import>
<import pos:line="12" pos:column="1">import <name><name pos:line="12" pos:column="8">sysnetlab</name><op:operator pos:line="12" pos:column="17">.</op:operator><name pos:line="12" pos:column="18">android</name><op:operator pos:line="12" pos:column="25">.</op:operator><name pos:line="12" pos:column="26">sdc</name><op:operator pos:line="12" pos:column="29">.</op:operator><name pos:line="12" pos:column="30">replay</name><op:operator pos:line="12" pos:column="36">.</op:operator><name pos:line="12" pos:column="37">SenSeeSensingReplayer</name></name>;</import>
<import pos:line="13" pos:column="1">import <name><name pos:line="13" pos:column="8">sysnetlab</name><op:operator pos:line="13" pos:column="17">.</op:operator><name pos:line="13" pos:column="18">android</name><op:operator pos:line="13" pos:column="25">.</op:operator><name pos:line="13" pos:column="26">sdc</name><op:operator pos:line="13" pos:column="29">.</op:operator><name pos:line="13" pos:column="30">replay</name><op:operator pos:line="13" pos:column="36">.</op:operator><name pos:line="13" pos:column="37">SensingReplayer</name></name>;</import>
<import pos:line="14" pos:column="1">import <name><name pos:line="14" pos:column="8">sysnetlab</name><op:operator pos:line="14" pos:column="17">.</op:operator><name pos:line="14" pos:column="18">android</name><op:operator pos:line="14" pos:column="25">.</op:operator><name pos:line="14" pos:column="26">sdc</name><op:operator pos:line="14" pos:column="29">.</op:operator><name pos:line="14" pos:column="30">replay</name><op:operator pos:line="14" pos:column="36">.</op:operator><name pos:line="14" pos:column="37">metamorphic</name><op:operator pos:line="14" pos:column="48">.</op:operator><name pos:line="14" pos:column="49">MetamorphicTransform</name></name>;</import>
<import pos:line="15" pos:column="1">import <name><name pos:line="15" pos:column="8">sysnetlab</name><op:operator pos:line="15" pos:column="17">.</op:operator><name pos:line="15" pos:column="18">android</name><op:operator pos:line="15" pos:column="25">.</op:operator><name pos:line="15" pos:column="26">sdc</name><op:operator pos:line="15" pos:column="29">.</op:operator><name pos:line="15" pos:column="30">replay</name><op:operator pos:line="15" pos:column="36">.</op:operator><name pos:line="15" pos:column="37">metamorphic</name><op:operator pos:line="15" pos:column="48">.</op:operator><name pos:line="15" pos:column="49">NoEffectMetamorphicTransform</name></name>;</import>

<import pos:line="17" pos:column="1">import <name><name pos:line="17" pos:column="8">android</name><op:operator pos:line="17" pos:column="15">.</op:operator><name pos:line="17" pos:column="16">content</name><op:operator pos:line="17" pos:column="23">.</op:operator><name pos:line="17" pos:column="24">Context</name></name>;</import>
<import pos:line="18" pos:column="1">import <name><name pos:line="18" pos:column="8">android</name><op:operator pos:line="18" pos:column="15">.</op:operator><name pos:line="18" pos:column="16">content</name><op:operator pos:line="18" pos:column="23">.</op:operator><name pos:line="18" pos:column="24">Intent</name></name>;</import>
<import pos:line="19" pos:column="1">import <name><name pos:line="19" pos:column="8">android</name><op:operator pos:line="19" pos:column="15">.</op:operator><name pos:line="19" pos:column="16">hardware</name><op:operator pos:line="19" pos:column="24">.</op:operator><name pos:line="19" pos:column="25">Sensor</name></name>;</import>
<import pos:line="20" pos:column="1">import <name><name pos:line="20" pos:column="8">android</name><op:operator pos:line="20" pos:column="15">.</op:operator><name pos:line="20" pos:column="16">hardware</name><op:operator pos:line="20" pos:column="24">.</op:operator><name pos:line="20" pos:column="25">SensorEventListener</name></name>;</import>
<import pos:line="21" pos:column="1">import <name><name pos:line="21" pos:column="8">android</name><op:operator pos:line="21" pos:column="15">.</op:operator><name pos:line="21" pos:column="16">test</name><op:operator pos:line="21" pos:column="20">.</op:operator><name pos:line="21" pos:column="21">ServiceTestCase</name></name>;</import>

<class><specifier pos:line="23" pos:column="1">public</specifier> class <name pos:line="23" pos:column="14">StepServiceTest</name> 
		<super><extends pos:line="24" pos:column="17">extends <name><name pos:line="24" pos:column="25">ServiceTestCase</name><argument_list pos:line="24" pos:column="40">&lt;<argument><name pos:line="24" pos:column="41">StepService</name></argument>&gt;</argument_list></name></extends></super> <block pos:line="24" pos:column="54">{

    <decl_stmt><decl><type><specifier pos:line="26" pos:column="5">private</specifier> <name pos:line="26" pos:column="13">int</name></type> <name pos:line="26" pos:column="17">stepsCountedByStepDetector</name> <init pos:line="26" pos:column="44">= <expr><lit:literal type="number" pos:line="26" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier pos:line="28" pos:column="9">public</specifier> <name pos:line="28" pos:column="16">StepServiceTest</name><parameter_list pos:line="28" pos:column="31">()</parameter_list> 
	<block pos:line="29" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="30" pos:column="17">super</name><argument_list pos:line="30" pos:column="22">(<argument><expr><name><name pos:line="30" pos:column="23">StepService</name><op:operator pos:line="30" pos:column="34">.</op:operator><name pos:line="30" pos:column="35">class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><specifier pos:line="33" pos:column="9">public</specifier> <name pos:line="33" pos:column="16">void</name></type> <name pos:line="33" pos:column="21">setUp</name><parameter_list pos:line="33" pos:column="26">()</parameter_list> <throws pos:line="33" pos:column="29">throws <argument><expr><name pos:line="33" pos:column="36">Exception</name></expr></argument></throws> <block pos:line="33" pos:column="46">{
	}</block></function>

	<function><type><specifier pos:line="36" pos:column="9">public</specifier> <name pos:line="36" pos:column="16">void</name></type> <name pos:line="36" pos:column="21">tearDown</name><parameter_list pos:line="36" pos:column="29">()</parameter_list> <throws pos:line="36" pos:column="32">throws <argument><expr><name pos:line="36" pos:column="39">Exception</name></expr></argument></throws> <block pos:line="36" pos:column="49">{
	}</block></function>
	
	<function><type><specifier pos:line="39" pos:column="9">public</specifier> <name pos:line="39" pos:column="16">void</name></type> <name pos:line="39" pos:column="21">testReplayInStepService</name><parameter_list pos:line="39" pos:column="44">()</parameter_list> <throws pos:line="39" pos:column="47">throws <argument><expr><name pos:line="39" pos:column="54">Exception</name></expr></argument></throws> 
	<block pos:line="40" pos:column="9">{
        <comment type="line" pos:line="41" pos:column="9">//set up mock context to capture the application's sensor data listener</comment>
		<decl_stmt><decl><type><name pos:line="42" pos:column="17">MockSensingContext</name></type> <name pos:line="42" pos:column="36">mockContext</name> <init pos:line="42" pos:column="48">= <expr><op:operator pos:line="42" pos:column="50">new</op:operator> <call><name pos:line="42" pos:column="54">MockSensingContext</name><argument_list pos:line="42" pos:column="72">(<argument><expr><call><name pos:line="42" pos:column="73">getContext</name><argument_list pos:line="42" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">setContext</name><argument_list pos:line="43" pos:column="19">(<argument><expr><name pos:line="43" pos:column="20">mockContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="45" pos:column="9">//start the StepService</comment>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">startService</name><argument_list pos:line="46" pos:column="21">(<argument><expr><op:operator pos:line="46" pos:column="22">new</op:operator> <call><name pos:line="46" pos:column="26">Intent</name><argument_list pos:line="46" pos:column="32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     
        <decl_stmt><decl><type><name pos:line="47" pos:column="9">StepService</name></type> <name pos:line="47" pos:column="21">stepService</name> <init pos:line="47" pos:column="33">= <expr><op:operator pos:line="47" pos:column="35">(</op:operator><name pos:line="47" pos:column="36">StepService</name><op:operator pos:line="47" pos:column="47">)</op:operator> <call><name pos:line="47" pos:column="49">getService</name><argument_list pos:line="47" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">assertNotNull</name><argument_list pos:line="48" pos:column="22">(<argument><expr><name pos:line="48" pos:column="23">stepService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      

        <comment type="line" pos:line="50" pos:column="9">//set up the replayer, using files from SenSee and the captured listener</comment>
        <decl_stmt><decl><type><name pos:line="51" pos:column="9">SensorEventListener</name></type> <name pos:line="51" pos:column="29">capturedListener</name> <init pos:line="51" pos:column="46">= <expr><call><name><name pos:line="51" pos:column="48">mockContext</name><op:operator pos:line="51" pos:column="59">.</op:operator><name pos:line="51" pos:column="60">getCapturedEventListener</name></name><argument_list pos:line="51" pos:column="84">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">assertNotNull</name><argument_list pos:line="52" pos:column="22">(<argument><expr><name pos:line="52" pos:column="23">capturedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="53" pos:column="9">StepDetector</name></type> <name pos:line="53" pos:column="22">stepDetector</name> <init pos:line="53" pos:column="35">= <expr><op:operator pos:line="53" pos:column="37">(</op:operator><name pos:line="53" pos:column="38">StepDetector</name><op:operator pos:line="53" pos:column="50">)</op:operator> <name pos:line="53" pos:column="52">capturedListener</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">assertNotNull</name><argument_list pos:line="54" pos:column="22">(<argument><expr><name pos:line="54" pos:column="23">stepDetector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name pos:line="56" pos:column="9">Context</name></type> <name pos:line="56" pos:column="17">testContext</name> <init pos:line="56" pos:column="29">= <expr><op:operator pos:line="56" pos:column="31">(</op:operator><name pos:line="56" pos:column="32">Context</name><op:operator pos:line="56" pos:column="39">)</op:operator><call><name pos:line="56" pos:column="40">getClass</name><argument_list pos:line="56" pos:column="48">()</argument_list></call><op:operator pos:line="56" pos:column="50">.</op:operator><call><name pos:line="56" pos:column="51">getMethod</name><argument_list pos:line="56" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="61">"getTestContext"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="78">.</op:operator><call><name pos:line="56" pos:column="79">invoke</name><argument_list pos:line="56" pos:column="85">(<argument><expr><name pos:line="56" pos:column="86">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="57" pos:column="9">InputStream</name></type> <name pos:line="57" pos:column="21">dataStream</name> <init pos:line="57" pos:column="32">= <expr><call><name><name pos:line="57" pos:column="34">testContext</name><op:operator pos:line="57" pos:column="45">.</op:operator><name pos:line="57" pos:column="46">getAssets</name></name><argument_list pos:line="57" pos:column="55">()</argument_list></call><op:operator pos:line="57" pos:column="57">.</op:operator><call><name pos:line="57" pos:column="58">open</name><argument_list pos:line="57" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="63">"accelerometer.csv"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">int</name></type> <name pos:line="58" pos:column="13">stepsInSenSeeExperiment</name> <init pos:line="58" pos:column="37">= <expr><lit:literal type="number" pos:line="58" pos:column="39">25</lit:literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name pos:line="60" pos:column="9">SensingReplayer</name></type> <name pos:line="60" pos:column="25">replayer</name> <init pos:line="60" pos:column="34">= <expr><op:operator pos:line="60" pos:column="36">new</op:operator> <call><name pos:line="60" pos:column="40">SenSeeSensingReplayer</name><argument_list pos:line="60" pos:column="61">(<argument><expr><name pos:line="60" pos:column="62">dataStream</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="74">capturedListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:line="62" pos:column="9">//set up a step listener to detect when the application counts a step</comment>
        <expr_stmt><expr><call><name><name pos:line="63" pos:column="9">stepDetector</name><op:operator pos:line="63" pos:column="21">.</op:operator><name pos:line="63" pos:column="22">addStepListener</name></name><argument_list pos:line="63" pos:column="37">(<argument><expr><op:operator pos:line="63" pos:column="38">new</op:operator> <class><super><name pos:line="63" pos:column="42">StepListener</name></super><argument_list pos:line="63" pos:column="54">()</argument_list> <block pos:line="63" pos:column="57">{
            <function><type><annotation pos:line="64" pos:column="13">@<name pos:line="64" pos:column="14">Override</name></annotation>
            <specifier pos:line="65" pos:column="13">public</specifier> <name pos:line="65" pos:column="20">void</name></type> <name pos:line="65" pos:column="25">onStep</name><parameter_list pos:line="65" pos:column="31">()</parameter_list> <block pos:line="65" pos:column="34">{
                <expr_stmt><expr><name pos:line="66" pos:column="17">stepsCountedByStepDetector</name><op:operator pos:line="66" pos:column="43">++</op:operator></expr>;</expr_stmt>
            }</block></function>

            <function><type><annotation pos:line="69" pos:column="13">@<name pos:line="69" pos:column="14">Override</name></annotation>
            <specifier pos:line="70" pos:column="13">public</specifier> <name pos:line="70" pos:column="20">void</name></type> <name pos:line="70" pos:column="25">passValue</name><parameter_list pos:line="70" pos:column="34">()</parameter_list> <block pos:line="70" pos:column="37">{
                <comment type="line" pos:line="71" pos:column="17">//do nothing</comment>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="75" pos:column="9">//replay</comment>
        <decl_stmt><decl><type><name><name pos:line="76" pos:column="9">List</name><argument_list pos:line="76" pos:column="13">&lt;<argument><name pos:line="76" pos:column="14">float</name><index pos:line="76" pos:column="19">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="76" pos:column="23">allSensorValues</name> <init pos:line="76" pos:column="39">= <expr><call><name><name pos:line="76" pos:column="41">replayer</name><op:operator pos:line="76" pos:column="49">.</op:operator><name pos:line="76" pos:column="50">getAllSensorValuesForReplay</name></name><argument_list pos:line="76" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">replayInStepDetectorAndAssert</name><argument_list pos:line="77" pos:column="38">(<argument><expr><name pos:line="77" pos:column="39">stepDetector</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="53">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="78">allSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:line="79" pos:column="9">//transform and replay again</comment>
        <decl_stmt><decl><type><name pos:line="80" pos:column="9">MetamorphicTransform</name></type> <name pos:line="80" pos:column="30">transformOne</name> <init pos:line="80" pos:column="43">= <expr><op:operator pos:line="80" pos:column="45">new</op:operator> <call><name pos:line="80" pos:column="49">NoEffectMetamorphicTransform</name><argument_list pos:line="80" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="81" pos:column="9">List</name><argument_list pos:line="81" pos:column="13">&lt;<argument><name pos:line="81" pos:column="14">float</name><index pos:line="81" pos:column="19">[]</index></argument>&gt;</argument_list></name></type> <name pos:line="81" pos:column="23">morphedSensorValues</name> <init pos:line="81" pos:column="43">= <expr><call><name><name pos:line="81" pos:column="45">transformOne</name><op:operator pos:line="81" pos:column="57">.</op:operator><name pos:line="81" pos:column="58">transform</name></name><argument_list pos:line="81" pos:column="67">(<argument><expr><name pos:line="81" pos:column="68">allSensorValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">replayInStepDetectorAndAssert</name><argument_list pos:line="82" pos:column="38">(<argument><expr><name pos:line="82" pos:column="39">stepDetector</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="53">stepsInSenSeeExperiment</name></expr></argument>, <argument><expr><name pos:line="82" pos:column="78">morphedSensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	}</block></function>

    <function><type><specifier pos:line="87" pos:column="5">private</specifier> <name pos:line="87" pos:column="13">void</name></type> <name pos:line="87" pos:column="18">replayInStepDetectorAndAssert</name><parameter_list pos:line="87" pos:column="47">(<param><decl><type><name pos:line="87" pos:column="48">StepDetector</name></type> <name pos:line="87" pos:column="61">stepDetector</name></decl></param>,
                                               <param><decl><type><name pos:line="88" pos:column="48">int</name></type> <name pos:line="88" pos:column="52">stepsInSenSeeExperiment</name></decl></param>,
                                               <param><decl><type><name><name pos:line="89" pos:column="48">List</name><argument_list pos:line="89" pos:column="52">&lt;<argument><name><name pos:line="89" pos:column="53">float</name><index pos:line="89" pos:column="58">[]</index></name></argument>&gt;</argument_list></name></type> <name pos:line="89" pos:column="62">morphedSensorValues</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="83">{

        <for pos:line="91" pos:column="9">for(<init><decl><type><name pos:line="91" pos:column="13">float</name><index pos:line="91" pos:column="18">[]</index></type> <name pos:line="91" pos:column="21">sensorValues</name> <range pos:line="91" pos:column="34">: <expr><name pos:line="91" pos:column="36">morphedSensorValues</name></expr></range></decl></init>)
        <block pos:line="92" pos:column="9">{
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">stepDetector</name><op:operator pos:line="93" pos:column="25">.</op:operator><name pos:line="93" pos:column="26">onSensorChanged</name></name><argument_list pos:line="93" pos:column="41">(<argument><expr><name><name pos:line="93" pos:column="42">Sensor</name><op:operator pos:line="93" pos:column="48">.</op:operator><name pos:line="93" pos:column="49">TYPE_ACCELEROMETER</name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="69">sensorValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name pos:line="96" pos:column="9">double</name></type> <name pos:line="96" pos:column="16">errorThreshold</name> <init pos:line="96" pos:column="31">= <expr><op:operator pos:line="96" pos:column="33">(</op:operator><name pos:line="96" pos:column="34">stepsInSenSeeExperiment</name> <op:operator pos:line="96" pos:column="58">*</op:operator> <lit:literal type="number" pos:line="96" pos:column="60">.2</lit:literal><op:operator pos:line="96" pos:column="62">)</op:operator></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="96" pos:column="65">//80% accuracy</comment>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">assertTrue</name><argument_list pos:line="97" pos:column="19">(<argument><expr><call><name><name pos:line="97" pos:column="20">Math</name><op:operator pos:line="97" pos:column="24">.</op:operator><name pos:line="97" pos:column="25">abs</name></name><argument_list pos:line="97" pos:column="28">(<argument><expr><name pos:line="97" pos:column="29">stepsCountedByStepDetector</name> <op:operator pos:line="97" pos:column="56">-</op:operator> <name pos:line="97" pos:column="58">stepsInSenSeeExperiment</name></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="83">&lt;=</op:operator> <name pos:line="97" pos:column="86">errorThreshold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
