<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\ExternalLexer.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file ExternalLexer.h
 ** Support external lexers in DLLs.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2001 Simon Steele &lt;ss@pnotepad.org&gt;, portions copyright Neil Hodgson.</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">EXTERNALLEXER_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">EXTERNALLEXER_H</name></cpp:macro></cpp:define>

<cpp:if pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">if</cpp:directive> <expr><name pos:line="11" pos:column="5">PLAT_WIN</name></expr></cpp:if>
<cpp:define pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="12" pos:column="9">EXT_LEXER_DECL</name></cpp:macro> <cpp:value pos:line="12" pos:column="24">__stdcall</cpp:value></cpp:define>
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="14" pos:column="9">EXT_LEXER_DECL</name></cpp:macro></cpp:define>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef</cpp:directive> <name pos:line="17" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="18" pos:column="1">namespace <name pos:line="18" pos:column="11">Scintilla</name> <block pos:line="18" pos:column="21">{
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif</cpp:directive></cpp:endif>

<typedef pos:line="21" pos:column="1">typedef <function_decl><type><name pos:line="21" pos:column="9">void</name><type:modifier pos:line="21" pos:column="13">*</type:modifier></type>(<name pos:line="21" pos:column="15">EXT_LEXER_DECL</name> <type:modifier pos:line="21" pos:column="30">*</type:modifier><name pos:line="21" pos:column="31">GetLexerFunction</name>)<parameter_list pos:line="21" pos:column="48">(<param><decl><type><name pos:line="21" pos:column="49">unsigned</name> <name pos:line="21" pos:column="58">int</name></type> <name pos:line="21" pos:column="62">Index</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef pos:line="22" pos:column="1">typedef <function_decl><type><name pos:line="22" pos:column="9">int</name></type> (<name pos:line="22" pos:column="14">EXT_LEXER_DECL</name> <type:modifier pos:line="22" pos:column="29">*</type:modifier><name pos:line="22" pos:column="30">GetLexerCountFn</name>)<parameter_list pos:line="22" pos:column="46">()</parameter_list>;</function_decl></typedef>
<typedef pos:line="23" pos:column="1">typedef <function_decl><type><name pos:line="23" pos:column="9">void</name></type> (<name pos:line="23" pos:column="15">EXT_LEXER_DECL</name> <type:modifier pos:line="23" pos:column="30">*</type:modifier><name pos:line="23" pos:column="31">GetLexerNameFn</name>)<parameter_list pos:line="23" pos:column="46">(<param><decl><type><name pos:line="23" pos:column="47">unsigned</name> <name pos:line="23" pos:column="56">int</name></type> <name pos:line="23" pos:column="60">Index</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="67">char</name> <type:modifier pos:line="23" pos:column="72">*</type:modifier></type><name pos:line="23" pos:column="73">name</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="79">int</name></type> <name pos:line="23" pos:column="83">buflength</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef pos:line="24" pos:column="1">typedef <function_decl><type><name pos:line="24" pos:column="9">LexerFactoryFunction</name></type>(<name pos:line="24" pos:column="30">EXT_LEXER_DECL</name> <type:modifier pos:line="24" pos:column="45">*</type:modifier><name pos:line="24" pos:column="46">GetLexerFactoryFunction</name>)<parameter_list pos:line="24" pos:column="70">(<param><decl><type><name pos:line="24" pos:column="71">unsigned</name> <name pos:line="24" pos:column="80">int</name></type> <name pos:line="24" pos:column="84">Index</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="line" format="doxygen" pos:line="26" pos:column="1">/// Sub-class of LexerModule to use an external lexer.</comment>
<class pos:line="27" pos:column="1">class <name pos:line="27" pos:column="7">ExternalLexerModule</name> <super pos:line="27" pos:column="27">: <specifier pos:line="27" pos:column="29">public</specifier> <name pos:line="27" pos:column="36">LexerModule</name></super> <block pos:line="27" pos:column="48">{<private type="default" pos:line="27" pos:column="49">
</private><protected pos:line="28" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">GetLexerFactoryFunction</name></type> <name pos:line="29" pos:column="33">fneFactory</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">char</name></type> <name><name pos:line="30" pos:column="14">name</name><index pos:line="30" pos:column="18">[<expr><lit:literal type="number" pos:line="30" pos:column="19">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
</protected><public pos:line="31" pos:column="1">public:
	<constructor><name pos:line="32" pos:column="9">ExternalLexerModule</name><parameter_list pos:line="32" pos:column="28">(<param><decl><type><name pos:line="32" pos:column="29">int</name></type> <name pos:line="32" pos:column="33">language_</name></decl></param>, <param><decl><type><name pos:line="32" pos:column="44">LexerFunction</name></type> <name pos:line="32" pos:column="58">fnLexer_</name></decl></param>,
		<param><decl><type><specifier pos:line="33" pos:column="17">const</specifier> <name pos:line="33" pos:column="23">char</name> <type:modifier pos:line="33" pos:column="28">*</type:modifier></type><name pos:line="33" pos:column="29">languageName_</name><init pos:line="33" pos:column="42">=<expr><lit:literal type="number" pos:line="33" pos:column="43">0</lit:literal></expr></init></decl></param>, <name pos:line="33" pos:column="46">LexerFunction</name> <name pos:line="33" pos:column="60">fnFolder_</name><op:operator pos:line="33" pos:column="69">=</op:operator><lit:literal type="number" pos:line="33" pos:column="70">0</lit:literal>)</parameter_list> <member_list pos:line="33" pos:column="73">:
		<call><name pos:line="34" pos:column="17">LexerModule</name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">language_</name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">fnLexer_</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="34" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="53">fnFolder_</name></expr></argument>)</argument_list></call><op:operator pos:line="34" pos:column="63">,</op:operator>
		<call><name pos:line="35" pos:column="17">fneFactory</name><argument_list pos:line="35" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="35" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="35" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="36" pos:column="17">strncpy</name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">name</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="31">languageName_</name></expr></argument>, <argument><expr><sizeof pos:line="36" pos:column="46">sizeof<argument_list pos:line="36" pos:column="52">(<argument><expr><name pos:line="36" pos:column="53">name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="37" pos:column="17">name</name><index pos:line="37" pos:column="21">[<expr><sizeof pos:line="37" pos:column="22">sizeof<argument_list pos:line="37" pos:column="28">(<argument><expr><name pos:line="37" pos:column="29">name</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="37" pos:column="34">-</op:operator><lit:literal type="number" pos:line="37" pos:column="35">1</lit:literal></expr>]</index></name> <op:operator pos:line="37" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="37" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="38" pos:column="17">languageName</name> <op:operator pos:line="38" pos:column="30">=</op:operator> <name pos:line="38" pos:column="32">name</name></expr>;</expr_stmt>
	}</block></constructor>
	<function_decl><type><specifier pos:line="40" pos:column="9">virtual</specifier> <name pos:line="40" pos:column="17">void</name></type> <name pos:line="40" pos:column="22">SetExternal</name><parameter_list pos:line="40" pos:column="33">(<param><decl><type><name pos:line="40" pos:column="34">GetLexerFactoryFunction</name></type> <name pos:line="40" pos:column="58">fFactory</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="68">int</name></type> <name pos:line="40" pos:column="72">index</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<comment type="line" format="doxygen" pos:line="43" pos:column="1">/// LexerMinder points to an ExternalLexerModule - so we don't leak them.</comment>
<class pos:line="44" pos:column="1">class <name pos:line="44" pos:column="7">LexerMinder</name> <block pos:line="44" pos:column="19">{<private type="default" pos:line="44" pos:column="20">
</private><public pos:line="45" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">ExternalLexerModule</name> <type:modifier pos:line="46" pos:column="29">*</type:modifier></type><name pos:line="46" pos:column="30">self</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">LexerMinder</name> <type:modifier pos:line="47" pos:column="21">*</type:modifier></type><name pos:line="47" pos:column="22">next</name></decl>;</decl_stmt>
</public>}</block>;</class>

<comment type="line" format="doxygen" pos:line="50" pos:column="1">/// LexerLibrary exists for every External Lexer DLL, contains LexerMinders.</comment>
<class pos:line="51" pos:column="1">class <name pos:line="51" pos:column="7">LexerLibrary</name> <block pos:line="51" pos:column="20">{<private type="default" pos:line="51" pos:column="21">
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">DynamicLibrary</name>	<type:modifier pos:line="52" pos:column="25">*</type:modifier></type><name pos:line="52" pos:column="26">lib</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">LexerMinder</name>		<type:modifier pos:line="53" pos:column="33">*</type:modifier></type><name pos:line="53" pos:column="34">first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">LexerMinder</name>		<type:modifier pos:line="54" pos:column="33">*</type:modifier></type><name pos:line="54" pos:column="34">last</name></decl>;</decl_stmt>

</private><public pos:line="56" pos:column="1">public:
	<constructor_decl><name pos:line="57" pos:column="9">LexerLibrary</name><parameter_list pos:line="57" pos:column="21">(<param><decl><type><specifier pos:line="57" pos:column="22">const</specifier> <name pos:line="57" pos:column="28">char</name> <type:modifier pos:line="57" pos:column="33">*</type:modifier></type><name pos:line="57" pos:column="34">ModuleName</name></decl></param>)</parameter_list>;</constructor_decl>
	<destructor_decl><name pos:line="58" pos:column="9">~<name pos:line="58" pos:column="10">LexerLibrary</name></name><parameter_list pos:line="58" pos:column="22">()</parameter_list>;</destructor_decl>
	<function_decl><type><name pos:line="59" pos:column="9">void</name></type> <name pos:line="59" pos:column="14">Release</name><parameter_list pos:line="59" pos:column="21">()</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="61" pos:column="9">LexerLibrary</name>	<type:modifier pos:line="61" pos:column="25">*</type:modifier></type><name pos:line="61" pos:column="26">next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="62" pos:column="9">std</name><op:operator pos:line="62" pos:column="12">::</op:operator><name pos:line="62" pos:column="14">string</name></name></type>			<name pos:line="62" pos:column="41">m_sModuleName</name></decl>;</decl_stmt>
</public>}</block>;</class>

<comment type="line" format="doxygen" pos:line="65" pos:column="1">/// LexerManager manages external lexers, contains LexerLibrarys.</comment>
<class pos:line="66" pos:column="1">class <name pos:line="66" pos:column="7">LexerManager</name> <block pos:line="66" pos:column="20">{<private type="default" pos:line="66" pos:column="21">
</private><public pos:line="67" pos:column="1">public:
	<destructor_decl><name pos:line="68" pos:column="9">~<name pos:line="68" pos:column="10">LexerManager</name></name><parameter_list pos:line="68" pos:column="22">()</parameter_list>;</destructor_decl>

	<function_decl><type><specifier pos:line="70" pos:column="9">static</specifier> <name pos:line="70" pos:column="16">LexerManager</name> <type:modifier pos:line="70" pos:column="29">*</type:modifier></type><name pos:line="70" pos:column="30">GetInstance</name><parameter_list pos:line="70" pos:column="41">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="71" pos:column="9">static</specifier> <name pos:line="71" pos:column="16">void</name></type> <name pos:line="71" pos:column="21">DeleteInstance</name><parameter_list pos:line="71" pos:column="35">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="73" pos:column="9">void</name></type> <name pos:line="73" pos:column="14">Load</name><parameter_list pos:line="73" pos:column="18">(<param><decl><type><specifier pos:line="73" pos:column="19">const</specifier> <name pos:line="73" pos:column="25">char</name> <type:modifier pos:line="73" pos:column="30">*</type:modifier></type><name pos:line="73" pos:column="31">path</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="74" pos:column="9">void</name></type> <name pos:line="74" pos:column="14">Clear</name><parameter_list pos:line="74" pos:column="19">()</parameter_list>;</function_decl>

</public><private pos:line="76" pos:column="1">private:
	<constructor_decl><name pos:line="77" pos:column="9">LexerManager</name><parameter_list pos:line="77" pos:column="21">()</parameter_list>;</constructor_decl>
	<decl_stmt><decl><type><specifier pos:line="78" pos:column="9">static</specifier> <name pos:line="78" pos:column="16">LexerManager</name> <type:modifier pos:line="78" pos:column="29">*</type:modifier></type><name pos:line="78" pos:column="30">theInstance</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="80" pos:column="9">void</name></type> <name pos:line="80" pos:column="14">LoadLexerLibrary</name><parameter_list pos:line="80" pos:column="30">(<param><decl><type><specifier pos:line="80" pos:column="31">const</specifier> <name pos:line="80" pos:column="37">char</name> <type:modifier pos:line="80" pos:column="42">*</type:modifier></type><name pos:line="80" pos:column="43">module</name></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">LexerLibrary</name> <type:modifier pos:line="81" pos:column="22">*</type:modifier></type><name pos:line="81" pos:column="23">first</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="82" pos:column="9">LexerLibrary</name> <type:modifier pos:line="82" pos:column="22">*</type:modifier></type><name pos:line="82" pos:column="23">last</name></decl>;</decl_stmt>
</private>}</block>;</class>

<class pos:line="85" pos:column="1">class <name pos:line="85" pos:column="7">LMMinder</name> <block pos:line="85" pos:column="16">{<private type="default" pos:line="85" pos:column="17">
</private><public pos:line="86" pos:column="1">public:
	<destructor_decl><name pos:line="87" pos:column="9">~<name pos:line="87" pos:column="10">LMMinder</name></name><parameter_list pos:line="87" pos:column="18">()</parameter_list>;</destructor_decl>
</public>}</block>;</class>

<cpp:ifdef pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">ifdef</cpp:directive> <name pos:line="90" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
