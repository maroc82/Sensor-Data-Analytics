<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\PropSetSimple.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// SciTE - Scintilla based Text Editor</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file PropSetSimple.cxx
 ** A Java style properties file module.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<comment type="line" pos:line="8" pos:column="1">// Maintain a dictionary of properties</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef</cpp:directive> <name pos:line="14" pos:column="8">_MSC_VER</name></cpp:ifdef>
<comment type="line" pos:line="15" pos:column="1">// Visual C++ doesn't like unreachable code or long decorated names in its own headers.</comment>
<cpp:pragma pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">pragma</cpp:directive> warning(disable: 4018 4100 4245 4511 4512 4663 4702 4786)</cpp:pragma>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file pos:line="19" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;map&gt;</cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef</cpp:directive> <name pos:line="24" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="25" pos:column="1">using namespace <name pos:line="25" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif</cpp:directive></cpp:endif>

<typedef pos:line="28" pos:column="1">typedef <type><name><name pos:line="28" pos:column="9">std</name><op:operator pos:line="28" pos:column="12">::</op:operator><name><name pos:line="28" pos:column="14">map</name><argument_list pos:line="28" pos:column="17">&lt;<argument><expr><name><name pos:line="28" pos:column="18">std</name><op:operator pos:line="28" pos:column="21">::</op:operator><name pos:line="28" pos:column="23">string</name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="31">std</name><op:operator pos:line="28" pos:column="34">::</op:operator><name pos:line="28" pos:column="36">string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="28" pos:column="44">mapss</name>;</typedef>

<constructor><name><name pos:line="30" pos:column="1">PropSetSimple</name><op:operator pos:line="30" pos:column="14">::</op:operator><name pos:line="30" pos:column="16">PropSetSimple</name></name><parameter_list pos:line="30" pos:column="29">()</parameter_list> <block pos:line="30" pos:column="32">{
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">mapss</name> <type:modifier pos:line="31" pos:column="15">*</type:modifier></type><name pos:line="31" pos:column="16">props</name> <init pos:line="31" pos:column="22">= <expr><op:operator pos:line="31" pos:column="24">new</op:operator> <name pos:line="31" pos:column="28">mapss</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="32" pos:column="9">impl</name> <op:operator pos:line="32" pos:column="14">=</op:operator> <call><name><name pos:line="32" pos:column="16">static_cast</name><argument_list pos:line="32" pos:column="27">&lt;<argument><expr><name pos:line="32" pos:column="28">void</name> <op:operator pos:line="32" pos:column="33">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name pos:line="32" pos:column="36">props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="35" pos:column="1">PropSetSimple</name><op:operator pos:line="35" pos:column="14">::</op:operator>~<name pos:line="35" pos:column="17">PropSetSimple</name></name><parameter_list pos:line="35" pos:column="30">()</parameter_list> <block pos:line="35" pos:column="33">{
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">mapss</name> <type:modifier pos:line="36" pos:column="15">*</type:modifier></type><name pos:line="36" pos:column="16">props</name> <init pos:line="36" pos:column="22">= <expr><call><name><name pos:line="36" pos:column="24">static_cast</name><argument_list pos:line="36" pos:column="35">&lt;<argument><expr><name pos:line="36" pos:column="36">mapss</name> <op:operator pos:line="36" pos:column="42">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="36" pos:column="44">(<argument><expr><name pos:line="36" pos:column="45">impl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="37" pos:column="9">delete</op:operator> <name pos:line="37" pos:column="16">props</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="38" pos:column="9">impl</name> <op:operator pos:line="38" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="38" pos:column="16">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="41" pos:column="1">void</name></type> <name><name pos:line="41" pos:column="6">PropSetSimple</name><op:operator pos:line="41" pos:column="19">::</op:operator><name pos:line="41" pos:column="21">Set</name></name><parameter_list pos:line="41" pos:column="24">(<param><decl><type><specifier pos:line="41" pos:column="25">const</specifier> <name pos:line="41" pos:column="31">char</name> <type:modifier pos:line="41" pos:column="36">*</type:modifier></type><name pos:line="41" pos:column="37">key</name></decl></param>, <param><decl><type><specifier pos:line="41" pos:column="42">const</specifier> <name pos:line="41" pos:column="48">char</name> <type:modifier pos:line="41" pos:column="53">*</type:modifier></type><name pos:line="41" pos:column="54">val</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="59">int</name></type> <name pos:line="41" pos:column="63">lenKey</name></decl></param>, <param><decl><type><name pos:line="41" pos:column="71">int</name></type> <name pos:line="41" pos:column="75">lenVal</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="83">{
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">mapss</name> <type:modifier pos:line="42" pos:column="15">*</type:modifier></type><name pos:line="42" pos:column="16">props</name> <init pos:line="42" pos:column="22">= <expr><call><name><name pos:line="42" pos:column="24">static_cast</name><argument_list pos:line="42" pos:column="35">&lt;<argument><expr><name pos:line="42" pos:column="36">mapss</name> <op:operator pos:line="42" pos:column="42">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="42" pos:column="44">(<argument><expr><name pos:line="42" pos:column="45">impl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><op:operator pos:line="43" pos:column="13">!</op:operator><op:operator pos:line="43" pos:column="14">*</op:operator><name pos:line="43" pos:column="15">key</name></expr>)</condition><then pos:line="43" pos:column="19">	<comment type="line" pos:line="43" pos:column="25">// Empty keys are not supported</comment>
		<return pos:line="44" pos:column="17">return;</return></then></if>
	<if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">lenKey</name> <op:operator pos:line="45" pos:column="20">==</op:operator> <op:operator pos:line="45" pos:column="23">-</op:operator><lit:literal type="number" pos:line="45" pos:column="24">1</lit:literal></expr>)</condition><then pos:line="45" pos:column="26">
		<expr_stmt><expr><name pos:line="46" pos:column="17">lenKey</name> <op:operator pos:line="46" pos:column="24">=</op:operator> <call><name><name pos:line="46" pos:column="26">static_cast</name><argument_list pos:line="46" pos:column="37">&lt;<argument><expr><name pos:line="46" pos:column="38">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="46" pos:column="42">(<argument><expr><call><name pos:line="46" pos:column="43">strlen</name><argument_list pos:line="46" pos:column="49">(<argument><expr><name pos:line="46" pos:column="50">key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">lenVal</name> <op:operator pos:line="47" pos:column="20">==</op:operator> <op:operator pos:line="47" pos:column="23">-</op:operator><lit:literal type="number" pos:line="47" pos:column="24">1</lit:literal></expr>)</condition><then pos:line="47" pos:column="26">
		<expr_stmt><expr><name pos:line="48" pos:column="17">lenVal</name> <op:operator pos:line="48" pos:column="24">=</op:operator> <call><name><name pos:line="48" pos:column="26">static_cast</name><argument_list pos:line="48" pos:column="37">&lt;<argument><expr><name pos:line="48" pos:column="38">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="48" pos:column="42">(<argument><expr><call><name pos:line="48" pos:column="43">strlen</name><argument_list pos:line="48" pos:column="49">(<argument><expr><name pos:line="48" pos:column="50">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><op:operator pos:line="49" pos:column="9">(</op:operator><op:operator pos:line="49" pos:column="10">*</op:operator><name pos:line="49" pos:column="11">props</name><op:operator pos:line="49" pos:column="16">)</op:operator><index pos:line="49" pos:column="17">[<expr><call><name><name pos:line="49" pos:column="18">std</name><op:operator pos:line="49" pos:column="21">::</op:operator><name pos:line="49" pos:column="23">string</name></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">key</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="35">lenKey</name></expr></argument>)</argument_list></call></expr>]</index> <op:operator pos:line="49" pos:column="44">=</op:operator> <call><name><name pos:line="49" pos:column="46">std</name><op:operator pos:line="49" pos:column="49">::</op:operator><name pos:line="49" pos:column="51">string</name></name><argument_list pos:line="49" pos:column="57">(<argument><expr><name pos:line="49" pos:column="58">val</name></expr></argument>, <argument><expr><name pos:line="49" pos:column="63">lenVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="52" pos:column="1">static</specifier> <name pos:line="52" pos:column="8">bool</name></type> <name pos:line="52" pos:column="13">IsASpaceCharacter</name><parameter_list pos:line="52" pos:column="30">(<param><decl><type><name pos:line="52" pos:column="31">unsigned</name> <name pos:line="52" pos:column="40">int</name></type> <name pos:line="52" pos:column="44">ch</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="48">{
    <return pos:line="53" pos:column="5">return <expr><op:operator pos:line="53" pos:column="12">(</op:operator><name pos:line="53" pos:column="13">ch</name> <op:operator pos:line="53" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="19">' '</lit:literal><op:operator pos:line="53" pos:column="22">)</op:operator> <op:operator pos:line="53" pos:column="24">||</op:operator> <op:operator pos:line="53" pos:column="27">(</op:operator><op:operator pos:line="53" pos:column="28">(</op:operator><name pos:line="53" pos:column="29">ch</name> <op:operator pos:line="53" pos:column="32">&gt;=</op:operator> <lit:literal type="number" pos:line="53" pos:column="35">0x09</lit:literal><op:operator pos:line="53" pos:column="39">)</op:operator> <op:operator pos:line="53" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="53" pos:column="44">(</op:operator><name pos:line="53" pos:column="45">ch</name> <op:operator pos:line="53" pos:column="48">&lt;=</op:operator> <lit:literal type="number" pos:line="53" pos:column="51">0x0d</lit:literal><op:operator pos:line="53" pos:column="55">)</op:operator><op:operator pos:line="53" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="56" pos:column="1">void</name></type> <name><name pos:line="56" pos:column="6">PropSetSimple</name><op:operator pos:line="56" pos:column="19">::</op:operator><name pos:line="56" pos:column="21">Set</name></name><parameter_list pos:line="56" pos:column="24">(<param><decl><type><specifier pos:line="56" pos:column="25">const</specifier> <name pos:line="56" pos:column="31">char</name> <type:modifier pos:line="56" pos:column="36">*</type:modifier></type><name pos:line="56" pos:column="37">keyVal</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="45">{
	<while pos:line="57" pos:column="9">while <condition pos:line="57" pos:column="15">(<expr><call><name pos:line="57" pos:column="16">IsASpaceCharacter</name><argument_list pos:line="57" pos:column="33">(<argument><expr><op:operator pos:line="57" pos:column="34">*</op:operator><name pos:line="57" pos:column="35">keyVal</name></expr></argument>)</argument_list></call></expr>)</condition>
		<expr_stmt><expr><name pos:line="58" pos:column="17">keyVal</name><op:operator pos:line="58" pos:column="23">++</op:operator></expr>;</expr_stmt></while>
	<decl_stmt><decl><type><specifier pos:line="59" pos:column="9">const</specifier> <name pos:line="59" pos:column="15">char</name> <type:modifier pos:line="59" pos:column="20">*</type:modifier></type><name pos:line="59" pos:column="21">endVal</name> <init pos:line="59" pos:column="28">= <expr><name pos:line="59" pos:column="30">keyVal</name></expr></init></decl>;</decl_stmt>
	<while pos:line="60" pos:column="9">while <condition pos:line="60" pos:column="15">(<expr><op:operator pos:line="60" pos:column="16">*</op:operator><name pos:line="60" pos:column="17">endVal</name> <op:operator pos:line="60" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="60" pos:column="27">(</op:operator><op:operator pos:line="60" pos:column="28">*</op:operator><name pos:line="60" pos:column="29">endVal</name> <op:operator pos:line="60" pos:column="36">!=</op:operator> <lit:literal type="char" pos:line="60" pos:column="39">'\n'</lit:literal><op:operator pos:line="60" pos:column="43">)</op:operator></expr>)</condition>
		<expr_stmt><expr><name pos:line="61" pos:column="17">endVal</name><op:operator pos:line="61" pos:column="23">++</op:operator></expr>;</expr_stmt></while>
	<decl_stmt><decl><type><specifier pos:line="62" pos:column="9">const</specifier> <name pos:line="62" pos:column="15">char</name> <type:modifier pos:line="62" pos:column="20">*</type:modifier></type><name pos:line="62" pos:column="21">eqAt</name> <init pos:line="62" pos:column="26">= <expr><call><name pos:line="62" pos:column="28">strchr</name><argument_list pos:line="62" pos:column="34">(<argument><expr><name pos:line="62" pos:column="35">keyVal</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="62" pos:column="43">'='</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">eqAt</name></expr>)</condition><then pos:line="63" pos:column="18"> <block pos:line="63" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="64" pos:column="17">Set</name><argument_list pos:line="64" pos:column="20">(<argument><expr><name pos:line="64" pos:column="21">keyVal</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="29">eqAt</name> <op:operator pos:line="64" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="64" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="64" pos:column="39">eqAt</name><op:operator pos:line="64" pos:column="43">-</op:operator><name pos:line="64" pos:column="44">keyVal</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="52">endVal</name> <op:operator pos:line="64" pos:column="59">-</op:operator> <name pos:line="64" pos:column="61">eqAt</name> <op:operator pos:line="64" pos:column="66">-</op:operator> <lit:literal type="number" pos:line="64" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="65" pos:column="11">else <if pos:line="65" pos:column="16">if <condition pos:line="65" pos:column="19">(<expr><op:operator pos:line="65" pos:column="20">*</op:operator><name pos:line="65" pos:column="21">keyVal</name></expr>)</condition><then pos:line="65" pos:column="28"> <block pos:line="65" pos:column="29">{	<comment type="line" pos:line="65" pos:column="33">// No '=' so assume '=1'</comment>
		<expr_stmt><expr><call><name pos:line="66" pos:column="17">Set</name><argument_list pos:line="66" pos:column="20">(<argument><expr><name pos:line="66" pos:column="21">keyVal</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="29">"1"</lit:literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="34">endVal</name><op:operator pos:line="66" pos:column="40">-</op:operator><name pos:line="66" pos:column="41">keyVal</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="66" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
}</block></function>

<function><type><name pos:line="70" pos:column="1">void</name></type> <name><name pos:line="70" pos:column="6">PropSetSimple</name><op:operator pos:line="70" pos:column="19">::</op:operator><name pos:line="70" pos:column="21">SetMultiple</name></name><parameter_list pos:line="70" pos:column="32">(<param><decl><type><specifier pos:line="70" pos:column="33">const</specifier> <name pos:line="70" pos:column="39">char</name> <type:modifier pos:line="70" pos:column="44">*</type:modifier></type><name pos:line="70" pos:column="45">s</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="48">{
	<decl_stmt><decl><type><specifier pos:line="71" pos:column="9">const</specifier> <name pos:line="71" pos:column="15">char</name> <type:modifier pos:line="71" pos:column="20">*</type:modifier></type><name pos:line="71" pos:column="21">eol</name> <init pos:line="71" pos:column="25">= <expr><call><name pos:line="71" pos:column="27">strchr</name><argument_list pos:line="71" pos:column="33">(<argument><expr><name pos:line="71" pos:column="34">s</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="71" pos:column="37">'\n'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="72" pos:column="9">while <condition pos:line="72" pos:column="15">(<expr><name pos:line="72" pos:column="16">eol</name></expr>)</condition> <block pos:line="72" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">Set</name><argument_list pos:line="73" pos:column="20">(<argument><expr><name pos:line="73" pos:column="21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="74" pos:column="17">s</name> <op:operator pos:line="74" pos:column="19">=</op:operator> <name pos:line="74" pos:column="21">eol</name> <op:operator pos:line="74" pos:column="25">+</op:operator> <lit:literal type="number" pos:line="74" pos:column="27">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="75" pos:column="17">eol</name> <op:operator pos:line="75" pos:column="21">=</op:operator> <call><name pos:line="75" pos:column="23">strchr</name><argument_list pos:line="75" pos:column="29">(<argument><expr><name pos:line="75" pos:column="30">s</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="75" pos:column="33">'\n'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name pos:line="77" pos:column="9">Set</name><argument_list pos:line="77" pos:column="12">(<argument><expr><name pos:line="77" pos:column="13">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="80" pos:column="1">const</specifier> <name pos:line="80" pos:column="7">char</name> <type:modifier pos:line="80" pos:column="12">*</type:modifier></type><name><name pos:line="80" pos:column="13">PropSetSimple</name><op:operator pos:line="80" pos:column="26">::</op:operator><name pos:line="80" pos:column="28">Get</name></name><parameter_list pos:line="80" pos:column="31">(<param><decl><type><specifier pos:line="80" pos:column="32">const</specifier> <name pos:line="80" pos:column="38">char</name> <type:modifier pos:line="80" pos:column="43">*</type:modifier></type><name pos:line="80" pos:column="44">key</name></decl></param>)</parameter_list> <specifier pos:line="80" pos:column="49">const</specifier> <block pos:line="80" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">mapss</name> <type:modifier pos:line="81" pos:column="15">*</type:modifier></type><name pos:line="81" pos:column="16">props</name> <init pos:line="81" pos:column="22">= <expr><call><name><name pos:line="81" pos:column="24">static_cast</name><argument_list pos:line="81" pos:column="35">&lt;<argument><expr><name pos:line="81" pos:column="36">mapss</name> <op:operator pos:line="81" pos:column="42">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="81" pos:column="44">(<argument><expr><name pos:line="81" pos:column="45">impl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="82" pos:column="9">mapss</name><op:operator pos:line="82" pos:column="14">::</op:operator><name pos:line="82" pos:column="16">const_iterator</name></name></type> <name pos:line="82" pos:column="31">keyPos</name> <init pos:line="82" pos:column="38">= <expr><call><name><name pos:line="82" pos:column="40">props</name><op:operator pos:line="82" pos:column="45">-&gt;</op:operator><name pos:line="82" pos:column="47">find</name></name><argument_list pos:line="82" pos:column="51">(<argument><expr><call><name><name pos:line="82" pos:column="52">std</name><op:operator pos:line="82" pos:column="55">::</op:operator><name pos:line="82" pos:column="57">string</name></name><argument_list pos:line="82" pos:column="63">(<argument><expr><name pos:line="82" pos:column="64">key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">keyPos</name> <op:operator pos:line="83" pos:column="20">!=</op:operator> <call><name><name pos:line="83" pos:column="23">props</name><op:operator pos:line="83" pos:column="28">-&gt;</op:operator><name pos:line="83" pos:column="30">end</name></name><argument_list pos:line="83" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="83" pos:column="36"> <block pos:line="83" pos:column="37">{
		<return pos:line="84" pos:column="17">return <expr><call><name><name pos:line="84" pos:column="24">keyPos</name><op:operator pos:line="84" pos:column="30">-&gt;</op:operator><name pos:line="84" pos:column="32">second</name><op:operator pos:line="84" pos:column="38">.</op:operator><name pos:line="84" pos:column="39">c_str</name></name><argument_list pos:line="84" pos:column="44">()</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="85" pos:column="11">else <block pos:line="85" pos:column="16">{
		<return pos:line="86" pos:column="17">return <expr><lit:literal type="string" pos:line="86" pos:column="24">""</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="90" pos:column="1">// There is some inconsistency between GetExpanded("foo") and Expand("$(foo)").</comment>
<comment type="line" pos:line="91" pos:column="1">// A solution is to keep a stack of variables that have been expanded, so that</comment>
<comment type="line" pos:line="92" pos:column="1">// recursive expansions can be skipped.  For now I'll just use the C++ stack</comment>
<comment type="line" pos:line="93" pos:column="1">// for that, through a recursive function and a simple chain of pointers.</comment>

<struct pos:line="95" pos:column="1">struct <name pos:line="95" pos:column="8">VarChain</name> <block pos:line="95" pos:column="17">{<public type="default" pos:line="95" pos:column="18">
	<macro><name pos:line="96" pos:column="9">VarChain</name><argument_list pos:line="96" pos:column="17">(<argument pos:line="96" pos:column="18">const char *var_=NULL</argument>, <argument pos:line="96" pos:column="41">const VarChain *link_=NULL</argument>)</argument_list></macro>: <constructor><name pos:line="96" pos:column="70">var</name><parameter_list pos:line="96" pos:column="73">(<param><decl><type><name pos:line="96" pos:column="74">var_</name></type></decl></param>)</parameter_list><op:operator pos:line="96" pos:column="79">,</op:operator> <name pos:line="96" pos:column="81">link</name>(<name pos:line="96" pos:column="86">link_</name></constructor></public>)</block> <block pos:line="96" pos:column="93">{}</block>

	<decl><name pos:line="98" pos:column="9">bool</name> <name pos:line="98" pos:column="14">contains</name><argument_list pos:line="98" pos:column="22">(<argument><expr pos:line="98" pos:column="23">const <name pos:line="98" pos:column="29">char</name> <op:operator pos:line="98" pos:column="34">*</op:operator><name pos:line="98" pos:column="35">testVar</name></expr></argument>)</argument_list> const <argument_list pos:line="98" pos:column="50">{
		return <argument><expr><op:operator pos:line="99" pos:column="24">(</op:operator><name pos:line="99" pos:column="25">var</name> <op:operator pos:line="99" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="99" pos:column="32">(</op:operator><lit:literal type="number" pos:line="99" pos:column="33">0</lit:literal> <op:operator pos:line="99" pos:column="35">==</op:operator> <call><name pos:line="99" pos:column="38">strcmp</name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">var</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="50">testVar</name></expr></argument>)</argument_list></call><op:operator pos:line="99" pos:column="58">)</op:operator><op:operator pos:line="99" pos:column="59">)</op:operator>
			<op:operator pos:line="100" pos:column="25">||</op:operator> <op:operator pos:line="100" pos:column="28">(</op:operator><name pos:line="100" pos:column="29">link</name> <op:operator pos:line="100" pos:column="34">&amp;&amp;</op:operator> <call><name><name pos:line="100" pos:column="37">link</name><op:operator pos:line="100" pos:column="41">-&gt;</op:operator><name pos:line="100" pos:column="43">contains</name></name><argument_list pos:line="100" pos:column="51">(<argument><expr><name pos:line="100" pos:column="52">testVar</name></expr></argument>)</argument_list></call><op:operator pos:line="100" pos:column="60">)</op:operator></expr></argument>;
	}</argument_list>

	const <name pos:line="103" pos:column="15">char</name> <type:modifier pos:line="103" pos:column="20">*</type:modifier><name pos:line="103" pos:column="21">var</name></decl>;</struct>
	<decl_stmt><decl><type><specifier pos:line="104" pos:column="9">const</specifier> <name pos:line="104" pos:column="15">VarChain</name> <type:modifier pos:line="104" pos:column="24">*</type:modifier></type><name pos:line="104" pos:column="25">link</name></decl>;</decl_stmt>
};

<function><type><specifier pos:line="107" pos:column="1">static</specifier> <name pos:line="107" pos:column="8">int</name></type> <name pos:line="107" pos:column="12">ExpandAllInPlace</name><parameter_list pos:line="107" pos:column="28">(<param><decl><type><specifier pos:line="107" pos:column="29">const</specifier> <name pos:line="107" pos:column="35">PropSetSimple</name> <type:modifier pos:line="107" pos:column="49">&amp;</type:modifier></type><name pos:line="107" pos:column="50">props</name></decl></param>, <param><decl><type><name><name pos:line="107" pos:column="57">std</name><op:operator pos:line="107" pos:column="60">::</op:operator><name pos:line="107" pos:column="62">string</name></name> <type:modifier pos:line="107" pos:column="69">&amp;</type:modifier></type><name pos:line="107" pos:column="70">withVars</name></decl></param>, <param><decl><type><name pos:line="107" pos:column="80">int</name></type> <name pos:line="107" pos:column="84">maxExpands</name></decl></param>, <param><decl><type><specifier pos:line="107" pos:column="96">const</specifier> <name pos:line="107" pos:column="102">VarChain</name> <type:modifier pos:line="107" pos:column="111">&amp;</type:modifier></type><name pos:line="107" pos:column="112">blankVars</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="123">{
	<decl_stmt><decl><type><name pos:line="108" pos:column="9">size_t</name></type> <name pos:line="108" pos:column="16">varStart</name> <init pos:line="108" pos:column="25">= <expr><call><name><name pos:line="108" pos:column="27">withVars</name><op:operator pos:line="108" pos:column="35">.</op:operator><name pos:line="108" pos:column="36">find</name></name><argument_list pos:line="108" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="41">"$("</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="109" pos:column="9">while <condition pos:line="109" pos:column="15">(<expr><op:operator pos:line="109" pos:column="16">(</op:operator><name pos:line="109" pos:column="17">varStart</name> <op:operator pos:line="109" pos:column="26">!=</op:operator> <name><name pos:line="109" pos:column="29">std</name><op:operator pos:line="109" pos:column="32">::</op:operator><name pos:line="109" pos:column="34">string</name><op:operator pos:line="109" pos:column="40">::</op:operator><name pos:line="109" pos:column="42">npos</name></name><op:operator pos:line="109" pos:column="46">)</op:operator> <op:operator pos:line="109" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="109" pos:column="51">(</op:operator><name pos:line="109" pos:column="52">maxExpands</name> <op:operator pos:line="109" pos:column="63">&gt;</op:operator> <lit:literal type="number" pos:line="109" pos:column="65">0</lit:literal><op:operator pos:line="109" pos:column="66">)</op:operator></expr>)</condition> <block pos:line="109" pos:column="69">{
		<decl_stmt><decl><type><name pos:line="110" pos:column="17">size_t</name></type> <name pos:line="110" pos:column="24">varEnd</name> <init pos:line="110" pos:column="31">= <expr><call><name><name pos:line="110" pos:column="33">withVars</name><op:operator pos:line="110" pos:column="41">.</op:operator><name pos:line="110" pos:column="42">find</name></name><argument_list pos:line="110" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="47">")"</lit:literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="52">varStart</name><op:operator pos:line="110" pos:column="60">+</op:operator><lit:literal type="number" pos:line="110" pos:column="61">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="111" pos:column="17">if <condition pos:line="111" pos:column="20">(<expr><name pos:line="111" pos:column="21">varEnd</name> <op:operator pos:line="111" pos:column="28">==</op:operator> <name><name pos:line="111" pos:column="31">std</name><op:operator pos:line="111" pos:column="34">::</op:operator><name pos:line="111" pos:column="36">string</name><op:operator pos:line="111" pos:column="42">::</op:operator><name pos:line="111" pos:column="44">npos</name></name></expr>)</condition><then pos:line="111" pos:column="49"> <block pos:line="111" pos:column="50">{
			<break pos:line="112" pos:column="25">break;</break>
		}</block></then></if>

		<comment type="line" pos:line="115" pos:column="17">// For consistency, when we see '$(ab$(cde))', expand the inner variable first,</comment>
		<comment type="line" pos:line="116" pos:column="17">// regardless whether there is actually a degenerate variable named 'ab$(cde'.</comment>
		<decl_stmt><decl><type><name pos:line="117" pos:column="17">size_t</name></type> <name pos:line="117" pos:column="24">innerVarStart</name> <init pos:line="117" pos:column="38">= <expr><call><name><name pos:line="117" pos:column="40">withVars</name><op:operator pos:line="117" pos:column="48">.</op:operator><name pos:line="117" pos:column="49">find</name></name><argument_list pos:line="117" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="54">"$("</lit:literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="60">varStart</name><op:operator pos:line="117" pos:column="68">+</op:operator><lit:literal type="number" pos:line="117" pos:column="69">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:line="118" pos:column="17">while <condition pos:line="118" pos:column="23">(<expr><op:operator pos:line="118" pos:column="24">(</op:operator><name pos:line="118" pos:column="25">innerVarStart</name> <op:operator pos:line="118" pos:column="39">!=</op:operator> <name><name pos:line="118" pos:column="42">std</name><op:operator pos:line="118" pos:column="45">::</op:operator><name pos:line="118" pos:column="47">string</name><op:operator pos:line="118" pos:column="53">::</op:operator><name pos:line="118" pos:column="55">npos</name></name><op:operator pos:line="118" pos:column="59">)</op:operator> <op:operator pos:line="118" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="118" pos:column="64">(</op:operator><name pos:line="118" pos:column="65">innerVarStart</name> <op:operator pos:line="118" pos:column="79">&gt;</op:operator> <name pos:line="118" pos:column="81">varStart</name><op:operator pos:line="118" pos:column="89">)</op:operator> <op:operator pos:line="118" pos:column="91">&amp;&amp;</op:operator> <op:operator pos:line="118" pos:column="94">(</op:operator><name pos:line="118" pos:column="95">innerVarStart</name> <op:operator pos:line="118" pos:column="109">&lt;</op:operator> <name pos:line="118" pos:column="111">varEnd</name><op:operator pos:line="118" pos:column="117">)</op:operator></expr>)</condition> <block pos:line="118" pos:column="120">{
			<expr_stmt><expr><name pos:line="119" pos:column="25">varStart</name> <op:operator pos:line="119" pos:column="34">=</op:operator> <name pos:line="119" pos:column="36">innerVarStart</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="120" pos:column="25">innerVarStart</name> <op:operator pos:line="120" pos:column="39">=</op:operator> <call><name><name pos:line="120" pos:column="41">withVars</name><op:operator pos:line="120" pos:column="49">.</op:operator><name pos:line="120" pos:column="50">find</name></name><argument_list pos:line="120" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="55">"$("</lit:literal></expr></argument>, <argument><expr><name pos:line="120" pos:column="61">varStart</name><op:operator pos:line="120" pos:column="69">+</op:operator><lit:literal type="number" pos:line="120" pos:column="70">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<decl_stmt><decl><type><name><name pos:line="123" pos:column="17">std</name><op:operator pos:line="123" pos:column="20">::</op:operator><name pos:line="123" pos:column="22">string</name></name></type> <name pos:line="123" pos:column="29">var</name><argument_list pos:line="123" pos:column="32">(<argument><expr><call><name><name pos:line="123" pos:column="33">withVars</name><op:operator pos:line="123" pos:column="41">.</op:operator><name pos:line="123" pos:column="42">c_str</name></name><argument_list pos:line="123" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="123" pos:column="51">varStart</name> <op:operator pos:line="123" pos:column="60">+</op:operator> <lit:literal type="number" pos:line="123" pos:column="62">2</lit:literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="65">varEnd</name> <op:operator pos:line="123" pos:column="72">-</op:operator> <name pos:line="123" pos:column="74">varStart</name> <op:operator pos:line="123" pos:column="83">-</op:operator> <lit:literal type="number" pos:line="123" pos:column="85">2</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="124" pos:column="17">std</name><op:operator pos:line="124" pos:column="20">::</op:operator><name pos:line="124" pos:column="22">string</name></name></type> <name pos:line="124" pos:column="29">val</name> <init pos:line="124" pos:column="33">= <expr><call><name><name pos:line="124" pos:column="35">props</name><op:operator pos:line="124" pos:column="40">.</op:operator><name pos:line="124" pos:column="41">Get</name></name><argument_list pos:line="124" pos:column="44">(<argument><expr><call><name><name pos:line="124" pos:column="45">var</name><op:operator pos:line="124" pos:column="48">.</op:operator><name pos:line="124" pos:column="49">c_str</name></name><argument_list pos:line="124" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="126" pos:column="17">if <condition pos:line="126" pos:column="20">(<expr><call><name><name pos:line="126" pos:column="21">blankVars</name><op:operator pos:line="126" pos:column="30">.</op:operator><name pos:line="126" pos:column="31">contains</name></name><argument_list pos:line="126" pos:column="39">(<argument><expr><call><name><name pos:line="126" pos:column="40">var</name><op:operator pos:line="126" pos:column="43">.</op:operator><name pos:line="126" pos:column="44">c_str</name></name><argument_list pos:line="126" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="126" pos:column="53"> <block pos:line="126" pos:column="54">{
			<expr_stmt><expr><name pos:line="127" pos:column="25">val</name> <op:operator pos:line="127" pos:column="29">=</op:operator> <lit:literal type="string" pos:line="127" pos:column="31">""</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="127" pos:column="35">// treat blankVar as an empty string (e.g. to block self-reference)</comment>
		}</block></then></if>

		<if pos:line="130" pos:column="17">if <condition pos:line="130" pos:column="20">(<expr><op:operator pos:line="130" pos:column="21">--</op:operator><name pos:line="130" pos:column="23">maxExpands</name> <op:operator pos:line="130" pos:column="34">&gt;=</op:operator> <lit:literal type="number" pos:line="130" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="130" pos:column="39"> <block pos:line="130" pos:column="40">{
			<expr_stmt><expr><name pos:line="131" pos:column="25">maxExpands</name> <op:operator pos:line="131" pos:column="36">=</op:operator> <call><name pos:line="131" pos:column="38">ExpandAllInPlace</name><argument_list pos:line="131" pos:column="54">(<argument><expr><name pos:line="131" pos:column="55">props</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="62">val</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="67">maxExpands</name></expr></argument>, <argument><expr><call><name pos:line="131" pos:column="79">VarChain</name><argument_list pos:line="131" pos:column="87">(<argument><expr><call><name><name pos:line="131" pos:column="88">var</name><op:operator pos:line="131" pos:column="91">.</op:operator><name pos:line="131" pos:column="92">c_str</name></name><argument_list pos:line="131" pos:column="97">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="131" pos:column="101">&amp;</op:operator><name pos:line="131" pos:column="102">blankVars</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name><name pos:line="134" pos:column="17">withVars</name><op:operator pos:line="134" pos:column="25">.</op:operator><name pos:line="134" pos:column="26">erase</name></name><argument_list pos:line="134" pos:column="31">(<argument><expr><name pos:line="134" pos:column="32">varStart</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="42">varEnd</name><op:operator pos:line="134" pos:column="48">-</op:operator><name pos:line="134" pos:column="49">varStart</name><op:operator pos:line="134" pos:column="57">+</op:operator><lit:literal type="number" pos:line="134" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="135" pos:column="17">withVars</name><op:operator pos:line="135" pos:column="25">.</op:operator><name pos:line="135" pos:column="26">insert</name></name><argument_list pos:line="135" pos:column="32">(<argument><expr><name pos:line="135" pos:column="33">varStart</name></expr></argument>, <argument><expr><call><name><name pos:line="135" pos:column="43">val</name><op:operator pos:line="135" pos:column="46">.</op:operator><name pos:line="135" pos:column="47">c_str</name></name><argument_list pos:line="135" pos:column="52">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="135" pos:column="56">val</name><op:operator pos:line="135" pos:column="59">.</op:operator><name pos:line="135" pos:column="60">length</name></name><argument_list pos:line="135" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="137" pos:column="17">varStart</name> <op:operator pos:line="137" pos:column="26">=</op:operator> <call><name><name pos:line="137" pos:column="28">withVars</name><op:operator pos:line="137" pos:column="36">.</op:operator><name pos:line="137" pos:column="37">find</name></name><argument_list pos:line="137" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="42">"$("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<return pos:line="140" pos:column="9">return <expr><name pos:line="140" pos:column="16">maxExpands</name></expr>;</return>
}</block></function>

<function><type><name pos:line="143" pos:column="1">char</name> <type:modifier pos:line="143" pos:column="6">*</type:modifier></type><name><name pos:line="143" pos:column="7">PropSetSimple</name><op:operator pos:line="143" pos:column="20">::</op:operator><name pos:line="143" pos:column="22">Expanded</name></name><parameter_list pos:line="143" pos:column="30">(<param><decl><type><specifier pos:line="143" pos:column="31">const</specifier> <name pos:line="143" pos:column="37">char</name> <type:modifier pos:line="143" pos:column="42">*</type:modifier></type><name pos:line="143" pos:column="43">key</name></decl></param>)</parameter_list> <specifier pos:line="143" pos:column="48">const</specifier> <block pos:line="143" pos:column="54">{
	<decl_stmt><decl><type><name><name pos:line="144" pos:column="9">std</name><op:operator pos:line="144" pos:column="12">::</op:operator><name pos:line="144" pos:column="14">string</name></name></type> <name pos:line="144" pos:column="21">val</name> <init pos:line="144" pos:column="25">= <expr><call><name pos:line="144" pos:column="27">Get</name><argument_list pos:line="144" pos:column="30">(<argument><expr><name pos:line="144" pos:column="31">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="145" pos:column="9">ExpandAllInPlace</name><argument_list pos:line="145" pos:column="25">(<argument><expr><op:operator pos:line="145" pos:column="26">*</op:operator><name pos:line="145" pos:column="27">this</name></expr></argument>, <argument><expr><name pos:line="145" pos:column="33">val</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="145" pos:column="38">100</lit:literal></expr></argument>, <argument><expr><call><name pos:line="145" pos:column="43">VarChain</name><argument_list pos:line="145" pos:column="51">(<argument><expr><name pos:line="145" pos:column="52">key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="146" pos:column="9">char</name> <type:modifier pos:line="146" pos:column="14">*</type:modifier></type><name pos:line="146" pos:column="15">ret</name> <init pos:line="146" pos:column="19">= <expr><op:operator pos:line="146" pos:column="21">new</op:operator> <name><name pos:line="146" pos:column="25">char</name> <index pos:line="146" pos:column="30">[<expr><call><name><name pos:line="146" pos:column="31">val</name><op:operator pos:line="146" pos:column="34">.</op:operator><name pos:line="146" pos:column="35">size</name></name><argument_list pos:line="146" pos:column="39">()</argument_list></call> <op:operator pos:line="146" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="146" pos:column="44">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="147" pos:column="9">strcpy</name><argument_list pos:line="147" pos:column="15">(<argument><expr><name pos:line="147" pos:column="16">ret</name></expr></argument>, <argument><expr><call><name><name pos:line="147" pos:column="21">val</name><op:operator pos:line="147" pos:column="24">.</op:operator><name pos:line="147" pos:column="25">c_str</name></name><argument_list pos:line="147" pos:column="30">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="148" pos:column="9">return <expr><name pos:line="148" pos:column="16">ret</name></expr>;</return>
}</block></function>

<function><type><name pos:line="151" pos:column="1">int</name></type> <name><name pos:line="151" pos:column="5">PropSetSimple</name><op:operator pos:line="151" pos:column="18">::</op:operator><name pos:line="151" pos:column="20">GetExpanded</name></name><parameter_list pos:line="151" pos:column="31">(<param><decl><type><specifier pos:line="151" pos:column="32">const</specifier> <name pos:line="151" pos:column="38">char</name> <type:modifier pos:line="151" pos:column="43">*</type:modifier></type><name pos:line="151" pos:column="44">key</name></decl></param>, <param><decl><type><name pos:line="151" pos:column="49">char</name> <type:modifier pos:line="151" pos:column="54">*</type:modifier></type><name pos:line="151" pos:column="55">result</name></decl></param>)</parameter_list> <specifier pos:line="151" pos:column="63">const</specifier> <block pos:line="151" pos:column="69">{
	<decl_stmt><decl><type><name pos:line="152" pos:column="9">char</name> <type:modifier pos:line="152" pos:column="14">*</type:modifier></type><name pos:line="152" pos:column="15">val</name> <init pos:line="152" pos:column="19">= <expr><call><name pos:line="152" pos:column="21">Expanded</name><argument_list pos:line="152" pos:column="29">(<argument><expr><name pos:line="152" pos:column="30">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="153" pos:column="9">const</specifier> <name pos:line="153" pos:column="15">int</name></type> <name pos:line="153" pos:column="19">n</name> <init pos:line="153" pos:column="21">= <expr><call><name pos:line="153" pos:column="23">strlen</name><argument_list pos:line="153" pos:column="29">(<argument><expr><name pos:line="153" pos:column="30">val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><name pos:line="154" pos:column="13">result</name></expr>)</condition><then pos:line="154" pos:column="20"> <block pos:line="154" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="155" pos:column="17">strcpy</name><argument_list pos:line="155" pos:column="23">(<argument><expr><name pos:line="155" pos:column="24">result</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="32">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><op:operator pos:line="157" pos:column="9">delete</op:operator> <index pos:line="157" pos:column="16">[]</index><name pos:line="157" pos:column="18">val</name></expr>;</expr_stmt>
	<return pos:line="158" pos:column="9">return <expr><name pos:line="158" pos:column="16">n</name></expr>;</return>	<comment type="line" pos:line="158" pos:column="25">// Not including NUL</comment>
}</block></function>

<function><type><name pos:line="161" pos:column="1">int</name></type> <name><name pos:line="161" pos:column="5">PropSetSimple</name><op:operator pos:line="161" pos:column="18">::</op:operator><name pos:line="161" pos:column="20">GetInt</name></name><parameter_list pos:line="161" pos:column="26">(<param><decl><type><specifier pos:line="161" pos:column="27">const</specifier> <name pos:line="161" pos:column="33">char</name> <type:modifier pos:line="161" pos:column="38">*</type:modifier></type><name pos:line="161" pos:column="39">key</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="44">int</name></type> <name pos:line="161" pos:column="48">defaultValue</name></decl></param>)</parameter_list> <specifier pos:line="161" pos:column="62">const</specifier> <block pos:line="161" pos:column="68">{
	<decl_stmt><decl><type><name pos:line="162" pos:column="9">char</name> <type:modifier pos:line="162" pos:column="14">*</type:modifier></type><name pos:line="162" pos:column="15">val</name> <init pos:line="162" pos:column="19">= <expr><call><name pos:line="162" pos:column="21">Expanded</name><argument_list pos:line="162" pos:column="29">(<argument><expr><name pos:line="162" pos:column="30">key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="163" pos:column="9">if <condition pos:line="163" pos:column="12">(<expr><name pos:line="163" pos:column="13">val</name></expr>)</condition><then pos:line="163" pos:column="17"> <block pos:line="163" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="164" pos:column="17">int</name></type> <name pos:line="164" pos:column="21">retVal</name> <init pos:line="164" pos:column="28">= <expr><name><name pos:line="164" pos:column="30">val</name><index pos:line="164" pos:column="33">[<expr><lit:literal type="number" pos:line="164" pos:column="34">0</lit:literal></expr>]</index></name> <op:operator pos:line="164" pos:column="37">?</op:operator> <call><name pos:line="164" pos:column="39">atoi</name><argument_list pos:line="164" pos:column="43">(<argument><expr><name pos:line="164" pos:column="44">val</name></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="49">:</op:operator> <name pos:line="164" pos:column="51">defaultValue</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><op:operator pos:line="165" pos:column="17">delete</op:operator> <index pos:line="165" pos:column="24">[]</index><name pos:line="165" pos:column="26">val</name></expr>;</expr_stmt>
		<return pos:line="166" pos:column="17">return <expr><name pos:line="166" pos:column="24">retVal</name></expr>;</return>
	}</block></then></if>
	<return pos:line="168" pos:column="9">return <expr><name pos:line="168" pos:column="16">defaultValue</name></expr>;</return>
}</block></function>
</unit>
