<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\lesDlgs.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">SIZE_DLG_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">SIZE_DLG_H</name></cpp:macro></cpp:define>

<decl_stmt><decl><type><specifier pos:line="32" pos:column="1">const</specifier> <name pos:line="32" pos:column="7">int</name></type> <name pos:line="32" pos:column="11">DEFAULT_NB_NUMBER</name> <init pos:line="32" pos:column="29">= <expr><lit:literal type="number" pos:line="32" pos:column="31">2</lit:literal></expr></init></decl>;</decl_stmt>
<class pos:line="33" pos:column="1">class <name pos:line="33" pos:column="7">ValueDlg</name> <super pos:line="33" pos:column="16">: <specifier pos:line="33" pos:column="18">public</specifier> <name pos:line="33" pos:column="25">StaticDialog</name></super>
<block pos:line="34" pos:column="1">{<private type="default" pos:line="34" pos:column="2">
</private><public pos:line="35" pos:column="1">public :
        <constructor><name pos:line="36" pos:column="9">ValueDlg</name><parameter_list pos:line="36" pos:column="17">()</parameter_list> <member_list pos:line="36" pos:column="20">: <call><name pos:line="36" pos:column="22">StaticDialog</name><argument_list pos:line="36" pos:column="34">()</argument_list></call><op:operator pos:line="36" pos:column="36">,</op:operator> <call><name pos:line="36" pos:column="38">_nbNumber</name><argument_list pos:line="36" pos:column="47">(<argument><expr><name pos:line="36" pos:column="48">DEFAULT_NB_NUMBER</name></expr></argument>)</argument_list></call> </member_list><block pos:line="36" pos:column="67">{}</block></constructor><empty_stmt pos:line="36" pos:column="69">;</empty_stmt>
        <function_decl><type><name pos:line="37" pos:column="9">void</name></type> <name pos:line="37" pos:column="14">init</name><parameter_list pos:line="37" pos:column="18">(<param><decl><type><name pos:line="37" pos:column="19">HINSTANCE</name></type> <name pos:line="37" pos:column="29">hInst</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="36">HWND</name></type> <name pos:line="37" pos:column="41">parent</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="49">int</name></type> <name pos:line="37" pos:column="53">valueToSet</name></decl></param>, <param><decl><type><specifier pos:line="37" pos:column="65">const</specifier> <name pos:line="37" pos:column="71">TCHAR</name> <type:modifier pos:line="37" pos:column="77">*</type:modifier></type><name pos:line="37" pos:column="78">text</name></decl></param>)</parameter_list>;</function_decl>
        <function_decl><type><name pos:line="38" pos:column="9">int</name></type> <name pos:line="38" pos:column="13">doDialog</name><parameter_list pos:line="38" pos:column="21">(<param><decl><type><name pos:line="38" pos:column="22">POINT</name></type> <name pos:line="38" pos:column="28">p</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="31">bool</name></type> <name pos:line="38" pos:column="36">isRTL</name> <init pos:line="38" pos:column="42">= <expr><lit:literal type="boolean" pos:line="38" pos:column="44">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
		<function><type><name pos:line="39" pos:column="17">void</name></type> <name pos:line="39" pos:column="22">setNBNumber</name><parameter_list pos:line="39" pos:column="33">(<param><decl><type><name pos:line="39" pos:column="34">int</name></type> <name pos:line="39" pos:column="38">nbNumber</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="48">{
			<if pos:line="40" pos:column="25">if <condition pos:line="40" pos:column="28">(<expr><name pos:line="40" pos:column="29">nbNumber</name> <op:operator pos:line="40" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="40" pos:column="40">0</lit:literal></expr>)</condition><then pos:line="40" pos:column="42">
				<expr_stmt><expr><name pos:line="41" pos:column="33">_nbNumber</name> <op:operator pos:line="41" pos:column="43">=</op:operator> <name pos:line="41" pos:column="45">nbNumber</name></expr>;</expr_stmt></then></if>
		}</block></function><empty_stmt pos:line="42" pos:column="18">;</empty_stmt>
		<function_decl><type><name pos:line="43" pos:column="17">int</name></type> <name pos:line="43" pos:column="21">reSizeValueBox</name><parameter_list pos:line="43" pos:column="35">()</parameter_list>;</function_decl>
		<function><type><name pos:line="44" pos:column="17">void</name></type> <name pos:line="44" pos:column="22">destroy</name><parameter_list pos:line="44" pos:column="29">()</parameter_list> <block pos:line="44" pos:column="32">{}</block></function><empty_stmt pos:line="44" pos:column="34">;</empty_stmt>

</public><protected pos:line="46" pos:column="1">protected :
	<function_decl><type><name pos:line="47" pos:column="9">BOOL</name> <name pos:line="47" pos:column="14">CALLBACK</name></type> <name pos:line="47" pos:column="23">run_dlgProc</name><parameter_list pos:line="47" pos:column="34">(<param><decl><type><name pos:line="47" pos:column="35">UINT</name></type> <name pos:line="47" pos:column="40">Message</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="49">WPARAM</name></type> <name pos:line="47" pos:column="56">wParam</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="64">LPARAM</name></type></decl></param>)</parameter_list>;</function_decl>

</protected><private pos:line="49" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="50" pos:column="9">int</name></type> <name pos:line="50" pos:column="13">_nbNumber</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="51" pos:column="5">int</name></type> <name pos:line="51" pos:column="9">_defaultValue</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">generic_string</name></type> <name pos:line="52" pos:column="24">_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">POINT</name></type> <name pos:line="53" pos:column="15">_p</name></decl>;</decl_stmt>
</private>}</block>;</class>

<comment type="line" pos:line="56" pos:column="1">// 0 : sans fullscreen</comment>
<comment type="line" pos:line="57" pos:column="1">// 1 : fullscreen</comment>
<comment type="line" pos:line="58" pos:column="1">// 2 : postit</comment>
<decl_stmt><decl><type><specifier pos:line="59" pos:column="1">const</specifier> <name pos:line="59" pos:column="7">int</name></type> <name pos:line="59" pos:column="11">buttonStatus_nada</name> <init pos:line="59" pos:column="29">= <expr><lit:literal type="number" pos:line="59" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="60" pos:column="1">const</specifier> <name pos:line="60" pos:column="7">int</name></type> <name pos:line="60" pos:column="11">buttonStatus_fullscreen</name> <init pos:line="60" pos:column="35">= <expr><lit:literal type="number" pos:line="60" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="61" pos:column="1">const</specifier> <name pos:line="61" pos:column="7">int</name></type> <name pos:line="61" pos:column="11">buttonStatus_postit</name> <init pos:line="61" pos:column="31">= <expr><lit:literal type="number" pos:line="61" pos:column="33">2</lit:literal></expr></init></decl>;</decl_stmt>

<class pos:line="63" pos:column="1">class <name pos:line="63" pos:column="7">ButtonDlg</name> <super pos:line="63" pos:column="17">: <specifier pos:line="63" pos:column="19">public</specifier> <name pos:line="63" pos:column="26">StaticDialog</name></super>
<block pos:line="64" pos:column="1">{<private type="default" pos:line="64" pos:column="2">
</private><public pos:line="65" pos:column="1">public :
    <constructor><name pos:line="66" pos:column="5">ButtonDlg</name><parameter_list pos:line="66" pos:column="14">()</parameter_list> <member_list pos:line="66" pos:column="17">: <call><name pos:line="66" pos:column="19">StaticDialog</name><argument_list pos:line="66" pos:column="31">()</argument_list></call><op:operator pos:line="66" pos:column="33">,</op:operator> <call><name pos:line="66" pos:column="35">_buttonStatus</name><argument_list pos:line="66" pos:column="48">(<argument><expr><name pos:line="66" pos:column="49">buttonStatus_nada</name></expr></argument>)</argument_list></call> </member_list><block pos:line="66" pos:column="68">{}</block></constructor><empty_stmt pos:line="66" pos:column="70">;</empty_stmt>
        <function><type><name pos:line="67" pos:column="9">void</name></type> <name pos:line="67" pos:column="14">init</name><parameter_list pos:line="67" pos:column="18">(<param><decl><type><name pos:line="67" pos:column="19">HINSTANCE</name></type> <name pos:line="67" pos:column="29">hInst</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="36">HWND</name></type> <name pos:line="67" pos:column="41">parent</name></decl></param>)</parameter_list><block pos:line="67" pos:column="48">{
        	<expr_stmt><expr><call><name><name pos:line="68" pos:column="17">Window</name><op:operator pos:line="68" pos:column="23">::</op:operator><name pos:line="68" pos:column="25">init</name></name><argument_list pos:line="68" pos:column="29">(<argument><expr><name pos:line="68" pos:column="30">hInst</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="37">parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function><empty_stmt pos:line="69" pos:column="10">;</empty_stmt>

        <function_decl><type><name pos:line="71" pos:column="9">void</name></type> <name pos:line="71" pos:column="14">doDialog</name><parameter_list pos:line="71" pos:column="22">(<param><decl><type><name pos:line="71" pos:column="23">bool</name></type> <name pos:line="71" pos:column="28">isRTL</name> <init pos:line="71" pos:column="34">= <expr><lit:literal type="boolean" pos:line="71" pos:column="36">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
		<function><type><name pos:line="72" pos:column="17">void</name></type> <name pos:line="72" pos:column="22">destroy</name><parameter_list pos:line="72" pos:column="29">()</parameter_list> <block pos:line="72" pos:column="32">{}</block></function><empty_stmt pos:line="72" pos:column="34">;</empty_stmt>
        <function><type><name pos:line="73" pos:column="9">int</name></type> <name pos:line="73" pos:column="13">getButtonStatus</name><parameter_list pos:line="73" pos:column="28">()</parameter_list> <specifier pos:line="73" pos:column="31">const</specifier> <block pos:line="73" pos:column="37">{
            <return pos:line="74" pos:column="13">return <expr><name pos:line="74" pos:column="20">_buttonStatus</name></expr>;</return>
        }</block></function><empty_stmt pos:line="75" pos:column="10">;</empty_stmt>
        <function><type><name pos:line="76" pos:column="9">void</name></type> <name pos:line="76" pos:column="14">setButtonStatus</name><parameter_list pos:line="76" pos:column="29">(<param><decl><type><name pos:line="76" pos:column="30">int</name></type> <name pos:line="76" pos:column="34">buttonStatus</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="48">{
            <expr_stmt><expr><name pos:line="77" pos:column="13">_buttonStatus</name> <op:operator pos:line="77" pos:column="27">=</op:operator> <name pos:line="77" pos:column="29">buttonStatus</name></expr>;</expr_stmt>
        }</block></function><empty_stmt pos:line="78" pos:column="10">;</empty_stmt>

        <function><type><name pos:line="80" pos:column="9">void</name></type> <name pos:line="80" pos:column="14">display</name><parameter_list pos:line="80" pos:column="21">(<param><decl><type><name pos:line="80" pos:column="22">bool</name></type> <name pos:line="80" pos:column="27">toShow</name> <init pos:line="80" pos:column="34">= <expr><lit:literal type="boolean" pos:line="80" pos:column="36">true</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="80" pos:column="42">const</specifier> <block pos:line="80" pos:column="48">{
            <decl_stmt><decl><type><name pos:line="81" pos:column="13">int</name></type> <name pos:line="81" pos:column="17">cmdToShow</name> <init pos:line="81" pos:column="27">= <expr><name pos:line="81" pos:column="29">toShow</name><op:operator pos:line="81" pos:column="35">?</op:operator><name pos:line="81" pos:column="36">SW_SHOW</name><op:operator pos:line="81" pos:column="43">:</op:operator><name pos:line="81" pos:column="44">SW_HIDE</name></expr></init></decl>;</decl_stmt>
            <if pos:line="82" pos:column="13">if <condition pos:line="82" pos:column="16">(<expr><op:operator pos:line="82" pos:column="17">!</op:operator><name pos:line="82" pos:column="18">toShow</name></expr>)</condition><then pos:line="82" pos:column="25">
            <block pos:line="83" pos:column="13">{
                <expr_stmt><expr><name pos:line="84" pos:column="17">cmdToShow</name> <op:operator pos:line="84" pos:column="27">=</op:operator> <op:operator pos:line="84" pos:column="29">(</op:operator><name pos:line="84" pos:column="30">_buttonStatus</name> <op:operator pos:line="84" pos:column="44">!=</op:operator> <name pos:line="84" pos:column="47">buttonStatus_nada</name><op:operator pos:line="84" pos:column="64">)</op:operator><op:operator pos:line="84" pos:column="65">?</op:operator><name pos:line="84" pos:column="66">SW_SHOW</name><op:operator pos:line="84" pos:column="73">:</op:operator><name pos:line="84" pos:column="74">SW_HIDE</name></expr>;</expr_stmt> 
            }</block></then></if>
		    <expr_stmt><expr><call><name><op:operator pos:line="86" pos:column="21">::</op:operator><name pos:line="86" pos:column="23">ShowWindow</name></name><argument_list pos:line="86" pos:column="33">(<argument><expr><name pos:line="86" pos:column="34">_hSelf</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="42">cmdToShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block></function><empty_stmt pos:line="87" pos:column="14">;</empty_stmt>

</public><protected pos:line="89" pos:column="1">protected :
	<function_decl><type><name pos:line="90" pos:column="9">BOOL</name> <name pos:line="90" pos:column="14">CALLBACK</name></type> <name pos:line="90" pos:column="23">run_dlgProc</name><parameter_list pos:line="90" pos:column="34">(<param><decl><type><name pos:line="90" pos:column="35">UINT</name></type> <name pos:line="90" pos:column="40">Message</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="49">WPARAM</name></type> <name pos:line="90" pos:column="56">wParam</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="64">LPARAM</name></type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name pos:line="91" pos:column="5">int</name></type> <name pos:line="91" pos:column="9">_buttonStatus</name></decl>;</decl_stmt>

</protected>}</block>;</class>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="94" pos:column="8">//TABSIZE_DLG_H</comment>
</unit>
