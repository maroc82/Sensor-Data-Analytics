<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\shortcut\RunMacroDlg.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<comment type="line" pos:line="28" pos:column="1">// created by Daniel Volk mordorpost@volkarts.com</comment>

<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"RunMacroDlg.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Notepad_plus_msgs.h"</lit:literal></cpp:file></cpp:include>

<function><type><name pos:line="35" pos:column="1">void</name></type> <name><name pos:line="35" pos:column="6">RunMacroDlg</name><op:operator pos:line="35" pos:column="17">::</op:operator><name pos:line="35" pos:column="19">initMacroList</name></name><parameter_list pos:line="35" pos:column="32">()</parameter_list>
<block pos:line="36" pos:column="1">{
	<if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><op:operator pos:line="37" pos:column="13">!</op:operator><call><name pos:line="37" pos:column="14">isCreated</name><argument_list pos:line="37" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="37" pos:column="26"> <return pos:line="37" pos:column="27">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="39" pos:column="9">NppParameters</name> <type:modifier pos:line="39" pos:column="23">*</type:modifier></type><name pos:line="39" pos:column="24">pNppParam</name> <init pos:line="39" pos:column="34">= <expr><call><name><name pos:line="39" pos:column="36">NppParameters</name><op:operator pos:line="39" pos:column="49">::</op:operator><name pos:line="39" pos:column="51">getInstance</name></name><argument_list pos:line="39" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="40" pos:column="9">vector</name><argument_list pos:line="40" pos:column="15">&lt;<argument><expr><name pos:line="40" pos:column="16">MacroShortcut</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="40" pos:column="31">&amp;</type:modifier></type> <name pos:line="40" pos:column="33">macroList</name> <init pos:line="40" pos:column="43">= <expr><call><name><name pos:line="40" pos:column="45">pNppParam</name><op:operator pos:line="40" pos:column="54">-&gt;</op:operator><name pos:line="40" pos:column="56">getMacroList</name></name><argument_list pos:line="40" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="42" pos:column="9">::</op:operator><name pos:line="42" pos:column="11">SendDlgItemMessage</name></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="38">IDC_MACRO_COMBO</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="55">CB_RESETCONTENT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="42" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="42" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name><op:operator pos:line="44" pos:column="13">::</op:operator><name pos:line="44" pos:column="15">SendMessage</name></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">_hParent</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="37">WM_GETCURRENTMACROSTATUS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="69">==</op:operator> <name pos:line="44" pos:column="72">MACRO_RECORDING_HAS_STOPPED</name></expr>)</condition><then pos:line="44" pos:column="100">
		<expr_stmt><expr><call><name><op:operator pos:line="45" pos:column="17">::</op:operator><name pos:line="45" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="45" pos:column="37">(<argument><expr><name pos:line="45" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="46">IDC_MACRO_COMBO</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="63">CB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="45" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="45" pos:column="80">(</op:operator><name pos:line="45" pos:column="81">LPARAM</name><op:operator pos:line="45" pos:column="87">)</op:operator><call><name pos:line="45" pos:column="88">TEXT</name><argument_list pos:line="45" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="93">"Current recorded macro"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<for pos:line="47" pos:column="9">for (<init><decl><type><name pos:line="47" pos:column="14">size_t</name></type> <name pos:line="47" pos:column="21">i</name> <init pos:line="47" pos:column="23">= <expr><lit:literal type="number" pos:line="47" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="47" pos:column="29">i</name> <op:operator pos:line="47" pos:column="31">&lt;</op:operator> <call><name><name pos:line="47" pos:column="33">macroList</name><op:operator pos:line="47" pos:column="42">.</op:operator><name pos:line="47" pos:column="43">size</name></name><argument_list pos:line="47" pos:column="47">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="47" pos:column="52">i</name><op:operator pos:line="47" pos:column="53">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name><op:operator pos:line="48" pos:column="17">::</op:operator><name pos:line="48" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="46">IDC_MACRO_COMBO</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="63">CB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="48" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="48" pos:column="80">(</op:operator><name pos:line="48" pos:column="81">LPARAM</name><op:operator pos:line="48" pos:column="87">)</op:operator><name><name pos:line="48" pos:column="88">macroList</name><index pos:line="48" pos:column="97">[<expr><name pos:line="48" pos:column="98">i</name></expr>]</index></name><op:operator pos:line="48" pos:column="100">.</op:operator><call><name pos:line="48" pos:column="101">getName</name><argument_list pos:line="48" pos:column="108">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

	<expr_stmt><expr><call><name><op:operator pos:line="50" pos:column="9">::</op:operator><name pos:line="50" pos:column="11">SendDlgItemMessage</name></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="38">IDC_MACRO_COMBO</name></expr></argument>, <argument><expr><name pos:line="50" pos:column="55">CB_SETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="50" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="50" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="51" pos:column="9">m_macroIndex</name> <op:operator pos:line="51" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="51" pos:column="24">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="54" pos:column="1">BOOL</name> <name pos:line="54" pos:column="6">CALLBACK</name></type> <name><name pos:line="54" pos:column="15">RunMacroDlg</name><op:operator pos:line="54" pos:column="26">::</op:operator><name pos:line="54" pos:column="28">run_dlgProc</name></name><parameter_list pos:line="54" pos:column="39">(<param><decl><type><name pos:line="54" pos:column="40">UINT</name></type> <name pos:line="54" pos:column="45">message</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="54">WPARAM</name></type> <name pos:line="54" pos:column="61">wParam</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="69">LPARAM</name></type></decl></param>)</parameter_list>
<block pos:line="55" pos:column="1">{	
	<switch pos:line="56" pos:column="9">switch <condition pos:line="56" pos:column="16">(<expr><name pos:line="56" pos:column="17">message</name></expr>)</condition> 
	<block pos:line="57" pos:column="9">{
		<case pos:line="58" pos:column="17">case <expr><name pos:line="58" pos:column="22">WM_INITDIALOG</name></expr> :
		<block pos:line="59" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">initMacroList</name><argument_list pos:line="60" pos:column="38">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="61" pos:column="25">::</op:operator><name pos:line="61" pos:column="27">SetDlgItemInt</name></name><argument_list pos:line="61" pos:column="40">(<argument><expr><name pos:line="61" pos:column="41">_hSelf</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="49">IDC_M_RUN_TIMES</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="66">m_Times</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="75">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<switch pos:line="62" pos:column="25">switch <condition pos:line="62" pos:column="32">( <expr><name pos:line="62" pos:column="34">m_Mode</name></expr> )</condition>
			<block pos:line="63" pos:column="25">{
				<case pos:line="64" pos:column="33">case <expr><name pos:line="64" pos:column="38">RM_RUN_MULTI</name></expr>:
					<expr_stmt><expr><call><name pos:line="65" pos:column="41">check</name><argument_list pos:line="65" pos:column="46">(<argument><expr><name pos:line="65" pos:column="47">IDC_M_RUN_MULTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="66" pos:column="41">break;</break>
				</case><case pos:line="67" pos:column="33">case <expr><name pos:line="67" pos:column="38">RM_RUN_EOF</name></expr>:
					<expr_stmt><expr><call><name pos:line="68" pos:column="41">check</name><argument_list pos:line="68" pos:column="46">(<argument><expr><name pos:line="68" pos:column="47">IDC_M_RUN_EOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="69" pos:column="41">break;</break>
			</case>}</block></switch>
			<expr_stmt><expr><call><name><op:operator pos:line="71" pos:column="25">::</op:operator><name pos:line="71" pos:column="27">SendDlgItemMessage</name></name><argument_list pos:line="71" pos:column="45">(<argument><expr><name pos:line="71" pos:column="46">_hSelf</name></expr></argument>, <argument><expr><name pos:line="71" pos:column="54">IDC_M_RUN_TIMES</name></expr></argument>, <argument><expr><name pos:line="71" pos:column="71">EM_LIMITTEXT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="71" pos:column="85">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="71" pos:column="88">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">goToCenter</name><argument_list pos:line="72" pos:column="35">()</argument_list></call></expr>;</expr_stmt>

			<return pos:line="74" pos:column="25">return <expr><name pos:line="74" pos:column="32">TRUE</name></expr>;</return>
		}</block>
		
		</case><case pos:line="77" pos:column="17">case <expr><name pos:line="77" pos:column="22">WM_COMMAND</name></expr> : 
		<block pos:line="78" pos:column="17">{
			<if pos:line="79" pos:column="25">if <condition pos:line="79" pos:column="28">(<expr><call><name pos:line="79" pos:column="29">HIWORD</name><argument_list pos:line="79" pos:column="35">(<argument><expr><name pos:line="79" pos:column="36">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="79" pos:column="44">==</op:operator> <name pos:line="79" pos:column="47">EN_CHANGE</name></expr>)</condition><then pos:line="79" pos:column="57">
			<block pos:line="80" pos:column="25">{
				<switch pos:line="81" pos:column="33">switch <condition pos:line="81" pos:column="40">(<expr><call><name pos:line="81" pos:column="41">LOWORD</name><argument_list pos:line="81" pos:column="47">(<argument><expr><name pos:line="81" pos:column="48">wParam</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block pos:line="82" pos:column="33">{	
					<case pos:line="83" pos:column="41">case <expr><name pos:line="83" pos:column="46">IDC_M_RUN_TIMES</name></expr>:
						<expr_stmt><expr><call><name pos:line="84" pos:column="49">check</name><argument_list pos:line="84" pos:column="54">(<argument><expr><name pos:line="84" pos:column="55">IDC_M_RUN_MULTI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="85" pos:column="49">return <expr><name pos:line="85" pos:column="56">TRUE</name></expr>;</return>
					
					</case><default pos:line="87" pos:column="41">default:
						<return pos:line="88" pos:column="49">return <expr><name pos:line="88" pos:column="56">FALSE</name></expr>;</return>
				</default>}</block></switch>
			}</block></then></if>
			
			<switch pos:line="92" pos:column="25">switch <condition pos:line="92" pos:column="32">(<expr><name pos:line="92" pos:column="33">wParam</name></expr>)</condition>
			<block pos:line="93" pos:column="25">{
				<case pos:line="94" pos:column="33">case <expr><name pos:line="94" pos:column="38">IDCANCEL</name></expr> :
					<expr_stmt><expr><call><name><op:operator pos:line="95" pos:column="41">::</op:operator><name pos:line="95" pos:column="43">ShowWindow</name></name><argument_list pos:line="95" pos:column="53">(<argument><expr><name pos:line="95" pos:column="54">_hSelf</name></expr></argument>, <argument><expr><name pos:line="95" pos:column="62">SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="96" pos:column="41">return <expr><name pos:line="96" pos:column="48">TRUE</name></expr>;</return>

				</case><case pos:line="98" pos:column="33">case <expr><name pos:line="98" pos:column="38">IDOK</name></expr> :
					<if pos:line="99" pos:column="41">if <condition pos:line="99" pos:column="44">( <expr><call><name pos:line="99" pos:column="46">isCheckedOrNot</name><argument_list pos:line="99" pos:column="60">(<argument><expr><name pos:line="99" pos:column="61">IDC_M_RUN_MULTI</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="99" pos:column="79">
					<block pos:line="100" pos:column="41">{
						<expr_stmt><expr><name pos:line="101" pos:column="49">m_Mode</name> <op:operator pos:line="101" pos:column="56">=</op:operator> <name pos:line="101" pos:column="58">RM_RUN_MULTI</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="102" pos:column="49">m_Times</name> <op:operator pos:line="102" pos:column="57">=</op:operator> <call><name><op:operator pos:line="102" pos:column="59">::</op:operator><name pos:line="102" pos:column="61">GetDlgItemInt</name></name><argument_list pos:line="102" pos:column="74">(<argument><expr><name pos:line="102" pos:column="75">_hSelf</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="83">IDC_M_RUN_TIMES</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="100">NULL</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="106">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="104" pos:column="41">else <if pos:line="104" pos:column="46">if <condition pos:line="104" pos:column="49">( <expr><call><name pos:line="104" pos:column="51">isCheckedOrNot</name><argument_list pos:line="104" pos:column="65">(<argument><expr><name pos:line="104" pos:column="66">IDC_M_RUN_EOF</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="104" pos:column="82">
					<block pos:line="105" pos:column="41">{
						<expr_stmt><expr><name pos:line="106" pos:column="49">m_Mode</name> <op:operator pos:line="106" pos:column="56">=</op:operator> <name pos:line="106" pos:column="58">RM_RUN_EOF</name></expr>;</expr_stmt>
					}</block></then></if></else></if>

					<if pos:line="109" pos:column="41">if <condition pos:line="109" pos:column="44">(<expr><call><name><op:operator pos:line="109" pos:column="45">::</op:operator><name pos:line="109" pos:column="47">SendDlgItemMessage</name></name><argument_list pos:line="109" pos:column="65">(<argument><expr><name pos:line="109" pos:column="66">_hSelf</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="74">IDC_MACRO_COMBO</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="91">CB_GETCOUNT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="109" pos:column="104">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="109" pos:column="107">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="109" pos:column="110">
						<expr_stmt><expr><call><name><op:operator pos:line="110" pos:column="49">::</op:operator><name pos:line="110" pos:column="51">SendMessage</name></name><argument_list pos:line="110" pos:column="62">(<argument><expr><name pos:line="110" pos:column="63">_hParent</name></expr></argument>, <argument><expr><name pos:line="110" pos:column="73">WM_MACRODLGRUNMACRO</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="110" pos:column="94">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="110" pos:column="97">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

					<return pos:line="112" pos:column="41">return <expr><name pos:line="112" pos:column="48">TRUE</name></expr>;</return>

				</case><default pos:line="114" pos:column="33">default:
					<if pos:line="115" pos:column="41">if <condition pos:line="115" pos:column="44">(<expr><op:operator pos:line="115" pos:column="45">(</op:operator><call><name pos:line="115" pos:column="46">HIWORD</name><argument_list pos:line="115" pos:column="52">(<argument><expr><name pos:line="115" pos:column="53">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="61">==</op:operator> <name pos:line="115" pos:column="64">CBN_SELCHANGE</name><op:operator pos:line="115" pos:column="77">)</op:operator> <op:operator pos:line="115" pos:column="79">&amp;&amp;</op:operator> <op:operator pos:line="115" pos:column="82">(</op:operator><call><name pos:line="115" pos:column="83">LOWORD</name><argument_list pos:line="115" pos:column="89">(<argument><expr><name pos:line="115" pos:column="90">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="98">==</op:operator> <name pos:line="115" pos:column="101">IDC_MACRO_COMBO</name><op:operator pos:line="115" pos:column="116">)</op:operator></expr>)</condition><then pos:line="115" pos:column="118">
					<block pos:line="116" pos:column="41">{
						<expr_stmt><expr><name pos:line="117" pos:column="49">m_macroIndex</name> <op:operator pos:line="117" pos:column="62">=</op:operator> <call><name><op:operator pos:line="117" pos:column="64">::</op:operator><name pos:line="117" pos:column="66">SendDlgItemMessage</name></name><argument_list pos:line="117" pos:column="84">(<argument><expr><name pos:line="117" pos:column="85">_hSelf</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="93">IDC_MACRO_COMBO</name></expr></argument>, <argument><expr><name pos:line="117" pos:column="110">CB_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="117" pos:column="124">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="117" pos:column="127">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="118" pos:column="49">return <expr><name pos:line="118" pos:column="56">TRUE</name></expr>;</return>
					}</block></then></if>
			</default>}</block></switch>
		}</block>
	</case>}</block></switch>
	<return pos:line="123" pos:column="9">return <expr><name pos:line="123" pos:column="16">FALSE</name></expr>;</return>
}</block></function>

<function><type><name pos:line="126" pos:column="1">void</name></type> <name><name pos:line="126" pos:column="6">RunMacroDlg</name><op:operator pos:line="126" pos:column="17">::</op:operator><name pos:line="126" pos:column="19">check</name></name><parameter_list pos:line="126" pos:column="24">(<param><decl><type><name pos:line="126" pos:column="25">int</name></type> <name pos:line="126" pos:column="29">id</name></decl></param>)</parameter_list>
<block pos:line="127" pos:column="1">{
	<comment type="line" pos:line="128" pos:column="9">// IDC_M_RUN_MULTI</comment>
	<if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">( <expr><name pos:line="129" pos:column="14">id</name> <op:operator pos:line="129" pos:column="17">==</op:operator> <name pos:line="129" pos:column="20">IDC_M_RUN_MULTI</name></expr> )</condition><then pos:line="129" pos:column="37">
		<expr_stmt><expr><call><name><op:operator pos:line="130" pos:column="17">::</op:operator><name pos:line="130" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="130" pos:column="37">(<argument><expr><name pos:line="130" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="46">IDC_M_RUN_MULTI</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="63">BM_SETCHECK</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="76">BST_CHECKED</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="130" pos:column="89">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="131" pos:column="9">else
		<expr_stmt><expr><call><name><op:operator pos:line="132" pos:column="17">::</op:operator><name pos:line="132" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="132" pos:column="37">(<argument><expr><name pos:line="132" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="46">IDC_M_RUN_MULTI</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="63">BM_SETCHECK</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="76">BST_UNCHECKED</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="132" pos:column="91">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

	<comment type="line" pos:line="134" pos:column="9">// IDC_M_RUN_EOF</comment>
	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">( <expr><name pos:line="135" pos:column="14">id</name> <op:operator pos:line="135" pos:column="17">==</op:operator> <name pos:line="135" pos:column="20">IDC_M_RUN_EOF</name></expr> )</condition><then pos:line="135" pos:column="35">
		<expr_stmt><expr><call><name><op:operator pos:line="136" pos:column="17">::</op:operator><name pos:line="136" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="136" pos:column="37">(<argument><expr><name pos:line="136" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="46">IDC_M_RUN_EOF</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="61">BM_SETCHECK</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="74">BST_CHECKED</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="136" pos:column="87">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="137" pos:column="9">else
		<expr_stmt><expr><call><name><op:operator pos:line="138" pos:column="17">::</op:operator><name pos:line="138" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="138" pos:column="37">(<argument><expr><name pos:line="138" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="46">IDC_M_RUN_EOF</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="61">BM_SETCHECK</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="74">BST_UNCHECKED</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="138" pos:column="89">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<function><type><name pos:line="141" pos:column="1">int</name></type> <name><name pos:line="141" pos:column="5">RunMacroDlg</name><op:operator pos:line="141" pos:column="16">::</op:operator><name pos:line="141" pos:column="18">getMacro2Exec</name></name><parameter_list pos:line="141" pos:column="31">()</parameter_list> <specifier pos:line="141" pos:column="34">const</specifier> 
<block pos:line="142" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="143" pos:column="9">bool</name></type> <name pos:line="143" pos:column="14">isCurMacroPresent</name> <init pos:line="143" pos:column="32">= <expr><call><name><op:operator pos:line="143" pos:column="34">::</op:operator><name pos:line="143" pos:column="36">SendMessage</name></name><argument_list pos:line="143" pos:column="47">(<argument><expr><name pos:line="143" pos:column="48">_hParent</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="58">WM_GETCURRENTMACROSTATUS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="143" pos:column="84">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="143" pos:column="87">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="90">==</op:operator> <name pos:line="143" pos:column="93">MACRO_RECORDING_HAS_STOPPED</name></expr></init></decl>;</decl_stmt>
	<return pos:line="144" pos:column="9">return <expr><name pos:line="144" pos:column="16">isCurMacroPresent</name><op:operator pos:line="144" pos:column="33">?</op:operator><op:operator pos:line="144" pos:column="34">(</op:operator><name pos:line="144" pos:column="35">m_macroIndex</name> <op:operator pos:line="144" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="144" pos:column="50">1</lit:literal><op:operator pos:line="144" pos:column="51">)</op:operator><op:operator pos:line="144" pos:column="52">:</op:operator><name pos:line="144" pos:column="53">m_macroIndex</name></expr>;</return>
}</block></function>
</unit>
