<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\LexerSimple.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexerSimple.h
 ** A simple lexer with no state.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">LEXERSIMPLE_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">LEXERSIMPLE_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef</cpp:directive> <name pos:line="11" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="12" pos:column="1">namespace <name pos:line="12" pos:column="11">Scintilla</name> <block pos:line="12" pos:column="21">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="15" pos:column="1">// A simple lexer with no state</comment>
<class pos:line="16" pos:column="1">class <name pos:line="16" pos:column="7">LexerSimple</name> <super pos:line="16" pos:column="19">: <specifier pos:line="16" pos:column="21">public</specifier> <name pos:line="16" pos:column="28">LexerBase</name></super> <block pos:line="16" pos:column="38">{<private type="default" pos:line="16" pos:column="39">
	<decl_stmt><decl><type><specifier pos:line="17" pos:column="9">const</specifier> <name pos:line="17" pos:column="15">LexerModule</name> <type:modifier pos:line="17" pos:column="27">*</type:modifier></type><name pos:line="17" pos:column="28">module</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="18" pos:column="9">std</name><op:operator pos:line="18" pos:column="12">::</op:operator><name pos:line="18" pos:column="14">string</name></name></type> <name pos:line="18" pos:column="21">wordLists</name></decl>;</decl_stmt>
</private><public pos:line="19" pos:column="1">public:
	<constructor_decl><name pos:line="20" pos:column="9">LexerSimple</name><parameter_list pos:line="20" pos:column="20">(<param><decl><type><specifier pos:line="20" pos:column="21">const</specifier> <name pos:line="20" pos:column="27">LexerModule</name> <type:modifier pos:line="20" pos:column="39">*</type:modifier></type><name pos:line="20" pos:column="40">module_</name></decl></param>)</parameter_list>;</constructor_decl>
	<function_decl><type><specifier pos:line="21" pos:column="9">const</specifier> <name pos:line="21" pos:column="15">char</name> <type:modifier pos:line="21" pos:column="20">*</type:modifier> <name pos:line="21" pos:column="22">SCI_METHOD</name></type> <name pos:line="21" pos:column="33">DescribeWordListSets</name><parameter_list pos:line="21" pos:column="53">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="22" pos:column="9">void</name> <name pos:line="22" pos:column="14">SCI_METHOD</name></type> <name pos:line="22" pos:column="25">Lex</name><parameter_list pos:line="22" pos:column="28">(<param><decl><type><name pos:line="22" pos:column="29">unsigned</name> <name pos:line="22" pos:column="38">int</name></type> <name pos:line="22" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="52">int</name></type> <name pos:line="22" pos:column="56">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="67">int</name></type> <name pos:line="22" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="82">IDocument</name> <type:modifier pos:line="22" pos:column="92">*</type:modifier></type><name pos:line="22" pos:column="93">pAccess</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="23" pos:column="9">void</name> <name pos:line="23" pos:column="14">SCI_METHOD</name></type> <name pos:line="23" pos:column="25">Fold</name><parameter_list pos:line="23" pos:column="29">(<param><decl><type><name pos:line="23" pos:column="30">unsigned</name> <name pos:line="23" pos:column="39">int</name></type> <name pos:line="23" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="53">int</name></type> <name pos:line="23" pos:column="57">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="68">int</name></type> <name pos:line="23" pos:column="72">initStyle</name></decl></param>, <param><decl><type><name pos:line="23" pos:column="83">IDocument</name> <type:modifier pos:line="23" pos:column="93">*</type:modifier></type><name pos:line="23" pos:column="94">pAccess</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
