<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\RegExt\regExtDlg.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"regExtDlg.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"resource.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><specifier pos:line="33" pos:column="1">const</specifier> <name pos:line="33" pos:column="7">TCHAR</name> <type:modifier pos:line="33" pos:column="13">*</type:modifier></type><name pos:line="33" pos:column="14">nppName</name> <init pos:line="33" pos:column="22">= <expr><call><name pos:line="33" pos:column="24">TEXT</name><argument_list pos:line="33" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="29">"Notepad++_file"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="34" pos:column="1">const</specifier> <name pos:line="34" pos:column="7">TCHAR</name> <type:modifier pos:line="34" pos:column="13">*</type:modifier></type><name pos:line="34" pos:column="14">nppBackup</name> <init pos:line="34" pos:column="24">= <expr><call><name pos:line="34" pos:column="26">TEXT</name><argument_list pos:line="34" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="31">"Notepad++_backup"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="35" pos:column="1">const</specifier> <name pos:line="35" pos:column="7">TCHAR</name> <type:modifier pos:line="35" pos:column="13">*</type:modifier></type><name pos:line="35" pos:column="14">nppDoc</name> <init pos:line="35" pos:column="21">= <expr><call><name pos:line="35" pos:column="23">TEXT</name><argument_list pos:line="35" pos:column="27">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="28">"Notepad++ Document"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="37" pos:column="1">const</specifier> <name pos:line="37" pos:column="7">int</name></type> <name pos:line="37" pos:column="11">nbSupportedLang</name> <init pos:line="37" pos:column="27">= <expr><lit:literal type="number" pos:line="37" pos:column="29">9</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="38" pos:column="1">const</specifier> <name pos:line="38" pos:column="7">int</name></type> <name pos:line="38" pos:column="11">nbExtMax</name> <init pos:line="38" pos:column="20">= <expr><lit:literal type="number" pos:line="38" pos:column="22">10</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="39" pos:column="1">const</specifier> <name pos:line="39" pos:column="7">int</name></type> <name pos:line="39" pos:column="11">extNameMax</name> <init pos:line="39" pos:column="22">= <expr><lit:literal type="number" pos:line="39" pos:column="24">18</lit:literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="41" pos:column="1">TCHAR</name></type> <name><name pos:line="41" pos:column="7">defExtArray</name><index pos:line="41" pos:column="18">[<expr><name pos:line="41" pos:column="19">nbSupportedLang</name></expr>]</index><index pos:line="41" pos:column="35">[<expr><name pos:line="41" pos:column="36">nbExtMax</name></expr>]</index><index pos:line="41" pos:column="45">[<expr><name pos:line="41" pos:column="46">extNameMax</name></expr>]</index></name> <init pos:line="41" pos:column="58">= <expr><block pos:line="41" pos:column="60">{
	<expr><block pos:line="42" pos:column="9">{<expr><call><name pos:line="42" pos:column="10">TEXT</name><argument_list pos:line="42" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="15">"Notepad"</lit:literal></expr></argument>)</argument_list></call></expr>,        			<expr><call><name pos:line="42" pos:column="57">TEXT</name><argument_list pos:line="42" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="62">".txt"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="42" pos:column="71">TEXT</name><argument_list pos:line="42" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="42" pos:column="76">".log"</lit:literal></expr></argument>)</argument_list></call></expr>, <macro><name pos:line="42" pos:column="85">TEXT</name><argument_list pos:line="42" pos:column="89">(<argument pos:line="42" pos:column="90">".ini"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block pos:line="43" pos:column="9">{<expr><call><name pos:line="43" pos:column="10">TEXT</name><argument_list pos:line="43" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="15">"c, c++, objc"</lit:literal></expr></argument>)</argument_list></call></expr>,   	<expr><call><name pos:line="43" pos:column="41">TEXT</name><argument_list pos:line="43" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="46">".h"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="43" pos:column="53">TEXT</name><argument_list pos:line="43" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="58">".hpp"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="43" pos:column="67">TEXT</name><argument_list pos:line="43" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="72">".hxx"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="43" pos:column="81">TEXT</name><argument_list pos:line="43" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="86">".c"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="43" pos:column="93">TEXT</name><argument_list pos:line="43" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="98">".cpp"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="43" pos:column="107">TEXT</name><argument_list pos:line="43" pos:column="111">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="112">".cxx"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="43" pos:column="121">TEXT</name><argument_list pos:line="43" pos:column="125">(<argument><expr><lit:literal type="string" pos:line="43" pos:column="126">".cc"</lit:literal></expr></argument>)</argument_list></call></expr>, <macro><name pos:line="43" pos:column="134">TEXT</name><argument_list pos:line="43" pos:column="138">(<argument pos:line="43" pos:column="139">".m"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block pos:line="44" pos:column="9">{<expr><call><name pos:line="44" pos:column="10">TEXT</name><argument_list pos:line="44" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="15">"java, c#, pascal"</lit:literal></expr></argument>)</argument_list></call></expr>, 		<expr><call><name pos:line="44" pos:column="49">TEXT</name><argument_list pos:line="44" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="54">".java"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="44" pos:column="64">TEXT</name><argument_list pos:line="44" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="69">".cs"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="44" pos:column="77">TEXT</name><argument_list pos:line="44" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="82">".pas"</lit:literal></expr></argument>)</argument_list></call></expr>, <macro><name pos:line="44" pos:column="91">TEXT</name><argument_list pos:line="44" pos:column="95">(<argument pos:line="44" pos:column="96">".inc"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block pos:line="45" pos:column="9">{<expr><call><name pos:line="45" pos:column="10">TEXT</name><argument_list pos:line="45" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="15">"web(html) script"</lit:literal></expr></argument>)</argument_list></call></expr>,   <expr><call><name pos:line="45" pos:column="38">TEXT</name><argument_list pos:line="45" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="43">".html"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="45" pos:column="53">TEXT</name><argument_list pos:line="45" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="58">".htm"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="45" pos:column="67">TEXT</name><argument_list pos:line="45" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="72">".php"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="45" pos:column="81">TEXT</name><argument_list pos:line="45" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="86">".phtml"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="45" pos:column="97">TEXT</name><argument_list pos:line="45" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="102">".js"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="45" pos:column="110">TEXT</name><argument_list pos:line="45" pos:column="114">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="115">".jsp"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="45" pos:column="124">TEXT</name><argument_list pos:line="45" pos:column="128">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="129">".asp"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="45" pos:column="138">TEXT</name><argument_list pos:line="45" pos:column="142">(<argument><expr><lit:literal type="string" pos:line="45" pos:column="143">".css"</lit:literal></expr></argument>)</argument_list></call></expr>, <macro><name pos:line="45" pos:column="152">TEXT</name><argument_list pos:line="45" pos:column="156">(<argument pos:line="45" pos:column="157">".xml"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block pos:line="46" pos:column="9">{<expr><call><name pos:line="46" pos:column="10">TEXT</name><argument_list pos:line="46" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="15">"public script"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="46" pos:column="41">TEXT</name><argument_list pos:line="46" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="46">".sh"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="46" pos:column="54">TEXT</name><argument_list pos:line="46" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="59">".bsh"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="46" pos:column="68">TEXT</name><argument_list pos:line="46" pos:column="72">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="73">".nsi"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="46" pos:column="82">TEXT</name><argument_list pos:line="46" pos:column="86">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="87">".nsh"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="46" pos:column="96">TEXT</name><argument_list pos:line="46" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="101">".lua"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="46" pos:column="110">TEXT</name><argument_list pos:line="46" pos:column="114">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="115">".pl"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="46" pos:column="123">TEXT</name><argument_list pos:line="46" pos:column="127">(<argument><expr><lit:literal type="string" pos:line="46" pos:column="128">".pm"</lit:literal></expr></argument>)</argument_list></call></expr>, <macro><name pos:line="46" pos:column="136">TEXT</name><argument_list pos:line="46" pos:column="140">(<argument pos:line="46" pos:column="141">".py"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block pos:line="47" pos:column="9">{<expr><call><name pos:line="47" pos:column="10">TEXT</name><argument_list pos:line="47" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="15">"property script"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><call><name pos:line="47" pos:column="41">TEXT</name><argument_list pos:line="47" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="46">".rc"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="47" pos:column="54">TEXT</name><argument_list pos:line="47" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="59">".as"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="47" pos:column="67">TEXT</name><argument_list pos:line="47" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="72">".mx"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="47" pos:column="80">TEXT</name><argument_list pos:line="47" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="47" pos:column="85">".vb"</lit:literal></expr></argument>)</argument_list></call></expr>, <macro><name pos:line="47" pos:column="93">TEXT</name><argument_list pos:line="47" pos:column="97">(<argument pos:line="47" pos:column="98">".vbs"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block pos:line="48" pos:column="9">{<expr><call><name pos:line="48" pos:column="10">TEXT</name><argument_list pos:line="48" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="15">"fortran, TeX, SQL"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="48" pos:column="57">TEXT</name><argument_list pos:line="48" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="62">".f"</lit:literal></expr></argument>)</argument_list></call></expr>,  <expr><call><name pos:line="48" pos:column="70">TEXT</name><argument_list pos:line="48" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="75">".for"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="48" pos:column="84">TEXT</name><argument_list pos:line="48" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="89">".f90"</lit:literal></expr></argument>)</argument_list></call></expr>,  <expr><call><name pos:line="48" pos:column="99">TEXT</name><argument_list pos:line="48" pos:column="103">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="104">".f95"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="48" pos:column="113">TEXT</name><argument_list pos:line="48" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="118">".f2k"</lit:literal></expr></argument>)</argument_list></call></expr>, <expr><call><name pos:line="48" pos:column="127">TEXT</name><argument_list pos:line="48" pos:column="131">(<argument><expr><lit:literal type="string" pos:line="48" pos:column="132">".tex"</lit:literal></expr></argument>)</argument_list></call></expr>, <macro><name pos:line="48" pos:column="141">TEXT</name><argument_list pos:line="48" pos:column="145">(<argument pos:line="48" pos:column="146">".sql"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block pos:line="49" pos:column="9">{<expr><call><name pos:line="49" pos:column="10">TEXT</name><argument_list pos:line="49" pos:column="14">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="15">"misc"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><call><name pos:line="49" pos:column="81">TEXT</name><argument_list pos:line="49" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="49" pos:column="86">".nfo"</lit:literal></expr></argument>)</argument_list></call></expr>, <macro><name pos:line="49" pos:column="95">TEXT</name><argument_list pos:line="49" pos:column="99">(<argument pos:line="49" pos:column="100">".mak"</argument>)</argument_list></macro>}</block></expr>,
	<expr><block pos:line="50" pos:column="9">{<macro><name pos:line="50" pos:column="10">TEXT</name><argument_list pos:line="50" pos:column="14">(<argument pos:line="50" pos:column="15">"customize"</argument>)</argument_list></macro>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="53" pos:column="1">void</name></type> <name><name pos:line="53" pos:column="6">RegExtDlg</name><op:operator pos:line="53" pos:column="15">::</op:operator><name pos:line="53" pos:column="17">doDialog</name></name><parameter_list pos:line="53" pos:column="25">(<param><decl><type><name pos:line="53" pos:column="26">bool</name></type> <name pos:line="53" pos:column="31">isRTL</name></decl></param>)</parameter_list> 
<block pos:line="54" pos:column="1">{
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><name pos:line="55" pos:column="13">isRTL</name></expr>)</condition><then pos:line="55" pos:column="19">
	<block pos:line="56" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="57" pos:column="17">DLGTEMPLATE</name> <type:modifier pos:line="57" pos:column="29">*</type:modifier></type><name pos:line="57" pos:column="30">pMyDlgTemplate</name> <init pos:line="57" pos:column="45">= <expr><name pos:line="57" pos:column="47">NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">HGLOBAL</name></type> <name pos:line="58" pos:column="25">hMyDlgTemplate</name> <init pos:line="58" pos:column="40">= <expr><call><name pos:line="58" pos:column="42">makeRTLResource</name><argument_list pos:line="58" pos:column="57">(<argument><expr><name pos:line="58" pos:column="58">IDD_REGEXT_BOX</name></expr></argument>, <argument><expr><op:operator pos:line="58" pos:column="74">&amp;</op:operator><name pos:line="58" pos:column="75">pMyDlgTemplate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="59" pos:column="17">::</op:operator><name pos:line="59" pos:column="19">DialogBoxIndirectParam</name></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name pos:line="59" pos:column="42">_hInst</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="50">pMyDlgTemplate</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="66">_hParent</name></expr></argument>,  <argument><expr><op:operator pos:line="59" pos:column="77">(</op:operator><name pos:line="59" pos:column="78">DLGPROC</name><op:operator pos:line="59" pos:column="85">)</op:operator><name pos:line="59" pos:column="86">dlgProc</name></expr></argument>, <argument><expr><op:operator pos:line="59" pos:column="95">(</op:operator><name pos:line="59" pos:column="96">LPARAM</name><op:operator pos:line="59" pos:column="102">)</op:operator><name pos:line="59" pos:column="103">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="60" pos:column="17">::</op:operator><name pos:line="60" pos:column="19">GlobalFree</name></name><argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">hMyDlgTemplate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="62" pos:column="9">else
		<expr_stmt><expr><call><name><op:operator pos:line="63" pos:column="17">::</op:operator><name pos:line="63" pos:column="19">DialogBoxParam</name></name><argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">_hInst</name></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="42">MAKEINTRESOURCE</name><argument_list pos:line="63" pos:column="57">(<argument><expr><name pos:line="63" pos:column="58">IDD_REGEXT_BOX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="63" pos:column="75">_hParent</name></expr></argument>,  <argument><expr><op:operator pos:line="63" pos:column="86">(</op:operator><name pos:line="63" pos:column="87">DLGPROC</name><op:operator pos:line="63" pos:column="94">)</op:operator><name pos:line="63" pos:column="95">dlgProc</name></expr></argument>, <argument><expr><op:operator pos:line="63" pos:column="104">(</op:operator><name pos:line="63" pos:column="105">LPARAM</name><op:operator pos:line="63" pos:column="111">)</op:operator><name pos:line="63" pos:column="112">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function><empty_stmt pos:line="64" pos:column="2">;</empty_stmt>

<function><type><name pos:line="66" pos:column="1">BOOL</name> <name pos:line="66" pos:column="6">CALLBACK</name></type> <name><name pos:line="66" pos:column="15">RegExtDlg</name><op:operator pos:line="66" pos:column="24">::</op:operator><name pos:line="66" pos:column="26">run_dlgProc</name></name><parameter_list pos:line="66" pos:column="37">(<param><decl><type><name pos:line="66" pos:column="38">UINT</name></type> <name pos:line="66" pos:column="43">Message</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="52">WPARAM</name></type> <name pos:line="66" pos:column="59">wParam</name></decl></param>, <param><decl><type><name pos:line="66" pos:column="67">LPARAM</name></type> <name pos:line="66" pos:column="74">lParam</name></decl></param>)</parameter_list>
<block pos:line="67" pos:column="1">{
	<switch pos:line="68" pos:column="9">switch <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">Message</name></expr>)</condition>
	<block pos:line="69" pos:column="9">{
		<case pos:line="70" pos:column="17">case <expr><name pos:line="70" pos:column="22">WM_INITDIALOG</name></expr> :
		<block pos:line="71" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="72" pos:column="25">getRegisteredExts</name><argument_list pos:line="72" pos:column="42">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="73" pos:column="25">getDefSupportedExts</name><argument_list pos:line="73" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="74" pos:column="25">//goToCenter();</comment>
			<expr_stmt><expr><call><name><op:operator pos:line="75" pos:column="25">::</op:operator><name pos:line="75" pos:column="27">EnableWindow</name></name><argument_list pos:line="75" pos:column="39">(<argument><expr><call><name><op:operator pos:line="75" pos:column="40">::</op:operator><name pos:line="75" pos:column="42">GetDlgItem</name></name><argument_list pos:line="75" pos:column="52">(<argument><expr><name pos:line="75" pos:column="53">_hSelf</name></expr></argument>, <argument><expr><name pos:line="75" pos:column="61">IDC_ADDFROMLANGEXT_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="75" pos:column="89">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="76" pos:column="25">::</op:operator><name pos:line="76" pos:column="27">EnableWindow</name></name><argument_list pos:line="76" pos:column="39">(<argument><expr><call><name><op:operator pos:line="76" pos:column="40">::</op:operator><name pos:line="76" pos:column="42">GetDlgItem</name></name><argument_list pos:line="76" pos:column="52">(<argument><expr><name pos:line="76" pos:column="53">_hSelf</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="61">IDC_REMOVEEXT_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="76" pos:column="84">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="77" pos:column="25">::</op:operator><name pos:line="77" pos:column="27">SendDlgItemMessage</name></name><argument_list pos:line="77" pos:column="45">(<argument><expr><name pos:line="77" pos:column="46">_hSelf</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="54">IDC_CUSTOMEXT_EDIT</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="74">EM_SETLIMITTEXT</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="91">extNameMax</name><op:operator pos:line="77" pos:column="101">-</op:operator><lit:literal type="number" pos:line="77" pos:column="102">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="77" pos:column="105">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:line="79" pos:column="25">return <expr><name pos:line="79" pos:column="32">TRUE</name></expr>;</return>
		}</block>

		</case><case pos:line="82" pos:column="17">case <expr><name pos:line="82" pos:column="22">WM_DRAWITEM</name></expr> :
		<block pos:line="83" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="84" pos:column="25">HICON</name></type> <name pos:line="84" pos:column="31">hIcon</name> <init pos:line="84" pos:column="37">= <expr><call><name><op:operator pos:line="84" pos:column="39">::</op:operator><name pos:line="84" pos:column="41">LoadIcon</name></name><argument_list pos:line="84" pos:column="49">(<argument><expr><name pos:line="84" pos:column="50">_hInst</name></expr></argument>, <argument><expr><call><name pos:line="84" pos:column="58">MAKEINTRESOURCE</name><argument_list pos:line="84" pos:column="73">(<argument><expr><name pos:line="84" pos:column="74">IDI_DELETE_ICON</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">DRAWITEMSTRUCT</name> <type:modifier pos:line="85" pos:column="40">*</type:modifier></type><name pos:line="85" pos:column="41">pdis</name> <init pos:line="85" pos:column="46">= <expr><op:operator pos:line="85" pos:column="48">(</op:operator><name pos:line="85" pos:column="49">DRAWITEMSTRUCT</name> <op:operator pos:line="85" pos:column="64">*</op:operator><op:operator pos:line="85" pos:column="65">)</op:operator><name pos:line="85" pos:column="66">lParam</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="86" pos:column="25">::</op:operator><name pos:line="86" pos:column="27">DrawIcon</name></name><argument_list pos:line="86" pos:column="35">(<argument><expr><name><name pos:line="86" pos:column="36">pdis</name><op:operator pos:line="86" pos:column="40">-&gt;</op:operator><name pos:line="86" pos:column="42">hDC</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="86" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="86" pos:column="50">0</lit:literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="53">hIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="87" pos:column="25">return <expr><name pos:line="87" pos:column="32">TRUE</name></expr>;</return>
		}</block>

		</case><case pos:line="90" pos:column="17">case <expr><name pos:line="90" pos:column="22">WM_COMMAND</name></expr> : 
		<block pos:line="91" pos:column="17">{
			<switch pos:line="92" pos:column="25">switch <condition pos:line="92" pos:column="32">(<expr><name pos:line="92" pos:column="33">wParam</name></expr>)</condition>
			<block pos:line="93" pos:column="25">{
				<case pos:line="94" pos:column="33">case <expr><name pos:line="94" pos:column="38">IDC_ADDFROMLANGEXT_BUTTON</name></expr> :
				<block pos:line="95" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="96" pos:column="41">writeNppPath</name><argument_list pos:line="96" pos:column="53">()</argument_list></call></expr>;</expr_stmt>

					<decl_stmt><decl><type><name pos:line="98" pos:column="41">TCHAR</name></type> <name><name pos:line="98" pos:column="47">ext2Add</name><index pos:line="98" pos:column="54">[<expr><name pos:line="98" pos:column="55">extNameMax</name></expr>]</index></name> <init pos:line="98" pos:column="67">= <expr><call><name pos:line="98" pos:column="69">TEXT</name><argument_list pos:line="98" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="74">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="99" pos:column="41">if <condition pos:line="99" pos:column="44">(<expr><op:operator pos:line="99" pos:column="45">!</op:operator><name pos:line="99" pos:column="46">_isCustomize</name></expr>)</condition><then pos:line="99" pos:column="59">
					<block pos:line="100" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="101" pos:column="49">int</name></type> <name pos:line="101" pos:column="53">index2Add</name> <init pos:line="101" pos:column="63">= <expr><call><name><op:operator pos:line="101" pos:column="65">::</op:operator><name pos:line="101" pos:column="67">SendDlgItemMessage</name></name><argument_list pos:line="101" pos:column="85">(<argument><expr><name pos:line="101" pos:column="86">_hSelf</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="94">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="119">LB_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="101" pos:column="133">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="101" pos:column="136">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><op:operator pos:line="102" pos:column="49">::</op:operator><name pos:line="102" pos:column="51">SendDlgItemMessage</name></name><argument_list pos:line="102" pos:column="69">(<argument><expr><name pos:line="102" pos:column="70">_hSelf</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="78">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="103">LB_GETTEXT</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="115">index2Add</name></expr></argument>, <argument><expr><op:operator pos:line="102" pos:column="126">(</op:operator><name pos:line="102" pos:column="127">LPARAM</name><op:operator pos:line="102" pos:column="133">)</op:operator><name pos:line="102" pos:column="134">ext2Add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="103" pos:column="49">addExt</name><argument_list pos:line="103" pos:column="55">(<argument><expr><name pos:line="103" pos:column="56">ext2Add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><op:operator pos:line="104" pos:column="49">::</op:operator><name pos:line="104" pos:column="51">SendDlgItemMessage</name></name><argument_list pos:line="104" pos:column="69">(<argument><expr><name pos:line="104" pos:column="70">_hSelf</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="78">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="103">LB_DELETESTRING</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="120">index2Add</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="104" pos:column="131">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="106" pos:column="41">else
					<block pos:line="107" pos:column="41">{
						<expr_stmt><expr><call><name><op:operator pos:line="108" pos:column="49">::</op:operator><name pos:line="108" pos:column="51">SendDlgItemMessage</name></name><argument_list pos:line="108" pos:column="69">(<argument><expr><name pos:line="108" pos:column="70">_hSelf</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="78">IDC_CUSTOMEXT_EDIT</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="98">WM_GETTEXT</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="110">extNameMax</name></expr></argument>, <argument><expr><op:operator pos:line="108" pos:column="122">(</op:operator><name pos:line="108" pos:column="123">LPARAM</name><op:operator pos:line="108" pos:column="129">)</op:operator><name pos:line="108" pos:column="130">ext2Add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="109" pos:column="49">int</name></type> <name pos:line="109" pos:column="53">i</name> <init pos:line="109" pos:column="55">= <expr><call><name><op:operator pos:line="109" pos:column="57">::</op:operator><name pos:line="109" pos:column="59">SendDlgItemMessage</name></name><argument_list pos:line="109" pos:column="77">(<argument><expr><name pos:line="109" pos:column="78">_hSelf</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="86">IDC_REGEXT_REGISTEREDEXTS_LIST</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="118">LB_FINDSTRINGEXACT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="109" pos:column="138">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="109" pos:column="141">(</op:operator><name pos:line="109" pos:column="142">LPARAM</name><op:operator pos:line="109" pos:column="148">)</op:operator><name pos:line="109" pos:column="149">ext2Add</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="110" pos:column="49">if <condition pos:line="110" pos:column="52">(<expr><name pos:line="110" pos:column="53">i</name> <op:operator pos:line="110" pos:column="55">!=</op:operator> <name pos:line="110" pos:column="58">LB_ERR</name></expr>)</condition><then pos:line="110" pos:column="65"> 
							<return pos:line="111" pos:column="57">return <expr><name pos:line="111" pos:column="64">TRUE</name></expr>;</return></then></if>
						<expr_stmt><expr><call><name pos:line="112" pos:column="49">addExt</name><argument_list pos:line="112" pos:column="55">(<argument><expr><name pos:line="112" pos:column="56">ext2Add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><op:operator pos:line="113" pos:column="49">::</op:operator><name pos:line="113" pos:column="51">SendDlgItemMessage</name></name><argument_list pos:line="113" pos:column="69">(<argument><expr><name pos:line="113" pos:column="70">_hSelf</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="78">IDC_CUSTOMEXT_EDIT</name></expr></argument>, <argument><expr><name pos:line="113" pos:column="98">WM_SETTEXT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="113" pos:column="110">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="113" pos:column="113">(</op:operator><name pos:line="113" pos:column="114">LPARAM</name><op:operator pos:line="113" pos:column="120">)</op:operator><call><name pos:line="113" pos:column="121">TEXT</name><argument_list pos:line="113" pos:column="125">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="126">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><call><name><op:operator pos:line="115" pos:column="41">::</op:operator><name pos:line="115" pos:column="43">SendDlgItemMessage</name></name><argument_list pos:line="115" pos:column="61">(<argument><expr><name pos:line="115" pos:column="62">_hSelf</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="70">IDC_REGEXT_REGISTEREDEXTS_LIST</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="102">LB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="115" pos:column="116">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="115" pos:column="119">(</op:operator><name pos:line="115" pos:column="120">LPARAM</name><op:operator pos:line="115" pos:column="126">)</op:operator><name pos:line="115" pos:column="127">ext2Add</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="116" pos:column="41">::</op:operator><name pos:line="116" pos:column="43">EnableWindow</name></name><argument_list pos:line="116" pos:column="55">(<argument><expr><call><name><op:operator pos:line="116" pos:column="56">::</op:operator><name pos:line="116" pos:column="58">GetDlgItem</name></name><argument_list pos:line="116" pos:column="68">(<argument><expr><name pos:line="116" pos:column="69">_hSelf</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="77">IDC_ADDFROMLANGEXT_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="116" pos:column="105">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="117" pos:column="41">return <expr><name pos:line="117" pos:column="48">TRUE</name></expr>;</return>
				}</block>

				</case><case pos:line="120" pos:column="33">case <expr><name pos:line="120" pos:column="38">IDC_REMOVEEXT_BUTTON</name></expr> :
				<block pos:line="121" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="122" pos:column="41">TCHAR</name></type> <name><name pos:line="122" pos:column="47">ext2Sup</name><index pos:line="122" pos:column="54">[<expr><name pos:line="122" pos:column="55">extNameMax</name></expr>]</index></name> <init pos:line="122" pos:column="67">= <expr><call><name pos:line="122" pos:column="69">TEXT</name><argument_list pos:line="122" pos:column="73">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="74">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="123" pos:column="41">int</name></type> <name pos:line="123" pos:column="45">index2Sup</name> <init pos:line="123" pos:column="55">= <expr><call><name><op:operator pos:line="123" pos:column="57">::</op:operator><name pos:line="123" pos:column="59">SendDlgItemMessage</name></name><argument_list pos:line="123" pos:column="77">(<argument><expr><name pos:line="123" pos:column="78">_hSelf</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="86">IDC_REGEXT_REGISTEREDEXTS_LIST</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="118">LB_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="123" pos:column="132">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="123" pos:column="135">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="124" pos:column="41">::</op:operator><name pos:line="124" pos:column="43">SendDlgItemMessage</name></name><argument_list pos:line="124" pos:column="61">(<argument><expr><name pos:line="124" pos:column="62">_hSelf</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="70">IDC_REGEXT_REGISTEREDEXTS_LIST</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="102">LB_GETTEXT</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="114">index2Sup</name></expr></argument>, <argument><expr><op:operator pos:line="124" pos:column="125">(</op:operator><name pos:line="124" pos:column="126">LPARAM</name><op:operator pos:line="124" pos:column="132">)</op:operator><name pos:line="124" pos:column="133">ext2Sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="125" pos:column="41">if <condition pos:line="125" pos:column="44">(<expr><call><name pos:line="125" pos:column="45">deleteExts</name><argument_list pos:line="125" pos:column="55">(<argument><expr><name pos:line="125" pos:column="56">ext2Sup</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="125" pos:column="65">
						<expr_stmt><expr><call><name><op:operator pos:line="126" pos:column="49">::</op:operator><name pos:line="126" pos:column="51">SendDlgItemMessage</name></name><argument_list pos:line="126" pos:column="69">(<argument><expr><name pos:line="126" pos:column="70">_hSelf</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="78">IDC_REGEXT_REGISTEREDEXTS_LIST</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="110">LB_DELETESTRING</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="127">index2Sup</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="126" pos:column="138">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<decl_stmt><decl><type><name pos:line="127" pos:column="41">int</name></type> <name pos:line="127" pos:column="45">langIndex</name> <init pos:line="127" pos:column="55">= <expr><call><name><op:operator pos:line="127" pos:column="57">::</op:operator><name pos:line="127" pos:column="59">SendDlgItemMessage</name></name><argument_list pos:line="127" pos:column="77">(<argument><expr><name pos:line="127" pos:column="78">_hSelf</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="86">IDC_REGEXT_LANG_LIST</name></expr></argument>, <argument><expr><name pos:line="127" pos:column="108">LB_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="127" pos:column="122">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="127" pos:column="125">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><op:operator pos:line="129" pos:column="41">::</op:operator><name pos:line="129" pos:column="43">EnableWindow</name></name><argument_list pos:line="129" pos:column="55">(<argument><expr><call><name><op:operator pos:line="129" pos:column="56">::</op:operator><name pos:line="129" pos:column="58">GetDlgItem</name></name><argument_list pos:line="129" pos:column="68">(<argument><expr><name pos:line="129" pos:column="69">_hSelf</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="77">IDC_REMOVEEXT_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="129" pos:column="100">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="131" pos:column="41">if <condition pos:line="131" pos:column="44">(<expr><name pos:line="131" pos:column="45">langIndex</name> <op:operator pos:line="131" pos:column="55">!=</op:operator> <name pos:line="131" pos:column="58">LB_ERR</name></expr>)</condition><then pos:line="131" pos:column="65">
					<block pos:line="132" pos:column="41">{
						<for pos:line="133" pos:column="49">for (<init><decl><type><name pos:line="133" pos:column="54">int</name></type> <name pos:line="133" pos:column="58">i</name> <init pos:line="133" pos:column="60">= <expr><lit:literal type="number" pos:line="133" pos:column="62">1</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="133" pos:column="66">i</name> <op:operator pos:line="133" pos:column="68">&lt;</op:operator> <name pos:line="133" pos:column="70">nbExtMax</name></expr> ;</condition> <incr><expr><name pos:line="133" pos:column="81">i</name><op:operator pos:line="133" pos:column="82">++</op:operator></expr></incr>)
						<block pos:line="134" pos:column="49">{
							<if pos:line="135" pos:column="57">if <condition pos:line="135" pos:column="60">(<expr><op:operator pos:line="135" pos:column="61">!</op:operator><call><name pos:line="135" pos:column="62">generic_stricmp</name><argument_list pos:line="135" pos:column="77">(<argument><expr><name pos:line="135" pos:column="78">ext2Sup</name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="87">defExtArray</name><index pos:line="135" pos:column="98">[<expr><name pos:line="135" pos:column="99">langIndex</name></expr>]</index><index pos:line="135" pos:column="109">[<expr><name pos:line="135" pos:column="110">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="114">
							<block pos:line="136" pos:column="57">{
								<expr_stmt><expr><call><name><op:operator pos:line="137" pos:column="65">::</op:operator><name pos:line="137" pos:column="67">SendDlgItemMessage</name></name><argument_list pos:line="137" pos:column="85">(<argument><expr><name pos:line="137" pos:column="86">_hSelf</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="94">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="119">LB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="137" pos:column="133">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="137" pos:column="136">(</op:operator><name pos:line="137" pos:column="137">LPARAM</name><op:operator pos:line="137" pos:column="143">)</op:operator><name pos:line="137" pos:column="144">ext2Sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<return pos:line="138" pos:column="65">return <expr><name pos:line="138" pos:column="72">TRUE</name></expr>;</return>
							}</block></then></if>
						}</block></for>
					}</block></then></if>
					<return pos:line="142" pos:column="41">return <expr><name pos:line="142" pos:column="48">TRUE</name></expr>;</return>
				}</block>

				</case><case pos:line="145" pos:column="33">case <expr><name pos:line="145" pos:column="38">IDCANCEL</name></expr> :
					<expr_stmt><expr><call><name><op:operator pos:line="146" pos:column="41">::</op:operator><name pos:line="146" pos:column="43">EndDialog</name></name><argument_list pos:line="146" pos:column="52">(<argument><expr><name pos:line="146" pos:column="53">_hSelf</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="146" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="147" pos:column="41">return <expr><name pos:line="147" pos:column="48">TRUE</name></expr>;</return>

			</case>}</block></switch>

			<if pos:line="151" pos:column="25">if <condition pos:line="151" pos:column="28">(<expr><call><name pos:line="151" pos:column="29">HIWORD</name><argument_list pos:line="151" pos:column="35">(<argument><expr><name pos:line="151" pos:column="36">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="151" pos:column="44">==</op:operator> <name pos:line="151" pos:column="47">EN_CHANGE</name></expr>)</condition><then pos:line="151" pos:column="57">
            <block pos:line="152" pos:column="13">{
				<decl_stmt><decl><type><name pos:line="153" pos:column="33">TCHAR</name></type> <name><name pos:line="153" pos:column="39">text</name><index pos:line="153" pos:column="43">[<expr><name pos:line="153" pos:column="44">extNameMax</name></expr>]</index></name> <init pos:line="153" pos:column="56">= <expr><call><name pos:line="153" pos:column="58">TEXT</name><argument_list pos:line="153" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="63">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="154" pos:column="33">::</op:operator><name pos:line="154" pos:column="35">SendDlgItemMessage</name></name><argument_list pos:line="154" pos:column="53">(<argument><expr><name pos:line="154" pos:column="54">_hSelf</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="62">IDC_CUSTOMEXT_EDIT</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="82">WM_GETTEXT</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="94">extNameMax</name></expr></argument>, <argument><expr><op:operator pos:line="154" pos:column="106">(</op:operator><name pos:line="154" pos:column="107">LPARAM</name><op:operator pos:line="154" pos:column="113">)</op:operator><name pos:line="154" pos:column="114">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="155" pos:column="33">if <condition pos:line="155" pos:column="36">(<expr><op:operator pos:line="155" pos:column="37">(</op:operator><call><name pos:line="155" pos:column="38">lstrlen</name><argument_list pos:line="155" pos:column="45">(<argument><expr><name pos:line="155" pos:column="46">text</name></expr></argument>)</argument_list></call> <op:operator pos:line="155" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="155" pos:column="55">1</lit:literal><op:operator pos:line="155" pos:column="56">)</op:operator> <op:operator pos:line="155" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="155" pos:column="61">(</op:operator><name><name pos:line="155" pos:column="62">text</name><index pos:line="155" pos:column="66">[<expr><lit:literal type="number" pos:line="155" pos:column="67">0</lit:literal></expr>]</index></name> <op:operator pos:line="155" pos:column="70">!=</op:operator> <lit:literal type="char" pos:line="155" pos:column="73">'.'</lit:literal><op:operator pos:line="155" pos:column="76">)</op:operator></expr>)</condition><then pos:line="155" pos:column="78">
				<block pos:line="156" pos:column="33">{
					<expr_stmt><expr><name><name pos:line="157" pos:column="41">text</name><index pos:line="157" pos:column="45">[<expr><lit:literal type="number" pos:line="157" pos:column="46">1</lit:literal></expr>]</index></name> <op:operator pos:line="157" pos:column="49">=</op:operator> <name><name pos:line="157" pos:column="51">text</name><index pos:line="157" pos:column="55">[<expr><lit:literal type="number" pos:line="157" pos:column="56">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="158" pos:column="41">text</name><index pos:line="158" pos:column="45">[<expr><lit:literal type="number" pos:line="158" pos:column="46">0</lit:literal></expr>]</index></name> <op:operator pos:line="158" pos:column="49">=</op:operator> <lit:literal type="char" pos:line="158" pos:column="51">'.'</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="159" pos:column="41">text</name><index pos:line="159" pos:column="45">[<expr><lit:literal type="number" pos:line="159" pos:column="46">2</lit:literal></expr>]</index></name> <op:operator pos:line="159" pos:column="49">=</op:operator> <lit:literal type="char" pos:line="159" pos:column="51">'\0'</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="160" pos:column="41">::</op:operator><name pos:line="160" pos:column="43">SendDlgItemMessage</name></name><argument_list pos:line="160" pos:column="61">(<argument><expr><name pos:line="160" pos:column="62">_hSelf</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="70">IDC_CUSTOMEXT_EDIT</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="90">WM_SETTEXT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="160" pos:column="102">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="160" pos:column="105">(</op:operator><name pos:line="160" pos:column="106">LPARAM</name><op:operator pos:line="160" pos:column="112">)</op:operator><name pos:line="160" pos:column="113">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="161" pos:column="41">::</op:operator><name pos:line="161" pos:column="43">SendDlgItemMessage</name></name><argument_list pos:line="161" pos:column="61">(<argument><expr><name pos:line="161" pos:column="62">_hSelf</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="70">IDC_CUSTOMEXT_EDIT</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="90">EM_SETSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="161" pos:column="101">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="161" pos:column="104">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><op:operator pos:line="163" pos:column="33">::</op:operator><name pos:line="163" pos:column="35">EnableWindow</name></name><argument_list pos:line="163" pos:column="47">(<argument><expr><call><name><op:operator pos:line="163" pos:column="48">::</op:operator><name pos:line="163" pos:column="50">GetDlgItem</name></name><argument_list pos:line="163" pos:column="60">(<argument><expr><name pos:line="163" pos:column="61">_hSelf</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="69">IDC_ADDFROMLANGEXT_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="163" pos:column="97">(</op:operator><call><name pos:line="163" pos:column="98">lstrlen</name><argument_list pos:line="163" pos:column="105">(<argument><expr><name pos:line="163" pos:column="106">text</name></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="112">&gt;</op:operator> <lit:literal type="number" pos:line="163" pos:column="114">1</lit:literal><op:operator pos:line="163" pos:column="115">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="164" pos:column="33">return <expr><name pos:line="164" pos:column="40">TRUE</name></expr>;</return>
			}</block></then></if>

			<if pos:line="167" pos:column="25">if <condition pos:line="167" pos:column="28">(<expr><call><name pos:line="167" pos:column="29">HIWORD</name><argument_list pos:line="167" pos:column="35">(<argument><expr><name pos:line="167" pos:column="36">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="167" pos:column="44">==</op:operator> <name pos:line="167" pos:column="47">LBN_SELCHANGE</name></expr>)</condition><then pos:line="167" pos:column="61">
            <block pos:line="168" pos:column="13">{
				<decl_stmt><decl><type><name pos:line="169" pos:column="33">int</name></type> <name pos:line="169" pos:column="37">i</name> <init pos:line="169" pos:column="39">= <expr><call><name><op:operator pos:line="169" pos:column="41">::</op:operator><name pos:line="169" pos:column="43">SendDlgItemMessage</name></name><argument_list pos:line="169" pos:column="61">(<argument><expr><name pos:line="169" pos:column="62">_hSelf</name></expr></argument>, <argument><expr><call><name pos:line="169" pos:column="70">LOWORD</name><argument_list pos:line="169" pos:column="76">(<argument><expr><name pos:line="169" pos:column="77">wParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="169" pos:column="86">LB_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="169" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="169" pos:column="103">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="170" pos:column="33">if <condition pos:line="170" pos:column="36">(<expr><call><name pos:line="170" pos:column="37">LOWORD</name><argument_list pos:line="170" pos:column="43">(<argument><expr><name pos:line="170" pos:column="44">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="170" pos:column="52">==</op:operator> <name pos:line="170" pos:column="55">IDC_REGEXT_LANG_LIST</name></expr>)</condition><then pos:line="170" pos:column="76">
				<block pos:line="171" pos:column="33">{
					<if pos:line="172" pos:column="41">if <condition pos:line="172" pos:column="44">(<expr><name pos:line="172" pos:column="45">i</name> <op:operator pos:line="172" pos:column="47">!=</op:operator> <name pos:line="172" pos:column="50">LB_ERR</name></expr>)</condition><then pos:line="172" pos:column="57">
					<block pos:line="173" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="174" pos:column="49">TCHAR</name></type> <name><name pos:line="174" pos:column="55">itemName</name><index pos:line="174" pos:column="63">[<expr><lit:literal type="number" pos:line="174" pos:column="64">32</lit:literal></expr>]</index></name></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><op:operator pos:line="175" pos:column="49">::</op:operator><name pos:line="175" pos:column="51">SendDlgItemMessage</name></name><argument_list pos:line="175" pos:column="69">(<argument><expr><name pos:line="175" pos:column="70">_hSelf</name></expr></argument>, <argument><expr><call><name pos:line="175" pos:column="78">LOWORD</name><argument_list pos:line="175" pos:column="84">(<argument><expr><name pos:line="175" pos:column="85">wParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="175" pos:column="94">LB_GETTEXT</name></expr></argument>, <argument><expr><name pos:line="175" pos:column="106">i</name></expr></argument>, <argument><expr><op:operator pos:line="175" pos:column="109">(</op:operator><name pos:line="175" pos:column="110">LPARAM</name><op:operator pos:line="175" pos:column="116">)</op:operator><name pos:line="175" pos:column="117">itemName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if pos:line="177" pos:column="49">if <condition pos:line="177" pos:column="52">(<expr><op:operator pos:line="177" pos:column="53">!</op:operator><call><name pos:line="177" pos:column="54">generic_stricmp</name><argument_list pos:line="177" pos:column="69">(<argument><expr><name><name pos:line="177" pos:column="70">defExtArray</name><index pos:line="177" pos:column="81">[<expr><name pos:line="177" pos:column="82">nbSupportedLang</name><op:operator pos:line="177" pos:column="97">-</op:operator><lit:literal type="number" pos:line="177" pos:column="98">1</lit:literal></expr>]</index><index pos:line="177" pos:column="100">[<expr><lit:literal type="number" pos:line="177" pos:column="101">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="105">itemName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="177" pos:column="115">
						<block pos:line="178" pos:column="49">{
							<expr_stmt><expr><call><name><op:operator pos:line="179" pos:column="57">::</op:operator><name pos:line="179" pos:column="59">ShowWindow</name></name><argument_list pos:line="179" pos:column="69">(<argument><expr><call><name><op:operator pos:line="179" pos:column="70">::</op:operator><name pos:line="179" pos:column="72">GetDlgItem</name></name><argument_list pos:line="179" pos:column="82">(<argument><expr><name pos:line="179" pos:column="83">_hSelf</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="91">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="179" pos:column="117">SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><op:operator pos:line="180" pos:column="57">::</op:operator><name pos:line="180" pos:column="59">ShowWindow</name></name><argument_list pos:line="180" pos:column="69">(<argument><expr><call><name><op:operator pos:line="180" pos:column="70">::</op:operator><name pos:line="180" pos:column="72">GetDlgItem</name></name><argument_list pos:line="180" pos:column="82">(<argument><expr><name pos:line="180" pos:column="83">_hSelf</name></expr></argument>, <argument><expr><name pos:line="180" pos:column="91">IDC_CUSTOMEXT_EDIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="180" pos:column="112">SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="181" pos:column="57">_isCustomize</name> <op:operator pos:line="181" pos:column="70">=</op:operator> <lit:literal type="boolean" pos:line="181" pos:column="72">true</lit:literal></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="183" pos:column="49">else
						<block pos:line="184" pos:column="49">{
							<if pos:line="185" pos:column="57">if <condition pos:line="185" pos:column="60">(<expr><name pos:line="185" pos:column="61">_isCustomize</name></expr>)</condition><then pos:line="185" pos:column="74">
							<block pos:line="186" pos:column="57">{
								<expr_stmt><expr><call><name><op:operator pos:line="187" pos:column="65">::</op:operator><name pos:line="187" pos:column="67">ShowWindow</name></name><argument_list pos:line="187" pos:column="77">(<argument><expr><call><name><op:operator pos:line="187" pos:column="78">::</op:operator><name pos:line="187" pos:column="80">GetDlgItem</name></name><argument_list pos:line="187" pos:column="90">(<argument><expr><name pos:line="187" pos:column="91">_hSelf</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="99">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="187" pos:column="125">SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><op:operator pos:line="188" pos:column="65">::</op:operator><name pos:line="188" pos:column="67">ShowWindow</name></name><argument_list pos:line="188" pos:column="77">(<argument><expr><call><name><op:operator pos:line="188" pos:column="78">::</op:operator><name pos:line="188" pos:column="80">GetDlgItem</name></name><argument_list pos:line="188" pos:column="90">(<argument><expr><name pos:line="188" pos:column="91">_hSelf</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="99">IDC_CUSTOMEXT_EDIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="188" pos:column="120">SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								
								<expr_stmt><expr><name pos:line="190" pos:column="65">_isCustomize</name> <op:operator pos:line="190" pos:column="78">=</op:operator> <lit:literal type="boolean" pos:line="190" pos:column="80">false</lit:literal></expr>;</expr_stmt>
							}</block></then></if>
							<decl_stmt><decl><type><name pos:line="192" pos:column="57">int</name></type> <name pos:line="192" pos:column="61">count</name> <init pos:line="192" pos:column="67">= <expr><call><name><op:operator pos:line="192" pos:column="69">::</op:operator><name pos:line="192" pos:column="71">SendDlgItemMessage</name></name><argument_list pos:line="192" pos:column="89">(<argument><expr><name pos:line="192" pos:column="90">_hSelf</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="98">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="123">LB_GETCOUNT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="136">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="139">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<for pos:line="193" pos:column="57">for (<init><expr><name pos:line="193" pos:column="62">count</name> <op:operator pos:line="193" pos:column="68">-=</op:operator> <lit:literal type="number" pos:line="193" pos:column="71">1</lit:literal></expr> ;</init> <condition><expr><name pos:line="193" pos:column="75">count</name> <op:operator pos:line="193" pos:column="81">&gt;=</op:operator> <lit:literal type="number" pos:line="193" pos:column="84">0</lit:literal></expr> ;</condition> <incr><expr><name pos:line="193" pos:column="88">count</name><op:operator pos:line="193" pos:column="93">--</op:operator></expr></incr>)
								<expr_stmt><expr><call><name><op:operator pos:line="194" pos:column="65">::</op:operator><name pos:line="194" pos:column="67">SendDlgItemMessage</name></name><argument_list pos:line="194" pos:column="85">(<argument><expr><name pos:line="194" pos:column="86">_hSelf</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="94">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="119">LB_DELETESTRING</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="136">count</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="194" pos:column="143">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

							<for pos:line="196" pos:column="57">for (<init><decl><type><name pos:line="196" pos:column="62">int</name></type> <name pos:line="196" pos:column="66">j</name> <init pos:line="196" pos:column="68">= <expr><lit:literal type="number" pos:line="196" pos:column="70">1</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="196" pos:column="74">j</name> <op:operator pos:line="196" pos:column="76">&lt;</op:operator> <name pos:line="196" pos:column="78">nbExtMax</name></expr> ;</condition> <incr><expr><name pos:line="196" pos:column="89">j</name><op:operator pos:line="196" pos:column="90">++</op:operator></expr></incr>)
								<if pos:line="197" pos:column="65">if <condition pos:line="197" pos:column="68">(<expr><call><name pos:line="197" pos:column="69">lstrcmp</name><argument_list pos:line="197" pos:column="76">(<argument><expr><call><name pos:line="197" pos:column="77">TEXT</name><argument_list pos:line="197" pos:column="81">(<argument><expr><lit:literal type="string" pos:line="197" pos:column="82">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="197" pos:column="87">defExtArray</name><index pos:line="197" pos:column="98">[<expr><name pos:line="197" pos:column="99">i</name></expr>]</index><index pos:line="197" pos:column="101">[<expr><name pos:line="197" pos:column="102">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="197" pos:column="106">
								<block pos:line="198" pos:column="65">{
									<decl_stmt><decl><type><name pos:line="199" pos:column="73">int</name></type> <name pos:line="199" pos:column="77">index</name> <init pos:line="199" pos:column="83">= <expr><call><name><op:operator pos:line="199" pos:column="85">::</op:operator><name pos:line="199" pos:column="87">SendDlgItemMessage</name></name><argument_list pos:line="199" pos:column="105">(<argument><expr><name pos:line="199" pos:column="106">_hSelf</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="114">IDC_REGEXT_REGISTEREDEXTS_LIST</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="146">LB_FINDSTRINGEXACT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="199" pos:column="166">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="199" pos:column="169">(</op:operator><name pos:line="199" pos:column="170">LPARAM</name><op:operator pos:line="199" pos:column="176">)</op:operator><name><name pos:line="199" pos:column="177">defExtArray</name><index pos:line="199" pos:column="188">[<expr><name pos:line="199" pos:column="189">i</name></expr>]</index><index pos:line="199" pos:column="191">[<expr><name pos:line="199" pos:column="192">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<if pos:line="200" pos:column="73">if <condition pos:line="200" pos:column="76">(<expr><name pos:line="200" pos:column="77">index</name> <op:operator pos:line="200" pos:column="83">==</op:operator> <op:operator pos:line="200" pos:column="86">-</op:operator><lit:literal type="number" pos:line="200" pos:column="87">1</lit:literal></expr>)</condition><then pos:line="200" pos:column="89">
										<expr_stmt><expr><call><name><op:operator pos:line="201" pos:column="81">::</op:operator><name pos:line="201" pos:column="83">SendDlgItemMessage</name></name><argument_list pos:line="201" pos:column="101">(<argument><expr><name pos:line="201" pos:column="102">_hSelf</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="110">IDC_REGEXT_LANGEXT_LIST</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="135">LB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="201" pos:column="149">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="201" pos:column="152">(</op:operator><name pos:line="201" pos:column="153">LPARAM</name><op:operator pos:line="201" pos:column="159">)</op:operator><name><name pos:line="201" pos:column="160">defExtArray</name><index pos:line="201" pos:column="171">[<expr><name pos:line="201" pos:column="172">i</name></expr>]</index><index pos:line="201" pos:column="174">[<expr><name pos:line="201" pos:column="175">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
								}</block></then></if></for>
						}</block></else></if>

						<expr_stmt><expr><call><name><op:operator pos:line="205" pos:column="49">::</op:operator><name pos:line="205" pos:column="51">EnableWindow</name></name><argument_list pos:line="205" pos:column="63">(<argument><expr><call><name><op:operator pos:line="205" pos:column="64">::</op:operator><name pos:line="205" pos:column="66">GetDlgItem</name></name><argument_list pos:line="205" pos:column="76">(<argument><expr><name pos:line="205" pos:column="77">_hSelf</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="85">IDC_ADDFROMLANGEXT_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="205" pos:column="113">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then>
				
				<else pos:line="209" pos:column="33">else <if pos:line="209" pos:column="38">if <condition pos:line="209" pos:column="41">(<expr><call><name pos:line="209" pos:column="42">LOWORD</name><argument_list pos:line="209" pos:column="48">(<argument><expr><name pos:line="209" pos:column="49">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="209" pos:column="57">==</op:operator> <name pos:line="209" pos:column="60">IDC_REGEXT_LANGEXT_LIST</name></expr>)</condition><then pos:line="209" pos:column="84">
				<block pos:line="210" pos:column="33">{
					<if pos:line="211" pos:column="41">if <condition pos:line="211" pos:column="44">(<expr><name pos:line="211" pos:column="45">i</name> <op:operator pos:line="211" pos:column="47">!=</op:operator> <name pos:line="211" pos:column="50">LB_ERR</name></expr>)</condition><then pos:line="211" pos:column="57">
						<expr_stmt><expr><call><name><op:operator pos:line="212" pos:column="49">::</op:operator><name pos:line="212" pos:column="51">EnableWindow</name></name><argument_list pos:line="212" pos:column="63">(<argument><expr><call><name><op:operator pos:line="212" pos:column="64">::</op:operator><name pos:line="212" pos:column="66">GetDlgItem</name></name><argument_list pos:line="212" pos:column="76">(<argument><expr><name pos:line="212" pos:column="77">_hSelf</name></expr></argument>, <argument><expr><name pos:line="212" pos:column="85">IDC_ADDFROMLANGEXT_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="212" pos:column="113">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

				}</block></then>

				<else pos:line="216" pos:column="33">else <if pos:line="216" pos:column="38">if <condition pos:line="216" pos:column="41">(<expr><call><name pos:line="216" pos:column="42">LOWORD</name><argument_list pos:line="216" pos:column="48">(<argument><expr><name pos:line="216" pos:column="49">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="216" pos:column="57">==</op:operator> <name pos:line="216" pos:column="60">IDC_REGEXT_REGISTEREDEXTS_LIST</name></expr>)</condition><then pos:line="216" pos:column="91">
				<block pos:line="217" pos:column="33">{
					<if pos:line="218" pos:column="41">if <condition pos:line="218" pos:column="44">(<expr><name pos:line="218" pos:column="45">i</name> <op:operator pos:line="218" pos:column="47">!=</op:operator> <name pos:line="218" pos:column="50">LB_ERR</name></expr>)</condition><then pos:line="218" pos:column="57">
						<expr_stmt><expr><call><name><op:operator pos:line="219" pos:column="49">::</op:operator><name pos:line="219" pos:column="51">EnableWindow</name></name><argument_list pos:line="219" pos:column="63">(<argument><expr><call><name><op:operator pos:line="219" pos:column="64">::</op:operator><name pos:line="219" pos:column="66">GetDlgItem</name></name><argument_list pos:line="219" pos:column="76">(<argument><expr><name pos:line="219" pos:column="77">_hSelf</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="85">IDC_REMOVEEXT_BUTTON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="219" pos:column="108">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				}</block></then></if></else></if></else></if>
			}</block></then></if>
		}</block>
		</case><default pos:line="223" pos:column="17">default :
			<return pos:line="224" pos:column="25">return <expr><name pos:line="224" pos:column="32">FALSE</name></expr>;</return>
	</default>}</block></switch>
	<comment type="line" pos:line="226" pos:column="9">//return FALSE;</comment>
}</block></function>

<function><type><name pos:line="229" pos:column="1">void</name></type> <name><name pos:line="229" pos:column="6">RegExtDlg</name><op:operator pos:line="229" pos:column="15">::</op:operator><name pos:line="229" pos:column="17">getRegisteredExts</name></name><parameter_list pos:line="229" pos:column="34">()</parameter_list>
<block pos:line="230" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="231" pos:column="9">int</name></type> <name pos:line="231" pos:column="13">nbRegisteredKey</name> <init pos:line="231" pos:column="29">= <expr><call><name pos:line="231" pos:column="31">getNbSubKey</name><argument_list pos:line="231" pos:column="42">(<argument><expr><name pos:line="231" pos:column="43">HKEY_CLASSES_ROOT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="232" pos:column="9">for (<init><decl><type><name pos:line="232" pos:column="14">int</name></type> <name pos:line="232" pos:column="18">i</name> <init pos:line="232" pos:column="20">= <expr><lit:literal type="number" pos:line="232" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="232" pos:column="26">i</name> <op:operator pos:line="232" pos:column="28">&lt;</op:operator> <name pos:line="232" pos:column="30">nbRegisteredKey</name></expr> ;</condition> <incr><expr><name pos:line="232" pos:column="48">i</name><op:operator pos:line="232" pos:column="49">++</op:operator></expr></incr>)
	<block pos:line="233" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="234" pos:column="17">TCHAR</name></type> <name><name pos:line="234" pos:column="23">extName</name><index pos:line="234" pos:column="30">[<expr><name pos:line="234" pos:column="31">extNameLen</name></expr>]</index></name></decl>;</decl_stmt>
		<comment type="line" pos:line="235" pos:column="17">//FILETIME fileTime;</comment>
		<decl_stmt><decl><type><name pos:line="236" pos:column="17">int</name></type> <name pos:line="236" pos:column="21">extNameActualLen</name> <init pos:line="236" pos:column="38">= <expr><name pos:line="236" pos:column="40">extNameLen</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="237" pos:column="17">int</name></type> <name pos:line="237" pos:column="21">res</name> <init pos:line="237" pos:column="25">= <expr><call><name><op:operator pos:line="237" pos:column="27">::</op:operator><name pos:line="237" pos:column="29">RegEnumKeyEx</name></name><argument_list pos:line="237" pos:column="41">(<argument><expr><name pos:line="237" pos:column="42">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="61">i</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="64">extName</name></expr></argument>, <argument><expr><op:operator pos:line="237" pos:column="73">(</op:operator><name pos:line="237" pos:column="74">LPDWORD</name><op:operator pos:line="237" pos:column="81">)</op:operator><op:operator pos:line="237" pos:column="82">&amp;</op:operator><name pos:line="237" pos:column="83">extNameActualLen</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="101">NULL</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="107">NULL</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="113">NULL</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="119">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><op:operator pos:line="238" pos:column="21">(</op:operator><name pos:line="238" pos:column="22">res</name> <op:operator pos:line="238" pos:column="26">==</op:operator> <name pos:line="238" pos:column="29">ERROR_SUCCESS</name><op:operator pos:line="238" pos:column="42">)</op:operator> <op:operator pos:line="238" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="238" pos:column="47">(</op:operator><name><name pos:line="238" pos:column="48">extName</name><index pos:line="238" pos:column="55">[<expr><lit:literal type="number" pos:line="238" pos:column="56">0</lit:literal></expr>]</index></name> <op:operator pos:line="238" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="238" pos:column="62">'.'</lit:literal><op:operator pos:line="238" pos:column="65">)</op:operator></expr>)</condition><then pos:line="238" pos:column="67">
		<block pos:line="239" pos:column="17">{
			<comment type="line" pos:line="240" pos:column="25">//TCHAR valName[extNameLen];</comment>
			<decl_stmt><decl><type><name pos:line="241" pos:column="25">TCHAR</name></type> <name><name pos:line="241" pos:column="31">valData</name><index pos:line="241" pos:column="38">[<expr><name pos:line="241" pos:column="39">extNameLen</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="242" pos:column="25">int</name></type> <name pos:line="242" pos:column="29">valDataLen</name> <init pos:line="242" pos:column="40">= <expr><name pos:line="242" pos:column="42">extNameLen</name> <op:operator pos:line="242" pos:column="53">*</op:operator> <sizeof pos:line="242" pos:column="55">sizeof<argument_list pos:line="242" pos:column="61">(<argument><expr><name pos:line="242" pos:column="62">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="243" pos:column="25">int</name></type> <name pos:line="243" pos:column="29">valType</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="244" pos:column="25">HKEY</name></type> <name pos:line="244" pos:column="30">hKey2Check</name></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="245" pos:column="25">extNameActualLen</name> <op:operator pos:line="245" pos:column="42">=</op:operator> <name pos:line="245" pos:column="44">extNameLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="246" pos:column="25">::</op:operator><name pos:line="246" pos:column="27">RegOpenKeyEx</name></name><argument_list pos:line="246" pos:column="39">(<argument><expr><name pos:line="246" pos:column="40">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="59">extName</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="246" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><name pos:line="246" pos:column="71">KEY_ALL_ACCESS</name></expr></argument>, <argument><expr><op:operator pos:line="246" pos:column="87">&amp;</op:operator><name pos:line="246" pos:column="88">hKey2Check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="247" pos:column="25">::</op:operator><name pos:line="247" pos:column="27">RegQueryValueEx</name></name><argument_list pos:line="247" pos:column="42">(<argument><expr><name pos:line="247" pos:column="43">hKey2Check</name></expr></argument>, <argument><expr><call><name pos:line="247" pos:column="55">TEXT</name><argument_list pos:line="247" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="60">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="247" pos:column="65">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="247" pos:column="71">(</op:operator><name pos:line="247" pos:column="72">LPDWORD</name><op:operator pos:line="247" pos:column="79">)</op:operator><op:operator pos:line="247" pos:column="80">&amp;</op:operator><name pos:line="247" pos:column="81">valType</name></expr></argument>, <argument><expr><op:operator pos:line="247" pos:column="90">(</op:operator><name pos:line="247" pos:column="91">LPBYTE</name><op:operator pos:line="247" pos:column="97">)</op:operator><name pos:line="247" pos:column="98">valData</name></expr></argument>, <argument><expr><op:operator pos:line="247" pos:column="107">(</op:operator><name pos:line="247" pos:column="108">LPDWORD</name><op:operator pos:line="247" pos:column="115">)</op:operator><op:operator pos:line="247" pos:column="116">&amp;</op:operator><name pos:line="247" pos:column="117">valDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="248" pos:column="25">//::RegEnumValue(hKey2Check, 0, valName, (LPDWORD)&amp;extNameActualLen, NULL, (LPDWORD)&amp;valType, (LPBYTE)valData, (LPDWORD)&amp;valDataLen);</comment>
			<if pos:line="249" pos:column="25">if <condition pos:line="249" pos:column="28">(<expr><op:operator pos:line="249" pos:column="29">(</op:operator><name pos:line="249" pos:column="30">valType</name> <op:operator pos:line="249" pos:column="38">==</op:operator> <name pos:line="249" pos:column="41">REG_SZ</name><op:operator pos:line="249" pos:column="47">)</op:operator> <op:operator pos:line="249" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="249" pos:column="52">(</op:operator><op:operator pos:line="249" pos:column="53">!</op:operator><call><name pos:line="249" pos:column="54">lstrcmp</name><argument_list pos:line="249" pos:column="61">(<argument><expr><name pos:line="249" pos:column="62">valData</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="71">nppName</name></expr></argument>)</argument_list></call><op:operator pos:line="249" pos:column="79">)</op:operator></expr>)</condition><then pos:line="249" pos:column="81">
				<expr_stmt><expr><call><name><op:operator pos:line="250" pos:column="33">::</op:operator><name pos:line="250" pos:column="35">SendDlgItemMessage</name></name><argument_list pos:line="250" pos:column="53">(<argument><expr><name pos:line="250" pos:column="54">_hSelf</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="62">IDC_REGEXT_REGISTEREDEXTS_LIST</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="94">LB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="250" pos:column="108">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="250" pos:column="111">(</op:operator><name pos:line="250" pos:column="112">LPARAM</name><op:operator pos:line="250" pos:column="118">)</op:operator><name pos:line="250" pos:column="119">extName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name><op:operator pos:line="251" pos:column="25">::</op:operator><name pos:line="251" pos:column="27">RegCloseKey</name></name><argument_list pos:line="251" pos:column="38">(<argument><expr><name pos:line="251" pos:column="39">hKey2Check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="256" pos:column="1">void</name></type> <name><name pos:line="256" pos:column="6">RegExtDlg</name><op:operator pos:line="256" pos:column="15">::</op:operator><name pos:line="256" pos:column="17">getDefSupportedExts</name></name><parameter_list pos:line="256" pos:column="36">()</parameter_list>
<block pos:line="257" pos:column="1">{
	<for pos:line="258" pos:column="9">for (<init><decl><type><name pos:line="258" pos:column="14">int</name></type> <name pos:line="258" pos:column="18">i</name> <init pos:line="258" pos:column="20">= <expr><lit:literal type="number" pos:line="258" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="258" pos:column="26">i</name> <op:operator pos:line="258" pos:column="28">&lt;</op:operator> <name pos:line="258" pos:column="30">nbSupportedLang</name></expr> ;</condition> <incr><expr><name pos:line="258" pos:column="48">i</name><op:operator pos:line="258" pos:column="49">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name><op:operator pos:line="259" pos:column="17">::</op:operator><name pos:line="259" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="259" pos:column="37">(<argument><expr><name pos:line="259" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="46">IDC_REGEXT_LANG_LIST</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="68">LB_ADDSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="259" pos:column="82">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="259" pos:column="85">(</op:operator><name pos:line="259" pos:column="86">LPARAM</name><op:operator pos:line="259" pos:column="92">)</op:operator><name><name pos:line="259" pos:column="93">defExtArray</name><index pos:line="259" pos:column="104">[<expr><name pos:line="259" pos:column="105">i</name></expr>]</index><index pos:line="259" pos:column="107">[<expr><lit:literal type="number" pos:line="259" pos:column="108">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>


<function><type><name pos:line="263" pos:column="1">void</name></type> <name><name pos:line="263" pos:column="6">RegExtDlg</name><op:operator pos:line="263" pos:column="15">::</op:operator><name pos:line="263" pos:column="17">addExt</name></name><parameter_list pos:line="263" pos:column="23">(<param><decl><type><name pos:line="263" pos:column="24">TCHAR</name> <type:modifier pos:line="263" pos:column="30">*</type:modifier></type><name pos:line="263" pos:column="31">ext</name></decl></param>)</parameter_list>
<block pos:line="264" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="265" pos:column="5">HKEY</name></type>  <name pos:line="265" pos:column="11">hKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="266" pos:column="5">DWORD</name></type> <name pos:line="266" pos:column="11">dwDisp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="267" pos:column="5">long</name></type>  <name pos:line="267" pos:column="11">nRet</name></decl>;</decl_stmt>
    
	<expr_stmt><expr><name pos:line="269" pos:column="9">nRet</name> <op:operator pos:line="269" pos:column="14">=</op:operator> <call><name><op:operator pos:line="269" pos:column="16">::</op:operator><name pos:line="269" pos:column="18">RegCreateKeyEx</name></name><argument_list pos:line="269" pos:column="32">(<argument><expr><name pos:line="269" pos:column="33">HKEY_CLASSES_ROOT</name></expr></argument>,
                <argument><expr><name pos:line="270" pos:column="17">ext</name></expr></argument>,
                <argument><expr><lit:literal type="number" pos:line="271" pos:column="17">0</lit:literal></expr></argument>,
                <argument><expr><name pos:line="272" pos:column="17">NULL</name></expr></argument>,
                <argument><expr><lit:literal type="number" pos:line="273" pos:column="17">0</lit:literal></expr></argument>,
                <argument><expr><name pos:line="274" pos:column="17">KEY_ALL_ACCESS</name></expr></argument>,
                <argument><expr><name pos:line="275" pos:column="17">NULL</name></expr></argument>,
                <argument><expr><op:operator pos:line="276" pos:column="17">&amp;</op:operator><name pos:line="276" pos:column="18">hKey</name></expr></argument>,
                <argument><expr><op:operator pos:line="277" pos:column="17">&amp;</op:operator><name pos:line="277" pos:column="18">dwDisp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if pos:line="279" pos:column="5">if <condition pos:line="279" pos:column="8">(<expr><name pos:line="279" pos:column="9">nRet</name> <op:operator pos:line="279" pos:column="14">==</op:operator> <name pos:line="279" pos:column="17">ERROR_SUCCESS</name></expr>)</condition><then pos:line="279" pos:column="31">
    <block pos:line="280" pos:column="5">{
		<decl_stmt><decl><type><name pos:line="281" pos:column="17">TCHAR</name></type> <name><name pos:line="281" pos:column="23">valData</name><index pos:line="281" pos:column="30">[<expr><name pos:line="281" pos:column="31">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="282" pos:column="17">int</name></type> <name pos:line="282" pos:column="21">valDataLen</name> <init pos:line="282" pos:column="32">= <expr><name pos:line="282" pos:column="34">MAX_PATH</name> <op:operator pos:line="282" pos:column="43">*</op:operator> <sizeof pos:line="282" pos:column="45">sizeof<argument_list pos:line="282" pos:column="51">(<argument><expr><name pos:line="282" pos:column="52">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>		

		<if pos:line="284" pos:column="17">if <condition pos:line="284" pos:column="20">(<expr><name pos:line="284" pos:column="21">dwDisp</name> <op:operator pos:line="284" pos:column="28">==</op:operator> <name pos:line="284" pos:column="31">REG_OPENED_EXISTING_KEY</name></expr>)</condition><then pos:line="284" pos:column="55">
		<block pos:line="285" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="286" pos:column="25">int</name></type> <name pos:line="286" pos:column="29">res</name> <init pos:line="286" pos:column="33">= <expr><call><name><op:operator pos:line="286" pos:column="35">::</op:operator><name pos:line="286" pos:column="37">RegQueryValueEx</name></name><argument_list pos:line="286" pos:column="52">(<argument><expr><name pos:line="286" pos:column="53">hKey</name></expr></argument>, <argument><expr><call><name pos:line="286" pos:column="59">TEXT</name><argument_list pos:line="286" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="286" pos:column="64">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="286" pos:column="69">NULL</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="75">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="286" pos:column="81">(</op:operator><name pos:line="286" pos:column="82">LPBYTE</name><op:operator pos:line="286" pos:column="88">)</op:operator><name pos:line="286" pos:column="89">valData</name></expr></argument>, <argument><expr><op:operator pos:line="286" pos:column="98">(</op:operator><name pos:line="286" pos:column="99">LPDWORD</name><op:operator pos:line="286" pos:column="106">)</op:operator><op:operator pos:line="286" pos:column="107">&amp;</op:operator><name pos:line="286" pos:column="108">valDataLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="287" pos:column="25">if <condition pos:line="287" pos:column="28">(<expr><name pos:line="287" pos:column="29">res</name> <op:operator pos:line="287" pos:column="33">==</op:operator> <name pos:line="287" pos:column="36">ERROR_SUCCESS</name></expr>)</condition><then pos:line="287" pos:column="50">
				<expr_stmt><expr><call><name><op:operator pos:line="288" pos:column="33">::</op:operator><name pos:line="288" pos:column="35">RegSetValueEx</name></name><argument_list pos:line="288" pos:column="48">(<argument><expr><name pos:line="288" pos:column="49">hKey</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="55">nppBackup</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="288" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><name pos:line="288" pos:column="69">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="288" pos:column="77">(</op:operator><name pos:line="288" pos:column="78">LPBYTE</name><op:operator pos:line="288" pos:column="84">)</op:operator><name pos:line="288" pos:column="85">valData</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="94">valDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name><op:operator pos:line="290" pos:column="17">::</op:operator><name pos:line="290" pos:column="19">RegSetValueEx</name></name><argument_list pos:line="290" pos:column="32">(<argument><expr><name pos:line="290" pos:column="33">hKey</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="39">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="290" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><name pos:line="290" pos:column="48">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="290" pos:column="56">(</op:operator><name pos:line="290" pos:column="57">LPBYTE</name><op:operator pos:line="290" pos:column="63">)</op:operator><name pos:line="290" pos:column="64">nppName</name></expr></argument>, <argument><expr><op:operator pos:line="290" pos:column="73">(</op:operator><call><name pos:line="290" pos:column="74">lstrlen</name><argument_list pos:line="290" pos:column="81">(<argument><expr><name pos:line="290" pos:column="82">nppName</name></expr></argument>)</argument_list></call><op:operator pos:line="290" pos:column="90">+</op:operator><lit:literal type="number" pos:line="290" pos:column="91">1</lit:literal><op:operator pos:line="290" pos:column="92">)</op:operator><op:operator pos:line="290" pos:column="93">*</op:operator><sizeof pos:line="290" pos:column="94">sizeof<argument_list pos:line="290" pos:column="100">(<argument><expr><name pos:line="290" pos:column="101">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><op:operator pos:line="292" pos:column="17">::</op:operator><name pos:line="292" pos:column="19">RegCloseKey</name></name><argument_list pos:line="292" pos:column="30">(<argument><expr><name pos:line="292" pos:column="31">hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name pos:line="296" pos:column="1">bool</name></type> <name><name pos:line="296" pos:column="6">RegExtDlg</name><op:operator pos:line="296" pos:column="15">::</op:operator><name pos:line="296" pos:column="17">deleteExts</name></name><parameter_list pos:line="296" pos:column="27">(<param><decl><type><specifier pos:line="296" pos:column="28">const</specifier> <name pos:line="296" pos:column="34">TCHAR</name> <type:modifier pos:line="296" pos:column="40">*</type:modifier></type><name pos:line="296" pos:column="41">ext2Delete</name></decl></param>)</parameter_list>
<block pos:line="297" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="298" pos:column="9">HKEY</name></type> <name pos:line="298" pos:column="14">hKey</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="299" pos:column="9">::</op:operator><name pos:line="299" pos:column="11">RegOpenKeyEx</name></name><argument_list pos:line="299" pos:column="23">(<argument><expr><name pos:line="299" pos:column="24">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="43">ext2Delete</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="299" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><name pos:line="299" pos:column="58">KEY_ALL_ACCESS</name></expr></argument>, <argument><expr><op:operator pos:line="299" pos:column="74">&amp;</op:operator><name pos:line="299" pos:column="75">hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="301" pos:column="9">int</name></type> <name pos:line="301" pos:column="13">nbValue</name> <init pos:line="301" pos:column="21">= <expr><call><name pos:line="301" pos:column="23">getNbSubValue</name><argument_list pos:line="301" pos:column="36">(<argument><expr><name pos:line="301" pos:column="37">hKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="302" pos:column="9">int</name></type> <name pos:line="302" pos:column="13">nbSubkey</name> <init pos:line="302" pos:column="22">= <expr><call><name pos:line="302" pos:column="24">getNbSubKey</name><argument_list pos:line="302" pos:column="35">(<argument><expr><name pos:line="302" pos:column="36">hKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="304" pos:column="9">if <condition pos:line="304" pos:column="12">(<expr><op:operator pos:line="304" pos:column="13">(</op:operator><name pos:line="304" pos:column="14">nbValue</name> <op:operator pos:line="304" pos:column="22">&lt;=</op:operator> <lit:literal type="number" pos:line="304" pos:column="25">1</lit:literal><op:operator pos:line="304" pos:column="26">)</op:operator> <op:operator pos:line="304" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="304" pos:column="31">(</op:operator><op:operator pos:line="304" pos:column="32">!</op:operator><name pos:line="304" pos:column="33">nbSubkey</name><op:operator pos:line="304" pos:column="41">)</op:operator></expr>)</condition><then pos:line="304" pos:column="43">
	<block pos:line="305" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="306" pos:column="17">TCHAR</name></type> <name><name pos:line="306" pos:column="23">subKey</name><index pos:line="306" pos:column="29">[<expr><lit:literal type="number" pos:line="306" pos:column="30">32</lit:literal></expr>]</index></name> <init pos:line="306" pos:column="34">= <expr><call><name pos:line="306" pos:column="36">TEXT</name><argument_list pos:line="306" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="306" pos:column="41">"\\"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="307" pos:column="17">lstrcat</name><argument_list pos:line="307" pos:column="24">(<argument><expr><name pos:line="307" pos:column="25">subKey</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="33">ext2Delete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="308" pos:column="17">::</op:operator><name pos:line="308" pos:column="19">RegDeleteKey</name></name><argument_list pos:line="308" pos:column="31">(<argument><expr><name pos:line="308" pos:column="32">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="51">subKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="310" pos:column="9">else
	<block pos:line="311" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="312" pos:column="17">TCHAR</name></type> <name><name pos:line="312" pos:column="23">valData</name><index pos:line="312" pos:column="30">[<expr><name pos:line="312" pos:column="31">extNameLen</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="313" pos:column="17">int</name></type> <name pos:line="313" pos:column="21">valDataLen</name> <init pos:line="313" pos:column="32">= <expr><name pos:line="313" pos:column="34">extNameLen</name><op:operator pos:line="313" pos:column="44">*</op:operator><sizeof pos:line="313" pos:column="45">sizeof<argument_list pos:line="313" pos:column="51">(<argument><expr><name pos:line="313" pos:column="52">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="314" pos:column="17">int</name></type> <name pos:line="314" pos:column="21">valType</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="315" pos:column="17">int</name></type> <name pos:line="315" pos:column="21">res</name> <init pos:line="315" pos:column="25">= <expr><call><name><op:operator pos:line="315" pos:column="27">::</op:operator><name pos:line="315" pos:column="29">RegQueryValueEx</name></name><argument_list pos:line="315" pos:column="44">(<argument><expr><name pos:line="315" pos:column="45">hKey</name></expr></argument>, <argument><expr><name pos:line="315" pos:column="51">nppBackup</name></expr></argument>, <argument><expr><name pos:line="315" pos:column="62">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="315" pos:column="68">(</op:operator><name pos:line="315" pos:column="69">LPDWORD</name><op:operator pos:line="315" pos:column="76">)</op:operator><op:operator pos:line="315" pos:column="77">&amp;</op:operator><name pos:line="315" pos:column="78">valType</name></expr></argument>, <argument><expr><op:operator pos:line="315" pos:column="87">(</op:operator><name pos:line="315" pos:column="88">LPBYTE</name><op:operator pos:line="315" pos:column="94">)</op:operator><name pos:line="315" pos:column="95">valData</name></expr></argument>, <argument><expr><op:operator pos:line="315" pos:column="104">(</op:operator><name pos:line="315" pos:column="105">LPDWORD</name><op:operator pos:line="315" pos:column="112">)</op:operator><op:operator pos:line="315" pos:column="113">&amp;</op:operator><name pos:line="315" pos:column="114">valDataLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="317" pos:column="17">if <condition pos:line="317" pos:column="20">(<expr><name pos:line="317" pos:column="21">res</name> <op:operator pos:line="317" pos:column="25">==</op:operator> <name pos:line="317" pos:column="28">ERROR_SUCCESS</name></expr>)</condition><then pos:line="317" pos:column="42">
		<block pos:line="318" pos:column="17">{
			<expr_stmt><expr><call><name><op:operator pos:line="319" pos:column="25">::</op:operator><name pos:line="319" pos:column="27">RegSetValueEx</name></name><argument_list pos:line="319" pos:column="40">(<argument><expr><name pos:line="319" pos:column="41">hKey</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="47">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="319" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><name pos:line="319" pos:column="56">valType</name></expr></argument>, <argument><expr><op:operator pos:line="319" pos:column="65">(</op:operator><name pos:line="319" pos:column="66">LPBYTE</name><op:operator pos:line="319" pos:column="72">)</op:operator><name pos:line="319" pos:column="73">valData</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="82">valDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="320" pos:column="25">::</op:operator><name pos:line="320" pos:column="27">RegDeleteValue</name></name><argument_list pos:line="320" pos:column="41">(<argument><expr><name pos:line="320" pos:column="42">hKey</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="48">nppBackup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="322" pos:column="17">else
			<expr_stmt><expr><call><name><op:operator pos:line="323" pos:column="25">::</op:operator><name pos:line="323" pos:column="27">RegDeleteValue</name></name><argument_list pos:line="323" pos:column="41">(<argument><expr><name pos:line="323" pos:column="42">hKey</name></expr></argument>, <argument><expr><name pos:line="323" pos:column="48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></else></if>

	<return pos:line="326" pos:column="9">return <expr><lit:literal type="boolean" pos:line="326" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="329" pos:column="1">void</name></type> <name><name pos:line="329" pos:column="6">RegExtDlg</name><op:operator pos:line="329" pos:column="15">::</op:operator><name pos:line="329" pos:column="17">writeNppPath</name></name><parameter_list pos:line="329" pos:column="29">()</parameter_list>
<block pos:line="330" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="331" pos:column="9">HKEY</name></type>  <name pos:line="331" pos:column="15">hKey</name></decl><op:operator pos:line="331" pos:column="19">,</op:operator> <decl><type ref="prev"/><name pos:line="331" pos:column="21">hRootKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="332" pos:column="9">DWORD</name></type> <name pos:line="332" pos:column="15">dwDisp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="333" pos:column="9">long</name></type>  <name pos:line="333" pos:column="15">nRet</name></decl>;</decl_stmt>
	<function_decl><type><name pos:line="334" pos:column="9">generic_string</name></type> <name pos:line="334" pos:column="24">regStr</name><parameter_list pos:line="334" pos:column="30">(<param><decl><type><name pos:line="334" pos:column="31">nppName</name></type></decl></param>)</parameter_list>;</function_decl>
	<expr_stmt><expr><name pos:line="335" pos:column="9">regStr</name> <op:operator pos:line="335" pos:column="16">+=</op:operator> <call><name pos:line="335" pos:column="19">TEXT</name><argument_list pos:line="335" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="335" pos:column="24">"\\shell\\open\\command"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="337" pos:column="9">nRet</name> <op:operator pos:line="337" pos:column="14">=</op:operator> <call><name><op:operator pos:line="337" pos:column="16">::</op:operator><name pos:line="337" pos:column="18">RegCreateKeyEx</name></name><argument_list pos:line="337" pos:column="32">(
				<argument><expr><name pos:line="338" pos:column="33">HKEY_CLASSES_ROOT</name></expr></argument>,
				<argument><expr><call><name><name pos:line="339" pos:column="33">regStr</name><op:operator pos:line="339" pos:column="39">.</op:operator><name pos:line="339" pos:column="40">c_str</name></name><argument_list pos:line="339" pos:column="45">()</argument_list></call></expr></argument>,
				<argument><expr><lit:literal type="number" pos:line="340" pos:column="33">0</lit:literal></expr></argument>,
				<argument><expr><name pos:line="341" pos:column="33">NULL</name></expr></argument>,
				<argument><expr><lit:literal type="number" pos:line="342" pos:column="33">0</lit:literal></expr></argument>,
				<argument><expr><name pos:line="343" pos:column="33">KEY_ALL_ACCESS</name></expr></argument>,
				<argument><expr><name pos:line="344" pos:column="33">NULL</name></expr></argument>,
				<argument><expr><op:operator pos:line="345" pos:column="33">&amp;</op:operator><name pos:line="345" pos:column="34">hKey</name></expr></argument>,
				<argument><expr><op:operator pos:line="346" pos:column="33">&amp;</op:operator><name pos:line="346" pos:column="34">dwDisp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<if pos:line="349" pos:column="9">if <condition pos:line="349" pos:column="12">(<expr><name pos:line="349" pos:column="13">nRet</name> <op:operator pos:line="349" pos:column="18">==</op:operator> <name pos:line="349" pos:column="21">ERROR_SUCCESS</name></expr>)</condition><then pos:line="349" pos:column="35">
	<block pos:line="350" pos:column="9">{
		<comment type="line" pos:line="351" pos:column="17">//if (dwDisp == REG_CREATED_NEW_KEY)</comment>
		<block pos:line="352" pos:column="17">{
			<comment type="line" pos:line="353" pos:column="25">// Write the value for new document</comment>
			<expr_stmt><expr><call><name><op:operator pos:line="354" pos:column="25">::</op:operator><name pos:line="354" pos:column="27">RegOpenKeyEx</name></name><argument_list pos:line="354" pos:column="39">(<argument><expr><name pos:line="354" pos:column="40">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="354" pos:column="59">nppName</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="354" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><name pos:line="354" pos:column="71">KEY_ALL_ACCESS</name></expr></argument>, <argument><expr><op:operator pos:line="354" pos:column="87">&amp;</op:operator><name pos:line="354" pos:column="88">hRootKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="355" pos:column="25">::</op:operator><name pos:line="355" pos:column="27">RegSetValueEx</name></name><argument_list pos:line="355" pos:column="40">(<argument><expr><name pos:line="355" pos:column="41">hRootKey</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="51">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="355" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><name pos:line="355" pos:column="60">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="355" pos:column="68">(</op:operator><name pos:line="355" pos:column="69">LPBYTE</name><op:operator pos:line="355" pos:column="75">)</op:operator><name pos:line="355" pos:column="76">nppDoc</name></expr></argument>, <argument><expr><op:operator pos:line="355" pos:column="84">(</op:operator><call><name pos:line="355" pos:column="85">lstrlen</name><argument_list pos:line="355" pos:column="92">(<argument><expr><name pos:line="355" pos:column="93">nppDoc</name></expr></argument>)</argument_list></call><op:operator pos:line="355" pos:column="100">+</op:operator><lit:literal type="number" pos:line="355" pos:column="101">1</lit:literal><op:operator pos:line="355" pos:column="102">)</op:operator><op:operator pos:line="355" pos:column="103">*</op:operator><sizeof pos:line="355" pos:column="104">sizeof<argument_list pos:line="355" pos:column="110">(<argument><expr><name pos:line="355" pos:column="111">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="356" pos:column="25">RegCloseKey</name><argument_list pos:line="356" pos:column="36">(<argument><expr><name pos:line="356" pos:column="37">hRootKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="358" pos:column="25">TCHAR</name></type> <name><name pos:line="358" pos:column="31">nppPath</name><index pos:line="358" pos:column="38">[<expr><name pos:line="358" pos:column="39">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="359" pos:column="25">::</op:operator><name pos:line="359" pos:column="27">GetModuleFileName</name></name><argument_list pos:line="359" pos:column="44">(<argument><expr><name pos:line="359" pos:column="45">_hInst</name></expr></argument>, <argument><expr><name pos:line="359" pos:column="53">nppPath</name></expr></argument>, <argument><expr><name pos:line="359" pos:column="62">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="361" pos:column="25">TCHAR</name></type> <name><name pos:line="361" pos:column="31">nppPathParam</name><index pos:line="361" pos:column="43">[<expr><name pos:line="361" pos:column="44">MAX_PATH</name></expr>]</index></name> <init pos:line="361" pos:column="54">= <expr><call><name pos:line="361" pos:column="56">TEXT</name><argument_list pos:line="361" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="361" pos:column="61">"\""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="362" pos:column="25">lstrcat</name><argument_list pos:line="362" pos:column="32">(<argument><expr><call><name pos:line="362" pos:column="33">lstrcat</name><argument_list pos:line="362" pos:column="40">(<argument><expr><name pos:line="362" pos:column="41">nppPathParam</name></expr></argument>, <argument><expr><name pos:line="362" pos:column="55">nppPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="362" pos:column="65">TEXT</name><argument_list pos:line="362" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="362" pos:column="70">"\" \"%1\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><op:operator pos:line="364" pos:column="25">::</op:operator><name pos:line="364" pos:column="27">RegSetValueEx</name></name><argument_list pos:line="364" pos:column="40">(<argument><expr><name pos:line="364" pos:column="41">hKey</name></expr></argument>, <argument><expr><name pos:line="364" pos:column="47">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="364" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><name pos:line="364" pos:column="56">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="364" pos:column="64">(</op:operator><name pos:line="364" pos:column="65">LPBYTE</name><op:operator pos:line="364" pos:column="71">)</op:operator><name pos:line="364" pos:column="72">nppPathParam</name></expr></argument>, <argument><expr><op:operator pos:line="364" pos:column="86">(</op:operator><call><name pos:line="364" pos:column="87">lstrlen</name><argument_list pos:line="364" pos:column="94">(<argument><expr><name pos:line="364" pos:column="95">nppPathParam</name></expr></argument>)</argument_list></call><op:operator pos:line="364" pos:column="108">+</op:operator><lit:literal type="number" pos:line="364" pos:column="109">1</lit:literal><op:operator pos:line="364" pos:column="110">)</op:operator><op:operator pos:line="364" pos:column="111">*</op:operator><sizeof pos:line="364" pos:column="112">sizeof<argument_list pos:line="364" pos:column="118">(<argument><expr><name pos:line="364" pos:column="119">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><call><name pos:line="366" pos:column="17">RegCloseKey</name><argument_list pos:line="366" pos:column="28">(<argument><expr><name pos:line="366" pos:column="29">hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="369" pos:column="9">//Set default icon value</comment>
	<expr_stmt><expr><name pos:line="370" pos:column="9">regStr</name> <op:operator pos:line="370" pos:column="16">=</op:operator> <name pos:line="370" pos:column="18">nppName</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="371" pos:column="9">regStr</name> <op:operator pos:line="371" pos:column="16">+=</op:operator> <call><name pos:line="371" pos:column="19">TEXT</name><argument_list pos:line="371" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="371" pos:column="24">"\\DefaultIcon"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="372" pos:column="9">nRet</name> <op:operator pos:line="372" pos:column="14">=</op:operator> <call><name><op:operator pos:line="372" pos:column="16">::</op:operator><name pos:line="372" pos:column="18">RegCreateKeyEx</name></name><argument_list pos:line="372" pos:column="32">(
				<argument><expr><name pos:line="373" pos:column="33">HKEY_CLASSES_ROOT</name></expr></argument>,
				<argument><expr><call><name><name pos:line="374" pos:column="33">regStr</name><op:operator pos:line="374" pos:column="39">.</op:operator><name pos:line="374" pos:column="40">c_str</name></name><argument_list pos:line="374" pos:column="45">()</argument_list></call></expr></argument>,
				<argument><expr><lit:literal type="number" pos:line="375" pos:column="33">0</lit:literal></expr></argument>,
				<argument><expr><name pos:line="376" pos:column="33">NULL</name></expr></argument>,
				<argument><expr><lit:literal type="number" pos:line="377" pos:column="33">0</lit:literal></expr></argument>,
				<argument><expr><name pos:line="378" pos:column="33">KEY_ALL_ACCESS</name></expr></argument>,
				<argument><expr><name pos:line="379" pos:column="33">NULL</name></expr></argument>,
				<argument><expr><op:operator pos:line="380" pos:column="33">&amp;</op:operator><name pos:line="380" pos:column="34">hKey</name></expr></argument>,
				<argument><expr><op:operator pos:line="381" pos:column="33">&amp;</op:operator><name pos:line="381" pos:column="34">dwDisp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="383" pos:column="9">if <condition pos:line="383" pos:column="12">(<expr><name pos:line="383" pos:column="13">nRet</name> <op:operator pos:line="383" pos:column="18">==</op:operator> <name pos:line="383" pos:column="21">ERROR_SUCCESS</name></expr>)</condition><then pos:line="383" pos:column="35">
	<block pos:line="384" pos:column="9">{
		<comment type="line" pos:line="385" pos:column="17">//if (dwDisp == REG_CREATED_NEW_KEY)</comment>
		<block pos:line="386" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="387" pos:column="25">TCHAR</name></type> <name><name pos:line="387" pos:column="31">nppPath</name><index pos:line="387" pos:column="38">[<expr><name pos:line="387" pos:column="39">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="388" pos:column="25">::</op:operator><name pos:line="388" pos:column="27">GetModuleFileName</name></name><argument_list pos:line="388" pos:column="44">(<argument><expr><name pos:line="388" pos:column="45">_hInst</name></expr></argument>, <argument><expr><name pos:line="388" pos:column="53">nppPath</name></expr></argument>, <argument><expr><name pos:line="388" pos:column="62">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="390" pos:column="25">TCHAR</name></type> <name><name pos:line="390" pos:column="31">nppPathParam</name><index pos:line="390" pos:column="43">[<expr><name pos:line="390" pos:column="44">MAX_PATH</name></expr>]</index></name> <init pos:line="390" pos:column="54">= <expr><call><name pos:line="390" pos:column="56">TEXT</name><argument_list pos:line="390" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="390" pos:column="61">"\""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="391" pos:column="25">lstrcat</name><argument_list pos:line="391" pos:column="32">(<argument><expr><call><name pos:line="391" pos:column="33">lstrcat</name><argument_list pos:line="391" pos:column="40">(<argument><expr><name pos:line="391" pos:column="41">nppPathParam</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="55">nppPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="391" pos:column="65">TEXT</name><argument_list pos:line="391" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="391" pos:column="70">"\",0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><op:operator pos:line="393" pos:column="25">::</op:operator><name pos:line="393" pos:column="27">RegSetValueEx</name></name><argument_list pos:line="393" pos:column="40">(<argument><expr><name pos:line="393" pos:column="41">hKey</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="47">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="393" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><name pos:line="393" pos:column="56">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="393" pos:column="64">(</op:operator><name pos:line="393" pos:column="65">LPBYTE</name><op:operator pos:line="393" pos:column="71">)</op:operator><name pos:line="393" pos:column="72">nppPathParam</name></expr></argument>, <argument><expr><op:operator pos:line="393" pos:column="86">(</op:operator><call><name pos:line="393" pos:column="87">lstrlen</name><argument_list pos:line="393" pos:column="94">(<argument><expr><name pos:line="393" pos:column="95">nppPathParam</name></expr></argument>)</argument_list></call><op:operator pos:line="393" pos:column="108">+</op:operator><lit:literal type="number" pos:line="393" pos:column="109">1</lit:literal><op:operator pos:line="393" pos:column="110">)</op:operator><op:operator pos:line="393" pos:column="111">*</op:operator><sizeof pos:line="393" pos:column="112">sizeof<argument_list pos:line="393" pos:column="118">(<argument><expr><name pos:line="393" pos:column="119">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><call><name pos:line="395" pos:column="17">RegCloseKey</name><argument_list pos:line="395" pos:column="28">(<argument><expr><name pos:line="395" pos:column="29">hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function> 
</unit>
