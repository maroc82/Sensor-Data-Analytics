<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexErlang.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>
<comment type="block" format="doxygen" pos:line="4" pos:column="1">/** @file LexErlang.cxx
 ** Lexer for Erlang.
 ** Enhanced by Etienne 'Lenain' Girondel (lenaing@gmail.com)
 ** Originally wrote by Peter-Henry Mander,
 ** based on Matlab lexer by Jos√© Fonseca.
 **/</comment>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="33" pos:column="1">static</specifier> <name pos:line="33" pos:column="8">int</name></type> <name pos:line="33" pos:column="12">is_radix</name><parameter_list pos:line="33" pos:column="20">(<param><decl><type><name pos:line="33" pos:column="21">int</name></type> <name pos:line="33" pos:column="25">radix</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="32">int</name></type> <name pos:line="33" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="40">{
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">int</name></type> <name pos:line="34" pos:column="13">digit</name></decl>;</decl_stmt>

	<if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><lit:literal type="number" pos:line="36" pos:column="13">36</lit:literal> <op:operator pos:line="36" pos:column="16">&lt;</op:operator> <name pos:line="36" pos:column="18">radix</name> <op:operator pos:line="36" pos:column="24">||</op:operator> <lit:literal type="number" pos:line="36" pos:column="27">2</lit:literal> <op:operator pos:line="36" pos:column="29">&gt;</op:operator> <name pos:line="36" pos:column="31">radix</name></expr>)</condition><then pos:line="36" pos:column="37">
		<return pos:line="37" pos:column="17">return <expr><lit:literal type="number" pos:line="37" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">isdigit</name><argument_list pos:line="39" pos:column="20">(<argument><expr><name pos:line="39" pos:column="21">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="39" pos:column="25"> <block pos:line="39" pos:column="26">{
		<expr_stmt><expr><name pos:line="40" pos:column="17">digit</name> <op:operator pos:line="40" pos:column="23">=</op:operator> <name pos:line="40" pos:column="25">ch</name> <op:operator pos:line="40" pos:column="28">-</op:operator> <lit:literal type="char" pos:line="40" pos:column="30">'0'</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="41" pos:column="11">else <if pos:line="41" pos:column="16">if <condition pos:line="41" pos:column="19">(<expr><call><name pos:line="41" pos:column="20">isalnum</name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="41" pos:column="32"> <block pos:line="41" pos:column="33">{
		<expr_stmt><expr><name pos:line="42" pos:column="17">digit</name> <op:operator pos:line="42" pos:column="23">=</op:operator> <call><name pos:line="42" pos:column="25">toupper</name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="37">-</op:operator> <lit:literal type="char" pos:line="42" pos:column="39">'A'</lit:literal> <op:operator pos:line="42" pos:column="43">+</op:operator> <lit:literal type="number" pos:line="42" pos:column="45">10</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="43" pos:column="11">else <block pos:line="43" pos:column="16">{
		<return pos:line="44" pos:column="17">return <expr><lit:literal type="number" pos:line="44" pos:column="24">0</lit:literal></expr>;</return>
	}</block></else></if></else></if>

	<return pos:line="47" pos:column="9">return <expr><op:operator pos:line="47" pos:column="16">(</op:operator><name pos:line="47" pos:column="17">digit</name> <op:operator pos:line="47" pos:column="23">&lt;</op:operator> <name pos:line="47" pos:column="25">radix</name><op:operator pos:line="47" pos:column="30">)</op:operator></expr>;</return>
}</block></function>

<typedef pos:line="50" pos:column="1">typedef <type><enum pos:line="50" pos:column="9">enum <block pos:line="50" pos:column="14">{
	<decl><name pos:line="51" pos:column="9">STATE_NULL</name></decl><op:operator pos:line="51" pos:column="19">,</op:operator>
	<decl><name pos:line="52" pos:column="9">COMMENT</name></decl><op:operator pos:line="52" pos:column="16">,</op:operator>
	<decl><name pos:line="53" pos:column="9">COMMENT_FUNCTION</name></decl><op:operator pos:line="53" pos:column="25">,</op:operator>
	<decl><name pos:line="54" pos:column="9">COMMENT_MODULE</name></decl><op:operator pos:line="54" pos:column="23">,</op:operator>
	<decl><name pos:line="55" pos:column="9">COMMENT_DOC</name></decl><op:operator pos:line="55" pos:column="20">,</op:operator>
	<decl><name pos:line="56" pos:column="9">COMMENT_DOC_MACRO</name></decl><op:operator pos:line="56" pos:column="26">,</op:operator>
	<decl><name pos:line="57" pos:column="9">ATOM_UNQUOTED</name></decl><op:operator pos:line="57" pos:column="22">,</op:operator>
	<decl><name pos:line="58" pos:column="9">ATOM_QUOTED</name></decl><op:operator pos:line="58" pos:column="20">,</op:operator>
	<decl><name pos:line="59" pos:column="9">NODE_NAME_UNQUOTED</name></decl><op:operator pos:line="59" pos:column="27">,</op:operator>
	<decl><name pos:line="60" pos:column="9">NODE_NAME_QUOTED</name></decl><op:operator pos:line="60" pos:column="25">,</op:operator>
	<decl><name pos:line="61" pos:column="9">MACRO_START</name></decl><op:operator pos:line="61" pos:column="20">,</op:operator>
	<decl><name pos:line="62" pos:column="9">MACRO_UNQUOTED</name></decl><op:operator pos:line="62" pos:column="23">,</op:operator>
	<decl><name pos:line="63" pos:column="9">MACRO_QUOTED</name></decl><op:operator pos:line="63" pos:column="21">,</op:operator>
	<decl><name pos:line="64" pos:column="9">RECORD_START</name></decl><op:operator pos:line="64" pos:column="21">,</op:operator>
	<decl><name pos:line="65" pos:column="9">RECORD_UNQUOTED</name></decl><op:operator pos:line="65" pos:column="24">,</op:operator>
	<decl><name pos:line="66" pos:column="9">RECORD_QUOTED</name></decl><op:operator pos:line="66" pos:column="22">,</op:operator>
	<decl><name pos:line="67" pos:column="9">NUMERAL_START</name></decl><op:operator pos:line="67" pos:column="22">,</op:operator>
	<decl><name pos:line="68" pos:column="9">NUMERAL_BASE_VALUE</name></decl><op:operator pos:line="68" pos:column="27">,</op:operator>
	<decl><name pos:line="69" pos:column="9">NUMERAL_FLOAT</name></decl><op:operator pos:line="69" pos:column="22">,</op:operator>
	<decl><name pos:line="70" pos:column="9">NUMERAL_EXPONENT</name></decl><op:operator pos:line="70" pos:column="25">,</op:operator>
	<decl><name pos:line="71" pos:column="9">PREPROCESSOR</name></decl>
}</block></enum></type> <name pos:line="72" pos:column="3">atom_parse_state_t</name>;</typedef>

<function><type><specifier pos:line="74" pos:column="1">static</specifier> <specifier pos:line="74" pos:column="8">inline</specifier> <name pos:line="74" pos:column="15">bool</name></type> <name pos:line="74" pos:column="20">IsAWordChar</name><parameter_list pos:line="74" pos:column="31">(<param><decl><type><specifier pos:line="74" pos:column="32">const</specifier> <name pos:line="74" pos:column="38">int</name></type> <name pos:line="74" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="74" pos:column="46">{
	<return pos:line="75" pos:column="9">return <expr><op:operator pos:line="75" pos:column="16">(</op:operator><name pos:line="75" pos:column="17">ch</name> <op:operator pos:line="75" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="22">0x80</lit:literal><op:operator pos:line="75" pos:column="26">)</op:operator> <op:operator pos:line="75" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="75" pos:column="31">(</op:operator><name pos:line="75" pos:column="32">ch</name> <op:operator pos:line="75" pos:column="35">!=</op:operator> <lit:literal type="char" pos:line="75" pos:column="38">' '</lit:literal><op:operator pos:line="75" pos:column="41">)</op:operator> <op:operator pos:line="75" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="75" pos:column="46">(</op:operator><call><name pos:line="75" pos:column="47">isalnum</name><argument_list pos:line="75" pos:column="54">(<argument><expr><name pos:line="75" pos:column="55">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="75" pos:column="59">||</op:operator> <name pos:line="75" pos:column="62">ch</name> <op:operator pos:line="75" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="68">'_'</lit:literal><op:operator pos:line="75" pos:column="71">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="78" pos:column="1">static</specifier> <name pos:line="78" pos:column="8">void</name></type> <name pos:line="78" pos:column="13">ColouriseErlangDoc</name><parameter_list pos:line="78" pos:column="31">(<param><decl><type><name pos:line="78" pos:column="32">unsigned</name> <name pos:line="78" pos:column="41">int</name></type> <name pos:line="78" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="55">int</name></type> <name pos:line="78" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="67">int</name></type> <name pos:line="78" pos:column="71">initStyle</name></decl></param>,
								<param><decl><type><name pos:line="79" pos:column="65">WordList</name> <type:modifier pos:line="79" pos:column="74">*</type:modifier></type><name><name pos:line="79" pos:column="75">keywordlists</name><index pos:line="79" pos:column="87">[]</index></name></decl></param>, <param><decl><type><name pos:line="79" pos:column="91">Accessor</name> <type:modifier pos:line="79" pos:column="100">&amp;</type:modifier></type><name pos:line="79" pos:column="101">styler</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="109">{

	<function_decl><type><name pos:line="81" pos:column="9">StyleContext</name></type> <name pos:line="81" pos:column="22">sc</name><parameter_list pos:line="81" pos:column="24">(<param><decl><type><name pos:line="81" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="81" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="81" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="81" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="82" pos:column="9">WordList</name> <type:modifier pos:line="82" pos:column="18">&amp;</type:modifier></type><name pos:line="82" pos:column="19">reservedWords</name> <init pos:line="82" pos:column="33">= <expr><op:operator pos:line="82" pos:column="35">*</op:operator><name><name pos:line="82" pos:column="36">keywordlists</name><index pos:line="82" pos:column="48">[<expr><lit:literal type="number" pos:line="82" pos:column="49">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="83" pos:column="9">WordList</name> <type:modifier pos:line="83" pos:column="18">&amp;</type:modifier></type><name pos:line="83" pos:column="19">erlangBIFs</name> <init pos:line="83" pos:column="30">= <expr><op:operator pos:line="83" pos:column="32">*</op:operator><name><name pos:line="83" pos:column="33">keywordlists</name><index pos:line="83" pos:column="45">[<expr><lit:literal type="number" pos:line="83" pos:column="46">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="84" pos:column="9">WordList</name> <type:modifier pos:line="84" pos:column="18">&amp;</type:modifier></type><name pos:line="84" pos:column="19">erlangPreproc</name> <init pos:line="84" pos:column="33">= <expr><op:operator pos:line="84" pos:column="35">*</op:operator><name><name pos:line="84" pos:column="36">keywordlists</name><index pos:line="84" pos:column="48">[<expr><lit:literal type="number" pos:line="84" pos:column="49">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="85" pos:column="9">WordList</name> <type:modifier pos:line="85" pos:column="18">&amp;</type:modifier></type><name pos:line="85" pos:column="19">erlangModulesAtt</name> <init pos:line="85" pos:column="36">= <expr><op:operator pos:line="85" pos:column="38">*</op:operator><name><name pos:line="85" pos:column="39">keywordlists</name><index pos:line="85" pos:column="51">[<expr><lit:literal type="number" pos:line="85" pos:column="52">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">WordList</name> <type:modifier pos:line="86" pos:column="18">&amp;</type:modifier></type><name pos:line="86" pos:column="19">erlangDoc</name> <init pos:line="86" pos:column="29">= <expr><op:operator pos:line="86" pos:column="31">*</op:operator><name><name pos:line="86" pos:column="32">keywordlists</name><index pos:line="86" pos:column="44">[<expr><lit:literal type="number" pos:line="86" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">WordList</name> <type:modifier pos:line="87" pos:column="18">&amp;</type:modifier></type><name pos:line="87" pos:column="19">erlangDocMacro</name> <init pos:line="87" pos:column="34">= <expr><op:operator pos:line="87" pos:column="36">*</op:operator><name><name pos:line="87" pos:column="37">keywordlists</name><index pos:line="87" pos:column="49">[<expr><lit:literal type="number" pos:line="87" pos:column="50">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">int</name></type> <name pos:line="88" pos:column="13">radix_digits</name> <init pos:line="88" pos:column="26">= <expr><lit:literal type="number" pos:line="88" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="89" pos:column="9">int</name></type> <name pos:line="89" pos:column="13">exponent_digits</name> <init pos:line="89" pos:column="29">= <expr><lit:literal type="number" pos:line="89" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="90" pos:column="9">atom_parse_state_t</name></type> <name pos:line="90" pos:column="28">parse_state</name> <init pos:line="90" pos:column="40">= <expr><name pos:line="90" pos:column="42">STATE_NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="91" pos:column="9">atom_parse_state_t</name></type> <name pos:line="91" pos:column="28">old_parse_state</name> <init pos:line="91" pos:column="44">= <expr><name pos:line="91" pos:column="46">STATE_NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="92" pos:column="9">bool</name></type> <name pos:line="92" pos:column="14">to_late_to_comment</name> <init pos:line="92" pos:column="33">= <expr><lit:literal type="boolean" pos:line="92" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">char</name></type> <name><name pos:line="93" pos:column="14">cur</name><index pos:line="93" pos:column="17">[<expr><lit:literal type="number" pos:line="93" pos:column="18">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="94" pos:column="9">int</name></type> <name pos:line="94" pos:column="13">old_style</name> <init pos:line="94" pos:column="23">= <expr><name pos:line="94" pos:column="25">SCE_ERLANG_DEFAULT</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="96" pos:column="9">styler</name><op:operator pos:line="96" pos:column="15">.</op:operator><name pos:line="96" pos:column="16">StartAt</name></name><argument_list pos:line="96" pos:column="23">(<argument><expr><name pos:line="96" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:line="98" pos:column="9">for (<init pos:line="98" pos:column="14">;</init> <condition><expr><call><name><name pos:line="98" pos:column="16">sc</name><op:operator pos:line="98" pos:column="18">.</op:operator><name pos:line="98" pos:column="19">More</name></name><argument_list pos:line="98" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="98" pos:column="27">sc</name><op:operator pos:line="98" pos:column="29">.</op:operator><name pos:line="98" pos:column="30">Forward</name></name><argument_list pos:line="98" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="98" pos:column="41">{
		<decl_stmt><decl><type><name pos:line="99" pos:column="17">int</name></type> <name pos:line="99" pos:column="21">style</name> <init pos:line="99" pos:column="27">= <expr><name pos:line="99" pos:column="29">SCE_ERLANG_DEFAULT</name></expr></init></decl>;</decl_stmt>
		<if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><name pos:line="100" pos:column="21">STATE_NULL</name> <op:operator pos:line="100" pos:column="32">!=</op:operator> <name pos:line="100" pos:column="35">parse_state</name></expr>)</condition><then pos:line="100" pos:column="47"> <block pos:line="100" pos:column="48">{

			<switch pos:line="102" pos:column="25">switch <condition pos:line="102" pos:column="32">(<expr><name pos:line="102" pos:column="33">parse_state</name></expr>)</condition> <block pos:line="102" pos:column="46">{

				<case pos:line="104" pos:column="33">case <expr><name pos:line="104" pos:column="38">STATE_NULL</name></expr> : <expr_stmt><expr><call><name><name pos:line="104" pos:column="51">sc</name><op:operator pos:line="104" pos:column="53">.</op:operator><name pos:line="104" pos:column="54">SetState</name></name><argument_list pos:line="104" pos:column="62">(<argument><expr><name pos:line="104" pos:column="63">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="104" pos:column="84">break;</break>

			<comment type="block" pos:line="106" pos:column="25">/* COMMENTS ------------------------------------------------------*/</comment>
				</case><case pos:line="107" pos:column="33">case <expr><name pos:line="107" pos:column="38">COMMENT</name></expr> : <block pos:line="107" pos:column="48">{
					<if pos:line="108" pos:column="41">if <condition pos:line="108" pos:column="44">(<expr><name><name pos:line="108" pos:column="45">sc</name><op:operator pos:line="108" pos:column="47">.</op:operator><name pos:line="108" pos:column="48">ch</name></name> <op:operator pos:line="108" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="108" pos:column="54">'%'</lit:literal></expr>)</condition><then pos:line="108" pos:column="58"> <block pos:line="108" pos:column="59">{
						<expr_stmt><expr><name pos:line="109" pos:column="49">to_late_to_comment</name> <op:operator pos:line="109" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="109" pos:column="70">true</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="110" pos:column="43">else <if pos:line="110" pos:column="48">if <condition pos:line="110" pos:column="51">(<expr><op:operator pos:line="110" pos:column="52">!</op:operator><name pos:line="110" pos:column="53">to_late_to_comment</name> <op:operator pos:line="110" pos:column="72">&amp;&amp;</op:operator> <name><name pos:line="110" pos:column="75">sc</name><op:operator pos:line="110" pos:column="77">.</op:operator><name pos:line="110" pos:column="78">ch</name></name> <op:operator pos:line="110" pos:column="81">==</op:operator> <lit:literal type="char" pos:line="110" pos:column="84">'%'</lit:literal></expr>)</condition><then pos:line="110" pos:column="88"> <block pos:line="110" pos:column="89">{
						<comment type="line" pos:line="111" pos:column="49">// Switch to comment level 2 (Function)</comment>
						<expr_stmt><expr><call><name><name pos:line="112" pos:column="49">sc</name><op:operator pos:line="112" pos:column="51">.</op:operator><name pos:line="112" pos:column="52">ChangeState</name></name><argument_list pos:line="112" pos:column="63">(<argument><expr><name pos:line="112" pos:column="64">SCE_ERLANG_COMMENT_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="113" pos:column="49">old_style</name> <op:operator pos:line="113" pos:column="59">=</op:operator> <name pos:line="113" pos:column="61">SCE_ERLANG_COMMENT_FUNCTION</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="114" pos:column="49">parse_state</name> <op:operator pos:line="114" pos:column="61">=</op:operator> <name pos:line="114" pos:column="63">COMMENT_FUNCTION</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="115" pos:column="49">sc</name><op:operator pos:line="115" pos:column="51">.</op:operator><name pos:line="115" pos:column="52">Forward</name></name><argument_list pos:line="115" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block>
				<comment type="line" pos:line="118" pos:column="33">// V--- Falling through!</comment>
				</case><case pos:line="119" pos:column="33">case <expr><name pos:line="119" pos:column="38">COMMENT_FUNCTION</name></expr> : <block pos:line="119" pos:column="57">{
					<if pos:line="120" pos:column="41">if <condition pos:line="120" pos:column="44">(<expr><name><name pos:line="120" pos:column="45">sc</name><op:operator pos:line="120" pos:column="47">.</op:operator><name pos:line="120" pos:column="48">ch</name></name> <op:operator pos:line="120" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="120" pos:column="54">'%'</lit:literal></expr>)</condition><then pos:line="120" pos:column="58"> <block pos:line="120" pos:column="59">{
						<expr_stmt><expr><name pos:line="121" pos:column="49">to_late_to_comment</name> <op:operator pos:line="121" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="121" pos:column="70">true</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="122" pos:column="43">else <if pos:line="122" pos:column="48">if <condition pos:line="122" pos:column="51">(<expr><op:operator pos:line="122" pos:column="52">!</op:operator><name pos:line="122" pos:column="53">to_late_to_comment</name> <op:operator pos:line="122" pos:column="72">&amp;&amp;</op:operator> <name><name pos:line="122" pos:column="75">sc</name><op:operator pos:line="122" pos:column="77">.</op:operator><name pos:line="122" pos:column="78">ch</name></name> <op:operator pos:line="122" pos:column="81">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="84">'%'</lit:literal></expr>)</condition><then pos:line="122" pos:column="88"> <block pos:line="122" pos:column="89">{
						<comment type="line" pos:line="123" pos:column="49">// Switch to comment level 3 (Module)</comment>
						<expr_stmt><expr><call><name><name pos:line="124" pos:column="49">sc</name><op:operator pos:line="124" pos:column="51">.</op:operator><name pos:line="124" pos:column="52">ChangeState</name></name><argument_list pos:line="124" pos:column="63">(<argument><expr><name pos:line="124" pos:column="64">SCE_ERLANG_COMMENT_MODULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="125" pos:column="49">old_style</name> <op:operator pos:line="125" pos:column="59">=</op:operator> <name pos:line="125" pos:column="61">SCE_ERLANG_COMMENT_MODULE</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="126" pos:column="49">parse_state</name> <op:operator pos:line="126" pos:column="61">=</op:operator> <name pos:line="126" pos:column="63">COMMENT_MODULE</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="127" pos:column="49">sc</name><op:operator pos:line="127" pos:column="51">.</op:operator><name pos:line="127" pos:column="52">Forward</name></name><argument_list pos:line="127" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block>
				<comment type="line" pos:line="130" pos:column="33">// V--- Falling through!</comment>
				</case><case pos:line="131" pos:column="33">case <expr><name pos:line="131" pos:column="38">COMMENT_MODULE</name></expr> : <block pos:line="131" pos:column="55">{
					<if pos:line="132" pos:column="41">if <condition pos:line="132" pos:column="44">(<expr><name pos:line="132" pos:column="45">parse_state</name> <op:operator pos:line="132" pos:column="57">!=</op:operator> <name pos:line="132" pos:column="60">COMMENT</name></expr>)</condition><then pos:line="132" pos:column="68"> <block pos:line="132" pos:column="69">{
						<comment type="line" pos:line="133" pos:column="49">// Search for comment documentation</comment>
						<if pos:line="134" pos:column="49">if <condition pos:line="134" pos:column="52">(<expr><name><name pos:line="134" pos:column="53">sc</name><op:operator pos:line="134" pos:column="55">.</op:operator><name pos:line="134" pos:column="56">chNext</name></name> <op:operator pos:line="134" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="66">'@'</lit:literal></expr>)</condition><then pos:line="134" pos:column="70"> <block pos:line="134" pos:column="71">{
							<expr_stmt><expr><name pos:line="135" pos:column="57">old_parse_state</name> <op:operator pos:line="135" pos:column="73">=</op:operator> <name pos:line="135" pos:column="75">parse_state</name></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="136" pos:column="57">parse_state</name> <op:operator pos:line="136" pos:column="69">=</op:operator> <op:operator pos:line="136" pos:column="71">(</op:operator><lit:literal type="char" pos:line="136" pos:column="72">'{'</lit:literal> <op:operator pos:line="136" pos:column="76">==</op:operator> <name><name pos:line="136" pos:column="79">sc</name><op:operator pos:line="136" pos:column="81">.</op:operator><name pos:line="136" pos:column="82">ch</name></name><op:operator pos:line="136" pos:column="84">)</op:operator>
											<op:operator pos:line="137" pos:column="89">?</op:operator> <name pos:line="137" pos:column="91">COMMENT_DOC_MACRO</name>
											<op:operator pos:line="138" pos:column="89">:</op:operator> <name pos:line="138" pos:column="91">COMMENT_DOC</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="139" pos:column="57">sc</name><op:operator pos:line="139" pos:column="59">.</op:operator><name pos:line="139" pos:column="60">ForwardSetState</name></name><argument_list pos:line="139" pos:column="75">(<argument><expr><name><name pos:line="139" pos:column="76">sc</name><op:operator pos:line="139" pos:column="78">.</op:operator><name pos:line="139" pos:column="79">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>

					<comment type="line" pos:line="143" pos:column="41">// All comments types fall here.</comment>
					<if pos:line="144" pos:column="41">if <condition pos:line="144" pos:column="44">(<expr><name><name pos:line="144" pos:column="45">sc</name><op:operator pos:line="144" pos:column="47">.</op:operator><name pos:line="144" pos:column="48">atLineEnd</name></name></expr>)</condition><then pos:line="144" pos:column="58"> <block pos:line="144" pos:column="59">{
						<expr_stmt><expr><name pos:line="145" pos:column="49">to_late_to_comment</name> <op:operator pos:line="145" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="145" pos:column="70">false</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="146" pos:column="49">sc</name><op:operator pos:line="146" pos:column="51">.</op:operator><name pos:line="146" pos:column="52">SetState</name></name><argument_list pos:line="146" pos:column="60">(<argument><expr><name pos:line="146" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="147" pos:column="49">parse_state</name> <op:operator pos:line="147" pos:column="61">=</op:operator> <name pos:line="147" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <break pos:line="149" pos:column="35">break;</break>

				</case><case pos:line="151" pos:column="33">case <expr><name pos:line="151" pos:column="38">COMMENT_DOC</name></expr> :
				<comment type="line" pos:line="152" pos:column="33">// V--- Falling through!</comment>
				</case><case pos:line="153" pos:column="33">case <expr><name pos:line="153" pos:column="38">COMMENT_DOC_MACRO</name></expr> : <block pos:line="153" pos:column="58">{

					<if pos:line="155" pos:column="41">if <condition pos:line="155" pos:column="44">(<expr><op:operator pos:line="155" pos:column="45">!</op:operator><call><name pos:line="155" pos:column="46">isalnum</name><argument_list pos:line="155" pos:column="53">(<argument><expr><name><name pos:line="155" pos:column="54">sc</name><op:operator pos:line="155" pos:column="56">.</op:operator><name pos:line="155" pos:column="57">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="155" pos:column="61"> <block pos:line="155" pos:column="62">{
						<comment type="line" pos:line="156" pos:column="49">// Try to match documentation comment</comment>
						<expr_stmt><expr><call><name><name pos:line="157" pos:column="49">sc</name><op:operator pos:line="157" pos:column="51">.</op:operator><name pos:line="157" pos:column="52">GetCurrent</name></name><argument_list pos:line="157" pos:column="62">(<argument><expr><name pos:line="157" pos:column="63">cur</name></expr></argument>, <argument><expr><sizeof pos:line="157" pos:column="68">sizeof<argument_list pos:line="157" pos:column="74">(<argument><expr><name pos:line="157" pos:column="75">cur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<if pos:line="159" pos:column="49">if <condition pos:line="159" pos:column="52">(<expr><name pos:line="159" pos:column="53">parse_state</name> <op:operator pos:line="159" pos:column="65">==</op:operator> <name pos:line="159" pos:column="68">COMMENT_DOC_MACRO</name>
							<op:operator pos:line="160" pos:column="57">&amp;&amp;</op:operator> <call><name><name pos:line="160" pos:column="60">erlangDocMacro</name><op:operator pos:line="160" pos:column="74">.</op:operator><name pos:line="160" pos:column="75">InList</name></name><argument_list pos:line="160" pos:column="81">(<argument><expr><name pos:line="160" pos:column="82">cur</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="87"> <block pos:line="160" pos:column="88">{
								<expr_stmt><expr><call><name><name pos:line="161" pos:column="65">sc</name><op:operator pos:line="161" pos:column="67">.</op:operator><name pos:line="161" pos:column="68">ChangeState</name></name><argument_list pos:line="161" pos:column="79">(<argument><expr><name pos:line="161" pos:column="80">SCE_ERLANG_COMMENT_DOC_MACRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<while pos:line="162" pos:column="65">while <condition pos:line="162" pos:column="71">(<expr><name><name pos:line="162" pos:column="72">sc</name><op:operator pos:line="162" pos:column="74">.</op:operator><name pos:line="162" pos:column="75">ch</name></name> <op:operator pos:line="162" pos:column="78">!=</op:operator> <lit:literal type="char" pos:line="162" pos:column="81">'}'</lit:literal> <op:operator pos:line="162" pos:column="85">&amp;&amp;</op:operator> <op:operator pos:line="162" pos:column="88">!</op:operator><name><name pos:line="162" pos:column="89">sc</name><op:operator pos:line="162" pos:column="91">.</op:operator><name pos:line="162" pos:column="92">atLineEnd</name></name></expr>)</condition>
									<expr_stmt><expr><call><name><name pos:line="163" pos:column="73">sc</name><op:operator pos:line="163" pos:column="75">.</op:operator><name pos:line="163" pos:column="76">Forward</name></name><argument_list pos:line="163" pos:column="83">()</argument_list></call></expr>;</expr_stmt></while>
						}</block></then> <else pos:line="164" pos:column="51">else <if pos:line="164" pos:column="56">if <condition pos:line="164" pos:column="59">(<expr><call><name><name pos:line="164" pos:column="60">erlangDoc</name><op:operator pos:line="164" pos:column="69">.</op:operator><name pos:line="164" pos:column="70">InList</name></name><argument_list pos:line="164" pos:column="76">(<argument><expr><name pos:line="164" pos:column="77">cur</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="164" pos:column="82"> <block pos:line="164" pos:column="83">{
							<expr_stmt><expr><call><name><name pos:line="165" pos:column="57">sc</name><op:operator pos:line="165" pos:column="59">.</op:operator><name pos:line="165" pos:column="60">ChangeState</name></name><argument_list pos:line="165" pos:column="71">(<argument><expr><name pos:line="165" pos:column="72">SCE_ERLANG_COMMENT_DOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="166" pos:column="51">else <block pos:line="166" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="167" pos:column="57">sc</name><op:operator pos:line="167" pos:column="59">.</op:operator><name pos:line="167" pos:column="60">ChangeState</name></name><argument_list pos:line="167" pos:column="71">(<argument><expr><name pos:line="167" pos:column="72">old_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if></else></if>

						<comment type="line" pos:line="170" pos:column="49">// Switch back to old state</comment>
						<expr_stmt><expr><call><name><name pos:line="171" pos:column="49">sc</name><op:operator pos:line="171" pos:column="51">.</op:operator><name pos:line="171" pos:column="52">SetState</name></name><argument_list pos:line="171" pos:column="60">(<argument><expr><name pos:line="171" pos:column="61">old_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="172" pos:column="49">parse_state</name> <op:operator pos:line="172" pos:column="61">=</op:operator> <name pos:line="172" pos:column="63">old_parse_state</name></expr>;</expr_stmt>
					}</block></then></if>

					<if pos:line="175" pos:column="41">if <condition pos:line="175" pos:column="44">(<expr><name><name pos:line="175" pos:column="45">sc</name><op:operator pos:line="175" pos:column="47">.</op:operator><name pos:line="175" pos:column="48">atLineEnd</name></name></expr>)</condition><then pos:line="175" pos:column="58"> <block pos:line="175" pos:column="59">{
						<expr_stmt><expr><name pos:line="176" pos:column="49">to_late_to_comment</name> <op:operator pos:line="176" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="176" pos:column="70">false</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="177" pos:column="49">sc</name><op:operator pos:line="177" pos:column="51">.</op:operator><name pos:line="177" pos:column="52">ChangeState</name></name><argument_list pos:line="177" pos:column="63">(<argument><expr><name pos:line="177" pos:column="64">old_style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="178" pos:column="49">sc</name><op:operator pos:line="178" pos:column="51">.</op:operator><name pos:line="178" pos:column="52">SetState</name></name><argument_list pos:line="178" pos:column="60">(<argument><expr><name pos:line="178" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="179" pos:column="49">parse_state</name> <op:operator pos:line="179" pos:column="61">=</op:operator> <name pos:line="179" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <break pos:line="181" pos:column="35">break;</break>

			<comment type="block" pos:line="183" pos:column="25">/* -------------------------------------------------------------- */</comment>
			<comment type="block" pos:line="184" pos:column="25">/* Atoms ---------------------------------------------------------*/</comment>
				</case><case pos:line="185" pos:column="33">case <expr><name pos:line="185" pos:column="38">ATOM_UNQUOTED</name></expr> : <block pos:line="185" pos:column="54">{
					<if pos:line="186" pos:column="41">if <condition pos:line="186" pos:column="44">(<expr><lit:literal type="char" pos:line="186" pos:column="45">'@'</lit:literal> <op:operator pos:line="186" pos:column="49">==</op:operator> <name><name pos:line="186" pos:column="52">sc</name><op:operator pos:line="186" pos:column="54">.</op:operator><name pos:line="186" pos:column="55">ch</name></name></expr>)</condition><then><block pos:line="186" pos:column="58">{
						<expr_stmt><expr><name pos:line="187" pos:column="49">parse_state</name> <op:operator pos:line="187" pos:column="61">=</op:operator> <name pos:line="187" pos:column="63">NODE_NAME_UNQUOTED</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="188" pos:column="43">else <if pos:line="188" pos:column="48">if <condition pos:line="188" pos:column="51">(<expr><name><name pos:line="188" pos:column="52">sc</name><op:operator pos:line="188" pos:column="54">.</op:operator><name pos:line="188" pos:column="55">ch</name></name> <op:operator pos:line="188" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="188" pos:column="61">':'</lit:literal></expr>)</condition><then pos:line="188" pos:column="65"> <block pos:line="188" pos:column="66">{
						<comment type="line" pos:line="189" pos:column="49">// Searching for module name</comment>
						<if pos:line="190" pos:column="49">if <condition pos:line="190" pos:column="52">(<expr><name><name pos:line="190" pos:column="53">sc</name><op:operator pos:line="190" pos:column="55">.</op:operator><name pos:line="190" pos:column="56">chNext</name></name> <op:operator pos:line="190" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="190" pos:column="66">' '</lit:literal></expr>)</condition><then pos:line="190" pos:column="70"> <block pos:line="190" pos:column="71">{
							<comment type="line" pos:line="191" pos:column="57">// error</comment>
							<expr_stmt><expr><call><name><name pos:line="192" pos:column="57">sc</name><op:operator pos:line="192" pos:column="59">.</op:operator><name pos:line="192" pos:column="60">ChangeState</name></name><argument_list pos:line="192" pos:column="71">(<argument><expr><name pos:line="192" pos:column="72">SCE_ERLANG_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="193" pos:column="57">parse_state</name> <op:operator pos:line="193" pos:column="69">=</op:operator> <name pos:line="193" pos:column="71">STATE_NULL</name></expr>;</expr_stmt>
						}</block></then> <else pos:line="194" pos:column="51">else <block pos:line="194" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="195" pos:column="57">sc</name><op:operator pos:line="195" pos:column="59">.</op:operator><name pos:line="195" pos:column="60">Forward</name></name><argument_list pos:line="195" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
							<if pos:line="196" pos:column="57">if <condition pos:line="196" pos:column="60">(<expr><call><name pos:line="196" pos:column="61">isalnum</name><argument_list pos:line="196" pos:column="68">(<argument><expr><name><name pos:line="196" pos:column="69">sc</name><op:operator pos:line="196" pos:column="71">.</op:operator><name pos:line="196" pos:column="72">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="196" pos:column="76">  <block pos:line="196" pos:column="78">{
								<expr_stmt><expr><call><name><name pos:line="197" pos:column="65">sc</name><op:operator pos:line="197" pos:column="67">.</op:operator><name pos:line="197" pos:column="68">GetCurrent</name></name><argument_list pos:line="197" pos:column="78">(<argument><expr><name pos:line="197" pos:column="79">cur</name></expr></argument>, <argument><expr><sizeof pos:line="197" pos:column="84">sizeof<argument_list pos:line="197" pos:column="90">(<argument><expr><name pos:line="197" pos:column="91">cur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="198" pos:column="65">sc</name><op:operator pos:line="198" pos:column="67">.</op:operator><name pos:line="198" pos:column="68">ChangeState</name></name><argument_list pos:line="198" pos:column="79">(<argument><expr><name pos:line="198" pos:column="80">SCE_ERLANG_MODULES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><call><name><name pos:line="199" pos:column="65">sc</name><op:operator pos:line="199" pos:column="67">.</op:operator><name pos:line="199" pos:column="68">SetState</name></name><argument_list pos:line="199" pos:column="76">(<argument><expr><name pos:line="199" pos:column="77">SCE_ERLANG_MODULES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></else></if>
					}</block></then> <else pos:line="202" pos:column="43">else <if pos:line="202" pos:column="48">if <condition pos:line="202" pos:column="51">(<expr><op:operator pos:line="202" pos:column="52">!</op:operator><call><name pos:line="202" pos:column="53">IsAWordChar</name><argument_list pos:line="202" pos:column="64">(<argument><expr><name><name pos:line="202" pos:column="65">sc</name><op:operator pos:line="202" pos:column="67">.</op:operator><name pos:line="202" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="202" pos:column="72"> <block pos:line="202" pos:column="73">{

						<expr_stmt><expr><call><name><name pos:line="204" pos:column="49">sc</name><op:operator pos:line="204" pos:column="51">.</op:operator><name pos:line="204" pos:column="52">GetCurrent</name></name><argument_list pos:line="204" pos:column="62">(<argument><expr><name pos:line="204" pos:column="63">cur</name></expr></argument>, <argument><expr><sizeof pos:line="204" pos:column="68">sizeof<argument_list pos:line="204" pos:column="74">(<argument><expr><name pos:line="204" pos:column="75">cur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="205" pos:column="49">if <condition pos:line="205" pos:column="52">(<expr><call><name><name pos:line="205" pos:column="53">reservedWords</name><op:operator pos:line="205" pos:column="66">.</op:operator><name pos:line="205" pos:column="67">InList</name></name><argument_list pos:line="205" pos:column="73">(<argument><expr><name pos:line="205" pos:column="74">cur</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="205" pos:column="79"> <block pos:line="205" pos:column="80">{
							<expr_stmt><expr><name pos:line="206" pos:column="57">style</name> <op:operator pos:line="206" pos:column="63">=</op:operator> <name pos:line="206" pos:column="65">SCE_ERLANG_KEYWORD</name></expr>;</expr_stmt>
						}</block></then> <else pos:line="207" pos:column="51">else <if pos:line="207" pos:column="56">if <condition pos:line="207" pos:column="59">(<expr><call><name><name pos:line="207" pos:column="60">erlangBIFs</name><op:operator pos:line="207" pos:column="70">.</op:operator><name pos:line="207" pos:column="71">InList</name></name><argument_list pos:line="207" pos:column="77">(<argument><expr><name pos:line="207" pos:column="78">cur</name></expr></argument>)</argument_list></call>
									<op:operator pos:line="208" pos:column="73">&amp;&amp;</op:operator> <call><name pos:line="208" pos:column="76">strcmp</name><argument_list pos:line="208" pos:column="82">(<argument><expr><name pos:line="208" pos:column="83">cur</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="208" pos:column="87">"erlang:"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="208" pos:column="98">{
							<expr_stmt><expr><name pos:line="209" pos:column="57">style</name> <op:operator pos:line="209" pos:column="63">=</op:operator> <name pos:line="209" pos:column="65">SCE_ERLANG_BIFS</name></expr>;</expr_stmt>
						}</block></then> <else pos:line="210" pos:column="51">else <if pos:line="210" pos:column="56">if <condition pos:line="210" pos:column="59">(<expr><name><name pos:line="210" pos:column="60">sc</name><op:operator pos:line="210" pos:column="62">.</op:operator><name pos:line="210" pos:column="63">ch</name></name> <op:operator pos:line="210" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="210" pos:column="69">'('</lit:literal> <op:operator pos:line="210" pos:column="73">||</op:operator> <lit:literal type="char" pos:line="210" pos:column="76">'/'</lit:literal> <op:operator pos:line="210" pos:column="80">==</op:operator> <name><name pos:line="210" pos:column="83">sc</name><op:operator pos:line="210" pos:column="85">.</op:operator><name pos:line="210" pos:column="86">ch</name></name></expr>)</condition><then><block pos:line="210" pos:column="89">{
							<expr_stmt><expr><name pos:line="211" pos:column="57">style</name> <op:operator pos:line="211" pos:column="63">=</op:operator> <name pos:line="211" pos:column="65">SCE_ERLANG_FUNCTION_NAME</name></expr>;</expr_stmt>
						}</block></then> <else pos:line="212" pos:column="51">else <block pos:line="212" pos:column="56">{
							<expr_stmt><expr><name pos:line="213" pos:column="57">style</name> <op:operator pos:line="213" pos:column="63">=</op:operator> <name pos:line="213" pos:column="65">SCE_ERLANG_ATOM</name></expr>;</expr_stmt>
						}</block></else></if></else></if></else></if>

						<expr_stmt><expr><call><name><name pos:line="216" pos:column="49">sc</name><op:operator pos:line="216" pos:column="51">.</op:operator><name pos:line="216" pos:column="52">ChangeState</name></name><argument_list pos:line="216" pos:column="63">(<argument><expr><name pos:line="216" pos:column="64">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="217" pos:column="49">sc</name><op:operator pos:line="217" pos:column="51">.</op:operator><name pos:line="217" pos:column="52">SetState</name></name><argument_list pos:line="217" pos:column="60">(<argument><expr><name pos:line="217" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="218" pos:column="49">parse_state</name> <op:operator pos:line="218" pos:column="61">=</op:operator> <name pos:line="218" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if>

				}</block> <break pos:line="221" pos:column="35">break;</break>

				</case><case pos:line="223" pos:column="33">case <expr><name pos:line="223" pos:column="38">ATOM_QUOTED</name></expr> : <block pos:line="223" pos:column="52">{
					<if pos:line="224" pos:column="41">if <condition pos:line="224" pos:column="44">( <expr><lit:literal type="char" pos:line="224" pos:column="46">'@'</lit:literal> <op:operator pos:line="224" pos:column="50">==</op:operator> <name><name pos:line="224" pos:column="53">sc</name><op:operator pos:line="224" pos:column="55">.</op:operator><name pos:line="224" pos:column="56">ch</name></name></expr> )</condition><then><block pos:line="224" pos:column="60">{
						<expr_stmt><expr><name pos:line="225" pos:column="49">parse_state</name> <op:operator pos:line="225" pos:column="61">=</op:operator> <name pos:line="225" pos:column="63">NODE_NAME_QUOTED</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="226" pos:column="43">else <if pos:line="226" pos:column="48">if <condition pos:line="226" pos:column="51">(<expr><lit:literal type="char" pos:line="226" pos:column="52">'\''</lit:literal> <op:operator pos:line="226" pos:column="57">==</op:operator> <name><name pos:line="226" pos:column="60">sc</name><op:operator pos:line="226" pos:column="62">.</op:operator><name pos:line="226" pos:column="63">ch</name></name> <op:operator pos:line="226" pos:column="66">&amp;&amp;</op:operator> <lit:literal type="char" pos:line="226" pos:column="69">'\\'</lit:literal> <op:operator pos:line="226" pos:column="74">!=</op:operator> <name><name pos:line="226" pos:column="77">sc</name><op:operator pos:line="226" pos:column="79">.</op:operator><name pos:line="226" pos:column="80">chPrev</name></name></expr>)</condition><then pos:line="226" pos:column="87"> <block pos:line="226" pos:column="88">{
						<expr_stmt><expr><call><name><name pos:line="227" pos:column="49">sc</name><op:operator pos:line="227" pos:column="51">.</op:operator><name pos:line="227" pos:column="52">ChangeState</name></name><argument_list pos:line="227" pos:column="63">(<argument><expr><name pos:line="227" pos:column="64">SCE_ERLANG_ATOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="228" pos:column="49">sc</name><op:operator pos:line="228" pos:column="51">.</op:operator><name pos:line="228" pos:column="52">ForwardSetState</name></name><argument_list pos:line="228" pos:column="67">(<argument><expr><name pos:line="228" pos:column="68">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="229" pos:column="49">parse_state</name> <op:operator pos:line="229" pos:column="61">=</op:operator> <name pos:line="229" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block> <break pos:line="231" pos:column="35">break;</break>

			<comment type="block" pos:line="233" pos:column="25">/* -------------------------------------------------------------- */</comment>
			<comment type="block" pos:line="234" pos:column="25">/* Node names ----------------------------------------------------*/</comment>
				</case><case pos:line="235" pos:column="33">case <expr><name pos:line="235" pos:column="38">NODE_NAME_UNQUOTED</name></expr> : <block pos:line="235" pos:column="59">{
					<if pos:line="236" pos:column="41">if <condition pos:line="236" pos:column="44">(<expr><lit:literal type="char" pos:line="236" pos:column="45">'@'</lit:literal> <op:operator pos:line="236" pos:column="49">==</op:operator> <name><name pos:line="236" pos:column="52">sc</name><op:operator pos:line="236" pos:column="54">.</op:operator><name pos:line="236" pos:column="55">ch</name></name></expr>)</condition><then pos:line="236" pos:column="58"> <block pos:line="236" pos:column="59">{
						<expr_stmt><expr><call><name><name pos:line="237" pos:column="49">sc</name><op:operator pos:line="237" pos:column="51">.</op:operator><name pos:line="237" pos:column="52">SetState</name></name><argument_list pos:line="237" pos:column="60">(<argument><expr><name pos:line="237" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="238" pos:column="49">parse_state</name> <op:operator pos:line="238" pos:column="61">=</op:operator> <name pos:line="238" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="239" pos:column="43">else <if pos:line="239" pos:column="48">if <condition pos:line="239" pos:column="51">(<expr><op:operator pos:line="239" pos:column="52">!</op:operator><call><name pos:line="239" pos:column="53">IsAWordChar</name><argument_list pos:line="239" pos:column="64">(<argument><expr><name><name pos:line="239" pos:column="65">sc</name><op:operator pos:line="239" pos:column="67">.</op:operator><name pos:line="239" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="239" pos:column="72"> <block pos:line="239" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="240" pos:column="49">sc</name><op:operator pos:line="240" pos:column="51">.</op:operator><name pos:line="240" pos:column="52">ChangeState</name></name><argument_list pos:line="240" pos:column="63">(<argument><expr><name pos:line="240" pos:column="64">SCE_ERLANG_NODE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="241" pos:column="49">sc</name><op:operator pos:line="241" pos:column="51">.</op:operator><name pos:line="241" pos:column="52">SetState</name></name><argument_list pos:line="241" pos:column="60">(<argument><expr><name pos:line="241" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="242" pos:column="49">parse_state</name> <op:operator pos:line="242" pos:column="61">=</op:operator> <name pos:line="242" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block> <break pos:line="244" pos:column="35">break;</break>

				</case><case pos:line="246" pos:column="33">case <expr><name pos:line="246" pos:column="38">NODE_NAME_QUOTED</name></expr> : <block pos:line="246" pos:column="57">{
					<if pos:line="247" pos:column="41">if <condition pos:line="247" pos:column="44">(<expr><lit:literal type="char" pos:line="247" pos:column="45">'@'</lit:literal> <op:operator pos:line="247" pos:column="49">==</op:operator> <name><name pos:line="247" pos:column="52">sc</name><op:operator pos:line="247" pos:column="54">.</op:operator><name pos:line="247" pos:column="55">ch</name></name></expr>)</condition><then pos:line="247" pos:column="58"> <block pos:line="247" pos:column="59">{
						<expr_stmt><expr><call><name><name pos:line="248" pos:column="49">sc</name><op:operator pos:line="248" pos:column="51">.</op:operator><name pos:line="248" pos:column="52">SetState</name></name><argument_list pos:line="248" pos:column="60">(<argument><expr><name pos:line="248" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="249" pos:column="49">parse_state</name> <op:operator pos:line="249" pos:column="61">=</op:operator> <name pos:line="249" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="250" pos:column="43">else <if pos:line="250" pos:column="48">if <condition pos:line="250" pos:column="51">(<expr><lit:literal type="char" pos:line="250" pos:column="52">'\''</lit:literal> <op:operator pos:line="250" pos:column="57">==</op:operator> <name><name pos:line="250" pos:column="60">sc</name><op:operator pos:line="250" pos:column="62">.</op:operator><name pos:line="250" pos:column="63">ch</name></name> <op:operator pos:line="250" pos:column="66">&amp;&amp;</op:operator> <lit:literal type="char" pos:line="250" pos:column="69">'\\'</lit:literal> <op:operator pos:line="250" pos:column="74">!=</op:operator> <name><name pos:line="250" pos:column="77">sc</name><op:operator pos:line="250" pos:column="79">.</op:operator><name pos:line="250" pos:column="80">chPrev</name></name></expr>)</condition><then pos:line="250" pos:column="87"> <block pos:line="250" pos:column="88">{
						<expr_stmt><expr><call><name><name pos:line="251" pos:column="49">sc</name><op:operator pos:line="251" pos:column="51">.</op:operator><name pos:line="251" pos:column="52">ChangeState</name></name><argument_list pos:line="251" pos:column="63">(<argument><expr><name pos:line="251" pos:column="64">SCE_ERLANG_NODE_NAME_QUOTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="252" pos:column="49">sc</name><op:operator pos:line="252" pos:column="51">.</op:operator><name pos:line="252" pos:column="52">ForwardSetState</name></name><argument_list pos:line="252" pos:column="67">(<argument><expr><name pos:line="252" pos:column="68">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="253" pos:column="49">parse_state</name> <op:operator pos:line="253" pos:column="61">=</op:operator> <name pos:line="253" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block> <break pos:line="255" pos:column="35">break;</break>

			<comment type="block" pos:line="257" pos:column="25">/* -------------------------------------------------------------- */</comment>
			<comment type="block" pos:line="258" pos:column="25">/* Records -------------------------------------------------------*/</comment>
				</case><case pos:line="259" pos:column="33">case <expr><name pos:line="259" pos:column="38">RECORD_START</name></expr> : <block pos:line="259" pos:column="53">{
					<if pos:line="260" pos:column="41">if <condition pos:line="260" pos:column="44">(<expr><lit:literal type="char" pos:line="260" pos:column="45">'\''</lit:literal> <op:operator pos:line="260" pos:column="50">==</op:operator> <name><name pos:line="260" pos:column="53">sc</name><op:operator pos:line="260" pos:column="55">.</op:operator><name pos:line="260" pos:column="56">ch</name></name></expr>)</condition><then pos:line="260" pos:column="59"> <block pos:line="260" pos:column="60">{
						<expr_stmt><expr><name pos:line="261" pos:column="49">parse_state</name> <op:operator pos:line="261" pos:column="61">=</op:operator> <name pos:line="261" pos:column="63">RECORD_QUOTED</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="262" pos:column="43">else <if pos:line="262" pos:column="48">if <condition pos:line="262" pos:column="51">(<expr><call><name pos:line="262" pos:column="52">isalpha</name><argument_list pos:line="262" pos:column="59">(<argument><expr><name><name pos:line="262" pos:column="60">sc</name><op:operator pos:line="262" pos:column="62">.</op:operator><name pos:line="262" pos:column="63">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="262" pos:column="67">&amp;&amp;</op:operator> <call><name pos:line="262" pos:column="70">islower</name><argument_list pos:line="262" pos:column="77">(<argument><expr><name><name pos:line="262" pos:column="78">sc</name><op:operator pos:line="262" pos:column="80">.</op:operator><name pos:line="262" pos:column="81">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="262" pos:column="85"> <block pos:line="262" pos:column="86">{
						<expr_stmt><expr><name pos:line="263" pos:column="49">parse_state</name> <op:operator pos:line="263" pos:column="61">=</op:operator> <name pos:line="263" pos:column="63">RECORD_UNQUOTED</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="264" pos:column="43">else <block pos:line="264" pos:column="48">{ <comment type="line" pos:line="264" pos:column="50">// error</comment>
						<expr_stmt><expr><call><name><name pos:line="265" pos:column="49">sc</name><op:operator pos:line="265" pos:column="51">.</op:operator><name pos:line="265" pos:column="52">SetState</name></name><argument_list pos:line="265" pos:column="60">(<argument><expr><name pos:line="265" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="266" pos:column="49">parse_state</name> <op:operator pos:line="266" pos:column="61">=</op:operator> <name pos:line="266" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></else></if></else></if>
				}</block> <break pos:line="268" pos:column="35">break;</break>

				</case><case pos:line="270" pos:column="33">case <expr><name pos:line="270" pos:column="38">RECORD_UNQUOTED</name></expr> : <block pos:line="270" pos:column="56">{
					<if pos:line="271" pos:column="41">if <condition pos:line="271" pos:column="44">(<expr><op:operator pos:line="271" pos:column="45">!</op:operator><call><name pos:line="271" pos:column="46">IsAWordChar</name><argument_list pos:line="271" pos:column="57">(<argument><expr><name><name pos:line="271" pos:column="58">sc</name><op:operator pos:line="271" pos:column="60">.</op:operator><name pos:line="271" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="271" pos:column="65"> <block pos:line="271" pos:column="66">{
						<expr_stmt><expr><call><name><name pos:line="272" pos:column="49">sc</name><op:operator pos:line="272" pos:column="51">.</op:operator><name pos:line="272" pos:column="52">ChangeState</name></name><argument_list pos:line="272" pos:column="63">(<argument><expr><name pos:line="272" pos:column="64">SCE_ERLANG_RECORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="273" pos:column="49">sc</name><op:operator pos:line="273" pos:column="51">.</op:operator><name pos:line="273" pos:column="52">SetState</name></name><argument_list pos:line="273" pos:column="60">(<argument><expr><name pos:line="273" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="274" pos:column="49">parse_state</name> <op:operator pos:line="274" pos:column="61">=</op:operator> <name pos:line="274" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <break pos:line="276" pos:column="35">break;</break>

				</case><case pos:line="278" pos:column="33">case <expr><name pos:line="278" pos:column="38">RECORD_QUOTED</name></expr> : <block pos:line="278" pos:column="54">{
					<if pos:line="279" pos:column="41">if <condition pos:line="279" pos:column="44">(<expr><lit:literal type="char" pos:line="279" pos:column="45">'\''</lit:literal> <op:operator pos:line="279" pos:column="50">==</op:operator> <name><name pos:line="279" pos:column="53">sc</name><op:operator pos:line="279" pos:column="55">.</op:operator><name pos:line="279" pos:column="56">ch</name></name> <op:operator pos:line="279" pos:column="59">&amp;&amp;</op:operator> <lit:literal type="char" pos:line="279" pos:column="62">'\\'</lit:literal> <op:operator pos:line="279" pos:column="67">!=</op:operator> <name><name pos:line="279" pos:column="70">sc</name><op:operator pos:line="279" pos:column="72">.</op:operator><name pos:line="279" pos:column="73">chPrev</name></name></expr>)</condition><then pos:line="279" pos:column="80"> <block pos:line="279" pos:column="81">{
						<expr_stmt><expr><call><name><name pos:line="280" pos:column="49">sc</name><op:operator pos:line="280" pos:column="51">.</op:operator><name pos:line="280" pos:column="52">ChangeState</name></name><argument_list pos:line="280" pos:column="63">(<argument><expr><name pos:line="280" pos:column="64">SCE_ERLANG_RECORD_QUOTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="281" pos:column="49">sc</name><op:operator pos:line="281" pos:column="51">.</op:operator><name pos:line="281" pos:column="52">ForwardSetState</name></name><argument_list pos:line="281" pos:column="67">(<argument><expr><name pos:line="281" pos:column="68">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="282" pos:column="49">parse_state</name> <op:operator pos:line="282" pos:column="61">=</op:operator> <name pos:line="282" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <break pos:line="284" pos:column="35">break;</break>

			<comment type="block" pos:line="286" pos:column="25">/* -------------------------------------------------------------- */</comment>
			<comment type="block" pos:line="287" pos:column="25">/* Macros --------------------------------------------------------*/</comment>
				</case><case pos:line="288" pos:column="33">case <expr><name pos:line="288" pos:column="38">MACRO_START</name></expr> : <block pos:line="288" pos:column="52">{
					<if pos:line="289" pos:column="41">if <condition pos:line="289" pos:column="44">(<expr><lit:literal type="char" pos:line="289" pos:column="45">'\''</lit:literal> <op:operator pos:line="289" pos:column="50">==</op:operator> <name><name pos:line="289" pos:column="53">sc</name><op:operator pos:line="289" pos:column="55">.</op:operator><name pos:line="289" pos:column="56">ch</name></name></expr>)</condition><then pos:line="289" pos:column="59"> <block pos:line="289" pos:column="60">{
						<expr_stmt><expr><name pos:line="290" pos:column="49">parse_state</name> <op:operator pos:line="290" pos:column="61">=</op:operator> <name pos:line="290" pos:column="63">MACRO_QUOTED</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="291" pos:column="43">else <if pos:line="291" pos:column="48">if <condition pos:line="291" pos:column="51">(<expr><call><name pos:line="291" pos:column="52">isalpha</name><argument_list pos:line="291" pos:column="59">(<argument><expr><name><name pos:line="291" pos:column="60">sc</name><op:operator pos:line="291" pos:column="62">.</op:operator><name pos:line="291" pos:column="63">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="291" pos:column="67"> <block pos:line="291" pos:column="68">{
						<expr_stmt><expr><name pos:line="292" pos:column="49">parse_state</name> <op:operator pos:line="292" pos:column="61">=</op:operator> <name pos:line="292" pos:column="63">MACRO_UNQUOTED</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="293" pos:column="43">else <block pos:line="293" pos:column="48">{ <comment type="line" pos:line="293" pos:column="50">// error</comment>
						<expr_stmt><expr><call><name><name pos:line="294" pos:column="49">sc</name><op:operator pos:line="294" pos:column="51">.</op:operator><name pos:line="294" pos:column="52">SetState</name></name><argument_list pos:line="294" pos:column="60">(<argument><expr><name pos:line="294" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="295" pos:column="49">parse_state</name> <op:operator pos:line="295" pos:column="61">=</op:operator> <name pos:line="295" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></else></if></else></if>
				}</block> <break pos:line="297" pos:column="35">break;</break>

				</case><case pos:line="299" pos:column="33">case <expr><name pos:line="299" pos:column="38">MACRO_UNQUOTED</name></expr> : <block pos:line="299" pos:column="55">{
					<if pos:line="300" pos:column="41">if <condition pos:line="300" pos:column="44">(<expr><op:operator pos:line="300" pos:column="45">!</op:operator><call><name pos:line="300" pos:column="46">IsAWordChar</name><argument_list pos:line="300" pos:column="57">(<argument><expr><name><name pos:line="300" pos:column="58">sc</name><op:operator pos:line="300" pos:column="60">.</op:operator><name pos:line="300" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="300" pos:column="65"> <block pos:line="300" pos:column="66">{
						<expr_stmt><expr><call><name><name pos:line="301" pos:column="49">sc</name><op:operator pos:line="301" pos:column="51">.</op:operator><name pos:line="301" pos:column="52">ChangeState</name></name><argument_list pos:line="301" pos:column="63">(<argument><expr><name pos:line="301" pos:column="64">SCE_ERLANG_MACRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="302" pos:column="49">sc</name><op:operator pos:line="302" pos:column="51">.</op:operator><name pos:line="302" pos:column="52">SetState</name></name><argument_list pos:line="302" pos:column="60">(<argument><expr><name pos:line="302" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="303" pos:column="49">parse_state</name> <op:operator pos:line="303" pos:column="61">=</op:operator> <name pos:line="303" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <break pos:line="305" pos:column="35">break;</break>

				</case><case pos:line="307" pos:column="33">case <expr><name pos:line="307" pos:column="38">MACRO_QUOTED</name></expr> : <block pos:line="307" pos:column="53">{
					<if pos:line="308" pos:column="41">if <condition pos:line="308" pos:column="44">(<expr><lit:literal type="char" pos:line="308" pos:column="45">'\''</lit:literal> <op:operator pos:line="308" pos:column="50">==</op:operator> <name><name pos:line="308" pos:column="53">sc</name><op:operator pos:line="308" pos:column="55">.</op:operator><name pos:line="308" pos:column="56">ch</name></name> <op:operator pos:line="308" pos:column="59">&amp;&amp;</op:operator> <lit:literal type="char" pos:line="308" pos:column="62">'\\'</lit:literal> <op:operator pos:line="308" pos:column="67">!=</op:operator> <name><name pos:line="308" pos:column="70">sc</name><op:operator pos:line="308" pos:column="72">.</op:operator><name pos:line="308" pos:column="73">chPrev</name></name></expr>)</condition><then pos:line="308" pos:column="80"> <block pos:line="308" pos:column="81">{
						<expr_stmt><expr><call><name><name pos:line="309" pos:column="49">sc</name><op:operator pos:line="309" pos:column="51">.</op:operator><name pos:line="309" pos:column="52">ChangeState</name></name><argument_list pos:line="309" pos:column="63">(<argument><expr><name pos:line="309" pos:column="64">SCE_ERLANG_MACRO_QUOTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="310" pos:column="49">sc</name><op:operator pos:line="310" pos:column="51">.</op:operator><name pos:line="310" pos:column="52">ForwardSetState</name></name><argument_list pos:line="310" pos:column="67">(<argument><expr><name pos:line="310" pos:column="68">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="311" pos:column="49">parse_state</name> <op:operator pos:line="311" pos:column="61">=</op:operator> <name pos:line="311" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <break pos:line="313" pos:column="35">break;</break>

			<comment type="block" pos:line="315" pos:column="25">/* -------------------------------------------------------------- */</comment>
			<comment type="block" pos:line="316" pos:column="25">/* Numerics ------------------------------------------------------*/</comment>
			<comment type="block" pos:line="317" pos:column="25">/* Simple integer */</comment>
				</case><case pos:line="318" pos:column="33">case <expr><name pos:line="318" pos:column="38">NUMERAL_START</name></expr> : <block pos:line="318" pos:column="54">{
					<if pos:line="319" pos:column="41">if <condition pos:line="319" pos:column="44">(<expr><call><name pos:line="319" pos:column="45">isdigit</name><argument_list pos:line="319" pos:column="52">(<argument><expr><name><name pos:line="319" pos:column="53">sc</name><op:operator pos:line="319" pos:column="55">.</op:operator><name pos:line="319" pos:column="56">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="319" pos:column="60"> <block pos:line="319" pos:column="61">{
						<expr_stmt><expr><name pos:line="320" pos:column="49">radix_digits</name> <op:operator pos:line="320" pos:column="62">*=</op:operator> <lit:literal type="number" pos:line="320" pos:column="65">10</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="321" pos:column="49">radix_digits</name> <op:operator pos:line="321" pos:column="62">+=</op:operator> <name><name pos:line="321" pos:column="65">sc</name><op:operator pos:line="321" pos:column="67">.</op:operator><name pos:line="321" pos:column="68">ch</name></name> <op:operator pos:line="321" pos:column="71">-</op:operator> <lit:literal type="char" pos:line="321" pos:column="73">'0'</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="321" pos:column="78">// Assuming ASCII here!</comment>
					}</block></then> <else pos:line="322" pos:column="43">else <if pos:line="322" pos:column="48">if <condition pos:line="322" pos:column="51">(<expr><lit:literal type="char" pos:line="322" pos:column="52">'#'</lit:literal> <op:operator pos:line="322" pos:column="56">==</op:operator> <name><name pos:line="322" pos:column="59">sc</name><op:operator pos:line="322" pos:column="61">.</op:operator><name pos:line="322" pos:column="62">ch</name></name></expr>)</condition><then pos:line="322" pos:column="65"> <block pos:line="322" pos:column="66">{
						<if pos:line="323" pos:column="49">if <condition pos:line="323" pos:column="52">(<expr><lit:literal type="number" pos:line="323" pos:column="53">2</lit:literal> <op:operator pos:line="323" pos:column="55">&gt;</op:operator> <name pos:line="323" pos:column="57">radix_digits</name> <op:operator pos:line="323" pos:column="70">||</op:operator> <lit:literal type="number" pos:line="323" pos:column="73">36</lit:literal> <op:operator pos:line="323" pos:column="76">&lt;</op:operator> <name pos:line="323" pos:column="78">radix_digits</name></expr>)</condition><then pos:line="323" pos:column="91"> <block pos:line="323" pos:column="92">{
							<expr_stmt><expr><call><name><name pos:line="324" pos:column="57">sc</name><op:operator pos:line="324" pos:column="59">.</op:operator><name pos:line="324" pos:column="60">SetState</name></name><argument_list pos:line="324" pos:column="68">(<argument><expr><name pos:line="324" pos:column="69">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="325" pos:column="57">parse_state</name> <op:operator pos:line="325" pos:column="69">=</op:operator> <name pos:line="325" pos:column="71">STATE_NULL</name></expr>;</expr_stmt>
						}</block></then> <else pos:line="326" pos:column="51">else <block pos:line="326" pos:column="56">{
							<expr_stmt><expr><name pos:line="327" pos:column="57">parse_state</name> <op:operator pos:line="327" pos:column="69">=</op:operator> <name pos:line="327" pos:column="71">NUMERAL_BASE_VALUE</name></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then> <else pos:line="329" pos:column="43">else <if pos:line="329" pos:column="48">if <condition pos:line="329" pos:column="51">(<expr><lit:literal type="char" pos:line="329" pos:column="52">'.'</lit:literal> <op:operator pos:line="329" pos:column="56">==</op:operator> <name><name pos:line="329" pos:column="59">sc</name><op:operator pos:line="329" pos:column="61">.</op:operator><name pos:line="329" pos:column="62">ch</name></name> <op:operator pos:line="329" pos:column="65">&amp;&amp;</op:operator> <call><name pos:line="329" pos:column="68">isdigit</name><argument_list pos:line="329" pos:column="75">(<argument><expr><name><name pos:line="329" pos:column="76">sc</name><op:operator pos:line="329" pos:column="78">.</op:operator><name pos:line="329" pos:column="79">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="329" pos:column="87"> <block pos:line="329" pos:column="88">{
						<expr_stmt><expr><name pos:line="330" pos:column="49">radix_digits</name> <op:operator pos:line="330" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="330" pos:column="64">0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="331" pos:column="49">parse_state</name> <op:operator pos:line="331" pos:column="61">=</op:operator> <name pos:line="331" pos:column="63">NUMERAL_FLOAT</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="332" pos:column="43">else <if pos:line="332" pos:column="48">if <condition pos:line="332" pos:column="51">(<expr><lit:literal type="char" pos:line="332" pos:column="52">'e'</lit:literal> <op:operator pos:line="332" pos:column="56">==</op:operator> <name><name pos:line="332" pos:column="59">sc</name><op:operator pos:line="332" pos:column="61">.</op:operator><name pos:line="332" pos:column="62">ch</name></name> <op:operator pos:line="332" pos:column="65">||</op:operator> <lit:literal type="char" pos:line="332" pos:column="68">'E'</lit:literal> <op:operator pos:line="332" pos:column="72">==</op:operator> <name><name pos:line="332" pos:column="75">sc</name><op:operator pos:line="332" pos:column="77">.</op:operator><name pos:line="332" pos:column="78">ch</name></name></expr>)</condition><then pos:line="332" pos:column="81"> <block pos:line="332" pos:column="82">{
						<expr_stmt><expr><name pos:line="333" pos:column="49">exponent_digits</name> <op:operator pos:line="333" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="333" pos:column="67">0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="334" pos:column="49">parse_state</name> <op:operator pos:line="334" pos:column="61">=</op:operator> <name pos:line="334" pos:column="63">NUMERAL_EXPONENT</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="335" pos:column="43">else <block pos:line="335" pos:column="48">{
						<expr_stmt><expr><name pos:line="336" pos:column="49">radix_digits</name> <op:operator pos:line="336" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="336" pos:column="64">0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="337" pos:column="49">sc</name><op:operator pos:line="337" pos:column="51">.</op:operator><name pos:line="337" pos:column="52">ChangeState</name></name><argument_list pos:line="337" pos:column="63">(<argument><expr><name pos:line="337" pos:column="64">SCE_ERLANG_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="338" pos:column="49">sc</name><op:operator pos:line="338" pos:column="51">.</op:operator><name pos:line="338" pos:column="52">SetState</name></name><argument_list pos:line="338" pos:column="60">(<argument><expr><name pos:line="338" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="339" pos:column="49">parse_state</name> <op:operator pos:line="339" pos:column="61">=</op:operator> <name pos:line="339" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></else></if></else></if></else></if></else></if>
				}</block> <break pos:line="341" pos:column="35">break;</break>

			<comment type="block" pos:line="343" pos:column="25">/* Integer in other base than 10 (x#yyy) */</comment>
				</case><case pos:line="344" pos:column="33">case <expr><name pos:line="344" pos:column="38">NUMERAL_BASE_VALUE</name></expr> : <block pos:line="344" pos:column="59">{
					<if pos:line="345" pos:column="41">if <condition pos:line="345" pos:column="44">(<expr><op:operator pos:line="345" pos:column="45">!</op:operator><call><name pos:line="345" pos:column="46">is_radix</name><argument_list pos:line="345" pos:column="54">(<argument><expr><name pos:line="345" pos:column="55">radix_digits</name></expr></argument>,<argument><expr><name><name pos:line="345" pos:column="68">sc</name><op:operator pos:line="345" pos:column="70">.</op:operator><name pos:line="345" pos:column="71">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="345" pos:column="75"> <block pos:line="345" pos:column="76">{
						<expr_stmt><expr><name pos:line="346" pos:column="49">radix_digits</name> <op:operator pos:line="346" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="346" pos:column="64">0</lit:literal></expr>;</expr_stmt>

						<if pos:line="348" pos:column="49">if <condition pos:line="348" pos:column="52">(<expr><op:operator pos:line="348" pos:column="53">!</op:operator><call><name pos:line="348" pos:column="54">isalnum</name><argument_list pos:line="348" pos:column="61">(<argument><expr><name><name pos:line="348" pos:column="62">sc</name><op:operator pos:line="348" pos:column="64">.</op:operator><name pos:line="348" pos:column="65">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="348" pos:column="69">
							<expr_stmt><expr><call><name><name pos:line="349" pos:column="57">sc</name><op:operator pos:line="349" pos:column="59">.</op:operator><name pos:line="349" pos:column="60">ChangeState</name></name><argument_list pos:line="349" pos:column="71">(<argument><expr><name pos:line="349" pos:column="72">SCE_ERLANG_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

						<expr_stmt><expr><call><name><name pos:line="351" pos:column="49">sc</name><op:operator pos:line="351" pos:column="51">.</op:operator><name pos:line="351" pos:column="52">SetState</name></name><argument_list pos:line="351" pos:column="60">(<argument><expr><name pos:line="351" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="352" pos:column="49">parse_state</name> <op:operator pos:line="352" pos:column="61">=</op:operator> <name pos:line="352" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <break pos:line="354" pos:column="35">break;</break>

			<comment type="block" pos:line="356" pos:column="25">/* Float (x.yyy) */</comment>
				</case><case pos:line="357" pos:column="33">case <expr><name pos:line="357" pos:column="38">NUMERAL_FLOAT</name></expr> : <block pos:line="357" pos:column="54">{
					<if pos:line="358" pos:column="41">if <condition pos:line="358" pos:column="44">(<expr><lit:literal type="char" pos:line="358" pos:column="45">'e'</lit:literal> <op:operator pos:line="358" pos:column="49">==</op:operator> <name><name pos:line="358" pos:column="52">sc</name><op:operator pos:line="358" pos:column="54">.</op:operator><name pos:line="358" pos:column="55">ch</name></name> <op:operator pos:line="358" pos:column="58">||</op:operator> <lit:literal type="char" pos:line="358" pos:column="61">'E'</lit:literal> <op:operator pos:line="358" pos:column="65">==</op:operator> <name><name pos:line="358" pos:column="68">sc</name><op:operator pos:line="358" pos:column="70">.</op:operator><name pos:line="358" pos:column="71">ch</name></name></expr>)</condition><then pos:line="358" pos:column="74"> <block pos:line="358" pos:column="75">{
						<expr_stmt><expr><name pos:line="359" pos:column="49">exponent_digits</name> <op:operator pos:line="359" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="359" pos:column="67">0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="360" pos:column="49">parse_state</name> <op:operator pos:line="360" pos:column="61">=</op:operator> <name pos:line="360" pos:column="63">NUMERAL_EXPONENT</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="361" pos:column="43">else <if pos:line="361" pos:column="48">if <condition pos:line="361" pos:column="51">(<expr><op:operator pos:line="361" pos:column="52">!</op:operator><call><name pos:line="361" pos:column="53">isdigit</name><argument_list pos:line="361" pos:column="60">(<argument><expr><name><name pos:line="361" pos:column="61">sc</name><op:operator pos:line="361" pos:column="63">.</op:operator><name pos:line="361" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="361" pos:column="68"> <block pos:line="361" pos:column="69">{
						<expr_stmt><expr><call><name><name pos:line="362" pos:column="49">sc</name><op:operator pos:line="362" pos:column="51">.</op:operator><name pos:line="362" pos:column="52">ChangeState</name></name><argument_list pos:line="362" pos:column="63">(<argument><expr><name pos:line="362" pos:column="64">SCE_ERLANG_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="363" pos:column="49">sc</name><op:operator pos:line="363" pos:column="51">.</op:operator><name pos:line="363" pos:column="52">SetState</name></name><argument_list pos:line="363" pos:column="60">(<argument><expr><name pos:line="363" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="364" pos:column="49">parse_state</name> <op:operator pos:line="364" pos:column="61">=</op:operator> <name pos:line="364" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block> <break pos:line="366" pos:column="35">break;</break>

			<comment type="block" pos:line="368" pos:column="25">/* Exponent, either integer or float (xEyy, x.yyEzzz) */</comment>
				</case><case pos:line="369" pos:column="33">case <expr><name pos:line="369" pos:column="38">NUMERAL_EXPONENT</name></expr> : <block pos:line="369" pos:column="57">{
					<if pos:line="370" pos:column="41">if <condition pos:line="370" pos:column="44">(<expr><op:operator pos:line="370" pos:column="45">(</op:operator><lit:literal type="char" pos:line="370" pos:column="46">'-'</lit:literal> <op:operator pos:line="370" pos:column="50">==</op:operator> <name><name pos:line="370" pos:column="53">sc</name><op:operator pos:line="370" pos:column="55">.</op:operator><name pos:line="370" pos:column="56">ch</name></name> <op:operator pos:line="370" pos:column="59">||</op:operator> <lit:literal type="char" pos:line="370" pos:column="62">'+'</lit:literal> <op:operator pos:line="370" pos:column="66">==</op:operator> <name><name pos:line="370" pos:column="69">sc</name><op:operator pos:line="370" pos:column="71">.</op:operator><name pos:line="370" pos:column="72">ch</name></name><op:operator pos:line="370" pos:column="74">)</op:operator>
							<op:operator pos:line="371" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="371" pos:column="60">(</op:operator><call><name pos:line="371" pos:column="61">isdigit</name><argument_list pos:line="371" pos:column="68">(<argument><expr><name><name pos:line="371" pos:column="69">sc</name><op:operator pos:line="371" pos:column="71">.</op:operator><name pos:line="371" pos:column="72">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="371" pos:column="79">)</op:operator></expr>)</condition><then pos:line="371" pos:column="81"> <block pos:line="371" pos:column="82">{
						<expr_stmt><expr><call><name><name pos:line="372" pos:column="49">sc</name><op:operator pos:line="372" pos:column="51">.</op:operator><name pos:line="372" pos:column="52">Forward</name></name><argument_list pos:line="372" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="373" pos:column="43">else <if pos:line="373" pos:column="48">if <condition pos:line="373" pos:column="51">(<expr><op:operator pos:line="373" pos:column="52">!</op:operator><call><name pos:line="373" pos:column="53">isdigit</name><argument_list pos:line="373" pos:column="60">(<argument><expr><name><name pos:line="373" pos:column="61">sc</name><op:operator pos:line="373" pos:column="63">.</op:operator><name pos:line="373" pos:column="64">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="373" pos:column="68"> <block pos:line="373" pos:column="69">{
						<if pos:line="374" pos:column="49">if <condition pos:line="374" pos:column="52">(<expr><lit:literal type="number" pos:line="374" pos:column="53">0</lit:literal> <op:operator pos:line="374" pos:column="55">&lt;</op:operator> <name pos:line="374" pos:column="57">exponent_digits</name></expr>)</condition><then pos:line="374" pos:column="73">
							<expr_stmt><expr><call><name><name pos:line="375" pos:column="57">sc</name><op:operator pos:line="375" pos:column="59">.</op:operator><name pos:line="375" pos:column="60">ChangeState</name></name><argument_list pos:line="375" pos:column="71">(<argument><expr><name pos:line="375" pos:column="72">SCE_ERLANG_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
						<expr_stmt><expr><call><name><name pos:line="376" pos:column="49">sc</name><op:operator pos:line="376" pos:column="51">.</op:operator><name pos:line="376" pos:column="52">SetState</name></name><argument_list pos:line="376" pos:column="60">(<argument><expr><name pos:line="376" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="377" pos:column="49">parse_state</name> <op:operator pos:line="377" pos:column="61">=</op:operator> <name pos:line="377" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="378" pos:column="43">else <block pos:line="378" pos:column="48">{
						<expr_stmt><expr><op:operator pos:line="379" pos:column="49">++</op:operator><name pos:line="379" pos:column="51">exponent_digits</name></expr>;</expr_stmt>
					}</block></else></if></else></if>
				}</block> <break pos:line="381" pos:column="35">break;</break>

			<comment type="block" pos:line="383" pos:column="25">/* -------------------------------------------------------------- */</comment>
			<comment type="block" pos:line="384" pos:column="25">/* Preprocessor --------------------------------------------------*/</comment>
				</case><case pos:line="385" pos:column="33">case <expr><name pos:line="385" pos:column="38">PREPROCESSOR</name></expr> : <block pos:line="385" pos:column="53">{
					<if pos:line="386" pos:column="41">if <condition pos:line="386" pos:column="44">(<expr><op:operator pos:line="386" pos:column="45">!</op:operator><call><name pos:line="386" pos:column="46">IsAWordChar</name><argument_list pos:line="386" pos:column="57">(<argument><expr><name><name pos:line="386" pos:column="58">sc</name><op:operator pos:line="386" pos:column="60">.</op:operator><name pos:line="386" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="386" pos:column="65"> <block pos:line="386" pos:column="66">{

						<expr_stmt><expr><call><name><name pos:line="388" pos:column="49">sc</name><op:operator pos:line="388" pos:column="51">.</op:operator><name pos:line="388" pos:column="52">GetCurrent</name></name><argument_list pos:line="388" pos:column="62">(<argument><expr><name pos:line="388" pos:column="63">cur</name></expr></argument>, <argument><expr><sizeof pos:line="388" pos:column="68">sizeof<argument_list pos:line="388" pos:column="74">(<argument><expr><name pos:line="388" pos:column="75">cur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="389" pos:column="49">if <condition pos:line="389" pos:column="52">(<expr><call><name><name pos:line="389" pos:column="53">erlangPreproc</name><op:operator pos:line="389" pos:column="66">.</op:operator><name pos:line="389" pos:column="67">InList</name></name><argument_list pos:line="389" pos:column="73">(<argument><expr><name pos:line="389" pos:column="74">cur</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="389" pos:column="79"> <block pos:line="389" pos:column="80">{
							<expr_stmt><expr><name pos:line="390" pos:column="57">style</name> <op:operator pos:line="390" pos:column="63">=</op:operator> <name pos:line="390" pos:column="65">SCE_ERLANG_PREPROC</name></expr>;</expr_stmt>
						}</block></then> <else pos:line="391" pos:column="51">else <if pos:line="391" pos:column="56">if <condition pos:line="391" pos:column="59">(<expr><call><name><name pos:line="391" pos:column="60">erlangModulesAtt</name><op:operator pos:line="391" pos:column="76">.</op:operator><name pos:line="391" pos:column="77">InList</name></name><argument_list pos:line="391" pos:column="83">(<argument><expr><name pos:line="391" pos:column="84">cur</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="391" pos:column="89"> <block pos:line="391" pos:column="90">{
							<expr_stmt><expr><name pos:line="392" pos:column="57">style</name> <op:operator pos:line="392" pos:column="63">=</op:operator> <name pos:line="392" pos:column="65">SCE_ERLANG_MODULES_ATT</name></expr>;</expr_stmt>
						}</block></then></if></else></if>

						<expr_stmt><expr><call><name><name pos:line="395" pos:column="49">sc</name><op:operator pos:line="395" pos:column="51">.</op:operator><name pos:line="395" pos:column="52">ChangeState</name></name><argument_list pos:line="395" pos:column="63">(<argument><expr><name pos:line="395" pos:column="64">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="396" pos:column="49">sc</name><op:operator pos:line="396" pos:column="51">.</op:operator><name pos:line="396" pos:column="52">SetState</name></name><argument_list pos:line="396" pos:column="60">(<argument><expr><name pos:line="396" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="397" pos:column="49">parse_state</name> <op:operator pos:line="397" pos:column="61">=</op:operator> <name pos:line="397" pos:column="63">STATE_NULL</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block> <break pos:line="399" pos:column="35">break;</break>

			</case>}</block></switch>

		}</block></then> <comment type="block" pos:line="403" pos:column="19">/* End of : STATE_NULL != parse_state */</comment>
		<else pos:line="404" pos:column="17">else
		<block pos:line="405" pos:column="17">{
			<switch pos:line="406" pos:column="25">switch <condition pos:line="406" pos:column="32">(<expr><name><name pos:line="406" pos:column="33">sc</name><op:operator pos:line="406" pos:column="35">.</op:operator><name pos:line="406" pos:column="36">state</name></name></expr>)</condition> <block pos:line="406" pos:column="43">{
				<case pos:line="407" pos:column="33">case <expr><name pos:line="407" pos:column="38">SCE_ERLANG_VARIABLE</name></expr> : <block pos:line="407" pos:column="60">{
					<if pos:line="408" pos:column="41">if <condition pos:line="408" pos:column="44">(<expr><op:operator pos:line="408" pos:column="45">!</op:operator><call><name pos:line="408" pos:column="46">IsAWordChar</name><argument_list pos:line="408" pos:column="57">(<argument><expr><name><name pos:line="408" pos:column="58">sc</name><op:operator pos:line="408" pos:column="60">.</op:operator><name pos:line="408" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="408" pos:column="65">
						<expr_stmt><expr><call><name><name pos:line="409" pos:column="49">sc</name><op:operator pos:line="409" pos:column="51">.</op:operator><name pos:line="409" pos:column="52">SetState</name></name><argument_list pos:line="409" pos:column="60">(<argument><expr><name pos:line="409" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				}</block> <break pos:line="410" pos:column="35">break;</break>
				</case><case pos:line="411" pos:column="33">case <expr><name pos:line="411" pos:column="38">SCE_ERLANG_STRING</name></expr> : <block pos:line="411" pos:column="58">{
					 <if pos:line="412" pos:column="42">if <condition pos:line="412" pos:column="45">(<expr><name><name pos:line="412" pos:column="46">sc</name><op:operator pos:line="412" pos:column="48">.</op:operator><name pos:line="412" pos:column="49">ch</name></name> <op:operator pos:line="412" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="412" pos:column="55">'\"'</lit:literal> <op:operator pos:line="412" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="412" pos:column="63">sc</name><op:operator pos:line="412" pos:column="65">.</op:operator><name pos:line="412" pos:column="66">chPrev</name></name> <op:operator pos:line="412" pos:column="73">!=</op:operator> <lit:literal type="char" pos:line="412" pos:column="76">'\\'</lit:literal></expr>)</condition><then pos:line="412" pos:column="81">
						<expr_stmt><expr><call><name><name pos:line="413" pos:column="49">sc</name><op:operator pos:line="413" pos:column="51">.</op:operator><name pos:line="413" pos:column="52">ForwardSetState</name></name><argument_list pos:line="413" pos:column="67">(<argument><expr><name pos:line="413" pos:column="68">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				}</block> <break pos:line="414" pos:column="35">break;</break>
				</case><case pos:line="415" pos:column="33">case <expr><name pos:line="415" pos:column="38">SCE_ERLANG_COMMENT</name></expr> : <block pos:line="415" pos:column="59">{
					 <if pos:line="416" pos:column="42">if <condition pos:line="416" pos:column="45">(<expr><name><name pos:line="416" pos:column="46">sc</name><op:operator pos:line="416" pos:column="48">.</op:operator><name pos:line="416" pos:column="49">atLineEnd</name></name></expr>)</condition><then pos:line="416" pos:column="59">
						<expr_stmt><expr><call><name><name pos:line="417" pos:column="49">sc</name><op:operator pos:line="417" pos:column="51">.</op:operator><name pos:line="417" pos:column="52">SetState</name></name><argument_list pos:line="417" pos:column="60">(<argument><expr><name pos:line="417" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				}</block> <break pos:line="418" pos:column="35">break;</break>
				</case><case pos:line="419" pos:column="33">case <expr><name pos:line="419" pos:column="38">SCE_ERLANG_CHARACTER</name></expr> : <block pos:line="419" pos:column="61">{
					<if pos:line="420" pos:column="41">if <condition pos:line="420" pos:column="44">(<expr><name><name pos:line="420" pos:column="45">sc</name><op:operator pos:line="420" pos:column="47">.</op:operator><name pos:line="420" pos:column="48">chPrev</name></name> <op:operator pos:line="420" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="420" pos:column="58">'\\'</lit:literal></expr>)</condition><then pos:line="420" pos:column="63"> <block pos:line="420" pos:column="64">{
						<expr_stmt><expr><call><name><name pos:line="421" pos:column="49">sc</name><op:operator pos:line="421" pos:column="51">.</op:operator><name pos:line="421" pos:column="52">ForwardSetState</name></name><argument_list pos:line="421" pos:column="67">(<argument><expr><name pos:line="421" pos:column="68">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="422" pos:column="43">else <if pos:line="422" pos:column="48">if <condition pos:line="422" pos:column="51">(<expr><name><name pos:line="422" pos:column="52">sc</name><op:operator pos:line="422" pos:column="54">.</op:operator><name pos:line="422" pos:column="55">ch</name></name> <op:operator pos:line="422" pos:column="58">!=</op:operator> <lit:literal type="char" pos:line="422" pos:column="61">'\\'</lit:literal></expr>)</condition><then pos:line="422" pos:column="66"> <block pos:line="422" pos:column="67">{
						<expr_stmt><expr><call><name><name pos:line="423" pos:column="49">sc</name><op:operator pos:line="423" pos:column="51">.</op:operator><name pos:line="423" pos:column="52">ForwardSetState</name></name><argument_list pos:line="423" pos:column="67">(<argument><expr><name pos:line="423" pos:column="68">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block> <break pos:line="425" pos:column="35">break;</break>
				</case><case pos:line="426" pos:column="33">case <expr><name pos:line="426" pos:column="38">SCE_ERLANG_OPERATOR</name></expr> : <block pos:line="426" pos:column="60">{
					<if pos:line="427" pos:column="41">if <condition pos:line="427" pos:column="44">(<expr><name><name pos:line="427" pos:column="45">sc</name><op:operator pos:line="427" pos:column="47">.</op:operator><name pos:line="427" pos:column="48">chPrev</name></name> <op:operator pos:line="427" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="427" pos:column="58">'.'</lit:literal></expr>)</condition><then pos:line="427" pos:column="62"> <block pos:line="427" pos:column="63">{
						<if pos:line="428" pos:column="49">if <condition pos:line="428" pos:column="52">(<expr><name><name pos:line="428" pos:column="53">sc</name><op:operator pos:line="428" pos:column="55">.</op:operator><name pos:line="428" pos:column="56">ch</name></name> <op:operator pos:line="428" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="428" pos:column="62">'*'</lit:literal> <op:operator pos:line="428" pos:column="66">||</op:operator> <name><name pos:line="428" pos:column="69">sc</name><op:operator pos:line="428" pos:column="71">.</op:operator><name pos:line="428" pos:column="72">ch</name></name> <op:operator pos:line="428" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="428" pos:column="78">'/'</lit:literal> <op:operator pos:line="428" pos:column="82">||</op:operator> <name><name pos:line="428" pos:column="85">sc</name><op:operator pos:line="428" pos:column="87">.</op:operator><name pos:line="428" pos:column="88">ch</name></name> <op:operator pos:line="428" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="428" pos:column="94">'\\'</lit:literal>
							<op:operator pos:line="429" pos:column="57">||</op:operator> <name><name pos:line="429" pos:column="60">sc</name><op:operator pos:line="429" pos:column="62">.</op:operator><name pos:line="429" pos:column="63">ch</name></name> <op:operator pos:line="429" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="429" pos:column="69">'^'</lit:literal></expr>)</condition><then pos:line="429" pos:column="73"> <block pos:line="429" pos:column="74">{
							<expr_stmt><expr><call><name><name pos:line="430" pos:column="57">sc</name><op:operator pos:line="430" pos:column="59">.</op:operator><name pos:line="430" pos:column="60">ForwardSetState</name></name><argument_list pos:line="430" pos:column="75">(<argument><expr><name pos:line="430" pos:column="76">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="431" pos:column="51">else <if pos:line="431" pos:column="56">if <condition pos:line="431" pos:column="59">(<expr><name><name pos:line="431" pos:column="60">sc</name><op:operator pos:line="431" pos:column="62">.</op:operator><name pos:line="431" pos:column="63">ch</name></name> <op:operator pos:line="431" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="431" pos:column="69">'\''</lit:literal></expr>)</condition><then pos:line="431" pos:column="74"> <block pos:line="431" pos:column="75">{
							<expr_stmt><expr><call><name><name pos:line="432" pos:column="57">sc</name><op:operator pos:line="432" pos:column="59">.</op:operator><name pos:line="432" pos:column="60">ForwardSetState</name></name><argument_list pos:line="432" pos:column="75">(<argument><expr><name pos:line="432" pos:column="76">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="433" pos:column="51">else <block pos:line="433" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="434" pos:column="57">sc</name><op:operator pos:line="434" pos:column="59">.</op:operator><name pos:line="434" pos:column="60">SetState</name></name><argument_list pos:line="434" pos:column="68">(<argument><expr><name pos:line="434" pos:column="69">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if></else></if>
					}</block></then> <else pos:line="436" pos:column="43">else <block pos:line="436" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="437" pos:column="49">sc</name><op:operator pos:line="437" pos:column="51">.</op:operator><name pos:line="437" pos:column="52">SetState</name></name><argument_list pos:line="437" pos:column="60">(<argument><expr><name pos:line="437" pos:column="61">SCE_ERLANG_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block> <break pos:line="439" pos:column="35">break;</break>
			</case>}</block></switch>
		}</block></else></if>

		<if pos:line="443" pos:column="17">if <condition pos:line="443" pos:column="20">(<expr><name><name pos:line="443" pos:column="21">sc</name><op:operator pos:line="443" pos:column="23">.</op:operator><name pos:line="443" pos:column="24">state</name></name> <op:operator pos:line="443" pos:column="30">==</op:operator> <name pos:line="443" pos:column="33">SCE_ERLANG_DEFAULT</name></expr>)</condition><then pos:line="443" pos:column="52"> <block pos:line="443" pos:column="53">{
			<decl_stmt><decl><type><name pos:line="444" pos:column="25">bool</name></type> <name pos:line="444" pos:column="30">no_new_state</name> <init pos:line="444" pos:column="43">= <expr><lit:literal type="boolean" pos:line="444" pos:column="45">false</lit:literal></expr></init></decl>;</decl_stmt>

			<switch pos:line="446" pos:column="25">switch <condition pos:line="446" pos:column="32">(<expr><name><name pos:line="446" pos:column="33">sc</name><op:operator pos:line="446" pos:column="35">.</op:operator><name pos:line="446" pos:column="36">ch</name></name></expr>)</condition> <block pos:line="446" pos:column="40">{
				<case pos:line="447" pos:column="33">case <expr><lit:literal type="char" pos:line="447" pos:column="38">'\"'</lit:literal></expr> : <expr_stmt><expr><call><name><name pos:line="447" pos:column="45">sc</name><op:operator pos:line="447" pos:column="47">.</op:operator><name pos:line="447" pos:column="48">SetState</name></name><argument_list pos:line="447" pos:column="56">(<argument><expr><name pos:line="447" pos:column="57">SCE_ERLANG_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="447" pos:column="77">break;</break>
				</case><case pos:line="448" pos:column="33">case <expr><lit:literal type="char" pos:line="448" pos:column="38">'$'</lit:literal></expr> : <expr_stmt><expr><call><name><name pos:line="448" pos:column="44">sc</name><op:operator pos:line="448" pos:column="46">.</op:operator><name pos:line="448" pos:column="47">SetState</name></name><argument_list pos:line="448" pos:column="55">(<argument><expr><name pos:line="448" pos:column="56">SCE_ERLANG_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="448" pos:column="79">break;</break>
				</case><case pos:line="449" pos:column="33">case <expr><lit:literal type="char" pos:line="449" pos:column="38">'%'</lit:literal></expr> : <block pos:line="449" pos:column="44">{
					<expr_stmt><expr><name pos:line="450" pos:column="41">parse_state</name> <op:operator pos:line="450" pos:column="53">=</op:operator> <name pos:line="450" pos:column="55">COMMENT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="451" pos:column="41">sc</name><op:operator pos:line="451" pos:column="43">.</op:operator><name pos:line="451" pos:column="44">SetState</name></name><argument_list pos:line="451" pos:column="52">(<argument><expr><name pos:line="451" pos:column="53">SCE_ERLANG_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <break pos:line="452" pos:column="35">break;</break>
				</case><case pos:line="453" pos:column="33">case <expr><lit:literal type="char" pos:line="453" pos:column="38">'#'</lit:literal></expr> : <block pos:line="453" pos:column="44">{
					<expr_stmt><expr><name pos:line="454" pos:column="41">parse_state</name> <op:operator pos:line="454" pos:column="53">=</op:operator> <name pos:line="454" pos:column="55">RECORD_START</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="455" pos:column="41">sc</name><op:operator pos:line="455" pos:column="43">.</op:operator><name pos:line="455" pos:column="44">SetState</name></name><argument_list pos:line="455" pos:column="52">(<argument><expr><name pos:line="455" pos:column="53">SCE_ERLANG_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <break pos:line="456" pos:column="35">break;</break>
				</case><case pos:line="457" pos:column="33">case <expr><lit:literal type="char" pos:line="457" pos:column="38">'?'</lit:literal></expr> : <block pos:line="457" pos:column="44">{
					<expr_stmt><expr><name pos:line="458" pos:column="41">parse_state</name> <op:operator pos:line="458" pos:column="53">=</op:operator> <name pos:line="458" pos:column="55">MACRO_START</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="459" pos:column="41">sc</name><op:operator pos:line="459" pos:column="43">.</op:operator><name pos:line="459" pos:column="44">SetState</name></name><argument_list pos:line="459" pos:column="52">(<argument><expr><name pos:line="459" pos:column="53">SCE_ERLANG_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <break pos:line="460" pos:column="35">break;</break>
				</case><case pos:line="461" pos:column="33">case <expr><lit:literal type="char" pos:line="461" pos:column="38">'\''</lit:literal></expr> : <block pos:line="461" pos:column="45">{
					<expr_stmt><expr><name pos:line="462" pos:column="41">parse_state</name> <op:operator pos:line="462" pos:column="53">=</op:operator> <name pos:line="462" pos:column="55">ATOM_QUOTED</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="463" pos:column="41">sc</name><op:operator pos:line="463" pos:column="43">.</op:operator><name pos:line="463" pos:column="44">SetState</name></name><argument_list pos:line="463" pos:column="52">(<argument><expr><name pos:line="463" pos:column="53">SCE_ERLANG_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <break pos:line="464" pos:column="35">break;</break>
				</case><case pos:line="465" pos:column="33">case <expr><lit:literal type="char" pos:line="465" pos:column="38">'+'</lit:literal></expr> :
				</case><case pos:line="466" pos:column="33">case <expr><lit:literal type="char" pos:line="466" pos:column="38">'-'</lit:literal></expr> : <block pos:line="466" pos:column="44">{
					<if pos:line="467" pos:column="41">if <condition pos:line="467" pos:column="44">(<expr><call><name pos:line="467" pos:column="45">IsADigit</name><argument_list pos:line="467" pos:column="53">(<argument><expr><name><name pos:line="467" pos:column="54">sc</name><op:operator pos:line="467" pos:column="56">.</op:operator><name pos:line="467" pos:column="57">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="467" pos:column="65"> <block pos:line="467" pos:column="66">{
						<expr_stmt><expr><name pos:line="468" pos:column="49">parse_state</name> <op:operator pos:line="468" pos:column="61">=</op:operator> <name pos:line="468" pos:column="63">NUMERAL_START</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="469" pos:column="49">radix_digits</name> <op:operator pos:line="469" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="469" pos:column="64">0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="470" pos:column="49">sc</name><op:operator pos:line="470" pos:column="51">.</op:operator><name pos:line="470" pos:column="52">SetState</name></name><argument_list pos:line="470" pos:column="60">(<argument><expr><name pos:line="470" pos:column="61">SCE_ERLANG_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="471" pos:column="43">else <if pos:line="471" pos:column="48">if <condition pos:line="471" pos:column="51">(<expr><name><name pos:line="471" pos:column="52">sc</name><op:operator pos:line="471" pos:column="54">.</op:operator><name pos:line="471" pos:column="55">ch</name></name> <op:operator pos:line="471" pos:column="58">!=</op:operator> <lit:literal type="char" pos:line="471" pos:column="61">'+'</lit:literal></expr>)</condition><then pos:line="471" pos:column="65"> <block pos:line="471" pos:column="66">{
						<expr_stmt><expr><name pos:line="472" pos:column="49">parse_state</name> <op:operator pos:line="472" pos:column="61">=</op:operator> <name pos:line="472" pos:column="63">PREPROCESSOR</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="473" pos:column="49">sc</name><op:operator pos:line="473" pos:column="51">.</op:operator><name pos:line="473" pos:column="52">SetState</name></name><argument_list pos:line="473" pos:column="60">(<argument><expr><name pos:line="473" pos:column="61">SCE_ERLANG_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block> <break pos:line="475" pos:column="35">break;</break>
				</case><default pos:line="476" pos:column="33">default : <expr_stmt><expr><name pos:line="476" pos:column="43">no_new_state</name> <op:operator pos:line="476" pos:column="56">=</op:operator> <lit:literal type="boolean" pos:line="476" pos:column="58">true</lit:literal></expr>;</expr_stmt>
			</default>}</block></switch>

			<if pos:line="479" pos:column="25">if <condition pos:line="479" pos:column="28">(<expr><name pos:line="479" pos:column="29">no_new_state</name></expr>)</condition><then pos:line="479" pos:column="42"> <block pos:line="479" pos:column="43">{
				<if pos:line="480" pos:column="33">if <condition pos:line="480" pos:column="36">(<expr><call><name pos:line="480" pos:column="37">isdigit</name><argument_list pos:line="480" pos:column="44">(<argument><expr><name><name pos:line="480" pos:column="45">sc</name><op:operator pos:line="480" pos:column="47">.</op:operator><name pos:line="480" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="480" pos:column="52"> <block pos:line="480" pos:column="53">{
					<expr_stmt><expr><name pos:line="481" pos:column="41">parse_state</name> <op:operator pos:line="481" pos:column="53">=</op:operator> <name pos:line="481" pos:column="55">NUMERAL_START</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="482" pos:column="41">radix_digits</name> <op:operator pos:line="482" pos:column="54">=</op:operator> <name><name pos:line="482" pos:column="56">sc</name><op:operator pos:line="482" pos:column="58">.</op:operator><name pos:line="482" pos:column="59">ch</name></name> <op:operator pos:line="482" pos:column="62">-</op:operator> <lit:literal type="char" pos:line="482" pos:column="64">'0'</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="483" pos:column="41">sc</name><op:operator pos:line="483" pos:column="43">.</op:operator><name pos:line="483" pos:column="44">SetState</name></name><argument_list pos:line="483" pos:column="52">(<argument><expr><name pos:line="483" pos:column="53">SCE_ERLANG_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="484" pos:column="35">else <if pos:line="484" pos:column="40">if <condition pos:line="484" pos:column="43">(<expr><call><name pos:line="484" pos:column="44">isupper</name><argument_list pos:line="484" pos:column="51">(<argument><expr><name><name pos:line="484" pos:column="52">sc</name><op:operator pos:line="484" pos:column="54">.</op:operator><name pos:line="484" pos:column="55">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="484" pos:column="59">||</op:operator> <lit:literal type="char" pos:line="484" pos:column="62">'_'</lit:literal> <op:operator pos:line="484" pos:column="66">==</op:operator> <name><name pos:line="484" pos:column="69">sc</name><op:operator pos:line="484" pos:column="71">.</op:operator><name pos:line="484" pos:column="72">ch</name></name></expr>)</condition><then pos:line="484" pos:column="75"> <block pos:line="484" pos:column="76">{
					<expr_stmt><expr><call><name><name pos:line="485" pos:column="41">sc</name><op:operator pos:line="485" pos:column="43">.</op:operator><name pos:line="485" pos:column="44">SetState</name></name><argument_list pos:line="485" pos:column="52">(<argument><expr><name pos:line="485" pos:column="53">SCE_ERLANG_VARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="486" pos:column="35">else <if pos:line="486" pos:column="40">if <condition pos:line="486" pos:column="43">(<expr><call><name pos:line="486" pos:column="44">isalpha</name><argument_list pos:line="486" pos:column="51">(<argument><expr><name><name pos:line="486" pos:column="52">sc</name><op:operator pos:line="486" pos:column="54">.</op:operator><name pos:line="486" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="486" pos:column="59"> <block pos:line="486" pos:column="60">{
					<expr_stmt><expr><name pos:line="487" pos:column="41">parse_state</name> <op:operator pos:line="487" pos:column="53">=</op:operator> <name pos:line="487" pos:column="55">ATOM_UNQUOTED</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="488" pos:column="41">sc</name><op:operator pos:line="488" pos:column="43">.</op:operator><name pos:line="488" pos:column="44">SetState</name></name><argument_list pos:line="488" pos:column="52">(<argument><expr><name pos:line="488" pos:column="53">SCE_ERLANG_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="489" pos:column="35">else <if pos:line="489" pos:column="40">if <condition pos:line="489" pos:column="43">(<expr><call><name pos:line="489" pos:column="44">isoperator</name><argument_list pos:line="489" pos:column="54">(<argument><expr><call><name><name pos:line="489" pos:column="55">static_cast</name><argument_list pos:line="489" pos:column="66">&lt;<argument><expr><name pos:line="489" pos:column="67">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="489" pos:column="72">(<argument><expr><name><name pos:line="489" pos:column="73">sc</name><op:operator pos:line="489" pos:column="75">.</op:operator><name pos:line="489" pos:column="76">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
							<op:operator pos:line="490" pos:column="57">||</op:operator> <name><name pos:line="490" pos:column="60">sc</name><op:operator pos:line="490" pos:column="62">.</op:operator><name pos:line="490" pos:column="63">ch</name></name> <op:operator pos:line="490" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="490" pos:column="69">'\\'</lit:literal></expr>)</condition><then pos:line="490" pos:column="74"> <block pos:line="490" pos:column="75">{
					<expr_stmt><expr><call><name><name pos:line="491" pos:column="41">sc</name><op:operator pos:line="491" pos:column="43">.</op:operator><name pos:line="491" pos:column="44">SetState</name></name><argument_list pos:line="491" pos:column="52">(<argument><expr><name pos:line="491" pos:column="53">SCE_ERLANG_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if>
			}</block></then></if>
		}</block></then></if>

	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="497" pos:column="9">sc</name><op:operator pos:line="497" pos:column="11">.</op:operator><name pos:line="497" pos:column="12">Complete</name></name><argument_list pos:line="497" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="500" pos:column="1">static</specifier> <name pos:line="500" pos:column="8">int</name></type> <name pos:line="500" pos:column="12">ClassifyErlangFoldPoint</name><parameter_list pos:line="500" pos:column="35">(
	<param><decl><type><name pos:line="501" pos:column="9">Accessor</name> <type:modifier pos:line="501" pos:column="18">&amp;</type:modifier></type><name pos:line="501" pos:column="19">styler</name></decl></param>,
	<param><decl><type><name pos:line="502" pos:column="9">int</name></type> <name pos:line="502" pos:column="13">styleNext</name></decl></param>,
	<param><decl><type><name pos:line="503" pos:column="9">int</name></type> <name pos:line="503" pos:column="13">keyword_start</name></decl></param>
)</parameter_list> <block pos:line="504" pos:column="3">{
	<decl_stmt><decl><type><name pos:line="505" pos:column="9">int</name></type> <name pos:line="505" pos:column="13">lev</name> <init pos:line="505" pos:column="17">= <expr><lit:literal type="number" pos:line="505" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="506" pos:column="9">if <condition pos:line="506" pos:column="12">(<expr><call><name><name pos:line="506" pos:column="13">styler</name><op:operator pos:line="506" pos:column="19">.</op:operator><name pos:line="506" pos:column="20">Match</name></name><argument_list pos:line="506" pos:column="25">(<argument><expr><name pos:line="506" pos:column="26">keyword_start</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="506" pos:column="40">"case"</lit:literal></expr></argument>)</argument_list></call>
		<op:operator pos:line="507" pos:column="17">||</op:operator> <op:operator pos:line="507" pos:column="20">(</op:operator>
			<call><name><name pos:line="508" pos:column="25">styler</name><op:operator pos:line="508" pos:column="31">.</op:operator><name pos:line="508" pos:column="32">Match</name></name><argument_list pos:line="508" pos:column="37">(<argument><expr><name pos:line="508" pos:column="38">keyword_start</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="508" pos:column="52">"fun"</lit:literal></expr></argument>)</argument_list></call>
			<op:operator pos:line="509" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="509" pos:column="28">(</op:operator><name pos:line="509" pos:column="29">SCE_ERLANG_FUNCTION_NAME</name> <op:operator pos:line="509" pos:column="54">!=</op:operator> <name pos:line="509" pos:column="57">styleNext</name><op:operator pos:line="509" pos:column="66">)</op:operator>
			<op:operator pos:line="510" pos:column="25">)</op:operator>
		<op:operator pos:line="511" pos:column="17">||</op:operator> <call><name><name pos:line="511" pos:column="20">styler</name><op:operator pos:line="511" pos:column="26">.</op:operator><name pos:line="511" pos:column="27">Match</name></name><argument_list pos:line="511" pos:column="32">(<argument><expr><name pos:line="511" pos:column="33">keyword_start</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="511" pos:column="47">"if"</lit:literal></expr></argument>)</argument_list></call>
		<op:operator pos:line="512" pos:column="17">||</op:operator> <call><name><name pos:line="512" pos:column="20">styler</name><op:operator pos:line="512" pos:column="26">.</op:operator><name pos:line="512" pos:column="27">Match</name></name><argument_list pos:line="512" pos:column="32">(<argument><expr><name pos:line="512" pos:column="33">keyword_start</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="512" pos:column="47">"query"</lit:literal></expr></argument>)</argument_list></call>
		<op:operator pos:line="513" pos:column="17">||</op:operator> <call><name><name pos:line="513" pos:column="20">styler</name><op:operator pos:line="513" pos:column="26">.</op:operator><name pos:line="513" pos:column="27">Match</name></name><argument_list pos:line="513" pos:column="32">(<argument><expr><name pos:line="513" pos:column="33">keyword_start</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="513" pos:column="47">"receive"</lit:literal></expr></argument>)</argument_list></call></expr>
	)</condition><then pos:line="514" pos:column="10"> <block pos:line="514" pos:column="11">{
		<expr_stmt><expr><op:operator pos:line="515" pos:column="17">++</op:operator><name pos:line="515" pos:column="19">lev</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="516" pos:column="11">else <if pos:line="516" pos:column="16">if <condition pos:line="516" pos:column="19">(<expr><call><name><name pos:line="516" pos:column="20">styler</name><op:operator pos:line="516" pos:column="26">.</op:operator><name pos:line="516" pos:column="27">Match</name></name><argument_list pos:line="516" pos:column="32">(<argument><expr><name pos:line="516" pos:column="33">keyword_start</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="516" pos:column="47">"end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="516" pos:column="54"> <block pos:line="516" pos:column="55">{
		<expr_stmt><expr><op:operator pos:line="517" pos:column="17">--</op:operator><name pos:line="517" pos:column="19">lev</name></expr>;</expr_stmt>
	}</block></then></if></else></if>

	<return pos:line="520" pos:column="9">return <expr><name pos:line="520" pos:column="16">lev</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="523" pos:column="1">static</specifier> <name pos:line="523" pos:column="8">void</name></type> <name pos:line="523" pos:column="13">FoldErlangDoc</name><parameter_list pos:line="523" pos:column="26">(
	<param><decl><type><name pos:line="524" pos:column="9">unsigned</name> <name pos:line="524" pos:column="18">int</name></type> <name pos:line="524" pos:column="22">startPos</name></decl></param>, <param><decl><type><name pos:line="524" pos:column="32">int</name></type> <name pos:line="524" pos:column="36">length</name></decl></param>, <param><decl><type><name pos:line="524" pos:column="44">int</name></type> <name pos:line="524" pos:column="48">initStyle</name></decl></param>,
	<param><decl><type><name pos:line="525" pos:column="9">WordList</name><type:modifier pos:line="525" pos:column="17">*</type:modifier><type:modifier pos:line="525" pos:column="18">*</type:modifier></type></decl></param> <comment type="block" pos:line="525" pos:column="20">/*keywordlists*/</comment>, <param><decl><type><name pos:line="525" pos:column="38">Accessor</name> <type:modifier pos:line="525" pos:column="47">&amp;</type:modifier></type><name pos:line="525" pos:column="48">styler</name></decl></param>
)</parameter_list> <block pos:line="526" pos:column="3">{
	<decl_stmt><decl><type><name pos:line="527" pos:column="9">unsigned</name> <name pos:line="527" pos:column="18">int</name></type> <name pos:line="527" pos:column="22">endPos</name> <init pos:line="527" pos:column="29">= <expr><name pos:line="527" pos:column="31">startPos</name> <op:operator pos:line="527" pos:column="40">+</op:operator> <name pos:line="527" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="528" pos:column="9">int</name></type> <name pos:line="528" pos:column="13">currentLine</name> <init pos:line="528" pos:column="25">= <expr><call><name><name pos:line="528" pos:column="27">styler</name><op:operator pos:line="528" pos:column="33">.</op:operator><name pos:line="528" pos:column="34">GetLine</name></name><argument_list pos:line="528" pos:column="41">(<argument><expr><name pos:line="528" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="529" pos:column="9">int</name></type> <name pos:line="529" pos:column="13">lev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="530" pos:column="9">int</name></type> <name pos:line="530" pos:column="13">previousLevel</name> <init pos:line="530" pos:column="27">= <expr><call><name><name pos:line="530" pos:column="29">styler</name><op:operator pos:line="530" pos:column="35">.</op:operator><name pos:line="530" pos:column="36">LevelAt</name></name><argument_list pos:line="530" pos:column="43">(<argument><expr><name pos:line="530" pos:column="44">currentLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="530" pos:column="57">&amp;</op:operator> <name pos:line="530" pos:column="59">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="531" pos:column="9">int</name></type> <name pos:line="531" pos:column="13">currentLevel</name> <init pos:line="531" pos:column="26">= <expr><name pos:line="531" pos:column="28">previousLevel</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="532" pos:column="9">int</name></type> <name pos:line="532" pos:column="13">styleNext</name> <init pos:line="532" pos:column="23">= <expr><call><name><name pos:line="532" pos:column="25">styler</name><op:operator pos:line="532" pos:column="31">.</op:operator><name pos:line="532" pos:column="32">StyleAt</name></name><argument_list pos:line="532" pos:column="39">(<argument><expr><name pos:line="532" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="533" pos:column="9">int</name></type> <name pos:line="533" pos:column="13">style</name> <init pos:line="533" pos:column="19">= <expr><name pos:line="533" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="534" pos:column="9">int</name></type> <name pos:line="534" pos:column="13">stylePrev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="535" pos:column="9">int</name></type> <name pos:line="535" pos:column="13">keyword_start</name> <init pos:line="535" pos:column="27">= <expr><lit:literal type="number" pos:line="535" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="536" pos:column="9">char</name></type> <name pos:line="536" pos:column="14">ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="537" pos:column="9">char</name></type> <name pos:line="537" pos:column="14">chNext</name> <init pos:line="537" pos:column="21">= <expr><call><name><name pos:line="537" pos:column="23">styler</name><op:operator pos:line="537" pos:column="29">.</op:operator><name pos:line="537" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="537" pos:column="43">(<argument><expr><name pos:line="537" pos:column="44">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="538" pos:column="9">bool</name></type> <name pos:line="538" pos:column="14">atEOL</name></decl>;</decl_stmt>

	<for pos:line="540" pos:column="9">for (<init><decl><type><name pos:line="540" pos:column="14">unsigned</name> <name pos:line="540" pos:column="23">int</name></type> <name pos:line="540" pos:column="27">i</name> <init pos:line="540" pos:column="29">= <expr><name pos:line="540" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="540" pos:column="41">i</name> <op:operator pos:line="540" pos:column="43">&lt;</op:operator> <name pos:line="540" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="540" pos:column="53">i</name><op:operator pos:line="540" pos:column="54">++</op:operator></expr></incr>) <block pos:line="540" pos:column="58">{
		<expr_stmt><expr><name pos:line="541" pos:column="17">ch</name> <op:operator pos:line="541" pos:column="20">=</op:operator> <name pos:line="541" pos:column="22">chNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="542" pos:column="17">chNext</name> <op:operator pos:line="542" pos:column="24">=</op:operator> <call><name><name pos:line="542" pos:column="26">styler</name><op:operator pos:line="542" pos:column="32">.</op:operator><name pos:line="542" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="542" pos:column="46">(<argument><expr><name pos:line="542" pos:column="47">i</name> <op:operator pos:line="542" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="542" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="544" pos:column="17">// Get styles</comment>
		<expr_stmt><expr><name pos:line="545" pos:column="17">stylePrev</name> <op:operator pos:line="545" pos:column="27">=</op:operator> <name pos:line="545" pos:column="29">style</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="546" pos:column="17">style</name> <op:operator pos:line="546" pos:column="23">=</op:operator> <name pos:line="546" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="547" pos:column="17">styleNext</name> <op:operator pos:line="547" pos:column="27">=</op:operator> <call><name><name pos:line="547" pos:column="29">styler</name><op:operator pos:line="547" pos:column="35">.</op:operator><name pos:line="547" pos:column="36">StyleAt</name></name><argument_list pos:line="547" pos:column="43">(<argument><expr><name pos:line="547" pos:column="44">i</name> <op:operator pos:line="547" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="547" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="548" pos:column="17">atEOL</name> <op:operator pos:line="548" pos:column="23">=</op:operator> <op:operator pos:line="548" pos:column="25">(</op:operator><op:operator pos:line="548" pos:column="26">(</op:operator><name pos:line="548" pos:column="27">ch</name> <op:operator pos:line="548" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="548" pos:column="33">'\r'</lit:literal><op:operator pos:line="548" pos:column="37">)</op:operator> <op:operator pos:line="548" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="548" pos:column="42">(</op:operator><name pos:line="548" pos:column="43">chNext</name> <op:operator pos:line="548" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="548" pos:column="53">'\n'</lit:literal><op:operator pos:line="548" pos:column="57">)</op:operator><op:operator pos:line="548" pos:column="58">)</op:operator> <op:operator pos:line="548" pos:column="60">||</op:operator> <op:operator pos:line="548" pos:column="63">(</op:operator><name pos:line="548" pos:column="64">ch</name> <op:operator pos:line="548" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="548" pos:column="70">'\n'</lit:literal><op:operator pos:line="548" pos:column="74">)</op:operator></expr>;</expr_stmt>

		<if pos:line="550" pos:column="17">if <condition pos:line="550" pos:column="20">(<expr><name pos:line="550" pos:column="21">stylePrev</name> <op:operator pos:line="550" pos:column="31">!=</op:operator> <name pos:line="550" pos:column="34">SCE_ERLANG_KEYWORD</name>
			<op:operator pos:line="551" pos:column="25">&amp;&amp;</op:operator> <name pos:line="551" pos:column="28">style</name> <op:operator pos:line="551" pos:column="34">==</op:operator> <name pos:line="551" pos:column="37">SCE_ERLANG_KEYWORD</name></expr>)</condition><then pos:line="551" pos:column="56"> <block pos:line="551" pos:column="57">{
			<expr_stmt><expr><name pos:line="552" pos:column="25">keyword_start</name> <op:operator pos:line="552" pos:column="39">=</op:operator> <name pos:line="552" pos:column="41">i</name></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="555" pos:column="17">// Fold on keywords</comment>
		<if pos:line="556" pos:column="17">if <condition pos:line="556" pos:column="20">(<expr><name pos:line="556" pos:column="21">stylePrev</name> <op:operator pos:line="556" pos:column="31">==</op:operator> <name pos:line="556" pos:column="34">SCE_ERLANG_KEYWORD</name>
			<op:operator pos:line="557" pos:column="25">&amp;&amp;</op:operator> <name pos:line="557" pos:column="28">style</name> <op:operator pos:line="557" pos:column="34">!=</op:operator> <name pos:line="557" pos:column="37">SCE_ERLANG_KEYWORD</name>
			<op:operator pos:line="558" pos:column="25">&amp;&amp;</op:operator> <name pos:line="558" pos:column="28">style</name> <op:operator pos:line="558" pos:column="34">!=</op:operator> <name pos:line="558" pos:column="37">SCE_ERLANG_ATOM</name></expr>
		)</condition><then pos:line="559" pos:column="18"> <block pos:line="559" pos:column="19">{
			<expr_stmt><expr><name pos:line="560" pos:column="25">currentLevel</name> <op:operator pos:line="560" pos:column="38">+=</op:operator> <call><name pos:line="560" pos:column="41">ClassifyErlangFoldPoint</name><argument_list pos:line="560" pos:column="64">(<argument><expr><name pos:line="560" pos:column="65">styler</name></expr></argument>,
													<argument><expr><name pos:line="561" pos:column="105">styleNext</name></expr></argument>,
													<argument><expr><name pos:line="562" pos:column="105">keyword_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="565" pos:column="17">// Fold on comments</comment>
		<if pos:line="566" pos:column="17">if <condition pos:line="566" pos:column="20">(<expr><name pos:line="566" pos:column="21">style</name> <op:operator pos:line="566" pos:column="27">==</op:operator> <name pos:line="566" pos:column="30">SCE_ERLANG_COMMENT</name>
			<op:operator pos:line="567" pos:column="25">||</op:operator> <name pos:line="567" pos:column="28">style</name> <op:operator pos:line="567" pos:column="34">==</op:operator> <name pos:line="567" pos:column="37">SCE_ERLANG_COMMENT_MODULE</name>
			<op:operator pos:line="568" pos:column="25">||</op:operator> <name pos:line="568" pos:column="28">style</name> <op:operator pos:line="568" pos:column="34">==</op:operator> <name pos:line="568" pos:column="37">SCE_ERLANG_COMMENT_FUNCTION</name></expr>)</condition><then pos:line="568" pos:column="65"> <block pos:line="568" pos:column="66">{

			<if pos:line="570" pos:column="25">if <condition pos:line="570" pos:column="28">(<expr><name pos:line="570" pos:column="29">ch</name> <op:operator pos:line="570" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="570" pos:column="35">'%'</lit:literal> <op:operator pos:line="570" pos:column="39">&amp;&amp;</op:operator> <name pos:line="570" pos:column="42">chNext</name> <op:operator pos:line="570" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="570" pos:column="52">'{'</lit:literal></expr>)</condition><then pos:line="570" pos:column="56"> <block pos:line="570" pos:column="57">{
				<expr_stmt><expr><name pos:line="571" pos:column="33">currentLevel</name><op:operator pos:line="571" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="572" pos:column="27">else <if pos:line="572" pos:column="32">if <condition pos:line="572" pos:column="35">(<expr><name pos:line="572" pos:column="36">ch</name> <op:operator pos:line="572" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="572" pos:column="42">'%'</lit:literal> <op:operator pos:line="572" pos:column="46">&amp;&amp;</op:operator> <name pos:line="572" pos:column="49">chNext</name> <op:operator pos:line="572" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="572" pos:column="59">'}'</lit:literal></expr>)</condition><then pos:line="572" pos:column="63"> <block pos:line="572" pos:column="64">{
				<expr_stmt><expr><name pos:line="573" pos:column="33">currentLevel</name><op:operator pos:line="573" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>

		<comment type="line" pos:line="577" pos:column="17">// Fold on braces</comment>
		<if pos:line="578" pos:column="17">if <condition pos:line="578" pos:column="20">(<expr><name pos:line="578" pos:column="21">style</name> <op:operator pos:line="578" pos:column="27">==</op:operator> <name pos:line="578" pos:column="30">SCE_ERLANG_OPERATOR</name></expr>)</condition><then pos:line="578" pos:column="50"> <block pos:line="578" pos:column="51">{
			<if pos:line="579" pos:column="25">if <condition pos:line="579" pos:column="28">(<expr><name pos:line="579" pos:column="29">ch</name> <op:operator pos:line="579" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="579" pos:column="35">'{'</lit:literal> <op:operator pos:line="579" pos:column="39">||</op:operator> <name pos:line="579" pos:column="42">ch</name> <op:operator pos:line="579" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="579" pos:column="48">'('</lit:literal> <op:operator pos:line="579" pos:column="52">||</op:operator> <name pos:line="579" pos:column="55">ch</name> <op:operator pos:line="579" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="579" pos:column="61">'['</lit:literal></expr>)</condition><then pos:line="579" pos:column="65"> <block pos:line="579" pos:column="66">{
				<expr_stmt><expr><name pos:line="580" pos:column="33">currentLevel</name><op:operator pos:line="580" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="581" pos:column="27">else <if pos:line="581" pos:column="32">if <condition pos:line="581" pos:column="35">(<expr><name pos:line="581" pos:column="36">ch</name> <op:operator pos:line="581" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="581" pos:column="42">'}'</lit:literal> <op:operator pos:line="581" pos:column="46">||</op:operator> <name pos:line="581" pos:column="49">ch</name> <op:operator pos:line="581" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="581" pos:column="55">')'</lit:literal> <op:operator pos:line="581" pos:column="59">||</op:operator> <name pos:line="581" pos:column="62">ch</name> <op:operator pos:line="581" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="581" pos:column="68">']'</lit:literal></expr>)</condition><then pos:line="581" pos:column="72"> <block pos:line="581" pos:column="73">{
				<expr_stmt><expr><name pos:line="582" pos:column="33">currentLevel</name><op:operator pos:line="582" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>


		<if pos:line="587" pos:column="17">if <condition pos:line="587" pos:column="20">(<expr><name pos:line="587" pos:column="21">atEOL</name></expr>)</condition><then pos:line="587" pos:column="27"> <block pos:line="587" pos:column="28">{
			<expr_stmt><expr><name pos:line="588" pos:column="25">lev</name> <op:operator pos:line="588" pos:column="29">=</op:operator> <name pos:line="588" pos:column="31">previousLevel</name></expr>;</expr_stmt>

			<if pos:line="590" pos:column="25">if <condition pos:line="590" pos:column="28">(<expr><name pos:line="590" pos:column="29">currentLevel</name> <op:operator pos:line="590" pos:column="42">&gt;</op:operator> <name pos:line="590" pos:column="44">previousLevel</name></expr>)</condition><then pos:line="590" pos:column="58">
				<expr_stmt><expr><name pos:line="591" pos:column="33">lev</name> <op:operator pos:line="591" pos:column="37">|=</op:operator> <name pos:line="591" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>

			<if pos:line="593" pos:column="25">if <condition pos:line="593" pos:column="28">(<expr><name pos:line="593" pos:column="29">lev</name> <op:operator pos:line="593" pos:column="33">!=</op:operator> <call><name><name pos:line="593" pos:column="36">styler</name><op:operator pos:line="593" pos:column="42">.</op:operator><name pos:line="593" pos:column="43">LevelAt</name></name><argument_list pos:line="593" pos:column="50">(<argument><expr><name pos:line="593" pos:column="51">currentLine</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="593" pos:column="64">
				<expr_stmt><expr><call><name><name pos:line="594" pos:column="33">styler</name><op:operator pos:line="594" pos:column="39">.</op:operator><name pos:line="594" pos:column="40">SetLevel</name></name><argument_list pos:line="594" pos:column="48">(<argument><expr><name pos:line="594" pos:column="49">currentLine</name></expr></argument>, <argument><expr><name pos:line="594" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><name pos:line="596" pos:column="25">currentLine</name><op:operator pos:line="596" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="597" pos:column="25">previousLevel</name> <op:operator pos:line="597" pos:column="39">=</op:operator> <name pos:line="597" pos:column="41">currentLevel</name></expr>;</expr_stmt>
		}</block></then></if>

	}</block></for>

	<comment type="line" pos:line="602" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<expr_stmt><expr><call><name><name pos:line="603" pos:column="9">styler</name><op:operator pos:line="603" pos:column="15">.</op:operator><name pos:line="603" pos:column="16">SetLevel</name></name><argument_list pos:line="603" pos:column="24">(<argument><expr><name pos:line="603" pos:column="25">currentLine</name></expr></argument>,
					<argument><expr><name pos:line="604" pos:column="41">previousLevel</name>
					<op:operator pos:line="605" pos:column="41">|</op:operator> <op:operator pos:line="605" pos:column="43">(</op:operator><call><name><name pos:line="605" pos:column="44">styler</name><op:operator pos:line="605" pos:column="50">.</op:operator><name pos:line="605" pos:column="51">LevelAt</name></name><argument_list pos:line="605" pos:column="58">(<argument><expr><name pos:line="605" pos:column="59">currentLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="605" pos:column="72">&amp;</op:operator> <op:operator pos:line="605" pos:column="74">~</op:operator><name pos:line="605" pos:column="75">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="605" pos:column="97">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="608" pos:column="1">static</specifier> <specifier pos:line="608" pos:column="8">const</specifier> <name pos:line="608" pos:column="14">char</name> <type:modifier pos:line="608" pos:column="19">*</type:modifier> <specifier pos:line="608" pos:column="21">const</specifier></type> <name><name pos:line="608" pos:column="27">erlangWordListDesc</name><index pos:line="608" pos:column="45">[]</index></name> <init pos:line="608" pos:column="48">= <expr><block pos:line="608" pos:column="50">{
	<expr><lit:literal type="string" pos:line="609" pos:column="9">"Erlang Reserved words"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="610" pos:column="9">"Erlang BIFs"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="611" pos:column="9">"Erlang Preprocessor"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="612" pos:column="9">"Erlang Module Attributes"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="613" pos:column="9">"Erlang Documentation"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="614" pos:column="9">"Erlang Documentation Macro"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="615" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="618" pos:column="1">LexerModule</name></type> <name pos:line="618" pos:column="13">lmErlang</name><argument_list pos:line="618" pos:column="21">(
	<argument><expr><name pos:line="619" pos:column="9">SCLEX_ERLANG</name></expr></argument>,
	<argument><expr><name pos:line="620" pos:column="9">ColouriseErlangDoc</name></expr></argument>,
	<argument><expr><lit:literal type="string" pos:line="621" pos:column="9">"erlang"</lit:literal></expr></argument>,
	<argument><expr><name pos:line="622" pos:column="9">FoldErlangDoc</name></expr></argument>,
	<argument><expr><name pos:line="623" pos:column="9">erlangWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
