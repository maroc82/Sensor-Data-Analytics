<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\contextmenu\ContextMenu.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">CONTEXTMENU</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">CONTEXTMENU</name></cpp:macro></cpp:define>

<using pos:line="32" pos:column="1">using namespace <name pos:line="32" pos:column="17">std</name>;</using>

<struct pos:line="34" pos:column="1">struct <name pos:line="34" pos:column="8">MenuItemUnit</name> <block pos:line="34" pos:column="21">{<public type="default" pos:line="34" pos:column="22">
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">unsigned</name> <name pos:line="35" pos:column="18">long</name></type> <name pos:line="35" pos:column="23">_cmdID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">generic_string</name></type> <name pos:line="36" pos:column="24">_itemName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">generic_string</name></type> <name pos:line="37" pos:column="24">_parentFolderName</name></decl>;</decl_stmt>
	<constructor><name pos:line="38" pos:column="9">MenuItemUnit</name><parameter_list pos:line="38" pos:column="21">()</parameter_list> <member_list pos:line="38" pos:column="24">: <call><name pos:line="38" pos:column="26">_cmdID</name><argument_list pos:line="38" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="38" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="35">,</op:operator> <call><name pos:line="38" pos:column="37">_itemName</name><argument_list pos:line="38" pos:column="46">(<argument><expr><call><name pos:line="38" pos:column="47">TEXT</name><argument_list pos:line="38" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="52">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="56">,</op:operator> <call><name pos:line="38" pos:column="58">_parentFolderName</name><argument_list pos:line="38" pos:column="75">(<argument><expr><call><name pos:line="38" pos:column="76">TEXT</name><argument_list pos:line="38" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="38" pos:column="81">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></member_list><block pos:line="38" pos:column="85">{}</block></constructor><empty_stmt pos:line="38" pos:column="87">;</empty_stmt>
	<constructor><name pos:line="39" pos:column="9">MenuItemUnit</name><parameter_list pos:line="39" pos:column="21">(<param><decl><type><name pos:line="39" pos:column="22">unsigned</name> <name pos:line="39" pos:column="31">long</name></type> <name pos:line="39" pos:column="36">cmdID</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="43">generic_string</name></type> <name pos:line="39" pos:column="58">itemName</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="68">generic_string</name></type> <name pos:line="39" pos:column="83">parentFolderName</name><init pos:line="39" pos:column="99">=<expr><call><name pos:line="39" pos:column="100">TEXT</name><argument_list pos:line="39" pos:column="104">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="105">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl></param>)</parameter_list>
		<member_list pos:line="40" pos:column="17">: <call><name pos:line="40" pos:column="19">_cmdID</name><argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">cmdID</name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="32">,</op:operator> <call><name pos:line="40" pos:column="34">_itemName</name><argument_list pos:line="40" pos:column="43">(<argument><expr><name pos:line="40" pos:column="44">itemName</name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="53">,</op:operator> <call><name pos:line="40" pos:column="55">_parentFolderName</name><argument_list pos:line="40" pos:column="72">(<argument><expr><name pos:line="40" pos:column="73">parentFolderName</name></expr></argument>)</argument_list></call></member_list><block pos:line="40" pos:column="90">{}</block></constructor><empty_stmt pos:line="40" pos:column="92">;</empty_stmt>
	<constructor_decl><name pos:line="41" pos:column="9">MenuItemUnit</name><parameter_list pos:line="41" pos:column="21">(<param><decl><type><name pos:line="41" pos:column="22">unsigned</name> <name pos:line="41" pos:column="31">long</name></type> <name pos:line="41" pos:column="36">cmdID</name></decl></param>, <param><decl><type><specifier pos:line="41" pos:column="43">const</specifier> <name pos:line="41" pos:column="49">TCHAR</name> <type:modifier pos:line="41" pos:column="55">*</type:modifier></type><name pos:line="41" pos:column="56">itemName</name></decl></param>, <param><decl><type><specifier pos:line="41" pos:column="66">const</specifier> <name pos:line="41" pos:column="72">TCHAR</name> <type:modifier pos:line="41" pos:column="78">*</type:modifier></type><name pos:line="41" pos:column="79">parentFolderName</name><init pos:line="41" pos:column="95">=<expr><name pos:line="41" pos:column="96">NULL</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>
</public>}</block>;</struct>

<class pos:line="44" pos:column="1">class <name pos:line="44" pos:column="7">ContextMenu</name> <block pos:line="44" pos:column="19">{<private type="default" pos:line="44" pos:column="20">
</private><public pos:line="45" pos:column="1">public:
	<constructor><name pos:line="46" pos:column="9">ContextMenu</name><parameter_list pos:line="46" pos:column="20">()</parameter_list> <member_list pos:line="46" pos:column="23">: <call><name pos:line="46" pos:column="25">_hParent</name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="39">,</op:operator> <call><name pos:line="46" pos:column="41">_hMenu</name><argument_list pos:line="46" pos:column="47">(<argument><expr><name pos:line="46" pos:column="48">NULL</name></expr></argument>)</argument_list></call> </member_list><block pos:line="46" pos:column="54">{}</block></constructor><empty_stmt pos:line="46" pos:column="56">;</empty_stmt>
	<destructor_decl><name pos:line="47" pos:column="9">~<name pos:line="47" pos:column="10">ContextMenu</name></name><parameter_list pos:line="47" pos:column="21">()</parameter_list>;</destructor_decl>

	<function_decl><type><name pos:line="49" pos:column="9">void</name></type> <name pos:line="49" pos:column="14">create</name><parameter_list pos:line="49" pos:column="20">(<param><decl><type><name pos:line="49" pos:column="21">HWND</name></type> <name pos:line="49" pos:column="26">hParent</name></decl></param>, <param><decl><type><specifier pos:line="49" pos:column="35">const</specifier> <name><name pos:line="49" pos:column="41">vector</name><argument_list pos:line="49" pos:column="47">&lt;<argument><expr><name pos:line="49" pos:column="48">MenuItemUnit</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="49" pos:column="62">&amp;</type:modifier></type> <name pos:line="49" pos:column="64">menuItemArray</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="50" pos:column="9">bool</name></type> <name pos:line="50" pos:column="14">isCreated</name><parameter_list pos:line="50" pos:column="23">()</parameter_list> <specifier pos:line="50" pos:column="26">const</specifier> <block pos:line="50" pos:column="32">{<return pos:line="50" pos:column="33">return <expr><name pos:line="50" pos:column="40">_hMenu</name> <op:operator pos:line="50" pos:column="47">!=</op:operator> <name pos:line="50" pos:column="50">NULL</name></expr>;</return>}</block></function><empty_stmt pos:line="50" pos:column="56">;</empty_stmt>
	
	<function><type><name pos:line="52" pos:column="9">void</name></type> <name pos:line="52" pos:column="14">display</name><parameter_list pos:line="52" pos:column="21">(<param><decl><type><specifier pos:line="52" pos:column="22">const</specifier> <name pos:line="52" pos:column="28">POINT</name> <type:modifier pos:line="52" pos:column="34">&amp;</type:modifier></type> <name pos:line="52" pos:column="36">p</name></decl></param>)</parameter_list> <specifier pos:line="52" pos:column="39">const</specifier> <block pos:line="52" pos:column="45">{
		<expr_stmt><expr><call><name><op:operator pos:line="53" pos:column="17">::</op:operator><name pos:line="53" pos:column="19">TrackPopupMenu</name></name><argument_list pos:line="53" pos:column="33">(<argument><expr><name pos:line="53" pos:column="34">_hMenu</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="42">TPM_LEFTALIGN</name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="57">p</name><op:operator pos:line="53" pos:column="58">.</op:operator><name pos:line="53" pos:column="59">x</name></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="62">p</name><op:operator pos:line="53" pos:column="63">.</op:operator><name pos:line="53" pos:column="64">y</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="53" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="70">_hParent</name></expr></argument>, <argument><expr><name pos:line="53" pos:column="80">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="54" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="56" pos:column="9">void</name></type> <name pos:line="56" pos:column="14">enableItem</name><parameter_list pos:line="56" pos:column="24">(<param><decl><type><name pos:line="56" pos:column="25">int</name></type> <name pos:line="56" pos:column="29">cmdID</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="36">bool</name></type> <name pos:line="56" pos:column="41">doEnable</name></decl></param>)</parameter_list> <specifier pos:line="56" pos:column="51">const</specifier> <block pos:line="56" pos:column="57">{
		<decl_stmt><decl><type><name pos:line="57" pos:column="17">int</name></type> <name pos:line="57" pos:column="21">flag</name> <init pos:line="57" pos:column="26">= <expr><name pos:line="57" pos:column="28">doEnable</name><op:operator pos:line="57" pos:column="36">?</op:operator><name pos:line="57" pos:column="37">MF_ENABLED</name> <op:operator pos:line="57" pos:column="48">|</op:operator> <name pos:line="57" pos:column="50">MF_BYCOMMAND</name><op:operator pos:line="57" pos:column="62">:</op:operator><name pos:line="57" pos:column="63">MF_DISABLED</name> <op:operator pos:line="57" pos:column="75">|</op:operator> <name pos:line="57" pos:column="77">MF_GRAYED</name> <op:operator pos:line="57" pos:column="87">|</op:operator> <name pos:line="57" pos:column="89">MF_BYCOMMAND</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="58" pos:column="17">::</op:operator><name pos:line="58" pos:column="19">EnableMenuItem</name></name><argument_list pos:line="58" pos:column="33">(<argument><expr><name pos:line="58" pos:column="34">_hMenu</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="42">cmdID</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="49">flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="59" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="61" pos:column="9">void</name></type> <name pos:line="61" pos:column="14">checkItem</name><parameter_list pos:line="61" pos:column="23">(<param><decl><type><name pos:line="61" pos:column="24">int</name></type> <name pos:line="61" pos:column="28">cmdID</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="35">bool</name></type> <name pos:line="61" pos:column="40">doCheck</name></decl></param>)</parameter_list> <specifier pos:line="61" pos:column="49">const</specifier> <block pos:line="61" pos:column="55">{
		<expr_stmt><expr><call><name><op:operator pos:line="62" pos:column="17">::</op:operator><name pos:line="62" pos:column="19">CheckMenuItem</name></name><argument_list pos:line="62" pos:column="32">(<argument><expr><name pos:line="62" pos:column="33">_hMenu</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="41">cmdID</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="48">MF_BYCOMMAND</name> <op:operator pos:line="62" pos:column="61">|</op:operator> <op:operator pos:line="62" pos:column="63">(</op:operator><name pos:line="62" pos:column="64">doCheck</name><op:operator pos:line="62" pos:column="71">?</op:operator><name pos:line="62" pos:column="72">MF_CHECKED</name><op:operator pos:line="62" pos:column="82">:</op:operator><name pos:line="62" pos:column="83">MF_UNCHECKED</name><op:operator pos:line="62" pos:column="95">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="63" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="65" pos:column="9">HMENU</name></type> <name pos:line="65" pos:column="15">getMenuHandle</name><parameter_list pos:line="65" pos:column="28">()</parameter_list> <block pos:line="65" pos:column="31">{
		<return pos:line="66" pos:column="17">return <expr><name pos:line="66" pos:column="24">_hMenu</name></expr>;</return>
	}</block></function><empty_stmt pos:line="67" pos:column="10">;</empty_stmt>

</public><private pos:line="69" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="70" pos:column="9">HWND</name></type> <name pos:line="70" pos:column="14">_hParent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="71" pos:column="9">HMENU</name></type> <name pos:line="71" pos:column="15">_hMenu</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="72" pos:column="9">vector</name><argument_list pos:line="72" pos:column="15">&lt;<argument><expr><name pos:line="72" pos:column="16">HMENU</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="72" pos:column="23">_subMenus</name></decl>;</decl_stmt>

</private>}</block>;</class>

<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="76" pos:column="8">//CONTEXTMENU</comment>
</unit>
