<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexNsis.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexNsis.cxx
 ** Lexer for NSIS
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2003 - 2005 by Angelo Mandato &lt;angelo [at] spaceblue [dot] com&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// Last Updated: 03/13/2005</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="31" pos:column="1">/*
// located in SciLexer.h
#define SCLEX_NSIS 43

#define SCE_NSIS_DEFAULT 0
#define SCE_NSIS_COMMENT 1
#define SCE_NSIS_STRINGDQ 2
#define SCE_NSIS_STRINGLQ 3
#define SCE_NSIS_STRINGRQ 4
#define SCE_NSIS_FUNCTION 5
#define SCE_NSIS_VARIABLE 6
#define SCE_NSIS_LABEL 7
#define SCE_NSIS_USERDEFINED 8
#define SCE_NSIS_SECTIONDEF 9
#define SCE_NSIS_SUBSECTIONDEF 10
#define SCE_NSIS_IFDEFINEDEF 11
#define SCE_NSIS_MACRODEF 12
#define SCE_NSIS_STRINGVAR 13
#define SCE_NSIS_NUMBER 14
// ADDED for Scintilla v1.63
#define SCE_NSIS_SECTIONGROUP 15
#define SCE_NSIS_PAGEEX 16
#define SCE_NSIS_FUNCTIONDEF 17
#define SCE_NSIS_COMMENTBOX 18
*/</comment>

<function><type><specifier pos:line="57" pos:column="1">static</specifier> <name pos:line="57" pos:column="8">bool</name></type> <name pos:line="57" pos:column="13">isNsisNumber</name><parameter_list pos:line="57" pos:column="25">(<param><decl><type><name pos:line="57" pos:column="26">char</name></type> <name pos:line="57" pos:column="31">ch</name></decl></param>)</parameter_list>
<block pos:line="58" pos:column="1">{
  <return pos:line="59" pos:column="3">return <expr><op:operator pos:line="59" pos:column="10">(</op:operator><name pos:line="59" pos:column="11">ch</name> <op:operator pos:line="59" pos:column="14">&gt;=</op:operator> <lit:literal type="char" pos:line="59" pos:column="17">'0'</lit:literal> <op:operator pos:line="59" pos:column="21">&amp;&amp;</op:operator> <name pos:line="59" pos:column="24">ch</name> <op:operator pos:line="59" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="59" pos:column="30">'9'</lit:literal><op:operator pos:line="59" pos:column="33">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="62" pos:column="1">static</specifier> <name pos:line="62" pos:column="8">bool</name></type> <name pos:line="62" pos:column="13">isNsisChar</name><parameter_list pos:line="62" pos:column="23">(<param><decl><type><name pos:line="62" pos:column="24">char</name></type> <name pos:line="62" pos:column="29">ch</name></decl></param>)</parameter_list>
<block pos:line="63" pos:column="1">{
  <return pos:line="64" pos:column="3">return <expr><op:operator pos:line="64" pos:column="10">(</op:operator><name pos:line="64" pos:column="11">ch</name> <op:operator pos:line="64" pos:column="14">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="17">'.'</lit:literal> <op:operator pos:line="64" pos:column="21">)</op:operator> <op:operator pos:line="64" pos:column="23">||</op:operator> <op:operator pos:line="64" pos:column="26">(</op:operator><name pos:line="64" pos:column="27">ch</name> <op:operator pos:line="64" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="33">'_'</lit:literal> <op:operator pos:line="64" pos:column="37">)</op:operator> <op:operator pos:line="64" pos:column="39">||</op:operator> <call><name pos:line="64" pos:column="42">isNsisNumber</name><argument_list pos:line="64" pos:column="54">(<argument><expr><name pos:line="64" pos:column="55">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="64" pos:column="59">||</op:operator> <op:operator pos:line="64" pos:column="62">(</op:operator><name pos:line="64" pos:column="63">ch</name> <op:operator pos:line="64" pos:column="66">&gt;=</op:operator> <lit:literal type="char" pos:line="64" pos:column="69">'A'</lit:literal> <op:operator pos:line="64" pos:column="73">&amp;&amp;</op:operator> <name pos:line="64" pos:column="76">ch</name> <op:operator pos:line="64" pos:column="79">&lt;=</op:operator> <lit:literal type="char" pos:line="64" pos:column="82">'Z'</lit:literal><op:operator pos:line="64" pos:column="85">)</op:operator> <op:operator pos:line="64" pos:column="87">||</op:operator> <op:operator pos:line="64" pos:column="90">(</op:operator><name pos:line="64" pos:column="91">ch</name> <op:operator pos:line="64" pos:column="94">&gt;=</op:operator> <lit:literal type="char" pos:line="64" pos:column="97">'a'</lit:literal> <op:operator pos:line="64" pos:column="101">&amp;&amp;</op:operator> <name pos:line="64" pos:column="104">ch</name> <op:operator pos:line="64" pos:column="107">&lt;=</op:operator> <lit:literal type="char" pos:line="64" pos:column="110">'z'</lit:literal><op:operator pos:line="64" pos:column="113">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="67" pos:column="1">static</specifier> <name pos:line="67" pos:column="8">bool</name></type> <name pos:line="67" pos:column="13">isNsisLetter</name><parameter_list pos:line="67" pos:column="25">(<param><decl><type><name pos:line="67" pos:column="26">char</name></type> <name pos:line="67" pos:column="31">ch</name></decl></param>)</parameter_list>
<block pos:line="68" pos:column="1">{
  <return pos:line="69" pos:column="3">return <expr><op:operator pos:line="69" pos:column="10">(</op:operator><name pos:line="69" pos:column="11">ch</name> <op:operator pos:line="69" pos:column="14">&gt;=</op:operator> <lit:literal type="char" pos:line="69" pos:column="17">'A'</lit:literal> <op:operator pos:line="69" pos:column="21">&amp;&amp;</op:operator> <name pos:line="69" pos:column="24">ch</name> <op:operator pos:line="69" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="69" pos:column="30">'Z'</lit:literal><op:operator pos:line="69" pos:column="33">)</op:operator> <op:operator pos:line="69" pos:column="35">||</op:operator> <op:operator pos:line="69" pos:column="38">(</op:operator><name pos:line="69" pos:column="39">ch</name> <op:operator pos:line="69" pos:column="42">&gt;=</op:operator> <lit:literal type="char" pos:line="69" pos:column="45">'a'</lit:literal> <op:operator pos:line="69" pos:column="49">&amp;&amp;</op:operator> <name pos:line="69" pos:column="52">ch</name> <op:operator pos:line="69" pos:column="55">&lt;=</op:operator> <lit:literal type="char" pos:line="69" pos:column="58">'z'</lit:literal><op:operator pos:line="69" pos:column="61">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="72" pos:column="1">static</specifier> <name pos:line="72" pos:column="8">bool</name></type> <name pos:line="72" pos:column="13">NsisNextLineHasElse</name><parameter_list pos:line="72" pos:column="32">(<param><decl><type><name pos:line="72" pos:column="33">unsigned</name> <name pos:line="72" pos:column="42">int</name></type> <name pos:line="72" pos:column="46">start</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="53">unsigned</name> <name pos:line="72" pos:column="62">int</name></type> <name pos:line="72" pos:column="66">end</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="71">Accessor</name> <type:modifier pos:line="72" pos:column="80">&amp;</type:modifier></type><name pos:line="72" pos:column="81">styler</name></decl></param>)</parameter_list>
<block pos:line="73" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="74" pos:column="3">int</name></type> <name pos:line="74" pos:column="7">nNextLine</name> <init pos:line="74" pos:column="17">= <expr><op:operator pos:line="74" pos:column="19">-</op:operator><lit:literal type="number" pos:line="74" pos:column="20">1</lit:literal></expr></init></decl>;</decl_stmt>
  <for pos:line="75" pos:column="3">for( <init><decl><type><name pos:line="75" pos:column="8">unsigned</name> <name pos:line="75" pos:column="17">int</name></type> <name pos:line="75" pos:column="21">i</name> <init pos:line="75" pos:column="23">= <expr><name pos:line="75" pos:column="25">start</name></expr></init></decl>;</init> <condition><expr><name pos:line="75" pos:column="32">i</name> <op:operator pos:line="75" pos:column="34">&lt;</op:operator> <name pos:line="75" pos:column="36">end</name></expr>;</condition> <incr><expr><name pos:line="75" pos:column="41">i</name><op:operator pos:line="75" pos:column="42">++</op:operator></expr></incr> )
  <block pos:line="76" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">char</name></type> <name pos:line="77" pos:column="10">cNext</name> <init pos:line="77" pos:column="16">= <expr><call><name><name pos:line="77" pos:column="18">styler</name><op:operator pos:line="77" pos:column="24">.</op:operator><name pos:line="77" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="77" pos:column="38">( <argument><expr><name pos:line="77" pos:column="40">i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="78" pos:column="5">if<condition pos:line="78" pos:column="7">( <expr><name pos:line="78" pos:column="9">cNext</name> <op:operator pos:line="78" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="78" pos:column="18">'\n'</lit:literal></expr> )</condition><then pos:line="78" pos:column="24">
    <block pos:line="79" pos:column="5">{
      <expr_stmt><expr><name pos:line="80" pos:column="7">nNextLine</name> <op:operator pos:line="80" pos:column="17">=</op:operator> <name pos:line="80" pos:column="19">i</name><op:operator pos:line="80" pos:column="20">+</op:operator><lit:literal type="number" pos:line="80" pos:column="21">1</lit:literal></expr>;</expr_stmt>
      <break pos:line="81" pos:column="7">break;</break>
    }</block></then></if>
  }</block></for>

  <if pos:line="85" pos:column="3">if<condition pos:line="85" pos:column="5">( <expr><name pos:line="85" pos:column="7">nNextLine</name> <op:operator pos:line="85" pos:column="17">==</op:operator> <op:operator pos:line="85" pos:column="20">-</op:operator><lit:literal type="number" pos:line="85" pos:column="21">1</lit:literal></expr> )</condition><then pos:line="85" pos:column="24"> <comment type="line" pos:line="85" pos:column="25">// We never found the next line...</comment>
    <return pos:line="86" pos:column="5">return <expr><lit:literal type="boolean" pos:line="86" pos:column="12">false</lit:literal></expr>;</return></then></if>

  <for pos:line="88" pos:column="3">for( <init><decl><type><name pos:line="88" pos:column="8">unsigned</name> <name pos:line="88" pos:column="17">int</name></type> <name pos:line="88" pos:column="21">firstChar</name> <init pos:line="88" pos:column="31">= <expr><name pos:line="88" pos:column="33">nNextLine</name></expr></init></decl>;</init> <condition><expr><name pos:line="88" pos:column="44">firstChar</name> <op:operator pos:line="88" pos:column="54">&lt;</op:operator> <name pos:line="88" pos:column="56">end</name></expr>;</condition> <incr><expr><name pos:line="88" pos:column="61">firstChar</name><op:operator pos:line="88" pos:column="70">++</op:operator></expr></incr> )
  <block pos:line="89" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="90" pos:column="5">char</name></type> <name pos:line="90" pos:column="10">cNext</name> <init pos:line="90" pos:column="16">= <expr><call><name><name pos:line="90" pos:column="18">styler</name><op:operator pos:line="90" pos:column="24">.</op:operator><name pos:line="90" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="90" pos:column="38">( <argument><expr><name pos:line="90" pos:column="40">firstChar</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="91" pos:column="5">if<condition pos:line="91" pos:column="7">( <expr><name pos:line="91" pos:column="9">cNext</name> <op:operator pos:line="91" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="18">' '</lit:literal></expr> )</condition><then pos:line="91" pos:column="23">
      <continue pos:line="92" pos:column="7">continue;</continue></then></if>
    <if pos:line="93" pos:column="5">if<condition pos:line="93" pos:column="7">( <expr><name pos:line="93" pos:column="9">cNext</name> <op:operator pos:line="93" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="18">'\t'</lit:literal></expr> )</condition><then pos:line="93" pos:column="24">
      <continue pos:line="94" pos:column="7">continue;</continue></then></if>
    <if pos:line="95" pos:column="5">if<condition pos:line="95" pos:column="7">( <expr><name pos:line="95" pos:column="9">cNext</name> <op:operator pos:line="95" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="95" pos:column="18">'!'</lit:literal></expr> )</condition><then pos:line="95" pos:column="23">
    <block pos:line="96" pos:column="5">{
      <if pos:line="97" pos:column="7">if<condition pos:line="97" pos:column="9">( <expr><call><name><name pos:line="97" pos:column="11">styler</name><op:operator pos:line="97" pos:column="17">.</op:operator><name pos:line="97" pos:column="18">Match</name></name><argument_list pos:line="97" pos:column="23">(<argument><expr><name pos:line="97" pos:column="24">firstChar</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="35">"!else"</lit:literal></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="97" pos:column="45">
        <return pos:line="98" pos:column="9">return <expr><lit:literal type="boolean" pos:line="98" pos:column="16">true</lit:literal></expr>;</return></then></if>
    }</block></then></if>
    <break pos:line="100" pos:column="5">break;</break>
  }</block></for>

  <return pos:line="103" pos:column="3">return <expr><lit:literal type="boolean" pos:line="103" pos:column="10">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="106" pos:column="1">static</specifier> <name pos:line="106" pos:column="8">int</name></type> <name pos:line="106" pos:column="12">NsisCmp</name><parameter_list pos:line="106" pos:column="19">( <param><decl><type><specifier pos:line="106" pos:column="21">const</specifier> <name pos:line="106" pos:column="27">char</name> <type:modifier pos:line="106" pos:column="32">*</type:modifier></type><name pos:line="106" pos:column="33">s1</name></decl></param>, <param><decl><type><specifier pos:line="106" pos:column="37">const</specifier> <name pos:line="106" pos:column="43">char</name> <type:modifier pos:line="106" pos:column="48">*</type:modifier></type><name pos:line="106" pos:column="49">s2</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="53">bool</name></type> <name pos:line="106" pos:column="58">bIgnoreCase</name></decl></param> )</parameter_list>
<block pos:line="107" pos:column="1">{
  <if pos:line="108" pos:column="3">if<condition pos:line="108" pos:column="5">( <expr><name pos:line="108" pos:column="7">bIgnoreCase</name></expr> )</condition><then pos:line="108" pos:column="20">
     <return pos:line="109" pos:column="6">return <expr><call><name pos:line="109" pos:column="13">CompareCaseInsensitive</name><argument_list pos:line="109" pos:column="35">( <argument><expr><name pos:line="109" pos:column="37">s1</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="41">s2</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return pos:line="111" pos:column="3">return <expr><call><name pos:line="111" pos:column="10">strcmp</name><argument_list pos:line="111" pos:column="16">( <argument><expr><name pos:line="111" pos:column="18">s1</name></expr></argument>, <argument><expr><name pos:line="111" pos:column="22">s2</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="114" pos:column="1">static</specifier> <name pos:line="114" pos:column="8">int</name></type> <name pos:line="114" pos:column="12">calculateFoldNsis</name><parameter_list pos:line="114" pos:column="29">(<param><decl><type><name pos:line="114" pos:column="30">unsigned</name> <name pos:line="114" pos:column="39">int</name></type> <name pos:line="114" pos:column="43">start</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="50">unsigned</name> <name pos:line="114" pos:column="59">int</name></type> <name pos:line="114" pos:column="63">end</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="68">int</name></type> <name pos:line="114" pos:column="72">foldlevel</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="83">Accessor</name> <type:modifier pos:line="114" pos:column="92">&amp;</type:modifier></type><name pos:line="114" pos:column="93">styler</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="101">bool</name></type> <name pos:line="114" pos:column="106">bElse</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="113">bool</name></type> <name pos:line="114" pos:column="118">foldUtilityCmd</name></decl></param> )</parameter_list>
<block pos:line="115" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="116" pos:column="3">int</name></type> <name pos:line="116" pos:column="7">style</name> <init pos:line="116" pos:column="13">= <expr><call><name><name pos:line="116" pos:column="15">styler</name><op:operator pos:line="116" pos:column="21">.</op:operator><name pos:line="116" pos:column="22">StyleAt</name></name><argument_list pos:line="116" pos:column="29">(<argument><expr><name pos:line="116" pos:column="30">end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line" pos:line="118" pos:column="3">// If the word is too long, it is not what we are looking for</comment>
  <if pos:line="119" pos:column="3">if<condition pos:line="119" pos:column="5">( <expr><name pos:line="119" pos:column="7">end</name> <op:operator pos:line="119" pos:column="11">-</op:operator> <name pos:line="119" pos:column="13">start</name> <op:operator pos:line="119" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="119" pos:column="21">20</lit:literal></expr> )</condition><then pos:line="119" pos:column="25">
    <return pos:line="120" pos:column="5">return <expr><name pos:line="120" pos:column="12">foldlevel</name></expr>;</return></then></if>

  <if pos:line="122" pos:column="3">if<condition pos:line="122" pos:column="5">( <expr><name pos:line="122" pos:column="7">foldUtilityCmd</name></expr> )</condition><then pos:line="122" pos:column="23">
  <block pos:line="123" pos:column="3">{
    <comment type="line" pos:line="124" pos:column="5">// Check the style at this point, if it is not valid, then return zero</comment>
    <if pos:line="125" pos:column="5">if<condition pos:line="125" pos:column="7">( <expr><name pos:line="125" pos:column="9">style</name> <op:operator pos:line="125" pos:column="15">!=</op:operator> <name pos:line="125" pos:column="18">SCE_NSIS_FUNCTIONDEF</name> <op:operator pos:line="125" pos:column="39">&amp;&amp;</op:operator> <name pos:line="125" pos:column="42">style</name> <op:operator pos:line="125" pos:column="48">!=</op:operator> <name pos:line="125" pos:column="51">SCE_NSIS_SECTIONDEF</name> <op:operator pos:line="125" pos:column="71">&amp;&amp;</op:operator>
        <name pos:line="126" pos:column="9">style</name> <op:operator pos:line="126" pos:column="15">!=</op:operator> <name pos:line="126" pos:column="18">SCE_NSIS_SUBSECTIONDEF</name> <op:operator pos:line="126" pos:column="41">&amp;&amp;</op:operator> <name pos:line="126" pos:column="44">style</name> <op:operator pos:line="126" pos:column="50">!=</op:operator> <name pos:line="126" pos:column="53">SCE_NSIS_IFDEFINEDEF</name> <op:operator pos:line="126" pos:column="74">&amp;&amp;</op:operator>
        <name pos:line="127" pos:column="9">style</name> <op:operator pos:line="127" pos:column="15">!=</op:operator> <name pos:line="127" pos:column="18">SCE_NSIS_MACRODEF</name> <op:operator pos:line="127" pos:column="36">&amp;&amp;</op:operator> <name pos:line="127" pos:column="39">style</name> <op:operator pos:line="127" pos:column="45">!=</op:operator> <name pos:line="127" pos:column="48">SCE_NSIS_SECTIONGROUP</name> <op:operator pos:line="127" pos:column="70">&amp;&amp;</op:operator>
        <name pos:line="128" pos:column="9">style</name> <op:operator pos:line="128" pos:column="15">!=</op:operator> <name pos:line="128" pos:column="18">SCE_NSIS_PAGEEX</name></expr> )</condition><then pos:line="128" pos:column="35">
          <return pos:line="129" pos:column="11">return <expr><name pos:line="129" pos:column="18">foldlevel</name></expr>;</return></then></if>
  }</block></then>
  <else pos:line="131" pos:column="3">else
  <block pos:line="132" pos:column="3">{
    <if pos:line="133" pos:column="5">if<condition pos:line="133" pos:column="7">( <expr><name pos:line="133" pos:column="9">style</name> <op:operator pos:line="133" pos:column="15">!=</op:operator> <name pos:line="133" pos:column="18">SCE_NSIS_FUNCTIONDEF</name> <op:operator pos:line="133" pos:column="39">&amp;&amp;</op:operator> <name pos:line="133" pos:column="42">style</name> <op:operator pos:line="133" pos:column="48">!=</op:operator> <name pos:line="133" pos:column="51">SCE_NSIS_SECTIONDEF</name> <op:operator pos:line="133" pos:column="71">&amp;&amp;</op:operator>
        <name pos:line="134" pos:column="9">style</name> <op:operator pos:line="134" pos:column="15">!=</op:operator> <name pos:line="134" pos:column="18">SCE_NSIS_SUBSECTIONDEF</name> <op:operator pos:line="134" pos:column="41">&amp;&amp;</op:operator> <name pos:line="134" pos:column="44">style</name> <op:operator pos:line="134" pos:column="50">!=</op:operator> <name pos:line="134" pos:column="53">SCE_NSIS_SECTIONGROUP</name> <op:operator pos:line="134" pos:column="75">&amp;&amp;</op:operator>
        <name pos:line="135" pos:column="9">style</name> <op:operator pos:line="135" pos:column="15">!=</op:operator> <name pos:line="135" pos:column="18">SCE_NSIS_PAGEEX</name></expr> )</condition><then pos:line="135" pos:column="35">
          <return pos:line="136" pos:column="11">return <expr><name pos:line="136" pos:column="18">foldlevel</name></expr>;</return></then></if>
  }</block></else></if>

  <decl_stmt><decl><type><name pos:line="139" pos:column="3">int</name></type> <name pos:line="139" pos:column="7">newFoldlevel</name> <init pos:line="139" pos:column="20">= <expr><name pos:line="139" pos:column="22">foldlevel</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="140" pos:column="3">bool</name></type> <name pos:line="140" pos:column="8">bIgnoreCase</name> <init pos:line="140" pos:column="20">= <expr><lit:literal type="boolean" pos:line="140" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
  <if pos:line="141" pos:column="3">if<condition pos:line="141" pos:column="5">( <expr><call><name><name pos:line="141" pos:column="7">styler</name><op:operator pos:line="141" pos:column="13">.</op:operator><name pos:line="141" pos:column="14">GetPropertyInt</name></name><argument_list pos:line="141" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="141" pos:column="29">"nsis.ignorecase"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="141" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="141" pos:column="51">1</lit:literal></expr> )</condition><then pos:line="141" pos:column="54">
    <expr_stmt><expr><name pos:line="142" pos:column="5">bIgnoreCase</name> <op:operator pos:line="142" pos:column="17">=</op:operator> <lit:literal type="boolean" pos:line="142" pos:column="19">true</lit:literal></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name pos:line="144" pos:column="3">char</name></type> <name><name pos:line="144" pos:column="8">s</name><index pos:line="144" pos:column="9">[<expr><lit:literal type="number" pos:line="144" pos:column="10">20</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:line="144" pos:column="15">// The key word we are looking for has atmost 13 characters</comment>
  <for pos:line="145" pos:column="3">for (<init><decl><type><name pos:line="145" pos:column="8">unsigned</name> <name pos:line="145" pos:column="17">int</name></type> <name pos:line="145" pos:column="21">i</name> <init pos:line="145" pos:column="23">= <expr><lit:literal type="number" pos:line="145" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="145" pos:column="28">i</name> <op:operator pos:line="145" pos:column="30">&lt;</op:operator> <name pos:line="145" pos:column="32">end</name> <op:operator pos:line="145" pos:column="36">-</op:operator> <name pos:line="145" pos:column="38">start</name> <op:operator pos:line="145" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="145" pos:column="46">1</lit:literal> <op:operator pos:line="145" pos:column="48">&amp;&amp;</op:operator> <name pos:line="145" pos:column="51">i</name> <op:operator pos:line="145" pos:column="53">&lt;</op:operator> <lit:literal type="number" pos:line="145" pos:column="55">19</lit:literal></expr>;</condition> <incr><expr><name pos:line="145" pos:column="59">i</name><op:operator pos:line="145" pos:column="60">++</op:operator></expr></incr>)
	<block pos:line="146" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="147" pos:column="17">s</name><index pos:line="147" pos:column="18">[<expr><name pos:line="147" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="147" pos:column="22">=</op:operator> <call><name><name pos:line="147" pos:column="24">static_cast</name><argument_list pos:line="147" pos:column="35">&lt;<argument><expr><name pos:line="147" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="147" pos:column="41">( <argument><expr><name><name pos:line="147" pos:column="43">styler</name><index pos:line="147" pos:column="49">[ <expr><name pos:line="147" pos:column="51">start</name> <op:operator pos:line="147" pos:column="57">+</op:operator> <name pos:line="147" pos:column="59">i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="148" pos:column="17">s</name><index pos:line="148" pos:column="18">[<expr><name pos:line="148" pos:column="19">i</name> <op:operator pos:line="148" pos:column="21">+</op:operator> <lit:literal type="number" pos:line="148" pos:column="23">1</lit:literal></expr>]</index></name> <op:operator pos:line="148" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="148" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></for>

  <if pos:line="151" pos:column="3">if<condition pos:line="151" pos:column="5">( <expr><name><name pos:line="151" pos:column="7">s</name><index pos:line="151" pos:column="8">[<expr><lit:literal type="number" pos:line="151" pos:column="9">0</lit:literal></expr>]</index></name> <op:operator pos:line="151" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="151" pos:column="15">'!'</lit:literal></expr> )</condition><then pos:line="151" pos:column="20">
  <block pos:line="152" pos:column="3">{
    <if pos:line="153" pos:column="5">if<condition pos:line="153" pos:column="7">( <expr><call><name pos:line="153" pos:column="9">NsisCmp</name><argument_list pos:line="153" pos:column="16">(<argument><expr><name pos:line="153" pos:column="17">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="20">"!ifndef"</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="31">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="153" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="153" pos:column="47">0</lit:literal> <op:operator pos:line="153" pos:column="49">||</op:operator> <call><name pos:line="153" pos:column="52">NsisCmp</name><argument_list pos:line="153" pos:column="59">(<argument><expr><name pos:line="153" pos:column="60">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="63">"!ifdef"</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="73">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="153" pos:column="87">==</op:operator> <lit:literal type="number" pos:line="153" pos:column="90">0</lit:literal> <op:operator pos:line="153" pos:column="92">||</op:operator> <call><name pos:line="153" pos:column="95">NsisCmp</name><argument_list pos:line="153" pos:column="102">(<argument><expr><name pos:line="153" pos:column="103">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="106">"!ifmacrodef"</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="121">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="153" pos:column="135">==</op:operator> <lit:literal type="number" pos:line="153" pos:column="138">0</lit:literal> <op:operator pos:line="153" pos:column="140">||</op:operator> <call><name pos:line="153" pos:column="143">NsisCmp</name><argument_list pos:line="153" pos:column="150">(<argument><expr><name pos:line="153" pos:column="151">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="154">"!ifmacrondef"</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="170">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="153" pos:column="184">==</op:operator> <lit:literal type="number" pos:line="153" pos:column="187">0</lit:literal> <op:operator pos:line="153" pos:column="189">||</op:operator> <call><name pos:line="153" pos:column="192">NsisCmp</name><argument_list pos:line="153" pos:column="199">(<argument><expr><name pos:line="153" pos:column="200">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="203">"!if"</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="210">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="153" pos:column="224">==</op:operator> <lit:literal type="number" pos:line="153" pos:column="227">0</lit:literal> <op:operator pos:line="153" pos:column="229">||</op:operator> <call><name pos:line="153" pos:column="232">NsisCmp</name><argument_list pos:line="153" pos:column="239">(<argument><expr><name pos:line="153" pos:column="240">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="153" pos:column="243">"!macro"</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="253">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="153" pos:column="267">==</op:operator> <lit:literal type="number" pos:line="153" pos:column="270">0</lit:literal></expr> )</condition><then pos:line="153" pos:column="273">
      <expr_stmt><expr><name pos:line="154" pos:column="7">newFoldlevel</name><op:operator pos:line="154" pos:column="19">++</op:operator></expr>;</expr_stmt></then>
    <else pos:line="155" pos:column="5">else <if pos:line="155" pos:column="10">if<condition pos:line="155" pos:column="12">( <expr><call><name pos:line="155" pos:column="14">NsisCmp</name><argument_list pos:line="155" pos:column="21">(<argument><expr><name pos:line="155" pos:column="22">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="155" pos:column="25">"!endif"</lit:literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="35">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="155" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="155" pos:column="51">0</lit:literal> <op:operator pos:line="155" pos:column="53">||</op:operator> <call><name pos:line="155" pos:column="56">NsisCmp</name><argument_list pos:line="155" pos:column="63">(<argument><expr><name pos:line="155" pos:column="64">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="155" pos:column="67">"!macroend"</lit:literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="80">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="155" pos:column="94">==</op:operator> <lit:literal type="number" pos:line="155" pos:column="97">0</lit:literal></expr> )</condition><then pos:line="155" pos:column="100">
      <expr_stmt><expr><name pos:line="156" pos:column="7">newFoldlevel</name><op:operator pos:line="156" pos:column="19">--</op:operator></expr>;</expr_stmt></then>
    <else pos:line="157" pos:column="5">else <if pos:line="157" pos:column="10">if<condition pos:line="157" pos:column="12">( <expr><name pos:line="157" pos:column="14">bElse</name> <op:operator pos:line="157" pos:column="20">&amp;&amp;</op:operator> <call><name pos:line="157" pos:column="23">NsisCmp</name><argument_list pos:line="157" pos:column="30">(<argument><expr><name pos:line="157" pos:column="31">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="157" pos:column="34">"!else"</lit:literal></expr></argument>, <argument><expr><name pos:line="157" pos:column="43">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="157" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="157" pos:column="59">0</lit:literal></expr> )</condition><then pos:line="157" pos:column="62">
      <expr_stmt><expr><name pos:line="158" pos:column="7">newFoldlevel</name><op:operator pos:line="158" pos:column="19">++</op:operator></expr>;</expr_stmt></then></if></else></if></else></if>
  }</block></then>
  <else pos:line="160" pos:column="3">else
  <block pos:line="161" pos:column="3">{
    <if pos:line="162" pos:column="5">if<condition pos:line="162" pos:column="7">( <expr><call><name pos:line="162" pos:column="9">NsisCmp</name><argument_list pos:line="162" pos:column="16">(<argument><expr><name pos:line="162" pos:column="17">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="20">"Section"</lit:literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="31">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="162" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="162" pos:column="48">0</lit:literal> <op:operator pos:line="162" pos:column="50">||</op:operator> <call><name pos:line="162" pos:column="53">NsisCmp</name><argument_list pos:line="162" pos:column="60">(<argument><expr><name pos:line="162" pos:column="61">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="64">"SectionGroup"</lit:literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="80">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="162" pos:column="94">==</op:operator> <lit:literal type="number" pos:line="162" pos:column="97">0</lit:literal> <op:operator pos:line="162" pos:column="99">||</op:operator> <call><name pos:line="162" pos:column="102">NsisCmp</name><argument_list pos:line="162" pos:column="109">(<argument><expr><name pos:line="162" pos:column="110">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="113">"Function"</lit:literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="125">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="162" pos:column="138">==</op:operator> <lit:literal type="number" pos:line="162" pos:column="141">0</lit:literal> <op:operator pos:line="162" pos:column="143">||</op:operator> <call><name pos:line="162" pos:column="146">NsisCmp</name><argument_list pos:line="162" pos:column="153">(<argument><expr><name pos:line="162" pos:column="154">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="157">"SubSection"</lit:literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="171">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="162" pos:column="185">==</op:operator> <lit:literal type="number" pos:line="162" pos:column="188">0</lit:literal> <op:operator pos:line="162" pos:column="190">||</op:operator> <call><name pos:line="162" pos:column="193">NsisCmp</name><argument_list pos:line="162" pos:column="200">(<argument><expr><name pos:line="162" pos:column="201">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="162" pos:column="204">"PageEx"</lit:literal></expr></argument>, <argument><expr><name pos:line="162" pos:column="214">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="162" pos:column="228">==</op:operator> <lit:literal type="number" pos:line="162" pos:column="231">0</lit:literal></expr> )</condition><then pos:line="162" pos:column="234">
      <expr_stmt><expr><name pos:line="163" pos:column="7">newFoldlevel</name><op:operator pos:line="163" pos:column="19">++</op:operator></expr>;</expr_stmt></then>
    <else pos:line="164" pos:column="5">else <if pos:line="164" pos:column="10">if<condition pos:line="164" pos:column="12">( <expr><call><name pos:line="164" pos:column="14">NsisCmp</name><argument_list pos:line="164" pos:column="21">(<argument><expr><name pos:line="164" pos:column="22">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="25">"SectionGroupEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="44">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="164" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="164" pos:column="61">0</lit:literal> <op:operator pos:line="164" pos:column="63">||</op:operator> <call><name pos:line="164" pos:column="66">NsisCmp</name><argument_list pos:line="164" pos:column="73">(<argument><expr><name pos:line="164" pos:column="74">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="77">"SubSectionEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="94">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="164" pos:column="108">==</op:operator> <lit:literal type="number" pos:line="164" pos:column="111">0</lit:literal> <op:operator pos:line="164" pos:column="113">||</op:operator> <call><name pos:line="164" pos:column="116">NsisCmp</name><argument_list pos:line="164" pos:column="123">(<argument><expr><name pos:line="164" pos:column="124">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="127">"FunctionEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="142">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="164" pos:column="155">==</op:operator> <lit:literal type="number" pos:line="164" pos:column="158">0</lit:literal> <op:operator pos:line="164" pos:column="160">||</op:operator> <call><name pos:line="164" pos:column="163">NsisCmp</name><argument_list pos:line="164" pos:column="170">(<argument><expr><name pos:line="164" pos:column="171">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="174">"SectionEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="188">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="164" pos:column="202">==</op:operator> <lit:literal type="number" pos:line="164" pos:column="205">0</lit:literal> <op:operator pos:line="164" pos:column="207">||</op:operator> <call><name pos:line="164" pos:column="210">NsisCmp</name><argument_list pos:line="164" pos:column="217">(<argument><expr><name pos:line="164" pos:column="218">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="164" pos:column="221">"PageExEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="164" pos:column="234">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="164" pos:column="248">==</op:operator> <lit:literal type="number" pos:line="164" pos:column="251">0</lit:literal></expr> )</condition><then pos:line="164" pos:column="254">
      <expr_stmt><expr><name pos:line="165" pos:column="7">newFoldlevel</name><op:operator pos:line="165" pos:column="19">--</op:operator></expr>;</expr_stmt></then></if></else></if>
  }</block></else></if>

  <return pos:line="168" pos:column="3">return <expr><name pos:line="168" pos:column="10">newFoldlevel</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="171" pos:column="1">static</specifier> <name pos:line="171" pos:column="8">int</name></type> <name pos:line="171" pos:column="12">classifyWordNsis</name><parameter_list pos:line="171" pos:column="28">(<param><decl><type><name pos:line="171" pos:column="29">unsigned</name> <name pos:line="171" pos:column="38">int</name></type> <name pos:line="171" pos:column="42">start</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="49">unsigned</name> <name pos:line="171" pos:column="58">int</name></type> <name pos:line="171" pos:column="62">end</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="67">WordList</name> <type:modifier pos:line="171" pos:column="76">*</type:modifier></type><name><name pos:line="171" pos:column="77">keywordLists</name><index pos:line="171" pos:column="89">[]</index></name></decl></param>, <param><decl><type><name pos:line="171" pos:column="93">Accessor</name> <type:modifier pos:line="171" pos:column="102">&amp;</type:modifier></type><name pos:line="171" pos:column="103">styler</name></decl></param> )</parameter_list>
<block pos:line="172" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="173" pos:column="3">bool</name></type> <name pos:line="173" pos:column="8">bIgnoreCase</name> <init pos:line="173" pos:column="20">= <expr><lit:literal type="boolean" pos:line="173" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
  <if pos:line="174" pos:column="3">if<condition pos:line="174" pos:column="5">( <expr><call><name><name pos:line="174" pos:column="7">styler</name><op:operator pos:line="174" pos:column="13">.</op:operator><name pos:line="174" pos:column="14">GetPropertyInt</name></name><argument_list pos:line="174" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="29">"nsis.ignorecase"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="174" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="174" pos:column="51">1</lit:literal></expr> )</condition><then pos:line="174" pos:column="54">
    <expr_stmt><expr><name pos:line="175" pos:column="5">bIgnoreCase</name> <op:operator pos:line="175" pos:column="17">=</op:operator> <lit:literal type="boolean" pos:line="175" pos:column="19">true</lit:literal></expr>;</expr_stmt></then></if>

  <decl_stmt><decl><type><name pos:line="177" pos:column="3">bool</name></type> <name pos:line="177" pos:column="8">bUserVars</name> <init pos:line="177" pos:column="18">= <expr><lit:literal type="boolean" pos:line="177" pos:column="20">false</lit:literal></expr></init></decl>;</decl_stmt>
  <if pos:line="178" pos:column="3">if<condition pos:line="178" pos:column="5">( <expr><call><name><name pos:line="178" pos:column="7">styler</name><op:operator pos:line="178" pos:column="13">.</op:operator><name pos:line="178" pos:column="14">GetPropertyInt</name></name><argument_list pos:line="178" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="29">"nsis.uservars"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="178" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="178" pos:column="49">1</lit:literal></expr> )</condition><then pos:line="178" pos:column="52">
    <expr_stmt><expr><name pos:line="179" pos:column="5">bUserVars</name> <op:operator pos:line="179" pos:column="15">=</op:operator> <lit:literal type="boolean" pos:line="179" pos:column="17">true</lit:literal></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="181" pos:column="9">char</name></type> <name><name pos:line="181" pos:column="14">s</name><index pos:line="181" pos:column="15">[<expr><lit:literal type="number" pos:line="181" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="183" pos:column="9">WordList</name> <type:modifier pos:line="183" pos:column="18">&amp;</type:modifier></type><name pos:line="183" pos:column="19">Functions</name> <init pos:line="183" pos:column="29">= <expr><op:operator pos:line="183" pos:column="31">*</op:operator><name><name pos:line="183" pos:column="32">keywordLists</name><index pos:line="183" pos:column="44">[<expr><lit:literal type="number" pos:line="183" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="184" pos:column="9">WordList</name> <type:modifier pos:line="184" pos:column="18">&amp;</type:modifier></type><name pos:line="184" pos:column="19">Variables</name> <init pos:line="184" pos:column="29">= <expr><op:operator pos:line="184" pos:column="31">*</op:operator><name><name pos:line="184" pos:column="32">keywordLists</name><index pos:line="184" pos:column="44">[<expr><lit:literal type="number" pos:line="184" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="185" pos:column="9">WordList</name> <type:modifier pos:line="185" pos:column="18">&amp;</type:modifier></type><name pos:line="185" pos:column="19">Lables</name> <init pos:line="185" pos:column="26">= <expr><op:operator pos:line="185" pos:column="28">*</op:operator><name><name pos:line="185" pos:column="29">keywordLists</name><index pos:line="185" pos:column="41">[<expr><lit:literal type="number" pos:line="185" pos:column="42">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="186" pos:column="9">WordList</name> <type:modifier pos:line="186" pos:column="18">&amp;</type:modifier></type><name pos:line="186" pos:column="19">UserDefined</name> <init pos:line="186" pos:column="31">= <expr><op:operator pos:line="186" pos:column="33">*</op:operator><name><name pos:line="186" pos:column="34">keywordLists</name><index pos:line="186" pos:column="46">[<expr><lit:literal type="number" pos:line="186" pos:column="47">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<for pos:line="188" pos:column="9">for (<init><decl><type><name pos:line="188" pos:column="14">unsigned</name> <name pos:line="188" pos:column="23">int</name></type> <name pos:line="188" pos:column="27">i</name> <init pos:line="188" pos:column="29">= <expr><lit:literal type="number" pos:line="188" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="188" pos:column="34">i</name> <op:operator pos:line="188" pos:column="36">&lt;</op:operator> <name pos:line="188" pos:column="38">end</name> <op:operator pos:line="188" pos:column="42">-</op:operator> <name pos:line="188" pos:column="44">start</name> <op:operator pos:line="188" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="188" pos:column="52">1</lit:literal> <op:operator pos:line="188" pos:column="54">&amp;&amp;</op:operator> <name pos:line="188" pos:column="57">i</name> <op:operator pos:line="188" pos:column="59">&lt;</op:operator> <lit:literal type="number" pos:line="188" pos:column="61">99</lit:literal></expr>;</condition> <incr><expr><name pos:line="188" pos:column="65">i</name><op:operator pos:line="188" pos:column="66">++</op:operator></expr></incr>)
	<block pos:line="189" pos:column="9">{
    <if pos:line="190" pos:column="5">if<condition pos:line="190" pos:column="7">( <expr><name pos:line="190" pos:column="9">bIgnoreCase</name></expr> )</condition><then pos:line="190" pos:column="22">
      <expr_stmt><expr><name><name pos:line="191" pos:column="7">s</name><index pos:line="191" pos:column="8">[<expr><name pos:line="191" pos:column="9">i</name></expr>]</index></name> <op:operator pos:line="191" pos:column="12">=</op:operator> <call><name><name pos:line="191" pos:column="14">static_cast</name><argument_list pos:line="191" pos:column="25">&lt;<argument><expr><name pos:line="191" pos:column="26">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="191" pos:column="31">( <argument><expr><call><name pos:line="191" pos:column="33">tolower</name><argument_list pos:line="191" pos:column="40">(<argument><expr><name><name pos:line="191" pos:column="41">styler</name><index pos:line="191" pos:column="47">[ <expr><name pos:line="191" pos:column="49">start</name> <op:operator pos:line="191" pos:column="55">+</op:operator> <name pos:line="191" pos:column="57">i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></then>
    <else pos:line="192" pos:column="5">else
		  <expr_stmt><expr><name><name pos:line="193" pos:column="19">s</name><index pos:line="193" pos:column="20">[<expr><name pos:line="193" pos:column="21">i</name></expr>]</index></name> <op:operator pos:line="193" pos:column="24">=</op:operator> <call><name><name pos:line="193" pos:column="26">static_cast</name><argument_list pos:line="193" pos:column="37">&lt;<argument><expr><name pos:line="193" pos:column="38">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="193" pos:column="43">( <argument><expr><name><name pos:line="193" pos:column="45">styler</name><index pos:line="193" pos:column="51">[ <expr><name pos:line="193" pos:column="53">start</name> <op:operator pos:line="193" pos:column="59">+</op:operator> <name pos:line="193" pos:column="61">i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></else></if>
		<expr_stmt><expr><name><name pos:line="194" pos:column="17">s</name><index pos:line="194" pos:column="18">[<expr><name pos:line="194" pos:column="19">i</name> <op:operator pos:line="194" pos:column="21">+</op:operator> <lit:literal type="number" pos:line="194" pos:column="23">1</lit:literal></expr>]</index></name> <op:operator pos:line="194" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="194" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></for>

	<comment type="line" pos:line="197" pos:column="9">// Check for special words...</comment>
	<if pos:line="198" pos:column="9">if<condition pos:line="198" pos:column="11">( <expr><call><name pos:line="198" pos:column="13">NsisCmp</name><argument_list pos:line="198" pos:column="20">(<argument><expr><name pos:line="198" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="24">"!macro"</lit:literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="34">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="198" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="198" pos:column="51">0</lit:literal> <op:operator pos:line="198" pos:column="53">||</op:operator> <call><name pos:line="198" pos:column="56">NsisCmp</name><argument_list pos:line="198" pos:column="63">(<argument><expr><name pos:line="198" pos:column="64">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="198" pos:column="67">"!macroend"</lit:literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="80">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="198" pos:column="93">==</op:operator> <lit:literal type="number" pos:line="198" pos:column="96">0</lit:literal></expr> )</condition><then pos:line="198" pos:column="99"> <comment type="line" pos:line="198" pos:column="100">// Covers !macro and !macroend</comment>
		<return pos:line="199" pos:column="17">return <expr><name pos:line="199" pos:column="24">SCE_NSIS_MACRODEF</name></expr>;</return></then></if>

	<if pos:line="201" pos:column="9">if<condition pos:line="201" pos:column="11">( <expr><call><name pos:line="201" pos:column="13">NsisCmp</name><argument_list pos:line="201" pos:column="20">(<argument><expr><name pos:line="201" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="201" pos:column="24">"!ifdef"</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="34">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="201" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="201" pos:column="51">0</lit:literal> <op:operator pos:line="201" pos:column="53">||</op:operator>  <call><name pos:line="201" pos:column="57">NsisCmp</name><argument_list pos:line="201" pos:column="64">(<argument><expr><name pos:line="201" pos:column="65">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="201" pos:column="68">"!ifndef"</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="79">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="201" pos:column="92">==</op:operator> <lit:literal type="number" pos:line="201" pos:column="95">0</lit:literal> <op:operator pos:line="201" pos:column="97">||</op:operator>  <call><name pos:line="201" pos:column="101">NsisCmp</name><argument_list pos:line="201" pos:column="108">(<argument><expr><name pos:line="201" pos:column="109">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="201" pos:column="112">"!endif"</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="122">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="201" pos:column="135">==</op:operator> <lit:literal type="number" pos:line="201" pos:column="138">0</lit:literal></expr> )</condition><then pos:line="201" pos:column="141"> <comment type="line" pos:line="201" pos:column="142">// Covers !ifdef, !ifndef and !endif</comment>
		<return pos:line="202" pos:column="17">return <expr><name pos:line="202" pos:column="24">SCE_NSIS_IFDEFINEDEF</name></expr>;</return></then></if>

	<if pos:line="204" pos:column="9">if<condition pos:line="204" pos:column="11">( <expr><call><name pos:line="204" pos:column="13">NsisCmp</name><argument_list pos:line="204" pos:column="20">(<argument><expr><name pos:line="204" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="204" pos:column="24">"!if"</lit:literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="31">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="204" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="204" pos:column="48">0</lit:literal> <op:operator pos:line="204" pos:column="50">||</op:operator> <call><name pos:line="204" pos:column="53">NsisCmp</name><argument_list pos:line="204" pos:column="60">(<argument><expr><name pos:line="204" pos:column="61">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="204" pos:column="64">"!else"</lit:literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="73">bIgnoreCase</name></expr></argument> )</argument_list></call>  <op:operator pos:line="204" pos:column="88">==</op:operator> <lit:literal type="number" pos:line="204" pos:column="91">0</lit:literal></expr> )</condition><then pos:line="204" pos:column="94"> <comment type="line" pos:line="204" pos:column="95">// Covers !if and else</comment>
		<return pos:line="205" pos:column="17">return <expr><name pos:line="205" pos:column="24">SCE_NSIS_IFDEFINEDEF</name></expr>;</return></then></if>

	<if pos:line="207" pos:column="9">if <condition pos:line="207" pos:column="12">(<expr><call><name pos:line="207" pos:column="13">NsisCmp</name><argument_list pos:line="207" pos:column="20">(<argument><expr><name pos:line="207" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="207" pos:column="24">"!ifmacrodef"</lit:literal></expr></argument>, <argument><expr><name pos:line="207" pos:column="39">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="207" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="207" pos:column="56">0</lit:literal> <op:operator pos:line="207" pos:column="58">||</op:operator> <call><name pos:line="207" pos:column="61">NsisCmp</name><argument_list pos:line="207" pos:column="68">(<argument><expr><name pos:line="207" pos:column="69">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="207" pos:column="72">"!ifmacrondef"</lit:literal></expr></argument>, <argument><expr><name pos:line="207" pos:column="88">bIgnoreCase</name></expr></argument> )</argument_list></call>  <op:operator pos:line="207" pos:column="103">==</op:operator> <lit:literal type="number" pos:line="207" pos:column="106">0</lit:literal></expr> )</condition><then pos:line="207" pos:column="109"> <comment type="line" pos:line="207" pos:column="110">// Covers !ifmacrodef and !ifnmacrodef</comment>
		<return pos:line="208" pos:column="17">return <expr><name pos:line="208" pos:column="24">SCE_NSIS_IFDEFINEDEF</name></expr>;</return></then></if>

  <if pos:line="210" pos:column="3">if<condition pos:line="210" pos:column="5">( <expr><call><name pos:line="210" pos:column="7">NsisCmp</name><argument_list pos:line="210" pos:column="14">(<argument><expr><name pos:line="210" pos:column="15">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="18">"SectionGroup"</lit:literal></expr></argument>, <argument><expr><name pos:line="210" pos:column="34">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="210" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="210" pos:column="50">0</lit:literal> <op:operator pos:line="210" pos:column="52">||</op:operator> <call><name pos:line="210" pos:column="55">NsisCmp</name><argument_list pos:line="210" pos:column="62">(<argument><expr><name pos:line="210" pos:column="63">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="210" pos:column="66">"SectionGroupEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="210" pos:column="85">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="210" pos:column="98">==</op:operator> <lit:literal type="number" pos:line="210" pos:column="101">0</lit:literal></expr> )</condition><then pos:line="210" pos:column="104"> <comment type="line" pos:line="210" pos:column="105">// Covers SectionGroup and SectionGroupEnd</comment>
    <return pos:line="211" pos:column="5">return <expr><name pos:line="211" pos:column="12">SCE_NSIS_SECTIONGROUP</name></expr>;</return></then></if>

	<if pos:line="213" pos:column="9">if<condition pos:line="213" pos:column="11">( <expr><call><name pos:line="213" pos:column="13">NsisCmp</name><argument_list pos:line="213" pos:column="20">(<argument><expr><name pos:line="213" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="24">"Section"</lit:literal></expr></argument>, <argument><expr><name pos:line="213" pos:column="35">bIgnoreCase</name></expr></argument> )</argument_list></call> <op:operator pos:line="213" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="213" pos:column="52">0</lit:literal> <op:operator pos:line="213" pos:column="54">||</op:operator> <call><name pos:line="213" pos:column="57">NsisCmp</name><argument_list pos:line="213" pos:column="64">(<argument><expr><name pos:line="213" pos:column="65">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="68">"SectionEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="213" pos:column="82">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="213" pos:column="95">==</op:operator> <lit:literal type="number" pos:line="213" pos:column="98">0</lit:literal></expr> )</condition><then pos:line="213" pos:column="101"> <comment type="line" pos:line="213" pos:column="102">// Covers Section and SectionEnd</comment>
		<return pos:line="214" pos:column="17">return <expr><name pos:line="214" pos:column="24">SCE_NSIS_SECTIONDEF</name></expr>;</return></then></if>

	<if pos:line="216" pos:column="9">if<condition pos:line="216" pos:column="11">( <expr><call><name pos:line="216" pos:column="13">NsisCmp</name><argument_list pos:line="216" pos:column="20">(<argument><expr><name pos:line="216" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="216" pos:column="24">"SubSection"</lit:literal></expr></argument>, <argument><expr><name pos:line="216" pos:column="38">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="216" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="216" pos:column="54">0</lit:literal> <op:operator pos:line="216" pos:column="56">||</op:operator> <call><name pos:line="216" pos:column="59">NsisCmp</name><argument_list pos:line="216" pos:column="66">(<argument><expr><name pos:line="216" pos:column="67">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="216" pos:column="70">"SubSectionEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="216" pos:column="87">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="216" pos:column="100">==</op:operator> <lit:literal type="number" pos:line="216" pos:column="103">0</lit:literal></expr> )</condition><then pos:line="216" pos:column="106"> <comment type="line" pos:line="216" pos:column="107">// Covers SubSection and SubSectionEnd</comment>
		<return pos:line="217" pos:column="17">return <expr><name pos:line="217" pos:column="24">SCE_NSIS_SUBSECTIONDEF</name></expr>;</return></then></if>

  <if pos:line="219" pos:column="3">if<condition pos:line="219" pos:column="5">( <expr><call><name pos:line="219" pos:column="7">NsisCmp</name><argument_list pos:line="219" pos:column="14">(<argument><expr><name pos:line="219" pos:column="15">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="219" pos:column="18">"PageEx"</lit:literal></expr></argument>, <argument><expr><name pos:line="219" pos:column="28">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="219" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="219" pos:column="44">0</lit:literal> <op:operator pos:line="219" pos:column="46">||</op:operator> <call><name pos:line="219" pos:column="49">NsisCmp</name><argument_list pos:line="219" pos:column="56">(<argument><expr><name pos:line="219" pos:column="57">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="219" pos:column="60">"PageExEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="219" pos:column="73">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="219" pos:column="86">==</op:operator> <lit:literal type="number" pos:line="219" pos:column="89">0</lit:literal></expr> )</condition><then pos:line="219" pos:column="92"> <comment type="line" pos:line="219" pos:column="93">// Covers PageEx and PageExEnd</comment>
    <return pos:line="220" pos:column="5">return <expr><name pos:line="220" pos:column="12">SCE_NSIS_PAGEEX</name></expr>;</return></then></if>

	<if pos:line="222" pos:column="9">if<condition pos:line="222" pos:column="11">( <expr><call><name pos:line="222" pos:column="13">NsisCmp</name><argument_list pos:line="222" pos:column="20">(<argument><expr><name pos:line="222" pos:column="21">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="24">"Function"</lit:literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="36">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="222" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="222" pos:column="52">0</lit:literal> <op:operator pos:line="222" pos:column="54">||</op:operator> <call><name pos:line="222" pos:column="57">NsisCmp</name><argument_list pos:line="222" pos:column="64">(<argument><expr><name pos:line="222" pos:column="65">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="68">"FunctionEnd"</lit:literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="83">bIgnoreCase</name></expr></argument>)</argument_list></call> <op:operator pos:line="222" pos:column="96">==</op:operator> <lit:literal type="number" pos:line="222" pos:column="99">0</lit:literal></expr> )</condition><then pos:line="222" pos:column="102"> <comment type="line" pos:line="222" pos:column="103">// Covers Function and FunctionEnd</comment>
		<return pos:line="223" pos:column="17">return <expr><name pos:line="223" pos:column="24">SCE_NSIS_FUNCTIONDEF</name></expr>;</return></then></if>

	<if pos:line="225" pos:column="9">if <condition pos:line="225" pos:column="12">( <expr><call><name><name pos:line="225" pos:column="14">Functions</name><op:operator pos:line="225" pos:column="23">.</op:operator><name pos:line="225" pos:column="24">InList</name></name><argument_list pos:line="225" pos:column="30">(<argument><expr><name pos:line="225" pos:column="31">s</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="225" pos:column="35">
		<return pos:line="226" pos:column="17">return <expr><name pos:line="226" pos:column="24">SCE_NSIS_FUNCTION</name></expr>;</return></then></if>

	<if pos:line="228" pos:column="9">if <condition pos:line="228" pos:column="12">( <expr><call><name><name pos:line="228" pos:column="14">Variables</name><op:operator pos:line="228" pos:column="23">.</op:operator><name pos:line="228" pos:column="24">InList</name></name><argument_list pos:line="228" pos:column="30">(<argument><expr><name pos:line="228" pos:column="31">s</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="228" pos:column="35">
		<return pos:line="229" pos:column="17">return <expr><name pos:line="229" pos:column="24">SCE_NSIS_VARIABLE</name></expr>;</return></then></if>

	<if pos:line="231" pos:column="9">if <condition pos:line="231" pos:column="12">( <expr><call><name><name pos:line="231" pos:column="14">Lables</name><op:operator pos:line="231" pos:column="20">.</op:operator><name pos:line="231" pos:column="21">InList</name></name><argument_list pos:line="231" pos:column="27">(<argument><expr><name pos:line="231" pos:column="28">s</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="231" pos:column="32">
		<return pos:line="232" pos:column="17">return <expr><name pos:line="232" pos:column="24">SCE_NSIS_LABEL</name></expr>;</return></then></if>

	<if pos:line="234" pos:column="9">if<condition pos:line="234" pos:column="11">( <expr><call><name><name pos:line="234" pos:column="13">UserDefined</name><op:operator pos:line="234" pos:column="24">.</op:operator><name pos:line="234" pos:column="25">InList</name></name><argument_list pos:line="234" pos:column="31">(<argument><expr><name pos:line="234" pos:column="32">s</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="234" pos:column="36">
		<return pos:line="235" pos:column="17">return <expr><name pos:line="235" pos:column="24">SCE_NSIS_USERDEFINED</name></expr>;</return></then></if>

	<if pos:line="237" pos:column="9">if<condition pos:line="237" pos:column="11">( <expr><call><name pos:line="237" pos:column="13">strlen</name><argument_list pos:line="237" pos:column="19">(<argument><expr><name pos:line="237" pos:column="20">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="237" pos:column="23">&gt;</op:operator> <lit:literal type="number" pos:line="237" pos:column="25">3</lit:literal></expr> )</condition><then pos:line="237" pos:column="28">
	<block pos:line="238" pos:column="9">{
		<if pos:line="239" pos:column="17">if<condition pos:line="239" pos:column="19">( <expr><name><name pos:line="239" pos:column="21">s</name><index pos:line="239" pos:column="22">[<expr><lit:literal type="number" pos:line="239" pos:column="23">1</lit:literal></expr>]</index></name> <op:operator pos:line="239" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="29">'{'</lit:literal> <op:operator pos:line="239" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="239" pos:column="36">s</name><index pos:line="239" pos:column="37">[<expr><call><name pos:line="239" pos:column="38">strlen</name><argument_list pos:line="239" pos:column="44">(<argument><expr><name pos:line="239" pos:column="45">s</name></expr></argument>)</argument_list></call><op:operator pos:line="239" pos:column="47">-</op:operator><lit:literal type="number" pos:line="239" pos:column="48">1</lit:literal></expr>]</index></name> <op:operator pos:line="239" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="54">'}'</lit:literal></expr> )</condition><then pos:line="239" pos:column="59">
			<return pos:line="240" pos:column="25">return <expr><name pos:line="240" pos:column="32">SCE_NSIS_VARIABLE</name></expr>;</return></then></if>
	}</block></then></if>

  <comment type="line" pos:line="243" pos:column="3">// See if the variable is a user defined variable</comment>
  <if pos:line="244" pos:column="3">if<condition pos:line="244" pos:column="5">( <expr><name><name pos:line="244" pos:column="7">s</name><index pos:line="244" pos:column="8">[<expr><lit:literal type="number" pos:line="244" pos:column="9">0</lit:literal></expr>]</index></name> <op:operator pos:line="244" pos:column="12">==</op:operator> <lit:literal type="char" pos:line="244" pos:column="15">'$'</lit:literal> <op:operator pos:line="244" pos:column="19">&amp;&amp;</op:operator> <name pos:line="244" pos:column="22">bUserVars</name></expr> )</condition><then pos:line="244" pos:column="33">
  <block pos:line="245" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="246" pos:column="5">bool</name></type> <name pos:line="246" pos:column="10">bHasSimpleNsisChars</name> <init pos:line="246" pos:column="30">= <expr><lit:literal type="boolean" pos:line="246" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="247" pos:column="5">for (<init><decl><type><name pos:line="247" pos:column="10">unsigned</name> <name pos:line="247" pos:column="19">int</name></type> <name pos:line="247" pos:column="23">j</name> <init pos:line="247" pos:column="25">= <expr><lit:literal type="number" pos:line="247" pos:column="27">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="247" pos:column="30">j</name> <op:operator pos:line="247" pos:column="32">&lt;</op:operator> <name pos:line="247" pos:column="34">end</name> <op:operator pos:line="247" pos:column="38">-</op:operator> <name pos:line="247" pos:column="40">start</name> <op:operator pos:line="247" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="247" pos:column="48">1</lit:literal> <op:operator pos:line="247" pos:column="50">&amp;&amp;</op:operator> <name pos:line="247" pos:column="53">j</name> <op:operator pos:line="247" pos:column="55">&lt;</op:operator> <lit:literal type="number" pos:line="247" pos:column="57">99</lit:literal></expr>;</condition> <incr><expr><name pos:line="247" pos:column="61">j</name><op:operator pos:line="247" pos:column="62">++</op:operator></expr></incr>)
	  <block pos:line="248" pos:column="11">{
      <if pos:line="249" pos:column="7">if<condition pos:line="249" pos:column="9">( <expr><op:operator pos:line="249" pos:column="11">!</op:operator><call><name pos:line="249" pos:column="12">isNsisChar</name><argument_list pos:line="249" pos:column="22">( <argument><expr><name><name pos:line="249" pos:column="24">s</name><index pos:line="249" pos:column="25">[<expr><name pos:line="249" pos:column="26">j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="249" pos:column="32">
      <block pos:line="250" pos:column="7">{
        <expr_stmt><expr><name pos:line="251" pos:column="9">bHasSimpleNsisChars</name> <op:operator pos:line="251" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="251" pos:column="31">false</lit:literal></expr>;</expr_stmt>
        <break pos:line="252" pos:column="9">break;</break>
      }</block></then></if>
	  }</block></for>

    <if pos:line="256" pos:column="5">if<condition pos:line="256" pos:column="7">( <expr><name pos:line="256" pos:column="9">bHasSimpleNsisChars</name></expr> )</condition><then pos:line="256" pos:column="30">
      <return pos:line="257" pos:column="7">return <expr><name pos:line="257" pos:column="14">SCE_NSIS_VARIABLE</name></expr>;</return></then></if>
  }</block></then></if>

  <comment type="line" pos:line="260" pos:column="3">// To check for numbers</comment>
  <if pos:line="261" pos:column="3">if<condition pos:line="261" pos:column="5">( <expr><call><name pos:line="261" pos:column="7">isNsisNumber</name><argument_list pos:line="261" pos:column="19">( <argument><expr><name><name pos:line="261" pos:column="21">s</name><index pos:line="261" pos:column="22">[<expr><lit:literal type="number" pos:line="261" pos:column="23">0</lit:literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="261" pos:column="29">
  <block pos:line="262" pos:column="3">{
    <decl_stmt><decl><type><name pos:line="263" pos:column="5">bool</name></type> <name pos:line="263" pos:column="10">bHasSimpleNsisNumber</name> <init pos:line="263" pos:column="31">= <expr><lit:literal type="boolean" pos:line="263" pos:column="33">true</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="264" pos:column="5">for (<init><decl><type><name pos:line="264" pos:column="10">unsigned</name> <name pos:line="264" pos:column="19">int</name></type> <name pos:line="264" pos:column="23">j</name> <init pos:line="264" pos:column="25">= <expr><lit:literal type="number" pos:line="264" pos:column="27">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="264" pos:column="30">j</name> <op:operator pos:line="264" pos:column="32">&lt;</op:operator> <name pos:line="264" pos:column="34">end</name> <op:operator pos:line="264" pos:column="38">-</op:operator> <name pos:line="264" pos:column="40">start</name> <op:operator pos:line="264" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="264" pos:column="48">1</lit:literal> <op:operator pos:line="264" pos:column="50">&amp;&amp;</op:operator> <name pos:line="264" pos:column="53">j</name> <op:operator pos:line="264" pos:column="55">&lt;</op:operator> <lit:literal type="number" pos:line="264" pos:column="57">99</lit:literal></expr>;</condition> <incr><expr><name pos:line="264" pos:column="61">j</name><op:operator pos:line="264" pos:column="62">++</op:operator></expr></incr>)
	  <block pos:line="265" pos:column="11">{
      <if pos:line="266" pos:column="7">if<condition pos:line="266" pos:column="9">( <expr><op:operator pos:line="266" pos:column="11">!</op:operator><call><name pos:line="266" pos:column="12">isNsisNumber</name><argument_list pos:line="266" pos:column="24">( <argument><expr><name><name pos:line="266" pos:column="26">s</name><index pos:line="266" pos:column="27">[<expr><name pos:line="266" pos:column="28">j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="266" pos:column="34">
      <block pos:line="267" pos:column="7">{
        <expr_stmt><expr><name pos:line="268" pos:column="9">bHasSimpleNsisNumber</name> <op:operator pos:line="268" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="268" pos:column="32">false</lit:literal></expr>;</expr_stmt>
        <break pos:line="269" pos:column="9">break;</break>
      }</block></then></if>
	  }</block></for>

    <if pos:line="273" pos:column="5">if<condition pos:line="273" pos:column="7">( <expr><name pos:line="273" pos:column="9">bHasSimpleNsisNumber</name></expr> )</condition><then pos:line="273" pos:column="31">
      <return pos:line="274" pos:column="7">return <expr><name pos:line="274" pos:column="14">SCE_NSIS_NUMBER</name></expr>;</return></then></if>
  }</block></then></if>

	<return pos:line="277" pos:column="9">return <expr><name pos:line="277" pos:column="16">SCE_NSIS_DEFAULT</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="280" pos:column="1">static</specifier> <name pos:line="280" pos:column="8">void</name></type> <name pos:line="280" pos:column="13">ColouriseNsisDoc</name><parameter_list pos:line="280" pos:column="29">(<param><decl><type><name pos:line="280" pos:column="30">unsigned</name> <name pos:line="280" pos:column="39">int</name></type> <name pos:line="280" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="53">int</name></type> <name pos:line="280" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="280" pos:column="65">int</name></type></decl></param>, <param><decl><type><name pos:line="280" pos:column="70">WordList</name> <type:modifier pos:line="280" pos:column="79">*</type:modifier></type><name><name pos:line="280" pos:column="80">keywordLists</name><index pos:line="280" pos:column="92">[]</index></name></decl></param>, <param><decl><type><name pos:line="280" pos:column="96">Accessor</name> <type:modifier pos:line="280" pos:column="105">&amp;</type:modifier></type><name pos:line="280" pos:column="106">styler</name></decl></param>)</parameter_list>
<block pos:line="281" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="282" pos:column="9">int</name></type> <name pos:line="282" pos:column="13">state</name> <init pos:line="282" pos:column="19">= <expr><name pos:line="282" pos:column="21">SCE_NSIS_DEFAULT</name></expr></init></decl>;</decl_stmt>
  <if pos:line="283" pos:column="3">if<condition pos:line="283" pos:column="5">( <expr><name pos:line="283" pos:column="7">startPos</name> <op:operator pos:line="283" pos:column="16">&gt;</op:operator> <lit:literal type="number" pos:line="283" pos:column="18">0</lit:literal></expr> )</condition><then pos:line="283" pos:column="21">
    <expr_stmt><expr><name pos:line="284" pos:column="5">state</name> <op:operator pos:line="284" pos:column="11">=</op:operator> <call><name><name pos:line="284" pos:column="13">styler</name><op:operator pos:line="284" pos:column="19">.</op:operator><name pos:line="284" pos:column="20">StyleAt</name></name><argument_list pos:line="284" pos:column="27">(<argument><expr><name pos:line="284" pos:column="28">startPos</name><op:operator pos:line="284" pos:column="36">-</op:operator><lit:literal type="number" pos:line="284" pos:column="37">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> <comment type="line" pos:line="284" pos:column="41">// Use the style from the previous line, usually default, but could be commentbox</comment>

	<expr_stmt><expr><call><name><name pos:line="286" pos:column="9">styler</name><op:operator pos:line="286" pos:column="15">.</op:operator><name pos:line="286" pos:column="16">StartAt</name></name><argument_list pos:line="286" pos:column="23">( <argument><expr><name pos:line="286" pos:column="25">startPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="287" pos:column="9">styler</name><op:operator pos:line="287" pos:column="15">.</op:operator><name pos:line="287" pos:column="16">GetLine</name></name><argument_list pos:line="287" pos:column="23">( <argument><expr><name pos:line="287" pos:column="25">startPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="289" pos:column="9">unsigned</name> <name pos:line="289" pos:column="18">int</name></type> <name pos:line="289" pos:column="22">nLengthDoc</name> <init pos:line="289" pos:column="33">= <expr><name pos:line="289" pos:column="35">startPos</name> <op:operator pos:line="289" pos:column="44">+</op:operator> <name pos:line="289" pos:column="46">length</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="290" pos:column="9">styler</name><op:operator pos:line="290" pos:column="15">.</op:operator><name pos:line="290" pos:column="16">StartSegment</name></name><argument_list pos:line="290" pos:column="28">( <argument><expr><name pos:line="290" pos:column="30">startPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="292" pos:column="9">char</name></type> <name pos:line="292" pos:column="14">cCurrChar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="293" pos:column="9">bool</name></type> <name pos:line="293" pos:column="14">bVarInString</name> <init pos:line="293" pos:column="27">= <expr><lit:literal type="boolean" pos:line="293" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="294" pos:column="3">bool</name></type> <name pos:line="294" pos:column="8">bClassicVarInString</name> <init pos:line="294" pos:column="28">= <expr><lit:literal type="boolean" pos:line="294" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="296" pos:column="9">unsigned</name> <name pos:line="296" pos:column="18">int</name></type> <name pos:line="296" pos:column="22">i</name></decl>;</decl_stmt>
	<for pos:line="297" pos:column="9">for( <init><expr><name pos:line="297" pos:column="14">i</name> <op:operator pos:line="297" pos:column="16">=</op:operator> <name pos:line="297" pos:column="18">startPos</name></expr>;</init> <condition><expr><name pos:line="297" pos:column="28">i</name> <op:operator pos:line="297" pos:column="30">&lt;</op:operator> <name pos:line="297" pos:column="32">nLengthDoc</name></expr>;</condition> <incr><expr><name pos:line="297" pos:column="44">i</name><op:operator pos:line="297" pos:column="45">++</op:operator></expr></incr> )
	<block pos:line="298" pos:column="9">{
		<expr_stmt><expr><name pos:line="299" pos:column="17">cCurrChar</name> <op:operator pos:line="299" pos:column="27">=</op:operator> <call><name><name pos:line="299" pos:column="29">styler</name><op:operator pos:line="299" pos:column="35">.</op:operator><name pos:line="299" pos:column="36">SafeGetCharAt</name></name><argument_list pos:line="299" pos:column="49">( <argument><expr><name pos:line="299" pos:column="51">i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="300" pos:column="17">char</name></type> <name pos:line="300" pos:column="22">cNextChar</name> <init pos:line="300" pos:column="32">= <expr><call><name><name pos:line="300" pos:column="34">styler</name><op:operator pos:line="300" pos:column="40">.</op:operator><name pos:line="300" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="300" pos:column="54">(<argument><expr><name pos:line="300" pos:column="55">i</name><op:operator pos:line="300" pos:column="56">+</op:operator><lit:literal type="number" pos:line="300" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch pos:line="302" pos:column="17">switch<condition pos:line="302" pos:column="23">(<expr><name pos:line="302" pos:column="24">state</name></expr>)</condition>
		<block pos:line="303" pos:column="17">{
			<case pos:line="304" pos:column="25">case <expr><name pos:line="304" pos:column="30">SCE_NSIS_DEFAULT</name></expr>:
				<if pos:line="305" pos:column="33">if<condition pos:line="305" pos:column="35">( <expr><name pos:line="305" pos:column="37">cCurrChar</name> <op:operator pos:line="305" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="305" pos:column="50">';'</lit:literal> <op:operator pos:line="305" pos:column="54">||</op:operator> <name pos:line="305" pos:column="57">cCurrChar</name> <op:operator pos:line="305" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="305" pos:column="70">'#'</lit:literal></expr> )</condition><then pos:line="305" pos:column="75"> <comment type="line" pos:line="305" pos:column="76">// we have a comment line</comment>
				<block pos:line="306" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="307" pos:column="41">styler</name><op:operator pos:line="307" pos:column="47">.</op:operator><name pos:line="307" pos:column="48">ColourTo</name></name><argument_list pos:line="307" pos:column="56">(<argument><expr><name pos:line="307" pos:column="57">i</name><op:operator pos:line="307" pos:column="58">-</op:operator><lit:literal type="number" pos:line="307" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><name pos:line="307" pos:column="62">state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="308" pos:column="41">state</name> <op:operator pos:line="308" pos:column="47">=</op:operator> <name pos:line="308" pos:column="49">SCE_NSIS_COMMENT</name></expr>;</expr_stmt>
					<break pos:line="309" pos:column="41">break;</break>
				}</block></then></if>
				<if pos:line="311" pos:column="33">if<condition pos:line="311" pos:column="35">( <expr><name pos:line="311" pos:column="37">cCurrChar</name> <op:operator pos:line="311" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="311" pos:column="50">'"'</lit:literal></expr> )</condition><then pos:line="311" pos:column="55">
				<block pos:line="312" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="313" pos:column="41">styler</name><op:operator pos:line="313" pos:column="47">.</op:operator><name pos:line="313" pos:column="48">ColourTo</name></name><argument_list pos:line="313" pos:column="56">(<argument><expr><name pos:line="313" pos:column="57">i</name><op:operator pos:line="313" pos:column="58">-</op:operator><lit:literal type="number" pos:line="313" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><name pos:line="313" pos:column="62">state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="314" pos:column="41">state</name> <op:operator pos:line="314" pos:column="47">=</op:operator> <name pos:line="314" pos:column="49">SCE_NSIS_STRINGDQ</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="315" pos:column="41">bVarInString</name> <op:operator pos:line="315" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="315" pos:column="56">false</lit:literal></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="316" pos:column="11">bClassicVarInString</name> <op:operator pos:line="316" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="316" pos:column="33">false</lit:literal></expr>;</expr_stmt>
					<break pos:line="317" pos:column="41">break;</break>
				}</block></then></if>
				<if pos:line="319" pos:column="33">if<condition pos:line="319" pos:column="35">( <expr><name pos:line="319" pos:column="37">cCurrChar</name> <op:operator pos:line="319" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="319" pos:column="50">'\''</lit:literal></expr> )</condition><then pos:line="319" pos:column="56">
				<block pos:line="320" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="321" pos:column="41">styler</name><op:operator pos:line="321" pos:column="47">.</op:operator><name pos:line="321" pos:column="48">ColourTo</name></name><argument_list pos:line="321" pos:column="56">(<argument><expr><name pos:line="321" pos:column="57">i</name><op:operator pos:line="321" pos:column="58">-</op:operator><lit:literal type="number" pos:line="321" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><name pos:line="321" pos:column="62">state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="322" pos:column="41">state</name> <op:operator pos:line="322" pos:column="47">=</op:operator> <name pos:line="322" pos:column="49">SCE_NSIS_STRINGRQ</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="323" pos:column="41">bVarInString</name> <op:operator pos:line="323" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="323" pos:column="56">false</lit:literal></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="324" pos:column="11">bClassicVarInString</name> <op:operator pos:line="324" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="324" pos:column="33">false</lit:literal></expr>;</expr_stmt>
					<break pos:line="325" pos:column="41">break;</break>
				}</block></then></if>
				<if pos:line="327" pos:column="33">if<condition pos:line="327" pos:column="35">( <expr><name pos:line="327" pos:column="37">cCurrChar</name> <op:operator pos:line="327" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="50">'`'</lit:literal></expr> )</condition><then pos:line="327" pos:column="55">
				<block pos:line="328" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="329" pos:column="41">styler</name><op:operator pos:line="329" pos:column="47">.</op:operator><name pos:line="329" pos:column="48">ColourTo</name></name><argument_list pos:line="329" pos:column="56">(<argument><expr><name pos:line="329" pos:column="57">i</name><op:operator pos:line="329" pos:column="58">-</op:operator><lit:literal type="number" pos:line="329" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><name pos:line="329" pos:column="62">state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="330" pos:column="41">state</name> <op:operator pos:line="330" pos:column="47">=</op:operator> <name pos:line="330" pos:column="49">SCE_NSIS_STRINGLQ</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="331" pos:column="41">bVarInString</name> <op:operator pos:line="331" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="331" pos:column="56">false</lit:literal></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="332" pos:column="11">bClassicVarInString</name> <op:operator pos:line="332" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="332" pos:column="33">false</lit:literal></expr>;</expr_stmt>
					<break pos:line="333" pos:column="41">break;</break>
				}</block></then></if>

				<comment type="line" pos:line="336" pos:column="33">// NSIS KeyWord,Function, Variable, UserDefined:</comment>
				<if pos:line="337" pos:column="33">if<condition pos:line="337" pos:column="35">( <expr><name pos:line="337" pos:column="37">cCurrChar</name> <op:operator pos:line="337" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="337" pos:column="50">'$'</lit:literal> <op:operator pos:line="337" pos:column="54">||</op:operator> <call><name pos:line="337" pos:column="57">isNsisChar</name><argument_list pos:line="337" pos:column="67">(<argument><expr><name pos:line="337" pos:column="68">cCurrChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="337" pos:column="79">||</op:operator> <name pos:line="337" pos:column="82">cCurrChar</name> <op:operator pos:line="337" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="337" pos:column="95">'!'</lit:literal></expr> )</condition><then pos:line="337" pos:column="100">
				<block pos:line="338" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="339" pos:column="41">styler</name><op:operator pos:line="339" pos:column="47">.</op:operator><name pos:line="339" pos:column="48">ColourTo</name></name><argument_list pos:line="339" pos:column="56">(<argument><expr><name pos:line="339" pos:column="57">i</name><op:operator pos:line="339" pos:column="58">-</op:operator><lit:literal type="number" pos:line="339" pos:column="59">1</lit:literal></expr></argument>,<argument><expr><name pos:line="339" pos:column="61">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  <expr_stmt><expr><name pos:line="340" pos:column="35">state</name> <op:operator pos:line="340" pos:column="41">=</op:operator> <name pos:line="340" pos:column="43">SCE_NSIS_FUNCTION</name></expr>;</expr_stmt>

          <comment type="line" pos:line="342" pos:column="11">// If it is a number, we must check and set style here first...</comment>
          <if pos:line="343" pos:column="11">if<condition pos:line="343" pos:column="13">( <expr><call><name pos:line="343" pos:column="15">isNsisNumber</name><argument_list pos:line="343" pos:column="27">(<argument><expr><name pos:line="343" pos:column="28">cCurrChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="343" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="343" pos:column="42">(</op:operator><name pos:line="343" pos:column="43">cNextChar</name> <op:operator pos:line="343" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="343" pos:column="56">'\t'</lit:literal> <op:operator pos:line="343" pos:column="61">||</op:operator> <name pos:line="343" pos:column="64">cNextChar</name> <op:operator pos:line="343" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="343" pos:column="77">' '</lit:literal> <op:operator pos:line="343" pos:column="81">||</op:operator> <name pos:line="343" pos:column="84">cNextChar</name> <op:operator pos:line="343" pos:column="94">==</op:operator> <lit:literal type="char" pos:line="343" pos:column="97">'\r'</lit:literal> <op:operator pos:line="343" pos:column="102">||</op:operator> <name pos:line="343" pos:column="105">cNextChar</name> <op:operator pos:line="343" pos:column="115">==</op:operator> <lit:literal type="char" pos:line="343" pos:column="118">'\n'</lit:literal> <op:operator pos:line="343" pos:column="123">)</op:operator></expr> )</condition><then pos:line="343" pos:column="126">
              <expr_stmt><expr><call><name><name pos:line="344" pos:column="15">styler</name><op:operator pos:line="344" pos:column="21">.</op:operator><name pos:line="344" pos:column="22">ColourTo</name></name><argument_list pos:line="344" pos:column="30">( <argument><expr><name pos:line="344" pos:column="32">i</name></expr></argument>, <argument><expr><name pos:line="344" pos:column="35">SCE_NSIS_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

					<break pos:line="346" pos:column="41">break;</break>
				}</block></then></if>

        <if pos:line="349" pos:column="9">if<condition pos:line="349" pos:column="11">( <expr><name pos:line="349" pos:column="13">cCurrChar</name> <op:operator pos:line="349" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="349" pos:column="26">'/'</lit:literal> <op:operator pos:line="349" pos:column="30">&amp;&amp;</op:operator> <name pos:line="349" pos:column="33">cNextChar</name> <op:operator pos:line="349" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="349" pos:column="46">'*'</lit:literal></expr> )</condition><then pos:line="349" pos:column="51">
        <block pos:line="350" pos:column="9">{
          <expr_stmt><expr><call><name><name pos:line="351" pos:column="11">styler</name><op:operator pos:line="351" pos:column="17">.</op:operator><name pos:line="351" pos:column="18">ColourTo</name></name><argument_list pos:line="351" pos:column="26">(<argument><expr><name pos:line="351" pos:column="27">i</name><op:operator pos:line="351" pos:column="28">-</op:operator><lit:literal type="number" pos:line="351" pos:column="29">1</lit:literal></expr></argument>,<argument><expr><name pos:line="351" pos:column="31">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="352" pos:column="11">state</name> <op:operator pos:line="352" pos:column="17">=</op:operator> <name pos:line="352" pos:column="19">SCE_NSIS_COMMENTBOX</name></expr>;</expr_stmt>
          <break pos:line="353" pos:column="11">break;</break>
        }</block></then></if>

				<break pos:line="356" pos:column="33">break;</break>
			</case><case pos:line="357" pos:column="25">case <expr><name pos:line="357" pos:column="30">SCE_NSIS_COMMENT</name></expr>:
				<if pos:line="358" pos:column="33">if<condition pos:line="358" pos:column="35">( <expr><name pos:line="358" pos:column="37">cNextChar</name> <op:operator pos:line="358" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="358" pos:column="50">'\n'</lit:literal> <op:operator pos:line="358" pos:column="55">||</op:operator> <name pos:line="358" pos:column="58">cNextChar</name> <op:operator pos:line="358" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="358" pos:column="71">'\r'</lit:literal></expr> )</condition><then pos:line="358" pos:column="77">
        <block pos:line="359" pos:column="9">{
          <comment type="line" pos:line="360" pos:column="11">// Special case:</comment>
          <if pos:line="361" pos:column="11">if<condition pos:line="361" pos:column="13">( <expr><name pos:line="361" pos:column="15">cCurrChar</name> <op:operator pos:line="361" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="361" pos:column="28">'\\'</lit:literal></expr> )</condition><then pos:line="361" pos:column="34">
          <block pos:line="362" pos:column="11">{
            <expr_stmt><expr><call><name><name pos:line="363" pos:column="13">styler</name><op:operator pos:line="363" pos:column="19">.</op:operator><name pos:line="363" pos:column="20">ColourTo</name></name><argument_list pos:line="363" pos:column="28">(<argument><expr><name pos:line="363" pos:column="29">i</name><op:operator pos:line="363" pos:column="30">-</op:operator><lit:literal type="number" pos:line="363" pos:column="31">2</lit:literal></expr></argument>,<argument><expr><name pos:line="363" pos:column="33">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="364" pos:column="13">styler</name><op:operator pos:line="364" pos:column="19">.</op:operator><name pos:line="364" pos:column="20">ColourTo</name></name><argument_list pos:line="364" pos:column="28">(<argument><expr><name pos:line="364" pos:column="29">i</name></expr></argument>,<argument><expr><name pos:line="364" pos:column="31">SCE_NSIS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
          <else pos:line="366" pos:column="11">else
          <block pos:line="367" pos:column="11">{
				    <expr_stmt><expr><call><name><name pos:line="368" pos:column="37">styler</name><op:operator pos:line="368" pos:column="43">.</op:operator><name pos:line="368" pos:column="44">ColourTo</name></name><argument_list pos:line="368" pos:column="52">(<argument><expr><name pos:line="368" pos:column="53">i</name></expr></argument>,<argument><expr><name pos:line="368" pos:column="55">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="369" pos:column="13">state</name> <op:operator pos:line="369" pos:column="19">=</op:operator> <name pos:line="369" pos:column="21">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt>
          }</block></else></if>
        }</block></then></if>
				<break pos:line="372" pos:column="33">break;</break>
			</case><case pos:line="373" pos:column="25">case <expr><name pos:line="373" pos:column="30">SCE_NSIS_STRINGDQ</name></expr>:
      </case><case pos:line="374" pos:column="7">case <expr><name pos:line="374" pos:column="12">SCE_NSIS_STRINGLQ</name></expr>:
      </case><case pos:line="375" pos:column="7">case <expr><name pos:line="375" pos:column="12">SCE_NSIS_STRINGRQ</name></expr>:

        <if pos:line="377" pos:column="9">if<condition pos:line="377" pos:column="11">( <expr><call><name><name pos:line="377" pos:column="13">styler</name><op:operator pos:line="377" pos:column="19">.</op:operator><name pos:line="377" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="377" pos:column="33">(<argument><expr><name pos:line="377" pos:column="34">i</name><op:operator pos:line="377" pos:column="35">-</op:operator><lit:literal type="number" pos:line="377" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="377" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="377" pos:column="42">'\\'</lit:literal> <op:operator pos:line="377" pos:column="47">&amp;&amp;</op:operator> <call><name><name pos:line="377" pos:column="50">styler</name><op:operator pos:line="377" pos:column="56">.</op:operator><name pos:line="377" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="377" pos:column="70">(<argument><expr><name pos:line="377" pos:column="71">i</name><op:operator pos:line="377" pos:column="72">-</op:operator><lit:literal type="number" pos:line="377" pos:column="73">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="377" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="377" pos:column="79">'$'</lit:literal></expr> )</condition><then pos:line="377" pos:column="84">
          <break pos:line="378" pos:column="11">break;</break></then></if> <comment type="line" pos:line="378" pos:column="18">// Ignore the next character, even if it is a quote of some sort</comment>

        <if pos:line="380" pos:column="9">if<condition pos:line="380" pos:column="11">( <expr><name pos:line="380" pos:column="13">cCurrChar</name> <op:operator pos:line="380" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="380" pos:column="26">'"'</lit:literal> <op:operator pos:line="380" pos:column="30">&amp;&amp;</op:operator> <name pos:line="380" pos:column="33">state</name> <op:operator pos:line="380" pos:column="39">==</op:operator> <name pos:line="380" pos:column="42">SCE_NSIS_STRINGDQ</name></expr> )</condition><then pos:line="380" pos:column="61">
				<block pos:line="381" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="382" pos:column="41">styler</name><op:operator pos:line="382" pos:column="47">.</op:operator><name pos:line="382" pos:column="48">ColourTo</name></name><argument_list pos:line="382" pos:column="56">(<argument><expr><name pos:line="382" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="382" pos:column="59">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  <expr_stmt><expr><name pos:line="383" pos:column="35">state</name> <op:operator pos:line="383" pos:column="41">=</op:operator> <name pos:line="383" pos:column="43">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt>
          <break pos:line="384" pos:column="11">break;</break>
				}</block></then></if>

        <if pos:line="387" pos:column="9">if<condition pos:line="387" pos:column="11">( <expr><name pos:line="387" pos:column="13">cCurrChar</name> <op:operator pos:line="387" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="387" pos:column="26">'`'</lit:literal> <op:operator pos:line="387" pos:column="30">&amp;&amp;</op:operator> <name pos:line="387" pos:column="33">state</name> <op:operator pos:line="387" pos:column="39">==</op:operator> <name pos:line="387" pos:column="42">SCE_NSIS_STRINGLQ</name></expr> )</condition><then pos:line="387" pos:column="61">
        <block pos:line="388" pos:column="9">{
					<expr_stmt><expr><call><name><name pos:line="389" pos:column="41">styler</name><op:operator pos:line="389" pos:column="47">.</op:operator><name pos:line="389" pos:column="48">ColourTo</name></name><argument_list pos:line="389" pos:column="56">(<argument><expr><name pos:line="389" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="389" pos:column="59">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  <expr_stmt><expr><name pos:line="390" pos:column="35">state</name> <op:operator pos:line="390" pos:column="41">=</op:operator> <name pos:line="390" pos:column="43">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt>
          <break pos:line="391" pos:column="11">break;</break>
				}</block></then></if>

        <if pos:line="394" pos:column="9">if<condition pos:line="394" pos:column="11">( <expr><name pos:line="394" pos:column="13">cCurrChar</name> <op:operator pos:line="394" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="394" pos:column="26">'\''</lit:literal> <op:operator pos:line="394" pos:column="31">&amp;&amp;</op:operator> <name pos:line="394" pos:column="34">state</name> <op:operator pos:line="394" pos:column="40">==</op:operator> <name pos:line="394" pos:column="43">SCE_NSIS_STRINGRQ</name></expr> )</condition><then pos:line="394" pos:column="62">
				<block pos:line="395" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="396" pos:column="41">styler</name><op:operator pos:line="396" pos:column="47">.</op:operator><name pos:line="396" pos:column="48">ColourTo</name></name><argument_list pos:line="396" pos:column="56">(<argument><expr><name pos:line="396" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="396" pos:column="59">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				  <expr_stmt><expr><name pos:line="397" pos:column="35">state</name> <op:operator pos:line="397" pos:column="41">=</op:operator> <name pos:line="397" pos:column="43">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt>
          <break pos:line="398" pos:column="11">break;</break>
				}</block></then></if>

        <if pos:line="401" pos:column="9">if<condition pos:line="401" pos:column="11">( <expr><name pos:line="401" pos:column="13">cNextChar</name> <op:operator pos:line="401" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="401" pos:column="26">'\r'</lit:literal> <op:operator pos:line="401" pos:column="31">||</op:operator> <name pos:line="401" pos:column="34">cNextChar</name> <op:operator pos:line="401" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="401" pos:column="47">'\n'</lit:literal></expr> )</condition><then pos:line="401" pos:column="53">
        <block pos:line="402" pos:column="9">{
          <decl_stmt><decl><type><name pos:line="403" pos:column="11">int</name></type> <name pos:line="403" pos:column="15">nCurLine</name> <init pos:line="403" pos:column="24">= <expr><call><name><name pos:line="403" pos:column="26">styler</name><op:operator pos:line="403" pos:column="32">.</op:operator><name pos:line="403" pos:column="33">GetLine</name></name><argument_list pos:line="403" pos:column="40">(<argument><expr><name pos:line="403" pos:column="41">i</name><op:operator pos:line="403" pos:column="42">+</op:operator><lit:literal type="number" pos:line="403" pos:column="43">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name pos:line="404" pos:column="11">int</name></type> <name pos:line="404" pos:column="15">nBack</name> <init pos:line="404" pos:column="21">= <expr><name pos:line="404" pos:column="23">i</name></expr></init></decl>;</decl_stmt>
          <comment type="line" pos:line="405" pos:column="11">// We need to check if the previous line has a \ in it...</comment>
          <decl_stmt><decl><type><name pos:line="406" pos:column="11">bool</name></type> <name pos:line="406" pos:column="16">bNextLine</name> <init pos:line="406" pos:column="26">= <expr><lit:literal type="boolean" pos:line="406" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>

          <while pos:line="408" pos:column="11">while<condition pos:line="408" pos:column="16">( <expr><name pos:line="408" pos:column="18">nBack</name> <op:operator pos:line="408" pos:column="24">&gt;</op:operator> <lit:literal type="number" pos:line="408" pos:column="26">0</lit:literal></expr> )</condition>
          <block pos:line="409" pos:column="11">{
            <if pos:line="410" pos:column="13">if<condition pos:line="410" pos:column="15">( <expr><call><name><name pos:line="410" pos:column="17">styler</name><op:operator pos:line="410" pos:column="23">.</op:operator><name pos:line="410" pos:column="24">GetLine</name></name><argument_list pos:line="410" pos:column="31">(<argument><expr><name pos:line="410" pos:column="32">nBack</name></expr></argument>)</argument_list></call> <op:operator pos:line="410" pos:column="39">!=</op:operator> <name pos:line="410" pos:column="42">nCurLine</name></expr> )</condition><then pos:line="410" pos:column="52">
              <break pos:line="411" pos:column="15">break;</break></then></if>

            <decl_stmt><decl><type><name pos:line="413" pos:column="13">char</name></type> <name pos:line="413" pos:column="18">cTemp</name> <init pos:line="413" pos:column="24">= <expr><call><name><name pos:line="413" pos:column="26">styler</name><op:operator pos:line="413" pos:column="32">.</op:operator><name pos:line="413" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="413" pos:column="46">(<argument><expr><name pos:line="413" pos:column="47">nBack</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="413" pos:column="54">'a'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="413" pos:column="60">// Letter 'a' is safe here</comment>

            <if pos:line="415" pos:column="13">if<condition pos:line="415" pos:column="15">( <expr><name pos:line="415" pos:column="17">cTemp</name> <op:operator pos:line="415" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="415" pos:column="26">'\\'</lit:literal></expr> )</condition><then pos:line="415" pos:column="32">
            <block pos:line="416" pos:column="13">{
              <expr_stmt><expr><name pos:line="417" pos:column="15">bNextLine</name> <op:operator pos:line="417" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="417" pos:column="27">true</lit:literal></expr>;</expr_stmt>
              <break pos:line="418" pos:column="15">break;</break>
            }</block></then></if>
            <if pos:line="420" pos:column="13">if<condition pos:line="420" pos:column="15">( <expr><name pos:line="420" pos:column="17">cTemp</name> <op:operator pos:line="420" pos:column="23">!=</op:operator> <lit:literal type="char" pos:line="420" pos:column="26">'\r'</lit:literal> <op:operator pos:line="420" pos:column="31">&amp;&amp;</op:operator> <name pos:line="420" pos:column="34">cTemp</name> <op:operator pos:line="420" pos:column="40">!=</op:operator> <lit:literal type="char" pos:line="420" pos:column="43">'\n'</lit:literal> <op:operator pos:line="420" pos:column="48">&amp;&amp;</op:operator> <name pos:line="420" pos:column="51">cTemp</name> <op:operator pos:line="420" pos:column="57">!=</op:operator> <lit:literal type="char" pos:line="420" pos:column="60">'\t'</lit:literal> <op:operator pos:line="420" pos:column="65">&amp;&amp;</op:operator> <name pos:line="420" pos:column="68">cTemp</name> <op:operator pos:line="420" pos:column="74">!=</op:operator> <lit:literal type="char" pos:line="420" pos:column="77">' '</lit:literal></expr> )</condition><then pos:line="420" pos:column="82">
              <break pos:line="421" pos:column="15">break;</break></then></if>

            <expr_stmt><expr><name pos:line="423" pos:column="13">nBack</name><op:operator pos:line="423" pos:column="18">--</op:operator></expr>;</expr_stmt>
          }</block></while>

          <if pos:line="426" pos:column="11">if<condition pos:line="426" pos:column="13">( <expr><name pos:line="426" pos:column="15">bNextLine</name></expr> )</condition><then pos:line="426" pos:column="26">
          <block pos:line="427" pos:column="11">{
            <expr_stmt><expr><call><name><name pos:line="428" pos:column="13">styler</name><op:operator pos:line="428" pos:column="19">.</op:operator><name pos:line="428" pos:column="20">ColourTo</name></name><argument_list pos:line="428" pos:column="28">(<argument><expr><name pos:line="428" pos:column="29">i</name><op:operator pos:line="428" pos:column="30">+</op:operator><lit:literal type="number" pos:line="428" pos:column="31">1</lit:literal></expr></argument>,<argument><expr><name pos:line="428" pos:column="33">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <if pos:line="430" pos:column="11">if<condition pos:line="430" pos:column="13">( <expr><name pos:line="430" pos:column="15">bNextLine</name> <op:operator pos:line="430" pos:column="25">==</op:operator> <lit:literal type="boolean" pos:line="430" pos:column="28">false</lit:literal></expr> )</condition><then pos:line="430" pos:column="35">
          <block pos:line="431" pos:column="11">{
            <expr_stmt><expr><call><name><name pos:line="432" pos:column="13">styler</name><op:operator pos:line="432" pos:column="19">.</op:operator><name pos:line="432" pos:column="20">ColourTo</name></name><argument_list pos:line="432" pos:column="28">(<argument><expr><name pos:line="432" pos:column="29">i</name></expr></argument>,<argument><expr><name pos:line="432" pos:column="31">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				    <expr_stmt><expr><name pos:line="433" pos:column="37">state</name> <op:operator pos:line="433" pos:column="43">=</op:operator> <name pos:line="433" pos:column="45">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
				<break pos:line="436" pos:column="33">break;</break>

			</case><case pos:line="438" pos:column="25">case <expr><name pos:line="438" pos:column="30">SCE_NSIS_FUNCTION</name></expr>:

				<comment type="line" pos:line="440" pos:column="33">// NSIS KeyWord:</comment>
        <if pos:line="441" pos:column="9">if<condition pos:line="441" pos:column="11">( <expr><name pos:line="441" pos:column="13">cCurrChar</name> <op:operator pos:line="441" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="441" pos:column="26">'$'</lit:literal></expr> )</condition><then pos:line="441" pos:column="31">
          <expr_stmt><expr><name pos:line="442" pos:column="11">state</name> <op:operator pos:line="442" pos:column="17">=</op:operator> <name pos:line="442" pos:column="19">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt></then>
        <else pos:line="443" pos:column="9">else <if pos:line="443" pos:column="14">if<condition pos:line="443" pos:column="16">( <expr><name pos:line="443" pos:column="18">cCurrChar</name> <op:operator pos:line="443" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="443" pos:column="31">'\\'</lit:literal> <op:operator pos:line="443" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="443" pos:column="39">(</op:operator><name pos:line="443" pos:column="40">cNextChar</name> <op:operator pos:line="443" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="443" pos:column="53">'n'</lit:literal> <op:operator pos:line="443" pos:column="57">||</op:operator> <name pos:line="443" pos:column="60">cNextChar</name> <op:operator pos:line="443" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="443" pos:column="73">'r'</lit:literal> <op:operator pos:line="443" pos:column="77">||</op:operator> <name pos:line="443" pos:column="80">cNextChar</name> <op:operator pos:line="443" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="443" pos:column="93">'t'</lit:literal> <op:operator pos:line="443" pos:column="97">)</op:operator></expr> )</condition><then pos:line="443" pos:column="100">
          <expr_stmt><expr><name pos:line="444" pos:column="11">state</name> <op:operator pos:line="444" pos:column="17">=</op:operator> <name pos:line="444" pos:column="19">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt></then>
				<else pos:line="445" pos:column="33">else <if pos:line="445" pos:column="38">if<condition pos:line="445" pos:column="40">( <expr><op:operator pos:line="445" pos:column="42">(</op:operator><call><name pos:line="445" pos:column="43">isNsisChar</name><argument_list pos:line="445" pos:column="53">(<argument><expr><name pos:line="445" pos:column="54">cCurrChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="445" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="445" pos:column="68">!</op:operator><call><name pos:line="445" pos:column="69">isNsisChar</name><argument_list pos:line="445" pos:column="79">( <argument><expr><name pos:line="445" pos:column="81">cNextChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="445" pos:column="92">&amp;&amp;</op:operator> <name pos:line="445" pos:column="95">cNextChar</name> <op:operator pos:line="445" pos:column="105">!=</op:operator> <lit:literal type="char" pos:line="445" pos:column="108">'}'</lit:literal><op:operator pos:line="445" pos:column="111">)</op:operator> <op:operator pos:line="445" pos:column="113">||</op:operator> <name pos:line="445" pos:column="116">cCurrChar</name> <op:operator pos:line="445" pos:column="126">==</op:operator> <lit:literal type="char" pos:line="445" pos:column="129">'}'</lit:literal></expr> )</condition><then pos:line="445" pos:column="134">
				<block pos:line="446" pos:column="33">{
					<expr_stmt><expr><name pos:line="447" pos:column="41">state</name> <op:operator pos:line="447" pos:column="47">=</op:operator> <call><name pos:line="447" pos:column="49">classifyWordNsis</name><argument_list pos:line="447" pos:column="65">( <argument><expr><call><name><name pos:line="447" pos:column="67">styler</name><op:operator pos:line="447" pos:column="73">.</op:operator><name pos:line="447" pos:column="74">GetStartSegment</name></name><argument_list pos:line="447" pos:column="89">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="447" pos:column="93">i</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="96">keywordLists</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="110">styler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="448" pos:column="41">styler</name><op:operator pos:line="448" pos:column="47">.</op:operator><name pos:line="448" pos:column="48">ColourTo</name></name><argument_list pos:line="448" pos:column="56">( <argument><expr><name pos:line="448" pos:column="58">i</name></expr></argument>, <argument><expr><name pos:line="448" pos:column="61">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="449" pos:column="41">state</name> <op:operator pos:line="449" pos:column="47">=</op:operator> <name pos:line="449" pos:column="49">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="451" pos:column="33">else <if pos:line="451" pos:column="38">if<condition pos:line="451" pos:column="40">( <expr><op:operator pos:line="451" pos:column="42">!</op:operator><call><name pos:line="451" pos:column="43">isNsisChar</name><argument_list pos:line="451" pos:column="53">( <argument><expr><name pos:line="451" pos:column="55">cCurrChar</name></expr></argument> )</argument_list></call> <op:operator pos:line="451" pos:column="67">&amp;&amp;</op:operator> <name pos:line="451" pos:column="70">cCurrChar</name> <op:operator pos:line="451" pos:column="80">!=</op:operator> <lit:literal type="char" pos:line="451" pos:column="83">'{'</lit:literal> <op:operator pos:line="451" pos:column="87">&amp;&amp;</op:operator> <name pos:line="451" pos:column="90">cCurrChar</name> <op:operator pos:line="451" pos:column="100">!=</op:operator> <lit:literal type="char" pos:line="451" pos:column="103">'}'</lit:literal></expr> )</condition><then pos:line="451" pos:column="108">
				<block pos:line="452" pos:column="33">{
          <if pos:line="453" pos:column="11">if<condition pos:line="453" pos:column="13">( <expr><call><name pos:line="453" pos:column="15">classifyWordNsis</name><argument_list pos:line="453" pos:column="31">( <argument><expr><call><name><name pos:line="453" pos:column="33">styler</name><op:operator pos:line="453" pos:column="39">.</op:operator><name pos:line="453" pos:column="40">GetStartSegment</name></name><argument_list pos:line="453" pos:column="55">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="453" pos:column="59">i</name><op:operator pos:line="453" pos:column="60">-</op:operator><lit:literal type="number" pos:line="453" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="453" pos:column="64">keywordLists</name></expr></argument>, <argument><expr><name pos:line="453" pos:column="78">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="453" pos:column="86">==</op:operator> <name pos:line="453" pos:column="89">SCE_NSIS_NUMBER</name></expr> )</condition><then pos:line="453" pos:column="106">
             <expr_stmt><expr><call><name><name pos:line="454" pos:column="14">styler</name><op:operator pos:line="454" pos:column="20">.</op:operator><name pos:line="454" pos:column="21">ColourTo</name></name><argument_list pos:line="454" pos:column="29">( <argument><expr><name pos:line="454" pos:column="31">i</name><op:operator pos:line="454" pos:column="32">-</op:operator><lit:literal type="number" pos:line="454" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name pos:line="454" pos:column="36">SCE_NSIS_NUMBER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>

					<expr_stmt><expr><name pos:line="456" pos:column="41">state</name> <op:operator pos:line="456" pos:column="47">=</op:operator> <name pos:line="456" pos:column="49">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt>

					<if pos:line="458" pos:column="41">if<condition pos:line="458" pos:column="43">( <expr><name pos:line="458" pos:column="45">cCurrChar</name> <op:operator pos:line="458" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="458" pos:column="58">'"'</lit:literal></expr> )</condition><then pos:line="458" pos:column="63">
					<block pos:line="459" pos:column="41">{
						<expr_stmt><expr><name pos:line="460" pos:column="49">state</name> <op:operator pos:line="460" pos:column="55">=</op:operator> <name pos:line="460" pos:column="57">SCE_NSIS_STRINGDQ</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="461" pos:column="49">bVarInString</name> <op:operator pos:line="461" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="461" pos:column="64">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="462" pos:column="13">bClassicVarInString</name> <op:operator pos:line="462" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="462" pos:column="35">false</lit:literal></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="464" pos:column="41">else <if pos:line="464" pos:column="46">if<condition pos:line="464" pos:column="48">( <expr><name pos:line="464" pos:column="50">cCurrChar</name> <op:operator pos:line="464" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="464" pos:column="63">'`'</lit:literal></expr> )</condition><then pos:line="464" pos:column="68">
					<block pos:line="465" pos:column="41">{
						<expr_stmt><expr><name pos:line="466" pos:column="49">state</name> <op:operator pos:line="466" pos:column="55">=</op:operator> <name pos:line="466" pos:column="57">SCE_NSIS_STRINGLQ</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="467" pos:column="49">bVarInString</name> <op:operator pos:line="467" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="467" pos:column="64">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="468" pos:column="13">bClassicVarInString</name> <op:operator pos:line="468" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="468" pos:column="35">false</lit:literal></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="470" pos:column="41">else <if pos:line="470" pos:column="46">if<condition pos:line="470" pos:column="48">( <expr><name pos:line="470" pos:column="50">cCurrChar</name> <op:operator pos:line="470" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="470" pos:column="63">'\''</lit:literal></expr> )</condition><then pos:line="470" pos:column="69">
					<block pos:line="471" pos:column="41">{
						<expr_stmt><expr><name pos:line="472" pos:column="49">state</name> <op:operator pos:line="472" pos:column="55">=</op:operator> <name pos:line="472" pos:column="57">SCE_NSIS_STRINGRQ</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="473" pos:column="49">bVarInString</name> <op:operator pos:line="473" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="473" pos:column="64">false</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="474" pos:column="13">bClassicVarInString</name> <op:operator pos:line="474" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="474" pos:column="35">false</lit:literal></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="476" pos:column="41">else <if pos:line="476" pos:column="46">if<condition pos:line="476" pos:column="48">( <expr><name pos:line="476" pos:column="50">cCurrChar</name> <op:operator pos:line="476" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="476" pos:column="63">'#'</lit:literal> <op:operator pos:line="476" pos:column="67">||</op:operator> <name pos:line="476" pos:column="70">cCurrChar</name> <op:operator pos:line="476" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="476" pos:column="83">';'</lit:literal></expr> )</condition><then pos:line="476" pos:column="88">
          <block pos:line="477" pos:column="11">{
						<expr_stmt><expr><name pos:line="478" pos:column="49">state</name> <op:operator pos:line="478" pos:column="55">=</op:operator> <name pos:line="478" pos:column="57">SCE_NSIS_COMMENT</name></expr>;</expr_stmt>
          }</block></then></if></else></if></else></if></else></if>
				}</block></then></if></else></if></else></if></else></if>
				<break pos:line="481" pos:column="33">break;</break>
      </case><case pos:line="482" pos:column="7">case <expr><name pos:line="482" pos:column="12">SCE_NSIS_COMMENTBOX</name></expr>:

        <if pos:line="484" pos:column="9">if<condition pos:line="484" pos:column="11">( <expr><call><name><name pos:line="484" pos:column="13">styler</name><op:operator pos:line="484" pos:column="19">.</op:operator><name pos:line="484" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="484" pos:column="33">(<argument><expr><name pos:line="484" pos:column="34">i</name><op:operator pos:line="484" pos:column="35">-</op:operator><lit:literal type="number" pos:line="484" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="484" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="484" pos:column="42">'*'</lit:literal> <op:operator pos:line="484" pos:column="46">&amp;&amp;</op:operator> <name pos:line="484" pos:column="49">cCurrChar</name> <op:operator pos:line="484" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="484" pos:column="62">'/'</lit:literal></expr> )</condition><then pos:line="484" pos:column="67">
        <block pos:line="485" pos:column="9">{
          <expr_stmt><expr><call><name><name pos:line="486" pos:column="11">styler</name><op:operator pos:line="486" pos:column="17">.</op:operator><name pos:line="486" pos:column="18">ColourTo</name></name><argument_list pos:line="486" pos:column="26">(<argument><expr><name pos:line="486" pos:column="27">i</name></expr></argument>,<argument><expr><name pos:line="486" pos:column="29">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="487" pos:column="11">state</name> <op:operator pos:line="487" pos:column="17">=</op:operator> <name pos:line="487" pos:column="19">SCE_NSIS_DEFAULT</name></expr>;</expr_stmt>
        }</block></then></if>
        <break pos:line="489" pos:column="9">break;</break>
		</case>}</block></switch>

		<if pos:line="492" pos:column="17">if<condition pos:line="492" pos:column="19">( <expr><name pos:line="492" pos:column="21">state</name> <op:operator pos:line="492" pos:column="27">==</op:operator> <name pos:line="492" pos:column="30">SCE_NSIS_COMMENT</name> <op:operator pos:line="492" pos:column="47">||</op:operator> <name pos:line="492" pos:column="50">state</name> <op:operator pos:line="492" pos:column="56">==</op:operator> <name pos:line="492" pos:column="59">SCE_NSIS_COMMENTBOX</name></expr> )</condition><then pos:line="492" pos:column="80">
		<block pos:line="493" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="494" pos:column="25">styler</name><op:operator pos:line="494" pos:column="31">.</op:operator><name pos:line="494" pos:column="32">ColourTo</name></name><argument_list pos:line="494" pos:column="40">(<argument><expr><name pos:line="494" pos:column="41">i</name></expr></argument>,<argument><expr><name pos:line="494" pos:column="43">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="496" pos:column="17">else <if pos:line="496" pos:column="22">if<condition pos:line="496" pos:column="24">( <expr><name pos:line="496" pos:column="26">state</name> <op:operator pos:line="496" pos:column="32">==</op:operator> <name pos:line="496" pos:column="35">SCE_NSIS_STRINGDQ</name> <op:operator pos:line="496" pos:column="53">||</op:operator> <name pos:line="496" pos:column="56">state</name> <op:operator pos:line="496" pos:column="62">==</op:operator> <name pos:line="496" pos:column="65">SCE_NSIS_STRINGLQ</name> <op:operator pos:line="496" pos:column="83">||</op:operator> <name pos:line="496" pos:column="86">state</name> <op:operator pos:line="496" pos:column="92">==</op:operator> <name pos:line="496" pos:column="95">SCE_NSIS_STRINGRQ</name></expr> )</condition><then pos:line="496" pos:column="114">
		<block pos:line="497" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="498" pos:column="7">bool</name></type> <name pos:line="498" pos:column="12">bIngoreNextDollarSign</name> <init pos:line="498" pos:column="34">= <expr><lit:literal type="boolean" pos:line="498" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="499" pos:column="7">bool</name></type> <name pos:line="499" pos:column="12">bUserVars</name> <init pos:line="499" pos:column="22">= <expr><lit:literal type="boolean" pos:line="499" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>
      <if pos:line="500" pos:column="7">if<condition pos:line="500" pos:column="9">( <expr><call><name><name pos:line="500" pos:column="11">styler</name><op:operator pos:line="500" pos:column="17">.</op:operator><name pos:line="500" pos:column="18">GetPropertyInt</name></name><argument_list pos:line="500" pos:column="32">(<argument><expr><lit:literal type="string" pos:line="500" pos:column="33">"nsis.uservars"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="500" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="500" pos:column="53">1</lit:literal></expr> )</condition><then pos:line="500" pos:column="56">
        <expr_stmt><expr><name pos:line="501" pos:column="9">bUserVars</name> <op:operator pos:line="501" pos:column="19">=</op:operator> <lit:literal type="boolean" pos:line="501" pos:column="21">true</lit:literal></expr>;</expr_stmt></then></if>

      <if pos:line="503" pos:column="7">if<condition pos:line="503" pos:column="9">( <expr><name pos:line="503" pos:column="11">bVarInString</name> <op:operator pos:line="503" pos:column="24">&amp;&amp;</op:operator> <name pos:line="503" pos:column="27">cCurrChar</name> <op:operator pos:line="503" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="503" pos:column="40">'$'</lit:literal></expr> )</condition><then pos:line="503" pos:column="45">
      <block pos:line="504" pos:column="7">{
        <expr_stmt><expr><name pos:line="505" pos:column="9">bVarInString</name> <op:operator pos:line="505" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="505" pos:column="24">false</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="506" pos:column="9">bIngoreNextDollarSign</name> <op:operator pos:line="506" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="506" pos:column="33">true</lit:literal></expr>;</expr_stmt>
      }</block></then>
      <else pos:line="508" pos:column="7">else <if pos:line="508" pos:column="12">if<condition pos:line="508" pos:column="14">( <expr><name pos:line="508" pos:column="16">bVarInString</name> <op:operator pos:line="508" pos:column="29">&amp;&amp;</op:operator> <name pos:line="508" pos:column="32">cCurrChar</name> <op:operator pos:line="508" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="508" pos:column="45">'\\'</lit:literal> <op:operator pos:line="508" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="508" pos:column="53">(</op:operator><name pos:line="508" pos:column="54">cNextChar</name> <op:operator pos:line="508" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="508" pos:column="67">'n'</lit:literal> <op:operator pos:line="508" pos:column="71">||</op:operator> <name pos:line="508" pos:column="74">cNextChar</name> <op:operator pos:line="508" pos:column="84">==</op:operator> <lit:literal type="char" pos:line="508" pos:column="87">'r'</lit:literal> <op:operator pos:line="508" pos:column="91">||</op:operator> <name pos:line="508" pos:column="94">cNextChar</name> <op:operator pos:line="508" pos:column="104">==</op:operator> <lit:literal type="char" pos:line="508" pos:column="107">'t'</lit:literal> <op:operator pos:line="508" pos:column="111">||</op:operator> <name pos:line="508" pos:column="114">cNextChar</name> <op:operator pos:line="508" pos:column="124">==</op:operator> <lit:literal type="char" pos:line="508" pos:column="127">'"'</lit:literal> <op:operator pos:line="508" pos:column="131">||</op:operator> <name pos:line="508" pos:column="134">cNextChar</name> <op:operator pos:line="508" pos:column="144">==</op:operator> <lit:literal type="char" pos:line="508" pos:column="147">'`'</lit:literal> <op:operator pos:line="508" pos:column="151">||</op:operator> <name pos:line="508" pos:column="154">cNextChar</name> <op:operator pos:line="508" pos:column="164">==</op:operator> <lit:literal type="char" pos:line="508" pos:column="167">'\''</lit:literal> <op:operator pos:line="508" pos:column="172">)</op:operator></expr> )</condition><then pos:line="508" pos:column="175">
      <block pos:line="509" pos:column="7">{
        <expr_stmt><expr><call><name><name pos:line="510" pos:column="9">styler</name><op:operator pos:line="510" pos:column="15">.</op:operator><name pos:line="510" pos:column="16">ColourTo</name></name><argument_list pos:line="510" pos:column="24">( <argument><expr><name pos:line="510" pos:column="26">i</name><op:operator pos:line="510" pos:column="27">+</op:operator><lit:literal type="number" pos:line="510" pos:column="28">1</lit:literal></expr></argument>, <argument><expr><name pos:line="510" pos:column="31">SCE_NSIS_STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="511" pos:column="9">bVarInString</name> <op:operator pos:line="511" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="511" pos:column="24">false</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="512" pos:column="9">bIngoreNextDollarSign</name> <op:operator pos:line="512" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="512" pos:column="33">false</lit:literal></expr>;</expr_stmt>
      }</block></then>

      <comment type="line" pos:line="515" pos:column="7">// Covers "$INSTDIR and user vars like $MYVAR"</comment>
      <else pos:line="516" pos:column="7">else <if pos:line="516" pos:column="12">if<condition pos:line="516" pos:column="14">( <expr><name pos:line="516" pos:column="16">bVarInString</name> <op:operator pos:line="516" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="516" pos:column="32">!</op:operator><call><name pos:line="516" pos:column="33">isNsisChar</name><argument_list pos:line="516" pos:column="43">(<argument><expr><name pos:line="516" pos:column="44">cNextChar</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="516" pos:column="56">
      <block pos:line="517" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="518" pos:column="9">int</name></type> <name pos:line="518" pos:column="13">nWordState</name> <init pos:line="518" pos:column="24">= <expr><call><name pos:line="518" pos:column="26">classifyWordNsis</name><argument_list pos:line="518" pos:column="42">( <argument><expr><call><name><name pos:line="518" pos:column="44">styler</name><op:operator pos:line="518" pos:column="50">.</op:operator><name pos:line="518" pos:column="51">GetStartSegment</name></name><argument_list pos:line="518" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="518" pos:column="70">i</name></expr></argument>, <argument><expr><name pos:line="518" pos:column="73">keywordLists</name></expr></argument>, <argument><expr><name pos:line="518" pos:column="87">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="519" pos:column="33">if<condition pos:line="519" pos:column="35">( <expr><name pos:line="519" pos:column="37">nWordState</name> <op:operator pos:line="519" pos:column="48">==</op:operator> <name pos:line="519" pos:column="51">SCE_NSIS_VARIABLE</name></expr> )</condition><then pos:line="519" pos:column="70">
					<expr_stmt><expr><call><name><name pos:line="520" pos:column="41">styler</name><op:operator pos:line="520" pos:column="47">.</op:operator><name pos:line="520" pos:column="48">ColourTo</name></name><argument_list pos:line="520" pos:column="56">( <argument><expr><name pos:line="520" pos:column="58">i</name></expr></argument>, <argument><expr><name pos:line="520" pos:column="61">SCE_NSIS_STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="521" pos:column="9">else <if pos:line="521" pos:column="14">if<condition pos:line="521" pos:column="16">( <expr><name pos:line="521" pos:column="18">bUserVars</name></expr> )</condition><then pos:line="521" pos:column="29">
          <expr_stmt><expr><call><name><name pos:line="522" pos:column="11">styler</name><op:operator pos:line="522" pos:column="17">.</op:operator><name pos:line="522" pos:column="18">ColourTo</name></name><argument_list pos:line="522" pos:column="26">( <argument><expr><name pos:line="522" pos:column="28">i</name></expr></argument>, <argument><expr><name pos:line="522" pos:column="31">SCE_NSIS_STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
        <expr_stmt><expr><name pos:line="523" pos:column="9">bVarInString</name> <op:operator pos:line="523" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="523" pos:column="24">false</lit:literal></expr>;</expr_stmt>
      }</block></then>
      <comment type="line" pos:line="525" pos:column="7">// Covers "${TEST}..."</comment>
      <else pos:line="526" pos:column="7">else <if pos:line="526" pos:column="12">if<condition pos:line="526" pos:column="14">( <expr><name pos:line="526" pos:column="16">bClassicVarInString</name> <op:operator pos:line="526" pos:column="36">&amp;&amp;</op:operator> <name pos:line="526" pos:column="39">cNextChar</name> <op:operator pos:line="526" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="526" pos:column="52">'}'</lit:literal></expr> )</condition><then pos:line="526" pos:column="57">
      <block pos:line="527" pos:column="7">{
        <expr_stmt><expr><call><name><name pos:line="528" pos:column="9">styler</name><op:operator pos:line="528" pos:column="15">.</op:operator><name pos:line="528" pos:column="16">ColourTo</name></name><argument_list pos:line="528" pos:column="24">( <argument><expr><name pos:line="528" pos:column="26">i</name><op:operator pos:line="528" pos:column="27">+</op:operator><lit:literal type="number" pos:line="528" pos:column="28">1</lit:literal></expr></argument>, <argument><expr><name pos:line="528" pos:column="31">SCE_NSIS_STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="529" pos:column="33">bClassicVarInString</name> <op:operator pos:line="529" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="529" pos:column="55">false</lit:literal></expr>;</expr_stmt>
      }</block></then></if></else></if></else></if></else></if>

      <comment type="line" pos:line="532" pos:column="7">// Start of var in string</comment>
			<if pos:line="533" pos:column="25">if<condition pos:line="533" pos:column="27">( <expr><op:operator pos:line="533" pos:column="29">!</op:operator><name pos:line="533" pos:column="30">bIngoreNextDollarSign</name> <op:operator pos:line="533" pos:column="52">&amp;&amp;</op:operator> <name pos:line="533" pos:column="55">cCurrChar</name> <op:operator pos:line="533" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="533" pos:column="68">'$'</lit:literal> <op:operator pos:line="533" pos:column="72">&amp;&amp;</op:operator> <name pos:line="533" pos:column="75">cNextChar</name> <op:operator pos:line="533" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="533" pos:column="88">'{'</lit:literal></expr> )</condition><then pos:line="533" pos:column="93">
			<block pos:line="534" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="535" pos:column="33">styler</name><op:operator pos:line="535" pos:column="39">.</op:operator><name pos:line="535" pos:column="40">ColourTo</name></name><argument_list pos:line="535" pos:column="48">( <argument><expr><name pos:line="535" pos:column="50">i</name><op:operator pos:line="535" pos:column="51">-</op:operator><lit:literal type="number" pos:line="535" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="535" pos:column="55">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="536" pos:column="33">bClassicVarInString</name> <op:operator pos:line="536" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="536" pos:column="55">true</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="537" pos:column="9">bVarInString</name> <op:operator pos:line="537" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="537" pos:column="24">false</lit:literal></expr>;</expr_stmt>
			}</block></then>
      <else pos:line="539" pos:column="7">else <if pos:line="539" pos:column="12">if<condition pos:line="539" pos:column="14">( <expr><op:operator pos:line="539" pos:column="16">!</op:operator><name pos:line="539" pos:column="17">bIngoreNextDollarSign</name> <op:operator pos:line="539" pos:column="39">&amp;&amp;</op:operator> <name pos:line="539" pos:column="42">cCurrChar</name> <op:operator pos:line="539" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="539" pos:column="55">'$'</lit:literal></expr> )</condition><then pos:line="539" pos:column="60">
      <block pos:line="540" pos:column="7">{
        <expr_stmt><expr><call><name><name pos:line="541" pos:column="9">styler</name><op:operator pos:line="541" pos:column="15">.</op:operator><name pos:line="541" pos:column="16">ColourTo</name></name><argument_list pos:line="541" pos:column="24">( <argument><expr><name pos:line="541" pos:column="26">i</name><op:operator pos:line="541" pos:column="27">-</op:operator><lit:literal type="number" pos:line="541" pos:column="28">1</lit:literal></expr></argument>, <argument><expr><name pos:line="541" pos:column="31">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="542" pos:column="9">bVarInString</name> <op:operator pos:line="542" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="542" pos:column="24">true</lit:literal></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="543" pos:column="9">bClassicVarInString</name> <op:operator pos:line="543" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="543" pos:column="31">false</lit:literal></expr>;</expr_stmt>
      }</block></then></if></else></if>
		}</block></then></if></else></if>
	}</block></for>

  <comment type="line" pos:line="548" pos:column="3">// Colourise remaining document</comment>
	<expr_stmt><expr><call><name><name pos:line="549" pos:column="9">styler</name><op:operator pos:line="549" pos:column="15">.</op:operator><name pos:line="549" pos:column="16">ColourTo</name></name><argument_list pos:line="549" pos:column="24">(<argument><expr><name pos:line="549" pos:column="25">nLengthDoc</name><op:operator pos:line="549" pos:column="35">-</op:operator><lit:literal type="number" pos:line="549" pos:column="36">1</lit:literal></expr></argument>,<argument><expr><name pos:line="549" pos:column="38">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="552" pos:column="1">static</specifier> <name pos:line="552" pos:column="8">void</name></type> <name pos:line="552" pos:column="13">FoldNsisDoc</name><parameter_list pos:line="552" pos:column="24">(<param><decl><type><name pos:line="552" pos:column="25">unsigned</name> <name pos:line="552" pos:column="34">int</name></type> <name pos:line="552" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="552" pos:column="48">int</name></type> <name pos:line="552" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="552" pos:column="60">int</name></type></decl></param>, <param><decl><type><name><name pos:line="552" pos:column="65">WordList</name> <type:modifier pos:line="552" pos:column="74">*</type:modifier><index pos:line="552" pos:column="75">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="552" pos:column="79">Accessor</name> <type:modifier pos:line="552" pos:column="88">&amp;</type:modifier></type><name pos:line="552" pos:column="89">styler</name></decl></param>)</parameter_list>
<block pos:line="553" pos:column="1">{
	<comment type="line" pos:line="554" pos:column="9">// No folding enabled, no reason to continue...</comment>
	<if pos:line="555" pos:column="9">if<condition pos:line="555" pos:column="11">( <expr><call><name><name pos:line="555" pos:column="13">styler</name><op:operator pos:line="555" pos:column="19">.</op:operator><name pos:line="555" pos:column="20">GetPropertyInt</name></name><argument_list pos:line="555" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="555" pos:column="35">"fold"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="555" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="555" pos:column="46">0</lit:literal></expr> )</condition><then pos:line="555" pos:column="49">
		<return pos:line="556" pos:column="17">return;</return></then></if>

  <decl_stmt><decl><type><name pos:line="558" pos:column="3">bool</name></type> <name pos:line="558" pos:column="8">foldAtElse</name> <init pos:line="558" pos:column="19">= <expr><call><name><name pos:line="558" pos:column="21">styler</name><op:operator pos:line="558" pos:column="27">.</op:operator><name pos:line="558" pos:column="28">GetPropertyInt</name></name><argument_list pos:line="558" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="558" pos:column="43">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="558" pos:column="59">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="558" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="558" pos:column="65">1</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="559" pos:column="3">bool</name></type> <name pos:line="559" pos:column="8">foldUtilityCmd</name> <init pos:line="559" pos:column="23">= <expr><call><name><name pos:line="559" pos:column="25">styler</name><op:operator pos:line="559" pos:column="31">.</op:operator><name pos:line="559" pos:column="32">GetPropertyInt</name></name><argument_list pos:line="559" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="559" pos:column="47">"nsis.foldutilcmd"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="559" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="559" pos:column="70">==</op:operator> <lit:literal type="number" pos:line="559" pos:column="73">1</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="560" pos:column="3">bool</name></type> <name pos:line="560" pos:column="8">blockComment</name> <init pos:line="560" pos:column="21">= <expr><lit:literal type="boolean" pos:line="560" pos:column="23">false</lit:literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name pos:line="562" pos:column="3">int</name></type> <name pos:line="562" pos:column="7">lineCurrent</name> <init pos:line="562" pos:column="19">= <expr><call><name><name pos:line="562" pos:column="21">styler</name><op:operator pos:line="562" pos:column="27">.</op:operator><name pos:line="562" pos:column="28">GetLine</name></name><argument_list pos:line="562" pos:column="35">(<argument><expr><name pos:line="562" pos:column="36">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="563" pos:column="3">unsigned</name> <name pos:line="563" pos:column="12">int</name></type> <name pos:line="563" pos:column="16">safeStartPos</name> <init pos:line="563" pos:column="29">= <expr><call><name><name pos:line="563" pos:column="31">styler</name><op:operator pos:line="563" pos:column="37">.</op:operator><name pos:line="563" pos:column="38">LineStart</name></name><argument_list pos:line="563" pos:column="47">( <argument><expr><name pos:line="563" pos:column="49">lineCurrent</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name pos:line="565" pos:column="3">bool</name></type> <name pos:line="565" pos:column="8">bArg1</name> <init pos:line="565" pos:column="14">= <expr><lit:literal type="boolean" pos:line="565" pos:column="16">true</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="566" pos:column="3">int</name></type> <name pos:line="566" pos:column="7">nWordStart</name> <init pos:line="566" pos:column="18">= <expr><op:operator pos:line="566" pos:column="20">-</op:operator><lit:literal type="number" pos:line="566" pos:column="21">1</lit:literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name pos:line="568" pos:column="3">int</name></type> <name pos:line="568" pos:column="7">levelCurrent</name> <init pos:line="568" pos:column="20">= <expr><name pos:line="568" pos:column="22">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="569" pos:column="9">if <condition pos:line="569" pos:column="12">(<expr><name pos:line="569" pos:column="13">lineCurrent</name> <op:operator pos:line="569" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="569" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="569" pos:column="29">
		<expr_stmt><expr><name pos:line="570" pos:column="17">levelCurrent</name> <op:operator pos:line="570" pos:column="30">=</op:operator> <call><name><name pos:line="570" pos:column="32">styler</name><op:operator pos:line="570" pos:column="38">.</op:operator><name pos:line="570" pos:column="39">LevelAt</name></name><argument_list pos:line="570" pos:column="46">(<argument><expr><name pos:line="570" pos:column="47">lineCurrent</name><op:operator pos:line="570" pos:column="58">-</op:operator><lit:literal type="number" pos:line="570" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="570" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="570" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="571" pos:column="9">int</name></type> <name pos:line="571" pos:column="13">levelNext</name> <init pos:line="571" pos:column="23">= <expr><name pos:line="571" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="572" pos:column="3">int</name></type> <name pos:line="572" pos:column="7">style</name> <init pos:line="572" pos:column="13">= <expr><call><name><name pos:line="572" pos:column="15">styler</name><op:operator pos:line="572" pos:column="21">.</op:operator><name pos:line="572" pos:column="22">StyleAt</name></name><argument_list pos:line="572" pos:column="29">(<argument><expr><name pos:line="572" pos:column="30">safeStartPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if pos:line="573" pos:column="3">if<condition pos:line="573" pos:column="5">( <expr><name pos:line="573" pos:column="7">style</name> <op:operator pos:line="573" pos:column="13">==</op:operator> <name pos:line="573" pos:column="16">SCE_NSIS_COMMENTBOX</name></expr> )</condition><then pos:line="573" pos:column="37">
  <block pos:line="574" pos:column="3">{
    <if pos:line="575" pos:column="5">if<condition pos:line="575" pos:column="7">( <expr><call><name><name pos:line="575" pos:column="9">styler</name><op:operator pos:line="575" pos:column="15">.</op:operator><name pos:line="575" pos:column="16">SafeGetCharAt</name></name><argument_list pos:line="575" pos:column="29">(<argument><expr><name pos:line="575" pos:column="30">safeStartPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="575" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="575" pos:column="47">'/'</lit:literal> <op:operator pos:line="575" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="575" pos:column="54">styler</name><op:operator pos:line="575" pos:column="60">.</op:operator><name pos:line="575" pos:column="61">SafeGetCharAt</name></name><argument_list pos:line="575" pos:column="74">(<argument><expr><name pos:line="575" pos:column="75">safeStartPos</name><op:operator pos:line="575" pos:column="87">+</op:operator><lit:literal type="number" pos:line="575" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="575" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="575" pos:column="94">'*'</lit:literal></expr> )</condition><then pos:line="575" pos:column="99">
      <expr_stmt><expr><name pos:line="576" pos:column="7">levelNext</name><op:operator pos:line="576" pos:column="16">++</op:operator></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><name pos:line="577" pos:column="5">blockComment</name> <op:operator pos:line="577" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="577" pos:column="20">true</lit:literal></expr>;</expr_stmt>
  }</block></then></if>

  <for pos:line="580" pos:column="3">for (<init><decl><type><name pos:line="580" pos:column="8">unsigned</name> <name pos:line="580" pos:column="17">int</name></type> <name pos:line="580" pos:column="21">i</name> <init pos:line="580" pos:column="23">= <expr><name pos:line="580" pos:column="25">safeStartPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="580" pos:column="39">i</name> <op:operator pos:line="580" pos:column="41">&lt;</op:operator> <name pos:line="580" pos:column="43">startPos</name> <op:operator pos:line="580" pos:column="52">+</op:operator> <name pos:line="580" pos:column="54">length</name></expr>;</condition> <incr><expr><name pos:line="580" pos:column="62">i</name><op:operator pos:line="580" pos:column="63">++</op:operator></expr></incr>)
	<block pos:line="581" pos:column="9">{
    <decl_stmt><decl><type><name pos:line="582" pos:column="5">char</name></type> <name pos:line="582" pos:column="10">chCurr</name> <init pos:line="582" pos:column="17">= <expr><call><name><name pos:line="582" pos:column="19">styler</name><op:operator pos:line="582" pos:column="25">.</op:operator><name pos:line="582" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="582" pos:column="39">(<argument><expr><name pos:line="582" pos:column="40">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name pos:line="583" pos:column="5">style</name> <op:operator pos:line="583" pos:column="11">=</op:operator> <call><name><name pos:line="583" pos:column="13">styler</name><op:operator pos:line="583" pos:column="19">.</op:operator><name pos:line="583" pos:column="20">StyleAt</name></name><argument_list pos:line="583" pos:column="27">(<argument><expr><name pos:line="583" pos:column="28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="584" pos:column="5">if<condition pos:line="584" pos:column="7">( <expr><name pos:line="584" pos:column="9">blockComment</name> <op:operator pos:line="584" pos:column="22">&amp;&amp;</op:operator> <name pos:line="584" pos:column="25">style</name> <op:operator pos:line="584" pos:column="31">!=</op:operator> <name pos:line="584" pos:column="34">SCE_NSIS_COMMENTBOX</name></expr> )</condition><then pos:line="584" pos:column="55">
    <block pos:line="585" pos:column="5">{
      <expr_stmt><expr><name pos:line="586" pos:column="7">levelNext</name><op:operator pos:line="586" pos:column="16">--</op:operator></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="587" pos:column="7">blockComment</name> <op:operator pos:line="587" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="587" pos:column="22">false</lit:literal></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="589" pos:column="5">else <if pos:line="589" pos:column="10">if<condition pos:line="589" pos:column="12">( <expr><op:operator pos:line="589" pos:column="14">!</op:operator><name pos:line="589" pos:column="15">blockComment</name> <op:operator pos:line="589" pos:column="28">&amp;&amp;</op:operator> <name pos:line="589" pos:column="31">style</name> <op:operator pos:line="589" pos:column="37">==</op:operator> <name pos:line="589" pos:column="40">SCE_NSIS_COMMENTBOX</name></expr> )</condition><then pos:line="589" pos:column="61">
    <block pos:line="590" pos:column="5">{
      <expr_stmt><expr><name pos:line="591" pos:column="7">levelNext</name><op:operator pos:line="591" pos:column="16">++</op:operator></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="592" pos:column="7">blockComment</name> <op:operator pos:line="592" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="592" pos:column="22">true</lit:literal></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <if pos:line="595" pos:column="5">if<condition pos:line="595" pos:column="7">( <expr><name pos:line="595" pos:column="9">bArg1</name> <op:operator pos:line="595" pos:column="15">&amp;&amp;</op:operator> <op:operator pos:line="595" pos:column="18">!</op:operator><name pos:line="595" pos:column="19">blockComment</name></expr>)</condition><then pos:line="595" pos:column="32">
    <block pos:line="596" pos:column="5">{
      <if pos:line="597" pos:column="7">if<condition pos:line="597" pos:column="9">( <expr><name pos:line="597" pos:column="11">nWordStart</name> <op:operator pos:line="597" pos:column="22">==</op:operator> <op:operator pos:line="597" pos:column="25">-</op:operator><lit:literal type="number" pos:line="597" pos:column="26">1</lit:literal> <op:operator pos:line="597" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="597" pos:column="31">(</op:operator><call><name pos:line="597" pos:column="32">isNsisLetter</name><argument_list pos:line="597" pos:column="44">(<argument><expr><name pos:line="597" pos:column="45">chCurr</name></expr></argument>)</argument_list></call> <op:operator pos:line="597" pos:column="53">||</op:operator> <name pos:line="597" pos:column="56">chCurr</name> <op:operator pos:line="597" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="597" pos:column="66">'!'</lit:literal><op:operator pos:line="597" pos:column="69">)</op:operator></expr> )</condition><then pos:line="597" pos:column="72">
      <block pos:line="598" pos:column="7">{
        <expr_stmt><expr><name pos:line="599" pos:column="9">nWordStart</name> <op:operator pos:line="599" pos:column="20">=</op:operator> <name pos:line="599" pos:column="22">i</name></expr>;</expr_stmt>
      }</block></then>
      <else pos:line="601" pos:column="7">else <if pos:line="601" pos:column="12">if<condition pos:line="601" pos:column="14">( <expr><call><name pos:line="601" pos:column="16">isNsisLetter</name><argument_list pos:line="601" pos:column="28">(<argument><expr><name pos:line="601" pos:column="29">chCurr</name></expr></argument>)</argument_list></call> <op:operator pos:line="601" pos:column="37">==</op:operator> <lit:literal type="boolean" pos:line="601" pos:column="40">false</lit:literal> <op:operator pos:line="601" pos:column="46">&amp;&amp;</op:operator> <name pos:line="601" pos:column="49">nWordStart</name> <op:operator pos:line="601" pos:column="60">&gt;</op:operator> <op:operator pos:line="601" pos:column="62">-</op:operator><lit:literal type="number" pos:line="601" pos:column="63">1</lit:literal></expr> )</condition><then pos:line="601" pos:column="66">
      <block pos:line="602" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="603" pos:column="9">int</name></type> <name pos:line="603" pos:column="13">newLevel</name> <init pos:line="603" pos:column="22">= <expr><call><name pos:line="603" pos:column="24">calculateFoldNsis</name><argument_list pos:line="603" pos:column="41">( <argument><expr><name pos:line="603" pos:column="43">nWordStart</name></expr></argument>, <argument><expr><name pos:line="603" pos:column="55">i</name><op:operator pos:line="603" pos:column="56">-</op:operator><lit:literal type="number" pos:line="603" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="603" pos:column="60">levelNext</name></expr></argument>, <argument><expr><name pos:line="603" pos:column="71">styler</name></expr></argument>, <argument><expr><name pos:line="603" pos:column="79">foldAtElse</name></expr></argument>, <argument><expr><name pos:line="603" pos:column="91">foldUtilityCmd</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <if pos:line="605" pos:column="9">if<condition pos:line="605" pos:column="11">( <expr><name pos:line="605" pos:column="13">newLevel</name> <op:operator pos:line="605" pos:column="22">==</op:operator> <name pos:line="605" pos:column="25">levelNext</name></expr> )</condition><then pos:line="605" pos:column="36">
        <block pos:line="606" pos:column="9">{
          <if pos:line="607" pos:column="11">if<condition pos:line="607" pos:column="13">( <expr><name pos:line="607" pos:column="15">foldAtElse</name> <op:operator pos:line="607" pos:column="26">&amp;&amp;</op:operator> <name pos:line="607" pos:column="29">foldUtilityCmd</name></expr> )</condition><then pos:line="607" pos:column="45">
          <block pos:line="608" pos:column="11">{
            <if pos:line="609" pos:column="13">if<condition pos:line="609" pos:column="15">( <expr><call><name pos:line="609" pos:column="17">NsisNextLineHasElse</name><argument_list pos:line="609" pos:column="36">(<argument><expr><name pos:line="609" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="609" pos:column="40">startPos</name> <op:operator pos:line="609" pos:column="49">+</op:operator> <name pos:line="609" pos:column="51">length</name></expr></argument>, <argument><expr><name pos:line="609" pos:column="59">styler</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="609" pos:column="68">
              <expr_stmt><expr><name pos:line="610" pos:column="15">levelNext</name><op:operator pos:line="610" pos:column="24">--</op:operator></expr>;</expr_stmt></then></if>
          }</block></then></if>
        }</block></then>
        <else pos:line="613" pos:column="9">else
          <expr_stmt><expr><name pos:line="614" pos:column="11">levelNext</name> <op:operator pos:line="614" pos:column="21">=</op:operator> <name pos:line="614" pos:column="23">newLevel</name></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><name pos:line="615" pos:column="9">bArg1</name> <op:operator pos:line="615" pos:column="15">=</op:operator> <lit:literal type="boolean" pos:line="615" pos:column="17">false</lit:literal></expr>;</expr_stmt>
      }</block></then></if></else></if>
    }</block></then></if>

    <if pos:line="619" pos:column="5">if<condition pos:line="619" pos:column="7">( <expr><name pos:line="619" pos:column="9">chCurr</name> <op:operator pos:line="619" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="619" pos:column="19">'\n'</lit:literal></expr> )</condition><then pos:line="619" pos:column="25">
    <block pos:line="620" pos:column="5">{
      <if pos:line="621" pos:column="7">if<condition pos:line="621" pos:column="9">( <expr><name pos:line="621" pos:column="11">bArg1</name> <op:operator pos:line="621" pos:column="17">&amp;&amp;</op:operator> <name pos:line="621" pos:column="20">foldAtElse</name> <op:operator pos:line="621" pos:column="31">&amp;&amp;</op:operator> <name pos:line="621" pos:column="34">foldUtilityCmd</name> <op:operator pos:line="621" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="621" pos:column="52">!</op:operator><name pos:line="621" pos:column="53">blockComment</name></expr> )</condition><then pos:line="621" pos:column="67">
      <block pos:line="622" pos:column="7">{
        <if pos:line="623" pos:column="9">if<condition pos:line="623" pos:column="11">( <expr><call><name pos:line="623" pos:column="13">NsisNextLineHasElse</name><argument_list pos:line="623" pos:column="32">(<argument><expr><name pos:line="623" pos:column="33">i</name></expr></argument>, <argument><expr><name pos:line="623" pos:column="36">startPos</name> <op:operator pos:line="623" pos:column="45">+</op:operator> <name pos:line="623" pos:column="47">length</name></expr></argument>, <argument><expr><name pos:line="623" pos:column="55">styler</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="623" pos:column="64">
          <expr_stmt><expr><name pos:line="624" pos:column="11">levelNext</name><op:operator pos:line="624" pos:column="20">--</op:operator></expr>;</expr_stmt></then></if>
      }</block></then></if>

      <comment type="line" pos:line="627" pos:column="7">// If we are on a new line...</comment>
      <decl_stmt><decl><type><name pos:line="628" pos:column="7">int</name></type> <name pos:line="628" pos:column="11">levelUse</name> <init pos:line="628" pos:column="20">= <expr><name pos:line="628" pos:column="22">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="629" pos:column="25">int</name></type> <name pos:line="629" pos:column="29">lev</name> <init pos:line="629" pos:column="33">= <expr><name pos:line="629" pos:column="35">levelUse</name> <op:operator pos:line="629" pos:column="44">|</op:operator> <name pos:line="629" pos:column="46">levelNext</name> <op:operator pos:line="629" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="629" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
      <if pos:line="630" pos:column="7">if <condition pos:line="630" pos:column="10">(<expr><name pos:line="630" pos:column="11">levelUse</name> <op:operator pos:line="630" pos:column="20">&lt;</op:operator> <name pos:line="630" pos:column="22">levelNext</name></expr> )</condition><then pos:line="630" pos:column="33">
				<expr_stmt><expr><name pos:line="631" pos:column="33">lev</name> <op:operator pos:line="631" pos:column="37">|=</op:operator> <name pos:line="631" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="632" pos:column="25">if <condition pos:line="632" pos:column="28">(<expr><name pos:line="632" pos:column="29">lev</name> <op:operator pos:line="632" pos:column="33">!=</op:operator> <call><name><name pos:line="632" pos:column="36">styler</name><op:operator pos:line="632" pos:column="42">.</op:operator><name pos:line="632" pos:column="43">LevelAt</name></name><argument_list pos:line="632" pos:column="50">(<argument><expr><name pos:line="632" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="632" pos:column="64">
				<expr_stmt><expr><call><name><name pos:line="633" pos:column="33">styler</name><op:operator pos:line="633" pos:column="39">.</op:operator><name pos:line="633" pos:column="40">SetLevel</name></name><argument_list pos:line="633" pos:column="48">(<argument><expr><name pos:line="633" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="633" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><name pos:line="635" pos:column="25">lineCurrent</name><op:operator pos:line="635" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="636" pos:column="25">levelCurrent</name> <op:operator pos:line="636" pos:column="38">=</op:operator> <name pos:line="636" pos:column="40">levelNext</name></expr>;</expr_stmt>
      <expr_stmt><expr><name pos:line="637" pos:column="7">bArg1</name> <op:operator pos:line="637" pos:column="13">=</op:operator> <lit:literal type="boolean" pos:line="637" pos:column="15">true</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="637" pos:column="21">// New line, lets look at first argument again</comment>
      <expr_stmt><expr><name pos:line="638" pos:column="7">nWordStart</name> <op:operator pos:line="638" pos:column="18">=</op:operator> <op:operator pos:line="638" pos:column="20">-</op:operator><lit:literal type="number" pos:line="638" pos:column="21">1</lit:literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

	<decl_stmt><decl><type><name pos:line="642" pos:column="9">int</name></type> <name pos:line="642" pos:column="13">levelUse</name> <init pos:line="642" pos:column="22">= <expr><name pos:line="642" pos:column="24">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="643" pos:column="9">int</name></type> <name pos:line="643" pos:column="13">lev</name> <init pos:line="643" pos:column="17">= <expr><name pos:line="643" pos:column="19">levelUse</name> <op:operator pos:line="643" pos:column="28">|</op:operator> <name pos:line="643" pos:column="30">levelNext</name> <op:operator pos:line="643" pos:column="40">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="643" pos:column="43">16</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="644" pos:column="9">if <condition pos:line="644" pos:column="12">(<expr><name pos:line="644" pos:column="13">levelUse</name> <op:operator pos:line="644" pos:column="22">&lt;</op:operator> <name pos:line="644" pos:column="24">levelNext</name></expr>)</condition><then pos:line="644" pos:column="34">
		<expr_stmt><expr><name pos:line="645" pos:column="17">lev</name> <op:operator pos:line="645" pos:column="21">|=</op:operator> <name pos:line="645" pos:column="24">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
	<if pos:line="646" pos:column="9">if <condition pos:line="646" pos:column="12">(<expr><name pos:line="646" pos:column="13">lev</name> <op:operator pos:line="646" pos:column="17">!=</op:operator> <call><name><name pos:line="646" pos:column="20">styler</name><op:operator pos:line="646" pos:column="26">.</op:operator><name pos:line="646" pos:column="27">LevelAt</name></name><argument_list pos:line="646" pos:column="34">(<argument><expr><name pos:line="646" pos:column="35">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="646" pos:column="48">
		<expr_stmt><expr><call><name><name pos:line="647" pos:column="17">styler</name><op:operator pos:line="647" pos:column="23">.</op:operator><name pos:line="647" pos:column="24">SetLevel</name></name><argument_list pos:line="647" pos:column="32">(<argument><expr><name pos:line="647" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="647" pos:column="46">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="650" pos:column="1">static</specifier> <specifier pos:line="650" pos:column="8">const</specifier> <name pos:line="650" pos:column="14">char</name> <type:modifier pos:line="650" pos:column="19">*</type:modifier> <specifier pos:line="650" pos:column="21">const</specifier></type> <name><name pos:line="650" pos:column="27">nsisWordLists</name><index pos:line="650" pos:column="40">[]</index></name> <init pos:line="650" pos:column="43">= <expr><block pos:line="650" pos:column="45">{
	<expr><lit:literal type="string" pos:line="651" pos:column="9">"Functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="652" pos:column="9">"Variables"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="653" pos:column="9">"Lables"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="654" pos:column="9">"UserDefined"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="655" pos:column="9">0</lit:literal></expr>, }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name pos:line="658" pos:column="1">LexerModule</name></type> <name pos:line="658" pos:column="13">lmNsis</name><argument_list pos:line="658" pos:column="19">(<argument><expr><name pos:line="658" pos:column="20">SCLEX_NSIS</name></expr></argument>, <argument><expr><name pos:line="658" pos:column="32">ColouriseNsisDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="658" pos:column="50">"nsis"</lit:literal></expr></argument>, <argument><expr><name pos:line="658" pos:column="58">FoldNsisDoc</name></expr></argument>, <argument><expr><name pos:line="658" pos:column="71">nsisWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
