<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\Decoration.cxx" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/** @file Decoration.cxx
 ** Visual elements added over text.
 **/</comment>
<comment type="line" pos:line="4" pos:column="1">// Copyright 1998-2007 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="5" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Decoration.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef</cpp:directive> <name pos:line="20" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="21" pos:column="1">using namespace <name pos:line="21" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="24" pos:column="1">Decoration</name><op:operator pos:line="24" pos:column="11">::</op:operator><name pos:line="24" pos:column="13">Decoration</name></name><parameter_list pos:line="24" pos:column="23">(<param><decl><type><name pos:line="24" pos:column="24">int</name></type> <name pos:line="24" pos:column="28">indicator_</name></decl></param>)</parameter_list> <member_list pos:line="24" pos:column="40">: <call><name pos:line="24" pos:column="42">next</name><argument_list pos:line="24" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="24" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="24" pos:column="49">,</op:operator> <call><name pos:line="24" pos:column="51">indicator</name><argument_list pos:line="24" pos:column="60">(<argument><expr><name pos:line="24" pos:column="61">indicator_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="24" pos:column="73">{
}</block></constructor>

<destructor><name><name pos:line="27" pos:column="1">Decoration</name><op:operator pos:line="27" pos:column="11">::</op:operator>~<name pos:line="27" pos:column="14">Decoration</name></name><parameter_list pos:line="27" pos:column="24">()</parameter_list> <block pos:line="27" pos:column="27">{
}</block></destructor>

<function><type><name pos:line="30" pos:column="1">bool</name></type> <name><name pos:line="30" pos:column="6">Decoration</name><op:operator pos:line="30" pos:column="16">::</op:operator><name pos:line="30" pos:column="18">Empty</name></name><parameter_list pos:line="30" pos:column="23">()</parameter_list> <block pos:line="30" pos:column="26">{
	<return pos:line="31" pos:column="9">return <expr><call><name><name pos:line="31" pos:column="16">rs</name><op:operator pos:line="31" pos:column="18">.</op:operator><name pos:line="31" pos:column="19">Runs</name></name><argument_list pos:line="31" pos:column="23">()</argument_list></call> <op:operator pos:line="31" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="31" pos:column="29">1</lit:literal></expr>;</return>
}</block></function>

<constructor><name><name pos:line="34" pos:column="1">DecorationList</name><op:operator pos:line="34" pos:column="15">::</op:operator><name pos:line="34" pos:column="17">DecorationList</name></name><parameter_list pos:line="34" pos:column="31">()</parameter_list> <member_list pos:line="34" pos:column="34">: <call><name pos:line="34" pos:column="36">currentIndicator</name><argument_list pos:line="34" pos:column="52">(<argument><expr><lit:literal type="number" pos:line="34" pos:column="53">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="34" pos:column="55">,</op:operator> <call><name pos:line="34" pos:column="57">currentValue</name><argument_list pos:line="34" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="34" pos:column="70">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="34" pos:column="72">,</op:operator> <call><name pos:line="34" pos:column="74">current</name><argument_list pos:line="34" pos:column="81">(<argument><expr><lit:literal type="number" pos:line="34" pos:column="82">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="34" pos:column="84">,</op:operator>
	<call><name pos:line="35" pos:column="9">lengthDocument</name><argument_list pos:line="35" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="35" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="26">,</op:operator> <call><name pos:line="35" pos:column="28">root</name><argument_list pos:line="35" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="35" pos:column="33">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="35" pos:column="35">,</op:operator> <call><name pos:line="35" pos:column="37">clickNotified</name><argument_list pos:line="35" pos:column="50">(<argument><expr><lit:literal type="boolean" pos:line="35" pos:column="51">false</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="35" pos:column="58">{
}</block></constructor>

<destructor><name><name pos:line="38" pos:column="1">DecorationList</name><op:operator pos:line="38" pos:column="15">::</op:operator>~<name pos:line="38" pos:column="18">DecorationList</name></name><parameter_list pos:line="38" pos:column="32">()</parameter_list> <block pos:line="38" pos:column="35">{
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">Decoration</name> <type:modifier pos:line="39" pos:column="20">*</type:modifier></type><name pos:line="39" pos:column="21">deco</name> <init pos:line="39" pos:column="26">= <expr><name pos:line="39" pos:column="28">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="40" pos:column="9">while <condition pos:line="40" pos:column="15">(<expr><name pos:line="40" pos:column="16">deco</name></expr>)</condition> <block pos:line="40" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="41" pos:column="17">Decoration</name> <type:modifier pos:line="41" pos:column="28">*</type:modifier></type><name pos:line="41" pos:column="29">decoNext</name> <init pos:line="41" pos:column="38">= <expr><name><name pos:line="41" pos:column="40">deco</name><op:operator pos:line="41" pos:column="44">-&gt;</op:operator><name pos:line="41" pos:column="46">next</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><op:operator pos:line="42" pos:column="17">delete</op:operator> <name pos:line="42" pos:column="24">deco</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">deco</name> <op:operator pos:line="43" pos:column="22">=</op:operator> <name pos:line="43" pos:column="24">decoNext</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name pos:line="45" pos:column="9">root</name> <op:operator pos:line="45" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="45" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="46" pos:column="9">current</name> <op:operator pos:line="46" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="46" pos:column="19">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="49" pos:column="1">Decoration</name> <type:modifier pos:line="49" pos:column="12">*</type:modifier></type><name><name pos:line="49" pos:column="13">DecorationList</name><op:operator pos:line="49" pos:column="27">::</op:operator><name pos:line="49" pos:column="29">DecorationFromIndicator</name></name><parameter_list pos:line="49" pos:column="52">(<param><decl><type><name pos:line="49" pos:column="53">int</name></type> <name pos:line="49" pos:column="57">indicator</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="68">{
	<for pos:line="50" pos:column="9">for (<init><decl><type><name pos:line="50" pos:column="14">Decoration</name> <type:modifier pos:line="50" pos:column="25">*</type:modifier></type><name pos:line="50" pos:column="26">deco</name><init pos:line="50" pos:column="30">=<expr><name pos:line="50" pos:column="31">root</name></expr></init></decl>;</init> <condition><expr><name pos:line="50" pos:column="37">deco</name></expr>;</condition> <incr><expr><name pos:line="50" pos:column="43">deco</name> <op:operator pos:line="50" pos:column="48">=</op:operator> <name><name pos:line="50" pos:column="50">deco</name><op:operator pos:line="50" pos:column="54">-&gt;</op:operator><name pos:line="50" pos:column="56">next</name></name></expr></incr>) <block pos:line="50" pos:column="62">{
		<if pos:line="51" pos:column="17">if <condition pos:line="51" pos:column="20">(<expr><name><name pos:line="51" pos:column="21">deco</name><op:operator pos:line="51" pos:column="25">-&gt;</op:operator><name pos:line="51" pos:column="27">indicator</name></name> <op:operator pos:line="51" pos:column="37">==</op:operator> <name pos:line="51" pos:column="40">indicator</name></expr>)</condition><then pos:line="51" pos:column="50"> <block pos:line="51" pos:column="51">{
			<return pos:line="52" pos:column="25">return <expr><name pos:line="52" pos:column="32">deco</name></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="55" pos:column="9">return <expr><lit:literal type="number" pos:line="55" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="58" pos:column="1">Decoration</name> <type:modifier pos:line="58" pos:column="12">*</type:modifier></type><name><name pos:line="58" pos:column="13">DecorationList</name><op:operator pos:line="58" pos:column="27">::</op:operator><name pos:line="58" pos:column="29">Create</name></name><parameter_list pos:line="58" pos:column="35">(<param><decl><type><name pos:line="58" pos:column="36">int</name></type> <name pos:line="58" pos:column="40">indicator</name></decl></param>, <param><decl><type><name pos:line="58" pos:column="51">int</name></type> <name pos:line="58" pos:column="55">length</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="63">{
	<expr_stmt><expr><name pos:line="59" pos:column="9">currentIndicator</name> <op:operator pos:line="59" pos:column="26">=</op:operator> <name pos:line="59" pos:column="28">indicator</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">Decoration</name> <type:modifier pos:line="60" pos:column="20">*</type:modifier></type><name pos:line="60" pos:column="21">decoNew</name> <init pos:line="60" pos:column="29">= <expr><op:operator pos:line="60" pos:column="31">new</op:operator> <call><name pos:line="60" pos:column="35">Decoration</name><argument_list pos:line="60" pos:column="45">(<argument><expr><name pos:line="60" pos:column="46">indicator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="61" pos:column="9">decoNew</name><op:operator pos:line="61" pos:column="16">-&gt;</op:operator><name pos:line="61" pos:column="18">rs</name><op:operator pos:line="61" pos:column="20">.</op:operator><name pos:line="61" pos:column="21">InsertSpace</name></name><argument_list pos:line="61" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="36">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="63" pos:column="9">Decoration</name> <type:modifier pos:line="63" pos:column="20">*</type:modifier></type><name pos:line="63" pos:column="21">decoPrev</name> <init pos:line="63" pos:column="30">= <expr><lit:literal type="number" pos:line="63" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">Decoration</name> <type:modifier pos:line="64" pos:column="20">*</type:modifier></type><name pos:line="64" pos:column="21">deco</name> <init pos:line="64" pos:column="26">= <expr><name pos:line="64" pos:column="28">root</name></expr></init></decl>;</decl_stmt>

	<while pos:line="66" pos:column="9">while <condition pos:line="66" pos:column="15">(<expr><name pos:line="66" pos:column="16">deco</name> <op:operator pos:line="66" pos:column="21">&amp;&amp;</op:operator> <op:operator pos:line="66" pos:column="24">(</op:operator><name><name pos:line="66" pos:column="25">deco</name><op:operator pos:line="66" pos:column="29">-&gt;</op:operator><name pos:line="66" pos:column="31">indicator</name></name> <op:operator pos:line="66" pos:column="41">&lt;</op:operator> <name pos:line="66" pos:column="43">indicator</name><op:operator pos:line="66" pos:column="52">)</op:operator></expr>)</condition> <block pos:line="66" pos:column="55">{
		<expr_stmt><expr><name pos:line="67" pos:column="17">decoPrev</name> <op:operator pos:line="67" pos:column="26">=</op:operator> <name pos:line="67" pos:column="28">deco</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="68" pos:column="17">deco</name> <op:operator pos:line="68" pos:column="22">=</op:operator> <name><name pos:line="68" pos:column="24">deco</name><op:operator pos:line="68" pos:column="28">-&gt;</op:operator><name pos:line="68" pos:column="30">next</name></name></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">decoPrev</name> <op:operator pos:line="70" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="70" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="70" pos:column="27"> <block pos:line="70" pos:column="28">{
		<expr_stmt><expr><name><name pos:line="71" pos:column="17">decoNew</name><op:operator pos:line="71" pos:column="24">-&gt;</op:operator><name pos:line="71" pos:column="26">next</name></name> <op:operator pos:line="71" pos:column="31">=</op:operator> <name pos:line="71" pos:column="33">root</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="72" pos:column="17">root</name> <op:operator pos:line="72" pos:column="22">=</op:operator> <name pos:line="72" pos:column="24">decoNew</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="73" pos:column="11">else <block pos:line="73" pos:column="16">{
		<expr_stmt><expr><name><name pos:line="74" pos:column="17">decoNew</name><op:operator pos:line="74" pos:column="24">-&gt;</op:operator><name pos:line="74" pos:column="26">next</name></name> <op:operator pos:line="74" pos:column="31">=</op:operator> <name pos:line="74" pos:column="33">deco</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="75" pos:column="17">decoPrev</name><op:operator pos:line="75" pos:column="25">-&gt;</op:operator><name pos:line="75" pos:column="27">next</name></name> <op:operator pos:line="75" pos:column="32">=</op:operator> <name pos:line="75" pos:column="34">decoNew</name></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="77" pos:column="9">return <expr><name pos:line="77" pos:column="16">decoNew</name></expr>;</return>
}</block></function>

<function><type><name pos:line="80" pos:column="1">void</name></type> <name><name pos:line="80" pos:column="6">DecorationList</name><op:operator pos:line="80" pos:column="20">::</op:operator><name pos:line="80" pos:column="22">Delete</name></name><parameter_list pos:line="80" pos:column="28">(<param><decl><type><name pos:line="80" pos:column="29">int</name></type> <name pos:line="80" pos:column="33">indicator</name></decl></param>)</parameter_list> <block pos:line="80" pos:column="44">{
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">Decoration</name> <type:modifier pos:line="81" pos:column="20">*</type:modifier></type><name pos:line="81" pos:column="21">decoToDelete</name> <init pos:line="81" pos:column="34">= <expr><lit:literal type="number" pos:line="81" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name pos:line="82" pos:column="13">root</name></expr>)</condition><then pos:line="82" pos:column="18"> <block pos:line="82" pos:column="19">{
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name><name pos:line="83" pos:column="21">root</name><op:operator pos:line="83" pos:column="25">-&gt;</op:operator><name pos:line="83" pos:column="27">indicator</name></name> <op:operator pos:line="83" pos:column="37">==</op:operator> <name pos:line="83" pos:column="40">indicator</name></expr>)</condition><then pos:line="83" pos:column="50"> <block pos:line="83" pos:column="51">{
			<expr_stmt><expr><name pos:line="84" pos:column="25">decoToDelete</name> <op:operator pos:line="84" pos:column="38">=</op:operator> <name pos:line="84" pos:column="40">root</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="85" pos:column="25">root</name> <op:operator pos:line="85" pos:column="30">=</op:operator> <name><name pos:line="85" pos:column="32">root</name><op:operator pos:line="85" pos:column="36">-&gt;</op:operator><name pos:line="85" pos:column="38">next</name></name></expr>;</expr_stmt>
		}</block></then> <else pos:line="86" pos:column="19">else <block pos:line="86" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="87" pos:column="25">Decoration</name> <type:modifier pos:line="87" pos:column="36">*</type:modifier></type><name pos:line="87" pos:column="37">deco</name><init pos:line="87" pos:column="41">=<expr><name pos:line="87" pos:column="42">root</name></expr></init></decl>;</decl_stmt>
			<while pos:line="88" pos:column="25">while <condition pos:line="88" pos:column="31">(<expr><name><name pos:line="88" pos:column="32">deco</name><op:operator pos:line="88" pos:column="36">-&gt;</op:operator><name pos:line="88" pos:column="38">next</name></name> <op:operator pos:line="88" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="46">!</op:operator><name pos:line="88" pos:column="47">decoToDelete</name></expr>)</condition> <block pos:line="88" pos:column="61">{
				<if pos:line="89" pos:column="33">if <condition pos:line="89" pos:column="36">(<expr><name><name pos:line="89" pos:column="37">deco</name><op:operator pos:line="89" pos:column="41">-&gt;</op:operator><name pos:line="89" pos:column="43">next</name></name> <op:operator pos:line="89" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="89" pos:column="51">deco</name><op:operator pos:line="89" pos:column="55">-&gt;</op:operator><name pos:line="89" pos:column="57">next</name><op:operator pos:line="89" pos:column="61">-&gt;</op:operator><name pos:line="89" pos:column="63">indicator</name></name> <op:operator pos:line="89" pos:column="73">==</op:operator> <name pos:line="89" pos:column="76">indicator</name></expr>)</condition><then pos:line="89" pos:column="86"> <block pos:line="89" pos:column="87">{
					<expr_stmt><expr><name pos:line="90" pos:column="41">decoToDelete</name> <op:operator pos:line="90" pos:column="54">=</op:operator> <name><name pos:line="90" pos:column="56">deco</name><op:operator pos:line="90" pos:column="60">-&gt;</op:operator><name pos:line="90" pos:column="62">next</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="91" pos:column="41">deco</name><op:operator pos:line="91" pos:column="45">-&gt;</op:operator><name pos:line="91" pos:column="47">next</name></name> <op:operator pos:line="91" pos:column="52">=</op:operator> <name><name pos:line="91" pos:column="54">decoToDelete</name><op:operator pos:line="91" pos:column="66">-&gt;</op:operator><name pos:line="91" pos:column="68">next</name></name></expr>;</expr_stmt>
				}</block></then> <else pos:line="92" pos:column="35">else <block pos:line="92" pos:column="40">{
					<expr_stmt><expr><name pos:line="93" pos:column="41">deco</name> <op:operator pos:line="93" pos:column="46">=</op:operator> <name><name pos:line="93" pos:column="48">deco</name><op:operator pos:line="93" pos:column="52">-&gt;</op:operator><name pos:line="93" pos:column="54">next</name></name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></while>
		}</block></else></if>
	}</block></then></if>
	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">decoToDelete</name></expr>)</condition><then pos:line="98" pos:column="26"> <block pos:line="98" pos:column="27">{
		<expr_stmt><expr><op:operator pos:line="99" pos:column="17">delete</op:operator> <name pos:line="99" pos:column="24">decoToDelete</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="100" pos:column="17">current</name> <op:operator pos:line="100" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="100" pos:column="27">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="104" pos:column="1">void</name></type> <name><name pos:line="104" pos:column="6">DecorationList</name><op:operator pos:line="104" pos:column="20">::</op:operator><name pos:line="104" pos:column="22">SetCurrentIndicator</name></name><parameter_list pos:line="104" pos:column="41">(<param><decl><type><name pos:line="104" pos:column="42">int</name></type> <name pos:line="104" pos:column="46">indicator</name></decl></param>)</parameter_list> <block pos:line="104" pos:column="57">{
	<expr_stmt><expr><name pos:line="105" pos:column="9">currentIndicator</name> <op:operator pos:line="105" pos:column="26">=</op:operator> <name pos:line="105" pos:column="28">indicator</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="106" pos:column="9">current</name> <op:operator pos:line="106" pos:column="17">=</op:operator> <call><name pos:line="106" pos:column="19">DecorationFromIndicator</name><argument_list pos:line="106" pos:column="42">(<argument><expr><name pos:line="106" pos:column="43">indicator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="107" pos:column="9">currentValue</name> <op:operator pos:line="107" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="107" pos:column="24">1</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="110" pos:column="1">void</name></type> <name><name pos:line="110" pos:column="6">DecorationList</name><op:operator pos:line="110" pos:column="20">::</op:operator><name pos:line="110" pos:column="22">SetCurrentValue</name></name><parameter_list pos:line="110" pos:column="37">(<param><decl><type><name pos:line="110" pos:column="38">int</name></type> <name pos:line="110" pos:column="42">value</name></decl></param>)</parameter_list> <block pos:line="110" pos:column="49">{
	<expr_stmt><expr><name pos:line="111" pos:column="9">currentValue</name> <op:operator pos:line="111" pos:column="22">=</op:operator> <name pos:line="111" pos:column="24">value</name> <op:operator pos:line="111" pos:column="30">?</op:operator> <name pos:line="111" pos:column="32">value</name> <op:operator pos:line="111" pos:column="38">:</op:operator> <lit:literal type="number" pos:line="111" pos:column="40">1</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="114" pos:column="1">bool</name></type> <name><name pos:line="114" pos:column="6">DecorationList</name><op:operator pos:line="114" pos:column="20">::</op:operator><name pos:line="114" pos:column="22">FillRange</name></name><parameter_list pos:line="114" pos:column="31">(<param><decl><type><name pos:line="114" pos:column="32">int</name> <type:modifier pos:line="114" pos:column="36">&amp;</type:modifier></type><name pos:line="114" pos:column="37">position</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="47">int</name></type> <name pos:line="114" pos:column="51">value</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="58">int</name> <type:modifier pos:line="114" pos:column="62">&amp;</type:modifier></type><name pos:line="114" pos:column="63">fillLength</name></decl></param>)</parameter_list> <block pos:line="114" pos:column="75">{
	<if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">(<expr><op:operator pos:line="115" pos:column="13">!</op:operator><name pos:line="115" pos:column="14">current</name></expr>)</condition><then pos:line="115" pos:column="22"> <block pos:line="115" pos:column="23">{
		<expr_stmt><expr><name pos:line="116" pos:column="17">current</name> <op:operator pos:line="116" pos:column="25">=</op:operator> <call><name pos:line="116" pos:column="27">DecorationFromIndicator</name><argument_list pos:line="116" pos:column="50">(<argument><expr><name pos:line="116" pos:column="51">currentIndicator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="117" pos:column="17">if <condition pos:line="117" pos:column="20">(<expr><op:operator pos:line="117" pos:column="21">!</op:operator><name pos:line="117" pos:column="22">current</name></expr>)</condition><then pos:line="117" pos:column="30"> <block pos:line="117" pos:column="31">{
			<expr_stmt><expr><name pos:line="118" pos:column="25">current</name> <op:operator pos:line="118" pos:column="33">=</op:operator> <call><name pos:line="118" pos:column="35">Create</name><argument_list pos:line="118" pos:column="41">(<argument><expr><name pos:line="118" pos:column="42">currentIndicator</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="60">lengthDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="121" pos:column="9">bool</name></type> <name pos:line="121" pos:column="14">changed</name> <init pos:line="121" pos:column="22">= <expr><call><name><name pos:line="121" pos:column="24">current</name><op:operator pos:line="121" pos:column="31">-&gt;</op:operator><name pos:line="121" pos:column="33">rs</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">FillRange</name></name><argument_list pos:line="121" pos:column="45">(<argument><expr><name pos:line="121" pos:column="46">position</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="56">value</name></expr></argument>, <argument><expr><name pos:line="121" pos:column="63">fillLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><call><name><name pos:line="122" pos:column="13">current</name><op:operator pos:line="122" pos:column="20">-&gt;</op:operator><name pos:line="122" pos:column="22">Empty</name></name><argument_list pos:line="122" pos:column="27">()</argument_list></call></expr>)</condition><then pos:line="122" pos:column="30"> <block pos:line="122" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="123" pos:column="17">Delete</name><argument_list pos:line="123" pos:column="23">(<argument><expr><name pos:line="123" pos:column="24">currentIndicator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="125" pos:column="9">return <expr><name pos:line="125" pos:column="16">changed</name></expr>;</return>
}</block></function>

<function><type><name pos:line="128" pos:column="1">void</name></type> <name><name pos:line="128" pos:column="6">DecorationList</name><op:operator pos:line="128" pos:column="20">::</op:operator><name pos:line="128" pos:column="22">InsertSpace</name></name><parameter_list pos:line="128" pos:column="33">(<param><decl><type><name pos:line="128" pos:column="34">int</name></type> <name pos:line="128" pos:column="38">position</name></decl></param>, <param><decl><type><name pos:line="128" pos:column="48">int</name></type> <name pos:line="128" pos:column="52">insertLength</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="66">{
	<expr_stmt><expr><name pos:line="129" pos:column="9">lengthDocument</name> <op:operator pos:line="129" pos:column="24">+=</op:operator> <name pos:line="129" pos:column="27">insertLength</name></expr>;</expr_stmt>
	<for pos:line="130" pos:column="9">for (<init><decl><type><name pos:line="130" pos:column="14">Decoration</name> <type:modifier pos:line="130" pos:column="25">*</type:modifier></type><name pos:line="130" pos:column="26">deco</name><init pos:line="130" pos:column="30">=<expr><name pos:line="130" pos:column="31">root</name></expr></init></decl>;</init> <condition><expr><name pos:line="130" pos:column="37">deco</name></expr>;</condition> <incr><expr><name pos:line="130" pos:column="43">deco</name> <op:operator pos:line="130" pos:column="48">=</op:operator> <name><name pos:line="130" pos:column="50">deco</name><op:operator pos:line="130" pos:column="54">-&gt;</op:operator><name pos:line="130" pos:column="56">next</name></name></expr></incr>) <block pos:line="130" pos:column="62">{
		<expr_stmt><expr><call><name><name pos:line="131" pos:column="17">deco</name><op:operator pos:line="131" pos:column="21">-&gt;</op:operator><name pos:line="131" pos:column="23">rs</name><op:operator pos:line="131" pos:column="25">.</op:operator><name pos:line="131" pos:column="26">InsertSpace</name></name><argument_list pos:line="131" pos:column="37">(<argument><expr><name pos:line="131" pos:column="38">position</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="48">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="135" pos:column="1">void</name></type> <name><name pos:line="135" pos:column="6">DecorationList</name><op:operator pos:line="135" pos:column="20">::</op:operator><name pos:line="135" pos:column="22">DeleteRange</name></name><parameter_list pos:line="135" pos:column="33">(<param><decl><type><name pos:line="135" pos:column="34">int</name></type> <name pos:line="135" pos:column="38">position</name></decl></param>, <param><decl><type><name pos:line="135" pos:column="48">int</name></type> <name pos:line="135" pos:column="52">deleteLength</name></decl></param>)</parameter_list> <block pos:line="135" pos:column="66">{
	<expr_stmt><expr><name pos:line="136" pos:column="9">lengthDocument</name> <op:operator pos:line="136" pos:column="24">-=</op:operator> <name pos:line="136" pos:column="27">deleteLength</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">Decoration</name> <type:modifier pos:line="137" pos:column="20">*</type:modifier></type><name pos:line="137" pos:column="21">deco</name></decl>;</decl_stmt>
	<for pos:line="138" pos:column="9">for (<init><expr><name pos:line="138" pos:column="14">deco</name><op:operator pos:line="138" pos:column="18">=</op:operator><name pos:line="138" pos:column="19">root</name></expr>;</init> <condition><expr><name pos:line="138" pos:column="25">deco</name></expr>;</condition> <incr><expr><name pos:line="138" pos:column="31">deco</name> <op:operator pos:line="138" pos:column="36">=</op:operator> <name><name pos:line="138" pos:column="38">deco</name><op:operator pos:line="138" pos:column="42">-&gt;</op:operator><name pos:line="138" pos:column="44">next</name></name></expr></incr>) <block pos:line="138" pos:column="50">{
		<expr_stmt><expr><call><name><name pos:line="139" pos:column="17">deco</name><op:operator pos:line="139" pos:column="21">-&gt;</op:operator><name pos:line="139" pos:column="23">rs</name><op:operator pos:line="139" pos:column="25">.</op:operator><name pos:line="139" pos:column="26">DeleteRange</name></name><argument_list pos:line="139" pos:column="37">(<argument><expr><name pos:line="139" pos:column="38">position</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="48">deleteLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="141" pos:column="9">DeleteAnyEmpty</name><argument_list pos:line="141" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="144" pos:column="1">void</name></type> <name><name pos:line="144" pos:column="6">DecorationList</name><op:operator pos:line="144" pos:column="20">::</op:operator><name pos:line="144" pos:column="22">DeleteAnyEmpty</name></name><parameter_list pos:line="144" pos:column="36">()</parameter_list> <block pos:line="144" pos:column="39">{
	<decl_stmt><decl><type><name pos:line="145" pos:column="9">Decoration</name> <type:modifier pos:line="145" pos:column="20">*</type:modifier></type><name pos:line="145" pos:column="21">deco</name> <init pos:line="145" pos:column="26">= <expr><name pos:line="145" pos:column="28">root</name></expr></init></decl>;</decl_stmt>
	<while pos:line="146" pos:column="9">while <condition pos:line="146" pos:column="15">(<expr><name pos:line="146" pos:column="16">deco</name></expr>)</condition> <block pos:line="146" pos:column="22">{
		<if pos:line="147" pos:column="17">if <condition pos:line="147" pos:column="20">(<expr><call><name><name pos:line="147" pos:column="21">deco</name><op:operator pos:line="147" pos:column="25">-&gt;</op:operator><name pos:line="147" pos:column="27">Empty</name></name><argument_list pos:line="147" pos:column="32">()</argument_list></call></expr>)</condition><then pos:line="147" pos:column="35"> <block pos:line="147" pos:column="36">{
			<expr_stmt><expr><call><name pos:line="148" pos:column="25">Delete</name><argument_list pos:line="148" pos:column="31">(<argument><expr><name><name pos:line="148" pos:column="32">deco</name><op:operator pos:line="148" pos:column="36">-&gt;</op:operator><name pos:line="148" pos:column="38">indicator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="149" pos:column="25">deco</name> <op:operator pos:line="149" pos:column="30">=</op:operator> <name pos:line="149" pos:column="32">root</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="150" pos:column="19">else <block pos:line="150" pos:column="24">{
			<expr_stmt><expr><name pos:line="151" pos:column="25">deco</name> <op:operator pos:line="151" pos:column="30">=</op:operator> <name><name pos:line="151" pos:column="32">deco</name><op:operator pos:line="151" pos:column="36">-&gt;</op:operator><name pos:line="151" pos:column="38">next</name></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
}</block></function>

<function><type><name pos:line="156" pos:column="1">int</name></type> <name><name pos:line="156" pos:column="5">DecorationList</name><op:operator pos:line="156" pos:column="19">::</op:operator><name pos:line="156" pos:column="21">AllOnFor</name></name><parameter_list pos:line="156" pos:column="29">(<param><decl><type><name pos:line="156" pos:column="30">int</name></type> <name pos:line="156" pos:column="34">position</name></decl></param>)</parameter_list> <block pos:line="156" pos:column="44">{
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">int</name></type> <name pos:line="157" pos:column="13">mask</name> <init pos:line="157" pos:column="18">= <expr><lit:literal type="number" pos:line="157" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="158" pos:column="9">for (<init><decl><type><name pos:line="158" pos:column="14">Decoration</name> <type:modifier pos:line="158" pos:column="25">*</type:modifier></type><name pos:line="158" pos:column="26">deco</name><init pos:line="158" pos:column="30">=<expr><name pos:line="158" pos:column="31">root</name></expr></init></decl>;</init> <condition><expr><name pos:line="158" pos:column="37">deco</name></expr>;</condition> <incr><expr><name pos:line="158" pos:column="43">deco</name> <op:operator pos:line="158" pos:column="48">=</op:operator> <name><name pos:line="158" pos:column="50">deco</name><op:operator pos:line="158" pos:column="54">-&gt;</op:operator><name pos:line="158" pos:column="56">next</name></name></expr></incr>) <block pos:line="158" pos:column="62">{
		<if pos:line="159" pos:column="17">if <condition pos:line="159" pos:column="20">(<expr><call><name><name pos:line="159" pos:column="21">deco</name><op:operator pos:line="159" pos:column="25">-&gt;</op:operator><name pos:line="159" pos:column="27">rs</name><op:operator pos:line="159" pos:column="29">.</op:operator><name pos:line="159" pos:column="30">ValueAt</name></name><argument_list pos:line="159" pos:column="37">(<argument><expr><name pos:line="159" pos:column="38">position</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="159" pos:column="48"> <block pos:line="159" pos:column="49">{
			<expr_stmt><expr><name pos:line="160" pos:column="25">mask</name> <op:operator pos:line="160" pos:column="30">|=</op:operator> <lit:literal type="number" pos:line="160" pos:column="33">1</lit:literal> <op:operator pos:line="160" pos:column="35">&lt;&lt;</op:operator> <name><name pos:line="160" pos:column="38">deco</name><op:operator pos:line="160" pos:column="42">-&gt;</op:operator><name pos:line="160" pos:column="44">indicator</name></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<return pos:line="163" pos:column="9">return <expr><name pos:line="163" pos:column="16">mask</name></expr>;</return>
}</block></function>

<function><type><name pos:line="166" pos:column="1">int</name></type> <name><name pos:line="166" pos:column="5">DecorationList</name><op:operator pos:line="166" pos:column="19">::</op:operator><name pos:line="166" pos:column="21">ValueAt</name></name><parameter_list pos:line="166" pos:column="28">(<param><decl><type><name pos:line="166" pos:column="29">int</name></type> <name pos:line="166" pos:column="33">indicator</name></decl></param>, <param><decl><type><name pos:line="166" pos:column="44">int</name></type> <name pos:line="166" pos:column="48">position</name></decl></param>)</parameter_list> <block pos:line="166" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="167" pos:column="9">Decoration</name> <type:modifier pos:line="167" pos:column="20">*</type:modifier></type><name pos:line="167" pos:column="21">deco</name> <init pos:line="167" pos:column="26">= <expr><call><name pos:line="167" pos:column="28">DecorationFromIndicator</name><argument_list pos:line="167" pos:column="51">(<argument><expr><name pos:line="167" pos:column="52">indicator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><name pos:line="168" pos:column="13">deco</name></expr>)</condition><then pos:line="168" pos:column="18"> <block pos:line="168" pos:column="19">{
		<return pos:line="169" pos:column="17">return <expr><call><name><name pos:line="169" pos:column="24">deco</name><op:operator pos:line="169" pos:column="28">-&gt;</op:operator><name pos:line="169" pos:column="30">rs</name><op:operator pos:line="169" pos:column="32">.</op:operator><name pos:line="169" pos:column="33">ValueAt</name></name><argument_list pos:line="169" pos:column="40">(<argument><expr><name pos:line="169" pos:column="41">position</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<return pos:line="171" pos:column="9">return <expr><lit:literal type="number" pos:line="171" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="174" pos:column="1">int</name></type> <name><name pos:line="174" pos:column="5">DecorationList</name><op:operator pos:line="174" pos:column="19">::</op:operator><name pos:line="174" pos:column="21">Start</name></name><parameter_list pos:line="174" pos:column="26">(<param><decl><type><name pos:line="174" pos:column="27">int</name></type> <name pos:line="174" pos:column="31">indicator</name></decl></param>, <param><decl><type><name pos:line="174" pos:column="42">int</name></type> <name pos:line="174" pos:column="46">position</name></decl></param>)</parameter_list> <block pos:line="174" pos:column="56">{
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">Decoration</name> <type:modifier pos:line="175" pos:column="20">*</type:modifier></type><name pos:line="175" pos:column="21">deco</name> <init pos:line="175" pos:column="26">= <expr><call><name pos:line="175" pos:column="28">DecorationFromIndicator</name><argument_list pos:line="175" pos:column="51">(<argument><expr><name pos:line="175" pos:column="52">indicator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="176" pos:column="9">if <condition pos:line="176" pos:column="12">(<expr><name pos:line="176" pos:column="13">deco</name></expr>)</condition><then pos:line="176" pos:column="18"> <block pos:line="176" pos:column="19">{
		<return pos:line="177" pos:column="17">return <expr><call><name><name pos:line="177" pos:column="24">deco</name><op:operator pos:line="177" pos:column="28">-&gt;</op:operator><name pos:line="177" pos:column="30">rs</name><op:operator pos:line="177" pos:column="32">.</op:operator><name pos:line="177" pos:column="33">StartRun</name></name><argument_list pos:line="177" pos:column="41">(<argument><expr><name pos:line="177" pos:column="42">position</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<return pos:line="179" pos:column="9">return <expr><lit:literal type="number" pos:line="179" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="182" pos:column="1">int</name></type> <name><name pos:line="182" pos:column="5">DecorationList</name><op:operator pos:line="182" pos:column="19">::</op:operator><name pos:line="182" pos:column="21">End</name></name><parameter_list pos:line="182" pos:column="24">(<param><decl><type><name pos:line="182" pos:column="25">int</name></type> <name pos:line="182" pos:column="29">indicator</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="40">int</name></type> <name pos:line="182" pos:column="44">position</name></decl></param>)</parameter_list> <block pos:line="182" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="183" pos:column="9">Decoration</name> <type:modifier pos:line="183" pos:column="20">*</type:modifier></type><name pos:line="183" pos:column="21">deco</name> <init pos:line="183" pos:column="26">= <expr><call><name pos:line="183" pos:column="28">DecorationFromIndicator</name><argument_list pos:line="183" pos:column="51">(<argument><expr><name pos:line="183" pos:column="52">indicator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="184" pos:column="9">if <condition pos:line="184" pos:column="12">(<expr><name pos:line="184" pos:column="13">deco</name></expr>)</condition><then pos:line="184" pos:column="18"> <block pos:line="184" pos:column="19">{
		<return pos:line="185" pos:column="17">return <expr><call><name><name pos:line="185" pos:column="24">deco</name><op:operator pos:line="185" pos:column="28">-&gt;</op:operator><name pos:line="185" pos:column="30">rs</name><op:operator pos:line="185" pos:column="32">.</op:operator><name pos:line="185" pos:column="33">EndRun</name></name><argument_list pos:line="185" pos:column="39">(<argument><expr><name pos:line="185" pos:column="40">position</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<return pos:line="187" pos:column="9">return <expr><lit:literal type="number" pos:line="187" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>
</unit>
