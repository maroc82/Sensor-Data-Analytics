<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexBasic.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexBasic.cxx
 ** Lexer for BlitzBasic and PureBasic.
 ** Converted to lexer object and added further folding features/properties by "Udo Lechner" &lt;dlchnr(at)gmx(dot)net&gt;
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<comment type="line" pos:line="9" pos:column="1">// This tries to be a unified Lexer/Folder for all the BlitzBasic/BlitzMax/PurBasic basics</comment>
<comment type="line" pos:line="10" pos:column="1">// and derivatives. Once they diverge enough, might want to split it into multiple</comment>
<comment type="line" pos:line="11" pos:column="1">// lexers for more code clearity.</comment>
<comment type="line" pos:line="12" pos:column="1">//</comment>
<comment type="line" pos:line="13" pos:column="1">// Mail me (elias &lt;at&gt; users &lt;dot&gt; sf &lt;dot&gt; net) for any bugs.</comment>

<comment type="line" pos:line="15" pos:column="1">// Folding only works for simple things like functions or types.</comment>

<comment type="line" pos:line="17" pos:column="1">// You may want to have a look at my ctags lexer as well, if you additionally to coloring</comment>
<comment type="line" pos:line="18" pos:column="1">// and folding need to extract things like label tags in your editor.</comment>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file pos:line="24" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file pos:line="25" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">pragma</cpp:directive> warning(disable: 4786)</cpp:pragma>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file pos:line="31" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file pos:line="32" pos:column="10">&lt;map&gt;</cpp:file></cpp:include>

<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="38" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="39" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="40" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="41" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="42" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="43" pos:column="10">"OptionSet.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef</cpp:directive> <name pos:line="45" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="46" pos:column="1">using namespace <name pos:line="46" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="49" pos:column="1">/* Bits:
 * 1  - whitespace
 * 2  - operator
 * 4  - identifier
 * 8  - decimal digit
 * 16 - hex digit
 * 32 - bin digit
 */</comment>
<decl_stmt><decl><type><specifier pos:line="57" pos:column="1">static</specifier> <name pos:line="57" pos:column="8">int</name></type> <name><name pos:line="57" pos:column="12">character_classification</name><index pos:line="57" pos:column="36">[<expr><lit:literal type="number" pos:line="57" pos:column="37">128</lit:literal></expr>]</index></name> <init pos:line="57" pos:column="42">=
<expr><block pos:line="58" pos:column="1">{
    <expr><lit:literal type="number" pos:line="59" pos:column="5">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="9">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="17">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="21">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="25">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="29">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="33">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="37">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="41">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="45">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="49">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="53">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="57">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="61">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="59" pos:column="65">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="60" pos:column="5">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="9">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="17">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="21">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="25">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="29">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="33">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="37">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="41">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="45">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="49">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="53">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="57">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="61">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="60" pos:column="65">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="61" pos:column="5">1</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="9">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="13">0</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="17">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="21">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="25">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="29">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="33">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="37">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="41">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="45">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="61" pos:column="61">10</lit:literal></expr>, <expr><lit:literal type="number" pos:line="61" pos:column="65">2</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="62" pos:column="5">60</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="9">60</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="13">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="17">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="21">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="25">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="29">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="33">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="37">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="41">28</lit:literal></expr>, <expr><lit:literal type="number" pos:line="62" pos:column="45">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="62" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="62" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="62" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="62" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="62" pos:column="65">2</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="63" pos:column="5">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="9">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="63" pos:column="13">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="63" pos:column="17">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="63" pos:column="21">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="63" pos:column="25">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="63" pos:column="29">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="63" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="49">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="53">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="57">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="61">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="63" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="64" pos:column="5">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="9">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="13">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="17">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="21">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="25">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="29">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="64" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="65" pos:column="5">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="9">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="65" pos:column="13">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="65" pos:column="17">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="65" pos:column="21">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="65" pos:column="25">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="65" pos:column="29">20</lit:literal></expr>, <expr><lit:literal type="number" pos:line="65" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="49">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="53">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="57">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="61">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="65" pos:column="65">4</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="66" pos:column="5">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="9">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="13">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="17">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="21">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="25">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="29">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="33">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="37">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="41">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="45">4</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="49">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="53">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="57">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="61">2</lit:literal></expr>,  <expr><lit:literal type="number" pos:line="66" pos:column="65">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="69" pos:column="1">static</specifier> <name pos:line="69" pos:column="8">bool</name></type> <name pos:line="69" pos:column="13">IsSpace</name><parameter_list pos:line="69" pos:column="20">(<param><decl><type><name pos:line="69" pos:column="21">int</name></type> <name pos:line="69" pos:column="25">c</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="28">{
	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">c</name> <op:operator pos:line="70" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="70" pos:column="20">128</lit:literal> <op:operator pos:line="70" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="70" pos:column="27">(</op:operator><name><name pos:line="70" pos:column="28">character_classification</name><index pos:line="70" pos:column="52">[<expr><name pos:line="70" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="70" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="70" pos:column="58">1</lit:literal><op:operator pos:line="70" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="73" pos:column="1">static</specifier> <name pos:line="73" pos:column="8">bool</name></type> <name pos:line="73" pos:column="13">IsOperator</name><parameter_list pos:line="73" pos:column="23">(<param><decl><type><name pos:line="73" pos:column="24">int</name></type> <name pos:line="73" pos:column="28">c</name></decl></param>)</parameter_list> <block pos:line="73" pos:column="31">{
	<return pos:line="74" pos:column="9">return <expr><name pos:line="74" pos:column="16">c</name> <op:operator pos:line="74" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="74" pos:column="20">128</lit:literal> <op:operator pos:line="74" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="74" pos:column="27">(</op:operator><name><name pos:line="74" pos:column="28">character_classification</name><index pos:line="74" pos:column="52">[<expr><name pos:line="74" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="74" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="74" pos:column="58">2</lit:literal><op:operator pos:line="74" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="77" pos:column="1">static</specifier> <name pos:line="77" pos:column="8">bool</name></type> <name pos:line="77" pos:column="13">IsIdentifier</name><parameter_list pos:line="77" pos:column="25">(<param><decl><type><name pos:line="77" pos:column="26">int</name></type> <name pos:line="77" pos:column="30">c</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="33">{
	<return pos:line="78" pos:column="9">return <expr><name pos:line="78" pos:column="16">c</name> <op:operator pos:line="78" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="78" pos:column="20">128</lit:literal> <op:operator pos:line="78" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="78" pos:column="27">(</op:operator><name><name pos:line="78" pos:column="28">character_classification</name><index pos:line="78" pos:column="52">[<expr><name pos:line="78" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="78" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="78" pos:column="58">4</lit:literal><op:operator pos:line="78" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="81" pos:column="1">static</specifier> <name pos:line="81" pos:column="8">bool</name></type> <name pos:line="81" pos:column="13">IsDigit</name><parameter_list pos:line="81" pos:column="20">(<param><decl><type><name pos:line="81" pos:column="21">int</name></type> <name pos:line="81" pos:column="25">c</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="28">{
	<return pos:line="82" pos:column="9">return <expr><name pos:line="82" pos:column="16">c</name> <op:operator pos:line="82" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="82" pos:column="20">128</lit:literal> <op:operator pos:line="82" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="82" pos:column="27">(</op:operator><name><name pos:line="82" pos:column="28">character_classification</name><index pos:line="82" pos:column="52">[<expr><name pos:line="82" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="82" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="82" pos:column="58">8</lit:literal><op:operator pos:line="82" pos:column="59">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="85" pos:column="1">static</specifier> <name pos:line="85" pos:column="8">bool</name></type> <name pos:line="85" pos:column="13">IsHexDigit</name><parameter_list pos:line="85" pos:column="23">(<param><decl><type><name pos:line="85" pos:column="24">int</name></type> <name pos:line="85" pos:column="28">c</name></decl></param>)</parameter_list> <block pos:line="85" pos:column="31">{
	<return pos:line="86" pos:column="9">return <expr><name pos:line="86" pos:column="16">c</name> <op:operator pos:line="86" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="86" pos:column="20">128</lit:literal> <op:operator pos:line="86" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="86" pos:column="27">(</op:operator><name><name pos:line="86" pos:column="28">character_classification</name><index pos:line="86" pos:column="52">[<expr><name pos:line="86" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="86" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="86" pos:column="58">16</lit:literal><op:operator pos:line="86" pos:column="60">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="89" pos:column="1">static</specifier> <name pos:line="89" pos:column="8">bool</name></type> <name pos:line="89" pos:column="13">IsBinDigit</name><parameter_list pos:line="89" pos:column="23">(<param><decl><type><name pos:line="89" pos:column="24">int</name></type> <name pos:line="89" pos:column="28">c</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="31">{
	<return pos:line="90" pos:column="9">return <expr><name pos:line="90" pos:column="16">c</name> <op:operator pos:line="90" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="90" pos:column="20">128</lit:literal> <op:operator pos:line="90" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="90" pos:column="27">(</op:operator><name><name pos:line="90" pos:column="28">character_classification</name><index pos:line="90" pos:column="52">[<expr><name pos:line="90" pos:column="53">c</name></expr>]</index></name> <op:operator pos:line="90" pos:column="56">&amp;</op:operator> <lit:literal type="number" pos:line="90" pos:column="58">32</lit:literal><op:operator pos:line="90" pos:column="60">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="93" pos:column="1">static</specifier> <name pos:line="93" pos:column="8">int</name></type> <name pos:line="93" pos:column="12">LowerCase</name><parameter_list pos:line="93" pos:column="21">(<param><decl><type><name pos:line="93" pos:column="22">int</name></type> <name pos:line="93" pos:column="26">c</name></decl></param>)</parameter_list>
<block pos:line="94" pos:column="1">{
	<if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name pos:line="95" pos:column="13">c</name> <op:operator pos:line="95" pos:column="15">&gt;=</op:operator> <lit:literal type="char" pos:line="95" pos:column="18">'A'</lit:literal> <op:operator pos:line="95" pos:column="22">&amp;&amp;</op:operator> <name pos:line="95" pos:column="25">c</name> <op:operator pos:line="95" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="95" pos:column="30">'Z'</lit:literal></expr>)</condition><then pos:line="95" pos:column="34">
		<return pos:line="96" pos:column="17">return <expr><lit:literal type="char" pos:line="96" pos:column="24">'a'</lit:literal> <op:operator pos:line="96" pos:column="28">+</op:operator> <name pos:line="96" pos:column="30">c</name> <op:operator pos:line="96" pos:column="32">-</op:operator> <lit:literal type="char" pos:line="96" pos:column="34">'A'</lit:literal></expr>;</return></then></if>
	<return pos:line="97" pos:column="9">return <expr><name pos:line="97" pos:column="16">c</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="100" pos:column="1">static</specifier> <name pos:line="100" pos:column="8">int</name></type> <name pos:line="100" pos:column="12">CheckBlitzFoldPoint</name><parameter_list pos:line="100" pos:column="31">(<param><decl><type><name pos:line="100" pos:column="32">char</name> <specifier pos:line="100" pos:column="37">const</specifier> <type:modifier pos:line="100" pos:column="43">*</type:modifier></type><name pos:line="100" pos:column="44">token</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="51">int</name> <type:modifier pos:line="100" pos:column="55">&amp;</type:modifier></type><name pos:line="100" pos:column="56">level</name></decl></param>)</parameter_list> <block pos:line="100" pos:column="63">{
	<if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><op:operator pos:line="101" pos:column="13">!</op:operator><call><name pos:line="101" pos:column="14">strcmp</name><argument_list pos:line="101" pos:column="20">(<argument><expr><name pos:line="101" pos:column="21">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="28">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="101" pos:column="40">||</op:operator>
		<op:operator pos:line="102" pos:column="17">!</op:operator><call><name pos:line="102" pos:column="18">strcmp</name><argument_list pos:line="102" pos:column="24">(<argument><expr><name pos:line="102" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="102" pos:column="32">"type"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="40"> <block pos:line="102" pos:column="41">{
		<expr_stmt><expr><name pos:line="103" pos:column="17">level</name> <op:operator pos:line="103" pos:column="23">|=</op:operator> <name pos:line="103" pos:column="26">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		<return pos:line="104" pos:column="17">return <expr><lit:literal type="number" pos:line="104" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then></if>
	<if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><op:operator pos:line="106" pos:column="13">!</op:operator><call><name pos:line="106" pos:column="14">strcmp</name><argument_list pos:line="106" pos:column="20">(<argument><expr><name pos:line="106" pos:column="21">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="106" pos:column="28">"end function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="106" pos:column="44">||</op:operator>
		<op:operator pos:line="107" pos:column="17">!</op:operator><call><name pos:line="107" pos:column="18">strcmp</name><argument_list pos:line="107" pos:column="24">(<argument><expr><name pos:line="107" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="107" pos:column="32">"end type"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="107" pos:column="44"> <block pos:line="107" pos:column="45">{
		<return pos:line="108" pos:column="17">return <expr><op:operator pos:line="108" pos:column="24">-</op:operator><lit:literal type="number" pos:line="108" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="110" pos:column="9">return <expr><lit:literal type="number" pos:line="110" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="113" pos:column="1">static</specifier> <name pos:line="113" pos:column="8">int</name></type> <name pos:line="113" pos:column="12">CheckPureFoldPoint</name><parameter_list pos:line="113" pos:column="30">(<param><decl><type><name pos:line="113" pos:column="31">char</name> <specifier pos:line="113" pos:column="36">const</specifier> <type:modifier pos:line="113" pos:column="42">*</type:modifier></type><name pos:line="113" pos:column="43">token</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="50">int</name> <type:modifier pos:line="113" pos:column="54">&amp;</type:modifier></type><name pos:line="113" pos:column="55">level</name></decl></param>)</parameter_list> <block pos:line="113" pos:column="62">{
	<if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><op:operator pos:line="114" pos:column="13">!</op:operator><call><name pos:line="114" pos:column="14">strcmp</name><argument_list pos:line="114" pos:column="20">(<argument><expr><name pos:line="114" pos:column="21">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="114" pos:column="28">"procedure"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="114" pos:column="41">||</op:operator>
		<op:operator pos:line="115" pos:column="17">!</op:operator><call><name pos:line="115" pos:column="18">strcmp</name><argument_list pos:line="115" pos:column="24">(<argument><expr><name pos:line="115" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="115" pos:column="32">"enumeration"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="115" pos:column="47">||</op:operator>
		<op:operator pos:line="116" pos:column="17">!</op:operator><call><name pos:line="116" pos:column="18">strcmp</name><argument_list pos:line="116" pos:column="24">(<argument><expr><name pos:line="116" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="32">"interface"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="116" pos:column="45">||</op:operator>
		<op:operator pos:line="117" pos:column="17">!</op:operator><call><name pos:line="117" pos:column="18">strcmp</name><argument_list pos:line="117" pos:column="24">(<argument><expr><name pos:line="117" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="117" pos:column="32">"structure"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="117" pos:column="45"> <block pos:line="117" pos:column="46">{
		<expr_stmt><expr><name pos:line="118" pos:column="17">level</name> <op:operator pos:line="118" pos:column="23">|=</op:operator> <name pos:line="118" pos:column="26">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		<return pos:line="119" pos:column="17">return <expr><lit:literal type="number" pos:line="119" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then></if>
	<if pos:line="121" pos:column="9">if <condition pos:line="121" pos:column="12">(<expr><op:operator pos:line="121" pos:column="13">!</op:operator><call><name pos:line="121" pos:column="14">strcmp</name><argument_list pos:line="121" pos:column="20">(<argument><expr><name pos:line="121" pos:column="21">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="28">"endprocedure"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="44">||</op:operator>
		<op:operator pos:line="122" pos:column="17">!</op:operator><call><name pos:line="122" pos:column="18">strcmp</name><argument_list pos:line="122" pos:column="24">(<argument><expr><name pos:line="122" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="122" pos:column="32">"endenumeration"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="122" pos:column="50">||</op:operator>
		<op:operator pos:line="123" pos:column="17">!</op:operator><call><name pos:line="123" pos:column="18">strcmp</name><argument_list pos:line="123" pos:column="24">(<argument><expr><name pos:line="123" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="123" pos:column="32">"endinterface"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="123" pos:column="48">||</op:operator>
		<op:operator pos:line="124" pos:column="17">!</op:operator><call><name pos:line="124" pos:column="18">strcmp</name><argument_list pos:line="124" pos:column="24">(<argument><expr><name pos:line="124" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="124" pos:column="32">"endstructure"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="48"> <block pos:line="124" pos:column="49">{
		<return pos:line="125" pos:column="17">return <expr><op:operator pos:line="125" pos:column="24">-</op:operator><lit:literal type="number" pos:line="125" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="127" pos:column="9">return <expr><lit:literal type="number" pos:line="127" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="130" pos:column="1">static</specifier> <name pos:line="130" pos:column="8">int</name></type> <name pos:line="130" pos:column="12">CheckFreeFoldPoint</name><parameter_list pos:line="130" pos:column="30">(<param><decl><type><name pos:line="130" pos:column="31">char</name> <specifier pos:line="130" pos:column="36">const</specifier> <type:modifier pos:line="130" pos:column="42">*</type:modifier></type><name pos:line="130" pos:column="43">token</name></decl></param>, <param><decl><type><name pos:line="130" pos:column="50">int</name> <type:modifier pos:line="130" pos:column="54">&amp;</type:modifier></type><name pos:line="130" pos:column="55">level</name></decl></param>)</parameter_list> <block pos:line="130" pos:column="62">{
	<if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><op:operator pos:line="131" pos:column="13">!</op:operator><call><name pos:line="131" pos:column="14">strcmp</name><argument_list pos:line="131" pos:column="20">(<argument><expr><name pos:line="131" pos:column="21">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="131" pos:column="28">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="131" pos:column="40">||</op:operator>
		<op:operator pos:line="132" pos:column="17">!</op:operator><call><name pos:line="132" pos:column="18">strcmp</name><argument_list pos:line="132" pos:column="24">(<argument><expr><name pos:line="132" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="132" pos:column="32">"sub"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="39">||</op:operator>
		<op:operator pos:line="133" pos:column="17">!</op:operator><call><name pos:line="133" pos:column="18">strcmp</name><argument_list pos:line="133" pos:column="24">(<argument><expr><name pos:line="133" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="133" pos:column="32">"type"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="133" pos:column="40"> <block pos:line="133" pos:column="41">{
		<expr_stmt><expr><name pos:line="134" pos:column="17">level</name> <op:operator pos:line="134" pos:column="23">|=</op:operator> <name pos:line="134" pos:column="26">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		<return pos:line="135" pos:column="17">return <expr><lit:literal type="number" pos:line="135" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then></if>
	<if pos:line="137" pos:column="9">if <condition pos:line="137" pos:column="12">(<expr><op:operator pos:line="137" pos:column="13">!</op:operator><call><name pos:line="137" pos:column="14">strcmp</name><argument_list pos:line="137" pos:column="20">(<argument><expr><name pos:line="137" pos:column="21">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="137" pos:column="28">"end function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="137" pos:column="44">||</op:operator>
		<op:operator pos:line="138" pos:column="17">!</op:operator><call><name pos:line="138" pos:column="18">strcmp</name><argument_list pos:line="138" pos:column="24">(<argument><expr><name pos:line="138" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="138" pos:column="32">"end sub"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="138" pos:column="43">||</op:operator>
		<op:operator pos:line="139" pos:column="17">!</op:operator><call><name pos:line="139" pos:column="18">strcmp</name><argument_list pos:line="139" pos:column="24">(<argument><expr><name pos:line="139" pos:column="25">token</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="139" pos:column="32">"end type"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="139" pos:column="44"> <block pos:line="139" pos:column="45">{
		<return pos:line="140" pos:column="17">return <expr><op:operator pos:line="140" pos:column="24">-</op:operator><lit:literal type="number" pos:line="140" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="142" pos:column="9">return <expr><lit:literal type="number" pos:line="142" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="145" pos:column="1">// An individual named option for use in an OptionSet</comment>

<comment type="line" pos:line="147" pos:column="1">// Options used for LexerBasic</comment>
<struct pos:line="148" pos:column="1">struct <name pos:line="148" pos:column="8">OptionsBasic</name> <block pos:line="148" pos:column="21">{<public type="default" pos:line="148" pos:column="22">
	<decl_stmt><decl><type><name pos:line="149" pos:column="9">bool</name></type> <name pos:line="149" pos:column="14">fold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="150" pos:column="9">bool</name></type> <name pos:line="150" pos:column="14">foldSyntaxBased</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="151" pos:column="9">bool</name></type> <name pos:line="151" pos:column="14">foldCommentExplicit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="152" pos:column="9">std</name><op:operator pos:line="152" pos:column="12">::</op:operator><name pos:line="152" pos:column="14">string</name></name></type> <name pos:line="152" pos:column="21">foldExplicitStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="153" pos:column="9">std</name><op:operator pos:line="153" pos:column="12">::</op:operator><name pos:line="153" pos:column="14">string</name></name></type> <name pos:line="153" pos:column="21">foldExplicitEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="154" pos:column="9">bool</name></type> <name pos:line="154" pos:column="14">foldExplicitAnywhere</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="155" pos:column="9">bool</name></type> <name pos:line="155" pos:column="14">foldCompact</name></decl>;</decl_stmt>
	<constructor><name pos:line="156" pos:column="9">OptionsBasic</name><parameter_list pos:line="156" pos:column="21">()</parameter_list> <block pos:line="156" pos:column="24">{
		<expr_stmt><expr><name pos:line="157" pos:column="17">fold</name> <op:operator pos:line="157" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="157" pos:column="24">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="158" pos:column="17">foldSyntaxBased</name> <op:operator pos:line="158" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="158" pos:column="35">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="159" pos:column="17">foldCommentExplicit</name> <op:operator pos:line="159" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="159" pos:column="39">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="160" pos:column="17">foldExplicitStart</name> <op:operator pos:line="160" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="160" pos:column="37">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="161" pos:column="17">foldExplicitEnd</name>   <op:operator pos:line="161" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="161" pos:column="37">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="162" pos:column="17">foldExplicitAnywhere</name> <op:operator pos:line="162" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="162" pos:column="40">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="163" pos:column="17">foldCompact</name> <op:operator pos:line="163" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="163" pos:column="31">true</lit:literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier pos:line="167" pos:column="1">static</specifier> <specifier pos:line="167" pos:column="8">const</specifier> <name pos:line="167" pos:column="14">char</name> <type:modifier pos:line="167" pos:column="19">*</type:modifier> <specifier pos:line="167" pos:column="21">const</specifier></type> <name><name pos:line="167" pos:column="27">blitzbasicWordListDesc</name><index pos:line="167" pos:column="49">[]</index></name> <init pos:line="167" pos:column="52">= <expr><block pos:line="167" pos:column="54">{
	<expr><lit:literal type="string" pos:line="168" pos:column="9">"BlitzBasic Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="169" pos:column="9">"user1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="170" pos:column="9">"user2"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="171" pos:column="9">"user3"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="172" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="175" pos:column="1">static</specifier> <specifier pos:line="175" pos:column="8">const</specifier> <name pos:line="175" pos:column="14">char</name> <type:modifier pos:line="175" pos:column="19">*</type:modifier> <specifier pos:line="175" pos:column="21">const</specifier></type> <name><name pos:line="175" pos:column="27">purebasicWordListDesc</name><index pos:line="175" pos:column="48">[]</index></name> <init pos:line="175" pos:column="51">= <expr><block pos:line="175" pos:column="53">{
	<expr><lit:literal type="string" pos:line="176" pos:column="9">"PureBasic Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="177" pos:column="9">"PureBasic PreProcessor Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="178" pos:column="9">"user defined 1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="179" pos:column="9">"user defined 2"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="180" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="183" pos:column="1">static</specifier> <specifier pos:line="183" pos:column="8">const</specifier> <name pos:line="183" pos:column="14">char</name> <type:modifier pos:line="183" pos:column="19">*</type:modifier> <specifier pos:line="183" pos:column="21">const</specifier></type> <name><name pos:line="183" pos:column="27">freebasicWordListDesc</name><index pos:line="183" pos:column="48">[]</index></name> <init pos:line="183" pos:column="51">= <expr><block pos:line="183" pos:column="53">{
	<expr><lit:literal type="string" pos:line="184" pos:column="9">"FreeBasic Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="185" pos:column="9">"FreeBasic PreProcessor Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="186" pos:column="9">"user defined 1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="187" pos:column="9">"user defined 2"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="188" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct pos:line="191" pos:column="1">struct <name pos:line="191" pos:column="8">OptionSetBasic</name> <super pos:line="191" pos:column="23">: <specifier pos:line="191" pos:column="25">public</specifier> <name><name pos:line="191" pos:column="32">OptionSet</name><argument_list pos:line="191" pos:column="41">&lt;<argument><expr><name pos:line="191" pos:column="42">OptionsBasic</name></expr></argument>&gt;</argument_list></name></super> <block pos:line="191" pos:column="56">{<public type="default" pos:line="191" pos:column="57">
	<constructor><name pos:line="192" pos:column="9">OptionSetBasic</name><parameter_list pos:line="192" pos:column="23">(<param><decl><type><specifier pos:line="192" pos:column="24">const</specifier> <name pos:line="192" pos:column="30">char</name> <type:modifier pos:line="192" pos:column="35">*</type:modifier> <specifier pos:line="192" pos:column="37">const</specifier></type> <name><name pos:line="192" pos:column="43">wordListDescriptions</name><index pos:line="192" pos:column="63">[]</index></name></decl></param>)</parameter_list> <block pos:line="192" pos:column="67">{
		<expr_stmt><expr><call><name pos:line="193" pos:column="17">DefineProperty</name><argument_list pos:line="193" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="32">"fold"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="193" pos:column="40">&amp;</op:operator><name><name pos:line="193" pos:column="41">OptionsBasic</name><op:operator pos:line="193" pos:column="53">::</op:operator><name pos:line="193" pos:column="55">fold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="195" pos:column="17">DefineProperty</name><argument_list pos:line="195" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="32">"fold.basic.syntax.based"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="195" pos:column="59">&amp;</op:operator><name><name pos:line="195" pos:column="60">OptionsBasic</name><op:operator pos:line="195" pos:column="72">::</op:operator><name pos:line="195" pos:column="74">foldSyntaxBased</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="196" pos:column="25">"Set this property to 0 to disable syntax based folding."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="198" pos:column="17">DefineProperty</name><argument_list pos:line="198" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="32">"fold.basic.comment.explicit"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="198" pos:column="63">&amp;</op:operator><name><name pos:line="198" pos:column="64">OptionsBasic</name><op:operator pos:line="198" pos:column="76">::</op:operator><name pos:line="198" pos:column="78">foldCommentExplicit</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="199" pos:column="25">"This option enables folding explicit fold points when using the Basic lexer. "</lit:literal>
			<lit:literal type="string" pos:line="200" pos:column="25">"Explicit fold points allows adding extra folding by placing a ;{ (BB/PB) or '{ (FB) comment at the start "</lit:literal>
			<lit:literal type="string" pos:line="201" pos:column="25">"and a ;} (BB/PB) or '} (FB) at the end of a section that should be folded."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="203" pos:column="17">DefineProperty</name><argument_list pos:line="203" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="203" pos:column="32">"fold.basic.explicit.start"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="203" pos:column="61">&amp;</op:operator><name><name pos:line="203" pos:column="62">OptionsBasic</name><op:operator pos:line="203" pos:column="74">::</op:operator><name pos:line="203" pos:column="76">foldExplicitStart</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="204" pos:column="25">"The string to use for explicit fold start points, replacing the standard ;{ (BB/PB) or '{ (FB)."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="206" pos:column="17">DefineProperty</name><argument_list pos:line="206" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="32">"fold.basic.explicit.end"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="206" pos:column="59">&amp;</op:operator><name><name pos:line="206" pos:column="60">OptionsBasic</name><op:operator pos:line="206" pos:column="72">::</op:operator><name pos:line="206" pos:column="74">foldExplicitEnd</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="207" pos:column="25">"The string to use for explicit fold end points, replacing the standard ;} (BB/PB) or '} (FB)."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="209" pos:column="17">DefineProperty</name><argument_list pos:line="209" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="32">"fold.basic.explicit.anywhere"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="209" pos:column="64">&amp;</op:operator><name><name pos:line="209" pos:column="65">OptionsBasic</name><op:operator pos:line="209" pos:column="77">::</op:operator><name pos:line="209" pos:column="79">foldExplicitAnywhere</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="210" pos:column="25">"Set this property to 1 to enable explicit fold points anywhere, not just in line comments."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="212" pos:column="17">DefineProperty</name><argument_list pos:line="212" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="212" pos:column="32">"fold.compact"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="212" pos:column="48">&amp;</op:operator><name><name pos:line="212" pos:column="49">OptionsBasic</name><op:operator pos:line="212" pos:column="61">::</op:operator><name pos:line="212" pos:column="63">foldCompact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="214" pos:column="17">DefineWordListSets</name><argument_list pos:line="214" pos:column="35">(<argument><expr><name pos:line="214" pos:column="36">wordListDescriptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<class pos:line="218" pos:column="1">class <name pos:line="218" pos:column="7">LexerBasic</name> <super pos:line="218" pos:column="18">: <specifier pos:line="218" pos:column="20">public</specifier> <name pos:line="218" pos:column="27">ILexer</name></super> <block pos:line="218" pos:column="34">{<private type="default" pos:line="218" pos:column="35">
	<decl_stmt><decl><type><name pos:line="219" pos:column="9">char</name></type> <name pos:line="219" pos:column="14">comment_char</name></decl>;</decl_stmt>
	<function_decl><type><name pos:line="220" pos:column="9">int</name></type> (<type:modifier pos:line="220" pos:column="14">*</type:modifier><name pos:line="220" pos:column="15">CheckFoldPoint</name>)<parameter_list pos:line="220" pos:column="30">(<param><decl><type><name pos:line="220" pos:column="31">char</name> <specifier pos:line="220" pos:column="36">const</specifier> <type:modifier pos:line="220" pos:column="42">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="220" pos:column="45">int</name> <type:modifier pos:line="220" pos:column="49">&amp;</type:modifier></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="221" pos:column="9">WordList</name></type> <name><name pos:line="221" pos:column="18">keywordlists</name><index pos:line="221" pos:column="30">[<expr><lit:literal type="number" pos:line="221" pos:column="31">4</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="222" pos:column="9">OptionsBasic</name></type> <name pos:line="222" pos:column="22">options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="223" pos:column="9">OptionSetBasic</name></type> <name pos:line="223" pos:column="24">osBasic</name></decl>;</decl_stmt>
</private><public pos:line="224" pos:column="1">public:
	<constructor><name pos:line="225" pos:column="9">LexerBasic</name><parameter_list pos:line="225" pos:column="19">(<param><decl><type><name pos:line="225" pos:column="20">char</name></type> <name pos:line="225" pos:column="25">comment_char_</name></decl></param>, <param><function_decl><type><name pos:line="225" pos:column="40">int</name></type> (<type:modifier pos:line="225" pos:column="45">*</type:modifier><name pos:line="225" pos:column="46">CheckFoldPoint_</name>)<parameter_list pos:line="225" pos:column="62">(<param><decl><type><name pos:line="225" pos:column="63">char</name> <specifier pos:line="225" pos:column="68">const</specifier> <type:modifier pos:line="225" pos:column="74">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="225" pos:column="77">int</name> <type:modifier pos:line="225" pos:column="81">&amp;</type:modifier></type></decl></param>)</parameter_list></function_decl></param>, <param><decl><type><specifier pos:line="225" pos:column="85">const</specifier> <name pos:line="225" pos:column="91">char</name> <type:modifier pos:line="225" pos:column="96">*</type:modifier> <specifier pos:line="225" pos:column="98">const</specifier></type> <name><name pos:line="225" pos:column="104">wordListDescriptions</name><index pos:line="225" pos:column="124">[]</index></name></decl></param>)</parameter_list> <member_list pos:line="225" pos:column="128">:
	           <call><name pos:line="226" pos:column="20">comment_char</name><argument_list pos:line="226" pos:column="32">(<argument><expr><name pos:line="226" pos:column="33">comment_char_</name></expr></argument>)</argument_list></call><op:operator pos:line="226" pos:column="47">,</op:operator>
	           <call><name pos:line="227" pos:column="20">CheckFoldPoint</name><argument_list pos:line="227" pos:column="34">(<argument><expr><name pos:line="227" pos:column="35">CheckFoldPoint_</name></expr></argument>)</argument_list></call><op:operator pos:line="227" pos:column="51">,</op:operator>
	           <call><name pos:line="228" pos:column="20">osBasic</name><argument_list pos:line="228" pos:column="27">(<argument><expr><name pos:line="228" pos:column="28">wordListDescriptions</name></expr></argument>)</argument_list></call> </member_list><block pos:line="228" pos:column="50">{
	}</block></constructor>
	<destructor><name pos:line="230" pos:column="9">~<name pos:line="230" pos:column="10">LexerBasic</name></name><parameter_list pos:line="230" pos:column="20">()</parameter_list> <block pos:line="230" pos:column="23">{
	}</block></destructor>
	<function><type><name pos:line="232" pos:column="9">void</name> <name pos:line="232" pos:column="14">SCI_METHOD</name></type> <name pos:line="232" pos:column="25">Release</name><parameter_list pos:line="232" pos:column="32">()</parameter_list> <block pos:line="232" pos:column="35">{
		<expr_stmt><expr><op:operator pos:line="233" pos:column="17">delete</op:operator> <name pos:line="233" pos:column="24">this</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="235" pos:column="9">int</name> <name pos:line="235" pos:column="13">SCI_METHOD</name></type> <name pos:line="235" pos:column="24">Version</name><parameter_list pos:line="235" pos:column="31">()</parameter_list> <specifier pos:line="235" pos:column="34">const</specifier> <block pos:line="235" pos:column="40">{
		<return pos:line="236" pos:column="17">return <expr><name pos:line="236" pos:column="24">lvOriginal</name></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="238" pos:column="9">const</specifier> <name pos:line="238" pos:column="15">char</name> <type:modifier pos:line="238" pos:column="20">*</type:modifier> <name pos:line="238" pos:column="22">SCI_METHOD</name></type> <name pos:line="238" pos:column="33">PropertyNames</name><parameter_list pos:line="238" pos:column="46">()</parameter_list> <block pos:line="238" pos:column="49">{
		<return pos:line="239" pos:column="17">return <expr><call><name><name pos:line="239" pos:column="24">osBasic</name><op:operator pos:line="239" pos:column="31">.</op:operator><name pos:line="239" pos:column="32">PropertyNames</name></name><argument_list pos:line="239" pos:column="45">()</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="241" pos:column="9">int</name> <name pos:line="241" pos:column="13">SCI_METHOD</name></type> <name pos:line="241" pos:column="24">PropertyType</name><parameter_list pos:line="241" pos:column="36">(<param><decl><type><specifier pos:line="241" pos:column="37">const</specifier> <name pos:line="241" pos:column="43">char</name> <type:modifier pos:line="241" pos:column="48">*</type:modifier></type><name pos:line="241" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="241" pos:column="55">{
		<return pos:line="242" pos:column="17">return <expr><call><name><name pos:line="242" pos:column="24">osBasic</name><op:operator pos:line="242" pos:column="31">.</op:operator><name pos:line="242" pos:column="32">PropertyType</name></name><argument_list pos:line="242" pos:column="44">(<argument><expr><name pos:line="242" pos:column="45">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="244" pos:column="9">const</specifier> <name pos:line="244" pos:column="15">char</name> <type:modifier pos:line="244" pos:column="20">*</type:modifier> <name pos:line="244" pos:column="22">SCI_METHOD</name></type> <name pos:line="244" pos:column="33">DescribeProperty</name><parameter_list pos:line="244" pos:column="49">(<param><decl><type><specifier pos:line="244" pos:column="50">const</specifier> <name pos:line="244" pos:column="56">char</name> <type:modifier pos:line="244" pos:column="61">*</type:modifier></type><name pos:line="244" pos:column="62">name</name></decl></param>)</parameter_list> <block pos:line="244" pos:column="68">{
		<return pos:line="245" pos:column="17">return <expr><call><name><name pos:line="245" pos:column="24">osBasic</name><op:operator pos:line="245" pos:column="31">.</op:operator><name pos:line="245" pos:column="32">DescribeProperty</name></name><argument_list pos:line="245" pos:column="48">(<argument><expr><name pos:line="245" pos:column="49">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="247" pos:column="9">int</name> <name pos:line="247" pos:column="13">SCI_METHOD</name></type> <name pos:line="247" pos:column="24">PropertySet</name><parameter_list pos:line="247" pos:column="35">(<param><decl><type><specifier pos:line="247" pos:column="36">const</specifier> <name pos:line="247" pos:column="42">char</name> <type:modifier pos:line="247" pos:column="47">*</type:modifier></type><name pos:line="247" pos:column="48">key</name></decl></param>, <param><decl><type><specifier pos:line="247" pos:column="53">const</specifier> <name pos:line="247" pos:column="59">char</name> <type:modifier pos:line="247" pos:column="64">*</type:modifier></type><name pos:line="247" pos:column="65">val</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><specifier pos:line="248" pos:column="9">const</specifier> <name pos:line="248" pos:column="15">char</name> <type:modifier pos:line="248" pos:column="20">*</type:modifier> <name pos:line="248" pos:column="22">SCI_METHOD</name></type> <name pos:line="248" pos:column="33">DescribeWordListSets</name><parameter_list pos:line="248" pos:column="53">()</parameter_list> <block pos:line="248" pos:column="56">{
		<return pos:line="249" pos:column="17">return <expr><call><name><name pos:line="249" pos:column="24">osBasic</name><op:operator pos:line="249" pos:column="31">.</op:operator><name pos:line="249" pos:column="32">DescribeWordListSets</name></name><argument_list pos:line="249" pos:column="52">()</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="251" pos:column="9">int</name> <name pos:line="251" pos:column="13">SCI_METHOD</name></type> <name pos:line="251" pos:column="24">WordListSet</name><parameter_list pos:line="251" pos:column="35">(<param><decl><type><name pos:line="251" pos:column="36">int</name></type> <name pos:line="251" pos:column="40">n</name></decl></param>, <param><decl><type><specifier pos:line="251" pos:column="43">const</specifier> <name pos:line="251" pos:column="49">char</name> <type:modifier pos:line="251" pos:column="54">*</type:modifier></type><name pos:line="251" pos:column="55">wl</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="252" pos:column="9">void</name> <name pos:line="252" pos:column="14">SCI_METHOD</name></type> <name pos:line="252" pos:column="25">Lex</name><parameter_list pos:line="252" pos:column="28">(<param><decl><type><name pos:line="252" pos:column="29">unsigned</name> <name pos:line="252" pos:column="38">int</name></type> <name pos:line="252" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="252" pos:column="52">int</name></type> <name pos:line="252" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="252" pos:column="64">int</name></type> <name pos:line="252" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="252" pos:column="79">IDocument</name> <type:modifier pos:line="252" pos:column="89">*</type:modifier></type><name pos:line="252" pos:column="90">pAccess</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="253" pos:column="9">void</name> <name pos:line="253" pos:column="14">SCI_METHOD</name></type> <name pos:line="253" pos:column="25">Fold</name><parameter_list pos:line="253" pos:column="29">(<param><decl><type><name pos:line="253" pos:column="30">unsigned</name> <name pos:line="253" pos:column="39">int</name></type> <name pos:line="253" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="253" pos:column="53">int</name></type> <name pos:line="253" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="253" pos:column="65">int</name></type> <name pos:line="253" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="253" pos:column="80">IDocument</name> <type:modifier pos:line="253" pos:column="90">*</type:modifier></type><name pos:line="253" pos:column="91">pAccess</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="255" pos:column="9">void</name> <type:modifier pos:line="255" pos:column="14">*</type:modifier> <name pos:line="255" pos:column="16">SCI_METHOD</name></type> <name pos:line="255" pos:column="27">PrivateCall</name><parameter_list pos:line="255" pos:column="38">(<param><decl><type><name pos:line="255" pos:column="39">int</name></type></decl></param>, <param><decl><type><name pos:line="255" pos:column="44">void</name> <type:modifier pos:line="255" pos:column="49">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="255" pos:column="52">{
		<return pos:line="256" pos:column="17">return <expr><lit:literal type="number" pos:line="256" pos:column="24">0</lit:literal></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="258" pos:column="9">static</specifier> <name pos:line="258" pos:column="16">ILexer</name> <type:modifier pos:line="258" pos:column="23">*</type:modifier></type><name pos:line="258" pos:column="24">LexerFactoryBlitzBasic</name><parameter_list pos:line="258" pos:column="46">()</parameter_list> <block pos:line="258" pos:column="49">{
		<return pos:line="259" pos:column="17">return <expr><op:operator pos:line="259" pos:column="24">new</op:operator> <call><name pos:line="259" pos:column="28">LexerBasic</name><argument_list pos:line="259" pos:column="38">(<argument><expr><lit:literal type="char" pos:line="259" pos:column="39">';'</lit:literal></expr></argument>, <argument><expr><name pos:line="259" pos:column="44">CheckBlitzFoldPoint</name></expr></argument>, <argument><expr><name pos:line="259" pos:column="65">blitzbasicWordListDesc</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="261" pos:column="9">static</specifier> <name pos:line="261" pos:column="16">ILexer</name> <type:modifier pos:line="261" pos:column="23">*</type:modifier></type><name pos:line="261" pos:column="24">LexerFactoryPureBasic</name><parameter_list pos:line="261" pos:column="45">()</parameter_list> <block pos:line="261" pos:column="48">{
		<return pos:line="262" pos:column="17">return <expr><op:operator pos:line="262" pos:column="24">new</op:operator> <call><name pos:line="262" pos:column="28">LexerBasic</name><argument_list pos:line="262" pos:column="38">(<argument><expr><lit:literal type="char" pos:line="262" pos:column="39">';'</lit:literal></expr></argument>, <argument><expr><name pos:line="262" pos:column="44">CheckPureFoldPoint</name></expr></argument>, <argument><expr><name pos:line="262" pos:column="64">purebasicWordListDesc</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="264" pos:column="9">static</specifier> <name pos:line="264" pos:column="16">ILexer</name> <type:modifier pos:line="264" pos:column="23">*</type:modifier></type><name pos:line="264" pos:column="24">LexerFactoryFreeBasic</name><parameter_list pos:line="264" pos:column="45">()</parameter_list> <block pos:line="264" pos:column="48">{
		<return pos:line="265" pos:column="17">return <expr><op:operator pos:line="265" pos:column="24">new</op:operator> <call><name pos:line="265" pos:column="28">LexerBasic</name><argument_list pos:line="265" pos:column="38">(<argument><expr><lit:literal type="char" pos:line="265" pos:column="39">'\''</lit:literal></expr></argument>, <argument><expr><name pos:line="265" pos:column="45">CheckFreeFoldPoint</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="65">freebasicWordListDesc</name></expr></argument> )</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="269" pos:column="1">int</name> <name pos:line="269" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="269" pos:column="16">LexerBasic</name><op:operator pos:line="269" pos:column="26">::</op:operator><name pos:line="269" pos:column="28">PropertySet</name></name><parameter_list pos:line="269" pos:column="39">(<param><decl><type><specifier pos:line="269" pos:column="40">const</specifier> <name pos:line="269" pos:column="46">char</name> <type:modifier pos:line="269" pos:column="51">*</type:modifier></type><name pos:line="269" pos:column="52">key</name></decl></param>, <param><decl><type><specifier pos:line="269" pos:column="57">const</specifier> <name pos:line="269" pos:column="63">char</name> <type:modifier pos:line="269" pos:column="68">*</type:modifier></type><name pos:line="269" pos:column="69">val</name></decl></param>)</parameter_list> <block pos:line="269" pos:column="74">{
	<if pos:line="270" pos:column="9">if <condition pos:line="270" pos:column="12">(<expr><call><name><name pos:line="270" pos:column="13">osBasic</name><op:operator pos:line="270" pos:column="20">.</op:operator><name pos:line="270" pos:column="21">PropertySet</name></name><argument_list pos:line="270" pos:column="32">(<argument><expr><op:operator pos:line="270" pos:column="33">&amp;</op:operator><name pos:line="270" pos:column="34">options</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="43">key</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="48">val</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="270" pos:column="53"> <block pos:line="270" pos:column="54">{
		<return pos:line="271" pos:column="17">return <expr><lit:literal type="number" pos:line="271" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="273" pos:column="9">return <expr><op:operator pos:line="273" pos:column="16">-</op:operator><lit:literal type="number" pos:line="273" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="276" pos:column="1">int</name> <name pos:line="276" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="276" pos:column="16">LexerBasic</name><op:operator pos:line="276" pos:column="26">::</op:operator><name pos:line="276" pos:column="28">WordListSet</name></name><parameter_list pos:line="276" pos:column="39">(<param><decl><type><name pos:line="276" pos:column="40">int</name></type> <name pos:line="276" pos:column="44">n</name></decl></param>, <param><decl><type><specifier pos:line="276" pos:column="47">const</specifier> <name pos:line="276" pos:column="53">char</name> <type:modifier pos:line="276" pos:column="58">*</type:modifier></type><name pos:line="276" pos:column="59">wl</name></decl></param>)</parameter_list> <block pos:line="276" pos:column="63">{
	<decl_stmt><decl><type><name pos:line="277" pos:column="9">WordList</name> <type:modifier pos:line="277" pos:column="18">*</type:modifier></type><name pos:line="277" pos:column="19">wordListN</name> <init pos:line="277" pos:column="29">= <expr><lit:literal type="number" pos:line="277" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<switch pos:line="278" pos:column="9">switch <condition pos:line="278" pos:column="16">(<expr><name pos:line="278" pos:column="17">n</name></expr>)</condition> <block pos:line="278" pos:column="20">{
	<case pos:line="279" pos:column="9">case <expr><lit:literal type="number" pos:line="279" pos:column="14">0</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="280" pos:column="17">wordListN</name> <op:operator pos:line="280" pos:column="27">=</op:operator> <op:operator pos:line="280" pos:column="29">&amp;</op:operator><name><name pos:line="280" pos:column="30">keywordlists</name><index pos:line="280" pos:column="42">[<expr><lit:literal type="number" pos:line="280" pos:column="43">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<break pos:line="281" pos:column="17">break;</break>
	</case><case pos:line="282" pos:column="9">case <expr><lit:literal type="number" pos:line="282" pos:column="14">1</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="283" pos:column="17">wordListN</name> <op:operator pos:line="283" pos:column="27">=</op:operator> <op:operator pos:line="283" pos:column="29">&amp;</op:operator><name><name pos:line="283" pos:column="30">keywordlists</name><index pos:line="283" pos:column="42">[<expr><lit:literal type="number" pos:line="283" pos:column="43">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<break pos:line="284" pos:column="17">break;</break>
	</case><case pos:line="285" pos:column="9">case <expr><lit:literal type="number" pos:line="285" pos:column="14">2</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="286" pos:column="17">wordListN</name> <op:operator pos:line="286" pos:column="27">=</op:operator> <op:operator pos:line="286" pos:column="29">&amp;</op:operator><name><name pos:line="286" pos:column="30">keywordlists</name><index pos:line="286" pos:column="42">[<expr><lit:literal type="number" pos:line="286" pos:column="43">2</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<break pos:line="287" pos:column="17">break;</break>
	</case><case pos:line="288" pos:column="9">case <expr><lit:literal type="number" pos:line="288" pos:column="14">3</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="289" pos:column="17">wordListN</name> <op:operator pos:line="289" pos:column="27">=</op:operator> <op:operator pos:line="289" pos:column="29">&amp;</op:operator><name><name pos:line="289" pos:column="30">keywordlists</name><index pos:line="289" pos:column="42">[<expr><lit:literal type="number" pos:line="289" pos:column="43">3</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<break pos:line="290" pos:column="17">break;</break>
	</case>}</block></switch>
	<decl_stmt><decl><type><name pos:line="292" pos:column="9">int</name></type> <name pos:line="292" pos:column="13">firstModification</name> <init pos:line="292" pos:column="31">= <expr><op:operator pos:line="292" pos:column="33">-</op:operator><lit:literal type="number" pos:line="292" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="293" pos:column="9">if <condition pos:line="293" pos:column="12">(<expr><name pos:line="293" pos:column="13">wordListN</name></expr>)</condition><then pos:line="293" pos:column="23"> <block pos:line="293" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="294" pos:column="17">WordList</name></type> <name pos:line="294" pos:column="26">wlNew</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="295" pos:column="17">wlNew</name><op:operator pos:line="295" pos:column="22">.</op:operator><name pos:line="295" pos:column="23">Set</name></name><argument_list pos:line="295" pos:column="26">(<argument><expr><name pos:line="295" pos:column="27">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="296" pos:column="17">if <condition pos:line="296" pos:column="20">(<expr><op:operator pos:line="296" pos:column="21">*</op:operator><name pos:line="296" pos:column="22">wordListN</name> <op:operator pos:line="296" pos:column="32">!=</op:operator> <name pos:line="296" pos:column="35">wlNew</name></expr>)</condition><then pos:line="296" pos:column="41"> <block pos:line="296" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="297" pos:column="25">wordListN</name><op:operator pos:line="297" pos:column="34">-&gt;</op:operator><name pos:line="297" pos:column="36">Set</name></name><argument_list pos:line="297" pos:column="39">(<argument><expr><name pos:line="297" pos:column="40">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="298" pos:column="25">firstModification</name> <op:operator pos:line="298" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="298" pos:column="45">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="301" pos:column="9">return <expr><name pos:line="301" pos:column="16">firstModification</name></expr>;</return>
}</block></function>

<function><type><name pos:line="304" pos:column="1">void</name> <name pos:line="304" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="304" pos:column="17">LexerBasic</name><op:operator pos:line="304" pos:column="27">::</op:operator><name pos:line="304" pos:column="29">Lex</name></name><parameter_list pos:line="304" pos:column="32">(<param><decl><type><name pos:line="304" pos:column="33">unsigned</name> <name pos:line="304" pos:column="42">int</name></type> <name pos:line="304" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="56">int</name></type> <name pos:line="304" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="68">int</name></type> <name pos:line="304" pos:column="72">initStyle</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="83">IDocument</name> <type:modifier pos:line="304" pos:column="93">*</type:modifier></type><name pos:line="304" pos:column="94">pAccess</name></decl></param>)</parameter_list> <block pos:line="304" pos:column="103">{
	<function_decl><type><name pos:line="305" pos:column="9">LexAccessor</name></type> <name pos:line="305" pos:column="21">styler</name><parameter_list pos:line="305" pos:column="27">(<param><decl><type><name pos:line="305" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="307" pos:column="9">bool</name></type> <name pos:line="307" pos:column="14">wasfirst</name> <init pos:line="307" pos:column="23">= <expr><lit:literal type="boolean" pos:line="307" pos:column="25">true</lit:literal></expr></init><op:operator pos:line="307" pos:column="29">,</op:operator> <name pos:line="307" pos:column="31">isfirst</name> <init pos:line="307" pos:column="39">= <expr><lit:literal type="boolean" pos:line="307" pos:column="41">true</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="307" pos:column="47">// true if first token in a line</comment>
	<expr_stmt><expr><call><name><name pos:line="308" pos:column="9">styler</name><op:operator pos:line="308" pos:column="15">.</op:operator><name pos:line="308" pos:column="16">StartAt</name></name><argument_list pos:line="308" pos:column="23">(<argument><expr><name pos:line="308" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<function_decl><type><name pos:line="310" pos:column="9">StyleContext</name></type> <name pos:line="310" pos:column="22">sc</name><parameter_list pos:line="310" pos:column="24">(<param><decl><type><name pos:line="310" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="310" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="310" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="310" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="312" pos:column="9">// Can't use sc.More() here else we miss the last character</comment>
	<for pos:line="313" pos:column="9">for (<init pos:line="313" pos:column="14">;</init> <condition pos:line="313" pos:column="16">;</condition> <incr><expr><call><name><name pos:line="313" pos:column="18">sc</name><op:operator pos:line="313" pos:column="20">.</op:operator><name pos:line="313" pos:column="21">Forward</name></name><argument_list pos:line="313" pos:column="28">()</argument_list></call></expr></incr>) <block pos:line="313" pos:column="32">{
		<if pos:line="314" pos:column="17">if <condition pos:line="314" pos:column="20">(<expr><name><name pos:line="314" pos:column="21">sc</name><op:operator pos:line="314" pos:column="23">.</op:operator><name pos:line="314" pos:column="24">state</name></name> <op:operator pos:line="314" pos:column="30">==</op:operator> <name pos:line="314" pos:column="33">SCE_B_IDENTIFIER</name></expr>)</condition><then pos:line="314" pos:column="50"> <block pos:line="314" pos:column="51">{
			<if pos:line="315" pos:column="25">if <condition pos:line="315" pos:column="28">(<expr><op:operator pos:line="315" pos:column="29">!</op:operator><call><name pos:line="315" pos:column="30">IsIdentifier</name><argument_list pos:line="315" pos:column="42">(<argument><expr><name><name pos:line="315" pos:column="43">sc</name><op:operator pos:line="315" pos:column="45">.</op:operator><name pos:line="315" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="315" pos:column="50"> <block pos:line="315" pos:column="51">{
				<comment type="line" pos:line="316" pos:column="33">// Labels</comment>
				<if pos:line="317" pos:column="33">if <condition pos:line="317" pos:column="36">(<expr><name pos:line="317" pos:column="37">wasfirst</name> <op:operator pos:line="317" pos:column="46">&amp;&amp;</op:operator> <call><name><name pos:line="317" pos:column="49">sc</name><op:operator pos:line="317" pos:column="51">.</op:operator><name pos:line="317" pos:column="52">Match</name></name><argument_list pos:line="317" pos:column="57">(<argument><expr><lit:literal type="char" pos:line="317" pos:column="58">':'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="317" pos:column="63"> <block pos:line="317" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="318" pos:column="41">sc</name><op:operator pos:line="318" pos:column="43">.</op:operator><name pos:line="318" pos:column="44">ChangeState</name></name><argument_list pos:line="318" pos:column="55">(<argument><expr><name pos:line="318" pos:column="56">SCE_B_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="319" pos:column="41">sc</name><op:operator pos:line="319" pos:column="43">.</op:operator><name pos:line="319" pos:column="44">ForwardSetState</name></name><argument_list pos:line="319" pos:column="59">(<argument><expr><name pos:line="319" pos:column="60">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="320" pos:column="35">else <block pos:line="320" pos:column="40">{
					<decl_stmt><decl><type><name pos:line="321" pos:column="41">char</name></type> <name><name pos:line="321" pos:column="46">s</name><index pos:line="321" pos:column="47">[<expr><lit:literal type="number" pos:line="321" pos:column="48">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="322" pos:column="41">int</name></type> <name><name pos:line="322" pos:column="45">kstates</name><index pos:line="322" pos:column="52">[<expr><lit:literal type="number" pos:line="322" pos:column="53">4</lit:literal></expr>]</index></name> <init pos:line="322" pos:column="56">= <expr><block pos:line="322" pos:column="58">{
						<expr><name pos:line="323" pos:column="49">SCE_B_KEYWORD</name></expr>,
						<expr><name pos:line="324" pos:column="49">SCE_B_KEYWORD2</name></expr>,
						<expr><name pos:line="325" pos:column="49">SCE_B_KEYWORD3</name></expr>,
						<expr><name pos:line="326" pos:column="49">SCE_B_KEYWORD4</name></expr>,
					}</block></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="328" pos:column="41">sc</name><op:operator pos:line="328" pos:column="43">.</op:operator><name pos:line="328" pos:column="44">GetCurrentLowered</name></name><argument_list pos:line="328" pos:column="61">(<argument><expr><name pos:line="328" pos:column="62">s</name></expr></argument>, <argument><expr><sizeof pos:line="328" pos:column="65">sizeof<argument_list pos:line="328" pos:column="71">(<argument><expr><name pos:line="328" pos:column="72">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<for pos:line="329" pos:column="41">for (<init><decl><type><name pos:line="329" pos:column="46">int</name></type> <name pos:line="329" pos:column="50">i</name> <init pos:line="329" pos:column="52">= <expr><lit:literal type="number" pos:line="329" pos:column="54">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="329" pos:column="57">i</name> <op:operator pos:line="329" pos:column="59">&lt;</op:operator> <lit:literal type="number" pos:line="329" pos:column="61">4</lit:literal></expr>;</condition> <incr><expr><name pos:line="329" pos:column="64">i</name><op:operator pos:line="329" pos:column="65">++</op:operator></expr></incr>) <block pos:line="329" pos:column="69">{
						<if pos:line="330" pos:column="49">if <condition pos:line="330" pos:column="52">(<expr><name><name pos:line="330" pos:column="53">keywordlists</name><index pos:line="330" pos:column="65">[<expr><name pos:line="330" pos:column="66">i</name></expr>]</index></name><op:operator pos:line="330" pos:column="68">.</op:operator><call><name pos:line="330" pos:column="69">InList</name><argument_list pos:line="330" pos:column="75">(<argument><expr><name pos:line="330" pos:column="76">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="330" pos:column="79"> <block pos:line="330" pos:column="80">{
							<expr_stmt><expr><call><name><name pos:line="331" pos:column="57">sc</name><op:operator pos:line="331" pos:column="59">.</op:operator><name pos:line="331" pos:column="60">ChangeState</name></name><argument_list pos:line="331" pos:column="71">(<argument><expr><name><name pos:line="331" pos:column="72">kstates</name><index pos:line="331" pos:column="79">[<expr><name pos:line="331" pos:column="80">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></for>
					<comment type="line" pos:line="334" pos:column="41">// Types, must set them as operator else they will be</comment>
					<comment type="line" pos:line="335" pos:column="41">// matched as number/constant</comment>
					<if pos:line="336" pos:column="41">if <condition pos:line="336" pos:column="44">(<expr><call><name><name pos:line="336" pos:column="45">sc</name><op:operator pos:line="336" pos:column="47">.</op:operator><name pos:line="336" pos:column="48">Match</name></name><argument_list pos:line="336" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="336" pos:column="54">'.'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="336" pos:column="59">||</op:operator> <call><name><name pos:line="336" pos:column="62">sc</name><op:operator pos:line="336" pos:column="64">.</op:operator><name pos:line="336" pos:column="65">Match</name></name><argument_list pos:line="336" pos:column="70">(<argument><expr><lit:literal type="char" pos:line="336" pos:column="71">'$'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="336" pos:column="76">||</op:operator> <call><name><name pos:line="336" pos:column="79">sc</name><op:operator pos:line="336" pos:column="81">.</op:operator><name pos:line="336" pos:column="82">Match</name></name><argument_list pos:line="336" pos:column="87">(<argument><expr><lit:literal type="char" pos:line="336" pos:column="88">'%'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="336" pos:column="93">||</op:operator>
						<call><name><name pos:line="337" pos:column="49">sc</name><op:operator pos:line="337" pos:column="51">.</op:operator><name pos:line="337" pos:column="52">Match</name></name><argument_list pos:line="337" pos:column="57">(<argument><expr><lit:literal type="char" pos:line="337" pos:column="58">'#'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="337" pos:column="63"> <block pos:line="337" pos:column="64">{
						<expr_stmt><expr><call><name><name pos:line="338" pos:column="49">sc</name><op:operator pos:line="338" pos:column="51">.</op:operator><name pos:line="338" pos:column="52">SetState</name></name><argument_list pos:line="338" pos:column="60">(<argument><expr><name pos:line="338" pos:column="61">SCE_B_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="339" pos:column="43">else <block pos:line="339" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="340" pos:column="49">sc</name><op:operator pos:line="340" pos:column="51">.</op:operator><name pos:line="340" pos:column="52">SetState</name></name><argument_list pos:line="340" pos:column="60">(<argument><expr><name pos:line="340" pos:column="61">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="344" pos:column="19">else <if pos:line="344" pos:column="24">if <condition pos:line="344" pos:column="27">(<expr><name><name pos:line="344" pos:column="28">sc</name><op:operator pos:line="344" pos:column="30">.</op:operator><name pos:line="344" pos:column="31">state</name></name> <op:operator pos:line="344" pos:column="37">==</op:operator> <name pos:line="344" pos:column="40">SCE_B_OPERATOR</name></expr>)</condition><then pos:line="344" pos:column="55"> <block pos:line="344" pos:column="56">{
			<if pos:line="345" pos:column="25">if <condition pos:line="345" pos:column="28">(<expr><op:operator pos:line="345" pos:column="29">!</op:operator><call><name pos:line="345" pos:column="30">IsOperator</name><argument_list pos:line="345" pos:column="40">(<argument><expr><name><name pos:line="345" pos:column="41">sc</name><op:operator pos:line="345" pos:column="43">.</op:operator><name pos:line="345" pos:column="44">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="345" pos:column="48">||</op:operator> <call><name><name pos:line="345" pos:column="51">sc</name><op:operator pos:line="345" pos:column="53">.</op:operator><name pos:line="345" pos:column="54">Match</name></name><argument_list pos:line="345" pos:column="59">(<argument><expr><lit:literal type="char" pos:line="345" pos:column="60">'#'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="345" pos:column="65">
				<expr_stmt><expr><call><name><name pos:line="346" pos:column="33">sc</name><op:operator pos:line="346" pos:column="35">.</op:operator><name pos:line="346" pos:column="36">SetState</name></name><argument_list pos:line="346" pos:column="44">(<argument><expr><name pos:line="346" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="347" pos:column="19">else <if pos:line="347" pos:column="24">if <condition pos:line="347" pos:column="27">(<expr><name><name pos:line="347" pos:column="28">sc</name><op:operator pos:line="347" pos:column="30">.</op:operator><name pos:line="347" pos:column="31">state</name></name> <op:operator pos:line="347" pos:column="37">==</op:operator> <name pos:line="347" pos:column="40">SCE_B_LABEL</name></expr>)</condition><then pos:line="347" pos:column="52"> <block pos:line="347" pos:column="53">{
			<if pos:line="348" pos:column="25">if <condition pos:line="348" pos:column="28">(<expr><op:operator pos:line="348" pos:column="29">!</op:operator><call><name pos:line="348" pos:column="30">IsIdentifier</name><argument_list pos:line="348" pos:column="42">(<argument><expr><name><name pos:line="348" pos:column="43">sc</name><op:operator pos:line="348" pos:column="45">.</op:operator><name pos:line="348" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="348" pos:column="50">
				<expr_stmt><expr><call><name><name pos:line="349" pos:column="33">sc</name><op:operator pos:line="349" pos:column="35">.</op:operator><name pos:line="349" pos:column="36">SetState</name></name><argument_list pos:line="349" pos:column="44">(<argument><expr><name pos:line="349" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="350" pos:column="19">else <if pos:line="350" pos:column="24">if <condition pos:line="350" pos:column="27">(<expr><name><name pos:line="350" pos:column="28">sc</name><op:operator pos:line="350" pos:column="30">.</op:operator><name pos:line="350" pos:column="31">state</name></name> <op:operator pos:line="350" pos:column="37">==</op:operator> <name pos:line="350" pos:column="40">SCE_B_CONSTANT</name></expr>)</condition><then pos:line="350" pos:column="55"> <block pos:line="350" pos:column="56">{
			<if pos:line="351" pos:column="25">if <condition pos:line="351" pos:column="28">(<expr><op:operator pos:line="351" pos:column="29">!</op:operator><call><name pos:line="351" pos:column="30">IsIdentifier</name><argument_list pos:line="351" pos:column="42">(<argument><expr><name><name pos:line="351" pos:column="43">sc</name><op:operator pos:line="351" pos:column="45">.</op:operator><name pos:line="351" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="351" pos:column="50">
				<expr_stmt><expr><call><name><name pos:line="352" pos:column="33">sc</name><op:operator pos:line="352" pos:column="35">.</op:operator><name pos:line="352" pos:column="36">SetState</name></name><argument_list pos:line="352" pos:column="44">(<argument><expr><name pos:line="352" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="353" pos:column="19">else <if pos:line="353" pos:column="24">if <condition pos:line="353" pos:column="27">(<expr><name><name pos:line="353" pos:column="28">sc</name><op:operator pos:line="353" pos:column="30">.</op:operator><name pos:line="353" pos:column="31">state</name></name> <op:operator pos:line="353" pos:column="37">==</op:operator> <name pos:line="353" pos:column="40">SCE_B_NUMBER</name></expr>)</condition><then pos:line="353" pos:column="53"> <block pos:line="353" pos:column="54">{
			<if pos:line="354" pos:column="25">if <condition pos:line="354" pos:column="28">(<expr><op:operator pos:line="354" pos:column="29">!</op:operator><call><name pos:line="354" pos:column="30">IsDigit</name><argument_list pos:line="354" pos:column="37">(<argument><expr><name><name pos:line="354" pos:column="38">sc</name><op:operator pos:line="354" pos:column="40">.</op:operator><name pos:line="354" pos:column="41">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="354" pos:column="45">
				<expr_stmt><expr><call><name><name pos:line="355" pos:column="33">sc</name><op:operator pos:line="355" pos:column="35">.</op:operator><name pos:line="355" pos:column="36">SetState</name></name><argument_list pos:line="355" pos:column="44">(<argument><expr><name pos:line="355" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="356" pos:column="19">else <if pos:line="356" pos:column="24">if <condition pos:line="356" pos:column="27">(<expr><name><name pos:line="356" pos:column="28">sc</name><op:operator pos:line="356" pos:column="30">.</op:operator><name pos:line="356" pos:column="31">state</name></name> <op:operator pos:line="356" pos:column="37">==</op:operator> <name pos:line="356" pos:column="40">SCE_B_HEXNUMBER</name></expr>)</condition><then pos:line="356" pos:column="56"> <block pos:line="356" pos:column="57">{
			<if pos:line="357" pos:column="25">if <condition pos:line="357" pos:column="28">(<expr><op:operator pos:line="357" pos:column="29">!</op:operator><call><name pos:line="357" pos:column="30">IsHexDigit</name><argument_list pos:line="357" pos:column="40">(<argument><expr><name><name pos:line="357" pos:column="41">sc</name><op:operator pos:line="357" pos:column="43">.</op:operator><name pos:line="357" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="357" pos:column="48">
				<expr_stmt><expr><call><name><name pos:line="358" pos:column="33">sc</name><op:operator pos:line="358" pos:column="35">.</op:operator><name pos:line="358" pos:column="36">SetState</name></name><argument_list pos:line="358" pos:column="44">(<argument><expr><name pos:line="358" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="359" pos:column="19">else <if pos:line="359" pos:column="24">if <condition pos:line="359" pos:column="27">(<expr><name><name pos:line="359" pos:column="28">sc</name><op:operator pos:line="359" pos:column="30">.</op:operator><name pos:line="359" pos:column="31">state</name></name> <op:operator pos:line="359" pos:column="37">==</op:operator> <name pos:line="359" pos:column="40">SCE_B_BINNUMBER</name></expr>)</condition><then pos:line="359" pos:column="56"> <block pos:line="359" pos:column="57">{
			<if pos:line="360" pos:column="25">if <condition pos:line="360" pos:column="28">(<expr><op:operator pos:line="360" pos:column="29">!</op:operator><call><name pos:line="360" pos:column="30">IsBinDigit</name><argument_list pos:line="360" pos:column="40">(<argument><expr><name><name pos:line="360" pos:column="41">sc</name><op:operator pos:line="360" pos:column="43">.</op:operator><name pos:line="360" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="360" pos:column="48">
				<expr_stmt><expr><call><name><name pos:line="361" pos:column="33">sc</name><op:operator pos:line="361" pos:column="35">.</op:operator><name pos:line="361" pos:column="36">SetState</name></name><argument_list pos:line="361" pos:column="44">(<argument><expr><name pos:line="361" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="362" pos:column="19">else <if pos:line="362" pos:column="24">if <condition pos:line="362" pos:column="27">(<expr><name><name pos:line="362" pos:column="28">sc</name><op:operator pos:line="362" pos:column="30">.</op:operator><name pos:line="362" pos:column="31">state</name></name> <op:operator pos:line="362" pos:column="37">==</op:operator> <name pos:line="362" pos:column="40">SCE_B_STRING</name></expr>)</condition><then pos:line="362" pos:column="53"> <block pos:line="362" pos:column="54">{
			<if pos:line="363" pos:column="25">if <condition pos:line="363" pos:column="28">(<expr><name><name pos:line="363" pos:column="29">sc</name><op:operator pos:line="363" pos:column="31">.</op:operator><name pos:line="363" pos:column="32">ch</name></name> <op:operator pos:line="363" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="363" pos:column="38">'"'</lit:literal></expr>)</condition><then pos:line="363" pos:column="42"> <block pos:line="363" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="364" pos:column="33">sc</name><op:operator pos:line="364" pos:column="35">.</op:operator><name pos:line="364" pos:column="36">ForwardSetState</name></name><argument_list pos:line="364" pos:column="51">(<argument><expr><name pos:line="364" pos:column="52">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="366" pos:column="25">if <condition pos:line="366" pos:column="28">(<expr><name><name pos:line="366" pos:column="29">sc</name><op:operator pos:line="366" pos:column="31">.</op:operator><name pos:line="366" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="366" pos:column="42"> <block pos:line="366" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="367" pos:column="33">sc</name><op:operator pos:line="367" pos:column="35">.</op:operator><name pos:line="367" pos:column="36">ChangeState</name></name><argument_list pos:line="367" pos:column="47">(<argument><expr><name pos:line="367" pos:column="48">SCE_B_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="368" pos:column="33">sc</name><op:operator pos:line="368" pos:column="35">.</op:operator><name pos:line="368" pos:column="36">SetState</name></name><argument_list pos:line="368" pos:column="44">(<argument><expr><name pos:line="368" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="370" pos:column="19">else <if pos:line="370" pos:column="24">if <condition pos:line="370" pos:column="27">(<expr><name><name pos:line="370" pos:column="28">sc</name><op:operator pos:line="370" pos:column="30">.</op:operator><name pos:line="370" pos:column="31">state</name></name> <op:operator pos:line="370" pos:column="37">==</op:operator> <name pos:line="370" pos:column="40">SCE_B_COMMENT</name> <op:operator pos:line="370" pos:column="54">||</op:operator> <name><name pos:line="370" pos:column="57">sc</name><op:operator pos:line="370" pos:column="59">.</op:operator><name pos:line="370" pos:column="60">state</name></name> <op:operator pos:line="370" pos:column="66">==</op:operator> <name pos:line="370" pos:column="69">SCE_B_PREPROCESSOR</name></expr>)</condition><then pos:line="370" pos:column="88"> <block pos:line="370" pos:column="89">{
			<if pos:line="371" pos:column="25">if <condition pos:line="371" pos:column="28">(<expr><name><name pos:line="371" pos:column="29">sc</name><op:operator pos:line="371" pos:column="31">.</op:operator><name pos:line="371" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="371" pos:column="42"> <block pos:line="371" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="372" pos:column="33">sc</name><op:operator pos:line="372" pos:column="35">.</op:operator><name pos:line="372" pos:column="36">SetState</name></name><argument_list pos:line="372" pos:column="44">(<argument><expr><name pos:line="372" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<if pos:line="376" pos:column="17">if <condition pos:line="376" pos:column="20">(<expr><name><name pos:line="376" pos:column="21">sc</name><op:operator pos:line="376" pos:column="23">.</op:operator><name pos:line="376" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="376" pos:column="36">
			<expr_stmt><expr><name pos:line="377" pos:column="25">isfirst</name> <op:operator pos:line="377" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="377" pos:column="35">true</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="379" pos:column="17">if <condition pos:line="379" pos:column="20">(<expr><name><name pos:line="379" pos:column="21">sc</name><op:operator pos:line="379" pos:column="23">.</op:operator><name pos:line="379" pos:column="24">state</name></name> <op:operator pos:line="379" pos:column="30">==</op:operator> <name pos:line="379" pos:column="33">SCE_B_DEFAULT</name> <op:operator pos:line="379" pos:column="47">||</op:operator> <name><name pos:line="379" pos:column="50">sc</name><op:operator pos:line="379" pos:column="52">.</op:operator><name pos:line="379" pos:column="53">state</name></name> <op:operator pos:line="379" pos:column="59">==</op:operator> <name pos:line="379" pos:column="62">SCE_B_ERROR</name></expr>)</condition><then pos:line="379" pos:column="74"> <block pos:line="379" pos:column="75">{
			<if pos:line="380" pos:column="25">if <condition pos:line="380" pos:column="28">(<expr><name pos:line="380" pos:column="29">isfirst</name> <op:operator pos:line="380" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="380" pos:column="40">sc</name><op:operator pos:line="380" pos:column="42">.</op:operator><name pos:line="380" pos:column="43">Match</name></name><argument_list pos:line="380" pos:column="48">(<argument><expr><lit:literal type="char" pos:line="380" pos:column="49">'.'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="380" pos:column="54"> <block pos:line="380" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="381" pos:column="33">sc</name><op:operator pos:line="381" pos:column="35">.</op:operator><name pos:line="381" pos:column="36">SetState</name></name><argument_list pos:line="381" pos:column="44">(<argument><expr><name pos:line="381" pos:column="45">SCE_B_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="382" pos:column="27">else <if pos:line="382" pos:column="32">if <condition pos:line="382" pos:column="35">(<expr><name pos:line="382" pos:column="36">isfirst</name> <op:operator pos:line="382" pos:column="44">&amp;&amp;</op:operator> <call><name><name pos:line="382" pos:column="47">sc</name><op:operator pos:line="382" pos:column="49">.</op:operator><name pos:line="382" pos:column="50">Match</name></name><argument_list pos:line="382" pos:column="55">(<argument><expr><lit:literal type="char" pos:line="382" pos:column="56">'#'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="382" pos:column="61"> <block pos:line="382" pos:column="62">{
				<expr_stmt><expr><name pos:line="383" pos:column="33">wasfirst</name> <op:operator pos:line="383" pos:column="42">=</op:operator> <name pos:line="383" pos:column="44">isfirst</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="384" pos:column="33">sc</name><op:operator pos:line="384" pos:column="35">.</op:operator><name pos:line="384" pos:column="36">SetState</name></name><argument_list pos:line="384" pos:column="44">(<argument><expr><name pos:line="384" pos:column="45">SCE_B_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="385" pos:column="27">else <if pos:line="385" pos:column="32">if <condition pos:line="385" pos:column="35">(<expr><call><name><name pos:line="385" pos:column="36">sc</name><op:operator pos:line="385" pos:column="38">.</op:operator><name pos:line="385" pos:column="39">Match</name></name><argument_list pos:line="385" pos:column="44">(<argument><expr><name pos:line="385" pos:column="45">comment_char</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="385" pos:column="59"> <block pos:line="385" pos:column="60">{
				<comment type="line" pos:line="386" pos:column="33">// Hack to make deprecated QBASIC '$Include show</comment>
				<comment type="line" pos:line="387" pos:column="33">// up in freebasic with SCE_B_PREPROCESSOR.</comment>
				<if pos:line="388" pos:column="33">if <condition pos:line="388" pos:column="36">(<expr><name pos:line="388" pos:column="37">comment_char</name> <op:operator pos:line="388" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="388" pos:column="53">'\''</lit:literal> <op:operator pos:line="388" pos:column="58">&amp;&amp;</op:operator> <call><name><name pos:line="388" pos:column="61">sc</name><op:operator pos:line="388" pos:column="63">.</op:operator><name pos:line="388" pos:column="64">Match</name></name><argument_list pos:line="388" pos:column="69">(<argument><expr><name pos:line="388" pos:column="70">comment_char</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="388" pos:column="84">'$'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="388" pos:column="89">
					<expr_stmt><expr><call><name><name pos:line="389" pos:column="41">sc</name><op:operator pos:line="389" pos:column="43">.</op:operator><name pos:line="389" pos:column="44">SetState</name></name><argument_list pos:line="389" pos:column="52">(<argument><expr><name pos:line="389" pos:column="53">SCE_B_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="390" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="391" pos:column="41">sc</name><op:operator pos:line="391" pos:column="43">.</op:operator><name pos:line="391" pos:column="44">SetState</name></name><argument_list pos:line="391" pos:column="52">(<argument><expr><name pos:line="391" pos:column="53">SCE_B_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then> <else pos:line="392" pos:column="27">else <if pos:line="392" pos:column="32">if <condition pos:line="392" pos:column="35">(<expr><call><name><name pos:line="392" pos:column="36">sc</name><op:operator pos:line="392" pos:column="38">.</op:operator><name pos:line="392" pos:column="39">Match</name></name><argument_list pos:line="392" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="392" pos:column="45">'"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="392" pos:column="50"> <block pos:line="392" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="393" pos:column="33">sc</name><op:operator pos:line="393" pos:column="35">.</op:operator><name pos:line="393" pos:column="36">SetState</name></name><argument_list pos:line="393" pos:column="44">(<argument><expr><name pos:line="393" pos:column="45">SCE_B_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="394" pos:column="27">else <if pos:line="394" pos:column="32">if <condition pos:line="394" pos:column="35">(<expr><call><name pos:line="394" pos:column="36">IsDigit</name><argument_list pos:line="394" pos:column="43">(<argument><expr><name><name pos:line="394" pos:column="44">sc</name><op:operator pos:line="394" pos:column="46">.</op:operator><name pos:line="394" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="394" pos:column="51"> <block pos:line="394" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="395" pos:column="33">sc</name><op:operator pos:line="395" pos:column="35">.</op:operator><name pos:line="395" pos:column="36">SetState</name></name><argument_list pos:line="395" pos:column="44">(<argument><expr><name pos:line="395" pos:column="45">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="396" pos:column="27">else <if pos:line="396" pos:column="32">if <condition pos:line="396" pos:column="35">(<expr><call><name><name pos:line="396" pos:column="36">sc</name><op:operator pos:line="396" pos:column="38">.</op:operator><name pos:line="396" pos:column="39">Match</name></name><argument_list pos:line="396" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="396" pos:column="45">'$'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="396" pos:column="50"> <block pos:line="396" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="397" pos:column="33">sc</name><op:operator pos:line="397" pos:column="35">.</op:operator><name pos:line="397" pos:column="36">SetState</name></name><argument_list pos:line="397" pos:column="44">(<argument><expr><name pos:line="397" pos:column="45">SCE_B_HEXNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="398" pos:column="27">else <if pos:line="398" pos:column="32">if <condition pos:line="398" pos:column="35">(<expr><call><name><name pos:line="398" pos:column="36">sc</name><op:operator pos:line="398" pos:column="38">.</op:operator><name pos:line="398" pos:column="39">Match</name></name><argument_list pos:line="398" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="398" pos:column="45">'%'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="398" pos:column="50"> <block pos:line="398" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="399" pos:column="33">sc</name><op:operator pos:line="399" pos:column="35">.</op:operator><name pos:line="399" pos:column="36">SetState</name></name><argument_list pos:line="399" pos:column="44">(<argument><expr><name pos:line="399" pos:column="45">SCE_B_BINNUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="400" pos:column="27">else <if pos:line="400" pos:column="32">if <condition pos:line="400" pos:column="35">(<expr><call><name><name pos:line="400" pos:column="36">sc</name><op:operator pos:line="400" pos:column="38">.</op:operator><name pos:line="400" pos:column="39">Match</name></name><argument_list pos:line="400" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="400" pos:column="45">'#'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="400" pos:column="50"> <block pos:line="400" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="401" pos:column="33">sc</name><op:operator pos:line="401" pos:column="35">.</op:operator><name pos:line="401" pos:column="36">SetState</name></name><argument_list pos:line="401" pos:column="44">(<argument><expr><name pos:line="401" pos:column="45">SCE_B_CONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="402" pos:column="27">else <if pos:line="402" pos:column="32">if <condition pos:line="402" pos:column="35">(<expr><call><name pos:line="402" pos:column="36">IsOperator</name><argument_list pos:line="402" pos:column="46">(<argument><expr><name><name pos:line="402" pos:column="47">sc</name><op:operator pos:line="402" pos:column="49">.</op:operator><name pos:line="402" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="402" pos:column="54"> <block pos:line="402" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="403" pos:column="33">sc</name><op:operator pos:line="403" pos:column="35">.</op:operator><name pos:line="403" pos:column="36">SetState</name></name><argument_list pos:line="403" pos:column="44">(<argument><expr><name pos:line="403" pos:column="45">SCE_B_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="404" pos:column="27">else <if pos:line="404" pos:column="32">if <condition pos:line="404" pos:column="35">(<expr><call><name pos:line="404" pos:column="36">IsIdentifier</name><argument_list pos:line="404" pos:column="48">(<argument><expr><name><name pos:line="404" pos:column="49">sc</name><op:operator pos:line="404" pos:column="51">.</op:operator><name pos:line="404" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="404" pos:column="56"> <block pos:line="404" pos:column="57">{
				<expr_stmt><expr><name pos:line="405" pos:column="33">wasfirst</name> <op:operator pos:line="405" pos:column="42">=</op:operator> <name pos:line="405" pos:column="44">isfirst</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="406" pos:column="33">sc</name><op:operator pos:line="406" pos:column="35">.</op:operator><name pos:line="406" pos:column="36">SetState</name></name><argument_list pos:line="406" pos:column="44">(<argument><expr><name pos:line="406" pos:column="45">SCE_B_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="407" pos:column="27">else <if pos:line="407" pos:column="32">if <condition pos:line="407" pos:column="35">(<expr><op:operator pos:line="407" pos:column="36">!</op:operator><call><name pos:line="407" pos:column="37">IsSpace</name><argument_list pos:line="407" pos:column="44">(<argument><expr><name><name pos:line="407" pos:column="45">sc</name><op:operator pos:line="407" pos:column="47">.</op:operator><name pos:line="407" pos:column="48">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="407" pos:column="52"> <block pos:line="407" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="408" pos:column="33">sc</name><op:operator pos:line="408" pos:column="35">.</op:operator><name pos:line="408" pos:column="36">SetState</name></name><argument_list pos:line="408" pos:column="44">(<argument><expr><name pos:line="408" pos:column="45">SCE_B_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

		<if pos:line="412" pos:column="17">if <condition pos:line="412" pos:column="20">(<expr><op:operator pos:line="412" pos:column="21">!</op:operator><call><name pos:line="412" pos:column="22">IsSpace</name><argument_list pos:line="412" pos:column="29">(<argument><expr><name><name pos:line="412" pos:column="30">sc</name><op:operator pos:line="412" pos:column="32">.</op:operator><name pos:line="412" pos:column="33">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="412" pos:column="37">
			<expr_stmt><expr><name pos:line="413" pos:column="25">isfirst</name> <op:operator pos:line="413" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="413" pos:column="35">false</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="415" pos:column="17">if <condition pos:line="415" pos:column="20">(<expr><op:operator pos:line="415" pos:column="21">!</op:operator><call><name><name pos:line="415" pos:column="22">sc</name><op:operator pos:line="415" pos:column="24">.</op:operator><name pos:line="415" pos:column="25">More</name></name><argument_list pos:line="415" pos:column="29">()</argument_list></call></expr>)</condition><then pos:line="415" pos:column="32">
			<break pos:line="416" pos:column="25">break;</break></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="418" pos:column="9">sc</name><op:operator pos:line="418" pos:column="11">.</op:operator><name pos:line="418" pos:column="12">Complete</name></name><argument_list pos:line="418" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="422" pos:column="1">void</name> <name pos:line="422" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="422" pos:column="17">LexerBasic</name><op:operator pos:line="422" pos:column="27">::</op:operator><name pos:line="422" pos:column="29">Fold</name></name><parameter_list pos:line="422" pos:column="33">(<param><decl><type><name pos:line="422" pos:column="34">unsigned</name> <name pos:line="422" pos:column="43">int</name></type> <name pos:line="422" pos:column="47">startPos</name></decl></param>, <param><decl><type><name pos:line="422" pos:column="57">int</name></type> <name pos:line="422" pos:column="61">length</name></decl></param>, <param><decl><type><name pos:line="422" pos:column="69">int</name></type></decl></param> <comment type="block" pos:line="422" pos:column="73">/* initStyle */</comment>, <param><decl><type><name pos:line="422" pos:column="90">IDocument</name> <type:modifier pos:line="422" pos:column="100">*</type:modifier></type><name pos:line="422" pos:column="101">pAccess</name></decl></param>)</parameter_list> <block pos:line="422" pos:column="110">{

	<if pos:line="424" pos:column="9">if <condition pos:line="424" pos:column="12">(<expr><op:operator pos:line="424" pos:column="13">!</op:operator><name><name pos:line="424" pos:column="14">options</name><op:operator pos:line="424" pos:column="21">.</op:operator><name pos:line="424" pos:column="22">fold</name></name></expr>)</condition><then pos:line="424" pos:column="27">
		<return pos:line="425" pos:column="17">return;</return></then></if>

	<function_decl><type><name pos:line="427" pos:column="9">LexAccessor</name></type> <name pos:line="427" pos:column="21">styler</name><parameter_list pos:line="427" pos:column="27">(<param><decl><type><name pos:line="427" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="429" pos:column="9">int</name></type> <name pos:line="429" pos:column="13">line</name> <init pos:line="429" pos:column="18">= <expr><call><name><name pos:line="429" pos:column="20">styler</name><op:operator pos:line="429" pos:column="26">.</op:operator><name pos:line="429" pos:column="27">GetLine</name></name><argument_list pos:line="429" pos:column="34">(<argument><expr><name pos:line="429" pos:column="35">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="430" pos:column="9">int</name></type> <name pos:line="430" pos:column="13">level</name> <init pos:line="430" pos:column="19">= <expr><call><name><name pos:line="430" pos:column="21">styler</name><op:operator pos:line="430" pos:column="27">.</op:operator><name pos:line="430" pos:column="28">LevelAt</name></name><argument_list pos:line="430" pos:column="35">(<argument><expr><name pos:line="430" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="431" pos:column="9">int</name></type> <name pos:line="431" pos:column="13">go</name> <init pos:line="431" pos:column="16">= <expr><lit:literal type="number" pos:line="431" pos:column="18">0</lit:literal></expr></init><op:operator pos:line="431" pos:column="19">,</op:operator> <name pos:line="431" pos:column="21">done</name> <init pos:line="431" pos:column="26">= <expr><lit:literal type="number" pos:line="431" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="432" pos:column="9">int</name></type> <name pos:line="432" pos:column="13">endPos</name> <init pos:line="432" pos:column="20">= <expr><name pos:line="432" pos:column="22">startPos</name> <op:operator pos:line="432" pos:column="31">+</op:operator> <name pos:line="432" pos:column="33">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="433" pos:column="9">char</name></type> <name><name pos:line="433" pos:column="14">word</name><index pos:line="433" pos:column="18">[<expr><lit:literal type="number" pos:line="433" pos:column="19">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="434" pos:column="9">int</name></type> <name pos:line="434" pos:column="13">wordlen</name> <init pos:line="434" pos:column="21">= <expr><lit:literal type="number" pos:line="434" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="435" pos:column="9">const</specifier> <name pos:line="435" pos:column="15">bool</name></type> <name pos:line="435" pos:column="20">userDefinedFoldMarkers</name> <init pos:line="435" pos:column="43">= <expr><op:operator pos:line="435" pos:column="45">!</op:operator><call><name><name pos:line="435" pos:column="46">options</name><op:operator pos:line="435" pos:column="53">.</op:operator><name pos:line="435" pos:column="54">foldExplicitStart</name><op:operator pos:line="435" pos:column="71">.</op:operator><name pos:line="435" pos:column="72">empty</name></name><argument_list pos:line="435" pos:column="77">()</argument_list></call> <op:operator pos:line="435" pos:column="80">&amp;&amp;</op:operator> <op:operator pos:line="435" pos:column="83">!</op:operator><call><name><name pos:line="435" pos:column="84">options</name><op:operator pos:line="435" pos:column="91">.</op:operator><name pos:line="435" pos:column="92">foldExplicitEnd</name><op:operator pos:line="435" pos:column="107">.</op:operator><name pos:line="435" pos:column="108">empty</name></name><argument_list pos:line="435" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="436" pos:column="9">int</name></type> <name pos:line="436" pos:column="13">cNext</name> <init pos:line="436" pos:column="19">= <expr><name><name pos:line="436" pos:column="21">styler</name><index pos:line="436" pos:column="27">[<expr><name pos:line="436" pos:column="28">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="438" pos:column="9">// Scan for tokens at the start of the line (they may include</comment>
	<comment type="line" pos:line="439" pos:column="9">// whitespace, for tokens like "End Function"</comment>
	<for pos:line="440" pos:column="9">for (<init><decl><type><name pos:line="440" pos:column="14">int</name></type> <name pos:line="440" pos:column="18">i</name> <init pos:line="440" pos:column="20">= <expr><name pos:line="440" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="440" pos:column="32">i</name> <op:operator pos:line="440" pos:column="34">&lt;</op:operator> <name pos:line="440" pos:column="36">endPos</name></expr>;</condition> <incr><expr><name pos:line="440" pos:column="44">i</name><op:operator pos:line="440" pos:column="45">++</op:operator></expr></incr>) <block pos:line="440" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="441" pos:column="17">int</name></type> <name pos:line="441" pos:column="21">c</name> <init pos:line="441" pos:column="23">= <expr><name pos:line="441" pos:column="25">cNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="442" pos:column="17">cNext</name> <op:operator pos:line="442" pos:column="23">=</op:operator> <call><name><name pos:line="442" pos:column="25">styler</name><op:operator pos:line="442" pos:column="31">.</op:operator><name pos:line="442" pos:column="32">SafeGetCharAt</name></name><argument_list pos:line="442" pos:column="45">(<argument><expr><name pos:line="442" pos:column="46">i</name> <op:operator pos:line="442" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="442" pos:column="50">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="443" pos:column="17">bool</name></type> <name pos:line="443" pos:column="22">atEOL</name> <init pos:line="443" pos:column="28">= <expr><op:operator pos:line="443" pos:column="30">(</op:operator><name pos:line="443" pos:column="31">c</name> <op:operator pos:line="443" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="443" pos:column="36">'\r'</lit:literal> <op:operator pos:line="443" pos:column="41">&amp;&amp;</op:operator> <name pos:line="443" pos:column="44">cNext</name> <op:operator pos:line="443" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="443" pos:column="53">'\n'</lit:literal><op:operator pos:line="443" pos:column="57">)</op:operator> <op:operator pos:line="443" pos:column="59">||</op:operator> <op:operator pos:line="443" pos:column="62">(</op:operator><name pos:line="443" pos:column="63">c</name> <op:operator pos:line="443" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="443" pos:column="68">'\n'</lit:literal><op:operator pos:line="443" pos:column="72">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="444" pos:column="17">if <condition pos:line="444" pos:column="20">(<expr><name><name pos:line="444" pos:column="21">options</name><op:operator pos:line="444" pos:column="28">.</op:operator><name pos:line="444" pos:column="29">foldSyntaxBased</name></name> <op:operator pos:line="444" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="444" pos:column="48">!</op:operator><name pos:line="444" pos:column="49">done</name> <op:operator pos:line="444" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="444" pos:column="57">!</op:operator><name pos:line="444" pos:column="58">go</name></expr>)</condition><then pos:line="444" pos:column="61"> <block pos:line="444" pos:column="62">{
			<if pos:line="445" pos:column="25">if <condition pos:line="445" pos:column="28">(<expr><name pos:line="445" pos:column="29">wordlen</name></expr>)</condition><then pos:line="445" pos:column="37"> <block pos:line="445" pos:column="38">{ <comment type="line" pos:line="445" pos:column="40">// are we scanning a token already?</comment>
				<expr_stmt><expr><name><name pos:line="446" pos:column="33">word</name><index pos:line="446" pos:column="37">[<expr><name pos:line="446" pos:column="38">wordlen</name></expr>]</index></name> <op:operator pos:line="446" pos:column="47">=</op:operator> <call><name><name pos:line="446" pos:column="49">static_cast</name><argument_list pos:line="446" pos:column="60">&lt;<argument><expr><name pos:line="446" pos:column="61">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="446" pos:column="66">(<argument><expr><call><name pos:line="446" pos:column="67">LowerCase</name><argument_list pos:line="446" pos:column="76">(<argument><expr><name pos:line="446" pos:column="77">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="447" pos:column="33">if <condition pos:line="447" pos:column="36">(<expr><op:operator pos:line="447" pos:column="37">!</op:operator><call><name pos:line="447" pos:column="38">IsIdentifier</name><argument_list pos:line="447" pos:column="50">(<argument><expr><name pos:line="447" pos:column="51">c</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="447" pos:column="54"> <block pos:line="447" pos:column="55">{ <comment type="line" pos:line="447" pos:column="57">// done with token</comment>
					<expr_stmt><expr><name><name pos:line="448" pos:column="41">word</name><index pos:line="448" pos:column="45">[<expr><name pos:line="448" pos:column="46">wordlen</name></expr>]</index></name> <op:operator pos:line="448" pos:column="55">=</op:operator> <lit:literal type="char" pos:line="448" pos:column="57">'\0'</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="449" pos:column="41">go</name> <op:operator pos:line="449" pos:column="44">=</op:operator> <call><name pos:line="449" pos:column="46">CheckFoldPoint</name><argument_list pos:line="449" pos:column="60">(<argument><expr><name pos:line="449" pos:column="61">word</name></expr></argument>, <argument><expr><name pos:line="449" pos:column="67">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="450" pos:column="41">if <condition pos:line="450" pos:column="44">(<expr><op:operator pos:line="450" pos:column="45">!</op:operator><name pos:line="450" pos:column="46">go</name></expr>)</condition><then pos:line="450" pos:column="49"> <block pos:line="450" pos:column="50">{
						<comment type="line" pos:line="451" pos:column="49">// Treat any whitespace as single blank, for</comment>
						<comment type="line" pos:line="452" pos:column="49">// things like "End   Function".</comment>
						<if pos:line="453" pos:column="49">if <condition pos:line="453" pos:column="52">(<expr><call><name pos:line="453" pos:column="53">IsSpace</name><argument_list pos:line="453" pos:column="60">(<argument><expr><name pos:line="453" pos:column="61">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="453" pos:column="64">&amp;&amp;</op:operator> <call><name pos:line="453" pos:column="67">IsIdentifier</name><argument_list pos:line="453" pos:column="79">(<argument><expr><name><name pos:line="453" pos:column="80">word</name><index pos:line="453" pos:column="84">[<expr><name pos:line="453" pos:column="85">wordlen</name> <op:operator pos:line="453" pos:column="93">-</op:operator> <lit:literal type="number" pos:line="453" pos:column="95">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="453" pos:column="99"> <block pos:line="453" pos:column="100">{
							<expr_stmt><expr><name><name pos:line="454" pos:column="57">word</name><index pos:line="454" pos:column="61">[<expr><name pos:line="454" pos:column="62">wordlen</name></expr>]</index></name> <op:operator pos:line="454" pos:column="71">=</op:operator> <lit:literal type="char" pos:line="454" pos:column="73">' '</lit:literal></expr>;</expr_stmt>
							<if pos:line="455" pos:column="57">if <condition pos:line="455" pos:column="60">(<expr><name pos:line="455" pos:column="61">wordlen</name> <op:operator pos:line="455" pos:column="69">&lt;</op:operator> <lit:literal type="number" pos:line="455" pos:column="71">255</lit:literal></expr>)</condition><then pos:line="455" pos:column="75">
								<expr_stmt><expr><name pos:line="456" pos:column="65">wordlen</name><op:operator pos:line="456" pos:column="72">++</op:operator></expr>;</expr_stmt></then></if>
						}</block></then>
						<else pos:line="458" pos:column="49">else <comment type="line" pos:line="458" pos:column="54">// done with this line</comment>
							<expr_stmt><expr><name pos:line="459" pos:column="57">done</name> <op:operator pos:line="459" pos:column="62">=</op:operator> <lit:literal type="number" pos:line="459" pos:column="64">1</lit:literal></expr>;</expr_stmt></else></if>
					}</block></then></if>
				}</block></then> <else pos:line="461" pos:column="35">else <if pos:line="461" pos:column="40">if <condition pos:line="461" pos:column="43">(<expr><name pos:line="461" pos:column="44">wordlen</name> <op:operator pos:line="461" pos:column="52">&lt;</op:operator> <lit:literal type="number" pos:line="461" pos:column="54">255</lit:literal></expr>)</condition><then pos:line="461" pos:column="58"> <block pos:line="461" pos:column="59">{
					<expr_stmt><expr><name pos:line="462" pos:column="41">wordlen</name><op:operator pos:line="462" pos:column="48">++</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="464" pos:column="27">else <block pos:line="464" pos:column="32">{ <comment type="line" pos:line="464" pos:column="34">// start scanning at first non-whitespace character</comment>
				<if pos:line="465" pos:column="33">if <condition pos:line="465" pos:column="36">(<expr><op:operator pos:line="465" pos:column="37">!</op:operator><call><name pos:line="465" pos:column="38">IsSpace</name><argument_list pos:line="465" pos:column="45">(<argument><expr><name pos:line="465" pos:column="46">c</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="465" pos:column="49"> <block pos:line="465" pos:column="50">{
					<if pos:line="466" pos:column="41">if <condition pos:line="466" pos:column="44">(<expr><call><name pos:line="466" pos:column="45">IsIdentifier</name><argument_list pos:line="466" pos:column="57">(<argument><expr><name pos:line="466" pos:column="58">c</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="466" pos:column="61"> <block pos:line="466" pos:column="62">{
						<expr_stmt><expr><name><name pos:line="467" pos:column="49">word</name><index pos:line="467" pos:column="53">[<expr><lit:literal type="number" pos:line="467" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="467" pos:column="57">=</op:operator> <call><name><name pos:line="467" pos:column="59">static_cast</name><argument_list pos:line="467" pos:column="70">&lt;<argument><expr><name pos:line="467" pos:column="71">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="467" pos:column="76">(<argument><expr><call><name pos:line="467" pos:column="77">LowerCase</name><argument_list pos:line="467" pos:column="86">(<argument><expr><name pos:line="467" pos:column="87">c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="468" pos:column="49">wordlen</name> <op:operator pos:line="468" pos:column="57">=</op:operator> <lit:literal type="number" pos:line="468" pos:column="59">1</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="469" pos:column="43">else <comment type="line" pos:line="469" pos:column="48">// done with this line</comment>
						<expr_stmt><expr><name pos:line="470" pos:column="49">done</name> <op:operator pos:line="470" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="470" pos:column="56">1</lit:literal></expr>;</expr_stmt></else></if>
				}</block></then></if>
			}</block></else></if>
		}</block></then></if>
		<if pos:line="474" pos:column="17">if <condition pos:line="474" pos:column="20">(<expr><name><name pos:line="474" pos:column="21">options</name><op:operator pos:line="474" pos:column="28">.</op:operator><name pos:line="474" pos:column="29">foldCommentExplicit</name></name> <op:operator pos:line="474" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="474" pos:column="52">(</op:operator><op:operator pos:line="474" pos:column="53">(</op:operator><call><name><name pos:line="474" pos:column="54">styler</name><op:operator pos:line="474" pos:column="60">.</op:operator><name pos:line="474" pos:column="61">StyleAt</name></name><argument_list pos:line="474" pos:column="68">(<argument><expr><name pos:line="474" pos:column="69">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="474" pos:column="72">==</op:operator> <name pos:line="474" pos:column="75">SCE_B_COMMENT</name><op:operator pos:line="474" pos:column="88">)</op:operator> <op:operator pos:line="474" pos:column="90">||</op:operator> <name><name pos:line="474" pos:column="93">options</name><op:operator pos:line="474" pos:column="100">.</op:operator><name pos:line="474" pos:column="101">foldExplicitAnywhere</name></name><op:operator pos:line="474" pos:column="121">)</op:operator></expr>)</condition><then pos:line="474" pos:column="123"> <block pos:line="474" pos:column="124">{
			<if pos:line="475" pos:column="25">if <condition pos:line="475" pos:column="28">(<expr><name pos:line="475" pos:column="29">userDefinedFoldMarkers</name></expr>)</condition><then pos:line="475" pos:column="52"> <block pos:line="475" pos:column="53">{
				<if pos:line="476" pos:column="33">if <condition pos:line="476" pos:column="36">(<expr><call><name><name pos:line="476" pos:column="37">styler</name><op:operator pos:line="476" pos:column="43">.</op:operator><name pos:line="476" pos:column="44">Match</name></name><argument_list pos:line="476" pos:column="49">(<argument><expr><name pos:line="476" pos:column="50">i</name></expr></argument>, <argument><expr><call><name><name pos:line="476" pos:column="53">options</name><op:operator pos:line="476" pos:column="60">.</op:operator><name pos:line="476" pos:column="61">foldExplicitStart</name><op:operator pos:line="476" pos:column="78">.</op:operator><name pos:line="476" pos:column="79">c_str</name></name><argument_list pos:line="476" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="476" pos:column="88"> <block pos:line="476" pos:column="89">{
 					<expr_stmt><expr><name pos:line="477" pos:column="41">level</name> <op:operator pos:line="477" pos:column="47">|=</op:operator> <name pos:line="477" pos:column="50">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="478" pos:column="41">go</name> <op:operator pos:line="478" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="478" pos:column="46">1</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="479" pos:column="35">else <if pos:line="479" pos:column="40">if <condition pos:line="479" pos:column="43">(<expr><call><name><name pos:line="479" pos:column="44">styler</name><op:operator pos:line="479" pos:column="50">.</op:operator><name pos:line="479" pos:column="51">Match</name></name><argument_list pos:line="479" pos:column="56">(<argument><expr><name pos:line="479" pos:column="57">i</name></expr></argument>, <argument><expr><call><name><name pos:line="479" pos:column="60">options</name><op:operator pos:line="479" pos:column="67">.</op:operator><name pos:line="479" pos:column="68">foldExplicitEnd</name><op:operator pos:line="479" pos:column="83">.</op:operator><name pos:line="479" pos:column="84">c_str</name></name><argument_list pos:line="479" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="479" pos:column="93"> <block pos:line="479" pos:column="94">{
 					<expr_stmt><expr><name pos:line="480" pos:column="41">go</name> <op:operator pos:line="480" pos:column="44">=</op:operator> <op:operator pos:line="480" pos:column="46">-</op:operator><lit:literal type="number" pos:line="480" pos:column="47">1</lit:literal></expr>;</expr_stmt>
 				}</block></then></if></else></if>
			}</block></then> <else pos:line="482" pos:column="27">else <block pos:line="482" pos:column="32">{
				<if pos:line="483" pos:column="33">if <condition pos:line="483" pos:column="36">(<expr><name pos:line="483" pos:column="37">c</name> <op:operator pos:line="483" pos:column="39">==</op:operator> <name pos:line="483" pos:column="42">comment_char</name></expr>)</condition><then pos:line="483" pos:column="55"> <block pos:line="483" pos:column="56">{
					<if pos:line="484" pos:column="41">if <condition pos:line="484" pos:column="44">(<expr><name pos:line="484" pos:column="45">cNext</name> <op:operator pos:line="484" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="484" pos:column="54">'{'</lit:literal></expr>)</condition><then pos:line="484" pos:column="58"> <block pos:line="484" pos:column="59">{
						<expr_stmt><expr><name pos:line="485" pos:column="49">level</name> <op:operator pos:line="485" pos:column="55">|=</op:operator> <name pos:line="485" pos:column="58">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="486" pos:column="49">go</name> <op:operator pos:line="486" pos:column="52">=</op:operator> <lit:literal type="number" pos:line="486" pos:column="54">1</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="487" pos:column="43">else <if pos:line="487" pos:column="48">if <condition pos:line="487" pos:column="51">(<expr><name pos:line="487" pos:column="52">cNext</name> <op:operator pos:line="487" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="487" pos:column="61">'}'</lit:literal></expr>)</condition><then pos:line="487" pos:column="65"> <block pos:line="487" pos:column="66">{
						<expr_stmt><expr><name pos:line="488" pos:column="49">go</name> <op:operator pos:line="488" pos:column="52">=</op:operator> <op:operator pos:line="488" pos:column="54">-</op:operator><lit:literal type="number" pos:line="488" pos:column="55">1</lit:literal></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then></if>
 			}</block></else></if>
 		}</block></then></if>
		<if pos:line="493" pos:column="17">if <condition pos:line="493" pos:column="20">(<expr><name pos:line="493" pos:column="21">atEOL</name></expr>)</condition><then pos:line="493" pos:column="27"> <block pos:line="493" pos:column="28">{ <comment type="line" pos:line="493" pos:column="30">// line end</comment>
			<if pos:line="494" pos:column="25">if <condition pos:line="494" pos:column="28">(<expr><op:operator pos:line="494" pos:column="29">!</op:operator><name pos:line="494" pos:column="30">done</name> <op:operator pos:line="494" pos:column="35">&amp;&amp;</op:operator> <name pos:line="494" pos:column="38">wordlen</name> <op:operator pos:line="494" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="494" pos:column="49">0</lit:literal> <op:operator pos:line="494" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="494" pos:column="54">options</name><op:operator pos:line="494" pos:column="61">.</op:operator><name pos:line="494" pos:column="62">foldCompact</name></name></expr>)</condition><then pos:line="494" pos:column="74"> <comment type="line" pos:line="494" pos:column="75">// line was only space</comment>
				<expr_stmt><expr><name pos:line="495" pos:column="33">level</name> <op:operator pos:line="495" pos:column="39">|=</op:operator> <name pos:line="495" pos:column="42">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="496" pos:column="25">if <condition pos:line="496" pos:column="28">(<expr><name pos:line="496" pos:column="29">level</name> <op:operator pos:line="496" pos:column="35">!=</op:operator> <call><name><name pos:line="496" pos:column="38">styler</name><op:operator pos:line="496" pos:column="44">.</op:operator><name pos:line="496" pos:column="45">LevelAt</name></name><argument_list pos:line="496" pos:column="52">(<argument><expr><name pos:line="496" pos:column="53">line</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="496" pos:column="59">
				<expr_stmt><expr><call><name><name pos:line="497" pos:column="33">styler</name><op:operator pos:line="497" pos:column="39">.</op:operator><name pos:line="497" pos:column="40">SetLevel</name></name><argument_list pos:line="497" pos:column="48">(<argument><expr><name pos:line="497" pos:column="49">line</name></expr></argument>, <argument><expr><name pos:line="497" pos:column="55">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="498" pos:column="25">level</name> <op:operator pos:line="498" pos:column="31">+=</op:operator> <name pos:line="498" pos:column="34">go</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="499" pos:column="25">line</name><op:operator pos:line="499" pos:column="29">++</op:operator></expr>;</expr_stmt>
			<comment type="line" pos:line="500" pos:column="25">// reset state</comment>
			<expr_stmt><expr><name pos:line="501" pos:column="25">wordlen</name> <op:operator pos:line="501" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="501" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="502" pos:column="25">level</name> <op:operator pos:line="502" pos:column="31">&amp;=</op:operator> <op:operator pos:line="502" pos:column="34">~</op:operator><name pos:line="502" pos:column="35">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="503" pos:column="25">level</name> <op:operator pos:line="503" pos:column="31">&amp;=</op:operator> <op:operator pos:line="503" pos:column="34">~</op:operator><name pos:line="503" pos:column="35">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="504" pos:column="25">go</name> <op:operator pos:line="504" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="504" pos:column="30">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="505" pos:column="25">done</name> <op:operator pos:line="505" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="505" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name pos:line="510" pos:column="1">LexerModule</name></type> <name pos:line="510" pos:column="13">lmBlitzBasic</name><argument_list pos:line="510" pos:column="25">(<argument><expr><name pos:line="510" pos:column="26">SCLEX_BLITZBASIC</name></expr></argument>, <argument><expr><name><name pos:line="510" pos:column="44">LexerBasic</name><op:operator pos:line="510" pos:column="54">::</op:operator><name pos:line="510" pos:column="56">LexerFactoryBlitzBasic</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="510" pos:column="80">"blitzbasic"</lit:literal></expr></argument>, <argument><expr><name pos:line="510" pos:column="94">blitzbasicWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="512" pos:column="1">LexerModule</name></type> <name pos:line="512" pos:column="13">lmPureBasic</name><argument_list pos:line="512" pos:column="24">(<argument><expr><name pos:line="512" pos:column="25">SCLEX_PUREBASIC</name></expr></argument>, <argument><expr><name><name pos:line="512" pos:column="42">LexerBasic</name><op:operator pos:line="512" pos:column="52">::</op:operator><name pos:line="512" pos:column="54">LexerFactoryPureBasic</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="512" pos:column="77">"purebasic"</lit:literal></expr></argument>, <argument><expr><name pos:line="512" pos:column="90">purebasicWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="514" pos:column="1">LexerModule</name></type> <name pos:line="514" pos:column="13">lmFreeBasic</name><argument_list pos:line="514" pos:column="24">(<argument><expr><name pos:line="514" pos:column="25">SCLEX_FREEBASIC</name></expr></argument>, <argument><expr><name><name pos:line="514" pos:column="42">LexerBasic</name><op:operator pos:line="514" pos:column="52">::</op:operator><name pos:line="514" pos:column="54">LexerFactoryFreeBasic</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="514" pos:column="77">"freebasic"</lit:literal></expr></argument>, <argument><expr><name pos:line="514" pos:column="90">freebasicWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
