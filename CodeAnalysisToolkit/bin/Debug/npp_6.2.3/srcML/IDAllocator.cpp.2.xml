<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\PluginsManager\IDAllocator.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// IDAllocator.h code is copyrighted (C) 2010 by Dave Brotherstone</comment>

<comment type="line" pos:line="3" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="4" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="5" pos:column="1">//</comment>
<comment type="line" pos:line="6" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="7" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="8" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="9" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="10" pos:column="1">//</comment>
<comment type="line" pos:line="11" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="12" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="13" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="14" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="15" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="16" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="17" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="18" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="19" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="20" pos:column="1">//</comment>
<comment type="line" pos:line="21" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="22" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="23" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="24" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="25" pos:column="1">//</comment>
<comment type="line" pos:line="26" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="27" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="28" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"IDAllocator.h"</lit:literal></cpp:file></cpp:include>

<constructor><name><name pos:line="35" pos:column="1">IDAllocator</name><op:operator pos:line="35" pos:column="12">::</op:operator><name pos:line="35" pos:column="14">IDAllocator</name></name><parameter_list pos:line="35" pos:column="25">(<param><decl><type><name pos:line="35" pos:column="26">int</name></type> <name pos:line="35" pos:column="30">start</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="37">int</name></type> <name pos:line="35" pos:column="41">maximumID</name></decl></param>)</parameter_list>
	<member_list pos:line="36" pos:column="9">: <call><name pos:line="36" pos:column="11">_start</name><argument_list pos:line="36" pos:column="17">(<argument><expr><name pos:line="36" pos:column="18">start</name></expr></argument>)</argument_list></call><op:operator pos:line="36" pos:column="24">,</op:operator>
	  <call><name pos:line="37" pos:column="11">_nextID</name><argument_list pos:line="37" pos:column="18">(<argument><expr><name pos:line="37" pos:column="19">start</name></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="25">,</op:operator>
	  <call><name pos:line="38" pos:column="11">_maximumID</name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">maximumID</name></expr></argument>)</argument_list></call>
</member_list><block pos:line="39" pos:column="1">{
}</block></constructor>

<function><type><name pos:line="42" pos:column="1">int</name></type> <name><name pos:line="42" pos:column="5">IDAllocator</name><op:operator pos:line="42" pos:column="16">::</op:operator><name pos:line="42" pos:column="18">allocate</name></name><parameter_list pos:line="42" pos:column="26">(<param><decl><type><name pos:line="42" pos:column="27">int</name></type> <name pos:line="42" pos:column="31">quantity</name></decl></param>)</parameter_list>
<block pos:line="43" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">int</name></type> <name pos:line="44" pos:column="13">retVal</name> <init pos:line="44" pos:column="20">= <expr><op:operator pos:line="44" pos:column="22">-</op:operator><lit:literal type="number" pos:line="44" pos:column="23">1</lit:literal></expr></init></decl>;</decl_stmt>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">_nextID</name> <op:operator pos:line="46" pos:column="21">+</op:operator> <name pos:line="46" pos:column="23">quantity</name> <op:operator pos:line="46" pos:column="32">&lt;=</op:operator> <name pos:line="46" pos:column="35">_maximumID</name> <op:operator pos:line="46" pos:column="46">&amp;&amp;</op:operator> <name pos:line="46" pos:column="49">quantity</name> <op:operator pos:line="46" pos:column="58">&gt;</op:operator> <lit:literal type="number" pos:line="46" pos:column="60">0</lit:literal></expr>)</condition><then pos:line="46" pos:column="62">
	<block pos:line="47" pos:column="9">{
		<expr_stmt><expr><name pos:line="48" pos:column="17">retVal</name> <op:operator pos:line="48" pos:column="24">=</op:operator> <name pos:line="48" pos:column="26">_nextID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">_nextID</name> <op:operator pos:line="49" pos:column="25">+=</op:operator> <name pos:line="49" pos:column="28">quantity</name></expr>;</expr_stmt>
	}</block></then></if>

	<return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">retVal</name></expr>;</return>
}</block></function>

	
</unit>
