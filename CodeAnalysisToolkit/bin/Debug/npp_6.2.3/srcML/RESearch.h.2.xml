<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\RESearch.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file RESearch.h
 ** Interface to the regular expression search library.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Written by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// Based on the work of Ozan S. Yigit.</comment>
<comment type="line" pos:line="7" pos:column="1">// This file is in the public domain.</comment>

<cpp:ifndef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifndef</cpp:directive> <name pos:line="9" pos:column="9">RESEARCH_H</name></cpp:ifndef>
<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">RESEARCH_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifdef</cpp:directive> <name pos:line="12" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="13" pos:column="1">namespace <name pos:line="13" pos:column="11">Scintilla</name> <block pos:line="13" pos:column="21">{
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" pos:line="16" pos:column="1">/*
 * The following defines are not meant to be changeable.
 * They are for readability only.
 */</comment>
<cpp:define pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="20" pos:column="9">MAXCHR</name></cpp:macro>	<cpp:value pos:line="20" pos:column="17">256</cpp:value></cpp:define>
<cpp:define pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="21" pos:column="9">CHRBIT</name></cpp:macro>	<cpp:value pos:line="21" pos:column="17">8</cpp:value></cpp:define>
<cpp:define pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="22" pos:column="9">BITBLK</name></cpp:macro>	<cpp:value pos:line="22" pos:column="17">MAXCHR/CHRBIT</cpp:value></cpp:define>

<class pos:line="24" pos:column="1">class <name pos:line="24" pos:column="7">CharacterIndexer</name> <block pos:line="24" pos:column="24">{<private type="default" pos:line="24" pos:column="25">
</private><public pos:line="25" pos:column="1">public:
	<function_decl><type><specifier pos:line="26" pos:column="9">virtual</specifier> <name pos:line="26" pos:column="17">char</name></type> <name pos:line="26" pos:column="22">CharAt</name><parameter_list pos:line="26" pos:column="28">(<param><decl><type><name pos:line="26" pos:column="29">int</name></type> <name pos:line="26" pos:column="33">index</name></decl></param>)</parameter_list>=<lit:literal type="number" pos:line="26" pos:column="40">0</lit:literal>;</function_decl>
	<destructor><specifier pos:line="27" pos:column="9">virtual</specifier> <name pos:line="27" pos:column="17">~<name pos:line="27" pos:column="18">CharacterIndexer</name></name><parameter_list pos:line="27" pos:column="34">()</parameter_list> <block pos:line="27" pos:column="37">{
	}</block></destructor>
</public>}</block>;</class>

<class pos:line="31" pos:column="1">class <name pos:line="31" pos:column="7">RESearch</name> <block pos:line="31" pos:column="16">{<private type="default" pos:line="31" pos:column="17">

</private><public pos:line="33" pos:column="1">public:
	<constructor_decl><name pos:line="34" pos:column="9">RESearch</name><parameter_list pos:line="34" pos:column="17">(<param><decl><type><name pos:line="34" pos:column="18">CharClassify</name> <type:modifier pos:line="34" pos:column="31">*</type:modifier></type><name pos:line="34" pos:column="32">charClassTable</name></decl></param>)</parameter_list>;</constructor_decl>
	<destructor_decl><name pos:line="35" pos:column="9">~<name pos:line="35" pos:column="10">RESearch</name></name><parameter_list pos:line="35" pos:column="18">()</parameter_list>;</destructor_decl>
	<function_decl><type><name pos:line="36" pos:column="9">bool</name></type> <name pos:line="36" pos:column="14">GrabMatches</name><parameter_list pos:line="36" pos:column="25">(<param><decl><type><name pos:line="36" pos:column="26">CharacterIndexer</name> <type:modifier pos:line="36" pos:column="43">&amp;</type:modifier></type><name pos:line="36" pos:column="44">ci</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="37" pos:column="9">const</specifier> <name pos:line="37" pos:column="15">char</name> <type:modifier pos:line="37" pos:column="20">*</type:modifier></type><name pos:line="37" pos:column="21">Compile</name><parameter_list pos:line="37" pos:column="28">(<param><decl><type><specifier pos:line="37" pos:column="29">const</specifier> <name pos:line="37" pos:column="35">char</name> <type:modifier pos:line="37" pos:column="40">*</type:modifier></type><name pos:line="37" pos:column="41">pattern</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="50">int</name></type> <name pos:line="37" pos:column="54">length</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="62">bool</name></type> <name pos:line="37" pos:column="67">caseSensitive</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="82">bool</name></type> <name pos:line="37" pos:column="87">posix</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="38" pos:column="9">int</name></type> <name pos:line="38" pos:column="13">Execute</name><parameter_list pos:line="38" pos:column="20">(<param><decl><type><name pos:line="38" pos:column="21">CharacterIndexer</name> <type:modifier pos:line="38" pos:column="38">&amp;</type:modifier></type><name pos:line="38" pos:column="39">ci</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="43">int</name></type> <name pos:line="38" pos:column="47">lp</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="51">int</name></type> <name pos:line="38" pos:column="55">endp</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="39" pos:column="9">int</name></type> <name pos:line="39" pos:column="13">Substitute</name><parameter_list pos:line="39" pos:column="23">(<param><decl><type><name pos:line="39" pos:column="24">CharacterIndexer</name> <type:modifier pos:line="39" pos:column="41">&amp;</type:modifier></type><name pos:line="39" pos:column="42">ci</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="46">char</name> <type:modifier pos:line="39" pos:column="51">*</type:modifier></type><name pos:line="39" pos:column="52">src</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="57">char</name> <type:modifier pos:line="39" pos:column="62">*</type:modifier></type><name pos:line="39" pos:column="63">dst</name></decl></param>)</parameter_list>;</function_decl>

	<enum pos:line="41" pos:column="9">enum <block pos:line="41" pos:column="14">{ <decl><name pos:line="41" pos:column="16">MAXTAG</name><init pos:line="41" pos:column="22">=<expr><lit:literal type="number" pos:line="41" pos:column="23">10</lit:literal></expr></init></decl> }</block>;</enum>
	<enum pos:line="42" pos:column="9">enum <block pos:line="42" pos:column="14">{ <decl><name pos:line="42" pos:column="16">MAXNFA</name><init pos:line="42" pos:column="22">=<expr><lit:literal type="number" pos:line="42" pos:column="23">2048</lit:literal></expr></init></decl> }</block>;</enum>
	<enum pos:line="43" pos:column="9">enum <block pos:line="43" pos:column="14">{ <decl><name pos:line="43" pos:column="16">NOTFOUND</name><init pos:line="43" pos:column="24">=<expr><op:operator pos:line="43" pos:column="25">-</op:operator><lit:literal type="number" pos:line="43" pos:column="26">1</lit:literal></expr></init></decl> }</block>;</enum>

	<decl_stmt><decl><type><name pos:line="45" pos:column="9">int</name></type> <name><name pos:line="45" pos:column="13">bopat</name><index pos:line="45" pos:column="18">[<expr><name pos:line="45" pos:column="19">MAXTAG</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">int</name></type> <name><name pos:line="46" pos:column="13">eopat</name><index pos:line="46" pos:column="18">[<expr><name pos:line="46" pos:column="19">MAXTAG</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">char</name> <type:modifier pos:line="47" pos:column="14">*</type:modifier></type><name><name pos:line="47" pos:column="15">pat</name><index pos:line="47" pos:column="18">[<expr><name pos:line="47" pos:column="19">MAXTAG</name></expr>]</index></name></decl>;</decl_stmt>

</public><private pos:line="49" pos:column="1">private:
	<function_decl><type><name pos:line="50" pos:column="9">void</name></type> <name pos:line="50" pos:column="14">Init</name><parameter_list pos:line="50" pos:column="18">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="51" pos:column="9">void</name></type> <name pos:line="51" pos:column="14">Clear</name><parameter_list pos:line="51" pos:column="19">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="52" pos:column="9">void</name></type> <name pos:line="52" pos:column="14">ChSet</name><parameter_list pos:line="52" pos:column="19">(<param><decl><type><name pos:line="52" pos:column="20">unsigned</name> <name pos:line="52" pos:column="29">char</name></type> <name pos:line="52" pos:column="34">c</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="53" pos:column="9">void</name></type> <name pos:line="53" pos:column="14">ChSetWithCase</name><parameter_list pos:line="53" pos:column="27">(<param><decl><type><name pos:line="53" pos:column="28">unsigned</name> <name pos:line="53" pos:column="37">char</name></type> <name pos:line="53" pos:column="42">c</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="45">bool</name></type> <name pos:line="53" pos:column="50">caseSensitive</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="54" pos:column="9">int</name></type> <name pos:line="54" pos:column="13">GetBackslashExpression</name><parameter_list pos:line="54" pos:column="35">(<param><decl><type><specifier pos:line="54" pos:column="36">const</specifier> <name pos:line="54" pos:column="42">char</name> <type:modifier pos:line="54" pos:column="47">*</type:modifier></type><name pos:line="54" pos:column="48">pattern</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="57">int</name> <type:modifier pos:line="54" pos:column="61">&amp;</type:modifier></type><name pos:line="54" pos:column="62">incr</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="56" pos:column="9">int</name></type> <name pos:line="56" pos:column="13">PMatch</name><parameter_list pos:line="56" pos:column="19">(<param><decl><type><name pos:line="56" pos:column="20">CharacterIndexer</name> <type:modifier pos:line="56" pos:column="37">&amp;</type:modifier></type><name pos:line="56" pos:column="38">ci</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="42">int</name></type> <name pos:line="56" pos:column="46">lp</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="50">int</name></type> <name pos:line="56" pos:column="54">endp</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="60">char</name> <type:modifier pos:line="56" pos:column="65">*</type:modifier></type><name pos:line="56" pos:column="66">ap</name></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="58" pos:column="9">int</name></type> <name pos:line="58" pos:column="13">bol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">int</name></type> <name><name pos:line="59" pos:column="13">tagstk</name><index pos:line="59" pos:column="19">[<expr><name pos:line="59" pos:column="20">MAXTAG</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="block" pos:line="59" pos:column="30">/* subpat tag stack */</comment>
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">char</name></type> <name><name pos:line="60" pos:column="14">nfa</name><index pos:line="60" pos:column="17">[<expr><name pos:line="60" pos:column="18">MAXNFA</name></expr>]</index></name></decl>;</decl_stmt>    <comment type="block" pos:line="60" pos:column="30">/* automaton */</comment>
	<decl_stmt><decl><type><name pos:line="61" pos:column="9">int</name></type> <name pos:line="61" pos:column="13">sta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="62" pos:column="9">unsigned</name> <name pos:line="62" pos:column="18">char</name></type> <name><name pos:line="62" pos:column="23">bittab</name><index pos:line="62" pos:column="29">[<expr><name pos:line="62" pos:column="30">BITBLK</name></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:line="62" pos:column="39">/* bit table for CCL pre-set bits */</comment>
	<decl_stmt><decl><type><name pos:line="63" pos:column="9">int</name></type> <name pos:line="63" pos:column="13">failure</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">CharClassify</name> <type:modifier pos:line="64" pos:column="22">*</type:modifier></type><name pos:line="64" pos:column="23">charClass</name></decl>;</decl_stmt>
	<function><type><name pos:line="65" pos:column="9">bool</name></type> <name pos:line="65" pos:column="14">iswordc</name><parameter_list pos:line="65" pos:column="21">(<param><decl><type><name pos:line="65" pos:column="22">unsigned</name> <name pos:line="65" pos:column="31">char</name></type> <name pos:line="65" pos:column="36">x</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="39">{
		<return pos:line="66" pos:column="17">return <expr><call><name><name pos:line="66" pos:column="24">charClass</name><op:operator pos:line="66" pos:column="33">-&gt;</op:operator><name pos:line="66" pos:column="35">IsWord</name></name><argument_list pos:line="66" pos:column="41">(<argument><expr><name pos:line="66" pos:column="42">x</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</private>}</block>;</class>

<cpp:ifdef pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">ifdef</cpp:directive> <name pos:line="70" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">endif</cpp:directive></cpp:endif>

</unit>
