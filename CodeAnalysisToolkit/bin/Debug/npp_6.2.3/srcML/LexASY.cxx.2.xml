<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexASY.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">//Author: instanton (email: soft_share&lt;at&gt;126&lt;dot&gt;com)</comment>
<comment type="line" pos:line="3" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">include</cpp:directive> <cpp:file pos:line="5" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">include</cpp:directive> <cpp:file pos:line="6" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="11" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef</cpp:directive> <name pos:line="22" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="23" pos:column="1">using namespace <name pos:line="23" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="26" pos:column="1">static</specifier> <name pos:line="26" pos:column="8">void</name></type> <name pos:line="26" pos:column="13">ColouriseAsyDoc</name><parameter_list pos:line="26" pos:column="28">(<param><decl><type><name pos:line="26" pos:column="29">unsigned</name> <name pos:line="26" pos:column="38">int</name></type> <name pos:line="26" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="52">int</name></type> <name pos:line="26" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="64">int</name></type> <name pos:line="26" pos:column="68">initStyle</name></decl></param>,
		<param><decl><type><name pos:line="27" pos:column="17">WordList</name> <type:modifier pos:line="27" pos:column="26">*</type:modifier></type><name><name pos:line="27" pos:column="27">keywordlists</name><index pos:line="27" pos:column="39">[]</index></name></decl></param>, <param><decl><type><name pos:line="27" pos:column="43">Accessor</name> <type:modifier pos:line="27" pos:column="52">&amp;</type:modifier></type><name pos:line="27" pos:column="53">styler</name></decl></param>)</parameter_list> <block pos:line="27" pos:column="61">{

	<decl_stmt><decl><type><name pos:line="29" pos:column="9">WordList</name> <type:modifier pos:line="29" pos:column="18">&amp;</type:modifier></type><name pos:line="29" pos:column="19">keywords</name> <init pos:line="29" pos:column="28">= <expr><op:operator pos:line="29" pos:column="30">*</op:operator><name><name pos:line="29" pos:column="31">keywordlists</name><index pos:line="29" pos:column="43">[<expr><lit:literal type="number" pos:line="29" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">WordList</name> <type:modifier pos:line="30" pos:column="18">&amp;</type:modifier></type><name pos:line="30" pos:column="19">keywords2</name> <init pos:line="30" pos:column="29">= <expr><op:operator pos:line="30" pos:column="31">*</op:operator><name><name pos:line="30" pos:column="32">keywordlists</name><index pos:line="30" pos:column="44">[<expr><lit:literal type="number" pos:line="30" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="32" pos:column="9">CharacterSet</name></type> <name pos:line="32" pos:column="22">setWordStart</name><argument_list pos:line="32" pos:column="34">(<argument><expr><name><name pos:line="32" pos:column="35">CharacterSet</name><op:operator pos:line="32" pos:column="47">::</op:operator><name pos:line="32" pos:column="49">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="32" pos:column="59">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="32" pos:column="64">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="32" pos:column="70">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">CharacterSet</name></type> <name pos:line="33" pos:column="22">setWord</name><argument_list pos:line="33" pos:column="29">(<argument><expr><name><name pos:line="33" pos:column="30">CharacterSet</name><op:operator pos:line="33" pos:column="42">::</op:operator><name pos:line="33" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="33" pos:column="57">"._"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="33" pos:column="63">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="33" pos:column="69">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="35" pos:column="9">int</name></type> <name pos:line="35" pos:column="13">visibleChars</name> <init pos:line="35" pos:column="26">= <expr><lit:literal type="number" pos:line="35" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="37" pos:column="9">StyleContext</name></type> <name pos:line="37" pos:column="22">sc</name><parameter_list pos:line="37" pos:column="24">(<param><decl><type><name pos:line="37" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="37" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="37" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="37" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="39" pos:column="9">for (<init pos:line="39" pos:column="14">;</init> <condition><expr><call><name><name pos:line="39" pos:column="16">sc</name><op:operator pos:line="39" pos:column="18">.</op:operator><name pos:line="39" pos:column="19">More</name></name><argument_list pos:line="39" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="39" pos:column="27">sc</name><op:operator pos:line="39" pos:column="29">.</op:operator><name pos:line="39" pos:column="30">Forward</name></name><argument_list pos:line="39" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="39" pos:column="41">{

		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name><name pos:line="41" pos:column="21">sc</name><op:operator pos:line="41" pos:column="23">.</op:operator><name pos:line="41" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="41" pos:column="36"> <block pos:line="41" pos:column="37">{
			<if pos:line="42" pos:column="25">if <condition pos:line="42" pos:column="28">(<expr><name><name pos:line="42" pos:column="29">sc</name><op:operator pos:line="42" pos:column="31">.</op:operator><name pos:line="42" pos:column="32">state</name></name> <op:operator pos:line="42" pos:column="38">==</op:operator> <name pos:line="42" pos:column="41">SCE_ASY_STRING</name></expr>)</condition><then pos:line="42" pos:column="56"> <block pos:line="42" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="43" pos:column="33">sc</name><op:operator pos:line="43" pos:column="35">.</op:operator><name pos:line="43" pos:column="36">SetState</name></name><argument_list pos:line="43" pos:column="44">(<argument><expr><name pos:line="43" pos:column="45">SCE_ASY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="45" pos:column="25">visibleChars</name> <op:operator pos:line="45" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="45" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name><name pos:line="48" pos:column="21">sc</name><op:operator pos:line="48" pos:column="23">.</op:operator><name pos:line="48" pos:column="24">ch</name></name> <op:operator pos:line="48" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="48" pos:column="35"> <block pos:line="48" pos:column="36">{
			<if pos:line="49" pos:column="25">if <condition pos:line="49" pos:column="28">(<expr><name><name pos:line="49" pos:column="29">sc</name><op:operator pos:line="49" pos:column="31">.</op:operator><name pos:line="49" pos:column="32">chNext</name></name> <op:operator pos:line="49" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="42">'\n'</lit:literal> <op:operator pos:line="49" pos:column="47">||</op:operator> <name><name pos:line="49" pos:column="50">sc</name><op:operator pos:line="49" pos:column="52">.</op:operator><name pos:line="49" pos:column="53">chNext</name></name> <op:operator pos:line="49" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="49" pos:column="68"> <block pos:line="49" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="50" pos:column="33">sc</name><op:operator pos:line="50" pos:column="35">.</op:operator><name pos:line="50" pos:column="36">Forward</name></name><argument_list pos:line="50" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="51" pos:column="33">if <condition pos:line="51" pos:column="36">(<expr><name><name pos:line="51" pos:column="37">sc</name><op:operator pos:line="51" pos:column="39">.</op:operator><name pos:line="51" pos:column="40">ch</name></name> <op:operator pos:line="51" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="46">'\r'</lit:literal> <op:operator pos:line="51" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="51" pos:column="54">sc</name><op:operator pos:line="51" pos:column="56">.</op:operator><name pos:line="51" pos:column="57">chNext</name></name> <op:operator pos:line="51" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="51" pos:column="72"> <block pos:line="51" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="52" pos:column="41">sc</name><op:operator pos:line="52" pos:column="43">.</op:operator><name pos:line="52" pos:column="44">Forward</name></name><argument_list pos:line="52" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
<comment type="line" pos:line="54" pos:column="1">//				continuationLine = true;</comment>
				<continue pos:line="55" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="59" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="60" pos:column="17">switch <condition pos:line="60" pos:column="24">(<expr><name><name pos:line="60" pos:column="25">sc</name><op:operator pos:line="60" pos:column="27">.</op:operator><name pos:line="60" pos:column="28">state</name></name></expr>)</condition> <block pos:line="60" pos:column="35">{
			<case pos:line="61" pos:column="25">case <expr><name pos:line="61" pos:column="30">SCE_ASY_OPERATOR</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="62" pos:column="33">sc</name><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">SetState</name></name><argument_list pos:line="62" pos:column="44">(<argument><expr><name pos:line="62" pos:column="45">SCE_ASY_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="63" pos:column="33">break;</break>
			</case><case pos:line="64" pos:column="25">case <expr><name pos:line="64" pos:column="30">SCE_ASY_NUMBER</name></expr>:
				<if pos:line="65" pos:column="33">if <condition pos:line="65" pos:column="36">(<expr><op:operator pos:line="65" pos:column="37">!</op:operator><call><name><name pos:line="65" pos:column="38">setWord</name><op:operator pos:line="65" pos:column="45">.</op:operator><name pos:line="65" pos:column="46">Contains</name></name><argument_list pos:line="65" pos:column="54">(<argument><expr><name><name pos:line="65" pos:column="55">sc</name><op:operator pos:line="65" pos:column="57">.</op:operator><name pos:line="65" pos:column="58">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="65" pos:column="62"> <block pos:line="65" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="66" pos:column="41">sc</name><op:operator pos:line="66" pos:column="43">.</op:operator><name pos:line="66" pos:column="44">SetState</name></name><argument_list pos:line="66" pos:column="52">(<argument><expr><name pos:line="66" pos:column="53">SCE_ASY_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="68" pos:column="33">break;</break>
			</case><case pos:line="69" pos:column="25">case <expr><name pos:line="69" pos:column="30">SCE_ASY_IDENTIFIER</name></expr>:
				<if pos:line="70" pos:column="33">if <condition pos:line="70" pos:column="36">(<expr><op:operator pos:line="70" pos:column="37">!</op:operator><call><name><name pos:line="70" pos:column="38">setWord</name><op:operator pos:line="70" pos:column="45">.</op:operator><name pos:line="70" pos:column="46">Contains</name></name><argument_list pos:line="70" pos:column="54">(<argument><expr><name><name pos:line="70" pos:column="55">sc</name><op:operator pos:line="70" pos:column="57">.</op:operator><name pos:line="70" pos:column="58">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="70" pos:column="62">||</op:operator> <op:operator pos:line="70" pos:column="65">(</op:operator><name><name pos:line="70" pos:column="66">sc</name><op:operator pos:line="70" pos:column="68">.</op:operator><name pos:line="70" pos:column="69">ch</name></name> <op:operator pos:line="70" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="75">'.'</lit:literal><op:operator pos:line="70" pos:column="78">)</op:operator></expr>)</condition><then pos:line="70" pos:column="80"> <block pos:line="70" pos:column="81">{
					<decl_stmt><decl><type><name pos:line="71" pos:column="41">char</name></type> <name><name pos:line="71" pos:column="46">s</name><index pos:line="71" pos:column="47">[<expr><lit:literal type="number" pos:line="71" pos:column="48">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="72" pos:column="41">sc</name><op:operator pos:line="72" pos:column="43">.</op:operator><name pos:line="72" pos:column="44">GetCurrentLowered</name></name><argument_list pos:line="72" pos:column="61">(<argument><expr><name pos:line="72" pos:column="62">s</name></expr></argument>, <argument><expr><sizeof pos:line="72" pos:column="65">sizeof<argument_list pos:line="72" pos:column="71">(<argument><expr><name pos:line="72" pos:column="72">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="73" pos:column="41">if <condition pos:line="73" pos:column="44">(<expr><call><name><name pos:line="73" pos:column="45">keywords</name><op:operator pos:line="73" pos:column="53">.</op:operator><name pos:line="73" pos:column="54">InList</name></name><argument_list pos:line="73" pos:column="60">(<argument><expr><name pos:line="73" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="73" pos:column="64"> <block pos:line="73" pos:column="65">{
						<expr_stmt><expr><call><name><name pos:line="74" pos:column="49">sc</name><op:operator pos:line="74" pos:column="51">.</op:operator><name pos:line="74" pos:column="52">ChangeState</name></name><argument_list pos:line="74" pos:column="63">(<argument><expr><name pos:line="74" pos:column="64">SCE_ASY_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="75" pos:column="43">else <if pos:line="75" pos:column="48">if <condition pos:line="75" pos:column="51">(<expr><call><name><name pos:line="75" pos:column="52">keywords2</name><op:operator pos:line="75" pos:column="61">.</op:operator><name pos:line="75" pos:column="62">InList</name></name><argument_list pos:line="75" pos:column="68">(<argument><expr><name pos:line="75" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="75" pos:column="72"> <block pos:line="75" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="76" pos:column="49">sc</name><op:operator pos:line="76" pos:column="51">.</op:operator><name pos:line="76" pos:column="52">ChangeState</name></name><argument_list pos:line="76" pos:column="63">(<argument><expr><name pos:line="76" pos:column="64">SCE_ASY_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
					<expr_stmt><expr><call><name><name pos:line="78" pos:column="41">sc</name><op:operator pos:line="78" pos:column="43">.</op:operator><name pos:line="78" pos:column="44">SetState</name></name><argument_list pos:line="78" pos:column="52">(<argument><expr><name pos:line="78" pos:column="53">SCE_ASY_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="80" pos:column="33">break;</break>
			</case><case pos:line="81" pos:column="25">case <expr><name pos:line="81" pos:column="30">SCE_ASY_COMMENT</name></expr>:
				<if pos:line="82" pos:column="33">if <condition pos:line="82" pos:column="36">(<expr><call><name><name pos:line="82" pos:column="37">sc</name><op:operator pos:line="82" pos:column="39">.</op:operator><name pos:line="82" pos:column="40">Match</name></name><argument_list pos:line="82" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="82" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="82" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="82" pos:column="56"> <block pos:line="82" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="83" pos:column="41">sc</name><op:operator pos:line="83" pos:column="43">.</op:operator><name pos:line="83" pos:column="44">Forward</name></name><argument_list pos:line="83" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="84" pos:column="41">sc</name><op:operator pos:line="84" pos:column="43">.</op:operator><name pos:line="84" pos:column="44">ForwardSetState</name></name><argument_list pos:line="84" pos:column="59">(<argument><expr><name pos:line="84" pos:column="60">SCE_ASY_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="86" pos:column="33">break;</break>
			</case><case pos:line="87" pos:column="25">case <expr><name pos:line="87" pos:column="30">SCE_ASY_COMMENTLINE</name></expr>:
				<if pos:line="88" pos:column="33">if <condition pos:line="88" pos:column="36">(<expr><name><name pos:line="88" pos:column="37">sc</name><op:operator pos:line="88" pos:column="39">.</op:operator><name pos:line="88" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="88" pos:column="52"> <block pos:line="88" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="89" pos:column="41">sc</name><op:operator pos:line="89" pos:column="43">.</op:operator><name pos:line="89" pos:column="44">SetState</name></name><argument_list pos:line="89" pos:column="52">(<argument><expr><name pos:line="89" pos:column="53">SCE_ASY_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="91" pos:column="33">break;</break>
			</case><case pos:line="92" pos:column="25">case <expr><name pos:line="92" pos:column="30">SCE_ASY_STRING</name></expr>:
				<if pos:line="93" pos:column="33">if <condition pos:line="93" pos:column="36">(<expr><name><name pos:line="93" pos:column="37">sc</name><op:operator pos:line="93" pos:column="39">.</op:operator><name pos:line="93" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="93" pos:column="50"> <block pos:line="93" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="94" pos:column="41">sc</name><op:operator pos:line="94" pos:column="43">.</op:operator><name pos:line="94" pos:column="44">ChangeState</name></name><argument_list pos:line="94" pos:column="55">(<argument><expr><name pos:line="94" pos:column="56">SCE_ASY_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="95" pos:column="35">else <if pos:line="95" pos:column="40">if <condition pos:line="95" pos:column="43">(<expr><name><name pos:line="95" pos:column="44">sc</name><op:operator pos:line="95" pos:column="46">.</op:operator><name pos:line="95" pos:column="47">ch</name></name> <op:operator pos:line="95" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="95" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="95" pos:column="58"> <block pos:line="95" pos:column="59">{
					<if pos:line="96" pos:column="41">if <condition pos:line="96" pos:column="44">(<expr><name><name pos:line="96" pos:column="45">sc</name><op:operator pos:line="96" pos:column="47">.</op:operator><name pos:line="96" pos:column="48">chNext</name></name> <op:operator pos:line="96" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="58">'\"'</lit:literal> <op:operator pos:line="96" pos:column="63">||</op:operator> <name><name pos:line="96" pos:column="66">sc</name><op:operator pos:line="96" pos:column="68">.</op:operator><name pos:line="96" pos:column="69">chNext</name></name> <op:operator pos:line="96" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="79">'\''</lit:literal> <op:operator pos:line="96" pos:column="84">||</op:operator> <name><name pos:line="96" pos:column="87">sc</name><op:operator pos:line="96" pos:column="89">.</op:operator><name pos:line="96" pos:column="90">chNext</name></name> <op:operator pos:line="96" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="96" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="96" pos:column="105"> <block pos:line="96" pos:column="106">{
						<expr_stmt><expr><call><name><name pos:line="97" pos:column="49">sc</name><op:operator pos:line="97" pos:column="51">.</op:operator><name pos:line="97" pos:column="52">Forward</name></name><argument_list pos:line="97" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="99" pos:column="35">else <if pos:line="99" pos:column="40">if <condition pos:line="99" pos:column="43">(<expr><name><name pos:line="99" pos:column="44">sc</name><op:operator pos:line="99" pos:column="46">.</op:operator><name pos:line="99" pos:column="47">ch</name></name> <op:operator pos:line="99" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="99" pos:column="53">'\"'</lit:literal></expr>)</condition><then pos:line="99" pos:column="58"> <block pos:line="99" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="100" pos:column="41">sc</name><op:operator pos:line="100" pos:column="43">.</op:operator><name pos:line="100" pos:column="44">ForwardSetState</name></name><argument_list pos:line="100" pos:column="59">(<argument><expr><name pos:line="100" pos:column="60">SCE_ASY_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="102" pos:column="33">break;</break>
			</case><case pos:line="103" pos:column="25">case <expr><name pos:line="103" pos:column="30">SCE_ASY_CHARACTER</name></expr>:
				<if pos:line="104" pos:column="33">if <condition pos:line="104" pos:column="36">(<expr><name><name pos:line="104" pos:column="37">sc</name><op:operator pos:line="104" pos:column="39">.</op:operator><name pos:line="104" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="104" pos:column="50"> <block pos:line="104" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="105" pos:column="41">sc</name><op:operator pos:line="105" pos:column="43">.</op:operator><name pos:line="105" pos:column="44">ChangeState</name></name><argument_list pos:line="105" pos:column="55">(<argument><expr><name pos:line="105" pos:column="56">SCE_ASY_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="106" pos:column="35">else 	<if pos:line="106" pos:column="41">if <condition pos:line="106" pos:column="44">(<expr><name><name pos:line="106" pos:column="45">sc</name><op:operator pos:line="106" pos:column="47">.</op:operator><name pos:line="106" pos:column="48">ch</name></name> <op:operator pos:line="106" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="106" pos:column="54">'\\'</lit:literal></expr>)</condition><then pos:line="106" pos:column="59"> <block pos:line="106" pos:column="60">{
					<if pos:line="107" pos:column="41">if <condition pos:line="107" pos:column="44">(<expr><name><name pos:line="107" pos:column="45">sc</name><op:operator pos:line="107" pos:column="47">.</op:operator><name pos:line="107" pos:column="48">chNext</name></name> <op:operator pos:line="107" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="58">'\"'</lit:literal> <op:operator pos:line="107" pos:column="63">||</op:operator> <name><name pos:line="107" pos:column="66">sc</name><op:operator pos:line="107" pos:column="68">.</op:operator><name pos:line="107" pos:column="69">chNext</name></name> <op:operator pos:line="107" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="79">'\''</lit:literal> <op:operator pos:line="107" pos:column="84">||</op:operator> <name><name pos:line="107" pos:column="87">sc</name><op:operator pos:line="107" pos:column="89">.</op:operator><name pos:line="107" pos:column="90">chNext</name></name> <op:operator pos:line="107" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="107" pos:column="105"> <block pos:line="107" pos:column="106">{
						<expr_stmt><expr><call><name><name pos:line="108" pos:column="49">sc</name><op:operator pos:line="108" pos:column="51">.</op:operator><name pos:line="108" pos:column="52">Forward</name></name><argument_list pos:line="108" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="110" pos:column="35">else <if pos:line="110" pos:column="40">if <condition pos:line="110" pos:column="43">(<expr><name><name pos:line="110" pos:column="44">sc</name><op:operator pos:line="110" pos:column="46">.</op:operator><name pos:line="110" pos:column="47">ch</name></name> <op:operator pos:line="110" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="110" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="110" pos:column="58"> <block pos:line="110" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="111" pos:column="41">sc</name><op:operator pos:line="111" pos:column="43">.</op:operator><name pos:line="111" pos:column="44">ForwardSetState</name></name><argument_list pos:line="111" pos:column="59">(<argument><expr><name pos:line="111" pos:column="60">SCE_ASY_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="113" pos:column="33">break;</break>
		</case>}</block></switch>

		<comment type="line" pos:line="116" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="117" pos:column="17">if <condition pos:line="117" pos:column="20">(<expr><name><name pos:line="117" pos:column="21">sc</name><op:operator pos:line="117" pos:column="23">.</op:operator><name pos:line="117" pos:column="24">state</name></name> <op:operator pos:line="117" pos:column="30">==</op:operator> <name pos:line="117" pos:column="33">SCE_ASY_DEFAULT</name></expr>)</condition><then pos:line="117" pos:column="49"> <block pos:line="117" pos:column="50">{
			<if pos:line="118" pos:column="25">if <condition pos:line="118" pos:column="28">(<expr><call><name><name pos:line="118" pos:column="29">setWordStart</name><op:operator pos:line="118" pos:column="41">.</op:operator><name pos:line="118" pos:column="42">Contains</name></name><argument_list pos:line="118" pos:column="50">(<argument><expr><name><name pos:line="118" pos:column="51">sc</name><op:operator pos:line="118" pos:column="53">.</op:operator><name pos:line="118" pos:column="54">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="58">||</op:operator> <op:operator pos:line="118" pos:column="61">(</op:operator><name><name pos:line="118" pos:column="62">sc</name><op:operator pos:line="118" pos:column="64">.</op:operator><name pos:line="118" pos:column="65">ch</name></name> <op:operator pos:line="118" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="71">'@'</lit:literal><op:operator pos:line="118" pos:column="74">)</op:operator></expr>)</condition><then pos:line="118" pos:column="76"> <block pos:line="118" pos:column="77">{
				<expr_stmt><expr><call><name><name pos:line="119" pos:column="33">sc</name><op:operator pos:line="119" pos:column="35">.</op:operator><name pos:line="119" pos:column="36">SetState</name></name><argument_list pos:line="119" pos:column="44">(<argument><expr><name pos:line="119" pos:column="45">SCE_ASY_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="120" pos:column="27">else <if pos:line="120" pos:column="32">if <condition pos:line="120" pos:column="35">(<expr><call><name><name pos:line="120" pos:column="36">sc</name><op:operator pos:line="120" pos:column="38">.</op:operator><name pos:line="120" pos:column="39">Match</name></name><argument_list pos:line="120" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="120" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="120" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="120" pos:column="55"> <block pos:line="120" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="121" pos:column="33">sc</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">SetState</name></name><argument_list pos:line="121" pos:column="44">(<argument><expr><name pos:line="121" pos:column="45">SCE_ASY_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="122" pos:column="33">sc</name><op:operator pos:line="122" pos:column="35">.</op:operator><name pos:line="122" pos:column="36">Forward</name></name><argument_list pos:line="122" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="122" pos:column="49">//</comment>
			}</block></then> <else pos:line="123" pos:column="27">else <if pos:line="123" pos:column="32">if <condition pos:line="123" pos:column="35">(<expr><call><name><name pos:line="123" pos:column="36">sc</name><op:operator pos:line="123" pos:column="38">.</op:operator><name pos:line="123" pos:column="39">Match</name></name><argument_list pos:line="123" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="123" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="123" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="123" pos:column="55"> <block pos:line="123" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="124" pos:column="33">sc</name><op:operator pos:line="124" pos:column="35">.</op:operator><name pos:line="124" pos:column="36">SetState</name></name><argument_list pos:line="124" pos:column="44">(<argument><expr><name pos:line="124" pos:column="45">SCE_ASY_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="125" pos:column="27">else <if pos:line="125" pos:column="32">if <condition pos:line="125" pos:column="35">(<expr><name><name pos:line="125" pos:column="36">sc</name><op:operator pos:line="125" pos:column="38">.</op:operator><name pos:line="125" pos:column="39">ch</name></name> <op:operator pos:line="125" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="125" pos:column="50"> <block pos:line="125" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="126" pos:column="33">sc</name><op:operator pos:line="126" pos:column="35">.</op:operator><name pos:line="126" pos:column="36">SetState</name></name><argument_list pos:line="126" pos:column="44">(<argument><expr><name pos:line="126" pos:column="45">SCE_ASY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="127" pos:column="27">else <if pos:line="127" pos:column="32">if <condition pos:line="127" pos:column="35">(<expr><name><name pos:line="127" pos:column="36">sc</name><op:operator pos:line="127" pos:column="38">.</op:operator><name pos:line="127" pos:column="39">ch</name></name> <op:operator pos:line="127" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="127" pos:column="50"> <block pos:line="127" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="128" pos:column="33">sc</name><op:operator pos:line="128" pos:column="35">.</op:operator><name pos:line="128" pos:column="36">SetState</name></name><argument_list pos:line="128" pos:column="44">(<argument><expr><name pos:line="128" pos:column="45">SCE_ASY_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="129" pos:column="27">else <if pos:line="129" pos:column="32">if <condition pos:line="129" pos:column="35">(<expr><name><name pos:line="129" pos:column="36">sc</name><op:operator pos:line="129" pos:column="38">.</op:operator><name pos:line="129" pos:column="39">ch</name></name> <op:operator pos:line="129" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="129" pos:column="45">'#'</lit:literal> <op:operator pos:line="129" pos:column="49">&amp;&amp;</op:operator> <name pos:line="129" pos:column="52">visibleChars</name> <op:operator pos:line="129" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="129" pos:column="68">0</lit:literal></expr>)</condition><then pos:line="129" pos:column="70"> <block pos:line="129" pos:column="71">{
				<do pos:line="130" pos:column="33">do <block pos:line="130" pos:column="36">{
					<expr_stmt><expr><call><name><name pos:line="131" pos:column="41">sc</name><op:operator pos:line="131" pos:column="43">.</op:operator><name pos:line="131" pos:column="44">Forward</name></name><argument_list pos:line="131" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="132" pos:column="41">(<expr><op:operator pos:line="132" pos:column="42">(</op:operator><name><name pos:line="132" pos:column="43">sc</name><op:operator pos:line="132" pos:column="45">.</op:operator><name pos:line="132" pos:column="46">ch</name></name> <op:operator pos:line="132" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="132" pos:column="52">' '</lit:literal> <op:operator pos:line="132" pos:column="56">||</op:operator> <name><name pos:line="132" pos:column="59">sc</name><op:operator pos:line="132" pos:column="61">.</op:operator><name pos:line="132" pos:column="62">ch</name></name> <op:operator pos:line="132" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="132" pos:column="68">'\t'</lit:literal><op:operator pos:line="132" pos:column="72">)</op:operator> <op:operator pos:line="132" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="132" pos:column="77">sc</name><op:operator pos:line="132" pos:column="79">.</op:operator><name pos:line="132" pos:column="80">More</name></name><argument_list pos:line="132" pos:column="84">()</argument_list></call></expr>)</condition>;</do>
				<if pos:line="133" pos:column="33">if <condition pos:line="133" pos:column="36">(<expr><name><name pos:line="133" pos:column="37">sc</name><op:operator pos:line="133" pos:column="39">.</op:operator><name pos:line="133" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="133" pos:column="50"> <block pos:line="133" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="134" pos:column="41">sc</name><op:operator pos:line="134" pos:column="43">.</op:operator><name pos:line="134" pos:column="44">SetState</name></name><argument_list pos:line="134" pos:column="52">(<argument><expr><name pos:line="134" pos:column="53">SCE_ASY_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="136" pos:column="27">else <if pos:line="136" pos:column="32">if <condition pos:line="136" pos:column="35">(<expr><call><name pos:line="136" pos:column="36">isoperator</name><argument_list pos:line="136" pos:column="46">(<argument><expr><call><name><name pos:line="136" pos:column="47">static_cast</name><argument_list pos:line="136" pos:column="58">&lt;<argument><expr><name pos:line="136" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="136" pos:column="64">(<argument><expr><name><name pos:line="136" pos:column="65">sc</name><op:operator pos:line="136" pos:column="67">.</op:operator><name pos:line="136" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="136" pos:column="73"> <block pos:line="136" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="137" pos:column="33">sc</name><op:operator pos:line="137" pos:column="35">.</op:operator><name pos:line="137" pos:column="36">SetState</name></name><argument_list pos:line="137" pos:column="44">(<argument><expr><name pos:line="137" pos:column="45">SCE_ASY_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="142" pos:column="9">sc</name><op:operator pos:line="142" pos:column="11">.</op:operator><name pos:line="142" pos:column="12">Complete</name></name><argument_list pos:line="142" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="145" pos:column="1">static</specifier> <name pos:line="145" pos:column="8">bool</name></type> <name pos:line="145" pos:column="13">IsAsyCommentStyle</name><parameter_list pos:line="145" pos:column="30">(<param><decl><type><name pos:line="145" pos:column="31">int</name></type> <name pos:line="145" pos:column="35">style</name></decl></param>)</parameter_list> <block pos:line="145" pos:column="42">{
	<return pos:line="146" pos:column="9">return <expr><name pos:line="146" pos:column="16">style</name> <op:operator pos:line="146" pos:column="22">==</op:operator> <name pos:line="146" pos:column="25">SCE_ASY_COMMENT</name></expr>;</return>
}</block></function>


<function><type><specifier pos:line="150" pos:column="1">static</specifier> <specifier pos:line="150" pos:column="8">inline</specifier> <name pos:line="150" pos:column="15">bool</name></type> <name pos:line="150" pos:column="20">isASYidentifier</name><parameter_list pos:line="150" pos:column="35">(<param><decl><type><name pos:line="150" pos:column="36">int</name></type> <name pos:line="150" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="150" pos:column="44">{
	<return pos:line="151" pos:column="9">return
      <expr><op:operator pos:line="152" pos:column="7">(</op:operator><op:operator pos:line="152" pos:column="8">(</op:operator><name pos:line="152" pos:column="9">ch</name> <op:operator pos:line="152" pos:column="12">&gt;=</op:operator> <lit:literal type="char" pos:line="152" pos:column="15">'a'</lit:literal><op:operator pos:line="152" pos:column="18">)</op:operator> <op:operator pos:line="152" pos:column="20">&amp;&amp;</op:operator> <op:operator pos:line="152" pos:column="23">(</op:operator><name pos:line="152" pos:column="24">ch</name> <op:operator pos:line="152" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="152" pos:column="30">'z'</lit:literal><op:operator pos:line="152" pos:column="33">)</op:operator><op:operator pos:line="152" pos:column="34">)</op:operator> <op:operator pos:line="152" pos:column="36">||</op:operator> <op:operator pos:line="152" pos:column="39">(</op:operator><op:operator pos:line="152" pos:column="40">(</op:operator><name pos:line="152" pos:column="41">ch</name> <op:operator pos:line="152" pos:column="44">&gt;=</op:operator> <lit:literal type="char" pos:line="152" pos:column="47">'A'</lit:literal><op:operator pos:line="152" pos:column="50">)</op:operator> <op:operator pos:line="152" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="152" pos:column="55">(</op:operator><name pos:line="152" pos:column="56">ch</name> <op:operator pos:line="152" pos:column="59">&lt;=</op:operator> <lit:literal type="char" pos:line="152" pos:column="62">'Z'</lit:literal><op:operator pos:line="152" pos:column="65">)</op:operator><op:operator pos:line="152" pos:column="66">)</op:operator></expr> ;</return>
}</block></function>

<function><type><specifier pos:line="155" pos:column="1">static</specifier> <name pos:line="155" pos:column="8">int</name></type> <name pos:line="155" pos:column="12">ParseASYWord</name><parameter_list pos:line="155" pos:column="24">(<param><decl><type><name pos:line="155" pos:column="25">unsigned</name> <name pos:line="155" pos:column="34">int</name></type> <name pos:line="155" pos:column="38">pos</name></decl></param>, <param><decl><type><name pos:line="155" pos:column="43">Accessor</name> <type:modifier pos:line="155" pos:column="52">&amp;</type:modifier></type><name pos:line="155" pos:column="53">styler</name></decl></param>, <param><decl><type><name pos:line="155" pos:column="61">char</name> <type:modifier pos:line="155" pos:column="66">*</type:modifier></type><name pos:line="155" pos:column="67">word</name></decl></param>)</parameter_list>
<block pos:line="156" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="157" pos:column="3">int</name></type> <name pos:line="157" pos:column="7">length</name><init pos:line="157" pos:column="13">=<expr><lit:literal type="number" pos:line="157" pos:column="14">0</lit:literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name pos:line="158" pos:column="3">char</name></type> <name pos:line="158" pos:column="8">ch</name><init pos:line="158" pos:column="10">=<expr><call><name><name pos:line="158" pos:column="11">styler</name><op:operator pos:line="158" pos:column="17">.</op:operator><name pos:line="158" pos:column="18">SafeGetCharAt</name></name><argument_list pos:line="158" pos:column="31">(<argument><expr><name pos:line="158" pos:column="32">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><op:operator pos:line="159" pos:column="3">*</op:operator><name pos:line="159" pos:column="4">word</name><op:operator pos:line="159" pos:column="8">=</op:operator><lit:literal type="number" pos:line="159" pos:column="9">0</lit:literal></expr>;</expr_stmt>

  <while pos:line="161" pos:column="3">while<condition pos:line="161" pos:column="8">(<expr><call><name pos:line="161" pos:column="9">isASYidentifier</name><argument_list pos:line="161" pos:column="24">(<argument><expr><name pos:line="161" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="161" pos:column="29">&amp;&amp;</op:operator> <name pos:line="161" pos:column="32">length</name><op:operator pos:line="161" pos:column="38">&lt;</op:operator><lit:literal type="number" pos:line="161" pos:column="39">100</lit:literal></expr>)</condition><block pos:line="161" pos:column="43">{
          <expr_stmt><expr><name><name pos:line="162" pos:column="11">word</name><index pos:line="162" pos:column="15">[<expr><name pos:line="162" pos:column="16">length</name></expr>]</index></name><op:operator pos:line="162" pos:column="23">=</op:operator><name pos:line="162" pos:column="24">ch</name></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="163" pos:column="11">length</name><op:operator pos:line="163" pos:column="17">++</op:operator></expr>;</expr_stmt>
          <expr_stmt><expr><name pos:line="164" pos:column="11">ch</name><op:operator pos:line="164" pos:column="13">=</op:operator><call><name><name pos:line="164" pos:column="14">styler</name><op:operator pos:line="164" pos:column="20">.</op:operator><name pos:line="164" pos:column="21">SafeGetCharAt</name></name><argument_list pos:line="164" pos:column="34">(<argument><expr><name pos:line="164" pos:column="35">pos</name><op:operator pos:line="164" pos:column="38">+</op:operator><name pos:line="164" pos:column="39">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><name><name pos:line="166" pos:column="3">word</name><index pos:line="166" pos:column="7">[<expr><name pos:line="166" pos:column="8">length</name></expr>]</index></name><op:operator pos:line="166" pos:column="15">=</op:operator><lit:literal type="number" pos:line="166" pos:column="16">0</lit:literal></expr>;</expr_stmt>
  <return pos:line="167" pos:column="3">return <expr><name pos:line="167" pos:column="10">length</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="170" pos:column="1">static</specifier> <name pos:line="170" pos:column="8">bool</name></type> <name pos:line="170" pos:column="13">IsASYDrawingLine</name><parameter_list pos:line="170" pos:column="29">(<param><decl><type><name pos:line="170" pos:column="30">int</name></type> <name pos:line="170" pos:column="34">line</name></decl></param>, <param><decl><type><name pos:line="170" pos:column="40">Accessor</name> <type:modifier pos:line="170" pos:column="49">&amp;</type:modifier></type><name pos:line="170" pos:column="50">styler</name></decl></param>)</parameter_list> <block pos:line="170" pos:column="58">{
	<decl_stmt><decl><type><name pos:line="171" pos:column="9">int</name></type> <name pos:line="171" pos:column="13">pos</name> <init pos:line="171" pos:column="17">= <expr><call><name><name pos:line="171" pos:column="19">styler</name><op:operator pos:line="171" pos:column="25">.</op:operator><name pos:line="171" pos:column="26">LineStart</name></name><argument_list pos:line="171" pos:column="35">(<argument><expr><name pos:line="171" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="172" pos:column="9">int</name></type> <name pos:line="172" pos:column="13">eol_pos</name> <init pos:line="172" pos:column="21">= <expr><call><name><name pos:line="172" pos:column="23">styler</name><op:operator pos:line="172" pos:column="29">.</op:operator><name pos:line="172" pos:column="30">LineStart</name></name><argument_list pos:line="172" pos:column="39">(<argument><expr><name pos:line="172" pos:column="40">line</name> <op:operator pos:line="172" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="172" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="172" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="172" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="174" pos:column="9">int</name></type> <name pos:line="174" pos:column="13">startpos</name> <init pos:line="174" pos:column="22">= <expr><name pos:line="174" pos:column="24">pos</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">char</name></type> <name><name pos:line="175" pos:column="14">buffer</name><index pos:line="175" pos:column="20">[<expr><lit:literal type="number" pos:line="175" pos:column="21">100</lit:literal></expr>]</index></name><init pos:line="175" pos:column="25">=<expr><lit:literal type="string" pos:line="175" pos:column="26">""</lit:literal></expr></init></decl>;</decl_stmt>

	<while pos:line="177" pos:column="9">while <condition pos:line="177" pos:column="15">(<expr><name pos:line="177" pos:column="16">startpos</name><op:operator pos:line="177" pos:column="24">&lt;</op:operator><name pos:line="177" pos:column="25">eol_pos</name></expr>)</condition><block pos:line="177" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="178" pos:column="17">char</name></type> <name pos:line="178" pos:column="22">ch</name> <init pos:line="178" pos:column="25">= <expr><name><name pos:line="178" pos:column="27">styler</name><index pos:line="178" pos:column="33">[<expr><name pos:line="178" pos:column="34">startpos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="179" pos:column="17">ParseASYWord</name><argument_list pos:line="179" pos:column="29">(<argument><expr><name pos:line="179" pos:column="30">startpos</name></expr></argument>,<argument><expr><name pos:line="179" pos:column="39">styler</name></expr></argument>,<argument><expr><name pos:line="179" pos:column="46">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="180" pos:column="17">bool</name></type> <name pos:line="180" pos:column="22">drawcommands</name> <init pos:line="180" pos:column="35">= <expr><call><name pos:line="180" pos:column="37">strncmp</name><argument_list pos:line="180" pos:column="44">(<argument><expr><name pos:line="180" pos:column="45">buffer</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="180" pos:column="52">"draw"</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="180" pos:column="59">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="180" pos:column="61">==</op:operator><lit:literal type="number" pos:line="180" pos:column="63">0</lit:literal><op:operator pos:line="180" pos:column="64">||</op:operator>
			<call><name pos:line="181" pos:column="25">strncmp</name><argument_list pos:line="181" pos:column="32">(<argument><expr><name pos:line="181" pos:column="33">buffer</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="181" pos:column="40">"pair"</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="181" pos:column="47">4</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="181" pos:column="49">==</op:operator><lit:literal type="number" pos:line="181" pos:column="51">0</lit:literal><op:operator pos:line="181" pos:column="52">||</op:operator><call><name pos:line="181" pos:column="54">strncmp</name><argument_list pos:line="181" pos:column="61">(<argument><expr><name pos:line="181" pos:column="62">buffer</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="181" pos:column="69">"label"</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="181" pos:column="77">5</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="181" pos:column="79">==</op:operator><lit:literal type="number" pos:line="181" pos:column="81">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><op:operator pos:line="182" pos:column="21">!</op:operator><name pos:line="182" pos:column="22">drawcommands</name> <op:operator pos:line="182" pos:column="35">&amp;&amp;</op:operator> <name pos:line="182" pos:column="38">ch</name><op:operator pos:line="182" pos:column="40">!=</op:operator><lit:literal type="char" pos:line="182" pos:column="42">' '</lit:literal></expr>)</condition><then pos:line="182" pos:column="46"> <return pos:line="182" pos:column="47">return <expr><lit:literal type="boolean" pos:line="182" pos:column="54">false</lit:literal></expr>;</return></then>
		<else pos:line="183" pos:column="17">else <if pos:line="183" pos:column="22">if <condition pos:line="183" pos:column="25">(<expr><name pos:line="183" pos:column="26">drawcommands</name></expr>)</condition><then pos:line="183" pos:column="39"> <return pos:line="183" pos:column="40">return <expr><lit:literal type="boolean" pos:line="183" pos:column="47">true</lit:literal></expr>;</return></then></if></else></if>
		<expr_stmt><expr><name pos:line="184" pos:column="17">startpos</name><op:operator pos:line="184" pos:column="25">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="186" pos:column="9">return <expr><lit:literal type="boolean" pos:line="186" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="189" pos:column="1">static</specifier> <name pos:line="189" pos:column="8">void</name></type> <name pos:line="189" pos:column="13">FoldAsyDoc</name><parameter_list pos:line="189" pos:column="23">(<param><decl><type><name pos:line="189" pos:column="24">unsigned</name> <name pos:line="189" pos:column="33">int</name></type> <name pos:line="189" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="189" pos:column="47">int</name></type> <name pos:line="189" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="189" pos:column="59">int</name></type> <name pos:line="189" pos:column="63">initStyle</name></decl></param>,
					   <param><decl><type><name><name pos:line="190" pos:column="44">WordList</name> <type:modifier pos:line="190" pos:column="53">*</type:modifier><index pos:line="190" pos:column="54">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="190" pos:column="58">Accessor</name> <type:modifier pos:line="190" pos:column="67">&amp;</type:modifier></type><name pos:line="190" pos:column="68">styler</name></decl></param>)</parameter_list> <block pos:line="190" pos:column="76">{
	<decl_stmt><decl><type><name pos:line="191" pos:column="9">bool</name></type> <name pos:line="191" pos:column="14">foldComment</name> <init pos:line="191" pos:column="26">= <expr><call><name><name pos:line="191" pos:column="28">styler</name><op:operator pos:line="191" pos:column="34">.</op:operator><name pos:line="191" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="191" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="191" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="191" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="192" pos:column="9">bool</name></type> <name pos:line="192" pos:column="14">foldCompact</name> <init pos:line="192" pos:column="26">= <expr><call><name><name pos:line="192" pos:column="28">styler</name><op:operator pos:line="192" pos:column="34">.</op:operator><name pos:line="192" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="192" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="192" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="192" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="192" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="193" pos:column="9">bool</name></type> <name pos:line="193" pos:column="14">foldAtElse</name> <init pos:line="193" pos:column="25">= <expr><call><name><name pos:line="193" pos:column="27">styler</name><op:operator pos:line="193" pos:column="33">.</op:operator><name pos:line="193" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="193" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="49">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="193" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="193" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="193" pos:column="71">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="194" pos:column="9">unsigned</name> <name pos:line="194" pos:column="18">int</name></type> <name pos:line="194" pos:column="22">endPos</name> <init pos:line="194" pos:column="29">= <expr><name pos:line="194" pos:column="31">startPos</name> <op:operator pos:line="194" pos:column="40">+</op:operator> <name pos:line="194" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="195" pos:column="9">int</name></type> <name pos:line="195" pos:column="13">visibleChars</name> <init pos:line="195" pos:column="26">= <expr><lit:literal type="number" pos:line="195" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="196" pos:column="9">int</name></type> <name pos:line="196" pos:column="13">lineCurrent</name> <init pos:line="196" pos:column="25">= <expr><call><name><name pos:line="196" pos:column="27">styler</name><op:operator pos:line="196" pos:column="33">.</op:operator><name pos:line="196" pos:column="34">GetLine</name></name><argument_list pos:line="196" pos:column="41">(<argument><expr><name pos:line="196" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="197" pos:column="9">int</name></type> <name pos:line="197" pos:column="13">levelCurrent</name> <init pos:line="197" pos:column="26">= <expr><name pos:line="197" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="198" pos:column="9">if <condition pos:line="198" pos:column="12">(<expr><name pos:line="198" pos:column="13">lineCurrent</name> <op:operator pos:line="198" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="198" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="198" pos:column="29">
		<expr_stmt><expr><name pos:line="199" pos:column="17">levelCurrent</name> <op:operator pos:line="199" pos:column="30">=</op:operator> <call><name><name pos:line="199" pos:column="32">styler</name><op:operator pos:line="199" pos:column="38">.</op:operator><name pos:line="199" pos:column="39">LevelAt</name></name><argument_list pos:line="199" pos:column="46">(<argument><expr><name pos:line="199" pos:column="47">lineCurrent</name><op:operator pos:line="199" pos:column="58">-</op:operator><lit:literal type="number" pos:line="199" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="199" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="199" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="200" pos:column="9">int</name></type> <name pos:line="200" pos:column="13">levelMinCurrent</name> <init pos:line="200" pos:column="29">= <expr><name pos:line="200" pos:column="31">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="201" pos:column="9">int</name></type> <name pos:line="201" pos:column="13">levelNext</name> <init pos:line="201" pos:column="23">= <expr><name pos:line="201" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="202" pos:column="9">char</name></type> <name pos:line="202" pos:column="14">chNext</name> <init pos:line="202" pos:column="21">= <expr><name><name pos:line="202" pos:column="23">styler</name><index pos:line="202" pos:column="29">[<expr><name pos:line="202" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="203" pos:column="9">int</name></type> <name pos:line="203" pos:column="13">styleNext</name> <init pos:line="203" pos:column="23">= <expr><call><name><name pos:line="203" pos:column="25">styler</name><op:operator pos:line="203" pos:column="31">.</op:operator><name pos:line="203" pos:column="32">StyleAt</name></name><argument_list pos:line="203" pos:column="39">(<argument><expr><name pos:line="203" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">int</name></type> <name pos:line="204" pos:column="13">style</name> <init pos:line="204" pos:column="19">= <expr><name pos:line="204" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<for pos:line="205" pos:column="9">for (<init><decl><type><name pos:line="205" pos:column="14">unsigned</name> <name pos:line="205" pos:column="23">int</name></type> <name pos:line="205" pos:column="27">i</name> <init pos:line="205" pos:column="29">= <expr><name pos:line="205" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="205" pos:column="41">i</name> <op:operator pos:line="205" pos:column="43">&lt;</op:operator> <name pos:line="205" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="205" pos:column="53">i</name><op:operator pos:line="205" pos:column="54">++</op:operator></expr></incr>) <block pos:line="205" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="206" pos:column="17">char</name></type> <name pos:line="206" pos:column="22">ch</name> <init pos:line="206" pos:column="25">= <expr><name pos:line="206" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="207" pos:column="17">chNext</name> <op:operator pos:line="207" pos:column="24">=</op:operator> <call><name><name pos:line="207" pos:column="26">styler</name><op:operator pos:line="207" pos:column="32">.</op:operator><name pos:line="207" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="207" pos:column="46">(<argument><expr><name pos:line="207" pos:column="47">i</name> <op:operator pos:line="207" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="207" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="208" pos:column="17">int</name></type> <name pos:line="208" pos:column="21">stylePrev</name> <init pos:line="208" pos:column="31">= <expr><name pos:line="208" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="209" pos:column="17">style</name> <op:operator pos:line="209" pos:column="23">=</op:operator> <name pos:line="209" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="210" pos:column="17">styleNext</name> <op:operator pos:line="210" pos:column="27">=</op:operator> <call><name><name pos:line="210" pos:column="29">styler</name><op:operator pos:line="210" pos:column="35">.</op:operator><name pos:line="210" pos:column="36">StyleAt</name></name><argument_list pos:line="210" pos:column="43">(<argument><expr><name pos:line="210" pos:column="44">i</name> <op:operator pos:line="210" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="210" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="211" pos:column="17">bool</name></type> <name pos:line="211" pos:column="22">atEOL</name> <init pos:line="211" pos:column="28">= <expr><op:operator pos:line="211" pos:column="30">(</op:operator><name pos:line="211" pos:column="31">ch</name> <op:operator pos:line="211" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="211" pos:column="37">'\r'</lit:literal> <op:operator pos:line="211" pos:column="42">&amp;&amp;</op:operator> <name pos:line="211" pos:column="45">chNext</name> <op:operator pos:line="211" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="211" pos:column="55">'\n'</lit:literal><op:operator pos:line="211" pos:column="59">)</op:operator> <op:operator pos:line="211" pos:column="61">||</op:operator> <op:operator pos:line="211" pos:column="64">(</op:operator><name pos:line="211" pos:column="65">ch</name> <op:operator pos:line="211" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="211" pos:column="71">'\n'</lit:literal><op:operator pos:line="211" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="212" pos:column="17">if <condition pos:line="212" pos:column="20">(<expr><name pos:line="212" pos:column="21">foldComment</name> <op:operator pos:line="212" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="212" pos:column="36">IsAsyCommentStyle</name><argument_list pos:line="212" pos:column="53">(<argument><expr><name pos:line="212" pos:column="54">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="212" pos:column="61"> <block pos:line="212" pos:column="62">{
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><op:operator pos:line="213" pos:column="29">!</op:operator><call><name pos:line="213" pos:column="30">IsAsyCommentStyle</name><argument_list pos:line="213" pos:column="47">(<argument><expr><name pos:line="213" pos:column="48">stylePrev</name></expr></argument>)</argument_list></call> <op:operator pos:line="213" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="213" pos:column="62">(</op:operator><name pos:line="213" pos:column="63">stylePrev</name> <op:operator pos:line="213" pos:column="73">!=</op:operator> <name pos:line="213" pos:column="76">SCE_ASY_COMMENTLINEDOC</name><op:operator pos:line="213" pos:column="98">)</op:operator></expr>)</condition><then pos:line="213" pos:column="100"> <block pos:line="213" pos:column="101">{
				<expr_stmt><expr><name pos:line="214" pos:column="33">levelNext</name><op:operator pos:line="214" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="215" pos:column="27">else <if pos:line="215" pos:column="32">if <condition pos:line="215" pos:column="35">(<expr><op:operator pos:line="215" pos:column="36">!</op:operator><call><name pos:line="215" pos:column="37">IsAsyCommentStyle</name><argument_list pos:line="215" pos:column="54">(<argument><expr><name pos:line="215" pos:column="55">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="215" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="215" pos:column="69">(</op:operator><name pos:line="215" pos:column="70">styleNext</name> <op:operator pos:line="215" pos:column="80">!=</op:operator> <name pos:line="215" pos:column="83">SCE_ASY_COMMENTLINEDOC</name><op:operator pos:line="215" pos:column="105">)</op:operator> <op:operator pos:line="215" pos:column="107">&amp;&amp;</op:operator> <op:operator pos:line="215" pos:column="110">!</op:operator><name pos:line="215" pos:column="111">atEOL</name></expr>)</condition><then pos:line="215" pos:column="117"> <block pos:line="215" pos:column="118">{
				<expr_stmt><expr><name pos:line="216" pos:column="33">levelNext</name><op:operator pos:line="216" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="219" pos:column="17">if <condition pos:line="219" pos:column="20">(<expr><name pos:line="219" pos:column="21">style</name> <op:operator pos:line="219" pos:column="27">==</op:operator> <name pos:line="219" pos:column="30">SCE_ASY_OPERATOR</name></expr>)</condition><then pos:line="219" pos:column="47"> <block pos:line="219" pos:column="48">{
			<if pos:line="220" pos:column="25">if <condition pos:line="220" pos:column="28">(<expr><name pos:line="220" pos:column="29">ch</name> <op:operator pos:line="220" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="220" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="220" pos:column="39"> <block pos:line="220" pos:column="40">{
				<if pos:line="221" pos:column="33">if <condition pos:line="221" pos:column="36">(<expr><name pos:line="221" pos:column="37">levelMinCurrent</name> <op:operator pos:line="221" pos:column="53">&gt;</op:operator> <name pos:line="221" pos:column="55">levelNext</name></expr>)</condition><then pos:line="221" pos:column="65"> <block pos:line="221" pos:column="66">{
					<expr_stmt><expr><name pos:line="222" pos:column="41">levelMinCurrent</name> <op:operator pos:line="222" pos:column="57">=</op:operator> <name pos:line="222" pos:column="59">levelNext</name></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="224" pos:column="33">levelNext</name><op:operator pos:line="224" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="225" pos:column="27">else <if pos:line="225" pos:column="32">if <condition pos:line="225" pos:column="35">(<expr><name pos:line="225" pos:column="36">ch</name> <op:operator pos:line="225" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="225" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="225" pos:column="46"> <block pos:line="225" pos:column="47">{
				<expr_stmt><expr><name pos:line="226" pos:column="33">levelNext</name><op:operator pos:line="226" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>

		<if pos:line="230" pos:column="17">if <condition pos:line="230" pos:column="20">(<expr><name pos:line="230" pos:column="21">atEOL</name> <op:operator pos:line="230" pos:column="27">&amp;&amp;</op:operator> <call><name pos:line="230" pos:column="30">IsASYDrawingLine</name><argument_list pos:line="230" pos:column="46">(<argument><expr><name pos:line="230" pos:column="47">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="60">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="230" pos:column="68">{
			<if pos:line="231" pos:column="25">if <condition pos:line="231" pos:column="28">(<expr><name pos:line="231" pos:column="29">lineCurrent</name><op:operator pos:line="231" pos:column="40">==</op:operator><lit:literal type="number" pos:line="231" pos:column="42">0</lit:literal> <op:operator pos:line="231" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="231" pos:column="47">IsASYDrawingLine</name><argument_list pos:line="231" pos:column="63">(<argument><expr><name pos:line="231" pos:column="64">lineCurrent</name> <op:operator pos:line="231" pos:column="76">+</op:operator> <lit:literal type="number" pos:line="231" pos:column="78">1</lit:literal></expr></argument>, <argument><expr><name pos:line="231" pos:column="81">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="231" pos:column="89">
				<expr_stmt><expr><name pos:line="232" pos:column="33">levelNext</name><op:operator pos:line="232" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="233" pos:column="25">else <if pos:line="233" pos:column="30">if <condition pos:line="233" pos:column="33">(<expr><name pos:line="233" pos:column="34">lineCurrent</name><op:operator pos:line="233" pos:column="45">!=</op:operator><lit:literal type="number" pos:line="233" pos:column="47">0</lit:literal> <op:operator pos:line="233" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="233" pos:column="52">!</op:operator><call><name pos:line="233" pos:column="53">IsASYDrawingLine</name><argument_list pos:line="233" pos:column="69">(<argument><expr><name pos:line="233" pos:column="70">lineCurrent</name> <op:operator pos:line="233" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="233" pos:column="84">1</lit:literal></expr></argument>, <argument><expr><name pos:line="233" pos:column="87">styler</name></expr></argument>)</argument_list></call>
				<op:operator pos:line="234" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="234" pos:column="36">IsASYDrawingLine</name><argument_list pos:line="234" pos:column="52">(<argument><expr><name pos:line="234" pos:column="53">lineCurrent</name> <op:operator pos:line="234" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="234" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><name pos:line="234" pos:column="70">styler</name></expr></argument>)</argument_list></call></expr>
				)</condition><then pos:line="235" pos:column="34">
				<expr_stmt><expr><name pos:line="236" pos:column="33">levelNext</name><op:operator pos:line="236" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="237" pos:column="25">else <if pos:line="237" pos:column="30">if <condition pos:line="237" pos:column="33">(<expr><name pos:line="237" pos:column="34">lineCurrent</name><op:operator pos:line="237" pos:column="45">!=</op:operator><lit:literal type="number" pos:line="237" pos:column="47">0</lit:literal> <op:operator pos:line="237" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="237" pos:column="52">IsASYDrawingLine</name><argument_list pos:line="237" pos:column="68">(<argument><expr><name pos:line="237" pos:column="69">lineCurrent</name> <op:operator pos:line="237" pos:column="81">-</op:operator> <lit:literal type="number" pos:line="237" pos:column="83">1</lit:literal></expr></argument>, <argument><expr><name pos:line="237" pos:column="86">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="237" pos:column="94">&amp;&amp;</op:operator>
				<op:operator pos:line="238" pos:column="33">!</op:operator><call><name pos:line="238" pos:column="34">IsASYDrawingLine</name><argument_list pos:line="238" pos:column="50">(<argument><expr><name pos:line="238" pos:column="51">lineCurrent</name><op:operator pos:line="238" pos:column="62">+</op:operator><lit:literal type="number" pos:line="238" pos:column="63">1</lit:literal></expr></argument>, <argument><expr><name pos:line="238" pos:column="66">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="238" pos:column="74">
				<expr_stmt><expr><name pos:line="239" pos:column="33">levelNext</name><op:operator pos:line="239" pos:column="42">--</op:operator></expr>;</expr_stmt></then></if></else></if></else></if>
		}</block></then></if>

		<if pos:line="242" pos:column="17">if <condition pos:line="242" pos:column="20">(<expr><name pos:line="242" pos:column="21">atEOL</name></expr>)</condition><then pos:line="242" pos:column="27"> <block pos:line="242" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="243" pos:column="25">int</name></type> <name pos:line="243" pos:column="29">levelUse</name> <init pos:line="243" pos:column="38">= <expr><name pos:line="243" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<if pos:line="244" pos:column="25">if <condition pos:line="244" pos:column="28">(<expr><name pos:line="244" pos:column="29">foldAtElse</name></expr>)</condition><then pos:line="244" pos:column="40"> <block pos:line="244" pos:column="41">{
				<expr_stmt><expr><name pos:line="245" pos:column="33">levelUse</name> <op:operator pos:line="245" pos:column="42">=</op:operator> <name pos:line="245" pos:column="44">levelMinCurrent</name></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="247" pos:column="25">int</name></type> <name pos:line="247" pos:column="29">lev</name> <init pos:line="247" pos:column="33">= <expr><name pos:line="247" pos:column="35">levelUse</name> <op:operator pos:line="247" pos:column="44">|</op:operator> <name pos:line="247" pos:column="46">levelNext</name> <op:operator pos:line="247" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="247" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="248" pos:column="25">if <condition pos:line="248" pos:column="28">(<expr><name pos:line="248" pos:column="29">visibleChars</name> <op:operator pos:line="248" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="248" pos:column="45">0</lit:literal> <op:operator pos:line="248" pos:column="47">&amp;&amp;</op:operator> <name pos:line="248" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="248" pos:column="62">
				<expr_stmt><expr><name pos:line="249" pos:column="33">lev</name> <op:operator pos:line="249" pos:column="37">|=</op:operator> <name pos:line="249" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="250" pos:column="25">if <condition pos:line="250" pos:column="28">(<expr><name pos:line="250" pos:column="29">levelUse</name> <op:operator pos:line="250" pos:column="38">&lt;</op:operator> <name pos:line="250" pos:column="40">levelNext</name></expr>)</condition><then pos:line="250" pos:column="50">
				<expr_stmt><expr><name pos:line="251" pos:column="33">lev</name> <op:operator pos:line="251" pos:column="37">|=</op:operator> <name pos:line="251" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="252" pos:column="25">if <condition pos:line="252" pos:column="28">(<expr><name pos:line="252" pos:column="29">lev</name> <op:operator pos:line="252" pos:column="33">!=</op:operator> <call><name><name pos:line="252" pos:column="36">styler</name><op:operator pos:line="252" pos:column="42">.</op:operator><name pos:line="252" pos:column="43">LevelAt</name></name><argument_list pos:line="252" pos:column="50">(<argument><expr><name pos:line="252" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="64"> <block pos:line="252" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="253" pos:column="33">styler</name><op:operator pos:line="253" pos:column="39">.</op:operator><name pos:line="253" pos:column="40">SetLevel</name></name><argument_list pos:line="253" pos:column="48">(<argument><expr><name pos:line="253" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="253" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="255" pos:column="25">lineCurrent</name><op:operator pos:line="255" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="256" pos:column="25">levelCurrent</name> <op:operator pos:line="256" pos:column="38">=</op:operator> <name pos:line="256" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="257" pos:column="25">levelMinCurrent</name> <op:operator pos:line="257" pos:column="41">=</op:operator> <name pos:line="257" pos:column="43">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="258" pos:column="25">visibleChars</name> <op:operator pos:line="258" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="258" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="260" pos:column="17">if <condition pos:line="260" pos:column="20">(<expr><op:operator pos:line="260" pos:column="21">!</op:operator><call><name pos:line="260" pos:column="22">IsASpace</name><argument_list pos:line="260" pos:column="30">(<argument><expr><name pos:line="260" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="260" pos:column="35">
			<expr_stmt><expr><name pos:line="261" pos:column="25">visibleChars</name><op:operator pos:line="261" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="265" pos:column="1">static</specifier> <specifier pos:line="265" pos:column="8">const</specifier> <name pos:line="265" pos:column="14">char</name> <type:modifier pos:line="265" pos:column="19">*</type:modifier> <specifier pos:line="265" pos:column="21">const</specifier></type> <name><name pos:line="265" pos:column="27">asyWordLists</name><index pos:line="265" pos:column="39">[]</index></name> <init pos:line="265" pos:column="42">= <expr><block pos:line="265" pos:column="44">{
            <expr><lit:literal type="string" pos:line="266" pos:column="13">"Primary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="267" pos:column="13">"Secondary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="268" pos:column="13">0</lit:literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="271" pos:column="1">LexerModule</name></type> <name pos:line="271" pos:column="13">lmASY</name><argument_list pos:line="271" pos:column="18">(<argument><expr><name pos:line="271" pos:column="19">SCLEX_ASYMPTOTE</name></expr></argument>, <argument><expr><name pos:line="271" pos:column="36">ColouriseAsyDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="53">"asy"</lit:literal></expr></argument>, <argument><expr><name pos:line="271" pos:column="60">FoldAsyDoc</name></expr></argument>, <argument><expr><name pos:line="271" pos:column="72">asyWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
