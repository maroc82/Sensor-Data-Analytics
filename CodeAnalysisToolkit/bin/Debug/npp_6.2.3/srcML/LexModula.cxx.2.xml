<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexModula.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">//	-*- coding: utf-8 -*-</comment>
<comment type="line" pos:line="2" pos:column="1">//	Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="3" pos:column="1">/**
 *	@file LexModula.cxx
 *	@author Dariusz "DKnoto" KnociÅski
 *	@date 2011/02/03
 *	@brief Lexer for Modula-2/3 documents.
 */</comment>
<comment type="line" pos:line="9" pos:column="1">//	The License.txt file describes the conditions under which this software may</comment>
<comment type="line" pos:line="10" pos:column="1">//	be distributed.</comment>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"PropSetSimple.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef</cpp:directive> <name pos:line="31" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="32" pos:column="1">using namespace <name pos:line="32" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef</cpp:directive> <name pos:line="35" pos:column="8">DEBUG_LEX_MODULA</name></cpp:ifdef>
<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">DEBUG_STATE</name><parameter_list pos:line="36" pos:column="20">( <param><type><name pos:line="36" pos:column="22">p</name></type></param>, <param><type><name pos:line="36" pos:column="25">c</name></type></param> )</parameter_list></cpp:macro>\
		<cpp:value pos:line="37" pos:column="17">fprintf( stderr, "Unknown state: currentPos = %d, char = '%c'\n", p, c );</cpp:value></cpp:define>
<cpp:else pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">DEBUG_STATE</name><parameter_list pos:line="39" pos:column="20">( <param><type><name pos:line="39" pos:column="22">p</name></type></param>, <param><type><name pos:line="39" pos:column="25">c</name></type></param> )</parameter_list></cpp:macro></cpp:define>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="42" pos:column="1">static</specifier> <specifier pos:line="42" pos:column="8">inline</specifier> <name pos:line="42" pos:column="15">bool</name></type> <name pos:line="42" pos:column="20">IsDigitOfBase</name><parameter_list pos:line="42" pos:column="33">( <param><decl><type><name pos:line="42" pos:column="35">unsigned</name></type> <name pos:line="42" pos:column="44">ch</name></decl></param>, <param><decl><type><name pos:line="42" pos:column="48">unsigned</name></type> <name pos:line="42" pos:column="57">base</name></decl></param> )</parameter_list> <block pos:line="42" pos:column="64">{
	<if pos:line="43" pos:column="9">if<condition pos:line="43" pos:column="11">( <expr><name><name pos:line="43" pos:column="13">ch</name> <argument_list pos:line="43" pos:column="16">&lt; <argument><expr><lit:literal type="char" pos:line="43" pos:column="18">'0'</lit:literal> <op:operator pos:line="43" pos:column="22">||</op:operator> <name pos:line="43" pos:column="25">ch</name></expr></argument> &gt;</argument_list></name> <lit:literal type="char" pos:line="43" pos:column="30">'f'</lit:literal></expr> )</condition><then pos:line="43" pos:column="35"> <return pos:line="43" pos:column="36">return <expr><lit:literal type="boolean" pos:line="43" pos:column="43">false</lit:literal></expr>;</return></then></if>
	<if pos:line="44" pos:column="9">if<condition pos:line="44" pos:column="11">( <expr><name pos:line="44" pos:column="13">base</name> <op:operator pos:line="44" pos:column="18">&lt;=</op:operator> <lit:literal type="number" pos:line="44" pos:column="21">10</lit:literal></expr> )</condition><then pos:line="44" pos:column="25"> <block pos:line="44" pos:column="26">{
		<if pos:line="45" pos:column="17">if<condition pos:line="45" pos:column="19">( <expr><name pos:line="45" pos:column="21">ch</name> <op:operator pos:line="45" pos:column="24">&gt;=</op:operator> <op:operator pos:line="45" pos:column="27">(</op:operator> <lit:literal type="char" pos:line="45" pos:column="29">'0'</lit:literal> <op:operator pos:line="45" pos:column="33">+</op:operator> <name pos:line="45" pos:column="35">base</name> <op:operator pos:line="45" pos:column="40">)</op:operator></expr> )</condition><then pos:line="45" pos:column="43"> <return pos:line="45" pos:column="44">return <expr><lit:literal type="boolean" pos:line="45" pos:column="51">false</lit:literal></expr>;</return></then></if>
	}</block></then> <else pos:line="46" pos:column="11">else <block pos:line="46" pos:column="16">{
		<if pos:line="47" pos:column="17">if<condition pos:line="47" pos:column="19">( <expr><name pos:line="47" pos:column="21">ch</name> <op:operator pos:line="47" pos:column="24">&gt;</op:operator> <lit:literal type="char" pos:line="47" pos:column="26">'9'</lit:literal></expr> )</condition><then pos:line="47" pos:column="31"> <block pos:line="47" pos:column="32">{
			<decl_stmt><decl><type><name pos:line="48" pos:column="25">unsigned</name></type> <name pos:line="48" pos:column="34">nb</name> <init pos:line="48" pos:column="37">= <expr><name pos:line="48" pos:column="39">base</name> <op:operator pos:line="48" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="48" pos:column="46">10</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="49" pos:column="25">if<condition pos:line="49" pos:column="27">( <expr><op:operator pos:line="49" pos:column="29">(</op:operator> <name pos:line="49" pos:column="31">ch</name> <op:operator pos:line="49" pos:column="34">&lt;</op:operator> <lit:literal type="char" pos:line="49" pos:column="36">'A'</lit:literal> <op:operator pos:line="49" pos:column="40">)</op:operator> <op:operator pos:line="49" pos:column="42">||</op:operator> <op:operator pos:line="49" pos:column="45">(</op:operator> <name pos:line="49" pos:column="47">ch</name> <op:operator pos:line="49" pos:column="50">&gt;=</op:operator> <op:operator pos:line="49" pos:column="53">(</op:operator> <lit:literal type="char" pos:line="49" pos:column="55">'A'</lit:literal> <op:operator pos:line="49" pos:column="59">+</op:operator> <name pos:line="49" pos:column="61">nb</name> <op:operator pos:line="49" pos:column="64">)</op:operator> <op:operator pos:line="49" pos:column="66">)</op:operator></expr> )</condition><then pos:line="49" pos:column="69"> <block pos:line="49" pos:column="70">{
				<if pos:line="50" pos:column="33">if<condition pos:line="50" pos:column="35">( <expr><op:operator pos:line="50" pos:column="37">(</op:operator> <name pos:line="50" pos:column="39">ch</name> <op:operator pos:line="50" pos:column="42">&lt;</op:operator> <lit:literal type="char" pos:line="50" pos:column="44">'a'</lit:literal> <op:operator pos:line="50" pos:column="48">)</op:operator> <op:operator pos:line="50" pos:column="50">||</op:operator> <op:operator pos:line="50" pos:column="53">(</op:operator> <name pos:line="50" pos:column="55">ch</name> <op:operator pos:line="50" pos:column="58">&gt;=</op:operator> <op:operator pos:line="50" pos:column="61">(</op:operator> <lit:literal type="char" pos:line="50" pos:column="63">'a'</lit:literal> <op:operator pos:line="50" pos:column="67">+</op:operator> <name pos:line="50" pos:column="69">nb</name> <op:operator pos:line="50" pos:column="72">)</op:operator> <op:operator pos:line="50" pos:column="74">)</op:operator></expr> )</condition><then pos:line="50" pos:column="77"> <block pos:line="50" pos:column="78">{
					<return pos:line="51" pos:column="41">return <expr><lit:literal type="boolean" pos:line="51" pos:column="48">false</lit:literal></expr>;</return>
				}</block></then></if>
			}</block></then></if>
		}</block></then></if>
	}</block></else></if>
	<return pos:line="56" pos:column="9">return <expr><lit:literal type="boolean" pos:line="56" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="59" pos:column="1">static</specifier> <specifier pos:line="59" pos:column="8">inline</specifier> <name pos:line="59" pos:column="15">unsigned</name></type> <name pos:line="59" pos:column="24">IsOperator</name><parameter_list pos:line="59" pos:column="34">( <param><decl><type><name pos:line="59" pos:column="36">StyleContext</name> <type:modifier pos:line="59" pos:column="49">&amp;</type:modifier></type> <name pos:line="59" pos:column="51">sc</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="55">WordList</name> <type:modifier pos:line="59" pos:column="64">&amp;</type:modifier></type> <name pos:line="59" pos:column="66">op</name></decl></param> )</parameter_list> <block pos:line="59" pos:column="71">{
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">int</name></type> <name pos:line="60" pos:column="13">i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="61" pos:column="9">char</name></type> <name><name pos:line="61" pos:column="14">s</name><index pos:line="61" pos:column="15">[<expr><lit:literal type="number" pos:line="61" pos:column="16">3</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name pos:line="63" pos:column="9">s</name><index pos:line="63" pos:column="10">[<expr><lit:literal type="number" pos:line="63" pos:column="11">0</lit:literal></expr>]</index></name> <op:operator pos:line="63" pos:column="14">=</op:operator> <name><name pos:line="63" pos:column="16">sc</name><op:operator pos:line="63" pos:column="18">.</op:operator><name pos:line="63" pos:column="19">ch</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="64" pos:column="9">s</name><index pos:line="64" pos:column="10">[<expr><lit:literal type="number" pos:line="64" pos:column="11">1</lit:literal></expr>]</index></name> <op:operator pos:line="64" pos:column="14">=</op:operator> <name><name pos:line="64" pos:column="16">sc</name><op:operator pos:line="64" pos:column="18">.</op:operator><name pos:line="64" pos:column="19">chNext</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="65" pos:column="9">s</name><index pos:line="65" pos:column="10">[<expr><lit:literal type="number" pos:line="65" pos:column="11">2</lit:literal></expr>]</index></name> <op:operator pos:line="65" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="65" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<for pos:line="66" pos:column="9">for( <init><expr><name pos:line="66" pos:column="14">i</name> <op:operator pos:line="66" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="66" pos:column="18">0</lit:literal></expr>;</init> <condition><expr><name pos:line="66" pos:column="21">i</name> <op:operator pos:line="66" pos:column="23">&lt;</op:operator> <name><name pos:line="66" pos:column="25">op</name><op:operator pos:line="66" pos:column="27">.</op:operator><name pos:line="66" pos:column="28">len</name></name></expr>;</condition> <incr><expr><name pos:line="66" pos:column="33">i</name><op:operator pos:line="66" pos:column="34">++</op:operator></expr></incr> ) <block pos:line="66" pos:column="39">{
		<if pos:line="67" pos:column="17">if<condition pos:line="67" pos:column="19">( <expr><op:operator pos:line="67" pos:column="21">(</op:operator> <call><name pos:line="67" pos:column="23">strlen</name><argument_list pos:line="67" pos:column="29">( <argument><expr><name><name pos:line="67" pos:column="31">op</name><op:operator pos:line="67" pos:column="33">.</op:operator><name pos:line="67" pos:column="34">words</name><index pos:line="67" pos:column="39">[<expr><name pos:line="67" pos:column="40">i</name></expr>]</index></name></expr></argument> )</argument_list></call> <op:operator pos:line="67" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="67" pos:column="48">2</lit:literal> <op:operator pos:line="67" pos:column="50">)</op:operator> <op:operator pos:line="67" pos:column="52">&amp;&amp;</op:operator>
			<op:operator pos:line="68" pos:column="25">(</op:operator> <name><name pos:line="68" pos:column="27">s</name><index pos:line="68" pos:column="28">[<expr><lit:literal type="number" pos:line="68" pos:column="29">0</lit:literal></expr>]</index></name> <op:operator pos:line="68" pos:column="32">==</op:operator> <name><name pos:line="68" pos:column="35">op</name><op:operator pos:line="68" pos:column="37">.</op:operator><name pos:line="68" pos:column="38">words</name><index pos:line="68" pos:column="43">[<expr><name pos:line="68" pos:column="44">i</name></expr>]</index><index pos:line="68" pos:column="46">[<expr><lit:literal type="number" pos:line="68" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="68" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="68" pos:column="53">s</name><index pos:line="68" pos:column="54">[<expr><lit:literal type="number" pos:line="68" pos:column="55">1</lit:literal></expr>]</index></name> <op:operator pos:line="68" pos:column="58">==</op:operator> <name><name pos:line="68" pos:column="61">op</name><op:operator pos:line="68" pos:column="63">.</op:operator><name pos:line="68" pos:column="64">words</name><index pos:line="68" pos:column="69">[<expr><name pos:line="68" pos:column="70">i</name></expr>]</index><index pos:line="68" pos:column="72">[<expr><lit:literal type="number" pos:line="68" pos:column="73">1</lit:literal></expr>]</index></name> <op:operator pos:line="68" pos:column="76">)</op:operator></expr> )</condition><then pos:line="68" pos:column="79"> <block pos:line="68" pos:column="80">{
			<return pos:line="69" pos:column="25">return <expr><lit:literal type="number" pos:line="69" pos:column="32">2</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="72" pos:column="9">s</name><index pos:line="72" pos:column="10">[<expr><lit:literal type="number" pos:line="72" pos:column="11">1</lit:literal></expr>]</index></name> <op:operator pos:line="72" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="72" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<for pos:line="73" pos:column="9">for( <init><expr><name pos:line="73" pos:column="14">i</name> <op:operator pos:line="73" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="73" pos:column="18">0</lit:literal></expr>;</init> <condition><expr><name pos:line="73" pos:column="21">i</name> <op:operator pos:line="73" pos:column="23">&lt;</op:operator> <name><name pos:line="73" pos:column="25">op</name><op:operator pos:line="73" pos:column="27">.</op:operator><name pos:line="73" pos:column="28">len</name></name></expr>;</condition> <incr><expr><name pos:line="73" pos:column="33">i</name><op:operator pos:line="73" pos:column="34">++</op:operator></expr></incr> ) <block pos:line="73" pos:column="39">{
		<if pos:line="74" pos:column="17">if<condition pos:line="74" pos:column="19">( <expr><op:operator pos:line="74" pos:column="21">(</op:operator> <call><name pos:line="74" pos:column="23">strlen</name><argument_list pos:line="74" pos:column="29">( <argument><expr><name><name pos:line="74" pos:column="31">op</name><op:operator pos:line="74" pos:column="33">.</op:operator><name pos:line="74" pos:column="34">words</name><index pos:line="74" pos:column="39">[<expr><name pos:line="74" pos:column="40">i</name></expr>]</index></name></expr></argument> )</argument_list></call> <op:operator pos:line="74" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="74" pos:column="48">1</lit:literal> <op:operator pos:line="74" pos:column="50">)</op:operator> <op:operator pos:line="74" pos:column="52">&amp;&amp;</op:operator>
			<op:operator pos:line="75" pos:column="25">(</op:operator> <name><name pos:line="75" pos:column="27">s</name><index pos:line="75" pos:column="28">[<expr><lit:literal type="number" pos:line="75" pos:column="29">0</lit:literal></expr>]</index></name> <op:operator pos:line="75" pos:column="32">==</op:operator> <name><name pos:line="75" pos:column="35">op</name><op:operator pos:line="75" pos:column="37">.</op:operator><name pos:line="75" pos:column="38">words</name><index pos:line="75" pos:column="43">[<expr><name pos:line="75" pos:column="44">i</name></expr>]</index><index pos:line="75" pos:column="46">[<expr><lit:literal type="number" pos:line="75" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="75" pos:column="50">)</op:operator></expr> )</condition><then pos:line="75" pos:column="53"> <block pos:line="75" pos:column="54">{
			<return pos:line="76" pos:column="25">return <expr><lit:literal type="number" pos:line="76" pos:column="32">1</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="79" pos:column="9">return <expr><lit:literal type="number" pos:line="79" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="82" pos:column="1">static</specifier> <specifier pos:line="82" pos:column="8">inline</specifier> <name pos:line="82" pos:column="15">bool</name></type> <name pos:line="82" pos:column="20">IsEOL</name><parameter_list pos:line="82" pos:column="25">( <param><decl><type><name pos:line="82" pos:column="27">Accessor</name> <type:modifier pos:line="82" pos:column="36">&amp;</type:modifier></type><name pos:line="82" pos:column="37">styler</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="45">unsigned</name></type> <name pos:line="82" pos:column="54">curPos</name></decl></param> )</parameter_list> <block pos:line="82" pos:column="63">{
	<decl_stmt><decl><type><name pos:line="83" pos:column="9">unsigned</name></type> <name pos:line="83" pos:column="18">ch</name> <init pos:line="83" pos:column="21">= <expr><call><name><name pos:line="83" pos:column="23">styler</name><op:operator pos:line="83" pos:column="29">.</op:operator><name pos:line="83" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="83" pos:column="43">( <argument><expr><name pos:line="83" pos:column="45">curPos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="84" pos:column="9">if<condition pos:line="84" pos:column="11">( <expr><op:operator pos:line="84" pos:column="13">(</op:operator> <name pos:line="84" pos:column="15">ch</name> <op:operator pos:line="84" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="21">'\r'</lit:literal> <op:operator pos:line="84" pos:column="26">&amp;&amp;</op:operator> <call><name><name pos:line="84" pos:column="29">styler</name><op:operator pos:line="84" pos:column="35">.</op:operator><name pos:line="84" pos:column="36">SafeGetCharAt</name></name><argument_list pos:line="84" pos:column="49">( <argument><expr><name pos:line="84" pos:column="51">curPos</name> <op:operator pos:line="84" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="84" pos:column="60">1</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="84" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="67">'\n'</lit:literal> <op:operator pos:line="84" pos:column="72">)</op:operator> <op:operator pos:line="84" pos:column="74">||</op:operator>
		<op:operator pos:line="85" pos:column="17">(</op:operator> <name pos:line="85" pos:column="19">ch</name> <op:operator pos:line="85" pos:column="22">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="25">'\n'</lit:literal> <op:operator pos:line="85" pos:column="30">)</op:operator></expr> )</condition><then pos:line="85" pos:column="33"> <block pos:line="85" pos:column="34">{
		<return pos:line="86" pos:column="17">return <expr><lit:literal type="boolean" pos:line="86" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="88" pos:column="9">return <expr><lit:literal type="boolean" pos:line="88" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="91" pos:column="1">static</specifier> <specifier pos:line="91" pos:column="8">inline</specifier> <name pos:line="91" pos:column="15">bool</name></type> <name pos:line="91" pos:column="20">checkStatement</name><parameter_list pos:line="91" pos:column="34">(
	<param><decl><type><name pos:line="92" pos:column="9">Accessor</name> <type:modifier pos:line="92" pos:column="18">&amp;</type:modifier></type><name pos:line="92" pos:column="19">styler</name></decl></param>,
	<param><decl><type><name pos:line="93" pos:column="9">int</name> <type:modifier pos:line="93" pos:column="13">&amp;</type:modifier></type><name pos:line="93" pos:column="14">curPos</name></decl></param>,
	<param><decl><type><specifier pos:line="94" pos:column="9">const</specifier> <name pos:line="94" pos:column="15">char</name> <type:modifier pos:line="94" pos:column="20">*</type:modifier></type><name pos:line="94" pos:column="21">stt</name></decl></param>, <param><decl><type><name pos:line="94" pos:column="26">bool</name></type> <name pos:line="94" pos:column="31">spaceAfter</name> <init pos:line="94" pos:column="42">= <expr><lit:literal type="boolean" pos:line="94" pos:column="44">true</lit:literal></expr></init></decl></param> )</parameter_list> <block pos:line="94" pos:column="51">{
	<decl_stmt><decl><type><name pos:line="95" pos:column="9">int</name></type> <name pos:line="95" pos:column="13">len</name> <init pos:line="95" pos:column="17">= <expr><call><name pos:line="95" pos:column="19">strlen</name><argument_list pos:line="95" pos:column="25">( <argument><expr><name pos:line="95" pos:column="27">stt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="96" pos:column="9">int</name></type> <name pos:line="96" pos:column="13">i</name></decl>;</decl_stmt>
	<for pos:line="97" pos:column="9">for( <init><expr><name pos:line="97" pos:column="14">i</name> <op:operator pos:line="97" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="97" pos:column="18">0</lit:literal></expr>;</init> <condition><expr><name pos:line="97" pos:column="21">i</name> <op:operator pos:line="97" pos:column="23">&lt;</op:operator> <name pos:line="97" pos:column="25">len</name></expr>;</condition> <incr><expr><name pos:line="97" pos:column="30">i</name><op:operator pos:line="97" pos:column="31">++</op:operator></expr></incr> ) <block pos:line="97" pos:column="36">{
		<if pos:line="98" pos:column="17">if<condition pos:line="98" pos:column="19">( <expr><call><name><name pos:line="98" pos:column="21">styler</name><op:operator pos:line="98" pos:column="27">.</op:operator><name pos:line="98" pos:column="28">SafeGetCharAt</name></name><argument_list pos:line="98" pos:column="41">( <argument><expr><name pos:line="98" pos:column="43">curPos</name> <op:operator pos:line="98" pos:column="50">+</op:operator> <name pos:line="98" pos:column="52">i</name></expr></argument> )</argument_list></call> <op:operator pos:line="98" pos:column="56">!=</op:operator> <name><name pos:line="98" pos:column="59">stt</name><index pos:line="98" pos:column="62">[<expr><name pos:line="98" pos:column="63">i</name></expr>]</index></name></expr> )</condition><then pos:line="98" pos:column="67"> <block pos:line="98" pos:column="68">{
			<return pos:line="99" pos:column="25">return <expr><lit:literal type="boolean" pos:line="99" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<if pos:line="102" pos:column="9">if<condition pos:line="102" pos:column="11">( <expr><name pos:line="102" pos:column="13">spaceAfter</name></expr> )</condition><then pos:line="102" pos:column="25"> <block pos:line="102" pos:column="26">{
		<if pos:line="103" pos:column="17">if<condition pos:line="103" pos:column="19">( <expr><op:operator pos:line="103" pos:column="21">!</op:operator> <call><name pos:line="103" pos:column="23">isspace</name><argument_list pos:line="103" pos:column="30">( <argument><expr><call><name><name pos:line="103" pos:column="32">styler</name><op:operator pos:line="103" pos:column="38">.</op:operator><name pos:line="103" pos:column="39">SafeGetCharAt</name></name><argument_list pos:line="103" pos:column="52">( <argument><expr><name pos:line="103" pos:column="54">curPos</name> <op:operator pos:line="103" pos:column="61">+</op:operator> <name pos:line="103" pos:column="63">i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="103" pos:column="70"> <block pos:line="103" pos:column="71">{
			<return pos:line="104" pos:column="25">return <expr><lit:literal type="boolean" pos:line="104" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="107" pos:column="9">curPos</name> <op:operator pos:line="107" pos:column="16">+=</op:operator> <op:operator pos:line="107" pos:column="19">(</op:operator> <name pos:line="107" pos:column="21">len</name> <op:operator pos:line="107" pos:column="25">-</op:operator> <lit:literal type="number" pos:line="107" pos:column="27">1</lit:literal> <op:operator pos:line="107" pos:column="29">)</op:operator></expr>;</expr_stmt>
	<return pos:line="108" pos:column="9">return <expr><lit:literal type="boolean" pos:line="108" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="111" pos:column="1">static</specifier> <specifier pos:line="111" pos:column="8">inline</specifier> <name pos:line="111" pos:column="15">bool</name></type> <name pos:line="111" pos:column="20">checkEndSemicolon</name><parameter_list pos:line="111" pos:column="37">(
	<param><decl><type><name pos:line="112" pos:column="9">Accessor</name> <type:modifier pos:line="112" pos:column="18">&amp;</type:modifier></type><name pos:line="112" pos:column="19">styler</name></decl></param>,
	<param><decl><type><name pos:line="113" pos:column="9">int</name> <type:modifier pos:line="113" pos:column="13">&amp;</type:modifier></type><name pos:line="113" pos:column="14">curPos</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="22">int</name></type> <name pos:line="113" pos:column="26">endPos</name></decl></param> )</parameter_list>
<block pos:line="114" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="115" pos:column="9">const</specifier> <name pos:line="115" pos:column="15">char</name> <type:modifier pos:line="115" pos:column="20">*</type:modifier></type><name pos:line="115" pos:column="21">stt</name> <init pos:line="115" pos:column="25">= <expr><lit:literal type="string" pos:line="115" pos:column="27">"END"</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="116" pos:column="9">int</name></type> <name pos:line="116" pos:column="13">len</name> <init pos:line="116" pos:column="17">= <expr><call><name pos:line="116" pos:column="19">strlen</name><argument_list pos:line="116" pos:column="25">( <argument><expr><name pos:line="116" pos:column="27">stt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="117" pos:column="9">int</name></type> <name pos:line="117" pos:column="13">i</name></decl>;</decl_stmt>
	<for pos:line="118" pos:column="9">for( <init><expr><name pos:line="118" pos:column="14">i</name> <op:operator pos:line="118" pos:column="16">=</op:operator> <lit:literal type="number" pos:line="118" pos:column="18">0</lit:literal></expr>;</init> <condition><expr><name pos:line="118" pos:column="21">i</name> <op:operator pos:line="118" pos:column="23">&lt;</op:operator> <name pos:line="118" pos:column="25">len</name></expr>;</condition> <incr><expr><name pos:line="118" pos:column="30">i</name><op:operator pos:line="118" pos:column="31">++</op:operator></expr></incr> ) <block pos:line="118" pos:column="36">{
		<if pos:line="119" pos:column="17">if<condition pos:line="119" pos:column="19">( <expr><call><name><name pos:line="119" pos:column="21">styler</name><op:operator pos:line="119" pos:column="27">.</op:operator><name pos:line="119" pos:column="28">SafeGetCharAt</name></name><argument_list pos:line="119" pos:column="41">( <argument><expr><name pos:line="119" pos:column="43">curPos</name> <op:operator pos:line="119" pos:column="50">+</op:operator> <name pos:line="119" pos:column="52">i</name></expr></argument> )</argument_list></call> <op:operator pos:line="119" pos:column="56">!=</op:operator> <name><name pos:line="119" pos:column="59">stt</name><index pos:line="119" pos:column="62">[<expr><name pos:line="119" pos:column="63">i</name></expr>]</index></name></expr> )</condition><then pos:line="119" pos:column="67"> <block pos:line="119" pos:column="68">{
			<return pos:line="120" pos:column="25">return <expr><lit:literal type="boolean" pos:line="120" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<while pos:line="123" pos:column="9">while<condition pos:line="123" pos:column="14">( <expr><call><name pos:line="123" pos:column="16">isspace</name><argument_list pos:line="123" pos:column="23">( <argument><expr><call><name><name pos:line="123" pos:column="25">styler</name><op:operator pos:line="123" pos:column="31">.</op:operator><name pos:line="123" pos:column="32">SafeGetCharAt</name></name><argument_list pos:line="123" pos:column="45">( <argument><expr><name pos:line="123" pos:column="47">curPos</name> <op:operator pos:line="123" pos:column="54">+</op:operator> <name pos:line="123" pos:column="56">i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block pos:line="123" pos:column="64">{
		<expr_stmt><expr><name pos:line="124" pos:column="17">i</name><op:operator pos:line="124" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<if pos:line="125" pos:column="17">if<condition pos:line="125" pos:column="19">( <expr><op:operator pos:line="125" pos:column="21">(</op:operator> <name pos:line="125" pos:column="23">curPos</name> <op:operator pos:line="125" pos:column="30">+</op:operator> <name pos:line="125" pos:column="32">i</name> <op:operator pos:line="125" pos:column="34">)</op:operator> <op:operator pos:line="125" pos:column="36">&gt;=</op:operator> <name pos:line="125" pos:column="39">endPos</name></expr> )</condition><then pos:line="125" pos:column="47"> <return pos:line="125" pos:column="48">return <expr><lit:literal type="boolean" pos:line="125" pos:column="55">false</lit:literal></expr>;</return></then></if>
	}</block></while>
	<if pos:line="127" pos:column="9">if<condition pos:line="127" pos:column="11">( <expr><call><name><name pos:line="127" pos:column="13">styler</name><op:operator pos:line="127" pos:column="19">.</op:operator><name pos:line="127" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="127" pos:column="33">( <argument><expr><name pos:line="127" pos:column="35">curPos</name> <op:operator pos:line="127" pos:column="42">+</op:operator> <name pos:line="127" pos:column="44">i</name></expr></argument> )</argument_list></call> <op:operator pos:line="127" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="127" pos:column="51">';'</lit:literal></expr> )</condition><then pos:line="127" pos:column="56"> <block pos:line="127" pos:column="57">{
		<return pos:line="128" pos:column="17">return <expr><lit:literal type="boolean" pos:line="128" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="130" pos:column="9">curPos</name> <op:operator pos:line="130" pos:column="16">+=</op:operator> <op:operator pos:line="130" pos:column="19">(</op:operator> <name pos:line="130" pos:column="21">i</name> <op:operator pos:line="130" pos:column="23">-</op:operator> <lit:literal type="number" pos:line="130" pos:column="25">1</lit:literal> <op:operator pos:line="130" pos:column="27">)</op:operator></expr>;</expr_stmt>
	<return pos:line="131" pos:column="9">return <expr><lit:literal type="boolean" pos:line="131" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="134" pos:column="1">static</specifier> <specifier pos:line="134" pos:column="8">inline</specifier> <name pos:line="134" pos:column="15">bool</name></type> <name pos:line="134" pos:column="20">checkKeyIdentOper</name><parameter_list pos:line="134" pos:column="37">(

	<param><decl><type><name pos:line="136" pos:column="9">Accessor</name> <type:modifier pos:line="136" pos:column="18">&amp;</type:modifier></type><name pos:line="136" pos:column="19">styler</name></decl></param>,
	<param><decl><type><name pos:line="137" pos:column="9">int</name> <type:modifier pos:line="137" pos:column="13">&amp;</type:modifier></type><name pos:line="137" pos:column="14">curPos</name></decl></param>, <param><decl><type><name pos:line="137" pos:column="22">int</name></type> <name pos:line="137" pos:column="26">endPos</name></decl></param>,
	<param><decl><type><specifier pos:line="138" pos:column="9">const</specifier> <name pos:line="138" pos:column="15">char</name> <type:modifier pos:line="138" pos:column="20">*</type:modifier></type><name pos:line="138" pos:column="21">stt</name></decl></param>, <param><decl><type><specifier pos:line="138" pos:column="26">const</specifier> <name pos:line="138" pos:column="32">char</name></type> <name pos:line="138" pos:column="37">etk</name></decl></param> )</parameter_list> <block pos:line="138" pos:column="43">{
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">int</name></type> <name pos:line="139" pos:column="13">newPos</name> <init pos:line="139" pos:column="20">= <expr><name pos:line="139" pos:column="22">curPos</name></expr></init></decl>;</decl_stmt>
	<if pos:line="140" pos:column="9">if<condition pos:line="140" pos:column="11">( <expr><op:operator pos:line="140" pos:column="13">!</op:operator> <call><name pos:line="140" pos:column="15">checkStatement</name><argument_list pos:line="140" pos:column="29">( <argument><expr><name pos:line="140" pos:column="31">styler</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="39">newPos</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="47">stt</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="140" pos:column="54">
		<return pos:line="141" pos:column="17">return <expr><lit:literal type="boolean" pos:line="141" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name pos:line="142" pos:column="9">newPos</name><op:operator pos:line="142" pos:column="15">++</op:operator></expr>;</expr_stmt>
	<if pos:line="143" pos:column="9">if<condition pos:line="143" pos:column="11">( <expr><name pos:line="143" pos:column="13">newPos</name> <op:operator pos:line="143" pos:column="20">&gt;=</op:operator> <name pos:line="143" pos:column="23">endPos</name></expr> )</condition><then pos:line="143" pos:column="31">
		<return pos:line="144" pos:column="17">return <expr><lit:literal type="boolean" pos:line="144" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<if pos:line="145" pos:column="9">if<condition pos:line="145" pos:column="11">( <expr><op:operator pos:line="145" pos:column="13">!</op:operator> <call><name pos:line="145" pos:column="15">isspace</name><argument_list pos:line="145" pos:column="22">( <argument><expr><call><name><name pos:line="145" pos:column="24">styler</name><op:operator pos:line="145" pos:column="30">.</op:operator><name pos:line="145" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="145" pos:column="44">( <argument><expr><name pos:line="145" pos:column="46">newPos</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="145" pos:column="58">
		<return pos:line="146" pos:column="17">return <expr><lit:literal type="boolean" pos:line="146" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name pos:line="147" pos:column="9">newPos</name><op:operator pos:line="147" pos:column="15">++</op:operator></expr>;</expr_stmt>
	<if pos:line="148" pos:column="9">if<condition pos:line="148" pos:column="11">( <expr><name pos:line="148" pos:column="13">newPos</name> <op:operator pos:line="148" pos:column="20">&gt;=</op:operator> <name pos:line="148" pos:column="23">endPos</name></expr> )</condition><then pos:line="148" pos:column="31">
		<return pos:line="149" pos:column="17">return <expr><lit:literal type="boolean" pos:line="149" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<while pos:line="150" pos:column="9">while<condition pos:line="150" pos:column="14">( <expr><call><name pos:line="150" pos:column="16">isspace</name><argument_list pos:line="150" pos:column="23">( <argument><expr><call><name><name pos:line="150" pos:column="25">styler</name><op:operator pos:line="150" pos:column="31">.</op:operator><name pos:line="150" pos:column="32">SafeGetCharAt</name></name><argument_list pos:line="150" pos:column="45">( <argument><expr><name pos:line="150" pos:column="47">newPos</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block pos:line="150" pos:column="60">{
		<expr_stmt><expr><name pos:line="151" pos:column="17">newPos</name><op:operator pos:line="151" pos:column="23">++</op:operator></expr>;</expr_stmt>
		<if pos:line="152" pos:column="17">if<condition pos:line="152" pos:column="19">( <expr><name pos:line="152" pos:column="21">newPos</name> <op:operator pos:line="152" pos:column="28">&gt;=</op:operator> <name pos:line="152" pos:column="31">endPos</name></expr> )</condition><then pos:line="152" pos:column="39">
			<return pos:line="153" pos:column="25">return <expr><lit:literal type="boolean" pos:line="153" pos:column="32">false</lit:literal></expr>;</return></then></if>
	}</block></while>
	<if pos:line="155" pos:column="9">if<condition pos:line="155" pos:column="11">( <expr><op:operator pos:line="155" pos:column="13">!</op:operator> <call><name pos:line="155" pos:column="15">isalpha</name><argument_list pos:line="155" pos:column="22">( <argument><expr><call><name><name pos:line="155" pos:column="24">styler</name><op:operator pos:line="155" pos:column="30">.</op:operator><name pos:line="155" pos:column="31">SafeGetCharAt</name></name><argument_list pos:line="155" pos:column="44">( <argument><expr><name pos:line="155" pos:column="46">newPos</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="155" pos:column="58">
		<return pos:line="156" pos:column="17">return <expr><lit:literal type="boolean" pos:line="156" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name pos:line="157" pos:column="9">newPos</name><op:operator pos:line="157" pos:column="15">++</op:operator></expr>;</expr_stmt>
	<if pos:line="158" pos:column="9">if<condition pos:line="158" pos:column="11">( <expr><name pos:line="158" pos:column="13">newPos</name> <op:operator pos:line="158" pos:column="20">&gt;=</op:operator> <name pos:line="158" pos:column="23">endPos</name></expr> )</condition><then pos:line="158" pos:column="31">
		<return pos:line="159" pos:column="17">return <expr><lit:literal type="boolean" pos:line="159" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">char</name></type> <name pos:line="160" pos:column="14">ch</name></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="161" pos:column="9">ch</name> <op:operator pos:line="161" pos:column="12">=</op:operator> <call><name><name pos:line="161" pos:column="14">styler</name><op:operator pos:line="161" pos:column="20">.</op:operator><name pos:line="161" pos:column="21">SafeGetCharAt</name></name><argument_list pos:line="161" pos:column="34">( <argument><expr><name pos:line="161" pos:column="36">newPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<while pos:line="162" pos:column="9">while<condition pos:line="162" pos:column="14">( <expr><call><name pos:line="162" pos:column="16">isalpha</name><argument_list pos:line="162" pos:column="23">( <argument><expr><name pos:line="162" pos:column="25">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="162" pos:column="30">||</op:operator> <call><name pos:line="162" pos:column="33">isdigit</name><argument_list pos:line="162" pos:column="40">( <argument><expr><name pos:line="162" pos:column="42">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="162" pos:column="47">||</op:operator> <name pos:line="162" pos:column="50">ch</name> <op:operator pos:line="162" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="162" pos:column="56">'_'</lit:literal></expr> )</condition> <block pos:line="162" pos:column="62">{
		<expr_stmt><expr><name pos:line="163" pos:column="17">newPos</name><op:operator pos:line="163" pos:column="23">++</op:operator></expr>;</expr_stmt>
		<if pos:line="164" pos:column="17">if<condition pos:line="164" pos:column="19">( <expr><name pos:line="164" pos:column="21">newPos</name> <op:operator pos:line="164" pos:column="28">&gt;=</op:operator> <name pos:line="164" pos:column="31">endPos</name></expr> )</condition><then pos:line="164" pos:column="39"> <return pos:line="164" pos:column="40">return <expr><lit:literal type="boolean" pos:line="164" pos:column="47">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="165" pos:column="17">ch</name> <op:operator pos:line="165" pos:column="20">=</op:operator> <call><name><name pos:line="165" pos:column="22">styler</name><op:operator pos:line="165" pos:column="28">.</op:operator><name pos:line="165" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="165" pos:column="42">( <argument><expr><name pos:line="165" pos:column="44">newPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while pos:line="167" pos:column="9">while<condition pos:line="167" pos:column="14">( <expr><call><name pos:line="167" pos:column="16">isspace</name><argument_list pos:line="167" pos:column="23">( <argument><expr><call><name><name pos:line="167" pos:column="25">styler</name><op:operator pos:line="167" pos:column="31">.</op:operator><name pos:line="167" pos:column="32">SafeGetCharAt</name></name><argument_list pos:line="167" pos:column="45">( <argument><expr><name pos:line="167" pos:column="47">newPos</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition> <block pos:line="167" pos:column="60">{
		<expr_stmt><expr><name pos:line="168" pos:column="17">newPos</name><op:operator pos:line="168" pos:column="23">++</op:operator></expr>;</expr_stmt>
		<if pos:line="169" pos:column="17">if<condition pos:line="169" pos:column="19">( <expr><name pos:line="169" pos:column="21">newPos</name> <op:operator pos:line="169" pos:column="28">&gt;=</op:operator> <name pos:line="169" pos:column="31">endPos</name></expr> )</condition><then pos:line="169" pos:column="39"> <return pos:line="169" pos:column="40">return <expr><lit:literal type="boolean" pos:line="169" pos:column="47">false</lit:literal></expr>;</return></then></if>
	}</block></while>
	<if pos:line="171" pos:column="9">if<condition pos:line="171" pos:column="11">( <expr><call><name><name pos:line="171" pos:column="13">styler</name><op:operator pos:line="171" pos:column="19">.</op:operator><name pos:line="171" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="171" pos:column="33">( <argument><expr><name pos:line="171" pos:column="35">newPos</name></expr></argument> )</argument_list></call> <op:operator pos:line="171" pos:column="44">!=</op:operator> <name pos:line="171" pos:column="47">etk</name></expr> )</condition><then pos:line="171" pos:column="52">
		<return pos:line="172" pos:column="17">return <expr><lit:literal type="boolean" pos:line="172" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name pos:line="173" pos:column="9">curPos</name> <op:operator pos:line="173" pos:column="16">=</op:operator> <name pos:line="173" pos:column="18">newPos</name></expr>;</expr_stmt>
	<return pos:line="174" pos:column="9">return <expr><lit:literal type="boolean" pos:line="174" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="177" pos:column="1">static</specifier> <name pos:line="177" pos:column="8">void</name></type> <name pos:line="177" pos:column="13">FoldModulaDoc</name><parameter_list pos:line="177" pos:column="26">( <param><decl><type><name pos:line="177" pos:column="28">unsigned</name> <name pos:line="177" pos:column="37">int</name></type> <name pos:line="177" pos:column="41">startPos</name></decl></param>,
						 <param><decl><type><name pos:line="178" pos:column="50">int</name></type> <name pos:line="178" pos:column="54">length</name></decl></param>,
						 <param><decl><type><name pos:line="179" pos:column="50">int</name></type></decl></param> , <param><decl><type><name><name pos:line="179" pos:column="56">WordList</name> <type:modifier pos:line="179" pos:column="65">*</type:modifier><index pos:line="179" pos:column="66">[]</index></name></type></decl></param>,
						 <param><decl><type><name pos:line="180" pos:column="50">Accessor</name> <type:modifier pos:line="180" pos:column="59">&amp;</type:modifier></type><name pos:line="180" pos:column="60">styler</name></decl></param>)</parameter_list>
<block pos:line="181" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="182" pos:column="9">int</name></type> <name pos:line="182" pos:column="13">curLine</name> <init pos:line="182" pos:column="21">= <expr><call><name><name pos:line="182" pos:column="23">styler</name><op:operator pos:line="182" pos:column="29">.</op:operator><name pos:line="182" pos:column="30">GetLine</name></name><argument_list pos:line="182" pos:column="37">(<argument><expr><name pos:line="182" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="183" pos:column="9">int</name></type> <name pos:line="183" pos:column="13">curLevel</name> <init pos:line="183" pos:column="22">= <expr><name pos:line="183" pos:column="24">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="184" pos:column="9">int</name></type> <name pos:line="184" pos:column="13">endPos</name> <init pos:line="184" pos:column="20">= <expr><name pos:line="184" pos:column="22">startPos</name> <op:operator pos:line="184" pos:column="31">+</op:operator> <name pos:line="184" pos:column="33">length</name></expr></init></decl>;</decl_stmt>
	<if pos:line="185" pos:column="9">if<condition pos:line="185" pos:column="11">( <expr><name pos:line="185" pos:column="13">curLine</name> <op:operator pos:line="185" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="185" pos:column="23">0</lit:literal></expr> )</condition><then pos:line="185" pos:column="26">
		<expr_stmt><expr><name pos:line="186" pos:column="17">curLevel</name> <op:operator pos:line="186" pos:column="26">=</op:operator> <call><name><name pos:line="186" pos:column="28">styler</name><op:operator pos:line="186" pos:column="34">.</op:operator><name pos:line="186" pos:column="35">LevelAt</name></name><argument_list pos:line="186" pos:column="42">( <argument><expr><name pos:line="186" pos:column="44">curLine</name> <op:operator pos:line="186" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="186" pos:column="54">1</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="186" pos:column="58">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="186" pos:column="61">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">int</name></type> <name pos:line="187" pos:column="13">curPos</name> <init pos:line="187" pos:column="20">= <expr><name pos:line="187" pos:column="22">startPos</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="188" pos:column="9">int</name></type> <name pos:line="188" pos:column="13">style</name> <init pos:line="188" pos:column="19">= <expr><call><name><name pos:line="188" pos:column="21">styler</name><op:operator pos:line="188" pos:column="27">.</op:operator><name pos:line="188" pos:column="28">StyleAt</name></name><argument_list pos:line="188" pos:column="35">( <argument><expr><name pos:line="188" pos:column="37">curPos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="189" pos:column="9">int</name></type> <name pos:line="189" pos:column="13">visChars</name> <init pos:line="189" pos:column="22">= <expr><lit:literal type="number" pos:line="189" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="190" pos:column="9">int</name></type> <name pos:line="190" pos:column="13">nextLevel</name> <init pos:line="190" pos:column="23">= <expr><name pos:line="190" pos:column="25">curLevel</name></expr></init></decl>;</decl_stmt>

	<while pos:line="192" pos:column="9">while<condition pos:line="192" pos:column="14">( <expr><name pos:line="192" pos:column="16">curPos</name> <op:operator pos:line="192" pos:column="23">&lt;</op:operator> <name pos:line="192" pos:column="25">endPos</name></expr> )</condition> <block pos:line="192" pos:column="34">{
		<if pos:line="193" pos:column="17">if<condition pos:line="193" pos:column="19">( <expr><op:operator pos:line="193" pos:column="21">!</op:operator> <call><name pos:line="193" pos:column="23">isspace</name><argument_list pos:line="193" pos:column="30">( <argument><expr><call><name><name pos:line="193" pos:column="32">styler</name><op:operator pos:line="193" pos:column="38">.</op:operator><name pos:line="193" pos:column="39">SafeGetCharAt</name></name><argument_list pos:line="193" pos:column="52">( <argument><expr><name pos:line="193" pos:column="54">curPos</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="193" pos:column="66"> <expr_stmt><expr><name pos:line="193" pos:column="67">visChars</name><op:operator pos:line="193" pos:column="75">++</op:operator></expr>;</expr_stmt></then></if>

		<switch pos:line="195" pos:column="17">switch<condition pos:line="195" pos:column="23">( <expr><name pos:line="195" pos:column="25">style</name></expr> )</condition> <block pos:line="195" pos:column="33">{
		<case pos:line="196" pos:column="17">case <expr><name pos:line="196" pos:column="22">SCE_MODULA_COMMENT</name></expr>:
			<if pos:line="197" pos:column="25">if<condition pos:line="197" pos:column="27">( <expr><call><name pos:line="197" pos:column="29">checkStatement</name><argument_list pos:line="197" pos:column="43">( <argument><expr><name pos:line="197" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="197" pos:column="61">"(*"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="197" pos:column="69">
				<expr_stmt><expr><name pos:line="198" pos:column="33">nextLevel</name><op:operator pos:line="198" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="199" pos:column="25">else
			<if pos:line="200" pos:column="25">if<condition pos:line="200" pos:column="27">( <expr><call><name pos:line="200" pos:column="29">checkStatement</name><argument_list pos:line="200" pos:column="43">( <argument><expr><name pos:line="200" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="200" pos:column="61">"*)"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="200" pos:column="69">
				<expr_stmt><expr><name pos:line="201" pos:column="33">nextLevel</name><op:operator pos:line="201" pos:column="42">--</op:operator></expr>;</expr_stmt></then></if></else></if>
			<break pos:line="202" pos:column="25">break;</break>

		</case><case pos:line="204" pos:column="17">case <expr><name pos:line="204" pos:column="22">SCE_MODULA_DOXYCOMM</name></expr>:
			<if pos:line="205" pos:column="25">if<condition pos:line="205" pos:column="27">( <expr><call><name pos:line="205" pos:column="29">checkStatement</name><argument_list pos:line="205" pos:column="43">( <argument><expr><name pos:line="205" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="205" pos:column="61">"(**"</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="205" pos:column="68">false</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="205" pos:column="77">
				<expr_stmt><expr><name pos:line="206" pos:column="33">nextLevel</name><op:operator pos:line="206" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="207" pos:column="25">else
			<if pos:line="208" pos:column="25">if<condition pos:line="208" pos:column="27">( <expr><call><name pos:line="208" pos:column="29">checkStatement</name><argument_list pos:line="208" pos:column="43">( <argument><expr><name pos:line="208" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="208" pos:column="61">"*)"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="208" pos:column="69">
				<expr_stmt><expr><name pos:line="209" pos:column="33">nextLevel</name><op:operator pos:line="209" pos:column="42">--</op:operator></expr>;</expr_stmt></then></if></else></if>
			<break pos:line="210" pos:column="25">break;</break>

		</case><case pos:line="212" pos:column="17">case <expr><name pos:line="212" pos:column="22">SCE_MODULA_KEYWORD</name></expr>:
			<if pos:line="213" pos:column="25">if<condition pos:line="213" pos:column="27">( <expr><call><name pos:line="213" pos:column="29">checkStatement</name><argument_list pos:line="213" pos:column="43">( <argument><expr><name pos:line="213" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="213" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="213" pos:column="61">"IF"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="213" pos:column="69">
				<expr_stmt><expr><name pos:line="214" pos:column="33">nextLevel</name><op:operator pos:line="214" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="215" pos:column="25">else
			<if pos:line="216" pos:column="25">if<condition pos:line="216" pos:column="27">( <expr><call><name pos:line="216" pos:column="29">checkStatement</name><argument_list pos:line="216" pos:column="43">( <argument><expr><name pos:line="216" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="216" pos:column="61">"BEGIN"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="216" pos:column="72">
				<expr_stmt><expr><name pos:line="217" pos:column="33">nextLevel</name><op:operator pos:line="217" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="218" pos:column="25">else
			<if pos:line="219" pos:column="25">if<condition pos:line="219" pos:column="27">( <expr><call><name pos:line="219" pos:column="29">checkStatement</name><argument_list pos:line="219" pos:column="43">( <argument><expr><name pos:line="219" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="219" pos:column="61">"TRY"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="219" pos:column="70">
				<expr_stmt><expr><name pos:line="220" pos:column="33">nextLevel</name><op:operator pos:line="220" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="221" pos:column="25">else
			<if pos:line="222" pos:column="25">if<condition pos:line="222" pos:column="27">( <expr><call><name pos:line="222" pos:column="29">checkStatement</name><argument_list pos:line="222" pos:column="43">( <argument><expr><name pos:line="222" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="61">"LOOP"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="222" pos:column="71">
				<expr_stmt><expr><name pos:line="223" pos:column="33">nextLevel</name><op:operator pos:line="223" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="224" pos:column="25">else
			<if pos:line="225" pos:column="25">if<condition pos:line="225" pos:column="27">( <expr><call><name pos:line="225" pos:column="29">checkStatement</name><argument_list pos:line="225" pos:column="43">( <argument><expr><name pos:line="225" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="225" pos:column="61">"FOR"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="225" pos:column="70">
				<expr_stmt><expr><name pos:line="226" pos:column="33">nextLevel</name><op:operator pos:line="226" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="227" pos:column="25">else
			<if pos:line="228" pos:column="25">if<condition pos:line="228" pos:column="27">( <expr><call><name pos:line="228" pos:column="29">checkStatement</name><argument_list pos:line="228" pos:column="43">( <argument><expr><name pos:line="228" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="228" pos:column="61">"WHILE"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="228" pos:column="72">
				<expr_stmt><expr><name pos:line="229" pos:column="33">nextLevel</name><op:operator pos:line="229" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="230" pos:column="25">else
			<if pos:line="231" pos:column="25">if<condition pos:line="231" pos:column="27">( <expr><call><name pos:line="231" pos:column="29">checkStatement</name><argument_list pos:line="231" pos:column="43">( <argument><expr><name pos:line="231" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="231" pos:column="61">"REPEAT"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="231" pos:column="73">
				<expr_stmt><expr><name pos:line="232" pos:column="33">nextLevel</name><op:operator pos:line="232" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="233" pos:column="25">else
			<if pos:line="234" pos:column="25">if<condition pos:line="234" pos:column="27">( <expr><call><name pos:line="234" pos:column="29">checkStatement</name><argument_list pos:line="234" pos:column="43">( <argument><expr><name pos:line="234" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="234" pos:column="61">"UNTIL"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="234" pos:column="72">
				<expr_stmt><expr><name pos:line="235" pos:column="33">nextLevel</name><op:operator pos:line="235" pos:column="42">--</op:operator></expr>;</expr_stmt></then>
			<else pos:line="236" pos:column="25">else
			<if pos:line="237" pos:column="25">if<condition pos:line="237" pos:column="27">( <expr><call><name pos:line="237" pos:column="29">checkStatement</name><argument_list pos:line="237" pos:column="43">( <argument><expr><name pos:line="237" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="237" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="237" pos:column="61">"WITH"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="237" pos:column="71">
				<expr_stmt><expr><name pos:line="238" pos:column="33">nextLevel</name><op:operator pos:line="238" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="239" pos:column="25">else
			<if pos:line="240" pos:column="25">if<condition pos:line="240" pos:column="27">( <expr><call><name pos:line="240" pos:column="29">checkStatement</name><argument_list pos:line="240" pos:column="43">( <argument><expr><name pos:line="240" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="240" pos:column="61">"CASE"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="240" pos:column="71">
				<expr_stmt><expr><name pos:line="241" pos:column="33">nextLevel</name><op:operator pos:line="241" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="242" pos:column="25">else
			<if pos:line="243" pos:column="25">if<condition pos:line="243" pos:column="27">( <expr><call><name pos:line="243" pos:column="29">checkStatement</name><argument_list pos:line="243" pos:column="43">( <argument><expr><name pos:line="243" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="243" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="243" pos:column="61">"TYPECASE"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="243" pos:column="75">
				<expr_stmt><expr><name pos:line="244" pos:column="33">nextLevel</name><op:operator pos:line="244" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="245" pos:column="25">else
			<if pos:line="246" pos:column="25">if<condition pos:line="246" pos:column="27">( <expr><call><name pos:line="246" pos:column="29">checkStatement</name><argument_list pos:line="246" pos:column="43">( <argument><expr><name pos:line="246" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="53">curPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="246" pos:column="61">"LOCK"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="246" pos:column="71">
				<expr_stmt><expr><name pos:line="247" pos:column="33">nextLevel</name><op:operator pos:line="247" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="248" pos:column="25">else
			<if pos:line="249" pos:column="25">if<condition pos:line="249" pos:column="27">( <expr><call><name pos:line="249" pos:column="29">checkKeyIdentOper</name><argument_list pos:line="249" pos:column="46">( <argument><expr><name pos:line="249" pos:column="48">styler</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="56">curPos</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="64">endPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="249" pos:column="72">"PROCEDURE"</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="249" pos:column="85">'('</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="249" pos:column="92">
				<expr_stmt><expr><name pos:line="250" pos:column="33">nextLevel</name><op:operator pos:line="250" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="251" pos:column="25">else
			<if pos:line="252" pos:column="25">if<condition pos:line="252" pos:column="27">( <expr><call><name pos:line="252" pos:column="29">checkKeyIdentOper</name><argument_list pos:line="252" pos:column="46">( <argument><expr><name pos:line="252" pos:column="48">styler</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="56">curPos</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="64">endPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="252" pos:column="72">"END"</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="252" pos:column="79">';'</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="252" pos:column="86"> <block pos:line="252" pos:column="87">{
				<decl_stmt><decl><type><name pos:line="253" pos:column="33">int</name></type> <name pos:line="253" pos:column="37">cln</name> <init pos:line="253" pos:column="41">= <expr><name pos:line="253" pos:column="43">curLine</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="254" pos:column="33">int</name></type> <name pos:line="254" pos:column="37">clv_old</name> <init pos:line="254" pos:column="45">= <expr><name pos:line="254" pos:column="47">curLevel</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="255" pos:column="33">int</name></type> <name pos:line="255" pos:column="37">pos</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="256" pos:column="33">char</name></type> <name pos:line="256" pos:column="38">ch</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="257" pos:column="33">int</name></type> <name pos:line="257" pos:column="37">clv_new</name></decl>;</decl_stmt>
				<while pos:line="258" pos:column="33">while<condition pos:line="258" pos:column="38">( <expr><name pos:line="258" pos:column="40">cln</name> <op:operator pos:line="258" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="258" pos:column="46">0</lit:literal></expr> )</condition> <block pos:line="258" pos:column="50">{
					<expr_stmt><expr><name pos:line="259" pos:column="41">clv_new</name> <op:operator pos:line="259" pos:column="49">=</op:operator> <call><name><name pos:line="259" pos:column="51">styler</name><op:operator pos:line="259" pos:column="57">.</op:operator><name pos:line="259" pos:column="58">LevelAt</name></name><argument_list pos:line="259" pos:column="65">( <argument><expr><name pos:line="259" pos:column="67">cln</name> <op:operator pos:line="259" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="259" pos:column="73">1</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="259" pos:column="77">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="259" pos:column="80">16</lit:literal></expr>;</expr_stmt>
					<if pos:line="260" pos:column="41">if<condition pos:line="260" pos:column="43">( <expr><name pos:line="260" pos:column="45">clv_new</name> <op:operator pos:line="260" pos:column="53">&lt;</op:operator> <name pos:line="260" pos:column="55">clv_old</name></expr> )</condition><then pos:line="260" pos:column="64"> <block pos:line="260" pos:column="65">{
						<expr_stmt><expr><name pos:line="261" pos:column="49">nextLevel</name><op:operator pos:line="261" pos:column="58">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="262" pos:column="49">pos</name> <op:operator pos:line="262" pos:column="53">=</op:operator> <call><name><name pos:line="262" pos:column="55">styler</name><op:operator pos:line="262" pos:column="61">.</op:operator><name pos:line="262" pos:column="62">LineStart</name></name><argument_list pos:line="262" pos:column="71">( <argument><expr><name pos:line="262" pos:column="73">cln</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<while pos:line="263" pos:column="49">while<condition pos:line="263" pos:column="54">( <expr><op:operator pos:line="263" pos:column="56">(</op:operator> <name pos:line="263" pos:column="58">ch</name> <op:operator pos:line="263" pos:column="61">=</op:operator> <call><name><name pos:line="263" pos:column="63">styler</name><op:operator pos:line="263" pos:column="69">.</op:operator><name pos:line="263" pos:column="70">SafeGetCharAt</name></name><argument_list pos:line="263" pos:column="83">( <argument><expr><name pos:line="263" pos:column="85">pos</name></expr></argument> )</argument_list></call> <op:operator pos:line="263" pos:column="91">)</op:operator> <op:operator pos:line="263" pos:column="93">!=</op:operator> <lit:literal type="char" pos:line="263" pos:column="96">'\n'</lit:literal></expr> )</condition> <block pos:line="263" pos:column="103">{
							<if pos:line="264" pos:column="57">if<condition pos:line="264" pos:column="59">( <expr><name pos:line="264" pos:column="61">ch</name> <op:operator pos:line="264" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="67">'P'</lit:literal></expr> )</condition><then pos:line="264" pos:column="72"> <block pos:line="264" pos:column="73">{
								<if pos:line="265" pos:column="65">if<condition pos:line="265" pos:column="67">( <expr><call><name><name pos:line="265" pos:column="69">styler</name><op:operator pos:line="265" pos:column="75">.</op:operator><name pos:line="265" pos:column="76">StyleAt</name></name><argument_list pos:line="265" pos:column="83">(<argument><expr><name pos:line="265" pos:column="84">pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="265" pos:column="89">==</op:operator> <name pos:line="265" pos:column="92">SCE_MODULA_KEYWORD</name></expr> )</condition><then pos:line="265" pos:column="112">	<block pos:line="265" pos:column="113">{
									<if pos:line="266" pos:column="73">if<condition pos:line="266" pos:column="75">( <expr><call><name pos:line="266" pos:column="77">checkKeyIdentOper</name><argument_list pos:line="266" pos:column="94">( <argument><expr><name pos:line="266" pos:column="96">styler</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="104">pos</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="109">endPos</name></expr></argument>,
														<argument><expr><lit:literal type="string" pos:line="267" pos:column="113">"PROCEDURE"</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="267" pos:column="126">'('</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="267" pos:column="133"> <block pos:line="267" pos:column="134">{
										<break pos:line="268" pos:column="81">break;</break>
									}</block></then></if>
								}</block></then></if>
							}</block></then></if>
							<expr_stmt><expr><name pos:line="272" pos:column="57">pos</name><op:operator pos:line="272" pos:column="60">++</op:operator></expr>;</expr_stmt>
						}</block></while>
						<expr_stmt><expr><name pos:line="274" pos:column="49">clv_old</name> <op:operator pos:line="274" pos:column="57">=</op:operator> <name pos:line="274" pos:column="59">clv_new</name></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="276" pos:column="41">cln</name><op:operator pos:line="276" pos:column="44">--</op:operator></expr>;</expr_stmt>
				}</block></while>
			}</block></then>
			<else pos:line="279" pos:column="25">else
			<if pos:line="280" pos:column="25">if<condition pos:line="280" pos:column="27">( <expr><call><name pos:line="280" pos:column="29">checkKeyIdentOper</name><argument_list pos:line="280" pos:column="46">( <argument><expr><name pos:line="280" pos:column="48">styler</name></expr></argument>, <argument><expr><name pos:line="280" pos:column="56">curPos</name></expr></argument>, <argument><expr><name pos:line="280" pos:column="64">endPos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="72">"END"</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="280" pos:column="79">'.'</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="280" pos:column="86">
				<expr_stmt><expr><name pos:line="281" pos:column="33">nextLevel</name><op:operator pos:line="281" pos:column="42">--</op:operator></expr>;</expr_stmt></then>
			<else pos:line="282" pos:column="25">else
			<if pos:line="283" pos:column="25">if<condition pos:line="283" pos:column="27">( <expr><call><name pos:line="283" pos:column="29">checkEndSemicolon</name><argument_list pos:line="283" pos:column="46">( <argument><expr><name pos:line="283" pos:column="48">styler</name></expr></argument>, <argument><expr><name pos:line="283" pos:column="56">curPos</name></expr></argument>, <argument><expr><name pos:line="283" pos:column="64">endPos</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="283" pos:column="74">
				<expr_stmt><expr><name pos:line="284" pos:column="33">nextLevel</name><op:operator pos:line="284" pos:column="42">--</op:operator></expr>;</expr_stmt></then>
			<else pos:line="285" pos:column="25">else <block pos:line="285" pos:column="30">{
				<while pos:line="286" pos:column="33">while<condition pos:line="286" pos:column="38">( <expr><call><name><name pos:line="286" pos:column="40">styler</name><op:operator pos:line="286" pos:column="46">.</op:operator><name pos:line="286" pos:column="47">StyleAt</name></name><argument_list pos:line="286" pos:column="54">( <argument><expr><name pos:line="286" pos:column="56">curPos</name> <op:operator pos:line="286" pos:column="63">+</op:operator> <lit:literal type="number" pos:line="286" pos:column="65">1</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="286" pos:column="69">==</op:operator> <name pos:line="286" pos:column="72">SCE_MODULA_KEYWORD</name></expr> )</condition>
					<expr_stmt><expr><name pos:line="287" pos:column="41">curPos</name><op:operator pos:line="287" pos:column="47">++</op:operator></expr>;</expr_stmt></while>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="289" pos:column="25">break;</break>

		</case><default pos:line="291" pos:column="17">default:
			<break pos:line="292" pos:column="25">break;</break>
		</default>}</block></switch>

		<if pos:line="295" pos:column="17">if<condition pos:line="295" pos:column="19">( <expr><call><name pos:line="295" pos:column="21">IsEOL</name><argument_list pos:line="295" pos:column="26">( <argument><expr><name pos:line="295" pos:column="28">styler</name></expr></argument>, <argument><expr><name pos:line="295" pos:column="36">curPos</name></expr></argument> )</argument_list></call> <op:operator pos:line="295" pos:column="45">||</op:operator> <op:operator pos:line="295" pos:column="48">(</op:operator> <name pos:line="295" pos:column="50">curPos</name> <op:operator pos:line="295" pos:column="57">==</op:operator> <name pos:line="295" pos:column="60">endPos</name> <op:operator pos:line="295" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="295" pos:column="69">1</lit:literal> <op:operator pos:line="295" pos:column="71">)</op:operator></expr> )</condition><then pos:line="295" pos:column="74"> <block pos:line="295" pos:column="75">{
			<decl_stmt><decl><type><name pos:line="296" pos:column="25">int</name></type> <name pos:line="296" pos:column="29">efectiveLevel</name> <init pos:line="296" pos:column="43">= <expr><name pos:line="296" pos:column="45">curLevel</name> <op:operator pos:line="296" pos:column="54">|</op:operator> <name pos:line="296" pos:column="56">nextLevel</name> <op:operator pos:line="296" pos:column="66">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="296" pos:column="69">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="297" pos:column="25">if<condition pos:line="297" pos:column="27">( <expr><name pos:line="297" pos:column="29">visChars</name> <op:operator pos:line="297" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="297" pos:column="41">0</lit:literal></expr> )</condition><then pos:line="297" pos:column="44">
				<expr_stmt><expr><name pos:line="298" pos:column="33">efectiveLevel</name> <op:operator pos:line="298" pos:column="47">|=</op:operator> <name pos:line="298" pos:column="50">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="299" pos:column="25">if<condition pos:line="299" pos:column="27">( <expr><name pos:line="299" pos:column="29">curLevel</name> <op:operator pos:line="299" pos:column="38">&lt;</op:operator> <name pos:line="299" pos:column="40">nextLevel</name></expr> )</condition><then pos:line="299" pos:column="51">
				<expr_stmt><expr><name pos:line="300" pos:column="33">efectiveLevel</name> <op:operator pos:line="300" pos:column="47">|=</op:operator> <name pos:line="300" pos:column="50">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="301" pos:column="25">if<condition pos:line="301" pos:column="27">( <expr><name pos:line="301" pos:column="29">efectiveLevel</name> <op:operator pos:line="301" pos:column="43">!=</op:operator> <call><name><name pos:line="301" pos:column="46">styler</name><op:operator pos:line="301" pos:column="52">.</op:operator><name pos:line="301" pos:column="53">LevelAt</name></name><argument_list pos:line="301" pos:column="60">(<argument><expr><name pos:line="301" pos:column="61">curLine</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="301" pos:column="71"> <block pos:line="301" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="302" pos:column="33">styler</name><op:operator pos:line="302" pos:column="39">.</op:operator><name pos:line="302" pos:column="40">SetLevel</name></name><argument_list pos:line="302" pos:column="48">(<argument><expr><name pos:line="302" pos:column="49">curLine</name></expr></argument>, <argument><expr><name pos:line="302" pos:column="58">efectiveLevel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="304" pos:column="25">curLine</name><op:operator pos:line="304" pos:column="32">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="305" pos:column="25">curLevel</name> <op:operator pos:line="305" pos:column="34">=</op:operator> <name pos:line="305" pos:column="36">nextLevel</name></expr>;</expr_stmt>
			<if pos:line="306" pos:column="25">if<condition pos:line="306" pos:column="27">( <expr><call><name pos:line="306" pos:column="29">IsEOL</name><argument_list pos:line="306" pos:column="34">( <argument><expr><name pos:line="306" pos:column="36">styler</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="44">curPos</name></expr></argument> )</argument_list></call> <op:operator pos:line="306" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="306" pos:column="56">(</op:operator> <name pos:line="306" pos:column="58">curPos</name> <op:operator pos:line="306" pos:column="65">==</op:operator> <name pos:line="306" pos:column="68">endPos</name> <op:operator pos:line="306" pos:column="75">-</op:operator> <lit:literal type="number" pos:line="306" pos:column="77">1</lit:literal> <op:operator pos:line="306" pos:column="79">)</op:operator></expr> )</condition><then pos:line="306" pos:column="82"> <block pos:line="306" pos:column="83">{
				<expr_stmt><expr><call><name><name pos:line="307" pos:column="33">styler</name><op:operator pos:line="307" pos:column="39">.</op:operator><name pos:line="307" pos:column="40">SetLevel</name></name><argument_list pos:line="307" pos:column="48">( <argument><expr><name pos:line="307" pos:column="50">curLine</name></expr></argument>, <argument><expr><op:operator pos:line="307" pos:column="59">(</op:operator> <name pos:line="307" pos:column="61">curLevel</name> <op:operator pos:line="307" pos:column="70">|</op:operator> <name pos:line="307" pos:column="72">curLevel</name> <op:operator pos:line="307" pos:column="81">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="307" pos:column="84">16</lit:literal><op:operator pos:line="307" pos:column="86">)</op:operator>
								<op:operator pos:line="308" pos:column="65">|</op:operator> <name pos:line="308" pos:column="67">SC_FOLDLEVELWHITEFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="310" pos:column="25">visChars</name> <op:operator pos:line="310" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="310" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="312" pos:column="17">curPos</name><op:operator pos:line="312" pos:column="23">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="313" pos:column="17">style</name> <op:operator pos:line="313" pos:column="23">=</op:operator> <call><name><name pos:line="313" pos:column="25">styler</name><op:operator pos:line="313" pos:column="31">.</op:operator><name pos:line="313" pos:column="32">StyleAt</name></name><argument_list pos:line="313" pos:column="39">( <argument><expr><name pos:line="313" pos:column="41">curPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><specifier pos:line="317" pos:column="1">static</specifier> <specifier pos:line="317" pos:column="8">inline</specifier> <name pos:line="317" pos:column="15">bool</name></type> <name pos:line="317" pos:column="20">skipWhiteSpaces</name><parameter_list pos:line="317" pos:column="35">( <param><decl><type><name pos:line="317" pos:column="37">StyleContext</name> <type:modifier pos:line="317" pos:column="50">&amp;</type:modifier></type> <name pos:line="317" pos:column="52">sc</name></decl></param> )</parameter_list> <block pos:line="317" pos:column="57">{
	<while pos:line="318" pos:column="9">while<condition pos:line="318" pos:column="14">( <expr><call><name pos:line="318" pos:column="16">isspace</name><argument_list pos:line="318" pos:column="23">( <argument><expr><name><name pos:line="318" pos:column="25">sc</name><op:operator pos:line="318" pos:column="27">.</op:operator><name pos:line="318" pos:column="28">ch</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:line="318" pos:column="35">{
		<expr_stmt><expr><call><name><name pos:line="319" pos:column="17">sc</name><op:operator pos:line="319" pos:column="19">.</op:operator><name pos:line="319" pos:column="20">SetState</name></name><argument_list pos:line="319" pos:column="28">( <argument><expr><name pos:line="319" pos:column="30">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="320" pos:column="17">if<condition pos:line="320" pos:column="19">( <expr><call><name><name pos:line="320" pos:column="21">sc</name><op:operator pos:line="320" pos:column="23">.</op:operator><name pos:line="320" pos:column="24">More</name></name><argument_list pos:line="320" pos:column="28">()</argument_list></call></expr> )</condition><then pos:line="320" pos:column="32">
			<expr_stmt><expr><call><name><name pos:line="321" pos:column="25">sc</name><op:operator pos:line="321" pos:column="27">.</op:operator><name pos:line="321" pos:column="28">Forward</name></name><argument_list pos:line="321" pos:column="35">()</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="322" pos:column="17">else
			<return pos:line="323" pos:column="25">return <expr><lit:literal type="boolean" pos:line="323" pos:column="32">false</lit:literal></expr>;</return></else></if>
	}</block></while>
	<return pos:line="325" pos:column="9">return <expr><lit:literal type="boolean" pos:line="325" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="328" pos:column="1">static</specifier> <name pos:line="328" pos:column="8">void</name></type> <name pos:line="328" pos:column="13">ColouriseModulaDoc</name><parameter_list pos:line="328" pos:column="31">(	<param><decl><type><name pos:line="328" pos:column="33">unsigned</name> <name pos:line="328" pos:column="42">int</name></type> <name pos:line="328" pos:column="46">startPos</name></decl></param>,
									<param><decl><type><name pos:line="329" pos:column="73">int</name></type> <name pos:line="329" pos:column="77">length</name></decl></param>,
									<param><decl><type><name pos:line="330" pos:column="73">int</name></type> <name pos:line="330" pos:column="77">initStyle</name></decl></param>,
									<param><decl><type><name pos:line="331" pos:column="73">WordList</name> <type:modifier pos:line="331" pos:column="82">*</type:modifier></type><name><name pos:line="331" pos:column="83">wl</name><index pos:line="331" pos:column="85">[]</index></name></decl></param>,
									<param><decl><type><name pos:line="332" pos:column="73">Accessor</name> <type:modifier pos:line="332" pos:column="82">&amp;</type:modifier></type><name pos:line="332" pos:column="83">styler</name></decl></param> )</parameter_list> <block pos:line="332" pos:column="92">{
	<decl_stmt><decl><type><name pos:line="333" pos:column="9">WordList</name><type:modifier pos:line="333" pos:column="17">&amp;</type:modifier></type> <name pos:line="333" pos:column="19">keyWords</name>		<init pos:line="333" pos:column="41">= <expr><op:operator pos:line="333" pos:column="43">*</op:operator><name><name pos:line="333" pos:column="44">wl</name><index pos:line="333" pos:column="46">[<expr><lit:literal type="number" pos:line="333" pos:column="47">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="334" pos:column="9">WordList</name><type:modifier pos:line="334" pos:column="17">&amp;</type:modifier></type> <name pos:line="334" pos:column="19">reservedWords</name>	<init pos:line="334" pos:column="33">= <expr><op:operator pos:line="334" pos:column="35">*</op:operator><name><name pos:line="334" pos:column="36">wl</name><index pos:line="334" pos:column="38">[<expr><lit:literal type="number" pos:line="334" pos:column="39">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="335" pos:column="9">WordList</name><type:modifier pos:line="335" pos:column="17">&amp;</type:modifier></type> <name pos:line="335" pos:column="19">operators</name> 	<init pos:line="335" pos:column="33">= <expr><op:operator pos:line="335" pos:column="35">*</op:operator><name><name pos:line="335" pos:column="36">wl</name><index pos:line="335" pos:column="38">[<expr><lit:literal type="number" pos:line="335" pos:column="39">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="336" pos:column="9">WordList</name><type:modifier pos:line="336" pos:column="17">&amp;</type:modifier></type> <name pos:line="336" pos:column="19">pragmaWords</name> 	<init pos:line="336" pos:column="33">= <expr><op:operator pos:line="336" pos:column="35">*</op:operator><name><name pos:line="336" pos:column="36">wl</name><index pos:line="336" pos:column="38">[<expr><lit:literal type="number" pos:line="336" pos:column="39">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="337" pos:column="9">WordList</name><type:modifier pos:line="337" pos:column="17">&amp;</type:modifier></type> <name pos:line="337" pos:column="19">escapeCodes</name>	<init pos:line="337" pos:column="33">= <expr><op:operator pos:line="337" pos:column="35">*</op:operator><name><name pos:line="337" pos:column="36">wl</name><index pos:line="337" pos:column="38">[<expr><lit:literal type="number" pos:line="337" pos:column="39">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="338" pos:column="9">WordList</name><type:modifier pos:line="338" pos:column="17">&amp;</type:modifier></type> <name pos:line="338" pos:column="19">doxyKeys</name>		<init pos:line="338" pos:column="41">= <expr><op:operator pos:line="338" pos:column="43">*</op:operator><name><name pos:line="338" pos:column="44">wl</name><index pos:line="338" pos:column="46">[<expr><lit:literal type="number" pos:line="338" pos:column="47">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="340" pos:column="9">const</specifier> <name pos:line="340" pos:column="15">int</name></type> <name pos:line="340" pos:column="19">BUFLEN</name> <init pos:line="340" pos:column="26">= <expr><lit:literal type="number" pos:line="340" pos:column="28">128</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="342" pos:column="9">char</name></type>	<name><name pos:line="342" pos:column="17">buf</name><index pos:line="342" pos:column="20">[<expr><name pos:line="342" pos:column="21">BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="343" pos:column="9">int</name></type>		<name pos:line="343" pos:column="25">i</name></decl><op:operator pos:line="343" pos:column="26">,</op:operator> <decl><type ref="prev"/><name pos:line="343" pos:column="28">kl</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="345" pos:column="9">int</name></type>  <name pos:line="345" pos:column="14">charPos</name> <init pos:line="345" pos:column="22">= <expr><lit:literal type="number" pos:line="345" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="347" pos:column="9">StyleContext</name></type> <name pos:line="347" pos:column="22">sc</name><parameter_list pos:line="347" pos:column="24">( <param><decl><type><name pos:line="347" pos:column="26">startPos</name></type></decl></param>, <param><decl><type><name pos:line="347" pos:column="36">length</name></type></decl></param>, <param><decl><type><name pos:line="347" pos:column="44">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="347" pos:column="55">styler</name></type></decl></param> )</parameter_list>;</function_decl>

	<while pos:line="349" pos:column="9">while<condition pos:line="349" pos:column="14">( <expr><call><name><name pos:line="349" pos:column="16">sc</name><op:operator pos:line="349" pos:column="18">.</op:operator><name pos:line="349" pos:column="19">More</name></name><argument_list pos:line="349" pos:column="23">()</argument_list></call></expr> )</condition> 	<block pos:line="349" pos:column="33">{
		<switch pos:line="350" pos:column="17">switch<condition pos:line="350" pos:column="23">( <expr><name><name pos:line="350" pos:column="25">sc</name><op:operator pos:line="350" pos:column="27">.</op:operator><name pos:line="350" pos:column="28">state</name></name></expr> )</condition>	<block pos:line="350" pos:column="41">{
		<case pos:line="351" pos:column="17">case <expr><name pos:line="351" pos:column="22">SCE_MODULA_DEFAULT</name></expr>:
			<if pos:line="352" pos:column="25">if<condition pos:line="352" pos:column="27">( <expr><op:operator pos:line="352" pos:column="29">!</op:operator> <call><name pos:line="352" pos:column="31">skipWhiteSpaces</name><argument_list pos:line="352" pos:column="46">( <argument><expr><name pos:line="352" pos:column="48">sc</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="352" pos:column="54"> <break pos:line="352" pos:column="55">break;</break></then></if>

			<if pos:line="354" pos:column="25">if<condition pos:line="354" pos:column="27">( <expr><name><name pos:line="354" pos:column="29">sc</name><op:operator pos:line="354" pos:column="31">.</op:operator><name pos:line="354" pos:column="32">ch</name></name> <op:operator pos:line="354" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="354" pos:column="38">'('</lit:literal> <op:operator pos:line="354" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="354" pos:column="45">sc</name><op:operator pos:line="354" pos:column="47">.</op:operator><name pos:line="354" pos:column="48">chNext</name></name> <op:operator pos:line="354" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="354" pos:column="58">'*'</lit:literal></expr> )</condition><then pos:line="354" pos:column="63"> <block pos:line="354" pos:column="64">{
				<if pos:line="355" pos:column="33">if<condition pos:line="355" pos:column="35">( <expr><call><name><name pos:line="355" pos:column="37">sc</name><op:operator pos:line="355" pos:column="39">.</op:operator><name pos:line="355" pos:column="40">GetRelative</name></name><argument_list pos:line="355" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="355" pos:column="52">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="355" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="355" pos:column="58">'*'</lit:literal></expr> )</condition><then pos:line="355" pos:column="63"> <block pos:line="355" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="356" pos:column="41">sc</name><op:operator pos:line="356" pos:column="43">.</op:operator><name pos:line="356" pos:column="44">SetState</name></name><argument_list pos:line="356" pos:column="52">( <argument><expr><name pos:line="356" pos:column="54">SCE_MODULA_DOXYCOMM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="357" pos:column="41">sc</name><op:operator pos:line="357" pos:column="43">.</op:operator><name pos:line="357" pos:column="44">Forward</name></name><argument_list pos:line="357" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="358" pos:column="35">else <block pos:line="358" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="359" pos:column="41">sc</name><op:operator pos:line="359" pos:column="43">.</op:operator><name pos:line="359" pos:column="44">SetState</name></name><argument_list pos:line="359" pos:column="52">( <argument><expr><name pos:line="359" pos:column="54">SCE_MODULA_COMMENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name pos:line="361" pos:column="33">sc</name><op:operator pos:line="361" pos:column="35">.</op:operator><name pos:line="361" pos:column="36">Forward</name></name><argument_list pos:line="361" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="363" pos:column="25">else
			<if pos:line="364" pos:column="25">if<condition pos:line="364" pos:column="27">( <expr><call><name pos:line="364" pos:column="29">isalpha</name><argument_list pos:line="364" pos:column="36">( <argument><expr><name><name pos:line="364" pos:column="38">sc</name><op:operator pos:line="364" pos:column="40">.</op:operator><name pos:line="364" pos:column="41">ch</name></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="364" pos:column="47"> <block pos:line="364" pos:column="48">{
				<if pos:line="365" pos:column="33">if<condition pos:line="365" pos:column="35">( <expr><call><name pos:line="365" pos:column="37">isupper</name><argument_list pos:line="365" pos:column="44">( <argument><expr><name><name pos:line="365" pos:column="46">sc</name><op:operator pos:line="365" pos:column="48">.</op:operator><name pos:line="365" pos:column="49">ch</name></name></expr></argument> )</argument_list></call> <op:operator pos:line="365" pos:column="54">&amp;&amp;</op:operator> <call><name pos:line="365" pos:column="57">isupper</name><argument_list pos:line="365" pos:column="64">( <argument><expr><name><name pos:line="365" pos:column="66">sc</name><op:operator pos:line="365" pos:column="68">.</op:operator><name pos:line="365" pos:column="69">chNext</name></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="365" pos:column="79"> <block pos:line="365" pos:column="80">{
					<for pos:line="366" pos:column="41">for( <init><expr><name pos:line="366" pos:column="46">i</name> <op:operator pos:line="366" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="366" pos:column="50">0</lit:literal></expr>;</init> <condition><expr><name pos:line="366" pos:column="53">i</name> <op:operator pos:line="366" pos:column="55">&lt;</op:operator> <name pos:line="366" pos:column="57">BUFLEN</name> <op:operator pos:line="366" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="366" pos:column="66">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="366" pos:column="69">i</name><op:operator pos:line="366" pos:column="70">++</op:operator></expr></incr> ) <block pos:line="366" pos:column="75">{
						<expr_stmt><expr><name><name pos:line="367" pos:column="49">buf</name><index pos:line="367" pos:column="52">[<expr><name pos:line="367" pos:column="53">i</name></expr>]</index></name> <op:operator pos:line="367" pos:column="56">=</op:operator> <call><name><name pos:line="367" pos:column="58">sc</name><op:operator pos:line="367" pos:column="60">.</op:operator><name pos:line="367" pos:column="61">GetRelative</name></name><argument_list pos:line="367" pos:column="72">(<argument><expr><name pos:line="367" pos:column="73">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="368" pos:column="49">if<condition pos:line="368" pos:column="51">( <expr><op:operator pos:line="368" pos:column="53">!</op:operator><call><name pos:line="368" pos:column="54">isalpha</name><argument_list pos:line="368" pos:column="61">( <argument><expr><name><name pos:line="368" pos:column="63">buf</name><index pos:line="368" pos:column="66">[<expr><name pos:line="368" pos:column="67">i</name></expr>]</index></name></expr></argument> )</argument_list></call> <op:operator pos:line="368" pos:column="72">&amp;&amp;</op:operator> <op:operator pos:line="368" pos:column="75">!</op:operator><op:operator pos:line="368" pos:column="76">(</op:operator><name><name pos:line="368" pos:column="77">buf</name><index pos:line="368" pos:column="80">[<expr><name pos:line="368" pos:column="81">i</name></expr>]</index></name> <op:operator pos:line="368" pos:column="84">==</op:operator> <lit:literal type="char" pos:line="368" pos:column="87">'_'</lit:literal><op:operator pos:line="368" pos:column="90">)</op:operator></expr> )</condition><then pos:line="368" pos:column="93">
							<break pos:line="369" pos:column="57">break;</break></then></if>
					}</block></for>
					<expr_stmt><expr><name pos:line="371" pos:column="41">kl</name> <op:operator pos:line="371" pos:column="44">=</op:operator> <name pos:line="371" pos:column="46">i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="372" pos:column="41">buf</name><index pos:line="372" pos:column="44">[<expr><name pos:line="372" pos:column="45">kl</name></expr>]</index></name> <op:operator pos:line="372" pos:column="49">=</op:operator> <lit:literal type="number" pos:line="372" pos:column="51">0</lit:literal></expr>;</expr_stmt>

					<if pos:line="374" pos:column="41">if<condition pos:line="374" pos:column="43">( <expr><call><name><name pos:line="374" pos:column="45">keyWords</name><op:operator pos:line="374" pos:column="53">.</op:operator><name pos:line="374" pos:column="54">InList</name></name><argument_list pos:line="374" pos:column="60">( <argument><expr><name pos:line="374" pos:column="62">buf</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="374" pos:column="69"> <block pos:line="374" pos:column="70">{
						<expr_stmt><expr><call><name><name pos:line="375" pos:column="49">sc</name><op:operator pos:line="375" pos:column="51">.</op:operator><name pos:line="375" pos:column="52">SetState</name></name><argument_list pos:line="375" pos:column="60">( <argument><expr><name pos:line="375" pos:column="62">SCE_MODULA_KEYWORD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="376" pos:column="49">sc</name><op:operator pos:line="376" pos:column="51">.</op:operator><name pos:line="376" pos:column="52">Forward</name></name><argument_list pos:line="376" pos:column="59">( <argument><expr><name pos:line="376" pos:column="61">kl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="377" pos:column="49">sc</name><op:operator pos:line="377" pos:column="51">.</op:operator><name pos:line="377" pos:column="52">SetState</name></name><argument_list pos:line="377" pos:column="60">( <argument><expr><name pos:line="377" pos:column="62">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<continue pos:line="378" pos:column="49">continue;</continue>
					}</block></then>
					<else pos:line="380" pos:column="41">else
					<if pos:line="381" pos:column="41">if<condition pos:line="381" pos:column="43">( <expr><call><name><name pos:line="381" pos:column="45">reservedWords</name><op:operator pos:line="381" pos:column="58">.</op:operator><name pos:line="381" pos:column="59">InList</name></name><argument_list pos:line="381" pos:column="65">( <argument><expr><name pos:line="381" pos:column="67">buf</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="381" pos:column="74"> <block pos:line="381" pos:column="75">{
						<expr_stmt><expr><call><name><name pos:line="382" pos:column="49">sc</name><op:operator pos:line="382" pos:column="51">.</op:operator><name pos:line="382" pos:column="52">SetState</name></name><argument_list pos:line="382" pos:column="60">( <argument><expr><name pos:line="382" pos:column="62">SCE_MODULA_RESERVED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="383" pos:column="49">sc</name><op:operator pos:line="383" pos:column="51">.</op:operator><name pos:line="383" pos:column="52">Forward</name></name><argument_list pos:line="383" pos:column="59">( <argument><expr><name pos:line="383" pos:column="61">kl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="384" pos:column="49">sc</name><op:operator pos:line="384" pos:column="51">.</op:operator><name pos:line="384" pos:column="52">SetState</name></name><argument_list pos:line="384" pos:column="60">( <argument><expr><name pos:line="384" pos:column="62">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<continue pos:line="385" pos:column="49">continue;</continue>
					}</block></then> <else pos:line="386" pos:column="43">else <block pos:line="386" pos:column="48">{
						<comment type="block" format="doxygen" pos:line="387" pos:column="49">/** check procedure identifier */</comment>
					}</block></else></if></else></if>
				}</block></then> <else pos:line="389" pos:column="35">else <block pos:line="389" pos:column="40">{
					<for pos:line="390" pos:column="41">for( <init><expr><name pos:line="390" pos:column="46">i</name> <op:operator pos:line="390" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="390" pos:column="50">0</lit:literal></expr>;</init> <condition><expr><name pos:line="390" pos:column="53">i</name> <op:operator pos:line="390" pos:column="55">&lt;</op:operator> <name pos:line="390" pos:column="57">BUFLEN</name> <op:operator pos:line="390" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="390" pos:column="66">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="390" pos:column="69">i</name><op:operator pos:line="390" pos:column="70">++</op:operator></expr></incr> ) <block pos:line="390" pos:column="75">{
						<expr_stmt><expr><name><name pos:line="391" pos:column="49">buf</name><index pos:line="391" pos:column="52">[<expr><name pos:line="391" pos:column="53">i</name></expr>]</index></name> <op:operator pos:line="391" pos:column="56">=</op:operator> <call><name><name pos:line="391" pos:column="58">sc</name><op:operator pos:line="391" pos:column="60">.</op:operator><name pos:line="391" pos:column="61">GetRelative</name></name><argument_list pos:line="391" pos:column="72">(<argument><expr><name pos:line="391" pos:column="73">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="392" pos:column="49">if<condition pos:line="392" pos:column="51">( <expr><op:operator pos:line="392" pos:column="53">!</op:operator><call><name pos:line="392" pos:column="54">isalpha</name><argument_list pos:line="392" pos:column="61">( <argument><expr><name><name pos:line="392" pos:column="63">buf</name><index pos:line="392" pos:column="66">[<expr><name pos:line="392" pos:column="67">i</name></expr>]</index></name></expr></argument> )</argument_list></call> <op:operator pos:line="392" pos:column="72">&amp;&amp;</op:operator>
							<op:operator pos:line="393" pos:column="57">!</op:operator><call><name pos:line="393" pos:column="58">isdigit</name><argument_list pos:line="393" pos:column="65">( <argument><expr><name><name pos:line="393" pos:column="67">buf</name><index pos:line="393" pos:column="70">[<expr><name pos:line="393" pos:column="71">i</name></expr>]</index></name></expr></argument> )</argument_list></call> <op:operator pos:line="393" pos:column="76">&amp;&amp;</op:operator>
							<op:operator pos:line="394" pos:column="57">!</op:operator><op:operator pos:line="394" pos:column="58">(</op:operator><name><name pos:line="394" pos:column="59">buf</name><index pos:line="394" pos:column="62">[<expr><name pos:line="394" pos:column="63">i</name></expr>]</index></name> <op:operator pos:line="394" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="394" pos:column="69">'_'</lit:literal><op:operator pos:line="394" pos:column="72">)</op:operator></expr> )</condition><then pos:line="394" pos:column="75">
							<break pos:line="395" pos:column="57">break;</break></then></if>
					}</block></for>
					<expr_stmt><expr><name pos:line="397" pos:column="41">kl</name> <op:operator pos:line="397" pos:column="44">=</op:operator> <name pos:line="397" pos:column="46">i</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="398" pos:column="41">buf</name><index pos:line="398" pos:column="44">[<expr><name pos:line="398" pos:column="45">kl</name></expr>]</index></name> <op:operator pos:line="398" pos:column="49">=</op:operator> <lit:literal type="number" pos:line="398" pos:column="51">0</lit:literal></expr>;</expr_stmt>

					<expr_stmt><expr><call><name><name pos:line="400" pos:column="41">sc</name><op:operator pos:line="400" pos:column="43">.</op:operator><name pos:line="400" pos:column="44">SetState</name></name><argument_list pos:line="400" pos:column="52">( <argument><expr><name pos:line="400" pos:column="54">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="401" pos:column="41">sc</name><op:operator pos:line="401" pos:column="43">.</op:operator><name pos:line="401" pos:column="44">Forward</name></name><argument_list pos:line="401" pos:column="51">( <argument><expr><name pos:line="401" pos:column="53">kl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="402" pos:column="41">continue;</continue>
				}</block></else></if>
			}</block></then>
			<else pos:line="405" pos:column="25">else
			<if pos:line="406" pos:column="25">if<condition pos:line="406" pos:column="27">( <expr><call><name pos:line="406" pos:column="29">isdigit</name><argument_list pos:line="406" pos:column="36">( <argument><expr><name><name pos:line="406" pos:column="38">sc</name><op:operator pos:line="406" pos:column="40">.</op:operator><name pos:line="406" pos:column="41">ch</name></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="406" pos:column="47"> <block pos:line="406" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="407" pos:column="33">sc</name><op:operator pos:line="407" pos:column="35">.</op:operator><name pos:line="407" pos:column="36">SetState</name></name><argument_list pos:line="407" pos:column="44">( <argument><expr><name pos:line="407" pos:column="46">SCE_MODULA_NUMBER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="408" pos:column="33">continue;</continue>
			}</block></then>
			<else pos:line="410" pos:column="25">else
			<if pos:line="411" pos:column="25">if<condition pos:line="411" pos:column="27">( <expr><name><name pos:line="411" pos:column="29">sc</name><op:operator pos:line="411" pos:column="31">.</op:operator><name pos:line="411" pos:column="32">ch</name></name> <op:operator pos:line="411" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="411" pos:column="38">'\"'</lit:literal></expr> )</condition><then pos:line="411" pos:column="44"> <block pos:line="411" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="412" pos:column="33">sc</name><op:operator pos:line="412" pos:column="35">.</op:operator><name pos:line="412" pos:column="36">SetState</name></name><argument_list pos:line="412" pos:column="44">( <argument><expr><name pos:line="412" pos:column="46">SCE_MODULA_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="414" pos:column="25">else
			<if pos:line="415" pos:column="25">if<condition pos:line="415" pos:column="27">( <expr><name><name pos:line="415" pos:column="29">sc</name><op:operator pos:line="415" pos:column="31">.</op:operator><name pos:line="415" pos:column="32">ch</name></name> <op:operator pos:line="415" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="415" pos:column="38">'\''</lit:literal></expr> )</condition><then pos:line="415" pos:column="44"> <block pos:line="415" pos:column="45">{
				<expr_stmt><expr><name pos:line="416" pos:column="33">charPos</name> <op:operator pos:line="416" pos:column="41">=</op:operator> <name><name pos:line="416" pos:column="43">sc</name><op:operator pos:line="416" pos:column="45">.</op:operator><name pos:line="416" pos:column="46">currentPos</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="417" pos:column="33">sc</name><op:operator pos:line="417" pos:column="35">.</op:operator><name pos:line="417" pos:column="36">SetState</name></name><argument_list pos:line="417" pos:column="44">( <argument><expr><name pos:line="417" pos:column="46">SCE_MODULA_CHAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="419" pos:column="25">else
			<if pos:line="420" pos:column="25">if<condition pos:line="420" pos:column="27">( <expr><name><name pos:line="420" pos:column="29">sc</name><op:operator pos:line="420" pos:column="31">.</op:operator><name pos:line="420" pos:column="32">ch</name></name> <op:operator pos:line="420" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="420" pos:column="38">'&lt;'</lit:literal> <op:operator pos:line="420" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="420" pos:column="45">sc</name><op:operator pos:line="420" pos:column="47">.</op:operator><name pos:line="420" pos:column="48">chNext</name></name> <op:operator pos:line="420" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="420" pos:column="58">'*'</lit:literal></expr> )</condition><then pos:line="420" pos:column="63"> <block pos:line="420" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="421" pos:column="33">sc</name><op:operator pos:line="421" pos:column="35">.</op:operator><name pos:line="421" pos:column="36">SetState</name></name><argument_list pos:line="421" pos:column="44">( <argument><expr><name pos:line="421" pos:column="46">SCE_MODULA_PRAGMA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="422" pos:column="33">sc</name><op:operator pos:line="422" pos:column="35">.</op:operator><name pos:line="422" pos:column="36">Forward</name></name><argument_list pos:line="422" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="423" pos:column="27">else <block pos:line="423" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="424" pos:column="33">unsigned</name></type> <name pos:line="424" pos:column="42">len</name> <init pos:line="424" pos:column="46">= <expr><call><name pos:line="424" pos:column="48">IsOperator</name><argument_list pos:line="424" pos:column="58">( <argument><expr><name pos:line="424" pos:column="60">sc</name></expr></argument>, <argument><expr><name pos:line="424" pos:column="64">operators</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="425" pos:column="33">if<condition pos:line="425" pos:column="35">( <expr><name pos:line="425" pos:column="37">len</name> <op:operator pos:line="425" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="425" pos:column="43">0</lit:literal></expr> )</condition><then pos:line="425" pos:column="46"> <block pos:line="425" pos:column="47">{
					<expr_stmt><expr><call><name><name pos:line="426" pos:column="41">sc</name><op:operator pos:line="426" pos:column="43">.</op:operator><name pos:line="426" pos:column="44">SetState</name></name><argument_list pos:line="426" pos:column="52">( <argument><expr><name pos:line="426" pos:column="54">SCE_MODULA_OPERATOR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="427" pos:column="41">sc</name><op:operator pos:line="427" pos:column="43">.</op:operator><name pos:line="427" pos:column="44">Forward</name></name><argument_list pos:line="427" pos:column="51">( <argument><expr><name pos:line="427" pos:column="53">len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="428" pos:column="41">sc</name><op:operator pos:line="428" pos:column="43">.</op:operator><name pos:line="428" pos:column="44">SetState</name></name><argument_list pos:line="428" pos:column="52">( <argument><expr><name pos:line="428" pos:column="54">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="429" pos:column="41">continue;</continue>
				}</block></then> <else pos:line="430" pos:column="35">else <block pos:line="430" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="431" pos:column="41">DEBUG_STATE</name><argument_list pos:line="431" pos:column="52">( <argument><expr><name><name pos:line="431" pos:column="54">sc</name><op:operator pos:line="431" pos:column="56">.</op:operator><name pos:line="431" pos:column="57">currentPos</name></name></expr></argument>, <argument><expr><name><name pos:line="431" pos:column="69">sc</name><op:operator pos:line="431" pos:column="71">.</op:operator><name pos:line="431" pos:column="72">ch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="434" pos:column="25">break;</break>

		</case><case pos:line="436" pos:column="17">case <expr><name pos:line="436" pos:column="22">SCE_MODULA_COMMENT</name></expr>:
			<if pos:line="437" pos:column="25">if<condition pos:line="437" pos:column="27">( <expr><name><name pos:line="437" pos:column="29">sc</name><op:operator pos:line="437" pos:column="31">.</op:operator><name pos:line="437" pos:column="32">ch</name></name> <op:operator pos:line="437" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="437" pos:column="38">'*'</lit:literal> <op:operator pos:line="437" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="437" pos:column="45">sc</name><op:operator pos:line="437" pos:column="47">.</op:operator><name pos:line="437" pos:column="48">chNext</name></name> <op:operator pos:line="437" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="437" pos:column="58">')'</lit:literal></expr> )</condition><then pos:line="437" pos:column="63"> <block pos:line="437" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="438" pos:column="33">sc</name><op:operator pos:line="438" pos:column="35">.</op:operator><name pos:line="438" pos:column="36">Forward</name></name><argument_list pos:line="438" pos:column="43">( <argument><expr><lit:literal type="number" pos:line="438" pos:column="45">2</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="439" pos:column="33">sc</name><op:operator pos:line="439" pos:column="35">.</op:operator><name pos:line="439" pos:column="36">SetState</name></name><argument_list pos:line="439" pos:column="44">( <argument><expr><name pos:line="439" pos:column="46">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="440" pos:column="33">continue;</continue>
			}</block></then></if>
			<break pos:line="442" pos:column="25">break;</break>

		</case><case pos:line="444" pos:column="17">case <expr><name pos:line="444" pos:column="22">SCE_MODULA_DOXYCOMM</name></expr>:
			<switch pos:line="445" pos:column="25">switch<condition pos:line="445" pos:column="31">( <expr><name><name pos:line="445" pos:column="33">sc</name><op:operator pos:line="445" pos:column="35">.</op:operator><name pos:line="445" pos:column="36">ch</name></name></expr> )</condition> <block pos:line="445" pos:column="41">{
			<case pos:line="446" pos:column="25">case <expr><lit:literal type="char" pos:line="446" pos:column="30">'*'</lit:literal></expr>:
				<if pos:line="447" pos:column="33">if<condition pos:line="447" pos:column="35">( <expr><name><name pos:line="447" pos:column="37">sc</name><op:operator pos:line="447" pos:column="39">.</op:operator><name pos:line="447" pos:column="40">chNext</name></name> <op:operator pos:line="447" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="447" pos:column="50">')'</lit:literal></expr> )</condition><then pos:line="447" pos:column="55"> <block pos:line="447" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="448" pos:column="41">sc</name><op:operator pos:line="448" pos:column="43">.</op:operator><name pos:line="448" pos:column="44">Forward</name></name><argument_list pos:line="448" pos:column="51">( <argument><expr><lit:literal type="number" pos:line="448" pos:column="53">2</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="449" pos:column="41">sc</name><op:operator pos:line="449" pos:column="43">.</op:operator><name pos:line="449" pos:column="44">SetState</name></name><argument_list pos:line="449" pos:column="52">( <argument><expr><name pos:line="449" pos:column="54">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="450" pos:column="41">continue;</continue>
				}</block></then></if>
				<break pos:line="452" pos:column="33">break;</break>

			</case><case pos:line="454" pos:column="25">case <expr><lit:literal type="char" pos:line="454" pos:column="30">'@'</lit:literal></expr>:
				<if pos:line="455" pos:column="33">if<condition pos:line="455" pos:column="35">( <expr><call><name pos:line="455" pos:column="37">islower</name><argument_list pos:line="455" pos:column="44">( <argument><expr><name><name pos:line="455" pos:column="46">sc</name><op:operator pos:line="455" pos:column="48">.</op:operator><name pos:line="455" pos:column="49">chNext</name></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="455" pos:column="59"> <block pos:line="455" pos:column="60">{
					<for pos:line="456" pos:column="41">for( <init><expr><name pos:line="456" pos:column="46">i</name> <op:operator pos:line="456" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="456" pos:column="50">0</lit:literal></expr>;</init> <condition><expr><name pos:line="456" pos:column="53">i</name> <op:operator pos:line="456" pos:column="55">&lt;</op:operator> <name pos:line="456" pos:column="57">BUFLEN</name> <op:operator pos:line="456" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="456" pos:column="66">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="456" pos:column="69">i</name><op:operator pos:line="456" pos:column="70">++</op:operator></expr></incr> ) <block pos:line="456" pos:column="75">{
						<expr_stmt><expr><name><name pos:line="457" pos:column="49">buf</name><index pos:line="457" pos:column="52">[<expr><name pos:line="457" pos:column="53">i</name></expr>]</index></name> <op:operator pos:line="457" pos:column="56">=</op:operator> <call><name><name pos:line="457" pos:column="58">sc</name><op:operator pos:line="457" pos:column="60">.</op:operator><name pos:line="457" pos:column="61">GetRelative</name></name><argument_list pos:line="457" pos:column="72">(<argument><expr><name pos:line="457" pos:column="73">i</name><op:operator pos:line="457" pos:column="74">+</op:operator><lit:literal type="number" pos:line="457" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="458" pos:column="49">if<condition pos:line="458" pos:column="51">( <expr><call><name pos:line="458" pos:column="53">isspace</name><argument_list pos:line="458" pos:column="60">( <argument><expr><name><name pos:line="458" pos:column="62">buf</name><index pos:line="458" pos:column="65">[<expr><name pos:line="458" pos:column="66">i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="458" pos:column="72"> <break pos:line="458" pos:column="73">break;</break></then></if>
					}</block></for>
					<expr_stmt><expr><name><name pos:line="460" pos:column="41">buf</name><index pos:line="460" pos:column="44">[<expr><name pos:line="460" pos:column="45">i</name></expr>]</index></name> <op:operator pos:line="460" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="460" pos:column="50">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="461" pos:column="41">kl</name> <op:operator pos:line="461" pos:column="44">=</op:operator> <name pos:line="461" pos:column="46">i</name></expr>;</expr_stmt>

					<if pos:line="463" pos:column="41">if<condition pos:line="463" pos:column="43">( <expr><call><name><name pos:line="463" pos:column="45">doxyKeys</name><op:operator pos:line="463" pos:column="53">.</op:operator><name pos:line="463" pos:column="54">InList</name></name><argument_list pos:line="463" pos:column="60">( <argument><expr><name pos:line="463" pos:column="62">buf</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="463" pos:column="69"> <block pos:line="463" pos:column="70">{
						<expr_stmt><expr><call><name><name pos:line="464" pos:column="49">sc</name><op:operator pos:line="464" pos:column="51">.</op:operator><name pos:line="464" pos:column="52">SetState</name></name><argument_list pos:line="464" pos:column="60">( <argument><expr><name pos:line="464" pos:column="62">SCE_MODULA_DOXYKEY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="465" pos:column="49">sc</name><op:operator pos:line="465" pos:column="51">.</op:operator><name pos:line="465" pos:column="52">Forward</name></name><argument_list pos:line="465" pos:column="59">( <argument><expr><name pos:line="465" pos:column="61">kl</name> <op:operator pos:line="465" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="465" pos:column="66">1</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="466" pos:column="49">sc</name><op:operator pos:line="466" pos:column="51">.</op:operator><name pos:line="466" pos:column="52">SetState</name></name><argument_list pos:line="466" pos:column="60">( <argument><expr><name pos:line="466" pos:column="62">SCE_MODULA_DOXYCOMM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
				<break pos:line="469" pos:column="33">break;</break>

			</case><default pos:line="471" pos:column="25">default:
				<break pos:line="472" pos:column="33">break;</break>
			</default>}</block></switch>
			<break pos:line="474" pos:column="25">break;</break>

		</case><case pos:line="476" pos:column="17">case <expr><name pos:line="476" pos:column="22">SCE_MODULA_NUMBER</name></expr>:
			<block pos:line="477" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="478" pos:column="33">buf</name><index pos:line="478" pos:column="36">[<expr><lit:literal type="number" pos:line="478" pos:column="37">0</lit:literal></expr>]</index></name> <op:operator pos:line="478" pos:column="40">=</op:operator> <name><name pos:line="478" pos:column="42">sc</name><op:operator pos:line="478" pos:column="44">.</op:operator><name pos:line="478" pos:column="45">ch</name></name></expr>;</expr_stmt>
				<for pos:line="479" pos:column="33">for( <init><expr><name pos:line="479" pos:column="38">i</name> <op:operator pos:line="479" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="479" pos:column="42">1</lit:literal></expr>;</init> <condition><expr><name pos:line="479" pos:column="45">i</name> <op:operator pos:line="479" pos:column="47">&lt;</op:operator> <name pos:line="479" pos:column="49">BUFLEN</name> <op:operator pos:line="479" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="479" pos:column="58">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="479" pos:column="61">i</name><op:operator pos:line="479" pos:column="62">++</op:operator></expr></incr> ) <block pos:line="479" pos:column="67">{
					<expr_stmt><expr><name><name pos:line="480" pos:column="41">buf</name><index pos:line="480" pos:column="44">[<expr><name pos:line="480" pos:column="45">i</name></expr>]</index></name> <op:operator pos:line="480" pos:column="48">=</op:operator> <call><name><name pos:line="480" pos:column="50">sc</name><op:operator pos:line="480" pos:column="52">.</op:operator><name pos:line="480" pos:column="53">GetRelative</name></name><argument_list pos:line="480" pos:column="64">(<argument><expr><name pos:line="480" pos:column="65">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="481" pos:column="41">if<condition pos:line="481" pos:column="43">( <expr><op:operator pos:line="481" pos:column="45">!</op:operator> <call><name pos:line="481" pos:column="47">isdigit</name><argument_list pos:line="481" pos:column="54">( <argument><expr><name><name pos:line="481" pos:column="56">buf</name><index pos:line="481" pos:column="59">[<expr><name pos:line="481" pos:column="60">i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="481" pos:column="66">
						<break pos:line="482" pos:column="49">break;</break></then></if>
				}</block></for>
				<expr_stmt><expr><name pos:line="484" pos:column="33">kl</name> <op:operator pos:line="484" pos:column="36">=</op:operator> <name pos:line="484" pos:column="38">i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="485" pos:column="33">buf</name><index pos:line="485" pos:column="36">[<expr><name pos:line="485" pos:column="37">kl</name></expr>]</index></name> <op:operator pos:line="485" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="485" pos:column="43">0</lit:literal></expr>;</expr_stmt>

				<switch pos:line="487" pos:column="33">switch<condition pos:line="487" pos:column="39">( <expr><call><name><name pos:line="487" pos:column="41">sc</name><op:operator pos:line="487" pos:column="43">.</op:operator><name pos:line="487" pos:column="44">GetRelative</name></name><argument_list pos:line="487" pos:column="55">(<argument><expr><name pos:line="487" pos:column="56">kl</name></expr></argument>)</argument_list></call></expr> )</condition> <block pos:line="487" pos:column="62">{
				<case pos:line="488" pos:column="33">case <expr><lit:literal type="char" pos:line="488" pos:column="38">'_'</lit:literal></expr>:
					<block pos:line="489" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="490" pos:column="49">int</name></type> <name pos:line="490" pos:column="53">base</name> <init pos:line="490" pos:column="58">= <expr><call><name pos:line="490" pos:column="60">atoi</name><argument_list pos:line="490" pos:column="64">( <argument><expr><name pos:line="490" pos:column="66">buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="491" pos:column="49">if<condition pos:line="491" pos:column="51">( <expr><name><name pos:line="491" pos:column="53">base</name> <argument_list pos:line="491" pos:column="58">&lt; <argument><expr><lit:literal type="number" pos:line="491" pos:column="60">2</lit:literal> <op:operator pos:line="491" pos:column="62">||</op:operator> <name pos:line="491" pos:column="65">base</name></expr></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="491" pos:column="72">16</lit:literal></expr> )</condition><then pos:line="491" pos:column="76"> <block pos:line="491" pos:column="77">{
							<expr_stmt><expr><call><name><name pos:line="492" pos:column="57">sc</name><op:operator pos:line="492" pos:column="59">.</op:operator><name pos:line="492" pos:column="60">SetState</name></name><argument_list pos:line="492" pos:column="68">( <argument><expr><name pos:line="492" pos:column="70">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="493" pos:column="51">else <block pos:line="493" pos:column="56">{
							<decl_stmt><decl><type><name pos:line="494" pos:column="57">int</name></type> <name pos:line="494" pos:column="61">imax</name></decl>;</decl_stmt>

							<expr_stmt><expr><name pos:line="496" pos:column="57">kl</name><op:operator pos:line="496" pos:column="59">++</op:operator></expr>;</expr_stmt>
							<for pos:line="497" pos:column="57">for( <init><expr><name pos:line="497" pos:column="62">i</name> <op:operator pos:line="497" pos:column="64">=</op:operator> <lit:literal type="number" pos:line="497" pos:column="66">0</lit:literal></expr>;</init> <condition><expr><name pos:line="497" pos:column="69">i</name> <op:operator pos:line="497" pos:column="71">&lt;</op:operator> <name pos:line="497" pos:column="73">BUFLEN</name> <op:operator pos:line="497" pos:column="80">-</op:operator> <lit:literal type="number" pos:line="497" pos:column="82">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="497" pos:column="85">i</name><op:operator pos:line="497" pos:column="86">++</op:operator></expr></incr> ) <block pos:line="497" pos:column="91">{
								<expr_stmt><expr><name><name pos:line="498" pos:column="65">buf</name><index pos:line="498" pos:column="68">[<expr><name pos:line="498" pos:column="69">i</name></expr>]</index></name> <op:operator pos:line="498" pos:column="72">=</op:operator> <call><name><name pos:line="498" pos:column="74">sc</name><op:operator pos:line="498" pos:column="76">.</op:operator><name pos:line="498" pos:column="77">GetRelative</name></name><argument_list pos:line="498" pos:column="88">(<argument><expr><name pos:line="498" pos:column="89">kl</name><op:operator pos:line="498" pos:column="91">+</op:operator><name pos:line="498" pos:column="92">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<if pos:line="499" pos:column="65">if<condition pos:line="499" pos:column="67">( <expr><op:operator pos:line="499" pos:column="69">!</op:operator> <call><name pos:line="499" pos:column="71">IsDigitOfBase</name><argument_list pos:line="499" pos:column="84">( <argument><expr><name><name pos:line="499" pos:column="86">buf</name><index pos:line="499" pos:column="89">[<expr><name pos:line="499" pos:column="90">i</name></expr>]</index></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="499" pos:column="94">16</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="499" pos:column="100"> <block pos:line="499" pos:column="101">{
									<break pos:line="500" pos:column="73">break;</break>
								}</block></then></if>
							}</block></for>
							<expr_stmt><expr><name pos:line="503" pos:column="57">imax</name> <op:operator pos:line="503" pos:column="62">=</op:operator> <name pos:line="503" pos:column="64">i</name></expr>;</expr_stmt>
							<for pos:line="504" pos:column="57">for( <init><expr><name pos:line="504" pos:column="62">i</name> <op:operator pos:line="504" pos:column="64">=</op:operator> <lit:literal type="number" pos:line="504" pos:column="66">0</lit:literal></expr>;</init> <condition><expr><name pos:line="504" pos:column="69">i</name> <op:operator pos:line="504" pos:column="71">&lt;</op:operator> <name pos:line="504" pos:column="73">imax</name></expr>;</condition> <incr><expr><name pos:line="504" pos:column="79">i</name><op:operator pos:line="504" pos:column="80">++</op:operator></expr></incr> ) <block pos:line="504" pos:column="85">{
								<if pos:line="505" pos:column="65">if<condition pos:line="505" pos:column="67">( <expr><op:operator pos:line="505" pos:column="69">!</op:operator> <call><name pos:line="505" pos:column="71">IsDigitOfBase</name><argument_list pos:line="505" pos:column="84">( <argument><expr><name><name pos:line="505" pos:column="86">buf</name><index pos:line="505" pos:column="89">[<expr><name pos:line="505" pos:column="90">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="505" pos:column="94">base</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="505" pos:column="102"> <block pos:line="505" pos:column="103">{
									<expr_stmt><expr><call><name><name pos:line="506" pos:column="73">sc</name><op:operator pos:line="506" pos:column="75">.</op:operator><name pos:line="506" pos:column="76">SetState</name></name><argument_list pos:line="506" pos:column="84">( <argument><expr><name pos:line="506" pos:column="86">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
									<break pos:line="507" pos:column="73">break;</break>
								}</block></then></if>
							}</block></for>
							<expr_stmt><expr><name pos:line="510" pos:column="57">kl</name> <op:operator pos:line="510" pos:column="60">+=</op:operator> <name pos:line="510" pos:column="63">imax</name></expr>;</expr_stmt>
						}</block></else></if>
						<expr_stmt><expr><call><name><name pos:line="512" pos:column="49">sc</name><op:operator pos:line="512" pos:column="51">.</op:operator><name pos:line="512" pos:column="52">SetState</name></name><argument_list pos:line="512" pos:column="60">( <argument><expr><name pos:line="512" pos:column="62">SCE_MODULA_BASENUM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<for pos:line="513" pos:column="49">for( <init><expr><name pos:line="513" pos:column="54">i</name> <op:operator pos:line="513" pos:column="56">=</op:operator> <lit:literal type="number" pos:line="513" pos:column="58">0</lit:literal></expr>;</init> <condition><expr><name pos:line="513" pos:column="61">i</name> <op:operator pos:line="513" pos:column="63">&lt;</op:operator> <name pos:line="513" pos:column="65">kl</name></expr>;</condition> <incr><expr><name pos:line="513" pos:column="69">i</name><op:operator pos:line="513" pos:column="70">++</op:operator></expr></incr> ) <block pos:line="513" pos:column="75">{
							<expr_stmt><expr><call><name><name pos:line="514" pos:column="57">sc</name><op:operator pos:line="514" pos:column="59">.</op:operator><name pos:line="514" pos:column="60">Forward</name></name><argument_list pos:line="514" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						}</block></for>
						<expr_stmt><expr><call><name><name pos:line="516" pos:column="49">sc</name><op:operator pos:line="516" pos:column="51">.</op:operator><name pos:line="516" pos:column="52">SetState</name></name><argument_list pos:line="516" pos:column="60">( <argument><expr><name pos:line="516" pos:column="62">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<continue pos:line="517" pos:column="49">continue;</continue>
					}</block>
					<break pos:line="519" pos:column="41">break;</break>

				</case><case pos:line="521" pos:column="33">case <expr><lit:literal type="char" pos:line="521" pos:column="38">'.'</lit:literal></expr>:
					<if pos:line="522" pos:column="41">if<condition pos:line="522" pos:column="43">( <expr><call><name><name pos:line="522" pos:column="45">sc</name><op:operator pos:line="522" pos:column="47">.</op:operator><name pos:line="522" pos:column="48">GetRelative</name></name><argument_list pos:line="522" pos:column="59">(<argument><expr><name pos:line="522" pos:column="60">kl</name><op:operator pos:line="522" pos:column="62">+</op:operator><lit:literal type="number" pos:line="522" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="522" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="522" pos:column="69">'.'</lit:literal></expr> )</condition><then pos:line="522" pos:column="74"> <block pos:line="522" pos:column="75">{
						<expr_stmt><expr><name pos:line="523" pos:column="49">kl</name><op:operator pos:line="523" pos:column="51">--</op:operator></expr>;</expr_stmt>
						<for pos:line="524" pos:column="49">for( <init><expr><name pos:line="524" pos:column="54">i</name> <op:operator pos:line="524" pos:column="56">=</op:operator> <lit:literal type="number" pos:line="524" pos:column="58">0</lit:literal></expr>;</init> <condition><expr><name pos:line="524" pos:column="61">i</name> <op:operator pos:line="524" pos:column="63">&lt;</op:operator> <name pos:line="524" pos:column="65">kl</name></expr>;</condition> <incr><expr><name pos:line="524" pos:column="69">i</name><op:operator pos:line="524" pos:column="70">++</op:operator></expr></incr> ) <block pos:line="524" pos:column="75">{
							<expr_stmt><expr><call><name><name pos:line="525" pos:column="57">sc</name><op:operator pos:line="525" pos:column="59">.</op:operator><name pos:line="525" pos:column="60">Forward</name></name><argument_list pos:line="525" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						}</block></for>
						<expr_stmt><expr><call><name><name pos:line="527" pos:column="49">sc</name><op:operator pos:line="527" pos:column="51">.</op:operator><name pos:line="527" pos:column="52">Forward</name></name><argument_list pos:line="527" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="528" pos:column="49">sc</name><op:operator pos:line="528" pos:column="51">.</op:operator><name pos:line="528" pos:column="52">SetState</name></name><argument_list pos:line="528" pos:column="60">( <argument><expr><name pos:line="528" pos:column="62">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<continue pos:line="529" pos:column="49">continue;</continue>
					}</block></then> <else pos:line="530" pos:column="43">else <block pos:line="530" pos:column="48">{
						<decl_stmt><decl><type><name pos:line="531" pos:column="49">bool</name></type> <name pos:line="531" pos:column="54">doNext</name> <init pos:line="531" pos:column="61">= <expr><lit:literal type="boolean" pos:line="531" pos:column="63">false</lit:literal></expr></init></decl>;</decl_stmt>

						<expr_stmt><expr><name pos:line="533" pos:column="49">kl</name><op:operator pos:line="533" pos:column="51">++</op:operator></expr>;</expr_stmt>

						<expr_stmt><expr><name><name pos:line="535" pos:column="49">buf</name><index pos:line="535" pos:column="52">[<expr><lit:literal type="number" pos:line="535" pos:column="53">0</lit:literal></expr>]</index></name> <op:operator pos:line="535" pos:column="56">=</op:operator> <call><name><name pos:line="535" pos:column="58">sc</name><op:operator pos:line="535" pos:column="60">.</op:operator><name pos:line="535" pos:column="61">GetRelative</name></name><argument_list pos:line="535" pos:column="72">(<argument><expr><name pos:line="535" pos:column="73">kl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="536" pos:column="49">if<condition pos:line="536" pos:column="51">( <expr><call><name pos:line="536" pos:column="53">isdigit</name><argument_list pos:line="536" pos:column="60">( <argument><expr><name><name pos:line="536" pos:column="62">buf</name><index pos:line="536" pos:column="65">[<expr><lit:literal type="number" pos:line="536" pos:column="66">0</lit:literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="536" pos:column="72"> <block pos:line="536" pos:column="73">{
							<for pos:line="537" pos:column="57">for( <init><expr><name pos:line="537" pos:column="62">i</name> <op:operator pos:line="537" pos:column="64">=</op:operator> <lit:literal type="number" pos:line="537" pos:column="66">0</lit:literal></expr>;</init><condition pos:line="537" pos:column="68">;</condition> <incr><expr><name pos:line="537" pos:column="70">i</name><op:operator pos:line="537" pos:column="71">++</op:operator></expr></incr> ) <block pos:line="537" pos:column="76">{
								<if pos:line="538" pos:column="65">if<condition pos:line="538" pos:column="67">( <expr><op:operator pos:line="538" pos:column="69">!</op:operator><call><name pos:line="538" pos:column="70">isdigit</name><argument_list pos:line="538" pos:column="77">(<argument><expr><call><name><name pos:line="538" pos:column="78">sc</name><op:operator pos:line="538" pos:column="80">.</op:operator><name pos:line="538" pos:column="81">GetRelative</name></name><argument_list pos:line="538" pos:column="92">(<argument><expr><name pos:line="538" pos:column="93">kl</name><op:operator pos:line="538" pos:column="95">+</op:operator><name pos:line="538" pos:column="96">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="538" pos:column="101">
									<break pos:line="539" pos:column="73">break;</break></then></if>
							}</block></for>
							<expr_stmt><expr><name pos:line="541" pos:column="57">kl</name> <op:operator pos:line="541" pos:column="60">+=</op:operator> <name pos:line="541" pos:column="63">i</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name pos:line="542" pos:column="57">buf</name><index pos:line="542" pos:column="60">[<expr><lit:literal type="number" pos:line="542" pos:column="61">0</lit:literal></expr>]</index></name> <op:operator pos:line="542" pos:column="64">=</op:operator> <call><name><name pos:line="542" pos:column="66">sc</name><op:operator pos:line="542" pos:column="68">.</op:operator><name pos:line="542" pos:column="69">GetRelative</name></name><argument_list pos:line="542" pos:column="80">(<argument><expr><name pos:line="542" pos:column="81">kl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<switch pos:line="544" pos:column="57">switch<condition pos:line="544" pos:column="63">( <expr><name><name pos:line="544" pos:column="65">buf</name><index pos:line="544" pos:column="68">[<expr><lit:literal type="number" pos:line="544" pos:column="69">0</lit:literal></expr>]</index></name></expr> )</condition>
							<block pos:line="545" pos:column="57">{
							<case pos:line="546" pos:column="57">case <expr><lit:literal type="char" pos:line="546" pos:column="62">'E'</lit:literal></expr>:
							</case><case pos:line="547" pos:column="57">case <expr><lit:literal type="char" pos:line="547" pos:column="62">'e'</lit:literal></expr>:
							</case><case pos:line="548" pos:column="57">case <expr><lit:literal type="char" pos:line="548" pos:column="62">'D'</lit:literal></expr>:
							</case><case pos:line="549" pos:column="57">case <expr><lit:literal type="char" pos:line="549" pos:column="62">'d'</lit:literal></expr>:
							</case><case pos:line="550" pos:column="57">case <expr><lit:literal type="char" pos:line="550" pos:column="62">'X'</lit:literal></expr>:
							</case><case pos:line="551" pos:column="57">case <expr><lit:literal type="char" pos:line="551" pos:column="62">'x'</lit:literal></expr>:
								<expr_stmt><expr><name pos:line="552" pos:column="65">kl</name><op:operator pos:line="552" pos:column="67">++</op:operator></expr>;</expr_stmt>
								<expr_stmt><expr><name><name pos:line="553" pos:column="65">buf</name><index pos:line="553" pos:column="68">[<expr><lit:literal type="number" pos:line="553" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="553" pos:column="72">=</op:operator> <call><name><name pos:line="553" pos:column="74">sc</name><op:operator pos:line="553" pos:column="76">.</op:operator><name pos:line="553" pos:column="77">GetRelative</name></name><argument_list pos:line="553" pos:column="88">(<argument><expr><name pos:line="553" pos:column="89">kl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<if pos:line="554" pos:column="65">if<condition pos:line="554" pos:column="67">( <expr><name><name pos:line="554" pos:column="69">buf</name><index pos:line="554" pos:column="72">[<expr><lit:literal type="number" pos:line="554" pos:column="73">0</lit:literal></expr>]</index></name> <op:operator pos:line="554" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="554" pos:column="79">'-'</lit:literal> <op:operator pos:line="554" pos:column="83">||</op:operator> <name><name pos:line="554" pos:column="86">buf</name><index pos:line="554" pos:column="89">[<expr><lit:literal type="number" pos:line="554" pos:column="90">0</lit:literal></expr>]</index></name> <op:operator pos:line="554" pos:column="93">==</op:operator> <lit:literal type="char" pos:line="554" pos:column="96">'+'</lit:literal></expr> )</condition><then pos:line="554" pos:column="101"> <block pos:line="554" pos:column="102">{
									<expr_stmt><expr><name pos:line="555" pos:column="73">kl</name><op:operator pos:line="555" pos:column="75">++</op:operator></expr>;</expr_stmt>
								}</block></then></if>
								<expr_stmt><expr><name><name pos:line="557" pos:column="65">buf</name><index pos:line="557" pos:column="68">[<expr><lit:literal type="number" pos:line="557" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="557" pos:column="72">=</op:operator> <call><name><name pos:line="557" pos:column="74">sc</name><op:operator pos:line="557" pos:column="76">.</op:operator><name pos:line="557" pos:column="77">GetRelative</name></name><argument_list pos:line="557" pos:column="88">(<argument><expr><name pos:line="557" pos:column="89">kl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								<if pos:line="558" pos:column="65">if<condition pos:line="558" pos:column="67">( <expr><call><name pos:line="558" pos:column="69">isdigit</name><argument_list pos:line="558" pos:column="76">( <argument><expr><name><name pos:line="558" pos:column="78">buf</name><index pos:line="558" pos:column="81">[<expr><lit:literal type="number" pos:line="558" pos:column="82">0</lit:literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="558" pos:column="88"> <block pos:line="558" pos:column="89">{
									<for pos:line="559" pos:column="73">for( <init><expr><name pos:line="559" pos:column="78">i</name> <op:operator pos:line="559" pos:column="80">=</op:operator> <lit:literal type="number" pos:line="559" pos:column="82">0</lit:literal></expr>;</init><condition pos:line="559" pos:column="84">;</condition> <incr><expr><name pos:line="559" pos:column="86">i</name><op:operator pos:line="559" pos:column="87">++</op:operator></expr></incr> ) <block pos:line="559" pos:column="92">{
										<if pos:line="560" pos:column="81">if<condition pos:line="560" pos:column="83">( <expr><op:operator pos:line="560" pos:column="85">!</op:operator><call><name pos:line="560" pos:column="86">isdigit</name><argument_list pos:line="560" pos:column="93">(<argument><expr><call><name><name pos:line="560" pos:column="94">sc</name><op:operator pos:line="560" pos:column="96">.</op:operator><name pos:line="560" pos:column="97">GetRelative</name></name><argument_list pos:line="560" pos:column="108">(<argument><expr><name pos:line="560" pos:column="109">kl</name><op:operator pos:line="560" pos:column="111">+</op:operator><name pos:line="560" pos:column="112">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="560" pos:column="117"> <block pos:line="560" pos:column="118">{
											<expr_stmt><expr><name><name pos:line="561" pos:column="89">buf</name><index pos:line="561" pos:column="92">[<expr><lit:literal type="number" pos:line="561" pos:column="93">0</lit:literal></expr>]</index></name> <op:operator pos:line="561" pos:column="96">=</op:operator> <call><name><name pos:line="561" pos:column="98">sc</name><op:operator pos:line="561" pos:column="100">.</op:operator><name pos:line="561" pos:column="101">GetRelative</name></name><argument_list pos:line="561" pos:column="112">(<argument><expr><name pos:line="561" pos:column="113">kl</name><op:operator pos:line="561" pos:column="115">+</op:operator><name pos:line="561" pos:column="116">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
											<break pos:line="562" pos:column="89">break;</break>
										}</block></then></if>
									}</block></for>
									<expr_stmt><expr><name pos:line="565" pos:column="73">kl</name> <op:operator pos:line="565" pos:column="76">+=</op:operator> <name pos:line="565" pos:column="79">i</name></expr>;</expr_stmt>
									<expr_stmt><expr><name pos:line="566" pos:column="73">doNext</name> <op:operator pos:line="566" pos:column="80">=</op:operator> <lit:literal type="boolean" pos:line="566" pos:column="82">true</lit:literal></expr>;</expr_stmt>
								}</block></then> <else pos:line="567" pos:column="67">else <block pos:line="567" pos:column="72">{
									<expr_stmt><expr><call><name><name pos:line="568" pos:column="73">sc</name><op:operator pos:line="568" pos:column="75">.</op:operator><name pos:line="568" pos:column="76">SetState</name></name><argument_list pos:line="568" pos:column="84">( <argument><expr><name pos:line="568" pos:column="86">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
								}</block></else></if>
								<break pos:line="570" pos:column="65">break;</break>

							</case><default pos:line="572" pos:column="57">default:
								<expr_stmt><expr><name pos:line="573" pos:column="65">doNext</name> <op:operator pos:line="573" pos:column="72">=</op:operator> <lit:literal type="boolean" pos:line="573" pos:column="74">true</lit:literal></expr>;</expr_stmt>
								<break pos:line="574" pos:column="65">break;</break>
							</default>}</block></switch>
						}</block></then> <else pos:line="576" pos:column="51">else <block pos:line="576" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="577" pos:column="57">sc</name><op:operator pos:line="577" pos:column="59">.</op:operator><name pos:line="577" pos:column="60">SetState</name></name><argument_list pos:line="577" pos:column="68">( <argument><expr><name pos:line="577" pos:column="70">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>

						<if pos:line="580" pos:column="49">if<condition pos:line="580" pos:column="51">( <expr><name pos:line="580" pos:column="53">doNext</name></expr> )</condition><then pos:line="580" pos:column="61"> <block pos:line="580" pos:column="62">{
							<if pos:line="581" pos:column="57">if<condition pos:line="581" pos:column="59">( <expr><op:operator pos:line="581" pos:column="61">!</op:operator> <call><name pos:line="581" pos:column="63">isspace</name><argument_list pos:line="581" pos:column="70">( <argument><expr><name><name pos:line="581" pos:column="72">buf</name><index pos:line="581" pos:column="75">[<expr><lit:literal type="number" pos:line="581" pos:column="76">0</lit:literal></expr>]</index></name></expr></argument> )</argument_list></call> <op:operator pos:line="581" pos:column="81">&amp;&amp;</op:operator>
								<name><name pos:line="582" pos:column="65">buf</name><index pos:line="582" pos:column="68">[<expr><lit:literal type="number" pos:line="582" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="582" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="582" pos:column="75">')'</lit:literal> <op:operator pos:line="582" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="583" pos:column="65">buf</name><index pos:line="583" pos:column="68">[<expr><lit:literal type="number" pos:line="583" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="583" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="583" pos:column="75">'&gt;'</lit:literal> <op:operator pos:line="583" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="584" pos:column="65">buf</name><index pos:line="584" pos:column="68">[<expr><lit:literal type="number" pos:line="584" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="584" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="584" pos:column="75">'&lt;'</lit:literal> <op:operator pos:line="584" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="585" pos:column="65">buf</name><index pos:line="585" pos:column="68">[<expr><lit:literal type="number" pos:line="585" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="585" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="585" pos:column="75">'='</lit:literal> <op:operator pos:line="585" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="586" pos:column="65">buf</name><index pos:line="586" pos:column="68">[<expr><lit:literal type="number" pos:line="586" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="586" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="586" pos:column="75">'#'</lit:literal> <op:operator pos:line="586" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="587" pos:column="65">buf</name><index pos:line="587" pos:column="68">[<expr><lit:literal type="number" pos:line="587" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="587" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="587" pos:column="75">'+'</lit:literal> <op:operator pos:line="587" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="588" pos:column="65">buf</name><index pos:line="588" pos:column="68">[<expr><lit:literal type="number" pos:line="588" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="588" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="588" pos:column="75">'-'</lit:literal> <op:operator pos:line="588" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="589" pos:column="65">buf</name><index pos:line="589" pos:column="68">[<expr><lit:literal type="number" pos:line="589" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="589" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="589" pos:column="75">'*'</lit:literal> <op:operator pos:line="589" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="590" pos:column="65">buf</name><index pos:line="590" pos:column="68">[<expr><lit:literal type="number" pos:line="590" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="590" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="590" pos:column="75">'/'</lit:literal> <op:operator pos:line="590" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="591" pos:column="65">buf</name><index pos:line="591" pos:column="68">[<expr><lit:literal type="number" pos:line="591" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="591" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="591" pos:column="75">','</lit:literal> <op:operator pos:line="591" pos:column="79">&amp;&amp;</op:operator>
								<name><name pos:line="592" pos:column="65">buf</name><index pos:line="592" pos:column="68">[<expr><lit:literal type="number" pos:line="592" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="592" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="592" pos:column="75">';'</lit:literal></expr>
								)</condition><then pos:line="593" pos:column="66"> <block pos:line="593" pos:column="67">{
								<expr_stmt><expr><call><name><name pos:line="594" pos:column="65">sc</name><op:operator pos:line="594" pos:column="67">.</op:operator><name pos:line="594" pos:column="68">SetState</name></name><argument_list pos:line="594" pos:column="76">( <argument><expr><name pos:line="594" pos:column="78">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
							}</block></then> <else pos:line="595" pos:column="59">else <block pos:line="595" pos:column="64">{
								<expr_stmt><expr><name pos:line="596" pos:column="65">kl</name><op:operator pos:line="596" pos:column="67">--</op:operator></expr>;</expr_stmt>
							}</block></else></if>
						}</block></then></if>
					}</block></else></if>
					<expr_stmt><expr><call><name><name pos:line="600" pos:column="41">sc</name><op:operator pos:line="600" pos:column="43">.</op:operator><name pos:line="600" pos:column="44">SetState</name></name><argument_list pos:line="600" pos:column="52">( <argument><expr><name pos:line="600" pos:column="54">SCE_MODULA_FLOAT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<for pos:line="601" pos:column="41">for( <init><expr><name pos:line="601" pos:column="46">i</name> <op:operator pos:line="601" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="601" pos:column="50">0</lit:literal></expr>;</init> <condition><expr><name pos:line="601" pos:column="53">i</name> <op:operator pos:line="601" pos:column="55">&lt;</op:operator> <name pos:line="601" pos:column="57">kl</name></expr>;</condition> <incr><expr><name pos:line="601" pos:column="61">i</name><op:operator pos:line="601" pos:column="62">++</op:operator></expr></incr> ) <block pos:line="601" pos:column="67">{
						<expr_stmt><expr><call><name><name pos:line="602" pos:column="49">sc</name><op:operator pos:line="602" pos:column="51">.</op:operator><name pos:line="602" pos:column="52">Forward</name></name><argument_list pos:line="602" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></for>
					<expr_stmt><expr><call><name><name pos:line="604" pos:column="41">sc</name><op:operator pos:line="604" pos:column="43">.</op:operator><name pos:line="604" pos:column="44">SetState</name></name><argument_list pos:line="604" pos:column="52">( <argument><expr><name pos:line="604" pos:column="54">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="605" pos:column="41">continue;</continue>
					<break pos:line="606" pos:column="41">break;</break>

				</case><default pos:line="608" pos:column="33">default:
					<for pos:line="609" pos:column="41">for( <init><expr><name pos:line="609" pos:column="46">i</name> <op:operator pos:line="609" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="609" pos:column="50">0</lit:literal></expr>;</init> <condition><expr><name pos:line="609" pos:column="53">i</name> <op:operator pos:line="609" pos:column="55">&lt;</op:operator> <name pos:line="609" pos:column="57">kl</name></expr>;</condition> <incr><expr><name pos:line="609" pos:column="61">i</name><op:operator pos:line="609" pos:column="62">++</op:operator></expr></incr> ) <block pos:line="609" pos:column="67">{
						<expr_stmt><expr><call><name><name pos:line="610" pos:column="49">sc</name><op:operator pos:line="610" pos:column="51">.</op:operator><name pos:line="610" pos:column="52">Forward</name></name><argument_list pos:line="610" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></for>
					<break pos:line="612" pos:column="41">break;</break>
				</default>}</block></switch>
				<expr_stmt><expr><call><name><name pos:line="614" pos:column="33">sc</name><op:operator pos:line="614" pos:column="35">.</op:operator><name pos:line="614" pos:column="36">SetState</name></name><argument_list pos:line="614" pos:column="44">( <argument><expr><name pos:line="614" pos:column="46">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="615" pos:column="33">continue;</continue>
			}</block>
			<break pos:line="617" pos:column="25">break;</break>

		</case><case pos:line="619" pos:column="17">case <expr><name pos:line="619" pos:column="22">SCE_MODULA_STRING</name></expr>:
			<if pos:line="620" pos:column="25">if<condition pos:line="620" pos:column="27">( <expr><name><name pos:line="620" pos:column="29">sc</name><op:operator pos:line="620" pos:column="31">.</op:operator><name pos:line="620" pos:column="32">ch</name></name> <op:operator pos:line="620" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="620" pos:column="38">'\"'</lit:literal></expr> )</condition><then pos:line="620" pos:column="44"> <block pos:line="620" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="621" pos:column="33">sc</name><op:operator pos:line="621" pos:column="35">.</op:operator><name pos:line="621" pos:column="36">Forward</name></name><argument_list pos:line="621" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="622" pos:column="33">sc</name><op:operator pos:line="622" pos:column="35">.</op:operator><name pos:line="622" pos:column="36">SetState</name></name><argument_list pos:line="622" pos:column="44">( <argument><expr><name pos:line="622" pos:column="46">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="623" pos:column="33">continue;</continue>
			}</block></then> <else pos:line="624" pos:column="27">else <block pos:line="624" pos:column="32">{
				<if pos:line="625" pos:column="33">if<condition pos:line="625" pos:column="35">( <expr><name><name pos:line="625" pos:column="37">sc</name><op:operator pos:line="625" pos:column="39">.</op:operator><name pos:line="625" pos:column="40">ch</name></name> <op:operator pos:line="625" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="625" pos:column="46">'\\'</lit:literal></expr> )</condition><then pos:line="625" pos:column="52"> <block pos:line="625" pos:column="53">{
					<expr_stmt><expr><name pos:line="626" pos:column="41">i</name> <op:operator pos:line="626" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="626" pos:column="45">1</lit:literal></expr>;</expr_stmt>
					<if pos:line="627" pos:column="41">if<condition pos:line="627" pos:column="43">( <expr><call><name pos:line="627" pos:column="45">IsDigitOfBase</name><argument_list pos:line="627" pos:column="58">( <argument><expr><name><name pos:line="627" pos:column="60">sc</name><op:operator pos:line="627" pos:column="62">.</op:operator><name pos:line="627" pos:column="63">chNext</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="627" pos:column="71">8</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="627" pos:column="76"> <block pos:line="627" pos:column="77">{
						<for pos:line="628" pos:column="49">for( <init><expr><name pos:line="628" pos:column="54">i</name> <op:operator pos:line="628" pos:column="56">=</op:operator> <lit:literal type="number" pos:line="628" pos:column="58">1</lit:literal></expr>;</init> <condition><expr><name pos:line="628" pos:column="61">i</name> <op:operator pos:line="628" pos:column="63">&lt;</op:operator> <name pos:line="628" pos:column="65">BUFLEN</name> <op:operator pos:line="628" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="628" pos:column="74">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="628" pos:column="77">i</name><op:operator pos:line="628" pos:column="78">++</op:operator></expr></incr> ) <block pos:line="628" pos:column="83">{
							<if pos:line="629" pos:column="57">if<condition pos:line="629" pos:column="59">( <expr><op:operator pos:line="629" pos:column="61">!</op:operator> <call><name pos:line="629" pos:column="63">IsDigitOfBase</name><argument_list pos:line="629" pos:column="76">(<argument><expr><call><name><name pos:line="629" pos:column="77">sc</name><op:operator pos:line="629" pos:column="79">.</op:operator><name pos:line="629" pos:column="80">GetRelative</name></name><argument_list pos:line="629" pos:column="91">(<argument><expr><name pos:line="629" pos:column="92">i</name><op:operator pos:line="629" pos:column="93">+</op:operator><lit:literal type="number" pos:line="629" pos:column="94">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="629" pos:column="98">8</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="629" pos:column="103">
								<break pos:line="630" pos:column="65">break;</break></then></if>
						}</block></for>
						<if pos:line="632" pos:column="49">if<condition pos:line="632" pos:column="51">( <expr><name pos:line="632" pos:column="53">i</name> <op:operator pos:line="632" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="632" pos:column="58">3</lit:literal></expr> )</condition><then pos:line="632" pos:column="61"> <block pos:line="632" pos:column="62">{
							<expr_stmt><expr><call><name><name pos:line="633" pos:column="57">sc</name><op:operator pos:line="633" pos:column="59">.</op:operator><name pos:line="633" pos:column="60">SetState</name></name><argument_list pos:line="633" pos:column="68">( <argument><expr><name pos:line="633" pos:column="70">SCE_MODULA_STRSPEC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="634" pos:column="51">else <block pos:line="634" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="635" pos:column="57">sc</name><op:operator pos:line="635" pos:column="59">.</op:operator><name pos:line="635" pos:column="60">SetState</name></name><argument_list pos:line="635" pos:column="68">( <argument><expr><name pos:line="635" pos:column="70">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then> <else pos:line="637" pos:column="43">else <block pos:line="637" pos:column="48">{
						<expr_stmt><expr><name><name pos:line="638" pos:column="49">buf</name><index pos:line="638" pos:column="52">[<expr><lit:literal type="number" pos:line="638" pos:column="53">0</lit:literal></expr>]</index></name> <op:operator pos:line="638" pos:column="56">=</op:operator> <name><name pos:line="638" pos:column="58">sc</name><op:operator pos:line="638" pos:column="60">.</op:operator><name pos:line="638" pos:column="61">chNext</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="639" pos:column="49">buf</name><index pos:line="639" pos:column="52">[<expr><lit:literal type="number" pos:line="639" pos:column="53">1</lit:literal></expr>]</index></name> <op:operator pos:line="639" pos:column="56">=</op:operator> <lit:literal type="number" pos:line="639" pos:column="58">0</lit:literal></expr>;</expr_stmt>

						<if pos:line="641" pos:column="49">if<condition pos:line="641" pos:column="51">( <expr><call><name><name pos:line="641" pos:column="53">escapeCodes</name><op:operator pos:line="641" pos:column="64">.</op:operator><name pos:line="641" pos:column="65">InList</name></name><argument_list pos:line="641" pos:column="71">( <argument><expr><name pos:line="641" pos:column="73">buf</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="641" pos:column="80"> <block pos:line="641" pos:column="81">{
							<expr_stmt><expr><call><name><name pos:line="642" pos:column="57">sc</name><op:operator pos:line="642" pos:column="59">.</op:operator><name pos:line="642" pos:column="60">SetState</name></name><argument_list pos:line="642" pos:column="68">( <argument><expr><name pos:line="642" pos:column="70">SCE_MODULA_STRSPEC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="643" pos:column="51">else <block pos:line="643" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="644" pos:column="57">sc</name><op:operator pos:line="644" pos:column="59">.</op:operator><name pos:line="644" pos:column="60">SetState</name></name><argument_list pos:line="644" pos:column="68">( <argument><expr><name pos:line="644" pos:column="70">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></else></if>
					<expr_stmt><expr><call><name><name pos:line="647" pos:column="41">sc</name><op:operator pos:line="647" pos:column="43">.</op:operator><name pos:line="647" pos:column="44">Forward</name></name><argument_list pos:line="647" pos:column="51">(<argument><expr><name pos:line="647" pos:column="52">i</name><op:operator pos:line="647" pos:column="53">+</op:operator><lit:literal type="number" pos:line="647" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="648" pos:column="41">sc</name><op:operator pos:line="648" pos:column="43">.</op:operator><name pos:line="648" pos:column="44">SetState</name></name><argument_list pos:line="648" pos:column="52">( <argument><expr><name pos:line="648" pos:column="54">SCE_MODULA_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="649" pos:column="41">continue;</continue>
				}</block></then></if>
			}</block></else></if>
			<break pos:line="652" pos:column="25">break;</break>

		</case><case pos:line="654" pos:column="17">case <expr><name pos:line="654" pos:column="22">SCE_MODULA_CHAR</name></expr>:
			<if pos:line="655" pos:column="25">if<condition pos:line="655" pos:column="27">( <expr><name><name pos:line="655" pos:column="29">sc</name><op:operator pos:line="655" pos:column="31">.</op:operator><name pos:line="655" pos:column="32">ch</name></name> <op:operator pos:line="655" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="655" pos:column="38">'\''</lit:literal></expr> )</condition><then pos:line="655" pos:column="44"> <block pos:line="655" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="656" pos:column="33">sc</name><op:operator pos:line="656" pos:column="35">.</op:operator><name pos:line="656" pos:column="36">Forward</name></name><argument_list pos:line="656" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="657" pos:column="33">sc</name><op:operator pos:line="657" pos:column="35">.</op:operator><name pos:line="657" pos:column="36">SetState</name></name><argument_list pos:line="657" pos:column="44">( <argument><expr><name pos:line="657" pos:column="46">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="658" pos:column="33">continue;</continue>
			}</block></then>
			<else pos:line="660" pos:column="25">else
			<if pos:line="661" pos:column="25">if<condition pos:line="661" pos:column="27">( <expr><op:operator pos:line="661" pos:column="29">(</op:operator> <name><name pos:line="661" pos:column="31">sc</name><op:operator pos:line="661" pos:column="33">.</op:operator><name pos:line="661" pos:column="34">currentPos</name></name> <op:operator pos:line="661" pos:column="45">-</op:operator> <name pos:line="661" pos:column="47">charPos</name> <op:operator pos:line="661" pos:column="55">)</op:operator> <op:operator pos:line="661" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="661" pos:column="60">1</lit:literal></expr> )</condition><then pos:line="661" pos:column="63"> <block pos:line="661" pos:column="64">{
				<if pos:line="662" pos:column="33">if<condition pos:line="662" pos:column="35">( <expr><name><name pos:line="662" pos:column="37">sc</name><op:operator pos:line="662" pos:column="39">.</op:operator><name pos:line="662" pos:column="40">ch</name></name> <op:operator pos:line="662" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="662" pos:column="46">'\\'</lit:literal></expr> )</condition><then pos:line="662" pos:column="52"> <block pos:line="662" pos:column="53">{
					<expr_stmt><expr><name pos:line="663" pos:column="41">i</name> <op:operator pos:line="663" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="663" pos:column="45">1</lit:literal></expr>;</expr_stmt>
					<if pos:line="664" pos:column="41">if<condition pos:line="664" pos:column="43">( <expr><call><name pos:line="664" pos:column="45">IsDigitOfBase</name><argument_list pos:line="664" pos:column="58">( <argument><expr><name><name pos:line="664" pos:column="60">sc</name><op:operator pos:line="664" pos:column="62">.</op:operator><name pos:line="664" pos:column="63">chNext</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="664" pos:column="71">8</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="664" pos:column="76"> <block pos:line="664" pos:column="77">{
						<for pos:line="665" pos:column="49">for( <init><expr><name pos:line="665" pos:column="54">i</name> <op:operator pos:line="665" pos:column="56">=</op:operator> <lit:literal type="number" pos:line="665" pos:column="58">1</lit:literal></expr>;</init> <condition><expr><name pos:line="665" pos:column="61">i</name> <op:operator pos:line="665" pos:column="63">&lt;</op:operator> <name pos:line="665" pos:column="65">BUFLEN</name> <op:operator pos:line="665" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="665" pos:column="74">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="665" pos:column="77">i</name><op:operator pos:line="665" pos:column="78">++</op:operator></expr></incr> ) <block pos:line="665" pos:column="83">{
							<if pos:line="666" pos:column="57">if<condition pos:line="666" pos:column="59">( <expr><op:operator pos:line="666" pos:column="61">!</op:operator> <call><name pos:line="666" pos:column="63">IsDigitOfBase</name><argument_list pos:line="666" pos:column="76">(<argument><expr><call><name><name pos:line="666" pos:column="77">sc</name><op:operator pos:line="666" pos:column="79">.</op:operator><name pos:line="666" pos:column="80">GetRelative</name></name><argument_list pos:line="666" pos:column="91">(<argument><expr><name pos:line="666" pos:column="92">i</name><op:operator pos:line="666" pos:column="93">+</op:operator><lit:literal type="number" pos:line="666" pos:column="94">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="666" pos:column="98">8</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="666" pos:column="103">
								<break pos:line="667" pos:column="65">break;</break></then></if>
						}</block></for>
						<if pos:line="669" pos:column="49">if<condition pos:line="669" pos:column="51">( <expr><name pos:line="669" pos:column="53">i</name> <op:operator pos:line="669" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="669" pos:column="58">3</lit:literal></expr> )</condition><then pos:line="669" pos:column="61"> <block pos:line="669" pos:column="62">{
							<expr_stmt><expr><call><name><name pos:line="670" pos:column="57">sc</name><op:operator pos:line="670" pos:column="59">.</op:operator><name pos:line="670" pos:column="60">SetState</name></name><argument_list pos:line="670" pos:column="68">( <argument><expr><name pos:line="670" pos:column="70">SCE_MODULA_CHARSPEC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="671" pos:column="51">else <block pos:line="671" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="672" pos:column="57">sc</name><op:operator pos:line="672" pos:column="59">.</op:operator><name pos:line="672" pos:column="60">SetState</name></name><argument_list pos:line="672" pos:column="68">( <argument><expr><name pos:line="672" pos:column="70">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then> <else pos:line="674" pos:column="43">else <block pos:line="674" pos:column="48">{
						<expr_stmt><expr><name><name pos:line="675" pos:column="49">buf</name><index pos:line="675" pos:column="52">[<expr><lit:literal type="number" pos:line="675" pos:column="53">0</lit:literal></expr>]</index></name> <op:operator pos:line="675" pos:column="56">=</op:operator> <name><name pos:line="675" pos:column="58">sc</name><op:operator pos:line="675" pos:column="60">.</op:operator><name pos:line="675" pos:column="61">chNext</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="676" pos:column="49">buf</name><index pos:line="676" pos:column="52">[<expr><lit:literal type="number" pos:line="676" pos:column="53">1</lit:literal></expr>]</index></name> <op:operator pos:line="676" pos:column="56">=</op:operator> <lit:literal type="number" pos:line="676" pos:column="58">0</lit:literal></expr>;</expr_stmt>

						<if pos:line="678" pos:column="49">if<condition pos:line="678" pos:column="51">( <expr><call><name><name pos:line="678" pos:column="53">escapeCodes</name><op:operator pos:line="678" pos:column="64">.</op:operator><name pos:line="678" pos:column="65">InList</name></name><argument_list pos:line="678" pos:column="71">( <argument><expr><name pos:line="678" pos:column="73">buf</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="678" pos:column="80"> <block pos:line="678" pos:column="81">{
							<expr_stmt><expr><call><name><name pos:line="679" pos:column="57">sc</name><op:operator pos:line="679" pos:column="59">.</op:operator><name pos:line="679" pos:column="60">SetState</name></name><argument_list pos:line="679" pos:column="68">( <argument><expr><name pos:line="679" pos:column="70">SCE_MODULA_CHARSPEC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="680" pos:column="51">else <block pos:line="680" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="681" pos:column="57">sc</name><op:operator pos:line="681" pos:column="59">.</op:operator><name pos:line="681" pos:column="60">SetState</name></name><argument_list pos:line="681" pos:column="68">( <argument><expr><name pos:line="681" pos:column="70">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></else></if>
					<expr_stmt><expr><call><name><name pos:line="684" pos:column="41">sc</name><op:operator pos:line="684" pos:column="43">.</op:operator><name pos:line="684" pos:column="44">Forward</name></name><argument_list pos:line="684" pos:column="51">(<argument><expr><name pos:line="684" pos:column="52">i</name><op:operator pos:line="684" pos:column="53">+</op:operator><lit:literal type="number" pos:line="684" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="685" pos:column="41">sc</name><op:operator pos:line="685" pos:column="43">.</op:operator><name pos:line="685" pos:column="44">SetState</name></name><argument_list pos:line="685" pos:column="52">( <argument><expr><name pos:line="685" pos:column="54">SCE_MODULA_CHAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="686" pos:column="41">continue;</continue>
				}</block></then></if>
			}</block></then> <else pos:line="688" pos:column="27">else <block pos:line="688" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="689" pos:column="33">sc</name><op:operator pos:line="689" pos:column="35">.</op:operator><name pos:line="689" pos:column="36">SetState</name></name><argument_list pos:line="689" pos:column="44">( <argument><expr><name pos:line="689" pos:column="46">SCE_MODULA_BADSTR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="690" pos:column="33">sc</name><op:operator pos:line="690" pos:column="35">.</op:operator><name pos:line="690" pos:column="36">Forward</name></name><argument_list pos:line="690" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="691" pos:column="33">sc</name><op:operator pos:line="691" pos:column="35">.</op:operator><name pos:line="691" pos:column="36">SetState</name></name><argument_list pos:line="691" pos:column="44">( <argument><expr><name pos:line="691" pos:column="46">SCE_MODULA_CHAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="692" pos:column="33">continue;</continue>
			}</block></else></if></else></if>
			<break pos:line="694" pos:column="25">break;</break>

		</case><case pos:line="696" pos:column="17">case <expr><name pos:line="696" pos:column="22">SCE_MODULA_PRAGMA</name></expr>:
			<if pos:line="697" pos:column="25">if<condition pos:line="697" pos:column="27">( <expr><name><name pos:line="697" pos:column="29">sc</name><op:operator pos:line="697" pos:column="31">.</op:operator><name pos:line="697" pos:column="32">ch</name></name> <op:operator pos:line="697" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="697" pos:column="38">'*'</lit:literal> <op:operator pos:line="697" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="697" pos:column="45">sc</name><op:operator pos:line="697" pos:column="47">.</op:operator><name pos:line="697" pos:column="48">chNext</name></name> <op:operator pos:line="697" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="697" pos:column="58">'&gt;'</lit:literal></expr> )</condition><then pos:line="697" pos:column="63"> <block pos:line="697" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="698" pos:column="33">sc</name><op:operator pos:line="698" pos:column="35">.</op:operator><name pos:line="698" pos:column="36">Forward</name></name><argument_list pos:line="698" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="699" pos:column="33">sc</name><op:operator pos:line="699" pos:column="35">.</op:operator><name pos:line="699" pos:column="36">Forward</name></name><argument_list pos:line="699" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="700" pos:column="33">sc</name><op:operator pos:line="700" pos:column="35">.</op:operator><name pos:line="700" pos:column="36">SetState</name></name><argument_list pos:line="700" pos:column="44">( <argument><expr><name pos:line="700" pos:column="46">SCE_MODULA_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="701" pos:column="33">continue;</continue>
			}</block></then>
			<else pos:line="703" pos:column="25">else
			<if pos:line="704" pos:column="25">if<condition pos:line="704" pos:column="27">( <expr><call><name pos:line="704" pos:column="29">isupper</name><argument_list pos:line="704" pos:column="36">( <argument><expr><name><name pos:line="704" pos:column="38">sc</name><op:operator pos:line="704" pos:column="40">.</op:operator><name pos:line="704" pos:column="41">ch</name></name></expr></argument> )</argument_list></call> <op:operator pos:line="704" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="704" pos:column="49">isupper</name><argument_list pos:line="704" pos:column="56">( <argument><expr><name><name pos:line="704" pos:column="58">sc</name><op:operator pos:line="704" pos:column="60">.</op:operator><name pos:line="704" pos:column="61">chNext</name></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="704" pos:column="71"> <block pos:line="704" pos:column="72">{
				<expr_stmt><expr><name><name pos:line="705" pos:column="33">buf</name><index pos:line="705" pos:column="36">[<expr><lit:literal type="number" pos:line="705" pos:column="37">0</lit:literal></expr>]</index></name> <op:operator pos:line="705" pos:column="40">=</op:operator> <name><name pos:line="705" pos:column="42">sc</name><op:operator pos:line="705" pos:column="44">.</op:operator><name pos:line="705" pos:column="45">ch</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="706" pos:column="33">buf</name><index pos:line="706" pos:column="36">[<expr><lit:literal type="number" pos:line="706" pos:column="37">1</lit:literal></expr>]</index></name> <op:operator pos:line="706" pos:column="40">=</op:operator> <name><name pos:line="706" pos:column="42">sc</name><op:operator pos:line="706" pos:column="44">.</op:operator><name pos:line="706" pos:column="45">chNext</name></name></expr>;</expr_stmt>
				<for pos:line="707" pos:column="33">for( <init><expr><name pos:line="707" pos:column="38">i</name> <op:operator pos:line="707" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="707" pos:column="42">2</lit:literal></expr>;</init> <condition><expr><name pos:line="707" pos:column="45">i</name> <op:operator pos:line="707" pos:column="47">&lt;</op:operator> <name pos:line="707" pos:column="49">BUFLEN</name> <op:operator pos:line="707" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="707" pos:column="58">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="707" pos:column="61">i</name><op:operator pos:line="707" pos:column="62">++</op:operator></expr></incr> ) <block pos:line="707" pos:column="67">{
					<expr_stmt><expr><name><name pos:line="708" pos:column="41">buf</name><index pos:line="708" pos:column="44">[<expr><name pos:line="708" pos:column="45">i</name></expr>]</index></name> <op:operator pos:line="708" pos:column="48">=</op:operator> <call><name><name pos:line="708" pos:column="50">sc</name><op:operator pos:line="708" pos:column="52">.</op:operator><name pos:line="708" pos:column="53">GetRelative</name></name><argument_list pos:line="708" pos:column="64">(<argument><expr><name pos:line="708" pos:column="65">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="709" pos:column="41">if<condition pos:line="709" pos:column="43">( <expr><op:operator pos:line="709" pos:column="45">!</op:operator><call><name pos:line="709" pos:column="46">isupper</name><argument_list pos:line="709" pos:column="53">( <argument><expr><name><name pos:line="709" pos:column="55">buf</name><index pos:line="709" pos:column="58">[<expr><name pos:line="709" pos:column="59">i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="709" pos:column="65">
						<break pos:line="710" pos:column="49">break;</break></then></if>
				}</block></for>
				<expr_stmt><expr><name pos:line="712" pos:column="33">kl</name> <op:operator pos:line="712" pos:column="36">=</op:operator> <name pos:line="712" pos:column="38">i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="713" pos:column="33">buf</name><index pos:line="713" pos:column="36">[<expr><name pos:line="713" pos:column="37">kl</name></expr>]</index></name> <op:operator pos:line="713" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="713" pos:column="43">0</lit:literal></expr>;</expr_stmt>
				<if pos:line="714" pos:column="33">if<condition pos:line="714" pos:column="35">( <expr><call><name><name pos:line="714" pos:column="37">pragmaWords</name><op:operator pos:line="714" pos:column="48">.</op:operator><name pos:line="714" pos:column="49">InList</name></name><argument_list pos:line="714" pos:column="55">( <argument><expr><name pos:line="714" pos:column="57">buf</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="714" pos:column="64"> <block pos:line="714" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="715" pos:column="41">sc</name><op:operator pos:line="715" pos:column="43">.</op:operator><name pos:line="715" pos:column="44">SetState</name></name><argument_list pos:line="715" pos:column="52">( <argument><expr><name pos:line="715" pos:column="54">SCE_MODULA_PRGKEY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="716" pos:column="41">sc</name><op:operator pos:line="716" pos:column="43">.</op:operator><name pos:line="716" pos:column="44">Forward</name></name><argument_list pos:line="716" pos:column="51">( <argument><expr><name pos:line="716" pos:column="53">kl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="717" pos:column="41">sc</name><op:operator pos:line="717" pos:column="43">.</op:operator><name pos:line="717" pos:column="44">SetState</name></name><argument_list pos:line="717" pos:column="52">( <argument><expr><name pos:line="717" pos:column="54">SCE_MODULA_PRAGMA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<continue pos:line="718" pos:column="41">continue;</continue>
				}</block></then></if>
			}</block></then></if></else></if>
			<break pos:line="721" pos:column="25">break;</break>

		</case><default pos:line="723" pos:column="17">default:
			<break pos:line="724" pos:column="25">break;</break>
		</default>}</block></switch>
		<expr_stmt><expr><call><name><name pos:line="726" pos:column="17">sc</name><op:operator pos:line="726" pos:column="19">.</op:operator><name pos:line="726" pos:column="20">Forward</name></name><argument_list pos:line="726" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name><name pos:line="728" pos:column="9">sc</name><op:operator pos:line="728" pos:column="11">.</op:operator><name pos:line="728" pos:column="12">Complete</name></name><argument_list pos:line="728" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="731" pos:column="1">static</specifier> <specifier pos:line="731" pos:column="8">const</specifier> <name pos:line="731" pos:column="14">char</name> <type:modifier pos:line="731" pos:column="19">*</type:modifier><specifier pos:line="731" pos:column="20">const</specifier></type> <name><name pos:line="731" pos:column="26">modulaWordListDesc</name><index pos:line="731" pos:column="44">[]</index></name> <init pos:line="731" pos:column="47">=
<expr><block pos:line="732" pos:column="1">{
	<expr><lit:literal type="string" pos:line="733" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="734" pos:column="9">"ReservedKeywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="735" pos:column="9">"Operators"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="736" pos:column="9">"PragmaKeyswords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="737" pos:column="9">"EscapeCodes"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="738" pos:column="9">"DoxygeneKeywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="739" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="742" pos:column="1">LexerModule</name></type> <name pos:line="742" pos:column="13">lmModula</name><argument_list pos:line="742" pos:column="21">( <argument><expr><name pos:line="742" pos:column="23">SCLEX_MODULA</name></expr></argument>, <argument><expr><name pos:line="742" pos:column="37">ColouriseModulaDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="742" pos:column="57">"modula"</lit:literal></expr></argument>, <argument><expr><name pos:line="742" pos:column="67">FoldModulaDoc</name></expr></argument>,
					  <argument><expr><name pos:line="743" pos:column="43">modulaWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
