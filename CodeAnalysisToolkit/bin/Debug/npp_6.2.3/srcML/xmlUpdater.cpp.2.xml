<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\tools\xmlUpdater\xmlUpdater.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file pos:line="29" pos:column="10">&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"tinyxml.h"</lit:literal></cpp:file></cpp:include>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">MODEL_INVALID</name></cpp:macro> <cpp:value pos:line="31" pos:column="23">1</cpp:value></cpp:define>
<cpp:define pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="32" pos:column="9">SRC_INVALID</name></cpp:macro> <cpp:value pos:line="32" pos:column="21">2</cpp:value></cpp:define>
<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">DEST_INVALID</name></cpp:macro> <cpp:value pos:line="33" pos:column="22">3</cpp:value></cpp:define>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <name pos:line="35" pos:column="8">bool</name></type> <name pos:line="35" pos:column="13">isInList</name><parameter_list pos:line="35" pos:column="21">(<param><decl><type><specifier pos:line="35" pos:column="22">const</specifier> <name pos:line="35" pos:column="28">char</name> <type:modifier pos:line="35" pos:column="33">*</type:modifier></type><name pos:line="35" pos:column="34">token2Find</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="46">char</name> <type:modifier pos:line="35" pos:column="51">*</type:modifier></type><name pos:line="35" pos:column="52">list2Clean</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="64">{
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">char</name></type> <name><name pos:line="36" pos:column="14">word</name><index pos:line="36" pos:column="18">[<expr><lit:literal type="number" pos:line="36" pos:column="19">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">bool</name></type> <name pos:line="37" pos:column="14">isFileNamePart</name> <init pos:line="37" pos:column="29">= <expr><lit:literal type="boolean" pos:line="37" pos:column="31">false</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="39" pos:column="9">for (<init><decl><type><name pos:line="39" pos:column="14">int</name></type> <name pos:line="39" pos:column="18">i</name> <init pos:line="39" pos:column="20">= <expr><lit:literal type="number" pos:line="39" pos:column="22">0</lit:literal></expr></init><op:operator pos:line="39" pos:column="23">,</op:operator> <name pos:line="39" pos:column="25">j</name> <init pos:line="39" pos:column="27">= <expr><lit:literal type="number" pos:line="39" pos:column="29">0</lit:literal></expr></init></decl> ;</init>  <condition><expr><name pos:line="39" pos:column="34">i</name> <op:operator pos:line="39" pos:column="36">&lt;=</op:operator> <call><name pos:line="39" pos:column="39">int</name><argument_list pos:line="39" pos:column="42">(<argument><expr><call><name pos:line="39" pos:column="43">strlen</name><argument_list pos:line="39" pos:column="49">(<argument><expr><name pos:line="39" pos:column="50">list2Clean</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="39" pos:column="65">i</name><op:operator pos:line="39" pos:column="66">++</op:operator></expr></incr>)
	<block pos:line="40" pos:column="9">{
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><op:operator pos:line="41" pos:column="21">(</op:operator><name><name pos:line="41" pos:column="22">list2Clean</name><index pos:line="41" pos:column="32">[<expr><name pos:line="41" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="41" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="39">' '</lit:literal><op:operator pos:line="41" pos:column="42">)</op:operator> <op:operator pos:line="41" pos:column="44">||</op:operator> <op:operator pos:line="41" pos:column="47">(</op:operator><name><name pos:line="41" pos:column="48">list2Clean</name><index pos:line="41" pos:column="58">[<expr><name pos:line="41" pos:column="59">i</name></expr>]</index></name> <op:operator pos:line="41" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="65">'\0'</lit:literal><op:operator pos:line="41" pos:column="69">)</op:operator></expr>)</condition><then pos:line="41" pos:column="71">
		<block pos:line="42" pos:column="17">{
			<if pos:line="43" pos:column="25">if <condition pos:line="43" pos:column="28">(<expr><op:operator pos:line="43" pos:column="29">(</op:operator><name pos:line="43" pos:column="30">j</name><op:operator pos:line="43" pos:column="31">)</op:operator> <op:operator pos:line="43" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="43" pos:column="36">(</op:operator><op:operator pos:line="43" pos:column="37">!</op:operator><name pos:line="43" pos:column="38">isFileNamePart</name><op:operator pos:line="43" pos:column="52">)</op:operator></expr>)</condition><then pos:line="43" pos:column="54">
			<block pos:line="44" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="45" pos:column="33">word</name><index pos:line="45" pos:column="37">[<expr><name pos:line="45" pos:column="38">j</name></expr>]</index></name> <op:operator pos:line="45" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="45" pos:column="43">'\0'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="46" pos:column="33">j</name> <op:operator pos:line="46" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="46" pos:column="37">0</lit:literal></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="47" pos:column="33">bool</name></type> <name pos:line="47" pos:column="38">bingo</name> <init pos:line="47" pos:column="44">= <expr><op:operator pos:line="47" pos:column="46">!</op:operator><call><name pos:line="47" pos:column="47">strcmp</name><argument_list pos:line="47" pos:column="53">(<argument><expr><name pos:line="47" pos:column="54">token2Find</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="66">word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if pos:line="49" pos:column="33">if <condition pos:line="49" pos:column="36">(<expr><name pos:line="49" pos:column="37">bingo</name></expr>)</condition><then pos:line="49" pos:column="43">
				<block pos:line="50" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="51" pos:column="41">int</name></type> <name pos:line="51" pos:column="45">wordLen</name> <init pos:line="51" pos:column="53">= <expr><call><name pos:line="51" pos:column="55">int</name><argument_list pos:line="51" pos:column="58">(<argument><expr><call><name pos:line="51" pos:column="59">strlen</name><argument_list pos:line="51" pos:column="65">(<argument><expr><name pos:line="51" pos:column="66">word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="52" pos:column="41">int</name></type> <name pos:line="52" pos:column="45">prevPos</name> <init pos:line="52" pos:column="53">= <expr><name pos:line="52" pos:column="55">i</name> <op:operator pos:line="52" pos:column="57">-</op:operator> <name pos:line="52" pos:column="59">wordLen</name></expr></init></decl>;</decl_stmt>

					<for pos:line="54" pos:column="41">for (<init><expr><name pos:line="54" pos:column="46">i</name> <op:operator pos:line="54" pos:column="48">=</op:operator> <name pos:line="54" pos:column="50">i</name> <op:operator pos:line="54" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="54" pos:column="54">1</lit:literal></expr> ;</init>  <condition><expr><name pos:line="54" pos:column="59">i</name> <op:operator pos:line="54" pos:column="61">&lt;=</op:operator> <call><name pos:line="54" pos:column="64">int</name><argument_list pos:line="54" pos:column="67">(<argument><expr><call><name pos:line="54" pos:column="68">strlen</name><argument_list pos:line="54" pos:column="74">(<argument><expr><name pos:line="54" pos:column="75">list2Clean</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="54" pos:column="90">i</name><op:operator pos:line="54" pos:column="91">++</op:operator></expr><op:operator pos:line="54" pos:column="93">,</op:operator> <expr><name pos:line="54" pos:column="95">prevPos</name><op:operator pos:line="54" pos:column="102">++</op:operator></expr></incr>)
						<expr_stmt><expr><name><name pos:line="55" pos:column="49">list2Clean</name><index pos:line="55" pos:column="59">[<expr><name pos:line="55" pos:column="60">prevPos</name></expr>]</index></name> <op:operator pos:line="55" pos:column="69">=</op:operator> <name><name pos:line="55" pos:column="71">list2Clean</name><index pos:line="55" pos:column="81">[<expr><name pos:line="55" pos:column="82">i</name></expr>]</index></name></expr>;</expr_stmt></for>

					<expr_stmt><expr><name><name pos:line="57" pos:column="41">list2Clean</name><index pos:line="57" pos:column="51">[<expr><name pos:line="57" pos:column="52">prevPos</name></expr>]</index></name> <op:operator pos:line="57" pos:column="61">=</op:operator> <lit:literal type="char" pos:line="57" pos:column="63">'\0'</lit:literal></expr>;</expr_stmt>
					
					<return pos:line="59" pos:column="41">return <expr><lit:literal type="boolean" pos:line="59" pos:column="48">true</lit:literal></expr>;</return>
				}</block></then></if>
			}</block></then></if>
		}</block></then>
		<else pos:line="63" pos:column="17">else <if pos:line="63" pos:column="22">if <condition pos:line="63" pos:column="25">(<expr><name><name pos:line="63" pos:column="26">list2Clean</name><index pos:line="63" pos:column="36">[<expr><name pos:line="63" pos:column="37">i</name></expr>]</index></name> <op:operator pos:line="63" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="43">'"'</lit:literal></expr>)</condition><then pos:line="63" pos:column="47">
		<block pos:line="64" pos:column="17">{
			<expr_stmt><expr><name pos:line="65" pos:column="25">isFileNamePart</name> <op:operator pos:line="65" pos:column="40">=</op:operator> <op:operator pos:line="65" pos:column="42">!</op:operator><name pos:line="65" pos:column="43">isFileNamePart</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="67" pos:column="17">else
		<block pos:line="68" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="69" pos:column="25">word</name><index pos:line="69" pos:column="29">[<expr><name pos:line="69" pos:column="30">j</name><op:operator pos:line="69" pos:column="31">++</op:operator></expr>]</index></name> <op:operator pos:line="69" pos:column="35">=</op:operator> <name><name pos:line="69" pos:column="37">list2Clean</name><index pos:line="69" pos:column="47">[<expr><name pos:line="69" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></for>
	<return pos:line="72" pos:column="9">return <expr><lit:literal type="boolean" pos:line="72" pos:column="16">false</lit:literal></expr>;</return>
}</block></function><empty_stmt pos:line="73" pos:column="2">;</empty_stmt>


<function><type><name pos:line="76" pos:column="1">void</name></type> <name pos:line="76" pos:column="6">update</name><parameter_list pos:line="76" pos:column="12">(<param><decl><type><name pos:line="76" pos:column="13">TiXmlNode</name> <type:modifier pos:line="76" pos:column="23">*</type:modifier></type><name pos:line="76" pos:column="24">modelNode</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="35">TiXmlNode</name> <type:modifier pos:line="76" pos:column="45">*</type:modifier></type><name pos:line="76" pos:column="46">srcNode</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="55">TiXmlNode</name> <type:modifier pos:line="76" pos:column="65">*</type:modifier></type><name pos:line="76" pos:column="66">destNode</name></decl></param>)</parameter_list> <block pos:line="76" pos:column="76">{
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">TiXmlNode</name> <type:modifier pos:line="77" pos:column="19">*</type:modifier></type><name pos:line="77" pos:column="20">srcChildNode</name> <init pos:line="77" pos:column="33">= <expr><name pos:line="77" pos:column="35">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="78" pos:column="9">TiXmlNode</name> <type:modifier pos:line="78" pos:column="19">*</type:modifier></type><name pos:line="78" pos:column="20">destChildNode</name> <init pos:line="78" pos:column="34">= <expr><name pos:line="78" pos:column="36">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="79" pos:column="9">TiXmlNode</name> <type:modifier pos:line="79" pos:column="19">*</type:modifier></type><name pos:line="79" pos:column="20">modelChildNode</name> <init pos:line="79" pos:column="35">= <expr><call><name><name pos:line="79" pos:column="37">modelNode</name><op:operator pos:line="79" pos:column="46">-&gt;</op:operator><name pos:line="79" pos:column="48">FirstChild</name></name><argument_list pos:line="79" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="59">"Node"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><op:operator pos:line="81" pos:column="13">!</op:operator><name pos:line="81" pos:column="14">srcNode</name></expr>)</condition><then pos:line="81" pos:column="22"> <return pos:line="81" pos:column="23">return;</return></then></if>

	<for pos:line="83" pos:column="9">for (<init><expr><name pos:line="83" pos:column="14">modelChildNode</name> <op:operator pos:line="83" pos:column="29">=</op:operator> <call><name><name pos:line="83" pos:column="31">modelNode</name><op:operator pos:line="83" pos:column="40">-&gt;</op:operator><name pos:line="83" pos:column="42">FirstChild</name></name><argument_list pos:line="83" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="53">"Node"</lit:literal></expr></argument>)</argument_list></call></expr>;</init> 
		 <condition><expr><name pos:line="84" pos:column="18">modelChildNode</name></expr>;</condition>
		 <incr><expr><name pos:line="85" pos:column="18">modelChildNode</name> <op:operator pos:line="85" pos:column="33">=</op:operator> <call><name><name pos:line="85" pos:column="35">modelChildNode</name><op:operator pos:line="85" pos:column="49">-&gt;</op:operator><name pos:line="85" pos:column="51">NextSibling</name></name><argument_list pos:line="85" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="63">"Node"</lit:literal></expr></argument>)</argument_list></call></expr></incr>)
	<block pos:line="86" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="87" pos:column="17">const</specifier> <name pos:line="87" pos:column="23">char</name> <type:modifier pos:line="87" pos:column="28">*</type:modifier></type><name pos:line="87" pos:column="29">nodeName</name> <init pos:line="87" pos:column="38">= <expr><op:operator pos:line="87" pos:column="40">(</op:operator><call><name><name pos:line="87" pos:column="41">modelChildNode</name><op:operator pos:line="87" pos:column="55">-&gt;</op:operator><name pos:line="87" pos:column="57">ToElement</name></name><argument_list pos:line="87" pos:column="66">()</argument_list></call><op:operator pos:line="87" pos:column="68">)</op:operator><op:operator pos:line="87" pos:column="69">-&gt;</op:operator><call><name pos:line="87" pos:column="71">Attribute</name><argument_list pos:line="87" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="81">"nodeName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="88" pos:column="17">const</specifier> <name pos:line="88" pos:column="23">char</name> <type:modifier pos:line="88" pos:column="28">*</type:modifier></type><name pos:line="88" pos:column="29">name</name> <init pos:line="88" pos:column="34">= <expr><op:operator pos:line="88" pos:column="36">(</op:operator><call><name><name pos:line="88" pos:column="37">modelChildNode</name><op:operator pos:line="88" pos:column="51">-&gt;</op:operator><name pos:line="88" pos:column="53">ToElement</name></name><argument_list pos:line="88" pos:column="62">()</argument_list></call><op:operator pos:line="88" pos:column="64">)</op:operator><op:operator pos:line="88" pos:column="65">-&gt;</op:operator><call><name pos:line="88" pos:column="67">Attribute</name><argument_list pos:line="88" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="77">"name"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="89" pos:column="17">if <condition pos:line="89" pos:column="20">(<expr><name pos:line="89" pos:column="21">nodeName</name></expr>)</condition><then pos:line="89" pos:column="30">
		<block pos:line="90" pos:column="17">{
			<expr_stmt><expr><name pos:line="91" pos:column="25">srcChildNode</name> <op:operator pos:line="91" pos:column="38">=</op:operator> <call><name><name pos:line="91" pos:column="40">srcNode</name><op:operator pos:line="91" pos:column="47">-&gt;</op:operator><name pos:line="91" pos:column="49">FirstChild</name></name><argument_list pos:line="91" pos:column="59">(<argument><expr><name pos:line="91" pos:column="60">nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="92" pos:column="25">if <condition pos:line="92" pos:column="28">(<expr><op:operator pos:line="92" pos:column="29">!</op:operator><name pos:line="92" pos:column="30">srcChildNode</name></expr>)</condition><then pos:line="92" pos:column="43"> <continue pos:line="92" pos:column="44">continue;</continue></then></if>

			<expr_stmt><expr><name pos:line="94" pos:column="25">destChildNode</name> <op:operator pos:line="94" pos:column="39">=</op:operator> <call><name><name pos:line="94" pos:column="41">destNode</name><op:operator pos:line="94" pos:column="49">-&gt;</op:operator><name pos:line="94" pos:column="51">FirstChild</name></name><argument_list pos:line="94" pos:column="61">(<argument><expr><name pos:line="94" pos:column="62">nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="95" pos:column="25">if <condition pos:line="95" pos:column="28">(<expr><op:operator pos:line="95" pos:column="29">!</op:operator><name pos:line="95" pos:column="30">destChildNode</name></expr>)</condition><then pos:line="95" pos:column="44">
			<block pos:line="96" pos:column="25">{
				<comment type="line" pos:line="97" pos:column="33">//Insertion</comment>
				<expr_stmt><expr><call><name><name pos:line="98" pos:column="33">destNode</name><op:operator pos:line="98" pos:column="41">-&gt;</op:operator><name pos:line="98" pos:column="43">InsertEndChild</name></name><argument_list pos:line="98" pos:column="57">(<argument><expr><op:operator pos:line="98" pos:column="58">*</op:operator><name pos:line="98" pos:column="59">srcChildNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue pos:line="99" pos:column="33">continue;</continue>
			}</block></then></if>
			<if pos:line="101" pos:column="25">if <condition pos:line="101" pos:column="28">(<expr><name pos:line="101" pos:column="29">name</name> <op:operator pos:line="101" pos:column="34">&amp;&amp;</op:operator> <name><name pos:line="101" pos:column="37">name</name><index pos:line="101" pos:column="41">[<expr><lit:literal type="number" pos:line="101" pos:column="42">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="101" pos:column="45">
			<block pos:line="102" pos:column="25">{
				<expr_stmt><expr><name pos:line="103" pos:column="33">srcChildNode</name> <op:operator pos:line="103" pos:column="46">=</op:operator> <call><name><name pos:line="103" pos:column="48">srcNode</name><op:operator pos:line="103" pos:column="55">-&gt;</op:operator><name pos:line="103" pos:column="57">FirstChild</name></name><argument_list pos:line="103" pos:column="67">(<argument><expr><name pos:line="103" pos:column="68">nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="104" pos:column="33">while <condition pos:line="104" pos:column="39">(<expr><name pos:line="104" pos:column="40">srcChildNode</name></expr>)</condition>
				<block pos:line="105" pos:column="33">{
					<decl_stmt><decl><type><specifier pos:line="106" pos:column="41">const</specifier> <name pos:line="106" pos:column="47">char</name> <type:modifier pos:line="106" pos:column="52">*</type:modifier></type><name pos:line="106" pos:column="53">attrib</name> <init pos:line="106" pos:column="60">= <expr><op:operator pos:line="106" pos:column="62">(</op:operator><call><name><name pos:line="106" pos:column="63">srcChildNode</name><op:operator pos:line="106" pos:column="75">-&gt;</op:operator><name pos:line="106" pos:column="77">ToElement</name></name><argument_list pos:line="106" pos:column="86">()</argument_list></call><op:operator pos:line="106" pos:column="88">)</op:operator><op:operator pos:line="106" pos:column="89">-&gt;</op:operator><call><name pos:line="106" pos:column="91">Attribute</name><argument_list pos:line="106" pos:column="100">(<argument><expr><name pos:line="106" pos:column="101">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="107" pos:column="41">if <condition pos:line="107" pos:column="44">(<expr><name pos:line="107" pos:column="45">attrib</name></expr>)</condition><then pos:line="107" pos:column="52">
					<block pos:line="108" pos:column="41">{
						<decl_stmt><decl><type><specifier pos:line="109" pos:column="49">const</specifier> <name pos:line="109" pos:column="55">char</name> <type:modifier pos:line="109" pos:column="60">*</type:modifier></type><name pos:line="109" pos:column="61">action</name> <init pos:line="109" pos:column="68">= <expr><op:operator pos:line="109" pos:column="70">(</op:operator><call><name><name pos:line="109" pos:column="71">srcChildNode</name><op:operator pos:line="109" pos:column="83">-&gt;</op:operator><name pos:line="109" pos:column="85">ToElement</name></name><argument_list pos:line="109" pos:column="94">()</argument_list></call><op:operator pos:line="109" pos:column="96">)</op:operator><op:operator pos:line="109" pos:column="97">-&gt;</op:operator><call><name pos:line="109" pos:column="99">Attribute</name><argument_list pos:line="109" pos:column="108">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="109">"action"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="110" pos:column="49">bool</name></type> <name pos:line="110" pos:column="54">remove</name> <init pos:line="110" pos:column="61">= <expr><lit:literal type="boolean" pos:line="110" pos:column="63">false</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="111" pos:column="49">bool</name></type> <name pos:line="111" pos:column="54">found</name> <init pos:line="111" pos:column="60">= <expr><lit:literal type="boolean" pos:line="111" pos:column="62">false</lit:literal></expr></init></decl>;</decl_stmt>

						<if pos:line="113" pos:column="49">if <condition pos:line="113" pos:column="52">(<expr><name pos:line="113" pos:column="53">action</name> <op:operator pos:line="113" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="113" pos:column="63">!</op:operator><call><name pos:line="113" pos:column="64">strcmp</name><argument_list pos:line="113" pos:column="70">(<argument><expr><name pos:line="113" pos:column="71">action</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="113" pos:column="79">"remove"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="113" pos:column="89">
							<expr_stmt><expr><name pos:line="114" pos:column="57">remove</name> <op:operator pos:line="114" pos:column="64">=</op:operator> <lit:literal type="boolean" pos:line="114" pos:column="66">true</lit:literal></expr>;</expr_stmt></then></if>

						<expr_stmt><expr><name pos:line="116" pos:column="49">destChildNode</name> <op:operator pos:line="116" pos:column="63">=</op:operator> <call><name><name pos:line="116" pos:column="65">destNode</name><op:operator pos:line="116" pos:column="73">-&gt;</op:operator><name pos:line="116" pos:column="75">FirstChild</name></name><argument_list pos:line="116" pos:column="85">(<argument><expr><name pos:line="116" pos:column="86">nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<while pos:line="117" pos:column="49">while <condition pos:line="117" pos:column="55">(<expr><name pos:line="117" pos:column="56">destChildNode</name></expr>)</condition>
						<block pos:line="118" pos:column="49">{
							<decl_stmt><decl><type><specifier pos:line="119" pos:column="57">const</specifier> <name pos:line="119" pos:column="63">char</name> <type:modifier pos:line="119" pos:column="68">*</type:modifier></type><name pos:line="119" pos:column="69">attribDest</name> <init pos:line="119" pos:column="80">= <expr><op:operator pos:line="119" pos:column="82">(</op:operator><call><name><name pos:line="119" pos:column="83">destChildNode</name><op:operator pos:line="119" pos:column="96">-&gt;</op:operator><name pos:line="119" pos:column="98">ToElement</name></name><argument_list pos:line="119" pos:column="107">()</argument_list></call><op:operator pos:line="119" pos:column="109">)</op:operator><op:operator pos:line="119" pos:column="110">-&gt;</op:operator><call><name pos:line="119" pos:column="112">Attribute</name><argument_list pos:line="119" pos:column="121">(<argument><expr><name pos:line="119" pos:column="122">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="120" pos:column="57">if <condition pos:line="120" pos:column="60">(<expr><op:operator pos:line="120" pos:column="61">(</op:operator><name pos:line="120" pos:column="62">attribDest</name><op:operator pos:line="120" pos:column="72">)</op:operator> <op:operator pos:line="120" pos:column="74">&amp;&amp;</op:operator> <op:operator pos:line="120" pos:column="77">(</op:operator><op:operator pos:line="120" pos:column="78">!</op:operator><call><name pos:line="120" pos:column="79">strcmp</name><argument_list pos:line="120" pos:column="85">(<argument><expr><name pos:line="120" pos:column="86">attrib</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="94">attribDest</name></expr></argument>)</argument_list></call><op:operator pos:line="120" pos:column="105">)</op:operator></expr>)</condition><then pos:line="120" pos:column="107">
							<block pos:line="121" pos:column="57">{
								<expr_stmt><expr><name pos:line="122" pos:column="65">found</name> <op:operator pos:line="122" pos:column="71">=</op:operator> <lit:literal type="boolean" pos:line="122" pos:column="73">true</lit:literal></expr>;</expr_stmt>
								<break pos:line="123" pos:column="65">break;</break>
							}</block></then></if>
							<expr_stmt><expr><name pos:line="125" pos:column="57">destChildNode</name> <op:operator pos:line="125" pos:column="71">=</op:operator> <call><name><name pos:line="125" pos:column="73">destChildNode</name><op:operator pos:line="125" pos:column="86">-&gt;</op:operator><name pos:line="125" pos:column="88">NextSibling</name></name><argument_list pos:line="125" pos:column="99">(<argument><expr><name pos:line="125" pos:column="100">nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></while>
						<if pos:line="127" pos:column="49">if <condition pos:line="127" pos:column="52">(<expr><name pos:line="127" pos:column="53">remove</name></expr>)</condition><then pos:line="127" pos:column="60">
						<block pos:line="128" pos:column="49">{
							<if pos:line="129" pos:column="57">if <condition pos:line="129" pos:column="60">(<expr><name pos:line="129" pos:column="61">found</name></expr>)</condition><then pos:line="129" pos:column="67"> <expr_stmt><expr><call><name><name pos:line="129" pos:column="68">destNode</name><op:operator pos:line="129" pos:column="76">-&gt;</op:operator><name pos:line="129" pos:column="78">RemoveChild</name></name><argument_list pos:line="129" pos:column="89">(<argument><expr><name pos:line="129" pos:column="90">destChildNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
						}</block></then>
						<else pos:line="131" pos:column="49">else
						<block pos:line="132" pos:column="49">{
							<if pos:line="133" pos:column="57">if <condition pos:line="133" pos:column="60">(<expr><name pos:line="133" pos:column="61">found</name></expr>)</condition><then pos:line="133" pos:column="67">
								<expr_stmt><expr><call><name pos:line="134" pos:column="65">update</name><argument_list pos:line="134" pos:column="71">(<argument><expr><name pos:line="134" pos:column="72">modelChildNode</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="88">srcChildNode</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="102">destChildNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
							<else pos:line="135" pos:column="57">else
								<expr_stmt><expr><call><name><name pos:line="136" pos:column="65">destNode</name><op:operator pos:line="136" pos:column="73">-&gt;</op:operator><name pos:line="136" pos:column="75">InsertEndChild</name></name><argument_list pos:line="136" pos:column="89">(<argument><expr><op:operator pos:line="136" pos:column="90">*</op:operator><name pos:line="136" pos:column="91">srcChildNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
						}</block></else></if>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="139" pos:column="41">srcChildNode</name> <op:operator pos:line="139" pos:column="54">=</op:operator> <call><name><name pos:line="139" pos:column="56">srcChildNode</name><op:operator pos:line="139" pos:column="68">-&gt;</op:operator><name pos:line="139" pos:column="70">NextSibling</name></name><argument_list pos:line="139" pos:column="81">(<argument><expr><name pos:line="139" pos:column="82">nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></while> <comment type="line" pos:line="140" pos:column="35">// while srcChildNode</comment>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="143" pos:column="17">update</name><argument_list pos:line="143" pos:column="23">(<argument><expr><name pos:line="143" pos:column="24">modelChildNode</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="40">srcChildNode</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="54">destChildNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function><empty_stmt pos:line="145" pos:column="2">;</empty_stmt>


<function><type><name pos:line="148" pos:column="1">int</name></type> <name pos:line="148" pos:column="5">main</name><parameter_list pos:line="148" pos:column="9">(<param><decl><type><name pos:line="148" pos:column="10">int</name></type> <name pos:line="148" pos:column="14">argc</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="20">char</name> <type:modifier pos:line="148" pos:column="25">*</type:modifier></type><name><name pos:line="148" pos:column="26">argv</name><index pos:line="148" pos:column="30">[]</index></name></decl></param>)</parameter_list>
<block pos:line="149" pos:column="1">{
	<if pos:line="150" pos:column="9">if <condition pos:line="150" pos:column="12">(<expr><name pos:line="150" pos:column="13">argc</name> <op:operator pos:line="150" pos:column="18">!=</op:operator> <lit:literal type="number" pos:line="150" pos:column="21">4</lit:literal></expr>)</condition><then pos:line="150" pos:column="23"> 
	<block pos:line="151" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="152" pos:column="17">printf</name><argument_list pos:line="152" pos:column="23">(<argument><expr><lit:literal type="string" pos:line="152" pos:column="24">"Syntax : xmlUpdater model.xml src.xml dest.xml"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="153" pos:column="17">return <expr><op:operator pos:line="153" pos:column="24">-</op:operator><lit:literal type="number" pos:line="153" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="156" pos:column="9">char</name> <type:modifier pos:line="156" pos:column="14">*</type:modifier></type><name pos:line="156" pos:column="15">xmlModelPath</name> <init pos:line="156" pos:column="28">= <expr><name><name pos:line="156" pos:column="30">argv</name><index pos:line="156" pos:column="34">[<expr><lit:literal type="number" pos:line="156" pos:column="35">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">char</name> <type:modifier pos:line="157" pos:column="14">*</type:modifier></type><name pos:line="157" pos:column="15">xmlSrcPath</name> <init pos:line="157" pos:column="26">= <expr><name><name pos:line="157" pos:column="28">argv</name><index pos:line="157" pos:column="32">[<expr><lit:literal type="number" pos:line="157" pos:column="33">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">char</name> <type:modifier pos:line="158" pos:column="14">*</type:modifier></type><name pos:line="158" pos:column="15">xmlDestPath</name> <init pos:line="158" pos:column="27">= <expr><name><name pos:line="158" pos:column="29">argv</name><index pos:line="158" pos:column="33">[<expr><lit:literal type="number" pos:line="158" pos:column="34">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="160" pos:column="9">//printf("%s\n", xmlModelPath);</comment>
	<comment type="line" pos:line="161" pos:column="9">//printf("%s\n", xmlSrcPath);</comment>
	<comment type="line" pos:line="162" pos:column="9">//printf("%s\n", xmlDestPath);</comment>

	<decl_stmt><decl><type><name pos:line="164" pos:column="9">TiXmlDocument</name> <type:modifier pos:line="164" pos:column="23">*</type:modifier></type><name pos:line="164" pos:column="24">pXmlModel</name> <init pos:line="164" pos:column="34">= <expr><name pos:line="164" pos:column="36">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="165" pos:column="9">TiXmlDocument</name> <type:modifier pos:line="165" pos:column="23">*</type:modifier></type><name pos:line="165" pos:column="24">pXmlSrc</name> <init pos:line="165" pos:column="32">= <expr><name pos:line="165" pos:column="34">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="166" pos:column="9">TiXmlDocument</name> <type:modifier pos:line="166" pos:column="23">*</type:modifier></type><name pos:line="166" pos:column="24">pXmlDest</name> <init pos:line="166" pos:column="33">= <expr><name pos:line="166" pos:column="35">NULL</name></expr></init></decl>;</decl_stmt>

	<try pos:line="168" pos:column="9">try <block pos:line="168" pos:column="13">{
		<expr_stmt><expr><name pos:line="169" pos:column="17">pXmlModel</name> <op:operator pos:line="169" pos:column="27">=</op:operator> <op:operator pos:line="169" pos:column="29">new</op:operator> <call><name pos:line="169" pos:column="33">TiXmlDocument</name><argument_list pos:line="169" pos:column="46">(<argument><expr><name pos:line="169" pos:column="47">xmlModelPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="170" pos:column="17">bool</name></type> <name pos:line="170" pos:column="22">loadOkay</name> <init pos:line="170" pos:column="31">= <expr><call><name><name pos:line="170" pos:column="33">pXmlModel</name><op:operator pos:line="170" pos:column="42">-&gt;</op:operator><name pos:line="170" pos:column="44">LoadFile</name></name><argument_list pos:line="170" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="171" pos:column="17">if <condition pos:line="171" pos:column="20">(<expr><op:operator pos:line="171" pos:column="21">!</op:operator><name pos:line="171" pos:column="22">loadOkay</name></expr>)</condition><then pos:line="171" pos:column="31"> <throw pos:line="171" pos:column="32">throw <expr><call><name pos:line="171" pos:column="38">int</name><argument_list pos:line="171" pos:column="41">(<argument><expr><name pos:line="171" pos:column="42">MODEL_INVALID</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

		<expr_stmt><expr><name pos:line="173" pos:column="17">pXmlSrc</name> <op:operator pos:line="173" pos:column="25">=</op:operator> <op:operator pos:line="173" pos:column="27">new</op:operator> <call><name pos:line="173" pos:column="31">TiXmlDocument</name><argument_list pos:line="173" pos:column="44">(<argument><expr><name pos:line="173" pos:column="45">xmlSrcPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="174" pos:column="17">loadOkay</name> <op:operator pos:line="174" pos:column="26">=</op:operator> <call><name><name pos:line="174" pos:column="28">pXmlSrc</name><op:operator pos:line="174" pos:column="35">-&gt;</op:operator><name pos:line="174" pos:column="37">LoadFile</name></name><argument_list pos:line="174" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><op:operator pos:line="175" pos:column="21">!</op:operator><name pos:line="175" pos:column="22">loadOkay</name></expr>)</condition><then pos:line="175" pos:column="31"> <throw pos:line="175" pos:column="32">throw <expr><call><name pos:line="175" pos:column="38">int</name><argument_list pos:line="175" pos:column="41">(<argument><expr><name pos:line="175" pos:column="42">SRC_INVALID</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>
		
		<expr_stmt><expr><name pos:line="177" pos:column="17">pXmlDest</name> <op:operator pos:line="177" pos:column="26">=</op:operator> <op:operator pos:line="177" pos:column="28">new</op:operator> <call><name pos:line="177" pos:column="32">TiXmlDocument</name><argument_list pos:line="177" pos:column="45">(<argument><expr><name pos:line="177" pos:column="46">xmlDestPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="178" pos:column="17">loadOkay</name> <op:operator pos:line="178" pos:column="26">=</op:operator> <call><name><name pos:line="178" pos:column="28">pXmlDest</name><op:operator pos:line="178" pos:column="36">-&gt;</op:operator><name pos:line="178" pos:column="38">LoadFile</name></name><argument_list pos:line="178" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="179" pos:column="17">if <condition pos:line="179" pos:column="20">(<expr><op:operator pos:line="179" pos:column="21">!</op:operator><name pos:line="179" pos:column="22">loadOkay</name></expr>)</condition><then pos:line="179" pos:column="31"> <throw pos:line="179" pos:column="32">throw <expr><call><name pos:line="179" pos:column="38">int</name><argument_list pos:line="179" pos:column="41">(<argument><expr><name pos:line="179" pos:column="42">DEST_INVALID</name></expr></argument>)</argument_list></call></expr>;</throw></then></if>

		<decl_stmt><decl><type><name pos:line="181" pos:column="17">TiXmlNode</name> <type:modifier pos:line="181" pos:column="27">*</type:modifier></type><name pos:line="181" pos:column="28">root</name> <init pos:line="181" pos:column="33">= <expr><call><name><name pos:line="181" pos:column="35">pXmlModel</name><op:operator pos:line="181" pos:column="44">-&gt;</op:operator><name pos:line="181" pos:column="46">FirstChild</name></name><argument_list pos:line="181" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="181" pos:column="57">"Node"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="182" pos:column="17">const</specifier> <name pos:line="182" pos:column="23">char</name> <type:modifier pos:line="182" pos:column="28">*</type:modifier></type><name pos:line="182" pos:column="29">nodeRootName</name> <init pos:line="182" pos:column="42">= <expr><op:operator pos:line="182" pos:column="44">(</op:operator><call><name><name pos:line="182" pos:column="45">root</name><op:operator pos:line="182" pos:column="49">-&gt;</op:operator><name pos:line="182" pos:column="51">ToElement</name></name><argument_list pos:line="182" pos:column="60">()</argument_list></call><op:operator pos:line="182" pos:column="62">)</op:operator><op:operator pos:line="182" pos:column="63">-&gt;</op:operator><call><name pos:line="182" pos:column="65">Attribute</name><argument_list pos:line="182" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="75">"nodeName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="183" pos:column="17">if <condition pos:line="183" pos:column="20">(<expr><name pos:line="183" pos:column="21">nodeRootName</name></expr>)</condition><then pos:line="183" pos:column="34">
		<block pos:line="184" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="185" pos:column="25">TiXmlNode</name> <type:modifier pos:line="185" pos:column="35">*</type:modifier></type><name pos:line="185" pos:column="36">srcRoot</name> <init pos:line="185" pos:column="44">= <expr><call><name><name pos:line="185" pos:column="46">pXmlSrc</name><op:operator pos:line="185" pos:column="53">-&gt;</op:operator><name pos:line="185" pos:column="55">FirstChild</name></name><argument_list pos:line="185" pos:column="65">(<argument><expr><name pos:line="185" pos:column="66">nodeRootName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><op:operator pos:line="186" pos:column="29">!</op:operator><name pos:line="186" pos:column="30">srcRoot</name></expr>)</condition><then pos:line="186" pos:column="38"> <throw pos:line="186" pos:column="39">throw <expr><call><name pos:line="186" pos:column="45">int</name><argument_list pos:line="186" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="186" pos:column="49">4</lit:literal></expr></argument>)</argument_list></call></expr>;</throw></then></if>
			<decl_stmt><decl><type><name pos:line="187" pos:column="25">TiXmlNode</name> <type:modifier pos:line="187" pos:column="35">*</type:modifier></type><name pos:line="187" pos:column="36">destRoot</name> <init pos:line="187" pos:column="45">= <expr><call><name><name pos:line="187" pos:column="47">pXmlDest</name><op:operator pos:line="187" pos:column="55">-&gt;</op:operator><name pos:line="187" pos:column="57">FirstChild</name></name><argument_list pos:line="187" pos:column="67">(<argument><expr><name pos:line="187" pos:column="68">nodeRootName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="188" pos:column="25">if <condition pos:line="188" pos:column="28">(<expr><op:operator pos:line="188" pos:column="29">!</op:operator><name pos:line="188" pos:column="30">destRoot</name></expr>)</condition><then pos:line="188" pos:column="39">
			<block pos:line="189" pos:column="25">{
				<throw pos:line="190" pos:column="33">throw <expr><call><name pos:line="190" pos:column="39">int</name><argument_list pos:line="190" pos:column="42">(<argument><expr><name pos:line="190" pos:column="43">DEST_INVALID</name></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></then>
			<else pos:line="192" pos:column="25">else
			<block pos:line="193" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="194" pos:column="33">update</name><argument_list pos:line="194" pos:column="39">(<argument><expr><name pos:line="194" pos:column="40">root</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="46">srcRoot</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="55">destRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block> <catch pos:line="197" pos:column="11">catch <parameter_list pos:line="197" pos:column="17">(<param><decl><type><name pos:line="197" pos:column="18">int</name></type> <name pos:line="197" pos:column="22">errMsg</name></decl></param>)</parameter_list> <block pos:line="197" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="198" pos:column="17">char</name> <type:modifier pos:line="198" pos:column="22">*</type:modifier></type><name pos:line="198" pos:column="23">msg</name></decl>;</decl_stmt>
		<if pos:line="199" pos:column="17">if <condition pos:line="199" pos:column="20">(<expr><name pos:line="199" pos:column="21">errMsg</name> <op:operator pos:line="199" pos:column="28">==</op:operator> <name pos:line="199" pos:column="31">MODEL_INVALID</name></expr>)</condition><then pos:line="199" pos:column="45">
			<expr_stmt><expr><name pos:line="200" pos:column="25">msg</name> <op:operator pos:line="200" pos:column="29">=</op:operator> <lit:literal type="string" pos:line="200" pos:column="31">"Model file is invalidated"</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="201" pos:column="17">if <condition pos:line="201" pos:column="20">(<expr><name pos:line="201" pos:column="21">errMsg</name> <op:operator pos:line="201" pos:column="28">==</op:operator> <name pos:line="201" pos:column="31">SRC_INVALID</name></expr>)</condition><then pos:line="201" pos:column="43">
			<expr_stmt><expr><name pos:line="202" pos:column="25">msg</name> <op:operator pos:line="202" pos:column="29">=</op:operator> <lit:literal type="string" pos:line="202" pos:column="31">"Source file is invalidated"</lit:literal></expr>;</expr_stmt></then></if>
		<if pos:line="203" pos:column="17">if <condition pos:line="203" pos:column="20">(<expr><name pos:line="203" pos:column="21">errMsg</name> <op:operator pos:line="203" pos:column="28">==</op:operator> <name pos:line="203" pos:column="31">DEST_INVALID</name></expr>)</condition><then pos:line="203" pos:column="44">
			<expr_stmt><expr><name pos:line="204" pos:column="25">msg</name> <op:operator pos:line="204" pos:column="29">=</op:operator> <lit:literal type="string" pos:line="204" pos:column="31">"File to update is invalidated"</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="206" pos:column="17">if <condition pos:line="206" pos:column="20">(<expr><name pos:line="206" pos:column="21">pXmlModel</name></expr>)</condition><then pos:line="206" pos:column="31"> <expr_stmt><expr><op:operator pos:line="206" pos:column="32">delete</op:operator> <name pos:line="206" pos:column="39">pXmlModel</name></expr>;</expr_stmt></then></if>
		<if pos:line="207" pos:column="17">if <condition pos:line="207" pos:column="20">(<expr><name pos:line="207" pos:column="21">pXmlSrc</name></expr>)</condition><then pos:line="207" pos:column="29"> <expr_stmt><expr><op:operator pos:line="207" pos:column="30">delete</op:operator> <name pos:line="207" pos:column="37">pXmlSrc</name></expr>;</expr_stmt></then></if>
		<if pos:line="208" pos:column="17">if <condition pos:line="208" pos:column="20">(<expr><name pos:line="208" pos:column="21">pXmlDest</name></expr>)</condition><then pos:line="208" pos:column="30"> <expr_stmt><expr><op:operator pos:line="208" pos:column="31">delete</op:operator> <name pos:line="208" pos:column="38">pXmlDest</name></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><call><name pos:line="210" pos:column="17">printf</name><argument_list pos:line="210" pos:column="23">(<argument><expr><name pos:line="210" pos:column="24">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="211" pos:column="17">return <expr><op:operator pos:line="211" pos:column="24">-</op:operator><lit:literal type="number" pos:line="211" pos:column="25">1</lit:literal></expr>;</return>
	}</block></catch></try>

	<expr_stmt><expr><call><name><name pos:line="214" pos:column="9">pXmlDest</name><op:operator pos:line="214" pos:column="17">-&gt;</op:operator><name pos:line="214" pos:column="19">SaveFile</name></name><argument_list pos:line="214" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><op:operator pos:line="216" pos:column="9">delete</op:operator> <name pos:line="216" pos:column="16">pXmlModel</name></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="217" pos:column="9">delete</op:operator> <name pos:line="217" pos:column="16">pXmlSrc</name></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="218" pos:column="9">delete</op:operator> <name pos:line="218" pos:column="16">pXmlDest</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="219" pos:column="9">printf</name><argument_list pos:line="219" pos:column="15">(<argument><expr><lit:literal type="string" pos:line="219" pos:column="16">"Update successful"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:line="221" pos:column="9">return <expr><lit:literal type="number" pos:line="221" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<comment type="block" pos:line="224" pos:column="1">/*
const char FLAG_SILENT[] = "-silent";

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR lpszCmdLine, int nCmdShow)
//int main(int argc, char *argv[])
{
	bool isSilentMode = isInList(FLAG_SILENT, lpszCmdLine);

 	int	argc=0;
 	LPSTR	argv[10];
 	LPSTR	p, q;

 	argv[argc] = "xmlUpdater.exe";
 	// Parse command line handling quotes.
 	p = lpszCmdLine;
 	while (*p) 
	{
 	    // for each argument
 	    while ((*p) &amp;&amp; (*p == ' '))
 			p++;	// skip over leading spaces
 	    if (*p == '\042') 
		{
 	       p++;		// skip "
 	       q = p;
 	       // scan to end of argument
 	       // doesn't handle embedded quotes
 	       while ((*p) &amp;&amp; (*p != '\042'))
 		    p++;
 	       argv[++argc] = q;
 	       if (*p)
 			*p++ = '\0';
 	    }
 	    else if (*p) 
		{
 	       // delimited by spaces
 	       q = p;
 	       while ((*p) &amp;&amp; (*p != ' '))
 		    p++;
 	       argv[++argc] = q;
 	       if (*p)
 		    *p++ = '\0';
 	    }
 	}
 	argv[++argc] = (LPSTR)NULL;

	if (argc &lt; 4) 
	{
		//printf();
		if (!isSilentMode)
			MessageBox(NULL,  "xmlUpdater model.xml src.xml dest.xml", "Syntax", MB_OK);
		return -1;
	}

	char *xmlModelPath = argv[1];
	char *xmlSrcPath = argv[2];
	char *xmlDestPath = argv[3];

	//printf("%s\n", xmlModelPath);
	//printf("%s\n", xmlSrcPath);
	//printf("%s\n", xmlDestPath);

	TiXmlDocument *pXmlModel = NULL;
	TiXmlDocument *pXmlSrc = NULL;
	TiXmlDocument *pXmlDest = NULL;

	try {
		pXmlModel = new TiXmlDocument(xmlModelPath);
		bool loadOkay = pXmlModel-&gt;LoadFile();
		if (!loadOkay) throw int(MODEL_INVALID);

		pXmlSrc = new TiXmlDocument(xmlSrcPath);
		loadOkay = pXmlSrc-&gt;LoadFile();
		if (!loadOkay) throw int(SRC_INVALID);
		
		pXmlDest = new TiXmlDocument(xmlDestPath);
		loadOkay = pXmlDest-&gt;LoadFile();
		if (!loadOkay) throw int(DEST_INVALID);

		TiXmlNode *root = pXmlModel-&gt;FirstChild("Node");
		const char *nodeRootName = (root-&gt;ToElement())-&gt;Attribute("nodeName");
		if (nodeRootName)
		{
			TiXmlNode *srcRoot = pXmlSrc-&gt;FirstChild(nodeRootName);
			if (!srcRoot) throw int(4);
			TiXmlNode *destRoot = pXmlDest-&gt;FirstChild(nodeRootName);
			if (!destRoot)
			{
				throw int(DEST_INVALID);
			}
			else
			{
				update(root, srcRoot, destRoot);
			}
		}
	} catch (int errMsg) {
		char *msg;
		if (errMsg == MODEL_INVALID)
			msg = "Model file is invalidated";
		if (errMsg == SRC_INVALID)
			msg = "Source file is invalidated";
		if (errMsg == DEST_INVALID)
			msg = "File to update is invalidated";

		if (pXmlModel) delete pXmlModel;
		if (pXmlSrc) delete pXmlSrc;
		if (pXmlDest) delete pXmlDest;

		if (!isSilentMode)
			MessageBox(NULL, msg, "Update Failure", MB_OK);
		return -1;
	}

	pXmlDest-&gt;SaveFile();
	
	delete pXmlModel;
	delete pXmlSrc;
	delete pXmlDest;
	if (!isSilentMode)
		MessageBox(NULL, "Update successful", "Update status", MB_OK);

	return 0;
}
*/</comment>
</unit>
