<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexGui4Cli.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="block" pos:line="3" pos:column="1">/*
This is the Lexer for Gui4Cli, included in SciLexer.dll
- by d. Keletsekis, 2/10/2003

To add to SciLexer.dll:
1. Add the values below to INCLUDE\Scintilla.iface
2. Run the include/HFacer.py script
3. Run the src/lexGen.py script

val SCE_GC_DEFAULT=0
val SCE_GC_COMMENTLINE=1
val SCE_GC_COMMENTBLOCK=2
val SCE_GC_GLOBAL=3
val SCE_GC_EVENT=4
val SCE_GC_ATTRIBUTE=5
val SCE_GC_CONTROL=6
val SCE_GC_COMMAND=7
val SCE_GC_STRING=8
val SCE_GC_OPERATOR=9
*/</comment>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file pos:line="24" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file pos:line="25" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file pos:line="26" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file pos:line="27" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file pos:line="28" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file pos:line="29" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="38" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="39" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="40" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef</cpp:directive> <name pos:line="42" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="43" pos:column="1">using namespace <name pos:line="43" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="46" pos:column="9">debug</name></cpp:macro> <cpp:value pos:line="46" pos:column="15">Platform::DebugPrintf</cpp:value></cpp:define>

<function><type><specifier pos:line="48" pos:column="1">static</specifier> <specifier pos:line="48" pos:column="8">inline</specifier> <name pos:line="48" pos:column="15">bool</name></type> <name pos:line="48" pos:column="20">IsAWordChar</name><parameter_list pos:line="48" pos:column="31">(<param><decl><type><specifier pos:line="48" pos:column="32">const</specifier> <name pos:line="48" pos:column="38">int</name></type> <name pos:line="48" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="46">{
	<return pos:line="49" pos:column="9">return <expr><op:operator pos:line="49" pos:column="16">(</op:operator><name pos:line="49" pos:column="17">ch</name> <op:operator pos:line="49" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="49" pos:column="22">0x80</lit:literal><op:operator pos:line="49" pos:column="26">)</op:operator> <op:operator pos:line="49" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="49" pos:column="31">(</op:operator><call><name pos:line="49" pos:column="32">isalnum</name><argument_list pos:line="49" pos:column="39">(<argument><expr><name pos:line="49" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="49" pos:column="44">||</op:operator> <name pos:line="49" pos:column="47">ch</name> <op:operator pos:line="49" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="53">'.'</lit:literal> <op:operator pos:line="49" pos:column="57">||</op:operator> <name pos:line="49" pos:column="60">ch</name> <op:operator pos:line="49" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="66">'_'</lit:literal> <op:operator pos:line="49" pos:column="70">||</op:operator> <name pos:line="49" pos:column="73">ch</name> <op:operator pos:line="49" pos:column="76">==</op:operator><lit:literal type="char" pos:line="49" pos:column="78">'\\'</lit:literal><op:operator pos:line="49" pos:column="82">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="52" pos:column="1">static</specifier> <specifier pos:line="52" pos:column="8">inline</specifier> <name pos:line="52" pos:column="15">bool</name></type> <name pos:line="52" pos:column="20">IsAWordStart</name><parameter_list pos:line="52" pos:column="32">(<param><decl><type><specifier pos:line="52" pos:column="33">const</specifier> <name pos:line="52" pos:column="39">int</name></type> <name pos:line="52" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="47">{
	<return pos:line="53" pos:column="9">return <expr><op:operator pos:line="53" pos:column="16">(</op:operator><name pos:line="53" pos:column="17">ch</name> <op:operator pos:line="53" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="53" pos:column="22">0x80</lit:literal><op:operator pos:line="53" pos:column="26">)</op:operator> <op:operator pos:line="53" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="53" pos:column="31">(</op:operator><call><name pos:line="53" pos:column="32">isalnum</name><argument_list pos:line="53" pos:column="39">(<argument><expr><name pos:line="53" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="53" pos:column="44">||</op:operator> <name pos:line="53" pos:column="47">ch</name> <op:operator pos:line="53" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="53">'_'</lit:literal> <op:operator pos:line="53" pos:column="57">||</op:operator> <name pos:line="53" pos:column="60">ch</name> <op:operator pos:line="53" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="66">'.'</lit:literal><op:operator pos:line="53" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="56" pos:column="1">inline</specifier> <name pos:line="56" pos:column="8">bool</name></type> <name pos:line="56" pos:column="13">isGCOperator</name><parameter_list pos:line="56" pos:column="25">(<param><decl><type><name pos:line="56" pos:column="26">int</name></type> <name pos:line="56" pos:column="30">ch</name></decl></param>)</parameter_list>
<block pos:line="57" pos:column="1">{	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><call><name pos:line="57" pos:column="13">isalnum</name><argument_list pos:line="57" pos:column="20">(<argument><expr><name pos:line="57" pos:column="21">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="57" pos:column="25">
		<return pos:line="58" pos:column="17">return <expr><lit:literal type="boolean" pos:line="58" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<comment type="line" pos:line="59" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">ch</name> <op:operator pos:line="60" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="19">'*'</lit:literal> <op:operator pos:line="60" pos:column="23">||</op:operator> <name pos:line="60" pos:column="26">ch</name> <op:operator pos:line="60" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="32">'/'</lit:literal> <op:operator pos:line="60" pos:column="36">||</op:operator> <name pos:line="60" pos:column="39">ch</name> <op:operator pos:line="60" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="45">'-'</lit:literal> <op:operator pos:line="60" pos:column="49">||</op:operator> <name pos:line="60" pos:column="52">ch</name> <op:operator pos:line="60" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="58">'+'</lit:literal> <op:operator pos:line="60" pos:column="62">||</op:operator>
		 <name pos:line="61" pos:column="18">ch</name> <op:operator pos:line="61" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="24">'('</lit:literal> <op:operator pos:line="61" pos:column="28">||</op:operator> <name pos:line="61" pos:column="31">ch</name> <op:operator pos:line="61" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="37">')'</lit:literal> <op:operator pos:line="61" pos:column="41">||</op:operator> <name pos:line="61" pos:column="44">ch</name> <op:operator pos:line="61" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="50">'='</lit:literal> <op:operator pos:line="61" pos:column="54">||</op:operator> <name pos:line="61" pos:column="57">ch</name> <op:operator pos:line="61" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="63">'%'</lit:literal> <op:operator pos:line="61" pos:column="67">||</op:operator>
		 <name pos:line="62" pos:column="18">ch</name> <op:operator pos:line="62" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="24">'['</lit:literal> <op:operator pos:line="62" pos:column="28">||</op:operator> <name pos:line="62" pos:column="31">ch</name> <op:operator pos:line="62" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="37">']'</lit:literal> <op:operator pos:line="62" pos:column="41">||</op:operator> <name pos:line="62" pos:column="44">ch</name> <op:operator pos:line="62" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="50">'&lt;'</lit:literal> <op:operator pos:line="62" pos:column="54">||</op:operator> <name pos:line="62" pos:column="57">ch</name> <op:operator pos:line="62" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="63">'&gt;'</lit:literal> <op:operator pos:line="62" pos:column="67">||</op:operator>
		 <name pos:line="63" pos:column="18">ch</name> <op:operator pos:line="63" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="24">','</lit:literal> <op:operator pos:line="63" pos:column="28">||</op:operator> <name pos:line="63" pos:column="31">ch</name> <op:operator pos:line="63" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="37">';'</lit:literal> <op:operator pos:line="63" pos:column="41">||</op:operator> <name pos:line="63" pos:column="44">ch</name> <op:operator pos:line="63" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="63" pos:column="50">':'</lit:literal></expr>)</condition><then pos:line="63" pos:column="54">
		<return pos:line="64" pos:column="17">return <expr><lit:literal type="boolean" pos:line="64" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="65" pos:column="9">return <expr><lit:literal type="boolean" pos:line="65" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<cpp:define pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="68" pos:column="9">isSpace</name><parameter_list pos:line="68" pos:column="16">(<param><type><name pos:line="68" pos:column="17">x</name></type></param>)</parameter_list></cpp:macro>		<cpp:value pos:line="68" pos:column="33">((x)==' ' || (x)=='\t')</cpp:value></cpp:define>
<cpp:define pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="69" pos:column="9">isNL</name><parameter_list pos:line="69" pos:column="13">(<param><type><name pos:line="69" pos:column="14">x</name></type></param>)</parameter_list></cpp:macro>			<cpp:value pos:line="69" pos:column="33">((x)=='\n' || (x)=='\r')</cpp:value></cpp:define>
<cpp:define pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="70" pos:column="9">isSpaceOrNL</name><parameter_list pos:line="70" pos:column="20">(<param><type><name pos:line="70" pos:column="21">x</name></type></param>)</parameter_list></cpp:macro>  <cpp:value pos:line="70" pos:column="25">(isSpace(x) || isNL(x))</cpp:value></cpp:define>
<cpp:define pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="71" pos:column="9">BUFFSIZE</name></cpp:macro> <cpp:value pos:line="71" pos:column="18">500</cpp:value></cpp:define>
<cpp:define pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="72" pos:column="9">isFoldPoint</name><parameter_list pos:line="72" pos:column="20">(<param><type><name pos:line="72" pos:column="21">x</name></type></param>)</parameter_list></cpp:macro>  <cpp:value pos:line="72" pos:column="25">((styler.LevelAt(x) &amp; SC_FOLDLEVELNUMBERMASK) == 1024)</cpp:value></cpp:define>

<function><type><specifier pos:line="74" pos:column="1">static</specifier> <name pos:line="74" pos:column="8">void</name></type> <name pos:line="74" pos:column="13">colorFirstWord</name><parameter_list pos:line="74" pos:column="27">(<param><decl><type><name pos:line="74" pos:column="28">WordList</name> <type:modifier pos:line="74" pos:column="37">*</type:modifier></type><name><name pos:line="74" pos:column="38">keywordlists</name><index pos:line="74" pos:column="50">[]</index></name></decl></param>, <param><decl><type><name pos:line="74" pos:column="54">Accessor</name> <type:modifier pos:line="74" pos:column="63">&amp;</type:modifier></type><name pos:line="74" pos:column="64">styler</name></decl></param>,
									<param><decl><type><name pos:line="75" pos:column="73">StyleContext</name> <type:modifier pos:line="75" pos:column="86">*</type:modifier></type><name pos:line="75" pos:column="87">sc</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="91">char</name> <type:modifier pos:line="75" pos:column="96">*</type:modifier></type><name pos:line="75" pos:column="97">buff</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="103">int</name></type> <name pos:line="75" pos:column="107">length</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="115">int</name></type></decl></param>)</parameter_list>
<block pos:line="76" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">int</name></type> <name pos:line="77" pos:column="13">c</name> <init pos:line="77" pos:column="15">= <expr><lit:literal type="number" pos:line="77" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="78" pos:column="9">while <condition pos:line="78" pos:column="15">(<expr><call><name><name pos:line="78" pos:column="16">sc</name><op:operator pos:line="78" pos:column="18">-&gt;</op:operator><name pos:line="78" pos:column="20">More</name></name><argument_list pos:line="78" pos:column="24">()</argument_list></call> <op:operator pos:line="78" pos:column="27">&amp;&amp;</op:operator> <call><name pos:line="78" pos:column="30">isSpaceOrNL</name><argument_list pos:line="78" pos:column="41">(<argument><expr><name><name pos:line="78" pos:column="42">sc</name><op:operator pos:line="78" pos:column="44">-&gt;</op:operator><name pos:line="78" pos:column="46">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block pos:line="79" pos:column="9">{	<expr_stmt><expr><call><name><name pos:line="79" pos:column="17">sc</name><op:operator pos:line="79" pos:column="19">-&gt;</op:operator><name pos:line="79" pos:column="21">Forward</name></name><argument_list pos:line="79" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name><name pos:line="81" pos:column="9">styler</name><op:operator pos:line="81" pos:column="15">.</op:operator><name pos:line="81" pos:column="16">ColourTo</name></name><argument_list pos:line="81" pos:column="24">(<argument><expr><name><name pos:line="81" pos:column="25">sc</name><op:operator pos:line="81" pos:column="27">-&gt;</op:operator><name pos:line="81" pos:column="29">currentPos</name></name> <op:operator pos:line="81" pos:column="40">-</op:operator> <lit:literal type="number" pos:line="81" pos:column="42">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="45">sc</name><op:operator pos:line="81" pos:column="47">-&gt;</op:operator><name pos:line="81" pos:column="49">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><op:operator pos:line="83" pos:column="13">!</op:operator><call><name pos:line="83" pos:column="14">IsAWordChar</name><argument_list pos:line="83" pos:column="25">(<argument><expr><name><name pos:line="83" pos:column="26">sc</name><op:operator pos:line="83" pos:column="28">-&gt;</op:operator><name pos:line="83" pos:column="30">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="83" pos:column="34"> <comment type="line" pos:line="83" pos:column="35">// comment, marker, etc..</comment>
		<return pos:line="84" pos:column="17">return;</return></then></if>

	<while pos:line="86" pos:column="9">while <condition pos:line="86" pos:column="15">(<expr><call><name><name pos:line="86" pos:column="16">sc</name><op:operator pos:line="86" pos:column="18">-&gt;</op:operator><name pos:line="86" pos:column="20">More</name></name><argument_list pos:line="86" pos:column="24">()</argument_list></call> <op:operator pos:line="86" pos:column="27">&amp;&amp;</op:operator> <op:operator pos:line="86" pos:column="30">!</op:operator><call><name pos:line="86" pos:column="31">isSpaceOrNL</name><argument_list pos:line="86" pos:column="42">(<argument><expr><name><name pos:line="86" pos:column="43">sc</name><op:operator pos:line="86" pos:column="45">-&gt;</op:operator><name pos:line="86" pos:column="47">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="86" pos:column="54">(</op:operator><name pos:line="86" pos:column="55">c</name> <op:operator pos:line="86" pos:column="57">&lt;</op:operator> <name pos:line="86" pos:column="59">length</name><op:operator pos:line="86" pos:column="65">-</op:operator><lit:literal type="number" pos:line="86" pos:column="66">1</lit:literal><op:operator pos:line="86" pos:column="67">)</op:operator> <op:operator pos:line="86" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="86" pos:column="72">!</op:operator><call><name pos:line="86" pos:column="73">isGCOperator</name><argument_list pos:line="86" pos:column="85">(<argument><expr><name><name pos:line="86" pos:column="86">sc</name><op:operator pos:line="86" pos:column="88">-&gt;</op:operator><name pos:line="86" pos:column="90">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block pos:line="87" pos:column="9">{	<expr_stmt><expr><name><name pos:line="87" pos:column="17">buff</name><index pos:line="87" pos:column="21">[<expr><name pos:line="87" pos:column="22">c</name></expr>]</index></name> <op:operator pos:line="87" pos:column="25">=</op:operator> <call><name><name pos:line="87" pos:column="27">static_cast</name><argument_list pos:line="87" pos:column="38">&lt;<argument><expr><name pos:line="87" pos:column="39">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="87" pos:column="44">(<argument><expr><name><name pos:line="87" pos:column="45">sc</name><op:operator pos:line="87" pos:column="47">-&gt;</op:operator><name pos:line="87" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="88" pos:column="17">++</op:operator><name pos:line="88" pos:column="19">c</name></expr>;</expr_stmt> <expr_stmt><expr><call><name><name pos:line="88" pos:column="22">sc</name><op:operator pos:line="88" pos:column="24">-&gt;</op:operator><name pos:line="88" pos:column="26">Forward</name></name><argument_list pos:line="88" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="90" pos:column="9">buff</name><index pos:line="90" pos:column="13">[<expr><name pos:line="90" pos:column="14">c</name></expr>]</index></name> <op:operator pos:line="90" pos:column="17">=</op:operator> <lit:literal type="char" pos:line="90" pos:column="19">'\0'</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="91" pos:column="9">char</name> <type:modifier pos:line="91" pos:column="14">*</type:modifier></type><name pos:line="91" pos:column="15">p</name> <init pos:line="91" pos:column="17">= <expr><name pos:line="91" pos:column="19">buff</name></expr></init></decl>;</decl_stmt>
	<while pos:line="92" pos:column="9">while <condition pos:line="92" pos:column="15">(<expr><op:operator pos:line="92" pos:column="16">*</op:operator><name pos:line="92" pos:column="17">p</name></expr>)</condition>	<comment type="line" pos:line="92" pos:column="25">// capitalize..</comment>
	<block pos:line="93" pos:column="9">{	<if pos:line="93" pos:column="17">if <condition pos:line="93" pos:column="20">(<expr><call><name pos:line="93" pos:column="21">islower</name><argument_list pos:line="93" pos:column="28">(<argument><expr><op:operator pos:line="93" pos:column="29">*</op:operator><name pos:line="93" pos:column="30">p</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="93" pos:column="33"> <expr_stmt><expr><op:operator pos:line="93" pos:column="34">*</op:operator><name pos:line="93" pos:column="35">p</name> <op:operator pos:line="93" pos:column="37">=</op:operator> <call><name><name pos:line="93" pos:column="39">static_cast</name><argument_list pos:line="93" pos:column="50">&lt;<argument><expr><name pos:line="93" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="93" pos:column="56">(<argument><expr><call><name pos:line="93" pos:column="57">toupper</name><argument_list pos:line="93" pos:column="64">(<argument><expr><op:operator pos:line="93" pos:column="65">*</op:operator><name pos:line="93" pos:column="66">p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><op:operator pos:line="94" pos:column="17">++</op:operator><name pos:line="94" pos:column="19">p</name></expr>;</expr_stmt>
	}</block></while>

	<decl_stmt><decl><type><name pos:line="97" pos:column="9">WordList</name> <type:modifier pos:line="97" pos:column="18">&amp;</type:modifier></type><name pos:line="97" pos:column="19">kGlobal</name>		<init pos:line="97" pos:column="41">= <expr><op:operator pos:line="97" pos:column="43">*</op:operator><name><name pos:line="97" pos:column="44">keywordlists</name><index pos:line="97" pos:column="56">[<expr><lit:literal type="number" pos:line="97" pos:column="57">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="97" pos:column="65">// keyword lists set by the user</comment>
	<decl_stmt><decl><type><name pos:line="98" pos:column="9">WordList</name> <type:modifier pos:line="98" pos:column="18">&amp;</type:modifier></type><name pos:line="98" pos:column="19">kEvent</name>		<init pos:line="98" pos:column="41">= <expr><op:operator pos:line="98" pos:column="43">*</op:operator><name><name pos:line="98" pos:column="44">keywordlists</name><index pos:line="98" pos:column="56">[<expr><lit:literal type="number" pos:line="98" pos:column="57">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="99" pos:column="9">WordList</name> <type:modifier pos:line="99" pos:column="18">&amp;</type:modifier></type><name pos:line="99" pos:column="19">kAttribute</name>	<init pos:line="99" pos:column="33">= <expr><op:operator pos:line="99" pos:column="35">*</op:operator><name><name pos:line="99" pos:column="36">keywordlists</name><index pos:line="99" pos:column="48">[<expr><lit:literal type="number" pos:line="99" pos:column="49">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="100" pos:column="9">WordList</name> <type:modifier pos:line="100" pos:column="18">&amp;</type:modifier></type><name pos:line="100" pos:column="19">kControl</name>	<init pos:line="100" pos:column="33">= <expr><op:operator pos:line="100" pos:column="35">*</op:operator><name><name pos:line="100" pos:column="36">keywordlists</name><index pos:line="100" pos:column="48">[<expr><lit:literal type="number" pos:line="100" pos:column="49">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="101" pos:column="9">WordList</name> <type:modifier pos:line="101" pos:column="18">&amp;</type:modifier></type><name pos:line="101" pos:column="19">kCommand</name>	<init pos:line="101" pos:column="33">= <expr><op:operator pos:line="101" pos:column="35">*</op:operator><name><name pos:line="101" pos:column="36">keywordlists</name><index pos:line="101" pos:column="48">[<expr><lit:literal type="number" pos:line="101" pos:column="49">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="103" pos:column="9">int</name></type> <name pos:line="103" pos:column="13">state</name> <init pos:line="103" pos:column="19">= <expr><lit:literal type="number" pos:line="103" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="104" pos:column="9">// int level = styler.LevelAt(line) &amp; SC_FOLDLEVELNUMBERMASK;</comment>
	<comment type="line" pos:line="105" pos:column="9">// debug ("line = %d, level = %d", line, level);</comment>

	<if pos:line="107" pos:column="9">if	     <condition pos:line="107" pos:column="22">(<expr><call><name><name pos:line="107" pos:column="23">kGlobal</name><op:operator pos:line="107" pos:column="30">.</op:operator><name pos:line="107" pos:column="31">InList</name></name><argument_list pos:line="107" pos:column="37">(<argument><expr><name pos:line="107" pos:column="38">buff</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="107" pos:column="44">		<expr_stmt><expr><name pos:line="107" pos:column="57">state</name> <op:operator pos:line="107" pos:column="63">=</op:operator> <name pos:line="107" pos:column="65">SCE_GC_GLOBAL</name></expr>;</expr_stmt></then>
	<else pos:line="108" pos:column="9">else <if pos:line="108" pos:column="14">if <condition pos:line="108" pos:column="17">(<expr><call><name><name pos:line="108" pos:column="18">kAttribute</name><op:operator pos:line="108" pos:column="28">.</op:operator><name pos:line="108" pos:column="29">InList</name></name><argument_list pos:line="108" pos:column="35">(<argument><expr><name pos:line="108" pos:column="36">buff</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="42">	<expr_stmt><expr><name pos:line="108" pos:column="49">state</name> <op:operator pos:line="108" pos:column="55">=</op:operator> <name pos:line="108" pos:column="57">SCE_GC_ATTRIBUTE</name></expr>;</expr_stmt></then>
	<else pos:line="109" pos:column="9">else <if pos:line="109" pos:column="14">if <condition pos:line="109" pos:column="17">(<expr><call><name><name pos:line="109" pos:column="18">kControl</name><op:operator pos:line="109" pos:column="26">.</op:operator><name pos:line="109" pos:column="27">InList</name></name><argument_list pos:line="109" pos:column="33">(<argument><expr><name pos:line="109" pos:column="34">buff</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="109" pos:column="40">		<expr_stmt><expr><name pos:line="109" pos:column="49">state</name> <op:operator pos:line="109" pos:column="55">=</op:operator> <name pos:line="109" pos:column="57">SCE_GC_CONTROL</name></expr>;</expr_stmt></then>
	<else pos:line="110" pos:column="9">else <if pos:line="110" pos:column="14">if <condition pos:line="110" pos:column="17">(<expr><call><name><name pos:line="110" pos:column="18">kCommand</name><op:operator pos:line="110" pos:column="26">.</op:operator><name pos:line="110" pos:column="27">InList</name></name><argument_list pos:line="110" pos:column="33">(<argument><expr><name pos:line="110" pos:column="34">buff</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="40">		<expr_stmt><expr><name pos:line="110" pos:column="49">state</name> <op:operator pos:line="110" pos:column="55">=</op:operator> <name pos:line="110" pos:column="57">SCE_GC_COMMAND</name></expr>;</expr_stmt></then>
	<else pos:line="111" pos:column="9">else <if pos:line="111" pos:column="14">if <condition pos:line="111" pos:column="17">(<expr><call><name><name pos:line="111" pos:column="18">kEvent</name><op:operator pos:line="111" pos:column="24">.</op:operator><name pos:line="111" pos:column="25">InList</name></name><argument_list pos:line="111" pos:column="31">(<argument><expr><name pos:line="111" pos:column="32">buff</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="111" pos:column="38">			<expr_stmt><expr><name pos:line="111" pos:column="57">state</name> <op:operator pos:line="111" pos:column="63">=</op:operator> <name pos:line="111" pos:column="65">SCE_GC_EVENT</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if>

	<if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><name pos:line="113" pos:column="13">state</name></expr>)</condition><then pos:line="113" pos:column="19">
	<block pos:line="114" pos:column="9">{	<expr_stmt><expr><call><name><name pos:line="114" pos:column="17">sc</name><op:operator pos:line="114" pos:column="19">-&gt;</op:operator><name pos:line="114" pos:column="21">ChangeState</name></name><argument_list pos:line="114" pos:column="32">(<argument><expr><name pos:line="114" pos:column="33">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="115" pos:column="17">styler</name><op:operator pos:line="115" pos:column="23">.</op:operator><name pos:line="115" pos:column="24">ColourTo</name></name><argument_list pos:line="115" pos:column="32">(<argument><expr><name><name pos:line="115" pos:column="33">sc</name><op:operator pos:line="115" pos:column="35">-&gt;</op:operator><name pos:line="115" pos:column="37">currentPos</name></name> <op:operator pos:line="115" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="115" pos:column="50">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="53">sc</name><op:operator pos:line="115" pos:column="55">-&gt;</op:operator><name pos:line="115" pos:column="57">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="116" pos:column="17">sc</name><op:operator pos:line="116" pos:column="19">-&gt;</op:operator><name pos:line="116" pos:column="21">ChangeState</name></name><argument_list pos:line="116" pos:column="32">(<argument><expr><name pos:line="116" pos:column="33">SCE_GC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="118" pos:column="9">else
	<block pos:line="119" pos:column="9">{	<expr_stmt><expr><call><name><name pos:line="119" pos:column="17">sc</name><op:operator pos:line="119" pos:column="19">-&gt;</op:operator><name pos:line="119" pos:column="21">ChangeState</name></name><argument_list pos:line="119" pos:column="32">(<argument><expr><name pos:line="119" pos:column="33">SCE_GC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="120" pos:column="17">styler</name><op:operator pos:line="120" pos:column="23">.</op:operator><name pos:line="120" pos:column="24">ColourTo</name></name><argument_list pos:line="120" pos:column="32">(<argument><expr><name><name pos:line="120" pos:column="33">sc</name><op:operator pos:line="120" pos:column="35">-&gt;</op:operator><name pos:line="120" pos:column="37">currentPos</name></name> <op:operator pos:line="120" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="120" pos:column="50">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="53">sc</name><op:operator pos:line="120" pos:column="55">-&gt;</op:operator><name pos:line="120" pos:column="57">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="124" pos:column="1">// Main colorizing function called by Scintilla</comment>
<function><type><specifier pos:line="125" pos:column="1">static</specifier> <name pos:line="125" pos:column="8">void</name></type>
<name pos:line="126" pos:column="1">ColouriseGui4CliDoc</name><parameter_list pos:line="126" pos:column="20">(<param><decl><type><name pos:line="126" pos:column="21">unsigned</name> <name pos:line="126" pos:column="30">int</name></type> <name pos:line="126" pos:column="34">startPos</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="44">int</name></type> <name pos:line="126" pos:column="48">length</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="56">int</name></type> <name pos:line="126" pos:column="60">initStyle</name></decl></param>,
                    <param><decl><type><name pos:line="127" pos:column="21">WordList</name> <type:modifier pos:line="127" pos:column="30">*</type:modifier></type><name><name pos:line="127" pos:column="31">keywordlists</name><index pos:line="127" pos:column="43">[]</index></name></decl></param>, <param><decl><type><name pos:line="127" pos:column="47">Accessor</name> <type:modifier pos:line="127" pos:column="56">&amp;</type:modifier></type><name pos:line="127" pos:column="57">styler</name></decl></param>)</parameter_list>
<block pos:line="128" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="129" pos:column="9">styler</name><op:operator pos:line="129" pos:column="15">.</op:operator><name pos:line="129" pos:column="16">StartAt</name></name><argument_list pos:line="129" pos:column="23">(<argument><expr><name pos:line="129" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="131" pos:column="9">int</name></type> <name pos:line="131" pos:column="13">quotestart</name> <init pos:line="131" pos:column="24">= <expr><lit:literal type="number" pos:line="131" pos:column="26">0</lit:literal></expr></init><op:operator pos:line="131" pos:column="27">,</op:operator> <name pos:line="131" pos:column="29">oldstate</name></decl><op:operator pos:line="131" pos:column="37">,</op:operator> <decl><type ref="prev"/><name pos:line="131" pos:column="39">currentline</name> <init pos:line="131" pos:column="51">= <expr><call><name><name pos:line="131" pos:column="53">styler</name><op:operator pos:line="131" pos:column="59">.</op:operator><name pos:line="131" pos:column="60">GetLine</name></name><argument_list pos:line="131" pos:column="67">(<argument><expr><name pos:line="131" pos:column="68">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="132" pos:column="9">styler</name><op:operator pos:line="132" pos:column="15">.</op:operator><name pos:line="132" pos:column="16">StartSegment</name></name><argument_list pos:line="132" pos:column="28">(<argument><expr><name pos:line="132" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="133" pos:column="9">bool</name></type> <name pos:line="133" pos:column="14">noforward</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">char</name></type> <name><name pos:line="134" pos:column="14">buff</name><index pos:line="134" pos:column="18">[<expr><name pos:line="134" pos:column="19">BUFFSIZE</name><op:operator pos:line="134" pos:column="27">+</op:operator><lit:literal type="number" pos:line="134" pos:column="28">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line" pos:line="134" pos:column="33">// buffer for command name</comment>

	<function_decl><type><name pos:line="136" pos:column="9">StyleContext</name></type> <name pos:line="136" pos:column="22">sc</name><parameter_list pos:line="136" pos:column="24">(<param><decl><type><name pos:line="136" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="136" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="136" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="136" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<expr_stmt><expr><name><name pos:line="137" pos:column="9">buff</name><index pos:line="137" pos:column="13">[<expr><lit:literal type="number" pos:line="137" pos:column="14">0</lit:literal></expr>]</index></name> <op:operator pos:line="137" pos:column="17">=</op:operator> <lit:literal type="char" pos:line="137" pos:column="19">'\0'</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="137" pos:column="25">// cbuff = 0;</comment>

	<if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><name><name pos:line="139" pos:column="13">sc</name><op:operator pos:line="139" pos:column="15">.</op:operator><name pos:line="139" pos:column="16">state</name></name> <op:operator pos:line="139" pos:column="22">!=</op:operator> <name pos:line="139" pos:column="25">SCE_GC_COMMENTBLOCK</name></expr>)</condition><then pos:line="139" pos:column="45"> <comment type="line" pos:line="139" pos:column="46">// colorize 1st word..</comment>
		<expr_stmt><expr><call><name pos:line="140" pos:column="17">colorFirstWord</name><argument_list pos:line="140" pos:column="31">(<argument><expr><name pos:line="140" pos:column="32">keywordlists</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="46">styler</name></expr></argument>, <argument><expr><op:operator pos:line="140" pos:column="54">&amp;</op:operator><name pos:line="140" pos:column="55">sc</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="59">buff</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="65">BUFFSIZE</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="75">currentline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<while pos:line="142" pos:column="9">while <condition pos:line="142" pos:column="15">(<expr><call><name><name pos:line="142" pos:column="16">sc</name><op:operator pos:line="142" pos:column="18">.</op:operator><name pos:line="142" pos:column="19">More</name></name><argument_list pos:line="142" pos:column="23">()</argument_list></call></expr>)</condition>
	<block pos:line="143" pos:column="9">{	<expr_stmt><expr><name pos:line="143" pos:column="17">noforward</name> <op:operator pos:line="143" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="143" pos:column="29">0</lit:literal></expr>;</expr_stmt>

		<switch pos:line="145" pos:column="17">switch <condition pos:line="145" pos:column="24">(<expr><name><name pos:line="145" pos:column="25">sc</name><op:operator pos:line="145" pos:column="27">.</op:operator><name pos:line="145" pos:column="28">ch</name></name></expr>)</condition>
		<block pos:line="146" pos:column="17">{
			<case pos:line="147" pos:column="25">case <expr><lit:literal type="char" pos:line="147" pos:column="30">'/'</lit:literal></expr>:
				<if pos:line="148" pos:column="33">if <condition pos:line="148" pos:column="36">(<expr><name><name pos:line="148" pos:column="37">sc</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">state</name></name> <op:operator pos:line="148" pos:column="46">==</op:operator> <name pos:line="148" pos:column="49">SCE_GC_COMMENTBLOCK</name> <op:operator pos:line="148" pos:column="69">||</op:operator> <name><name pos:line="148" pos:column="72">sc</name><op:operator pos:line="148" pos:column="74">.</op:operator><name pos:line="148" pos:column="75">state</name></name> <op:operator pos:line="148" pos:column="81">==</op:operator> <name pos:line="148" pos:column="84">SCE_GC_STRING</name></expr>)</condition><then pos:line="148" pos:column="98">
					<break pos:line="149" pos:column="41">break;</break></then></if>
				<if pos:line="150" pos:column="33">if <condition pos:line="150" pos:column="36">(<expr><name><name pos:line="150" pos:column="37">sc</name><op:operator pos:line="150" pos:column="39">.</op:operator><name pos:line="150" pos:column="40">chNext</name></name> <op:operator pos:line="150" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="150" pos:column="50">'/'</lit:literal></expr>)</condition><then pos:line="150" pos:column="54">	<comment type="line" pos:line="150" pos:column="57">// line comment</comment>
				<block pos:line="151" pos:column="33">{	<expr_stmt><expr><call><name><name pos:line="151" pos:column="41">sc</name><op:operator pos:line="151" pos:column="43">.</op:operator><name pos:line="151" pos:column="44">SetState</name></name> <argument_list pos:line="151" pos:column="53">(<argument><expr><name pos:line="151" pos:column="54">SCE_GC_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="152" pos:column="41">sc</name><op:operator pos:line="152" pos:column="43">.</op:operator><name pos:line="152" pos:column="44">Forward</name></name><argument_list pos:line="152" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="153" pos:column="41">styler</name><op:operator pos:line="153" pos:column="47">.</op:operator><name pos:line="153" pos:column="48">ColourTo</name></name><argument_list pos:line="153" pos:column="56">(<argument><expr><name><name pos:line="153" pos:column="57">sc</name><op:operator pos:line="153" pos:column="59">.</op:operator><name pos:line="153" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="72">sc</name><op:operator pos:line="153" pos:column="74">.</op:operator><name pos:line="153" pos:column="75">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="155" pos:column="33">else <if pos:line="155" pos:column="38">if <condition pos:line="155" pos:column="41">(<expr><name><name pos:line="155" pos:column="42">sc</name><op:operator pos:line="155" pos:column="44">.</op:operator><name pos:line="155" pos:column="45">chNext</name></name> <op:operator pos:line="155" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="155" pos:column="55">'*'</lit:literal></expr>)</condition><then pos:line="155" pos:column="59">	<comment type="line" pos:line="155" pos:column="65">// block comment</comment>
				<block pos:line="156" pos:column="33">{	<expr_stmt><expr><call><name><name pos:line="156" pos:column="41">sc</name><op:operator pos:line="156" pos:column="43">.</op:operator><name pos:line="156" pos:column="44">SetState</name></name><argument_list pos:line="156" pos:column="52">(<argument><expr><name pos:line="156" pos:column="53">SCE_GC_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="157" pos:column="41">sc</name><op:operator pos:line="157" pos:column="43">.</op:operator><name pos:line="157" pos:column="44">Forward</name></name><argument_list pos:line="157" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="158" pos:column="41">styler</name><op:operator pos:line="158" pos:column="47">.</op:operator><name pos:line="158" pos:column="48">ColourTo</name></name><argument_list pos:line="158" pos:column="56">(<argument><expr><name><name pos:line="158" pos:column="57">sc</name><op:operator pos:line="158" pos:column="59">.</op:operator><name pos:line="158" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="72">sc</name><op:operator pos:line="158" pos:column="74">.</op:operator><name pos:line="158" pos:column="75">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="160" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="161" pos:column="41">styler</name><op:operator pos:line="161" pos:column="47">.</op:operator><name pos:line="161" pos:column="48">ColourTo</name></name><argument_list pos:line="161" pos:column="56">(<argument><expr><name><name pos:line="161" pos:column="57">sc</name><op:operator pos:line="161" pos:column="59">.</op:operator><name pos:line="161" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="72">sc</name><op:operator pos:line="161" pos:column="74">.</op:operator><name pos:line="161" pos:column="75">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
				<break pos:line="162" pos:column="33">break;</break>

			</case><case pos:line="164" pos:column="25">case <expr><lit:literal type="char" pos:line="164" pos:column="30">'*'</lit:literal></expr>:	<comment type="line" pos:line="164" pos:column="41">// end of comment block, or operator..</comment>
				<if pos:line="165" pos:column="33">if <condition pos:line="165" pos:column="36">(<expr><name><name pos:line="165" pos:column="37">sc</name><op:operator pos:line="165" pos:column="39">.</op:operator><name pos:line="165" pos:column="40">state</name></name> <op:operator pos:line="165" pos:column="46">==</op:operator> <name pos:line="165" pos:column="49">SCE_GC_STRING</name></expr>)</condition><then pos:line="165" pos:column="63">
					<break pos:line="166" pos:column="41">break;</break></then></if>
				<if pos:line="167" pos:column="33">if <condition pos:line="167" pos:column="36">(<expr><name><name pos:line="167" pos:column="37">sc</name><op:operator pos:line="167" pos:column="39">.</op:operator><name pos:line="167" pos:column="40">state</name></name> <op:operator pos:line="167" pos:column="46">==</op:operator> <name pos:line="167" pos:column="49">SCE_GC_COMMENTBLOCK</name> <op:operator pos:line="167" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="167" pos:column="72">sc</name><op:operator pos:line="167" pos:column="74">.</op:operator><name pos:line="167" pos:column="75">chNext</name></name> <op:operator pos:line="167" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="167" pos:column="85">'/'</lit:literal></expr>)</condition><then pos:line="167" pos:column="89">
				<block pos:line="168" pos:column="33">{	<expr_stmt><expr><call><name><name pos:line="168" pos:column="41">sc</name><op:operator pos:line="168" pos:column="43">.</op:operator><name pos:line="168" pos:column="44">Forward</name></name><argument_list pos:line="168" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="169" pos:column="41">styler</name><op:operator pos:line="169" pos:column="47">.</op:operator><name pos:line="169" pos:column="48">ColourTo</name></name><argument_list pos:line="169" pos:column="56">(<argument><expr><name><name pos:line="169" pos:column="57">sc</name><op:operator pos:line="169" pos:column="59">.</op:operator><name pos:line="169" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name><name pos:line="169" pos:column="72">sc</name><op:operator pos:line="169" pos:column="74">.</op:operator><name pos:line="169" pos:column="75">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="170" pos:column="41">sc</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">ChangeState</name></name> <argument_list pos:line="170" pos:column="56">(<argument><expr><name pos:line="170" pos:column="57">SCE_GC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="172" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="173" pos:column="41">styler</name><op:operator pos:line="173" pos:column="47">.</op:operator><name pos:line="173" pos:column="48">ColourTo</name></name><argument_list pos:line="173" pos:column="56">(<argument><expr><name><name pos:line="173" pos:column="57">sc</name><op:operator pos:line="173" pos:column="59">.</op:operator><name pos:line="173" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="72">sc</name><op:operator pos:line="173" pos:column="74">.</op:operator><name pos:line="173" pos:column="75">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				<break pos:line="174" pos:column="33">break;</break>

			</case><case pos:line="176" pos:column="25">case <expr><lit:literal type="char" pos:line="176" pos:column="30">'\''</lit:literal></expr>:	</case><case pos:line="176" pos:column="41">case <expr><lit:literal type="char" pos:line="176" pos:column="46">'\"'</lit:literal></expr>: <comment type="line" pos:line="176" pos:column="52">// strings..</comment>
				<if pos:line="177" pos:column="33">if <condition pos:line="177" pos:column="36">(<expr><name><name pos:line="177" pos:column="37">sc</name><op:operator pos:line="177" pos:column="39">.</op:operator><name pos:line="177" pos:column="40">state</name></name> <op:operator pos:line="177" pos:column="46">==</op:operator> <name pos:line="177" pos:column="49">SCE_GC_COMMENTBLOCK</name> <op:operator pos:line="177" pos:column="69">||</op:operator> <name><name pos:line="177" pos:column="72">sc</name><op:operator pos:line="177" pos:column="74">.</op:operator><name pos:line="177" pos:column="75">state</name></name> <op:operator pos:line="177" pos:column="81">==</op:operator> <name pos:line="177" pos:column="84">SCE_GC_COMMENTLINE</name></expr>)</condition><then pos:line="177" pos:column="103">
					<break pos:line="178" pos:column="41">break;</break></then></if>
				<if pos:line="179" pos:column="33">if <condition pos:line="179" pos:column="36">(<expr><name><name pos:line="179" pos:column="37">sc</name><op:operator pos:line="179" pos:column="39">.</op:operator><name pos:line="179" pos:column="40">state</name></name> <op:operator pos:line="179" pos:column="46">==</op:operator> <name pos:line="179" pos:column="49">SCE_GC_STRING</name></expr>)</condition><then pos:line="179" pos:column="63">
				<block pos:line="180" pos:column="33">{	<if pos:line="180" pos:column="41">if <condition pos:line="180" pos:column="44">(<expr><name><name pos:line="180" pos:column="45">sc</name><op:operator pos:line="180" pos:column="47">.</op:operator><name pos:line="180" pos:column="48">ch</name></name> <op:operator pos:line="180" pos:column="51">==</op:operator> <name pos:line="180" pos:column="54">quotestart</name></expr>)</condition><then pos:line="180" pos:column="65">	<comment type="line" pos:line="180" pos:column="73">// match same quote char..</comment>
					<block pos:line="181" pos:column="41">{	<expr_stmt><expr><call><name><name pos:line="181" pos:column="49">styler</name><op:operator pos:line="181" pos:column="55">.</op:operator><name pos:line="181" pos:column="56">ColourTo</name></name><argument_list pos:line="181" pos:column="64">(<argument><expr><name><name pos:line="181" pos:column="65">sc</name><op:operator pos:line="181" pos:column="67">.</op:operator><name pos:line="181" pos:column="68">currentPos</name></name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="80">sc</name><op:operator pos:line="181" pos:column="82">.</op:operator><name pos:line="181" pos:column="83">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="182" pos:column="49">sc</name><op:operator pos:line="182" pos:column="51">.</op:operator><name pos:line="182" pos:column="52">ChangeState</name></name><argument_list pos:line="182" pos:column="63">(<argument><expr><name pos:line="182" pos:column="64">SCE_GC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="183" pos:column="49">quotestart</name> <op:operator pos:line="183" pos:column="60">=</op:operator> <lit:literal type="number" pos:line="183" pos:column="62">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if>	}</block></then>
				<else pos:line="185" pos:column="33">else
				<block pos:line="186" pos:column="33">{	<expr_stmt><expr><call><name><name pos:line="186" pos:column="41">styler</name><op:operator pos:line="186" pos:column="47">.</op:operator><name pos:line="186" pos:column="48">ColourTo</name></name><argument_list pos:line="186" pos:column="56">(<argument><expr><name><name pos:line="186" pos:column="57">sc</name><op:operator pos:line="186" pos:column="59">.</op:operator><name pos:line="186" pos:column="60">currentPos</name></name> <op:operator pos:line="186" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="186" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="186" pos:column="76">sc</name><op:operator pos:line="186" pos:column="78">.</op:operator><name pos:line="186" pos:column="79">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="187" pos:column="41">sc</name><op:operator pos:line="187" pos:column="43">.</op:operator><name pos:line="187" pos:column="44">ChangeState</name></name><argument_list pos:line="187" pos:column="55">(<argument><expr><name pos:line="187" pos:column="56">SCE_GC_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="188" pos:column="41">quotestart</name> <op:operator pos:line="188" pos:column="52">=</op:operator> <name><name pos:line="188" pos:column="54">sc</name><op:operator pos:line="188" pos:column="56">.</op:operator><name pos:line="188" pos:column="57">ch</name></name></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="190" pos:column="33">break;</break>

			</case><case pos:line="192" pos:column="25">case <expr><lit:literal type="char" pos:line="192" pos:column="30">';'</lit:literal></expr>:	<comment type="line" pos:line="192" pos:column="41">// end of commandline character</comment>
				<if pos:line="193" pos:column="33">if <condition pos:line="193" pos:column="36">(<expr><name><name pos:line="193" pos:column="37">sc</name><op:operator pos:line="193" pos:column="39">.</op:operator><name pos:line="193" pos:column="40">state</name></name> <op:operator pos:line="193" pos:column="46">!=</op:operator> <name pos:line="193" pos:column="49">SCE_GC_COMMENTBLOCK</name> <op:operator pos:line="193" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="193" pos:column="72">sc</name><op:operator pos:line="193" pos:column="74">.</op:operator><name pos:line="193" pos:column="75">state</name></name> <op:operator pos:line="193" pos:column="81">!=</op:operator> <name pos:line="193" pos:column="84">SCE_GC_COMMENTLINE</name> <op:operator pos:line="193" pos:column="103">&amp;&amp;</op:operator>
					 <name><name pos:line="194" pos:column="42">sc</name><op:operator pos:line="194" pos:column="44">.</op:operator><name pos:line="194" pos:column="45">state</name></name> <op:operator pos:line="194" pos:column="51">!=</op:operator> <name pos:line="194" pos:column="54">SCE_GC_STRING</name></expr>)</condition><then pos:line="194" pos:column="68">
				<block pos:line="195" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="196" pos:column="41">styler</name><op:operator pos:line="196" pos:column="47">.</op:operator><name pos:line="196" pos:column="48">ColourTo</name></name><argument_list pos:line="196" pos:column="56">(<argument><expr><name><name pos:line="196" pos:column="57">sc</name><op:operator pos:line="196" pos:column="59">.</op:operator><name pos:line="196" pos:column="60">currentPos</name></name> <op:operator pos:line="196" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="196" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="196" pos:column="76">sc</name><op:operator pos:line="196" pos:column="78">.</op:operator><name pos:line="196" pos:column="79">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="197" pos:column="41">styler</name><op:operator pos:line="197" pos:column="47">.</op:operator><name pos:line="197" pos:column="48">ColourTo</name></name><argument_list pos:line="197" pos:column="56">(<argument><expr><name><name pos:line="197" pos:column="57">sc</name><op:operator pos:line="197" pos:column="59">.</op:operator><name pos:line="197" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="72">SCE_GC_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="198" pos:column="41">sc</name><op:operator pos:line="198" pos:column="43">.</op:operator><name pos:line="198" pos:column="44">ChangeState</name></name><argument_list pos:line="198" pos:column="55">(<argument><expr><name pos:line="198" pos:column="56">SCE_GC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="199" pos:column="41">sc</name><op:operator pos:line="199" pos:column="43">.</op:operator><name pos:line="199" pos:column="44">Forward</name></name><argument_list pos:line="199" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="200" pos:column="41">colorFirstWord</name><argument_list pos:line="200" pos:column="55">(<argument><expr><name pos:line="200" pos:column="56">keywordlists</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="70">styler</name></expr></argument>, <argument><expr><op:operator pos:line="200" pos:column="78">&amp;</op:operator><name pos:line="200" pos:column="79">sc</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="83">buff</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="89">BUFFSIZE</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="99">currentline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="201" pos:column="41">noforward</name> <op:operator pos:line="201" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="201" pos:column="53">1</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="201" pos:column="56">// don't move forward - already positioned at next char..</comment>
				}</block></then></if>
				<break pos:line="203" pos:column="33">break;</break>

			</case><case pos:line="205" pos:column="25">case <expr><lit:literal type="char" pos:line="205" pos:column="30">'+'</lit:literal></expr>: </case><case pos:line="205" pos:column="35">case <expr><lit:literal type="char" pos:line="205" pos:column="40">'-'</lit:literal></expr>: </case><case pos:line="205" pos:column="45">case <expr><lit:literal type="char" pos:line="205" pos:column="50">'='</lit:literal></expr>:	</case><case pos:line="205" pos:column="57">case <expr><lit:literal type="char" pos:line="205" pos:column="62">'!'</lit:literal></expr>:	<comment type="line" pos:line="205" pos:column="73">// operators..</comment>
			</case><case pos:line="206" pos:column="25">case <expr><lit:literal type="char" pos:line="206" pos:column="30">'&lt;'</lit:literal></expr>: </case><case pos:line="206" pos:column="35">case <expr><lit:literal type="char" pos:line="206" pos:column="40">'&gt;'</lit:literal></expr>: </case><case pos:line="206" pos:column="45">case <expr><lit:literal type="char" pos:line="206" pos:column="50">'&amp;'</lit:literal></expr>: </case><case pos:line="206" pos:column="55">case <expr><lit:literal type="char" pos:line="206" pos:column="60">'|'</lit:literal></expr>: </case><case pos:line="206" pos:column="65">case <expr><lit:literal type="char" pos:line="206" pos:column="70">'$'</lit:literal></expr>:
				<if pos:line="207" pos:column="33">if <condition pos:line="207" pos:column="36">(<expr><name><name pos:line="207" pos:column="37">sc</name><op:operator pos:line="207" pos:column="39">.</op:operator><name pos:line="207" pos:column="40">state</name></name> <op:operator pos:line="207" pos:column="46">!=</op:operator> <name pos:line="207" pos:column="49">SCE_GC_COMMENTBLOCK</name> <op:operator pos:line="207" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="207" pos:column="72">sc</name><op:operator pos:line="207" pos:column="74">.</op:operator><name pos:line="207" pos:column="75">state</name></name> <op:operator pos:line="207" pos:column="81">!=</op:operator> <name pos:line="207" pos:column="84">SCE_GC_COMMENTLINE</name> <op:operator pos:line="207" pos:column="103">&amp;&amp;</op:operator>
					 <name><name pos:line="208" pos:column="42">sc</name><op:operator pos:line="208" pos:column="44">.</op:operator><name pos:line="208" pos:column="45">state</name></name> <op:operator pos:line="208" pos:column="51">!=</op:operator> <name pos:line="208" pos:column="54">SCE_GC_STRING</name></expr>)</condition><then pos:line="208" pos:column="68">
				<block pos:line="209" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="210" pos:column="41">styler</name><op:operator pos:line="210" pos:column="47">.</op:operator><name pos:line="210" pos:column="48">ColourTo</name></name><argument_list pos:line="210" pos:column="56">(<argument><expr><name><name pos:line="210" pos:column="57">sc</name><op:operator pos:line="210" pos:column="59">.</op:operator><name pos:line="210" pos:column="60">currentPos</name></name> <op:operator pos:line="210" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="210" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="210" pos:column="76">sc</name><op:operator pos:line="210" pos:column="78">.</op:operator><name pos:line="210" pos:column="79">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="211" pos:column="41">styler</name><op:operator pos:line="211" pos:column="47">.</op:operator><name pos:line="211" pos:column="48">ColourTo</name></name><argument_list pos:line="211" pos:column="56">(<argument><expr><name><name pos:line="211" pos:column="57">sc</name><op:operator pos:line="211" pos:column="59">.</op:operator><name pos:line="211" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="211" pos:column="72">SCE_GC_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="212" pos:column="41">sc</name><op:operator pos:line="212" pos:column="43">.</op:operator><name pos:line="212" pos:column="44">ChangeState</name></name><argument_list pos:line="212" pos:column="55">(<argument><expr><name pos:line="212" pos:column="56">SCE_GC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="214" pos:column="33">break;</break>

			</case><case pos:line="216" pos:column="25">case <expr><lit:literal type="char" pos:line="216" pos:column="30">'\\'</lit:literal></expr>:	<comment type="line" pos:line="216" pos:column="41">// escape - same as operator, but also mark in strings..</comment>
				<if pos:line="217" pos:column="33">if <condition pos:line="217" pos:column="36">(<expr><name><name pos:line="217" pos:column="37">sc</name><op:operator pos:line="217" pos:column="39">.</op:operator><name pos:line="217" pos:column="40">state</name></name> <op:operator pos:line="217" pos:column="46">!=</op:operator> <name pos:line="217" pos:column="49">SCE_GC_COMMENTBLOCK</name> <op:operator pos:line="217" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="217" pos:column="72">sc</name><op:operator pos:line="217" pos:column="74">.</op:operator><name pos:line="217" pos:column="75">state</name></name> <op:operator pos:line="217" pos:column="81">!=</op:operator> <name pos:line="217" pos:column="84">SCE_GC_COMMENTLINE</name></expr>)</condition><then pos:line="217" pos:column="103">
				<block pos:line="218" pos:column="33">{
					<expr_stmt><expr><name pos:line="219" pos:column="41">oldstate</name> <op:operator pos:line="219" pos:column="50">=</op:operator> <name><name pos:line="219" pos:column="52">sc</name><op:operator pos:line="219" pos:column="54">.</op:operator><name pos:line="219" pos:column="55">state</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="220" pos:column="41">styler</name><op:operator pos:line="220" pos:column="47">.</op:operator><name pos:line="220" pos:column="48">ColourTo</name></name><argument_list pos:line="220" pos:column="56">(<argument><expr><name><name pos:line="220" pos:column="57">sc</name><op:operator pos:line="220" pos:column="59">.</op:operator><name pos:line="220" pos:column="60">currentPos</name></name> <op:operator pos:line="220" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="220" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="220" pos:column="76">sc</name><op:operator pos:line="220" pos:column="78">.</op:operator><name pos:line="220" pos:column="79">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="221" pos:column="41">sc</name><op:operator pos:line="221" pos:column="43">.</op:operator><name pos:line="221" pos:column="44">Forward</name></name><argument_list pos:line="221" pos:column="51">()</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="221" pos:column="55">// mark also the next char..</comment>
					<expr_stmt><expr><call><name><name pos:line="222" pos:column="41">styler</name><op:operator pos:line="222" pos:column="47">.</op:operator><name pos:line="222" pos:column="48">ColourTo</name></name><argument_list pos:line="222" pos:column="56">(<argument><expr><name><name pos:line="222" pos:column="57">sc</name><op:operator pos:line="222" pos:column="59">.</op:operator><name pos:line="222" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="72">SCE_GC_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="223" pos:column="41">sc</name><op:operator pos:line="223" pos:column="43">.</op:operator><name pos:line="223" pos:column="44">ChangeState</name></name><argument_list pos:line="223" pos:column="55">(<argument><expr><name pos:line="223" pos:column="56">oldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="225" pos:column="33">break;</break>

			</case><case pos:line="227" pos:column="25">case <expr><lit:literal type="char" pos:line="227" pos:column="30">'\n'</lit:literal></expr>: </case><case pos:line="227" pos:column="36">case <expr><lit:literal type="char" pos:line="227" pos:column="41">'\r'</lit:literal></expr>:
				<expr_stmt><expr><op:operator pos:line="228" pos:column="33">++</op:operator><name pos:line="228" pos:column="35">currentline</name></expr>;</expr_stmt>
				<if pos:line="229" pos:column="33">if <condition pos:line="229" pos:column="36">(<expr><name><name pos:line="229" pos:column="37">sc</name><op:operator pos:line="229" pos:column="39">.</op:operator><name pos:line="229" pos:column="40">state</name></name> <op:operator pos:line="229" pos:column="46">==</op:operator> <name pos:line="229" pos:column="49">SCE_GC_COMMENTLINE</name></expr>)</condition><then pos:line="229" pos:column="68">
				<block pos:line="230" pos:column="33">{	<expr_stmt><expr><call><name><name pos:line="230" pos:column="41">styler</name><op:operator pos:line="230" pos:column="47">.</op:operator><name pos:line="230" pos:column="48">ColourTo</name></name><argument_list pos:line="230" pos:column="56">(<argument><expr><name><name pos:line="230" pos:column="57">sc</name><op:operator pos:line="230" pos:column="59">.</op:operator><name pos:line="230" pos:column="60">currentPos</name></name></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="72">sc</name><op:operator pos:line="230" pos:column="74">.</op:operator><name pos:line="230" pos:column="75">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="231" pos:column="41">sc</name><op:operator pos:line="231" pos:column="43">.</op:operator><name pos:line="231" pos:column="44">ChangeState</name></name> <argument_list pos:line="231" pos:column="56">(<argument><expr><name pos:line="231" pos:column="57">SCE_GC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="233" pos:column="33">else <if pos:line="233" pos:column="38">if <condition pos:line="233" pos:column="41">(<expr><name><name pos:line="233" pos:column="42">sc</name><op:operator pos:line="233" pos:column="44">.</op:operator><name pos:line="233" pos:column="45">state</name></name> <op:operator pos:line="233" pos:column="51">!=</op:operator> <name pos:line="233" pos:column="54">SCE_GC_COMMENTBLOCK</name></expr>)</condition><then pos:line="233" pos:column="74">
				<block pos:line="234" pos:column="33">{	<expr_stmt><expr><call><name pos:line="234" pos:column="41">colorFirstWord</name><argument_list pos:line="234" pos:column="55">(<argument><expr><name pos:line="234" pos:column="56">keywordlists</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="70">styler</name></expr></argument>, <argument><expr><op:operator pos:line="234" pos:column="78">&amp;</op:operator><name pos:line="234" pos:column="79">sc</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="83">buff</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="89">BUFFSIZE</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="99">currentline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="235" pos:column="41">noforward</name> <op:operator pos:line="235" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="235" pos:column="53">1</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="235" pos:column="56">// don't move forward - already positioned at next char..</comment>
				}</block></then></if></else></if>
				<break pos:line="237" pos:column="33">break;</break>

<comment type="line" pos:line="239" pos:column="1">//			case ' ': case '\t':</comment>
<comment type="line" pos:line="240" pos:column="1">//			default :</comment>
		</case>}</block></switch>

		<if pos:line="243" pos:column="17">if <condition pos:line="243" pos:column="20">(<expr><op:operator pos:line="243" pos:column="21">!</op:operator><name pos:line="243" pos:column="22">noforward</name></expr>)</condition><then pos:line="243" pos:column="32"> <expr_stmt><expr><call><name><name pos:line="243" pos:column="33">sc</name><op:operator pos:line="243" pos:column="35">.</op:operator><name pos:line="243" pos:column="36">Forward</name></name><argument_list pos:line="243" pos:column="43">()</argument_list></call></expr>;</expr_stmt></then></if>

	}</block></while>
	<expr_stmt><expr><call><name><name pos:line="246" pos:column="9">sc</name><op:operator pos:line="246" pos:column="11">.</op:operator><name pos:line="246" pos:column="12">Complete</name></name><argument_list pos:line="246" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="249" pos:column="1">// Main folding function called by Scintilla - (based on props (.ini) files function)</comment>
<function><type><specifier pos:line="250" pos:column="1">static</specifier> <name pos:line="250" pos:column="8">void</name></type> <name pos:line="250" pos:column="13">FoldGui4Cli</name><parameter_list pos:line="250" pos:column="24">(<param><decl><type><name pos:line="250" pos:column="25">unsigned</name> <name pos:line="250" pos:column="34">int</name></type> <name pos:line="250" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="48">int</name></type> <name pos:line="250" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="60">int</name></type></decl></param>,
								<param><decl><type><name><name pos:line="251" pos:column="65">WordList</name> <type:modifier pos:line="251" pos:column="74">*</type:modifier><index pos:line="251" pos:column="75">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="251" pos:column="79">Accessor</name> <type:modifier pos:line="251" pos:column="88">&amp;</type:modifier></type><name pos:line="251" pos:column="89">styler</name></decl></param>)</parameter_list>
<block pos:line="252" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="253" pos:column="9">bool</name></type> <name pos:line="253" pos:column="14">foldCompact</name> <init pos:line="253" pos:column="26">= <expr><call><name><name pos:line="253" pos:column="28">styler</name><op:operator pos:line="253" pos:column="34">.</op:operator><name pos:line="253" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="253" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="253" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="253" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="253" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="255" pos:column="9">unsigned</name> <name pos:line="255" pos:column="18">int</name></type> <name pos:line="255" pos:column="22">endPos</name> <init pos:line="255" pos:column="29">= <expr><name pos:line="255" pos:column="31">startPos</name> <op:operator pos:line="255" pos:column="40">+</op:operator> <name pos:line="255" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="256" pos:column="9">int</name></type> <name pos:line="256" pos:column="13">visibleChars</name> <init pos:line="256" pos:column="26">= <expr><lit:literal type="number" pos:line="256" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="257" pos:column="9">int</name></type> <name pos:line="257" pos:column="13">lineCurrent</name> <init pos:line="257" pos:column="25">= <expr><call><name><name pos:line="257" pos:column="27">styler</name><op:operator pos:line="257" pos:column="33">.</op:operator><name pos:line="257" pos:column="34">GetLine</name></name><argument_list pos:line="257" pos:column="41">(<argument><expr><name pos:line="257" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="259" pos:column="9">char</name></type> <name pos:line="259" pos:column="14">chNext</name> <init pos:line="259" pos:column="21">= <expr><name><name pos:line="259" pos:column="23">styler</name><index pos:line="259" pos:column="29">[<expr><name pos:line="259" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="260" pos:column="9">int</name></type> <name pos:line="260" pos:column="13">styleNext</name> <init pos:line="260" pos:column="23">= <expr><call><name><name pos:line="260" pos:column="25">styler</name><op:operator pos:line="260" pos:column="31">.</op:operator><name pos:line="260" pos:column="32">StyleAt</name></name><argument_list pos:line="260" pos:column="39">(<argument><expr><name pos:line="260" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="261" pos:column="9">bool</name></type> <name pos:line="261" pos:column="14">headerPoint</name> <init pos:line="261" pos:column="26">= <expr><lit:literal type="boolean" pos:line="261" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="263" pos:column="9">for (<init><decl><type><name pos:line="263" pos:column="14">unsigned</name> <name pos:line="263" pos:column="23">int</name></type> <name pos:line="263" pos:column="27">i</name> <init pos:line="263" pos:column="29">= <expr><name pos:line="263" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="263" pos:column="41">i</name> <op:operator pos:line="263" pos:column="43">&lt;</op:operator> <name pos:line="263" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="263" pos:column="53">i</name><op:operator pos:line="263" pos:column="54">++</op:operator></expr></incr>)
	<block pos:line="264" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="265" pos:column="17">char</name></type> <name pos:line="265" pos:column="22">ch</name> <init pos:line="265" pos:column="25">= <expr><name pos:line="265" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="266" pos:column="17">chNext</name> <op:operator pos:line="266" pos:column="24">=</op:operator> <name><name pos:line="266" pos:column="26">styler</name><index pos:line="266" pos:column="32">[<expr><name pos:line="266" pos:column="33">i</name><op:operator pos:line="266" pos:column="34">+</op:operator><lit:literal type="number" pos:line="266" pos:column="35">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="268" pos:column="17">int</name></type> <name pos:line="268" pos:column="21">style</name> <init pos:line="268" pos:column="27">= <expr><name pos:line="268" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="269" pos:column="17">styleNext</name> <op:operator pos:line="269" pos:column="27">=</op:operator> <call><name><name pos:line="269" pos:column="29">styler</name><op:operator pos:line="269" pos:column="35">.</op:operator><name pos:line="269" pos:column="36">StyleAt</name></name><argument_list pos:line="269" pos:column="43">(<argument><expr><name pos:line="269" pos:column="44">i</name> <op:operator pos:line="269" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="269" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="270" pos:column="17">bool</name></type> <name pos:line="270" pos:column="22">atEOL</name> <init pos:line="270" pos:column="28">= <expr><op:operator pos:line="270" pos:column="30">(</op:operator><name pos:line="270" pos:column="31">ch</name> <op:operator pos:line="270" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="270" pos:column="37">'\r'</lit:literal> <op:operator pos:line="270" pos:column="42">&amp;&amp;</op:operator> <name pos:line="270" pos:column="45">chNext</name> <op:operator pos:line="270" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="270" pos:column="55">'\n'</lit:literal><op:operator pos:line="270" pos:column="59">)</op:operator> <op:operator pos:line="270" pos:column="61">||</op:operator> <op:operator pos:line="270" pos:column="64">(</op:operator><name pos:line="270" pos:column="65">ch</name> <op:operator pos:line="270" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="270" pos:column="71">'\n'</lit:literal><op:operator pos:line="270" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="272" pos:column="17">if <condition pos:line="272" pos:column="20">(<expr><name pos:line="272" pos:column="21">style</name> <op:operator pos:line="272" pos:column="27">==</op:operator> <name pos:line="272" pos:column="30">SCE_GC_EVENT</name> <op:operator pos:line="272" pos:column="43">||</op:operator> <name pos:line="272" pos:column="46">style</name> <op:operator pos:line="272" pos:column="52">==</op:operator> <name pos:line="272" pos:column="55">SCE_GC_GLOBAL</name></expr>)</condition><then pos:line="272" pos:column="69">
		<block pos:line="273" pos:column="17">{	<expr_stmt><expr><name pos:line="273" pos:column="25">headerPoint</name> <op:operator pos:line="273" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="273" pos:column="39">true</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="273" pos:column="45">// fold at events and globals</comment>
		}</block></then></if>

		<if pos:line="276" pos:column="17">if <condition pos:line="276" pos:column="20">(<expr><name pos:line="276" pos:column="21">atEOL</name></expr>)</condition><then pos:line="276" pos:column="27">
		<block pos:line="277" pos:column="17">{	<decl_stmt><decl><type><name pos:line="277" pos:column="25">int</name></type> <name pos:line="277" pos:column="29">lev</name> <init pos:line="277" pos:column="33">= <expr><name pos:line="277" pos:column="35">SC_FOLDLEVELBASE</name><op:operator pos:line="277" pos:column="51">+</op:operator><lit:literal type="number" pos:line="277" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>

			<if pos:line="279" pos:column="25">if <condition pos:line="279" pos:column="28">(<expr><name pos:line="279" pos:column="29">headerPoint</name></expr>)</condition><then pos:line="279" pos:column="41">
				<expr_stmt><expr><name pos:line="280" pos:column="33">lev</name> <op:operator pos:line="280" pos:column="37">=</op:operator> <name pos:line="280" pos:column="39">SC_FOLDLEVELBASE</name></expr>;</expr_stmt></then></if>

			<if pos:line="282" pos:column="25">if <condition pos:line="282" pos:column="28">(<expr><name pos:line="282" pos:column="29">visibleChars</name> <op:operator pos:line="282" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="282" pos:column="45">0</lit:literal> <op:operator pos:line="282" pos:column="47">&amp;&amp;</op:operator> <name pos:line="282" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="282" pos:column="62">
				<expr_stmt><expr><name pos:line="283" pos:column="33">lev</name> <op:operator pos:line="283" pos:column="37">|=</op:operator> <name pos:line="283" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>

			<if pos:line="285" pos:column="25">if <condition pos:line="285" pos:column="28">(<expr><name pos:line="285" pos:column="29">headerPoint</name></expr>)</condition><then pos:line="285" pos:column="41">
				<expr_stmt><expr><name pos:line="286" pos:column="33">lev</name> <op:operator pos:line="286" pos:column="37">|=</op:operator> <name pos:line="286" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>

			<if pos:line="288" pos:column="25">if <condition pos:line="288" pos:column="28">(<expr><name pos:line="288" pos:column="29">lev</name> <op:operator pos:line="288" pos:column="33">!=</op:operator> <call><name><name pos:line="288" pos:column="36">styler</name><op:operator pos:line="288" pos:column="42">.</op:operator><name pos:line="288" pos:column="43">LevelAt</name></name><argument_list pos:line="288" pos:column="50">(<argument><expr><name pos:line="288" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="288" pos:column="64"> <comment type="line" pos:line="288" pos:column="65">// set level, if not already correct</comment>
			<block pos:line="289" pos:column="25">{	<expr_stmt><expr><call><name><name pos:line="289" pos:column="33">styler</name><op:operator pos:line="289" pos:column="39">.</op:operator><name pos:line="289" pos:column="40">SetLevel</name></name><argument_list pos:line="289" pos:column="48">(<argument><expr><name pos:line="289" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="289" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="292" pos:column="25">lineCurrent</name><op:operator pos:line="292" pos:column="36">++</op:operator></expr>;</expr_stmt>		<comment type="line" pos:line="292" pos:column="49">// re-initialize our flags</comment>
			<expr_stmt><expr><name pos:line="293" pos:column="25">visibleChars</name> <op:operator pos:line="293" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="293" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="294" pos:column="25">headerPoint</name> <op:operator pos:line="294" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="294" pos:column="39">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="297" pos:column="17">if <condition pos:line="297" pos:column="20">(<expr><op:operator pos:line="297" pos:column="21">!</op:operator><op:operator pos:line="297" pos:column="22">(</op:operator><call><name pos:line="297" pos:column="23">isspacechar</name><argument_list pos:line="297" pos:column="34">(<argument><expr><name pos:line="297" pos:column="35">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="297" pos:column="38">)</op:operator></expr>)</condition><then pos:line="297" pos:column="40"> <comment type="line" pos:line="297" pos:column="41">// || (style == SCE_GC_COMMENTLINE) || (style != SCE_GC_COMMENTBLOCK)))</comment>
			<expr_stmt><expr><name pos:line="298" pos:column="25">visibleChars</name><op:operator pos:line="298" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="301" pos:column="9">int</name></type> <name pos:line="301" pos:column="13">lev</name> <init pos:line="301" pos:column="17">= <expr><name pos:line="301" pos:column="19">headerPoint</name> <op:operator pos:line="301" pos:column="31">?</op:operator> <name pos:line="301" pos:column="33">SC_FOLDLEVELBASE</name> <op:operator pos:line="301" pos:column="50">:</op:operator> <name pos:line="301" pos:column="52">SC_FOLDLEVELBASE</name><op:operator pos:line="301" pos:column="68">+</op:operator><lit:literal type="number" pos:line="301" pos:column="69">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="302" pos:column="9">int</name></type> <name pos:line="302" pos:column="13">flagsNext</name> <init pos:line="302" pos:column="23">= <expr><call><name><name pos:line="302" pos:column="25">styler</name><op:operator pos:line="302" pos:column="31">.</op:operator><name pos:line="302" pos:column="32">LevelAt</name></name><argument_list pos:line="302" pos:column="39">(<argument><expr><name pos:line="302" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="302" pos:column="53">&amp;</op:operator> <op:operator pos:line="302" pos:column="55">~</op:operator><name pos:line="302" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="303" pos:column="9">styler</name><op:operator pos:line="303" pos:column="15">.</op:operator><name pos:line="303" pos:column="16">SetLevel</name></name><argument_list pos:line="303" pos:column="24">(<argument><expr><name pos:line="303" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="303" pos:column="38">lev</name> <op:operator pos:line="303" pos:column="42">|</op:operator> <name pos:line="303" pos:column="44">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="306" pos:column="1">// I have no idea what these are for.. probably accessible by some message.</comment>
<decl_stmt><decl><type><specifier pos:line="307" pos:column="1">static</specifier> <specifier pos:line="307" pos:column="8">const</specifier> <name pos:line="307" pos:column="14">char</name> <type:modifier pos:line="307" pos:column="19">*</type:modifier> <specifier pos:line="307" pos:column="21">const</specifier></type> <name><name pos:line="307" pos:column="27">gui4cliWordListDesc</name><index pos:line="307" pos:column="46">[]</index></name> <init pos:line="307" pos:column="49">= <expr><block pos:line="307" pos:column="51">{
	<expr><lit:literal type="string" pos:line="308" pos:column="9">"Globals"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="308" pos:column="20">"Events"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="308" pos:column="30">"Attributes"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="308" pos:column="44">"Control"</lit:literal></expr>, <expr><lit:literal type="string" pos:line="308" pos:column="55">"Commands"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="309" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="312" pos:column="1">// Declare language &amp; pass our function pointers to Scintilla</comment>
<decl_stmt><decl><type><name pos:line="313" pos:column="1">LexerModule</name></type> <name pos:line="313" pos:column="13">lmGui4Cli</name><argument_list pos:line="313" pos:column="22">(<argument><expr><name pos:line="313" pos:column="23">SCLEX_GUI4CLI</name></expr></argument>, <argument><expr><name pos:line="313" pos:column="38">ColouriseGui4CliDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="313" pos:column="59">"gui4cli"</lit:literal></expr></argument>, <argument><expr><name pos:line="313" pos:column="70">FoldGui4Cli</name></expr></argument>, <argument><expr><name pos:line="313" pos:column="83">gui4cliWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:undef pos:line="315" pos:column="1">#<cpp:directive pos:line="315" pos:column="2">undef</cpp:directive> <name pos:line="315" pos:column="8">debug</name></cpp:undef>

</unit>
