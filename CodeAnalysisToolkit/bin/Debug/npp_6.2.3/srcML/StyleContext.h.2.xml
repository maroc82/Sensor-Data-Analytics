<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\StyleContext.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file StyleContext.cxx
 ** Lexer infrastructure.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2004 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// This file is in the public domain.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">STYLECONTEXT_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">STYLECONTEXT_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef</cpp:directive> <name pos:line="11" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="12" pos:column="1">namespace <name pos:line="12" pos:column="11">Scintilla</name> <block pos:line="12" pos:column="21">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="15" pos:column="1">static</specifier> <specifier pos:line="15" pos:column="8">inline</specifier> <name pos:line="15" pos:column="15">int</name></type> <name pos:line="15" pos:column="19">MakeLowerCase</name><parameter_list pos:line="15" pos:column="32">(<param><decl><type><name pos:line="15" pos:column="33">int</name></type> <name pos:line="15" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="15" pos:column="41">{
	<if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">ch</name> <argument_list pos:line="16" pos:column="16">&lt; <argument><expr><lit:literal type="char" pos:line="16" pos:column="18">'A'</lit:literal> <op:operator pos:line="16" pos:column="22">||</op:operator> <name pos:line="16" pos:column="25">ch</name></expr></argument> &gt;</argument_list></name> <lit:literal type="char" pos:line="16" pos:column="30">'Z'</lit:literal></expr>)</condition><then pos:line="16" pos:column="34">
		<return pos:line="17" pos:column="17">return <expr><name pos:line="17" pos:column="24">ch</name></expr>;</return></then>
	<else pos:line="18" pos:column="9">else
		<return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">ch</name> <op:operator pos:line="19" pos:column="27">-</op:operator> <lit:literal type="char" pos:line="19" pos:column="29">'A'</lit:literal> <op:operator pos:line="19" pos:column="33">+</op:operator> <lit:literal type="char" pos:line="19" pos:column="35">'a'</lit:literal></expr>;</return></else></if>
}</block></function>

<comment type="line" pos:line="22" pos:column="1">// All languages handled so far can treat all characters &gt;= 0x80 as one class</comment>
<comment type="line" pos:line="23" pos:column="1">// which just continues the current token or starts an identifier if in default.</comment>
<comment type="line" pos:line="24" pos:column="1">// DBCS treated specially as the second character can be &lt; 0x80 and hence</comment>
<comment type="line" pos:line="25" pos:column="1">// syntactically significant. UTF-8 avoids this as all trail bytes are &gt;= 0x80</comment>
<class pos:line="26" pos:column="1">class <name pos:line="26" pos:column="7">StyleContext</name> <block pos:line="26" pos:column="20">{<private type="default" pos:line="26" pos:column="21">
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">LexAccessor</name> <type:modifier pos:line="27" pos:column="21">&amp;</type:modifier></type><name pos:line="27" pos:column="22">styler</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="28" pos:column="9">unsigned</name> <name pos:line="28" pos:column="18">int</name></type> <name pos:line="28" pos:column="22">endPos</name></decl>;</decl_stmt>
	<function_decl><type><name pos:line="29" pos:column="9">StyleContext</name> <type:modifier pos:line="29" pos:column="22">&amp;</type:modifier></type><name pos:line="29" pos:column="23">operator=</name><parameter_list pos:line="29" pos:column="32">(<param><decl><type><specifier pos:line="29" pos:column="33">const</specifier></type> <name pos:line="29" pos:column="39">StyleContext</name> <type:modifier pos:line="29" pos:column="52">&amp;</type:modifier></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="30" pos:column="9">void</name></type> <name pos:line="30" pos:column="14">GetNextChar</name><parameter_list pos:line="30" pos:column="25">(<param><decl><type><name pos:line="30" pos:column="26">unsigned</name> <name pos:line="30" pos:column="35">int</name></type> <name pos:line="30" pos:column="39">pos</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="44">{
		<expr_stmt><expr><name pos:line="31" pos:column="17">chNext</name> <op:operator pos:line="31" pos:column="24">=</op:operator> <call><name><name pos:line="31" pos:column="26">static_cast</name><argument_list pos:line="31" pos:column="37">&lt;<argument><expr><name pos:line="31" pos:column="38">unsigned</name> <name pos:line="31" pos:column="47">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="31" pos:column="52">(<argument><expr><call><name><name pos:line="31" pos:column="53">styler</name><op:operator pos:line="31" pos:column="59">.</op:operator><name pos:line="31" pos:column="60">SafeGetCharAt</name></name><argument_list pos:line="31" pos:column="73">(<argument><expr><name pos:line="31" pos:column="74">pos</name><op:operator pos:line="31" pos:column="77">+</op:operator><lit:literal type="number" pos:line="31" pos:column="78">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="32" pos:column="17">if <condition pos:line="32" pos:column="20">(<expr><call><name><name pos:line="32" pos:column="21">styler</name><op:operator pos:line="32" pos:column="27">.</op:operator><name pos:line="32" pos:column="28">IsLeadByte</name></name><argument_list pos:line="32" pos:column="38">(<argument><expr><call><name><name pos:line="32" pos:column="39">static_cast</name><argument_list pos:line="32" pos:column="50">&lt;<argument><expr><name pos:line="32" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="32" pos:column="56">(<argument><expr><name pos:line="32" pos:column="57">chNext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="32" pos:column="66"> <block pos:line="32" pos:column="67">{
			<expr_stmt><expr><name pos:line="33" pos:column="25">chNext</name> <op:operator pos:line="33" pos:column="32">=</op:operator> <name pos:line="33" pos:column="34">chNext</name> <op:operator pos:line="33" pos:column="41">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="33" pos:column="44">8</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="34" pos:column="25">chNext</name> <op:operator pos:line="34" pos:column="32">|=</op:operator> <call><name><name pos:line="34" pos:column="35">static_cast</name><argument_list pos:line="34" pos:column="46">&lt;<argument><expr><name pos:line="34" pos:column="47">unsigned</name> <name pos:line="34" pos:column="56">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="61">(<argument><expr><call><name><name pos:line="34" pos:column="62">styler</name><op:operator pos:line="34" pos:column="68">.</op:operator><name pos:line="34" pos:column="69">SafeGetCharAt</name></name><argument_list pos:line="34" pos:column="82">(<argument><expr><name pos:line="34" pos:column="83">pos</name><op:operator pos:line="34" pos:column="86">+</op:operator><lit:literal type="number" pos:line="34" pos:column="87">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="36" pos:column="17">// End of line?</comment>
		<comment type="line" pos:line="37" pos:column="17">// Trigger on CR only (Mac style) or either on LF from CR+LF (Dos/Win)</comment>
		<comment type="line" pos:line="38" pos:column="17">// or on LF alone (Unix). Avoid triggering two times on Dos/Win.</comment>
		<expr_stmt><expr><name pos:line="39" pos:column="17">atLineEnd</name> <op:operator pos:line="39" pos:column="27">=</op:operator> <op:operator pos:line="39" pos:column="29">(</op:operator><name pos:line="39" pos:column="30">ch</name> <op:operator pos:line="39" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="36">'\r'</lit:literal> <op:operator pos:line="39" pos:column="41">&amp;&amp;</op:operator> <name pos:line="39" pos:column="44">chNext</name> <op:operator pos:line="39" pos:column="51">!=</op:operator> <lit:literal type="char" pos:line="39" pos:column="54">'\n'</lit:literal><op:operator pos:line="39" pos:column="58">)</op:operator> <op:operator pos:line="39" pos:column="60">||</op:operator>
					<op:operator pos:line="40" pos:column="41">(</op:operator><name pos:line="40" pos:column="42">ch</name> <op:operator pos:line="40" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="48">'\n'</lit:literal><op:operator pos:line="40" pos:column="52">)</op:operator> <op:operator pos:line="40" pos:column="54">||</op:operator>
					<op:operator pos:line="41" pos:column="41">(</op:operator><name pos:line="41" pos:column="42">currentPos</name> <op:operator pos:line="41" pos:column="53">&gt;=</op:operator> <name pos:line="41" pos:column="56">endPos</name><op:operator pos:line="41" pos:column="62">)</op:operator></expr>;</expr_stmt>
	}</block></function>

</private><public pos:line="44" pos:column="1">public:
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">unsigned</name> <name pos:line="45" pos:column="18">int</name></type> <name pos:line="45" pos:column="22">currentPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">bool</name></type> <name pos:line="46" pos:column="14">atLineStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">bool</name></type> <name pos:line="47" pos:column="14">atLineEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="48" pos:column="9">int</name></type> <name pos:line="48" pos:column="13">state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="49" pos:column="9">int</name></type> <name pos:line="49" pos:column="13">chPrev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="50" pos:column="9">int</name></type> <name pos:line="50" pos:column="13">ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">int</name></type> <name pos:line="51" pos:column="13">chNext</name></decl>;</decl_stmt>

	<constructor><name pos:line="53" pos:column="9">StyleContext</name><parameter_list pos:line="53" pos:column="21">(<param><decl><type><name pos:line="53" pos:column="22">unsigned</name> <name pos:line="53" pos:column="31">int</name></type> <name pos:line="53" pos:column="35">startPos</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="45">unsigned</name> <name pos:line="53" pos:column="54">int</name></type> <name pos:line="53" pos:column="58">length</name></decl></param>,
                        <param><decl><type><name pos:line="54" pos:column="25">int</name></type> <name pos:line="54" pos:column="29">initStyle</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="40">LexAccessor</name> <type:modifier pos:line="54" pos:column="52">&amp;</type:modifier></type><name pos:line="54" pos:column="53">styler_</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="62">char</name></type> <name pos:line="54" pos:column="67">chMask</name><init pos:line="54" pos:column="73">=<expr><lit:literal type="number" pos:line="54" pos:column="74">31</lit:literal></expr></init></decl></param>)</parameter_list> <member_list pos:line="54" pos:column="78">:
		<call><name pos:line="55" pos:column="17">styler</name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">styler_</name></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="32">,</op:operator>
		<call><name pos:line="56" pos:column="17">endPos</name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">startPos</name> <op:operator pos:line="56" pos:column="33">+</op:operator> <name pos:line="56" pos:column="35">length</name></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="42">,</op:operator>
		<call><name pos:line="57" pos:column="17">currentPos</name><argument_list pos:line="57" pos:column="27">(<argument><expr><name pos:line="57" pos:column="28">startPos</name></expr></argument>)</argument_list></call><op:operator pos:line="57" pos:column="37">,</op:operator>
		<call><name pos:line="58" pos:column="17">atLineStart</name><argument_list pos:line="58" pos:column="28">(<argument><expr><lit:literal type="boolean" pos:line="58" pos:column="29">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="34">,</op:operator>
		<call><name pos:line="59" pos:column="17">atLineEnd</name><argument_list pos:line="59" pos:column="26">(<argument><expr><lit:literal type="boolean" pos:line="59" pos:column="27">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="33">,</op:operator>
		<call><name pos:line="60" pos:column="17">state</name><argument_list pos:line="60" pos:column="22">(<argument><expr><name pos:line="60" pos:column="23">initStyle</name> <op:operator pos:line="60" pos:column="33">&amp;</op:operator> <name pos:line="60" pos:column="35">chMask</name></expr></argument>)</argument_list></call><op:operator pos:line="60" pos:column="42">,</op:operator> <comment type="line" pos:line="60" pos:column="44">// Mask off all bits which aren't in the chMask.</comment>
		<call><name pos:line="61" pos:column="17">chPrev</name><argument_list pos:line="61" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="61" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="61" pos:column="26">,</op:operator>
		<call><name pos:line="62" pos:column="17">ch</name><argument_list pos:line="62" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="62" pos:column="20">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="62" pos:column="22">,</op:operator>
		<call><name pos:line="63" pos:column="17">chNext</name><argument_list pos:line="63" pos:column="23">(<argument><expr><lit:literal type="number" pos:line="63" pos:column="24">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="63" pos:column="27">{
		<expr_stmt><expr><call><name><name pos:line="64" pos:column="17">styler</name><op:operator pos:line="64" pos:column="23">.</op:operator><name pos:line="64" pos:column="24">StartAt</name></name><argument_list pos:line="64" pos:column="31">(<argument><expr><name pos:line="64" pos:column="32">startPos</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="42">chMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="65" pos:column="17">styler</name><op:operator pos:line="65" pos:column="23">.</op:operator><name pos:line="65" pos:column="24">StartSegment</name></name><argument_list pos:line="65" pos:column="36">(<argument><expr><name pos:line="65" pos:column="37">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="66" pos:column="17">unsigned</name> <name pos:line="66" pos:column="26">int</name></type> <name pos:line="66" pos:column="30">pos</name> <init pos:line="66" pos:column="34">= <expr><name pos:line="66" pos:column="36">currentPos</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="67" pos:column="17">ch</name> <op:operator pos:line="67" pos:column="20">=</op:operator> <call><name><name pos:line="67" pos:column="22">static_cast</name><argument_list pos:line="67" pos:column="33">&lt;<argument><expr><name pos:line="67" pos:column="34">unsigned</name> <name pos:line="67" pos:column="43">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="67" pos:column="48">(<argument><expr><call><name><name pos:line="67" pos:column="49">styler</name><op:operator pos:line="67" pos:column="55">.</op:operator><name pos:line="67" pos:column="56">SafeGetCharAt</name></name><argument_list pos:line="67" pos:column="69">(<argument><expr><name pos:line="67" pos:column="70">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><call><name><name pos:line="68" pos:column="21">styler</name><op:operator pos:line="68" pos:column="27">.</op:operator><name pos:line="68" pos:column="28">IsLeadByte</name></name><argument_list pos:line="68" pos:column="38">(<argument><expr><call><name><name pos:line="68" pos:column="39">static_cast</name><argument_list pos:line="68" pos:column="50">&lt;<argument><expr><name pos:line="68" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="68" pos:column="56">(<argument><expr><name pos:line="68" pos:column="57">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="68" pos:column="62"> <block pos:line="68" pos:column="63">{
			<expr_stmt><expr><name pos:line="69" pos:column="25">pos</name><op:operator pos:line="69" pos:column="28">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="70" pos:column="25">ch</name> <op:operator pos:line="70" pos:column="28">=</op:operator> <name pos:line="70" pos:column="30">ch</name> <op:operator pos:line="70" pos:column="33">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="70" pos:column="36">8</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="71" pos:column="25">ch</name> <op:operator pos:line="71" pos:column="28">|=</op:operator> <call><name><name pos:line="71" pos:column="31">static_cast</name><argument_list pos:line="71" pos:column="42">&lt;<argument><expr><name pos:line="71" pos:column="43">unsigned</name> <name pos:line="71" pos:column="52">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="57">(<argument><expr><call><name><name pos:line="71" pos:column="58">styler</name><op:operator pos:line="71" pos:column="64">.</op:operator><name pos:line="71" pos:column="65">SafeGetCharAt</name></name><argument_list pos:line="71" pos:column="78">(<argument><expr><name pos:line="71" pos:column="79">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">GetNextChar</name><argument_list pos:line="73" pos:column="28">(<argument><expr><name pos:line="73" pos:column="29">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function><type><name pos:line="75" pos:column="9">void</name></type> <name pos:line="75" pos:column="14">Complete</name><parameter_list pos:line="75" pos:column="22">()</parameter_list> <block pos:line="75" pos:column="25">{
		<expr_stmt><expr><call><name><name pos:line="76" pos:column="17">styler</name><op:operator pos:line="76" pos:column="23">.</op:operator><name pos:line="76" pos:column="24">ColourTo</name></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">currentPos</name> <op:operator pos:line="76" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="76" pos:column="46">1</lit:literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="49">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="77" pos:column="17">styler</name><op:operator pos:line="77" pos:column="23">.</op:operator><name pos:line="77" pos:column="24">Flush</name></name><argument_list pos:line="77" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="79" pos:column="9">bool</name></type> <name pos:line="79" pos:column="14">More</name><parameter_list pos:line="79" pos:column="18">()</parameter_list> <specifier pos:line="79" pos:column="21">const</specifier> <block pos:line="79" pos:column="27">{
		<return pos:line="80" pos:column="17">return <expr><name pos:line="80" pos:column="24">currentPos</name> <op:operator pos:line="80" pos:column="35">&lt;</op:operator> <name pos:line="80" pos:column="37">endPos</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="82" pos:column="9">void</name></type> <name pos:line="82" pos:column="14">Forward</name><parameter_list pos:line="82" pos:column="21">()</parameter_list> <block pos:line="82" pos:column="24">{
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">currentPos</name> <op:operator pos:line="83" pos:column="32">&lt;</op:operator> <name pos:line="83" pos:column="34">endPos</name></expr>)</condition><then pos:line="83" pos:column="41"> <block pos:line="83" pos:column="42">{
			<expr_stmt><expr><name pos:line="84" pos:column="25">atLineStart</name> <op:operator pos:line="84" pos:column="37">=</op:operator> <name pos:line="84" pos:column="39">atLineEnd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="85" pos:column="25">chPrev</name> <op:operator pos:line="85" pos:column="32">=</op:operator> <name pos:line="85" pos:column="34">ch</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="86" pos:column="25">currentPos</name><op:operator pos:line="86" pos:column="35">++</op:operator></expr>;</expr_stmt>
			<if pos:line="87" pos:column="25">if <condition pos:line="87" pos:column="28">(<expr><name pos:line="87" pos:column="29">ch</name> <op:operator pos:line="87" pos:column="32">&gt;=</op:operator> <lit:literal type="number" pos:line="87" pos:column="35">0x100</lit:literal></expr>)</condition><then pos:line="87" pos:column="41">
				<expr_stmt><expr><name pos:line="88" pos:column="33">currentPos</name><op:operator pos:line="88" pos:column="43">++</op:operator></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name pos:line="89" pos:column="25">ch</name> <op:operator pos:line="89" pos:column="28">=</op:operator> <name pos:line="89" pos:column="30">chNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="90" pos:column="25">GetNextChar</name><argument_list pos:line="90" pos:column="36">(<argument><expr><name pos:line="90" pos:column="37">currentPos</name> <op:operator pos:line="90" pos:column="48">+</op:operator> <op:operator pos:line="90" pos:column="50">(</op:operator><op:operator pos:line="90" pos:column="51">(</op:operator><name pos:line="90" pos:column="52">ch</name> <op:operator pos:line="90" pos:column="55">&gt;=</op:operator> <lit:literal type="number" pos:line="90" pos:column="58">0x100</lit:literal><op:operator pos:line="90" pos:column="63">)</op:operator> <op:operator pos:line="90" pos:column="65">?</op:operator> <lit:literal type="number" pos:line="90" pos:column="67">1</lit:literal> <op:operator pos:line="90" pos:column="69">:</op:operator> <lit:literal type="number" pos:line="90" pos:column="71">0</lit:literal><op:operator pos:line="90" pos:column="72">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="91" pos:column="19">else <block pos:line="91" pos:column="24">{
			<expr_stmt><expr><name pos:line="92" pos:column="25">atLineStart</name> <op:operator pos:line="92" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="92" pos:column="39">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="93" pos:column="25">chPrev</name> <op:operator pos:line="93" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="93" pos:column="34">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="94" pos:column="25">ch</name> <op:operator pos:line="94" pos:column="28">=</op:operator> <lit:literal type="char" pos:line="94" pos:column="30">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="95" pos:column="25">chNext</name> <op:operator pos:line="95" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="95" pos:column="34">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="96" pos:column="25">atLineEnd</name> <op:operator pos:line="96" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="96" pos:column="37">true</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	<function><type><name pos:line="99" pos:column="9">void</name></type> <name pos:line="99" pos:column="14">Forward</name><parameter_list pos:line="99" pos:column="21">(<param><decl><type><name pos:line="99" pos:column="22">int</name></type> <name pos:line="99" pos:column="26">nb</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="30">{
		<for pos:line="100" pos:column="17">for (<init><decl><type><name pos:line="100" pos:column="22">int</name></type> <name pos:line="100" pos:column="26">i</name> <init pos:line="100" pos:column="28">= <expr><lit:literal type="number" pos:line="100" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="100" pos:column="33">i</name> <op:operator pos:line="100" pos:column="35">&lt;</op:operator> <name pos:line="100" pos:column="37">nb</name></expr>;</condition> <incr><expr><name pos:line="100" pos:column="41">i</name><op:operator pos:line="100" pos:column="42">++</op:operator></expr></incr>) <block pos:line="100" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="101" pos:column="25">Forward</name><argument_list pos:line="101" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	<function><type><name pos:line="104" pos:column="9">void</name></type> <name pos:line="104" pos:column="14">ChangeState</name><parameter_list pos:line="104" pos:column="25">(<param><decl><type><name pos:line="104" pos:column="26">int</name></type> <name pos:line="104" pos:column="30">state_</name></decl></param>)</parameter_list> <block pos:line="104" pos:column="38">{
		<expr_stmt><expr><name pos:line="105" pos:column="17">state</name> <op:operator pos:line="105" pos:column="23">=</op:operator> <name pos:line="105" pos:column="25">state_</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="107" pos:column="9">void</name></type> <name pos:line="107" pos:column="14">SetState</name><parameter_list pos:line="107" pos:column="22">(<param><decl><type><name pos:line="107" pos:column="23">int</name></type> <name pos:line="107" pos:column="27">state_</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="35">{
		<expr_stmt><expr><call><name><name pos:line="108" pos:column="17">styler</name><op:operator pos:line="108" pos:column="23">.</op:operator><name pos:line="108" pos:column="24">ColourTo</name></name><argument_list pos:line="108" pos:column="32">(<argument><expr><name pos:line="108" pos:column="33">currentPos</name> <op:operator pos:line="108" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="108" pos:column="46">1</lit:literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="49">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="109" pos:column="17">state</name> <op:operator pos:line="109" pos:column="23">=</op:operator> <name pos:line="109" pos:column="25">state_</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="111" pos:column="9">void</name></type> <name pos:line="111" pos:column="14">ForwardSetState</name><parameter_list pos:line="111" pos:column="29">(<param><decl><type><name pos:line="111" pos:column="30">int</name></type> <name pos:line="111" pos:column="34">state_</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="112" pos:column="17">Forward</name><argument_list pos:line="112" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="113" pos:column="17">styler</name><op:operator pos:line="113" pos:column="23">.</op:operator><name pos:line="113" pos:column="24">ColourTo</name></name><argument_list pos:line="113" pos:column="32">(<argument><expr><name pos:line="113" pos:column="33">currentPos</name> <op:operator pos:line="113" pos:column="44">-</op:operator> <lit:literal type="number" pos:line="113" pos:column="46">1</lit:literal></expr></argument>, <argument><expr><name pos:line="113" pos:column="49">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="114" pos:column="17">state</name> <op:operator pos:line="114" pos:column="23">=</op:operator> <name pos:line="114" pos:column="25">state_</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="116" pos:column="9">int</name></type> <name pos:line="116" pos:column="13">LengthCurrent</name><parameter_list pos:line="116" pos:column="26">()</parameter_list> <block pos:line="116" pos:column="29">{
		<return pos:line="117" pos:column="17">return <expr><name pos:line="117" pos:column="24">currentPos</name> <op:operator pos:line="117" pos:column="35">-</op:operator> <call><name><name pos:line="117" pos:column="37">styler</name><op:operator pos:line="117" pos:column="43">.</op:operator><name pos:line="117" pos:column="44">GetStartSegment</name></name><argument_list pos:line="117" pos:column="59">()</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="119" pos:column="9">int</name></type> <name pos:line="119" pos:column="13">GetRelative</name><parameter_list pos:line="119" pos:column="24">(<param><decl><type><name pos:line="119" pos:column="25">int</name></type> <name pos:line="119" pos:column="29">n</name></decl></param>)</parameter_list> <block pos:line="119" pos:column="32">{
		<return pos:line="120" pos:column="17">return <expr><call><name><name pos:line="120" pos:column="24">static_cast</name><argument_list pos:line="120" pos:column="35">&lt;<argument><expr><name pos:line="120" pos:column="36">unsigned</name> <name pos:line="120" pos:column="45">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="120" pos:column="50">(<argument><expr><call><name><name pos:line="120" pos:column="51">styler</name><op:operator pos:line="120" pos:column="57">.</op:operator><name pos:line="120" pos:column="58">SafeGetCharAt</name></name><argument_list pos:line="120" pos:column="71">(<argument><expr><name pos:line="120" pos:column="72">currentPos</name><op:operator pos:line="120" pos:column="82">+</op:operator><name pos:line="120" pos:column="83">n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="122" pos:column="9">bool</name></type> <name pos:line="122" pos:column="14">Match</name><parameter_list pos:line="122" pos:column="19">(<param><decl><type><name pos:line="122" pos:column="20">char</name></type> <name pos:line="122" pos:column="25">ch0</name></decl></param>)</parameter_list> <specifier pos:line="122" pos:column="30">const</specifier> <block pos:line="122" pos:column="36">{
		<return pos:line="123" pos:column="17">return <expr><name pos:line="123" pos:column="24">ch</name> <op:operator pos:line="123" pos:column="27">==</op:operator> <call><name><name pos:line="123" pos:column="30">static_cast</name><argument_list pos:line="123" pos:column="41">&lt;<argument><expr><name pos:line="123" pos:column="42">unsigned</name> <name pos:line="123" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="123" pos:column="56">(<argument><expr><name pos:line="123" pos:column="57">ch0</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="125" pos:column="9">bool</name></type> <name pos:line="125" pos:column="14">Match</name><parameter_list pos:line="125" pos:column="19">(<param><decl><type><name pos:line="125" pos:column="20">char</name></type> <name pos:line="125" pos:column="25">ch0</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="30">char</name></type> <name pos:line="125" pos:column="35">ch1</name></decl></param>)</parameter_list> <specifier pos:line="125" pos:column="40">const</specifier> <block pos:line="125" pos:column="46">{
		<return pos:line="126" pos:column="17">return <expr><op:operator pos:line="126" pos:column="24">(</op:operator><name pos:line="126" pos:column="25">ch</name> <op:operator pos:line="126" pos:column="28">==</op:operator> <call><name><name pos:line="126" pos:column="31">static_cast</name><argument_list pos:line="126" pos:column="42">&lt;<argument><expr><name pos:line="126" pos:column="43">unsigned</name> <name pos:line="126" pos:column="52">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="126" pos:column="57">(<argument><expr><name pos:line="126" pos:column="58">ch0</name></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="62">)</op:operator> <op:operator pos:line="126" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="126" pos:column="67">(</op:operator><name pos:line="126" pos:column="68">chNext</name> <op:operator pos:line="126" pos:column="75">==</op:operator> <call><name><name pos:line="126" pos:column="78">static_cast</name><argument_list pos:line="126" pos:column="89">&lt;<argument><expr><name pos:line="126" pos:column="90">unsigned</name> <name pos:line="126" pos:column="99">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="126" pos:column="104">(<argument><expr><name pos:line="126" pos:column="105">ch1</name></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="109">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><name pos:line="128" pos:column="9">bool</name></type> <name pos:line="128" pos:column="14">Match</name><parameter_list pos:line="128" pos:column="19">(<param><decl><type><specifier pos:line="128" pos:column="20">const</specifier> <name pos:line="128" pos:column="26">char</name> <type:modifier pos:line="128" pos:column="31">*</type:modifier></type><name pos:line="128" pos:column="32">s</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="35">{
		<if pos:line="129" pos:column="17">if <condition pos:line="129" pos:column="20">(<expr><name pos:line="129" pos:column="21">ch</name> <op:operator pos:line="129" pos:column="24">!=</op:operator> <call><name><name pos:line="129" pos:column="27">static_cast</name><argument_list pos:line="129" pos:column="38">&lt;<argument><expr><name pos:line="129" pos:column="39">unsigned</name> <name pos:line="129" pos:column="48">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="129" pos:column="53">(<argument><expr><op:operator pos:line="129" pos:column="54">*</op:operator><name pos:line="129" pos:column="55">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="58">
			<return pos:line="130" pos:column="25">return <expr><lit:literal type="boolean" pos:line="130" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="131" pos:column="17">s</name><op:operator pos:line="131" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><op:operator pos:line="132" pos:column="21">!</op:operator><op:operator pos:line="132" pos:column="22">*</op:operator><name pos:line="132" pos:column="23">s</name></expr>)</condition><then pos:line="132" pos:column="25">
			<return pos:line="133" pos:column="25">return <expr><lit:literal type="boolean" pos:line="133" pos:column="32">true</lit:literal></expr>;</return></then></if>
		<if pos:line="134" pos:column="17">if <condition pos:line="134" pos:column="20">(<expr><name pos:line="134" pos:column="21">chNext</name> <op:operator pos:line="134" pos:column="28">!=</op:operator> <call><name><name pos:line="134" pos:column="31">static_cast</name><argument_list pos:line="134" pos:column="42">&lt;<argument><expr><name pos:line="134" pos:column="43">unsigned</name> <name pos:line="134" pos:column="52">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="134" pos:column="57">(<argument><expr><op:operator pos:line="134" pos:column="58">*</op:operator><name pos:line="134" pos:column="59">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="134" pos:column="62">
			<return pos:line="135" pos:column="25">return <expr><lit:literal type="boolean" pos:line="135" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="136" pos:column="17">s</name><op:operator pos:line="136" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<for pos:line="137" pos:column="17">for (<init><decl><type><name pos:line="137" pos:column="22">int</name></type> <name pos:line="137" pos:column="26">n</name><init pos:line="137" pos:column="27">=<expr><lit:literal type="number" pos:line="137" pos:column="28">2</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="137" pos:column="31">*</op:operator><name pos:line="137" pos:column="32">s</name></expr>;</condition> <incr><expr><name pos:line="137" pos:column="35">n</name><op:operator pos:line="137" pos:column="36">++</op:operator></expr></incr>) <block pos:line="137" pos:column="40">{
			<if pos:line="138" pos:column="25">if <condition pos:line="138" pos:column="28">(<expr><op:operator pos:line="138" pos:column="29">*</op:operator><name pos:line="138" pos:column="30">s</name> <op:operator pos:line="138" pos:column="32">!=</op:operator> <call><name><name pos:line="138" pos:column="35">styler</name><op:operator pos:line="138" pos:column="41">.</op:operator><name pos:line="138" pos:column="42">SafeGetCharAt</name></name><argument_list pos:line="138" pos:column="55">(<argument><expr><name pos:line="138" pos:column="56">currentPos</name><op:operator pos:line="138" pos:column="66">+</op:operator><name pos:line="138" pos:column="67">n</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="138" pos:column="70">
				<return pos:line="139" pos:column="33">return <expr><lit:literal type="boolean" pos:line="139" pos:column="40">false</lit:literal></expr>;</return></then></if>
			<expr_stmt><expr><name pos:line="140" pos:column="25">s</name><op:operator pos:line="140" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></for>
		<return pos:line="142" pos:column="17">return <expr><lit:literal type="boolean" pos:line="142" pos:column="24">true</lit:literal></expr>;</return>
	}</block></function>
	<function><type><name pos:line="144" pos:column="9">bool</name></type> <name pos:line="144" pos:column="14">MatchIgnoreCase</name><parameter_list pos:line="144" pos:column="29">(<param><decl><type><specifier pos:line="144" pos:column="30">const</specifier> <name pos:line="144" pos:column="36">char</name> <type:modifier pos:line="144" pos:column="41">*</type:modifier></type><name pos:line="144" pos:column="42">s</name></decl></param>)</parameter_list> <block pos:line="144" pos:column="45">{
		<if pos:line="145" pos:column="17">if <condition pos:line="145" pos:column="20">(<expr><call><name pos:line="145" pos:column="21">MakeLowerCase</name><argument_list pos:line="145" pos:column="34">(<argument><expr><name pos:line="145" pos:column="35">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="145" pos:column="39">!=</op:operator> <call><name><name pos:line="145" pos:column="42">static_cast</name><argument_list pos:line="145" pos:column="53">&lt;<argument><expr><name pos:line="145" pos:column="54">unsigned</name> <name pos:line="145" pos:column="63">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="145" pos:column="68">(<argument><expr><op:operator pos:line="145" pos:column="69">*</op:operator><name pos:line="145" pos:column="70">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="145" pos:column="73">
			<return pos:line="146" pos:column="25">return <expr><lit:literal type="boolean" pos:line="146" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="147" pos:column="17">s</name><op:operator pos:line="147" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<if pos:line="148" pos:column="17">if <condition pos:line="148" pos:column="20">(<expr><op:operator pos:line="148" pos:column="21">!</op:operator><op:operator pos:line="148" pos:column="22">*</op:operator><name pos:line="148" pos:column="23">s</name></expr>)</condition><then pos:line="148" pos:column="25">
			<return pos:line="149" pos:column="25">return <expr><lit:literal type="boolean" pos:line="149" pos:column="32">true</lit:literal></expr>;</return></then></if>
		<if pos:line="150" pos:column="17">if <condition pos:line="150" pos:column="20">(<expr><call><name pos:line="150" pos:column="21">MakeLowerCase</name><argument_list pos:line="150" pos:column="34">(<argument><expr><name pos:line="150" pos:column="35">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="150" pos:column="43">!=</op:operator> <call><name><name pos:line="150" pos:column="46">static_cast</name><argument_list pos:line="150" pos:column="57">&lt;<argument><expr><name pos:line="150" pos:column="58">unsigned</name> <name pos:line="150" pos:column="67">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="150" pos:column="72">(<argument><expr><op:operator pos:line="150" pos:column="73">*</op:operator><name pos:line="150" pos:column="74">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="150" pos:column="77">
			<return pos:line="151" pos:column="25">return <expr><lit:literal type="boolean" pos:line="151" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="152" pos:column="17">s</name><op:operator pos:line="152" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<for pos:line="153" pos:column="17">for (<init><decl><type><name pos:line="153" pos:column="22">int</name></type> <name pos:line="153" pos:column="26">n</name><init pos:line="153" pos:column="27">=<expr><lit:literal type="number" pos:line="153" pos:column="28">2</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="153" pos:column="31">*</op:operator><name pos:line="153" pos:column="32">s</name></expr>;</condition> <incr><expr><name pos:line="153" pos:column="35">n</name><op:operator pos:line="153" pos:column="36">++</op:operator></expr></incr>) <block pos:line="153" pos:column="40">{
			<if pos:line="154" pos:column="25">if <condition pos:line="154" pos:column="28">(<expr><call><name><name pos:line="154" pos:column="29">static_cast</name><argument_list pos:line="154" pos:column="40">&lt;<argument><expr><name pos:line="154" pos:column="41">unsigned</name> <name pos:line="154" pos:column="50">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="154" pos:column="55">(<argument><expr><op:operator pos:line="154" pos:column="56">*</op:operator><name pos:line="154" pos:column="57">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="154" pos:column="60">!=</op:operator>
				<macro><name pos:line="155" pos:column="33">MakeLowerCase</name><argument_list pos:line="155" pos:column="46">(<argument pos:line="155" pos:column="47">static_cast&lt;unsigned char&gt;(styler.SafeGetCharAt(currentPos+n))</argument>)</argument_list></macro></expr>)</condition><then pos:line="155" pos:column="111">
				<return pos:line="156" pos:column="33">return <expr><lit:literal type="boolean" pos:line="156" pos:column="40">false</lit:literal></expr>;</return></then></if>
			<expr_stmt><expr><name pos:line="157" pos:column="25">s</name><op:operator pos:line="157" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></for>
		<return pos:line="159" pos:column="17">return <expr><lit:literal type="boolean" pos:line="159" pos:column="24">true</lit:literal></expr>;</return>
	}</block></function>
	<function><type><name pos:line="161" pos:column="9">bool</name></type> <name pos:line="161" pos:column="14">MatchIgnoreCase2</name><parameter_list pos:line="161" pos:column="30">(<param><decl><type><specifier pos:line="161" pos:column="31">const</specifier> <name pos:line="161" pos:column="37">char</name> <type:modifier pos:line="161" pos:column="42">*</type:modifier></type><name pos:line="161" pos:column="43">s</name></decl></param>)</parameter_list> <block pos:line="161" pos:column="46">{
		<if pos:line="162" pos:column="17">if <condition pos:line="162" pos:column="20">(<expr><call><name pos:line="162" pos:column="21">MakeLowerCase</name><argument_list pos:line="162" pos:column="34">(<argument><expr><name pos:line="162" pos:column="35">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="162" pos:column="39">!=</op:operator> <macro><name pos:line="162" pos:column="42">MakeLowerCase</name><argument_list pos:line="162" pos:column="55">(<argument pos:line="162" pos:column="56">static_cast&lt;unsigned char&gt;(*s)</argument>)</argument_list></macro></expr>)</condition><then pos:line="162" pos:column="88">
			<return pos:line="163" pos:column="25">return <expr><lit:literal type="boolean" pos:line="163" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="164" pos:column="17">s</name><op:operator pos:line="164" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<if pos:line="165" pos:column="17">if <condition pos:line="165" pos:column="20">(<expr><op:operator pos:line="165" pos:column="21">!</op:operator><op:operator pos:line="165" pos:column="22">*</op:operator><name pos:line="165" pos:column="23">s</name></expr>)</condition><then pos:line="165" pos:column="25">
			<return pos:line="166" pos:column="25">return <expr><lit:literal type="boolean" pos:line="166" pos:column="32">true</lit:literal></expr>;</return></then></if>
		<if pos:line="167" pos:column="17">if <condition pos:line="167" pos:column="20">(<expr><call><name pos:line="167" pos:column="21">MakeLowerCase</name><argument_list pos:line="167" pos:column="34">(<argument><expr><name pos:line="167" pos:column="35">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="167" pos:column="43">!=</op:operator> <macro><name pos:line="167" pos:column="46">MakeLowerCase</name><argument_list pos:line="167" pos:column="59">(<argument pos:line="167" pos:column="60">static_cast&lt;unsigned char&gt;(*s)</argument>)</argument_list></macro></expr>)</condition><then pos:line="167" pos:column="92">
			<return pos:line="168" pos:column="25">return <expr><lit:literal type="boolean" pos:line="168" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="169" pos:column="17">s</name><op:operator pos:line="169" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<for pos:line="170" pos:column="17">for (<init><decl><type><name pos:line="170" pos:column="22">int</name></type> <name pos:line="170" pos:column="26">n</name><init pos:line="170" pos:column="27">=<expr><lit:literal type="number" pos:line="170" pos:column="28">2</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="170" pos:column="31">*</op:operator><name pos:line="170" pos:column="32">s</name></expr>;</condition> <incr><expr><name pos:line="170" pos:column="35">n</name><op:operator pos:line="170" pos:column="36">++</op:operator></expr></incr>) <block pos:line="170" pos:column="40">{
			<if pos:line="171" pos:column="25">if <condition pos:line="171" pos:column="28">(<macro><name pos:line="171" pos:column="29">MakeLowerCase</name><argument_list pos:line="171" pos:column="42">(<argument pos:line="171" pos:column="43">static_cast&lt;unsigned char&gt;(*s)</argument>)</argument_list></macro> <expr><op:operator pos:line="171" pos:column="75">!=</op:operator>
				<macro><name pos:line="172" pos:column="33">MakeLowerCase</name><argument_list pos:line="172" pos:column="46">(<argument pos:line="172" pos:column="47">static_cast&lt;unsigned char&gt;(styler.SafeGetCharAt(currentPos+n))</argument>)</argument_list></macro></expr>)</condition><then pos:line="172" pos:column="111">
				<return pos:line="173" pos:column="33">return <expr><lit:literal type="boolean" pos:line="173" pos:column="40">false</lit:literal></expr>;</return></then></if>
			<expr_stmt><expr><name pos:line="174" pos:column="25">s</name><op:operator pos:line="174" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></for>
		<return pos:line="176" pos:column="17">return <expr><lit:literal type="boolean" pos:line="176" pos:column="24">true</lit:literal></expr>;</return>
	}</block></function>
	<comment type="line" pos:line="178" pos:column="9">// Non-inline</comment>
	<function_decl><type><name pos:line="179" pos:column="9">void</name></type> <name pos:line="179" pos:column="14">GetCurrent</name><parameter_list pos:line="179" pos:column="24">(<param><decl><type><name pos:line="179" pos:column="25">char</name> <type:modifier pos:line="179" pos:column="30">*</type:modifier></type><name pos:line="179" pos:column="31">s</name></decl></param>, <param><decl><type><name pos:line="179" pos:column="34">unsigned</name> <name pos:line="179" pos:column="43">int</name></type> <name pos:line="179" pos:column="47">len</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="180" pos:column="9">void</name></type> <name pos:line="180" pos:column="14">GetCurrentLowered</name><parameter_list pos:line="180" pos:column="31">(<param><decl><type><name pos:line="180" pos:column="32">char</name> <type:modifier pos:line="180" pos:column="37">*</type:modifier></type><name pos:line="180" pos:column="38">s</name></decl></param>, <param><decl><type><name pos:line="180" pos:column="41">unsigned</name> <name pos:line="180" pos:column="50">int</name></type> <name pos:line="180" pos:column="54">len</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<cpp:ifdef pos:line="183" pos:column="1">#<cpp:directive pos:line="183" pos:column="2">ifdef</cpp:directive> <name pos:line="183" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="185" pos:column="1">#<cpp:directive pos:line="185" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="187" pos:column="1">#<cpp:directive pos:line="187" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
