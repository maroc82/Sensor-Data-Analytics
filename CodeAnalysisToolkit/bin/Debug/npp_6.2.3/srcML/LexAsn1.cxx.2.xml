<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexAsn1.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexAsn1.cxx
 ** Lexer for ASN.1
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2004 by Herr Pfarrer rpfarrer &lt;at&gt; yahoo &lt;dot&gt; de</comment>
<comment type="line" pos:line="6" pos:column="1">// Last Updated: 20/07/2004</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="30" pos:column="1">// Some char test functions</comment>
<function><type><specifier pos:line="31" pos:column="1">static</specifier> <name pos:line="31" pos:column="8">bool</name></type> <name pos:line="31" pos:column="13">isAsn1Number</name><parameter_list pos:line="31" pos:column="25">(<param><decl><type><name pos:line="31" pos:column="26">int</name></type> <name pos:line="31" pos:column="30">ch</name></decl></param>)</parameter_list>
<block pos:line="32" pos:column="1">{
	<return pos:line="33" pos:column="9">return <expr><op:operator pos:line="33" pos:column="16">(</op:operator><name pos:line="33" pos:column="17">ch</name> <op:operator pos:line="33" pos:column="20">&gt;=</op:operator> <lit:literal type="char" pos:line="33" pos:column="23">'0'</lit:literal> <op:operator pos:line="33" pos:column="27">&amp;&amp;</op:operator> <name pos:line="33" pos:column="30">ch</name> <op:operator pos:line="33" pos:column="33">&lt;=</op:operator> <lit:literal type="char" pos:line="33" pos:column="36">'9'</lit:literal><op:operator pos:line="33" pos:column="39">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="36" pos:column="1">static</specifier> <name pos:line="36" pos:column="8">bool</name></type> <name pos:line="36" pos:column="13">isAsn1Letter</name><parameter_list pos:line="36" pos:column="25">(<param><decl><type><name pos:line="36" pos:column="26">int</name></type> <name pos:line="36" pos:column="30">ch</name></decl></param>)</parameter_list>
<block pos:line="37" pos:column="1">{
	<return pos:line="38" pos:column="9">return <expr><op:operator pos:line="38" pos:column="16">(</op:operator><name pos:line="38" pos:column="17">ch</name> <op:operator pos:line="38" pos:column="20">&gt;=</op:operator> <lit:literal type="char" pos:line="38" pos:column="23">'A'</lit:literal> <op:operator pos:line="38" pos:column="27">&amp;&amp;</op:operator> <name pos:line="38" pos:column="30">ch</name> <op:operator pos:line="38" pos:column="33">&lt;=</op:operator> <lit:literal type="char" pos:line="38" pos:column="36">'Z'</lit:literal><op:operator pos:line="38" pos:column="39">)</op:operator> <op:operator pos:line="38" pos:column="41">||</op:operator> <op:operator pos:line="38" pos:column="44">(</op:operator><name pos:line="38" pos:column="45">ch</name> <op:operator pos:line="38" pos:column="48">&gt;=</op:operator> <lit:literal type="char" pos:line="38" pos:column="51">'a'</lit:literal> <op:operator pos:line="38" pos:column="55">&amp;&amp;</op:operator> <name pos:line="38" pos:column="58">ch</name> <op:operator pos:line="38" pos:column="61">&lt;=</op:operator> <lit:literal type="char" pos:line="38" pos:column="64">'z'</lit:literal><op:operator pos:line="38" pos:column="67">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <name pos:line="41" pos:column="8">bool</name></type> <name pos:line="41" pos:column="13">isAsn1Char</name><parameter_list pos:line="41" pos:column="23">(<param><decl><type><name pos:line="41" pos:column="24">int</name></type> <name pos:line="41" pos:column="28">ch</name></decl></param>)</parameter_list>
<block pos:line="42" pos:column="1">{
	<return pos:line="43" pos:column="9">return <expr><op:operator pos:line="43" pos:column="16">(</op:operator><name pos:line="43" pos:column="17">ch</name> <op:operator pos:line="43" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="23">'-'</lit:literal> <op:operator pos:line="43" pos:column="27">)</op:operator> <op:operator pos:line="43" pos:column="29">||</op:operator> <call><name pos:line="43" pos:column="32">isAsn1Number</name><argument_list pos:line="43" pos:column="44">(<argument><expr><name pos:line="43" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="43" pos:column="49">||</op:operator> <call><name pos:line="43" pos:column="52">isAsn1Letter</name> <argument_list pos:line="43" pos:column="65">(<argument><expr><name pos:line="43" pos:column="66">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="46" pos:column="1">//</comment>
<comment type="line" pos:line="47" pos:column="1">//	Function determining the color of a given code portion</comment>
<comment type="line" pos:line="48" pos:column="1">//	Based on a "state"</comment>
<comment type="line" pos:line="49" pos:column="1">//</comment>
<function><type><specifier pos:line="50" pos:column="1">static</specifier> <name pos:line="50" pos:column="8">void</name></type> <name pos:line="50" pos:column="13">ColouriseAsn1Doc</name><parameter_list pos:line="50" pos:column="29">(<param><decl><type><name pos:line="50" pos:column="30">unsigned</name> <name pos:line="50" pos:column="39">int</name></type> <name pos:line="50" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="53">int</name></type> <name pos:line="50" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="65">int</name></type> <name pos:line="50" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="80">WordList</name> <type:modifier pos:line="50" pos:column="89">*</type:modifier></type><name><name pos:line="50" pos:column="90">keywordLists</name><index pos:line="50" pos:column="102">[]</index></name></decl></param>, <param><decl><type><name pos:line="50" pos:column="106">Accessor</name> <type:modifier pos:line="50" pos:column="115">&amp;</type:modifier></type><name pos:line="50" pos:column="116">styler</name></decl></param>)</parameter_list>
<block pos:line="51" pos:column="1">{
	<comment type="line" pos:line="52" pos:column="9">// The keywords</comment>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">WordList</name> <type:modifier pos:line="53" pos:column="18">&amp;</type:modifier></type><name pos:line="53" pos:column="19">Keywords</name> <init pos:line="53" pos:column="28">= <expr><op:operator pos:line="53" pos:column="30">*</op:operator><name><name pos:line="53" pos:column="31">keywordLists</name><index pos:line="53" pos:column="43">[<expr><lit:literal type="number" pos:line="53" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">WordList</name> <type:modifier pos:line="54" pos:column="18">&amp;</type:modifier></type><name pos:line="54" pos:column="19">Attributes</name> <init pos:line="54" pos:column="30">= <expr><op:operator pos:line="54" pos:column="32">*</op:operator><name><name pos:line="54" pos:column="33">keywordLists</name><index pos:line="54" pos:column="45">[<expr><lit:literal type="number" pos:line="54" pos:column="46">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">WordList</name> <type:modifier pos:line="55" pos:column="18">&amp;</type:modifier></type><name pos:line="55" pos:column="19">Descriptors</name> <init pos:line="55" pos:column="31">= <expr><op:operator pos:line="55" pos:column="33">*</op:operator><name><name pos:line="55" pos:column="34">keywordLists</name><index pos:line="55" pos:column="46">[<expr><lit:literal type="number" pos:line="55" pos:column="47">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">WordList</name> <type:modifier pos:line="56" pos:column="18">&amp;</type:modifier></type><name pos:line="56" pos:column="19">Types</name> <init pos:line="56" pos:column="25">= <expr><op:operator pos:line="56" pos:column="27">*</op:operator><name><name pos:line="56" pos:column="28">keywordLists</name><index pos:line="56" pos:column="40">[<expr><lit:literal type="number" pos:line="56" pos:column="41">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="58" pos:column="9">// Parse the whole buffer character by character using StyleContext</comment>
	<function_decl><type><name pos:line="59" pos:column="9">StyleContext</name></type> <name pos:line="59" pos:column="22">sc</name><parameter_list pos:line="59" pos:column="24">(<param><decl><type><name pos:line="59" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="59" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="59" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="59" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<for pos:line="60" pos:column="9">for (<init pos:line="60" pos:column="14">;</init> <condition><expr><call><name><name pos:line="60" pos:column="16">sc</name><op:operator pos:line="60" pos:column="18">.</op:operator><name pos:line="60" pos:column="19">More</name></name><argument_list pos:line="60" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="60" pos:column="27">sc</name><op:operator pos:line="60" pos:column="29">.</op:operator><name pos:line="60" pos:column="30">Forward</name></name><argument_list pos:line="60" pos:column="37">()</argument_list></call></expr></incr>)
	<block pos:line="61" pos:column="9">{
		<comment type="line" pos:line="62" pos:column="17">// The state engine</comment>
		<switch pos:line="63" pos:column="17">switch <condition pos:line="63" pos:column="24">(<expr><name><name pos:line="63" pos:column="25">sc</name><op:operator pos:line="63" pos:column="27">.</op:operator><name pos:line="63" pos:column="28">state</name></name></expr>)</condition>
		<block pos:line="64" pos:column="17">{
		<case pos:line="65" pos:column="17">case <expr><name pos:line="65" pos:column="22">SCE_ASN1_DEFAULT</name></expr>:		<comment type="line" pos:line="65" pos:column="49">// Plain characters</comment>
<label><name pos:line="66" pos:column="1">asn1_default</name>:</label>
			<if pos:line="67" pos:column="25">if <condition pos:line="67" pos:column="28">(<expr><name><name pos:line="67" pos:column="29">sc</name><op:operator pos:line="67" pos:column="31">.</op:operator><name pos:line="67" pos:column="32">ch</name></name> <op:operator pos:line="67" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="38">'-'</lit:literal> <op:operator pos:line="67" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="67" pos:column="45">sc</name><op:operator pos:line="67" pos:column="47">.</op:operator><name pos:line="67" pos:column="48">chNext</name></name> <op:operator pos:line="67" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="58">'-'</lit:literal></expr>)</condition><then pos:line="67" pos:column="62">
				<comment type="line" pos:line="68" pos:column="33">// A comment begins here</comment>
				<expr_stmt><expr><call><name><name pos:line="69" pos:column="33">sc</name><op:operator pos:line="69" pos:column="35">.</op:operator><name pos:line="69" pos:column="36">SetState</name></name><argument_list pos:line="69" pos:column="44">(<argument><expr><name pos:line="69" pos:column="45">SCE_ASN1_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="70" pos:column="25">else <if pos:line="70" pos:column="30">if <condition pos:line="70" pos:column="33">(<expr><name><name pos:line="70" pos:column="34">sc</name><op:operator pos:line="70" pos:column="36">.</op:operator><name pos:line="70" pos:column="37">ch</name></name> <op:operator pos:line="70" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="43">'"'</lit:literal></expr>)</condition><then pos:line="70" pos:column="47">
				<comment type="line" pos:line="71" pos:column="33">// A string begins here</comment>
				<expr_stmt><expr><call><name><name pos:line="72" pos:column="33">sc</name><op:operator pos:line="72" pos:column="35">.</op:operator><name pos:line="72" pos:column="36">SetState</name></name><argument_list pos:line="72" pos:column="44">(<argument><expr><name pos:line="72" pos:column="45">SCE_ASN1_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="73" pos:column="25">else <if pos:line="73" pos:column="30">if <condition pos:line="73" pos:column="33">(<expr><call><name pos:line="73" pos:column="34">isAsn1Number</name> <argument_list pos:line="73" pos:column="47">(<argument><expr><name><name pos:line="73" pos:column="48">sc</name><op:operator pos:line="73" pos:column="50">.</op:operator><name pos:line="73" pos:column="51">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="73" pos:column="55">
				<comment type="line" pos:line="74" pos:column="33">// A number starts here (identifier should start with a letter in ASN.1)</comment>
				<expr_stmt><expr><call><name><name pos:line="75" pos:column="33">sc</name><op:operator pos:line="75" pos:column="35">.</op:operator><name pos:line="75" pos:column="36">SetState</name></name><argument_list pos:line="75" pos:column="44">(<argument><expr><name pos:line="75" pos:column="45">SCE_ASN1_SCALAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="76" pos:column="25">else <if pos:line="76" pos:column="30">if <condition pos:line="76" pos:column="33">(<expr><call><name pos:line="76" pos:column="34">isAsn1Char</name> <argument_list pos:line="76" pos:column="45">(<argument><expr><name><name pos:line="76" pos:column="46">sc</name><op:operator pos:line="76" pos:column="48">.</op:operator><name pos:line="76" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="53">
				<comment type="line" pos:line="77" pos:column="33">// An identifier starts here (identifier always start with a letter)</comment>
				<expr_stmt><expr><call><name><name pos:line="78" pos:column="33">sc</name><op:operator pos:line="78" pos:column="35">.</op:operator><name pos:line="78" pos:column="36">SetState</name></name><argument_list pos:line="78" pos:column="44">(<argument><expr><name pos:line="78" pos:column="45">SCE_ASN1_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="79" pos:column="25">else <if pos:line="79" pos:column="30">if <condition pos:line="79" pos:column="33">(<expr><name><name pos:line="79" pos:column="34">sc</name><op:operator pos:line="79" pos:column="36">.</op:operator><name pos:line="79" pos:column="37">ch</name></name> <op:operator pos:line="79" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="43">':'</lit:literal></expr>)</condition><then pos:line="79" pos:column="47">
				<comment type="line" pos:line="80" pos:column="33">// A ::= operator starts here</comment>
				<expr_stmt><expr><call><name><name pos:line="81" pos:column="33">sc</name><op:operator pos:line="81" pos:column="35">.</op:operator><name pos:line="81" pos:column="36">SetState</name></name><argument_list pos:line="81" pos:column="44">(<argument><expr><name pos:line="81" pos:column="45">SCE_ASN1_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if>
			<break pos:line="82" pos:column="25">break;</break>
		</case><case pos:line="83" pos:column="17">case <expr><name pos:line="83" pos:column="22">SCE_ASN1_COMMENT</name></expr>:		<comment type="line" pos:line="83" pos:column="49">// A comment</comment>
			<if pos:line="84" pos:column="25">if <condition pos:line="84" pos:column="28">(<expr><name><name pos:line="84" pos:column="29">sc</name><op:operator pos:line="84" pos:column="31">.</op:operator><name pos:line="84" pos:column="32">ch</name></name> <op:operator pos:line="84" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="38">'\r'</lit:literal> <op:operator pos:line="84" pos:column="43">||</op:operator> <name><name pos:line="84" pos:column="46">sc</name><op:operator pos:line="84" pos:column="48">.</op:operator><name pos:line="84" pos:column="49">ch</name></name> <op:operator pos:line="84" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="84" pos:column="55">'\n'</lit:literal></expr>)</condition><then pos:line="84" pos:column="60">
				<comment type="line" pos:line="85" pos:column="33">// A comment ends here</comment>
				<expr_stmt><expr><call><name><name pos:line="86" pos:column="33">sc</name><op:operator pos:line="86" pos:column="35">.</op:operator><name pos:line="86" pos:column="36">SetState</name></name><argument_list pos:line="86" pos:column="44">(<argument><expr><name pos:line="86" pos:column="45">SCE_ASN1_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<break pos:line="87" pos:column="25">break;</break>
		</case><case pos:line="88" pos:column="17">case <expr><name pos:line="88" pos:column="22">SCE_ASN1_IDENTIFIER</name></expr>:	<comment type="line" pos:line="88" pos:column="49">// An identifier (keyword, attribute, descriptor or type)</comment>
			<if pos:line="89" pos:column="25">if <condition pos:line="89" pos:column="28">(<expr><op:operator pos:line="89" pos:column="29">!</op:operator><call><name pos:line="89" pos:column="30">isAsn1Char</name> <argument_list pos:line="89" pos:column="41">(<argument><expr><name><name pos:line="89" pos:column="42">sc</name><op:operator pos:line="89" pos:column="44">.</op:operator><name pos:line="89" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="49">
			<block pos:line="90" pos:column="25">{
				<comment type="line" pos:line="91" pos:column="33">// The end of identifier is here: we can look for it in lists by now and change its state</comment>
				<decl_stmt><decl><type><name pos:line="92" pos:column="33">char</name></type> <name><name pos:line="92" pos:column="38">s</name><index pos:line="92" pos:column="39">[<expr><lit:literal type="number" pos:line="92" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="93" pos:column="33">sc</name><op:operator pos:line="93" pos:column="35">.</op:operator><name pos:line="93" pos:column="36">GetCurrent</name></name><argument_list pos:line="93" pos:column="46">(<argument><expr><name pos:line="93" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="93" pos:column="50">sizeof<argument_list pos:line="93" pos:column="56">(<argument><expr><name pos:line="93" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="94" pos:column="33">if <condition pos:line="94" pos:column="36">(<expr><call><name><name pos:line="94" pos:column="37">Keywords</name><op:operator pos:line="94" pos:column="45">.</op:operator><name pos:line="94" pos:column="46">InList</name></name><argument_list pos:line="94" pos:column="52">(<argument><expr><name pos:line="94" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="56">
					<comment type="line" pos:line="95" pos:column="41">// It's a keyword, change its state</comment>
					<expr_stmt><expr><call><name><name pos:line="96" pos:column="41">sc</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">ChangeState</name></name><argument_list pos:line="96" pos:column="55">(<argument><expr><name pos:line="96" pos:column="56">SCE_ASN1_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="97" pos:column="33">else <if pos:line="97" pos:column="38">if <condition pos:line="97" pos:column="41">(<expr><call><name><name pos:line="97" pos:column="42">Attributes</name><op:operator pos:line="97" pos:column="52">.</op:operator><name pos:line="97" pos:column="53">InList</name></name><argument_list pos:line="97" pos:column="59">(<argument><expr><name pos:line="97" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="97" pos:column="63">
					<comment type="line" pos:line="98" pos:column="41">// It's an attribute, change its state</comment>
					<expr_stmt><expr><call><name><name pos:line="99" pos:column="41">sc</name><op:operator pos:line="99" pos:column="43">.</op:operator><name pos:line="99" pos:column="44">ChangeState</name></name><argument_list pos:line="99" pos:column="55">(<argument><expr><name pos:line="99" pos:column="56">SCE_ASN1_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="100" pos:column="33">else <if pos:line="100" pos:column="38">if <condition pos:line="100" pos:column="41">(<expr><call><name><name pos:line="100" pos:column="42">Descriptors</name><op:operator pos:line="100" pos:column="53">.</op:operator><name pos:line="100" pos:column="54">InList</name></name><argument_list pos:line="100" pos:column="60">(<argument><expr><name pos:line="100" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="64">
					<comment type="line" pos:line="101" pos:column="41">// It's a descriptor, change its state</comment>
					<expr_stmt><expr><call><name><name pos:line="102" pos:column="41">sc</name><op:operator pos:line="102" pos:column="43">.</op:operator><name pos:line="102" pos:column="44">ChangeState</name></name><argument_list pos:line="102" pos:column="55">(<argument><expr><name pos:line="102" pos:column="56">SCE_ASN1_DESCRIPTOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="103" pos:column="33">else <if pos:line="103" pos:column="38">if <condition pos:line="103" pos:column="41">(<expr><call><name><name pos:line="103" pos:column="42">Types</name><op:operator pos:line="103" pos:column="47">.</op:operator><name pos:line="103" pos:column="48">InList</name></name><argument_list pos:line="103" pos:column="54">(<argument><expr><name pos:line="103" pos:column="55">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="103" pos:column="58">
					<comment type="line" pos:line="104" pos:column="41">// It's a type, change its state</comment>
					<expr_stmt><expr><call><name><name pos:line="105" pos:column="41">sc</name><op:operator pos:line="105" pos:column="43">.</op:operator><name pos:line="105" pos:column="44">ChangeState</name></name><argument_list pos:line="105" pos:column="55">(<argument><expr><name pos:line="105" pos:column="56">SCE_ASN1_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if>

				<comment type="line" pos:line="107" pos:column="33">// Set to default now</comment>
				<expr_stmt><expr><call><name><name pos:line="108" pos:column="33">sc</name><op:operator pos:line="108" pos:column="35">.</op:operator><name pos:line="108" pos:column="36">SetState</name></name><argument_list pos:line="108" pos:column="44">(<argument><expr><name pos:line="108" pos:column="45">SCE_ASN1_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="110" pos:column="25">break;</break>
		</case><case pos:line="111" pos:column="17">case <expr><name pos:line="111" pos:column="22">SCE_ASN1_STRING</name></expr>:		<comment type="line" pos:line="111" pos:column="49">// A string delimited by ""</comment>
			<if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><name><name pos:line="112" pos:column="29">sc</name><op:operator pos:line="112" pos:column="31">.</op:operator><name pos:line="112" pos:column="32">ch</name></name> <op:operator pos:line="112" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="38">'"'</lit:literal></expr>)</condition><then pos:line="112" pos:column="42">
			<block pos:line="113" pos:column="25">{
				<comment type="line" pos:line="114" pos:column="33">// A string ends here</comment>
				<expr_stmt><expr><call><name><name pos:line="115" pos:column="33">sc</name><op:operator pos:line="115" pos:column="35">.</op:operator><name pos:line="115" pos:column="36">ForwardSetState</name></name><argument_list pos:line="115" pos:column="51">(<argument><expr><name pos:line="115" pos:column="52">SCE_ASN1_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line" pos:line="117" pos:column="33">// To correctly manage a char sticking to the string quote</comment>
				<goto pos:line="118" pos:column="33">goto <name pos:line="118" pos:column="38">asn1_default</name>;</goto>
			}</block></then></if>
			<break pos:line="120" pos:column="25">break;</break>
		</case><case pos:line="121" pos:column="17">case <expr><name pos:line="121" pos:column="22">SCE_ASN1_SCALAR</name></expr>:		<comment type="line" pos:line="121" pos:column="49">// A plain number</comment>
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><op:operator pos:line="122" pos:column="29">!</op:operator><call><name pos:line="122" pos:column="30">isAsn1Number</name> <argument_list pos:line="122" pos:column="43">(<argument><expr><name><name pos:line="122" pos:column="44">sc</name><op:operator pos:line="122" pos:column="46">.</op:operator><name pos:line="122" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="51">
				<comment type="line" pos:line="123" pos:column="33">// A number ends here</comment>
				<expr_stmt><expr><call><name><name pos:line="124" pos:column="33">sc</name><op:operator pos:line="124" pos:column="35">.</op:operator><name pos:line="124" pos:column="36">SetState</name></name><argument_list pos:line="124" pos:column="44">(<argument><expr><name pos:line="124" pos:column="45">SCE_ASN1_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<break pos:line="125" pos:column="25">break;</break>
		</case><case pos:line="126" pos:column="17">case <expr><name pos:line="126" pos:column="22">SCE_ASN1_OPERATOR</name></expr>:		<comment type="line" pos:line="126" pos:column="49">// The affectation operator ::= and wath follows (eg: ::= { org 6 } OID or ::= 12 trap)</comment>
			<if pos:line="127" pos:column="25">if <condition pos:line="127" pos:column="28">(<expr><name><name pos:line="127" pos:column="29">sc</name><op:operator pos:line="127" pos:column="31">.</op:operator><name pos:line="127" pos:column="32">ch</name></name> <op:operator pos:line="127" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="38">'{'</lit:literal></expr>)</condition><then pos:line="127" pos:column="42">
			<block pos:line="128" pos:column="25">{
				<comment type="line" pos:line="129" pos:column="33">// An OID definition starts here: enter the sub loop</comment>
				<for pos:line="130" pos:column="33">for (<init pos:line="130" pos:column="38">;</init> <condition><expr><call><name><name pos:line="130" pos:column="40">sc</name><op:operator pos:line="130" pos:column="42">.</op:operator><name pos:line="130" pos:column="43">More</name></name><argument_list pos:line="130" pos:column="47">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="130" pos:column="51">sc</name><op:operator pos:line="130" pos:column="53">.</op:operator><name pos:line="130" pos:column="54">Forward</name></name><argument_list pos:line="130" pos:column="61">()</argument_list></call></expr></incr>)
				<block pos:line="131" pos:column="33">{
					<if pos:line="132" pos:column="41">if <condition pos:line="132" pos:column="44">(<expr><call><name pos:line="132" pos:column="45">isAsn1Number</name> <argument_list pos:line="132" pos:column="58">(<argument><expr><name><name pos:line="132" pos:column="59">sc</name><op:operator pos:line="132" pos:column="61">.</op:operator><name pos:line="132" pos:column="62">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="132" pos:column="69">(</op:operator><op:operator pos:line="132" pos:column="70">!</op:operator><call><name pos:line="132" pos:column="71">isAsn1Char</name> <argument_list pos:line="132" pos:column="82">(<argument><expr><name><name pos:line="132" pos:column="83">sc</name><op:operator pos:line="132" pos:column="85">.</op:operator><name pos:line="132" pos:column="86">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="132" pos:column="94">||</op:operator> <call><name pos:line="132" pos:column="97">isAsn1Number</name> <argument_list pos:line="132" pos:column="110">(<argument><expr><name><name pos:line="132" pos:column="111">sc</name><op:operator pos:line="132" pos:column="113">.</op:operator><name pos:line="132" pos:column="114">chPrev</name></name></expr></argument>)</argument_list></call><op:operator pos:line="132" pos:column="121">)</op:operator></expr>)</condition><then pos:line="132" pos:column="123">
						<comment type="line" pos:line="133" pos:column="49">// The OID number is highlighted</comment>
						<expr_stmt><expr><call><name><name pos:line="134" pos:column="49">sc</name><op:operator pos:line="134" pos:column="51">.</op:operator><name pos:line="134" pos:column="52">SetState</name></name><argument_list pos:line="134" pos:column="60">(<argument><expr><name pos:line="134" pos:column="61">SCE_ASN1_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="135" pos:column="41">else <if pos:line="135" pos:column="46">if <condition pos:line="135" pos:column="49">(<expr><call><name pos:line="135" pos:column="50">isAsn1Char</name> <argument_list pos:line="135" pos:column="61">(<argument><expr><name><name pos:line="135" pos:column="62">sc</name><op:operator pos:line="135" pos:column="64">.</op:operator><name pos:line="135" pos:column="65">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="69">
						<comment type="line" pos:line="136" pos:column="49">// The OID parent identifier is plain</comment>
						<expr_stmt><expr><call><name><name pos:line="137" pos:column="49">sc</name><op:operator pos:line="137" pos:column="51">.</op:operator><name pos:line="137" pos:column="52">SetState</name></name><argument_list pos:line="137" pos:column="60">(<argument><expr><name pos:line="137" pos:column="61">SCE_ASN1_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="138" pos:column="41">else
						<expr_stmt><expr><call><name><name pos:line="139" pos:column="49">sc</name><op:operator pos:line="139" pos:column="51">.</op:operator><name pos:line="139" pos:column="52">SetState</name></name><argument_list pos:line="139" pos:column="60">(<argument><expr><name pos:line="139" pos:column="61">SCE_ASN1_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>

					<if pos:line="141" pos:column="41">if <condition pos:line="141" pos:column="44">(<expr><name><name pos:line="141" pos:column="45">sc</name><op:operator pos:line="141" pos:column="47">.</op:operator><name pos:line="141" pos:column="48">ch</name></name> <op:operator pos:line="141" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="141" pos:column="54">'}'</lit:literal></expr>)</condition><then pos:line="141" pos:column="58">
						<comment type="line" pos:line="142" pos:column="49">// Here ends the OID and the operator sub loop: go back to main loop</comment>
						<break pos:line="143" pos:column="49">break;</break></then></if>
				}</block></for>
			}</block></then>
			<else pos:line="146" pos:column="25">else <if pos:line="146" pos:column="30">if <condition pos:line="146" pos:column="33">(<expr><call><name pos:line="146" pos:column="34">isAsn1Number</name> <argument_list pos:line="146" pos:column="47">(<argument><expr><name><name pos:line="146" pos:column="48">sc</name><op:operator pos:line="146" pos:column="50">.</op:operator><name pos:line="146" pos:column="51">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="146" pos:column="55">
			<block pos:line="147" pos:column="25">{
				<comment type="line" pos:line="148" pos:column="33">// A trap number definition starts here: enter the sub loop</comment>
				<for pos:line="149" pos:column="33">for (<init pos:line="149" pos:column="38">;</init> <condition><expr><call><name><name pos:line="149" pos:column="40">sc</name><op:operator pos:line="149" pos:column="42">.</op:operator><name pos:line="149" pos:column="43">More</name></name><argument_list pos:line="149" pos:column="47">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="149" pos:column="51">sc</name><op:operator pos:line="149" pos:column="53">.</op:operator><name pos:line="149" pos:column="54">Forward</name></name><argument_list pos:line="149" pos:column="61">()</argument_list></call></expr></incr>)
				<block pos:line="150" pos:column="33">{
					<if pos:line="151" pos:column="41">if <condition pos:line="151" pos:column="44">(<expr><call><name pos:line="151" pos:column="45">isAsn1Number</name> <argument_list pos:line="151" pos:column="58">(<argument><expr><name><name pos:line="151" pos:column="59">sc</name><op:operator pos:line="151" pos:column="61">.</op:operator><name pos:line="151" pos:column="62">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="151" pos:column="66">
						<comment type="line" pos:line="152" pos:column="49">// The trap number is highlighted</comment>
						<expr_stmt><expr><call><name><name pos:line="153" pos:column="49">sc</name><op:operator pos:line="153" pos:column="51">.</op:operator><name pos:line="153" pos:column="52">SetState</name></name><argument_list pos:line="153" pos:column="60">(<argument><expr><name pos:line="153" pos:column="61">SCE_ASN1_OID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="154" pos:column="41">else
					<block pos:line="155" pos:column="41">{
						<comment type="line" pos:line="156" pos:column="49">// The number ends here: go back to main loop</comment>
						<expr_stmt><expr><call><name><name pos:line="157" pos:column="49">sc</name><op:operator pos:line="157" pos:column="51">.</op:operator><name pos:line="157" pos:column="52">SetState</name></name><argument_list pos:line="157" pos:column="60">(<argument><expr><name pos:line="157" pos:column="61">SCE_ASN1_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break pos:line="158" pos:column="49">break;</break>
					}</block></else></if>
				}</block></for>
			}</block></then>
			<else pos:line="162" pos:column="25">else <if pos:line="162" pos:column="30">if <condition pos:line="162" pos:column="33">(<expr><name><name pos:line="162" pos:column="34">sc</name><op:operator pos:line="162" pos:column="36">.</op:operator><name pos:line="162" pos:column="37">ch</name></name> <op:operator pos:line="162" pos:column="40">!=</op:operator> <lit:literal type="char" pos:line="162" pos:column="43">':'</lit:literal> <op:operator pos:line="162" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="162" pos:column="50">sc</name><op:operator pos:line="162" pos:column="52">.</op:operator><name pos:line="162" pos:column="53">ch</name></name> <op:operator pos:line="162" pos:column="56">!=</op:operator> <lit:literal type="char" pos:line="162" pos:column="59">'='</lit:literal> <op:operator pos:line="162" pos:column="63">&amp;&amp;</op:operator> <name><name pos:line="162" pos:column="66">sc</name><op:operator pos:line="162" pos:column="68">.</op:operator><name pos:line="162" pos:column="69">ch</name></name> <op:operator pos:line="162" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="162" pos:column="75">' '</lit:literal></expr>)</condition><then pos:line="162" pos:column="79">
				<comment type="line" pos:line="163" pos:column="33">// The operator doesn't imply an OID definition nor a trap, back to main loop</comment>
				<goto pos:line="164" pos:column="33">goto <name pos:line="164" pos:column="38">asn1_default</name>;</goto></then></if></else></if></else></if> <comment type="line" pos:line="164" pos:column="52">// To be sure to handle actually the state change</comment>
			<break pos:line="165" pos:column="25">break;</break>
		</case>}</block></switch>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="168" pos:column="9">sc</name><op:operator pos:line="168" pos:column="11">.</op:operator><name pos:line="168" pos:column="12">Complete</name></name><argument_list pos:line="168" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="171" pos:column="1">static</specifier> <name pos:line="171" pos:column="8">void</name></type> <name pos:line="171" pos:column="13">FoldAsn1Doc</name><parameter_list pos:line="171" pos:column="24">(<param><decl><type><name pos:line="171" pos:column="25">unsigned</name></type> <name pos:line="171" pos:column="34">int</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="39">int</name></type></decl></param>, <param><decl><type><name pos:line="171" pos:column="44">int</name></type></decl></param>, <param><decl><type><name><name pos:line="171" pos:column="49">WordList</name> <type:modifier pos:line="171" pos:column="58">*</type:modifier><index pos:line="171" pos:column="59">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="171" pos:column="63">Accessor</name> <type:modifier pos:line="171" pos:column="72">&amp;</type:modifier></type><name pos:line="171" pos:column="73">styler</name></decl></param>)</parameter_list>
<block pos:line="172" pos:column="1">{
	<comment type="line" pos:line="173" pos:column="9">// No folding enabled, no reason to continue...</comment>
	<if pos:line="174" pos:column="9">if<condition pos:line="174" pos:column="11">( <expr><call><name><name pos:line="174" pos:column="13">styler</name><op:operator pos:line="174" pos:column="19">.</op:operator><name pos:line="174" pos:column="20">GetPropertyInt</name></name><argument_list pos:line="174" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="35">"fold"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="174" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="174" pos:column="46">0</lit:literal></expr> )</condition><then pos:line="174" pos:column="49">
		<return pos:line="175" pos:column="17">return;</return></then></if>

	<comment type="line" pos:line="177" pos:column="9">// No folding implemented: doesn't make sense for ASN.1</comment>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="180" pos:column="1">static</specifier> <specifier pos:line="180" pos:column="8">const</specifier> <name pos:line="180" pos:column="14">char</name> <type:modifier pos:line="180" pos:column="19">*</type:modifier> <specifier pos:line="180" pos:column="21">const</specifier></type> <name><name pos:line="180" pos:column="27">asn1WordLists</name><index pos:line="180" pos:column="40">[]</index></name> <init pos:line="180" pos:column="43">= <expr><block pos:line="180" pos:column="45">{
	<expr><lit:literal type="string" pos:line="181" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="182" pos:column="9">"Attributes"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="183" pos:column="9">"Descriptors"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="184" pos:column="9">"Types"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="185" pos:column="9">0</lit:literal></expr>, }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name pos:line="188" pos:column="1">LexerModule</name></type> <name pos:line="188" pos:column="13">lmAns1</name><argument_list pos:line="188" pos:column="19">(<argument><expr><name pos:line="188" pos:column="20">SCLEX_ASN1</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="32">ColouriseAsn1Doc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="50">"asn1"</lit:literal></expr></argument>, <argument><expr><name pos:line="188" pos:column="58">FoldAsn1Doc</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="71">asn1WordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
