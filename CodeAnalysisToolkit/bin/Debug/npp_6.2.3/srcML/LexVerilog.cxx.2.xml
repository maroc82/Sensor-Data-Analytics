<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexVerilog.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexVerilog.cxx
 ** Lexer for Verilog.
 ** Written by Avi Yegudin, based on C++ lexer by Neil Hodgson
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="31" pos:column="1">static</specifier> <specifier pos:line="31" pos:column="8">inline</specifier> <name pos:line="31" pos:column="15">bool</name></type> <name pos:line="31" pos:column="20">IsAWordChar</name><parameter_list pos:line="31" pos:column="31">(<param><decl><type><specifier pos:line="31" pos:column="32">const</specifier> <name pos:line="31" pos:column="38">int</name></type> <name pos:line="31" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="46">{
	<return pos:line="32" pos:column="9">return <expr><op:operator pos:line="32" pos:column="16">(</op:operator><name pos:line="32" pos:column="17">ch</name> <op:operator pos:line="32" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="32" pos:column="22">0x80</lit:literal><op:operator pos:line="32" pos:column="26">)</op:operator> <op:operator pos:line="32" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="32" pos:column="31">(</op:operator><call><name pos:line="32" pos:column="32">isalnum</name><argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="32" pos:column="44">||</op:operator> <name pos:line="32" pos:column="47">ch</name> <op:operator pos:line="32" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="53">'.'</lit:literal> <op:operator pos:line="32" pos:column="57">||</op:operator> <name pos:line="32" pos:column="60">ch</name> <op:operator pos:line="32" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="66">'_'</lit:literal> <op:operator pos:line="32" pos:column="70">||</op:operator> <name pos:line="32" pos:column="73">ch</name> <op:operator pos:line="32" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="79">'\''</lit:literal><op:operator pos:line="32" pos:column="83">||</op:operator> <name pos:line="32" pos:column="86">ch</name> <op:operator pos:line="32" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="32" pos:column="92">'$'</lit:literal><op:operator pos:line="32" pos:column="95">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <specifier pos:line="35" pos:column="8">inline</specifier> <name pos:line="35" pos:column="15">bool</name></type> <name pos:line="35" pos:column="20">IsAWordStart</name><parameter_list pos:line="35" pos:column="32">(<param><decl><type><specifier pos:line="35" pos:column="33">const</specifier> <name pos:line="35" pos:column="39">int</name></type> <name pos:line="35" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="47">{
	<return pos:line="36" pos:column="9">return <expr><op:operator pos:line="36" pos:column="16">(</op:operator><name pos:line="36" pos:column="17">ch</name> <op:operator pos:line="36" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="36" pos:column="22">0x80</lit:literal><op:operator pos:line="36" pos:column="26">)</op:operator> <op:operator pos:line="36" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="36" pos:column="31">(</op:operator><call><name pos:line="36" pos:column="32">isalnum</name><argument_list pos:line="36" pos:column="39">(<argument><expr><name pos:line="36" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="36" pos:column="44">||</op:operator> <name pos:line="36" pos:column="47">ch</name> <op:operator pos:line="36" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="53">'_'</lit:literal> <op:operator pos:line="36" pos:column="57">||</op:operator> <name pos:line="36" pos:column="60">ch</name> <op:operator pos:line="36" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="66">'$'</lit:literal><op:operator pos:line="36" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <name pos:line="39" pos:column="8">void</name></type> <name pos:line="39" pos:column="13">ColouriseVerilogDoc</name><parameter_list pos:line="39" pos:column="32">(<param><decl><type><name pos:line="39" pos:column="33">unsigned</name> <name pos:line="39" pos:column="42">int</name></type> <name pos:line="39" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="56">int</name></type> <name pos:line="39" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="68">int</name></type> <name pos:line="39" pos:column="72">initStyle</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="83">WordList</name> <type:modifier pos:line="39" pos:column="92">*</type:modifier></type><name><name pos:line="39" pos:column="93">keywordlists</name><index pos:line="39" pos:column="105">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="40" pos:column="29">Accessor</name> <type:modifier pos:line="40" pos:column="38">&amp;</type:modifier></type><name pos:line="40" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="47">{

	<decl_stmt><decl><type><name pos:line="42" pos:column="9">WordList</name> <type:modifier pos:line="42" pos:column="18">&amp;</type:modifier></type><name pos:line="42" pos:column="19">keywords</name> <init pos:line="42" pos:column="28">= <expr><op:operator pos:line="42" pos:column="30">*</op:operator><name><name pos:line="42" pos:column="31">keywordlists</name><index pos:line="42" pos:column="43">[<expr><lit:literal type="number" pos:line="42" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">WordList</name> <type:modifier pos:line="43" pos:column="18">&amp;</type:modifier></type><name pos:line="43" pos:column="19">keywords2</name> <init pos:line="43" pos:column="29">= <expr><op:operator pos:line="43" pos:column="31">*</op:operator><name><name pos:line="43" pos:column="32">keywordlists</name><index pos:line="43" pos:column="44">[<expr><lit:literal type="number" pos:line="43" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">WordList</name> <type:modifier pos:line="44" pos:column="18">&amp;</type:modifier></type><name pos:line="44" pos:column="19">keywords3</name> <init pos:line="44" pos:column="29">= <expr><op:operator pos:line="44" pos:column="31">*</op:operator><name><name pos:line="44" pos:column="32">keywordlists</name><index pos:line="44" pos:column="44">[<expr><lit:literal type="number" pos:line="44" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">WordList</name> <type:modifier pos:line="45" pos:column="18">&amp;</type:modifier></type><name pos:line="45" pos:column="19">keywords4</name> <init pos:line="45" pos:column="29">= <expr><op:operator pos:line="45" pos:column="31">*</op:operator><name><name pos:line="45" pos:column="32">keywordlists</name><index pos:line="45" pos:column="44">[<expr><lit:literal type="number" pos:line="45" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="47" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">initStyle</name> <op:operator pos:line="48" pos:column="23">==</op:operator> <name pos:line="48" pos:column="26">SCE_V_STRINGEOL</name></expr>)</condition><then pos:line="48" pos:column="42">
		<expr_stmt><expr><name pos:line="49" pos:column="17">initStyle</name> <op:operator pos:line="49" pos:column="27">=</op:operator> <name pos:line="49" pos:column="29">SCE_V_DEFAULT</name></expr>;</expr_stmt></then></if>

	<function_decl><type><name pos:line="51" pos:column="9">StyleContext</name></type> <name pos:line="51" pos:column="22">sc</name><parameter_list pos:line="51" pos:column="24">(<param><decl><type><name pos:line="51" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="51" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="53" pos:column="9">for (<init pos:line="53" pos:column="14">;</init> <condition><expr><call><name><name pos:line="53" pos:column="16">sc</name><op:operator pos:line="53" pos:column="18">.</op:operator><name pos:line="53" pos:column="19">More</name></name><argument_list pos:line="53" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="53" pos:column="27">sc</name><op:operator pos:line="53" pos:column="29">.</op:operator><name pos:line="53" pos:column="30">Forward</name></name><argument_list pos:line="53" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="53" pos:column="41">{

		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name><name pos:line="55" pos:column="21">sc</name><op:operator pos:line="55" pos:column="23">.</op:operator><name pos:line="55" pos:column="24">atLineStart</name></name> <op:operator pos:line="55" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="55" pos:column="39">(</op:operator><name><name pos:line="55" pos:column="40">sc</name><op:operator pos:line="55" pos:column="42">.</op:operator><name pos:line="55" pos:column="43">state</name></name> <op:operator pos:line="55" pos:column="49">==</op:operator> <name pos:line="55" pos:column="52">SCE_V_STRING</name><op:operator pos:line="55" pos:column="64">)</op:operator></expr>)</condition><then pos:line="55" pos:column="66"> <block pos:line="55" pos:column="67">{
			<comment type="line" pos:line="56" pos:column="25">// Prevent SCE_V_STRINGEOL from leaking back to previous line</comment>
			<expr_stmt><expr><call><name><name pos:line="57" pos:column="25">sc</name><op:operator pos:line="57" pos:column="27">.</op:operator><name pos:line="57" pos:column="28">SetState</name></name><argument_list pos:line="57" pos:column="36">(<argument><expr><name pos:line="57" pos:column="37">SCE_V_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="60" pos:column="17">// Handle line continuation generically.</comment>
		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name><name pos:line="61" pos:column="21">sc</name><op:operator pos:line="61" pos:column="23">.</op:operator><name pos:line="61" pos:column="24">ch</name></name> <op:operator pos:line="61" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="61" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="61" pos:column="35"> <block pos:line="61" pos:column="36">{
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><name><name pos:line="62" pos:column="29">sc</name><op:operator pos:line="62" pos:column="31">.</op:operator><name pos:line="62" pos:column="32">chNext</name></name> <op:operator pos:line="62" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="42">'\n'</lit:literal> <op:operator pos:line="62" pos:column="47">||</op:operator> <name><name pos:line="62" pos:column="50">sc</name><op:operator pos:line="62" pos:column="52">.</op:operator><name pos:line="62" pos:column="53">chNext</name></name> <op:operator pos:line="62" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="62" pos:column="68"> <block pos:line="62" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="63" pos:column="33">sc</name><op:operator pos:line="63" pos:column="35">.</op:operator><name pos:line="63" pos:column="36">Forward</name></name><argument_list pos:line="63" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="64" pos:column="33">if <condition pos:line="64" pos:column="36">(<expr><name><name pos:line="64" pos:column="37">sc</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">ch</name></name> <op:operator pos:line="64" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="46">'\r'</lit:literal> <op:operator pos:line="64" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="64" pos:column="54">sc</name><op:operator pos:line="64" pos:column="56">.</op:operator><name pos:line="64" pos:column="57">chNext</name></name> <op:operator pos:line="64" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="64" pos:column="72"> <block pos:line="64" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="65" pos:column="41">sc</name><op:operator pos:line="65" pos:column="43">.</op:operator><name pos:line="65" pos:column="44">Forward</name></name><argument_list pos:line="65" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<continue pos:line="67" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="71" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><name><name pos:line="72" pos:column="21">sc</name><op:operator pos:line="72" pos:column="23">.</op:operator><name pos:line="72" pos:column="24">state</name></name> <op:operator pos:line="72" pos:column="30">==</op:operator> <name pos:line="72" pos:column="33">SCE_V_OPERATOR</name></expr>)</condition><then pos:line="72" pos:column="48"> <block pos:line="72" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="73" pos:column="25">sc</name><op:operator pos:line="73" pos:column="27">.</op:operator><name pos:line="73" pos:column="28">SetState</name></name><argument_list pos:line="73" pos:column="36">(<argument><expr><name pos:line="73" pos:column="37">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="74" pos:column="19">else <if pos:line="74" pos:column="24">if <condition pos:line="74" pos:column="27">(<expr><name><name pos:line="74" pos:column="28">sc</name><op:operator pos:line="74" pos:column="30">.</op:operator><name pos:line="74" pos:column="31">state</name></name> <op:operator pos:line="74" pos:column="37">==</op:operator> <name pos:line="74" pos:column="40">SCE_V_NUMBER</name></expr>)</condition><then pos:line="74" pos:column="53"> <block pos:line="74" pos:column="54">{
			<if pos:line="75" pos:column="25">if <condition pos:line="75" pos:column="28">(<expr><op:operator pos:line="75" pos:column="29">!</op:operator><call><name pos:line="75" pos:column="30">IsAWordChar</name><argument_list pos:line="75" pos:column="41">(<argument><expr><name><name pos:line="75" pos:column="42">sc</name><op:operator pos:line="75" pos:column="44">.</op:operator><name pos:line="75" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="75" pos:column="49"> <block pos:line="75" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="76" pos:column="33">sc</name><op:operator pos:line="76" pos:column="35">.</op:operator><name pos:line="76" pos:column="36">SetState</name></name><argument_list pos:line="76" pos:column="44">(<argument><expr><name pos:line="76" pos:column="45">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="78" pos:column="19">else <if pos:line="78" pos:column="24">if <condition pos:line="78" pos:column="27">(<expr><name><name pos:line="78" pos:column="28">sc</name><op:operator pos:line="78" pos:column="30">.</op:operator><name pos:line="78" pos:column="31">state</name></name> <op:operator pos:line="78" pos:column="37">==</op:operator> <name pos:line="78" pos:column="40">SCE_V_IDENTIFIER</name></expr>)</condition><then pos:line="78" pos:column="57"> <block pos:line="78" pos:column="58">{
			<if pos:line="79" pos:column="25">if <condition pos:line="79" pos:column="28">(<expr><op:operator pos:line="79" pos:column="29">!</op:operator><call><name pos:line="79" pos:column="30">IsAWordChar</name><argument_list pos:line="79" pos:column="41">(<argument><expr><name><name pos:line="79" pos:column="42">sc</name><op:operator pos:line="79" pos:column="44">.</op:operator><name pos:line="79" pos:column="45">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="79" pos:column="49">||</op:operator> <op:operator pos:line="79" pos:column="52">(</op:operator><name><name pos:line="79" pos:column="53">sc</name><op:operator pos:line="79" pos:column="55">.</op:operator><name pos:line="79" pos:column="56">ch</name></name> <op:operator pos:line="79" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="79" pos:column="62">'.'</lit:literal><op:operator pos:line="79" pos:column="65">)</op:operator></expr>)</condition><then pos:line="79" pos:column="67"> <block pos:line="79" pos:column="68">{
				<decl_stmt><decl><type><name pos:line="80" pos:column="33">char</name></type> <name><name pos:line="80" pos:column="38">s</name><index pos:line="80" pos:column="39">[<expr><lit:literal type="number" pos:line="80" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name><name pos:line="81" pos:column="33">sc</name><op:operator pos:line="81" pos:column="35">.</op:operator><name pos:line="81" pos:column="36">GetCurrent</name></name><argument_list pos:line="81" pos:column="46">(<argument><expr><name pos:line="81" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="50">sizeof<argument_list pos:line="81" pos:column="56">(<argument><expr><name pos:line="81" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="82" pos:column="33">if <condition pos:line="82" pos:column="36">(<expr><call><name><name pos:line="82" pos:column="37">keywords</name><op:operator pos:line="82" pos:column="45">.</op:operator><name pos:line="82" pos:column="46">InList</name></name><argument_list pos:line="82" pos:column="52">(<argument><expr><name pos:line="82" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="82" pos:column="56"> <block pos:line="82" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="83" pos:column="41">sc</name><op:operator pos:line="83" pos:column="43">.</op:operator><name pos:line="83" pos:column="44">ChangeState</name></name><argument_list pos:line="83" pos:column="55">(<argument><expr><name pos:line="83" pos:column="56">SCE_V_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="84" pos:column="35">else <if pos:line="84" pos:column="40">if <condition pos:line="84" pos:column="43">(<expr><call><name><name pos:line="84" pos:column="44">keywords2</name><op:operator pos:line="84" pos:column="53">.</op:operator><name pos:line="84" pos:column="54">InList</name></name><argument_list pos:line="84" pos:column="60">(<argument><expr><name pos:line="84" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="84" pos:column="64"> <block pos:line="84" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="85" pos:column="41">sc</name><op:operator pos:line="85" pos:column="43">.</op:operator><name pos:line="85" pos:column="44">ChangeState</name></name><argument_list pos:line="85" pos:column="55">(<argument><expr><name pos:line="85" pos:column="56">SCE_V_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="86" pos:column="35">else <if pos:line="86" pos:column="40">if <condition pos:line="86" pos:column="43">(<expr><call><name><name pos:line="86" pos:column="44">keywords3</name><op:operator pos:line="86" pos:column="53">.</op:operator><name pos:line="86" pos:column="54">InList</name></name><argument_list pos:line="86" pos:column="60">(<argument><expr><name pos:line="86" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="64"> <block pos:line="86" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="87" pos:column="41">sc</name><op:operator pos:line="87" pos:column="43">.</op:operator><name pos:line="87" pos:column="44">ChangeState</name></name><argument_list pos:line="87" pos:column="55">(<argument><expr><name pos:line="87" pos:column="56">SCE_V_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then> <else pos:line="88" pos:column="35">else <if pos:line="88" pos:column="40">if <condition pos:line="88" pos:column="43">(<expr><call><name><name pos:line="88" pos:column="44">keywords4</name><op:operator pos:line="88" pos:column="53">.</op:operator><name pos:line="88" pos:column="54">InList</name></name><argument_list pos:line="88" pos:column="60">(<argument><expr><name pos:line="88" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="88" pos:column="64"> <block pos:line="88" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="89" pos:column="41">sc</name><op:operator pos:line="89" pos:column="43">.</op:operator><name pos:line="89" pos:column="44">ChangeState</name></name><argument_list pos:line="89" pos:column="55">(<argument><expr><name pos:line="89" pos:column="56">SCE_V_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">sc</name><op:operator pos:line="91" pos:column="35">.</op:operator><name pos:line="91" pos:column="36">SetState</name></name><argument_list pos:line="91" pos:column="44">(<argument><expr><name pos:line="91" pos:column="45">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="93" pos:column="19">else <if pos:line="93" pos:column="24">if <condition pos:line="93" pos:column="27">(<expr><name><name pos:line="93" pos:column="28">sc</name><op:operator pos:line="93" pos:column="30">.</op:operator><name pos:line="93" pos:column="31">state</name></name> <op:operator pos:line="93" pos:column="37">==</op:operator> <name pos:line="93" pos:column="40">SCE_V_PREPROCESSOR</name></expr>)</condition><then pos:line="93" pos:column="59"> <block pos:line="93" pos:column="60">{
                        <if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><op:operator pos:line="94" pos:column="29">!</op:operator><call><name pos:line="94" pos:column="30">IsAWordChar</name><argument_list pos:line="94" pos:column="41">(<argument><expr><name><name pos:line="94" pos:column="42">sc</name><op:operator pos:line="94" pos:column="44">.</op:operator><name pos:line="94" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="49"> <block pos:line="94" pos:column="50">{
                                <expr_stmt><expr><call><name><name pos:line="95" pos:column="33">sc</name><op:operator pos:line="95" pos:column="35">.</op:operator><name pos:line="95" pos:column="36">SetState</name></name><argument_list pos:line="95" pos:column="44">(<argument><expr><name pos:line="95" pos:column="45">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
		}</block></then> <else pos:line="97" pos:column="19">else <if pos:line="97" pos:column="24">if <condition pos:line="97" pos:column="27">(<expr><name><name pos:line="97" pos:column="28">sc</name><op:operator pos:line="97" pos:column="30">.</op:operator><name pos:line="97" pos:column="31">state</name></name> <op:operator pos:line="97" pos:column="37">==</op:operator> <name pos:line="97" pos:column="40">SCE_V_COMMENT</name></expr>)</condition><then pos:line="97" pos:column="54"> <block pos:line="97" pos:column="55">{
			<if pos:line="98" pos:column="25">if <condition pos:line="98" pos:column="28">(<expr><call><name><name pos:line="98" pos:column="29">sc</name><op:operator pos:line="98" pos:column="31">.</op:operator><name pos:line="98" pos:column="32">Match</name></name><argument_list pos:line="98" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="98" pos:column="38">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="98" pos:column="43">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="48"> <block pos:line="98" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="99" pos:column="33">sc</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">Forward</name></name><argument_list pos:line="99" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="100" pos:column="33">sc</name><op:operator pos:line="100" pos:column="35">.</op:operator><name pos:line="100" pos:column="36">ForwardSetState</name></name><argument_list pos:line="100" pos:column="51">(<argument><expr><name pos:line="100" pos:column="52">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="102" pos:column="19">else <if pos:line="102" pos:column="24">if <condition pos:line="102" pos:column="27">(<expr><name><name pos:line="102" pos:column="28">sc</name><op:operator pos:line="102" pos:column="30">.</op:operator><name pos:line="102" pos:column="31">state</name></name> <op:operator pos:line="102" pos:column="37">==</op:operator> <name pos:line="102" pos:column="40">SCE_V_COMMENTLINE</name> <op:operator pos:line="102" pos:column="58">||</op:operator> <name><name pos:line="102" pos:column="61">sc</name><op:operator pos:line="102" pos:column="63">.</op:operator><name pos:line="102" pos:column="64">state</name></name> <op:operator pos:line="102" pos:column="70">==</op:operator> <name pos:line="102" pos:column="73">SCE_V_COMMENTLINEBANG</name></expr>)</condition><then pos:line="102" pos:column="95"> <block pos:line="102" pos:column="96">{
			<if pos:line="103" pos:column="25">if <condition pos:line="103" pos:column="28">(<expr><name><name pos:line="103" pos:column="29">sc</name><op:operator pos:line="103" pos:column="31">.</op:operator><name pos:line="103" pos:column="32">atLineStart</name></name></expr>)</condition><then pos:line="103" pos:column="44"> <block pos:line="103" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="104" pos:column="33">sc</name><op:operator pos:line="104" pos:column="35">.</op:operator><name pos:line="104" pos:column="36">SetState</name></name><argument_list pos:line="104" pos:column="44">(<argument><expr><name pos:line="104" pos:column="45">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
                }</block></then> <else pos:line="106" pos:column="19">else <if pos:line="106" pos:column="24">if <condition pos:line="106" pos:column="27">(<expr><name><name pos:line="106" pos:column="28">sc</name><op:operator pos:line="106" pos:column="30">.</op:operator><name pos:line="106" pos:column="31">state</name></name> <op:operator pos:line="106" pos:column="37">==</op:operator> <name pos:line="106" pos:column="40">SCE_V_STRING</name></expr>)</condition><then pos:line="106" pos:column="53"> <block pos:line="106" pos:column="54">{
			<if pos:line="107" pos:column="25">if <condition pos:line="107" pos:column="28">(<expr><name><name pos:line="107" pos:column="29">sc</name><op:operator pos:line="107" pos:column="31">.</op:operator><name pos:line="107" pos:column="32">ch</name></name> <op:operator pos:line="107" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="107" pos:column="43"> <block pos:line="107" pos:column="44">{
				<if pos:line="108" pos:column="33">if <condition pos:line="108" pos:column="36">(<expr><name><name pos:line="108" pos:column="37">sc</name><op:operator pos:line="108" pos:column="39">.</op:operator><name pos:line="108" pos:column="40">chNext</name></name> <op:operator pos:line="108" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="50">'\"'</lit:literal> <op:operator pos:line="108" pos:column="55">||</op:operator> <name><name pos:line="108" pos:column="58">sc</name><op:operator pos:line="108" pos:column="60">.</op:operator><name pos:line="108" pos:column="61">chNext</name></name> <op:operator pos:line="108" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="71">'\''</lit:literal> <op:operator pos:line="108" pos:column="76">||</op:operator> <name><name pos:line="108" pos:column="79">sc</name><op:operator pos:line="108" pos:column="81">.</op:operator><name pos:line="108" pos:column="82">chNext</name></name> <op:operator pos:line="108" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="92">'\\'</lit:literal></expr>)</condition><then pos:line="108" pos:column="97"> <block pos:line="108" pos:column="98">{
					<expr_stmt><expr><call><name><name pos:line="109" pos:column="41">sc</name><op:operator pos:line="109" pos:column="43">.</op:operator><name pos:line="109" pos:column="44">Forward</name></name><argument_list pos:line="109" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="111" pos:column="27">else <if pos:line="111" pos:column="32">if <condition pos:line="111" pos:column="35">(<expr><name><name pos:line="111" pos:column="36">sc</name><op:operator pos:line="111" pos:column="38">.</op:operator><name pos:line="111" pos:column="39">ch</name></name> <op:operator pos:line="111" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="111" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="111" pos:column="50"> <block pos:line="111" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="112" pos:column="33">sc</name><op:operator pos:line="112" pos:column="35">.</op:operator><name pos:line="112" pos:column="36">ForwardSetState</name></name><argument_list pos:line="112" pos:column="51">(<argument><expr><name pos:line="112" pos:column="52">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="113" pos:column="27">else <if pos:line="113" pos:column="32">if <condition pos:line="113" pos:column="35">(<expr><name><name pos:line="113" pos:column="36">sc</name><op:operator pos:line="113" pos:column="38">.</op:operator><name pos:line="113" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="113" pos:column="49"> <block pos:line="113" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="114" pos:column="33">sc</name><op:operator pos:line="114" pos:column="35">.</op:operator><name pos:line="114" pos:column="36">ChangeState</name></name><argument_list pos:line="114" pos:column="47">(<argument><expr><name pos:line="114" pos:column="48">SCE_V_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="115" pos:column="33">sc</name><op:operator pos:line="115" pos:column="35">.</op:operator><name pos:line="115" pos:column="36">ForwardSetState</name></name><argument_list pos:line="115" pos:column="51">(<argument><expr><name pos:line="115" pos:column="52">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="119" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name><name pos:line="120" pos:column="21">sc</name><op:operator pos:line="120" pos:column="23">.</op:operator><name pos:line="120" pos:column="24">state</name></name> <op:operator pos:line="120" pos:column="30">==</op:operator> <name pos:line="120" pos:column="33">SCE_V_DEFAULT</name></expr>)</condition><then pos:line="120" pos:column="47"> <block pos:line="120" pos:column="48">{
			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><call><name pos:line="121" pos:column="29">IsADigit</name><argument_list pos:line="121" pos:column="37">(<argument><expr><name><name pos:line="121" pos:column="38">sc</name><op:operator pos:line="121" pos:column="40">.</op:operator><name pos:line="121" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="45">||</op:operator> <op:operator pos:line="121" pos:column="48">(</op:operator><name><name pos:line="121" pos:column="49">sc</name><op:operator pos:line="121" pos:column="51">.</op:operator><name pos:line="121" pos:column="52">ch</name></name> <op:operator pos:line="121" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="58">'\''</lit:literal><op:operator pos:line="121" pos:column="62">)</op:operator> <op:operator pos:line="121" pos:column="64">||</op:operator> <op:operator pos:line="121" pos:column="67">(</op:operator><name><name pos:line="121" pos:column="68">sc</name><op:operator pos:line="121" pos:column="70">.</op:operator><name pos:line="121" pos:column="71">ch</name></name> <op:operator pos:line="121" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="77">'.'</lit:literal> <op:operator pos:line="121" pos:column="81">&amp;&amp;</op:operator> <call><name pos:line="121" pos:column="84">IsADigit</name><argument_list pos:line="121" pos:column="92">(<argument><expr><name><name pos:line="121" pos:column="93">sc</name><op:operator pos:line="121" pos:column="95">.</op:operator><name pos:line="121" pos:column="96">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="121" pos:column="103">)</op:operator></expr>)</condition><then pos:line="121" pos:column="105"> <block pos:line="121" pos:column="106">{
				<expr_stmt><expr><call><name><name pos:line="122" pos:column="33">sc</name><op:operator pos:line="122" pos:column="35">.</op:operator><name pos:line="122" pos:column="36">SetState</name></name><argument_list pos:line="122" pos:column="44">(<argument><expr><name pos:line="122" pos:column="45">SCE_V_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="123" pos:column="27">else <if pos:line="123" pos:column="32">if <condition pos:line="123" pos:column="35">(<expr><call><name pos:line="123" pos:column="36">IsAWordStart</name><argument_list pos:line="123" pos:column="48">(<argument><expr><name><name pos:line="123" pos:column="49">sc</name><op:operator pos:line="123" pos:column="51">.</op:operator><name pos:line="123" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="123" pos:column="56"> <block pos:line="123" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="124" pos:column="33">sc</name><op:operator pos:line="124" pos:column="35">.</op:operator><name pos:line="124" pos:column="36">SetState</name></name><argument_list pos:line="124" pos:column="44">(<argument><expr><name pos:line="124" pos:column="45">SCE_V_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="125" pos:column="27">else <if pos:line="125" pos:column="32">if <condition pos:line="125" pos:column="35">(<expr><call><name><name pos:line="125" pos:column="36">sc</name><op:operator pos:line="125" pos:column="38">.</op:operator><name pos:line="125" pos:column="39">Match</name></name><argument_list pos:line="125" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="125" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="125" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="125" pos:column="55"> <block pos:line="125" pos:column="56">{
                                <expr_stmt><expr><call><name><name pos:line="126" pos:column="33">sc</name><op:operator pos:line="126" pos:column="35">.</op:operator><name pos:line="126" pos:column="36">SetState</name></name><argument_list pos:line="126" pos:column="44">(<argument><expr><name pos:line="126" pos:column="45">SCE_V_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="127" pos:column="33">sc</name><op:operator pos:line="127" pos:column="35">.</op:operator><name pos:line="127" pos:column="36">Forward</name></name><argument_list pos:line="127" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="127" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> <else pos:line="128" pos:column="27">else <if pos:line="128" pos:column="32">if <condition pos:line="128" pos:column="35">(<expr><call><name><name pos:line="128" pos:column="36">sc</name><op:operator pos:line="128" pos:column="38">.</op:operator><name pos:line="128" pos:column="39">Match</name></name><argument_list pos:line="128" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="128" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="128" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="128" pos:column="55"> <block pos:line="128" pos:column="56">{
				<if pos:line="129" pos:column="33">if <condition pos:line="129" pos:column="36">(<expr><call><name><name pos:line="129" pos:column="37">sc</name><op:operator pos:line="129" pos:column="39">.</op:operator><name pos:line="129" pos:column="40">Match</name></name><argument_list pos:line="129" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="46">"//!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="53">	<comment type="line" pos:line="129" pos:column="57">// Nice to have a different comment style</comment>
					<expr_stmt><expr><call><name><name pos:line="130" pos:column="41">sc</name><op:operator pos:line="130" pos:column="43">.</op:operator><name pos:line="130" pos:column="44">SetState</name></name><argument_list pos:line="130" pos:column="52">(<argument><expr><name pos:line="130" pos:column="53">SCE_V_COMMENTLINEBANG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="131" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="132" pos:column="41">sc</name><op:operator pos:line="132" pos:column="43">.</op:operator><name pos:line="132" pos:column="44">SetState</name></name><argument_list pos:line="132" pos:column="52">(<argument><expr><name pos:line="132" pos:column="53">SCE_V_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then> <else pos:line="133" pos:column="27">else <if pos:line="133" pos:column="32">if <condition pos:line="133" pos:column="35">(<expr><name><name pos:line="133" pos:column="36">sc</name><op:operator pos:line="133" pos:column="38">.</op:operator><name pos:line="133" pos:column="39">ch</name></name> <op:operator pos:line="133" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="133" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="133" pos:column="50"> <block pos:line="133" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="134" pos:column="33">sc</name><op:operator pos:line="134" pos:column="35">.</op:operator><name pos:line="134" pos:column="36">SetState</name></name><argument_list pos:line="134" pos:column="44">(<argument><expr><name pos:line="134" pos:column="45">SCE_V_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="135" pos:column="27">else <if pos:line="135" pos:column="32">if <condition pos:line="135" pos:column="35">(<expr><name><name pos:line="135" pos:column="36">sc</name><op:operator pos:line="135" pos:column="38">.</op:operator><name pos:line="135" pos:column="39">ch</name></name> <op:operator pos:line="135" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="135" pos:column="45">'`'</lit:literal></expr>)</condition><then pos:line="135" pos:column="49"> <block pos:line="135" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="136" pos:column="33">sc</name><op:operator pos:line="136" pos:column="35">.</op:operator><name pos:line="136" pos:column="36">SetState</name></name><argument_list pos:line="136" pos:column="44">(<argument><expr><name pos:line="136" pos:column="45">SCE_V_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="137" pos:column="33">// Skip whitespace between ` and preprocessor word</comment>
				<do pos:line="138" pos:column="33">do <block pos:line="138" pos:column="36">{
					<expr_stmt><expr><call><name><name pos:line="139" pos:column="41">sc</name><op:operator pos:line="139" pos:column="43">.</op:operator><name pos:line="139" pos:column="44">Forward</name></name><argument_list pos:line="139" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="140" pos:column="41">(<expr><op:operator pos:line="140" pos:column="42">(</op:operator><name><name pos:line="140" pos:column="43">sc</name><op:operator pos:line="140" pos:column="45">.</op:operator><name pos:line="140" pos:column="46">ch</name></name> <op:operator pos:line="140" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="52">' '</lit:literal> <op:operator pos:line="140" pos:column="56">||</op:operator> <name><name pos:line="140" pos:column="59">sc</name><op:operator pos:line="140" pos:column="61">.</op:operator><name pos:line="140" pos:column="62">ch</name></name> <op:operator pos:line="140" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="68">'\t'</lit:literal><op:operator pos:line="140" pos:column="72">)</op:operator> <op:operator pos:line="140" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="140" pos:column="77">sc</name><op:operator pos:line="140" pos:column="79">.</op:operator><name pos:line="140" pos:column="80">More</name></name><argument_list pos:line="140" pos:column="84">()</argument_list></call></expr>)</condition>;</do>
				<if pos:line="141" pos:column="33">if <condition pos:line="141" pos:column="36">(<expr><name><name pos:line="141" pos:column="37">sc</name><op:operator pos:line="141" pos:column="39">.</op:operator><name pos:line="141" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="141" pos:column="50"> <block pos:line="141" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="142" pos:column="41">sc</name><op:operator pos:line="142" pos:column="43">.</op:operator><name pos:line="142" pos:column="44">SetState</name></name><argument_list pos:line="142" pos:column="52">(<argument><expr><name pos:line="142" pos:column="53">SCE_V_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="144" pos:column="27">else <if pos:line="144" pos:column="32">if <condition pos:line="144" pos:column="35">(<expr><call><name pos:line="144" pos:column="36">isoperator</name><argument_list pos:line="144" pos:column="46">(<argument><expr><call><name><name pos:line="144" pos:column="47">static_cast</name><argument_list pos:line="144" pos:column="58">&lt;<argument><expr><name pos:line="144" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="144" pos:column="64">(<argument><expr><name><name pos:line="144" pos:column="65">sc</name><op:operator pos:line="144" pos:column="67">.</op:operator><name pos:line="144" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="144" pos:column="73">||</op:operator> <name><name pos:line="144" pos:column="76">sc</name><op:operator pos:line="144" pos:column="78">.</op:operator><name pos:line="144" pos:column="79">ch</name></name> <op:operator pos:line="144" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="85">'@'</lit:literal> <op:operator pos:line="144" pos:column="89">||</op:operator> <name><name pos:line="144" pos:column="92">sc</name><op:operator pos:line="144" pos:column="94">.</op:operator><name pos:line="144" pos:column="95">ch</name></name> <op:operator pos:line="144" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="101">'#'</lit:literal></expr>)</condition><then pos:line="144" pos:column="105"> <block pos:line="144" pos:column="106">{
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">sc</name><op:operator pos:line="145" pos:column="35">.</op:operator><name pos:line="145" pos:column="36">SetState</name></name><argument_list pos:line="145" pos:column="44">(<argument><expr><name pos:line="145" pos:column="45">SCE_V_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="149" pos:column="9">sc</name><op:operator pos:line="149" pos:column="11">.</op:operator><name pos:line="149" pos:column="12">Complete</name></name><argument_list pos:line="149" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="152" pos:column="1">static</specifier> <name pos:line="152" pos:column="8">bool</name></type> <name pos:line="152" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="152" pos:column="33">(<param><decl><type><name pos:line="152" pos:column="34">int</name></type> <name pos:line="152" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="152" pos:column="45">{
	<return pos:line="153" pos:column="9">return <expr><name pos:line="153" pos:column="16">style</name> <op:operator pos:line="153" pos:column="22">==</op:operator> <name pos:line="153" pos:column="25">SCE_V_COMMENT</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="156" pos:column="1">static</specifier> <name pos:line="156" pos:column="8">bool</name></type> <name pos:line="156" pos:column="13">IsCommentLine</name><parameter_list pos:line="156" pos:column="26">(<param><decl><type><name pos:line="156" pos:column="27">int</name></type> <name pos:line="156" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="156" pos:column="37">Accessor</name> <type:modifier pos:line="156" pos:column="46">&amp;</type:modifier></type><name pos:line="156" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="156" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">int</name></type> <name pos:line="157" pos:column="13">pos</name> <init pos:line="157" pos:column="17">= <expr><call><name><name pos:line="157" pos:column="19">styler</name><op:operator pos:line="157" pos:column="25">.</op:operator><name pos:line="157" pos:column="26">LineStart</name></name><argument_list pos:line="157" pos:column="35">(<argument><expr><name pos:line="157" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">int</name></type> <name pos:line="158" pos:column="13">eolPos</name> <init pos:line="158" pos:column="20">= <expr><call><name><name pos:line="158" pos:column="22">styler</name><op:operator pos:line="158" pos:column="28">.</op:operator><name pos:line="158" pos:column="29">LineStart</name></name><argument_list pos:line="158" pos:column="38">(<argument><expr><name pos:line="158" pos:column="39">line</name> <op:operator pos:line="158" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="158" pos:column="46">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="158" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="158" pos:column="51">1</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="159" pos:column="9">for (<init><decl><type><name pos:line="159" pos:column="14">int</name></type> <name pos:line="159" pos:column="18">i</name> <init pos:line="159" pos:column="20">= <expr><name pos:line="159" pos:column="22">pos</name></expr></init></decl>;</init> <condition><expr><name pos:line="159" pos:column="27">i</name> <op:operator pos:line="159" pos:column="29">&lt;</op:operator> <name pos:line="159" pos:column="31">eolPos</name></expr>;</condition> <incr><expr><name pos:line="159" pos:column="39">i</name><op:operator pos:line="159" pos:column="40">++</op:operator></expr></incr>) <block pos:line="159" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="160" pos:column="17">char</name></type> <name pos:line="160" pos:column="22">ch</name> <init pos:line="160" pos:column="25">= <expr><name><name pos:line="160" pos:column="27">styler</name><index pos:line="160" pos:column="33">[<expr><name pos:line="160" pos:column="34">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="161" pos:column="17">char</name></type> <name pos:line="161" pos:column="22">chNext</name> <init pos:line="161" pos:column="29">= <expr><call><name><name pos:line="161" pos:column="31">styler</name><op:operator pos:line="161" pos:column="37">.</op:operator><name pos:line="161" pos:column="38">SafeGetCharAt</name></name><argument_list pos:line="161" pos:column="51">(<argument><expr><name pos:line="161" pos:column="52">i</name> <op:operator pos:line="161" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="161" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="162" pos:column="17">int</name></type> <name pos:line="162" pos:column="21">style</name> <init pos:line="162" pos:column="27">= <expr><call><name><name pos:line="162" pos:column="29">styler</name><op:operator pos:line="162" pos:column="35">.</op:operator><name pos:line="162" pos:column="36">StyleAt</name></name><argument_list pos:line="162" pos:column="43">(<argument><expr><name pos:line="162" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="163" pos:column="17">if <condition pos:line="163" pos:column="20">(<expr><name pos:line="163" pos:column="21">ch</name> <op:operator pos:line="163" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="163" pos:column="27">'/'</lit:literal> <op:operator pos:line="163" pos:column="31">&amp;&amp;</op:operator> <name pos:line="163" pos:column="34">chNext</name> <op:operator pos:line="163" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="163" pos:column="44">'/'</lit:literal> <op:operator pos:line="163" pos:column="48">&amp;&amp;</op:operator>
		   <op:operator pos:line="164" pos:column="20">(</op:operator><name pos:line="164" pos:column="21">style</name> <op:operator pos:line="164" pos:column="27">==</op:operator> <name pos:line="164" pos:column="30">SCE_V_COMMENTLINE</name> <op:operator pos:line="164" pos:column="48">||</op:operator> <name pos:line="164" pos:column="51">style</name> <op:operator pos:line="164" pos:column="57">==</op:operator> <name pos:line="164" pos:column="60">SCE_V_COMMENTLINEBANG</name><op:operator pos:line="164" pos:column="81">)</op:operator></expr>)</condition><then pos:line="164" pos:column="83"> <block pos:line="164" pos:column="84">{
			<return pos:line="165" pos:column="25">return <expr><lit:literal type="boolean" pos:line="165" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then> <else pos:line="166" pos:column="19">else <if pos:line="166" pos:column="24">if <condition pos:line="166" pos:column="27">(<expr><op:operator pos:line="166" pos:column="28">!</op:operator><call><name pos:line="166" pos:column="29">IsASpaceOrTab</name><argument_list pos:line="166" pos:column="42">(<argument><expr><name pos:line="166" pos:column="43">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="166" pos:column="47"> <block pos:line="166" pos:column="48">{
			<return pos:line="167" pos:column="25">return <expr><lit:literal type="boolean" pos:line="167" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if></else></if>
	}</block></for>
	<return pos:line="170" pos:column="9">return <expr><lit:literal type="boolean" pos:line="170" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>
<comment type="line" pos:line="172" pos:column="1">// Store both the current line's fold level and the next lines in the</comment>
<comment type="line" pos:line="173" pos:column="1">// level store to make it easy to pick up with each increment</comment>
<comment type="line" pos:line="174" pos:column="1">// and to make it possible to fiddle the current level for "} else {".</comment>
<function><type><specifier pos:line="175" pos:column="1">static</specifier> <name pos:line="175" pos:column="8">void</name></type> <name pos:line="175" pos:column="13">FoldNoBoxVerilogDoc</name><parameter_list pos:line="175" pos:column="32">(<param><decl><type><name pos:line="175" pos:column="33">unsigned</name> <name pos:line="175" pos:column="42">int</name></type> <name pos:line="175" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="175" pos:column="56">int</name></type> <name pos:line="175" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="175" pos:column="68">int</name></type> <name pos:line="175" pos:column="72">initStyle</name></decl></param>,
                            <param><decl><type><name pos:line="176" pos:column="29">Accessor</name> <type:modifier pos:line="176" pos:column="38">&amp;</type:modifier></type><name pos:line="176" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="176" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="177" pos:column="9">bool</name></type> <name pos:line="177" pos:column="14">foldComment</name> <init pos:line="177" pos:column="26">= <expr><call><name><name pos:line="177" pos:column="28">styler</name><op:operator pos:line="177" pos:column="34">.</op:operator><name pos:line="177" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="177" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="177" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="177" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="177" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="178" pos:column="9">bool</name></type> <name pos:line="178" pos:column="14">foldPreprocessor</name> <init pos:line="178" pos:column="31">= <expr><call><name><name pos:line="178" pos:column="33">styler</name><op:operator pos:line="178" pos:column="39">.</op:operator><name pos:line="178" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="178" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="178" pos:column="55">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="178" pos:column="76">!=</op:operator> <lit:literal type="number" pos:line="178" pos:column="79">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="179" pos:column="9">bool</name></type> <name pos:line="179" pos:column="14">foldCompact</name> <init pos:line="179" pos:column="26">= <expr><call><name><name pos:line="179" pos:column="28">styler</name><op:operator pos:line="179" pos:column="34">.</op:operator><name pos:line="179" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="179" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="179" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="179" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="179" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="179" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="180" pos:column="9">bool</name></type> <name pos:line="180" pos:column="14">foldAtElse</name> <init pos:line="180" pos:column="25">= <expr><call><name><name pos:line="180" pos:column="27">styler</name><op:operator pos:line="180" pos:column="33">.</op:operator><name pos:line="180" pos:column="34">GetPropertyInt</name></name><argument_list pos:line="180" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="180" pos:column="49">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="180" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="180" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="180" pos:column="71">0</lit:literal></expr></init></decl>;</decl_stmt>
        <comment type="line" pos:line="181" pos:column="9">// Verilog specific folding options:</comment>
        <comment type="line" pos:line="182" pos:column="9">// fold_at_module -</comment>
        <comment type="line" pos:line="183" pos:column="9">//      Generally used methodology in verilog code is</comment>
        <comment type="line" pos:line="184" pos:column="9">//      one module per file, so folding at module definition is useless.</comment>
        <comment type="line" pos:line="185" pos:column="9">// fold_at_brace/parenthese -</comment>
        <comment type="line" pos:line="186" pos:column="9">//      Folding of long port lists can be convenient.</comment>
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">bool</name></type> <name pos:line="187" pos:column="14">foldAtModule</name> <init pos:line="187" pos:column="27">= <expr><call><name><name pos:line="187" pos:column="29">styler</name><op:operator pos:line="187" pos:column="35">.</op:operator><name pos:line="187" pos:column="36">GetPropertyInt</name></name><argument_list pos:line="187" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="187" pos:column="51">"fold.verilog.flags"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="187" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="187" pos:column="76">!=</op:operator> <lit:literal type="number" pos:line="187" pos:column="79">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="188" pos:column="9">bool</name></type> <name pos:line="188" pos:column="14">foldAtBrace</name>  <init pos:line="188" pos:column="27">= <expr><lit:literal type="number" pos:line="188" pos:column="29">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="189" pos:column="9">bool</name></type> <name pos:line="189" pos:column="14">foldAtParenthese</name>  <init pos:line="189" pos:column="32">= <expr><lit:literal type="number" pos:line="189" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="191" pos:column="9">unsigned</name> <name pos:line="191" pos:column="18">int</name></type> <name pos:line="191" pos:column="22">endPos</name> <init pos:line="191" pos:column="29">= <expr><name pos:line="191" pos:column="31">startPos</name> <op:operator pos:line="191" pos:column="40">+</op:operator> <name pos:line="191" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="192" pos:column="9">int</name></type> <name pos:line="192" pos:column="13">visibleChars</name> <init pos:line="192" pos:column="26">= <expr><lit:literal type="number" pos:line="192" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="193" pos:column="9">int</name></type> <name pos:line="193" pos:column="13">lineCurrent</name> <init pos:line="193" pos:column="25">= <expr><call><name><name pos:line="193" pos:column="27">styler</name><op:operator pos:line="193" pos:column="33">.</op:operator><name pos:line="193" pos:column="34">GetLine</name></name><argument_list pos:line="193" pos:column="41">(<argument><expr><name pos:line="193" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="194" pos:column="9">int</name></type> <name pos:line="194" pos:column="13">levelCurrent</name> <init pos:line="194" pos:column="26">= <expr><name pos:line="194" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="195" pos:column="9">if <condition pos:line="195" pos:column="12">(<expr><name pos:line="195" pos:column="13">lineCurrent</name> <op:operator pos:line="195" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="195" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="195" pos:column="29">
		<expr_stmt><expr><name pos:line="196" pos:column="17">levelCurrent</name> <op:operator pos:line="196" pos:column="30">=</op:operator> <call><name><name pos:line="196" pos:column="32">styler</name><op:operator pos:line="196" pos:column="38">.</op:operator><name pos:line="196" pos:column="39">LevelAt</name></name><argument_list pos:line="196" pos:column="46">(<argument><expr><name pos:line="196" pos:column="47">lineCurrent</name><op:operator pos:line="196" pos:column="58">-</op:operator><lit:literal type="number" pos:line="196" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="196" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="196" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="197" pos:column="9">int</name></type> <name pos:line="197" pos:column="13">levelMinCurrent</name> <init pos:line="197" pos:column="29">= <expr><name pos:line="197" pos:column="31">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="198" pos:column="9">int</name></type> <name pos:line="198" pos:column="13">levelNext</name> <init pos:line="198" pos:column="23">= <expr><name pos:line="198" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="199" pos:column="9">char</name></type> <name pos:line="199" pos:column="14">chNext</name> <init pos:line="199" pos:column="21">= <expr><name><name pos:line="199" pos:column="23">styler</name><index pos:line="199" pos:column="29">[<expr><name pos:line="199" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="200" pos:column="9">int</name></type> <name pos:line="200" pos:column="13">styleNext</name> <init pos:line="200" pos:column="23">= <expr><call><name><name pos:line="200" pos:column="25">styler</name><op:operator pos:line="200" pos:column="31">.</op:operator><name pos:line="200" pos:column="32">StyleAt</name></name><argument_list pos:line="200" pos:column="39">(<argument><expr><name pos:line="200" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="201" pos:column="9">int</name></type> <name pos:line="201" pos:column="13">style</name> <init pos:line="201" pos:column="19">= <expr><name pos:line="201" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<for pos:line="202" pos:column="9">for (<init><decl><type><name pos:line="202" pos:column="14">unsigned</name> <name pos:line="202" pos:column="23">int</name></type> <name pos:line="202" pos:column="27">i</name> <init pos:line="202" pos:column="29">= <expr><name pos:line="202" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="202" pos:column="41">i</name> <op:operator pos:line="202" pos:column="43">&lt;</op:operator> <name pos:line="202" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="202" pos:column="53">i</name><op:operator pos:line="202" pos:column="54">++</op:operator></expr></incr>) <block pos:line="202" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="203" pos:column="17">char</name></type> <name pos:line="203" pos:column="22">ch</name> <init pos:line="203" pos:column="25">= <expr><name pos:line="203" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="204" pos:column="17">chNext</name> <op:operator pos:line="204" pos:column="24">=</op:operator> <call><name><name pos:line="204" pos:column="26">styler</name><op:operator pos:line="204" pos:column="32">.</op:operator><name pos:line="204" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="204" pos:column="46">(<argument><expr><name pos:line="204" pos:column="47">i</name> <op:operator pos:line="204" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="204" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="205" pos:column="17">int</name></type> <name pos:line="205" pos:column="21">stylePrev</name> <init pos:line="205" pos:column="31">= <expr><name pos:line="205" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="206" pos:column="17">style</name> <op:operator pos:line="206" pos:column="23">=</op:operator> <name pos:line="206" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="207" pos:column="17">styleNext</name> <op:operator pos:line="207" pos:column="27">=</op:operator> <call><name><name pos:line="207" pos:column="29">styler</name><op:operator pos:line="207" pos:column="35">.</op:operator><name pos:line="207" pos:column="36">StyleAt</name></name><argument_list pos:line="207" pos:column="43">(<argument><expr><name pos:line="207" pos:column="44">i</name> <op:operator pos:line="207" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="207" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="208" pos:column="17">bool</name></type> <name pos:line="208" pos:column="22">atEOL</name> <init pos:line="208" pos:column="28">= <expr><op:operator pos:line="208" pos:column="30">(</op:operator><name pos:line="208" pos:column="31">ch</name> <op:operator pos:line="208" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="208" pos:column="37">'\r'</lit:literal> <op:operator pos:line="208" pos:column="42">&amp;&amp;</op:operator> <name pos:line="208" pos:column="45">chNext</name> <op:operator pos:line="208" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="208" pos:column="55">'\n'</lit:literal><op:operator pos:line="208" pos:column="59">)</op:operator> <op:operator pos:line="208" pos:column="61">||</op:operator> <op:operator pos:line="208" pos:column="64">(</op:operator><name pos:line="208" pos:column="65">ch</name> <op:operator pos:line="208" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="208" pos:column="71">'\n'</lit:literal><op:operator pos:line="208" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="209" pos:column="17">if <condition pos:line="209" pos:column="20">(<expr><name pos:line="209" pos:column="21">foldComment</name> <op:operator pos:line="209" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="209" pos:column="36">IsStreamCommentStyle</name><argument_list pos:line="209" pos:column="56">(<argument><expr><name pos:line="209" pos:column="57">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="209" pos:column="64"> <block pos:line="209" pos:column="65">{
			<if pos:line="210" pos:column="25">if <condition pos:line="210" pos:column="28">(<expr><op:operator pos:line="210" pos:column="29">!</op:operator><call><name pos:line="210" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="210" pos:column="50">(<argument><expr><name pos:line="210" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="210" pos:column="62"> <block pos:line="210" pos:column="63">{
				<expr_stmt><expr><name pos:line="211" pos:column="33">levelNext</name><op:operator pos:line="211" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="212" pos:column="27">else <if pos:line="212" pos:column="32">if <condition pos:line="212" pos:column="35">(<expr><op:operator pos:line="212" pos:column="36">!</op:operator><call><name pos:line="212" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="212" pos:column="57">(<argument><expr><name pos:line="212" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="212" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="212" pos:column="72">!</op:operator><name pos:line="212" pos:column="73">atEOL</name></expr>)</condition><then pos:line="212" pos:column="79"> <block pos:line="212" pos:column="80">{
				<comment type="line" pos:line="213" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="214" pos:column="33">levelNext</name><op:operator pos:line="214" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="217" pos:column="17">if <condition pos:line="217" pos:column="20">(<expr><name pos:line="217" pos:column="21">foldComment</name> <op:operator pos:line="217" pos:column="33">&amp;&amp;</op:operator> <name pos:line="217" pos:column="36">atEOL</name> <op:operator pos:line="217" pos:column="42">&amp;&amp;</op:operator> <call><name pos:line="217" pos:column="45">IsCommentLine</name><argument_list pos:line="217" pos:column="58">(<argument><expr><name pos:line="217" pos:column="59">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="72">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="217" pos:column="80">
		<block pos:line="218" pos:column="17">{
			<if pos:line="219" pos:column="25">if <condition pos:line="219" pos:column="28">(<expr><op:operator pos:line="219" pos:column="29">!</op:operator><call><name pos:line="219" pos:column="30">IsCommentLine</name><argument_list pos:line="219" pos:column="43">(<argument><expr><name pos:line="219" pos:column="44">lineCurrent</name> <op:operator pos:line="219" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="219" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="219" pos:column="61">styler</name></expr></argument>)</argument_list></call>
			    <op:operator pos:line="220" pos:column="29">&amp;&amp;</op:operator> <call><name pos:line="220" pos:column="32">IsCommentLine</name><argument_list pos:line="220" pos:column="45">(<argument><expr><name pos:line="220" pos:column="46">lineCurrent</name> <op:operator pos:line="220" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="220" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="220" pos:column="63">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="220" pos:column="71">
				<expr_stmt><expr><name pos:line="221" pos:column="33">levelNext</name><op:operator pos:line="221" pos:column="42">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="222" pos:column="25">else <if pos:line="222" pos:column="30">if <condition pos:line="222" pos:column="33">(<expr><call><name pos:line="222" pos:column="34">IsCommentLine</name><argument_list pos:line="222" pos:column="47">(<argument><expr><name pos:line="222" pos:column="48">lineCurrent</name> <op:operator pos:line="222" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="222" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="65">styler</name></expr></argument>)</argument_list></call>
			         <op:operator pos:line="223" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="223" pos:column="37">!</op:operator><call><name pos:line="223" pos:column="38">IsCommentLine</name><argument_list pos:line="223" pos:column="51">(<argument><expr><name pos:line="223" pos:column="52">lineCurrent</name><op:operator pos:line="223" pos:column="63">+</op:operator><lit:literal type="number" pos:line="223" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="223" pos:column="67">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="223" pos:column="75">
				<expr_stmt><expr><name pos:line="224" pos:column="33">levelNext</name><op:operator pos:line="224" pos:column="42">--</op:operator></expr>;</expr_stmt></then></if></else></if>
		}</block></then></if>
		<if pos:line="226" pos:column="17">if <condition pos:line="226" pos:column="20">(<expr><name pos:line="226" pos:column="21">foldComment</name> <op:operator pos:line="226" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="226" pos:column="36">(</op:operator><name pos:line="226" pos:column="37">style</name> <op:operator pos:line="226" pos:column="43">==</op:operator> <name pos:line="226" pos:column="46">SCE_V_COMMENTLINE</name><op:operator pos:line="226" pos:column="63">)</op:operator></expr>)</condition><then pos:line="226" pos:column="65"> <block pos:line="226" pos:column="66">{
			<if pos:line="227" pos:column="25">if <condition pos:line="227" pos:column="28">(<expr><op:operator pos:line="227" pos:column="29">(</op:operator><name pos:line="227" pos:column="30">ch</name> <op:operator pos:line="227" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="227" pos:column="36">'/'</lit:literal><op:operator pos:line="227" pos:column="39">)</op:operator> <op:operator pos:line="227" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="227" pos:column="44">(</op:operator><name pos:line="227" pos:column="45">chNext</name> <op:operator pos:line="227" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="227" pos:column="55">'/'</lit:literal><op:operator pos:line="227" pos:column="58">)</op:operator></expr>)</condition><then pos:line="227" pos:column="60"> <block pos:line="227" pos:column="61">{
				<decl_stmt><decl><type><name pos:line="228" pos:column="33">char</name></type> <name pos:line="228" pos:column="38">chNext2</name> <init pos:line="228" pos:column="46">= <expr><call><name><name pos:line="228" pos:column="48">styler</name><op:operator pos:line="228" pos:column="54">.</op:operator><name pos:line="228" pos:column="55">SafeGetCharAt</name></name><argument_list pos:line="228" pos:column="68">(<argument><expr><name pos:line="228" pos:column="69">i</name> <op:operator pos:line="228" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="228" pos:column="73">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="229" pos:column="33">if <condition pos:line="229" pos:column="36">(<expr><name pos:line="229" pos:column="37">chNext2</name> <op:operator pos:line="229" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="229" pos:column="48">'{'</lit:literal></expr>)</condition><then pos:line="229" pos:column="52"> <block pos:line="229" pos:column="53">{
					<expr_stmt><expr><name pos:line="230" pos:column="41">levelNext</name><op:operator pos:line="230" pos:column="50">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="231" pos:column="35">else <if pos:line="231" pos:column="40">if <condition pos:line="231" pos:column="43">(<expr><name pos:line="231" pos:column="44">chNext2</name> <op:operator pos:line="231" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="231" pos:column="55">'}'</lit:literal></expr>)</condition><then pos:line="231" pos:column="59"> <block pos:line="231" pos:column="60">{
					<expr_stmt><expr><name pos:line="232" pos:column="41">levelNext</name><op:operator pos:line="232" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="236" pos:column="17">if <condition pos:line="236" pos:column="20">(<expr><name pos:line="236" pos:column="21">foldPreprocessor</name> <op:operator pos:line="236" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="236" pos:column="41">(</op:operator><name pos:line="236" pos:column="42">style</name> <op:operator pos:line="236" pos:column="48">==</op:operator> <name pos:line="236" pos:column="51">SCE_V_PREPROCESSOR</name><op:operator pos:line="236" pos:column="69">)</op:operator></expr>)</condition><then pos:line="236" pos:column="71"> <block pos:line="236" pos:column="72">{
			<if pos:line="237" pos:column="25">if <condition pos:line="237" pos:column="28">(<expr><name pos:line="237" pos:column="29">ch</name> <op:operator pos:line="237" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="237" pos:column="35">'`'</lit:literal></expr>)</condition><then pos:line="237" pos:column="39"> <block pos:line="237" pos:column="40">{
				<decl_stmt><decl><type><name pos:line="238" pos:column="33">unsigned</name> <name pos:line="238" pos:column="42">int</name></type> <name pos:line="238" pos:column="46">j</name> <init pos:line="238" pos:column="48">= <expr><name pos:line="238" pos:column="50">i</name> <op:operator pos:line="238" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="238" pos:column="54">1</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="239" pos:column="33">while <condition pos:line="239" pos:column="39">(<expr><op:operator pos:line="239" pos:column="40">(</op:operator><name pos:line="239" pos:column="41">j</name> <op:operator pos:line="239" pos:column="43">&lt;</op:operator> <name pos:line="239" pos:column="45">endPos</name><op:operator pos:line="239" pos:column="51">)</op:operator> <op:operator pos:line="239" pos:column="53">&amp;&amp;</op:operator> <call><name pos:line="239" pos:column="56">IsASpaceOrTab</name><argument_list pos:line="239" pos:column="69">(<argument><expr><call><name><name pos:line="239" pos:column="70">styler</name><op:operator pos:line="239" pos:column="76">.</op:operator><name pos:line="239" pos:column="77">SafeGetCharAt</name></name><argument_list pos:line="239" pos:column="90">(<argument><expr><name pos:line="239" pos:column="91">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="239" pos:column="96">{
					<expr_stmt><expr><name pos:line="240" pos:column="41">j</name><op:operator pos:line="240" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="242" pos:column="33">if <condition pos:line="242" pos:column="36">(<expr><call><name><name pos:line="242" pos:column="37">styler</name><op:operator pos:line="242" pos:column="43">.</op:operator><name pos:line="242" pos:column="44">Match</name></name><argument_list pos:line="242" pos:column="49">(<argument><expr><name pos:line="242" pos:column="50">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="242" pos:column="53">"if"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="242" pos:column="59"> <block pos:line="242" pos:column="60">{
					<expr_stmt><expr><name pos:line="243" pos:column="41">levelNext</name><op:operator pos:line="243" pos:column="50">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="244" pos:column="35">else <if pos:line="244" pos:column="40">if <condition pos:line="244" pos:column="43">(<expr><call><name><name pos:line="244" pos:column="44">styler</name><op:operator pos:line="244" pos:column="50">.</op:operator><name pos:line="244" pos:column="51">Match</name></name><argument_list pos:line="244" pos:column="56">(<argument><expr><name pos:line="244" pos:column="57">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="244" pos:column="60">"end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="244" pos:column="67"> <block pos:line="244" pos:column="68">{
					<expr_stmt><expr><name pos:line="245" pos:column="41">levelNext</name><op:operator pos:line="245" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>
                <if pos:line="249" pos:column="17">if <condition pos:line="249" pos:column="20">(<expr><name pos:line="249" pos:column="21">style</name> <op:operator pos:line="249" pos:column="27">==</op:operator> <name pos:line="249" pos:column="30">SCE_V_OPERATOR</name></expr>)</condition><then pos:line="249" pos:column="45"> <block pos:line="249" pos:column="46">{
                    <if pos:line="250" pos:column="21">if <condition pos:line="250" pos:column="24">(<expr><name pos:line="250" pos:column="25">foldAtParenthese</name></expr>)</condition><then pos:line="250" pos:column="42"> <block pos:line="250" pos:column="43">{
			<if pos:line="251" pos:column="25">if <condition pos:line="251" pos:column="28">(<expr><name pos:line="251" pos:column="29">ch</name> <op:operator pos:line="251" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="251" pos:column="35">'('</lit:literal></expr>)</condition><then pos:line="251" pos:column="39"> <block pos:line="251" pos:column="40">{
				<expr_stmt><expr><name pos:line="252" pos:column="33">levelNext</name><op:operator pos:line="252" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="253" pos:column="27">else <if pos:line="253" pos:column="32">if <condition pos:line="253" pos:column="35">(<expr><name pos:line="253" pos:column="36">ch</name> <op:operator pos:line="253" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="253" pos:column="42">')'</lit:literal></expr>)</condition><then pos:line="253" pos:column="46"> <block pos:line="253" pos:column="47">{
				<expr_stmt><expr><name pos:line="254" pos:column="33">levelNext</name><op:operator pos:line="254" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
                    }</block></then></if>
		}</block></then></if>
                <if pos:line="258" pos:column="17">if <condition pos:line="258" pos:column="20">(<expr><name pos:line="258" pos:column="21">style</name> <op:operator pos:line="258" pos:column="27">==</op:operator> <name pos:line="258" pos:column="30">SCE_V_OPERATOR</name></expr>)</condition><then pos:line="258" pos:column="45"> <block pos:line="258" pos:column="46">{
                    <if pos:line="259" pos:column="21">if <condition pos:line="259" pos:column="24">(<expr><name pos:line="259" pos:column="25">foldAtBrace</name></expr>)</condition><then pos:line="259" pos:column="37"> <block pos:line="259" pos:column="38">{
			<if pos:line="260" pos:column="25">if <condition pos:line="260" pos:column="28">(<expr><name pos:line="260" pos:column="29">ch</name> <op:operator pos:line="260" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="260" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="260" pos:column="39"> <block pos:line="260" pos:column="40">{
				<expr_stmt><expr><name pos:line="261" pos:column="33">levelNext</name><op:operator pos:line="261" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="262" pos:column="27">else <if pos:line="262" pos:column="32">if <condition pos:line="262" pos:column="35">(<expr><name pos:line="262" pos:column="36">ch</name> <op:operator pos:line="262" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="262" pos:column="46"> <block pos:line="262" pos:column="47">{
				<expr_stmt><expr><name pos:line="263" pos:column="33">levelNext</name><op:operator pos:line="263" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
                    }</block></then></if>
		}</block></then></if>
                <if pos:line="267" pos:column="17">if <condition pos:line="267" pos:column="20">(<expr><name pos:line="267" pos:column="21">style</name> <op:operator pos:line="267" pos:column="27">==</op:operator> <name pos:line="267" pos:column="30">SCE_V_WORD</name> <op:operator pos:line="267" pos:column="41">&amp;&amp;</op:operator> <name pos:line="267" pos:column="44">stylePrev</name> <op:operator pos:line="267" pos:column="54">!=</op:operator> <name pos:line="267" pos:column="57">SCE_V_WORD</name></expr>)</condition><then pos:line="267" pos:column="68"> <block pos:line="267" pos:column="69">{
                        <decl_stmt><decl><type><name pos:line="268" pos:column="25">unsigned</name> <name pos:line="268" pos:column="34">int</name></type> <name pos:line="268" pos:column="38">j</name> <init pos:line="268" pos:column="40">= <expr><name pos:line="268" pos:column="42">i</name></expr></init></decl>;</decl_stmt>
                        <if pos:line="269" pos:column="25">if <condition pos:line="269" pos:column="28">(<expr><call><name><name pos:line="269" pos:column="29">styler</name><op:operator pos:line="269" pos:column="35">.</op:operator><name pos:line="269" pos:column="36">Match</name></name><argument_list pos:line="269" pos:column="41">(<argument><expr><name pos:line="269" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="269" pos:column="45">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="269" pos:column="53">||</op:operator>
                            <call><name><name pos:line="270" pos:column="29">styler</name><op:operator pos:line="270" pos:column="35">.</op:operator><name pos:line="270" pos:column="36">Match</name></name><argument_list pos:line="270" pos:column="41">(<argument><expr><name pos:line="270" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="270" pos:column="45">"casex"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="270" pos:column="54">||</op:operator>
                            <call><name><name pos:line="271" pos:column="29">styler</name><op:operator pos:line="271" pos:column="35">.</op:operator><name pos:line="271" pos:column="36">Match</name></name><argument_list pos:line="271" pos:column="41">(<argument><expr><name pos:line="271" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="45">"casez"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="271" pos:column="54">||</op:operator>
                            <call><name><name pos:line="272" pos:column="29">styler</name><op:operator pos:line="272" pos:column="35">.</op:operator><name pos:line="272" pos:column="36">Match</name></name><argument_list pos:line="272" pos:column="41">(<argument><expr><name pos:line="272" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="272" pos:column="45">"class"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="272" pos:column="54">||</op:operator>
                            <call><name><name pos:line="273" pos:column="29">styler</name><op:operator pos:line="273" pos:column="35">.</op:operator><name pos:line="273" pos:column="36">Match</name></name><argument_list pos:line="273" pos:column="41">(<argument><expr><name pos:line="273" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="273" pos:column="45">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="273" pos:column="57">||</op:operator>
                            <call><name><name pos:line="274" pos:column="29">styler</name><op:operator pos:line="274" pos:column="35">.</op:operator><name pos:line="274" pos:column="36">Match</name></name><argument_list pos:line="274" pos:column="41">(<argument><expr><name pos:line="274" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="274" pos:column="45">"generate"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="274" pos:column="57">||</op:operator>
                            <call><name><name pos:line="275" pos:column="29">styler</name><op:operator pos:line="275" pos:column="35">.</op:operator><name pos:line="275" pos:column="36">Match</name></name><argument_list pos:line="275" pos:column="41">(<argument><expr><name pos:line="275" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="275" pos:column="45">"covergroup"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="275" pos:column="59">||</op:operator>
                            <call><name><name pos:line="276" pos:column="29">styler</name><op:operator pos:line="276" pos:column="35">.</op:operator><name pos:line="276" pos:column="36">Match</name></name><argument_list pos:line="276" pos:column="41">(<argument><expr><name pos:line="276" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="276" pos:column="45">"package"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="276" pos:column="56">||</op:operator>
                            <call><name><name pos:line="277" pos:column="29">styler</name><op:operator pos:line="277" pos:column="35">.</op:operator><name pos:line="277" pos:column="36">Match</name></name><argument_list pos:line="277" pos:column="41">(<argument><expr><name pos:line="277" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="277" pos:column="45">"primitive"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="277" pos:column="58">||</op:operator>
                            <call><name><name pos:line="278" pos:column="29">styler</name><op:operator pos:line="278" pos:column="35">.</op:operator><name pos:line="278" pos:column="36">Match</name></name><argument_list pos:line="278" pos:column="41">(<argument><expr><name pos:line="278" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="278" pos:column="45">"program"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="278" pos:column="56">||</op:operator>
                            <call><name><name pos:line="279" pos:column="29">styler</name><op:operator pos:line="279" pos:column="35">.</op:operator><name pos:line="279" pos:column="36">Match</name></name><argument_list pos:line="279" pos:column="41">(<argument><expr><name pos:line="279" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="279" pos:column="45">"sequence"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="279" pos:column="57">||</op:operator>
                            <call><name><name pos:line="280" pos:column="29">styler</name><op:operator pos:line="280" pos:column="35">.</op:operator><name pos:line="280" pos:column="36">Match</name></name><argument_list pos:line="280" pos:column="41">(<argument><expr><name pos:line="280" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="280" pos:column="45">"specify"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="280" pos:column="56">||</op:operator>
                            <call><name><name pos:line="281" pos:column="29">styler</name><op:operator pos:line="281" pos:column="35">.</op:operator><name pos:line="281" pos:column="36">Match</name></name><argument_list pos:line="281" pos:column="41">(<argument><expr><name pos:line="281" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="281" pos:column="45">"table"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="281" pos:column="54">||</op:operator>
                            <call><name><name pos:line="282" pos:column="29">styler</name><op:operator pos:line="282" pos:column="35">.</op:operator><name pos:line="282" pos:column="36">Match</name></name><argument_list pos:line="282" pos:column="41">(<argument><expr><name pos:line="282" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="282" pos:column="45">"task"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="282" pos:column="53">||</op:operator>
                            <call><name><name pos:line="283" pos:column="29">styler</name><op:operator pos:line="283" pos:column="35">.</op:operator><name pos:line="283" pos:column="36">Match</name></name><argument_list pos:line="283" pos:column="41">(<argument><expr><name pos:line="283" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="283" pos:column="45">"fork"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="283" pos:column="53">||</op:operator>
                            <op:operator pos:line="284" pos:column="29">(</op:operator><call><name><name pos:line="284" pos:column="30">styler</name><op:operator pos:line="284" pos:column="36">.</op:operator><name pos:line="284" pos:column="37">Match</name></name><argument_list pos:line="284" pos:column="42">(<argument><expr><name pos:line="284" pos:column="43">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="46">"module"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="284" pos:column="56">&amp;&amp;</op:operator> <name pos:line="284" pos:column="59">foldAtModule</name><op:operator pos:line="284" pos:column="71">)</op:operator> <op:operator pos:line="284" pos:column="73">||</op:operator>
                            <call><name><name pos:line="285" pos:column="29">styler</name><op:operator pos:line="285" pos:column="35">.</op:operator><name pos:line="285" pos:column="36">Match</name></name><argument_list pos:line="285" pos:column="41">(<argument><expr><name pos:line="285" pos:column="42">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="285" pos:column="45">"begin"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="285" pos:column="54"> <block pos:line="285" pos:column="55">{
                                <expr_stmt><expr><name pos:line="286" pos:column="33">levelNext</name><op:operator pos:line="286" pos:column="42">++</op:operator></expr>;</expr_stmt>
                        }</block></then> <else pos:line="287" pos:column="27">else <if pos:line="287" pos:column="32">if <condition pos:line="287" pos:column="35">(<expr><call><name><name pos:line="287" pos:column="36">styler</name><op:operator pos:line="287" pos:column="42">.</op:operator><name pos:line="287" pos:column="43">Match</name></name><argument_list pos:line="287" pos:column="48">(<argument><expr><name pos:line="287" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="287" pos:column="52">"endcase"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="287" pos:column="63">||</op:operator>
                                   <call><name><name pos:line="288" pos:column="36">styler</name><op:operator pos:line="288" pos:column="42">.</op:operator><name pos:line="288" pos:column="43">Match</name></name><argument_list pos:line="288" pos:column="48">(<argument><expr><name pos:line="288" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="288" pos:column="52">"endclass"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="288" pos:column="64">||</op:operator>
                                   <call><name><name pos:line="289" pos:column="36">styler</name><op:operator pos:line="289" pos:column="42">.</op:operator><name pos:line="289" pos:column="43">Match</name></name><argument_list pos:line="289" pos:column="48">(<argument><expr><name pos:line="289" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="289" pos:column="52">"endfunction"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="289" pos:column="67">||</op:operator>
                                   <call><name><name pos:line="290" pos:column="36">styler</name><op:operator pos:line="290" pos:column="42">.</op:operator><name pos:line="290" pos:column="43">Match</name></name><argument_list pos:line="290" pos:column="48">(<argument><expr><name pos:line="290" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="290" pos:column="52">"endgenerate"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="290" pos:column="67">||</op:operator>
                                   <call><name><name pos:line="291" pos:column="36">styler</name><op:operator pos:line="291" pos:column="42">.</op:operator><name pos:line="291" pos:column="43">Match</name></name><argument_list pos:line="291" pos:column="48">(<argument><expr><name pos:line="291" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="291" pos:column="52">"endgroup"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="291" pos:column="64">||</op:operator>
                                   <call><name><name pos:line="292" pos:column="36">styler</name><op:operator pos:line="292" pos:column="42">.</op:operator><name pos:line="292" pos:column="43">Match</name></name><argument_list pos:line="292" pos:column="48">(<argument><expr><name pos:line="292" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="292" pos:column="52">"endpackage"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="292" pos:column="66">||</op:operator>
                                   <call><name><name pos:line="293" pos:column="36">styler</name><op:operator pos:line="293" pos:column="42">.</op:operator><name pos:line="293" pos:column="43">Match</name></name><argument_list pos:line="293" pos:column="48">(<argument><expr><name pos:line="293" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="293" pos:column="52">"endprimitive"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="293" pos:column="68">||</op:operator>
                                   <call><name><name pos:line="294" pos:column="36">styler</name><op:operator pos:line="294" pos:column="42">.</op:operator><name pos:line="294" pos:column="43">Match</name></name><argument_list pos:line="294" pos:column="48">(<argument><expr><name pos:line="294" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="294" pos:column="52">"endprogram"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="294" pos:column="66">||</op:operator>
                                   <call><name><name pos:line="295" pos:column="36">styler</name><op:operator pos:line="295" pos:column="42">.</op:operator><name pos:line="295" pos:column="43">Match</name></name><argument_list pos:line="295" pos:column="48">(<argument><expr><name pos:line="295" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="295" pos:column="52">"endsequence"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="295" pos:column="67">||</op:operator>
                                   <call><name><name pos:line="296" pos:column="36">styler</name><op:operator pos:line="296" pos:column="42">.</op:operator><name pos:line="296" pos:column="43">Match</name></name><argument_list pos:line="296" pos:column="48">(<argument><expr><name pos:line="296" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="296" pos:column="52">"endspecify"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="296" pos:column="66">||</op:operator>
                                   <call><name><name pos:line="297" pos:column="36">styler</name><op:operator pos:line="297" pos:column="42">.</op:operator><name pos:line="297" pos:column="43">Match</name></name><argument_list pos:line="297" pos:column="48">(<argument><expr><name pos:line="297" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="297" pos:column="52">"endtable"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="297" pos:column="64">||</op:operator>
                                   <call><name><name pos:line="298" pos:column="36">styler</name><op:operator pos:line="298" pos:column="42">.</op:operator><name pos:line="298" pos:column="43">Match</name></name><argument_list pos:line="298" pos:column="48">(<argument><expr><name pos:line="298" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="298" pos:column="52">"endtask"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="298" pos:column="63">||</op:operator>
                                   <call><name><name pos:line="299" pos:column="36">styler</name><op:operator pos:line="299" pos:column="42">.</op:operator><name pos:line="299" pos:column="43">Match</name></name><argument_list pos:line="299" pos:column="48">(<argument><expr><name pos:line="299" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="299" pos:column="52">"join"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="299" pos:column="60">||</op:operator>
                                   <call><name><name pos:line="300" pos:column="36">styler</name><op:operator pos:line="300" pos:column="42">.</op:operator><name pos:line="300" pos:column="43">Match</name></name><argument_list pos:line="300" pos:column="48">(<argument><expr><name pos:line="300" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="300" pos:column="52">"join_any"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="300" pos:column="64">||</op:operator>
                                   <call><name><name pos:line="301" pos:column="36">styler</name><op:operator pos:line="301" pos:column="42">.</op:operator><name pos:line="301" pos:column="43">Match</name></name><argument_list pos:line="301" pos:column="48">(<argument><expr><name pos:line="301" pos:column="49">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="301" pos:column="52">"join_none"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="301" pos:column="65">||</op:operator>
                                   <op:operator pos:line="302" pos:column="36">(</op:operator><call><name><name pos:line="302" pos:column="37">styler</name><op:operator pos:line="302" pos:column="43">.</op:operator><name pos:line="302" pos:column="44">Match</name></name><argument_list pos:line="302" pos:column="49">(<argument><expr><name pos:line="302" pos:column="50">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="302" pos:column="53">"endmodule"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="302" pos:column="66">&amp;&amp;</op:operator> <name pos:line="302" pos:column="69">foldAtModule</name><op:operator pos:line="302" pos:column="81">)</op:operator> <op:operator pos:line="302" pos:column="83">||</op:operator>
                                   <op:operator pos:line="303" pos:column="36">(</op:operator><call><name><name pos:line="303" pos:column="37">styler</name><op:operator pos:line="303" pos:column="43">.</op:operator><name pos:line="303" pos:column="44">Match</name></name><argument_list pos:line="303" pos:column="49">(<argument><expr><name pos:line="303" pos:column="50">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="303" pos:column="53">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="303" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="303" pos:column="63">!</op:operator><call><name pos:line="303" pos:column="64">IsAWordChar</name><argument_list pos:line="303" pos:column="75">(<argument><expr><call><name><name pos:line="303" pos:column="76">styler</name><op:operator pos:line="303" pos:column="82">.</op:operator><name pos:line="303" pos:column="83">SafeGetCharAt</name></name><argument_list pos:line="303" pos:column="96">(<argument><expr><name pos:line="303" pos:column="97">j</name><op:operator pos:line="303" pos:column="98">+</op:operator><lit:literal type="number" pos:line="303" pos:column="99">3</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="303" pos:column="102">)</op:operator></expr>)</condition><then pos:line="303" pos:column="104"> <block pos:line="303" pos:column="105">{
                                <expr_stmt><expr><name pos:line="304" pos:column="33">levelNext</name><op:operator pos:line="304" pos:column="42">--</op:operator></expr>;</expr_stmt>
                        }</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="307" pos:column="17">if <condition pos:line="307" pos:column="20">(<expr><name pos:line="307" pos:column="21">atEOL</name></expr>)</condition><then pos:line="307" pos:column="27"> <block pos:line="307" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="308" pos:column="25">int</name></type> <name pos:line="308" pos:column="29">levelUse</name> <init pos:line="308" pos:column="38">= <expr><name pos:line="308" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<if pos:line="309" pos:column="25">if <condition pos:line="309" pos:column="28">(<expr><name pos:line="309" pos:column="29">foldAtElse</name></expr>)</condition><then pos:line="309" pos:column="40"> <block pos:line="309" pos:column="41">{
				<expr_stmt><expr><name pos:line="310" pos:column="33">levelUse</name> <op:operator pos:line="310" pos:column="42">=</op:operator> <name pos:line="310" pos:column="44">levelMinCurrent</name></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="312" pos:column="25">int</name></type> <name pos:line="312" pos:column="29">lev</name> <init pos:line="312" pos:column="33">= <expr><name pos:line="312" pos:column="35">levelUse</name> <op:operator pos:line="312" pos:column="44">|</op:operator> <name pos:line="312" pos:column="46">levelNext</name> <op:operator pos:line="312" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="312" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="313" pos:column="25">if <condition pos:line="313" pos:column="28">(<expr><name pos:line="313" pos:column="29">visibleChars</name> <op:operator pos:line="313" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="313" pos:column="45">0</lit:literal> <op:operator pos:line="313" pos:column="47">&amp;&amp;</op:operator> <name pos:line="313" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="313" pos:column="62">
				<expr_stmt><expr><name pos:line="314" pos:column="33">lev</name> <op:operator pos:line="314" pos:column="37">|=</op:operator> <name pos:line="314" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="315" pos:column="25">if <condition pos:line="315" pos:column="28">(<expr><name pos:line="315" pos:column="29">levelUse</name> <op:operator pos:line="315" pos:column="38">&lt;</op:operator> <name pos:line="315" pos:column="40">levelNext</name></expr>)</condition><then pos:line="315" pos:column="50">
				<expr_stmt><expr><name pos:line="316" pos:column="33">lev</name> <op:operator pos:line="316" pos:column="37">|=</op:operator> <name pos:line="316" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="317" pos:column="25">if <condition pos:line="317" pos:column="28">(<expr><name pos:line="317" pos:column="29">lev</name> <op:operator pos:line="317" pos:column="33">!=</op:operator> <call><name><name pos:line="317" pos:column="36">styler</name><op:operator pos:line="317" pos:column="42">.</op:operator><name pos:line="317" pos:column="43">LevelAt</name></name><argument_list pos:line="317" pos:column="50">(<argument><expr><name pos:line="317" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="317" pos:column="64"> <block pos:line="317" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="318" pos:column="33">styler</name><op:operator pos:line="318" pos:column="39">.</op:operator><name pos:line="318" pos:column="40">SetLevel</name></name><argument_list pos:line="318" pos:column="48">(<argument><expr><name pos:line="318" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="318" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="320" pos:column="25">lineCurrent</name><op:operator pos:line="320" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="321" pos:column="25">levelCurrent</name> <op:operator pos:line="321" pos:column="38">=</op:operator> <name pos:line="321" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="322" pos:column="25">levelMinCurrent</name> <op:operator pos:line="322" pos:column="41">=</op:operator> <name pos:line="322" pos:column="43">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="323" pos:column="25">visibleChars</name> <op:operator pos:line="323" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="323" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="325" pos:column="17">if <condition pos:line="325" pos:column="20">(<expr><op:operator pos:line="325" pos:column="21">!</op:operator><call><name pos:line="325" pos:column="22">isspacechar</name><argument_list pos:line="325" pos:column="33">(<argument><expr><name pos:line="325" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="325" pos:column="38">
			<expr_stmt><expr><name pos:line="326" pos:column="25">visibleChars</name><op:operator pos:line="326" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="330" pos:column="1">static</specifier> <name pos:line="330" pos:column="8">void</name></type> <name pos:line="330" pos:column="13">FoldVerilogDoc</name><parameter_list pos:line="330" pos:column="27">(<param><decl><type><name pos:line="330" pos:column="28">unsigned</name> <name pos:line="330" pos:column="37">int</name></type> <name pos:line="330" pos:column="41">startPos</name></decl></param>, <param><decl><type><name pos:line="330" pos:column="51">int</name></type> <name pos:line="330" pos:column="55">length</name></decl></param>, <param><decl><type><name pos:line="330" pos:column="63">int</name></type> <name pos:line="330" pos:column="67">initStyle</name></decl></param>, <param><decl><type><name><name pos:line="330" pos:column="78">WordList</name> <type:modifier pos:line="330" pos:column="87">*</type:modifier><index pos:line="330" pos:column="88">[]</index></name></type></decl></param>,
                       <param><decl><type><name pos:line="331" pos:column="24">Accessor</name> <type:modifier pos:line="331" pos:column="33">&amp;</type:modifier></type><name pos:line="331" pos:column="34">styler</name></decl></param>)</parameter_list> <block pos:line="331" pos:column="42">{
	<expr_stmt><expr><call><name pos:line="332" pos:column="9">FoldNoBoxVerilogDoc</name><argument_list pos:line="332" pos:column="28">(<argument><expr><name pos:line="332" pos:column="29">startPos</name></expr></argument>, <argument><expr><name pos:line="332" pos:column="39">length</name></expr></argument>, <argument><expr><name pos:line="332" pos:column="47">initStyle</name></expr></argument>, <argument><expr><name pos:line="332" pos:column="58">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="335" pos:column="1">static</specifier> <specifier pos:line="335" pos:column="8">const</specifier> <name pos:line="335" pos:column="14">char</name> <type:modifier pos:line="335" pos:column="19">*</type:modifier> <specifier pos:line="335" pos:column="21">const</specifier></type> <name><name pos:line="335" pos:column="27">verilogWordLists</name><index pos:line="335" pos:column="43">[]</index></name> <init pos:line="335" pos:column="46">= <expr><block pos:line="335" pos:column="48">{
            <expr><lit:literal type="string" pos:line="336" pos:column="13">"Primary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="337" pos:column="13">"Secondary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="338" pos:column="13">"System Tasks"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="339" pos:column="13">"User defined tasks and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="340" pos:column="13">"Unused"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="341" pos:column="13">0</lit:literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name pos:line="345" pos:column="1">LexerModule</name></type> <name pos:line="345" pos:column="13">lmVerilog</name><argument_list pos:line="345" pos:column="22">(<argument><expr><name pos:line="345" pos:column="23">SCLEX_VERILOG</name></expr></argument>, <argument><expr><name pos:line="345" pos:column="38">ColouriseVerilogDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="345" pos:column="59">"verilog"</lit:literal></expr></argument>, <argument><expr><name pos:line="345" pos:column="70">FoldVerilogDoc</name></expr></argument>, <argument><expr><name pos:line="345" pos:column="86">verilogWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
