<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\boostregex\BoostRegExSearch.cxx" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/**
 * Copyright (c) since 2009 Simon Steele - http://untidy.net/
 * Based on the work of Simon Steele for Programmer's Notepad 2 (http://untidy.net)
 * Converted from boost::xpressive to boost::regex and performance improvements 
 * (principally caching the compiled regex), and support for UTF8 encoded text
 * (c) 2012 Dave Brotherstone - Changes for boost::regex
 *
 * 
 */</comment>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;iterator&gt;</cpp:file></cpp:include> 
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"CellBuffer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"CharClassify.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Decoration.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Document.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"UniConversion.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"UTF8DocumentIterator.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"AnsiDocumentIterator.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"BoostRegexSearch.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file pos:line="26" pos:column="10">&lt;boost/regex.hpp&gt;</cpp:file></cpp:include>
<cpp:define pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="27" pos:column="9">CP_UTF8</name></cpp:macro> <cpp:value pos:line="27" pos:column="17">65001</cpp:value></cpp:define>
<cpp:define pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="28" pos:column="9">SC_CP_UTF8</name></cpp:macro> <cpp:value pos:line="28" pos:column="20">65001</cpp:value></cpp:define>



<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef</cpp:directive> <name pos:line="32" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="33" pos:column="1">using namespace <name pos:line="33" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif>

<using pos:line="36" pos:column="1">using namespace <name pos:line="36" pos:column="17">boost</name>;</using>


<typedef pos:line="39" pos:column="1">typedef <type><name><name pos:line="39" pos:column="9">basic_regex</name><argument_list pos:line="39" pos:column="20">&lt;<argument><expr><name pos:line="39" pos:column="21">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="39" pos:column="27">charregex_t</name>;</typedef>
<typedef pos:line="40" pos:column="1">typedef <type><name><name pos:line="40" pos:column="9">boost</name><op:operator pos:line="40" pos:column="14">::</op:operator><name pos:line="40" pos:column="16">wregex</name></name></type> <name pos:line="40" pos:column="23">wcharregex_t</name>;</typedef>
<comment type="line" pos:line="41" pos:column="1">// , std::vector&lt;boost::sub_match&lt;DocumentIterator&gt; &gt;::allocator_type</comment>
<typedef pos:line="42" pos:column="1">typedef <type><name><name pos:line="42" pos:column="9">match_results</name><argument_list pos:line="42" pos:column="22">&lt;<argument><expr><name pos:line="42" pos:column="23">UTF8DocumentIterator</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="42" pos:column="45">utf8match_t</name>;</typedef>
<typedef pos:line="43" pos:column="1">typedef <type><name><name pos:line="43" pos:column="9">match_results</name><argument_list pos:line="43" pos:column="22">&lt;<argument><expr><name pos:line="43" pos:column="23">AnsiDocumentIterator</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="43" pos:column="45">ansimatch_t</name>;</typedef>

<class pos:line="45" pos:column="1">class <name pos:line="45" pos:column="7">BoostRegexSearch</name> <super pos:line="45" pos:column="24">: <specifier pos:line="45" pos:column="26">public</specifier> <name pos:line="45" pos:column="33">RegexSearchBase</name></super>
<block pos:line="46" pos:column="1">{<private type="default" pos:line="46" pos:column="2">
</private><public pos:line="47" pos:column="1">public:
	<constructor><name pos:line="48" pos:column="9">BoostRegexSearch</name><parameter_list pos:line="48" pos:column="25">()</parameter_list> <member_list pos:line="48" pos:column="28">: <call><name pos:line="48" pos:column="30">substituted</name><argument_list pos:line="48" pos:column="41">(<argument><expr><name pos:line="48" pos:column="42">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="47">,</op:operator> <call><name pos:line="48" pos:column="49">lastCompileFlags</name><argument_list pos:line="48" pos:column="65">(<argument><expr><op:operator pos:line="48" pos:column="66">-</op:operator><lit:literal type="number" pos:line="48" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="48" pos:column="70">{}</block></constructor>
	
	<destructor><specifier pos:line="50" pos:column="9">virtual</specifier> <name pos:line="50" pos:column="17">~<name pos:line="50" pos:column="18">BoostRegexSearch</name></name><parameter_list pos:line="50" pos:column="34">()</parameter_list>
	<block pos:line="51" pos:column="9">{
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">substituted</name></expr>)</condition><then pos:line="52" pos:column="33">
		<block pos:line="53" pos:column="17">{
			<expr_stmt><expr><op:operator pos:line="54" pos:column="25">delete</op:operator> <index pos:line="54" pos:column="32">[]</index> <name pos:line="54" pos:column="35">substituted</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="55" pos:column="25">substituted</name> <op:operator pos:line="55" pos:column="37">=</op:operator> <name pos:line="55" pos:column="39">NULL</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></destructor>

	
	<function_decl><type><specifier pos:line="60" pos:column="9">virtual</specifier> <name pos:line="60" pos:column="17">long</name></type> <name pos:line="60" pos:column="22">FindText</name><parameter_list pos:line="60" pos:column="30">(<param><decl><type><name pos:line="60" pos:column="31">Document</name><type:modifier pos:line="60" pos:column="39">*</type:modifier></type> <name pos:line="60" pos:column="41">doc</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="46">int</name></type> <name pos:line="60" pos:column="50">minPos</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="58">int</name></type> <name pos:line="60" pos:column="62">maxPos</name></decl></param>, <param><decl><type><specifier pos:line="60" pos:column="70">const</specifier> <name pos:line="60" pos:column="76">char</name> <type:modifier pos:line="60" pos:column="81">*</type:modifier></type><name pos:line="60" pos:column="82">s</name></decl></param>,
                        <param><decl><type><name pos:line="61" pos:column="25">bool</name></type> <name pos:line="61" pos:column="30">caseSensitive</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="45">bool</name></type> <name pos:line="61" pos:column="50">word</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="56">bool</name></type> <name pos:line="61" pos:column="61">wordStart</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="72">int</name></type> <name pos:line="61" pos:column="76">flags</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="83">int</name> <type:modifier pos:line="61" pos:column="87">*</type:modifier></type><name pos:line="61" pos:column="88">length</name></decl></param>)</parameter_list>;</function_decl>
	

	
	<function_decl><type><specifier pos:line="65" pos:column="9">virtual</specifier> <specifier pos:line="65" pos:column="17">const</specifier> <name pos:line="65" pos:column="23">char</name> <type:modifier pos:line="65" pos:column="28">*</type:modifier></type><name pos:line="65" pos:column="29">SubstituteByPosition</name><parameter_list pos:line="65" pos:column="49">(<param><decl><type><name pos:line="65" pos:column="50">Document</name><type:modifier pos:line="65" pos:column="58">*</type:modifier></type> <name pos:line="65" pos:column="60">doc</name></decl></param>, <param><decl><type><specifier pos:line="65" pos:column="65">const</specifier> <name pos:line="65" pos:column="71">char</name> <type:modifier pos:line="65" pos:column="76">*</type:modifier></type><name pos:line="65" pos:column="77">text</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="83">int</name> <type:modifier pos:line="65" pos:column="87">*</type:modifier></type><name pos:line="65" pos:column="88">length</name></decl></param>)</parameter_list>;</function_decl>

</public><private pos:line="67" pos:column="1">private:
	<function_decl><type><name pos:line="68" pos:column="9">wchar_t</name> <type:modifier pos:line="68" pos:column="17">*</type:modifier></type><name pos:line="68" pos:column="18">utf8ToWchar</name><parameter_list pos:line="68" pos:column="29">(<param><decl><type><specifier pos:line="68" pos:column="30">const</specifier> <name pos:line="68" pos:column="36">char</name> <type:modifier pos:line="68" pos:column="41">*</type:modifier></type><name pos:line="68" pos:column="42">utf8</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="69" pos:column="9">char</name>    <type:modifier pos:line="69" pos:column="17">*</type:modifier></type><name pos:line="69" pos:column="18">wcharToUtf8</name><parameter_list pos:line="69" pos:column="29">(<param><decl><type><specifier pos:line="69" pos:column="30">const</specifier> <name pos:line="69" pos:column="36">wchar_t</name> <type:modifier pos:line="69" pos:column="44">*</type:modifier></type><name pos:line="69" pos:column="45">w</name></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="71" pos:column="9">charregex_t</name></type> <name pos:line="71" pos:column="21">m_charre</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">wcharregex_t</name></type> <name pos:line="72" pos:column="22">m_wcharre</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">utf8match_t</name></type> <name pos:line="74" pos:column="21">m_utf8match</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">ansimatch_t</name></type> <name pos:line="75" pos:column="21">m_ansimatch</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">char</name> <type:modifier pos:line="77" pos:column="14">*</type:modifier></type><name pos:line="77" pos:column="15">substituted</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="78" pos:column="9">std</name><op:operator pos:line="78" pos:column="12">::</op:operator><name pos:line="78" pos:column="14">string</name></name></type> <name pos:line="78" pos:column="21">m_lastRegexString</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="79" pos:column="9">std</name><op:operator pos:line="79" pos:column="12">::</op:operator><name pos:line="79" pos:column="14">string</name></name></type> <name pos:line="79" pos:column="21">m_lastRegexUtf8string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">int</name></type> <name pos:line="80" pos:column="13">lastCompileFlags</name></decl>;</decl_stmt>
</private>}</block>;</class>

<cpp:ifdef pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">ifdef</cpp:directive> <name pos:line="83" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="84" pos:column="1">namespace <name pos:line="84" pos:column="11">Scintilla</name>
<block pos:line="85" pos:column="1">{
<cpp:endif pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="88" pos:column="1">RegexSearchBase</name> <type:modifier pos:line="88" pos:column="17">*</type:modifier></type><name pos:line="88" pos:column="18">CreateRegexSearch</name><parameter_list pos:line="88" pos:column="35">(<param><decl><type><name pos:line="88" pos:column="36">CharClassify</name><type:modifier pos:line="88" pos:column="48">*</type:modifier></type></decl></param> <comment type="block" pos:line="88" pos:column="50">/* charClassTable */</comment>)</parameter_list>
<block pos:line="89" pos:column="1">{
	<return pos:line="90" pos:column="9">return <expr><op:operator pos:line="90" pos:column="16">new</op:operator> <call><name pos:line="90" pos:column="20">BoostRegexSearch</name><argument_list pos:line="90" pos:column="36">()</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">ifdef</cpp:directive> <name pos:line="93" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:line="97" pos:column="1">/**
 * Find text in document, supporting both forward and backward
 * searches (just pass minPos &gt; maxPos to do a backward search)
 */</comment>
 

<function><type><name pos:line="103" pos:column="1">long</name></type> <name><name pos:line="103" pos:column="6">BoostRegexSearch</name><op:operator pos:line="103" pos:column="22">::</op:operator><name pos:line="103" pos:column="24">FindText</name></name><parameter_list pos:line="103" pos:column="32">(<param><decl><type><name pos:line="103" pos:column="33">Document</name><type:modifier pos:line="103" pos:column="41">*</type:modifier></type> <name pos:line="103" pos:column="43">doc</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="48">int</name></type> <name pos:line="103" pos:column="52">minPos</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="60">int</name></type> <name pos:line="103" pos:column="64">maxPos</name></decl></param>, <param><decl><type><specifier pos:line="103" pos:column="72">const</specifier> <name pos:line="103" pos:column="78">char</name> <type:modifier pos:line="103" pos:column="83">*</type:modifier></type><name pos:line="103" pos:column="84">s</name></decl></param>,
                        <param><decl><type><name pos:line="104" pos:column="25">bool</name></type> <name pos:line="104" pos:column="30">caseSensitive</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="45">bool</name></type></decl></param> <comment type="block" pos:line="104" pos:column="50">/*word*/</comment>, <param><decl><type><name pos:line="104" pos:column="60">bool</name></type></decl></param> <comment type="block" pos:line="104" pos:column="65">/*wordStart*/</comment>, <param><decl><type><name pos:line="104" pos:column="80">int</name></type> <name pos:line="104" pos:column="84">searchFlags</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="97">int</name> <type:modifier pos:line="104" pos:column="101">*</type:modifier></type><name pos:line="104" pos:column="102">length</name></decl></param>)</parameter_list> 
<block pos:line="105" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="106" pos:column="9">int</name></type> <name pos:line="106" pos:column="13">startPos</name></decl><op:operator pos:line="106" pos:column="21">,</op:operator> <decl><type ref="prev"/><name pos:line="106" pos:column="23">endPos</name></decl><op:operator pos:line="106" pos:column="29">,</op:operator> <decl><type ref="prev"/><name pos:line="106" pos:column="31">increment</name></decl>;</decl_stmt>

	<if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><name pos:line="108" pos:column="13">minPos</name> <op:operator pos:line="108" pos:column="20">&gt;</op:operator> <name pos:line="108" pos:column="22">maxPos</name></expr>)</condition><then pos:line="108" pos:column="29">
	<block pos:line="109" pos:column="9">{
		<expr_stmt><expr><name pos:line="110" pos:column="17">startPos</name> <op:operator pos:line="110" pos:column="26">=</op:operator> <name pos:line="110" pos:column="28">maxPos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="111" pos:column="17">endPos</name> <op:operator pos:line="111" pos:column="24">=</op:operator> <name pos:line="111" pos:column="26">minPos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="112" pos:column="17">increment</name> <op:operator pos:line="112" pos:column="27">=</op:operator> <op:operator pos:line="112" pos:column="29">-</op:operator><lit:literal type="number" pos:line="112" pos:column="30">1</lit:literal></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="114" pos:column="9">else
	<block pos:line="115" pos:column="9">{
		<expr_stmt><expr><name pos:line="116" pos:column="17">startPos</name> <op:operator pos:line="116" pos:column="26">=</op:operator> <name pos:line="116" pos:column="28">minPos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="117" pos:column="17">endPos</name> <op:operator pos:line="117" pos:column="24">=</op:operator> <name pos:line="117" pos:column="26">maxPos</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="118" pos:column="17">increment</name> <op:operator pos:line="118" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="118" pos:column="29">1</lit:literal></expr>;</expr_stmt>
	}</block></else></if>

	<comment type="line" pos:line="121" pos:column="9">// Range endpoints should not be inside DBCS characters, but just in case, move them.</comment>
	<expr_stmt><expr><name pos:line="122" pos:column="9">startPos</name> <op:operator pos:line="122" pos:column="18">=</op:operator> <call><name><name pos:line="122" pos:column="20">doc</name><op:operator pos:line="122" pos:column="23">-&gt;</op:operator><name pos:line="122" pos:column="25">MovePositionOutsideChar</name></name><argument_list pos:line="122" pos:column="48">(<argument><expr><name pos:line="122" pos:column="49">startPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="122" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="122" pos:column="62">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="123" pos:column="9">endPos</name> <op:operator pos:line="123" pos:column="16">=</op:operator> <call><name><name pos:line="123" pos:column="18">doc</name><op:operator pos:line="123" pos:column="21">-&gt;</op:operator><name pos:line="123" pos:column="23">MovePositionOutsideChar</name></name><argument_list pos:line="123" pos:column="46">(<argument><expr><name pos:line="123" pos:column="47">endPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="123" pos:column="55">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="123" pos:column="58">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	
	<function_decl><type><name pos:line="126" pos:column="9">int</name></type> <name pos:line="126" pos:column="13">compileFlags</name><parameter_list pos:line="126" pos:column="25">(<param><decl><type><name><name pos:line="126" pos:column="26">regex_constants</name><op:operator pos:line="126" pos:column="41">::</op:operator><name pos:line="126" pos:column="43">ECMAScript</name></name></type></decl></param>)</parameter_list>;</function_decl>
	<if pos:line="127" pos:column="9">if <condition pos:line="127" pos:column="12">(<expr><op:operator pos:line="127" pos:column="13">!</op:operator><name pos:line="127" pos:column="14">caseSensitive</name></expr>)</condition><then pos:line="127" pos:column="28">
	<block pos:line="128" pos:column="9">{
		<expr_stmt><expr><name pos:line="129" pos:column="17">compileFlags</name> <op:operator pos:line="129" pos:column="30">|=</op:operator> <name><name pos:line="129" pos:column="33">regex_constants</name><op:operator pos:line="129" pos:column="48">::</op:operator><name pos:line="129" pos:column="50">icase</name></name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="131" pos:column="9">bool</name></type> <name pos:line="131" pos:column="14">isUtf8</name> <init pos:line="131" pos:column="21">= <expr><op:operator pos:line="131" pos:column="23">(</op:operator><call><name><name pos:line="131" pos:column="24">doc</name><op:operator pos:line="131" pos:column="27">-&gt;</op:operator><name pos:line="131" pos:column="29">CodePage</name></name><argument_list pos:line="131" pos:column="37">()</argument_list></call> <op:operator pos:line="131" pos:column="40">==</op:operator> <name pos:line="131" pos:column="43">SC_CP_UTF8</name><op:operator pos:line="131" pos:column="53">)</op:operator></expr></init></decl>;</decl_stmt>
	
	<try pos:line="133" pos:column="9">try
	<block pos:line="134" pos:column="9">{
		
		<if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><name pos:line="136" pos:column="21">compileFlags</name> <op:operator pos:line="136" pos:column="34">!=</op:operator> <name pos:line="136" pos:column="37">lastCompileFlags</name>  
			<op:operator pos:line="137" pos:column="25">||</op:operator> <op:operator pos:line="137" pos:column="28">(</op:operator><name pos:line="137" pos:column="29">isUtf8</name> <op:operator pos:line="137" pos:column="36">&amp;&amp;</op:operator> <name pos:line="137" pos:column="39">m_lastRegexUtf8string</name> <op:operator pos:line="137" pos:column="61">!=</op:operator> <name pos:line="137" pos:column="64">s</name><op:operator pos:line="137" pos:column="65">)</op:operator>
			<op:operator pos:line="138" pos:column="25">||</op:operator> <op:operator pos:line="138" pos:column="28">(</op:operator><op:operator pos:line="138" pos:column="29">!</op:operator><name pos:line="138" pos:column="30">isUtf8</name> <op:operator pos:line="138" pos:column="37">&amp;&amp;</op:operator> <name pos:line="138" pos:column="40">m_lastRegexString</name> <op:operator pos:line="138" pos:column="58">!=</op:operator> <name pos:line="138" pos:column="61">s</name><op:operator pos:line="138" pos:column="62">)</op:operator></expr>)</condition><then pos:line="138" pos:column="64"> <comment type="line" pos:line="138" pos:column="65">// Test to see if we're called with the same</comment>
			                      <comment type="line" pos:line="139" pos:column="47">// regex as last time, if we are, then we don't need to recompile it</comment>
		<block pos:line="140" pos:column="17">{
			<if pos:line="141" pos:column="25">if <condition pos:line="141" pos:column="28">(<expr><name pos:line="141" pos:column="29">isUtf8</name></expr>)</condition><then pos:line="141" pos:column="36">
			<block pos:line="142" pos:column="25">{
				<decl_stmt><decl><type><specifier pos:line="143" pos:column="33">const</specifier> <name pos:line="143" pos:column="39">wchar_t</name><type:modifier pos:line="143" pos:column="46">*</type:modifier></type> <name pos:line="143" pos:column="48">wchars</name> <init pos:line="143" pos:column="55">= <expr><call><name pos:line="143" pos:column="57">utf8ToWchar</name><argument_list pos:line="143" pos:column="68">(<argument><expr><name pos:line="143" pos:column="69">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="144" pos:column="33">m_wcharre</name> <op:operator pos:line="144" pos:column="43">=</op:operator> <call><name pos:line="144" pos:column="45">wcharregex_t</name><argument_list pos:line="144" pos:column="57">(<argument><expr><name pos:line="144" pos:column="58">wchars</name></expr></argument>, <argument><expr><call><name><name pos:line="144" pos:column="66">static_cast</name><argument_list pos:line="144" pos:column="77">&lt;<argument><expr><name><name pos:line="144" pos:column="78">regex_constants</name><op:operator pos:line="144" pos:column="93">::</op:operator><name pos:line="144" pos:column="95">syntax_option_type</name></name></expr></argument>&gt;</argument_list></name><argument_list pos:line="144" pos:column="114">(<argument><expr><name pos:line="144" pos:column="115">compileFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="145" pos:column="33">delete</op:operator> <index pos:line="145" pos:column="40">[]</index> <name pos:line="145" pos:column="43">wchars</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="146" pos:column="33">m_lastRegexUtf8string</name> <op:operator pos:line="146" pos:column="55">=</op:operator> <name pos:line="146" pos:column="57">s</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="148" pos:column="25">else
			<block pos:line="149" pos:column="25">{ <comment type="line" pos:line="149" pos:column="27">// Ansi</comment>
				<expr_stmt><expr><name pos:line="150" pos:column="33">m_charre</name> <op:operator pos:line="150" pos:column="42">=</op:operator> <call><name pos:line="150" pos:column="44">charregex_t</name><argument_list pos:line="150" pos:column="55">(<argument><expr><name pos:line="150" pos:column="56">s</name></expr></argument>, <argument><expr><call><name><name pos:line="150" pos:column="59">static_cast</name><argument_list pos:line="150" pos:column="70">&lt;<argument><expr><name><name pos:line="150" pos:column="71">regex_constants</name><op:operator pos:line="150" pos:column="86">::</op:operator><name pos:line="150" pos:column="88">syntax_option_type</name></name></expr></argument>&gt;</argument_list></name><argument_list pos:line="150" pos:column="107">(<argument><expr><name pos:line="150" pos:column="108">compileFlags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="151" pos:column="33">m_lastRegexString</name> <op:operator pos:line="151" pos:column="51">=</op:operator> <name pos:line="151" pos:column="53">s</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name pos:line="153" pos:column="25">lastCompileFlags</name> <op:operator pos:line="153" pos:column="42">=</op:operator> <name pos:line="153" pos:column="44">compileFlags</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	
	<catch pos:line="157" pos:column="9">catch<parameter_list pos:line="157" pos:column="14">(<param><decl><type><name pos:line="157" pos:column="15">regex_error</name><type:modifier pos:line="157" pos:column="26">&amp;</type:modifier></type></decl></param> <comment type="block" pos:line="157" pos:column="28">/*ex*/</comment>)</parameter_list>
	<block pos:line="158" pos:column="9">{
		<comment type="line" pos:line="159" pos:column="17">// -1 is normally used for not found, -2 is used here for invalid regex</comment>
		<return pos:line="160" pos:column="17">return <expr><op:operator pos:line="160" pos:column="24">-</op:operator><lit:literal type="number" pos:line="160" pos:column="25">2</lit:literal></expr>;</return>
	}</block></catch></try>

	<comment type="line" pos:line="163" pos:column="9">// Work out the range of lines we're searching across, moving beyond an empty end-of-line</comment>
	<decl_stmt><decl><type><name pos:line="164" pos:column="9">int</name></type> <name pos:line="164" pos:column="13">lineRangeStart</name> <init pos:line="164" pos:column="28">= <expr><call><name><name pos:line="164" pos:column="30">doc</name><op:operator pos:line="164" pos:column="33">-&gt;</op:operator><name pos:line="164" pos:column="35">LineFromPosition</name></name><argument_list pos:line="164" pos:column="51">(<argument><expr><name pos:line="164" pos:column="52">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="165" pos:column="9">int</name></type> <name pos:line="165" pos:column="13">lineRangeEnd</name> <init pos:line="165" pos:column="26">= <expr><call><name><name pos:line="165" pos:column="28">doc</name><op:operator pos:line="165" pos:column="31">-&gt;</op:operator><name pos:line="165" pos:column="33">LineFromPosition</name></name><argument_list pos:line="165" pos:column="49">(<argument><expr><name pos:line="165" pos:column="50">endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<function_decl><type><name><name pos:line="167" pos:column="9">regex_constants</name><op:operator pos:line="167" pos:column="24">::</op:operator><name pos:line="167" pos:column="26">match_flag_type</name></name></type> <name pos:line="167" pos:column="42">flags</name><parameter_list pos:line="167" pos:column="47">(<param><decl><type><name><name pos:line="167" pos:column="48">regex_constants</name><op:operator pos:line="167" pos:column="63">::</op:operator><name pos:line="167" pos:column="65">match_default</name></name></type></decl></param>)</parameter_list>;</function_decl>

	
	
	<comment type="line" pos:line="171" pos:column="9">// Work out the flags:</comment>
	<if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><name pos:line="172" pos:column="13">startPos</name> <op:operator pos:line="172" pos:column="22">!=</op:operator> <call><name><name pos:line="172" pos:column="25">doc</name><op:operator pos:line="172" pos:column="28">-&gt;</op:operator><name pos:line="172" pos:column="30">LineStart</name></name><argument_list pos:line="172" pos:column="39">(<argument><expr><name pos:line="172" pos:column="40">lineRangeStart</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="172" pos:column="56">
	<block pos:line="173" pos:column="9">{
		<expr_stmt><expr><name pos:line="174" pos:column="17">flags</name> <op:operator pos:line="174" pos:column="23">|=</op:operator> <name><name pos:line="174" pos:column="26">regex_constants</name><op:operator pos:line="174" pos:column="41">::</op:operator><name pos:line="174" pos:column="43">match_not_bol</name></name></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="177" pos:column="9">if <condition pos:line="177" pos:column="12">(<expr><name pos:line="177" pos:column="13">endPos</name> <op:operator pos:line="177" pos:column="20">!=</op:operator> <call><name><name pos:line="177" pos:column="23">doc</name><op:operator pos:line="177" pos:column="26">-&gt;</op:operator><name pos:line="177" pos:column="28">LineEnd</name></name><argument_list pos:line="177" pos:column="35">(<argument><expr><name pos:line="177" pos:column="36">lineRangeEnd</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="177" pos:column="50">
	<block pos:line="178" pos:column="9">{
		<expr_stmt><expr><name pos:line="179" pos:column="17">flags</name> <op:operator pos:line="179" pos:column="23">|=</op:operator> <name><name pos:line="179" pos:column="26">regex_constants</name><op:operator pos:line="179" pos:column="41">::</op:operator><name pos:line="179" pos:column="43">match_not_eol</name></name></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><lit:literal type="number" pos:line="182" pos:column="13">0</lit:literal> <op:operator pos:line="182" pos:column="15">==</op:operator> <op:operator pos:line="182" pos:column="18">(</op:operator><name pos:line="182" pos:column="19">searchFlags</name> <op:operator pos:line="182" pos:column="31">&amp;</op:operator> <name pos:line="182" pos:column="33">SCFIND_REGEXP_DOTMATCHESNL</name><op:operator pos:line="182" pos:column="59">)</op:operator></expr>)</condition><then pos:line="182" pos:column="61">
	<block pos:line="183" pos:column="9">{
		<expr_stmt><expr><name pos:line="184" pos:column="17">flags</name> <op:operator pos:line="184" pos:column="23">|=</op:operator> <name><name pos:line="184" pos:column="26">regex_constants</name><op:operator pos:line="184" pos:column="41">::</op:operator><name pos:line="184" pos:column="43">match_not_dot_newline</name></name></expr>;</expr_stmt>
	}</block></then></if>
	
	<decl_stmt><decl><type><name pos:line="187" pos:column="9">int</name></type> <name pos:line="187" pos:column="13">pos</name><argument_list pos:line="187" pos:column="16">(<argument><expr><op:operator pos:line="187" pos:column="17">-</op:operator><lit:literal type="number" pos:line="187" pos:column="18">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="188" pos:column="9">int</name></type> <name pos:line="188" pos:column="13">lenRet</name><argument_list pos:line="188" pos:column="19">(<argument><expr><lit:literal type="number" pos:line="188" pos:column="20">0</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	
	
	<if pos:line="191" pos:column="9">if <condition pos:line="191" pos:column="12">(<expr><call><name><name pos:line="191" pos:column="13">doc</name><op:operator pos:line="191" pos:column="16">-&gt;</op:operator><name pos:line="191" pos:column="18">CodePage</name></name><argument_list pos:line="191" pos:column="26">()</argument_list></call> <op:operator pos:line="191" pos:column="29">==</op:operator> <name pos:line="191" pos:column="32">SC_CP_UTF8</name></expr>)</condition><then pos:line="191" pos:column="43">
	<block pos:line="192" pos:column="9">{
		<function_decl><type><name pos:line="193" pos:column="17">UTF8DocumentIterator</name></type> <name pos:line="193" pos:column="38">end</name><parameter_list pos:line="193" pos:column="41">(<param><decl><type><name pos:line="193" pos:column="42">doc</name></type></decl></param>, <param><decl><type><name pos:line="193" pos:column="47">endPos</name></type></decl></param>, <param><decl><type><name pos:line="193" pos:column="55">endPos</name></type></decl></param>)</parameter_list>;</function_decl>
		<decl_stmt><decl><type><name pos:line="194" pos:column="17">bool</name></type> <name pos:line="194" pos:column="22">success</name> <init pos:line="194" pos:column="30">= <expr><call><name><name pos:line="194" pos:column="32">boost</name><op:operator pos:line="194" pos:column="37">::</op:operator><name pos:line="194" pos:column="39">regex_search</name></name><argument_list pos:line="194" pos:column="51">(<argument><expr><call><name pos:line="194" pos:column="52">UTF8DocumentIterator</name><argument_list pos:line="194" pos:column="72">(<argument><expr><name pos:line="194" pos:column="73">doc</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="78">startPos</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="88">endPos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="194" pos:column="97">end</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="102">m_utf8match</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="115">m_wcharre</name></expr></argument>, <argument><expr><name pos:line="194" pos:column="126">flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="195" pos:column="17">if <condition pos:line="195" pos:column="20">(<expr><name pos:line="195" pos:column="21">success</name></expr>)</condition><then pos:line="195" pos:column="29">
		<block pos:line="196" pos:column="17">{
			<expr_stmt><expr><name pos:line="197" pos:column="25">pos</name> <op:operator pos:line="197" pos:column="29">=</op:operator> <name><name pos:line="197" pos:column="31">m_utf8match</name><index pos:line="197" pos:column="42">[<expr><lit:literal type="number" pos:line="197" pos:column="43">0</lit:literal></expr>]</index></name><op:operator pos:line="197" pos:column="45">.</op:operator><call><name><name pos:line="197" pos:column="46">first</name><op:operator pos:line="197" pos:column="51">.</op:operator><name pos:line="197" pos:column="52">pos</name></name><argument_list pos:line="197" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="198" pos:column="25">lenRet</name> <op:operator pos:line="198" pos:column="32">=</op:operator> <name><name pos:line="198" pos:column="34">m_utf8match</name><index pos:line="198" pos:column="45">[<expr><lit:literal type="number" pos:line="198" pos:column="46">0</lit:literal></expr>]</index></name><op:operator pos:line="198" pos:column="48">.</op:operator><call><name><name pos:line="198" pos:column="49">second</name><op:operator pos:line="198" pos:column="55">.</op:operator><name pos:line="198" pos:column="56">pos</name></name><argument_list pos:line="198" pos:column="59">()</argument_list></call> <op:operator pos:line="198" pos:column="62">-</op:operator> <name pos:line="198" pos:column="64">pos</name></expr>;</expr_stmt>
			
			<if pos:line="200" pos:column="25">if <condition pos:line="200" pos:column="28">(<expr><name pos:line="200" pos:column="29">increment</name> <op:operator pos:line="200" pos:column="39">==</op:operator> <op:operator pos:line="200" pos:column="42">-</op:operator><lit:literal type="number" pos:line="200" pos:column="43">1</lit:literal></expr>)</condition><then pos:line="200" pos:column="45">
			<block pos:line="201" pos:column="25">{
				<comment type="line" pos:line="202" pos:column="33">// Check for the last match on this line.</comment>
				<decl_stmt><decl><type><name pos:line="203" pos:column="33">int</name></type> <name pos:line="203" pos:column="37">repetitions</name> <init pos:line="203" pos:column="49">= <expr><lit:literal type="number" pos:line="203" pos:column="51">100</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="203" pos:column="57">// Break out of infinite loop</comment>
				<decl_stmt><decl><type><name pos:line="204" pos:column="33">int</name></type> <name pos:line="204" pos:column="37">previousPos</name> <init pos:line="204" pos:column="49">= <expr><name pos:line="204" pos:column="51">pos</name></expr></init></decl>;</decl_stmt>
				<while pos:line="205" pos:column="33">while <condition pos:line="205" pos:column="39">(<expr><name pos:line="205" pos:column="40">success</name> <op:operator pos:line="205" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="205" pos:column="51">(</op:operator><op:operator pos:line="205" pos:column="52">(</op:operator><name pos:line="205" pos:column="53">pos</name> <op:operator pos:line="205" pos:column="57">+</op:operator> <name pos:line="205" pos:column="59">lenRet</name><op:operator pos:line="205" pos:column="65">)</op:operator> <op:operator pos:line="205" pos:column="67">&lt;=</op:operator> <name pos:line="205" pos:column="70">endPos</name><op:operator pos:line="205" pos:column="76">)</op:operator></expr>)</condition> 
				<block pos:line="206" pos:column="33">{
					<if pos:line="207" pos:column="41">if <condition pos:line="207" pos:column="44">(<expr><name pos:line="207" pos:column="45">previousPos</name> <op:operator pos:line="207" pos:column="57">&gt;=</op:operator> <name pos:line="207" pos:column="60">pos</name> <op:operator pos:line="207" pos:column="64">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="207" pos:column="67">0</lit:literal> <op:operator pos:line="207" pos:column="69">&gt;=</op:operator> <op:operator pos:line="207" pos:column="72">(</op:operator><op:operator pos:line="207" pos:column="73">--</op:operator><name pos:line="207" pos:column="75">repetitions</name><op:operator pos:line="207" pos:column="86">)</op:operator></expr>)</condition><then pos:line="207" pos:column="88">
						<break pos:line="208" pos:column="49">break;</break></then></if>
					<expr_stmt><expr><name pos:line="209" pos:column="41">previousPos</name> <op:operator pos:line="209" pos:column="53">=</op:operator> <name pos:line="209" pos:column="55">pos</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="210" pos:column="41">success</name> <op:operator pos:line="210" pos:column="49">=</op:operator> <call><name pos:line="210" pos:column="51">regex_search</name><argument_list pos:line="210" pos:column="63">(<argument><expr><call><name pos:line="210" pos:column="64">UTF8DocumentIterator</name><argument_list pos:line="210" pos:column="84">(<argument><expr><name pos:line="210" pos:column="85">doc</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="90">pos</name> <op:operator pos:line="210" pos:column="94">+</op:operator> <lit:literal type="number" pos:line="210" pos:column="96">1</lit:literal></expr></argument>, <argument><expr><name pos:line="210" pos:column="99">endPos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="210" pos:column="108">end</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="113">m_utf8match</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="126">m_wcharre</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="137">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="211" pos:column="41">// success = regex_search(DocumentIterator(doc, pos + 1, endPos), end, match, re, static_cast&lt;regex_constants::match_flag_type&gt;(flags));</comment>
					<if pos:line="212" pos:column="41">if <condition pos:line="212" pos:column="44">(<expr><name pos:line="212" pos:column="45">success</name></expr>)</condition><then pos:line="212" pos:column="53"> 
					<block pos:line="213" pos:column="41">{
						<if pos:line="214" pos:column="49">if <condition pos:line="214" pos:column="52">(<expr><op:operator pos:line="214" pos:column="53">(</op:operator><name pos:line="214" pos:column="54">pos</name> <op:operator pos:line="214" pos:column="58">+</op:operator> <name pos:line="214" pos:column="60">lenRet</name><op:operator pos:line="214" pos:column="66">)</op:operator> <op:operator pos:line="214" pos:column="68">&lt;=</op:operator> <name pos:line="214" pos:column="71">minPos</name></expr>)</condition><then pos:line="214" pos:column="78"> 
						<block pos:line="215" pos:column="49">{
							<expr_stmt><expr><name pos:line="216" pos:column="57">pos</name> <op:operator pos:line="216" pos:column="61">=</op:operator> <name><name pos:line="216" pos:column="63">m_utf8match</name><index pos:line="216" pos:column="74">[<expr><lit:literal type="number" pos:line="216" pos:column="75">0</lit:literal></expr>]</index></name><op:operator pos:line="216" pos:column="77">.</op:operator><call><name><name pos:line="216" pos:column="78">first</name><op:operator pos:line="216" pos:column="83">.</op:operator><name pos:line="216" pos:column="84">pos</name></name><argument_list pos:line="216" pos:column="87">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="217" pos:column="57">lenRet</name> <op:operator pos:line="217" pos:column="64">=</op:operator> <name><name pos:line="217" pos:column="66">m_utf8match</name><index pos:line="217" pos:column="77">[<expr><lit:literal type="number" pos:line="217" pos:column="78">0</lit:literal></expr>]</index></name><op:operator pos:line="217" pos:column="80">.</op:operator><call><name><name pos:line="217" pos:column="81">second</name><op:operator pos:line="217" pos:column="87">.</op:operator><name pos:line="217" pos:column="88">pos</name></name><argument_list pos:line="217" pos:column="91">()</argument_list></call> <op:operator pos:line="217" pos:column="94">-</op:operator> <name pos:line="217" pos:column="96">pos</name></expr>;</expr_stmt>
						}</block></then> 
						<else pos:line="219" pos:column="49">else 
						<block pos:line="220" pos:column="49">{
							<expr_stmt><expr><name pos:line="221" pos:column="57">success</name> <op:operator pos:line="221" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="221" pos:column="67">0</lit:literal></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then></if>
				}</block></while>
			}</block></then></if>
			
			<expr_stmt><expr><op:operator pos:line="227" pos:column="25">*</op:operator><name pos:line="227" pos:column="26">length</name> <op:operator pos:line="227" pos:column="33">=</op:operator> <name pos:line="227" pos:column="35">lenRet</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then>
	<else pos:line="230" pos:column="9">else
	<block pos:line="231" pos:column="9">{
		<function_decl><type><name pos:line="232" pos:column="17">AnsiDocumentIterator</name></type> <name pos:line="232" pos:column="38">end</name><parameter_list pos:line="232" pos:column="41">(<param><decl><type><name pos:line="232" pos:column="42">doc</name></type></decl></param>, <param><decl><type><name pos:line="232" pos:column="47">endPos</name></type></decl></param>, <param><decl><type><name pos:line="232" pos:column="55">endPos</name></type></decl></param>)</parameter_list>;</function_decl>
		
		<decl_stmt><decl><type><name pos:line="234" pos:column="17">bool</name></type> <name pos:line="234" pos:column="22">success</name> <init pos:line="234" pos:column="30">= <expr><call><name><name pos:line="234" pos:column="32">boost</name><op:operator pos:line="234" pos:column="37">::</op:operator><name pos:line="234" pos:column="39">regex_search</name></name><argument_list pos:line="234" pos:column="51">(<argument><expr><call><name pos:line="234" pos:column="52">AnsiDocumentIterator</name><argument_list pos:line="234" pos:column="72">(<argument><expr><name pos:line="234" pos:column="73">doc</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="78">startPos</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="88">endPos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="234" pos:column="97">end</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="102">m_ansimatch</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="115">m_charre</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="125">flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="235" pos:column="17">if <condition pos:line="235" pos:column="20">(<expr><name pos:line="235" pos:column="21">success</name></expr>)</condition><then pos:line="235" pos:column="29">
		<block pos:line="236" pos:column="17">{
			<expr_stmt><expr><name pos:line="237" pos:column="25">pos</name> <op:operator pos:line="237" pos:column="29">=</op:operator> <name><name pos:line="237" pos:column="31">m_ansimatch</name><index pos:line="237" pos:column="42">[<expr><lit:literal type="number" pos:line="237" pos:column="43">0</lit:literal></expr>]</index></name><op:operator pos:line="237" pos:column="45">.</op:operator><call><name><name pos:line="237" pos:column="46">first</name><op:operator pos:line="237" pos:column="51">.</op:operator><name pos:line="237" pos:column="52">pos</name></name><argument_list pos:line="237" pos:column="55">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="238" pos:column="25">lenRet</name> <op:operator pos:line="238" pos:column="32">=</op:operator> <call><name><name pos:line="238" pos:column="34">m_ansimatch</name><op:operator pos:line="238" pos:column="45">.</op:operator><name pos:line="238" pos:column="46">length</name></name><argument_list pos:line="238" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
			
			<if pos:line="240" pos:column="25">if <condition pos:line="240" pos:column="28">(<expr><name pos:line="240" pos:column="29">increment</name> <op:operator pos:line="240" pos:column="39">==</op:operator> <op:operator pos:line="240" pos:column="42">-</op:operator><lit:literal type="number" pos:line="240" pos:column="43">1</lit:literal></expr>)</condition><then pos:line="240" pos:column="45">
			<block pos:line="241" pos:column="25">{
				<comment type="line" pos:line="242" pos:column="33">// Check for the last match on this line.</comment>
				<decl_stmt><decl><type><name pos:line="243" pos:column="33">int</name></type> <name pos:line="243" pos:column="37">repetitions</name> <init pos:line="243" pos:column="49">= <expr><lit:literal type="number" pos:line="243" pos:column="51">100</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="243" pos:column="57">// Break out of infinite loop</comment>
				<decl_stmt><decl><type><name pos:line="244" pos:column="33">int</name></type> <name pos:line="244" pos:column="37">previousPos</name> <init pos:line="244" pos:column="49">= <expr><name pos:line="244" pos:column="51">pos</name></expr></init></decl>;</decl_stmt>
				<while pos:line="245" pos:column="33">while <condition pos:line="245" pos:column="39">(<expr><name pos:line="245" pos:column="40">success</name> <op:operator pos:line="245" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="245" pos:column="51">(</op:operator><op:operator pos:line="245" pos:column="52">(</op:operator><name pos:line="245" pos:column="53">pos</name> <op:operator pos:line="245" pos:column="57">+</op:operator> <name pos:line="245" pos:column="59">lenRet</name><op:operator pos:line="245" pos:column="65">)</op:operator> <op:operator pos:line="245" pos:column="67">&lt;=</op:operator> <name pos:line="245" pos:column="70">endPos</name><op:operator pos:line="245" pos:column="76">)</op:operator></expr>)</condition> 
				<block pos:line="246" pos:column="33">{
					<if pos:line="247" pos:column="41">if <condition pos:line="247" pos:column="44">(<expr><name pos:line="247" pos:column="45">previousPos</name> <op:operator pos:line="247" pos:column="57">&gt;=</op:operator> <name pos:line="247" pos:column="60">pos</name> <op:operator pos:line="247" pos:column="64">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="247" pos:column="67">0</lit:literal> <op:operator pos:line="247" pos:column="69">&gt;=</op:operator> <op:operator pos:line="247" pos:column="72">(</op:operator><op:operator pos:line="247" pos:column="73">--</op:operator><name pos:line="247" pos:column="75">repetitions</name><op:operator pos:line="247" pos:column="86">)</op:operator></expr>)</condition><then pos:line="247" pos:column="88">
						<break pos:line="248" pos:column="49">break;</break></then></if>
					<expr_stmt><expr><name pos:line="249" pos:column="41">previousPos</name> <op:operator pos:line="249" pos:column="53">=</op:operator> <name pos:line="249" pos:column="55">pos</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="250" pos:column="41">success</name> <op:operator pos:line="250" pos:column="49">=</op:operator> <call><name pos:line="250" pos:column="51">regex_search</name><argument_list pos:line="250" pos:column="63">(<argument><expr><call><name pos:line="250" pos:column="64">AnsiDocumentIterator</name><argument_list pos:line="250" pos:column="84">(<argument><expr><name pos:line="250" pos:column="85">doc</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="90">pos</name> <op:operator pos:line="250" pos:column="94">+</op:operator> <lit:literal type="number" pos:line="250" pos:column="96">1</lit:literal></expr></argument>, <argument><expr><name pos:line="250" pos:column="99">endPos</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="250" pos:column="108">end</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="113">m_ansimatch</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="126">m_charre</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="136">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="251" pos:column="41">// success = regex_search(DocumentIterator(doc, pos + 1, endPos), end, match, re, static_cast&lt;regex_constants::match_flag_type&gt;(flags));</comment>
					<if pos:line="252" pos:column="41">if <condition pos:line="252" pos:column="44">(<expr><name pos:line="252" pos:column="45">success</name></expr>)</condition><then pos:line="252" pos:column="53"> 
					<block pos:line="253" pos:column="41">{
						<if pos:line="254" pos:column="49">if <condition pos:line="254" pos:column="52">(<expr><op:operator pos:line="254" pos:column="53">(</op:operator><name pos:line="254" pos:column="54">pos</name> <op:operator pos:line="254" pos:column="58">+</op:operator> <name pos:line="254" pos:column="60">lenRet</name><op:operator pos:line="254" pos:column="66">)</op:operator> <op:operator pos:line="254" pos:column="68">&lt;=</op:operator> <name pos:line="254" pos:column="71">minPos</name></expr>)</condition><then pos:line="254" pos:column="78"> 
						<block pos:line="255" pos:column="49">{
							<expr_stmt><expr><name pos:line="256" pos:column="57">pos</name> <op:operator pos:line="256" pos:column="61">=</op:operator> <name><name pos:line="256" pos:column="63">m_ansimatch</name><index pos:line="256" pos:column="74">[<expr><lit:literal type="number" pos:line="256" pos:column="75">0</lit:literal></expr>]</index></name><op:operator pos:line="256" pos:column="77">.</op:operator><call><name><name pos:line="256" pos:column="78">first</name><op:operator pos:line="256" pos:column="83">.</op:operator><name pos:line="256" pos:column="84">pos</name></name><argument_list pos:line="256" pos:column="87">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="257" pos:column="57">lenRet</name> <op:operator pos:line="257" pos:column="64">=</op:operator> <name><name pos:line="257" pos:column="66">m_ansimatch</name><index pos:line="257" pos:column="77">[<expr><lit:literal type="number" pos:line="257" pos:column="78">0</lit:literal></expr>]</index></name><op:operator pos:line="257" pos:column="80">.</op:operator><call><name pos:line="257" pos:column="81">length</name><argument_list pos:line="257" pos:column="87">()</argument_list></call></expr>;</expr_stmt>
						}</block></then> 
						<else pos:line="259" pos:column="49">else 
						<block pos:line="260" pos:column="49">{
							<expr_stmt><expr><name pos:line="261" pos:column="57">success</name> <op:operator pos:line="261" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="261" pos:column="67">0</lit:literal></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then></if>
				}</block></while>
			}</block></then></if>
			
			<expr_stmt><expr><op:operator pos:line="267" pos:column="25">*</op:operator><name pos:line="267" pos:column="26">length</name> <op:operator pos:line="267" pos:column="33">=</op:operator> <name pos:line="267" pos:column="35">lenRet</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	
	<return pos:line="271" pos:column="9">return <expr><name pos:line="271" pos:column="16">pos</name></expr>;</return>
}</block></function>


<function><type><specifier pos:line="275" pos:column="1">const</specifier> <name pos:line="275" pos:column="7">char</name> <type:modifier pos:line="275" pos:column="12">*</type:modifier></type><name><name pos:line="275" pos:column="13">BoostRegexSearch</name><op:operator pos:line="275" pos:column="29">::</op:operator><name pos:line="275" pos:column="31">SubstituteByPosition</name></name><parameter_list pos:line="275" pos:column="51">(<param><decl><type><name pos:line="275" pos:column="52">Document</name><type:modifier pos:line="275" pos:column="60">*</type:modifier></type> <name pos:line="275" pos:column="62">doc</name></decl></param>, <param><decl><type><specifier pos:line="275" pos:column="67">const</specifier> <name pos:line="275" pos:column="73">char</name> <type:modifier pos:line="275" pos:column="78">*</type:modifier></type><name pos:line="275" pos:column="79">text</name></decl></param>, <param><decl><type><name pos:line="275" pos:column="85">int</name> <type:modifier pos:line="275" pos:column="89">*</type:modifier></type><name pos:line="275" pos:column="90">length</name></decl></param>)</parameter_list> <block pos:line="275" pos:column="98">{
	<expr_stmt><expr><op:operator pos:line="276" pos:column="9">delete</op:operator> <index pos:line="276" pos:column="16">[]</index><name pos:line="276" pos:column="18">substituted</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="277" pos:column="9">substituted</name> <op:operator pos:line="277" pos:column="21">=</op:operator> <name pos:line="277" pos:column="23">NULL</name></expr>;</expr_stmt>
	<if pos:line="278" pos:column="9">if <condition pos:line="278" pos:column="12">(<expr><call><name><name pos:line="278" pos:column="13">doc</name><op:operator pos:line="278" pos:column="16">-&gt;</op:operator><name pos:line="278" pos:column="18">CodePage</name></name><argument_list pos:line="278" pos:column="26">()</argument_list></call> <op:operator pos:line="278" pos:column="29">==</op:operator> <name pos:line="278" pos:column="32">SC_CP_UTF8</name></expr>)</condition><then pos:line="278" pos:column="43">
	<block pos:line="279" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="280" pos:column="17">const</specifier> <name pos:line="280" pos:column="23">wchar_t</name><type:modifier pos:line="280" pos:column="30">*</type:modifier></type> <name pos:line="280" pos:column="32">wtext</name> <init pos:line="280" pos:column="38">= <expr><call><name pos:line="280" pos:column="40">utf8ToWchar</name><argument_list pos:line="280" pos:column="51">(<argument><expr><name pos:line="280" pos:column="52">text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name pos:line="281" pos:column="17">std</name><op:operator pos:line="281" pos:column="20">::</op:operator><name pos:line="281" pos:column="22">wstring</name></name></type> <name pos:line="281" pos:column="30">replaced</name> <init pos:line="281" pos:column="39">= <expr><call><name><name pos:line="281" pos:column="41">m_utf8match</name><op:operator pos:line="281" pos:column="52">.</op:operator><name pos:line="281" pos:column="53">format</name></name><argument_list pos:line="281" pos:column="59">(<argument><expr><name pos:line="281" pos:column="60">wtext</name></expr></argument>, <argument><expr><name><name pos:line="281" pos:column="67">boost</name><op:operator pos:line="281" pos:column="72">::</op:operator><name pos:line="281" pos:column="74">format_all</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><op:operator pos:line="282" pos:column="17">delete</op:operator><index pos:line="282" pos:column="23">[]</index> <name pos:line="282" pos:column="26">wtext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="283" pos:column="17">substituted</name> <op:operator pos:line="283" pos:column="29">=</op:operator> <call><name pos:line="283" pos:column="31">wcharToUtf8</name><argument_list pos:line="283" pos:column="42">(<argument><expr><call><name><name pos:line="283" pos:column="43">replaced</name><op:operator pos:line="283" pos:column="51">.</op:operator><name pos:line="283" pos:column="52">c_str</name></name><argument_list pos:line="283" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="284" pos:column="17">*</op:operator><name pos:line="284" pos:column="18">length</name> <op:operator pos:line="284" pos:column="25">=</op:operator> <call><name pos:line="284" pos:column="27">strlen</name><argument_list pos:line="284" pos:column="33">(<argument><expr><name pos:line="284" pos:column="34">substituted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="286" pos:column="9">else
	<block pos:line="287" pos:column="9">{
		<decl_stmt><decl><type><name><name pos:line="288" pos:column="17">std</name><op:operator pos:line="288" pos:column="20">::</op:operator><name pos:line="288" pos:column="22">string</name></name></type> <name pos:line="288" pos:column="29">replaced</name> <init pos:line="288" pos:column="38">= <expr><call><name><name pos:line="288" pos:column="40">m_ansimatch</name><op:operator pos:line="288" pos:column="51">.</op:operator><name pos:line="288" pos:column="52">format</name></name><argument_list pos:line="288" pos:column="58">(<argument><expr><name pos:line="288" pos:column="59">text</name></expr></argument>, <argument><expr><name><name pos:line="288" pos:column="65">boost</name><op:operator pos:line="288" pos:column="70">::</op:operator><name pos:line="288" pos:column="72">format_all</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><op:operator pos:line="289" pos:column="17">*</op:operator><name pos:line="289" pos:column="18">length</name> <op:operator pos:line="289" pos:column="25">=</op:operator> <call><name><name pos:line="289" pos:column="27">replaced</name><op:operator pos:line="289" pos:column="35">.</op:operator><name pos:line="289" pos:column="36">size</name></name><argument_list pos:line="289" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="290" pos:column="17">substituted</name> <op:operator pos:line="290" pos:column="29">=</op:operator> <op:operator pos:line="290" pos:column="31">new</op:operator> <name><name pos:line="290" pos:column="35">char</name><index pos:line="290" pos:column="39">[<expr><op:operator pos:line="290" pos:column="40">*</op:operator><name pos:line="290" pos:column="41">length</name> <op:operator pos:line="290" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="290" pos:column="50">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="291" pos:column="17">strcpy</name><argument_list pos:line="291" pos:column="23">(<argument><expr><name pos:line="291" pos:column="24">substituted</name></expr></argument>, <argument><expr><call><name><name pos:line="291" pos:column="37">replaced</name><op:operator pos:line="291" pos:column="45">.</op:operator><name pos:line="291" pos:column="46">c_str</name></name><argument_list pos:line="291" pos:column="51">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="293" pos:column="9">return <expr><name pos:line="293" pos:column="16">substituted</name></expr>;</return>
}</block></function>

<function><type><name pos:line="296" pos:column="1">wchar_t</name> <type:modifier pos:line="296" pos:column="9">*</type:modifier></type><name><name pos:line="296" pos:column="10">BoostRegexSearch</name><op:operator pos:line="296" pos:column="26">::</op:operator><name pos:line="296" pos:column="28">utf8ToWchar</name></name><parameter_list pos:line="296" pos:column="39">(<param><decl><type><specifier pos:line="296" pos:column="40">const</specifier> <name pos:line="296" pos:column="46">char</name> <type:modifier pos:line="296" pos:column="51">*</type:modifier></type><name pos:line="296" pos:column="52">utf8</name></decl></param>)</parameter_list>
<block pos:line="297" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="298" pos:column="9">int</name></type> <name pos:line="298" pos:column="13">utf8Size</name> <init pos:line="298" pos:column="22">= <expr><call><name pos:line="298" pos:column="24">strlen</name><argument_list pos:line="298" pos:column="30">(<argument><expr><name pos:line="298" pos:column="31">utf8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="299" pos:column="9">int</name></type> <name pos:line="299" pos:column="13">wcharSize</name> <init pos:line="299" pos:column="23">= <expr><call><name pos:line="299" pos:column="25">UTF16Length</name><argument_list pos:line="299" pos:column="36">(<argument><expr><name pos:line="299" pos:column="37">utf8</name></expr></argument>, <argument><expr><name pos:line="299" pos:column="43">utf8Size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="300" pos:column="9">wchar_t</name> <type:modifier pos:line="300" pos:column="17">*</type:modifier></type><name pos:line="300" pos:column="18">w</name> <init pos:line="300" pos:column="20">= <expr><op:operator pos:line="300" pos:column="22">new</op:operator> <name><name pos:line="300" pos:column="26">wchar_t</name><index pos:line="300" pos:column="33">[<expr><name pos:line="300" pos:column="34">wcharSize</name> <op:operator pos:line="300" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="300" pos:column="46">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="301" pos:column="9">UTF16FromUTF8</name><argument_list pos:line="301" pos:column="22">(<argument><expr><name pos:line="301" pos:column="23">utf8</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="29">utf8Size</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="39">w</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="42">wcharSize</name> <op:operator pos:line="301" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="301" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="302" pos:column="9">w</name><index pos:line="302" pos:column="10">[<expr><name pos:line="302" pos:column="11">wcharSize</name></expr>]</index></name> <op:operator pos:line="302" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="302" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	
	<return pos:line="304" pos:column="9">return <expr><name pos:line="304" pos:column="16">w</name></expr>;</return>
}</block></function>

<function><type><name pos:line="307" pos:column="1">char</name><type:modifier pos:line="307" pos:column="5">*</type:modifier></type> <name><name pos:line="307" pos:column="7">BoostRegexSearch</name><op:operator pos:line="307" pos:column="23">::</op:operator><name pos:line="307" pos:column="25">wcharToUtf8</name></name><parameter_list pos:line="307" pos:column="36">(<param><decl><type><specifier pos:line="307" pos:column="37">const</specifier> <name pos:line="307" pos:column="43">wchar_t</name> <type:modifier pos:line="307" pos:column="51">*</type:modifier></type><name pos:line="307" pos:column="52">w</name></decl></param>)</parameter_list>
<block pos:line="308" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="309" pos:column="9">int</name></type> <name pos:line="309" pos:column="13">wcharSize</name> <init pos:line="309" pos:column="23">= <expr><call><name pos:line="309" pos:column="25">wcslen</name><argument_list pos:line="309" pos:column="31">(<argument><expr><name pos:line="309" pos:column="32">w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="310" pos:column="9">int</name></type> <name pos:line="310" pos:column="13">charSize</name> <init pos:line="310" pos:column="22">= <expr><call><name pos:line="310" pos:column="24">UTF8Length</name><argument_list pos:line="310" pos:column="34">(<argument><expr><name pos:line="310" pos:column="35">w</name></expr></argument>, <argument><expr><name pos:line="310" pos:column="38">wcharSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="311" pos:column="9">char</name> <type:modifier pos:line="311" pos:column="14">*</type:modifier></type><name pos:line="311" pos:column="15">c</name> <init pos:line="311" pos:column="17">= <expr><op:operator pos:line="311" pos:column="19">new</op:operator> <name><name pos:line="311" pos:column="23">char</name><index pos:line="311" pos:column="27">[<expr><name pos:line="311" pos:column="28">charSize</name> <op:operator pos:line="311" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="311" pos:column="39">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="312" pos:column="9">UTF8FromUTF16</name><argument_list pos:line="312" pos:column="22">(<argument><expr><name pos:line="312" pos:column="23">w</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="26">wcharSize</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="37">c</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="40">charSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="313" pos:column="9">c</name><index pos:line="313" pos:column="10">[<expr><name pos:line="313" pos:column="11">charSize</name></expr>]</index></name> <op:operator pos:line="313" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="313" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	<return pos:line="314" pos:column="9">return <expr><name pos:line="314" pos:column="16">c</name></expr>;</return>
}</block></function></unit>
