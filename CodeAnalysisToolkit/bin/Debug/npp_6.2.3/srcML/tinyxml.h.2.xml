<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\TinyXml\tinyxml.h" pos:tabs="8"><comment type="block" pos:line="1" pos:column="1">/*
www.sourceforge.net/projects/tinyxml
Original code (2.0 and earlier )copyright (c) 2000-2002 Lee Thomason (www.grinninglizard.com)

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any
damages arising from the use of this software.

Permission is granted to anyone to use this software for any
purpose, including commercial applications, and to alter it and
redistribute it freely, subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must
not claim that you wrote the original software. If you use this
software in a product, an acknowledgment in the product documentation
would be appreciated but is not required.

2. Altered source versions must be plainly marked as such, and
must not be misrepresented as being the original software.

3. This notice may not be removed or altered from any source
distribution.
*/</comment>


<cpp:ifndef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifndef</cpp:directive> <name pos:line="26" pos:column="9">TINYXML_INCLUDED</name></cpp:ifndef>
<cpp:define pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="27" pos:column="9">TINYXML_INCLUDED</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">pragma</cpp:directive> warning( disable : 4530 )</cpp:pragma>
<cpp:pragma pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">pragma</cpp:directive> warning( disable : 4786 )</cpp:pragma>
<cpp:endif pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">endif</cpp:directive></cpp:endif>


<comment type="line" pos:line="35" pos:column="1">// Help out windows:</comment>
<cpp:if pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">if</cpp:directive> <expr><call><name pos:line="36" pos:column="5">defined</name><argument_list pos:line="36" pos:column="12">( <argument><expr><name pos:line="36" pos:column="14">_DEBUG</name></expr></argument> )</argument_list></call> <op:operator pos:line="36" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="36" pos:column="26">!</op:operator><call><name pos:line="36" pos:column="27">defined</name><argument_list pos:line="36" pos:column="34">( <argument><expr><name pos:line="36" pos:column="36">DEBUG</name></expr></argument> )</argument_list></call></expr></cpp:if>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">DEBUG</name></cpp:macro></cpp:define>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if</cpp:directive> <expr><call><name pos:line="40" pos:column="5">defined</name><argument_list pos:line="40" pos:column="12">( <argument><expr><name pos:line="40" pos:column="14">DEBUG</name></expr></argument> )</argument_list></call> <op:operator pos:line="40" pos:column="22">&amp;&amp;</op:operator> <call><name pos:line="40" pos:column="25">defined</name><argument_list pos:line="40" pos:column="32">( <argument><expr><name pos:line="40" pos:column="34">_MSC_VER</name></expr></argument> )</argument_list></call></expr></cpp:if>

<cpp:define pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="42" pos:column="9">TIXML_LOG</name></cpp:macro> <cpp:value pos:line="42" pos:column="19">OutputDebugString</cpp:value></cpp:define>
<cpp:else pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="44" pos:column="9">TIXML_LOG</name></cpp:macro> <cpp:value pos:line="44" pos:column="19">printf</cpp:value></cpp:define>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">ifdef</cpp:directive> <name pos:line="47" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>
	<cpp:define pos:line="48" pos:column="9">#<cpp:directive pos:line="48" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="48" pos:column="17">TIXML_STRING</name></cpp:macro>	<cpp:value pos:line="48" pos:column="33">generic_string</cpp:value></cpp:define>
	<cpp:define pos:line="49" pos:column="9">#<cpp:directive pos:line="49" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="49" pos:column="17">TIXML_ISTREAM</name></cpp:macro>	<cpp:value pos:line="49" pos:column="33">std::basic_istream&lt;TCHAR&gt;</cpp:value></cpp:define>
	<cpp:define pos:line="50" pos:column="9">#<cpp:directive pos:line="50" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="50" pos:column="17">TIXML_OSTREAM</name></cpp:macro>	<cpp:value pos:line="50" pos:column="33">std::basic_ostream&lt;TCHAR&gt;</cpp:value></cpp:define>
	

<cpp:else pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">else</cpp:directive></cpp:else>
	<cpp:include pos:line="54" pos:column="9">#<cpp:directive pos:line="54" pos:column="10">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="54" pos:column="18">"tinystr.h"</lit:literal></cpp:file></cpp:include>
	<cpp:define pos:line="55" pos:column="9">#<cpp:directive pos:line="55" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="55" pos:column="17">TIXML_STRING</name></cpp:macro>	<cpp:value pos:line="55" pos:column="33">TiXmlString</cpp:value></cpp:define>
	<cpp:define pos:line="56" pos:column="9">#<cpp:directive pos:line="56" pos:column="10">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="17">TIXML_OSTREAM</name></cpp:macro>	<cpp:value pos:line="56" pos:column="33">TiXmlOutStream</cpp:value></cpp:define>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif</cpp:directive></cpp:endif>

<class_decl pos:line="59" pos:column="1">class <name pos:line="59" pos:column="7">TiXmlDocument</name>;</class_decl>
<class_decl pos:line="60" pos:column="1">class <name pos:line="60" pos:column="7">TiXmlElement</name>;</class_decl>
<class_decl pos:line="61" pos:column="1">class <name pos:line="61" pos:column="7">TiXmlComment</name>;</class_decl>
<class_decl pos:line="62" pos:column="1">class <name pos:line="62" pos:column="7">TiXmlUnknown</name>;</class_decl>
<class_decl pos:line="63" pos:column="1">class <name pos:line="63" pos:column="7">TiXmlAttribute</name>;</class_decl>
<class_decl pos:line="64" pos:column="1">class <name pos:line="64" pos:column="7">TiXmlText</name>;</class_decl>
<class_decl pos:line="65" pos:column="1">class <name pos:line="65" pos:column="7">TiXmlDeclaration</name>;</class_decl>

<class_decl pos:line="67" pos:column="1">class <name pos:line="67" pos:column="7">TiXmlParsingData</name>;</class_decl>

<comment type="block" pos:line="69" pos:column="1">/*	Internal structure for tracking location of items 
	in the XML file.
*/</comment>
<struct pos:line="72" pos:column="1">struct <name pos:line="72" pos:column="8">TiXmlCursor</name>
<block pos:line="73" pos:column="1">{<public type="default" pos:line="73" pos:column="2">
	<constructor><name pos:line="74" pos:column="9">TiXmlCursor</name><parameter_list pos:line="74" pos:column="20">()</parameter_list>		<block pos:line="74" pos:column="33">{ <expr_stmt><expr><call><name pos:line="74" pos:column="35">Clear</name><argument_list pos:line="74" pos:column="40">()</argument_list></call></expr>;</expr_stmt> }</block></constructor>
	<function><type><name pos:line="75" pos:column="9">void</name></type> <name pos:line="75" pos:column="14">Clear</name><parameter_list pos:line="75" pos:column="19">()</parameter_list>		<block pos:line="75" pos:column="33">{ <expr_stmt><expr><name pos:line="75" pos:column="35">row</name> <op:operator pos:line="75" pos:column="39">=</op:operator> <name pos:line="75" pos:column="41">col</name> <op:operator pos:line="75" pos:column="45">=</op:operator> <op:operator pos:line="75" pos:column="47">-</op:operator><lit:literal type="number" pos:line="75" pos:column="48">1</lit:literal></expr>;</expr_stmt> }</block></function>

	<decl_stmt><decl><type><name pos:line="77" pos:column="9">int</name></type> <name pos:line="77" pos:column="13">row</name></decl>;</decl_stmt>	<comment type="line" pos:line="77" pos:column="25">// 0 based.</comment>
	<decl_stmt><decl><type><name pos:line="78" pos:column="9">int</name></type> <name pos:line="78" pos:column="13">col</name></decl>;</decl_stmt>	<comment type="line" pos:line="78" pos:column="25">// 0 based.</comment>
</public>}</block>;</struct>


<comment type="line" pos:line="82" pos:column="1">// Only used by Attribute::Query functions</comment>
<enum pos:line="83" pos:column="1">enum 
<block pos:line="84" pos:column="1">{ 
	<decl><name pos:line="85" pos:column="9">TIXML_SUCCESS</name></decl><op:operator pos:line="85" pos:column="22">,</op:operator>
	<decl><name pos:line="86" pos:column="9">TIXML_NO_ATTRIBUTE</name></decl><op:operator pos:line="86" pos:column="27">,</op:operator>
	<decl><name pos:line="87" pos:column="9">TIXML_WRONG_TYPE</name></decl>
}</block>;</enum>

<comment type="block" format="doxygen" pos:line="90" pos:column="1">/** TiXmlBase is a base class for every class in TinyXml.
	It does little except to establish that TinyXml classes
	can be printed and provide some utility functions.

	In XML, the document and elements can contain
	other elements and other types of nodes.

	@verbatim
	A Document can contain:	Element	(container or leaf)
							Comment (leaf)
							Unknown (leaf)
							Declaration( leaf )

	An Element can contain:	Element (container or leaf)
							Text	(leaf)
							Attributes (not on tree)
							Comment (leaf)
							Unknown (leaf)

	A Decleration contains: Attributes (not on tree)
	@endverbatim
*/</comment>
<class pos:line="112" pos:column="1">class <name pos:line="112" pos:column="7">TiXmlBase</name>
<block pos:line="113" pos:column="1">{<private type="default" pos:line="113" pos:column="2">
	<class_decl><specifier pos:line="114" pos:column="9">friend</specifier> class <name pos:line="114" pos:column="22">TiXmlNode</name>;</class_decl>
	<class_decl><specifier pos:line="115" pos:column="9">friend</specifier> class <name pos:line="115" pos:column="22">TiXmlElement</name>;</class_decl>
	<class_decl><specifier pos:line="116" pos:column="9">friend</specifier> class <name pos:line="116" pos:column="22">TiXmlDocument</name>;</class_decl>

</private><public pos:line="118" pos:column="1">public:
	<constructor><name pos:line="119" pos:column="9">TiXmlBase</name><parameter_list pos:line="119" pos:column="18">()</parameter_list>								<block pos:line="119" pos:column="81">{}</block></constructor>
	<destructor><specifier pos:line="120" pos:column="9">virtual</specifier> <name pos:line="120" pos:column="17">~<name pos:line="120" pos:column="18">TiXmlBase</name></name><parameter_list pos:line="120" pos:column="27">()</parameter_list>					<block pos:line="120" pos:column="65">{}</block></destructor>

	<comment type="block" format="doxygen" pos:line="122" pos:column="9">/**	All TinyXml classes can print themselves to a filestream.
		This is a formatted print, and will insert tabs and newlines.
		
		(For an unformatted stream, use the &lt;&lt; operator.)
	*/</comment>
	<function_decl><type><specifier pos:line="127" pos:column="9">virtual</specifier> <name pos:line="127" pos:column="17">void</name></type> <name pos:line="127" pos:column="22">Print</name><parameter_list pos:line="127" pos:column="27">( <param><decl><type><name pos:line="127" pos:column="29">FILE</name><type:modifier pos:line="127" pos:column="33">*</type:modifier></type> <name pos:line="127" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="42">int</name></type> <name pos:line="127" pos:column="46">depth</name></decl></param> )</parameter_list> <specifier pos:line="127" pos:column="54">const</specifier> = <lit:literal type="number" pos:line="127" pos:column="62">0</lit:literal>;</function_decl>

	<comment type="block" format="doxygen" pos:line="129" pos:column="9">/**	The world does not agree on whether white space should be kept or
		not. In order to make everyone happy, these global, static functions
		are provided to set whether or not TinyXml will condense all white space
		into a single space or not. The default is to condense. Note changing this
		values is not thread safe.
	*/</comment>
	<function><type><specifier pos:line="135" pos:column="9">static</specifier> <name pos:line="135" pos:column="16">void</name></type> <name pos:line="135" pos:column="21">SetCondenseWhiteSpace</name><parameter_list pos:line="135" pos:column="42">( <param><decl><type><name pos:line="135" pos:column="44">bool</name></type> <name pos:line="135" pos:column="49">condense</name></decl></param> )</parameter_list>		<block pos:line="135" pos:column="73">{ <expr_stmt><expr><name pos:line="135" pos:column="75">condenseWhiteSpace</name> <op:operator pos:line="135" pos:column="94">=</op:operator> <name pos:line="135" pos:column="96">condense</name></expr>;</expr_stmt> }</block></function>

	<comment type="line" format="doxygen" pos:line="137" pos:column="9">/// Return the current white space setting.</comment>
	<function><type><specifier pos:line="138" pos:column="9">static</specifier> <name pos:line="138" pos:column="16">bool</name></type> <name pos:line="138" pos:column="21">IsWhiteSpaceCondensed</name><parameter_list pos:line="138" pos:column="42">()</parameter_list>						<block pos:line="138" pos:column="89">{ <return pos:line="138" pos:column="91">return <expr><name pos:line="138" pos:column="98">condenseWhiteSpace</name></expr>;</return> }</block></function>

	<comment type="block" format="doxygen" pos:line="140" pos:column="9">/** Return the position, in the original source file, of this node or attribute.
		The row and column are 1-based. (That is the first row and first column is
		1,1). If the returns values are 0 or less, then the parser does not have
		a row and column value.

		Generally, the row and column value will be set when the TiXmlDocument::Load(),
		TiXmlDocument::LoadFile(), or any TiXmlNode::Parse() is called. It will NOT be set
		when the DOM was created from operator&gt;&gt;.

		The values reflect the initial load. Once the DOM is modified programmatically
		(by adding or changing nodes and attributes) the new values will NOT update to
		reflect changes in the document.

		There is a minor performance cost to computing the row and column. Computation
		can be disabled if TiXmlDocument::SetTabSize() is called with 0 as the value.

		@sa TiXmlDocument::SetTabSize()
	*/</comment>
	<function><type><name pos:line="158" pos:column="9">int</name></type> <name pos:line="158" pos:column="13">Row</name><parameter_list pos:line="158" pos:column="16">()</parameter_list> <specifier pos:line="158" pos:column="19">const</specifier>			<block pos:line="158" pos:column="41">{ <return pos:line="158" pos:column="43">return <expr><name><name pos:line="158" pos:column="50">location</name><op:operator pos:line="158" pos:column="58">.</op:operator><name pos:line="158" pos:column="59">row</name></name> <op:operator pos:line="158" pos:column="63">+</op:operator> <lit:literal type="number" pos:line="158" pos:column="65">1</lit:literal></expr>;</return> }</block></function>
	<function><type><name pos:line="159" pos:column="9">int</name></type> <name pos:line="159" pos:column="13">Column</name><parameter_list pos:line="159" pos:column="19">()</parameter_list> <specifier pos:line="159" pos:column="22">const</specifier>		<block pos:line="159" pos:column="41">{ <return pos:line="159" pos:column="43">return <expr><name><name pos:line="159" pos:column="50">location</name><op:operator pos:line="159" pos:column="58">.</op:operator><name pos:line="159" pos:column="59">col</name></name> <op:operator pos:line="159" pos:column="63">+</op:operator> <lit:literal type="number" pos:line="159" pos:column="65">1</lit:literal></expr>;</return> }</block></function>	<comment type="line" format="doxygen" pos:line="159" pos:column="73">///&lt; See Row()</comment>

</public><protected pos:line="161" pos:column="1">protected:
	<comment type="line" pos:line="162" pos:column="9">// See STL_STRING_BUG</comment>
	<comment type="line" pos:line="163" pos:column="9">// Utility class to overcome a bug.</comment>
	<class pos:line="164" pos:column="9">class <name pos:line="164" pos:column="15">StringToBuffer</name>
	<block pos:line="165" pos:column="9">{<private type="default" pos:line="165" pos:column="10">
	  </private><public pos:line="166" pos:column="11">public:
		<constructor_decl><name pos:line="167" pos:column="17">StringToBuffer</name><parameter_list pos:line="167" pos:column="31">( <param><decl><type><specifier pos:line="167" pos:column="33">const</specifier> <name pos:line="167" pos:column="39">TIXML_STRING</name><type:modifier pos:line="167" pos:column="51">&amp;</type:modifier></type> <name pos:line="167" pos:column="53">str</name></decl></param> )</parameter_list>;</constructor_decl>
		<destructor_decl><name pos:line="168" pos:column="17">~<name pos:line="168" pos:column="18">StringToBuffer</name></name><parameter_list pos:line="168" pos:column="32">()</parameter_list>;</destructor_decl>
		<decl_stmt><decl><type><name pos:line="169" pos:column="17">TCHAR</name><type:modifier pos:line="169" pos:column="22">*</type:modifier></type> <name pos:line="169" pos:column="24">buffer</name></decl>;</decl_stmt>
	</public>}</block>;</class>

	<function_decl><type><specifier pos:line="172" pos:column="9">static</specifier> <specifier pos:line="172" pos:column="16">const</specifier> <name pos:line="172" pos:column="22">TCHAR</name><type:modifier pos:line="172" pos:column="27">*</type:modifier></type>	<name pos:line="172" pos:column="33">SkipWhiteSpace</name><parameter_list pos:line="172" pos:column="47">( <param><decl><type><specifier pos:line="172" pos:column="49">const</specifier></type> <name pos:line="172" pos:column="55">TCHAR</name><type:modifier pos:line="172" pos:column="60">*</type:modifier></decl></param> )</parameter_list>;</function_decl>
	<function><type><specifier pos:line="173" pos:column="9">inline</specifier> <specifier pos:line="173" pos:column="16">static</specifier> <name pos:line="173" pos:column="23">bool</name></type>	<name pos:line="173" pos:column="33">IsWhiteSpace</name><parameter_list pos:line="173" pos:column="45">( <param><decl><type><name pos:line="173" pos:column="47">int</name></type> <name pos:line="173" pos:column="51">c</name></decl></param> )</parameter_list>		<block pos:line="173" pos:column="65">{ <return pos:line="173" pos:column="67">return <expr><op:operator pos:line="173" pos:column="74">(</op:operator> <call><name pos:line="173" pos:column="76">isspace</name><argument_list pos:line="173" pos:column="83">( <argument><expr><name pos:line="173" pos:column="85">c</name></expr></argument> )</argument_list></call> <op:operator pos:line="173" pos:column="89">||</op:operator> <name pos:line="173" pos:column="92">c</name> <op:operator pos:line="173" pos:column="94">==</op:operator> <lit:literal type="char" pos:line="173" pos:column="97">'\n'</lit:literal> <op:operator pos:line="173" pos:column="102">||</op:operator> <name pos:line="173" pos:column="105">c</name> <op:operator pos:line="173" pos:column="107">==</op:operator> <lit:literal type="char" pos:line="173" pos:column="110">'\r'</lit:literal> <op:operator pos:line="173" pos:column="115">)</op:operator></expr>;</return> }</block></function>

	<function_decl><type><specifier pos:line="175" pos:column="9">virtual</specifier> <name pos:line="175" pos:column="17">void</name></type> <name pos:line="175" pos:column="22">StreamOut</name> <parameter_list pos:line="175" pos:column="32">(<param><decl><type><name pos:line="175" pos:column="33">TIXML_OSTREAM</name> <type:modifier pos:line="175" pos:column="47">*</type:modifier></type></decl></param>)</parameter_list> <specifier pos:line="175" pos:column="50">const</specifier> = <lit:literal type="number" pos:line="175" pos:column="58">0</lit:literal>;</function_decl>

	<cpp:ifdef pos:line="177" pos:column="9">#<cpp:directive pos:line="177" pos:column="10">ifdef</cpp:directive> <name pos:line="177" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	    <function_decl><type><specifier pos:line="178" pos:column="13">static</specifier> <name pos:line="178" pos:column="20">bool</name></type>	<name pos:line="178" pos:column="25">StreamWhiteSpace</name><parameter_list pos:line="178" pos:column="41">( <param><decl><type><name pos:line="178" pos:column="43">TIXML_ISTREAM</name> <type:modifier pos:line="178" pos:column="57">*</type:modifier></type> <name pos:line="178" pos:column="59">in</name></decl></param>, <param><decl><type><name pos:line="178" pos:column="63">TIXML_STRING</name> <type:modifier pos:line="178" pos:column="76">*</type:modifier></type> <name pos:line="178" pos:column="78">tag</name></decl></param> )</parameter_list>;</function_decl>
	    <function_decl><type><specifier pos:line="179" pos:column="13">static</specifier> <name pos:line="179" pos:column="20">bool</name></type> <name pos:line="179" pos:column="25">StreamTo</name><parameter_list pos:line="179" pos:column="33">( <param><decl><type><name pos:line="179" pos:column="35">TIXML_ISTREAM</name> <type:modifier pos:line="179" pos:column="49">*</type:modifier></type> <name pos:line="179" pos:column="51">in</name></decl></param>, <param><decl><type><name pos:line="179" pos:column="55">int</name></type> <name pos:line="179" pos:column="59">character</name></decl></param>, <param><decl><type><name pos:line="179" pos:column="70">TIXML_STRING</name> <type:modifier pos:line="179" pos:column="83">*</type:modifier></type> <name pos:line="179" pos:column="85">tag</name></decl></param> )</parameter_list>;</function_decl>
	<cpp:endif pos:line="180" pos:column="9">#<cpp:directive pos:line="180" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="block" pos:line="182" pos:column="9">/*	Reads an XML name into the generic_string provided. Returns
		a pointer just past the last character of the name,
		or 0 if the function has an error.
	*/</comment>
	<function_decl><type><specifier pos:line="186" pos:column="9">static</specifier> <specifier pos:line="186" pos:column="16">const</specifier> <name pos:line="186" pos:column="22">TCHAR</name><type:modifier pos:line="186" pos:column="27">*</type:modifier></type> <name pos:line="186" pos:column="29">ReadName</name><parameter_list pos:line="186" pos:column="37">( <param><decl><type><specifier pos:line="186" pos:column="39">const</specifier> <name pos:line="186" pos:column="45">TCHAR</name><type:modifier pos:line="186" pos:column="50">*</type:modifier></type> <name pos:line="186" pos:column="52">p</name></decl></param>, <param><decl><type><name pos:line="186" pos:column="55">TIXML_STRING</name><type:modifier pos:line="186" pos:column="67">*</type:modifier></type> <name pos:line="186" pos:column="69">name</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="block" pos:line="188" pos:column="9">/*	Reads text. Returns a pointer past the given end tag.
		Wickedly complex options, but it keeps the (sensitive) code in one place.
	*/</comment>
	<function_decl><type><specifier pos:line="191" pos:column="9">static</specifier> <specifier pos:line="191" pos:column="16">const</specifier> <name pos:line="191" pos:column="22">TCHAR</name><type:modifier pos:line="191" pos:column="27">*</type:modifier></type> <name pos:line="191" pos:column="29">ReadText</name><parameter_list pos:line="191" pos:column="37">(	<param><decl><type><specifier pos:line="191" pos:column="41">const</specifier> <name pos:line="191" pos:column="47">TCHAR</name><type:modifier pos:line="191" pos:column="52">*</type:modifier></type> <name pos:line="191" pos:column="54">in</name></decl></param>,				<comment type="line" pos:line="191" pos:column="89">// where to start</comment>
									<param><decl><type><name pos:line="192" pos:column="73">TIXML_STRING</name><type:modifier pos:line="192" pos:column="85">*</type:modifier></type> <name pos:line="192" pos:column="87">text</name></decl></param>,			<comment type="line" pos:line="192" pos:column="113">// the generic_string read</comment>
									<param><decl><type><name pos:line="193" pos:column="73">bool</name></type> <name pos:line="193" pos:column="78">ignoreWhiteSpace</name></decl></param>,		<comment type="line" pos:line="193" pos:column="105">// whether to keep the white space</comment>
									<param><decl><type><specifier pos:line="194" pos:column="73">const</specifier> <name pos:line="194" pos:column="79">TCHAR</name><type:modifier pos:line="194" pos:column="84">*</type:modifier></type> <name pos:line="194" pos:column="86">endTag</name></decl></param>,			<comment type="line" pos:line="194" pos:column="113">// what ends this text</comment>
									<param><decl><type><name pos:line="195" pos:column="73">bool</name></type> <name pos:line="195" pos:column="78">ignoreCase</name></decl></param> )</parameter_list>;</function_decl>			<comment type="line" pos:line="195" pos:column="113">// whether to ignore case in the end tag</comment>

	<function_decl><type><specifier pos:line="197" pos:column="9">virtual</specifier> <specifier pos:line="197" pos:column="17">const</specifier> <name pos:line="197" pos:column="23">TCHAR</name><type:modifier pos:line="197" pos:column="28">*</type:modifier></type> <name pos:line="197" pos:column="30">Parse</name><parameter_list pos:line="197" pos:column="35">( <param><decl><type><specifier pos:line="197" pos:column="37">const</specifier> <name pos:line="197" pos:column="43">TCHAR</name><type:modifier pos:line="197" pos:column="48">*</type:modifier></type> <name pos:line="197" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="197" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="197" pos:column="69">*</type:modifier></type> <name pos:line="197" pos:column="71">data</name></decl></param> )</parameter_list> = <lit:literal type="number" pos:line="197" pos:column="80">0</lit:literal>;</function_decl>

	<comment type="line" pos:line="199" pos:column="9">// If an entity has been found, transform it into a character.</comment>
	<function_decl><type><specifier pos:line="200" pos:column="9">static</specifier> <specifier pos:line="200" pos:column="16">const</specifier> <name pos:line="200" pos:column="22">TCHAR</name><type:modifier pos:line="200" pos:column="27">*</type:modifier></type> <name pos:line="200" pos:column="29">GetEntity</name><parameter_list pos:line="200" pos:column="38">( <param><decl><type><specifier pos:line="200" pos:column="40">const</specifier> <name pos:line="200" pos:column="46">TCHAR</name><type:modifier pos:line="200" pos:column="51">*</type:modifier></type> <name pos:line="200" pos:column="53">in</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="57">TCHAR</name><type:modifier pos:line="200" pos:column="62">*</type:modifier></type> <name pos:line="200" pos:column="64">value</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="line" pos:line="202" pos:column="9">// Get a character, while interpreting entities.</comment>
	<function><type><specifier pos:line="203" pos:column="9">inline</specifier> <specifier pos:line="203" pos:column="16">static</specifier> <specifier pos:line="203" pos:column="23">const</specifier> <name pos:line="203" pos:column="29">TCHAR</name><type:modifier pos:line="203" pos:column="34">*</type:modifier></type> <name pos:line="203" pos:column="36">GetChar</name><parameter_list pos:line="203" pos:column="43">( <param><decl><type><specifier pos:line="203" pos:column="45">const</specifier> <name pos:line="203" pos:column="51">TCHAR</name><type:modifier pos:line="203" pos:column="56">*</type:modifier></type> <name pos:line="203" pos:column="58">p</name></decl></param>, <param><decl><type><name pos:line="203" pos:column="61">TCHAR</name><type:modifier pos:line="203" pos:column="66">*</type:modifier></type> <name pos:line="203" pos:column="68">_value</name></decl></param> )</parameter_list>
	<block pos:line="204" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="205" pos:column="17">assert</name><argument_list pos:line="205" pos:column="23">( <argument><expr><name pos:line="205" pos:column="25">p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="206" pos:column="17">if <condition pos:line="206" pos:column="20">( <expr><op:operator pos:line="206" pos:column="22">*</op:operator><name pos:line="206" pos:column="23">p</name> <op:operator pos:line="206" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="206" pos:column="28">'&amp;'</lit:literal></expr> )</condition><then pos:line="206" pos:column="33">
		<block pos:line="207" pos:column="17">{
			<return pos:line="208" pos:column="25">return <expr><call><name pos:line="208" pos:column="32">GetEntity</name><argument_list pos:line="208" pos:column="41">( <argument><expr><name pos:line="208" pos:column="43">p</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="46">_value</name></expr></argument> )</argument_list></call></expr>;</return>
		}</block></then>
		<else pos:line="210" pos:column="17">else
		<block pos:line="211" pos:column="17">{
			<expr_stmt><expr><op:operator pos:line="212" pos:column="25">*</op:operator><name pos:line="212" pos:column="26">_value</name> <op:operator pos:line="212" pos:column="33">=</op:operator> <op:operator pos:line="212" pos:column="35">*</op:operator><name pos:line="212" pos:column="36">p</name></expr>;</expr_stmt>
			<return pos:line="213" pos:column="25">return <expr><name pos:line="213" pos:column="32">p</name><op:operator pos:line="213" pos:column="33">+</op:operator><lit:literal type="number" pos:line="213" pos:column="34">1</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></function>

	<comment type="line" pos:line="217" pos:column="9">// Puts a generic_string to a stream, expanding entities as it goes.</comment>
	<comment type="line" pos:line="218" pos:column="9">// Note this should not contian the '&lt;', '&gt;', etc, or they will be transformed into entities!</comment>
	<function_decl><type><specifier pos:line="219" pos:column="9">static</specifier> <name pos:line="219" pos:column="16">void</name></type> <name pos:line="219" pos:column="21">PutString</name><parameter_list pos:line="219" pos:column="30">( <param><decl><type><specifier pos:line="219" pos:column="32">const</specifier> <name pos:line="219" pos:column="38">TIXML_STRING</name><type:modifier pos:line="219" pos:column="50">&amp;</type:modifier></type> <name pos:line="219" pos:column="52">str</name></decl></param>, <param><decl><type><name pos:line="219" pos:column="57">TIXML_OSTREAM</name><type:modifier pos:line="219" pos:column="70">*</type:modifier></type> <name pos:line="219" pos:column="72">out</name></decl></param> )</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="221" pos:column="9">static</specifier> <name pos:line="221" pos:column="16">void</name></type> <name pos:line="221" pos:column="21">PutString</name><parameter_list pos:line="221" pos:column="30">( <param><decl><type><specifier pos:line="221" pos:column="32">const</specifier> <name pos:line="221" pos:column="38">TIXML_STRING</name><type:modifier pos:line="221" pos:column="50">&amp;</type:modifier></type> <name pos:line="221" pos:column="52">str</name></decl></param>, <param><decl><type><name pos:line="221" pos:column="57">TIXML_STRING</name><type:modifier pos:line="221" pos:column="69">*</type:modifier></type> <name pos:line="221" pos:column="71">out</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="line" pos:line="223" pos:column="9">// Return true if the next characters in the stream are any of the endTag sequences.</comment>
	<function_decl><type><specifier pos:line="224" pos:column="9">static</specifier> <name pos:line="224" pos:column="16">bool</name></type> <name pos:line="224" pos:column="21">StringEqual</name><parameter_list pos:line="224" pos:column="32">(	<param><decl><type><specifier pos:line="224" pos:column="41">const</specifier> <name pos:line="224" pos:column="47">TCHAR</name><type:modifier pos:line="224" pos:column="52">*</type:modifier></type> <name pos:line="224" pos:column="54">p</name></decl></param>,
								<param><decl><type><specifier pos:line="225" pos:column="65">const</specifier> <name pos:line="225" pos:column="71">TCHAR</name><type:modifier pos:line="225" pos:column="76">*</type:modifier></type> <name pos:line="225" pos:column="78">endTag</name></decl></param>,
								<param><decl><type><name pos:line="226" pos:column="65">bool</name></type> <name pos:line="226" pos:column="70">ignoreCase</name></decl></param> )</parameter_list>;</function_decl>


	<enum pos:line="229" pos:column="9">enum
	<block pos:line="230" pos:column="9">{
		<decl><name pos:line="231" pos:column="17">TIXML_NO_ERROR</name> <init pos:line="231" pos:column="32">= <expr><lit:literal type="number" pos:line="231" pos:column="34">0</lit:literal></expr></init></decl><op:operator pos:line="231" pos:column="35">,</op:operator>
		<decl><name pos:line="232" pos:column="17">TIXML_ERROR</name></decl><op:operator pos:line="232" pos:column="28">,</op:operator>
		<decl><name pos:line="233" pos:column="17">TIXML_ERROR_OPENING_FILE</name></decl><op:operator pos:line="233" pos:column="41">,</op:operator>
		<decl><name pos:line="234" pos:column="17">TIXML_ERROR_OUT_OF_MEMORY</name></decl><op:operator pos:line="234" pos:column="42">,</op:operator>
		<decl><name pos:line="235" pos:column="17">TIXML_ERROR_PARSING_ELEMENT</name></decl><op:operator pos:line="235" pos:column="44">,</op:operator>
		<decl><name pos:line="236" pos:column="17">TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME</name></decl><op:operator pos:line="236" pos:column="56">,</op:operator>
		<decl><name pos:line="237" pos:column="17">TIXML_ERROR_READING_ELEMENT_VALUE</name></decl><op:operator pos:line="237" pos:column="50">,</op:operator>
		<decl><name pos:line="238" pos:column="17">TIXML_ERROR_READING_ATTRIBUTES</name></decl><op:operator pos:line="238" pos:column="47">,</op:operator>
		<decl><name pos:line="239" pos:column="17">TIXML_ERROR_PARSING_EMPTY</name></decl><op:operator pos:line="239" pos:column="42">,</op:operator>
		<decl><name pos:line="240" pos:column="17">TIXML_ERROR_READING_END_TAG</name></decl><op:operator pos:line="240" pos:column="44">,</op:operator>
		<decl><name pos:line="241" pos:column="17">TIXML_ERROR_PARSING_UNKNOWN</name></decl><op:operator pos:line="241" pos:column="44">,</op:operator>
		<decl><name pos:line="242" pos:column="17">TIXML_ERROR_PARSING_COMMENT</name></decl><op:operator pos:line="242" pos:column="44">,</op:operator>
		<decl><name pos:line="243" pos:column="17">TIXML_ERROR_PARSING_DECLARATION</name></decl><op:operator pos:line="243" pos:column="48">,</op:operator>
		<decl><name pos:line="244" pos:column="17">TIXML_ERROR_DOCUMENT_EMPTY</name></decl><op:operator pos:line="244" pos:column="43">,</op:operator>

		<decl><name pos:line="246" pos:column="17">TIXML_ERROR_STRING_COUNT</name></decl>
	}</block>;</enum>
	<decl_stmt><decl><type><specifier pos:line="248" pos:column="9">static</specifier> <specifier pos:line="248" pos:column="16">const</specifier> <name pos:line="248" pos:column="22">TCHAR</name><type:modifier pos:line="248" pos:column="27">*</type:modifier></type> <name><name pos:line="248" pos:column="29">errorString</name><index pos:line="248" pos:column="40">[ <expr><name pos:line="248" pos:column="42">TIXML_ERROR_STRING_COUNT</name></expr> ]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="250" pos:column="9">TiXmlCursor</name></type> <name pos:line="250" pos:column="21">location</name></decl>;</decl_stmt>

</protected><private pos:line="252" pos:column="1">private:
	<struct pos:line="253" pos:column="9">struct <name pos:line="253" pos:column="16">Entity</name>
	<block pos:line="254" pos:column="9">{<public type="default" pos:line="254" pos:column="10">
		<decl_stmt><decl><type><specifier pos:line="255" pos:column="17">const</specifier> <name pos:line="255" pos:column="23">TCHAR</name><type:modifier pos:line="255" pos:column="28">*</type:modifier></type>     <name pos:line="255" pos:column="34">str</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="256" pos:column="17">unsigned</name> <name pos:line="256" pos:column="26">int</name></type>	<name pos:line="256" pos:column="33">strLength</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="257" pos:column="17">TCHAR</name></type>		    <name pos:line="257" pos:column="37">chr</name></decl>;</decl_stmt>
	</public>}</block>;</struct>
	<enum pos:line="259" pos:column="9">enum
	<block pos:line="260" pos:column="9">{
		<decl><name pos:line="261" pos:column="17">NUM_ENTITY</name> <init pos:line="261" pos:column="28">= <expr><lit:literal type="number" pos:line="261" pos:column="30">5</lit:literal></expr></init></decl><op:operator pos:line="261" pos:column="31">,</op:operator>
		<decl><name pos:line="262" pos:column="17">MAX_ENTITY_LENGTH</name> <init pos:line="262" pos:column="35">= <expr><lit:literal type="number" pos:line="262" pos:column="37">6</lit:literal></expr></init></decl>

	}</block>;</enum>
	<decl_stmt><decl><type><specifier pos:line="265" pos:column="9">static</specifier> <name pos:line="265" pos:column="16">Entity</name></type> <name><name pos:line="265" pos:column="23">entity</name><index pos:line="265" pos:column="29">[ <expr><name pos:line="265" pos:column="31">NUM_ENTITY</name></expr> ]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="266" pos:column="9">static</specifier> <name pos:line="266" pos:column="16">bool</name></type> <name pos:line="266" pos:column="21">condenseWhiteSpace</name></decl>;</decl_stmt>
</private>}</block>;</class>


<comment type="block" format="doxygen" pos:line="270" pos:column="1">/** The parent class for everything in the Document Object Model.
	(Except for attributes).
	Nodes have siblings, a parent, and children. A node can be
	in a document, or stand on its own. The type of a TiXmlNode
	can be queried, and it can be cast to its more defined type.
*/</comment>
<class pos:line="276" pos:column="1">class <name pos:line="276" pos:column="7">TiXmlNode</name> <super pos:line="276" pos:column="17">: <specifier pos:line="276" pos:column="19">public</specifier> <name pos:line="276" pos:column="26">TiXmlBase</name></super>
<block pos:line="277" pos:column="1">{<private type="default" pos:line="277" pos:column="2">
	<class_decl><specifier pos:line="278" pos:column="9">friend</specifier> class <name pos:line="278" pos:column="22">TiXmlDocument</name>;</class_decl>
	<class_decl><specifier pos:line="279" pos:column="9">friend</specifier> class <name pos:line="279" pos:column="22">TiXmlElement</name>;</class_decl>

</private><public pos:line="281" pos:column="1">public:
	<cpp:ifdef pos:line="282" pos:column="9">#<cpp:directive pos:line="282" pos:column="10">ifdef</cpp:directive> <name pos:line="282" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>	

	    <comment type="block" format="doxygen" pos:line="284" pos:column="13">/** An input stream operator, for every class. Tolerant of newlines and
		    formatting, but doesn't expect them.
	    */</comment>
	    <function_decl><type><specifier pos:line="287" pos:column="13">friend</specifier> <name><name pos:line="287" pos:column="20">std</name><op:operator pos:line="287" pos:column="23">::</op:operator><name><name pos:line="287" pos:column="25">basic_istream</name><argument_list pos:line="287" pos:column="38">&lt;<argument><expr><name pos:line="287" pos:column="39">TCHAR</name></expr></argument>&gt;</argument_list></name></name><type:modifier pos:line="287" pos:column="45">&amp;</type:modifier></type> <name pos:line="287" pos:column="47">operator &gt;&gt;</name> <parameter_list pos:line="287" pos:column="59">(<param><decl><type><name><name pos:line="287" pos:column="60">std</name><op:operator pos:line="287" pos:column="63">::</op:operator><name><name pos:line="287" pos:column="65">basic_istream</name><argument_list pos:line="287" pos:column="78">&lt;<argument><expr><name pos:line="287" pos:column="79">TCHAR</name></expr></argument>&gt;</argument_list></name></name><type:modifier pos:line="287" pos:column="85">&amp;</type:modifier></type> <name pos:line="287" pos:column="87">in</name></decl></param>, <param><decl><type><name pos:line="287" pos:column="91">TiXmlNode</name><type:modifier pos:line="287" pos:column="100">&amp;</type:modifier></type> <name pos:line="287" pos:column="102">base</name></decl></param>)</parameter_list>;</function_decl>

	    <comment type="block" format="doxygen" pos:line="289" pos:column="13">/** An output stream operator, for every class. Note that this outputs
		    without any newlines or formatting, as opposed to Print(), which
		    includes tabs and new lines.

		    The operator&lt;&lt; and operator&gt;&gt; are not completely symmetric. Writing
		    a node to a stream is very well defined. You'll get a nice stream
		    of output, without any extra whitespace or newlines.
		    
		    But reading is not as well defined. (As it always is.) If you create
		    a TiXmlElement (for example) and read that from an input stream,
		    the text needs to define an element or junk will result. This is
		    true of all input streams, but it's worth keeping in mind.

		    A TiXmlDocument will read nodes until it reads a root element, and
			all the children of that root element.
	    */</comment>	
	    <function_decl><type><specifier pos:line="305" pos:column="13">friend</specifier> <name><name pos:line="305" pos:column="20">std</name><op:operator pos:line="305" pos:column="23">::</op:operator><name><name pos:line="305" pos:column="25">basic_ostream</name><argument_list pos:line="305" pos:column="38">&lt;<argument><expr><name pos:line="305" pos:column="39">TCHAR</name></expr></argument>&gt;</argument_list></name></name><type:modifier pos:line="305" pos:column="45">&amp;</type:modifier></type> <name pos:line="305" pos:column="47">operator&lt;&lt;</name> <parameter_list pos:line="305" pos:column="58">(<param><decl><type><name><name pos:line="305" pos:column="59">std</name><op:operator pos:line="305" pos:column="62">::</op:operator><name><name pos:line="305" pos:column="64">basic_ostream</name><argument_list pos:line="305" pos:column="77">&lt;<argument><expr><name pos:line="305" pos:column="78">TCHAR</name></expr></argument>&gt;</argument_list></name></name><type:modifier pos:line="305" pos:column="84">&amp;</type:modifier></type> <name pos:line="305" pos:column="86">out</name></decl></param>, <param><decl><type><specifier pos:line="305" pos:column="91">const</specifier> <name pos:line="305" pos:column="97">TiXmlNode</name><type:modifier pos:line="305" pos:column="106">&amp;</type:modifier></type> <name pos:line="305" pos:column="108">base</name></decl></param>)</parameter_list>;</function_decl>

		<comment type="line" format="doxygen" pos:line="307" pos:column="17">/// Appends the XML node or attribute to a string.</comment>
		<function_decl><type><specifier pos:line="308" pos:column="17">friend</specifier> <name pos:line="308" pos:column="24">generic_string</name><type:modifier pos:line="308" pos:column="38">&amp;</type:modifier></type> <name pos:line="308" pos:column="40">operator&lt;&lt;</name> <parameter_list pos:line="308" pos:column="51">(<param><decl><type><name pos:line="308" pos:column="52">generic_string</name><type:modifier pos:line="308" pos:column="66">&amp;</type:modifier></type> <name pos:line="308" pos:column="68">out</name></decl></param>, <param><decl><type><specifier pos:line="308" pos:column="73">const</specifier> <name pos:line="308" pos:column="79">TiXmlNode</name><type:modifier pos:line="308" pos:column="88">&amp;</type:modifier></type> <name pos:line="308" pos:column="90">base</name></decl></param> )</parameter_list>;</function_decl>

	<cpp:else pos:line="310" pos:column="9">#<cpp:directive pos:line="310" pos:column="10">else</cpp:directive></cpp:else>
	    <comment type="line" pos:line="311" pos:column="13">// Used internally, not part of the public API.</comment>
	    <function_decl><type><specifier pos:line="312" pos:column="13">friend</specifier> <name pos:line="312" pos:column="20">TIXML_OSTREAM</name><type:modifier pos:line="312" pos:column="33">&amp;</type:modifier></type> <name pos:line="312" pos:column="35">operator&lt;&lt;</name> <parameter_list pos:line="312" pos:column="46">(<param><decl><type><name pos:line="312" pos:column="47">TIXML_OSTREAM</name><type:modifier pos:line="312" pos:column="60">&amp;</type:modifier></type> <name pos:line="312" pos:column="62">out</name></decl></param>, <param><decl><type><specifier pos:line="312" pos:column="67">const</specifier> <name pos:line="312" pos:column="73">TiXmlNode</name><type:modifier pos:line="312" pos:column="82">&amp;</type:modifier></type> <name pos:line="312" pos:column="84">base</name></decl></param>)</parameter_list>;</function_decl>
	<cpp:endif pos:line="313" pos:column="9">#<cpp:directive pos:line="313" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen" pos:line="315" pos:column="9">/** The types of XML nodes supported by TinyXml. (All the
			unsupported types are picked up by UNKNOWN.)
	*/</comment>
	<enum pos:line="318" pos:column="9">enum <name pos:line="318" pos:column="14">NodeType</name>
	<block pos:line="319" pos:column="9">{
		<decl><name pos:line="320" pos:column="17">DOCUMENT</name></decl><op:operator pos:line="320" pos:column="25">,</op:operator>
		<decl><name pos:line="321" pos:column="17">ELEMENT</name></decl><op:operator pos:line="321" pos:column="24">,</op:operator>
		<decl><name pos:line="322" pos:column="17">COMMENT</name></decl><op:operator pos:line="322" pos:column="24">,</op:operator>
		<decl><name pos:line="323" pos:column="17">UNKNOWN</name></decl><op:operator pos:line="323" pos:column="24">,</op:operator>
		<decl><name pos:line="324" pos:column="17">TEXT</name></decl><op:operator pos:line="324" pos:column="21">,</op:operator>
		<decl><name pos:line="325" pos:column="17">DECLARATION</name></decl><op:operator pos:line="325" pos:column="28">,</op:operator>
		<decl><name pos:line="326" pos:column="17">TYPECOUNT</name></decl>
	}</block>;</enum>

	<destructor_decl><specifier pos:line="329" pos:column="9">virtual</specifier> <name pos:line="329" pos:column="17">~<name pos:line="329" pos:column="18">TiXmlNode</name></name><parameter_list pos:line="329" pos:column="27">()</parameter_list>;</destructor_decl>

	<comment type="block" format="doxygen" pos:line="331" pos:column="9">/** The meaning of 'value' changes for the specific type of
		TiXmlNode.
		@verbatim
		Document:	filename of the xml file
		Element:	name of the element
		Comment:	the comment text
		Unknown:	the tag contents
		Text:		the text generic_string
		@endverbatim

		The subclasses will wrap this function.
	*/</comment>
	<function><type><specifier pos:line="343" pos:column="9">const</specifier> <name pos:line="343" pos:column="15">TCHAR</name> <type:modifier pos:line="343" pos:column="21">*</type:modifier></type> <name pos:line="343" pos:column="23">Value</name><parameter_list pos:line="343" pos:column="28">()</parameter_list> <specifier pos:line="343" pos:column="31">const</specifier> <block pos:line="343" pos:column="37">{ <return pos:line="343" pos:column="39">return <expr><call><name><name pos:line="343" pos:column="46">value</name><op:operator pos:line="343" pos:column="51">.</op:operator><name pos:line="343" pos:column="52">c_str</name></name> <argument_list pos:line="343" pos:column="58">()</argument_list></call></expr>;</return> }</block></function>

	<comment type="block" format="doxygen" pos:line="345" pos:column="9">/** Changes the value of the node. Defined as:
		@verbatim
		Document:	filename of the xml file
		Element:	name of the element
		Comment:	the comment text
		Unknown:	the tag contents
		Text:		the text generic_string
		@endverbatim
	*/</comment>
	<function><type><name pos:line="354" pos:column="9">void</name></type> <name pos:line="354" pos:column="14">SetValue</name><parameter_list pos:line="354" pos:column="22">(<param><decl><type><specifier pos:line="354" pos:column="23">const</specifier> <name pos:line="354" pos:column="29">TCHAR</name> <type:modifier pos:line="354" pos:column="35">*</type:modifier></type> <name pos:line="354" pos:column="37">_value</name></decl></param>)</parameter_list> <block pos:line="354" pos:column="45">{ <expr_stmt><expr><name pos:line="354" pos:column="47">value</name> <op:operator pos:line="354" pos:column="53">=</op:operator> <name pos:line="354" pos:column="55">_value</name></expr>;</expr_stmt>}</block></function>

    <cpp:ifdef pos:line="356" pos:column="5">#<cpp:directive pos:line="356" pos:column="6">ifdef</cpp:directive> <name pos:line="356" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<comment type="line" format="doxygen" pos:line="357" pos:column="9">/// STL string form.</comment>
	<function><type><name pos:line="358" pos:column="9">void</name></type> <name pos:line="358" pos:column="14">SetValue</name><parameter_list pos:line="358" pos:column="22">( <param><decl><type><specifier pos:line="358" pos:column="24">const</specifier> <name pos:line="358" pos:column="30">generic_string</name><type:modifier pos:line="358" pos:column="44">&amp;</type:modifier></type> <name pos:line="358" pos:column="46">_value</name></decl></param> )</parameter_list>    
	<block pos:line="359" pos:column="9">{	  
		<function_decl><type><name pos:line="360" pos:column="17">StringToBuffer</name></type> <name pos:line="360" pos:column="32">buf</name><parameter_list pos:line="360" pos:column="35">( <param><decl><type><name pos:line="360" pos:column="37">_value</name></type></decl></param> )</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name pos:line="361" pos:column="17">SetValue</name><argument_list pos:line="361" pos:column="25">( <argument><expr><name><name pos:line="361" pos:column="27">buf</name><op:operator pos:line="361" pos:column="30">.</op:operator><name pos:line="361" pos:column="31">buffer</name></name> <op:operator pos:line="361" pos:column="38">?</op:operator> <name><name pos:line="361" pos:column="40">buf</name><op:operator pos:line="361" pos:column="43">.</op:operator><name pos:line="361" pos:column="44">buffer</name></name> <op:operator pos:line="361" pos:column="51">:</op:operator> <call><name pos:line="361" pos:column="53">TEXT</name><argument_list pos:line="361" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="361" pos:column="58">""</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>    	
	}</block></function>	
	<cpp:endif pos:line="363" pos:column="9">#<cpp:directive pos:line="363" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" format="doxygen" pos:line="365" pos:column="9">/// Delete all the children of this node. Does not affect 'this'.</comment>
	<function_decl><type><name pos:line="366" pos:column="9">void</name></type> <name pos:line="366" pos:column="14">Clear</name><parameter_list pos:line="366" pos:column="19">()</parameter_list>;</function_decl>

	<comment type="line" format="doxygen" pos:line="368" pos:column="9">/// One step up the DOM.</comment>
	<function><type><name pos:line="369" pos:column="9">TiXmlNode</name><type:modifier pos:line="369" pos:column="18">*</type:modifier></type> <name pos:line="369" pos:column="20">Parent</name><parameter_list pos:line="369" pos:column="26">()</parameter_list> <specifier pos:line="369" pos:column="29">const</specifier>					<block pos:line="369" pos:column="73">{ <return pos:line="369" pos:column="75">return <expr><name pos:line="369" pos:column="82">parent</name></expr>;</return> }</block></function>

	<function><type><name pos:line="371" pos:column="9">TiXmlNode</name><type:modifier pos:line="371" pos:column="18">*</type:modifier></type> <name pos:line="371" pos:column="20">FirstChild</name><parameter_list pos:line="371" pos:column="30">()</parameter_list>	<specifier pos:line="371" pos:column="33">const</specifier>	<block pos:line="371" pos:column="41">{ <return pos:line="371" pos:column="43">return <expr><name pos:line="371" pos:column="50">firstChild</name></expr>;</return> }</block></function>		<comment type="line" format="doxygen" pos:line="371" pos:column="73">///&lt; The first child of this node. Will be null if there are no children.</comment>
	<function_decl><type><name pos:line="372" pos:column="9">TiXmlNode</name><type:modifier pos:line="372" pos:column="18">*</type:modifier></type> <name pos:line="372" pos:column="20">FirstChild</name><parameter_list pos:line="372" pos:column="30">( <param><decl><type><specifier pos:line="372" pos:column="32">const</specifier> <name pos:line="372" pos:column="38">TCHAR</name> <type:modifier pos:line="372" pos:column="44">*</type:modifier></type> <name pos:line="372" pos:column="46">value</name></decl></param> )</parameter_list> <specifier pos:line="372" pos:column="54">const</specifier>;</function_decl>			<comment type="line" format="doxygen" pos:line="372" pos:column="81">///&lt; The first child of this node with the matching 'value'. Will be null if none found.</comment>

	<function><type><name pos:line="374" pos:column="9">TiXmlNode</name><type:modifier pos:line="374" pos:column="18">*</type:modifier></type> <name pos:line="374" pos:column="20">LastChild</name><parameter_list pos:line="374" pos:column="29">()</parameter_list> <specifier pos:line="374" pos:column="32">const</specifier>	<block pos:line="374" pos:column="41">{ <return pos:line="374" pos:column="43">return <expr><name pos:line="374" pos:column="50">lastChild</name></expr>;</return> }</block></function>		<comment type="line" format="doxygen" pos:line="374" pos:column="73">/// The last child of this node. Will be null if there are no children.</comment>
	<function_decl><type><name pos:line="375" pos:column="9">TiXmlNode</name><type:modifier pos:line="375" pos:column="18">*</type:modifier></type> <name pos:line="375" pos:column="20">LastChild</name><parameter_list pos:line="375" pos:column="29">( <param><decl><type><specifier pos:line="375" pos:column="31">const</specifier> <name pos:line="375" pos:column="37">TCHAR</name> <type:modifier pos:line="375" pos:column="43">*</type:modifier></type> <name pos:line="375" pos:column="45">value</name></decl></param> )</parameter_list> <specifier pos:line="375" pos:column="53">const</specifier>;</function_decl>			<comment type="line" format="doxygen" pos:line="375" pos:column="81">/// The last child of this node matching 'value'. Will be null if there are no children.</comment>

    <cpp:ifdef pos:line="377" pos:column="5">#<cpp:directive pos:line="377" pos:column="6">ifdef</cpp:directive> <name pos:line="377" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><name pos:line="378" pos:column="9">TiXmlNode</name><type:modifier pos:line="378" pos:column="18">*</type:modifier></type> <name pos:line="378" pos:column="20">FirstChild</name><parameter_list pos:line="378" pos:column="30">( <param><decl><type><specifier pos:line="378" pos:column="32">const</specifier> <name pos:line="378" pos:column="38">generic_string</name><type:modifier pos:line="378" pos:column="52">&amp;</type:modifier></type> <name pos:line="378" pos:column="54">_value</name></decl></param> )</parameter_list> <specifier pos:line="378" pos:column="63">const</specifier>	<block pos:line="378" pos:column="73">{	<return pos:line="378" pos:column="81">return <expr><call><name pos:line="378" pos:column="88">FirstChild</name> <argument_list pos:line="378" pos:column="99">(<argument><expr><call><name><name pos:line="378" pos:column="100">_value</name><op:operator pos:line="378" pos:column="106">.</op:operator><name pos:line="378" pos:column="107">c_str</name></name> <argument_list pos:line="378" pos:column="113">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>	}</block></function>	<comment type="line" format="doxygen" pos:line="378" pos:column="129">///&lt; STL std::generic_string form.</comment>
	<function><type><name pos:line="379" pos:column="9">TiXmlNode</name><type:modifier pos:line="379" pos:column="18">*</type:modifier></type> <name pos:line="379" pos:column="20">LastChild</name><parameter_list pos:line="379" pos:column="29">( <param><decl><type><specifier pos:line="379" pos:column="31">const</specifier> <name pos:line="379" pos:column="37">generic_string</name><type:modifier pos:line="379" pos:column="51">&amp;</type:modifier></type> <name pos:line="379" pos:column="53">_value</name></decl></param> )</parameter_list> <specifier pos:line="379" pos:column="62">const</specifier>		<block pos:line="379" pos:column="81">{	<return pos:line="379" pos:column="89">return <expr><call><name pos:line="379" pos:column="96">LastChild</name> <argument_list pos:line="379" pos:column="106">(<argument><expr><call><name><name pos:line="379" pos:column="107">_value</name><op:operator pos:line="379" pos:column="113">.</op:operator><name pos:line="379" pos:column="114">c_str</name></name> <argument_list pos:line="379" pos:column="120">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>	}</block></function>	<comment type="line" format="doxygen" pos:line="379" pos:column="137">///&lt; STL std::generic_string form.</comment>
	<cpp:endif pos:line="380" pos:column="9">#<cpp:directive pos:line="380" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen" pos:line="382" pos:column="9">/** An alternate way to walk the children of a node.
		One way to iterate over nodes is:
		@verbatim
			for( child = parent-&gt;FirstChild(); child; child = child-&gt;NextSibling() )
		@endverbatim

		IterateChildren does the same thing with the syntax:
		@verbatim
			child = 0;
			while( child = parent-&gt;IterateChildren( child ) )
		@endverbatim

		IterateChildren takes the previous child as input and finds
		the next one. If the previous child is null, it returns the
		first. IterateChildren will return null when done.
	*/</comment>
	<function_decl><type><name pos:line="398" pos:column="9">TiXmlNode</name><type:modifier pos:line="398" pos:column="18">*</type:modifier></type> <name pos:line="398" pos:column="20">IterateChildren</name><parameter_list pos:line="398" pos:column="35">( <param><decl><type><name pos:line="398" pos:column="37">TiXmlNode</name><type:modifier pos:line="398" pos:column="46">*</type:modifier></type> <name pos:line="398" pos:column="48">previous</name></decl></param> )</parameter_list> <specifier pos:line="398" pos:column="59">const</specifier>;</function_decl>

	<comment type="line" format="doxygen" pos:line="400" pos:column="9">/// This flavor of IterateChildren searches for children with a particular 'value'</comment>
	<function_decl><type><name pos:line="401" pos:column="9">TiXmlNode</name><type:modifier pos:line="401" pos:column="18">*</type:modifier></type> <name pos:line="401" pos:column="20">IterateChildren</name><parameter_list pos:line="401" pos:column="35">( <param><decl><type><specifier pos:line="401" pos:column="37">const</specifier> <name pos:line="401" pos:column="43">TCHAR</name> <type:modifier pos:line="401" pos:column="49">*</type:modifier></type> <name pos:line="401" pos:column="51">value</name></decl></param>, <param><decl><type><name pos:line="401" pos:column="58">TiXmlNode</name><type:modifier pos:line="401" pos:column="67">*</type:modifier></type> <name pos:line="401" pos:column="69">previous</name></decl></param> )</parameter_list> <specifier pos:line="401" pos:column="80">const</specifier>;</function_decl>

    <cpp:ifdef pos:line="403" pos:column="5">#<cpp:directive pos:line="403" pos:column="6">ifdef</cpp:directive> <name pos:line="403" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><name pos:line="404" pos:column="9">TiXmlNode</name><type:modifier pos:line="404" pos:column="18">*</type:modifier></type> <name pos:line="404" pos:column="20">IterateChildren</name><parameter_list pos:line="404" pos:column="35">( <param><decl><type><specifier pos:line="404" pos:column="37">const</specifier> <name pos:line="404" pos:column="43">generic_string</name><type:modifier pos:line="404" pos:column="57">&amp;</type:modifier></type> <name pos:line="404" pos:column="59">_value</name></decl></param>, <param><decl><type><name pos:line="404" pos:column="67">TiXmlNode</name><type:modifier pos:line="404" pos:column="76">*</type:modifier></type> <name pos:line="404" pos:column="78">previous</name></decl></param> )</parameter_list> <specifier pos:line="404" pos:column="89">const</specifier>	<block pos:line="404" pos:column="97">{	<return pos:line="404" pos:column="105">return <expr><call><name pos:line="404" pos:column="112">IterateChildren</name> <argument_list pos:line="404" pos:column="128">(<argument><expr><call><name><name pos:line="404" pos:column="129">_value</name><op:operator pos:line="404" pos:column="135">.</op:operator><name pos:line="404" pos:column="136">c_str</name></name> <argument_list pos:line="404" pos:column="142">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="404" pos:column="146">previous</name></expr></argument>)</argument_list></call></expr>;</return>	}</block></function>	<comment type="line" format="doxygen" pos:line="404" pos:column="169">///&lt; STL std::generic_string form.</comment>
	<cpp:endif pos:line="405" pos:column="9">#<cpp:directive pos:line="405" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen" pos:line="407" pos:column="9">/** Add a new node related to this. Adds a child past the LastChild.
		Returns a pointer to the new object or NULL if an error occured.
	*/</comment>
	<function_decl><type><name pos:line="410" pos:column="9">TiXmlNode</name><type:modifier pos:line="410" pos:column="18">*</type:modifier></type> <name pos:line="410" pos:column="20">InsertEndChild</name><parameter_list pos:line="410" pos:column="34">( <param><decl><type><specifier pos:line="410" pos:column="36">const</specifier> <name pos:line="410" pos:column="42">TiXmlNode</name><type:modifier pos:line="410" pos:column="51">&amp;</type:modifier></type> <name pos:line="410" pos:column="53">addThis</name></decl></param> )</parameter_list>;</function_decl>


	<comment type="block" format="doxygen" pos:line="413" pos:column="9">/** Add a new node related to this. Adds a child past the LastChild.

		NOTE: the node to be added is passed by pointer, and will be
		henceforth owned (and deleted) by tinyXml. This method is efficient
		and avoids an extra copy, but should be used with care as it
		uses a different memory model than the other insert functions.

		@sa InsertEndChild
	*/</comment>
	<function_decl><type><name pos:line="422" pos:column="9">TiXmlNode</name><type:modifier pos:line="422" pos:column="18">*</type:modifier></type> <name pos:line="422" pos:column="20">LinkEndChild</name><parameter_list pos:line="422" pos:column="32">( <param><decl><type><name pos:line="422" pos:column="34">TiXmlNode</name><type:modifier pos:line="422" pos:column="43">*</type:modifier></type> <name pos:line="422" pos:column="45">addThis</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="block" format="doxygen" pos:line="424" pos:column="9">/** Add a new node related to this. Adds a child before the specified child.
		Returns a pointer to the new object or NULL if an error occured.
	*/</comment>
	<function_decl><type><name pos:line="427" pos:column="9">TiXmlNode</name><type:modifier pos:line="427" pos:column="18">*</type:modifier></type> <name pos:line="427" pos:column="20">InsertBeforeChild</name><parameter_list pos:line="427" pos:column="37">( <param><decl><type><name pos:line="427" pos:column="39">TiXmlNode</name><type:modifier pos:line="427" pos:column="48">*</type:modifier></type> <name pos:line="427" pos:column="50">beforeThis</name></decl></param>, <param><decl><type><specifier pos:line="427" pos:column="62">const</specifier> <name pos:line="427" pos:column="68">TiXmlNode</name><type:modifier pos:line="427" pos:column="77">&amp;</type:modifier></type> <name pos:line="427" pos:column="79">addThis</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="block" format="doxygen" pos:line="429" pos:column="9">/** Add a new node related to this. Adds a child after the specified child.
		Returns a pointer to the new object or NULL if an error occured.
	*/</comment>
	<function_decl><type><name pos:line="432" pos:column="9">TiXmlNode</name><type:modifier pos:line="432" pos:column="18">*</type:modifier></type> <name pos:line="432" pos:column="20">InsertAfterChild</name><parameter_list pos:line="432" pos:column="36">(  <param><decl><type><name pos:line="432" pos:column="39">TiXmlNode</name><type:modifier pos:line="432" pos:column="48">*</type:modifier></type> <name pos:line="432" pos:column="50">afterThis</name></decl></param>, <param><decl><type><specifier pos:line="432" pos:column="61">const</specifier> <name pos:line="432" pos:column="67">TiXmlNode</name><type:modifier pos:line="432" pos:column="76">&amp;</type:modifier></type> <name pos:line="432" pos:column="78">addThis</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="block" format="doxygen" pos:line="434" pos:column="9">/** Replace a child of this node.
		Returns a pointer to the new object or NULL if an error occured.
	*/</comment>
	<function_decl><type><name pos:line="437" pos:column="9">TiXmlNode</name><type:modifier pos:line="437" pos:column="18">*</type:modifier></type> <name pos:line="437" pos:column="20">ReplaceChild</name><parameter_list pos:line="437" pos:column="32">( <param><decl><type><name pos:line="437" pos:column="34">TiXmlNode</name><type:modifier pos:line="437" pos:column="43">*</type:modifier></type> <name pos:line="437" pos:column="45">replaceThis</name></decl></param>, <param><decl><type><specifier pos:line="437" pos:column="58">const</specifier> <name pos:line="437" pos:column="64">TiXmlNode</name><type:modifier pos:line="437" pos:column="73">&amp;</type:modifier></type> <name pos:line="437" pos:column="75">withThis</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="line" format="doxygen" pos:line="439" pos:column="9">/// Delete a child of this node.</comment>
	<function_decl><type><name pos:line="440" pos:column="9">bool</name></type> <name pos:line="440" pos:column="14">RemoveChild</name><parameter_list pos:line="440" pos:column="25">( <param><decl><type><name pos:line="440" pos:column="27">TiXmlNode</name><type:modifier pos:line="440" pos:column="36">*</type:modifier></type> <name pos:line="440" pos:column="38">removeThis</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="line" format="doxygen" pos:line="442" pos:column="9">/// Navigate to a sibling node.</comment>
	<function><type><name pos:line="443" pos:column="9">TiXmlNode</name><type:modifier pos:line="443" pos:column="18">*</type:modifier></type> <name pos:line="443" pos:column="20">PreviousSibling</name><parameter_list pos:line="443" pos:column="35">()</parameter_list> <specifier pos:line="443" pos:column="38">const</specifier>			<block pos:line="443" pos:column="65">{ <return pos:line="443" pos:column="67">return <expr><name pos:line="443" pos:column="74">prev</name></expr>;</return> }</block></function>

	<comment type="line" format="doxygen" pos:line="445" pos:column="9">/// Navigate to a sibling node.</comment>
	<function_decl><type><name pos:line="446" pos:column="9">TiXmlNode</name><type:modifier pos:line="446" pos:column="18">*</type:modifier></type> <name pos:line="446" pos:column="20">PreviousSibling</name><parameter_list pos:line="446" pos:column="35">( <param><decl><type><specifier pos:line="446" pos:column="37">const</specifier></type> <name pos:line="446" pos:column="43">TCHAR</name> <type:modifier pos:line="446" pos:column="49">*</type:modifier></decl></param> )</parameter_list> <specifier pos:line="446" pos:column="53">const</specifier>;</function_decl>

    <cpp:ifdef pos:line="448" pos:column="5">#<cpp:directive pos:line="448" pos:column="6">ifdef</cpp:directive> <name pos:line="448" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><name pos:line="449" pos:column="9">TiXmlNode</name><type:modifier pos:line="449" pos:column="18">*</type:modifier></type> <name pos:line="449" pos:column="20">PreviousSibling</name><parameter_list pos:line="449" pos:column="35">( <param><decl><type><specifier pos:line="449" pos:column="37">const</specifier> <name pos:line="449" pos:column="43">generic_string</name><type:modifier pos:line="449" pos:column="57">&amp;</type:modifier></type> <name pos:line="449" pos:column="59">_value</name></decl></param> )</parameter_list> <specifier pos:line="449" pos:column="68">const</specifier>	<block pos:line="449" pos:column="81">{	<return pos:line="449" pos:column="89">return <expr><call><name pos:line="449" pos:column="96">PreviousSibling</name> <argument_list pos:line="449" pos:column="112">(<argument><expr><call><name><name pos:line="449" pos:column="113">_value</name><op:operator pos:line="449" pos:column="119">.</op:operator><name pos:line="449" pos:column="120">c_str</name></name> <argument_list pos:line="449" pos:column="126">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>	}</block></function>	<comment type="line" format="doxygen" pos:line="449" pos:column="145">///&lt; STL std::generic_string form.</comment>
	<function><type><name pos:line="450" pos:column="9">TiXmlNode</name><type:modifier pos:line="450" pos:column="18">*</type:modifier></type> <name pos:line="450" pos:column="20">NextSibling</name><parameter_list pos:line="450" pos:column="31">( <param><decl><type><specifier pos:line="450" pos:column="33">const</specifier> <name pos:line="450" pos:column="39">generic_string</name><type:modifier pos:line="450" pos:column="53">&amp;</type:modifier></type> <name pos:line="450" pos:column="55">_value</name></decl></param>)</parameter_list> <specifier pos:line="450" pos:column="63">const</specifier>		<block pos:line="450" pos:column="81">{	<return pos:line="450" pos:column="89">return <expr><call><name pos:line="450" pos:column="96">NextSibling</name> <argument_list pos:line="450" pos:column="108">(<argument><expr><call><name><name pos:line="450" pos:column="109">_value</name><op:operator pos:line="450" pos:column="115">.</op:operator><name pos:line="450" pos:column="116">c_str</name></name> <argument_list pos:line="450" pos:column="122">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>	}</block></function>	<comment type="line" format="doxygen" pos:line="450" pos:column="137">///&lt; STL std::generic_string form.</comment>
	<cpp:endif pos:line="451" pos:column="9">#<cpp:directive pos:line="451" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" format="doxygen" pos:line="453" pos:column="9">/// Navigate to a sibling node.</comment>
	<function><type><name pos:line="454" pos:column="9">TiXmlNode</name><type:modifier pos:line="454" pos:column="18">*</type:modifier></type> <name pos:line="454" pos:column="20">NextSibling</name><parameter_list pos:line="454" pos:column="31">()</parameter_list> <specifier pos:line="454" pos:column="34">const</specifier>				<block pos:line="454" pos:column="65">{ <return pos:line="454" pos:column="67">return <expr><name pos:line="454" pos:column="74">next</name></expr>;</return> }</block></function>

	<comment type="line" format="doxygen" pos:line="456" pos:column="9">/// Navigate to a sibling node with the given 'value'.</comment>
	<function_decl><type><name pos:line="457" pos:column="9">TiXmlNode</name><type:modifier pos:line="457" pos:column="18">*</type:modifier></type> <name pos:line="457" pos:column="20">NextSibling</name><parameter_list pos:line="457" pos:column="31">( <param><decl><type><specifier pos:line="457" pos:column="33">const</specifier></type> <name pos:line="457" pos:column="39">TCHAR</name> <type:modifier pos:line="457" pos:column="45">*</type:modifier></decl></param> )</parameter_list> <specifier pos:line="457" pos:column="49">const</specifier>;</function_decl>

	<comment type="block" format="doxygen" pos:line="459" pos:column="9">/** Convenience function to get through elements.
		Calls NextSibling and ToElement. Will skip all non-Element
		nodes. Returns 0 if there is not another element.
	*/</comment>
	<function_decl><type><name pos:line="463" pos:column="9">TiXmlElement</name><type:modifier pos:line="463" pos:column="21">*</type:modifier></type> <name pos:line="463" pos:column="23">NextSiblingElement</name><parameter_list pos:line="463" pos:column="41">()</parameter_list> <specifier pos:line="463" pos:column="44">const</specifier>;</function_decl>

	<comment type="block" format="doxygen" pos:line="465" pos:column="9">/** Convenience function to get through elements.
		Calls NextSibling and ToElement. Will skip all non-Element
		nodes. Returns 0 if there is not another element.
	*/</comment>
	<function_decl><type><name pos:line="469" pos:column="9">TiXmlElement</name><type:modifier pos:line="469" pos:column="21">*</type:modifier></type> <name pos:line="469" pos:column="23">NextSiblingElement</name><parameter_list pos:line="469" pos:column="41">( <param><decl><type><specifier pos:line="469" pos:column="43">const</specifier></type> <name pos:line="469" pos:column="49">TCHAR</name> <type:modifier pos:line="469" pos:column="55">*</type:modifier></decl></param> )</parameter_list> <specifier pos:line="469" pos:column="59">const</specifier>;</function_decl>

    <cpp:ifdef pos:line="471" pos:column="5">#<cpp:directive pos:line="471" pos:column="6">ifdef</cpp:directive> <name pos:line="471" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><name pos:line="472" pos:column="9">TiXmlElement</name><type:modifier pos:line="472" pos:column="21">*</type:modifier></type> <name pos:line="472" pos:column="23">NextSiblingElement</name><parameter_list pos:line="472" pos:column="41">( <param><decl><type><specifier pos:line="472" pos:column="43">const</specifier> <name pos:line="472" pos:column="49">generic_string</name><type:modifier pos:line="472" pos:column="63">&amp;</type:modifier></type> <name pos:line="472" pos:column="65">_value</name></decl></param>)</parameter_list> <specifier pos:line="472" pos:column="73">const</specifier>	<block pos:line="472" pos:column="81">{	<return pos:line="472" pos:column="89">return <expr><call><name pos:line="472" pos:column="96">NextSiblingElement</name> <argument_list pos:line="472" pos:column="115">(<argument><expr><call><name><name pos:line="472" pos:column="116">_value</name><op:operator pos:line="472" pos:column="122">.</op:operator><name pos:line="472" pos:column="123">c_str</name></name> <argument_list pos:line="472" pos:column="129">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>	}</block></function>	<comment type="line" format="doxygen" pos:line="472" pos:column="145">///&lt; STL std::generic_string form.</comment>
	<cpp:endif pos:line="473" pos:column="9">#<cpp:directive pos:line="473" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" format="doxygen" pos:line="475" pos:column="9">/// Convenience function to get through elements.</comment>
	<function_decl><type><name pos:line="476" pos:column="9">TiXmlElement</name><type:modifier pos:line="476" pos:column="21">*</type:modifier></type> <name pos:line="476" pos:column="23">FirstChildElement</name><parameter_list pos:line="476" pos:column="40">()</parameter_list>	<specifier pos:line="476" pos:column="49">const</specifier>;</function_decl>

	<comment type="line" format="doxygen" pos:line="478" pos:column="9">/// Convenience function to get through elements.</comment>
	<function_decl><type><name pos:line="479" pos:column="9">TiXmlElement</name><type:modifier pos:line="479" pos:column="21">*</type:modifier></type> <name pos:line="479" pos:column="23">FirstChildElement</name><parameter_list pos:line="479" pos:column="40">( <param><decl><type><specifier pos:line="479" pos:column="42">const</specifier> <name pos:line="479" pos:column="48">TCHAR</name> <type:modifier pos:line="479" pos:column="54">*</type:modifier></type> <name pos:line="479" pos:column="56">value</name></decl></param> )</parameter_list> <specifier pos:line="479" pos:column="64">const</specifier>;</function_decl>

    <cpp:ifdef pos:line="481" pos:column="5">#<cpp:directive pos:line="481" pos:column="6">ifdef</cpp:directive> <name pos:line="481" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><name pos:line="482" pos:column="9">TiXmlElement</name><type:modifier pos:line="482" pos:column="21">*</type:modifier></type> <name pos:line="482" pos:column="23">FirstChildElement</name><parameter_list pos:line="482" pos:column="40">( <param><decl><type><specifier pos:line="482" pos:column="42">const</specifier> <name pos:line="482" pos:column="48">generic_string</name><type:modifier pos:line="482" pos:column="62">&amp;</type:modifier></type> <name pos:line="482" pos:column="64">_value</name></decl></param> )</parameter_list> <specifier pos:line="482" pos:column="73">const</specifier>	<block pos:line="482" pos:column="81">{	<return pos:line="482" pos:column="89">return <expr><call><name pos:line="482" pos:column="96">FirstChildElement</name> <argument_list pos:line="482" pos:column="114">(<argument><expr><call><name><name pos:line="482" pos:column="115">_value</name><op:operator pos:line="482" pos:column="121">.</op:operator><name pos:line="482" pos:column="122">c_str</name></name> <argument_list pos:line="482" pos:column="128">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>	}</block></function>	<comment type="line" format="doxygen" pos:line="482" pos:column="145">///&lt; STL std::generic_string form.</comment>
	<cpp:endif pos:line="483" pos:column="9">#<cpp:directive pos:line="483" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen" pos:line="485" pos:column="9">/** Query the type (as an enumerated value, above) of this node.
		The possible types are: DOCUMENT, ELEMENT, COMMENT,
								UNKNOWN, TEXT, and DECLARATION.
	*/</comment>
	<function><type><specifier pos:line="489" pos:column="9">virtual</specifier> <name pos:line="489" pos:column="17">int</name></type> <name pos:line="489" pos:column="21">Type</name><parameter_list pos:line="489" pos:column="25">()</parameter_list> <specifier pos:line="489" pos:column="28">const</specifier>	<block pos:line="489" pos:column="41">{ <return pos:line="489" pos:column="43">return <expr><name pos:line="489" pos:column="50">type</name></expr>;</return> }</block></function>

	<comment type="block" format="doxygen" pos:line="491" pos:column="9">/** Return a pointer to the Document this node lives in.
		Returns null if not in a document.
	*/</comment>
	<function_decl><type><name pos:line="494" pos:column="9">TiXmlDocument</name><type:modifier pos:line="494" pos:column="22">*</type:modifier></type> <name pos:line="494" pos:column="24">GetDocument</name><parameter_list pos:line="494" pos:column="35">()</parameter_list> <specifier pos:line="494" pos:column="38">const</specifier>;</function_decl>

	<comment type="line" format="doxygen" pos:line="496" pos:column="9">/// Returns true if this node has no children.</comment>
	<function><type><name pos:line="497" pos:column="9">bool</name></type> <name pos:line="497" pos:column="14">NoChildren</name><parameter_list pos:line="497" pos:column="24">()</parameter_list> <specifier pos:line="497" pos:column="27">const</specifier>						<block pos:line="497" pos:column="73">{ <return pos:line="497" pos:column="75">return <expr><op:operator pos:line="497" pos:column="82">!</op:operator><name pos:line="497" pos:column="83">firstChild</name></expr>;</return> }</block></function>

	<function><type><name pos:line="499" pos:column="9">TiXmlDocument</name><type:modifier pos:line="499" pos:column="22">*</type:modifier></type> <name pos:line="499" pos:column="24">ToDocument</name><parameter_list pos:line="499" pos:column="34">()</parameter_list>	<specifier pos:line="499" pos:column="41">const</specifier>		<block pos:line="499" pos:column="57">{ <return pos:line="499" pos:column="59">return <expr><op:operator pos:line="499" pos:column="66">(</op:operator> <name pos:line="499" pos:column="68">this</name> <op:operator pos:line="499" pos:column="73">&amp;&amp;</op:operator> <name pos:line="499" pos:column="76">type</name> <op:operator pos:line="499" pos:column="81">==</op:operator> <name pos:line="499" pos:column="84">DOCUMENT</name> <op:operator pos:line="499" pos:column="93">)</op:operator> <op:operator pos:line="499" pos:column="95">?</op:operator> <op:operator pos:line="499" pos:column="97">(</op:operator><name pos:line="499" pos:column="98">TiXmlDocument</name><op:operator pos:line="499" pos:column="111">*</op:operator><op:operator pos:line="499" pos:column="112">)</op:operator> <name pos:line="499" pos:column="114">this</name> <op:operator pos:line="499" pos:column="119">:</op:operator> <lit:literal type="number" pos:line="499" pos:column="121">0</lit:literal></expr>;</return> }</block></function> <comment type="line" format="doxygen" pos:line="499" pos:column="126">///&lt; Cast to a more defined type. Will return null not of the requested type.</comment>
	<function><type><name pos:line="500" pos:column="9">TiXmlElement</name><type:modifier pos:line="500" pos:column="21">*</type:modifier></type>  <name pos:line="500" pos:column="24">ToElement</name><parameter_list pos:line="500" pos:column="33">()</parameter_list> <specifier pos:line="500" pos:column="36">const</specifier>		<block pos:line="500" pos:column="57">{ <return pos:line="500" pos:column="59">return <expr><op:operator pos:line="500" pos:column="66">(</op:operator> <name pos:line="500" pos:column="68">this</name> <op:operator pos:line="500" pos:column="73">&amp;&amp;</op:operator> <name pos:line="500" pos:column="76">type</name> <op:operator pos:line="500" pos:column="81">==</op:operator> <name pos:line="500" pos:column="84">ELEMENT</name>  <op:operator pos:line="500" pos:column="93">)</op:operator> <op:operator pos:line="500" pos:column="95">?</op:operator> <op:operator pos:line="500" pos:column="97">(</op:operator><name pos:line="500" pos:column="98">TiXmlElement</name><op:operator pos:line="500" pos:column="110">*</op:operator><op:operator pos:line="500" pos:column="111">)</op:operator>  <name pos:line="500" pos:column="114">this</name> <op:operator pos:line="500" pos:column="119">:</op:operator> <lit:literal type="number" pos:line="500" pos:column="121">0</lit:literal></expr>;</return> }</block></function> <comment type="line" format="doxygen" pos:line="500" pos:column="126">///&lt; Cast to a more defined type. Will return null not of the requested type.</comment>
	<function><type><name pos:line="501" pos:column="9">TiXmlComment</name><type:modifier pos:line="501" pos:column="21">*</type:modifier></type>  <name pos:line="501" pos:column="24">ToComment</name><parameter_list pos:line="501" pos:column="33">()</parameter_list> <specifier pos:line="501" pos:column="36">const</specifier>		<block pos:line="501" pos:column="57">{ <return pos:line="501" pos:column="59">return <expr><op:operator pos:line="501" pos:column="66">(</op:operator> <name pos:line="501" pos:column="68">this</name> <op:operator pos:line="501" pos:column="73">&amp;&amp;</op:operator> <name pos:line="501" pos:column="76">type</name> <op:operator pos:line="501" pos:column="81">==</op:operator> <name pos:line="501" pos:column="84">COMMENT</name>  <op:operator pos:line="501" pos:column="93">)</op:operator> <op:operator pos:line="501" pos:column="95">?</op:operator> <op:operator pos:line="501" pos:column="97">(</op:operator><name pos:line="501" pos:column="98">TiXmlComment</name><op:operator pos:line="501" pos:column="110">*</op:operator><op:operator pos:line="501" pos:column="111">)</op:operator>  <name pos:line="501" pos:column="114">this</name> <op:operator pos:line="501" pos:column="119">:</op:operator> <lit:literal type="number" pos:line="501" pos:column="121">0</lit:literal></expr>;</return> }</block></function> <comment type="line" format="doxygen" pos:line="501" pos:column="126">///&lt; Cast to a more defined type. Will return null not of the requested type.</comment>
	<function><type><name pos:line="502" pos:column="9">TiXmlUnknown</name><type:modifier pos:line="502" pos:column="21">*</type:modifier></type>  <name pos:line="502" pos:column="24">ToUnknown</name><parameter_list pos:line="502" pos:column="33">()</parameter_list> <specifier pos:line="502" pos:column="36">const</specifier>		<block pos:line="502" pos:column="57">{ <return pos:line="502" pos:column="59">return <expr><op:operator pos:line="502" pos:column="66">(</op:operator> <name pos:line="502" pos:column="68">this</name> <op:operator pos:line="502" pos:column="73">&amp;&amp;</op:operator> <name pos:line="502" pos:column="76">type</name> <op:operator pos:line="502" pos:column="81">==</op:operator> <name pos:line="502" pos:column="84">UNKNOWN</name>  <op:operator pos:line="502" pos:column="93">)</op:operator> <op:operator pos:line="502" pos:column="95">?</op:operator> <op:operator pos:line="502" pos:column="97">(</op:operator><name pos:line="502" pos:column="98">TiXmlUnknown</name><op:operator pos:line="502" pos:column="110">*</op:operator><op:operator pos:line="502" pos:column="111">)</op:operator>  <name pos:line="502" pos:column="114">this</name> <op:operator pos:line="502" pos:column="119">:</op:operator> <lit:literal type="number" pos:line="502" pos:column="121">0</lit:literal></expr>;</return> }</block></function> <comment type="line" format="doxygen" pos:line="502" pos:column="126">///&lt; Cast to a more defined type. Will return null not of the requested type.</comment>
	<function><type><name pos:line="503" pos:column="9">TiXmlText</name><type:modifier pos:line="503" pos:column="18">*</type:modifier></type>	   <name pos:line="503" pos:column="28">ToText</name><parameter_list pos:line="503" pos:column="34">()</parameter_list>    <specifier pos:line="503" pos:column="40">const</specifier>		<block pos:line="503" pos:column="57">{ <return pos:line="503" pos:column="59">return <expr><op:operator pos:line="503" pos:column="66">(</op:operator> <name pos:line="503" pos:column="68">this</name> <op:operator pos:line="503" pos:column="73">&amp;&amp;</op:operator> <name pos:line="503" pos:column="76">type</name> <op:operator pos:line="503" pos:column="81">==</op:operator> <name pos:line="503" pos:column="84">TEXT</name>     <op:operator pos:line="503" pos:column="93">)</op:operator> <op:operator pos:line="503" pos:column="95">?</op:operator> <op:operator pos:line="503" pos:column="97">(</op:operator><name pos:line="503" pos:column="98">TiXmlText</name><op:operator pos:line="503" pos:column="107">*</op:operator><op:operator pos:line="503" pos:column="108">)</op:operator>     <name pos:line="503" pos:column="114">this</name> <op:operator pos:line="503" pos:column="119">:</op:operator> <lit:literal type="number" pos:line="503" pos:column="121">0</lit:literal></expr>;</return> }</block></function> <comment type="line" format="doxygen" pos:line="503" pos:column="126">///&lt; Cast to a more defined type. Will return null not of the requested type.</comment>
	<function><type><name pos:line="504" pos:column="9">TiXmlDeclaration</name><type:modifier pos:line="504" pos:column="25">*</type:modifier></type> <name pos:line="504" pos:column="27">ToDeclaration</name><parameter_list pos:line="504" pos:column="40">()</parameter_list> <specifier pos:line="504" pos:column="43">const</specifier>	<block pos:line="504" pos:column="49">{ <return pos:line="504" pos:column="51">return <expr><op:operator pos:line="504" pos:column="58">(</op:operator> <name pos:line="504" pos:column="60">this</name> <op:operator pos:line="504" pos:column="65">&amp;&amp;</op:operator> <name pos:line="504" pos:column="68">type</name> <op:operator pos:line="504" pos:column="73">==</op:operator> <name pos:line="504" pos:column="76">DECLARATION</name> <op:operator pos:line="504" pos:column="88">)</op:operator> <op:operator pos:line="504" pos:column="90">?</op:operator> <op:operator pos:line="504" pos:column="92">(</op:operator><name pos:line="504" pos:column="93">TiXmlDeclaration</name><op:operator pos:line="504" pos:column="109">*</op:operator><op:operator pos:line="504" pos:column="110">)</op:operator> <name pos:line="504" pos:column="112">this</name> <op:operator pos:line="504" pos:column="117">:</op:operator> <lit:literal type="number" pos:line="504" pos:column="119">0</lit:literal></expr>;</return> }</block></function> <comment type="line" format="doxygen" pos:line="504" pos:column="124">///&lt; Cast to a more defined type. Will return null not of the requested type.</comment>

	<function_decl><type><specifier pos:line="506" pos:column="9">virtual</specifier> <name pos:line="506" pos:column="17">TiXmlNode</name><type:modifier pos:line="506" pos:column="26">*</type:modifier></type> <name pos:line="506" pos:column="28">Clone</name><parameter_list pos:line="506" pos:column="33">()</parameter_list> <specifier pos:line="506" pos:column="36">const</specifier> = <lit:literal type="number" pos:line="506" pos:column="44">0</lit:literal>;</function_decl>

	<function><type><name pos:line="508" pos:column="9">void</name></type>  <name pos:line="508" pos:column="15">SetUserData</name><parameter_list pos:line="508" pos:column="26">( <param><decl><type><name pos:line="508" pos:column="28">void</name><type:modifier pos:line="508" pos:column="32">*</type:modifier></type> <name pos:line="508" pos:column="34">user</name></decl></param> )</parameter_list>			<block pos:line="508" pos:column="57">{ <expr_stmt><expr><name pos:line="508" pos:column="59">userData</name> <op:operator pos:line="508" pos:column="68">=</op:operator> <name pos:line="508" pos:column="70">user</name></expr>;</expr_stmt> }</block></function>
	<function><type><name pos:line="509" pos:column="9">void</name><type:modifier pos:line="509" pos:column="13">*</type:modifier></type> <name pos:line="509" pos:column="15">GetUserData</name><parameter_list pos:line="509" pos:column="26">()</parameter_list>						<block pos:line="509" pos:column="73">{ <return pos:line="509" pos:column="75">return <expr><name pos:line="509" pos:column="82">userData</name></expr>;</return> }</block></function>

</public><protected pos:line="511" pos:column="1">protected:
	<constructor_decl><name pos:line="512" pos:column="9">TiXmlNode</name><parameter_list pos:line="512" pos:column="18">( <param><decl><type><name pos:line="512" pos:column="20">NodeType</name></type> <name pos:line="512" pos:column="29">type</name></decl></param> )</parameter_list>;</constructor_decl>

	<cpp:ifdef pos:line="514" pos:column="9">#<cpp:directive pos:line="514" pos:column="10">ifdef</cpp:directive> <name pos:line="514" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	    <comment type="line" pos:line="515" pos:column="13">// The real work of the input operator.</comment>
	    <function_decl><type><specifier pos:line="516" pos:column="13">virtual</specifier> <name pos:line="516" pos:column="21">void</name></type> <name pos:line="516" pos:column="26">StreamIn</name><parameter_list pos:line="516" pos:column="34">( <param><decl><type><name pos:line="516" pos:column="36">TIXML_ISTREAM</name><type:modifier pos:line="516" pos:column="49">*</type:modifier></type> <name pos:line="516" pos:column="51">in</name></decl></param>, <param><decl><type><name pos:line="516" pos:column="55">TIXML_STRING</name><type:modifier pos:line="516" pos:column="67">*</type:modifier></type> <name pos:line="516" pos:column="69">tag</name></decl></param> )</parameter_list> = <lit:literal type="number" pos:line="516" pos:column="77">0</lit:literal>;</function_decl>
	<cpp:endif pos:line="517" pos:column="9">#<cpp:directive pos:line="517" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" pos:line="519" pos:column="9">// Figure out what is at *p, and parse it. Returns null if it is not an xml node.</comment>
	<function_decl><type><name pos:line="520" pos:column="9">TiXmlNode</name><type:modifier pos:line="520" pos:column="18">*</type:modifier></type> <name pos:line="520" pos:column="20">Identify</name><parameter_list pos:line="520" pos:column="28">( <param><decl><type><specifier pos:line="520" pos:column="30">const</specifier> <name pos:line="520" pos:column="36">TCHAR</name><type:modifier pos:line="520" pos:column="41">*</type:modifier></type> <name pos:line="520" pos:column="43">start</name></decl></param> )</parameter_list>;</function_decl>
	<function><type><name pos:line="521" pos:column="9">void</name></type> <name pos:line="521" pos:column="14">CopyToClone</name><parameter_list pos:line="521" pos:column="25">( <param><decl><type><name pos:line="521" pos:column="27">TiXmlNode</name><type:modifier pos:line="521" pos:column="36">*</type:modifier></type> <name pos:line="521" pos:column="38">target</name></decl></param> )</parameter_list> <specifier pos:line="521" pos:column="47">const</specifier>	<block pos:line="521" pos:column="57">{ <expr_stmt><expr><call><name><name pos:line="521" pos:column="59">target</name><op:operator pos:line="521" pos:column="65">-&gt;</op:operator><name pos:line="521" pos:column="67">SetValue</name></name> <argument_list pos:line="521" pos:column="76">(<argument><expr><call><name><name pos:line="521" pos:column="77">value</name><op:operator pos:line="521" pos:column="82">.</op:operator><name pos:line="521" pos:column="83">c_str</name></name><argument_list pos:line="521" pos:column="88">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
												  <expr_stmt><expr><name><name pos:line="522" pos:column="99">target</name><op:operator pos:line="522" pos:column="105">-&gt;</op:operator><name pos:line="522" pos:column="107">userData</name></name> <op:operator pos:line="522" pos:column="116">=</op:operator> <name pos:line="522" pos:column="118">userData</name></expr>;</expr_stmt> }</block></function>

	<comment type="line" pos:line="524" pos:column="9">// Internal Value function returning a TIXML_STRING</comment>
	<function><type><name pos:line="525" pos:column="9">TIXML_STRING</name></type> <name pos:line="525" pos:column="22">SValue</name><parameter_list pos:line="525" pos:column="28">()</parameter_list> <specifier pos:line="525" pos:column="31">const</specifier>	<block pos:line="525" pos:column="41">{ <return pos:line="525" pos:column="43">return <expr><name pos:line="525" pos:column="50">value</name></expr> ;</return> }</block></function>

	<decl_stmt><decl><type><name pos:line="527" pos:column="9">TiXmlNode</name><type:modifier pos:line="527" pos:column="18">*</type:modifier></type>		<name pos:line="527" pos:column="33">parent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="528" pos:column="9">NodeType</name></type>		<name pos:line="528" pos:column="33">type</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="530" pos:column="9">TiXmlNode</name><type:modifier pos:line="530" pos:column="18">*</type:modifier></type>		<name pos:line="530" pos:column="33">firstChild</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="531" pos:column="9">TiXmlNode</name><type:modifier pos:line="531" pos:column="18">*</type:modifier></type>		<name pos:line="531" pos:column="33">lastChild</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="533" pos:column="9">TIXML_STRING</name></type>	<name pos:line="533" pos:column="25">value</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="535" pos:column="9">TiXmlNode</name><type:modifier pos:line="535" pos:column="18">*</type:modifier></type>		<name pos:line="535" pos:column="33">prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="536" pos:column="9">TiXmlNode</name><type:modifier pos:line="536" pos:column="18">*</type:modifier></type>		<name pos:line="536" pos:column="33">next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="537" pos:column="9">void</name><type:modifier pos:line="537" pos:column="13">*</type:modifier></type>			<name pos:line="537" pos:column="33">userData</name></decl>;</decl_stmt>
</protected>}</block>;</class>


<comment type="block" format="doxygen" pos:line="541" pos:column="1">/** An attribute is a name-value pair. Elements have an arbitrary
	number of attributes, each with a unique name.

	@note The attributes are not TiXmlNodes, since they are not
		  part of the tinyXML document object model. There are other
		  suggested ways to look at this problem.
*/</comment>
<class pos:line="548" pos:column="1">class <name pos:line="548" pos:column="7">TiXmlAttribute</name> <super pos:line="548" pos:column="22">: <specifier pos:line="548" pos:column="24">public</specifier> <name pos:line="548" pos:column="31">TiXmlBase</name></super>
<block pos:line="549" pos:column="1">{<private type="default" pos:line="549" pos:column="2">
	<class_decl><specifier pos:line="550" pos:column="9">friend</specifier> class <name pos:line="550" pos:column="22">TiXmlAttributeSet</name>;</class_decl>

</private><public pos:line="552" pos:column="1">public:
	<comment type="line" format="doxygen" pos:line="553" pos:column="9">/// Construct an empty attribute.</comment>
	<constructor><name pos:line="554" pos:column="9">TiXmlAttribute</name><parameter_list pos:line="554" pos:column="23">()</parameter_list>
	<block pos:line="555" pos:column="9">{
		<expr_stmt><expr><name pos:line="556" pos:column="17">document</name> <op:operator pos:line="556" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="556" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="557" pos:column="17">prev</name> <op:operator pos:line="557" pos:column="22">=</op:operator> <name pos:line="557" pos:column="24">next</name> <op:operator pos:line="557" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="557" pos:column="31">0</lit:literal></expr>;</expr_stmt>
	}</block></constructor>

	<cpp:ifdef pos:line="560" pos:column="9">#<cpp:directive pos:line="560" pos:column="10">ifdef</cpp:directive> <name pos:line="560" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	<comment type="line" format="doxygen" pos:line="561" pos:column="9">/// string constructor.</comment>
	<constructor><name pos:line="562" pos:column="9">TiXmlAttribute</name><parameter_list pos:line="562" pos:column="23">( <param><decl><type><specifier pos:line="562" pos:column="25">const</specifier> <name pos:line="562" pos:column="31">generic_string</name><type:modifier pos:line="562" pos:column="45">&amp;</type:modifier></type> <name pos:line="562" pos:column="47">_name</name></decl></param>, <param><decl><type><specifier pos:line="562" pos:column="54">const</specifier> <name pos:line="562" pos:column="60">generic_string</name><type:modifier pos:line="562" pos:column="74">&amp;</type:modifier></type> <name pos:line="562" pos:column="76">_value</name></decl></param> )</parameter_list>
	<block pos:line="563" pos:column="9">{
		<expr_stmt><expr><name pos:line="564" pos:column="17">name</name> <op:operator pos:line="564" pos:column="22">=</op:operator> <name pos:line="564" pos:column="24">_name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="565" pos:column="17">value</name> <op:operator pos:line="565" pos:column="23">=</op:operator> <name pos:line="565" pos:column="25">_value</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="566" pos:column="17">document</name> <op:operator pos:line="566" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="566" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="567" pos:column="17">prev</name> <op:operator pos:line="567" pos:column="22">=</op:operator> <name pos:line="567" pos:column="24">next</name> <op:operator pos:line="567" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="567" pos:column="31">0</lit:literal></expr>;</expr_stmt>
	}</block></constructor>
	<cpp:endif pos:line="569" pos:column="9">#<cpp:directive pos:line="569" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" format="doxygen" pos:line="571" pos:column="9">/// Construct an attribute with a name and value.</comment>
	<constructor><name pos:line="572" pos:column="9">TiXmlAttribute</name><parameter_list pos:line="572" pos:column="23">( <param><decl><type><specifier pos:line="572" pos:column="25">const</specifier> <name pos:line="572" pos:column="31">TCHAR</name> <type:modifier pos:line="572" pos:column="37">*</type:modifier></type> <name pos:line="572" pos:column="39">_name</name></decl></param>, <param><decl><type><specifier pos:line="572" pos:column="46">const</specifier> <name pos:line="572" pos:column="52">TCHAR</name> <type:modifier pos:line="572" pos:column="58">*</type:modifier></type> <name pos:line="572" pos:column="60">_value</name></decl></param> )</parameter_list>
	<block pos:line="573" pos:column="9">{
		<expr_stmt><expr><name pos:line="574" pos:column="17">name</name> <op:operator pos:line="574" pos:column="22">=</op:operator> <name pos:line="574" pos:column="24">_name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="575" pos:column="17">value</name> <op:operator pos:line="575" pos:column="23">=</op:operator> <name pos:line="575" pos:column="25">_value</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="576" pos:column="17">document</name> <op:operator pos:line="576" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="576" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="577" pos:column="17">prev</name> <op:operator pos:line="577" pos:column="22">=</op:operator> <name pos:line="577" pos:column="24">next</name> <op:operator pos:line="577" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="577" pos:column="31">0</lit:literal></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><specifier pos:line="580" pos:column="9">const</specifier> <name pos:line="580" pos:column="15">TCHAR</name><type:modifier pos:line="580" pos:column="20">*</type:modifier></type>		<name pos:line="580" pos:column="33">Name</name><parameter_list pos:line="580" pos:column="37">()</parameter_list>  <specifier pos:line="580" pos:column="41">const</specifier>		<block pos:line="580" pos:column="57">{ <return pos:line="580" pos:column="59">return <expr><call><name><name pos:line="580" pos:column="66">name</name><op:operator pos:line="580" pos:column="70">.</op:operator><name pos:line="580" pos:column="71">c_str</name></name> <argument_list pos:line="580" pos:column="77">()</argument_list></call></expr>;</return> }</block></function>		<comment type="line" format="doxygen" pos:line="580" pos:column="97">///&lt; Return the name of this attribute.</comment>
	<function><type><specifier pos:line="581" pos:column="9">const</specifier> <name pos:line="581" pos:column="15">TCHAR</name><type:modifier pos:line="581" pos:column="20">*</type:modifier></type>		<name pos:line="581" pos:column="33">Value</name><parameter_list pos:line="581" pos:column="38">()</parameter_list> <specifier pos:line="581" pos:column="41">const</specifier>		<block pos:line="581" pos:column="57">{ <return pos:line="581" pos:column="59">return <expr><call><name><name pos:line="581" pos:column="66">value</name><op:operator pos:line="581" pos:column="71">.</op:operator><name pos:line="581" pos:column="72">c_str</name></name> <argument_list pos:line="581" pos:column="78">()</argument_list></call></expr>;</return> }</block></function>		<comment type="line" format="doxygen" pos:line="581" pos:column="97">///&lt; Return the value of this attribute.</comment>
	<function_decl><type><specifier pos:line="582" pos:column="9">const</specifier> <name pos:line="582" pos:column="15">int</name></type>       <name pos:line="582" pos:column="25">IntValue</name><parameter_list pos:line="582" pos:column="33">()</parameter_list> <specifier pos:line="582" pos:column="36">const</specifier>;</function_decl>									<comment type="line" format="doxygen" pos:line="582" pos:column="113">///&lt; Return the value of this attribute, converted to an integer.</comment>
	<function_decl><type><specifier pos:line="583" pos:column="9">const</specifier> <name pos:line="583" pos:column="15">double</name></type>	<name pos:line="583" pos:column="25">DoubleValue</name><parameter_list pos:line="583" pos:column="36">()</parameter_list> <specifier pos:line="583" pos:column="39">const</specifier>;</function_decl>								<comment type="line" format="doxygen" pos:line="583" pos:column="105">///&lt; Return the value of this attribute, converted to a double.</comment>

	<comment type="block" format="doxygen" pos:line="585" pos:column="9">/** QueryIntValue examines the value generic_string. It is an alternative to the
		IntValue() method with richer error checking.
		If the value is an integer, it is stored in 'value' and 
		the call returns TIXML_SUCCESS. If it is not
		an integer, it returns TIXML_WRONG_TYPE.

		A specialized but useful call. Note that for success it returns 0,
		which is the opposite of almost all other TinyXml calls.
	*/</comment>
	<function_decl><type><name pos:line="594" pos:column="9">int</name></type> <name pos:line="594" pos:column="13">QueryIntValue</name><parameter_list pos:line="594" pos:column="26">( <param><decl><type><name pos:line="594" pos:column="28">int</name><type:modifier pos:line="594" pos:column="31">*</type:modifier></type> <name pos:line="594" pos:column="33">value</name></decl></param> )</parameter_list> <specifier pos:line="594" pos:column="41">const</specifier>;</function_decl>
	<comment type="line" format="doxygen" pos:line="595" pos:column="9">/// QueryDoubleValue examines the value generic_string. See QueryIntValue().</comment>
	<function_decl><type><name pos:line="596" pos:column="9">int</name></type> <name pos:line="596" pos:column="13">QueryDoubleValue</name><parameter_list pos:line="596" pos:column="29">( <param><decl><type><name pos:line="596" pos:column="31">double</name><type:modifier pos:line="596" pos:column="37">*</type:modifier></type> <name pos:line="596" pos:column="39">value</name></decl></param> )</parameter_list> <specifier pos:line="596" pos:column="47">const</specifier>;</function_decl>

	<function><type><name pos:line="598" pos:column="9">void</name></type> <name pos:line="598" pos:column="14">SetName</name><parameter_list pos:line="598" pos:column="21">( <param><decl><type><specifier pos:line="598" pos:column="23">const</specifier> <name pos:line="598" pos:column="29">TCHAR</name><type:modifier pos:line="598" pos:column="34">*</type:modifier></type> <name pos:line="598" pos:column="36">_name</name></decl></param> )</parameter_list>	<block pos:line="598" pos:column="49">{ <expr_stmt><expr><name pos:line="598" pos:column="51">name</name> <op:operator pos:line="598" pos:column="56">=</op:operator> <name pos:line="598" pos:column="58">_name</name></expr>;</expr_stmt> }</block></function>				<comment type="line" format="doxygen" pos:line="598" pos:column="97">///&lt; Set the name of this attribute.</comment>
	<function><type><name pos:line="599" pos:column="9">void</name></type> <name pos:line="599" pos:column="14">SetValue</name><parameter_list pos:line="599" pos:column="22">( <param><decl><type><specifier pos:line="599" pos:column="24">const</specifier> <name pos:line="599" pos:column="30">TCHAR</name><type:modifier pos:line="599" pos:column="35">*</type:modifier></type> <name pos:line="599" pos:column="37">_value</name></decl></param> )</parameter_list>	<block pos:line="599" pos:column="49">{ <expr_stmt><expr><name pos:line="599" pos:column="51">value</name> <op:operator pos:line="599" pos:column="57">=</op:operator> <name pos:line="599" pos:column="59">_value</name></expr>;</expr_stmt> }</block></function>				<comment type="line" format="doxygen" pos:line="599" pos:column="97">///&lt; Set the value.</comment>

	<function_decl><type><name pos:line="601" pos:column="9">void</name></type> <name pos:line="601" pos:column="14">SetIntValue</name><parameter_list pos:line="601" pos:column="25">( <param><decl><type><name pos:line="601" pos:column="27">int</name></type> <name pos:line="601" pos:column="31">value</name></decl></param> )</parameter_list>;</function_decl>										<comment type="line" format="doxygen" pos:line="601" pos:column="113">///&lt; Set the value from an integer.</comment>
	<function_decl><type><name pos:line="602" pos:column="9">void</name></type> <name pos:line="602" pos:column="14">SetDoubleValue</name><parameter_list pos:line="602" pos:column="28">( <param><decl><type><name pos:line="602" pos:column="30">double</name></type> <name pos:line="602" pos:column="37">value</name></decl></param> )</parameter_list>;</function_decl>								<comment type="line" format="doxygen" pos:line="602" pos:column="105">///&lt; Set the value from a double.</comment>

    <cpp:ifdef pos:line="604" pos:column="5">#<cpp:directive pos:line="604" pos:column="6">ifdef</cpp:directive> <name pos:line="604" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<comment type="line" format="doxygen" pos:line="605" pos:column="9">/// STL string form.</comment>
	<function><type><name pos:line="606" pos:column="9">void</name></type> <name pos:line="606" pos:column="14">SetName</name><parameter_list pos:line="606" pos:column="21">( <param><decl><type><specifier pos:line="606" pos:column="23">const</specifier> <name pos:line="606" pos:column="29">generic_string</name><type:modifier pos:line="606" pos:column="43">&amp;</type:modifier></type> <name pos:line="606" pos:column="45">_name</name></decl></param> )</parameter_list>	
	<block pos:line="607" pos:column="9">{	
		<function_decl><type><name pos:line="608" pos:column="17">StringToBuffer</name></type> <name pos:line="608" pos:column="32">buf</name><parameter_list pos:line="608" pos:column="35">( <param><decl><type><name pos:line="608" pos:column="37">_name</name></type></decl></param> )</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name pos:line="609" pos:column="17">SetName</name> <argument_list pos:line="609" pos:column="25">( <argument><expr><name><name pos:line="609" pos:column="27">buf</name><op:operator pos:line="609" pos:column="30">.</op:operator><name pos:line="609" pos:column="31">buffer</name></name> <op:operator pos:line="609" pos:column="38">?</op:operator> <name><name pos:line="609" pos:column="40">buf</name><op:operator pos:line="609" pos:column="43">.</op:operator><name pos:line="609" pos:column="44">buffer</name></name> <op:operator pos:line="609" pos:column="51">:</op:operator> <call><name pos:line="609" pos:column="53">TEXT</name><argument_list pos:line="609" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="609" pos:column="58">"error"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>	
	}</block></function>
	<comment type="line" format="doxygen" pos:line="611" pos:column="9">/// STL string form.	</comment>
	<function><type><name pos:line="612" pos:column="9">void</name></type> <name pos:line="612" pos:column="14">SetValue</name><parameter_list pos:line="612" pos:column="22">( <param><decl><type><specifier pos:line="612" pos:column="24">const</specifier> <name pos:line="612" pos:column="30">generic_string</name><type:modifier pos:line="612" pos:column="44">&amp;</type:modifier></type> <name pos:line="612" pos:column="46">_value</name></decl></param> )</parameter_list>	
	<block pos:line="613" pos:column="9">{	
		<function_decl><type><name pos:line="614" pos:column="17">StringToBuffer</name></type> <name pos:line="614" pos:column="32">buf</name><parameter_list pos:line="614" pos:column="35">( <param><decl><type><name pos:line="614" pos:column="37">_value</name></type></decl></param> )</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name pos:line="615" pos:column="17">SetValue</name><argument_list pos:line="615" pos:column="25">( <argument><expr><name><name pos:line="615" pos:column="27">buf</name><op:operator pos:line="615" pos:column="30">.</op:operator><name pos:line="615" pos:column="31">buffer</name></name> <op:operator pos:line="615" pos:column="38">?</op:operator> <name><name pos:line="615" pos:column="40">buf</name><op:operator pos:line="615" pos:column="43">.</op:operator><name pos:line="615" pos:column="44">buffer</name></name> <op:operator pos:line="615" pos:column="51">:</op:operator> <call><name pos:line="615" pos:column="53">TEXT</name><argument_list pos:line="615" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="615" pos:column="58">"error"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>	
	}</block></function>
	<cpp:endif pos:line="617" pos:column="9">#<cpp:directive pos:line="617" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" format="doxygen" pos:line="619" pos:column="9">/// Get the next sibling attribute in the DOM. Returns null at end.</comment>
	<function_decl><type><name pos:line="620" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="620" pos:column="23">*</type:modifier></type> <name pos:line="620" pos:column="25">Next</name><parameter_list pos:line="620" pos:column="29">()</parameter_list> <specifier pos:line="620" pos:column="32">const</specifier>;</function_decl>
	<comment type="line" format="doxygen" pos:line="621" pos:column="9">/// Get the previous sibling attribute in the DOM. Returns null at beginning.</comment>
	<function_decl><type><name pos:line="622" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="622" pos:column="23">*</type:modifier></type> <name pos:line="622" pos:column="25">Previous</name><parameter_list pos:line="622" pos:column="33">()</parameter_list> <specifier pos:line="622" pos:column="36">const</specifier>;</function_decl>

	<function><type><name pos:line="624" pos:column="9">bool</name></type> <name pos:line="624" pos:column="14">operator==</name><parameter_list pos:line="624" pos:column="24">( <param><decl><type><specifier pos:line="624" pos:column="26">const</specifier> <name pos:line="624" pos:column="32">TiXmlAttribute</name><type:modifier pos:line="624" pos:column="46">&amp;</type:modifier></type> <name pos:line="624" pos:column="48">rhs</name></decl></param> )</parameter_list> <specifier pos:line="624" pos:column="54">const</specifier> <block pos:line="624" pos:column="60">{ <return pos:line="624" pos:column="62">return <expr><name><name pos:line="624" pos:column="69">rhs</name><op:operator pos:line="624" pos:column="72">.</op:operator><name pos:line="624" pos:column="73">name</name></name> <op:operator pos:line="624" pos:column="78">==</op:operator> <name pos:line="624" pos:column="81">name</name></expr>;</return> }</block></function>
	<function><type><name pos:line="625" pos:column="9">bool</name></type> <name pos:line="625" pos:column="14">operator&lt;</name><parameter_list pos:line="625" pos:column="23">( <param><decl><type><specifier pos:line="625" pos:column="25">const</specifier> <name pos:line="625" pos:column="31">TiXmlAttribute</name><type:modifier pos:line="625" pos:column="45">&amp;</type:modifier></type> <name pos:line="625" pos:column="47">rhs</name></decl></param> )</parameter_list>	 <specifier pos:line="625" pos:column="58">const</specifier> <block pos:line="625" pos:column="64">{ <return pos:line="625" pos:column="66">return <expr><name pos:line="625" pos:column="73">name</name> <op:operator pos:line="625" pos:column="78">&lt;</op:operator> <name><name pos:line="625" pos:column="80">rhs</name><op:operator pos:line="625" pos:column="83">.</op:operator><name pos:line="625" pos:column="84">name</name></name></expr>;</return> }</block></function>
	<function><type><name pos:line="626" pos:column="9">bool</name></type> <name pos:line="626" pos:column="14">operator&gt;</name><parameter_list pos:line="626" pos:column="23">( <param><decl><type><specifier pos:line="626" pos:column="25">const</specifier> <name pos:line="626" pos:column="31">TiXmlAttribute</name><type:modifier pos:line="626" pos:column="45">&amp;</type:modifier></type> <name pos:line="626" pos:column="47">rhs</name></decl></param> )</parameter_list>  <specifier pos:line="626" pos:column="54">const</specifier> <block pos:line="626" pos:column="60">{ <return pos:line="626" pos:column="62">return <expr><name pos:line="626" pos:column="69">name</name> <op:operator pos:line="626" pos:column="74">&gt;</op:operator> <name><name pos:line="626" pos:column="76">rhs</name><op:operator pos:line="626" pos:column="79">.</op:operator><name pos:line="626" pos:column="80">name</name></name></expr>;</return> }</block></function>

	<comment type="block" pos:line="628" pos:column="9">/*	[internal use]
		Attribtue parsing starts: first letter of the name
						 returns: the next TCHAR after the value end quote
	*/</comment>
	<function_decl><type><specifier pos:line="632" pos:column="9">virtual</specifier> <specifier pos:line="632" pos:column="17">const</specifier> <name pos:line="632" pos:column="23">TCHAR</name><type:modifier pos:line="632" pos:column="28">*</type:modifier></type> <name pos:line="632" pos:column="30">Parse</name><parameter_list pos:line="632" pos:column="35">( <param><decl><type><specifier pos:line="632" pos:column="37">const</specifier> <name pos:line="632" pos:column="43">TCHAR</name><type:modifier pos:line="632" pos:column="48">*</type:modifier></type> <name pos:line="632" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="632" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="632" pos:column="69">*</type:modifier></type> <name pos:line="632" pos:column="71">data</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="line" pos:line="634" pos:column="9">// [internal use]</comment>
	<function_decl><type><specifier pos:line="635" pos:column="9">virtual</specifier> <name pos:line="635" pos:column="17">void</name></type> <name pos:line="635" pos:column="22">Print</name><parameter_list pos:line="635" pos:column="27">( <param><decl><type><name pos:line="635" pos:column="29">FILE</name><type:modifier pos:line="635" pos:column="33">*</type:modifier></type> <name pos:line="635" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="635" pos:column="42">int</name></type> <name pos:line="635" pos:column="46">depth</name></decl></param> )</parameter_list> <specifier pos:line="635" pos:column="54">const</specifier>;</function_decl>

	<function_decl><type><specifier pos:line="637" pos:column="9">virtual</specifier> <name pos:line="637" pos:column="17">void</name></type> <name pos:line="637" pos:column="22">StreamOut</name><parameter_list pos:line="637" pos:column="31">( <param><decl><type><name pos:line="637" pos:column="33">TIXML_OSTREAM</name> <type:modifier pos:line="637" pos:column="47">*</type:modifier></type> <name pos:line="637" pos:column="49">out</name></decl></param> )</parameter_list> <specifier pos:line="637" pos:column="55">const</specifier>;</function_decl>
	<comment type="line" pos:line="638" pos:column="9">// [internal use]</comment>
	<comment type="line" pos:line="639" pos:column="9">// Set the document pointer so the attribute can report errors.</comment>
	<function><type><name pos:line="640" pos:column="9">void</name></type> <name pos:line="640" pos:column="14">SetDocument</name><parameter_list pos:line="640" pos:column="25">( <param><decl><type><name pos:line="640" pos:column="27">TiXmlDocument</name><type:modifier pos:line="640" pos:column="40">*</type:modifier></type> <name pos:line="640" pos:column="42">doc</name></decl></param> )</parameter_list>	<block pos:line="640" pos:column="49">{ <expr_stmt><expr><name pos:line="640" pos:column="51">document</name> <op:operator pos:line="640" pos:column="60">=</op:operator> <name pos:line="640" pos:column="62">doc</name></expr>;</expr_stmt> }</block></function>

</public><private pos:line="642" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="643" pos:column="9">TiXmlDocument</name><type:modifier pos:line="643" pos:column="22">*</type:modifier></type>	<name pos:line="643" pos:column="25">document</name></decl>;</decl_stmt>	<comment type="line" pos:line="643" pos:column="41">// A pointer back to a document, for error reporting.</comment>
	<decl_stmt><decl><type><name pos:line="644" pos:column="9">TIXML_STRING</name></type> <name pos:line="644" pos:column="22">name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="645" pos:column="9">TIXML_STRING</name></type> <name pos:line="645" pos:column="22">value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="646" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="646" pos:column="23">*</type:modifier></type>	<name pos:line="646" pos:column="25">prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="647" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="647" pos:column="23">*</type:modifier></type>	<name pos:line="647" pos:column="25">next</name></decl>;</decl_stmt>
</private>}</block>;</class>


<comment type="block" pos:line="651" pos:column="1">/*	A class used to manage a group of attributes.
	It is only used internally, both by the ELEMENT and the DECLARATION.
	
	The set can be changed transparent to the Element and Declaration
	classes that use it, but NOT transparent to the Attribute
	which has to implement a next() and previous() method. Which makes
	it a bit problematic and prevents the use of STL.

	This version is implemented with circular lists because:
		- I like circular lists
		- it demonstrates some independence from the (typical) doubly linked list.
*/</comment>
<class pos:line="663" pos:column="1">class <name pos:line="663" pos:column="7">TiXmlAttributeSet</name>
<block pos:line="664" pos:column="1">{<private type="default" pos:line="664" pos:column="2">
</private><public pos:line="665" pos:column="1">public:
	<constructor_decl><name pos:line="666" pos:column="9">TiXmlAttributeSet</name><parameter_list pos:line="666" pos:column="26">()</parameter_list>;</constructor_decl>
	<destructor_decl><name pos:line="667" pos:column="9">~<name pos:line="667" pos:column="10">TiXmlAttributeSet</name></name><parameter_list pos:line="667" pos:column="27">()</parameter_list>;</destructor_decl>

	<function_decl><type><name pos:line="669" pos:column="9">void</name></type> <name pos:line="669" pos:column="14">Add</name><parameter_list pos:line="669" pos:column="17">( <param><decl><type><name pos:line="669" pos:column="19">TiXmlAttribute</name><type:modifier pos:line="669" pos:column="33">*</type:modifier></type> <name pos:line="669" pos:column="35">attribute</name></decl></param> )</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="670" pos:column="9">void</name></type> <name pos:line="670" pos:column="14">Remove</name><parameter_list pos:line="670" pos:column="20">( <param><decl><type><name pos:line="670" pos:column="22">TiXmlAttribute</name><type:modifier pos:line="670" pos:column="36">*</type:modifier></type> <name pos:line="670" pos:column="38">attribute</name></decl></param> )</parameter_list>;</function_decl>

	<function><type><name pos:line="672" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="672" pos:column="23">*</type:modifier></type> <name pos:line="672" pos:column="25">First</name><parameter_list pos:line="672" pos:column="30">()</parameter_list> <specifier pos:line="672" pos:column="33">const</specifier>	<block pos:line="672" pos:column="41">{ <return pos:line="672" pos:column="43">return <expr><op:operator pos:line="672" pos:column="50">(</op:operator> <name><name pos:line="672" pos:column="52">sentinel</name><op:operator pos:line="672" pos:column="60">.</op:operator><name pos:line="672" pos:column="61">next</name></name> <op:operator pos:line="672" pos:column="66">==</op:operator> <op:operator pos:line="672" pos:column="69">&amp;</op:operator><name pos:line="672" pos:column="70">sentinel</name> <op:operator pos:line="672" pos:column="79">)</op:operator> <op:operator pos:line="672" pos:column="81">?</op:operator> <lit:literal type="number" pos:line="672" pos:column="83">0</lit:literal> <op:operator pos:line="672" pos:column="85">:</op:operator> <name><name pos:line="672" pos:column="87">sentinel</name><op:operator pos:line="672" pos:column="95">.</op:operator><name pos:line="672" pos:column="96">next</name></name></expr>;</return> }</block></function>
	<function><type><name pos:line="673" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="673" pos:column="23">*</type:modifier></type> <name pos:line="673" pos:column="25">Last</name><parameter_list pos:line="673" pos:column="29">()</parameter_list>  <specifier pos:line="673" pos:column="33">const</specifier>	<block pos:line="673" pos:column="41">{ <return pos:line="673" pos:column="43">return <expr><op:operator pos:line="673" pos:column="50">(</op:operator> <name><name pos:line="673" pos:column="52">sentinel</name><op:operator pos:line="673" pos:column="60">.</op:operator><name pos:line="673" pos:column="61">prev</name></name> <op:operator pos:line="673" pos:column="66">==</op:operator> <op:operator pos:line="673" pos:column="69">&amp;</op:operator><name pos:line="673" pos:column="70">sentinel</name> <op:operator pos:line="673" pos:column="79">)</op:operator> <op:operator pos:line="673" pos:column="81">?</op:operator> <lit:literal type="number" pos:line="673" pos:column="83">0</lit:literal> <op:operator pos:line="673" pos:column="85">:</op:operator> <name><name pos:line="673" pos:column="87">sentinel</name><op:operator pos:line="673" pos:column="95">.</op:operator><name pos:line="673" pos:column="96">prev</name></name></expr>;</return> }</block></function>
	<function_decl><type><name pos:line="674" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="674" pos:column="23">*</type:modifier></type>	<name pos:line="674" pos:column="25">Find</name><parameter_list pos:line="674" pos:column="29">( <param><decl><type><specifier pos:line="674" pos:column="31">const</specifier> <name pos:line="674" pos:column="37">TCHAR</name> <type:modifier pos:line="674" pos:column="43">*</type:modifier></type> <name pos:line="674" pos:column="45">name</name></decl></param> )</parameter_list> <specifier pos:line="674" pos:column="52">const</specifier>;</function_decl>

</public><private pos:line="676" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="677" pos:column="9">TiXmlAttribute</name></type> <name pos:line="677" pos:column="24">sentinel</name></decl>;</decl_stmt>
</private>}</block>;</class>


<comment type="block" format="doxygen" pos:line="681" pos:column="1">/** The element is a container class. It has a value, the element name,
	and can contain other elements, text, comments, and unknowns.
	Elements also contain an arbitrary number of attributes.
*/</comment>
<class pos:line="685" pos:column="1">class <name pos:line="685" pos:column="7">TiXmlElement</name> <super pos:line="685" pos:column="20">: <specifier pos:line="685" pos:column="22">public</specifier> <name pos:line="685" pos:column="29">TiXmlNode</name></super>
<block pos:line="686" pos:column="1">{<private type="default" pos:line="686" pos:column="2">
</private><public pos:line="687" pos:column="1">public:
	<comment type="line" format="doxygen" pos:line="688" pos:column="9">/// Construct an element.</comment>
	<constructor_decl><name pos:line="689" pos:column="9">TiXmlElement</name> <parameter_list pos:line="689" pos:column="22">(<param><decl><type><specifier pos:line="689" pos:column="23">const</specifier> <name pos:line="689" pos:column="29">TCHAR</name> <type:modifier pos:line="689" pos:column="35">*</type:modifier></type> <name pos:line="689" pos:column="37">in_value</name></decl></param>)</parameter_list>;</constructor_decl>

	<cpp:ifdef pos:line="691" pos:column="9">#<cpp:directive pos:line="691" pos:column="10">ifdef</cpp:directive> <name pos:line="691" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	<comment type="line" format="doxygen" pos:line="692" pos:column="9">/// string constructor.</comment>
	<constructor><name pos:line="693" pos:column="9">TiXmlElement</name><parameter_list pos:line="693" pos:column="21">( <param><decl><type><specifier pos:line="693" pos:column="23">const</specifier> <name pos:line="693" pos:column="29">generic_string</name><type:modifier pos:line="693" pos:column="43">&amp;</type:modifier></type> <name pos:line="693" pos:column="45">_value</name></decl></param> )</parameter_list> <member_list pos:line="693" pos:column="54">: 	<call><name pos:line="693" pos:column="57">TiXmlNode</name><argument_list pos:line="693" pos:column="66">( <argument><expr><name><name pos:line="693" pos:column="68">TiXmlNode</name><op:operator pos:line="693" pos:column="77">::</op:operator><name pos:line="693" pos:column="79">ELEMENT</name></name></expr></argument> )</argument_list></call>
	</member_list><block pos:line="694" pos:column="9">{
		<expr_stmt><expr><name pos:line="695" pos:column="17">firstChild</name> <op:operator pos:line="695" pos:column="28">=</op:operator> <name pos:line="695" pos:column="30">lastChild</name> <op:operator pos:line="695" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="695" pos:column="42">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="696" pos:column="17">value</name> <op:operator pos:line="696" pos:column="23">=</op:operator> <name pos:line="696" pos:column="25">_value</name></expr>;</expr_stmt>
	}</block></constructor>
	<cpp:endif pos:line="698" pos:column="9">#<cpp:directive pos:line="698" pos:column="10">endif</cpp:directive></cpp:endif>

	<destructor_decl><specifier pos:line="700" pos:column="9">virtual</specifier> <name pos:line="700" pos:column="17">~<name pos:line="700" pos:column="18">TiXmlElement</name></name><parameter_list pos:line="700" pos:column="30">()</parameter_list>;</destructor_decl>

	<comment type="block" format="doxygen" pos:line="702" pos:column="9">/** Given an attribute name, Attribute() returns the value
		for the attribute of that name, or null if none exists.
	*/</comment>
	<function_decl><type><specifier pos:line="705" pos:column="9">const</specifier> <name pos:line="705" pos:column="15">TCHAR</name><type:modifier pos:line="705" pos:column="20">*</type:modifier></type> <name pos:line="705" pos:column="22">Attribute</name><parameter_list pos:line="705" pos:column="31">( <param><decl><type><specifier pos:line="705" pos:column="33">const</specifier> <name pos:line="705" pos:column="39">TCHAR</name><type:modifier pos:line="705" pos:column="44">*</type:modifier></type> <name pos:line="705" pos:column="46">name</name></decl></param> )</parameter_list> <specifier pos:line="705" pos:column="53">const</specifier>;</function_decl>

	<comment type="block" format="doxygen" pos:line="707" pos:column="9">/** Given an attribute name, Attribute() returns the value
		for the attribute of that name, or null if none exists.
		If the attribute exists and can be converted to an integer,
		the integer value will be put in the return 'i', if 'i'
		is non-null.
	*/</comment>
	<function_decl><type><specifier pos:line="713" pos:column="9">const</specifier> <name pos:line="713" pos:column="15">TCHAR</name><type:modifier pos:line="713" pos:column="20">*</type:modifier></type> <name pos:line="713" pos:column="22">Attribute</name><parameter_list pos:line="713" pos:column="31">( <param><decl><type><specifier pos:line="713" pos:column="33">const</specifier> <name pos:line="713" pos:column="39">TCHAR</name><type:modifier pos:line="713" pos:column="44">*</type:modifier></type> <name pos:line="713" pos:column="46">name</name></decl></param>, <param><decl><type><name pos:line="713" pos:column="52">int</name><type:modifier pos:line="713" pos:column="55">*</type:modifier></type> <name pos:line="713" pos:column="57">i</name></decl></param> )</parameter_list> <specifier pos:line="713" pos:column="61">const</specifier>;</function_decl>

	<comment type="block" format="doxygen" pos:line="715" pos:column="9">/** Given an attribute name, Attribute() returns the value
		for the attribute of that name, or null if none exists.
		If the attribute exists and can be converted to an double,
		the double value will be put in the return 'd', if 'd'
		is non-null.
	*/</comment>
	<function_decl><type><specifier pos:line="721" pos:column="9">const</specifier> <name pos:line="721" pos:column="15">TCHAR</name><type:modifier pos:line="721" pos:column="20">*</type:modifier></type> <name pos:line="721" pos:column="22">Attribute</name><parameter_list pos:line="721" pos:column="31">( <param><decl><type><specifier pos:line="721" pos:column="33">const</specifier> <name pos:line="721" pos:column="39">TCHAR</name><type:modifier pos:line="721" pos:column="44">*</type:modifier></type> <name pos:line="721" pos:column="46">name</name></decl></param>, <param><decl><type><name pos:line="721" pos:column="52">double</name><type:modifier pos:line="721" pos:column="58">*</type:modifier></type> <name pos:line="721" pos:column="60">d</name></decl></param> )</parameter_list> <specifier pos:line="721" pos:column="64">const</specifier>;</function_decl>

	<comment type="block" format="doxygen" pos:line="723" pos:column="9">/** QueryIntAttribute examines the attribute - it is an alternative to the
		Attribute() method with richer error checking.
		If the attribute is an integer, it is stored in 'value' and 
		the call returns TIXML_SUCCESS. If it is not
		an integer, it returns TIXML_WRONG_TYPE. If the attribute
		does not exist, then TIXML_NO_ATTRIBUTE is returned.
	*/</comment>	
	<function_decl><type><name pos:line="730" pos:column="9">int</name></type> <name pos:line="730" pos:column="13">QueryIntAttribute</name><parameter_list pos:line="730" pos:column="30">( <param><decl><type><specifier pos:line="730" pos:column="32">const</specifier> <name pos:line="730" pos:column="38">TCHAR</name><type:modifier pos:line="730" pos:column="43">*</type:modifier></type> <name pos:line="730" pos:column="45">name</name></decl></param>, <param><decl><type><name pos:line="730" pos:column="51">int</name><type:modifier pos:line="730" pos:column="54">*</type:modifier></type> <name pos:line="730" pos:column="56">value</name></decl></param> )</parameter_list> <specifier pos:line="730" pos:column="64">const</specifier>;</function_decl>
	<comment type="line" format="doxygen" pos:line="731" pos:column="9">/// QueryDoubleAttribute examines the attribute - see QueryIntAttribute().</comment>
	<function_decl><type><name pos:line="732" pos:column="9">int</name></type> <name pos:line="732" pos:column="13">QueryDoubleAttribute</name><parameter_list pos:line="732" pos:column="33">( <param><decl><type><specifier pos:line="732" pos:column="35">const</specifier> <name pos:line="732" pos:column="41">TCHAR</name><type:modifier pos:line="732" pos:column="46">*</type:modifier></type> <name pos:line="732" pos:column="48">name</name></decl></param>, <param><decl><type><name pos:line="732" pos:column="54">double</name><type:modifier pos:line="732" pos:column="60">*</type:modifier></type> <name pos:line="732" pos:column="62">value</name></decl></param> )</parameter_list> <specifier pos:line="732" pos:column="70">const</specifier>;</function_decl>

	<comment type="block" format="doxygen" pos:line="734" pos:column="9">/** Sets an attribute of name to a given value. The attribute
		will be created if it does not exist, or changed if it does.
	*/</comment>
	<function_decl><type><name pos:line="737" pos:column="9">void</name></type> <name pos:line="737" pos:column="14">SetAttribute</name><parameter_list pos:line="737" pos:column="26">( <param><decl><type><specifier pos:line="737" pos:column="28">const</specifier> <name pos:line="737" pos:column="34">TCHAR</name><type:modifier pos:line="737" pos:column="39">*</type:modifier></type> <name pos:line="737" pos:column="41">name</name></decl></param>, <param><decl><type><specifier pos:line="737" pos:column="47">const</specifier> <name pos:line="737" pos:column="53">TCHAR</name> <type:modifier pos:line="737" pos:column="59">*</type:modifier></type> <name pos:line="737" pos:column="61">value</name></decl></param> )</parameter_list>;</function_decl>

    <cpp:ifdef pos:line="739" pos:column="5">#<cpp:directive pos:line="739" pos:column="6">ifdef</cpp:directive> <name pos:line="739" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><specifier pos:line="740" pos:column="9">const</specifier> <name pos:line="740" pos:column="15">TCHAR</name><type:modifier pos:line="740" pos:column="20">*</type:modifier></type> <name pos:line="740" pos:column="22">Attribute</name><parameter_list pos:line="740" pos:column="31">( <param><decl><type><specifier pos:line="740" pos:column="33">const</specifier> <name pos:line="740" pos:column="39">generic_string</name><type:modifier pos:line="740" pos:column="53">&amp;</type:modifier></type> <name pos:line="740" pos:column="55">name</name></decl></param> )</parameter_list> <specifier pos:line="740" pos:column="62">const</specifier>				<block pos:line="740" pos:column="97">{ <return pos:line="740" pos:column="99">return <expr><call><name pos:line="740" pos:column="106">Attribute</name><argument_list pos:line="740" pos:column="115">( <argument><expr><call><name><name pos:line="740" pos:column="117">name</name><op:operator pos:line="740" pos:column="121">.</op:operator><name pos:line="740" pos:column="122">c_str</name></name><argument_list pos:line="740" pos:column="127">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return> }</block></function>
	<function><type><specifier pos:line="741" pos:column="9">const</specifier> <name pos:line="741" pos:column="15">TCHAR</name><type:modifier pos:line="741" pos:column="20">*</type:modifier></type> <name pos:line="741" pos:column="22">Attribute</name><parameter_list pos:line="741" pos:column="31">( <param><decl><type><specifier pos:line="741" pos:column="33">const</specifier> <name pos:line="741" pos:column="39">generic_string</name><type:modifier pos:line="741" pos:column="53">&amp;</type:modifier></type> <name pos:line="741" pos:column="55">name</name></decl></param>, <param><decl><type><name pos:line="741" pos:column="61">int</name><type:modifier pos:line="741" pos:column="64">*</type:modifier></type> <name pos:line="741" pos:column="66">i</name></decl></param> )</parameter_list> <specifier pos:line="741" pos:column="70">const</specifier>		<block pos:line="741" pos:column="89">{ <return pos:line="741" pos:column="91">return <expr><call><name pos:line="741" pos:column="98">Attribute</name><argument_list pos:line="741" pos:column="107">( <argument><expr><call><name><name pos:line="741" pos:column="109">name</name><op:operator pos:line="741" pos:column="113">.</op:operator><name pos:line="741" pos:column="114">c_str</name></name><argument_list pos:line="741" pos:column="119">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="741" pos:column="123">i</name></expr></argument> )</argument_list></call></expr>;</return> }</block></function>

	<comment type="line" format="doxygen" pos:line="743" pos:column="9">/// STL string form.</comment>
	<function><type><name pos:line="744" pos:column="9">void</name></type> <name pos:line="744" pos:column="14">SetAttribute</name><parameter_list pos:line="744" pos:column="26">( <param><decl><type><specifier pos:line="744" pos:column="28">const</specifier> <name pos:line="744" pos:column="34">generic_string</name><type:modifier pos:line="744" pos:column="48">&amp;</type:modifier></type> <name pos:line="744" pos:column="50">name</name></decl></param>, <param><decl><type><specifier pos:line="744" pos:column="56">const</specifier> <name pos:line="744" pos:column="62">generic_string</name><type:modifier pos:line="744" pos:column="76">&amp;</type:modifier></type> <name pos:line="744" pos:column="78">_value</name></decl></param> )</parameter_list>	
	<block pos:line="745" pos:column="9">{	
		<function_decl><type><name pos:line="746" pos:column="17">StringToBuffer</name></type> <name pos:line="746" pos:column="32">n</name><parameter_list pos:line="746" pos:column="33">( <param><decl><type><name pos:line="746" pos:column="35">name</name></type></decl></param> )</parameter_list>;</function_decl>
		<function_decl><type><name pos:line="747" pos:column="17">StringToBuffer</name></type> <name pos:line="747" pos:column="32">v</name><parameter_list pos:line="747" pos:column="33">( <param><decl><type><name pos:line="747" pos:column="35">_value</name></type></decl></param> )</parameter_list>;</function_decl>
		<if pos:line="748" pos:column="17">if <condition pos:line="748" pos:column="20">( <expr><name><name pos:line="748" pos:column="22">n</name><op:operator pos:line="748" pos:column="23">.</op:operator><name pos:line="748" pos:column="24">buffer</name></name> <op:operator pos:line="748" pos:column="31">&amp;&amp;</op:operator> <name><name pos:line="748" pos:column="34">v</name><op:operator pos:line="748" pos:column="35">.</op:operator><name pos:line="748" pos:column="36">buffer</name></name></expr> )</condition><then pos:line="748" pos:column="44">
			<expr_stmt><expr><call><name pos:line="749" pos:column="25">SetAttribute</name> <argument_list pos:line="749" pos:column="38">(<argument><expr><name><name pos:line="749" pos:column="39">n</name><op:operator pos:line="749" pos:column="40">.</op:operator><name pos:line="749" pos:column="41">buffer</name></name></expr></argument>, <argument><expr><name><name pos:line="749" pos:column="49">v</name><op:operator pos:line="749" pos:column="50">.</op:operator><name pos:line="749" pos:column="51">buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>	
	}</block></function>	
	<comment type="line" format="doxygen" pos:line="751" pos:column="9">///&lt; STL string form.</comment>
	<function><type><name pos:line="752" pos:column="9">void</name></type> <name pos:line="752" pos:column="14">SetAttribute</name><parameter_list pos:line="752" pos:column="26">( <param><decl><type><specifier pos:line="752" pos:column="28">const</specifier> <name pos:line="752" pos:column="34">generic_string</name><type:modifier pos:line="752" pos:column="48">&amp;</type:modifier></type> <name pos:line="752" pos:column="50">name</name></decl></param>, <param><decl><type><name pos:line="752" pos:column="56">int</name></type> <name pos:line="752" pos:column="60">_value</name></decl></param> )</parameter_list>	
	<block pos:line="753" pos:column="9">{	
		<function_decl><type><name pos:line="754" pos:column="17">StringToBuffer</name></type> <name pos:line="754" pos:column="32">n</name><parameter_list pos:line="754" pos:column="33">( <param><decl><type><name pos:line="754" pos:column="35">name</name></type></decl></param> )</parameter_list>;</function_decl>
		<if pos:line="755" pos:column="17">if <condition pos:line="755" pos:column="20">( <expr><name><name pos:line="755" pos:column="22">n</name><op:operator pos:line="755" pos:column="23">.</op:operator><name pos:line="755" pos:column="24">buffer</name></name></expr> )</condition><then pos:line="755" pos:column="32">
			<expr_stmt><expr><call><name pos:line="756" pos:column="25">SetAttribute</name> <argument_list pos:line="756" pos:column="38">(<argument><expr><name><name pos:line="756" pos:column="39">n</name><op:operator pos:line="756" pos:column="40">.</op:operator><name pos:line="756" pos:column="41">buffer</name></name></expr></argument>, <argument><expr><name pos:line="756" pos:column="49">_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>	
	}</block></function>	
	<cpp:endif pos:line="758" pos:column="9">#<cpp:directive pos:line="758" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen" pos:line="760" pos:column="9">/** Sets an attribute of name to a given value. The attribute
		will be created if it does not exist, or changed if it does.
	*/</comment>
	<function_decl><type><name pos:line="763" pos:column="9">void</name></type> <name pos:line="763" pos:column="14">SetAttribute</name><parameter_list pos:line="763" pos:column="26">( <param><decl><type><specifier pos:line="763" pos:column="28">const</specifier> <name pos:line="763" pos:column="34">TCHAR</name> <type:modifier pos:line="763" pos:column="40">*</type:modifier></type> <name pos:line="763" pos:column="42">name</name></decl></param>, <param><decl><type><name pos:line="763" pos:column="48">int</name></type> <name pos:line="763" pos:column="52">value</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="block" format="doxygen" pos:line="765" pos:column="9">/** Deletes an attribute with the given name.
	*/</comment>
	<function_decl><type><name pos:line="767" pos:column="9">void</name></type> <name pos:line="767" pos:column="14">RemoveAttribute</name><parameter_list pos:line="767" pos:column="29">( <param><decl><type><specifier pos:line="767" pos:column="31">const</specifier> <name pos:line="767" pos:column="37">TCHAR</name> <type:modifier pos:line="767" pos:column="43">*</type:modifier></type> <name pos:line="767" pos:column="45">name</name></decl></param> )</parameter_list>;</function_decl>
    <cpp:ifdef pos:line="768" pos:column="5">#<cpp:directive pos:line="768" pos:column="6">ifdef</cpp:directive> <name pos:line="768" pos:column="12">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><name pos:line="769" pos:column="9">void</name></type> <name pos:line="769" pos:column="14">RemoveAttribute</name><parameter_list pos:line="769" pos:column="29">( <param><decl><type><specifier pos:line="769" pos:column="31">const</specifier> <name pos:line="769" pos:column="37">generic_string</name><type:modifier pos:line="769" pos:column="51">&amp;</type:modifier></type> <name pos:line="769" pos:column="53">name</name></decl></param> )</parameter_list>	<block pos:line="769" pos:column="65">{	<expr_stmt><expr><call><name pos:line="769" pos:column="73">RemoveAttribute</name> <argument_list pos:line="769" pos:column="89">(<argument><expr><call><name><name pos:line="769" pos:column="90">name</name><op:operator pos:line="769" pos:column="94">.</op:operator><name pos:line="769" pos:column="95">c_str</name></name> <argument_list pos:line="769" pos:column="101">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	}</block></function>	<comment type="line" format="doxygen" pos:line="769" pos:column="121">///&lt; STL string form.</comment>
	<cpp:endif pos:line="770" pos:column="9">#<cpp:directive pos:line="770" pos:column="10">endif</cpp:directive></cpp:endif>

	<function><type><name pos:line="772" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="772" pos:column="23">*</type:modifier></type> <name pos:line="772" pos:column="25">FirstAttribute</name><parameter_list pos:line="772" pos:column="39">()</parameter_list> <specifier pos:line="772" pos:column="42">const</specifier>	<block pos:line="772" pos:column="49">{ <return pos:line="772" pos:column="51">return <expr><call><name><name pos:line="772" pos:column="58">attributeSet</name><op:operator pos:line="772" pos:column="70">.</op:operator><name pos:line="772" pos:column="71">First</name></name><argument_list pos:line="772" pos:column="76">()</argument_list></call></expr>;</return> }</block></function>		<comment type="line" format="doxygen" pos:line="772" pos:column="97">///&lt; Access the first attribute in this element.</comment>
	<function><type><name pos:line="773" pos:column="9">TiXmlAttribute</name><type:modifier pos:line="773" pos:column="23">*</type:modifier></type> <name pos:line="773" pos:column="25">LastAttribute</name><parameter_list pos:line="773" pos:column="38">()</parameter_list>	<specifier pos:line="773" pos:column="41">const</specifier> 	<block pos:line="773" pos:column="49">{ <return pos:line="773" pos:column="51">return <expr><call><name><name pos:line="773" pos:column="58">attributeSet</name><op:operator pos:line="773" pos:column="70">.</op:operator><name pos:line="773" pos:column="71">Last</name></name><argument_list pos:line="773" pos:column="75">()</argument_list></call></expr>;</return> }</block></function>		<comment type="line" format="doxygen" pos:line="773" pos:column="89">///&lt; Access the last attribute in this element.</comment>

	<comment type="line" pos:line="775" pos:column="9">// [internal use] Creates a new Element and returs it.</comment>
	<function_decl><type><specifier pos:line="776" pos:column="9">virtual</specifier> <name pos:line="776" pos:column="17">TiXmlNode</name><type:modifier pos:line="776" pos:column="26">*</type:modifier></type> <name pos:line="776" pos:column="28">Clone</name><parameter_list pos:line="776" pos:column="33">()</parameter_list> <specifier pos:line="776" pos:column="36">const</specifier>;</function_decl>
	<comment type="line" pos:line="777" pos:column="9">// [internal use]</comment>

	<function_decl><type><specifier pos:line="779" pos:column="9">virtual</specifier> <name pos:line="779" pos:column="17">void</name></type> <name pos:line="779" pos:column="22">Print</name><parameter_list pos:line="779" pos:column="27">( <param><decl><type><name pos:line="779" pos:column="29">FILE</name><type:modifier pos:line="779" pos:column="33">*</type:modifier></type> <name pos:line="779" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="779" pos:column="42">int</name></type> <name pos:line="779" pos:column="46">depth</name></decl></param> )</parameter_list> <specifier pos:line="779" pos:column="54">const</specifier>;</function_decl>

</public><protected pos:line="781" pos:column="1">protected:

	<comment type="line" pos:line="783" pos:column="9">// Used to be public [internal use]</comment>
	<cpp:ifdef pos:line="784" pos:column="9">#<cpp:directive pos:line="784" pos:column="10">ifdef</cpp:directive> <name pos:line="784" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	    <function_decl><type><specifier pos:line="785" pos:column="13">virtual</specifier> <name pos:line="785" pos:column="21">void</name></type> <name pos:line="785" pos:column="26">StreamIn</name><parameter_list pos:line="785" pos:column="34">( <param><decl><type><name pos:line="785" pos:column="36">TIXML_ISTREAM</name> <type:modifier pos:line="785" pos:column="50">*</type:modifier></type> <name pos:line="785" pos:column="52">in</name></decl></param>, <param><decl><type><name pos:line="785" pos:column="56">TIXML_STRING</name> <type:modifier pos:line="785" pos:column="69">*</type:modifier></type> <name pos:line="785" pos:column="71">tag</name></decl></param> )</parameter_list>;</function_decl>
	<cpp:endif pos:line="786" pos:column="9">#<cpp:directive pos:line="786" pos:column="10">endif</cpp:directive></cpp:endif>
	<function_decl><type><specifier pos:line="787" pos:column="9">virtual</specifier> <name pos:line="787" pos:column="17">void</name></type> <name pos:line="787" pos:column="22">StreamOut</name><parameter_list pos:line="787" pos:column="31">( <param><decl><type><name pos:line="787" pos:column="33">TIXML_OSTREAM</name> <type:modifier pos:line="787" pos:column="47">*</type:modifier></type> <name pos:line="787" pos:column="49">out</name></decl></param> )</parameter_list> <specifier pos:line="787" pos:column="55">const</specifier>;</function_decl>

	<comment type="block" pos:line="789" pos:column="9">/*	[internal use]
		Attribtue parsing starts: next TCHAR past '&lt;'
						 returns: next TCHAR past '&gt;'
	*/</comment>
	<function_decl><type><specifier pos:line="793" pos:column="9">virtual</specifier> <specifier pos:line="793" pos:column="17">const</specifier> <name pos:line="793" pos:column="23">TCHAR</name><type:modifier pos:line="793" pos:column="28">*</type:modifier></type> <name pos:line="793" pos:column="30">Parse</name><parameter_list pos:line="793" pos:column="35">( <param><decl><type><specifier pos:line="793" pos:column="37">const</specifier> <name pos:line="793" pos:column="43">TCHAR</name><type:modifier pos:line="793" pos:column="48">*</type:modifier></type> <name pos:line="793" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="793" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="793" pos:column="69">*</type:modifier></type> <name pos:line="793" pos:column="71">data</name></decl></param> )</parameter_list>;</function_decl>

	<comment type="block" pos:line="795" pos:column="9">/*	[internal use]
		Reads the "value" of the element -- another element, or text.
		This should terminate with the current end tag.
	*/</comment>
	<function_decl><type><specifier pos:line="799" pos:column="9">const</specifier> <name pos:line="799" pos:column="15">TCHAR</name><type:modifier pos:line="799" pos:column="20">*</type:modifier></type> <name pos:line="799" pos:column="22">ReadValue</name><parameter_list pos:line="799" pos:column="31">( <param><decl><type><specifier pos:line="799" pos:column="33">const</specifier> <name pos:line="799" pos:column="39">TCHAR</name><type:modifier pos:line="799" pos:column="44">*</type:modifier></type> <name pos:line="799" pos:column="46">in</name></decl></param>, <param><decl><type><name pos:line="799" pos:column="50">TiXmlParsingData</name><type:modifier pos:line="799" pos:column="66">*</type:modifier></type> <name pos:line="799" pos:column="68">prevData</name></decl></param> )</parameter_list>;</function_decl>

</protected><private pos:line="801" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="802" pos:column="9">TiXmlAttributeSet</name></type> <name pos:line="802" pos:column="27">attributeSet</name></decl>;</decl_stmt>
</private>}</block>;</class>


<comment type="block" format="doxygen" pos:line="806" pos:column="1">/**	An XML comment.
*/</comment>
<class pos:line="808" pos:column="1">class <name pos:line="808" pos:column="7">TiXmlComment</name> <super pos:line="808" pos:column="20">: <specifier pos:line="808" pos:column="22">public</specifier> <name pos:line="808" pos:column="29">TiXmlNode</name></super>
<block pos:line="809" pos:column="1">{<private type="default" pos:line="809" pos:column="2">
</private><public pos:line="810" pos:column="1">public:
	<comment type="line" format="doxygen" pos:line="811" pos:column="9">/// Constructs an empty comment.</comment>
	<constructor><name pos:line="812" pos:column="9">TiXmlComment</name><parameter_list pos:line="812" pos:column="21">()</parameter_list> <member_list pos:line="812" pos:column="24">: <call><name pos:line="812" pos:column="26">TiXmlNode</name><argument_list pos:line="812" pos:column="35">( <argument><expr><name><name pos:line="812" pos:column="37">TiXmlNode</name><op:operator pos:line="812" pos:column="46">::</op:operator><name pos:line="812" pos:column="48">COMMENT</name></name></expr></argument> )</argument_list></call> </member_list><block pos:line="812" pos:column="58">{}</block></constructor>
	<destructor><specifier pos:line="813" pos:column="9">virtual</specifier> <name pos:line="813" pos:column="17">~<name pos:line="813" pos:column="18">TiXmlComment</name></name><parameter_list pos:line="813" pos:column="30">()</parameter_list>	<block pos:line="813" pos:column="33">{}</block></destructor>

	<comment type="line" pos:line="815" pos:column="9">// [internal use] Creates a new Element and returs it.</comment>
	<function_decl><type><specifier pos:line="816" pos:column="9">virtual</specifier> <name pos:line="816" pos:column="17">TiXmlNode</name><type:modifier pos:line="816" pos:column="26">*</type:modifier></type> <name pos:line="816" pos:column="28">Clone</name><parameter_list pos:line="816" pos:column="33">()</parameter_list> <specifier pos:line="816" pos:column="36">const</specifier>;</function_decl>
	<comment type="line" pos:line="817" pos:column="9">// [internal use]</comment>
	<function_decl><type><specifier pos:line="818" pos:column="9">virtual</specifier> <name pos:line="818" pos:column="17">void</name></type> <name pos:line="818" pos:column="22">Print</name><parameter_list pos:line="818" pos:column="27">( <param><decl><type><name pos:line="818" pos:column="29">FILE</name><type:modifier pos:line="818" pos:column="33">*</type:modifier></type> <name pos:line="818" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="818" pos:column="42">int</name></type> <name pos:line="818" pos:column="46">depth</name></decl></param> )</parameter_list> <specifier pos:line="818" pos:column="54">const</specifier>;</function_decl>
</public><protected pos:line="819" pos:column="1">protected:
	<comment type="line" pos:line="820" pos:column="9">// used to be public</comment>
	<cpp:ifdef pos:line="821" pos:column="9">#<cpp:directive pos:line="821" pos:column="10">ifdef</cpp:directive> <name pos:line="821" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	    <function_decl><type><specifier pos:line="822" pos:column="13">virtual</specifier> <name pos:line="822" pos:column="21">void</name></type> <name pos:line="822" pos:column="26">StreamIn</name><parameter_list pos:line="822" pos:column="34">( <param><decl><type><name pos:line="822" pos:column="36">TIXML_ISTREAM</name> <type:modifier pos:line="822" pos:column="50">*</type:modifier></type> <name pos:line="822" pos:column="52">in</name></decl></param>, <param><decl><type><name pos:line="822" pos:column="56">TIXML_STRING</name> <type:modifier pos:line="822" pos:column="69">*</type:modifier></type> <name pos:line="822" pos:column="71">tag</name></decl></param> )</parameter_list>;</function_decl>
	<cpp:endif pos:line="823" pos:column="9">#<cpp:directive pos:line="823" pos:column="10">endif</cpp:directive></cpp:endif>
	<function_decl><type><specifier pos:line="824" pos:column="9">virtual</specifier> <name pos:line="824" pos:column="17">void</name></type> <name pos:line="824" pos:column="22">StreamOut</name><parameter_list pos:line="824" pos:column="31">( <param><decl><type><name pos:line="824" pos:column="33">TIXML_OSTREAM</name> <type:modifier pos:line="824" pos:column="47">*</type:modifier></type> <name pos:line="824" pos:column="49">out</name></decl></param> )</parameter_list> <specifier pos:line="824" pos:column="55">const</specifier>;</function_decl>
	<comment type="block" pos:line="825" pos:column="9">/*	[internal use]
		Attribtue parsing starts: at the ! of the !--
						 returns: next TCHAR past '&gt;'
	*/</comment>
	<function_decl><type><specifier pos:line="829" pos:column="9">virtual</specifier> <specifier pos:line="829" pos:column="17">const</specifier> <name pos:line="829" pos:column="23">TCHAR</name><type:modifier pos:line="829" pos:column="28">*</type:modifier></type> <name pos:line="829" pos:column="30">Parse</name><parameter_list pos:line="829" pos:column="35">( <param><decl><type><specifier pos:line="829" pos:column="37">const</specifier> <name pos:line="829" pos:column="43">TCHAR</name><type:modifier pos:line="829" pos:column="48">*</type:modifier></type> <name pos:line="829" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="829" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="829" pos:column="69">*</type:modifier></type> <name pos:line="829" pos:column="71">data</name></decl></param> )</parameter_list>;</function_decl>
</protected>}</block>;</class>


<comment type="block" format="doxygen" pos:line="833" pos:column="1">/** XML text. Contained in an element.
*/</comment>
<class pos:line="835" pos:column="1">class <name pos:line="835" pos:column="7">TiXmlText</name> <super pos:line="835" pos:column="17">: <specifier pos:line="835" pos:column="19">public</specifier> <name pos:line="835" pos:column="26">TiXmlNode</name></super>
<block pos:line="836" pos:column="1">{<private type="default" pos:line="836" pos:column="2">
	<class_decl><specifier pos:line="837" pos:column="9">friend</specifier> class <name pos:line="837" pos:column="22">TiXmlElement</name>;</class_decl>
</private><public pos:line="838" pos:column="1">public:
	<comment type="line" format="doxygen" pos:line="839" pos:column="9">/// Constructor.</comment>
	<constructor><name pos:line="840" pos:column="9">TiXmlText</name> <parameter_list pos:line="840" pos:column="19">(<param><decl><type><specifier pos:line="840" pos:column="20">const</specifier> <name pos:line="840" pos:column="26">TCHAR</name> <type:modifier pos:line="840" pos:column="32">*</type:modifier></type> <name pos:line="840" pos:column="34">initValue</name></decl></param>)</parameter_list> <member_list pos:line="840" pos:column="45">: <call><name pos:line="840" pos:column="47">TiXmlNode</name> <argument_list pos:line="840" pos:column="57">(<argument><expr><name><name pos:line="840" pos:column="58">TiXmlNode</name><op:operator pos:line="840" pos:column="67">::</op:operator><name pos:line="840" pos:column="69">TEXT</name></name></expr></argument>)</argument_list></call>
	</member_list><block pos:line="841" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="842" pos:column="17">SetValue</name><argument_list pos:line="842" pos:column="25">( <argument><expr><name pos:line="842" pos:column="27">initValue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<destructor><specifier pos:line="844" pos:column="9">virtual</specifier> <name pos:line="844" pos:column="17">~<name pos:line="844" pos:column="18">TiXmlText</name></name><parameter_list pos:line="844" pos:column="27">()</parameter_list> <block pos:line="844" pos:column="30">{}</block></destructor>

	<cpp:ifdef pos:line="846" pos:column="9">#<cpp:directive pos:line="846" pos:column="10">ifdef</cpp:directive> <name pos:line="846" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	<comment type="line" format="doxygen" pos:line="847" pos:column="9">/// Constructor.</comment>
	<constructor><name pos:line="848" pos:column="9">TiXmlText</name><parameter_list pos:line="848" pos:column="18">( <param><decl><type><specifier pos:line="848" pos:column="20">const</specifier> <name pos:line="848" pos:column="26">generic_string</name><type:modifier pos:line="848" pos:column="40">&amp;</type:modifier></type> <name pos:line="848" pos:column="42">initValue</name></decl></param> )</parameter_list> <member_list pos:line="848" pos:column="54">: <call><name pos:line="848" pos:column="56">TiXmlNode</name> <argument_list pos:line="848" pos:column="66">(<argument><expr><name><name pos:line="848" pos:column="67">TiXmlNode</name><op:operator pos:line="848" pos:column="76">::</op:operator><name pos:line="848" pos:column="78">TEXT</name></name></expr></argument>)</argument_list></call>
	</member_list><block pos:line="849" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="850" pos:column="17">SetValue</name><argument_list pos:line="850" pos:column="25">( <argument><expr><name pos:line="850" pos:column="27">initValue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<cpp:endif pos:line="852" pos:column="9">#<cpp:directive pos:line="852" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" pos:line="854" pos:column="9">// [internal use]</comment>
	<function_decl><type><specifier pos:line="855" pos:column="9">virtual</specifier> <name pos:line="855" pos:column="17">void</name></type> <name pos:line="855" pos:column="22">Print</name><parameter_list pos:line="855" pos:column="27">( <param><decl><type><name pos:line="855" pos:column="29">FILE</name><type:modifier pos:line="855" pos:column="33">*</type:modifier></type> <name pos:line="855" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="855" pos:column="42">int</name></type> <name pos:line="855" pos:column="46">depth</name></decl></param> )</parameter_list> <specifier pos:line="855" pos:column="54">const</specifier>;</function_decl>

</public><protected pos:line="857" pos:column="1">protected :
	<comment type="line" pos:line="858" pos:column="9">// [internal use] Creates a new Element and returns it.</comment>
	<function_decl><type><specifier pos:line="859" pos:column="9">virtual</specifier> <name pos:line="859" pos:column="17">TiXmlNode</name><type:modifier pos:line="859" pos:column="26">*</type:modifier></type> <name pos:line="859" pos:column="28">Clone</name><parameter_list pos:line="859" pos:column="33">()</parameter_list> <specifier pos:line="859" pos:column="36">const</specifier>;</function_decl>
	<function_decl><type><specifier pos:line="860" pos:column="9">virtual</specifier> <name pos:line="860" pos:column="17">void</name></type> <name pos:line="860" pos:column="22">StreamOut</name> <parameter_list pos:line="860" pos:column="32">( <param><decl><type><name pos:line="860" pos:column="34">TIXML_OSTREAM</name> <type:modifier pos:line="860" pos:column="48">*</type:modifier></type> <name pos:line="860" pos:column="50">out</name></decl></param> )</parameter_list> <specifier pos:line="860" pos:column="56">const</specifier>;</function_decl>
	<comment type="line" pos:line="861" pos:column="9">// [internal use]</comment>
	<function_decl><type><name pos:line="862" pos:column="9">bool</name></type> <name pos:line="862" pos:column="14">Blank</name><parameter_list pos:line="862" pos:column="19">()</parameter_list> <specifier pos:line="862" pos:column="22">const</specifier>;</function_decl>	<comment type="line" pos:line="862" pos:column="33">// returns true if all white space and new lines</comment>
	<comment type="block" pos:line="863" pos:column="9">/*	[internal use]
			Attribtue parsing starts: First TCHAR of the text
							 returns: next TCHAR past '&gt;'
	*/</comment>
	<function_decl><type><specifier pos:line="867" pos:column="9">virtual</specifier> <specifier pos:line="867" pos:column="17">const</specifier> <name pos:line="867" pos:column="23">TCHAR</name><type:modifier pos:line="867" pos:column="28">*</type:modifier></type> <name pos:line="867" pos:column="30">Parse</name><parameter_list pos:line="867" pos:column="35">( <param><decl><type><specifier pos:line="867" pos:column="37">const</specifier> <name pos:line="867" pos:column="43">TCHAR</name><type:modifier pos:line="867" pos:column="48">*</type:modifier></type> <name pos:line="867" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="867" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="867" pos:column="69">*</type:modifier></type> <name pos:line="867" pos:column="71">data</name></decl></param> )</parameter_list>;</function_decl>
	<comment type="line" pos:line="868" pos:column="9">// [internal use]</comment>
	<cpp:ifdef pos:line="869" pos:column="9">#<cpp:directive pos:line="869" pos:column="10">ifdef</cpp:directive> <name pos:line="869" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	    <function_decl><type><specifier pos:line="870" pos:column="13">virtual</specifier> <name pos:line="870" pos:column="21">void</name></type> <name pos:line="870" pos:column="26">StreamIn</name><parameter_list pos:line="870" pos:column="34">( <param><decl><type><name pos:line="870" pos:column="36">TIXML_ISTREAM</name> <type:modifier pos:line="870" pos:column="50">*</type:modifier></type> <name pos:line="870" pos:column="52">in</name></decl></param>, <param><decl><type><name pos:line="870" pos:column="56">TIXML_STRING</name> <type:modifier pos:line="870" pos:column="69">*</type:modifier></type> <name pos:line="870" pos:column="71">tag</name></decl></param> )</parameter_list>;</function_decl>
	<cpp:endif pos:line="871" pos:column="9">#<cpp:directive pos:line="871" pos:column="10">endif</cpp:directive></cpp:endif>
</protected>}</block>;</class>


<comment type="block" format="doxygen" pos:line="875" pos:column="1">/** In correct XML the declaration is the first entry in the file.
	@verbatim
		&lt;?xml version="1.0" standalone="yes"?&gt;
	@endverbatim

	TinyXml will happily read or write files without a declaration,
	however. There are 3 possible attributes to the declaration:
	version, encoding, and standalone.

	Note: In this version of the code, the attributes are
	handled as special cases, not generic attributes, simply
	because there can only be at most 3 and they are always the same.
*/</comment>
<class pos:line="888" pos:column="1">class <name pos:line="888" pos:column="7">TiXmlDeclaration</name> <super pos:line="888" pos:column="24">: <specifier pos:line="888" pos:column="26">public</specifier> <name pos:line="888" pos:column="33">TiXmlNode</name></super>
<block pos:line="889" pos:column="1">{<private type="default" pos:line="889" pos:column="2">
</private><public pos:line="890" pos:column="1">public:
	<comment type="line" format="doxygen" pos:line="891" pos:column="9">/// Construct an empty declaration.</comment>
	<constructor><name pos:line="892" pos:column="9">TiXmlDeclaration</name><parameter_list pos:line="892" pos:column="25">()</parameter_list>   <member_list pos:line="892" pos:column="30">: <call><name pos:line="892" pos:column="32">TiXmlNode</name><argument_list pos:line="892" pos:column="41">( <argument><expr><name><name pos:line="892" pos:column="43">TiXmlNode</name><op:operator pos:line="892" pos:column="52">::</op:operator><name pos:line="892" pos:column="54">DECLARATION</name></name></expr></argument> )</argument_list></call> </member_list><block pos:line="892" pos:column="68">{}</block></constructor>

<cpp:ifdef pos:line="894" pos:column="1">#<cpp:directive pos:line="894" pos:column="2">ifdef</cpp:directive> <name pos:line="894" pos:column="8">TIXML_USE_STL</name></cpp:ifdef>
	<comment type="line" format="doxygen" pos:line="895" pos:column="9">/// Constructor.</comment>
	<constructor><name pos:line="896" pos:column="9">TiXmlDeclaration</name><parameter_list pos:line="896" pos:column="25">(	<param><decl><type><specifier pos:line="896" pos:column="33">const</specifier> <name pos:line="896" pos:column="39">generic_string</name><type:modifier pos:line="896" pos:column="53">&amp;</type:modifier></type> <name pos:line="896" pos:column="55">_version</name></decl></param>,
						<param><decl><type><specifier pos:line="897" pos:column="49">const</specifier> <name pos:line="897" pos:column="55">generic_string</name><type:modifier pos:line="897" pos:column="69">&amp;</type:modifier></type> <name pos:line="897" pos:column="71">_encoding</name></decl></param>,
						<param><decl><type><specifier pos:line="898" pos:column="49">const</specifier> <name pos:line="898" pos:column="55">generic_string</name><type:modifier pos:line="898" pos:column="69">&amp;</type:modifier></type> <name pos:line="898" pos:column="71">_standalone</name></decl></param> )</parameter_list>
			<member_list pos:line="899" pos:column="25">: <call><name pos:line="899" pos:column="27">TiXmlNode</name><argument_list pos:line="899" pos:column="36">( <argument><expr><name><name pos:line="899" pos:column="38">TiXmlNode</name><op:operator pos:line="899" pos:column="47">::</op:operator><name pos:line="899" pos:column="49">DECLARATION</name></name></expr></argument> )</argument_list></call>
	</member_list><block pos:line="900" pos:column="9">{
		<expr_stmt><expr><name pos:line="901" pos:column="17">version</name> <op:operator pos:line="901" pos:column="25">=</op:operator> <name pos:line="901" pos:column="27">_version</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="902" pos:column="17">encoding</name> <op:operator pos:line="902" pos:column="26">=</op:operator> <name pos:line="902" pos:column="28">_encoding</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="903" pos:column="17">standalone</name> <op:operator pos:line="903" pos:column="28">=</op:operator> <name pos:line="903" pos:column="30">_standalone</name></expr>;</expr_stmt>
	}</block></constructor>
<cpp:endif pos:line="905" pos:column="1">#<cpp:directive pos:line="905" pos:column="2">endif</cpp:directive></cpp:endif>

	<comment type="line" format="doxygen" pos:line="907" pos:column="9">/// Construct.</comment>
	<constructor_decl><name pos:line="908" pos:column="9">TiXmlDeclaration</name><parameter_list pos:line="908" pos:column="25">(	<param><decl><type><specifier pos:line="908" pos:column="33">const</specifier> <name pos:line="908" pos:column="39">TCHAR</name><type:modifier pos:line="908" pos:column="44">*</type:modifier></type> <name pos:line="908" pos:column="46">_version</name></decl></param>,
						<param><decl><type><specifier pos:line="909" pos:column="49">const</specifier> <name pos:line="909" pos:column="55">TCHAR</name><type:modifier pos:line="909" pos:column="60">*</type:modifier></type> <name pos:line="909" pos:column="62">_encoding</name></decl></param>,
						<param><decl><type><specifier pos:line="910" pos:column="49">const</specifier> <name pos:line="910" pos:column="55">TCHAR</name><type:modifier pos:line="910" pos:column="60">*</type:modifier></type> <name pos:line="910" pos:column="62">_standalone</name></decl></param> )</parameter_list>;</constructor_decl>

	<destructor><specifier pos:line="912" pos:column="9">virtual</specifier> <name pos:line="912" pos:column="17">~<name pos:line="912" pos:column="18">TiXmlDeclaration</name></name><parameter_list pos:line="912" pos:column="34">()</parameter_list>	<block pos:line="912" pos:column="41">{}</block></destructor>

	<comment type="line" format="doxygen" pos:line="914" pos:column="9">/// Version. Will return empty if none was found.</comment>
	<function><type><specifier pos:line="915" pos:column="9">const</specifier> <name pos:line="915" pos:column="15">TCHAR</name> <type:modifier pos:line="915" pos:column="21">*</type:modifier></type> <name pos:line="915" pos:column="23">Version</name><parameter_list pos:line="915" pos:column="30">()</parameter_list> <specifier pos:line="915" pos:column="33">const</specifier>		<block pos:line="915" pos:column="49">{ <return pos:line="915" pos:column="51">return <expr><call><name><name pos:line="915" pos:column="58">version</name><op:operator pos:line="915" pos:column="65">.</op:operator><name pos:line="915" pos:column="66">c_str</name></name> <argument_list pos:line="915" pos:column="72">()</argument_list></call></expr>;</return> }</block></function>
	<comment type="line" format="doxygen" pos:line="916" pos:column="9">/// Encoding. Will return empty if none was found.</comment>
	<function><type><specifier pos:line="917" pos:column="9">const</specifier> <name pos:line="917" pos:column="15">TCHAR</name> <type:modifier pos:line="917" pos:column="21">*</type:modifier></type> <name pos:line="917" pos:column="23">Encoding</name><parameter_list pos:line="917" pos:column="31">()</parameter_list> <specifier pos:line="917" pos:column="34">const</specifier>		<block pos:line="917" pos:column="49">{ <return pos:line="917" pos:column="51">return <expr><call><name><name pos:line="917" pos:column="58">encoding</name><op:operator pos:line="917" pos:column="66">.</op:operator><name pos:line="917" pos:column="67">c_str</name></name> <argument_list pos:line="917" pos:column="73">()</argument_list></call></expr>;</return> }</block></function>
	<comment type="line" format="doxygen" pos:line="918" pos:column="9">/// Is this a standalone document?</comment>
	<function><type><specifier pos:line="919" pos:column="9">const</specifier> <name pos:line="919" pos:column="15">TCHAR</name> <type:modifier pos:line="919" pos:column="21">*</type:modifier></type> <name pos:line="919" pos:column="23">Standalone</name><parameter_list pos:line="919" pos:column="33">()</parameter_list> <specifier pos:line="919" pos:column="36">const</specifier>		<block pos:line="919" pos:column="57">{ <return pos:line="919" pos:column="59">return <expr><call><name><name pos:line="919" pos:column="66">standalone</name><op:operator pos:line="919" pos:column="76">.</op:operator><name pos:line="919" pos:column="77">c_str</name></name> <argument_list pos:line="919" pos:column="83">()</argument_list></call></expr>;</return> }</block></function>

	<comment type="line" pos:line="921" pos:column="9">// [internal use] Creates a new Element and returs it.</comment>
	<function_decl><type><specifier pos:line="922" pos:column="9">virtual</specifier> <name pos:line="922" pos:column="17">TiXmlNode</name><type:modifier pos:line="922" pos:column="26">*</type:modifier></type> <name pos:line="922" pos:column="28">Clone</name><parameter_list pos:line="922" pos:column="33">()</parameter_list> <specifier pos:line="922" pos:column="36">const</specifier>;</function_decl>
	<comment type="line" pos:line="923" pos:column="9">// [internal use]</comment>
	<function_decl><type><specifier pos:line="924" pos:column="9">virtual</specifier> <name pos:line="924" pos:column="17">void</name></type> <name pos:line="924" pos:column="22">Print</name><parameter_list pos:line="924" pos:column="27">( <param><decl><type><name pos:line="924" pos:column="29">FILE</name><type:modifier pos:line="924" pos:column="33">*</type:modifier></type> <name pos:line="924" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="924" pos:column="42">int</name></type> <name pos:line="924" pos:column="46">depth</name></decl></param> )</parameter_list> <specifier pos:line="924" pos:column="54">const</specifier>;</function_decl>

</public><protected pos:line="926" pos:column="1">protected:
	<comment type="line" pos:line="927" pos:column="9">// used to be public</comment>
	<cpp:ifdef pos:line="928" pos:column="9">#<cpp:directive pos:line="928" pos:column="10">ifdef</cpp:directive> <name pos:line="928" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	    <function_decl><type><specifier pos:line="929" pos:column="13">virtual</specifier> <name pos:line="929" pos:column="21">void</name></type> <name pos:line="929" pos:column="26">StreamIn</name><parameter_list pos:line="929" pos:column="34">( <param><decl><type><name pos:line="929" pos:column="36">TIXML_ISTREAM</name> <type:modifier pos:line="929" pos:column="50">*</type:modifier></type> <name pos:line="929" pos:column="52">in</name></decl></param>, <param><decl><type><name pos:line="929" pos:column="56">TIXML_STRING</name> <type:modifier pos:line="929" pos:column="69">*</type:modifier></type> <name pos:line="929" pos:column="71">tag</name></decl></param> )</parameter_list>;</function_decl>
	<cpp:endif pos:line="930" pos:column="9">#<cpp:directive pos:line="930" pos:column="10">endif</cpp:directive></cpp:endif>
	<function_decl><type><specifier pos:line="931" pos:column="9">virtual</specifier> <name pos:line="931" pos:column="17">void</name></type> <name pos:line="931" pos:column="22">StreamOut</name> <parameter_list pos:line="931" pos:column="32">( <param><decl><type><name pos:line="931" pos:column="34">TIXML_OSTREAM</name> <type:modifier pos:line="931" pos:column="48">*</type:modifier></type> <name pos:line="931" pos:column="50">out</name></decl></param>)</parameter_list> <specifier pos:line="931" pos:column="55">const</specifier>;</function_decl>
	<comment type="line" pos:line="932" pos:column="9">//	[internal use]</comment>
	<comment type="line" pos:line="933" pos:column="9">//	Attribtue parsing starts: next TCHAR past '&lt;'</comment>
	<comment type="line" pos:line="934" pos:column="9">//					 returns: next TCHAR past '&gt;'</comment>

	<function_decl><type><specifier pos:line="936" pos:column="9">virtual</specifier> <specifier pos:line="936" pos:column="17">const</specifier> <name pos:line="936" pos:column="23">TCHAR</name><type:modifier pos:line="936" pos:column="28">*</type:modifier></type> <name pos:line="936" pos:column="30">Parse</name><parameter_list pos:line="936" pos:column="35">( <param><decl><type><specifier pos:line="936" pos:column="37">const</specifier> <name pos:line="936" pos:column="43">TCHAR</name><type:modifier pos:line="936" pos:column="48">*</type:modifier></type> <name pos:line="936" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="936" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="936" pos:column="69">*</type:modifier></type> <name pos:line="936" pos:column="71">data</name></decl></param> )</parameter_list>;</function_decl>

</protected><private pos:line="938" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="939" pos:column="9">TIXML_STRING</name></type> <name pos:line="939" pos:column="22">version</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="940" pos:column="9">TIXML_STRING</name></type> <name pos:line="940" pos:column="22">encoding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="941" pos:column="9">TIXML_STRING</name></type> <name pos:line="941" pos:column="22">standalone</name></decl>;</decl_stmt>
</private>}</block>;</class>


<comment type="block" format="doxygen" pos:line="945" pos:column="1">/** Any tag that tinyXml doesn't recognize is saved as an
	unknown. It is a tag of text, but should not be modified.
	It will be written back to the XML, unchanged, when the file
	is saved.
*/</comment>
<class pos:line="950" pos:column="1">class <name pos:line="950" pos:column="7">TiXmlUnknown</name> <super pos:line="950" pos:column="20">: <specifier pos:line="950" pos:column="22">public</specifier> <name pos:line="950" pos:column="29">TiXmlNode</name></super>
<block pos:line="951" pos:column="1">{<private type="default" pos:line="951" pos:column="2">
</private><public pos:line="952" pos:column="1">public:
	<constructor><name pos:line="953" pos:column="9">TiXmlUnknown</name><parameter_list pos:line="953" pos:column="21">()</parameter_list> <member_list pos:line="953" pos:column="24">: <call><name pos:line="953" pos:column="26">TiXmlNode</name><argument_list pos:line="953" pos:column="35">( <argument><expr><name><name pos:line="953" pos:column="37">TiXmlNode</name><op:operator pos:line="953" pos:column="46">::</op:operator><name pos:line="953" pos:column="48">UNKNOWN</name></name></expr></argument> )</argument_list></call> </member_list><block pos:line="953" pos:column="58">{}</block></constructor>
	<destructor><specifier pos:line="954" pos:column="9">virtual</specifier> <name pos:line="954" pos:column="17">~<name pos:line="954" pos:column="18">TiXmlUnknown</name></name><parameter_list pos:line="954" pos:column="30">()</parameter_list> <block pos:line="954" pos:column="33">{}</block></destructor>

	<comment type="line" pos:line="956" pos:column="9">// [internal use]</comment>
	<function_decl><type><specifier pos:line="957" pos:column="9">virtual</specifier> <name pos:line="957" pos:column="17">TiXmlNode</name><type:modifier pos:line="957" pos:column="26">*</type:modifier></type> <name pos:line="957" pos:column="28">Clone</name><parameter_list pos:line="957" pos:column="33">()</parameter_list> <specifier pos:line="957" pos:column="36">const</specifier>;</function_decl>
	<comment type="line" pos:line="958" pos:column="9">// [internal use]</comment>
	<function_decl><type><specifier pos:line="959" pos:column="9">virtual</specifier> <name pos:line="959" pos:column="17">void</name></type> <name pos:line="959" pos:column="22">Print</name><parameter_list pos:line="959" pos:column="27">( <param><decl><type><name pos:line="959" pos:column="29">FILE</name><type:modifier pos:line="959" pos:column="33">*</type:modifier></type> <name pos:line="959" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="959" pos:column="42">int</name></type> <name pos:line="959" pos:column="46">depth</name></decl></param> )</parameter_list> <specifier pos:line="959" pos:column="54">const</specifier>;</function_decl>
</public><protected pos:line="960" pos:column="1">protected:
	<cpp:ifdef pos:line="961" pos:column="9">#<cpp:directive pos:line="961" pos:column="10">ifdef</cpp:directive> <name pos:line="961" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	    <function_decl><type><specifier pos:line="962" pos:column="13">virtual</specifier> <name pos:line="962" pos:column="21">void</name></type> <name pos:line="962" pos:column="26">StreamIn</name><parameter_list pos:line="962" pos:column="34">( <param><decl><type><name pos:line="962" pos:column="36">TIXML_ISTREAM</name> <type:modifier pos:line="962" pos:column="50">*</type:modifier></type> <name pos:line="962" pos:column="52">in</name></decl></param>, <param><decl><type><name pos:line="962" pos:column="56">TIXML_STRING</name> <type:modifier pos:line="962" pos:column="69">*</type:modifier></type> <name pos:line="962" pos:column="71">tag</name></decl></param> )</parameter_list>;</function_decl>
	<cpp:endif pos:line="963" pos:column="9">#<cpp:directive pos:line="963" pos:column="10">endif</cpp:directive></cpp:endif>
	<function_decl><type><specifier pos:line="964" pos:column="9">virtual</specifier> <name pos:line="964" pos:column="17">void</name></type> <name pos:line="964" pos:column="22">StreamOut</name> <parameter_list pos:line="964" pos:column="32">( <param><decl><type><name pos:line="964" pos:column="34">TIXML_OSTREAM</name> <type:modifier pos:line="964" pos:column="48">*</type:modifier></type> <name pos:line="964" pos:column="50">out</name></decl></param> )</parameter_list> <specifier pos:line="964" pos:column="56">const</specifier>;</function_decl>
	<comment type="block" pos:line="965" pos:column="9">/*	[internal use]
		Attribute parsing starts: First TCHAR of the text
						 returns: next TCHAR past '&gt;'
	*/</comment>
	<function_decl><type><specifier pos:line="969" pos:column="9">virtual</specifier> <specifier pos:line="969" pos:column="17">const</specifier> <name pos:line="969" pos:column="23">TCHAR</name><type:modifier pos:line="969" pos:column="28">*</type:modifier></type> <name pos:line="969" pos:column="30">Parse</name><parameter_list pos:line="969" pos:column="35">( <param><decl><type><specifier pos:line="969" pos:column="37">const</specifier> <name pos:line="969" pos:column="43">TCHAR</name><type:modifier pos:line="969" pos:column="48">*</type:modifier></type> <name pos:line="969" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="969" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="969" pos:column="69">*</type:modifier></type> <name pos:line="969" pos:column="71">data</name></decl></param> )</parameter_list>;</function_decl>
</protected>}</block>;</class>


<comment type="block" format="doxygen" pos:line="973" pos:column="1">/** Always the top level node. A document binds together all the
	XML pieces. It can be saved, loaded, and printed to the screen.
	The 'value' of a document node is the xml file name.
*/</comment>
<class pos:line="977" pos:column="1">class <name pos:line="977" pos:column="7">TiXmlDocument</name> <super pos:line="977" pos:column="21">: <specifier pos:line="977" pos:column="23">public</specifier> <name pos:line="977" pos:column="30">TiXmlNode</name></super>
<block pos:line="978" pos:column="1">{<private type="default" pos:line="978" pos:column="2">
</private><public pos:line="979" pos:column="1">public:
	<comment type="line" format="doxygen" pos:line="980" pos:column="9">/// Create an empty document, that has no name.</comment>
	<constructor_decl><name pos:line="981" pos:column="9">TiXmlDocument</name><parameter_list pos:line="981" pos:column="22">()</parameter_list>;</constructor_decl>
	<comment type="line" format="doxygen" pos:line="982" pos:column="9">/// Create a document with a name. The name of the document is also the filename of the xml.</comment>
	<constructor_decl><name pos:line="983" pos:column="9">TiXmlDocument</name><parameter_list pos:line="983" pos:column="22">( <param><decl><type><specifier pos:line="983" pos:column="24">const</specifier> <name pos:line="983" pos:column="30">TCHAR</name> <type:modifier pos:line="983" pos:column="36">*</type:modifier></type> <name pos:line="983" pos:column="38">documentName</name></decl></param> )</parameter_list>;</constructor_decl>

	<cpp:ifdef pos:line="985" pos:column="9">#<cpp:directive pos:line="985" pos:column="10">ifdef</cpp:directive> <name pos:line="985" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	<comment type="line" format="doxygen" pos:line="986" pos:column="9">/// Constructor.</comment>
	<constructor><name pos:line="987" pos:column="9">TiXmlDocument</name><parameter_list pos:line="987" pos:column="22">( <param><decl><type><specifier pos:line="987" pos:column="24">const</specifier> <name pos:line="987" pos:column="30">generic_string</name><type:modifier pos:line="987" pos:column="44">&amp;</type:modifier></type> <name pos:line="987" pos:column="46">documentName</name></decl></param> )</parameter_list> <member_list pos:line="987" pos:column="61">:
	    <call><name pos:line="988" pos:column="13">TiXmlNode</name><argument_list pos:line="988" pos:column="22">( <argument><expr><name><name pos:line="988" pos:column="24">TiXmlNode</name><op:operator pos:line="988" pos:column="33">::</op:operator><name pos:line="988" pos:column="35">DOCUMENT</name></name></expr></argument> )</argument_list></call>
	</member_list><block pos:line="989" pos:column="9">{
        <expr_stmt><expr><name pos:line="990" pos:column="9">value</name> <op:operator pos:line="990" pos:column="15">=</op:operator> <name pos:line="990" pos:column="17">documentName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="991" pos:column="17">error</name> <op:operator pos:line="991" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="991" pos:column="25">false</lit:literal></expr>;</expr_stmt>
	}</block></constructor>
	<cpp:endif pos:line="993" pos:column="9">#<cpp:directive pos:line="993" pos:column="10">endif</cpp:directive></cpp:endif>

	<destructor><specifier pos:line="995" pos:column="9">virtual</specifier> <name pos:line="995" pos:column="17">~<name pos:line="995" pos:column="18">TiXmlDocument</name></name><parameter_list pos:line="995" pos:column="31">()</parameter_list> <block pos:line="995" pos:column="34">{}</block></destructor>

	<comment type="block" format="doxygen" pos:line="997" pos:column="9">/** Load a file using the current document value.
		Returns true if successful. Will delete any existing
		document data before loading.
	*/</comment>
	<function_decl><type><name pos:line="1001" pos:column="9">bool</name></type> <name pos:line="1001" pos:column="14">LoadFile</name><parameter_list pos:line="1001" pos:column="22">()</parameter_list>;</function_decl>
	<comment type="line" format="doxygen" pos:line="1002" pos:column="9">/// Save a file using the current document value. Returns true if successful.</comment>
	<function_decl><type><name pos:line="1003" pos:column="9">bool</name></type> <name pos:line="1003" pos:column="14">SaveFile</name><parameter_list pos:line="1003" pos:column="22">()</parameter_list> <specifier pos:line="1003" pos:column="25">const</specifier>;</function_decl>
	<comment type="line" format="doxygen" pos:line="1004" pos:column="9">/// Load a file using the given filename. Returns true if successful.</comment>
	<function_decl><type><name pos:line="1005" pos:column="9">bool</name></type> <name pos:line="1005" pos:column="14">LoadFile</name><parameter_list pos:line="1005" pos:column="22">( <param><decl><type><specifier pos:line="1005" pos:column="24">const</specifier> <name pos:line="1005" pos:column="30">TCHAR</name> <type:modifier pos:line="1005" pos:column="36">*</type:modifier></type> <name pos:line="1005" pos:column="38">filename</name></decl></param> )</parameter_list>;</function_decl>
	<comment type="line" format="doxygen" pos:line="1006" pos:column="9">/// Save a file using the given filename. Returns true if successful.</comment>
	<function_decl><type><name pos:line="1007" pos:column="9">bool</name></type> <name pos:line="1007" pos:column="14">SaveFile</name><parameter_list pos:line="1007" pos:column="22">( <param><decl><type><specifier pos:line="1007" pos:column="24">const</specifier> <name pos:line="1007" pos:column="30">TCHAR</name> <type:modifier pos:line="1007" pos:column="36">*</type:modifier></type> <name pos:line="1007" pos:column="38">filename</name></decl></param> )</parameter_list> <specifier pos:line="1007" pos:column="49">const</specifier>;</function_decl>

	<cpp:ifdef pos:line="1009" pos:column="9">#<cpp:directive pos:line="1009" pos:column="10">ifdef</cpp:directive> <name pos:line="1009" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><name pos:line="1010" pos:column="9">bool</name></type> <name pos:line="1010" pos:column="14">LoadFile</name><parameter_list pos:line="1010" pos:column="22">( <param><decl><type><specifier pos:line="1010" pos:column="24">const</specifier> <name pos:line="1010" pos:column="30">generic_string</name><type:modifier pos:line="1010" pos:column="44">&amp;</type:modifier></type> <name pos:line="1010" pos:column="46">filename</name></decl></param> )</parameter_list>			<comment type="line" format="doxygen" pos:line="1010" pos:column="73">///&lt; STL string version.</comment>
	<block pos:line="1011" pos:column="9">{
		<function_decl><type><name pos:line="1012" pos:column="17">StringToBuffer</name></type> <name pos:line="1012" pos:column="32">f</name><parameter_list pos:line="1012" pos:column="33">( <param><decl><type><name pos:line="1012" pos:column="35">filename</name></type></decl></param> )</parameter_list>;</function_decl>
		<return pos:line="1013" pos:column="17">return <expr><op:operator pos:line="1013" pos:column="24">(</op:operator> <name><name pos:line="1013" pos:column="26">f</name><op:operator pos:line="1013" pos:column="27">.</op:operator><name pos:line="1013" pos:column="28">buffer</name></name> <op:operator pos:line="1013" pos:column="35">&amp;&amp;</op:operator> <call><name pos:line="1013" pos:column="38">LoadFile</name><argument_list pos:line="1013" pos:column="46">( <argument><expr><name><name pos:line="1013" pos:column="48">f</name><op:operator pos:line="1013" pos:column="49">.</op:operator><name pos:line="1013" pos:column="50">buffer</name></name></expr></argument> )</argument_list></call><op:operator pos:line="1013" pos:column="58">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><name pos:line="1015" pos:column="9">bool</name></type> <name pos:line="1015" pos:column="14">SaveFile</name><parameter_list pos:line="1015" pos:column="22">( <param><decl><type><specifier pos:line="1015" pos:column="24">const</specifier> <name pos:line="1015" pos:column="30">generic_string</name><type:modifier pos:line="1015" pos:column="44">&amp;</type:modifier></type> <name pos:line="1015" pos:column="46">filename</name></decl></param> )</parameter_list> <specifier pos:line="1015" pos:column="57">const</specifier>		<comment type="line" format="doxygen" pos:line="1015" pos:column="73">///&lt; STL string version.</comment>
	<block pos:line="1016" pos:column="9">{
		<function_decl><type><name pos:line="1017" pos:column="17">StringToBuffer</name></type> <name pos:line="1017" pos:column="32">f</name><parameter_list pos:line="1017" pos:column="33">( <param><decl><type><name pos:line="1017" pos:column="35">filename</name></type></decl></param> )</parameter_list>;</function_decl>
		<return pos:line="1018" pos:column="17">return <expr><op:operator pos:line="1018" pos:column="24">(</op:operator> <name><name pos:line="1018" pos:column="26">f</name><op:operator pos:line="1018" pos:column="27">.</op:operator><name pos:line="1018" pos:column="28">buffer</name></name> <op:operator pos:line="1018" pos:column="35">&amp;&amp;</op:operator> <call><name pos:line="1018" pos:column="38">SaveFile</name><argument_list pos:line="1018" pos:column="46">( <argument><expr><name><name pos:line="1018" pos:column="48">f</name><op:operator pos:line="1018" pos:column="49">.</op:operator><name pos:line="1018" pos:column="50">buffer</name></name></expr></argument> )</argument_list></call><op:operator pos:line="1018" pos:column="58">)</op:operator></expr>;</return>
	}</block></function>
	<cpp:endif pos:line="1020" pos:column="9">#<cpp:directive pos:line="1020" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="block" format="doxygen" pos:line="1022" pos:column="9">/** Parse the given null terminated block of xml data.
	*/</comment>
	<function_decl><type><specifier pos:line="1024" pos:column="9">virtual</specifier> <specifier pos:line="1024" pos:column="17">const</specifier> <name pos:line="1024" pos:column="23">TCHAR</name><type:modifier pos:line="1024" pos:column="28">*</type:modifier></type> <name pos:line="1024" pos:column="30">Parse</name><parameter_list pos:line="1024" pos:column="35">( <param><decl><type><specifier pos:line="1024" pos:column="37">const</specifier> <name pos:line="1024" pos:column="43">TCHAR</name><type:modifier pos:line="1024" pos:column="48">*</type:modifier></type> <name pos:line="1024" pos:column="50">p</name></decl></param>, <param><decl><type><name pos:line="1024" pos:column="53">TiXmlParsingData</name><type:modifier pos:line="1024" pos:column="69">*</type:modifier></type> <name pos:line="1024" pos:column="71">data</name> <init pos:line="1024" pos:column="76">= <expr><lit:literal type="number" pos:line="1024" pos:column="78">0</lit:literal></expr></init></decl></param> )</parameter_list>;</function_decl>

	<comment type="block" format="doxygen" pos:line="1026" pos:column="9">/** Get the root element -- the only top level element -- of the document.
		In well formed XML, there should only be one. TinyXml is tolerant of
		multiple elements at the document level.
	*/</comment>
	<function><type><name pos:line="1030" pos:column="9">TiXmlElement</name><type:modifier pos:line="1030" pos:column="21">*</type:modifier></type> <name pos:line="1030" pos:column="23">RootElement</name><parameter_list pos:line="1030" pos:column="34">()</parameter_list> <specifier pos:line="1030" pos:column="37">const</specifier>		<block pos:line="1030" pos:column="57">{ <return pos:line="1030" pos:column="59">return <expr><call><name pos:line="1030" pos:column="66">FirstChildElement</name><argument_list pos:line="1030" pos:column="83">()</argument_list></call></expr>;</return> }</block></function>

	<comment type="block" format="doxygen" pos:line="1032" pos:column="9">/** If an error occurs, Error will be set to true. Also,
		- The ErrorId() will contain the integer identifier of the error (not generally useful)
		- The ErrorDesc() method will return the name of the error. (very useful)
		- The ErrorRow() and ErrorCol() will return the location of the error (if known)
	*/</comment>	
	<function><type><name pos:line="1037" pos:column="9">bool</name></type> <name pos:line="1037" pos:column="14">Error</name><parameter_list pos:line="1037" pos:column="19">()</parameter_list> <specifier pos:line="1037" pos:column="22">const</specifier>						<block pos:line="1037" pos:column="73">{ <return pos:line="1037" pos:column="75">return <expr><name pos:line="1037" pos:column="82">error</name></expr>;</return> }</block></function>

	<comment type="line" format="doxygen" pos:line="1039" pos:column="9">/// Contains a textual (english) description of the error if one occurs.</comment>
	<function><type><specifier pos:line="1040" pos:column="9">const</specifier> <name pos:line="1040" pos:column="15">TCHAR</name> <type:modifier pos:line="1040" pos:column="21">*</type:modifier></type> <name pos:line="1040" pos:column="23">ErrorDesc</name><parameter_list pos:line="1040" pos:column="32">()</parameter_list> <specifier pos:line="1040" pos:column="35">const</specifier>	<block pos:line="1040" pos:column="41">{ <return pos:line="1040" pos:column="43">return <expr><call><name><name pos:line="1040" pos:column="50">errorDesc</name><op:operator pos:line="1040" pos:column="59">.</op:operator><name pos:line="1040" pos:column="60">c_str</name></name> <argument_list pos:line="1040" pos:column="66">()</argument_list></call></expr>;</return> }</block></function>

	<comment type="block" format="doxygen" pos:line="1042" pos:column="9">/** Generally, you probably want the error generic_string ( ErrorDesc() ). But if you
		prefer the ErrorId, this function will fetch it.
	*/</comment>
	<function><type><specifier pos:line="1045" pos:column="9">const</specifier> <name pos:line="1045" pos:column="15">int</name></type> <name pos:line="1045" pos:column="19">ErrorId</name><parameter_list pos:line="1045" pos:column="26">()</parameter_list>	<specifier pos:line="1045" pos:column="33">const</specifier>				<block pos:line="1045" pos:column="65">{ <return pos:line="1045" pos:column="67">return <expr><name pos:line="1045" pos:column="74">errorId</name></expr>;</return> }</block></function>

	<comment type="block" format="doxygen" pos:line="1047" pos:column="9">/** Returns the location (if known) of the error. The first column is column 1, 
		and the first row is row 1. A value of 0 means the row and column wasn't applicable
		(memory errors, for example, have no row/column) or the parser lost the error. (An
		error in the error reporting, in that case.)

		@sa SetTabSize, Row, Column
	*/</comment>
	<function><type><name pos:line="1054" pos:column="9">int</name></type> <name pos:line="1054" pos:column="13">ErrorRow</name><parameter_list pos:line="1054" pos:column="21">()</parameter_list>	<block pos:line="1054" pos:column="25">{ <return pos:line="1054" pos:column="27">return <expr><name><name pos:line="1054" pos:column="34">errorLocation</name><op:operator pos:line="1054" pos:column="47">.</op:operator><name pos:line="1054" pos:column="48">row</name></name><op:operator pos:line="1054" pos:column="51">+</op:operator><lit:literal type="number" pos:line="1054" pos:column="52">1</lit:literal></expr>;</return> }</block></function>
	<function><type><name pos:line="1055" pos:column="9">int</name></type> <name pos:line="1055" pos:column="13">ErrorCol</name><parameter_list pos:line="1055" pos:column="21">()</parameter_list>	<block pos:line="1055" pos:column="25">{ <return pos:line="1055" pos:column="27">return <expr><name><name pos:line="1055" pos:column="34">errorLocation</name><op:operator pos:line="1055" pos:column="47">.</op:operator><name pos:line="1055" pos:column="48">col</name></name><op:operator pos:line="1055" pos:column="51">+</op:operator><lit:literal type="number" pos:line="1055" pos:column="52">1</lit:literal></expr>;</return> }</block></function>	<comment type="line" format="doxygen" pos:line="1055" pos:column="57">///&lt; The column where the error occured. See ErrorRow()</comment>

	<comment type="block" format="doxygen" pos:line="1057" pos:column="9">/** By calling this method, with a tab size
		greater than 0, the row and column of each node and attribute is stored
		when the file is loaded. Very useful for tracking the DOM back in to
		the source file.

		The tab size is required for calculating the location of nodes. If not
		set, the default of 4 is used. The tabsize is set per document. Setting
		the tabsize to 0 disables row/column tracking.

		Note that row and column tracking is not supported when using operator&gt;&gt;.

		The tab size needs to be enabled before the parse or load. Correct usage:
		@verbatim
		TiXmlDocument doc;
		doc.SetTabSize( 8 );
		doc.Load( "myfile.xml" );
		@endverbatim

		@sa Row, Column
	*/</comment>
	<function><type><name pos:line="1077" pos:column="9">void</name></type> <name pos:line="1077" pos:column="14">SetTabSize</name><parameter_list pos:line="1077" pos:column="24">( <param><decl><type><name pos:line="1077" pos:column="26">int</name></type> <name pos:line="1077" pos:column="30">_tabsize</name></decl></param> )</parameter_list>		<block pos:line="1077" pos:column="49">{ <expr_stmt><expr><name pos:line="1077" pos:column="51">tabsize</name> <op:operator pos:line="1077" pos:column="59">=</op:operator> <name pos:line="1077" pos:column="61">_tabsize</name></expr>;</expr_stmt> }</block></function>

	<function><type><name pos:line="1079" pos:column="9">int</name></type> <name pos:line="1079" pos:column="13">TabSize</name><parameter_list pos:line="1079" pos:column="20">()</parameter_list> <specifier pos:line="1079" pos:column="23">const</specifier>	<block pos:line="1079" pos:column="33">{ <return pos:line="1079" pos:column="35">return <expr><name pos:line="1079" pos:column="42">tabsize</name></expr>;</return> }</block></function>

	<comment type="block" format="doxygen" pos:line="1081" pos:column="9">/** If you have handled the error, it can be reset with this call. The error
		state is automatically cleared if you Parse a new XML block.
	*/</comment>
	<function><type><name pos:line="1084" pos:column="9">void</name></type> <name pos:line="1084" pos:column="14">ClearError</name><parameter_list pos:line="1084" pos:column="24">()</parameter_list>						<block pos:line="1084" pos:column="73">{	<expr_stmt><expr><name pos:line="1084" pos:column="81">error</name> <op:operator pos:line="1084" pos:column="87">=</op:operator> <lit:literal type="boolean" pos:line="1084" pos:column="89">false</lit:literal></expr>;</expr_stmt> 
												<expr_stmt><expr><name pos:line="1085" pos:column="97">errorId</name> <op:operator pos:line="1085" pos:column="105">=</op:operator> <lit:literal type="number" pos:line="1085" pos:column="107">0</lit:literal></expr>;</expr_stmt> 
												<expr_stmt><expr><name pos:line="1086" pos:column="97">errorDesc</name> <op:operator pos:line="1086" pos:column="107">=</op:operator> <call><name pos:line="1086" pos:column="109">TEXT</name><argument_list pos:line="1086" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="1086" pos:column="114">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
												<expr_stmt><expr><name><name pos:line="1087" pos:column="97">errorLocation</name><op:operator pos:line="1087" pos:column="110">.</op:operator><name pos:line="1087" pos:column="111">row</name></name> <op:operator pos:line="1087" pos:column="115">=</op:operator> <name><name pos:line="1087" pos:column="117">errorLocation</name><op:operator pos:line="1087" pos:column="130">.</op:operator><name pos:line="1087" pos:column="131">col</name></name> <op:operator pos:line="1087" pos:column="135">=</op:operator> <lit:literal type="number" pos:line="1087" pos:column="137">0</lit:literal></expr>;</expr_stmt> 
												<comment type="line" pos:line="1088" pos:column="97">//errorLocation.last = 0; </comment>
											}</block></function>

	<comment type="block" format="doxygen" pos:line="1091" pos:column="9">/** Dump the document to standard out. */</comment>
	<function><type><name pos:line="1092" pos:column="9">void</name></type> <name pos:line="1092" pos:column="14">Print</name><parameter_list pos:line="1092" pos:column="19">()</parameter_list> <specifier pos:line="1092" pos:column="22">const</specifier>						<block pos:line="1092" pos:column="73">{ <expr_stmt><expr><call><name pos:line="1092" pos:column="75">Print</name><argument_list pos:line="1092" pos:column="80">( <argument><expr><name pos:line="1092" pos:column="82">stdout</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1092" pos:column="90">0</lit:literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> }</block></function>

	<comment type="line" pos:line="1094" pos:column="9">// [internal use]</comment>
	<function_decl><type><specifier pos:line="1095" pos:column="9">virtual</specifier> <name pos:line="1095" pos:column="17">void</name></type> <name pos:line="1095" pos:column="22">Print</name><parameter_list pos:line="1095" pos:column="27">( <param><decl><type><name pos:line="1095" pos:column="29">FILE</name><type:modifier pos:line="1095" pos:column="33">*</type:modifier></type> <name pos:line="1095" pos:column="35">cfile</name></decl></param>, <param><decl><type><name pos:line="1095" pos:column="42">int</name></type> <name pos:line="1095" pos:column="46">depth</name> <init pos:line="1095" pos:column="52">= <expr><lit:literal type="number" pos:line="1095" pos:column="54">0</lit:literal></expr></init></decl></param> )</parameter_list> <specifier pos:line="1095" pos:column="58">const</specifier>;</function_decl>
	<comment type="line" pos:line="1096" pos:column="9">// [internal use]</comment>
	<function_decl><type><name pos:line="1097" pos:column="9">void</name></type> <name pos:line="1097" pos:column="14">SetError</name><parameter_list pos:line="1097" pos:column="22">( <param><decl><type><name pos:line="1097" pos:column="24">int</name></type> <name pos:line="1097" pos:column="28">err</name></decl></param>, <param><decl><type><specifier pos:line="1097" pos:column="33">const</specifier> <name pos:line="1097" pos:column="39">TCHAR</name><type:modifier pos:line="1097" pos:column="44">*</type:modifier></type> <name pos:line="1097" pos:column="46">errorLocation</name></decl></param>, <param><decl><type><name pos:line="1097" pos:column="61">TiXmlParsingData</name><type:modifier pos:line="1097" pos:column="77">*</type:modifier></type> <name pos:line="1097" pos:column="79">prevData</name></decl></param> )</parameter_list>;</function_decl>

</public><protected pos:line="1099" pos:column="1">protected :
	<function_decl><type><specifier pos:line="1100" pos:column="9">virtual</specifier> <name pos:line="1100" pos:column="17">void</name></type> <name pos:line="1100" pos:column="22">StreamOut</name> <parameter_list pos:line="1100" pos:column="32">( <param><decl><type><name pos:line="1100" pos:column="34">TIXML_OSTREAM</name> <type:modifier pos:line="1100" pos:column="48">*</type:modifier></type> <name pos:line="1100" pos:column="50">out</name></decl></param>)</parameter_list> <specifier pos:line="1100" pos:column="55">const</specifier>;</function_decl>
	<comment type="line" pos:line="1101" pos:column="9">// [internal use]</comment>
	<function_decl><type><specifier pos:line="1102" pos:column="9">virtual</specifier> <name pos:line="1102" pos:column="17">TiXmlNode</name><type:modifier pos:line="1102" pos:column="26">*</type:modifier></type> <name pos:line="1102" pos:column="28">Clone</name><parameter_list pos:line="1102" pos:column="33">()</parameter_list> <specifier pos:line="1102" pos:column="36">const</specifier>;</function_decl>
	<cpp:ifdef pos:line="1103" pos:column="9">#<cpp:directive pos:line="1103" pos:column="10">ifdef</cpp:directive> <name pos:line="1103" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	    <function_decl><type><specifier pos:line="1104" pos:column="13">virtual</specifier> <name pos:line="1104" pos:column="21">void</name></type> <name pos:line="1104" pos:column="26">StreamIn</name><parameter_list pos:line="1104" pos:column="34">( <param><decl><type><name pos:line="1104" pos:column="36">TIXML_ISTREAM</name> <type:modifier pos:line="1104" pos:column="50">*</type:modifier></type> <name pos:line="1104" pos:column="52">in</name></decl></param>, <param><decl><type><name pos:line="1104" pos:column="56">TIXML_STRING</name> <type:modifier pos:line="1104" pos:column="69">*</type:modifier></type> <name pos:line="1104" pos:column="71">tag</name></decl></param> )</parameter_list>;</function_decl>
	<cpp:endif pos:line="1105" pos:column="9">#<cpp:directive pos:line="1105" pos:column="10">endif</cpp:directive></cpp:endif>

</protected><private pos:line="1107" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="1108" pos:column="9">bool</name></type> <name pos:line="1108" pos:column="14">error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1109" pos:column="9">int</name></type>  <name pos:line="1109" pos:column="14">errorId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1110" pos:column="9">TIXML_STRING</name></type> <name pos:line="1110" pos:column="22">errorDesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1111" pos:column="9">int</name></type> <name pos:line="1111" pos:column="13">tabsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1112" pos:column="9">TiXmlCursor</name></type> <name pos:line="1112" pos:column="21">errorLocation</name></decl>;</decl_stmt>
</private>}</block>;</class>


<comment type="block" format="doxygen" pos:line="1116" pos:column="1">/**
	A TiXmlHandle is a class that wraps a node pointer with null checks; this is
	an incredibly useful thing. Note that TiXmlHandle is not part of the TinyXml
	DOM structure. It is a separate utility class.

	Take an example:
	@verbatim
	&lt;Document&gt;
		&lt;Element attributeA = TEXT("valueA")&gt;
			&lt;Child attributeB = TEXT("value1") /&gt;
			&lt;Child attributeB = TEXT("value2") /&gt;
		&lt;/Element&gt;
	&lt;Document&gt;
	@endverbatim

	Assuming you want the value of "attributeB" in the 2nd "Child" element, it's very 
	easy to write a *lot* of code that looks like:

	@verbatim
	TiXmlElement* root = document.FirstChildElement( "Document" );
	if ( root )
	{
		TiXmlElement* element = root-&gt;FirstChildElement( "Element" );
		if ( element )
		{
			TiXmlElement* child = element-&gt;FirstChildElement( "Child" );
			if ( child )
			{
				TiXmlElement* child2 = child-&gt;NextSiblingElement( "Child" );
				if ( child2 )
				{
					// Finally do something useful.
	@endverbatim

	And that doesn't even cover "else" cases. TiXmlHandle addresses the verbosity
	of such code. A TiXmlHandle checks for null	pointers so it is perfectly safe 
	and correct to use:

	@verbatim
	TiXmlHandle docHandle( &amp;document );
	TiXmlElement* child2 = docHandle.FirstChild( "Document" ).FirstChild( "Element" ).Child( "Child", 1 ).Element();
	if ( child2 )
	{
		// do something useful
	@endverbatim

	Which is MUCH more concise and useful.

	It is also safe to copy handles - internally they are nothing more than node pointers.
	@verbatim
	TiXmlHandle handleCopy = handle;
	@endverbatim

	What they should not be used for is iteration:

	@verbatim
	int i=0; 
	while ( true )
	{
		TiXmlElement* child = docHandle.FirstChild( "Document" ).FirstChild( "Element" ).Child( "Child", i ).Element();
		if ( !child )
			break;
		// do something
		++i;
	}
	@endverbatim

	It seems reasonable, but it is in fact two embedded while loops. The Child method is 
	a linear walk to find the element, so this code would iterate much more than it needs 
	to. Instead, prefer:

	@verbatim
	TiXmlElement* child = docHandle.FirstChild( "Document" ).FirstChild( "Element" ).FirstChild( "Child" ).Element();

	for( child; child; child=child-&gt;NextSiblingElement() )
	{
		// do something
	}
	@endverbatim
*/</comment>
<class pos:line="1196" pos:column="1">class <name pos:line="1196" pos:column="7">TiXmlHandle</name>
<block pos:line="1197" pos:column="1">{<private type="default" pos:line="1197" pos:column="2">
</private><public pos:line="1198" pos:column="1">public:
	<comment type="line" format="doxygen" pos:line="1199" pos:column="9">/// Create a handle from any node (at any depth of the tree.) This can be a null pointer.</comment>
	<constructor><name pos:line="1200" pos:column="9">TiXmlHandle</name><parameter_list pos:line="1200" pos:column="20">( <param><decl><type><name pos:line="1200" pos:column="22">TiXmlNode</name><type:modifier pos:line="1200" pos:column="31">*</type:modifier></type> <name pos:line="1200" pos:column="33">node</name></decl></param> )</parameter_list>			<block pos:line="1200" pos:column="57">{ <expr_stmt><expr><name><name pos:line="1200" pos:column="59">this</name><op:operator pos:line="1200" pos:column="63">-&gt;</op:operator><name pos:line="1200" pos:column="65">node</name></name> <op:operator pos:line="1200" pos:column="70">=</op:operator> <name pos:line="1200" pos:column="72">node</name></expr>;</expr_stmt> }</block></constructor>
	<comment type="line" format="doxygen" pos:line="1201" pos:column="9">/// Copy constructor</comment>
	<constructor><name pos:line="1202" pos:column="9">TiXmlHandle</name><parameter_list pos:line="1202" pos:column="20">( <param><decl><type><specifier pos:line="1202" pos:column="22">const</specifier> <name pos:line="1202" pos:column="28">TiXmlHandle</name><type:modifier pos:line="1202" pos:column="39">&amp;</type:modifier></type> <name pos:line="1202" pos:column="41">ref</name></decl></param> )</parameter_list>	<block pos:line="1202" pos:column="49">{ <expr_stmt><expr><name><name pos:line="1202" pos:column="51">this</name><op:operator pos:line="1202" pos:column="55">-&gt;</op:operator><name pos:line="1202" pos:column="57">node</name></name> <op:operator pos:line="1202" pos:column="62">=</op:operator> <name><name pos:line="1202" pos:column="64">ref</name><op:operator pos:line="1202" pos:column="67">.</op:operator><name pos:line="1202" pos:column="68">node</name></name></expr>;</expr_stmt> }</block></constructor>

	<comment type="line" format="doxygen" pos:line="1204" pos:column="9">/// Return a handle to the first child node.</comment>
	<function_decl><type><name pos:line="1205" pos:column="9">TiXmlHandle</name></type> <name pos:line="1205" pos:column="21">FirstChild</name><parameter_list pos:line="1205" pos:column="31">()</parameter_list> <specifier pos:line="1205" pos:column="34">const</specifier>;</function_decl>
	<comment type="line" format="doxygen" pos:line="1206" pos:column="9">/// Return a handle to the first child node with the given name.</comment>
	<function_decl><type><name pos:line="1207" pos:column="9">TiXmlHandle</name></type> <name pos:line="1207" pos:column="21">FirstChild</name><parameter_list pos:line="1207" pos:column="31">( <param><decl><type><specifier pos:line="1207" pos:column="33">const</specifier> <name pos:line="1207" pos:column="39">TCHAR</name> <type:modifier pos:line="1207" pos:column="45">*</type:modifier></type> <name pos:line="1207" pos:column="47">value</name></decl></param> )</parameter_list> <specifier pos:line="1207" pos:column="55">const</specifier>;</function_decl>
	<comment type="line" format="doxygen" pos:line="1208" pos:column="9">/// Return a handle to the first child element.</comment>
	<function_decl><type><name pos:line="1209" pos:column="9">TiXmlHandle</name></type> <name pos:line="1209" pos:column="21">FirstChildElement</name><parameter_list pos:line="1209" pos:column="38">()</parameter_list> <specifier pos:line="1209" pos:column="41">const</specifier>;</function_decl>
	<comment type="line" format="doxygen" pos:line="1210" pos:column="9">/// Return a handle to the first child element with the given name.</comment>
	<function_decl><type><name pos:line="1211" pos:column="9">TiXmlHandle</name></type> <name pos:line="1211" pos:column="21">FirstChildElement</name><parameter_list pos:line="1211" pos:column="38">( <param><decl><type><specifier pos:line="1211" pos:column="40">const</specifier> <name pos:line="1211" pos:column="46">TCHAR</name> <type:modifier pos:line="1211" pos:column="52">*</type:modifier></type> <name pos:line="1211" pos:column="54">value</name></decl></param> )</parameter_list> <specifier pos:line="1211" pos:column="62">const</specifier>;</function_decl>

	<comment type="block" format="doxygen" pos:line="1213" pos:column="9">/** Return a handle to the "index" child with the given name. 
		The first child is 0, the second 1, etc.
	*/</comment>
	<function_decl><type><name pos:line="1216" pos:column="9">TiXmlHandle</name></type> <name pos:line="1216" pos:column="21">Child</name><parameter_list pos:line="1216" pos:column="26">( <param><decl><type><specifier pos:line="1216" pos:column="28">const</specifier> <name pos:line="1216" pos:column="34">TCHAR</name><type:modifier pos:line="1216" pos:column="39">*</type:modifier></type> <name pos:line="1216" pos:column="41">value</name></decl></param>, <param><decl><type><name pos:line="1216" pos:column="48">int</name></type> <name pos:line="1216" pos:column="52">index</name></decl></param> )</parameter_list> <specifier pos:line="1216" pos:column="60">const</specifier>;</function_decl>
	<comment type="block" format="doxygen" pos:line="1217" pos:column="9">/** Return a handle to the "index" child. 
		The first child is 0, the second 1, etc.
	*/</comment>
	<function_decl><type><name pos:line="1220" pos:column="9">TiXmlHandle</name></type> <name pos:line="1220" pos:column="21">Child</name><parameter_list pos:line="1220" pos:column="26">( <param><decl><type><name pos:line="1220" pos:column="28">int</name></type> <name pos:line="1220" pos:column="32">index</name></decl></param> )</parameter_list> <specifier pos:line="1220" pos:column="40">const</specifier>;</function_decl>
	<comment type="block" format="doxygen" pos:line="1221" pos:column="9">/** Return a handle to the "index" child element with the given name. 
		The first child element is 0, the second 1, etc. Note that only TiXmlElements
		are indexed: other types are not counted.
	*/</comment>
	<function_decl><type><name pos:line="1225" pos:column="9">TiXmlHandle</name></type> <name pos:line="1225" pos:column="21">ChildElement</name><parameter_list pos:line="1225" pos:column="33">( <param><decl><type><specifier pos:line="1225" pos:column="35">const</specifier> <name pos:line="1225" pos:column="41">TCHAR</name><type:modifier pos:line="1225" pos:column="46">*</type:modifier></type> <name pos:line="1225" pos:column="48">value</name></decl></param>, <param><decl><type><name pos:line="1225" pos:column="55">int</name></type> <name pos:line="1225" pos:column="59">index</name></decl></param> )</parameter_list> <specifier pos:line="1225" pos:column="67">const</specifier>;</function_decl>
	<comment type="block" format="doxygen" pos:line="1226" pos:column="9">/** Return a handle to the "index" child element. 
		The first child element is 0, the second 1, etc. Note that only TiXmlElements
		are indexed: other types are not counted.
	*/</comment>
	<function_decl><type><name pos:line="1230" pos:column="9">TiXmlHandle</name></type> <name pos:line="1230" pos:column="21">ChildElement</name><parameter_list pos:line="1230" pos:column="33">( <param><decl><type><name pos:line="1230" pos:column="35">int</name></type> <name pos:line="1230" pos:column="39">index</name></decl></param> )</parameter_list> <specifier pos:line="1230" pos:column="47">const</specifier>;</function_decl>

	<cpp:ifdef pos:line="1232" pos:column="9">#<cpp:directive pos:line="1232" pos:column="10">ifdef</cpp:directive> <name pos:line="1232" pos:column="16">TIXML_USE_STL</name></cpp:ifdef>
	<function><type><name pos:line="1233" pos:column="9">TiXmlHandle</name></type> <name pos:line="1233" pos:column="21">FirstChild</name><parameter_list pos:line="1233" pos:column="31">( <param><decl><type><specifier pos:line="1233" pos:column="33">const</specifier> <name pos:line="1233" pos:column="39">generic_string</name><type:modifier pos:line="1233" pos:column="53">&amp;</type:modifier></type> <name pos:line="1233" pos:column="55">_value</name></decl></param> )</parameter_list> <specifier pos:line="1233" pos:column="64">const</specifier>			<block pos:line="1233" pos:column="89">{ <return pos:line="1233" pos:column="91">return <expr><call><name pos:line="1233" pos:column="98">FirstChild</name><argument_list pos:line="1233" pos:column="108">( <argument><expr><call><name><name pos:line="1233" pos:column="110">_value</name><op:operator pos:line="1233" pos:column="116">.</op:operator><name pos:line="1233" pos:column="117">c_str</name></name><argument_list pos:line="1233" pos:column="122">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return> }</block></function>
	<function><type><name pos:line="1234" pos:column="9">TiXmlHandle</name></type> <name pos:line="1234" pos:column="21">FirstChildElement</name><parameter_list pos:line="1234" pos:column="38">( <param><decl><type><specifier pos:line="1234" pos:column="40">const</specifier> <name pos:line="1234" pos:column="46">generic_string</name><type:modifier pos:line="1234" pos:column="60">&amp;</type:modifier></type> <name pos:line="1234" pos:column="62">_value</name></decl></param> )</parameter_list> <specifier pos:line="1234" pos:column="71">const</specifier>		<block pos:line="1234" pos:column="89">{ <return pos:line="1234" pos:column="91">return <expr><call><name pos:line="1234" pos:column="98">FirstChildElement</name><argument_list pos:line="1234" pos:column="115">( <argument><expr><call><name><name pos:line="1234" pos:column="117">_value</name><op:operator pos:line="1234" pos:column="123">.</op:operator><name pos:line="1234" pos:column="124">c_str</name></name><argument_list pos:line="1234" pos:column="129">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return> }</block></function>

	<function><type><name pos:line="1236" pos:column="9">TiXmlHandle</name></type> <name pos:line="1236" pos:column="21">Child</name><parameter_list pos:line="1236" pos:column="26">( <param><decl><type><specifier pos:line="1236" pos:column="28">const</specifier> <name pos:line="1236" pos:column="34">generic_string</name><type:modifier pos:line="1236" pos:column="48">&amp;</type:modifier></type> <name pos:line="1236" pos:column="50">_value</name></decl></param>, <param><decl><type><name pos:line="1236" pos:column="58">int</name></type> <name pos:line="1236" pos:column="62">index</name></decl></param> )</parameter_list> <specifier pos:line="1236" pos:column="70">const</specifier>			<block pos:line="1236" pos:column="97">{ <return pos:line="1236" pos:column="99">return <expr><call><name pos:line="1236" pos:column="106">Child</name><argument_list pos:line="1236" pos:column="111">( <argument><expr><call><name><name pos:line="1236" pos:column="113">_value</name><op:operator pos:line="1236" pos:column="119">.</op:operator><name pos:line="1236" pos:column="120">c_str</name></name><argument_list pos:line="1236" pos:column="125">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1236" pos:column="129">index</name></expr></argument> )</argument_list></call></expr>;</return> }</block></function>
	<function><type><name pos:line="1237" pos:column="9">TiXmlHandle</name></type> <name pos:line="1237" pos:column="21">ChildElement</name><parameter_list pos:line="1237" pos:column="33">( <param><decl><type><specifier pos:line="1237" pos:column="35">const</specifier> <name pos:line="1237" pos:column="41">generic_string</name><type:modifier pos:line="1237" pos:column="55">&amp;</type:modifier></type> <name pos:line="1237" pos:column="57">_value</name></decl></param>, <param><decl><type><name pos:line="1237" pos:column="65">int</name></type> <name pos:line="1237" pos:column="69">index</name></decl></param> )</parameter_list> <specifier pos:line="1237" pos:column="77">const</specifier>	<block pos:line="1237" pos:column="89">{ <return pos:line="1237" pos:column="91">return <expr><call><name pos:line="1237" pos:column="98">ChildElement</name><argument_list pos:line="1237" pos:column="110">( <argument><expr><call><name><name pos:line="1237" pos:column="112">_value</name><op:operator pos:line="1237" pos:column="118">.</op:operator><name pos:line="1237" pos:column="119">c_str</name></name><argument_list pos:line="1237" pos:column="124">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1237" pos:column="128">index</name></expr></argument> )</argument_list></call></expr>;</return> }</block></function>
	<cpp:endif pos:line="1238" pos:column="9">#<cpp:directive pos:line="1238" pos:column="10">endif</cpp:directive></cpp:endif>

	<comment type="line" format="doxygen" pos:line="1240" pos:column="9">/// Return the handle as a TiXmlNode. This may return null.</comment>
	<function><type><name pos:line="1241" pos:column="9">TiXmlNode</name><type:modifier pos:line="1241" pos:column="18">*</type:modifier></type> <name pos:line="1241" pos:column="20">Node</name><parameter_list pos:line="1241" pos:column="24">()</parameter_list> <specifier pos:line="1241" pos:column="27">const</specifier>			<block pos:line="1241" pos:column="49">{ <return pos:line="1241" pos:column="51">return <expr><name pos:line="1241" pos:column="58">node</name></expr>;</return> }</block></function> 
	<comment type="line" format="doxygen" pos:line="1242" pos:column="9">/// Return the handle as a TiXmlElement. This may return null.</comment>
	<function><type><name pos:line="1243" pos:column="9">TiXmlElement</name><type:modifier pos:line="1243" pos:column="21">*</type:modifier></type> <name pos:line="1243" pos:column="23">Element</name><parameter_list pos:line="1243" pos:column="30">()</parameter_list> <specifier pos:line="1243" pos:column="33">const</specifier>	<block pos:line="1243" pos:column="41">{ <return pos:line="1243" pos:column="43">return <expr><op:operator pos:line="1243" pos:column="50">(</op:operator> <op:operator pos:line="1243" pos:column="52">(</op:operator> <name pos:line="1243" pos:column="54">node</name> <op:operator pos:line="1243" pos:column="59">&amp;&amp;</op:operator> <call><name><name pos:line="1243" pos:column="62">node</name><op:operator pos:line="1243" pos:column="66">-&gt;</op:operator><name pos:line="1243" pos:column="68">ToElement</name></name><argument_list pos:line="1243" pos:column="77">()</argument_list></call> <op:operator pos:line="1243" pos:column="80">)</op:operator> <op:operator pos:line="1243" pos:column="82">?</op:operator> <call><name><name pos:line="1243" pos:column="84">node</name><op:operator pos:line="1243" pos:column="88">-&gt;</op:operator><name pos:line="1243" pos:column="90">ToElement</name></name><argument_list pos:line="1243" pos:column="99">()</argument_list></call> <op:operator pos:line="1243" pos:column="102">:</op:operator> <lit:literal type="number" pos:line="1243" pos:column="104">0</lit:literal> <op:operator pos:line="1243" pos:column="106">)</op:operator></expr>;</return> }</block></function>
	<comment type="line" format="doxygen" pos:line="1244" pos:column="9">/// Return the handle as a TiXmlText. This may return null.</comment>
	<function><type><name pos:line="1245" pos:column="9">TiXmlText</name><type:modifier pos:line="1245" pos:column="18">*</type:modifier></type> <name pos:line="1245" pos:column="20">Text</name><parameter_list pos:line="1245" pos:column="24">()</parameter_list> <specifier pos:line="1245" pos:column="27">const</specifier>			<block pos:line="1245" pos:column="49">{ <return pos:line="1245" pos:column="51">return <expr><op:operator pos:line="1245" pos:column="58">(</op:operator> <op:operator pos:line="1245" pos:column="60">(</op:operator> <name pos:line="1245" pos:column="62">node</name> <op:operator pos:line="1245" pos:column="67">&amp;&amp;</op:operator> <call><name><name pos:line="1245" pos:column="70">node</name><op:operator pos:line="1245" pos:column="74">-&gt;</op:operator><name pos:line="1245" pos:column="76">ToText</name></name><argument_list pos:line="1245" pos:column="82">()</argument_list></call> <op:operator pos:line="1245" pos:column="85">)</op:operator> <op:operator pos:line="1245" pos:column="87">?</op:operator> <call><name><name pos:line="1245" pos:column="89">node</name><op:operator pos:line="1245" pos:column="93">-&gt;</op:operator><name pos:line="1245" pos:column="95">ToText</name></name><argument_list pos:line="1245" pos:column="101">()</argument_list></call> <op:operator pos:line="1245" pos:column="104">:</op:operator> <lit:literal type="number" pos:line="1245" pos:column="106">0</lit:literal> <op:operator pos:line="1245" pos:column="108">)</op:operator></expr>;</return> }</block></function>

</public><private pos:line="1247" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="1248" pos:column="9">TiXmlNode</name><type:modifier pos:line="1248" pos:column="18">*</type:modifier></type> <name pos:line="1248" pos:column="20">node</name></decl>;</decl_stmt>
</private>}</block>;</class>


<cpp:endif pos:line="1252" pos:column="1">#<cpp:directive pos:line="1252" pos:column="2">endif</cpp:directive></cpp:endif>

</unit>
