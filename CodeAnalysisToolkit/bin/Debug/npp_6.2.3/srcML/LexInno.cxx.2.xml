<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexInno.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexInno.cxx
 ** Lexer for Inno Setup scripts.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Written by Friedrich Vedder &lt;fvedd@t-online.de&gt;, using code from LexOthers.cxx.</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="30" pos:column="1">static</specifier> <name pos:line="30" pos:column="8">void</name></type> <name pos:line="30" pos:column="13">ColouriseInnoDoc</name><parameter_list pos:line="30" pos:column="29">(<param><decl><type><name pos:line="30" pos:column="30">unsigned</name> <name pos:line="30" pos:column="39">int</name></type> <name pos:line="30" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="30" pos:column="53">int</name></type> <name pos:line="30" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="30" pos:column="65">int</name></type></decl></param>, <param><decl><type><name pos:line="30" pos:column="70">WordList</name> <type:modifier pos:line="30" pos:column="79">*</type:modifier></type><name><name pos:line="30" pos:column="80">keywordLists</name><index pos:line="30" pos:column="92">[]</index></name></decl></param>, <param><decl><type><name pos:line="30" pos:column="96">Accessor</name> <type:modifier pos:line="30" pos:column="105">&amp;</type:modifier></type><name pos:line="30" pos:column="106">styler</name></decl></param>)</parameter_list> <block pos:line="30" pos:column="114">{
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">int</name></type> <name pos:line="31" pos:column="13">state</name> <init pos:line="31" pos:column="19">= <expr><name pos:line="31" pos:column="21">SCE_INNO_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="32" pos:column="9">char</name></type> <name pos:line="32" pos:column="14">chPrev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">char</name></type> <name pos:line="33" pos:column="14">ch</name> <init pos:line="33" pos:column="17">= <expr><lit:literal type="number" pos:line="33" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">char</name></type> <name pos:line="34" pos:column="14">chNext</name> <init pos:line="34" pos:column="21">= <expr><name><name pos:line="34" pos:column="23">styler</name><index pos:line="34" pos:column="29">[<expr><name pos:line="34" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">int</name></type> <name pos:line="35" pos:column="13">lengthDoc</name> <init pos:line="35" pos:column="23">= <expr><name pos:line="35" pos:column="25">startPos</name> <op:operator pos:line="35" pos:column="34">+</op:operator> <name pos:line="35" pos:column="36">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">char</name> <type:modifier pos:line="36" pos:column="14">*</type:modifier></type><name pos:line="36" pos:column="15">buffer</name> <init pos:line="36" pos:column="22">= <expr><op:operator pos:line="36" pos:column="24">new</op:operator> <name><name pos:line="36" pos:column="28">char</name><index pos:line="36" pos:column="32">[<expr><name pos:line="36" pos:column="33">length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="37" pos:column="9">int</name></type> <name pos:line="37" pos:column="13">bufferCount</name> <init pos:line="37" pos:column="25">= <expr><lit:literal type="number" pos:line="37" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="38" pos:column="9">bool</name></type> <name pos:line="38" pos:column="14">isBOL</name></decl><op:operator pos:line="38" pos:column="19">,</op:operator> <decl><type ref="prev"/><name pos:line="38" pos:column="21">isEOL</name></decl><op:operator pos:line="38" pos:column="26">,</op:operator> <decl><type ref="prev"/><name pos:line="38" pos:column="28">isWS</name></decl><op:operator pos:line="38" pos:column="32">,</op:operator> <decl><type ref="prev"/><name pos:line="38" pos:column="34">isBOLWS</name> <init pos:line="38" pos:column="42">= <expr><lit:literal type="number" pos:line="38" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">bool</name></type> <name pos:line="39" pos:column="14">isCStyleComment</name> <init pos:line="39" pos:column="30">= <expr><lit:literal type="boolean" pos:line="39" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="41" pos:column="9">WordList</name> <type:modifier pos:line="41" pos:column="18">&amp;</type:modifier></type><name pos:line="41" pos:column="19">sectionKeywords</name> <init pos:line="41" pos:column="35">= <expr><op:operator pos:line="41" pos:column="37">*</op:operator><name><name pos:line="41" pos:column="38">keywordLists</name><index pos:line="41" pos:column="50">[<expr><lit:literal type="number" pos:line="41" pos:column="51">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">WordList</name> <type:modifier pos:line="42" pos:column="18">&amp;</type:modifier></type><name pos:line="42" pos:column="19">standardKeywords</name> <init pos:line="42" pos:column="36">= <expr><op:operator pos:line="42" pos:column="38">*</op:operator><name><name pos:line="42" pos:column="39">keywordLists</name><index pos:line="42" pos:column="51">[<expr><lit:literal type="number" pos:line="42" pos:column="52">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">WordList</name> <type:modifier pos:line="43" pos:column="18">&amp;</type:modifier></type><name pos:line="43" pos:column="19">parameterKeywords</name> <init pos:line="43" pos:column="37">= <expr><op:operator pos:line="43" pos:column="39">*</op:operator><name><name pos:line="43" pos:column="40">keywordLists</name><index pos:line="43" pos:column="52">[<expr><lit:literal type="number" pos:line="43" pos:column="53">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="44" pos:column="9">WordList</name> <type:modifier pos:line="44" pos:column="18">&amp;</type:modifier></type><name pos:line="44" pos:column="19">preprocessorKeywords</name> <init pos:line="44" pos:column="40">= <expr><op:operator pos:line="44" pos:column="42">*</op:operator><name><name pos:line="44" pos:column="43">keywordLists</name><index pos:line="44" pos:column="55">[<expr><lit:literal type="number" pos:line="44" pos:column="56">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">WordList</name> <type:modifier pos:line="45" pos:column="18">&amp;</type:modifier></type><name pos:line="45" pos:column="19">pascalKeywords</name> <init pos:line="45" pos:column="34">= <expr><op:operator pos:line="45" pos:column="36">*</op:operator><name><name pos:line="45" pos:column="37">keywordLists</name><index pos:line="45" pos:column="49">[<expr><lit:literal type="number" pos:line="45" pos:column="50">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">WordList</name> <type:modifier pos:line="46" pos:column="18">&amp;</type:modifier></type><name pos:line="46" pos:column="19">userKeywords</name> <init pos:line="46" pos:column="32">= <expr><op:operator pos:line="46" pos:column="34">*</op:operator><name><name pos:line="46" pos:column="35">keywordLists</name><index pos:line="46" pos:column="47">[<expr><lit:literal type="number" pos:line="46" pos:column="48">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="48" pos:column="9">int</name></type> <name pos:line="48" pos:column="13">curLine</name> <init pos:line="48" pos:column="21">= <expr><call><name><name pos:line="48" pos:column="23">styler</name><op:operator pos:line="48" pos:column="29">.</op:operator><name pos:line="48" pos:column="30">GetLine</name></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name pos:line="48" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="49" pos:column="9">int</name></type> <name pos:line="49" pos:column="13">curLineState</name> <init pos:line="49" pos:column="26">= <expr><name pos:line="49" pos:column="28">curLine</name> <op:operator pos:line="49" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="49" pos:column="38">0</lit:literal> <op:operator pos:line="49" pos:column="40">?</op:operator> <call><name><name pos:line="49" pos:column="42">styler</name><op:operator pos:line="49" pos:column="48">.</op:operator><name pos:line="49" pos:column="49">GetLineState</name></name><argument_list pos:line="49" pos:column="61">(<argument><expr><name pos:line="49" pos:column="62">curLine</name> <op:operator pos:line="49" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="49" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="49" pos:column="75">:</op:operator> <lit:literal type="number" pos:line="49" pos:column="77">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="50" pos:column="9">bool</name></type> <name pos:line="50" pos:column="14">isCode</name> <init pos:line="50" pos:column="21">= <expr><op:operator pos:line="50" pos:column="23">(</op:operator><name pos:line="50" pos:column="24">curLineState</name> <op:operator pos:line="50" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="50" pos:column="40">1</lit:literal><op:operator pos:line="50" pos:column="41">)</op:operator></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="52" pos:column="9">// Go through all provided text segment</comment>
	<comment type="line" pos:line="53" pos:column="9">// using the hand-written state machine shown below</comment>
	<expr_stmt><expr><call><name><name pos:line="54" pos:column="9">styler</name><op:operator pos:line="54" pos:column="15">.</op:operator><name pos:line="54" pos:column="16">StartAt</name></name><argument_list pos:line="54" pos:column="23">(<argument><expr><name pos:line="54" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="55" pos:column="9">styler</name><op:operator pos:line="55" pos:column="15">.</op:operator><name pos:line="55" pos:column="16">StartSegment</name></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="56" pos:column="9">for (<init><decl><type><name pos:line="56" pos:column="14">int</name></type> <name pos:line="56" pos:column="18">i</name> <init pos:line="56" pos:column="20">= <expr><name pos:line="56" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="56" pos:column="32">i</name> <op:operator pos:line="56" pos:column="34">&lt;</op:operator> <name pos:line="56" pos:column="36">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="56" pos:column="47">i</name><op:operator pos:line="56" pos:column="48">++</op:operator></expr></incr>) <block pos:line="56" pos:column="52">{
		<expr_stmt><expr><name pos:line="57" pos:column="17">chPrev</name> <op:operator pos:line="57" pos:column="24">=</op:operator> <name pos:line="57" pos:column="26">ch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">ch</name> <op:operator pos:line="58" pos:column="20">=</op:operator> <name pos:line="58" pos:column="22">chNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="59" pos:column="17">chNext</name> <op:operator pos:line="59" pos:column="24">=</op:operator> <call><name><name pos:line="59" pos:column="26">styler</name><op:operator pos:line="59" pos:column="32">.</op:operator><name pos:line="59" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="59" pos:column="46">(<argument><expr><name pos:line="59" pos:column="47">i</name> <op:operator pos:line="59" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="59" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><call><name><name pos:line="61" pos:column="21">styler</name><op:operator pos:line="61" pos:column="27">.</op:operator><name pos:line="61" pos:column="28">IsLeadByte</name></name><argument_list pos:line="61" pos:column="38">(<argument><expr><name pos:line="61" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="61" pos:column="43"> <block pos:line="61" pos:column="44">{
			<expr_stmt><expr><name pos:line="62" pos:column="25">chNext</name> <op:operator pos:line="62" pos:column="32">=</op:operator> <call><name><name pos:line="62" pos:column="34">styler</name><op:operator pos:line="62" pos:column="40">.</op:operator><name pos:line="62" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="62" pos:column="54">(<argument><expr><name pos:line="62" pos:column="55">i</name> <op:operator pos:line="62" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="62" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="63" pos:column="25">i</name><op:operator pos:line="63" pos:column="26">++</op:operator></expr>;</expr_stmt>
			<continue pos:line="64" pos:column="25">continue;</continue>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="67" pos:column="17">isBOL</name> <op:operator pos:line="67" pos:column="23">=</op:operator> <op:operator pos:line="67" pos:column="25">(</op:operator><name pos:line="67" pos:column="26">chPrev</name> <op:operator pos:line="67" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="67" pos:column="36">0</lit:literal><op:operator pos:line="67" pos:column="37">)</op:operator> <op:operator pos:line="67" pos:column="39">||</op:operator> <op:operator pos:line="67" pos:column="42">(</op:operator><name pos:line="67" pos:column="43">chPrev</name> <op:operator pos:line="67" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="53">'\n'</lit:literal><op:operator pos:line="67" pos:column="57">)</op:operator> <op:operator pos:line="67" pos:column="59">||</op:operator> <op:operator pos:line="67" pos:column="62">(</op:operator><name pos:line="67" pos:column="63">chPrev</name> <op:operator pos:line="67" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="73">'\r'</lit:literal> <op:operator pos:line="67" pos:column="78">&amp;&amp;</op:operator> <name pos:line="67" pos:column="81">ch</name> <op:operator pos:line="67" pos:column="84">!=</op:operator> <lit:literal type="char" pos:line="67" pos:column="87">'\n'</lit:literal><op:operator pos:line="67" pos:column="91">)</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="68" pos:column="17">isBOLWS</name> <op:operator pos:line="68" pos:column="25">=</op:operator> <op:operator pos:line="68" pos:column="27">(</op:operator><name pos:line="68" pos:column="28">isBOL</name><op:operator pos:line="68" pos:column="33">)</op:operator> <op:operator pos:line="68" pos:column="35">?</op:operator> <lit:literal type="number" pos:line="68" pos:column="37">1</lit:literal> <op:operator pos:line="68" pos:column="39">:</op:operator> <op:operator pos:line="68" pos:column="41">(</op:operator><name pos:line="68" pos:column="42">isBOLWS</name> <op:operator pos:line="68" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="68" pos:column="53">(</op:operator><name pos:line="68" pos:column="54">chPrev</name> <op:operator pos:line="68" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="68" pos:column="64">' '</lit:literal> <op:operator pos:line="68" pos:column="68">||</op:operator> <name pos:line="68" pos:column="71">chPrev</name> <op:operator pos:line="68" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="68" pos:column="81">'\t'</lit:literal><op:operator pos:line="68" pos:column="85">)</op:operator><op:operator pos:line="68" pos:column="86">)</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="69" pos:column="17">isEOL</name> <op:operator pos:line="69" pos:column="23">=</op:operator> <op:operator pos:line="69" pos:column="25">(</op:operator><name pos:line="69" pos:column="26">ch</name> <op:operator pos:line="69" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="69" pos:column="32">'\n'</lit:literal> <op:operator pos:line="69" pos:column="37">||</op:operator> <name pos:line="69" pos:column="40">ch</name> <op:operator pos:line="69" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="69" pos:column="46">'\r'</lit:literal><op:operator pos:line="69" pos:column="50">)</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="70" pos:column="17">isWS</name> <op:operator pos:line="70" pos:column="22">=</op:operator> <op:operator pos:line="70" pos:column="24">(</op:operator><name pos:line="70" pos:column="25">ch</name> <op:operator pos:line="70" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="31">' '</lit:literal> <op:operator pos:line="70" pos:column="35">||</op:operator> <name pos:line="70" pos:column="38">ch</name> <op:operator pos:line="70" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="44">'\t'</lit:literal><op:operator pos:line="70" pos:column="48">)</op:operator></expr>;</expr_stmt>

		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><op:operator pos:line="72" pos:column="21">(</op:operator><name pos:line="72" pos:column="22">ch</name> <op:operator pos:line="72" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="72" pos:column="28">'\r'</lit:literal> <op:operator pos:line="72" pos:column="33">&amp;&amp;</op:operator> <name pos:line="72" pos:column="36">chNext</name> <op:operator pos:line="72" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="72" pos:column="46">'\n'</lit:literal><op:operator pos:line="72" pos:column="50">)</op:operator> <op:operator pos:line="72" pos:column="52">||</op:operator> <op:operator pos:line="72" pos:column="55">(</op:operator><name pos:line="72" pos:column="56">ch</name> <op:operator pos:line="72" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="72" pos:column="62">'\n'</lit:literal><op:operator pos:line="72" pos:column="66">)</op:operator></expr>)</condition><then pos:line="72" pos:column="68"> <block pos:line="72" pos:column="69">{
			<comment type="line" pos:line="73" pos:column="25">// Remember the line state for future incremental lexing</comment>
			<expr_stmt><expr><name pos:line="74" pos:column="25">curLine</name> <op:operator pos:line="74" pos:column="33">=</op:operator> <call><name><name pos:line="74" pos:column="35">styler</name><op:operator pos:line="74" pos:column="41">.</op:operator><name pos:line="74" pos:column="42">GetLine</name></name><argument_list pos:line="74" pos:column="49">(<argument><expr><name pos:line="74" pos:column="50">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="75" pos:column="25">styler</name><op:operator pos:line="75" pos:column="31">.</op:operator><name pos:line="75" pos:column="32">SetLineState</name></name><argument_list pos:line="75" pos:column="44">(<argument><expr><name pos:line="75" pos:column="45">curLine</name></expr></argument>, <argument><expr><op:operator pos:line="75" pos:column="54">(</op:operator><name pos:line="75" pos:column="55">isCode</name> <op:operator pos:line="75" pos:column="62">?</op:operator> <lit:literal type="number" pos:line="75" pos:column="64">1</lit:literal> <op:operator pos:line="75" pos:column="66">:</op:operator> <lit:literal type="number" pos:line="75" pos:column="68">0</lit:literal><op:operator pos:line="75" pos:column="69">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<switch pos:line="78" pos:column="17">switch<condition pos:line="78" pos:column="23">(<expr><name pos:line="78" pos:column="24">state</name></expr>)</condition> <block pos:line="78" pos:column="31">{
			<case pos:line="79" pos:column="25">case <expr><name pos:line="79" pos:column="30">SCE_INNO_DEFAULT</name></expr>:
				<if pos:line="80" pos:column="33">if <condition pos:line="80" pos:column="36">(<expr><op:operator pos:line="80" pos:column="37">!</op:operator><name pos:line="80" pos:column="38">isCode</name> <op:operator pos:line="80" pos:column="45">&amp;&amp;</op:operator> <name pos:line="80" pos:column="48">ch</name> <op:operator pos:line="80" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="80" pos:column="54">';'</lit:literal> <op:operator pos:line="80" pos:column="58">&amp;&amp;</op:operator> <name pos:line="80" pos:column="61">isBOLWS</name></expr>)</condition><then pos:line="80" pos:column="69"> <block pos:line="80" pos:column="70">{
					<comment type="line" pos:line="81" pos:column="41">// Start of a comment</comment>
					<expr_stmt><expr><name pos:line="82" pos:column="41">state</name> <op:operator pos:line="82" pos:column="47">=</op:operator> <name pos:line="82" pos:column="49">SCE_INNO_COMMENT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="83" pos:column="35">else <if pos:line="83" pos:column="40">if <condition pos:line="83" pos:column="43">(<expr><name pos:line="83" pos:column="44">ch</name> <op:operator pos:line="83" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="83" pos:column="50">'['</lit:literal> <op:operator pos:line="83" pos:column="54">&amp;&amp;</op:operator> <name pos:line="83" pos:column="57">isBOLWS</name></expr>)</condition><then pos:line="83" pos:column="65"> <block pos:line="83" pos:column="66">{
					<comment type="line" pos:line="84" pos:column="41">// Start of a section name</comment>
					<expr_stmt><expr><name pos:line="85" pos:column="41">bufferCount</name> <op:operator pos:line="85" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="85" pos:column="55">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="86" pos:column="41">state</name> <op:operator pos:line="86" pos:column="47">=</op:operator> <name pos:line="86" pos:column="49">SCE_INNO_SECTION</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="87" pos:column="35">else <if pos:line="87" pos:column="40">if <condition pos:line="87" pos:column="43">(<expr><name pos:line="87" pos:column="44">ch</name> <op:operator pos:line="87" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="87" pos:column="50">'#'</lit:literal> <op:operator pos:line="87" pos:column="54">&amp;&amp;</op:operator> <name pos:line="87" pos:column="57">isBOLWS</name></expr>)</condition><then pos:line="87" pos:column="65"> <block pos:line="87" pos:column="66">{
					<comment type="line" pos:line="88" pos:column="41">// Start of a preprocessor directive</comment>
					<expr_stmt><expr><name pos:line="89" pos:column="41">state</name> <op:operator pos:line="89" pos:column="47">=</op:operator> <name pos:line="89" pos:column="49">SCE_INNO_PREPROC</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="90" pos:column="35">else <if pos:line="90" pos:column="40">if <condition pos:line="90" pos:column="43">(<expr><op:operator pos:line="90" pos:column="44">!</op:operator><name pos:line="90" pos:column="45">isCode</name> <op:operator pos:line="90" pos:column="52">&amp;&amp;</op:operator> <name pos:line="90" pos:column="55">ch</name> <op:operator pos:line="90" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="90" pos:column="61">'{'</lit:literal> <op:operator pos:line="90" pos:column="65">&amp;&amp;</op:operator> <name pos:line="90" pos:column="68">chNext</name> <op:operator pos:line="90" pos:column="75">!=</op:operator> <lit:literal type="char" pos:line="90" pos:column="78">'{'</lit:literal> <op:operator pos:line="90" pos:column="82">&amp;&amp;</op:operator> <name pos:line="90" pos:column="85">chPrev</name> <op:operator pos:line="90" pos:column="92">!=</op:operator> <lit:literal type="char" pos:line="90" pos:column="95">'{'</lit:literal></expr>)</condition><then pos:line="90" pos:column="99"> <block pos:line="90" pos:column="100">{
					<comment type="line" pos:line="91" pos:column="41">// Start of an inline expansion</comment>
					<expr_stmt><expr><name pos:line="92" pos:column="41">state</name> <op:operator pos:line="92" pos:column="47">=</op:operator> <name pos:line="92" pos:column="49">SCE_INNO_INLINE_EXPANSION</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="93" pos:column="35">else <if pos:line="93" pos:column="40">if <condition pos:line="93" pos:column="43">(<expr><name pos:line="93" pos:column="44">isCode</name> <op:operator pos:line="93" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="93" pos:column="54">(</op:operator><name pos:line="93" pos:column="55">ch</name> <op:operator pos:line="93" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="61">'{'</lit:literal> <op:operator pos:line="93" pos:column="65">||</op:operator> <op:operator pos:line="93" pos:column="68">(</op:operator><name pos:line="93" pos:column="69">ch</name> <op:operator pos:line="93" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="75">'('</lit:literal> <op:operator pos:line="93" pos:column="79">&amp;&amp;</op:operator> <name pos:line="93" pos:column="82">chNext</name> <op:operator pos:line="93" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="92">'*'</lit:literal><op:operator pos:line="93" pos:column="95">)</op:operator><op:operator pos:line="93" pos:column="96">)</op:operator></expr>)</condition><then pos:line="93" pos:column="98"> <block pos:line="93" pos:column="99">{
					<comment type="line" pos:line="94" pos:column="41">// Start of a Pascal comment</comment>
					<expr_stmt><expr><name pos:line="95" pos:column="41">state</name> <op:operator pos:line="95" pos:column="47">=</op:operator> <name pos:line="95" pos:column="49">SCE_INNO_COMMENT_PASCAL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="96" pos:column="41">isCStyleComment</name> <op:operator pos:line="96" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="96" pos:column="59">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="97" pos:column="35">else <if pos:line="97" pos:column="40">if <condition pos:line="97" pos:column="43">(<expr><name pos:line="97" pos:column="44">isCode</name> <op:operator pos:line="97" pos:column="51">&amp;&amp;</op:operator> <name pos:line="97" pos:column="54">ch</name> <op:operator pos:line="97" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="60">'/'</lit:literal> <op:operator pos:line="97" pos:column="64">&amp;&amp;</op:operator> <name pos:line="97" pos:column="67">chNext</name> <op:operator pos:line="97" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="97" pos:column="77">'/'</lit:literal></expr>)</condition><then pos:line="97" pos:column="81"> <block pos:line="97" pos:column="82">{
					<comment type="line" pos:line="98" pos:column="41">// Apparently, C-style comments are legal, too</comment>
					<expr_stmt><expr><name pos:line="99" pos:column="41">state</name> <op:operator pos:line="99" pos:column="47">=</op:operator> <name pos:line="99" pos:column="49">SCE_INNO_COMMENT_PASCAL</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="100" pos:column="41">isCStyleComment</name> <op:operator pos:line="100" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="100" pos:column="59">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="101" pos:column="35">else <if pos:line="101" pos:column="40">if <condition pos:line="101" pos:column="43">(<expr><name pos:line="101" pos:column="44">ch</name> <op:operator pos:line="101" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="101" pos:column="50">'"'</lit:literal></expr>)</condition><then pos:line="101" pos:column="54"> <block pos:line="101" pos:column="55">{
					<comment type="line" pos:line="102" pos:column="41">// Start of a double-quote string</comment>
					<expr_stmt><expr><name pos:line="103" pos:column="41">state</name> <op:operator pos:line="103" pos:column="47">=</op:operator> <name pos:line="103" pos:column="49">SCE_INNO_STRING_DOUBLE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="104" pos:column="35">else <if pos:line="104" pos:column="40">if <condition pos:line="104" pos:column="43">(<expr><name pos:line="104" pos:column="44">ch</name> <op:operator pos:line="104" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="50">'\''</lit:literal></expr>)</condition><then pos:line="104" pos:column="55"> <block pos:line="104" pos:column="56">{
					<comment type="line" pos:line="105" pos:column="41">// Start of a single-quote string</comment>
					<expr_stmt><expr><name pos:line="106" pos:column="41">state</name> <op:operator pos:line="106" pos:column="47">=</op:operator> <name pos:line="106" pos:column="49">SCE_INNO_STRING_SINGLE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="107" pos:column="35">else <if pos:line="107" pos:column="40">if <condition pos:line="107" pos:column="43">(<expr><call><name pos:line="107" pos:column="44">isascii</name><argument_list pos:line="107" pos:column="51">(<argument><expr><name pos:line="107" pos:column="52">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="107" pos:column="59">(</op:operator><call><name pos:line="107" pos:column="60">isalpha</name><argument_list pos:line="107" pos:column="67">(<argument><expr><name pos:line="107" pos:column="68">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="107" pos:column="72">||</op:operator> <op:operator pos:line="107" pos:column="75">(</op:operator><name pos:line="107" pos:column="76">ch</name> <op:operator pos:line="107" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="82">'_'</lit:literal><op:operator pos:line="107" pos:column="85">)</op:operator><op:operator pos:line="107" pos:column="86">)</op:operator></expr>)</condition><then pos:line="107" pos:column="88"> <block pos:line="107" pos:column="89">{
					<comment type="line" pos:line="108" pos:column="41">// Start of an identifier</comment>
					<expr_stmt><expr><name pos:line="109" pos:column="41">bufferCount</name> <op:operator pos:line="109" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="109" pos:column="55">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="110" pos:column="41">buffer</name><index pos:line="110" pos:column="47">[<expr><name pos:line="110" pos:column="48">bufferCount</name><op:operator pos:line="110" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="110" pos:column="63">=</op:operator> <call><name><name pos:line="110" pos:column="65">static_cast</name><argument_list pos:line="110" pos:column="76">&lt;<argument><expr><name pos:line="110" pos:column="77">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="110" pos:column="82">(<argument><expr><call><name pos:line="110" pos:column="83">tolower</name><argument_list pos:line="110" pos:column="90">(<argument><expr><name pos:line="110" pos:column="91">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="111" pos:column="41">state</name> <op:operator pos:line="111" pos:column="47">=</op:operator> <name pos:line="111" pos:column="49">SCE_INNO_IDENTIFIER</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="112" pos:column="35">else <block pos:line="112" pos:column="40">{
					<comment type="line" pos:line="113" pos:column="41">// Style it the default style</comment>
					<expr_stmt><expr><call><name><name pos:line="114" pos:column="41">styler</name><op:operator pos:line="114" pos:column="47">.</op:operator><name pos:line="114" pos:column="48">ColourTo</name></name><argument_list pos:line="114" pos:column="56">(<argument><expr><name pos:line="114" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="114" pos:column="59">SCE_INNO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<break pos:line="116" pos:column="33">break;</break>

			</case><case pos:line="118" pos:column="25">case <expr><name pos:line="118" pos:column="30">SCE_INNO_COMMENT</name></expr>:
				<if pos:line="119" pos:column="33">if <condition pos:line="119" pos:column="36">(<expr><name pos:line="119" pos:column="37">isEOL</name></expr>)</condition><then pos:line="119" pos:column="43"> <block pos:line="119" pos:column="44">{
					<expr_stmt><expr><name pos:line="120" pos:column="41">state</name> <op:operator pos:line="120" pos:column="47">=</op:operator> <name pos:line="120" pos:column="49">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="121" pos:column="41">styler</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">ColourTo</name></name><argument_list pos:line="121" pos:column="56">(<argument><expr><name pos:line="121" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="121" pos:column="59">SCE_INNO_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="123" pos:column="33">break;</break>

			</case><case pos:line="125" pos:column="25">case <expr><name pos:line="125" pos:column="30">SCE_INNO_IDENTIFIER</name></expr>:
				<if pos:line="126" pos:column="33">if <condition pos:line="126" pos:column="36">(<expr><call><name pos:line="126" pos:column="37">isascii</name><argument_list pos:line="126" pos:column="44">(<argument><expr><name pos:line="126" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="126" pos:column="52">(</op:operator><call><name pos:line="126" pos:column="53">isalnum</name><argument_list pos:line="126" pos:column="60">(<argument><expr><name pos:line="126" pos:column="61">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="65">||</op:operator> <op:operator pos:line="126" pos:column="68">(</op:operator><name pos:line="126" pos:column="69">ch</name> <op:operator pos:line="126" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="75">'_'</lit:literal><op:operator pos:line="126" pos:column="78">)</op:operator><op:operator pos:line="126" pos:column="79">)</op:operator></expr>)</condition><then pos:line="126" pos:column="81"> <block pos:line="126" pos:column="82">{
					<expr_stmt><expr><name><name pos:line="127" pos:column="41">buffer</name><index pos:line="127" pos:column="47">[<expr><name pos:line="127" pos:column="48">bufferCount</name><op:operator pos:line="127" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="127" pos:column="63">=</op:operator> <call><name><name pos:line="127" pos:column="65">static_cast</name><argument_list pos:line="127" pos:column="76">&lt;<argument><expr><name pos:line="127" pos:column="77">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="127" pos:column="82">(<argument><expr><call><name pos:line="127" pos:column="83">tolower</name><argument_list pos:line="127" pos:column="90">(<argument><expr><name pos:line="127" pos:column="91">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="128" pos:column="35">else <block pos:line="128" pos:column="40">{
					<expr_stmt><expr><name pos:line="129" pos:column="41">state</name> <op:operator pos:line="129" pos:column="47">=</op:operator> <name pos:line="129" pos:column="49">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="130" pos:column="41">buffer</name><index pos:line="130" pos:column="47">[<expr><name pos:line="130" pos:column="48">bufferCount</name></expr>]</index></name> <op:operator pos:line="130" pos:column="61">=</op:operator> <lit:literal type="char" pos:line="130" pos:column="63">'\0'</lit:literal></expr>;</expr_stmt>

					<comment type="line" pos:line="132" pos:column="41">// Check if the buffer contains a keyword</comment>
					<if pos:line="133" pos:column="41">if <condition pos:line="133" pos:column="44">(<expr><op:operator pos:line="133" pos:column="45">!</op:operator><name pos:line="133" pos:column="46">isCode</name> <op:operator pos:line="133" pos:column="53">&amp;&amp;</op:operator> <call><name><name pos:line="133" pos:column="56">standardKeywords</name><op:operator pos:line="133" pos:column="72">.</op:operator><name pos:line="133" pos:column="73">InList</name></name><argument_list pos:line="133" pos:column="79">(<argument><expr><name pos:line="133" pos:column="80">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="133" pos:column="88"> <block pos:line="133" pos:column="89">{
						<expr_stmt><expr><call><name><name pos:line="134" pos:column="49">styler</name><op:operator pos:line="134" pos:column="55">.</op:operator><name pos:line="134" pos:column="56">ColourTo</name></name><argument_list pos:line="134" pos:column="64">(<argument><expr><name pos:line="134" pos:column="65">i</name><op:operator pos:line="134" pos:column="66">-</op:operator><lit:literal type="number" pos:line="134" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="134" pos:column="69">SCE_INNO_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="135" pos:column="43">else <if pos:line="135" pos:column="48">if <condition pos:line="135" pos:column="51">(<expr><op:operator pos:line="135" pos:column="52">!</op:operator><name pos:line="135" pos:column="53">isCode</name> <op:operator pos:line="135" pos:column="60">&amp;&amp;</op:operator> <call><name><name pos:line="135" pos:column="63">parameterKeywords</name><op:operator pos:line="135" pos:column="80">.</op:operator><name pos:line="135" pos:column="81">InList</name></name><argument_list pos:line="135" pos:column="87">(<argument><expr><name pos:line="135" pos:column="88">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="96"> <block pos:line="135" pos:column="97">{
						<expr_stmt><expr><call><name><name pos:line="136" pos:column="49">styler</name><op:operator pos:line="136" pos:column="55">.</op:operator><name pos:line="136" pos:column="56">ColourTo</name></name><argument_list pos:line="136" pos:column="64">(<argument><expr><name pos:line="136" pos:column="65">i</name><op:operator pos:line="136" pos:column="66">-</op:operator><lit:literal type="number" pos:line="136" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="136" pos:column="69">SCE_INNO_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="137" pos:column="43">else <if pos:line="137" pos:column="48">if <condition pos:line="137" pos:column="51">(<expr><name pos:line="137" pos:column="52">isCode</name> <op:operator pos:line="137" pos:column="59">&amp;&amp;</op:operator> <call><name><name pos:line="137" pos:column="62">pascalKeywords</name><op:operator pos:line="137" pos:column="76">.</op:operator><name pos:line="137" pos:column="77">InList</name></name><argument_list pos:line="137" pos:column="83">(<argument><expr><name pos:line="137" pos:column="84">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="137" pos:column="92"> <block pos:line="137" pos:column="93">{
						<expr_stmt><expr><call><name><name pos:line="138" pos:column="49">styler</name><op:operator pos:line="138" pos:column="55">.</op:operator><name pos:line="138" pos:column="56">ColourTo</name></name><argument_list pos:line="138" pos:column="64">(<argument><expr><name pos:line="138" pos:column="65">i</name><op:operator pos:line="138" pos:column="66">-</op:operator><lit:literal type="number" pos:line="138" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="138" pos:column="69">SCE_INNO_KEYWORD_PASCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="139" pos:column="43">else <if pos:line="139" pos:column="48">if <condition pos:line="139" pos:column="51">(<expr><op:operator pos:line="139" pos:column="52">!</op:operator><name pos:line="139" pos:column="53">isCode</name> <op:operator pos:line="139" pos:column="60">&amp;&amp;</op:operator> <call><name><name pos:line="139" pos:column="63">userKeywords</name><op:operator pos:line="139" pos:column="75">.</op:operator><name pos:line="139" pos:column="76">InList</name></name><argument_list pos:line="139" pos:column="82">(<argument><expr><name pos:line="139" pos:column="83">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="139" pos:column="91"> <block pos:line="139" pos:column="92">{
						<expr_stmt><expr><call><name><name pos:line="140" pos:column="49">styler</name><op:operator pos:line="140" pos:column="55">.</op:operator><name pos:line="140" pos:column="56">ColourTo</name></name><argument_list pos:line="140" pos:column="64">(<argument><expr><name pos:line="140" pos:column="65">i</name><op:operator pos:line="140" pos:column="66">-</op:operator><lit:literal type="number" pos:line="140" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="140" pos:column="69">SCE_INNO_KEYWORD_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="141" pos:column="43">else <block pos:line="141" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="142" pos:column="49">styler</name><op:operator pos:line="142" pos:column="55">.</op:operator><name pos:line="142" pos:column="56">ColourTo</name></name><argument_list pos:line="142" pos:column="64">(<argument><expr><name pos:line="142" pos:column="65">i</name><op:operator pos:line="142" pos:column="66">-</op:operator><lit:literal type="number" pos:line="142" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="142" pos:column="69">SCE_INNO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if></else></if></else></if></else></if>

					<comment type="line" pos:line="145" pos:column="41">// Push back the faulty character</comment>
					<expr_stmt><expr><name pos:line="146" pos:column="41">chNext</name> <op:operator pos:line="146" pos:column="48">=</op:operator> <name><name pos:line="146" pos:column="50">styler</name><index pos:line="146" pos:column="56">[<expr><name pos:line="146" pos:column="57">i</name><op:operator pos:line="146" pos:column="58">--</op:operator></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="147" pos:column="41">ch</name> <op:operator pos:line="147" pos:column="44">=</op:operator> <name pos:line="147" pos:column="46">chPrev</name></expr>;</expr_stmt>
				}</block></else></if>
				<break pos:line="149" pos:column="33">break;</break>

			</case><case pos:line="151" pos:column="25">case <expr><name pos:line="151" pos:column="30">SCE_INNO_SECTION</name></expr>:
				<if pos:line="152" pos:column="33">if <condition pos:line="152" pos:column="36">(<expr><name pos:line="152" pos:column="37">ch</name> <op:operator pos:line="152" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="152" pos:column="43">']'</lit:literal></expr>)</condition><then pos:line="152" pos:column="47"> <block pos:line="152" pos:column="48">{
					<expr_stmt><expr><name pos:line="153" pos:column="41">state</name> <op:operator pos:line="153" pos:column="47">=</op:operator> <name pos:line="153" pos:column="49">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="154" pos:column="41">buffer</name><index pos:line="154" pos:column="47">[<expr><name pos:line="154" pos:column="48">bufferCount</name></expr>]</index></name> <op:operator pos:line="154" pos:column="61">=</op:operator> <lit:literal type="char" pos:line="154" pos:column="63">'\0'</lit:literal></expr>;</expr_stmt>

					<comment type="line" pos:line="156" pos:column="41">// Check if the buffer contains a section name</comment>
					<if pos:line="157" pos:column="41">if <condition pos:line="157" pos:column="44">(<expr><call><name><name pos:line="157" pos:column="45">sectionKeywords</name><op:operator pos:line="157" pos:column="60">.</op:operator><name pos:line="157" pos:column="61">InList</name></name><argument_list pos:line="157" pos:column="67">(<argument><expr><name pos:line="157" pos:column="68">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="157" pos:column="76"> <block pos:line="157" pos:column="77">{
						<expr_stmt><expr><call><name><name pos:line="158" pos:column="49">styler</name><op:operator pos:line="158" pos:column="55">.</op:operator><name pos:line="158" pos:column="56">ColourTo</name></name><argument_list pos:line="158" pos:column="64">(<argument><expr><name pos:line="158" pos:column="65">i</name></expr></argument>,<argument><expr><name pos:line="158" pos:column="67">SCE_INNO_SECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="159" pos:column="49">isCode</name> <op:operator pos:line="159" pos:column="56">=</op:operator> <op:operator pos:line="159" pos:column="58">!</op:operator><call><name pos:line="159" pos:column="59">CompareCaseInsensitive</name><argument_list pos:line="159" pos:column="81">(<argument><expr><name pos:line="159" pos:column="82">buffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="159" pos:column="90">"code"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="160" pos:column="43">else <block pos:line="160" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="161" pos:column="49">styler</name><op:operator pos:line="161" pos:column="55">.</op:operator><name pos:line="161" pos:column="56">ColourTo</name></name><argument_list pos:line="161" pos:column="64">(<argument><expr><name pos:line="161" pos:column="65">i</name></expr></argument>,<argument><expr><name pos:line="161" pos:column="67">SCE_INNO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="163" pos:column="35">else <if pos:line="163" pos:column="40">if <condition pos:line="163" pos:column="43">(<expr><call><name pos:line="163" pos:column="44">isascii</name><argument_list pos:line="163" pos:column="51">(<argument><expr><name pos:line="163" pos:column="52">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="163" pos:column="59">(</op:operator><call><name pos:line="163" pos:column="60">isalnum</name><argument_list pos:line="163" pos:column="67">(<argument><expr><name pos:line="163" pos:column="68">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="163" pos:column="72">||</op:operator> <op:operator pos:line="163" pos:column="75">(</op:operator><name pos:line="163" pos:column="76">ch</name> <op:operator pos:line="163" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="163" pos:column="82">'_'</lit:literal><op:operator pos:line="163" pos:column="85">)</op:operator><op:operator pos:line="163" pos:column="86">)</op:operator></expr>)</condition><then pos:line="163" pos:column="88"> <block pos:line="163" pos:column="89">{
					<expr_stmt><expr><name><name pos:line="164" pos:column="41">buffer</name><index pos:line="164" pos:column="47">[<expr><name pos:line="164" pos:column="48">bufferCount</name><op:operator pos:line="164" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="164" pos:column="63">=</op:operator> <call><name><name pos:line="164" pos:column="65">static_cast</name><argument_list pos:line="164" pos:column="76">&lt;<argument><expr><name pos:line="164" pos:column="77">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="164" pos:column="82">(<argument><expr><call><name pos:line="164" pos:column="83">tolower</name><argument_list pos:line="164" pos:column="90">(<argument><expr><name pos:line="164" pos:column="91">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="165" pos:column="35">else <block pos:line="165" pos:column="40">{
					<expr_stmt><expr><name pos:line="166" pos:column="41">state</name> <op:operator pos:line="166" pos:column="47">=</op:operator> <name pos:line="166" pos:column="49">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="167" pos:column="41">styler</name><op:operator pos:line="167" pos:column="47">.</op:operator><name pos:line="167" pos:column="48">ColourTo</name></name><argument_list pos:line="167" pos:column="56">(<argument><expr><name pos:line="167" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="167" pos:column="59">SCE_INNO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if>
				<break pos:line="169" pos:column="33">break;</break>

			</case><case pos:line="171" pos:column="25">case <expr><name pos:line="171" pos:column="30">SCE_INNO_PREPROC</name></expr>:
				<if pos:line="172" pos:column="33">if <condition pos:line="172" pos:column="36">(<expr><name pos:line="172" pos:column="37">isWS</name> <op:operator pos:line="172" pos:column="42">||</op:operator> <name pos:line="172" pos:column="45">isEOL</name></expr>)</condition><then pos:line="172" pos:column="51"> <block pos:line="172" pos:column="52">{
					<if pos:line="173" pos:column="41">if <condition pos:line="173" pos:column="44">(<expr><call><name pos:line="173" pos:column="45">isascii</name><argument_list pos:line="173" pos:column="52">(<argument><expr><name pos:line="173" pos:column="53">chPrev</name></expr></argument>)</argument_list></call> <op:operator pos:line="173" pos:column="61">&amp;&amp;</op:operator> <call><name pos:line="173" pos:column="64">isalpha</name><argument_list pos:line="173" pos:column="71">(<argument><expr><name pos:line="173" pos:column="72">chPrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="173" pos:column="80"> <block pos:line="173" pos:column="81">{
						<expr_stmt><expr><name pos:line="174" pos:column="49">state</name> <op:operator pos:line="174" pos:column="55">=</op:operator> <name pos:line="174" pos:column="57">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="175" pos:column="49">buffer</name><index pos:line="175" pos:column="55">[<expr><name pos:line="175" pos:column="56">bufferCount</name></expr>]</index></name> <op:operator pos:line="175" pos:column="69">=</op:operator> <lit:literal type="char" pos:line="175" pos:column="71">'\0'</lit:literal></expr>;</expr_stmt>

						<comment type="line" pos:line="177" pos:column="49">// Check if the buffer contains a preprocessor directive</comment>
						<if pos:line="178" pos:column="49">if <condition pos:line="178" pos:column="52">(<expr><call><name><name pos:line="178" pos:column="53">preprocessorKeywords</name><op:operator pos:line="178" pos:column="73">.</op:operator><name pos:line="178" pos:column="74">InList</name></name><argument_list pos:line="178" pos:column="80">(<argument><expr><name pos:line="178" pos:column="81">buffer</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="178" pos:column="89"> <block pos:line="178" pos:column="90">{
							<expr_stmt><expr><call><name><name pos:line="179" pos:column="57">styler</name><op:operator pos:line="179" pos:column="63">.</op:operator><name pos:line="179" pos:column="64">ColourTo</name></name><argument_list pos:line="179" pos:column="72">(<argument><expr><name pos:line="179" pos:column="73">i</name><op:operator pos:line="179" pos:column="74">-</op:operator><lit:literal type="number" pos:line="179" pos:column="75">1</lit:literal></expr></argument>,<argument><expr><name pos:line="179" pos:column="77">SCE_INNO_PREPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="180" pos:column="51">else <block pos:line="180" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="181" pos:column="57">styler</name><op:operator pos:line="181" pos:column="63">.</op:operator><name pos:line="181" pos:column="64">ColourTo</name></name><argument_list pos:line="181" pos:column="72">(<argument><expr><name pos:line="181" pos:column="73">i</name><op:operator pos:line="181" pos:column="74">-</op:operator><lit:literal type="number" pos:line="181" pos:column="75">1</lit:literal></expr></argument>,<argument><expr><name pos:line="181" pos:column="77">SCE_INNO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>

						<comment type="line" pos:line="184" pos:column="49">// Push back the faulty character</comment>
						<expr_stmt><expr><name pos:line="185" pos:column="49">chNext</name> <op:operator pos:line="185" pos:column="56">=</op:operator> <name><name pos:line="185" pos:column="58">styler</name><index pos:line="185" pos:column="64">[<expr><name pos:line="185" pos:column="65">i</name><op:operator pos:line="185" pos:column="66">--</op:operator></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="186" pos:column="49">ch</name> <op:operator pos:line="186" pos:column="52">=</op:operator> <name pos:line="186" pos:column="54">chPrev</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="188" pos:column="35">else <if pos:line="188" pos:column="40">if <condition pos:line="188" pos:column="43">(<expr><call><name pos:line="188" pos:column="44">isascii</name><argument_list pos:line="188" pos:column="51">(<argument><expr><name pos:line="188" pos:column="52">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="188" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="188" pos:column="59">isalpha</name><argument_list pos:line="188" pos:column="66">(<argument><expr><name pos:line="188" pos:column="67">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="188" pos:column="71"> <block pos:line="188" pos:column="72">{
					<if pos:line="189" pos:column="41">if <condition pos:line="189" pos:column="44">(<expr><name pos:line="189" pos:column="45">chPrev</name> <op:operator pos:line="189" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="189" pos:column="55">'#'</lit:literal> <op:operator pos:line="189" pos:column="59">||</op:operator> <name pos:line="189" pos:column="62">chPrev</name> <op:operator pos:line="189" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="189" pos:column="72">' '</lit:literal> <op:operator pos:line="189" pos:column="76">||</op:operator> <name pos:line="189" pos:column="79">chPrev</name> <op:operator pos:line="189" pos:column="86">==</op:operator> <lit:literal type="char" pos:line="189" pos:column="89">'\t'</lit:literal></expr>)</condition><then pos:line="189" pos:column="94">
						<expr_stmt><expr><name pos:line="190" pos:column="49">bufferCount</name> <op:operator pos:line="190" pos:column="61">=</op:operator> <lit:literal type="number" pos:line="190" pos:column="63">0</lit:literal></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><name><name pos:line="191" pos:column="41">buffer</name><index pos:line="191" pos:column="47">[<expr><name pos:line="191" pos:column="48">bufferCount</name><op:operator pos:line="191" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="191" pos:column="63">=</op:operator> <call><name><name pos:line="191" pos:column="65">static_cast</name><argument_list pos:line="191" pos:column="76">&lt;<argument><expr><name pos:line="191" pos:column="77">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="191" pos:column="82">(<argument><expr><call><name pos:line="191" pos:column="83">tolower</name><argument_list pos:line="191" pos:column="90">(<argument><expr><name pos:line="191" pos:column="91">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="193" pos:column="33">break;</break>

			</case><case pos:line="195" pos:column="25">case <expr><name pos:line="195" pos:column="30">SCE_INNO_STRING_DOUBLE</name></expr>:
				<if pos:line="196" pos:column="33">if <condition pos:line="196" pos:column="36">(<expr><name pos:line="196" pos:column="37">ch</name> <op:operator pos:line="196" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="196" pos:column="43">'"'</lit:literal> <op:operator pos:line="196" pos:column="47">||</op:operator> <name pos:line="196" pos:column="50">isEOL</name></expr>)</condition><then pos:line="196" pos:column="56"> <block pos:line="196" pos:column="57">{
					<expr_stmt><expr><name pos:line="197" pos:column="41">state</name> <op:operator pos:line="197" pos:column="47">=</op:operator> <name pos:line="197" pos:column="49">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="198" pos:column="41">styler</name><op:operator pos:line="198" pos:column="47">.</op:operator><name pos:line="198" pos:column="48">ColourTo</name></name><argument_list pos:line="198" pos:column="56">(<argument><expr><name pos:line="198" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="198" pos:column="59">SCE_INNO_STRING_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="200" pos:column="33">break;</break>

			</case><case pos:line="202" pos:column="25">case <expr><name pos:line="202" pos:column="30">SCE_INNO_STRING_SINGLE</name></expr>:
				<if pos:line="203" pos:column="33">if <condition pos:line="203" pos:column="36">(<expr><name pos:line="203" pos:column="37">ch</name> <op:operator pos:line="203" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="203" pos:column="43">'\''</lit:literal> <op:operator pos:line="203" pos:column="48">||</op:operator> <name pos:line="203" pos:column="51">isEOL</name></expr>)</condition><then pos:line="203" pos:column="57"> <block pos:line="203" pos:column="58">{
					<expr_stmt><expr><name pos:line="204" pos:column="41">state</name> <op:operator pos:line="204" pos:column="47">=</op:operator> <name pos:line="204" pos:column="49">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="205" pos:column="41">styler</name><op:operator pos:line="205" pos:column="47">.</op:operator><name pos:line="205" pos:column="48">ColourTo</name></name><argument_list pos:line="205" pos:column="56">(<argument><expr><name pos:line="205" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="205" pos:column="59">SCE_INNO_STRING_SINGLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="207" pos:column="33">break;</break>

			</case><case pos:line="209" pos:column="25">case <expr><name pos:line="209" pos:column="30">SCE_INNO_INLINE_EXPANSION</name></expr>:
				<if pos:line="210" pos:column="33">if <condition pos:line="210" pos:column="36">(<expr><name pos:line="210" pos:column="37">ch</name> <op:operator pos:line="210" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="210" pos:column="43">'}'</lit:literal></expr>)</condition><then pos:line="210" pos:column="47"> <block pos:line="210" pos:column="48">{
					<expr_stmt><expr><name pos:line="211" pos:column="41">state</name> <op:operator pos:line="211" pos:column="47">=</op:operator> <name pos:line="211" pos:column="49">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="212" pos:column="41">styler</name><op:operator pos:line="212" pos:column="47">.</op:operator><name pos:line="212" pos:column="48">ColourTo</name></name><argument_list pos:line="212" pos:column="56">(<argument><expr><name pos:line="212" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="212" pos:column="59">SCE_INNO_INLINE_EXPANSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="213" pos:column="35">else <if pos:line="213" pos:column="40">if <condition pos:line="213" pos:column="43">(<expr><name pos:line="213" pos:column="44">isEOL</name></expr>)</condition><then pos:line="213" pos:column="50"> <block pos:line="213" pos:column="51">{
					<expr_stmt><expr><name pos:line="214" pos:column="41">state</name> <op:operator pos:line="214" pos:column="47">=</op:operator> <name pos:line="214" pos:column="49">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="215" pos:column="41">styler</name><op:operator pos:line="215" pos:column="47">.</op:operator><name pos:line="215" pos:column="48">ColourTo</name></name><argument_list pos:line="215" pos:column="56">(<argument><expr><name pos:line="215" pos:column="57">i</name></expr></argument>,<argument><expr><name pos:line="215" pos:column="59">SCE_INNO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="217" pos:column="33">break;</break>

			</case><case pos:line="219" pos:column="25">case <expr><name pos:line="219" pos:column="30">SCE_INNO_COMMENT_PASCAL</name></expr>:
				<if pos:line="220" pos:column="33">if <condition pos:line="220" pos:column="36">(<expr><name pos:line="220" pos:column="37">isCStyleComment</name></expr>)</condition><then pos:line="220" pos:column="53"> <block pos:line="220" pos:column="54">{
					<if pos:line="221" pos:column="41">if <condition pos:line="221" pos:column="44">(<expr><name pos:line="221" pos:column="45">isEOL</name></expr>)</condition><then pos:line="221" pos:column="51"> <block pos:line="221" pos:column="52">{
						<expr_stmt><expr><name pos:line="222" pos:column="49">state</name> <op:operator pos:line="222" pos:column="55">=</op:operator> <name pos:line="222" pos:column="57">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="223" pos:column="49">styler</name><op:operator pos:line="223" pos:column="55">.</op:operator><name pos:line="223" pos:column="56">ColourTo</name></name><argument_list pos:line="223" pos:column="64">(<argument><expr><name pos:line="223" pos:column="65">i</name></expr></argument>,<argument><expr><name pos:line="223" pos:column="67">SCE_INNO_COMMENT_PASCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="225" pos:column="35">else <block pos:line="225" pos:column="40">{
					<if pos:line="226" pos:column="41">if <condition pos:line="226" pos:column="44">(<expr><name pos:line="226" pos:column="45">ch</name> <op:operator pos:line="226" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="226" pos:column="51">'}'</lit:literal> <op:operator pos:line="226" pos:column="55">||</op:operator> <op:operator pos:line="226" pos:column="58">(</op:operator><name pos:line="226" pos:column="59">ch</name> <op:operator pos:line="226" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="226" pos:column="65">')'</lit:literal> <op:operator pos:line="226" pos:column="69">&amp;&amp;</op:operator> <name pos:line="226" pos:column="72">chPrev</name> <op:operator pos:line="226" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="226" pos:column="82">'*'</lit:literal><op:operator pos:line="226" pos:column="85">)</op:operator></expr>)</condition><then pos:line="226" pos:column="87"> <block pos:line="226" pos:column="88">{
						<expr_stmt><expr><name pos:line="227" pos:column="49">state</name> <op:operator pos:line="227" pos:column="55">=</op:operator> <name pos:line="227" pos:column="57">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="228" pos:column="49">styler</name><op:operator pos:line="228" pos:column="55">.</op:operator><name pos:line="228" pos:column="56">ColourTo</name></name><argument_list pos:line="228" pos:column="64">(<argument><expr><name pos:line="228" pos:column="65">i</name></expr></argument>,<argument><expr><name pos:line="228" pos:column="67">SCE_INNO_COMMENT_PASCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="229" pos:column="43">else <if pos:line="229" pos:column="48">if <condition pos:line="229" pos:column="51">(<expr><name pos:line="229" pos:column="52">isEOL</name></expr>)</condition><then pos:line="229" pos:column="58"> <block pos:line="229" pos:column="59">{
						<expr_stmt><expr><name pos:line="230" pos:column="49">state</name> <op:operator pos:line="230" pos:column="55">=</op:operator> <name pos:line="230" pos:column="57">SCE_INNO_DEFAULT</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="231" pos:column="49">styler</name><op:operator pos:line="231" pos:column="55">.</op:operator><name pos:line="231" pos:column="56">ColourTo</name></name><argument_list pos:line="231" pos:column="64">(<argument><expr><name pos:line="231" pos:column="65">i</name></expr></argument>,<argument><expr><name pos:line="231" pos:column="67">SCE_INNO_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></else></if>
				<break pos:line="234" pos:column="33">break;</break>

		</case>}</block></switch>
	}</block></for>
	<expr_stmt><expr><op:operator pos:line="238" pos:column="9">delete</op:operator> <index pos:line="238" pos:column="16">[]</index><name pos:line="238" pos:column="18">buffer</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="241" pos:column="1">static</specifier> <specifier pos:line="241" pos:column="8">const</specifier> <name pos:line="241" pos:column="14">char</name> <type:modifier pos:line="241" pos:column="19">*</type:modifier> <specifier pos:line="241" pos:column="21">const</specifier></type> <name><name pos:line="241" pos:column="27">innoWordListDesc</name><index pos:line="241" pos:column="43">[]</index></name> <init pos:line="241" pos:column="46">= <expr><block pos:line="241" pos:column="48">{
	<expr><lit:literal type="string" pos:line="242" pos:column="9">"Sections"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="243" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="244" pos:column="9">"Parameters"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="245" pos:column="9">"Preprocessor directives"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="246" pos:column="9">"Pascal keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="247" pos:column="9">"User defined keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="248" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="251" pos:column="1">static</specifier> <name pos:line="251" pos:column="8">void</name></type> <name pos:line="251" pos:column="13">FoldInnoDoc</name><parameter_list pos:line="251" pos:column="24">(<param><decl><type><name pos:line="251" pos:column="25">unsigned</name> <name pos:line="251" pos:column="34">int</name></type> <name pos:line="251" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="251" pos:column="48">int</name></type> <name pos:line="251" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="251" pos:column="60">int</name></type></decl></param>, <param><decl><type><name><name pos:line="251" pos:column="65">WordList</name> <type:modifier pos:line="251" pos:column="74">*</type:modifier><index pos:line="251" pos:column="75">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="251" pos:column="79">Accessor</name> <type:modifier pos:line="251" pos:column="88">&amp;</type:modifier></type><name pos:line="251" pos:column="89">styler</name></decl></param>)</parameter_list> <block pos:line="251" pos:column="97">{
	<decl_stmt><decl><type><name pos:line="252" pos:column="9">unsigned</name> <name pos:line="252" pos:column="18">int</name></type> <name pos:line="252" pos:column="22">endPos</name> <init pos:line="252" pos:column="29">= <expr><name pos:line="252" pos:column="31">startPos</name> <op:operator pos:line="252" pos:column="40">+</op:operator> <name pos:line="252" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="253" pos:column="9">char</name></type> <name pos:line="253" pos:column="14">chNext</name> <init pos:line="253" pos:column="21">= <expr><name><name pos:line="253" pos:column="23">styler</name><index pos:line="253" pos:column="29">[<expr><name pos:line="253" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="255" pos:column="9">int</name></type> <name pos:line="255" pos:column="13">lineCurrent</name> <init pos:line="255" pos:column="25">= <expr><call><name><name pos:line="255" pos:column="27">styler</name><op:operator pos:line="255" pos:column="33">.</op:operator><name pos:line="255" pos:column="34">GetLine</name></name><argument_list pos:line="255" pos:column="41">(<argument><expr><name pos:line="255" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="257" pos:column="9">bool</name></type> <name pos:line="257" pos:column="14">sectionFlag</name> <init pos:line="257" pos:column="26">= <expr><lit:literal type="boolean" pos:line="257" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="258" pos:column="9">int</name></type> <name pos:line="258" pos:column="13">levelPrev</name> <init pos:line="258" pos:column="23">= <expr><name pos:line="258" pos:column="25">lineCurrent</name> <op:operator pos:line="258" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="258" pos:column="39">0</lit:literal> <op:operator pos:line="258" pos:column="41">?</op:operator> <call><name><name pos:line="258" pos:column="43">styler</name><op:operator pos:line="258" pos:column="49">.</op:operator><name pos:line="258" pos:column="50">LevelAt</name></name><argument_list pos:line="258" pos:column="57">(<argument><expr><name pos:line="258" pos:column="58">lineCurrent</name> <op:operator pos:line="258" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="258" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="258" pos:column="75">:</op:operator> <name pos:line="258" pos:column="77">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="259" pos:column="9">int</name></type> <name pos:line="259" pos:column="13">level</name></decl>;</decl_stmt>

	<for pos:line="261" pos:column="9">for (<init><decl><type><name pos:line="261" pos:column="14">unsigned</name> <name pos:line="261" pos:column="23">int</name></type> <name pos:line="261" pos:column="27">i</name> <init pos:line="261" pos:column="29">= <expr><name pos:line="261" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="261" pos:column="41">i</name> <op:operator pos:line="261" pos:column="43">&lt;</op:operator> <name pos:line="261" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="261" pos:column="53">i</name><op:operator pos:line="261" pos:column="54">++</op:operator></expr></incr>) <block pos:line="261" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="262" pos:column="17">char</name></type> <name pos:line="262" pos:column="22">ch</name> <init pos:line="262" pos:column="25">= <expr><name pos:line="262" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="263" pos:column="17">chNext</name> <op:operator pos:line="263" pos:column="24">=</op:operator> <name><name pos:line="263" pos:column="26">styler</name><index pos:line="263" pos:column="32">[<expr><name pos:line="263" pos:column="33">i</name><op:operator pos:line="263" pos:column="34">+</op:operator><lit:literal type="number" pos:line="263" pos:column="35">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="264" pos:column="17">bool</name></type> <name pos:line="264" pos:column="22">atEOL</name> <init pos:line="264" pos:column="28">= <expr><op:operator pos:line="264" pos:column="30">(</op:operator><name pos:line="264" pos:column="31">ch</name> <op:operator pos:line="264" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="37">'\r'</lit:literal> <op:operator pos:line="264" pos:column="42">&amp;&amp;</op:operator> <name pos:line="264" pos:column="45">chNext</name> <op:operator pos:line="264" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="264" pos:column="55">'\n'</lit:literal><op:operator pos:line="264" pos:column="59">)</op:operator> <op:operator pos:line="264" pos:column="61">||</op:operator> <op:operator pos:line="264" pos:column="64">(</op:operator><name pos:line="264" pos:column="65">ch</name> <op:operator pos:line="264" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="71">'\n'</lit:literal><op:operator pos:line="264" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="265" pos:column="17">int</name></type> <name pos:line="265" pos:column="21">style</name> <init pos:line="265" pos:column="27">= <expr><call><name><name pos:line="265" pos:column="29">styler</name><op:operator pos:line="265" pos:column="35">.</op:operator><name pos:line="265" pos:column="36">StyleAt</name></name><argument_list pos:line="265" pos:column="43">(<argument><expr><name pos:line="265" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="267" pos:column="17">if <condition pos:line="267" pos:column="20">(<expr><name pos:line="267" pos:column="21">style</name> <op:operator pos:line="267" pos:column="27">==</op:operator> <name pos:line="267" pos:column="30">SCE_INNO_SECTION</name></expr>)</condition><then pos:line="267" pos:column="47">
			<expr_stmt><expr><name pos:line="268" pos:column="25">sectionFlag</name> <op:operator pos:line="268" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="268" pos:column="39">true</lit:literal></expr>;</expr_stmt></then></if>

		<if pos:line="270" pos:column="17">if <condition pos:line="270" pos:column="20">(<expr><name pos:line="270" pos:column="21">atEOL</name> <op:operator pos:line="270" pos:column="27">||</op:operator> <name pos:line="270" pos:column="30">i</name> <op:operator pos:line="270" pos:column="32">==</op:operator> <name pos:line="270" pos:column="35">endPos</name> <op:operator pos:line="270" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="270" pos:column="44">1</lit:literal></expr>)</condition><then pos:line="270" pos:column="46"> <block pos:line="270" pos:column="47">{
			<if pos:line="271" pos:column="25">if <condition pos:line="271" pos:column="28">(<expr><name pos:line="271" pos:column="29">sectionFlag</name></expr>)</condition><then pos:line="271" pos:column="41"> <block pos:line="271" pos:column="42">{
				<expr_stmt><expr><name pos:line="272" pos:column="33">level</name> <op:operator pos:line="272" pos:column="39">=</op:operator> <name pos:line="272" pos:column="41">SC_FOLDLEVELBASE</name> <op:operator pos:line="272" pos:column="58">|</op:operator> <name pos:line="272" pos:column="60">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
				<if pos:line="273" pos:column="33">if <condition pos:line="273" pos:column="36">(<expr><name pos:line="273" pos:column="37">level</name> <op:operator pos:line="273" pos:column="43">==</op:operator> <name pos:line="273" pos:column="46">levelPrev</name></expr>)</condition><then pos:line="273" pos:column="56">
					<expr_stmt><expr><call><name><name pos:line="274" pos:column="41">styler</name><op:operator pos:line="274" pos:column="47">.</op:operator><name pos:line="274" pos:column="48">SetLevel</name></name><argument_list pos:line="274" pos:column="56">(<argument><expr><name pos:line="274" pos:column="57">lineCurrent</name> <op:operator pos:line="274" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="274" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><name pos:line="274" pos:column="74">levelPrev</name> <op:operator pos:line="274" pos:column="84">&amp;</op:operator> <op:operator pos:line="274" pos:column="86">~</op:operator><name pos:line="274" pos:column="87">SC_FOLDLEVELHEADERFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="275" pos:column="27">else <block pos:line="275" pos:column="32">{
				<expr_stmt><expr><name pos:line="276" pos:column="33">level</name> <op:operator pos:line="276" pos:column="39">=</op:operator> <name pos:line="276" pos:column="41">levelPrev</name> <op:operator pos:line="276" pos:column="51">&amp;</op:operator> <name pos:line="276" pos:column="53">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
				<if pos:line="277" pos:column="33">if <condition pos:line="277" pos:column="36">(<expr><name pos:line="277" pos:column="37">levelPrev</name> <op:operator pos:line="277" pos:column="47">&amp;</op:operator> <name pos:line="277" pos:column="49">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="277" pos:column="72">
					<expr_stmt><expr><name pos:line="278" pos:column="41">level</name><op:operator pos:line="278" pos:column="46">++</op:operator></expr>;</expr_stmt></then></if>
			}</block></else></if>

			<expr_stmt><expr><call><name><name pos:line="281" pos:column="25">styler</name><op:operator pos:line="281" pos:column="31">.</op:operator><name pos:line="281" pos:column="32">SetLevel</name></name><argument_list pos:line="281" pos:column="40">(<argument><expr><name pos:line="281" pos:column="41">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="281" pos:column="54">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="283" pos:column="25">levelPrev</name> <op:operator pos:line="283" pos:column="35">=</op:operator> <name pos:line="283" pos:column="37">level</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="284" pos:column="25">lineCurrent</name><op:operator pos:line="284" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="285" pos:column="25">sectionFlag</name> <op:operator pos:line="285" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="285" pos:column="39">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name pos:line="290" pos:column="1">LexerModule</name></type> <name pos:line="290" pos:column="13">lmInno</name><argument_list pos:line="290" pos:column="19">(<argument><expr><name pos:line="290" pos:column="20">SCLEX_INNOSETUP</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="37">ColouriseInnoDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="290" pos:column="55">"inno"</lit:literal></expr></argument>, <argument><expr><name pos:line="290" pos:column="63">FoldInnoDoc</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="76">innoWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
