<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\DocumentMap\documentMap.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">DOCUMENTMAP_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive>  <cpp:macro><name pos:line="30" pos:column="10">DOCUMENTMAP_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">DOCKINGDLGINTERFACE_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"DockingDlgInterface.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//DOCKINGDLGINTERFACE_H</comment>

<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"documentMap_rc.h"</lit:literal></cpp:file></cpp:include>

<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">DOCUMENTMAP_SCROLL</name></cpp:macro>        <cpp:value pos:line="38" pos:column="35">(WM_USER + 1)</cpp:value></cpp:define>
<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">DOCUMENTMAP_MOUSECLICKED</name></cpp:macro>  <cpp:value pos:line="39" pos:column="35">(WM_USER + 2)</cpp:value></cpp:define>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">DOCUMENTMAP_MOUSEWHEEL</name></cpp:macro>    <cpp:value pos:line="40" pos:column="35">(WM_USER + 3)</cpp:value></cpp:define>

<class_decl pos:line="42" pos:column="1">class <name pos:line="42" pos:column="7">ScintillaEditView</name>;</class_decl>
<decl_stmt><decl><type><specifier pos:line="43" pos:column="1">const</specifier> <name pos:line="43" pos:column="7">bool</name></type> <name pos:line="43" pos:column="12">moveDown</name> <init pos:line="43" pos:column="21">= <expr><lit:literal type="boolean" pos:line="43" pos:column="23">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="44" pos:column="1">const</specifier> <name pos:line="44" pos:column="7">bool</name></type> <name pos:line="44" pos:column="12">moveUp</name> <init pos:line="44" pos:column="19">= <expr><lit:literal type="boolean" pos:line="44" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt>

<enum pos:line="46" pos:column="1">enum <name pos:line="46" pos:column="6">moveMode</name> <block pos:line="46" pos:column="15">{
	<decl><name pos:line="47" pos:column="9">perLine</name></decl><op:operator pos:line="47" pos:column="16">,</op:operator>
	<decl><name pos:line="48" pos:column="9">perPage</name></decl>
}</block>;</enum>

<class pos:line="51" pos:column="1">class <name pos:line="51" pos:column="7">ViewZoneDlg</name> <super pos:line="51" pos:column="19">: <specifier pos:line="51" pos:column="21">public</specifier> <name pos:line="51" pos:column="28">StaticDialog</name></super>
<block pos:line="52" pos:column="1">{<private type="default" pos:line="52" pos:column="2">
</private><public pos:line="53" pos:column="1">public :
	<constructor><name pos:line="54" pos:column="9">ViewZoneDlg</name><parameter_list pos:line="54" pos:column="20">()</parameter_list> <member_list pos:line="54" pos:column="23">: <call><name pos:line="54" pos:column="25">StaticDialog</name><argument_list pos:line="54" pos:column="37">()</argument_list></call> </member_list><block pos:line="54" pos:column="40">{}</block></constructor><empty_stmt pos:line="54" pos:column="42">;</empty_stmt>

	<function_decl><type><name pos:line="56" pos:column="9">void</name></type> <name pos:line="56" pos:column="14">doDialog</name><parameter_list pos:line="56" pos:column="22">()</parameter_list>;</function_decl>

    <function><type><specifier pos:line="58" pos:column="5">virtual</specifier> <name pos:line="58" pos:column="13">void</name></type> <name pos:line="58" pos:column="18">destroy</name><parameter_list pos:line="58" pos:column="25">()</parameter_list> <block pos:line="58" pos:column="28">{
    }</block></function><empty_stmt pos:line="59" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="61" pos:column="9">void</name></type> <name pos:line="61" pos:column="14">drawZone</name><parameter_list pos:line="61" pos:column="22">(<param><decl><type><name pos:line="61" pos:column="23">long</name></type> <name pos:line="61" pos:column="28">hY</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="32">long</name></type> <name pos:line="61" pos:column="37">lY</name></decl></param>)</parameter_list> <block pos:line="61" pos:column="41">{
		<expr_stmt><expr><name pos:line="62" pos:column="17">_higherY</name> <op:operator pos:line="62" pos:column="26">=</op:operator> <name pos:line="62" pos:column="28">hY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="63" pos:column="17">_lowerY</name> <op:operator pos:line="63" pos:column="25">=</op:operator> <name pos:line="63" pos:column="27">lY</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="64" pos:column="17">::</op:operator><name pos:line="64" pos:column="19">InvalidateRect</name></name><argument_list pos:line="64" pos:column="33">(<argument><expr><name pos:line="64" pos:column="34">_viewZoneCanvas</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="51">NULL</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="57">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="65" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="67" pos:column="9">int</name></type> <name pos:line="67" pos:column="13">getViewerHeight</name><parameter_list pos:line="67" pos:column="28">()</parameter_list> <specifier pos:line="67" pos:column="31">const</specifier> <block pos:line="67" pos:column="37">{
		<return pos:line="68" pos:column="17">return <expr><op:operator pos:line="68" pos:column="24">(</op:operator><name pos:line="68" pos:column="25">_lowerY</name> <op:operator pos:line="68" pos:column="33">-</op:operator> <name pos:line="68" pos:column="35">_higherY</name><op:operator pos:line="68" pos:column="43">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="69" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="71" pos:column="9">int</name></type> <name pos:line="71" pos:column="13">getCurrentCenterPosY</name><parameter_list pos:line="71" pos:column="33">()</parameter_list> <specifier pos:line="71" pos:column="36">const</specifier> <block pos:line="71" pos:column="42">{
		<return pos:line="72" pos:column="17">return <expr><op:operator pos:line="72" pos:column="24">(</op:operator><name pos:line="72" pos:column="25">_lowerY</name> <op:operator pos:line="72" pos:column="33">-</op:operator> <name pos:line="72" pos:column="35">_higherY</name><op:operator pos:line="72" pos:column="43">)</op:operator><op:operator pos:line="72" pos:column="44">/</op:operator><lit:literal type="number" pos:line="72" pos:column="45">2</lit:literal> <op:operator pos:line="72" pos:column="47">+</op:operator> <name pos:line="72" pos:column="49">_higherY</name></expr>;</return>
	}</block></function><empty_stmt pos:line="73" pos:column="10">;</empty_stmt>

</public><protected pos:line="75" pos:column="1">protected :
	<function_decl><type><specifier pos:line="76" pos:column="9">virtual</specifier> <name pos:line="76" pos:column="17">BOOL</name> <name pos:line="76" pos:column="22">CALLBACK</name></type> <name pos:line="76" pos:column="31">run_dlgProc</name><parameter_list pos:line="76" pos:column="42">(<param><decl><type><name pos:line="76" pos:column="43">UINT</name></type> <name pos:line="76" pos:column="48">message</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="57">WPARAM</name></type> <name pos:line="76" pos:column="64">wParam</name></decl></param>, <param><decl><type><name pos:line="76" pos:column="72">LPARAM</name></type> <name pos:line="76" pos:column="79">lParam</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="78" pos:column="9">static</specifier> <name pos:line="78" pos:column="16">BOOL</name> <name pos:line="78" pos:column="21">CALLBACK</name></type> <name pos:line="78" pos:column="30">canvasStaticProc</name><parameter_list pos:line="78" pos:column="46">(<param><decl><type><name pos:line="78" pos:column="47">HWND</name></type> <name pos:line="78" pos:column="52">hwnd</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="58">UINT</name></type> <name pos:line="78" pos:column="63">message</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="72">WPARAM</name></type> <name pos:line="78" pos:column="79">wParam</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="87">LPARAM</name></type> <name pos:line="78" pos:column="94">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="79" pos:column="9">BOOL</name> <name pos:line="79" pos:column="14">CALLBACK</name></type> <name pos:line="79" pos:column="23">canvas_runProc</name><parameter_list pos:line="79" pos:column="37">(<param><decl><type><name pos:line="79" pos:column="38">HWND</name></type> <name pos:line="79" pos:column="43">hwnd</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="49">UINT</name></type> <name pos:line="79" pos:column="54">message</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="63">WPARAM</name></type> <name pos:line="79" pos:column="70">wParam</name></decl></param>, <param><decl><type><name pos:line="79" pos:column="78">LPARAM</name></type> <name pos:line="79" pos:column="85">lParam</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="81" pos:column="9">void</name></type> <name pos:line="81" pos:column="14">drawPreviewZone</name><parameter_list pos:line="81" pos:column="29">(<param><decl><type><name pos:line="81" pos:column="30">DRAWITEMSTRUCT</name> <type:modifier pos:line="81" pos:column="45">*</type:modifier></type><name pos:line="81" pos:column="46">pdis</name></decl></param>)</parameter_list>;</function_decl>

</protected><private pos:line="83" pos:column="1">private :
	<decl_stmt><decl><type><name pos:line="84" pos:column="9">HWND</name></type> <name pos:line="84" pos:column="14">_viewZoneCanvas</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="85" pos:column="9">WNDPROC</name></type> <name pos:line="85" pos:column="17">_canvasDefaultProc</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">long</name></type> <name pos:line="87" pos:column="14">_higherY</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">long</name></type> <name pos:line="88" pos:column="14">_lowerY</name></decl>;</decl_stmt>
</private>}</block>;</class>


<class pos:line="92" pos:column="1">class <name pos:line="92" pos:column="7">DocumentMap</name> <super pos:line="92" pos:column="19">: <specifier pos:line="92" pos:column="21">public</specifier> <name pos:line="92" pos:column="28">DockingDlgInterface</name></super> <block pos:line="92" pos:column="48">{<private type="default" pos:line="92" pos:column="49">
</private><public pos:line="93" pos:column="1">public:
	<constructor><name pos:line="94" pos:column="9">DocumentMap</name><parameter_list pos:line="94" pos:column="20">()</parameter_list><member_list pos:line="94" pos:column="22">: <call><name pos:line="94" pos:column="24">DockingDlgInterface</name><argument_list pos:line="94" pos:column="43">(<argument><expr><name pos:line="94" pos:column="44">IDD_DOCUMENTMAP</name></expr></argument>)</argument_list></call><op:operator pos:line="94" pos:column="60">,</op:operator> <call><name pos:line="94" pos:column="62">_ppEditView</name><argument_list pos:line="94" pos:column="73">(<argument><expr><name pos:line="94" pos:column="74">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="94" pos:column="79">,</op:operator>\
		<call><name pos:line="95" pos:column="17">_pScintillaEditView</name><argument_list pos:line="95" pos:column="36">(<argument><expr><name pos:line="95" pos:column="37">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="95" pos:column="42">,</op:operator> <call><name pos:line="95" pos:column="44">id4dockingCont</name><argument_list pos:line="95" pos:column="58">(<argument><expr><name pos:line="95" pos:column="59">DM_NOFOCUSWHILECLICKINGCAPTION</name></expr></argument>)</argument_list></call>
	</member_list><block pos:line="96" pos:column="9">{}</block></constructor><empty_stmt pos:line="96" pos:column="11">;</empty_stmt>

	<function><type><name pos:line="98" pos:column="9">void</name></type> <name pos:line="98" pos:column="14">create</name><parameter_list pos:line="98" pos:column="20">(<param><decl><type><name pos:line="98" pos:column="21">tTbData</name> <type:modifier pos:line="98" pos:column="29">*</type:modifier></type> <name pos:line="98" pos:column="31">data</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="37">bool</name></type> <name pos:line="98" pos:column="42">isRTL</name> <init pos:line="98" pos:column="48">= <expr><lit:literal type="boolean" pos:line="98" pos:column="50">false</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="98" pos:column="57">{
		<expr_stmt><expr><call><name><name pos:line="99" pos:column="17">DockingDlgInterface</name><op:operator pos:line="99" pos:column="36">::</op:operator><name pos:line="99" pos:column="38">create</name></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">data</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="51">isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="100" pos:column="17">data</name><op:operator pos:line="100" pos:column="21">-&gt;</op:operator><name pos:line="100" pos:column="23">pszAddInfo</name></name> <op:operator pos:line="100" pos:column="34">=</op:operator> <call><name><name pos:line="100" pos:column="36">id4dockingCont</name><op:operator pos:line="100" pos:column="50">.</op:operator><name pos:line="100" pos:column="51">c_str</name></name><argument_list pos:line="100" pos:column="56">()</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="101" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="103" pos:column="9">void</name></type> <name pos:line="103" pos:column="14">init</name><parameter_list pos:line="103" pos:column="18">(<param><decl><type><name pos:line="103" pos:column="19">HINSTANCE</name></type> <name pos:line="103" pos:column="29">hInst</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="36">HWND</name></type> <name pos:line="103" pos:column="41">hPere</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="48">ScintillaEditView</name> <type:modifier pos:line="103" pos:column="66">*</type:modifier><type:modifier pos:line="103" pos:column="67">*</type:modifier></type><name pos:line="103" pos:column="68">ppEditView</name></decl></param>)</parameter_list> <block pos:line="103" pos:column="80">{
		<expr_stmt><expr><call><name><name pos:line="104" pos:column="17">DockingDlgInterface</name><op:operator pos:line="104" pos:column="36">::</op:operator><name pos:line="104" pos:column="38">init</name></name><argument_list pos:line="104" pos:column="42">(<argument><expr><name pos:line="104" pos:column="43">hInst</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="50">hPere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="105" pos:column="17">_ppEditView</name> <op:operator pos:line="105" pos:column="29">=</op:operator> <name pos:line="105" pos:column="31">ppEditView</name></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="106" pos:column="10">;</empty_stmt>

    <function><type><specifier pos:line="108" pos:column="5">virtual</specifier> <name pos:line="108" pos:column="13">void</name></type> <name pos:line="108" pos:column="18">display</name><parameter_list pos:line="108" pos:column="25">(<param><decl><type><name pos:line="108" pos:column="26">bool</name></type> <name pos:line="108" pos:column="31">toShow</name> <init pos:line="108" pos:column="38">= <expr><lit:literal type="boolean" pos:line="108" pos:column="40">true</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="108" pos:column="46">const</specifier> <block pos:line="108" pos:column="52">{
        <expr_stmt><expr><call><name><name pos:line="109" pos:column="9">DockingDlgInterface</name><op:operator pos:line="109" pos:column="28">::</op:operator><name pos:line="109" pos:column="30">display</name></name><argument_list pos:line="109" pos:column="37">(<argument><expr><name pos:line="109" pos:column="38">toShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="110" pos:column="17">_vzDlg</name><op:operator pos:line="110" pos:column="23">.</op:operator><name pos:line="110" pos:column="24">display</name></name><argument_list pos:line="110" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="111" pos:column="6">;</empty_stmt>

    <function><type><name pos:line="113" pos:column="5">void</name></type> <name pos:line="113" pos:column="10">setParent</name><parameter_list pos:line="113" pos:column="19">(<param><decl><type><name pos:line="113" pos:column="20">HWND</name></type> <name pos:line="113" pos:column="25">parent2set</name></decl></param>)</parameter_list><block pos:line="113" pos:column="36">{
        <expr_stmt><expr><name pos:line="114" pos:column="9">_hParent</name> <op:operator pos:line="114" pos:column="18">=</op:operator> <name pos:line="114" pos:column="20">parent2set</name></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="115" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="117" pos:column="9">void</name></type> <name pos:line="117" pos:column="14">vzDlgDisplay</name><parameter_list pos:line="117" pos:column="26">(<param><decl><type><name pos:line="117" pos:column="27">bool</name></type> <name pos:line="117" pos:column="32">toShow</name> <init pos:line="117" pos:column="39">= <expr><lit:literal type="boolean" pos:line="117" pos:column="41">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="117" pos:column="47">{
		<expr_stmt><expr><call><name><name pos:line="118" pos:column="17">_vzDlg</name><op:operator pos:line="118" pos:column="23">.</op:operator><name pos:line="118" pos:column="24">display</name></name><argument_list pos:line="118" pos:column="31">(<argument><expr><name pos:line="118" pos:column="32">toShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function_decl><type><name pos:line="121" pos:column="9">void</name></type> <name pos:line="121" pos:column="14">reloadMap</name><parameter_list pos:line="121" pos:column="23">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="122" pos:column="9">void</name></type> <name pos:line="122" pos:column="14">wrapMap</name><parameter_list pos:line="122" pos:column="21">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="123" pos:column="9">void</name></type> <name pos:line="123" pos:column="14">initWrapMap</name><parameter_list pos:line="123" pos:column="25">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="124" pos:column="9">void</name></type> <name pos:line="124" pos:column="14">scrollMap</name><parameter_list pos:line="124" pos:column="23">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="125" pos:column="9">void</name></type> <name pos:line="125" pos:column="14">scrollMap</name><parameter_list pos:line="125" pos:column="23">(<param><decl><type><name pos:line="125" pos:column="24">bool</name></type> <name pos:line="125" pos:column="29">direction</name></decl></param>, <param><decl><type><name pos:line="125" pos:column="40">moveMode</name></type> <name pos:line="125" pos:column="49">whichMode</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="126" pos:column="9">void</name></type> <name pos:line="126" pos:column="14">doMove</name><parameter_list pos:line="126" pos:column="20">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="127" pos:column="9">void</name></type> <name pos:line="127" pos:column="14">fold</name><parameter_list pos:line="127" pos:column="18">(<param><decl><type><name pos:line="127" pos:column="19">int</name></type> <name pos:line="127" pos:column="23">line</name></decl></param>, <param><decl><type><name pos:line="127" pos:column="29">bool</name></type> <name pos:line="127" pos:column="34">foldOrNot</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="128" pos:column="9">void</name></type> <name pos:line="128" pos:column="14">foldAll</name><parameter_list pos:line="128" pos:column="21">(<param><decl><type><name pos:line="128" pos:column="22">bool</name></type> <name pos:line="128" pos:column="27">mode</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="129" pos:column="9">void</name></type> <name pos:line="129" pos:column="14">setSyntaxLiliting</name><parameter_list pos:line="129" pos:column="31">()</parameter_list>;</function_decl>

</public><protected pos:line="131" pos:column="1">protected:
	<function_decl><type><specifier pos:line="132" pos:column="9">virtual</specifier> <name pos:line="132" pos:column="17">BOOL</name> <name pos:line="132" pos:column="22">CALLBACK</name></type> <name pos:line="132" pos:column="31">run_dlgProc</name><parameter_list pos:line="132" pos:column="42">(<param><decl><type><name pos:line="132" pos:column="43">UINT</name></type> <name pos:line="132" pos:column="48">message</name></decl></param>, <param><decl><type><name pos:line="132" pos:column="57">WPARAM</name></type> <name pos:line="132" pos:column="64">wParam</name></decl></param>, <param><decl><type><name pos:line="132" pos:column="72">LPARAM</name></type> <name pos:line="132" pos:column="79">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="133" pos:column="9">bool</name></type> <name pos:line="133" pos:column="14">needToRecomputeWith</name><parameter_list pos:line="133" pos:column="33">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="134" pos:column="9">int</name></type> <name pos:line="134" pos:column="13">getEditorTextZoneWidth</name><parameter_list pos:line="134" pos:column="35">()</parameter_list>;</function_decl>

</protected><private pos:line="136" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">ScintillaEditView</name> <type:modifier pos:line="137" pos:column="27">*</type:modifier><type:modifier pos:line="137" pos:column="28">*</type:modifier></type><name pos:line="137" pos:column="29">_ppEditView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="138" pos:column="9">ScintillaEditView</name> <type:modifier pos:line="138" pos:column="27">*</type:modifier></type><name pos:line="138" pos:column="28">_pScintillaEditView</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">ViewZoneDlg</name></type> <name pos:line="139" pos:column="21">_vzDlg</name></decl>;</decl_stmt>

	<comment type="line" pos:line="141" pos:column="9">// for needToRecomputeWith function</comment>
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">int</name></type> <name pos:line="142" pos:column="13">_displayZoom</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="143" pos:column="9">int</name></type> <name pos:line="143" pos:column="13">_displayWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="144" pos:column="9">generic_string</name></type> <name pos:line="144" pos:column="24">id4dockingCont</name></decl>;</decl_stmt>
</private>}</block>;</class>


<cpp:endif pos:line="148" pos:column="1">#<cpp:directive pos:line="148" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="148" pos:column="8">// DOCUMENTMAP_H</comment>
</unit>
