<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\tools\xmlApiSorter\sorter.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file pos:line="29" pos:column="10">&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file pos:line="30" pos:column="10">&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"tinyxml.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file pos:line="33" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file pos:line="34" pos:column="10">&lt;algorithm&gt;</cpp:file></cpp:include>

<using pos:line="36" pos:column="1">using namespace <name pos:line="36" pos:column="17">std</name>;</using>

<struct pos:line="38" pos:column="1">struct <name pos:line="38" pos:column="8">xmlname</name><block pos:line="38" pos:column="15">{<public type="default" pos:line="38" pos:column="16">
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">TiXmlElement</name> <type:modifier pos:line="39" pos:column="22">*</type:modifier></type> <name pos:line="39" pos:column="24">node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="40" pos:column="9">const</specifier> <name pos:line="40" pos:column="15">char</name> <type:modifier pos:line="40" pos:column="20">*</type:modifier></type> <name pos:line="40" pos:column="22">name</name></decl>;</decl_stmt>
	<constructor><name pos:line="41" pos:column="9">xmlname</name><parameter_list pos:line="41" pos:column="16">(<param><decl><type><name pos:line="41" pos:column="17">TiXmlElement</name> <type:modifier pos:line="41" pos:column="30">*</type:modifier></type> <name pos:line="41" pos:column="32">n</name></decl></param>, <param><decl><type><specifier pos:line="41" pos:column="35">const</specifier> <name pos:line="41" pos:column="41">char</name> <type:modifier pos:line="41" pos:column="46">*</type:modifier></type> <name pos:line="41" pos:column="48">na</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="52">{ <expr_stmt><expr><name pos:line="41" pos:column="54">node</name> <op:operator pos:line="41" pos:column="59">=</op:operator> <name pos:line="41" pos:column="61">n</name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="41" pos:column="64">name</name> <op:operator pos:line="41" pos:column="69">=</op:operator> <name pos:line="41" pos:column="71">na</name></expr>;</expr_stmt>}</block></constructor>
</public>}</block>;</struct>

<comment type="line" pos:line="44" pos:column="1">//true if x1 smaller</comment>
<function><type><name pos:line="45" pos:column="1">bool</name></type> <name pos:line="45" pos:column="6">sortXMLCase</name><parameter_list pos:line="45" pos:column="17">(<param><decl><type><specifier pos:line="45" pos:column="18">const</specifier> <name pos:line="45" pos:column="24">xmlname</name> <type:modifier pos:line="45" pos:column="32">&amp;</type:modifier></type> <name pos:line="45" pos:column="34">x1</name></decl></param>, <param><decl><type><specifier pos:line="45" pos:column="38">const</specifier> <name pos:line="45" pos:column="44">xmlname</name> <type:modifier pos:line="45" pos:column="52">&amp;</type:modifier></type> <name pos:line="45" pos:column="54">x2</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="58">{
	<return pos:line="46" pos:column="9">return <expr><op:operator pos:line="46" pos:column="16">(</op:operator><call><name pos:line="46" pos:column="17">strcmp</name><argument_list pos:line="46" pos:column="23">(<argument><expr><name><name pos:line="46" pos:column="24">x1</name><op:operator pos:line="46" pos:column="26">.</op:operator><name pos:line="46" pos:column="27">name</name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="33">x2</name><op:operator pos:line="46" pos:column="35">.</op:operator><name pos:line="46" pos:column="36">name</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="46" pos:column="42">&lt;</op:operator> <lit:literal type="number" pos:line="46" pos:column="44">0</lit:literal><op:operator pos:line="46" pos:column="45">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="49" pos:column="1">inline</specifier> <name pos:line="49" pos:column="8">bool</name></type> <name pos:line="49" pos:column="13">lower</name><parameter_list pos:line="49" pos:column="18">(<param><decl><type><name pos:line="49" pos:column="19">char</name></type> <name pos:line="49" pos:column="24">c</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="27">{
	<return pos:line="50" pos:column="9">return <expr><op:operator pos:line="50" pos:column="16">(</op:operator><name pos:line="50" pos:column="17">c</name> <op:operator pos:line="50" pos:column="19">&gt;=</op:operator> <lit:literal type="char" pos:line="50" pos:column="22">'a'</lit:literal> <op:operator pos:line="50" pos:column="26">&amp;&amp;</op:operator> <name pos:line="50" pos:column="29">c</name> <op:operator pos:line="50" pos:column="31">&lt;=</op:operator> <lit:literal type="char" pos:line="50" pos:column="34">'z'</lit:literal><op:operator pos:line="50" pos:column="37">)</op:operator></expr>;</return>	
}</block></function>

<function><type><specifier pos:line="53" pos:column="1">inline</specifier> <name pos:line="53" pos:column="8">bool</name></type> <name pos:line="53" pos:column="13">match</name><parameter_list pos:line="53" pos:column="18">(<param><decl><type><name pos:line="53" pos:column="19">char</name></type> <name pos:line="53" pos:column="24">c1</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="28">char</name></type> <name pos:line="53" pos:column="33">c2</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="37">{
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">c1</name> <op:operator pos:line="54" pos:column="16">==</op:operator> <name pos:line="54" pos:column="19">c2</name></expr>)</condition><then pos:line="54" pos:column="22">	<return pos:line="54" pos:column="25">return <expr><lit:literal type="boolean" pos:line="54" pos:column="32">true</lit:literal></expr>;</return></then></if>
	<if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><call><name pos:line="55" pos:column="13">lower</name><argument_list pos:line="55" pos:column="18">(<argument><expr><name pos:line="55" pos:column="19">c1</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="55" pos:column="23">
		<return pos:line="56" pos:column="17">return <expr><op:operator pos:line="56" pos:column="24">(</op:operator><op:operator pos:line="56" pos:column="25">(</op:operator><name pos:line="56" pos:column="26">c1</name><op:operator pos:line="56" pos:column="28">-</op:operator><lit:literal type="number" pos:line="56" pos:column="29">32</lit:literal><op:operator pos:line="56" pos:column="31">)</op:operator> <op:operator pos:line="56" pos:column="33">==</op:operator> <name pos:line="56" pos:column="36">c2</name><op:operator pos:line="56" pos:column="38">)</op:operator></expr>;</return></then></if>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><call><name pos:line="57" pos:column="13">lower</name><argument_list pos:line="57" pos:column="18">(<argument><expr><name pos:line="57" pos:column="19">c2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="57" pos:column="23">
		<return pos:line="58" pos:column="17">return <expr><op:operator pos:line="58" pos:column="24">(</op:operator><op:operator pos:line="58" pos:column="25">(</op:operator><name pos:line="58" pos:column="26">c2</name><op:operator pos:line="58" pos:column="28">-</op:operator><lit:literal type="number" pos:line="58" pos:column="29">32</lit:literal><op:operator pos:line="58" pos:column="31">)</op:operator> <op:operator pos:line="58" pos:column="33">==</op:operator> <name pos:line="58" pos:column="36">c1</name><op:operator pos:line="58" pos:column="38">)</op:operator></expr>;</return></then></if>
	<return pos:line="59" pos:column="9">return <expr><lit:literal type="boolean" pos:line="59" pos:column="16">false</lit:literal></expr>;</return>	
}</block></function>

<comment type="line" pos:line="62" pos:column="1">//true if x1 smaller</comment>
<function><type><name pos:line="63" pos:column="1">bool</name></type> <name pos:line="63" pos:column="6">sortXML</name><parameter_list pos:line="63" pos:column="13">(<param><decl><type><specifier pos:line="63" pos:column="14">const</specifier> <name pos:line="63" pos:column="20">xmlname</name> <type:modifier pos:line="63" pos:column="28">&amp;</type:modifier></type> <name pos:line="63" pos:column="30">x1</name></decl></param>, <param><decl><type><specifier pos:line="63" pos:column="34">const</specifier> <name pos:line="63" pos:column="40">xmlname</name> <type:modifier pos:line="63" pos:column="48">&amp;</type:modifier></type> <name pos:line="63" pos:column="50">x2</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="54">{
	
	<decl_stmt><decl><type><specifier pos:line="65" pos:column="9">const</specifier> <name pos:line="65" pos:column="15">char</name> <type:modifier pos:line="65" pos:column="20">*</type:modifier></type> <name pos:line="65" pos:column="22">n1</name> <init pos:line="65" pos:column="25">= <expr><name><name pos:line="65" pos:column="27">x1</name><op:operator pos:line="65" pos:column="29">.</op:operator><name pos:line="65" pos:column="30">name</name></name></expr></init><op:operator pos:line="65" pos:column="34">,</op:operator> <type:modifier pos:line="65" pos:column="36">*</type:modifier> <name pos:line="65" pos:column="38">n2</name> <init pos:line="65" pos:column="41">= <expr><name><name pos:line="65" pos:column="43">x2</name><op:operator pos:line="65" pos:column="45">.</op:operator><name pos:line="65" pos:column="46">name</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">int</name></type> <name pos:line="66" pos:column="13">i</name> <init pos:line="66" pos:column="15">= <expr><lit:literal type="number" pos:line="66" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="67" pos:column="9">while<condition pos:line="67" pos:column="14">(<expr><call><name pos:line="67" pos:column="15">match</name><argument_list pos:line="67" pos:column="20">(<argument><expr><name><name pos:line="67" pos:column="21">n2</name><index pos:line="67" pos:column="23">[<expr><name pos:line="67" pos:column="24">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="28">n1</name><index pos:line="67" pos:column="30">[<expr><name pos:line="67" pos:column="31">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="67" pos:column="36">{
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name><name pos:line="68" pos:column="21">n1</name><index pos:line="68" pos:column="23">[<expr><name pos:line="68" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="68" pos:column="27">==</op:operator> <lit:literal type="number" pos:line="68" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="68" pos:column="32"> <block pos:line="68" pos:column="33">{
			<return pos:line="69" pos:column="25">return <expr><lit:literal type="boolean" pos:line="69" pos:column="32">true</lit:literal></expr>;</return>	<comment type="line" pos:line="69" pos:column="41">//equal	</comment>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="71" pos:column="17">i</name><op:operator pos:line="71" pos:column="18">++</op:operator></expr>;</expr_stmt>	
	}</block></while>
	
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">int</name></type> <name pos:line="74" pos:column="13">subs1</name> <init pos:line="74" pos:column="19">= <expr><call><name pos:line="74" pos:column="21">lower</name><argument_list pos:line="74" pos:column="26">(<argument><expr><name><name pos:line="74" pos:column="27">n1</name><index pos:line="74" pos:column="29">[<expr><name pos:line="74" pos:column="30">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="74" pos:column="33">?</op:operator><lit:literal type="number" pos:line="74" pos:column="34">32</lit:literal><op:operator pos:line="74" pos:column="36">:</op:operator><lit:literal type="number" pos:line="74" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">int</name></type> <name pos:line="75" pos:column="13">subs2</name> <init pos:line="75" pos:column="19">= <expr><call><name pos:line="75" pos:column="21">lower</name><argument_list pos:line="75" pos:column="26">(<argument><expr><name><name pos:line="75" pos:column="27">n2</name><index pos:line="75" pos:column="29">[<expr><name pos:line="75" pos:column="30">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="75" pos:column="33">?</op:operator><lit:literal type="number" pos:line="75" pos:column="34">32</lit:literal><op:operator pos:line="75" pos:column="36">:</op:operator><lit:literal type="number" pos:line="75" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
	
	<return pos:line="77" pos:column="9">return <expr><op:operator pos:line="77" pos:column="16">(</op:operator> <op:operator pos:line="77" pos:column="18">(</op:operator><name><name pos:line="77" pos:column="19">n1</name><index pos:line="77" pos:column="21">[<expr><name pos:line="77" pos:column="22">i</name></expr>]</index></name><op:operator pos:line="77" pos:column="24">-</op:operator><name pos:line="77" pos:column="25">subs1</name><op:operator pos:line="77" pos:column="30">)</op:operator> <op:operator pos:line="77" pos:column="32">&lt;</op:operator> <op:operator pos:line="77" pos:column="34">(</op:operator><name><name pos:line="77" pos:column="35">n2</name><index pos:line="77" pos:column="37">[<expr><name pos:line="77" pos:column="38">i</name></expr>]</index></name><op:operator pos:line="77" pos:column="40">-</op:operator><name pos:line="77" pos:column="41">subs2</name><op:operator pos:line="77" pos:column="46">)</op:operator> <op:operator pos:line="77" pos:column="48">)</op:operator></expr>;</return>
	
}</block></function>

<function_decl><type><name pos:line="81" pos:column="1">void</name></type> <name pos:line="81" pos:column="6">merge</name><parameter_list pos:line="81" pos:column="11">(<param><decl><type><name pos:line="81" pos:column="12">TiXmlElement</name> <type:modifier pos:line="81" pos:column="25">*</type:modifier></type> <name pos:line="81" pos:column="27">n1</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="31">TiXmlElement</name> <type:modifier pos:line="81" pos:column="44">*</type:modifier></type> <name pos:line="81" pos:column="46">n2</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name pos:line="83" pos:column="1">int</name></type> <name pos:line="83" pos:column="5">main</name><parameter_list pos:line="83" pos:column="9">(<param><decl><type><name pos:line="83" pos:column="10">int</name></type> <name pos:line="83" pos:column="14">argc</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="20">char</name> <type:modifier pos:line="83" pos:column="25">*</type:modifier></type><name><name pos:line="83" pos:column="26">argv</name><index pos:line="83" pos:column="30">[]</index></name></decl></param>)</parameter_list>
<block pos:line="84" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="85" pos:column="9">const</specifier> <name pos:line="85" pos:column="15">char</name> <type:modifier pos:line="85" pos:column="20">*</type:modifier></type> <name pos:line="85" pos:column="22">file</name> <init pos:line="85" pos:column="27">= <expr><name pos:line="85" pos:column="29">NULL</name></expr></init></decl>;</decl_stmt>

	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">argc</name> <op:operator pos:line="87" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="87" pos:column="20">2</lit:literal></expr>)</condition><then pos:line="87" pos:column="22"> <block pos:line="87" pos:column="23">{
		<expr_stmt><expr><name pos:line="88" pos:column="17">cout</name> <op:operator pos:line="88" pos:column="22">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="88" pos:column="25">"Usage: sorter.exe xmlfile.xml"</lit:literal> <op:operator pos:line="88" pos:column="57">&lt;&lt;</op:operator> <name pos:line="88" pos:column="60">endl</name></expr>;</expr_stmt>
		<return pos:line="89" pos:column="17">return <expr><lit:literal type="number" pos:line="89" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then></if> 
	<expr_stmt><expr><name pos:line="91" pos:column="9">file</name> <op:operator pos:line="91" pos:column="14">=</op:operator> <name><name pos:line="91" pos:column="16">argv</name><index pos:line="91" pos:column="20">[<expr><lit:literal type="number" pos:line="91" pos:column="21">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="93" pos:column="9">TiXmlDocument</name> <type:modifier pos:line="93" pos:column="23">*</type:modifier></type><name pos:line="93" pos:column="24">pXmlApi</name> <init pos:line="93" pos:column="32">= <expr><name pos:line="93" pos:column="34">NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="94" pos:column="9">pXmlApi</name> <op:operator pos:line="94" pos:column="17">=</op:operator> <op:operator pos:line="94" pos:column="19">new</op:operator> <call><name pos:line="94" pos:column="23">TiXmlDocument</name><argument_list pos:line="94" pos:column="36">(<argument><expr><name pos:line="94" pos:column="37">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="95" pos:column="9">bool</name></type> <name pos:line="95" pos:column="14">loadOkay</name> <init pos:line="95" pos:column="23">= <expr><call><name><name pos:line="95" pos:column="25">pXmlApi</name><op:operator pos:line="95" pos:column="32">-&gt;</op:operator><name pos:line="95" pos:column="34">LoadFile</name></name><argument_list pos:line="95" pos:column="42">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><op:operator pos:line="96" pos:column="13">!</op:operator><name pos:line="96" pos:column="14">loadOkay</name></expr>)</condition><then pos:line="96" pos:column="23"> <return pos:line="96" pos:column="24">return <expr><lit:literal type="number" pos:line="96" pos:column="31">1</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="98" pos:column="9">TiXmlNode</name> <type:modifier pos:line="98" pos:column="19">*</type:modifier></type><name pos:line="98" pos:column="20">root</name> <init pos:line="98" pos:column="25">= <expr><call><name><name pos:line="98" pos:column="27">pXmlApi</name><op:operator pos:line="98" pos:column="34">-&gt;</op:operator><name pos:line="98" pos:column="36">FirstChild</name></name><argument_list pos:line="98" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="47">"NotepadPlus"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><op:operator pos:line="99" pos:column="13">!</op:operator><name pos:line="99" pos:column="14">root</name></expr>)</condition><then pos:line="99" pos:column="19"> <block pos:line="99" pos:column="20">{
		<expr_stmt><expr><name pos:line="100" pos:column="17">cout</name> <op:operator pos:line="100" pos:column="22">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="100" pos:column="25">"NotepadPlus node not found\n"</lit:literal></expr>;</expr_stmt>
		<return pos:line="101" pos:column="17">return <expr><lit:literal type="number" pos:line="101" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="103" pos:column="9">TiXmlElement</name> <type:modifier pos:line="103" pos:column="22">*</type:modifier></type><name pos:line="103" pos:column="23">autoc</name> <init pos:line="103" pos:column="29">= <expr><call><name><name pos:line="103" pos:column="31">root</name><op:operator pos:line="103" pos:column="35">-&gt;</op:operator><name pos:line="103" pos:column="37">FirstChildElement</name></name><argument_list pos:line="103" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="55">"AutoComplete"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><op:operator pos:line="104" pos:column="13">!</op:operator><name pos:line="104" pos:column="14">autoc</name></expr>)</condition><then pos:line="104" pos:column="20"> <block pos:line="104" pos:column="21">{
		<expr_stmt><expr><name pos:line="105" pos:column="17">cout</name> <op:operator pos:line="105" pos:column="22">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="105" pos:column="25">"AutoComplete node not found\n"</lit:literal></expr>;</expr_stmt>
		<return pos:line="106" pos:column="17">return <expr><lit:literal type="number" pos:line="106" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><specifier pos:line="108" pos:column="9">const</specifier> <name pos:line="108" pos:column="15">char</name> <type:modifier pos:line="108" pos:column="20">*</type:modifier></type> <name pos:line="108" pos:column="22">langName</name> <init pos:line="108" pos:column="31">= <expr><call><name><name pos:line="108" pos:column="33">autoc</name><op:operator pos:line="108" pos:column="38">-&gt;</op:operator><name pos:line="108" pos:column="40">Attribute</name></name><argument_list pos:line="108" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="50">"language"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="110" pos:column="9">TiXmlElement</name> <type:modifier pos:line="110" pos:column="22">*</type:modifier></type><name pos:line="110" pos:column="23">envNode</name> <init pos:line="110" pos:column="31">= <expr><call><name><name pos:line="110" pos:column="33">autoc</name><op:operator pos:line="110" pos:column="38">-&gt;</op:operator><name pos:line="110" pos:column="40">FirstChildElement</name></name><argument_list pos:line="110" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="58">"Environment"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="111" pos:column="9">bool</name></type> <name pos:line="111" pos:column="14">ignoreCase</name> <init pos:line="111" pos:column="25">= <expr><lit:literal type="boolean" pos:line="111" pos:column="27">false</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name pos:line="112" pos:column="13">envNode</name></expr>)</condition><then pos:line="112" pos:column="21"> <block pos:line="112" pos:column="22">{
		<expr_stmt><expr><name pos:line="113" pos:column="17">cout</name> <op:operator pos:line="113" pos:column="22">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="113" pos:column="25">"Found environment settings\n"</lit:literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier pos:line="114" pos:column="17">const</specifier> <name pos:line="114" pos:column="23">char</name> <type:modifier pos:line="114" pos:column="28">*</type:modifier></type> <name pos:line="114" pos:column="30">ignoreCaseText</name> <init pos:line="114" pos:column="45">= <expr><call><name><name pos:line="114" pos:column="47">envNode</name><op:operator pos:line="114" pos:column="54">-&gt;</op:operator><name pos:line="114" pos:column="56">Attribute</name></name><argument_list pos:line="114" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="66">"ignoreCase"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="115" pos:column="17">if <condition pos:line="115" pos:column="20">(<expr><name pos:line="115" pos:column="21">ignoreCaseText</name></expr>)</condition><then pos:line="115" pos:column="36"> <block pos:line="115" pos:column="37">{
			<expr_stmt><expr><name pos:line="116" pos:column="25">ignoreCase</name> <op:operator pos:line="116" pos:column="36">=</op:operator> <op:operator pos:line="116" pos:column="38">(</op:operator><call><name pos:line="116" pos:column="39">strcmp</name><argument_list pos:line="116" pos:column="45">(<argument><expr><name pos:line="116" pos:column="46">ignoreCaseText</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="62">"yes"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="116" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="116" pos:column="72">0</lit:literal><op:operator pos:line="116" pos:column="73">)</op:operator></expr>;</expr_stmt>
			<if pos:line="117" pos:column="25">if <condition pos:line="117" pos:column="28">(<expr><name pos:line="117" pos:column="29">ignoreCase</name></expr>)</condition><then pos:line="117" pos:column="40"> <block pos:line="117" pos:column="41">{
				<expr_stmt><expr><name pos:line="118" pos:column="33">cout</name> <op:operator pos:line="118" pos:column="38">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="118" pos:column="41">"Sorting case insensitive\n"</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="119" pos:column="27">else <block pos:line="119" pos:column="32">{
				<expr_stmt><expr><name pos:line="120" pos:column="33">cout</name> <op:operator pos:line="120" pos:column="38">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="120" pos:column="41">"Sorting case sensitive\n"</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else pos:line="122" pos:column="19">else <block pos:line="122" pos:column="24">{
			<expr_stmt><expr><name pos:line="123" pos:column="25">cout</name> <op:operator pos:line="123" pos:column="30">&lt;&lt;</op:operator><lit:literal type="string" pos:line="123" pos:column="32">"Cannot find attribute \"ignoreCase\", defaulting to case sensitive sort\nConsider adding the node\n"</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then> <else pos:line="125" pos:column="11">else <block pos:line="125" pos:column="16">{
		<expr_stmt><expr><name pos:line="126" pos:column="17">cout</name> <op:operator pos:line="126" pos:column="22">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="126" pos:column="25">"No environment settings found, defaulting to case sensitive sort\nConsider adding the node\n"</lit:literal></expr>;</expr_stmt>
	}</block></else></if>

	<decl_stmt><decl><type><name><name pos:line="129" pos:column="9">vector</name><argument_list pos:line="129" pos:column="15">&lt;<argument><expr><name pos:line="129" pos:column="16">xmlname</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="129" pos:column="25">words</name></decl>;</decl_stmt>
	<for pos:line="130" pos:column="9">for (<init><decl><type><name pos:line="130" pos:column="14">TiXmlElement</name> <type:modifier pos:line="130" pos:column="27">*</type:modifier></type><name pos:line="130" pos:column="28">childNode</name> <init pos:line="130" pos:column="38">= <expr><call><name><name pos:line="130" pos:column="40">autoc</name><op:operator pos:line="130" pos:column="45">-&gt;</op:operator><name pos:line="130" pos:column="47">FirstChildElement</name></name><argument_list pos:line="130" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="65">"KeyWord"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</init>
		<condition><expr><name pos:line="131" pos:column="17">childNode</name></expr> ;</condition>
		<incr><expr><name pos:line="132" pos:column="17">childNode</name> <op:operator pos:line="132" pos:column="27">=</op:operator> <call><name><name pos:line="132" pos:column="29">childNode</name><op:operator pos:line="132" pos:column="38">-&gt;</op:operator><name pos:line="132" pos:column="40">NextSiblingElement</name></name><argument_list pos:line="132" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="59">"KeyWord"</lit:literal></expr></argument>)</argument_list></call></expr></incr> )
	<block pos:line="133" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="134" pos:column="17">const</specifier> <name pos:line="134" pos:column="23">char</name> <type:modifier pos:line="134" pos:column="28">*</type:modifier></type> <name pos:line="134" pos:column="30">name</name> <init pos:line="134" pos:column="35">= <expr><call><name><name pos:line="134" pos:column="37">childNode</name><op:operator pos:line="134" pos:column="46">-&gt;</op:operator><name pos:line="134" pos:column="48">Attribute</name></name><argument_list pos:line="134" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="58">"name"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="135" pos:column="17">if <condition pos:line="135" pos:column="20">(<expr><op:operator pos:line="135" pos:column="21">!</op:operator><name pos:line="135" pos:column="22">name</name></expr>)</condition><then pos:line="135" pos:column="27"> <block pos:line="135" pos:column="28">{
			<expr_stmt><expr><name pos:line="136" pos:column="25">cout</name> <op:operator pos:line="136" pos:column="30">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="136" pos:column="33">"Warning: KeyWord without name!, skipping...\n"</lit:literal></expr>;</expr_stmt>
			<continue pos:line="137" pos:column="25">continue;</continue>
		}</block></then> <else pos:line="138" pos:column="19">else <block pos:line="138" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="139" pos:column="25">int</name></type> <name pos:line="139" pos:column="29">i</name> <init pos:line="139" pos:column="31">= <expr><lit:literal type="number" pos:line="139" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
			<while pos:line="140" pos:column="25">while<condition pos:line="140" pos:column="30">(<expr><name><name pos:line="140" pos:column="31">name</name><index pos:line="140" pos:column="35">[<expr><name pos:line="140" pos:column="36">i</name></expr>]</index></name> <op:operator pos:line="140" pos:column="39">!=</op:operator> <lit:literal type="number" pos:line="140" pos:column="42">0</lit:literal></expr>)</condition> <block pos:line="140" pos:column="45">{
				<if pos:line="141" pos:column="33">if <condition pos:line="141" pos:column="36">(<expr><op:operator pos:line="141" pos:column="37">!</op:operator><call><name pos:line="141" pos:column="38">isalnum</name><argument_list pos:line="141" pos:column="45">(<argument><expr><name><name pos:line="141" pos:column="46">name</name><index pos:line="141" pos:column="50">[<expr><name pos:line="141" pos:column="51">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="141" pos:column="55">&amp;&amp;</op:operator> <name><name pos:line="141" pos:column="58">name</name><index pos:line="141" pos:column="62">[<expr><name pos:line="141" pos:column="63">i</name></expr>]</index></name> <op:operator pos:line="141" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="141" pos:column="69">'_'</lit:literal></expr>)</condition><then pos:line="141" pos:column="73"> <block pos:line="141" pos:column="74">{
					<expr_stmt><expr><name pos:line="142" pos:column="41">cout</name> <op:operator pos:line="142" pos:column="46">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="142" pos:column="49">"Warning, keyword "</lit:literal> <op:operator pos:line="142" pos:column="69">&lt;&lt;</op:operator> <name pos:line="142" pos:column="72">name</name> <op:operator pos:line="142" pos:column="77">&lt;&lt;</op:operator> <lit:literal type="string" pos:line="142" pos:column="80">" contains unsupported characters!\n"</lit:literal></expr>;</expr_stmt>
					<break pos:line="143" pos:column="41">break;</break>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="145" pos:column="33">i</name><op:operator pos:line="145" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><call><name><name pos:line="147" pos:column="25">words</name><op:operator pos:line="147" pos:column="30">.</op:operator><name pos:line="147" pos:column="31">push_back</name></name><argument_list pos:line="147" pos:column="40">(<argument><expr><call><name pos:line="147" pos:column="41">xmlname</name><argument_list pos:line="147" pos:column="48">(<argument><expr><name pos:line="147" pos:column="49">childNode</name></expr></argument>, <argument><expr><name pos:line="147" pos:column="60">name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>

	<if pos:line="151" pos:column="9">if <condition pos:line="151" pos:column="12">(<expr><name pos:line="151" pos:column="13">ignoreCase</name></expr>)</condition><then pos:line="151" pos:column="24">
		<expr_stmt><expr><call><name pos:line="152" pos:column="17">sort</name><argument_list pos:line="152" pos:column="21">(<argument><expr><call><name><name pos:line="152" pos:column="22">words</name><op:operator pos:line="152" pos:column="27">.</op:operator><name pos:line="152" pos:column="28">begin</name></name><argument_list pos:line="152" pos:column="33">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="152" pos:column="37">words</name><op:operator pos:line="152" pos:column="42">.</op:operator><name pos:line="152" pos:column="43">end</name></name><argument_list pos:line="152" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="152" pos:column="50">sortXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="153" pos:column="9">else
		<expr_stmt><expr><call><name pos:line="154" pos:column="17">sort</name><argument_list pos:line="154" pos:column="21">(<argument><expr><call><name><name pos:line="154" pos:column="22">words</name><op:operator pos:line="154" pos:column="27">.</op:operator><name pos:line="154" pos:column="28">begin</name></name><argument_list pos:line="154" pos:column="33">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="154" pos:column="37">words</name><op:operator pos:line="154" pos:column="42">.</op:operator><name pos:line="154" pos:column="43">end</name></name><argument_list pos:line="154" pos:column="46">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="154" pos:column="50">sortXMLCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

	<for pos:line="156" pos:column="9">for(<init><decl><type><name pos:line="156" pos:column="13">size_t</name></type> <name pos:line="156" pos:column="20">i</name> <init pos:line="156" pos:column="22">= <expr><lit:literal type="number" pos:line="156" pos:column="24">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="156" pos:column="27">i</name> <op:operator pos:line="156" pos:column="29">&lt;</op:operator> <call><name><name pos:line="156" pos:column="31">words</name><op:operator pos:line="156" pos:column="36">.</op:operator><name pos:line="156" pos:column="37">size</name></name><argument_list pos:line="156" pos:column="41">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="156" pos:column="45">i</name><op:operator pos:line="156" pos:column="46">++</op:operator></expr></incr>) <block pos:line="156" pos:column="50">{
		<comment type="line" pos:line="157" pos:column="17">//merge duplicates</comment>
		<if pos:line="158" pos:column="17">if <condition pos:line="158" pos:column="20">(<expr><op:operator pos:line="158" pos:column="21">!</op:operator><call><name pos:line="158" pos:column="22">strcmp</name><argument_list pos:line="158" pos:column="28">(<argument><expr><name><name pos:line="158" pos:column="29">words</name><index pos:line="158" pos:column="34">[<expr><name pos:line="158" pos:column="35">i</name></expr>]</index></name><op:operator pos:line="158" pos:column="37">.</op:operator><name pos:line="158" pos:column="38">name</name></expr></argument>, <argument><expr><name><name pos:line="158" pos:column="44">words</name><index pos:line="158" pos:column="49">[<expr><name pos:line="158" pos:column="50">i</name><op:operator pos:line="158" pos:column="51">-</op:operator><lit:literal type="number" pos:line="158" pos:column="52">1</lit:literal></expr>]</index></name><op:operator pos:line="158" pos:column="54">.</op:operator><name pos:line="158" pos:column="55">name</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="61"> <block pos:line="158" pos:column="62">{
			<expr_stmt><expr><call><name pos:line="159" pos:column="25">merge</name><argument_list pos:line="159" pos:column="30">(<argument><expr><name><name pos:line="159" pos:column="31">words</name><index pos:line="159" pos:column="36">[<expr><name pos:line="159" pos:column="37">i</name><op:operator pos:line="159" pos:column="38">-</op:operator><lit:literal type="number" pos:line="159" pos:column="39">1</lit:literal></expr>]</index></name><op:operator pos:line="159" pos:column="41">.</op:operator><name pos:line="159" pos:column="42">node</name></expr></argument>, <argument><expr><name><name pos:line="159" pos:column="48">words</name><index pos:line="159" pos:column="53">[<expr><name pos:line="159" pos:column="54">i</name></expr>]</index></name><op:operator pos:line="159" pos:column="56">.</op:operator><name pos:line="159" pos:column="57">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="160" pos:column="25">words</name><op:operator pos:line="160" pos:column="30">.</op:operator><name pos:line="160" pos:column="31">erase</name></name><argument_list pos:line="160" pos:column="36">(<argument><expr><call><name><name pos:line="160" pos:column="37">words</name><op:operator pos:line="160" pos:column="42">.</op:operator><name pos:line="160" pos:column="43">begin</name></name><argument_list pos:line="160" pos:column="48">()</argument_list></call> <op:operator pos:line="160" pos:column="51">+</op:operator> <name pos:line="160" pos:column="53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="164" pos:column="9">TiXmlDocument</name></type> <name pos:line="164" pos:column="23">doc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="165" pos:column="9">TiXmlDeclaration</name> <type:modifier pos:line="165" pos:column="26">*</type:modifier></type> <name pos:line="165" pos:column="28">decl</name> <init pos:line="165" pos:column="33">= <expr><op:operator pos:line="165" pos:column="35">new</op:operator> <call><name pos:line="165" pos:column="39">TiXmlDeclaration</name><argument_list pos:line="165" pos:column="55">( <argument><expr><lit:literal type="string" pos:line="165" pos:column="57">"1.0"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="165" pos:column="64">"Windows-1252"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="165" pos:column="80">""</lit:literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="166" pos:column="9">doc</name><op:operator pos:line="166" pos:column="12">.</op:operator><name pos:line="166" pos:column="13">LinkEndChild</name></name><argument_list pos:line="166" pos:column="25">( <argument><expr><name pos:line="166" pos:column="27">decl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="167" pos:column="9">TiXmlElement</name> <type:modifier pos:line="167" pos:column="22">*</type:modifier></type> <name pos:line="167" pos:column="24">element</name> <init pos:line="167" pos:column="32">= <expr><op:operator pos:line="167" pos:column="34">new</op:operator> <call><name pos:line="167" pos:column="38">TiXmlElement</name><argument_list pos:line="167" pos:column="50">( <argument><expr><lit:literal type="string" pos:line="167" pos:column="52">"NotepadPlus"</lit:literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="168" pos:column="9">doc</name><op:operator pos:line="168" pos:column="12">.</op:operator><name pos:line="168" pos:column="13">LinkEndChild</name></name><argument_list pos:line="168" pos:column="25">( <argument><expr><name pos:line="168" pos:column="27">element</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="169" pos:column="9">TiXmlElement</name> <type:modifier pos:line="169" pos:column="22">*</type:modifier></type> <name pos:line="169" pos:column="24">element2</name> <init pos:line="169" pos:column="33">= <expr><op:operator pos:line="169" pos:column="35">new</op:operator> <call><name pos:line="169" pos:column="39">TiXmlElement</name><argument_list pos:line="169" pos:column="51">( <argument><expr><lit:literal type="string" pos:line="169" pos:column="53">"AutoComplete"</lit:literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="170" pos:column="9">element</name><op:operator pos:line="170" pos:column="16">-&gt;</op:operator><name pos:line="170" pos:column="18">LinkEndChild</name></name><argument_list pos:line="170" pos:column="30">( <argument><expr><name pos:line="170" pos:column="32">element2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><name pos:line="172" pos:column="13">langName</name></expr>)</condition><then pos:line="172" pos:column="22">
		<expr_stmt><expr><call><name><name pos:line="173" pos:column="17">element2</name><op:operator pos:line="173" pos:column="25">-&gt;</op:operator><name pos:line="173" pos:column="27">SetAttribute</name></name><argument_list pos:line="173" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="40">"language"</lit:literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="52">langName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<if pos:line="175" pos:column="9">if <condition pos:line="175" pos:column="12">(<expr><name pos:line="175" pos:column="13">envNode</name></expr>)</condition><then pos:line="175" pos:column="21">
		<expr_stmt><expr><call><name><name pos:line="176" pos:column="17">element2</name><op:operator pos:line="176" pos:column="25">-&gt;</op:operator><name pos:line="176" pos:column="27">LinkEndChild</name></name><argument_list pos:line="176" pos:column="39">(<argument><expr><name pos:line="176" pos:column="40">envNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	
	<for pos:line="178" pos:column="9">for(<init><decl><type><name pos:line="178" pos:column="13">size_t</name></type> <name pos:line="178" pos:column="20">i</name> <init pos:line="178" pos:column="22">= <expr><lit:literal type="number" pos:line="178" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="178" pos:column="27">i</name> <op:operator pos:line="178" pos:column="29">&lt;</op:operator> <call><name><name pos:line="178" pos:column="31">words</name><op:operator pos:line="178" pos:column="36">.</op:operator><name pos:line="178" pos:column="37">size</name></name><argument_list pos:line="178" pos:column="41">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="178" pos:column="45">i</name><op:operator pos:line="178" pos:column="46">++</op:operator></expr></incr>) <block pos:line="178" pos:column="50">{
		<expr_stmt><expr><call><name><name pos:line="179" pos:column="17">element2</name><op:operator pos:line="179" pos:column="25">-&gt;</op:operator><name pos:line="179" pos:column="27">LinkEndChild</name></name><argument_list pos:line="179" pos:column="39">(<argument><expr><name><name pos:line="179" pos:column="40">words</name><index pos:line="179" pos:column="45">[<expr><name pos:line="179" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="179" pos:column="48">.</op:operator><name pos:line="179" pos:column="49">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name><name pos:line="182" pos:column="9">doc</name><op:operator pos:line="182" pos:column="12">.</op:operator><name pos:line="182" pos:column="13">SaveFile</name></name><argument_list pos:line="182" pos:column="21">( <argument><expr><name pos:line="182" pos:column="23">file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<return pos:line="184" pos:column="9">return <expr><lit:literal type="number" pos:line="184" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="187" pos:column="1">void</name></type> <name pos:line="187" pos:column="6">merge</name><parameter_list pos:line="187" pos:column="11">(<param><decl><type><name pos:line="187" pos:column="12">TiXmlElement</name> <type:modifier pos:line="187" pos:column="25">*</type:modifier></type> <name pos:line="187" pos:column="27">n1</name></decl></param>, <param><decl><type><name pos:line="187" pos:column="31">TiXmlElement</name> <type:modifier pos:line="187" pos:column="44">*</type:modifier></type> <name pos:line="187" pos:column="46">n2</name></decl></param>)</parameter_list> <block pos:line="187" pos:column="50">{
	<decl_stmt><decl><type><specifier pos:line="188" pos:column="9">const</specifier> <name pos:line="188" pos:column="15">char</name> <type:modifier pos:line="188" pos:column="20">*</type:modifier></type> <name pos:line="188" pos:column="22">funcAttr</name> <init pos:line="188" pos:column="31">= <expr><name pos:line="188" pos:column="33">NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="189" pos:column="9">funcAttr</name> <op:operator pos:line="189" pos:column="18">=</op:operator> <call><name><name pos:line="189" pos:column="20">n2</name><op:operator pos:line="189" pos:column="22">-&gt;</op:operator><name pos:line="189" pos:column="24">Attribute</name></name><argument_list pos:line="189" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="189" pos:column="34">"func"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="190" pos:column="9">if <condition pos:line="190" pos:column="12">(<expr><op:operator pos:line="190" pos:column="13">!</op:operator><name pos:line="190" pos:column="14">funcAttr</name> <op:operator pos:line="190" pos:column="23">||</op:operator> <op:operator pos:line="190" pos:column="26">!</op:operator><call><name pos:line="190" pos:column="27">strcmp</name><argument_list pos:line="190" pos:column="33">(<argument><expr><name pos:line="190" pos:column="34">funcAttr</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="190" pos:column="44">"yes"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="190" pos:column="51"> <block pos:line="190" pos:column="52">{
		<return pos:line="191" pos:column="17">return;</return>	
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="194" pos:column="9">n1</name><op:operator pos:line="194" pos:column="11">-&gt;</op:operator><name pos:line="194" pos:column="13">SetAttribute</name></name><argument_list pos:line="194" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="26">"func"</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="194" pos:column="34">"yes"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for pos:line="196" pos:column="9">for (<init><decl><type><name pos:line="196" pos:column="14">TiXmlElement</name> <type:modifier pos:line="196" pos:column="27">*</type:modifier></type><name pos:line="196" pos:column="28">childNode</name> <init pos:line="196" pos:column="38">= <expr><call><name><name pos:line="196" pos:column="40">n2</name><op:operator pos:line="196" pos:column="42">-&gt;</op:operator><name pos:line="196" pos:column="44">FirstChildElement</name></name><argument_list pos:line="196" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="196" pos:column="62">"Overload"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</init>
		<condition><expr><name pos:line="197" pos:column="17">childNode</name></expr> ;</condition>
		<incr><expr><name pos:line="198" pos:column="17">childNode</name> <op:operator pos:line="198" pos:column="27">=</op:operator> <call><name><name pos:line="198" pos:column="29">childNode</name><op:operator pos:line="198" pos:column="38">-&gt;</op:operator><name pos:line="198" pos:column="40">NextSiblingElement</name></name><argument_list pos:line="198" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="198" pos:column="59">"Overload"</lit:literal></expr></argument>)</argument_list></call></expr></incr> )
	<block pos:line="199" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="200" pos:column="17">n1</name><op:operator pos:line="200" pos:column="19">-&gt;</op:operator><name pos:line="200" pos:column="21">LinkEndChild</name></name><argument_list pos:line="200" pos:column="33">(<argument><expr><name pos:line="200" pos:column="34">childNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<return pos:line="203" pos:column="9">return;</return>
}</block></function>
</unit>
