<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\Catalogue.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file KeyWords.cxx
 ** Colourise for particular languages.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Catalogue.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef</cpp:directive> <name pos:line="24" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="25" pos:column="1">using namespace <name pos:line="25" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier pos:line="28" pos:column="1">static</specifier> <name><name pos:line="28" pos:column="8">std</name><op:operator pos:line="28" pos:column="11">::</op:operator><name><name pos:line="28" pos:column="13">vector</name><argument_list pos:line="28" pos:column="19">&lt;<argument><expr><name pos:line="28" pos:column="20">LexerModule</name> <type:modifier pos:line="28" pos:column="32">*</type:modifier></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="28" pos:column="35">lexerCatalogue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="29" pos:column="1">static</specifier> <name pos:line="29" pos:column="8">int</name></type> <name pos:line="29" pos:column="12">nextLanguage</name> <init pos:line="29" pos:column="25">= <expr><name pos:line="29" pos:column="27">SCLEX_AUTOMATIC</name><op:operator pos:line="29" pos:column="42">+</op:operator><lit:literal type="number" pos:line="29" pos:column="43">1</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="31" pos:column="1">const</specifier> <name pos:line="31" pos:column="7">LexerModule</name> <type:modifier pos:line="31" pos:column="19">*</type:modifier></type><name><name pos:line="31" pos:column="20">Catalogue</name><op:operator pos:line="31" pos:column="29">::</op:operator><name pos:line="31" pos:column="31">Find</name></name><parameter_list pos:line="31" pos:column="35">(<param><decl><type><name pos:line="31" pos:column="36">int</name></type> <name pos:line="31" pos:column="40">language</name></decl></param>)</parameter_list> <block pos:line="31" pos:column="50">{
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">Scintilla_LinkLexers</name><argument_list pos:line="32" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
	<for pos:line="33" pos:column="9">for (<init><decl><type><name><name pos:line="33" pos:column="14">std</name><op:operator pos:line="33" pos:column="17">::</op:operator><name><name pos:line="33" pos:column="19">vector</name><argument_list pos:line="33" pos:column="25">&lt;<argument><expr><name pos:line="33" pos:column="26">LexerModule</name> <op:operator pos:line="33" pos:column="38">*</op:operator></expr></argument>&gt;</argument_list></name><op:operator pos:line="33" pos:column="40">::</op:operator><name pos:line="33" pos:column="42">iterator</name></name></type> <name pos:line="33" pos:column="51">it</name><init pos:line="33" pos:column="53">=<expr><call><name><name pos:line="33" pos:column="54">lexerCatalogue</name><op:operator pos:line="33" pos:column="68">.</op:operator><name pos:line="33" pos:column="69">begin</name></name><argument_list pos:line="33" pos:column="74">()</argument_list></call></expr></init></decl>;</init>
		<condition><expr><name pos:line="34" pos:column="17">it</name> <op:operator pos:line="34" pos:column="20">!=</op:operator> <call><name><name pos:line="34" pos:column="23">lexerCatalogue</name><op:operator pos:line="34" pos:column="37">.</op:operator><name pos:line="34" pos:column="38">end</name></name><argument_list pos:line="34" pos:column="41">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="34" pos:column="45">++</op:operator><name pos:line="34" pos:column="47">it</name></expr></incr>) <block pos:line="34" pos:column="51">{
		<if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><call><name pos:line="35" pos:column="21">(<type:modifier pos:line="35" pos:column="22">*</type:modifier><name pos:line="35" pos:column="23">it</name>)<op:operator pos:line="35" pos:column="26">-&gt;</op:operator><name pos:line="35" pos:column="28">GetLanguage</name></name><argument_list pos:line="35" pos:column="39">()</argument_list></call> <op:operator pos:line="35" pos:column="42">==</op:operator> <name pos:line="35" pos:column="45">language</name></expr>)</condition><then pos:line="35" pos:column="54"> <block pos:line="35" pos:column="55">{
			<return pos:line="36" pos:column="25">return <expr><op:operator pos:line="36" pos:column="32">*</op:operator><name pos:line="36" pos:column="33">it</name></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="39" pos:column="9">return <expr><lit:literal type="number" pos:line="39" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="42" pos:column="1">const</specifier> <name pos:line="42" pos:column="7">LexerModule</name> <type:modifier pos:line="42" pos:column="19">*</type:modifier></type><name><name pos:line="42" pos:column="20">Catalogue</name><op:operator pos:line="42" pos:column="29">::</op:operator><name pos:line="42" pos:column="31">Find</name></name><parameter_list pos:line="42" pos:column="35">(<param><decl><type><specifier pos:line="42" pos:column="36">const</specifier> <name pos:line="42" pos:column="42">char</name> <type:modifier pos:line="42" pos:column="47">*</type:modifier></type><name pos:line="42" pos:column="48">languageName</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="62">{
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">Scintilla_LinkLexers</name><argument_list pos:line="43" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">languageName</name></expr>)</condition><then pos:line="44" pos:column="26"> <block pos:line="44" pos:column="27">{
		<for pos:line="45" pos:column="17">for (<init><decl><type><name><name pos:line="45" pos:column="22">std</name><op:operator pos:line="45" pos:column="25">::</op:operator><name><name pos:line="45" pos:column="27">vector</name><argument_list pos:line="45" pos:column="33">&lt;<argument><expr><name pos:line="45" pos:column="34">LexerModule</name> <op:operator pos:line="45" pos:column="46">*</op:operator></expr></argument>&gt;</argument_list></name><op:operator pos:line="45" pos:column="48">::</op:operator><name pos:line="45" pos:column="50">iterator</name></name></type> <name pos:line="45" pos:column="59">it</name><init pos:line="45" pos:column="61">=<expr><call><name><name pos:line="45" pos:column="62">lexerCatalogue</name><op:operator pos:line="45" pos:column="76">.</op:operator><name pos:line="45" pos:column="77">begin</name></name><argument_list pos:line="45" pos:column="82">()</argument_list></call></expr></init></decl>;</init>
			<condition><expr><name pos:line="46" pos:column="25">it</name> <op:operator pos:line="46" pos:column="28">!=</op:operator> <call><name><name pos:line="46" pos:column="31">lexerCatalogue</name><op:operator pos:line="46" pos:column="45">.</op:operator><name pos:line="46" pos:column="46">end</name></name><argument_list pos:line="46" pos:column="49">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="46" pos:column="53">++</op:operator><name pos:line="46" pos:column="55">it</name></expr></incr>) <block pos:line="46" pos:column="59">{
			<if pos:line="47" pos:column="25">if <condition pos:line="47" pos:column="28">(<expr><name pos:line="47" pos:column="29">(<type:modifier pos:line="47" pos:column="30">*</type:modifier><name pos:line="47" pos:column="31">it</name>)<op:operator pos:line="47" pos:column="34">-&gt;</op:operator><name pos:line="47" pos:column="36">languageName</name></name> <op:operator pos:line="47" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="47" pos:column="52">(</op:operator><lit:literal type="number" pos:line="47" pos:column="53">0</lit:literal> <op:operator pos:line="47" pos:column="55">==</op:operator> <call><name pos:line="47" pos:column="58">strcmp</name><argument_list pos:line="47" pos:column="64">(<argument><expr><name pos:line="47" pos:column="65">(<type:modifier pos:line="47" pos:column="66">*</type:modifier><name pos:line="47" pos:column="67">it</name>)<op:operator pos:line="47" pos:column="70">-&gt;</op:operator><name pos:line="47" pos:column="72">languageName</name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="86">languageName</name></expr></argument>)</argument_list></call><op:operator pos:line="47" pos:column="99">)</op:operator></expr>)</condition><then pos:line="47" pos:column="101"> <block pos:line="47" pos:column="102">{
				<return pos:line="48" pos:column="33">return <expr><op:operator pos:line="48" pos:column="40">*</op:operator><name pos:line="48" pos:column="41">it</name></expr>;</return>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
	<return pos:line="52" pos:column="9">return <expr><lit:literal type="number" pos:line="52" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="55" pos:column="1">void</name></type> <name><name pos:line="55" pos:column="6">Catalogue</name><op:operator pos:line="55" pos:column="15">::</op:operator><name pos:line="55" pos:column="17">AddLexerModule</name></name><parameter_list pos:line="55" pos:column="31">(<param><decl><type><name pos:line="55" pos:column="32">LexerModule</name> <type:modifier pos:line="55" pos:column="44">*</type:modifier></type><name pos:line="55" pos:column="45">plm</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="50">{
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><call><name><name pos:line="56" pos:column="13">plm</name><op:operator pos:line="56" pos:column="16">-&gt;</op:operator><name pos:line="56" pos:column="18">GetLanguage</name></name><argument_list pos:line="56" pos:column="29">()</argument_list></call> <op:operator pos:line="56" pos:column="32">==</op:operator> <name pos:line="56" pos:column="35">SCLEX_AUTOMATIC</name></expr>)</condition><then pos:line="56" pos:column="51"> <block pos:line="56" pos:column="52">{
		<expr_stmt><expr><name><name pos:line="57" pos:column="17">plm</name><op:operator pos:line="57" pos:column="20">-&gt;</op:operator><name pos:line="57" pos:column="22">language</name></name> <op:operator pos:line="57" pos:column="31">=</op:operator> <name pos:line="57" pos:column="33">nextLanguage</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="58" pos:column="17">nextLanguage</name><op:operator pos:line="58" pos:column="29">++</op:operator></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="60" pos:column="9">lexerCatalogue</name><op:operator pos:line="60" pos:column="23">.</op:operator><name pos:line="60" pos:column="24">push_back</name></name><argument_list pos:line="60" pos:column="33">(<argument><expr><name pos:line="60" pos:column="34">plm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="63" pos:column="1">// Alternative historical name for Scintilla_LinkLexers</comment>
<function><type><name pos:line="64" pos:column="1">int</name></type> <name pos:line="64" pos:column="5">wxForceScintillaLexers</name><parameter_list pos:line="64" pos:column="27">(<param><decl><type><name pos:line="64" pos:column="28">void</name></type></decl></param>)</parameter_list> <block pos:line="64" pos:column="34">{
	<return pos:line="65" pos:column="9">return <expr><call><name pos:line="65" pos:column="16">Scintilla_LinkLexers</name><argument_list pos:line="65" pos:column="36">()</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="68" pos:column="1">// To add or remove a lexer, add or remove its file and run LexGen.py.</comment>

<comment type="line" pos:line="70" pos:column="1">// Force a reference to all of the Scintilla lexers so that the linker will</comment>
<comment type="line" pos:line="71" pos:column="1">// not remove the code of the lexers.</comment>
<function><type><name pos:line="72" pos:column="1">int</name></type> <name pos:line="72" pos:column="5">Scintilla_LinkLexers</name><parameter_list pos:line="72" pos:column="25">()</parameter_list> <block pos:line="72" pos:column="28">{

	<decl_stmt><decl><type><specifier pos:line="74" pos:column="9">static</specifier> <name pos:line="74" pos:column="16">int</name></type> <name pos:line="74" pos:column="20">initialised</name> <init pos:line="74" pos:column="32">= <expr><lit:literal type="number" pos:line="74" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">initialised</name></expr>)</condition><then pos:line="75" pos:column="25">
		<return pos:line="76" pos:column="17">return <expr><lit:literal type="number" pos:line="76" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><name pos:line="77" pos:column="9">initialised</name> <op:operator pos:line="77" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="77" pos:column="23">1</lit:literal></expr>;</expr_stmt>

<comment type="line" pos:line="79" pos:column="1">// Shorten the code that declares a lexer and ensures it is linked in by calling a method.</comment>
<cpp:define pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="80" pos:column="9">LINK_LEXER</name><parameter_list pos:line="80" pos:column="19">(<param><type><name pos:line="80" pos:column="20">lexer</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="80" pos:column="27">extern LexerModule lexer; Catalogue::AddLexerModule(&amp;lexer);</cpp:value></cpp:define>

<comment type="line" pos:line="82" pos:column="1">//++Autogenerated -- run src/LexGen.py to regenerate</comment>
<comment type="line" pos:line="83" pos:column="1">//**\(\tLINK_LEXER(\*);\n\)</comment>
	<expr_stmt><expr><call><name pos:line="84" pos:column="9">LINK_LEXER</name><argument_list pos:line="84" pos:column="19">(<argument><expr><name pos:line="84" pos:column="20">lmA68k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="85" pos:column="9">LINK_LEXER</name><argument_list pos:line="85" pos:column="19">(<argument><expr><name pos:line="85" pos:column="20">lmAbaqus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">LINK_LEXER</name><argument_list pos:line="86" pos:column="19">(<argument><expr><name pos:line="86" pos:column="20">lmAda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="87" pos:column="9">LINK_LEXER</name><argument_list pos:line="87" pos:column="19">(<argument><expr><name pos:line="87" pos:column="20">lmAns1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="88" pos:column="9">LINK_LEXER</name><argument_list pos:line="88" pos:column="19">(<argument><expr><name pos:line="88" pos:column="20">lmAPDL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="89" pos:column="9">LINK_LEXER</name><argument_list pos:line="89" pos:column="19">(<argument><expr><name pos:line="89" pos:column="20">lmAsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="90" pos:column="9">LINK_LEXER</name><argument_list pos:line="90" pos:column="19">(<argument><expr><name pos:line="90" pos:column="20">lmASY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="91" pos:column="9">LINK_LEXER</name><argument_list pos:line="91" pos:column="19">(<argument><expr><name pos:line="91" pos:column="20">lmAU3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="92" pos:column="9">LINK_LEXER</name><argument_list pos:line="92" pos:column="19">(<argument><expr><name pos:line="92" pos:column="20">lmAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="93" pos:column="9">LINK_LEXER</name><argument_list pos:line="93" pos:column="19">(<argument><expr><name pos:line="93" pos:column="20">lmBaan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="94" pos:column="9">LINK_LEXER</name><argument_list pos:line="94" pos:column="19">(<argument><expr><name pos:line="94" pos:column="20">lmBash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">LINK_LEXER</name><argument_list pos:line="95" pos:column="19">(<argument><expr><name pos:line="95" pos:column="20">lmBatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="96" pos:column="9">LINK_LEXER</name><argument_list pos:line="96" pos:column="19">(<argument><expr><name pos:line="96" pos:column="20">lmBlitzBasic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="97" pos:column="9">LINK_LEXER</name><argument_list pos:line="97" pos:column="19">(<argument><expr><name pos:line="97" pos:column="20">lmBullant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="98" pos:column="9">LINK_LEXER</name><argument_list pos:line="98" pos:column="19">(<argument><expr><name pos:line="98" pos:column="20">lmCaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="99" pos:column="9">LINK_LEXER</name><argument_list pos:line="99" pos:column="19">(<argument><expr><name pos:line="99" pos:column="20">lmClw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="100" pos:column="9">LINK_LEXER</name><argument_list pos:line="100" pos:column="19">(<argument><expr><name pos:line="100" pos:column="20">lmClwNoCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="101" pos:column="9">LINK_LEXER</name><argument_list pos:line="101" pos:column="19">(<argument><expr><name pos:line="101" pos:column="20">lmCmake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="102" pos:column="9">LINK_LEXER</name><argument_list pos:line="102" pos:column="19">(<argument><expr><name pos:line="102" pos:column="20">lmCOBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="103" pos:column="9">LINK_LEXER</name><argument_list pos:line="103" pos:column="19">(<argument><expr><name pos:line="103" pos:column="20">lmConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="104" pos:column="9">LINK_LEXER</name><argument_list pos:line="104" pos:column="19">(<argument><expr><name pos:line="104" pos:column="20">lmCPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="105" pos:column="9">LINK_LEXER</name><argument_list pos:line="105" pos:column="19">(<argument><expr><name pos:line="105" pos:column="20">lmCPPNoCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="106" pos:column="9">LINK_LEXER</name><argument_list pos:line="106" pos:column="19">(<argument><expr><name pos:line="106" pos:column="20">lmCsound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="107" pos:column="9">LINK_LEXER</name><argument_list pos:line="107" pos:column="19">(<argument><expr><name pos:line="107" pos:column="20">lmCss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="108" pos:column="9">LINK_LEXER</name><argument_list pos:line="108" pos:column="19">(<argument><expr><name pos:line="108" pos:column="20">lmD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="109" pos:column="9">LINK_LEXER</name><argument_list pos:line="109" pos:column="19">(<argument><expr><name pos:line="109" pos:column="20">lmDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="110" pos:column="9">LINK_LEXER</name><argument_list pos:line="110" pos:column="19">(<argument><expr><name pos:line="110" pos:column="20">lmEiffel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="111" pos:column="9">LINK_LEXER</name><argument_list pos:line="111" pos:column="19">(<argument><expr><name pos:line="111" pos:column="20">lmEiffelkw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">LINK_LEXER</name><argument_list pos:line="112" pos:column="19">(<argument><expr><name pos:line="112" pos:column="20">lmErlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">LINK_LEXER</name><argument_list pos:line="113" pos:column="19">(<argument><expr><name pos:line="113" pos:column="20">lmErrorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="114" pos:column="9">LINK_LEXER</name><argument_list pos:line="114" pos:column="19">(<argument><expr><name pos:line="114" pos:column="20">lmESCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="115" pos:column="9">LINK_LEXER</name><argument_list pos:line="115" pos:column="19">(<argument><expr><name pos:line="115" pos:column="20">lmF77</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="116" pos:column="9">LINK_LEXER</name><argument_list pos:line="116" pos:column="19">(<argument><expr><name pos:line="116" pos:column="20">lmFlagShip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="117" pos:column="9">LINK_LEXER</name><argument_list pos:line="117" pos:column="19">(<argument><expr><name pos:line="117" pos:column="20">lmForth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="118" pos:column="9">LINK_LEXER</name><argument_list pos:line="118" pos:column="19">(<argument><expr><name pos:line="118" pos:column="20">lmFortran</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="119" pos:column="9">LINK_LEXER</name><argument_list pos:line="119" pos:column="19">(<argument><expr><name pos:line="119" pos:column="20">lmFreeBasic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="120" pos:column="9">LINK_LEXER</name><argument_list pos:line="120" pos:column="19">(<argument><expr><name pos:line="120" pos:column="20">lmGAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="121" pos:column="9">LINK_LEXER</name><argument_list pos:line="121" pos:column="19">(<argument><expr><name pos:line="121" pos:column="20">lmGui4Cli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="122" pos:column="9">LINK_LEXER</name><argument_list pos:line="122" pos:column="19">(<argument><expr><name pos:line="122" pos:column="20">lmHaskell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="123" pos:column="9">LINK_LEXER</name><argument_list pos:line="123" pos:column="19">(<argument><expr><name pos:line="123" pos:column="20">lmHTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="124" pos:column="9">LINK_LEXER</name><argument_list pos:line="124" pos:column="19">(<argument><expr><name pos:line="124" pos:column="20">lmInno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="125" pos:column="9">LINK_LEXER</name><argument_list pos:line="125" pos:column="19">(<argument><expr><name pos:line="125" pos:column="20">lmKix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="126" pos:column="9">LINK_LEXER</name><argument_list pos:line="126" pos:column="19">(<argument><expr><name pos:line="126" pos:column="20">lmLatex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="127" pos:column="9">LINK_LEXER</name><argument_list pos:line="127" pos:column="19">(<argument><expr><name pos:line="127" pos:column="20">lmLISP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="128" pos:column="9">LINK_LEXER</name><argument_list pos:line="128" pos:column="19">(<argument><expr><name pos:line="128" pos:column="20">lmLot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="129" pos:column="9">LINK_LEXER</name><argument_list pos:line="129" pos:column="19">(<argument><expr><name pos:line="129" pos:column="20">lmLout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="130" pos:column="9">LINK_LEXER</name><argument_list pos:line="130" pos:column="19">(<argument><expr><name pos:line="130" pos:column="20">lmLua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="131" pos:column="9">LINK_LEXER</name><argument_list pos:line="131" pos:column="19">(<argument><expr><name pos:line="131" pos:column="20">lmMagikSF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="132" pos:column="9">LINK_LEXER</name><argument_list pos:line="132" pos:column="19">(<argument><expr><name pos:line="132" pos:column="20">lmMake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="133" pos:column="9">LINK_LEXER</name><argument_list pos:line="133" pos:column="19">(<argument><expr><name pos:line="133" pos:column="20">lmMarkdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="134" pos:column="9">LINK_LEXER</name><argument_list pos:line="134" pos:column="19">(<argument><expr><name pos:line="134" pos:column="20">lmMatlab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="135" pos:column="9">LINK_LEXER</name><argument_list pos:line="135" pos:column="19">(<argument><expr><name pos:line="135" pos:column="20">lmMETAPOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="136" pos:column="9">LINK_LEXER</name><argument_list pos:line="136" pos:column="19">(<argument><expr><name pos:line="136" pos:column="20">lmMMIXAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="137" pos:column="9">LINK_LEXER</name><argument_list pos:line="137" pos:column="19">(<argument><expr><name pos:line="137" pos:column="20">lmModula</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="138" pos:column="9">LINK_LEXER</name><argument_list pos:line="138" pos:column="19">(<argument><expr><name pos:line="138" pos:column="20">lmMSSQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="139" pos:column="9">LINK_LEXER</name><argument_list pos:line="139" pos:column="19">(<argument><expr><name pos:line="139" pos:column="20">lmMySQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="140" pos:column="9">LINK_LEXER</name><argument_list pos:line="140" pos:column="19">(<argument><expr><name pos:line="140" pos:column="20">lmNimrod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="141" pos:column="9">LINK_LEXER</name><argument_list pos:line="141" pos:column="19">(<argument><expr><name pos:line="141" pos:column="20">lmNncrontab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="142" pos:column="9">LINK_LEXER</name><argument_list pos:line="142" pos:column="19">(<argument><expr><name pos:line="142" pos:column="20">lmNsis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="143" pos:column="9">LINK_LEXER</name><argument_list pos:line="143" pos:column="19">(<argument><expr><name pos:line="143" pos:column="20">lmNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="144" pos:column="9">LINK_LEXER</name><argument_list pos:line="144" pos:column="19">(<argument><expr><name pos:line="144" pos:column="20">lmObjC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="145" pos:column="9">LINK_LEXER</name><argument_list pos:line="145" pos:column="19">(<argument><expr><name pos:line="145" pos:column="20">lmOctave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="146" pos:column="9">LINK_LEXER</name><argument_list pos:line="146" pos:column="19">(<argument><expr><name pos:line="146" pos:column="20">lmOpal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="147" pos:column="9">LINK_LEXER</name><argument_list pos:line="147" pos:column="19">(<argument><expr><name pos:line="147" pos:column="20">lmPascal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="148" pos:column="9">LINK_LEXER</name><argument_list pos:line="148" pos:column="19">(<argument><expr><name pos:line="148" pos:column="20">lmPB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="149" pos:column="9">LINK_LEXER</name><argument_list pos:line="149" pos:column="19">(<argument><expr><name pos:line="149" pos:column="20">lmPerl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="150" pos:column="9">LINK_LEXER</name><argument_list pos:line="150" pos:column="19">(<argument><expr><name pos:line="150" pos:column="20">lmPHPSCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="151" pos:column="9">LINK_LEXER</name><argument_list pos:line="151" pos:column="19">(<argument><expr><name pos:line="151" pos:column="20">lmPLM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="152" pos:column="9">LINK_LEXER</name><argument_list pos:line="152" pos:column="19">(<argument><expr><name pos:line="152" pos:column="20">lmPo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="153" pos:column="9">LINK_LEXER</name><argument_list pos:line="153" pos:column="19">(<argument><expr><name pos:line="153" pos:column="20">lmPOV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="154" pos:column="9">LINK_LEXER</name><argument_list pos:line="154" pos:column="19">(<argument><expr><name pos:line="154" pos:column="20">lmPowerPro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="155" pos:column="9">LINK_LEXER</name><argument_list pos:line="155" pos:column="19">(<argument><expr><name pos:line="155" pos:column="20">lmPowerShell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="156" pos:column="9">LINK_LEXER</name><argument_list pos:line="156" pos:column="19">(<argument><expr><name pos:line="156" pos:column="20">lmProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="157" pos:column="9">LINK_LEXER</name><argument_list pos:line="157" pos:column="19">(<argument><expr><name pos:line="157" pos:column="20">lmProps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="158" pos:column="9">LINK_LEXER</name><argument_list pos:line="158" pos:column="19">(<argument><expr><name pos:line="158" pos:column="20">lmPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="159" pos:column="9">LINK_LEXER</name><argument_list pos:line="159" pos:column="19">(<argument><expr><name pos:line="159" pos:column="20">lmPureBasic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="160" pos:column="9">LINK_LEXER</name><argument_list pos:line="160" pos:column="19">(<argument><expr><name pos:line="160" pos:column="20">lmPython</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="161" pos:column="9">LINK_LEXER</name><argument_list pos:line="161" pos:column="19">(<argument><expr><name pos:line="161" pos:column="20">lmR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="162" pos:column="9">LINK_LEXER</name><argument_list pos:line="162" pos:column="19">(<argument><expr><name pos:line="162" pos:column="20">lmREBOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="163" pos:column="9">LINK_LEXER</name><argument_list pos:line="163" pos:column="19">(<argument><expr><name pos:line="163" pos:column="20">lmRuby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="164" pos:column="9">LINK_LEXER</name><argument_list pos:line="164" pos:column="19">(<argument><expr><name pos:line="164" pos:column="20">lmScriptol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="165" pos:column="9">LINK_LEXER</name><argument_list pos:line="165" pos:column="19">(<argument><expr><name pos:line="165" pos:column="20">lmSearchResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="166" pos:column="9">LINK_LEXER</name><argument_list pos:line="166" pos:column="19">(<argument><expr><name pos:line="166" pos:column="20">lmSmalltalk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="167" pos:column="9">LINK_LEXER</name><argument_list pos:line="167" pos:column="19">(<argument><expr><name pos:line="167" pos:column="20">lmSML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="168" pos:column="9">LINK_LEXER</name><argument_list pos:line="168" pos:column="19">(<argument><expr><name pos:line="168" pos:column="20">lmSorc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="169" pos:column="9">LINK_LEXER</name><argument_list pos:line="169" pos:column="19">(<argument><expr><name pos:line="169" pos:column="20">lmSpecman</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="170" pos:column="9">LINK_LEXER</name><argument_list pos:line="170" pos:column="19">(<argument><expr><name pos:line="170" pos:column="20">lmSpice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="171" pos:column="9">LINK_LEXER</name><argument_list pos:line="171" pos:column="19">(<argument><expr><name pos:line="171" pos:column="20">lmSQL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="172" pos:column="9">LINK_LEXER</name><argument_list pos:line="172" pos:column="19">(<argument><expr><name pos:line="172" pos:column="20">lmTACL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="173" pos:column="9">LINK_LEXER</name><argument_list pos:line="173" pos:column="19">(<argument><expr><name pos:line="173" pos:column="20">lmTADS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="174" pos:column="9">LINK_LEXER</name><argument_list pos:line="174" pos:column="19">(<argument><expr><name pos:line="174" pos:column="20">lmTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="175" pos:column="9">LINK_LEXER</name><argument_list pos:line="175" pos:column="19">(<argument><expr><name pos:line="175" pos:column="20">lmTCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="176" pos:column="9">LINK_LEXER</name><argument_list pos:line="176" pos:column="19">(<argument><expr><name pos:line="176" pos:column="20">lmTeX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="177" pos:column="9">LINK_LEXER</name><argument_list pos:line="177" pos:column="19">(<argument><expr><name pos:line="177" pos:column="20">lmTxt2tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="178" pos:column="9">LINK_LEXER</name><argument_list pos:line="178" pos:column="19">(<argument><expr><name pos:line="178" pos:column="20">lmUserDefine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="179" pos:column="9">LINK_LEXER</name><argument_list pos:line="179" pos:column="19">(<argument><expr><name pos:line="179" pos:column="20">lmVB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="180" pos:column="9">LINK_LEXER</name><argument_list pos:line="180" pos:column="19">(<argument><expr><name pos:line="180" pos:column="20">lmVBScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="181" pos:column="9">LINK_LEXER</name><argument_list pos:line="181" pos:column="19">(<argument><expr><name pos:line="181" pos:column="20">lmVerilog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="182" pos:column="9">LINK_LEXER</name><argument_list pos:line="182" pos:column="19">(<argument><expr><name pos:line="182" pos:column="20">lmVHDL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="183" pos:column="9">LINK_LEXER</name><argument_list pos:line="183" pos:column="19">(<argument><expr><name pos:line="183" pos:column="20">lmXML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="184" pos:column="9">LINK_LEXER</name><argument_list pos:line="184" pos:column="19">(<argument><expr><name pos:line="184" pos:column="20">lmYAML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:line="186" pos:column="1">//--Autogenerated -- end of automatically generated section</comment>

	<return pos:line="188" pos:column="9">return <expr><lit:literal type="number" pos:line="188" pos:column="16">1</lit:literal></expr>;</return>
}</block></function>
</unit>
