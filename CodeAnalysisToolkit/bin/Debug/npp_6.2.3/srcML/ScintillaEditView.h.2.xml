<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\ScintillaEditView.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">SCINTILLA_EDIT_VIEW_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">SCINTILLA_EDIT_VIEW_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">SCINTILLA_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//SCINTILLA_H</comment>

<cpp:ifndef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifndef</cpp:directive> <name pos:line="36" pos:column="9">SCINTILLA_REF_H</name></cpp:ifndef>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"ScintillaRef.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="38" pos:column="8">//SCINTILLA_REF_H</comment>

<cpp:ifndef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifndef</cpp:directive> <name pos:line="40" pos:column="9">SCILEXER_H</name></cpp:ifndef>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="41" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="42" pos:column="8">//SCILEXER_H</comment>

<cpp:ifndef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifndef</cpp:directive> <name pos:line="44" pos:column="9">BUFFER_H</name></cpp:ifndef>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"Buffer.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="46" pos:column="8">//BUFFER_H</comment>

<cpp:ifndef pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">ifndef</cpp:directive> <name pos:line="48" pos:column="9">COLORS_H</name></cpp:ifndef>
<cpp:include pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="49" pos:column="10">"colors.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="50" pos:column="8">//COLORS_H</comment>

<cpp:ifndef pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">ifndef</cpp:directive> <name pos:line="52" pos:column="9">USER_DEFINE_H</name></cpp:ifndef>
<cpp:include pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="53" pos:column="10">"UserDefineDialog.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="54" pos:column="8">//USER_DEFINE_H</comment>

<cpp:ifndef pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">ifndef</cpp:directive> <name pos:line="56" pos:column="9">XPM_ICON_H</name></cpp:ifndef>
<cpp:include pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="57" pos:column="10">"xpm_icons.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="58" pos:column="8">//XPM_ICON_H</comment>
<comment type="block" pos:line="59" pos:column="1">/*
#ifndef RESOURCE_H
#include "resource.h"
#endif //RESOURCE_H
*/</comment>

<cpp:ifndef pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">ifndef</cpp:directive> <name pos:line="65" pos:column="9">WM_MOUSEWHEEL</name></cpp:ifndef>
<cpp:define pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="66" pos:column="9">WM_MOUSEWHEEL</name></cpp:macro> <cpp:value pos:line="66" pos:column="23">0x020A</cpp:value></cpp:define>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="67" pos:column="8">//WM_MOUSEWHEEL</comment>

<cpp:ifndef pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">ifndef</cpp:directive> <name pos:line="69" pos:column="9">WM_MOUSEHWHEEL</name></cpp:ifndef>
<cpp:define pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="70" pos:column="9">WM_MOUSEHWHEEL</name></cpp:macro> <cpp:value pos:line="70" pos:column="24">0x020E</cpp:value></cpp:define>
<cpp:endif pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="71" pos:column="8">//WM_MOUSEHWHEEL</comment>

<cpp:ifndef pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">ifndef</cpp:directive> <name pos:line="73" pos:column="9">WM_APPCOMMAND</name></cpp:ifndef>
<cpp:define pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="74" pos:column="9">WM_APPCOMMAND</name></cpp:macro>                   <cpp:value pos:line="74" pos:column="41">0x0319</cpp:value></cpp:define>
<cpp:define pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="75" pos:column="9">APPCOMMAND_BROWSER_BACKWARD</name></cpp:macro>       <cpp:value pos:line="75" pos:column="43">1</cpp:value></cpp:define>
<cpp:define pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="76" pos:column="9">APPCOMMAND_BROWSER_FORWARD</name></cpp:macro>        <cpp:value pos:line="76" pos:column="43">2</cpp:value></cpp:define>
<cpp:define pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="77" pos:column="9">FAPPCOMMAND_MASK</name></cpp:macro>  <cpp:value pos:line="77" pos:column="27">0xF000</cpp:value></cpp:define>
<cpp:define pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="78" pos:column="9">GET_APPCOMMAND_LPARAM</name><parameter_list pos:line="78" pos:column="30">(<param><type><name pos:line="78" pos:column="31">lParam</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="78" pos:column="39">((short)(HIWORD(lParam) &amp; ~FAPPCOMMAND_MASK))</cpp:value></cpp:define>
<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="79" pos:column="8">//WM_APPCOMMAND</comment>

<class_decl pos:line="81" pos:column="1">class <name pos:line="81" pos:column="7">NppParameters</name>;</class_decl>

<cpp:define pos:line="83" pos:column="1">#<cpp:directive pos:line="83" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="83" pos:column="9">NB_WORD_LIST</name></cpp:macro> <cpp:value pos:line="83" pos:column="22">4</cpp:value></cpp:define>
<cpp:define pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="84" pos:column="9">WORD_LIST_LEN</name></cpp:macro> <cpp:value pos:line="84" pos:column="23">256</cpp:value></cpp:define>

<typedef pos:line="86" pos:column="1">typedef <function_decl><type><name pos:line="86" pos:column="9">int</name></type> (<type:modifier pos:line="86" pos:column="14">*</type:modifier> <name pos:line="86" pos:column="16">SCINTILLA_FUNC</name>) <parameter_list pos:line="86" pos:column="32">(<param><decl><type><name pos:line="86" pos:column="33">void</name><type:modifier pos:line="86" pos:column="37">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="86" pos:column="40">int</name></type></decl></param>, <param><decl><type><name pos:line="86" pos:column="45">int</name></type></decl></param>, <param><decl><type><name pos:line="86" pos:column="50">int</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef pos:line="87" pos:column="1">typedef <type><name pos:line="87" pos:column="9">void</name> <type:modifier pos:line="87" pos:column="14">*</type:modifier></type> <name pos:line="87" pos:column="16">SCINTILLA_PTR</name>;</typedef>

<cpp:define pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="89" pos:column="9">WM_DOCK_USERDEFINE_DLG</name></cpp:macro>      <cpp:value pos:line="89" pos:column="37">(SCINTILLA_USER + 1)</cpp:value></cpp:define>
<cpp:define pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="90" pos:column="9">WM_UNDOCK_USERDEFINE_DLG</name></cpp:macro>    <cpp:value pos:line="90" pos:column="37">(SCINTILLA_USER + 2)</cpp:value></cpp:define>
<cpp:define pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="91" pos:column="9">WM_CLOSE_USERDEFINE_DLG</name></cpp:macro>		<cpp:value pos:line="91" pos:column="41">(SCINTILLA_USER + 3)</cpp:value></cpp:define>
<cpp:define pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="92" pos:column="9">WM_REMOVE_USERLANG</name></cpp:macro>		    <cpp:value pos:line="92" pos:column="45">(SCINTILLA_USER + 4)</cpp:value></cpp:define>
<cpp:define pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="93" pos:column="9">WM_RENAME_USERLANG</name></cpp:macro>			<cpp:value pos:line="93" pos:column="49">(SCINTILLA_USER + 5)</cpp:value></cpp:define>
<cpp:define pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="94" pos:column="9">WM_REPLACEALL_INOPENEDDOC</name></cpp:macro>	<cpp:value pos:line="94" pos:column="41">(SCINTILLA_USER + 6)</cpp:value></cpp:define>
<cpp:define pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="95" pos:column="9">WM_FINDALL_INOPENEDDOC</name></cpp:macro>  	<cpp:value pos:line="95" pos:column="41">(SCINTILLA_USER + 7)</cpp:value></cpp:define>
<cpp:define pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="96" pos:column="9">WM_DOOPEN</name></cpp:macro>				  	<cpp:value pos:line="96" pos:column="57">(SCINTILLA_USER + 8)</cpp:value></cpp:define>
<cpp:define pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="97" pos:column="9">WM_FINDINFILES</name></cpp:macro>			  	<cpp:value pos:line="97" pos:column="49">(SCINTILLA_USER + 9)</cpp:value></cpp:define>
<cpp:define pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="98" pos:column="9">WM_REPLACEINFILES</name></cpp:macro>		  	<cpp:value pos:line="98" pos:column="49">(SCINTILLA_USER + 10)</cpp:value></cpp:define>
<cpp:define pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="99" pos:column="9">WM_FINDALL_INCURRENTDOC</name></cpp:macro>	  	<cpp:value pos:line="99" pos:column="41">(SCINTILLA_USER + 11)</cpp:value></cpp:define>
<cpp:define pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="100" pos:column="9">WM_FRSAVE_INT</name></cpp:macro>	  	<cpp:value pos:line="100" pos:column="33">(SCINTILLA_USER + 12)</cpp:value></cpp:define>
<cpp:define pos:line="101" pos:column="1">#<cpp:directive pos:line="101" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="101" pos:column="9">WM_FRSAVE_STR</name></cpp:macro>	  	<cpp:value pos:line="101" pos:column="33">(SCINTILLA_USER + 13)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier pos:line="103" pos:column="1">const</specifier> <name pos:line="103" pos:column="7">int</name></type> <name pos:line="103" pos:column="11">NB_FOLDER_STATE</name> <init pos:line="103" pos:column="27">= <expr><lit:literal type="number" pos:line="103" pos:column="29">7</lit:literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="105" pos:column="1">// Codepage</comment>
<decl_stmt><decl><type><specifier pos:line="106" pos:column="1">const</specifier> <name pos:line="106" pos:column="7">int</name></type> <name pos:line="106" pos:column="11">CP_CHINESE_TRADITIONAL</name> <init pos:line="106" pos:column="34">= <expr><lit:literal type="number" pos:line="106" pos:column="36">950</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="107" pos:column="1">const</specifier> <name pos:line="107" pos:column="7">int</name></type> <name pos:line="107" pos:column="11">CP_CHINESE_SIMPLIFIED</name> <init pos:line="107" pos:column="33">= <expr><lit:literal type="number" pos:line="107" pos:column="35">936</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="108" pos:column="1">const</specifier> <name pos:line="108" pos:column="7">int</name></type> <name pos:line="108" pos:column="11">CP_JAPANESE</name> <init pos:line="108" pos:column="23">= <expr><lit:literal type="number" pos:line="108" pos:column="25">932</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="109" pos:column="1">const</specifier> <name pos:line="109" pos:column="7">int</name></type> <name pos:line="109" pos:column="11">CP_KOREAN</name> <init pos:line="109" pos:column="21">= <expr><lit:literal type="number" pos:line="109" pos:column="23">949</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="110" pos:column="1">const</specifier> <name pos:line="110" pos:column="7">int</name></type> <name pos:line="110" pos:column="11">CP_GREEK</name> <init pos:line="110" pos:column="20">= <expr><lit:literal type="number" pos:line="110" pos:column="22">1253</lit:literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="112" pos:column="1">//wordList</comment>
<cpp:define pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="113" pos:column="9">LIST_NONE</name></cpp:macro> <cpp:value pos:line="113" pos:column="19">0</cpp:value></cpp:define>
<cpp:define pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="114" pos:column="9">LIST_0</name></cpp:macro> <cpp:value pos:line="114" pos:column="16">1</cpp:value></cpp:define>
<cpp:define pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="115" pos:column="9">LIST_1</name></cpp:macro> <cpp:value pos:line="115" pos:column="16">2</cpp:value></cpp:define>
<cpp:define pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="116" pos:column="9">LIST_2</name></cpp:macro> <cpp:value pos:line="116" pos:column="16">4</cpp:value></cpp:define>
<cpp:define pos:line="117" pos:column="1">#<cpp:directive pos:line="117" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="117" pos:column="9">LIST_3</name></cpp:macro> <cpp:value pos:line="117" pos:column="16">8</cpp:value></cpp:define>
<cpp:define pos:line="118" pos:column="1">#<cpp:directive pos:line="118" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="118" pos:column="9">LIST_4</name></cpp:macro> <cpp:value pos:line="118" pos:column="16">16</cpp:value></cpp:define>
<cpp:define pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="119" pos:column="9">LIST_5</name></cpp:macro> <cpp:value pos:line="119" pos:column="16">32</cpp:value></cpp:define>
<cpp:define pos:line="120" pos:column="1">#<cpp:directive pos:line="120" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="120" pos:column="9">LIST_6</name></cpp:macro> <cpp:value pos:line="120" pos:column="16">64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier pos:line="122" pos:column="1">const</specifier> <name pos:line="122" pos:column="7">bool</name></type> <name pos:line="122" pos:column="12">fold_uncollapse</name> <init pos:line="122" pos:column="28">= <expr><lit:literal type="boolean" pos:line="122" pos:column="30">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="123" pos:column="1">const</specifier> <name pos:line="123" pos:column="7">bool</name></type> <name pos:line="123" pos:column="12">fold_collapse</name> <init pos:line="123" pos:column="26">= <expr><lit:literal type="boolean" pos:line="123" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="125" pos:column="1">const</specifier> <name pos:line="125" pos:column="7">bool</name></type> <name pos:line="125" pos:column="12">UPPERCASE</name> <init pos:line="125" pos:column="22">= <expr><lit:literal type="boolean" pos:line="125" pos:column="24">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="126" pos:column="1">const</specifier> <name pos:line="126" pos:column="7">bool</name></type> <name pos:line="126" pos:column="12">LOWERCASE</name> <init pos:line="126" pos:column="22">= <expr><lit:literal type="boolean" pos:line="126" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier pos:line="129" pos:column="1">const</specifier> <name pos:line="129" pos:column="7">UCHAR</name></type> <name pos:line="129" pos:column="13">MASK_FORMAT</name> <init pos:line="129" pos:column="25">= <expr><lit:literal type="number" pos:line="129" pos:column="27">0x03</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="130" pos:column="1">const</specifier> <name pos:line="130" pos:column="7">UCHAR</name></type> <name pos:line="130" pos:column="13">MASK_ZERO_LEADING</name> <init pos:line="130" pos:column="31">= <expr><lit:literal type="number" pos:line="130" pos:column="33">0x04</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="131" pos:column="1">const</specifier> <name pos:line="131" pos:column="7">UCHAR</name></type> <name pos:line="131" pos:column="13">BASE_10</name> <init pos:line="131" pos:column="21">= <expr><lit:literal type="number" pos:line="131" pos:column="23">0x00</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="131" pos:column="29">// Dec</comment>
<decl_stmt><decl><type><specifier pos:line="132" pos:column="1">const</specifier> <name pos:line="132" pos:column="7">UCHAR</name></type> <name pos:line="132" pos:column="13">BASE_16</name> <init pos:line="132" pos:column="21">= <expr><lit:literal type="number" pos:line="132" pos:column="23">0x01</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="132" pos:column="29">// Hex</comment>
<decl_stmt><decl><type><specifier pos:line="133" pos:column="1">const</specifier> <name pos:line="133" pos:column="7">UCHAR</name></type> <name pos:line="133" pos:column="13">BASE_08</name> <init pos:line="133" pos:column="21">= <expr><lit:literal type="number" pos:line="133" pos:column="23">0x02</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="133" pos:column="29">// Oct</comment>
<decl_stmt><decl><type><specifier pos:line="134" pos:column="1">const</specifier> <name pos:line="134" pos:column="7">UCHAR</name></type> <name pos:line="134" pos:column="13">BASE_02</name> <init pos:line="134" pos:column="21">= <expr><lit:literal type="number" pos:line="134" pos:column="23">0x03</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="134" pos:column="29">// Bin</comment>


<decl_stmt><decl><type><specifier pos:line="137" pos:column="1">const</specifier> <name pos:line="137" pos:column="7">int</name></type> <name pos:line="137" pos:column="11">MARK_BOOKMARK</name> <init pos:line="137" pos:column="25">= <expr><lit:literal type="number" pos:line="137" pos:column="27">24</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="138" pos:column="1">const</specifier> <name pos:line="138" pos:column="7">int</name></type> <name pos:line="138" pos:column="11">MARK_HIDELINESBEGIN</name> <init pos:line="138" pos:column="31">= <expr><lit:literal type="number" pos:line="138" pos:column="33">23</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="139" pos:column="1">const</specifier> <name pos:line="139" pos:column="7">int</name></type> <name pos:line="139" pos:column="11">MARK_HIDELINESEND</name> <init pos:line="139" pos:column="29">= <expr><lit:literal type="number" pos:line="139" pos:column="31">22</lit:literal></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="140" pos:column="1">//const int MARK_LINEMODIFIEDUNSAVED = 21;</comment>
<comment type="line" pos:line="141" pos:column="1">//const int MARK_LINEMODIFIEDSAVED = 20;</comment>
<comment type="line" pos:line="142" pos:column="1">// 24 - 16 reserved for Notepad++ internal used</comment>
<comment type="line" pos:line="143" pos:column="1">// 15 - 0  are free to use for plugins</comment>


<function_decl><type><name pos:line="146" pos:column="1">int</name></type> <name pos:line="146" pos:column="5">getNbDigits</name><parameter_list pos:line="146" pos:column="16">(<param><decl><type><name pos:line="146" pos:column="17">int</name></type> <name pos:line="146" pos:column="21">aNum</name></decl></param>, <param><decl><type><name pos:line="146" pos:column="27">int</name></type> <name pos:line="146" pos:column="31">base</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name pos:line="148" pos:column="1">TCHAR</name> <type:modifier pos:line="148" pos:column="7">*</type:modifier></type> <name pos:line="148" pos:column="9">int2str</name><parameter_list pos:line="148" pos:column="16">(<param><decl><type><name pos:line="148" pos:column="17">TCHAR</name> <type:modifier pos:line="148" pos:column="23">*</type:modifier></type><name pos:line="148" pos:column="24">str</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="29">int</name></type> <name pos:line="148" pos:column="33">strLen</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="41">int</name></type> <name pos:line="148" pos:column="45">number</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="53">int</name></type> <name pos:line="148" pos:column="57">base</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="63">int</name></type> <name pos:line="148" pos:column="67">nbChiffre</name></decl></param>, <param><decl><type><name pos:line="148" pos:column="78">bool</name></type> <name pos:line="148" pos:column="83">isZeroLeading</name></decl></param>)</parameter_list>;</function_decl>

<typedef pos:line="150" pos:column="1">typedef <function_decl><type><name pos:line="150" pos:column="9">LRESULT</name></type> (<name pos:line="150" pos:column="18">WINAPI</name> <type:modifier pos:line="150" pos:column="25">*</type:modifier><name pos:line="150" pos:column="26">CallWindowProcFunc</name>) <parameter_list pos:line="150" pos:column="46">(<param><decl><type><name pos:line="150" pos:column="47">WNDPROC</name></type></decl></param>,<param><decl><type><name pos:line="150" pos:column="55">HWND</name></type></decl></param>,<param><decl><type><name pos:line="150" pos:column="60">UINT</name></type></decl></param>,<param><decl><type><name pos:line="150" pos:column="65">WPARAM</name></type></decl></param>,<param><decl><type><name pos:line="150" pos:column="72">LPARAM</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<decl_stmt><decl><type><specifier pos:line="152" pos:column="1">const</specifier> <name pos:line="152" pos:column="7">bool</name></type> <name pos:line="152" pos:column="12">L2R</name> <init pos:line="152" pos:column="16">= <expr><lit:literal type="boolean" pos:line="152" pos:column="18">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="153" pos:column="1">const</specifier> <name pos:line="153" pos:column="7">bool</name></type> <name pos:line="153" pos:column="12">R2L</name> <init pos:line="153" pos:column="16">= <expr><lit:literal type="boolean" pos:line="153" pos:column="18">false</lit:literal></expr></init></decl>;</decl_stmt>

<struct pos:line="155" pos:column="1">struct <name pos:line="155" pos:column="8">ColumnModeInfo</name> <block pos:line="155" pos:column="23">{<public type="default" pos:line="155" pos:column="24">
	<decl_stmt><decl><type><name pos:line="156" pos:column="9">int</name></type> <name pos:line="156" pos:column="13">_selLpos</name></decl>;</decl_stmt> 
	<decl_stmt><decl><type><name pos:line="157" pos:column="9">int</name></type> <name pos:line="157" pos:column="13">_selRpos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">int</name></type> <name pos:line="158" pos:column="13">_order</name></decl>;</decl_stmt> <comment type="line" pos:line="158" pos:column="21">// 0 based index</comment>
	<decl_stmt><decl><type><name pos:line="159" pos:column="9">bool</name></type> <name pos:line="159" pos:column="14">_direction</name></decl>;</decl_stmt> <comment type="line" pos:line="159" pos:column="26">// L2R or R2L</comment>
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">int</name></type> <name pos:line="160" pos:column="13">_nbVirtualCaretSpc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="161" pos:column="9">int</name></type> <name pos:line="161" pos:column="13">_nbVirtualAnchorSpc</name></decl>;</decl_stmt>

	<constructor><name pos:line="163" pos:column="9">ColumnModeInfo</name><parameter_list pos:line="163" pos:column="23">()</parameter_list> <member_list pos:line="163" pos:column="26">: <call><name pos:line="163" pos:column="28">_selLpos</name><argument_list pos:line="163" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="39">,</op:operator> <call><name pos:line="163" pos:column="41">_selRpos</name><argument_list pos:line="163" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="52">,</op:operator> <call><name pos:line="163" pos:column="54">_order</name><argument_list pos:line="163" pos:column="60">(<argument><expr><op:operator pos:line="163" pos:column="61">-</op:operator><lit:literal type="number" pos:line="163" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="64">,</op:operator> <call><name pos:line="163" pos:column="66">_direction</name><argument_list pos:line="163" pos:column="76">(<argument><expr><name pos:line="163" pos:column="77">L2R</name></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="81">,</op:operator> <call><name pos:line="163" pos:column="83">_nbVirtualAnchorSpc</name><argument_list pos:line="163" pos:column="102">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="103">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="105">,</op:operator> <call><name pos:line="163" pos:column="107">_nbVirtualCaretSpc</name><argument_list pos:line="163" pos:column="125">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="126">0</lit:literal></expr></argument>)</argument_list></call></member_list><block pos:line="163" pos:column="128">{}</block></constructor><empty_stmt pos:line="163" pos:column="130">;</empty_stmt>
	<constructor><name pos:line="164" pos:column="9">ColumnModeInfo</name><parameter_list pos:line="164" pos:column="23">(<param><decl><type><name pos:line="164" pos:column="24">int</name></type> <name pos:line="164" pos:column="28">lPos</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="34">int</name></type> <name pos:line="164" pos:column="38">rPos</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="44">int</name></type> <name pos:line="164" pos:column="48">order</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="55">bool</name></type> <name pos:line="164" pos:column="60">dir</name> <init pos:line="164" pos:column="64">= <expr><name pos:line="164" pos:column="66">L2R</name></expr></init></decl></param>, <name pos:line="164" pos:column="71">int</name> <name pos:line="164" pos:column="75">vAnchorNbSpc</name> <op:operator pos:line="164" pos:column="88">=</op:operator> <lit:literal type="number" pos:line="164" pos:column="90">0</lit:literal>, <name pos:line="164" pos:column="93">int</name> <name pos:line="164" pos:column="97">vCaretNbSpc</name> <op:operator pos:line="164" pos:column="109">=</op:operator> <lit:literal type="number" pos:line="164" pos:column="111">0</lit:literal>)</parameter_list>
		<member_list pos:line="165" pos:column="17">: <call><name pos:line="165" pos:column="19">_selLpos</name><argument_list pos:line="165" pos:column="27">(<argument><expr><name pos:line="165" pos:column="28">lPos</name></expr></argument>)</argument_list></call><op:operator pos:line="165" pos:column="33">,</op:operator> <call><name pos:line="165" pos:column="35">_selRpos</name><argument_list pos:line="165" pos:column="43">(<argument><expr><name pos:line="165" pos:column="44">rPos</name></expr></argument>)</argument_list></call><op:operator pos:line="165" pos:column="49">,</op:operator> <call><name pos:line="165" pos:column="51">_order</name><argument_list pos:line="165" pos:column="57">(<argument><expr><name pos:line="165" pos:column="58">order</name></expr></argument>)</argument_list></call><op:operator pos:line="165" pos:column="64">,</op:operator> <call><name pos:line="165" pos:column="66">_direction</name><argument_list pos:line="165" pos:column="76">(<argument><expr><name pos:line="165" pos:column="77">dir</name></expr></argument>)</argument_list></call><op:operator pos:line="165" pos:column="81">,</op:operator> <call><name pos:line="165" pos:column="83">_nbVirtualAnchorSpc</name><argument_list pos:line="165" pos:column="102">(<argument><expr><name pos:line="165" pos:column="103">vAnchorNbSpc</name></expr></argument>)</argument_list></call><op:operator pos:line="165" pos:column="116">,</op:operator> <call><name pos:line="165" pos:column="118">_nbVirtualCaretSpc</name><argument_list pos:line="165" pos:column="136">(<argument><expr><name pos:line="165" pos:column="137">vCaretNbSpc</name></expr></argument>)</argument_list></call></member_list><block pos:line="165" pos:column="149">{}</block></constructor><empty_stmt pos:line="165" pos:column="151">;</empty_stmt>

	<function><type><name pos:line="167" pos:column="9">bool</name></type> <name pos:line="167" pos:column="14">isValid</name><parameter_list pos:line="167" pos:column="21">()</parameter_list> <specifier pos:line="167" pos:column="24">const</specifier> <block pos:line="167" pos:column="30">{
		<return pos:line="168" pos:column="17">return <expr><op:operator pos:line="168" pos:column="24">(</op:operator><name pos:line="168" pos:column="25">_order</name> <op:operator pos:line="168" pos:column="32">&gt;=</op:operator> <lit:literal type="number" pos:line="168" pos:column="35">0</lit:literal> <op:operator pos:line="168" pos:column="37">&amp;&amp;</op:operator> <name pos:line="168" pos:column="40">_selLpos</name> <op:operator pos:line="168" pos:column="49">&gt;=</op:operator> <lit:literal type="number" pos:line="168" pos:column="52">0</lit:literal> <op:operator pos:line="168" pos:column="54">&amp;&amp;</op:operator> <name pos:line="168" pos:column="57">_selRpos</name> <op:operator pos:line="168" pos:column="66">&gt;=</op:operator> <lit:literal type="number" pos:line="168" pos:column="69">0</lit:literal> <op:operator pos:line="168" pos:column="71">&amp;&amp;</op:operator> <name pos:line="168" pos:column="74">_selLpos</name> <op:operator pos:line="168" pos:column="83">&lt;=</op:operator> <name pos:line="168" pos:column="86">_selRpos</name><op:operator pos:line="168" pos:column="94">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="169" pos:column="10">;</empty_stmt>
</public>}</block>;</struct>

<comment type="line" pos:line="172" pos:column="1">//</comment>
<comment type="line" pos:line="173" pos:column="1">// SortClass for vector&lt;ColumnModeInfo&gt;</comment>
<comment type="line" pos:line="174" pos:column="1">// sort in _order : increased order</comment>
<struct pos:line="175" pos:column="1">struct <name pos:line="175" pos:column="8">SortInSelectOrder</name> <block pos:line="175" pos:column="26">{<public type="default" pos:line="175" pos:column="27">
	<function><type><name pos:line="176" pos:column="9">bool</name></type> <name pos:line="176" pos:column="14">operator()</name> <parameter_list pos:line="176" pos:column="25">(<param><decl><type><name pos:line="176" pos:column="26">ColumnModeInfo</name> <type:modifier pos:line="176" pos:column="41">&amp;</type:modifier></type> <name pos:line="176" pos:column="43">l</name></decl></param>, <param><decl><type><name pos:line="176" pos:column="46">ColumnModeInfo</name> <type:modifier pos:line="176" pos:column="61">&amp;</type:modifier></type> <name pos:line="176" pos:column="63">r</name></decl></param>)</parameter_list> <block pos:line="176" pos:column="66">{
		<return pos:line="177" pos:column="17">return <expr><op:operator pos:line="177" pos:column="24">(</op:operator><name><name pos:line="177" pos:column="25">l</name><op:operator pos:line="177" pos:column="26">.</op:operator><name pos:line="177" pos:column="27">_order</name></name> <op:operator pos:line="177" pos:column="34">&lt;</op:operator> <name><name pos:line="177" pos:column="36">r</name><op:operator pos:line="177" pos:column="37">.</op:operator><name pos:line="177" pos:column="38">_order</name></name><op:operator pos:line="177" pos:column="44">)</op:operator></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<comment type="line" pos:line="181" pos:column="1">//</comment>
<comment type="line" pos:line="182" pos:column="1">// SortClass for vector&lt;ColumnModeInfo&gt;</comment>
<comment type="line" pos:line="183" pos:column="1">// sort in _selLpos : increased order</comment>
<struct pos:line="184" pos:column="1">struct <name pos:line="184" pos:column="8">SortInPositionOrder</name> <block pos:line="184" pos:column="28">{<public type="default" pos:line="184" pos:column="29">
	<function><type><name pos:line="185" pos:column="9">bool</name></type> <name pos:line="185" pos:column="14">operator()</name> <parameter_list pos:line="185" pos:column="25">(<param><decl><type><name pos:line="185" pos:column="26">ColumnModeInfo</name> <type:modifier pos:line="185" pos:column="41">&amp;</type:modifier></type> <name pos:line="185" pos:column="43">l</name></decl></param>, <param><decl><type><name pos:line="185" pos:column="46">ColumnModeInfo</name> <type:modifier pos:line="185" pos:column="61">&amp;</type:modifier></type> <name pos:line="185" pos:column="63">r</name></decl></param>)</parameter_list> <block pos:line="185" pos:column="66">{
		<return pos:line="186" pos:column="17">return <expr><op:operator pos:line="186" pos:column="24">(</op:operator><name><name pos:line="186" pos:column="25">l</name><op:operator pos:line="186" pos:column="26">.</op:operator><name pos:line="186" pos:column="27">_selLpos</name></name> <op:operator pos:line="186" pos:column="36">&lt;</op:operator> <name><name pos:line="186" pos:column="38">r</name><op:operator pos:line="186" pos:column="39">.</op:operator><name pos:line="186" pos:column="40">_selLpos</name></name><op:operator pos:line="186" pos:column="48">)</op:operator></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<typedef pos:line="190" pos:column="1">typedef <type><name><name pos:line="190" pos:column="9">vector</name><argument_list pos:line="190" pos:column="15">&lt;<argument><expr><name pos:line="190" pos:column="16">ColumnModeInfo</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="190" pos:column="32">ColumnModeInfos</name>;</typedef>

<struct pos:line="192" pos:column="1">struct <name pos:line="192" pos:column="8">LanguageName</name> <block pos:line="192" pos:column="21">{<public type="default" pos:line="192" pos:column="22">
	<decl_stmt><decl><type><specifier pos:line="193" pos:column="9">const</specifier> <name pos:line="193" pos:column="15">TCHAR</name> <type:modifier pos:line="193" pos:column="21">*</type:modifier></type> <name pos:line="193" pos:column="23">lexerName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="194" pos:column="9">const</specifier> <name pos:line="194" pos:column="15">TCHAR</name> <type:modifier pos:line="194" pos:column="21">*</type:modifier></type> <name pos:line="194" pos:column="23">shortName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="195" pos:column="9">const</specifier> <name pos:line="195" pos:column="15">TCHAR</name> <type:modifier pos:line="195" pos:column="21">*</type:modifier></type> <name pos:line="195" pos:column="23">longName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="196" pos:column="9">LangType</name></type> <name pos:line="196" pos:column="18">LangID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="197" pos:column="9">int</name></type> <name pos:line="197" pos:column="13">lexerID</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<class pos:line="200" pos:column="1">class <name pos:line="200" pos:column="7">ScintillaEditView</name> <super pos:line="200" pos:column="25">: <specifier pos:line="200" pos:column="27">public</specifier> <name pos:line="200" pos:column="34">Window</name></super>
<block pos:line="201" pos:column="1">{<private type="default" pos:line="201" pos:column="2">
	<comment type="line" pos:line="202" pos:column="9">//friend class Notepad_plus;</comment>
	<class_decl><specifier pos:line="203" pos:column="9">friend</specifier> class <name pos:line="203" pos:column="22">Finder</name>;</class_decl>
</private><public pos:line="204" pos:column="1">public:
	<constructor><name pos:line="205" pos:column="9">ScintillaEditView</name><parameter_list pos:line="205" pos:column="26">()</parameter_list>
		<member_list pos:line="206" pos:column="17">: <call><name pos:line="206" pos:column="19">Window</name><argument_list pos:line="206" pos:column="25">()</argument_list></call><op:operator pos:line="206" pos:column="27">,</op:operator> <call><name pos:line="206" pos:column="29">_pScintillaFunc</name><argument_list pos:line="206" pos:column="44">(<argument><expr><name pos:line="206" pos:column="45">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="206" pos:column="50">,</op:operator><call><name pos:line="206" pos:column="51">_pScintillaPtr</name><argument_list pos:line="206" pos:column="65">(<argument><expr><name pos:line="206" pos:column="66">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="206" pos:column="71">,</op:operator>
		  <call><name pos:line="207" pos:column="19">_lineNumbersShown</name><argument_list pos:line="207" pos:column="36">(<argument><expr><lit:literal type="boolean" pos:line="207" pos:column="37">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="207" pos:column="43">,</op:operator> <call><name pos:line="207" pos:column="45">_wrapRestoreNeeded</name><argument_list pos:line="207" pos:column="63">(<argument><expr><lit:literal type="boolean" pos:line="207" pos:column="64">false</lit:literal></expr></argument>)</argument_list></call>
	</member_list><block pos:line="208" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="209" pos:column="17">++</op:operator><name pos:line="209" pos:column="19">_refCount</name></expr>;</expr_stmt>
	}</block></constructor><empty_stmt pos:line="210" pos:column="10">;</empty_stmt>

	<destructor><specifier pos:line="212" pos:column="9">virtual</specifier> <name pos:line="212" pos:column="17">~<name pos:line="212" pos:column="18">ScintillaEditView</name></name><parameter_list pos:line="212" pos:column="35">()</parameter_list>
	<block pos:line="213" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="214" pos:column="17">--</op:operator><name pos:line="214" pos:column="19">_refCount</name></expr>;</expr_stmt>

		<if pos:line="216" pos:column="17">if <condition pos:line="216" pos:column="20">(<expr><op:operator pos:line="216" pos:column="21">(</op:operator><op:operator pos:line="216" pos:column="22">!</op:operator><name pos:line="216" pos:column="23">_refCount</name><op:operator pos:line="216" pos:column="32">)</op:operator><op:operator pos:line="216" pos:column="33">&amp;&amp;</op:operator><op:operator pos:line="216" pos:column="35">(</op:operator><name pos:line="216" pos:column="36">_hLib</name><op:operator pos:line="216" pos:column="41">)</op:operator></expr>)</condition><then pos:line="216" pos:column="43">
		<block pos:line="217" pos:column="17">{
			<expr_stmt><expr><call><name><op:operator pos:line="218" pos:column="25">::</op:operator><name pos:line="218" pos:column="27">FreeLibrary</name></name><argument_list pos:line="218" pos:column="38">(<argument><expr><name pos:line="218" pos:column="39">_hLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for pos:line="220" pos:column="25">for (<init><decl><type><name><name pos:line="220" pos:column="30">BufferStyleMap</name><op:operator pos:line="220" pos:column="44">::</op:operator><name pos:line="220" pos:column="46">iterator</name></name></type> <name pos:line="220" pos:column="55">it</name><argument_list pos:line="220" pos:column="57">(<argument><expr><call><name><name pos:line="220" pos:column="58">_hotspotStyles</name><op:operator pos:line="220" pos:column="72">.</op:operator><name pos:line="220" pos:column="73">begin</name></name><argument_list pos:line="220" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></decl>;</init> <condition><expr><name pos:line="220" pos:column="83">it</name> <op:operator pos:line="220" pos:column="86">!=</op:operator> <call><name><name pos:line="220" pos:column="89">_hotspotStyles</name><op:operator pos:line="220" pos:column="103">.</op:operator><name pos:line="220" pos:column="104">end</name></name><argument_list pos:line="220" pos:column="107">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="220" pos:column="111">++</op:operator><name pos:line="220" pos:column="113">it</name></expr></incr> ) 
			<block pos:line="221" pos:column="25">{
				<for pos:line="222" pos:column="33">for (<init><decl><type><name><name pos:line="222" pos:column="38">StyleMap</name><op:operator pos:line="222" pos:column="46">::</op:operator><name pos:line="222" pos:column="48">iterator</name></name></type> <name pos:line="222" pos:column="57">it2</name><argument_list pos:line="222" pos:column="60">(<argument><expr><call><name><name pos:line="222" pos:column="61">it</name><op:operator pos:line="222" pos:column="63">-&gt;</op:operator><name pos:line="222" pos:column="65">second</name><op:operator pos:line="222" pos:column="71">-&gt;</op:operator><name pos:line="222" pos:column="73">begin</name></name><argument_list pos:line="222" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></decl> ;</init> <condition><expr><name pos:line="222" pos:column="84">it2</name> <op:operator pos:line="222" pos:column="88">!=</op:operator> <call><name><name pos:line="222" pos:column="91">it</name><op:operator pos:line="222" pos:column="93">-&gt;</op:operator><name pos:line="222" pos:column="95">second</name><op:operator pos:line="222" pos:column="101">-&gt;</op:operator><name pos:line="222" pos:column="103">end</name></name><argument_list pos:line="222" pos:column="106">()</argument_list></call></expr> ;</condition> <incr><expr><op:operator pos:line="222" pos:column="111">++</op:operator><name pos:line="222" pos:column="113">it2</name></expr></incr>)
				<block pos:line="223" pos:column="33">{
					<if pos:line="224" pos:column="41">if <condition pos:line="224" pos:column="44">(<expr><name><name pos:line="224" pos:column="45">it2</name><op:operator pos:line="224" pos:column="48">-&gt;</op:operator><name pos:line="224" pos:column="50">second</name><op:operator pos:line="224" pos:column="56">.</op:operator><name pos:line="224" pos:column="57">_fontName</name></name> <op:operator pos:line="224" pos:column="67">!=</op:operator> <name pos:line="224" pos:column="70">NULL</name></expr>)</condition><then pos:line="224" pos:column="75">
						<expr_stmt><expr><op:operator pos:line="225" pos:column="49">delete</op:operator> <index pos:line="225" pos:column="56">[]</index> <name><name pos:line="225" pos:column="59">it2</name><op:operator pos:line="225" pos:column="62">-&gt;</op:operator><name pos:line="225" pos:column="64">second</name><op:operator pos:line="225" pos:column="70">.</op:operator><name pos:line="225" pos:column="71">_fontName</name></name></expr>;</expr_stmt></then></if>
				}</block></for>
				<expr_stmt><expr><op:operator pos:line="227" pos:column="33">delete</op:operator> <name><name pos:line="227" pos:column="40">it</name><op:operator pos:line="227" pos:column="42">-&gt;</op:operator><name pos:line="227" pos:column="44">second</name></name></expr>;</expr_stmt>
			}</block></for> 
		}</block></then></if>
	}</block></destructor><empty_stmt pos:line="230" pos:column="10">;</empty_stmt>
	<function><type><specifier pos:line="231" pos:column="9">virtual</specifier> <name pos:line="231" pos:column="17">void</name></type> <name pos:line="231" pos:column="22">destroy</name><parameter_list pos:line="231" pos:column="29">()</parameter_list>
	<block pos:line="232" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="233" pos:column="17">::</op:operator><name pos:line="233" pos:column="19">DestroyWindow</name></name><argument_list pos:line="233" pos:column="32">(<argument><expr><name pos:line="233" pos:column="33">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="234" pos:column="17">_hSelf</name> <op:operator pos:line="234" pos:column="24">=</op:operator> <name pos:line="234" pos:column="26">NULL</name></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="235" pos:column="10">;</empty_stmt>

	<function_decl><type><specifier pos:line="237" pos:column="9">virtual</specifier> <name pos:line="237" pos:column="17">void</name></type> <name pos:line="237" pos:column="22">init</name><parameter_list pos:line="237" pos:column="26">(<param><decl><type><name pos:line="237" pos:column="27">HINSTANCE</name></type> <name pos:line="237" pos:column="37">hInst</name></decl></param>, <param><decl><type><name pos:line="237" pos:column="44">HWND</name></type> <name pos:line="237" pos:column="49">hPere</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="239" pos:column="9">LRESULT</name></type> <name pos:line="239" pos:column="17">execute</name><parameter_list pos:line="239" pos:column="24">(<param><decl><type><name pos:line="239" pos:column="25">UINT</name></type> <name pos:line="239" pos:column="30">Msg</name></decl></param>, <param><decl><type><name pos:line="239" pos:column="35">WPARAM</name></type> <name pos:line="239" pos:column="42">wParam</name><init pos:line="239" pos:column="48">=<expr><lit:literal type="number" pos:line="239" pos:column="49">0</lit:literal></expr></init></decl></param>, <name pos:line="239" pos:column="52">LPARAM</name> <name pos:line="239" pos:column="59">lParam</name><op:operator pos:line="239" pos:column="65">=</op:operator><lit:literal type="number" pos:line="239" pos:column="66">0</lit:literal>)</parameter_list> <specifier pos:line="239" pos:column="69">const</specifier> <block pos:line="239" pos:column="75">{
		<return pos:line="240" pos:column="17">return <expr><call><name pos:line="240" pos:column="24">_pScintillaFunc</name><argument_list pos:line="240" pos:column="39">(<argument><expr><name pos:line="240" pos:column="40">_pScintillaPtr</name></expr></argument>, <argument><expr><call><name><name pos:line="240" pos:column="56">static_cast</name><argument_list pos:line="240" pos:column="67">&lt;<argument><expr><name pos:line="240" pos:column="68">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="240" pos:column="72">(<argument><expr><name pos:line="240" pos:column="73">Msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="240" pos:column="79">static_cast</name><argument_list pos:line="240" pos:column="90">&lt;<argument><expr><name pos:line="240" pos:column="91">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="240" pos:column="95">(<argument><expr><name pos:line="240" pos:column="96">wParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="240" pos:column="105">static_cast</name><argument_list pos:line="240" pos:column="116">&lt;<argument><expr><name pos:line="240" pos:column="117">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="240" pos:column="121">(<argument><expr><name pos:line="240" pos:column="122">lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="241" pos:column="10">;</empty_stmt>
	
	<function_decl><type><name pos:line="243" pos:column="9">void</name></type> <name pos:line="243" pos:column="14">activateBuffer</name><parameter_list pos:line="243" pos:column="28">(<param><decl><type><name pos:line="243" pos:column="29">BufferID</name></type> <name pos:line="243" pos:column="38">buffer</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="245" pos:column="9">void</name></type> <name pos:line="245" pos:column="14">getCurrentFoldStates</name><parameter_list pos:line="245" pos:column="34">(<param><decl><type><name><name pos:line="245" pos:column="35">std</name><op:operator pos:line="245" pos:column="38">::</op:operator><name><name pos:line="245" pos:column="40">vector</name><argument_list pos:line="245" pos:column="46">&lt;<argument><expr><name pos:line="245" pos:column="47">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="245" pos:column="64">&amp;</type:modifier></type> <name pos:line="245" pos:column="66">lineStateVector</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="246" pos:column="9">void</name></type> <name pos:line="246" pos:column="14">syncFoldStateWith</name><parameter_list pos:line="246" pos:column="31">(<param><decl><type><specifier pos:line="246" pos:column="32">const</specifier> <name><name pos:line="246" pos:column="38">std</name><op:operator pos:line="246" pos:column="41">::</op:operator><name><name pos:line="246" pos:column="43">vector</name><argument_list pos:line="246" pos:column="49">&lt;<argument><expr><name pos:line="246" pos:column="50">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="246" pos:column="67">&amp;</type:modifier></type> <name pos:line="246" pos:column="69">lineStateVectorNew</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="248" pos:column="9">void</name></type> <name pos:line="248" pos:column="14">getText</name><parameter_list pos:line="248" pos:column="21">(<param><decl><type><name pos:line="248" pos:column="22">char</name> <type:modifier pos:line="248" pos:column="27">*</type:modifier></type><name pos:line="248" pos:column="28">dest</name></decl></param>, <param><decl><type><name pos:line="248" pos:column="34">int</name></type> <name pos:line="248" pos:column="38">start</name></decl></param>, <param><decl><type><name pos:line="248" pos:column="45">int</name></type> <name pos:line="248" pos:column="49">end</name></decl></param>)</parameter_list> <specifier pos:line="248" pos:column="54">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="249" pos:column="9">void</name></type> <name pos:line="249" pos:column="14">getGenericText</name><parameter_list pos:line="249" pos:column="28">(<param><decl><type><name pos:line="249" pos:column="29">TCHAR</name> <type:modifier pos:line="249" pos:column="35">*</type:modifier></type><name pos:line="249" pos:column="36">dest</name></decl></param>, <param><decl><type><name pos:line="249" pos:column="42">size_t</name></type> <name pos:line="249" pos:column="49">destlen</name></decl></param>, <param><decl><type><name pos:line="249" pos:column="58">int</name></type> <name pos:line="249" pos:column="62">start</name></decl></param>, <param><decl><type><name pos:line="249" pos:column="69">int</name></type> <name pos:line="249" pos:column="73">end</name></decl></param>)</parameter_list> <specifier pos:line="249" pos:column="78">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="250" pos:column="9">void</name></type> <name pos:line="250" pos:column="14">getGenericText</name><parameter_list pos:line="250" pos:column="28">(<param><decl><type><name pos:line="250" pos:column="29">TCHAR</name> <type:modifier pos:line="250" pos:column="35">*</type:modifier></type><name pos:line="250" pos:column="36">dest</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="42">size_t</name></type> <name pos:line="250" pos:column="49">deslen</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="57">int</name></type> <name pos:line="250" pos:column="61">start</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="68">int</name></type> <name pos:line="250" pos:column="72">end</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="77">int</name> <type:modifier pos:line="250" pos:column="81">*</type:modifier></type><name pos:line="250" pos:column="82">mstart</name></decl></param>, <param><decl><type><name pos:line="250" pos:column="90">int</name> <type:modifier pos:line="250" pos:column="94">*</type:modifier></type><name pos:line="250" pos:column="95">mend</name></decl></param>)</parameter_list> <specifier pos:line="250" pos:column="101">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="251" pos:column="9">void</name></type> <name pos:line="251" pos:column="14">insertGenericTextFrom</name><parameter_list pos:line="251" pos:column="35">(<param><decl><type><name pos:line="251" pos:column="36">int</name></type> <name pos:line="251" pos:column="40">position</name></decl></param>, <param><decl><type><specifier pos:line="251" pos:column="50">const</specifier> <name pos:line="251" pos:column="56">TCHAR</name> <type:modifier pos:line="251" pos:column="62">*</type:modifier></type><name pos:line="251" pos:column="63">text2insert</name></decl></param>)</parameter_list> <specifier pos:line="251" pos:column="76">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="252" pos:column="9">void</name></type> <name pos:line="252" pos:column="14">replaceSelWith</name><parameter_list pos:line="252" pos:column="28">(<param><decl><type><specifier pos:line="252" pos:column="29">const</specifier> <name pos:line="252" pos:column="35">char</name> <type:modifier pos:line="252" pos:column="40">*</type:modifier></type> <name pos:line="252" pos:column="42">replaceText</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="254" pos:column="9">int</name></type> <name pos:line="254" pos:column="13">getSelectedTextCount</name><parameter_list pos:line="254" pos:column="33">()</parameter_list> <block pos:line="254" pos:column="36">{
		<decl_stmt><decl><type><name pos:line="255" pos:column="17">CharacterRange</name></type> <name pos:line="255" pos:column="32">range</name> <init pos:line="255" pos:column="38">= <expr><call><name pos:line="255" pos:column="40">getSelection</name><argument_list pos:line="255" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="256" pos:column="17">return <expr><op:operator pos:line="256" pos:column="24">(</op:operator><name><name pos:line="256" pos:column="25">range</name><op:operator pos:line="256" pos:column="30">.</op:operator><name pos:line="256" pos:column="31">cpMax</name></name> <op:operator pos:line="256" pos:column="37">-</op:operator> <name><name pos:line="256" pos:column="39">range</name><op:operator pos:line="256" pos:column="44">.</op:operator><name pos:line="256" pos:column="45">cpMin</name></name><op:operator pos:line="256" pos:column="50">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="257" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="259" pos:column="9">void</name></type> <name pos:line="259" pos:column="14">getVisibleStartAndEndPosition</name><parameter_list pos:line="259" pos:column="43">(<param><decl><type><name pos:line="259" pos:column="44">int</name> <type:modifier pos:line="259" pos:column="48">*</type:modifier></type> <name pos:line="259" pos:column="50">startPos</name></decl></param>, <param><decl><type><name pos:line="259" pos:column="60">int</name> <type:modifier pos:line="259" pos:column="64">*</type:modifier></type> <name pos:line="259" pos:column="66">endPos</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="260" pos:column="5">char</name> <type:modifier pos:line="260" pos:column="10">*</type:modifier></type> <name pos:line="260" pos:column="12">getWordFromRange</name><parameter_list pos:line="260" pos:column="28">(<param><decl><type><name pos:line="260" pos:column="29">char</name> <type:modifier pos:line="260" pos:column="34">*</type:modifier></type> <name pos:line="260" pos:column="36">txt</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="41">int</name></type> <name pos:line="260" pos:column="45">size</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="51">int</name></type> <name pos:line="260" pos:column="55">pos1</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="61">int</name></type> <name pos:line="260" pos:column="65">pos2</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="261" pos:column="9">char</name> <type:modifier pos:line="261" pos:column="14">*</type:modifier></type> <name pos:line="261" pos:column="16">getSelectedText</name><parameter_list pos:line="261" pos:column="31">(<param><decl><type><name pos:line="261" pos:column="32">char</name> <type:modifier pos:line="261" pos:column="37">*</type:modifier></type> <name pos:line="261" pos:column="39">txt</name></decl></param>, <param><decl><type><name pos:line="261" pos:column="44">int</name></type> <name pos:line="261" pos:column="48">size</name></decl></param>, <param><decl><type><name pos:line="261" pos:column="54">bool</name></type> <name pos:line="261" pos:column="59">expand</name> <init pos:line="261" pos:column="66">= <expr><lit:literal type="boolean" pos:line="261" pos:column="68">true</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="262" pos:column="5">char</name> <type:modifier pos:line="262" pos:column="10">*</type:modifier></type> <name pos:line="262" pos:column="12">getWordOnCaretPos</name><parameter_list pos:line="262" pos:column="29">(<param><decl><type><name pos:line="262" pos:column="30">char</name> <type:modifier pos:line="262" pos:column="35">*</type:modifier></type> <name pos:line="262" pos:column="37">txt</name></decl></param>, <param><decl><type><name pos:line="262" pos:column="42">int</name></type> <name pos:line="262" pos:column="46">size</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="263" pos:column="5">TCHAR</name> <type:modifier pos:line="263" pos:column="11">*</type:modifier></type> <name pos:line="263" pos:column="13">getGenericWordOnCaretPos</name><parameter_list pos:line="263" pos:column="37">(<param><decl><type><name pos:line="263" pos:column="38">TCHAR</name> <type:modifier pos:line="263" pos:column="44">*</type:modifier></type> <name pos:line="263" pos:column="46">txt</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="51">int</name></type> <name pos:line="263" pos:column="55">size</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="264" pos:column="9">TCHAR</name> <type:modifier pos:line="264" pos:column="15">*</type:modifier></type> <name pos:line="264" pos:column="17">getGenericSelectedText</name><parameter_list pos:line="264" pos:column="39">(<param><decl><type><name pos:line="264" pos:column="40">TCHAR</name> <type:modifier pos:line="264" pos:column="46">*</type:modifier></type> <name pos:line="264" pos:column="48">txt</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="53">int</name></type> <name pos:line="264" pos:column="57">size</name></decl></param>, <param><decl><type><name pos:line="264" pos:column="63">bool</name></type> <name pos:line="264" pos:column="68">expand</name> <init pos:line="264" pos:column="75">= <expr><lit:literal type="boolean" pos:line="264" pos:column="77">true</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="265" pos:column="9">int</name></type> <name pos:line="265" pos:column="13">searchInTarget</name><parameter_list pos:line="265" pos:column="27">(<param><decl><type><specifier pos:line="265" pos:column="28">const</specifier> <name pos:line="265" pos:column="34">TCHAR</name> <type:modifier pos:line="265" pos:column="40">*</type:modifier></type> <name pos:line="265" pos:column="42">Text2Find</name></decl></param>, <param><decl><type><name pos:line="265" pos:column="53">int</name></type> <name pos:line="265" pos:column="57">lenOfText2Find</name></decl></param>, <param><decl><type><name pos:line="265" pos:column="73">int</name></type> <name pos:line="265" pos:column="77">fromPos</name></decl></param>, <param><decl><type><name pos:line="265" pos:column="86">int</name></type> <name pos:line="265" pos:column="90">toPos</name></decl></param>)</parameter_list> <specifier pos:line="265" pos:column="97">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="266" pos:column="9">void</name></type> <name pos:line="266" pos:column="14">appandGenericText</name><parameter_list pos:line="266" pos:column="31">(<param><decl><type><specifier pos:line="266" pos:column="32">const</specifier> <name pos:line="266" pos:column="38">TCHAR</name> <type:modifier pos:line="266" pos:column="44">*</type:modifier></type> <name pos:line="266" pos:column="46">text2Append</name></decl></param>)</parameter_list> <specifier pos:line="266" pos:column="59">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="267" pos:column="9">void</name></type> <name pos:line="267" pos:column="14">addGenericText</name><parameter_list pos:line="267" pos:column="28">(<param><decl><type><specifier pos:line="267" pos:column="29">const</specifier> <name pos:line="267" pos:column="35">TCHAR</name> <type:modifier pos:line="267" pos:column="41">*</type:modifier></type> <name pos:line="267" pos:column="43">text2Append</name></decl></param>)</parameter_list> <specifier pos:line="267" pos:column="56">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="268" pos:column="9">void</name></type> <name pos:line="268" pos:column="14">addGenericText</name><parameter_list pos:line="268" pos:column="28">(<param><decl><type><specifier pos:line="268" pos:column="29">const</specifier> <name pos:line="268" pos:column="35">TCHAR</name> <type:modifier pos:line="268" pos:column="41">*</type:modifier></type> <name pos:line="268" pos:column="43">text2Append</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="56">long</name> <type:modifier pos:line="268" pos:column="61">*</type:modifier></type><name pos:line="268" pos:column="62">mstart</name></decl></param>, <param><decl><type><name pos:line="268" pos:column="70">long</name> <type:modifier pos:line="268" pos:column="75">*</type:modifier></type><name pos:line="268" pos:column="76">mend</name></decl></param>)</parameter_list> <specifier pos:line="268" pos:column="82">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="269" pos:column="9">int</name></type> <name pos:line="269" pos:column="13">replaceTarget</name><parameter_list pos:line="269" pos:column="26">(<param><decl><type><specifier pos:line="269" pos:column="27">const</specifier> <name pos:line="269" pos:column="33">TCHAR</name> <type:modifier pos:line="269" pos:column="39">*</type:modifier></type> <name pos:line="269" pos:column="41">str2replace</name></decl></param>, <param><decl><type><name pos:line="269" pos:column="54">int</name></type> <name pos:line="269" pos:column="58">fromTargetPos</name> <init pos:line="269" pos:column="72">= <expr><op:operator pos:line="269" pos:column="74">-</op:operator><lit:literal type="number" pos:line="269" pos:column="75">1</lit:literal></expr></init></decl></param>, <name pos:line="269" pos:column="78">int</name> <name pos:line="269" pos:column="82">toTargetPos</name> <op:operator pos:line="269" pos:column="94">=</op:operator> <op:operator pos:line="269" pos:column="96">-</op:operator><lit:literal type="number" pos:line="269" pos:column="97">1</lit:literal>)</parameter_list> <specifier pos:line="269" pos:column="100">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="270" pos:column="9">int</name></type> <name pos:line="270" pos:column="13">replaceTargetRegExMode</name><parameter_list pos:line="270" pos:column="35">(<param><decl><type><specifier pos:line="270" pos:column="36">const</specifier> <name pos:line="270" pos:column="42">TCHAR</name> <type:modifier pos:line="270" pos:column="48">*</type:modifier></type> <name pos:line="270" pos:column="50">re</name></decl></param>, <param><decl><type><name pos:line="270" pos:column="54">int</name></type> <name pos:line="270" pos:column="58">fromTargetPos</name> <init pos:line="270" pos:column="72">= <expr><op:operator pos:line="270" pos:column="74">-</op:operator><lit:literal type="number" pos:line="270" pos:column="75">1</lit:literal></expr></init></decl></param>, <name pos:line="270" pos:column="78">int</name> <name pos:line="270" pos:column="82">toTargetPos</name> <op:operator pos:line="270" pos:column="94">=</op:operator> <op:operator pos:line="270" pos:column="96">-</op:operator><lit:literal type="number" pos:line="270" pos:column="97">1</lit:literal>)</parameter_list> <specifier pos:line="270" pos:column="100">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="271" pos:column="9">void</name></type> <name pos:line="271" pos:column="14">showAutoComletion</name><parameter_list pos:line="271" pos:column="31">(<param><decl><type><name pos:line="271" pos:column="32">int</name></type> <name pos:line="271" pos:column="36">lenEntered</name></decl></param>, <param><decl><type><specifier pos:line="271" pos:column="48">const</specifier> <name pos:line="271" pos:column="54">TCHAR</name> <type:modifier pos:line="271" pos:column="60">*</type:modifier></type> <name pos:line="271" pos:column="62">list</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="272" pos:column="9">void</name></type> <name pos:line="272" pos:column="14">showCallTip</name><parameter_list pos:line="272" pos:column="25">(<param><decl><type><name pos:line="272" pos:column="26">int</name></type> <name pos:line="272" pos:column="30">startPos</name></decl></param>, <param><decl><type><specifier pos:line="272" pos:column="40">const</specifier> <name pos:line="272" pos:column="46">TCHAR</name> <type:modifier pos:line="272" pos:column="52">*</type:modifier></type> <name pos:line="272" pos:column="54">def</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="273" pos:column="9">void</name></type> <name pos:line="273" pos:column="14">getLine</name><parameter_list pos:line="273" pos:column="21">(<param><decl><type><name pos:line="273" pos:column="22">int</name></type> <name pos:line="273" pos:column="26">lineNumber</name></decl></param>, <param><decl><type><name pos:line="273" pos:column="38">TCHAR</name> <type:modifier pos:line="273" pos:column="44">*</type:modifier></type> <name pos:line="273" pos:column="46">line</name></decl></param>, <param><decl><type><name pos:line="273" pos:column="52">int</name></type> <name pos:line="273" pos:column="56">lineBufferLen</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="274" pos:column="9">void</name></type> <name pos:line="274" pos:column="14">addText</name><parameter_list pos:line="274" pos:column="21">(<param><decl><type><name pos:line="274" pos:column="22">int</name></type> <name pos:line="274" pos:column="26">length</name></decl></param>, <param><decl><type><specifier pos:line="274" pos:column="34">const</specifier> <name pos:line="274" pos:column="40">char</name> <type:modifier pos:line="274" pos:column="45">*</type:modifier></type><name pos:line="274" pos:column="46">buf</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="276" pos:column="9">void</name></type> <name pos:line="276" pos:column="14">saveCurrentPos</name><parameter_list pos:line="276" pos:column="28">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="277" pos:column="9">void</name></type> <name pos:line="277" pos:column="14">restoreCurrentPos</name><parameter_list pos:line="277" pos:column="31">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="278" pos:column="9">void</name></type> <name pos:line="278" pos:column="14">saveCurrentFold</name><parameter_list pos:line="278" pos:column="29">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="279" pos:column="9">void</name></type> <name pos:line="279" pos:column="14">restoreCurrentFold</name><parameter_list pos:line="279" pos:column="32">()</parameter_list>;</function_decl>

	<function><type><name pos:line="281" pos:column="9">int</name></type> <name pos:line="281" pos:column="13">getCurrentDocLen</name><parameter_list pos:line="281" pos:column="29">()</parameter_list> <specifier pos:line="281" pos:column="32">const</specifier> <block pos:line="281" pos:column="38">{
		<return pos:line="282" pos:column="17">return <expr><call><name pos:line="282" pos:column="24">int</name><argument_list pos:line="282" pos:column="27">(<argument><expr><call><name pos:line="282" pos:column="28">execute</name><argument_list pos:line="282" pos:column="35">(<argument><expr><name pos:line="282" pos:column="36">SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="283" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="285" pos:column="9">CharacterRange</name></type> <name pos:line="285" pos:column="24">getSelection</name><parameter_list pos:line="285" pos:column="36">()</parameter_list> <specifier pos:line="285" pos:column="39">const</specifier> <block pos:line="285" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="286" pos:column="17">CharacterRange</name></type> <name pos:line="286" pos:column="32">crange</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="287" pos:column="17">crange</name><op:operator pos:line="287" pos:column="23">.</op:operator><name pos:line="287" pos:column="24">cpMin</name></name> <op:operator pos:line="287" pos:column="30">=</op:operator> <call><name pos:line="287" pos:column="32">long</name><argument_list pos:line="287" pos:column="36">(<argument><expr><call><name pos:line="287" pos:column="37">execute</name><argument_list pos:line="287" pos:column="44">(<argument><expr><name pos:line="287" pos:column="45">SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="288" pos:column="17">crange</name><op:operator pos:line="288" pos:column="23">.</op:operator><name pos:line="288" pos:column="24">cpMax</name></name> <op:operator pos:line="288" pos:column="30">=</op:operator> <call><name pos:line="288" pos:column="32">long</name><argument_list pos:line="288" pos:column="36">(<argument><expr><call><name pos:line="288" pos:column="37">execute</name><argument_list pos:line="288" pos:column="44">(<argument><expr><name pos:line="288" pos:column="45">SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="289" pos:column="17">return <expr><name pos:line="289" pos:column="24">crange</name></expr>;</return>
	}</block></function><empty_stmt pos:line="290" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="292" pos:column="9">void</name></type> <name pos:line="292" pos:column="14">getWordToCurrentPos</name><parameter_list pos:line="292" pos:column="33">(<param><decl><type><name pos:line="292" pos:column="34">TCHAR</name> <type:modifier pos:line="292" pos:column="40">*</type:modifier></type> <name pos:line="292" pos:column="42">str</name></decl></param>, <param><decl><type><name pos:line="292" pos:column="47">int</name></type> <name pos:line="292" pos:column="51">strLen</name></decl></param>)</parameter_list> <specifier pos:line="292" pos:column="59">const</specifier> <block pos:line="292" pos:column="65">{
		<decl_stmt><decl><type><name pos:line="293" pos:column="17">int</name></type> <name pos:line="293" pos:column="21">caretPos</name> <init pos:line="293" pos:column="30">= <expr><call><name pos:line="293" pos:column="32">execute</name><argument_list pos:line="293" pos:column="39">(<argument><expr><name pos:line="293" pos:column="40">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="294" pos:column="17">int</name></type> <name pos:line="294" pos:column="21">startPos</name> <init pos:line="294" pos:column="30">= <expr><call><name><name pos:line="294" pos:column="32">static_cast</name><argument_list pos:line="294" pos:column="43">&lt;<argument><expr><name pos:line="294" pos:column="44">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="294" pos:column="48">(<argument><expr><call><name pos:line="294" pos:column="49">execute</name><argument_list pos:line="294" pos:column="56">(<argument><expr><name pos:line="294" pos:column="57">SCI_WORDSTARTPOSITION</name></expr></argument>, <argument><expr><name pos:line="294" pos:column="80">caretPos</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="294" pos:column="90">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><name><name pos:line="296" pos:column="17">str</name><index pos:line="296" pos:column="20">[<expr><lit:literal type="number" pos:line="296" pos:column="21">0</lit:literal></expr>]</index></name> <op:operator pos:line="296" pos:column="24">=</op:operator> <lit:literal type="char" pos:line="296" pos:column="26">'\0'</lit:literal></expr>;</expr_stmt>
		<if pos:line="297" pos:column="17">if <condition pos:line="297" pos:column="20">(<expr><op:operator pos:line="297" pos:column="21">(</op:operator><name pos:line="297" pos:column="22">caretPos</name> <op:operator pos:line="297" pos:column="31">-</op:operator> <name pos:line="297" pos:column="33">startPos</name><op:operator pos:line="297" pos:column="41">)</op:operator> <op:operator pos:line="297" pos:column="43">&lt;</op:operator> <name pos:line="297" pos:column="45">strLen</name></expr>)</condition><then pos:line="297" pos:column="52">
			<expr_stmt><expr><call><name pos:line="298" pos:column="25">getGenericText</name><argument_list pos:line="298" pos:column="39">(<argument><expr><name pos:line="298" pos:column="40">str</name></expr></argument>, <argument><expr><name pos:line="298" pos:column="45">strLen</name></expr></argument>, <argument><expr><name pos:line="298" pos:column="53">startPos</name></expr></argument>, <argument><expr><name pos:line="298" pos:column="63">caretPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></function><empty_stmt pos:line="299" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="301" pos:column="5">void</name></type> <name pos:line="301" pos:column="10">doUserDefineDlg</name><parameter_list pos:line="301" pos:column="25">(<param><decl><type><name pos:line="301" pos:column="26">bool</name></type> <name pos:line="301" pos:column="31">willBeShown</name> <init pos:line="301" pos:column="43">= <expr><lit:literal type="boolean" pos:line="301" pos:column="45">true</lit:literal></expr></init></decl></param>, <name pos:line="301" pos:column="51">bool</name> <name pos:line="301" pos:column="56">isRTL</name> <op:operator pos:line="301" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="301" pos:column="64">false</lit:literal>)</parameter_list> <block pos:line="301" pos:column="71">{
        <expr_stmt><expr><call><name><name pos:line="302" pos:column="9">_userDefineDlg</name><op:operator pos:line="302" pos:column="23">.</op:operator><name pos:line="302" pos:column="24">doDialog</name></name><argument_list pos:line="302" pos:column="32">(<argument><expr><name pos:line="302" pos:column="33">willBeShown</name></expr></argument>, <argument><expr><name pos:line="302" pos:column="46">isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="303" pos:column="6">;</empty_stmt>

    <function><type><specifier pos:line="305" pos:column="5">static</specifier> <name pos:line="305" pos:column="12">UserDefineDialog</name> <type:modifier pos:line="305" pos:column="29">*</type:modifier></type> <name pos:line="305" pos:column="31">getUserDefineDlg</name><parameter_list pos:line="305" pos:column="47">()</parameter_list> <block pos:line="305" pos:column="50">{<return pos:line="305" pos:column="51">return <expr><op:operator pos:line="305" pos:column="58">&amp;</op:operator><name pos:line="305" pos:column="59">_userDefineDlg</name></expr>;</return>}</block></function><empty_stmt pos:line="305" pos:column="75">;</empty_stmt>

    <function><type><name pos:line="307" pos:column="5">void</name></type> <name pos:line="307" pos:column="10">setCaretColorWidth</name><parameter_list pos:line="307" pos:column="28">(<param><decl><type><name pos:line="307" pos:column="29">int</name></type> <name pos:line="307" pos:column="33">color</name></decl></param>, <param><decl><type><name pos:line="307" pos:column="40">int</name></type> <name pos:line="307" pos:column="44">width</name> <init pos:line="307" pos:column="50">= <expr><lit:literal type="number" pos:line="307" pos:column="52">1</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="307" pos:column="55">const</specifier> <block pos:line="307" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="308" pos:column="9">execute</name><argument_list pos:line="308" pos:column="16">(<argument><expr><name pos:line="308" pos:column="17">SCI_SETCARETFORE</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="35">color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="309" pos:column="9">execute</name><argument_list pos:line="309" pos:column="16">(<argument><expr><name pos:line="309" pos:column="17">SCI_SETCARETWIDTH</name></expr></argument>, <argument><expr><name pos:line="309" pos:column="36">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="310" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="312" pos:column="9">void</name></type> <name pos:line="312" pos:column="14">beSwitched</name><parameter_list pos:line="312" pos:column="24">()</parameter_list> <block pos:line="312" pos:column="27">{
		<expr_stmt><expr><call><name><name pos:line="313" pos:column="17">_userDefineDlg</name><op:operator pos:line="313" pos:column="31">.</op:operator><name pos:line="313" pos:column="32">setScintilla</name></name><argument_list pos:line="313" pos:column="44">(<argument><expr><name pos:line="313" pos:column="45">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="314" pos:column="10">;</empty_stmt>

    <comment type="line" pos:line="316" pos:column="5">//Marge member and method</comment>
    <decl_stmt><decl><type><specifier pos:line="317" pos:column="5">static</specifier> <specifier pos:line="317" pos:column="12">const</specifier> <name pos:line="317" pos:column="18">int</name></type> <name pos:line="317" pos:column="22">_SC_MARGE_LINENUMBER</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="318" pos:column="5">static</specifier> <specifier pos:line="318" pos:column="12">const</specifier> <name pos:line="318" pos:column="18">int</name></type> <name pos:line="318" pos:column="22">_SC_MARGE_SYBOLE</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="319" pos:column="5">static</specifier> <specifier pos:line="319" pos:column="12">const</specifier> <name pos:line="319" pos:column="18">int</name></type> <name pos:line="319" pos:column="22">_SC_MARGE_FOLDER</name></decl>;</decl_stmt>
	<comment type="line" pos:line="320" pos:column="9">//static const int _SC_MARGE_MODIFMARKER;</comment>

    <function><type><name pos:line="322" pos:column="5">void</name></type> <name pos:line="322" pos:column="10">showMargin</name><parameter_list pos:line="322" pos:column="20">(<param><decl><type><name pos:line="322" pos:column="21">int</name></type> <name pos:line="322" pos:column="25">whichMarge</name></decl></param>, <param><decl><type><name pos:line="322" pos:column="37">bool</name></type> <name pos:line="322" pos:column="42">willBeShowed</name> <init pos:line="322" pos:column="55">= <expr><lit:literal type="boolean" pos:line="322" pos:column="57">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="322" pos:column="63">{
        <if pos:line="323" pos:column="9">if <condition pos:line="323" pos:column="12">(<expr><name pos:line="323" pos:column="13">whichMarge</name> <op:operator pos:line="323" pos:column="24">==</op:operator> <name pos:line="323" pos:column="27">_SC_MARGE_LINENUMBER</name></expr>)</condition><then pos:line="323" pos:column="48">
			<expr_stmt><expr><call><name pos:line="324" pos:column="25">showLineNumbersMargin</name><argument_list pos:line="324" pos:column="46">(<argument><expr><name pos:line="324" pos:column="47">willBeShowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else pos:line="325" pos:column="9">else
		<block pos:line="326" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="327" pos:column="25">int</name></type> <name pos:line="327" pos:column="29">width</name> <init pos:line="327" pos:column="35">= <expr><lit:literal type="number" pos:line="327" pos:column="37">3</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="328" pos:column="25">if <condition pos:line="328" pos:column="28">(<expr><name pos:line="328" pos:column="29">whichMarge</name> <op:operator pos:line="328" pos:column="40">==</op:operator> <name pos:line="328" pos:column="43">_SC_MARGE_SYBOLE</name> <op:operator pos:line="328" pos:column="60">||</op:operator> <name pos:line="328" pos:column="63">whichMarge</name> <op:operator pos:line="328" pos:column="74">==</op:operator> <name pos:line="328" pos:column="77">_SC_MARGE_FOLDER</name></expr>)</condition><then pos:line="328" pos:column="94">
				<expr_stmt><expr><name pos:line="329" pos:column="33">width</name> <op:operator pos:line="329" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="329" pos:column="41">14</lit:literal></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name pos:line="330" pos:column="13">execute</name><argument_list pos:line="330" pos:column="20">(<argument><expr><name pos:line="330" pos:column="21">SCI_SETMARGINWIDTHN</name></expr></argument>, <argument><expr><name pos:line="330" pos:column="42">whichMarge</name></expr></argument>, <argument><expr><name pos:line="330" pos:column="54">willBeShowed</name><op:operator pos:line="330" pos:column="66">?</op:operator><name pos:line="330" pos:column="67">width</name><op:operator pos:line="330" pos:column="72">:</op:operator><lit:literal type="number" pos:line="330" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
    }</block></function><empty_stmt pos:line="332" pos:column="6">;</empty_stmt>

    <function><type><name pos:line="334" pos:column="5">bool</name></type> <name pos:line="334" pos:column="10">hasMarginShowed</name><parameter_list pos:line="334" pos:column="25">(<param><decl><type><name pos:line="334" pos:column="26">int</name></type> <name pos:line="334" pos:column="30">witchMarge</name></decl></param>)</parameter_list> <block pos:line="334" pos:column="42">{
		<return pos:line="335" pos:column="17">return <expr><op:operator pos:line="335" pos:column="24">(</op:operator><call><name pos:line="335" pos:column="25">execute</name><argument_list pos:line="335" pos:column="32">(<argument><expr><name pos:line="335" pos:column="33">SCI_GETMARGINWIDTHN</name></expr></argument>, <argument><expr><name pos:line="335" pos:column="54">witchMarge</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="335" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="335" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="335" pos:column="72">0</lit:literal><op:operator pos:line="335" pos:column="73">)</op:operator></expr>;</return>
    }</block></function><empty_stmt pos:line="336" pos:column="6">;</empty_stmt>
    
    <function_decl><type><name pos:line="338" pos:column="5">void</name></type> <name pos:line="338" pos:column="10">marginClick</name><parameter_list pos:line="338" pos:column="21">(<param><decl><type><name pos:line="338" pos:column="22">int</name></type> <name pos:line="338" pos:column="26">position</name></decl></param>, <param><decl><type><name pos:line="338" pos:column="36">int</name></type> <name pos:line="338" pos:column="40">modifiers</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name pos:line="340" pos:column="5">void</name></type> <name pos:line="340" pos:column="10">setMakerStyle</name><parameter_list pos:line="340" pos:column="23">(<param><decl><type><name pos:line="340" pos:column="24">folderStyle</name></type> <name pos:line="340" pos:column="36">style</name></decl></param>)</parameter_list> <block pos:line="340" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="341" pos:column="17">bool</name></type> <name pos:line="341" pos:column="22">display</name></decl>;</decl_stmt>
		<if pos:line="342" pos:column="17">if <condition pos:line="342" pos:column="20">(<expr><name pos:line="342" pos:column="21">style</name> <op:operator pos:line="342" pos:column="27">==</op:operator> <name pos:line="342" pos:column="30">FOLDER_STYLE_NONE</name></expr>)</condition><then pos:line="342" pos:column="48">
		<block pos:line="343" pos:column="17">{
			<expr_stmt><expr><name pos:line="344" pos:column="25">style</name> <op:operator pos:line="344" pos:column="31">=</op:operator> <name pos:line="344" pos:column="33">FOLDER_STYLE_BOX</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="345" pos:column="25">display</name> <op:operator pos:line="345" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="345" pos:column="35">false</lit:literal></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="347" pos:column="17">else
		<block pos:line="348" pos:column="17">{
			<expr_stmt><expr><name pos:line="349" pos:column="25">display</name> <op:operator pos:line="349" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="349" pos:column="35">true</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		<for pos:line="351" pos:column="17">for (<init><decl><type><name pos:line="351" pos:column="22">int</name></type> <name pos:line="351" pos:column="26">i</name> <init pos:line="351" pos:column="28">= <expr><lit:literal type="number" pos:line="351" pos:column="30">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="351" pos:column="34">i</name> <op:operator pos:line="351" pos:column="36">&lt;</op:operator> <name pos:line="351" pos:column="38">NB_FOLDER_STATE</name></expr> ;</condition> <incr><expr><name pos:line="351" pos:column="56">i</name><op:operator pos:line="351" pos:column="57">++</op:operator></expr></incr>)
			<expr_stmt><expr><call><name pos:line="352" pos:column="25">defineMarker</name><argument_list pos:line="352" pos:column="37">(<argument><expr><name><name pos:line="352" pos:column="38">_markersArray</name><index pos:line="352" pos:column="51">[<expr><name pos:line="352" pos:column="52">FOLDER_TYPE</name></expr>]</index><index pos:line="352" pos:column="64">[<expr><name pos:line="352" pos:column="65">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="352" pos:column="69">_markersArray</name><index pos:line="352" pos:column="82">[<expr><name pos:line="352" pos:column="83">style</name></expr>]</index><index pos:line="352" pos:column="89">[<expr><name pos:line="352" pos:column="90">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="352" pos:column="94">white</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="101">grey</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="107">white</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
		<expr_stmt><expr><call><name pos:line="353" pos:column="17">showMargin</name><argument_list pos:line="353" pos:column="27">(<argument><expr><name><name pos:line="353" pos:column="28">ScintillaEditView</name><op:operator pos:line="353" pos:column="45">::</op:operator><name pos:line="353" pos:column="47">_SC_MARGE_FOLDER</name></name></expr></argument>, <argument><expr><name pos:line="353" pos:column="65">display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="354" pos:column="6">;</empty_stmt>


	<function><type><name pos:line="357" pos:column="9">void</name></type> <name pos:line="357" pos:column="14">setWrapMode</name><parameter_list pos:line="357" pos:column="25">(<param><decl><type><name pos:line="357" pos:column="26">lineWrapMethod</name></type> <name pos:line="357" pos:column="41">meth</name></decl></param>)</parameter_list> <block pos:line="357" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="358" pos:column="17">int</name></type> <name pos:line="358" pos:column="21">mode</name> <init pos:line="358" pos:column="26">= <expr><op:operator pos:line="358" pos:column="28">(</op:operator><name pos:line="358" pos:column="29">meth</name> <op:operator pos:line="358" pos:column="34">==</op:operator> <name pos:line="358" pos:column="37">LINEWRAP_ALIGNED</name><op:operator pos:line="358" pos:column="53">)</op:operator><op:operator pos:line="358" pos:column="54">?</op:operator><name pos:line="358" pos:column="55">SC_WRAPINDENT_SAME</name><op:operator pos:line="358" pos:column="73">:</op:operator>\
				<op:operator pos:line="359" pos:column="33">(</op:operator><name pos:line="359" pos:column="34">meth</name> <op:operator pos:line="359" pos:column="39">==</op:operator> <name pos:line="359" pos:column="42">LINEWRAP_INDENT</name><op:operator pos:line="359" pos:column="57">)</op:operator><op:operator pos:line="359" pos:column="58">?</op:operator><name pos:line="359" pos:column="59">SC_WRAPINDENT_INDENT</name><op:operator pos:line="359" pos:column="79">:</op:operator><name pos:line="359" pos:column="80">SC_WRAPINDENT_FIXED</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="360" pos:column="17">execute</name><argument_list pos:line="360" pos:column="24">(<argument><expr><name pos:line="360" pos:column="25">SCI_SETWRAPINDENTMODE</name></expr></argument>, <argument><expr><name pos:line="360" pos:column="48">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="361" pos:column="10">;</empty_stmt>


	<function><type><name pos:line="364" pos:column="9">void</name></type> <name pos:line="364" pos:column="14">showWSAndTab</name><parameter_list pos:line="364" pos:column="26">(<param><decl><type><name pos:line="364" pos:column="27">bool</name></type> <name pos:line="364" pos:column="32">willBeShowed</name> <init pos:line="364" pos:column="45">= <expr><lit:literal type="boolean" pos:line="364" pos:column="47">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="364" pos:column="53">{
		<expr_stmt><expr><call><name pos:line="365" pos:column="17">execute</name><argument_list pos:line="365" pos:column="24">(<argument><expr><name pos:line="365" pos:column="25">SCI_SETVIEWWS</name></expr></argument>, <argument><expr><name pos:line="365" pos:column="40">willBeShowed</name><op:operator pos:line="365" pos:column="52">?</op:operator><name pos:line="365" pos:column="53">SCWS_VISIBLEALWAYS</name><op:operator pos:line="365" pos:column="71">:</op:operator><name pos:line="365" pos:column="72">SCWS_INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="366" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="368" pos:column="9">void</name></type> <name pos:line="368" pos:column="14">showEOL</name><parameter_list pos:line="368" pos:column="21">(<param><decl><type><name pos:line="368" pos:column="22">bool</name></type> <name pos:line="368" pos:column="27">willBeShowed</name> <init pos:line="368" pos:column="40">= <expr><lit:literal type="boolean" pos:line="368" pos:column="42">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="368" pos:column="48">{
		<expr_stmt><expr><call><name pos:line="369" pos:column="17">execute</name><argument_list pos:line="369" pos:column="24">(<argument><expr><name pos:line="369" pos:column="25">SCI_SETVIEWEOL</name></expr></argument>, <argument><expr><name pos:line="369" pos:column="41">willBeShowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="370" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="372" pos:column="9">bool</name></type> <name pos:line="372" pos:column="14">isEolVisible</name><parameter_list pos:line="372" pos:column="26">()</parameter_list> <block pos:line="372" pos:column="29">{
		<return pos:line="373" pos:column="17">return <expr><op:operator pos:line="373" pos:column="24">(</op:operator><call><name pos:line="373" pos:column="25">execute</name><argument_list pos:line="373" pos:column="32">(<argument><expr><name pos:line="373" pos:column="33">SCI_GETVIEWEOL</name></expr></argument>)</argument_list></call> <op:operator pos:line="373" pos:column="49">!=</op:operator> <lit:literal type="number" pos:line="373" pos:column="52">0</lit:literal><op:operator pos:line="373" pos:column="53">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="374" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="375" pos:column="9">void</name></type> <name pos:line="375" pos:column="14">showInvisibleChars</name><parameter_list pos:line="375" pos:column="32">(<param><decl><type><name pos:line="375" pos:column="33">bool</name></type> <name pos:line="375" pos:column="38">willBeShowed</name> <init pos:line="375" pos:column="51">= <expr><lit:literal type="boolean" pos:line="375" pos:column="53">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="375" pos:column="59">{
		<expr_stmt><expr><call><name pos:line="376" pos:column="17">showWSAndTab</name><argument_list pos:line="376" pos:column="29">(<argument><expr><name pos:line="376" pos:column="30">willBeShowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="377" pos:column="17">showEOL</name><argument_list pos:line="377" pos:column="24">(<argument><expr><name pos:line="377" pos:column="25">willBeShowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="378" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="380" pos:column="9">bool</name></type> <name pos:line="380" pos:column="14">isInvisibleCharsShown</name><parameter_list pos:line="380" pos:column="35">()</parameter_list> <block pos:line="380" pos:column="38">{
		<return pos:line="381" pos:column="17">return <expr><op:operator pos:line="381" pos:column="24">(</op:operator><call><name pos:line="381" pos:column="25">execute</name><argument_list pos:line="381" pos:column="32">(<argument><expr><name pos:line="381" pos:column="33">SCI_GETVIEWWS</name></expr></argument>)</argument_list></call> <op:operator pos:line="381" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="381" pos:column="51">0</lit:literal><op:operator pos:line="381" pos:column="52">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="382" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="384" pos:column="9">void</name></type> <name pos:line="384" pos:column="14">showIndentGuideLine</name><parameter_list pos:line="384" pos:column="33">(<param><decl><type><name pos:line="384" pos:column="34">bool</name></type> <name pos:line="384" pos:column="39">willBeShowed</name> <init pos:line="384" pos:column="52">= <expr><lit:literal type="boolean" pos:line="384" pos:column="54">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="384" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="385" pos:column="17">execute</name><argument_list pos:line="385" pos:column="24">(<argument><expr><name pos:line="385" pos:column="25">SCI_SETINDENTATIONGUIDES</name></expr></argument>, <argument><expr><op:operator pos:line="385" pos:column="51">(</op:operator><name pos:line="385" pos:column="52">WPARAM</name><op:operator pos:line="385" pos:column="58">)</op:operator><name pos:line="385" pos:column="59">willBeShowed</name><op:operator pos:line="385" pos:column="71">?</op:operator><op:operator pos:line="385" pos:column="72">(</op:operator><name pos:line="385" pos:column="73">SC_IV_LOOKBOTH</name><op:operator pos:line="385" pos:column="87">)</op:operator><op:operator pos:line="385" pos:column="88">:</op:operator><op:operator pos:line="385" pos:column="89">(</op:operator><name pos:line="385" pos:column="90">SC_IV_NONE</name><op:operator pos:line="385" pos:column="100">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
	}</block></function><empty_stmt pos:line="386" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="388" pos:column="9">bool</name></type> <name pos:line="388" pos:column="14">isShownIndentGuide</name><parameter_list pos:line="388" pos:column="32">()</parameter_list> <specifier pos:line="388" pos:column="35">const</specifier> <block pos:line="388" pos:column="41">{
		<return pos:line="389" pos:column="17">return <expr><op:operator pos:line="389" pos:column="24">(</op:operator><call><name pos:line="389" pos:column="25">execute</name><argument_list pos:line="389" pos:column="32">(<argument><expr><name pos:line="389" pos:column="33">SCI_GETINDENTATIONGUIDES</name></expr></argument>)</argument_list></call> <op:operator pos:line="389" pos:column="59">!=</op:operator> <lit:literal type="number" pos:line="389" pos:column="62">0</lit:literal><op:operator pos:line="389" pos:column="63">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="390" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="392" pos:column="5">void</name></type> <name pos:line="392" pos:column="10">wrap</name><parameter_list pos:line="392" pos:column="14">(<param><decl><type><name pos:line="392" pos:column="15">bool</name></type> <name pos:line="392" pos:column="20">willBeWrapped</name> <init pos:line="392" pos:column="34">= <expr><lit:literal type="boolean" pos:line="392" pos:column="36">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="392" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="393" pos:column="9">execute</name><argument_list pos:line="393" pos:column="16">(<argument><expr><name pos:line="393" pos:column="17">SCI_SETWRAPMODE</name></expr></argument>, <argument><expr><op:operator pos:line="393" pos:column="34">(</op:operator><name pos:line="393" pos:column="35">WPARAM</name><op:operator pos:line="393" pos:column="41">)</op:operator><name pos:line="393" pos:column="42">willBeWrapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="394" pos:column="6">;</empty_stmt>

    <function><type><name pos:line="396" pos:column="5">bool</name></type> <name pos:line="396" pos:column="10">isWrap</name><parameter_list pos:line="396" pos:column="16">()</parameter_list> <specifier pos:line="396" pos:column="19">const</specifier> <block pos:line="396" pos:column="25">{
        <return pos:line="397" pos:column="9">return <expr><op:operator pos:line="397" pos:column="16">(</op:operator><call><name pos:line="397" pos:column="17">execute</name><argument_list pos:line="397" pos:column="24">(<argument><expr><name pos:line="397" pos:column="25">SCI_GETWRAPMODE</name></expr></argument>)</argument_list></call> <op:operator pos:line="397" pos:column="42">==</op:operator> <name pos:line="397" pos:column="45">SC_WRAP_WORD</name><op:operator pos:line="397" pos:column="57">)</op:operator></expr>;</return>
    }</block></function><empty_stmt pos:line="398" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="400" pos:column="9">bool</name></type> <name pos:line="400" pos:column="14">isWrapSymbolVisible</name><parameter_list pos:line="400" pos:column="33">()</parameter_list> <specifier pos:line="400" pos:column="36">const</specifier> <block pos:line="400" pos:column="42">{
		<return pos:line="401" pos:column="17">return <expr><op:operator pos:line="401" pos:column="24">(</op:operator><call><name pos:line="401" pos:column="25">execute</name><argument_list pos:line="401" pos:column="32">(<argument><expr><name pos:line="401" pos:column="33">SCI_GETWRAPVISUALFLAGS</name></expr></argument>)</argument_list></call> <op:operator pos:line="401" pos:column="57">!=</op:operator> <name pos:line="401" pos:column="60">SC_WRAPVISUALFLAG_NONE</name><op:operator pos:line="401" pos:column="82">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="402" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="404" pos:column="5">void</name></type> <name pos:line="404" pos:column="10">showWrapSymbol</name><parameter_list pos:line="404" pos:column="24">(<param><decl><type><name pos:line="404" pos:column="25">bool</name></type> <name pos:line="404" pos:column="30">willBeShown</name> <init pos:line="404" pos:column="42">= <expr><lit:literal type="boolean" pos:line="404" pos:column="44">true</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="404" pos:column="50">{
		<expr_stmt><expr><call><name pos:line="405" pos:column="17">execute</name><argument_list pos:line="405" pos:column="24">(<argument><expr><name pos:line="405" pos:column="25">SCI_SETWRAPVISUALFLAGSLOCATION</name></expr></argument>, <argument><expr><name pos:line="405" pos:column="57">SC_WRAPVISUALFLAGLOC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="406" pos:column="17">execute</name><argument_list pos:line="406" pos:column="24">(<argument><expr><name pos:line="406" pos:column="25">SCI_SETWRAPVISUALFLAGS</name></expr></argument>, <argument><expr><name pos:line="406" pos:column="49">willBeShown</name><op:operator pos:line="406" pos:column="60">?</op:operator><name pos:line="406" pos:column="61">SC_WRAPVISUALFLAG_END</name><op:operator pos:line="406" pos:column="82">:</op:operator><name pos:line="406" pos:column="83">SC_WRAPVISUALFLAG_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function><empty_stmt pos:line="407" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="409" pos:column="9">long</name></type> <name pos:line="409" pos:column="14">getCurrentLineNumber</name><parameter_list pos:line="409" pos:column="34">()</parameter_list><specifier pos:line="409" pos:column="36">const</specifier> <block pos:line="409" pos:column="42">{
		<return pos:line="410" pos:column="17">return <expr><call><name pos:line="410" pos:column="24">long</name><argument_list pos:line="410" pos:column="28">(<argument><expr><call><name pos:line="410" pos:column="29">execute</name><argument_list pos:line="410" pos:column="36">(<argument><expr><name pos:line="410" pos:column="37">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><call><name pos:line="410" pos:column="59">execute</name><argument_list pos:line="410" pos:column="66">(<argument><expr><name pos:line="410" pos:column="67">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="411" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="413" pos:column="9">long</name></type> <name pos:line="413" pos:column="14">lastZeroBasedLineNumber</name><parameter_list pos:line="413" pos:column="37">()</parameter_list> <specifier pos:line="413" pos:column="40">const</specifier> <block pos:line="413" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="414" pos:column="17">int</name></type> <name pos:line="414" pos:column="21">endPos</name> <init pos:line="414" pos:column="28">= <expr><call><name pos:line="414" pos:column="30">execute</name><argument_list pos:line="414" pos:column="37">(<argument><expr><name pos:line="414" pos:column="38">SCI_GETLENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="415" pos:column="17">return <expr><call><name pos:line="415" pos:column="24">execute</name><argument_list pos:line="415" pos:column="31">(<argument><expr><name pos:line="415" pos:column="32">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="415" pos:column="54">endPos</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="416" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="418" pos:column="9">long</name></type> <name pos:line="418" pos:column="14">getCurrentXOffset</name><parameter_list pos:line="418" pos:column="31">()</parameter_list><specifier pos:line="418" pos:column="33">const</specifier><block pos:line="418" pos:column="38">{
		<return pos:line="419" pos:column="17">return <expr><call><name pos:line="419" pos:column="24">long</name><argument_list pos:line="419" pos:column="28">(<argument><expr><call><name pos:line="419" pos:column="29">execute</name><argument_list pos:line="419" pos:column="36">(<argument><expr><name pos:line="419" pos:column="37">SCI_GETXOFFSET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="420" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="422" pos:column="9">void</name></type> <name pos:line="422" pos:column="14">setCurrentXOffset</name><parameter_list pos:line="422" pos:column="31">(<param><decl><type><name pos:line="422" pos:column="32">long</name></type> <name pos:line="422" pos:column="37">xOffset</name></decl></param>)</parameter_list><block pos:line="422" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="423" pos:column="17">execute</name><argument_list pos:line="423" pos:column="24">(<argument><expr><name pos:line="423" pos:column="25">SCI_SETXOFFSET</name></expr></argument>,<argument><expr><name pos:line="423" pos:column="40">xOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="424" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="426" pos:column="9">void</name></type> <name pos:line="426" pos:column="14">scroll</name><parameter_list pos:line="426" pos:column="20">(<param><decl><type><name pos:line="426" pos:column="21">int</name></type> <name pos:line="426" pos:column="25">column</name></decl></param>, <param><decl><type><name pos:line="426" pos:column="33">int</name></type> <name pos:line="426" pos:column="37">line</name></decl></param>)</parameter_list><block pos:line="426" pos:column="42">{
		<expr_stmt><expr><call><name pos:line="427" pos:column="17">execute</name><argument_list pos:line="427" pos:column="24">(<argument><expr><name pos:line="427" pos:column="25">SCI_LINESCROLL</name></expr></argument>, <argument><expr><name pos:line="427" pos:column="41">column</name></expr></argument>, <argument><expr><name pos:line="427" pos:column="49">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="428" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="430" pos:column="9">long</name></type> <name pos:line="430" pos:column="14">getCurrentPointX</name><parameter_list pos:line="430" pos:column="30">()</parameter_list><specifier pos:line="430" pos:column="32">const</specifier><block pos:line="430" pos:column="37">{
		<return pos:line="431" pos:column="17">return <expr><call><name pos:line="431" pos:column="24">long</name> <argument_list pos:line="431" pos:column="29">(<argument><expr><call><name pos:line="431" pos:column="30">execute</name><argument_list pos:line="431" pos:column="37">(<argument><expr><name pos:line="431" pos:column="38">SCI_POINTXFROMPOSITION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="431" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="431" pos:column="65">execute</name><argument_list pos:line="431" pos:column="72">(<argument><expr><name pos:line="431" pos:column="73">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="432" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="434" pos:column="9">long</name></type> <name pos:line="434" pos:column="14">getCurrentPointY</name><parameter_list pos:line="434" pos:column="30">()</parameter_list><specifier pos:line="434" pos:column="32">const</specifier><block pos:line="434" pos:column="37">{
		<return pos:line="435" pos:column="17">return <expr><call><name pos:line="435" pos:column="24">long</name> <argument_list pos:line="435" pos:column="29">(<argument><expr><call><name pos:line="435" pos:column="30">execute</name><argument_list pos:line="435" pos:column="37">(<argument><expr><name pos:line="435" pos:column="38">SCI_POINTYFROMPOSITION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="435" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="435" pos:column="65">execute</name><argument_list pos:line="435" pos:column="72">(<argument><expr><name pos:line="435" pos:column="73">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="436" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="438" pos:column="9">long</name></type> <name pos:line="438" pos:column="14">getTextHeight</name><parameter_list pos:line="438" pos:column="27">()</parameter_list><specifier pos:line="438" pos:column="29">const</specifier><block pos:line="438" pos:column="34">{
		<return pos:line="439" pos:column="17">return <expr><call><name pos:line="439" pos:column="24">long</name><argument_list pos:line="439" pos:column="28">(<argument><expr><call><name pos:line="439" pos:column="29">execute</name><argument_list pos:line="439" pos:column="36">(<argument><expr><name pos:line="439" pos:column="37">SCI_TEXTHEIGHT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="440" pos:column="10">;</empty_stmt>
	
	<function><type><name pos:line="442" pos:column="9">void</name></type> <name pos:line="442" pos:column="14">gotoLine</name><parameter_list pos:line="442" pos:column="22">(<param><decl><type><name pos:line="442" pos:column="23">int</name></type> <name pos:line="442" pos:column="27">line</name></decl></param>)</parameter_list><block pos:line="442" pos:column="32">{
		<if pos:line="443" pos:column="17">if <condition pos:line="443" pos:column="20">(<expr><name pos:line="443" pos:column="21">line</name> <op:operator pos:line="443" pos:column="26">&lt;</op:operator> <call><name pos:line="443" pos:column="28">execute</name><argument_list pos:line="443" pos:column="35">(<argument><expr><name pos:line="443" pos:column="36">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="443" pos:column="54">
			<expr_stmt><expr><call><name pos:line="444" pos:column="25">execute</name><argument_list pos:line="444" pos:column="32">(<argument><expr><name pos:line="444" pos:column="33">SCI_GOTOLINE</name></expr></argument>,<argument><expr><name pos:line="444" pos:column="46">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></function><empty_stmt pos:line="445" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="447" pos:column="9">long</name></type> <name pos:line="447" pos:column="14">getCurrentColumnNumber</name><parameter_list pos:line="447" pos:column="36">()</parameter_list> <specifier pos:line="447" pos:column="39">const</specifier> <block pos:line="447" pos:column="45">{
        <return pos:line="448" pos:column="9">return <expr><call><name pos:line="448" pos:column="16">long</name><argument_list pos:line="448" pos:column="20">(<argument><expr><call><name pos:line="448" pos:column="21">execute</name><argument_list pos:line="448" pos:column="28">(<argument><expr><name pos:line="448" pos:column="29">SCI_GETCOLUMN</name></expr></argument>, <argument><expr><call><name pos:line="448" pos:column="44">execute</name><argument_list pos:line="448" pos:column="51">(<argument><expr><name pos:line="448" pos:column="52">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function><empty_stmt pos:line="449" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="451" pos:column="9">bool</name></type> <name pos:line="451" pos:column="14">getSelectedCount</name><parameter_list pos:line="451" pos:column="30">(<param><decl><type><name pos:line="451" pos:column="31">int</name> <type:modifier pos:line="451" pos:column="35">&amp;</type:modifier></type> <name pos:line="451" pos:column="37">selByte</name></decl></param>, <param><decl><type><name pos:line="451" pos:column="46">int</name> <type:modifier pos:line="451" pos:column="50">&amp;</type:modifier></type> <name pos:line="451" pos:column="52">selLine</name></decl></param>)</parameter_list> <specifier pos:line="451" pos:column="61">const</specifier> <block pos:line="451" pos:column="67">{
		<comment type="line" pos:line="452" pos:column="17">// return false if it's multi-selection or rectangle selection</comment>
		<if pos:line="453" pos:column="17">if <condition pos:line="453" pos:column="20">(<expr><op:operator pos:line="453" pos:column="21">(</op:operator><call><name pos:line="453" pos:column="22">execute</name><argument_list pos:line="453" pos:column="29">(<argument><expr><name pos:line="453" pos:column="30">SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call> <op:operator pos:line="453" pos:column="49">&gt;</op:operator> <lit:literal type="number" pos:line="453" pos:column="51">1</lit:literal><op:operator pos:line="453" pos:column="52">)</op:operator> <op:operator pos:line="453" pos:column="54">||</op:operator> <call><name pos:line="453" pos:column="57">execute</name><argument_list pos:line="453" pos:column="64">(<argument><expr><name pos:line="453" pos:column="65">SCI_SELECTIONISRECTANGLE</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="453" pos:column="91">
			<return pos:line="454" pos:column="25">return <expr><lit:literal type="boolean" pos:line="454" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<decl_stmt><decl><type><name pos:line="455" pos:column="17">long</name></type> <name pos:line="455" pos:column="22">start</name> <init pos:line="455" pos:column="28">= <expr><call><name pos:line="455" pos:column="30">long</name><argument_list pos:line="455" pos:column="34">(<argument><expr><call><name pos:line="455" pos:column="35">execute</name><argument_list pos:line="455" pos:column="42">(<argument><expr><name pos:line="455" pos:column="43">SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="456" pos:column="17">long</name></type> <name pos:line="456" pos:column="22">end</name> <init pos:line="456" pos:column="26">= <expr><call><name pos:line="456" pos:column="28">long</name><argument_list pos:line="456" pos:column="32">(<argument><expr><call><name pos:line="456" pos:column="33">execute</name><argument_list pos:line="456" pos:column="40">(<argument><expr><name pos:line="456" pos:column="41">SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="457" pos:column="17">selByte</name> <op:operator pos:line="457" pos:column="25">=</op:operator> <op:operator pos:line="457" pos:column="27">(</op:operator><name pos:line="457" pos:column="28">start</name> <op:operator pos:line="457" pos:column="34">&lt;</op:operator> <name pos:line="457" pos:column="36">end</name><op:operator pos:line="457" pos:column="39">)</op:operator><op:operator pos:line="457" pos:column="40">?</op:operator><name pos:line="457" pos:column="41">end</name><op:operator pos:line="457" pos:column="44">-</op:operator><name pos:line="457" pos:column="45">start</name><op:operator pos:line="457" pos:column="50">:</op:operator><name pos:line="457" pos:column="51">start</name><op:operator pos:line="457" pos:column="56">-</op:operator><name pos:line="457" pos:column="57">end</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name pos:line="459" pos:column="17">start</name> <op:operator pos:line="459" pos:column="23">=</op:operator> <call><name pos:line="459" pos:column="25">long</name><argument_list pos:line="459" pos:column="29">(<argument><expr><call><name pos:line="459" pos:column="30">execute</name><argument_list pos:line="459" pos:column="37">(<argument><expr><name pos:line="459" pos:column="38">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="459" pos:column="60">start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="460" pos:column="17">end</name> <op:operator pos:line="460" pos:column="21">=</op:operator> <call><name pos:line="460" pos:column="23">long</name><argument_list pos:line="460" pos:column="27">(<argument><expr><call><name pos:line="460" pos:column="28">execute</name><argument_list pos:line="460" pos:column="35">(<argument><expr><name pos:line="460" pos:column="36">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="460" pos:column="58">end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="461" pos:column="17">selLine</name> <op:operator pos:line="461" pos:column="25">=</op:operator> <op:operator pos:line="461" pos:column="27">(</op:operator><name pos:line="461" pos:column="28">start</name> <op:operator pos:line="461" pos:column="34">&lt;</op:operator> <name pos:line="461" pos:column="36">end</name><op:operator pos:line="461" pos:column="39">)</op:operator><op:operator pos:line="461" pos:column="40">?</op:operator><name pos:line="461" pos:column="41">end</name><op:operator pos:line="461" pos:column="44">-</op:operator><name pos:line="461" pos:column="45">start</name><op:operator pos:line="461" pos:column="50">:</op:operator><name pos:line="461" pos:column="51">start</name><op:operator pos:line="461" pos:column="56">-</op:operator><name pos:line="461" pos:column="57">end</name></expr>;</expr_stmt>
		<if pos:line="462" pos:column="17">if <condition pos:line="462" pos:column="20">(<expr><name pos:line="462" pos:column="21">selLine</name></expr>)</condition><then pos:line="462" pos:column="29"> 
			<expr_stmt><expr><op:operator pos:line="463" pos:column="25">++</op:operator><name pos:line="463" pos:column="27">selLine</name></expr>;</expr_stmt></then></if>
		
		<return pos:line="465" pos:column="17">return <expr><lit:literal type="boolean" pos:line="465" pos:column="24">true</lit:literal></expr>;</return>
    }</block></function><empty_stmt pos:line="466" pos:column="6">;</empty_stmt>

	<function><type><name pos:line="468" pos:column="9">long</name></type> <name pos:line="468" pos:column="14">getLineLength</name><parameter_list pos:line="468" pos:column="27">(<param><decl><type><name pos:line="468" pos:column="28">int</name></type> <name pos:line="468" pos:column="32">line</name></decl></param>)</parameter_list> <specifier pos:line="468" pos:column="38">const</specifier> <block pos:line="468" pos:column="44">{
		<return pos:line="469" pos:column="17">return <expr><call><name pos:line="469" pos:column="24">long</name><argument_list pos:line="469" pos:column="28">(<argument><expr><call><name pos:line="469" pos:column="29">execute</name><argument_list pos:line="469" pos:column="36">(<argument><expr><name pos:line="469" pos:column="37">SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="61">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="469" pos:column="67">-</op:operator> <call><name pos:line="469" pos:column="69">execute</name><argument_list pos:line="469" pos:column="76">(<argument><expr><name pos:line="469" pos:column="77">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="99">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="470" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="472" pos:column="9">long</name></type> <name pos:line="472" pos:column="14">getLineIndent</name><parameter_list pos:line="472" pos:column="27">(<param><decl><type><name pos:line="472" pos:column="28">int</name></type> <name pos:line="472" pos:column="32">line</name></decl></param>)</parameter_list> <specifier pos:line="472" pos:column="38">const</specifier> <block pos:line="472" pos:column="44">{
		<return pos:line="473" pos:column="17">return <expr><call><name pos:line="473" pos:column="24">long</name><argument_list pos:line="473" pos:column="28">(<argument><expr><call><name pos:line="473" pos:column="29">execute</name><argument_list pos:line="473" pos:column="36">(<argument><expr><name pos:line="473" pos:column="37">SCI_GETLINEINDENTATION</name></expr></argument>, <argument><expr><name pos:line="473" pos:column="61">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function><empty_stmt pos:line="474" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="476" pos:column="9">void</name></type> <name pos:line="476" pos:column="14">setLineIndent</name><parameter_list pos:line="476" pos:column="27">(<param><decl><type><name pos:line="476" pos:column="28">int</name></type> <name pos:line="476" pos:column="32">line</name></decl></param>, <param><decl><type><name pos:line="476" pos:column="38">int</name></type> <name pos:line="476" pos:column="42">indent</name></decl></param>)</parameter_list> <specifier pos:line="476" pos:column="50">const</specifier>;</function_decl>

	<function><type><name pos:line="478" pos:column="9">void</name></type> <name pos:line="478" pos:column="14">showLineNumbersMargin</name><parameter_list pos:line="478" pos:column="35">(<param><decl><type><name pos:line="478" pos:column="36">bool</name></type> <name pos:line="478" pos:column="41">show</name></decl></param>)</parameter_list><block pos:line="478" pos:column="46">{
		<if pos:line="479" pos:column="17">if <condition pos:line="479" pos:column="20">(<expr><name pos:line="479" pos:column="21">show</name> <op:operator pos:line="479" pos:column="26">==</op:operator> <name pos:line="479" pos:column="29">_lineNumbersShown</name></expr>)</condition><then pos:line="479" pos:column="47"> <return pos:line="479" pos:column="48">return;</return></then></if>
		<expr_stmt><expr><name pos:line="480" pos:column="17">_lineNumbersShown</name> <op:operator pos:line="480" pos:column="35">=</op:operator> <name pos:line="480" pos:column="37">show</name></expr>;</expr_stmt>
		<if pos:line="481" pos:column="17">if <condition pos:line="481" pos:column="20">(<expr><name pos:line="481" pos:column="21">show</name></expr>)</condition><then pos:line="481" pos:column="26">
		<block pos:line="482" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="483" pos:column="25">updateLineNumberWidth</name><argument_list pos:line="483" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="485" pos:column="17">else
		<block pos:line="486" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="487" pos:column="25">execute</name><argument_list pos:line="487" pos:column="32">(<argument><expr><name pos:line="487" pos:column="33">SCI_SETMARGINWIDTHN</name></expr></argument>, <argument><expr><name pos:line="487" pos:column="54">_SC_MARGE_LINENUMBER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="487" pos:column="76">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><type><name pos:line="491" pos:column="9">void</name></type> <name pos:line="491" pos:column="14">updateLineNumberWidth</name><parameter_list pos:line="491" pos:column="35">()</parameter_list> <block pos:line="491" pos:column="38">{
		<if pos:line="492" pos:column="17">if <condition pos:line="492" pos:column="20">(<expr><name pos:line="492" pos:column="21">_lineNumbersShown</name></expr>)</condition><then pos:line="492" pos:column="39">
		<block pos:line="493" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="494" pos:column="25">int</name></type> <name pos:line="494" pos:column="29">linesVisible</name> <init pos:line="494" pos:column="42">= <expr><op:operator pos:line="494" pos:column="44">(</op:operator><name pos:line="494" pos:column="45">int</name><op:operator pos:line="494" pos:column="48">)</op:operator> <call><name pos:line="494" pos:column="50">execute</name><argument_list pos:line="494" pos:column="57">(<argument><expr><name pos:line="494" pos:column="58">SCI_LINESONSCREEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="495" pos:column="25">if <condition pos:line="495" pos:column="28">(<expr><name pos:line="495" pos:column="29">linesVisible</name></expr>)</condition><then pos:line="495" pos:column="42">
			<block pos:line="496" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="497" pos:column="33">int</name></type> <name pos:line="497" pos:column="37">firstVisibleLineVis</name> <init pos:line="497" pos:column="57">= <expr><op:operator pos:line="497" pos:column="59">(</op:operator><name pos:line="497" pos:column="60">int</name><op:operator pos:line="497" pos:column="63">)</op:operator> <call><name pos:line="497" pos:column="65">execute</name><argument_list pos:line="497" pos:column="72">(<argument><expr><name pos:line="497" pos:column="73">SCI_GETFIRSTVISIBLELINE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="498" pos:column="33">int</name></type> <name pos:line="498" pos:column="37">lastVisibleLineVis</name> <init pos:line="498" pos:column="56">= <expr><name pos:line="498" pos:column="58">linesVisible</name> <op:operator pos:line="498" pos:column="71">+</op:operator> <name pos:line="498" pos:column="73">firstVisibleLineVis</name> <op:operator pos:line="498" pos:column="93">+</op:operator> <lit:literal type="number" pos:line="498" pos:column="95">1</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="499" pos:column="33">int</name></type> <name pos:line="499" pos:column="37">i</name> <init pos:line="499" pos:column="39">= <expr><lit:literal type="number" pos:line="499" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="500" pos:column="33">while <condition pos:line="500" pos:column="39">(<expr><name pos:line="500" pos:column="40">lastVisibleLineVis</name></expr>)</condition>
				<block pos:line="501" pos:column="33">{
					<expr_stmt><expr><name pos:line="502" pos:column="41">lastVisibleLineVis</name> <op:operator pos:line="502" pos:column="60">/=</op:operator> <lit:literal type="number" pos:line="502" pos:column="63">10</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="503" pos:column="41">i</name><op:operator pos:line="503" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<expr_stmt><expr><name pos:line="505" pos:column="33">i</name> <op:operator pos:line="505" pos:column="35">=</op:operator> <call><name pos:line="505" pos:column="37">max</name><argument_list pos:line="505" pos:column="40">(<argument><expr><name pos:line="505" pos:column="41">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="505" pos:column="44">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<block pos:line="506" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="507" pos:column="41">int</name></type> <name pos:line="507" pos:column="45">pixelWidth</name> <init pos:line="507" pos:column="56">= <expr><call><name pos:line="507" pos:column="58">int</name><argument_list pos:line="507" pos:column="61">(<argument><expr><lit:literal type="number" pos:line="507" pos:column="62">8</lit:literal> <op:operator pos:line="507" pos:column="64">+</op:operator> <name pos:line="507" pos:column="66">i</name> <op:operator pos:line="507" pos:column="68">*</op:operator> <call><name pos:line="507" pos:column="70">execute</name><argument_list pos:line="507" pos:column="77">(<argument><expr><name pos:line="507" pos:column="78">SCI_TEXTWIDTH</name></expr></argument>, <argument><expr><name pos:line="507" pos:column="93">STYLE_LINENUMBER</name></expr></argument>, <argument><expr><op:operator pos:line="507" pos:column="111">(</op:operator><name pos:line="507" pos:column="112">LPARAM</name><op:operator pos:line="507" pos:column="118">)</op:operator><lit:literal type="string" pos:line="507" pos:column="119">"8"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name pos:line="508" pos:column="41">execute</name><argument_list pos:line="508" pos:column="48">(<argument><expr><name pos:line="508" pos:column="49">SCI_SETMARGINWIDTHN</name></expr></argument>, <argument><expr><name pos:line="508" pos:column="70">_SC_MARGE_LINENUMBER</name></expr></argument>, <argument><expr><name pos:line="508" pos:column="92">pixelWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block>
			}</block></then></if>
		}</block></then></if>
	}</block></function><empty_stmt pos:line="512" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="514" pos:column="9">void</name></type> <name pos:line="514" pos:column="14">setCurrentLineHiLiting</name><parameter_list pos:line="514" pos:column="36">(<param><decl><type><name pos:line="514" pos:column="37">bool</name></type> <name pos:line="514" pos:column="42">isHiliting</name></decl></param>, <param><decl><type><name pos:line="514" pos:column="54">COLORREF</name></type> <name pos:line="514" pos:column="63">bgColor</name></decl></param>)</parameter_list> <specifier pos:line="514" pos:column="72">const</specifier> <block pos:line="514" pos:column="78">{
		<expr_stmt><expr><call><name pos:line="515" pos:column="17">execute</name><argument_list pos:line="515" pos:column="24">(<argument><expr><name pos:line="515" pos:column="25">SCI_SETCARETLINEVISIBLE</name></expr></argument>, <argument><expr><name pos:line="515" pos:column="50">isHiliting</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="516" pos:column="17">if <condition pos:line="516" pos:column="20">(<expr><op:operator pos:line="516" pos:column="21">!</op:operator><name pos:line="516" pos:column="22">isHiliting</name></expr>)</condition><then pos:line="516" pos:column="33">
			<return pos:line="517" pos:column="25">return;</return></then></if>
		<expr_stmt><expr><call><name pos:line="518" pos:column="17">execute</name><argument_list pos:line="518" pos:column="24">(<argument><expr><name pos:line="518" pos:column="25">SCI_SETCARETLINEBACK</name></expr></argument>, <argument><expr><name pos:line="518" pos:column="47">bgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="519" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="521" pos:column="9">bool</name></type> <name pos:line="521" pos:column="14">isCurrentLineHiLiting</name><parameter_list pos:line="521" pos:column="35">()</parameter_list> <specifier pos:line="521" pos:column="38">const</specifier> <block pos:line="521" pos:column="44">{
		<return pos:line="522" pos:column="17">return <expr><op:operator pos:line="522" pos:column="24">(</op:operator><call><name pos:line="522" pos:column="25">execute</name><argument_list pos:line="522" pos:column="32">(<argument><expr><name pos:line="522" pos:column="33">SCI_GETCARETLINEVISIBLE</name></expr></argument>)</argument_list></call> <op:operator pos:line="522" pos:column="58">!=</op:operator> <lit:literal type="number" pos:line="522" pos:column="61">0</lit:literal><op:operator pos:line="522" pos:column="62">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="523" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="525" pos:column="9">void</name></type> <name pos:line="525" pos:column="14">performGlobalStyles</name><parameter_list pos:line="525" pos:column="33">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="527" pos:column="9">void</name></type> <name pos:line="527" pos:column="14">expand</name><parameter_list pos:line="527" pos:column="20">(<param><decl><type><name pos:line="527" pos:column="21">int</name> <type:modifier pos:line="527" pos:column="25">&amp;</type:modifier></type><name pos:line="527" pos:column="26">line</name></decl></param>, <param><decl><type><name pos:line="527" pos:column="32">bool</name></type> <name pos:line="527" pos:column="37">doExpand</name></decl></param>, <param><decl><type><name pos:line="527" pos:column="47">bool</name></type> <name pos:line="527" pos:column="52">force</name> <init pos:line="527" pos:column="58">= <expr><lit:literal type="boolean" pos:line="527" pos:column="60">false</lit:literal></expr></init></decl></param>, <name pos:line="527" pos:column="67">int</name> <name pos:line="527" pos:column="71">visLevels</name> <op:operator pos:line="527" pos:column="81">=</op:operator> <lit:literal type="number" pos:line="527" pos:column="83">0</lit:literal>, <name pos:line="527" pos:column="86">int</name> <name pos:line="527" pos:column="90">level</name> <op:operator pos:line="527" pos:column="96">=</op:operator> <op:operator pos:line="527" pos:column="98">-</op:operator><lit:literal type="number" pos:line="527" pos:column="99">1</lit:literal>)</parameter_list>;</function_decl>
		
	<function_decl><type><name pos:line="529" pos:column="9">void</name></type> <name pos:line="529" pos:column="14">currentLineUp</name><parameter_list pos:line="529" pos:column="27">()</parameter_list> <specifier pos:line="529" pos:column="30">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="530" pos:column="9">void</name></type> <name pos:line="530" pos:column="14">currentLineDown</name><parameter_list pos:line="530" pos:column="29">()</parameter_list> <specifier pos:line="530" pos:column="32">const</specifier>;</function_decl>

	<function_decl><type><name><name pos:line="532" pos:column="9">pair</name><argument_list pos:line="532" pos:column="13">&lt;<argument><expr><name pos:line="532" pos:column="14">int</name></expr></argument>, <argument><expr><name pos:line="532" pos:column="19">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="532" pos:column="24">getSelectionLinesRange</name><parameter_list pos:line="532" pos:column="46">()</parameter_list> <specifier pos:line="532" pos:column="49">const</specifier>;</function_decl>
    <function_decl><type><name pos:line="533" pos:column="5">void</name></type> <name pos:line="533" pos:column="10">currentLinesUp</name><parameter_list pos:line="533" pos:column="24">()</parameter_list> <specifier pos:line="533" pos:column="27">const</specifier>;</function_decl>
    <function_decl><type><name pos:line="534" pos:column="5">void</name></type> <name pos:line="534" pos:column="10">currentLinesDown</name><parameter_list pos:line="534" pos:column="26">()</parameter_list> <specifier pos:line="534" pos:column="29">const</specifier>;</function_decl>

	<function_decl><type><name pos:line="536" pos:column="9">void</name></type> <name pos:line="536" pos:column="14">convertSelectedTextTo</name><parameter_list pos:line="536" pos:column="35">(<param><decl><type><name pos:line="536" pos:column="36">bool</name></type> <name pos:line="536" pos:column="41">Case</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="537" pos:column="9">void</name></type> <name pos:line="537" pos:column="14">setMultiSelections</name><parameter_list pos:line="537" pos:column="32">(<param><decl><type><specifier pos:line="537" pos:column="33">const</specifier> <name pos:line="537" pos:column="39">ColumnModeInfos</name> <type:modifier pos:line="537" pos:column="55">&amp;</type:modifier></type> <name pos:line="537" pos:column="57">cmi</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name pos:line="539" pos:column="5">void</name></type> <name pos:line="539" pos:column="10">convertSelectedTextToLowerCase</name><parameter_list pos:line="539" pos:column="40">()</parameter_list> <block pos:line="539" pos:column="43">{
		<comment type="line" pos:line="540" pos:column="17">// if system is w2k or xp</comment>
		<if pos:line="541" pos:column="17">if <condition pos:line="541" pos:column="20">(<expr><op:operator pos:line="541" pos:column="21">(</op:operator><call><name><name pos:line="541" pos:column="22">NppParameters</name><op:operator pos:line="541" pos:column="35">::</op:operator><name pos:line="541" pos:column="37">getInstance</name></name><argument_list pos:line="541" pos:column="48">()</argument_list></call><op:operator pos:line="541" pos:column="50">)</op:operator><op:operator pos:line="541" pos:column="51">-&gt;</op:operator><call><name pos:line="541" pos:column="53">isTransparentAvailable</name><argument_list pos:line="541" pos:column="75">()</argument_list></call></expr>)</condition><then pos:line="541" pos:column="78">
			<expr_stmt><expr><call><name pos:line="542" pos:column="25">convertSelectedTextTo</name><argument_list pos:line="542" pos:column="46">(<argument><expr><name pos:line="542" pos:column="47">LOWERCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="543" pos:column="17">else
			<expr_stmt><expr><call><name pos:line="544" pos:column="25">execute</name><argument_list pos:line="544" pos:column="32">(<argument><expr><name pos:line="544" pos:column="33">SCI_LOWERCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></function><empty_stmt pos:line="545" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="547" pos:column="5">void</name></type> <name pos:line="547" pos:column="10">convertSelectedTextToUpperCase</name><parameter_list pos:line="547" pos:column="40">()</parameter_list> <block pos:line="547" pos:column="43">{
		<comment type="line" pos:line="548" pos:column="17">// if system is w2k or xp</comment>
		<if pos:line="549" pos:column="17">if <condition pos:line="549" pos:column="20">(<expr><op:operator pos:line="549" pos:column="21">(</op:operator><call><name><name pos:line="549" pos:column="22">NppParameters</name><op:operator pos:line="549" pos:column="35">::</op:operator><name pos:line="549" pos:column="37">getInstance</name></name><argument_list pos:line="549" pos:column="48">()</argument_list></call><op:operator pos:line="549" pos:column="50">)</op:operator><op:operator pos:line="549" pos:column="51">-&gt;</op:operator><call><name pos:line="549" pos:column="53">isTransparentAvailable</name><argument_list pos:line="549" pos:column="75">()</argument_list></call></expr>)</condition><then pos:line="549" pos:column="78">
			<expr_stmt><expr><call><name pos:line="550" pos:column="25">convertSelectedTextTo</name><argument_list pos:line="550" pos:column="46">(<argument><expr><name pos:line="550" pos:column="47">UPPERCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="551" pos:column="17">else
			<expr_stmt><expr><call><name pos:line="552" pos:column="25">execute</name><argument_list pos:line="552" pos:column="32">(<argument><expr><name pos:line="552" pos:column="33">SCI_UPPERCASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></function><empty_stmt pos:line="553" pos:column="10">;</empty_stmt>
    
	<function_decl><type><name pos:line="555" pos:column="9">void</name></type> <name pos:line="555" pos:column="14">collapse</name><parameter_list pos:line="555" pos:column="22">(<param><decl><type><name pos:line="555" pos:column="23">int</name></type> <name pos:line="555" pos:column="27">level2Collapse</name></decl></param>, <param><decl><type><name pos:line="555" pos:column="43">bool</name></type> <name pos:line="555" pos:column="48">mode</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="556" pos:column="9">void</name></type> <name pos:line="556" pos:column="14">foldAll</name><parameter_list pos:line="556" pos:column="21">(<param><decl><type><name pos:line="556" pos:column="22">bool</name></type> <name pos:line="556" pos:column="27">mode</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="557" pos:column="9">void</name></type> <name pos:line="557" pos:column="14">fold</name><parameter_list pos:line="557" pos:column="18">(<param><decl><type><name pos:line="557" pos:column="19">int</name></type> <name pos:line="557" pos:column="23">line</name></decl></param>, <param><decl><type><name pos:line="557" pos:column="29">bool</name></type> <name pos:line="557" pos:column="34">mode</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="558" pos:column="9">bool</name></type> <name pos:line="558" pos:column="14">isFolded</name><parameter_list pos:line="558" pos:column="22">(<param><decl><type><name pos:line="558" pos:column="23">int</name></type> <name pos:line="558" pos:column="27">line</name></decl></param>)</parameter_list><block pos:line="558" pos:column="32">{
		<return pos:line="559" pos:column="17">return <expr><op:operator pos:line="559" pos:column="24">(</op:operator><call><name pos:line="559" pos:column="25">execute</name><argument_list pos:line="559" pos:column="32">(<argument><expr><name pos:line="559" pos:column="33">SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="559" pos:column="54">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="559" pos:column="60">!=</op:operator> <lit:literal type="number" pos:line="559" pos:column="63">0</lit:literal><op:operator pos:line="559" pos:column="64">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="560" pos:column="10">;</empty_stmt>
	<function_decl><type><name pos:line="561" pos:column="9">void</name></type> <name pos:line="561" pos:column="14">foldCurrentPos</name><parameter_list pos:line="561" pos:column="28">(<param><decl><type><name pos:line="561" pos:column="29">bool</name></type> <name pos:line="561" pos:column="34">mode</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="562" pos:column="9">int</name></type> <name pos:line="562" pos:column="13">getCodepage</name><parameter_list pos:line="562" pos:column="24">()</parameter_list> <specifier pos:line="562" pos:column="27">const</specifier> <block pos:line="562" pos:column="33">{<return pos:line="562" pos:column="34">return <expr><name pos:line="562" pos:column="41">_codepage</name></expr>;</return>}</block></function><empty_stmt pos:line="562" pos:column="52">;</empty_stmt>

	<function><type><name pos:line="564" pos:column="9">NppParameters</name> <type:modifier pos:line="564" pos:column="23">*</type:modifier></type> <name pos:line="564" pos:column="25">getParameter</name><parameter_list pos:line="564" pos:column="37">()</parameter_list> <block pos:line="564" pos:column="40">{
		<return pos:line="565" pos:column="17">return <expr><name pos:line="565" pos:column="24">_pParameter</name></expr>;</return>
	}</block></function><empty_stmt pos:line="566" pos:column="10">;</empty_stmt>
	
	<function_decl><type><name pos:line="568" pos:column="9">ColumnModeInfos</name></type> <name pos:line="568" pos:column="25">getColumnModeSelectInfo</name><parameter_list pos:line="568" pos:column="48">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="570" pos:column="9">void</name></type> <name pos:line="570" pos:column="14">columnReplace</name><parameter_list pos:line="570" pos:column="27">(<param><decl><type><name pos:line="570" pos:column="28">ColumnModeInfos</name> <type:modifier pos:line="570" pos:column="44">&amp;</type:modifier></type> <name pos:line="570" pos:column="46">cmi</name></decl></param>, <param><decl><type><specifier pos:line="570" pos:column="51">const</specifier> <name pos:line="570" pos:column="57">TCHAR</name> <type:modifier pos:line="570" pos:column="63">*</type:modifier></type><name pos:line="570" pos:column="64">str</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="571" pos:column="9">void</name></type> <name pos:line="571" pos:column="14">columnReplace</name><parameter_list pos:line="571" pos:column="27">(<param><decl><type><name pos:line="571" pos:column="28">ColumnModeInfos</name> <type:modifier pos:line="571" pos:column="44">&amp;</type:modifier></type> <name pos:line="571" pos:column="46">cmi</name></decl></param>, <param><decl><type><name pos:line="571" pos:column="51">int</name></type> <name pos:line="571" pos:column="55">initial</name></decl></param>, <param><decl><type><name pos:line="571" pos:column="64">int</name></type> <name pos:line="571" pos:column="68">incr</name></decl></param>, <param><decl><type><name pos:line="571" pos:column="74">UCHAR</name></type> <name pos:line="571" pos:column="80">format</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="573" pos:column="9">void</name></type> <name pos:line="573" pos:column="14">foldChanged</name><parameter_list pos:line="573" pos:column="25">(<param><decl><type><name pos:line="573" pos:column="26">int</name></type> <name pos:line="573" pos:column="30">line</name></decl></param>, <param><decl><type><name pos:line="573" pos:column="36">int</name></type> <name pos:line="573" pos:column="40">levelNow</name></decl></param>, <param><decl><type><name pos:line="573" pos:column="50">int</name></type> <name pos:line="573" pos:column="54">levelPrev</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="574" pos:column="9">void</name></type> <name pos:line="574" pos:column="14">clearIndicator</name><parameter_list pos:line="574" pos:column="28">(<param><decl><type><name pos:line="574" pos:column="29">int</name></type> <name pos:line="574" pos:column="33">indicatorNumber</name></decl></param>)</parameter_list> <block pos:line="574" pos:column="50">{
		<decl_stmt><decl><type><name pos:line="575" pos:column="17">int</name></type> <name pos:line="575" pos:column="21">docStart</name> <init pos:line="575" pos:column="30">= <expr><lit:literal type="number" pos:line="575" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="576" pos:column="17">int</name></type> <name pos:line="576" pos:column="21">docEnd</name> <init pos:line="576" pos:column="28">= <expr><call><name pos:line="576" pos:column="30">getCurrentDocLen</name><argument_list pos:line="576" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="577" pos:column="17">execute</name><argument_list pos:line="577" pos:column="24">(<argument><expr><name pos:line="577" pos:column="25">SCI_SETINDICATORCURRENT</name></expr></argument>, <argument><expr><name pos:line="577" pos:column="50">indicatorNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="578" pos:column="17">execute</name><argument_list pos:line="578" pos:column="24">(<argument><expr><name pos:line="578" pos:column="25">SCI_INDICATORCLEARRANGE</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="50">docStart</name></expr></argument>, <argument><expr><name pos:line="578" pos:column="60">docEnd</name><op:operator pos:line="578" pos:column="66">-</op:operator><name pos:line="578" pos:column="67">docStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="579" pos:column="10">;</empty_stmt>

	<decl_stmt><decl><type><specifier pos:line="581" pos:column="9">static</specifier> <name pos:line="581" pos:column="16">LanguageName</name></type> <name><name pos:line="581" pos:column="29">ScintillaEditView</name><op:operator pos:line="581" pos:column="46">::</op:operator><name pos:line="581" pos:column="48">langNames</name><index pos:line="581" pos:column="57">[<expr><name pos:line="581" pos:column="58">L_EXTERNAL</name><op:operator pos:line="581" pos:column="68">+</op:operator><lit:literal type="number" pos:line="581" pos:column="69">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="583" pos:column="9">void</name></type> <name pos:line="583" pos:column="14">bufferUpdated</name><parameter_list pos:line="583" pos:column="27">(<param><decl><type><name pos:line="583" pos:column="28">Buffer</name> <type:modifier pos:line="583" pos:column="35">*</type:modifier></type> <name pos:line="583" pos:column="37">buffer</name></decl></param>, <param><decl><type><name pos:line="583" pos:column="45">int</name></type> <name pos:line="583" pos:column="49">mask</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="584" pos:column="9">BufferID</name></type> <name pos:line="584" pos:column="18">getCurrentBufferID</name><parameter_list pos:line="584" pos:column="36">()</parameter_list> <block pos:line="584" pos:column="39">{ <return pos:line="584" pos:column="41">return <expr><name pos:line="584" pos:column="48">_currentBufferID</name></expr>;</return> }</block></function><empty_stmt pos:line="584" pos:column="67">;</empty_stmt>
	<function><type><name pos:line="585" pos:column="9">Buffer</name> <type:modifier pos:line="585" pos:column="16">*</type:modifier></type> <name pos:line="585" pos:column="18">getCurrentBuffer</name><parameter_list pos:line="585" pos:column="34">()</parameter_list> <block pos:line="585" pos:column="37">{ <return pos:line="585" pos:column="39">return <expr><name pos:line="585" pos:column="46">_currentBuffer</name></expr>;</return> }</block></function><empty_stmt pos:line="585" pos:column="63">;</empty_stmt>
	<function><type><name pos:line="586" pos:column="9">void</name></type> <name pos:line="586" pos:column="14">setCurrentBuffer</name><parameter_list pos:line="586" pos:column="30">(<param><decl><type><name pos:line="586" pos:column="31">Buffer</name> <type:modifier pos:line="586" pos:column="38">*</type:modifier></type><name pos:line="586" pos:column="39">buf2set</name></decl></param>)</parameter_list> <block pos:line="586" pos:column="48">{ <expr_stmt><expr><name pos:line="586" pos:column="50">_currentBuffer</name> <op:operator pos:line="586" pos:column="65">=</op:operator> <name pos:line="586" pos:column="67">buf2set</name></expr>;</expr_stmt> }</block></function><empty_stmt pos:line="586" pos:column="77">;</empty_stmt>
	<function_decl><type><name pos:line="587" pos:column="9">void</name></type> <name pos:line="587" pos:column="14">styleChange</name><parameter_list pos:line="587" pos:column="25">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="589" pos:column="9">void</name></type> <name pos:line="589" pos:column="14">hideLines</name><parameter_list pos:line="589" pos:column="23">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="591" pos:column="9">bool</name></type> <name pos:line="591" pos:column="14">markerMarginClick</name><parameter_list pos:line="591" pos:column="31">(<param><decl><type><name pos:line="591" pos:column="32">int</name></type> <name pos:line="591" pos:column="36">lineNumber</name></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="591" pos:column="49">//true if it did something</comment>
	<function_decl><type><name pos:line="592" pos:column="9">void</name></type> <name pos:line="592" pos:column="14">notifyMarkers</name><parameter_list pos:line="592" pos:column="27">(<param><decl><type><name pos:line="592" pos:column="28">Buffer</name> <type:modifier pos:line="592" pos:column="35">*</type:modifier></type> <name pos:line="592" pos:column="37">buf</name></decl></param>, <param><decl><type><name pos:line="592" pos:column="42">bool</name></type> <name pos:line="592" pos:column="47">isHide</name></decl></param>, <param><decl><type><name pos:line="592" pos:column="55">int</name></type> <name pos:line="592" pos:column="59">location</name></decl></param>, <param><decl><type><name pos:line="592" pos:column="69">bool</name></type> <name pos:line="592" pos:column="74">del</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="593" pos:column="9">void</name></type> <name pos:line="593" pos:column="14">runMarkers</name><parameter_list pos:line="593" pos:column="24">(<param><decl><type><name pos:line="593" pos:column="25">bool</name></type> <name pos:line="593" pos:column="30">doHide</name></decl></param>, <param><decl><type><name pos:line="593" pos:column="38">int</name></type> <name pos:line="593" pos:column="42">searchStart</name></decl></param>, <param><decl><type><name pos:line="593" pos:column="55">bool</name></type> <name pos:line="593" pos:column="60">endOfDoc</name></decl></param>, <param><decl><type><name pos:line="593" pos:column="70">bool</name></type> <name pos:line="593" pos:column="75">doDelete</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="595" pos:column="9">bool</name></type> <name pos:line="595" pos:column="14">isSelecting</name><parameter_list pos:line="595" pos:column="25">()</parameter_list> <specifier pos:line="595" pos:column="28">const</specifier> <block pos:line="595" pos:column="34">{
		<decl_stmt><decl><type><specifier pos:line="596" pos:column="17">static</specifier> <name pos:line="596" pos:column="24">CharacterRange</name></type> <name pos:line="596" pos:column="39">previousSelRange</name> <init pos:line="596" pos:column="56">= <expr><call><name pos:line="596" pos:column="58">getSelection</name><argument_list pos:line="596" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="597" pos:column="17">CharacterRange</name></type> <name pos:line="597" pos:column="32">currentSelRange</name> <init pos:line="597" pos:column="48">= <expr><call><name pos:line="597" pos:column="50">getSelection</name><argument_list pos:line="597" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if pos:line="599" pos:column="17">if <condition pos:line="599" pos:column="20">(<expr><name><name pos:line="599" pos:column="21">currentSelRange</name><op:operator pos:line="599" pos:column="36">.</op:operator><name pos:line="599" pos:column="37">cpMin</name></name> <op:operator pos:line="599" pos:column="43">==</op:operator> <name><name pos:line="599" pos:column="46">currentSelRange</name><op:operator pos:line="599" pos:column="61">.</op:operator><name pos:line="599" pos:column="62">cpMax</name></name></expr>)</condition><then pos:line="599" pos:column="68">
		<block pos:line="600" pos:column="17">{
			<expr_stmt><expr><name pos:line="601" pos:column="25">previousSelRange</name> <op:operator pos:line="601" pos:column="42">=</op:operator> <name pos:line="601" pos:column="44">currentSelRange</name></expr>;</expr_stmt>
			<return pos:line="602" pos:column="25">return <expr><lit:literal type="boolean" pos:line="602" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<if pos:line="605" pos:column="17">if <condition pos:line="605" pos:column="20">(<expr><op:operator pos:line="605" pos:column="21">(</op:operator><name><name pos:line="605" pos:column="22">previousSelRange</name><op:operator pos:line="605" pos:column="38">.</op:operator><name pos:line="605" pos:column="39">cpMin</name></name> <op:operator pos:line="605" pos:column="45">==</op:operator> <name><name pos:line="605" pos:column="48">currentSelRange</name><op:operator pos:line="605" pos:column="63">.</op:operator><name pos:line="605" pos:column="64">cpMin</name></name><op:operator pos:line="605" pos:column="69">)</op:operator> <op:operator pos:line="605" pos:column="71">||</op:operator> <op:operator pos:line="605" pos:column="74">(</op:operator><name><name pos:line="605" pos:column="75">previousSelRange</name><op:operator pos:line="605" pos:column="91">.</op:operator><name pos:line="605" pos:column="92">cpMax</name></name> <op:operator pos:line="605" pos:column="98">==</op:operator> <name><name pos:line="605" pos:column="101">currentSelRange</name><op:operator pos:line="605" pos:column="116">.</op:operator><name pos:line="605" pos:column="117">cpMax</name></name><op:operator pos:line="605" pos:column="122">)</op:operator></expr>)</condition><then pos:line="605" pos:column="124">
		<block pos:line="606" pos:column="17">{
			<expr_stmt><expr><name pos:line="607" pos:column="25">previousSelRange</name> <op:operator pos:line="607" pos:column="42">=</op:operator> <name pos:line="607" pos:column="44">currentSelRange</name></expr>;</expr_stmt>
			<return pos:line="608" pos:column="25">return <expr><lit:literal type="boolean" pos:line="608" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
		
		<expr_stmt><expr><name pos:line="611" pos:column="17">previousSelRange</name> <op:operator pos:line="611" pos:column="34">=</op:operator> <name pos:line="611" pos:column="36">currentSelRange</name></expr>;</expr_stmt>
		<return pos:line="612" pos:column="17">return <expr><lit:literal type="boolean" pos:line="612" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function><empty_stmt pos:line="613" pos:column="10">;</empty_stmt>
	<function_decl><type><name pos:line="614" pos:column="9">void</name></type> <name pos:line="614" pos:column="14">setHiLiteResultWords</name><parameter_list pos:line="614" pos:column="34">(<param><decl><type><specifier pos:line="614" pos:column="35">const</specifier> <name pos:line="614" pos:column="41">TCHAR</name> <type:modifier pos:line="614" pos:column="47">*</type:modifier></type><name pos:line="614" pos:column="48">keywords</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="615" pos:column="9">void</name></type> <name pos:line="615" pos:column="14">defineDocType</name><parameter_list pos:line="615" pos:column="27">(<param><decl><type><name pos:line="615" pos:column="28">LangType</name></type> <name pos:line="615" pos:column="37">typeDoc</name></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="615" pos:column="49">//setup stylers for active document</comment>
	<function><type><name pos:line="616" pos:column="9">void</name></type> <name pos:line="616" pos:column="14">mouseWheel</name><parameter_list pos:line="616" pos:column="24">(<param><decl><type><name pos:line="616" pos:column="25">WPARAM</name></type> <name pos:line="616" pos:column="32">wParam</name></decl></param>, <param><decl><type><name pos:line="616" pos:column="40">LPARAM</name></type> <name pos:line="616" pos:column="47">lParam</name></decl></param>)</parameter_list> <block pos:line="616" pos:column="55">{
		<expr_stmt><expr><call><name pos:line="617" pos:column="17">scintillaNew_Proc</name><argument_list pos:line="617" pos:column="34">(<argument><expr><name pos:line="617" pos:column="35">_hSelf</name></expr></argument>, <argument><expr><name pos:line="617" pos:column="43">WM_MOUSEWHEEL</name></expr></argument>, <argument><expr><name pos:line="617" pos:column="58">wParam</name></expr></argument>, <argument><expr><name pos:line="617" pos:column="66">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="618" pos:column="10">;</empty_stmt>
	
	<function_decl><type><name pos:line="620" pos:column="9">void</name></type> <name pos:line="620" pos:column="14">setHotspotStyle</name><parameter_list pos:line="620" pos:column="29">(<param><decl><type><name pos:line="620" pos:column="30">Style</name><type:modifier pos:line="620" pos:column="35">&amp;</type:modifier></type> <name pos:line="620" pos:column="37">styleToSet</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="621" pos:column="5">void</name></type> <name pos:line="621" pos:column="10">setTabSettings</name><parameter_list pos:line="621" pos:column="24">(<param><decl><type><name pos:line="621" pos:column="25">Lang</name> <type:modifier pos:line="621" pos:column="30">*</type:modifier></type><name pos:line="621" pos:column="31">lang</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="622" pos:column="9">bool</name></type> <name pos:line="622" pos:column="14">isWrapRestoreNeeded</name><parameter_list pos:line="622" pos:column="33">()</parameter_list> <specifier pos:line="622" pos:column="36">const</specifier> <block pos:line="622" pos:column="42">{<return pos:line="622" pos:column="43">return <expr><name pos:line="622" pos:column="50">_wrapRestoreNeeded</name></expr>;</return>}</block></function><empty_stmt pos:line="622" pos:column="70">;</empty_stmt>
	<function><type><name pos:line="623" pos:column="9">void</name></type> <name pos:line="623" pos:column="14">setWrapRestoreNeeded</name><parameter_list pos:line="623" pos:column="34">(<param><decl><type><name pos:line="623" pos:column="35">bool</name></type> <name pos:line="623" pos:column="40">isWrapRestoredNeeded</name></decl></param>)</parameter_list> <block pos:line="623" pos:column="62">{<expr_stmt><expr><name pos:line="623" pos:column="63">_wrapRestoreNeeded</name> <op:operator pos:line="623" pos:column="82">=</op:operator> <name pos:line="623" pos:column="84">isWrapRestoredNeeded</name></expr>;</expr_stmt>}</block></function><empty_stmt pos:line="623" pos:column="106">;</empty_stmt>

	<function><type><name pos:line="625" pos:column="9">bool</name></type> <name pos:line="625" pos:column="14">isCJK</name><parameter_list pos:line="625" pos:column="19">()</parameter_list> <specifier pos:line="625" pos:column="22">const</specifier> <block pos:line="625" pos:column="28">{
		<return pos:line="626" pos:column="17">return <expr><op:operator pos:line="626" pos:column="24">(</op:operator><op:operator pos:line="626" pos:column="25">(</op:operator><name pos:line="626" pos:column="26">_codepage</name> <op:operator pos:line="626" pos:column="36">==</op:operator> <name pos:line="626" pos:column="39">CP_CHINESE_TRADITIONAL</name><op:operator pos:line="626" pos:column="61">)</op:operator> <op:operator pos:line="626" pos:column="63">||</op:operator> <op:operator pos:line="626" pos:column="66">(</op:operator><name pos:line="626" pos:column="67">_codepage</name> <op:operator pos:line="626" pos:column="77">==</op:operator> <name pos:line="626" pos:column="80">CP_CHINESE_SIMPLIFIED</name><op:operator pos:line="626" pos:column="101">)</op:operator> <op:operator pos:line="626" pos:column="103">||</op:operator> 
			    <op:operator pos:line="627" pos:column="29">(</op:operator><name pos:line="627" pos:column="30">_codepage</name> <op:operator pos:line="627" pos:column="40">==</op:operator> <name pos:line="627" pos:column="43">CP_JAPANESE</name><op:operator pos:line="627" pos:column="54">)</op:operator> <op:operator pos:line="627" pos:column="56">||</op:operator> <op:operator pos:line="627" pos:column="59">(</op:operator><name pos:line="627" pos:column="60">_codepage</name> <op:operator pos:line="627" pos:column="70">==</op:operator> <name pos:line="627" pos:column="73">CP_KOREAN</name><op:operator pos:line="627" pos:column="82">)</op:operator><op:operator pos:line="627" pos:column="83">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="628" pos:column="10">;</empty_stmt>

</public><protected pos:line="630" pos:column="1">protected:
	<decl_stmt><decl><type><specifier pos:line="631" pos:column="9">static</specifier> <name pos:line="631" pos:column="16">HINSTANCE</name></type> <name pos:line="631" pos:column="26">_hLib</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="632" pos:column="9">static</specifier> <name pos:line="632" pos:column="16">int</name></type> <name pos:line="632" pos:column="20">_refCount</name></decl>;</decl_stmt>
	
    <decl_stmt><decl><type><specifier pos:line="634" pos:column="5">static</specifier> <name pos:line="634" pos:column="12">UserDefineDialog</name></type> <name pos:line="634" pos:column="29">_userDefineDlg</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="636" pos:column="5">static</specifier> <specifier pos:line="636" pos:column="12">const</specifier> <name pos:line="636" pos:column="18">int</name></type> <name><name pos:line="636" pos:column="22">_markersArray</name><index pos:line="636" pos:column="35">[]</index><index pos:line="636" pos:column="37">[<expr><name pos:line="636" pos:column="38">NB_FOLDER_STATE</name></expr>]</index></name></decl>;</decl_stmt>

	<function><type><specifier pos:line="638" pos:column="9">static</specifier> <name pos:line="638" pos:column="16">LRESULT</name> <name pos:line="638" pos:column="24">CALLBACK</name></type> <name pos:line="638" pos:column="33">scintillaStatic_Proc</name><parameter_list pos:line="638" pos:column="53">(<param><decl><type><name pos:line="638" pos:column="54">HWND</name></type> <name pos:line="638" pos:column="59">hwnd</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="65">UINT</name></type> <name pos:line="638" pos:column="70">Message</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="79">WPARAM</name></type> <name pos:line="638" pos:column="86">wParam</name></decl></param>, <param><decl><type><name pos:line="638" pos:column="94">LPARAM</name></type> <name pos:line="638" pos:column="101">lParam</name></decl></param>)</parameter_list> <block pos:line="638" pos:column="109">{
		<decl_stmt><decl><type><name pos:line="639" pos:column="17">ScintillaEditView</name> <type:modifier pos:line="639" pos:column="35">*</type:modifier></type><name pos:line="639" pos:column="36">pScint</name> <init pos:line="639" pos:column="43">= <expr><op:operator pos:line="639" pos:column="45">(</op:operator><name pos:line="639" pos:column="46">ScintillaEditView</name> <op:operator pos:line="639" pos:column="64">*</op:operator><op:operator pos:line="639" pos:column="65">)</op:operator><op:operator pos:line="639" pos:column="66">(</op:operator><call><name><op:operator pos:line="639" pos:column="67">::</op:operator><name pos:line="639" pos:column="69">GetWindowLongPtr</name></name><argument_list pos:line="639" pos:column="85">(<argument><expr><name pos:line="639" pos:column="86">hwnd</name></expr></argument>, <argument><expr><name pos:line="639" pos:column="92">GWL_USERDATA</name></expr></argument>)</argument_list></call><op:operator pos:line="639" pos:column="105">)</op:operator></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="640" pos:column="17">//</comment>
		<if pos:line="641" pos:column="17">if <condition pos:line="641" pos:column="20">(<expr><name pos:line="641" pos:column="21">Message</name> <op:operator pos:line="641" pos:column="29">==</op:operator> <name pos:line="641" pos:column="32">WM_MOUSEWHEEL</name> <op:operator pos:line="641" pos:column="46">||</op:operator> <name pos:line="641" pos:column="49">Message</name> <op:operator pos:line="641" pos:column="57">==</op:operator> <name pos:line="641" pos:column="60">WM_MOUSEHWHEEL</name></expr>)</condition><then pos:line="641" pos:column="75">
		<block pos:line="642" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="643" pos:column="25">POINT</name></type> <name pos:line="643" pos:column="31">pt</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="644" pos:column="25">POINTS</name></type> <name pos:line="644" pos:column="32">pts</name> <init pos:line="644" pos:column="36">= <expr><call><name pos:line="644" pos:column="38">MAKEPOINTS</name><argument_list pos:line="644" pos:column="48">(<argument><expr><name pos:line="644" pos:column="49">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="645" pos:column="25">POINTSTOPOINT</name><argument_list pos:line="645" pos:column="38">(<argument><expr><name pos:line="645" pos:column="39">pt</name></expr></argument>, <argument><expr><name pos:line="645" pos:column="43">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="646" pos:column="25">HWND</name></type> <name pos:line="646" pos:column="30">hwndOnMouse</name> <init pos:line="646" pos:column="42">= <expr><call><name pos:line="646" pos:column="44">WindowFromPoint</name><argument_list pos:line="646" pos:column="59">(<argument><expr><name pos:line="646" pos:column="60">pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="647" pos:column="25">ScintillaEditView</name> <type:modifier pos:line="647" pos:column="43">*</type:modifier></type><name pos:line="647" pos:column="44">pScintillaOnMouse</name> <init pos:line="647" pos:column="62">= <expr><op:operator pos:line="647" pos:column="64">(</op:operator><name pos:line="647" pos:column="65">ScintillaEditView</name> <op:operator pos:line="647" pos:column="83">*</op:operator><op:operator pos:line="647" pos:column="84">)</op:operator><op:operator pos:line="647" pos:column="85">(</op:operator><call><name><op:operator pos:line="647" pos:column="86">::</op:operator><name pos:line="647" pos:column="88">GetWindowLongPtr</name></name><argument_list pos:line="647" pos:column="104">(<argument><expr><name pos:line="647" pos:column="105">hwndOnMouse</name></expr></argument>, <argument><expr><name pos:line="647" pos:column="118">GWL_USERDATA</name></expr></argument>)</argument_list></call><op:operator pos:line="647" pos:column="131">)</op:operator></expr></init></decl>;</decl_stmt>
			<if pos:line="648" pos:column="25">if <condition pos:line="648" pos:column="28">(<expr><name pos:line="648" pos:column="29">pScintillaOnMouse</name> <op:operator pos:line="648" pos:column="47">!=</op:operator> <name pos:line="648" pos:column="50">pScint</name></expr>)</condition><then pos:line="648" pos:column="57">
				<return pos:line="649" pos:column="33">return <expr><call><name><op:operator pos:line="649" pos:column="40">::</op:operator><name pos:line="649" pos:column="42">SendMessage</name></name><argument_list pos:line="649" pos:column="53">(<argument><expr><name pos:line="649" pos:column="54">hwndOnMouse</name></expr></argument>, <argument><expr><name pos:line="649" pos:column="67">Message</name></expr></argument>, <argument><expr><name pos:line="649" pos:column="76">wParam</name></expr></argument>, <argument><expr><name pos:line="649" pos:column="84">lParam</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
		}</block></then></if>
		<if pos:line="651" pos:column="17">if <condition pos:line="651" pos:column="20">(<expr><name pos:line="651" pos:column="21">pScint</name></expr>)</condition><then pos:line="651" pos:column="28">
			<return pos:line="652" pos:column="25">return <expr><op:operator pos:line="652" pos:column="32">(</op:operator><call><name><name pos:line="652" pos:column="33">pScint</name><op:operator pos:line="652" pos:column="39">-&gt;</op:operator><name pos:line="652" pos:column="41">scintillaNew_Proc</name></name><argument_list pos:line="652" pos:column="58">(<argument><expr><name pos:line="652" pos:column="59">hwnd</name></expr></argument>, <argument><expr><name pos:line="652" pos:column="65">Message</name></expr></argument>, <argument><expr><name pos:line="652" pos:column="74">wParam</name></expr></argument>, <argument><expr><name pos:line="652" pos:column="82">lParam</name></expr></argument>)</argument_list></call><op:operator pos:line="652" pos:column="89">)</op:operator></expr>;</return></then>
		<else pos:line="653" pos:column="17">else
			<return pos:line="654" pos:column="25">return <expr><call><name><op:operator pos:line="654" pos:column="32">::</op:operator><name pos:line="654" pos:column="34">DefWindowProc</name></name><argument_list pos:line="654" pos:column="47">(<argument><expr><name pos:line="654" pos:column="48">hwnd</name></expr></argument>, <argument><expr><name pos:line="654" pos:column="54">Message</name></expr></argument>, <argument><expr><name pos:line="654" pos:column="63">wParam</name></expr></argument>, <argument><expr><name pos:line="654" pos:column="71">lParam</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
		<comment type="line" pos:line="655" pos:column="17">//</comment>
	}</block></function><empty_stmt pos:line="656" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="658" pos:column="9">LRESULT</name></type> <name pos:line="658" pos:column="17">scintillaNew_Proc</name><parameter_list pos:line="658" pos:column="34">(<param><decl><type><name pos:line="658" pos:column="35">HWND</name></type> <name pos:line="658" pos:column="40">hwnd</name></decl></param>, <param><decl><type><name pos:line="658" pos:column="46">UINT</name></type> <name pos:line="658" pos:column="51">Message</name></decl></param>, <param><decl><type><name pos:line="658" pos:column="60">WPARAM</name></type> <name pos:line="658" pos:column="67">wParam</name></decl></param>, <param><decl><type><name pos:line="658" pos:column="75">LPARAM</name></type> <name pos:line="658" pos:column="82">lParam</name></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="660" pos:column="9">SCINTILLA_FUNC</name></type> <name pos:line="660" pos:column="24">_pScintillaFunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="661" pos:column="9">SCINTILLA_PTR</name></type>  <name pos:line="661" pos:column="24">_pScintillaPtr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="662" pos:column="9">static</specifier> <name pos:line="662" pos:column="16">WNDPROC</name></type> <name pos:line="662" pos:column="24">_scintillaDefaultProc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="663" pos:column="9">CallWindowProcFunc</name></type> <name pos:line="663" pos:column="28">_callWindowProc</name></decl>;</decl_stmt>
	<function_decl><type><name pos:line="664" pos:column="9">BufferID</name></type> <name pos:line="664" pos:column="18">attachDefaultDoc</name><parameter_list pos:line="664" pos:column="34">()</parameter_list>;</function_decl>

	<comment type="line" pos:line="666" pos:column="9">//Store the current buffer so it can be retrieved later</comment>
	<decl_stmt><decl><type><name pos:line="667" pos:column="9">BufferID</name></type> <name pos:line="667" pos:column="18">_currentBufferID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="668" pos:column="9">Buffer</name> <type:modifier pos:line="668" pos:column="16">*</type:modifier></type> <name pos:line="668" pos:column="18">_currentBuffer</name></decl>;</decl_stmt>
	
    <decl_stmt><decl><type><name pos:line="670" pos:column="5">NppParameters</name> <type:modifier pos:line="670" pos:column="19">*</type:modifier></type><name pos:line="670" pos:column="20">_pParameter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="671" pos:column="9">int</name></type> <name pos:line="671" pos:column="13">_codepage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="672" pos:column="9">bool</name></type> <name pos:line="672" pos:column="14">_lineNumbersShown</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="673" pos:column="9">bool</name></type> <name pos:line="673" pos:column="14">_wrapRestoreNeeded</name></decl>;</decl_stmt>

	<typedef pos:line="675" pos:column="9">typedef <type><name><name pos:line="675" pos:column="17">std</name><op:operator pos:line="675" pos:column="20">::</op:operator><name><name pos:line="675" pos:column="22">map</name><argument_list pos:line="675" pos:column="25">&lt;<argument><expr><name pos:line="675" pos:column="26">int</name></expr></argument>, <argument><expr><name pos:line="675" pos:column="31">Style</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="675" pos:column="38">StyleMap</name>;</typedef>
	<typedef pos:line="676" pos:column="9">typedef <type><name><name pos:line="676" pos:column="17">std</name><op:operator pos:line="676" pos:column="20">::</op:operator><name><name pos:line="676" pos:column="22">map</name><argument_list pos:line="676" pos:column="25">&lt;<argument><expr><name pos:line="676" pos:column="26">BufferID</name></expr></argument>, <argument><expr><name pos:line="676" pos:column="36">StyleMap</name><type:modifier pos:line="676" pos:column="44">*</type:modifier></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="676" pos:column="47">BufferStyleMap</name>;</typedef>
	<decl_stmt><decl><type><name pos:line="677" pos:column="9">BufferStyleMap</name></type> <name pos:line="677" pos:column="24">_hotspotStyles</name></decl>;</decl_stmt> 

<comment type="line" pos:line="679" pos:column="1">//Lexers and Styling</comment>
	<function_decl><type><name pos:line="680" pos:column="9">void</name></type> <name pos:line="680" pos:column="14">restyleBuffer</name><parameter_list pos:line="680" pos:column="27">()</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="681" pos:column="9">const</specifier> <name pos:line="681" pos:column="15">char</name> <type:modifier pos:line="681" pos:column="20">*</type:modifier></type> <name pos:line="681" pos:column="22">getCompleteKeywordList</name><parameter_list pos:line="681" pos:column="44">(<param><decl><type><name><name pos:line="681" pos:column="45">std</name><op:operator pos:line="681" pos:column="48">::</op:operator><name><name pos:line="681" pos:column="50">basic_string</name><argument_list pos:line="681" pos:column="62">&lt;<argument><expr><name pos:line="681" pos:column="63">char</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="681" pos:column="69">&amp;</type:modifier></type> <name pos:line="681" pos:column="71">kwl</name></decl></param>, <param><decl><type><name pos:line="681" pos:column="76">LangType</name></type> <name pos:line="681" pos:column="85">langType</name></decl></param>, <param><decl><type><name pos:line="681" pos:column="95">int</name></type> <name pos:line="681" pos:column="99">keywordIndex</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="682" pos:column="9">void</name></type> <name pos:line="682" pos:column="14">setKeywords</name><parameter_list pos:line="682" pos:column="25">(<param><decl><type><name pos:line="682" pos:column="26">LangType</name></type> <name pos:line="682" pos:column="35">langType</name></decl></param>, <param><decl><type><specifier pos:line="682" pos:column="45">const</specifier> <name pos:line="682" pos:column="51">char</name> <type:modifier pos:line="682" pos:column="56">*</type:modifier></type><name pos:line="682" pos:column="57">keywords</name></decl></param>, <param><decl><type><name pos:line="682" pos:column="67">int</name></type> <name pos:line="682" pos:column="71">index</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="683" pos:column="9">void</name></type> <name pos:line="683" pos:column="14">setLexer</name><parameter_list pos:line="683" pos:column="22">(<param><decl><type><name pos:line="683" pos:column="23">int</name></type> <name pos:line="683" pos:column="27">lexerID</name></decl></param>, <param><decl><type><name pos:line="683" pos:column="36">LangType</name></type> <name pos:line="683" pos:column="45">langType</name></decl></param>, <param><decl><type><name pos:line="683" pos:column="55">int</name></type> <name pos:line="683" pos:column="59">whichList</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="684" pos:column="9">inline</specifier> <name pos:line="684" pos:column="16">void</name></type> <name pos:line="684" pos:column="21">makeStyle</name><parameter_list pos:line="684" pos:column="30">(<param><decl><type><name pos:line="684" pos:column="31">LangType</name></type> <name pos:line="684" pos:column="40">langType</name></decl></param>, <param><decl><type><specifier pos:line="684" pos:column="50">const</specifier> <name pos:line="684" pos:column="56">TCHAR</name> <type:modifier pos:line="684" pos:column="62">*</type:modifier><type:modifier pos:line="684" pos:column="63">*</type:modifier></type><name pos:line="684" pos:column="64">keywordArray</name> <init pos:line="684" pos:column="77">= <expr><name pos:line="684" pos:column="79">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="685" pos:column="9">void</name></type> <name pos:line="685" pos:column="14">setStyle</name><parameter_list pos:line="685" pos:column="22">(<param><decl><type><name pos:line="685" pos:column="23">Style</name></type> <name pos:line="685" pos:column="29">styleToSet</name></decl></param>)</parameter_list>;</function_decl>			<comment type="line" pos:line="685" pos:column="65">//NOT by reference	(style edited)</comment>
	<function_decl><type><name pos:line="686" pos:column="9">void</name></type> <name pos:line="686" pos:column="14">setSpecialStyle</name><parameter_list pos:line="686" pos:column="29">(<param><decl><type><specifier pos:line="686" pos:column="30">const</specifier> <name pos:line="686" pos:column="36">Style</name> <type:modifier pos:line="686" pos:column="42">&amp;</type:modifier></type> <name pos:line="686" pos:column="44">styleToSet</name></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="686" pos:column="57">//by reference</comment>
	<function><type><name pos:line="687" pos:column="9">void</name></type> <name pos:line="687" pos:column="14">setSpecialIndicator</name><parameter_list pos:line="687" pos:column="33">(<param><decl><type><specifier pos:line="687" pos:column="34">const</specifier> <name pos:line="687" pos:column="40">Style</name> <type:modifier pos:line="687" pos:column="46">&amp;</type:modifier></type> <name pos:line="687" pos:column="48">styleToSet</name></decl></param>)</parameter_list> <block pos:line="687" pos:column="60">{
		<expr_stmt><expr><call><name pos:line="688" pos:column="17">execute</name><argument_list pos:line="688" pos:column="24">(<argument><expr><name pos:line="688" pos:column="25">SCI_INDICSETFORE</name></expr></argument>, <argument><expr><name><name pos:line="688" pos:column="43">styleToSet</name><op:operator pos:line="688" pos:column="53">.</op:operator><name pos:line="688" pos:column="54">_styleID</name></name></expr></argument>, <argument><expr><name><name pos:line="688" pos:column="64">styleToSet</name><op:operator pos:line="688" pos:column="74">.</op:operator><name pos:line="688" pos:column="75">_bgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="689" pos:column="10">;</empty_stmt>

	<comment type="line" pos:line="691" pos:column="9">//Complex lexers (same lexer, different language)</comment>
	<function_decl><type><name pos:line="692" pos:column="9">void</name></type> <name pos:line="692" pos:column="14">setXmlLexer</name><parameter_list pos:line="692" pos:column="25">(<param><decl><type><name pos:line="692" pos:column="26">LangType</name></type> <name pos:line="692" pos:column="35">type</name></decl></param>)</parameter_list>;</function_decl>
 	<function_decl><type><name pos:line="693" pos:column="9">void</name></type> <name pos:line="693" pos:column="14">setCppLexer</name><parameter_list pos:line="693" pos:column="25">(<param><decl><type><name pos:line="693" pos:column="26">LangType</name></type> <name pos:line="693" pos:column="35">type</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="694" pos:column="9">void</name></type> <name pos:line="694" pos:column="14">setTclLexer</name><parameter_list pos:line="694" pos:column="25">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="695" pos:column="5">void</name></type> <name pos:line="695" pos:column="10">setObjCLexer</name><parameter_list pos:line="695" pos:column="22">(<param><decl><type><name pos:line="695" pos:column="23">LangType</name></type> <name pos:line="695" pos:column="32">type</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="696" pos:column="9">void</name></type> <name pos:line="696" pos:column="14">setUserLexer</name><parameter_list pos:line="696" pos:column="26">(<param><decl><type><specifier pos:line="696" pos:column="27">const</specifier> <name pos:line="696" pos:column="33">TCHAR</name> <type:modifier pos:line="696" pos:column="39">*</type:modifier></type><name pos:line="696" pos:column="40">userLangName</name> <init pos:line="696" pos:column="53">= <expr><name pos:line="696" pos:column="55">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="697" pos:column="9">void</name></type> <name pos:line="697" pos:column="14">setExternalLexer</name><parameter_list pos:line="697" pos:column="30">(<param><decl><type><name pos:line="697" pos:column="31">LangType</name></type> <name pos:line="697" pos:column="40">typeDoc</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="698" pos:column="9">void</name></type> <name pos:line="698" pos:column="14">setEmbeddedJSLexer</name><parameter_list pos:line="698" pos:column="32">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="699" pos:column="5">void</name></type> <name pos:line="699" pos:column="10">setEmbeddedPhpLexer</name><parameter_list pos:line="699" pos:column="29">()</parameter_list>;</function_decl>
    <function_decl><type><name pos:line="700" pos:column="5">void</name></type> <name pos:line="700" pos:column="10">setEmbeddedAspLexer</name><parameter_list pos:line="700" pos:column="29">()</parameter_list>;</function_decl>
	<comment type="line" pos:line="701" pos:column="9">//Simple lexers</comment>
	<function><type><name pos:line="702" pos:column="9">void</name></type> <name pos:line="702" pos:column="14">setCssLexer</name><parameter_list pos:line="702" pos:column="25">()</parameter_list> <block pos:line="702" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="703" pos:column="17">setLexer</name><argument_list pos:line="703" pos:column="25">(<argument><expr><name pos:line="703" pos:column="26">SCLEX_CSS</name></expr></argument>, <argument><expr><name pos:line="703" pos:column="37">L_CSS</name></expr></argument>, <argument><expr><name pos:line="703" pos:column="44">LIST_0</name> <op:operator pos:line="703" pos:column="51">|</op:operator> <name pos:line="703" pos:column="53">LIST_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="704" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="706" pos:column="9">void</name></type> <name pos:line="706" pos:column="14">setLuaLexer</name><parameter_list pos:line="706" pos:column="25">()</parameter_list> <block pos:line="706" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="707" pos:column="17">setLexer</name><argument_list pos:line="707" pos:column="25">(<argument><expr><name pos:line="707" pos:column="26">SCLEX_LUA</name></expr></argument>, <argument><expr><name pos:line="707" pos:column="37">L_LUA</name></expr></argument>, <argument><expr><name pos:line="707" pos:column="44">LIST_0</name> <op:operator pos:line="707" pos:column="51">|</op:operator> <name pos:line="707" pos:column="53">LIST_1</name> <op:operator pos:line="707" pos:column="60">|</op:operator> <name pos:line="707" pos:column="62">LIST_2</name> <op:operator pos:line="707" pos:column="69">|</op:operator> <name pos:line="707" pos:column="71">LIST_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="708" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="710" pos:column="9">void</name></type> <name pos:line="710" pos:column="14">setMakefileLexer</name><parameter_list pos:line="710" pos:column="30">()</parameter_list> <block pos:line="710" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="711" pos:column="17">execute</name><argument_list pos:line="711" pos:column="24">(<argument><expr><name pos:line="711" pos:column="25">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="711" pos:column="39">SCLEX_MAKEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="712" pos:column="17">makeStyle</name><argument_list pos:line="712" pos:column="26">(<argument><expr><name pos:line="712" pos:column="27">L_MAKEFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="713" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="715" pos:column="9">void</name></type> <name pos:line="715" pos:column="14">setIniLexer</name><parameter_list pos:line="715" pos:column="25">()</parameter_list> <block pos:line="715" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="716" pos:column="17">execute</name><argument_list pos:line="716" pos:column="24">(<argument><expr><name pos:line="716" pos:column="25">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="716" pos:column="39">SCLEX_PROPERTIES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="717" pos:column="17">execute</name><argument_list pos:line="717" pos:column="24">(<argument><expr><name pos:line="717" pos:column="25">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="717" pos:column="48">SCE_PROPS_SECTION</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="717" pos:column="67">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="718" pos:column="17">makeStyle</name><argument_list pos:line="718" pos:column="26">(<argument><expr><name pos:line="718" pos:column="27">L_INI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="719" pos:column="17">execute</name><argument_list pos:line="719" pos:column="24">(<argument><expr><name pos:line="719" pos:column="25">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="719" pos:column="42">reinterpret_cast</name><argument_list pos:line="719" pos:column="58">&lt;<argument><expr><name pos:line="719" pos:column="59">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="719" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="719" pos:column="67">"fold"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="719" pos:column="76">reinterpret_cast</name><argument_list pos:line="719" pos:column="92">&lt;<argument><expr><name pos:line="719" pos:column="93">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="719" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="719" pos:column="101">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="720" pos:column="17">execute</name><argument_list pos:line="720" pos:column="24">(<argument><expr><name pos:line="720" pos:column="25">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="720" pos:column="42">reinterpret_cast</name><argument_list pos:line="720" pos:column="58">&lt;<argument><expr><name pos:line="720" pos:column="59">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="720" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="720" pos:column="67">"fold.compact"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="720" pos:column="84">reinterpret_cast</name><argument_list pos:line="720" pos:column="100">&lt;<argument><expr><name pos:line="720" pos:column="101">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="720" pos:column="108">(<argument><expr><lit:literal type="string" pos:line="720" pos:column="109">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="721" pos:column="10">;</empty_stmt>


	<function><type><name pos:line="724" pos:column="9">void</name></type> <name pos:line="724" pos:column="14">setSqlLexer</name><parameter_list pos:line="724" pos:column="25">()</parameter_list> <block pos:line="724" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="725" pos:column="17">execute</name><argument_list pos:line="725" pos:column="24">(<argument><expr><name pos:line="725" pos:column="25">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="725" pos:column="42">(</op:operator><name pos:line="725" pos:column="43">WPARAM</name><op:operator pos:line="725" pos:column="49">)</op:operator><lit:literal type="string" pos:line="725" pos:column="50">"sql.backslash.escapes"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="725" pos:column="75">(</op:operator><name pos:line="725" pos:column="76">LPARAM</name><op:operator pos:line="725" pos:column="82">)</op:operator><lit:literal type="string" pos:line="725" pos:column="83">"1"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="726" pos:column="17">setLexer</name><argument_list pos:line="726" pos:column="25">(<argument><expr><name pos:line="726" pos:column="26">SCLEX_SQL</name></expr></argument>, <argument><expr><name pos:line="726" pos:column="37">L_SQL</name></expr></argument>, <argument><expr><name pos:line="726" pos:column="44">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="727" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="729" pos:column="9">void</name></type> <name pos:line="729" pos:column="14">setBashLexer</name><parameter_list pos:line="729" pos:column="26">()</parameter_list> <block pos:line="729" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="730" pos:column="17">setLexer</name><argument_list pos:line="730" pos:column="25">(<argument><expr><name pos:line="730" pos:column="26">SCLEX_BASH</name></expr></argument>, <argument><expr><name pos:line="730" pos:column="38">L_BASH</name></expr></argument>, <argument><expr><name pos:line="730" pos:column="46">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="731" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="733" pos:column="9">void</name></type> <name pos:line="733" pos:column="14">setVBLexer</name><parameter_list pos:line="733" pos:column="24">()</parameter_list> <block pos:line="733" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="734" pos:column="17">setLexer</name><argument_list pos:line="734" pos:column="25">(<argument><expr><name pos:line="734" pos:column="26">SCLEX_VB</name></expr></argument>, <argument><expr><name pos:line="734" pos:column="36">L_VB</name></expr></argument>, <argument><expr><name pos:line="734" pos:column="42">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="735" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="737" pos:column="9">void</name></type> <name pos:line="737" pos:column="14">setPascalLexer</name><parameter_list pos:line="737" pos:column="28">()</parameter_list> <block pos:line="737" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="738" pos:column="17">setLexer</name><argument_list pos:line="738" pos:column="25">(<argument><expr><name pos:line="738" pos:column="26">SCLEX_PASCAL</name></expr></argument>, <argument><expr><name pos:line="738" pos:column="40">L_PASCAL</name></expr></argument>, <argument><expr><name pos:line="738" pos:column="50">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="739" pos:column="17">execute</name><argument_list pos:line="739" pos:column="24">(<argument><expr><name pos:line="739" pos:column="25">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="739" pos:column="42">reinterpret_cast</name><argument_list pos:line="739" pos:column="58">&lt;<argument><expr><name pos:line="739" pos:column="59">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="739" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="739" pos:column="67">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="739" pos:column="89">reinterpret_cast</name><argument_list pos:line="739" pos:column="105">&lt;<argument><expr><name pos:line="739" pos:column="106">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="739" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="739" pos:column="114">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="740" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="742" pos:column="9">void</name></type> <name pos:line="742" pos:column="14">setPerlLexer</name><parameter_list pos:line="742" pos:column="26">()</parameter_list> <block pos:line="742" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="743" pos:column="17">setLexer</name><argument_list pos:line="743" pos:column="25">(<argument><expr><name pos:line="743" pos:column="26">SCLEX_PERL</name></expr></argument>, <argument><expr><name pos:line="743" pos:column="38">L_PERL</name></expr></argument>, <argument><expr><name pos:line="743" pos:column="46">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="744" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="746" pos:column="9">void</name></type> <name pos:line="746" pos:column="14">setPythonLexer</name><parameter_list pos:line="746" pos:column="28">()</parameter_list> <block pos:line="746" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="747" pos:column="17">setLexer</name><argument_list pos:line="747" pos:column="25">(<argument><expr><name pos:line="747" pos:column="26">SCLEX_PYTHON</name></expr></argument>, <argument><expr><name pos:line="747" pos:column="40">L_PYTHON</name></expr></argument>, <argument><expr><name pos:line="747" pos:column="50">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="748" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="750" pos:column="9">void</name></type> <name pos:line="750" pos:column="14">setBatchLexer</name><parameter_list pos:line="750" pos:column="27">()</parameter_list> <block pos:line="750" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="751" pos:column="17">setLexer</name><argument_list pos:line="751" pos:column="25">(<argument><expr><name pos:line="751" pos:column="26">SCLEX_BATCH</name></expr></argument>, <argument><expr><name pos:line="751" pos:column="39">L_BATCH</name></expr></argument>, <argument><expr><name pos:line="751" pos:column="48">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="752" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="754" pos:column="9">void</name></type> <name pos:line="754" pos:column="14">setTeXLexer</name><parameter_list pos:line="754" pos:column="25">()</parameter_list> <block pos:line="754" pos:column="28">{
		<for pos:line="755" pos:column="17">for (<init><decl><type><name pos:line="755" pos:column="22">int</name></type> <name pos:line="755" pos:column="26">i</name> <init pos:line="755" pos:column="28">= <expr><lit:literal type="number" pos:line="755" pos:column="30">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="755" pos:column="34">i</name> <op:operator pos:line="755" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="755" pos:column="38">4</lit:literal></expr> ;</condition> <incr><expr><name pos:line="755" pos:column="42">i</name><op:operator pos:line="755" pos:column="43">++</op:operator></expr></incr>)
			<expr_stmt><expr><call><name pos:line="756" pos:column="25">execute</name><argument_list pos:line="756" pos:column="32">(<argument><expr><name pos:line="756" pos:column="33">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><name pos:line="756" pos:column="50">i</name></expr></argument>, <argument><expr><call><name><name pos:line="756" pos:column="53">reinterpret_cast</name><argument_list pos:line="756" pos:column="69">&lt;<argument><expr><name pos:line="756" pos:column="70">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="756" pos:column="77">(<argument><expr><call><name pos:line="756" pos:column="78">TEXT</name><argument_list pos:line="756" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="756" pos:column="83">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
		<expr_stmt><expr><call><name pos:line="757" pos:column="17">setLexer</name><argument_list pos:line="757" pos:column="25">(<argument><expr><name pos:line="757" pos:column="26">SCLEX_TEX</name></expr></argument>, <argument><expr><name pos:line="757" pos:column="37">L_TEX</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="757" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="758" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="760" pos:column="9">void</name></type> <name pos:line="760" pos:column="14">setNsisLexer</name><parameter_list pos:line="760" pos:column="26">()</parameter_list> <block pos:line="760" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="761" pos:column="17">setLexer</name><argument_list pos:line="761" pos:column="25">(<argument><expr><name pos:line="761" pos:column="26">SCLEX_NSIS</name></expr></argument>, <argument><expr><name pos:line="761" pos:column="38">L_NSIS</name></expr></argument>, <argument><expr><name pos:line="761" pos:column="46">LIST_0</name> <op:operator pos:line="761" pos:column="53">|</op:operator> <name pos:line="761" pos:column="55">LIST_1</name> <op:operator pos:line="761" pos:column="62">|</op:operator> <name pos:line="761" pos:column="64">LIST_2</name> <op:operator pos:line="761" pos:column="71">|</op:operator> <name pos:line="761" pos:column="73">LIST_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="762" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="764" pos:column="9">void</name></type> <name pos:line="764" pos:column="14">setFortranLexer</name><parameter_list pos:line="764" pos:column="29">()</parameter_list> <block pos:line="764" pos:column="32">{
		<expr_stmt><expr><call><name pos:line="765" pos:column="17">setLexer</name><argument_list pos:line="765" pos:column="25">(<argument><expr><name pos:line="765" pos:column="26">SCLEX_F77</name></expr></argument>, <argument><expr><name pos:line="765" pos:column="37">L_FORTRAN</name></expr></argument>, <argument><expr><name pos:line="765" pos:column="48">LIST_0</name> <op:operator pos:line="765" pos:column="55">|</op:operator> <name pos:line="765" pos:column="57">LIST_1</name> <op:operator pos:line="765" pos:column="64">|</op:operator> <name pos:line="765" pos:column="66">LIST_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="766" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="768" pos:column="9">void</name></type> <name pos:line="768" pos:column="14">setLispLexer</name><parameter_list pos:line="768" pos:column="26">()</parameter_list><block pos:line="768" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="769" pos:column="17">setLexer</name><argument_list pos:line="769" pos:column="25">(<argument><expr><name pos:line="769" pos:column="26">SCLEX_LISP</name></expr></argument>, <argument><expr><name pos:line="769" pos:column="38">L_LISP</name></expr></argument>, <argument><expr><name pos:line="769" pos:column="46">LIST_0</name> <op:operator pos:line="769" pos:column="53">|</op:operator> <name pos:line="769" pos:column="55">LIST_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="770" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="772" pos:column="9">void</name></type> <name pos:line="772" pos:column="14">setSchemeLexer</name><parameter_list pos:line="772" pos:column="28">()</parameter_list><block pos:line="772" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="773" pos:column="17">setLexer</name><argument_list pos:line="773" pos:column="25">(<argument><expr><name pos:line="773" pos:column="26">SCLEX_LISP</name></expr></argument>, <argument><expr><name pos:line="773" pos:column="38">L_SCHEME</name></expr></argument>, <argument><expr><name pos:line="773" pos:column="48">LIST_0</name> <op:operator pos:line="773" pos:column="55">|</op:operator> <name pos:line="773" pos:column="57">LIST_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="774" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="776" pos:column="9">void</name></type> <name pos:line="776" pos:column="14">setAsmLexer</name><parameter_list pos:line="776" pos:column="25">()</parameter_list><block pos:line="776" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="777" pos:column="17">setLexer</name><argument_list pos:line="777" pos:column="25">(<argument><expr><name pos:line="777" pos:column="26">SCLEX_ASM</name></expr></argument>, <argument><expr><name pos:line="777" pos:column="37">L_ASM</name></expr></argument>, <argument><expr><name pos:line="777" pos:column="44">LIST_0</name> <op:operator pos:line="777" pos:column="51">|</op:operator> <name pos:line="777" pos:column="53">LIST_1</name> <op:operator pos:line="777" pos:column="60">|</op:operator> <name pos:line="777" pos:column="62">LIST_2</name> <op:operator pos:line="777" pos:column="69">|</op:operator> <name pos:line="777" pos:column="71">LIST_3</name> <op:operator pos:line="777" pos:column="78">|</op:operator> <name pos:line="777" pos:column="80">LIST_4</name> <op:operator pos:line="777" pos:column="87">|</op:operator> <name pos:line="777" pos:column="89">LIST_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="778" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="780" pos:column="9">void</name></type> <name pos:line="780" pos:column="14">setDiffLexer</name><parameter_list pos:line="780" pos:column="26">()</parameter_list><block pos:line="780" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="781" pos:column="17">setLexer</name><argument_list pos:line="781" pos:column="25">(<argument><expr><name pos:line="781" pos:column="26">SCLEX_DIFF</name></expr></argument>, <argument><expr><name pos:line="781" pos:column="38">L_DIFF</name></expr></argument>, <argument><expr><name pos:line="781" pos:column="46">LIST_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="782" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="784" pos:column="9">void</name></type> <name pos:line="784" pos:column="14">setPropsLexer</name><parameter_list pos:line="784" pos:column="27">()</parameter_list><block pos:line="784" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="785" pos:column="17">setLexer</name><argument_list pos:line="785" pos:column="25">(<argument><expr><name pos:line="785" pos:column="26">SCLEX_PROPERTIES</name></expr></argument>, <argument><expr><name pos:line="785" pos:column="44">L_PROPS</name></expr></argument>, <argument><expr><name pos:line="785" pos:column="53">LIST_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="786" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="788" pos:column="9">void</name></type> <name pos:line="788" pos:column="14">setPostscriptLexer</name><parameter_list pos:line="788" pos:column="32">()</parameter_list><block pos:line="788" pos:column="34">{
		<expr_stmt><expr><call><name pos:line="789" pos:column="17">setLexer</name><argument_list pos:line="789" pos:column="25">(<argument><expr><name pos:line="789" pos:column="26">SCLEX_PS</name></expr></argument>, <argument><expr><name pos:line="789" pos:column="36">L_PS</name></expr></argument>, <argument><expr><name pos:line="789" pos:column="42">LIST_0</name> <op:operator pos:line="789" pos:column="49">|</op:operator> <name pos:line="789" pos:column="51">LIST_1</name> <op:operator pos:line="789" pos:column="58">|</op:operator> <name pos:line="789" pos:column="60">LIST_2</name> <op:operator pos:line="789" pos:column="67">|</op:operator> <name pos:line="789" pos:column="69">LIST_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="790" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="792" pos:column="9">void</name></type> <name pos:line="792" pos:column="14">setRubyLexer</name><parameter_list pos:line="792" pos:column="26">()</parameter_list><block pos:line="792" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="793" pos:column="17">setLexer</name><argument_list pos:line="793" pos:column="25">(<argument><expr><name pos:line="793" pos:column="26">SCLEX_RUBY</name></expr></argument>, <argument><expr><name pos:line="793" pos:column="38">L_RUBY</name></expr></argument>, <argument><expr><name pos:line="793" pos:column="46">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="794" pos:column="17">execute</name><argument_list pos:line="794" pos:column="24">(<argument><expr><name pos:line="794" pos:column="25">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="794" pos:column="48">SCE_RB_POD</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="794" pos:column="60">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="795" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="797" pos:column="9">void</name></type> <name pos:line="797" pos:column="14">setSmalltalkLexer</name><parameter_list pos:line="797" pos:column="31">()</parameter_list><block pos:line="797" pos:column="33">{
		<expr_stmt><expr><call><name pos:line="798" pos:column="17">setLexer</name><argument_list pos:line="798" pos:column="25">(<argument><expr><name pos:line="798" pos:column="26">SCLEX_SMALLTALK</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="43">L_SMALLTALK</name></expr></argument>, <argument><expr><name pos:line="798" pos:column="56">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="799" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="801" pos:column="9">void</name></type> <name pos:line="801" pos:column="14">setVhdlLexer</name><parameter_list pos:line="801" pos:column="26">()</parameter_list><block pos:line="801" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="802" pos:column="17">setLexer</name><argument_list pos:line="802" pos:column="25">(<argument><expr><name pos:line="802" pos:column="26">SCLEX_VHDL</name></expr></argument>, <argument><expr><name pos:line="802" pos:column="38">L_VHDL</name></expr></argument>, <argument><expr><name pos:line="802" pos:column="46">LIST_0</name> <op:operator pos:line="802" pos:column="53">|</op:operator> <name pos:line="802" pos:column="55">LIST_1</name> <op:operator pos:line="802" pos:column="62">|</op:operator> <name pos:line="802" pos:column="64">LIST_2</name> <op:operator pos:line="802" pos:column="71">|</op:operator> <name pos:line="802" pos:column="73">LIST_3</name> <op:operator pos:line="802" pos:column="80">|</op:operator> <name pos:line="802" pos:column="82">LIST_4</name> <op:operator pos:line="802" pos:column="89">|</op:operator> <name pos:line="802" pos:column="91">LIST_5</name> <op:operator pos:line="802" pos:column="98">|</op:operator> <name pos:line="802" pos:column="100">LIST_6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="803" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="805" pos:column="9">void</name></type> <name pos:line="805" pos:column="14">setKixLexer</name><parameter_list pos:line="805" pos:column="25">()</parameter_list><block pos:line="805" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="806" pos:column="17">setLexer</name><argument_list pos:line="806" pos:column="25">(<argument><expr><name pos:line="806" pos:column="26">SCLEX_KIX</name></expr></argument>, <argument><expr><name pos:line="806" pos:column="37">L_KIX</name></expr></argument>, <argument><expr><name pos:line="806" pos:column="44">LIST_0</name> <op:operator pos:line="806" pos:column="51">|</op:operator> <name pos:line="806" pos:column="53">LIST_1</name> <op:operator pos:line="806" pos:column="60">|</op:operator> <name pos:line="806" pos:column="62">LIST_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="807" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="809" pos:column="9">void</name></type> <name pos:line="809" pos:column="14">setAutoItLexer</name><parameter_list pos:line="809" pos:column="28">()</parameter_list><block pos:line="809" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="810" pos:column="17">setLexer</name><argument_list pos:line="810" pos:column="25">(<argument><expr><name pos:line="810" pos:column="26">SCLEX_AU3</name></expr></argument>, <argument><expr><name pos:line="810" pos:column="37">L_AU3</name></expr></argument>, <argument><expr><name pos:line="810" pos:column="44">LIST_0</name> <op:operator pos:line="810" pos:column="51">|</op:operator> <name pos:line="810" pos:column="53">LIST_1</name> <op:operator pos:line="810" pos:column="60">|</op:operator> <name pos:line="810" pos:column="62">LIST_2</name> <op:operator pos:line="810" pos:column="69">|</op:operator> <name pos:line="810" pos:column="71">LIST_3</name> <op:operator pos:line="810" pos:column="78">|</op:operator> <name pos:line="810" pos:column="80">LIST_4</name> <op:operator pos:line="810" pos:column="87">|</op:operator> <name pos:line="810" pos:column="89">LIST_5</name> <op:operator pos:line="810" pos:column="96">|</op:operator> <name pos:line="810" pos:column="98">LIST_6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="811" pos:column="17">execute</name><argument_list pos:line="811" pos:column="24">(<argument><expr><name pos:line="811" pos:column="25">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="811" pos:column="42">reinterpret_cast</name><argument_list pos:line="811" pos:column="58">&lt;<argument><expr><name pos:line="811" pos:column="59">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="811" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="811" pos:column="67">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="811" pos:column="89">reinterpret_cast</name><argument_list pos:line="811" pos:column="105">&lt;<argument><expr><name pos:line="811" pos:column="106">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="811" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="811" pos:column="114">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="812" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="814" pos:column="9">void</name></type> <name pos:line="814" pos:column="14">setCamlLexer</name><parameter_list pos:line="814" pos:column="26">()</parameter_list><block pos:line="814" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="815" pos:column="17">setLexer</name><argument_list pos:line="815" pos:column="25">(<argument><expr><name pos:line="815" pos:column="26">SCLEX_CAML</name></expr></argument>, <argument><expr><name pos:line="815" pos:column="38">L_CAML</name></expr></argument>, <argument><expr><name pos:line="815" pos:column="46">LIST_0</name> <op:operator pos:line="815" pos:column="53">|</op:operator> <name pos:line="815" pos:column="55">LIST_1</name> <op:operator pos:line="815" pos:column="62">|</op:operator> <name pos:line="815" pos:column="64">LIST_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="816" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="818" pos:column="9">void</name></type> <name pos:line="818" pos:column="14">setAdaLexer</name><parameter_list pos:line="818" pos:column="25">()</parameter_list><block pos:line="818" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="819" pos:column="17">setLexer</name><argument_list pos:line="819" pos:column="25">(<argument><expr><name pos:line="819" pos:column="26">SCLEX_ADA</name></expr></argument>, <argument><expr><name pos:line="819" pos:column="37">L_ADA</name></expr></argument>, <argument><expr><name pos:line="819" pos:column="44">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="820" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="822" pos:column="9">void</name></type> <name pos:line="822" pos:column="14">setVerilogLexer</name><parameter_list pos:line="822" pos:column="29">()</parameter_list><block pos:line="822" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="823" pos:column="17">setLexer</name><argument_list pos:line="823" pos:column="25">(<argument><expr><name pos:line="823" pos:column="26">SCLEX_VERILOG</name></expr></argument>, <argument><expr><name pos:line="823" pos:column="41">L_VERILOG</name></expr></argument>, <argument><expr><name pos:line="823" pos:column="52">LIST_0</name> <op:operator pos:line="823" pos:column="59">|</op:operator> <name pos:line="823" pos:column="61">LIST_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="824" pos:column="17">execute</name><argument_list pos:line="824" pos:column="24">(<argument><expr><name pos:line="824" pos:column="25">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="824" pos:column="42">reinterpret_cast</name><argument_list pos:line="824" pos:column="58">&lt;<argument><expr><name pos:line="824" pos:column="59">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="824" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="824" pos:column="67">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="824" pos:column="89">reinterpret_cast</name><argument_list pos:line="824" pos:column="105">&lt;<argument><expr><name pos:line="824" pos:column="106">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="824" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="824" pos:column="114">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="825" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="827" pos:column="9">void</name></type> <name pos:line="827" pos:column="14">setMatlabLexer</name><parameter_list pos:line="827" pos:column="28">()</parameter_list><block pos:line="827" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="828" pos:column="17">setLexer</name><argument_list pos:line="828" pos:column="25">(<argument><expr><name pos:line="828" pos:column="26">SCLEX_MATLAB</name></expr></argument>, <argument><expr><name pos:line="828" pos:column="40">L_MATLAB</name></expr></argument>, <argument><expr><name pos:line="828" pos:column="50">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="829" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="831" pos:column="9">void</name></type> <name pos:line="831" pos:column="14">setHaskellLexer</name><parameter_list pos:line="831" pos:column="29">()</parameter_list><block pos:line="831" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="832" pos:column="17">setLexer</name><argument_list pos:line="832" pos:column="25">(<argument><expr><name pos:line="832" pos:column="26">SCLEX_HASKELL</name></expr></argument>, <argument><expr><name pos:line="832" pos:column="41">L_HASKELL</name></expr></argument>, <argument><expr><name pos:line="832" pos:column="52">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="833" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="835" pos:column="9">void</name></type> <name pos:line="835" pos:column="14">setInnoLexer</name><parameter_list pos:line="835" pos:column="26">()</parameter_list> <block pos:line="835" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="836" pos:column="17">setLexer</name><argument_list pos:line="836" pos:column="25">(<argument><expr><name pos:line="836" pos:column="26">SCLEX_INNOSETUP</name></expr></argument>, <argument><expr><name pos:line="836" pos:column="43">L_INNO</name></expr></argument>, <argument><expr><name pos:line="836" pos:column="51">LIST_0</name> <op:operator pos:line="836" pos:column="58">|</op:operator> <name pos:line="836" pos:column="60">LIST_1</name> <op:operator pos:line="836" pos:column="67">|</op:operator> <name pos:line="836" pos:column="69">LIST_2</name> <op:operator pos:line="836" pos:column="76">|</op:operator> <name pos:line="836" pos:column="78">LIST_3</name> <op:operator pos:line="836" pos:column="85">|</op:operator> <name pos:line="836" pos:column="87">LIST_4</name> <op:operator pos:line="836" pos:column="94">|</op:operator> <name pos:line="836" pos:column="96">LIST_5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="837" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="839" pos:column="9">void</name></type> <name pos:line="839" pos:column="14">setCmakeLexer</name><parameter_list pos:line="839" pos:column="27">()</parameter_list> <block pos:line="839" pos:column="30">{
		<expr_stmt><expr><call><name pos:line="840" pos:column="17">setLexer</name><argument_list pos:line="840" pos:column="25">(<argument><expr><name pos:line="840" pos:column="26">SCLEX_CMAKE</name></expr></argument>, <argument><expr><name pos:line="840" pos:column="39">L_CMAKE</name></expr></argument>, <argument><expr><name pos:line="840" pos:column="48">LIST_0</name> <op:operator pos:line="840" pos:column="55">|</op:operator> <name pos:line="840" pos:column="57">LIST_1</name> <op:operator pos:line="840" pos:column="64">|</op:operator> <name pos:line="840" pos:column="66">LIST_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="841" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="843" pos:column="9">void</name></type> <name pos:line="843" pos:column="14">setYamlLexer</name><parameter_list pos:line="843" pos:column="26">()</parameter_list> <block pos:line="843" pos:column="29">{
		<expr_stmt><expr><call><name pos:line="844" pos:column="17">setLexer</name><argument_list pos:line="844" pos:column="25">(<argument><expr><name pos:line="844" pos:column="26">SCLEX_YAML</name></expr></argument>, <argument><expr><name pos:line="844" pos:column="38">L_YAML</name></expr></argument>, <argument><expr><name pos:line="844" pos:column="46">LIST_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="845" pos:column="10">;</empty_stmt>

    <comment type="line" pos:line="847" pos:column="5">//--------------------</comment>

    <function><type><name pos:line="849" pos:column="5">void</name></type> <name pos:line="849" pos:column="10">setCobolLexer</name><parameter_list pos:line="849" pos:column="23">()</parameter_list> <block pos:line="849" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="850" pos:column="17">setLexer</name><argument_list pos:line="850" pos:column="25">(<argument><expr><name pos:line="850" pos:column="26">SCLEX_COBOL</name></expr></argument>, <argument><expr><name pos:line="850" pos:column="39">L_COBOL</name></expr></argument>, <argument><expr><name pos:line="850" pos:column="48">LIST_0</name> <op:operator pos:line="850" pos:column="55">|</op:operator> <name pos:line="850" pos:column="57">LIST_1</name> <op:operator pos:line="850" pos:column="64">|</op:operator> <name pos:line="850" pos:column="66">LIST_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="851" pos:column="10">;</empty_stmt>
    <function><type><name pos:line="852" pos:column="5">void</name></type> <name pos:line="852" pos:column="10">setGui4CliLexer</name><parameter_list pos:line="852" pos:column="25">()</parameter_list> <block pos:line="852" pos:column="28">{
		<expr_stmt><expr><call><name pos:line="853" pos:column="17">setLexer</name><argument_list pos:line="853" pos:column="25">(<argument><expr><name pos:line="853" pos:column="26">SCLEX_GUI4CLI</name></expr></argument>, <argument><expr><name pos:line="853" pos:column="41">L_GUI4CLI</name></expr></argument>, <argument><expr><name pos:line="853" pos:column="52">LIST_0</name> <op:operator pos:line="853" pos:column="59">|</op:operator> <name pos:line="853" pos:column="61">LIST_1</name> <op:operator pos:line="853" pos:column="68">|</op:operator> <name pos:line="853" pos:column="70">LIST_2</name> <op:operator pos:line="853" pos:column="77">|</op:operator> <name pos:line="853" pos:column="79">LIST_3</name> <op:operator pos:line="853" pos:column="86">|</op:operator> <name pos:line="853" pos:column="88">LIST_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="854" pos:column="10">;</empty_stmt>
    <function><type><name pos:line="855" pos:column="5">void</name></type> <name pos:line="855" pos:column="10">setDLexer</name><parameter_list pos:line="855" pos:column="19">()</parameter_list> <block pos:line="855" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="856" pos:column="17">setLexer</name><argument_list pos:line="856" pos:column="25">(<argument><expr><name pos:line="856" pos:column="26">SCLEX_D</name></expr></argument>, <argument><expr><name pos:line="856" pos:column="35">L_D</name></expr></argument>, <argument><expr><name pos:line="856" pos:column="40">LIST_0</name> <op:operator pos:line="856" pos:column="47">|</op:operator> <name pos:line="856" pos:column="49">LIST_1</name> <op:operator pos:line="856" pos:column="56">|</op:operator> <name pos:line="856" pos:column="58">LIST_2</name> <op:operator pos:line="856" pos:column="65">|</op:operator> <name pos:line="856" pos:column="67">LIST_3</name> <op:operator pos:line="856" pos:column="74">|</op:operator> <name pos:line="856" pos:column="76">LIST_4</name> <op:operator pos:line="856" pos:column="83">|</op:operator> <name pos:line="856" pos:column="85">LIST_5</name> <op:operator pos:line="856" pos:column="92">|</op:operator> <name pos:line="856" pos:column="94">LIST_6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="857" pos:column="10">;</empty_stmt>
    <function><type><name pos:line="858" pos:column="5">void</name></type> <name pos:line="858" pos:column="10">setPowerShellLexer</name><parameter_list pos:line="858" pos:column="28">()</parameter_list> <block pos:line="858" pos:column="31">{
		<expr_stmt><expr><call><name pos:line="859" pos:column="17">setLexer</name><argument_list pos:line="859" pos:column="25">(<argument><expr><name pos:line="859" pos:column="26">SCLEX_POWERSHELL</name></expr></argument>, <argument><expr><name pos:line="859" pos:column="44">L_POWERSHELL</name></expr></argument>, <argument><expr><name pos:line="859" pos:column="58">LIST_0</name> <op:operator pos:line="859" pos:column="65">|</op:operator> <name pos:line="859" pos:column="67">LIST_1</name> <op:operator pos:line="859" pos:column="74">|</op:operator> <name pos:line="859" pos:column="76">LIST_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="860" pos:column="10">;</empty_stmt>
    <function><type><name pos:line="861" pos:column="5">void</name></type> <name pos:line="861" pos:column="10">setRLexer</name><parameter_list pos:line="861" pos:column="19">()</parameter_list> <block pos:line="861" pos:column="22">{
		<expr_stmt><expr><call><name pos:line="862" pos:column="17">setLexer</name><argument_list pos:line="862" pos:column="25">(<argument><expr><name pos:line="862" pos:column="26">SCLEX_R</name></expr></argument>, <argument><expr><name pos:line="862" pos:column="35">L_R</name></expr></argument>, <argument><expr><name pos:line="862" pos:column="40">LIST_0</name> <op:operator pos:line="862" pos:column="47">|</op:operator> <name pos:line="862" pos:column="49">LIST_1</name> <op:operator pos:line="862" pos:column="56">|</op:operator> <name pos:line="862" pos:column="58">LIST_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="863" pos:column="10">;</empty_stmt>

    <comment type="line" pos:line="865" pos:column="5">//--------------------</comment>

	<function><type><name pos:line="867" pos:column="9">void</name></type> <name pos:line="867" pos:column="14">setSearchResultLexer</name><parameter_list pos:line="867" pos:column="34">()</parameter_list> <block pos:line="867" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="868" pos:column="17">execute</name><argument_list pos:line="868" pos:column="24">(<argument><expr><name pos:line="868" pos:column="25">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="868" pos:column="48">SCE_SEARCHRESULT_FILE_HEADER</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="868" pos:column="78">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="869" pos:column="17">execute</name><argument_list pos:line="869" pos:column="24">(<argument><expr><name pos:line="869" pos:column="25">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="869" pos:column="48">SCE_SEARCHRESULT_SEARCH_HEADER</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="869" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="870" pos:column="17">setLexer</name><argument_list pos:line="870" pos:column="25">(<argument><expr><name pos:line="870" pos:column="26">SCLEX_SEARCHRESULT</name></expr></argument>, <argument><expr><name pos:line="870" pos:column="46">L_SEARCHRESULT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="870" pos:column="62">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="871" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="873" pos:column="9">bool</name></type> <name pos:line="873" pos:column="14">isNeededFolderMarge</name><parameter_list pos:line="873" pos:column="33">(<param><decl><type><name pos:line="873" pos:column="34">LangType</name></type> <name pos:line="873" pos:column="43">typeDoc</name></decl></param>)</parameter_list> <specifier pos:line="873" pos:column="52">const</specifier> <block pos:line="873" pos:column="58">{
		<switch pos:line="874" pos:column="17">switch <condition pos:line="874" pos:column="24">(<expr><name pos:line="874" pos:column="25">typeDoc</name></expr>)</condition>
		<block pos:line="875" pos:column="17">{
			<case pos:line="876" pos:column="25">case <expr><name pos:line="876" pos:column="30">L_ASCII</name></expr>:
			</case><case pos:line="877" pos:column="25">case <expr><name pos:line="877" pos:column="30">L_BATCH</name></expr>:
			</case><case pos:line="878" pos:column="25">case <expr><name pos:line="878" pos:column="30">L_TEXT</name></expr>:
			</case><case pos:line="879" pos:column="25">case <expr><name pos:line="879" pos:column="30">L_MAKEFILE</name></expr>:
			</case><case pos:line="880" pos:column="25">case <expr><name pos:line="880" pos:column="30">L_ASM</name></expr>:
			</case><case pos:line="881" pos:column="25">case <expr><name pos:line="881" pos:column="30">L_HASKELL</name></expr>:
			</case><case pos:line="882" pos:column="25">case <expr><name pos:line="882" pos:column="30">L_PROPS</name></expr>:
			</case><case pos:line="883" pos:column="25">case <expr><name pos:line="883" pos:column="30">L_SMALLTALK</name></expr>:
			</case><case pos:line="884" pos:column="25">case <expr><name pos:line="884" pos:column="30">L_KIX</name></expr>:
			</case><case pos:line="885" pos:column="25">case <expr><name pos:line="885" pos:column="30">L_ADA</name></expr>:
				<return pos:line="886" pos:column="33">return <expr><lit:literal type="boolean" pos:line="886" pos:column="40">false</lit:literal></expr>;</return>
			</case><default pos:line="887" pos:column="25">default:
				<return pos:line="888" pos:column="33">return <expr><lit:literal type="boolean" pos:line="888" pos:column="40">true</lit:literal></expr>;</return>
		</default>}</block></switch>
	}</block></function><empty_stmt pos:line="890" pos:column="10">;</empty_stmt>
<comment type="line" pos:line="891" pos:column="1">//END: Lexers and Styling</comment>

    <function><type><name pos:line="893" pos:column="5">void</name></type> <name pos:line="893" pos:column="10">defineMarker</name><parameter_list pos:line="893" pos:column="22">(<param><decl><type><name pos:line="893" pos:column="23">int</name></type> <name pos:line="893" pos:column="27">marker</name></decl></param>, <param><decl><type><name pos:line="893" pos:column="35">int</name></type> <name pos:line="893" pos:column="39">markerType</name></decl></param>, <param><decl><type><name pos:line="893" pos:column="51">COLORREF</name></type> <name pos:line="893" pos:column="60">fore</name></decl></param>, <param><decl><type><name pos:line="893" pos:column="66">COLORREF</name></type> <name pos:line="893" pos:column="75">back</name></decl></param>, <param><decl><type><name pos:line="893" pos:column="81">COLORREF</name></type> <name pos:line="893" pos:column="90">foreActive</name></decl></param>)</parameter_list> <block pos:line="893" pos:column="102">{
	    <expr_stmt><expr><call><name pos:line="894" pos:column="13">execute</name><argument_list pos:line="894" pos:column="20">(<argument><expr><name pos:line="894" pos:column="21">SCI_MARKERDEFINE</name></expr></argument>, <argument><expr><name pos:line="894" pos:column="39">marker</name></expr></argument>, <argument><expr><name pos:line="894" pos:column="47">markerType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name pos:line="895" pos:column="13">execute</name><argument_list pos:line="895" pos:column="20">(<argument><expr><name pos:line="895" pos:column="21">SCI_MARKERSETFORE</name></expr></argument>, <argument><expr><name pos:line="895" pos:column="40">marker</name></expr></argument>, <argument><expr><name pos:line="895" pos:column="48">fore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name pos:line="896" pos:column="13">execute</name><argument_list pos:line="896" pos:column="20">(<argument><expr><name pos:line="896" pos:column="21">SCI_MARKERSETBACK</name></expr></argument>, <argument><expr><name pos:line="896" pos:column="40">marker</name></expr></argument>, <argument><expr><name pos:line="896" pos:column="48">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="897" pos:column="17">execute</name><argument_list pos:line="897" pos:column="24">(<argument><expr><name pos:line="897" pos:column="25">SCI_MARKERSETBACKSELECTED</name></expr></argument>, <argument><expr><name pos:line="897" pos:column="52">marker</name></expr></argument>, <argument><expr><name pos:line="897" pos:column="60">foreActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="898" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="900" pos:column="9">int</name></type> <name pos:line="900" pos:column="13">codepage2CharSet</name><parameter_list pos:line="900" pos:column="29">()</parameter_list> <specifier pos:line="900" pos:column="32">const</specifier> <block pos:line="900" pos:column="38">{
		<switch pos:line="901" pos:column="17">switch <condition pos:line="901" pos:column="24">(<expr><name pos:line="901" pos:column="25">_codepage</name></expr>)</condition>	
		<block pos:line="902" pos:column="17">{
			<case pos:line="903" pos:column="25">case <expr><name pos:line="903" pos:column="30">CP_CHINESE_TRADITIONAL</name></expr> : <return pos:line="903" pos:column="55">return <expr><name pos:line="903" pos:column="62">SC_CHARSET_CHINESEBIG5</name></expr>;</return>
			</case><case pos:line="904" pos:column="25">case <expr><name pos:line="904" pos:column="30">CP_CHINESE_SIMPLIFIED</name></expr> : <return pos:line="904" pos:column="54">return <expr><name pos:line="904" pos:column="61">SC_CHARSET_GB2312</name></expr>;</return>
			</case><case pos:line="905" pos:column="25">case <expr><name pos:line="905" pos:column="30">CP_KOREAN</name></expr> : <return pos:line="905" pos:column="42">return <expr><name pos:line="905" pos:column="49">SC_CHARSET_HANGUL</name></expr>;</return>
			</case><case pos:line="906" pos:column="25">case <expr><name pos:line="906" pos:column="30">CP_JAPANESE</name></expr> : <return pos:line="906" pos:column="44">return <expr><name pos:line="906" pos:column="51">SC_CHARSET_SHIFTJIS</name></expr>;</return>
			</case><case pos:line="907" pos:column="25">case <expr><name pos:line="907" pos:column="30">CP_GREEK</name></expr> : <return pos:line="907" pos:column="41">return <expr><name pos:line="907" pos:column="48">SC_CHARSET_GREEK</name></expr>;</return>
			</case><default pos:line="908" pos:column="25">default : <return pos:line="908" pos:column="35">return <expr><lit:literal type="number" pos:line="908" pos:column="42">0</lit:literal></expr>;</return>
		</default>}</block></switch>
	}</block></function><empty_stmt pos:line="910" pos:column="10">;</empty_stmt>

    <function_decl><type><name><name pos:line="912" pos:column="5">pair</name><argument_list pos:line="912" pos:column="9">&lt;<argument><expr><name pos:line="912" pos:column="10">int</name></expr></argument>, <argument><expr><name pos:line="912" pos:column="15">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="912" pos:column="20">getWordRange</name><parameter_list pos:line="912" pos:column="32">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="913" pos:column="9">bool</name></type> <name pos:line="913" pos:column="14">expandWordSelection</name><parameter_list pos:line="913" pos:column="33">()</parameter_list>;</function_decl>
</protected>}</block>;</class>

<cpp:endif pos:line="916" pos:column="1">#<cpp:directive pos:line="916" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="916" pos:column="8">//SCINTILLA_EDIT_VIEW_H</comment>
</unit>
