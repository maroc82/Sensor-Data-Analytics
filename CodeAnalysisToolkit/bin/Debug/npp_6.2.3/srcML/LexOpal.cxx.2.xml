<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexOpal.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexOpal.cxx
 ** Lexer for OPAL (functional language similar to Haskell)
 ** Written by Sebastian Pipping &lt;webmaster@hartwork.org&gt;
 **/</comment>

<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef</cpp:directive> <name pos:line="25" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="26" pos:column="1">using namespace <name pos:line="26" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="29" pos:column="1">inline</specifier> <specifier pos:line="29" pos:column="8">static</specifier> <name pos:line="29" pos:column="15">void</name></type> <name pos:line="29" pos:column="20">getRange</name><parameter_list pos:line="29" pos:column="28">( <param><decl><type><name pos:line="29" pos:column="30">unsigned</name> <name pos:line="29" pos:column="39">int</name></type> <name pos:line="29" pos:column="43">start</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="50">unsigned</name> <name pos:line="29" pos:column="59">int</name></type> <name pos:line="29" pos:column="63">end</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="68">Accessor</name> <type:modifier pos:line="29" pos:column="77">&amp;</type:modifier></type> <name pos:line="29" pos:column="79">styler</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="87">char</name> <type:modifier pos:line="29" pos:column="92">*</type:modifier></type> <name pos:line="29" pos:column="94">s</name></decl></param>, <param><decl><type><name pos:line="29" pos:column="97">unsigned</name> <name pos:line="29" pos:column="106">int</name></type> <name pos:line="29" pos:column="110">len</name></decl></param> )</parameter_list>
<block pos:line="30" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">unsigned</name> <name pos:line="31" pos:column="18">int</name></type> <name pos:line="31" pos:column="22">i</name> <init pos:line="31" pos:column="24">= <expr><lit:literal type="number" pos:line="31" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="32" pos:column="9">while<condition pos:line="32" pos:column="14">( <expr><op:operator pos:line="32" pos:column="16">(</op:operator> <name pos:line="32" pos:column="18">i</name> <op:operator pos:line="32" pos:column="20">&lt;</op:operator> <name pos:line="32" pos:column="22">end</name> <op:operator pos:line="32" pos:column="26">-</op:operator> <name pos:line="32" pos:column="28">start</name> <op:operator pos:line="32" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="32" pos:column="36">1</lit:literal> <op:operator pos:line="32" pos:column="38">)</op:operator> <op:operator pos:line="32" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="32" pos:column="43">(</op:operator> <name pos:line="32" pos:column="45">i</name> <op:operator pos:line="32" pos:column="47">&lt;</op:operator> <name pos:line="32" pos:column="49">len</name> <op:operator pos:line="32" pos:column="53">-</op:operator> <lit:literal type="number" pos:line="32" pos:column="55">1</lit:literal> <op:operator pos:line="32" pos:column="57">)</op:operator></expr> )</condition>
	<block pos:line="33" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="34" pos:column="17">s</name><index pos:line="34" pos:column="18">[<expr><name pos:line="34" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="34" pos:column="22">=</op:operator> <call><name><name pos:line="34" pos:column="24">static_cast</name><argument_list pos:line="34" pos:column="35">&lt;<argument><expr><name pos:line="34" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="34" pos:column="41">( <argument><expr><name><name pos:line="34" pos:column="43">styler</name><index pos:line="34" pos:column="49">[ <expr><name pos:line="34" pos:column="51">start</name> <op:operator pos:line="34" pos:column="57">+</op:operator> <name pos:line="34" pos:column="59">i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="35" pos:column="17">i</name><op:operator pos:line="35" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name pos:line="37" pos:column="9">s</name><index pos:line="37" pos:column="10">[ <expr><name pos:line="37" pos:column="12">i</name></expr> ]</index></name> <op:operator pos:line="37" pos:column="16">=</op:operator> <lit:literal type="char" pos:line="37" pos:column="18">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="40" pos:column="1">inline</specifier> <name pos:line="40" pos:column="8">bool</name></type> <name pos:line="40" pos:column="13">HandleString</name><parameter_list pos:line="40" pos:column="25">( <param><decl><type><name pos:line="40" pos:column="27">unsigned</name> <name pos:line="40" pos:column="36">int</name> <type:modifier pos:line="40" pos:column="40">&amp;</type:modifier></type> <name pos:line="40" pos:column="42">cur</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="47">unsigned</name> <name pos:line="40" pos:column="56">int</name></type> <name pos:line="40" pos:column="60">one_too_much</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="74">Accessor</name> <type:modifier pos:line="40" pos:column="83">&amp;</type:modifier></type> <name pos:line="40" pos:column="85">styler</name></decl></param> )</parameter_list>
<block pos:line="41" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">char</name></type> <name pos:line="42" pos:column="14">ch</name></decl>;</decl_stmt>

	<comment type="line" pos:line="44" pos:column="9">// Wait for string to close</comment>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">bool</name></type> <name pos:line="45" pos:column="14">even_backslash_count</name> <init pos:line="45" pos:column="35">= <expr><lit:literal type="boolean" pos:line="45" pos:column="37">true</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="45" pos:column="43">// Without gaps in between</comment>
	<expr_stmt><expr><name pos:line="46" pos:column="9">cur</name><op:operator pos:line="46" pos:column="12">++</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="46" pos:column="16">// Skip initial quote</comment>
	<for pos:line="47" pos:column="9">for( <init pos:line="47" pos:column="14">;</init> <condition pos:line="47" pos:column="16">;</condition> <incr/>)
	<block pos:line="48" pos:column="9">{
		<if pos:line="49" pos:column="17">if<condition pos:line="49" pos:column="19">( <expr><name pos:line="49" pos:column="21">cur</name> <op:operator pos:line="49" pos:column="25">&gt;=</op:operator> <name pos:line="49" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="49" pos:column="42">
		<block pos:line="50" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="51" pos:column="25">styler</name><op:operator pos:line="51" pos:column="31">.</op:operator><name pos:line="51" pos:column="32">ColourTo</name></name><argument_list pos:line="51" pos:column="40">( <argument><expr><name pos:line="51" pos:column="42">cur</name> <op:operator pos:line="51" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="51" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="51">SCE_OPAL_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="52" pos:column="25">return <expr><lit:literal type="boolean" pos:line="52" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="52" pos:column="39">// STOP</comment>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="55" pos:column="17">ch</name> <op:operator pos:line="55" pos:column="20">=</op:operator> <call><name><name pos:line="55" pos:column="22">styler</name><op:operator pos:line="55" pos:column="28">.</op:operator><name pos:line="55" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="55" pos:column="42">( <argument><expr><name pos:line="55" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="56" pos:column="17">if<condition pos:line="56" pos:column="19">( <expr><op:operator pos:line="56" pos:column="21">(</op:operator> <name pos:line="56" pos:column="23">ch</name> <op:operator pos:line="56" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="29">'\015'</lit:literal> <op:operator pos:line="56" pos:column="36">)</op:operator> <op:operator pos:line="56" pos:column="38">||</op:operator> <op:operator pos:line="56" pos:column="41">(</op:operator> <name pos:line="56" pos:column="43">ch</name> <op:operator pos:line="56" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="49">'\012'</lit:literal> <op:operator pos:line="56" pos:column="56">)</op:operator></expr> )</condition><then pos:line="56" pos:column="59"> <comment type="line" pos:line="56" pos:column="60">// Deny multi-line strings</comment>
		<block pos:line="57" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="58" pos:column="25">styler</name><op:operator pos:line="58" pos:column="31">.</op:operator><name pos:line="58" pos:column="32">ColourTo</name></name><argument_list pos:line="58" pos:column="40">( <argument><expr><name pos:line="58" pos:column="42">cur</name> <op:operator pos:line="58" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="58" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="51">SCE_OPAL_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="59" pos:column="25">styler</name><op:operator pos:line="59" pos:column="31">.</op:operator><name pos:line="59" pos:column="32">StartSegment</name></name><argument_list pos:line="59" pos:column="44">( <argument><expr><name pos:line="59" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="60" pos:column="25">return <expr><lit:literal type="boolean" pos:line="60" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then>
		<else pos:line="62" pos:column="17">else
		<block pos:line="63" pos:column="17">{
			<if pos:line="64" pos:column="25">if<condition pos:line="64" pos:column="27">( <expr><name pos:line="64" pos:column="29">even_backslash_count</name></expr> )</condition><then pos:line="64" pos:column="51">
			<block pos:line="65" pos:column="25">{
				<if pos:line="66" pos:column="33">if<condition pos:line="66" pos:column="35">( <expr><name pos:line="66" pos:column="37">ch</name> <op:operator pos:line="66" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="43">'"'</lit:literal></expr> )</condition><then pos:line="66" pos:column="48">
				<block pos:line="67" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="68" pos:column="41">styler</name><op:operator pos:line="68" pos:column="47">.</op:operator><name pos:line="68" pos:column="48">ColourTo</name></name><argument_list pos:line="68" pos:column="56">( <argument><expr><name pos:line="68" pos:column="58">cur</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="63">SCE_OPAL_STRING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="69" pos:column="41">cur</name><op:operator pos:line="69" pos:column="44">++</op:operator></expr>;</expr_stmt>
					<if pos:line="70" pos:column="41">if<condition pos:line="70" pos:column="43">( <expr><name pos:line="70" pos:column="45">cur</name> <op:operator pos:line="70" pos:column="49">&gt;=</op:operator> <name pos:line="70" pos:column="52">one_too_much</name></expr> )</condition><then pos:line="70" pos:column="66">
					<block pos:line="71" pos:column="41">{
						<return pos:line="72" pos:column="49">return <expr><lit:literal type="boolean" pos:line="72" pos:column="56">false</lit:literal></expr>;</return> <comment type="line" pos:line="72" pos:column="63">// STOP</comment>
					}</block></then>
					<else pos:line="74" pos:column="41">else
					<block pos:line="75" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="76" pos:column="49">styler</name><op:operator pos:line="76" pos:column="55">.</op:operator><name pos:line="76" pos:column="56">StartSegment</name></name><argument_list pos:line="76" pos:column="68">( <argument><expr><name pos:line="76" pos:column="70">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
						<return pos:line="77" pos:column="49">return <expr><lit:literal type="boolean" pos:line="77" pos:column="56">true</lit:literal></expr>;</return>
					}</block></else></if>
				}</block></then>
				<else pos:line="80" pos:column="33">else <if pos:line="80" pos:column="38">if<condition pos:line="80" pos:column="40">( <expr><name pos:line="80" pos:column="42">ch</name> <op:operator pos:line="80" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="80" pos:column="48">'\\'</lit:literal></expr> )</condition><then pos:line="80" pos:column="54">
				<block pos:line="81" pos:column="33">{
					<expr_stmt><expr><name pos:line="82" pos:column="41">even_backslash_count</name> <op:operator pos:line="82" pos:column="62">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="64">false</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then>
			<else pos:line="85" pos:column="25">else
			<block pos:line="86" pos:column="25">{
				<expr_stmt><expr><name pos:line="87" pos:column="33">even_backslash_count</name> <op:operator pos:line="87" pos:column="54">=</op:operator> <lit:literal type="boolean" pos:line="87" pos:column="56">true</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>

		<expr_stmt><expr><name pos:line="91" pos:column="17">cur</name><op:operator pos:line="91" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="95" pos:column="1">inline</specifier> <name pos:line="95" pos:column="8">bool</name></type> <name pos:line="95" pos:column="13">HandleCommentBlock</name><parameter_list pos:line="95" pos:column="31">( <param><decl><type><name pos:line="95" pos:column="33">unsigned</name> <name pos:line="95" pos:column="42">int</name> <type:modifier pos:line="95" pos:column="46">&amp;</type:modifier></type> <name pos:line="95" pos:column="48">cur</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="53">unsigned</name> <name pos:line="95" pos:column="62">int</name></type> <name pos:line="95" pos:column="66">one_too_much</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="80">Accessor</name> <type:modifier pos:line="95" pos:column="89">&amp;</type:modifier></type> <name pos:line="95" pos:column="91">styler</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="99">bool</name></type> <name pos:line="95" pos:column="104">could_fail</name></decl></param> )</parameter_list>
<block pos:line="96" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="97" pos:column="9">char</name></type> <name pos:line="97" pos:column="14">ch</name></decl>;</decl_stmt>

	<if pos:line="99" pos:column="9">if<condition pos:line="99" pos:column="11">( <expr><name pos:line="99" pos:column="13">could_fail</name></expr> )</condition><then pos:line="99" pos:column="25">
	<block pos:line="100" pos:column="9">{
		<expr_stmt><expr><name pos:line="101" pos:column="17">cur</name><op:operator pos:line="101" pos:column="20">++</op:operator></expr>;</expr_stmt>
		<if pos:line="102" pos:column="17">if<condition pos:line="102" pos:column="19">( <expr><name pos:line="102" pos:column="21">cur</name> <op:operator pos:line="102" pos:column="25">&gt;=</op:operator> <name pos:line="102" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="102" pos:column="42">
		<block pos:line="103" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="104" pos:column="25">styler</name><op:operator pos:line="104" pos:column="31">.</op:operator><name pos:line="104" pos:column="32">ColourTo</name></name><argument_list pos:line="104" pos:column="40">( <argument><expr><name pos:line="104" pos:column="42">cur</name> <op:operator pos:line="104" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="104" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="51">SCE_OPAL_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="105" pos:column="25">return <expr><lit:literal type="boolean" pos:line="105" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="105" pos:column="39">// STOP</comment>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="108" pos:column="17">ch</name> <op:operator pos:line="108" pos:column="20">=</op:operator> <call><name><name pos:line="108" pos:column="22">styler</name><op:operator pos:line="108" pos:column="28">.</op:operator><name pos:line="108" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="108" pos:column="42">( <argument><expr><name pos:line="108" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="109" pos:column="17">if<condition pos:line="109" pos:column="19">( <expr><name pos:line="109" pos:column="21">ch</name> <op:operator pos:line="109" pos:column="24">!=</op:operator> <lit:literal type="char" pos:line="109" pos:column="27">'*'</lit:literal></expr> )</condition><then pos:line="109" pos:column="32">
		<block pos:line="110" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="111" pos:column="25">styler</name><op:operator pos:line="111" pos:column="31">.</op:operator><name pos:line="111" pos:column="32">ColourTo</name></name><argument_list pos:line="111" pos:column="40">( <argument><expr><name pos:line="111" pos:column="42">cur</name> <op:operator pos:line="111" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="111" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="111" pos:column="51">SCE_OPAL_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="112" pos:column="25">styler</name><op:operator pos:line="112" pos:column="31">.</op:operator><name pos:line="112" pos:column="32">StartSegment</name></name><argument_list pos:line="112" pos:column="44">( <argument><expr><name pos:line="112" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="113" pos:column="25">return <expr><lit:literal type="boolean" pos:line="113" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>

	<comment type="line" pos:line="117" pos:column="9">// Wait for comment close</comment>
	<expr_stmt><expr><name pos:line="118" pos:column="9">cur</name><op:operator pos:line="118" pos:column="12">++</op:operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="119" pos:column="9">bool</name></type> <name pos:line="119" pos:column="14">star_found</name> <init pos:line="119" pos:column="25">= <expr><lit:literal type="boolean" pos:line="119" pos:column="27">false</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="120" pos:column="9">for( <init pos:line="120" pos:column="14">;</init> <condition pos:line="120" pos:column="16">;</condition> <incr/>)
	<block pos:line="121" pos:column="9">{
		<if pos:line="122" pos:column="17">if<condition pos:line="122" pos:column="19">( <expr><name pos:line="122" pos:column="21">cur</name> <op:operator pos:line="122" pos:column="25">&gt;=</op:operator> <name pos:line="122" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="122" pos:column="42">
		<block pos:line="123" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="124" pos:column="25">styler</name><op:operator pos:line="124" pos:column="31">.</op:operator><name pos:line="124" pos:column="32">ColourTo</name></name><argument_list pos:line="124" pos:column="40">( <argument><expr><name pos:line="124" pos:column="42">cur</name> <op:operator pos:line="124" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="124" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="124" pos:column="51">SCE_OPAL_COMMENT_BLOCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="125" pos:column="25">return <expr><lit:literal type="boolean" pos:line="125" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="125" pos:column="39">// STOP</comment>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="128" pos:column="17">ch</name> <op:operator pos:line="128" pos:column="20">=</op:operator> <call><name><name pos:line="128" pos:column="22">styler</name><op:operator pos:line="128" pos:column="28">.</op:operator><name pos:line="128" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="128" pos:column="42">( <argument><expr><name pos:line="128" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="129" pos:column="17">if<condition pos:line="129" pos:column="19">( <expr><name pos:line="129" pos:column="21">star_found</name></expr> )</condition><then pos:line="129" pos:column="33">
		<block pos:line="130" pos:column="17">{
			<if pos:line="131" pos:column="25">if<condition pos:line="131" pos:column="27">( <expr><name pos:line="131" pos:column="29">ch</name> <op:operator pos:line="131" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="35">'/'</lit:literal></expr> )</condition><then pos:line="131" pos:column="40">
			<block pos:line="132" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">styler</name><op:operator pos:line="133" pos:column="39">.</op:operator><name pos:line="133" pos:column="40">ColourTo</name></name><argument_list pos:line="133" pos:column="48">( <argument><expr><name pos:line="133" pos:column="50">cur</name></expr></argument>, <argument><expr><name pos:line="133" pos:column="55">SCE_OPAL_COMMENT_BLOCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="134" pos:column="33">cur</name><op:operator pos:line="134" pos:column="36">++</op:operator></expr>;</expr_stmt>
				<if pos:line="135" pos:column="33">if<condition pos:line="135" pos:column="35">( <expr><name pos:line="135" pos:column="37">cur</name> <op:operator pos:line="135" pos:column="41">&gt;=</op:operator> <name pos:line="135" pos:column="44">one_too_much</name></expr> )</condition><then pos:line="135" pos:column="58">
				<block pos:line="136" pos:column="33">{
					<return pos:line="137" pos:column="41">return <expr><lit:literal type="boolean" pos:line="137" pos:column="48">false</lit:literal></expr>;</return> <comment type="line" pos:line="137" pos:column="55">// STOP</comment>
				}</block></then>
				<else pos:line="139" pos:column="33">else
				<block pos:line="140" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="141" pos:column="41">styler</name><op:operator pos:line="141" pos:column="47">.</op:operator><name pos:line="141" pos:column="48">StartSegment</name></name><argument_list pos:line="141" pos:column="60">( <argument><expr><name pos:line="141" pos:column="62">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
					<return pos:line="142" pos:column="41">return <expr><lit:literal type="boolean" pos:line="142" pos:column="48">true</lit:literal></expr>;</return>
				}</block></else></if>
			}</block></then>
			<else pos:line="145" pos:column="25">else <if pos:line="145" pos:column="30">if<condition pos:line="145" pos:column="32">( <expr><name pos:line="145" pos:column="34">ch</name> <op:operator pos:line="145" pos:column="37">!=</op:operator> <lit:literal type="char" pos:line="145" pos:column="40">'*'</lit:literal></expr> )</condition><then pos:line="145" pos:column="45">
			<block pos:line="146" pos:column="25">{
				<expr_stmt><expr><name pos:line="147" pos:column="33">star_found</name> <op:operator pos:line="147" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="147" pos:column="46">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then>
		<else pos:line="150" pos:column="17">else <if pos:line="150" pos:column="22">if<condition pos:line="150" pos:column="24">( <expr><name pos:line="150" pos:column="26">ch</name> <op:operator pos:line="150" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="150" pos:column="32">'*'</lit:literal></expr> )</condition><then pos:line="150" pos:column="37">
		<block pos:line="151" pos:column="17">{
			<expr_stmt><expr><name pos:line="152" pos:column="25">star_found</name> <op:operator pos:line="152" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="152" pos:column="38">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if></else></if>
		<expr_stmt><expr><name pos:line="154" pos:column="17">cur</name><op:operator pos:line="154" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="158" pos:column="1">inline</specifier> <name pos:line="158" pos:column="8">bool</name></type> <name pos:line="158" pos:column="13">HandleCommentLine</name><parameter_list pos:line="158" pos:column="30">( <param><decl><type><name pos:line="158" pos:column="32">unsigned</name> <name pos:line="158" pos:column="41">int</name> <type:modifier pos:line="158" pos:column="45">&amp;</type:modifier></type> <name pos:line="158" pos:column="47">cur</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="52">unsigned</name> <name pos:line="158" pos:column="61">int</name></type> <name pos:line="158" pos:column="65">one_too_much</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="79">Accessor</name> <type:modifier pos:line="158" pos:column="88">&amp;</type:modifier></type> <name pos:line="158" pos:column="90">styler</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="98">bool</name></type> <name pos:line="158" pos:column="103">could_fail</name></decl></param> )</parameter_list>
<block pos:line="159" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">char</name></type> <name pos:line="160" pos:column="14">ch</name></decl>;</decl_stmt>

	<if pos:line="162" pos:column="9">if<condition pos:line="162" pos:column="11">( <expr><name pos:line="162" pos:column="13">could_fail</name></expr> )</condition><then pos:line="162" pos:column="25">
	<block pos:line="163" pos:column="9">{
		<expr_stmt><expr><name pos:line="164" pos:column="17">cur</name><op:operator pos:line="164" pos:column="20">++</op:operator></expr>;</expr_stmt>
		<if pos:line="165" pos:column="17">if<condition pos:line="165" pos:column="19">( <expr><name pos:line="165" pos:column="21">cur</name> <op:operator pos:line="165" pos:column="25">&gt;=</op:operator> <name pos:line="165" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="165" pos:column="42">
		<block pos:line="166" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="167" pos:column="25">styler</name><op:operator pos:line="167" pos:column="31">.</op:operator><name pos:line="167" pos:column="32">ColourTo</name></name><argument_list pos:line="167" pos:column="40">( <argument><expr><name pos:line="167" pos:column="42">cur</name> <op:operator pos:line="167" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="167" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="167" pos:column="51">SCE_OPAL_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="168" pos:column="25">return <expr><lit:literal type="boolean" pos:line="168" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="168" pos:column="39">// STOP</comment>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="171" pos:column="17">ch</name> <op:operator pos:line="171" pos:column="20">=</op:operator> <call><name><name pos:line="171" pos:column="22">styler</name><op:operator pos:line="171" pos:column="28">.</op:operator><name pos:line="171" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="171" pos:column="42">( <argument><expr><name pos:line="171" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="172" pos:column="17">if<condition pos:line="172" pos:column="19">( <expr><name pos:line="172" pos:column="21">ch</name> <op:operator pos:line="172" pos:column="24">!=</op:operator> <lit:literal type="char" pos:line="172" pos:column="27">'-'</lit:literal></expr> )</condition><then pos:line="172" pos:column="32">
		<block pos:line="173" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="174" pos:column="25">styler</name><op:operator pos:line="174" pos:column="31">.</op:operator><name pos:line="174" pos:column="32">ColourTo</name></name><argument_list pos:line="174" pos:column="40">( <argument><expr><name pos:line="174" pos:column="42">cur</name> <op:operator pos:line="174" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="174" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="174" pos:column="51">SCE_OPAL_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="175" pos:column="25">styler</name><op:operator pos:line="175" pos:column="31">.</op:operator><name pos:line="175" pos:column="32">StartSegment</name></name><argument_list pos:line="175" pos:column="44">( <argument><expr><name pos:line="175" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="176" pos:column="25">return <expr><lit:literal type="boolean" pos:line="176" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="179" pos:column="17">cur</name><op:operator pos:line="179" pos:column="20">++</op:operator></expr>;</expr_stmt>
		<if pos:line="180" pos:column="17">if<condition pos:line="180" pos:column="19">( <expr><name pos:line="180" pos:column="21">cur</name> <op:operator pos:line="180" pos:column="25">&gt;=</op:operator> <name pos:line="180" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="180" pos:column="42">
		<block pos:line="181" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="182" pos:column="25">styler</name><op:operator pos:line="182" pos:column="31">.</op:operator><name pos:line="182" pos:column="32">ColourTo</name></name><argument_list pos:line="182" pos:column="40">( <argument><expr><name pos:line="182" pos:column="42">cur</name> <op:operator pos:line="182" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="182" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="51">SCE_OPAL_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="183" pos:column="25">return <expr><lit:literal type="boolean" pos:line="183" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="183" pos:column="39">// STOP</comment>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="186" pos:column="17">ch</name> <op:operator pos:line="186" pos:column="20">=</op:operator> <call><name><name pos:line="186" pos:column="22">styler</name><op:operator pos:line="186" pos:column="28">.</op:operator><name pos:line="186" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="186" pos:column="42">( <argument><expr><name pos:line="186" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="187" pos:column="17">if<condition pos:line="187" pos:column="19">( <expr><op:operator pos:line="187" pos:column="21">(</op:operator> <name pos:line="187" pos:column="23">ch</name> <op:operator pos:line="187" pos:column="26">!=</op:operator> <lit:literal type="char" pos:line="187" pos:column="29">' '</lit:literal> <op:operator pos:line="187" pos:column="33">)</op:operator> <op:operator pos:line="187" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="187" pos:column="38">(</op:operator> <name pos:line="187" pos:column="40">ch</name> <op:operator pos:line="187" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="187" pos:column="46">'\t'</lit:literal> <op:operator pos:line="187" pos:column="51">)</op:operator></expr> )</condition><then pos:line="187" pos:column="54">
		<block pos:line="188" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="189" pos:column="25">styler</name><op:operator pos:line="189" pos:column="31">.</op:operator><name pos:line="189" pos:column="32">ColourTo</name></name><argument_list pos:line="189" pos:column="40">( <argument><expr><name pos:line="189" pos:column="42">cur</name> <op:operator pos:line="189" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="189" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="189" pos:column="51">SCE_OPAL_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="190" pos:column="25">styler</name><op:operator pos:line="190" pos:column="31">.</op:operator><name pos:line="190" pos:column="32">StartSegment</name></name><argument_list pos:line="190" pos:column="44">( <argument><expr><name pos:line="190" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="191" pos:column="25">return <expr><lit:literal type="boolean" pos:line="191" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>

	<comment type="line" pos:line="195" pos:column="9">// Wait for end of line</comment>
	<decl_stmt><decl><type><name pos:line="196" pos:column="9">bool</name></type> <name pos:line="196" pos:column="14">fifteen_found</name> <init pos:line="196" pos:column="28">= <expr><lit:literal type="boolean" pos:line="196" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="198" pos:column="9">for( <init pos:line="198" pos:column="14">;</init> <condition pos:line="198" pos:column="16">;</condition> <incr/>)
	<block pos:line="199" pos:column="9">{
		<expr_stmt><expr><name pos:line="200" pos:column="17">cur</name><op:operator pos:line="200" pos:column="20">++</op:operator></expr>;</expr_stmt>

		<if pos:line="202" pos:column="17">if<condition pos:line="202" pos:column="19">( <expr><name pos:line="202" pos:column="21">cur</name> <op:operator pos:line="202" pos:column="25">&gt;=</op:operator> <name pos:line="202" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="202" pos:column="42">
		<block pos:line="203" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="204" pos:column="25">styler</name><op:operator pos:line="204" pos:column="31">.</op:operator><name pos:line="204" pos:column="32">ColourTo</name></name><argument_list pos:line="204" pos:column="40">( <argument><expr><name pos:line="204" pos:column="42">cur</name> <op:operator pos:line="204" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="204" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="204" pos:column="51">SCE_OPAL_COMMENT_LINE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="205" pos:column="25">return <expr><lit:literal type="boolean" pos:line="205" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="205" pos:column="39">// STOP</comment>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="208" pos:column="17">ch</name> <op:operator pos:line="208" pos:column="20">=</op:operator> <call><name><name pos:line="208" pos:column="22">styler</name><op:operator pos:line="208" pos:column="28">.</op:operator><name pos:line="208" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="208" pos:column="42">( <argument><expr><name pos:line="208" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="209" pos:column="17">if<condition pos:line="209" pos:column="19">( <expr><name pos:line="209" pos:column="21">fifteen_found</name></expr> )</condition><then pos:line="209" pos:column="36">
		<block pos:line="210" pos:column="17">{
<comment type="block" pos:line="211" pos:column="1">/*
			if( ch == '\012' )
			{
				// One newline on Windows (015, 012)
			}
			else
			{
				// One newline on MAC (015) and another char
			}
*/</comment>
			<expr_stmt><expr><name pos:line="221" pos:column="25">cur</name><op:operator pos:line="221" pos:column="28">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="222" pos:column="25">styler</name><op:operator pos:line="222" pos:column="31">.</op:operator><name pos:line="222" pos:column="32">ColourTo</name></name><argument_list pos:line="222" pos:column="40">( <argument><expr><name pos:line="222" pos:column="42">cur</name> <op:operator pos:line="222" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="222" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="51">SCE_OPAL_COMMENT_LINE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="223" pos:column="25">styler</name><op:operator pos:line="223" pos:column="31">.</op:operator><name pos:line="223" pos:column="32">StartSegment</name></name><argument_list pos:line="223" pos:column="44">( <argument><expr><name pos:line="223" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="224" pos:column="25">return <expr><lit:literal type="boolean" pos:line="224" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then>
		<else pos:line="226" pos:column="17">else
		<block pos:line="227" pos:column="17">{
			<if pos:line="228" pos:column="25">if<condition pos:line="228" pos:column="27">( <expr><name pos:line="228" pos:column="29">ch</name> <op:operator pos:line="228" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="228" pos:column="35">'\015'</lit:literal></expr> )</condition><then pos:line="228" pos:column="43">
			<block pos:line="229" pos:column="25">{
				<expr_stmt><expr><name pos:line="230" pos:column="33">fifteen_found</name> <op:operator pos:line="230" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="230" pos:column="49">true</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="232" pos:column="25">else <if pos:line="232" pos:column="30">if<condition pos:line="232" pos:column="32">( <expr><name pos:line="232" pos:column="34">ch</name> <op:operator pos:line="232" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="232" pos:column="40">'\012'</lit:literal></expr> )</condition><then pos:line="232" pos:column="48">
			<block pos:line="233" pos:column="25">{
				<comment type="line" pos:line="234" pos:column="33">// One newline on Linux (012)</comment>
				<expr_stmt><expr><call><name><name pos:line="235" pos:column="33">styler</name><op:operator pos:line="235" pos:column="39">.</op:operator><name pos:line="235" pos:column="40">ColourTo</name></name><argument_list pos:line="235" pos:column="48">( <argument><expr><name pos:line="235" pos:column="50">cur</name> <op:operator pos:line="235" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="235" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name pos:line="235" pos:column="59">SCE_OPAL_COMMENT_LINE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="236" pos:column="33">styler</name><op:operator pos:line="236" pos:column="39">.</op:operator><name pos:line="236" pos:column="40">StartSegment</name></name><argument_list pos:line="236" pos:column="52">( <argument><expr><name pos:line="236" pos:column="54">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<return pos:line="237" pos:column="33">return <expr><lit:literal type="boolean" pos:line="237" pos:column="40">true</lit:literal></expr>;</return>
			}</block></then></if></else></if>
		}</block></else></if>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="243" pos:column="1">inline</specifier> <name pos:line="243" pos:column="8">bool</name></type> <name pos:line="243" pos:column="13">HandlePar</name><parameter_list pos:line="243" pos:column="22">( <param><decl><type><name pos:line="243" pos:column="24">unsigned</name> <name pos:line="243" pos:column="33">int</name> <type:modifier pos:line="243" pos:column="37">&amp;</type:modifier></type> <name pos:line="243" pos:column="39">cur</name></decl></param>, <param><decl><type><name pos:line="243" pos:column="44">Accessor</name> <type:modifier pos:line="243" pos:column="53">&amp;</type:modifier></type> <name pos:line="243" pos:column="55">styler</name></decl></param> )</parameter_list>
<block pos:line="244" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="245" pos:column="9">styler</name><op:operator pos:line="245" pos:column="15">.</op:operator><name pos:line="245" pos:column="16">ColourTo</name></name><argument_list pos:line="245" pos:column="24">( <argument><expr><name pos:line="245" pos:column="26">cur</name></expr></argument>, <argument><expr><name pos:line="245" pos:column="31">SCE_OPAL_PAR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="247" pos:column="9">cur</name><op:operator pos:line="247" pos:column="12">++</op:operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="249" pos:column="9">styler</name><op:operator pos:line="249" pos:column="15">.</op:operator><name pos:line="249" pos:column="16">StartSegment</name></name><argument_list pos:line="249" pos:column="28">( <argument><expr><name pos:line="249" pos:column="30">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return pos:line="250" pos:column="9">return <expr><lit:literal type="boolean" pos:line="250" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="253" pos:column="1">inline</specifier> <name pos:line="253" pos:column="8">bool</name></type> <name pos:line="253" pos:column="13">HandleSpace</name><parameter_list pos:line="253" pos:column="24">( <param><decl><type><name pos:line="253" pos:column="26">unsigned</name> <name pos:line="253" pos:column="35">int</name> <type:modifier pos:line="253" pos:column="39">&amp;</type:modifier></type> <name pos:line="253" pos:column="41">cur</name></decl></param>, <param><decl><type><name pos:line="253" pos:column="46">unsigned</name> <name pos:line="253" pos:column="55">int</name></type> <name pos:line="253" pos:column="59">one_too_much</name></decl></param>, <param><decl><type><name pos:line="253" pos:column="73">Accessor</name> <type:modifier pos:line="253" pos:column="82">&amp;</type:modifier></type> <name pos:line="253" pos:column="84">styler</name></decl></param> )</parameter_list>
<block pos:line="254" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="255" pos:column="9">char</name></type> <name pos:line="255" pos:column="14">ch</name></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="257" pos:column="9">cur</name><op:operator pos:line="257" pos:column="12">++</op:operator></expr>;</expr_stmt>
	<for pos:line="258" pos:column="9">for( <init pos:line="258" pos:column="14">;</init> <condition pos:line="258" pos:column="16">;</condition> <incr/>)
	<block pos:line="259" pos:column="9">{
		<if pos:line="260" pos:column="17">if<condition pos:line="260" pos:column="19">( <expr><name pos:line="260" pos:column="21">cur</name> <op:operator pos:line="260" pos:column="25">&gt;=</op:operator> <name pos:line="260" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="260" pos:column="42">
		<block pos:line="261" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="262" pos:column="25">styler</name><op:operator pos:line="262" pos:column="31">.</op:operator><name pos:line="262" pos:column="32">ColourTo</name></name><argument_list pos:line="262" pos:column="40">( <argument><expr><name pos:line="262" pos:column="42">cur</name> <op:operator pos:line="262" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="262" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="262" pos:column="51">SCE_OPAL_SPACE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="263" pos:column="25">return <expr><lit:literal type="boolean" pos:line="263" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="266" pos:column="17">ch</name> <op:operator pos:line="266" pos:column="20">=</op:operator> <call><name><name pos:line="266" pos:column="22">styler</name><op:operator pos:line="266" pos:column="28">.</op:operator><name pos:line="266" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="266" pos:column="42">( <argument><expr><name pos:line="266" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<switch pos:line="267" pos:column="17">switch<condition pos:line="267" pos:column="23">( <expr><name pos:line="267" pos:column="25">ch</name></expr> )</condition>
		<block pos:line="268" pos:column="17">{
		<case pos:line="269" pos:column="17">case <expr><lit:literal type="char" pos:line="269" pos:column="22">' '</lit:literal></expr>:
		</case><case pos:line="270" pos:column="17">case <expr><lit:literal type="char" pos:line="270" pos:column="22">'\t'</lit:literal></expr>:
		</case><case pos:line="271" pos:column="17">case <expr><lit:literal type="char" pos:line="271" pos:column="22">'\015'</lit:literal></expr>:
		</case><case pos:line="272" pos:column="17">case <expr><lit:literal type="char" pos:line="272" pos:column="22">'\012'</lit:literal></expr>:
			<expr_stmt><expr><name pos:line="273" pos:column="25">cur</name><op:operator pos:line="273" pos:column="28">++</op:operator></expr>;</expr_stmt>
			<break pos:line="274" pos:column="25">break;</break>

		</case><default pos:line="276" pos:column="17">default:
			<expr_stmt><expr><call><name><name pos:line="277" pos:column="25">styler</name><op:operator pos:line="277" pos:column="31">.</op:operator><name pos:line="277" pos:column="32">ColourTo</name></name><argument_list pos:line="277" pos:column="40">( <argument><expr><name pos:line="277" pos:column="42">cur</name> <op:operator pos:line="277" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="277" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="277" pos:column="51">SCE_OPAL_SPACE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="278" pos:column="25">styler</name><op:operator pos:line="278" pos:column="31">.</op:operator><name pos:line="278" pos:column="32">StartSegment</name></name><argument_list pos:line="278" pos:column="44">( <argument><expr><name pos:line="278" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="279" pos:column="25">return <expr><lit:literal type="boolean" pos:line="279" pos:column="32">true</lit:literal></expr>;</return>
		</default>}</block></switch>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="284" pos:column="1">inline</specifier> <name pos:line="284" pos:column="8">bool</name></type> <name pos:line="284" pos:column="13">HandleInteger</name><parameter_list pos:line="284" pos:column="26">( <param><decl><type><name pos:line="284" pos:column="28">unsigned</name> <name pos:line="284" pos:column="37">int</name> <type:modifier pos:line="284" pos:column="41">&amp;</type:modifier></type> <name pos:line="284" pos:column="43">cur</name></decl></param>, <param><decl><type><name pos:line="284" pos:column="48">unsigned</name> <name pos:line="284" pos:column="57">int</name></type> <name pos:line="284" pos:column="61">one_too_much</name></decl></param>, <param><decl><type><name pos:line="284" pos:column="75">Accessor</name> <type:modifier pos:line="284" pos:column="84">&amp;</type:modifier></type> <name pos:line="284" pos:column="86">styler</name></decl></param> )</parameter_list>
<block pos:line="285" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="286" pos:column="9">char</name></type> <name pos:line="286" pos:column="14">ch</name></decl>;</decl_stmt>

	<for pos:line="288" pos:column="9">for( <init pos:line="288" pos:column="14">;</init> <condition pos:line="288" pos:column="16">;</condition> <incr/>)
	<block pos:line="289" pos:column="9">{
		<expr_stmt><expr><name pos:line="290" pos:column="17">cur</name><op:operator pos:line="290" pos:column="20">++</op:operator></expr>;</expr_stmt>
		<if pos:line="291" pos:column="17">if<condition pos:line="291" pos:column="19">( <expr><name pos:line="291" pos:column="21">cur</name> <op:operator pos:line="291" pos:column="25">&gt;=</op:operator> <name pos:line="291" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="291" pos:column="42">
		<block pos:line="292" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="293" pos:column="25">styler</name><op:operator pos:line="293" pos:column="31">.</op:operator><name pos:line="293" pos:column="32">ColourTo</name></name><argument_list pos:line="293" pos:column="40">( <argument><expr><name pos:line="293" pos:column="42">cur</name> <op:operator pos:line="293" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="293" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="293" pos:column="51">SCE_OPAL_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="294" pos:column="25">return <expr><lit:literal type="boolean" pos:line="294" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="294" pos:column="39">// STOP</comment>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="297" pos:column="17">ch</name> <op:operator pos:line="297" pos:column="20">=</op:operator> <call><name><name pos:line="297" pos:column="22">styler</name><op:operator pos:line="297" pos:column="28">.</op:operator><name pos:line="297" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="297" pos:column="42">( <argument><expr><name pos:line="297" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="298" pos:column="17">if<condition pos:line="298" pos:column="19">( <expr><op:operator pos:line="298" pos:column="21">!</op:operator><op:operator pos:line="298" pos:column="22">(</op:operator> <call><name pos:line="298" pos:column="24">isascii</name><argument_list pos:line="298" pos:column="31">( <argument><expr><name pos:line="298" pos:column="33">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="298" pos:column="38">&amp;&amp;</op:operator> <call><name pos:line="298" pos:column="41">isdigit</name><argument_list pos:line="298" pos:column="48">( <argument><expr><name pos:line="298" pos:column="50">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="298" pos:column="55">)</op:operator></expr> )</condition><then pos:line="298" pos:column="58">
		<block pos:line="299" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="300" pos:column="25">styler</name><op:operator pos:line="300" pos:column="31">.</op:operator><name pos:line="300" pos:column="32">ColourTo</name></name><argument_list pos:line="300" pos:column="40">( <argument><expr><name pos:line="300" pos:column="42">cur</name> <op:operator pos:line="300" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="300" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="300" pos:column="51">SCE_OPAL_INTEGER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="301" pos:column="25">styler</name><op:operator pos:line="301" pos:column="31">.</op:operator><name pos:line="301" pos:column="32">StartSegment</name></name><argument_list pos:line="301" pos:column="44">( <argument><expr><name pos:line="301" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="302" pos:column="25">return <expr><lit:literal type="boolean" pos:line="302" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="307" pos:column="1">inline</specifier> <name pos:line="307" pos:column="8">bool</name></type> <name pos:line="307" pos:column="13">HandleWord</name><parameter_list pos:line="307" pos:column="23">( <param><decl><type><name pos:line="307" pos:column="25">unsigned</name> <name pos:line="307" pos:column="34">int</name> <type:modifier pos:line="307" pos:column="38">&amp;</type:modifier></type> <name pos:line="307" pos:column="40">cur</name></decl></param>, <param><decl><type><name pos:line="307" pos:column="45">unsigned</name> <name pos:line="307" pos:column="54">int</name></type> <name pos:line="307" pos:column="58">one_too_much</name></decl></param>, <param><decl><type><name pos:line="307" pos:column="72">Accessor</name> <type:modifier pos:line="307" pos:column="81">&amp;</type:modifier></type> <name pos:line="307" pos:column="83">styler</name></decl></param>, <param><decl><type><name pos:line="307" pos:column="91">WordList</name> <type:modifier pos:line="307" pos:column="100">*</type:modifier></type> <name><name pos:line="307" pos:column="102">keywordlists</name><index pos:line="307" pos:column="114">[]</index></name></decl></param> )</parameter_list>
<block pos:line="308" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="309" pos:column="9">char</name></type> <name pos:line="309" pos:column="14">ch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="310" pos:column="9">const</specifier> <name pos:line="310" pos:column="15">unsigned</name> <name pos:line="310" pos:column="24">int</name></type> <name pos:line="310" pos:column="28">beg</name> <init pos:line="310" pos:column="32">= <expr><name pos:line="310" pos:column="34">cur</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="312" pos:column="9">cur</name><op:operator pos:line="312" pos:column="12">++</op:operator></expr>;</expr_stmt>
	<for pos:line="313" pos:column="9">for( <init pos:line="313" pos:column="14">;</init> <condition pos:line="313" pos:column="16">;</condition> <incr/>)
	<block pos:line="314" pos:column="9">{
		<expr_stmt><expr><name pos:line="315" pos:column="17">ch</name> <op:operator pos:line="315" pos:column="20">=</op:operator> <call><name><name pos:line="315" pos:column="22">styler</name><op:operator pos:line="315" pos:column="28">.</op:operator><name pos:line="315" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="315" pos:column="42">( <argument><expr><name pos:line="315" pos:column="44">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="316" pos:column="17">if<condition pos:line="316" pos:column="19">( <expr><op:operator pos:line="316" pos:column="21">(</op:operator> <name pos:line="316" pos:column="23">ch</name> <op:operator pos:line="316" pos:column="26">!=</op:operator> <lit:literal type="char" pos:line="316" pos:column="29">'_'</lit:literal> <op:operator pos:line="316" pos:column="33">)</op:operator> <op:operator pos:line="316" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="316" pos:column="38">(</op:operator> <name pos:line="316" pos:column="40">ch</name> <op:operator pos:line="316" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="316" pos:column="46">'-'</lit:literal> <op:operator pos:line="316" pos:column="50">)</op:operator> <op:operator pos:line="316" pos:column="52">&amp;&amp;</op:operator>
			<op:operator pos:line="317" pos:column="25">!</op:operator><op:operator pos:line="317" pos:column="26">(</op:operator> <call><name pos:line="317" pos:column="28">isascii</name><argument_list pos:line="317" pos:column="35">( <argument><expr><name pos:line="317" pos:column="37">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="317" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="317" pos:column="45">(</op:operator> <call><name pos:line="317" pos:column="47">islower</name><argument_list pos:line="317" pos:column="54">( <argument><expr><name pos:line="317" pos:column="56">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="317" pos:column="61">||</op:operator> <call><name pos:line="317" pos:column="64">isupper</name><argument_list pos:line="317" pos:column="71">( <argument><expr><name pos:line="317" pos:column="73">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="317" pos:column="78">||</op:operator> <call><name pos:line="317" pos:column="81">isdigit</name><argument_list pos:line="317" pos:column="88">( <argument><expr><name pos:line="317" pos:column="90">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="317" pos:column="95">)</op:operator> <op:operator pos:line="317" pos:column="97">)</op:operator></expr> )</condition><then pos:line="317" pos:column="100"> <break pos:line="317" pos:column="101">break;</break></then></if>

		<expr_stmt><expr><name pos:line="319" pos:column="17">cur</name><op:operator pos:line="319" pos:column="20">++</op:operator></expr>;</expr_stmt>
		<if pos:line="320" pos:column="17">if<condition pos:line="320" pos:column="19">( <expr><name pos:line="320" pos:column="21">cur</name> <op:operator pos:line="320" pos:column="25">&gt;=</op:operator> <name pos:line="320" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="320" pos:column="42">
		<block pos:line="321" pos:column="17">{
			<break pos:line="322" pos:column="25">break;</break>
		}</block></then></if>
	}</block></for>

	<decl_stmt><decl><type><specifier pos:line="326" pos:column="9">const</specifier> <name pos:line="326" pos:column="15">int</name></type> <name pos:line="326" pos:column="19">ide_len</name> <init pos:line="326" pos:column="27">= <expr><name pos:line="326" pos:column="29">cur</name> <op:operator pos:line="326" pos:column="33">-</op:operator> <name pos:line="326" pos:column="35">beg</name> <op:operator pos:line="326" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="326" pos:column="41">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="327" pos:column="9">char</name> <type:modifier pos:line="327" pos:column="14">*</type:modifier></type> <name pos:line="327" pos:column="16">ide</name> <init pos:line="327" pos:column="20">= <expr><op:operator pos:line="327" pos:column="22">new</op:operator> <name><name pos:line="327" pos:column="26">char</name><index pos:line="327" pos:column="30">[ <expr><name pos:line="327" pos:column="32">ide_len</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="328" pos:column="9">getRange</name><argument_list pos:line="328" pos:column="17">( <argument><expr><name pos:line="328" pos:column="19">beg</name></expr></argument>, <argument><expr><name pos:line="328" pos:column="24">cur</name></expr></argument>, <argument><expr><name pos:line="328" pos:column="29">styler</name></expr></argument>, <argument><expr><name pos:line="328" pos:column="37">ide</name></expr></argument>, <argument><expr><name pos:line="328" pos:column="42">ide_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="330" pos:column="9">WordList</name> <type:modifier pos:line="330" pos:column="18">&amp;</type:modifier></type> <name pos:line="330" pos:column="20">keywords</name>    <init pos:line="330" pos:column="32">= <expr><op:operator pos:line="330" pos:column="34">*</op:operator><name><name pos:line="330" pos:column="35">keywordlists</name><index pos:line="330" pos:column="47">[ <expr><lit:literal type="number" pos:line="330" pos:column="49">0</lit:literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="331" pos:column="9">WordList</name> <type:modifier pos:line="331" pos:column="18">&amp;</type:modifier></type> <name pos:line="331" pos:column="20">classwords</name>  <init pos:line="331" pos:column="32">= <expr><op:operator pos:line="331" pos:column="34">*</op:operator><name><name pos:line="331" pos:column="35">keywordlists</name><index pos:line="331" pos:column="47">[ <expr><lit:literal type="number" pos:line="331" pos:column="49">1</lit:literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

	<if pos:line="333" pos:column="9">if<condition pos:line="333" pos:column="11">( <expr><call><name><name pos:line="333" pos:column="13">keywords</name><op:operator pos:line="333" pos:column="21">.</op:operator><name pos:line="333" pos:column="22">InList</name></name><argument_list pos:line="333" pos:column="28">( <argument><expr><name pos:line="333" pos:column="30">ide</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="333" pos:column="37"> <comment type="line" pos:line="333" pos:column="38">// Keyword</comment>
	<block pos:line="334" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="335" pos:column="17">delete</op:operator> <index pos:line="335" pos:column="24">[]</index> <name pos:line="335" pos:column="27">ide</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name pos:line="337" pos:column="17">styler</name><op:operator pos:line="337" pos:column="23">.</op:operator><name pos:line="337" pos:column="24">ColourTo</name></name><argument_list pos:line="337" pos:column="32">( <argument><expr><name pos:line="337" pos:column="34">cur</name> <op:operator pos:line="337" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="337" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="337" pos:column="43">SCE_OPAL_KEYWORD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="338" pos:column="17">if<condition pos:line="338" pos:column="19">( <expr><name pos:line="338" pos:column="21">cur</name> <op:operator pos:line="338" pos:column="25">&gt;=</op:operator> <name pos:line="338" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="338" pos:column="42">
		<block pos:line="339" pos:column="17">{
			<return pos:line="340" pos:column="25">return <expr><lit:literal type="boolean" pos:line="340" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="340" pos:column="39">// STOP</comment>
		}</block></then>
		<else pos:line="342" pos:column="17">else
		<block pos:line="343" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="344" pos:column="25">styler</name><op:operator pos:line="344" pos:column="31">.</op:operator><name pos:line="344" pos:column="32">StartSegment</name></name><argument_list pos:line="344" pos:column="44">( <argument><expr><name pos:line="344" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="345" pos:column="25">return <expr><lit:literal type="boolean" pos:line="345" pos:column="32">true</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></then>
	<else pos:line="348" pos:column="9">else <if pos:line="348" pos:column="14">if<condition pos:line="348" pos:column="16">( <expr><call><name><name pos:line="348" pos:column="18">classwords</name><op:operator pos:line="348" pos:column="28">.</op:operator><name pos:line="348" pos:column="29">InList</name></name><argument_list pos:line="348" pos:column="35">( <argument><expr><name pos:line="348" pos:column="37">ide</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="348" pos:column="44"> <comment type="line" pos:line="348" pos:column="45">// Sort</comment>
	<block pos:line="349" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="350" pos:column="17">delete</op:operator> <index pos:line="350" pos:column="24">[]</index> <name pos:line="350" pos:column="27">ide</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name pos:line="352" pos:column="17">styler</name><op:operator pos:line="352" pos:column="23">.</op:operator><name pos:line="352" pos:column="24">ColourTo</name></name><argument_list pos:line="352" pos:column="32">( <argument><expr><name pos:line="352" pos:column="34">cur</name> <op:operator pos:line="352" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="352" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="352" pos:column="43">SCE_OPAL_SORT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="353" pos:column="17">if<condition pos:line="353" pos:column="19">( <expr><name pos:line="353" pos:column="21">cur</name> <op:operator pos:line="353" pos:column="25">&gt;=</op:operator> <name pos:line="353" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="353" pos:column="42">
		<block pos:line="354" pos:column="17">{
			<return pos:line="355" pos:column="25">return <expr><lit:literal type="boolean" pos:line="355" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="355" pos:column="39">// STOP</comment>
		}</block></then>
		<else pos:line="357" pos:column="17">else
		<block pos:line="358" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="359" pos:column="25">styler</name><op:operator pos:line="359" pos:column="31">.</op:operator><name pos:line="359" pos:column="32">StartSegment</name></name><argument_list pos:line="359" pos:column="44">( <argument><expr><name pos:line="359" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="360" pos:column="25">return <expr><lit:literal type="boolean" pos:line="360" pos:column="32">true</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></then>
	<else pos:line="363" pos:column="9">else <if pos:line="363" pos:column="14">if<condition pos:line="363" pos:column="16">( <expr><op:operator pos:line="363" pos:column="18">!</op:operator><call><name pos:line="363" pos:column="19">strcmp</name><argument_list pos:line="363" pos:column="25">( <argument><expr><name pos:line="363" pos:column="27">ide</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="363" pos:column="32">"true"</lit:literal></expr></argument> )</argument_list></call> <op:operator pos:line="363" pos:column="41">||</op:operator> <op:operator pos:line="363" pos:column="44">!</op:operator><call><name pos:line="363" pos:column="45">strcmp</name><argument_list pos:line="363" pos:column="51">( <argument><expr><name pos:line="363" pos:column="53">ide</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="363" pos:column="58">"false"</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="363" pos:column="69"> <comment type="line" pos:line="363" pos:column="70">// Bool const</comment>
	<block pos:line="364" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="365" pos:column="17">delete</op:operator> <index pos:line="365" pos:column="24">[]</index> <name pos:line="365" pos:column="27">ide</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name pos:line="367" pos:column="17">styler</name><op:operator pos:line="367" pos:column="23">.</op:operator><name pos:line="367" pos:column="24">ColourTo</name></name><argument_list pos:line="367" pos:column="32">( <argument><expr><name pos:line="367" pos:column="34">cur</name> <op:operator pos:line="367" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="367" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="367" pos:column="43">SCE_OPAL_BOOL_CONST</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="368" pos:column="17">if<condition pos:line="368" pos:column="19">( <expr><name pos:line="368" pos:column="21">cur</name> <op:operator pos:line="368" pos:column="25">&gt;=</op:operator> <name pos:line="368" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="368" pos:column="42">
		<block pos:line="369" pos:column="17">{
			<return pos:line="370" pos:column="25">return <expr><lit:literal type="boolean" pos:line="370" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="370" pos:column="39">// STOP</comment>
		}</block></then>
		<else pos:line="372" pos:column="17">else
		<block pos:line="373" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="374" pos:column="25">styler</name><op:operator pos:line="374" pos:column="31">.</op:operator><name pos:line="374" pos:column="32">StartSegment</name></name><argument_list pos:line="374" pos:column="44">( <argument><expr><name pos:line="374" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="375" pos:column="25">return <expr><lit:literal type="boolean" pos:line="375" pos:column="32">true</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></then>
	<else pos:line="378" pos:column="9">else <comment type="line" pos:line="378" pos:column="14">// Unknown keyword</comment>
	<block pos:line="379" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="380" pos:column="17">delete</op:operator> <index pos:line="380" pos:column="24">[]</index> <name pos:line="380" pos:column="27">ide</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name pos:line="382" pos:column="17">styler</name><op:operator pos:line="382" pos:column="23">.</op:operator><name pos:line="382" pos:column="24">ColourTo</name></name><argument_list pos:line="382" pos:column="32">( <argument><expr><name pos:line="382" pos:column="34">cur</name> <op:operator pos:line="382" pos:column="38">-</op:operator> <lit:literal type="number" pos:line="382" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="382" pos:column="43">SCE_OPAL_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if pos:line="383" pos:column="17">if<condition pos:line="383" pos:column="19">( <expr><name pos:line="383" pos:column="21">cur</name> <op:operator pos:line="383" pos:column="25">&gt;=</op:operator> <name pos:line="383" pos:column="28">one_too_much</name></expr> )</condition><then pos:line="383" pos:column="42">
		<block pos:line="384" pos:column="17">{
			<return pos:line="385" pos:column="25">return <expr><lit:literal type="boolean" pos:line="385" pos:column="32">false</lit:literal></expr>;</return> <comment type="line" pos:line="385" pos:column="39">// STOP</comment>
		}</block></then>
		<else pos:line="387" pos:column="17">else
		<block pos:line="388" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="389" pos:column="25">styler</name><op:operator pos:line="389" pos:column="31">.</op:operator><name pos:line="389" pos:column="32">StartSegment</name></name><argument_list pos:line="389" pos:column="44">( <argument><expr><name pos:line="389" pos:column="46">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<return pos:line="390" pos:column="25">return <expr><lit:literal type="boolean" pos:line="390" pos:column="32">true</lit:literal></expr>;</return>
		}</block></else></if>
	}</block></else></if></else></if></else></if>

}</block></function>

<function><type><specifier pos:line="396" pos:column="1">inline</specifier> <name pos:line="396" pos:column="8">bool</name></type> <name pos:line="396" pos:column="13">HandleSkip</name><parameter_list pos:line="396" pos:column="23">( <param><decl><type><name pos:line="396" pos:column="25">unsigned</name> <name pos:line="396" pos:column="34">int</name> <type:modifier pos:line="396" pos:column="38">&amp;</type:modifier></type> <name pos:line="396" pos:column="40">cur</name></decl></param>, <param><decl><type><name pos:line="396" pos:column="45">unsigned</name> <name pos:line="396" pos:column="54">int</name></type> <name pos:line="396" pos:column="58">one_too_much</name></decl></param>, <param><decl><type><name pos:line="396" pos:column="72">Accessor</name> <type:modifier pos:line="396" pos:column="81">&amp;</type:modifier></type> <name pos:line="396" pos:column="83">styler</name></decl></param> )</parameter_list>
<block pos:line="397" pos:column="1">{
	<expr_stmt><expr><name pos:line="398" pos:column="9">cur</name><op:operator pos:line="398" pos:column="12">++</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="399" pos:column="9">styler</name><op:operator pos:line="399" pos:column="15">.</op:operator><name pos:line="399" pos:column="16">ColourTo</name></name><argument_list pos:line="399" pos:column="24">( <argument><expr><name pos:line="399" pos:column="26">cur</name> <op:operator pos:line="399" pos:column="30">-</op:operator> <lit:literal type="number" pos:line="399" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><name pos:line="399" pos:column="35">SCE_OPAL_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="400" pos:column="9">if<condition pos:line="400" pos:column="11">( <expr><name pos:line="400" pos:column="13">cur</name> <op:operator pos:line="400" pos:column="17">&gt;=</op:operator> <name pos:line="400" pos:column="20">one_too_much</name></expr> )</condition><then pos:line="400" pos:column="34">
	<block pos:line="401" pos:column="9">{
		<return pos:line="402" pos:column="17">return <expr><lit:literal type="boolean" pos:line="402" pos:column="24">false</lit:literal></expr>;</return> <comment type="line" pos:line="402" pos:column="31">// STOP</comment>
	}</block></then>
	<else pos:line="404" pos:column="9">else
	<block pos:line="405" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="406" pos:column="17">styler</name><op:operator pos:line="406" pos:column="23">.</op:operator><name pos:line="406" pos:column="24">StartSegment</name></name><argument_list pos:line="406" pos:column="36">( <argument><expr><name pos:line="406" pos:column="38">cur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<return pos:line="407" pos:column="17">return <expr><lit:literal type="boolean" pos:line="407" pos:column="24">true</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="411" pos:column="1">static</specifier> <name pos:line="411" pos:column="8">void</name></type> <name pos:line="411" pos:column="13">ColouriseOpalDoc</name><parameter_list pos:line="411" pos:column="29">( <param><decl><type><name pos:line="411" pos:column="31">unsigned</name> <name pos:line="411" pos:column="40">int</name></type> <name pos:line="411" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="411" pos:column="54">int</name></type> <name pos:line="411" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="411" pos:column="66">int</name></type> <name pos:line="411" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="411" pos:column="81">WordList</name> <type:modifier pos:line="411" pos:column="90">*</type:modifier></type><name><name pos:line="411" pos:column="91">keywordlists</name><index pos:line="411" pos:column="103">[]</index></name></decl></param>, <param><decl><type><name pos:line="411" pos:column="107">Accessor</name> <type:modifier pos:line="411" pos:column="116">&amp;</type:modifier></type> <name pos:line="411" pos:column="118">styler</name></decl></param> )</parameter_list>
<block pos:line="412" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="413" pos:column="9">styler</name><op:operator pos:line="413" pos:column="15">.</op:operator><name pos:line="413" pos:column="16">StartAt</name></name><argument_list pos:line="413" pos:column="23">( <argument><expr><name pos:line="413" pos:column="25">startPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="414" pos:column="9">styler</name><op:operator pos:line="414" pos:column="15">.</op:operator><name pos:line="414" pos:column="16">StartSegment</name></name><argument_list pos:line="414" pos:column="28">( <argument><expr><name pos:line="414" pos:column="30">startPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="416" pos:column="9">unsigned</name> <name pos:line="416" pos:column="18">int</name> <type:modifier pos:line="416" pos:column="22">&amp;</type:modifier></type> <name pos:line="416" pos:column="24">cur</name> <init pos:line="416" pos:column="28">= <expr><name pos:line="416" pos:column="30">startPos</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="417" pos:column="9">const</specifier> <name pos:line="417" pos:column="15">unsigned</name> <name pos:line="417" pos:column="24">int</name></type> <name pos:line="417" pos:column="28">one_too_much</name> <init pos:line="417" pos:column="41">= <expr><name pos:line="417" pos:column="43">startPos</name> <op:operator pos:line="417" pos:column="52">+</op:operator> <name pos:line="417" pos:column="54">length</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="419" pos:column="9">int</name></type> <name pos:line="419" pos:column="13">state</name> <init pos:line="419" pos:column="19">= <expr><name pos:line="419" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>

	<for pos:line="421" pos:column="9">for( <init pos:line="421" pos:column="14">;</init> <condition pos:line="421" pos:column="16">;</condition> <incr/>)
	<block pos:line="422" pos:column="9">{
		<switch pos:line="423" pos:column="17">switch<condition pos:line="423" pos:column="23">( <expr><name pos:line="423" pos:column="25">state</name></expr> )</condition>
		<block pos:line="424" pos:column="17">{
		<case pos:line="425" pos:column="17">case <expr><name pos:line="425" pos:column="22">SCE_OPAL_KEYWORD</name></expr>:
		</case><case pos:line="426" pos:column="17">case <expr><name pos:line="426" pos:column="22">SCE_OPAL_SORT</name></expr>:
			<if pos:line="427" pos:column="25">if<condition pos:line="427" pos:column="27">( <expr><op:operator pos:line="427" pos:column="29">!</op:operator><call><name pos:line="427" pos:column="30">HandleWord</name><argument_list pos:line="427" pos:column="40">( <argument><expr><name pos:line="427" pos:column="42">cur</name></expr></argument>, <argument><expr><name pos:line="427" pos:column="47">one_too_much</name></expr></argument>, <argument><expr><name pos:line="427" pos:column="61">styler</name></expr></argument>, <argument><expr><name pos:line="427" pos:column="69">keywordlists</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="427" pos:column="85"> <return pos:line="427" pos:column="86">return;</return></then></if>
			<expr_stmt><expr><name pos:line="428" pos:column="25">state</name> <op:operator pos:line="428" pos:column="31">=</op:operator> <name pos:line="428" pos:column="33">SCE_OPAL_DEFAULT</name></expr>;</expr_stmt>
			<break pos:line="429" pos:column="25">break;</break>

		</case><case pos:line="431" pos:column="17">case <expr><name pos:line="431" pos:column="22">SCE_OPAL_INTEGER</name></expr>:
			<if pos:line="432" pos:column="25">if<condition pos:line="432" pos:column="27">( <expr><op:operator pos:line="432" pos:column="29">!</op:operator><call><name pos:line="432" pos:column="30">HandleInteger</name><argument_list pos:line="432" pos:column="43">( <argument><expr><name pos:line="432" pos:column="45">cur</name></expr></argument>, <argument><expr><name pos:line="432" pos:column="50">one_too_much</name></expr></argument>, <argument><expr><name pos:line="432" pos:column="64">styler</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="432" pos:column="74"> <return pos:line="432" pos:column="75">return;</return></then></if>
			<expr_stmt><expr><name pos:line="433" pos:column="25">state</name> <op:operator pos:line="433" pos:column="31">=</op:operator> <name pos:line="433" pos:column="33">SCE_OPAL_DEFAULT</name></expr>;</expr_stmt>
			<break pos:line="434" pos:column="25">break;</break>

		</case><case pos:line="436" pos:column="17">case <expr><name pos:line="436" pos:column="22">SCE_OPAL_COMMENT_BLOCK</name></expr>:
			<if pos:line="437" pos:column="25">if<condition pos:line="437" pos:column="27">( <expr><op:operator pos:line="437" pos:column="29">!</op:operator><call><name pos:line="437" pos:column="30">HandleCommentBlock</name><argument_list pos:line="437" pos:column="48">( <argument><expr><name pos:line="437" pos:column="50">cur</name></expr></argument>, <argument><expr><name pos:line="437" pos:column="55">one_too_much</name></expr></argument>, <argument><expr><name pos:line="437" pos:column="69">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="437" pos:column="77">false</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="437" pos:column="86"> <return pos:line="437" pos:column="87">return;</return></then></if>
			<expr_stmt><expr><name pos:line="438" pos:column="25">state</name> <op:operator pos:line="438" pos:column="31">=</op:operator> <name pos:line="438" pos:column="33">SCE_OPAL_DEFAULT</name></expr>;</expr_stmt>
			<break pos:line="439" pos:column="25">break;</break>

		</case><case pos:line="441" pos:column="17">case <expr><name pos:line="441" pos:column="22">SCE_OPAL_COMMENT_LINE</name></expr>:
			<if pos:line="442" pos:column="25">if<condition pos:line="442" pos:column="27">( <expr><op:operator pos:line="442" pos:column="29">!</op:operator><call><name pos:line="442" pos:column="30">HandleCommentLine</name><argument_list pos:line="442" pos:column="47">( <argument><expr><name pos:line="442" pos:column="49">cur</name></expr></argument>, <argument><expr><name pos:line="442" pos:column="54">one_too_much</name></expr></argument>, <argument><expr><name pos:line="442" pos:column="68">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="442" pos:column="76">false</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="442" pos:column="85"> <return pos:line="442" pos:column="86">return;</return></then></if>
			<expr_stmt><expr><name pos:line="443" pos:column="25">state</name> <op:operator pos:line="443" pos:column="31">=</op:operator> <name pos:line="443" pos:column="33">SCE_OPAL_DEFAULT</name></expr>;</expr_stmt>
			<break pos:line="444" pos:column="25">break;</break>

		</case><case pos:line="446" pos:column="17">case <expr><name pos:line="446" pos:column="22">SCE_OPAL_STRING</name></expr>:
			<if pos:line="447" pos:column="25">if<condition pos:line="447" pos:column="27">( <expr><op:operator pos:line="447" pos:column="29">!</op:operator><call><name pos:line="447" pos:column="30">HandleString</name><argument_list pos:line="447" pos:column="42">( <argument><expr><name pos:line="447" pos:column="44">cur</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="49">one_too_much</name></expr></argument>, <argument><expr><name pos:line="447" pos:column="63">styler</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="447" pos:column="73"> <return pos:line="447" pos:column="74">return;</return></then></if>
			<expr_stmt><expr><name pos:line="448" pos:column="25">state</name> <op:operator pos:line="448" pos:column="31">=</op:operator> <name pos:line="448" pos:column="33">SCE_OPAL_DEFAULT</name></expr>;</expr_stmt>
			<break pos:line="449" pos:column="25">break;</break>

		</case><default pos:line="451" pos:column="17">default: <comment type="line" pos:line="451" pos:column="26">// SCE_OPAL_DEFAULT:</comment>
			<block pos:line="452" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="453" pos:column="33">char</name></type> <name pos:line="453" pos:column="38">ch</name> <init pos:line="453" pos:column="41">= <expr><call><name><name pos:line="453" pos:column="43">styler</name><op:operator pos:line="453" pos:column="49">.</op:operator><name pos:line="453" pos:column="50">SafeGetCharAt</name></name><argument_list pos:line="453" pos:column="63">( <argument><expr><name pos:line="453" pos:column="65">cur</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

				<switch pos:line="455" pos:column="33">switch<condition pos:line="455" pos:column="39">( <expr><name pos:line="455" pos:column="41">ch</name></expr> )</condition>
				<block pos:line="456" pos:column="33">{
				<comment type="line" pos:line="457" pos:column="33">// String</comment>
				<case pos:line="458" pos:column="33">case <expr><lit:literal type="char" pos:line="458" pos:column="38">'"'</lit:literal></expr>:
					<if pos:line="459" pos:column="41">if<condition pos:line="459" pos:column="43">( <expr><op:operator pos:line="459" pos:column="45">!</op:operator><call><name pos:line="459" pos:column="46">HandleString</name><argument_list pos:line="459" pos:column="58">( <argument><expr><name pos:line="459" pos:column="60">cur</name></expr></argument>, <argument><expr><name pos:line="459" pos:column="65">one_too_much</name></expr></argument>, <argument><expr><name pos:line="459" pos:column="79">styler</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="459" pos:column="89"> <return pos:line="459" pos:column="90">return;</return></then></if>
					<break pos:line="460" pos:column="41">break;</break>

				<comment type="line" pos:line="462" pos:column="33">// Comment block</comment>
				</case><case pos:line="463" pos:column="33">case <expr><lit:literal type="char" pos:line="463" pos:column="38">'/'</lit:literal></expr>:
					<if pos:line="464" pos:column="41">if<condition pos:line="464" pos:column="43">( <expr><op:operator pos:line="464" pos:column="45">!</op:operator><call><name pos:line="464" pos:column="46">HandleCommentBlock</name><argument_list pos:line="464" pos:column="64">( <argument><expr><name pos:line="464" pos:column="66">cur</name></expr></argument>, <argument><expr><name pos:line="464" pos:column="71">one_too_much</name></expr></argument>, <argument><expr><name pos:line="464" pos:column="85">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="464" pos:column="93">true</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="464" pos:column="101"> <return pos:line="464" pos:column="102">return;</return></then></if>
					<break pos:line="465" pos:column="41">break;</break>

				<comment type="line" pos:line="467" pos:column="33">// Comment line</comment>
				</case><case pos:line="468" pos:column="33">case <expr><lit:literal type="char" pos:line="468" pos:column="38">'-'</lit:literal></expr>:
					<if pos:line="469" pos:column="41">if<condition pos:line="469" pos:column="43">( <expr><op:operator pos:line="469" pos:column="45">!</op:operator><call><name pos:line="469" pos:column="46">HandleCommentLine</name><argument_list pos:line="469" pos:column="63">( <argument><expr><name pos:line="469" pos:column="65">cur</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="70">one_too_much</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="84">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="469" pos:column="92">true</lit:literal></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="469" pos:column="100"> <return pos:line="469" pos:column="101">return;</return></then></if>
					<break pos:line="470" pos:column="41">break;</break>

				<comment type="line" pos:line="472" pos:column="33">// Par</comment>
				</case><case pos:line="473" pos:column="33">case <expr><lit:literal type="char" pos:line="473" pos:column="38">'('</lit:literal></expr>:
				</case><case pos:line="474" pos:column="33">case <expr><lit:literal type="char" pos:line="474" pos:column="38">')'</lit:literal></expr>:
				</case><case pos:line="475" pos:column="33">case <expr><lit:literal type="char" pos:line="475" pos:column="38">'['</lit:literal></expr>:
				</case><case pos:line="476" pos:column="33">case <expr><lit:literal type="char" pos:line="476" pos:column="38">']'</lit:literal></expr>:
				</case><case pos:line="477" pos:column="33">case <expr><lit:literal type="char" pos:line="477" pos:column="38">'{'</lit:literal></expr>:
				</case><case pos:line="478" pos:column="33">case <expr><lit:literal type="char" pos:line="478" pos:column="38">'}'</lit:literal></expr>:
					<if pos:line="479" pos:column="41">if<condition pos:line="479" pos:column="43">( <expr><op:operator pos:line="479" pos:column="45">!</op:operator><call><name pos:line="479" pos:column="46">HandlePar</name><argument_list pos:line="479" pos:column="55">( <argument><expr><name pos:line="479" pos:column="57">cur</name></expr></argument>, <argument><expr><name pos:line="479" pos:column="62">styler</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="479" pos:column="72"> <return pos:line="479" pos:column="73">return;</return></then></if>
					<break pos:line="480" pos:column="41">break;</break>

				<comment type="line" pos:line="482" pos:column="33">// Whitespace</comment>
				</case><case pos:line="483" pos:column="33">case <expr><lit:literal type="char" pos:line="483" pos:column="38">' '</lit:literal></expr>:
				</case><case pos:line="484" pos:column="33">case <expr><lit:literal type="char" pos:line="484" pos:column="38">'\t'</lit:literal></expr>:
				</case><case pos:line="485" pos:column="33">case <expr><lit:literal type="char" pos:line="485" pos:column="38">'\015'</lit:literal></expr>:
				</case><case pos:line="486" pos:column="33">case <expr><lit:literal type="char" pos:line="486" pos:column="38">'\012'</lit:literal></expr>:
					<if pos:line="487" pos:column="41">if<condition pos:line="487" pos:column="43">( <expr><op:operator pos:line="487" pos:column="45">!</op:operator><call><name pos:line="487" pos:column="46">HandleSpace</name><argument_list pos:line="487" pos:column="57">( <argument><expr><name pos:line="487" pos:column="59">cur</name></expr></argument>, <argument><expr><name pos:line="487" pos:column="64">one_too_much</name></expr></argument>, <argument><expr><name pos:line="487" pos:column="78">styler</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="487" pos:column="88"> <return pos:line="487" pos:column="89">return;</return></then></if>
					<break pos:line="488" pos:column="41">break;</break>

				</case><default pos:line="490" pos:column="33">default:
					<block pos:line="491" pos:column="41">{
						<comment type="line" pos:line="492" pos:column="49">// Integer</comment>
						<if pos:line="493" pos:column="49">if<condition pos:line="493" pos:column="51">( <expr><call><name pos:line="493" pos:column="53">isascii</name><argument_list pos:line="493" pos:column="60">( <argument><expr><name pos:line="493" pos:column="62">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="493" pos:column="67">&amp;&amp;</op:operator> <call><name pos:line="493" pos:column="70">isdigit</name><argument_list pos:line="493" pos:column="77">( <argument><expr><name pos:line="493" pos:column="79">ch</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="493" pos:column="85">
						<block pos:line="494" pos:column="49">{
							<if pos:line="495" pos:column="57">if<condition pos:line="495" pos:column="59">( <expr><op:operator pos:line="495" pos:column="61">!</op:operator><call><name pos:line="495" pos:column="62">HandleInteger</name><argument_list pos:line="495" pos:column="75">( <argument><expr><name pos:line="495" pos:column="77">cur</name></expr></argument>, <argument><expr><name pos:line="495" pos:column="82">one_too_much</name></expr></argument>, <argument><expr><name pos:line="495" pos:column="96">styler</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="495" pos:column="106"> <return pos:line="495" pos:column="107">return;</return></then></if>
						}</block></then>

						<comment type="line" pos:line="498" pos:column="49">// Keyword</comment>
						<else pos:line="499" pos:column="49">else <if pos:line="499" pos:column="54">if<condition pos:line="499" pos:column="56">( <expr><call><name pos:line="499" pos:column="58">isascii</name><argument_list pos:line="499" pos:column="65">( <argument><expr><name pos:line="499" pos:column="67">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="499" pos:column="72">&amp;&amp;</op:operator> <op:operator pos:line="499" pos:column="75">(</op:operator> <call><name pos:line="499" pos:column="77">islower</name><argument_list pos:line="499" pos:column="84">( <argument><expr><name pos:line="499" pos:column="86">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="499" pos:column="91">||</op:operator> <call><name pos:line="499" pos:column="94">isupper</name><argument_list pos:line="499" pos:column="101">( <argument><expr><name pos:line="499" pos:column="103">ch</name></expr></argument> )</argument_list></call> <op:operator pos:line="499" pos:column="108">)</op:operator></expr> )</condition><then pos:line="499" pos:column="111">
						<block pos:line="500" pos:column="49">{
							<if pos:line="501" pos:column="57">if<condition pos:line="501" pos:column="59">( <expr><op:operator pos:line="501" pos:column="61">!</op:operator><call><name pos:line="501" pos:column="62">HandleWord</name><argument_list pos:line="501" pos:column="72">( <argument><expr><name pos:line="501" pos:column="74">cur</name></expr></argument>, <argument><expr><name pos:line="501" pos:column="79">one_too_much</name></expr></argument>, <argument><expr><name pos:line="501" pos:column="93">styler</name></expr></argument>, <argument><expr><name pos:line="501" pos:column="101">keywordlists</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="501" pos:column="117"> <return pos:line="501" pos:column="118">return;</return></then></if>

						}</block></then>

						<comment type="line" pos:line="505" pos:column="49">// Skip</comment>
						<else pos:line="506" pos:column="49">else
						<block pos:line="507" pos:column="49">{
							<if pos:line="508" pos:column="57">if<condition pos:line="508" pos:column="59">( <expr><op:operator pos:line="508" pos:column="61">!</op:operator><call><name pos:line="508" pos:column="62">HandleSkip</name><argument_list pos:line="508" pos:column="72">( <argument><expr><name pos:line="508" pos:column="74">cur</name></expr></argument>, <argument><expr><name pos:line="508" pos:column="79">one_too_much</name></expr></argument>, <argument><expr><name pos:line="508" pos:column="93">styler</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="508" pos:column="103"> <return pos:line="508" pos:column="104">return;</return></then></if>
						}</block></else></if></else></if>
					}</block>
				</default>}</block></switch>

				<break pos:line="513" pos:column="33">break;</break>
			}</block>
		</default>}</block></switch>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="519" pos:column="1">static</specifier> <specifier pos:line="519" pos:column="8">const</specifier> <name pos:line="519" pos:column="14">char</name> <type:modifier pos:line="519" pos:column="19">*</type:modifier> <specifier pos:line="519" pos:column="21">const</specifier></type> <name><name pos:line="519" pos:column="27">opalWordListDesc</name><index pos:line="519" pos:column="43">[]</index></name> <init pos:line="519" pos:column="46">= <expr><block pos:line="519" pos:column="48">{
	<expr><lit:literal type="string" pos:line="520" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="521" pos:column="9">"Sorts"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="522" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="525" pos:column="1">LexerModule</name></type> <name pos:line="525" pos:column="13">lmOpal</name><argument_list pos:line="525" pos:column="19">(<argument><expr><name pos:line="525" pos:column="20">SCLEX_OPAL</name></expr></argument>, <argument><expr><name pos:line="525" pos:column="32">ColouriseOpalDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="525" pos:column="50">"opal"</lit:literal></expr></argument>, <argument><expr><name pos:line="525" pos:column="58">NULL</name></expr></argument>, <argument><expr><name pos:line="525" pos:column="64">opalWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
