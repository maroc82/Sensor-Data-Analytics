<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\CallTip.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file CallTip.cxx
 ** Code for displaying call tips.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="11" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"CallTip.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef</cpp:directive> <name pos:line="17" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="18" pos:column="1">using namespace <name pos:line="18" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier pos:line="21" pos:column="1">static</specifier> <specifier pos:line="21" pos:column="8">const</specifier> <name pos:line="21" pos:column="14">int</name></type> <name pos:line="21" pos:column="18">insetX</name> <init pos:line="21" pos:column="25">= <expr><lit:literal type="number" pos:line="21" pos:column="27">5</lit:literal></expr></init></decl>;</decl_stmt>    <comment type="line" pos:line="21" pos:column="33">// text inset in x from calltip border</comment>
<decl_stmt><decl><type><specifier pos:line="22" pos:column="1">static</specifier> <specifier pos:line="22" pos:column="8">const</specifier> <name pos:line="22" pos:column="14">int</name></type> <name pos:line="22" pos:column="18">widthArrow</name> <init pos:line="22" pos:column="29">= <expr><lit:literal type="number" pos:line="22" pos:column="31">14</lit:literal></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="24" pos:column="1">CallTip</name><op:operator pos:line="24" pos:column="8">::</op:operator><name pos:line="24" pos:column="10">CallTip</name></name><parameter_list pos:line="24" pos:column="17">()</parameter_list> <block pos:line="24" pos:column="20">{
	<expr_stmt><expr><name pos:line="25" pos:column="9">wCallTip</name> <op:operator pos:line="25" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="25" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="26" pos:column="9">inCallTipMode</name> <op:operator pos:line="26" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="26" pos:column="25">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="27" pos:column="9">posStartCallTip</name> <op:operator pos:line="27" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="27" pos:column="27">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">val</name> <op:operator pos:line="28" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="28" pos:column="15">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="29" pos:column="9">rectUp</name> <op:operator pos:line="29" pos:column="16">=</op:operator> <call><name pos:line="29" pos:column="18">PRectangle</name><argument_list pos:line="29" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="29" pos:column="29">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="29" pos:column="31">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="29" pos:column="33">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="29" pos:column="35">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="30" pos:column="9">rectDown</name> <op:operator pos:line="30" pos:column="18">=</op:operator> <call><name pos:line="30" pos:column="20">PRectangle</name><argument_list pos:line="30" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="30" pos:column="31">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="30" pos:column="33">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="30" pos:column="35">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="30" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="31" pos:column="9">lineHeight</name> <op:operator pos:line="31" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="31" pos:column="22">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="32" pos:column="9">offsetMain</name> <op:operator pos:line="32" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="32" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="33" pos:column="9">startHighlight</name> <op:operator pos:line="33" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="33" pos:column="26">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">endHighlight</name> <op:operator pos:line="34" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="34" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">tabSize</name> <op:operator pos:line="35" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="35" pos:column="19">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="36" pos:column="9">useStyleCallTip</name> <op:operator pos:line="36" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="36" pos:column="27">false</lit:literal></expr>;</expr_stmt>    <comment type="line" pos:line="36" pos:column="37">// for backwards compatibility</comment>

<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef</cpp:directive> <name pos:line="38" pos:column="8">__APPLE__</name></cpp:ifdef>
	<comment type="line" pos:line="39" pos:column="9">// proper apple colours for the default</comment>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">colourBG</name><op:operator pos:line="40" pos:column="17">.</op:operator><name pos:line="40" pos:column="18">desired</name></name> <op:operator pos:line="40" pos:column="26">=</op:operator> <call><name pos:line="40" pos:column="28">ColourDesired</name><argument_list pos:line="40" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="40" pos:column="42">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="40" pos:column="48">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="40" pos:column="54">0xc6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">colourUnSel</name><op:operator pos:line="41" pos:column="20">.</op:operator><name pos:line="41" pos:column="21">desired</name></name> <op:operator pos:line="41" pos:column="29">=</op:operator> <call><name pos:line="41" pos:column="31">ColourDesired</name><argument_list pos:line="41" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="41" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="41" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="41" pos:column="51">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name><name pos:line="43" pos:column="9">colourBG</name><op:operator pos:line="43" pos:column="17">.</op:operator><name pos:line="43" pos:column="18">desired</name></name> <op:operator pos:line="43" pos:column="26">=</op:operator> <call><name pos:line="43" pos:column="28">ColourDesired</name><argument_list pos:line="43" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="43" pos:column="42">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="43" pos:column="48">0xff</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="43" pos:column="54">0xff</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="44" pos:column="9">colourUnSel</name><op:operator pos:line="44" pos:column="20">.</op:operator><name pos:line="44" pos:column="21">desired</name></name> <op:operator pos:line="44" pos:column="29">=</op:operator> <call><name pos:line="44" pos:column="31">ColourDesired</name><argument_list pos:line="44" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="44" pos:column="45">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="51">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="44" pos:column="57">0x80</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name pos:line="46" pos:column="9">colourSel</name><op:operator pos:line="46" pos:column="18">.</op:operator><name pos:line="46" pos:column="19">desired</name></name> <op:operator pos:line="46" pos:column="27">=</op:operator> <call><name pos:line="46" pos:column="29">ColourDesired</name><argument_list pos:line="46" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="43">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="46" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="46" pos:column="49">0x80</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="47" pos:column="9">colourShade</name><op:operator pos:line="47" pos:column="20">.</op:operator><name pos:line="47" pos:column="21">desired</name></name> <op:operator pos:line="47" pos:column="29">=</op:operator> <call><name pos:line="47" pos:column="31">ColourDesired</name><argument_list pos:line="47" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="47" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="47" pos:column="51">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="48" pos:column="9">colourLight</name><op:operator pos:line="48" pos:column="20">.</op:operator><name pos:line="48" pos:column="21">desired</name></name> <op:operator pos:line="48" pos:column="29">=</op:operator> <call><name pos:line="48" pos:column="31">ColourDesired</name><argument_list pos:line="48" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="45">0xc0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="48" pos:column="51">0xc0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="48" pos:column="57">0xc0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="49" pos:column="9">codePage</name> <op:operator pos:line="49" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="49" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="50" pos:column="9">clickPlace</name> <op:operator pos:line="50" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="50" pos:column="22">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="53" pos:column="1">CallTip</name><op:operator pos:line="53" pos:column="8">::</op:operator>~<name pos:line="53" pos:column="11">CallTip</name></name><parameter_list pos:line="53" pos:column="18">()</parameter_list> <block pos:line="53" pos:column="21">{
	<expr_stmt><expr><call><name><name pos:line="54" pos:column="9">font</name><op:operator pos:line="54" pos:column="13">.</op:operator><name pos:line="54" pos:column="14">Release</name></name><argument_list pos:line="54" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="55" pos:column="9">wCallTip</name><op:operator pos:line="55" pos:column="17">.</op:operator><name pos:line="55" pos:column="18">Destroy</name></name><argument_list pos:line="55" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="56" pos:column="9">delete</op:operator> <index pos:line="56" pos:column="16">[]</index><name pos:line="56" pos:column="18">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="57" pos:column="9">val</name> <op:operator pos:line="57" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="57" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="60" pos:column="1">void</name></type> <name><name pos:line="60" pos:column="6">CallTip</name><op:operator pos:line="60" pos:column="13">::</op:operator><name pos:line="60" pos:column="15">RefreshColourPalette</name></name><parameter_list pos:line="60" pos:column="35">(<param><decl><type><name pos:line="60" pos:column="36">Palette</name> <type:modifier pos:line="60" pos:column="44">&amp;</type:modifier></type><name pos:line="60" pos:column="45">pal</name></decl></param>, <param><decl><type><name pos:line="60" pos:column="50">bool</name></type> <name pos:line="60" pos:column="55">want</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="61">{
	<expr_stmt><expr><call><name><name pos:line="61" pos:column="9">pal</name><op:operator pos:line="61" pos:column="12">.</op:operator><name pos:line="61" pos:column="13">WantFind</name></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">colourBG</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="32">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="62" pos:column="9">pal</name><op:operator pos:line="62" pos:column="12">.</op:operator><name pos:line="62" pos:column="13">WantFind</name></name><argument_list pos:line="62" pos:column="21">(<argument><expr><name pos:line="62" pos:column="22">colourUnSel</name></expr></argument>, <argument><expr><name pos:line="62" pos:column="35">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="63" pos:column="9">pal</name><op:operator pos:line="63" pos:column="12">.</op:operator><name pos:line="63" pos:column="13">WantFind</name></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">colourSel</name></expr></argument>, <argument><expr><name pos:line="63" pos:column="33">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="64" pos:column="9">pal</name><op:operator pos:line="64" pos:column="12">.</op:operator><name pos:line="64" pos:column="13">WantFind</name></name><argument_list pos:line="64" pos:column="21">(<argument><expr><name pos:line="64" pos:column="22">colourShade</name></expr></argument>, <argument><expr><name pos:line="64" pos:column="35">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="65" pos:column="9">pal</name><op:operator pos:line="65" pos:column="12">.</op:operator><name pos:line="65" pos:column="13">WantFind</name></name><argument_list pos:line="65" pos:column="21">(<argument><expr><name pos:line="65" pos:column="22">colourLight</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="35">want</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="68" pos:column="1">// Although this test includes 0, we should never see a \0 character.</comment>
<function><type><specifier pos:line="69" pos:column="1">static</specifier> <name pos:line="69" pos:column="8">bool</name></type> <name pos:line="69" pos:column="13">IsArrowCharacter</name><parameter_list pos:line="69" pos:column="29">(<param><decl><type><name pos:line="69" pos:column="30">char</name></type> <name pos:line="69" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="39">{
	<return pos:line="70" pos:column="9">return <expr><op:operator pos:line="70" pos:column="16">(</op:operator><name pos:line="70" pos:column="17">ch</name> <op:operator pos:line="70" pos:column="20">==</op:operator> <lit:literal type="number" pos:line="70" pos:column="23">0</lit:literal><op:operator pos:line="70" pos:column="24">)</op:operator> <op:operator pos:line="70" pos:column="26">||</op:operator> <op:operator pos:line="70" pos:column="29">(</op:operator><name pos:line="70" pos:column="30">ch</name> <op:operator pos:line="70" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="36">'\001'</lit:literal><op:operator pos:line="70" pos:column="42">)</op:operator> <op:operator pos:line="70" pos:column="44">||</op:operator> <op:operator pos:line="70" pos:column="47">(</op:operator><name pos:line="70" pos:column="48">ch</name> <op:operator pos:line="70" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="70" pos:column="54">'\002'</lit:literal><op:operator pos:line="70" pos:column="60">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="73" pos:column="1">// We ignore tabs unless a tab width has been set.</comment>
<function><type><name pos:line="74" pos:column="1">bool</name></type> <name><name pos:line="74" pos:column="6">CallTip</name><op:operator pos:line="74" pos:column="13">::</op:operator><name pos:line="74" pos:column="15">IsTabCharacter</name></name><parameter_list pos:line="74" pos:column="29">(<param><decl><type><name pos:line="74" pos:column="30">char</name></type> <name pos:line="74" pos:column="35">ch</name></decl></param>)</parameter_list> <specifier pos:line="74" pos:column="39">const</specifier> <block pos:line="74" pos:column="45">{
	<return pos:line="75" pos:column="9">return <expr><op:operator pos:line="75" pos:column="16">(</op:operator><name pos:line="75" pos:column="17">tabSize</name> <op:operator pos:line="75" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="75" pos:column="27">0</lit:literal><op:operator pos:line="75" pos:column="28">)</op:operator> <op:operator pos:line="75" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="75" pos:column="33">(</op:operator><name pos:line="75" pos:column="34">ch</name> <op:operator pos:line="75" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="40">'\t'</lit:literal><op:operator pos:line="75" pos:column="44">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="78" pos:column="1">int</name></type> <name><name pos:line="78" pos:column="5">CallTip</name><op:operator pos:line="78" pos:column="12">::</op:operator><name pos:line="78" pos:column="14">NextTabPos</name></name><parameter_list pos:line="78" pos:column="24">(<param><decl><type><name pos:line="78" pos:column="25">int</name></type> <name pos:line="78" pos:column="29">x</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="32">{
	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">tabSize</name> <op:operator pos:line="79" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="79" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="79" pos:column="25"> <block pos:line="79" pos:column="26">{              <comment type="line" pos:line="79" pos:column="41">// paranoia... not called unless this is true</comment>
		<expr_stmt><expr><name pos:line="80" pos:column="17">x</name> <op:operator pos:line="80" pos:column="19">-=</op:operator> <name pos:line="80" pos:column="22">insetX</name></expr>;</expr_stmt>                <comment type="line" pos:line="80" pos:column="45">// position relative to text</comment>
		<expr_stmt><expr><name pos:line="81" pos:column="17">x</name> <op:operator pos:line="81" pos:column="19">=</op:operator> <op:operator pos:line="81" pos:column="21">(</op:operator><name pos:line="81" pos:column="22">x</name> <op:operator pos:line="81" pos:column="24">+</op:operator> <name pos:line="81" pos:column="26">tabSize</name><op:operator pos:line="81" pos:column="33">)</op:operator> <op:operator pos:line="81" pos:column="35">/</op:operator> <name pos:line="81" pos:column="37">tabSize</name></expr>;</expr_stmt>  <comment type="line" pos:line="81" pos:column="47">// tab "number"</comment>
		<return pos:line="82" pos:column="17">return <expr><name pos:line="82" pos:column="24">tabSize</name><op:operator pos:line="82" pos:column="31">*</op:operator><name pos:line="82" pos:column="32">x</name> <op:operator pos:line="82" pos:column="34">+</op:operator> <name pos:line="82" pos:column="36">insetX</name></expr>;</return>  <comment type="line" pos:line="82" pos:column="45">// position of next tab</comment>
	}</block></then> <else pos:line="83" pos:column="11">else <block pos:line="83" pos:column="16">{
		<return pos:line="84" pos:column="17">return <expr><name pos:line="84" pos:column="24">x</name> <op:operator pos:line="84" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="84" pos:column="28">1</lit:literal></expr>;</return>                 <comment type="line" pos:line="84" pos:column="47">// arbitrary</comment>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="88" pos:column="1">// Draw a section of the call tip that does not include \n in one colour.</comment>
<comment type="line" pos:line="89" pos:column="1">// The text may include up to numEnds tabs or arrow characters.</comment>
<function><type><name pos:line="90" pos:column="1">void</name></type> <name><name pos:line="90" pos:column="6">CallTip</name><op:operator pos:line="90" pos:column="13">::</op:operator><name pos:line="90" pos:column="15">DrawChunk</name></name><parameter_list pos:line="90" pos:column="24">(<param><decl><type><name pos:line="90" pos:column="25">Surface</name> <type:modifier pos:line="90" pos:column="33">*</type:modifier></type><name pos:line="90" pos:column="34">surface</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="43">int</name> <type:modifier pos:line="90" pos:column="47">&amp;</type:modifier></type><name pos:line="90" pos:column="48">x</name></decl></param>, <param><decl><type><specifier pos:line="90" pos:column="51">const</specifier> <name pos:line="90" pos:column="57">char</name> <type:modifier pos:line="90" pos:column="62">*</type:modifier></type><name pos:line="90" pos:column="63">s</name></decl></param>,
	<param><decl><type><name pos:line="91" pos:column="9">int</name></type> <name pos:line="91" pos:column="13">posStart</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="23">int</name></type> <name pos:line="91" pos:column="27">posEnd</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="35">int</name></type> <name pos:line="91" pos:column="39">ytext</name></decl></param>, <param><decl><type><name pos:line="91" pos:column="46">PRectangle</name></type> <name pos:line="91" pos:column="57">rcClient</name></decl></param>,
	<param><decl><type><name pos:line="92" pos:column="9">bool</name></type> <name pos:line="92" pos:column="14">highlight</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="25">bool</name></type> <name pos:line="92" pos:column="30">draw</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="36">{
	<expr_stmt><expr><name pos:line="93" pos:column="9">s</name> <op:operator pos:line="93" pos:column="11">+=</op:operator> <name pos:line="93" pos:column="14">posStart</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="94" pos:column="9">int</name></type> <name pos:line="94" pos:column="13">len</name> <init pos:line="94" pos:column="17">= <expr><name pos:line="94" pos:column="19">posEnd</name> <op:operator pos:line="94" pos:column="26">-</op:operator> <name pos:line="94" pos:column="28">posStart</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="96" pos:column="9">// Divide the text into sections that are all text, or that are</comment>
	<comment type="line" pos:line="97" pos:column="9">// single arrows or single tab characters (if tabSize &gt; 0).</comment>
	<decl_stmt><decl><type><name pos:line="98" pos:column="9">int</name></type> <name pos:line="98" pos:column="13">maxEnd</name> <init pos:line="98" pos:column="20">= <expr><lit:literal type="number" pos:line="98" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="99" pos:column="9">const</specifier> <name pos:line="99" pos:column="15">int</name></type> <name pos:line="99" pos:column="19">numEnds</name> <init pos:line="99" pos:column="27">= <expr><lit:literal type="number" pos:line="99" pos:column="29">10</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="100" pos:column="9">int</name></type> <name><name pos:line="100" pos:column="13">ends</name><index pos:line="100" pos:column="17">[<expr><name pos:line="100" pos:column="18">numEnds</name> <op:operator pos:line="100" pos:column="26">+</op:operator> <lit:literal type="number" pos:line="100" pos:column="28">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<for pos:line="101" pos:column="9">for (<init><decl><type><name pos:line="101" pos:column="14">int</name></type> <name pos:line="101" pos:column="18">i</name><init pos:line="101" pos:column="19">=<expr><lit:literal type="number" pos:line="101" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="101" pos:column="23">i</name><op:operator pos:line="101" pos:column="24">&lt;</op:operator><name pos:line="101" pos:column="25">len</name></expr>;</condition> <incr><expr><name pos:line="101" pos:column="30">i</name><op:operator pos:line="101" pos:column="31">++</op:operator></expr></incr>) <block pos:line="101" pos:column="35">{
		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><op:operator pos:line="102" pos:column="21">(</op:operator><name pos:line="102" pos:column="22">maxEnd</name> <op:operator pos:line="102" pos:column="29">&lt;</op:operator> <name pos:line="102" pos:column="31">numEnds</name><op:operator pos:line="102" pos:column="38">)</op:operator> <op:operator pos:line="102" pos:column="40">&amp;&amp;</op:operator>
		        <op:operator pos:line="103" pos:column="25">(</op:operator><call><name pos:line="103" pos:column="26">IsArrowCharacter</name><argument_list pos:line="103" pos:column="42">(<argument><expr><name><name pos:line="103" pos:column="43">s</name><index pos:line="103" pos:column="44">[<expr><name pos:line="103" pos:column="45">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="103" pos:column="49">||</op:operator> <call><name pos:line="103" pos:column="52">IsTabCharacter</name><argument_list pos:line="103" pos:column="66">(<argument><expr><name><name pos:line="103" pos:column="67">s</name><index pos:line="103" pos:column="68">[<expr><name pos:line="103" pos:column="69">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="103" pos:column="72">)</op:operator></expr>)</condition><then pos:line="103" pos:column="74"> <block pos:line="103" pos:column="75">{
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><name pos:line="104" pos:column="29">i</name> <op:operator pos:line="104" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="104" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="104" pos:column="35">
				<expr_stmt><expr><name><name pos:line="105" pos:column="33">ends</name><index pos:line="105" pos:column="37">[<expr><name pos:line="105" pos:column="38">maxEnd</name><op:operator pos:line="105" pos:column="44">++</op:operator></expr>]</index></name> <op:operator pos:line="105" pos:column="48">=</op:operator> <name pos:line="105" pos:column="50">i</name></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name><name pos:line="106" pos:column="25">ends</name><index pos:line="106" pos:column="29">[<expr><name pos:line="106" pos:column="30">maxEnd</name><op:operator pos:line="106" pos:column="36">++</op:operator></expr>]</index></name> <op:operator pos:line="106" pos:column="40">=</op:operator> <name pos:line="106" pos:column="42">i</name><op:operator pos:line="106" pos:column="43">+</op:operator><lit:literal type="number" pos:line="106" pos:column="44">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="109" pos:column="9">ends</name><index pos:line="109" pos:column="13">[<expr><name pos:line="109" pos:column="14">maxEnd</name><op:operator pos:line="109" pos:column="20">++</op:operator></expr>]</index></name> <op:operator pos:line="109" pos:column="24">=</op:operator> <name pos:line="109" pos:column="26">len</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="110" pos:column="9">int</name></type> <name pos:line="110" pos:column="13">startSeg</name> <init pos:line="110" pos:column="22">= <expr><lit:literal type="number" pos:line="110" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="111" pos:column="9">int</name></type> <name pos:line="111" pos:column="13">xEnd</name></decl>;</decl_stmt>
	<for pos:line="112" pos:column="9">for (<init><decl><type><name pos:line="112" pos:column="14">int</name></type> <name pos:line="112" pos:column="18">seg</name> <init pos:line="112" pos:column="22">= <expr><lit:literal type="number" pos:line="112" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="112" pos:column="27">seg</name><op:operator pos:line="112" pos:column="30">&lt;</op:operator><name pos:line="112" pos:column="31">maxEnd</name></expr>;</condition> <incr><expr><name pos:line="112" pos:column="39">seg</name><op:operator pos:line="112" pos:column="42">++</op:operator></expr></incr>) <block pos:line="112" pos:column="46">{
		<decl_stmt><decl><type><name pos:line="113" pos:column="17">int</name></type> <name pos:line="113" pos:column="21">endSeg</name> <init pos:line="113" pos:column="28">= <expr><name><name pos:line="113" pos:column="30">ends</name><index pos:line="113" pos:column="34">[<expr><name pos:line="113" pos:column="35">seg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name pos:line="114" pos:column="21">endSeg</name> <op:operator pos:line="114" pos:column="28">&gt;</op:operator> <name pos:line="114" pos:column="30">startSeg</name></expr>)</condition><then pos:line="114" pos:column="39"> <block pos:line="114" pos:column="40">{
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><call><name pos:line="115" pos:column="29">IsArrowCharacter</name><argument_list pos:line="115" pos:column="45">(<argument><expr><name><name pos:line="115" pos:column="46">s</name><index pos:line="115" pos:column="47">[<expr><name pos:line="115" pos:column="48">startSeg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="115" pos:column="59"> <block pos:line="115" pos:column="60">{
				<decl_stmt><decl><type><name pos:line="116" pos:column="33">bool</name></type> <name pos:line="116" pos:column="38">upArrow</name> <init pos:line="116" pos:column="46">= <expr><name><name pos:line="116" pos:column="48">s</name><index pos:line="116" pos:column="49">[<expr><name pos:line="116" pos:column="50">startSeg</name></expr>]</index></name> <op:operator pos:line="116" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="63">'\001'</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="117" pos:column="33">rcClient</name><op:operator pos:line="117" pos:column="41">.</op:operator><name pos:line="117" pos:column="42">left</name></name> <op:operator pos:line="117" pos:column="47">=</op:operator> <name pos:line="117" pos:column="49">x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="118" pos:column="33">rcClient</name><op:operator pos:line="118" pos:column="41">.</op:operator><name pos:line="118" pos:column="42">right</name></name> <op:operator pos:line="118" pos:column="48">=</op:operator> <name><name pos:line="118" pos:column="50">rcClient</name><op:operator pos:line="118" pos:column="58">.</op:operator><name pos:line="118" pos:column="59">left</name></name> <op:operator pos:line="118" pos:column="64">+</op:operator> <name pos:line="118" pos:column="66">widthArrow</name></expr>;</expr_stmt>
				<if pos:line="119" pos:column="33">if <condition pos:line="119" pos:column="36">(<expr><name pos:line="119" pos:column="37">draw</name></expr>)</condition><then pos:line="119" pos:column="42"> <block pos:line="119" pos:column="43">{
					<decl_stmt><decl><type><specifier pos:line="120" pos:column="41">const</specifier> <name pos:line="120" pos:column="47">int</name></type> <name pos:line="120" pos:column="51">halfWidth</name> <init pos:line="120" pos:column="61">= <expr><name pos:line="120" pos:column="63">widthArrow</name> <op:operator pos:line="120" pos:column="74">/</op:operator> <lit:literal type="number" pos:line="120" pos:column="76">2</lit:literal> <op:operator pos:line="120" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="120" pos:column="80">3</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier pos:line="121" pos:column="41">const</specifier> <name pos:line="121" pos:column="47">int</name></type> <name pos:line="121" pos:column="51">centreX</name> <init pos:line="121" pos:column="59">= <expr><name><name pos:line="121" pos:column="61">rcClient</name><op:operator pos:line="121" pos:column="69">.</op:operator><name pos:line="121" pos:column="70">left</name></name> <op:operator pos:line="121" pos:column="75">+</op:operator> <name pos:line="121" pos:column="77">widthArrow</name> <op:operator pos:line="121" pos:column="88">/</op:operator> <lit:literal type="number" pos:line="121" pos:column="90">2</lit:literal> <op:operator pos:line="121" pos:column="92">-</op:operator> <lit:literal type="number" pos:line="121" pos:column="94">1</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier pos:line="122" pos:column="41">const</specifier> <name pos:line="122" pos:column="47">int</name></type> <name pos:line="122" pos:column="51">centreY</name> <init pos:line="122" pos:column="59">= <expr><op:operator pos:line="122" pos:column="61">(</op:operator><name><name pos:line="122" pos:column="62">rcClient</name><op:operator pos:line="122" pos:column="70">.</op:operator><name pos:line="122" pos:column="71">top</name></name> <op:operator pos:line="122" pos:column="75">+</op:operator> <name><name pos:line="122" pos:column="77">rcClient</name><op:operator pos:line="122" pos:column="85">.</op:operator><name pos:line="122" pos:column="86">bottom</name></name><op:operator pos:line="122" pos:column="92">)</op:operator> <op:operator pos:line="122" pos:column="94">/</op:operator> <lit:literal type="number" pos:line="122" pos:column="96">2</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="123" pos:column="41">surface</name><op:operator pos:line="123" pos:column="48">-&gt;</op:operator><name pos:line="123" pos:column="50">FillRectangle</name></name><argument_list pos:line="123" pos:column="63">(<argument><expr><name pos:line="123" pos:column="64">rcClient</name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="74">colourBG</name><op:operator pos:line="123" pos:column="82">.</op:operator><name pos:line="123" pos:column="83">allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="124" pos:column="41">PRectangle</name></type> <name pos:line="124" pos:column="52">rcClientInner</name><argument_list pos:line="124" pos:column="65">(<argument><expr><name><name pos:line="124" pos:column="66">rcClient</name><op:operator pos:line="124" pos:column="74">.</op:operator><name pos:line="124" pos:column="75">left</name></name> <op:operator pos:line="124" pos:column="80">+</op:operator> <lit:literal type="number" pos:line="124" pos:column="82">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="85">rcClient</name><op:operator pos:line="124" pos:column="93">.</op:operator><name pos:line="124" pos:column="94">top</name></name> <op:operator pos:line="124" pos:column="98">+</op:operator> <lit:literal type="number" pos:line="124" pos:column="100">1</lit:literal></expr></argument>,
					                         <argument><expr><name><name pos:line="125" pos:column="66">rcClient</name><op:operator pos:line="125" pos:column="74">.</op:operator><name pos:line="125" pos:column="75">right</name></name> <op:operator pos:line="125" pos:column="81">-</op:operator> <lit:literal type="number" pos:line="125" pos:column="83">2</lit:literal></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="86">rcClient</name><op:operator pos:line="125" pos:column="94">.</op:operator><name pos:line="125" pos:column="95">bottom</name></name> <op:operator pos:line="125" pos:column="102">-</op:operator> <lit:literal type="number" pos:line="125" pos:column="104">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="126" pos:column="41">surface</name><op:operator pos:line="126" pos:column="48">-&gt;</op:operator><name pos:line="126" pos:column="50">FillRectangle</name></name><argument_list pos:line="126" pos:column="63">(<argument><expr><name pos:line="126" pos:column="64">rcClientInner</name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="79">colourUnSel</name><op:operator pos:line="126" pos:column="90">.</op:operator><name pos:line="126" pos:column="91">allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="128" pos:column="41">if <condition pos:line="128" pos:column="44">(<expr><name pos:line="128" pos:column="45">upArrow</name></expr>)</condition><then pos:line="128" pos:column="53"> <block pos:line="128" pos:column="54">{      <comment type="line" pos:line="128" pos:column="61">// Up arrow</comment>
						<decl_stmt><decl><type><name pos:line="129" pos:column="49">Point</name></type> <name><name pos:line="129" pos:column="55">pts</name><index pos:line="129" pos:column="58">[]</index></name> <init pos:line="129" pos:column="61">= <expr><block pos:line="129" pos:column="63">{
    						<expr><call><name pos:line="130" pos:column="49">Point</name><argument_list pos:line="130" pos:column="54">(<argument><expr><name pos:line="130" pos:column="55">centreX</name> <op:operator pos:line="130" pos:column="63">-</op:operator> <name pos:line="130" pos:column="65">halfWidth</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="76">centreY</name> <op:operator pos:line="130" pos:column="84">+</op:operator> <name pos:line="130" pos:column="86">halfWidth</name> <op:operator pos:line="130" pos:column="96">/</op:operator> <lit:literal type="number" pos:line="130" pos:column="98">2</lit:literal></expr></argument>)</argument_list></call></expr>,
    						<expr><call><name pos:line="131" pos:column="49">Point</name><argument_list pos:line="131" pos:column="54">(<argument><expr><name pos:line="131" pos:column="55">centreX</name> <op:operator pos:line="131" pos:column="63">+</op:operator> <name pos:line="131" pos:column="65">halfWidth</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="76">centreY</name> <op:operator pos:line="131" pos:column="84">+</op:operator> <name pos:line="131" pos:column="86">halfWidth</name> <op:operator pos:line="131" pos:column="96">/</op:operator> <lit:literal type="number" pos:line="131" pos:column="98">2</lit:literal></expr></argument>)</argument_list></call></expr>,
    						<expr><call><name pos:line="132" pos:column="49">Point</name><argument_list pos:line="132" pos:column="54">(<argument><expr><name pos:line="132" pos:column="55">centreX</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="64">centreY</name> <op:operator pos:line="132" pos:column="72">-</op:operator> <name pos:line="132" pos:column="74">halfWidth</name> <op:operator pos:line="132" pos:column="84">+</op:operator> <name pos:line="132" pos:column="86">halfWidth</name> <op:operator pos:line="132" pos:column="96">/</op:operator> <lit:literal type="number" pos:line="132" pos:column="98">2</lit:literal></expr></argument>)</argument_list></call></expr>,
						}</block></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="134" pos:column="49">surface</name><op:operator pos:line="134" pos:column="56">-&gt;</op:operator><name pos:line="134" pos:column="58">Polygon</name></name><argument_list pos:line="134" pos:column="65">(<argument><expr><name pos:line="134" pos:column="66">pts</name></expr></argument>, <argument><expr><sizeof pos:line="134" pos:column="71">sizeof<argument_list pos:line="134" pos:column="77">(<argument><expr><name pos:line="134" pos:column="78">pts</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="134" pos:column="83">/</op:operator> <sizeof pos:line="134" pos:column="85">sizeof<argument_list pos:line="134" pos:column="91">(<argument><expr><name><name pos:line="134" pos:column="92">pts</name><index pos:line="134" pos:column="95">[<expr><lit:literal type="number" pos:line="134" pos:column="96">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                 						<argument><expr><name><name pos:line="135" pos:column="65">colourBG</name><op:operator pos:line="135" pos:column="73">.</op:operator><name pos:line="135" pos:column="74">allocated</name></name></expr></argument>, <argument><expr><name><name pos:line="135" pos:column="85">colourBG</name><op:operator pos:line="135" pos:column="93">.</op:operator><name pos:line="135" pos:column="94">allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="136" pos:column="43">else <block pos:line="136" pos:column="48">{            <comment type="line" pos:line="136" pos:column="61">// Down arrow</comment>
						<decl_stmt><decl><type><name pos:line="137" pos:column="49">Point</name></type> <name><name pos:line="137" pos:column="55">pts</name><index pos:line="137" pos:column="58">[]</index></name> <init pos:line="137" pos:column="61">= <expr><block pos:line="137" pos:column="63">{
    						<expr><call><name pos:line="138" pos:column="49">Point</name><argument_list pos:line="138" pos:column="54">(<argument><expr><name pos:line="138" pos:column="55">centreX</name> <op:operator pos:line="138" pos:column="63">-</op:operator> <name pos:line="138" pos:column="65">halfWidth</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="76">centreY</name> <op:operator pos:line="138" pos:column="84">-</op:operator> <name pos:line="138" pos:column="86">halfWidth</name> <op:operator pos:line="138" pos:column="96">/</op:operator> <lit:literal type="number" pos:line="138" pos:column="98">2</lit:literal></expr></argument>)</argument_list></call></expr>,
    						<expr><call><name pos:line="139" pos:column="49">Point</name><argument_list pos:line="139" pos:column="54">(<argument><expr><name pos:line="139" pos:column="55">centreX</name> <op:operator pos:line="139" pos:column="63">+</op:operator> <name pos:line="139" pos:column="65">halfWidth</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="76">centreY</name> <op:operator pos:line="139" pos:column="84">-</op:operator> <name pos:line="139" pos:column="86">halfWidth</name> <op:operator pos:line="139" pos:column="96">/</op:operator> <lit:literal type="number" pos:line="139" pos:column="98">2</lit:literal></expr></argument>)</argument_list></call></expr>,
    						<expr><call><name pos:line="140" pos:column="49">Point</name><argument_list pos:line="140" pos:column="54">(<argument><expr><name pos:line="140" pos:column="55">centreX</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="64">centreY</name> <op:operator pos:line="140" pos:column="72">+</op:operator> <name pos:line="140" pos:column="74">halfWidth</name> <op:operator pos:line="140" pos:column="84">-</op:operator> <name pos:line="140" pos:column="86">halfWidth</name> <op:operator pos:line="140" pos:column="96">/</op:operator> <lit:literal type="number" pos:line="140" pos:column="98">2</lit:literal></expr></argument>)</argument_list></call></expr>,
						}</block></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name pos:line="142" pos:column="49">surface</name><op:operator pos:line="142" pos:column="56">-&gt;</op:operator><name pos:line="142" pos:column="58">Polygon</name></name><argument_list pos:line="142" pos:column="65">(<argument><expr><name pos:line="142" pos:column="66">pts</name></expr></argument>, <argument><expr><sizeof pos:line="142" pos:column="71">sizeof<argument_list pos:line="142" pos:column="77">(<argument><expr><name pos:line="142" pos:column="78">pts</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="142" pos:column="83">/</op:operator> <sizeof pos:line="142" pos:column="85">sizeof<argument_list pos:line="142" pos:column="91">(<argument><expr><name><name pos:line="142" pos:column="92">pts</name><index pos:line="142" pos:column="95">[<expr><lit:literal type="number" pos:line="142" pos:column="96">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                 						<argument><expr><name><name pos:line="143" pos:column="65">colourBG</name><op:operator pos:line="143" pos:column="73">.</op:operator><name pos:line="143" pos:column="74">allocated</name></name></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="85">colourBG</name><op:operator pos:line="143" pos:column="93">.</op:operator><name pos:line="143" pos:column="94">allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="146" pos:column="33">xEnd</name> <op:operator pos:line="146" pos:column="38">=</op:operator> <name><name pos:line="146" pos:column="40">rcClient</name><op:operator pos:line="146" pos:column="48">.</op:operator><name pos:line="146" pos:column="49">right</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="147" pos:column="33">offsetMain</name> <op:operator pos:line="147" pos:column="44">=</op:operator> <name pos:line="147" pos:column="46">xEnd</name></expr>;</expr_stmt>
				<if pos:line="148" pos:column="33">if <condition pos:line="148" pos:column="36">(<expr><name pos:line="148" pos:column="37">upArrow</name></expr>)</condition><then pos:line="148" pos:column="45"> <block pos:line="148" pos:column="46">{
					<expr_stmt><expr><name pos:line="149" pos:column="41">rectUp</name> <op:operator pos:line="149" pos:column="48">=</op:operator> <name pos:line="149" pos:column="50">rcClient</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="150" pos:column="35">else <block pos:line="150" pos:column="40">{
					<expr_stmt><expr><name pos:line="151" pos:column="41">rectDown</name> <op:operator pos:line="151" pos:column="50">=</op:operator> <name pos:line="151" pos:column="52">rcClient</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="153" pos:column="27">else <if pos:line="153" pos:column="32">if <condition pos:line="153" pos:column="35">(<expr><call><name pos:line="153" pos:column="36">IsTabCharacter</name><argument_list pos:line="153" pos:column="50">(<argument><expr><name><name pos:line="153" pos:column="51">s</name><index pos:line="153" pos:column="52">[<expr><name pos:line="153" pos:column="53">startSeg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="153" pos:column="64"> <block pos:line="153" pos:column="65">{
				<expr_stmt><expr><name pos:line="154" pos:column="33">xEnd</name> <op:operator pos:line="154" pos:column="38">=</op:operator> <call><name pos:line="154" pos:column="40">NextTabPos</name><argument_list pos:line="154" pos:column="50">(<argument><expr><name pos:line="154" pos:column="51">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="155" pos:column="27">else <block pos:line="155" pos:column="32">{
				<expr_stmt><expr><name pos:line="156" pos:column="33">xEnd</name> <op:operator pos:line="156" pos:column="38">=</op:operator> <name pos:line="156" pos:column="40">x</name> <op:operator pos:line="156" pos:column="42">+</op:operator> <call><name><name pos:line="156" pos:column="44">surface</name><op:operator pos:line="156" pos:column="51">-&gt;</op:operator><name pos:line="156" pos:column="53">WidthText</name></name><argument_list pos:line="156" pos:column="62">(<argument><expr><name pos:line="156" pos:column="63">font</name></expr></argument>, <argument><expr><name pos:line="156" pos:column="69">s</name> <op:operator pos:line="156" pos:column="71">+</op:operator> <name pos:line="156" pos:column="73">startSeg</name></expr></argument>, <argument><expr><name pos:line="156" pos:column="83">endSeg</name> <op:operator pos:line="156" pos:column="90">-</op:operator> <name pos:line="156" pos:column="92">startSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="157" pos:column="33">if <condition pos:line="157" pos:column="36">(<expr><name pos:line="157" pos:column="37">draw</name></expr>)</condition><then pos:line="157" pos:column="42"> <block pos:line="157" pos:column="43">{
					<expr_stmt><expr><name><name pos:line="158" pos:column="41">rcClient</name><op:operator pos:line="158" pos:column="49">.</op:operator><name pos:line="158" pos:column="50">left</name></name> <op:operator pos:line="158" pos:column="55">=</op:operator> <name pos:line="158" pos:column="57">x</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="159" pos:column="41">rcClient</name><op:operator pos:line="159" pos:column="49">.</op:operator><name pos:line="159" pos:column="50">right</name></name> <op:operator pos:line="159" pos:column="56">=</op:operator> <name pos:line="159" pos:column="58">xEnd</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="160" pos:column="41">surface</name><op:operator pos:line="160" pos:column="48">-&gt;</op:operator><name pos:line="160" pos:column="50">DrawTextTransparent</name></name><argument_list pos:line="160" pos:column="69">(<argument><expr><name pos:line="160" pos:column="70">rcClient</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="80">font</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="86">ytext</name></expr></argument>,
										<argument><expr><name pos:line="161" pos:column="81">s</name><op:operator pos:line="161" pos:column="82">+</op:operator><name pos:line="161" pos:column="83">startSeg</name></expr></argument>, <argument><expr><name pos:line="161" pos:column="93">endSeg</name> <op:operator pos:line="161" pos:column="100">-</op:operator> <name pos:line="161" pos:column="102">startSeg</name></expr></argument>,
					                             <argument><expr><name pos:line="162" pos:column="70">highlight</name> <op:operator pos:line="162" pos:column="80">?</op:operator> <name><name pos:line="162" pos:column="82">colourSel</name><op:operator pos:line="162" pos:column="91">.</op:operator><name pos:line="162" pos:column="92">allocated</name></name> <op:operator pos:line="162" pos:column="102">:</op:operator> <name><name pos:line="162" pos:column="104">colourUnSel</name><op:operator pos:line="162" pos:column="115">.</op:operator><name pos:line="162" pos:column="116">allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></else></if></else></if>
			<expr_stmt><expr><name pos:line="165" pos:column="25">x</name> <op:operator pos:line="165" pos:column="27">=</op:operator> <name pos:line="165" pos:column="29">xEnd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="166" pos:column="25">startSeg</name> <op:operator pos:line="166" pos:column="34">=</op:operator> <name pos:line="166" pos:column="36">endSeg</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="171" pos:column="1">int</name></type> <name><name pos:line="171" pos:column="5">CallTip</name><op:operator pos:line="171" pos:column="12">::</op:operator><name pos:line="171" pos:column="14">PaintContents</name></name><parameter_list pos:line="171" pos:column="27">(<param><decl><type><name pos:line="171" pos:column="28">Surface</name> <type:modifier pos:line="171" pos:column="36">*</type:modifier></type><name pos:line="171" pos:column="37">surfaceWindow</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="52">bool</name></type> <name pos:line="171" pos:column="57">draw</name></decl></param>)</parameter_list> <block pos:line="171" pos:column="63">{
	<decl_stmt><decl><type><name pos:line="172" pos:column="9">PRectangle</name></type> <name pos:line="172" pos:column="20">rcClientPos</name> <init pos:line="172" pos:column="32">= <expr><call><name><name pos:line="172" pos:column="34">wCallTip</name><op:operator pos:line="172" pos:column="42">.</op:operator><name pos:line="172" pos:column="43">GetClientPosition</name></name><argument_list pos:line="172" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="173" pos:column="9">PRectangle</name></type> <name pos:line="173" pos:column="20">rcClientSize</name><argument_list pos:line="173" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="173" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="173" pos:column="36">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="173" pos:column="39">rcClientPos</name><op:operator pos:line="173" pos:column="50">.</op:operator><name pos:line="173" pos:column="51">right</name></name> <op:operator pos:line="173" pos:column="57">-</op:operator> <name><name pos:line="173" pos:column="59">rcClientPos</name><op:operator pos:line="173" pos:column="70">.</op:operator><name pos:line="173" pos:column="71">left</name></name></expr></argument>,
	                        <argument><expr><name><name pos:line="174" pos:column="33">rcClientPos</name><op:operator pos:line="174" pos:column="44">.</op:operator><name pos:line="174" pos:column="45">bottom</name></name> <op:operator pos:line="174" pos:column="52">-</op:operator> <name><name pos:line="174" pos:column="54">rcClientPos</name><op:operator pos:line="174" pos:column="65">.</op:operator><name pos:line="174" pos:column="66">top</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">PRectangle</name></type> <name pos:line="175" pos:column="20">rcClient</name><argument_list pos:line="175" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="175" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="175" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="175" pos:column="35">rcClientSize</name><op:operator pos:line="175" pos:column="47">.</op:operator><name pos:line="175" pos:column="48">right</name></name> <op:operator pos:line="175" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="175" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="175" pos:column="59">rcClientSize</name><op:operator pos:line="175" pos:column="71">.</op:operator><name pos:line="175" pos:column="72">bottom</name></name> <op:operator pos:line="175" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="175" pos:column="81">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<comment type="line" pos:line="177" pos:column="9">// To make a nice small call tip window, it is only sized to fit most normal characters without accents</comment>
	<decl_stmt><decl><type><name pos:line="178" pos:column="9">int</name></type> <name pos:line="178" pos:column="13">ascent</name> <init pos:line="178" pos:column="20">= <expr><call><name><name pos:line="178" pos:column="22">surfaceWindow</name><op:operator pos:line="178" pos:column="35">-&gt;</op:operator><name pos:line="178" pos:column="37">Ascent</name></name><argument_list pos:line="178" pos:column="43">(<argument><expr><name pos:line="178" pos:column="44">font</name></expr></argument>)</argument_list></call> <op:operator pos:line="178" pos:column="50">-</op:operator> <call><name><name pos:line="178" pos:column="52">surfaceWindow</name><op:operator pos:line="178" pos:column="65">-&gt;</op:operator><name pos:line="178" pos:column="67">InternalLeading</name></name><argument_list pos:line="178" pos:column="82">(<argument><expr><name pos:line="178" pos:column="83">font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="180" pos:column="9">// For each line...</comment>
	<comment type="line" pos:line="181" pos:column="9">// Draw the definition in three parts: before highlight, highlighted, after highlight</comment>
	<decl_stmt><decl><type><name pos:line="182" pos:column="9">int</name></type> <name pos:line="182" pos:column="13">ytext</name> <init pos:line="182" pos:column="19">= <expr><name><name pos:line="182" pos:column="21">rcClient</name><op:operator pos:line="182" pos:column="29">.</op:operator><name pos:line="182" pos:column="30">top</name></name> <op:operator pos:line="182" pos:column="34">+</op:operator> <name pos:line="182" pos:column="36">ascent</name> <op:operator pos:line="182" pos:column="43">+</op:operator> <lit:literal type="number" pos:line="182" pos:column="45">1</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="183" pos:column="9">rcClient</name><op:operator pos:line="183" pos:column="17">.</op:operator><name pos:line="183" pos:column="18">bottom</name></name> <op:operator pos:line="183" pos:column="25">=</op:operator> <name pos:line="183" pos:column="27">ytext</name> <op:operator pos:line="183" pos:column="33">+</op:operator> <call><name><name pos:line="183" pos:column="35">surfaceWindow</name><op:operator pos:line="183" pos:column="48">-&gt;</op:operator><name pos:line="183" pos:column="50">Descent</name></name><argument_list pos:line="183" pos:column="57">(<argument><expr><name pos:line="183" pos:column="58">font</name></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="183" pos:column="66">1</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="184" pos:column="9">char</name> <type:modifier pos:line="184" pos:column="14">*</type:modifier></type><name pos:line="184" pos:column="15">chunkVal</name> <init pos:line="184" pos:column="24">= <expr><name pos:line="184" pos:column="26">val</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="185" pos:column="9">bool</name></type> <name pos:line="185" pos:column="14">moreChunks</name> <init pos:line="185" pos:column="25">= <expr><lit:literal type="boolean" pos:line="185" pos:column="27">true</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="186" pos:column="9">int</name></type> <name pos:line="186" pos:column="13">maxWidth</name> <init pos:line="186" pos:column="22">= <expr><lit:literal type="number" pos:line="186" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>

	<while pos:line="188" pos:column="9">while <condition pos:line="188" pos:column="15">(<expr><name pos:line="188" pos:column="16">moreChunks</name></expr>)</condition> <block pos:line="188" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="189" pos:column="17">char</name> <type:modifier pos:line="189" pos:column="22">*</type:modifier></type><name pos:line="189" pos:column="23">chunkEnd</name> <init pos:line="189" pos:column="32">= <expr><call><name pos:line="189" pos:column="34">strchr</name><argument_list pos:line="189" pos:column="40">(<argument><expr><name pos:line="189" pos:column="41">chunkVal</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="189" pos:column="51">'\n'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="190" pos:column="17">if <condition pos:line="190" pos:column="20">(<expr><name pos:line="190" pos:column="21">chunkEnd</name> <op:operator pos:line="190" pos:column="30">==</op:operator> <name pos:line="190" pos:column="33">NULL</name></expr>)</condition><then pos:line="190" pos:column="38"> <block pos:line="190" pos:column="39">{
			<expr_stmt><expr><name pos:line="191" pos:column="25">chunkEnd</name> <op:operator pos:line="191" pos:column="34">=</op:operator> <name pos:line="191" pos:column="36">chunkVal</name> <op:operator pos:line="191" pos:column="45">+</op:operator> <call><name pos:line="191" pos:column="47">strlen</name><argument_list pos:line="191" pos:column="53">(<argument><expr><name pos:line="191" pos:column="54">chunkVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="192" pos:column="25">moreChunks</name> <op:operator pos:line="192" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="192" pos:column="38">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="194" pos:column="17">int</name></type> <name pos:line="194" pos:column="21">chunkOffset</name> <init pos:line="194" pos:column="33">= <expr><name pos:line="194" pos:column="35">chunkVal</name> <op:operator pos:line="194" pos:column="44">-</op:operator> <name pos:line="194" pos:column="46">val</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="195" pos:column="17">int</name></type> <name pos:line="195" pos:column="21">chunkLength</name> <init pos:line="195" pos:column="33">= <expr><name pos:line="195" pos:column="35">chunkEnd</name> <op:operator pos:line="195" pos:column="44">-</op:operator> <name pos:line="195" pos:column="46">chunkVal</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="196" pos:column="17">int</name></type> <name pos:line="196" pos:column="21">chunkEndOffset</name> <init pos:line="196" pos:column="36">= <expr><name pos:line="196" pos:column="38">chunkOffset</name> <op:operator pos:line="196" pos:column="50">+</op:operator> <name pos:line="196" pos:column="52">chunkLength</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="197" pos:column="17">int</name></type> <name pos:line="197" pos:column="21">thisStartHighlight</name> <init pos:line="197" pos:column="40">= <expr><call><name><name pos:line="197" pos:column="42">Platform</name><op:operator pos:line="197" pos:column="50">::</op:operator><name pos:line="197" pos:column="52">Maximum</name></name><argument_list pos:line="197" pos:column="59">(<argument><expr><name pos:line="197" pos:column="60">startHighlight</name></expr></argument>, <argument><expr><name pos:line="197" pos:column="76">chunkOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="198" pos:column="17">thisStartHighlight</name> <op:operator pos:line="198" pos:column="36">=</op:operator> <call><name><name pos:line="198" pos:column="38">Platform</name><op:operator pos:line="198" pos:column="46">::</op:operator><name pos:line="198" pos:column="48">Minimum</name></name><argument_list pos:line="198" pos:column="55">(<argument><expr><name pos:line="198" pos:column="56">thisStartHighlight</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="76">chunkEndOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="199" pos:column="17">thisStartHighlight</name> <op:operator pos:line="199" pos:column="36">-=</op:operator> <name pos:line="199" pos:column="39">chunkOffset</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="200" pos:column="17">int</name></type> <name pos:line="200" pos:column="21">thisEndHighlight</name> <init pos:line="200" pos:column="38">= <expr><call><name><name pos:line="200" pos:column="40">Platform</name><op:operator pos:line="200" pos:column="48">::</op:operator><name pos:line="200" pos:column="50">Maximum</name></name><argument_list pos:line="200" pos:column="57">(<argument><expr><name pos:line="200" pos:column="58">endHighlight</name></expr></argument>, <argument><expr><name pos:line="200" pos:column="72">chunkOffset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="201" pos:column="17">thisEndHighlight</name> <op:operator pos:line="201" pos:column="34">=</op:operator> <call><name><name pos:line="201" pos:column="36">Platform</name><op:operator pos:line="201" pos:column="44">::</op:operator><name pos:line="201" pos:column="46">Minimum</name></name><argument_list pos:line="201" pos:column="53">(<argument><expr><name pos:line="201" pos:column="54">thisEndHighlight</name></expr></argument>, <argument><expr><name pos:line="201" pos:column="72">chunkEndOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="202" pos:column="17">thisEndHighlight</name> <op:operator pos:line="202" pos:column="34">-=</op:operator> <name pos:line="202" pos:column="37">chunkOffset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="203" pos:column="17">rcClient</name><op:operator pos:line="203" pos:column="25">.</op:operator><name pos:line="203" pos:column="26">top</name></name> <op:operator pos:line="203" pos:column="30">=</op:operator> <name pos:line="203" pos:column="32">ytext</name> <op:operator pos:line="203" pos:column="38">-</op:operator> <name pos:line="203" pos:column="40">ascent</name> <op:operator pos:line="203" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="203" pos:column="49">1</lit:literal></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="205" pos:column="17">int</name></type> <name pos:line="205" pos:column="21">x</name> <init pos:line="205" pos:column="23">= <expr><name pos:line="205" pos:column="25">insetX</name></expr></init></decl>;</decl_stmt>     <comment type="line" pos:line="205" pos:column="37">// start each line at this inset</comment>

		<expr_stmt><expr><call><name pos:line="207" pos:column="17">DrawChunk</name><argument_list pos:line="207" pos:column="26">(<argument><expr><name pos:line="207" pos:column="27">surfaceWindow</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="42">x</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="45">chunkVal</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="207" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><name pos:line="207" pos:column="58">thisStartHighlight</name></expr></argument>,
			<argument><expr><name pos:line="208" pos:column="25">ytext</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="32">rcClient</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="208" pos:column="42">false</lit:literal></expr></argument>, <argument><expr><name pos:line="208" pos:column="49">draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="209" pos:column="17">DrawChunk</name><argument_list pos:line="209" pos:column="26">(<argument><expr><name pos:line="209" pos:column="27">surfaceWindow</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="42">x</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="45">chunkVal</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="55">thisStartHighlight</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="75">thisEndHighlight</name></expr></argument>,
			<argument><expr><name pos:line="210" pos:column="25">ytext</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="32">rcClient</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="210" pos:column="42">true</lit:literal></expr></argument>, <argument><expr><name pos:line="210" pos:column="48">draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="211" pos:column="17">DrawChunk</name><argument_list pos:line="211" pos:column="26">(<argument><expr><name pos:line="211" pos:column="27">surfaceWindow</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="42">x</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="45">chunkVal</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="55">thisEndHighlight</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="73">chunkLength</name></expr></argument>,
			<argument><expr><name pos:line="212" pos:column="25">ytext</name></expr></argument>, <argument><expr><name pos:line="212" pos:column="32">rcClient</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="212" pos:column="42">false</lit:literal></expr></argument>, <argument><expr><name pos:line="212" pos:column="49">draw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="214" pos:column="17">chunkVal</name> <op:operator pos:line="214" pos:column="26">=</op:operator> <name pos:line="214" pos:column="28">chunkEnd</name> <op:operator pos:line="214" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="214" pos:column="39">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="215" pos:column="17">ytext</name> <op:operator pos:line="215" pos:column="23">+=</op:operator> <name pos:line="215" pos:column="26">lineHeight</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="216" pos:column="17">rcClient</name><op:operator pos:line="216" pos:column="25">.</op:operator><name pos:line="216" pos:column="26">bottom</name></name> <op:operator pos:line="216" pos:column="33">+=</op:operator> <name pos:line="216" pos:column="36">lineHeight</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="217" pos:column="17">maxWidth</name> <op:operator pos:line="217" pos:column="26">=</op:operator> <call><name><name pos:line="217" pos:column="28">Platform</name><op:operator pos:line="217" pos:column="36">::</op:operator><name pos:line="217" pos:column="38">Maximum</name></name><argument_list pos:line="217" pos:column="45">(<argument><expr><name pos:line="217" pos:column="46">maxWidth</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="56">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="219" pos:column="9">return <expr><name pos:line="219" pos:column="16">maxWidth</name></expr>;</return>
}</block></function>

<function><type><name pos:line="222" pos:column="1">void</name></type> <name><name pos:line="222" pos:column="6">CallTip</name><op:operator pos:line="222" pos:column="13">::</op:operator><name pos:line="222" pos:column="15">PaintCT</name></name><parameter_list pos:line="222" pos:column="22">(<param><decl><type><name pos:line="222" pos:column="23">Surface</name> <type:modifier pos:line="222" pos:column="31">*</type:modifier></type><name pos:line="222" pos:column="32">surfaceWindow</name></decl></param>)</parameter_list> <block pos:line="222" pos:column="47">{
	<if pos:line="223" pos:column="9">if <condition pos:line="223" pos:column="12">(<expr><op:operator pos:line="223" pos:column="13">!</op:operator><name pos:line="223" pos:column="14">val</name></expr>)</condition><then pos:line="223" pos:column="18">
		<return pos:line="224" pos:column="17">return;</return></then></if>
	<decl_stmt><decl><type><name pos:line="225" pos:column="9">PRectangle</name></type> <name pos:line="225" pos:column="20">rcClientPos</name> <init pos:line="225" pos:column="32">= <expr><call><name><name pos:line="225" pos:column="34">wCallTip</name><op:operator pos:line="225" pos:column="42">.</op:operator><name pos:line="225" pos:column="43">GetClientPosition</name></name><argument_list pos:line="225" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="226" pos:column="9">PRectangle</name></type> <name pos:line="226" pos:column="20">rcClientSize</name><argument_list pos:line="226" pos:column="32">(<argument><expr><lit:literal type="number" pos:line="226" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="226" pos:column="36">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="226" pos:column="39">rcClientPos</name><op:operator pos:line="226" pos:column="50">.</op:operator><name pos:line="226" pos:column="51">right</name></name> <op:operator pos:line="226" pos:column="57">-</op:operator> <name><name pos:line="226" pos:column="59">rcClientPos</name><op:operator pos:line="226" pos:column="70">.</op:operator><name pos:line="226" pos:column="71">left</name></name></expr></argument>,
	                        <argument><expr><name><name pos:line="227" pos:column="33">rcClientPos</name><op:operator pos:line="227" pos:column="44">.</op:operator><name pos:line="227" pos:column="45">bottom</name></name> <op:operator pos:line="227" pos:column="52">-</op:operator> <name><name pos:line="227" pos:column="54">rcClientPos</name><op:operator pos:line="227" pos:column="65">.</op:operator><name pos:line="227" pos:column="66">top</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="228" pos:column="9">PRectangle</name></type> <name pos:line="228" pos:column="20">rcClient</name><argument_list pos:line="228" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="228" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="228" pos:column="32">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="228" pos:column="35">rcClientSize</name><op:operator pos:line="228" pos:column="47">.</op:operator><name pos:line="228" pos:column="48">right</name></name> <op:operator pos:line="228" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="228" pos:column="56">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="228" pos:column="59">rcClientSize</name><op:operator pos:line="228" pos:column="71">.</op:operator><name pos:line="228" pos:column="72">bottom</name></name> <op:operator pos:line="228" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="228" pos:column="81">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="230" pos:column="9">surfaceWindow</name><op:operator pos:line="230" pos:column="22">-&gt;</op:operator><name pos:line="230" pos:column="24">FillRectangle</name></name><argument_list pos:line="230" pos:column="37">(<argument><expr><name pos:line="230" pos:column="38">rcClient</name></expr></argument>, <argument><expr><name><name pos:line="230" pos:column="48">colourBG</name><op:operator pos:line="230" pos:column="56">.</op:operator><name pos:line="230" pos:column="57">allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="232" pos:column="9">offsetMain</name> <op:operator pos:line="232" pos:column="20">=</op:operator> <name pos:line="232" pos:column="22">insetX</name></expr>;</expr_stmt>    <comment type="line" pos:line="232" pos:column="33">// initial alignment assuming no arrows</comment>
	<expr_stmt><expr><call><name pos:line="233" pos:column="9">PaintContents</name><argument_list pos:line="233" pos:column="22">(<argument><expr><name pos:line="233" pos:column="23">surfaceWindow</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="233" pos:column="38">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:line="235" pos:column="1">#<cpp:directive pos:line="235" pos:column="2">ifndef</cpp:directive> <name pos:line="235" pos:column="9">__APPLE__</name></cpp:ifndef>
	<comment type="line" pos:line="236" pos:column="9">// OSX doesn't put borders on "help tags"</comment>
	<comment type="line" pos:line="237" pos:column="9">// Draw a raised border around the edges of the window</comment>
	<expr_stmt><expr><call><name><name pos:line="238" pos:column="9">surfaceWindow</name><op:operator pos:line="238" pos:column="22">-&gt;</op:operator><name pos:line="238" pos:column="24">MoveTo</name></name><argument_list pos:line="238" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="238" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="238" pos:column="34">rcClientSize</name><op:operator pos:line="238" pos:column="46">.</op:operator><name pos:line="238" pos:column="47">bottom</name></name> <op:operator pos:line="238" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="238" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="239" pos:column="9">surfaceWindow</name><op:operator pos:line="239" pos:column="22">-&gt;</op:operator><name pos:line="239" pos:column="24">PenColour</name></name><argument_list pos:line="239" pos:column="33">(<argument><expr><name><name pos:line="239" pos:column="34">colourShade</name><op:operator pos:line="239" pos:column="45">.</op:operator><name pos:line="239" pos:column="46">allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="240" pos:column="9">surfaceWindow</name><op:operator pos:line="240" pos:column="22">-&gt;</op:operator><name pos:line="240" pos:column="24">LineTo</name></name><argument_list pos:line="240" pos:column="30">(<argument><expr><name><name pos:line="240" pos:column="31">rcClientSize</name><op:operator pos:line="240" pos:column="43">.</op:operator><name pos:line="240" pos:column="44">right</name></name> <op:operator pos:line="240" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="240" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="240" pos:column="55">rcClientSize</name><op:operator pos:line="240" pos:column="67">.</op:operator><name pos:line="240" pos:column="68">bottom</name></name> <op:operator pos:line="240" pos:column="75">-</op:operator> <lit:literal type="number" pos:line="240" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="241" pos:column="9">surfaceWindow</name><op:operator pos:line="241" pos:column="22">-&gt;</op:operator><name pos:line="241" pos:column="24">LineTo</name></name><argument_list pos:line="241" pos:column="30">(<argument><expr><name><name pos:line="241" pos:column="31">rcClientSize</name><op:operator pos:line="241" pos:column="43">.</op:operator><name pos:line="241" pos:column="44">right</name></name> <op:operator pos:line="241" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="241" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="241" pos:column="55">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="242" pos:column="9">surfaceWindow</name><op:operator pos:line="242" pos:column="22">-&gt;</op:operator><name pos:line="242" pos:column="24">PenColour</name></name><argument_list pos:line="242" pos:column="33">(<argument><expr><name><name pos:line="242" pos:column="34">colourLight</name><op:operator pos:line="242" pos:column="45">.</op:operator><name pos:line="242" pos:column="46">allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="243" pos:column="9">surfaceWindow</name><op:operator pos:line="243" pos:column="22">-&gt;</op:operator><name pos:line="243" pos:column="24">LineTo</name></name><argument_list pos:line="243" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="243" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="243" pos:column="34">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="244" pos:column="9">surfaceWindow</name><op:operator pos:line="244" pos:column="22">-&gt;</op:operator><name pos:line="244" pos:column="24">LineTo</name></name><argument_list pos:line="244" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="244" pos:column="31">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="244" pos:column="34">rcClientSize</name><op:operator pos:line="244" pos:column="46">.</op:operator><name pos:line="244" pos:column="47">bottom</name></name> <op:operator pos:line="244" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="244" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="245" pos:column="1">#<cpp:directive pos:line="245" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="248" pos:column="1">void</name></type> <name><name pos:line="248" pos:column="6">CallTip</name><op:operator pos:line="248" pos:column="13">::</op:operator><name pos:line="248" pos:column="15">MouseClick</name></name><parameter_list pos:line="248" pos:column="25">(<param><decl><type><name pos:line="248" pos:column="26">Point</name></type> <name pos:line="248" pos:column="32">pt</name></decl></param>)</parameter_list> <block pos:line="248" pos:column="36">{
	<expr_stmt><expr><name pos:line="249" pos:column="9">clickPlace</name> <op:operator pos:line="249" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="249" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="250" pos:column="9">if <condition pos:line="250" pos:column="12">(<expr><call><name><name pos:line="250" pos:column="13">rectUp</name><op:operator pos:line="250" pos:column="19">.</op:operator><name pos:line="250" pos:column="20">Contains</name></name><argument_list pos:line="250" pos:column="28">(<argument><expr><name pos:line="250" pos:column="29">pt</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="250" pos:column="33">
		<expr_stmt><expr><name pos:line="251" pos:column="17">clickPlace</name> <op:operator pos:line="251" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="251" pos:column="30">1</lit:literal></expr>;</expr_stmt></then></if>
	<if pos:line="252" pos:column="9">if <condition pos:line="252" pos:column="12">(<expr><call><name><name pos:line="252" pos:column="13">rectDown</name><op:operator pos:line="252" pos:column="21">.</op:operator><name pos:line="252" pos:column="22">Contains</name></name><argument_list pos:line="252" pos:column="30">(<argument><expr><name pos:line="252" pos:column="31">pt</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="35">
		<expr_stmt><expr><name pos:line="253" pos:column="17">clickPlace</name> <op:operator pos:line="253" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="253" pos:column="30">2</lit:literal></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="256" pos:column="1">PRectangle</name></type> <name><name pos:line="256" pos:column="12">CallTip</name><op:operator pos:line="256" pos:column="19">::</op:operator><name pos:line="256" pos:column="21">CallTipStart</name></name><parameter_list pos:line="256" pos:column="33">(<param><decl><type><name pos:line="256" pos:column="34">int</name></type> <name pos:line="256" pos:column="38">pos</name></decl></param>, <param><decl><type><name pos:line="256" pos:column="43">Point</name></type> <name pos:line="256" pos:column="49">pt</name></decl></param>, <param><decl><type><specifier pos:line="256" pos:column="53">const</specifier> <name pos:line="256" pos:column="59">char</name> <type:modifier pos:line="256" pos:column="64">*</type:modifier></type><name pos:line="256" pos:column="65">defn</name></decl></param>,
                                 <param><decl><type><specifier pos:line="257" pos:column="34">const</specifier> <name pos:line="257" pos:column="40">char</name> <type:modifier pos:line="257" pos:column="45">*</type:modifier></type><name pos:line="257" pos:column="46">faceName</name></decl></param>, <param><decl><type><name pos:line="257" pos:column="56">int</name></type> <name pos:line="257" pos:column="60">size</name></decl></param>,
                                 <param><decl><type><name pos:line="258" pos:column="34">int</name></type> <name pos:line="258" pos:column="38">codePage_</name></decl></param>, <param><decl><type><name pos:line="258" pos:column="49">int</name></type> <name pos:line="258" pos:column="53">characterSet</name></decl></param>, <param><decl><type><name pos:line="258" pos:column="67">Window</name> <type:modifier pos:line="258" pos:column="74">&amp;</type:modifier></type><name pos:line="258" pos:column="75">wParent</name></decl></param>)</parameter_list> <block pos:line="258" pos:column="84">{
	<expr_stmt><expr><name pos:line="259" pos:column="9">clickPlace</name> <op:operator pos:line="259" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="259" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="260" pos:column="9">delete</op:operator> <index pos:line="260" pos:column="16">[]</index><name pos:line="260" pos:column="18">val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="261" pos:column="9">val</name> <op:operator pos:line="261" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="261" pos:column="15">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="262" pos:column="9">val</name> <op:operator pos:line="262" pos:column="13">=</op:operator> <op:operator pos:line="262" pos:column="15">new</op:operator> <name><name pos:line="262" pos:column="19">char</name><index pos:line="262" pos:column="23">[<expr><call><name pos:line="262" pos:column="24">strlen</name><argument_list pos:line="262" pos:column="30">(<argument><expr><name pos:line="262" pos:column="31">defn</name></expr></argument>)</argument_list></call> <op:operator pos:line="262" pos:column="37">+</op:operator> <lit:literal type="number" pos:line="262" pos:column="39">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="263" pos:column="9">strcpy</name><argument_list pos:line="263" pos:column="15">(<argument><expr><name pos:line="263" pos:column="16">val</name></expr></argument>, <argument><expr><name pos:line="263" pos:column="21">defn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="264" pos:column="9">codePage</name> <op:operator pos:line="264" pos:column="18">=</op:operator> <name pos:line="264" pos:column="20">codePage_</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="265" pos:column="9">Surface</name> <type:modifier pos:line="265" pos:column="17">*</type:modifier></type><name pos:line="265" pos:column="18">surfaceMeasure</name> <init pos:line="265" pos:column="33">= <expr><call><name><name pos:line="265" pos:column="35">Surface</name><op:operator pos:line="265" pos:column="42">::</op:operator><name pos:line="265" pos:column="44">Allocate</name></name><argument_list pos:line="265" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="266" pos:column="9">if <condition pos:line="266" pos:column="12">(<expr><op:operator pos:line="266" pos:column="13">!</op:operator><name pos:line="266" pos:column="14">surfaceMeasure</name></expr>)</condition><then pos:line="266" pos:column="29">
		<return pos:line="267" pos:column="17">return <expr><call><name pos:line="267" pos:column="24">PRectangle</name><argument_list pos:line="267" pos:column="34">()</argument_list></call></expr>;</return></then></if>
	<expr_stmt><expr><call><name><name pos:line="268" pos:column="9">surfaceMeasure</name><op:operator pos:line="268" pos:column="23">-&gt;</op:operator><name pos:line="268" pos:column="25">Init</name></name><argument_list pos:line="268" pos:column="29">(<argument><expr><call><name><name pos:line="268" pos:column="30">wParent</name><op:operator pos:line="268" pos:column="37">.</op:operator><name pos:line="268" pos:column="38">GetID</name></name><argument_list pos:line="268" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="269" pos:column="9">surfaceMeasure</name><op:operator pos:line="269" pos:column="23">-&gt;</op:operator><name pos:line="269" pos:column="25">SetUnicodeMode</name></name><argument_list pos:line="269" pos:column="39">(<argument><expr><name pos:line="269" pos:column="40">SC_CP_UTF8</name> <op:operator pos:line="269" pos:column="51">==</op:operator> <name pos:line="269" pos:column="54">codePage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="270" pos:column="9">surfaceMeasure</name><op:operator pos:line="270" pos:column="23">-&gt;</op:operator><name pos:line="270" pos:column="25">SetDBCSMode</name></name><argument_list pos:line="270" pos:column="36">(<argument><expr><name pos:line="270" pos:column="37">codePage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="271" pos:column="9">startHighlight</name> <op:operator pos:line="271" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="271" pos:column="26">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="272" pos:column="9">endHighlight</name> <op:operator pos:line="272" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="272" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="273" pos:column="9">inCallTipMode</name> <op:operator pos:line="273" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="273" pos:column="25">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="274" pos:column="9">posStartCallTip</name> <op:operator pos:line="274" pos:column="25">=</op:operator> <name pos:line="274" pos:column="27">pos</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="275" pos:column="9">int</name></type> <name pos:line="275" pos:column="13">deviceHeight</name> <init pos:line="275" pos:column="26">= <expr><call><name><name pos:line="275" pos:column="28">surfaceMeasure</name><op:operator pos:line="275" pos:column="42">-&gt;</op:operator><name pos:line="275" pos:column="44">DeviceHeightFont</name></name><argument_list pos:line="275" pos:column="60">(<argument><expr><name pos:line="275" pos:column="61">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="276" pos:column="9">font</name><op:operator pos:line="276" pos:column="13">.</op:operator><name pos:line="276" pos:column="14">Create</name></name><argument_list pos:line="276" pos:column="20">(<argument><expr><name pos:line="276" pos:column="21">faceName</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="31">characterSet</name></expr></argument>, <argument><expr><name pos:line="276" pos:column="45">deviceHeight</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="276" pos:column="59">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="276" pos:column="66">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="277" pos:column="9">// Look for multiple lines in the text</comment>
	<comment type="line" pos:line="278" pos:column="9">// Only support \n here - simply means container must avoid \r!</comment>
	<decl_stmt><decl><type><name pos:line="279" pos:column="9">int</name></type> <name pos:line="279" pos:column="13">numLines</name> <init pos:line="279" pos:column="22">= <expr><lit:literal type="number" pos:line="279" pos:column="24">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="280" pos:column="9">const</specifier> <name pos:line="280" pos:column="15">char</name> <type:modifier pos:line="280" pos:column="20">*</type:modifier></type><name pos:line="280" pos:column="21">newline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="281" pos:column="9">const</specifier> <name pos:line="281" pos:column="15">char</name> <type:modifier pos:line="281" pos:column="20">*</type:modifier></type><name pos:line="281" pos:column="21">look</name> <init pos:line="281" pos:column="26">= <expr><name pos:line="281" pos:column="28">val</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="282" pos:column="9">rectUp</name> <op:operator pos:line="282" pos:column="16">=</op:operator> <call><name pos:line="282" pos:column="18">PRectangle</name><argument_list pos:line="282" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="282" pos:column="29">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="282" pos:column="31">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="282" pos:column="33">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="282" pos:column="35">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="283" pos:column="9">rectDown</name> <op:operator pos:line="283" pos:column="18">=</op:operator> <call><name pos:line="283" pos:column="20">PRectangle</name><argument_list pos:line="283" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="283" pos:column="31">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="283" pos:column="33">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="283" pos:column="35">0</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="283" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="284" pos:column="9">offsetMain</name> <op:operator pos:line="284" pos:column="20">=</op:operator> <name pos:line="284" pos:column="22">insetX</name></expr>;</expr_stmt>            <comment type="line" pos:line="284" pos:column="41">// changed to right edge of any arrows</comment>
	<decl_stmt><decl><type><name pos:line="285" pos:column="9">int</name></type> <name pos:line="285" pos:column="13">width</name> <init pos:line="285" pos:column="19">= <expr><call><name pos:line="285" pos:column="21">PaintContents</name><argument_list pos:line="285" pos:column="34">(<argument><expr><name pos:line="285" pos:column="35">surfaceMeasure</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="285" pos:column="51">false</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="285" pos:column="58">+</op:operator> <name pos:line="285" pos:column="60">insetX</name></expr></init></decl>;</decl_stmt>
	<while pos:line="286" pos:column="9">while <condition pos:line="286" pos:column="15">(<expr><op:operator pos:line="286" pos:column="16">(</op:operator><name pos:line="286" pos:column="17">newline</name> <op:operator pos:line="286" pos:column="25">=</op:operator> <call><name pos:line="286" pos:column="27">strchr</name><argument_list pos:line="286" pos:column="33">(<argument><expr><name pos:line="286" pos:column="34">look</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="286" pos:column="40">'\n'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="286" pos:column="45">)</op:operator> <op:operator pos:line="286" pos:column="47">!=</op:operator> <name pos:line="286" pos:column="50">NULL</name></expr>)</condition> <block pos:line="286" pos:column="56">{
		<expr_stmt><expr><name pos:line="287" pos:column="17">look</name> <op:operator pos:line="287" pos:column="22">=</op:operator> <name pos:line="287" pos:column="24">newline</name> <op:operator pos:line="287" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="287" pos:column="34">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="288" pos:column="17">numLines</name><op:operator pos:line="288" pos:column="25">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name pos:line="290" pos:column="9">lineHeight</name> <op:operator pos:line="290" pos:column="20">=</op:operator> <call><name><name pos:line="290" pos:column="22">surfaceMeasure</name><op:operator pos:line="290" pos:column="36">-&gt;</op:operator><name pos:line="290" pos:column="38">Height</name></name><argument_list pos:line="290" pos:column="44">(<argument><expr><name pos:line="290" pos:column="45">font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="292" pos:column="9">// Extra line for border and an empty line at top and bottom. The returned</comment>
	<comment type="line" pos:line="293" pos:column="9">// rectangle is aligned to the right edge of the last arrow encountered in</comment>
	<comment type="line" pos:line="294" pos:column="9">// the tip text, else to the tip text left edge.</comment>
	<decl_stmt><decl><type><name pos:line="295" pos:column="9">int</name></type> <name pos:line="295" pos:column="13">height</name> <init pos:line="295" pos:column="20">= <expr><name pos:line="295" pos:column="22">lineHeight</name> <op:operator pos:line="295" pos:column="33">*</op:operator> <name pos:line="295" pos:column="35">numLines</name> <op:operator pos:line="295" pos:column="44">-</op:operator> <call><name><name pos:line="295" pos:column="46">surfaceMeasure</name><op:operator pos:line="295" pos:column="60">-&gt;</op:operator><name pos:line="295" pos:column="62">InternalLeading</name></name><argument_list pos:line="295" pos:column="77">(<argument><expr><name pos:line="295" pos:column="78">font</name></expr></argument>)</argument_list></call> <op:operator pos:line="295" pos:column="84">+</op:operator> <lit:literal type="number" pos:line="295" pos:column="86">2</lit:literal> <op:operator pos:line="295" pos:column="88">+</op:operator> <lit:literal type="number" pos:line="295" pos:column="90">2</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="296" pos:column="9">delete</op:operator> <name pos:line="296" pos:column="16">surfaceMeasure</name></expr>;</expr_stmt>
	<return pos:line="297" pos:column="9">return <expr><call><name pos:line="297" pos:column="16">PRectangle</name><argument_list pos:line="297" pos:column="26">(<argument><expr><name><name pos:line="297" pos:column="27">pt</name><op:operator pos:line="297" pos:column="29">.</op:operator><name pos:line="297" pos:column="30">x</name></name> <op:operator pos:line="297" pos:column="32">-</op:operator> <name pos:line="297" pos:column="34">offsetMain</name></expr></argument>, <argument><expr><name><name pos:line="297" pos:column="46">pt</name><op:operator pos:line="297" pos:column="48">.</op:operator><name pos:line="297" pos:column="49">y</name></name> <op:operator pos:line="297" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="297" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name><name pos:line="297" pos:column="56">pt</name><op:operator pos:line="297" pos:column="58">.</op:operator><name pos:line="297" pos:column="59">x</name></name> <op:operator pos:line="297" pos:column="61">+</op:operator> <name pos:line="297" pos:column="63">width</name> <op:operator pos:line="297" pos:column="69">-</op:operator> <name pos:line="297" pos:column="71">offsetMain</name></expr></argument>, <argument><expr><name><name pos:line="297" pos:column="83">pt</name><op:operator pos:line="297" pos:column="85">.</op:operator><name pos:line="297" pos:column="86">y</name></name> <op:operator pos:line="297" pos:column="88">+</op:operator> <lit:literal type="number" pos:line="297" pos:column="90">1</lit:literal> <op:operator pos:line="297" pos:column="92">+</op:operator> <name pos:line="297" pos:column="94">height</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="300" pos:column="1">void</name></type> <name><name pos:line="300" pos:column="6">CallTip</name><op:operator pos:line="300" pos:column="13">::</op:operator><name pos:line="300" pos:column="15">CallTipCancel</name></name><parameter_list pos:line="300" pos:column="28">()</parameter_list> <block pos:line="300" pos:column="31">{
	<expr_stmt><expr><name pos:line="301" pos:column="9">inCallTipMode</name> <op:operator pos:line="301" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="301" pos:column="25">false</lit:literal></expr>;</expr_stmt>
	<if pos:line="302" pos:column="9">if <condition pos:line="302" pos:column="12">(<expr><call><name><name pos:line="302" pos:column="13">wCallTip</name><op:operator pos:line="302" pos:column="21">.</op:operator><name pos:line="302" pos:column="22">Created</name></name><argument_list pos:line="302" pos:column="29">()</argument_list></call></expr>)</condition><then pos:line="302" pos:column="32"> <block pos:line="302" pos:column="33">{
		<expr_stmt><expr><call><name><name pos:line="303" pos:column="17">wCallTip</name><op:operator pos:line="303" pos:column="25">.</op:operator><name pos:line="303" pos:column="26">Destroy</name></name><argument_list pos:line="303" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="307" pos:column="1">void</name></type> <name><name pos:line="307" pos:column="6">CallTip</name><op:operator pos:line="307" pos:column="13">::</op:operator><name pos:line="307" pos:column="15">SetHighlight</name></name><parameter_list pos:line="307" pos:column="27">(<param><decl><type><name pos:line="307" pos:column="28">int</name></type> <name pos:line="307" pos:column="32">start</name></decl></param>, <param><decl><type><name pos:line="307" pos:column="39">int</name></type> <name pos:line="307" pos:column="43">end</name></decl></param>)</parameter_list> <block pos:line="307" pos:column="48">{
	<comment type="line" pos:line="308" pos:column="9">// Avoid flashing by checking something has really changed</comment>
	<if pos:line="309" pos:column="9">if <condition pos:line="309" pos:column="12">(<expr><op:operator pos:line="309" pos:column="13">(</op:operator><name pos:line="309" pos:column="14">start</name> <op:operator pos:line="309" pos:column="20">!=</op:operator> <name pos:line="309" pos:column="23">startHighlight</name><op:operator pos:line="309" pos:column="37">)</op:operator> <op:operator pos:line="309" pos:column="39">||</op:operator> <op:operator pos:line="309" pos:column="42">(</op:operator><name pos:line="309" pos:column="43">end</name> <op:operator pos:line="309" pos:column="47">!=</op:operator> <name pos:line="309" pos:column="50">endHighlight</name><op:operator pos:line="309" pos:column="62">)</op:operator></expr>)</condition><then pos:line="309" pos:column="64"> <block pos:line="309" pos:column="65">{
		<expr_stmt><expr><name pos:line="310" pos:column="17">startHighlight</name> <op:operator pos:line="310" pos:column="32">=</op:operator> <name pos:line="310" pos:column="34">start</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="311" pos:column="17">endHighlight</name> <op:operator pos:line="311" pos:column="30">=</op:operator> <name pos:line="311" pos:column="32">end</name></expr>;</expr_stmt>
		<if pos:line="312" pos:column="17">if <condition pos:line="312" pos:column="20">(<expr><call><name><name pos:line="312" pos:column="21">wCallTip</name><op:operator pos:line="312" pos:column="29">.</op:operator><name pos:line="312" pos:column="30">Created</name></name><argument_list pos:line="312" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="312" pos:column="40"> <block pos:line="312" pos:column="41">{
			<expr_stmt><expr><call><name><name pos:line="313" pos:column="25">wCallTip</name><op:operator pos:line="313" pos:column="33">.</op:operator><name pos:line="313" pos:column="34">InvalidateAll</name></name><argument_list pos:line="313" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<comment type="line" pos:line="318" pos:column="1">// Set the tab size (sizes &gt; 0 enable the use of tabs). This also enables the</comment>
<comment type="line" pos:line="319" pos:column="1">// use of the STYLE_CALLTIP.</comment>
<function><type><name pos:line="320" pos:column="1">void</name></type> <name><name pos:line="320" pos:column="6">CallTip</name><op:operator pos:line="320" pos:column="13">::</op:operator><name pos:line="320" pos:column="15">SetTabSize</name></name><parameter_list pos:line="320" pos:column="25">(<param><decl><type><name pos:line="320" pos:column="26">int</name></type> <name pos:line="320" pos:column="30">tabSz</name></decl></param>)</parameter_list> <block pos:line="320" pos:column="37">{
	<expr_stmt><expr><name pos:line="321" pos:column="9">tabSize</name> <op:operator pos:line="321" pos:column="17">=</op:operator> <name pos:line="321" pos:column="19">tabSz</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="322" pos:column="9">useStyleCallTip</name> <op:operator pos:line="322" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="322" pos:column="27">true</lit:literal></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="325" pos:column="1">// It might be better to have two access functions for this and to use</comment>
<comment type="line" pos:line="326" pos:column="1">// them for all settings of colours.</comment>
<function><type><name pos:line="327" pos:column="1">void</name></type> <name><name pos:line="327" pos:column="6">CallTip</name><op:operator pos:line="327" pos:column="13">::</op:operator><name pos:line="327" pos:column="15">SetForeBack</name></name><parameter_list pos:line="327" pos:column="26">(<param><decl><type><specifier pos:line="327" pos:column="27">const</specifier> <name pos:line="327" pos:column="33">ColourPair</name> <type:modifier pos:line="327" pos:column="44">&amp;</type:modifier></type><name pos:line="327" pos:column="45">fore</name></decl></param>, <param><decl><type><specifier pos:line="327" pos:column="51">const</specifier> <name pos:line="327" pos:column="57">ColourPair</name> <type:modifier pos:line="327" pos:column="68">&amp;</type:modifier></type><name pos:line="327" pos:column="69">back</name></decl></param>)</parameter_list> <block pos:line="327" pos:column="75">{
	<expr_stmt><expr><name pos:line="328" pos:column="9">colourBG</name> <op:operator pos:line="328" pos:column="18">=</op:operator> <name pos:line="328" pos:column="20">back</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="329" pos:column="9">colourUnSel</name> <op:operator pos:line="329" pos:column="21">=</op:operator> <name pos:line="329" pos:column="23">fore</name></expr>;</expr_stmt>
}</block></function>
</unit>
