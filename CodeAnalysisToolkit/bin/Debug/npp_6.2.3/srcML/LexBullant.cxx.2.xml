<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexBullant.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// SciTE - Scintilla based Text Editor</comment>
<comment type="line" pos:line="2" pos:column="1">// LexBullant.cxx - lexer for Bullant</comment>

<cpp:include pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">include</cpp:directive> <cpp:file pos:line="4" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">include</cpp:directive> <cpp:file pos:line="5" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">include</cpp:directive> <cpp:file pos:line="6" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">include</cpp:directive> <cpp:file pos:line="7" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="11" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">ifdef</cpp:directive> <name pos:line="22" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="23" pos:column="1">using namespace <name pos:line="23" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="26" pos:column="1">static</specifier> <name pos:line="26" pos:column="8">int</name></type> <name pos:line="26" pos:column="12">classifyWordBullant</name><parameter_list pos:line="26" pos:column="31">(<param><decl><type><name pos:line="26" pos:column="32">unsigned</name> <name pos:line="26" pos:column="41">int</name></type> <name pos:line="26" pos:column="45">start</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="52">unsigned</name> <name pos:line="26" pos:column="61">int</name></type> <name pos:line="26" pos:column="65">end</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="70">WordList</name> <type:modifier pos:line="26" pos:column="79">&amp;</type:modifier></type><name pos:line="26" pos:column="80">keywords</name></decl></param>, <param><decl><type><name pos:line="26" pos:column="90">Accessor</name> <type:modifier pos:line="26" pos:column="99">&amp;</type:modifier></type><name pos:line="26" pos:column="100">styler</name></decl></param>)</parameter_list> <block pos:line="26" pos:column="108">{
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">char</name></type> <name><name pos:line="27" pos:column="14">s</name><index pos:line="27" pos:column="15">[<expr><lit:literal type="number" pos:line="27" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">s</name><index pos:line="28" pos:column="10">[<expr><lit:literal type="number" pos:line="28" pos:column="11">0</lit:literal></expr>]</index></name> <op:operator pos:line="28" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="28" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
	<for pos:line="29" pos:column="9">for (<init><decl><type><name pos:line="29" pos:column="14">unsigned</name> <name pos:line="29" pos:column="23">int</name></type> <name pos:line="29" pos:column="27">i</name> <init pos:line="29" pos:column="29">= <expr><lit:literal type="number" pos:line="29" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="29" pos:column="34">i</name> <op:operator pos:line="29" pos:column="36">&lt;</op:operator> <name pos:line="29" pos:column="38">end</name> <op:operator pos:line="29" pos:column="42">-</op:operator> <name pos:line="29" pos:column="44">start</name> <op:operator pos:line="29" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="29" pos:column="52">1</lit:literal> <op:operator pos:line="29" pos:column="54">&amp;&amp;</op:operator> <name pos:line="29" pos:column="57">i</name> <op:operator pos:line="29" pos:column="59">&lt;</op:operator> <lit:literal type="number" pos:line="29" pos:column="61">30</lit:literal></expr>;</condition> <incr><expr><name pos:line="29" pos:column="65">i</name><op:operator pos:line="29" pos:column="66">++</op:operator></expr></incr>) <block pos:line="29" pos:column="70">{
		<expr_stmt><expr><name><name pos:line="30" pos:column="17">s</name><index pos:line="30" pos:column="18">[<expr><name pos:line="30" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="30" pos:column="22">=</op:operator> <call><name><name pos:line="30" pos:column="24">static_cast</name><argument_list pos:line="30" pos:column="35">&lt;<argument><expr><name pos:line="30" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="30" pos:column="41">(<argument><expr><call><name pos:line="30" pos:column="42">tolower</name><argument_list pos:line="30" pos:column="49">(<argument><expr><name><name pos:line="30" pos:column="50">styler</name><index pos:line="30" pos:column="56">[<expr><name pos:line="30" pos:column="57">start</name> <op:operator pos:line="30" pos:column="63">+</op:operator> <name pos:line="30" pos:column="65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">s</name><index pos:line="31" pos:column="18">[<expr><name pos:line="31" pos:column="19">i</name> <op:operator pos:line="31" pos:column="21">+</op:operator> <lit:literal type="number" pos:line="31" pos:column="23">1</lit:literal></expr>]</index></name> <op:operator pos:line="31" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="31" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">int</name></type> <name pos:line="33" pos:column="13">lev</name><init pos:line="33" pos:column="16">= <expr><lit:literal type="number" pos:line="33" pos:column="18">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">char</name></type> <name pos:line="34" pos:column="14">chAttr</name> <init pos:line="34" pos:column="21">= <expr><name pos:line="34" pos:column="23">SCE_C_IDENTIFIER</name></expr></init></decl>;</decl_stmt>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">isdigit</name><argument_list pos:line="35" pos:column="20">(<argument><expr><name><name pos:line="35" pos:column="21">s</name><index pos:line="35" pos:column="22">[<expr><lit:literal type="number" pos:line="35" pos:column="23">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="35" pos:column="27">||</op:operator> <op:operator pos:line="35" pos:column="30">(</op:operator><name><name pos:line="35" pos:column="31">s</name><index pos:line="35" pos:column="32">[<expr><lit:literal type="number" pos:line="35" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="35" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="39">'.'</lit:literal><op:operator pos:line="35" pos:column="42">)</op:operator></expr>)</condition><then><block pos:line="35" pos:column="44">{
		<expr_stmt><expr><name pos:line="36" pos:column="17">chAttr</name> <op:operator pos:line="36" pos:column="24">=</op:operator> <name pos:line="36" pos:column="26">SCE_C_NUMBER</name></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="38" pos:column="9">else <block pos:line="38" pos:column="14">{
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><call><name><name pos:line="39" pos:column="21">keywords</name><op:operator pos:line="39" pos:column="29">.</op:operator><name pos:line="39" pos:column="30">InList</name></name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="39" pos:column="40"> <block pos:line="39" pos:column="41">{
			<expr_stmt><expr><name pos:line="40" pos:column="25">chAttr</name> <op:operator pos:line="40" pos:column="32">=</op:operator> <name pos:line="40" pos:column="34">SCE_C_WORD</name></expr>;</expr_stmt>
			<if pos:line="41" pos:column="25">if <condition pos:line="41" pos:column="28">(<expr><call><name pos:line="41" pos:column="29">strcmp</name><argument_list pos:line="41" pos:column="35">(<argument><expr><name pos:line="41" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="41" pos:column="39">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="41" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="41" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="41" pos:column="51">
				<expr_stmt><expr><name pos:line="42" pos:column="33">lev</name> <op:operator pos:line="42" pos:column="37">=</op:operator> <op:operator pos:line="42" pos:column="39">-</op:operator><lit:literal type="number" pos:line="42" pos:column="40">1</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="43" pos:column="25">else <if pos:line="43" pos:column="30">if <condition pos:line="43" pos:column="33">(<expr><call><name pos:line="43" pos:column="34">strcmp</name><argument_list pos:line="43" pos:column="40">(<argument><expr><name pos:line="43" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="43" pos:column="44">"method"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="43" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="43" pos:column="57">0</lit:literal> <op:operator pos:line="43" pos:column="59">||</op:operator>
				<call><name pos:line="44" pos:column="33">strcmp</name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="44" pos:column="43">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="44" pos:column="54">0</lit:literal> <op:operator pos:line="44" pos:column="56">||</op:operator>
				<call><name pos:line="45" pos:column="33">strcmp</name><argument_list pos:line="45" pos:column="39">(<argument><expr><name pos:line="45" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="45" pos:column="43">"class"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="45" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="45" pos:column="55">0</lit:literal> <op:operator pos:line="45" pos:column="57">||</op:operator>
				<call><name pos:line="46" pos:column="33">strcmp</name><argument_list pos:line="46" pos:column="39">(<argument><expr><name pos:line="46" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="46" pos:column="43">"debug"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="46" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="46" pos:column="55">0</lit:literal> <op:operator pos:line="46" pos:column="57">||</op:operator>
				<call><name pos:line="47" pos:column="33">strcmp</name><argument_list pos:line="47" pos:column="39">(<argument><expr><name pos:line="47" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="47" pos:column="43">"test"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="47" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="47" pos:column="54">0</lit:literal> <op:operator pos:line="47" pos:column="56">||</op:operator>
				<call><name pos:line="48" pos:column="33">strcmp</name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="48" pos:column="43">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="48" pos:column="52">0</lit:literal> <op:operator pos:line="48" pos:column="54">||</op:operator>
				<call><name pos:line="49" pos:column="33">strcmp</name><argument_list pos:line="49" pos:column="39">(<argument><expr><name pos:line="49" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="49" pos:column="43">"lock"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="49" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="49" pos:column="54">0</lit:literal> <op:operator pos:line="49" pos:column="56">||</op:operator>
				<call><name pos:line="50" pos:column="33">strcmp</name><argument_list pos:line="50" pos:column="39">(<argument><expr><name pos:line="50" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="50" pos:column="43">"transaction"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="50" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="50" pos:column="61">0</lit:literal> <op:operator pos:line="50" pos:column="63">||</op:operator>
				<call><name pos:line="51" pos:column="33">strcmp</name><argument_list pos:line="51" pos:column="39">(<argument><expr><name pos:line="51" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="51" pos:column="43">"trap"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="51" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="51" pos:column="54">0</lit:literal> <op:operator pos:line="51" pos:column="56">||</op:operator>
				<call><name pos:line="52" pos:column="33">strcmp</name><argument_list pos:line="52" pos:column="39">(<argument><expr><name pos:line="52" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="52" pos:column="43">"until"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="52" pos:column="55">0</lit:literal> <op:operator pos:line="52" pos:column="57">||</op:operator>
				<call><name pos:line="53" pos:column="33">strcmp</name><argument_list pos:line="53" pos:column="39">(<argument><expr><name pos:line="53" pos:column="40">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="53" pos:column="43">"while"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="53" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="53" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="53" pos:column="57">
				<expr_stmt><expr><name pos:line="54" pos:column="33">lev</name> <op:operator pos:line="54" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="54" pos:column="39">1</lit:literal></expr>;</expr_stmt></then></if></else></if>
		}</block></then></if>
	}</block></else></if>
	<expr_stmt><expr><call><name><name pos:line="57" pos:column="9">styler</name><op:operator pos:line="57" pos:column="15">.</op:operator><name pos:line="57" pos:column="16">ColourTo</name></name><argument_list pos:line="57" pos:column="24">(<argument><expr><name pos:line="57" pos:column="25">end</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="30">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="58" pos:column="9">return <expr><name pos:line="58" pos:column="16">lev</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="61" pos:column="1">static</specifier> <name pos:line="61" pos:column="8">void</name></type> <name pos:line="61" pos:column="13">ColouriseBullantDoc</name><parameter_list pos:line="61" pos:column="32">(<param><decl><type><name pos:line="61" pos:column="33">unsigned</name> <name pos:line="61" pos:column="42">int</name></type> <name pos:line="61" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="56">int</name></type> <name pos:line="61" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="68">int</name></type> <name pos:line="61" pos:column="72">initStyle</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="83">WordList</name> <type:modifier pos:line="61" pos:column="92">*</type:modifier></type><name><name pos:line="61" pos:column="93">keywordlists</name><index pos:line="61" pos:column="105">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="62" pos:column="9">Accessor</name> <type:modifier pos:line="62" pos:column="18">&amp;</type:modifier></type><name pos:line="62" pos:column="19">styler</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="27">{
	<decl_stmt><decl><type><name pos:line="63" pos:column="9">WordList</name> <type:modifier pos:line="63" pos:column="18">&amp;</type:modifier></type><name pos:line="63" pos:column="19">keywords</name> <init pos:line="63" pos:column="28">= <expr><op:operator pos:line="63" pos:column="30">*</op:operator><name><name pos:line="63" pos:column="31">keywordlists</name><index pos:line="63" pos:column="43">[<expr><lit:literal type="number" pos:line="63" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="65" pos:column="9">styler</name><op:operator pos:line="65" pos:column="15">.</op:operator><name pos:line="65" pos:column="16">StartAt</name></name><argument_list pos:line="65" pos:column="23">(<argument><expr><name pos:line="65" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="67" pos:column="9">bool</name></type> <name pos:line="67" pos:column="14">fold</name> <init pos:line="67" pos:column="19">= <expr><call><name><name pos:line="67" pos:column="21">styler</name><op:operator pos:line="67" pos:column="27">.</op:operator><name pos:line="67" pos:column="28">GetPropertyInt</name></name><argument_list pos:line="67" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="67" pos:column="43">"fold"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="51">!=</op:operator> <lit:literal type="number" pos:line="67" pos:column="54">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">int</name></type> <name pos:line="68" pos:column="13">lineCurrent</name> <init pos:line="68" pos:column="25">= <expr><call><name><name pos:line="68" pos:column="27">styler</name><op:operator pos:line="68" pos:column="33">.</op:operator><name pos:line="68" pos:column="34">GetLine</name></name><argument_list pos:line="68" pos:column="41">(<argument><expr><name pos:line="68" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">int</name></type> <name pos:line="69" pos:column="13">levelPrev</name> <init pos:line="69" pos:column="23">= <expr><call><name><name pos:line="69" pos:column="25">styler</name><op:operator pos:line="69" pos:column="31">.</op:operator><name pos:line="69" pos:column="32">LevelAt</name></name><argument_list pos:line="69" pos:column="39">(<argument><expr><name pos:line="69" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="69" pos:column="53">&amp;</op:operator> <name pos:line="69" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="70" pos:column="9">int</name></type> <name pos:line="70" pos:column="13">levelCurrent</name> <init pos:line="70" pos:column="26">= <expr><name pos:line="70" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="72" pos:column="9">int</name></type> <name pos:line="72" pos:column="13">state</name> <init pos:line="72" pos:column="19">= <expr><name pos:line="72" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">state</name> <op:operator pos:line="73" pos:column="19">==</op:operator> <name pos:line="73" pos:column="22">SCE_C_STRINGEOL</name></expr>)</condition><then pos:line="73" pos:column="38">	<comment type="line" pos:line="73" pos:column="41">// Does not leak onto next line</comment>
		<expr_stmt><expr><name pos:line="74" pos:column="17">state</name> <op:operator pos:line="74" pos:column="23">=</op:operator> <name pos:line="74" pos:column="25">SCE_C_DEFAULT</name></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">char</name></type> <name pos:line="75" pos:column="14">chPrev</name> <init pos:line="75" pos:column="21">= <expr><lit:literal type="char" pos:line="75" pos:column="23">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">char</name></type> <name pos:line="76" pos:column="14">chNext</name> <init pos:line="76" pos:column="21">= <expr><name><name pos:line="76" pos:column="23">styler</name><index pos:line="76" pos:column="29">[<expr><name pos:line="76" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">unsigned</name> <name pos:line="77" pos:column="18">int</name></type> <name pos:line="77" pos:column="22">lengthDoc</name> <init pos:line="77" pos:column="32">= <expr><name pos:line="77" pos:column="34">startPos</name> <op:operator pos:line="77" pos:column="43">+</op:operator> <name pos:line="77" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="78" pos:column="9">int</name></type> <name pos:line="78" pos:column="13">visibleChars</name> <init pos:line="78" pos:column="26">= <expr><lit:literal type="number" pos:line="78" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="79" pos:column="9">styler</name><op:operator pos:line="79" pos:column="15">.</op:operator><name pos:line="79" pos:column="16">StartSegment</name></name><argument_list pos:line="79" pos:column="28">(<argument><expr><name pos:line="79" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">int</name></type> <name pos:line="80" pos:column="13">endFoundThisLine</name> <init pos:line="80" pos:column="30">= <expr><lit:literal type="number" pos:line="80" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="81" pos:column="9">for (<init><decl><type><name pos:line="81" pos:column="14">unsigned</name> <name pos:line="81" pos:column="23">int</name></type> <name pos:line="81" pos:column="27">i</name> <init pos:line="81" pos:column="29">= <expr><name pos:line="81" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="81" pos:column="41">i</name> <op:operator pos:line="81" pos:column="43">&lt;</op:operator> <name pos:line="81" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="81" pos:column="56">i</name><op:operator pos:line="81" pos:column="57">++</op:operator></expr></incr>) <block pos:line="81" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="82" pos:column="17">char</name></type> <name pos:line="82" pos:column="22">ch</name> <init pos:line="82" pos:column="25">= <expr><name pos:line="82" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">chNext</name> <op:operator pos:line="83" pos:column="24">=</op:operator> <call><name><name pos:line="83" pos:column="26">styler</name><op:operator pos:line="83" pos:column="32">.</op:operator><name pos:line="83" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="83" pos:column="46">(<argument><expr><name pos:line="83" pos:column="47">i</name> <op:operator pos:line="83" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="83" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><op:operator pos:line="85" pos:column="21">(</op:operator><name pos:line="85" pos:column="22">ch</name> <op:operator pos:line="85" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="28">'\r'</lit:literal> <op:operator pos:line="85" pos:column="33">&amp;&amp;</op:operator> <name pos:line="85" pos:column="36">chNext</name> <op:operator pos:line="85" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="85" pos:column="46">'\n'</lit:literal><op:operator pos:line="85" pos:column="50">)</op:operator> <op:operator pos:line="85" pos:column="52">||</op:operator> <op:operator pos:line="85" pos:column="55">(</op:operator><name pos:line="85" pos:column="56">ch</name> <op:operator pos:line="85" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="62">'\n'</lit:literal><op:operator pos:line="85" pos:column="66">)</op:operator></expr>)</condition><then pos:line="85" pos:column="68"> <block pos:line="85" pos:column="69">{
			<comment type="line" pos:line="86" pos:column="25">// Trigger on CR only (Mac style) or either on LF from CR+LF (Dos/Win) or on LF alone (Unix)</comment>
			<comment type="line" pos:line="87" pos:column="25">// Avoid triggering two times on Dos/Win</comment>
			<comment type="line" pos:line="88" pos:column="25">// End of line</comment>
			<expr_stmt><expr><name pos:line="89" pos:column="25">endFoundThisLine</name> <op:operator pos:line="89" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="89" pos:column="44">0</lit:literal></expr>;</expr_stmt>
			<if pos:line="90" pos:column="25">if <condition pos:line="90" pos:column="28">(<expr><name pos:line="90" pos:column="29">state</name> <op:operator pos:line="90" pos:column="35">==</op:operator> <name pos:line="90" pos:column="38">SCE_C_STRINGEOL</name></expr>)</condition><then pos:line="90" pos:column="54"> <block pos:line="90" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="91" pos:column="33">styler</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">ColourTo</name></name><argument_list pos:line="91" pos:column="48">(<argument><expr><name pos:line="91" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="91" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="92" pos:column="33">state</name> <op:operator pos:line="92" pos:column="39">=</op:operator> <name pos:line="92" pos:column="41">SCE_C_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="94" pos:column="25">if <condition pos:line="94" pos:column="28">(<expr><name pos:line="94" pos:column="29">fold</name></expr>)</condition><then pos:line="94" pos:column="34"> <block pos:line="94" pos:column="35">{
				<decl_stmt><decl><type><name pos:line="95" pos:column="33">int</name></type> <name pos:line="95" pos:column="37">lev</name> <init pos:line="95" pos:column="41">= <expr><name pos:line="95" pos:column="43">levelPrev</name></expr></init></decl>;</decl_stmt>
				<if pos:line="96" pos:column="33">if <condition pos:line="96" pos:column="36">(<expr><name pos:line="96" pos:column="37">visibleChars</name> <op:operator pos:line="96" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="96" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="96" pos:column="55">
					<expr_stmt><expr><name pos:line="97" pos:column="41">lev</name> <op:operator pos:line="97" pos:column="45">|=</op:operator> <name pos:line="97" pos:column="48">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
				<if pos:line="98" pos:column="33">if <condition pos:line="98" pos:column="36">(<expr><op:operator pos:line="98" pos:column="37">(</op:operator><name pos:line="98" pos:column="38">levelCurrent</name> <op:operator pos:line="98" pos:column="51">&gt;</op:operator> <name pos:line="98" pos:column="53">levelPrev</name><op:operator pos:line="98" pos:column="62">)</op:operator> <op:operator pos:line="98" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="98" pos:column="67">(</op:operator><name pos:line="98" pos:column="68">visibleChars</name> <op:operator pos:line="98" pos:column="81">&gt;</op:operator> <lit:literal type="number" pos:line="98" pos:column="83">0</lit:literal><op:operator pos:line="98" pos:column="84">)</op:operator></expr>)</condition><then pos:line="98" pos:column="86">
					<expr_stmt><expr><name pos:line="99" pos:column="41">lev</name> <op:operator pos:line="99" pos:column="45">|=</op:operator> <name pos:line="99" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><call><name><name pos:line="100" pos:column="33">styler</name><op:operator pos:line="100" pos:column="39">.</op:operator><name pos:line="100" pos:column="40">SetLevel</name></name><argument_list pos:line="100" pos:column="48">(<argument><expr><name pos:line="100" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="101" pos:column="33">lineCurrent</name><op:operator pos:line="101" pos:column="44">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="102" pos:column="33">levelPrev</name> <op:operator pos:line="102" pos:column="43">=</op:operator> <name pos:line="102" pos:column="45">levelCurrent</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="104" pos:column="25">visibleChars</name> <op:operator pos:line="104" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="104" pos:column="40">0</lit:literal></expr>;</expr_stmt>

<comment type="block" pos:line="106" pos:column="1">/*			int indentBlock = GetLineIndentation(lineCurrent);
			if (blockChange==1){
				lineCurrent++;
				int pos=SetLineIndentation(lineCurrent, indentBlock + indentSize);
			} else if (blockChange==-1) {
				indentBlock -= indentSize;
				if (indentBlock &lt; 0)
					indentBlock = 0;
				SetLineIndentation(lineCurrent, indentBlock);
				lineCurrent++;
			}
			blockChange=0;
*/</comment>		}</block></then></if>
		<if pos:line="119" pos:column="17">if <condition pos:line="119" pos:column="20">(<expr><op:operator pos:line="119" pos:column="21">!</op:operator><op:operator pos:line="119" pos:column="22">(</op:operator><call><name pos:line="119" pos:column="23">isascii</name><argument_list pos:line="119" pos:column="30">(<argument><expr><name pos:line="119" pos:column="31">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="119" pos:column="35">&amp;&amp;</op:operator> <call><name pos:line="119" pos:column="38">isspace</name><argument_list pos:line="119" pos:column="45">(<argument><expr><name pos:line="119" pos:column="46">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="119" pos:column="49">)</op:operator></expr>)</condition><then pos:line="119" pos:column="51">
			<expr_stmt><expr><name pos:line="120" pos:column="25">visibleChars</name><op:operator pos:line="120" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>

		<if pos:line="122" pos:column="17">if <condition pos:line="122" pos:column="20">(<expr><call><name><name pos:line="122" pos:column="21">styler</name><op:operator pos:line="122" pos:column="27">.</op:operator><name pos:line="122" pos:column="28">IsLeadByte</name></name><argument_list pos:line="122" pos:column="38">(<argument><expr><name pos:line="122" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="122" pos:column="43"> <block pos:line="122" pos:column="44">{
			<expr_stmt><expr><name pos:line="123" pos:column="25">chNext</name> <op:operator pos:line="123" pos:column="32">=</op:operator> <call><name><name pos:line="123" pos:column="34">styler</name><op:operator pos:line="123" pos:column="40">.</op:operator><name pos:line="123" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="123" pos:column="54">(<argument><expr><name pos:line="123" pos:column="55">i</name> <op:operator pos:line="123" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="123" pos:column="59">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="124" pos:column="25">chPrev</name> <op:operator pos:line="124" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="124" pos:column="34">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="125" pos:column="25">i</name> <op:operator pos:line="125" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="125" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<continue pos:line="126" pos:column="25">continue;</continue>
		}</block></then></if>

		<if pos:line="129" pos:column="17">if <condition pos:line="129" pos:column="20">(<expr><name pos:line="129" pos:column="21">state</name> <op:operator pos:line="129" pos:column="27">==</op:operator> <name pos:line="129" pos:column="30">SCE_C_DEFAULT</name></expr>)</condition><then pos:line="129" pos:column="44"> <block pos:line="129" pos:column="45">{
			<if pos:line="130" pos:column="25">if <condition pos:line="130" pos:column="28">(<expr><call><name pos:line="130" pos:column="29">iswordstart</name><argument_list pos:line="130" pos:column="40">(<argument><expr><name pos:line="130" pos:column="41">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="130" pos:column="45"> <block pos:line="130" pos:column="46">{
				<expr_stmt><expr><call><name><name pos:line="131" pos:column="33">styler</name><op:operator pos:line="131" pos:column="39">.</op:operator><name pos:line="131" pos:column="40">ColourTo</name></name><argument_list pos:line="131" pos:column="48">(<argument><expr><name pos:line="131" pos:column="49">i</name><op:operator pos:line="131" pos:column="50">-</op:operator><lit:literal type="number" pos:line="131" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="131" pos:column="54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="132" pos:column="41">state</name> <op:operator pos:line="132" pos:column="47">=</op:operator> <name pos:line="132" pos:column="49">SCE_C_IDENTIFIER</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="133" pos:column="27">else <if pos:line="133" pos:column="32">if <condition pos:line="133" pos:column="35">(<expr><name pos:line="133" pos:column="36">ch</name> <op:operator pos:line="133" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="133" pos:column="42">'@'</lit:literal> <op:operator pos:line="133" pos:column="46">&amp;&amp;</op:operator> <name pos:line="133" pos:column="49">chNext</name> <op:operator pos:line="133" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="133" pos:column="59">'o'</lit:literal></expr>)</condition><then pos:line="133" pos:column="63"> <block pos:line="133" pos:column="64">{
				<if pos:line="134" pos:column="33">if <condition pos:line="134" pos:column="36">(<expr><op:operator pos:line="134" pos:column="37">(</op:operator><call><name><name pos:line="134" pos:column="38">styler</name><op:operator pos:line="134" pos:column="44">.</op:operator><name pos:line="134" pos:column="45">SafeGetCharAt</name></name><argument_list pos:line="134" pos:column="58">(<argument><expr><name pos:line="134" pos:column="59">i</name><op:operator pos:line="134" pos:column="60">+</op:operator><lit:literal type="number" pos:line="134" pos:column="61">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="134" pos:column="64">==</op:operator><lit:literal type="char" pos:line="134" pos:column="66">'f'</lit:literal><op:operator pos:line="134" pos:column="69">)</op:operator> <op:operator pos:line="134" pos:column="71">&amp;&amp;</op:operator> <op:operator pos:line="134" pos:column="74">(</op:operator><call><name><name pos:line="134" pos:column="75">styler</name><op:operator pos:line="134" pos:column="81">.</op:operator><name pos:line="134" pos:column="82">SafeGetCharAt</name></name><argument_list pos:line="134" pos:column="95">(<argument><expr><name pos:line="134" pos:column="96">i</name><op:operator pos:line="134" pos:column="97">+</op:operator><lit:literal type="number" pos:line="134" pos:column="98">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="134" pos:column="101">==</op:operator> <lit:literal type="char" pos:line="134" pos:column="104">'f'</lit:literal><op:operator pos:line="134" pos:column="107">)</op:operator></expr>)</condition><then pos:line="134" pos:column="109"> <block pos:line="134" pos:column="110">{
					<expr_stmt><expr><call><name><name pos:line="135" pos:column="41">styler</name><op:operator pos:line="135" pos:column="47">.</op:operator><name pos:line="135" pos:column="48">ColourTo</name></name><argument_list pos:line="135" pos:column="56">(<argument><expr><name pos:line="135" pos:column="57">i</name><op:operator pos:line="135" pos:column="58">-</op:operator><lit:literal type="number" pos:line="135" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><name pos:line="135" pos:column="62">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="136" pos:column="41">state</name> <op:operator pos:line="136" pos:column="47">=</op:operator> <name pos:line="136" pos:column="49">SCE_C_COMMENT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="138" pos:column="27">else <if pos:line="138" pos:column="32">if <condition pos:line="138" pos:column="35">(<expr><name pos:line="138" pos:column="36">ch</name> <op:operator pos:line="138" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="138" pos:column="42">'#'</lit:literal></expr>)</condition><then pos:line="138" pos:column="46"> <block pos:line="138" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="139" pos:column="33">styler</name><op:operator pos:line="139" pos:column="39">.</op:operator><name pos:line="139" pos:column="40">ColourTo</name></name><argument_list pos:line="139" pos:column="48">(<argument><expr><name pos:line="139" pos:column="49">i</name><op:operator pos:line="139" pos:column="50">-</op:operator><lit:literal type="number" pos:line="139" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="140" pos:column="33">state</name> <op:operator pos:line="140" pos:column="39">=</op:operator> <name pos:line="140" pos:column="41">SCE_C_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="141" pos:column="27">else <if pos:line="141" pos:column="32">if <condition pos:line="141" pos:column="35">(<expr><name pos:line="141" pos:column="36">ch</name> <op:operator pos:line="141" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="141" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="141" pos:column="47"> <block pos:line="141" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="142" pos:column="33">styler</name><op:operator pos:line="142" pos:column="39">.</op:operator><name pos:line="142" pos:column="40">ColourTo</name></name><argument_list pos:line="142" pos:column="48">(<argument><expr><name pos:line="142" pos:column="49">i</name><op:operator pos:line="142" pos:column="50">-</op:operator><lit:literal type="number" pos:line="142" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="142" pos:column="54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="143" pos:column="33">state</name> <op:operator pos:line="143" pos:column="39">=</op:operator> <name pos:line="143" pos:column="41">SCE_C_STRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="144" pos:column="27">else <if pos:line="144" pos:column="32">if <condition pos:line="144" pos:column="35">(<expr><name pos:line="144" pos:column="36">ch</name> <op:operator pos:line="144" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="144" pos:column="47"> <block pos:line="144" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">styler</name><op:operator pos:line="145" pos:column="39">.</op:operator><name pos:line="145" pos:column="40">ColourTo</name></name><argument_list pos:line="145" pos:column="48">(<argument><expr><name pos:line="145" pos:column="49">i</name><op:operator pos:line="145" pos:column="50">-</op:operator><lit:literal type="number" pos:line="145" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="146" pos:column="33">state</name> <op:operator pos:line="146" pos:column="39">=</op:operator> <name pos:line="146" pos:column="41">SCE_C_CHARACTER</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="147" pos:column="27">else <if pos:line="147" pos:column="32">if <condition pos:line="147" pos:column="35">(<expr><call><name pos:line="147" pos:column="36">isoperator</name><argument_list pos:line="147" pos:column="46">(<argument><expr><name pos:line="147" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="147" pos:column="51"> <block pos:line="147" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="148" pos:column="33">styler</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">ColourTo</name></name><argument_list pos:line="148" pos:column="48">(<argument><expr><name pos:line="148" pos:column="49">i</name><op:operator pos:line="148" pos:column="50">-</op:operator><lit:literal type="number" pos:line="148" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="148" pos:column="54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="149" pos:column="33">styler</name><op:operator pos:line="149" pos:column="39">.</op:operator><name pos:line="149" pos:column="40">ColourTo</name></name><argument_list pos:line="149" pos:column="48">(<argument><expr><name pos:line="149" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="149" pos:column="52">SCE_C_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then> <else pos:line="151" pos:column="19">else <if pos:line="151" pos:column="24">if <condition pos:line="151" pos:column="27">(<expr><name pos:line="151" pos:column="28">state</name> <op:operator pos:line="151" pos:column="34">==</op:operator> <name pos:line="151" pos:column="37">SCE_C_IDENTIFIER</name></expr>)</condition><then pos:line="151" pos:column="54"> <block pos:line="151" pos:column="55">{
			<if pos:line="152" pos:column="25">if <condition pos:line="152" pos:column="28">(<expr><op:operator pos:line="152" pos:column="29">!</op:operator><call><name pos:line="152" pos:column="30">iswordchar</name><argument_list pos:line="152" pos:column="40">(<argument><expr><name pos:line="152" pos:column="41">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="45"> <block pos:line="152" pos:column="46">{
				<decl_stmt><decl><type><name pos:line="153" pos:column="33">int</name></type> <name pos:line="153" pos:column="37">levelChange</name> <init pos:line="153" pos:column="49">= <expr><call><name pos:line="153" pos:column="51">classifyWordBullant</name><argument_list pos:line="153" pos:column="70">(<argument><expr><call><name><name pos:line="153" pos:column="71">styler</name><op:operator pos:line="153" pos:column="77">.</op:operator><name pos:line="153" pos:column="78">GetStartSegment</name></name><argument_list pos:line="153" pos:column="93">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="153" pos:column="97">i</name> <op:operator pos:line="153" pos:column="99">-</op:operator> <lit:literal type="number" pos:line="153" pos:column="101">1</lit:literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="104">keywords</name></expr></argument>, <argument><expr><name pos:line="153" pos:column="114">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="154" pos:column="33">state</name> <op:operator pos:line="154" pos:column="39">=</op:operator> <name pos:line="154" pos:column="41">SCE_C_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="155" pos:column="33">chNext</name> <op:operator pos:line="155" pos:column="40">=</op:operator> <call><name><name pos:line="155" pos:column="42">styler</name><op:operator pos:line="155" pos:column="48">.</op:operator><name pos:line="155" pos:column="49">SafeGetCharAt</name></name><argument_list pos:line="155" pos:column="62">(<argument><expr><name pos:line="155" pos:column="63">i</name> <op:operator pos:line="155" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="155" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="156" pos:column="33">if <condition pos:line="156" pos:column="36">(<expr><name pos:line="156" pos:column="37">ch</name> <op:operator pos:line="156" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="156" pos:column="43">'#'</lit:literal></expr>)</condition><then pos:line="156" pos:column="47"> <block pos:line="156" pos:column="48">{
					<expr_stmt><expr><name pos:line="157" pos:column="41">state</name> <op:operator pos:line="157" pos:column="47">=</op:operator> <name pos:line="157" pos:column="49">SCE_C_COMMENTLINE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="158" pos:column="35">else <if pos:line="158" pos:column="40">if <condition pos:line="158" pos:column="43">(<expr><name pos:line="158" pos:column="44">ch</name> <op:operator pos:line="158" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="158" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="158" pos:column="55"> <block pos:line="158" pos:column="56">{
					<expr_stmt><expr><name pos:line="159" pos:column="41">state</name> <op:operator pos:line="159" pos:column="47">=</op:operator> <name pos:line="159" pos:column="49">SCE_C_STRING</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="160" pos:column="35">else <if pos:line="160" pos:column="40">if <condition pos:line="160" pos:column="43">(<expr><name pos:line="160" pos:column="44">ch</name> <op:operator pos:line="160" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="160" pos:column="50">'\''</lit:literal></expr>)</condition><then pos:line="160" pos:column="55"> <block pos:line="160" pos:column="56">{
					<expr_stmt><expr><name pos:line="161" pos:column="41">state</name> <op:operator pos:line="161" pos:column="47">=</op:operator> <name pos:line="161" pos:column="49">SCE_C_CHARACTER</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="162" pos:column="35">else <if pos:line="162" pos:column="40">if <condition pos:line="162" pos:column="43">(<expr><call><name pos:line="162" pos:column="44">isoperator</name><argument_list pos:line="162" pos:column="54">(<argument><expr><name pos:line="162" pos:column="55">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="162" pos:column="59"> <block pos:line="162" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="163" pos:column="41">styler</name><op:operator pos:line="163" pos:column="47">.</op:operator><name pos:line="163" pos:column="48">ColourTo</name></name><argument_list pos:line="163" pos:column="56">(<argument><expr><name pos:line="163" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="60">SCE_C_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if>
				<if pos:line="165" pos:column="33">if <condition pos:line="165" pos:column="36">(<expr><name pos:line="165" pos:column="37">endFoundThisLine</name> <op:operator pos:line="165" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="165" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="165" pos:column="59">
					<expr_stmt><expr><name pos:line="166" pos:column="41">levelCurrent</name><op:operator pos:line="166" pos:column="53">+=</op:operator><name pos:line="166" pos:column="55">levelChange</name></expr>;</expr_stmt></then></if>
				<if pos:line="167" pos:column="33">if <condition pos:line="167" pos:column="36">(<expr><name pos:line="167" pos:column="37">levelChange</name> <op:operator pos:line="167" pos:column="49">==</op:operator> <op:operator pos:line="167" pos:column="52">-</op:operator><lit:literal type="number" pos:line="167" pos:column="53">1</lit:literal></expr>)</condition><then pos:line="167" pos:column="55">
					<expr_stmt><expr><name pos:line="168" pos:column="41">endFoundThisLine</name><op:operator pos:line="168" pos:column="57">=</op:operator><lit:literal type="number" pos:line="168" pos:column="58">1</lit:literal></expr>;</expr_stmt></then></if>
			}</block></then></if>
		}</block></then> <else pos:line="170" pos:column="19">else <if pos:line="170" pos:column="24">if <condition pos:line="170" pos:column="27">(<expr><name pos:line="170" pos:column="28">state</name> <op:operator pos:line="170" pos:column="34">==</op:operator> <name pos:line="170" pos:column="37">SCE_C_COMMENT</name></expr>)</condition><then pos:line="170" pos:column="51"> <block pos:line="170" pos:column="52">{
			<if pos:line="171" pos:column="25">if <condition pos:line="171" pos:column="28">(<expr><name pos:line="171" pos:column="29">ch</name> <op:operator pos:line="171" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="171" pos:column="35">'@'</lit:literal> <op:operator pos:line="171" pos:column="39">&amp;&amp;</op:operator> <name pos:line="171" pos:column="42">chNext</name> <op:operator pos:line="171" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="171" pos:column="52">'o'</lit:literal></expr>)</condition><then pos:line="171" pos:column="56"> <block pos:line="171" pos:column="57">{
				<if pos:line="172" pos:column="33">if <condition pos:line="172" pos:column="36">(<expr><call><name><name pos:line="172" pos:column="37">styler</name><op:operator pos:line="172" pos:column="43">.</op:operator><name pos:line="172" pos:column="44">SafeGetCharAt</name></name><argument_list pos:line="172" pos:column="57">(<argument><expr><name pos:line="172" pos:column="58">i</name><op:operator pos:line="172" pos:column="59">+</op:operator><lit:literal type="number" pos:line="172" pos:column="60">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="172" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="172" pos:column="66">'n'</lit:literal></expr>)</condition><then pos:line="172" pos:column="70"> <block pos:line="172" pos:column="71">{
					<expr_stmt><expr><call><name><name pos:line="173" pos:column="41">styler</name><op:operator pos:line="173" pos:column="47">.</op:operator><name pos:line="173" pos:column="48">ColourTo</name></name><argument_list pos:line="173" pos:column="56">(<argument><expr><name pos:line="173" pos:column="57">i</name><op:operator pos:line="173" pos:column="58">+</op:operator><lit:literal type="number" pos:line="173" pos:column="59">2</lit:literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="62">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="174" pos:column="41">state</name> <op:operator pos:line="174" pos:column="47">=</op:operator> <name pos:line="174" pos:column="49">SCE_C_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="175" pos:column="41">i</name><op:operator pos:line="175" pos:column="42">+=</op:operator><lit:literal type="number" pos:line="175" pos:column="44">2</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></then> <else pos:line="178" pos:column="19">else <if pos:line="178" pos:column="24">if <condition pos:line="178" pos:column="27">(<expr><name pos:line="178" pos:column="28">state</name> <op:operator pos:line="178" pos:column="34">==</op:operator> <name pos:line="178" pos:column="37">SCE_C_COMMENTLINE</name></expr>)</condition><then pos:line="178" pos:column="55"> <block pos:line="178" pos:column="56">{
			<if pos:line="179" pos:column="25">if <condition pos:line="179" pos:column="28">(<expr><name pos:line="179" pos:column="29">ch</name> <op:operator pos:line="179" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="35">'\r'</lit:literal> <op:operator pos:line="179" pos:column="40">||</op:operator> <name pos:line="179" pos:column="43">ch</name> <op:operator pos:line="179" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="179" pos:column="54"> <block pos:line="179" pos:column="55">{
				<expr_stmt><expr><name pos:line="180" pos:column="33">endFoundThisLine</name> <op:operator pos:line="180" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="180" pos:column="52">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="181" pos:column="33">styler</name><op:operator pos:line="181" pos:column="39">.</op:operator><name pos:line="181" pos:column="40">ColourTo</name></name><argument_list pos:line="181" pos:column="48">(<argument><expr><name pos:line="181" pos:column="49">i</name><op:operator pos:line="181" pos:column="50">-</op:operator><lit:literal type="number" pos:line="181" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="181" pos:column="54">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="182" pos:column="33">state</name> <op:operator pos:line="182" pos:column="39">=</op:operator> <name pos:line="182" pos:column="41">SCE_C_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="184" pos:column="19">else <if pos:line="184" pos:column="24">if <condition pos:line="184" pos:column="27">(<expr><name pos:line="184" pos:column="28">state</name> <op:operator pos:line="184" pos:column="34">==</op:operator> <name pos:line="184" pos:column="37">SCE_C_STRING</name></expr>)</condition><then pos:line="184" pos:column="50"> <block pos:line="184" pos:column="51">{
			<if pos:line="185" pos:column="25">if <condition pos:line="185" pos:column="28">(<expr><name pos:line="185" pos:column="29">ch</name> <op:operator pos:line="185" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="35">'\\'</lit:literal></expr>)</condition><then pos:line="185" pos:column="40"> <block pos:line="185" pos:column="41">{
				<if pos:line="186" pos:column="33">if <condition pos:line="186" pos:column="36">(<expr><name pos:line="186" pos:column="37">chNext</name> <op:operator pos:line="186" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="47">'\"'</lit:literal> <op:operator pos:line="186" pos:column="52">||</op:operator> <name pos:line="186" pos:column="55">chNext</name> <op:operator pos:line="186" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="65">'\''</lit:literal> <op:operator pos:line="186" pos:column="70">||</op:operator> <name pos:line="186" pos:column="73">chNext</name> <op:operator pos:line="186" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="83">'\\'</lit:literal></expr>)</condition><then pos:line="186" pos:column="88"> <block pos:line="186" pos:column="89">{
					<expr_stmt><expr><name pos:line="187" pos:column="41">i</name><op:operator pos:line="187" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="188" pos:column="41">ch</name> <op:operator pos:line="188" pos:column="44">=</op:operator> <name pos:line="188" pos:column="46">chNext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="189" pos:column="41">chNext</name> <op:operator pos:line="189" pos:column="48">=</op:operator> <call><name><name pos:line="189" pos:column="50">styler</name><op:operator pos:line="189" pos:column="56">.</op:operator><name pos:line="189" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="189" pos:column="70">(<argument><expr><name pos:line="189" pos:column="71">i</name> <op:operator pos:line="189" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="189" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="191" pos:column="27">else <if pos:line="191" pos:column="32">if <condition pos:line="191" pos:column="35">(<expr><name pos:line="191" pos:column="36">ch</name> <op:operator pos:line="191" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="191" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="191" pos:column="47"> <block pos:line="191" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="192" pos:column="33">styler</name><op:operator pos:line="192" pos:column="39">.</op:operator><name pos:line="192" pos:column="40">ColourTo</name></name><argument_list pos:line="192" pos:column="48">(<argument><expr><name pos:line="192" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="193" pos:column="33">state</name> <op:operator pos:line="193" pos:column="39">=</op:operator> <name pos:line="193" pos:column="41">SCE_C_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="194" pos:column="27">else <if pos:line="194" pos:column="32">if <condition pos:line="194" pos:column="35">(<expr><name pos:line="194" pos:column="36">chNext</name> <op:operator pos:line="194" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="194" pos:column="46">'\r'</lit:literal> <op:operator pos:line="194" pos:column="51">||</op:operator> <name pos:line="194" pos:column="54">chNext</name> <op:operator pos:line="194" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="194" pos:column="64">'\n'</lit:literal></expr>)</condition><then pos:line="194" pos:column="69"> <block pos:line="194" pos:column="70">{
				<expr_stmt><expr><name pos:line="195" pos:column="33">endFoundThisLine</name> <op:operator pos:line="195" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="195" pos:column="52">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="196" pos:column="33">styler</name><op:operator pos:line="196" pos:column="39">.</op:operator><name pos:line="196" pos:column="40">ColourTo</name></name><argument_list pos:line="196" pos:column="48">(<argument><expr><name pos:line="196" pos:column="49">i</name><op:operator pos:line="196" pos:column="50">-</op:operator><lit:literal type="number" pos:line="196" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="196" pos:column="54">SCE_C_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="197" pos:column="33">state</name> <op:operator pos:line="197" pos:column="39">=</op:operator> <name pos:line="197" pos:column="41">SCE_C_STRINGEOL</name></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then> <else pos:line="199" pos:column="19">else <if pos:line="199" pos:column="24">if <condition pos:line="199" pos:column="27">(<expr><name pos:line="199" pos:column="28">state</name> <op:operator pos:line="199" pos:column="34">==</op:operator> <name pos:line="199" pos:column="37">SCE_C_CHARACTER</name></expr>)</condition><then pos:line="199" pos:column="53"> <block pos:line="199" pos:column="54">{
			<if pos:line="200" pos:column="25">if <condition pos:line="200" pos:column="28">(<expr><op:operator pos:line="200" pos:column="29">(</op:operator><name pos:line="200" pos:column="30">ch</name> <op:operator pos:line="200" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="36">'\r'</lit:literal> <op:operator pos:line="200" pos:column="41">||</op:operator> <name pos:line="200" pos:column="44">ch</name> <op:operator pos:line="200" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="50">'\n'</lit:literal><op:operator pos:line="200" pos:column="54">)</op:operator> <op:operator pos:line="200" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="200" pos:column="59">(</op:operator><name pos:line="200" pos:column="60">chPrev</name> <op:operator pos:line="200" pos:column="67">!=</op:operator> <lit:literal type="char" pos:line="200" pos:column="70">'\\'</lit:literal><op:operator pos:line="200" pos:column="74">)</op:operator></expr>)</condition><then pos:line="200" pos:column="76"> <block pos:line="200" pos:column="77">{
				<expr_stmt><expr><name pos:line="201" pos:column="33">endFoundThisLine</name> <op:operator pos:line="201" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="201" pos:column="52">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="202" pos:column="33">styler</name><op:operator pos:line="202" pos:column="39">.</op:operator><name pos:line="202" pos:column="40">ColourTo</name></name><argument_list pos:line="202" pos:column="48">(<argument><expr><name pos:line="202" pos:column="49">i</name><op:operator pos:line="202" pos:column="50">-</op:operator><lit:literal type="number" pos:line="202" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><name pos:line="202" pos:column="54">SCE_C_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="203" pos:column="33">state</name> <op:operator pos:line="203" pos:column="39">=</op:operator> <name pos:line="203" pos:column="41">SCE_C_STRINGEOL</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="204" pos:column="27">else <if pos:line="204" pos:column="32">if <condition pos:line="204" pos:column="35">(<expr><name pos:line="204" pos:column="36">ch</name> <op:operator pos:line="204" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="204" pos:column="42">'\\'</lit:literal></expr>)</condition><then pos:line="204" pos:column="47"> <block pos:line="204" pos:column="48">{
				<if pos:line="205" pos:column="33">if <condition pos:line="205" pos:column="36">(<expr><name pos:line="205" pos:column="37">chNext</name> <op:operator pos:line="205" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="205" pos:column="47">'\"'</lit:literal> <op:operator pos:line="205" pos:column="52">||</op:operator> <name pos:line="205" pos:column="55">chNext</name> <op:operator pos:line="205" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="205" pos:column="65">'\''</lit:literal> <op:operator pos:line="205" pos:column="70">||</op:operator> <name pos:line="205" pos:column="73">chNext</name> <op:operator pos:line="205" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="205" pos:column="83">'\\'</lit:literal></expr>)</condition><then pos:line="205" pos:column="88"> <block pos:line="205" pos:column="89">{
					<expr_stmt><expr><name pos:line="206" pos:column="41">i</name><op:operator pos:line="206" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="207" pos:column="41">ch</name> <op:operator pos:line="207" pos:column="44">=</op:operator> <name pos:line="207" pos:column="46">chNext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="208" pos:column="41">chNext</name> <op:operator pos:line="208" pos:column="48">=</op:operator> <call><name><name pos:line="208" pos:column="50">styler</name><op:operator pos:line="208" pos:column="56">.</op:operator><name pos:line="208" pos:column="57">SafeGetCharAt</name></name><argument_list pos:line="208" pos:column="70">(<argument><expr><name pos:line="208" pos:column="71">i</name> <op:operator pos:line="208" pos:column="73">+</op:operator> <lit:literal type="number" pos:line="208" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="210" pos:column="27">else <if pos:line="210" pos:column="32">if <condition pos:line="210" pos:column="35">(<expr><name pos:line="210" pos:column="36">ch</name> <op:operator pos:line="210" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="210" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="210" pos:column="47"> <block pos:line="210" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="211" pos:column="33">styler</name><op:operator pos:line="211" pos:column="39">.</op:operator><name pos:line="211" pos:column="40">ColourTo</name></name><argument_list pos:line="211" pos:column="48">(<argument><expr><name pos:line="211" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="212" pos:column="33">state</name> <op:operator pos:line="212" pos:column="39">=</op:operator> <name pos:line="212" pos:column="41">SCE_C_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		<expr_stmt><expr><name pos:line="215" pos:column="17">chPrev</name> <op:operator pos:line="215" pos:column="24">=</op:operator> <name pos:line="215" pos:column="26">ch</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="217" pos:column="9">styler</name><op:operator pos:line="217" pos:column="15">.</op:operator><name pos:line="217" pos:column="16">ColourTo</name></name><argument_list pos:line="217" pos:column="24">(<argument><expr><name pos:line="217" pos:column="25">lengthDoc</name> <op:operator pos:line="217" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="217" pos:column="37">1</lit:literal></expr></argument>, <argument><expr><name pos:line="217" pos:column="40">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="219" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<if pos:line="220" pos:column="9">if <condition pos:line="220" pos:column="12">(<expr><name pos:line="220" pos:column="13">fold</name></expr>)</condition><then pos:line="220" pos:column="18"> <block pos:line="220" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="221" pos:column="17">int</name></type> <name pos:line="221" pos:column="21">flagsNext</name> <init pos:line="221" pos:column="31">= <expr><call><name><name pos:line="221" pos:column="33">styler</name><op:operator pos:line="221" pos:column="39">.</op:operator><name pos:line="221" pos:column="40">LevelAt</name></name><argument_list pos:line="221" pos:column="47">(<argument><expr><name pos:line="221" pos:column="48">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="221" pos:column="61">&amp;</op:operator> <op:operator pos:line="221" pos:column="63">~</op:operator><name pos:line="221" pos:column="64">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="222" pos:column="17">//styler.SetLevel(lineCurrent, levelCurrent | flagsNext);</comment>
		<expr_stmt><expr><call><name><name pos:line="223" pos:column="17">styler</name><op:operator pos:line="223" pos:column="23">.</op:operator><name pos:line="223" pos:column="24">SetLevel</name></name><argument_list pos:line="223" pos:column="32">(<argument><expr><name pos:line="223" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="223" pos:column="46">levelPrev</name> <op:operator pos:line="223" pos:column="56">|</op:operator> <name pos:line="223" pos:column="58">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></then></if>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="228" pos:column="1">static</specifier> <specifier pos:line="228" pos:column="8">const</specifier> <name pos:line="228" pos:column="14">char</name> <type:modifier pos:line="228" pos:column="19">*</type:modifier> <specifier pos:line="228" pos:column="21">const</specifier></type> <name><name pos:line="228" pos:column="27">bullantWordListDesc</name><index pos:line="228" pos:column="46">[]</index></name> <init pos:line="228" pos:column="49">= <expr><block pos:line="228" pos:column="51">{
	<expr><lit:literal type="string" pos:line="229" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="230" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="233" pos:column="1">LexerModule</name></type> <name pos:line="233" pos:column="13">lmBullant</name><argument_list pos:line="233" pos:column="22">(<argument><expr><name pos:line="233" pos:column="23">SCLEX_BULLANT</name></expr></argument>, <argument><expr><name pos:line="233" pos:column="38">ColouriseBullantDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="233" pos:column="59">"bullant"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="233" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><name pos:line="233" pos:column="73">bullantWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
