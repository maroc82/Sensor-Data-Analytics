<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\staticdialog\StaticDialog.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">STATIC_DIALOG_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">STATIC_DIALOG_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">NOTEPAD_PLUS_MSGS_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Notepad_plus_msgs.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//NOTEPAD_PLUS_MSGS_H</comment>

<typedef pos:line="36" pos:column="1">typedef <function_decl><type><name pos:line="36" pos:column="9">HRESULT</name></type> (<name pos:line="36" pos:column="18">WINAPI</name> <type:modifier pos:line="36" pos:column="25">*</type:modifier> <name pos:line="36" pos:column="27">ETDTProc</name>) <parameter_list pos:line="36" pos:column="37">(<param><decl><type><name pos:line="36" pos:column="38">HWND</name></type></decl></param>, <param><decl><type><name pos:line="36" pos:column="44">DWORD</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<enum pos:line="38" pos:column="1">enum <name pos:line="38" pos:column="6">PosAlign</name><block pos:line="38" pos:column="14">{<decl><name pos:line="38" pos:column="15">ALIGNPOS_LEFT</name></decl><op:operator pos:line="38" pos:column="28">,</op:operator> <decl><name pos:line="38" pos:column="30">ALIGNPOS_RIGHT</name></decl><op:operator pos:line="38" pos:column="44">,</op:operator> <decl><name pos:line="38" pos:column="46">ALIGNPOS_TOP</name></decl><op:operator pos:line="38" pos:column="58">,</op:operator> <decl><name pos:line="38" pos:column="60">ALIGNPOS_BOTTOM</name></decl>}</block>;</enum>

<struct pos:line="40" pos:column="1">struct <name pos:line="40" pos:column="8">DLGTEMPLATEEX</name> <block pos:line="40" pos:column="22">{<public type="default" pos:line="40" pos:column="23">
      <decl_stmt><decl><type><name pos:line="41" pos:column="7">WORD</name></type>   <name pos:line="41" pos:column="14">dlgVer</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="42" pos:column="7">WORD</name></type>   <name pos:line="42" pos:column="14">signature</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="43" pos:column="7">DWORD</name></type>  <name pos:line="43" pos:column="14">helpID</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="44" pos:column="7">DWORD</name></type>  <name pos:line="44" pos:column="14">exStyle</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="45" pos:column="7">DWORD</name></type>  <name pos:line="45" pos:column="14">style</name></decl>;</decl_stmt> 
      <decl_stmt><decl><type><name pos:line="46" pos:column="7">WORD</name></type>   <name pos:line="46" pos:column="14">cDlgItems</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="47" pos:column="7">short</name></type>  <name pos:line="47" pos:column="14">x</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="48" pos:column="7">short</name></type>  <name pos:line="48" pos:column="14">y</name></decl>;</decl_stmt>    
      <decl_stmt><decl><type><name pos:line="49" pos:column="7">short</name></type>  <name pos:line="49" pos:column="14">cx</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name pos:line="50" pos:column="7">short</name></type>  <name pos:line="50" pos:column="14">cy</name></decl>;</decl_stmt>
      <comment type="line" pos:line="51" pos:column="7">// The structure has more fields but are variable length</comment>
</public>}</block> ;</struct>

<class pos:line="54" pos:column="1">class <name pos:line="54" pos:column="7">StaticDialog</name> <super pos:line="54" pos:column="20">: <specifier pos:line="54" pos:column="22">public</specifier> <name pos:line="54" pos:column="29">Window</name></super>
<block pos:line="55" pos:column="1">{<private type="default" pos:line="55" pos:column="2">
</private><public pos:line="56" pos:column="1">public :
	<constructor><name pos:line="57" pos:column="9">StaticDialog</name><parameter_list pos:line="57" pos:column="21">()</parameter_list> <member_list pos:line="57" pos:column="24">: <call><name pos:line="57" pos:column="26">Window</name><argument_list pos:line="57" pos:column="32">()</argument_list></call> </member_list><block pos:line="57" pos:column="35">{}</block></constructor><empty_stmt pos:line="57" pos:column="37">;</empty_stmt>
	<destructor><name pos:line="58" pos:column="9">~<name pos:line="58" pos:column="10">StaticDialog</name></name><parameter_list pos:line="58" pos:column="22">()</parameter_list><block pos:line="58" pos:column="24">{
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><call><name pos:line="59" pos:column="21">isCreated</name><argument_list pos:line="59" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="59" pos:column="33"> <block pos:line="59" pos:column="34">{
			<expr_stmt><expr><call><name><op:operator pos:line="60" pos:column="25">::</op:operator><name pos:line="60" pos:column="27">SetWindowLongPtr</name></name><argument_list pos:line="60" pos:column="43">(<argument><expr><name pos:line="60" pos:column="44">_hSelf</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="52">GWLP_USERDATA</name></expr></argument>, <argument><expr><op:operator pos:line="60" pos:column="67">(</op:operator><name pos:line="60" pos:column="68">LONG_PTR</name><op:operator pos:line="60" pos:column="76">)</op:operator><name pos:line="60" pos:column="77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="60" pos:column="89">//Prevent run_dlgProc from doing anything, since its virtual</comment>
			<expr_stmt><expr><call><name pos:line="61" pos:column="25">destroy</name><argument_list pos:line="61" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></destructor><empty_stmt pos:line="63" pos:column="10">;</empty_stmt>
	<function_decl><type><specifier pos:line="64" pos:column="9">virtual</specifier> <name pos:line="64" pos:column="17">void</name></type> <name pos:line="64" pos:column="22">create</name><parameter_list pos:line="64" pos:column="28">(<param><decl><type><name pos:line="64" pos:column="29">int</name></type> <name pos:line="64" pos:column="33">dialogID</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="43">bool</name></type> <name pos:line="64" pos:column="48">isRTL</name> <init pos:line="64" pos:column="54">= <expr><lit:literal type="boolean" pos:line="64" pos:column="56">false</lit:literal></expr></init></decl></param>, <name pos:line="64" pos:column="63">bool</name> <name pos:line="64" pos:column="68">msgDestParent</name> <op:operator pos:line="64" pos:column="82">=</op:operator> <lit:literal type="boolean" pos:line="64" pos:column="84">true</lit:literal>)</parameter_list>;</function_decl>

    <function><type><specifier pos:line="66" pos:column="5">virtual</specifier> <name pos:line="66" pos:column="13">bool</name></type> <name pos:line="66" pos:column="18">isCreated</name><parameter_list pos:line="66" pos:column="27">()</parameter_list> <specifier pos:line="66" pos:column="30">const</specifier> <block pos:line="66" pos:column="36">{
		<return pos:line="67" pos:column="17">return <expr><op:operator pos:line="67" pos:column="24">(</op:operator><name pos:line="67" pos:column="25">_hSelf</name> <op:operator pos:line="67" pos:column="32">!=</op:operator> <name pos:line="67" pos:column="35">NULL</name><op:operator pos:line="67" pos:column="39">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="68" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="70" pos:column="9">void</name></type> <name pos:line="70" pos:column="14">goToCenter</name><parameter_list pos:line="70" pos:column="24">()</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="72" pos:column="9">void</name></type> <name pos:line="72" pos:column="14">display</name><parameter_list pos:line="72" pos:column="21">(<param><decl><type><name pos:line="72" pos:column="22">bool</name></type> <name pos:line="72" pos:column="27">toShow</name> <init pos:line="72" pos:column="34">= <expr><lit:literal type="boolean" pos:line="72" pos:column="36">true</lit:literal></expr></init></decl></param>)</parameter_list> <specifier pos:line="72" pos:column="42">const</specifier>;</function_decl>

	<function><type><name pos:line="74" pos:column="9">POINT</name></type> <name pos:line="74" pos:column="15">getLeftTopPoint</name><parameter_list pos:line="74" pos:column="30">(<param><decl><type><name pos:line="74" pos:column="31">HWND</name></type> <name pos:line="74" pos:column="36">hwnd</name></decl></param><comment type="block" pos:line="74" pos:column="40">/*, POINT &amp; p*/</comment>)</parameter_list> <specifier pos:line="74" pos:column="57">const</specifier> <block pos:line="74" pos:column="63">{
		<decl_stmt><decl><type><name pos:line="75" pos:column="17">RECT</name></type> <name pos:line="75" pos:column="22">rc</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="76" pos:column="17">::</op:operator><name pos:line="76" pos:column="19">GetWindowRect</name></name><argument_list pos:line="76" pos:column="32">(<argument><expr><name pos:line="76" pos:column="33">hwnd</name></expr></argument>, <argument><expr><op:operator pos:line="76" pos:column="39">&amp;</op:operator><name pos:line="76" pos:column="40">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">POINT</name></type> <name pos:line="77" pos:column="23">p</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="78" pos:column="17">p</name><op:operator pos:line="78" pos:column="18">.</op:operator><name pos:line="78" pos:column="19">x</name></name> <op:operator pos:line="78" pos:column="21">=</op:operator> <name><name pos:line="78" pos:column="23">rc</name><op:operator pos:line="78" pos:column="25">.</op:operator><name pos:line="78" pos:column="26">left</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="79" pos:column="17">p</name><op:operator pos:line="79" pos:column="18">.</op:operator><name pos:line="79" pos:column="19">y</name></name> <op:operator pos:line="79" pos:column="21">=</op:operator> <name><name pos:line="79" pos:column="23">rc</name><op:operator pos:line="79" pos:column="25">.</op:operator><name pos:line="79" pos:column="26">top</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="80" pos:column="17">::</op:operator><name pos:line="80" pos:column="19">ScreenToClient</name></name><argument_list pos:line="80" pos:column="33">(<argument><expr><name pos:line="80" pos:column="34">_hSelf</name></expr></argument>, <argument><expr><op:operator pos:line="80" pos:column="42">&amp;</op:operator><name pos:line="80" pos:column="43">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="81" pos:column="17">return <expr><name pos:line="81" pos:column="24">p</name></expr>;</return>
	}</block></function><empty_stmt pos:line="82" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="84" pos:column="9">bool</name></type> <name pos:line="84" pos:column="14">isCheckedOrNot</name><parameter_list pos:line="84" pos:column="28">(<param><decl><type><name pos:line="84" pos:column="29">int</name></type> <name pos:line="84" pos:column="33">checkControlID</name></decl></param>)</parameter_list> <specifier pos:line="84" pos:column="49">const</specifier> <block pos:line="84" pos:column="55">{
		<return pos:line="85" pos:column="17">return <expr><op:operator pos:line="85" pos:column="24">(</op:operator><name pos:line="85" pos:column="25">BST_CHECKED</name> <op:operator pos:line="85" pos:column="37">==</op:operator> <call><name><op:operator pos:line="85" pos:column="40">::</op:operator><name pos:line="85" pos:column="42">SendMessage</name></name><argument_list pos:line="85" pos:column="53">(<argument><expr><call><name><op:operator pos:line="85" pos:column="54">::</op:operator><name pos:line="85" pos:column="56">GetDlgItem</name></name><argument_list pos:line="85" pos:column="66">(<argument><expr><name pos:line="85" pos:column="67">_hSelf</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="75">checkControlID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="85" pos:column="92">BM_GETCHECK</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="85" pos:column="105">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="85" pos:column="108">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="85" pos:column="110">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="86" pos:column="10">;</empty_stmt>

    <function><type><name pos:line="88" pos:column="5">void</name></type> <name pos:line="88" pos:column="10">destroy</name><parameter_list pos:line="88" pos:column="17">()</parameter_list> <block pos:line="88" pos:column="20">{
		<expr_stmt><expr><call><name><op:operator pos:line="89" pos:column="17">::</op:operator><name pos:line="89" pos:column="19">SendMessage</name></name><argument_list pos:line="89" pos:column="30">(<argument><expr><name pos:line="89" pos:column="31">_hParent</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="41">NPPM_MODELESSDIALOG</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="62">MODELESSDIALOGREMOVE</name></expr></argument>, <argument><expr><op:operator pos:line="89" pos:column="84">(</op:operator><name pos:line="89" pos:column="85">WPARAM</name><op:operator pos:line="89" pos:column="91">)</op:operator><name pos:line="89" pos:column="92">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="90" pos:column="17">::</op:operator><name pos:line="90" pos:column="19">DestroyWindow</name></name><argument_list pos:line="90" pos:column="32">(<argument><expr><name pos:line="90" pos:column="33">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="91" pos:column="10">;</empty_stmt>

</public><protected pos:line="93" pos:column="1">protected :
	<decl_stmt><decl><type><name pos:line="94" pos:column="9">RECT</name></type> <name pos:line="94" pos:column="14">_rc</name></decl>;</decl_stmt>
	<function_decl><type><specifier pos:line="95" pos:column="9">static</specifier> <name pos:line="95" pos:column="16">BOOL</name> <name pos:line="95" pos:column="21">CALLBACK</name></type> <name pos:line="95" pos:column="30">dlgProc</name><parameter_list pos:line="95" pos:column="37">(<param><decl><type><name pos:line="95" pos:column="38">HWND</name></type> <name pos:line="95" pos:column="43">hwnd</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="49">UINT</name></type> <name pos:line="95" pos:column="54">message</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="63">WPARAM</name></type> <name pos:line="95" pos:column="70">wParam</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="78">LPARAM</name></type> <name pos:line="95" pos:column="85">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><specifier pos:line="96" pos:column="9">virtual</specifier> <name pos:line="96" pos:column="17">BOOL</name> <name pos:line="96" pos:column="22">CALLBACK</name></type> <name pos:line="96" pos:column="31">run_dlgProc</name><parameter_list pos:line="96" pos:column="42">(<param><decl><type><name pos:line="96" pos:column="43">UINT</name></type> <name pos:line="96" pos:column="48">message</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="57">WPARAM</name></type> <name pos:line="96" pos:column="64">wParam</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="72">LPARAM</name></type> <name pos:line="96" pos:column="79">lParam</name></decl></param>)</parameter_list> = <lit:literal type="number" pos:line="96" pos:column="89">0</lit:literal>;</function_decl>

    <function_decl><type><name pos:line="98" pos:column="5">void</name></type> <name pos:line="98" pos:column="10">alignWith</name><parameter_list pos:line="98" pos:column="19">(<param><decl><type><name pos:line="98" pos:column="20">HWND</name></type> <name pos:line="98" pos:column="25">handle</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="33">HWND</name></type> <name pos:line="98" pos:column="38">handle2Align</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="52">PosAlign</name></type> <name pos:line="98" pos:column="61">pos</name></decl></param>, <param><decl><type><name pos:line="98" pos:column="66">POINT</name> <type:modifier pos:line="98" pos:column="72">&amp;</type:modifier></type> <name pos:line="98" pos:column="74">point</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="99" pos:column="9">HGLOBAL</name></type> <name pos:line="99" pos:column="17">makeRTLResource</name><parameter_list pos:line="99" pos:column="32">(<param><decl><type><name pos:line="99" pos:column="33">int</name></type> <name pos:line="99" pos:column="37">dialogID</name></decl></param>, <param><decl><type><name pos:line="99" pos:column="47">DLGTEMPLATE</name> <type:modifier pos:line="99" pos:column="59">*</type:modifier><type:modifier pos:line="99" pos:column="60">*</type:modifier></type><name pos:line="99" pos:column="61">ppMyDlgTemplate</name></decl></param>)</parameter_list>;</function_decl>
</protected>}</block>;</class>

<cpp:endif pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="102" pos:column="8">//STATIC_DIALOG_H</comment>
</unit>
