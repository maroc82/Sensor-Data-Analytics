<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexCmake.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexCmake.cxx
 ** Lexer for Cmake
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2007 by Cristian Adam &lt;cristian [dot] adam [at] gmx [dot] net&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// based on the NSIS lexer</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef</cpp:directive> <name pos:line="27" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="28" pos:column="1">using namespace <name pos:line="28" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="31" pos:column="1">static</specifier> <name pos:line="31" pos:column="8">bool</name></type> <name pos:line="31" pos:column="13">isCmakeNumber</name><parameter_list pos:line="31" pos:column="26">(<param><decl><type><name pos:line="31" pos:column="27">char</name></type> <name pos:line="31" pos:column="32">ch</name></decl></param>)</parameter_list>
<block pos:line="32" pos:column="1">{
    <return pos:line="33" pos:column="5">return<expr><op:operator pos:line="33" pos:column="11">(</op:operator><name pos:line="33" pos:column="12">ch</name> <op:operator pos:line="33" pos:column="15">&gt;=</op:operator> <lit:literal type="char" pos:line="33" pos:column="18">'0'</lit:literal> <op:operator pos:line="33" pos:column="22">&amp;&amp;</op:operator> <name pos:line="33" pos:column="25">ch</name> <op:operator pos:line="33" pos:column="28">&lt;=</op:operator> <lit:literal type="char" pos:line="33" pos:column="31">'9'</lit:literal><op:operator pos:line="33" pos:column="34">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="36" pos:column="1">static</specifier> <name pos:line="36" pos:column="8">bool</name></type> <name pos:line="36" pos:column="13">isCmakeChar</name><parameter_list pos:line="36" pos:column="24">(<param><decl><type><name pos:line="36" pos:column="25">char</name></type> <name pos:line="36" pos:column="30">ch</name></decl></param>)</parameter_list>
<block pos:line="37" pos:column="1">{
    <return pos:line="38" pos:column="5">return<expr><op:operator pos:line="38" pos:column="11">(</op:operator><name pos:line="38" pos:column="12">ch</name> <op:operator pos:line="38" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="18">'.'</lit:literal> <op:operator pos:line="38" pos:column="22">)</op:operator> <op:operator pos:line="38" pos:column="24">||</op:operator> <op:operator pos:line="38" pos:column="27">(</op:operator><name pos:line="38" pos:column="28">ch</name> <op:operator pos:line="38" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="34">'_'</lit:literal> <op:operator pos:line="38" pos:column="38">)</op:operator> <op:operator pos:line="38" pos:column="40">||</op:operator> <call><name pos:line="38" pos:column="43">isCmakeNumber</name><argument_list pos:line="38" pos:column="56">(<argument><expr><name pos:line="38" pos:column="57">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="38" pos:column="61">||</op:operator> <op:operator pos:line="38" pos:column="64">(</op:operator><name pos:line="38" pos:column="65">ch</name> <op:operator pos:line="38" pos:column="68">&gt;=</op:operator> <lit:literal type="char" pos:line="38" pos:column="71">'A'</lit:literal> <op:operator pos:line="38" pos:column="75">&amp;&amp;</op:operator> <name pos:line="38" pos:column="78">ch</name> <op:operator pos:line="38" pos:column="81">&lt;=</op:operator> <lit:literal type="char" pos:line="38" pos:column="84">'Z'</lit:literal><op:operator pos:line="38" pos:column="87">)</op:operator> <op:operator pos:line="38" pos:column="89">||</op:operator> <op:operator pos:line="38" pos:column="92">(</op:operator><name pos:line="38" pos:column="93">ch</name> <op:operator pos:line="38" pos:column="96">&gt;=</op:operator> <lit:literal type="char" pos:line="38" pos:column="99">'a'</lit:literal> <op:operator pos:line="38" pos:column="103">&amp;&amp;</op:operator> <name pos:line="38" pos:column="106">ch</name> <op:operator pos:line="38" pos:column="109">&lt;=</op:operator> <lit:literal type="char" pos:line="38" pos:column="112">'z'</lit:literal><op:operator pos:line="38" pos:column="115">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <name pos:line="41" pos:column="8">bool</name></type> <name pos:line="41" pos:column="13">isCmakeLetter</name><parameter_list pos:line="41" pos:column="26">(<param><decl><type><name pos:line="41" pos:column="27">char</name></type> <name pos:line="41" pos:column="32">ch</name></decl></param>)</parameter_list>
<block pos:line="42" pos:column="1">{
    <return pos:line="43" pos:column="5">return<expr><op:operator pos:line="43" pos:column="11">(</op:operator><name pos:line="43" pos:column="12">ch</name> <op:operator pos:line="43" pos:column="15">&gt;=</op:operator> <lit:literal type="char" pos:line="43" pos:column="18">'A'</lit:literal> <op:operator pos:line="43" pos:column="22">&amp;&amp;</op:operator> <name pos:line="43" pos:column="25">ch</name> <op:operator pos:line="43" pos:column="28">&lt;=</op:operator> <lit:literal type="char" pos:line="43" pos:column="31">'Z'</lit:literal><op:operator pos:line="43" pos:column="34">)</op:operator> <op:operator pos:line="43" pos:column="36">||</op:operator> <op:operator pos:line="43" pos:column="39">(</op:operator><name pos:line="43" pos:column="40">ch</name> <op:operator pos:line="43" pos:column="43">&gt;=</op:operator> <lit:literal type="char" pos:line="43" pos:column="46">'a'</lit:literal> <op:operator pos:line="43" pos:column="50">&amp;&amp;</op:operator> <name pos:line="43" pos:column="53">ch</name> <op:operator pos:line="43" pos:column="56">&lt;=</op:operator> <lit:literal type="char" pos:line="43" pos:column="59">'z'</lit:literal><op:operator pos:line="43" pos:column="62">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="46" pos:column="1">static</specifier> <name pos:line="46" pos:column="8">bool</name></type> <name pos:line="46" pos:column="13">CmakeNextLineHasElse</name><parameter_list pos:line="46" pos:column="33">(<param><decl><type><name pos:line="46" pos:column="34">unsigned</name> <name pos:line="46" pos:column="43">int</name></type> <name pos:line="46" pos:column="47">start</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="54">unsigned</name> <name pos:line="46" pos:column="63">int</name></type> <name pos:line="46" pos:column="67">end</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="72">Accessor</name> <type:modifier pos:line="46" pos:column="81">&amp;</type:modifier></type><name pos:line="46" pos:column="82">styler</name></decl></param>)</parameter_list>
<block pos:line="47" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="48" pos:column="5">int</name></type> <name pos:line="48" pos:column="9">nNextLine</name> <init pos:line="48" pos:column="19">= <expr><op:operator pos:line="48" pos:column="21">-</op:operator><lit:literal type="number" pos:line="48" pos:column="22">1</lit:literal></expr></init></decl>;</decl_stmt>
    <for pos:line="49" pos:column="5">for ( <init><decl><type><name pos:line="49" pos:column="11">unsigned</name> <name pos:line="49" pos:column="20">int</name></type> <name pos:line="49" pos:column="24">i</name> <init pos:line="49" pos:column="26">= <expr><name pos:line="49" pos:column="28">start</name></expr></init></decl>;</init> <condition><expr><name pos:line="49" pos:column="35">i</name> <op:operator pos:line="49" pos:column="37">&lt;</op:operator> <name pos:line="49" pos:column="39">end</name></expr>;</condition> <incr><expr><name pos:line="49" pos:column="44">i</name><op:operator pos:line="49" pos:column="45">++</op:operator></expr></incr> ) <block pos:line="49" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">char</name></type> <name pos:line="50" pos:column="14">cNext</name> <init pos:line="50" pos:column="20">= <expr><call><name><name pos:line="50" pos:column="22">styler</name><op:operator pos:line="50" pos:column="28">.</op:operator><name pos:line="50" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="50" pos:column="42">( <argument><expr><name pos:line="50" pos:column="44">i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">( <expr><name pos:line="51" pos:column="14">cNext</name> <op:operator pos:line="51" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="23">'\n'</lit:literal></expr> )</condition><then pos:line="51" pos:column="29"> <block pos:line="51" pos:column="30">{
            <expr_stmt><expr><name pos:line="52" pos:column="13">nNextLine</name> <op:operator pos:line="52" pos:column="23">=</op:operator> <name pos:line="52" pos:column="25">i</name><op:operator pos:line="52" pos:column="26">+</op:operator><lit:literal type="number" pos:line="52" pos:column="27">1</lit:literal></expr>;</expr_stmt>
            <break pos:line="53" pos:column="13">break;</break>
        }</block></then></if>
    }</block></for>

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">( <expr><name pos:line="57" pos:column="10">nNextLine</name> <op:operator pos:line="57" pos:column="20">==</op:operator> <op:operator pos:line="57" pos:column="23">-</op:operator><lit:literal type="number" pos:line="57" pos:column="24">1</lit:literal></expr> )</condition><then pos:line="57" pos:column="27"> <comment type="line" pos:line="57" pos:column="28">// We never foudn the next line...</comment>
        <return pos:line="58" pos:column="9">return <expr><lit:literal type="boolean" pos:line="58" pos:column="16">false</lit:literal></expr>;</return></then></if>

    <for pos:line="60" pos:column="5">for ( <init><decl><type><name pos:line="60" pos:column="11">unsigned</name> <name pos:line="60" pos:column="20">int</name></type> <name pos:line="60" pos:column="24">firstChar</name> <init pos:line="60" pos:column="34">= <expr><name pos:line="60" pos:column="36">nNextLine</name></expr></init></decl>;</init> <condition><expr><name pos:line="60" pos:column="47">firstChar</name> <op:operator pos:line="60" pos:column="57">&lt;</op:operator> <name pos:line="60" pos:column="59">end</name></expr>;</condition> <incr><expr><name pos:line="60" pos:column="64">firstChar</name><op:operator pos:line="60" pos:column="73">++</op:operator></expr></incr> ) <block pos:line="60" pos:column="78">{
        <decl_stmt><decl><type><name pos:line="61" pos:column="9">char</name></type> <name pos:line="61" pos:column="14">cNext</name> <init pos:line="61" pos:column="20">= <expr><call><name><name pos:line="61" pos:column="22">styler</name><op:operator pos:line="61" pos:column="28">.</op:operator><name pos:line="61" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="61" pos:column="42">( <argument><expr><name pos:line="61" pos:column="44">firstChar</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">( <expr><name pos:line="62" pos:column="14">cNext</name> <op:operator pos:line="62" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="62" pos:column="23">' '</lit:literal></expr> )</condition><then pos:line="62" pos:column="28">
            <continue pos:line="63" pos:column="13">continue;</continue></then></if>
        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">( <expr><name pos:line="64" pos:column="14">cNext</name> <op:operator pos:line="64" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="64" pos:column="23">'\t'</lit:literal></expr> )</condition><then pos:line="64" pos:column="29">
            <continue pos:line="65" pos:column="13">continue;</continue></then></if>
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">( <expr><call><name><name pos:line="66" pos:column="14">styler</name><op:operator pos:line="66" pos:column="20">.</op:operator><name pos:line="66" pos:column="21">Match</name></name><argument_list pos:line="66" pos:column="26">(<argument><expr><name pos:line="66" pos:column="27">firstChar</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="38">"ELSE"</lit:literal></expr></argument>)</argument_list></call>  <op:operator pos:line="66" pos:column="47">||</op:operator> <call><name><name pos:line="66" pos:column="50">styler</name><op:operator pos:line="66" pos:column="56">.</op:operator><name pos:line="66" pos:column="57">Match</name></name><argument_list pos:line="66" pos:column="62">(<argument><expr><name pos:line="66" pos:column="63">firstChar</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="74">"else"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="66" pos:column="82">
            <return pos:line="67" pos:column="13">return <expr><lit:literal type="boolean" pos:line="67" pos:column="20">true</lit:literal></expr>;</return></then></if>
        <break pos:line="68" pos:column="9">break;</break>
    }</block></for>

    <return pos:line="71" pos:column="5">return <expr><lit:literal type="boolean" pos:line="71" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="74" pos:column="1">static</specifier> <name pos:line="74" pos:column="8">int</name></type> <name pos:line="74" pos:column="12">calculateFoldCmake</name><parameter_list pos:line="74" pos:column="30">(<param><decl><type><name pos:line="74" pos:column="31">unsigned</name> <name pos:line="74" pos:column="40">int</name></type> <name pos:line="74" pos:column="44">start</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="51">unsigned</name> <name pos:line="74" pos:column="60">int</name></type> <name pos:line="74" pos:column="64">end</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="69">int</name></type> <name pos:line="74" pos:column="73">foldlevel</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="84">Accessor</name> <type:modifier pos:line="74" pos:column="93">&amp;</type:modifier></type><name pos:line="74" pos:column="94">styler</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="102">bool</name></type> <name pos:line="74" pos:column="107">bElse</name></decl></param>)</parameter_list>
<block pos:line="75" pos:column="1">{
    <comment type="line" pos:line="76" pos:column="5">// If the word is too long, it is not what we are looking for</comment>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">( <expr><name pos:line="77" pos:column="10">end</name> <op:operator pos:line="77" pos:column="14">-</op:operator> <name pos:line="77" pos:column="16">start</name> <op:operator pos:line="77" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="77" pos:column="24">20</lit:literal></expr> )</condition><then pos:line="77" pos:column="28">
        <return pos:line="78" pos:column="9">return <expr><name pos:line="78" pos:column="16">foldlevel</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name pos:line="80" pos:column="5">int</name></type> <name pos:line="80" pos:column="9">newFoldlevel</name> <init pos:line="80" pos:column="22">= <expr><name pos:line="80" pos:column="24">foldlevel</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="82" pos:column="5">char</name></type> <name><name pos:line="82" pos:column="10">s</name><index pos:line="82" pos:column="11">[<expr><lit:literal type="number" pos:line="82" pos:column="12">20</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:line="82" pos:column="17">// The key word we are looking for has atmost 13 characters</comment>
    <for pos:line="83" pos:column="5">for (<init><decl><type><name pos:line="83" pos:column="10">unsigned</name> <name pos:line="83" pos:column="19">int</name></type> <name pos:line="83" pos:column="23">i</name> <init pos:line="83" pos:column="25">= <expr><lit:literal type="number" pos:line="83" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="83" pos:column="30">i</name> <op:operator pos:line="83" pos:column="32">&lt;</op:operator> <name pos:line="83" pos:column="34">end</name> <op:operator pos:line="83" pos:column="38">-</op:operator> <name pos:line="83" pos:column="40">start</name> <op:operator pos:line="83" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="83" pos:column="48">1</lit:literal> <op:operator pos:line="83" pos:column="50">&amp;&amp;</op:operator> <name pos:line="83" pos:column="53">i</name> <op:operator pos:line="83" pos:column="55">&lt;</op:operator> <lit:literal type="number" pos:line="83" pos:column="57">19</lit:literal></expr>;</condition> <incr><expr><name pos:line="83" pos:column="61">i</name><op:operator pos:line="83" pos:column="62">++</op:operator></expr></incr>) <block pos:line="83" pos:column="66">{
        <expr_stmt><expr><name><name pos:line="84" pos:column="9">s</name><index pos:line="84" pos:column="10">[<expr><name pos:line="84" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="84" pos:column="14">=</op:operator> <call><name><name pos:line="84" pos:column="16">static_cast</name><argument_list pos:line="84" pos:column="27">&lt;<argument><expr><name pos:line="84" pos:column="28">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="84" pos:column="33">( <argument><expr><name><name pos:line="84" pos:column="35">styler</name><index pos:line="84" pos:column="41">[ <expr><name pos:line="84" pos:column="43">start</name> <op:operator pos:line="84" pos:column="49">+</op:operator> <name pos:line="84" pos:column="51">i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="85" pos:column="9">s</name><index pos:line="85" pos:column="10">[<expr><name pos:line="85" pos:column="11">i</name> <op:operator pos:line="85" pos:column="13">+</op:operator> <lit:literal type="number" pos:line="85" pos:column="15">1</lit:literal></expr>]</index></name> <op:operator pos:line="85" pos:column="18">=</op:operator> <lit:literal type="char" pos:line="85" pos:column="20">'\0'</lit:literal></expr>;</expr_stmt>
    }</block></for>

    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">( <expr><call><name pos:line="88" pos:column="10">CompareCaseInsensitive</name><argument_list pos:line="88" pos:column="32">(<argument><expr><name pos:line="88" pos:column="33">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="36">"IF"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="88" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="88" pos:column="45">0</lit:literal> <op:operator pos:line="88" pos:column="47">||</op:operator> <call><name pos:line="88" pos:column="50">CompareCaseInsensitive</name><argument_list pos:line="88" pos:column="72">(<argument><expr><name pos:line="88" pos:column="73">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="88" pos:column="76">"WHILE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="88" pos:column="85">==</op:operator> <lit:literal type="number" pos:line="88" pos:column="88">0</lit:literal>
         <op:operator pos:line="89" pos:column="10">||</op:operator> <call><name pos:line="89" pos:column="13">CompareCaseInsensitive</name><argument_list pos:line="89" pos:column="35">(<argument><expr><name pos:line="89" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="39">"MACRO"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="89" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="89" pos:column="51">0</lit:literal> <op:operator pos:line="89" pos:column="53">||</op:operator> <call><name pos:line="89" pos:column="56">CompareCaseInsensitive</name><argument_list pos:line="89" pos:column="78">(<argument><expr><name pos:line="89" pos:column="79">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="82">"FOREACH"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="89" pos:column="93">==</op:operator> <lit:literal type="number" pos:line="89" pos:column="96">0</lit:literal>
         <op:operator pos:line="90" pos:column="10">||</op:operator> <call><name pos:line="90" pos:column="13">CompareCaseInsensitive</name><argument_list pos:line="90" pos:column="35">(<argument><expr><name pos:line="90" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="90" pos:column="39">"ELSEIF"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="90" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="90" pos:column="52">0</lit:literal></expr> )</condition><then pos:line="90" pos:column="55">
        <expr_stmt><expr><name pos:line="91" pos:column="9">newFoldlevel</name><op:operator pos:line="91" pos:column="21">++</op:operator></expr>;</expr_stmt></then>
    <else pos:line="92" pos:column="5">else <if pos:line="92" pos:column="10">if <condition pos:line="92" pos:column="13">( <expr><call><name pos:line="92" pos:column="15">CompareCaseInsensitive</name><argument_list pos:line="92" pos:column="37">(<argument><expr><name pos:line="92" pos:column="38">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="41">"ENDIF"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="92" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="92" pos:column="53">0</lit:literal> <op:operator pos:line="92" pos:column="55">||</op:operator> <call><name pos:line="92" pos:column="58">CompareCaseInsensitive</name><argument_list pos:line="92" pos:column="80">(<argument><expr><name pos:line="92" pos:column="81">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="92" pos:column="84">"ENDWHILE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="92" pos:column="96">==</op:operator> <lit:literal type="number" pos:line="92" pos:column="99">0</lit:literal>
              <op:operator pos:line="93" pos:column="15">||</op:operator> <call><name pos:line="93" pos:column="18">CompareCaseInsensitive</name><argument_list pos:line="93" pos:column="40">(<argument><expr><name pos:line="93" pos:column="41">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="44">"ENDMACRO"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="93" pos:column="59">0</lit:literal> <op:operator pos:line="93" pos:column="61">||</op:operator> <call><name pos:line="93" pos:column="64">CompareCaseInsensitive</name><argument_list pos:line="93" pos:column="86">(<argument><expr><name pos:line="93" pos:column="87">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="90">"ENDFOREACH"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="104">==</op:operator> <lit:literal type="number" pos:line="93" pos:column="107">0</lit:literal></expr>)</condition><then pos:line="93" pos:column="109">
        <expr_stmt><expr><name pos:line="94" pos:column="9">newFoldlevel</name><op:operator pos:line="94" pos:column="21">--</op:operator></expr>;</expr_stmt></then>
    <else pos:line="95" pos:column="5">else <if pos:line="95" pos:column="10">if <condition pos:line="95" pos:column="13">( <expr><name pos:line="95" pos:column="15">bElse</name> <op:operator pos:line="95" pos:column="21">&amp;&amp;</op:operator> <call><name pos:line="95" pos:column="24">CompareCaseInsensitive</name><argument_list pos:line="95" pos:column="46">(<argument><expr><name pos:line="95" pos:column="47">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="50">"ELSEIF"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="95" pos:column="60">==</op:operator> <lit:literal type="number" pos:line="95" pos:column="63">0</lit:literal></expr> )</condition><then pos:line="95" pos:column="66">
        <expr_stmt><expr><name pos:line="96" pos:column="9">newFoldlevel</name><op:operator pos:line="96" pos:column="21">++</op:operator></expr>;</expr_stmt></then>
    <else pos:line="97" pos:column="5">else <if pos:line="97" pos:column="10">if <condition pos:line="97" pos:column="13">( <expr><name pos:line="97" pos:column="15">bElse</name> <op:operator pos:line="97" pos:column="21">&amp;&amp;</op:operator> <call><name pos:line="97" pos:column="24">CompareCaseInsensitive</name><argument_list pos:line="97" pos:column="46">(<argument><expr><name pos:line="97" pos:column="47">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="50">"ELSE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="97" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="97" pos:column="61">0</lit:literal></expr> )</condition><then pos:line="97" pos:column="64">
        <expr_stmt><expr><name pos:line="98" pos:column="9">newFoldlevel</name><op:operator pos:line="98" pos:column="21">++</op:operator></expr>;</expr_stmt></then></if></else></if></else></if></else></if>

    <return pos:line="100" pos:column="5">return <expr><name pos:line="100" pos:column="12">newFoldlevel</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="103" pos:column="1">static</specifier> <name pos:line="103" pos:column="8">int</name></type> <name pos:line="103" pos:column="12">classifyWordCmake</name><parameter_list pos:line="103" pos:column="29">(<param><decl><type><name pos:line="103" pos:column="30">unsigned</name> <name pos:line="103" pos:column="39">int</name></type> <name pos:line="103" pos:column="43">start</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="50">unsigned</name> <name pos:line="103" pos:column="59">int</name></type> <name pos:line="103" pos:column="63">end</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="68">WordList</name> <type:modifier pos:line="103" pos:column="77">*</type:modifier></type><name><name pos:line="103" pos:column="78">keywordLists</name><index pos:line="103" pos:column="90">[]</index></name></decl></param>, <param><decl><type><name pos:line="103" pos:column="94">Accessor</name> <type:modifier pos:line="103" pos:column="103">&amp;</type:modifier></type><name pos:line="103" pos:column="104">styler</name></decl></param> )</parameter_list>
<block pos:line="104" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="105" pos:column="5">char</name></type> <name><name pos:line="105" pos:column="10">word</name><index pos:line="105" pos:column="14">[<expr><lit:literal type="number" pos:line="105" pos:column="15">100</lit:literal></expr>]</index></name> <init pos:line="105" pos:column="20">= <expr><block pos:line="105" pos:column="22">{<expr><lit:literal type="number" pos:line="105" pos:column="23">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="106" pos:column="5">char</name></type> <name><name pos:line="106" pos:column="10">lowercaseWord</name><index pos:line="106" pos:column="23">[<expr><lit:literal type="number" pos:line="106" pos:column="24">100</lit:literal></expr>]</index></name> <init pos:line="106" pos:column="29">= <expr><block pos:line="106" pos:column="31">{<expr><lit:literal type="number" pos:line="106" pos:column="32">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="108" pos:column="5">WordList</name> <type:modifier pos:line="108" pos:column="14">&amp;</type:modifier></type><name pos:line="108" pos:column="15">Commands</name> <init pos:line="108" pos:column="24">= <expr><op:operator pos:line="108" pos:column="26">*</op:operator><name><name pos:line="108" pos:column="27">keywordLists</name><index pos:line="108" pos:column="39">[<expr><lit:literal type="number" pos:line="108" pos:column="40">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="109" pos:column="5">WordList</name> <type:modifier pos:line="109" pos:column="14">&amp;</type:modifier></type><name pos:line="109" pos:column="15">Parameters</name> <init pos:line="109" pos:column="26">= <expr><op:operator pos:line="109" pos:column="28">*</op:operator><name><name pos:line="109" pos:column="29">keywordLists</name><index pos:line="109" pos:column="41">[<expr><lit:literal type="number" pos:line="109" pos:column="42">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="110" pos:column="5">WordList</name> <type:modifier pos:line="110" pos:column="14">&amp;</type:modifier></type><name pos:line="110" pos:column="15">UserDefined</name> <init pos:line="110" pos:column="27">= <expr><op:operator pos:line="110" pos:column="29">*</op:operator><name><name pos:line="110" pos:column="30">keywordLists</name><index pos:line="110" pos:column="42">[<expr><lit:literal type="number" pos:line="110" pos:column="43">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <for pos:line="112" pos:column="5">for (<init><decl><type><name pos:line="112" pos:column="10">unsigned</name> <name pos:line="112" pos:column="19">int</name></type> <name pos:line="112" pos:column="23">i</name> <init pos:line="112" pos:column="25">= <expr><lit:literal type="number" pos:line="112" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="112" pos:column="30">i</name> <op:operator pos:line="112" pos:column="32">&lt;</op:operator> <name pos:line="112" pos:column="34">end</name> <op:operator pos:line="112" pos:column="38">-</op:operator> <name pos:line="112" pos:column="40">start</name> <op:operator pos:line="112" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="112" pos:column="48">1</lit:literal> <op:operator pos:line="112" pos:column="50">&amp;&amp;</op:operator> <name pos:line="112" pos:column="53">i</name> <op:operator pos:line="112" pos:column="55">&lt;</op:operator> <lit:literal type="number" pos:line="112" pos:column="57">99</lit:literal></expr>;</condition> <incr><expr><name pos:line="112" pos:column="61">i</name><op:operator pos:line="112" pos:column="62">++</op:operator></expr></incr>) <block pos:line="112" pos:column="66">{
        <expr_stmt><expr><name><name pos:line="113" pos:column="9">word</name><index pos:line="113" pos:column="13">[<expr><name pos:line="113" pos:column="14">i</name></expr>]</index></name> <op:operator pos:line="113" pos:column="17">=</op:operator> <call><name><name pos:line="113" pos:column="19">static_cast</name><argument_list pos:line="113" pos:column="30">&lt;<argument><expr><name pos:line="113" pos:column="31">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="113" pos:column="36">( <argument><expr><name><name pos:line="113" pos:column="38">styler</name><index pos:line="113" pos:column="44">[ <expr><name pos:line="113" pos:column="46">start</name> <op:operator pos:line="113" pos:column="52">+</op:operator> <name pos:line="113" pos:column="54">i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name pos:line="114" pos:column="9">lowercaseWord</name><index pos:line="114" pos:column="22">[<expr><name pos:line="114" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="114" pos:column="26">=</op:operator> <call><name><name pos:line="114" pos:column="28">static_cast</name><argument_list pos:line="114" pos:column="39">&lt;<argument><expr><name pos:line="114" pos:column="40">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="114" pos:column="45">(<argument><expr><call><name pos:line="114" pos:column="46">tolower</name><argument_list pos:line="114" pos:column="53">(<argument><expr><name><name pos:line="114" pos:column="54">word</name><index pos:line="114" pos:column="58">[<expr><name pos:line="114" pos:column="59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <comment type="line" pos:line="117" pos:column="5">// Check for special words...</comment>
    <if pos:line="118" pos:column="5">if <condition pos:line="118" pos:column="8">( <expr><call><name pos:line="118" pos:column="10">CompareCaseInsensitive</name><argument_list pos:line="118" pos:column="32">(<argument><expr><name pos:line="118" pos:column="33">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="39">"MACRO"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="118" pos:column="51">0</lit:literal> <op:operator pos:line="118" pos:column="53">||</op:operator> <call><name pos:line="118" pos:column="56">CompareCaseInsensitive</name><argument_list pos:line="118" pos:column="78">(<argument><expr><name pos:line="118" pos:column="79">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="118" pos:column="85">"ENDMACRO"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="118" pos:column="97">==</op:operator> <lit:literal type="number" pos:line="118" pos:column="100">0</lit:literal></expr> )</condition><then pos:line="118" pos:column="103">
        <return pos:line="119" pos:column="9">return <expr><name pos:line="119" pos:column="16">SCE_CMAKE_MACRODEF</name></expr>;</return></then></if>

    <if pos:line="121" pos:column="5">if <condition pos:line="121" pos:column="8">( <expr><call><name pos:line="121" pos:column="10">CompareCaseInsensitive</name><argument_list pos:line="121" pos:column="32">(<argument><expr><name pos:line="121" pos:column="33">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="39">"IF"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="121" pos:column="48">0</lit:literal> <op:operator pos:line="121" pos:column="50">||</op:operator>  <call><name pos:line="121" pos:column="54">CompareCaseInsensitive</name><argument_list pos:line="121" pos:column="76">(<argument><expr><name pos:line="121" pos:column="77">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="121" pos:column="83">"ENDIF"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="92">==</op:operator> <lit:literal type="number" pos:line="121" pos:column="95">0</lit:literal></expr> )</condition><then pos:line="121" pos:column="98">
        <return pos:line="122" pos:column="9">return <expr><name pos:line="122" pos:column="16">SCE_CMAKE_IFDEFINEDEF</name></expr>;</return></then></if>

    <if pos:line="124" pos:column="5">if <condition pos:line="124" pos:column="8">( <expr><call><name pos:line="124" pos:column="10">CompareCaseInsensitive</name><argument_list pos:line="124" pos:column="32">(<argument><expr><name pos:line="124" pos:column="33">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="124" pos:column="39">"ELSEIF"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="124" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="124" pos:column="52">0</lit:literal>  <op:operator pos:line="124" pos:column="55">||</op:operator> <call><name pos:line="124" pos:column="58">CompareCaseInsensitive</name><argument_list pos:line="124" pos:column="80">(<argument><expr><name pos:line="124" pos:column="81">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="124" pos:column="87">"ELSE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="124" pos:column="95">==</op:operator> <lit:literal type="number" pos:line="124" pos:column="98">0</lit:literal></expr> )</condition><then pos:line="124" pos:column="101">
        <return pos:line="125" pos:column="9">return <expr><name pos:line="125" pos:column="16">SCE_CMAKE_IFDEFINEDEF</name></expr>;</return></then></if>

    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">( <expr><call><name pos:line="127" pos:column="10">CompareCaseInsensitive</name><argument_list pos:line="127" pos:column="32">(<argument><expr><name pos:line="127" pos:column="33">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="127" pos:column="39">"WHILE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="127" pos:column="51">0</lit:literal> <op:operator pos:line="127" pos:column="53">||</op:operator> <call><name pos:line="127" pos:column="56">CompareCaseInsensitive</name><argument_list pos:line="127" pos:column="78">(<argument><expr><name pos:line="127" pos:column="79">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="127" pos:column="85">"ENDWHILE"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="127" pos:column="97">==</op:operator> <lit:literal type="number" pos:line="127" pos:column="100">0</lit:literal></expr>)</condition><then pos:line="127" pos:column="102">
        <return pos:line="128" pos:column="9">return <expr><name pos:line="128" pos:column="16">SCE_CMAKE_WHILEDEF</name></expr>;</return></then></if>

    <if pos:line="130" pos:column="5">if <condition pos:line="130" pos:column="8">( <expr><call><name pos:line="130" pos:column="10">CompareCaseInsensitive</name><argument_list pos:line="130" pos:column="32">(<argument><expr><name pos:line="130" pos:column="33">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="39">"FOREACH"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="130" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="130" pos:column="53">0</lit:literal> <op:operator pos:line="130" pos:column="55">||</op:operator> <call><name pos:line="130" pos:column="58">CompareCaseInsensitive</name><argument_list pos:line="130" pos:column="80">(<argument><expr><name pos:line="130" pos:column="81">word</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="130" pos:column="87">"ENDFOREACH"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="130" pos:column="101">==</op:operator> <lit:literal type="number" pos:line="130" pos:column="104">0</lit:literal></expr>)</condition><then pos:line="130" pos:column="106">
        <return pos:line="131" pos:column="9">return <expr><name pos:line="131" pos:column="16">SCE_CMAKE_FOREACHDEF</name></expr>;</return></then></if>

    <if pos:line="133" pos:column="5">if <condition pos:line="133" pos:column="8">( <expr><call><name><name pos:line="133" pos:column="10">Commands</name><op:operator pos:line="133" pos:column="18">.</op:operator><name pos:line="133" pos:column="19">InList</name></name><argument_list pos:line="133" pos:column="25">(<argument><expr><name pos:line="133" pos:column="26">lowercaseWord</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="133" pos:column="42">
        <return pos:line="134" pos:column="9">return <expr><name pos:line="134" pos:column="16">SCE_CMAKE_COMMANDS</name></expr>;</return></then></if>

    <if pos:line="136" pos:column="5">if <condition pos:line="136" pos:column="8">( <expr><call><name><name pos:line="136" pos:column="10">Parameters</name><op:operator pos:line="136" pos:column="20">.</op:operator><name pos:line="136" pos:column="21">InList</name></name><argument_list pos:line="136" pos:column="27">(<argument><expr><name pos:line="136" pos:column="28">word</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="136" pos:column="35">
        <return pos:line="137" pos:column="9">return <expr><name pos:line="137" pos:column="16">SCE_CMAKE_PARAMETERS</name></expr>;</return></then></if>


    <if pos:line="140" pos:column="5">if <condition pos:line="140" pos:column="8">( <expr><call><name><name pos:line="140" pos:column="10">UserDefined</name><op:operator pos:line="140" pos:column="21">.</op:operator><name pos:line="140" pos:column="22">InList</name></name><argument_list pos:line="140" pos:column="28">(<argument><expr><name pos:line="140" pos:column="29">word</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="140" pos:column="36">
        <return pos:line="141" pos:column="9">return <expr><name pos:line="141" pos:column="16">SCE_CMAKE_USERDEFINED</name></expr>;</return></then></if>

    <if pos:line="143" pos:column="5">if <condition pos:line="143" pos:column="8">( <expr><call><name pos:line="143" pos:column="10">strlen</name><argument_list pos:line="143" pos:column="16">(<argument><expr><name pos:line="143" pos:column="17">word</name></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="23">&gt;</op:operator> <lit:literal type="number" pos:line="143" pos:column="25">3</lit:literal></expr> )</condition><then pos:line="143" pos:column="28"> <block pos:line="143" pos:column="29">{
        <if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">( <expr><name><name pos:line="144" pos:column="14">word</name><index pos:line="144" pos:column="18">[<expr><lit:literal type="number" pos:line="144" pos:column="19">1</lit:literal></expr>]</index></name> <op:operator pos:line="144" pos:column="22">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="25">'{'</lit:literal> <op:operator pos:line="144" pos:column="29">&amp;&amp;</op:operator> <name><name pos:line="144" pos:column="32">word</name><index pos:line="144" pos:column="36">[<expr><call><name pos:line="144" pos:column="37">strlen</name><argument_list pos:line="144" pos:column="43">(<argument><expr><name pos:line="144" pos:column="44">word</name></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="49">-</op:operator><lit:literal type="number" pos:line="144" pos:column="50">1</lit:literal></expr>]</index></name> <op:operator pos:line="144" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="56">'}'</lit:literal></expr> )</condition><then pos:line="144" pos:column="61">
            <return pos:line="145" pos:column="13">return <expr><name pos:line="145" pos:column="20">SCE_CMAKE_VARIABLE</name></expr>;</return></then></if>
    }</block></then></if>

    <comment type="line" pos:line="148" pos:column="5">// To check for numbers</comment>
    <if pos:line="149" pos:column="5">if <condition pos:line="149" pos:column="8">( <expr><call><name pos:line="149" pos:column="10">isCmakeNumber</name><argument_list pos:line="149" pos:column="23">( <argument><expr><name><name pos:line="149" pos:column="25">word</name><index pos:line="149" pos:column="29">[<expr><lit:literal type="number" pos:line="149" pos:column="30">0</lit:literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="149" pos:column="36"> <block pos:line="149" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="150" pos:column="9">bool</name></type> <name pos:line="150" pos:column="14">bHasSimpleCmakeNumber</name> <init pos:line="150" pos:column="36">= <expr><lit:literal type="boolean" pos:line="150" pos:column="38">true</lit:literal></expr></init></decl>;</decl_stmt>
        <for pos:line="151" pos:column="9">for (<init><decl><type><name pos:line="151" pos:column="14">unsigned</name> <name pos:line="151" pos:column="23">int</name></type> <name pos:line="151" pos:column="27">j</name> <init pos:line="151" pos:column="29">= <expr><lit:literal type="number" pos:line="151" pos:column="31">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="151" pos:column="34">j</name> <op:operator pos:line="151" pos:column="36">&lt;</op:operator> <name pos:line="151" pos:column="38">end</name> <op:operator pos:line="151" pos:column="42">-</op:operator> <name pos:line="151" pos:column="44">start</name> <op:operator pos:line="151" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="151" pos:column="52">1</lit:literal> <op:operator pos:line="151" pos:column="54">&amp;&amp;</op:operator> <name pos:line="151" pos:column="57">j</name> <op:operator pos:line="151" pos:column="59">&lt;</op:operator> <lit:literal type="number" pos:line="151" pos:column="61">99</lit:literal></expr>;</condition> <incr><expr><name pos:line="151" pos:column="65">j</name><op:operator pos:line="151" pos:column="66">++</op:operator></expr></incr>) <block pos:line="151" pos:column="70">{
            <if pos:line="152" pos:column="13">if <condition pos:line="152" pos:column="16">( <expr><op:operator pos:line="152" pos:column="18">!</op:operator><call><name pos:line="152" pos:column="19">isCmakeNumber</name><argument_list pos:line="152" pos:column="32">( <argument><expr><name><name pos:line="152" pos:column="34">word</name><index pos:line="152" pos:column="38">[<expr><name pos:line="152" pos:column="39">j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="152" pos:column="45"> <block pos:line="152" pos:column="46">{
                <expr_stmt><expr><name pos:line="153" pos:column="17">bHasSimpleCmakeNumber</name> <op:operator pos:line="153" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="153" pos:column="41">false</lit:literal></expr>;</expr_stmt>
                <break pos:line="154" pos:column="17">break;</break>
            }</block></then></if>
        }</block></for>

        <if pos:line="158" pos:column="9">if <condition pos:line="158" pos:column="12">( <expr><name pos:line="158" pos:column="14">bHasSimpleCmakeNumber</name></expr> )</condition><then pos:line="158" pos:column="37">
            <return pos:line="159" pos:column="13">return <expr><name pos:line="159" pos:column="20">SCE_CMAKE_NUMBER</name></expr>;</return></then></if>
    }</block></then></if>

    <return pos:line="162" pos:column="5">return <expr><name pos:line="162" pos:column="12">SCE_CMAKE_DEFAULT</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="165" pos:column="1">static</specifier> <name pos:line="165" pos:column="8">void</name></type> <name pos:line="165" pos:column="13">ColouriseCmakeDoc</name><parameter_list pos:line="165" pos:column="30">(<param><decl><type><name pos:line="165" pos:column="31">unsigned</name> <name pos:line="165" pos:column="40">int</name></type> <name pos:line="165" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="54">int</name></type> <name pos:line="165" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="66">int</name></type></decl></param>, <param><decl><type><name pos:line="165" pos:column="71">WordList</name> <type:modifier pos:line="165" pos:column="80">*</type:modifier></type><name><name pos:line="165" pos:column="81">keywordLists</name><index pos:line="165" pos:column="93">[]</index></name></decl></param>, <param><decl><type><name pos:line="165" pos:column="97">Accessor</name> <type:modifier pos:line="165" pos:column="106">&amp;</type:modifier></type><name pos:line="165" pos:column="107">styler</name></decl></param>)</parameter_list>
<block pos:line="166" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="167" pos:column="5">int</name></type> <name pos:line="167" pos:column="9">state</name> <init pos:line="167" pos:column="15">= <expr><name pos:line="167" pos:column="17">SCE_CMAKE_DEFAULT</name></expr></init></decl>;</decl_stmt>
    <if pos:line="168" pos:column="5">if <condition pos:line="168" pos:column="8">( <expr><name pos:line="168" pos:column="10">startPos</name> <op:operator pos:line="168" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="168" pos:column="21">0</lit:literal></expr> )</condition><then pos:line="168" pos:column="24">
        <expr_stmt><expr><name pos:line="169" pos:column="9">state</name> <op:operator pos:line="169" pos:column="15">=</op:operator> <call><name><name pos:line="169" pos:column="17">styler</name><op:operator pos:line="169" pos:column="23">.</op:operator><name pos:line="169" pos:column="24">StyleAt</name></name><argument_list pos:line="169" pos:column="31">(<argument><expr><name pos:line="169" pos:column="32">startPos</name><op:operator pos:line="169" pos:column="40">-</op:operator><lit:literal type="number" pos:line="169" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> <comment type="line" pos:line="169" pos:column="45">// Use the style from the previous line, usually default, but could be commentbox</comment>

    <expr_stmt><expr><call><name><name pos:line="171" pos:column="5">styler</name><op:operator pos:line="171" pos:column="11">.</op:operator><name pos:line="171" pos:column="12">StartAt</name></name><argument_list pos:line="171" pos:column="19">( <argument><expr><name pos:line="171" pos:column="21">startPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="172" pos:column="5">styler</name><op:operator pos:line="172" pos:column="11">.</op:operator><name pos:line="172" pos:column="12">GetLine</name></name><argument_list pos:line="172" pos:column="19">( <argument><expr><name pos:line="172" pos:column="21">startPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="174" pos:column="5">unsigned</name> <name pos:line="174" pos:column="14">int</name></type> <name pos:line="174" pos:column="18">nLengthDoc</name> <init pos:line="174" pos:column="29">= <expr><name pos:line="174" pos:column="31">startPos</name> <op:operator pos:line="174" pos:column="40">+</op:operator> <name pos:line="174" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name pos:line="175" pos:column="5">styler</name><op:operator pos:line="175" pos:column="11">.</op:operator><name pos:line="175" pos:column="12">StartSegment</name></name><argument_list pos:line="175" pos:column="24">( <argument><expr><name pos:line="175" pos:column="26">startPos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="177" pos:column="5">char</name></type> <name pos:line="177" pos:column="10">cCurrChar</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="178" pos:column="5">bool</name></type> <name pos:line="178" pos:column="10">bVarInString</name> <init pos:line="178" pos:column="23">= <expr><lit:literal type="boolean" pos:line="178" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="179" pos:column="5">bool</name></type> <name pos:line="179" pos:column="10">bClassicVarInString</name> <init pos:line="179" pos:column="30">= <expr><lit:literal type="boolean" pos:line="179" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="181" pos:column="5">unsigned</name> <name pos:line="181" pos:column="14">int</name></type> <name pos:line="181" pos:column="18">i</name></decl>;</decl_stmt>
    <for pos:line="182" pos:column="5">for ( <init><expr><name pos:line="182" pos:column="11">i</name> <op:operator pos:line="182" pos:column="13">=</op:operator> <name pos:line="182" pos:column="15">startPos</name></expr>;</init> <condition><expr><name pos:line="182" pos:column="25">i</name> <op:operator pos:line="182" pos:column="27">&lt;</op:operator> <name pos:line="182" pos:column="29">nLengthDoc</name></expr>;</condition> <incr><expr><name pos:line="182" pos:column="41">i</name><op:operator pos:line="182" pos:column="42">++</op:operator></expr></incr> ) <block pos:line="182" pos:column="47">{
        <expr_stmt><expr><name pos:line="183" pos:column="9">cCurrChar</name> <op:operator pos:line="183" pos:column="19">=</op:operator> <call><name><name pos:line="183" pos:column="21">styler</name><op:operator pos:line="183" pos:column="27">.</op:operator><name pos:line="183" pos:column="28">SafeGetCharAt</name></name><argument_list pos:line="183" pos:column="41">( <argument><expr><name pos:line="183" pos:column="43">i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name pos:line="184" pos:column="9">char</name></type> <name pos:line="184" pos:column="14">cNextChar</name> <init pos:line="184" pos:column="24">= <expr><call><name><name pos:line="184" pos:column="26">styler</name><op:operator pos:line="184" pos:column="32">.</op:operator><name pos:line="184" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="184" pos:column="46">(<argument><expr><name pos:line="184" pos:column="47">i</name><op:operator pos:line="184" pos:column="48">+</op:operator><lit:literal type="number" pos:line="184" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch pos:line="186" pos:column="9">switch <condition pos:line="186" pos:column="16">(<expr><name pos:line="186" pos:column="17">state</name></expr>)</condition> <block pos:line="186" pos:column="24">{
        <case pos:line="187" pos:column="9">case <expr><name pos:line="187" pos:column="14">SCE_CMAKE_DEFAULT</name></expr>:
            <if pos:line="188" pos:column="13">if <condition pos:line="188" pos:column="16">( <expr><name pos:line="188" pos:column="18">cCurrChar</name> <op:operator pos:line="188" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="188" pos:column="31">'#'</lit:literal></expr> )</condition><then pos:line="188" pos:column="36"> <block pos:line="188" pos:column="37">{ <comment type="line" pos:line="188" pos:column="39">// we have a comment line</comment>
                <expr_stmt><expr><call><name><name pos:line="189" pos:column="17">styler</name><op:operator pos:line="189" pos:column="23">.</op:operator><name pos:line="189" pos:column="24">ColourTo</name></name><argument_list pos:line="189" pos:column="32">(<argument><expr><name pos:line="189" pos:column="33">i</name><op:operator pos:line="189" pos:column="34">-</op:operator><lit:literal type="number" pos:line="189" pos:column="35">1</lit:literal></expr></argument>, <argument><expr><name pos:line="189" pos:column="38">state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="190" pos:column="17">state</name> <op:operator pos:line="190" pos:column="23">=</op:operator> <name pos:line="190" pos:column="25">SCE_CMAKE_COMMENT</name></expr>;</expr_stmt>
                <break pos:line="191" pos:column="17">break;</break>
            }</block></then></if>
            <if pos:line="193" pos:column="13">if <condition pos:line="193" pos:column="16">( <expr><name pos:line="193" pos:column="18">cCurrChar</name> <op:operator pos:line="193" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="193" pos:column="31">'"'</lit:literal></expr> )</condition><then pos:line="193" pos:column="36"> <block pos:line="193" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="194" pos:column="17">styler</name><op:operator pos:line="194" pos:column="23">.</op:operator><name pos:line="194" pos:column="24">ColourTo</name></name><argument_list pos:line="194" pos:column="32">(<argument><expr><name pos:line="194" pos:column="33">i</name><op:operator pos:line="194" pos:column="34">-</op:operator><lit:literal type="number" pos:line="194" pos:column="35">1</lit:literal></expr></argument>, <argument><expr><name pos:line="194" pos:column="38">state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="195" pos:column="17">state</name> <op:operator pos:line="195" pos:column="23">=</op:operator> <name pos:line="195" pos:column="25">SCE_CMAKE_STRINGDQ</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="196" pos:column="17">bVarInString</name> <op:operator pos:line="196" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="196" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="197" pos:column="17">bClassicVarInString</name> <op:operator pos:line="197" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="197" pos:column="39">false</lit:literal></expr>;</expr_stmt>
                <break pos:line="198" pos:column="17">break;</break>
            }</block></then></if>
            <if pos:line="200" pos:column="13">if <condition pos:line="200" pos:column="16">( <expr><name pos:line="200" pos:column="18">cCurrChar</name> <op:operator pos:line="200" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="31">'\''</lit:literal></expr> )</condition><then pos:line="200" pos:column="37"> <block pos:line="200" pos:column="38">{
                <expr_stmt><expr><call><name><name pos:line="201" pos:column="17">styler</name><op:operator pos:line="201" pos:column="23">.</op:operator><name pos:line="201" pos:column="24">ColourTo</name></name><argument_list pos:line="201" pos:column="32">(<argument><expr><name pos:line="201" pos:column="33">i</name><op:operator pos:line="201" pos:column="34">-</op:operator><lit:literal type="number" pos:line="201" pos:column="35">1</lit:literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="38">state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="202" pos:column="17">state</name> <op:operator pos:line="202" pos:column="23">=</op:operator> <name pos:line="202" pos:column="25">SCE_CMAKE_STRINGRQ</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="203" pos:column="17">bVarInString</name> <op:operator pos:line="203" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="203" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="204" pos:column="17">bClassicVarInString</name> <op:operator pos:line="204" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="204" pos:column="39">false</lit:literal></expr>;</expr_stmt>
                <break pos:line="205" pos:column="17">break;</break>
            }</block></then></if>
            <if pos:line="207" pos:column="13">if <condition pos:line="207" pos:column="16">( <expr><name pos:line="207" pos:column="18">cCurrChar</name> <op:operator pos:line="207" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="207" pos:column="31">'`'</lit:literal></expr> )</condition><then pos:line="207" pos:column="36"> <block pos:line="207" pos:column="37">{
                <expr_stmt><expr><call><name><name pos:line="208" pos:column="17">styler</name><op:operator pos:line="208" pos:column="23">.</op:operator><name pos:line="208" pos:column="24">ColourTo</name></name><argument_list pos:line="208" pos:column="32">(<argument><expr><name pos:line="208" pos:column="33">i</name><op:operator pos:line="208" pos:column="34">-</op:operator><lit:literal type="number" pos:line="208" pos:column="35">1</lit:literal></expr></argument>, <argument><expr><name pos:line="208" pos:column="38">state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="209" pos:column="17">state</name> <op:operator pos:line="209" pos:column="23">=</op:operator> <name pos:line="209" pos:column="25">SCE_CMAKE_STRINGLQ</name></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="210" pos:column="17">bVarInString</name> <op:operator pos:line="210" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="210" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="211" pos:column="17">bClassicVarInString</name> <op:operator pos:line="211" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="211" pos:column="39">false</lit:literal></expr>;</expr_stmt>
                <break pos:line="212" pos:column="17">break;</break>
            }</block></then></if>

            <comment type="line" pos:line="215" pos:column="13">// CMake Variable</comment>
            <if pos:line="216" pos:column="13">if <condition pos:line="216" pos:column="16">( <expr><name pos:line="216" pos:column="18">cCurrChar</name> <op:operator pos:line="216" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="216" pos:column="31">'$'</lit:literal> <op:operator pos:line="216" pos:column="35">||</op:operator> <call><name pos:line="216" pos:column="38">isCmakeChar</name><argument_list pos:line="216" pos:column="49">(<argument><expr><name pos:line="216" pos:column="50">cCurrChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="216" pos:column="61"> <block pos:line="216" pos:column="62">{
                <expr_stmt><expr><call><name><name pos:line="217" pos:column="17">styler</name><op:operator pos:line="217" pos:column="23">.</op:operator><name pos:line="217" pos:column="24">ColourTo</name></name><argument_list pos:line="217" pos:column="32">(<argument><expr><name pos:line="217" pos:column="33">i</name><op:operator pos:line="217" pos:column="34">-</op:operator><lit:literal type="number" pos:line="217" pos:column="35">1</lit:literal></expr></argument>,<argument><expr><name pos:line="217" pos:column="37">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="218" pos:column="17">state</name> <op:operator pos:line="218" pos:column="23">=</op:operator> <name pos:line="218" pos:column="25">SCE_CMAKE_VARIABLE</name></expr>;</expr_stmt>

                <comment type="line" pos:line="220" pos:column="17">// If it is a number, we must check and set style here first...</comment>
                <if pos:line="221" pos:column="17">if <condition pos:line="221" pos:column="20">( <expr><call><name pos:line="221" pos:column="22">isCmakeNumber</name><argument_list pos:line="221" pos:column="35">(<argument><expr><name pos:line="221" pos:column="36">cCurrChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="221" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="221" pos:column="50">(</op:operator><name pos:line="221" pos:column="51">cNextChar</name> <op:operator pos:line="221" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="64">'\t'</lit:literal> <op:operator pos:line="221" pos:column="69">||</op:operator> <name pos:line="221" pos:column="72">cNextChar</name> <op:operator pos:line="221" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="85">' '</lit:literal> <op:operator pos:line="221" pos:column="89">||</op:operator> <name pos:line="221" pos:column="92">cNextChar</name> <op:operator pos:line="221" pos:column="102">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="105">'\r'</lit:literal> <op:operator pos:line="221" pos:column="110">||</op:operator> <name pos:line="221" pos:column="113">cNextChar</name> <op:operator pos:line="221" pos:column="123">==</op:operator> <lit:literal type="char" pos:line="221" pos:column="126">'\n'</lit:literal> <op:operator pos:line="221" pos:column="131">)</op:operator></expr> )</condition><then pos:line="221" pos:column="134">
                    <expr_stmt><expr><call><name><name pos:line="222" pos:column="21">styler</name><op:operator pos:line="222" pos:column="27">.</op:operator><name pos:line="222" pos:column="28">ColourTo</name></name><argument_list pos:line="222" pos:column="36">( <argument><expr><name pos:line="222" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="41">SCE_CMAKE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

                <break pos:line="224" pos:column="17">break;</break>
            }</block></then></if>

            <break pos:line="227" pos:column="13">break;</break>
        </case><case pos:line="228" pos:column="9">case <expr><name pos:line="228" pos:column="14">SCE_CMAKE_COMMENT</name></expr>:
            <if pos:line="229" pos:column="13">if <condition pos:line="229" pos:column="16">( <expr><name pos:line="229" pos:column="18">cNextChar</name> <op:operator pos:line="229" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="229" pos:column="31">'\n'</lit:literal> <op:operator pos:line="229" pos:column="36">||</op:operator> <name pos:line="229" pos:column="39">cNextChar</name> <op:operator pos:line="229" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="229" pos:column="52">'\r'</lit:literal></expr> )</condition><then pos:line="229" pos:column="58"> <block pos:line="229" pos:column="59">{
                <comment type="line" pos:line="230" pos:column="17">// Special case:</comment>
                <if pos:line="231" pos:column="17">if <condition pos:line="231" pos:column="20">( <expr><name pos:line="231" pos:column="22">cCurrChar</name> <op:operator pos:line="231" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="231" pos:column="35">'\\'</lit:literal></expr> )</condition><then pos:line="231" pos:column="41"> <block pos:line="231" pos:column="42">{
                    <expr_stmt><expr><call><name><name pos:line="232" pos:column="21">styler</name><op:operator pos:line="232" pos:column="27">.</op:operator><name pos:line="232" pos:column="28">ColourTo</name></name><argument_list pos:line="232" pos:column="36">(<argument><expr><name pos:line="232" pos:column="37">i</name><op:operator pos:line="232" pos:column="38">-</op:operator><lit:literal type="number" pos:line="232" pos:column="39">2</lit:literal></expr></argument>,<argument><expr><name pos:line="232" pos:column="41">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="233" pos:column="21">styler</name><op:operator pos:line="233" pos:column="27">.</op:operator><name pos:line="233" pos:column="28">ColourTo</name></name><argument_list pos:line="233" pos:column="36">(<argument><expr><name pos:line="233" pos:column="37">i</name></expr></argument>,<argument><expr><name pos:line="233" pos:column="39">SCE_CMAKE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="235" pos:column="17">else <block pos:line="235" pos:column="22">{
                    <expr_stmt><expr><call><name><name pos:line="236" pos:column="21">styler</name><op:operator pos:line="236" pos:column="27">.</op:operator><name pos:line="236" pos:column="28">ColourTo</name></name><argument_list pos:line="236" pos:column="36">(<argument><expr><name pos:line="236" pos:column="37">i</name></expr></argument>,<argument><expr><name pos:line="236" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="237" pos:column="21">state</name> <op:operator pos:line="237" pos:column="27">=</op:operator> <name pos:line="237" pos:column="29">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <break pos:line="240" pos:column="13">break;</break>
        </case><case pos:line="241" pos:column="9">case <expr><name pos:line="241" pos:column="14">SCE_CMAKE_STRINGDQ</name></expr>:
        </case><case pos:line="242" pos:column="9">case <expr><name pos:line="242" pos:column="14">SCE_CMAKE_STRINGLQ</name></expr>:
        </case><case pos:line="243" pos:column="9">case <expr><name pos:line="243" pos:column="14">SCE_CMAKE_STRINGRQ</name></expr>:

            <if pos:line="245" pos:column="13">if <condition pos:line="245" pos:column="16">( <expr><call><name><name pos:line="245" pos:column="18">styler</name><op:operator pos:line="245" pos:column="24">.</op:operator><name pos:line="245" pos:column="25">SafeGetCharAt</name></name><argument_list pos:line="245" pos:column="38">(<argument><expr><name pos:line="245" pos:column="39">i</name><op:operator pos:line="245" pos:column="40">-</op:operator><lit:literal type="number" pos:line="245" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="245" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="245" pos:column="47">'\\'</lit:literal> <op:operator pos:line="245" pos:column="52">&amp;&amp;</op:operator> <call><name><name pos:line="245" pos:column="55">styler</name><op:operator pos:line="245" pos:column="61">.</op:operator><name pos:line="245" pos:column="62">SafeGetCharAt</name></name><argument_list pos:line="245" pos:column="75">(<argument><expr><name pos:line="245" pos:column="76">i</name><op:operator pos:line="245" pos:column="77">-</op:operator><lit:literal type="number" pos:line="245" pos:column="78">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="245" pos:column="81">==</op:operator> <lit:literal type="char" pos:line="245" pos:column="84">'$'</lit:literal></expr> )</condition><then pos:line="245" pos:column="89">
                <break pos:line="246" pos:column="17">break;</break></then></if> <comment type="line" pos:line="246" pos:column="24">// Ignore the next character, even if it is a quote of some sort</comment>

            <if pos:line="248" pos:column="13">if <condition pos:line="248" pos:column="16">( <expr><name pos:line="248" pos:column="18">cCurrChar</name> <op:operator pos:line="248" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="31">'"'</lit:literal> <op:operator pos:line="248" pos:column="35">&amp;&amp;</op:operator> <name pos:line="248" pos:column="38">state</name> <op:operator pos:line="248" pos:column="44">==</op:operator> <name pos:line="248" pos:column="47">SCE_CMAKE_STRINGDQ</name></expr> )</condition><then pos:line="248" pos:column="67"> <block pos:line="248" pos:column="68">{
                <expr_stmt><expr><call><name><name pos:line="249" pos:column="17">styler</name><op:operator pos:line="249" pos:column="23">.</op:operator><name pos:line="249" pos:column="24">ColourTo</name></name><argument_list pos:line="249" pos:column="32">(<argument><expr><name pos:line="249" pos:column="33">i</name></expr></argument>,<argument><expr><name pos:line="249" pos:column="35">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="250" pos:column="17">state</name> <op:operator pos:line="250" pos:column="23">=</op:operator> <name pos:line="250" pos:column="25">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt>
                <break pos:line="251" pos:column="17">break;</break>
            }</block></then></if>

            <if pos:line="254" pos:column="13">if <condition pos:line="254" pos:column="16">( <expr><name pos:line="254" pos:column="18">cCurrChar</name> <op:operator pos:line="254" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="254" pos:column="31">'`'</lit:literal> <op:operator pos:line="254" pos:column="35">&amp;&amp;</op:operator> <name pos:line="254" pos:column="38">state</name> <op:operator pos:line="254" pos:column="44">==</op:operator> <name pos:line="254" pos:column="47">SCE_CMAKE_STRINGLQ</name></expr> )</condition><then pos:line="254" pos:column="67"> <block pos:line="254" pos:column="68">{
                <expr_stmt><expr><call><name><name pos:line="255" pos:column="17">styler</name><op:operator pos:line="255" pos:column="23">.</op:operator><name pos:line="255" pos:column="24">ColourTo</name></name><argument_list pos:line="255" pos:column="32">(<argument><expr><name pos:line="255" pos:column="33">i</name></expr></argument>,<argument><expr><name pos:line="255" pos:column="35">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="256" pos:column="17">state</name> <op:operator pos:line="256" pos:column="23">=</op:operator> <name pos:line="256" pos:column="25">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt>
                <break pos:line="257" pos:column="17">break;</break>
            }</block></then></if>

            <if pos:line="260" pos:column="13">if <condition pos:line="260" pos:column="16">( <expr><name pos:line="260" pos:column="18">cCurrChar</name> <op:operator pos:line="260" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="260" pos:column="31">'\''</lit:literal> <op:operator pos:line="260" pos:column="36">&amp;&amp;</op:operator> <name pos:line="260" pos:column="39">state</name> <op:operator pos:line="260" pos:column="45">==</op:operator> <name pos:line="260" pos:column="48">SCE_CMAKE_STRINGRQ</name></expr> )</condition><then pos:line="260" pos:column="68"> <block pos:line="260" pos:column="69">{
                <expr_stmt><expr><call><name><name pos:line="261" pos:column="17">styler</name><op:operator pos:line="261" pos:column="23">.</op:operator><name pos:line="261" pos:column="24">ColourTo</name></name><argument_list pos:line="261" pos:column="32">(<argument><expr><name pos:line="261" pos:column="33">i</name></expr></argument>,<argument><expr><name pos:line="261" pos:column="35">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="262" pos:column="17">state</name> <op:operator pos:line="262" pos:column="23">=</op:operator> <name pos:line="262" pos:column="25">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt>
                <break pos:line="263" pos:column="17">break;</break>
            }</block></then></if>

            <if pos:line="266" pos:column="13">if <condition pos:line="266" pos:column="16">( <expr><name pos:line="266" pos:column="18">cNextChar</name> <op:operator pos:line="266" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="266" pos:column="31">'\r'</lit:literal> <op:operator pos:line="266" pos:column="36">||</op:operator> <name pos:line="266" pos:column="39">cNextChar</name> <op:operator pos:line="266" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="266" pos:column="52">'\n'</lit:literal></expr> )</condition><then pos:line="266" pos:column="58"> <block pos:line="266" pos:column="59">{
                <decl_stmt><decl><type><name pos:line="267" pos:column="17">int</name></type> <name pos:line="267" pos:column="21">nCurLine</name> <init pos:line="267" pos:column="30">= <expr><call><name><name pos:line="267" pos:column="32">styler</name><op:operator pos:line="267" pos:column="38">.</op:operator><name pos:line="267" pos:column="39">GetLine</name></name><argument_list pos:line="267" pos:column="46">(<argument><expr><name pos:line="267" pos:column="47">i</name><op:operator pos:line="267" pos:column="48">+</op:operator><lit:literal type="number" pos:line="267" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="268" pos:column="17">int</name></type> <name pos:line="268" pos:column="21">nBack</name> <init pos:line="268" pos:column="27">= <expr><name pos:line="268" pos:column="29">i</name></expr></init></decl>;</decl_stmt>
                <comment type="line" pos:line="269" pos:column="17">// We need to check if the previous line has a \ in it...</comment>
                <decl_stmt><decl><type><name pos:line="270" pos:column="17">bool</name></type> <name pos:line="270" pos:column="22">bNextLine</name> <init pos:line="270" pos:column="32">= <expr><lit:literal type="boolean" pos:line="270" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>

                <while pos:line="272" pos:column="17">while <condition pos:line="272" pos:column="23">( <expr><name pos:line="272" pos:column="25">nBack</name> <op:operator pos:line="272" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="272" pos:column="33">0</lit:literal></expr> )</condition> <block pos:line="272" pos:column="37">{
                    <if pos:line="273" pos:column="21">if <condition pos:line="273" pos:column="24">( <expr><call><name><name pos:line="273" pos:column="26">styler</name><op:operator pos:line="273" pos:column="32">.</op:operator><name pos:line="273" pos:column="33">GetLine</name></name><argument_list pos:line="273" pos:column="40">(<argument><expr><name pos:line="273" pos:column="41">nBack</name></expr></argument>)</argument_list></call> <op:operator pos:line="273" pos:column="48">!=</op:operator> <name pos:line="273" pos:column="51">nCurLine</name></expr> )</condition><then pos:line="273" pos:column="61">
                        <break pos:line="274" pos:column="25">break;</break></then></if>

                    <decl_stmt><decl><type><name pos:line="276" pos:column="21">char</name></type> <name pos:line="276" pos:column="26">cTemp</name> <init pos:line="276" pos:column="32">= <expr><call><name><name pos:line="276" pos:column="34">styler</name><op:operator pos:line="276" pos:column="40">.</op:operator><name pos:line="276" pos:column="41">SafeGetCharAt</name></name><argument_list pos:line="276" pos:column="54">(<argument><expr><name pos:line="276" pos:column="55">nBack</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="276" pos:column="62">'a'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="276" pos:column="68">// Letter 'a' is safe here</comment>

                    <if pos:line="278" pos:column="21">if <condition pos:line="278" pos:column="24">( <expr><name pos:line="278" pos:column="26">cTemp</name> <op:operator pos:line="278" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="278" pos:column="35">'\\'</lit:literal></expr> )</condition><then pos:line="278" pos:column="41"> <block pos:line="278" pos:column="42">{
                        <expr_stmt><expr><name pos:line="279" pos:column="25">bNextLine</name> <op:operator pos:line="279" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="279" pos:column="37">true</lit:literal></expr>;</expr_stmt>
                        <break pos:line="280" pos:column="25">break;</break>
                    }</block></then></if>
                    <if pos:line="282" pos:column="21">if <condition pos:line="282" pos:column="24">( <expr><name pos:line="282" pos:column="26">cTemp</name> <op:operator pos:line="282" pos:column="32">!=</op:operator> <lit:literal type="char" pos:line="282" pos:column="35">'\r'</lit:literal> <op:operator pos:line="282" pos:column="40">&amp;&amp;</op:operator> <name pos:line="282" pos:column="43">cTemp</name> <op:operator pos:line="282" pos:column="49">!=</op:operator> <lit:literal type="char" pos:line="282" pos:column="52">'\n'</lit:literal> <op:operator pos:line="282" pos:column="57">&amp;&amp;</op:operator> <name pos:line="282" pos:column="60">cTemp</name> <op:operator pos:line="282" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="282" pos:column="69">'\t'</lit:literal> <op:operator pos:line="282" pos:column="74">&amp;&amp;</op:operator> <name pos:line="282" pos:column="77">cTemp</name> <op:operator pos:line="282" pos:column="83">!=</op:operator> <lit:literal type="char" pos:line="282" pos:column="86">' '</lit:literal></expr> )</condition><then pos:line="282" pos:column="91">
                        <break pos:line="283" pos:column="25">break;</break></then></if>

                    <expr_stmt><expr><name pos:line="285" pos:column="21">nBack</name><op:operator pos:line="285" pos:column="26">--</op:operator></expr>;</expr_stmt>
                }</block></while>

                <if pos:line="288" pos:column="17">if <condition pos:line="288" pos:column="20">( <expr><name pos:line="288" pos:column="22">bNextLine</name></expr> )</condition><then pos:line="288" pos:column="33"> <block pos:line="288" pos:column="34">{
                    <expr_stmt><expr><call><name><name pos:line="289" pos:column="21">styler</name><op:operator pos:line="289" pos:column="27">.</op:operator><name pos:line="289" pos:column="28">ColourTo</name></name><argument_list pos:line="289" pos:column="36">(<argument><expr><name pos:line="289" pos:column="37">i</name><op:operator pos:line="289" pos:column="38">+</op:operator><lit:literal type="number" pos:line="289" pos:column="39">1</lit:literal></expr></argument>,<argument><expr><name pos:line="289" pos:column="41">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if pos:line="291" pos:column="17">if <condition pos:line="291" pos:column="20">( <expr><name pos:line="291" pos:column="22">bNextLine</name> <op:operator pos:line="291" pos:column="32">==</op:operator> <lit:literal type="boolean" pos:line="291" pos:column="35">false</lit:literal></expr> )</condition><then pos:line="291" pos:column="42"> <block pos:line="291" pos:column="43">{
                    <expr_stmt><expr><call><name><name pos:line="292" pos:column="21">styler</name><op:operator pos:line="292" pos:column="27">.</op:operator><name pos:line="292" pos:column="28">ColourTo</name></name><argument_list pos:line="292" pos:column="36">(<argument><expr><name pos:line="292" pos:column="37">i</name></expr></argument>,<argument><expr><name pos:line="292" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="293" pos:column="21">state</name> <op:operator pos:line="293" pos:column="27">=</op:operator> <name pos:line="293" pos:column="29">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <break pos:line="296" pos:column="13">break;</break>

        </case><case pos:line="298" pos:column="9">case <expr><name pos:line="298" pos:column="14">SCE_CMAKE_VARIABLE</name></expr>:

            <comment type="line" pos:line="300" pos:column="13">// CMake Variable:</comment>
            <if pos:line="301" pos:column="13">if <condition pos:line="301" pos:column="16">( <expr><name pos:line="301" pos:column="18">cCurrChar</name> <op:operator pos:line="301" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="301" pos:column="31">'$'</lit:literal></expr> )</condition><then pos:line="301" pos:column="36">
                <expr_stmt><expr><name pos:line="302" pos:column="17">state</name> <op:operator pos:line="302" pos:column="23">=</op:operator> <name pos:line="302" pos:column="25">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt></then>
            <else pos:line="303" pos:column="13">else <if pos:line="303" pos:column="18">if <condition pos:line="303" pos:column="21">( <expr><name pos:line="303" pos:column="23">cCurrChar</name> <op:operator pos:line="303" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="36">'\\'</lit:literal> <op:operator pos:line="303" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="303" pos:column="44">(</op:operator><name pos:line="303" pos:column="45">cNextChar</name> <op:operator pos:line="303" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="58">'n'</lit:literal> <op:operator pos:line="303" pos:column="62">||</op:operator> <name pos:line="303" pos:column="65">cNextChar</name> <op:operator pos:line="303" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="78">'r'</lit:literal> <op:operator pos:line="303" pos:column="82">||</op:operator> <name pos:line="303" pos:column="85">cNextChar</name> <op:operator pos:line="303" pos:column="95">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="98">'t'</lit:literal> <op:operator pos:line="303" pos:column="102">)</op:operator></expr> )</condition><then pos:line="303" pos:column="105">
                <expr_stmt><expr><name pos:line="304" pos:column="17">state</name> <op:operator pos:line="304" pos:column="23">=</op:operator> <name pos:line="304" pos:column="25">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt></then>
            <else pos:line="305" pos:column="13">else <if pos:line="305" pos:column="18">if <condition pos:line="305" pos:column="21">( <expr><op:operator pos:line="305" pos:column="23">(</op:operator><call><name pos:line="305" pos:column="24">isCmakeChar</name><argument_list pos:line="305" pos:column="35">(<argument><expr><name pos:line="305" pos:column="36">cCurrChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="305" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="305" pos:column="50">!</op:operator><call><name pos:line="305" pos:column="51">isCmakeChar</name><argument_list pos:line="305" pos:column="62">( <argument><expr><name pos:line="305" pos:column="64">cNextChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="305" pos:column="75">&amp;&amp;</op:operator> <name pos:line="305" pos:column="78">cNextChar</name> <op:operator pos:line="305" pos:column="88">!=</op:operator> <lit:literal type="char" pos:line="305" pos:column="91">'}'</lit:literal><op:operator pos:line="305" pos:column="94">)</op:operator> <op:operator pos:line="305" pos:column="96">||</op:operator> <name pos:line="305" pos:column="99">cCurrChar</name> <op:operator pos:line="305" pos:column="109">==</op:operator> <lit:literal type="char" pos:line="305" pos:column="112">'}'</lit:literal></expr> )</condition><then pos:line="305" pos:column="117"> <block pos:line="305" pos:column="118">{
                <expr_stmt><expr><name pos:line="306" pos:column="17">state</name> <op:operator pos:line="306" pos:column="23">=</op:operator> <call><name pos:line="306" pos:column="25">classifyWordCmake</name><argument_list pos:line="306" pos:column="42">( <argument><expr><call><name><name pos:line="306" pos:column="44">styler</name><op:operator pos:line="306" pos:column="50">.</op:operator><name pos:line="306" pos:column="51">GetStartSegment</name></name><argument_list pos:line="306" pos:column="66">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="306" pos:column="70">i</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="73">keywordLists</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="87">styler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="307" pos:column="17">styler</name><op:operator pos:line="307" pos:column="23">.</op:operator><name pos:line="307" pos:column="24">ColourTo</name></name><argument_list pos:line="307" pos:column="32">( <argument><expr><name pos:line="307" pos:column="34">i</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="37">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="308" pos:column="17">state</name> <op:operator pos:line="308" pos:column="23">=</op:operator> <name pos:line="308" pos:column="25">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="310" pos:column="13">else <if pos:line="310" pos:column="18">if <condition pos:line="310" pos:column="21">( <expr><op:operator pos:line="310" pos:column="23">!</op:operator><call><name pos:line="310" pos:column="24">isCmakeChar</name><argument_list pos:line="310" pos:column="35">( <argument><expr><name pos:line="310" pos:column="37">cCurrChar</name></expr></argument> )</argument_list></call> <op:operator pos:line="310" pos:column="49">&amp;&amp;</op:operator> <name pos:line="310" pos:column="52">cCurrChar</name> <op:operator pos:line="310" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="310" pos:column="65">'{'</lit:literal> <op:operator pos:line="310" pos:column="69">&amp;&amp;</op:operator> <name pos:line="310" pos:column="72">cCurrChar</name> <op:operator pos:line="310" pos:column="82">!=</op:operator> <lit:literal type="char" pos:line="310" pos:column="85">'}'</lit:literal></expr> )</condition><then pos:line="310" pos:column="90"> <block pos:line="310" pos:column="91">{
                <if pos:line="311" pos:column="17">if <condition pos:line="311" pos:column="20">( <expr><call><name pos:line="311" pos:column="22">classifyWordCmake</name><argument_list pos:line="311" pos:column="39">( <argument><expr><call><name><name pos:line="311" pos:column="41">styler</name><op:operator pos:line="311" pos:column="47">.</op:operator><name pos:line="311" pos:column="48">GetStartSegment</name></name><argument_list pos:line="311" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="311" pos:column="67">i</name><op:operator pos:line="311" pos:column="68">-</op:operator><lit:literal type="number" pos:line="311" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="311" pos:column="72">keywordLists</name></expr></argument>, <argument><expr><name pos:line="311" pos:column="86">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="311" pos:column="94">==</op:operator> <name pos:line="311" pos:column="97">SCE_CMAKE_NUMBER</name></expr> )</condition><then pos:line="311" pos:column="115">
                    <expr_stmt><expr><call><name><name pos:line="312" pos:column="21">styler</name><op:operator pos:line="312" pos:column="27">.</op:operator><name pos:line="312" pos:column="28">ColourTo</name></name><argument_list pos:line="312" pos:column="36">( <argument><expr><name pos:line="312" pos:column="38">i</name><op:operator pos:line="312" pos:column="39">-</op:operator><lit:literal type="number" pos:line="312" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="312" pos:column="43">SCE_CMAKE_NUMBER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></then></if>

                <expr_stmt><expr><name pos:line="314" pos:column="17">state</name> <op:operator pos:line="314" pos:column="23">=</op:operator> <name pos:line="314" pos:column="25">SCE_CMAKE_DEFAULT</name></expr>;</expr_stmt>

                <if pos:line="316" pos:column="17">if <condition pos:line="316" pos:column="20">( <expr><name pos:line="316" pos:column="22">cCurrChar</name> <op:operator pos:line="316" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="35">'"'</lit:literal></expr> )</condition><then pos:line="316" pos:column="40"> <block pos:line="316" pos:column="41">{
                    <expr_stmt><expr><name pos:line="317" pos:column="21">state</name> <op:operator pos:line="317" pos:column="27">=</op:operator> <name pos:line="317" pos:column="29">SCE_CMAKE_STRINGDQ</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="318" pos:column="21">bVarInString</name> <op:operator pos:line="318" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="318" pos:column="36">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="319" pos:column="21">bClassicVarInString</name> <op:operator pos:line="319" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="319" pos:column="43">false</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="321" pos:column="17">else <if pos:line="321" pos:column="22">if <condition pos:line="321" pos:column="25">( <expr><name pos:line="321" pos:column="27">cCurrChar</name> <op:operator pos:line="321" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="321" pos:column="40">'`'</lit:literal></expr> )</condition><then pos:line="321" pos:column="45"> <block pos:line="321" pos:column="46">{
                    <expr_stmt><expr><name pos:line="322" pos:column="21">state</name> <op:operator pos:line="322" pos:column="27">=</op:operator> <name pos:line="322" pos:column="29">SCE_CMAKE_STRINGLQ</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="323" pos:column="21">bVarInString</name> <op:operator pos:line="323" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="323" pos:column="36">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="324" pos:column="21">bClassicVarInString</name> <op:operator pos:line="324" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="324" pos:column="43">false</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="326" pos:column="17">else <if pos:line="326" pos:column="22">if <condition pos:line="326" pos:column="25">( <expr><name pos:line="326" pos:column="27">cCurrChar</name> <op:operator pos:line="326" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="326" pos:column="40">'\''</lit:literal></expr> )</condition><then pos:line="326" pos:column="46"> <block pos:line="326" pos:column="47">{
                    <expr_stmt><expr><name pos:line="327" pos:column="21">state</name> <op:operator pos:line="327" pos:column="27">=</op:operator> <name pos:line="327" pos:column="29">SCE_CMAKE_STRINGRQ</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="328" pos:column="21">bVarInString</name> <op:operator pos:line="328" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="328" pos:column="36">false</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name pos:line="329" pos:column="21">bClassicVarInString</name> <op:operator pos:line="329" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="329" pos:column="43">false</lit:literal></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="331" pos:column="17">else <if pos:line="331" pos:column="22">if <condition pos:line="331" pos:column="25">( <expr><name pos:line="331" pos:column="27">cCurrChar</name> <op:operator pos:line="331" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="331" pos:column="40">'#'</lit:literal></expr> )</condition><then pos:line="331" pos:column="45"> <block pos:line="331" pos:column="46">{
                    <expr_stmt><expr><name pos:line="332" pos:column="21">state</name> <op:operator pos:line="332" pos:column="27">=</op:operator> <name pos:line="332" pos:column="29">SCE_CMAKE_COMMENT</name></expr>;</expr_stmt>
                }</block></then></if></else></if></else></if></else></if>
            }</block></then></if></else></if></else></if></else></if>
            <break pos:line="335" pos:column="13">break;</break>
        </case>}</block></switch>

        <if pos:line="338" pos:column="9">if <condition pos:line="338" pos:column="12">( <expr><name pos:line="338" pos:column="14">state</name> <op:operator pos:line="338" pos:column="20">==</op:operator> <name pos:line="338" pos:column="23">SCE_CMAKE_COMMENT</name></expr>)</condition><then pos:line="338" pos:column="41"> <block pos:line="338" pos:column="42">{
            <expr_stmt><expr><call><name><name pos:line="339" pos:column="13">styler</name><op:operator pos:line="339" pos:column="19">.</op:operator><name pos:line="339" pos:column="20">ColourTo</name></name><argument_list pos:line="339" pos:column="28">(<argument><expr><name pos:line="339" pos:column="29">i</name></expr></argument>,<argument><expr><name pos:line="339" pos:column="31">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="341" pos:column="9">else <if pos:line="341" pos:column="14">if <condition pos:line="341" pos:column="17">( <expr><name pos:line="341" pos:column="19">state</name> <op:operator pos:line="341" pos:column="25">==</op:operator> <name pos:line="341" pos:column="28">SCE_CMAKE_STRINGDQ</name> <op:operator pos:line="341" pos:column="47">||</op:operator> <name pos:line="341" pos:column="50">state</name> <op:operator pos:line="341" pos:column="56">==</op:operator> <name pos:line="341" pos:column="59">SCE_CMAKE_STRINGLQ</name> <op:operator pos:line="341" pos:column="78">||</op:operator> <name pos:line="341" pos:column="81">state</name> <op:operator pos:line="341" pos:column="87">==</op:operator> <name pos:line="341" pos:column="90">SCE_CMAKE_STRINGRQ</name></expr> )</condition><then pos:line="341" pos:column="110"> <block pos:line="341" pos:column="111">{
            <decl_stmt><decl><type><name pos:line="342" pos:column="13">bool</name></type> <name pos:line="342" pos:column="18">bIngoreNextDollarSign</name> <init pos:line="342" pos:column="40">= <expr><lit:literal type="boolean" pos:line="342" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>

            <if pos:line="344" pos:column="13">if <condition pos:line="344" pos:column="16">( <expr><name pos:line="344" pos:column="18">bVarInString</name> <op:operator pos:line="344" pos:column="31">&amp;&amp;</op:operator> <name pos:line="344" pos:column="34">cCurrChar</name> <op:operator pos:line="344" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="344" pos:column="47">'$'</lit:literal></expr> )</condition><then pos:line="344" pos:column="52"> <block pos:line="344" pos:column="53">{
                <expr_stmt><expr><name pos:line="345" pos:column="17">bVarInString</name> <op:operator pos:line="345" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="345" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="346" pos:column="17">bIngoreNextDollarSign</name> <op:operator pos:line="346" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="346" pos:column="41">true</lit:literal></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="348" pos:column="13">else <if pos:line="348" pos:column="18">if <condition pos:line="348" pos:column="21">( <expr><name pos:line="348" pos:column="23">bVarInString</name> <op:operator pos:line="348" pos:column="36">&amp;&amp;</op:operator> <name pos:line="348" pos:column="39">cCurrChar</name> <op:operator pos:line="348" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="52">'\\'</lit:literal> <op:operator pos:line="348" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="348" pos:column="60">(</op:operator><name pos:line="348" pos:column="61">cNextChar</name> <op:operator pos:line="348" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="74">'n'</lit:literal> <op:operator pos:line="348" pos:column="78">||</op:operator> <name pos:line="348" pos:column="81">cNextChar</name> <op:operator pos:line="348" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="94">'r'</lit:literal> <op:operator pos:line="348" pos:column="98">||</op:operator> <name pos:line="348" pos:column="101">cNextChar</name> <op:operator pos:line="348" pos:column="111">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="114">'t'</lit:literal> <op:operator pos:line="348" pos:column="118">||</op:operator> <name pos:line="348" pos:column="121">cNextChar</name> <op:operator pos:line="348" pos:column="131">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="134">'"'</lit:literal> <op:operator pos:line="348" pos:column="138">||</op:operator> <name pos:line="348" pos:column="141">cNextChar</name> <op:operator pos:line="348" pos:column="151">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="154">'`'</lit:literal> <op:operator pos:line="348" pos:column="158">||</op:operator> <name pos:line="348" pos:column="161">cNextChar</name> <op:operator pos:line="348" pos:column="171">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="174">'\''</lit:literal> <op:operator pos:line="348" pos:column="179">)</op:operator></expr> )</condition><then pos:line="348" pos:column="182"> <block pos:line="348" pos:column="183">{
                <expr_stmt><expr><call><name><name pos:line="349" pos:column="17">styler</name><op:operator pos:line="349" pos:column="23">.</op:operator><name pos:line="349" pos:column="24">ColourTo</name></name><argument_list pos:line="349" pos:column="32">( <argument><expr><name pos:line="349" pos:column="34">i</name><op:operator pos:line="349" pos:column="35">+</op:operator><lit:literal type="number" pos:line="349" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="349" pos:column="39">SCE_CMAKE_STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="350" pos:column="17">bVarInString</name> <op:operator pos:line="350" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="350" pos:column="32">false</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="351" pos:column="17">bIngoreNextDollarSign</name> <op:operator pos:line="351" pos:column="39">=</op:operator> <lit:literal type="boolean" pos:line="351" pos:column="41">false</lit:literal></expr>;</expr_stmt>
            }</block></then>

            <else pos:line="354" pos:column="13">else <if pos:line="354" pos:column="18">if <condition pos:line="354" pos:column="21">( <expr><name pos:line="354" pos:column="23">bVarInString</name> <op:operator pos:line="354" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="354" pos:column="39">!</op:operator><call><name pos:line="354" pos:column="40">isCmakeChar</name><argument_list pos:line="354" pos:column="51">(<argument><expr><name pos:line="354" pos:column="52">cNextChar</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="354" pos:column="64"> <block pos:line="354" pos:column="65">{
                <decl_stmt><decl><type><name pos:line="355" pos:column="17">int</name></type> <name pos:line="355" pos:column="21">nWordState</name> <init pos:line="355" pos:column="32">= <expr><call><name pos:line="355" pos:column="34">classifyWordCmake</name><argument_list pos:line="355" pos:column="51">( <argument><expr><call><name><name pos:line="355" pos:column="53">styler</name><op:operator pos:line="355" pos:column="59">.</op:operator><name pos:line="355" pos:column="60">GetStartSegment</name></name><argument_list pos:line="355" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="355" pos:column="79">i</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="82">keywordLists</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="96">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="356" pos:column="17">if <condition pos:line="356" pos:column="20">( <expr><name pos:line="356" pos:column="22">nWordState</name> <op:operator pos:line="356" pos:column="33">==</op:operator> <name pos:line="356" pos:column="36">SCE_CMAKE_VARIABLE</name></expr> )</condition><then pos:line="356" pos:column="56">
                    <expr_stmt><expr><call><name><name pos:line="357" pos:column="21">styler</name><op:operator pos:line="357" pos:column="27">.</op:operator><name pos:line="357" pos:column="28">ColourTo</name></name><argument_list pos:line="357" pos:column="36">( <argument><expr><name pos:line="357" pos:column="38">i</name></expr></argument>, <argument><expr><name pos:line="357" pos:column="41">SCE_CMAKE_STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name pos:line="358" pos:column="17">bVarInString</name> <op:operator pos:line="358" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="358" pos:column="32">false</lit:literal></expr>;</expr_stmt>
            }</block></then>
            <comment type="line" pos:line="360" pos:column="13">// Covers "${TEST}..."</comment>
            <else pos:line="361" pos:column="13">else <if pos:line="361" pos:column="18">if <condition pos:line="361" pos:column="21">( <expr><name pos:line="361" pos:column="23">bClassicVarInString</name> <op:operator pos:line="361" pos:column="43">&amp;&amp;</op:operator> <name pos:line="361" pos:column="46">cNextChar</name> <op:operator pos:line="361" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="361" pos:column="59">'}'</lit:literal></expr> )</condition><then pos:line="361" pos:column="64"> <block pos:line="361" pos:column="65">{
                <expr_stmt><expr><call><name><name pos:line="362" pos:column="17">styler</name><op:operator pos:line="362" pos:column="23">.</op:operator><name pos:line="362" pos:column="24">ColourTo</name></name><argument_list pos:line="362" pos:column="32">( <argument><expr><name pos:line="362" pos:column="34">i</name><op:operator pos:line="362" pos:column="35">+</op:operator><lit:literal type="number" pos:line="362" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="362" pos:column="39">SCE_CMAKE_STRINGVAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="363" pos:column="17">bClassicVarInString</name> <op:operator pos:line="363" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="363" pos:column="39">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if>

            <comment type="line" pos:line="366" pos:column="13">// Start of var in string</comment>
            <if pos:line="367" pos:column="13">if <condition pos:line="367" pos:column="16">( <expr><op:operator pos:line="367" pos:column="18">!</op:operator><name pos:line="367" pos:column="19">bIngoreNextDollarSign</name> <op:operator pos:line="367" pos:column="41">&amp;&amp;</op:operator> <name pos:line="367" pos:column="44">cCurrChar</name> <op:operator pos:line="367" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="367" pos:column="57">'$'</lit:literal> <op:operator pos:line="367" pos:column="61">&amp;&amp;</op:operator> <name pos:line="367" pos:column="64">cNextChar</name> <op:operator pos:line="367" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="367" pos:column="77">'{'</lit:literal></expr> )</condition><then pos:line="367" pos:column="82"> <block pos:line="367" pos:column="83">{
                <expr_stmt><expr><call><name><name pos:line="368" pos:column="17">styler</name><op:operator pos:line="368" pos:column="23">.</op:operator><name pos:line="368" pos:column="24">ColourTo</name></name><argument_list pos:line="368" pos:column="32">( <argument><expr><name pos:line="368" pos:column="34">i</name><op:operator pos:line="368" pos:column="35">-</op:operator><lit:literal type="number" pos:line="368" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="368" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="369" pos:column="17">bClassicVarInString</name> <op:operator pos:line="369" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="369" pos:column="39">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="370" pos:column="17">bVarInString</name> <op:operator pos:line="370" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="370" pos:column="32">false</lit:literal></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="372" pos:column="13">else <if pos:line="372" pos:column="18">if <condition pos:line="372" pos:column="21">( <expr><op:operator pos:line="372" pos:column="23">!</op:operator><name pos:line="372" pos:column="24">bIngoreNextDollarSign</name> <op:operator pos:line="372" pos:column="46">&amp;&amp;</op:operator> <name pos:line="372" pos:column="49">cCurrChar</name> <op:operator pos:line="372" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="372" pos:column="62">'$'</lit:literal></expr> )</condition><then pos:line="372" pos:column="67"> <block pos:line="372" pos:column="68">{
                <expr_stmt><expr><call><name><name pos:line="373" pos:column="17">styler</name><op:operator pos:line="373" pos:column="23">.</op:operator><name pos:line="373" pos:column="24">ColourTo</name></name><argument_list pos:line="373" pos:column="32">( <argument><expr><name pos:line="373" pos:column="34">i</name><op:operator pos:line="373" pos:column="35">-</op:operator><lit:literal type="number" pos:line="373" pos:column="36">1</lit:literal></expr></argument>, <argument><expr><name pos:line="373" pos:column="39">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="374" pos:column="17">bVarInString</name> <op:operator pos:line="374" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="374" pos:column="32">true</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="375" pos:column="17">bClassicVarInString</name> <op:operator pos:line="375" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="375" pos:column="39">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if></else></if>
    }</block></for>

    <comment type="line" pos:line="380" pos:column="5">// Colourise remaining document</comment>
    <expr_stmt><expr><call><name><name pos:line="381" pos:column="5">styler</name><op:operator pos:line="381" pos:column="11">.</op:operator><name pos:line="381" pos:column="12">ColourTo</name></name><argument_list pos:line="381" pos:column="20">(<argument><expr><name pos:line="381" pos:column="21">nLengthDoc</name><op:operator pos:line="381" pos:column="31">-</op:operator><lit:literal type="number" pos:line="381" pos:column="32">1</lit:literal></expr></argument>,<argument><expr><name pos:line="381" pos:column="34">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="384" pos:column="1">static</specifier> <name pos:line="384" pos:column="8">void</name></type> <name pos:line="384" pos:column="13">FoldCmakeDoc</name><parameter_list pos:line="384" pos:column="25">(<param><decl><type><name pos:line="384" pos:column="26">unsigned</name> <name pos:line="384" pos:column="35">int</name></type> <name pos:line="384" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="384" pos:column="49">int</name></type> <name pos:line="384" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="384" pos:column="61">int</name></type></decl></param>, <param><decl><type><name><name pos:line="384" pos:column="66">WordList</name> <type:modifier pos:line="384" pos:column="75">*</type:modifier><index pos:line="384" pos:column="76">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="384" pos:column="80">Accessor</name> <type:modifier pos:line="384" pos:column="89">&amp;</type:modifier></type><name pos:line="384" pos:column="90">styler</name></decl></param>)</parameter_list>
<block pos:line="385" pos:column="1">{
    <comment type="line" pos:line="386" pos:column="5">// No folding enabled, no reason to continue...</comment>
    <if pos:line="387" pos:column="5">if <condition pos:line="387" pos:column="8">( <expr><call><name><name pos:line="387" pos:column="10">styler</name><op:operator pos:line="387" pos:column="16">.</op:operator><name pos:line="387" pos:column="17">GetPropertyInt</name></name><argument_list pos:line="387" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="387" pos:column="32">"fold"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="387" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="387" pos:column="43">0</lit:literal></expr> )</condition><then pos:line="387" pos:column="46">
        <return pos:line="388" pos:column="9">return;</return></then></if>

    <decl_stmt><decl><type><name pos:line="390" pos:column="5">bool</name></type> <name pos:line="390" pos:column="10">foldAtElse</name> <init pos:line="390" pos:column="21">= <expr><call><name><name pos:line="390" pos:column="23">styler</name><op:operator pos:line="390" pos:column="29">.</op:operator><name pos:line="390" pos:column="30">GetPropertyInt</name></name><argument_list pos:line="390" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="390" pos:column="45">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="390" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="390" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="390" pos:column="67">1</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="392" pos:column="5">int</name></type> <name pos:line="392" pos:column="9">lineCurrent</name> <init pos:line="392" pos:column="21">= <expr><call><name><name pos:line="392" pos:column="23">styler</name><op:operator pos:line="392" pos:column="29">.</op:operator><name pos:line="392" pos:column="30">GetLine</name></name><argument_list pos:line="392" pos:column="37">(<argument><expr><name pos:line="392" pos:column="38">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="393" pos:column="5">unsigned</name> <name pos:line="393" pos:column="14">int</name></type> <name pos:line="393" pos:column="18">safeStartPos</name> <init pos:line="393" pos:column="31">= <expr><call><name><name pos:line="393" pos:column="33">styler</name><op:operator pos:line="393" pos:column="39">.</op:operator><name pos:line="393" pos:column="40">LineStart</name></name><argument_list pos:line="393" pos:column="49">( <argument><expr><name pos:line="393" pos:column="51">lineCurrent</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="395" pos:column="5">bool</name></type> <name pos:line="395" pos:column="10">bArg1</name> <init pos:line="395" pos:column="16">= <expr><lit:literal type="boolean" pos:line="395" pos:column="18">true</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="396" pos:column="5">int</name></type> <name pos:line="396" pos:column="9">nWordStart</name> <init pos:line="396" pos:column="20">= <expr><op:operator pos:line="396" pos:column="22">-</op:operator><lit:literal type="number" pos:line="396" pos:column="23">1</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="398" pos:column="5">int</name></type> <name pos:line="398" pos:column="9">levelCurrent</name> <init pos:line="398" pos:column="22">= <expr><name pos:line="398" pos:column="24">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
    <if pos:line="399" pos:column="5">if <condition pos:line="399" pos:column="8">(<expr><name pos:line="399" pos:column="9">lineCurrent</name> <op:operator pos:line="399" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="399" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="399" pos:column="25">
        <expr_stmt><expr><name pos:line="400" pos:column="9">levelCurrent</name> <op:operator pos:line="400" pos:column="22">=</op:operator> <call><name><name pos:line="400" pos:column="24">styler</name><op:operator pos:line="400" pos:column="30">.</op:operator><name pos:line="400" pos:column="31">LevelAt</name></name><argument_list pos:line="400" pos:column="38">(<argument><expr><name pos:line="400" pos:column="39">lineCurrent</name><op:operator pos:line="400" pos:column="50">-</op:operator><lit:literal type="number" pos:line="400" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="400" pos:column="54">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="400" pos:column="57">16</lit:literal></expr>;</expr_stmt></then></if>
    <decl_stmt><decl><type><name pos:line="401" pos:column="5">int</name></type> <name pos:line="401" pos:column="9">levelNext</name> <init pos:line="401" pos:column="19">= <expr><name pos:line="401" pos:column="21">levelCurrent</name></expr></init></decl>;</decl_stmt>

    <for pos:line="403" pos:column="5">for (<init><decl><type><name pos:line="403" pos:column="10">unsigned</name> <name pos:line="403" pos:column="19">int</name></type> <name pos:line="403" pos:column="23">i</name> <init pos:line="403" pos:column="25">= <expr><name pos:line="403" pos:column="27">safeStartPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="403" pos:column="41">i</name> <op:operator pos:line="403" pos:column="43">&lt;</op:operator> <name pos:line="403" pos:column="45">startPos</name> <op:operator pos:line="403" pos:column="54">+</op:operator> <name pos:line="403" pos:column="56">length</name></expr>;</condition> <incr><expr><name pos:line="403" pos:column="64">i</name><op:operator pos:line="403" pos:column="65">++</op:operator></expr></incr>) <block pos:line="403" pos:column="69">{
        <decl_stmt><decl><type><name pos:line="404" pos:column="9">char</name></type> <name pos:line="404" pos:column="14">chCurr</name> <init pos:line="404" pos:column="21">= <expr><call><name><name pos:line="404" pos:column="23">styler</name><op:operator pos:line="404" pos:column="29">.</op:operator><name pos:line="404" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="404" pos:column="43">(<argument><expr><name pos:line="404" pos:column="44">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if pos:line="406" pos:column="9">if <condition pos:line="406" pos:column="12">( <expr><name pos:line="406" pos:column="14">bArg1</name></expr> )</condition><then pos:line="406" pos:column="21"> <block pos:line="406" pos:column="22">{
            <if pos:line="407" pos:column="13">if <condition pos:line="407" pos:column="16">( <expr><name pos:line="407" pos:column="18">nWordStart</name> <op:operator pos:line="407" pos:column="29">==</op:operator> <op:operator pos:line="407" pos:column="32">-</op:operator><lit:literal type="number" pos:line="407" pos:column="33">1</lit:literal> <op:operator pos:line="407" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="407" pos:column="38">(</op:operator><call><name pos:line="407" pos:column="39">isCmakeLetter</name><argument_list pos:line="407" pos:column="52">(<argument><expr><name pos:line="407" pos:column="53">chCurr</name></expr></argument>)</argument_list></call><op:operator pos:line="407" pos:column="60">)</op:operator></expr> )</condition><then pos:line="407" pos:column="63"> <block pos:line="407" pos:column="64">{
                <expr_stmt><expr><name pos:line="408" pos:column="17">nWordStart</name> <op:operator pos:line="408" pos:column="28">=</op:operator> <name pos:line="408" pos:column="30">i</name></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="410" pos:column="13">else <if pos:line="410" pos:column="18">if <condition pos:line="410" pos:column="21">( <expr><call><name pos:line="410" pos:column="23">isCmakeLetter</name><argument_list pos:line="410" pos:column="36">(<argument><expr><name pos:line="410" pos:column="37">chCurr</name></expr></argument>)</argument_list></call> <op:operator pos:line="410" pos:column="45">==</op:operator> <lit:literal type="boolean" pos:line="410" pos:column="48">false</lit:literal> <op:operator pos:line="410" pos:column="54">&amp;&amp;</op:operator> <name pos:line="410" pos:column="57">nWordStart</name> <op:operator pos:line="410" pos:column="68">&gt;</op:operator> <op:operator pos:line="410" pos:column="70">-</op:operator><lit:literal type="number" pos:line="410" pos:column="71">1</lit:literal></expr> )</condition><then pos:line="410" pos:column="74"> <block pos:line="410" pos:column="75">{
                <decl_stmt><decl><type><name pos:line="411" pos:column="17">int</name></type> <name pos:line="411" pos:column="21">newLevel</name> <init pos:line="411" pos:column="30">= <expr><call><name pos:line="411" pos:column="32">calculateFoldCmake</name><argument_list pos:line="411" pos:column="50">( <argument><expr><name pos:line="411" pos:column="52">nWordStart</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="64">i</name><op:operator pos:line="411" pos:column="65">-</op:operator><lit:literal type="number" pos:line="411" pos:column="66">1</lit:literal></expr></argument>, <argument><expr><name pos:line="411" pos:column="69">levelNext</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="80">styler</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="88">foldAtElse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if pos:line="413" pos:column="17">if <condition pos:line="413" pos:column="20">( <expr><name pos:line="413" pos:column="22">newLevel</name> <op:operator pos:line="413" pos:column="31">==</op:operator> <name pos:line="413" pos:column="34">levelNext</name></expr> )</condition><then pos:line="413" pos:column="45"> <block pos:line="413" pos:column="46">{
                    <if pos:line="414" pos:column="21">if <condition pos:line="414" pos:column="24">( <expr><name pos:line="414" pos:column="26">foldAtElse</name></expr> )</condition><then pos:line="414" pos:column="38"> <block pos:line="414" pos:column="39">{
                        <if pos:line="415" pos:column="25">if <condition pos:line="415" pos:column="28">( <expr><call><name pos:line="415" pos:column="30">CmakeNextLineHasElse</name><argument_list pos:line="415" pos:column="50">(<argument><expr><name pos:line="415" pos:column="51">i</name></expr></argument>, <argument><expr><name pos:line="415" pos:column="54">startPos</name> <op:operator pos:line="415" pos:column="63">+</op:operator> <name pos:line="415" pos:column="65">length</name></expr></argument>, <argument><expr><name pos:line="415" pos:column="73">styler</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="415" pos:column="82">
                            <expr_stmt><expr><name pos:line="416" pos:column="29">levelNext</name><op:operator pos:line="416" pos:column="38">--</op:operator></expr>;</expr_stmt></then></if>
                    }</block></then></if>
                }</block></then>
                <else pos:line="419" pos:column="17">else
                    <expr_stmt><expr><name pos:line="420" pos:column="21">levelNext</name> <op:operator pos:line="420" pos:column="31">=</op:operator> <name pos:line="420" pos:column="33">newLevel</name></expr>;</expr_stmt></else></if>
                <expr_stmt><expr><name pos:line="421" pos:column="17">bArg1</name> <op:operator pos:line="421" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="421" pos:column="25">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></then></if>

        <if pos:line="425" pos:column="9">if <condition pos:line="425" pos:column="12">( <expr><name pos:line="425" pos:column="14">chCurr</name> <op:operator pos:line="425" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="425" pos:column="24">'\n'</lit:literal></expr> )</condition><then pos:line="425" pos:column="30"> <block pos:line="425" pos:column="31">{
            <if pos:line="426" pos:column="13">if <condition pos:line="426" pos:column="16">( <expr><name pos:line="426" pos:column="18">bArg1</name> <op:operator pos:line="426" pos:column="24">&amp;&amp;</op:operator> <name pos:line="426" pos:column="27">foldAtElse</name></expr>)</condition><then pos:line="426" pos:column="38"> <block pos:line="426" pos:column="39">{
                <if pos:line="427" pos:column="17">if <condition pos:line="427" pos:column="20">( <expr><call><name pos:line="427" pos:column="22">CmakeNextLineHasElse</name><argument_list pos:line="427" pos:column="42">(<argument><expr><name pos:line="427" pos:column="43">i</name></expr></argument>, <argument><expr><name pos:line="427" pos:column="46">startPos</name> <op:operator pos:line="427" pos:column="55">+</op:operator> <name pos:line="427" pos:column="57">length</name></expr></argument>, <argument><expr><name pos:line="427" pos:column="65">styler</name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="427" pos:column="74">
                    <expr_stmt><expr><name pos:line="428" pos:column="21">levelNext</name><op:operator pos:line="428" pos:column="30">--</op:operator></expr>;</expr_stmt></then></if>
            }</block></then></if>

            <comment type="line" pos:line="431" pos:column="13">// If we are on a new line...</comment>
            <decl_stmt><decl><type><name pos:line="432" pos:column="13">int</name></type> <name pos:line="432" pos:column="17">levelUse</name> <init pos:line="432" pos:column="26">= <expr><name pos:line="432" pos:column="28">levelCurrent</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="433" pos:column="13">int</name></type> <name pos:line="433" pos:column="17">lev</name> <init pos:line="433" pos:column="21">= <expr><name pos:line="433" pos:column="23">levelUse</name> <op:operator pos:line="433" pos:column="32">|</op:operator> <name pos:line="433" pos:column="34">levelNext</name> <op:operator pos:line="433" pos:column="44">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="433" pos:column="47">16</lit:literal></expr></init></decl>;</decl_stmt>
            <if pos:line="434" pos:column="13">if <condition pos:line="434" pos:column="16">(<expr><name pos:line="434" pos:column="17">levelUse</name> <op:operator pos:line="434" pos:column="26">&lt;</op:operator> <name pos:line="434" pos:column="28">levelNext</name></expr> )</condition><then pos:line="434" pos:column="39">
                <expr_stmt><expr><name pos:line="435" pos:column="17">lev</name> <op:operator pos:line="435" pos:column="21">|=</op:operator> <name pos:line="435" pos:column="24">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
            <if pos:line="436" pos:column="13">if <condition pos:line="436" pos:column="16">(<expr><name pos:line="436" pos:column="17">lev</name> <op:operator pos:line="436" pos:column="21">!=</op:operator> <call><name><name pos:line="436" pos:column="24">styler</name><op:operator pos:line="436" pos:column="30">.</op:operator><name pos:line="436" pos:column="31">LevelAt</name></name><argument_list pos:line="436" pos:column="38">(<argument><expr><name pos:line="436" pos:column="39">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="436" pos:column="52">
                <expr_stmt><expr><call><name><name pos:line="437" pos:column="17">styler</name><op:operator pos:line="437" pos:column="23">.</op:operator><name pos:line="437" pos:column="24">SetLevel</name></name><argument_list pos:line="437" pos:column="32">(<argument><expr><name pos:line="437" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="437" pos:column="46">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><name pos:line="439" pos:column="13">lineCurrent</name><op:operator pos:line="439" pos:column="24">++</op:operator></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="440" pos:column="13">levelCurrent</name> <op:operator pos:line="440" pos:column="26">=</op:operator> <name pos:line="440" pos:column="28">levelNext</name></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="441" pos:column="13">bArg1</name> <op:operator pos:line="441" pos:column="19">=</op:operator> <lit:literal type="boolean" pos:line="441" pos:column="21">true</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="441" pos:column="27">// New line, lets look at first argument again</comment>
            <expr_stmt><expr><name pos:line="442" pos:column="13">nWordStart</name> <op:operator pos:line="442" pos:column="24">=</op:operator> <op:operator pos:line="442" pos:column="26">-</op:operator><lit:literal type="number" pos:line="442" pos:column="27">1</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name pos:line="446" pos:column="5">int</name></type> <name pos:line="446" pos:column="9">levelUse</name> <init pos:line="446" pos:column="18">= <expr><name pos:line="446" pos:column="20">levelCurrent</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="447" pos:column="5">int</name></type> <name pos:line="447" pos:column="9">lev</name> <init pos:line="447" pos:column="13">= <expr><name pos:line="447" pos:column="15">levelUse</name> <op:operator pos:line="447" pos:column="24">|</op:operator> <name pos:line="447" pos:column="26">levelNext</name> <op:operator pos:line="447" pos:column="36">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="447" pos:column="39">16</lit:literal></expr></init></decl>;</decl_stmt>
    <if pos:line="448" pos:column="5">if <condition pos:line="448" pos:column="8">(<expr><name pos:line="448" pos:column="9">levelUse</name> <op:operator pos:line="448" pos:column="18">&lt;</op:operator> <name pos:line="448" pos:column="20">levelNext</name></expr>)</condition><then pos:line="448" pos:column="30">
        <expr_stmt><expr><name pos:line="449" pos:column="9">lev</name> <op:operator pos:line="449" pos:column="13">|=</op:operator> <name pos:line="449" pos:column="16">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
    <if pos:line="450" pos:column="5">if <condition pos:line="450" pos:column="8">(<expr><name pos:line="450" pos:column="9">lev</name> <op:operator pos:line="450" pos:column="13">!=</op:operator> <call><name><name pos:line="450" pos:column="16">styler</name><op:operator pos:line="450" pos:column="22">.</op:operator><name pos:line="450" pos:column="23">LevelAt</name></name><argument_list pos:line="450" pos:column="30">(<argument><expr><name pos:line="450" pos:column="31">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="450" pos:column="44">
        <expr_stmt><expr><call><name><name pos:line="451" pos:column="9">styler</name><op:operator pos:line="451" pos:column="15">.</op:operator><name pos:line="451" pos:column="16">SetLevel</name></name><argument_list pos:line="451" pos:column="24">(<argument><expr><name pos:line="451" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="451" pos:column="38">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="454" pos:column="1">static</specifier> <specifier pos:line="454" pos:column="8">const</specifier> <name pos:line="454" pos:column="14">char</name> <type:modifier pos:line="454" pos:column="19">*</type:modifier> <specifier pos:line="454" pos:column="21">const</specifier></type> <name><name pos:line="454" pos:column="27">cmakeWordLists</name><index pos:line="454" pos:column="41">[]</index></name> <init pos:line="454" pos:column="44">= <expr><block pos:line="454" pos:column="46">{
    <expr><lit:literal type="string" pos:line="455" pos:column="5">"Commands"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="456" pos:column="5">"Parameters"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="457" pos:column="5">"UserDefined"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="458" pos:column="5">0</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="459" pos:column="5">0</lit:literal></expr>,}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="461" pos:column="1">LexerModule</name></type> <name pos:line="461" pos:column="13">lmCmake</name><argument_list pos:line="461" pos:column="20">(<argument><expr><name pos:line="461" pos:column="21">SCLEX_CMAKE</name></expr></argument>, <argument><expr><name pos:line="461" pos:column="34">ColouriseCmakeDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="461" pos:column="53">"cmake"</lit:literal></expr></argument>, <argument><expr><name pos:line="461" pos:column="62">FoldCmakeDoc</name></expr></argument>, <argument><expr><name pos:line="461" pos:column="76">cmakeWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
