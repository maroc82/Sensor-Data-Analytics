<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\FunctionList\functionListPanel.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"functionListPanel.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>

<function><type><name pos:line="33" pos:column="1">void</name></type> <name><name pos:line="33" pos:column="6">FunctionListPanel</name><op:operator pos:line="33" pos:column="23">::</op:operator><name pos:line="33" pos:column="25">addEntry</name></name><parameter_list pos:line="33" pos:column="33">(<param><decl><type><specifier pos:line="33" pos:column="34">const</specifier> <name pos:line="33" pos:column="40">TCHAR</name> <type:modifier pos:line="33" pos:column="46">*</type:modifier></type><name pos:line="33" pos:column="47">displayText</name></decl></param>, <param><decl><type><name pos:line="33" pos:column="60">size_t</name></type> <name pos:line="33" pos:column="67">pos</name></decl></param>)</parameter_list>
<block pos:line="34" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">int</name></type> <name pos:line="35" pos:column="13">index</name> <init pos:line="35" pos:column="19">= <expr><call><name><op:operator pos:line="35" pos:column="21">::</op:operator><name pos:line="35" pos:column="23">SendDlgItemMessage</name></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name pos:line="35" pos:column="42">_hSelf</name></expr></argument>, <argument><expr><name pos:line="35" pos:column="50">IDC_LIST_FUNCLIST</name></expr></argument>, <argument><expr><name pos:line="35" pos:column="69">LB_GETCOUNT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="35" pos:column="82">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="35" pos:column="85">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="36" pos:column="9">::</op:operator><name pos:line="36" pos:column="11">SendDlgItemMessage</name></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name pos:line="36" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="38">IDC_LIST_FUNCLIST</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="57">LB_INSERTSTRING</name></expr></argument>, <argument><expr><name pos:line="36" pos:column="74">index</name></expr></argument>, <argument><expr><op:operator pos:line="36" pos:column="81">(</op:operator><name pos:line="36" pos:column="82">LPARAM</name><op:operator pos:line="36" pos:column="88">)</op:operator><name pos:line="36" pos:column="89">displayText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="37" pos:column="9">::</op:operator><name pos:line="37" pos:column="11">SendDlgItemMessage</name></name><argument_list pos:line="37" pos:column="29">(<argument><expr><name pos:line="37" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="38">IDC_LIST_FUNCLIST</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="57">LB_SETITEMDATA</name></expr></argument>, <argument><expr><name pos:line="37" pos:column="73">index</name></expr></argument>, <argument><expr><op:operator pos:line="37" pos:column="80">(</op:operator><name pos:line="37" pos:column="81">LPARAM</name><op:operator pos:line="37" pos:column="87">)</op:operator><name pos:line="37" pos:column="88">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="40" pos:column="1">void</name></type> <name><name pos:line="40" pos:column="6">FunctionListPanel</name><op:operator pos:line="40" pos:column="23">::</op:operator><name pos:line="40" pos:column="25">removeAllEntries</name></name><parameter_list pos:line="40" pos:column="41">()</parameter_list>
<block pos:line="41" pos:column="1">{
	<while pos:line="42" pos:column="9">while <condition pos:line="42" pos:column="15">(<expr><call><name><op:operator pos:line="42" pos:column="16">::</op:operator><name pos:line="42" pos:column="18">SendDlgItemMessage</name></name><argument_list pos:line="42" pos:column="36">(<argument><expr><name pos:line="42" pos:column="37">_hSelf</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="45">IDC_LIST_FUNCLIST</name></expr></argument>, <argument><expr><name pos:line="42" pos:column="64">LB_GETCOUNT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="42" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="42" pos:column="80">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition>
		<expr_stmt><expr><call><name><op:operator pos:line="43" pos:column="17">::</op:operator><name pos:line="43" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="43" pos:column="37">(<argument><expr><name pos:line="43" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="46">IDC_LIST_FUNCLIST</name></expr></argument>, <argument><expr><name pos:line="43" pos:column="65">LB_DELETESTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="43" pos:column="82">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="43" pos:column="85">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
}</block></function>

<comment type="line" pos:line="46" pos:column="1">// bodyOpenSybe mbol &amp; bodyCloseSymbol should be RE</comment>
<function><type><name pos:line="47" pos:column="1">size_t</name></type> <name><name pos:line="47" pos:column="8">FunctionListPanel</name><op:operator pos:line="47" pos:column="25">::</op:operator><name pos:line="47" pos:column="27">getBodyClosePos</name></name><parameter_list pos:line="47" pos:column="42">(<param><decl><type><name pos:line="47" pos:column="43">size_t</name></type> <name pos:line="47" pos:column="50">begin</name></decl></param>, <param><decl><type><specifier pos:line="47" pos:column="57">const</specifier> <name pos:line="47" pos:column="63">TCHAR</name> <type:modifier pos:line="47" pos:column="69">*</type:modifier></type><name pos:line="47" pos:column="70">bodyOpenSymbol</name></decl></param>, <param><decl><type><specifier pos:line="47" pos:column="86">const</specifier> <name pos:line="47" pos:column="92">TCHAR</name> <type:modifier pos:line="47" pos:column="98">*</type:modifier></type><name pos:line="47" pos:column="99">bodyCloseSymbol</name></decl></param>)</parameter_list>
<block pos:line="48" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="49" pos:column="9">size_t</name></type> <name pos:line="49" pos:column="16">cntOpen</name> <init pos:line="49" pos:column="24">= <expr><lit:literal type="number" pos:line="49" pos:column="26">1</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="51" pos:column="9">int</name></type> <name pos:line="51" pos:column="13">docLen</name> <init pos:line="51" pos:column="20">= <expr><call><name pos:line="51" pos:column="22">(<type:modifier pos:line="51" pos:column="23">*</type:modifier><name pos:line="51" pos:column="24">_ppEditView</name>)<op:operator pos:line="51" pos:column="36">-&gt;</op:operator><name pos:line="51" pos:column="38">getCurrentDocLen</name></name><argument_list pos:line="51" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">begin</name> <op:operator pos:line="53" pos:column="19">&gt;=</op:operator> <op:operator pos:line="53" pos:column="22">(</op:operator><name pos:line="53" pos:column="23">size_t</name><op:operator pos:line="53" pos:column="29">)</op:operator><name pos:line="53" pos:column="30">docLen</name></expr>)</condition><then pos:line="53" pos:column="37">
		<return pos:line="54" pos:column="17">return <expr><name pos:line="54" pos:column="24">docLen</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="56" pos:column="9">generic_string</name></type> <name pos:line="56" pos:column="24">exprToSearch</name> <init pos:line="56" pos:column="37">= <expr><call><name pos:line="56" pos:column="39">TEXT</name><argument_list pos:line="56" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="56" pos:column="44">"("</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="57" pos:column="9">exprToSearch</name> <op:operator pos:line="57" pos:column="22">+=</op:operator> <name pos:line="57" pos:column="25">bodyOpenSymbol</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="58" pos:column="9">exprToSearch</name> <op:operator pos:line="58" pos:column="22">+=</op:operator> <call><name pos:line="58" pos:column="25">TEXT</name><argument_list pos:line="58" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="30">"|"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="59" pos:column="9">exprToSearch</name> <op:operator pos:line="59" pos:column="22">+=</op:operator> <name pos:line="59" pos:column="25">bodyCloseSymbol</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="60" pos:column="9">exprToSearch</name> <op:operator pos:line="60" pos:column="22">+=</op:operator> <call><name pos:line="60" pos:column="25">TEXT</name><argument_list pos:line="60" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="30">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<decl_stmt><decl><type><name pos:line="63" pos:column="9">int</name></type> <name pos:line="63" pos:column="13">flags</name> <init pos:line="63" pos:column="19">= <expr><name pos:line="63" pos:column="21">SCFIND_REGEXP</name> <op:operator pos:line="63" pos:column="35">|</op:operator> <name pos:line="63" pos:column="37">SCFIND_POSIX</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="65" pos:column="9">(<type:modifier pos:line="65" pos:column="10">*</type:modifier><name pos:line="65" pos:column="11">_ppEditView</name>)<op:operator pos:line="65" pos:column="23">-&gt;</op:operator><name pos:line="65" pos:column="25">execute</name></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name pos:line="65" pos:column="33">SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="53">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">int</name></type> <name pos:line="66" pos:column="13">targetStart</name> <init pos:line="66" pos:column="25">= <expr><call><name pos:line="66" pos:column="27">(<type:modifier pos:line="66" pos:column="28">*</type:modifier><name pos:line="66" pos:column="29">_ppEditView</name>)<op:operator pos:line="66" pos:column="41">-&gt;</op:operator><name pos:line="66" pos:column="43">searchInTarget</name></name><argument_list pos:line="66" pos:column="57">(<argument><expr><call><name><name pos:line="66" pos:column="58">exprToSearch</name><op:operator pos:line="66" pos:column="70">.</op:operator><name pos:line="66" pos:column="71">c_str</name></name><argument_list pos:line="66" pos:column="76">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="66" pos:column="80">exprToSearch</name><op:operator pos:line="66" pos:column="92">.</op:operator><name pos:line="66" pos:column="93">length</name></name><argument_list pos:line="66" pos:column="99">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="66" pos:column="103">begin</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="110">docLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">int</name></type> <name pos:line="67" pos:column="13">targetEnd</name> <init pos:line="67" pos:column="23">= <expr><lit:literal type="number" pos:line="67" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>

	<do pos:line="69" pos:column="9">do
	<block pos:line="70" pos:column="9">{
		<if pos:line="71" pos:column="17">if <condition pos:line="71" pos:column="20">(<expr><name pos:line="71" pos:column="21">targetStart</name> <op:operator pos:line="71" pos:column="33">!=</op:operator> <op:operator pos:line="71" pos:column="36">-</op:operator><lit:literal type="number" pos:line="71" pos:column="37">1</lit:literal> <op:operator pos:line="71" pos:column="39">&amp;&amp;</op:operator> <name pos:line="71" pos:column="42">targetStart</name> <op:operator pos:line="71" pos:column="54">!=</op:operator> <op:operator pos:line="71" pos:column="57">-</op:operator><lit:literal type="number" pos:line="71" pos:column="58">2</lit:literal></expr>)</condition><then pos:line="71" pos:column="60"> <comment type="line" pos:line="71" pos:column="61">// found open or close symbol</comment>
		<block pos:line="72" pos:column="17">{
			<expr_stmt><expr><name pos:line="73" pos:column="25">targetEnd</name> <op:operator pos:line="73" pos:column="35">=</op:operator> <call><name pos:line="73" pos:column="37">int</name><argument_list pos:line="73" pos:column="40">(<argument><expr><call><name pos:line="73" pos:column="41">(<type:modifier pos:line="73" pos:column="42">*</type:modifier><name pos:line="73" pos:column="43">_ppEditView</name>)<op:operator pos:line="73" pos:column="55">-&gt;</op:operator><name pos:line="73" pos:column="57">execute</name></name><argument_list pos:line="73" pos:column="64">(<argument><expr><name pos:line="73" pos:column="65">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line" pos:line="75" pos:column="25">// Now we determinate the symbol (open or close)</comment>
			<decl_stmt><decl><type><name pos:line="76" pos:column="25">int</name></type> <name pos:line="76" pos:column="29">tmpStart</name> <init pos:line="76" pos:column="38">= <expr><call><name pos:line="76" pos:column="40">(<type:modifier pos:line="76" pos:column="41">*</type:modifier><name pos:line="76" pos:column="42">_ppEditView</name>)<op:operator pos:line="76" pos:column="54">-&gt;</op:operator><name pos:line="76" pos:column="56">searchInTarget</name></name><argument_list pos:line="76" pos:column="70">(<argument><expr><name pos:line="76" pos:column="71">bodyOpenSymbol</name></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="87">lstrlen</name><argument_list pos:line="76" pos:column="94">(<argument><expr><name pos:line="76" pos:column="95">bodyOpenSymbol</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="76" pos:column="112">targetStart</name></expr></argument>, <argument><expr><name pos:line="76" pos:column="125">targetEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="77" pos:column="25">if <condition pos:line="77" pos:column="28">(<expr><name pos:line="77" pos:column="29">tmpStart</name> <op:operator pos:line="77" pos:column="38">!=</op:operator> <op:operator pos:line="77" pos:column="41">-</op:operator><lit:literal type="number" pos:line="77" pos:column="42">1</lit:literal> <op:operator pos:line="77" pos:column="44">&amp;&amp;</op:operator> <name pos:line="77" pos:column="47">tmpStart</name> <op:operator pos:line="77" pos:column="56">!=</op:operator> <op:operator pos:line="77" pos:column="59">-</op:operator><lit:literal type="number" pos:line="77" pos:column="60">2</lit:literal></expr>)</condition><then pos:line="77" pos:column="62"> <comment type="line" pos:line="77" pos:column="63">// open symbol found </comment>
			<block pos:line="78" pos:column="25">{
				<expr_stmt><expr><name pos:line="79" pos:column="33">cntOpen</name><op:operator pos:line="79" pos:column="40">++</op:operator></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="81" pos:column="25">else <comment type="line" pos:line="81" pos:column="30">// if it's not open symbol, then it must be the close one</comment>
			<block pos:line="82" pos:column="25">{
				<expr_stmt><expr><name pos:line="83" pos:column="33">cntOpen</name><op:operator pos:line="83" pos:column="40">--</op:operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else pos:line="86" pos:column="17">else <comment type="line" pos:line="86" pos:column="22">// nothing found</comment>
		<block pos:line="87" pos:column="17">{
			<expr_stmt><expr><name pos:line="88" pos:column="25">cntOpen</name> <op:operator pos:line="88" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="88" pos:column="35">0</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="88" pos:column="38">// get me out of here</comment>
			<expr_stmt><expr><name pos:line="89" pos:column="25">targetEnd</name> <op:operator pos:line="89" pos:column="35">=</op:operator> <name pos:line="89" pos:column="37">begin</name></expr>;</expr_stmt>
		}</block></else></if>

		<expr_stmt><expr><name pos:line="92" pos:column="17">targetStart</name> <op:operator pos:line="92" pos:column="29">=</op:operator> <call><name pos:line="92" pos:column="31">(<type:modifier pos:line="92" pos:column="32">*</type:modifier><name pos:line="92" pos:column="33">_ppEditView</name>)<op:operator pos:line="92" pos:column="45">-&gt;</op:operator><name pos:line="92" pos:column="47">searchInTarget</name></name><argument_list pos:line="92" pos:column="61">(<argument><expr><call><name><name pos:line="92" pos:column="62">exprToSearch</name><op:operator pos:line="92" pos:column="74">.</op:operator><name pos:line="92" pos:column="75">c_str</name></name><argument_list pos:line="92" pos:column="80">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="92" pos:column="84">exprToSearch</name><op:operator pos:line="92" pos:column="96">.</op:operator><name pos:line="92" pos:column="97">length</name></name><argument_list pos:line="92" pos:column="103">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="92" pos:column="107">targetEnd</name></expr></argument>, <argument><expr><name pos:line="92" pos:column="118">docLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block> while <condition pos:line="94" pos:column="17">(<expr><name pos:line="94" pos:column="18">cntOpen</name></expr>)</condition>;</do>

	<return pos:line="96" pos:column="9">return <expr><name pos:line="96" pos:column="16">targetEnd</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="99" pos:column="1">// This method will </comment>
<function><type><name pos:line="100" pos:column="1">void</name></type> <name><name pos:line="100" pos:column="6">FunctionListPanel</name><op:operator pos:line="100" pos:column="23">::</op:operator><name pos:line="100" pos:column="25">parse2</name></name><parameter_list pos:line="100" pos:column="31">(<param><decl><type><name><name pos:line="100" pos:column="32">std</name><op:operator pos:line="100" pos:column="35">::</op:operator><name><name pos:line="100" pos:column="37">vector</name><argument_list pos:line="100" pos:column="43">&lt;<argument><expr><name pos:line="100" pos:column="44">foundInfo</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="100" pos:column="55">&amp;</type:modifier></type> <name pos:line="100" pos:column="57">foundInfos</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="69">size_t</name></type> <name pos:line="100" pos:column="76">begin</name></decl></param>, <param><decl><type><name pos:line="100" pos:column="83">size_t</name></type> <name pos:line="100" pos:column="90">end</name></decl></param>, <param><decl><type><specifier pos:line="100" pos:column="95">const</specifier> <name pos:line="100" pos:column="101">TCHAR</name> <type:modifier pos:line="100" pos:column="107">*</type:modifier></type><name pos:line="100" pos:column="108">block</name></decl></param>, <param><decl><type><name><name pos:line="100" pos:column="115">std</name><op:operator pos:line="100" pos:column="118">::</op:operator><name><name pos:line="100" pos:column="120">vector</name><argument_list pos:line="100" pos:column="126">&lt; <argument><expr><name pos:line="100" pos:column="128">generic_string</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="100" pos:column="145">blockNameToSearch</name></decl></param>, <param><decl><type><specifier pos:line="100" pos:column="164">const</specifier> <name pos:line="100" pos:column="170">TCHAR</name> <type:modifier pos:line="100" pos:column="176">*</type:modifier></type><name pos:line="100" pos:column="177">bodyOpenSymbol</name></decl></param>, <param><decl><type><specifier pos:line="100" pos:column="193">const</specifier> <name pos:line="100" pos:column="199">TCHAR</name> <type:modifier pos:line="100" pos:column="205">*</type:modifier></type><name pos:line="100" pos:column="206">bodyCloseSymbol</name></decl></param>, <param><decl><type><specifier pos:line="100" pos:column="223">const</specifier> <name pos:line="100" pos:column="229">TCHAR</name> <type:modifier pos:line="100" pos:column="235">*</type:modifier></type><name pos:line="100" pos:column="236">function</name></decl></param>, <param><decl><type><name><name pos:line="100" pos:column="246">std</name><op:operator pos:line="100" pos:column="249">::</op:operator><name><name pos:line="100" pos:column="251">vector</name><argument_list pos:line="100" pos:column="257">&lt; <argument><expr><name pos:line="100" pos:column="259">generic_string</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="100" pos:column="276">functionToSearch</name></decl></param>)</parameter_list>
<block pos:line="101" pos:column="1">{
	<if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><name pos:line="102" pos:column="13">begin</name> <op:operator pos:line="102" pos:column="19">&gt;=</op:operator> <name pos:line="102" pos:column="22">end</name></expr>)</condition><then pos:line="102" pos:column="26">
		<return pos:line="103" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="105" pos:column="9">int</name></type> <name pos:line="105" pos:column="13">flags</name> <init pos:line="105" pos:column="19">= <expr><name pos:line="105" pos:column="21">SCFIND_REGEXP</name> <op:operator pos:line="105" pos:column="35">|</op:operator> <name pos:line="105" pos:column="37">SCFIND_POSIX</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="107" pos:column="9">(<type:modifier pos:line="107" pos:column="10">*</type:modifier><name pos:line="107" pos:column="11">_ppEditView</name>)<op:operator pos:line="107" pos:column="23">-&gt;</op:operator><name pos:line="107" pos:column="25">execute</name></name><argument_list pos:line="107" pos:column="32">(<argument><expr><name pos:line="107" pos:column="33">SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name pos:line="107" pos:column="53">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="108" pos:column="9">int</name></type> <name pos:line="108" pos:column="13">targetStart</name> <init pos:line="108" pos:column="25">= <expr><call><name pos:line="108" pos:column="27">(<type:modifier pos:line="108" pos:column="28">*</type:modifier><name pos:line="108" pos:column="29">_ppEditView</name>)<op:operator pos:line="108" pos:column="41">-&gt;</op:operator><name pos:line="108" pos:column="43">searchInTarget</name></name><argument_list pos:line="108" pos:column="57">(<argument><expr><name pos:line="108" pos:column="58">block</name></expr></argument>, <argument><expr><call><name pos:line="108" pos:column="65">lstrlen</name><argument_list pos:line="108" pos:column="72">(<argument><expr><name pos:line="108" pos:column="73">block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="108" pos:column="81">begin</name></expr></argument>, <argument><expr><name pos:line="108" pos:column="88">end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="109" pos:column="9">int</name></type> <name pos:line="109" pos:column="13">targetEnd</name> <init pos:line="109" pos:column="23">= <expr><lit:literal type="number" pos:line="109" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	
	<comment type="line" pos:line="111" pos:column="9">//foundInfos.clear();</comment>
	<while pos:line="112" pos:column="9">while <condition pos:line="112" pos:column="15">(<expr><name pos:line="112" pos:column="16">targetStart</name> <op:operator pos:line="112" pos:column="28">!=</op:operator> <op:operator pos:line="112" pos:column="31">-</op:operator><lit:literal type="number" pos:line="112" pos:column="32">1</lit:literal> <op:operator pos:line="112" pos:column="34">&amp;&amp;</op:operator> <name pos:line="112" pos:column="37">targetStart</name> <op:operator pos:line="112" pos:column="49">!=</op:operator> <op:operator pos:line="112" pos:column="52">-</op:operator><lit:literal type="number" pos:line="112" pos:column="53">2</lit:literal></expr>)</condition>
	<block pos:line="113" pos:column="9">{
		<expr_stmt><expr><name pos:line="114" pos:column="17">targetEnd</name> <op:operator pos:line="114" pos:column="27">=</op:operator> <call><name pos:line="114" pos:column="29">int</name><argument_list pos:line="114" pos:column="32">(<argument><expr><call><name pos:line="114" pos:column="33">(<type:modifier pos:line="114" pos:column="34">*</type:modifier><name pos:line="114" pos:column="35">_ppEditView</name>)<op:operator pos:line="114" pos:column="47">-&gt;</op:operator><name pos:line="114" pos:column="49">execute</name></name><argument_list pos:line="114" pos:column="56">(<argument><expr><name pos:line="114" pos:column="57">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="116" pos:column="17">// Get class name</comment>
		<decl_stmt><decl><type><name pos:line="117" pos:column="17">int</name></type> <name pos:line="117" pos:column="21">foundPos</name> <init pos:line="117" pos:column="30">= <expr><lit:literal type="number" pos:line="117" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="118" pos:column="17">generic_string</name></type> <name pos:line="118" pos:column="32">classStructName</name> <init pos:line="118" pos:column="48">= <expr><call><name pos:line="118" pos:column="50">parseSubLevel</name><argument_list pos:line="118" pos:column="63">(<argument><expr><name pos:line="118" pos:column="64">targetStart</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="77">targetEnd</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="88">blockNameToSearch</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="107">foundPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		

		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><call><name pos:line="121" pos:column="21">lstrcmp</name><argument_list pos:line="121" pos:column="28">(<argument><expr><name pos:line="121" pos:column="29">bodyOpenSymbol</name></expr></argument>, <argument><expr><call><name pos:line="121" pos:column="45">TEXT</name><argument_list pos:line="121" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="50">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="55">!=</op:operator> <lit:literal type="number" pos:line="121" pos:column="58">0</lit:literal> <op:operator pos:line="121" pos:column="60">&amp;&amp;</op:operator> <call><name pos:line="121" pos:column="63">lstrcmp</name><argument_list pos:line="121" pos:column="70">(<argument><expr><name pos:line="121" pos:column="71">bodyCloseSymbol</name></expr></argument>, <argument><expr><call><name pos:line="121" pos:column="88">TEXT</name><argument_list pos:line="121" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="93">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="98">!=</op:operator> <lit:literal type="number" pos:line="121" pos:column="101">0</lit:literal></expr>)</condition><then pos:line="121" pos:column="103">
		<block pos:line="122" pos:column="17">{
			<expr_stmt><expr><name pos:line="123" pos:column="25">targetEnd</name> <op:operator pos:line="123" pos:column="35">=</op:operator> <call><name pos:line="123" pos:column="37">getBodyClosePos</name><argument_list pos:line="123" pos:column="52">(<argument><expr><name pos:line="123" pos:column="53">targetEnd</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="64">bodyOpenSymbol</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="80">bodyCloseSymbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="126" pos:column="17">if <condition pos:line="126" pos:column="20">(<expr><name pos:line="126" pos:column="21">targetEnd</name> <op:operator pos:line="126" pos:column="31">&gt;</op:operator> <call><name pos:line="126" pos:column="33">int</name><argument_list pos:line="126" pos:column="36">(<argument><expr><name pos:line="126" pos:column="37">end</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="126" pos:column="42"> <comment type="line" pos:line="126" pos:column="43">//we found a result but outside our range, therefore do not process it</comment>
		<block pos:line="127" pos:column="17">{
			<break pos:line="128" pos:column="25">break;</break>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="130" pos:column="17">int</name></type> <name pos:line="130" pos:column="21">foundTextLen</name> <init pos:line="130" pos:column="34">= <expr><name pos:line="130" pos:column="36">targetEnd</name> <op:operator pos:line="130" pos:column="46">-</op:operator> <name pos:line="130" pos:column="48">targetStart</name></expr></init></decl>;</decl_stmt>
		<if pos:line="131" pos:column="17">if <condition pos:line="131" pos:column="20">(<expr><name pos:line="131" pos:column="21">targetStart</name> <op:operator pos:line="131" pos:column="33">+</op:operator> <name pos:line="131" pos:column="35">foundTextLen</name> <op:operator pos:line="131" pos:column="48">==</op:operator> <call><name pos:line="131" pos:column="51">int</name><argument_list pos:line="131" pos:column="54">(<argument><expr><name pos:line="131" pos:column="55">end</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="131" pos:column="60">
            <break pos:line="132" pos:column="13">break;</break></then></if>

		<comment type="line" pos:line="134" pos:column="17">// Begin to search all method inside</comment>
		<decl_stmt><decl><type><name><name pos:line="135" pos:column="17">vector</name><argument_list pos:line="135" pos:column="23">&lt; <argument><expr><name pos:line="135" pos:column="25">generic_string</name></expr></argument> &gt;</argument_list></name></type> <name pos:line="135" pos:column="42">emptyArray</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="136" pos:column="17">parse</name><argument_list pos:line="136" pos:column="22">(<argument><expr><name pos:line="136" pos:column="23">foundInfos</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="35">targetStart</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="48">targetEnd</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="59">function</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="69">functionToSearch</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="87">emptyArray</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="99">classStructName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="138" pos:column="17">begin</name> <op:operator pos:line="138" pos:column="23">=</op:operator> <name pos:line="138" pos:column="25">targetStart</name> <op:operator pos:line="138" pos:column="37">+</op:operator> <op:operator pos:line="138" pos:column="39">(</op:operator><name pos:line="138" pos:column="40">targetEnd</name> <op:operator pos:line="138" pos:column="50">-</op:operator> <name pos:line="138" pos:column="52">targetStart</name><op:operator pos:line="138" pos:column="63">)</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="139" pos:column="17">targetStart</name> <op:operator pos:line="139" pos:column="29">=</op:operator> <call><name pos:line="139" pos:column="31">(<type:modifier pos:line="139" pos:column="32">*</type:modifier><name pos:line="139" pos:column="33">_ppEditView</name>)<op:operator pos:line="139" pos:column="45">-&gt;</op:operator><name pos:line="139" pos:column="47">searchInTarget</name></name><argument_list pos:line="139" pos:column="61">(<argument><expr><name pos:line="139" pos:column="62">block</name></expr></argument>, <argument><expr><call><name pos:line="139" pos:column="69">lstrlen</name><argument_list pos:line="139" pos:column="76">(<argument><expr><name pos:line="139" pos:column="77">block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="139" pos:column="85">begin</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="92">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name pos:line="143" pos:column="1">void</name></type> <name><name pos:line="143" pos:column="6">FunctionListPanel</name><op:operator pos:line="143" pos:column="23">::</op:operator><name pos:line="143" pos:column="25">parse</name></name><parameter_list pos:line="143" pos:column="30">(<param><decl><type><name><name pos:line="143" pos:column="31">vector</name><argument_list pos:line="143" pos:column="37">&lt;<argument><expr><name pos:line="143" pos:column="38">foundInfo</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="143" pos:column="49">&amp;</type:modifier></type> <name pos:line="143" pos:column="51">foundInfos</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="63">size_t</name></type> <name pos:line="143" pos:column="70">begin</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="77">size_t</name></type> <name pos:line="143" pos:column="84">end</name></decl></param>, <param><decl><type><specifier pos:line="143" pos:column="89">const</specifier> <name pos:line="143" pos:column="95">TCHAR</name> <type:modifier pos:line="143" pos:column="101">*</type:modifier></type><name pos:line="143" pos:column="102">regExpr2search</name></decl></param>, <param><decl><type><name><name pos:line="143" pos:column="118">vector</name><argument_list pos:line="143" pos:column="124">&lt; <argument><expr><name pos:line="143" pos:column="126">generic_string</name></expr></argument> &gt;</argument_list></name></type> <name pos:line="143" pos:column="143">dataToSearch</name></decl></param>, <param><decl><type><name><name pos:line="143" pos:column="157">vector</name><argument_list pos:line="143" pos:column="163">&lt; <argument><expr><name pos:line="143" pos:column="165">generic_string</name></expr></argument> &gt;</argument_list></name></type> <name pos:line="143" pos:column="182">data2ToSearch</name></decl></param>, <param><decl><type><name pos:line="143" pos:column="197">generic_string</name></type> <name pos:line="143" pos:column="212">classStructName</name></decl></param>)</parameter_list>
<block pos:line="144" pos:column="1">{
	<if pos:line="145" pos:column="9">if <condition pos:line="145" pos:column="12">(<expr><name pos:line="145" pos:column="13">begin</name> <op:operator pos:line="145" pos:column="19">&gt;=</op:operator> <name pos:line="145" pos:column="22">end</name></expr>)</condition><then pos:line="145" pos:column="26">
		<return pos:line="146" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="148" pos:column="9">int</name></type> <name pos:line="148" pos:column="13">flags</name> <init pos:line="148" pos:column="19">= <expr><name pos:line="148" pos:column="21">SCFIND_REGEXP</name> <op:operator pos:line="148" pos:column="35">|</op:operator> <name pos:line="148" pos:column="37">SCFIND_POSIX</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="150" pos:column="9">(<type:modifier pos:line="150" pos:column="10">*</type:modifier><name pos:line="150" pos:column="11">_ppEditView</name>)<op:operator pos:line="150" pos:column="23">-&gt;</op:operator><name pos:line="150" pos:column="25">execute</name></name><argument_list pos:line="150" pos:column="32">(<argument><expr><name pos:line="150" pos:column="33">SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="53">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="151" pos:column="9">int</name></type> <name pos:line="151" pos:column="13">targetStart</name> <init pos:line="151" pos:column="25">= <expr><call><name pos:line="151" pos:column="27">(<type:modifier pos:line="151" pos:column="28">*</type:modifier><name pos:line="151" pos:column="29">_ppEditView</name>)<op:operator pos:line="151" pos:column="41">-&gt;</op:operator><name pos:line="151" pos:column="43">searchInTarget</name></name><argument_list pos:line="151" pos:column="57">(<argument><expr><name pos:line="151" pos:column="58">regExpr2search</name></expr></argument>, <argument><expr><call><name pos:line="151" pos:column="74">lstrlen</name><argument_list pos:line="151" pos:column="81">(<argument><expr><name pos:line="151" pos:column="82">regExpr2search</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="151" pos:column="99">begin</name></expr></argument>, <argument><expr><name pos:line="151" pos:column="106">end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="152" pos:column="9">int</name></type> <name pos:line="152" pos:column="13">targetEnd</name> <init pos:line="152" pos:column="23">= <expr><lit:literal type="number" pos:line="152" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	
	<comment type="line" pos:line="154" pos:column="9">//foundInfos.clear();</comment>
	<while pos:line="155" pos:column="9">while <condition pos:line="155" pos:column="15">(<expr><name pos:line="155" pos:column="16">targetStart</name> <op:operator pos:line="155" pos:column="28">!=</op:operator> <op:operator pos:line="155" pos:column="31">-</op:operator><lit:literal type="number" pos:line="155" pos:column="32">1</lit:literal> <op:operator pos:line="155" pos:column="34">&amp;&amp;</op:operator> <name pos:line="155" pos:column="37">targetStart</name> <op:operator pos:line="155" pos:column="49">!=</op:operator> <op:operator pos:line="155" pos:column="52">-</op:operator><lit:literal type="number" pos:line="155" pos:column="53">2</lit:literal></expr>)</condition>
	<block pos:line="156" pos:column="9">{
		<expr_stmt><expr><name pos:line="157" pos:column="17">targetStart</name> <op:operator pos:line="157" pos:column="29">=</op:operator> <call><name pos:line="157" pos:column="31">int</name><argument_list pos:line="157" pos:column="34">(<argument><expr><call><name pos:line="157" pos:column="35">(<type:modifier pos:line="157" pos:column="36">*</type:modifier><name pos:line="157" pos:column="37">_ppEditView</name>)<op:operator pos:line="157" pos:column="49">-&gt;</op:operator><name pos:line="157" pos:column="51">execute</name></name><argument_list pos:line="157" pos:column="58">(<argument><expr><name pos:line="157" pos:column="59">SCI_GETTARGETSTART</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="158" pos:column="17">targetEnd</name> <op:operator pos:line="158" pos:column="27">=</op:operator> <call><name pos:line="158" pos:column="29">int</name><argument_list pos:line="158" pos:column="32">(<argument><expr><call><name pos:line="158" pos:column="33">(<type:modifier pos:line="158" pos:column="34">*</type:modifier><name pos:line="158" pos:column="35">_ppEditView</name>)<op:operator pos:line="158" pos:column="47">-&gt;</op:operator><name pos:line="158" pos:column="49">execute</name></name><argument_list pos:line="158" pos:column="56">(<argument><expr><name pos:line="158" pos:column="57">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="159" pos:column="17">if <condition pos:line="159" pos:column="20">(<expr><name pos:line="159" pos:column="21">targetEnd</name> <op:operator pos:line="159" pos:column="31">&gt;</op:operator> <call><name pos:line="159" pos:column="33">int</name><argument_list pos:line="159" pos:column="36">(<argument><expr><name pos:line="159" pos:column="37">end</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="159" pos:column="42"> <comment type="line" pos:line="159" pos:column="43">//we found a result but outside our range, therefore do not process it</comment>
		<block pos:line="160" pos:column="17">{
			<break pos:line="161" pos:column="25">break;</break>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">int</name></type> <name pos:line="163" pos:column="21">foundTextLen</name> <init pos:line="163" pos:column="34">= <expr><name pos:line="163" pos:column="36">targetEnd</name> <op:operator pos:line="163" pos:column="46">-</op:operator> <name pos:line="163" pos:column="48">targetStart</name></expr></init></decl>;</decl_stmt>
		<if pos:line="164" pos:column="17">if <condition pos:line="164" pos:column="20">(<expr><name pos:line="164" pos:column="21">targetStart</name> <op:operator pos:line="164" pos:column="33">+</op:operator> <name pos:line="164" pos:column="35">foundTextLen</name> <op:operator pos:line="164" pos:column="48">==</op:operator> <call><name pos:line="164" pos:column="51">int</name><argument_list pos:line="164" pos:column="54">(<argument><expr><name pos:line="164" pos:column="55">end</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="164" pos:column="60">
            <break pos:line="165" pos:column="13">break;</break></then></if>

		<decl_stmt><decl><type><name pos:line="167" pos:column="17">foundInfo</name></type> <name pos:line="167" pos:column="27">fi</name></decl>;</decl_stmt>

		<comment type="line" pos:line="169" pos:column="17">// dataToSearch &amp; data2ToSearch are optional</comment>
		<if pos:line="170" pos:column="17">if <condition pos:line="170" pos:column="20">(<expr><op:operator pos:line="170" pos:column="21">!</op:operator><call><name><name pos:line="170" pos:column="22">dataToSearch</name><op:operator pos:line="170" pos:column="34">.</op:operator><name pos:line="170" pos:column="35">size</name></name><argument_list pos:line="170" pos:column="39">()</argument_list></call> <op:operator pos:line="170" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="170" pos:column="45">!</op:operator><call><name><name pos:line="170" pos:column="46">data2ToSearch</name><op:operator pos:line="170" pos:column="59">.</op:operator><name pos:line="170" pos:column="60">size</name></name><argument_list pos:line="170" pos:column="64">()</argument_list></call></expr>)</condition><then pos:line="170" pos:column="67">
		<block pos:line="171" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="172" pos:column="25">TCHAR</name></type> <name><name pos:line="172" pos:column="31">foundData</name><index pos:line="172" pos:column="40">[<expr><lit:literal type="number" pos:line="172" pos:column="41">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="173" pos:column="25">(<type:modifier pos:line="173" pos:column="26">*</type:modifier><name pos:line="173" pos:column="27">_ppEditView</name>)<op:operator pos:line="173" pos:column="39">-&gt;</op:operator><name pos:line="173" pos:column="41">getGenericText</name></name><argument_list pos:line="173" pos:column="55">(<argument><expr><name pos:line="173" pos:column="56">foundData</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="173" pos:column="67">1024</lit:literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="73">targetStart</name></expr></argument>, <argument><expr><name pos:line="173" pos:column="86">targetEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name pos:line="175" pos:column="25">fi</name><op:operator pos:line="175" pos:column="27">.</op:operator><name pos:line="175" pos:column="28">_data</name></name> <op:operator pos:line="175" pos:column="34">=</op:operator> <name pos:line="175" pos:column="36">foundData</name></expr>;</expr_stmt> <comment type="line" pos:line="175" pos:column="47">// whole found data</comment>
			<expr_stmt><expr><name><name pos:line="176" pos:column="25">fi</name><op:operator pos:line="176" pos:column="27">.</op:operator><name pos:line="176" pos:column="28">_pos</name></name> <op:operator pos:line="176" pos:column="33">=</op:operator> <name pos:line="176" pos:column="35">targetStart</name></expr>;</expr_stmt>

		}</block></then>
		<else pos:line="179" pos:column="17">else
		<block pos:line="180" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="181" pos:column="25">int</name></type> <name pos:line="181" pos:column="29">foundPos</name></decl>;</decl_stmt>
			<if pos:line="182" pos:column="25">if <condition pos:line="182" pos:column="28">(<expr><call><name><name pos:line="182" pos:column="29">dataToSearch</name><op:operator pos:line="182" pos:column="41">.</op:operator><name pos:line="182" pos:column="42">size</name></name><argument_list pos:line="182" pos:column="46">()</argument_list></call></expr>)</condition><then pos:line="182" pos:column="49">
			<block pos:line="183" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="184" pos:column="33">fi</name><op:operator pos:line="184" pos:column="35">.</op:operator><name pos:line="184" pos:column="36">_data</name></name> <op:operator pos:line="184" pos:column="42">=</op:operator> <call><name pos:line="184" pos:column="44">parseSubLevel</name><argument_list pos:line="184" pos:column="57">(<argument><expr><name pos:line="184" pos:column="58">targetStart</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="71">targetEnd</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="82">dataToSearch</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="96">foundPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="185" pos:column="33">fi</name><op:operator pos:line="185" pos:column="35">.</op:operator><name pos:line="185" pos:column="36">_pos</name></name> <op:operator pos:line="185" pos:column="41">=</op:operator> <name pos:line="185" pos:column="43">foundPos</name></expr>;</expr_stmt>
			}</block></then></if>

			<if pos:line="188" pos:column="25">if <condition pos:line="188" pos:column="28">(<expr><call><name><name pos:line="188" pos:column="29">data2ToSearch</name><op:operator pos:line="188" pos:column="42">.</op:operator><name pos:line="188" pos:column="43">size</name></name><argument_list pos:line="188" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="188" pos:column="50">
			<block pos:line="189" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="190" pos:column="33">fi</name><op:operator pos:line="190" pos:column="35">.</op:operator><name pos:line="190" pos:column="36">_data2</name></name> <op:operator pos:line="190" pos:column="43">=</op:operator> <call><name pos:line="190" pos:column="45">parseSubLevel</name><argument_list pos:line="190" pos:column="58">(<argument><expr><name pos:line="190" pos:column="59">targetStart</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="72">targetEnd</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="83">data2ToSearch</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="98">foundPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="191" pos:column="33">fi</name><op:operator pos:line="191" pos:column="35">.</op:operator><name pos:line="191" pos:column="36">_pos2</name></name> <op:operator pos:line="191" pos:column="42">=</op:operator> <name pos:line="191" pos:column="44">foundPos</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="193" pos:column="25">else <if pos:line="193" pos:column="30">if <condition pos:line="193" pos:column="33">(<expr><name pos:line="193" pos:column="34">classStructName</name> <op:operator pos:line="193" pos:column="50">!=</op:operator> <call><name pos:line="193" pos:column="53">TEXT</name><argument_list pos:line="193" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="193" pos:column="58">""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="62">
			<block pos:line="194" pos:column="25">{
				<expr_stmt><expr><name><name pos:line="195" pos:column="33">fi</name><op:operator pos:line="195" pos:column="35">.</op:operator><name pos:line="195" pos:column="36">_data2</name></name> <op:operator pos:line="195" pos:column="43">=</op:operator> <name pos:line="195" pos:column="45">classStructName</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="196" pos:column="33">fi</name><op:operator pos:line="196" pos:column="35">.</op:operator><name pos:line="196" pos:column="36">_pos2</name></name> <op:operator pos:line="196" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="196" pos:column="44">0</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="196" pos:column="47">// change -1 valeur for validated data2</comment>
			}</block></then></if></else></if>
		}</block></else></if>

		<if pos:line="200" pos:column="17">if <condition pos:line="200" pos:column="20">(<expr><name><name pos:line="200" pos:column="21">fi</name><op:operator pos:line="200" pos:column="23">.</op:operator><name pos:line="200" pos:column="24">_pos</name></name> <op:operator pos:line="200" pos:column="29">!=</op:operator> <op:operator pos:line="200" pos:column="32">-</op:operator><lit:literal type="number" pos:line="200" pos:column="33">1</lit:literal> <op:operator pos:line="200" pos:column="35">||</op:operator> <name><name pos:line="200" pos:column="38">fi</name><op:operator pos:line="200" pos:column="40">.</op:operator><name pos:line="200" pos:column="41">_pos2</name></name> <op:operator pos:line="200" pos:column="47">!=</op:operator> <op:operator pos:line="200" pos:column="50">-</op:operator><lit:literal type="number" pos:line="200" pos:column="51">1</lit:literal></expr>)</condition><then pos:line="200" pos:column="53"> <comment type="line" pos:line="200" pos:column="54">// at least one should be found</comment>
		<block pos:line="201" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="202" pos:column="25">foundInfos</name><op:operator pos:line="202" pos:column="35">.</op:operator><name pos:line="202" pos:column="36">push_back</name></name><argument_list pos:line="202" pos:column="45">(<argument><expr><name pos:line="202" pos:column="46">fi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		
		<expr_stmt><expr><name pos:line="205" pos:column="17">begin</name> <op:operator pos:line="205" pos:column="23">=</op:operator> <name pos:line="205" pos:column="25">targetStart</name> <op:operator pos:line="205" pos:column="37">+</op:operator> <name pos:line="205" pos:column="39">foundTextLen</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="206" pos:column="17">targetStart</name> <op:operator pos:line="206" pos:column="29">=</op:operator> <call><name pos:line="206" pos:column="31">(<type:modifier pos:line="206" pos:column="32">*</type:modifier><name pos:line="206" pos:column="33">_ppEditView</name>)<op:operator pos:line="206" pos:column="45">-&gt;</op:operator><name pos:line="206" pos:column="47">searchInTarget</name></name><argument_list pos:line="206" pos:column="61">(<argument><expr><name pos:line="206" pos:column="62">regExpr2search</name></expr></argument>, <argument><expr><call><name pos:line="206" pos:column="78">lstrlen</name><argument_list pos:line="206" pos:column="85">(<argument><expr><name pos:line="206" pos:column="86">regExpr2search</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="206" pos:column="103">begin</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="110">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>


<function><type><name pos:line="211" pos:column="1">generic_string</name></type> <name><name pos:line="211" pos:column="16">FunctionListPanel</name><op:operator pos:line="211" pos:column="33">::</op:operator><name pos:line="211" pos:column="35">parseSubLevel</name></name><parameter_list pos:line="211" pos:column="48">(<param><decl><type><name pos:line="211" pos:column="49">size_t</name></type> <name pos:line="211" pos:column="56">begin</name></decl></param>, <param><decl><type><name pos:line="211" pos:column="63">size_t</name></type> <name pos:line="211" pos:column="70">end</name></decl></param>, <param><decl><type><name><name pos:line="211" pos:column="75">std</name><op:operator pos:line="211" pos:column="78">::</op:operator><name><name pos:line="211" pos:column="80">vector</name><argument_list pos:line="211" pos:column="86">&lt; <argument><expr><name pos:line="211" pos:column="88">generic_string</name></expr></argument> &gt;</argument_list></name></name></type> <name pos:line="211" pos:column="105">dataToSearch</name></decl></param>, <param><decl><type><name pos:line="211" pos:column="119">int</name> <type:modifier pos:line="211" pos:column="123">&amp;</type:modifier></type> <name pos:line="211" pos:column="125">foundPos</name></decl></param>)</parameter_list>
<block pos:line="212" pos:column="1">{
	<if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><name pos:line="213" pos:column="13">begin</name> <op:operator pos:line="213" pos:column="19">&gt;=</op:operator> <name pos:line="213" pos:column="22">end</name></expr>)</condition><then pos:line="213" pos:column="26">
	<block pos:line="214" pos:column="9">{
		<expr_stmt><expr><name pos:line="215" pos:column="17">foundPos</name> <op:operator pos:line="215" pos:column="26">=</op:operator> <op:operator pos:line="215" pos:column="28">-</op:operator><lit:literal type="number" pos:line="215" pos:column="29">1</lit:literal></expr>;</expr_stmt>
		<return pos:line="216" pos:column="17">return <expr><call><name pos:line="216" pos:column="24">TEXT</name><argument_list pos:line="216" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="216" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>

	<if pos:line="219" pos:column="9">if <condition pos:line="219" pos:column="12">(<expr><op:operator pos:line="219" pos:column="13">!</op:operator><call><name><name pos:line="219" pos:column="14">dataToSearch</name><op:operator pos:line="219" pos:column="26">.</op:operator><name pos:line="219" pos:column="27">size</name></name><argument_list pos:line="219" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="219" pos:column="34">
		<return pos:line="220" pos:column="17">return <expr><call><name pos:line="220" pos:column="24">TEXT</name><argument_list pos:line="220" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="220" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="222" pos:column="9">int</name></type> <name pos:line="222" pos:column="13">flags</name> <init pos:line="222" pos:column="19">= <expr><name pos:line="222" pos:column="21">SCFIND_REGEXP</name> <op:operator pos:line="222" pos:column="35">|</op:operator> <name pos:line="222" pos:column="37">SCFIND_POSIX</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="224" pos:column="9">(<type:modifier pos:line="224" pos:column="10">*</type:modifier><name pos:line="224" pos:column="11">_ppEditView</name>)<op:operator pos:line="224" pos:column="23">-&gt;</op:operator><name pos:line="224" pos:column="25">execute</name></name><argument_list pos:line="224" pos:column="32">(<argument><expr><name pos:line="224" pos:column="33">SCI_SETSEARCHFLAGS</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="53">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier pos:line="225" pos:column="9">const</specifier> <name pos:line="225" pos:column="15">TCHAR</name> <type:modifier pos:line="225" pos:column="21">*</type:modifier></type><name pos:line="225" pos:column="22">regExpr2search</name> <init pos:line="225" pos:column="37">= <expr><name><name pos:line="225" pos:column="39">dataToSearch</name><index pos:line="225" pos:column="51">[<expr><lit:literal type="number" pos:line="225" pos:column="52">0</lit:literal></expr>]</index></name><op:operator pos:line="225" pos:column="54">.</op:operator><call><name pos:line="225" pos:column="55">c_str</name><argument_list pos:line="225" pos:column="60">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="226" pos:column="9">int</name></type> <name pos:line="226" pos:column="13">targetStart</name> <init pos:line="226" pos:column="25">= <expr><call><name pos:line="226" pos:column="27">(<type:modifier pos:line="226" pos:column="28">*</type:modifier><name pos:line="226" pos:column="29">_ppEditView</name>)<op:operator pos:line="226" pos:column="41">-&gt;</op:operator><name pos:line="226" pos:column="43">searchInTarget</name></name><argument_list pos:line="226" pos:column="57">(<argument><expr><name pos:line="226" pos:column="58">regExpr2search</name></expr></argument>, <argument><expr><call><name pos:line="226" pos:column="74">lstrlen</name><argument_list pos:line="226" pos:column="81">(<argument><expr><name pos:line="226" pos:column="82">regExpr2search</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="226" pos:column="99">begin</name></expr></argument>, <argument><expr><name pos:line="226" pos:column="106">end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="228" pos:column="9">if <condition pos:line="228" pos:column="12">(<expr><name pos:line="228" pos:column="13">targetStart</name> <op:operator pos:line="228" pos:column="25">==</op:operator> <op:operator pos:line="228" pos:column="28">-</op:operator><lit:literal type="number" pos:line="228" pos:column="29">1</lit:literal> <op:operator pos:line="228" pos:column="31">||</op:operator> <name pos:line="228" pos:column="34">targetStart</name> <op:operator pos:line="228" pos:column="46">==</op:operator> <op:operator pos:line="228" pos:column="49">-</op:operator><lit:literal type="number" pos:line="228" pos:column="50">2</lit:literal></expr>)</condition><then pos:line="228" pos:column="52">
	<block pos:line="229" pos:column="9">{
		<expr_stmt><expr><name pos:line="230" pos:column="17">foundPos</name> <op:operator pos:line="230" pos:column="26">=</op:operator> <op:operator pos:line="230" pos:column="28">-</op:operator><lit:literal type="number" pos:line="230" pos:column="29">1</lit:literal></expr>;</expr_stmt>
		<return pos:line="231" pos:column="17">return <expr><call><name pos:line="231" pos:column="24">TEXT</name><argument_list pos:line="231" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="231" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="233" pos:column="9">int</name></type> <name pos:line="233" pos:column="13">targetEnd</name> <init pos:line="233" pos:column="23">= <expr><call><name pos:line="233" pos:column="25">int</name><argument_list pos:line="233" pos:column="28">(<argument><expr><call><name pos:line="233" pos:column="29">(<type:modifier pos:line="233" pos:column="30">*</type:modifier><name pos:line="233" pos:column="31">_ppEditView</name>)<op:operator pos:line="233" pos:column="43">-&gt;</op:operator><name pos:line="233" pos:column="45">execute</name></name><argument_list pos:line="233" pos:column="52">(<argument><expr><name pos:line="233" pos:column="53">SCI_GETTARGETEND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="235" pos:column="9">if <condition pos:line="235" pos:column="12">(<expr><call><name><name pos:line="235" pos:column="13">dataToSearch</name><op:operator pos:line="235" pos:column="25">.</op:operator><name pos:line="235" pos:column="26">size</name></name><argument_list pos:line="235" pos:column="30">()</argument_list></call> <op:operator pos:line="235" pos:column="33">&gt;=</op:operator> <lit:literal type="number" pos:line="235" pos:column="36">2</lit:literal></expr>)</condition><then pos:line="235" pos:column="38">
	<block pos:line="236" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="237" pos:column="17">dataToSearch</name><op:operator pos:line="237" pos:column="29">.</op:operator><name pos:line="237" pos:column="30">erase</name></name><argument_list pos:line="237" pos:column="35">(<argument><expr><call><name><name pos:line="237" pos:column="36">dataToSearch</name><op:operator pos:line="237" pos:column="48">.</op:operator><name pos:line="237" pos:column="49">begin</name></name><argument_list pos:line="237" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="238" pos:column="17">return <expr><call><name pos:line="238" pos:column="24">parseSubLevel</name><argument_list pos:line="238" pos:column="37">(<argument><expr><name pos:line="238" pos:column="38">targetStart</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="51">targetEnd</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="62">dataToSearch</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="76">foundPos</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then>
	<else pos:line="240" pos:column="9">else <comment type="line" pos:line="240" pos:column="14">// only one processed element, so we conclude the result</comment>
	<block pos:line="241" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="242" pos:column="17">TCHAR</name></type> <name><name pos:line="242" pos:column="23">foundStr</name><index pos:line="242" pos:column="31">[<expr><lit:literal type="number" pos:line="242" pos:column="32">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name pos:line="244" pos:column="17">(<type:modifier pos:line="244" pos:column="18">*</type:modifier><name pos:line="244" pos:column="19">_ppEditView</name>)<op:operator pos:line="244" pos:column="31">-&gt;</op:operator><name pos:line="244" pos:column="33">getGenericText</name></name><argument_list pos:line="244" pos:column="47">(<argument><expr><name pos:line="244" pos:column="48">foundStr</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="244" pos:column="58">1024</lit:literal></expr></argument>, <argument><expr><name pos:line="244" pos:column="64">targetStart</name></expr></argument>, <argument><expr><name pos:line="244" pos:column="77">targetEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="246" pos:column="17">foundPos</name> <op:operator pos:line="246" pos:column="26">=</op:operator> <name pos:line="246" pos:column="28">targetStart</name></expr>;</expr_stmt>
		<return pos:line="247" pos:column="17">return <expr><name pos:line="247" pos:column="24">foundStr</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="251" pos:column="1">void</name></type> <name><name pos:line="251" pos:column="6">FunctionListPanel</name><op:operator pos:line="251" pos:column="23">::</op:operator><name pos:line="251" pos:column="25">reload</name></name><parameter_list pos:line="251" pos:column="31">()</parameter_list>
<block pos:line="252" pos:column="1">{
	<comment type="line" pos:line="253" pos:column="9">// clean up</comment>
	<expr_stmt><expr><call><name pos:line="254" pos:column="9">removeAllEntries</name><argument_list pos:line="254" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="256" pos:column="9">generic_string</name></type> <name pos:line="256" pos:column="24">funcBegin</name> <init pos:line="256" pos:column="34">= <expr><call><name pos:line="256" pos:column="36">TEXT</name><argument_list pos:line="256" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="256" pos:column="41">"^[\\s]*"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="257" pos:column="9">generic_string</name></type> <name pos:line="257" pos:column="24">qualifier_maybe</name> <init pos:line="257" pos:column="40">= <expr><call><name pos:line="257" pos:column="42">TEXT</name><argument_list pos:line="257" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="47">"((static|const)[\\s]+)?"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="258" pos:column="9">generic_string</name></type> <name pos:line="258" pos:column="24">returnType</name> <init pos:line="258" pos:column="35">= <expr><call><name pos:line="258" pos:column="37">TEXT</name><argument_list pos:line="258" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="258" pos:column="42">"[\\w]+"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="259" pos:column="9">generic_string</name></type> <name pos:line="259" pos:column="24">space_starMaybe</name> <init pos:line="259" pos:column="40">= <expr><call><name pos:line="259" pos:column="42">TEXT</name><argument_list pos:line="259" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="259" pos:column="47">"([\\s]+|\\*[\\s]+|[\\s]+\\*|[\\s]+\\*[\\s]+)"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="260" pos:column="9">//generic_string space_starMaybe = TEXT("([\\s]+|\\*[\\s]+|[\\s]+\\*)");</comment>
	<decl_stmt><decl><type><name pos:line="261" pos:column="9">generic_string</name></type> <name pos:line="261" pos:column="24">classQualifier_maybe</name> <init pos:line="261" pos:column="45">= <expr><call><name pos:line="261" pos:column="47">TEXT</name><argument_list pos:line="261" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="261" pos:column="52">"([\\w_]+[\\s]*::)?"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="262" pos:column="9">generic_string</name></type> <name pos:line="262" pos:column="24">funcName</name> <init pos:line="262" pos:column="33">= <expr><call><name pos:line="262" pos:column="35">TEXT</name><argument_list pos:line="262" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="40">"(?!(if|whil|for))[\\w_]+"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="263" pos:column="9">generic_string</name></type> <name pos:line="263" pos:column="24">const_maybe</name> <init pos:line="263" pos:column="36">= <expr><call><name pos:line="263" pos:column="38">TEXT</name><argument_list pos:line="263" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="263" pos:column="43">"([\\s]*const[\\s]*)?"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="264" pos:column="9">generic_string</name></type> <name pos:line="264" pos:column="24">space_maybe</name> <init pos:line="264" pos:column="36">= <expr><call><name pos:line="264" pos:column="38">TEXT</name><argument_list pos:line="264" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="264" pos:column="43">"[\\s]*"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="265" pos:column="9">generic_string</name></type> <name pos:line="265" pos:column="24">params</name> <init pos:line="265" pos:column="31">= <expr><call><name pos:line="265" pos:column="33">TEXT</name><argument_list pos:line="265" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="265" pos:column="38">"\\([\\n\\w_,*&amp;\\s]*\\)"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="266" pos:column="9">generic_string</name></type> <name pos:line="266" pos:column="24">funcBody</name> <init pos:line="266" pos:column="33">= <expr><call><name pos:line="266" pos:column="35">TEXT</name><argument_list pos:line="266" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="40">"\\{"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="267" pos:column="9">generic_string</name></type> <name pos:line="267" pos:column="24">space_eol_maybe</name> <init pos:line="267" pos:column="40">= <expr><call><name pos:line="267" pos:column="42">TEXT</name><argument_list pos:line="267" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="267" pos:column="47">"[\\n\\s]*"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="269" pos:column="9">generic_string</name></type> <name pos:line="269" pos:column="24">function</name> <init pos:line="269" pos:column="33">= <expr><name pos:line="269" pos:column="35">funcBegin</name> <op:operator pos:line="269" pos:column="45">+</op:operator> <name pos:line="269" pos:column="47">qualifier_maybe</name> <op:operator pos:line="269" pos:column="63">+</op:operator> <name pos:line="269" pos:column="65">returnType</name> <op:operator pos:line="269" pos:column="76">+</op:operator> <name pos:line="269" pos:column="78">space_starMaybe</name> <op:operator pos:line="269" pos:column="94">+</op:operator> <name pos:line="269" pos:column="96">classQualifier_maybe</name> <op:operator pos:line="269" pos:column="117">+</op:operator> <name pos:line="269" pos:column="119">funcName</name> <op:operator pos:line="269" pos:column="128">+</op:operator> <name pos:line="269" pos:column="130">space_maybe</name> <op:operator pos:line="269" pos:column="142">+</op:operator> <name pos:line="269" pos:column="144">params</name> <op:operator pos:line="269" pos:column="151">+</op:operator> <name pos:line="269" pos:column="153">const_maybe</name> <op:operator pos:line="269" pos:column="165">+</op:operator> <name pos:line="269" pos:column="167">space_eol_maybe</name> <op:operator pos:line="269" pos:column="183">+</op:operator> <name pos:line="269" pos:column="185">funcBody</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="270" pos:column="9">generic_string</name></type> <name pos:line="270" pos:column="24">secondSearch</name> <init pos:line="270" pos:column="37">= <expr><name pos:line="270" pos:column="39">funcName</name> <op:operator pos:line="270" pos:column="48">+</op:operator> <name pos:line="270" pos:column="50">space_maybe</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="271" pos:column="9">secondSearch</name> <op:operator pos:line="271" pos:column="22">+=</op:operator> <call><name pos:line="271" pos:column="25">TEXT</name><argument_list pos:line="271" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="271" pos:column="30">"\\("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<decl_stmt><decl><type><name pos:line="274" pos:column="9">int</name></type> <name pos:line="274" pos:column="13">docLen</name> <init pos:line="274" pos:column="20">= <expr><call><name pos:line="274" pos:column="22">(<type:modifier pos:line="274" pos:column="23">*</type:modifier><name pos:line="274" pos:column="24">_ppEditView</name>)<op:operator pos:line="274" pos:column="36">-&gt;</op:operator><name pos:line="274" pos:column="38">getCurrentDocLen</name></name><argument_list pos:line="274" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="275" pos:column="9">vector</name><argument_list pos:line="275" pos:column="15">&lt;<argument><expr><name pos:line="275" pos:column="16">foundInfo</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="275" pos:column="27">fi</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="276" pos:column="9">vector</name><argument_list pos:line="276" pos:column="15">&lt;<argument><expr><name pos:line="276" pos:column="16">generic_string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="276" pos:column="32">regExpr1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="277" pos:column="9">vector</name><argument_list pos:line="277" pos:column="15">&lt;<argument><expr><name pos:line="277" pos:column="16">generic_string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="277" pos:column="32">regExpr2</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="279" pos:column="9">regExpr1</name><op:operator pos:line="279" pos:column="17">.</op:operator><name pos:line="279" pos:column="18">push_back</name></name><argument_list pos:line="279" pos:column="27">(<argument><expr><name pos:line="279" pos:column="28">secondSearch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="280" pos:column="9">regExpr1</name><op:operator pos:line="280" pos:column="17">.</op:operator><name pos:line="280" pos:column="18">push_back</name></name><argument_list pos:line="280" pos:column="27">(<argument><expr><name pos:line="280" pos:column="28">funcName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="282" pos:column="9">generic_string</name></type> <name pos:line="282" pos:column="24">secondSearch_className</name> <init pos:line="282" pos:column="47">= <expr><call><name pos:line="282" pos:column="49">TEXT</name><argument_list pos:line="282" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="54">"[\\w_]+(?=[\\s]*::)"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="283" pos:column="9">regExpr2</name><op:operator pos:line="283" pos:column="17">.</op:operator><name pos:line="283" pos:column="18">push_back</name></name><argument_list pos:line="283" pos:column="27">(<argument><expr><name pos:line="283" pos:column="28">secondSearch_className</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="285" pos:column="9">generic_string</name></type> <name pos:line="285" pos:column="24">classRegExpr</name> <init pos:line="285" pos:column="37">= <expr><call><name pos:line="285" pos:column="39">TEXT</name><argument_list pos:line="285" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="285" pos:column="44">"^[\\t ]*(class|struct)[\\t ]+[\\w]+[\\s]*(:[\\s]*(public|protected|private)[\\s]+[\\w]+[\\s]*)?\\{"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="286" pos:column="9">vector</name><argument_list pos:line="286" pos:column="15">&lt;<argument><expr><name pos:line="286" pos:column="16">generic_string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="286" pos:column="32">classRegExprArray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="287" pos:column="9">generic_string</name></type> <name pos:line="287" pos:column="24">str1</name> <init pos:line="287" pos:column="29">= <expr><call><name pos:line="287" pos:column="31">TEXT</name><argument_list pos:line="287" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="287" pos:column="36">"(class|struct)[\\t ]+[\\w]+"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="288" pos:column="9">generic_string</name></type> <name pos:line="288" pos:column="24">str2</name> <init pos:line="288" pos:column="29">= <expr><call><name pos:line="288" pos:column="31">TEXT</name><argument_list pos:line="288" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="288" pos:column="36">"[\\t ]+[\\w]+"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="289" pos:column="9">generic_string</name></type> <name pos:line="289" pos:column="24">str3</name> <init pos:line="289" pos:column="29">= <expr><call><name pos:line="289" pos:column="31">TEXT</name><argument_list pos:line="289" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="289" pos:column="36">"[\\w]+"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="290" pos:column="9">classRegExprArray</name><op:operator pos:line="290" pos:column="26">.</op:operator><name pos:line="290" pos:column="27">push_back</name></name><argument_list pos:line="290" pos:column="36">(<argument><expr><call><name><name pos:line="290" pos:column="37">str1</name><op:operator pos:line="290" pos:column="41">.</op:operator><name pos:line="290" pos:column="42">c_str</name></name><argument_list pos:line="290" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="291" pos:column="9">classRegExprArray</name><op:operator pos:line="291" pos:column="26">.</op:operator><name pos:line="291" pos:column="27">push_back</name></name><argument_list pos:line="291" pos:column="36">(<argument><expr><call><name><name pos:line="291" pos:column="37">str2</name><op:operator pos:line="291" pos:column="41">.</op:operator><name pos:line="291" pos:column="42">c_str</name></name><argument_list pos:line="291" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="292" pos:column="9">classRegExprArray</name><op:operator pos:line="292" pos:column="26">.</op:operator><name pos:line="292" pos:column="27">push_back</name></name><argument_list pos:line="292" pos:column="36">(<argument><expr><call><name><name pos:line="292" pos:column="37">str3</name><op:operator pos:line="292" pos:column="41">.</op:operator><name pos:line="292" pos:column="42">c_str</name></name><argument_list pos:line="292" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="293" pos:column="9">//parse(fi, 0, docLen, function.c_str(), regExpr1, regExpr2);</comment>
	<decl_stmt><decl><type><specifier pos:line="294" pos:column="9">const</specifier> <name pos:line="294" pos:column="15">TCHAR</name></type> <name><name pos:line="294" pos:column="21">bodyOpenSymbol</name><index pos:line="294" pos:column="35">[]</index></name> <init pos:line="294" pos:column="38">= <expr><call><name pos:line="294" pos:column="40">TEXT</name><argument_list pos:line="294" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="294" pos:column="45">"\\{"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="295" pos:column="9">const</specifier> <name pos:line="295" pos:column="15">TCHAR</name></type> <name><name pos:line="295" pos:column="21">bodyCloseSymbol</name><index pos:line="295" pos:column="36">[]</index></name> <init pos:line="295" pos:column="39">= <expr><call><name pos:line="295" pos:column="41">TEXT</name><argument_list pos:line="295" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="295" pos:column="46">"\\}"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="296" pos:column="9">parse2</name><argument_list pos:line="296" pos:column="15">(<argument><expr><name pos:line="296" pos:column="16">fi</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="296" pos:column="20">0</lit:literal></expr></argument>, <argument><expr><name pos:line="296" pos:column="23">docLen</name></expr></argument>, <argument><expr><call><name><name pos:line="296" pos:column="31">classRegExpr</name><op:operator pos:line="296" pos:column="43">.</op:operator><name pos:line="296" pos:column="44">c_str</name></name><argument_list pos:line="296" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="296" pos:column="53">classRegExprArray</name></expr></argument>, <argument><expr><name pos:line="296" pos:column="72">bodyOpenSymbol</name></expr></argument>, <argument><expr><name pos:line="296" pos:column="88">bodyCloseSymbol</name></expr></argument>, <argument><expr><call><name><name pos:line="296" pos:column="105">function</name><op:operator pos:line="296" pos:column="113">.</op:operator><name pos:line="296" pos:column="114">c_str</name></name><argument_list pos:line="296" pos:column="119">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="296" pos:column="123">regExpr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:line="298" pos:column="9">for (<init><decl><type><name pos:line="298" pos:column="14">size_t</name></type> <name pos:line="298" pos:column="21">i</name> <init pos:line="298" pos:column="23">= <expr><lit:literal type="number" pos:line="298" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="298" pos:column="28">i</name> <op:operator pos:line="298" pos:column="30">&lt;</op:operator> <call><name><name pos:line="298" pos:column="32">fi</name><op:operator pos:line="298" pos:column="34">.</op:operator><name pos:line="298" pos:column="35">size</name></name><argument_list pos:line="298" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="298" pos:column="43">i</name><op:operator pos:line="298" pos:column="44">++</op:operator></expr></incr>)
	<block pos:line="299" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="300" pos:column="17">generic_string</name></type> <name pos:line="300" pos:column="32">entryName</name> <init pos:line="300" pos:column="42">= <expr><call><name pos:line="300" pos:column="44">TEXT</name><argument_list pos:line="300" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="300" pos:column="49">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="301" pos:column="17">if <condition pos:line="301" pos:column="20">(<expr><name><name pos:line="301" pos:column="21">fi</name><index pos:line="301" pos:column="23">[<expr><name pos:line="301" pos:column="24">i</name></expr>]</index></name><op:operator pos:line="301" pos:column="26">.</op:operator><name pos:line="301" pos:column="27">_pos2</name> <op:operator pos:line="301" pos:column="33">!=</op:operator> <op:operator pos:line="301" pos:column="36">-</op:operator><lit:literal type="number" pos:line="301" pos:column="37">1</lit:literal></expr>)</condition><then pos:line="301" pos:column="39">
		<block pos:line="302" pos:column="17">{
			<expr_stmt><expr><name pos:line="303" pos:column="25">entryName</name> <op:operator pos:line="303" pos:column="35">=</op:operator> <name><name pos:line="303" pos:column="37">fi</name><index pos:line="303" pos:column="39">[<expr><name pos:line="303" pos:column="40">i</name></expr>]</index></name><op:operator pos:line="303" pos:column="42">.</op:operator><name pos:line="303" pos:column="43">_data2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="304" pos:column="25">entryName</name> <op:operator pos:line="304" pos:column="35">+=</op:operator> <call><name pos:line="304" pos:column="38">TEXT</name><argument_list pos:line="304" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="304" pos:column="43">"=&gt;"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="306" pos:column="17">entryName</name> <op:operator pos:line="306" pos:column="27">+=</op:operator> <name><name pos:line="306" pos:column="30">fi</name><index pos:line="306" pos:column="32">[<expr><name pos:line="306" pos:column="33">i</name></expr>]</index></name><op:operator pos:line="306" pos:column="35">.</op:operator><name pos:line="306" pos:column="36">_data</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="307" pos:column="17">addEntry</name><argument_list pos:line="307" pos:column="25">(<argument><expr><call><name><name pos:line="307" pos:column="26">entryName</name><op:operator pos:line="307" pos:column="35">.</op:operator><name pos:line="307" pos:column="36">c_str</name></name><argument_list pos:line="307" pos:column="41">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="307" pos:column="45">fi</name><index pos:line="307" pos:column="47">[<expr><name pos:line="307" pos:column="48">i</name></expr>]</index></name><op:operator pos:line="307" pos:column="50">.</op:operator><name pos:line="307" pos:column="51">_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="311" pos:column="1">BOOL</name> <name pos:line="311" pos:column="6">CALLBACK</name></type> <name><name pos:line="311" pos:column="15">FunctionListPanel</name><op:operator pos:line="311" pos:column="32">::</op:operator><name pos:line="311" pos:column="34">run_dlgProc</name></name><parameter_list pos:line="311" pos:column="45">(<param><decl><type><name pos:line="311" pos:column="46">UINT</name></type> <name pos:line="311" pos:column="51">message</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="60">WPARAM</name></type> <name pos:line="311" pos:column="67">wParam</name></decl></param>, <param><decl><type><name pos:line="311" pos:column="75">LPARAM</name></type> <name pos:line="311" pos:column="82">lParam</name></decl></param>)</parameter_list>
<block pos:line="312" pos:column="1">{
    <switch pos:line="313" pos:column="5">switch <condition pos:line="313" pos:column="12">(<expr><name pos:line="313" pos:column="13">message</name></expr>)</condition>
    <block pos:line="314" pos:column="5">{
        <case pos:line="315" pos:column="9">case <expr><name pos:line="315" pos:column="14">WM_INITDIALOG</name></expr> :
        <block pos:line="316" pos:column="9">{		
            <return pos:line="317" pos:column="13">return <expr><name pos:line="317" pos:column="20">TRUE</name></expr>;</return>
        }</block>

		
		</case><case pos:line="321" pos:column="17">case <expr><name pos:line="321" pos:column="22">WM_DESTROY</name></expr>:
			<break pos:line="322" pos:column="25">break;</break>

		</case><case pos:line="324" pos:column="17">case <expr><name pos:line="324" pos:column="22">WM_COMMAND</name></expr> : 
		<block pos:line="325" pos:column="17">{
			<switch pos:line="326" pos:column="25">switch <condition pos:line="326" pos:column="32">(<expr><call><name pos:line="326" pos:column="33">LOWORD</name><argument_list pos:line="326" pos:column="39">(<argument><expr><name pos:line="326" pos:column="40">wParam</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:line="327" pos:column="13">{
                <case pos:line="328" pos:column="17">case <expr><name pos:line="328" pos:column="22">IDC_LIST_FUNCLIST</name></expr>:
				<block pos:line="329" pos:column="33">{
					<if pos:line="330" pos:column="41">if <condition pos:line="330" pos:column="44">(<expr><call><name pos:line="330" pos:column="45">HIWORD</name><argument_list pos:line="330" pos:column="51">(<argument><expr><name pos:line="330" pos:column="52">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="330" pos:column="60">==</op:operator> <name pos:line="330" pos:column="63">LBN_DBLCLK</name></expr>)</condition><then pos:line="330" pos:column="74">
					<block pos:line="331" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="332" pos:column="49">int</name></type> <name pos:line="332" pos:column="53">i</name> <init pos:line="332" pos:column="55">= <expr><call><name><op:operator pos:line="332" pos:column="57">::</op:operator><name pos:line="332" pos:column="59">SendDlgItemMessage</name></name><argument_list pos:line="332" pos:column="77">(<argument><expr><name pos:line="332" pos:column="78">_hSelf</name></expr></argument>, <argument><expr><name pos:line="332" pos:column="86">IDC_LIST_FUNCLIST</name></expr></argument>, <argument><expr><name pos:line="332" pos:column="105">LB_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="332" pos:column="119">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="332" pos:column="122">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="333" pos:column="49">if <condition pos:line="333" pos:column="52">(<expr><name pos:line="333" pos:column="53">i</name> <op:operator pos:line="333" pos:column="55">!=</op:operator> <name pos:line="333" pos:column="58">LB_ERR</name></expr>)</condition><then pos:line="333" pos:column="65">
						<block pos:line="334" pos:column="49">{
							<decl_stmt><decl><type><name pos:line="335" pos:column="57">int</name></type> <name pos:line="335" pos:column="61">pos</name> <init pos:line="335" pos:column="65">= <expr><call><name><op:operator pos:line="335" pos:column="67">::</op:operator><name pos:line="335" pos:column="69">SendDlgItemMessage</name></name><argument_list pos:line="335" pos:column="87">(<argument><expr><name pos:line="335" pos:column="88">_hSelf</name></expr></argument>, <argument><expr><name pos:line="335" pos:column="96">IDC_LIST_FUNCLIST</name></expr></argument>, <argument><expr><name pos:line="335" pos:column="115">LB_GETITEMDATA</name></expr></argument>, <argument><expr><name pos:line="335" pos:column="131">i</name></expr></argument>, <argument><expr><op:operator pos:line="335" pos:column="134">(</op:operator><name pos:line="335" pos:column="135">LPARAM</name><op:operator pos:line="335" pos:column="141">)</op:operator><lit:literal type="number" pos:line="335" pos:column="142">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<comment type="line" pos:line="336" pos:column="57">//printInt(pos);</comment>
							<decl_stmt><decl><type><name pos:line="337" pos:column="57">int</name></type> <name pos:line="337" pos:column="61">sci_line</name> <init pos:line="337" pos:column="70">= <expr><call><name pos:line="337" pos:column="72">(<type:modifier pos:line="337" pos:column="73">*</type:modifier><name pos:line="337" pos:column="74">_ppEditView</name>)<op:operator pos:line="337" pos:column="86">-&gt;</op:operator><name pos:line="337" pos:column="88">execute</name></name><argument_list pos:line="337" pos:column="95">(<argument><expr><name pos:line="337" pos:column="96">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="337" pos:column="118">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name pos:line="338" pos:column="57">(<type:modifier pos:line="338" pos:column="58">*</type:modifier><name pos:line="338" pos:column="59">_ppEditView</name>)<op:operator pos:line="338" pos:column="71">-&gt;</op:operator><name pos:line="338" pos:column="73">execute</name></name><argument_list pos:line="338" pos:column="80">(<argument><expr><name pos:line="338" pos:column="81">SCI_ENSUREVISIBLE</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="100">sci_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="339" pos:column="57">(<type:modifier pos:line="339" pos:column="58">*</type:modifier><name pos:line="339" pos:column="59">_ppEditView</name>)<op:operator pos:line="339" pos:column="71">-&gt;</op:operator><name pos:line="339" pos:column="73">execute</name></name><argument_list pos:line="339" pos:column="80">(<argument><expr><name pos:line="339" pos:column="81">SCI_GOTOPOS</name></expr></argument>, <argument><expr><name pos:line="339" pos:column="94">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>
					<return pos:line="342" pos:column="41">return <expr><name pos:line="342" pos:column="48">TRUE</name></expr>;</return>
				}</block>
			</case>}</block></switch>
		}</block>
		<break pos:line="346" pos:column="17">break;</break>
		
        </case><case pos:line="348" pos:column="9">case <expr><name pos:line="348" pos:column="14">WM_SIZE</name></expr>:
        <block pos:line="349" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="350" pos:column="13">int</name></type> <name pos:line="350" pos:column="17">width</name> <init pos:line="350" pos:column="23">= <expr><call><name pos:line="350" pos:column="25">LOWORD</name><argument_list pos:line="350" pos:column="31">(<argument><expr><name pos:line="350" pos:column="32">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="351" pos:column="13">int</name></type> <name pos:line="351" pos:column="17">height</name> <init pos:line="351" pos:column="24">= <expr><call><name pos:line="351" pos:column="26">HIWORD</name><argument_list pos:line="351" pos:column="32">(<argument><expr><name pos:line="351" pos:column="33">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="352" pos:column="25">::</op:operator><name pos:line="352" pos:column="27">MoveWindow</name></name><argument_list pos:line="352" pos:column="37">(<argument><expr><call><name><op:operator pos:line="352" pos:column="38">::</op:operator><name pos:line="352" pos:column="40">GetDlgItem</name></name><argument_list pos:line="352" pos:column="50">(<argument><expr><name pos:line="352" pos:column="51">_hSelf</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="59">IDC_LIST_FUNCLIST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="352" pos:column="79">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="352" pos:column="82">0</lit:literal></expr></argument>, <argument><expr><name pos:line="352" pos:column="85">width</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="92">height</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="100">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:line="353" pos:column="13">break;</break>
        }</block>
<comment type="block" pos:line="355" pos:column="1">/*
		case WM_VKEYTOITEM:
		{
			if (LOWORD(wParam) == VK_RETURN)
			{
				int i = ::SendDlgItemMessage(_hSelf, IDC_LIST_CLIPBOARD, LB_GETCURSEL, 0, 0);
				printInt(i);
				return TRUE;
			}//return TRUE;
			break;
		}
*/</comment>

        </case><default pos:line="368" pos:column="9">default :
            <return pos:line="369" pos:column="13">return <expr><call><name><name pos:line="369" pos:column="20">DockingDlgInterface</name><op:operator pos:line="369" pos:column="39">::</op:operator><name pos:line="369" pos:column="41">run_dlgProc</name></name><argument_list pos:line="369" pos:column="52">(<argument><expr><name pos:line="369" pos:column="53">message</name></expr></argument>, <argument><expr><name pos:line="369" pos:column="62">wParam</name></expr></argument>, <argument><expr><name pos:line="369" pos:column="70">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
    </default>}</block></switch>
	<return pos:line="371" pos:column="9">return <expr><call><name><name pos:line="371" pos:column="16">DockingDlgInterface</name><op:operator pos:line="371" pos:column="35">::</op:operator><name pos:line="371" pos:column="37">run_dlgProc</name></name><argument_list pos:line="371" pos:column="48">(<argument><expr><name pos:line="371" pos:column="49">message</name></expr></argument>, <argument><expr><name pos:line="371" pos:column="58">wParam</name></expr></argument>, <argument><expr><name pos:line="371" pos:column="66">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
