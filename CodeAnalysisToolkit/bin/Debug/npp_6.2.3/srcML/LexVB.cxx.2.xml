<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexVB.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexVB.cxx
 ** Lexer for Visual Basic and VBScript.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2005 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="30" pos:column="1">// Internal state, highlighted as number</comment>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">SCE_B_FILENUMBER</name></cpp:macro> <cpp:value pos:line="31" pos:column="26">SCE_B_DEFAULT+100</cpp:value></cpp:define>


<function><type><specifier pos:line="34" pos:column="1">static</specifier> <name pos:line="34" pos:column="8">bool</name></type> <name pos:line="34" pos:column="13">IsVBComment</name><parameter_list pos:line="34" pos:column="24">(<param><decl><type><name pos:line="34" pos:column="25">Accessor</name> <type:modifier pos:line="34" pos:column="34">&amp;</type:modifier></type><name pos:line="34" pos:column="35">styler</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="43">int</name></type> <name pos:line="34" pos:column="47">pos</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="52">int</name></type> <name pos:line="34" pos:column="56">len</name></decl></param>)</parameter_list> <block pos:line="34" pos:column="61">{
	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">len</name> <op:operator pos:line="35" pos:column="20">&gt;</op:operator> <lit:literal type="number" pos:line="35" pos:column="22">0</lit:literal> <op:operator pos:line="35" pos:column="24">&amp;&amp;</op:operator> <name><name pos:line="35" pos:column="27">styler</name><index pos:line="35" pos:column="33">[<expr><name pos:line="35" pos:column="34">pos</name></expr>]</index></name> <op:operator pos:line="35" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="35" pos:column="42">'\''</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="38" pos:column="1">static</specifier> <specifier pos:line="38" pos:column="8">inline</specifier> <name pos:line="38" pos:column="15">bool</name></type> <name pos:line="38" pos:column="20">IsTypeCharacter</name><parameter_list pos:line="38" pos:column="35">(<param><decl><type><name pos:line="38" pos:column="36">int</name></type> <name pos:line="38" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="38" pos:column="44">{
	<return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">ch</name> <op:operator pos:line="39" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="22">'%'</lit:literal> <op:operator pos:line="39" pos:column="26">||</op:operator> <name pos:line="39" pos:column="29">ch</name> <op:operator pos:line="39" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="35">'&amp;'</lit:literal> <op:operator pos:line="39" pos:column="39">||</op:operator> <name pos:line="39" pos:column="42">ch</name> <op:operator pos:line="39" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="48">'@'</lit:literal> <op:operator pos:line="39" pos:column="52">||</op:operator> <name pos:line="39" pos:column="55">ch</name> <op:operator pos:line="39" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="61">'!'</lit:literal> <op:operator pos:line="39" pos:column="65">||</op:operator> <name pos:line="39" pos:column="68">ch</name> <op:operator pos:line="39" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="74">'#'</lit:literal> <op:operator pos:line="39" pos:column="78">||</op:operator> <name pos:line="39" pos:column="81">ch</name> <op:operator pos:line="39" pos:column="84">==</op:operator> <lit:literal type="char" pos:line="39" pos:column="87">'$'</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="42" pos:column="1">// Extended to accept accented characters</comment>
<function><type><specifier pos:line="43" pos:column="1">static</specifier> <specifier pos:line="43" pos:column="8">inline</specifier> <name pos:line="43" pos:column="15">bool</name></type> <name pos:line="43" pos:column="20">IsAWordChar</name><parameter_list pos:line="43" pos:column="31">(<param><decl><type><name pos:line="43" pos:column="32">int</name></type> <name pos:line="43" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="40">{
	<return pos:line="44" pos:column="9">return <expr><name pos:line="44" pos:column="16">ch</name> <op:operator pos:line="44" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="44" pos:column="22">0x80</lit:literal> <op:operator pos:line="44" pos:column="27">||</op:operator>
	       <op:operator pos:line="45" pos:column="16">(</op:operator><call><name pos:line="45" pos:column="17">isalnum</name><argument_list pos:line="45" pos:column="24">(<argument><expr><name pos:line="45" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="45" pos:column="29">||</op:operator> <name pos:line="45" pos:column="32">ch</name> <op:operator pos:line="45" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="38">'.'</lit:literal> <op:operator pos:line="45" pos:column="42">||</op:operator> <name pos:line="45" pos:column="45">ch</name> <op:operator pos:line="45" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="45" pos:column="51">'_'</lit:literal><op:operator pos:line="45" pos:column="54">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="48" pos:column="1">static</specifier> <specifier pos:line="48" pos:column="8">inline</specifier> <name pos:line="48" pos:column="15">bool</name></type> <name pos:line="48" pos:column="20">IsAWordStart</name><parameter_list pos:line="48" pos:column="32">(<param><decl><type><name pos:line="48" pos:column="33">int</name></type> <name pos:line="48" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="41">{
	<return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">ch</name> <op:operator pos:line="49" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="49" pos:column="22">0x80</lit:literal> <op:operator pos:line="49" pos:column="27">||</op:operator>
	       <op:operator pos:line="50" pos:column="16">(</op:operator><call><name pos:line="50" pos:column="17">isalpha</name><argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="50" pos:column="29">||</op:operator> <name pos:line="50" pos:column="32">ch</name> <op:operator pos:line="50" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="38">'_'</lit:literal><op:operator pos:line="50" pos:column="41">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="53" pos:column="1">static</specifier> <specifier pos:line="53" pos:column="8">inline</specifier> <name pos:line="53" pos:column="15">bool</name></type> <name pos:line="53" pos:column="20">IsANumberChar</name><parameter_list pos:line="53" pos:column="33">(<param><decl><type><name pos:line="53" pos:column="34">int</name></type> <name pos:line="53" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="42">{
	<comment type="line" pos:line="54" pos:column="9">// Not exactly following number definition (several dots are seen as OK, etc.)</comment>
	<comment type="line" pos:line="55" pos:column="9">// but probably enough in most cases.</comment>
	<return pos:line="56" pos:column="9">return <expr><op:operator pos:line="56" pos:column="16">(</op:operator><name pos:line="56" pos:column="17">ch</name> <op:operator pos:line="56" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="56" pos:column="22">0x80</lit:literal><op:operator pos:line="56" pos:column="26">)</op:operator> <op:operator pos:line="56" pos:column="28">&amp;&amp;</op:operator>
	        <op:operator pos:line="57" pos:column="17">(</op:operator><call><name pos:line="57" pos:column="18">isdigit</name><argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="57" pos:column="30">||</op:operator> <call><name pos:line="57" pos:column="33">toupper</name><argument_list pos:line="57" pos:column="40">(<argument><expr><name pos:line="57" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="57" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="48">'E'</lit:literal> <op:operator pos:line="57" pos:column="52">||</op:operator>
             <name pos:line="58" pos:column="14">ch</name> <op:operator pos:line="58" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="20">'.'</lit:literal> <op:operator pos:line="58" pos:column="24">||</op:operator> <name pos:line="58" pos:column="27">ch</name> <op:operator pos:line="58" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="33">'-'</lit:literal> <op:operator pos:line="58" pos:column="37">||</op:operator> <name pos:line="58" pos:column="40">ch</name> <op:operator pos:line="58" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="46">'+'</lit:literal><op:operator pos:line="58" pos:column="49">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="61" pos:column="1">static</specifier> <name pos:line="61" pos:column="8">void</name></type> <name pos:line="61" pos:column="13">ColouriseVBDoc</name><parameter_list pos:line="61" pos:column="27">(<param><decl><type><name pos:line="61" pos:column="28">unsigned</name> <name pos:line="61" pos:column="37">int</name></type> <name pos:line="61" pos:column="41">startPos</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="51">int</name></type> <name pos:line="61" pos:column="55">length</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="63">int</name></type> <name pos:line="61" pos:column="67">initStyle</name></decl></param>,
                           <param><decl><type><name pos:line="62" pos:column="28">WordList</name> <type:modifier pos:line="62" pos:column="37">*</type:modifier></type><name><name pos:line="62" pos:column="38">keywordlists</name><index pos:line="62" pos:column="50">[]</index></name></decl></param>, <param><decl><type><name pos:line="62" pos:column="54">Accessor</name> <type:modifier pos:line="62" pos:column="63">&amp;</type:modifier></type><name pos:line="62" pos:column="64">styler</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="72">bool</name></type> <name pos:line="62" pos:column="77">vbScriptSyntax</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="93">{

	<decl_stmt><decl><type><name pos:line="64" pos:column="9">WordList</name> <type:modifier pos:line="64" pos:column="18">&amp;</type:modifier></type><name pos:line="64" pos:column="19">keywords</name> <init pos:line="64" pos:column="28">= <expr><op:operator pos:line="64" pos:column="30">*</op:operator><name><name pos:line="64" pos:column="31">keywordlists</name><index pos:line="64" pos:column="43">[<expr><lit:literal type="number" pos:line="64" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="65" pos:column="9">WordList</name> <type:modifier pos:line="65" pos:column="18">&amp;</type:modifier></type><name pos:line="65" pos:column="19">keywords2</name> <init pos:line="65" pos:column="29">= <expr><op:operator pos:line="65" pos:column="31">*</op:operator><name><name pos:line="65" pos:column="32">keywordlists</name><index pos:line="65" pos:column="44">[<expr><lit:literal type="number" pos:line="65" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">WordList</name> <type:modifier pos:line="66" pos:column="18">&amp;</type:modifier></type><name pos:line="66" pos:column="19">keywords3</name> <init pos:line="66" pos:column="29">= <expr><op:operator pos:line="66" pos:column="31">*</op:operator><name><name pos:line="66" pos:column="32">keywordlists</name><index pos:line="66" pos:column="44">[<expr><lit:literal type="number" pos:line="66" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">WordList</name> <type:modifier pos:line="67" pos:column="18">&amp;</type:modifier></type><name pos:line="67" pos:column="19">keywords4</name> <init pos:line="67" pos:column="29">= <expr><op:operator pos:line="67" pos:column="31">*</op:operator><name><name pos:line="67" pos:column="32">keywordlists</name><index pos:line="67" pos:column="44">[<expr><lit:literal type="number" pos:line="67" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="69" pos:column="9">styler</name><op:operator pos:line="69" pos:column="15">.</op:operator><name pos:line="69" pos:column="16">StartAt</name></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name pos:line="69" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="71" pos:column="9">int</name></type> <name pos:line="71" pos:column="13">visibleChars</name> <init pos:line="71" pos:column="26">= <expr><lit:literal type="number" pos:line="71" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">int</name></type> <name pos:line="72" pos:column="13">fileNbDigits</name> <init pos:line="72" pos:column="26">= <expr><lit:literal type="number" pos:line="72" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="74" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">initStyle</name> <op:operator pos:line="75" pos:column="23">==</op:operator> <name pos:line="75" pos:column="26">SCE_B_STRINGEOL</name> <op:operator pos:line="75" pos:column="42">||</op:operator> <name pos:line="75" pos:column="45">initStyle</name> <op:operator pos:line="75" pos:column="55">==</op:operator> <name pos:line="75" pos:column="58">SCE_B_COMMENT</name> <op:operator pos:line="75" pos:column="72">||</op:operator> <name pos:line="75" pos:column="75">initStyle</name> <op:operator pos:line="75" pos:column="85">==</op:operator> <name pos:line="75" pos:column="88">SCE_B_PREPROCESSOR</name></expr>)</condition><then pos:line="75" pos:column="107"> <block pos:line="75" pos:column="108">{
		<expr_stmt><expr><name pos:line="76" pos:column="17">initStyle</name> <op:operator pos:line="76" pos:column="27">=</op:operator> <name pos:line="76" pos:column="29">SCE_B_DEFAULT</name></expr>;</expr_stmt>
	}</block></then></if>

	<function_decl><type><name pos:line="79" pos:column="9">StyleContext</name></type> <name pos:line="79" pos:column="22">sc</name><parameter_list pos:line="79" pos:column="24">(<param><decl><type><name pos:line="79" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="79" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="79" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="79" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="81" pos:column="9">for (<init pos:line="81" pos:column="14">;</init> <condition><expr><call><name><name pos:line="81" pos:column="16">sc</name><op:operator pos:line="81" pos:column="18">.</op:operator><name pos:line="81" pos:column="19">More</name></name><argument_list pos:line="81" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="81" pos:column="27">sc</name><op:operator pos:line="81" pos:column="29">.</op:operator><name pos:line="81" pos:column="30">Forward</name></name><argument_list pos:line="81" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="81" pos:column="41">{

		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name><name pos:line="83" pos:column="21">sc</name><op:operator pos:line="83" pos:column="23">.</op:operator><name pos:line="83" pos:column="24">state</name></name> <op:operator pos:line="83" pos:column="30">==</op:operator> <name pos:line="83" pos:column="33">SCE_B_OPERATOR</name></expr>)</condition><then pos:line="83" pos:column="48"> <block pos:line="83" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">sc</name><op:operator pos:line="84" pos:column="27">.</op:operator><name pos:line="84" pos:column="28">SetState</name></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name pos:line="84" pos:column="37">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="85" pos:column="19">else <if pos:line="85" pos:column="24">if <condition pos:line="85" pos:column="27">(<expr><name><name pos:line="85" pos:column="28">sc</name><op:operator pos:line="85" pos:column="30">.</op:operator><name pos:line="85" pos:column="31">state</name></name> <op:operator pos:line="85" pos:column="37">==</op:operator> <name pos:line="85" pos:column="40">SCE_B_IDENTIFIER</name></expr>)</condition><then pos:line="85" pos:column="57"> <block pos:line="85" pos:column="58">{
			<if pos:line="86" pos:column="25">if <condition pos:line="86" pos:column="28">(<expr><op:operator pos:line="86" pos:column="29">!</op:operator><call><name pos:line="86" pos:column="30">IsAWordChar</name><argument_list pos:line="86" pos:column="41">(<argument><expr><name><name pos:line="86" pos:column="42">sc</name><op:operator pos:line="86" pos:column="44">.</op:operator><name pos:line="86" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="49"> <block pos:line="86" pos:column="50">{
				<comment type="line" pos:line="87" pos:column="33">// In Basic (except VBScript), a variable name or a function name</comment>
				<comment type="line" pos:line="88" pos:column="33">// can end with a special character indicating the type of the value</comment>
				<comment type="line" pos:line="89" pos:column="33">// held or returned.</comment>
				<decl_stmt><decl><type><name pos:line="90" pos:column="33">bool</name></type> <name pos:line="90" pos:column="38">skipType</name> <init pos:line="90" pos:column="47">= <expr><lit:literal type="boolean" pos:line="90" pos:column="49">false</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="91" pos:column="33">if <condition pos:line="91" pos:column="36">(<expr><op:operator pos:line="91" pos:column="37">!</op:operator><name pos:line="91" pos:column="38">vbScriptSyntax</name> <op:operator pos:line="91" pos:column="53">&amp;&amp;</op:operator> <call><name pos:line="91" pos:column="56">IsTypeCharacter</name><argument_list pos:line="91" pos:column="71">(<argument><expr><name><name pos:line="91" pos:column="72">sc</name><op:operator pos:line="91" pos:column="74">.</op:operator><name pos:line="91" pos:column="75">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="79"> <block pos:line="91" pos:column="80">{
					<expr_stmt><expr><call><name><name pos:line="92" pos:column="41">sc</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">Forward</name></name><argument_list pos:line="92" pos:column="51">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="92" pos:column="57">// Skip it</comment>
					<expr_stmt><expr><name pos:line="93" pos:column="41">skipType</name> <op:operator pos:line="93" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="93" pos:column="52">true</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="95" pos:column="33">if <condition pos:line="95" pos:column="36">(<expr><name><name pos:line="95" pos:column="37">sc</name><op:operator pos:line="95" pos:column="39">.</op:operator><name pos:line="95" pos:column="40">ch</name></name> <op:operator pos:line="95" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="95" pos:column="46">']'</lit:literal></expr>)</condition><then pos:line="95" pos:column="50"> <block pos:line="95" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="96" pos:column="41">sc</name><op:operator pos:line="96" pos:column="43">.</op:operator><name pos:line="96" pos:column="44">Forward</name></name><argument_list pos:line="96" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<decl_stmt><decl><type><name pos:line="98" pos:column="33">char</name></type> <name><name pos:line="98" pos:column="38">s</name><index pos:line="98" pos:column="39">[<expr><lit:literal type="number" pos:line="98" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="99" pos:column="33">sc</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="99" pos:column="53">(<argument><expr><name pos:line="99" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="99" pos:column="57">sizeof<argument_list pos:line="99" pos:column="63">(<argument><expr><name pos:line="99" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="100" pos:column="33">if <condition pos:line="100" pos:column="36">(<expr><name pos:line="100" pos:column="37">skipType</name></expr>)</condition><then pos:line="100" pos:column="46"> <block pos:line="100" pos:column="47">{
					<expr_stmt><expr><name><name pos:line="101" pos:column="41">s</name><index pos:line="101" pos:column="42">[<expr><call><name pos:line="101" pos:column="43">strlen</name><argument_list pos:line="101" pos:column="49">(<argument><expr><name pos:line="101" pos:column="50">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="101" pos:column="53">-</op:operator> <lit:literal type="number" pos:line="101" pos:column="55">1</lit:literal></expr>]</index></name> <op:operator pos:line="101" pos:column="58">=</op:operator> <lit:literal type="char" pos:line="101" pos:column="60">'\0'</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="103" pos:column="33">if <condition pos:line="103" pos:column="36">(<expr><call><name pos:line="103" pos:column="37">strcmp</name><argument_list pos:line="103" pos:column="43">(<argument><expr><name pos:line="103" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="103" pos:column="47">"rem"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="103" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="103" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="103" pos:column="59"> <block pos:line="103" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="104" pos:column="41">sc</name><op:operator pos:line="104" pos:column="43">.</op:operator><name pos:line="104" pos:column="44">ChangeState</name></name><argument_list pos:line="104" pos:column="55">(<argument><expr><name pos:line="104" pos:column="56">SCE_B_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="105" pos:column="35">else <block pos:line="105" pos:column="40">{
					<if pos:line="106" pos:column="41">if <condition pos:line="106" pos:column="44">(<expr><call><name><name pos:line="106" pos:column="45">keywords</name><op:operator pos:line="106" pos:column="53">.</op:operator><name pos:line="106" pos:column="54">InList</name></name><argument_list pos:line="106" pos:column="60">(<argument><expr><name pos:line="106" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="64"> <block pos:line="106" pos:column="65">{
						<expr_stmt><expr><call><name><name pos:line="107" pos:column="49">sc</name><op:operator pos:line="107" pos:column="51">.</op:operator><name pos:line="107" pos:column="52">ChangeState</name></name><argument_list pos:line="107" pos:column="63">(<argument><expr><name pos:line="107" pos:column="64">SCE_B_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="108" pos:column="43">else <if pos:line="108" pos:column="48">if <condition pos:line="108" pos:column="51">(<expr><call><name><name pos:line="108" pos:column="52">keywords2</name><op:operator pos:line="108" pos:column="61">.</op:operator><name pos:line="108" pos:column="62">InList</name></name><argument_list pos:line="108" pos:column="68">(<argument><expr><name pos:line="108" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="72"> <block pos:line="108" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="109" pos:column="49">sc</name><op:operator pos:line="109" pos:column="51">.</op:operator><name pos:line="109" pos:column="52">ChangeState</name></name><argument_list pos:line="109" pos:column="63">(<argument><expr><name pos:line="109" pos:column="64">SCE_B_KEYWORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="110" pos:column="43">else <if pos:line="110" pos:column="48">if <condition pos:line="110" pos:column="51">(<expr><call><name><name pos:line="110" pos:column="52">keywords3</name><op:operator pos:line="110" pos:column="61">.</op:operator><name pos:line="110" pos:column="62">InList</name></name><argument_list pos:line="110" pos:column="68">(<argument><expr><name pos:line="110" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="72"> <block pos:line="110" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="111" pos:column="49">sc</name><op:operator pos:line="111" pos:column="51">.</op:operator><name pos:line="111" pos:column="52">ChangeState</name></name><argument_list pos:line="111" pos:column="63">(<argument><expr><name pos:line="111" pos:column="64">SCE_B_KEYWORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="112" pos:column="43">else <if pos:line="112" pos:column="48">if <condition pos:line="112" pos:column="51">(<expr><call><name><name pos:line="112" pos:column="52">keywords4</name><op:operator pos:line="112" pos:column="61">.</op:operator><name pos:line="112" pos:column="62">InList</name></name><argument_list pos:line="112" pos:column="68">(<argument><expr><name pos:line="112" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="112" pos:column="72"> <block pos:line="112" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="113" pos:column="49">sc</name><op:operator pos:line="113" pos:column="51">.</op:operator><name pos:line="113" pos:column="52">ChangeState</name></name><argument_list pos:line="113" pos:column="63">(<argument><expr><name pos:line="113" pos:column="64">SCE_B_KEYWORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if></else></if>	<comment type="line" pos:line="114" pos:column="49">// Else, it is really an identifier...</comment>
					<expr_stmt><expr><call><name><name pos:line="115" pos:column="41">sc</name><op:operator pos:line="115" pos:column="43">.</op:operator><name pos:line="115" pos:column="44">SetState</name></name><argument_list pos:line="115" pos:column="52">(<argument><expr><name pos:line="115" pos:column="53">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="118" pos:column="19">else <if pos:line="118" pos:column="24">if <condition pos:line="118" pos:column="27">(<expr><name><name pos:line="118" pos:column="28">sc</name><op:operator pos:line="118" pos:column="30">.</op:operator><name pos:line="118" pos:column="31">state</name></name> <op:operator pos:line="118" pos:column="37">==</op:operator> <name pos:line="118" pos:column="40">SCE_B_NUMBER</name></expr>)</condition><then pos:line="118" pos:column="53"> <block pos:line="118" pos:column="54">{
			<comment type="line" pos:line="119" pos:column="25">// We stop the number definition on non-numerical non-dot non-eE non-sign char</comment>
			<comment type="line" pos:line="120" pos:column="25">// Also accepts A-F for hex. numbers</comment>
			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><op:operator pos:line="121" pos:column="29">!</op:operator><call><name pos:line="121" pos:column="30">IsANumberChar</name><argument_list pos:line="121" pos:column="43">(<argument><expr><name><name pos:line="121" pos:column="44">sc</name><op:operator pos:line="121" pos:column="46">.</op:operator><name pos:line="121" pos:column="47">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="121" pos:column="54">!</op:operator><op:operator pos:line="121" pos:column="55">(</op:operator><call><name pos:line="121" pos:column="56">tolower</name><argument_list pos:line="121" pos:column="63">(<argument><expr><name><name pos:line="121" pos:column="64">sc</name><op:operator pos:line="121" pos:column="66">.</op:operator><name pos:line="121" pos:column="67">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="71">&gt;=</op:operator> <lit:literal type="char" pos:line="121" pos:column="74">'a'</lit:literal> <op:operator pos:line="121" pos:column="78">&amp;&amp;</op:operator> <call><name pos:line="121" pos:column="81">tolower</name><argument_list pos:line="121" pos:column="88">(<argument><expr><name><name pos:line="121" pos:column="89">sc</name><op:operator pos:line="121" pos:column="91">.</op:operator><name pos:line="121" pos:column="92">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="96">&lt;=</op:operator> <lit:literal type="char" pos:line="121" pos:column="99">'f'</lit:literal><op:operator pos:line="121" pos:column="102">)</op:operator></expr>)</condition><then pos:line="121" pos:column="104"> <block pos:line="121" pos:column="105">{
				<expr_stmt><expr><call><name><name pos:line="122" pos:column="33">sc</name><op:operator pos:line="122" pos:column="35">.</op:operator><name pos:line="122" pos:column="36">SetState</name></name><argument_list pos:line="122" pos:column="44">(<argument><expr><name pos:line="122" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="124" pos:column="19">else <if pos:line="124" pos:column="24">if <condition pos:line="124" pos:column="27">(<expr><name><name pos:line="124" pos:column="28">sc</name><op:operator pos:line="124" pos:column="30">.</op:operator><name pos:line="124" pos:column="31">state</name></name> <op:operator pos:line="124" pos:column="37">==</op:operator> <name pos:line="124" pos:column="40">SCE_B_STRING</name></expr>)</condition><then pos:line="124" pos:column="53"> <block pos:line="124" pos:column="54">{
			<comment type="line" pos:line="125" pos:column="25">// VB doubles quotes to preserve them, so just end this string</comment>
			<comment type="line" pos:line="126" pos:column="25">// state now as a following quote will start again</comment>
			<if pos:line="127" pos:column="25">if <condition pos:line="127" pos:column="28">(<expr><name><name pos:line="127" pos:column="29">sc</name><op:operator pos:line="127" pos:column="31">.</op:operator><name pos:line="127" pos:column="32">ch</name></name> <op:operator pos:line="127" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="38">'\"'</lit:literal></expr>)</condition><then pos:line="127" pos:column="43"> <block pos:line="127" pos:column="44">{
				<if pos:line="128" pos:column="33">if <condition pos:line="128" pos:column="36">(<expr><name><name pos:line="128" pos:column="37">sc</name><op:operator pos:line="128" pos:column="39">.</op:operator><name pos:line="128" pos:column="40">chNext</name></name> <op:operator pos:line="128" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="128" pos:column="55"> <block pos:line="128" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="129" pos:column="41">sc</name><op:operator pos:line="129" pos:column="43">.</op:operator><name pos:line="129" pos:column="44">Forward</name></name><argument_list pos:line="129" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="130" pos:column="35">else <block pos:line="130" pos:column="40">{
					<if pos:line="131" pos:column="41">if <condition pos:line="131" pos:column="44">(<expr><call><name pos:line="131" pos:column="45">tolower</name><argument_list pos:line="131" pos:column="52">(<argument><expr><name><name pos:line="131" pos:column="53">sc</name><op:operator pos:line="131" pos:column="55">.</op:operator><name pos:line="131" pos:column="56">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="131" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="67">'c'</lit:literal></expr>)</condition><then pos:line="131" pos:column="71"> <block pos:line="131" pos:column="72">{
						<expr_stmt><expr><call><name><name pos:line="132" pos:column="49">sc</name><op:operator pos:line="132" pos:column="51">.</op:operator><name pos:line="132" pos:column="52">Forward</name></name><argument_list pos:line="132" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name pos:line="134" pos:column="41">sc</name><op:operator pos:line="134" pos:column="43">.</op:operator><name pos:line="134" pos:column="44">ForwardSetState</name></name><argument_list pos:line="134" pos:column="59">(<argument><expr><name pos:line="134" pos:column="60">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="136" pos:column="27">else <if pos:line="136" pos:column="32">if <condition pos:line="136" pos:column="35">(<expr><name><name pos:line="136" pos:column="36">sc</name><op:operator pos:line="136" pos:column="38">.</op:operator><name pos:line="136" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="136" pos:column="49"> <block pos:line="136" pos:column="50">{
				<expr_stmt><expr><name pos:line="137" pos:column="33">visibleChars</name> <op:operator pos:line="137" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="137" pos:column="48">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="138" pos:column="33">sc</name><op:operator pos:line="138" pos:column="35">.</op:operator><name pos:line="138" pos:column="36">ChangeState</name></name><argument_list pos:line="138" pos:column="47">(<argument><expr><name pos:line="138" pos:column="48">SCE_B_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="139" pos:column="33">sc</name><op:operator pos:line="139" pos:column="35">.</op:operator><name pos:line="139" pos:column="36">ForwardSetState</name></name><argument_list pos:line="139" pos:column="51">(<argument><expr><name pos:line="139" pos:column="52">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="141" pos:column="19">else <if pos:line="141" pos:column="24">if <condition pos:line="141" pos:column="27">(<expr><name><name pos:line="141" pos:column="28">sc</name><op:operator pos:line="141" pos:column="30">.</op:operator><name pos:line="141" pos:column="31">state</name></name> <op:operator pos:line="141" pos:column="37">==</op:operator> <name pos:line="141" pos:column="40">SCE_B_COMMENT</name></expr>)</condition><then pos:line="141" pos:column="54"> <block pos:line="141" pos:column="55">{
			<if pos:line="142" pos:column="25">if <condition pos:line="142" pos:column="28">(<expr><name><name pos:line="142" pos:column="29">sc</name><op:operator pos:line="142" pos:column="31">.</op:operator><name pos:line="142" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="142" pos:column="42"> <block pos:line="142" pos:column="43">{
				<expr_stmt><expr><name pos:line="143" pos:column="33">visibleChars</name> <op:operator pos:line="143" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="143" pos:column="48">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="144" pos:column="33">sc</name><op:operator pos:line="144" pos:column="35">.</op:operator><name pos:line="144" pos:column="36">ForwardSetState</name></name><argument_list pos:line="144" pos:column="51">(<argument><expr><name pos:line="144" pos:column="52">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="146" pos:column="19">else <if pos:line="146" pos:column="24">if <condition pos:line="146" pos:column="27">(<expr><name><name pos:line="146" pos:column="28">sc</name><op:operator pos:line="146" pos:column="30">.</op:operator><name pos:line="146" pos:column="31">state</name></name> <op:operator pos:line="146" pos:column="37">==</op:operator> <name pos:line="146" pos:column="40">SCE_B_PREPROCESSOR</name></expr>)</condition><then pos:line="146" pos:column="59"> <block pos:line="146" pos:column="60">{
			<if pos:line="147" pos:column="25">if <condition pos:line="147" pos:column="28">(<expr><name><name pos:line="147" pos:column="29">sc</name><op:operator pos:line="147" pos:column="31">.</op:operator><name pos:line="147" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="147" pos:column="42"> <block pos:line="147" pos:column="43">{
				<expr_stmt><expr><name pos:line="148" pos:column="33">visibleChars</name> <op:operator pos:line="148" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="148" pos:column="48">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="149" pos:column="33">sc</name><op:operator pos:line="149" pos:column="35">.</op:operator><name pos:line="149" pos:column="36">ForwardSetState</name></name><argument_list pos:line="149" pos:column="51">(<argument><expr><name pos:line="149" pos:column="52">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="151" pos:column="19">else <if pos:line="151" pos:column="24">if <condition pos:line="151" pos:column="27">(<expr><name><name pos:line="151" pos:column="28">sc</name><op:operator pos:line="151" pos:column="30">.</op:operator><name pos:line="151" pos:column="31">state</name></name> <op:operator pos:line="151" pos:column="37">==</op:operator> <name pos:line="151" pos:column="40">SCE_B_FILENUMBER</name></expr>)</condition><then pos:line="151" pos:column="57"> <block pos:line="151" pos:column="58">{
			<if pos:line="152" pos:column="25">if <condition pos:line="152" pos:column="28">(<expr><call><name pos:line="152" pos:column="29">IsADigit</name><argument_list pos:line="152" pos:column="37">(<argument><expr><name><name pos:line="152" pos:column="38">sc</name><op:operator pos:line="152" pos:column="40">.</op:operator><name pos:line="152" pos:column="41">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="45"> <block pos:line="152" pos:column="46">{
				<expr_stmt><expr><name pos:line="153" pos:column="33">fileNbDigits</name><op:operator pos:line="153" pos:column="45">++</op:operator></expr>;</expr_stmt>
				<if pos:line="154" pos:column="33">if <condition pos:line="154" pos:column="36">(<expr><name pos:line="154" pos:column="37">fileNbDigits</name> <op:operator pos:line="154" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="154" pos:column="52">3</lit:literal></expr>)</condition><then pos:line="154" pos:column="54"> <block pos:line="154" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="155" pos:column="41">sc</name><op:operator pos:line="155" pos:column="43">.</op:operator><name pos:line="155" pos:column="44">ChangeState</name></name><argument_list pos:line="155" pos:column="55">(<argument><expr><name pos:line="155" pos:column="56">SCE_B_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="157" pos:column="27">else <if pos:line="157" pos:column="32">if <condition pos:line="157" pos:column="35">(<expr><name><name pos:line="157" pos:column="36">sc</name><op:operator pos:line="157" pos:column="38">.</op:operator><name pos:line="157" pos:column="39">ch</name></name> <op:operator pos:line="157" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="157" pos:column="45">'\r'</lit:literal> <op:operator pos:line="157" pos:column="50">||</op:operator> <name><name pos:line="157" pos:column="53">sc</name><op:operator pos:line="157" pos:column="55">.</op:operator><name pos:line="157" pos:column="56">ch</name></name> <op:operator pos:line="157" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="157" pos:column="62">'\n'</lit:literal> <op:operator pos:line="157" pos:column="67">||</op:operator> <name><name pos:line="157" pos:column="70">sc</name><op:operator pos:line="157" pos:column="72">.</op:operator><name pos:line="157" pos:column="73">ch</name></name> <op:operator pos:line="157" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="157" pos:column="79">','</lit:literal></expr>)</condition><then pos:line="157" pos:column="83"> <block pos:line="157" pos:column="84">{
				<comment type="line" pos:line="158" pos:column="33">// Regular uses: Close #1; Put #1, ...; Get #1, ... etc.</comment>
				<comment type="line" pos:line="159" pos:column="33">// Too bad if date is format #27, Oct, 2003# or something like that...</comment>
				<comment type="line" pos:line="160" pos:column="33">// Use regular number state</comment>
				<expr_stmt><expr><call><name><name pos:line="161" pos:column="33">sc</name><op:operator pos:line="161" pos:column="35">.</op:operator><name pos:line="161" pos:column="36">ChangeState</name></name><argument_list pos:line="161" pos:column="47">(<argument><expr><name pos:line="161" pos:column="48">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="162" pos:column="33">sc</name><op:operator pos:line="162" pos:column="35">.</op:operator><name pos:line="162" pos:column="36">SetState</name></name><argument_list pos:line="162" pos:column="44">(<argument><expr><name pos:line="162" pos:column="45">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="163" pos:column="27">else <if pos:line="163" pos:column="32">if <condition pos:line="163" pos:column="35">(<expr><name><name pos:line="163" pos:column="36">sc</name><op:operator pos:line="163" pos:column="38">.</op:operator><name pos:line="163" pos:column="39">ch</name></name> <op:operator pos:line="163" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="163" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="163" pos:column="49"> <block pos:line="163" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="164" pos:column="33">sc</name><op:operator pos:line="164" pos:column="35">.</op:operator><name pos:line="164" pos:column="36">ChangeState</name></name><argument_list pos:line="164" pos:column="47">(<argument><expr><name pos:line="164" pos:column="48">SCE_B_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="165" pos:column="33">sc</name><op:operator pos:line="165" pos:column="35">.</op:operator><name pos:line="165" pos:column="36">ForwardSetState</name></name><argument_list pos:line="165" pos:column="51">(<argument><expr><name pos:line="165" pos:column="52">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="166" pos:column="27">else <block pos:line="166" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="167" pos:column="33">sc</name><op:operator pos:line="167" pos:column="35">.</op:operator><name pos:line="167" pos:column="36">ChangeState</name></name><argument_list pos:line="167" pos:column="47">(<argument><expr><name pos:line="167" pos:column="48">SCE_B_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if>
			<if pos:line="169" pos:column="25">if <condition pos:line="169" pos:column="28">(<expr><name><name pos:line="169" pos:column="29">sc</name><op:operator pos:line="169" pos:column="31">.</op:operator><name pos:line="169" pos:column="32">state</name></name> <op:operator pos:line="169" pos:column="38">!=</op:operator> <name pos:line="169" pos:column="41">SCE_B_FILENUMBER</name></expr>)</condition><then pos:line="169" pos:column="58"> <block pos:line="169" pos:column="59">{
				<expr_stmt><expr><name pos:line="170" pos:column="33">fileNbDigits</name> <op:operator pos:line="170" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="170" pos:column="48">0</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="172" pos:column="19">else <if pos:line="172" pos:column="24">if <condition pos:line="172" pos:column="27">(<expr><name><name pos:line="172" pos:column="28">sc</name><op:operator pos:line="172" pos:column="30">.</op:operator><name pos:line="172" pos:column="31">state</name></name> <op:operator pos:line="172" pos:column="37">==</op:operator> <name pos:line="172" pos:column="40">SCE_B_DATE</name></expr>)</condition><then pos:line="172" pos:column="51"> <block pos:line="172" pos:column="52">{
			<if pos:line="173" pos:column="25">if <condition pos:line="173" pos:column="28">(<expr><name><name pos:line="173" pos:column="29">sc</name><op:operator pos:line="173" pos:column="31">.</op:operator><name pos:line="173" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="173" pos:column="42"> <block pos:line="173" pos:column="43">{
				<expr_stmt><expr><name pos:line="174" pos:column="33">visibleChars</name> <op:operator pos:line="174" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="174" pos:column="48">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="175" pos:column="33">sc</name><op:operator pos:line="175" pos:column="35">.</op:operator><name pos:line="175" pos:column="36">ChangeState</name></name><argument_list pos:line="175" pos:column="47">(<argument><expr><name pos:line="175" pos:column="48">SCE_B_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="176" pos:column="33">sc</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">ForwardSetState</name></name><argument_list pos:line="176" pos:column="51">(<argument><expr><name pos:line="176" pos:column="52">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="177" pos:column="27">else <if pos:line="177" pos:column="32">if <condition pos:line="177" pos:column="35">(<expr><name><name pos:line="177" pos:column="36">sc</name><op:operator pos:line="177" pos:column="38">.</op:operator><name pos:line="177" pos:column="39">ch</name></name> <op:operator pos:line="177" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="177" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="177" pos:column="49"> <block pos:line="177" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="178" pos:column="33">sc</name><op:operator pos:line="178" pos:column="35">.</op:operator><name pos:line="178" pos:column="36">ForwardSetState</name></name><argument_list pos:line="178" pos:column="51">(<argument><expr><name pos:line="178" pos:column="52">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><name><name pos:line="182" pos:column="21">sc</name><op:operator pos:line="182" pos:column="23">.</op:operator><name pos:line="182" pos:column="24">state</name></name> <op:operator pos:line="182" pos:column="30">==</op:operator> <name pos:line="182" pos:column="33">SCE_B_DEFAULT</name></expr>)</condition><then pos:line="182" pos:column="47"> <block pos:line="182" pos:column="48">{
			<if pos:line="183" pos:column="25">if <condition pos:line="183" pos:column="28">(<expr><name><name pos:line="183" pos:column="29">sc</name><op:operator pos:line="183" pos:column="31">.</op:operator><name pos:line="183" pos:column="32">ch</name></name> <op:operator pos:line="183" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="183" pos:column="38">'\''</lit:literal></expr>)</condition><then pos:line="183" pos:column="43"> <block pos:line="183" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="184" pos:column="33">sc</name><op:operator pos:line="184" pos:column="35">.</op:operator><name pos:line="184" pos:column="36">SetState</name></name><argument_list pos:line="184" pos:column="44">(<argument><expr><name pos:line="184" pos:column="45">SCE_B_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="185" pos:column="27">else <if pos:line="185" pos:column="32">if <condition pos:line="185" pos:column="35">(<expr><name><name pos:line="185" pos:column="36">sc</name><op:operator pos:line="185" pos:column="38">.</op:operator><name pos:line="185" pos:column="39">ch</name></name> <op:operator pos:line="185" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="185" pos:column="50"> <block pos:line="185" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="186" pos:column="33">sc</name><op:operator pos:line="186" pos:column="35">.</op:operator><name pos:line="186" pos:column="36">SetState</name></name><argument_list pos:line="186" pos:column="44">(<argument><expr><name pos:line="186" pos:column="45">SCE_B_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="187" pos:column="27">else <if pos:line="187" pos:column="32">if <condition pos:line="187" pos:column="35">(<expr><name><name pos:line="187" pos:column="36">sc</name><op:operator pos:line="187" pos:column="38">.</op:operator><name pos:line="187" pos:column="39">ch</name></name> <op:operator pos:line="187" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="187" pos:column="45">'#'</lit:literal> <op:operator pos:line="187" pos:column="49">&amp;&amp;</op:operator> <name pos:line="187" pos:column="52">visibleChars</name> <op:operator pos:line="187" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="187" pos:column="68">0</lit:literal></expr>)</condition><then pos:line="187" pos:column="70"> <block pos:line="187" pos:column="71">{
				<comment type="line" pos:line="188" pos:column="33">// Preprocessor commands are alone on their line</comment>
				<expr_stmt><expr><call><name><name pos:line="189" pos:column="33">sc</name><op:operator pos:line="189" pos:column="35">.</op:operator><name pos:line="189" pos:column="36">SetState</name></name><argument_list pos:line="189" pos:column="44">(<argument><expr><name pos:line="189" pos:column="45">SCE_B_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="190" pos:column="27">else <if pos:line="190" pos:column="32">if <condition pos:line="190" pos:column="35">(<expr><name><name pos:line="190" pos:column="36">sc</name><op:operator pos:line="190" pos:column="38">.</op:operator><name pos:line="190" pos:column="39">ch</name></name> <op:operator pos:line="190" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="190" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="190" pos:column="49"> <block pos:line="190" pos:column="50">{
				<comment type="line" pos:line="191" pos:column="33">// It can be a date literal, ending with #, or a file number, from 1 to 511</comment>
				<comment type="line" pos:line="192" pos:column="33">// The date literal depends on the locale, so anything can go between #'s.</comment>
				<comment type="line" pos:line="193" pos:column="33">// Can be #January 1, 1993# or #1 Jan 93# or #05/11/2003#, etc.</comment>
				<comment type="line" pos:line="194" pos:column="33">// So we set the FILENUMBER state, and switch to DATE if it isn't a file number</comment>
				<expr_stmt><expr><call><name><name pos:line="195" pos:column="33">sc</name><op:operator pos:line="195" pos:column="35">.</op:operator><name pos:line="195" pos:column="36">SetState</name></name><argument_list pos:line="195" pos:column="44">(<argument><expr><name pos:line="195" pos:column="45">SCE_B_FILENUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="196" pos:column="27">else <if pos:line="196" pos:column="32">if <condition pos:line="196" pos:column="35">(<expr><name><name pos:line="196" pos:column="36">sc</name><op:operator pos:line="196" pos:column="38">.</op:operator><name pos:line="196" pos:column="39">ch</name></name> <op:operator pos:line="196" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="196" pos:column="45">'&amp;'</lit:literal> <op:operator pos:line="196" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="196" pos:column="52">tolower</name><argument_list pos:line="196" pos:column="59">(<argument><expr><name><name pos:line="196" pos:column="60">sc</name><op:operator pos:line="196" pos:column="62">.</op:operator><name pos:line="196" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="196" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="196" pos:column="74">'h'</lit:literal></expr>)</condition><then pos:line="196" pos:column="78"> <block pos:line="196" pos:column="79">{
				<comment type="line" pos:line="197" pos:column="33">// Hexadecimal number</comment>
				<expr_stmt><expr><call><name><name pos:line="198" pos:column="33">sc</name><op:operator pos:line="198" pos:column="35">.</op:operator><name pos:line="198" pos:column="36">SetState</name></name><argument_list pos:line="198" pos:column="44">(<argument><expr><name pos:line="198" pos:column="45">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="199" pos:column="33">sc</name><op:operator pos:line="199" pos:column="35">.</op:operator><name pos:line="199" pos:column="36">Forward</name></name><argument_list pos:line="199" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="200" pos:column="27">else <if pos:line="200" pos:column="32">if <condition pos:line="200" pos:column="35">(<expr><name><name pos:line="200" pos:column="36">sc</name><op:operator pos:line="200" pos:column="38">.</op:operator><name pos:line="200" pos:column="39">ch</name></name> <op:operator pos:line="200" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="45">'&amp;'</lit:literal> <op:operator pos:line="200" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="200" pos:column="52">tolower</name><argument_list pos:line="200" pos:column="59">(<argument><expr><name><name pos:line="200" pos:column="60">sc</name><op:operator pos:line="200" pos:column="62">.</op:operator><name pos:line="200" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="200" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="74">'o'</lit:literal></expr>)</condition><then pos:line="200" pos:column="78"> <block pos:line="200" pos:column="79">{
				<comment type="line" pos:line="201" pos:column="33">// Octal number</comment>
				<expr_stmt><expr><call><name><name pos:line="202" pos:column="33">sc</name><op:operator pos:line="202" pos:column="35">.</op:operator><name pos:line="202" pos:column="36">SetState</name></name><argument_list pos:line="202" pos:column="44">(<argument><expr><name pos:line="202" pos:column="45">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="203" pos:column="33">sc</name><op:operator pos:line="203" pos:column="35">.</op:operator><name pos:line="203" pos:column="36">Forward</name></name><argument_list pos:line="203" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="204" pos:column="27">else <if pos:line="204" pos:column="32">if <condition pos:line="204" pos:column="35">(<expr><call><name pos:line="204" pos:column="36">IsADigit</name><argument_list pos:line="204" pos:column="44">(<argument><expr><name><name pos:line="204" pos:column="45">sc</name><op:operator pos:line="204" pos:column="47">.</op:operator><name pos:line="204" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="204" pos:column="52">||</op:operator> <op:operator pos:line="204" pos:column="55">(</op:operator><name><name pos:line="204" pos:column="56">sc</name><op:operator pos:line="204" pos:column="58">.</op:operator><name pos:line="204" pos:column="59">ch</name></name> <op:operator pos:line="204" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="204" pos:column="65">'.'</lit:literal> <op:operator pos:line="204" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="204" pos:column="72">IsADigit</name><argument_list pos:line="204" pos:column="80">(<argument><expr><name><name pos:line="204" pos:column="81">sc</name><op:operator pos:line="204" pos:column="83">.</op:operator><name pos:line="204" pos:column="84">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="204" pos:column="91">)</op:operator></expr>)</condition><then pos:line="204" pos:column="93"> <block pos:line="204" pos:column="94">{
				<expr_stmt><expr><call><name><name pos:line="205" pos:column="33">sc</name><op:operator pos:line="205" pos:column="35">.</op:operator><name pos:line="205" pos:column="36">SetState</name></name><argument_list pos:line="205" pos:column="44">(<argument><expr><name pos:line="205" pos:column="45">SCE_B_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="206" pos:column="27">else <if pos:line="206" pos:column="32">if <condition pos:line="206" pos:column="35">(<expr><call><name pos:line="206" pos:column="36">IsAWordStart</name><argument_list pos:line="206" pos:column="48">(<argument><expr><name><name pos:line="206" pos:column="49">sc</name><op:operator pos:line="206" pos:column="51">.</op:operator><name pos:line="206" pos:column="52">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="206" pos:column="56">||</op:operator> <op:operator pos:line="206" pos:column="59">(</op:operator><name><name pos:line="206" pos:column="60">sc</name><op:operator pos:line="206" pos:column="62">.</op:operator><name pos:line="206" pos:column="63">ch</name></name> <op:operator pos:line="206" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="206" pos:column="69">'['</lit:literal><op:operator pos:line="206" pos:column="72">)</op:operator></expr>)</condition><then pos:line="206" pos:column="74"> <block pos:line="206" pos:column="75">{
				<expr_stmt><expr><call><name><name pos:line="207" pos:column="33">sc</name><op:operator pos:line="207" pos:column="35">.</op:operator><name pos:line="207" pos:column="36">SetState</name></name><argument_list pos:line="207" pos:column="44">(<argument><expr><name pos:line="207" pos:column="45">SCE_B_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="208" pos:column="27">else <if pos:line="208" pos:column="32">if <condition pos:line="208" pos:column="35">(<expr><call><name pos:line="208" pos:column="36">isoperator</name><argument_list pos:line="208" pos:column="46">(<argument><expr><call><name><name pos:line="208" pos:column="47">static_cast</name><argument_list pos:line="208" pos:column="58">&lt;<argument><expr><name pos:line="208" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="208" pos:column="64">(<argument><expr><name><name pos:line="208" pos:column="65">sc</name><op:operator pos:line="208" pos:column="67">.</op:operator><name pos:line="208" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="73">||</op:operator> <op:operator pos:line="208" pos:column="76">(</op:operator><name><name pos:line="208" pos:column="77">sc</name><op:operator pos:line="208" pos:column="79">.</op:operator><name pos:line="208" pos:column="80">ch</name></name> <op:operator pos:line="208" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="208" pos:column="86">'\\'</lit:literal><op:operator pos:line="208" pos:column="90">)</op:operator></expr>)</condition><then pos:line="208" pos:column="92"> <block pos:line="208" pos:column="93">{	<comment type="line" pos:line="208" pos:column="97">// Integer division</comment>
				<expr_stmt><expr><call><name><name pos:line="209" pos:column="33">sc</name><op:operator pos:line="209" pos:column="35">.</op:operator><name pos:line="209" pos:column="36">SetState</name></name><argument_list pos:line="209" pos:column="44">(<argument><expr><name pos:line="209" pos:column="45">SCE_B_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

		<if pos:line="213" pos:column="17">if <condition pos:line="213" pos:column="20">(<expr><name><name pos:line="213" pos:column="21">sc</name><op:operator pos:line="213" pos:column="23">.</op:operator><name pos:line="213" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="213" pos:column="34"> <block pos:line="213" pos:column="35">{
			<expr_stmt><expr><name pos:line="214" pos:column="25">visibleChars</name> <op:operator pos:line="214" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="214" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="216" pos:column="17">if <condition pos:line="216" pos:column="20">(<expr><op:operator pos:line="216" pos:column="21">!</op:operator><call><name pos:line="216" pos:column="22">IsASpace</name><argument_list pos:line="216" pos:column="30">(<argument><expr><name><name pos:line="216" pos:column="31">sc</name><op:operator pos:line="216" pos:column="33">.</op:operator><name pos:line="216" pos:column="34">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="216" pos:column="38"> <block pos:line="216" pos:column="39">{
			<expr_stmt><expr><name pos:line="217" pos:column="25">visibleChars</name><op:operator pos:line="217" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<if pos:line="221" pos:column="9">if <condition pos:line="221" pos:column="12">(<expr><name><name pos:line="221" pos:column="13">sc</name><op:operator pos:line="221" pos:column="15">.</op:operator><name pos:line="221" pos:column="16">state</name></name> <op:operator pos:line="221" pos:column="22">==</op:operator> <name pos:line="221" pos:column="25">SCE_B_IDENTIFIER</name> <op:operator pos:line="221" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="221" pos:column="45">!</op:operator><call><name pos:line="221" pos:column="46">IsAWordChar</name><argument_list pos:line="221" pos:column="57">(<argument><expr><name><name pos:line="221" pos:column="58">sc</name><op:operator pos:line="221" pos:column="60">.</op:operator><name pos:line="221" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="221" pos:column="65"> <block pos:line="221" pos:column="66">{
		<comment type="line" pos:line="222" pos:column="17">// In Basic (except VBScript), a variable name or a function name</comment>
		<comment type="line" pos:line="223" pos:column="17">// can end with a special character indicating the type of the value</comment>
		<comment type="line" pos:line="224" pos:column="17">// held or returned.</comment>
		<decl_stmt><decl><type><name pos:line="225" pos:column="17">bool</name></type> <name pos:line="225" pos:column="22">skipType</name> <init pos:line="225" pos:column="31">= <expr><lit:literal type="boolean" pos:line="225" pos:column="33">false</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="226" pos:column="17">if <condition pos:line="226" pos:column="20">(<expr><op:operator pos:line="226" pos:column="21">!</op:operator><name pos:line="226" pos:column="22">vbScriptSyntax</name> <op:operator pos:line="226" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="226" pos:column="40">IsTypeCharacter</name><argument_list pos:line="226" pos:column="55">(<argument><expr><name><name pos:line="226" pos:column="56">sc</name><op:operator pos:line="226" pos:column="58">.</op:operator><name pos:line="226" pos:column="59">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="226" pos:column="63"> <block pos:line="226" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="227" pos:column="25">sc</name><op:operator pos:line="227" pos:column="27">.</op:operator><name pos:line="227" pos:column="28">Forward</name></name><argument_list pos:line="227" pos:column="35">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="227" pos:column="41">// Skip it</comment>
			<expr_stmt><expr><name pos:line="228" pos:column="25">skipType</name> <op:operator pos:line="228" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="228" pos:column="36">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="230" pos:column="17">if <condition pos:line="230" pos:column="20">(<expr><name><name pos:line="230" pos:column="21">sc</name><op:operator pos:line="230" pos:column="23">.</op:operator><name pos:line="230" pos:column="24">ch</name></name> <op:operator pos:line="230" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="230" pos:column="30">']'</lit:literal></expr>)</condition><then pos:line="230" pos:column="34"> <block pos:line="230" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="231" pos:column="25">sc</name><op:operator pos:line="231" pos:column="27">.</op:operator><name pos:line="231" pos:column="28">Forward</name></name><argument_list pos:line="231" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="233" pos:column="17">char</name></type> <name><name pos:line="233" pos:column="22">s</name><index pos:line="233" pos:column="23">[<expr><lit:literal type="number" pos:line="233" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="234" pos:column="17">sc</name><op:operator pos:line="234" pos:column="19">.</op:operator><name pos:line="234" pos:column="20">GetCurrentLowered</name></name><argument_list pos:line="234" pos:column="37">(<argument><expr><name pos:line="234" pos:column="38">s</name></expr></argument>, <argument><expr><sizeof pos:line="234" pos:column="41">sizeof<argument_list pos:line="234" pos:column="47">(<argument><expr><name pos:line="234" pos:column="48">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="235" pos:column="17">if <condition pos:line="235" pos:column="20">(<expr><name pos:line="235" pos:column="21">skipType</name></expr>)</condition><then pos:line="235" pos:column="30"> <block pos:line="235" pos:column="31">{
			<expr_stmt><expr><name><name pos:line="236" pos:column="25">s</name><index pos:line="236" pos:column="26">[<expr><call><name pos:line="236" pos:column="27">strlen</name><argument_list pos:line="236" pos:column="33">(<argument><expr><name pos:line="236" pos:column="34">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="236" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="236" pos:column="39">1</lit:literal></expr>]</index></name> <op:operator pos:line="236" pos:column="42">=</op:operator> <lit:literal type="char" pos:line="236" pos:column="44">'\0'</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><call><name pos:line="238" pos:column="21">strcmp</name><argument_list pos:line="238" pos:column="27">(<argument><expr><name pos:line="238" pos:column="28">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="238" pos:column="31">"rem"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="238" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="238" pos:column="41">0</lit:literal></expr>)</condition><then pos:line="238" pos:column="43"> <block pos:line="238" pos:column="44">{
			<expr_stmt><expr><call><name><name pos:line="239" pos:column="25">sc</name><op:operator pos:line="239" pos:column="27">.</op:operator><name pos:line="239" pos:column="28">ChangeState</name></name><argument_list pos:line="239" pos:column="39">(<argument><expr><name pos:line="239" pos:column="40">SCE_B_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="240" pos:column="19">else <block pos:line="240" pos:column="24">{
			<if pos:line="241" pos:column="25">if <condition pos:line="241" pos:column="28">(<expr><call><name><name pos:line="241" pos:column="29">keywords</name><op:operator pos:line="241" pos:column="37">.</op:operator><name pos:line="241" pos:column="38">InList</name></name><argument_list pos:line="241" pos:column="44">(<argument><expr><name pos:line="241" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="241" pos:column="48"> <block pos:line="241" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="242" pos:column="33">sc</name><op:operator pos:line="242" pos:column="35">.</op:operator><name pos:line="242" pos:column="36">ChangeState</name></name><argument_list pos:line="242" pos:column="47">(<argument><expr><name pos:line="242" pos:column="48">SCE_B_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="243" pos:column="27">else <if pos:line="243" pos:column="32">if <condition pos:line="243" pos:column="35">(<expr><call><name><name pos:line="243" pos:column="36">keywords2</name><op:operator pos:line="243" pos:column="45">.</op:operator><name pos:line="243" pos:column="46">InList</name></name><argument_list pos:line="243" pos:column="52">(<argument><expr><name pos:line="243" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="243" pos:column="56"> <block pos:line="243" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="244" pos:column="33">sc</name><op:operator pos:line="244" pos:column="35">.</op:operator><name pos:line="244" pos:column="36">ChangeState</name></name><argument_list pos:line="244" pos:column="47">(<argument><expr><name pos:line="244" pos:column="48">SCE_B_KEYWORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="245" pos:column="27">else <if pos:line="245" pos:column="32">if <condition pos:line="245" pos:column="35">(<expr><call><name><name pos:line="245" pos:column="36">keywords3</name><op:operator pos:line="245" pos:column="45">.</op:operator><name pos:line="245" pos:column="46">InList</name></name><argument_list pos:line="245" pos:column="52">(<argument><expr><name pos:line="245" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="245" pos:column="56"> <block pos:line="245" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="246" pos:column="33">sc</name><op:operator pos:line="246" pos:column="35">.</op:operator><name pos:line="246" pos:column="36">ChangeState</name></name><argument_list pos:line="246" pos:column="47">(<argument><expr><name pos:line="246" pos:column="48">SCE_B_KEYWORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="247" pos:column="27">else <if pos:line="247" pos:column="32">if <condition pos:line="247" pos:column="35">(<expr><call><name><name pos:line="247" pos:column="36">keywords4</name><op:operator pos:line="247" pos:column="45">.</op:operator><name pos:line="247" pos:column="46">InList</name></name><argument_list pos:line="247" pos:column="52">(<argument><expr><name pos:line="247" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="247" pos:column="56"> <block pos:line="247" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="248" pos:column="33">sc</name><op:operator pos:line="248" pos:column="35">.</op:operator><name pos:line="248" pos:column="36">ChangeState</name></name><argument_list pos:line="248" pos:column="47">(<argument><expr><name pos:line="248" pos:column="48">SCE_B_KEYWORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>	<comment type="line" pos:line="249" pos:column="33">// Else, it is really an identifier...</comment>
			<expr_stmt><expr><call><name><name pos:line="250" pos:column="25">sc</name><op:operator pos:line="250" pos:column="27">.</op:operator><name pos:line="250" pos:column="28">SetState</name></name><argument_list pos:line="250" pos:column="36">(<argument><expr><name pos:line="250" pos:column="37">SCE_B_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="254" pos:column="9">sc</name><op:operator pos:line="254" pos:column="11">.</op:operator><name pos:line="254" pos:column="12">Complete</name></name><argument_list pos:line="254" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="257" pos:column="1">static</specifier> <name pos:line="257" pos:column="8">void</name></type> <name pos:line="257" pos:column="13">FoldVBDoc</name><parameter_list pos:line="257" pos:column="22">(<param><decl><type><name pos:line="257" pos:column="23">unsigned</name> <name pos:line="257" pos:column="32">int</name></type> <name pos:line="257" pos:column="36">startPos</name></decl></param>, <param><decl><type><name pos:line="257" pos:column="46">int</name></type> <name pos:line="257" pos:column="50">length</name></decl></param>, <param><decl><type><name pos:line="257" pos:column="58">int</name></type></decl></param>,
						   <param><decl><type><name><name pos:line="258" pos:column="52">WordList</name> <type:modifier pos:line="258" pos:column="61">*</type:modifier><index pos:line="258" pos:column="62">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="258" pos:column="66">Accessor</name> <type:modifier pos:line="258" pos:column="75">&amp;</type:modifier></type><name pos:line="258" pos:column="76">styler</name></decl></param>)</parameter_list> <block pos:line="258" pos:column="84">{
	<decl_stmt><decl><type><name pos:line="259" pos:column="9">int</name></type> <name pos:line="259" pos:column="13">endPos</name> <init pos:line="259" pos:column="20">= <expr><name pos:line="259" pos:column="22">startPos</name> <op:operator pos:line="259" pos:column="31">+</op:operator> <name pos:line="259" pos:column="33">length</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="261" pos:column="9">// Backtrack to previous line in case need to fix its fold status</comment>
	<decl_stmt><decl><type><name pos:line="262" pos:column="9">int</name></type> <name pos:line="262" pos:column="13">lineCurrent</name> <init pos:line="262" pos:column="25">= <expr><call><name><name pos:line="262" pos:column="27">styler</name><op:operator pos:line="262" pos:column="33">.</op:operator><name pos:line="262" pos:column="34">GetLine</name></name><argument_list pos:line="262" pos:column="41">(<argument><expr><name pos:line="262" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="263" pos:column="9">if <condition pos:line="263" pos:column="12">(<expr><name pos:line="263" pos:column="13">startPos</name> <op:operator pos:line="263" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="263" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="263" pos:column="26"> <block pos:line="263" pos:column="27">{
		<if pos:line="264" pos:column="17">if <condition pos:line="264" pos:column="20">(<expr><name pos:line="264" pos:column="21">lineCurrent</name> <op:operator pos:line="264" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="264" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="264" pos:column="37"> <block pos:line="264" pos:column="38">{
			<expr_stmt><expr><name pos:line="265" pos:column="25">lineCurrent</name><op:operator pos:line="265" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="266" pos:column="25">startPos</name> <op:operator pos:line="266" pos:column="34">=</op:operator> <call><name><name pos:line="266" pos:column="36">styler</name><op:operator pos:line="266" pos:column="42">.</op:operator><name pos:line="266" pos:column="43">LineStart</name></name><argument_list pos:line="266" pos:column="52">(<argument><expr><name pos:line="266" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="269" pos:column="9">int</name></type> <name pos:line="269" pos:column="13">spaceFlags</name> <init pos:line="269" pos:column="24">= <expr><lit:literal type="number" pos:line="269" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="270" pos:column="9">int</name></type> <name pos:line="270" pos:column="13">indentCurrent</name> <init pos:line="270" pos:column="27">= <expr><call><name><name pos:line="270" pos:column="29">styler</name><op:operator pos:line="270" pos:column="35">.</op:operator><name pos:line="270" pos:column="36">IndentAmount</name></name><argument_list pos:line="270" pos:column="48">(<argument><expr><name pos:line="270" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="270" pos:column="62">&amp;</op:operator><name pos:line="270" pos:column="63">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="270" pos:column="75">IsVBComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="271" pos:column="9">char</name></type> <name pos:line="271" pos:column="14">chNext</name> <init pos:line="271" pos:column="21">= <expr><name><name pos:line="271" pos:column="23">styler</name><index pos:line="271" pos:column="29">[<expr><name pos:line="271" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for pos:line="272" pos:column="9">for (<init><decl><type><name pos:line="272" pos:column="14">int</name></type> <name pos:line="272" pos:column="18">i</name> <init pos:line="272" pos:column="20">= <expr><name pos:line="272" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="272" pos:column="32">i</name> <op:operator pos:line="272" pos:column="34">&lt;</op:operator> <name pos:line="272" pos:column="36">endPos</name></expr>;</condition> <incr><expr><name pos:line="272" pos:column="44">i</name><op:operator pos:line="272" pos:column="45">++</op:operator></expr></incr>) <block pos:line="272" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="273" pos:column="17">char</name></type> <name pos:line="273" pos:column="22">ch</name> <init pos:line="273" pos:column="25">= <expr><name pos:line="273" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="274" pos:column="17">chNext</name> <op:operator pos:line="274" pos:column="24">=</op:operator> <call><name><name pos:line="274" pos:column="26">styler</name><op:operator pos:line="274" pos:column="32">.</op:operator><name pos:line="274" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="274" pos:column="46">(<argument><expr><name pos:line="274" pos:column="47">i</name> <op:operator pos:line="274" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="274" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="276" pos:column="17">if <condition pos:line="276" pos:column="20">(<expr><op:operator pos:line="276" pos:column="21">(</op:operator><name pos:line="276" pos:column="22">ch</name> <op:operator pos:line="276" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="276" pos:column="28">'\r'</lit:literal> <op:operator pos:line="276" pos:column="33">&amp;&amp;</op:operator> <name pos:line="276" pos:column="36">chNext</name> <op:operator pos:line="276" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="276" pos:column="46">'\n'</lit:literal><op:operator pos:line="276" pos:column="50">)</op:operator> <op:operator pos:line="276" pos:column="52">||</op:operator> <op:operator pos:line="276" pos:column="55">(</op:operator><name pos:line="276" pos:column="56">ch</name> <op:operator pos:line="276" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="276" pos:column="62">'\n'</lit:literal><op:operator pos:line="276" pos:column="66">)</op:operator> <op:operator pos:line="276" pos:column="68">||</op:operator> <op:operator pos:line="276" pos:column="71">(</op:operator><name pos:line="276" pos:column="72">i</name> <op:operator pos:line="276" pos:column="74">==</op:operator> <name pos:line="276" pos:column="77">endPos</name><op:operator pos:line="276" pos:column="83">)</op:operator></expr>)</condition><then pos:line="276" pos:column="85"> <block pos:line="276" pos:column="86">{
			<decl_stmt><decl><type><name pos:line="277" pos:column="25">int</name></type> <name pos:line="277" pos:column="29">lev</name> <init pos:line="277" pos:column="33">= <expr><name pos:line="277" pos:column="35">indentCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="278" pos:column="25">int</name></type> <name pos:line="278" pos:column="29">indentNext</name> <init pos:line="278" pos:column="40">= <expr><call><name><name pos:line="278" pos:column="42">styler</name><op:operator pos:line="278" pos:column="48">.</op:operator><name pos:line="278" pos:column="49">IndentAmount</name></name><argument_list pos:line="278" pos:column="61">(<argument><expr><name pos:line="278" pos:column="62">lineCurrent</name> <op:operator pos:line="278" pos:column="74">+</op:operator> <lit:literal type="number" pos:line="278" pos:column="76">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="278" pos:column="79">&amp;</op:operator><name pos:line="278" pos:column="80">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="278" pos:column="92">IsVBComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="279" pos:column="25">if <condition pos:line="279" pos:column="28">(<expr><op:operator pos:line="279" pos:column="29">!</op:operator><op:operator pos:line="279" pos:column="30">(</op:operator><name pos:line="279" pos:column="31">indentCurrent</name> <op:operator pos:line="279" pos:column="45">&amp;</op:operator> <name pos:line="279" pos:column="47">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="279" pos:column="68">)</op:operator></expr>)</condition><then pos:line="279" pos:column="70"> <block pos:line="279" pos:column="71">{
				<comment type="line" pos:line="280" pos:column="33">// Only non whitespace lines can be headers</comment>
				<if pos:line="281" pos:column="33">if <condition pos:line="281" pos:column="36">(<expr><op:operator pos:line="281" pos:column="37">(</op:operator><name pos:line="281" pos:column="38">indentCurrent</name> <op:operator pos:line="281" pos:column="52">&amp;</op:operator> <name pos:line="281" pos:column="54">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="281" pos:column="76">)</op:operator> <op:operator pos:line="281" pos:column="78">&lt;</op:operator> <op:operator pos:line="281" pos:column="80">(</op:operator><name pos:line="281" pos:column="81">indentNext</name> <op:operator pos:line="281" pos:column="92">&amp;</op:operator> <name pos:line="281" pos:column="94">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="281" pos:column="116">)</op:operator></expr>)</condition><then pos:line="281" pos:column="118"> <block pos:line="281" pos:column="119">{
					<expr_stmt><expr><name pos:line="282" pos:column="41">lev</name> <op:operator pos:line="282" pos:column="45">|=</op:operator> <name pos:line="282" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="283" pos:column="35">else <if pos:line="283" pos:column="40">if <condition pos:line="283" pos:column="43">(<expr><name pos:line="283" pos:column="44">indentNext</name> <op:operator pos:line="283" pos:column="55">&amp;</op:operator> <name pos:line="283" pos:column="57">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="283" pos:column="79"> <block pos:line="283" pos:column="80">{
					<comment type="line" pos:line="284" pos:column="41">// Line after is blank so check the next - maybe should continue further?</comment>
					<decl_stmt><decl><type><name pos:line="285" pos:column="41">int</name></type> <name pos:line="285" pos:column="45">spaceFlags2</name> <init pos:line="285" pos:column="57">= <expr><lit:literal type="number" pos:line="285" pos:column="59">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="286" pos:column="41">int</name></type> <name pos:line="286" pos:column="45">indentNext2</name> <init pos:line="286" pos:column="57">= <expr><call><name><name pos:line="286" pos:column="59">styler</name><op:operator pos:line="286" pos:column="65">.</op:operator><name pos:line="286" pos:column="66">IndentAmount</name></name><argument_list pos:line="286" pos:column="78">(<argument><expr><name pos:line="286" pos:column="79">lineCurrent</name> <op:operator pos:line="286" pos:column="91">+</op:operator> <lit:literal type="number" pos:line="286" pos:column="93">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="286" pos:column="96">&amp;</op:operator><name pos:line="286" pos:column="97">spaceFlags2</name></expr></argument>, <argument><expr><name pos:line="286" pos:column="110">IsVBComment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="287" pos:column="41">if <condition pos:line="287" pos:column="44">(<expr><op:operator pos:line="287" pos:column="45">(</op:operator><name pos:line="287" pos:column="46">indentCurrent</name> <op:operator pos:line="287" pos:column="60">&amp;</op:operator> <name pos:line="287" pos:column="62">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="287" pos:column="84">)</op:operator> <op:operator pos:line="287" pos:column="86">&lt;</op:operator> <op:operator pos:line="287" pos:column="88">(</op:operator><name pos:line="287" pos:column="89">indentNext2</name> <op:operator pos:line="287" pos:column="101">&amp;</op:operator> <name pos:line="287" pos:column="103">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="287" pos:column="125">)</op:operator></expr>)</condition><then pos:line="287" pos:column="127"> <block pos:line="287" pos:column="128">{
						<expr_stmt><expr><name pos:line="288" pos:column="49">lev</name> <op:operator pos:line="288" pos:column="53">|=</op:operator> <name pos:line="288" pos:column="56">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="292" pos:column="25">indentCurrent</name> <op:operator pos:line="292" pos:column="39">=</op:operator> <name pos:line="292" pos:column="41">indentNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="293" pos:column="25">styler</name><op:operator pos:line="293" pos:column="31">.</op:operator><name pos:line="293" pos:column="32">SetLevel</name></name><argument_list pos:line="293" pos:column="40">(<argument><expr><name pos:line="293" pos:column="41">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="293" pos:column="54">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="294" pos:column="25">lineCurrent</name><op:operator pos:line="294" pos:column="36">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="299" pos:column="1">static</specifier> <name pos:line="299" pos:column="8">void</name></type> <name pos:line="299" pos:column="13">ColouriseVBNetDoc</name><parameter_list pos:line="299" pos:column="30">(<param><decl><type><name pos:line="299" pos:column="31">unsigned</name> <name pos:line="299" pos:column="40">int</name></type> <name pos:line="299" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="299" pos:column="54">int</name></type> <name pos:line="299" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="299" pos:column="66">int</name></type> <name pos:line="299" pos:column="70">initStyle</name></decl></param>,
                           <param><decl><type><name pos:line="300" pos:column="28">WordList</name> <type:modifier pos:line="300" pos:column="37">*</type:modifier></type><name><name pos:line="300" pos:column="38">keywordlists</name><index pos:line="300" pos:column="50">[]</index></name></decl></param>, <param><decl><type><name pos:line="300" pos:column="54">Accessor</name> <type:modifier pos:line="300" pos:column="63">&amp;</type:modifier></type><name pos:line="300" pos:column="64">styler</name></decl></param>)</parameter_list> <block pos:line="300" pos:column="72">{
	<expr_stmt><expr><call><name pos:line="301" pos:column="9">ColouriseVBDoc</name><argument_list pos:line="301" pos:column="23">(<argument><expr><name pos:line="301" pos:column="24">startPos</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="34">length</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="42">initStyle</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="53">keywordlists</name></expr></argument>, <argument><expr><name pos:line="301" pos:column="67">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="301" pos:column="75">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="304" pos:column="1">static</specifier> <name pos:line="304" pos:column="8">void</name></type> <name pos:line="304" pos:column="13">ColouriseVBScriptDoc</name><parameter_list pos:line="304" pos:column="33">(<param><decl><type><name pos:line="304" pos:column="34">unsigned</name> <name pos:line="304" pos:column="43">int</name></type> <name pos:line="304" pos:column="47">startPos</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="57">int</name></type> <name pos:line="304" pos:column="61">length</name></decl></param>, <param><decl><type><name pos:line="304" pos:column="69">int</name></type> <name pos:line="304" pos:column="73">initStyle</name></decl></param>,
                           <param><decl><type><name pos:line="305" pos:column="28">WordList</name> <type:modifier pos:line="305" pos:column="37">*</type:modifier></type><name><name pos:line="305" pos:column="38">keywordlists</name><index pos:line="305" pos:column="50">[]</index></name></decl></param>, <param><decl><type><name pos:line="305" pos:column="54">Accessor</name> <type:modifier pos:line="305" pos:column="63">&amp;</type:modifier></type><name pos:line="305" pos:column="64">styler</name></decl></param>)</parameter_list> <block pos:line="305" pos:column="72">{
	<expr_stmt><expr><call><name pos:line="306" pos:column="9">ColouriseVBDoc</name><argument_list pos:line="306" pos:column="23">(<argument><expr><name pos:line="306" pos:column="24">startPos</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="34">length</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="42">initStyle</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="53">keywordlists</name></expr></argument>, <argument><expr><name pos:line="306" pos:column="67">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="306" pos:column="75">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="309" pos:column="1">static</specifier> <specifier pos:line="309" pos:column="8">const</specifier> <name pos:line="309" pos:column="14">char</name> <type:modifier pos:line="309" pos:column="19">*</type:modifier> <specifier pos:line="309" pos:column="21">const</specifier></type> <name><name pos:line="309" pos:column="27">vbWordListDesc</name><index pos:line="309" pos:column="41">[]</index></name> <init pos:line="309" pos:column="44">= <expr><block pos:line="309" pos:column="46">{
	<expr><lit:literal type="string" pos:line="310" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="311" pos:column="9">"user1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="312" pos:column="9">"user2"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="313" pos:column="9">"user3"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="314" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="317" pos:column="1">LexerModule</name></type> <name pos:line="317" pos:column="13">lmVB</name><argument_list pos:line="317" pos:column="17">(<argument><expr><name pos:line="317" pos:column="18">SCLEX_VB</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="28">ColouriseVBNetDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="317" pos:column="47">"vb"</lit:literal></expr></argument>, <argument><expr><name pos:line="317" pos:column="53">FoldVBDoc</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="64">vbWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="318" pos:column="1">LexerModule</name></type> <name pos:line="318" pos:column="13">lmVBScript</name><argument_list pos:line="318" pos:column="23">(<argument><expr><name pos:line="318" pos:column="24">SCLEX_VBSCRIPT</name></expr></argument>, <argument><expr><name pos:line="318" pos:column="40">ColouriseVBScriptDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="318" pos:column="62">"vbscript"</lit:literal></expr></argument>, <argument><expr><name pos:line="318" pos:column="74">FoldVBDoc</name></expr></argument>, <argument><expr><name pos:line="318" pos:column="85">vbWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
