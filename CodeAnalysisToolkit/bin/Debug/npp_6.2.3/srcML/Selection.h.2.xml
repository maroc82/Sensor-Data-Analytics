<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\Selection.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file Selection.h
 ** Classes maintaining the selection.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2009 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">SELECTION_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">SELECTION_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef</cpp:directive> <name pos:line="11" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="12" pos:column="1">namespace <name pos:line="12" pos:column="11">Scintilla</name> <block pos:line="12" pos:column="21">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>

<class pos:line="15" pos:column="1">class <name pos:line="15" pos:column="7">SelectionPosition</name> <block pos:line="15" pos:column="25">{<private type="default" pos:line="15" pos:column="26">
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int</name></type> <name pos:line="16" pos:column="13">position</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">int</name></type> <name pos:line="17" pos:column="13">virtualSpace</name></decl>;</decl_stmt>
</private><public pos:line="18" pos:column="1">public:
	<constructor><specifier pos:line="19" pos:column="9">explicit</specifier> <name pos:line="19" pos:column="18">SelectionPosition</name><parameter_list pos:line="19" pos:column="35">(<param><decl><type><name pos:line="19" pos:column="36">int</name></type> <name pos:line="19" pos:column="40">position_</name><init pos:line="19" pos:column="49">=<expr><name pos:line="19" pos:column="50">INVALID_POSITION</name></expr></init></decl></param>, <name pos:line="19" pos:column="68">int</name> <name pos:line="19" pos:column="72">virtualSpace_</name><op:operator pos:line="19" pos:column="85">=</op:operator><lit:literal type="number" pos:line="19" pos:column="86">0</lit:literal>)</parameter_list> <member_list pos:line="19" pos:column="89">: <call><name pos:line="19" pos:column="91">position</name><argument_list pos:line="19" pos:column="99">(<argument><expr><name pos:line="19" pos:column="100">position_</name></expr></argument>)</argument_list></call><op:operator pos:line="19" pos:column="110">,</op:operator> <call><name pos:line="19" pos:column="112">virtualSpace</name><argument_list pos:line="19" pos:column="124">(<argument><expr><name pos:line="19" pos:column="125">virtualSpace_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="19" pos:column="140">{
		<expr_stmt><expr><call><name pos:line="20" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">virtualSpace</name> <op:operator pos:line="20" pos:column="46">&lt;</op:operator> <lit:literal type="number" pos:line="20" pos:column="48">800000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name pos:line="21" pos:column="21">virtualSpace</name> <op:operator pos:line="21" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="21" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="21" pos:column="38">
			<expr_stmt><expr><name pos:line="22" pos:column="25">virtualSpace</name> <op:operator pos:line="22" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="22" pos:column="40">0</lit:literal></expr>;</expr_stmt></then></if>
	}</block></constructor>
	<function><type><name pos:line="24" pos:column="9">void</name></type> <name pos:line="24" pos:column="14">Reset</name><parameter_list pos:line="24" pos:column="19">()</parameter_list> <block pos:line="24" pos:column="22">{
		<expr_stmt><expr><name pos:line="25" pos:column="17">position</name> <op:operator pos:line="25" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="25" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="26" pos:column="17">virtualSpace</name> <op:operator pos:line="26" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="26" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	}</block></function>
	<function_decl><type><name pos:line="28" pos:column="9">void</name></type> <name pos:line="28" pos:column="14">MoveForInsertDelete</name><parameter_list pos:line="28" pos:column="33">(<param><decl><type><name pos:line="28" pos:column="34">bool</name></type> <name pos:line="28" pos:column="39">insertion</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="50">int</name></type> <name pos:line="28" pos:column="54">startChange</name></decl></param>, <param><decl><type><name pos:line="28" pos:column="67">int</name></type> <name pos:line="28" pos:column="71">length</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="29" pos:column="9">bool</name></type> <name pos:line="29" pos:column="14">operator ==</name><parameter_list pos:line="29" pos:column="25">(<param><decl><type><specifier pos:line="29" pos:column="26">const</specifier> <name pos:line="29" pos:column="32">SelectionPosition</name> <type:modifier pos:line="29" pos:column="50">&amp;</type:modifier></type><name pos:line="29" pos:column="51">other</name></decl></param>)</parameter_list> <specifier pos:line="29" pos:column="58">const</specifier> <block pos:line="29" pos:column="64">{
		<return pos:line="30" pos:column="17">return <expr><name pos:line="30" pos:column="24">position</name> <op:operator pos:line="30" pos:column="33">==</op:operator> <name><name pos:line="30" pos:column="36">other</name><op:operator pos:line="30" pos:column="41">.</op:operator><name pos:line="30" pos:column="42">position</name></name> <op:operator pos:line="30" pos:column="51">&amp;&amp;</op:operator> <name pos:line="30" pos:column="54">virtualSpace</name> <op:operator pos:line="30" pos:column="67">==</op:operator> <name><name pos:line="30" pos:column="70">other</name><op:operator pos:line="30" pos:column="75">.</op:operator><name pos:line="30" pos:column="76">virtualSpace</name></name></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="32" pos:column="9">bool</name></type> <name pos:line="32" pos:column="14">operator &lt;</name><parameter_list pos:line="32" pos:column="24">(<param><decl><type><specifier pos:line="32" pos:column="25">const</specifier> <name pos:line="32" pos:column="31">SelectionPosition</name> <type:modifier pos:line="32" pos:column="49">&amp;</type:modifier></type><name pos:line="32" pos:column="50">other</name></decl></param>)</parameter_list> <specifier pos:line="32" pos:column="57">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="33" pos:column="9">bool</name></type> <name pos:line="33" pos:column="14">operator &gt;</name><parameter_list pos:line="33" pos:column="24">(<param><decl><type><specifier pos:line="33" pos:column="25">const</specifier> <name pos:line="33" pos:column="31">SelectionPosition</name> <type:modifier pos:line="33" pos:column="49">&amp;</type:modifier></type><name pos:line="33" pos:column="50">other</name></decl></param>)</parameter_list> <specifier pos:line="33" pos:column="57">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="34" pos:column="9">bool</name></type> <name pos:line="34" pos:column="14">operator &lt;=</name><parameter_list pos:line="34" pos:column="25">(<param><decl><type><specifier pos:line="34" pos:column="26">const</specifier> <name pos:line="34" pos:column="32">SelectionPosition</name> <type:modifier pos:line="34" pos:column="50">&amp;</type:modifier></type><name pos:line="34" pos:column="51">other</name></decl></param>)</parameter_list> <specifier pos:line="34" pos:column="58">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="35" pos:column="9">bool</name></type> <name pos:line="35" pos:column="14">operator &gt;=</name><parameter_list pos:line="35" pos:column="25">(<param><decl><type><specifier pos:line="35" pos:column="26">const</specifier> <name pos:line="35" pos:column="32">SelectionPosition</name> <type:modifier pos:line="35" pos:column="50">&amp;</type:modifier></type><name pos:line="35" pos:column="51">other</name></decl></param>)</parameter_list> <specifier pos:line="35" pos:column="58">const</specifier>;</function_decl>
	<function><type><name pos:line="36" pos:column="9">int</name></type> <name pos:line="36" pos:column="13">Position</name><parameter_list pos:line="36" pos:column="21">()</parameter_list> <specifier pos:line="36" pos:column="24">const</specifier> <block pos:line="36" pos:column="30">{
		<return pos:line="37" pos:column="17">return <expr><name pos:line="37" pos:column="24">position</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="39" pos:column="9">void</name></type> <name pos:line="39" pos:column="14">SetPosition</name><parameter_list pos:line="39" pos:column="25">(<param><decl><type><name pos:line="39" pos:column="26">int</name></type> <name pos:line="39" pos:column="30">position_</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="41">{
		<expr_stmt><expr><name pos:line="40" pos:column="17">position</name> <op:operator pos:line="40" pos:column="26">=</op:operator> <name pos:line="40" pos:column="28">position_</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="41" pos:column="17">virtualSpace</name> <op:operator pos:line="41" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="41" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="43" pos:column="9">int</name></type> <name pos:line="43" pos:column="13">VirtualSpace</name><parameter_list pos:line="43" pos:column="25">()</parameter_list> <specifier pos:line="43" pos:column="28">const</specifier> <block pos:line="43" pos:column="34">{
		<return pos:line="44" pos:column="17">return <expr><name pos:line="44" pos:column="24">virtualSpace</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="46" pos:column="9">void</name></type> <name pos:line="46" pos:column="14">SetVirtualSpace</name><parameter_list pos:line="46" pos:column="29">(<param><decl><type><name pos:line="46" pos:column="30">int</name></type> <name pos:line="46" pos:column="34">virtualSpace_</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="47" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">virtualSpace_</name> <op:operator pos:line="47" pos:column="47">&lt;</op:operator> <lit:literal type="number" pos:line="47" pos:column="49">800000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name pos:line="48" pos:column="21">virtualSpace_</name> <op:operator pos:line="48" pos:column="35">&gt;=</op:operator> <lit:literal type="number" pos:line="48" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="48" pos:column="40">
			<expr_stmt><expr><name pos:line="49" pos:column="25">virtualSpace</name> <op:operator pos:line="49" pos:column="38">=</op:operator> <name pos:line="49" pos:column="40">virtualSpace_</name></expr>;</expr_stmt></then></if>
	}</block></function>
	<function><type><name pos:line="51" pos:column="9">void</name></type> <name pos:line="51" pos:column="14">Add</name><parameter_list pos:line="51" pos:column="17">(<param><decl><type><name pos:line="51" pos:column="18">int</name></type> <name pos:line="51" pos:column="22">increment</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="33">{
		<expr_stmt><expr><name pos:line="52" pos:column="17">position</name> <op:operator pos:line="52" pos:column="26">=</op:operator> <name pos:line="52" pos:column="28">position</name> <op:operator pos:line="52" pos:column="37">+</op:operator> <name pos:line="52" pos:column="39">increment</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="54" pos:column="9">bool</name></type> <name pos:line="54" pos:column="14">IsValid</name><parameter_list pos:line="54" pos:column="21">()</parameter_list> <specifier pos:line="54" pos:column="24">const</specifier> <block pos:line="54" pos:column="30">{
		<return pos:line="55" pos:column="17">return <expr><name pos:line="55" pos:column="24">position</name> <op:operator pos:line="55" pos:column="33">&gt;=</op:operator> <lit:literal type="number" pos:line="55" pos:column="36">0</lit:literal></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<comment type="line" pos:line="59" pos:column="1">// Ordered range to make drawing simpler</comment>
<struct pos:line="60" pos:column="1">struct <name pos:line="60" pos:column="8">SelectionSegment</name> <block pos:line="60" pos:column="25">{<public type="default" pos:line="60" pos:column="26">
	<decl_stmt><decl><type><name pos:line="61" pos:column="9">SelectionPosition</name></type> <name pos:line="61" pos:column="27">start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="62" pos:column="9">SelectionPosition</name></type> <name pos:line="62" pos:column="27">end</name></decl>;</decl_stmt>
	<constructor><name pos:line="63" pos:column="9">SelectionSegment</name><parameter_list pos:line="63" pos:column="25">()</parameter_list> <member_list pos:line="63" pos:column="28">: <call><name pos:line="63" pos:column="30">start</name><argument_list pos:line="63" pos:column="35">()</argument_list></call><op:operator pos:line="63" pos:column="37">,</op:operator> <call><name pos:line="63" pos:column="39">end</name><argument_list pos:line="63" pos:column="42">()</argument_list></call> </member_list><block pos:line="63" pos:column="45">{
	}</block></constructor>
	<constructor><name pos:line="65" pos:column="9">SelectionSegment</name><parameter_list pos:line="65" pos:column="25">(<param><decl><type><name pos:line="65" pos:column="26">SelectionPosition</name></type> <name pos:line="65" pos:column="44">a</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="47">SelectionPosition</name></type> <name pos:line="65" pos:column="65">b</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="68">{
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name pos:line="66" pos:column="21">a</name> <op:operator pos:line="66" pos:column="23">&lt;</op:operator> <name pos:line="66" pos:column="25">b</name></expr>)</condition><then pos:line="66" pos:column="27"> <block pos:line="66" pos:column="28">{
			<expr_stmt><expr><name pos:line="67" pos:column="25">start</name> <op:operator pos:line="67" pos:column="31">=</op:operator> <name pos:line="67" pos:column="33">a</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="68" pos:column="25">end</name> <op:operator pos:line="68" pos:column="29">=</op:operator> <name pos:line="68" pos:column="31">b</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="69" pos:column="19">else <block pos:line="69" pos:column="24">{
			<expr_stmt><expr><name pos:line="70" pos:column="25">start</name> <op:operator pos:line="70" pos:column="31">=</op:operator> <name pos:line="70" pos:column="33">b</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="71" pos:column="25">end</name> <op:operator pos:line="71" pos:column="29">=</op:operator> <name pos:line="71" pos:column="31">a</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
	<function><type><name pos:line="74" pos:column="9">bool</name></type> <name pos:line="74" pos:column="14">Empty</name><parameter_list pos:line="74" pos:column="19">()</parameter_list> <specifier pos:line="74" pos:column="22">const</specifier> <block pos:line="74" pos:column="28">{
		<return pos:line="75" pos:column="17">return <expr><name pos:line="75" pos:column="24">start</name> <op:operator pos:line="75" pos:column="30">==</op:operator> <name pos:line="75" pos:column="33">end</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="77" pos:column="9">void</name></type> <name pos:line="77" pos:column="14">Extend</name><parameter_list pos:line="77" pos:column="20">(<param><decl><type><name pos:line="77" pos:column="21">SelectionPosition</name></type> <name pos:line="77" pos:column="39">p</name></decl></param>)</parameter_list> <block pos:line="77" pos:column="42">{
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name pos:line="78" pos:column="21">start</name> <op:operator pos:line="78" pos:column="27">&gt;</op:operator> <name pos:line="78" pos:column="29">p</name></expr>)</condition><then pos:line="78" pos:column="31">
			<expr_stmt><expr><name pos:line="79" pos:column="25">start</name> <op:operator pos:line="79" pos:column="31">=</op:operator> <name pos:line="79" pos:column="33">p</name></expr>;</expr_stmt></then></if>
		<if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name pos:line="80" pos:column="21">end</name> <op:operator pos:line="80" pos:column="25">&lt;</op:operator> <name pos:line="80" pos:column="27">p</name></expr>)</condition><then pos:line="80" pos:column="29">
			<expr_stmt><expr><name pos:line="81" pos:column="25">end</name> <op:operator pos:line="81" pos:column="29">=</op:operator> <name pos:line="81" pos:column="31">p</name></expr>;</expr_stmt></then></if>
	}</block></function>
</public>}</block>;</struct>

<struct pos:line="85" pos:column="1">struct <name pos:line="85" pos:column="8">SelectionRange</name> <block pos:line="85" pos:column="23">{<public type="default" pos:line="85" pos:column="24">
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">SelectionPosition</name></type> <name pos:line="86" pos:column="27">caret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">SelectionPosition</name></type> <name pos:line="87" pos:column="27">anchor</name></decl>;</decl_stmt>

	<constructor><name pos:line="89" pos:column="9">SelectionRange</name><parameter_list pos:line="89" pos:column="23">()</parameter_list> <member_list pos:line="89" pos:column="26">: <call><name pos:line="89" pos:column="28">caret</name><argument_list pos:line="89" pos:column="33">()</argument_list></call><op:operator pos:line="89" pos:column="35">,</op:operator> <call><name pos:line="89" pos:column="37">anchor</name><argument_list pos:line="89" pos:column="43">()</argument_list></call> </member_list><block pos:line="89" pos:column="46">{
	}</block></constructor>
	<constructor><name pos:line="91" pos:column="9">SelectionRange</name><parameter_list pos:line="91" pos:column="23">(<param><decl><type><name pos:line="91" pos:column="24">SelectionPosition</name></type> <name pos:line="91" pos:column="42">single</name></decl></param>)</parameter_list> <member_list pos:line="91" pos:column="50">: <call><name pos:line="91" pos:column="52">caret</name><argument_list pos:line="91" pos:column="57">(<argument><expr><name pos:line="91" pos:column="58">single</name></expr></argument>)</argument_list></call><op:operator pos:line="91" pos:column="65">,</op:operator> <call><name pos:line="91" pos:column="67">anchor</name><argument_list pos:line="91" pos:column="73">(<argument><expr><name pos:line="91" pos:column="74">single</name></expr></argument>)</argument_list></call> </member_list><block pos:line="91" pos:column="82">{
	}</block></constructor>
	<constructor><name pos:line="93" pos:column="9">SelectionRange</name><parameter_list pos:line="93" pos:column="23">(<param><decl><type><name pos:line="93" pos:column="24">int</name></type> <name pos:line="93" pos:column="28">single</name></decl></param>)</parameter_list> <member_list pos:line="93" pos:column="36">: <call><name pos:line="93" pos:column="38">caret</name><argument_list pos:line="93" pos:column="43">(<argument><expr><name pos:line="93" pos:column="44">single</name></expr></argument>)</argument_list></call><op:operator pos:line="93" pos:column="51">,</op:operator> <call><name pos:line="93" pos:column="53">anchor</name><argument_list pos:line="93" pos:column="59">(<argument><expr><name pos:line="93" pos:column="60">single</name></expr></argument>)</argument_list></call> </member_list><block pos:line="93" pos:column="68">{
	}</block></constructor>
	<constructor><name pos:line="95" pos:column="9">SelectionRange</name><parameter_list pos:line="95" pos:column="23">(<param><decl><type><name pos:line="95" pos:column="24">SelectionPosition</name></type> <name pos:line="95" pos:column="42">caret_</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="50">SelectionPosition</name></type> <name pos:line="95" pos:column="68">anchor_</name></decl></param>)</parameter_list> <member_list pos:line="95" pos:column="77">: <call><name pos:line="95" pos:column="79">caret</name><argument_list pos:line="95" pos:column="84">(<argument><expr><name pos:line="95" pos:column="85">caret_</name></expr></argument>)</argument_list></call><op:operator pos:line="95" pos:column="92">,</op:operator> <call><name pos:line="95" pos:column="94">anchor</name><argument_list pos:line="95" pos:column="100">(<argument><expr><name pos:line="95" pos:column="101">anchor_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="95" pos:column="110">{
	}</block></constructor>
	<constructor><name pos:line="97" pos:column="9">SelectionRange</name><parameter_list pos:line="97" pos:column="23">(<param><decl><type><name pos:line="97" pos:column="24">int</name></type> <name pos:line="97" pos:column="28">caret_</name></decl></param>, <param><decl><type><name pos:line="97" pos:column="36">int</name></type> <name pos:line="97" pos:column="40">anchor_</name></decl></param>)</parameter_list> <member_list pos:line="97" pos:column="49">: <call><name pos:line="97" pos:column="51">caret</name><argument_list pos:line="97" pos:column="56">(<argument><expr><name pos:line="97" pos:column="57">caret_</name></expr></argument>)</argument_list></call><op:operator pos:line="97" pos:column="64">,</op:operator> <call><name pos:line="97" pos:column="66">anchor</name><argument_list pos:line="97" pos:column="72">(<argument><expr><name pos:line="97" pos:column="73">anchor_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="97" pos:column="82">{
	}</block></constructor>
	<function><type><name pos:line="99" pos:column="9">bool</name></type> <name pos:line="99" pos:column="14">Empty</name><parameter_list pos:line="99" pos:column="19">()</parameter_list> <specifier pos:line="99" pos:column="22">const</specifier> <block pos:line="99" pos:column="28">{
		<return pos:line="100" pos:column="17">return <expr><name pos:line="100" pos:column="24">anchor</name> <op:operator pos:line="100" pos:column="31">==</op:operator> <name pos:line="100" pos:column="34">caret</name></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="102" pos:column="9">int</name></type> <name pos:line="102" pos:column="13">Length</name><parameter_list pos:line="102" pos:column="19">()</parameter_list> <specifier pos:line="102" pos:column="22">const</specifier>;</function_decl>
	<comment type="line" pos:line="103" pos:column="9">// int Width() const;	// Like Length but takes virtual space into account</comment>
	<function><type><name pos:line="104" pos:column="9">bool</name></type> <name pos:line="104" pos:column="14">operator ==</name><parameter_list pos:line="104" pos:column="25">(<param><decl><type><specifier pos:line="104" pos:column="26">const</specifier> <name pos:line="104" pos:column="32">SelectionRange</name> <type:modifier pos:line="104" pos:column="47">&amp;</type:modifier></type><name pos:line="104" pos:column="48">other</name></decl></param>)</parameter_list> <specifier pos:line="104" pos:column="55">const</specifier> <block pos:line="104" pos:column="61">{
		<return pos:line="105" pos:column="17">return <expr><name pos:line="105" pos:column="24">caret</name> <op:operator pos:line="105" pos:column="30">==</op:operator> <name><name pos:line="105" pos:column="33">other</name><op:operator pos:line="105" pos:column="38">.</op:operator><name pos:line="105" pos:column="39">caret</name></name> <op:operator pos:line="105" pos:column="45">&amp;&amp;</op:operator> <name pos:line="105" pos:column="48">anchor</name> <op:operator pos:line="105" pos:column="55">==</op:operator> <name><name pos:line="105" pos:column="58">other</name><op:operator pos:line="105" pos:column="63">.</op:operator><name pos:line="105" pos:column="64">anchor</name></name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="107" pos:column="9">bool</name></type> <name pos:line="107" pos:column="14">operator &lt;</name><parameter_list pos:line="107" pos:column="24">(<param><decl><type><specifier pos:line="107" pos:column="25">const</specifier> <name pos:line="107" pos:column="31">SelectionRange</name> <type:modifier pos:line="107" pos:column="46">&amp;</type:modifier></type><name pos:line="107" pos:column="47">other</name></decl></param>)</parameter_list> <specifier pos:line="107" pos:column="54">const</specifier> <block pos:line="107" pos:column="60">{
		<return pos:line="108" pos:column="17">return <expr><name pos:line="108" pos:column="24">caret</name> <op:operator pos:line="108" pos:column="30">&lt;</op:operator> <name><name pos:line="108" pos:column="32">other</name><op:operator pos:line="108" pos:column="37">.</op:operator><name pos:line="108" pos:column="38">caret</name></name> <op:operator pos:line="108" pos:column="44">||</op:operator> <op:operator pos:line="108" pos:column="47">(</op:operator><op:operator pos:line="108" pos:column="48">(</op:operator><name pos:line="108" pos:column="49">caret</name> <op:operator pos:line="108" pos:column="55">==</op:operator> <name><name pos:line="108" pos:column="58">other</name><op:operator pos:line="108" pos:column="63">.</op:operator><name pos:line="108" pos:column="64">caret</name></name><op:operator pos:line="108" pos:column="69">)</op:operator> <op:operator pos:line="108" pos:column="71">&amp;&amp;</op:operator> <op:operator pos:line="108" pos:column="74">(</op:operator><name pos:line="108" pos:column="75">anchor</name> <op:operator pos:line="108" pos:column="82">&lt;</op:operator> <name><name pos:line="108" pos:column="84">other</name><op:operator pos:line="108" pos:column="89">.</op:operator><name pos:line="108" pos:column="90">anchor</name></name><op:operator pos:line="108" pos:column="96">)</op:operator><op:operator pos:line="108" pos:column="97">)</op:operator></expr>;</return>
	}</block></function>
	<function><type><name pos:line="110" pos:column="9">void</name></type> <name pos:line="110" pos:column="14">Reset</name><parameter_list pos:line="110" pos:column="19">()</parameter_list> <block pos:line="110" pos:column="22">{
		<expr_stmt><expr><call><name><name pos:line="111" pos:column="17">anchor</name><op:operator pos:line="111" pos:column="23">.</op:operator><name pos:line="111" pos:column="24">Reset</name></name><argument_list pos:line="111" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="112" pos:column="17">caret</name><op:operator pos:line="112" pos:column="22">.</op:operator><name pos:line="112" pos:column="23">Reset</name></name><argument_list pos:line="112" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="114" pos:column="9">void</name></type> <name pos:line="114" pos:column="14">ClearVirtualSpace</name><parameter_list pos:line="114" pos:column="31">()</parameter_list> <block pos:line="114" pos:column="34">{
		<expr_stmt><expr><call><name><name pos:line="115" pos:column="17">anchor</name><op:operator pos:line="115" pos:column="23">.</op:operator><name pos:line="115" pos:column="24">SetVirtualSpace</name></name><argument_list pos:line="115" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="115" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="116" pos:column="17">caret</name><op:operator pos:line="116" pos:column="22">.</op:operator><name pos:line="116" pos:column="23">SetVirtualSpace</name></name><argument_list pos:line="116" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="116" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function_decl><type><name pos:line="118" pos:column="9">bool</name></type> <name pos:line="118" pos:column="14">Contains</name><parameter_list pos:line="118" pos:column="22">(<param><decl><type><name pos:line="118" pos:column="23">int</name></type> <name pos:line="118" pos:column="27">pos</name></decl></param>)</parameter_list> <specifier pos:line="118" pos:column="32">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="119" pos:column="9">bool</name></type> <name pos:line="119" pos:column="14">Contains</name><parameter_list pos:line="119" pos:column="22">(<param><decl><type><name pos:line="119" pos:column="23">SelectionPosition</name></type> <name pos:line="119" pos:column="41">sp</name></decl></param>)</parameter_list> <specifier pos:line="119" pos:column="45">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="120" pos:column="9">bool</name></type> <name pos:line="120" pos:column="14">ContainsCharacter</name><parameter_list pos:line="120" pos:column="31">(<param><decl><type><name pos:line="120" pos:column="32">int</name></type> <name pos:line="120" pos:column="36">posCharacter</name></decl></param>)</parameter_list> <specifier pos:line="120" pos:column="50">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="121" pos:column="9">SelectionSegment</name></type> <name pos:line="121" pos:column="26">Intersect</name><parameter_list pos:line="121" pos:column="35">(<param><decl><type><name pos:line="121" pos:column="36">SelectionSegment</name></type> <name pos:line="121" pos:column="53">check</name></decl></param>)</parameter_list> <specifier pos:line="121" pos:column="60">const</specifier>;</function_decl>
	<function><type><name pos:line="122" pos:column="9">SelectionPosition</name></type> <name pos:line="122" pos:column="27">Start</name><parameter_list pos:line="122" pos:column="32">()</parameter_list> <specifier pos:line="122" pos:column="35">const</specifier> <block pos:line="122" pos:column="41">{
		<return pos:line="123" pos:column="17">return <expr><op:operator pos:line="123" pos:column="24">(</op:operator><name pos:line="123" pos:column="25">anchor</name> <op:operator pos:line="123" pos:column="32">&lt;</op:operator> <name pos:line="123" pos:column="34">caret</name><op:operator pos:line="123" pos:column="39">)</op:operator> <op:operator pos:line="123" pos:column="41">?</op:operator> <name pos:line="123" pos:column="43">anchor</name> <op:operator pos:line="123" pos:column="50">:</op:operator> <name pos:line="123" pos:column="52">caret</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="125" pos:column="9">SelectionPosition</name></type> <name pos:line="125" pos:column="27">End</name><parameter_list pos:line="125" pos:column="30">()</parameter_list> <specifier pos:line="125" pos:column="33">const</specifier> <block pos:line="125" pos:column="39">{
		<return pos:line="126" pos:column="17">return <expr><op:operator pos:line="126" pos:column="24">(</op:operator><name pos:line="126" pos:column="25">anchor</name> <op:operator pos:line="126" pos:column="32">&lt;</op:operator> <name pos:line="126" pos:column="34">caret</name><op:operator pos:line="126" pos:column="39">)</op:operator> <op:operator pos:line="126" pos:column="41">?</op:operator> <name pos:line="126" pos:column="43">caret</name> <op:operator pos:line="126" pos:column="49">:</op:operator> <name pos:line="126" pos:column="51">anchor</name></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="128" pos:column="9">bool</name></type> <name pos:line="128" pos:column="14">Trim</name><parameter_list pos:line="128" pos:column="18">(<param><decl><type><name pos:line="128" pos:column="19">SelectionRange</name></type> <name pos:line="128" pos:column="34">range</name></decl></param>)</parameter_list>;</function_decl>
	<comment type="line" pos:line="129" pos:column="9">// If range is all virtual collapse to start of virtual space</comment>
	<function_decl><type><name pos:line="130" pos:column="9">void</name></type> <name pos:line="130" pos:column="14">MinimizeVirtualSpace</name><parameter_list pos:line="130" pos:column="34">()</parameter_list>;</function_decl>
</public>}</block>;</struct>

<class pos:line="133" pos:column="1">class <name pos:line="133" pos:column="7">Selection</name> <block pos:line="133" pos:column="17">{<private type="default" pos:line="133" pos:column="18">
	<decl_stmt><decl><type><name><name pos:line="134" pos:column="9">std</name><op:operator pos:line="134" pos:column="12">::</op:operator><name><name pos:line="134" pos:column="14">vector</name><argument_list pos:line="134" pos:column="20">&lt;<argument><expr><name pos:line="134" pos:column="21">SelectionRange</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="134" pos:column="37">ranges</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="135" pos:column="9">std</name><op:operator pos:line="135" pos:column="12">::</op:operator><name><name pos:line="135" pos:column="14">vector</name><argument_list pos:line="135" pos:column="20">&lt;<argument><expr><name pos:line="135" pos:column="21">SelectionRange</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="135" pos:column="37">rangesSaved</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">SelectionRange</name></type> <name pos:line="136" pos:column="24">rangeRectangular</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">size_t</name></type> <name pos:line="137" pos:column="16">mainRange</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="138" pos:column="9">bool</name></type> <name pos:line="138" pos:column="14">moveExtends</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">bool</name></type> <name pos:line="139" pos:column="14">tentativeMain</name></decl>;</decl_stmt>
</private><public pos:line="140" pos:column="1">public:
	<enum pos:line="141" pos:column="9">enum <name pos:line="141" pos:column="14">selTypes</name> <block pos:line="141" pos:column="23">{ <decl><name pos:line="141" pos:column="25">noSel</name></decl><op:operator pos:line="141" pos:column="30">,</op:operator> <decl><name pos:line="141" pos:column="32">selStream</name></decl><op:operator pos:line="141" pos:column="41">,</op:operator> <decl><name pos:line="141" pos:column="43">selRectangle</name></decl><op:operator pos:line="141" pos:column="55">,</op:operator> <decl><name pos:line="141" pos:column="57">selLines</name></decl><op:operator pos:line="141" pos:column="65">,</op:operator> <decl><name pos:line="141" pos:column="67">selThin</name></decl> }</block>;</enum>
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">selTypes</name></type> <name pos:line="142" pos:column="18">selType</name></decl>;</decl_stmt>

	<constructor_decl><name pos:line="144" pos:column="9">Selection</name><parameter_list pos:line="144" pos:column="18">()</parameter_list>;</constructor_decl>
	<destructor_decl><name pos:line="145" pos:column="9">~<name pos:line="145" pos:column="10">Selection</name></name><parameter_list pos:line="145" pos:column="19">()</parameter_list>;</destructor_decl>
	<function_decl><type><name pos:line="146" pos:column="9">bool</name></type> <name pos:line="146" pos:column="14">IsRectangular</name><parameter_list pos:line="146" pos:column="27">()</parameter_list> <specifier pos:line="146" pos:column="30">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="147" pos:column="9">int</name></type> <name pos:line="147" pos:column="13">MainCaret</name><parameter_list pos:line="147" pos:column="22">()</parameter_list> <specifier pos:line="147" pos:column="25">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="148" pos:column="9">int</name></type> <name pos:line="148" pos:column="13">MainAnchor</name><parameter_list pos:line="148" pos:column="23">()</parameter_list> <specifier pos:line="148" pos:column="26">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="149" pos:column="9">SelectionRange</name> <type:modifier pos:line="149" pos:column="24">&amp;</type:modifier></type><name pos:line="149" pos:column="25">Rectangular</name><parameter_list pos:line="149" pos:column="36">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="150" pos:column="9">SelectionSegment</name></type> <name pos:line="150" pos:column="26">Limits</name><parameter_list pos:line="150" pos:column="32">()</parameter_list> <specifier pos:line="150" pos:column="35">const</specifier>;</function_decl>
	<comment type="line" pos:line="151" pos:column="9">// This is for when you want to move the caret in response to a</comment>
	<comment type="line" pos:line="152" pos:column="9">// user direction command - for rectangular selections, use the range</comment>
	<comment type="line" pos:line="153" pos:column="9">// that covers all selected text otherwise return the main selection.</comment>
	<function_decl><type><name pos:line="154" pos:column="9">SelectionSegment</name></type> <name pos:line="154" pos:column="26">LimitsForRectangularElseMain</name><parameter_list pos:line="154" pos:column="54">()</parameter_list> <specifier pos:line="154" pos:column="57">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="155" pos:column="9">size_t</name></type> <name pos:line="155" pos:column="16">Count</name><parameter_list pos:line="155" pos:column="21">()</parameter_list> <specifier pos:line="155" pos:column="24">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="156" pos:column="9">size_t</name></type> <name pos:line="156" pos:column="16">Main</name><parameter_list pos:line="156" pos:column="20">()</parameter_list> <specifier pos:line="156" pos:column="23">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="157" pos:column="9">void</name></type> <name pos:line="157" pos:column="14">SetMain</name><parameter_list pos:line="157" pos:column="21">(<param><decl><type><name pos:line="157" pos:column="22">size_t</name></type> <name pos:line="157" pos:column="29">r</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="158" pos:column="9">SelectionRange</name> <type:modifier pos:line="158" pos:column="24">&amp;</type:modifier></type><name pos:line="158" pos:column="25">Range</name><parameter_list pos:line="158" pos:column="30">(<param><decl><type><name pos:line="158" pos:column="31">size_t</name></type> <name pos:line="158" pos:column="38">r</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="159" pos:column="9">SelectionRange</name> <type:modifier pos:line="159" pos:column="24">&amp;</type:modifier></type><name pos:line="159" pos:column="25">RangeMain</name><parameter_list pos:line="159" pos:column="34">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="160" pos:column="9">bool</name></type> <name pos:line="160" pos:column="14">MoveExtends</name><parameter_list pos:line="160" pos:column="25">()</parameter_list> <specifier pos:line="160" pos:column="28">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="161" pos:column="9">void</name></type> <name pos:line="161" pos:column="14">SetMoveExtends</name><parameter_list pos:line="161" pos:column="28">(<param><decl><type><name pos:line="161" pos:column="29">bool</name></type> <name pos:line="161" pos:column="34">moveExtends_</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="162" pos:column="9">bool</name></type> <name pos:line="162" pos:column="14">Empty</name><parameter_list pos:line="162" pos:column="19">()</parameter_list> <specifier pos:line="162" pos:column="22">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="163" pos:column="9">SelectionPosition</name></type> <name pos:line="163" pos:column="27">Last</name><parameter_list pos:line="163" pos:column="31">()</parameter_list> <specifier pos:line="163" pos:column="34">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="164" pos:column="9">int</name></type> <name pos:line="164" pos:column="13">Length</name><parameter_list pos:line="164" pos:column="19">()</parameter_list> <specifier pos:line="164" pos:column="22">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="165" pos:column="9">void</name></type> <name pos:line="165" pos:column="14">MovePositions</name><parameter_list pos:line="165" pos:column="27">(<param><decl><type><name pos:line="165" pos:column="28">bool</name></type> <name pos:line="165" pos:column="33">insertion</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="44">int</name></type> <name pos:line="165" pos:column="48">startChange</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="61">int</name></type> <name pos:line="165" pos:column="65">length</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="166" pos:column="9">void</name></type> <name pos:line="166" pos:column="14">TrimSelection</name><parameter_list pos:line="166" pos:column="27">(<param><decl><type><name pos:line="166" pos:column="28">SelectionRange</name></type> <name pos:line="166" pos:column="43">range</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="167" pos:column="9">void</name></type> <name pos:line="167" pos:column="14">SetSelection</name><parameter_list pos:line="167" pos:column="26">(<param><decl><type><name pos:line="167" pos:column="27">SelectionRange</name></type> <name pos:line="167" pos:column="42">range</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="168" pos:column="9">void</name></type> <name pos:line="168" pos:column="14">AddSelection</name><parameter_list pos:line="168" pos:column="26">(<param><decl><type><name pos:line="168" pos:column="27">SelectionRange</name></type> <name pos:line="168" pos:column="42">range</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="169" pos:column="9">void</name></type> <name pos:line="169" pos:column="14">AddSelectionWithoutTrim</name><parameter_list pos:line="169" pos:column="37">(<param><decl><type><name pos:line="169" pos:column="38">SelectionRange</name></type> <name pos:line="169" pos:column="53">range</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="170" pos:column="9">void</name></type> <name pos:line="170" pos:column="14">TentativeSelection</name><parameter_list pos:line="170" pos:column="32">(<param><decl><type><name pos:line="170" pos:column="33">SelectionRange</name></type> <name pos:line="170" pos:column="48">range</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="171" pos:column="9">void</name></type> <name pos:line="171" pos:column="14">CommitTentative</name><parameter_list pos:line="171" pos:column="29">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="172" pos:column="9">int</name></type> <name pos:line="172" pos:column="13">CharacterInSelection</name><parameter_list pos:line="172" pos:column="33">(<param><decl><type><name pos:line="172" pos:column="34">int</name></type> <name pos:line="172" pos:column="38">posCharacter</name></decl></param>)</parameter_list> <specifier pos:line="172" pos:column="52">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="173" pos:column="9">int</name></type> <name pos:line="173" pos:column="13">InSelectionForEOL</name><parameter_list pos:line="173" pos:column="30">(<param><decl><type><name pos:line="173" pos:column="31">int</name></type> <name pos:line="173" pos:column="35">pos</name></decl></param>)</parameter_list> <specifier pos:line="173" pos:column="40">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="174" pos:column="9">int</name></type> <name pos:line="174" pos:column="13">VirtualSpaceFor</name><parameter_list pos:line="174" pos:column="28">(<param><decl><type><name pos:line="174" pos:column="29">int</name></type> <name pos:line="174" pos:column="33">pos</name></decl></param>)</parameter_list> <specifier pos:line="174" pos:column="38">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="175" pos:column="9">void</name></type> <name pos:line="175" pos:column="14">Clear</name><parameter_list pos:line="175" pos:column="19">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="176" pos:column="9">void</name></type> <name pos:line="176" pos:column="14">RemoveDuplicates</name><parameter_list pos:line="176" pos:column="30">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="177" pos:column="9">void</name></type> <name pos:line="177" pos:column="14">RotateMain</name><parameter_list pos:line="177" pos:column="24">()</parameter_list>;</function_decl>
	<function><type><name pos:line="178" pos:column="9">bool</name></type> <name pos:line="178" pos:column="14">Tentative</name><parameter_list pos:line="178" pos:column="23">()</parameter_list> <specifier pos:line="178" pos:column="26">const</specifier> <block pos:line="178" pos:column="32">{ <return pos:line="178" pos:column="34">return <expr><name pos:line="178" pos:column="41">tentativeMain</name></expr>;</return> }</block></function>
	<function><type><name><name pos:line="179" pos:column="9">std</name><op:operator pos:line="179" pos:column="12">::</op:operator><name><name pos:line="179" pos:column="14">vector</name><argument_list pos:line="179" pos:column="20">&lt;<argument><expr><name pos:line="179" pos:column="21">SelectionRange</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="179" pos:column="37">RangesCopy</name><parameter_list pos:line="179" pos:column="47">()</parameter_list> <specifier pos:line="179" pos:column="50">const</specifier> <block pos:line="179" pos:column="56">{
		<return pos:line="180" pos:column="17">return <expr><name pos:line="180" pos:column="24">ranges</name></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<cpp:ifdef pos:line="184" pos:column="1">#<cpp:directive pos:line="184" pos:column="2">ifdef</cpp:directive> <name pos:line="184" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="186" pos:column="1">#<cpp:directive pos:line="186" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="188" pos:column="1">#<cpp:directive pos:line="188" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
