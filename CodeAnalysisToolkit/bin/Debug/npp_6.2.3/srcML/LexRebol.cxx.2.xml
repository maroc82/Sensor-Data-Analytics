<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexRebol.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexRebol.cxx
 ** Lexer for REBOL.
 ** Written by Pascal Hurni, inspired from LexLua by Paul Winwood &amp; Marcos E. Wurzius &amp; Philippe Lhoste
 **
 ** History:
 **		2005-04-07	First release.
 **		2005-04-10	Closing parens and brackets go now in default style
 **					String and comment nesting should be more safe
 **/</comment>
<comment type="line" pos:line="11" pos:column="1">// Copyright 2005 by Pascal Hurni &lt;pascal_hurni@fastmail.fm&gt;</comment>
<comment type="line" pos:line="12" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file pos:line="18" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file pos:line="19" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef</cpp:directive> <name pos:line="32" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="33" pos:column="1">using namespace <name pos:line="33" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="36" pos:column="1">static</specifier> <specifier pos:line="36" pos:column="8">inline</specifier> <name pos:line="36" pos:column="15">bool</name></type> <name pos:line="36" pos:column="20">IsAWordChar</name><parameter_list pos:line="36" pos:column="31">(<param><decl><type><specifier pos:line="36" pos:column="32">const</specifier> <name pos:line="36" pos:column="38">int</name></type> <name pos:line="36" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="46">{
	<return pos:line="37" pos:column="9">return <expr><op:operator pos:line="37" pos:column="16">(</op:operator><call><name pos:line="37" pos:column="17">isalnum</name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="29">||</op:operator> <name pos:line="37" pos:column="32">ch</name> <op:operator pos:line="37" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="38">'?'</lit:literal> <op:operator pos:line="37" pos:column="42">||</op:operator> <name pos:line="37" pos:column="45">ch</name> <op:operator pos:line="37" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="51">'!'</lit:literal> <op:operator pos:line="37" pos:column="55">||</op:operator> <name pos:line="37" pos:column="58">ch</name> <op:operator pos:line="37" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="64">'.'</lit:literal> <op:operator pos:line="37" pos:column="68">||</op:operator> <name pos:line="37" pos:column="71">ch</name> <op:operator pos:line="37" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="77">'\''</lit:literal> <op:operator pos:line="37" pos:column="82">||</op:operator> <name pos:line="37" pos:column="85">ch</name> <op:operator pos:line="37" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="91">'+'</lit:literal> <op:operator pos:line="37" pos:column="95">||</op:operator> <name pos:line="37" pos:column="98">ch</name> <op:operator pos:line="37" pos:column="101">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="104">'-'</lit:literal> <op:operator pos:line="37" pos:column="108">||</op:operator> <name pos:line="37" pos:column="111">ch</name> <op:operator pos:line="37" pos:column="114">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="117">'*'</lit:literal> <op:operator pos:line="37" pos:column="121">||</op:operator> <name pos:line="37" pos:column="124">ch</name> <op:operator pos:line="37" pos:column="127">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="130">'&amp;'</lit:literal> <op:operator pos:line="37" pos:column="134">||</op:operator> <name pos:line="37" pos:column="137">ch</name> <op:operator pos:line="37" pos:column="140">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="143">'|'</lit:literal> <op:operator pos:line="37" pos:column="147">||</op:operator> <name pos:line="37" pos:column="150">ch</name> <op:operator pos:line="37" pos:column="153">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="156">'='</lit:literal> <op:operator pos:line="37" pos:column="160">||</op:operator> <name pos:line="37" pos:column="163">ch</name> <op:operator pos:line="37" pos:column="166">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="169">'_'</lit:literal> <op:operator pos:line="37" pos:column="173">||</op:operator> <name pos:line="37" pos:column="176">ch</name> <op:operator pos:line="37" pos:column="179">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="182">'~'</lit:literal><op:operator pos:line="37" pos:column="185">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="40" pos:column="1">static</specifier> <specifier pos:line="40" pos:column="8">inline</specifier> <name pos:line="40" pos:column="15">bool</name></type> <name pos:line="40" pos:column="20">IsAWordStart</name><parameter_list pos:line="40" pos:column="32">(<param><decl><type><specifier pos:line="40" pos:column="33">const</specifier> <name pos:line="40" pos:column="39">int</name></type> <name pos:line="40" pos:column="43">ch</name></decl></param>, <param><decl><type><specifier pos:line="40" pos:column="47">const</specifier> <name pos:line="40" pos:column="53">int</name></type> <name pos:line="40" pos:column="57">ch2</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="62">{
	<return pos:line="41" pos:column="9">return <expr><op:operator pos:line="41" pos:column="16">(</op:operator><op:operator pos:line="41" pos:column="17">(</op:operator><name pos:line="41" pos:column="18">ch</name> <op:operator pos:line="41" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="24">'+'</lit:literal> <op:operator pos:line="41" pos:column="28">||</op:operator> <name pos:line="41" pos:column="31">ch</name> <op:operator pos:line="41" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="37">'-'</lit:literal> <op:operator pos:line="41" pos:column="41">||</op:operator> <name pos:line="41" pos:column="44">ch</name> <op:operator pos:line="41" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="41" pos:column="50">'.'</lit:literal><op:operator pos:line="41" pos:column="53">)</op:operator> <op:operator pos:line="41" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="41" pos:column="58">!</op:operator><call><name pos:line="41" pos:column="59">isdigit</name><argument_list pos:line="41" pos:column="66">(<argument><expr><name pos:line="41" pos:column="67">ch2</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="71">)</op:operator> <op:operator pos:line="41" pos:column="73">||</op:operator>
		<op:operator pos:line="42" pos:column="17">(</op:operator><call><name pos:line="42" pos:column="18">isalpha</name><argument_list pos:line="42" pos:column="25">(<argument><expr><name pos:line="42" pos:column="26">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="30">||</op:operator> <name pos:line="42" pos:column="33">ch</name> <op:operator pos:line="42" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="39">'?'</lit:literal> <op:operator pos:line="42" pos:column="43">||</op:operator> <name pos:line="42" pos:column="46">ch</name> <op:operator pos:line="42" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="52">'!'</lit:literal> <op:operator pos:line="42" pos:column="56">||</op:operator> <name pos:line="42" pos:column="59">ch</name> <op:operator pos:line="42" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="65">'\''</lit:literal> <op:operator pos:line="42" pos:column="70">||</op:operator> <name pos:line="42" pos:column="73">ch</name> <op:operator pos:line="42" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="79">'*'</lit:literal> <op:operator pos:line="42" pos:column="83">||</op:operator> <name pos:line="42" pos:column="86">ch</name> <op:operator pos:line="42" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="92">'&amp;'</lit:literal> <op:operator pos:line="42" pos:column="96">||</op:operator> <name pos:line="42" pos:column="99">ch</name> <op:operator pos:line="42" pos:column="102">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="105">'|'</lit:literal> <op:operator pos:line="42" pos:column="109">||</op:operator> <name pos:line="42" pos:column="112">ch</name> <op:operator pos:line="42" pos:column="115">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="118">'='</lit:literal> <op:operator pos:line="42" pos:column="122">||</op:operator> <name pos:line="42" pos:column="125">ch</name> <op:operator pos:line="42" pos:column="128">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="131">'_'</lit:literal> <op:operator pos:line="42" pos:column="135">||</op:operator> <name pos:line="42" pos:column="138">ch</name> <op:operator pos:line="42" pos:column="141">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="144">'~'</lit:literal><op:operator pos:line="42" pos:column="147">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="45" pos:column="1">static</specifier> <specifier pos:line="45" pos:column="8">inline</specifier> <name pos:line="45" pos:column="15">bool</name></type> <name pos:line="45" pos:column="20">IsAnOperator</name><parameter_list pos:line="45" pos:column="32">(<param><decl><type><specifier pos:line="45" pos:column="33">const</specifier> <name pos:line="45" pos:column="39">int</name></type> <name pos:line="45" pos:column="43">ch</name></decl></param>, <param><decl><type><specifier pos:line="45" pos:column="47">const</specifier> <name pos:line="45" pos:column="53">int</name></type> <name pos:line="45" pos:column="57">ch2</name></decl></param>, <param><decl><type><specifier pos:line="45" pos:column="62">const</specifier> <name pos:line="45" pos:column="68">int</name></type> <name pos:line="45" pos:column="72">ch3</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="77">{
	<comment type="line" pos:line="46" pos:column="9">// One char operators</comment>
	<if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><call><name pos:line="47" pos:column="13">IsASpaceOrTab</name><argument_list pos:line="47" pos:column="26">(<argument><expr><name pos:line="47" pos:column="27">ch2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="47" pos:column="32"> <block pos:line="47" pos:column="33">{
		<return pos:line="48" pos:column="17">return <expr><name pos:line="48" pos:column="24">ch</name> <op:operator pos:line="48" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="30">'+'</lit:literal> <op:operator pos:line="48" pos:column="34">||</op:operator> <name pos:line="48" pos:column="37">ch</name> <op:operator pos:line="48" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="43">'-'</lit:literal> <op:operator pos:line="48" pos:column="47">||</op:operator> <name pos:line="48" pos:column="50">ch</name> <op:operator pos:line="48" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="56">'*'</lit:literal> <op:operator pos:line="48" pos:column="60">||</op:operator> <name pos:line="48" pos:column="63">ch</name> <op:operator pos:line="48" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="69">'/'</lit:literal> <op:operator pos:line="48" pos:column="73">||</op:operator> <name pos:line="48" pos:column="76">ch</name> <op:operator pos:line="48" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="82">'&lt;'</lit:literal> <op:operator pos:line="48" pos:column="86">||</op:operator> <name pos:line="48" pos:column="89">ch</name> <op:operator pos:line="48" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="95">'&gt;'</lit:literal> <op:operator pos:line="48" pos:column="99">||</op:operator> <name pos:line="48" pos:column="102">ch</name> <op:operator pos:line="48" pos:column="105">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="108">'='</lit:literal> <op:operator pos:line="48" pos:column="112">||</op:operator> <name pos:line="48" pos:column="115">ch</name> <op:operator pos:line="48" pos:column="118">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="121">'?'</lit:literal></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="51" pos:column="9">// Two char operators</comment>
	<if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><call><name pos:line="52" pos:column="13">IsASpaceOrTab</name><argument_list pos:line="52" pos:column="26">(<argument><expr><name pos:line="52" pos:column="27">ch3</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="52" pos:column="32"> <block pos:line="52" pos:column="33">{
		<return pos:line="53" pos:column="17">return <expr><op:operator pos:line="53" pos:column="24">(</op:operator><name pos:line="53" pos:column="25">ch</name> <op:operator pos:line="53" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="31">'*'</lit:literal> <op:operator pos:line="53" pos:column="35">&amp;&amp;</op:operator> <name pos:line="53" pos:column="38">ch2</name> <op:operator pos:line="53" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="45">'*'</lit:literal><op:operator pos:line="53" pos:column="48">)</op:operator> <op:operator pos:line="53" pos:column="50">||</op:operator>
			   <op:operator pos:line="54" pos:column="28">(</op:operator><name pos:line="54" pos:column="29">ch</name> <op:operator pos:line="54" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="35">'/'</lit:literal> <op:operator pos:line="54" pos:column="39">&amp;&amp;</op:operator> <name pos:line="54" pos:column="42">ch2</name> <op:operator pos:line="54" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="49">'/'</lit:literal><op:operator pos:line="54" pos:column="52">)</op:operator> <op:operator pos:line="54" pos:column="54">||</op:operator>
			   <op:operator pos:line="55" pos:column="28">(</op:operator><name pos:line="55" pos:column="29">ch</name> <op:operator pos:line="55" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="35">'&lt;'</lit:literal> <op:operator pos:line="55" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="55" pos:column="42">(</op:operator><name pos:line="55" pos:column="43">ch2</name> <op:operator pos:line="55" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="50">'='</lit:literal> <op:operator pos:line="55" pos:column="54">||</op:operator> <name pos:line="55" pos:column="57">ch2</name> <op:operator pos:line="55" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="64">'&gt;'</lit:literal><op:operator pos:line="55" pos:column="67">)</op:operator><op:operator pos:line="55" pos:column="68">)</op:operator> <op:operator pos:line="55" pos:column="70">||</op:operator>
			   <op:operator pos:line="56" pos:column="28">(</op:operator><name pos:line="56" pos:column="29">ch</name> <op:operator pos:line="56" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="35">'&gt;'</lit:literal> <op:operator pos:line="56" pos:column="39">&amp;&amp;</op:operator> <name pos:line="56" pos:column="42">ch2</name> <op:operator pos:line="56" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="49">'='</lit:literal><op:operator pos:line="56" pos:column="52">)</op:operator> <op:operator pos:line="56" pos:column="54">||</op:operator>
			   <op:operator pos:line="57" pos:column="28">(</op:operator><name pos:line="57" pos:column="29">ch</name> <op:operator pos:line="57" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="35">'='</lit:literal> <op:operator pos:line="57" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="57" pos:column="42">(</op:operator><name pos:line="57" pos:column="43">ch2</name> <op:operator pos:line="57" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="50">'='</lit:literal> <op:operator pos:line="57" pos:column="54">||</op:operator> <name pos:line="57" pos:column="57">ch2</name> <op:operator pos:line="57" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="64">'?'</lit:literal><op:operator pos:line="57" pos:column="67">)</op:operator><op:operator pos:line="57" pos:column="68">)</op:operator> <op:operator pos:line="57" pos:column="70">||</op:operator>
			   <op:operator pos:line="58" pos:column="28">(</op:operator><name pos:line="58" pos:column="29">ch</name> <op:operator pos:line="58" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="35">'?'</lit:literal> <op:operator pos:line="58" pos:column="39">&amp;&amp;</op:operator> <name pos:line="58" pos:column="42">ch2</name> <op:operator pos:line="58" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="49">'?'</lit:literal><op:operator pos:line="58" pos:column="52">)</op:operator></expr>;</return>
	}</block></then></if>

	<return pos:line="61" pos:column="9">return <expr><lit:literal type="boolean" pos:line="61" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="64" pos:column="1">static</specifier> <specifier pos:line="64" pos:column="8">inline</specifier> <name pos:line="64" pos:column="15">bool</name></type> <name pos:line="64" pos:column="20">IsBinaryStart</name><parameter_list pos:line="64" pos:column="33">(<param><decl><type><specifier pos:line="64" pos:column="34">const</specifier> <name pos:line="64" pos:column="40">int</name></type> <name pos:line="64" pos:column="44">ch</name></decl></param>, <param><decl><type><specifier pos:line="64" pos:column="48">const</specifier> <name pos:line="64" pos:column="54">int</name></type> <name pos:line="64" pos:column="58">ch2</name></decl></param>, <param><decl><type><specifier pos:line="64" pos:column="63">const</specifier> <name pos:line="64" pos:column="69">int</name></type> <name pos:line="64" pos:column="73">ch3</name></decl></param>, <param><decl><type><specifier pos:line="64" pos:column="78">const</specifier> <name pos:line="64" pos:column="84">int</name></type> <name pos:line="64" pos:column="88">ch4</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="93">{
	<return pos:line="65" pos:column="9">return <expr><op:operator pos:line="65" pos:column="16">(</op:operator><name pos:line="65" pos:column="17">ch</name> <op:operator pos:line="65" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="23">'#'</lit:literal> <op:operator pos:line="65" pos:column="27">&amp;&amp;</op:operator> <name pos:line="65" pos:column="30">ch2</name> <op:operator pos:line="65" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="65" pos:column="37">'{'</lit:literal><op:operator pos:line="65" pos:column="40">)</op:operator> <op:operator pos:line="65" pos:column="42">||</op:operator>
		   <op:operator pos:line="66" pos:column="20">(</op:operator><call><name pos:line="66" pos:column="21">IsADigit</name><argument_list pos:line="66" pos:column="29">(<argument><expr><name pos:line="66" pos:column="30">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="66" pos:column="34">&amp;&amp;</op:operator> <name pos:line="66" pos:column="37">ch2</name> <op:operator pos:line="66" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="44">'#'</lit:literal> <op:operator pos:line="66" pos:column="48">&amp;&amp;</op:operator> <name pos:line="66" pos:column="51">ch3</name> <op:operator pos:line="66" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="66" pos:column="58">'{'</lit:literal> <op:operator pos:line="66" pos:column="62">)</op:operator> <op:operator pos:line="66" pos:column="64">||</op:operator>
		   <op:operator pos:line="67" pos:column="20">(</op:operator><call><name pos:line="67" pos:column="21">IsADigit</name><argument_list pos:line="67" pos:column="29">(<argument><expr><name pos:line="67" pos:column="30">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="34">&amp;&amp;</op:operator> <call><name pos:line="67" pos:column="37">IsADigit</name><argument_list pos:line="67" pos:column="45">(<argument><expr><name pos:line="67" pos:column="46">ch2</name></expr></argument>)</argument_list></call> <op:operator pos:line="67" pos:column="51">&amp;&amp;</op:operator> <name pos:line="67" pos:column="54">ch3</name> <op:operator pos:line="67" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="61">'#'</lit:literal> <op:operator pos:line="67" pos:column="65">&amp;&amp;</op:operator> <name pos:line="67" pos:column="68">ch4</name> <op:operator pos:line="67" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="67" pos:column="75">'{'</lit:literal> <op:operator pos:line="67" pos:column="79">)</op:operator></expr>;</return>
}</block></function>


<function><type><specifier pos:line="71" pos:column="1">static</specifier> <name pos:line="71" pos:column="8">void</name></type> <name pos:line="71" pos:column="13">ColouriseRebolDoc</name><parameter_list pos:line="71" pos:column="30">(<param><decl><type><name pos:line="71" pos:column="31">unsigned</name> <name pos:line="71" pos:column="40">int</name></type> <name pos:line="71" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="54">int</name></type> <name pos:line="71" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="66">int</name></type> <name pos:line="71" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="71" pos:column="81">WordList</name> <type:modifier pos:line="71" pos:column="90">*</type:modifier></type><name><name pos:line="71" pos:column="91">keywordlists</name><index pos:line="71" pos:column="103">[]</index></name></decl></param>, <param><decl><type><name pos:line="71" pos:column="107">Accessor</name> <type:modifier pos:line="71" pos:column="116">&amp;</type:modifier></type><name pos:line="71" pos:column="117">styler</name></decl></param>)</parameter_list> <block pos:line="71" pos:column="125">{

	<decl_stmt><decl><type><name pos:line="73" pos:column="9">WordList</name> <type:modifier pos:line="73" pos:column="18">&amp;</type:modifier></type><name pos:line="73" pos:column="19">keywords</name> <init pos:line="73" pos:column="28">= <expr><op:operator pos:line="73" pos:column="30">*</op:operator><name><name pos:line="73" pos:column="31">keywordlists</name><index pos:line="73" pos:column="43">[<expr><lit:literal type="number" pos:line="73" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">WordList</name> <type:modifier pos:line="74" pos:column="18">&amp;</type:modifier></type><name pos:line="74" pos:column="19">keywords2</name> <init pos:line="74" pos:column="29">= <expr><op:operator pos:line="74" pos:column="31">*</op:operator><name><name pos:line="74" pos:column="32">keywordlists</name><index pos:line="74" pos:column="44">[<expr><lit:literal type="number" pos:line="74" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">WordList</name> <type:modifier pos:line="75" pos:column="18">&amp;</type:modifier></type><name pos:line="75" pos:column="19">keywords3</name> <init pos:line="75" pos:column="29">= <expr><op:operator pos:line="75" pos:column="31">*</op:operator><name><name pos:line="75" pos:column="32">keywordlists</name><index pos:line="75" pos:column="44">[<expr><lit:literal type="number" pos:line="75" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">WordList</name> <type:modifier pos:line="76" pos:column="18">&amp;</type:modifier></type><name pos:line="76" pos:column="19">keywords4</name> <init pos:line="76" pos:column="29">= <expr><op:operator pos:line="76" pos:column="31">*</op:operator><name><name pos:line="76" pos:column="32">keywordlists</name><index pos:line="76" pos:column="44">[<expr><lit:literal type="number" pos:line="76" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">WordList</name> <type:modifier pos:line="77" pos:column="18">&amp;</type:modifier></type><name pos:line="77" pos:column="19">keywords5</name> <init pos:line="77" pos:column="29">= <expr><op:operator pos:line="77" pos:column="31">*</op:operator><name><name pos:line="77" pos:column="32">keywordlists</name><index pos:line="77" pos:column="44">[<expr><lit:literal type="number" pos:line="77" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="78" pos:column="9">WordList</name> <type:modifier pos:line="78" pos:column="18">&amp;</type:modifier></type><name pos:line="78" pos:column="19">keywords6</name> <init pos:line="78" pos:column="29">= <expr><op:operator pos:line="78" pos:column="31">*</op:operator><name><name pos:line="78" pos:column="32">keywordlists</name><index pos:line="78" pos:column="44">[<expr><lit:literal type="number" pos:line="78" pos:column="45">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="79" pos:column="9">WordList</name> <type:modifier pos:line="79" pos:column="18">&amp;</type:modifier></type><name pos:line="79" pos:column="19">keywords7</name> <init pos:line="79" pos:column="29">= <expr><op:operator pos:line="79" pos:column="31">*</op:operator><name><name pos:line="79" pos:column="32">keywordlists</name><index pos:line="79" pos:column="44">[<expr><lit:literal type="number" pos:line="79" pos:column="45">6</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">WordList</name> <type:modifier pos:line="80" pos:column="18">&amp;</type:modifier></type><name pos:line="80" pos:column="19">keywords8</name> <init pos:line="80" pos:column="29">= <expr><op:operator pos:line="80" pos:column="31">*</op:operator><name><name pos:line="80" pos:column="32">keywordlists</name><index pos:line="80" pos:column="44">[<expr><lit:literal type="number" pos:line="80" pos:column="45">7</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="82" pos:column="9">int</name></type> <name pos:line="82" pos:column="13">currentLine</name> <init pos:line="82" pos:column="25">= <expr><call><name><name pos:line="82" pos:column="27">styler</name><op:operator pos:line="82" pos:column="33">.</op:operator><name pos:line="82" pos:column="34">GetLine</name></name><argument_list pos:line="82" pos:column="41">(<argument><expr><name pos:line="82" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="83" pos:column="9">// Initialize the braced string {.. { ... } ..} nesting level, if we are inside such a string.</comment>
	<decl_stmt><decl><type><name pos:line="84" pos:column="9">int</name></type> <name pos:line="84" pos:column="13">stringLevel</name> <init pos:line="84" pos:column="25">= <expr><lit:literal type="number" pos:line="84" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">initStyle</name> <op:operator pos:line="85" pos:column="23">==</op:operator> <name pos:line="85" pos:column="26">SCE_REBOL_BRACEDSTRING</name> <op:operator pos:line="85" pos:column="49">||</op:operator> <name pos:line="85" pos:column="52">initStyle</name> <op:operator pos:line="85" pos:column="62">==</op:operator> <name pos:line="85" pos:column="65">SCE_REBOL_COMMENTBLOCK</name></expr>)</condition><then pos:line="85" pos:column="88"> <block pos:line="85" pos:column="89">{
		<expr_stmt><expr><name pos:line="86" pos:column="17">stringLevel</name> <op:operator pos:line="86" pos:column="29">=</op:operator> <call><name><name pos:line="86" pos:column="31">styler</name><op:operator pos:line="86" pos:column="37">.</op:operator><name pos:line="86" pos:column="38">GetLineState</name></name><argument_list pos:line="86" pos:column="50">(<argument><expr><name pos:line="86" pos:column="51">currentLine</name> <op:operator pos:line="86" pos:column="63">-</op:operator> <lit:literal type="number" pos:line="86" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="89" pos:column="9">bool</name></type> <name pos:line="89" pos:column="14">blockComment</name> <init pos:line="89" pos:column="27">= <expr><name pos:line="89" pos:column="29">initStyle</name> <op:operator pos:line="89" pos:column="39">==</op:operator> <name pos:line="89" pos:column="42">SCE_REBOL_COMMENTBLOCK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="90" pos:column="9">int</name></type> <name pos:line="90" pos:column="13">dotCount</name> <init pos:line="90" pos:column="22">= <expr><lit:literal type="number" pos:line="90" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="92" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name pos:line="93" pos:column="13">initStyle</name> <op:operator pos:line="93" pos:column="23">==</op:operator> <name pos:line="93" pos:column="26">SCE_REBOL_COMMENTLINE</name></expr>)</condition><then pos:line="93" pos:column="48"> <block pos:line="93" pos:column="49">{
		<expr_stmt><expr><name pos:line="94" pos:column="17">initStyle</name> <op:operator pos:line="94" pos:column="27">=</op:operator> <name pos:line="94" pos:column="29">SCE_REBOL_DEFAULT</name></expr>;</expr_stmt>
	}</block></then></if>

	<function_decl><type><name pos:line="97" pos:column="9">StyleContext</name></type> <name pos:line="97" pos:column="22">sc</name><parameter_list pos:line="97" pos:column="24">(<param><decl><type><name pos:line="97" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="97" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="97" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="97" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">startPos</name> <op:operator pos:line="98" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="98" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="98" pos:column="27"> <block pos:line="98" pos:column="28">{
		<expr_stmt><expr><call><name><name pos:line="99" pos:column="17">sc</name><op:operator pos:line="99" pos:column="19">.</op:operator><name pos:line="99" pos:column="20">SetState</name></name><argument_list pos:line="99" pos:column="28">(<argument><expr><name pos:line="99" pos:column="29">SCE_REBOL_PREFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<for pos:line="101" pos:column="9">for (<init pos:line="101" pos:column="14">;</init> <condition><expr><call><name><name pos:line="101" pos:column="16">sc</name><op:operator pos:line="101" pos:column="18">.</op:operator><name pos:line="101" pos:column="19">More</name></name><argument_list pos:line="101" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="101" pos:column="27">sc</name><op:operator pos:line="101" pos:column="29">.</op:operator><name pos:line="101" pos:column="30">Forward</name></name><argument_list pos:line="101" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="101" pos:column="41">{

		<comment type="line" pos:line="103" pos:column="17">//--- What to do at line end ?</comment>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name><name pos:line="104" pos:column="21">sc</name><op:operator pos:line="104" pos:column="23">.</op:operator><name pos:line="104" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="104" pos:column="34"> <block pos:line="104" pos:column="35">{
			<comment type="line" pos:line="105" pos:column="25">// Can be either inside a {} string or simply at eol</comment>
			<if pos:line="106" pos:column="25">if <condition pos:line="106" pos:column="28">(<expr><name><name pos:line="106" pos:column="29">sc</name><op:operator pos:line="106" pos:column="31">.</op:operator><name pos:line="106" pos:column="32">state</name></name> <op:operator pos:line="106" pos:column="38">!=</op:operator> <name pos:line="106" pos:column="41">SCE_REBOL_BRACEDSTRING</name> <op:operator pos:line="106" pos:column="64">&amp;&amp;</op:operator> <name><name pos:line="106" pos:column="67">sc</name><op:operator pos:line="106" pos:column="69">.</op:operator><name pos:line="106" pos:column="70">state</name></name> <op:operator pos:line="106" pos:column="76">!=</op:operator> <name pos:line="106" pos:column="79">SCE_REBOL_COMMENTBLOCK</name> <op:operator pos:line="106" pos:column="102">&amp;&amp;</op:operator>
				<name><name pos:line="107" pos:column="33">sc</name><op:operator pos:line="107" pos:column="35">.</op:operator><name pos:line="107" pos:column="36">state</name></name> <op:operator pos:line="107" pos:column="42">!=</op:operator> <name pos:line="107" pos:column="45">SCE_REBOL_BINARY</name> <op:operator pos:line="107" pos:column="62">&amp;&amp;</op:operator> <name><name pos:line="107" pos:column="65">sc</name><op:operator pos:line="107" pos:column="67">.</op:operator><name pos:line="107" pos:column="68">state</name></name> <op:operator pos:line="107" pos:column="74">!=</op:operator> <name pos:line="107" pos:column="77">SCE_REBOL_PREFACE</name></expr>)</condition><then pos:line="107" pos:column="95">
				<expr_stmt><expr><call><name><name pos:line="108" pos:column="33">sc</name><op:operator pos:line="108" pos:column="35">.</op:operator><name pos:line="108" pos:column="36">SetState</name></name><argument_list pos:line="108" pos:column="44">(<argument><expr><name pos:line="108" pos:column="45">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<comment type="line" pos:line="110" pos:column="25">// Update the line state, so it can be seen by next line</comment>
			<expr_stmt><expr><name pos:line="111" pos:column="25">currentLine</name> <op:operator pos:line="111" pos:column="37">=</op:operator> <call><name><name pos:line="111" pos:column="39">styler</name><op:operator pos:line="111" pos:column="45">.</op:operator><name pos:line="111" pos:column="46">GetLine</name></name><argument_list pos:line="111" pos:column="53">(<argument><expr><name><name pos:line="111" pos:column="54">sc</name><op:operator pos:line="111" pos:column="56">.</op:operator><name pos:line="111" pos:column="57">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<switch pos:line="112" pos:column="25">switch <condition pos:line="112" pos:column="32">(<expr><name><name pos:line="112" pos:column="33">sc</name><op:operator pos:line="112" pos:column="35">.</op:operator><name pos:line="112" pos:column="36">state</name></name></expr>)</condition> <block pos:line="112" pos:column="43">{
			<case pos:line="113" pos:column="25">case <expr><name pos:line="113" pos:column="30">SCE_REBOL_BRACEDSTRING</name></expr>:
			</case><case pos:line="114" pos:column="25">case <expr><name pos:line="114" pos:column="30">SCE_REBOL_COMMENTBLOCK</name></expr>:
				<comment type="line" pos:line="115" pos:column="33">// Inside a braced string, we set the line state</comment>
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">styler</name><op:operator pos:line="116" pos:column="39">.</op:operator><name pos:line="116" pos:column="40">SetLineState</name></name><argument_list pos:line="116" pos:column="52">(<argument><expr><name pos:line="116" pos:column="53">currentLine</name></expr></argument>, <argument><expr><name pos:line="116" pos:column="66">stringLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="117" pos:column="33">break;</break>
			</case><default pos:line="118" pos:column="25">default:
				<comment type="line" pos:line="119" pos:column="33">// Reset the line state</comment>
				<expr_stmt><expr><call><name><name pos:line="120" pos:column="33">styler</name><op:operator pos:line="120" pos:column="39">.</op:operator><name pos:line="120" pos:column="40">SetLineState</name></name><argument_list pos:line="120" pos:column="52">(<argument><expr><name pos:line="120" pos:column="53">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="120" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="121" pos:column="33">break;</break>
			</default>}</block></switch>

			<comment type="line" pos:line="124" pos:column="25">// continue with next char</comment>
			<continue pos:line="125" pos:column="25">continue;</continue>
		}</block></then></if>

		<comment type="line" pos:line="128" pos:column="17">//--- What to do on white-space ?</comment>
		<if pos:line="129" pos:column="17">if <condition pos:line="129" pos:column="20">(<expr><call><name pos:line="129" pos:column="21">IsASpaceOrTab</name><argument_list pos:line="129" pos:column="34">(<argument><expr><name><name pos:line="129" pos:column="35">sc</name><op:operator pos:line="129" pos:column="37">.</op:operator><name pos:line="129" pos:column="38">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="42">
		<block pos:line="130" pos:column="17">{
			<comment type="line" pos:line="131" pos:column="25">// Return to default if any of these states</comment>
			<if pos:line="132" pos:column="25">if <condition pos:line="132" pos:column="28">(<expr><name><name pos:line="132" pos:column="29">sc</name><op:operator pos:line="132" pos:column="31">.</op:operator><name pos:line="132" pos:column="32">state</name></name> <op:operator pos:line="132" pos:column="38">==</op:operator> <name pos:line="132" pos:column="41">SCE_REBOL_OPERATOR</name> <op:operator pos:line="132" pos:column="60">||</op:operator> <name><name pos:line="132" pos:column="63">sc</name><op:operator pos:line="132" pos:column="65">.</op:operator><name pos:line="132" pos:column="66">state</name></name> <op:operator pos:line="132" pos:column="72">==</op:operator> <name pos:line="132" pos:column="75">SCE_REBOL_CHARACTER</name> <op:operator pos:line="132" pos:column="95">||</op:operator>
				<name><name pos:line="133" pos:column="33">sc</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">state</name></name> <op:operator pos:line="133" pos:column="42">==</op:operator> <name pos:line="133" pos:column="45">SCE_REBOL_NUMBER</name> <op:operator pos:line="133" pos:column="62">||</op:operator> <name><name pos:line="133" pos:column="65">sc</name><op:operator pos:line="133" pos:column="67">.</op:operator><name pos:line="133" pos:column="68">state</name></name> <op:operator pos:line="133" pos:column="74">==</op:operator> <name pos:line="133" pos:column="77">SCE_REBOL_PAIR</name> <op:operator pos:line="133" pos:column="92">||</op:operator>
				<name><name pos:line="134" pos:column="33">sc</name><op:operator pos:line="134" pos:column="35">.</op:operator><name pos:line="134" pos:column="36">state</name></name> <op:operator pos:line="134" pos:column="42">==</op:operator> <name pos:line="134" pos:column="45">SCE_REBOL_TUPLE</name> <op:operator pos:line="134" pos:column="61">||</op:operator> <name><name pos:line="134" pos:column="64">sc</name><op:operator pos:line="134" pos:column="66">.</op:operator><name pos:line="134" pos:column="67">state</name></name> <op:operator pos:line="134" pos:column="73">==</op:operator> <name pos:line="134" pos:column="76">SCE_REBOL_FILE</name> <op:operator pos:line="134" pos:column="91">||</op:operator>
				<name><name pos:line="135" pos:column="33">sc</name><op:operator pos:line="135" pos:column="35">.</op:operator><name pos:line="135" pos:column="36">state</name></name> <op:operator pos:line="135" pos:column="42">==</op:operator> <name pos:line="135" pos:column="45">SCE_REBOL_DATE</name> <op:operator pos:line="135" pos:column="60">||</op:operator> <name><name pos:line="135" pos:column="63">sc</name><op:operator pos:line="135" pos:column="65">.</op:operator><name pos:line="135" pos:column="66">state</name></name> <op:operator pos:line="135" pos:column="72">==</op:operator> <name pos:line="135" pos:column="75">SCE_REBOL_TIME</name> <op:operator pos:line="135" pos:column="90">||</op:operator>
				<name><name pos:line="136" pos:column="33">sc</name><op:operator pos:line="136" pos:column="35">.</op:operator><name pos:line="136" pos:column="36">state</name></name> <op:operator pos:line="136" pos:column="42">==</op:operator> <name pos:line="136" pos:column="45">SCE_REBOL_MONEY</name> <op:operator pos:line="136" pos:column="61">||</op:operator> <name><name pos:line="136" pos:column="64">sc</name><op:operator pos:line="136" pos:column="66">.</op:operator><name pos:line="136" pos:column="67">state</name></name> <op:operator pos:line="136" pos:column="73">==</op:operator> <name pos:line="136" pos:column="76">SCE_REBOL_ISSUE</name> <op:operator pos:line="136" pos:column="92">||</op:operator>
				<name><name pos:line="137" pos:column="33">sc</name><op:operator pos:line="137" pos:column="35">.</op:operator><name pos:line="137" pos:column="36">state</name></name> <op:operator pos:line="137" pos:column="42">==</op:operator> <name pos:line="137" pos:column="45">SCE_REBOL_URL</name> <op:operator pos:line="137" pos:column="59">||</op:operator> <name><name pos:line="137" pos:column="62">sc</name><op:operator pos:line="137" pos:column="64">.</op:operator><name pos:line="137" pos:column="65">state</name></name> <op:operator pos:line="137" pos:column="71">==</op:operator> <name pos:line="137" pos:column="74">SCE_REBOL_EMAIL</name></expr>)</condition><then pos:line="137" pos:column="90"> <block pos:line="137" pos:column="91">{
				<expr_stmt><expr><call><name><name pos:line="138" pos:column="33">sc</name><op:operator pos:line="138" pos:column="35">.</op:operator><name pos:line="138" pos:column="36">SetState</name></name><argument_list pos:line="138" pos:column="44">(<argument><expr><name pos:line="138" pos:column="45">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="142" pos:column="17">//--- Specialize state ?</comment>
		<comment type="line" pos:line="143" pos:column="17">// URL, Email look like identifier</comment>
		<if pos:line="144" pos:column="17">if <condition pos:line="144" pos:column="20">(<expr><name><name pos:line="144" pos:column="21">sc</name><op:operator pos:line="144" pos:column="23">.</op:operator><name pos:line="144" pos:column="24">state</name></name> <op:operator pos:line="144" pos:column="30">==</op:operator> <name pos:line="144" pos:column="33">SCE_REBOL_IDENTIFIER</name></expr>)</condition><then pos:line="144" pos:column="54">
		<block pos:line="145" pos:column="17">{
			<if pos:line="146" pos:column="25">if <condition pos:line="146" pos:column="28">(<expr><name><name pos:line="146" pos:column="29">sc</name><op:operator pos:line="146" pos:column="31">.</op:operator><name pos:line="146" pos:column="32">ch</name></name> <op:operator pos:line="146" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="146" pos:column="38">':'</lit:literal> <op:operator pos:line="146" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="146" pos:column="45">!</op:operator><call><name pos:line="146" pos:column="46">IsASpace</name><argument_list pos:line="146" pos:column="54">(<argument><expr><name><name pos:line="146" pos:column="55">sc</name><op:operator pos:line="146" pos:column="57">.</op:operator><name pos:line="146" pos:column="58">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="146" pos:column="66"> <block pos:line="146" pos:column="67">{
				<expr_stmt><expr><call><name><name pos:line="147" pos:column="33">sc</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">ChangeState</name></name><argument_list pos:line="147" pos:column="47">(<argument><expr><name pos:line="147" pos:column="48">SCE_REBOL_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="148" pos:column="27">else <if pos:line="148" pos:column="32">if <condition pos:line="148" pos:column="35">(<expr><name><name pos:line="148" pos:column="36">sc</name><op:operator pos:line="148" pos:column="38">.</op:operator><name pos:line="148" pos:column="39">ch</name></name> <op:operator pos:line="148" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="148" pos:column="45">'@'</lit:literal></expr>)</condition><then pos:line="148" pos:column="49"> <block pos:line="148" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="149" pos:column="33">sc</name><op:operator pos:line="149" pos:column="35">.</op:operator><name pos:line="149" pos:column="36">ChangeState</name></name><argument_list pos:line="149" pos:column="47">(<argument><expr><name pos:line="149" pos:column="48">SCE_REBOL_EMAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="150" pos:column="27">else <if pos:line="150" pos:column="32">if <condition pos:line="150" pos:column="35">(<expr><name><name pos:line="150" pos:column="36">sc</name><op:operator pos:line="150" pos:column="38">.</op:operator><name pos:line="150" pos:column="39">ch</name></name> <op:operator pos:line="150" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="150" pos:column="45">'$'</lit:literal></expr>)</condition><then pos:line="150" pos:column="49"> <block pos:line="150" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="151" pos:column="33">sc</name><op:operator pos:line="151" pos:column="35">.</op:operator><name pos:line="151" pos:column="36">ChangeState</name></name><argument_list pos:line="151" pos:column="47">(<argument><expr><name pos:line="151" pos:column="48">SCE_REBOL_MONEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then></if>
		<comment type="line" pos:line="154" pos:column="17">// Words look like identifiers</comment>
		<if pos:line="155" pos:column="17">if <condition pos:line="155" pos:column="20">(<expr><name><name pos:line="155" pos:column="21">sc</name><op:operator pos:line="155" pos:column="23">.</op:operator><name pos:line="155" pos:column="24">state</name></name> <op:operator pos:line="155" pos:column="30">==</op:operator> <name pos:line="155" pos:column="33">SCE_REBOL_IDENTIFIER</name> <op:operator pos:line="155" pos:column="54">||</op:operator> <op:operator pos:line="155" pos:column="57">(</op:operator><name><name pos:line="155" pos:column="58">sc</name><op:operator pos:line="155" pos:column="60">.</op:operator><name pos:line="155" pos:column="61">state</name></name> <op:operator pos:line="155" pos:column="67">&gt;=</op:operator> <name pos:line="155" pos:column="70">SCE_REBOL_WORD</name> <op:operator pos:line="155" pos:column="85">&amp;&amp;</op:operator> <name><name pos:line="155" pos:column="88">sc</name><op:operator pos:line="155" pos:column="90">.</op:operator><name pos:line="155" pos:column="91">state</name></name> <op:operator pos:line="155" pos:column="97">&lt;=</op:operator> <name pos:line="155" pos:column="100">SCE_REBOL_WORD8</name><op:operator pos:line="155" pos:column="115">)</op:operator></expr>)</condition><then pos:line="155" pos:column="117"> <block pos:line="155" pos:column="118">{
			<comment type="line" pos:line="156" pos:column="25">// Keywords ?</comment>
			<if pos:line="157" pos:column="25">if <condition pos:line="157" pos:column="28">(<expr><op:operator pos:line="157" pos:column="29">!</op:operator><call><name pos:line="157" pos:column="30">IsAWordChar</name><argument_list pos:line="157" pos:column="41">(<argument><expr><name><name pos:line="157" pos:column="42">sc</name><op:operator pos:line="157" pos:column="44">.</op:operator><name pos:line="157" pos:column="45">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="157" pos:column="49">||</op:operator> <call><name><name pos:line="157" pos:column="52">sc</name><op:operator pos:line="157" pos:column="54">.</op:operator><name pos:line="157" pos:column="55">Match</name></name><argument_list pos:line="157" pos:column="60">(<argument><expr><lit:literal type="char" pos:line="157" pos:column="61">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="157" pos:column="66"> <block pos:line="157" pos:column="67">{
				<decl_stmt><decl><type><name pos:line="158" pos:column="33">char</name></type> <name><name pos:line="158" pos:column="38">s</name><index pos:line="158" pos:column="39">[<expr><lit:literal type="number" pos:line="158" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="159" pos:column="33">sc</name><op:operator pos:line="159" pos:column="35">.</op:operator><name pos:line="159" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="159" pos:column="53">(<argument><expr><name pos:line="159" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="57">sizeof<argument_list pos:line="159" pos:column="63">(<argument><expr><name pos:line="159" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="160" pos:column="33">blockComment</name> <op:operator pos:line="160" pos:column="46">=</op:operator> <call><name pos:line="160" pos:column="48">strcmp</name><argument_list pos:line="160" pos:column="54">(<argument><expr><name pos:line="160" pos:column="55">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="160" pos:column="58">"comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="160" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="160" pos:column="72">0</lit:literal></expr>;</expr_stmt>
				<if pos:line="161" pos:column="33">if <condition pos:line="161" pos:column="36">(<expr><call><name><name pos:line="161" pos:column="37">keywords8</name><op:operator pos:line="161" pos:column="46">.</op:operator><name pos:line="161" pos:column="47">InList</name></name><argument_list pos:line="161" pos:column="53">(<argument><expr><name pos:line="161" pos:column="54">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="57"> <block pos:line="161" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="162" pos:column="41">sc</name><op:operator pos:line="162" pos:column="43">.</op:operator><name pos:line="162" pos:column="44">ChangeState</name></name><argument_list pos:line="162" pos:column="55">(<argument><expr><name pos:line="162" pos:column="56">SCE_REBOL_WORD8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="163" pos:column="35">else <if pos:line="163" pos:column="40">if <condition pos:line="163" pos:column="43">(<expr><call><name><name pos:line="163" pos:column="44">keywords7</name><op:operator pos:line="163" pos:column="53">.</op:operator><name pos:line="163" pos:column="54">InList</name></name><argument_list pos:line="163" pos:column="60">(<argument><expr><name pos:line="163" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="64"> <block pos:line="163" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="164" pos:column="41">sc</name><op:operator pos:line="164" pos:column="43">.</op:operator><name pos:line="164" pos:column="44">ChangeState</name></name><argument_list pos:line="164" pos:column="55">(<argument><expr><name pos:line="164" pos:column="56">SCE_REBOL_WORD7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="165" pos:column="35">else <if pos:line="165" pos:column="40">if <condition pos:line="165" pos:column="43">(<expr><call><name><name pos:line="165" pos:column="44">keywords6</name><op:operator pos:line="165" pos:column="53">.</op:operator><name pos:line="165" pos:column="54">InList</name></name><argument_list pos:line="165" pos:column="60">(<argument><expr><name pos:line="165" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="165" pos:column="64"> <block pos:line="165" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="166" pos:column="41">sc</name><op:operator pos:line="166" pos:column="43">.</op:operator><name pos:line="166" pos:column="44">ChangeState</name></name><argument_list pos:line="166" pos:column="55">(<argument><expr><name pos:line="166" pos:column="56">SCE_REBOL_WORD6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="167" pos:column="35">else <if pos:line="167" pos:column="40">if <condition pos:line="167" pos:column="43">(<expr><call><name><name pos:line="167" pos:column="44">keywords5</name><op:operator pos:line="167" pos:column="53">.</op:operator><name pos:line="167" pos:column="54">InList</name></name><argument_list pos:line="167" pos:column="60">(<argument><expr><name pos:line="167" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="64"> <block pos:line="167" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="168" pos:column="41">sc</name><op:operator pos:line="168" pos:column="43">.</op:operator><name pos:line="168" pos:column="44">ChangeState</name></name><argument_list pos:line="168" pos:column="55">(<argument><expr><name pos:line="168" pos:column="56">SCE_REBOL_WORD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="169" pos:column="35">else <if pos:line="169" pos:column="40">if <condition pos:line="169" pos:column="43">(<expr><call><name><name pos:line="169" pos:column="44">keywords4</name><op:operator pos:line="169" pos:column="53">.</op:operator><name pos:line="169" pos:column="54">InList</name></name><argument_list pos:line="169" pos:column="60">(<argument><expr><name pos:line="169" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="169" pos:column="64"> <block pos:line="169" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="170" pos:column="41">sc</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">ChangeState</name></name><argument_list pos:line="170" pos:column="55">(<argument><expr><name pos:line="170" pos:column="56">SCE_REBOL_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="171" pos:column="35">else <if pos:line="171" pos:column="40">if <condition pos:line="171" pos:column="43">(<expr><call><name><name pos:line="171" pos:column="44">keywords3</name><op:operator pos:line="171" pos:column="53">.</op:operator><name pos:line="171" pos:column="54">InList</name></name><argument_list pos:line="171" pos:column="60">(<argument><expr><name pos:line="171" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="171" pos:column="64"> <block pos:line="171" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="172" pos:column="41">sc</name><op:operator pos:line="172" pos:column="43">.</op:operator><name pos:line="172" pos:column="44">ChangeState</name></name><argument_list pos:line="172" pos:column="55">(<argument><expr><name pos:line="172" pos:column="56">SCE_REBOL_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="173" pos:column="35">else <if pos:line="173" pos:column="40">if <condition pos:line="173" pos:column="43">(<expr><call><name><name pos:line="173" pos:column="44">keywords2</name><op:operator pos:line="173" pos:column="53">.</op:operator><name pos:line="173" pos:column="54">InList</name></name><argument_list pos:line="173" pos:column="60">(<argument><expr><name pos:line="173" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="173" pos:column="64"> <block pos:line="173" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="174" pos:column="41">sc</name><op:operator pos:line="174" pos:column="43">.</op:operator><name pos:line="174" pos:column="44">ChangeState</name></name><argument_list pos:line="174" pos:column="55">(<argument><expr><name pos:line="174" pos:column="56">SCE_REBOL_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="175" pos:column="35">else <if pos:line="175" pos:column="40">if <condition pos:line="175" pos:column="43">(<expr><call><name><name pos:line="175" pos:column="44">keywords</name><op:operator pos:line="175" pos:column="52">.</op:operator><name pos:line="175" pos:column="53">InList</name></name><argument_list pos:line="175" pos:column="59">(<argument><expr><name pos:line="175" pos:column="60">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="175" pos:column="63"> <block pos:line="175" pos:column="64">{
					<expr_stmt><expr><call><name><name pos:line="176" pos:column="41">sc</name><op:operator pos:line="176" pos:column="43">.</op:operator><name pos:line="176" pos:column="44">ChangeState</name></name><argument_list pos:line="176" pos:column="55">(<argument><expr><name pos:line="176" pos:column="56">SCE_REBOL_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<comment type="line" pos:line="178" pos:column="33">// Keep same style if there are refinements</comment>
				<if pos:line="179" pos:column="33">if <condition pos:line="179" pos:column="36">(<expr><op:operator pos:line="179" pos:column="37">!</op:operator><call><name><name pos:line="179" pos:column="38">sc</name><op:operator pos:line="179" pos:column="40">.</op:operator><name pos:line="179" pos:column="41">Match</name></name><argument_list pos:line="179" pos:column="46">(<argument><expr><lit:literal type="char" pos:line="179" pos:column="47">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="179" pos:column="52"> <block pos:line="179" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="180" pos:column="41">sc</name><op:operator pos:line="180" pos:column="43">.</op:operator><name pos:line="180" pos:column="44">SetState</name></name><argument_list pos:line="180" pos:column="52">(<argument><expr><name pos:line="180" pos:column="53">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		<comment type="line" pos:line="183" pos:column="17">// special numbers</comment>
		}</block></then> <else pos:line="184" pos:column="19">else <if pos:line="184" pos:column="24">if <condition pos:line="184" pos:column="27">(<expr><name><name pos:line="184" pos:column="28">sc</name><op:operator pos:line="184" pos:column="30">.</op:operator><name pos:line="184" pos:column="31">state</name></name> <op:operator pos:line="184" pos:column="37">==</op:operator> <name pos:line="184" pos:column="40">SCE_REBOL_NUMBER</name></expr>)</condition><then pos:line="184" pos:column="57"> <block pos:line="184" pos:column="58">{
			<switch pos:line="185" pos:column="25">switch <condition pos:line="185" pos:column="32">(<expr><name><name pos:line="185" pos:column="33">sc</name><op:operator pos:line="185" pos:column="35">.</op:operator><name pos:line="185" pos:column="36">ch</name></name></expr>)</condition> <block pos:line="185" pos:column="40">{
			<case pos:line="186" pos:column="25">case <expr><lit:literal type="char" pos:line="186" pos:column="30">'x'</lit:literal></expr>:	<expr_stmt><expr><call><name><name pos:line="186" pos:column="41">sc</name><op:operator pos:line="186" pos:column="43">.</op:operator><name pos:line="186" pos:column="44">ChangeState</name></name><argument_list pos:line="186" pos:column="55">(<argument><expr><name pos:line="186" pos:column="56">SCE_REBOL_PAIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break pos:line="187" pos:column="49">break;</break>
			</case><case pos:line="188" pos:column="25">case <expr><lit:literal type="char" pos:line="188" pos:column="30">':'</lit:literal></expr>:	<expr_stmt><expr><call><name><name pos:line="188" pos:column="41">sc</name><op:operator pos:line="188" pos:column="43">.</op:operator><name pos:line="188" pos:column="44">ChangeState</name></name><argument_list pos:line="188" pos:column="55">(<argument><expr><name pos:line="188" pos:column="56">SCE_REBOL_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break pos:line="189" pos:column="49">break;</break>
			</case><case pos:line="190" pos:column="25">case <expr><lit:literal type="char" pos:line="190" pos:column="30">'-'</lit:literal></expr>:
			</case><case pos:line="191" pos:column="25">case <expr><lit:literal type="char" pos:line="191" pos:column="30">'/'</lit:literal></expr>:	<expr_stmt><expr><call><name><name pos:line="191" pos:column="41">sc</name><op:operator pos:line="191" pos:column="43">.</op:operator><name pos:line="191" pos:column="44">ChangeState</name></name><argument_list pos:line="191" pos:column="55">(<argument><expr><name pos:line="191" pos:column="56">SCE_REBOL_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break pos:line="192" pos:column="49">break;</break>
			</case><case pos:line="193" pos:column="25">case <expr><lit:literal type="char" pos:line="193" pos:column="30">'.'</lit:literal></expr>:	<if pos:line="193" pos:column="41">if <condition pos:line="193" pos:column="44">(<expr><op:operator pos:line="193" pos:column="45">++</op:operator><name pos:line="193" pos:column="47">dotCount</name> <op:operator pos:line="193" pos:column="56">&gt;=</op:operator> <lit:literal type="number" pos:line="193" pos:column="59">2</lit:literal></expr>)</condition><then pos:line="193" pos:column="61"> <expr_stmt><expr><call><name><name pos:line="193" pos:column="62">sc</name><op:operator pos:line="193" pos:column="64">.</op:operator><name pos:line="193" pos:column="65">ChangeState</name></name><argument_list pos:line="193" pos:column="76">(<argument><expr><name pos:line="193" pos:column="77">SCE_REBOL_TUPLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
						<break pos:line="194" pos:column="49">break;</break>
			</case>}</block></switch>
		}</block></then></if></else></if>

		<comment type="line" pos:line="198" pos:column="17">//--- Determine if the current state should terminate</comment>
		<if pos:line="199" pos:column="17">if <condition pos:line="199" pos:column="20">(<expr><name><name pos:line="199" pos:column="21">sc</name><op:operator pos:line="199" pos:column="23">.</op:operator><name pos:line="199" pos:column="24">state</name></name> <op:operator pos:line="199" pos:column="30">==</op:operator> <name pos:line="199" pos:column="33">SCE_REBOL_QUOTEDSTRING</name> <op:operator pos:line="199" pos:column="56">||</op:operator> <name><name pos:line="199" pos:column="59">sc</name><op:operator pos:line="199" pos:column="61">.</op:operator><name pos:line="199" pos:column="62">state</name></name> <op:operator pos:line="199" pos:column="68">==</op:operator> <name pos:line="199" pos:column="71">SCE_REBOL_CHARACTER</name></expr>)</condition><then pos:line="199" pos:column="91"> <block pos:line="199" pos:column="92">{
			<if pos:line="200" pos:column="25">if <condition pos:line="200" pos:column="28">(<expr><name><name pos:line="200" pos:column="29">sc</name><op:operator pos:line="200" pos:column="31">.</op:operator><name pos:line="200" pos:column="32">ch</name></name> <op:operator pos:line="200" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="38">'^'</lit:literal> <op:operator pos:line="200" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="200" pos:column="45">sc</name><op:operator pos:line="200" pos:column="47">.</op:operator><name pos:line="200" pos:column="48">chNext</name></name> <op:operator pos:line="200" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="58">'\"'</lit:literal></expr>)</condition><then pos:line="200" pos:column="63"> <block pos:line="200" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="201" pos:column="33">sc</name><op:operator pos:line="201" pos:column="35">.</op:operator><name pos:line="201" pos:column="36">Forward</name></name><argument_list pos:line="201" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="202" pos:column="27">else <if pos:line="202" pos:column="32">if <condition pos:line="202" pos:column="35">(<expr><name><name pos:line="202" pos:column="36">sc</name><op:operator pos:line="202" pos:column="38">.</op:operator><name pos:line="202" pos:column="39">ch</name></name> <op:operator pos:line="202" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="202" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="202" pos:column="50"> <block pos:line="202" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="203" pos:column="33">sc</name><op:operator pos:line="203" pos:column="35">.</op:operator><name pos:line="203" pos:column="36">ForwardSetState</name></name><argument_list pos:line="203" pos:column="51">(<argument><expr><name pos:line="203" pos:column="52">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="205" pos:column="19">else <if pos:line="205" pos:column="24">if <condition pos:line="205" pos:column="27">(<expr><name><name pos:line="205" pos:column="28">sc</name><op:operator pos:line="205" pos:column="30">.</op:operator><name pos:line="205" pos:column="31">state</name></name> <op:operator pos:line="205" pos:column="37">==</op:operator> <name pos:line="205" pos:column="40">SCE_REBOL_BRACEDSTRING</name> <op:operator pos:line="205" pos:column="63">||</op:operator> <name><name pos:line="205" pos:column="66">sc</name><op:operator pos:line="205" pos:column="68">.</op:operator><name pos:line="205" pos:column="69">state</name></name> <op:operator pos:line="205" pos:column="75">==</op:operator> <name pos:line="205" pos:column="78">SCE_REBOL_COMMENTBLOCK</name></expr>)</condition><then pos:line="205" pos:column="101"> <block pos:line="205" pos:column="102">{
			<if pos:line="206" pos:column="25">if <condition pos:line="206" pos:column="28">(<expr><name><name pos:line="206" pos:column="29">sc</name><op:operator pos:line="206" pos:column="31">.</op:operator><name pos:line="206" pos:column="32">ch</name></name> <op:operator pos:line="206" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="206" pos:column="38">'}'</lit:literal></expr>)</condition><then pos:line="206" pos:column="42"> <block pos:line="206" pos:column="43">{
				<if pos:line="207" pos:column="33">if <condition pos:line="207" pos:column="36">(<expr><op:operator pos:line="207" pos:column="37">--</op:operator><name pos:line="207" pos:column="39">stringLevel</name> <op:operator pos:line="207" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="207" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="207" pos:column="56"> <block pos:line="207" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="208" pos:column="41">sc</name><op:operator pos:line="208" pos:column="43">.</op:operator><name pos:line="208" pos:column="44">ForwardSetState</name></name><argument_list pos:line="208" pos:column="59">(<argument><expr><name pos:line="208" pos:column="60">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="210" pos:column="27">else <if pos:line="210" pos:column="32">if <condition pos:line="210" pos:column="35">(<expr><name><name pos:line="210" pos:column="36">sc</name><op:operator pos:line="210" pos:column="38">.</op:operator><name pos:line="210" pos:column="39">ch</name></name> <op:operator pos:line="210" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="210" pos:column="45">'{'</lit:literal></expr>)</condition><then pos:line="210" pos:column="49"> <block pos:line="210" pos:column="50">{
				<expr_stmt><expr><name pos:line="211" pos:column="33">stringLevel</name><op:operator pos:line="211" pos:column="44">++</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="213" pos:column="19">else <if pos:line="213" pos:column="24">if <condition pos:line="213" pos:column="27">(<expr><name><name pos:line="213" pos:column="28">sc</name><op:operator pos:line="213" pos:column="30">.</op:operator><name pos:line="213" pos:column="31">state</name></name> <op:operator pos:line="213" pos:column="37">==</op:operator> <name pos:line="213" pos:column="40">SCE_REBOL_BINARY</name></expr>)</condition><then pos:line="213" pos:column="57"> <block pos:line="213" pos:column="58">{
			<if pos:line="214" pos:column="25">if <condition pos:line="214" pos:column="28">(<expr><name><name pos:line="214" pos:column="29">sc</name><op:operator pos:line="214" pos:column="31">.</op:operator><name pos:line="214" pos:column="32">ch</name></name> <op:operator pos:line="214" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="214" pos:column="38">'}'</lit:literal></expr>)</condition><then pos:line="214" pos:column="42"> <block pos:line="214" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="215" pos:column="33">sc</name><op:operator pos:line="215" pos:column="35">.</op:operator><name pos:line="215" pos:column="36">ForwardSetState</name></name><argument_list pos:line="215" pos:column="51">(<argument><expr><name pos:line="215" pos:column="52">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="217" pos:column="19">else <if pos:line="217" pos:column="24">if <condition pos:line="217" pos:column="27">(<expr><name><name pos:line="217" pos:column="28">sc</name><op:operator pos:line="217" pos:column="30">.</op:operator><name pos:line="217" pos:column="31">state</name></name> <op:operator pos:line="217" pos:column="37">==</op:operator> <name pos:line="217" pos:column="40">SCE_REBOL_TAG</name></expr>)</condition><then pos:line="217" pos:column="54"> <block pos:line="217" pos:column="55">{
			<if pos:line="218" pos:column="25">if <condition pos:line="218" pos:column="28">(<expr><name><name pos:line="218" pos:column="29">sc</name><op:operator pos:line="218" pos:column="31">.</op:operator><name pos:line="218" pos:column="32">ch</name></name> <op:operator pos:line="218" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="218" pos:column="38">'&gt;'</lit:literal></expr>)</condition><then pos:line="218" pos:column="42"> <block pos:line="218" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="219" pos:column="33">sc</name><op:operator pos:line="219" pos:column="35">.</op:operator><name pos:line="219" pos:column="36">ForwardSetState</name></name><argument_list pos:line="219" pos:column="51">(<argument><expr><name pos:line="219" pos:column="52">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="221" pos:column="19">else <if pos:line="221" pos:column="24">if <condition pos:line="221" pos:column="27">(<expr><name><name pos:line="221" pos:column="28">sc</name><op:operator pos:line="221" pos:column="30">.</op:operator><name pos:line="221" pos:column="31">state</name></name> <op:operator pos:line="221" pos:column="37">==</op:operator> <name pos:line="221" pos:column="40">SCE_REBOL_PREFACE</name></expr>)</condition><then pos:line="221" pos:column="58"> <block pos:line="221" pos:column="59">{
			<if pos:line="222" pos:column="25">if <condition pos:line="222" pos:column="28">(<expr><call><name><name pos:line="222" pos:column="29">sc</name><op:operator pos:line="222" pos:column="31">.</op:operator><name pos:line="222" pos:column="32">MatchIgnoreCase</name></name><argument_list pos:line="222" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="48">"rebol"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="222" pos:column="57">
			<block pos:line="223" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="224" pos:column="33">int</name></type> <name pos:line="224" pos:column="37">i</name></decl>;</decl_stmt>
				<for pos:line="225" pos:column="33">for (<init><expr><name pos:line="225" pos:column="38">i</name><op:operator pos:line="225" pos:column="39">=</op:operator><lit:literal type="number" pos:line="225" pos:column="40">5</lit:literal></expr>;</init> <condition><expr><call><name pos:line="225" pos:column="43">IsASpaceOrTab</name><argument_list pos:line="225" pos:column="56">(<argument><expr><call><name><name pos:line="225" pos:column="57">styler</name><op:operator pos:line="225" pos:column="63">.</op:operator><name pos:line="225" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="225" pos:column="77">(<argument><expr><name><name pos:line="225" pos:column="78">sc</name><op:operator pos:line="225" pos:column="80">.</op:operator><name pos:line="225" pos:column="81">currentPos</name></name><op:operator pos:line="225" pos:column="91">+</op:operator><name pos:line="225" pos:column="92">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="225" pos:column="95">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="225" pos:column="100">i</name><op:operator pos:line="225" pos:column="101">++</op:operator></expr></incr>)<empty_stmt pos:line="225" pos:column="104">;</empty_stmt></for>
				<if pos:line="226" pos:column="33">if <condition pos:line="226" pos:column="36">(<expr><call><name><name pos:line="226" pos:column="37">sc</name><op:operator pos:line="226" pos:column="39">.</op:operator><name pos:line="226" pos:column="40">GetRelative</name></name><argument_list pos:line="226" pos:column="51">(<argument><expr><name pos:line="226" pos:column="52">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="226" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="226" pos:column="58">'['</lit:literal></expr>)</condition><then pos:line="226" pos:column="62">
					<expr_stmt><expr><call><name><name pos:line="227" pos:column="41">sc</name><op:operator pos:line="227" pos:column="43">.</op:operator><name pos:line="227" pos:column="44">SetState</name></name><argument_list pos:line="227" pos:column="52">(<argument><expr><name pos:line="227" pos:column="53">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then></if>
		}</block></then></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="231" pos:column="17">//--- Parens and bracket changes to default style when the current is a number</comment>
		<if pos:line="232" pos:column="17">if <condition pos:line="232" pos:column="20">(<expr><name><name pos:line="232" pos:column="21">sc</name><op:operator pos:line="232" pos:column="23">.</op:operator><name pos:line="232" pos:column="24">state</name></name> <op:operator pos:line="232" pos:column="30">==</op:operator> <name pos:line="232" pos:column="33">SCE_REBOL_NUMBER</name> <op:operator pos:line="232" pos:column="50">||</op:operator> <name><name pos:line="232" pos:column="53">sc</name><op:operator pos:line="232" pos:column="55">.</op:operator><name pos:line="232" pos:column="56">state</name></name> <op:operator pos:line="232" pos:column="62">==</op:operator> <name pos:line="232" pos:column="65">SCE_REBOL_PAIR</name> <op:operator pos:line="232" pos:column="80">||</op:operator> <name><name pos:line="232" pos:column="83">sc</name><op:operator pos:line="232" pos:column="85">.</op:operator><name pos:line="232" pos:column="86">state</name></name> <op:operator pos:line="232" pos:column="92">==</op:operator> <name pos:line="232" pos:column="95">SCE_REBOL_TUPLE</name> <op:operator pos:line="232" pos:column="111">||</op:operator>
			<name><name pos:line="233" pos:column="25">sc</name><op:operator pos:line="233" pos:column="27">.</op:operator><name pos:line="233" pos:column="28">state</name></name> <op:operator pos:line="233" pos:column="34">==</op:operator> <name pos:line="233" pos:column="37">SCE_REBOL_MONEY</name> <op:operator pos:line="233" pos:column="53">||</op:operator> <name><name pos:line="233" pos:column="56">sc</name><op:operator pos:line="233" pos:column="58">.</op:operator><name pos:line="233" pos:column="59">state</name></name> <op:operator pos:line="233" pos:column="65">==</op:operator> <name pos:line="233" pos:column="68">SCE_REBOL_ISSUE</name> <op:operator pos:line="233" pos:column="84">||</op:operator> <name><name pos:line="233" pos:column="87">sc</name><op:operator pos:line="233" pos:column="89">.</op:operator><name pos:line="233" pos:column="90">state</name></name> <op:operator pos:line="233" pos:column="96">==</op:operator> <name pos:line="233" pos:column="99">SCE_REBOL_EMAIL</name> <op:operator pos:line="233" pos:column="115">||</op:operator>
			<name><name pos:line="234" pos:column="25">sc</name><op:operator pos:line="234" pos:column="27">.</op:operator><name pos:line="234" pos:column="28">state</name></name> <op:operator pos:line="234" pos:column="34">==</op:operator> <name pos:line="234" pos:column="37">SCE_REBOL_URL</name> <op:operator pos:line="234" pos:column="51">||</op:operator> <name><name pos:line="234" pos:column="54">sc</name><op:operator pos:line="234" pos:column="56">.</op:operator><name pos:line="234" pos:column="57">state</name></name> <op:operator pos:line="234" pos:column="63">==</op:operator> <name pos:line="234" pos:column="66">SCE_REBOL_DATE</name> <op:operator pos:line="234" pos:column="81">||</op:operator> <name><name pos:line="234" pos:column="84">sc</name><op:operator pos:line="234" pos:column="86">.</op:operator><name pos:line="234" pos:column="87">state</name></name> <op:operator pos:line="234" pos:column="93">==</op:operator> <name pos:line="234" pos:column="96">SCE_REBOL_TIME</name></expr>)</condition><then pos:line="234" pos:column="111"> <block pos:line="234" pos:column="112">{
			<if pos:line="235" pos:column="25">if <condition pos:line="235" pos:column="28">(<expr><name><name pos:line="235" pos:column="29">sc</name><op:operator pos:line="235" pos:column="31">.</op:operator><name pos:line="235" pos:column="32">ch</name></name> <op:operator pos:line="235" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="235" pos:column="38">'('</lit:literal> <op:operator pos:line="235" pos:column="42">||</op:operator> <name><name pos:line="235" pos:column="45">sc</name><op:operator pos:line="235" pos:column="47">.</op:operator><name pos:line="235" pos:column="48">ch</name></name> <op:operator pos:line="235" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="235" pos:column="54">'['</lit:literal> <op:operator pos:line="235" pos:column="58">||</op:operator> <name><name pos:line="235" pos:column="61">sc</name><op:operator pos:line="235" pos:column="63">.</op:operator><name pos:line="235" pos:column="64">ch</name></name> <op:operator pos:line="235" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="235" pos:column="70">')'</lit:literal> <op:operator pos:line="235" pos:column="74">||</op:operator> <name><name pos:line="235" pos:column="77">sc</name><op:operator pos:line="235" pos:column="79">.</op:operator><name pos:line="235" pos:column="80">ch</name></name> <op:operator pos:line="235" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="235" pos:column="86">']'</lit:literal></expr>)</condition><then pos:line="235" pos:column="90"> <block pos:line="235" pos:column="91">{
				<expr_stmt><expr><call><name><name pos:line="236" pos:column="33">sc</name><op:operator pos:line="236" pos:column="35">.</op:operator><name pos:line="236" pos:column="36">SetState</name></name><argument_list pos:line="236" pos:column="44">(<argument><expr><name pos:line="236" pos:column="45">SCE_REBOL_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="240" pos:column="17">//--- Determine if a new state should be entered.</comment>
		<if pos:line="241" pos:column="17">if <condition pos:line="241" pos:column="20">(<expr><name><name pos:line="241" pos:column="21">sc</name><op:operator pos:line="241" pos:column="23">.</op:operator><name pos:line="241" pos:column="24">state</name></name> <op:operator pos:line="241" pos:column="30">==</op:operator> <name pos:line="241" pos:column="33">SCE_REBOL_DEFAULT</name></expr>)</condition><then pos:line="241" pos:column="51"> <block pos:line="241" pos:column="52">{
			<if pos:line="242" pos:column="25">if <condition pos:line="242" pos:column="28">(<expr><call><name pos:line="242" pos:column="29">IsAnOperator</name><argument_list pos:line="242" pos:column="41">(<argument><expr><name><name pos:line="242" pos:column="42">sc</name><op:operator pos:line="242" pos:column="44">.</op:operator><name pos:line="242" pos:column="45">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="242" pos:column="49">sc</name><op:operator pos:line="242" pos:column="51">.</op:operator><name pos:line="242" pos:column="52">chNext</name></name></expr></argument>, <argument><expr><call><name><name pos:line="242" pos:column="60">sc</name><op:operator pos:line="242" pos:column="62">.</op:operator><name pos:line="242" pos:column="63">GetRelative</name></name><argument_list pos:line="242" pos:column="74">(<argument><expr><lit:literal type="number" pos:line="242" pos:column="75">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="242" pos:column="79"> <block pos:line="242" pos:column="80">{
				<expr_stmt><expr><call><name><name pos:line="243" pos:column="33">sc</name><op:operator pos:line="243" pos:column="35">.</op:operator><name pos:line="243" pos:column="36">SetState</name></name><argument_list pos:line="243" pos:column="44">(<argument><expr><name pos:line="243" pos:column="45">SCE_REBOL_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="244" pos:column="27">else <if pos:line="244" pos:column="32">if <condition pos:line="244" pos:column="35">(<expr><call><name pos:line="244" pos:column="36">IsBinaryStart</name><argument_list pos:line="244" pos:column="49">(<argument><expr><name><name pos:line="244" pos:column="50">sc</name><op:operator pos:line="244" pos:column="52">.</op:operator><name pos:line="244" pos:column="53">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="244" pos:column="57">sc</name><op:operator pos:line="244" pos:column="59">.</op:operator><name pos:line="244" pos:column="60">chNext</name></name></expr></argument>, <argument><expr><call><name><name pos:line="244" pos:column="68">sc</name><op:operator pos:line="244" pos:column="70">.</op:operator><name pos:line="244" pos:column="71">GetRelative</name></name><argument_list pos:line="244" pos:column="82">(<argument><expr><lit:literal type="number" pos:line="244" pos:column="83">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="244" pos:column="87">sc</name><op:operator pos:line="244" pos:column="89">.</op:operator><name pos:line="244" pos:column="90">GetRelative</name></name><argument_list pos:line="244" pos:column="101">(<argument><expr><lit:literal type="number" pos:line="244" pos:column="102">3</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="244" pos:column="106"> <block pos:line="244" pos:column="107">{
				<expr_stmt><expr><call><name><name pos:line="245" pos:column="33">sc</name><op:operator pos:line="245" pos:column="35">.</op:operator><name pos:line="245" pos:column="36">SetState</name></name><argument_list pos:line="245" pos:column="44">(<argument><expr><name pos:line="245" pos:column="45">SCE_REBOL_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="246" pos:column="27">else <if pos:line="246" pos:column="32">if <condition pos:line="246" pos:column="35">(<expr><call><name pos:line="246" pos:column="36">IsAWordStart</name><argument_list pos:line="246" pos:column="48">(<argument><expr><name><name pos:line="246" pos:column="49">sc</name><op:operator pos:line="246" pos:column="51">.</op:operator><name pos:line="246" pos:column="52">ch</name></name></expr></argument>, <argument><expr><name><name pos:line="246" pos:column="56">sc</name><op:operator pos:line="246" pos:column="58">.</op:operator><name pos:line="246" pos:column="59">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="246" pos:column="67"> <block pos:line="246" pos:column="68">{
				<expr_stmt><expr><call><name><name pos:line="247" pos:column="33">sc</name><op:operator pos:line="247" pos:column="35">.</op:operator><name pos:line="247" pos:column="36">SetState</name></name><argument_list pos:line="247" pos:column="44">(<argument><expr><name pos:line="247" pos:column="45">SCE_REBOL_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="248" pos:column="27">else <if pos:line="248" pos:column="32">if <condition pos:line="248" pos:column="35">(<expr><call><name pos:line="248" pos:column="36">IsADigit</name><argument_list pos:line="248" pos:column="44">(<argument><expr><name><name pos:line="248" pos:column="45">sc</name><op:operator pos:line="248" pos:column="47">.</op:operator><name pos:line="248" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="248" pos:column="52">||</op:operator> <name><name pos:line="248" pos:column="55">sc</name><op:operator pos:line="248" pos:column="57">.</op:operator><name pos:line="248" pos:column="58">ch</name></name> <op:operator pos:line="248" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="64">'+'</lit:literal> <op:operator pos:line="248" pos:column="68">||</op:operator> <name><name pos:line="248" pos:column="71">sc</name><op:operator pos:line="248" pos:column="73">.</op:operator><name pos:line="248" pos:column="74">ch</name></name> <op:operator pos:line="248" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="80">'-'</lit:literal> <op:operator pos:line="248" pos:column="84">||</op:operator> <comment type="block" pos:line="248" pos:column="87">/*Decimal*/</comment> <name><name pos:line="248" pos:column="99">sc</name><op:operator pos:line="248" pos:column="101">.</op:operator><name pos:line="248" pos:column="102">ch</name></name> <op:operator pos:line="248" pos:column="105">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="108">'.'</lit:literal> <op:operator pos:line="248" pos:column="112">||</op:operator> <name><name pos:line="248" pos:column="115">sc</name><op:operator pos:line="248" pos:column="117">.</op:operator><name pos:line="248" pos:column="118">ch</name></name> <op:operator pos:line="248" pos:column="121">==</op:operator> <lit:literal type="char" pos:line="248" pos:column="124">','</lit:literal></expr>)</condition><then pos:line="248" pos:column="128"> <block pos:line="248" pos:column="129">{
				<expr_stmt><expr><name pos:line="249" pos:column="33">dotCount</name> <op:operator pos:line="249" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="249" pos:column="44">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="250" pos:column="33">sc</name><op:operator pos:line="250" pos:column="35">.</op:operator><name pos:line="250" pos:column="36">SetState</name></name><argument_list pos:line="250" pos:column="44">(<argument><expr><name pos:line="250" pos:column="45">SCE_REBOL_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="251" pos:column="27">else <if pos:line="251" pos:column="32">if <condition pos:line="251" pos:column="35">(<expr><name><name pos:line="251" pos:column="36">sc</name><op:operator pos:line="251" pos:column="38">.</op:operator><name pos:line="251" pos:column="39">ch</name></name> <op:operator pos:line="251" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="251" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="251" pos:column="50"> <block pos:line="251" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="252" pos:column="33">sc</name><op:operator pos:line="252" pos:column="35">.</op:operator><name pos:line="252" pos:column="36">SetState</name></name><argument_list pos:line="252" pos:column="44">(<argument><expr><name pos:line="252" pos:column="45">SCE_REBOL_QUOTEDSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="253" pos:column="27">else <if pos:line="253" pos:column="32">if <condition pos:line="253" pos:column="35">(<expr><name><name pos:line="253" pos:column="36">sc</name><op:operator pos:line="253" pos:column="38">.</op:operator><name pos:line="253" pos:column="39">ch</name></name> <op:operator pos:line="253" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="253" pos:column="45">'{'</lit:literal></expr>)</condition><then pos:line="253" pos:column="49"> <block pos:line="253" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="254" pos:column="33">sc</name><op:operator pos:line="254" pos:column="35">.</op:operator><name pos:line="254" pos:column="36">SetState</name></name><argument_list pos:line="254" pos:column="44">(<argument><expr><name pos:line="254" pos:column="45">blockComment</name> <op:operator pos:line="254" pos:column="58">?</op:operator> <name pos:line="254" pos:column="60">SCE_REBOL_COMMENTBLOCK</name> <op:operator pos:line="254" pos:column="83">:</op:operator> <name pos:line="254" pos:column="85">SCE_REBOL_BRACEDSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="255" pos:column="33">++</op:operator><name pos:line="255" pos:column="35">stringLevel</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="256" pos:column="27">else <if pos:line="256" pos:column="32">if <condition pos:line="256" pos:column="35">(<expr><name><name pos:line="256" pos:column="36">sc</name><op:operator pos:line="256" pos:column="38">.</op:operator><name pos:line="256" pos:column="39">ch</name></name> <op:operator pos:line="256" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="256" pos:column="45">';'</lit:literal></expr>)</condition><then pos:line="256" pos:column="49"> <block pos:line="256" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="257" pos:column="33">sc</name><op:operator pos:line="257" pos:column="35">.</op:operator><name pos:line="257" pos:column="36">SetState</name></name><argument_list pos:line="257" pos:column="44">(<argument><expr><name pos:line="257" pos:column="45">SCE_REBOL_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="258" pos:column="27">else <if pos:line="258" pos:column="32">if <condition pos:line="258" pos:column="35">(<expr><name><name pos:line="258" pos:column="36">sc</name><op:operator pos:line="258" pos:column="38">.</op:operator><name pos:line="258" pos:column="39">ch</name></name> <op:operator pos:line="258" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="258" pos:column="45">'$'</lit:literal></expr>)</condition><then pos:line="258" pos:column="49"> <block pos:line="258" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="259" pos:column="33">sc</name><op:operator pos:line="259" pos:column="35">.</op:operator><name pos:line="259" pos:column="36">SetState</name></name><argument_list pos:line="259" pos:column="44">(<argument><expr><name pos:line="259" pos:column="45">SCE_REBOL_MONEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="260" pos:column="27">else <if pos:line="260" pos:column="32">if <condition pos:line="260" pos:column="35">(<expr><name><name pos:line="260" pos:column="36">sc</name><op:operator pos:line="260" pos:column="38">.</op:operator><name pos:line="260" pos:column="39">ch</name></name> <op:operator pos:line="260" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="260" pos:column="45">'%'</lit:literal></expr>)</condition><then pos:line="260" pos:column="49"> <block pos:line="260" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="261" pos:column="33">sc</name><op:operator pos:line="261" pos:column="35">.</op:operator><name pos:line="261" pos:column="36">SetState</name></name><argument_list pos:line="261" pos:column="44">(<argument><expr><name pos:line="261" pos:column="45">SCE_REBOL_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="262" pos:column="27">else <if pos:line="262" pos:column="32">if <condition pos:line="262" pos:column="35">(<expr><name><name pos:line="262" pos:column="36">sc</name><op:operator pos:line="262" pos:column="38">.</op:operator><name pos:line="262" pos:column="39">ch</name></name> <op:operator pos:line="262" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="45">'&lt;'</lit:literal></expr>)</condition><then pos:line="262" pos:column="49"> <block pos:line="262" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="263" pos:column="33">sc</name><op:operator pos:line="263" pos:column="35">.</op:operator><name pos:line="263" pos:column="36">SetState</name></name><argument_list pos:line="263" pos:column="44">(<argument><expr><name pos:line="263" pos:column="45">SCE_REBOL_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="264" pos:column="27">else <if pos:line="264" pos:column="32">if <condition pos:line="264" pos:column="35">(<expr><name><name pos:line="264" pos:column="36">sc</name><op:operator pos:line="264" pos:column="38">.</op:operator><name pos:line="264" pos:column="39">ch</name></name> <op:operator pos:line="264" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="45">'#'</lit:literal> <op:operator pos:line="264" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="264" pos:column="52">sc</name><op:operator pos:line="264" pos:column="54">.</op:operator><name pos:line="264" pos:column="55">chNext</name></name> <op:operator pos:line="264" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="65">'"'</lit:literal></expr>)</condition><then pos:line="264" pos:column="69"> <block pos:line="264" pos:column="70">{
				<expr_stmt><expr><call><name><name pos:line="265" pos:column="33">sc</name><op:operator pos:line="265" pos:column="35">.</op:operator><name pos:line="265" pos:column="36">SetState</name></name><argument_list pos:line="265" pos:column="44">(<argument><expr><name pos:line="265" pos:column="45">SCE_REBOL_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="266" pos:column="33">sc</name><op:operator pos:line="266" pos:column="35">.</op:operator><name pos:line="266" pos:column="36">Forward</name></name><argument_list pos:line="266" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="267" pos:column="27">else <if pos:line="267" pos:column="32">if <condition pos:line="267" pos:column="35">(<expr><name><name pos:line="267" pos:column="36">sc</name><op:operator pos:line="267" pos:column="38">.</op:operator><name pos:line="267" pos:column="39">ch</name></name> <op:operator pos:line="267" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="267" pos:column="45">'#'</lit:literal> <op:operator pos:line="267" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="267" pos:column="52">sc</name><op:operator pos:line="267" pos:column="54">.</op:operator><name pos:line="267" pos:column="55">chNext</name></name> <op:operator pos:line="267" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="267" pos:column="65">'"'</lit:literal> <op:operator pos:line="267" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="267" pos:column="72">sc</name><op:operator pos:line="267" pos:column="74">.</op:operator><name pos:line="267" pos:column="75">chNext</name></name> <op:operator pos:line="267" pos:column="82">!=</op:operator> <lit:literal type="char" pos:line="267" pos:column="85">'{'</lit:literal></expr> )</condition><then pos:line="267" pos:column="90"> <block pos:line="267" pos:column="91">{
				<expr_stmt><expr><call><name><name pos:line="268" pos:column="33">sc</name><op:operator pos:line="268" pos:column="35">.</op:operator><name pos:line="268" pos:column="36">SetState</name></name><argument_list pos:line="268" pos:column="44">(<argument><expr><name pos:line="268" pos:column="45">SCE_REBOL_ISSUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="272" pos:column="9">sc</name><op:operator pos:line="272" pos:column="11">.</op:operator><name pos:line="272" pos:column="12">Complete</name></name><argument_list pos:line="272" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><specifier pos:line="276" pos:column="1">static</specifier> <name pos:line="276" pos:column="8">void</name></type> <name pos:line="276" pos:column="13">FoldRebolDoc</name><parameter_list pos:line="276" pos:column="25">(<param><decl><type><name pos:line="276" pos:column="26">unsigned</name> <name pos:line="276" pos:column="35">int</name></type> <name pos:line="276" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="276" pos:column="49">int</name></type> <name pos:line="276" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="276" pos:column="61">int</name></type></decl></param> <comment type="block" pos:line="276" pos:column="65">/* initStyle */</comment>, <param><decl><type><name><name pos:line="276" pos:column="82">WordList</name> <type:modifier pos:line="276" pos:column="91">*</type:modifier><index pos:line="276" pos:column="92">[]</index></name></type></decl></param>,
                            <param><decl><type><name pos:line="277" pos:column="29">Accessor</name> <type:modifier pos:line="277" pos:column="38">&amp;</type:modifier></type><name pos:line="277" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="277" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="278" pos:column="9">unsigned</name> <name pos:line="278" pos:column="18">int</name></type> <name pos:line="278" pos:column="22">lengthDoc</name> <init pos:line="278" pos:column="32">= <expr><name pos:line="278" pos:column="34">startPos</name> <op:operator pos:line="278" pos:column="43">+</op:operator> <name pos:line="278" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="279" pos:column="9">int</name></type> <name pos:line="279" pos:column="13">visibleChars</name> <init pos:line="279" pos:column="26">= <expr><lit:literal type="number" pos:line="279" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="280" pos:column="9">int</name></type> <name pos:line="280" pos:column="13">lineCurrent</name> <init pos:line="280" pos:column="25">= <expr><call><name><name pos:line="280" pos:column="27">styler</name><op:operator pos:line="280" pos:column="33">.</op:operator><name pos:line="280" pos:column="34">GetLine</name></name><argument_list pos:line="280" pos:column="41">(<argument><expr><name pos:line="280" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="281" pos:column="9">int</name></type> <name pos:line="281" pos:column="13">levelPrev</name> <init pos:line="281" pos:column="23">= <expr><call><name><name pos:line="281" pos:column="25">styler</name><op:operator pos:line="281" pos:column="31">.</op:operator><name pos:line="281" pos:column="32">LevelAt</name></name><argument_list pos:line="281" pos:column="39">(<argument><expr><name pos:line="281" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="281" pos:column="53">&amp;</op:operator> <name pos:line="281" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="282" pos:column="9">int</name></type> <name pos:line="282" pos:column="13">levelCurrent</name> <init pos:line="282" pos:column="26">= <expr><name pos:line="282" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="283" pos:column="9">char</name></type> <name pos:line="283" pos:column="14">chNext</name> <init pos:line="283" pos:column="21">= <expr><name><name pos:line="283" pos:column="23">styler</name><index pos:line="283" pos:column="29">[<expr><name pos:line="283" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="284" pos:column="9">int</name></type> <name pos:line="284" pos:column="13">styleNext</name> <init pos:line="284" pos:column="23">= <expr><call><name><name pos:line="284" pos:column="25">styler</name><op:operator pos:line="284" pos:column="31">.</op:operator><name pos:line="284" pos:column="32">StyleAt</name></name><argument_list pos:line="284" pos:column="39">(<argument><expr><name pos:line="284" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="285" pos:column="9">for (<init><decl><type><name pos:line="285" pos:column="14">unsigned</name> <name pos:line="285" pos:column="23">int</name></type> <name pos:line="285" pos:column="27">i</name> <init pos:line="285" pos:column="29">= <expr><name pos:line="285" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="285" pos:column="41">i</name> <op:operator pos:line="285" pos:column="43">&lt;</op:operator> <name pos:line="285" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="285" pos:column="56">i</name><op:operator pos:line="285" pos:column="57">++</op:operator></expr></incr>) <block pos:line="285" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="286" pos:column="17">char</name></type> <name pos:line="286" pos:column="22">ch</name> <init pos:line="286" pos:column="25">= <expr><name pos:line="286" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="287" pos:column="17">chNext</name> <op:operator pos:line="287" pos:column="24">=</op:operator> <call><name><name pos:line="287" pos:column="26">styler</name><op:operator pos:line="287" pos:column="32">.</op:operator><name pos:line="287" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="287" pos:column="46">(<argument><expr><name pos:line="287" pos:column="47">i</name> <op:operator pos:line="287" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="287" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="288" pos:column="17">int</name></type> <name pos:line="288" pos:column="21">style</name> <init pos:line="288" pos:column="27">= <expr><name pos:line="288" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="289" pos:column="17">styleNext</name> <op:operator pos:line="289" pos:column="27">=</op:operator> <call><name><name pos:line="289" pos:column="29">styler</name><op:operator pos:line="289" pos:column="35">.</op:operator><name pos:line="289" pos:column="36">StyleAt</name></name><argument_list pos:line="289" pos:column="43">(<argument><expr><name pos:line="289" pos:column="44">i</name> <op:operator pos:line="289" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="289" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="290" pos:column="17">bool</name></type> <name pos:line="290" pos:column="22">atEOL</name> <init pos:line="290" pos:column="28">= <expr><op:operator pos:line="290" pos:column="30">(</op:operator><name pos:line="290" pos:column="31">ch</name> <op:operator pos:line="290" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="290" pos:column="37">'\r'</lit:literal> <op:operator pos:line="290" pos:column="42">&amp;&amp;</op:operator> <name pos:line="290" pos:column="45">chNext</name> <op:operator pos:line="290" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="290" pos:column="55">'\n'</lit:literal><op:operator pos:line="290" pos:column="59">)</op:operator> <op:operator pos:line="290" pos:column="61">||</op:operator> <op:operator pos:line="290" pos:column="64">(</op:operator><name pos:line="290" pos:column="65">ch</name> <op:operator pos:line="290" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="290" pos:column="71">'\n'</lit:literal><op:operator pos:line="290" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="291" pos:column="17">if <condition pos:line="291" pos:column="20">(<expr><name pos:line="291" pos:column="21">style</name> <op:operator pos:line="291" pos:column="27">==</op:operator> <name pos:line="291" pos:column="30">SCE_REBOL_DEFAULT</name></expr>)</condition><then pos:line="291" pos:column="48"> <block pos:line="291" pos:column="49">{
			<if pos:line="292" pos:column="25">if <condition pos:line="292" pos:column="28">(<expr><name pos:line="292" pos:column="29">ch</name> <op:operator pos:line="292" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="292" pos:column="35">'['</lit:literal></expr>)</condition><then pos:line="292" pos:column="39"> <block pos:line="292" pos:column="40">{
				<expr_stmt><expr><name pos:line="293" pos:column="33">levelCurrent</name><op:operator pos:line="293" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="294" pos:column="27">else <if pos:line="294" pos:column="32">if <condition pos:line="294" pos:column="35">(<expr><name pos:line="294" pos:column="36">ch</name> <op:operator pos:line="294" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="294" pos:column="42">']'</lit:literal></expr>)</condition><then pos:line="294" pos:column="46"> <block pos:line="294" pos:column="47">{
				<expr_stmt><expr><name pos:line="295" pos:column="33">levelCurrent</name><op:operator pos:line="295" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="298" pos:column="17">if <condition pos:line="298" pos:column="20">(<expr><name pos:line="298" pos:column="21">atEOL</name></expr>)</condition><then pos:line="298" pos:column="27"> <block pos:line="298" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="299" pos:column="25">int</name></type> <name pos:line="299" pos:column="29">lev</name> <init pos:line="299" pos:column="33">= <expr><name pos:line="299" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="300" pos:column="25">if <condition pos:line="300" pos:column="28">(<expr><name pos:line="300" pos:column="29">visibleChars</name> <op:operator pos:line="300" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="300" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="300" pos:column="47">
				<expr_stmt><expr><name pos:line="301" pos:column="33">lev</name> <op:operator pos:line="301" pos:column="37">|=</op:operator> <name pos:line="301" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="302" pos:column="25">if <condition pos:line="302" pos:column="28">(<expr><op:operator pos:line="302" pos:column="29">(</op:operator><name pos:line="302" pos:column="30">levelCurrent</name> <op:operator pos:line="302" pos:column="43">&gt;</op:operator> <name pos:line="302" pos:column="45">levelPrev</name><op:operator pos:line="302" pos:column="54">)</op:operator> <op:operator pos:line="302" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="302" pos:column="59">(</op:operator><name pos:line="302" pos:column="60">visibleChars</name> <op:operator pos:line="302" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="302" pos:column="75">0</lit:literal><op:operator pos:line="302" pos:column="76">)</op:operator></expr>)</condition><then pos:line="302" pos:column="78">
				<expr_stmt><expr><name pos:line="303" pos:column="33">lev</name> <op:operator pos:line="303" pos:column="37">|=</op:operator> <name pos:line="303" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="304" pos:column="25">if <condition pos:line="304" pos:column="28">(<expr><name pos:line="304" pos:column="29">lev</name> <op:operator pos:line="304" pos:column="33">!=</op:operator> <call><name><name pos:line="304" pos:column="36">styler</name><op:operator pos:line="304" pos:column="42">.</op:operator><name pos:line="304" pos:column="43">LevelAt</name></name><argument_list pos:line="304" pos:column="50">(<argument><expr><name pos:line="304" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="304" pos:column="64"> <block pos:line="304" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="305" pos:column="33">styler</name><op:operator pos:line="305" pos:column="39">.</op:operator><name pos:line="305" pos:column="40">SetLevel</name></name><argument_list pos:line="305" pos:column="48">(<argument><expr><name pos:line="305" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="307" pos:column="25">lineCurrent</name><op:operator pos:line="307" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="308" pos:column="25">levelPrev</name> <op:operator pos:line="308" pos:column="35">=</op:operator> <name pos:line="308" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="309" pos:column="25">visibleChars</name> <op:operator pos:line="309" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="309" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="311" pos:column="17">if <condition pos:line="311" pos:column="20">(<expr><op:operator pos:line="311" pos:column="21">!</op:operator><call><name pos:line="311" pos:column="22">isspacechar</name><argument_list pos:line="311" pos:column="33">(<argument><expr><name pos:line="311" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="311" pos:column="38">
			<expr_stmt><expr><name pos:line="312" pos:column="25">visibleChars</name><op:operator pos:line="312" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="314" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="315" pos:column="9">int</name></type> <name pos:line="315" pos:column="13">flagsNext</name> <init pos:line="315" pos:column="23">= <expr><call><name><name pos:line="315" pos:column="25">styler</name><op:operator pos:line="315" pos:column="31">.</op:operator><name pos:line="315" pos:column="32">LevelAt</name></name><argument_list pos:line="315" pos:column="39">(<argument><expr><name pos:line="315" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="315" pos:column="53">&amp;</op:operator> <op:operator pos:line="315" pos:column="55">~</op:operator><name pos:line="315" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="316" pos:column="9">styler</name><op:operator pos:line="316" pos:column="15">.</op:operator><name pos:line="316" pos:column="16">SetLevel</name></name><argument_list pos:line="316" pos:column="24">(<argument><expr><name pos:line="316" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="316" pos:column="38">levelPrev</name> <op:operator pos:line="316" pos:column="48">|</op:operator> <name pos:line="316" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="319" pos:column="1">static</specifier> <specifier pos:line="319" pos:column="8">const</specifier> <name pos:line="319" pos:column="14">char</name> <type:modifier pos:line="319" pos:column="19">*</type:modifier> <specifier pos:line="319" pos:column="21">const</specifier></type> <name><name pos:line="319" pos:column="27">rebolWordListDesc</name><index pos:line="319" pos:column="44">[]</index></name> <init pos:line="319" pos:column="47">= <expr><block pos:line="319" pos:column="49">{
	<expr><lit:literal type="string" pos:line="320" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="321" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="324" pos:column="1">LexerModule</name></type> <name pos:line="324" pos:column="13">lmREBOL</name><argument_list pos:line="324" pos:column="20">(<argument><expr><name pos:line="324" pos:column="21">SCLEX_REBOL</name></expr></argument>, <argument><expr><name pos:line="324" pos:column="34">ColouriseRebolDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="324" pos:column="53">"rebol"</lit:literal></expr></argument>, <argument><expr><name pos:line="324" pos:column="62">FoldRebolDoc</name></expr></argument>, <argument><expr><name pos:line="324" pos:column="76">rebolWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
