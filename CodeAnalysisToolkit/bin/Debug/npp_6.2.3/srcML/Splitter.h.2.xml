<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\SplitterContainer\Splitter.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">SPLITTER_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">SPLITTER_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">RESOURCE_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"resource.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//RESOURCE_H</comment>

<cpp:define pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="36" pos:column="9">SV_HORIZONTAL</name></cpp:macro>		<cpp:value pos:line="36" pos:column="33">0x00000001</cpp:value></cpp:define>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">SV_VERTICAL</name></cpp:macro>			<cpp:value pos:line="37" pos:column="41">0x00000002</cpp:value></cpp:define>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">SV_FIXED</name></cpp:macro>			<cpp:value pos:line="38" pos:column="41">0x00000004</cpp:value></cpp:define>
<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">SV_ENABLERDBLCLK</name></cpp:macro>	<cpp:value pos:line="39" pos:column="33">0x00000008</cpp:value></cpp:define>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">SV_ENABLELDBLCLK</name></cpp:macro>	<cpp:value pos:line="40" pos:column="33">0x00000010</cpp:value></cpp:define>
<cpp:define pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="41" pos:column="9">SV_RESIZEWTHPERCNT</name></cpp:macro>	<cpp:value pos:line="41" pos:column="33">0x00000020</cpp:value></cpp:define>


<cpp:define pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="44" pos:column="9">WM_GETSPLITTER_X</name></cpp:macro>		<cpp:value pos:line="44" pos:column="41">(SPLITTER_USER + 1)</cpp:value></cpp:define>
<cpp:define pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="45" pos:column="9">WM_GETSPLITTER_Y</name></cpp:macro>		<cpp:value pos:line="45" pos:column="41">(SPLITTER_USER + 2)</cpp:value></cpp:define>
<cpp:define pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="46" pos:column="9">WM_DOPOPUPMENU</name></cpp:macro>			<cpp:value pos:line="46" pos:column="41">(SPLITTER_USER + 3)</cpp:value></cpp:define>
<cpp:define pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="47" pos:column="9">WM_RESIZE_CONTAINER</name></cpp:macro>		<cpp:value pos:line="47" pos:column="41">(SPLITTER_USER + 4)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier pos:line="49" pos:column="1">const</specifier> <name pos:line="49" pos:column="7">int</name></type> <name pos:line="49" pos:column="11">HIEGHT_MINIMAL</name> <init pos:line="49" pos:column="26">= <expr><lit:literal type="number" pos:line="49" pos:column="28">15</lit:literal></expr></init></decl>;</decl_stmt>

<enum pos:line="51" pos:column="1">enum <name pos:line="51" pos:column="6">Arrow</name> <block pos:line="51" pos:column="12">{<decl><name pos:line="51" pos:column="13">ARROW_LEFT</name></decl><op:operator pos:line="51" pos:column="23">,</op:operator> <decl><name pos:line="51" pos:column="25">ARROW_UP</name></decl><op:operator pos:line="51" pos:column="33">,</op:operator> <decl><name pos:line="51" pos:column="35">ARROW_RIGHT</name></decl><op:operator pos:line="51" pos:column="46">,</op:operator> <decl><name pos:line="51" pos:column="48">ARROW_DOWN</name></decl>}</block>;</enum>

<typedef pos:line="53" pos:column="1">typedef <type><name pos:line="53" pos:column="9">bool</name></type> <name pos:line="53" pos:column="14">WH</name>;</typedef>
<decl_stmt><decl><type><specifier pos:line="54" pos:column="1">const</specifier> <name pos:line="54" pos:column="7">bool</name></type> <name pos:line="54" pos:column="12">WIDTH</name> <init pos:line="54" pos:column="18">= <expr><lit:literal type="boolean" pos:line="54" pos:column="20">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="55" pos:column="1">const</specifier> <name pos:line="55" pos:column="7">bool</name></type> <name pos:line="55" pos:column="12">HEIGHT</name> <init pos:line="55" pos:column="19">= <expr><lit:literal type="boolean" pos:line="55" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt>

<typedef pos:line="57" pos:column="1">typedef <type><name pos:line="57" pos:column="9">bool</name></type> <name pos:line="57" pos:column="14">ZONE_TYPE</name>;</typedef>
<decl_stmt><decl><type><specifier pos:line="58" pos:column="1">const</specifier> <name pos:line="58" pos:column="7">bool</name></type> <name pos:line="58" pos:column="12">TOP_LEFT</name> <init pos:line="58" pos:column="21">= <expr><lit:literal type="boolean" pos:line="58" pos:column="23">true</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="59" pos:column="1">const</specifier> <name pos:line="59" pos:column="7">bool</name></type> <name pos:line="59" pos:column="12">BOTTOM_RIGHT</name> <init pos:line="59" pos:column="25">= <expr><lit:literal type="boolean" pos:line="59" pos:column="27">false</lit:literal></expr></init></decl>;</decl_stmt>

<enum pos:line="61" pos:column="1">enum <name pos:line="61" pos:column="6">SplitterMode</name> <block pos:line="61" pos:column="19">{
    <decl><name pos:line="62" pos:column="5">DYNAMIC</name></decl><op:operator pos:line="62" pos:column="12">,</op:operator> <decl><name pos:line="62" pos:column="14">LEFT_FIX</name></decl><op:operator pos:line="62" pos:column="22">,</op:operator> <decl><name pos:line="62" pos:column="24">RIGHT_FIX</name></decl>
}</block>;</enum>

<class pos:line="65" pos:column="1">class <name pos:line="65" pos:column="7">Splitter</name> <super pos:line="65" pos:column="16">: <specifier pos:line="65" pos:column="18">public</specifier> <name pos:line="65" pos:column="25">Window</name></super>
<block pos:line="66" pos:column="1">{<private type="default" pos:line="66" pos:column="2">
</private><public pos:line="67" pos:column="1">public:	
	<constructor_decl><name pos:line="68" pos:column="9">Splitter</name><parameter_list pos:line="68" pos:column="17">()</parameter_list>;</constructor_decl>
	<destructor><name pos:line="69" pos:column="9">~<name pos:line="69" pos:column="10">Splitter</name></name><parameter_list pos:line="69" pos:column="18">()</parameter_list><block pos:line="69" pos:column="20">{}</block></destructor><empty_stmt pos:line="69" pos:column="22">;</empty_stmt>
	<function><type><name pos:line="70" pos:column="9">void</name></type> <name pos:line="70" pos:column="14">destroy</name><parameter_list pos:line="70" pos:column="21">()</parameter_list> <block pos:line="70" pos:column="24">{
		<expr_stmt><expr><call><name><op:operator pos:line="71" pos:column="17">::</op:operator><name pos:line="71" pos:column="19">DestroyWindow</name></name><argument_list pos:line="71" pos:column="32">(<argument><expr><name pos:line="71" pos:column="33">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="72" pos:column="10">;</empty_stmt>
	<function_decl><type><name pos:line="73" pos:column="9">void</name></type> <name pos:line="73" pos:column="14">resizeSpliter</name><parameter_list pos:line="73" pos:column="27">(<param><decl><type><name pos:line="73" pos:column="28">RECT</name> <type:modifier pos:line="73" pos:column="33">*</type:modifier></type><name pos:line="73" pos:column="34">pRect</name> <init pos:line="73" pos:column="40">= <expr><name pos:line="73" pos:column="42">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="74" pos:column="9">void</name></type> <name pos:line="74" pos:column="14">init</name><parameter_list pos:line="74" pos:column="18">(<param><decl><type><name pos:line="74" pos:column="19">HINSTANCE</name></type> <name pos:line="74" pos:column="29">hInst</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="36">HWND</name></type> <name pos:line="74" pos:column="41">hPere</name></decl></param>, <param><decl><type><name pos:line="74" pos:column="48">int</name></type> <name pos:line="74" pos:column="52">splitterSize</name></decl></param>,
			<param><decl><type><name pos:line="75" pos:column="25">int</name></type> <name pos:line="75" pos:column="29">iSplitRatio</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="42">DWORD</name></type> <name pos:line="75" pos:column="48">dwFlags</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="76" pos:column="9">void</name></type> <name pos:line="76" pos:column="14">rotate</name><parameter_list pos:line="76" pos:column="20">()</parameter_list>;</function_decl>
	<function><type><name pos:line="77" pos:column="9">int</name></type> <name pos:line="77" pos:column="13">getPhisicalSize</name><parameter_list pos:line="77" pos:column="28">()</parameter_list> <specifier pos:line="77" pos:column="31">const</specifier> <block pos:line="77" pos:column="37">{
		<return pos:line="78" pos:column="17">return <expr><name pos:line="78" pos:column="24">_spiltterSize</name></expr>;</return>
	}</block></function><empty_stmt pos:line="79" pos:column="10">;</empty_stmt>

</public><private pos:line="81" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="82" pos:column="9">RECT</name></type> <name pos:line="82" pos:column="14">_rect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="83" pos:column="9">int</name></type> <name pos:line="83" pos:column="13">_splitPercent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="84" pos:column="9">int</name></type> <name pos:line="84" pos:column="13">_spiltterSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="85" pos:column="9">bool</name></type> <name pos:line="85" pos:column="14">_isDraged</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">DWORD</name></type> <name pos:line="86" pos:column="15">_dwFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">bool</name></type> <name pos:line="87" pos:column="14">_isFixed</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="88" pos:column="9">static</specifier> <name pos:line="88" pos:column="16">bool</name></type> <name pos:line="88" pos:column="21">_isHorizontalRegistered</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="89" pos:column="9">static</specifier> <name pos:line="89" pos:column="16">bool</name></type> <name pos:line="89" pos:column="21">_isVerticalRegistered</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="90" pos:column="5">static</specifier> <name pos:line="90" pos:column="12">bool</name></type> <name pos:line="90" pos:column="17">_isHorizontalFixedRegistered</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="91" pos:column="5">static</specifier> <name pos:line="91" pos:column="12">bool</name></type> <name pos:line="91" pos:column="17">_isVerticalFixedRegistered</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="93" pos:column="9">RECT</name></type> <name pos:line="93" pos:column="14">_clickZone2TL</name></decl><op:operator pos:line="93" pos:column="27">,</op:operator> <decl><type ref="prev"/><name pos:line="93" pos:column="29">_clickZone2BR</name></decl>;</decl_stmt>

	<function_decl><type><specifier pos:line="95" pos:column="9">static</specifier> <name pos:line="95" pos:column="16">LRESULT</name> <name pos:line="95" pos:column="24">CALLBACK</name></type> <name pos:line="95" pos:column="33">staticWndProc</name><parameter_list pos:line="95" pos:column="46">(<param><decl><type><name pos:line="95" pos:column="47">HWND</name></type> <name pos:line="95" pos:column="52">hWnd</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="58">UINT</name></type> <name pos:line="95" pos:column="63">uMsg</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="69">WPARAM</name></type> <name pos:line="95" pos:column="76">wParam</name></decl></param>, <param><decl><type><name pos:line="95" pos:column="84">LPARAM</name></type> <name pos:line="95" pos:column="91">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="96" pos:column="9">LRESULT</name> <name pos:line="96" pos:column="17">CALLBACK</name></type> <name pos:line="96" pos:column="26">spliterWndProc</name><parameter_list pos:line="96" pos:column="40">(<param><decl><type><name pos:line="96" pos:column="41">UINT</name></type> <name pos:line="96" pos:column="46">uMsg</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="52">WPARAM</name></type> <name pos:line="96" pos:column="59">wParam</name></decl></param>, <param><decl><type><name pos:line="96" pos:column="67">LPARAM</name></type> <name pos:line="96" pos:column="74">lParam</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name pos:line="98" pos:column="5">int</name></type> <name pos:line="98" pos:column="9">getClickZone</name><parameter_list pos:line="98" pos:column="21">(<param><decl><type><name pos:line="98" pos:column="22">WH</name></type> <name pos:line="98" pos:column="25">which</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="99" pos:column="9">void</name></type> <name pos:line="99" pos:column="14">adjustZoneToDraw</name><parameter_list pos:line="99" pos:column="30">(<param><decl><type><name pos:line="99" pos:column="31">RECT</name> <type:modifier pos:line="99" pos:column="36">&amp;</type:modifier></type> <name pos:line="99" pos:column="38">rc2def</name></decl></param>, <param><decl><type><name pos:line="99" pos:column="46">ZONE_TYPE</name></type> <name pos:line="99" pos:column="56">whichZone</name></decl></param>)</parameter_list>;</function_decl>	 
	<function_decl><type><name pos:line="100" pos:column="9">void</name></type> <name pos:line="100" pos:column="14">drawSplitter</name><parameter_list pos:line="100" pos:column="26">()</parameter_list>;</function_decl>
	<function><type><name pos:line="101" pos:column="9">bool</name></type> <name pos:line="101" pos:column="14">isVertical</name><parameter_list pos:line="101" pos:column="24">()</parameter_list> <specifier pos:line="101" pos:column="27">const</specifier> <block pos:line="101" pos:column="33">{<return pos:line="101" pos:column="34">return <expr><op:operator pos:line="101" pos:column="41">(</op:operator><name pos:line="101" pos:column="42">_dwFlags</name> <op:operator pos:line="101" pos:column="51">&amp;</op:operator> <name pos:line="101" pos:column="53">SV_VERTICAL</name><op:operator pos:line="101" pos:column="64">)</op:operator> <op:operator pos:line="101" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="101" pos:column="69">0</lit:literal></expr>;</return>}</block></function><empty_stmt pos:line="101" pos:column="72">;</empty_stmt>
	<function_decl><type><name pos:line="102" pos:column="9">void</name></type> <name pos:line="102" pos:column="14">paintArrow</name><parameter_list pos:line="102" pos:column="24">(<param><decl><type><name pos:line="102" pos:column="25">HDC</name></type> <name pos:line="102" pos:column="29">hdc</name></decl></param>, <param><decl><type><specifier pos:line="102" pos:column="34">const</specifier> <name pos:line="102" pos:column="40">RECT</name> <type:modifier pos:line="102" pos:column="45">&amp;</type:modifier></type><name pos:line="102" pos:column="46">rect</name></decl></param>, <param><decl><type><name pos:line="102" pos:column="52">Arrow</name></type> <name pos:line="102" pos:column="58">arrowDir</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="103" pos:column="9">void</name></type> <name pos:line="103" pos:column="14">gotoTopLeft</name><parameter_list pos:line="103" pos:column="25">()</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="104" pos:column="9">void</name></type> <name pos:line="104" pos:column="14">gotoRightBouuom</name><parameter_list pos:line="104" pos:column="29">()</parameter_list>;</function_decl>

	<function><type><name pos:line="106" pos:column="9">bool</name></type> <name pos:line="106" pos:column="14">isInLeftTopZone</name><parameter_list pos:line="106" pos:column="29">(<param><decl><type><specifier pos:line="106" pos:column="30">const</specifier> <name pos:line="106" pos:column="36">POINT</name> <type:modifier pos:line="106" pos:column="42">&amp;</type:modifier></type><name pos:line="106" pos:column="43">p</name></decl></param>)</parameter_list> <specifier pos:line="106" pos:column="46">const</specifier> <block pos:line="106" pos:column="52">{
		<return pos:line="107" pos:column="17">return <expr><op:operator pos:line="107" pos:column="24">(</op:operator><op:operator pos:line="107" pos:column="25">(</op:operator><op:operator pos:line="107" pos:column="26">(</op:operator><name><name pos:line="107" pos:column="27">p</name><op:operator pos:line="107" pos:column="28">.</op:operator><name pos:line="107" pos:column="29">x</name></name> <op:operator pos:line="107" pos:column="31">&gt;=</op:operator> <name><name pos:line="107" pos:column="34">_clickZone2TL</name><op:operator pos:line="107" pos:column="47">.</op:operator><name pos:line="107" pos:column="48">left</name></name><op:operator pos:line="107" pos:column="52">)</op:operator> <op:operator pos:line="107" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="107" pos:column="57">(</op:operator><name><name pos:line="107" pos:column="58">p</name><op:operator pos:line="107" pos:column="59">.</op:operator><name pos:line="107" pos:column="60">x</name></name> <op:operator pos:line="107" pos:column="62">&lt;=</op:operator> <name><name pos:line="107" pos:column="65">_clickZone2TL</name><op:operator pos:line="107" pos:column="78">.</op:operator><name pos:line="107" pos:column="79">left</name></name> <op:operator pos:line="107" pos:column="84">+</op:operator> <name><name pos:line="107" pos:column="86">_clickZone2TL</name><op:operator pos:line="107" pos:column="99">.</op:operator><name pos:line="107" pos:column="100">right</name></name><op:operator pos:line="107" pos:column="105">)</op:operator><op:operator pos:line="107" pos:column="106">)</op:operator> <op:operator pos:line="107" pos:column="108">&amp;&amp;</op:operator>
			<op:operator pos:line="108" pos:column="25">(</op:operator><name><name pos:line="108" pos:column="26">p</name><op:operator pos:line="108" pos:column="27">.</op:operator><name pos:line="108" pos:column="28">y</name></name> <op:operator pos:line="108" pos:column="30">&gt;=</op:operator> <name><name pos:line="108" pos:column="33">_clickZone2TL</name><op:operator pos:line="108" pos:column="46">.</op:operator><name pos:line="108" pos:column="47">top</name></name><op:operator pos:line="108" pos:column="50">)</op:operator> <op:operator pos:line="108" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="108" pos:column="55">(</op:operator><name><name pos:line="108" pos:column="56">p</name><op:operator pos:line="108" pos:column="57">.</op:operator><name pos:line="108" pos:column="58">y</name></name> <op:operator pos:line="108" pos:column="60">&lt;=</op:operator> <name><name pos:line="108" pos:column="63">_clickZone2TL</name><op:operator pos:line="108" pos:column="76">.</op:operator><name pos:line="108" pos:column="77">top</name></name> <op:operator pos:line="108" pos:column="81">+</op:operator> <name><name pos:line="108" pos:column="83">_clickZone2TL</name><op:operator pos:line="108" pos:column="96">.</op:operator><name pos:line="108" pos:column="97">bottom</name></name><op:operator pos:line="108" pos:column="103">)</op:operator><op:operator pos:line="108" pos:column="104">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="109" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="111" pos:column="9">bool</name></type> <name pos:line="111" pos:column="14">isInRightBottomZone</name><parameter_list pos:line="111" pos:column="33">(<param><decl><type><specifier pos:line="111" pos:column="34">const</specifier> <name pos:line="111" pos:column="40">POINT</name> <type:modifier pos:line="111" pos:column="46">&amp;</type:modifier></type><name pos:line="111" pos:column="47">p</name></decl></param>)</parameter_list> <specifier pos:line="111" pos:column="50">const</specifier> <block pos:line="111" pos:column="56">{
		<return pos:line="112" pos:column="17">return <expr><op:operator pos:line="112" pos:column="24">(</op:operator><op:operator pos:line="112" pos:column="25">(</op:operator><op:operator pos:line="112" pos:column="26">(</op:operator><name><name pos:line="112" pos:column="27">p</name><op:operator pos:line="112" pos:column="28">.</op:operator><name pos:line="112" pos:column="29">x</name></name> <op:operator pos:line="112" pos:column="31">&gt;=</op:operator> <name><name pos:line="112" pos:column="34">_clickZone2BR</name><op:operator pos:line="112" pos:column="47">.</op:operator><name pos:line="112" pos:column="48">left</name></name><op:operator pos:line="112" pos:column="52">)</op:operator> <op:operator pos:line="112" pos:column="54">&amp;&amp;</op:operator> 
			<op:operator pos:line="113" pos:column="25">(</op:operator><name><name pos:line="113" pos:column="26">p</name><op:operator pos:line="113" pos:column="27">.</op:operator><name pos:line="113" pos:column="28">x</name></name> <op:operator pos:line="113" pos:column="30">&lt;=</op:operator> <name><name pos:line="113" pos:column="33">_clickZone2BR</name><op:operator pos:line="113" pos:column="46">.</op:operator><name pos:line="113" pos:column="47">left</name></name> <op:operator pos:line="113" pos:column="52">+</op:operator> <name><name pos:line="113" pos:column="54">_clickZone2BR</name><op:operator pos:line="113" pos:column="67">.</op:operator><name pos:line="113" pos:column="68">right</name></name><op:operator pos:line="113" pos:column="73">)</op:operator><op:operator pos:line="113" pos:column="74">)</op:operator> <op:operator pos:line="113" pos:column="76">&amp;&amp;</op:operator>
			<op:operator pos:line="114" pos:column="25">(</op:operator><name><name pos:line="114" pos:column="26">p</name><op:operator pos:line="114" pos:column="27">.</op:operator><name pos:line="114" pos:column="28">y</name></name> <op:operator pos:line="114" pos:column="30">&gt;=</op:operator> <name><name pos:line="114" pos:column="33">_clickZone2BR</name><op:operator pos:line="114" pos:column="46">.</op:operator><name pos:line="114" pos:column="47">top</name></name><op:operator pos:line="114" pos:column="50">)</op:operator> <op:operator pos:line="114" pos:column="52">&amp;&amp;</op:operator> 
			<op:operator pos:line="115" pos:column="25">(</op:operator><name><name pos:line="115" pos:column="26">p</name><op:operator pos:line="115" pos:column="27">.</op:operator><name pos:line="115" pos:column="28">y</name></name> <op:operator pos:line="115" pos:column="30">&lt;=</op:operator> <name><name pos:line="115" pos:column="33">_clickZone2BR</name><op:operator pos:line="115" pos:column="46">.</op:operator><name pos:line="115" pos:column="47">top</name></name> <op:operator pos:line="115" pos:column="51">+</op:operator> <name><name pos:line="115" pos:column="53">_clickZone2BR</name><op:operator pos:line="115" pos:column="66">.</op:operator><name pos:line="115" pos:column="67">bottom</name></name><op:operator pos:line="115" pos:column="73">)</op:operator><op:operator pos:line="115" pos:column="74">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="116" pos:column="10">;</empty_stmt>
	
	<function><type><name pos:line="118" pos:column="9">int</name></type> <name pos:line="118" pos:column="13">getSplitterFixPosX</name><parameter_list pos:line="118" pos:column="31">()</parameter_list> <block pos:line="118" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">long</name></type> <name pos:line="119" pos:column="22">result</name> <init pos:line="119" pos:column="29">= <expr><call><name pos:line="119" pos:column="31">long</name><argument_list pos:line="119" pos:column="35">(<argument><expr><call><name><op:operator pos:line="119" pos:column="36">::</op:operator><name pos:line="119" pos:column="38">SendMessage</name></name><argument_list pos:line="119" pos:column="49">(<argument><expr><name pos:line="119" pos:column="50">_hParent</name></expr></argument>, <argument><expr><name pos:line="119" pos:column="60">WM_GETSPLITTER_X</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="119" pos:column="78">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="119" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="120" pos:column="17">return <expr><op:operator pos:line="120" pos:column="24">(</op:operator><call><name pos:line="120" pos:column="25">LOWORD</name><argument_list pos:line="120" pos:column="31">(<argument><expr><name pos:line="120" pos:column="32">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="120" pos:column="40">-</op:operator> <op:operator pos:line="120" pos:column="42">(</op:operator><op:operator pos:line="120" pos:column="43">(</op:operator><call><name pos:line="120" pos:column="44">HIWORD</name><argument_list pos:line="120" pos:column="50">(<argument><expr><name pos:line="120" pos:column="51">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="120" pos:column="59">==</op:operator> <name pos:line="120" pos:column="62">RIGHT_FIX</name><op:operator pos:line="120" pos:column="71">)</op:operator> <op:operator pos:line="120" pos:column="73">?</op:operator> <name pos:line="120" pos:column="75">_spiltterSize</name> <op:operator pos:line="120" pos:column="89">:</op:operator> <lit:literal type="number" pos:line="120" pos:column="91">0</lit:literal><op:operator pos:line="120" pos:column="92">)</op:operator><op:operator pos:line="120" pos:column="93">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="121" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="123" pos:column="9">int</name></type> <name pos:line="123" pos:column="13">getSplitterFixPosY</name><parameter_list pos:line="123" pos:column="31">()</parameter_list> <block pos:line="123" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="124" pos:column="17">long</name></type> <name pos:line="124" pos:column="22">result</name> <init pos:line="124" pos:column="29">= <expr><call><name pos:line="124" pos:column="31">long</name><argument_list pos:line="124" pos:column="35">(<argument><expr><call><name><op:operator pos:line="124" pos:column="36">::</op:operator><name pos:line="124" pos:column="38">SendMessage</name></name><argument_list pos:line="124" pos:column="49">(<argument><expr><name pos:line="124" pos:column="50">_hParent</name></expr></argument>, <argument><expr><name pos:line="124" pos:column="60">WM_GETSPLITTER_Y</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="78">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="125" pos:column="17">return <expr><op:operator pos:line="125" pos:column="24">(</op:operator><call><name pos:line="125" pos:column="25">LOWORD</name><argument_list pos:line="125" pos:column="31">(<argument><expr><name pos:line="125" pos:column="32">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="125" pos:column="40">-</op:operator> <op:operator pos:line="125" pos:column="42">(</op:operator><op:operator pos:line="125" pos:column="43">(</op:operator><call><name pos:line="125" pos:column="44">HIWORD</name><argument_list pos:line="125" pos:column="50">(<argument><expr><name pos:line="125" pos:column="51">result</name></expr></argument>)</argument_list></call> <op:operator pos:line="125" pos:column="59">==</op:operator> <name pos:line="125" pos:column="62">RIGHT_FIX</name><op:operator pos:line="125" pos:column="71">)</op:operator> <op:operator pos:line="125" pos:column="73">?</op:operator> <name pos:line="125" pos:column="75">_spiltterSize</name> <op:operator pos:line="125" pos:column="89">:</op:operator> <lit:literal type="number" pos:line="125" pos:column="91">0</lit:literal><op:operator pos:line="125" pos:column="92">)</op:operator><op:operator pos:line="125" pos:column="93">)</op:operator></expr>;</return>
	}</block></function><empty_stmt pos:line="126" pos:column="10">;</empty_stmt>
</private>}</block>;</class>
<cpp:endif pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="128" pos:column="8">//SPLITTER_H</comment>
</unit>
