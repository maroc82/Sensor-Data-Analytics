<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\staticdialog\RunDlg\RunDlg.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">//this file is part of notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">//Copyright (C)2003 Don HO ( donho@altern.org )</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">//This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">//modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">//as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">//version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">//This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="10" pos:column="1">//but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="11" pos:column="1">//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="12" pos:column="1">//GNU General Public License for more details.</comment>
<comment type="line" pos:line="13" pos:column="1">//</comment>
<comment type="line" pos:line="14" pos:column="1">//You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="15" pos:column="1">//along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="16" pos:column="1">//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<cpp:ifndef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifndef</cpp:directive> <name pos:line="18" pos:column="9">RUN_DLG_H</name></cpp:ifndef>
<cpp:define pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="19" pos:column="9">RUN_DLG_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifndef</cpp:directive> <name pos:line="21" pos:column="9">RUN_DLG_RC_H</name></cpp:ifndef>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"RunDlg_rc.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="23" pos:column="8">//RUN_DLG_RC_H</comment>

<using pos:line="25" pos:column="1">using namespace <name pos:line="25" pos:column="17">std</name>;</using>

<cpp:define pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="27" pos:column="9">CURRENTWORD_MAXLENGTH</name></cpp:macro> <cpp:value pos:line="27" pos:column="31">2048</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier pos:line="29" pos:column="1">const</specifier> <name pos:line="29" pos:column="7">TCHAR</name></type> <name><name pos:line="29" pos:column="13">fullCurrentPath</name><index pos:line="29" pos:column="28">[]</index></name> <init pos:line="29" pos:column="31">= <expr><call><name pos:line="29" pos:column="33">TEXT</name><argument_list pos:line="29" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="38">"FULL_CURRENT_PATH"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="30" pos:column="1">const</specifier> <name pos:line="30" pos:column="7">TCHAR</name></type> <name><name pos:line="30" pos:column="13">currentDirectory</name><index pos:line="30" pos:column="29">[]</index></name> <init pos:line="30" pos:column="32">= <expr><call><name pos:line="30" pos:column="34">TEXT</name><argument_list pos:line="30" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="39">"CURRENT_DIRECTORY"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="31" pos:column="1">const</specifier> <name pos:line="31" pos:column="7">TCHAR</name></type> <name><name pos:line="31" pos:column="13">onlyFileName</name><index pos:line="31" pos:column="25">[]</index></name> <init pos:line="31" pos:column="28">= <expr><call><name pos:line="31" pos:column="30">TEXT</name><argument_list pos:line="31" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="31" pos:column="35">"FILE_NAME"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="32" pos:column="1">const</specifier> <name pos:line="32" pos:column="7">TCHAR</name></type> <name><name pos:line="32" pos:column="13">fileNamePart</name><index pos:line="32" pos:column="25">[]</index></name> <init pos:line="32" pos:column="28">= <expr><call><name pos:line="32" pos:column="30">TEXT</name><argument_list pos:line="32" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="32" pos:column="35">"NAME_PART"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="33" pos:column="1">const</specifier> <name pos:line="33" pos:column="7">TCHAR</name></type> <name><name pos:line="33" pos:column="13">fileExtPart</name><index pos:line="33" pos:column="24">[]</index></name> <init pos:line="33" pos:column="27">= <expr><call><name pos:line="33" pos:column="29">TEXT</name><argument_list pos:line="33" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="34">"EXT_PART"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="34" pos:column="1">const</specifier> <name pos:line="34" pos:column="7">TCHAR</name></type> <name><name pos:line="34" pos:column="13">currentWord</name><index pos:line="34" pos:column="24">[]</index></name> <init pos:line="34" pos:column="27">= <expr><call><name pos:line="34" pos:column="29">TEXT</name><argument_list pos:line="34" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="34" pos:column="34">"CURRENT_WORD"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="35" pos:column="1">const</specifier> <name pos:line="35" pos:column="7">TCHAR</name></type> <name><name pos:line="35" pos:column="13">nppDir</name><index pos:line="35" pos:column="19">[]</index></name> <init pos:line="35" pos:column="22">= <expr><call><name pos:line="35" pos:column="24">TEXT</name><argument_list pos:line="35" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="35" pos:column="29">"NPP_DIRECTORY"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="36" pos:column="1">const</specifier> <name pos:line="36" pos:column="7">TCHAR</name></type> <name><name pos:line="36" pos:column="13">currentLine</name><index pos:line="36" pos:column="24">[]</index></name> <init pos:line="36" pos:column="27">= <expr><call><name pos:line="36" pos:column="29">TEXT</name><argument_list pos:line="36" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="34">"CURRENT_LINE"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="37" pos:column="1">const</specifier> <name pos:line="37" pos:column="7">TCHAR</name></type> <name><name pos:line="37" pos:column="13">currentColumn</name><index pos:line="37" pos:column="26">[]</index></name> <init pos:line="37" pos:column="29">= <expr><call><name pos:line="37" pos:column="31">TEXT</name><argument_list pos:line="37" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="36">"CURRENT_COLUMN"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name pos:line="39" pos:column="1">int</name></type> <name pos:line="39" pos:column="5">whichVar</name><parameter_list pos:line="39" pos:column="13">(<param><decl><type><name pos:line="39" pos:column="14">TCHAR</name> <type:modifier pos:line="39" pos:column="20">*</type:modifier></type><name pos:line="39" pos:column="21">str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="40" pos:column="1">void</name></type> <name pos:line="40" pos:column="6">expandNppEnvironmentStrs</name><parameter_list pos:line="40" pos:column="30">(<param><decl><type><specifier pos:line="40" pos:column="31">const</specifier> <name pos:line="40" pos:column="37">TCHAR</name> <type:modifier pos:line="40" pos:column="43">*</type:modifier></type><name pos:line="40" pos:column="44">strSrc</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="52">TCHAR</name> <type:modifier pos:line="40" pos:column="58">*</type:modifier></type><name pos:line="40" pos:column="59">stringDest</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="71">size_t</name></type> <name pos:line="40" pos:column="78">strDestLen</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="90">HWND</name></type> <name pos:line="40" pos:column="95">hWnd</name></decl></param>)</parameter_list>;</function_decl>

<class pos:line="42" pos:column="1">class <name pos:line="42" pos:column="7">Command</name> <block pos:line="42" pos:column="15">{<private type="default" pos:line="42" pos:column="16">
</private><public pos:line="43" pos:column="1">public :
	<constructor><name pos:line="44" pos:column="9">Command</name><parameter_list pos:line="44" pos:column="16">()</parameter_list><block pos:line="44" pos:column="18">{}</block></constructor><empty_stmt pos:line="44" pos:column="20">;</empty_stmt>
	<constructor><name pos:line="45" pos:column="9">Command</name><parameter_list pos:line="45" pos:column="16">(<param><decl><type><name pos:line="45" pos:column="17">TCHAR</name> <type:modifier pos:line="45" pos:column="23">*</type:modifier></type><name pos:line="45" pos:column="24">cmd</name></decl></param>)</parameter_list> <member_list pos:line="45" pos:column="29">: <call><name pos:line="45" pos:column="31">_cmdLine</name><argument_list pos:line="45" pos:column="39">(<argument><expr><name pos:line="45" pos:column="40">cmd</name></expr></argument>)</argument_list></call></member_list><block pos:line="45" pos:column="44">{}</block></constructor><empty_stmt pos:line="45" pos:column="46">;</empty_stmt>
	<constructor><name pos:line="46" pos:column="9">Command</name><parameter_list pos:line="46" pos:column="16">(<param><decl><type><name pos:line="46" pos:column="17">generic_string</name></type> <name pos:line="46" pos:column="32">cmd</name></decl></param>)</parameter_list> <member_list pos:line="46" pos:column="37">: <call><name pos:line="46" pos:column="39">_cmdLine</name><argument_list pos:line="46" pos:column="47">(<argument><expr><name pos:line="46" pos:column="48">cmd</name></expr></argument>)</argument_list></call></member_list><block pos:line="46" pos:column="52">{}</block></constructor><empty_stmt pos:line="46" pos:column="54">;</empty_stmt>
	<function_decl><type><name pos:line="47" pos:column="9">HINSTANCE</name></type> <name pos:line="47" pos:column="19">run</name><parameter_list pos:line="47" pos:column="22">(<param><decl><type><name pos:line="47" pos:column="23">HWND</name></type> <name pos:line="47" pos:column="28">hWnd</name></decl></param>)</parameter_list>;</function_decl>

</public><protected pos:line="49" pos:column="1">protected :
	<decl_stmt><decl><type><name pos:line="50" pos:column="9">generic_string</name></type> <name pos:line="50" pos:column="24">_cmdLine</name></decl>;</decl_stmt>
</protected><private pos:line="51" pos:column="1">private :
	<function_decl><type><name pos:line="52" pos:column="9">void</name></type> <name pos:line="52" pos:column="14">extractArgs</name><parameter_list pos:line="52" pos:column="25">(<param><decl><type><name pos:line="52" pos:column="26">TCHAR</name> <type:modifier pos:line="52" pos:column="32">*</type:modifier></type><name pos:line="52" pos:column="33">cmd2Exec</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="43">TCHAR</name> <type:modifier pos:line="52" pos:column="49">*</type:modifier></type><name pos:line="52" pos:column="50">args</name></decl></param>, <param><decl><type><specifier pos:line="52" pos:column="56">const</specifier> <name pos:line="52" pos:column="62">TCHAR</name> <type:modifier pos:line="52" pos:column="68">*</type:modifier></type><name pos:line="52" pos:column="69">cmdEntier</name></decl></param>)</parameter_list>;</function_decl>
</private>}</block>;</class>

<class pos:line="55" pos:column="1">class <name pos:line="55" pos:column="7">RunDlg</name> <super pos:line="55" pos:column="14">: <specifier pos:line="55" pos:column="16">public</specifier> <name pos:line="55" pos:column="23">Command</name>, <specifier pos:line="55" pos:column="32">public</specifier> <name pos:line="55" pos:column="39">StaticDialog</name></super>
<block pos:line="56" pos:column="1">{<private type="default" pos:line="56" pos:column="2">
</private><public pos:line="57" pos:column="1">public :
	<constructor><name pos:line="58" pos:column="9">RunDlg</name><parameter_list pos:line="58" pos:column="15">()</parameter_list> <member_list pos:line="58" pos:column="18">: <call><name pos:line="58" pos:column="20">StaticDialog</name><argument_list pos:line="58" pos:column="32">()</argument_list></call> </member_list><block pos:line="58" pos:column="35">{}</block></constructor><empty_stmt pos:line="58" pos:column="37">;</empty_stmt>

	<function_decl><type><name pos:line="60" pos:column="9">void</name></type> <name pos:line="60" pos:column="14">doDialog</name><parameter_list pos:line="60" pos:column="22">(<param><decl><type><name pos:line="60" pos:column="23">bool</name></type> <name pos:line="60" pos:column="28">isRTL</name> <init pos:line="60" pos:column="34">= <expr><lit:literal type="boolean" pos:line="60" pos:column="36">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function><type><specifier pos:line="62" pos:column="5">virtual</specifier> <name pos:line="62" pos:column="13">void</name></type> <name pos:line="62" pos:column="18">destroy</name><parameter_list pos:line="62" pos:column="25">()</parameter_list> <block pos:line="62" pos:column="28">{

    }</block></function><empty_stmt pos:line="64" pos:column="6">;</empty_stmt>

</public><protected pos:line="66" pos:column="1">protected :
	<function_decl><type><specifier pos:line="67" pos:column="9">virtual</specifier> <name pos:line="67" pos:column="17">BOOL</name> <name pos:line="67" pos:column="22">CALLBACK</name></type> <name pos:line="67" pos:column="31">run_dlgProc</name><parameter_list pos:line="67" pos:column="42">(<param><decl><type><name pos:line="67" pos:column="43">UINT</name></type> <name pos:line="67" pos:column="48">message</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="57">WPARAM</name></type> <name pos:line="67" pos:column="64">wParam</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="72">LPARAM</name></type> <name pos:line="67" pos:column="79">lParam</name></decl></param>)</parameter_list>;</function_decl>

</protected><private pos:line="69" pos:column="1">private :
	<function_decl><type><name pos:line="70" pos:column="9">void</name></type> <name pos:line="70" pos:column="14">addTextToCombo</name><parameter_list pos:line="70" pos:column="28">(<param><decl><type><specifier pos:line="70" pos:column="29">const</specifier> <name pos:line="70" pos:column="35">TCHAR</name> <type:modifier pos:line="70" pos:column="41">*</type:modifier></type><name pos:line="70" pos:column="42">txt2Add</name></decl></param>)</parameter_list> <specifier pos:line="70" pos:column="51">const</specifier>;</function_decl>
	<function_decl><type><name pos:line="71" pos:column="9">void</name></type> <name pos:line="71" pos:column="14">removeTextFromCombo</name><parameter_list pos:line="71" pos:column="33">(<param><decl><type><specifier pos:line="71" pos:column="34">const</specifier> <name pos:line="71" pos:column="40">TCHAR</name> <type:modifier pos:line="71" pos:column="46">*</type:modifier></type><name pos:line="71" pos:column="47">txt2Remove</name></decl></param>)</parameter_list> <specifier pos:line="71" pos:column="59">const</specifier>;</function_decl>
</private>}</block>;</class>

<cpp:endif pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="74" pos:column="8">//RUN_DLG_H</comment>
</unit>
