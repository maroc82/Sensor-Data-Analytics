<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexAU3.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="line" pos:line="2" pos:column="1">// @file LexAU3.cxx</comment>
<comment type="line" pos:line="3" pos:column="1">// Lexer for AutoIt3  http://www.hiddensoft.com/autoit3</comment>
<comment type="line" pos:line="4" pos:column="1">// by Jos van der Zande, jvdzande@yahoo.com</comment>
<comment type="line" pos:line="5" pos:column="1">//</comment>
<comment type="line" pos:line="6" pos:column="1">// Changes:</comment>
<comment type="line" pos:line="7" pos:column="1">// March 28, 2004 - Added the standard Folding code</comment>
<comment type="line" pos:line="8" pos:column="1">// April 21, 2004 - Added Preprosessor Table + Syntax Highlighting</comment>
<comment type="line" pos:line="9" pos:column="1">//                  Fixed Number highlighting</comment>
<comment type="line" pos:line="10" pos:column="1">//                  Changed default isoperator to IsAOperator to have a better match to AutoIt3</comment>
<comment type="line" pos:line="11" pos:column="1">//                  Fixed "#comments_start" -&gt; "#comments-start"</comment>
<comment type="line" pos:line="12" pos:column="1">//                  Fixed "#comments_end" -&gt; "#comments-end"</comment>
<comment type="line" pos:line="13" pos:column="1">//                  Fixed Sendkeys in Strings when not terminated with }</comment>
<comment type="line" pos:line="14" pos:column="1">//                  Added support for Sendkey strings that have second parameter e.g. {UP 5} or {a down}</comment>
<comment type="line" pos:line="15" pos:column="1">// April 26, 2004 - Fixed # pre-processor statement inside of comment block would invalidly change the color.</comment>
<comment type="line" pos:line="16" pos:column="1">//                  Added logic for #include &lt;xyz.au3&gt; to treat the &lt;&gt; as string</comment>
<comment type="line" pos:line="17" pos:column="1">//                  Added underscore to IsAOperator.</comment>
<comment type="line" pos:line="18" pos:column="1">// May 17, 2004   - Changed the folding logic from indent to keyword folding.</comment>
<comment type="line" pos:line="19" pos:column="1">//                  Added Folding logic for blocks of single-commentlines or commentblock.</comment>
<comment type="line" pos:line="20" pos:column="1">//                        triggered by: fold.comment=1</comment>
<comment type="line" pos:line="21" pos:column="1">//                  Added Folding logic for preprocessor blocks triggered by fold.preprocessor=1</comment>
<comment type="line" pos:line="22" pos:column="1">//                  Added Special for #region - #endregion syntax highlight and folding.</comment>
<comment type="line" pos:line="23" pos:column="1">// May 30, 2004   - Fixed issue with continuation lines on If statements.</comment>
<comment type="line" pos:line="24" pos:column="1">// June 5, 2004   - Added comma to Operators for better readability.</comment>
<comment type="line" pos:line="25" pos:column="1">//                  Added fold.compact support set with fold.compact=1</comment>
<comment type="line" pos:line="26" pos:column="1">//                  Changed folding inside of #cs-#ce. Default is no keyword folding inside comment blocks when fold.comment=1</comment>
<comment type="line" pos:line="27" pos:column="1">//                        it will now only happen when fold.comment=2.</comment>
<comment type="line" pos:line="28" pos:column="1">// Sep 5, 2004    - Added logic to handle colourizing words on the last line.</comment>
<comment type="line" pos:line="29" pos:column="1">//                        Typed Characters now show as "default" till they match any table.</comment>
<comment type="line" pos:line="30" pos:column="1">// Oct 10, 2004   - Added logic to show Comments in "Special" directives.</comment>
<comment type="line" pos:line="31" pos:column="1">// Nov  1, 2004   - Added better testing for Numbers supporting x and e notation.</comment>
<comment type="line" pos:line="32" pos:column="1">// Nov 28, 2004   - Added logic to handle continuation lines for syntax highlighting.</comment>
<comment type="line" pos:line="33" pos:column="1">// Jan 10, 2005   - Added Abbreviations Keyword used for expansion</comment>
<comment type="line" pos:line="34" pos:column="1">// Mar 24, 2005   - Updated Abbreviations Keywords to fix when followed by Operator.</comment>
<comment type="line" pos:line="35" pos:column="1">// Apr 18, 2005   - Updated #CE/#Comment-End logic to take a linecomment ";" into account</comment>
<comment type="line" pos:line="36" pos:column="1">//                - Added folding support for With...EndWith</comment>
<comment type="line" pos:line="37" pos:column="1">//                - Added support for a DOT in variable names</comment>
<comment type="line" pos:line="38" pos:column="1">//                - Fixed Underscore in CommentBlock</comment>
<comment type="line" pos:line="39" pos:column="1">// May 23, 2005   - Fixed the SentKey lexing in case of a missing }</comment>
<comment type="line" pos:line="40" pos:column="1">// Aug 11, 2005   - Fixed possible bug with s_save length &gt; 100.</comment>
<comment type="line" pos:line="41" pos:column="1">// Aug 23, 2005   - Added Switch/endswitch support to the folding logic.</comment>
<comment type="line" pos:line="42" pos:column="1">// Sep 27, 2005   - Fixed the SentKey lexing logic in case of multiple sentkeys.</comment>
<comment type="line" pos:line="43" pos:column="1">// Mar 12, 2006   - Fixed issue with &lt;&gt; coloring as String in stead of Operator in rare occasions.</comment>
<comment type="line" pos:line="44" pos:column="1">// Apr  8, 2006   - Added support for AutoIt3 Standard UDF library (SCE_AU3_UDF)</comment>
<comment type="line" pos:line="45" pos:column="1">// Mar  9, 2007   - Fixed bug with + following a String getting the wrong Color.</comment>
<comment type="line" pos:line="46" pos:column="1">// Jun 20, 2007   - Fixed Commentblock issue when LF's are used as EOL.</comment>
<comment type="line" pos:line="47" pos:column="1">// Jul 26, 2007   - Fixed #endregion undetected bug.</comment>
<comment type="line" pos:line="48" pos:column="1">//</comment>
<comment type="line" pos:line="49" pos:column="1">// Copyright for Scintilla: 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="50" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>
<comment type="line" pos:line="51" pos:column="1">// Scintilla source code edit control</comment>

<cpp:include pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">include</cpp:directive> <cpp:file pos:line="53" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">include</cpp:directive> <cpp:file pos:line="54" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">include</cpp:directive> <cpp:file pos:line="55" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">include</cpp:directive> <cpp:file pos:line="56" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">include</cpp:directive> <cpp:file pos:line="57" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">include</cpp:directive> <cpp:file pos:line="58" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="60" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="61" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="62" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="64" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="65" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="66" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="67" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="68" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="69" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">ifdef</cpp:directive> <name pos:line="71" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="72" pos:column="1">using namespace <name pos:line="72" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="75" pos:column="1">static</specifier> <specifier pos:line="75" pos:column="8">inline</specifier> <name pos:line="75" pos:column="15">bool</name></type> <name pos:line="75" pos:column="20">IsTypeCharacter</name><parameter_list pos:line="75" pos:column="35">(<param><decl><type><specifier pos:line="75" pos:column="36">const</specifier> <name pos:line="75" pos:column="42">int</name></type> <name pos:line="75" pos:column="46">ch</name></decl></param>)</parameter_list>
<block pos:line="76" pos:column="1">{
    <return pos:line="77" pos:column="5">return <expr><name pos:line="77" pos:column="12">ch</name> <op:operator pos:line="77" pos:column="15">==</op:operator> <lit:literal type="char" pos:line="77" pos:column="18">'$'</lit:literal></expr>;</return>
}</block></function>
<function><type><specifier pos:line="79" pos:column="1">static</specifier> <specifier pos:line="79" pos:column="8">inline</specifier> <name pos:line="79" pos:column="15">bool</name></type> <name pos:line="79" pos:column="20">IsAWordChar</name><parameter_list pos:line="79" pos:column="31">(<param><decl><type><specifier pos:line="79" pos:column="32">const</specifier> <name pos:line="79" pos:column="38">int</name></type> <name pos:line="79" pos:column="42">ch</name></decl></param>)</parameter_list>
<block pos:line="80" pos:column="1">{
    <return pos:line="81" pos:column="5">return <expr><op:operator pos:line="81" pos:column="12">(</op:operator><name pos:line="81" pos:column="13">ch</name> <op:operator pos:line="81" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="81" pos:column="18">0x80</lit:literal><op:operator pos:line="81" pos:column="22">)</op:operator> <op:operator pos:line="81" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="81" pos:column="27">(</op:operator><call><name pos:line="81" pos:column="28">isalnum</name><argument_list pos:line="81" pos:column="35">(<argument><expr><name pos:line="81" pos:column="36">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="81" pos:column="40">||</op:operator> <name pos:line="81" pos:column="43">ch</name> <op:operator pos:line="81" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="81" pos:column="49">'_'</lit:literal><op:operator pos:line="81" pos:column="52">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="84" pos:column="1">static</specifier> <specifier pos:line="84" pos:column="8">inline</specifier> <name pos:line="84" pos:column="15">bool</name></type> <name pos:line="84" pos:column="20">IsAWordStart</name><parameter_list pos:line="84" pos:column="32">(<param><decl><type><specifier pos:line="84" pos:column="33">const</specifier> <name pos:line="84" pos:column="39">int</name></type> <name pos:line="84" pos:column="43">ch</name></decl></param>)</parameter_list>
<block pos:line="85" pos:column="1">{
    <return pos:line="86" pos:column="5">return <expr><op:operator pos:line="86" pos:column="12">(</op:operator><name pos:line="86" pos:column="13">ch</name> <op:operator pos:line="86" pos:column="16">&lt;</op:operator> <lit:literal type="number" pos:line="86" pos:column="18">0x80</lit:literal><op:operator pos:line="86" pos:column="22">)</op:operator> <op:operator pos:line="86" pos:column="24">&amp;&amp;</op:operator> <op:operator pos:line="86" pos:column="27">(</op:operator><call><name pos:line="86" pos:column="28">isalnum</name><argument_list pos:line="86" pos:column="35">(<argument><expr><name pos:line="86" pos:column="36">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="40">||</op:operator> <name pos:line="86" pos:column="43">ch</name> <op:operator pos:line="86" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="86" pos:column="49">'_'</lit:literal> <op:operator pos:line="86" pos:column="53">||</op:operator> <name pos:line="86" pos:column="56">ch</name> <op:operator pos:line="86" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="86" pos:column="62">'@'</lit:literal> <op:operator pos:line="86" pos:column="66">||</op:operator> <name pos:line="86" pos:column="69">ch</name> <op:operator pos:line="86" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="86" pos:column="75">'#'</lit:literal> <op:operator pos:line="86" pos:column="79">||</op:operator> <name pos:line="86" pos:column="82">ch</name> <op:operator pos:line="86" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="86" pos:column="88">'$'</lit:literal> <op:operator pos:line="86" pos:column="92">||</op:operator> <name pos:line="86" pos:column="95">ch</name> <op:operator pos:line="86" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="86" pos:column="101">'.'</lit:literal><op:operator pos:line="86" pos:column="104">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="89" pos:column="1">static</specifier> <specifier pos:line="89" pos:column="8">inline</specifier> <name pos:line="89" pos:column="15">bool</name></type> <name pos:line="89" pos:column="20">IsAOperator</name><parameter_list pos:line="89" pos:column="31">(<param><decl><type><name pos:line="89" pos:column="32">char</name></type> <name pos:line="89" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="41">{
	<if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><call><name pos:line="90" pos:column="13">isascii</name><argument_list pos:line="90" pos:column="20">(<argument><expr><name pos:line="90" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="90" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="90" pos:column="28">isalnum</name><argument_list pos:line="90" pos:column="35">(<argument><expr><name pos:line="90" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="90" pos:column="40">
		<return pos:line="91" pos:column="17">return <expr><lit:literal type="boolean" pos:line="91" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">ch</name> <op:operator pos:line="92" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="19">'+'</lit:literal> <op:operator pos:line="92" pos:column="23">||</op:operator> <name pos:line="92" pos:column="26">ch</name> <op:operator pos:line="92" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="32">'-'</lit:literal> <op:operator pos:line="92" pos:column="36">||</op:operator> <name pos:line="92" pos:column="39">ch</name> <op:operator pos:line="92" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="45">'*'</lit:literal> <op:operator pos:line="92" pos:column="49">||</op:operator> <name pos:line="92" pos:column="52">ch</name> <op:operator pos:line="92" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="58">'/'</lit:literal> <op:operator pos:line="92" pos:column="62">||</op:operator>
	    <name pos:line="93" pos:column="13">ch</name> <op:operator pos:line="93" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="19">'&amp;'</lit:literal> <op:operator pos:line="93" pos:column="23">||</op:operator> <name pos:line="93" pos:column="26">ch</name> <op:operator pos:line="93" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="32">'^'</lit:literal> <op:operator pos:line="93" pos:column="36">||</op:operator> <name pos:line="93" pos:column="39">ch</name> <op:operator pos:line="93" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="45">'='</lit:literal> <op:operator pos:line="93" pos:column="49">||</op:operator> <name pos:line="93" pos:column="52">ch</name> <op:operator pos:line="93" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="58">'&lt;'</lit:literal> <op:operator pos:line="93" pos:column="62">||</op:operator> <name pos:line="93" pos:column="65">ch</name> <op:operator pos:line="93" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="93" pos:column="71">'&gt;'</lit:literal> <op:operator pos:line="93" pos:column="75">||</op:operator>
	    <name pos:line="94" pos:column="13">ch</name> <op:operator pos:line="94" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="94" pos:column="19">'('</lit:literal> <op:operator pos:line="94" pos:column="23">||</op:operator> <name pos:line="94" pos:column="26">ch</name> <op:operator pos:line="94" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="94" pos:column="32">')'</lit:literal> <op:operator pos:line="94" pos:column="36">||</op:operator> <name pos:line="94" pos:column="39">ch</name> <op:operator pos:line="94" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="94" pos:column="45">'['</lit:literal> <op:operator pos:line="94" pos:column="49">||</op:operator> <name pos:line="94" pos:column="52">ch</name> <op:operator pos:line="94" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="94" pos:column="58">']'</lit:literal> <op:operator pos:line="94" pos:column="62">||</op:operator> <name pos:line="94" pos:column="65">ch</name> <op:operator pos:line="94" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="94" pos:column="71">','</lit:literal></expr> )</condition><then pos:line="94" pos:column="76">
		<return pos:line="95" pos:column="17">return <expr><lit:literal type="boolean" pos:line="95" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="96" pos:column="9">return <expr><lit:literal type="boolean" pos:line="96" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="99" pos:column="1">///////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="100" pos:column="1">// GetSendKey() filters the portion before and after a/multiple space(s)</comment>
<comment type="line" pos:line="101" pos:column="1">// and return the first portion to be looked-up in the table</comment>
<comment type="line" pos:line="102" pos:column="1">// also check if the second portion is valid... (up,down.on.off,toggle or a number)</comment>
<comment type="line" format="doxygen" pos:line="103" pos:column="1">///////////////////////////////////////////////////////////////////////////////</comment>

<function><type><specifier pos:line="105" pos:column="1">static</specifier> <name pos:line="105" pos:column="8">int</name></type> <name pos:line="105" pos:column="12">GetSendKey</name><parameter_list pos:line="105" pos:column="22">(<param><decl><type><specifier pos:line="105" pos:column="23">const</specifier> <name pos:line="105" pos:column="29">char</name> <type:modifier pos:line="105" pos:column="34">*</type:modifier></type><name pos:line="105" pos:column="35">szLine</name></decl></param>, <param><decl><type><name pos:line="105" pos:column="43">char</name> <type:modifier pos:line="105" pos:column="48">*</type:modifier></type><name pos:line="105" pos:column="49">szKey</name></decl></param>)</parameter_list>
<block pos:line="106" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="107" pos:column="9">int</name></type>		<name pos:line="107" pos:column="25">nFlag</name>	<init pos:line="107" pos:column="33">= <expr><lit:literal type="number" pos:line="107" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="108" pos:column="9">int</name></type>		<name pos:line="108" pos:column="25">nStartFound</name>	<init pos:line="108" pos:column="41">= <expr><lit:literal type="number" pos:line="108" pos:column="43">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="109" pos:column="9">int</name></type>		<name pos:line="109" pos:column="25">nKeyPos</name>	<init pos:line="109" pos:column="33">= <expr><lit:literal type="number" pos:line="109" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="110" pos:column="9">int</name></type>		<name pos:line="110" pos:column="25">nSpecPos</name><init pos:line="110" pos:column="33">= <expr><lit:literal type="number" pos:line="110" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="111" pos:column="9">int</name></type>		<name pos:line="111" pos:column="25">nSpecNum</name><init pos:line="111" pos:column="33">= <expr><lit:literal type="number" pos:line="111" pos:column="35">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="112" pos:column="9">int</name></type>		<name pos:line="112" pos:column="25">nPos</name>	<init pos:line="112" pos:column="33">= <expr><lit:literal type="number" pos:line="112" pos:column="35">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="113" pos:column="9">char</name></type>	<name pos:line="113" pos:column="17">cTemp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="114" pos:column="9">char</name></type>	<name><name pos:line="114" pos:column="17">szSpecial</name><index pos:line="114" pos:column="26">[<expr><lit:literal type="number" pos:line="114" pos:column="27">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="line" pos:line="116" pos:column="9">// split the portion of the sendkey in the part before and after the spaces</comment>
	<while pos:line="117" pos:column="9">while <condition pos:line="117" pos:column="15">( <expr><op:operator pos:line="117" pos:column="17">(</op:operator> <op:operator pos:line="117" pos:column="19">(</op:operator><name pos:line="117" pos:column="20">cTemp</name> <op:operator pos:line="117" pos:column="26">=</op:operator> <name><name pos:line="117" pos:column="28">szLine</name><index pos:line="117" pos:column="34">[<expr><name pos:line="117" pos:column="35">nPos</name></expr>]</index></name><op:operator pos:line="117" pos:column="40">)</op:operator> <op:operator pos:line="117" pos:column="42">!=</op:operator> <lit:literal type="char" pos:line="117" pos:column="45">'\0'</lit:literal><op:operator pos:line="117" pos:column="49">)</op:operator></expr>)</condition>
	<block pos:line="118" pos:column="9">{
		<comment type="line" pos:line="119" pos:column="17">// skip leading Ctrl/Shift/Alt state</comment>
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name pos:line="120" pos:column="21">cTemp</name> <op:operator pos:line="120" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="30">'{'</lit:literal></expr>)</condition><then pos:line="120" pos:column="34"> <block pos:line="120" pos:column="35">{
			<expr_stmt><expr><name pos:line="121" pos:column="25">nStartFound</name> <op:operator pos:line="121" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="121" pos:column="39">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="123" pos:column="17">//</comment>
		<if pos:line="124" pos:column="17">if <condition pos:line="124" pos:column="20">(<expr><name pos:line="124" pos:column="21">nStartFound</name> <op:operator pos:line="124" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="124" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="124" pos:column="38"> <block pos:line="124" pos:column="39">{
			<if pos:line="125" pos:column="25">if <condition pos:line="125" pos:column="28">(<expr><op:operator pos:line="125" pos:column="29">(</op:operator><name pos:line="125" pos:column="30">cTemp</name> <op:operator pos:line="125" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="39">' '</lit:literal><op:operator pos:line="125" pos:column="42">)</op:operator> <op:operator pos:line="125" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="125" pos:column="47">(</op:operator><name pos:line="125" pos:column="48">nFlag</name> <op:operator pos:line="125" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="125" pos:column="57">0</lit:literal><op:operator pos:line="125" pos:column="58">)</op:operator></expr> )</condition><then pos:line="125" pos:column="61"> <comment type="line" pos:line="125" pos:column="62">// get the stuff till first space</comment>
			<block pos:line="126" pos:column="25">{
				<expr_stmt><expr><name pos:line="127" pos:column="33">nFlag</name> <op:operator pos:line="127" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="127" pos:column="41">1</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="128" pos:column="33">// Add } to the end of the first bit for table lookup later.</comment>
				<expr_stmt><expr><name><name pos:line="129" pos:column="33">szKey</name><index pos:line="129" pos:column="38">[<expr><name pos:line="129" pos:column="39">nKeyPos</name><op:operator pos:line="129" pos:column="46">++</op:operator></expr>]</index></name> <op:operator pos:line="129" pos:column="50">=</op:operator> <lit:literal type="char" pos:line="129" pos:column="52">'}'</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="131" pos:column="25">else <if pos:line="131" pos:column="30">if <condition pos:line="131" pos:column="33">(<expr><name pos:line="131" pos:column="34">cTemp</name> <op:operator pos:line="131" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="43">' '</lit:literal></expr>)</condition><then pos:line="131" pos:column="47">
			<block pos:line="132" pos:column="25">{
				<comment type="line" pos:line="133" pos:column="33">// skip other spaces</comment>
			}</block></then>
			<else pos:line="135" pos:column="25">else <if pos:line="135" pos:column="30">if <condition pos:line="135" pos:column="33">(<expr><name pos:line="135" pos:column="34">nFlag</name> <op:operator pos:line="135" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="135" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="135" pos:column="45">
			<block pos:line="136" pos:column="25">{
				<comment type="line" pos:line="137" pos:column="33">// save first portion into var till space or } is hit</comment>
				<expr_stmt><expr><name><name pos:line="138" pos:column="33">szKey</name><index pos:line="138" pos:column="38">[<expr><name pos:line="138" pos:column="39">nKeyPos</name><op:operator pos:line="138" pos:column="46">++</op:operator></expr>]</index></name> <op:operator pos:line="138" pos:column="50">=</op:operator> <name pos:line="138" pos:column="52">cTemp</name></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="140" pos:column="25">else <if pos:line="140" pos:column="30">if <condition pos:line="140" pos:column="33">(<expr><op:operator pos:line="140" pos:column="34">(</op:operator><name pos:line="140" pos:column="35">nFlag</name> <op:operator pos:line="140" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="140" pos:column="44">1</lit:literal><op:operator pos:line="140" pos:column="45">)</op:operator> <op:operator pos:line="140" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="140" pos:column="50">(</op:operator><name pos:line="140" pos:column="51">cTemp</name> <op:operator pos:line="140" pos:column="57">!=</op:operator> <lit:literal type="char" pos:line="140" pos:column="60">'}'</lit:literal><op:operator pos:line="140" pos:column="63">)</op:operator></expr>)</condition><then pos:line="140" pos:column="65">
			<block pos:line="141" pos:column="25">{
				<comment type="line" pos:line="142" pos:column="33">// Save second portion into var...</comment>
				<expr_stmt><expr><name><name pos:line="143" pos:column="33">szSpecial</name><index pos:line="143" pos:column="42">[<expr><name pos:line="143" pos:column="43">nSpecPos</name><op:operator pos:line="143" pos:column="51">++</op:operator></expr>]</index></name> <op:operator pos:line="143" pos:column="55">=</op:operator> <name pos:line="143" pos:column="57">cTemp</name></expr>;</expr_stmt>
				<comment type="line" pos:line="144" pos:column="33">// check if Second portion is all numbers for repeat fuction</comment>
				<if pos:line="145" pos:column="33">if <condition pos:line="145" pos:column="36">(<expr><call><name pos:line="145" pos:column="37">isdigit</name><argument_list pos:line="145" pos:column="44">(<argument><expr><name pos:line="145" pos:column="45">cTemp</name></expr></argument>)</argument_list></call> <op:operator pos:line="145" pos:column="52">==</op:operator> <lit:literal type="boolean" pos:line="145" pos:column="55">false</lit:literal></expr>)</condition><then pos:line="145" pos:column="61"> <block pos:line="145" pos:column="62">{<expr_stmt><expr><name pos:line="145" pos:column="63">nSpecNum</name> <op:operator pos:line="145" pos:column="72">=</op:operator> <lit:literal type="number" pos:line="145" pos:column="74">0</lit:literal></expr>;</expr_stmt>}</block></then></if>
			}</block></then></if></else></if></else></if></else></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="148" pos:column="17">nPos</name><op:operator pos:line="148" pos:column="21">++</op:operator></expr>;</expr_stmt>									<comment type="line" pos:line="148" pos:column="89">// skip to next char</comment>

	}</block></while> <comment type="line" pos:line="150" pos:column="11">// End While</comment>


	<comment type="line" pos:line="153" pos:column="9">// Check if the second portion is either a number or one of these keywords</comment>
	<expr_stmt><expr><name><name pos:line="154" pos:column="9">szKey</name><index pos:line="154" pos:column="14">[<expr><name pos:line="154" pos:column="15">nKeyPos</name></expr>]</index></name> <op:operator pos:line="154" pos:column="24">=</op:operator> <lit:literal type="char" pos:line="154" pos:column="26">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="155" pos:column="9">szSpecial</name><index pos:line="155" pos:column="18">[<expr><name pos:line="155" pos:column="19">nSpecPos</name></expr>]</index></name> <op:operator pos:line="155" pos:column="29">=</op:operator> <lit:literal type="char" pos:line="155" pos:column="31">'\0'</lit:literal></expr>;</expr_stmt>
	<if pos:line="156" pos:column="9">if <condition pos:line="156" pos:column="12">(<expr><call><name pos:line="156" pos:column="13">strcmp</name><argument_list pos:line="156" pos:column="19">(<argument><expr><name pos:line="156" pos:column="20">szSpecial</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="156" pos:column="30">"down"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="156" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="156" pos:column="40">0</lit:literal>    <op:operator pos:line="156" pos:column="45">||</op:operator> <call><name pos:line="156" pos:column="48">strcmp</name><argument_list pos:line="156" pos:column="54">(<argument><expr><name pos:line="156" pos:column="55">szSpecial</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="156" pos:column="65">"up"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="156" pos:column="70">==</op:operator> <lit:literal type="number" pos:line="156" pos:column="73">0</lit:literal>  <op:operator pos:line="156" pos:column="76">||</op:operator>
		<call><name pos:line="157" pos:column="17">strcmp</name><argument_list pos:line="157" pos:column="23">(<argument><expr><name pos:line="157" pos:column="24">szSpecial</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="157" pos:column="34">"on"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="157" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="157" pos:column="42">0</lit:literal>      <op:operator pos:line="157" pos:column="49">||</op:operator> <call><name pos:line="157" pos:column="52">strcmp</name><argument_list pos:line="157" pos:column="58">(<argument><expr><name pos:line="157" pos:column="59">szSpecial</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="157" pos:column="69">"off"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="157" pos:column="75">==</op:operator> <lit:literal type="number" pos:line="157" pos:column="78">0</lit:literal> <op:operator pos:line="157" pos:column="80">||</op:operator>
		<call><name pos:line="158" pos:column="17">strcmp</name><argument_list pos:line="158" pos:column="23">(<argument><expr><name pos:line="158" pos:column="24">szSpecial</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="158" pos:column="34">"toggle"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="158" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="158" pos:column="46">0</lit:literal>  <op:operator pos:line="158" pos:column="49">||</op:operator> <name pos:line="158" pos:column="52">nSpecNum</name> <op:operator pos:line="158" pos:column="61">==</op:operator> <lit:literal type="number" pos:line="158" pos:column="64">1</lit:literal></expr> )</condition><then pos:line="158" pos:column="67">
	<block pos:line="159" pos:column="9">{
		<expr_stmt><expr><name pos:line="160" pos:column="17">nFlag</name> <op:operator pos:line="160" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="160" pos:column="25">0</lit:literal></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="162" pos:column="9">else
	<block pos:line="163" pos:column="9">{
		<expr_stmt><expr><name pos:line="164" pos:column="17">nFlag</name> <op:operator pos:line="164" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="164" pos:column="25">1</lit:literal></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="166" pos:column="9">return <expr><name pos:line="166" pos:column="16">nFlag</name></expr>;</return>  <comment type="line" pos:line="166" pos:column="24">// 1 is bad, 0 is good</comment>

}</block></function> <comment type="line" pos:line="168" pos:column="3">// GetSendKey()</comment>

<comment type="line" pos:line="170" pos:column="1">//</comment>
<comment type="line" pos:line="171" pos:column="1">// Routine to check the last "none comment" character on a line to see if its a continuation</comment>
<comment type="line" pos:line="172" pos:column="1">//</comment>
<function><type><specifier pos:line="173" pos:column="1">static</specifier> <name pos:line="173" pos:column="8">bool</name></type> <name pos:line="173" pos:column="13">IsContinuationLine</name><parameter_list pos:line="173" pos:column="31">(<param><decl><type><name pos:line="173" pos:column="32">unsigned</name> <name pos:line="173" pos:column="41">int</name></type> <name pos:line="173" pos:column="45">szLine</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="53">Accessor</name> <type:modifier pos:line="173" pos:column="62">&amp;</type:modifier></type><name pos:line="173" pos:column="63">styler</name></decl></param>)</parameter_list>
<block pos:line="174" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">int</name></type> <name pos:line="175" pos:column="13">nsPos</name> <init pos:line="175" pos:column="19">= <expr><call><name><name pos:line="175" pos:column="21">styler</name><op:operator pos:line="175" pos:column="27">.</op:operator><name pos:line="175" pos:column="28">LineStart</name></name><argument_list pos:line="175" pos:column="37">(<argument><expr><name pos:line="175" pos:column="38">szLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="176" pos:column="9">int</name></type> <name pos:line="176" pos:column="13">nePos</name> <init pos:line="176" pos:column="19">= <expr><call><name><name pos:line="176" pos:column="21">styler</name><op:operator pos:line="176" pos:column="27">.</op:operator><name pos:line="176" pos:column="28">LineStart</name></name><argument_list pos:line="176" pos:column="37">(<argument><expr><name pos:line="176" pos:column="38">szLine</name><op:operator pos:line="176" pos:column="44">+</op:operator><lit:literal type="number" pos:line="176" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="176" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="176" pos:column="50">2</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="177" pos:column="9">//int stylech = styler.StyleAt(nsPos);</comment>
	<while pos:line="178" pos:column="9">while <condition pos:line="178" pos:column="15">(<expr><name pos:line="178" pos:column="16">nsPos</name> <op:operator pos:line="178" pos:column="22">&lt;</op:operator> <name pos:line="178" pos:column="24">nePos</name></expr>)</condition>
	<block pos:line="179" pos:column="9">{
		<comment type="line" pos:line="180" pos:column="17">//stylech = styler.StyleAt(nePos);</comment>
		<decl_stmt><decl><type><name pos:line="181" pos:column="17">int</name></type> <name pos:line="181" pos:column="21">stylech</name> <init pos:line="181" pos:column="29">= <expr><call><name><name pos:line="181" pos:column="31">styler</name><op:operator pos:line="181" pos:column="37">.</op:operator><name pos:line="181" pos:column="38">StyleAt</name></name><argument_list pos:line="181" pos:column="45">(<argument><expr><name pos:line="181" pos:column="46">nsPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="182" pos:column="17">if <condition pos:line="182" pos:column="20">(<expr><op:operator pos:line="182" pos:column="21">!</op:operator><op:operator pos:line="182" pos:column="22">(</op:operator><name pos:line="182" pos:column="23">stylech</name> <op:operator pos:line="182" pos:column="31">==</op:operator> <name pos:line="182" pos:column="34">SCE_AU3_COMMENT</name><op:operator pos:line="182" pos:column="49">)</op:operator></expr>)</condition><then pos:line="182" pos:column="51"> <block pos:line="182" pos:column="52">{
			<decl_stmt><decl><type><name pos:line="183" pos:column="25">char</name></type> <name pos:line="183" pos:column="30">ch</name> <init pos:line="183" pos:column="33">= <expr><call><name><name pos:line="183" pos:column="35">styler</name><op:operator pos:line="183" pos:column="41">.</op:operator><name pos:line="183" pos:column="42">SafeGetCharAt</name></name><argument_list pos:line="183" pos:column="55">(<argument><expr><name pos:line="183" pos:column="56">nePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="184" pos:column="25">if <condition pos:line="184" pos:column="28">(<expr><op:operator pos:line="184" pos:column="29">!</op:operator><call><name pos:line="184" pos:column="30">isspacechar</name><argument_list pos:line="184" pos:column="41">(<argument><expr><name pos:line="184" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="184" pos:column="46"> <block pos:line="184" pos:column="47">{
				<if pos:line="185" pos:column="33">if <condition pos:line="185" pos:column="36">(<expr><name pos:line="185" pos:column="37">ch</name> <op:operator pos:line="185" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="43">'_'</lit:literal></expr>)</condition><then pos:line="185" pos:column="47">
					<return pos:line="186" pos:column="41">return <expr><lit:literal type="boolean" pos:line="186" pos:column="48">true</lit:literal></expr>;</return></then>
				<else pos:line="187" pos:column="33">else
					<return pos:line="188" pos:column="41">return <expr><lit:literal type="boolean" pos:line="188" pos:column="48">false</lit:literal></expr>;</return></else></if>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="191" pos:column="17">nePos</name><op:operator pos:line="191" pos:column="22">--</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="191" pos:column="26">// skip to next char</comment>
	}</block></while> <comment type="line" pos:line="192" pos:column="11">// End While</comment>
	<return pos:line="193" pos:column="9">return <expr><lit:literal type="boolean" pos:line="193" pos:column="16">false</lit:literal></expr>;</return>
}</block></function> <comment type="line" pos:line="194" pos:column="3">// IsContinuationLine()</comment>

<comment type="line" pos:line="196" pos:column="1">//</comment>
<comment type="line" pos:line="197" pos:column="1">// syntax highlighting logic</comment>
<function><type><specifier pos:line="198" pos:column="1">static</specifier> <name pos:line="198" pos:column="8">void</name></type> <name pos:line="198" pos:column="13">ColouriseAU3Doc</name><parameter_list pos:line="198" pos:column="28">(<param><decl><type><name pos:line="198" pos:column="29">unsigned</name> <name pos:line="198" pos:column="38">int</name></type> <name pos:line="198" pos:column="42">startPos</name></decl></param>,
							<param><decl><type><name pos:line="199" pos:column="57">int</name></type> <name pos:line="199" pos:column="61">length</name></decl></param>, <param><decl><type><name pos:line="199" pos:column="69">int</name></type> <name pos:line="199" pos:column="73">initStyle</name></decl></param>,
							<param><decl><type><name pos:line="200" pos:column="57">WordList</name> <type:modifier pos:line="200" pos:column="66">*</type:modifier></type><name><name pos:line="200" pos:column="67">keywordlists</name><index pos:line="200" pos:column="79">[]</index></name></decl></param>,
							<param><decl><type><name pos:line="201" pos:column="57">Accessor</name> <type:modifier pos:line="201" pos:column="66">&amp;</type:modifier></type><name pos:line="201" pos:column="67">styler</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="75">{

    <decl_stmt><decl><type><name pos:line="203" pos:column="5">WordList</name> <type:modifier pos:line="203" pos:column="14">&amp;</type:modifier></type><name pos:line="203" pos:column="15">keywords</name> <init pos:line="203" pos:column="24">= <expr><op:operator pos:line="203" pos:column="26">*</op:operator><name><name pos:line="203" pos:column="27">keywordlists</name><index pos:line="203" pos:column="39">[<expr><lit:literal type="number" pos:line="203" pos:column="40">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="204" pos:column="5">WordList</name> <type:modifier pos:line="204" pos:column="14">&amp;</type:modifier></type><name pos:line="204" pos:column="15">keywords2</name> <init pos:line="204" pos:column="25">= <expr><op:operator pos:line="204" pos:column="27">*</op:operator><name><name pos:line="204" pos:column="28">keywordlists</name><index pos:line="204" pos:column="40">[<expr><lit:literal type="number" pos:line="204" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="205" pos:column="5">WordList</name> <type:modifier pos:line="205" pos:column="14">&amp;</type:modifier></type><name pos:line="205" pos:column="15">keywords3</name> <init pos:line="205" pos:column="25">= <expr><op:operator pos:line="205" pos:column="27">*</op:operator><name><name pos:line="205" pos:column="28">keywordlists</name><index pos:line="205" pos:column="40">[<expr><lit:literal type="number" pos:line="205" pos:column="41">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="206" pos:column="5">WordList</name> <type:modifier pos:line="206" pos:column="14">&amp;</type:modifier></type><name pos:line="206" pos:column="15">keywords4</name> <init pos:line="206" pos:column="25">= <expr><op:operator pos:line="206" pos:column="27">*</op:operator><name><name pos:line="206" pos:column="28">keywordlists</name><index pos:line="206" pos:column="40">[<expr><lit:literal type="number" pos:line="206" pos:column="41">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="207" pos:column="5">WordList</name> <type:modifier pos:line="207" pos:column="14">&amp;</type:modifier></type><name pos:line="207" pos:column="15">keywords5</name> <init pos:line="207" pos:column="25">= <expr><op:operator pos:line="207" pos:column="27">*</op:operator><name><name pos:line="207" pos:column="28">keywordlists</name><index pos:line="207" pos:column="40">[<expr><lit:literal type="number" pos:line="207" pos:column="41">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="208" pos:column="5">WordList</name> <type:modifier pos:line="208" pos:column="14">&amp;</type:modifier></type><name pos:line="208" pos:column="15">keywords6</name> <init pos:line="208" pos:column="25">= <expr><op:operator pos:line="208" pos:column="27">*</op:operator><name><name pos:line="208" pos:column="28">keywordlists</name><index pos:line="208" pos:column="40">[<expr><lit:literal type="number" pos:line="208" pos:column="41">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="209" pos:column="5">WordList</name> <type:modifier pos:line="209" pos:column="14">&amp;</type:modifier></type><name pos:line="209" pos:column="15">keywords7</name> <init pos:line="209" pos:column="25">= <expr><op:operator pos:line="209" pos:column="27">*</op:operator><name><name pos:line="209" pos:column="28">keywordlists</name><index pos:line="209" pos:column="40">[<expr><lit:literal type="number" pos:line="209" pos:column="41">6</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="210" pos:column="5">WordList</name> <type:modifier pos:line="210" pos:column="14">&amp;</type:modifier></type><name pos:line="210" pos:column="15">keywords8</name> <init pos:line="210" pos:column="25">= <expr><op:operator pos:line="210" pos:column="27">*</op:operator><name><name pos:line="210" pos:column="28">keywordlists</name><index pos:line="210" pos:column="40">[<expr><lit:literal type="number" pos:line="210" pos:column="41">7</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="211" pos:column="9">// find the first previous line without continuation character at the end</comment>
	<decl_stmt><decl><type><name pos:line="212" pos:column="9">int</name></type> <name pos:line="212" pos:column="13">lineCurrent</name> <init pos:line="212" pos:column="25">= <expr><call><name><name pos:line="212" pos:column="27">styler</name><op:operator pos:line="212" pos:column="33">.</op:operator><name pos:line="212" pos:column="34">GetLine</name></name><argument_list pos:line="212" pos:column="41">(<argument><expr><name pos:line="212" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="213" pos:column="9">int</name></type> <name pos:line="213" pos:column="13">s_startPos</name> <init pos:line="213" pos:column="24">= <expr><name pos:line="213" pos:column="26">startPos</name></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="214" pos:column="9">// When not inside a Block comment: find First line without _</comment>
	<if pos:line="215" pos:column="9">if <condition pos:line="215" pos:column="12">(<expr><op:operator pos:line="215" pos:column="13">!</op:operator><op:operator pos:line="215" pos:column="14">(</op:operator><name pos:line="215" pos:column="15">initStyle</name><op:operator pos:line="215" pos:column="24">==</op:operator><name pos:line="215" pos:column="26">SCE_AU3_COMMENTBLOCK</name><op:operator pos:line="215" pos:column="46">)</op:operator></expr>)</condition><then pos:line="215" pos:column="48"> <block pos:line="215" pos:column="49">{
		<while pos:line="216" pos:column="17">while <condition pos:line="216" pos:column="23">(<expr><op:operator pos:line="216" pos:column="24">(</op:operator><name pos:line="216" pos:column="25">lineCurrent</name> <op:operator pos:line="216" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="216" pos:column="39">0</lit:literal> <op:operator pos:line="216" pos:column="41">&amp;&amp;</op:operator> <call><name pos:line="216" pos:column="44">IsContinuationLine</name><argument_list pos:line="216" pos:column="62">(<argument><expr><name pos:line="216" pos:column="63">lineCurrent</name></expr></argument>,<argument><expr><name pos:line="216" pos:column="75">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="216" pos:column="82">)</op:operator> <op:operator pos:line="216" pos:column="84">||</op:operator>
			   <op:operator pos:line="217" pos:column="28">(</op:operator><name pos:line="217" pos:column="29">lineCurrent</name> <op:operator pos:line="217" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="217" pos:column="43">1</lit:literal> <op:operator pos:line="217" pos:column="45">&amp;&amp;</op:operator> <call><name pos:line="217" pos:column="48">IsContinuationLine</name><argument_list pos:line="217" pos:column="66">(<argument><expr><name pos:line="217" pos:column="67">lineCurrent</name><op:operator pos:line="217" pos:column="78">-</op:operator><lit:literal type="number" pos:line="217" pos:column="79">1</lit:literal></expr></argument>,<argument><expr><name pos:line="217" pos:column="81">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="217" pos:column="88">)</op:operator></expr>)</condition> <block pos:line="217" pos:column="91">{
			<expr_stmt><expr><name pos:line="218" pos:column="25">lineCurrent</name><op:operator pos:line="218" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="219" pos:column="25">startPos</name> <op:operator pos:line="219" pos:column="34">=</op:operator> <call><name><name pos:line="219" pos:column="36">styler</name><op:operator pos:line="219" pos:column="42">.</op:operator><name pos:line="219" pos:column="43">LineStart</name></name><argument_list pos:line="219" pos:column="52">(<argument><expr><name pos:line="219" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="219" pos:column="67">// get start position</comment>
			<expr_stmt><expr><name pos:line="220" pos:column="25">initStyle</name> <op:operator pos:line="220" pos:column="35">=</op:operator>  <lit:literal type="number" pos:line="220" pos:column="38">0</lit:literal></expr>;</expr_stmt>                           <comment type="line" pos:line="220" pos:column="67">// reset the start style to 0</comment>
		}</block></while>
	}</block></then></if>
	<comment type="line" pos:line="223" pos:column="9">// Set the new length to include it from the start and set the start position</comment>
	<expr_stmt><expr><name pos:line="224" pos:column="9">length</name> <op:operator pos:line="224" pos:column="16">=</op:operator> <name pos:line="224" pos:column="18">length</name> <op:operator pos:line="224" pos:column="25">+</op:operator> <name pos:line="224" pos:column="27">s_startPos</name> <op:operator pos:line="224" pos:column="38">-</op:operator> <name pos:line="224" pos:column="40">startPos</name></expr>;</expr_stmt>      <comment type="line" pos:line="224" pos:column="55">// correct the total length to process</comment>
    <expr_stmt><expr><call><name><name pos:line="225" pos:column="5">styler</name><op:operator pos:line="225" pos:column="11">.</op:operator><name pos:line="225" pos:column="12">StartAt</name></name><argument_list pos:line="225" pos:column="19">(<argument><expr><name pos:line="225" pos:column="20">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <function_decl><type><name pos:line="227" pos:column="5">StyleContext</name></type> <name pos:line="227" pos:column="18">sc</name><parameter_list pos:line="227" pos:column="20">(<param><decl><type><name pos:line="227" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="227" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="227" pos:column="39">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="227" pos:column="50">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="228" pos:column="9">char</name></type> <name pos:line="228" pos:column="14">si</name></decl>;</decl_stmt>     <comment type="line" pos:line="228" pos:column="22">// string indicator "=1 '=2</comment>
	<decl_stmt><decl><type><name pos:line="229" pos:column="9">char</name></type> <name pos:line="229" pos:column="14">ni</name></decl>;</decl_stmt>     <comment type="line" pos:line="229" pos:column="22">// Numeric indicator error=9 normal=0 normal+dec=1 hex=2 Enot=3</comment>
	<decl_stmt><decl><type><name pos:line="230" pos:column="9">char</name></type> <name pos:line="230" pos:column="14">ci</name></decl>;</decl_stmt>     <comment type="line" pos:line="230" pos:column="22">// comment indicator 0=not linecomment(;)</comment>
	<decl_stmt><decl><type><name pos:line="231" pos:column="9">char</name></type> <name><name pos:line="231" pos:column="14">s_save</name><index pos:line="231" pos:column="20">[<expr><lit:literal type="number" pos:line="231" pos:column="21">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="232" pos:column="9">si</name><op:operator pos:line="232" pos:column="11">=</op:operator><lit:literal type="number" pos:line="232" pos:column="12">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="233" pos:column="9">ni</name><op:operator pos:line="233" pos:column="11">=</op:operator><lit:literal type="number" pos:line="233" pos:column="12">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="234" pos:column="9">ci</name><op:operator pos:line="234" pos:column="11">=</op:operator><lit:literal type="number" pos:line="234" pos:column="12">0</lit:literal></expr>;</expr_stmt>
	<comment type="line" pos:line="235" pos:column="9">//$$$</comment>
    <for pos:line="236" pos:column="5">for (<init pos:line="236" pos:column="10">;</init> <condition><expr><call><name><name pos:line="236" pos:column="12">sc</name><op:operator pos:line="236" pos:column="14">.</op:operator><name pos:line="236" pos:column="15">More</name></name><argument_list pos:line="236" pos:column="19">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="236" pos:column="23">sc</name><op:operator pos:line="236" pos:column="25">.</op:operator><name pos:line="236" pos:column="26">Forward</name></name><argument_list pos:line="236" pos:column="33">()</argument_list></call></expr></incr>) <block pos:line="236" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="237" pos:column="17">char</name></type> <name><name pos:line="237" pos:column="22">s</name><index pos:line="237" pos:column="23">[<expr><lit:literal type="number" pos:line="237" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="238" pos:column="17">sc</name><op:operator pos:line="238" pos:column="19">.</op:operator><name pos:line="238" pos:column="20">GetCurrentLowered</name></name><argument_list pos:line="238" pos:column="37">(<argument><expr><name pos:line="238" pos:column="38">s</name></expr></argument>, <argument><expr><sizeof pos:line="238" pos:column="41">sizeof<argument_list pos:line="238" pos:column="47">(<argument><expr><name pos:line="238" pos:column="48">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="239" pos:column="17">// **********************************************</comment>
		<comment type="line" pos:line="240" pos:column="17">// save the total current word for eof processing</comment>
		<if pos:line="241" pos:column="17">if <condition pos:line="241" pos:column="20">(<expr><call><name pos:line="241" pos:column="21">IsAWordChar</name><argument_list pos:line="241" pos:column="32">(<argument><expr><name><name pos:line="241" pos:column="33">sc</name><op:operator pos:line="241" pos:column="35">.</op:operator><name pos:line="241" pos:column="36">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="241" pos:column="40">||</op:operator> <name><name pos:line="241" pos:column="43">sc</name><op:operator pos:line="241" pos:column="45">.</op:operator><name pos:line="241" pos:column="46">ch</name></name> <op:operator pos:line="241" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="241" pos:column="52">'}'</lit:literal></expr>)</condition><then pos:line="241" pos:column="56">
		<block pos:line="242" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="243" pos:column="25">strcpy</name><argument_list pos:line="243" pos:column="31">(<argument><expr><name pos:line="243" pos:column="32">s_save</name></expr></argument>,<argument><expr><name pos:line="243" pos:column="39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="244" pos:column="25">int</name></type> <name pos:line="244" pos:column="29">tp</name> <init pos:line="244" pos:column="32">= <expr><call><name pos:line="244" pos:column="34">strlen</name><argument_list pos:line="244" pos:column="40">(<argument><expr><name pos:line="244" pos:column="41">s_save</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="245" pos:column="25">if <condition pos:line="245" pos:column="28">(<expr><name pos:line="245" pos:column="29">tp</name> <op:operator pos:line="245" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="245" pos:column="34">99</lit:literal></expr>)</condition><then pos:line="245" pos:column="37"> <block pos:line="245" pos:column="38">{
				<expr_stmt><expr><name><name pos:line="246" pos:column="33">s_save</name><index pos:line="246" pos:column="39">[<expr><name pos:line="246" pos:column="40">tp</name></expr>]</index></name> <op:operator pos:line="246" pos:column="44">=</op:operator> <call><name><name pos:line="246" pos:column="46">static_cast</name><argument_list pos:line="246" pos:column="57">&lt;<argument><expr><name pos:line="246" pos:column="58">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="246" pos:column="63">(<argument><expr><call><name pos:line="246" pos:column="64">tolower</name><argument_list pos:line="246" pos:column="71">(<argument><expr><name><name pos:line="246" pos:column="72">sc</name><op:operator pos:line="246" pos:column="74">.</op:operator><name pos:line="246" pos:column="75">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="247" pos:column="33">s_save</name><index pos:line="247" pos:column="39">[<expr><name pos:line="247" pos:column="40">tp</name><op:operator pos:line="247" pos:column="42">+</op:operator><lit:literal type="number" pos:line="247" pos:column="43">1</lit:literal></expr>]</index></name> <op:operator pos:line="247" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="247" pos:column="48">'\0'</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="250" pos:column="17">// **********************************************</comment>
		<comment type="line" pos:line="251" pos:column="17">//</comment>
		<switch pos:line="252" pos:column="17">switch <condition pos:line="252" pos:column="24">(<expr><name><name pos:line="252" pos:column="25">sc</name><op:operator pos:line="252" pos:column="27">.</op:operator><name pos:line="252" pos:column="28">state</name></name></expr>)</condition>
        <block pos:line="253" pos:column="9">{
            <case pos:line="254" pos:column="13">case <expr><name pos:line="254" pos:column="18">SCE_AU3_COMMENTBLOCK</name></expr>:
            <block pos:line="255" pos:column="13">{
				<comment type="line" pos:line="256" pos:column="33">//Reset at line end</comment>
				<if pos:line="257" pos:column="33">if <condition pos:line="257" pos:column="36">(<expr><name><name pos:line="257" pos:column="37">sc</name><op:operator pos:line="257" pos:column="39">.</op:operator><name pos:line="257" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="257" pos:column="50"> <block pos:line="257" pos:column="51">{
					<expr_stmt><expr><name pos:line="258" pos:column="41">ci</name><op:operator pos:line="258" pos:column="43">=</op:operator><lit:literal type="number" pos:line="258" pos:column="44">0</lit:literal></expr>;</expr_stmt>
					<if pos:line="259" pos:column="41">if <condition pos:line="259" pos:column="44">(<expr><call><name pos:line="259" pos:column="45">strcmp</name><argument_list pos:line="259" pos:column="51">(<argument><expr><name pos:line="259" pos:column="52">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="259" pos:column="55">"#ce"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="259" pos:column="61">==</op:operator> <lit:literal type="number" pos:line="259" pos:column="64">0</lit:literal> <op:operator pos:line="259" pos:column="66">||</op:operator> <call><name pos:line="259" pos:column="69">strcmp</name><argument_list pos:line="259" pos:column="75">(<argument><expr><name pos:line="259" pos:column="76">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="259" pos:column="79">"#comments-end"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="259" pos:column="95">==</op:operator> <lit:literal type="number" pos:line="259" pos:column="98">0</lit:literal></expr>)</condition><then pos:line="259" pos:column="100"> <block pos:line="259" pos:column="101">{
						<if pos:line="260" pos:column="49">if <condition pos:line="260" pos:column="52">(<expr><name><name pos:line="260" pos:column="53">sc</name><op:operator pos:line="260" pos:column="55">.</op:operator><name pos:line="260" pos:column="56">atLineEnd</name></name></expr>)</condition><then pos:line="260" pos:column="66">
							<expr_stmt><expr><call><name><name pos:line="261" pos:column="57">sc</name><op:operator pos:line="261" pos:column="59">.</op:operator><name pos:line="261" pos:column="60">SetState</name></name><argument_list pos:line="261" pos:column="68">(<argument><expr><name pos:line="261" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
						<else pos:line="262" pos:column="49">else
							<expr_stmt><expr><call><name><name pos:line="263" pos:column="57">sc</name><op:operator pos:line="263" pos:column="59">.</op:operator><name pos:line="263" pos:column="60">SetState</name></name><argument_list pos:line="263" pos:column="68">(<argument><expr><name pos:line="263" pos:column="69">SCE_AU3_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
					}</block></then></if>
					<break pos:line="265" pos:column="41">break;</break>
				}</block></then></if>
				<comment type="line" pos:line="267" pos:column="33">//skip rest of line when a ; is encountered</comment>
				<if pos:line="268" pos:column="33">if <condition pos:line="268" pos:column="36">(<expr><name><name pos:line="268" pos:column="37">sc</name><op:operator pos:line="268" pos:column="39">.</op:operator><name pos:line="268" pos:column="40">chPrev</name></name> <op:operator pos:line="268" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="268" pos:column="50">';'</lit:literal></expr>)</condition><then pos:line="268" pos:column="54"> <block pos:line="268" pos:column="55">{
					<expr_stmt><expr><name pos:line="269" pos:column="41">ci</name><op:operator pos:line="269" pos:column="43">=</op:operator><lit:literal type="number" pos:line="269" pos:column="44">2</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="270" pos:column="41">sc</name><op:operator pos:line="270" pos:column="43">.</op:operator><name pos:line="270" pos:column="44">SetState</name></name><argument_list pos:line="270" pos:column="52">(<argument><expr><name pos:line="270" pos:column="53">SCE_AU3_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="272" pos:column="33">// skip rest of the line</comment>
				<if pos:line="273" pos:column="33">if <condition pos:line="273" pos:column="36">(<expr><name pos:line="273" pos:column="37">ci</name><op:operator pos:line="273" pos:column="39">==</op:operator><lit:literal type="number" pos:line="273" pos:column="41">2</lit:literal></expr>)</condition><then pos:line="273" pos:column="43">
					<break pos:line="274" pos:column="41">break;</break></then></if>
				<comment type="line" pos:line="275" pos:column="33">// check when first character is detected on the line</comment>
				<if pos:line="276" pos:column="33">if <condition pos:line="276" pos:column="36">(<expr><name pos:line="276" pos:column="37">ci</name><op:operator pos:line="276" pos:column="39">==</op:operator><lit:literal type="number" pos:line="276" pos:column="41">0</lit:literal></expr>)</condition><then pos:line="276" pos:column="43"> <block pos:line="276" pos:column="44">{
					<if pos:line="277" pos:column="41">if <condition pos:line="277" pos:column="44">(<expr><call><name pos:line="277" pos:column="45">IsAWordStart</name><argument_list pos:line="277" pos:column="57">(<argument><expr><call><name><name pos:line="277" pos:column="58">static_cast</name><argument_list pos:line="277" pos:column="69">&lt;<argument><expr><name pos:line="277" pos:column="70">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="277" pos:column="75">(<argument><expr><name><name pos:line="277" pos:column="76">sc</name><op:operator pos:line="277" pos:column="78">.</op:operator><name pos:line="277" pos:column="79">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="277" pos:column="84">||</op:operator> <call><name pos:line="277" pos:column="87">IsAOperator</name><argument_list pos:line="277" pos:column="98">(<argument><expr><call><name><name pos:line="277" pos:column="99">static_cast</name><argument_list pos:line="277" pos:column="110">&lt;<argument><expr><name pos:line="277" pos:column="111">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="277" pos:column="116">(<argument><expr><name><name pos:line="277" pos:column="117">sc</name><op:operator pos:line="277" pos:column="119">.</op:operator><name pos:line="277" pos:column="120">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="277" pos:column="125"> <block pos:line="277" pos:column="126">{
						<expr_stmt><expr><name pos:line="278" pos:column="49">ci</name><op:operator pos:line="278" pos:column="51">=</op:operator><lit:literal type="number" pos:line="278" pos:column="52">1</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="279" pos:column="49">sc</name><op:operator pos:line="279" pos:column="51">.</op:operator><name pos:line="279" pos:column="52">SetState</name></name><argument_list pos:line="279" pos:column="60">(<argument><expr><name pos:line="279" pos:column="61">SCE_AU3_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<break pos:line="281" pos:column="41">break;</break>
				}</block></then></if>
				<if pos:line="283" pos:column="33">if <condition pos:line="283" pos:column="36">(<expr><op:operator pos:line="283" pos:column="37">!</op:operator><op:operator pos:line="283" pos:column="38">(</op:operator><call><name pos:line="283" pos:column="39">IsAWordChar</name><argument_list pos:line="283" pos:column="50">(<argument><expr><name><name pos:line="283" pos:column="51">sc</name><op:operator pos:line="283" pos:column="53">.</op:operator><name pos:line="283" pos:column="54">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="283" pos:column="58">||</op:operator> <op:operator pos:line="283" pos:column="61">(</op:operator><name><name pos:line="283" pos:column="62">sc</name><op:operator pos:line="283" pos:column="64">.</op:operator><name pos:line="283" pos:column="65">ch</name></name> <op:operator pos:line="283" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="283" pos:column="71">'-'</lit:literal> <op:operator pos:line="283" pos:column="75">&amp;&amp;</op:operator> <call><name pos:line="283" pos:column="78">strcmp</name><argument_list pos:line="283" pos:column="84">(<argument><expr><name pos:line="283" pos:column="85">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="283" pos:column="88">"#comments"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="283" pos:column="101">==</op:operator> <lit:literal type="number" pos:line="283" pos:column="104">0</lit:literal><op:operator pos:line="283" pos:column="105">)</op:operator><op:operator pos:line="283" pos:column="106">)</op:operator></expr>)</condition><then pos:line="283" pos:column="108"> <block pos:line="283" pos:column="109">{
					<if pos:line="284" pos:column="41">if <condition pos:line="284" pos:column="44">(<expr><op:operator pos:line="284" pos:column="45">(</op:operator><call><name pos:line="284" pos:column="46">strcmp</name><argument_list pos:line="284" pos:column="52">(<argument><expr><name pos:line="284" pos:column="53">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="56">"#ce"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="284" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="284" pos:column="65">0</lit:literal> <op:operator pos:line="284" pos:column="67">||</op:operator> <call><name pos:line="284" pos:column="70">strcmp</name><argument_list pos:line="284" pos:column="76">(<argument><expr><name pos:line="284" pos:column="77">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="284" pos:column="80">"#comments-end"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="284" pos:column="96">==</op:operator> <lit:literal type="number" pos:line="284" pos:column="99">0</lit:literal><op:operator pos:line="284" pos:column="100">)</op:operator></expr>)</condition><then pos:line="284" pos:column="102">
							<expr_stmt><expr><call><name><name pos:line="285" pos:column="57">sc</name><op:operator pos:line="285" pos:column="59">.</op:operator><name pos:line="285" pos:column="60">SetState</name></name><argument_list pos:line="285" pos:column="68">(<argument><expr><name pos:line="285" pos:column="69">SCE_AU3_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>  <comment type="line" pos:line="285" pos:column="88">// set to comment line for the rest of the line</comment>
					<else pos:line="286" pos:column="41">else
						<expr_stmt><expr><name pos:line="287" pos:column="49">ci</name><op:operator pos:line="287" pos:column="51">=</op:operator><lit:literal type="number" pos:line="287" pos:column="52">2</lit:literal></expr>;</expr_stmt></else></if>  <comment type="line" pos:line="287" pos:column="56">// line doesn't begin with #CE so skip the rest of the line</comment>
				}</block></then></if>
				<break pos:line="289" pos:column="33">break;</break>
			}</block>
            </case><case pos:line="291" pos:column="13">case <expr><name pos:line="291" pos:column="18">SCE_AU3_COMMENT</name></expr>:
            <block pos:line="292" pos:column="13">{
                <if pos:line="293" pos:column="17">if <condition pos:line="293" pos:column="20">(<expr><name><name pos:line="293" pos:column="21">sc</name><op:operator pos:line="293" pos:column="23">.</op:operator><name pos:line="293" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="293" pos:column="34"> <block pos:line="293" pos:column="35">{<expr_stmt><expr><call><name><name pos:line="293" pos:column="36">sc</name><op:operator pos:line="293" pos:column="38">.</op:operator><name pos:line="293" pos:column="39">SetState</name></name><argument_list pos:line="293" pos:column="47">(<argument><expr><name pos:line="293" pos:column="48">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                <break pos:line="294" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="296" pos:column="13">case <expr><name pos:line="296" pos:column="18">SCE_AU3_OPERATOR</name></expr>:
            <block pos:line="297" pos:column="13">{
                <comment type="line" pos:line="298" pos:column="17">// check if its a COMobject</comment>
				<if pos:line="299" pos:column="33">if <condition pos:line="299" pos:column="36">(<expr><name><name pos:line="299" pos:column="37">sc</name><op:operator pos:line="299" pos:column="39">.</op:operator><name pos:line="299" pos:column="40">chPrev</name></name> <op:operator pos:line="299" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="299" pos:column="50">'.'</lit:literal> <op:operator pos:line="299" pos:column="54">&amp;&amp;</op:operator> <call><name pos:line="299" pos:column="57">IsAWordChar</name><argument_list pos:line="299" pos:column="68">(<argument><expr><name><name pos:line="299" pos:column="69">sc</name><op:operator pos:line="299" pos:column="71">.</op:operator><name pos:line="299" pos:column="72">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="299" pos:column="76"> <block pos:line="299" pos:column="77">{
					<expr_stmt><expr><call><name><name pos:line="300" pos:column="41">sc</name><op:operator pos:line="300" pos:column="43">.</op:operator><name pos:line="300" pos:column="44">SetState</name></name><argument_list pos:line="300" pos:column="52">(<argument><expr><name pos:line="300" pos:column="53">SCE_AU3_COMOBJ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="302" pos:column="33">else <block pos:line="302" pos:column="38">{
					<expr_stmt><expr><call><name><name pos:line="303" pos:column="41">sc</name><op:operator pos:line="303" pos:column="43">.</op:operator><name pos:line="303" pos:column="44">SetState</name></name><argument_list pos:line="303" pos:column="52">(<argument><expr><name pos:line="303" pos:column="53">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
                <break pos:line="305" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="307" pos:column="13">case <expr><name pos:line="307" pos:column="18">SCE_AU3_SPECIAL</name></expr>:
            <block pos:line="308" pos:column="13">{
                <if pos:line="309" pos:column="17">if <condition pos:line="309" pos:column="20">(<expr><name><name pos:line="309" pos:column="21">sc</name><op:operator pos:line="309" pos:column="23">.</op:operator><name pos:line="309" pos:column="24">ch</name></name> <op:operator pos:line="309" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="309" pos:column="30">';'</lit:literal></expr>)</condition><then pos:line="309" pos:column="34"> <block pos:line="309" pos:column="35">{<expr_stmt><expr><call><name><name pos:line="309" pos:column="36">sc</name><op:operator pos:line="309" pos:column="38">.</op:operator><name pos:line="309" pos:column="39">SetState</name></name><argument_list pos:line="309" pos:column="47">(<argument><expr><name pos:line="309" pos:column="48">SCE_AU3_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
				<if pos:line="310" pos:column="33">if <condition pos:line="310" pos:column="36">(<expr><name><name pos:line="310" pos:column="37">sc</name><op:operator pos:line="310" pos:column="39">.</op:operator><name pos:line="310" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="310" pos:column="50"> <block pos:line="310" pos:column="51">{<expr_stmt><expr><call><name><name pos:line="310" pos:column="52">sc</name><op:operator pos:line="310" pos:column="54">.</op:operator><name pos:line="310" pos:column="55">SetState</name></name><argument_list pos:line="310" pos:column="63">(<argument><expr><name pos:line="310" pos:column="64">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                <break pos:line="311" pos:column="17">break;</break>
            }</block>
            </case><case pos:line="313" pos:column="13">case <expr><name pos:line="313" pos:column="18">SCE_AU3_KEYWORD</name></expr>:
            <block pos:line="314" pos:column="13">{
                <if pos:line="315" pos:column="17">if <condition pos:line="315" pos:column="20">(<expr><op:operator pos:line="315" pos:column="21">!</op:operator><op:operator pos:line="315" pos:column="22">(</op:operator><call><name pos:line="315" pos:column="23">IsAWordChar</name><argument_list pos:line="315" pos:column="34">(<argument><expr><name><name pos:line="315" pos:column="35">sc</name><op:operator pos:line="315" pos:column="37">.</op:operator><name pos:line="315" pos:column="38">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="315" pos:column="42">||</op:operator> <op:operator pos:line="315" pos:column="45">(</op:operator><name><name pos:line="315" pos:column="46">sc</name><op:operator pos:line="315" pos:column="48">.</op:operator><name pos:line="315" pos:column="49">ch</name></name> <op:operator pos:line="315" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="315" pos:column="55">'-'</lit:literal> <op:operator pos:line="315" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="315" pos:column="62">(</op:operator><call><name pos:line="315" pos:column="63">strcmp</name><argument_list pos:line="315" pos:column="69">(<argument><expr><name pos:line="315" pos:column="70">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="315" pos:column="73">"#comments"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="315" pos:column="86">==</op:operator> <lit:literal type="number" pos:line="315" pos:column="89">0</lit:literal> <op:operator pos:line="315" pos:column="91">||</op:operator> <call><name pos:line="315" pos:column="94">strcmp</name><argument_list pos:line="315" pos:column="100">(<argument><expr><name pos:line="315" pos:column="101">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="315" pos:column="104">"#include"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="315" pos:column="116">==</op:operator> <lit:literal type="number" pos:line="315" pos:column="119">0</lit:literal><op:operator pos:line="315" pos:column="120">)</op:operator><op:operator pos:line="315" pos:column="121">)</op:operator><op:operator pos:line="315" pos:column="122">)</op:operator></expr>)</condition><then pos:line="315" pos:column="124">
                <block pos:line="316" pos:column="17">{
                    <if pos:line="317" pos:column="21">if <condition pos:line="317" pos:column="24">(<expr><op:operator pos:line="317" pos:column="25">!</op:operator><call><name pos:line="317" pos:column="26">IsTypeCharacter</name><argument_list pos:line="317" pos:column="41">(<argument><expr><name><name pos:line="317" pos:column="42">sc</name><op:operator pos:line="317" pos:column="44">.</op:operator><name pos:line="317" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="317" pos:column="49">
                    <block pos:line="318" pos:column="21">{
						<if pos:line="319" pos:column="49">if <condition pos:line="319" pos:column="52">(<expr><call><name pos:line="319" pos:column="53">strcmp</name><argument_list pos:line="319" pos:column="59">(<argument><expr><name pos:line="319" pos:column="60">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="319" pos:column="63">"#cs"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="319" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="319" pos:column="72">0</lit:literal> <op:operator pos:line="319" pos:column="74">||</op:operator> <call><name pos:line="319" pos:column="77">strcmp</name><argument_list pos:line="319" pos:column="83">(<argument><expr><name pos:line="319" pos:column="84">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="319" pos:column="87">"#comments-start"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="319" pos:column="105">==</op:operator> <lit:literal type="number" pos:line="319" pos:column="108">0</lit:literal></expr> )</condition><then pos:line="319" pos:column="111">
						<block pos:line="320" pos:column="49">{
							<expr_stmt><expr><call><name><name pos:line="321" pos:column="57">sc</name><op:operator pos:line="321" pos:column="59">.</op:operator><name pos:line="321" pos:column="60">ChangeState</name></name><argument_list pos:line="321" pos:column="71">(<argument><expr><name pos:line="321" pos:column="72">SCE_AU3_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="322" pos:column="57">sc</name><op:operator pos:line="322" pos:column="59">.</op:operator><name pos:line="322" pos:column="60">SetState</name></name><argument_list pos:line="322" pos:column="68">(<argument><expr><name pos:line="322" pos:column="69">SCE_AU3_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break pos:line="323" pos:column="57">break;</break>
						}</block></then>
						<else pos:line="325" pos:column="49">else <if pos:line="325" pos:column="54">if <condition pos:line="325" pos:column="57">(<expr><call><name><name pos:line="325" pos:column="58">keywords</name><op:operator pos:line="325" pos:column="66">.</op:operator><name pos:line="325" pos:column="67">InList</name></name><argument_list pos:line="325" pos:column="73">(<argument><expr><name pos:line="325" pos:column="74">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="325" pos:column="77"> <block pos:line="325" pos:column="78">{
							<expr_stmt><expr><call><name><name pos:line="326" pos:column="57">sc</name><op:operator pos:line="326" pos:column="59">.</op:operator><name pos:line="326" pos:column="60">ChangeState</name></name><argument_list pos:line="326" pos:column="71">(<argument><expr><name pos:line="326" pos:column="72">SCE_AU3_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="327" pos:column="57">sc</name><op:operator pos:line="327" pos:column="59">.</op:operator><name pos:line="327" pos:column="60">SetState</name></name><argument_list pos:line="327" pos:column="68">(<argument><expr><name pos:line="327" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="329" pos:column="49">else <if pos:line="329" pos:column="54">if <condition pos:line="329" pos:column="57">(<expr><call><name><name pos:line="329" pos:column="58">keywords2</name><op:operator pos:line="329" pos:column="67">.</op:operator><name pos:line="329" pos:column="68">InList</name></name><argument_list pos:line="329" pos:column="74">(<argument><expr><name pos:line="329" pos:column="75">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="329" pos:column="78"> <block pos:line="329" pos:column="79">{
							<expr_stmt><expr><call><name><name pos:line="330" pos:column="57">sc</name><op:operator pos:line="330" pos:column="59">.</op:operator><name pos:line="330" pos:column="60">ChangeState</name></name><argument_list pos:line="330" pos:column="71">(<argument><expr><name pos:line="330" pos:column="72">SCE_AU3_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="331" pos:column="57">sc</name><op:operator pos:line="331" pos:column="59">.</op:operator><name pos:line="331" pos:column="60">SetState</name></name><argument_list pos:line="331" pos:column="68">(<argument><expr><name pos:line="331" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="333" pos:column="49">else <if pos:line="333" pos:column="54">if <condition pos:line="333" pos:column="57">(<expr><call><name><name pos:line="333" pos:column="58">keywords3</name><op:operator pos:line="333" pos:column="67">.</op:operator><name pos:line="333" pos:column="68">InList</name></name><argument_list pos:line="333" pos:column="74">(<argument><expr><name pos:line="333" pos:column="75">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="333" pos:column="78"> <block pos:line="333" pos:column="79">{
							<expr_stmt><expr><call><name><name pos:line="334" pos:column="57">sc</name><op:operator pos:line="334" pos:column="59">.</op:operator><name pos:line="334" pos:column="60">ChangeState</name></name><argument_list pos:line="334" pos:column="71">(<argument><expr><name pos:line="334" pos:column="72">SCE_AU3_MACRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="335" pos:column="57">sc</name><op:operator pos:line="335" pos:column="59">.</op:operator><name pos:line="335" pos:column="60">SetState</name></name><argument_list pos:line="335" pos:column="68">(<argument><expr><name pos:line="335" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="337" pos:column="49">else <if pos:line="337" pos:column="54">if <condition pos:line="337" pos:column="57">(<expr><call><name><name pos:line="337" pos:column="58">keywords5</name><op:operator pos:line="337" pos:column="67">.</op:operator><name pos:line="337" pos:column="68">InList</name></name><argument_list pos:line="337" pos:column="74">(<argument><expr><name pos:line="337" pos:column="75">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="337" pos:column="78"> <block pos:line="337" pos:column="79">{
							<expr_stmt><expr><call><name><name pos:line="338" pos:column="57">sc</name><op:operator pos:line="338" pos:column="59">.</op:operator><name pos:line="338" pos:column="60">ChangeState</name></name><argument_list pos:line="338" pos:column="71">(<argument><expr><name pos:line="338" pos:column="72">SCE_AU3_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="339" pos:column="57">sc</name><op:operator pos:line="339" pos:column="59">.</op:operator><name pos:line="339" pos:column="60">SetState</name></name><argument_list pos:line="339" pos:column="68">(<argument><expr><name pos:line="339" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if pos:line="340" pos:column="57">if <condition pos:line="340" pos:column="60">(<expr><call><name pos:line="340" pos:column="61">strcmp</name><argument_list pos:line="340" pos:column="67">(<argument><expr><name pos:line="340" pos:column="68">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="340" pos:column="71">"#include"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="340" pos:column="82">==</op:operator> <lit:literal type="number" pos:line="340" pos:column="85">0</lit:literal></expr>)</condition><then pos:line="340" pos:column="87">
							<block pos:line="341" pos:column="57">{
								<expr_stmt><expr><name pos:line="342" pos:column="65">si</name> <op:operator pos:line="342" pos:column="68">=</op:operator> <lit:literal type="number" pos:line="342" pos:column="70">3</lit:literal></expr>;</expr_stmt>   <comment type="line" pos:line="342" pos:column="75">// use to determine string start for #inlude &lt;&gt;</comment>
							}</block></then></if>
						}</block></then>
						<else pos:line="345" pos:column="49">else <if pos:line="345" pos:column="54">if <condition pos:line="345" pos:column="57">(<expr><call><name><name pos:line="345" pos:column="58">keywords6</name><op:operator pos:line="345" pos:column="67">.</op:operator><name pos:line="345" pos:column="68">InList</name></name><argument_list pos:line="345" pos:column="74">(<argument><expr><name pos:line="345" pos:column="75">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="345" pos:column="78"> <block pos:line="345" pos:column="79">{
							<expr_stmt><expr><call><name><name pos:line="346" pos:column="57">sc</name><op:operator pos:line="346" pos:column="59">.</op:operator><name pos:line="346" pos:column="60">ChangeState</name></name><argument_list pos:line="346" pos:column="71">(<argument><expr><name pos:line="346" pos:column="72">SCE_AU3_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="347" pos:column="57">sc</name><op:operator pos:line="347" pos:column="59">.</op:operator><name pos:line="347" pos:column="60">SetState</name></name><argument_list pos:line="347" pos:column="68">(<argument><expr><name pos:line="347" pos:column="69">SCE_AU3_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="349" pos:column="49">else <if pos:line="349" pos:column="54">if <condition pos:line="349" pos:column="57">(<expr><op:operator pos:line="349" pos:column="58">(</op:operator><call><name><name pos:line="349" pos:column="59">keywords7</name><op:operator pos:line="349" pos:column="68">.</op:operator><name pos:line="349" pos:column="69">InList</name></name><argument_list pos:line="349" pos:column="75">(<argument><expr><name pos:line="349" pos:column="76">s</name></expr></argument>)</argument_list></call><op:operator pos:line="349" pos:column="78">)</op:operator> <op:operator pos:line="349" pos:column="80">&amp;&amp;</op:operator> <op:operator pos:line="349" pos:column="83">(</op:operator><op:operator pos:line="349" pos:column="84">!</op:operator><call><name pos:line="349" pos:column="85">IsAOperator</name><argument_list pos:line="349" pos:column="96">(<argument><expr><call><name><name pos:line="349" pos:column="97">static_cast</name><argument_list pos:line="349" pos:column="108">&lt;<argument><expr><name pos:line="349" pos:column="109">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="349" pos:column="114">(<argument><expr><name><name pos:line="349" pos:column="115">sc</name><op:operator pos:line="349" pos:column="117">.</op:operator><name pos:line="349" pos:column="118">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="349" pos:column="122">)</op:operator></expr>)</condition><then pos:line="349" pos:column="124"> <block pos:line="349" pos:column="125">{
							<expr_stmt><expr><call><name><name pos:line="350" pos:column="57">sc</name><op:operator pos:line="350" pos:column="59">.</op:operator><name pos:line="350" pos:column="60">ChangeState</name></name><argument_list pos:line="350" pos:column="71">(<argument><expr><name pos:line="350" pos:column="72">SCE_AU3_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="351" pos:column="57">sc</name><op:operator pos:line="351" pos:column="59">.</op:operator><name pos:line="351" pos:column="60">SetState</name></name><argument_list pos:line="351" pos:column="68">(<argument><expr><name pos:line="351" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="353" pos:column="49">else <if pos:line="353" pos:column="54">if <condition pos:line="353" pos:column="57">(<expr><call><name><name pos:line="353" pos:column="58">keywords8</name><op:operator pos:line="353" pos:column="67">.</op:operator><name pos:line="353" pos:column="68">InList</name></name><argument_list pos:line="353" pos:column="74">(<argument><expr><name pos:line="353" pos:column="75">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="353" pos:column="78"> <block pos:line="353" pos:column="79">{
							<expr_stmt><expr><call><name><name pos:line="354" pos:column="57">sc</name><op:operator pos:line="354" pos:column="59">.</op:operator><name pos:line="354" pos:column="60">ChangeState</name></name><argument_list pos:line="354" pos:column="71">(<argument><expr><name pos:line="354" pos:column="72">SCE_AU3_UDF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="355" pos:column="57">sc</name><op:operator pos:line="355" pos:column="59">.</op:operator><name pos:line="355" pos:column="60">SetState</name></name><argument_list pos:line="355" pos:column="68">(<argument><expr><name pos:line="355" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="357" pos:column="49">else <if pos:line="357" pos:column="54">if <condition pos:line="357" pos:column="57">(<expr><call><name pos:line="357" pos:column="58">strcmp</name><argument_list pos:line="357" pos:column="64">(<argument><expr><name pos:line="357" pos:column="65">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="357" pos:column="68">"_"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="357" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="357" pos:column="76">0</lit:literal></expr>)</condition><then pos:line="357" pos:column="78"> <block pos:line="357" pos:column="79">{
							<expr_stmt><expr><call><name><name pos:line="358" pos:column="57">sc</name><op:operator pos:line="358" pos:column="59">.</op:operator><name pos:line="358" pos:column="60">ChangeState</name></name><argument_list pos:line="358" pos:column="71">(<argument><expr><name pos:line="358" pos:column="72">SCE_AU3_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="359" pos:column="57">sc</name><op:operator pos:line="359" pos:column="59">.</op:operator><name pos:line="359" pos:column="60">SetState</name></name><argument_list pos:line="359" pos:column="68">(<argument><expr><name pos:line="359" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="361" pos:column="49">else <if pos:line="361" pos:column="54">if <condition pos:line="361" pos:column="57">(<expr><op:operator pos:line="361" pos:column="58">!</op:operator><call><name pos:line="361" pos:column="59">IsAWordChar</name><argument_list pos:line="361" pos:column="70">(<argument><expr><name><name pos:line="361" pos:column="71">sc</name><op:operator pos:line="361" pos:column="73">.</op:operator><name pos:line="361" pos:column="74">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="361" pos:column="78"> <block pos:line="361" pos:column="79">{
							<expr_stmt><expr><call><name><name pos:line="362" pos:column="57">sc</name><op:operator pos:line="362" pos:column="59">.</op:operator><name pos:line="362" pos:column="60">ChangeState</name></name><argument_list pos:line="362" pos:column="71">(<argument><expr><name pos:line="362" pos:column="72">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="363" pos:column="57">sc</name><op:operator pos:line="363" pos:column="59">.</op:operator><name pos:line="363" pos:column="60">SetState</name></name><argument_list pos:line="363" pos:column="68">(<argument><expr><name pos:line="363" pos:column="69">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
					}</block></then></if>
				}</block></then></if>
                <if pos:line="367" pos:column="17">if <condition pos:line="367" pos:column="20">(<expr><name><name pos:line="367" pos:column="21">sc</name><op:operator pos:line="367" pos:column="23">.</op:operator><name pos:line="367" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="367" pos:column="34"> <block pos:line="367" pos:column="35">{
					<expr_stmt><expr><call><name><name pos:line="368" pos:column="41">sc</name><op:operator pos:line="368" pos:column="43">.</op:operator><name pos:line="368" pos:column="44">SetState</name></name><argument_list pos:line="368" pos:column="52">(<argument><expr><name pos:line="368" pos:column="53">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
                <break pos:line="369" pos:column="17">break;</break>
            }</block>
			</case><case pos:line="371" pos:column="25">case <expr><name pos:line="371" pos:column="30">SCE_AU3_NUMBER</name></expr>:
            <block pos:line="372" pos:column="13">{
				<comment type="line" pos:line="373" pos:column="33">// Numeric indicator error=9 normal=0 normal+dec=1 hex=2 E-not=3</comment>
				<comment type="line" pos:line="374" pos:column="33">//</comment>
				<comment type="line" pos:line="375" pos:column="33">// test for Hex notation</comment>
				<if pos:line="376" pos:column="33">if <condition pos:line="376" pos:column="36">(<expr><call><name pos:line="376" pos:column="37">strcmp</name><argument_list pos:line="376" pos:column="43">(<argument><expr><name pos:line="376" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="376" pos:column="47">"0"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="376" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="376" pos:column="55">0</lit:literal> <op:operator pos:line="376" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="376" pos:column="60">(</op:operator><name><name pos:line="376" pos:column="61">sc</name><op:operator pos:line="376" pos:column="63">.</op:operator><name pos:line="376" pos:column="64">ch</name></name> <op:operator pos:line="376" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="376" pos:column="70">'x'</lit:literal> <op:operator pos:line="376" pos:column="74">||</op:operator> <name><name pos:line="376" pos:column="77">sc</name><op:operator pos:line="376" pos:column="79">.</op:operator><name pos:line="376" pos:column="80">ch</name></name> <op:operator pos:line="376" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="376" pos:column="86">'X'</lit:literal><op:operator pos:line="376" pos:column="89">)</op:operator> <op:operator pos:line="376" pos:column="91">&amp;&amp;</op:operator> <name pos:line="376" pos:column="94">ni</name> <op:operator pos:line="376" pos:column="97">==</op:operator> <lit:literal type="number" pos:line="376" pos:column="100">0</lit:literal></expr>)</condition><then pos:line="376" pos:column="102">
				<block pos:line="377" pos:column="33">{
					<expr_stmt><expr><name pos:line="378" pos:column="41">ni</name> <op:operator pos:line="378" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="378" pos:column="46">2</lit:literal></expr>;</expr_stmt>
					<break pos:line="379" pos:column="41">break;</break>
				}</block></then></if>
				<comment type="line" pos:line="381" pos:column="33">// test for E notation</comment>
				<if pos:line="382" pos:column="33">if <condition pos:line="382" pos:column="36">(<expr><call><name pos:line="382" pos:column="37">IsADigit</name><argument_list pos:line="382" pos:column="45">(<argument><expr><name><name pos:line="382" pos:column="46">sc</name><op:operator pos:line="382" pos:column="48">.</op:operator><name pos:line="382" pos:column="49">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="382" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="382" pos:column="60">(</op:operator><name><name pos:line="382" pos:column="61">sc</name><op:operator pos:line="382" pos:column="63">.</op:operator><name pos:line="382" pos:column="64">ch</name></name> <op:operator pos:line="382" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="382" pos:column="70">'e'</lit:literal> <op:operator pos:line="382" pos:column="74">||</op:operator> <name><name pos:line="382" pos:column="77">sc</name><op:operator pos:line="382" pos:column="79">.</op:operator><name pos:line="382" pos:column="80">ch</name></name> <op:operator pos:line="382" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="382" pos:column="86">'E'</lit:literal><op:operator pos:line="382" pos:column="89">)</op:operator> <op:operator pos:line="382" pos:column="91">&amp;&amp;</op:operator> <name pos:line="382" pos:column="94">ni</name> <op:operator pos:line="382" pos:column="97">&lt;=</op:operator> <lit:literal type="number" pos:line="382" pos:column="100">1</lit:literal></expr>)</condition><then pos:line="382" pos:column="102">
				<block pos:line="383" pos:column="33">{
					<expr_stmt><expr><name pos:line="384" pos:column="41">ni</name> <op:operator pos:line="384" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="384" pos:column="46">3</lit:literal></expr>;</expr_stmt>
					<break pos:line="385" pos:column="41">break;</break>
				}</block></then></if>
				<comment type="line" pos:line="387" pos:column="33">//  Allow Hex characters inside hex numeric strings</comment>
				<if pos:line="388" pos:column="33">if <condition pos:line="388" pos:column="36">(<expr><op:operator pos:line="388" pos:column="37">(</op:operator><name pos:line="388" pos:column="38">ni</name> <op:operator pos:line="388" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="388" pos:column="44">2</lit:literal><op:operator pos:line="388" pos:column="45">)</op:operator> <op:operator pos:line="388" pos:column="47">&amp;&amp;</op:operator>
					<op:operator pos:line="389" pos:column="41">(</op:operator><name><name pos:line="389" pos:column="42">sc</name><op:operator pos:line="389" pos:column="44">.</op:operator><name pos:line="389" pos:column="45">ch</name></name> <op:operator pos:line="389" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="389" pos:column="51">'a'</lit:literal> <op:operator pos:line="389" pos:column="55">||</op:operator> <name><name pos:line="389" pos:column="58">sc</name><op:operator pos:line="389" pos:column="60">.</op:operator><name pos:line="389" pos:column="61">ch</name></name> <op:operator pos:line="389" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="389" pos:column="67">'b'</lit:literal> <op:operator pos:line="389" pos:column="71">||</op:operator> <name><name pos:line="389" pos:column="74">sc</name><op:operator pos:line="389" pos:column="76">.</op:operator><name pos:line="389" pos:column="77">ch</name></name> <op:operator pos:line="389" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="389" pos:column="83">'c'</lit:literal> <op:operator pos:line="389" pos:column="87">||</op:operator> <name><name pos:line="389" pos:column="90">sc</name><op:operator pos:line="389" pos:column="92">.</op:operator><name pos:line="389" pos:column="93">ch</name></name> <op:operator pos:line="389" pos:column="96">==</op:operator> <lit:literal type="char" pos:line="389" pos:column="99">'d'</lit:literal> <op:operator pos:line="389" pos:column="103">||</op:operator> <name><name pos:line="389" pos:column="106">sc</name><op:operator pos:line="389" pos:column="108">.</op:operator><name pos:line="389" pos:column="109">ch</name></name> <op:operator pos:line="389" pos:column="112">==</op:operator> <lit:literal type="char" pos:line="389" pos:column="115">'e'</lit:literal> <op:operator pos:line="389" pos:column="119">||</op:operator> <name><name pos:line="389" pos:column="122">sc</name><op:operator pos:line="389" pos:column="124">.</op:operator><name pos:line="389" pos:column="125">ch</name></name> <op:operator pos:line="389" pos:column="128">==</op:operator> <lit:literal type="char" pos:line="389" pos:column="131">'f'</lit:literal> <op:operator pos:line="389" pos:column="135">||</op:operator>
					 <name><name pos:line="390" pos:column="42">sc</name><op:operator pos:line="390" pos:column="44">.</op:operator><name pos:line="390" pos:column="45">ch</name></name> <op:operator pos:line="390" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="390" pos:column="51">'A'</lit:literal> <op:operator pos:line="390" pos:column="55">||</op:operator> <name><name pos:line="390" pos:column="58">sc</name><op:operator pos:line="390" pos:column="60">.</op:operator><name pos:line="390" pos:column="61">ch</name></name> <op:operator pos:line="390" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="390" pos:column="67">'B'</lit:literal> <op:operator pos:line="390" pos:column="71">||</op:operator> <name><name pos:line="390" pos:column="74">sc</name><op:operator pos:line="390" pos:column="76">.</op:operator><name pos:line="390" pos:column="77">ch</name></name> <op:operator pos:line="390" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="390" pos:column="83">'C'</lit:literal> <op:operator pos:line="390" pos:column="87">||</op:operator> <name><name pos:line="390" pos:column="90">sc</name><op:operator pos:line="390" pos:column="92">.</op:operator><name pos:line="390" pos:column="93">ch</name></name> <op:operator pos:line="390" pos:column="96">==</op:operator> <lit:literal type="char" pos:line="390" pos:column="99">'D'</lit:literal> <op:operator pos:line="390" pos:column="103">||</op:operator> <name><name pos:line="390" pos:column="106">sc</name><op:operator pos:line="390" pos:column="108">.</op:operator><name pos:line="390" pos:column="109">ch</name></name> <op:operator pos:line="390" pos:column="112">==</op:operator> <lit:literal type="char" pos:line="390" pos:column="115">'E'</lit:literal> <op:operator pos:line="390" pos:column="119">||</op:operator> <name><name pos:line="390" pos:column="122">sc</name><op:operator pos:line="390" pos:column="124">.</op:operator><name pos:line="390" pos:column="125">ch</name></name> <op:operator pos:line="390" pos:column="128">==</op:operator> <lit:literal type="char" pos:line="390" pos:column="131">'F'</lit:literal> <op:operator pos:line="390" pos:column="135">)</op:operator></expr>)</condition><then pos:line="390" pos:column="137">
				<block pos:line="391" pos:column="33">{
					<break pos:line="392" pos:column="41">break;</break>
				}</block></then></if>
				<comment type="line" pos:line="394" pos:column="33">// test for 1 dec point only</comment>
				<if pos:line="395" pos:column="33">if <condition pos:line="395" pos:column="36">(<expr><name><name pos:line="395" pos:column="37">sc</name><op:operator pos:line="395" pos:column="39">.</op:operator><name pos:line="395" pos:column="40">ch</name></name> <op:operator pos:line="395" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="395" pos:column="46">'.'</lit:literal></expr>)</condition><then pos:line="395" pos:column="50">
				<block pos:line="396" pos:column="33">{
					<if pos:line="397" pos:column="41">if <condition pos:line="397" pos:column="44">(<expr><name pos:line="397" pos:column="45">ni</name><op:operator pos:line="397" pos:column="47">==</op:operator><lit:literal type="number" pos:line="397" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="397" pos:column="51">
					<block pos:line="398" pos:column="41">{
						<expr_stmt><expr><name pos:line="399" pos:column="49">ni</name><op:operator pos:line="399" pos:column="51">=</op:operator><lit:literal type="number" pos:line="399" pos:column="52">1</lit:literal></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="401" pos:column="41">else
					<block pos:line="402" pos:column="41">{
						<expr_stmt><expr><name pos:line="403" pos:column="49">ni</name><op:operator pos:line="403" pos:column="51">=</op:operator><lit:literal type="number" pos:line="403" pos:column="52">9</lit:literal></expr>;</expr_stmt>
					}</block></else></if>
					<break pos:line="405" pos:column="41">break;</break>
				}</block></then></if>
				<comment type="line" pos:line="407" pos:column="33">// end of numeric string ?</comment>
				<if pos:line="408" pos:column="33">if <condition pos:line="408" pos:column="36">(<expr><op:operator pos:line="408" pos:column="37">!</op:operator><op:operator pos:line="408" pos:column="38">(</op:operator><call><name pos:line="408" pos:column="39">IsADigit</name><argument_list pos:line="408" pos:column="47">(<argument><expr><name><name pos:line="408" pos:column="48">sc</name><op:operator pos:line="408" pos:column="50">.</op:operator><name pos:line="408" pos:column="51">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="408" pos:column="54">)</op:operator></expr>)</condition><then pos:line="408" pos:column="56">
				<block pos:line="409" pos:column="33">{
					<if pos:line="410" pos:column="41">if <condition pos:line="410" pos:column="44">(<expr><name pos:line="410" pos:column="45">ni</name><op:operator pos:line="410" pos:column="47">==</op:operator><lit:literal type="number" pos:line="410" pos:column="49">9</lit:literal></expr>)</condition><then pos:line="410" pos:column="51">
					<block pos:line="411" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="412" pos:column="49">sc</name><op:operator pos:line="412" pos:column="51">.</op:operator><name pos:line="412" pos:column="52">ChangeState</name></name><argument_list pos:line="412" pos:column="63">(<argument><expr><name pos:line="412" pos:column="64">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name pos:line="414" pos:column="41">sc</name><op:operator pos:line="414" pos:column="43">.</op:operator><name pos:line="414" pos:column="44">SetState</name></name><argument_list pos:line="414" pos:column="52">(<argument><expr><name pos:line="414" pos:column="53">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="416" pos:column="33">break;</break>
			}</block>
			</case><case pos:line="418" pos:column="25">case <expr><name pos:line="418" pos:column="30">SCE_AU3_VARIABLE</name></expr>:
			<block pos:line="419" pos:column="25">{
				<comment type="line" pos:line="420" pos:column="33">// Check if its a COMObject</comment>
				<if pos:line="421" pos:column="33">if <condition pos:line="421" pos:column="36">(<expr><name><name pos:line="421" pos:column="37">sc</name><op:operator pos:line="421" pos:column="39">.</op:operator><name pos:line="421" pos:column="40">ch</name></name> <op:operator pos:line="421" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="421" pos:column="46">'.'</lit:literal> <op:operator pos:line="421" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="421" pos:column="53">!</op:operator><call><name pos:line="421" pos:column="54">IsADigit</name><argument_list pos:line="421" pos:column="62">(<argument><expr><name><name pos:line="421" pos:column="63">sc</name><op:operator pos:line="421" pos:column="65">.</op:operator><name pos:line="421" pos:column="66">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="421" pos:column="74"> <block pos:line="421" pos:column="75">{
					<expr_stmt><expr><call><name><name pos:line="422" pos:column="41">sc</name><op:operator pos:line="422" pos:column="43">.</op:operator><name pos:line="422" pos:column="44">SetState</name></name><argument_list pos:line="422" pos:column="52">(<argument><expr><name pos:line="422" pos:column="53">SCE_AU3_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="424" pos:column="33">else <if pos:line="424" pos:column="38">if <condition pos:line="424" pos:column="41">(<expr><op:operator pos:line="424" pos:column="42">!</op:operator><call><name pos:line="424" pos:column="43">IsAWordChar</name><argument_list pos:line="424" pos:column="54">(<argument><expr><name><name pos:line="424" pos:column="55">sc</name><op:operator pos:line="424" pos:column="57">.</op:operator><name pos:line="424" pos:column="58">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="424" pos:column="62"> <block pos:line="424" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="425" pos:column="41">sc</name><op:operator pos:line="425" pos:column="43">.</op:operator><name pos:line="425" pos:column="44">SetState</name></name><argument_list pos:line="425" pos:column="52">(<argument><expr><name pos:line="425" pos:column="53">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="427" pos:column="33">break;</break>
            }</block>
			</case><case pos:line="429" pos:column="25">case <expr><name pos:line="429" pos:column="30">SCE_AU3_COMOBJ</name></expr>:
			<block pos:line="430" pos:column="25">{
				<if pos:line="431" pos:column="33">if <condition pos:line="431" pos:column="36">(<expr><op:operator pos:line="431" pos:column="37">!</op:operator><op:operator pos:line="431" pos:column="38">(</op:operator><call><name pos:line="431" pos:column="39">IsAWordChar</name><argument_list pos:line="431" pos:column="50">(<argument><expr><name><name pos:line="431" pos:column="51">sc</name><op:operator pos:line="431" pos:column="53">.</op:operator><name pos:line="431" pos:column="54">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="431" pos:column="57">)</op:operator></expr>)</condition><then pos:line="431" pos:column="59"> <block pos:line="431" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="432" pos:column="41">sc</name><op:operator pos:line="432" pos:column="43">.</op:operator><name pos:line="432" pos:column="44">SetState</name></name><argument_list pos:line="432" pos:column="52">(<argument><expr><name pos:line="432" pos:column="53">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="434" pos:column="33">break;</break>
            }</block>
            </case><case pos:line="436" pos:column="13">case <expr><name pos:line="436" pos:column="18">SCE_AU3_STRING</name></expr>:
            <block pos:line="437" pos:column="13">{
				<comment type="line" pos:line="438" pos:column="33">// check for " to end a double qouted string or</comment>
				<comment type="line" pos:line="439" pos:column="33">// check for ' to end a single qouted string</comment>
	            <if pos:line="440" pos:column="21">if <condition pos:line="440" pos:column="24">(<expr><op:operator pos:line="440" pos:column="25">(</op:operator><name pos:line="440" pos:column="26">si</name> <op:operator pos:line="440" pos:column="29">==</op:operator> <lit:literal type="number" pos:line="440" pos:column="32">1</lit:literal> <op:operator pos:line="440" pos:column="34">&amp;&amp;</op:operator> <name><name pos:line="440" pos:column="37">sc</name><op:operator pos:line="440" pos:column="39">.</op:operator><name pos:line="440" pos:column="40">ch</name></name> <op:operator pos:line="440" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="440" pos:column="46">'\"'</lit:literal><op:operator pos:line="440" pos:column="50">)</op:operator> <op:operator pos:line="440" pos:column="52">||</op:operator> <op:operator pos:line="440" pos:column="55">(</op:operator><name pos:line="440" pos:column="56">si</name> <op:operator pos:line="440" pos:column="59">==</op:operator> <lit:literal type="number" pos:line="440" pos:column="62">2</lit:literal> <op:operator pos:line="440" pos:column="64">&amp;&amp;</op:operator> <name><name pos:line="440" pos:column="67">sc</name><op:operator pos:line="440" pos:column="69">.</op:operator><name pos:line="440" pos:column="70">ch</name></name> <op:operator pos:line="440" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="440" pos:column="76">'\''</lit:literal><op:operator pos:line="440" pos:column="80">)</op:operator> <op:operator pos:line="440" pos:column="82">||</op:operator> <op:operator pos:line="440" pos:column="85">(</op:operator><name pos:line="440" pos:column="86">si</name> <op:operator pos:line="440" pos:column="89">==</op:operator> <lit:literal type="number" pos:line="440" pos:column="92">3</lit:literal> <op:operator pos:line="440" pos:column="94">&amp;&amp;</op:operator> <name><name pos:line="440" pos:column="97">sc</name><op:operator pos:line="440" pos:column="99">.</op:operator><name pos:line="440" pos:column="100">ch</name></name> <op:operator pos:line="440" pos:column="103">==</op:operator> <lit:literal type="char" pos:line="440" pos:column="106">'&gt;'</lit:literal><op:operator pos:line="440" pos:column="109">)</op:operator></expr>)</condition><then pos:line="440" pos:column="111">
				<block pos:line="441" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="442" pos:column="41">sc</name><op:operator pos:line="442" pos:column="43">.</op:operator><name pos:line="442" pos:column="44">ForwardSetState</name></name><argument_list pos:line="442" pos:column="59">(<argument><expr><name pos:line="442" pos:column="60">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="443" pos:column="41">si</name><op:operator pos:line="443" pos:column="43">=</op:operator><lit:literal type="number" pos:line="443" pos:column="44">0</lit:literal></expr>;</expr_stmt>
					<break pos:line="444" pos:column="41">break;</break>
				}</block></then></if>
                <if pos:line="446" pos:column="17">if <condition pos:line="446" pos:column="20">(<expr><name><name pos:line="446" pos:column="21">sc</name><op:operator pos:line="446" pos:column="23">.</op:operator><name pos:line="446" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="446" pos:column="34">
				<block pos:line="447" pos:column="33">{
					<expr_stmt><expr><name pos:line="448" pos:column="41">si</name><op:operator pos:line="448" pos:column="43">=</op:operator><lit:literal type="number" pos:line="448" pos:column="44">0</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="449" pos:column="41">// at line end and not found a continuation char then reset to default</comment>
					<decl_stmt><decl><type><name pos:line="450" pos:column="41">int</name></type> <name pos:line="450" pos:column="45">lineCurrent</name> <init pos:line="450" pos:column="57">= <expr><call><name><name pos:line="450" pos:column="59">styler</name><op:operator pos:line="450" pos:column="65">.</op:operator><name pos:line="450" pos:column="66">GetLine</name></name><argument_list pos:line="450" pos:column="73">(<argument><expr><name><name pos:line="450" pos:column="74">sc</name><op:operator pos:line="450" pos:column="76">.</op:operator><name pos:line="450" pos:column="77">currentPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="451" pos:column="41">if <condition pos:line="451" pos:column="44">(<expr><op:operator pos:line="451" pos:column="45">!</op:operator><call><name pos:line="451" pos:column="46">IsContinuationLine</name><argument_list pos:line="451" pos:column="64">(<argument><expr><name pos:line="451" pos:column="65">lineCurrent</name></expr></argument>,<argument><expr><name pos:line="451" pos:column="77">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="451" pos:column="85">
					<block pos:line="452" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="453" pos:column="49">sc</name><op:operator pos:line="453" pos:column="51">.</op:operator><name pos:line="453" pos:column="52">SetState</name></name><argument_list pos:line="453" pos:column="60">(<argument><expr><name pos:line="453" pos:column="61">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break pos:line="454" pos:column="49">break;</break>
					}</block></then></if>
				}</block></then></if>
				<comment type="line" pos:line="457" pos:column="33">// find Sendkeys in a STRING</comment>
				<if pos:line="458" pos:column="33">if <condition pos:line="458" pos:column="36">(<expr><name><name pos:line="458" pos:column="37">sc</name><op:operator pos:line="458" pos:column="39">.</op:operator><name pos:line="458" pos:column="40">ch</name></name> <op:operator pos:line="458" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="458" pos:column="46">'{'</lit:literal> <op:operator pos:line="458" pos:column="50">||</op:operator> <name><name pos:line="458" pos:column="53">sc</name><op:operator pos:line="458" pos:column="55">.</op:operator><name pos:line="458" pos:column="56">ch</name></name> <op:operator pos:line="458" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="458" pos:column="62">'+'</lit:literal> <op:operator pos:line="458" pos:column="66">||</op:operator> <name><name pos:line="458" pos:column="69">sc</name><op:operator pos:line="458" pos:column="71">.</op:operator><name pos:line="458" pos:column="72">ch</name></name> <op:operator pos:line="458" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="458" pos:column="78">'!'</lit:literal> <op:operator pos:line="458" pos:column="82">||</op:operator> <name><name pos:line="458" pos:column="85">sc</name><op:operator pos:line="458" pos:column="87">.</op:operator><name pos:line="458" pos:column="88">ch</name></name> <op:operator pos:line="458" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="458" pos:column="94">'^'</lit:literal> <op:operator pos:line="458" pos:column="98">||</op:operator> <name><name pos:line="458" pos:column="101">sc</name><op:operator pos:line="458" pos:column="103">.</op:operator><name pos:line="458" pos:column="104">ch</name></name> <op:operator pos:line="458" pos:column="107">==</op:operator> <lit:literal type="char" pos:line="458" pos:column="110">'#'</lit:literal></expr> )</condition><then pos:line="458" pos:column="115"> <block pos:line="458" pos:column="116">{
					<expr_stmt><expr><call><name><name pos:line="459" pos:column="41">sc</name><op:operator pos:line="459" pos:column="43">.</op:operator><name pos:line="459" pos:column="44">SetState</name></name><argument_list pos:line="459" pos:column="52">(<argument><expr><name pos:line="459" pos:column="53">SCE_AU3_SENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
				<break pos:line="460" pos:column="33">break;</break>
            }</block>

            </case><case pos:line="463" pos:column="13">case <expr><name pos:line="463" pos:column="18">SCE_AU3_SENT</name></expr>:
            <block pos:line="464" pos:column="13">{
				<comment type="line" pos:line="465" pos:column="33">// Send key string ended</comment>
				<if pos:line="466" pos:column="33">if <condition pos:line="466" pos:column="36">(<expr><name><name pos:line="466" pos:column="37">sc</name><op:operator pos:line="466" pos:column="39">.</op:operator><name pos:line="466" pos:column="40">chPrev</name></name> <op:operator pos:line="466" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="466" pos:column="50">'}'</lit:literal> <op:operator pos:line="466" pos:column="54">&amp;&amp;</op:operator> <name><name pos:line="466" pos:column="57">sc</name><op:operator pos:line="466" pos:column="59">.</op:operator><name pos:line="466" pos:column="60">ch</name></name> <op:operator pos:line="466" pos:column="63">!=</op:operator> <lit:literal type="char" pos:line="466" pos:column="66">'}'</lit:literal></expr>)</condition><then pos:line="466" pos:column="70">
				<block pos:line="467" pos:column="33">{
					<comment type="line" pos:line="468" pos:column="41">// set color to SENDKEY when valid sendkey .. else set back to regular string</comment>
					<decl_stmt><decl><type><name pos:line="469" pos:column="41">char</name></type> <name><name pos:line="469" pos:column="46">sk</name><index pos:line="469" pos:column="48">[<expr><lit:literal type="number" pos:line="469" pos:column="49">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<comment type="line" pos:line="470" pos:column="41">// split {111 222} and return {111} and check if 222 is valid.</comment>
					<comment type="line" pos:line="471" pos:column="41">// if return code = 1 then invalid 222 so must be string</comment>
					<if pos:line="472" pos:column="41">if <condition pos:line="472" pos:column="44">(<expr><call><name pos:line="472" pos:column="45">GetSendKey</name><argument_list pos:line="472" pos:column="55">(<argument><expr><name pos:line="472" pos:column="56">s</name></expr></argument>,<argument><expr><name pos:line="472" pos:column="58">sk</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="472" pos:column="62">
					<block pos:line="473" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="474" pos:column="49">sc</name><op:operator pos:line="474" pos:column="51">.</op:operator><name pos:line="474" pos:column="52">ChangeState</name></name><argument_list pos:line="474" pos:column="63">(<argument><expr><name pos:line="474" pos:column="64">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<comment type="line" pos:line="476" pos:column="41">// if single char between {?} then its ok as sendkey for a single character</comment>
					<else pos:line="477" pos:column="41">else <if pos:line="477" pos:column="46">if <condition pos:line="477" pos:column="49">(<expr><call><name pos:line="477" pos:column="50">strlen</name><argument_list pos:line="477" pos:column="56">(<argument><expr><name pos:line="477" pos:column="57">sk</name></expr></argument>)</argument_list></call> <op:operator pos:line="477" pos:column="61">==</op:operator> <lit:literal type="number" pos:line="477" pos:column="64">3</lit:literal></expr>)</condition><then pos:line="477" pos:column="66">
					<block pos:line="478" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="479" pos:column="49">sc</name><op:operator pos:line="479" pos:column="51">.</op:operator><name pos:line="479" pos:column="52">ChangeState</name></name><argument_list pos:line="479" pos:column="63">(<argument><expr><name pos:line="479" pos:column="64">SCE_AU3_SENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<comment type="line" pos:line="481" pos:column="41">// if sendkey {111} is in table then ok as sendkey</comment>
					<else pos:line="482" pos:column="41">else <if pos:line="482" pos:column="46">if <condition pos:line="482" pos:column="49">(<expr><call><name><name pos:line="482" pos:column="50">keywords4</name><op:operator pos:line="482" pos:column="59">.</op:operator><name pos:line="482" pos:column="60">InList</name></name><argument_list pos:line="482" pos:column="66">(<argument><expr><name pos:line="482" pos:column="67">sk</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="482" pos:column="71">
					<block pos:line="483" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="484" pos:column="49">sc</name><op:operator pos:line="484" pos:column="51">.</op:operator><name pos:line="484" pos:column="52">ChangeState</name></name><argument_list pos:line="484" pos:column="63">(<argument><expr><name pos:line="484" pos:column="64">SCE_AU3_SENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="486" pos:column="41">else
					<block pos:line="487" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="488" pos:column="49">sc</name><op:operator pos:line="488" pos:column="51">.</op:operator><name pos:line="488" pos:column="52">ChangeState</name></name><argument_list pos:line="488" pos:column="63">(<argument><expr><name pos:line="488" pos:column="64">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if></else></if></else></if>
					<expr_stmt><expr><call><name><name pos:line="490" pos:column="41">sc</name><op:operator pos:line="490" pos:column="43">.</op:operator><name pos:line="490" pos:column="44">SetState</name></name><argument_list pos:line="490" pos:column="52">(<argument><expr><name pos:line="490" pos:column="53">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="492" pos:column="33">else
				<block pos:line="493" pos:column="33">{
					<comment type="line" pos:line="494" pos:column="41">// check if the start is a valid SendKey start</comment>
					<decl_stmt><decl><type><name pos:line="495" pos:column="41">int</name></type>		<name pos:line="495" pos:column="57">nPos</name>	<init pos:line="495" pos:column="65">= <expr><lit:literal type="number" pos:line="495" pos:column="67">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="496" pos:column="41">int</name></type>		<name pos:line="496" pos:column="57">nState</name>	<init pos:line="496" pos:column="65">= <expr><lit:literal type="number" pos:line="496" pos:column="67">1</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="497" pos:column="41">char</name></type>	<name pos:line="497" pos:column="49">cTemp</name></decl>;</decl_stmt>
					<while pos:line="498" pos:column="41">while <condition pos:line="498" pos:column="47">(<expr><op:operator pos:line="498" pos:column="48">!</op:operator><op:operator pos:line="498" pos:column="49">(</op:operator><name pos:line="498" pos:column="50">nState</name> <op:operator pos:line="498" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="498" pos:column="60">2</lit:literal><op:operator pos:line="498" pos:column="61">)</op:operator> <op:operator pos:line="498" pos:column="63">&amp;&amp;</op:operator> <op:operator pos:line="498" pos:column="66">(</op:operator><op:operator pos:line="498" pos:column="67">(</op:operator><name pos:line="498" pos:column="68">cTemp</name> <op:operator pos:line="498" pos:column="74">=</op:operator> <name><name pos:line="498" pos:column="76">s</name><index pos:line="498" pos:column="77">[<expr><name pos:line="498" pos:column="78">nPos</name></expr>]</index></name><op:operator pos:line="498" pos:column="83">)</op:operator> <op:operator pos:line="498" pos:column="85">!=</op:operator> <lit:literal type="char" pos:line="498" pos:column="88">'\0'</lit:literal><op:operator pos:line="498" pos:column="92">)</op:operator></expr>)</condition>
					<block pos:line="499" pos:column="41">{
						<if pos:line="500" pos:column="49">if <condition pos:line="500" pos:column="52">(<expr><name pos:line="500" pos:column="53">cTemp</name> <op:operator pos:line="500" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="500" pos:column="62">'{'</lit:literal> <op:operator pos:line="500" pos:column="66">&amp;&amp;</op:operator> <name pos:line="500" pos:column="69">nState</name> <op:operator pos:line="500" pos:column="76">==</op:operator> <lit:literal type="number" pos:line="500" pos:column="79">1</lit:literal></expr>)</condition><then pos:line="500" pos:column="81">
						<block pos:line="501" pos:column="49">{
							<expr_stmt><expr><name pos:line="502" pos:column="57">nState</name> <op:operator pos:line="502" pos:column="64">=</op:operator> <lit:literal type="number" pos:line="502" pos:column="66">2</lit:literal></expr>;</expr_stmt>
						}</block></then></if>
						<if pos:line="504" pos:column="49">if <condition pos:line="504" pos:column="52">(<expr><name pos:line="504" pos:column="53">nState</name> <op:operator pos:line="504" pos:column="60">==</op:operator> <lit:literal type="number" pos:line="504" pos:column="63">1</lit:literal> <op:operator pos:line="504" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="504" pos:column="68">!</op:operator><op:operator pos:line="504" pos:column="69">(</op:operator><name pos:line="504" pos:column="70">cTemp</name> <op:operator pos:line="504" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="504" pos:column="79">'+'</lit:literal> <op:operator pos:line="504" pos:column="83">||</op:operator> <name pos:line="504" pos:column="86">cTemp</name> <op:operator pos:line="504" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="504" pos:column="95">'!'</lit:literal> <op:operator pos:line="504" pos:column="99">||</op:operator> <name pos:line="504" pos:column="102">cTemp</name> <op:operator pos:line="504" pos:column="108">==</op:operator> <lit:literal type="char" pos:line="504" pos:column="111">'^'</lit:literal> <op:operator pos:line="504" pos:column="115">||</op:operator> <name pos:line="504" pos:column="118">cTemp</name> <op:operator pos:line="504" pos:column="124">==</op:operator> <lit:literal type="char" pos:line="504" pos:column="127">'#'</lit:literal> <op:operator pos:line="504" pos:column="131">)</op:operator></expr>)</condition><then pos:line="504" pos:column="133">
						<block pos:line="505" pos:column="49">{
							<expr_stmt><expr><name pos:line="506" pos:column="57">nState</name> <op:operator pos:line="506" pos:column="64">=</op:operator> <lit:literal type="number" pos:line="506" pos:column="66">0</lit:literal></expr>;</expr_stmt>
						}</block></then></if>
						<expr_stmt><expr><name pos:line="508" pos:column="49">nPos</name><op:operator pos:line="508" pos:column="53">++</op:operator></expr>;</expr_stmt>
					}</block></while>
					<comment type="line" pos:line="510" pos:column="41">//Verify characters infront of { ... if not assume  regular string</comment>
					<if pos:line="511" pos:column="41">if <condition pos:line="511" pos:column="44">(<expr><name pos:line="511" pos:column="45">nState</name> <op:operator pos:line="511" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="511" pos:column="55">1</lit:literal> <op:operator pos:line="511" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="511" pos:column="60">(</op:operator><op:operator pos:line="511" pos:column="61">!</op:operator><op:operator pos:line="511" pos:column="62">(</op:operator><name><name pos:line="511" pos:column="63">sc</name><op:operator pos:line="511" pos:column="65">.</op:operator><name pos:line="511" pos:column="66">ch</name></name> <op:operator pos:line="511" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="511" pos:column="72">'{'</lit:literal> <op:operator pos:line="511" pos:column="76">||</op:operator> <name><name pos:line="511" pos:column="79">sc</name><op:operator pos:line="511" pos:column="81">.</op:operator><name pos:line="511" pos:column="82">ch</name></name> <op:operator pos:line="511" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="511" pos:column="88">'+'</lit:literal> <op:operator pos:line="511" pos:column="92">||</op:operator> <name><name pos:line="511" pos:column="95">sc</name><op:operator pos:line="511" pos:column="97">.</op:operator><name pos:line="511" pos:column="98">ch</name></name> <op:operator pos:line="511" pos:column="101">==</op:operator> <lit:literal type="char" pos:line="511" pos:column="104">'!'</lit:literal> <op:operator pos:line="511" pos:column="108">||</op:operator> <name><name pos:line="511" pos:column="111">sc</name><op:operator pos:line="511" pos:column="113">.</op:operator><name pos:line="511" pos:column="114">ch</name></name> <op:operator pos:line="511" pos:column="117">==</op:operator> <lit:literal type="char" pos:line="511" pos:column="120">'^'</lit:literal> <op:operator pos:line="511" pos:column="124">||</op:operator> <name><name pos:line="511" pos:column="127">sc</name><op:operator pos:line="511" pos:column="129">.</op:operator><name pos:line="511" pos:column="130">ch</name></name> <op:operator pos:line="511" pos:column="133">==</op:operator> <lit:literal type="char" pos:line="511" pos:column="136">'#'</lit:literal> <op:operator pos:line="511" pos:column="140">)</op:operator><op:operator pos:line="511" pos:column="141">)</op:operator></expr>)</condition><then pos:line="511" pos:column="143"> <block pos:line="511" pos:column="144">{
						<expr_stmt><expr><call><name><name pos:line="512" pos:column="49">sc</name><op:operator pos:line="512" pos:column="51">.</op:operator><name pos:line="512" pos:column="52">ChangeState</name></name><argument_list pos:line="512" pos:column="63">(<argument><expr><name pos:line="512" pos:column="64">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="513" pos:column="49">sc</name><op:operator pos:line="513" pos:column="51">.</op:operator><name pos:line="513" pos:column="52">SetState</name></name><argument_list pos:line="513" pos:column="60">(<argument><expr><name pos:line="513" pos:column="61">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<comment type="line" pos:line="515" pos:column="41">// If invalid character found then assume its a regular string</comment>
					<if pos:line="516" pos:column="41">if <condition pos:line="516" pos:column="44">(<expr><name pos:line="516" pos:column="45">nState</name> <op:operator pos:line="516" pos:column="52">==</op:operator> <lit:literal type="number" pos:line="516" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="516" pos:column="57"> <block pos:line="516" pos:column="58">{
						<expr_stmt><expr><call><name><name pos:line="517" pos:column="49">sc</name><op:operator pos:line="517" pos:column="51">.</op:operator><name pos:line="517" pos:column="52">ChangeState</name></name><argument_list pos:line="517" pos:column="63">(<argument><expr><name pos:line="517" pos:column="64">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="518" pos:column="49">sc</name><op:operator pos:line="518" pos:column="51">.</op:operator><name pos:line="518" pos:column="52">SetState</name></name><argument_list pos:line="518" pos:column="60">(<argument><expr><name pos:line="518" pos:column="61">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if>
				<comment type="line" pos:line="521" pos:column="33">// check if next portion is again a sendkey</comment>
				<if pos:line="522" pos:column="33">if <condition pos:line="522" pos:column="36">(<expr><name><name pos:line="522" pos:column="37">sc</name><op:operator pos:line="522" pos:column="39">.</op:operator><name pos:line="522" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="522" pos:column="50">
				<block pos:line="523" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="524" pos:column="41">sc</name><op:operator pos:line="524" pos:column="43">.</op:operator><name pos:line="524" pos:column="44">ChangeState</name></name><argument_list pos:line="524" pos:column="55">(<argument><expr><name pos:line="524" pos:column="56">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="525" pos:column="41">sc</name><op:operator pos:line="525" pos:column="43">.</op:operator><name pos:line="525" pos:column="44">SetState</name></name><argument_list pos:line="525" pos:column="52">(<argument><expr><name pos:line="525" pos:column="53">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="526" pos:column="41">si</name> <op:operator pos:line="526" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="526" pos:column="46">0</lit:literal></expr>;</expr_stmt>  <comment type="line" pos:line="526" pos:column="50">// reset string indicator</comment>
				}</block></then></if>
				<comment type="line" pos:line="528" pos:column="33">//* check in next characters following a sentkey are again a sent key</comment>
				<comment type="line" pos:line="529" pos:column="33">// Need this test incase of 2 sentkeys like {F1}{ENTER} but not detect {{}</comment>
				<if pos:line="530" pos:column="33">if <condition pos:line="530" pos:column="36">(<expr><name><name pos:line="530" pos:column="37">sc</name><op:operator pos:line="530" pos:column="39">.</op:operator><name pos:line="530" pos:column="40">state</name></name> <op:operator pos:line="530" pos:column="46">==</op:operator> <name pos:line="530" pos:column="49">SCE_AU3_STRING</name> <op:operator pos:line="530" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="530" pos:column="67">(</op:operator><name><name pos:line="530" pos:column="68">sc</name><op:operator pos:line="530" pos:column="70">.</op:operator><name pos:line="530" pos:column="71">ch</name></name> <op:operator pos:line="530" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="530" pos:column="77">'{'</lit:literal> <op:operator pos:line="530" pos:column="81">||</op:operator> <name><name pos:line="530" pos:column="84">sc</name><op:operator pos:line="530" pos:column="86">.</op:operator><name pos:line="530" pos:column="87">ch</name></name> <op:operator pos:line="530" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="530" pos:column="93">'+'</lit:literal> <op:operator pos:line="530" pos:column="97">||</op:operator> <name><name pos:line="530" pos:column="100">sc</name><op:operator pos:line="530" pos:column="102">.</op:operator><name pos:line="530" pos:column="103">ch</name></name> <op:operator pos:line="530" pos:column="106">==</op:operator> <lit:literal type="char" pos:line="530" pos:column="109">'!'</lit:literal> <op:operator pos:line="530" pos:column="113">||</op:operator> <name><name pos:line="530" pos:column="116">sc</name><op:operator pos:line="530" pos:column="118">.</op:operator><name pos:line="530" pos:column="119">ch</name></name> <op:operator pos:line="530" pos:column="122">==</op:operator> <lit:literal type="char" pos:line="530" pos:column="125">'^'</lit:literal> <op:operator pos:line="530" pos:column="129">||</op:operator> <name><name pos:line="530" pos:column="132">sc</name><op:operator pos:line="530" pos:column="134">.</op:operator><name pos:line="530" pos:column="135">ch</name></name> <op:operator pos:line="530" pos:column="138">==</op:operator> <lit:literal type="char" pos:line="530" pos:column="141">'#'</lit:literal> <op:operator pos:line="530" pos:column="145">)</op:operator></expr>)</condition><then pos:line="530" pos:column="147"> <block pos:line="530" pos:column="148">{
					<expr_stmt><expr><call><name><name pos:line="531" pos:column="41">sc</name><op:operator pos:line="531" pos:column="43">.</op:operator><name pos:line="531" pos:column="44">SetState</name></name><argument_list pos:line="531" pos:column="52">(<argument><expr><name pos:line="531" pos:column="53">SCE_AU3_SENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
				<comment type="line" pos:line="532" pos:column="33">// check to see if the string ended...</comment>
				<comment type="line" pos:line="533" pos:column="33">// Sendkey string isn't complete but the string ended....</comment>
				<if pos:line="534" pos:column="33">if <condition pos:line="534" pos:column="36">(<expr><op:operator pos:line="534" pos:column="37">(</op:operator><name pos:line="534" pos:column="38">si</name> <op:operator pos:line="534" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="534" pos:column="44">1</lit:literal> <op:operator pos:line="534" pos:column="46">&amp;&amp;</op:operator> <name><name pos:line="534" pos:column="49">sc</name><op:operator pos:line="534" pos:column="51">.</op:operator><name pos:line="534" pos:column="52">ch</name></name> <op:operator pos:line="534" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="534" pos:column="58">'\"'</lit:literal><op:operator pos:line="534" pos:column="62">)</op:operator> <op:operator pos:line="534" pos:column="64">||</op:operator> <op:operator pos:line="534" pos:column="67">(</op:operator><name pos:line="534" pos:column="68">si</name> <op:operator pos:line="534" pos:column="71">==</op:operator> <lit:literal type="number" pos:line="534" pos:column="74">2</lit:literal> <op:operator pos:line="534" pos:column="76">&amp;&amp;</op:operator> <name><name pos:line="534" pos:column="79">sc</name><op:operator pos:line="534" pos:column="81">.</op:operator><name pos:line="534" pos:column="82">ch</name></name> <op:operator pos:line="534" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="534" pos:column="88">'\''</lit:literal><op:operator pos:line="534" pos:column="92">)</op:operator></expr>)</condition><then pos:line="534" pos:column="94">
				<block pos:line="535" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="536" pos:column="41">sc</name><op:operator pos:line="536" pos:column="43">.</op:operator><name pos:line="536" pos:column="44">ChangeState</name></name><argument_list pos:line="536" pos:column="55">(<argument><expr><name pos:line="536" pos:column="56">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="537" pos:column="41">sc</name><op:operator pos:line="537" pos:column="43">.</op:operator><name pos:line="537" pos:column="44">ForwardSetState</name></name><argument_list pos:line="537" pos:column="59">(<argument><expr><name pos:line="537" pos:column="60">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="539" pos:column="33">break;</break>
            }</block>
        </case>}</block></switch>  <comment type="line" pos:line="541" pos:column="12">//switch (sc.state)</comment>

        <comment type="line" pos:line="543" pos:column="9">// Determine if a new state should be entered:</comment>

		<if pos:line="545" pos:column="17">if <condition pos:line="545" pos:column="20">(<expr><name><name pos:line="545" pos:column="21">sc</name><op:operator pos:line="545" pos:column="23">.</op:operator><name pos:line="545" pos:column="24">state</name></name> <op:operator pos:line="545" pos:column="30">==</op:operator> <name pos:line="545" pos:column="33">SCE_AU3_DEFAULT</name></expr>)</condition><then pos:line="545" pos:column="49">
        <block pos:line="546" pos:column="9">{
            <if pos:line="547" pos:column="13">if <condition pos:line="547" pos:column="16">(<expr><name><name pos:line="547" pos:column="17">sc</name><op:operator pos:line="547" pos:column="19">.</op:operator><name pos:line="547" pos:column="20">ch</name></name> <op:operator pos:line="547" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="547" pos:column="26">';'</lit:literal></expr>)</condition><then pos:line="547" pos:column="30"> <block pos:line="547" pos:column="31">{<expr_stmt><expr><call><name><name pos:line="547" pos:column="32">sc</name><op:operator pos:line="547" pos:column="34">.</op:operator><name pos:line="547" pos:column="35">SetState</name></name><argument_list pos:line="547" pos:column="43">(<argument><expr><name pos:line="547" pos:column="44">SCE_AU3_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="548" pos:column="13">else <if pos:line="548" pos:column="18">if <condition pos:line="548" pos:column="21">(<expr><name><name pos:line="548" pos:column="22">sc</name><op:operator pos:line="548" pos:column="24">.</op:operator><name pos:line="548" pos:column="25">ch</name></name> <op:operator pos:line="548" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="548" pos:column="31">'#'</lit:literal></expr>)</condition><then pos:line="548" pos:column="35"> <block pos:line="548" pos:column="36">{<expr_stmt><expr><call><name><name pos:line="548" pos:column="37">sc</name><op:operator pos:line="548" pos:column="39">.</op:operator><name pos:line="548" pos:column="40">SetState</name></name><argument_list pos:line="548" pos:column="48">(<argument><expr><name pos:line="548" pos:column="49">SCE_AU3_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="549" pos:column="13">else <if pos:line="549" pos:column="18">if <condition pos:line="549" pos:column="21">(<expr><name><name pos:line="549" pos:column="22">sc</name><op:operator pos:line="549" pos:column="24">.</op:operator><name pos:line="549" pos:column="25">ch</name></name> <op:operator pos:line="549" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="549" pos:column="31">'$'</lit:literal></expr>)</condition><then pos:line="549" pos:column="35"> <block pos:line="549" pos:column="36">{<expr_stmt><expr><call><name><name pos:line="549" pos:column="37">sc</name><op:operator pos:line="549" pos:column="39">.</op:operator><name pos:line="549" pos:column="40">SetState</name></name><argument_list pos:line="549" pos:column="48">(<argument><expr><name pos:line="549" pos:column="49">SCE_AU3_VARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="550" pos:column="13">else <if pos:line="550" pos:column="18">if <condition pos:line="550" pos:column="21">(<expr><name><name pos:line="550" pos:column="22">sc</name><op:operator pos:line="550" pos:column="24">.</op:operator><name pos:line="550" pos:column="25">ch</name></name> <op:operator pos:line="550" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="550" pos:column="31">'.'</lit:literal> <op:operator pos:line="550" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="550" pos:column="38">!</op:operator><call><name pos:line="550" pos:column="39">IsADigit</name><argument_list pos:line="550" pos:column="47">(<argument><expr><name><name pos:line="550" pos:column="48">sc</name><op:operator pos:line="550" pos:column="50">.</op:operator><name pos:line="550" pos:column="51">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="550" pos:column="59"> <block pos:line="550" pos:column="60">{<expr_stmt><expr><call><name><name pos:line="550" pos:column="61">sc</name><op:operator pos:line="550" pos:column="63">.</op:operator><name pos:line="550" pos:column="64">SetState</name></name><argument_list pos:line="550" pos:column="72">(<argument><expr><name pos:line="550" pos:column="73">SCE_AU3_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="551" pos:column="13">else <if pos:line="551" pos:column="18">if <condition pos:line="551" pos:column="21">(<expr><name><name pos:line="551" pos:column="22">sc</name><op:operator pos:line="551" pos:column="24">.</op:operator><name pos:line="551" pos:column="25">ch</name></name> <op:operator pos:line="551" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="551" pos:column="31">'@'</lit:literal></expr>)</condition><then pos:line="551" pos:column="35"> <block pos:line="551" pos:column="36">{<expr_stmt><expr><call><name><name pos:line="551" pos:column="37">sc</name><op:operator pos:line="551" pos:column="39">.</op:operator><name pos:line="551" pos:column="40">SetState</name></name><argument_list pos:line="551" pos:column="48">(<argument><expr><name pos:line="551" pos:column="49">SCE_AU3_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <comment type="line" pos:line="552" pos:column="13">//else if (sc.ch == '_') {sc.SetState(SCE_AU3_KEYWORD);}</comment>
            <else pos:line="553" pos:column="13">else <if pos:line="553" pos:column="18">if <condition pos:line="553" pos:column="21">(<expr><name><name pos:line="553" pos:column="22">sc</name><op:operator pos:line="553" pos:column="24">.</op:operator><name pos:line="553" pos:column="25">ch</name></name> <op:operator pos:line="553" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="553" pos:column="31">'&lt;'</lit:literal> <op:operator pos:line="553" pos:column="35">&amp;&amp;</op:operator> <name pos:line="553" pos:column="38">si</name><op:operator pos:line="553" pos:column="40">==</op:operator><lit:literal type="number" pos:line="553" pos:column="42">3</lit:literal></expr>)</condition><then pos:line="553" pos:column="44"> <block pos:line="553" pos:column="45">{<expr_stmt><expr><call><name><name pos:line="553" pos:column="46">sc</name><op:operator pos:line="553" pos:column="48">.</op:operator><name pos:line="553" pos:column="49">SetState</name></name><argument_list pos:line="553" pos:column="57">(<argument><expr><name pos:line="553" pos:column="58">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>  <comment type="line" pos:line="553" pos:column="77">// string after #include</comment>
            <else pos:line="554" pos:column="13">else <if pos:line="554" pos:column="18">if <condition pos:line="554" pos:column="21">(<expr><name><name pos:line="554" pos:column="22">sc</name><op:operator pos:line="554" pos:column="24">.</op:operator><name pos:line="554" pos:column="25">ch</name></name> <op:operator pos:line="554" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="554" pos:column="31">'\"'</lit:literal></expr>)</condition><then pos:line="554" pos:column="36"> <block pos:line="554" pos:column="37">{
				<expr_stmt><expr><call><name><name pos:line="555" pos:column="33">sc</name><op:operator pos:line="555" pos:column="35">.</op:operator><name pos:line="555" pos:column="36">SetState</name></name><argument_list pos:line="555" pos:column="44">(<argument><expr><name pos:line="555" pos:column="45">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="556" pos:column="33">si</name> <op:operator pos:line="556" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="556" pos:column="38">1</lit:literal></expr>;</expr_stmt>	}</block></then>
            <else pos:line="557" pos:column="13">else <if pos:line="557" pos:column="18">if <condition pos:line="557" pos:column="21">(<expr><name><name pos:line="557" pos:column="22">sc</name><op:operator pos:line="557" pos:column="24">.</op:operator><name pos:line="557" pos:column="25">ch</name></name> <op:operator pos:line="557" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="557" pos:column="31">'\''</lit:literal></expr>)</condition><then pos:line="557" pos:column="36"> <block pos:line="557" pos:column="37">{
				<expr_stmt><expr><call><name><name pos:line="558" pos:column="33">sc</name><op:operator pos:line="558" pos:column="35">.</op:operator><name pos:line="558" pos:column="36">SetState</name></name><argument_list pos:line="558" pos:column="44">(<argument><expr><name pos:line="558" pos:column="45">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="559" pos:column="33">si</name> <op:operator pos:line="559" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="559" pos:column="38">2</lit:literal></expr>;</expr_stmt>	}</block></then>
            <else pos:line="560" pos:column="13">else <if pos:line="560" pos:column="18">if <condition pos:line="560" pos:column="21">(<expr><call><name pos:line="560" pos:column="22">IsADigit</name><argument_list pos:line="560" pos:column="30">(<argument><expr><name><name pos:line="560" pos:column="31">sc</name><op:operator pos:line="560" pos:column="33">.</op:operator><name pos:line="560" pos:column="34">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="560" pos:column="38">||</op:operator> <op:operator pos:line="560" pos:column="41">(</op:operator><name><name pos:line="560" pos:column="42">sc</name><op:operator pos:line="560" pos:column="44">.</op:operator><name pos:line="560" pos:column="45">ch</name></name> <op:operator pos:line="560" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="560" pos:column="51">'.'</lit:literal> <op:operator pos:line="560" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="560" pos:column="58">IsADigit</name><argument_list pos:line="560" pos:column="66">(<argument><expr><name><name pos:line="560" pos:column="67">sc</name><op:operator pos:line="560" pos:column="69">.</op:operator><name pos:line="560" pos:column="70">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="560" pos:column="77">)</op:operator></expr>)</condition><then pos:line="560" pos:column="79">
			<block pos:line="561" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="562" pos:column="33">sc</name><op:operator pos:line="562" pos:column="35">.</op:operator><name pos:line="562" pos:column="36">SetState</name></name><argument_list pos:line="562" pos:column="44">(<argument><expr><name pos:line="562" pos:column="45">SCE_AU3_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="563" pos:column="33">ni</name> <op:operator pos:line="563" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="563" pos:column="38">0</lit:literal></expr>;</expr_stmt>
			}</block></then>
            <else pos:line="565" pos:column="13">else <if pos:line="565" pos:column="18">if <condition pos:line="565" pos:column="21">(<expr><call><name pos:line="565" pos:column="22">IsAWordStart</name><argument_list pos:line="565" pos:column="34">(<argument><expr><name><name pos:line="565" pos:column="35">sc</name><op:operator pos:line="565" pos:column="37">.</op:operator><name pos:line="565" pos:column="38">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="565" pos:column="42"> <block pos:line="565" pos:column="43">{<expr_stmt><expr><call><name><name pos:line="565" pos:column="44">sc</name><op:operator pos:line="565" pos:column="46">.</op:operator><name pos:line="565" pos:column="47">SetState</name></name><argument_list pos:line="565" pos:column="55">(<argument><expr><name pos:line="565" pos:column="56">SCE_AU3_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
            <else pos:line="566" pos:column="13">else <if pos:line="566" pos:column="18">if <condition pos:line="566" pos:column="21">(<expr><call><name pos:line="566" pos:column="22">IsAOperator</name><argument_list pos:line="566" pos:column="33">(<argument><expr><call><name><name pos:line="566" pos:column="34">static_cast</name><argument_list pos:line="566" pos:column="45">&lt;<argument><expr><name pos:line="566" pos:column="46">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="566" pos:column="51">(<argument><expr><name><name pos:line="566" pos:column="52">sc</name><op:operator pos:line="566" pos:column="54">.</op:operator><name pos:line="566" pos:column="55">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="566" pos:column="60"> <block pos:line="566" pos:column="61">{<expr_stmt><expr><call><name><name pos:line="566" pos:column="62">sc</name><op:operator pos:line="566" pos:column="64">.</op:operator><name pos:line="566" pos:column="65">SetState</name></name><argument_list pos:line="566" pos:column="73">(<argument><expr><name pos:line="566" pos:column="74">SCE_AU3_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
			<else pos:line="567" pos:column="25">else <if pos:line="567" pos:column="30">if <condition pos:line="567" pos:column="33">(<expr><name><name pos:line="567" pos:column="34">sc</name><op:operator pos:line="567" pos:column="36">.</op:operator><name pos:line="567" pos:column="37">atLineEnd</name></name></expr>)</condition><then pos:line="567" pos:column="47"> <block pos:line="567" pos:column="48">{<expr_stmt><expr><call><name><name pos:line="567" pos:column="49">sc</name><op:operator pos:line="567" pos:column="51">.</op:operator><name pos:line="567" pos:column="52">SetState</name></name><argument_list pos:line="567" pos:column="60">(<argument><expr><name pos:line="567" pos:column="61">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></then></if>
    }</block></for>      <comment type="line" pos:line="569" pos:column="12">//for (; sc.More(); sc.Forward())</comment>

	<comment type="line" pos:line="571" pos:column="9">//*************************************</comment>
	<comment type="line" pos:line="572" pos:column="9">// Colourize the last word correctly</comment>
	<comment type="line" pos:line="573" pos:column="9">//*************************************</comment>
	<if pos:line="574" pos:column="9">if <condition pos:line="574" pos:column="12">(<expr><name><name pos:line="574" pos:column="13">sc</name><op:operator pos:line="574" pos:column="15">.</op:operator><name pos:line="574" pos:column="16">state</name></name> <op:operator pos:line="574" pos:column="22">==</op:operator> <name pos:line="574" pos:column="25">SCE_AU3_KEYWORD</name></expr>)</condition><then pos:line="574" pos:column="41">
		<block pos:line="575" pos:column="17">{
		<if pos:line="576" pos:column="17">if <condition pos:line="576" pos:column="20">(<expr><call><name pos:line="576" pos:column="21">strcmp</name><argument_list pos:line="576" pos:column="27">(<argument><expr><name pos:line="576" pos:column="28">s_save</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="576" pos:column="36">"#cs"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="576" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="576" pos:column="45">0</lit:literal> <op:operator pos:line="576" pos:column="47">||</op:operator> <call><name pos:line="576" pos:column="50">strcmp</name><argument_list pos:line="576" pos:column="56">(<argument><expr><name pos:line="576" pos:column="57">s_save</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="576" pos:column="65">"#comments-start"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="576" pos:column="83">==</op:operator> <lit:literal type="number" pos:line="576" pos:column="86">0</lit:literal></expr> )</condition><then pos:line="576" pos:column="89">
		<block pos:line="577" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="578" pos:column="25">sc</name><op:operator pos:line="578" pos:column="27">.</op:operator><name pos:line="578" pos:column="28">ChangeState</name></name><argument_list pos:line="578" pos:column="39">(<argument><expr><name pos:line="578" pos:column="40">SCE_AU3_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="579" pos:column="25">sc</name><op:operator pos:line="579" pos:column="27">.</op:operator><name pos:line="579" pos:column="28">SetState</name></name><argument_list pos:line="579" pos:column="36">(<argument><expr><name pos:line="579" pos:column="37">SCE_AU3_COMMENTBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="581" pos:column="17">else <if pos:line="581" pos:column="22">if <condition pos:line="581" pos:column="25">(<expr><call><name><name pos:line="581" pos:column="26">keywords</name><op:operator pos:line="581" pos:column="34">.</op:operator><name pos:line="581" pos:column="35">InList</name></name><argument_list pos:line="581" pos:column="41">(<argument><expr><name pos:line="581" pos:column="42">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="581" pos:column="50"> <block pos:line="581" pos:column="51">{
			<expr_stmt><expr><call><name><name pos:line="582" pos:column="25">sc</name><op:operator pos:line="582" pos:column="27">.</op:operator><name pos:line="582" pos:column="28">ChangeState</name></name><argument_list pos:line="582" pos:column="39">(<argument><expr><name pos:line="582" pos:column="40">SCE_AU3_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="583" pos:column="25">sc</name><op:operator pos:line="583" pos:column="27">.</op:operator><name pos:line="583" pos:column="28">SetState</name></name><argument_list pos:line="583" pos:column="36">(<argument><expr><name pos:line="583" pos:column="37">SCE_AU3_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="585" pos:column="17">else <if pos:line="585" pos:column="22">if <condition pos:line="585" pos:column="25">(<expr><call><name><name pos:line="585" pos:column="26">keywords2</name><op:operator pos:line="585" pos:column="35">.</op:operator><name pos:line="585" pos:column="36">InList</name></name><argument_list pos:line="585" pos:column="42">(<argument><expr><name pos:line="585" pos:column="43">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="585" pos:column="51"> <block pos:line="585" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="586" pos:column="25">sc</name><op:operator pos:line="586" pos:column="27">.</op:operator><name pos:line="586" pos:column="28">ChangeState</name></name><argument_list pos:line="586" pos:column="39">(<argument><expr><name pos:line="586" pos:column="40">SCE_AU3_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="587" pos:column="25">sc</name><op:operator pos:line="587" pos:column="27">.</op:operator><name pos:line="587" pos:column="28">SetState</name></name><argument_list pos:line="587" pos:column="36">(<argument><expr><name pos:line="587" pos:column="37">SCE_AU3_FUNCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="589" pos:column="17">else <if pos:line="589" pos:column="22">if <condition pos:line="589" pos:column="25">(<expr><call><name><name pos:line="589" pos:column="26">keywords3</name><op:operator pos:line="589" pos:column="35">.</op:operator><name pos:line="589" pos:column="36">InList</name></name><argument_list pos:line="589" pos:column="42">(<argument><expr><name pos:line="589" pos:column="43">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="589" pos:column="51"> <block pos:line="589" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="590" pos:column="25">sc</name><op:operator pos:line="590" pos:column="27">.</op:operator><name pos:line="590" pos:column="28">ChangeState</name></name><argument_list pos:line="590" pos:column="39">(<argument><expr><name pos:line="590" pos:column="40">SCE_AU3_MACRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="591" pos:column="25">sc</name><op:operator pos:line="591" pos:column="27">.</op:operator><name pos:line="591" pos:column="28">SetState</name></name><argument_list pos:line="591" pos:column="36">(<argument><expr><name pos:line="591" pos:column="37">SCE_AU3_MACRO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="593" pos:column="17">else <if pos:line="593" pos:column="22">if <condition pos:line="593" pos:column="25">(<expr><call><name><name pos:line="593" pos:column="26">keywords5</name><op:operator pos:line="593" pos:column="35">.</op:operator><name pos:line="593" pos:column="36">InList</name></name><argument_list pos:line="593" pos:column="42">(<argument><expr><name pos:line="593" pos:column="43">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="593" pos:column="51"> <block pos:line="593" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="594" pos:column="25">sc</name><op:operator pos:line="594" pos:column="27">.</op:operator><name pos:line="594" pos:column="28">ChangeState</name></name><argument_list pos:line="594" pos:column="39">(<argument><expr><name pos:line="594" pos:column="40">SCE_AU3_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="595" pos:column="25">sc</name><op:operator pos:line="595" pos:column="27">.</op:operator><name pos:line="595" pos:column="28">SetState</name></name><argument_list pos:line="595" pos:column="36">(<argument><expr><name pos:line="595" pos:column="37">SCE_AU3_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="597" pos:column="17">else <if pos:line="597" pos:column="22">if <condition pos:line="597" pos:column="25">(<expr><call><name><name pos:line="597" pos:column="26">keywords6</name><op:operator pos:line="597" pos:column="35">.</op:operator><name pos:line="597" pos:column="36">InList</name></name><argument_list pos:line="597" pos:column="42">(<argument><expr><name pos:line="597" pos:column="43">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="597" pos:column="51"> <block pos:line="597" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="598" pos:column="25">sc</name><op:operator pos:line="598" pos:column="27">.</op:operator><name pos:line="598" pos:column="28">ChangeState</name></name><argument_list pos:line="598" pos:column="39">(<argument><expr><name pos:line="598" pos:column="40">SCE_AU3_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="599" pos:column="25">sc</name><op:operator pos:line="599" pos:column="27">.</op:operator><name pos:line="599" pos:column="28">SetState</name></name><argument_list pos:line="599" pos:column="36">(<argument><expr><name pos:line="599" pos:column="37">SCE_AU3_SPECIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="601" pos:column="17">else <if pos:line="601" pos:column="22">if <condition pos:line="601" pos:column="25">(<expr><call><name><name pos:line="601" pos:column="26">keywords7</name><op:operator pos:line="601" pos:column="35">.</op:operator><name pos:line="601" pos:column="36">InList</name></name><argument_list pos:line="601" pos:column="42">(<argument><expr><name pos:line="601" pos:column="43">s_save</name></expr></argument>)</argument_list></call> <op:operator pos:line="601" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="601" pos:column="54">sc</name><op:operator pos:line="601" pos:column="56">.</op:operator><name pos:line="601" pos:column="57">atLineEnd</name></name></expr>)</condition><then pos:line="601" pos:column="67"> <block pos:line="601" pos:column="68">{
			<expr_stmt><expr><call><name><name pos:line="602" pos:column="25">sc</name><op:operator pos:line="602" pos:column="27">.</op:operator><name pos:line="602" pos:column="28">ChangeState</name></name><argument_list pos:line="602" pos:column="39">(<argument><expr><name pos:line="602" pos:column="40">SCE_AU3_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="603" pos:column="25">sc</name><op:operator pos:line="603" pos:column="27">.</op:operator><name pos:line="603" pos:column="28">SetState</name></name><argument_list pos:line="603" pos:column="36">(<argument><expr><name pos:line="603" pos:column="37">SCE_AU3_EXPAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="605" pos:column="17">else <if pos:line="605" pos:column="22">if <condition pos:line="605" pos:column="25">(<expr><call><name><name pos:line="605" pos:column="26">keywords8</name><op:operator pos:line="605" pos:column="35">.</op:operator><name pos:line="605" pos:column="36">InList</name></name><argument_list pos:line="605" pos:column="42">(<argument><expr><name pos:line="605" pos:column="43">s_save</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="605" pos:column="51"> <block pos:line="605" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="606" pos:column="25">sc</name><op:operator pos:line="606" pos:column="27">.</op:operator><name pos:line="606" pos:column="28">ChangeState</name></name><argument_list pos:line="606" pos:column="39">(<argument><expr><name pos:line="606" pos:column="40">SCE_AU3_UDF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="607" pos:column="25">sc</name><op:operator pos:line="607" pos:column="27">.</op:operator><name pos:line="607" pos:column="28">SetState</name></name><argument_list pos:line="607" pos:column="36">(<argument><expr><name pos:line="607" pos:column="37">SCE_AU3_UDF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="609" pos:column="17">else <block pos:line="609" pos:column="22">{
			<expr_stmt><expr><call><name><name pos:line="610" pos:column="25">sc</name><op:operator pos:line="610" pos:column="27">.</op:operator><name pos:line="610" pos:column="28">ChangeState</name></name><argument_list pos:line="610" pos:column="39">(<argument><expr><name pos:line="610" pos:column="40">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="611" pos:column="25">sc</name><op:operator pos:line="611" pos:column="27">.</op:operator><name pos:line="611" pos:column="28">SetState</name></name><argument_list pos:line="611" pos:column="36">(<argument><expr><name pos:line="611" pos:column="37">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
	}</block></then></if>
	<if pos:line="614" pos:column="9">if <condition pos:line="614" pos:column="12">(<expr><name><name pos:line="614" pos:column="13">sc</name><op:operator pos:line="614" pos:column="15">.</op:operator><name pos:line="614" pos:column="16">state</name></name> <op:operator pos:line="614" pos:column="22">==</op:operator> <name pos:line="614" pos:column="25">SCE_AU3_SENT</name></expr>)</condition><then pos:line="614" pos:column="38">
    <block pos:line="615" pos:column="5">{
		<comment type="line" pos:line="616" pos:column="17">// Send key string ended</comment>
		<if pos:line="617" pos:column="17">if <condition pos:line="617" pos:column="20">(<expr><name><name pos:line="617" pos:column="21">sc</name><op:operator pos:line="617" pos:column="23">.</op:operator><name pos:line="617" pos:column="24">chPrev</name></name> <op:operator pos:line="617" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="617" pos:column="34">'}'</lit:literal> <op:operator pos:line="617" pos:column="38">&amp;&amp;</op:operator> <name><name pos:line="617" pos:column="41">sc</name><op:operator pos:line="617" pos:column="43">.</op:operator><name pos:line="617" pos:column="44">ch</name></name> <op:operator pos:line="617" pos:column="47">!=</op:operator> <lit:literal type="char" pos:line="617" pos:column="50">'}'</lit:literal></expr>)</condition><then pos:line="617" pos:column="54">
		<block pos:line="618" pos:column="17">{
			<comment type="line" pos:line="619" pos:column="25">// set color to SENDKEY when valid sendkey .. else set back to regular string</comment>
			<decl_stmt><decl><type><name pos:line="620" pos:column="25">char</name></type> <name><name pos:line="620" pos:column="30">sk</name><index pos:line="620" pos:column="32">[<expr><lit:literal type="number" pos:line="620" pos:column="33">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<comment type="line" pos:line="621" pos:column="25">// split {111 222} and return {111} and check if 222 is valid.</comment>
			<comment type="line" pos:line="622" pos:column="25">// if return code = 1 then invalid 222 so must be string</comment>
			<if pos:line="623" pos:column="25">if <condition pos:line="623" pos:column="28">(<expr><call><name pos:line="623" pos:column="29">GetSendKey</name><argument_list pos:line="623" pos:column="39">(<argument><expr><name pos:line="623" pos:column="40">s_save</name></expr></argument>,<argument><expr><name pos:line="623" pos:column="47">sk</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="623" pos:column="51">
			<block pos:line="624" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="625" pos:column="33">sc</name><op:operator pos:line="625" pos:column="35">.</op:operator><name pos:line="625" pos:column="36">ChangeState</name></name><argument_list pos:line="625" pos:column="47">(<argument><expr><name pos:line="625" pos:column="48">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<comment type="line" pos:line="627" pos:column="25">// if single char between {?} then its ok as sendkey for a single character</comment>
			<else pos:line="628" pos:column="25">else <if pos:line="628" pos:column="30">if <condition pos:line="628" pos:column="33">(<expr><call><name pos:line="628" pos:column="34">strlen</name><argument_list pos:line="628" pos:column="40">(<argument><expr><name pos:line="628" pos:column="41">sk</name></expr></argument>)</argument_list></call> <op:operator pos:line="628" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="628" pos:column="48">3</lit:literal></expr>)</condition><then pos:line="628" pos:column="50">
			<block pos:line="629" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="630" pos:column="33">sc</name><op:operator pos:line="630" pos:column="35">.</op:operator><name pos:line="630" pos:column="36">ChangeState</name></name><argument_list pos:line="630" pos:column="47">(<argument><expr><name pos:line="630" pos:column="48">SCE_AU3_SENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<comment type="line" pos:line="632" pos:column="25">// if sendkey {111} is in table then ok as sendkey</comment>
			<else pos:line="633" pos:column="25">else <if pos:line="633" pos:column="30">if <condition pos:line="633" pos:column="33">(<expr><call><name><name pos:line="633" pos:column="34">keywords4</name><op:operator pos:line="633" pos:column="43">.</op:operator><name pos:line="633" pos:column="44">InList</name></name><argument_list pos:line="633" pos:column="50">(<argument><expr><name pos:line="633" pos:column="51">sk</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="633" pos:column="55">
			<block pos:line="634" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="635" pos:column="33">sc</name><op:operator pos:line="635" pos:column="35">.</op:operator><name pos:line="635" pos:column="36">ChangeState</name></name><argument_list pos:line="635" pos:column="47">(<argument><expr><name pos:line="635" pos:column="48">SCE_AU3_SENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="637" pos:column="25">else
			<block pos:line="638" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="639" pos:column="33">sc</name><op:operator pos:line="639" pos:column="35">.</op:operator><name pos:line="639" pos:column="36">ChangeState</name></name><argument_list pos:line="639" pos:column="47">(<argument><expr><name pos:line="639" pos:column="48">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if>
			<expr_stmt><expr><call><name><name pos:line="641" pos:column="25">sc</name><op:operator pos:line="641" pos:column="27">.</op:operator><name pos:line="641" pos:column="28">SetState</name></name><argument_list pos:line="641" pos:column="36">(<argument><expr><name pos:line="641" pos:column="37">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="643" pos:column="17">// check if next portion is again a sendkey</comment>
		<if pos:line="644" pos:column="17">if <condition pos:line="644" pos:column="20">(<expr><name><name pos:line="644" pos:column="21">sc</name><op:operator pos:line="644" pos:column="23">.</op:operator><name pos:line="644" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="644" pos:column="34">
		<block pos:line="645" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="646" pos:column="25">sc</name><op:operator pos:line="646" pos:column="27">.</op:operator><name pos:line="646" pos:column="28">ChangeState</name></name><argument_list pos:line="646" pos:column="39">(<argument><expr><name pos:line="646" pos:column="40">SCE_AU3_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="647" pos:column="25">sc</name><op:operator pos:line="647" pos:column="27">.</op:operator><name pos:line="647" pos:column="28">SetState</name></name><argument_list pos:line="647" pos:column="36">(<argument><expr><name pos:line="647" pos:column="37">SCE_AU3_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
    }</block></then></if>
	<comment type="line" pos:line="650" pos:column="9">//*************************************</comment>
	<expr_stmt><expr><call><name><name pos:line="651" pos:column="9">sc</name><op:operator pos:line="651" pos:column="11">.</op:operator><name pos:line="651" pos:column="12">Complete</name></name><argument_list pos:line="651" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="654" pos:column="1">//</comment>
<function><type><specifier pos:line="655" pos:column="1">static</specifier> <name pos:line="655" pos:column="8">bool</name></type> <name pos:line="655" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="655" pos:column="33">(<param><decl><type><name pos:line="655" pos:column="34">int</name></type> <name pos:line="655" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="655" pos:column="45">{
	<return pos:line="656" pos:column="9">return <expr><name pos:line="656" pos:column="16">style</name> <op:operator pos:line="656" pos:column="22">==</op:operator> <name pos:line="656" pos:column="25">SCE_AU3_COMMENT</name> <op:operator pos:line="656" pos:column="41">||</op:operator> <name pos:line="656" pos:column="44">style</name> <op:operator pos:line="656" pos:column="50">==</op:operator> <name pos:line="656" pos:column="53">SCE_AU3_COMMENTBLOCK</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="659" pos:column="1">//</comment>
<comment type="line" pos:line="660" pos:column="1">// Routine to find first none space on the current line and return its Style</comment>
<comment type="line" pos:line="661" pos:column="1">// needed for comment lines not starting on pos 1</comment>
<function><type><specifier pos:line="662" pos:column="1">static</specifier> <name pos:line="662" pos:column="8">int</name></type> <name pos:line="662" pos:column="12">GetStyleFirstWord</name><parameter_list pos:line="662" pos:column="29">(<param><decl><type><name pos:line="662" pos:column="30">unsigned</name> <name pos:line="662" pos:column="39">int</name></type> <name pos:line="662" pos:column="43">szLine</name></decl></param>, <param><decl><type><name pos:line="662" pos:column="51">Accessor</name> <type:modifier pos:line="662" pos:column="60">&amp;</type:modifier></type><name pos:line="662" pos:column="61">styler</name></decl></param>)</parameter_list>
<block pos:line="663" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="664" pos:column="9">int</name></type> <name pos:line="664" pos:column="13">nsPos</name> <init pos:line="664" pos:column="19">= <expr><call><name><name pos:line="664" pos:column="21">styler</name><op:operator pos:line="664" pos:column="27">.</op:operator><name pos:line="664" pos:column="28">LineStart</name></name><argument_list pos:line="664" pos:column="37">(<argument><expr><name pos:line="664" pos:column="38">szLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="665" pos:column="9">int</name></type> <name pos:line="665" pos:column="13">nePos</name> <init pos:line="665" pos:column="19">= <expr><call><name><name pos:line="665" pos:column="21">styler</name><op:operator pos:line="665" pos:column="27">.</op:operator><name pos:line="665" pos:column="28">LineStart</name></name><argument_list pos:line="665" pos:column="37">(<argument><expr><name pos:line="665" pos:column="38">szLine</name><op:operator pos:line="665" pos:column="44">+</op:operator><lit:literal type="number" pos:line="665" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="665" pos:column="48">-</op:operator> <lit:literal type="number" pos:line="665" pos:column="50">1</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="666" pos:column="9">while <condition pos:line="666" pos:column="15">(<expr><call><name pos:line="666" pos:column="16">isspacechar</name><argument_list pos:line="666" pos:column="27">(<argument><expr><call><name><name pos:line="666" pos:column="28">styler</name><op:operator pos:line="666" pos:column="34">.</op:operator><name pos:line="666" pos:column="35">SafeGetCharAt</name></name><argument_list pos:line="666" pos:column="48">(<argument><expr><name pos:line="666" pos:column="49">nsPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="666" pos:column="57">&amp;&amp;</op:operator> <name pos:line="666" pos:column="60">nsPos</name> <op:operator pos:line="666" pos:column="66">&lt;</op:operator> <name pos:line="666" pos:column="68">nePos</name></expr>)</condition>
	<block pos:line="667" pos:column="9">{
		<expr_stmt><expr><name pos:line="668" pos:column="17">nsPos</name><op:operator pos:line="668" pos:column="22">++</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="668" pos:column="26">// skip to next char</comment>

	}</block></while> <comment type="line" pos:line="670" pos:column="11">// End While</comment>
	<return pos:line="671" pos:column="9">return <expr><call><name><name pos:line="671" pos:column="16">styler</name><op:operator pos:line="671" pos:column="22">.</op:operator><name pos:line="671" pos:column="23">StyleAt</name></name><argument_list pos:line="671" pos:column="30">(<argument><expr><name pos:line="671" pos:column="31">nsPos</name></expr></argument>)</argument_list></call></expr>;</return>

}</block></function> <comment type="line" pos:line="673" pos:column="3">// GetStyleFirstWord()</comment>


<comment type="line" pos:line="676" pos:column="1">//</comment>
<function><type><specifier pos:line="677" pos:column="1">static</specifier> <name pos:line="677" pos:column="8">void</name></type> <name pos:line="677" pos:column="13">FoldAU3Doc</name><parameter_list pos:line="677" pos:column="23">(<param><decl><type><name pos:line="677" pos:column="24">unsigned</name> <name pos:line="677" pos:column="33">int</name></type> <name pos:line="677" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="677" pos:column="47">int</name></type> <name pos:line="677" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="677" pos:column="59">int</name></type></decl></param>, <param><decl><type><name><name pos:line="677" pos:column="64">WordList</name> <type:modifier pos:line="677" pos:column="73">*</type:modifier><index pos:line="677" pos:column="74">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="677" pos:column="78">Accessor</name> <type:modifier pos:line="677" pos:column="87">&amp;</type:modifier></type><name pos:line="677" pos:column="88">styler</name></decl></param>)</parameter_list>
<block pos:line="678" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="679" pos:column="9">int</name></type> <name pos:line="679" pos:column="13">endPos</name> <init pos:line="679" pos:column="20">= <expr><name pos:line="679" pos:column="22">startPos</name> <op:operator pos:line="679" pos:column="31">+</op:operator> <name pos:line="679" pos:column="33">length</name></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="680" pos:column="9">// get settings from the config files for folding comments and preprocessor lines</comment>
	<decl_stmt><decl><type><name pos:line="681" pos:column="9">bool</name></type> <name pos:line="681" pos:column="14">foldComment</name> <init pos:line="681" pos:column="26">= <expr><call><name><name pos:line="681" pos:column="28">styler</name><op:operator pos:line="681" pos:column="34">.</op:operator><name pos:line="681" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="681" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="681" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="681" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="681" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="682" pos:column="9">bool</name></type> <name pos:line="682" pos:column="14">foldInComment</name> <init pos:line="682" pos:column="28">= <expr><call><name><name pos:line="682" pos:column="30">styler</name><op:operator pos:line="682" pos:column="36">.</op:operator><name pos:line="682" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="682" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="682" pos:column="52">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="682" pos:column="68">==</op:operator> <lit:literal type="number" pos:line="682" pos:column="71">2</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="683" pos:column="9">bool</name></type> <name pos:line="683" pos:column="14">foldCompact</name> <init pos:line="683" pos:column="26">= <expr><call><name><name pos:line="683" pos:column="28">styler</name><op:operator pos:line="683" pos:column="34">.</op:operator><name pos:line="683" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="683" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="683" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="683" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="683" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="683" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="684" pos:column="9">bool</name></type> <name pos:line="684" pos:column="14">foldpreprocessor</name> <init pos:line="684" pos:column="31">= <expr><call><name><name pos:line="684" pos:column="33">styler</name><op:operator pos:line="684" pos:column="39">.</op:operator><name pos:line="684" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="684" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="684" pos:column="55">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="684" pos:column="76">!=</op:operator> <lit:literal type="number" pos:line="684" pos:column="79">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="685" pos:column="9">// Backtrack to previous line in case need to fix its fold status</comment>
	<decl_stmt><decl><type><name pos:line="686" pos:column="9">int</name></type> <name pos:line="686" pos:column="13">lineCurrent</name> <init pos:line="686" pos:column="25">= <expr><call><name><name pos:line="686" pos:column="27">styler</name><op:operator pos:line="686" pos:column="33">.</op:operator><name pos:line="686" pos:column="34">GetLine</name></name><argument_list pos:line="686" pos:column="41">(<argument><expr><name pos:line="686" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="687" pos:column="9">if <condition pos:line="687" pos:column="12">(<expr><name pos:line="687" pos:column="13">startPos</name> <op:operator pos:line="687" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="687" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="687" pos:column="26"> <block pos:line="687" pos:column="27">{
		<if pos:line="688" pos:column="17">if <condition pos:line="688" pos:column="20">(<expr><name pos:line="688" pos:column="21">lineCurrent</name> <op:operator pos:line="688" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="688" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="688" pos:column="37"> <block pos:line="688" pos:column="38">{
			<expr_stmt><expr><name pos:line="689" pos:column="25">lineCurrent</name><op:operator pos:line="689" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="690" pos:column="25">startPos</name> <op:operator pos:line="690" pos:column="34">=</op:operator> <call><name><name pos:line="690" pos:column="36">styler</name><op:operator pos:line="690" pos:column="42">.</op:operator><name pos:line="690" pos:column="43">LineStart</name></name><argument_list pos:line="690" pos:column="52">(<argument><expr><name pos:line="690" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<comment type="line" pos:line="693" pos:column="9">// vars for style of previous/current/next lines</comment>
	<decl_stmt><decl><type><name pos:line="694" pos:column="9">int</name></type> <name pos:line="694" pos:column="13">style</name> <init pos:line="694" pos:column="19">= <expr><call><name pos:line="694" pos:column="21">GetStyleFirstWord</name><argument_list pos:line="694" pos:column="38">(<argument><expr><name pos:line="694" pos:column="39">lineCurrent</name></expr></argument>,<argument><expr><name pos:line="694" pos:column="51">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="695" pos:column="9">int</name></type> <name pos:line="695" pos:column="13">stylePrev</name> <init pos:line="695" pos:column="23">= <expr><lit:literal type="number" pos:line="695" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="696" pos:column="9">// find the first previous line without continuation character at the end</comment>
	<while pos:line="697" pos:column="9">while <condition pos:line="697" pos:column="15">(<expr><op:operator pos:line="697" pos:column="16">(</op:operator><name pos:line="697" pos:column="17">lineCurrent</name> <op:operator pos:line="697" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="697" pos:column="31">0</lit:literal> <op:operator pos:line="697" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="697" pos:column="36">IsContinuationLine</name><argument_list pos:line="697" pos:column="54">(<argument><expr><name pos:line="697" pos:column="55">lineCurrent</name></expr></argument>,<argument><expr><name pos:line="697" pos:column="67">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="697" pos:column="74">)</op:operator> <op:operator pos:line="697" pos:column="76">||</op:operator>
	       <op:operator pos:line="698" pos:column="16">(</op:operator><name pos:line="698" pos:column="17">lineCurrent</name> <op:operator pos:line="698" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="698" pos:column="31">1</lit:literal> <op:operator pos:line="698" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="698" pos:column="36">IsContinuationLine</name><argument_list pos:line="698" pos:column="54">(<argument><expr><name pos:line="698" pos:column="55">lineCurrent</name><op:operator pos:line="698" pos:column="66">-</op:operator><lit:literal type="number" pos:line="698" pos:column="67">1</lit:literal></expr></argument>,<argument><expr><name pos:line="698" pos:column="69">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="698" pos:column="76">)</op:operator></expr>)</condition> <block pos:line="698" pos:column="79">{
		<expr_stmt><expr><name pos:line="699" pos:column="17">lineCurrent</name><op:operator pos:line="699" pos:column="28">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="700" pos:column="17">startPos</name> <op:operator pos:line="700" pos:column="26">=</op:operator> <call><name><name pos:line="700" pos:column="28">styler</name><op:operator pos:line="700" pos:column="34">.</op:operator><name pos:line="700" pos:column="35">LineStart</name></name><argument_list pos:line="700" pos:column="44">(<argument><expr><name pos:line="700" pos:column="45">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="702" pos:column="9">if <condition pos:line="702" pos:column="12">(<expr><name pos:line="702" pos:column="13">lineCurrent</name> <op:operator pos:line="702" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="702" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="702" pos:column="29"> <block pos:line="702" pos:column="30">{
		<expr_stmt><expr><name pos:line="703" pos:column="17">stylePrev</name> <op:operator pos:line="703" pos:column="27">=</op:operator> <call><name pos:line="703" pos:column="29">GetStyleFirstWord</name><argument_list pos:line="703" pos:column="46">(<argument><expr><name pos:line="703" pos:column="47">lineCurrent</name><op:operator pos:line="703" pos:column="58">-</op:operator><lit:literal type="number" pos:line="703" pos:column="59">1</lit:literal></expr></argument>,<argument><expr><name pos:line="703" pos:column="61">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="705" pos:column="9">// vars for getting first word to check for keywords</comment>
	<decl_stmt><decl><type><name pos:line="706" pos:column="9">bool</name></type> <name pos:line="706" pos:column="14">FirstWordStart</name> <init pos:line="706" pos:column="29">= <expr><lit:literal type="boolean" pos:line="706" pos:column="31">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="707" pos:column="9">bool</name></type> <name pos:line="707" pos:column="14">FirstWordEnd</name> <init pos:line="707" pos:column="27">= <expr><lit:literal type="boolean" pos:line="707" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="708" pos:column="9">char</name></type> <name><name pos:line="708" pos:column="14">szKeyword</name><index pos:line="708" pos:column="23">[<expr><lit:literal type="number" pos:line="708" pos:column="24">11</lit:literal></expr>]</index></name><init pos:line="708" pos:column="27">=<expr><lit:literal type="string" pos:line="708" pos:column="28">""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="709" pos:column="9">int</name></type>	 <name pos:line="709" pos:column="18">szKeywordlen</name> <init pos:line="709" pos:column="31">= <expr><lit:literal type="number" pos:line="709" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="710" pos:column="9">char</name></type> <name><name pos:line="710" pos:column="14">szThen</name><index pos:line="710" pos:column="20">[<expr><lit:literal type="number" pos:line="710" pos:column="21">5</lit:literal></expr>]</index></name><init pos:line="710" pos:column="23">=<expr><lit:literal type="string" pos:line="710" pos:column="24">""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="711" pos:column="9">int</name></type>	 <name pos:line="711" pos:column="18">szThenlen</name> <init pos:line="711" pos:column="28">= <expr><lit:literal type="number" pos:line="711" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="712" pos:column="9">bool</name></type> <name pos:line="712" pos:column="14">ThenFoundLast</name> <init pos:line="712" pos:column="28">= <expr><lit:literal type="boolean" pos:line="712" pos:column="30">false</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="713" pos:column="9">// var for indentlevel</comment>
	<decl_stmt><decl><type><name pos:line="714" pos:column="9">int</name></type> <name pos:line="714" pos:column="13">levelCurrent</name> <init pos:line="714" pos:column="26">= <expr><name pos:line="714" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="715" pos:column="9">if <condition pos:line="715" pos:column="12">(<expr><name pos:line="715" pos:column="13">lineCurrent</name> <op:operator pos:line="715" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="715" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="715" pos:column="29">
		<expr_stmt><expr><name pos:line="716" pos:column="17">levelCurrent</name> <op:operator pos:line="716" pos:column="30">=</op:operator> <call><name><name pos:line="716" pos:column="32">styler</name><op:operator pos:line="716" pos:column="38">.</op:operator><name pos:line="716" pos:column="39">LevelAt</name></name><argument_list pos:line="716" pos:column="46">(<argument><expr><name pos:line="716" pos:column="47">lineCurrent</name><op:operator pos:line="716" pos:column="58">-</op:operator><lit:literal type="number" pos:line="716" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="716" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="716" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="717" pos:column="9">int</name></type> <name pos:line="717" pos:column="13">levelNext</name> <init pos:line="717" pos:column="23">= <expr><name pos:line="717" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="718" pos:column="9">//</comment>
	<decl_stmt><decl><type><name pos:line="719" pos:column="9">int</name></type>	<name pos:line="719" pos:column="17">visibleChars</name> <init pos:line="719" pos:column="30">= <expr><lit:literal type="number" pos:line="719" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="720" pos:column="9">char</name></type> <name pos:line="720" pos:column="14">chNext</name> <init pos:line="720" pos:column="21">= <expr><call><name><name pos:line="720" pos:column="23">styler</name><op:operator pos:line="720" pos:column="29">.</op:operator><name pos:line="720" pos:column="30">SafeGetCharAt</name></name><argument_list pos:line="720" pos:column="43">(<argument><expr><name pos:line="720" pos:column="44">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="721" pos:column="9">char</name></type> <name pos:line="721" pos:column="14">chPrev</name> <init pos:line="721" pos:column="21">= <expr><lit:literal type="char" pos:line="721" pos:column="23">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="722" pos:column="9">//</comment>
	<for pos:line="723" pos:column="9">for (<init><decl><type><name pos:line="723" pos:column="14">int</name></type> <name pos:line="723" pos:column="18">i</name> <init pos:line="723" pos:column="20">= <expr><name pos:line="723" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="723" pos:column="32">i</name> <op:operator pos:line="723" pos:column="34">&lt;</op:operator> <name pos:line="723" pos:column="36">endPos</name></expr>;</condition> <incr><expr><name pos:line="723" pos:column="44">i</name><op:operator pos:line="723" pos:column="45">++</op:operator></expr></incr>) <block pos:line="723" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="724" pos:column="17">char</name></type> <name pos:line="724" pos:column="22">ch</name> <init pos:line="724" pos:column="25">= <expr><name pos:line="724" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="725" pos:column="17">chNext</name> <op:operator pos:line="725" pos:column="24">=</op:operator> <call><name><name pos:line="725" pos:column="26">styler</name><op:operator pos:line="725" pos:column="32">.</op:operator><name pos:line="725" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="725" pos:column="46">(<argument><expr><name pos:line="725" pos:column="47">i</name> <op:operator pos:line="725" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="725" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="726" pos:column="17">if <condition pos:line="726" pos:column="20">(<expr><call><name pos:line="726" pos:column="21">IsAWordChar</name><argument_list pos:line="726" pos:column="32">(<argument><expr><name pos:line="726" pos:column="33">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="726" pos:column="37"> <block pos:line="726" pos:column="38">{
			<expr_stmt><expr><name pos:line="727" pos:column="25">visibleChars</name><op:operator pos:line="727" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="729" pos:column="17">// get the syle for the current character neede to check in comment</comment>
		<decl_stmt><decl><type><name pos:line="730" pos:column="17">int</name></type> <name pos:line="730" pos:column="21">stylech</name> <init pos:line="730" pos:column="29">= <expr><call><name><name pos:line="730" pos:column="31">styler</name><op:operator pos:line="730" pos:column="37">.</op:operator><name pos:line="730" pos:column="38">StyleAt</name></name><argument_list pos:line="730" pos:column="45">(<argument><expr><name pos:line="730" pos:column="46">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="731" pos:column="17">// get first word for the line for indent check max 9 characters</comment>
		<if pos:line="732" pos:column="17">if <condition pos:line="732" pos:column="20">(<expr><name pos:line="732" pos:column="21">FirstWordStart</name> <op:operator pos:line="732" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="732" pos:column="39">(</op:operator><op:operator pos:line="732" pos:column="40">!</op:operator><op:operator pos:line="732" pos:column="41">(</op:operator><name pos:line="732" pos:column="42">FirstWordEnd</name><op:operator pos:line="732" pos:column="54">)</op:operator><op:operator pos:line="732" pos:column="55">)</op:operator></expr>)</condition><then pos:line="732" pos:column="57"> <block pos:line="732" pos:column="58">{
			<if pos:line="733" pos:column="25">if <condition pos:line="733" pos:column="28">(<expr><op:operator pos:line="733" pos:column="29">!</op:operator><call><name pos:line="733" pos:column="30">IsAWordChar</name><argument_list pos:line="733" pos:column="41">(<argument><expr><name pos:line="733" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="733" pos:column="46"> <block pos:line="733" pos:column="47">{
				<expr_stmt><expr><name pos:line="734" pos:column="33">FirstWordEnd</name> <op:operator pos:line="734" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="734" pos:column="48">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="735" pos:column="33">szKeyword</name><index pos:line="735" pos:column="42">[<expr><name pos:line="735" pos:column="43">szKeywordlen</name></expr>]</index></name> <op:operator pos:line="735" pos:column="57">=</op:operator> <lit:literal type="char" pos:line="735" pos:column="59">'\0'</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="737" pos:column="25">else <block pos:line="737" pos:column="30">{
				<if pos:line="738" pos:column="33">if <condition pos:line="738" pos:column="36">(<expr><name pos:line="738" pos:column="37">szKeywordlen</name> <op:operator pos:line="738" pos:column="50">&lt;</op:operator> <lit:literal type="number" pos:line="738" pos:column="52">10</lit:literal></expr>)</condition><then pos:line="738" pos:column="55"> <block pos:line="738" pos:column="56">{
				<expr_stmt><expr><name><name pos:line="739" pos:column="33">szKeyword</name><index pos:line="739" pos:column="42">[<expr><name pos:line="739" pos:column="43">szKeywordlen</name><op:operator pos:line="739" pos:column="55">++</op:operator></expr>]</index></name> <op:operator pos:line="739" pos:column="59">=</op:operator> <call><name><name pos:line="739" pos:column="61">static_cast</name><argument_list pos:line="739" pos:column="72">&lt;<argument><expr><name pos:line="739" pos:column="73">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="739" pos:column="78">(<argument><expr><call><name pos:line="739" pos:column="79">tolower</name><argument_list pos:line="739" pos:column="86">(<argument><expr><name pos:line="739" pos:column="87">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></else></if>
		}</block></then></if>
		<comment type="line" pos:line="743" pos:column="17">// start the capture of the first word</comment>
		<if pos:line="744" pos:column="17">if <condition pos:line="744" pos:column="20">(<expr><op:operator pos:line="744" pos:column="21">!</op:operator><op:operator pos:line="744" pos:column="22">(</op:operator><name pos:line="744" pos:column="23">FirstWordStart</name><op:operator pos:line="744" pos:column="37">)</op:operator></expr>)</condition><then pos:line="744" pos:column="39"> <block pos:line="744" pos:column="40">{
			<if pos:line="745" pos:column="25">if <condition pos:line="745" pos:column="28">(<expr><call><name pos:line="745" pos:column="29">IsAWordChar</name><argument_list pos:line="745" pos:column="40">(<argument><expr><name pos:line="745" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="745" pos:column="45">||</op:operator> <call><name pos:line="745" pos:column="48">IsAWordStart</name><argument_list pos:line="745" pos:column="60">(<argument><expr><name pos:line="745" pos:column="61">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="745" pos:column="65">||</op:operator> <name pos:line="745" pos:column="68">ch</name> <op:operator pos:line="745" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="745" pos:column="74">';'</lit:literal></expr>)</condition><then pos:line="745" pos:column="78"> <block pos:line="745" pos:column="79">{
				<expr_stmt><expr><name pos:line="746" pos:column="33">FirstWordStart</name> <op:operator pos:line="746" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="746" pos:column="50">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="747" pos:column="33">szKeyword</name><index pos:line="747" pos:column="42">[<expr><name pos:line="747" pos:column="43">szKeywordlen</name><op:operator pos:line="747" pos:column="55">++</op:operator></expr>]</index></name> <op:operator pos:line="747" pos:column="59">=</op:operator> <call><name><name pos:line="747" pos:column="61">static_cast</name><argument_list pos:line="747" pos:column="72">&lt;<argument><expr><name pos:line="747" pos:column="73">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="747" pos:column="78">(<argument><expr><call><name pos:line="747" pos:column="79">tolower</name><argument_list pos:line="747" pos:column="86">(<argument><expr><name pos:line="747" pos:column="87">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="750" pos:column="17">// only process this logic when not in comment section</comment>
		<if pos:line="751" pos:column="17">if <condition pos:line="751" pos:column="20">(<expr><op:operator pos:line="751" pos:column="21">!</op:operator><op:operator pos:line="751" pos:column="22">(</op:operator><name pos:line="751" pos:column="23">stylech</name> <op:operator pos:line="751" pos:column="31">==</op:operator> <name pos:line="751" pos:column="34">SCE_AU3_COMMENT</name><op:operator pos:line="751" pos:column="49">)</op:operator></expr>)</condition><then pos:line="751" pos:column="51"> <block pos:line="751" pos:column="52">{
			<if pos:line="752" pos:column="25">if <condition pos:line="752" pos:column="28">(<expr><name pos:line="752" pos:column="29">ThenFoundLast</name></expr>)</condition><then pos:line="752" pos:column="43"> <block pos:line="752" pos:column="44">{
				<if pos:line="753" pos:column="33">if <condition pos:line="753" pos:column="36">(<expr><call><name pos:line="753" pos:column="37">IsAWordChar</name><argument_list pos:line="753" pos:column="48">(<argument><expr><name pos:line="753" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="753" pos:column="53"> <block pos:line="753" pos:column="54">{
					<expr_stmt><expr><name pos:line="754" pos:column="41">ThenFoundLast</name> <op:operator pos:line="754" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="754" pos:column="57">false</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
			<comment type="line" pos:line="757" pos:column="25">// find out if the word "then" is the last on a "if" line</comment>
			<if pos:line="758" pos:column="25">if <condition pos:line="758" pos:column="28">(<expr><name pos:line="758" pos:column="29">FirstWordEnd</name> <op:operator pos:line="758" pos:column="42">&amp;&amp;</op:operator> <call><name pos:line="758" pos:column="45">strcmp</name><argument_list pos:line="758" pos:column="51">(<argument><expr><name pos:line="758" pos:column="52">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="758" pos:column="62">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="758" pos:column="68">==</op:operator> <lit:literal type="number" pos:line="758" pos:column="71">0</lit:literal></expr>)</condition><then pos:line="758" pos:column="73"> <block pos:line="758" pos:column="74">{
				<if pos:line="759" pos:column="33">if <condition pos:line="759" pos:column="36">(<expr><name pos:line="759" pos:column="37">szThenlen</name> <op:operator pos:line="759" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="759" pos:column="50">4</lit:literal></expr>)</condition><then pos:line="759" pos:column="52"> <block pos:line="759" pos:column="53">{
					<expr_stmt><expr><name><name pos:line="760" pos:column="41">szThen</name><index pos:line="760" pos:column="47">[<expr><lit:literal type="number" pos:line="760" pos:column="48">0</lit:literal></expr>]</index></name> <op:operator pos:line="760" pos:column="51">=</op:operator> <name><name pos:line="760" pos:column="53">szThen</name><index pos:line="760" pos:column="59">[<expr><lit:literal type="number" pos:line="760" pos:column="60">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="761" pos:column="41">szThen</name><index pos:line="761" pos:column="47">[<expr><lit:literal type="number" pos:line="761" pos:column="48">1</lit:literal></expr>]</index></name> <op:operator pos:line="761" pos:column="51">=</op:operator> <name><name pos:line="761" pos:column="53">szThen</name><index pos:line="761" pos:column="59">[<expr><lit:literal type="number" pos:line="761" pos:column="60">2</lit:literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="762" pos:column="41">szThen</name><index pos:line="762" pos:column="47">[<expr><lit:literal type="number" pos:line="762" pos:column="48">2</lit:literal></expr>]</index></name> <op:operator pos:line="762" pos:column="51">=</op:operator> <name><name pos:line="762" pos:column="53">szThen</name><index pos:line="762" pos:column="59">[<expr><lit:literal type="number" pos:line="762" pos:column="60">3</lit:literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="763" pos:column="41">szThen</name><index pos:line="763" pos:column="47">[<expr><lit:literal type="number" pos:line="763" pos:column="48">3</lit:literal></expr>]</index></name> <op:operator pos:line="763" pos:column="51">=</op:operator> <call><name><name pos:line="763" pos:column="53">static_cast</name><argument_list pos:line="763" pos:column="64">&lt;<argument><expr><name pos:line="763" pos:column="65">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="763" pos:column="70">(<argument><expr><call><name pos:line="763" pos:column="71">tolower</name><argument_list pos:line="763" pos:column="78">(<argument><expr><name pos:line="763" pos:column="79">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="764" pos:column="41">if <condition pos:line="764" pos:column="44">(<expr><call><name pos:line="764" pos:column="45">strcmp</name><argument_list pos:line="764" pos:column="51">(<argument><expr><name pos:line="764" pos:column="52">szThen</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="764" pos:column="59">"then"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="764" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="764" pos:column="70">0</lit:literal></expr> )</condition><then pos:line="764" pos:column="73"> <block pos:line="764" pos:column="74">{
						<expr_stmt><expr><name pos:line="765" pos:column="49">ThenFoundLast</name> <op:operator pos:line="765" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="765" pos:column="65">true</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then>
				<else pos:line="768" pos:column="33">else <block pos:line="768" pos:column="38">{
					<expr_stmt><expr><name><name pos:line="769" pos:column="41">szThen</name><index pos:line="769" pos:column="47">[<expr><name pos:line="769" pos:column="48">szThenlen</name><op:operator pos:line="769" pos:column="57">++</op:operator></expr>]</index></name> <op:operator pos:line="769" pos:column="61">=</op:operator> <call><name><name pos:line="769" pos:column="63">static_cast</name><argument_list pos:line="769" pos:column="74">&lt;<argument><expr><name pos:line="769" pos:column="75">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="769" pos:column="80">(<argument><expr><call><name pos:line="769" pos:column="81">tolower</name><argument_list pos:line="769" pos:column="88">(<argument><expr><name pos:line="769" pos:column="89">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="770" pos:column="41">if <condition pos:line="770" pos:column="44">(<expr><name pos:line="770" pos:column="45">szThenlen</name> <op:operator pos:line="770" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="770" pos:column="58">5</lit:literal></expr>)</condition><then pos:line="770" pos:column="60"> <block pos:line="770" pos:column="61">{
						<expr_stmt><expr><name><name pos:line="771" pos:column="49">szThen</name><index pos:line="771" pos:column="55">[<expr><lit:literal type="number" pos:line="771" pos:column="56">4</lit:literal></expr>]</index></name> <op:operator pos:line="771" pos:column="59">=</op:operator> <lit:literal type="char" pos:line="771" pos:column="61">'\0'</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if>
			}</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="776" pos:column="17">// End of Line found so process the information</comment>
		<if pos:line="777" pos:column="17">if <condition pos:line="777" pos:column="20">(<expr><op:operator pos:line="777" pos:column="21">(</op:operator><name pos:line="777" pos:column="22">ch</name> <op:operator pos:line="777" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="777" pos:column="28">'\r'</lit:literal> <op:operator pos:line="777" pos:column="33">&amp;&amp;</op:operator> <name pos:line="777" pos:column="36">chNext</name> <op:operator pos:line="777" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="777" pos:column="46">'\n'</lit:literal><op:operator pos:line="777" pos:column="50">)</op:operator> <op:operator pos:line="777" pos:column="52">||</op:operator> <op:operator pos:line="777" pos:column="55">(</op:operator><name pos:line="777" pos:column="56">ch</name> <op:operator pos:line="777" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="777" pos:column="62">'\n'</lit:literal><op:operator pos:line="777" pos:column="66">)</op:operator> <op:operator pos:line="777" pos:column="68">||</op:operator> <op:operator pos:line="777" pos:column="71">(</op:operator><name pos:line="777" pos:column="72">i</name> <op:operator pos:line="777" pos:column="74">==</op:operator> <name pos:line="777" pos:column="77">endPos</name><op:operator pos:line="777" pos:column="83">)</op:operator></expr>)</condition><then pos:line="777" pos:column="85"> <block pos:line="777" pos:column="86">{
			<comment type="line" pos:line="778" pos:column="25">// **************************</comment>
			<comment type="line" pos:line="779" pos:column="25">// Folding logic for Keywords</comment>
			<comment type="line" pos:line="780" pos:column="25">// **************************</comment>
			<comment type="line" pos:line="781" pos:column="25">// if a keyword is found on the current line and the line doesn't end with _ (continuation)</comment>
			<comment type="line" pos:line="782" pos:column="25">//    and we are not inside a commentblock.</comment>
			<if pos:line="783" pos:column="25">if <condition pos:line="783" pos:column="28">(<expr><name pos:line="783" pos:column="29">szKeywordlen</name> <op:operator pos:line="783" pos:column="42">&gt;</op:operator> <lit:literal type="number" pos:line="783" pos:column="44">0</lit:literal> <op:operator pos:line="783" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="783" pos:column="49">(</op:operator><op:operator pos:line="783" pos:column="50">!</op:operator><op:operator pos:line="783" pos:column="51">(</op:operator><name pos:line="783" pos:column="52">chPrev</name> <op:operator pos:line="783" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="783" pos:column="62">'_'</lit:literal><op:operator pos:line="783" pos:column="65">)</op:operator><op:operator pos:line="783" pos:column="66">)</op:operator> <op:operator pos:line="783" pos:column="68">&amp;&amp;</op:operator>
				<op:operator pos:line="784" pos:column="33">(</op:operator><op:operator pos:line="784" pos:column="34">(</op:operator><op:operator pos:line="784" pos:column="35">!</op:operator><op:operator pos:line="784" pos:column="36">(</op:operator><call><name pos:line="784" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="784" pos:column="57">(<argument><expr><name pos:line="784" pos:column="58">style</name></expr></argument>)</argument_list></call><op:operator pos:line="784" pos:column="64">)</op:operator> <op:operator pos:line="784" pos:column="66">||</op:operator> <name pos:line="784" pos:column="69">foldInComment</name><op:operator pos:line="784" pos:column="82">)</op:operator><op:operator pos:line="784" pos:column="83">)</op:operator></expr> )</condition><then pos:line="784" pos:column="86"> <block pos:line="784" pos:column="87">{
				<expr_stmt><expr><name><name pos:line="785" pos:column="33">szKeyword</name><index pos:line="785" pos:column="42">[<expr><name pos:line="785" pos:column="43">szKeywordlen</name></expr>]</index></name> <op:operator pos:line="785" pos:column="57">=</op:operator> <lit:literal type="char" pos:line="785" pos:column="59">'\0'</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="786" pos:column="33">// only fold "if" last keyword is "then"  (else its a one line if)</comment>
				<if pos:line="787" pos:column="33">if <condition pos:line="787" pos:column="36">(<expr><call><name pos:line="787" pos:column="37">strcmp</name><argument_list pos:line="787" pos:column="43">(<argument><expr><name pos:line="787" pos:column="44">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="787" pos:column="54">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="787" pos:column="60">==</op:operator> <lit:literal type="number" pos:line="787" pos:column="63">0</lit:literal>  <op:operator pos:line="787" pos:column="66">&amp;&amp;</op:operator> <name pos:line="787" pos:column="69">ThenFoundLast</name></expr>)</condition><then pos:line="787" pos:column="83"> <block pos:line="787" pos:column="84">{
						<expr_stmt><expr><name pos:line="788" pos:column="49">levelNext</name><op:operator pos:line="788" pos:column="58">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="790" pos:column="33">// create new fold for these words</comment>
				<if pos:line="791" pos:column="33">if <condition pos:line="791" pos:column="36">(<expr><call><name pos:line="791" pos:column="37">strcmp</name><argument_list pos:line="791" pos:column="43">(<argument><expr><name pos:line="791" pos:column="44">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="791" pos:column="54">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="791" pos:column="60">==</op:operator> <lit:literal type="number" pos:line="791" pos:column="63">0</lit:literal>   <op:operator pos:line="791" pos:column="67">||</op:operator> <call><name pos:line="791" pos:column="70">strcmp</name><argument_list pos:line="791" pos:column="76">(<argument><expr><name pos:line="791" pos:column="77">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="791" pos:column="87">"for"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="791" pos:column="94">==</op:operator> <lit:literal type="number" pos:line="791" pos:column="97">0</lit:literal> <op:operator pos:line="791" pos:column="99">||</op:operator>
					<call><name pos:line="792" pos:column="41">strcmp</name><argument_list pos:line="792" pos:column="47">(<argument><expr><name pos:line="792" pos:column="48">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="792" pos:column="58">"func"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="792" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="792" pos:column="69">0</lit:literal> <op:operator pos:line="792" pos:column="71">||</op:operator> <call><name pos:line="792" pos:column="74">strcmp</name><argument_list pos:line="792" pos:column="80">(<argument><expr><name pos:line="792" pos:column="81">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="792" pos:column="91">"while"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="792" pos:column="100">==</op:operator> <lit:literal type="number" pos:line="792" pos:column="103">0</lit:literal><op:operator pos:line="792" pos:column="104">||</op:operator>
					<call><name pos:line="793" pos:column="41">strcmp</name><argument_list pos:line="793" pos:column="47">(<argument><expr><name pos:line="793" pos:column="48">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="793" pos:column="58">"with"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="793" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="793" pos:column="69">0</lit:literal> <op:operator pos:line="793" pos:column="71">||</op:operator> <call><name pos:line="793" pos:column="74">strcmp</name><argument_list pos:line="793" pos:column="80">(<argument><expr><name pos:line="793" pos:column="81">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="793" pos:column="91">"#region"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="793" pos:column="102">==</op:operator> <lit:literal type="number" pos:line="793" pos:column="105">0</lit:literal></expr> )</condition><then pos:line="793" pos:column="108"> <block pos:line="793" pos:column="109">{
						<expr_stmt><expr><name pos:line="794" pos:column="49">levelNext</name><op:operator pos:line="794" pos:column="58">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="796" pos:column="33">// create double Fold for select&amp;switch because Case will subtract one of the current level</comment>
				<if pos:line="797" pos:column="33">if <condition pos:line="797" pos:column="36">(<expr><call><name pos:line="797" pos:column="37">strcmp</name><argument_list pos:line="797" pos:column="43">(<argument><expr><name pos:line="797" pos:column="44">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="797" pos:column="54">"select"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="797" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="797" pos:column="67">0</lit:literal> <op:operator pos:line="797" pos:column="69">||</op:operator> <call><name pos:line="797" pos:column="72">strcmp</name><argument_list pos:line="797" pos:column="78">(<argument><expr><name pos:line="797" pos:column="79">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="797" pos:column="89">"switch"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="797" pos:column="99">==</op:operator> <lit:literal type="number" pos:line="797" pos:column="102">0</lit:literal></expr>)</condition><then pos:line="797" pos:column="104"> <block pos:line="797" pos:column="105">{
						<expr_stmt><expr><name pos:line="798" pos:column="49">levelNext</name><op:operator pos:line="798" pos:column="58">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="799" pos:column="49">levelNext</name><op:operator pos:line="799" pos:column="58">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="801" pos:column="33">// end the fold for these words before the current line</comment>
				<if pos:line="802" pos:column="33">if <condition pos:line="802" pos:column="36">(<expr><call><name pos:line="802" pos:column="37">strcmp</name><argument_list pos:line="802" pos:column="43">(<argument><expr><name pos:line="802" pos:column="44">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="802" pos:column="54">"endfunc"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="802" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="802" pos:column="68">0</lit:literal> <op:operator pos:line="802" pos:column="70">||</op:operator> <call><name pos:line="802" pos:column="73">strcmp</name><argument_list pos:line="802" pos:column="79">(<argument><expr><name pos:line="802" pos:column="80">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="802" pos:column="90">"endif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="802" pos:column="99">==</op:operator> <lit:literal type="number" pos:line="802" pos:column="102">0</lit:literal> <op:operator pos:line="802" pos:column="104">||</op:operator>
					<call><name pos:line="803" pos:column="41">strcmp</name><argument_list pos:line="803" pos:column="47">(<argument><expr><name pos:line="803" pos:column="48">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="803" pos:column="58">"next"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="803" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="803" pos:column="69">0</lit:literal>    <op:operator pos:line="803" pos:column="74">||</op:operator> <call><name pos:line="803" pos:column="77">strcmp</name><argument_list pos:line="803" pos:column="83">(<argument><expr><name pos:line="803" pos:column="84">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="803" pos:column="94">"until"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="803" pos:column="103">==</op:operator> <lit:literal type="number" pos:line="803" pos:column="106">0</lit:literal> <op:operator pos:line="803" pos:column="108">||</op:operator>
					<call><name pos:line="804" pos:column="41">strcmp</name><argument_list pos:line="804" pos:column="47">(<argument><expr><name pos:line="804" pos:column="48">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="804" pos:column="58">"endwith"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="804" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="804" pos:column="72">0</lit:literal> <op:operator pos:line="804" pos:column="74">||</op:operator><call><name pos:line="804" pos:column="76">strcmp</name><argument_list pos:line="804" pos:column="82">(<argument><expr><name pos:line="804" pos:column="83">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="804" pos:column="93">"wend"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="804" pos:column="101">==</op:operator> <lit:literal type="number" pos:line="804" pos:column="104">0</lit:literal></expr>)</condition><then><block pos:line="804" pos:column="106">{
						<expr_stmt><expr><name pos:line="805" pos:column="49">levelNext</name><op:operator pos:line="805" pos:column="58">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="806" pos:column="49">levelCurrent</name><op:operator pos:line="806" pos:column="61">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="808" pos:column="33">// end the fold for these words before the current line and Start new fold</comment>
				<if pos:line="809" pos:column="33">if <condition pos:line="809" pos:column="36">(<expr><call><name pos:line="809" pos:column="37">strcmp</name><argument_list pos:line="809" pos:column="43">(<argument><expr><name pos:line="809" pos:column="44">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="809" pos:column="54">"case"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="809" pos:column="62">==</op:operator> <lit:literal type="number" pos:line="809" pos:column="65">0</lit:literal>      <op:operator pos:line="809" pos:column="72">||</op:operator> <call><name pos:line="809" pos:column="75">strcmp</name><argument_list pos:line="809" pos:column="81">(<argument><expr><name pos:line="809" pos:column="82">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="809" pos:column="92">"else"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="809" pos:column="100">==</op:operator> <lit:literal type="number" pos:line="809" pos:column="103">0</lit:literal> <op:operator pos:line="809" pos:column="105">||</op:operator>
					<call><name pos:line="810" pos:column="41">strcmp</name><argument_list pos:line="810" pos:column="47">(<argument><expr><name pos:line="810" pos:column="48">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="810" pos:column="58">"elseif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="810" pos:column="68">==</op:operator> <lit:literal type="number" pos:line="810" pos:column="71">0</lit:literal></expr> )</condition><then pos:line="810" pos:column="74"> <block pos:line="810" pos:column="75">{
						<expr_stmt><expr><name pos:line="811" pos:column="49">levelCurrent</name><op:operator pos:line="811" pos:column="61">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="813" pos:column="33">// end the double fold for this word before the current line</comment>
				<if pos:line="814" pos:column="33">if <condition pos:line="814" pos:column="36">(<expr><call><name pos:line="814" pos:column="37">strcmp</name><argument_list pos:line="814" pos:column="43">(<argument><expr><name pos:line="814" pos:column="44">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="814" pos:column="54">"endselect"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="814" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="814" pos:column="70">0</lit:literal> <op:operator pos:line="814" pos:column="72">||</op:operator> <call><name pos:line="814" pos:column="75">strcmp</name><argument_list pos:line="814" pos:column="81">(<argument><expr><name pos:line="814" pos:column="82">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="814" pos:column="92">"endswitch"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="814" pos:column="105">==</op:operator> <lit:literal type="number" pos:line="814" pos:column="108">0</lit:literal></expr> )</condition><then pos:line="814" pos:column="111"> <block pos:line="814" pos:column="112">{
						<expr_stmt><expr><name pos:line="815" pos:column="49">levelNext</name><op:operator pos:line="815" pos:column="58">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="816" pos:column="49">levelNext</name><op:operator pos:line="816" pos:column="58">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="817" pos:column="49">levelCurrent</name><op:operator pos:line="817" pos:column="61">--</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="818" pos:column="49">levelCurrent</name><op:operator pos:line="818" pos:column="61">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line" pos:line="820" pos:column="33">// end the fold for these words on the current line</comment>
				<if pos:line="821" pos:column="33">if <condition pos:line="821" pos:column="36">(<expr><call><name pos:line="821" pos:column="37">strcmp</name><argument_list pos:line="821" pos:column="43">(<argument><expr><name pos:line="821" pos:column="44">szKeyword</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="821" pos:column="54">"#endregion"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="821" pos:column="68">==</op:operator> <lit:literal type="number" pos:line="821" pos:column="71">0</lit:literal></expr> )</condition><then pos:line="821" pos:column="74"> <block pos:line="821" pos:column="75">{
						<expr_stmt><expr><name pos:line="822" pos:column="49">levelNext</name><op:operator pos:line="822" pos:column="58">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
			<comment type="line" pos:line="825" pos:column="25">// Preprocessor and Comment folding</comment>
			<decl_stmt><decl><type><name pos:line="826" pos:column="25">int</name></type> <name pos:line="826" pos:column="29">styleNext</name> <init pos:line="826" pos:column="39">= <expr><call><name pos:line="826" pos:column="41">GetStyleFirstWord</name><argument_list pos:line="826" pos:column="58">(<argument><expr><name pos:line="826" pos:column="59">lineCurrent</name> <op:operator pos:line="826" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="826" pos:column="73">1</lit:literal></expr></argument>,<argument><expr><name pos:line="826" pos:column="75">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="827" pos:column="25">// *************************************</comment>
			<comment type="line" pos:line="828" pos:column="25">// Folding logic for preprocessor blocks</comment>
			<comment type="line" pos:line="829" pos:column="25">// *************************************</comment>
			<comment type="line" pos:line="830" pos:column="25">// process preprosessor line</comment>
			<if pos:line="831" pos:column="25">if <condition pos:line="831" pos:column="28">(<expr><name pos:line="831" pos:column="29">foldpreprocessor</name> <op:operator pos:line="831" pos:column="46">&amp;&amp;</op:operator> <name pos:line="831" pos:column="49">style</name> <op:operator pos:line="831" pos:column="55">==</op:operator> <name pos:line="831" pos:column="58">SCE_AU3_PREPROCESSOR</name></expr>)</condition><then pos:line="831" pos:column="79"> <block pos:line="831" pos:column="80">{
				<if pos:line="832" pos:column="33">if <condition pos:line="832" pos:column="36">(<expr><op:operator pos:line="832" pos:column="37">!</op:operator><op:operator pos:line="832" pos:column="38">(</op:operator><name pos:line="832" pos:column="39">stylePrev</name> <op:operator pos:line="832" pos:column="49">==</op:operator> <name pos:line="832" pos:column="52">SCE_AU3_PREPROCESSOR</name><op:operator pos:line="832" pos:column="72">)</op:operator> <op:operator pos:line="832" pos:column="74">&amp;&amp;</op:operator> <op:operator pos:line="832" pos:column="77">(</op:operator><name pos:line="832" pos:column="78">styleNext</name> <op:operator pos:line="832" pos:column="88">==</op:operator> <name pos:line="832" pos:column="91">SCE_AU3_PREPROCESSOR</name><op:operator pos:line="832" pos:column="111">)</op:operator></expr>)</condition><then pos:line="832" pos:column="113"> <block pos:line="832" pos:column="114">{
				    <expr_stmt><expr><name pos:line="833" pos:column="37">levelNext</name><op:operator pos:line="833" pos:column="46">++</op:operator></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="835" pos:column="33">// fold till the last line for normal comment lines</comment>
				<else pos:line="836" pos:column="33">else <if pos:line="836" pos:column="38">if <condition pos:line="836" pos:column="41">(<expr><name pos:line="836" pos:column="42">stylePrev</name> <op:operator pos:line="836" pos:column="52">==</op:operator> <name pos:line="836" pos:column="55">SCE_AU3_PREPROCESSOR</name> <op:operator pos:line="836" pos:column="76">&amp;&amp;</op:operator> <op:operator pos:line="836" pos:column="79">!</op:operator><op:operator pos:line="836" pos:column="80">(</op:operator><name pos:line="836" pos:column="81">styleNext</name> <op:operator pos:line="836" pos:column="91">==</op:operator> <name pos:line="836" pos:column="94">SCE_AU3_PREPROCESSOR</name><op:operator pos:line="836" pos:column="114">)</op:operator></expr>)</condition><then pos:line="836" pos:column="116"> <block pos:line="836" pos:column="117">{
					<expr_stmt><expr><name pos:line="837" pos:column="41">levelNext</name><op:operator pos:line="837" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
			<comment type="line" pos:line="840" pos:column="25">// *********************************</comment>
			<comment type="line" pos:line="841" pos:column="25">// Folding logic for Comment blocks</comment>
			<comment type="line" pos:line="842" pos:column="25">// *********************************</comment>
			<if pos:line="843" pos:column="25">if <condition pos:line="843" pos:column="28">(<expr><name pos:line="843" pos:column="29">foldComment</name> <op:operator pos:line="843" pos:column="41">&amp;&amp;</op:operator> <call><name pos:line="843" pos:column="44">IsStreamCommentStyle</name><argument_list pos:line="843" pos:column="64">(<argument><expr><name pos:line="843" pos:column="65">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="843" pos:column="72"> <block pos:line="843" pos:column="73">{
				<comment type="line" pos:line="844" pos:column="33">// Start of a comment block</comment>
				<if pos:line="845" pos:column="33">if <condition pos:line="845" pos:column="36">(<expr><op:operator pos:line="845" pos:column="37">!</op:operator><op:operator pos:line="845" pos:column="38">(</op:operator><name pos:line="845" pos:column="39">stylePrev</name><op:operator pos:line="845" pos:column="48">==</op:operator><name pos:line="845" pos:column="50">style</name><op:operator pos:line="845" pos:column="55">)</op:operator> <op:operator pos:line="845" pos:column="57">&amp;&amp;</op:operator> <call><name pos:line="845" pos:column="60">IsStreamCommentStyle</name><argument_list pos:line="845" pos:column="80">(<argument><expr><name pos:line="845" pos:column="81">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="845" pos:column="92">&amp;&amp;</op:operator> <name pos:line="845" pos:column="95">styleNext</name><op:operator pos:line="845" pos:column="104">==</op:operator><name pos:line="845" pos:column="106">style</name></expr>)</condition><then pos:line="845" pos:column="112"> <block pos:line="845" pos:column="113">{
				    <expr_stmt><expr><name pos:line="846" pos:column="37">levelNext</name><op:operator pos:line="846" pos:column="46">++</op:operator></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="848" pos:column="33">// fold till the last line for normal comment lines</comment>
				<else pos:line="849" pos:column="33">else <if pos:line="849" pos:column="38">if <condition pos:line="849" pos:column="41">(<expr><call><name pos:line="849" pos:column="42">IsStreamCommentStyle</name><argument_list pos:line="849" pos:column="62">(<argument><expr><name pos:line="849" pos:column="63">stylePrev</name></expr></argument>)</argument_list></call>
						<op:operator pos:line="850" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="850" pos:column="52">!</op:operator><op:operator pos:line="850" pos:column="53">(</op:operator><name pos:line="850" pos:column="54">styleNext</name> <op:operator pos:line="850" pos:column="64">==</op:operator> <name pos:line="850" pos:column="67">SCE_AU3_COMMENT</name><op:operator pos:line="850" pos:column="82">)</op:operator>
						<op:operator pos:line="851" pos:column="49">&amp;&amp;</op:operator> <name pos:line="851" pos:column="52">stylePrev</name> <op:operator pos:line="851" pos:column="62">==</op:operator> <name pos:line="851" pos:column="65">SCE_AU3_COMMENT</name>
						<op:operator pos:line="852" pos:column="49">&amp;&amp;</op:operator> <name pos:line="852" pos:column="52">style</name> <op:operator pos:line="852" pos:column="58">==</op:operator> <name pos:line="852" pos:column="61">SCE_AU3_COMMENT</name></expr>)</condition><then pos:line="852" pos:column="77"> <block pos:line="852" pos:column="78">{
					<expr_stmt><expr><name pos:line="853" pos:column="41">levelNext</name><op:operator pos:line="853" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then>
				<comment type="line" pos:line="855" pos:column="33">// fold till the one but last line for Blockcomment lines</comment>
				<else pos:line="856" pos:column="33">else <if pos:line="856" pos:column="38">if <condition pos:line="856" pos:column="41">(<expr><call><name pos:line="856" pos:column="42">IsStreamCommentStyle</name><argument_list pos:line="856" pos:column="62">(<argument><expr><name pos:line="856" pos:column="63">stylePrev</name></expr></argument>)</argument_list></call>
						<op:operator pos:line="857" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="857" pos:column="52">!</op:operator><op:operator pos:line="857" pos:column="53">(</op:operator><name pos:line="857" pos:column="54">styleNext</name> <op:operator pos:line="857" pos:column="64">==</op:operator> <name pos:line="857" pos:column="67">SCE_AU3_COMMENTBLOCK</name><op:operator pos:line="857" pos:column="87">)</op:operator>
						<op:operator pos:line="858" pos:column="49">&amp;&amp;</op:operator> <name pos:line="858" pos:column="52">style</name> <op:operator pos:line="858" pos:column="58">==</op:operator> <name pos:line="858" pos:column="61">SCE_AU3_COMMENTBLOCK</name></expr>)</condition><then pos:line="858" pos:column="82"> <block pos:line="858" pos:column="83">{
					<expr_stmt><expr><name pos:line="859" pos:column="41">levelNext</name><op:operator pos:line="859" pos:column="50">--</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="860" pos:column="41">levelCurrent</name><op:operator pos:line="860" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="863" pos:column="25">int</name></type> <name pos:line="863" pos:column="29">levelUse</name> <init pos:line="863" pos:column="38">= <expr><name pos:line="863" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="864" pos:column="25">int</name></type> <name pos:line="864" pos:column="29">lev</name> <init pos:line="864" pos:column="33">= <expr><name pos:line="864" pos:column="35">levelUse</name> <op:operator pos:line="864" pos:column="44">|</op:operator> <name pos:line="864" pos:column="46">levelNext</name> <op:operator pos:line="864" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="864" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="865" pos:column="25">if <condition pos:line="865" pos:column="28">(<expr><name pos:line="865" pos:column="29">visibleChars</name> <op:operator pos:line="865" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="865" pos:column="45">0</lit:literal> <op:operator pos:line="865" pos:column="47">&amp;&amp;</op:operator> <name pos:line="865" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="865" pos:column="62">
				<expr_stmt><expr><name pos:line="866" pos:column="33">lev</name> <op:operator pos:line="866" pos:column="37">|=</op:operator> <name pos:line="866" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="867" pos:column="25">if <condition pos:line="867" pos:column="28">(<expr><name pos:line="867" pos:column="29">levelUse</name> <op:operator pos:line="867" pos:column="38">&lt;</op:operator> <name pos:line="867" pos:column="40">levelNext</name></expr>)</condition><then pos:line="867" pos:column="50"> <block pos:line="867" pos:column="51">{
				<expr_stmt><expr><name pos:line="868" pos:column="33">lev</name> <op:operator pos:line="868" pos:column="37">|=</op:operator> <name pos:line="868" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="870" pos:column="25">if <condition pos:line="870" pos:column="28">(<expr><name pos:line="870" pos:column="29">lev</name> <op:operator pos:line="870" pos:column="33">!=</op:operator> <call><name><name pos:line="870" pos:column="36">styler</name><op:operator pos:line="870" pos:column="42">.</op:operator><name pos:line="870" pos:column="43">LevelAt</name></name><argument_list pos:line="870" pos:column="50">(<argument><expr><name pos:line="870" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="870" pos:column="64"> <block pos:line="870" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="871" pos:column="33">styler</name><op:operator pos:line="871" pos:column="39">.</op:operator><name pos:line="871" pos:column="40">SetLevel</name></name><argument_list pos:line="871" pos:column="48">(<argument><expr><name pos:line="871" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="871" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="873" pos:column="25">// reset values for the next line</comment>
			<expr_stmt><expr><name pos:line="874" pos:column="25">lineCurrent</name><op:operator pos:line="874" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="875" pos:column="25">stylePrev</name> <op:operator pos:line="875" pos:column="35">=</op:operator> <name pos:line="875" pos:column="37">style</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="876" pos:column="25">style</name> <op:operator pos:line="876" pos:column="31">=</op:operator> <name pos:line="876" pos:column="33">styleNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="877" pos:column="25">levelCurrent</name> <op:operator pos:line="877" pos:column="38">=</op:operator> <name pos:line="877" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="878" pos:column="25">visibleChars</name> <op:operator pos:line="878" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="878" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<comment type="line" pos:line="879" pos:column="25">// if the last character is an Underscore then don't reset since the line continues on the next line.</comment>
			<if pos:line="880" pos:column="25">if <condition pos:line="880" pos:column="28">(<expr><op:operator pos:line="880" pos:column="29">!</op:operator><op:operator pos:line="880" pos:column="30">(</op:operator><name pos:line="880" pos:column="31">chPrev</name> <op:operator pos:line="880" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="880" pos:column="41">'_'</lit:literal><op:operator pos:line="880" pos:column="44">)</op:operator></expr>)</condition><then pos:line="880" pos:column="46"> <block pos:line="880" pos:column="47">{
				<expr_stmt><expr><name pos:line="881" pos:column="33">szKeywordlen</name> <op:operator pos:line="881" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="881" pos:column="48">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="882" pos:column="33">szThenlen</name> <op:operator pos:line="882" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="882" pos:column="45">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="883" pos:column="33">FirstWordStart</name> <op:operator pos:line="883" pos:column="48">=</op:operator> <lit:literal type="boolean" pos:line="883" pos:column="50">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="884" pos:column="33">FirstWordEnd</name> <op:operator pos:line="884" pos:column="46">=</op:operator> <lit:literal type="boolean" pos:line="884" pos:column="48">false</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="885" pos:column="33">ThenFoundLast</name> <op:operator pos:line="885" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="885" pos:column="49">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="888" pos:column="17">// save the last processed character</comment>
		<if pos:line="889" pos:column="17">if <condition pos:line="889" pos:column="20">(<expr><op:operator pos:line="889" pos:column="21">!</op:operator><call><name pos:line="889" pos:column="22">isspacechar</name><argument_list pos:line="889" pos:column="33">(<argument><expr><name pos:line="889" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="889" pos:column="38"> <block pos:line="889" pos:column="39">{
			<expr_stmt><expr><name pos:line="890" pos:column="25">chPrev</name> <op:operator pos:line="890" pos:column="32">=</op:operator> <name pos:line="890" pos:column="34">ch</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="891" pos:column="25">visibleChars</name><op:operator pos:line="891" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>


<comment type="line" pos:line="897" pos:column="1">//</comment>

<decl_stmt><decl><type><specifier pos:line="899" pos:column="1">static</specifier> <specifier pos:line="899" pos:column="8">const</specifier> <name pos:line="899" pos:column="14">char</name> <type:modifier pos:line="899" pos:column="19">*</type:modifier> <specifier pos:line="899" pos:column="21">const</specifier></type> <name><name pos:line="899" pos:column="27">AU3WordLists</name><index pos:line="899" pos:column="39">[]</index></name> <init pos:line="899" pos:column="42">= <expr><block pos:line="899" pos:column="44">{
    <expr><lit:literal type="string" pos:line="900" pos:column="5">"#autoit keywords"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="901" pos:column="5">"#autoit functions"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="902" pos:column="5">"#autoit macros"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="903" pos:column="5">"#autoit Sent keys"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="904" pos:column="5">"#autoit Pre-processors"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="905" pos:column="5">"#autoit Special"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="906" pos:column="5">"#autoit Expand"</lit:literal></expr>,
    <expr><lit:literal type="string" pos:line="907" pos:column="5">"#autoit UDF"</lit:literal></expr>,
    <expr><lit:literal type="number" pos:line="908" pos:column="5">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="910" pos:column="1">LexerModule</name></type> <name pos:line="910" pos:column="13">lmAU3</name><argument_list pos:line="910" pos:column="18">(<argument><expr><name pos:line="910" pos:column="19">SCLEX_AU3</name></expr></argument>, <argument><expr><name pos:line="910" pos:column="30">ColouriseAU3Doc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="910" pos:column="47">"au3"</lit:literal></expr></argument>, <argument><expr><name pos:line="910" pos:column="54">FoldAU3Doc</name></expr></argument> , <argument><expr><name pos:line="910" pos:column="67">AU3WordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
