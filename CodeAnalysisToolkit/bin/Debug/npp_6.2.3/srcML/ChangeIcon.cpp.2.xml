<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\tools\ChangeIcon\ChangeIcon.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Replace an icon group in an executable by one from an ICO file</comment>
<comment type="line" pos:line="2" pos:column="1">// By Francois-R.Boyer@PolyMtl.ca for Notepad++</comment>
<comment type="line" pos:line="3" pos:column="1">// 2010-11-20</comment>
<comment type="line" pos:line="4" pos:column="1">//</comment>
<comment type="line" pos:line="5" pos:column="1">// This code is based on: Maria Nadejde, "Replacing ICON resources in EXE and DLL files", The Code Project, 13 Nov 2008</comment>
<comment type="line" pos:line="6" pos:column="1">//     ( http://www.codeproject.com/KB/DLL/ICON_Resources.aspx )</comment>
<comment type="line" pos:line="7" pos:column="1">//     original article and code is licenced under The GNU General Public License (GPLv3)</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">//</comment>
<comment type="line" pos:line="10" pos:column="1">// this file is part of ChangeIcon</comment>
<comment type="line" pos:line="11" pos:column="1">// Copyright (C)2010 Francois-R Boyer &lt;Francois-R.Boyer@PolyMtl.ca&gt;</comment>
<comment type="line" pos:line="12" pos:column="1">//</comment>
<comment type="line" pos:line="13" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="14" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="15" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="16" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="17" pos:column="1">//</comment>
<comment type="line" pos:line="18" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="19" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="20" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="21" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="22" pos:column="1">//</comment>
<comment type="line" pos:line="23" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="24" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="25" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifndef</cpp:directive> <name pos:line="28" pos:column="9">UNICODE</name></cpp:ifndef>
<cpp:define pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="29" pos:column="9">UNICODE</name></cpp:macro></cpp:define>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">_UNICODE</name></cpp:ifndef>
<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">_UNICODE</name></cpp:macro></cpp:define>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file pos:line="36" pos:column="10">&lt;tchar.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file pos:line="37" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file pos:line="38" pos:column="10">&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file pos:line="39" pos:column="10">&lt;stddef.h&gt;</cpp:file></cpp:include>		<comment type="line" pos:line="39" pos:column="33">// for offsetof</comment>

<cpp:ifdef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifdef</cpp:directive> <name pos:line="41" pos:column="8">_DEBUG</name></cpp:ifdef>
<cpp:define pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="42" pos:column="9">IFDEBUG</name><parameter_list pos:line="42" pos:column="16">(<param><type><name pos:line="42" pos:column="17">x</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="42" pos:column="20">x</cpp:value></cpp:define>
<cpp:else pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="44" pos:column="9">IFDEBUG</name><parameter_list pos:line="44" pos:column="16">(<param><type><name pos:line="44" pos:column="17">x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="47" pos:column="1">BOOL</name></type> <name pos:line="47" pos:column="6">getMaxIconId_EnumNamesFunc</name><parameter_list pos:line="47" pos:column="32">(<param><decl><type><name pos:line="47" pos:column="33">HANDLE</name></type> <name pos:line="47" pos:column="40">hModule</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="49">LPCTSTR</name></type> <name pos:line="47" pos:column="57">lpType</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="65">LPTSTR</name></type> <name pos:line="47" pos:column="72">lpName</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="80">WORD</name><type:modifier pos:line="47" pos:column="84">*</type:modifier></type> <name pos:line="47" pos:column="86">lpMaxID</name></decl></param>)</parameter_list>  
<block pos:line="48" pos:column="1">{ 
	<if pos:line="49" pos:column="9">if<condition pos:line="49" pos:column="11">(<expr><call><name pos:line="49" pos:column="12">IS_INTRESOURCE</name><argument_list pos:line="49" pos:column="26">(<argument><expr><name pos:line="49" pos:column="27">lpName</name></expr></argument>)</argument_list></call> <op:operator pos:line="49" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="49" pos:column="38">(</op:operator><name pos:line="49" pos:column="39">USHORT</name><op:operator pos:line="49" pos:column="45">)</op:operator><name pos:line="49" pos:column="46">lpName</name><op:operator pos:line="49" pos:column="52">&gt;</op:operator><op:operator pos:line="49" pos:column="53">*</op:operator><name pos:line="49" pos:column="54">lpMaxID</name></expr>)</condition><then pos:line="49" pos:column="62">
		<expr_stmt><expr><op:operator pos:line="50" pos:column="17">*</op:operator><name pos:line="50" pos:column="18">lpMaxID</name><op:operator pos:line="50" pos:column="25">=</op:operator><op:operator pos:line="50" pos:column="26">(</op:operator><name pos:line="50" pos:column="27">USHORT</name><op:operator pos:line="50" pos:column="33">)</op:operator><name pos:line="50" pos:column="34">lpName</name></expr>;</expr_stmt></then></if>
	<return pos:line="51" pos:column="9">return <expr><lit:literal type="boolean" pos:line="51" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="54" pos:column="1">WORD</name></type> <name pos:line="54" pos:column="6">getMaxIconId</name><parameter_list pos:line="54" pos:column="18">(<param><decl><type><name pos:line="54" pos:column="19">TCHAR</name><type:modifier pos:line="54" pos:column="24">*</type:modifier></type> <name pos:line="54" pos:column="26">lpFileName</name></decl></param>)</parameter_list>
<block pos:line="55" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">WORD</name></type> <name pos:line="56" pos:column="14">nMaxID</name> <init pos:line="56" pos:column="21">= <expr><lit:literal type="number" pos:line="56" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">HINSTANCE</name></type> <name pos:line="57" pos:column="19">hLib</name> <init pos:line="57" pos:column="24">= <expr><call><name pos:line="57" pos:column="26">LoadLibraryEx</name><argument_list pos:line="57" pos:column="39">(<argument><expr><name pos:line="57" pos:column="40">lpFileName</name></expr></argument>,<argument><expr><name pos:line="57" pos:column="51">NULL</name></expr></argument>,<argument><expr><name pos:line="57" pos:column="56">DONT_RESOLVE_DLL_REFERENCES</name> <op:operator pos:line="57" pos:column="84">|</op:operator> <name pos:line="57" pos:column="86">LOAD_LIBRARY_AS_DATAFILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="58" pos:column="9">if<condition pos:line="58" pos:column="11">(<expr><name pos:line="58" pos:column="12">hLib</name> <op:operator pos:line="58" pos:column="17">==</op:operator> <name pos:line="58" pos:column="20">NULL</name></expr>)</condition><then pos:line="58" pos:column="25"> <block pos:line="58" pos:column="26">{ <expr_stmt><expr><call><name pos:line="58" pos:column="28">_tprintf</name><argument_list pos:line="58" pos:column="36">(<argument><expr><call><name pos:line="58" pos:column="37">_T</name><argument_list pos:line="58" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="58" pos:column="40">"Unable to load library '%s'\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="58" pos:column="74">lpFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="58" pos:column="87">return <expr><lit:literal type="number" pos:line="58" pos:column="94">0xFFFF</lit:literal></expr>;</return> }</block></then></if>
	<comment type="line" pos:line="59" pos:column="9">// Enumerate icon "names" (IDs) to get next available ID</comment>
	<if pos:line="60" pos:column="9">if<condition pos:line="60" pos:column="11">(<expr><op:operator pos:line="60" pos:column="12">!</op:operator><call><name pos:line="60" pos:column="13">EnumResourceNames</name><argument_list pos:line="60" pos:column="30">(<argument><expr><name pos:line="60" pos:column="31">hLib</name></expr></argument>, <argument><expr><name pos:line="60" pos:column="37">RT_ICON</name></expr></argument>, <argument><expr><op:operator pos:line="60" pos:column="46">(</op:operator><name pos:line="60" pos:column="47">ENUMRESNAMEPROC</name><op:operator pos:line="60" pos:column="62">)</op:operator><name pos:line="60" pos:column="63">getMaxIconId_EnumNamesFunc</name></expr></argument>,<argument><expr><op:operator pos:line="60" pos:column="90">(</op:operator><name pos:line="60" pos:column="91">LONG_PTR</name><op:operator pos:line="60" pos:column="99">)</op:operator><op:operator pos:line="60" pos:column="100">&amp;</op:operator><name pos:line="60" pos:column="101">nMaxID</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="60" pos:column="109"> <block pos:line="60" pos:column="110">{ <expr_stmt><expr><call><name pos:line="60" pos:column="112">_tprintf</name><argument_list pos:line="60" pos:column="120">(<argument><expr><call><name pos:line="60" pos:column="121">_T</name><argument_list pos:line="60" pos:column="123">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="124">"Unable to enum icons\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="60" pos:column="152">return <expr><lit:literal type="number" pos:line="60" pos:column="159">0xFFFF</lit:literal></expr>;</return> }</block></then></if>	
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">FreeLibrary</name><argument_list pos:line="61" pos:column="20">(<argument><expr><name pos:line="61" pos:column="21">hLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name pos:line="62" pos:column="9">IFDEBUG</name><argument_list pos:line="62" pos:column="16">( <argument pos:line="62" pos:column="18">_tprintf(_T("MaxIcon=%d\n"), nMaxID);</argument> )</argument_list></macro>
	<return pos:line="63" pos:column="9">return <expr><name pos:line="63" pos:column="16">nMaxID</name></expr>;</return>
}</block></function>

<class pos:line="66" pos:column="1">class <name pos:line="66" pos:column="7">Icon</name> <block pos:line="66" pos:column="12">{<private type="default" pos:line="66" pos:column="13">
</private><public pos:line="67" pos:column="1">public:
	<comment type="line" pos:line="68" pos:column="9">// Icon format from http://msdn.microsoft.com/en-us/library/ms997538.aspx</comment>
	<comment type="line" pos:line="69" pos:column="9">// for ICO and EXE files</comment>
	<struct pos:line="70" pos:column="9">struct <name pos:line="70" pos:column="16">ICONDIR</name> <block pos:line="70" pos:column="24">{<public type="default" pos:line="70" pos:column="25">			<comment type="line" pos:line="70" pos:column="49">// File header:</comment>
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">WORD</name></type>	<name pos:line="71" pos:column="25">idReserved</name></decl>;</decl_stmt>		<comment type="line" pos:line="71" pos:column="49">// Reserved (must be 0)</comment>
		<decl_stmt><decl><type><name pos:line="72" pos:column="17">WORD</name></type>	<name pos:line="72" pos:column="25">idType</name></decl>;</decl_stmt>			<comment type="line" pos:line="72" pos:column="49">// Resource Type (1 for icons)</comment>
		<decl_stmt><decl><type><name pos:line="73" pos:column="17">WORD</name></type>	<name pos:line="73" pos:column="25">idCount</name></decl>;</decl_stmt>		<comment type="line" pos:line="73" pos:column="49">// How many images?</comment>
	</public>}</block>;</struct>
	<struct pos:line="75" pos:column="9">struct <name pos:line="75" pos:column="16">ICONDIRENTRY</name> <block pos:line="75" pos:column="29">{<public type="default" pos:line="75" pos:column="30">		<comment type="line" pos:line="75" pos:column="41">// One for each image:</comment>
		<decl_stmt><decl><type><name pos:line="76" pos:column="17">BYTE</name></type>	<name pos:line="76" pos:column="25">bWidth</name></decl>;</decl_stmt>			<comment type="line" pos:line="76" pos:column="49">// Width, in piexels, of the image</comment>
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">BYTE</name></type>	<name pos:line="77" pos:column="25">bHeight</name></decl>;</decl_stmt>		<comment type="line" pos:line="77" pos:column="49">// Height, in pixels, of the image (times 2)</comment>
		<decl_stmt><decl><type><name pos:line="78" pos:column="17">BYTE</name></type>	<name pos:line="78" pos:column="25">bColorCount</name></decl>;</decl_stmt>	<comment type="line" pos:line="78" pos:column="41">// Number of colors in image (0 if &gt;=8bpp)</comment>
		<decl_stmt><decl><type><name pos:line="79" pos:column="17">BYTE</name></type>	<name pos:line="79" pos:column="25">bReserved</name></decl>;</decl_stmt>		<comment type="line" pos:line="79" pos:column="49">// Reserved (must be 0)</comment>
		<decl_stmt><decl><type><name pos:line="80" pos:column="17">WORD</name></type>	<name pos:line="80" pos:column="25">wPlanes</name></decl>;</decl_stmt>		<comment type="line" pos:line="80" pos:column="49">// Color Planes</comment>
		<decl_stmt><decl><type><name pos:line="81" pos:column="17">WORD</name></type>	<name pos:line="81" pos:column="25">wBitCount</name></decl>;</decl_stmt>		<comment type="line" pos:line="81" pos:column="49">// Bits per pixel</comment>
		<decl_stmt><decl><type><name pos:line="82" pos:column="17">DWORD</name></type>	<name pos:line="82" pos:column="25">dwBytesInRes</name></decl>;</decl_stmt>	<comment type="line" pos:line="82" pos:column="41">// How many bytes in this resource?</comment>
		<union pos:line="83" pos:column="17">union <block pos:line="83" pos:column="23">{<public type="default" pos:line="83" pos:column="24">
			<decl_stmt><decl><type><name pos:line="84" pos:column="25">DWORD</name></type>	<name pos:line="84" pos:column="33">dwImageOffset</name></decl>;</decl_stmt><comment type="line" pos:line="84" pos:column="47">// Where in the file is this image  (in ICO file)</comment>
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">WORD</name></type>	<name pos:line="85" pos:column="33">nID</name></decl>;</decl_stmt>		<comment type="line" pos:line="85" pos:column="49">// the ID (in EXE file)</comment>
		</public>}</block>;</union>
	</public>}</block>;</struct>
	<decl_stmt><decl><type><specifier pos:line="88" pos:column="9">static</specifier> <specifier pos:line="88" pos:column="16">const</specifier> <name pos:line="88" pos:column="22">UINT</name></type> <name pos:line="88" pos:column="27">sizeof_iconDirEntry_ICO</name> <init pos:line="88" pos:column="51">= <expr><sizeof pos:line="88" pos:column="53">sizeof<argument_list pos:line="88" pos:column="59">(<argument><expr><name pos:line="88" pos:column="60">ICONDIRENTRY</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="89" pos:column="9">static</specifier> <specifier pos:line="89" pos:column="16">const</specifier> <name pos:line="89" pos:column="22">UINT</name></type> <name pos:line="89" pos:column="27">sizeof_iconDirEntry_EXE</name> <init pos:line="89" pos:column="51">= <expr><call><name pos:line="89" pos:column="53">offsetof</name><argument_list pos:line="89" pos:column="61">(<argument><expr><name pos:line="89" pos:column="62">ICONDIRENTRY</name></expr></argument>,<argument><expr><name pos:line="89" pos:column="75">nID</name></expr></argument>)</argument_list></call><op:operator pos:line="89" pos:column="79">+</op:operator><sizeof pos:line="89" pos:column="80">sizeof<argument_list pos:line="89" pos:column="86">(<argument><expr><name pos:line="89" pos:column="87">WORD</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="91" pos:column="9">ICONDIR</name></type> <name pos:line="91" pos:column="17">_head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="92" pos:column="9">ICONDIRENTRY</name> <type:modifier pos:line="92" pos:column="22">*</type:modifier></type><name pos:line="92" pos:column="23">_entries</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">LPBYTE</name> <type:modifier pos:line="93" pos:column="16">*</type:modifier></type><name pos:line="93" pos:column="17">_imagesData</name></decl>;</decl_stmt>
	
	<constructor><name pos:line="95" pos:column="9">Icon</name><parameter_list pos:line="95" pos:column="13">()</parameter_list> <member_list pos:line="95" pos:column="16">: <call><name pos:line="95" pos:column="18">_entries</name><argument_list pos:line="95" pos:column="26">(<argument><expr><name pos:line="95" pos:column="27">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="95" pos:column="32">,</op:operator> <call><name pos:line="95" pos:column="34">_imagesData</name><argument_list pos:line="95" pos:column="45">(<argument><expr><name pos:line="95" pos:column="46">NULL</name></expr></argument>)</argument_list></call> </member_list><block pos:line="95" pos:column="52">{ <expr_stmt><expr><name><name pos:line="95" pos:column="54">_head</name><op:operator pos:line="95" pos:column="59">.</op:operator><name pos:line="95" pos:column="60">idCount</name></name> <op:operator pos:line="95" pos:column="68">=</op:operator> <lit:literal type="number" pos:line="95" pos:column="70">0</lit:literal></expr>;</expr_stmt> }</block></constructor>
	<function><type><name pos:line="96" pos:column="9">void</name></type> <name pos:line="96" pos:column="14">clear</name><parameter_list pos:line="96" pos:column="19">()</parameter_list> <block pos:line="96" pos:column="22">{
		<if pos:line="97" pos:column="17">if<condition pos:line="97" pos:column="19">(<expr><name pos:line="97" pos:column="20">_imagesData</name></expr>)</condition><then pos:line="97" pos:column="32"> <block pos:line="97" pos:column="33">{ <for pos:line="97" pos:column="35">for(<init><decl><type><name pos:line="97" pos:column="39">int</name></type> <name pos:line="97" pos:column="43">i</name><init pos:line="97" pos:column="44">=<expr><lit:literal type="number" pos:line="97" pos:column="45">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="97" pos:column="48">i</name><op:operator pos:line="97" pos:column="49">&lt;</op:operator><name><name pos:line="97" pos:column="50">_head</name><op:operator pos:line="97" pos:column="55">.</op:operator><name pos:line="97" pos:column="56">idCount</name></name></expr>;</condition> <incr><expr><op:operator pos:line="97" pos:column="65">++</op:operator><name pos:line="97" pos:column="67">i</name></expr></incr>) <expr_stmt><expr><op:operator pos:line="97" pos:column="70">delete</op:operator> <name><name pos:line="97" pos:column="77">_imagesData</name><index pos:line="97" pos:column="88">[<expr><name pos:line="97" pos:column="89">i</name></expr>]</index></name></expr>;</expr_stmt></for> <expr_stmt><expr><op:operator pos:line="97" pos:column="93">delete</op:operator><index pos:line="97" pos:column="99">[]</index> <name pos:line="97" pos:column="102">_imagesData</name></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="97" pos:column="115">_imagesData</name> <op:operator pos:line="97" pos:column="127">=</op:operator> <lit:literal type="number" pos:line="97" pos:column="129">0</lit:literal></expr>;</expr_stmt> }</block></then></if>
		<if pos:line="98" pos:column="17">if<condition pos:line="98" pos:column="19">(<expr><name pos:line="98" pos:column="20">_entries</name></expr>)</condition><then pos:line="98" pos:column="29"> <expr_stmt><expr><op:operator pos:line="98" pos:column="30">delete</op:operator><index pos:line="98" pos:column="36">[]</index> <name pos:line="98" pos:column="39">_entries</name></expr>;</expr_stmt></then></if> <expr_stmt><expr><name pos:line="98" pos:column="49">_entries</name> <op:operator pos:line="98" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="98" pos:column="60">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="99" pos:column="17">_head</name><op:operator pos:line="99" pos:column="22">.</op:operator><name pos:line="99" pos:column="23">idCount</name></name> <op:operator pos:line="99" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="99" pos:column="33">0</lit:literal></expr>;</expr_stmt>
	}</block></function>
	<destructor><name pos:line="101" pos:column="9">~<name pos:line="101" pos:column="10">Icon</name></name><parameter_list pos:line="101" pos:column="14">()</parameter_list> <block pos:line="101" pos:column="17">{ <expr_stmt><expr><call><name pos:line="101" pos:column="19">clear</name><argument_list pos:line="101" pos:column="24">()</argument_list></call></expr>;</expr_stmt> }</block></destructor>
	
	<function_decl><type><name pos:line="103" pos:column="9">bool</name></type> <name pos:line="103" pos:column="14">readICO</name><parameter_list pos:line="103" pos:column="21">(<param><decl><type><name pos:line="103" pos:column="22">TCHAR</name><type:modifier pos:line="103" pos:column="27">*</type:modifier></type> <name pos:line="103" pos:column="29">filename</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="104" pos:column="9">bool</name></type> <name pos:line="104" pos:column="14">readEXE</name><parameter_list pos:line="104" pos:column="21">(<param><decl><type><name pos:line="104" pos:column="22">TCHAR</name><type:modifier pos:line="104" pos:column="27">*</type:modifier></type> <name pos:line="104" pos:column="29">lpFileName</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="41">LPCTSTR</name></type> <name pos:line="104" pos:column="49">lpResName</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="60">UINT</name></type> <name pos:line="104" pos:column="65">resLangId</name></decl></param>)</parameter_list>;</function_decl> <comment type="line" pos:line="104" pos:column="77">// Does not currently read image data</comment>
	
	<function_decl><type><name pos:line="106" pos:column="9">bool</name></type> <name pos:line="106" pos:column="14">writeToEXE</name><parameter_list pos:line="106" pos:column="24">(<param><decl><type><name pos:line="106" pos:column="25">TCHAR</name><type:modifier pos:line="106" pos:column="30">*</type:modifier></type> <name pos:line="106" pos:column="32">lpFileName</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="44">LPCTSTR</name></type> <name pos:line="106" pos:column="52">lpResName</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="63">UINT</name></type> <name pos:line="106" pos:column="68">resLangId</name></decl></param>)</parameter_list>;</function_decl>
	
	<function><type><name pos:line="108" pos:column="9">WORD</name></type> <name pos:line="108" pos:column="14">count</name><parameter_list pos:line="108" pos:column="19">()</parameter_list> <block pos:line="108" pos:column="22">{ <return pos:line="108" pos:column="24">return <expr><name><name pos:line="108" pos:column="31">_head</name><op:operator pos:line="108" pos:column="36">.</op:operator><name pos:line="108" pos:column="37">idCount</name></name></expr>;</return> }</block></function>
</public>}</block>;</class>

<function><type><name pos:line="111" pos:column="1">bool</name></type> <name><name pos:line="111" pos:column="6">Icon</name><op:operator pos:line="111" pos:column="10">::</op:operator><name pos:line="111" pos:column="12">readICO</name></name><parameter_list pos:line="111" pos:column="19">(<param><decl><type><name pos:line="111" pos:column="20">TCHAR</name><type:modifier pos:line="111" pos:column="25">*</type:modifier></type> <name pos:line="111" pos:column="27">filename</name></decl></param>)</parameter_list>
<block pos:line="112" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">clear</name><argument_list pos:line="113" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="114" pos:column="9">HANDLE</name></type> <name pos:line="114" pos:column="16">hFile</name> <init pos:line="114" pos:column="22">= <expr><call><name pos:line="114" pos:column="24">CreateFile</name><argument_list pos:line="114" pos:column="34">(<argument><expr><name pos:line="114" pos:column="35">filename</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="45">GENERIC_READ</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="114" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><name pos:line="114" pos:column="62">NULL</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="68">OPEN_EXISTING</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="83">FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="106">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="115" pos:column="9">if<condition pos:line="115" pos:column="11">(<expr><name pos:line="115" pos:column="12">hFile</name> <op:operator pos:line="115" pos:column="18">==</op:operator> <name pos:line="115" pos:column="21">INVALID_HANDLE_VALUE</name></expr>)</condition><then pos:line="115" pos:column="42"> <block pos:line="115" pos:column="43">{ <expr_stmt><expr><call><name pos:line="115" pos:column="45">_tprintf</name><argument_list pos:line="115" pos:column="53">(<argument><expr><call><name pos:line="115" pos:column="54">_T</name><argument_list pos:line="115" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="57">"Error opening file '%s' for Reading\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="115" pos:column="99">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="115" pos:column="110">return <expr><lit:literal type="boolean" pos:line="115" pos:column="117">false</lit:literal></expr>;</return> }</block></then></if>
	<decl_stmt><decl><type><name pos:line="116" pos:column="9">DWORD</name></type> <name pos:line="116" pos:column="15">dwBytesRead</name></decl>;</decl_stmt>
	<comment type="line" pos:line="117" pos:column="9">// Read header</comment>
	<if pos:line="118" pos:column="9">if<condition pos:line="118" pos:column="11">(<expr><op:operator pos:line="118" pos:column="12">!</op:operator><call><name pos:line="118" pos:column="13">ReadFile</name><argument_list pos:line="118" pos:column="21">( <argument><expr><name pos:line="118" pos:column="23">hFile</name></expr></argument>, <argument><expr><op:operator pos:line="118" pos:column="30">&amp;</op:operator><name pos:line="118" pos:column="31">_head</name></expr></argument>, <argument><expr><sizeof pos:line="118" pos:column="38">sizeof<argument_list pos:line="118" pos:column="44">(<argument><expr><name pos:line="118" pos:column="45">_head</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="118" pos:column="53">&amp;</op:operator><name pos:line="118" pos:column="54">dwBytesRead</name></expr></argument>, <argument><expr><name pos:line="118" pos:column="67">NULL</name></expr></argument> )</argument_list></call></expr>)</condition><then pos:line="118" pos:column="74"> <block pos:line="118" pos:column="75">{ <expr_stmt><expr><call><name pos:line="118" pos:column="77">_tprintf</name><argument_list pos:line="118" pos:column="85">(<argument><expr><call><name pos:line="118" pos:column="86">_T</name><argument_list pos:line="118" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="89">"Error reading file '%s'\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="118" pos:column="119">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="118" pos:column="130">return <expr><lit:literal type="boolean" pos:line="118" pos:column="137">false</lit:literal></expr>;</return> }</block></then></if>
	<macro><name pos:line="119" pos:column="9">IFDEBUG</name><argument_list pos:line="119" pos:column="16">( <argument pos:line="119" pos:column="18">_tprintf(_T("%d icon entries\n"), count());</argument> )</argument_list></macro>
	<comment type="line" pos:line="120" pos:column="9">// Read entries</comment>
	<expr_stmt><expr><name pos:line="121" pos:column="9">_entries</name> <op:operator pos:line="121" pos:column="18">=</op:operator> <op:operator pos:line="121" pos:column="20">new</op:operator> <name><name pos:line="121" pos:column="24">ICONDIRENTRY</name><index pos:line="121" pos:column="36">[<expr><call><name pos:line="121" pos:column="37">count</name><argument_list pos:line="121" pos:column="42">()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<if pos:line="122" pos:column="9">if<condition pos:line="122" pos:column="11">(<expr><op:operator pos:line="122" pos:column="12">!</op:operator><call><name pos:line="122" pos:column="13">ReadFile</name><argument_list pos:line="122" pos:column="21">( <argument><expr><name pos:line="122" pos:column="23">hFile</name></expr></argument>, <argument><expr><name pos:line="122" pos:column="30">_entries</name></expr></argument>, <argument><expr><sizeof pos:line="122" pos:column="40">sizeof<argument_list pos:line="122" pos:column="46">(<argument><expr><op:operator pos:line="122" pos:column="47">*</op:operator><name pos:line="122" pos:column="48">_entries</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="122" pos:column="57">*</op:operator><call><name pos:line="122" pos:column="58">count</name><argument_list pos:line="122" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="122" pos:column="67">&amp;</op:operator><name pos:line="122" pos:column="68">dwBytesRead</name></expr></argument>, <argument><expr><name pos:line="122" pos:column="81">NULL</name></expr></argument> )</argument_list></call></expr>)</condition><then pos:line="122" pos:column="88"> <block pos:line="122" pos:column="89">{ <expr_stmt><expr><call><name pos:line="122" pos:column="91">_tprintf</name><argument_list pos:line="122" pos:column="99">(<argument><expr><call><name pos:line="122" pos:column="100">_T</name><argument_list pos:line="122" pos:column="102">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="103">"Error reading file '%s'\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="122" pos:column="133">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="122" pos:column="144">return <expr><lit:literal type="boolean" pos:line="122" pos:column="151">false</lit:literal></expr>;</return> }</block></then></if>
	<comment type="line" pos:line="123" pos:column="9">// Read images</comment>
	<expr_stmt><expr><name pos:line="124" pos:column="9">_imagesData</name><op:operator pos:line="124" pos:column="20">=</op:operator><op:operator pos:line="124" pos:column="21">new</op:operator> <name><name pos:line="124" pos:column="25">LPBYTE</name><index pos:line="124" pos:column="31">[<expr><call><name pos:line="124" pos:column="32">count</name><argument_list pos:line="124" pos:column="37">()</argument_list></call></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><call><name pos:line="124" pos:column="42">memset</name><argument_list pos:line="124" pos:column="48">(<argument><expr><name pos:line="124" pos:column="49">_imagesData</name></expr></argument>, <argument><expr><sizeof pos:line="124" pos:column="62">sizeof<argument_list pos:line="124" pos:column="68">(<argument><expr><name pos:line="124" pos:column="69">LPBYTE</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="124" pos:column="76">*</op:operator><call><name pos:line="124" pos:column="77">count</name><argument_list pos:line="124" pos:column="82">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="124" pos:column="86">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="125" pos:column="9">for(<init><decl><type><name pos:line="125" pos:column="13">int</name></type> <name pos:line="125" pos:column="17">i</name><init pos:line="125" pos:column="18">=<expr><lit:literal type="number" pos:line="125" pos:column="19">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="125" pos:column="22">i</name><op:operator pos:line="125" pos:column="23">&lt;</op:operator><call><name pos:line="125" pos:column="24">count</name><argument_list pos:line="125" pos:column="29">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="125" pos:column="33">++</op:operator><name pos:line="125" pos:column="35">i</name></expr></incr>)
	<block pos:line="126" pos:column="9">{
		<macro><name pos:line="127" pos:column="17">IFDEBUG</name><argument_list pos:line="127" pos:column="24">( <argument pos:line="127" pos:column="26">_tprintf(_T("%d: offset=%d, size=%d\n"), i, _entries[i].dwImageOffset, _entries[i].dwBytesInRes);</argument> )</argument_list></macro>
		<expr_stmt><expr><name><name pos:line="128" pos:column="17">_imagesData</name><index pos:line="128" pos:column="28">[<expr><name pos:line="128" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="128" pos:column="32">=</op:operator> <op:operator pos:line="128" pos:column="34">(</op:operator><name pos:line="128" pos:column="35">LPBYTE</name><op:operator pos:line="128" pos:column="41">)</op:operator><call><name pos:line="128" pos:column="42">malloc</name><argument_list pos:line="128" pos:column="48">(<argument><expr><name><name pos:line="128" pos:column="49">_entries</name><index pos:line="128" pos:column="57">[<expr><name pos:line="128" pos:column="58">i</name></expr>]</index></name><op:operator pos:line="128" pos:column="60">.</op:operator><name pos:line="128" pos:column="61">dwBytesInRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="129" pos:column="17">if<condition pos:line="129" pos:column="19">(<expr><call><name pos:line="129" pos:column="20">SetFilePointer</name><argument_list pos:line="129" pos:column="34">(<argument><expr><name pos:line="129" pos:column="35">hFile</name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="42">_entries</name><index pos:line="129" pos:column="50">[<expr><name pos:line="129" pos:column="51">i</name></expr>]</index></name><op:operator pos:line="129" pos:column="53">.</op:operator><name pos:line="129" pos:column="54">dwImageOffset</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="69">NULL</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="75">FILE_BEGIN</name></expr></argument>)</argument_list></call> <op:operator pos:line="129" pos:column="87">==</op:operator> <name pos:line="129" pos:column="90">INVALID_SET_FILE_POINTER</name></expr>)</condition><then pos:line="129" pos:column="115"> <block pos:line="129" pos:column="116">{ <expr_stmt><expr><call><name pos:line="129" pos:column="118">_tprintf</name><argument_list pos:line="129" pos:column="126">(<argument><expr><call><name pos:line="129" pos:column="127">_T</name><argument_list pos:line="129" pos:column="129">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="130">"Error moving read pointer in '%s'\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="129" pos:column="170">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="129" pos:column="181">return <expr><lit:literal type="boolean" pos:line="129" pos:column="188">false</lit:literal></expr>;</return> }</block></then></if>
		<if pos:line="130" pos:column="17">if<condition pos:line="130" pos:column="19">(<expr><op:operator pos:line="130" pos:column="20">!</op:operator><call><name pos:line="130" pos:column="21">ReadFile</name><argument_list pos:line="130" pos:column="29">(<argument><expr><name pos:line="130" pos:column="30">hFile</name></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="37">_imagesData</name><index pos:line="130" pos:column="48">[<expr><name pos:line="130" pos:column="49">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="130" pos:column="53">_entries</name><index pos:line="130" pos:column="61">[<expr><name pos:line="130" pos:column="62">i</name></expr>]</index></name><op:operator pos:line="130" pos:column="64">.</op:operator><name pos:line="130" pos:column="65">dwBytesInRes</name></expr></argument>, <argument><expr><op:operator pos:line="130" pos:column="79">&amp;</op:operator><name pos:line="130" pos:column="80">dwBytesRead</name></expr></argument>, <argument><expr><name pos:line="130" pos:column="93">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="130" pos:column="99"> <block pos:line="130" pos:column="100">{ <expr_stmt><expr><call><name pos:line="130" pos:column="102">_tprintf</name><argument_list pos:line="130" pos:column="110">(<argument><expr><call><name pos:line="130" pos:column="111">_T</name><argument_list pos:line="130" pos:column="113">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="114">"Error reading file '%s'\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="130" pos:column="144">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="130" pos:column="155">return <expr><lit:literal type="boolean" pos:line="130" pos:column="162">false</lit:literal></expr>;</return> }</block></then></if>
	}</block></for>
	<return pos:line="132" pos:column="9">return <expr><lit:literal type="boolean" pos:line="132" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="135" pos:column="1">bool</name></type> <name><name pos:line="135" pos:column="6">Icon</name><op:operator pos:line="135" pos:column="10">::</op:operator><name pos:line="135" pos:column="12">readEXE</name></name><parameter_list pos:line="135" pos:column="19">(<param><decl><type><name pos:line="135" pos:column="20">TCHAR</name><type:modifier pos:line="135" pos:column="25">*</type:modifier></type> <name pos:line="135" pos:column="27">lpFileName</name></decl></param>, <param><decl><type><name pos:line="135" pos:column="39">LPCTSTR</name></type> <name pos:line="135" pos:column="47">lpResName</name></decl></param>, <param><decl><type><name pos:line="135" pos:column="58">UINT</name></type> <name pos:line="135" pos:column="63">resLangId</name></decl></param>)</parameter_list>
<block pos:line="136" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">bool</name></type> <name pos:line="137" pos:column="14">result</name> <init pos:line="137" pos:column="21">= <expr><lit:literal type="boolean" pos:line="137" pos:column="23">false</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="138" pos:column="9">clear</name><argument_list pos:line="138" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">HINSTANCE</name></type> <name pos:line="139" pos:column="19">hLib</name> <init pos:line="139" pos:column="24">= <expr><call><name pos:line="139" pos:column="26">LoadLibraryEx</name><argument_list pos:line="139" pos:column="39">(<argument><expr><name pos:line="139" pos:column="40">lpFileName</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="52">NULL</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="58">DONT_RESOLVE_DLL_REFERENCES</name> <op:operator pos:line="139" pos:column="86">|</op:operator> <name pos:line="139" pos:column="88">LOAD_LIBRARY_AS_DATAFILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="140" pos:column="9">if<condition pos:line="140" pos:column="11">(<expr><name pos:line="140" pos:column="12">hLib</name> <op:operator pos:line="140" pos:column="17">==</op:operator> <name pos:line="140" pos:column="20">NULL</name></expr>)</condition><then pos:line="140" pos:column="25"> <block pos:line="140" pos:column="26">{ <expr_stmt><expr><call><name pos:line="140" pos:column="28">_tprintf</name><argument_list pos:line="140" pos:column="36">(<argument><expr><call><name pos:line="140" pos:column="37">_T</name><argument_list pos:line="140" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="40">"Unable to load library '%s'\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="140" pos:column="74">lpFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto pos:line="140" pos:column="87">goto <name pos:line="140" pos:column="92">error1</name>;</goto> }</block></then></if>
	
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">HRSRC</name></type> <name pos:line="142" pos:column="15">hRsrc</name> <init pos:line="142" pos:column="21">= <expr><call><name pos:line="142" pos:column="23">FindResourceEx</name><argument_list pos:line="142" pos:column="37">(<argument><expr><name pos:line="142" pos:column="38">hLib</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="44">RT_GROUP_ICON</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="59">lpResName</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="70">resLangId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="143" pos:column="9">if<condition pos:line="143" pos:column="11">(<expr><name pos:line="143" pos:column="12">hRsrc</name> <op:operator pos:line="143" pos:column="18">==</op:operator> <name pos:line="143" pos:column="21">NULL</name></expr>)</condition><then pos:line="143" pos:column="26"> <block pos:line="143" pos:column="27">{ <expr_stmt><expr><call><name pos:line="143" pos:column="29">_tprintf</name><argument_list pos:line="143" pos:column="37">(<argument><expr><call><name pos:line="143" pos:column="38">IS_INTRESOURCE</name><argument_list pos:line="143" pos:column="52">(<argument><expr><name pos:line="143" pos:column="53">lpResName</name></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="64">?</op:operator> <call><name pos:line="143" pos:column="66">_T</name><argument_list pos:line="143" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="69">"Icon group %d (lang %d) not found in '%s'\n"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="116">:</op:operator> <call><name pos:line="143" pos:column="118">_T</name><argument_list pos:line="143" pos:column="120">(<argument><expr><lit:literal type="string" pos:line="143" pos:column="121">"Icon group %s (lang %d) not found in '%s'\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="143" pos:column="169">lpResName</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="180">resLangId</name></expr></argument>, <argument><expr><name pos:line="143" pos:column="191">lpFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto pos:line="143" pos:column="204">goto <name pos:line="143" pos:column="209">error2</name>;</goto> }</block></then></if>

	<decl_stmt><decl><type><name pos:line="145" pos:column="9">HGLOBAL</name></type> <name pos:line="145" pos:column="17">hGlobal</name> <init pos:line="145" pos:column="25">= <expr><call><name pos:line="145" pos:column="27">LoadResource</name><argument_list pos:line="145" pos:column="39">(<argument><expr><name pos:line="145" pos:column="40">hLib</name></expr></argument>, <argument><expr><name pos:line="145" pos:column="46">hRsrc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="146" pos:column="9">if<condition pos:line="146" pos:column="11">(<expr><name pos:line="146" pos:column="12">hGlobal</name> <op:operator pos:line="146" pos:column="20">==</op:operator> <name pos:line="146" pos:column="23">NULL</name></expr>)</condition><then pos:line="146" pos:column="28"> <block pos:line="146" pos:column="29">{ <expr_stmt><expr><call><name pos:line="146" pos:column="31">_tprintf</name><argument_list pos:line="146" pos:column="39">(<argument><expr><call><name pos:line="146" pos:column="40">IS_INTRESOURCE</name><argument_list pos:line="146" pos:column="54">(<argument><expr><name pos:line="146" pos:column="55">lpResName</name></expr></argument>)</argument_list></call> <op:operator pos:line="146" pos:column="66">?</op:operator> <call><name pos:line="146" pos:column="68">_T</name><argument_list pos:line="146" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="71">"Unable to load icon group %d from '%s'\n"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="146" pos:column="115">:</op:operator> <call><name pos:line="146" pos:column="117">_T</name><argument_list pos:line="146" pos:column="119">(<argument><expr><lit:literal type="string" pos:line="146" pos:column="120">"ReplaceIconResource: icon group %s not found in '%s'\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="146" pos:column="179">lpResName</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="190">lpFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto pos:line="146" pos:column="203">goto <name pos:line="146" pos:column="208">error2</name>;</goto> }</block></then></if>

	<decl_stmt><decl><type><name pos:line="148" pos:column="9">LPBYTE</name></type> <name pos:line="148" pos:column="16">resData</name> <init pos:line="148" pos:column="24">= <expr><op:operator pos:line="148" pos:column="26">(</op:operator><name pos:line="148" pos:column="27">BYTE</name><op:operator pos:line="148" pos:column="31">*</op:operator><op:operator pos:line="148" pos:column="32">)</op:operator><call><name pos:line="148" pos:column="33">LockResource</name><argument_list pos:line="148" pos:column="45">(<argument><expr><name pos:line="148" pos:column="46">hGlobal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="149" pos:column="9">if<condition pos:line="149" pos:column="11">(<expr><name pos:line="149" pos:column="12">resData</name> <op:operator pos:line="149" pos:column="20">==</op:operator> <name pos:line="149" pos:column="23">NULL</name></expr>)</condition><then pos:line="149" pos:column="28"> <block pos:line="149" pos:column="29">{ <expr_stmt><expr><call><name pos:line="149" pos:column="31">_tprintf</name><argument_list pos:line="149" pos:column="39">(<argument><expr><call><name pos:line="149" pos:column="40">_T</name><argument_list pos:line="149" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="149" pos:column="43">"Unable to lock resource data\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <goto pos:line="149" pos:column="79">goto <name pos:line="149" pos:column="84">error2</name>;</goto> }</block></then></if>

	<decl_stmt><decl><type><name pos:line="151" pos:column="9">LPBYTE</name></type> <name pos:line="151" pos:column="16">readPtr</name> <init pos:line="151" pos:column="24">= <expr><name pos:line="151" pos:column="26">resData</name></expr></init></decl>;</decl_stmt>
<cpp:define pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="152" pos:column="9">_myRead</name><parameter_list pos:line="152" pos:column="16">(<param><type><name pos:line="152" pos:column="17">ptr</name></type></param>, <param><type><name pos:line="152" pos:column="22">size</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="152" pos:column="28">{ CopyMemory(ptr, readPtr, size); readPtr += size; }</cpp:value></cpp:define>
	<expr_stmt><expr><call><name pos:line="153" pos:column="9">_myRead</name><argument_list pos:line="153" pos:column="16">(<argument><expr><op:operator pos:line="153" pos:column="17">&amp;</op:operator><name pos:line="153" pos:column="18">_head</name></expr></argument>, <argument><expr><sizeof pos:line="153" pos:column="25">sizeof<argument_list pos:line="153" pos:column="31">(<argument><expr><name pos:line="153" pos:column="32">_head</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name pos:line="154" pos:column="9">IFDEBUG</name><argument_list pos:line="154" pos:column="16">( <argument pos:line="154" pos:column="18">_tprintf(_T("%d icon entries\n"), count());</argument> )</argument_list></macro>
	<expr_stmt><expr><name pos:line="155" pos:column="9">_entries</name> <op:operator pos:line="155" pos:column="18">=</op:operator> <op:operator pos:line="155" pos:column="20">new</op:operator> <name><name pos:line="155" pos:column="24">ICONDIRENTRY</name><index pos:line="155" pos:column="36">[<expr><call><name pos:line="155" pos:column="37">count</name><argument_list pos:line="155" pos:column="42">()</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
	<for pos:line="156" pos:column="9">for(<init><decl><type><name pos:line="156" pos:column="13">int</name></type> <name pos:line="156" pos:column="17">i</name><init pos:line="156" pos:column="18">=<expr><lit:literal type="number" pos:line="156" pos:column="19">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="156" pos:column="22">i</name><op:operator pos:line="156" pos:column="23">&lt;</op:operator><call><name pos:line="156" pos:column="24">count</name><argument_list pos:line="156" pos:column="29">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="156" pos:column="33">++</op:operator><name pos:line="156" pos:column="35">i</name></expr></incr>)
	<block pos:line="157" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="158" pos:column="17">_myRead</name><argument_list pos:line="158" pos:column="24">(<argument><expr><op:operator pos:line="158" pos:column="25">&amp;</op:operator><name><name pos:line="158" pos:column="26">_entries</name><index pos:line="158" pos:column="34">[<expr><name pos:line="158" pos:column="35">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="39">sizeof_iconDirEntry_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name pos:line="159" pos:column="17">IFDEBUG</name><argument_list pos:line="159" pos:column="24">( <argument pos:line="159" pos:column="26">_tprintf(_T("%d: ID=%d\n"), i, _entries[i].nID);</argument> )</argument_list></macro>
	}</block></for>
	<comment type="line" pos:line="161" pos:column="9">// NOTE: This routine currently do not load image data from EXE.</comment>
	<comment type="line" pos:line="162" pos:column="9">//_imagesData=new LPBYTE[count()]; memset(_imagesData, sizeof(LPBYTE)*count(), 0);</comment>

<cpp:undef pos:line="164" pos:column="1">#<cpp:directive pos:line="164" pos:column="2">undef</cpp:directive> <name pos:line="164" pos:column="8">_myRead</name></cpp:undef>
	<expr_stmt><expr><name pos:line="165" pos:column="9">result</name> <op:operator pos:line="165" pos:column="16">=</op:operator> <lit:literal type="boolean" pos:line="165" pos:column="18">true</lit:literal></expr>;</expr_stmt>
<label><name pos:line="166" pos:column="1">error3</name>:</label>
	<expr_stmt><expr><call><name pos:line="167" pos:column="9">UnlockResource</name><argument_list pos:line="167" pos:column="23">(<argument><expr><op:operator pos:line="167" pos:column="24">(</op:operator><name pos:line="167" pos:column="25">HGLOBAL</name><op:operator pos:line="167" pos:column="32">)</op:operator><name pos:line="167" pos:column="33">resData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name pos:line="168" pos:column="1">error2</name>:</label>
	<expr_stmt><expr><call><name pos:line="169" pos:column="9">FreeLibrary</name><argument_list pos:line="169" pos:column="20">(<argument><expr><name pos:line="169" pos:column="21">hLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name pos:line="170" pos:column="1">error1</name>:</label>
	<return pos:line="171" pos:column="9">return <expr><name pos:line="171" pos:column="16">result</name></expr>;</return>
}</block></function>

<function><type><name pos:line="174" pos:column="1">bool</name></type> <name><name pos:line="174" pos:column="6">Icon</name><op:operator pos:line="174" pos:column="10">::</op:operator><name pos:line="174" pos:column="12">writeToEXE</name></name><parameter_list pos:line="174" pos:column="22">(<param><decl><type><name pos:line="174" pos:column="23">TCHAR</name><type:modifier pos:line="174" pos:column="28">*</type:modifier></type> <name pos:line="174" pos:column="30">lpFileName</name></decl></param>, <param><decl><type><name pos:line="174" pos:column="42">LPCTSTR</name></type> <name pos:line="174" pos:column="50">lpResName</name></decl></param>, <param><decl><type><name pos:line="174" pos:column="61">UINT</name></type> <name pos:line="174" pos:column="66">resLangId</name></decl></param>)</parameter_list>
<block pos:line="175" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="176" pos:column="9">Icon</name></type> <name pos:line="176" pos:column="14">oldIcon</name></decl>;</decl_stmt>
	<comment type="line" pos:line="177" pos:column="9">// NOTE: This routine currently cannot add an icon groupe, only replace an existing one.</comment>
	<if pos:line="178" pos:column="9">if<condition pos:line="178" pos:column="11">(<expr><op:operator pos:line="178" pos:column="12">!</op:operator><call><name><name pos:line="178" pos:column="13">oldIcon</name><op:operator pos:line="178" pos:column="20">.</op:operator><name pos:line="178" pos:column="21">readEXE</name></name><argument_list pos:line="178" pos:column="28">(<argument><expr><name pos:line="178" pos:column="29">lpFileName</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="41">lpResName</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="52">resLangId</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="178" pos:column="63"> <return pos:line="178" pos:column="64">return <expr><lit:literal type="boolean" pos:line="178" pos:column="71">false</lit:literal></expr>;</return></then></if>

	<comment type="line" pos:line="180" pos:column="9">//lpInitGrpIconDir   is oldIcon</comment>
	<expr_stmt><expr><name><name pos:line="181" pos:column="9">oldIcon</name><op:operator pos:line="181" pos:column="16">.</op:operator><name pos:line="181" pos:column="17">_head</name><op:operator pos:line="181" pos:column="22">.</op:operator><name pos:line="181" pos:column="23">idReserved</name></name> <op:operator pos:line="181" pos:column="34">=</op:operator> <name><name pos:line="181" pos:column="36">_head</name><op:operator pos:line="181" pos:column="41">.</op:operator><name pos:line="181" pos:column="42">idReserved</name></name></expr>;</expr_stmt>
	
	<comment type="line" pos:line="183" pos:column="9">// Set icon IDs for each icon in the group</comment>
	<decl_stmt><decl><type><name pos:line="184" pos:column="9">WORD</name></type> <name pos:line="184" pos:column="14">nMaxID</name> <init pos:line="184" pos:column="21">= <expr><lit:literal type="number" pos:line="184" pos:column="23">0xFFFF</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="185" pos:column="9">for(<init><decl><type><name pos:line="185" pos:column="13">int</name></type> <name pos:line="185" pos:column="17">i</name><init pos:line="185" pos:column="18">=<expr><lit:literal type="number" pos:line="185" pos:column="19">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="185" pos:column="22">i</name><op:operator pos:line="185" pos:column="23">&lt;</op:operator><call><name pos:line="185" pos:column="24">count</name><argument_list pos:line="185" pos:column="29">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="185" pos:column="33">++</op:operator><name pos:line="185" pos:column="35">i</name></expr></incr>)
	<block pos:line="186" pos:column="9">{
		<if pos:line="187" pos:column="17">if<condition pos:line="187" pos:column="19">(<expr><name pos:line="187" pos:column="20">i</name><op:operator pos:line="187" pos:column="21">&lt;</op:operator><call><name><name pos:line="187" pos:column="22">oldIcon</name><op:operator pos:line="187" pos:column="29">.</op:operator><name pos:line="187" pos:column="30">count</name></name><argument_list pos:line="187" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="187" pos:column="38"> <block pos:line="187" pos:column="39">{ <comment type="line" pos:line="187" pos:column="41">// use IDs of old icons</comment>
			<expr_stmt><expr><name><name pos:line="188" pos:column="25">_entries</name><index pos:line="188" pos:column="33">[<expr><name pos:line="188" pos:column="34">i</name></expr>]</index></name><op:operator pos:line="188" pos:column="36">.</op:operator><name pos:line="188" pos:column="37">nID</name> <op:operator pos:line="188" pos:column="41">=</op:operator> <name><name pos:line="188" pos:column="43">oldIcon</name><op:operator pos:line="188" pos:column="50">.</op:operator><name pos:line="188" pos:column="51">_entries</name><index pos:line="188" pos:column="59">[<expr><name pos:line="188" pos:column="60">i</name></expr>]</index></name><op:operator pos:line="188" pos:column="62">.</op:operator><name pos:line="188" pos:column="63">nID</name></expr>;</expr_stmt>
			<macro><name pos:line="189" pos:column="25">IFDEBUG</name><argument_list pos:line="189" pos:column="32">( <argument pos:line="189" pos:column="34">_tprintf(_T("replacing icon %d\n"), _entries[i].nID);</argument> )</argument_list></macro>
		}</block></then> <else pos:line="190" pos:column="19">else <block pos:line="190" pos:column="24">{ <comment type="line" pos:line="190" pos:column="26">// if new icon group has more icons, allocate new IDs</comment>
			<if pos:line="191" pos:column="25">if<condition pos:line="191" pos:column="27">(<expr><name pos:line="191" pos:column="28">nMaxID</name> <op:operator pos:line="191" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="191" pos:column="38">0xFFFF</lit:literal> <op:operator pos:line="191" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="191" pos:column="48">(</op:operator><name pos:line="191" pos:column="49">nMaxID</name> <op:operator pos:line="191" pos:column="56">=</op:operator> <call><name pos:line="191" pos:column="58">getMaxIconId</name><argument_list pos:line="191" pos:column="70">(<argument><expr><name pos:line="191" pos:column="71">lpFileName</name></expr></argument>)</argument_list></call><op:operator pos:line="191" pos:column="82">)</op:operator> <op:operator pos:line="191" pos:column="84">==</op:operator> <lit:literal type="number" pos:line="191" pos:column="87">0xFFFF</lit:literal></expr>)</condition><then pos:line="191" pos:column="94"> <return pos:line="191" pos:column="95">return <expr><lit:literal type="boolean" pos:line="191" pos:column="102">false</lit:literal></expr>;</return></then></if>
			<expr_stmt><expr><name pos:line="192" pos:column="25">nMaxID</name><op:operator pos:line="192" pos:column="31">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="193" pos:column="25">_entries</name><index pos:line="193" pos:column="33">[<expr><name pos:line="193" pos:column="34">i</name></expr>]</index></name><op:operator pos:line="193" pos:column="36">.</op:operator><name pos:line="193" pos:column="37">nID</name> <op:operator pos:line="193" pos:column="41">=</op:operator> <name pos:line="193" pos:column="43">nMaxID</name></expr>;</expr_stmt>
			<macro><name pos:line="194" pos:column="25">IFDEBUG</name><argument_list pos:line="194" pos:column="32">( <argument pos:line="194" pos:column="34">_tprintf(_T("adding icon %d\n"), _entries[i].nID);</argument> )</argument_list></macro>
		}</block></else></if>
	}</block></for>

	<comment type="line" pos:line="198" pos:column="9">// _tchmod(lpFileName,_S_IWRITE); // if needed...</comment>
	<decl_stmt><decl><type><name pos:line="199" pos:column="9">HANDLE</name></type> <name pos:line="199" pos:column="16">hUpdate</name> <init pos:line="199" pos:column="24">= <expr><call><name pos:line="199" pos:column="26">BeginUpdateResource</name><argument_list pos:line="199" pos:column="45">(<argument><expr><name pos:line="199" pos:column="46">lpFileName</name></expr></argument>, <argument><expr><name pos:line="199" pos:column="58">FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="200" pos:column="9">if<condition pos:line="200" pos:column="11">(<expr><name pos:line="200" pos:column="12">hUpdate</name><op:operator pos:line="200" pos:column="19">==</op:operator><name pos:line="200" pos:column="21">NULL</name></expr>)</condition><then pos:line="200" pos:column="26"> <block pos:line="200" pos:column="27">{ <expr_stmt><expr><call><name pos:line="200" pos:column="29">_tprintf</name><argument_list pos:line="200" pos:column="37">(<argument><expr><call><name pos:line="200" pos:column="38">_T</name><argument_list pos:line="200" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="200" pos:column="41">"Unable to update resource\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="200" pos:column="74">return <expr><lit:literal type="boolean" pos:line="200" pos:column="81">false</lit:literal></expr>;</return> }</block></then></if>

	<block pos:line="202" pos:column="9">{
	<comment type="line" pos:line="203" pos:column="9">// Build icon group resource</comment>
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">WORD</name></type> <name pos:line="204" pos:column="14">cbRes</name> <init pos:line="204" pos:column="20">= <expr><sizeof pos:line="204" pos:column="22">sizeof<argument_list pos:line="204" pos:column="28">(<argument><expr><name pos:line="204" pos:column="29">ICONDIR</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="204" pos:column="38">+</op:operator> <call><name pos:line="204" pos:column="40">count</name><argument_list pos:line="204" pos:column="45">()</argument_list></call><op:operator pos:line="204" pos:column="47">*</op:operator><name pos:line="204" pos:column="48">sizeof_iconDirEntry_EXE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="205" pos:column="9">BYTE</name><type:modifier pos:line="205" pos:column="13">*</type:modifier></type> <name pos:line="205" pos:column="15">resData</name> <init pos:line="205" pos:column="23">= <expr><op:operator pos:line="205" pos:column="25">new</op:operator> <name><name pos:line="205" pos:column="29">BYTE</name><index pos:line="205" pos:column="33">[<expr><name pos:line="205" pos:column="34">cbRes</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="206" pos:column="9">LPBYTE</name></type> <name pos:line="206" pos:column="16">writePtr</name> <init pos:line="206" pos:column="25">= <expr><name pos:line="206" pos:column="27">resData</name></expr></init></decl>;</decl_stmt>
<cpp:define pos:line="207" pos:column="1">#<cpp:directive pos:line="207" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="207" pos:column="9">_myWrite</name><parameter_list pos:line="207" pos:column="17">(<param><type><name pos:line="207" pos:column="18">ptr</name></type></param>, <param><type><name pos:line="207" pos:column="23">size</name></type></param>)</parameter_list></cpp:macro> <cpp:value pos:line="207" pos:column="29">{ CopyMemory(writePtr, ptr, size); writePtr += size; }</cpp:value></cpp:define>
	<expr_stmt><expr><call><name pos:line="208" pos:column="9">_myWrite</name><argument_list pos:line="208" pos:column="17">(<argument><expr><op:operator pos:line="208" pos:column="18">&amp;</op:operator><name pos:line="208" pos:column="19">_head</name></expr></argument>, <argument><expr><sizeof pos:line="208" pos:column="26">sizeof<argument_list pos:line="208" pos:column="32">(<argument><expr><name pos:line="208" pos:column="33">_head</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="209" pos:column="9">for(<init><decl><type><name pos:line="209" pos:column="13">int</name></type> <name pos:line="209" pos:column="17">i</name><init pos:line="209" pos:column="18">=<expr><lit:literal type="number" pos:line="209" pos:column="19">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="209" pos:column="22">i</name><op:operator pos:line="209" pos:column="23">&lt;</op:operator><call><name pos:line="209" pos:column="24">count</name><argument_list pos:line="209" pos:column="29">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="209" pos:column="33">++</op:operator><name pos:line="209" pos:column="35">i</name></expr></incr>)
		<expr_stmt><expr><call><name pos:line="210" pos:column="17">_myWrite</name><argument_list pos:line="210" pos:column="25">(<argument><expr><op:operator pos:line="210" pos:column="26">&amp;</op:operator><name><name pos:line="210" pos:column="27">_entries</name><index pos:line="210" pos:column="35">[<expr><name pos:line="210" pos:column="36">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="40">sizeof_iconDirEntry_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<cpp:undef pos:line="211" pos:column="1">#<cpp:directive pos:line="211" pos:column="2">undef</cpp:directive> <name pos:line="211" pos:column="8">_myWrite</name></cpp:undef>

	<comment type="line" pos:line="213" pos:column="9">// Replace icon group</comment>
	<if pos:line="214" pos:column="9">if<condition pos:line="214" pos:column="11">(<expr><op:operator pos:line="214" pos:column="12">!</op:operator><call><name pos:line="214" pos:column="13">UpdateResource</name><argument_list pos:line="214" pos:column="27">(<argument><expr><name pos:line="214" pos:column="28">hUpdate</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="37">RT_GROUP_ICON</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="52">lpResName</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="63">resLangId</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="74">resData</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="83">cbRes</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="214" pos:column="90"> <block pos:line="214" pos:column="91">{ <expr_stmt><expr><call><name pos:line="214" pos:column="93">_tprintf</name><argument_list pos:line="214" pos:column="101">(<argument><expr><call><name pos:line="214" pos:column="102">_T</name><argument_list pos:line="214" pos:column="104">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="105">"Unable to update icon group\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><op:operator pos:line="214" pos:column="140">delete</op:operator> <name pos:line="214" pos:column="147">resData</name></expr>;</expr_stmt> <return pos:line="214" pos:column="156">return <expr><lit:literal type="boolean" pos:line="214" pos:column="163">false</lit:literal></expr>;</return> }</block></then></if>
	<macro><name pos:line="215" pos:column="9">IFDEBUG</name><argument_list pos:line="215" pos:column="16">( <argument pos:line="215" pos:column="18">_tprintf(_T("Updated group %d (lang %d)\n"), lpResName, resLangId);</argument> )</argument_list></macro>
	<expr_stmt><expr><op:operator pos:line="216" pos:column="9">delete</op:operator> <name pos:line="216" pos:column="16">resData</name></expr>;</expr_stmt>
	}</block>

	<comment type="line" pos:line="219" pos:column="9">// Replace/add icons</comment>
	<for pos:line="220" pos:column="9">for(<init><decl><type><name pos:line="220" pos:column="13">int</name></type> <name pos:line="220" pos:column="17">i</name><init pos:line="220" pos:column="18">=<expr><lit:literal type="number" pos:line="220" pos:column="19">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="220" pos:column="22">i</name><op:operator pos:line="220" pos:column="23">&lt;</op:operator><call><name pos:line="220" pos:column="24">count</name><argument_list pos:line="220" pos:column="29">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="220" pos:column="33">++</op:operator><name pos:line="220" pos:column="35">i</name></expr></incr>)
	<block pos:line="221" pos:column="9">{
		<if pos:line="222" pos:column="17">if<condition pos:line="222" pos:column="19">(<expr><op:operator pos:line="222" pos:column="20">!</op:operator><call><name pos:line="222" pos:column="21">UpdateResource</name><argument_list pos:line="222" pos:column="35">(<argument><expr><name pos:line="222" pos:column="36">hUpdate</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="45">RT_ICON</name></expr></argument>, <argument><expr><call><name pos:line="222" pos:column="54">MAKEINTRESOURCE</name><argument_list pos:line="222" pos:column="69">(<argument><expr><name><name pos:line="222" pos:column="70">_entries</name><index pos:line="222" pos:column="78">[<expr><name pos:line="222" pos:column="79">i</name></expr>]</index></name><op:operator pos:line="222" pos:column="81">.</op:operator><name pos:line="222" pos:column="82">nID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="222" pos:column="88">resLangId</name></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="99">_imagesData</name><index pos:line="222" pos:column="110">[<expr><name pos:line="222" pos:column="111">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="115">_entries</name><index pos:line="222" pos:column="123">[<expr><name pos:line="222" pos:column="124">i</name></expr>]</index></name><op:operator pos:line="222" pos:column="126">.</op:operator><name pos:line="222" pos:column="127">dwBytesInRes</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="222" pos:column="141"> <block pos:line="222" pos:column="142">{ <expr_stmt><expr><call><name pos:line="222" pos:column="144">_tprintf</name><argument_list pos:line="222" pos:column="152">(<argument><expr><call><name pos:line="222" pos:column="153">_T</name><argument_list pos:line="222" pos:column="155">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="156">"Unable to update icon %d\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="222" pos:column="187">_entries</name><index pos:line="222" pos:column="195">[<expr><name pos:line="222" pos:column="196">i</name></expr>]</index></name><op:operator pos:line="222" pos:column="198">.</op:operator><name pos:line="222" pos:column="199">nID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return pos:line="222" pos:column="205">return <expr><lit:literal type="boolean" pos:line="222" pos:column="212">false</lit:literal></expr>;</return> }</block></then></if>
		<macro><name pos:line="223" pos:column="17">IFDEBUG</name><argument_list pos:line="223" pos:column="24">( <argument pos:line="223" pos:column="26">_tprintf(_T("Updated icon %d (lang %d)\n"), _entries[i].nID, resLangId);</argument> )</argument_list></macro>
	}</block></for>

	<comment type="line" pos:line="226" pos:column="9">// Delete unused icons</comment>
	<for pos:line="227" pos:column="9">for(<init><decl><type><name pos:line="227" pos:column="13">int</name></type> <name pos:line="227" pos:column="17">i</name><init pos:line="227" pos:column="18">=<expr><call><name pos:line="227" pos:column="19">count</name><argument_list pos:line="227" pos:column="24">()</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="227" pos:column="28">i</name><op:operator pos:line="227" pos:column="29">&lt;</op:operator><call><name><name pos:line="227" pos:column="30">oldIcon</name><op:operator pos:line="227" pos:column="37">.</op:operator><name pos:line="227" pos:column="38">count</name></name><argument_list pos:line="227" pos:column="43">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="227" pos:column="47">++</op:operator><name pos:line="227" pos:column="49">i</name></expr></incr>)
	<block pos:line="228" pos:column="9">{
		<if pos:line="229" pos:column="17">if<condition pos:line="229" pos:column="19">(<expr><op:operator pos:line="229" pos:column="20">!</op:operator><call><name pos:line="229" pos:column="21">UpdateResource</name><argument_list pos:line="229" pos:column="35">(<argument><expr><name pos:line="229" pos:column="36">hUpdate</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="45">RT_ICON</name></expr></argument>, <argument><expr><call><name pos:line="229" pos:column="54">MAKEINTRESOURCE</name><argument_list pos:line="229" pos:column="69">(<argument><expr><name><name pos:line="229" pos:column="70">oldIcon</name><op:operator pos:line="229" pos:column="77">.</op:operator><name pos:line="229" pos:column="78">_entries</name><index pos:line="229" pos:column="86">[<expr><name pos:line="229" pos:column="87">i</name></expr>]</index></name><op:operator pos:line="229" pos:column="89">.</op:operator><name pos:line="229" pos:column="90">nID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="229" pos:column="96">resLangId</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="107">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="229" pos:column="113">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="229" pos:column="116"> <block pos:line="229" pos:column="117">{ <expr_stmt><expr><call><name pos:line="229" pos:column="119">_tprintf</name><argument_list pos:line="229" pos:column="127">(<argument><expr><call><name pos:line="229" pos:column="128">_T</name><argument_list pos:line="229" pos:column="130">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="131">"Unable to delete icon %d\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="229" pos:column="162">oldIcon</name><op:operator pos:line="229" pos:column="169">.</op:operator><name pos:line="229" pos:column="170">_entries</name><index pos:line="229" pos:column="178">[<expr><name pos:line="229" pos:column="179">i</name></expr>]</index></name><op:operator pos:line="229" pos:column="181">.</op:operator><name pos:line="229" pos:column="182">nID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
		<macro><name pos:line="230" pos:column="17">IFDEBUG</name><argument_list pos:line="230" pos:column="24">( <argument pos:line="230" pos:column="26">_tprintf(_T("Removed icon %d (lang %d)\n"), oldIcon._entries[i].nID, resLangId);</argument> )</argument_list></macro>
	}</block></for>

	<if pos:line="233" pos:column="9">if<condition pos:line="233" pos:column="11">(<expr><op:operator pos:line="233" pos:column="12">!</op:operator><call><name pos:line="233" pos:column="13">EndUpdateResource</name><argument_list pos:line="233" pos:column="30">(<argument><expr><name pos:line="233" pos:column="31">hUpdate</name></expr></argument>,<argument><expr><name pos:line="233" pos:column="39">FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="233" pos:column="46"> <block pos:line="233" pos:column="47">{ <expr_stmt><expr><call><name pos:line="233" pos:column="49">_tprintf</name><argument_list pos:line="233" pos:column="57">(<argument><expr><call><name pos:line="233" pos:column="58">_T</name><argument_list pos:line="233" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="233" pos:column="61">"Error in EndUpdateResource\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
	<macro><name pos:line="234" pos:column="9">IFDEBUG</name><argument_list pos:line="234" pos:column="16">( <argument pos:line="234" pos:column="18">_tprintf(_T("EndUpdateResource\n"));</argument> )</argument_list></macro>

	<return pos:line="236" pos:column="9">return <expr><lit:literal type="boolean" pos:line="236" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="239" pos:column="1">int</name></type> <name pos:line="239" pos:column="5">_tmain</name><parameter_list pos:line="239" pos:column="11">(<param><decl><type><name pos:line="239" pos:column="12">int</name></type> <name pos:line="239" pos:column="16">argc</name></decl></param>, <param><decl><type><name pos:line="239" pos:column="22">TCHAR</name><type:modifier pos:line="239" pos:column="27">*</type:modifier></type> <name><name pos:line="239" pos:column="29">argv</name><index pos:line="239" pos:column="33">[]</index></name></decl></param>, <param><decl><type><name pos:line="239" pos:column="37">TCHAR</name><type:modifier pos:line="239" pos:column="42">*</type:modifier></type> <name><name pos:line="239" pos:column="44">envp</name><index pos:line="239" pos:column="48">[]</index></name></decl></param>)</parameter_list>
<block pos:line="240" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="241" pos:column="9">int</name></type> <name pos:line="241" pos:column="13">nRetCode</name> <init pos:line="241" pos:column="22">= <expr><lit:literal type="number" pos:line="241" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="243" pos:column="9">IFDEBUG</name><argument_list pos:line="243" pos:column="16">( <argument><expr><call><name pos:line="243" pos:column="18">printf</name><argument_list pos:line="243" pos:column="24">(<argument><expr><lit:literal type="string" pos:line="243" pos:column="25">"sizeof(TCHAR)=%d\n"</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="243" pos:column="47">sizeof<argument_list pos:line="243" pos:column="53">(<argument><expr><name pos:line="243" pos:column="54">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<if pos:line="244" pos:column="9">if<condition pos:line="244" pos:column="11">(<expr><name pos:line="244" pos:column="12">argc</name> <op:operator pos:line="244" pos:column="17">!=</op:operator> <lit:literal type="number" pos:line="244" pos:column="20">5</lit:literal></expr>)</condition><then pos:line="244" pos:column="22"> <block pos:line="244" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="245" pos:column="17">_tprintf</name><argument_list pos:line="245" pos:column="25">(<argument><expr><call><name pos:line="245" pos:column="26">_T</name><argument_list pos:line="245" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="29">"Usage: %s source.ico destination.exe icon_group# icon_lang#\n"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="245" pos:column="95">argv</name><index pos:line="245" pos:column="99">[<expr><lit:literal type="number" pos:line="245" pos:column="100">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="246" pos:column="17">return <expr><lit:literal type="number" pos:line="246" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="249" pos:column="9">TCHAR</name><type:modifier pos:line="249" pos:column="14">*</type:modifier></type> <name pos:line="249" pos:column="16">szICOname</name> <init pos:line="249" pos:column="26">= <expr><name><name pos:line="249" pos:column="28">argv</name><index pos:line="249" pos:column="32">[<expr><lit:literal type="number" pos:line="249" pos:column="33">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="250" pos:column="9">TCHAR</name><type:modifier pos:line="250" pos:column="14">*</type:modifier></type> <name pos:line="250" pos:column="16">szEXEname</name> <init pos:line="250" pos:column="26">= <expr><name><name pos:line="250" pos:column="28">argv</name><index pos:line="250" pos:column="32">[<expr><lit:literal type="number" pos:line="250" pos:column="33">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="251" pos:column="9">int</name></type> <name pos:line="251" pos:column="13">groupId</name> <init pos:line="251" pos:column="21">= <expr><call><name pos:line="251" pos:column="23">_ttoi</name><argument_list pos:line="251" pos:column="28">(<argument><expr><name><name pos:line="251" pos:column="29">argv</name><index pos:line="251" pos:column="33">[<expr><lit:literal type="number" pos:line="251" pos:column="34">3</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="252" pos:column="9">int</name></type> <name pos:line="252" pos:column="13">langId</name> <init pos:line="252" pos:column="20">= <expr><call><name pos:line="252" pos:column="22">_ttoi</name><argument_list pos:line="252" pos:column="27">(<argument><expr><name><name pos:line="252" pos:column="28">argv</name><index pos:line="252" pos:column="32">[<expr><lit:literal type="number" pos:line="252" pos:column="33">4</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<macro><name pos:line="254" pos:column="9">IFDEBUG</name><argument_list pos:line="254" pos:column="16">( <argument pos:line="254" pos:column="18">_tprintf(_T("ICO='%s' EXE='%s' group#=%d lang#=%d\n"), szICOname, szEXEname, groupId, langId);</argument> )</argument_list></macro>

	<decl_stmt><decl><type><name pos:line="256" pos:column="9">Icon</name></type> <name pos:line="256" pos:column="14">newIcon</name></decl>;</decl_stmt> <if pos:line="256" pos:column="23">if<condition pos:line="256" pos:column="25">(<expr><op:operator pos:line="256" pos:column="26">!</op:operator><call><name><name pos:line="256" pos:column="27">newIcon</name><op:operator pos:line="256" pos:column="34">.</op:operator><name pos:line="256" pos:column="35">readICO</name></name><argument_list pos:line="256" pos:column="42">(<argument><expr><name pos:line="256" pos:column="43">szICOname</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="256" pos:column="54"> <return pos:line="256" pos:column="55">return <expr><lit:literal type="boolean" pos:line="256" pos:column="62">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><call><name><name pos:line="257" pos:column="9">newIcon</name><op:operator pos:line="257" pos:column="16">.</op:operator><name pos:line="257" pos:column="17">writeToEXE</name></name><argument_list pos:line="257" pos:column="27">(<argument><expr><name pos:line="257" pos:column="28">szEXEname</name></expr></argument>, <argument><expr><call><name pos:line="257" pos:column="39">MAKEINTRESOURCE</name><argument_list pos:line="257" pos:column="54">(<argument><expr><name pos:line="257" pos:column="55">groupId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="257" pos:column="65">langId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:line="259" pos:column="9">return <expr><name pos:line="259" pos:column="16">nRetCode</name></expr>;</return>
}</block></function>
</unit>
