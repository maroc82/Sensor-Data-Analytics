<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\Exception\Win32Exception.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">//This code was retrieved from</comment>
<comment type="line" pos:line="2" pos:column="1">//http://www.thunderguy.com/semicolon/2002/08/15/visual-c-exception-handling/3/</comment>
<comment type="line" pos:line="3" pos:column="1">//(Visual C++ exception handling)</comment>
<comment type="line" pos:line="4" pos:column="1">//By Bennett</comment>
<comment type="line" pos:line="5" pos:column="1">//Formatting Slightly modified for N++</comment>

<comment type="line" pos:line="7" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="8" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="9" pos:column="1">//</comment>
<comment type="line" pos:line="10" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="11" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="12" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="13" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="14" pos:column="1">//</comment>
<comment type="line" pos:line="15" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="16" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="17" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="18" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="19" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="20" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="21" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="22" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="23" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="24" pos:column="1">//</comment>
<comment type="line" pos:line="25" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="26" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="27" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="28" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="29" pos:column="1">//</comment>
<comment type="line" pos:line="30" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="31" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="32" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"Win32Exception.h"</lit:literal></cpp:file></cpp:include>


<constructor><name><name pos:line="39" pos:column="1">Win32Exception</name><op:operator pos:line="39" pos:column="15">::</op:operator><name pos:line="39" pos:column="17">Win32Exception</name></name><parameter_list pos:line="39" pos:column="31">(<param><decl><type><name pos:line="39" pos:column="32">EXCEPTION_POINTERS</name> <type:modifier pos:line="39" pos:column="51">*</type:modifier></type> <name pos:line="39" pos:column="53">info</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="59">{
	<expr_stmt><expr><name pos:line="40" pos:column="9">_location</name> <op:operator pos:line="40" pos:column="19">=</op:operator> <name><name pos:line="40" pos:column="21">info</name><op:operator pos:line="40" pos:column="25">-&gt;</op:operator><name pos:line="40" pos:column="27">ExceptionRecord</name><op:operator pos:line="40" pos:column="42">-&gt;</op:operator><name pos:line="40" pos:column="44">ExceptionAddress</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="41" pos:column="9">_code</name> <op:operator pos:line="41" pos:column="15">=</op:operator> <name><name pos:line="41" pos:column="17">info</name><op:operator pos:line="41" pos:column="21">-&gt;</op:operator><name pos:line="41" pos:column="23">ExceptionRecord</name><op:operator pos:line="41" pos:column="38">-&gt;</op:operator><name pos:line="41" pos:column="40">ExceptionCode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="42" pos:column="9">_info</name> <op:operator pos:line="42" pos:column="15">=</op:operator> <name pos:line="42" pos:column="17">info</name></expr>;</expr_stmt>
	<switch pos:line="43" pos:column="9">switch <condition pos:line="43" pos:column="16">(<expr><name pos:line="43" pos:column="17">_code</name></expr>)</condition> <block pos:line="43" pos:column="24">{
		<case pos:line="44" pos:column="17">case <expr><name pos:line="44" pos:column="22">EXCEPTION_ACCESS_VIOLATION</name></expr>:
			<expr_stmt><expr><name pos:line="45" pos:column="25">_event</name> <op:operator pos:line="45" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="45" pos:column="34">"Access violation"</lit:literal></expr>;</expr_stmt>
			<break pos:line="46" pos:column="25">break;</break>
		</case><case pos:line="47" pos:column="17">case <expr><name pos:line="47" pos:column="22">EXCEPTION_FLT_DIVIDE_BY_ZERO</name></expr>:
		</case><case pos:line="48" pos:column="17">case <expr><name pos:line="48" pos:column="22">EXCEPTION_INT_DIVIDE_BY_ZERO</name></expr>:
			<expr_stmt><expr><name pos:line="49" pos:column="25">_event</name> <op:operator pos:line="49" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="49" pos:column="34">"Division by zero"</lit:literal></expr>;</expr_stmt>
			<break pos:line="50" pos:column="25">break;</break>
		</case><default pos:line="51" pos:column="17">default:
			<expr_stmt><expr><name pos:line="52" pos:column="25">_event</name> <op:operator pos:line="52" pos:column="32">=</op:operator> <lit:literal type="string" pos:line="52" pos:column="34">"Unlisted exception"</lit:literal></expr>;</expr_stmt>
	</default>}</block></switch>
}</block></constructor>

<function><type><name pos:line="56" pos:column="1">void</name></type> <name><name pos:line="56" pos:column="6">Win32Exception</name><op:operator pos:line="56" pos:column="20">::</op:operator><name pos:line="56" pos:column="22">installHandler</name></name><parameter_list pos:line="56" pos:column="36">()</parameter_list> <block pos:line="56" pos:column="39">{
	<expr_stmt><expr><call><name pos:line="57" pos:column="9">_set_se_translator</name><argument_list pos:line="57" pos:column="27">(<argument><expr><name><name pos:line="57" pos:column="28">Win32Exception</name><op:operator pos:line="57" pos:column="42">::</op:operator><name pos:line="57" pos:column="44">translate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="60" pos:column="1">void</name></type>  <name><name pos:line="60" pos:column="7">Win32Exception</name><op:operator pos:line="60" pos:column="21">::</op:operator><name pos:line="60" pos:column="23">removeHandler</name></name><parameter_list pos:line="60" pos:column="36">()</parameter_list> <block pos:line="60" pos:column="39">{
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">_set_se_translator</name><argument_list pos:line="61" pos:column="27">(<argument><expr><name pos:line="61" pos:column="28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="64" pos:column="1">void</name></type> <name><name pos:line="64" pos:column="6">Win32Exception</name><op:operator pos:line="64" pos:column="20">::</op:operator><name pos:line="64" pos:column="22">translate</name></name><parameter_list pos:line="64" pos:column="31">(<param><decl><type><name pos:line="64" pos:column="32">unsigned</name></type> <name pos:line="64" pos:column="41">code</name></decl></param>, <param><decl><type><name pos:line="64" pos:column="47">EXCEPTION_POINTERS</name> <type:modifier pos:line="64" pos:column="66">*</type:modifier></type> <name pos:line="64" pos:column="68">info</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="74">{
	<comment type="line" pos:line="65" pos:column="9">// Windows guarantees that *(info-&gt;ExceptionRecord) is valid</comment>
	<switch pos:line="66" pos:column="9">switch <condition pos:line="66" pos:column="16">(<expr><name pos:line="66" pos:column="17">code</name></expr>)</condition> <block pos:line="66" pos:column="23">{
		<case pos:line="67" pos:column="17">case <expr><name pos:line="67" pos:column="22">EXCEPTION_ACCESS_VIOLATION</name></expr>:
			<throw pos:line="68" pos:column="25">throw <expr><call><name pos:line="68" pos:column="31">Win32AccessViolation</name><argument_list pos:line="68" pos:column="51">(<argument><expr><name pos:line="68" pos:column="52">info</name></expr></argument>)</argument_list></call></expr>;</throw>
			<break pos:line="69" pos:column="25">break;</break>
		</case><default pos:line="70" pos:column="17">default:
			<throw pos:line="71" pos:column="25">throw <expr><call><name pos:line="71" pos:column="31">Win32Exception</name><argument_list pos:line="71" pos:column="45">(<argument><expr><name pos:line="71" pos:column="46">info</name></expr></argument>)</argument_list></call></expr>;</throw>
	</default>}</block></switch>
}</block></function>

<constructor><name><name pos:line="75" pos:column="1">Win32AccessViolation</name><op:operator pos:line="75" pos:column="21">::</op:operator><name pos:line="75" pos:column="23">Win32AccessViolation</name></name><parameter_list pos:line="75" pos:column="43">(<param><decl><type><name pos:line="75" pos:column="44">EXCEPTION_POINTERS</name> <type:modifier pos:line="75" pos:column="63">*</type:modifier></type> <name pos:line="75" pos:column="65">info</name></decl></param>)</parameter_list> <member_list pos:line="75" pos:column="71">: <call><name pos:line="75" pos:column="73">Win32Exception</name><argument_list pos:line="75" pos:column="87">(<argument><expr><name pos:line="75" pos:column="88">info</name></expr></argument>)</argument_list></call> </member_list><block pos:line="75" pos:column="94">{
	<expr_stmt><expr><name pos:line="76" pos:column="9">_isWrite</name> <op:operator pos:line="76" pos:column="18">=</op:operator> <name><name pos:line="76" pos:column="20">info</name><op:operator pos:line="76" pos:column="24">-&gt;</op:operator><name pos:line="76" pos:column="26">ExceptionRecord</name><op:operator pos:line="76" pos:column="41">-&gt;</op:operator><name pos:line="76" pos:column="43">ExceptionInformation</name><index pos:line="76" pos:column="63">[<expr><lit:literal type="number" pos:line="76" pos:column="64">0</lit:literal></expr>]</index></name> <op:operator pos:line="76" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="76" pos:column="70">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="77" pos:column="9">_badAddress</name> <op:operator pos:line="77" pos:column="21">=</op:operator> <call><name><name pos:line="77" pos:column="23">reinterpret_cast</name><argument_list pos:line="77" pos:column="39">&lt;<argument><expr><name pos:line="77" pos:column="40">ExceptionAddress</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="77" pos:column="57">(<argument><expr><name><name pos:line="77" pos:column="58">info</name><op:operator pos:line="77" pos:column="62">-&gt;</op:operator><name pos:line="77" pos:column="64">ExceptionRecord</name><op:operator pos:line="77" pos:column="79">-&gt;</op:operator><name pos:line="77" pos:column="81">ExceptionInformation</name><index pos:line="77" pos:column="101">[<expr><lit:literal type="number" pos:line="77" pos:column="102">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>
</unit>
