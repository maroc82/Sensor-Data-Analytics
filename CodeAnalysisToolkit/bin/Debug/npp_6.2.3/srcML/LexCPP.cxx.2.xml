<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexCPP.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexCPP.cxx
 ** Lexer for C++, C, Java, and JavaScript.
 ** Further folding features and configuration properties added by "Udo Lechner" &lt;dlchnr(at)gmx(dot)net&gt;
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2005 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef</cpp:directive> <name pos:line="16" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">pragma</cpp:directive> warning(disable: 4786)</cpp:pragma>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;map&gt;</cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"OptionSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"SparseState.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef</cpp:directive> <name pos:line="38" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="39" pos:column="1">using namespace <name pos:line="39" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="42" pos:column="1">static</specifier> <name pos:line="42" pos:column="8">bool</name></type> <name pos:line="42" pos:column="13">IsSpaceEquiv</name><parameter_list pos:line="42" pos:column="25">(<param><decl><type><name pos:line="42" pos:column="26">int</name></type> <name pos:line="42" pos:column="30">state</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="37">{
	<return pos:line="43" pos:column="9">return <expr><op:operator pos:line="43" pos:column="16">(</op:operator><name pos:line="43" pos:column="17">state</name> <op:operator pos:line="43" pos:column="23">&lt;=</op:operator> <name pos:line="43" pos:column="26">SCE_C_COMMENTDOC</name><op:operator pos:line="43" pos:column="42">)</op:operator> <op:operator pos:line="43" pos:column="44">||</op:operator>
		<comment type="line" pos:line="44" pos:column="17">// including SCE_C_DEFAULT, SCE_C_COMMENT, SCE_C_COMMENTLINE</comment>
		<op:operator pos:line="45" pos:column="17">(</op:operator><name pos:line="45" pos:column="18">state</name> <op:operator pos:line="45" pos:column="24">==</op:operator> <name pos:line="45" pos:column="27">SCE_C_COMMENTLINEDOC</name><op:operator pos:line="45" pos:column="47">)</op:operator> <op:operator pos:line="45" pos:column="49">||</op:operator> <op:operator pos:line="45" pos:column="52">(</op:operator><name pos:line="45" pos:column="53">state</name> <op:operator pos:line="45" pos:column="59">==</op:operator> <name pos:line="45" pos:column="62">SCE_C_COMMENTDOCKEYWORD</name><op:operator pos:line="45" pos:column="85">)</op:operator> <op:operator pos:line="45" pos:column="87">||</op:operator>
		<op:operator pos:line="46" pos:column="17">(</op:operator><name pos:line="46" pos:column="18">state</name> <op:operator pos:line="46" pos:column="24">==</op:operator> <name pos:line="46" pos:column="27">SCE_C_COMMENTDOCKEYWORDERROR</name><op:operator pos:line="46" pos:column="55">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="49" pos:column="1">// Preconditions: sc.currentPos points to a character after '+' or '-'.</comment>
<comment type="line" pos:line="50" pos:column="1">// The test for pos reaching 0 should be redundant,</comment>
<comment type="line" pos:line="51" pos:column="1">// and is in only for safety measures.</comment>
<comment type="line" pos:line="52" pos:column="1">// Limitation: this code will give the incorrect answer for code like</comment>
<comment type="line" pos:line="53" pos:column="1">// a = b+++/ptn/...</comment>
<comment type="line" pos:line="54" pos:column="1">// Putting a space between the '++' post-inc operator and the '+' binary op</comment>
<comment type="line" pos:line="55" pos:column="1">// fixes this, and is highly recommended for readability anyway.</comment>
<function><type><specifier pos:line="56" pos:column="1">static</specifier> <name pos:line="56" pos:column="8">bool</name></type> <name pos:line="56" pos:column="13">FollowsPostfixOperator</name><parameter_list pos:line="56" pos:column="35">(<param><decl><type><name pos:line="56" pos:column="36">StyleContext</name> <type:modifier pos:line="56" pos:column="49">&amp;</type:modifier></type><name pos:line="56" pos:column="50">sc</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="54">LexAccessor</name> <type:modifier pos:line="56" pos:column="66">&amp;</type:modifier></type><name pos:line="56" pos:column="67">styler</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="75">{
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">int</name></type> <name pos:line="57" pos:column="13">pos</name> <init pos:line="57" pos:column="17">= <expr><op:operator pos:line="57" pos:column="19">(</op:operator><name pos:line="57" pos:column="20">int</name><op:operator pos:line="57" pos:column="23">)</op:operator> <name><name pos:line="57" pos:column="25">sc</name><op:operator pos:line="57" pos:column="27">.</op:operator><name pos:line="57" pos:column="28">currentPos</name></name></expr></init></decl>;</decl_stmt>
	<while pos:line="58" pos:column="9">while <condition pos:line="58" pos:column="15">(<expr><op:operator pos:line="58" pos:column="16">--</op:operator><name pos:line="58" pos:column="18">pos</name> <op:operator pos:line="58" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="58" pos:column="24">0</lit:literal></expr>)</condition> <block pos:line="58" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="59" pos:column="17">char</name></type> <name pos:line="59" pos:column="22">ch</name> <init pos:line="59" pos:column="25">= <expr><name><name pos:line="59" pos:column="27">styler</name><index pos:line="59" pos:column="33">[<expr><name pos:line="59" pos:column="34">pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">ch</name> <op:operator pos:line="60" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="27">'+'</lit:literal> <op:operator pos:line="60" pos:column="31">||</op:operator> <name pos:line="60" pos:column="34">ch</name> <op:operator pos:line="60" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="40">'-'</lit:literal></expr>)</condition><then pos:line="60" pos:column="44"> <block pos:line="60" pos:column="45">{
			<return pos:line="61" pos:column="25">return <expr><name><name pos:line="61" pos:column="32">styler</name><index pos:line="61" pos:column="38">[<expr><name pos:line="61" pos:column="39">pos</name> <op:operator pos:line="61" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="61" pos:column="45">1</lit:literal></expr>]</index></name> <op:operator pos:line="61" pos:column="48">==</op:operator> <name pos:line="61" pos:column="51">ch</name></expr>;</return>
		}</block></then></if>
	}</block></while>
	<return pos:line="64" pos:column="9">return <expr><lit:literal type="boolean" pos:line="64" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="67" pos:column="1">static</specifier> <name pos:line="67" pos:column="8">bool</name></type> <name pos:line="67" pos:column="13">followsReturnKeyword</name><parameter_list pos:line="67" pos:column="33">(<param><decl><type><name pos:line="67" pos:column="34">StyleContext</name> <type:modifier pos:line="67" pos:column="47">&amp;</type:modifier></type><name pos:line="67" pos:column="48">sc</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="52">LexAccessor</name> <type:modifier pos:line="67" pos:column="64">&amp;</type:modifier></type><name pos:line="67" pos:column="65">styler</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="73">{
	<comment type="line" pos:line="68" pos:column="9">// Don't look at styles, so no need to flush.</comment>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">int</name></type> <name pos:line="69" pos:column="13">pos</name> <init pos:line="69" pos:column="17">= <expr><op:operator pos:line="69" pos:column="19">(</op:operator><name pos:line="69" pos:column="20">int</name><op:operator pos:line="69" pos:column="23">)</op:operator> <name><name pos:line="69" pos:column="25">sc</name><op:operator pos:line="69" pos:column="27">.</op:operator><name pos:line="69" pos:column="28">currentPos</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="70" pos:column="9">int</name></type> <name pos:line="70" pos:column="13">currentLine</name> <init pos:line="70" pos:column="25">= <expr><call><name><name pos:line="70" pos:column="27">styler</name><op:operator pos:line="70" pos:column="33">.</op:operator><name pos:line="70" pos:column="34">GetLine</name></name><argument_list pos:line="70" pos:column="41">(<argument><expr><name pos:line="70" pos:column="42">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="71" pos:column="9">int</name></type> <name pos:line="71" pos:column="13">lineStartPos</name> <init pos:line="71" pos:column="26">= <expr><call><name><name pos:line="71" pos:column="28">styler</name><op:operator pos:line="71" pos:column="34">.</op:operator><name pos:line="71" pos:column="35">LineStart</name></name><argument_list pos:line="71" pos:column="44">(<argument><expr><name pos:line="71" pos:column="45">currentLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">char</name></type> <name pos:line="72" pos:column="14">ch</name></decl>;</decl_stmt>
	<while pos:line="73" pos:column="9">while <condition pos:line="73" pos:column="15">(<expr><op:operator pos:line="73" pos:column="16">--</op:operator><name pos:line="73" pos:column="18">pos</name> <op:operator pos:line="73" pos:column="22">&gt;</op:operator> <name pos:line="73" pos:column="24">lineStartPos</name></expr>)</condition> <block pos:line="73" pos:column="38">{
		<expr_stmt><expr><name pos:line="74" pos:column="17">ch</name> <op:operator pos:line="74" pos:column="20">=</op:operator> <call><name><name pos:line="74" pos:column="22">styler</name><op:operator pos:line="74" pos:column="28">.</op:operator><name pos:line="74" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="74" pos:column="42">(<argument><expr><name pos:line="74" pos:column="43">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">ch</name> <op:operator pos:line="75" pos:column="24">!=</op:operator> <lit:literal type="char" pos:line="75" pos:column="27">' '</lit:literal> <op:operator pos:line="75" pos:column="31">&amp;&amp;</op:operator> <name pos:line="75" pos:column="34">ch</name> <op:operator pos:line="75" pos:column="37">!=</op:operator> <lit:literal type="char" pos:line="75" pos:column="40">'\t'</lit:literal></expr>)</condition><then pos:line="75" pos:column="45"> <block pos:line="75" pos:column="46">{
			<break pos:line="76" pos:column="25">break;</break>
		}</block></then></if>
	}</block></while>
	<decl_stmt><decl><type><specifier pos:line="79" pos:column="9">const</specifier> <name pos:line="79" pos:column="15">char</name> <type:modifier pos:line="79" pos:column="20">*</type:modifier></type><name pos:line="79" pos:column="21">retBack</name> <init pos:line="79" pos:column="29">= <expr><lit:literal type="string" pos:line="79" pos:column="31">"nruter"</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="80" pos:column="9">const</specifier> <name pos:line="80" pos:column="15">char</name> <type:modifier pos:line="80" pos:column="20">*</type:modifier></type><name pos:line="80" pos:column="21">s</name> <init pos:line="80" pos:column="23">= <expr><name pos:line="80" pos:column="25">retBack</name></expr></init></decl>;</decl_stmt>
	<while pos:line="81" pos:column="9">while <condition pos:line="81" pos:column="15">(<expr><op:operator pos:line="81" pos:column="16">*</op:operator><name pos:line="81" pos:column="17">s</name>
		<op:operator pos:line="82" pos:column="17">&amp;&amp;</op:operator> <name pos:line="82" pos:column="20">pos</name> <op:operator pos:line="82" pos:column="24">&gt;=</op:operator> <name pos:line="82" pos:column="27">lineStartPos</name>
		<op:operator pos:line="83" pos:column="17">&amp;&amp;</op:operator> <call><name><name pos:line="83" pos:column="20">styler</name><op:operator pos:line="83" pos:column="26">.</op:operator><name pos:line="83" pos:column="27">SafeGetCharAt</name></name><argument_list pos:line="83" pos:column="40">(<argument><expr><name pos:line="83" pos:column="41">pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="83" pos:column="46">==</op:operator> <op:operator pos:line="83" pos:column="49">*</op:operator><name pos:line="83" pos:column="50">s</name></expr>)</condition> <block pos:line="83" pos:column="53">{
		<expr_stmt><expr><name pos:line="84" pos:column="17">s</name><op:operator pos:line="84" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="85" pos:column="17">pos</name><op:operator pos:line="85" pos:column="20">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="87" pos:column="9">return <expr><op:operator pos:line="87" pos:column="16">!</op:operator><op:operator pos:line="87" pos:column="17">*</op:operator><name pos:line="87" pos:column="18">s</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="90" pos:column="1">static</specifier> <name><name pos:line="90" pos:column="8">std</name><op:operator pos:line="90" pos:column="11">::</op:operator><name pos:line="90" pos:column="13">string</name></name></type> <name pos:line="90" pos:column="20">GetRestOfLine</name><parameter_list pos:line="90" pos:column="33">(<param><decl><type><name pos:line="90" pos:column="34">LexAccessor</name> <type:modifier pos:line="90" pos:column="46">&amp;</type:modifier></type><name pos:line="90" pos:column="47">styler</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="55">int</name></type> <name pos:line="90" pos:column="59">start</name></decl></param>, <param><decl><type><name pos:line="90" pos:column="66">bool</name></type> <name pos:line="90" pos:column="71">allowSpace</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="83">{
	<decl_stmt><decl><type><name><name pos:line="91" pos:column="9">std</name><op:operator pos:line="91" pos:column="12">::</op:operator><name pos:line="91" pos:column="14">string</name></name></type> <name pos:line="91" pos:column="21">restOfLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="92" pos:column="9">int</name></type> <name pos:line="92" pos:column="13">i</name> <init pos:line="92" pos:column="15">=<expr><lit:literal type="number" pos:line="92" pos:column="16">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="93" pos:column="9">char</name></type> <name pos:line="93" pos:column="14">ch</name> <init pos:line="93" pos:column="17">= <expr><call><name><name pos:line="93" pos:column="19">styler</name><op:operator pos:line="93" pos:column="25">.</op:operator><name pos:line="93" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="93" pos:column="39">(<argument><expr><name pos:line="93" pos:column="40">start</name> <op:operator pos:line="93" pos:column="46">+</op:operator> <name pos:line="93" pos:column="48">i</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="93" pos:column="51">'\n'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="94" pos:column="9">while <condition pos:line="94" pos:column="15">(<expr><op:operator pos:line="94" pos:column="16">(</op:operator><name pos:line="94" pos:column="17">ch</name> <op:operator pos:line="94" pos:column="20">!=</op:operator> <lit:literal type="char" pos:line="94" pos:column="23">'\r'</lit:literal><op:operator pos:line="94" pos:column="27">)</op:operator> <op:operator pos:line="94" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="94" pos:column="32">(</op:operator><name pos:line="94" pos:column="33">ch</name> <op:operator pos:line="94" pos:column="36">!=</op:operator> <lit:literal type="char" pos:line="94" pos:column="39">'\n'</lit:literal><op:operator pos:line="94" pos:column="43">)</op:operator></expr>)</condition> <block pos:line="94" pos:column="46">{
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name pos:line="95" pos:column="21">allowSpace</name> <op:operator pos:line="95" pos:column="32">||</op:operator> <op:operator pos:line="95" pos:column="35">(</op:operator><name pos:line="95" pos:column="36">ch</name> <op:operator pos:line="95" pos:column="39">!=</op:operator> <lit:literal type="char" pos:line="95" pos:column="42">' '</lit:literal><op:operator pos:line="95" pos:column="45">)</op:operator></expr>)</condition><then pos:line="95" pos:column="47">
			<expr_stmt><expr><name pos:line="96" pos:column="25">restOfLine</name> <op:operator pos:line="96" pos:column="36">+=</op:operator> <name pos:line="96" pos:column="39">ch</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="97" pos:column="17">i</name><op:operator pos:line="97" pos:column="18">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="98" pos:column="17">ch</name> <op:operator pos:line="98" pos:column="20">=</op:operator> <call><name><name pos:line="98" pos:column="22">styler</name><op:operator pos:line="98" pos:column="28">.</op:operator><name pos:line="98" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="98" pos:column="42">(<argument><expr><name pos:line="98" pos:column="43">start</name> <op:operator pos:line="98" pos:column="49">+</op:operator> <name pos:line="98" pos:column="51">i</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="98" pos:column="54">'\n'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="100" pos:column="9">return <expr><name pos:line="100" pos:column="16">restOfLine</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="103" pos:column="1">static</specifier> <name pos:line="103" pos:column="8">bool</name></type> <name pos:line="103" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="103" pos:column="33">(<param><decl><type><name pos:line="103" pos:column="34">int</name></type> <name pos:line="103" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="103" pos:column="45">{
	<return pos:line="104" pos:column="9">return <expr><name pos:line="104" pos:column="16">style</name> <op:operator pos:line="104" pos:column="22">==</op:operator> <name pos:line="104" pos:column="25">SCE_C_COMMENT</name> <op:operator pos:line="104" pos:column="39">||</op:operator>
		<name pos:line="105" pos:column="17">style</name> <op:operator pos:line="105" pos:column="23">==</op:operator> <name pos:line="105" pos:column="26">SCE_C_COMMENTDOC</name> <op:operator pos:line="105" pos:column="43">||</op:operator>
		<name pos:line="106" pos:column="17">style</name> <op:operator pos:line="106" pos:column="23">==</op:operator> <name pos:line="106" pos:column="26">SCE_C_COMMENTDOCKEYWORD</name> <op:operator pos:line="106" pos:column="50">||</op:operator>
		<name pos:line="107" pos:column="17">style</name> <op:operator pos:line="107" pos:column="23">==</op:operator> <name pos:line="107" pos:column="26">SCE_C_COMMENTDOCKEYWORDERROR</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="110" pos:column="1">static</specifier> <name><name pos:line="110" pos:column="8">std</name><op:operator pos:line="110" pos:column="11">::</op:operator><name><name pos:line="110" pos:column="13">vector</name><argument_list pos:line="110" pos:column="19">&lt;<argument><expr><name><name pos:line="110" pos:column="20">std</name><op:operator pos:line="110" pos:column="23">::</op:operator><name pos:line="110" pos:column="25">string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="110" pos:column="33">Tokenize</name><parameter_list pos:line="110" pos:column="41">(<param><decl><type><specifier pos:line="110" pos:column="42">const</specifier> <name><name pos:line="110" pos:column="48">std</name><op:operator pos:line="110" pos:column="51">::</op:operator><name pos:line="110" pos:column="53">string</name></name> <type:modifier pos:line="110" pos:column="60">&amp;</type:modifier></type><name pos:line="110" pos:column="61">s</name></decl></param>)</parameter_list> <block pos:line="110" pos:column="64">{
	<comment type="line" pos:line="111" pos:column="9">// Break into space separated tokens</comment>
	<decl_stmt><decl><type><name><name pos:line="112" pos:column="9">std</name><op:operator pos:line="112" pos:column="12">::</op:operator><name pos:line="112" pos:column="14">string</name></name></type> <name pos:line="112" pos:column="21">word</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="113" pos:column="9">std</name><op:operator pos:line="113" pos:column="12">::</op:operator><name><name pos:line="113" pos:column="14">vector</name><argument_list pos:line="113" pos:column="20">&lt;<argument><expr><name><name pos:line="113" pos:column="21">std</name><op:operator pos:line="113" pos:column="24">::</op:operator><name pos:line="113" pos:column="26">string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="113" pos:column="34">tokens</name></decl>;</decl_stmt>
	<for pos:line="114" pos:column="9">for (<init><decl><type><specifier pos:line="114" pos:column="14">const</specifier> <name pos:line="114" pos:column="20">char</name> <type:modifier pos:line="114" pos:column="25">*</type:modifier></type><name pos:line="114" pos:column="26">cp</name> <init pos:line="114" pos:column="29">= <expr><call><name><name pos:line="114" pos:column="31">s</name><op:operator pos:line="114" pos:column="32">.</op:operator><name pos:line="114" pos:column="33">c_str</name></name><argument_list pos:line="114" pos:column="38">()</argument_list></call></expr></init></decl>;</init> <condition><expr><op:operator pos:line="114" pos:column="42">*</op:operator><name pos:line="114" pos:column="43">cp</name></expr>;</condition> <incr><expr><name pos:line="114" pos:column="47">cp</name><op:operator pos:line="114" pos:column="49">++</op:operator></expr></incr>) <block pos:line="114" pos:column="53">{
		<if pos:line="115" pos:column="17">if <condition pos:line="115" pos:column="20">(<expr><op:operator pos:line="115" pos:column="21">(</op:operator><op:operator pos:line="115" pos:column="22">*</op:operator><name pos:line="115" pos:column="23">cp</name> <op:operator pos:line="115" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="29">' '</lit:literal><op:operator pos:line="115" pos:column="32">)</op:operator> <op:operator pos:line="115" pos:column="34">||</op:operator> <op:operator pos:line="115" pos:column="37">(</op:operator><op:operator pos:line="115" pos:column="38">*</op:operator><name pos:line="115" pos:column="39">cp</name> <op:operator pos:line="115" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="115" pos:column="45">'\t'</lit:literal><op:operator pos:line="115" pos:column="49">)</op:operator></expr>)</condition><then pos:line="115" pos:column="51"> <block pos:line="115" pos:column="52">{
			<if pos:line="116" pos:column="25">if <condition pos:line="116" pos:column="28">(<expr><op:operator pos:line="116" pos:column="29">!</op:operator><call><name><name pos:line="116" pos:column="30">word</name><op:operator pos:line="116" pos:column="34">.</op:operator><name pos:line="116" pos:column="35">empty</name></name><argument_list pos:line="116" pos:column="40">()</argument_list></call></expr>)</condition><then pos:line="116" pos:column="43"> <block pos:line="116" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="117" pos:column="33">tokens</name><op:operator pos:line="117" pos:column="39">.</op:operator><name pos:line="117" pos:column="40">push_back</name></name><argument_list pos:line="117" pos:column="49">(<argument><expr><name pos:line="117" pos:column="50">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="118" pos:column="33">word</name> <op:operator pos:line="118" pos:column="38">=</op:operator> <lit:literal type="string" pos:line="118" pos:column="40">""</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="120" pos:column="19">else <block pos:line="120" pos:column="24">{
			<expr_stmt><expr><name pos:line="121" pos:column="25">word</name> <op:operator pos:line="121" pos:column="30">+=</op:operator> <op:operator pos:line="121" pos:column="33">*</op:operator><name pos:line="121" pos:column="34">cp</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><op:operator pos:line="124" pos:column="13">!</op:operator><call><name><name pos:line="124" pos:column="14">word</name><op:operator pos:line="124" pos:column="18">.</op:operator><name pos:line="124" pos:column="19">empty</name></name><argument_list pos:line="124" pos:column="24">()</argument_list></call></expr>)</condition><then pos:line="124" pos:column="27"> <block pos:line="124" pos:column="28">{
		<expr_stmt><expr><call><name><name pos:line="125" pos:column="17">tokens</name><op:operator pos:line="125" pos:column="23">.</op:operator><name pos:line="125" pos:column="24">push_back</name></name><argument_list pos:line="125" pos:column="33">(<argument><expr><name pos:line="125" pos:column="34">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="127" pos:column="9">return <expr><name pos:line="127" pos:column="16">tokens</name></expr>;</return>
}</block></function>

<struct pos:line="130" pos:column="1">struct <name pos:line="130" pos:column="8">PPDefinition</name> <block pos:line="130" pos:column="21">{<public type="default" pos:line="130" pos:column="22">
	<decl_stmt><decl><type><name pos:line="131" pos:column="9">int</name></type> <name pos:line="131" pos:column="13">line</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="132" pos:column="9">std</name><op:operator pos:line="132" pos:column="12">::</op:operator><name pos:line="132" pos:column="14">string</name></name></type> <name pos:line="132" pos:column="21">key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="133" pos:column="9">std</name><op:operator pos:line="133" pos:column="12">::</op:operator><name pos:line="133" pos:column="14">string</name></name></type> <name pos:line="133" pos:column="21">value</name></decl>;</decl_stmt>
	<constructor><name pos:line="134" pos:column="9">PPDefinition</name><parameter_list pos:line="134" pos:column="21">(<param><decl><type><name pos:line="134" pos:column="22">int</name></type> <name pos:line="134" pos:column="26">line_</name></decl></param>, <param><decl><type><specifier pos:line="134" pos:column="33">const</specifier> <name><name pos:line="134" pos:column="39">std</name><op:operator pos:line="134" pos:column="42">::</op:operator><name pos:line="134" pos:column="44">string</name></name> <type:modifier pos:line="134" pos:column="51">&amp;</type:modifier></type><name pos:line="134" pos:column="52">key_</name></decl></param>, <param><decl><type><specifier pos:line="134" pos:column="58">const</specifier> <name><name pos:line="134" pos:column="64">std</name><op:operator pos:line="134" pos:column="67">::</op:operator><name pos:line="134" pos:column="69">string</name></name> <type:modifier pos:line="134" pos:column="76">&amp;</type:modifier></type><name pos:line="134" pos:column="77">value_</name></decl></param>)</parameter_list> <member_list pos:line="134" pos:column="85">:
		<call><name pos:line="135" pos:column="17">line</name><argument_list pos:line="135" pos:column="21">(<argument><expr><name pos:line="135" pos:column="22">line_</name></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="28">,</op:operator> <call><name pos:line="135" pos:column="30">key</name><argument_list pos:line="135" pos:column="33">(<argument><expr><name pos:line="135" pos:column="34">key_</name></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="39">,</op:operator> <call><name pos:line="135" pos:column="41">value</name><argument_list pos:line="135" pos:column="46">(<argument><expr><name pos:line="135" pos:column="47">value_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="135" pos:column="55">{
	}</block></constructor>
</public>}</block>;</struct>

<class pos:line="139" pos:column="1">class <name pos:line="139" pos:column="7">LinePPState</name> <block pos:line="139" pos:column="19">{<private type="default" pos:line="139" pos:column="20">
	<decl_stmt><decl><type><name pos:line="140" pos:column="9">int</name></type> <name pos:line="140" pos:column="13">state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="141" pos:column="9">int</name></type> <name pos:line="141" pos:column="13">ifTaken</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">int</name></type> <name pos:line="142" pos:column="13">level</name></decl>;</decl_stmt>
	<function><type><name pos:line="143" pos:column="9">bool</name></type> <name pos:line="143" pos:column="14">ValidLevel</name><parameter_list pos:line="143" pos:column="24">()</parameter_list> <specifier pos:line="143" pos:column="27">const</specifier> <block pos:line="143" pos:column="33">{
		<return pos:line="144" pos:column="17">return <expr><name pos:line="144" pos:column="24">level</name> <op:operator pos:line="144" pos:column="30">&gt;=</op:operator> <lit:literal type="number" pos:line="144" pos:column="33">0</lit:literal> <op:operator pos:line="144" pos:column="35">&amp;&amp;</op:operator> <name pos:line="144" pos:column="38">level</name> <op:operator pos:line="144" pos:column="44">&lt;</op:operator> <lit:literal type="number" pos:line="144" pos:column="46">32</lit:literal></expr>;</return>
	}</block></function>
	<function><type><name pos:line="146" pos:column="9">int</name></type> <name pos:line="146" pos:column="13">maskLevel</name><parameter_list pos:line="146" pos:column="22">()</parameter_list> <specifier pos:line="146" pos:column="25">const</specifier> <block pos:line="146" pos:column="31">{
		<return pos:line="147" pos:column="17">return <expr><lit:literal type="number" pos:line="147" pos:column="24">1</lit:literal> <op:operator pos:line="147" pos:column="26">&lt;&lt;</op:operator> <name pos:line="147" pos:column="29">level</name></expr>;</return>
	}</block></function>
</private><public pos:line="149" pos:column="1">public:
	<constructor><name pos:line="150" pos:column="9">LinePPState</name><parameter_list pos:line="150" pos:column="20">()</parameter_list> <member_list pos:line="150" pos:column="23">: <call><name pos:line="150" pos:column="25">state</name><argument_list pos:line="150" pos:column="30">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="31">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="150" pos:column="33">,</op:operator> <call><name pos:line="150" pos:column="35">ifTaken</name><argument_list pos:line="150" pos:column="42">(<argument><expr><lit:literal type="number" pos:line="150" pos:column="43">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="150" pos:column="45">,</op:operator> <call><name pos:line="150" pos:column="47">level</name><argument_list pos:line="150" pos:column="52">(<argument><expr><op:operator pos:line="150" pos:column="53">-</op:operator><lit:literal type="number" pos:line="150" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="150" pos:column="57">{
	}</block></constructor>
	<function><type><name pos:line="152" pos:column="9">bool</name></type> <name pos:line="152" pos:column="14">IsInactive</name><parameter_list pos:line="152" pos:column="24">()</parameter_list> <specifier pos:line="152" pos:column="27">const</specifier> <block pos:line="152" pos:column="33">{
		<return pos:line="153" pos:column="17">return <expr><name pos:line="153" pos:column="24">state</name> <op:operator pos:line="153" pos:column="30">!=</op:operator> <lit:literal type="number" pos:line="153" pos:column="33">0</lit:literal></expr>;</return>
	}</block></function>
	<function><type><name pos:line="155" pos:column="9">bool</name></type> <name pos:line="155" pos:column="14">CurrentIfTaken</name><parameter_list pos:line="155" pos:column="28">()</parameter_list> <block pos:line="155" pos:column="31">{
		<return pos:line="156" pos:column="17">return <expr><op:operator pos:line="156" pos:column="24">(</op:operator><name pos:line="156" pos:column="25">ifTaken</name> <op:operator pos:line="156" pos:column="33">&amp;</op:operator> <call><name pos:line="156" pos:column="35">maskLevel</name><argument_list pos:line="156" pos:column="44">()</argument_list></call><op:operator pos:line="156" pos:column="46">)</op:operator> <op:operator pos:line="156" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="156" pos:column="51">0</lit:literal></expr>;</return>
	}</block></function>
	<function><type><name pos:line="158" pos:column="9">void</name></type> <name pos:line="158" pos:column="14">StartSection</name><parameter_list pos:line="158" pos:column="26">(<param><decl><type><name pos:line="158" pos:column="27">bool</name></type> <name pos:line="158" pos:column="32">on</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="36">{
		<expr_stmt><expr><name pos:line="159" pos:column="17">level</name><op:operator pos:line="159" pos:column="22">++</op:operator></expr>;</expr_stmt>
		<if pos:line="160" pos:column="17">if <condition pos:line="160" pos:column="20">(<expr><call><name pos:line="160" pos:column="21">ValidLevel</name><argument_list pos:line="160" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="160" pos:column="34"> <block pos:line="160" pos:column="35">{
			<if pos:line="161" pos:column="25">if <condition pos:line="161" pos:column="28">(<expr><name pos:line="161" pos:column="29">on</name></expr>)</condition><then pos:line="161" pos:column="32"> <block pos:line="161" pos:column="33">{
				<expr_stmt><expr><name pos:line="162" pos:column="33">state</name> <op:operator pos:line="162" pos:column="39">&amp;=</op:operator> <op:operator pos:line="162" pos:column="42">~</op:operator><call><name pos:line="162" pos:column="43">maskLevel</name><argument_list pos:line="162" pos:column="52">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="163" pos:column="33">ifTaken</name> <op:operator pos:line="163" pos:column="41">|=</op:operator> <call><name pos:line="163" pos:column="44">maskLevel</name><argument_list pos:line="163" pos:column="53">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="164" pos:column="27">else <block pos:line="164" pos:column="32">{
				<expr_stmt><expr><name pos:line="165" pos:column="33">state</name> <op:operator pos:line="165" pos:column="39">|=</op:operator> <call><name pos:line="165" pos:column="42">maskLevel</name><argument_list pos:line="165" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="166" pos:column="33">ifTaken</name> <op:operator pos:line="166" pos:column="41">&amp;=</op:operator> <op:operator pos:line="166" pos:column="44">~</op:operator><call><name pos:line="166" pos:column="45">maskLevel</name><argument_list pos:line="166" pos:column="54">()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></function>
	<function><type><name pos:line="170" pos:column="9">void</name></type> <name pos:line="170" pos:column="14">EndSection</name><parameter_list pos:line="170" pos:column="24">()</parameter_list> <block pos:line="170" pos:column="27">{
		<if pos:line="171" pos:column="17">if <condition pos:line="171" pos:column="20">(<expr><call><name pos:line="171" pos:column="21">ValidLevel</name><argument_list pos:line="171" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="171" pos:column="34"> <block pos:line="171" pos:column="35">{
			<expr_stmt><expr><name pos:line="172" pos:column="25">state</name> <op:operator pos:line="172" pos:column="31">&amp;=</op:operator> <op:operator pos:line="172" pos:column="34">~</op:operator><call><name pos:line="172" pos:column="35">maskLevel</name><argument_list pos:line="172" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="173" pos:column="25">ifTaken</name> <op:operator pos:line="173" pos:column="33">&amp;=</op:operator> <op:operator pos:line="173" pos:column="36">~</op:operator><call><name pos:line="173" pos:column="37">maskLevel</name><argument_list pos:line="173" pos:column="46">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="175" pos:column="17">level</name><op:operator pos:line="175" pos:column="22">--</op:operator></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="177" pos:column="9">void</name></type> <name pos:line="177" pos:column="14">InvertCurrentLevel</name><parameter_list pos:line="177" pos:column="32">()</parameter_list> <block pos:line="177" pos:column="35">{
		<if pos:line="178" pos:column="17">if <condition pos:line="178" pos:column="20">(<expr><call><name pos:line="178" pos:column="21">ValidLevel</name><argument_list pos:line="178" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="178" pos:column="34"> <block pos:line="178" pos:column="35">{
			<expr_stmt><expr><name pos:line="179" pos:column="25">state</name> <op:operator pos:line="179" pos:column="31">^=</op:operator> <call><name pos:line="179" pos:column="34">maskLevel</name><argument_list pos:line="179" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="180" pos:column="25">ifTaken</name> <op:operator pos:line="180" pos:column="33">|=</op:operator> <call><name pos:line="180" pos:column="36">maskLevel</name><argument_list pos:line="180" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
</public>}</block>;</class>

<comment type="line" pos:line="185" pos:column="1">// Hold the preprocessor state for each line seen.</comment>
<comment type="line" pos:line="186" pos:column="1">// Currently one entry per line but could become sparse with just one entry per preprocessor line.</comment>
<class pos:line="187" pos:column="1">class <name pos:line="187" pos:column="7">PPStates</name> <block pos:line="187" pos:column="16">{<private type="default" pos:line="187" pos:column="17">
	<decl_stmt><decl><type><name><name pos:line="188" pos:column="9">std</name><op:operator pos:line="188" pos:column="12">::</op:operator><name><name pos:line="188" pos:column="14">vector</name><argument_list pos:line="188" pos:column="20">&lt;<argument><expr><name pos:line="188" pos:column="21">LinePPState</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="188" pos:column="34">vlls</name></decl>;</decl_stmt>
</private><public pos:line="189" pos:column="1">public:
	<function><type><name pos:line="190" pos:column="9">LinePPState</name></type> <name pos:line="190" pos:column="21">ForLine</name><parameter_list pos:line="190" pos:column="28">(<param><decl><type><name pos:line="190" pos:column="29">int</name></type> <name pos:line="190" pos:column="33">line</name></decl></param>)</parameter_list> <block pos:line="190" pos:column="39">{
		<if pos:line="191" pos:column="17">if <condition pos:line="191" pos:column="20">(<expr><op:operator pos:line="191" pos:column="21">(</op:operator><name pos:line="191" pos:column="22">line</name> <op:operator pos:line="191" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="191" pos:column="29">0</lit:literal><op:operator pos:line="191" pos:column="30">)</op:operator> <op:operator pos:line="191" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="191" pos:column="35">(</op:operator><call><name><name pos:line="191" pos:column="36">vlls</name><op:operator pos:line="191" pos:column="40">.</op:operator><name pos:line="191" pos:column="41">size</name></name><argument_list pos:line="191" pos:column="45">()</argument_list></call> <op:operator pos:line="191" pos:column="48">&gt;</op:operator> <call><name><name pos:line="191" pos:column="50">static_cast</name><argument_list pos:line="191" pos:column="61">&lt;<argument><expr><name pos:line="191" pos:column="62">size_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="191" pos:column="69">(<argument><expr><name pos:line="191" pos:column="70">line</name></expr></argument>)</argument_list></call><op:operator pos:line="191" pos:column="75">)</op:operator></expr>)</condition><then pos:line="191" pos:column="77"> <block pos:line="191" pos:column="78">{
			<return pos:line="192" pos:column="25">return <expr><name><name pos:line="192" pos:column="32">vlls</name><index pos:line="192" pos:column="36">[<expr><name pos:line="192" pos:column="37">line</name></expr>]</index></name></expr>;</return>
		}</block></then> <else pos:line="193" pos:column="19">else <block pos:line="193" pos:column="24">{
			<return pos:line="194" pos:column="25">return <expr><call><name pos:line="194" pos:column="32">LinePPState</name><argument_list pos:line="194" pos:column="43">()</argument_list></call></expr>;</return>
		}</block></else></if>
	}</block></function>
	<function><type><name pos:line="197" pos:column="9">void</name></type> <name pos:line="197" pos:column="14">Add</name><parameter_list pos:line="197" pos:column="17">(<param><decl><type><name pos:line="197" pos:column="18">int</name></type> <name pos:line="197" pos:column="22">line</name></decl></param>, <param><decl><type><name pos:line="197" pos:column="28">LinePPState</name></type> <name pos:line="197" pos:column="40">lls</name></decl></param>)</parameter_list> <block pos:line="197" pos:column="45">{
		<expr_stmt><expr><call><name><name pos:line="198" pos:column="17">vlls</name><op:operator pos:line="198" pos:column="21">.</op:operator><name pos:line="198" pos:column="22">resize</name></name><argument_list pos:line="198" pos:column="28">(<argument><expr><name pos:line="198" pos:column="29">line</name><op:operator pos:line="198" pos:column="33">+</op:operator><lit:literal type="number" pos:line="198" pos:column="34">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="199" pos:column="17">vlls</name><index pos:line="199" pos:column="21">[<expr><name pos:line="199" pos:column="22">line</name></expr>]</index></name> <op:operator pos:line="199" pos:column="28">=</op:operator> <name pos:line="199" pos:column="30">lls</name></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</class>

<comment type="line" pos:line="203" pos:column="1">// An individual named option for use in an OptionSet</comment>

<comment type="line" pos:line="205" pos:column="1">// Options used for LexerCPP</comment>
<struct pos:line="206" pos:column="1">struct <name pos:line="206" pos:column="8">OptionsCPP</name> <block pos:line="206" pos:column="19">{<public type="default" pos:line="206" pos:column="20">
	<decl_stmt><decl><type><name pos:line="207" pos:column="9">bool</name></type> <name pos:line="207" pos:column="14">stylingWithinPreprocessor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="208" pos:column="9">bool</name></type> <name pos:line="208" pos:column="14">identifiersAllowDollars</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="209" pos:column="9">bool</name></type> <name pos:line="209" pos:column="14">trackPreprocessor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="210" pos:column="9">bool</name></type> <name pos:line="210" pos:column="14">updatePreprocessor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="211" pos:column="9">bool</name></type> <name pos:line="211" pos:column="14">triplequotedStrings</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="212" pos:column="9">bool</name></type> <name pos:line="212" pos:column="14">fold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="213" pos:column="9">bool</name></type> <name pos:line="213" pos:column="14">foldSyntaxBased</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="214" pos:column="9">bool</name></type> <name pos:line="214" pos:column="14">foldComment</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="215" pos:column="9">bool</name></type> <name pos:line="215" pos:column="14">foldCommentMultiline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="216" pos:column="9">bool</name></type> <name pos:line="216" pos:column="14">foldCommentExplicit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="217" pos:column="9">std</name><op:operator pos:line="217" pos:column="12">::</op:operator><name pos:line="217" pos:column="14">string</name></name></type> <name pos:line="217" pos:column="21">foldExplicitStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="218" pos:column="9">std</name><op:operator pos:line="218" pos:column="12">::</op:operator><name pos:line="218" pos:column="14">string</name></name></type> <name pos:line="218" pos:column="21">foldExplicitEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="219" pos:column="9">bool</name></type> <name pos:line="219" pos:column="14">foldExplicitAnywhere</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="220" pos:column="9">bool</name></type> <name pos:line="220" pos:column="14">foldPreprocessor</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="221" pos:column="9">bool</name></type> <name pos:line="221" pos:column="14">foldCompact</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="222" pos:column="9">bool</name></type> <name pos:line="222" pos:column="14">foldAtElse</name></decl>;</decl_stmt>
	<constructor><name pos:line="223" pos:column="9">OptionsCPP</name><parameter_list pos:line="223" pos:column="19">()</parameter_list> <block pos:line="223" pos:column="22">{
		<expr_stmt><expr><name pos:line="224" pos:column="17">stylingWithinPreprocessor</name> <op:operator pos:line="224" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="224" pos:column="45">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="225" pos:column="17">identifiersAllowDollars</name> <op:operator pos:line="225" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="225" pos:column="43">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="226" pos:column="17">trackPreprocessor</name> <op:operator pos:line="226" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="226" pos:column="37">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="227" pos:column="17">updatePreprocessor</name> <op:operator pos:line="227" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="227" pos:column="38">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="228" pos:column="17">triplequotedStrings</name> <op:operator pos:line="228" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="228" pos:column="39">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="229" pos:column="17">fold</name> <op:operator pos:line="229" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="229" pos:column="24">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="230" pos:column="17">foldSyntaxBased</name> <op:operator pos:line="230" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="230" pos:column="35">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="231" pos:column="17">foldComment</name> <op:operator pos:line="231" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="231" pos:column="31">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="232" pos:column="17">foldCommentMultiline</name> <op:operator pos:line="232" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="232" pos:column="40">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="233" pos:column="17">foldCommentExplicit</name> <op:operator pos:line="233" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="233" pos:column="39">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="234" pos:column="17">foldExplicitStart</name> <op:operator pos:line="234" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="234" pos:column="37">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="235" pos:column="17">foldExplicitEnd</name> <op:operator pos:line="235" pos:column="33">=</op:operator> <lit:literal type="string" pos:line="235" pos:column="35">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="236" pos:column="17">foldExplicitAnywhere</name> <op:operator pos:line="236" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="236" pos:column="40">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="237" pos:column="17">foldPreprocessor</name> <op:operator pos:line="237" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="237" pos:column="36">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="238" pos:column="17">foldCompact</name> <op:operator pos:line="238" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="238" pos:column="31">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="239" pos:column="17">foldAtElse</name> <op:operator pos:line="239" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="239" pos:column="30">false</lit:literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier pos:line="243" pos:column="1">static</specifier> <specifier pos:line="243" pos:column="8">const</specifier> <name pos:line="243" pos:column="14">char</name> <type:modifier pos:line="243" pos:column="19">*</type:modifier><specifier pos:line="243" pos:column="20">const</specifier></type> <name><name pos:line="243" pos:column="26">cppWordLists</name><index pos:line="243" pos:column="38">[]</index></name> <init pos:line="243" pos:column="41">= <expr><block pos:line="243" pos:column="43">{
            <expr><lit:literal type="string" pos:line="244" pos:column="13">"Primary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="245" pos:column="13">"Secondary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="246" pos:column="13">"Documentation comment keywords"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="247" pos:column="13">"Global classes and typedefs"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="248" pos:column="13">"Preprocessor definitions"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="249" pos:column="13">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<struct pos:line="252" pos:column="1">struct <name pos:line="252" pos:column="8">OptionSetCPP</name> <super pos:line="252" pos:column="21">: <specifier pos:line="252" pos:column="23">public</specifier> <name><name pos:line="252" pos:column="30">OptionSet</name><argument_list pos:line="252" pos:column="39">&lt;<argument><expr><name pos:line="252" pos:column="40">OptionsCPP</name></expr></argument>&gt;</argument_list></name></super> <block pos:line="252" pos:column="52">{<public type="default" pos:line="252" pos:column="53">
	<constructor><name pos:line="253" pos:column="9">OptionSetCPP</name><parameter_list pos:line="253" pos:column="21">()</parameter_list> <block pos:line="253" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="254" pos:column="17">DefineProperty</name><argument_list pos:line="254" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="254" pos:column="32">"styling.within.preprocessor"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="254" pos:column="63">&amp;</op:operator><name><name pos:line="254" pos:column="64">OptionsCPP</name><op:operator pos:line="254" pos:column="74">::</op:operator><name pos:line="254" pos:column="76">stylingWithinPreprocessor</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="255" pos:column="25">"For C++ code, determines whether all preprocessor code is styled in the "</lit:literal>
			<lit:literal type="string" pos:line="256" pos:column="25">"preprocessor style (0, the default) or only from the initial # to the end "</lit:literal>
			<lit:literal type="string" pos:line="257" pos:column="25">"of the command word(1)."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="259" pos:column="17">DefineProperty</name><argument_list pos:line="259" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="259" pos:column="32">"lexer.cpp.allow.dollars"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="259" pos:column="59">&amp;</op:operator><name><name pos:line="259" pos:column="60">OptionsCPP</name><op:operator pos:line="259" pos:column="70">::</op:operator><name pos:line="259" pos:column="72">identifiersAllowDollars</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="260" pos:column="25">"Set to 0 to disallow the '$' character in identifiers with the cpp lexer."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="262" pos:column="17">DefineProperty</name><argument_list pos:line="262" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="32">"lexer.cpp.track.preprocessor"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="262" pos:column="64">&amp;</op:operator><name><name pos:line="262" pos:column="65">OptionsCPP</name><op:operator pos:line="262" pos:column="75">::</op:operator><name pos:line="262" pos:column="77">trackPreprocessor</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="263" pos:column="25">"Set to 1 to interpret #if/#else/#endif to grey out code that is not active."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="265" pos:column="17">DefineProperty</name><argument_list pos:line="265" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="265" pos:column="32">"lexer.cpp.update.preprocessor"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="265" pos:column="65">&amp;</op:operator><name><name pos:line="265" pos:column="66">OptionsCPP</name><op:operator pos:line="265" pos:column="76">::</op:operator><name pos:line="265" pos:column="78">updatePreprocessor</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="266" pos:column="25">"Set to 1 to update preprocessor definitions when #define found."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="268" pos:column="17">DefineProperty</name><argument_list pos:line="268" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="268" pos:column="32">"lexer.cpp.triplequoted.strings"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="268" pos:column="66">&amp;</op:operator><name><name pos:line="268" pos:column="67">OptionsCPP</name><op:operator pos:line="268" pos:column="77">::</op:operator><name pos:line="268" pos:column="79">triplequotedStrings</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="269" pos:column="25">"Set to 1 to enable highlighting of triple-quoted strings."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="271" pos:column="17">DefineProperty</name><argument_list pos:line="271" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="271" pos:column="32">"fold"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="271" pos:column="40">&amp;</op:operator><name><name pos:line="271" pos:column="41">OptionsCPP</name><op:operator pos:line="271" pos:column="51">::</op:operator><name pos:line="271" pos:column="53">fold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="273" pos:column="17">DefineProperty</name><argument_list pos:line="273" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="273" pos:column="32">"fold.cpp.syntax.based"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="273" pos:column="57">&amp;</op:operator><name><name pos:line="273" pos:column="58">OptionsCPP</name><op:operator pos:line="273" pos:column="68">::</op:operator><name pos:line="273" pos:column="70">foldSyntaxBased</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="274" pos:column="25">"Set this property to 0 to disable syntax based folding."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="276" pos:column="17">DefineProperty</name><argument_list pos:line="276" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="276" pos:column="32">"fold.comment"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="276" pos:column="48">&amp;</op:operator><name><name pos:line="276" pos:column="49">OptionsCPP</name><op:operator pos:line="276" pos:column="59">::</op:operator><name pos:line="276" pos:column="61">foldComment</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="277" pos:column="25">"This option enables folding multi-line comments and explicit fold points when using the C++ lexer. "</lit:literal>
			<lit:literal type="string" pos:line="278" pos:column="25">"Explicit fold points allows adding extra folding by placing a //{ comment at the start and a //} "</lit:literal>
			<lit:literal type="string" pos:line="279" pos:column="25">"at the end of a section that should fold."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="281" pos:column="17">DefineProperty</name><argument_list pos:line="281" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="281" pos:column="32">"fold.cpp.comment.multiline"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="281" pos:column="62">&amp;</op:operator><name><name pos:line="281" pos:column="63">OptionsCPP</name><op:operator pos:line="281" pos:column="73">::</op:operator><name pos:line="281" pos:column="75">foldCommentMultiline</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="282" pos:column="25">"Set this property to 0 to disable folding multi-line comments when fold.comment=1."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="284" pos:column="17">DefineProperty</name><argument_list pos:line="284" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="284" pos:column="32">"fold.cpp.comment.explicit"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="284" pos:column="61">&amp;</op:operator><name><name pos:line="284" pos:column="62">OptionsCPP</name><op:operator pos:line="284" pos:column="72">::</op:operator><name pos:line="284" pos:column="74">foldCommentExplicit</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="285" pos:column="25">"Set this property to 0 to disable folding explicit fold points when fold.comment=1."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="287" pos:column="17">DefineProperty</name><argument_list pos:line="287" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="287" pos:column="32">"fold.cpp.explicit.start"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="287" pos:column="59">&amp;</op:operator><name><name pos:line="287" pos:column="60">OptionsCPP</name><op:operator pos:line="287" pos:column="70">::</op:operator><name pos:line="287" pos:column="72">foldExplicitStart</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="288" pos:column="25">"The string to use for explicit fold start points, replacing the standard //{."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="290" pos:column="17">DefineProperty</name><argument_list pos:line="290" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="290" pos:column="32">"fold.cpp.explicit.end"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="290" pos:column="57">&amp;</op:operator><name><name pos:line="290" pos:column="58">OptionsCPP</name><op:operator pos:line="290" pos:column="68">::</op:operator><name pos:line="290" pos:column="70">foldExplicitEnd</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="291" pos:column="25">"The string to use for explicit fold end points, replacing the standard //}."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="293" pos:column="17">DefineProperty</name><argument_list pos:line="293" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="293" pos:column="32">"fold.cpp.explicit.anywhere"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="293" pos:column="62">&amp;</op:operator><name><name pos:line="293" pos:column="63">OptionsCPP</name><op:operator pos:line="293" pos:column="73">::</op:operator><name pos:line="293" pos:column="75">foldExplicitAnywhere</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="294" pos:column="25">"Set this property to 1 to enable explicit fold points anywhere, not just in line comments."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="296" pos:column="17">DefineProperty</name><argument_list pos:line="296" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="296" pos:column="32">"fold.preprocessor"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="296" pos:column="53">&amp;</op:operator><name><name pos:line="296" pos:column="54">OptionsCPP</name><op:operator pos:line="296" pos:column="64">::</op:operator><name pos:line="296" pos:column="66">foldPreprocessor</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="297" pos:column="25">"This option enables folding preprocessor directives when using the C++ lexer. "</lit:literal>
			<lit:literal type="string" pos:line="298" pos:column="25">"Includes C#'s explicit #region and #endregion folding directives."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="300" pos:column="17">DefineProperty</name><argument_list pos:line="300" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="300" pos:column="32">"fold.compact"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="300" pos:column="48">&amp;</op:operator><name><name pos:line="300" pos:column="49">OptionsCPP</name><op:operator pos:line="300" pos:column="59">::</op:operator><name pos:line="300" pos:column="61">foldCompact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="302" pos:column="17">DefineProperty</name><argument_list pos:line="302" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="302" pos:column="32">"fold.at.else"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="302" pos:column="48">&amp;</op:operator><name><name pos:line="302" pos:column="49">OptionsCPP</name><op:operator pos:line="302" pos:column="59">::</op:operator><name pos:line="302" pos:column="61">foldAtElse</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="303" pos:column="25">"This option enables C++ folding on a \"} else {\" line of an if statement."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="305" pos:column="17">DefineWordListSets</name><argument_list pos:line="305" pos:column="35">(<argument><expr><name pos:line="305" pos:column="36">cppWordLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<class pos:line="309" pos:column="1">class <name pos:line="309" pos:column="7">LexerCPP</name> <super pos:line="309" pos:column="16">: <specifier pos:line="309" pos:column="18">public</specifier> <name pos:line="309" pos:column="25">ILexer</name></super> <block pos:line="309" pos:column="32">{<private type="default" pos:line="309" pos:column="33">
	<decl_stmt><decl><type><name pos:line="310" pos:column="9">bool</name></type> <name pos:line="310" pos:column="14">caseSensitive</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="311" pos:column="9">CharacterSet</name></type> <name pos:line="311" pos:column="22">setWord</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="312" pos:column="9">CharacterSet</name></type> <name pos:line="312" pos:column="22">setNegationOp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="313" pos:column="9">CharacterSet</name></type> <name pos:line="313" pos:column="22">setArithmethicOp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="314" pos:column="9">CharacterSet</name></type> <name pos:line="314" pos:column="22">setRelOp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="315" pos:column="9">CharacterSet</name></type> <name pos:line="315" pos:column="22">setLogicalOp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="316" pos:column="9">PPStates</name></type> <name pos:line="316" pos:column="18">vlls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="317" pos:column="9">std</name><op:operator pos:line="317" pos:column="12">::</op:operator><name><name pos:line="317" pos:column="14">vector</name><argument_list pos:line="317" pos:column="20">&lt;<argument><expr><name pos:line="317" pos:column="21">PPDefinition</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="317" pos:column="35">ppDefineHistory</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="318" pos:column="9">WordList</name></type> <name pos:line="318" pos:column="18">keywords</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="319" pos:column="9">WordList</name></type> <name pos:line="319" pos:column="18">keywords2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="320" pos:column="9">WordList</name></type> <name pos:line="320" pos:column="18">keywords3</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="321" pos:column="9">WordList</name></type> <name pos:line="321" pos:column="18">keywords4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="322" pos:column="9">WordList</name></type> <name pos:line="322" pos:column="18">ppDefinitions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="323" pos:column="9">std</name><op:operator pos:line="323" pos:column="12">::</op:operator><name><name pos:line="323" pos:column="14">map</name><argument_list pos:line="323" pos:column="17">&lt;<argument><expr><name><name pos:line="323" pos:column="18">std</name><op:operator pos:line="323" pos:column="21">::</op:operator><name pos:line="323" pos:column="23">string</name></name></expr></argument>, <argument><expr><name><name pos:line="323" pos:column="31">std</name><op:operator pos:line="323" pos:column="34">::</op:operator><name pos:line="323" pos:column="36">string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="323" pos:column="44">preprocessorDefinitionsStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="324" pos:column="9">OptionsCPP</name></type> <name pos:line="324" pos:column="20">options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="325" pos:column="9">OptionSetCPP</name></type> <name pos:line="325" pos:column="22">osCPP</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="326" pos:column="9">SparseState</name><argument_list pos:line="326" pos:column="20">&lt;<argument><expr><name><name pos:line="326" pos:column="21">std</name><op:operator pos:line="326" pos:column="24">::</op:operator><name pos:line="326" pos:column="26">string</name></name></expr></argument>&gt;</argument_list></name></type> <name pos:line="326" pos:column="34">rawStringTerminators</name></decl>;</decl_stmt>
	<enum pos:line="327" pos:column="9">enum <block pos:line="327" pos:column="14">{ <decl><name pos:line="327" pos:column="16">activeFlag</name> <init pos:line="327" pos:column="27">= <expr><lit:literal type="number" pos:line="327" pos:column="29">0x40</lit:literal></expr></init></decl> }</block>;</enum>
</private><public pos:line="328" pos:column="1">public:
	<constructor><name pos:line="329" pos:column="9">LexerCPP</name><parameter_list pos:line="329" pos:column="17">(<param><decl><type><name pos:line="329" pos:column="18">bool</name></type> <name pos:line="329" pos:column="23">caseSensitive_</name></decl></param>)</parameter_list> <member_list pos:line="329" pos:column="39">:
		<call><name pos:line="330" pos:column="17">caseSensitive</name><argument_list pos:line="330" pos:column="30">(<argument><expr><name pos:line="330" pos:column="31">caseSensitive_</name></expr></argument>)</argument_list></call><op:operator pos:line="330" pos:column="46">,</op:operator>
		<call><name pos:line="331" pos:column="17">setWord</name><argument_list pos:line="331" pos:column="24">(<argument><expr><name><name pos:line="331" pos:column="25">CharacterSet</name><op:operator pos:line="331" pos:column="37">::</op:operator><name pos:line="331" pos:column="39">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="331" pos:column="52">"._"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="331" pos:column="58">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="331" pos:column="64">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="331" pos:column="69">,</op:operator>
		<call><name pos:line="332" pos:column="17">setNegationOp</name><argument_list pos:line="332" pos:column="30">(<argument><expr><name><name pos:line="332" pos:column="31">CharacterSet</name><op:operator pos:line="332" pos:column="43">::</op:operator><name pos:line="332" pos:column="45">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="332" pos:column="54">"!"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="332" pos:column="58">,</op:operator>
		<call><name pos:line="333" pos:column="17">setArithmethicOp</name><argument_list pos:line="333" pos:column="33">(<argument><expr><name><name pos:line="333" pos:column="34">CharacterSet</name><op:operator pos:line="333" pos:column="46">::</op:operator><name pos:line="333" pos:column="48">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="333" pos:column="57">"+-/*%"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="333" pos:column="65">,</op:operator>
		<call><name pos:line="334" pos:column="17">setRelOp</name><argument_list pos:line="334" pos:column="25">(<argument><expr><name><name pos:line="334" pos:column="26">CharacterSet</name><op:operator pos:line="334" pos:column="38">::</op:operator><name pos:line="334" pos:column="40">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="334" pos:column="49">"=!&lt;&gt;"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="334" pos:column="56">,</op:operator>
		<call><name pos:line="335" pos:column="17">setLogicalOp</name><argument_list pos:line="335" pos:column="29">(<argument><expr><name><name pos:line="335" pos:column="30">CharacterSet</name><op:operator pos:line="335" pos:column="42">::</op:operator><name pos:line="335" pos:column="44">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="335" pos:column="53">"|&amp;"</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="335" pos:column="59">{
	}</block></constructor>
	<destructor><name pos:line="337" pos:column="9">~<name pos:line="337" pos:column="10">LexerCPP</name></name><parameter_list pos:line="337" pos:column="18">()</parameter_list> <block pos:line="337" pos:column="21">{
	}</block></destructor>
	<function><type><name pos:line="339" pos:column="9">void</name> <name pos:line="339" pos:column="14">SCI_METHOD</name></type> <name pos:line="339" pos:column="25">Release</name><parameter_list pos:line="339" pos:column="32">()</parameter_list> <block pos:line="339" pos:column="35">{
		<expr_stmt><expr><op:operator pos:line="340" pos:column="17">delete</op:operator> <name pos:line="340" pos:column="24">this</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="342" pos:column="9">int</name> <name pos:line="342" pos:column="13">SCI_METHOD</name></type> <name pos:line="342" pos:column="24">Version</name><parameter_list pos:line="342" pos:column="31">()</parameter_list> <specifier pos:line="342" pos:column="34">const</specifier> <block pos:line="342" pos:column="40">{
		<return pos:line="343" pos:column="17">return <expr><name pos:line="343" pos:column="24">lvOriginal</name></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="345" pos:column="9">const</specifier> <name pos:line="345" pos:column="15">char</name> <type:modifier pos:line="345" pos:column="20">*</type:modifier> <name pos:line="345" pos:column="22">SCI_METHOD</name></type> <name pos:line="345" pos:column="33">PropertyNames</name><parameter_list pos:line="345" pos:column="46">()</parameter_list> <block pos:line="345" pos:column="49">{
		<return pos:line="346" pos:column="17">return <expr><call><name><name pos:line="346" pos:column="24">osCPP</name><op:operator pos:line="346" pos:column="29">.</op:operator><name pos:line="346" pos:column="30">PropertyNames</name></name><argument_list pos:line="346" pos:column="43">()</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="348" pos:column="9">int</name> <name pos:line="348" pos:column="13">SCI_METHOD</name></type> <name pos:line="348" pos:column="24">PropertyType</name><parameter_list pos:line="348" pos:column="36">(<param><decl><type><specifier pos:line="348" pos:column="37">const</specifier> <name pos:line="348" pos:column="43">char</name> <type:modifier pos:line="348" pos:column="48">*</type:modifier></type><name pos:line="348" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="348" pos:column="55">{
		<return pos:line="349" pos:column="17">return <expr><call><name><name pos:line="349" pos:column="24">osCPP</name><op:operator pos:line="349" pos:column="29">.</op:operator><name pos:line="349" pos:column="30">PropertyType</name></name><argument_list pos:line="349" pos:column="42">(<argument><expr><name pos:line="349" pos:column="43">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="351" pos:column="9">const</specifier> <name pos:line="351" pos:column="15">char</name> <type:modifier pos:line="351" pos:column="20">*</type:modifier> <name pos:line="351" pos:column="22">SCI_METHOD</name></type> <name pos:line="351" pos:column="33">DescribeProperty</name><parameter_list pos:line="351" pos:column="49">(<param><decl><type><specifier pos:line="351" pos:column="50">const</specifier> <name pos:line="351" pos:column="56">char</name> <type:modifier pos:line="351" pos:column="61">*</type:modifier></type><name pos:line="351" pos:column="62">name</name></decl></param>)</parameter_list> <block pos:line="351" pos:column="68">{
		<return pos:line="352" pos:column="17">return <expr><call><name><name pos:line="352" pos:column="24">osCPP</name><op:operator pos:line="352" pos:column="29">.</op:operator><name pos:line="352" pos:column="30">DescribeProperty</name></name><argument_list pos:line="352" pos:column="46">(<argument><expr><name pos:line="352" pos:column="47">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="354" pos:column="9">int</name> <name pos:line="354" pos:column="13">SCI_METHOD</name></type> <name pos:line="354" pos:column="24">PropertySet</name><parameter_list pos:line="354" pos:column="35">(<param><decl><type><specifier pos:line="354" pos:column="36">const</specifier> <name pos:line="354" pos:column="42">char</name> <type:modifier pos:line="354" pos:column="47">*</type:modifier></type><name pos:line="354" pos:column="48">key</name></decl></param>, <param><decl><type><specifier pos:line="354" pos:column="53">const</specifier> <name pos:line="354" pos:column="59">char</name> <type:modifier pos:line="354" pos:column="64">*</type:modifier></type><name pos:line="354" pos:column="65">val</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><specifier pos:line="355" pos:column="9">const</specifier> <name pos:line="355" pos:column="15">char</name> <type:modifier pos:line="355" pos:column="20">*</type:modifier> <name pos:line="355" pos:column="22">SCI_METHOD</name></type> <name pos:line="355" pos:column="33">DescribeWordListSets</name><parameter_list pos:line="355" pos:column="53">()</parameter_list> <block pos:line="355" pos:column="56">{
		<return pos:line="356" pos:column="17">return <expr><call><name><name pos:line="356" pos:column="24">osCPP</name><op:operator pos:line="356" pos:column="29">.</op:operator><name pos:line="356" pos:column="30">DescribeWordListSets</name></name><argument_list pos:line="356" pos:column="50">()</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="358" pos:column="9">int</name> <name pos:line="358" pos:column="13">SCI_METHOD</name></type> <name pos:line="358" pos:column="24">WordListSet</name><parameter_list pos:line="358" pos:column="35">(<param><decl><type><name pos:line="358" pos:column="36">int</name></type> <name pos:line="358" pos:column="40">n</name></decl></param>, <param><decl><type><specifier pos:line="358" pos:column="43">const</specifier> <name pos:line="358" pos:column="49">char</name> <type:modifier pos:line="358" pos:column="54">*</type:modifier></type><name pos:line="358" pos:column="55">wl</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="359" pos:column="9">void</name> <name pos:line="359" pos:column="14">SCI_METHOD</name></type> <name pos:line="359" pos:column="25">Lex</name><parameter_list pos:line="359" pos:column="28">(<param><decl><type><name pos:line="359" pos:column="29">unsigned</name> <name pos:line="359" pos:column="38">int</name></type> <name pos:line="359" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="359" pos:column="52">int</name></type> <name pos:line="359" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="359" pos:column="64">int</name></type> <name pos:line="359" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="359" pos:column="79">IDocument</name> <type:modifier pos:line="359" pos:column="89">*</type:modifier></type><name pos:line="359" pos:column="90">pAccess</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="360" pos:column="9">void</name> <name pos:line="360" pos:column="14">SCI_METHOD</name></type> <name pos:line="360" pos:column="25">Fold</name><parameter_list pos:line="360" pos:column="29">(<param><decl><type><name pos:line="360" pos:column="30">unsigned</name> <name pos:line="360" pos:column="39">int</name></type> <name pos:line="360" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="360" pos:column="53">int</name></type> <name pos:line="360" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="360" pos:column="65">int</name></type> <name pos:line="360" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="360" pos:column="80">IDocument</name> <type:modifier pos:line="360" pos:column="90">*</type:modifier></type><name pos:line="360" pos:column="91">pAccess</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="362" pos:column="9">void</name> <type:modifier pos:line="362" pos:column="14">*</type:modifier> <name pos:line="362" pos:column="16">SCI_METHOD</name></type> <name pos:line="362" pos:column="27">PrivateCall</name><parameter_list pos:line="362" pos:column="38">(<param><decl><type><name pos:line="362" pos:column="39">int</name></type></decl></param>, <param><decl><type><name pos:line="362" pos:column="44">void</name> <type:modifier pos:line="362" pos:column="49">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="362" pos:column="52">{
		<return pos:line="363" pos:column="17">return <expr><lit:literal type="number" pos:line="363" pos:column="24">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="366" pos:column="9">static</specifier> <name pos:line="366" pos:column="16">ILexer</name> <type:modifier pos:line="366" pos:column="23">*</type:modifier></type><name pos:line="366" pos:column="24">LexerFactoryCPP</name><parameter_list pos:line="366" pos:column="39">()</parameter_list> <block pos:line="366" pos:column="42">{
		<return pos:line="367" pos:column="17">return <expr><op:operator pos:line="367" pos:column="24">new</op:operator> <call><name pos:line="367" pos:column="28">LexerCPP</name><argument_list pos:line="367" pos:column="36">(<argument><expr><lit:literal type="boolean" pos:line="367" pos:column="37">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="369" pos:column="9">static</specifier> <name pos:line="369" pos:column="16">ILexer</name> <type:modifier pos:line="369" pos:column="23">*</type:modifier></type><name pos:line="369" pos:column="24">LexerFactoryCPPInsensitive</name><parameter_list pos:line="369" pos:column="50">()</parameter_list> <block pos:line="369" pos:column="53">{
		<return pos:line="370" pos:column="17">return <expr><op:operator pos:line="370" pos:column="24">new</op:operator> <call><name pos:line="370" pos:column="28">LexerCPP</name><argument_list pos:line="370" pos:column="36">(<argument><expr><lit:literal type="boolean" pos:line="370" pos:column="37">false</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="372" pos:column="9">static</specifier> <name pos:line="372" pos:column="16">int</name></type> <name pos:line="372" pos:column="20">MaskActive</name><parameter_list pos:line="372" pos:column="30">(<param><decl><type><name pos:line="372" pos:column="31">int</name></type> <name pos:line="372" pos:column="35">style</name></decl></param>)</parameter_list> <block pos:line="372" pos:column="42">{
		<return pos:line="373" pos:column="17">return <expr><name pos:line="373" pos:column="24">style</name> <op:operator pos:line="373" pos:column="30">&amp;</op:operator> <op:operator pos:line="373" pos:column="32">~</op:operator><name pos:line="373" pos:column="33">activeFlag</name></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="375" pos:column="9">void</name></type> <name pos:line="375" pos:column="14">EvaluateTokens</name><parameter_list pos:line="375" pos:column="28">(<param><decl><type><name><name pos:line="375" pos:column="29">std</name><op:operator pos:line="375" pos:column="32">::</op:operator><name><name pos:line="375" pos:column="34">vector</name><argument_list pos:line="375" pos:column="40">&lt;<argument><expr><name><name pos:line="375" pos:column="41">std</name><op:operator pos:line="375" pos:column="44">::</op:operator><name pos:line="375" pos:column="46">string</name></name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="375" pos:column="54">&amp;</type:modifier></type><name pos:line="375" pos:column="55">tokens</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="376" pos:column="9">bool</name></type> <name pos:line="376" pos:column="14">EvaluateExpression</name><parameter_list pos:line="376" pos:column="32">(<param><decl><type><specifier pos:line="376" pos:column="33">const</specifier> <name><name pos:line="376" pos:column="39">std</name><op:operator pos:line="376" pos:column="42">::</op:operator><name pos:line="376" pos:column="44">string</name></name> <type:modifier pos:line="376" pos:column="51">&amp;</type:modifier></type><name pos:line="376" pos:column="52">expr</name></decl></param>, <param><decl><type><specifier pos:line="376" pos:column="58">const</specifier> <name><name pos:line="376" pos:column="64">std</name><op:operator pos:line="376" pos:column="67">::</op:operator><name><name pos:line="376" pos:column="69">map</name><argument_list pos:line="376" pos:column="72">&lt;<argument><expr><name><name pos:line="376" pos:column="73">std</name><op:operator pos:line="376" pos:column="76">::</op:operator><name pos:line="376" pos:column="78">string</name></name></expr></argument>, <argument><expr><name><name pos:line="376" pos:column="86">std</name><op:operator pos:line="376" pos:column="89">::</op:operator><name pos:line="376" pos:column="91">string</name></name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="376" pos:column="99">&amp;</type:modifier></type><name pos:line="376" pos:column="100">preprocessorDefinitions</name></decl></param>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<function><type><name pos:line="379" pos:column="1">int</name> <name pos:line="379" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="379" pos:column="16">LexerCPP</name><op:operator pos:line="379" pos:column="24">::</op:operator><name pos:line="379" pos:column="26">PropertySet</name></name><parameter_list pos:line="379" pos:column="37">(<param><decl><type><specifier pos:line="379" pos:column="38">const</specifier> <name pos:line="379" pos:column="44">char</name> <type:modifier pos:line="379" pos:column="49">*</type:modifier></type><name pos:line="379" pos:column="50">key</name></decl></param>, <param><decl><type><specifier pos:line="379" pos:column="55">const</specifier> <name pos:line="379" pos:column="61">char</name> <type:modifier pos:line="379" pos:column="66">*</type:modifier></type><name pos:line="379" pos:column="67">val</name></decl></param>)</parameter_list> <block pos:line="379" pos:column="72">{
	<if pos:line="380" pos:column="9">if <condition pos:line="380" pos:column="12">(<expr><call><name><name pos:line="380" pos:column="13">osCPP</name><op:operator pos:line="380" pos:column="18">.</op:operator><name pos:line="380" pos:column="19">PropertySet</name></name><argument_list pos:line="380" pos:column="30">(<argument><expr><op:operator pos:line="380" pos:column="31">&amp;</op:operator><name pos:line="380" pos:column="32">options</name></expr></argument>, <argument><expr><name pos:line="380" pos:column="41">key</name></expr></argument>, <argument><expr><name pos:line="380" pos:column="46">val</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="380" pos:column="51"> <block pos:line="380" pos:column="52">{
		<return pos:line="381" pos:column="17">return <expr><lit:literal type="number" pos:line="381" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="383" pos:column="9">return <expr><op:operator pos:line="383" pos:column="16">-</op:operator><lit:literal type="number" pos:line="383" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="386" pos:column="1">int</name> <name pos:line="386" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="386" pos:column="16">LexerCPP</name><op:operator pos:line="386" pos:column="24">::</op:operator><name pos:line="386" pos:column="26">WordListSet</name></name><parameter_list pos:line="386" pos:column="37">(<param><decl><type><name pos:line="386" pos:column="38">int</name></type> <name pos:line="386" pos:column="42">n</name></decl></param>, <param><decl><type><specifier pos:line="386" pos:column="45">const</specifier> <name pos:line="386" pos:column="51">char</name> <type:modifier pos:line="386" pos:column="56">*</type:modifier></type><name pos:line="386" pos:column="57">wl</name></decl></param>)</parameter_list> <block pos:line="386" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="387" pos:column="9">WordList</name> <type:modifier pos:line="387" pos:column="18">*</type:modifier></type><name pos:line="387" pos:column="19">wordListN</name> <init pos:line="387" pos:column="29">= <expr><lit:literal type="number" pos:line="387" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<switch pos:line="388" pos:column="9">switch <condition pos:line="388" pos:column="16">(<expr><name pos:line="388" pos:column="17">n</name></expr>)</condition> <block pos:line="388" pos:column="20">{
	<case pos:line="389" pos:column="9">case <expr><lit:literal type="number" pos:line="389" pos:column="14">0</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="390" pos:column="17">wordListN</name> <op:operator pos:line="390" pos:column="27">=</op:operator> <op:operator pos:line="390" pos:column="29">&amp;</op:operator><name pos:line="390" pos:column="30">keywords</name></expr>;</expr_stmt>
		<break pos:line="391" pos:column="17">break;</break>
	</case><case pos:line="392" pos:column="9">case <expr><lit:literal type="number" pos:line="392" pos:column="14">1</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="393" pos:column="17">wordListN</name> <op:operator pos:line="393" pos:column="27">=</op:operator> <op:operator pos:line="393" pos:column="29">&amp;</op:operator><name pos:line="393" pos:column="30">keywords2</name></expr>;</expr_stmt>
		<break pos:line="394" pos:column="17">break;</break>
	</case><case pos:line="395" pos:column="9">case <expr><lit:literal type="number" pos:line="395" pos:column="14">2</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="396" pos:column="17">wordListN</name> <op:operator pos:line="396" pos:column="27">=</op:operator> <op:operator pos:line="396" pos:column="29">&amp;</op:operator><name pos:line="396" pos:column="30">keywords3</name></expr>;</expr_stmt>
		<break pos:line="397" pos:column="17">break;</break>
	</case><case pos:line="398" pos:column="9">case <expr><lit:literal type="number" pos:line="398" pos:column="14">3</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="399" pos:column="17">wordListN</name> <op:operator pos:line="399" pos:column="27">=</op:operator> <op:operator pos:line="399" pos:column="29">&amp;</op:operator><name pos:line="399" pos:column="30">keywords4</name></expr>;</expr_stmt>
		<break pos:line="400" pos:column="17">break;</break>
	</case><case pos:line="401" pos:column="9">case <expr><lit:literal type="number" pos:line="401" pos:column="14">4</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="402" pos:column="17">wordListN</name> <op:operator pos:line="402" pos:column="27">=</op:operator> <op:operator pos:line="402" pos:column="29">&amp;</op:operator><name pos:line="402" pos:column="30">ppDefinitions</name></expr>;</expr_stmt>
		<break pos:line="403" pos:column="17">break;</break>
	</case>}</block></switch>
	<decl_stmt><decl><type><name pos:line="405" pos:column="9">int</name></type> <name pos:line="405" pos:column="13">firstModification</name> <init pos:line="405" pos:column="31">= <expr><op:operator pos:line="405" pos:column="33">-</op:operator><lit:literal type="number" pos:line="405" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="406" pos:column="9">if <condition pos:line="406" pos:column="12">(<expr><name pos:line="406" pos:column="13">wordListN</name></expr>)</condition><then pos:line="406" pos:column="23"> <block pos:line="406" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="407" pos:column="17">WordList</name></type> <name pos:line="407" pos:column="26">wlNew</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="408" pos:column="17">wlNew</name><op:operator pos:line="408" pos:column="22">.</op:operator><name pos:line="408" pos:column="23">Set</name></name><argument_list pos:line="408" pos:column="26">(<argument><expr><name pos:line="408" pos:column="27">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="409" pos:column="17">if <condition pos:line="409" pos:column="20">(<expr><op:operator pos:line="409" pos:column="21">*</op:operator><name pos:line="409" pos:column="22">wordListN</name> <op:operator pos:line="409" pos:column="32">!=</op:operator> <name pos:line="409" pos:column="35">wlNew</name></expr>)</condition><then pos:line="409" pos:column="41"> <block pos:line="409" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="410" pos:column="25">wordListN</name><op:operator pos:line="410" pos:column="34">-&gt;</op:operator><name pos:line="410" pos:column="36">Set</name></name><argument_list pos:line="410" pos:column="39">(<argument><expr><name pos:line="410" pos:column="40">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="411" pos:column="25">firstModification</name> <op:operator pos:line="411" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="411" pos:column="45">0</lit:literal></expr>;</expr_stmt>
			<if pos:line="412" pos:column="25">if <condition pos:line="412" pos:column="28">(<expr><name pos:line="412" pos:column="29">n</name> <op:operator pos:line="412" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="412" pos:column="34">4</lit:literal></expr>)</condition><then pos:line="412" pos:column="36"> <block pos:line="412" pos:column="37">{
				<comment type="line" pos:line="413" pos:column="33">// Rebuild preprocessorDefinitions</comment>
				<expr_stmt><expr><call><name><name pos:line="414" pos:column="33">preprocessorDefinitionsStart</name><op:operator pos:line="414" pos:column="61">.</op:operator><name pos:line="414" pos:column="62">clear</name></name><argument_list pos:line="414" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
				<for pos:line="415" pos:column="33">for (<init><decl><type><name pos:line="415" pos:column="38">int</name></type> <name pos:line="415" pos:column="42">nDefinition</name> <init pos:line="415" pos:column="54">= <expr><lit:literal type="number" pos:line="415" pos:column="56">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="415" pos:column="59">nDefinition</name> <op:operator pos:line="415" pos:column="71">&lt;</op:operator> <name><name pos:line="415" pos:column="73">ppDefinitions</name><op:operator pos:line="415" pos:column="86">.</op:operator><name pos:line="415" pos:column="87">len</name></name></expr>;</condition> <incr><expr><name pos:line="415" pos:column="92">nDefinition</name><op:operator pos:line="415" pos:column="103">++</op:operator></expr></incr>) <block pos:line="415" pos:column="107">{
					<decl_stmt><decl><type><name pos:line="416" pos:column="41">char</name> <type:modifier pos:line="416" pos:column="46">*</type:modifier></type><name pos:line="416" pos:column="47">cpDefinition</name> <init pos:line="416" pos:column="60">= <expr><name><name pos:line="416" pos:column="62">ppDefinitions</name><op:operator pos:line="416" pos:column="75">.</op:operator><name pos:line="416" pos:column="76">words</name><index pos:line="416" pos:column="81">[<expr><name pos:line="416" pos:column="82">nDefinition</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="417" pos:column="41">char</name> <type:modifier pos:line="417" pos:column="46">*</type:modifier></type><name pos:line="417" pos:column="47">cpEquals</name> <init pos:line="417" pos:column="56">= <expr><call><name pos:line="417" pos:column="58">strchr</name><argument_list pos:line="417" pos:column="64">(<argument><expr><name pos:line="417" pos:column="65">cpDefinition</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="417" pos:column="79">'='</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="418" pos:column="41">if <condition pos:line="418" pos:column="44">(<expr><name pos:line="418" pos:column="45">cpEquals</name></expr>)</condition><then pos:line="418" pos:column="54"> <block pos:line="418" pos:column="55">{
						<decl_stmt><decl><type><name><name pos:line="419" pos:column="49">std</name><op:operator pos:line="419" pos:column="52">::</op:operator><name pos:line="419" pos:column="54">string</name></name></type> <name pos:line="419" pos:column="61">name</name><argument_list pos:line="419" pos:column="65">(<argument><expr><name pos:line="419" pos:column="66">cpDefinition</name></expr></argument>, <argument><expr><name pos:line="419" pos:column="80">cpEquals</name> <op:operator pos:line="419" pos:column="89">-</op:operator> <name pos:line="419" pos:column="91">cpDefinition</name></expr></argument>)</argument_list></decl>;</decl_stmt>
						<decl_stmt><decl><type><name><name pos:line="420" pos:column="49">std</name><op:operator pos:line="420" pos:column="52">::</op:operator><name pos:line="420" pos:column="54">string</name></name></type> <name pos:line="420" pos:column="61">val</name><argument_list pos:line="420" pos:column="64">(<argument><expr><name pos:line="420" pos:column="65">cpEquals</name><op:operator pos:line="420" pos:column="73">+</op:operator><lit:literal type="number" pos:line="420" pos:column="74">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
						<expr_stmt><expr><name><name pos:line="421" pos:column="49">preprocessorDefinitionsStart</name><index pos:line="421" pos:column="77">[<expr><name pos:line="421" pos:column="78">name</name></expr>]</index></name> <op:operator pos:line="421" pos:column="84">=</op:operator> <name pos:line="421" pos:column="86">val</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="422" pos:column="43">else <block pos:line="422" pos:column="48">{
						<function_decl><type><name><name pos:line="423" pos:column="49">std</name><op:operator pos:line="423" pos:column="52">::</op:operator><name pos:line="423" pos:column="54">string</name></name></type> <name pos:line="423" pos:column="61">name</name><parameter_list pos:line="423" pos:column="65">(<param><decl><type><name pos:line="423" pos:column="66">cpDefinition</name></type></decl></param>)</parameter_list>;</function_decl>
						<decl_stmt><decl><type><name><name pos:line="424" pos:column="49">std</name><op:operator pos:line="424" pos:column="52">::</op:operator><name pos:line="424" pos:column="54">string</name></name></type> <name pos:line="424" pos:column="61">val</name><argument_list pos:line="424" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="424" pos:column="65">"1"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
						<expr_stmt><expr><name><name pos:line="425" pos:column="49">preprocessorDefinitionsStart</name><index pos:line="425" pos:column="77">[<expr><name pos:line="425" pos:column="78">name</name></expr>]</index></name> <op:operator pos:line="425" pos:column="84">=</op:operator> <name pos:line="425" pos:column="86">val</name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></for>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="431" pos:column="9">return <expr><name pos:line="431" pos:column="16">firstModification</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="434" pos:column="1">// Functor used to truncate history</comment>
<struct pos:line="435" pos:column="1">struct <name pos:line="435" pos:column="8">After</name> <block pos:line="435" pos:column="14">{<public type="default" pos:line="435" pos:column="15">
	<decl_stmt><decl><type><name pos:line="436" pos:column="9">int</name></type> <name pos:line="436" pos:column="13">line</name></decl>;</decl_stmt>
	<constructor><name pos:line="437" pos:column="9">After</name><parameter_list pos:line="437" pos:column="14">(<param><decl><type><name pos:line="437" pos:column="15">int</name></type> <name pos:line="437" pos:column="19">line_</name></decl></param>)</parameter_list> <member_list pos:line="437" pos:column="26">: <call><name pos:line="437" pos:column="28">line</name><argument_list pos:line="437" pos:column="32">(<argument><expr><name pos:line="437" pos:column="33">line_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="437" pos:column="40">{}</block></constructor>
	<function><type><name pos:line="438" pos:column="9">bool</name></type> <name pos:line="438" pos:column="14">operator()</name><parameter_list pos:line="438" pos:column="24">(<param><decl><type><name pos:line="438" pos:column="25">PPDefinition</name> <type:modifier pos:line="438" pos:column="38">&amp;</type:modifier></type><name pos:line="438" pos:column="39">p</name></decl></param>)</parameter_list> <specifier pos:line="438" pos:column="42">const</specifier> <block pos:line="438" pos:column="48">{
		<return pos:line="439" pos:column="17">return <expr><name><name pos:line="439" pos:column="24">p</name><op:operator pos:line="439" pos:column="25">.</op:operator><name pos:line="439" pos:column="26">line</name></name> <op:operator pos:line="439" pos:column="31">&gt;</op:operator> <name pos:line="439" pos:column="33">line</name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<function><type><name pos:line="443" pos:column="1">void</name> <name pos:line="443" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="443" pos:column="17">LexerCPP</name><op:operator pos:line="443" pos:column="25">::</op:operator><name pos:line="443" pos:column="27">Lex</name></name><parameter_list pos:line="443" pos:column="30">(<param><decl><type><name pos:line="443" pos:column="31">unsigned</name> <name pos:line="443" pos:column="40">int</name></type> <name pos:line="443" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="443" pos:column="54">int</name></type> <name pos:line="443" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="443" pos:column="66">int</name></type> <name pos:line="443" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="443" pos:column="81">IDocument</name> <type:modifier pos:line="443" pos:column="91">*</type:modifier></type><name pos:line="443" pos:column="92">pAccess</name></decl></param>)</parameter_list> <block pos:line="443" pos:column="101">{
	<function_decl><type><name pos:line="444" pos:column="9">LexAccessor</name></type> <name pos:line="444" pos:column="21">styler</name><parameter_list pos:line="444" pos:column="27">(<param><decl><type><name pos:line="444" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="446" pos:column="9">CharacterSet</name></type> <name pos:line="446" pos:column="22">setOKBeforeRE</name><argument_list pos:line="446" pos:column="35">(<argument><expr><name><name pos:line="446" pos:column="36">CharacterSet</name><op:operator pos:line="446" pos:column="48">::</op:operator><name pos:line="446" pos:column="50">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="446" pos:column="59">"([{=,:;!%^&amp;*|?~+-"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="447" pos:column="9">CharacterSet</name></type> <name pos:line="447" pos:column="22">setCouldBePostOp</name><argument_list pos:line="447" pos:column="38">(<argument><expr><name><name pos:line="447" pos:column="39">CharacterSet</name><op:operator pos:line="447" pos:column="51">::</op:operator><name pos:line="447" pos:column="53">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="447" pos:column="62">"+-"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="449" pos:column="9">CharacterSet</name></type> <name pos:line="449" pos:column="22">setDoxygen</name><argument_list pos:line="449" pos:column="32">(<argument><expr><name><name pos:line="449" pos:column="33">CharacterSet</name><op:operator pos:line="449" pos:column="45">::</op:operator><name pos:line="449" pos:column="47">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="449" pos:column="57">"$@\\&amp;&lt;&gt;#{}[]"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="451" pos:column="9">CharacterSet</name></type> <name pos:line="451" pos:column="22">setWordStart</name><argument_list pos:line="451" pos:column="34">(<argument><expr><name><name pos:line="451" pos:column="35">CharacterSet</name><op:operator pos:line="451" pos:column="47">::</op:operator><name pos:line="451" pos:column="49">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="451" pos:column="59">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="451" pos:column="64">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="451" pos:column="70">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<if pos:line="453" pos:column="9">if <condition pos:line="453" pos:column="12">(<expr><name><name pos:line="453" pos:column="13">options</name><op:operator pos:line="453" pos:column="20">.</op:operator><name pos:line="453" pos:column="21">identifiersAllowDollars</name></name></expr>)</condition><then pos:line="453" pos:column="45"> <block pos:line="453" pos:column="46">{
		<expr_stmt><expr><call><name><name pos:line="454" pos:column="17">setWordStart</name><op:operator pos:line="454" pos:column="29">.</op:operator><name pos:line="454" pos:column="30">Add</name></name><argument_list pos:line="454" pos:column="33">(<argument><expr><lit:literal type="char" pos:line="454" pos:column="34">'$'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="455" pos:column="17">setWord</name><op:operator pos:line="455" pos:column="24">.</op:operator><name pos:line="455" pos:column="25">Add</name></name><argument_list pos:line="455" pos:column="28">(<argument><expr><lit:literal type="char" pos:line="455" pos:column="29">'$'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="458" pos:column="9">int</name></type> <name pos:line="458" pos:column="13">chPrevNonWhite</name> <init pos:line="458" pos:column="28">= <expr><lit:literal type="char" pos:line="458" pos:column="30">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="459" pos:column="9">int</name></type> <name pos:line="459" pos:column="13">visibleChars</name> <init pos:line="459" pos:column="26">= <expr><lit:literal type="number" pos:line="459" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="460" pos:column="9">bool</name></type> <name pos:line="460" pos:column="14">lastWordWasUUID</name> <init pos:line="460" pos:column="30">= <expr><lit:literal type="boolean" pos:line="460" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="461" pos:column="9">int</name></type> <name pos:line="461" pos:column="13">styleBeforeDCKeyword</name> <init pos:line="461" pos:column="34">= <expr><name pos:line="461" pos:column="36">SCE_C_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="462" pos:column="9">bool</name></type> <name pos:line="462" pos:column="14">continuationLine</name> <init pos:line="462" pos:column="31">= <expr><lit:literal type="boolean" pos:line="462" pos:column="33">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="463" pos:column="9">bool</name></type> <name pos:line="463" pos:column="14">isIncludePreprocessor</name> <init pos:line="463" pos:column="36">= <expr><lit:literal type="boolean" pos:line="463" pos:column="38">false</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="465" pos:column="9">int</name></type> <name pos:line="465" pos:column="13">lineCurrent</name> <init pos:line="465" pos:column="25">= <expr><call><name><name pos:line="465" pos:column="27">styler</name><op:operator pos:line="465" pos:column="33">.</op:operator><name pos:line="465" pos:column="34">GetLine</name></name><argument_list pos:line="465" pos:column="41">(<argument><expr><name pos:line="465" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="466" pos:column="9">if <condition pos:line="466" pos:column="12">(<expr><op:operator pos:line="466" pos:column="13">(</op:operator><name pos:line="466" pos:column="14">initStyle</name> <op:operator pos:line="466" pos:column="24">==</op:operator> <name pos:line="466" pos:column="27">SCE_C_PREPROCESSOR</name><op:operator pos:line="466" pos:column="45">)</op:operator> <op:operator pos:line="466" pos:column="47">||</op:operator>
      <op:operator pos:line="467" pos:column="7">(</op:operator><name pos:line="467" pos:column="8">initStyle</name> <op:operator pos:line="467" pos:column="18">==</op:operator> <name pos:line="467" pos:column="21">SCE_C_COMMENTLINE</name><op:operator pos:line="467" pos:column="38">)</op:operator> <op:operator pos:line="467" pos:column="40">||</op:operator>
      <op:operator pos:line="468" pos:column="7">(</op:operator><name pos:line="468" pos:column="8">initStyle</name> <op:operator pos:line="468" pos:column="18">==</op:operator> <name pos:line="468" pos:column="21">SCE_C_COMMENTLINEDOC</name><op:operator pos:line="468" pos:column="41">)</op:operator></expr>)</condition><then pos:line="468" pos:column="43"> <block pos:line="468" pos:column="44">{
		<comment type="line" pos:line="469" pos:column="17">// Set continuationLine if last character of previous line is '\'</comment>
		<if pos:line="470" pos:column="17">if <condition pos:line="470" pos:column="20">(<expr><name pos:line="470" pos:column="21">lineCurrent</name> <op:operator pos:line="470" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="470" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="470" pos:column="37"> <block pos:line="470" pos:column="38">{
			<decl_stmt><decl><type><name pos:line="471" pos:column="25">int</name></type> <name pos:line="471" pos:column="29">chBack</name> <init pos:line="471" pos:column="36">= <expr><call><name><name pos:line="471" pos:column="38">styler</name><op:operator pos:line="471" pos:column="44">.</op:operator><name pos:line="471" pos:column="45">SafeGetCharAt</name></name><argument_list pos:line="471" pos:column="58">(<argument><expr><name pos:line="471" pos:column="59">startPos</name><op:operator pos:line="471" pos:column="67">-</op:operator><lit:literal type="number" pos:line="471" pos:column="68">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="471" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="472" pos:column="25">int</name></type> <name pos:line="472" pos:column="29">chBack2</name> <init pos:line="472" pos:column="37">= <expr><call><name><name pos:line="472" pos:column="39">styler</name><op:operator pos:line="472" pos:column="45">.</op:operator><name pos:line="472" pos:column="46">SafeGetCharAt</name></name><argument_list pos:line="472" pos:column="59">(<argument><expr><name pos:line="472" pos:column="60">startPos</name><op:operator pos:line="472" pos:column="68">-</op:operator><lit:literal type="number" pos:line="472" pos:column="69">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="472" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="473" pos:column="25">int</name></type> <name pos:line="473" pos:column="29">lineEndChar</name> <init pos:line="473" pos:column="41">= <expr><lit:literal type="char" pos:line="473" pos:column="43">'!'</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="474" pos:column="25">if <condition pos:line="474" pos:column="28">(<expr><name pos:line="474" pos:column="29">chBack2</name> <op:operator pos:line="474" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="474" pos:column="40">'\r'</lit:literal> <op:operator pos:line="474" pos:column="45">&amp;&amp;</op:operator> <name pos:line="474" pos:column="48">chBack</name> <op:operator pos:line="474" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="474" pos:column="58">'\n'</lit:literal></expr>)</condition><then pos:line="474" pos:column="63"> <block pos:line="474" pos:column="64">{
				<expr_stmt><expr><name pos:line="475" pos:column="33">lineEndChar</name> <op:operator pos:line="475" pos:column="45">=</op:operator> <call><name><name pos:line="475" pos:column="47">styler</name><op:operator pos:line="475" pos:column="53">.</op:operator><name pos:line="475" pos:column="54">SafeGetCharAt</name></name><argument_list pos:line="475" pos:column="67">(<argument><expr><name pos:line="475" pos:column="68">startPos</name><op:operator pos:line="475" pos:column="76">-</op:operator><lit:literal type="number" pos:line="475" pos:column="77">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="475" pos:column="80">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="476" pos:column="27">else <if pos:line="476" pos:column="32">if <condition pos:line="476" pos:column="35">(<expr><name pos:line="476" pos:column="36">chBack</name> <op:operator pos:line="476" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="476" pos:column="46">'\n'</lit:literal> <op:operator pos:line="476" pos:column="51">||</op:operator> <name pos:line="476" pos:column="54">chBack</name> <op:operator pos:line="476" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="476" pos:column="64">'\r'</lit:literal></expr>)</condition><then pos:line="476" pos:column="69"> <block pos:line="476" pos:column="70">{
				<expr_stmt><expr><name pos:line="477" pos:column="33">lineEndChar</name> <op:operator pos:line="477" pos:column="45">=</op:operator> <name pos:line="477" pos:column="47">chBack2</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<expr_stmt><expr><name pos:line="479" pos:column="25">continuationLine</name> <op:operator pos:line="479" pos:column="42">=</op:operator> <name pos:line="479" pos:column="44">lineEndChar</name> <op:operator pos:line="479" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="479" pos:column="59">'\\'</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>

	<comment type="line" pos:line="483" pos:column="9">// look back to set chPrevNonWhite properly for better regex colouring</comment>
	<if pos:line="484" pos:column="9">if <condition pos:line="484" pos:column="12">(<expr><name pos:line="484" pos:column="13">startPos</name> <op:operator pos:line="484" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="484" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="484" pos:column="26"> <block pos:line="484" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="485" pos:column="17">int</name></type> <name pos:line="485" pos:column="21">back</name> <init pos:line="485" pos:column="26">= <expr><name pos:line="485" pos:column="28">startPos</name></expr></init></decl>;</decl_stmt>
		<while pos:line="486" pos:column="17">while <condition pos:line="486" pos:column="23">(<expr><op:operator pos:line="486" pos:column="24">--</op:operator><name pos:line="486" pos:column="26">back</name> <op:operator pos:line="486" pos:column="31">&amp;&amp;</op:operator> <call><name pos:line="486" pos:column="34">IsSpaceEquiv</name><argument_list pos:line="486" pos:column="46">(<argument><expr><call><name><name pos:line="486" pos:column="47">styler</name><op:operator pos:line="486" pos:column="53">.</op:operator><name pos:line="486" pos:column="54">StyleAt</name></name><argument_list pos:line="486" pos:column="61">(<argument><expr><name pos:line="486" pos:column="62">back</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<empty_stmt pos:line="487" pos:column="25">;</empty_stmt></while>
		<if pos:line="488" pos:column="17">if <condition pos:line="488" pos:column="20">(<expr><call><name><name pos:line="488" pos:column="21">styler</name><op:operator pos:line="488" pos:column="27">.</op:operator><name pos:line="488" pos:column="28">StyleAt</name></name><argument_list pos:line="488" pos:column="35">(<argument><expr><name pos:line="488" pos:column="36">back</name></expr></argument>)</argument_list></call> <op:operator pos:line="488" pos:column="42">==</op:operator> <name pos:line="488" pos:column="45">SCE_C_OPERATOR</name></expr>)</condition><then pos:line="488" pos:column="60"> <block pos:line="488" pos:column="61">{
			<expr_stmt><expr><name pos:line="489" pos:column="25">chPrevNonWhite</name> <op:operator pos:line="489" pos:column="40">=</op:operator> <call><name><name pos:line="489" pos:column="42">styler</name><op:operator pos:line="489" pos:column="48">.</op:operator><name pos:line="489" pos:column="49">SafeGetCharAt</name></name><argument_list pos:line="489" pos:column="62">(<argument><expr><name pos:line="489" pos:column="63">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="493" pos:column="9">StyleContext</name></type> <name pos:line="493" pos:column="22">sc</name><argument_list pos:line="493" pos:column="24">(<argument><expr><name pos:line="493" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="493" pos:column="35">length</name></expr></argument>, <argument><expr><name pos:line="493" pos:column="43">initStyle</name></expr></argument>, <argument><expr><name pos:line="493" pos:column="54">styler</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="493" pos:column="62">0x7f</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="494" pos:column="9">LinePPState</name></type> <name pos:line="494" pos:column="21">preproc</name> <init pos:line="494" pos:column="29">= <expr><call><name><name pos:line="494" pos:column="31">vlls</name><op:operator pos:line="494" pos:column="35">.</op:operator><name pos:line="494" pos:column="36">ForLine</name></name><argument_list pos:line="494" pos:column="43">(<argument><expr><name pos:line="494" pos:column="44">lineCurrent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="496" pos:column="9">bool</name></type> <name pos:line="496" pos:column="14">definitionsChanged</name> <init pos:line="496" pos:column="33">= <expr><lit:literal type="boolean" pos:line="496" pos:column="35">false</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="498" pos:column="9">// Truncate ppDefineHistory before current line</comment>

	<if pos:line="500" pos:column="9">if <condition pos:line="500" pos:column="12">(<expr><op:operator pos:line="500" pos:column="13">!</op:operator><name><name pos:line="500" pos:column="14">options</name><op:operator pos:line="500" pos:column="21">.</op:operator><name pos:line="500" pos:column="22">updatePreprocessor</name></name></expr>)</condition><then pos:line="500" pos:column="41">
		<expr_stmt><expr><call><name><name pos:line="501" pos:column="17">ppDefineHistory</name><op:operator pos:line="501" pos:column="32">.</op:operator><name pos:line="501" pos:column="33">clear</name></name><argument_list pos:line="501" pos:column="38">()</argument_list></call></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name><name pos:line="503" pos:column="9">std</name><op:operator pos:line="503" pos:column="12">::</op:operator><name><name pos:line="503" pos:column="14">vector</name><argument_list pos:line="503" pos:column="20">&lt;<argument><expr><name pos:line="503" pos:column="21">PPDefinition</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="503" pos:column="34">::</op:operator><name pos:line="503" pos:column="36">iterator</name></name></type> <name pos:line="503" pos:column="45">itInvalid</name> <init pos:line="503" pos:column="55">= <expr><call><name><name pos:line="503" pos:column="57">std</name><op:operator pos:line="503" pos:column="60">::</op:operator><name pos:line="503" pos:column="62">find_if</name></name><argument_list pos:line="503" pos:column="69">(<argument><expr><call><name><name pos:line="503" pos:column="70">ppDefineHistory</name><op:operator pos:line="503" pos:column="85">.</op:operator><name pos:line="503" pos:column="86">begin</name></name><argument_list pos:line="503" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="503" pos:column="95">ppDefineHistory</name><op:operator pos:line="503" pos:column="110">.</op:operator><name pos:line="503" pos:column="111">end</name></name><argument_list pos:line="503" pos:column="114">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="503" pos:column="118">After</name><argument_list pos:line="503" pos:column="123">(<argument><expr><name pos:line="503" pos:column="124">lineCurrent</name><op:operator pos:line="503" pos:column="135">-</op:operator><lit:literal type="number" pos:line="503" pos:column="136">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="504" pos:column="9">if <condition pos:line="504" pos:column="12">(<expr><name pos:line="504" pos:column="13">itInvalid</name> <op:operator pos:line="504" pos:column="23">!=</op:operator> <call><name><name pos:line="504" pos:column="26">ppDefineHistory</name><op:operator pos:line="504" pos:column="41">.</op:operator><name pos:line="504" pos:column="42">end</name></name><argument_list pos:line="504" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="504" pos:column="48"> <block pos:line="504" pos:column="49">{
		<expr_stmt><expr><call><name><name pos:line="505" pos:column="17">ppDefineHistory</name><op:operator pos:line="505" pos:column="32">.</op:operator><name pos:line="505" pos:column="33">erase</name></name><argument_list pos:line="505" pos:column="38">(<argument><expr><name pos:line="505" pos:column="39">itInvalid</name></expr></argument>, <argument><expr><call><name><name pos:line="505" pos:column="50">ppDefineHistory</name><op:operator pos:line="505" pos:column="65">.</op:operator><name pos:line="505" pos:column="66">end</name></name><argument_list pos:line="505" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="506" pos:column="17">definitionsChanged</name> <op:operator pos:line="506" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="506" pos:column="38">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name><name pos:line="509" pos:column="9">std</name><op:operator pos:line="509" pos:column="12">::</op:operator><name><name pos:line="509" pos:column="14">map</name><argument_list pos:line="509" pos:column="17">&lt;<argument><expr><name><name pos:line="509" pos:column="18">std</name><op:operator pos:line="509" pos:column="21">::</op:operator><name pos:line="509" pos:column="23">string</name></name></expr></argument>, <argument><expr><name><name pos:line="509" pos:column="31">std</name><op:operator pos:line="509" pos:column="34">::</op:operator><name pos:line="509" pos:column="36">string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="509" pos:column="44">preprocessorDefinitions</name> <init pos:line="509" pos:column="68">= <expr><name pos:line="509" pos:column="70">preprocessorDefinitionsStart</name></expr></init></decl>;</decl_stmt>
	<for pos:line="510" pos:column="9">for (<init><decl><type><name><name pos:line="510" pos:column="14">std</name><op:operator pos:line="510" pos:column="17">::</op:operator><name><name pos:line="510" pos:column="19">vector</name><argument_list pos:line="510" pos:column="25">&lt;<argument><expr><name pos:line="510" pos:column="26">PPDefinition</name></expr></argument>&gt;</argument_list></name><op:operator pos:line="510" pos:column="39">::</op:operator><name pos:line="510" pos:column="41">iterator</name></name></type> <name pos:line="510" pos:column="50">itDef</name> <init pos:line="510" pos:column="56">= <expr><call><name><name pos:line="510" pos:column="58">ppDefineHistory</name><op:operator pos:line="510" pos:column="73">.</op:operator><name pos:line="510" pos:column="74">begin</name></name><argument_list pos:line="510" pos:column="79">()</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="510" pos:column="83">itDef</name> <op:operator pos:line="510" pos:column="89">!=</op:operator> <call><name><name pos:line="510" pos:column="92">ppDefineHistory</name><op:operator pos:line="510" pos:column="107">.</op:operator><name pos:line="510" pos:column="108">end</name></name><argument_list pos:line="510" pos:column="111">()</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="510" pos:column="115">++</op:operator><name pos:line="510" pos:column="117">itDef</name></expr></incr>) <block pos:line="510" pos:column="124">{
		<expr_stmt><expr><name><name pos:line="511" pos:column="17">preprocessorDefinitions</name><index pos:line="511" pos:column="40">[<expr><name><name pos:line="511" pos:column="41">itDef</name><op:operator pos:line="511" pos:column="46">-&gt;</op:operator><name pos:line="511" pos:column="48">key</name></name></expr>]</index></name> <op:operator pos:line="511" pos:column="53">=</op:operator> <name><name pos:line="511" pos:column="55">itDef</name><op:operator pos:line="511" pos:column="60">-&gt;</op:operator><name pos:line="511" pos:column="62">value</name></name></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name><name pos:line="514" pos:column="9">std</name><op:operator pos:line="514" pos:column="12">::</op:operator><name pos:line="514" pos:column="14">string</name></name></type> <name pos:line="514" pos:column="21">rawStringTerminator</name> <init pos:line="514" pos:column="41">= <expr><call><name><name pos:line="514" pos:column="43">rawStringTerminators</name><op:operator pos:line="514" pos:column="63">.</op:operator><name pos:line="514" pos:column="64">ValueAt</name></name><argument_list pos:line="514" pos:column="71">(<argument><expr><name pos:line="514" pos:column="72">lineCurrent</name><op:operator pos:line="514" pos:column="83">-</op:operator><lit:literal type="number" pos:line="514" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<function_decl><type><name><name pos:line="515" pos:column="9">SparseState</name><argument_list pos:line="515" pos:column="20">&lt;<argument><expr><name><name pos:line="515" pos:column="21">std</name><op:operator pos:line="515" pos:column="24">::</op:operator><name pos:line="515" pos:column="26">string</name></name></expr></argument>&gt;</argument_list></name></type> <name pos:line="515" pos:column="34">rawSTNew</name><parameter_list pos:line="515" pos:column="42">(<param><decl><type><name pos:line="515" pos:column="43">lineCurrent</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="517" pos:column="9">int</name></type> <name pos:line="517" pos:column="13">activitySet</name> <init pos:line="517" pos:column="25">= <expr><call><name><name pos:line="517" pos:column="27">preproc</name><op:operator pos:line="517" pos:column="34">.</op:operator><name pos:line="517" pos:column="35">IsInactive</name></name><argument_list pos:line="517" pos:column="45">()</argument_list></call> <op:operator pos:line="517" pos:column="48">?</op:operator> <name pos:line="517" pos:column="50">activeFlag</name> <op:operator pos:line="517" pos:column="61">:</op:operator> <lit:literal type="number" pos:line="517" pos:column="63">0</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="519" pos:column="9">for (<init pos:line="519" pos:column="14">;</init> <condition><expr><call><name><name pos:line="519" pos:column="16">sc</name><op:operator pos:line="519" pos:column="18">.</op:operator><name pos:line="519" pos:column="19">More</name></name><argument_list pos:line="519" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="519" pos:column="27">sc</name><op:operator pos:line="519" pos:column="29">.</op:operator><name pos:line="519" pos:column="30">Forward</name></name><argument_list pos:line="519" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="519" pos:column="41">{

		<if pos:line="521" pos:column="17">if <condition pos:line="521" pos:column="20">(<expr><name><name pos:line="521" pos:column="21">sc</name><op:operator pos:line="521" pos:column="23">.</op:operator><name pos:line="521" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="521" pos:column="36"> <block pos:line="521" pos:column="37">{
			<if pos:line="522" pos:column="25">if <condition pos:line="522" pos:column="28">(<expr><op:operator pos:line="522" pos:column="29">(</op:operator><name><name pos:line="522" pos:column="30">sc</name><op:operator pos:line="522" pos:column="32">.</op:operator><name pos:line="522" pos:column="33">state</name></name> <op:operator pos:line="522" pos:column="39">==</op:operator> <name pos:line="522" pos:column="42">SCE_C_STRING</name><op:operator pos:line="522" pos:column="54">)</op:operator> <op:operator pos:line="522" pos:column="56">||</op:operator> <op:operator pos:line="522" pos:column="59">(</op:operator><name><name pos:line="522" pos:column="60">sc</name><op:operator pos:line="522" pos:column="62">.</op:operator><name pos:line="522" pos:column="63">state</name></name> <op:operator pos:line="522" pos:column="69">==</op:operator> <name pos:line="522" pos:column="72">SCE_C_CHARACTER</name><op:operator pos:line="522" pos:column="87">)</op:operator></expr>)</condition><then pos:line="522" pos:column="89"> <block pos:line="522" pos:column="90">{
				<comment type="line" pos:line="523" pos:column="33">// Prevent SCE_C_STRINGEOL from leaking back to previous line which</comment>
				<comment type="line" pos:line="524" pos:column="33">// ends with a line continuation by locking in the state upto this position.</comment>
				<expr_stmt><expr><call><name><name pos:line="525" pos:column="33">sc</name><op:operator pos:line="525" pos:column="35">.</op:operator><name pos:line="525" pos:column="36">SetState</name></name><argument_list pos:line="525" pos:column="44">(<argument><expr><name><name pos:line="525" pos:column="45">sc</name><op:operator pos:line="525" pos:column="47">.</op:operator><name pos:line="525" pos:column="48">state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="527" pos:column="25">// Reset states to begining of colourise so no surprises</comment>
			<comment type="line" pos:line="528" pos:column="25">// if different sets of lines lexed.</comment>
			<expr_stmt><expr><name pos:line="529" pos:column="25">visibleChars</name> <op:operator pos:line="529" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="529" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="530" pos:column="25">lastWordWasUUID</name> <op:operator pos:line="530" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="530" pos:column="43">false</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="531" pos:column="25">isIncludePreprocessor</name> <op:operator pos:line="531" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="531" pos:column="49">false</lit:literal></expr>;</expr_stmt>
			<if pos:line="532" pos:column="25">if <condition pos:line="532" pos:column="28">(<expr><call><name><name pos:line="532" pos:column="29">preproc</name><op:operator pos:line="532" pos:column="36">.</op:operator><name pos:line="532" pos:column="37">IsInactive</name></name><argument_list pos:line="532" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="532" pos:column="50"> <block pos:line="532" pos:column="51">{
				<expr_stmt><expr><name pos:line="533" pos:column="33">activitySet</name> <op:operator pos:line="533" pos:column="45">=</op:operator> <name pos:line="533" pos:column="47">activeFlag</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="534" pos:column="33">sc</name><op:operator pos:line="534" pos:column="35">.</op:operator><name pos:line="534" pos:column="36">SetState</name></name><argument_list pos:line="534" pos:column="44">(<argument><expr><name><name pos:line="534" pos:column="45">sc</name><op:operator pos:line="534" pos:column="47">.</op:operator><name pos:line="534" pos:column="48">state</name></name> <op:operator pos:line="534" pos:column="54">|</op:operator> <name pos:line="534" pos:column="56">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="536" pos:column="25">if <condition pos:line="536" pos:column="28">(<expr><name pos:line="536" pos:column="29">activitySet</name></expr>)</condition><then pos:line="536" pos:column="41"> <block pos:line="536" pos:column="42">{
				<if pos:line="537" pos:column="33">if <condition pos:line="537" pos:column="36">(<expr><name><name pos:line="537" pos:column="37">sc</name><op:operator pos:line="537" pos:column="39">.</op:operator><name pos:line="537" pos:column="40">ch</name></name> <op:operator pos:line="537" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="537" pos:column="46">'#'</lit:literal></expr>)</condition><then pos:line="537" pos:column="50"> <block pos:line="537" pos:column="51">{
					<if pos:line="538" pos:column="41">if <condition pos:line="538" pos:column="44">(<expr><call><name><name pos:line="538" pos:column="45">sc</name><op:operator pos:line="538" pos:column="47">.</op:operator><name pos:line="538" pos:column="48">Match</name></name><argument_list pos:line="538" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="538" pos:column="54">"#else"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="538" pos:column="63">||</op:operator> <call><name><name pos:line="538" pos:column="66">sc</name><op:operator pos:line="538" pos:column="68">.</op:operator><name pos:line="538" pos:column="69">Match</name></name><argument_list pos:line="538" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="538" pos:column="75">"#end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="538" pos:column="83">||</op:operator> <call><name><name pos:line="538" pos:column="86">sc</name><op:operator pos:line="538" pos:column="88">.</op:operator><name pos:line="538" pos:column="89">Match</name></name><argument_list pos:line="538" pos:column="94">(<argument><expr><lit:literal type="string" pos:line="538" pos:column="95">"#if"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="538" pos:column="102"> <block pos:line="538" pos:column="103">{
						<comment type="line" pos:line="539" pos:column="49">//activitySet = 0;</comment>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="545" pos:column="17">if <condition pos:line="545" pos:column="20">(<expr><name><name pos:line="545" pos:column="21">sc</name><op:operator pos:line="545" pos:column="23">.</op:operator><name pos:line="545" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="545" pos:column="34"> <block pos:line="545" pos:column="35">{
			<expr_stmt><expr><name pos:line="546" pos:column="25">lineCurrent</name><op:operator pos:line="546" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="547" pos:column="25">vlls</name><op:operator pos:line="547" pos:column="29">.</op:operator><name pos:line="547" pos:column="30">Add</name></name><argument_list pos:line="547" pos:column="33">(<argument><expr><name pos:line="547" pos:column="34">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="547" pos:column="47">preproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="548" pos:column="25">if <condition pos:line="548" pos:column="28">(<expr><name pos:line="548" pos:column="29">rawStringTerminator</name> <op:operator pos:line="548" pos:column="49">!=</op:operator> <lit:literal type="string" pos:line="548" pos:column="52">""</lit:literal></expr>)</condition><then pos:line="548" pos:column="55"> <block pos:line="548" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="549" pos:column="33">rawSTNew</name><op:operator pos:line="549" pos:column="41">.</op:operator><name pos:line="549" pos:column="42">Set</name></name><argument_list pos:line="549" pos:column="45">(<argument><expr><name pos:line="549" pos:column="46">lineCurrent</name><op:operator pos:line="549" pos:column="57">-</op:operator><lit:literal type="number" pos:line="549" pos:column="58">1</lit:literal></expr></argument>, <argument><expr><name pos:line="549" pos:column="61">rawStringTerminator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="553" pos:column="17">// Handle line continuation generically.</comment>
		<if pos:line="554" pos:column="17">if <condition pos:line="554" pos:column="20">(<expr><name><name pos:line="554" pos:column="21">sc</name><op:operator pos:line="554" pos:column="23">.</op:operator><name pos:line="554" pos:column="24">ch</name></name> <op:operator pos:line="554" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="554" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="554" pos:column="35"> <block pos:line="554" pos:column="36">{
			<if pos:line="555" pos:column="25">if <condition pos:line="555" pos:column="28">(<expr><name><name pos:line="555" pos:column="29">sc</name><op:operator pos:line="555" pos:column="31">.</op:operator><name pos:line="555" pos:column="32">chNext</name></name> <op:operator pos:line="555" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="555" pos:column="42">'\n'</lit:literal> <op:operator pos:line="555" pos:column="47">||</op:operator> <name><name pos:line="555" pos:column="50">sc</name><op:operator pos:line="555" pos:column="52">.</op:operator><name pos:line="555" pos:column="53">chNext</name></name> <op:operator pos:line="555" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="555" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="555" pos:column="68"> <block pos:line="555" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="556" pos:column="33">sc</name><op:operator pos:line="556" pos:column="35">.</op:operator><name pos:line="556" pos:column="36">Forward</name></name><argument_list pos:line="556" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="557" pos:column="33">if <condition pos:line="557" pos:column="36">(<expr><name><name pos:line="557" pos:column="37">sc</name><op:operator pos:line="557" pos:column="39">.</op:operator><name pos:line="557" pos:column="40">ch</name></name> <op:operator pos:line="557" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="557" pos:column="46">'\r'</lit:literal> <op:operator pos:line="557" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="557" pos:column="54">sc</name><op:operator pos:line="557" pos:column="56">.</op:operator><name pos:line="557" pos:column="57">chNext</name></name> <op:operator pos:line="557" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="557" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="557" pos:column="72"> <block pos:line="557" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="558" pos:column="41">sc</name><op:operator pos:line="558" pos:column="43">.</op:operator><name pos:line="558" pos:column="44">Forward</name></name><argument_list pos:line="558" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="560" pos:column="33">continuationLine</name> <op:operator pos:line="560" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="560" pos:column="52">true</lit:literal></expr>;</expr_stmt>
				<continue pos:line="561" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<decl_stmt><decl><type><specifier pos:line="565" pos:column="17">const</specifier> <name pos:line="565" pos:column="23">bool</name></type> <name pos:line="565" pos:column="28">atLineEndBeforeSwitch</name> <init pos:line="565" pos:column="50">= <expr><name><name pos:line="565" pos:column="52">sc</name><op:operator pos:line="565" pos:column="54">.</op:operator><name pos:line="565" pos:column="55">atLineEnd</name></name></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="567" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="568" pos:column="17">switch <condition pos:line="568" pos:column="24">(<expr><call><name pos:line="568" pos:column="25">MaskActive</name><argument_list pos:line="568" pos:column="35">(<argument><expr><name><name pos:line="568" pos:column="36">sc</name><op:operator pos:line="568" pos:column="38">.</op:operator><name pos:line="568" pos:column="39">state</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="568" pos:column="47">{
			<case pos:line="569" pos:column="25">case <expr><name pos:line="569" pos:column="30">SCE_C_OPERATOR</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="570" pos:column="33">sc</name><op:operator pos:line="570" pos:column="35">.</op:operator><name pos:line="570" pos:column="36">SetState</name></name><argument_list pos:line="570" pos:column="44">(<argument><expr><name pos:line="570" pos:column="45">SCE_C_DEFAULT</name><op:operator pos:line="570" pos:column="58">|</op:operator><name pos:line="570" pos:column="59">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="571" pos:column="33">break;</break>
			</case><case pos:line="572" pos:column="25">case <expr><name pos:line="572" pos:column="30">SCE_C_NUMBER</name></expr>:
				<comment type="line" pos:line="573" pos:column="33">// We accept almost anything because of hex. and number suffixes</comment>
				<if pos:line="574" pos:column="33">if <condition pos:line="574" pos:column="36">(<expr><op:operator pos:line="574" pos:column="37">!</op:operator><op:operator pos:line="574" pos:column="38">(</op:operator><call><name><name pos:line="574" pos:column="39">setWord</name><op:operator pos:line="574" pos:column="46">.</op:operator><name pos:line="574" pos:column="47">Contains</name></name><argument_list pos:line="574" pos:column="55">(<argument><expr><name><name pos:line="574" pos:column="56">sc</name><op:operator pos:line="574" pos:column="58">.</op:operator><name pos:line="574" pos:column="59">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="574" pos:column="63">||</op:operator> <op:operator pos:line="574" pos:column="66">(</op:operator><op:operator pos:line="574" pos:column="67">(</op:operator><name><name pos:line="574" pos:column="68">sc</name><op:operator pos:line="574" pos:column="70">.</op:operator><name pos:line="574" pos:column="71">ch</name></name> <op:operator pos:line="574" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="574" pos:column="77">'+'</lit:literal> <op:operator pos:line="574" pos:column="81">||</op:operator> <name><name pos:line="574" pos:column="84">sc</name><op:operator pos:line="574" pos:column="86">.</op:operator><name pos:line="574" pos:column="87">ch</name></name> <op:operator pos:line="574" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="574" pos:column="93">'-'</lit:literal><op:operator pos:line="574" pos:column="96">)</op:operator> <op:operator pos:line="574" pos:column="98">&amp;&amp;</op:operator> <op:operator pos:line="574" pos:column="101">(</op:operator><name><name pos:line="574" pos:column="102">sc</name><op:operator pos:line="574" pos:column="104">.</op:operator><name pos:line="574" pos:column="105">chPrev</name></name> <op:operator pos:line="574" pos:column="112">==</op:operator> <lit:literal type="char" pos:line="574" pos:column="115">'e'</lit:literal> <op:operator pos:line="574" pos:column="119">||</op:operator> <name><name pos:line="574" pos:column="122">sc</name><op:operator pos:line="574" pos:column="124">.</op:operator><name pos:line="574" pos:column="125">chPrev</name></name> <op:operator pos:line="574" pos:column="132">==</op:operator> <lit:literal type="char" pos:line="574" pos:column="135">'E'</lit:literal><op:operator pos:line="574" pos:column="138">)</op:operator><op:operator pos:line="574" pos:column="139">)</op:operator><op:operator pos:line="574" pos:column="140">)</op:operator></expr>)</condition><then pos:line="574" pos:column="142"> <block pos:line="574" pos:column="143">{
					<expr_stmt><expr><call><name><name pos:line="575" pos:column="41">sc</name><op:operator pos:line="575" pos:column="43">.</op:operator><name pos:line="575" pos:column="44">SetState</name></name><argument_list pos:line="575" pos:column="52">(<argument><expr><name pos:line="575" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="575" pos:column="66">|</op:operator><name pos:line="575" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="577" pos:column="33">break;</break>
			</case><case pos:line="578" pos:column="25">case <expr><name pos:line="578" pos:column="30">SCE_C_IDENTIFIER</name></expr>:
				<if pos:line="579" pos:column="33">if <condition pos:line="579" pos:column="36">(<expr><op:operator pos:line="579" pos:column="37">!</op:operator><call><name><name pos:line="579" pos:column="38">setWord</name><op:operator pos:line="579" pos:column="45">.</op:operator><name pos:line="579" pos:column="46">Contains</name></name><argument_list pos:line="579" pos:column="54">(<argument><expr><name><name pos:line="579" pos:column="55">sc</name><op:operator pos:line="579" pos:column="57">.</op:operator><name pos:line="579" pos:column="58">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="579" pos:column="62">||</op:operator> <op:operator pos:line="579" pos:column="65">(</op:operator><name><name pos:line="579" pos:column="66">sc</name><op:operator pos:line="579" pos:column="68">.</op:operator><name pos:line="579" pos:column="69">ch</name></name> <op:operator pos:line="579" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="579" pos:column="75">'.'</lit:literal><op:operator pos:line="579" pos:column="78">)</op:operator></expr>)</condition><then pos:line="579" pos:column="80"> <block pos:line="579" pos:column="81">{
					<decl_stmt><decl><type><name pos:line="580" pos:column="41">char</name></type> <name><name pos:line="580" pos:column="46">s</name><index pos:line="580" pos:column="47">[<expr><lit:literal type="number" pos:line="580" pos:column="48">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<if pos:line="581" pos:column="41">if <condition pos:line="581" pos:column="44">(<expr><name pos:line="581" pos:column="45">caseSensitive</name></expr>)</condition><then pos:line="581" pos:column="59"> <block pos:line="581" pos:column="60">{
						<expr_stmt><expr><call><name><name pos:line="582" pos:column="49">sc</name><op:operator pos:line="582" pos:column="51">.</op:operator><name pos:line="582" pos:column="52">GetCurrent</name></name><argument_list pos:line="582" pos:column="62">(<argument><expr><name pos:line="582" pos:column="63">s</name></expr></argument>, <argument><expr><sizeof pos:line="582" pos:column="66">sizeof<argument_list pos:line="582" pos:column="72">(<argument><expr><name pos:line="582" pos:column="73">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="583" pos:column="43">else <block pos:line="583" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="584" pos:column="49">sc</name><op:operator pos:line="584" pos:column="51">.</op:operator><name pos:line="584" pos:column="52">GetCurrentLowered</name></name><argument_list pos:line="584" pos:column="69">(<argument><expr><name pos:line="584" pos:column="70">s</name></expr></argument>, <argument><expr><sizeof pos:line="584" pos:column="73">sizeof<argument_list pos:line="584" pos:column="79">(<argument><expr><name pos:line="584" pos:column="80">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<if pos:line="586" pos:column="41">if <condition pos:line="586" pos:column="44">(<expr><call><name><name pos:line="586" pos:column="45">keywords</name><op:operator pos:line="586" pos:column="53">.</op:operator><name pos:line="586" pos:column="54">InList</name></name><argument_list pos:line="586" pos:column="60">(<argument><expr><name pos:line="586" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="586" pos:column="64"> <block pos:line="586" pos:column="65">{
						<expr_stmt><expr><name pos:line="587" pos:column="49">lastWordWasUUID</name> <op:operator pos:line="587" pos:column="65">=</op:operator> <call><name pos:line="587" pos:column="67">strcmp</name><argument_list pos:line="587" pos:column="73">(<argument><expr><name pos:line="587" pos:column="74">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="587" pos:column="77">"uuid"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="587" pos:column="85">==</op:operator> <lit:literal type="number" pos:line="587" pos:column="88">0</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="588" pos:column="49">sc</name><op:operator pos:line="588" pos:column="51">.</op:operator><name pos:line="588" pos:column="52">ChangeState</name></name><argument_list pos:line="588" pos:column="63">(<argument><expr><name pos:line="588" pos:column="64">SCE_C_WORD</name><op:operator pos:line="588" pos:column="74">|</op:operator><name pos:line="588" pos:column="75">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="589" pos:column="43">else <if pos:line="589" pos:column="48">if <condition pos:line="589" pos:column="51">(<expr><call><name><name pos:line="589" pos:column="52">keywords2</name><op:operator pos:line="589" pos:column="61">.</op:operator><name pos:line="589" pos:column="62">InList</name></name><argument_list pos:line="589" pos:column="68">(<argument><expr><name pos:line="589" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="589" pos:column="72"> <block pos:line="589" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="590" pos:column="49">sc</name><op:operator pos:line="590" pos:column="51">.</op:operator><name pos:line="590" pos:column="52">ChangeState</name></name><argument_list pos:line="590" pos:column="63">(<argument><expr><name pos:line="590" pos:column="64">SCE_C_WORD2</name><op:operator pos:line="590" pos:column="75">|</op:operator><name pos:line="590" pos:column="76">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="591" pos:column="43">else <if pos:line="591" pos:column="48">if <condition pos:line="591" pos:column="51">(<expr><call><name><name pos:line="591" pos:column="52">keywords4</name><op:operator pos:line="591" pos:column="61">.</op:operator><name pos:line="591" pos:column="62">InList</name></name><argument_list pos:line="591" pos:column="68">(<argument><expr><name pos:line="591" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="591" pos:column="72"> <block pos:line="591" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="592" pos:column="49">sc</name><op:operator pos:line="592" pos:column="51">.</op:operator><name pos:line="592" pos:column="52">ChangeState</name></name><argument_list pos:line="592" pos:column="63">(<argument><expr><name pos:line="592" pos:column="64">SCE_C_GLOBALCLASS</name><op:operator pos:line="592" pos:column="81">|</op:operator><name pos:line="592" pos:column="82">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if>
					<decl_stmt><decl><type><specifier pos:line="594" pos:column="41">const</specifier> <name pos:line="594" pos:column="47">bool</name></type> <name pos:line="594" pos:column="52">literalString</name> <init pos:line="594" pos:column="66">= <expr><name><name pos:line="594" pos:column="68">sc</name><op:operator pos:line="594" pos:column="70">.</op:operator><name pos:line="594" pos:column="71">ch</name></name> <op:operator pos:line="594" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="594" pos:column="77">'\"'</lit:literal></expr></init></decl>;</decl_stmt>
					<if pos:line="595" pos:column="41">if <condition pos:line="595" pos:column="44">(<expr><name pos:line="595" pos:column="45">literalString</name> <op:operator pos:line="595" pos:column="59">||</op:operator> <name><name pos:line="595" pos:column="62">sc</name><op:operator pos:line="595" pos:column="64">.</op:operator><name pos:line="595" pos:column="65">ch</name></name> <op:operator pos:line="595" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="595" pos:column="71">'\''</lit:literal></expr>)</condition><then pos:line="595" pos:column="76"> <block pos:line="595" pos:column="77">{
						<decl_stmt><decl><type><name pos:line="596" pos:column="49">size_t</name></type> <name pos:line="596" pos:column="56">lenS</name> <init pos:line="596" pos:column="61">= <expr><call><name pos:line="596" pos:column="63">strlen</name><argument_list pos:line="596" pos:column="69">(<argument><expr><name pos:line="596" pos:column="70">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><specifier pos:line="597" pos:column="49">const</specifier> <name pos:line="597" pos:column="55">bool</name></type> <name pos:line="597" pos:column="60">raw</name> <init pos:line="597" pos:column="64">= <expr><name pos:line="597" pos:column="66">literalString</name> <op:operator pos:line="597" pos:column="80">&amp;&amp;</op:operator> <name><name pos:line="597" pos:column="83">sc</name><op:operator pos:line="597" pos:column="85">.</op:operator><name pos:line="597" pos:column="86">chPrev</name></name> <op:operator pos:line="597" pos:column="93">==</op:operator> <lit:literal type="char" pos:line="597" pos:column="96">'R'</lit:literal></expr></init></decl>;</decl_stmt>
						<if pos:line="598" pos:column="49">if <condition pos:line="598" pos:column="52">(<expr><name pos:line="598" pos:column="53">raw</name></expr>)</condition><then pos:line="598" pos:column="57">
							<expr_stmt><expr><name><name pos:line="599" pos:column="57">s</name><index pos:line="599" pos:column="58">[<expr><name pos:line="599" pos:column="59">lenS</name><op:operator pos:line="599" pos:column="63">--</op:operator></expr>]</index></name> <op:operator pos:line="599" pos:column="67">=</op:operator> <lit:literal type="char" pos:line="599" pos:column="69">'\0'</lit:literal></expr>;</expr_stmt></then></if>
						<decl_stmt><decl><type><name pos:line="600" pos:column="49">bool</name></type> <name pos:line="600" pos:column="54">valid</name> <init pos:line="600" pos:column="60">=
							<expr><op:operator pos:line="601" pos:column="57">(</op:operator><name pos:line="601" pos:column="58">lenS</name> <op:operator pos:line="601" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="601" pos:column="66">0</lit:literal><op:operator pos:line="601" pos:column="67">)</op:operator> <op:operator pos:line="601" pos:column="69">||</op:operator>
							<op:operator pos:line="602" pos:column="57">(</op:operator><op:operator pos:line="602" pos:column="58">(</op:operator><name pos:line="602" pos:column="59">lenS</name> <op:operator pos:line="602" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="602" pos:column="67">1</lit:literal><op:operator pos:line="602" pos:column="68">)</op:operator> <op:operator pos:line="602" pos:column="70">&amp;&amp;</op:operator> <op:operator pos:line="602" pos:column="73">(</op:operator><op:operator pos:line="602" pos:column="74">(</op:operator><name><name pos:line="602" pos:column="75">s</name><index pos:line="602" pos:column="76">[<expr><lit:literal type="number" pos:line="602" pos:column="77">0</lit:literal></expr>]</index></name> <op:operator pos:line="602" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="602" pos:column="83">'L'</lit:literal><op:operator pos:line="602" pos:column="86">)</op:operator> <op:operator pos:line="602" pos:column="88">||</op:operator> <op:operator pos:line="602" pos:column="91">(</op:operator><name><name pos:line="602" pos:column="92">s</name><index pos:line="602" pos:column="93">[<expr><lit:literal type="number" pos:line="602" pos:column="94">0</lit:literal></expr>]</index></name> <op:operator pos:line="602" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="602" pos:column="100">'u'</lit:literal><op:operator pos:line="602" pos:column="103">)</op:operator> <op:operator pos:line="602" pos:column="105">||</op:operator> <op:operator pos:line="602" pos:column="108">(</op:operator><name><name pos:line="602" pos:column="109">s</name><index pos:line="602" pos:column="110">[<expr><lit:literal type="number" pos:line="602" pos:column="111">0</lit:literal></expr>]</index></name> <op:operator pos:line="602" pos:column="114">==</op:operator> <lit:literal type="char" pos:line="602" pos:column="117">'U'</lit:literal><op:operator pos:line="602" pos:column="120">)</op:operator><op:operator pos:line="602" pos:column="121">)</op:operator><op:operator pos:line="602" pos:column="122">)</op:operator> <op:operator pos:line="602" pos:column="124">||</op:operator>
							<op:operator pos:line="603" pos:column="57">(</op:operator><op:operator pos:line="603" pos:column="58">(</op:operator><name pos:line="603" pos:column="59">lenS</name> <op:operator pos:line="603" pos:column="64">==</op:operator> <lit:literal type="number" pos:line="603" pos:column="67">2</lit:literal><op:operator pos:line="603" pos:column="68">)</op:operator> <op:operator pos:line="603" pos:column="70">&amp;&amp;</op:operator> <name pos:line="603" pos:column="73">literalString</name> <op:operator pos:line="603" pos:column="87">&amp;&amp;</op:operator> <op:operator pos:line="603" pos:column="90">(</op:operator><name><name pos:line="603" pos:column="91">s</name><index pos:line="603" pos:column="92">[<expr><lit:literal type="number" pos:line="603" pos:column="93">0</lit:literal></expr>]</index></name> <op:operator pos:line="603" pos:column="96">==</op:operator> <lit:literal type="char" pos:line="603" pos:column="99">'u'</lit:literal><op:operator pos:line="603" pos:column="102">)</op:operator> <op:operator pos:line="603" pos:column="104">&amp;&amp;</op:operator> <op:operator pos:line="603" pos:column="107">(</op:operator><name><name pos:line="603" pos:column="108">s</name><index pos:line="603" pos:column="109">[<expr><lit:literal type="number" pos:line="603" pos:column="110">1</lit:literal></expr>]</index></name> <op:operator pos:line="603" pos:column="113">==</op:operator> <lit:literal type="char" pos:line="603" pos:column="116">'8'</lit:literal><op:operator pos:line="603" pos:column="119">)</op:operator><op:operator pos:line="603" pos:column="120">)</op:operator></expr></init></decl>;</decl_stmt>
						<if pos:line="604" pos:column="49">if <condition pos:line="604" pos:column="52">(<expr><name pos:line="604" pos:column="53">valid</name></expr>)</condition><then pos:line="604" pos:column="59"> <block pos:line="604" pos:column="60">{
							<if pos:line="605" pos:column="57">if <condition pos:line="605" pos:column="60">(<expr><name pos:line="605" pos:column="61">literalString</name></expr>)</condition><then pos:line="605" pos:column="75">
								<expr_stmt><expr><call><name><name pos:line="606" pos:column="65">sc</name><op:operator pos:line="606" pos:column="67">.</op:operator><name pos:line="606" pos:column="68">ChangeState</name></name><argument_list pos:line="606" pos:column="79">(<argument><expr><op:operator pos:line="606" pos:column="80">(</op:operator><name pos:line="606" pos:column="81">raw</name> <op:operator pos:line="606" pos:column="85">?</op:operator> <name pos:line="606" pos:column="87">SCE_C_STRINGRAW</name> <op:operator pos:line="606" pos:column="103">:</op:operator> <name pos:line="606" pos:column="105">SCE_C_STRING</name><op:operator pos:line="606" pos:column="117">)</op:operator><op:operator pos:line="606" pos:column="118">|</op:operator><name pos:line="606" pos:column="119">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
							<else pos:line="607" pos:column="57">else
								<expr_stmt><expr><call><name><name pos:line="608" pos:column="65">sc</name><op:operator pos:line="608" pos:column="67">.</op:operator><name pos:line="608" pos:column="68">ChangeState</name></name><argument_list pos:line="608" pos:column="79">(<argument><expr><name pos:line="608" pos:column="80">SCE_C_CHARACTER</name><op:operator pos:line="608" pos:column="95">|</op:operator><name pos:line="608" pos:column="96">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
						}</block></then></if>
					}</block></then></if>
					<expr_stmt><expr><call><name><name pos:line="611" pos:column="41">sc</name><op:operator pos:line="611" pos:column="43">.</op:operator><name pos:line="611" pos:column="44">SetState</name></name><argument_list pos:line="611" pos:column="52">(<argument><expr><name pos:line="611" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="611" pos:column="66">|</op:operator><name pos:line="611" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="613" pos:column="33">break;</break>
			</case><case pos:line="614" pos:column="25">case <expr><name pos:line="614" pos:column="30">SCE_C_PREPROCESSOR</name></expr>:
				<if pos:line="615" pos:column="33">if <condition pos:line="615" pos:column="36">(<expr><name><name pos:line="615" pos:column="37">sc</name><op:operator pos:line="615" pos:column="39">.</op:operator><name pos:line="615" pos:column="40">atLineStart</name></name> <op:operator pos:line="615" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="615" pos:column="55">!</op:operator><name pos:line="615" pos:column="56">continuationLine</name></expr>)</condition><then pos:line="615" pos:column="73"> <block pos:line="615" pos:column="74">{
					<expr_stmt><expr><call><name><name pos:line="616" pos:column="41">sc</name><op:operator pos:line="616" pos:column="43">.</op:operator><name pos:line="616" pos:column="44">SetState</name></name><argument_list pos:line="616" pos:column="52">(<argument><expr><name pos:line="616" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="616" pos:column="66">|</op:operator><name pos:line="616" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="617" pos:column="35">else <if pos:line="617" pos:column="40">if <condition pos:line="617" pos:column="43">(<expr><name><name pos:line="617" pos:column="44">options</name><op:operator pos:line="617" pos:column="51">.</op:operator><name pos:line="617" pos:column="52">stylingWithinPreprocessor</name></name></expr>)</condition><then pos:line="617" pos:column="78"> <block pos:line="617" pos:column="79">{
					<if pos:line="618" pos:column="41">if <condition pos:line="618" pos:column="44">(<expr><call><name pos:line="618" pos:column="45">IsASpace</name><argument_list pos:line="618" pos:column="53">(<argument><expr><name><name pos:line="618" pos:column="54">sc</name><op:operator pos:line="618" pos:column="56">.</op:operator><name pos:line="618" pos:column="57">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="618" pos:column="61"> <block pos:line="618" pos:column="62">{
						<expr_stmt><expr><call><name><name pos:line="619" pos:column="49">sc</name><op:operator pos:line="619" pos:column="51">.</op:operator><name pos:line="619" pos:column="52">SetState</name></name><argument_list pos:line="619" pos:column="60">(<argument><expr><name pos:line="619" pos:column="61">SCE_C_DEFAULT</name><op:operator pos:line="619" pos:column="74">|</op:operator><name pos:line="619" pos:column="75">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="621" pos:column="35">else <block pos:line="621" pos:column="40">{
					<if pos:line="622" pos:column="41">if <condition pos:line="622" pos:column="44">(<expr><call><name><name pos:line="622" pos:column="45">sc</name><op:operator pos:line="622" pos:column="47">.</op:operator><name pos:line="622" pos:column="48">Match</name></name><argument_list pos:line="622" pos:column="53">(<argument><expr><lit:literal type="char" pos:line="622" pos:column="54">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="622" pos:column="59">'*'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="622" pos:column="64">||</op:operator> <call><name><name pos:line="622" pos:column="67">sc</name><op:operator pos:line="622" pos:column="69">.</op:operator><name pos:line="622" pos:column="70">Match</name></name><argument_list pos:line="622" pos:column="75">(<argument><expr><lit:literal type="char" pos:line="622" pos:column="76">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="622" pos:column="81">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="622" pos:column="86"> <block pos:line="622" pos:column="87">{
						<expr_stmt><expr><call><name><name pos:line="623" pos:column="49">sc</name><op:operator pos:line="623" pos:column="51">.</op:operator><name pos:line="623" pos:column="52">SetState</name></name><argument_list pos:line="623" pos:column="60">(<argument><expr><name pos:line="623" pos:column="61">SCE_C_DEFAULT</name><op:operator pos:line="623" pos:column="74">|</op:operator><name pos:line="623" pos:column="75">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if></else></if>
				<break pos:line="626" pos:column="33">break;</break>
			</case><case pos:line="627" pos:column="25">case <expr><name pos:line="627" pos:column="30">SCE_C_COMMENT</name></expr>:
				<if pos:line="628" pos:column="33">if <condition pos:line="628" pos:column="36">(<expr><call><name><name pos:line="628" pos:column="37">sc</name><op:operator pos:line="628" pos:column="39">.</op:operator><name pos:line="628" pos:column="40">Match</name></name><argument_list pos:line="628" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="628" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="628" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="628" pos:column="56"> <block pos:line="628" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="629" pos:column="41">sc</name><op:operator pos:line="629" pos:column="43">.</op:operator><name pos:line="629" pos:column="44">Forward</name></name><argument_list pos:line="629" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="630" pos:column="41">sc</name><op:operator pos:line="630" pos:column="43">.</op:operator><name pos:line="630" pos:column="44">ForwardSetState</name></name><argument_list pos:line="630" pos:column="59">(<argument><expr><name pos:line="630" pos:column="60">SCE_C_DEFAULT</name><op:operator pos:line="630" pos:column="73">|</op:operator><name pos:line="630" pos:column="74">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="632" pos:column="33">break;</break>
			</case><case pos:line="633" pos:column="25">case <expr><name pos:line="633" pos:column="30">SCE_C_COMMENTDOC</name></expr>:
				<if pos:line="634" pos:column="33">if <condition pos:line="634" pos:column="36">(<expr><call><name><name pos:line="634" pos:column="37">sc</name><op:operator pos:line="634" pos:column="39">.</op:operator><name pos:line="634" pos:column="40">Match</name></name><argument_list pos:line="634" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="634" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="634" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="634" pos:column="56"> <block pos:line="634" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="635" pos:column="41">sc</name><op:operator pos:line="635" pos:column="43">.</op:operator><name pos:line="635" pos:column="44">Forward</name></name><argument_list pos:line="635" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="636" pos:column="41">sc</name><op:operator pos:line="636" pos:column="43">.</op:operator><name pos:line="636" pos:column="44">ForwardSetState</name></name><argument_list pos:line="636" pos:column="59">(<argument><expr><name pos:line="636" pos:column="60">SCE_C_DEFAULT</name><op:operator pos:line="636" pos:column="73">|</op:operator><name pos:line="636" pos:column="74">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="637" pos:column="35">else <if pos:line="637" pos:column="40">if <condition pos:line="637" pos:column="43">(<expr><name><name pos:line="637" pos:column="44">sc</name><op:operator pos:line="637" pos:column="46">.</op:operator><name pos:line="637" pos:column="47">ch</name></name> <op:operator pos:line="637" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="637" pos:column="53">'@'</lit:literal> <op:operator pos:line="637" pos:column="57">||</op:operator> <name><name pos:line="637" pos:column="60">sc</name><op:operator pos:line="637" pos:column="62">.</op:operator><name pos:line="637" pos:column="63">ch</name></name> <op:operator pos:line="637" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="637" pos:column="69">'\\'</lit:literal></expr>)</condition><then pos:line="637" pos:column="74"> <block pos:line="637" pos:column="75">{ <comment type="line" pos:line="637" pos:column="77">// JavaDoc and Doxygen support</comment>
					<comment type="line" pos:line="638" pos:column="41">// Verify that we have the conditions to mark a comment-doc-keyword</comment>
					<if pos:line="639" pos:column="41">if <condition pos:line="639" pos:column="44">(<expr><op:operator pos:line="639" pos:column="45">(</op:operator><call><name pos:line="639" pos:column="46">IsASpace</name><argument_list pos:line="639" pos:column="54">(<argument><expr><name><name pos:line="639" pos:column="55">sc</name><op:operator pos:line="639" pos:column="57">.</op:operator><name pos:line="639" pos:column="58">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="639" pos:column="66">||</op:operator> <name><name pos:line="639" pos:column="69">sc</name><op:operator pos:line="639" pos:column="71">.</op:operator><name pos:line="639" pos:column="72">chPrev</name></name> <op:operator pos:line="639" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="639" pos:column="82">'*'</lit:literal><op:operator pos:line="639" pos:column="85">)</op:operator> <op:operator pos:line="639" pos:column="87">&amp;&amp;</op:operator> <op:operator pos:line="639" pos:column="90">(</op:operator><op:operator pos:line="639" pos:column="91">!</op:operator><call><name pos:line="639" pos:column="92">IsASpace</name><argument_list pos:line="639" pos:column="100">(<argument><expr><name><name pos:line="639" pos:column="101">sc</name><op:operator pos:line="639" pos:column="103">.</op:operator><name pos:line="639" pos:column="104">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="639" pos:column="111">)</op:operator></expr>)</condition><then pos:line="639" pos:column="113"> <block pos:line="639" pos:column="114">{
						<expr_stmt><expr><name pos:line="640" pos:column="49">styleBeforeDCKeyword</name> <op:operator pos:line="640" pos:column="70">=</op:operator> <name pos:line="640" pos:column="72">SCE_C_COMMENTDOC</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="641" pos:column="49">sc</name><op:operator pos:line="641" pos:column="51">.</op:operator><name pos:line="641" pos:column="52">SetState</name></name><argument_list pos:line="641" pos:column="60">(<argument><expr><name pos:line="641" pos:column="61">SCE_C_COMMENTDOCKEYWORD</name><op:operator pos:line="641" pos:column="84">|</op:operator><name pos:line="641" pos:column="85">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="644" pos:column="33">break;</break>
			</case><case pos:line="645" pos:column="25">case <expr><name pos:line="645" pos:column="30">SCE_C_COMMENTLINE</name></expr>:
				<if pos:line="646" pos:column="33">if <condition pos:line="646" pos:column="36">(<expr><name><name pos:line="646" pos:column="37">sc</name><op:operator pos:line="646" pos:column="39">.</op:operator><name pos:line="646" pos:column="40">atLineStart</name></name> <op:operator pos:line="646" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="646" pos:column="55">!</op:operator><name pos:line="646" pos:column="56">continuationLine</name></expr>)</condition><then pos:line="646" pos:column="73"> <block pos:line="646" pos:column="74">{
					<expr_stmt><expr><call><name><name pos:line="647" pos:column="41">sc</name><op:operator pos:line="647" pos:column="43">.</op:operator><name pos:line="647" pos:column="44">SetState</name></name><argument_list pos:line="647" pos:column="52">(<argument><expr><name pos:line="647" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="647" pos:column="66">|</op:operator><name pos:line="647" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="649" pos:column="33">break;</break>
			</case><case pos:line="650" pos:column="25">case <expr><name pos:line="650" pos:column="30">SCE_C_COMMENTLINEDOC</name></expr>:
				<if pos:line="651" pos:column="33">if <condition pos:line="651" pos:column="36">(<expr><name><name pos:line="651" pos:column="37">sc</name><op:operator pos:line="651" pos:column="39">.</op:operator><name pos:line="651" pos:column="40">atLineStart</name></name> <op:operator pos:line="651" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="651" pos:column="55">!</op:operator><name pos:line="651" pos:column="56">continuationLine</name></expr>)</condition><then pos:line="651" pos:column="73"> <block pos:line="651" pos:column="74">{
					<expr_stmt><expr><call><name><name pos:line="652" pos:column="41">sc</name><op:operator pos:line="652" pos:column="43">.</op:operator><name pos:line="652" pos:column="44">SetState</name></name><argument_list pos:line="652" pos:column="52">(<argument><expr><name pos:line="652" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="652" pos:column="66">|</op:operator><name pos:line="652" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="653" pos:column="35">else <if pos:line="653" pos:column="40">if <condition pos:line="653" pos:column="43">(<expr><name><name pos:line="653" pos:column="44">sc</name><op:operator pos:line="653" pos:column="46">.</op:operator><name pos:line="653" pos:column="47">ch</name></name> <op:operator pos:line="653" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="653" pos:column="53">'@'</lit:literal> <op:operator pos:line="653" pos:column="57">||</op:operator> <name><name pos:line="653" pos:column="60">sc</name><op:operator pos:line="653" pos:column="62">.</op:operator><name pos:line="653" pos:column="63">ch</name></name> <op:operator pos:line="653" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="653" pos:column="69">'\\'</lit:literal></expr>)</condition><then pos:line="653" pos:column="74"> <block pos:line="653" pos:column="75">{ <comment type="line" pos:line="653" pos:column="77">// JavaDoc and Doxygen support</comment>
					<comment type="line" pos:line="654" pos:column="41">// Verify that we have the conditions to mark a comment-doc-keyword</comment>
					<if pos:line="655" pos:column="41">if <condition pos:line="655" pos:column="44">(<expr><op:operator pos:line="655" pos:column="45">(</op:operator><call><name pos:line="655" pos:column="46">IsASpace</name><argument_list pos:line="655" pos:column="54">(<argument><expr><name><name pos:line="655" pos:column="55">sc</name><op:operator pos:line="655" pos:column="57">.</op:operator><name pos:line="655" pos:column="58">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="655" pos:column="66">||</op:operator> <name><name pos:line="655" pos:column="69">sc</name><op:operator pos:line="655" pos:column="71">.</op:operator><name pos:line="655" pos:column="72">chPrev</name></name> <op:operator pos:line="655" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="655" pos:column="82">'/'</lit:literal> <op:operator pos:line="655" pos:column="86">||</op:operator> <name><name pos:line="655" pos:column="89">sc</name><op:operator pos:line="655" pos:column="91">.</op:operator><name pos:line="655" pos:column="92">chPrev</name></name> <op:operator pos:line="655" pos:column="99">==</op:operator> <lit:literal type="char" pos:line="655" pos:column="102">'!'</lit:literal><op:operator pos:line="655" pos:column="105">)</op:operator> <op:operator pos:line="655" pos:column="107">&amp;&amp;</op:operator> <op:operator pos:line="655" pos:column="110">(</op:operator><op:operator pos:line="655" pos:column="111">!</op:operator><call><name pos:line="655" pos:column="112">IsASpace</name><argument_list pos:line="655" pos:column="120">(<argument><expr><name><name pos:line="655" pos:column="121">sc</name><op:operator pos:line="655" pos:column="123">.</op:operator><name pos:line="655" pos:column="124">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="655" pos:column="131">)</op:operator></expr>)</condition><then pos:line="655" pos:column="133"> <block pos:line="655" pos:column="134">{
						<expr_stmt><expr><name pos:line="656" pos:column="49">styleBeforeDCKeyword</name> <op:operator pos:line="656" pos:column="70">=</op:operator> <name pos:line="656" pos:column="72">SCE_C_COMMENTLINEDOC</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="657" pos:column="49">sc</name><op:operator pos:line="657" pos:column="51">.</op:operator><name pos:line="657" pos:column="52">SetState</name></name><argument_list pos:line="657" pos:column="60">(<argument><expr><name pos:line="657" pos:column="61">SCE_C_COMMENTDOCKEYWORD</name><op:operator pos:line="657" pos:column="84">|</op:operator><name pos:line="657" pos:column="85">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="660" pos:column="33">break;</break>
			</case><case pos:line="661" pos:column="25">case <expr><name pos:line="661" pos:column="30">SCE_C_COMMENTDOCKEYWORD</name></expr>:
				<if pos:line="662" pos:column="33">if <condition pos:line="662" pos:column="36">(<expr><op:operator pos:line="662" pos:column="37">(</op:operator><name pos:line="662" pos:column="38">styleBeforeDCKeyword</name> <op:operator pos:line="662" pos:column="59">==</op:operator> <name pos:line="662" pos:column="62">SCE_C_COMMENTDOC</name><op:operator pos:line="662" pos:column="78">)</op:operator> <op:operator pos:line="662" pos:column="80">&amp;&amp;</op:operator> <call><name><name pos:line="662" pos:column="83">sc</name><op:operator pos:line="662" pos:column="85">.</op:operator><name pos:line="662" pos:column="86">Match</name></name><argument_list pos:line="662" pos:column="91">(<argument><expr><lit:literal type="char" pos:line="662" pos:column="92">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="662" pos:column="97">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="662" pos:column="102"> <block pos:line="662" pos:column="103">{
					<expr_stmt><expr><call><name><name pos:line="663" pos:column="41">sc</name><op:operator pos:line="663" pos:column="43">.</op:operator><name pos:line="663" pos:column="44">ChangeState</name></name><argument_list pos:line="663" pos:column="55">(<argument><expr><name pos:line="663" pos:column="56">SCE_C_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="664" pos:column="41">sc</name><op:operator pos:line="664" pos:column="43">.</op:operator><name pos:line="664" pos:column="44">Forward</name></name><argument_list pos:line="664" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="665" pos:column="41">sc</name><op:operator pos:line="665" pos:column="43">.</op:operator><name pos:line="665" pos:column="44">ForwardSetState</name></name><argument_list pos:line="665" pos:column="59">(<argument><expr><name pos:line="665" pos:column="60">SCE_C_DEFAULT</name><op:operator pos:line="665" pos:column="73">|</op:operator><name pos:line="665" pos:column="74">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="666" pos:column="35">else <if pos:line="666" pos:column="40">if <condition pos:line="666" pos:column="43">(<expr><op:operator pos:line="666" pos:column="44">!</op:operator><call><name><name pos:line="666" pos:column="45">setDoxygen</name><op:operator pos:line="666" pos:column="55">.</op:operator><name pos:line="666" pos:column="56">Contains</name></name><argument_list pos:line="666" pos:column="64">(<argument><expr><name><name pos:line="666" pos:column="65">sc</name><op:operator pos:line="666" pos:column="67">.</op:operator><name pos:line="666" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="666" pos:column="72"> <block pos:line="666" pos:column="73">{
					<decl_stmt><decl><type><name pos:line="667" pos:column="41">char</name></type> <name><name pos:line="667" pos:column="46">s</name><index pos:line="667" pos:column="47">[<expr><lit:literal type="number" pos:line="667" pos:column="48">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<if pos:line="668" pos:column="41">if <condition pos:line="668" pos:column="44">(<expr><name pos:line="668" pos:column="45">caseSensitive</name></expr>)</condition><then pos:line="668" pos:column="59"> <block pos:line="668" pos:column="60">{
						<expr_stmt><expr><call><name><name pos:line="669" pos:column="49">sc</name><op:operator pos:line="669" pos:column="51">.</op:operator><name pos:line="669" pos:column="52">GetCurrent</name></name><argument_list pos:line="669" pos:column="62">(<argument><expr><name pos:line="669" pos:column="63">s</name></expr></argument>, <argument><expr><sizeof pos:line="669" pos:column="66">sizeof<argument_list pos:line="669" pos:column="72">(<argument><expr><name pos:line="669" pos:column="73">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="670" pos:column="43">else <block pos:line="670" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="671" pos:column="49">sc</name><op:operator pos:line="671" pos:column="51">.</op:operator><name pos:line="671" pos:column="52">GetCurrentLowered</name></name><argument_list pos:line="671" pos:column="69">(<argument><expr><name pos:line="671" pos:column="70">s</name></expr></argument>, <argument><expr><sizeof pos:line="671" pos:column="73">sizeof<argument_list pos:line="671" pos:column="79">(<argument><expr><name pos:line="671" pos:column="80">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<if pos:line="673" pos:column="41">if <condition pos:line="673" pos:column="44">(<expr><op:operator pos:line="673" pos:column="45">!</op:operator><call><name pos:line="673" pos:column="46">IsASpace</name><argument_list pos:line="673" pos:column="54">(<argument><expr><name><name pos:line="673" pos:column="55">sc</name><op:operator pos:line="673" pos:column="57">.</op:operator><name pos:line="673" pos:column="58">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="673" pos:column="62">||</op:operator> <op:operator pos:line="673" pos:column="65">!</op:operator><call><name><name pos:line="673" pos:column="66">keywords3</name><op:operator pos:line="673" pos:column="75">.</op:operator><name pos:line="673" pos:column="76">InList</name></name><argument_list pos:line="673" pos:column="82">(<argument><expr><name pos:line="673" pos:column="83">s</name> <op:operator pos:line="673" pos:column="85">+</op:operator> <lit:literal type="number" pos:line="673" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="673" pos:column="90"> <block pos:line="673" pos:column="91">{
						<expr_stmt><expr><call><name><name pos:line="674" pos:column="49">sc</name><op:operator pos:line="674" pos:column="51">.</op:operator><name pos:line="674" pos:column="52">ChangeState</name></name><argument_list pos:line="674" pos:column="63">(<argument><expr><name pos:line="674" pos:column="64">SCE_C_COMMENTDOCKEYWORDERROR</name><op:operator pos:line="674" pos:column="92">|</op:operator><name pos:line="674" pos:column="93">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name pos:line="676" pos:column="41">sc</name><op:operator pos:line="676" pos:column="43">.</op:operator><name pos:line="676" pos:column="44">SetState</name></name><argument_list pos:line="676" pos:column="52">(<argument><expr><name pos:line="676" pos:column="53">styleBeforeDCKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="678" pos:column="33">break;</break>
			</case><case pos:line="679" pos:column="25">case <expr><name pos:line="679" pos:column="30">SCE_C_STRING</name></expr>:
				<if pos:line="680" pos:column="33">if <condition pos:line="680" pos:column="36">(<expr><name><name pos:line="680" pos:column="37">sc</name><op:operator pos:line="680" pos:column="39">.</op:operator><name pos:line="680" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="680" pos:column="50"> <block pos:line="680" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="681" pos:column="41">sc</name><op:operator pos:line="681" pos:column="43">.</op:operator><name pos:line="681" pos:column="44">ChangeState</name></name><argument_list pos:line="681" pos:column="55">(<argument><expr><name pos:line="681" pos:column="56">SCE_C_STRINGEOL</name><op:operator pos:line="681" pos:column="71">|</op:operator><name pos:line="681" pos:column="72">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="682" pos:column="35">else <if pos:line="682" pos:column="40">if <condition pos:line="682" pos:column="43">(<expr><name pos:line="682" pos:column="44">isIncludePreprocessor</name></expr>)</condition><then pos:line="682" pos:column="66"> <block pos:line="682" pos:column="67">{
					<if pos:line="683" pos:column="41">if <condition pos:line="683" pos:column="44">(<expr><name><name pos:line="683" pos:column="45">sc</name><op:operator pos:line="683" pos:column="47">.</op:operator><name pos:line="683" pos:column="48">ch</name></name> <op:operator pos:line="683" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="683" pos:column="54">'&gt;'</lit:literal></expr>)</condition><then pos:line="683" pos:column="58"> <block pos:line="683" pos:column="59">{
						<expr_stmt><expr><call><name><name pos:line="684" pos:column="49">sc</name><op:operator pos:line="684" pos:column="51">.</op:operator><name pos:line="684" pos:column="52">ForwardSetState</name></name><argument_list pos:line="684" pos:column="67">(<argument><expr><name pos:line="684" pos:column="68">SCE_C_DEFAULT</name><op:operator pos:line="684" pos:column="81">|</op:operator><name pos:line="684" pos:column="82">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="685" pos:column="49">isIncludePreprocessor</name> <op:operator pos:line="685" pos:column="71">=</op:operator> <lit:literal type="boolean" pos:line="685" pos:column="73">false</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="687" pos:column="35">else <if pos:line="687" pos:column="40">if <condition pos:line="687" pos:column="43">(<expr><name><name pos:line="687" pos:column="44">sc</name><op:operator pos:line="687" pos:column="46">.</op:operator><name pos:line="687" pos:column="47">ch</name></name> <op:operator pos:line="687" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="687" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="687" pos:column="58"> <block pos:line="687" pos:column="59">{
					<if pos:line="688" pos:column="41">if <condition pos:line="688" pos:column="44">(<expr><name><name pos:line="688" pos:column="45">sc</name><op:operator pos:line="688" pos:column="47">.</op:operator><name pos:line="688" pos:column="48">chNext</name></name> <op:operator pos:line="688" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="688" pos:column="58">'\"'</lit:literal> <op:operator pos:line="688" pos:column="63">||</op:operator> <name><name pos:line="688" pos:column="66">sc</name><op:operator pos:line="688" pos:column="68">.</op:operator><name pos:line="688" pos:column="69">chNext</name></name> <op:operator pos:line="688" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="688" pos:column="79">'\''</lit:literal> <op:operator pos:line="688" pos:column="84">||</op:operator> <name><name pos:line="688" pos:column="87">sc</name><op:operator pos:line="688" pos:column="89">.</op:operator><name pos:line="688" pos:column="90">chNext</name></name> <op:operator pos:line="688" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="688" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="688" pos:column="105"> <block pos:line="688" pos:column="106">{
						<expr_stmt><expr><call><name><name pos:line="689" pos:column="49">sc</name><op:operator pos:line="689" pos:column="51">.</op:operator><name pos:line="689" pos:column="52">Forward</name></name><argument_list pos:line="689" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="691" pos:column="35">else <if pos:line="691" pos:column="40">if <condition pos:line="691" pos:column="43">(<expr><name><name pos:line="691" pos:column="44">sc</name><op:operator pos:line="691" pos:column="46">.</op:operator><name pos:line="691" pos:column="47">ch</name></name> <op:operator pos:line="691" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="691" pos:column="53">'\"'</lit:literal></expr>)</condition><then pos:line="691" pos:column="58"> <block pos:line="691" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="692" pos:column="41">sc</name><op:operator pos:line="692" pos:column="43">.</op:operator><name pos:line="692" pos:column="44">ForwardSetState</name></name><argument_list pos:line="692" pos:column="59">(<argument><expr><name pos:line="692" pos:column="60">SCE_C_DEFAULT</name><op:operator pos:line="692" pos:column="73">|</op:operator><name pos:line="692" pos:column="74">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if>
				<break pos:line="694" pos:column="33">break;</break>
			</case><case pos:line="695" pos:column="25">case <expr><name pos:line="695" pos:column="30">SCE_C_STRINGRAW</name></expr>:
				<if pos:line="696" pos:column="33">if <condition pos:line="696" pos:column="36">(<expr><call><name><name pos:line="696" pos:column="37">sc</name><op:operator pos:line="696" pos:column="39">.</op:operator><name pos:line="696" pos:column="40">Match</name></name><argument_list pos:line="696" pos:column="45">(<argument><expr><call><name><name pos:line="696" pos:column="46">rawStringTerminator</name><op:operator pos:line="696" pos:column="65">.</op:operator><name pos:line="696" pos:column="66">c_str</name></name><argument_list pos:line="696" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="696" pos:column="75"> <block pos:line="696" pos:column="76">{
					<for pos:line="697" pos:column="41">for (<init><decl><type><name pos:line="697" pos:column="46">size_t</name></type> <name pos:line="697" pos:column="53">termPos</name><init pos:line="697" pos:column="60">=<expr><call><name><name pos:line="697" pos:column="61">rawStringTerminator</name><op:operator pos:line="697" pos:column="80">.</op:operator><name pos:line="697" pos:column="81">size</name></name><argument_list pos:line="697" pos:column="85">()</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="697" pos:column="89">termPos</name></expr>;</condition> <incr><expr><name pos:line="697" pos:column="98">termPos</name><op:operator pos:line="697" pos:column="105">--</op:operator></expr></incr>)
						<expr_stmt><expr><call><name><name pos:line="698" pos:column="49">sc</name><op:operator pos:line="698" pos:column="51">.</op:operator><name pos:line="698" pos:column="52">Forward</name></name><argument_list pos:line="698" pos:column="59">()</argument_list></call></expr>;</expr_stmt></for>
					<expr_stmt><expr><call><name><name pos:line="699" pos:column="41">sc</name><op:operator pos:line="699" pos:column="43">.</op:operator><name pos:line="699" pos:column="44">SetState</name></name><argument_list pos:line="699" pos:column="52">(<argument><expr><name pos:line="699" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="699" pos:column="66">|</op:operator><name pos:line="699" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="700" pos:column="41">rawStringTerminator</name> <op:operator pos:line="700" pos:column="61">=</op:operator> <lit:literal type="string" pos:line="700" pos:column="63">""</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="702" pos:column="33">break;</break>
			</case><case pos:line="703" pos:column="25">case <expr><name pos:line="703" pos:column="30">SCE_C_CHARACTER</name></expr>:
				<if pos:line="704" pos:column="33">if <condition pos:line="704" pos:column="36">(<expr><name><name pos:line="704" pos:column="37">sc</name><op:operator pos:line="704" pos:column="39">.</op:operator><name pos:line="704" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="704" pos:column="50"> <block pos:line="704" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="705" pos:column="41">sc</name><op:operator pos:line="705" pos:column="43">.</op:operator><name pos:line="705" pos:column="44">ChangeState</name></name><argument_list pos:line="705" pos:column="55">(<argument><expr><name pos:line="705" pos:column="56">SCE_C_STRINGEOL</name><op:operator pos:line="705" pos:column="71">|</op:operator><name pos:line="705" pos:column="72">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="706" pos:column="35">else <if pos:line="706" pos:column="40">if <condition pos:line="706" pos:column="43">(<expr><name><name pos:line="706" pos:column="44">sc</name><op:operator pos:line="706" pos:column="46">.</op:operator><name pos:line="706" pos:column="47">ch</name></name> <op:operator pos:line="706" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="706" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="706" pos:column="58"> <block pos:line="706" pos:column="59">{
					<if pos:line="707" pos:column="41">if <condition pos:line="707" pos:column="44">(<expr><name><name pos:line="707" pos:column="45">sc</name><op:operator pos:line="707" pos:column="47">.</op:operator><name pos:line="707" pos:column="48">chNext</name></name> <op:operator pos:line="707" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="707" pos:column="58">'\"'</lit:literal> <op:operator pos:line="707" pos:column="63">||</op:operator> <name><name pos:line="707" pos:column="66">sc</name><op:operator pos:line="707" pos:column="68">.</op:operator><name pos:line="707" pos:column="69">chNext</name></name> <op:operator pos:line="707" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="707" pos:column="79">'\''</lit:literal> <op:operator pos:line="707" pos:column="84">||</op:operator> <name><name pos:line="707" pos:column="87">sc</name><op:operator pos:line="707" pos:column="89">.</op:operator><name pos:line="707" pos:column="90">chNext</name></name> <op:operator pos:line="707" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="707" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="707" pos:column="105"> <block pos:line="707" pos:column="106">{
						<expr_stmt><expr><call><name><name pos:line="708" pos:column="49">sc</name><op:operator pos:line="708" pos:column="51">.</op:operator><name pos:line="708" pos:column="52">Forward</name></name><argument_list pos:line="708" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="710" pos:column="35">else <if pos:line="710" pos:column="40">if <condition pos:line="710" pos:column="43">(<expr><name><name pos:line="710" pos:column="44">sc</name><op:operator pos:line="710" pos:column="46">.</op:operator><name pos:line="710" pos:column="47">ch</name></name> <op:operator pos:line="710" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="710" pos:column="53">'\''</lit:literal></expr>)</condition><then pos:line="710" pos:column="58"> <block pos:line="710" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="711" pos:column="41">sc</name><op:operator pos:line="711" pos:column="43">.</op:operator><name pos:line="711" pos:column="44">ForwardSetState</name></name><argument_list pos:line="711" pos:column="59">(<argument><expr><name pos:line="711" pos:column="60">SCE_C_DEFAULT</name><op:operator pos:line="711" pos:column="73">|</op:operator><name pos:line="711" pos:column="74">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="713" pos:column="33">break;</break>
			</case><case pos:line="714" pos:column="25">case <expr><name pos:line="714" pos:column="30">SCE_C_REGEX</name></expr>:
				<if pos:line="715" pos:column="33">if <condition pos:line="715" pos:column="36">(<expr><name><name pos:line="715" pos:column="37">sc</name><op:operator pos:line="715" pos:column="39">.</op:operator><name pos:line="715" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="715" pos:column="52"> <block pos:line="715" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="716" pos:column="41">sc</name><op:operator pos:line="716" pos:column="43">.</op:operator><name pos:line="716" pos:column="44">SetState</name></name><argument_list pos:line="716" pos:column="52">(<argument><expr><name pos:line="716" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="716" pos:column="66">|</op:operator><name pos:line="716" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="717" pos:column="35">else <if pos:line="717" pos:column="40">if <condition pos:line="717" pos:column="43">(<expr><name><name pos:line="717" pos:column="44">sc</name><op:operator pos:line="717" pos:column="46">.</op:operator><name pos:line="717" pos:column="47">ch</name></name> <op:operator pos:line="717" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="717" pos:column="53">'/'</lit:literal></expr>)</condition><then pos:line="717" pos:column="57"> <block pos:line="717" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="718" pos:column="41">sc</name><op:operator pos:line="718" pos:column="43">.</op:operator><name pos:line="718" pos:column="44">Forward</name></name><argument_list pos:line="718" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<while pos:line="719" pos:column="41">while <condition pos:line="719" pos:column="47">(<expr><op:operator pos:line="719" pos:column="48">(</op:operator><name><name pos:line="719" pos:column="49">sc</name><op:operator pos:line="719" pos:column="51">.</op:operator><name pos:line="719" pos:column="52">ch</name></name> <op:operator pos:line="719" pos:column="55">&lt;</op:operator> <lit:literal type="number" pos:line="719" pos:column="57">0x80</lit:literal><op:operator pos:line="719" pos:column="61">)</op:operator> <op:operator pos:line="719" pos:column="63">&amp;&amp;</op:operator> <call><name pos:line="719" pos:column="66">islower</name><argument_list pos:line="719" pos:column="73">(<argument><expr><name><name pos:line="719" pos:column="74">sc</name><op:operator pos:line="719" pos:column="76">.</op:operator><name pos:line="719" pos:column="77">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition>
						<expr_stmt><expr><call><name><name pos:line="720" pos:column="49">sc</name><op:operator pos:line="720" pos:column="51">.</op:operator><name pos:line="720" pos:column="52">Forward</name></name><argument_list pos:line="720" pos:column="59">()</argument_list></call></expr>;</expr_stmt></while>    <comment type="line" pos:line="720" pos:column="66">// gobble regex flags</comment>
					<expr_stmt><expr><call><name><name pos:line="721" pos:column="41">sc</name><op:operator pos:line="721" pos:column="43">.</op:operator><name pos:line="721" pos:column="44">SetState</name></name><argument_list pos:line="721" pos:column="52">(<argument><expr><name pos:line="721" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="721" pos:column="66">|</op:operator><name pos:line="721" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="722" pos:column="35">else <if pos:line="722" pos:column="40">if <condition pos:line="722" pos:column="43">(<expr><name><name pos:line="722" pos:column="44">sc</name><op:operator pos:line="722" pos:column="46">.</op:operator><name pos:line="722" pos:column="47">ch</name></name> <op:operator pos:line="722" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="722" pos:column="53">'\\'</lit:literal></expr>)</condition><then pos:line="722" pos:column="58"> <block pos:line="722" pos:column="59">{
					<comment type="line" pos:line="723" pos:column="41">// Gobble up the quoted character</comment>
					<if pos:line="724" pos:column="41">if <condition pos:line="724" pos:column="44">(<expr><name><name pos:line="724" pos:column="45">sc</name><op:operator pos:line="724" pos:column="47">.</op:operator><name pos:line="724" pos:column="48">chNext</name></name> <op:operator pos:line="724" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="724" pos:column="58">'\\'</lit:literal> <op:operator pos:line="724" pos:column="63">||</op:operator> <name><name pos:line="724" pos:column="66">sc</name><op:operator pos:line="724" pos:column="68">.</op:operator><name pos:line="724" pos:column="69">chNext</name></name> <op:operator pos:line="724" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="724" pos:column="79">'/'</lit:literal></expr>)</condition><then pos:line="724" pos:column="83"> <block pos:line="724" pos:column="84">{
						<expr_stmt><expr><call><name><name pos:line="725" pos:column="49">sc</name><op:operator pos:line="725" pos:column="51">.</op:operator><name pos:line="725" pos:column="52">Forward</name></name><argument_list pos:line="725" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if></else></if>
				<break pos:line="728" pos:column="33">break;</break>
			</case><case pos:line="729" pos:column="25">case <expr><name pos:line="729" pos:column="30">SCE_C_STRINGEOL</name></expr>:
				<if pos:line="730" pos:column="33">if <condition pos:line="730" pos:column="36">(<expr><name><name pos:line="730" pos:column="37">sc</name><op:operator pos:line="730" pos:column="39">.</op:operator><name pos:line="730" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="730" pos:column="52"> <block pos:line="730" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="731" pos:column="41">sc</name><op:operator pos:line="731" pos:column="43">.</op:operator><name pos:line="731" pos:column="44">SetState</name></name><argument_list pos:line="731" pos:column="52">(<argument><expr><name pos:line="731" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="731" pos:column="66">|</op:operator><name pos:line="731" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="733" pos:column="33">break;</break>
			</case><case pos:line="734" pos:column="25">case <expr><name pos:line="734" pos:column="30">SCE_C_VERBATIM</name></expr>:
				<if pos:line="735" pos:column="33">if <condition pos:line="735" pos:column="36">(<expr><name><name pos:line="735" pos:column="37">sc</name><op:operator pos:line="735" pos:column="39">.</op:operator><name pos:line="735" pos:column="40">ch</name></name> <op:operator pos:line="735" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="735" pos:column="46">'\"'</lit:literal></expr>)</condition><then pos:line="735" pos:column="51"> <block pos:line="735" pos:column="52">{
					<if pos:line="736" pos:column="41">if <condition pos:line="736" pos:column="44">(<expr><name><name pos:line="736" pos:column="45">sc</name><op:operator pos:line="736" pos:column="47">.</op:operator><name pos:line="736" pos:column="48">chNext</name></name> <op:operator pos:line="736" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="736" pos:column="58">'\"'</lit:literal></expr>)</condition><then pos:line="736" pos:column="63"> <block pos:line="736" pos:column="64">{
						<expr_stmt><expr><call><name><name pos:line="737" pos:column="49">sc</name><op:operator pos:line="737" pos:column="51">.</op:operator><name pos:line="737" pos:column="52">Forward</name></name><argument_list pos:line="737" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="738" pos:column="43">else <block pos:line="738" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="739" pos:column="49">sc</name><op:operator pos:line="739" pos:column="51">.</op:operator><name pos:line="739" pos:column="52">ForwardSetState</name></name><argument_list pos:line="739" pos:column="67">(<argument><expr><name pos:line="739" pos:column="68">SCE_C_DEFAULT</name><op:operator pos:line="739" pos:column="81">|</op:operator><name pos:line="739" pos:column="82">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
				<break pos:line="742" pos:column="33">break;</break>
			</case><case pos:line="743" pos:column="25">case <expr><name pos:line="743" pos:column="30">SCE_C_TRIPLEVERBATIM</name></expr>:
				<if pos:line="744" pos:column="33">if <condition pos:line="744" pos:column="36">(<expr><call><name><name pos:line="744" pos:column="37">sc</name><op:operator pos:line="744" pos:column="39">.</op:operator><name pos:line="744" pos:column="40">Match</name></name><argument_list pos:line="744" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="744" pos:column="46">"\"\"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="744" pos:column="56"> <block pos:line="744" pos:column="57">{
					<while pos:line="745" pos:column="41">while <condition pos:line="745" pos:column="47">(<expr><call><name><name pos:line="745" pos:column="48">sc</name><op:operator pos:line="745" pos:column="50">.</op:operator><name pos:line="745" pos:column="51">Match</name></name><argument_list pos:line="745" pos:column="56">(<argument><expr><lit:literal type="char" pos:line="745" pos:column="57">'"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="745" pos:column="63">{
						<expr_stmt><expr><call><name><name pos:line="746" pos:column="49">sc</name><op:operator pos:line="746" pos:column="51">.</op:operator><name pos:line="746" pos:column="52">Forward</name></name><argument_list pos:line="746" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					<expr_stmt><expr><call><name><name pos:line="748" pos:column="41">sc</name><op:operator pos:line="748" pos:column="43">.</op:operator><name pos:line="748" pos:column="44">SetState</name></name><argument_list pos:line="748" pos:column="52">(<argument><expr><name pos:line="748" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="748" pos:column="66">|</op:operator><name pos:line="748" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="750" pos:column="33">break;</break>
			</case><case pos:line="751" pos:column="25">case <expr><name pos:line="751" pos:column="30">SCE_C_UUID</name></expr>:
				<if pos:line="752" pos:column="33">if <condition pos:line="752" pos:column="36">(<expr><name><name pos:line="752" pos:column="37">sc</name><op:operator pos:line="752" pos:column="39">.</op:operator><name pos:line="752" pos:column="40">ch</name></name> <op:operator pos:line="752" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="752" pos:column="46">'\r'</lit:literal> <op:operator pos:line="752" pos:column="51">||</op:operator> <name><name pos:line="752" pos:column="54">sc</name><op:operator pos:line="752" pos:column="56">.</op:operator><name pos:line="752" pos:column="57">ch</name></name> <op:operator pos:line="752" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="752" pos:column="63">'\n'</lit:literal> <op:operator pos:line="752" pos:column="68">||</op:operator> <name><name pos:line="752" pos:column="71">sc</name><op:operator pos:line="752" pos:column="73">.</op:operator><name pos:line="752" pos:column="74">ch</name></name> <op:operator pos:line="752" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="752" pos:column="80">')'</lit:literal></expr>)</condition><then pos:line="752" pos:column="84"> <block pos:line="752" pos:column="85">{
					<expr_stmt><expr><call><name><name pos:line="753" pos:column="41">sc</name><op:operator pos:line="753" pos:column="43">.</op:operator><name pos:line="753" pos:column="44">SetState</name></name><argument_list pos:line="753" pos:column="52">(<argument><expr><name pos:line="753" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="753" pos:column="66">|</op:operator><name pos:line="753" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
		</case>}</block></switch>

		<if pos:line="757" pos:column="17">if <condition pos:line="757" pos:column="20">(<expr><name><name pos:line="757" pos:column="21">sc</name><op:operator pos:line="757" pos:column="23">.</op:operator><name pos:line="757" pos:column="24">atLineEnd</name></name> <op:operator pos:line="757" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="757" pos:column="37">!</op:operator><name pos:line="757" pos:column="38">atLineEndBeforeSwitch</name></expr>)</condition><then pos:line="757" pos:column="60"> <block pos:line="757" pos:column="61">{
			<comment type="line" pos:line="758" pos:column="25">// State exit processing consumed characters up to end of line.</comment>
			<expr_stmt><expr><name pos:line="759" pos:column="25">lineCurrent</name><op:operator pos:line="759" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="760" pos:column="25">vlls</name><op:operator pos:line="760" pos:column="29">.</op:operator><name pos:line="760" pos:column="30">Add</name></name><argument_list pos:line="760" pos:column="33">(<argument><expr><name pos:line="760" pos:column="34">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="760" pos:column="47">preproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="763" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="764" pos:column="17">if <condition pos:line="764" pos:column="20">(<expr><call><name pos:line="764" pos:column="21">MaskActive</name><argument_list pos:line="764" pos:column="31">(<argument><expr><name><name pos:line="764" pos:column="32">sc</name><op:operator pos:line="764" pos:column="34">.</op:operator><name pos:line="764" pos:column="35">state</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="764" pos:column="42">==</op:operator> <name pos:line="764" pos:column="45">SCE_C_DEFAULT</name></expr>)</condition><then pos:line="764" pos:column="59"> <block pos:line="764" pos:column="60">{
			<if pos:line="765" pos:column="25">if <condition pos:line="765" pos:column="28">(<expr><call><name><name pos:line="765" pos:column="29">sc</name><op:operator pos:line="765" pos:column="31">.</op:operator><name pos:line="765" pos:column="32">Match</name></name><argument_list pos:line="765" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="765" pos:column="38">'@'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="765" pos:column="43">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="765" pos:column="49"> <block pos:line="765" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="766" pos:column="33">sc</name><op:operator pos:line="766" pos:column="35">.</op:operator><name pos:line="766" pos:column="36">SetState</name></name><argument_list pos:line="766" pos:column="44">(<argument><expr><name pos:line="766" pos:column="45">SCE_C_VERBATIM</name><op:operator pos:line="766" pos:column="59">|</op:operator><name pos:line="766" pos:column="60">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="767" pos:column="33">sc</name><op:operator pos:line="767" pos:column="35">.</op:operator><name pos:line="767" pos:column="36">Forward</name></name><argument_list pos:line="767" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="768" pos:column="27">else <if pos:line="768" pos:column="32">if <condition pos:line="768" pos:column="35">(<expr><name><name pos:line="768" pos:column="36">options</name><op:operator pos:line="768" pos:column="43">.</op:operator><name pos:line="768" pos:column="44">triplequotedStrings</name></name> <op:operator pos:line="768" pos:column="64">&amp;&amp;</op:operator> <call><name><name pos:line="768" pos:column="67">sc</name><op:operator pos:line="768" pos:column="69">.</op:operator><name pos:line="768" pos:column="70">Match</name></name><argument_list pos:line="768" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="768" pos:column="76">"\"\"\""</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="768" pos:column="86"> <block pos:line="768" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="769" pos:column="33">sc</name><op:operator pos:line="769" pos:column="35">.</op:operator><name pos:line="769" pos:column="36">SetState</name></name><argument_list pos:line="769" pos:column="44">(<argument><expr><name pos:line="769" pos:column="45">SCE_C_TRIPLEVERBATIM</name><op:operator pos:line="769" pos:column="65">|</op:operator><name pos:line="769" pos:column="66">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="770" pos:column="33">sc</name><op:operator pos:line="770" pos:column="35">.</op:operator><name pos:line="770" pos:column="36">Forward</name></name><argument_list pos:line="770" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="770" pos:column="44">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="771" pos:column="27">else <if pos:line="771" pos:column="32">if <condition pos:line="771" pos:column="35">(<expr><call><name pos:line="771" pos:column="36">IsADigit</name><argument_list pos:line="771" pos:column="44">(<argument><expr><name><name pos:line="771" pos:column="45">sc</name><op:operator pos:line="771" pos:column="47">.</op:operator><name pos:line="771" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="771" pos:column="52">||</op:operator> <op:operator pos:line="771" pos:column="55">(</op:operator><name><name pos:line="771" pos:column="56">sc</name><op:operator pos:line="771" pos:column="58">.</op:operator><name pos:line="771" pos:column="59">ch</name></name> <op:operator pos:line="771" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="771" pos:column="65">'.'</lit:literal> <op:operator pos:line="771" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="771" pos:column="72">IsADigit</name><argument_list pos:line="771" pos:column="80">(<argument><expr><name><name pos:line="771" pos:column="81">sc</name><op:operator pos:line="771" pos:column="83">.</op:operator><name pos:line="771" pos:column="84">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="771" pos:column="91">)</op:operator></expr>)</condition><then pos:line="771" pos:column="93"> <block pos:line="771" pos:column="94">{
				<if pos:line="772" pos:column="33">if <condition pos:line="772" pos:column="36">(<expr><name pos:line="772" pos:column="37">lastWordWasUUID</name></expr>)</condition><then pos:line="772" pos:column="53"> <block pos:line="772" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="773" pos:column="41">sc</name><op:operator pos:line="773" pos:column="43">.</op:operator><name pos:line="773" pos:column="44">SetState</name></name><argument_list pos:line="773" pos:column="52">(<argument><expr><name pos:line="773" pos:column="53">SCE_C_UUID</name><op:operator pos:line="773" pos:column="63">|</op:operator><name pos:line="773" pos:column="64">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="774" pos:column="41">lastWordWasUUID</name> <op:operator pos:line="774" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="774" pos:column="59">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="775" pos:column="35">else <block pos:line="775" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="776" pos:column="41">sc</name><op:operator pos:line="776" pos:column="43">.</op:operator><name pos:line="776" pos:column="44">SetState</name></name><argument_list pos:line="776" pos:column="52">(<argument><expr><name pos:line="776" pos:column="53">SCE_C_NUMBER</name><op:operator pos:line="776" pos:column="65">|</op:operator><name pos:line="776" pos:column="66">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="778" pos:column="27">else <if pos:line="778" pos:column="32">if <condition pos:line="778" pos:column="35">(<expr><call><name><name pos:line="778" pos:column="36">setWordStart</name><op:operator pos:line="778" pos:column="48">.</op:operator><name pos:line="778" pos:column="49">Contains</name></name><argument_list pos:line="778" pos:column="57">(<argument><expr><name><name pos:line="778" pos:column="58">sc</name><op:operator pos:line="778" pos:column="60">.</op:operator><name pos:line="778" pos:column="61">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="778" pos:column="65">||</op:operator> <op:operator pos:line="778" pos:column="68">(</op:operator><name><name pos:line="778" pos:column="69">sc</name><op:operator pos:line="778" pos:column="71">.</op:operator><name pos:line="778" pos:column="72">ch</name></name> <op:operator pos:line="778" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="778" pos:column="78">'@'</lit:literal><op:operator pos:line="778" pos:column="81">)</op:operator></expr>)</condition><then pos:line="778" pos:column="83"> <block pos:line="778" pos:column="84">{
				<if pos:line="779" pos:column="33">if <condition pos:line="779" pos:column="36">(<expr><name pos:line="779" pos:column="37">lastWordWasUUID</name></expr>)</condition><then pos:line="779" pos:column="53"> <block pos:line="779" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="780" pos:column="41">sc</name><op:operator pos:line="780" pos:column="43">.</op:operator><name pos:line="780" pos:column="44">SetState</name></name><argument_list pos:line="780" pos:column="52">(<argument><expr><name pos:line="780" pos:column="53">SCE_C_UUID</name><op:operator pos:line="780" pos:column="63">|</op:operator><name pos:line="780" pos:column="64">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="781" pos:column="41">lastWordWasUUID</name> <op:operator pos:line="781" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="781" pos:column="59">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="782" pos:column="35">else <block pos:line="782" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="783" pos:column="41">sc</name><op:operator pos:line="783" pos:column="43">.</op:operator><name pos:line="783" pos:column="44">SetState</name></name><argument_list pos:line="783" pos:column="52">(<argument><expr><name pos:line="783" pos:column="53">SCE_C_IDENTIFIER</name><op:operator pos:line="783" pos:column="69">|</op:operator><name pos:line="783" pos:column="70">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="785" pos:column="27">else <if pos:line="785" pos:column="32">if <condition pos:line="785" pos:column="35">(<expr><call><name><name pos:line="785" pos:column="36">sc</name><op:operator pos:line="785" pos:column="38">.</op:operator><name pos:line="785" pos:column="39">Match</name></name><argument_list pos:line="785" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="785" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="785" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="785" pos:column="55"> <block pos:line="785" pos:column="56">{
				<if pos:line="786" pos:column="33">if <condition pos:line="786" pos:column="36">(<expr><call><name><name pos:line="786" pos:column="37">sc</name><op:operator pos:line="786" pos:column="39">.</op:operator><name pos:line="786" pos:column="40">Match</name></name><argument_list pos:line="786" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="786" pos:column="46">"/**"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="786" pos:column="53">||</op:operator> <call><name><name pos:line="786" pos:column="56">sc</name><op:operator pos:line="786" pos:column="58">.</op:operator><name pos:line="786" pos:column="59">Match</name></name><argument_list pos:line="786" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="786" pos:column="65">"/*!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="786" pos:column="72"> <block pos:line="786" pos:column="73">{	<comment type="line" pos:line="786" pos:column="81">// Support of Qt/Doxygen doc. style</comment>
					<expr_stmt><expr><call><name><name pos:line="787" pos:column="41">sc</name><op:operator pos:line="787" pos:column="43">.</op:operator><name pos:line="787" pos:column="44">SetState</name></name><argument_list pos:line="787" pos:column="52">(<argument><expr><name pos:line="787" pos:column="53">SCE_C_COMMENTDOC</name><op:operator pos:line="787" pos:column="69">|</op:operator><name pos:line="787" pos:column="70">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="788" pos:column="35">else <block pos:line="788" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="789" pos:column="41">sc</name><op:operator pos:line="789" pos:column="43">.</op:operator><name pos:line="789" pos:column="44">SetState</name></name><argument_list pos:line="789" pos:column="52">(<argument><expr><name pos:line="789" pos:column="53">SCE_C_COMMENT</name><op:operator pos:line="789" pos:column="66">|</op:operator><name pos:line="789" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><call><name><name pos:line="791" pos:column="33">sc</name><op:operator pos:line="791" pos:column="35">.</op:operator><name pos:line="791" pos:column="36">Forward</name></name><argument_list pos:line="791" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="791" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> <else pos:line="792" pos:column="27">else <if pos:line="792" pos:column="32">if <condition pos:line="792" pos:column="35">(<expr><call><name><name pos:line="792" pos:column="36">sc</name><op:operator pos:line="792" pos:column="38">.</op:operator><name pos:line="792" pos:column="39">Match</name></name><argument_list pos:line="792" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="792" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="792" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="792" pos:column="55"> <block pos:line="792" pos:column="56">{
				<if pos:line="793" pos:column="33">if <condition pos:line="793" pos:column="36">(<expr><op:operator pos:line="793" pos:column="37">(</op:operator><call><name><name pos:line="793" pos:column="38">sc</name><op:operator pos:line="793" pos:column="40">.</op:operator><name pos:line="793" pos:column="41">Match</name></name><argument_list pos:line="793" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="793" pos:column="47">"///"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="793" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="793" pos:column="57">!</op:operator><call><name><name pos:line="793" pos:column="58">sc</name><op:operator pos:line="793" pos:column="60">.</op:operator><name pos:line="793" pos:column="61">Match</name></name><argument_list pos:line="793" pos:column="66">(<argument><expr><lit:literal type="string" pos:line="793" pos:column="67">"////"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="793" pos:column="74">)</op:operator> <op:operator pos:line="793" pos:column="76">||</op:operator> <call><name><name pos:line="793" pos:column="79">sc</name><op:operator pos:line="793" pos:column="81">.</op:operator><name pos:line="793" pos:column="82">Match</name></name><argument_list pos:line="793" pos:column="87">(<argument><expr><lit:literal type="string" pos:line="793" pos:column="88">"//!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="793" pos:column="95">
					<comment type="line" pos:line="794" pos:column="41">// Support of Qt/Doxygen doc. style</comment>
					<expr_stmt><expr><call><name><name pos:line="795" pos:column="41">sc</name><op:operator pos:line="795" pos:column="43">.</op:operator><name pos:line="795" pos:column="44">SetState</name></name><argument_list pos:line="795" pos:column="52">(<argument><expr><name pos:line="795" pos:column="53">SCE_C_COMMENTLINEDOC</name><op:operator pos:line="795" pos:column="73">|</op:operator><name pos:line="795" pos:column="74">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="796" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="797" pos:column="41">sc</name><op:operator pos:line="797" pos:column="43">.</op:operator><name pos:line="797" pos:column="44">SetState</name></name><argument_list pos:line="797" pos:column="52">(<argument><expr><name pos:line="797" pos:column="53">SCE_C_COMMENTLINE</name><op:operator pos:line="797" pos:column="70">|</op:operator><name pos:line="797" pos:column="71">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then> <else pos:line="798" pos:column="27">else <if pos:line="798" pos:column="32">if <condition pos:line="798" pos:column="35">(<expr><name><name pos:line="798" pos:column="36">sc</name><op:operator pos:line="798" pos:column="38">.</op:operator><name pos:line="798" pos:column="39">ch</name></name> <op:operator pos:line="798" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="798" pos:column="45">'/'</lit:literal>
				   <op:operator pos:line="799" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="799" pos:column="39">(</op:operator><call><name><name pos:line="799" pos:column="40">setOKBeforeRE</name><op:operator pos:line="799" pos:column="53">.</op:operator><name pos:line="799" pos:column="54">Contains</name></name><argument_list pos:line="799" pos:column="62">(<argument><expr><name pos:line="799" pos:column="63">chPrevNonWhite</name></expr></argument>)</argument_list></call>
				       <op:operator pos:line="800" pos:column="40">||</op:operator> <call><name pos:line="800" pos:column="43">followsReturnKeyword</name><argument_list pos:line="800" pos:column="63">(<argument><expr><name pos:line="800" pos:column="64">sc</name></expr></argument>, <argument><expr><name pos:line="800" pos:column="68">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="800" pos:column="75">)</op:operator>
				   <op:operator pos:line="801" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="801" pos:column="39">(</op:operator><op:operator pos:line="801" pos:column="40">!</op:operator><call><name><name pos:line="801" pos:column="41">setCouldBePostOp</name><op:operator pos:line="801" pos:column="57">.</op:operator><name pos:line="801" pos:column="58">Contains</name></name><argument_list pos:line="801" pos:column="66">(<argument><expr><name pos:line="801" pos:column="67">chPrevNonWhite</name></expr></argument>)</argument_list></call>
				       <op:operator pos:line="802" pos:column="40">||</op:operator> <op:operator pos:line="802" pos:column="43">!</op:operator><call><name pos:line="802" pos:column="44">FollowsPostfixOperator</name><argument_list pos:line="802" pos:column="66">(<argument><expr><name pos:line="802" pos:column="67">sc</name></expr></argument>, <argument><expr><name pos:line="802" pos:column="71">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="802" pos:column="78">)</op:operator></expr>)</condition><then pos:line="802" pos:column="80"> <block pos:line="802" pos:column="81">{
				<expr_stmt><expr><call><name><name pos:line="803" pos:column="33">sc</name><op:operator pos:line="803" pos:column="35">.</op:operator><name pos:line="803" pos:column="36">SetState</name></name><argument_list pos:line="803" pos:column="44">(<argument><expr><name pos:line="803" pos:column="45">SCE_C_REGEX</name><op:operator pos:line="803" pos:column="56">|</op:operator><name pos:line="803" pos:column="57">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="803" pos:column="73">// JavaScript's RegEx</comment>
			}</block></then> <else pos:line="804" pos:column="27">else <if pos:line="804" pos:column="32">if <condition pos:line="804" pos:column="35">(<expr><name><name pos:line="804" pos:column="36">sc</name><op:operator pos:line="804" pos:column="38">.</op:operator><name pos:line="804" pos:column="39">ch</name></name> <op:operator pos:line="804" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="804" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="804" pos:column="50"> <block pos:line="804" pos:column="51">{
				<if pos:line="805" pos:column="33">if <condition pos:line="805" pos:column="36">(<expr><name><name pos:line="805" pos:column="37">sc</name><op:operator pos:line="805" pos:column="39">.</op:operator><name pos:line="805" pos:column="40">chPrev</name></name> <op:operator pos:line="805" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="805" pos:column="50">'R'</lit:literal></expr>)</condition><then pos:line="805" pos:column="54"> <block pos:line="805" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="806" pos:column="41">sc</name><op:operator pos:line="806" pos:column="43">.</op:operator><name pos:line="806" pos:column="44">SetState</name></name><argument_list pos:line="806" pos:column="52">(<argument><expr><name pos:line="806" pos:column="53">SCE_C_STRINGRAW</name><op:operator pos:line="806" pos:column="68">|</op:operator><name pos:line="806" pos:column="69">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="807" pos:column="41">rawStringTerminator</name> <op:operator pos:line="807" pos:column="61">=</op:operator> <lit:literal type="string" pos:line="807" pos:column="63">")"</lit:literal></expr>;</expr_stmt>
					<for pos:line="808" pos:column="41">for (<init><decl><type><name pos:line="808" pos:column="46">int</name></type> <name pos:line="808" pos:column="50">termPos</name> <init pos:line="808" pos:column="58">= <expr><name><name pos:line="808" pos:column="60">sc</name><op:operator pos:line="808" pos:column="62">.</op:operator><name pos:line="808" pos:column="63">currentPos</name></name> <op:operator pos:line="808" pos:column="74">+</op:operator> <lit:literal type="number" pos:line="808" pos:column="76">1</lit:literal></expr></init></decl>;</init><condition pos:line="808" pos:column="78">;</condition> <incr><expr><name pos:line="808" pos:column="80">termPos</name><op:operator pos:line="808" pos:column="87">++</op:operator></expr></incr>) <block pos:line="808" pos:column="91">{
						<decl_stmt><decl><type><name pos:line="809" pos:column="49">char</name></type> <name pos:line="809" pos:column="54">chTerminator</name> <init pos:line="809" pos:column="67">= <expr><call><name><name pos:line="809" pos:column="69">styler</name><op:operator pos:line="809" pos:column="75">.</op:operator><name pos:line="809" pos:column="76">SafeGetCharAt</name></name><argument_list pos:line="809" pos:column="89">(<argument><expr><name pos:line="809" pos:column="90">termPos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="809" pos:column="99">'('</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="810" pos:column="49">if <condition pos:line="810" pos:column="52">(<expr><name pos:line="810" pos:column="53">chTerminator</name> <op:operator pos:line="810" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="810" pos:column="69">'('</lit:literal></expr>)</condition><then pos:line="810" pos:column="73">
							<break pos:line="811" pos:column="57">break;</break></then></if>
						<expr_stmt><expr><name pos:line="812" pos:column="49">rawStringTerminator</name> <op:operator pos:line="812" pos:column="69">+=</op:operator> <name pos:line="812" pos:column="72">chTerminator</name></expr>;</expr_stmt>
					}</block></for>
					<expr_stmt><expr><name pos:line="814" pos:column="41">rawStringTerminator</name> <op:operator pos:line="814" pos:column="61">+=</op:operator> <lit:literal type="char" pos:line="814" pos:column="64">'\"'</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="815" pos:column="35">else <block pos:line="815" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="816" pos:column="41">sc</name><op:operator pos:line="816" pos:column="43">.</op:operator><name pos:line="816" pos:column="44">SetState</name></name><argument_list pos:line="816" pos:column="52">(<argument><expr><name pos:line="816" pos:column="53">SCE_C_STRING</name><op:operator pos:line="816" pos:column="65">|</op:operator><name pos:line="816" pos:column="66">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name pos:line="818" pos:column="33">isIncludePreprocessor</name> <op:operator pos:line="818" pos:column="55">=</op:operator> <lit:literal type="boolean" pos:line="818" pos:column="57">false</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="818" pos:column="65">// ensure that '&gt;' won't end the string</comment>
			}</block></then> <else pos:line="819" pos:column="27">else <if pos:line="819" pos:column="32">if <condition pos:line="819" pos:column="35">(<expr><name pos:line="819" pos:column="36">isIncludePreprocessor</name> <op:operator pos:line="819" pos:column="58">&amp;&amp;</op:operator> <name><name pos:line="819" pos:column="61">sc</name><op:operator pos:line="819" pos:column="63">.</op:operator><name pos:line="819" pos:column="64">ch</name></name> <op:operator pos:line="819" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="819" pos:column="70">'&lt;'</lit:literal></expr>)</condition><then pos:line="819" pos:column="74"> <block pos:line="819" pos:column="75">{
				<expr_stmt><expr><call><name><name pos:line="820" pos:column="33">sc</name><op:operator pos:line="820" pos:column="35">.</op:operator><name pos:line="820" pos:column="36">SetState</name></name><argument_list pos:line="820" pos:column="44">(<argument><expr><name pos:line="820" pos:column="45">SCE_C_STRING</name><op:operator pos:line="820" pos:column="57">|</op:operator><name pos:line="820" pos:column="58">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="821" pos:column="27">else <if pos:line="821" pos:column="32">if <condition pos:line="821" pos:column="35">(<expr><name><name pos:line="821" pos:column="36">sc</name><op:operator pos:line="821" pos:column="38">.</op:operator><name pos:line="821" pos:column="39">ch</name></name> <op:operator pos:line="821" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="821" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="821" pos:column="50"> <block pos:line="821" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="822" pos:column="33">sc</name><op:operator pos:line="822" pos:column="35">.</op:operator><name pos:line="822" pos:column="36">SetState</name></name><argument_list pos:line="822" pos:column="44">(<argument><expr><name pos:line="822" pos:column="45">SCE_C_CHARACTER</name><op:operator pos:line="822" pos:column="60">|</op:operator><name pos:line="822" pos:column="61">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="823" pos:column="27">else <if pos:line="823" pos:column="32">if <condition pos:line="823" pos:column="35">(<expr><name><name pos:line="823" pos:column="36">sc</name><op:operator pos:line="823" pos:column="38">.</op:operator><name pos:line="823" pos:column="39">ch</name></name> <op:operator pos:line="823" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="823" pos:column="45">'#'</lit:literal> <op:operator pos:line="823" pos:column="49">&amp;&amp;</op:operator> <name pos:line="823" pos:column="52">visibleChars</name> <op:operator pos:line="823" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="823" pos:column="68">0</lit:literal></expr>)</condition><then pos:line="823" pos:column="70"> <block pos:line="823" pos:column="71">{
				<comment type="line" pos:line="824" pos:column="33">// Preprocessor commands are alone on their line</comment>
				<expr_stmt><expr><call><name><name pos:line="825" pos:column="33">sc</name><op:operator pos:line="825" pos:column="35">.</op:operator><name pos:line="825" pos:column="36">SetState</name></name><argument_list pos:line="825" pos:column="44">(<argument><expr><name pos:line="825" pos:column="45">SCE_C_PREPROCESSOR</name><op:operator pos:line="825" pos:column="63">|</op:operator><name pos:line="825" pos:column="64">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="826" pos:column="33">// Skip whitespace between # and preprocessor word</comment>
				<do pos:line="827" pos:column="33">do <block pos:line="827" pos:column="36">{
					<expr_stmt><expr><call><name><name pos:line="828" pos:column="41">sc</name><op:operator pos:line="828" pos:column="43">.</op:operator><name pos:line="828" pos:column="44">Forward</name></name><argument_list pos:line="828" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="829" pos:column="41">(<expr><op:operator pos:line="829" pos:column="42">(</op:operator><name><name pos:line="829" pos:column="43">sc</name><op:operator pos:line="829" pos:column="45">.</op:operator><name pos:line="829" pos:column="46">ch</name></name> <op:operator pos:line="829" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="829" pos:column="52">' '</lit:literal> <op:operator pos:line="829" pos:column="56">||</op:operator> <name><name pos:line="829" pos:column="59">sc</name><op:operator pos:line="829" pos:column="61">.</op:operator><name pos:line="829" pos:column="62">ch</name></name> <op:operator pos:line="829" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="829" pos:column="68">'\t'</lit:literal><op:operator pos:line="829" pos:column="72">)</op:operator> <op:operator pos:line="829" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="829" pos:column="77">sc</name><op:operator pos:line="829" pos:column="79">.</op:operator><name pos:line="829" pos:column="80">More</name></name><argument_list pos:line="829" pos:column="84">()</argument_list></call></expr>)</condition>;</do>
				<if pos:line="830" pos:column="33">if <condition pos:line="830" pos:column="36">(<expr><name><name pos:line="830" pos:column="37">sc</name><op:operator pos:line="830" pos:column="39">.</op:operator><name pos:line="830" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="830" pos:column="50"> <block pos:line="830" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="831" pos:column="41">sc</name><op:operator pos:line="831" pos:column="43">.</op:operator><name pos:line="831" pos:column="44">SetState</name></name><argument_list pos:line="831" pos:column="52">(<argument><expr><name pos:line="831" pos:column="53">SCE_C_DEFAULT</name><op:operator pos:line="831" pos:column="66">|</op:operator><name pos:line="831" pos:column="67">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="832" pos:column="35">else <if pos:line="832" pos:column="40">if <condition pos:line="832" pos:column="43">(<expr><call><name><name pos:line="832" pos:column="44">sc</name><op:operator pos:line="832" pos:column="46">.</op:operator><name pos:line="832" pos:column="47">Match</name></name><argument_list pos:line="832" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="832" pos:column="53">"include"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="832" pos:column="64"> <block pos:line="832" pos:column="65">{
					<expr_stmt><expr><name pos:line="833" pos:column="41">isIncludePreprocessor</name> <op:operator pos:line="833" pos:column="63">=</op:operator> <lit:literal type="boolean" pos:line="833" pos:column="65">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="834" pos:column="35">else <block pos:line="834" pos:column="40">{
					<if pos:line="835" pos:column="41">if <condition pos:line="835" pos:column="44">(<expr><name><name pos:line="835" pos:column="45">options</name><op:operator pos:line="835" pos:column="52">.</op:operator><name pos:line="835" pos:column="53">trackPreprocessor</name></name></expr>)</condition><then pos:line="835" pos:column="71"> <block pos:line="835" pos:column="72">{
						<if pos:line="836" pos:column="49">if <condition pos:line="836" pos:column="52">(<expr><call><name><name pos:line="836" pos:column="53">sc</name><op:operator pos:line="836" pos:column="55">.</op:operator><name pos:line="836" pos:column="56">Match</name></name><argument_list pos:line="836" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="836" pos:column="62">"ifdef"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="836" pos:column="71">||</op:operator> <call><name><name pos:line="836" pos:column="74">sc</name><op:operator pos:line="836" pos:column="76">.</op:operator><name pos:line="836" pos:column="77">Match</name></name><argument_list pos:line="836" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="836" pos:column="83">"ifndef"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="836" pos:column="93"> <block pos:line="836" pos:column="94">{
							<decl_stmt><decl><type><name pos:line="837" pos:column="57">bool</name></type> <name pos:line="837" pos:column="62">isIfDef</name> <init pos:line="837" pos:column="70">= <expr><call><name><name pos:line="837" pos:column="72">sc</name><op:operator pos:line="837" pos:column="74">.</op:operator><name pos:line="837" pos:column="75">Match</name></name><argument_list pos:line="837" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="837" pos:column="81">"ifdef"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="838" pos:column="57">int</name></type> <name pos:line="838" pos:column="61">i</name> <init pos:line="838" pos:column="63">= <expr><name pos:line="838" pos:column="65">isIfDef</name> <op:operator pos:line="838" pos:column="73">?</op:operator> <lit:literal type="number" pos:line="838" pos:column="75">5</lit:literal> <op:operator pos:line="838" pos:column="77">:</op:operator> <lit:literal type="number" pos:line="838" pos:column="79">6</lit:literal></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name><name pos:line="839" pos:column="57">std</name><op:operator pos:line="839" pos:column="60">::</op:operator><name pos:line="839" pos:column="62">string</name></name></type> <name pos:line="839" pos:column="69">restOfLine</name> <init pos:line="839" pos:column="80">= <expr><call><name pos:line="839" pos:column="82">GetRestOfLine</name><argument_list pos:line="839" pos:column="95">(<argument><expr><name pos:line="839" pos:column="96">styler</name></expr></argument>, <argument><expr><name><name pos:line="839" pos:column="104">sc</name><op:operator pos:line="839" pos:column="106">.</op:operator><name pos:line="839" pos:column="107">currentPos</name></name> <op:operator pos:line="839" pos:column="118">+</op:operator> <name pos:line="839" pos:column="120">i</name> <op:operator pos:line="839" pos:column="122">+</op:operator> <lit:literal type="number" pos:line="839" pos:column="124">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="839" pos:column="127">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="840" pos:column="57">bool</name></type> <name pos:line="840" pos:column="62">foundDef</name> <init pos:line="840" pos:column="71">= <expr><call><name><name pos:line="840" pos:column="73">preprocessorDefinitions</name><op:operator pos:line="840" pos:column="96">.</op:operator><name pos:line="840" pos:column="97">find</name></name><argument_list pos:line="840" pos:column="101">(<argument><expr><name pos:line="840" pos:column="102">restOfLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="840" pos:column="114">!=</op:operator> <call><name><name pos:line="840" pos:column="117">preprocessorDefinitions</name><op:operator pos:line="840" pos:column="140">.</op:operator><name pos:line="840" pos:column="141">end</name></name><argument_list pos:line="840" pos:column="144">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="841" pos:column="57">preproc</name><op:operator pos:line="841" pos:column="64">.</op:operator><name pos:line="841" pos:column="65">StartSection</name></name><argument_list pos:line="841" pos:column="77">(<argument><expr><name pos:line="841" pos:column="78">isIfDef</name> <op:operator pos:line="841" pos:column="86">==</op:operator> <name pos:line="841" pos:column="89">foundDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="842" pos:column="51">else <if pos:line="842" pos:column="56">if <condition pos:line="842" pos:column="59">(<expr><call><name><name pos:line="842" pos:column="60">sc</name><op:operator pos:line="842" pos:column="62">.</op:operator><name pos:line="842" pos:column="63">Match</name></name><argument_list pos:line="842" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="842" pos:column="69">"if"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="842" pos:column="75"> <block pos:line="842" pos:column="76">{
							<decl_stmt><decl><type><name><name pos:line="843" pos:column="57">std</name><op:operator pos:line="843" pos:column="60">::</op:operator><name pos:line="843" pos:column="62">string</name></name></type> <name pos:line="843" pos:column="69">restOfLine</name> <init pos:line="843" pos:column="80">= <expr><call><name pos:line="843" pos:column="82">GetRestOfLine</name><argument_list pos:line="843" pos:column="95">(<argument><expr><name pos:line="843" pos:column="96">styler</name></expr></argument>, <argument><expr><name><name pos:line="843" pos:column="104">sc</name><op:operator pos:line="843" pos:column="106">.</op:operator><name pos:line="843" pos:column="107">currentPos</name></name> <op:operator pos:line="843" pos:column="118">+</op:operator> <lit:literal type="number" pos:line="843" pos:column="120">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="843" pos:column="123">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<decl_stmt><decl><type><name pos:line="844" pos:column="57">bool</name></type> <name pos:line="844" pos:column="62">ifGood</name> <init pos:line="844" pos:column="69">= <expr><call><name pos:line="844" pos:column="71">EvaluateExpression</name><argument_list pos:line="844" pos:column="89">(<argument><expr><name pos:line="844" pos:column="90">restOfLine</name></expr></argument>, <argument><expr><name pos:line="844" pos:column="102">preprocessorDefinitions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name><name pos:line="845" pos:column="57">preproc</name><op:operator pos:line="845" pos:column="64">.</op:operator><name pos:line="845" pos:column="65">StartSection</name></name><argument_list pos:line="845" pos:column="77">(<argument><expr><name pos:line="845" pos:column="78">ifGood</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="846" pos:column="51">else <if pos:line="846" pos:column="56">if <condition pos:line="846" pos:column="59">(<expr><call><name><name pos:line="846" pos:column="60">sc</name><op:operator pos:line="846" pos:column="62">.</op:operator><name pos:line="846" pos:column="63">Match</name></name><argument_list pos:line="846" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="846" pos:column="69">"else"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="846" pos:column="77"> <block pos:line="846" pos:column="78">{
							<if pos:line="847" pos:column="57">if <condition pos:line="847" pos:column="60">(<expr><op:operator pos:line="847" pos:column="61">!</op:operator><call><name><name pos:line="847" pos:column="62">preproc</name><op:operator pos:line="847" pos:column="69">.</op:operator><name pos:line="847" pos:column="70">CurrentIfTaken</name></name><argument_list pos:line="847" pos:column="84">()</argument_list></call></expr>)</condition><then pos:line="847" pos:column="87"> <block pos:line="847" pos:column="88">{
								<expr_stmt><expr><call><name><name pos:line="848" pos:column="65">preproc</name><op:operator pos:line="848" pos:column="72">.</op:operator><name pos:line="848" pos:column="73">InvertCurrentLevel</name></name><argument_list pos:line="848" pos:column="91">()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="849" pos:column="65">activitySet</name> <op:operator pos:line="849" pos:column="77">=</op:operator> <call><name><name pos:line="849" pos:column="79">preproc</name><op:operator pos:line="849" pos:column="86">.</op:operator><name pos:line="849" pos:column="87">IsInactive</name></name><argument_list pos:line="849" pos:column="97">()</argument_list></call> <op:operator pos:line="849" pos:column="100">?</op:operator> <name pos:line="849" pos:column="102">activeFlag</name> <op:operator pos:line="849" pos:column="113">:</op:operator> <lit:literal type="number" pos:line="849" pos:column="115">0</lit:literal></expr>;</expr_stmt>
								<if pos:line="850" pos:column="65">if <condition pos:line="850" pos:column="68">(<expr><op:operator pos:line="850" pos:column="69">!</op:operator><name pos:line="850" pos:column="70">activitySet</name></expr>)</condition><then pos:line="850" pos:column="82">
									<expr_stmt><expr><call><name><name pos:line="851" pos:column="73">sc</name><op:operator pos:line="851" pos:column="75">.</op:operator><name pos:line="851" pos:column="76">ChangeState</name></name><argument_list pos:line="851" pos:column="87">(<argument><expr><name pos:line="851" pos:column="88">SCE_C_PREPROCESSOR</name><op:operator pos:line="851" pos:column="106">|</op:operator><name pos:line="851" pos:column="107">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
							}</block></then> <else pos:line="852" pos:column="59">else <if pos:line="852" pos:column="64">if <condition pos:line="852" pos:column="67">(<expr><op:operator pos:line="852" pos:column="68">!</op:operator><call><name><name pos:line="852" pos:column="69">preproc</name><op:operator pos:line="852" pos:column="76">.</op:operator><name pos:line="852" pos:column="77">IsInactive</name></name><argument_list pos:line="852" pos:column="87">()</argument_list></call></expr>)</condition><then pos:line="852" pos:column="90"> <block pos:line="852" pos:column="91">{
								<expr_stmt><expr><call><name><name pos:line="853" pos:column="65">preproc</name><op:operator pos:line="853" pos:column="72">.</op:operator><name pos:line="853" pos:column="73">InvertCurrentLevel</name></name><argument_list pos:line="853" pos:column="91">()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="854" pos:column="65">activitySet</name> <op:operator pos:line="854" pos:column="77">=</op:operator> <call><name><name pos:line="854" pos:column="79">preproc</name><op:operator pos:line="854" pos:column="86">.</op:operator><name pos:line="854" pos:column="87">IsInactive</name></name><argument_list pos:line="854" pos:column="97">()</argument_list></call> <op:operator pos:line="854" pos:column="100">?</op:operator> <name pos:line="854" pos:column="102">activeFlag</name> <op:operator pos:line="854" pos:column="113">:</op:operator> <lit:literal type="number" pos:line="854" pos:column="115">0</lit:literal></expr>;</expr_stmt>
								<if pos:line="855" pos:column="65">if <condition pos:line="855" pos:column="68">(<expr><op:operator pos:line="855" pos:column="69">!</op:operator><name pos:line="855" pos:column="70">activitySet</name></expr>)</condition><then pos:line="855" pos:column="82">
									<expr_stmt><expr><call><name><name pos:line="856" pos:column="73">sc</name><op:operator pos:line="856" pos:column="75">.</op:operator><name pos:line="856" pos:column="76">ChangeState</name></name><argument_list pos:line="856" pos:column="87">(<argument><expr><name pos:line="856" pos:column="88">SCE_C_PREPROCESSOR</name><op:operator pos:line="856" pos:column="106">|</op:operator><name pos:line="856" pos:column="107">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
							}</block></then></if></else></if>
						}</block></then> <else pos:line="858" pos:column="51">else <if pos:line="858" pos:column="56">if <condition pos:line="858" pos:column="59">(<expr><call><name><name pos:line="858" pos:column="60">sc</name><op:operator pos:line="858" pos:column="62">.</op:operator><name pos:line="858" pos:column="63">Match</name></name><argument_list pos:line="858" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="858" pos:column="69">"elif"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="858" pos:column="77"> <block pos:line="858" pos:column="78">{
							<comment type="line" pos:line="859" pos:column="57">// Ensure only one chosen out of #if .. #elif .. #elif .. #else .. #endif</comment>
							<if pos:line="860" pos:column="57">if <condition pos:line="860" pos:column="60">(<expr><op:operator pos:line="860" pos:column="61">!</op:operator><call><name><name pos:line="860" pos:column="62">preproc</name><op:operator pos:line="860" pos:column="69">.</op:operator><name pos:line="860" pos:column="70">CurrentIfTaken</name></name><argument_list pos:line="860" pos:column="84">()</argument_list></call></expr>)</condition><then pos:line="860" pos:column="87"> <block pos:line="860" pos:column="88">{
								<comment type="line" pos:line="861" pos:column="65">// Similar to #if</comment>
								<decl_stmt><decl><type><name><name pos:line="862" pos:column="65">std</name><op:operator pos:line="862" pos:column="68">::</op:operator><name pos:line="862" pos:column="70">string</name></name></type> <name pos:line="862" pos:column="77">restOfLine</name> <init pos:line="862" pos:column="88">= <expr><call><name pos:line="862" pos:column="90">GetRestOfLine</name><argument_list pos:line="862" pos:column="103">(<argument><expr><name pos:line="862" pos:column="104">styler</name></expr></argument>, <argument><expr><name><name pos:line="862" pos:column="112">sc</name><op:operator pos:line="862" pos:column="114">.</op:operator><name pos:line="862" pos:column="115">currentPos</name></name> <op:operator pos:line="862" pos:column="126">+</op:operator> <lit:literal type="number" pos:line="862" pos:column="128">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="862" pos:column="131">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<decl_stmt><decl><type><name pos:line="863" pos:column="65">bool</name></type> <name pos:line="863" pos:column="70">ifGood</name> <init pos:line="863" pos:column="77">= <expr><call><name pos:line="863" pos:column="79">EvaluateExpression</name><argument_list pos:line="863" pos:column="97">(<argument><expr><name pos:line="863" pos:column="98">restOfLine</name></expr></argument>, <argument><expr><name pos:line="863" pos:column="110">preprocessorDefinitions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<if pos:line="864" pos:column="65">if <condition pos:line="864" pos:column="68">(<expr><name pos:line="864" pos:column="69">ifGood</name></expr>)</condition><then pos:line="864" pos:column="76"> <block pos:line="864" pos:column="77">{
									<expr_stmt><expr><call><name><name pos:line="865" pos:column="73">preproc</name><op:operator pos:line="865" pos:column="80">.</op:operator><name pos:line="865" pos:column="81">InvertCurrentLevel</name></name><argument_list pos:line="865" pos:column="99">()</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><name pos:line="866" pos:column="73">activitySet</name> <op:operator pos:line="866" pos:column="85">=</op:operator> <call><name><name pos:line="866" pos:column="87">preproc</name><op:operator pos:line="866" pos:column="94">.</op:operator><name pos:line="866" pos:column="95">IsInactive</name></name><argument_list pos:line="866" pos:column="105">()</argument_list></call> <op:operator pos:line="866" pos:column="108">?</op:operator> <name pos:line="866" pos:column="110">activeFlag</name> <op:operator pos:line="866" pos:column="121">:</op:operator> <lit:literal type="number" pos:line="866" pos:column="123">0</lit:literal></expr>;</expr_stmt>
									<if pos:line="867" pos:column="73">if <condition pos:line="867" pos:column="76">(<expr><op:operator pos:line="867" pos:column="77">!</op:operator><name pos:line="867" pos:column="78">activitySet</name></expr>)</condition><then pos:line="867" pos:column="90">
										<expr_stmt><expr><call><name><name pos:line="868" pos:column="81">sc</name><op:operator pos:line="868" pos:column="83">.</op:operator><name pos:line="868" pos:column="84">ChangeState</name></name><argument_list pos:line="868" pos:column="95">(<argument><expr><name pos:line="868" pos:column="96">SCE_C_PREPROCESSOR</name><op:operator pos:line="868" pos:column="114">|</op:operator><name pos:line="868" pos:column="115">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
								}</block></then></if>
							}</block></then> <else pos:line="870" pos:column="59">else <if pos:line="870" pos:column="64">if <condition pos:line="870" pos:column="67">(<expr><op:operator pos:line="870" pos:column="68">!</op:operator><call><name><name pos:line="870" pos:column="69">preproc</name><op:operator pos:line="870" pos:column="76">.</op:operator><name pos:line="870" pos:column="77">IsInactive</name></name><argument_list pos:line="870" pos:column="87">()</argument_list></call></expr>)</condition><then pos:line="870" pos:column="90"> <block pos:line="870" pos:column="91">{
								<expr_stmt><expr><call><name><name pos:line="871" pos:column="65">preproc</name><op:operator pos:line="871" pos:column="72">.</op:operator><name pos:line="871" pos:column="73">InvertCurrentLevel</name></name><argument_list pos:line="871" pos:column="91">()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name pos:line="872" pos:column="65">activitySet</name> <op:operator pos:line="872" pos:column="77">=</op:operator> <call><name><name pos:line="872" pos:column="79">preproc</name><op:operator pos:line="872" pos:column="86">.</op:operator><name pos:line="872" pos:column="87">IsInactive</name></name><argument_list pos:line="872" pos:column="97">()</argument_list></call> <op:operator pos:line="872" pos:column="100">?</op:operator> <name pos:line="872" pos:column="102">activeFlag</name> <op:operator pos:line="872" pos:column="113">:</op:operator> <lit:literal type="number" pos:line="872" pos:column="115">0</lit:literal></expr>;</expr_stmt>
								<if pos:line="873" pos:column="65">if <condition pos:line="873" pos:column="68">(<expr><op:operator pos:line="873" pos:column="69">!</op:operator><name pos:line="873" pos:column="70">activitySet</name></expr>)</condition><then pos:line="873" pos:column="82">
									<expr_stmt><expr><call><name><name pos:line="874" pos:column="73">sc</name><op:operator pos:line="874" pos:column="75">.</op:operator><name pos:line="874" pos:column="76">ChangeState</name></name><argument_list pos:line="874" pos:column="87">(<argument><expr><name pos:line="874" pos:column="88">SCE_C_PREPROCESSOR</name><op:operator pos:line="874" pos:column="106">|</op:operator><name pos:line="874" pos:column="107">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
							}</block></then></if></else></if>
						}</block></then> <else pos:line="876" pos:column="51">else <if pos:line="876" pos:column="56">if <condition pos:line="876" pos:column="59">(<expr><call><name><name pos:line="876" pos:column="60">sc</name><op:operator pos:line="876" pos:column="62">.</op:operator><name pos:line="876" pos:column="63">Match</name></name><argument_list pos:line="876" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="876" pos:column="69">"endif"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="876" pos:column="78"> <block pos:line="876" pos:column="79">{
							<expr_stmt><expr><call><name><name pos:line="877" pos:column="57">preproc</name><op:operator pos:line="877" pos:column="64">.</op:operator><name pos:line="877" pos:column="65">EndSection</name></name><argument_list pos:line="877" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="878" pos:column="57">activitySet</name> <op:operator pos:line="878" pos:column="69">=</op:operator> <call><name><name pos:line="878" pos:column="71">preproc</name><op:operator pos:line="878" pos:column="78">.</op:operator><name pos:line="878" pos:column="79">IsInactive</name></name><argument_list pos:line="878" pos:column="89">()</argument_list></call> <op:operator pos:line="878" pos:column="92">?</op:operator> <name pos:line="878" pos:column="94">activeFlag</name> <op:operator pos:line="878" pos:column="105">:</op:operator> <lit:literal type="number" pos:line="878" pos:column="107">0</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="879" pos:column="57">sc</name><op:operator pos:line="879" pos:column="59">.</op:operator><name pos:line="879" pos:column="60">ChangeState</name></name><argument_list pos:line="879" pos:column="71">(<argument><expr><name pos:line="879" pos:column="72">SCE_C_PREPROCESSOR</name><op:operator pos:line="879" pos:column="90">|</op:operator><name pos:line="879" pos:column="91">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="880" pos:column="51">else <if pos:line="880" pos:column="56">if <condition pos:line="880" pos:column="59">(<expr><call><name><name pos:line="880" pos:column="60">sc</name><op:operator pos:line="880" pos:column="62">.</op:operator><name pos:line="880" pos:column="63">Match</name></name><argument_list pos:line="880" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="880" pos:column="69">"define"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="880" pos:column="79"> <block pos:line="880" pos:column="80">{
							<if pos:line="881" pos:column="57">if <condition pos:line="881" pos:column="60">(<expr><name><name pos:line="881" pos:column="61">options</name><op:operator pos:line="881" pos:column="68">.</op:operator><name pos:line="881" pos:column="69">updatePreprocessor</name></name> <op:operator pos:line="881" pos:column="88">&amp;&amp;</op:operator> <op:operator pos:line="881" pos:column="91">!</op:operator><call><name><name pos:line="881" pos:column="92">preproc</name><op:operator pos:line="881" pos:column="99">.</op:operator><name pos:line="881" pos:column="100">IsInactive</name></name><argument_list pos:line="881" pos:column="110">()</argument_list></call></expr>)</condition><then pos:line="881" pos:column="113"> <block pos:line="881" pos:column="114">{
								<decl_stmt><decl><type><name><name pos:line="882" pos:column="65">std</name><op:operator pos:line="882" pos:column="68">::</op:operator><name pos:line="882" pos:column="70">string</name></name></type> <name pos:line="882" pos:column="77">restOfLine</name> <init pos:line="882" pos:column="88">= <expr><call><name pos:line="882" pos:column="90">GetRestOfLine</name><argument_list pos:line="882" pos:column="103">(<argument><expr><name pos:line="882" pos:column="104">styler</name></expr></argument>, <argument><expr><name><name pos:line="882" pos:column="112">sc</name><op:operator pos:line="882" pos:column="114">.</op:operator><name pos:line="882" pos:column="115">currentPos</name></name> <op:operator pos:line="882" pos:column="126">+</op:operator> <lit:literal type="number" pos:line="882" pos:column="128">6</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="882" pos:column="131">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<if pos:line="883" pos:column="65">if <condition pos:line="883" pos:column="68">(<expr><call><name><name pos:line="883" pos:column="69">restOfLine</name><op:operator pos:line="883" pos:column="79">.</op:operator><name pos:line="883" pos:column="80">find</name></name><argument_list pos:line="883" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="883" pos:column="85">")"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="883" pos:column="90">==</op:operator> <name><name pos:line="883" pos:column="93">std</name><op:operator pos:line="883" pos:column="96">::</op:operator><name pos:line="883" pos:column="98">string</name><op:operator pos:line="883" pos:column="104">::</op:operator><name pos:line="883" pos:column="106">npos</name></name></expr>)</condition><then pos:line="883" pos:column="111"> <block pos:line="883" pos:column="112">{	<comment type="line" pos:line="883" pos:column="121">// Don't handle macros with arguments</comment>
									<decl_stmt><decl><type><name><name pos:line="884" pos:column="73">std</name><op:operator pos:line="884" pos:column="76">::</op:operator><name><name pos:line="884" pos:column="78">vector</name><argument_list pos:line="884" pos:column="84">&lt;<argument><expr><name><name pos:line="884" pos:column="85">std</name><op:operator pos:line="884" pos:column="88">::</op:operator><name pos:line="884" pos:column="90">string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="884" pos:column="98">tokens</name> <init pos:line="884" pos:column="105">= <expr><call><name pos:line="884" pos:column="107">Tokenize</name><argument_list pos:line="884" pos:column="115">(<argument><expr><name pos:line="884" pos:column="116">restOfLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<decl_stmt><decl><type><name><name pos:line="885" pos:column="73">std</name><op:operator pos:line="885" pos:column="76">::</op:operator><name pos:line="885" pos:column="78">string</name></name></type> <name pos:line="885" pos:column="85">key</name></decl>;</decl_stmt>
									<decl_stmt><decl><type><name><name pos:line="886" pos:column="73">std</name><op:operator pos:line="886" pos:column="76">::</op:operator><name pos:line="886" pos:column="78">string</name></name></type> <name pos:line="886" pos:column="85">value</name><argument_list pos:line="886" pos:column="90">(<argument><expr><lit:literal type="string" pos:line="886" pos:column="91">"1"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
									<if pos:line="887" pos:column="73">if <condition pos:line="887" pos:column="76">(<expr><call><name><name pos:line="887" pos:column="77">tokens</name><op:operator pos:line="887" pos:column="83">.</op:operator><name pos:line="887" pos:column="84">size</name></name><argument_list pos:line="887" pos:column="88">()</argument_list></call> <op:operator pos:line="887" pos:column="91">&gt;=</op:operator> <lit:literal type="number" pos:line="887" pos:column="94">1</lit:literal></expr>)</condition><then pos:line="887" pos:column="96"> <block pos:line="887" pos:column="97">{
										<expr_stmt><expr><name pos:line="888" pos:column="81">key</name> <op:operator pos:line="888" pos:column="85">=</op:operator> <name><name pos:line="888" pos:column="87">tokens</name><index pos:line="888" pos:column="93">[<expr><lit:literal type="number" pos:line="888" pos:column="94">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
										<if pos:line="889" pos:column="81">if <condition pos:line="889" pos:column="84">(<expr><call><name><name pos:line="889" pos:column="85">tokens</name><op:operator pos:line="889" pos:column="91">.</op:operator><name pos:line="889" pos:column="92">size</name></name><argument_list pos:line="889" pos:column="96">()</argument_list></call> <op:operator pos:line="889" pos:column="99">&gt;=</op:operator> <lit:literal type="number" pos:line="889" pos:column="102">2</lit:literal></expr>)</condition><then pos:line="889" pos:column="104"> <block pos:line="889" pos:column="105">{
											<expr_stmt><expr><name pos:line="890" pos:column="89">value</name> <op:operator pos:line="890" pos:column="95">=</op:operator> <name><name pos:line="890" pos:column="97">tokens</name><index pos:line="890" pos:column="103">[<expr><lit:literal type="number" pos:line="890" pos:column="104">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
										}</block></then></if>
										<expr_stmt><expr><name><name pos:line="892" pos:column="81">preprocessorDefinitions</name><index pos:line="892" pos:column="104">[<expr><name pos:line="892" pos:column="105">key</name></expr>]</index></name> <op:operator pos:line="892" pos:column="110">=</op:operator> <name pos:line="892" pos:column="112">value</name></expr>;</expr_stmt>
										<expr_stmt><expr><call><name><name pos:line="893" pos:column="81">ppDefineHistory</name><op:operator pos:line="893" pos:column="96">.</op:operator><name pos:line="893" pos:column="97">push_back</name></name><argument_list pos:line="893" pos:column="106">(<argument><expr><call><name pos:line="893" pos:column="107">PPDefinition</name><argument_list pos:line="893" pos:column="119">(<argument><expr><name pos:line="893" pos:column="120">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="893" pos:column="133">key</name></expr></argument>, <argument><expr><name pos:line="893" pos:column="138">value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
										<expr_stmt><expr><name pos:line="894" pos:column="81">definitionsChanged</name> <op:operator pos:line="894" pos:column="100">=</op:operator> <lit:literal type="boolean" pos:line="894" pos:column="102">true</lit:literal></expr>;</expr_stmt>
									}</block></then></if>
								}</block></then></if>
							}</block></then></if>
						}</block></then></if></else></if></else></if></else></if></else></if></else></if>
					}</block></then></if>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="901" pos:column="27">else <if pos:line="901" pos:column="32">if <condition pos:line="901" pos:column="35">(<expr><call><name pos:line="901" pos:column="36">isoperator</name><argument_list pos:line="901" pos:column="46">(<argument><expr><call><name><name pos:line="901" pos:column="47">static_cast</name><argument_list pos:line="901" pos:column="58">&lt;<argument><expr><name pos:line="901" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="901" pos:column="64">(<argument><expr><name><name pos:line="901" pos:column="65">sc</name><op:operator pos:line="901" pos:column="67">.</op:operator><name pos:line="901" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="901" pos:column="73"> <block pos:line="901" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="902" pos:column="33">sc</name><op:operator pos:line="902" pos:column="35">.</op:operator><name pos:line="902" pos:column="36">SetState</name></name><argument_list pos:line="902" pos:column="44">(<argument><expr><name pos:line="902" pos:column="45">SCE_C_OPERATOR</name><op:operator pos:line="902" pos:column="59">|</op:operator><name pos:line="902" pos:column="60">activitySet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

		<if pos:line="906" pos:column="17">if <condition pos:line="906" pos:column="20">(<expr><op:operator pos:line="906" pos:column="21">!</op:operator><call><name pos:line="906" pos:column="22">IsASpace</name><argument_list pos:line="906" pos:column="30">(<argument><expr><name><name pos:line="906" pos:column="31">sc</name><op:operator pos:line="906" pos:column="33">.</op:operator><name pos:line="906" pos:column="34">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="906" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="906" pos:column="41">!</op:operator><call><name pos:line="906" pos:column="42">IsSpaceEquiv</name><argument_list pos:line="906" pos:column="54">(<argument><expr><name><name pos:line="906" pos:column="55">sc</name><op:operator pos:line="906" pos:column="57">.</op:operator><name pos:line="906" pos:column="58">state</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="906" pos:column="65"> <block pos:line="906" pos:column="66">{
			<expr_stmt><expr><name pos:line="907" pos:column="25">chPrevNonWhite</name> <op:operator pos:line="907" pos:column="40">=</op:operator> <name><name pos:line="907" pos:column="42">sc</name><op:operator pos:line="907" pos:column="44">.</op:operator><name pos:line="907" pos:column="45">ch</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="908" pos:column="25">visibleChars</name><op:operator pos:line="908" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="910" pos:column="17">continuationLine</name> <op:operator pos:line="910" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="910" pos:column="36">false</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><specifier pos:line="912" pos:column="9">const</specifier> <name pos:line="912" pos:column="15">bool</name></type> <name pos:line="912" pos:column="20">rawStringsChanged</name> <init pos:line="912" pos:column="38">= <expr><call><name><name pos:line="912" pos:column="40">rawStringTerminators</name><op:operator pos:line="912" pos:column="60">.</op:operator><name pos:line="912" pos:column="61">Merge</name></name><argument_list pos:line="912" pos:column="66">(<argument><expr><name pos:line="912" pos:column="67">rawSTNew</name></expr></argument>, <argument><expr><name pos:line="912" pos:column="77">lineCurrent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="913" pos:column="9">if <condition pos:line="913" pos:column="12">(<expr><name pos:line="913" pos:column="13">definitionsChanged</name> <op:operator pos:line="913" pos:column="32">||</op:operator> <name pos:line="913" pos:column="35">rawStringsChanged</name></expr>)</condition><then pos:line="913" pos:column="53">
		<expr_stmt><expr><call><name><name pos:line="914" pos:column="17">styler</name><op:operator pos:line="914" pos:column="23">.</op:operator><name pos:line="914" pos:column="24">ChangeLexerState</name></name><argument_list pos:line="914" pos:column="40">(<argument><expr><name pos:line="914" pos:column="41">startPos</name></expr></argument>, <argument><expr><name pos:line="914" pos:column="51">startPos</name> <op:operator pos:line="914" pos:column="60">+</op:operator> <name pos:line="914" pos:column="62">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name><name pos:line="915" pos:column="9">sc</name><op:operator pos:line="915" pos:column="11">.</op:operator><name pos:line="915" pos:column="12">Complete</name></name><argument_list pos:line="915" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="918" pos:column="1">// Store both the current line's fold level and the next lines in the</comment>
<comment type="line" pos:line="919" pos:column="1">// level store to make it easy to pick up with each increment</comment>
<comment type="line" pos:line="920" pos:column="1">// and to make it possible to fiddle the current level for "} else {".</comment>

<function><type><name pos:line="922" pos:column="1">void</name> <name pos:line="922" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="922" pos:column="17">LexerCPP</name><op:operator pos:line="922" pos:column="25">::</op:operator><name pos:line="922" pos:column="27">Fold</name></name><parameter_list pos:line="922" pos:column="31">(<param><decl><type><name pos:line="922" pos:column="32">unsigned</name> <name pos:line="922" pos:column="41">int</name></type> <name pos:line="922" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="922" pos:column="55">int</name></type> <name pos:line="922" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="922" pos:column="67">int</name></type> <name pos:line="922" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name pos:line="922" pos:column="82">IDocument</name> <type:modifier pos:line="922" pos:column="92">*</type:modifier></type><name pos:line="922" pos:column="93">pAccess</name></decl></param>)</parameter_list> <block pos:line="922" pos:column="102">{

	<if pos:line="924" pos:column="9">if <condition pos:line="924" pos:column="12">(<expr><op:operator pos:line="924" pos:column="13">!</op:operator><name><name pos:line="924" pos:column="14">options</name><op:operator pos:line="924" pos:column="21">.</op:operator><name pos:line="924" pos:column="22">fold</name></name></expr>)</condition><then pos:line="924" pos:column="27">
		<return pos:line="925" pos:column="17">return;</return></then></if>

	<function_decl><type><name pos:line="927" pos:column="9">LexAccessor</name></type> <name pos:line="927" pos:column="21">styler</name><parameter_list pos:line="927" pos:column="27">(<param><decl><type><name pos:line="927" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="929" pos:column="9">unsigned</name> <name pos:line="929" pos:column="18">int</name></type> <name pos:line="929" pos:column="22">endPos</name> <init pos:line="929" pos:column="29">= <expr><name pos:line="929" pos:column="31">startPos</name> <op:operator pos:line="929" pos:column="40">+</op:operator> <name pos:line="929" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="930" pos:column="9">int</name></type> <name pos:line="930" pos:column="13">visibleChars</name> <init pos:line="930" pos:column="26">= <expr><lit:literal type="number" pos:line="930" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="931" pos:column="9">int</name></type> <name pos:line="931" pos:column="13">lineCurrent</name> <init pos:line="931" pos:column="25">= <expr><call><name><name pos:line="931" pos:column="27">styler</name><op:operator pos:line="931" pos:column="33">.</op:operator><name pos:line="931" pos:column="34">GetLine</name></name><argument_list pos:line="931" pos:column="41">(<argument><expr><name pos:line="931" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="932" pos:column="9">int</name></type> <name pos:line="932" pos:column="13">levelCurrent</name> <init pos:line="932" pos:column="26">= <expr><name pos:line="932" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="933" pos:column="9">if <condition pos:line="933" pos:column="12">(<expr><name pos:line="933" pos:column="13">lineCurrent</name> <op:operator pos:line="933" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="933" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="933" pos:column="29">
		<expr_stmt><expr><name pos:line="934" pos:column="17">levelCurrent</name> <op:operator pos:line="934" pos:column="30">=</op:operator> <call><name><name pos:line="934" pos:column="32">styler</name><op:operator pos:line="934" pos:column="38">.</op:operator><name pos:line="934" pos:column="39">LevelAt</name></name><argument_list pos:line="934" pos:column="46">(<argument><expr><name pos:line="934" pos:column="47">lineCurrent</name><op:operator pos:line="934" pos:column="58">-</op:operator><lit:literal type="number" pos:line="934" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="934" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="934" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="935" pos:column="9">int</name></type> <name pos:line="935" pos:column="13">levelMinCurrent</name> <init pos:line="935" pos:column="29">= <expr><name pos:line="935" pos:column="31">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="936" pos:column="9">int</name></type> <name pos:line="936" pos:column="13">levelNext</name> <init pos:line="936" pos:column="23">= <expr><name pos:line="936" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="937" pos:column="9">char</name></type> <name pos:line="937" pos:column="14">chNext</name> <init pos:line="937" pos:column="21">= <expr><name><name pos:line="937" pos:column="23">styler</name><index pos:line="937" pos:column="29">[<expr><name pos:line="937" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="938" pos:column="9">int</name></type> <name pos:line="938" pos:column="13">styleNext</name> <init pos:line="938" pos:column="23">= <expr><call><name pos:line="938" pos:column="25">MaskActive</name><argument_list pos:line="938" pos:column="35">(<argument><expr><call><name><name pos:line="938" pos:column="36">styler</name><op:operator pos:line="938" pos:column="42">.</op:operator><name pos:line="938" pos:column="43">StyleAt</name></name><argument_list pos:line="938" pos:column="50">(<argument><expr><name pos:line="938" pos:column="51">startPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="939" pos:column="9">int</name></type> <name pos:line="939" pos:column="13">style</name> <init pos:line="939" pos:column="19">= <expr><call><name pos:line="939" pos:column="21">MaskActive</name><argument_list pos:line="939" pos:column="31">(<argument><expr><name pos:line="939" pos:column="32">initStyle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="940" pos:column="9">const</specifier> <name pos:line="940" pos:column="15">bool</name></type> <name pos:line="940" pos:column="20">userDefinedFoldMarkers</name> <init pos:line="940" pos:column="43">= <expr><op:operator pos:line="940" pos:column="45">!</op:operator><call><name><name pos:line="940" pos:column="46">options</name><op:operator pos:line="940" pos:column="53">.</op:operator><name pos:line="940" pos:column="54">foldExplicitStart</name><op:operator pos:line="940" pos:column="71">.</op:operator><name pos:line="940" pos:column="72">empty</name></name><argument_list pos:line="940" pos:column="77">()</argument_list></call> <op:operator pos:line="940" pos:column="80">&amp;&amp;</op:operator> <op:operator pos:line="940" pos:column="83">!</op:operator><call><name><name pos:line="940" pos:column="84">options</name><op:operator pos:line="940" pos:column="91">.</op:operator><name pos:line="940" pos:column="92">foldExplicitEnd</name><op:operator pos:line="940" pos:column="107">.</op:operator><name pos:line="940" pos:column="108">empty</name></name><argument_list pos:line="940" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="941" pos:column="9">for (<init><decl><type><name pos:line="941" pos:column="14">unsigned</name> <name pos:line="941" pos:column="23">int</name></type> <name pos:line="941" pos:column="27">i</name> <init pos:line="941" pos:column="29">= <expr><name pos:line="941" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="941" pos:column="41">i</name> <op:operator pos:line="941" pos:column="43">&lt;</op:operator> <name pos:line="941" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="941" pos:column="53">i</name><op:operator pos:line="941" pos:column="54">++</op:operator></expr></incr>) <block pos:line="941" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="942" pos:column="17">char</name></type> <name pos:line="942" pos:column="22">ch</name> <init pos:line="942" pos:column="25">= <expr><name pos:line="942" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="943" pos:column="17">chNext</name> <op:operator pos:line="943" pos:column="24">=</op:operator> <call><name><name pos:line="943" pos:column="26">styler</name><op:operator pos:line="943" pos:column="32">.</op:operator><name pos:line="943" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="943" pos:column="46">(<argument><expr><name pos:line="943" pos:column="47">i</name> <op:operator pos:line="943" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="943" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="944" pos:column="17">int</name></type> <name pos:line="944" pos:column="21">stylePrev</name> <init pos:line="944" pos:column="31">= <expr><name pos:line="944" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="945" pos:column="17">style</name> <op:operator pos:line="945" pos:column="23">=</op:operator> <name pos:line="945" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="946" pos:column="17">styleNext</name> <op:operator pos:line="946" pos:column="27">=</op:operator> <call><name pos:line="946" pos:column="29">MaskActive</name><argument_list pos:line="946" pos:column="39">(<argument><expr><call><name><name pos:line="946" pos:column="40">styler</name><op:operator pos:line="946" pos:column="46">.</op:operator><name pos:line="946" pos:column="47">StyleAt</name></name><argument_list pos:line="946" pos:column="54">(<argument><expr><name pos:line="946" pos:column="55">i</name> <op:operator pos:line="946" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="946" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="947" pos:column="17">bool</name></type> <name pos:line="947" pos:column="22">atEOL</name> <init pos:line="947" pos:column="28">= <expr><op:operator pos:line="947" pos:column="30">(</op:operator><name pos:line="947" pos:column="31">ch</name> <op:operator pos:line="947" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="947" pos:column="37">'\r'</lit:literal> <op:operator pos:line="947" pos:column="42">&amp;&amp;</op:operator> <name pos:line="947" pos:column="45">chNext</name> <op:operator pos:line="947" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="947" pos:column="55">'\n'</lit:literal><op:operator pos:line="947" pos:column="59">)</op:operator> <op:operator pos:line="947" pos:column="61">||</op:operator> <op:operator pos:line="947" pos:column="64">(</op:operator><name pos:line="947" pos:column="65">ch</name> <op:operator pos:line="947" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="947" pos:column="71">'\n'</lit:literal><op:operator pos:line="947" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="948" pos:column="17">if <condition pos:line="948" pos:column="20">(<expr><name><name pos:line="948" pos:column="21">options</name><op:operator pos:line="948" pos:column="28">.</op:operator><name pos:line="948" pos:column="29">foldComment</name></name> <op:operator pos:line="948" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="948" pos:column="44">options</name><op:operator pos:line="948" pos:column="51">.</op:operator><name pos:line="948" pos:column="52">foldCommentMultiline</name></name> <op:operator pos:line="948" pos:column="73">&amp;&amp;</op:operator> <call><name pos:line="948" pos:column="76">IsStreamCommentStyle</name><argument_list pos:line="948" pos:column="96">(<argument><expr><name pos:line="948" pos:column="97">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="948" pos:column="104"> <block pos:line="948" pos:column="105">{
			<if pos:line="949" pos:column="25">if <condition pos:line="949" pos:column="28">(<expr><op:operator pos:line="949" pos:column="29">!</op:operator><call><name pos:line="949" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="949" pos:column="50">(<argument><expr><name pos:line="949" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call> <op:operator pos:line="949" pos:column="62">&amp;&amp;</op:operator> <op:operator pos:line="949" pos:column="65">(</op:operator><name pos:line="949" pos:column="66">stylePrev</name> <op:operator pos:line="949" pos:column="76">!=</op:operator> <name pos:line="949" pos:column="79">SCE_C_COMMENTLINEDOC</name><op:operator pos:line="949" pos:column="99">)</op:operator></expr>)</condition><then pos:line="949" pos:column="101"> <block pos:line="949" pos:column="102">{
				<expr_stmt><expr><name pos:line="950" pos:column="33">levelNext</name><op:operator pos:line="950" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="951" pos:column="27">else <if pos:line="951" pos:column="32">if <condition pos:line="951" pos:column="35">(<expr><op:operator pos:line="951" pos:column="36">!</op:operator><call><name pos:line="951" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="951" pos:column="57">(<argument><expr><name pos:line="951" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="951" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="951" pos:column="72">(</op:operator><name pos:line="951" pos:column="73">styleNext</name> <op:operator pos:line="951" pos:column="83">!=</op:operator> <name pos:line="951" pos:column="86">SCE_C_COMMENTLINEDOC</name><op:operator pos:line="951" pos:column="106">)</op:operator> <op:operator pos:line="951" pos:column="108">&amp;&amp;</op:operator> <op:operator pos:line="951" pos:column="111">!</op:operator><name pos:line="951" pos:column="112">atEOL</name></expr>)</condition><then pos:line="951" pos:column="118"> <block pos:line="951" pos:column="119">{
				<comment type="line" pos:line="952" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="953" pos:column="33">levelNext</name><op:operator pos:line="953" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="956" pos:column="17">if <condition pos:line="956" pos:column="20">(<expr><name><name pos:line="956" pos:column="21">options</name><op:operator pos:line="956" pos:column="28">.</op:operator><name pos:line="956" pos:column="29">foldComment</name></name> <op:operator pos:line="956" pos:column="41">&amp;&amp;</op:operator> <name><name pos:line="956" pos:column="44">options</name><op:operator pos:line="956" pos:column="51">.</op:operator><name pos:line="956" pos:column="52">foldCommentExplicit</name></name> <op:operator pos:line="956" pos:column="72">&amp;&amp;</op:operator> <op:operator pos:line="956" pos:column="75">(</op:operator><op:operator pos:line="956" pos:column="76">(</op:operator><name pos:line="956" pos:column="77">style</name> <op:operator pos:line="956" pos:column="83">==</op:operator> <name pos:line="956" pos:column="86">SCE_C_COMMENTLINE</name><op:operator pos:line="956" pos:column="103">)</op:operator> <op:operator pos:line="956" pos:column="105">||</op:operator> <name><name pos:line="956" pos:column="108">options</name><op:operator pos:line="956" pos:column="115">.</op:operator><name pos:line="956" pos:column="116">foldExplicitAnywhere</name></name><op:operator pos:line="956" pos:column="136">)</op:operator></expr>)</condition><then pos:line="956" pos:column="138"> <block pos:line="956" pos:column="139">{
			<if pos:line="957" pos:column="25">if <condition pos:line="957" pos:column="28">(<expr><name pos:line="957" pos:column="29">userDefinedFoldMarkers</name></expr>)</condition><then pos:line="957" pos:column="52"> <block pos:line="957" pos:column="53">{
				<if pos:line="958" pos:column="33">if <condition pos:line="958" pos:column="36">(<expr><call><name><name pos:line="958" pos:column="37">styler</name><op:operator pos:line="958" pos:column="43">.</op:operator><name pos:line="958" pos:column="44">Match</name></name><argument_list pos:line="958" pos:column="49">(<argument><expr><name pos:line="958" pos:column="50">i</name></expr></argument>, <argument><expr><call><name><name pos:line="958" pos:column="53">options</name><op:operator pos:line="958" pos:column="60">.</op:operator><name pos:line="958" pos:column="61">foldExplicitStart</name><op:operator pos:line="958" pos:column="78">.</op:operator><name pos:line="958" pos:column="79">c_str</name></name><argument_list pos:line="958" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="958" pos:column="88"> <block pos:line="958" pos:column="89">{
					<expr_stmt><expr><name pos:line="959" pos:column="41">levelNext</name><op:operator pos:line="959" pos:column="50">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="960" pos:column="35">else <if pos:line="960" pos:column="40">if <condition pos:line="960" pos:column="43">(<expr><call><name><name pos:line="960" pos:column="44">styler</name><op:operator pos:line="960" pos:column="50">.</op:operator><name pos:line="960" pos:column="51">Match</name></name><argument_list pos:line="960" pos:column="56">(<argument><expr><name pos:line="960" pos:column="57">i</name></expr></argument>, <argument><expr><call><name><name pos:line="960" pos:column="60">options</name><op:operator pos:line="960" pos:column="67">.</op:operator><name pos:line="960" pos:column="68">foldExplicitEnd</name><op:operator pos:line="960" pos:column="83">.</op:operator><name pos:line="960" pos:column="84">c_str</name></name><argument_list pos:line="960" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="960" pos:column="93"> <block pos:line="960" pos:column="94">{
					<expr_stmt><expr><name pos:line="961" pos:column="41">levelNext</name><op:operator pos:line="961" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="963" pos:column="27">else <block pos:line="963" pos:column="32">{
				<if pos:line="964" pos:column="33">if <condition pos:line="964" pos:column="36">(<expr><op:operator pos:line="964" pos:column="37">(</op:operator><name pos:line="964" pos:column="38">ch</name> <op:operator pos:line="964" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="964" pos:column="44">'/'</lit:literal><op:operator pos:line="964" pos:column="47">)</op:operator> <op:operator pos:line="964" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="964" pos:column="52">(</op:operator><name pos:line="964" pos:column="53">chNext</name> <op:operator pos:line="964" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="964" pos:column="63">'/'</lit:literal><op:operator pos:line="964" pos:column="66">)</op:operator></expr>)</condition><then pos:line="964" pos:column="68"> <block pos:line="964" pos:column="69">{
					<decl_stmt><decl><type><name pos:line="965" pos:column="41">char</name></type> <name pos:line="965" pos:column="46">chNext2</name> <init pos:line="965" pos:column="54">= <expr><call><name><name pos:line="965" pos:column="56">styler</name><op:operator pos:line="965" pos:column="62">.</op:operator><name pos:line="965" pos:column="63">SafeGetCharAt</name></name><argument_list pos:line="965" pos:column="76">(<argument><expr><name pos:line="965" pos:column="77">i</name> <op:operator pos:line="965" pos:column="79">+</op:operator> <lit:literal type="number" pos:line="965" pos:column="81">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="966" pos:column="41">if <condition pos:line="966" pos:column="44">(<expr><name pos:line="966" pos:column="45">chNext2</name> <op:operator pos:line="966" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="966" pos:column="56">'{'</lit:literal></expr>)</condition><then pos:line="966" pos:column="60"> <block pos:line="966" pos:column="61">{
						<expr_stmt><expr><name pos:line="967" pos:column="49">levelNext</name><op:operator pos:line="967" pos:column="58">++</op:operator></expr>;</expr_stmt>
					}</block></then> <else pos:line="968" pos:column="43">else <if pos:line="968" pos:column="48">if <condition pos:line="968" pos:column="51">(<expr><name pos:line="968" pos:column="52">chNext2</name> <op:operator pos:line="968" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="968" pos:column="63">'}'</lit:literal></expr>)</condition><then pos:line="968" pos:column="67"> <block pos:line="968" pos:column="68">{
						<expr_stmt><expr><name pos:line="969" pos:column="49">levelNext</name><op:operator pos:line="969" pos:column="58">--</op:operator></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then></if>
			}</block></else></if>
		}</block></then></if>
		<if pos:line="974" pos:column="17">if <condition pos:line="974" pos:column="20">(<expr><name><name pos:line="974" pos:column="21">options</name><op:operator pos:line="974" pos:column="28">.</op:operator><name pos:line="974" pos:column="29">foldPreprocessor</name></name> <op:operator pos:line="974" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="974" pos:column="49">(</op:operator><name pos:line="974" pos:column="50">style</name> <op:operator pos:line="974" pos:column="56">==</op:operator> <name pos:line="974" pos:column="59">SCE_C_PREPROCESSOR</name><op:operator pos:line="974" pos:column="77">)</op:operator></expr>)</condition><then pos:line="974" pos:column="79"> <block pos:line="974" pos:column="80">{
			<if pos:line="975" pos:column="25">if <condition pos:line="975" pos:column="28">(<expr><name pos:line="975" pos:column="29">ch</name> <op:operator pos:line="975" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="975" pos:column="35">'#'</lit:literal></expr>)</condition><then pos:line="975" pos:column="39"> <block pos:line="975" pos:column="40">{
				<decl_stmt><decl><type><name pos:line="976" pos:column="33">unsigned</name> <name pos:line="976" pos:column="42">int</name></type> <name pos:line="976" pos:column="46">j</name> <init pos:line="976" pos:column="48">= <expr><name pos:line="976" pos:column="50">i</name> <op:operator pos:line="976" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="976" pos:column="54">1</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="977" pos:column="33">while <condition pos:line="977" pos:column="39">(<expr><op:operator pos:line="977" pos:column="40">(</op:operator><name pos:line="977" pos:column="41">j</name> <op:operator pos:line="977" pos:column="43">&lt;</op:operator> <name pos:line="977" pos:column="45">endPos</name><op:operator pos:line="977" pos:column="51">)</op:operator> <op:operator pos:line="977" pos:column="53">&amp;&amp;</op:operator> <call><name pos:line="977" pos:column="56">IsASpaceOrTab</name><argument_list pos:line="977" pos:column="69">(<argument><expr><call><name><name pos:line="977" pos:column="70">styler</name><op:operator pos:line="977" pos:column="76">.</op:operator><name pos:line="977" pos:column="77">SafeGetCharAt</name></name><argument_list pos:line="977" pos:column="90">(<argument><expr><name pos:line="977" pos:column="91">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="977" pos:column="96">{
					<expr_stmt><expr><name pos:line="978" pos:column="41">j</name><op:operator pos:line="978" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="980" pos:column="33">if <condition pos:line="980" pos:column="36">(<expr><call><name><name pos:line="980" pos:column="37">styler</name><op:operator pos:line="980" pos:column="43">.</op:operator><name pos:line="980" pos:column="44">Match</name></name><argument_list pos:line="980" pos:column="49">(<argument><expr><name pos:line="980" pos:column="50">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="980" pos:column="53">"region"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="980" pos:column="63">||</op:operator> <call><name><name pos:line="980" pos:column="66">styler</name><op:operator pos:line="980" pos:column="72">.</op:operator><name pos:line="980" pos:column="73">Match</name></name><argument_list pos:line="980" pos:column="78">(<argument><expr><name pos:line="980" pos:column="79">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="980" pos:column="82">"if"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="980" pos:column="88"> <block pos:line="980" pos:column="89">{
					<expr_stmt><expr><name pos:line="981" pos:column="41">levelNext</name><op:operator pos:line="981" pos:column="50">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="982" pos:column="35">else <if pos:line="982" pos:column="40">if <condition pos:line="982" pos:column="43">(<expr><call><name><name pos:line="982" pos:column="44">styler</name><op:operator pos:line="982" pos:column="50">.</op:operator><name pos:line="982" pos:column="51">Match</name></name><argument_list pos:line="982" pos:column="56">(<argument><expr><name pos:line="982" pos:column="57">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="982" pos:column="60">"end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="982" pos:column="67"> <block pos:line="982" pos:column="68">{
					<expr_stmt><expr><name pos:line="983" pos:column="41">levelNext</name><op:operator pos:line="983" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="987" pos:column="17">if <condition pos:line="987" pos:column="20">(<expr><name><name pos:line="987" pos:column="21">options</name><op:operator pos:line="987" pos:column="28">.</op:operator><name pos:line="987" pos:column="29">foldSyntaxBased</name></name> <op:operator pos:line="987" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="987" pos:column="48">(</op:operator><name pos:line="987" pos:column="49">style</name> <op:operator pos:line="987" pos:column="55">==</op:operator> <name pos:line="987" pos:column="58">SCE_C_OPERATOR</name><op:operator pos:line="987" pos:column="72">)</op:operator></expr>)</condition><then pos:line="987" pos:column="74"> <block pos:line="987" pos:column="75">{
			<if pos:line="988" pos:column="25">if <condition pos:line="988" pos:column="28">(<expr><name pos:line="988" pos:column="29">ch</name> <op:operator pos:line="988" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="988" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="988" pos:column="39"> <block pos:line="988" pos:column="40">{
				<comment type="line" pos:line="989" pos:column="33">// Measure the minimum before a '{' to allow</comment>
				<comment type="line" pos:line="990" pos:column="33">// folding on "} else {"</comment>
				<if pos:line="991" pos:column="33">if <condition pos:line="991" pos:column="36">(<expr><name pos:line="991" pos:column="37">levelMinCurrent</name> <op:operator pos:line="991" pos:column="53">&gt;</op:operator> <name pos:line="991" pos:column="55">levelNext</name></expr>)</condition><then pos:line="991" pos:column="65"> <block pos:line="991" pos:column="66">{
					<expr_stmt><expr><name pos:line="992" pos:column="41">levelMinCurrent</name> <op:operator pos:line="992" pos:column="57">=</op:operator> <name pos:line="992" pos:column="59">levelNext</name></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="994" pos:column="33">levelNext</name><op:operator pos:line="994" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="995" pos:column="27">else <if pos:line="995" pos:column="32">if <condition pos:line="995" pos:column="35">(<expr><name pos:line="995" pos:column="36">ch</name> <op:operator pos:line="995" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="995" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="995" pos:column="46"> <block pos:line="995" pos:column="47">{
				<expr_stmt><expr><name pos:line="996" pos:column="33">levelNext</name><op:operator pos:line="996" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="999" pos:column="17">if <condition pos:line="999" pos:column="20">(<expr><op:operator pos:line="999" pos:column="21">!</op:operator><call><name pos:line="999" pos:column="22">IsASpace</name><argument_list pos:line="999" pos:column="30">(<argument><expr><name pos:line="999" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="999" pos:column="35">
			<expr_stmt><expr><name pos:line="1000" pos:column="25">visibleChars</name><op:operator pos:line="1000" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
		<if pos:line="1001" pos:column="17">if <condition pos:line="1001" pos:column="20">(<expr><name pos:line="1001" pos:column="21">atEOL</name> <op:operator pos:line="1001" pos:column="27">||</op:operator> <op:operator pos:line="1001" pos:column="30">(</op:operator><name pos:line="1001" pos:column="31">i</name> <op:operator pos:line="1001" pos:column="33">==</op:operator> <name pos:line="1001" pos:column="36">endPos</name><op:operator pos:line="1001" pos:column="42">-</op:operator><lit:literal type="number" pos:line="1001" pos:column="43">1</lit:literal><op:operator pos:line="1001" pos:column="44">)</op:operator></expr>)</condition><then pos:line="1001" pos:column="46"> <block pos:line="1001" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="1002" pos:column="25">int</name></type> <name pos:line="1002" pos:column="29">levelUse</name> <init pos:line="1002" pos:column="38">= <expr><name pos:line="1002" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<if pos:line="1003" pos:column="25">if <condition pos:line="1003" pos:column="28">(<expr><name><name pos:line="1003" pos:column="29">options</name><op:operator pos:line="1003" pos:column="36">.</op:operator><name pos:line="1003" pos:column="37">foldSyntaxBased</name></name> <op:operator pos:line="1003" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="1003" pos:column="56">options</name><op:operator pos:line="1003" pos:column="63">.</op:operator><name pos:line="1003" pos:column="64">foldAtElse</name></name></expr>)</condition><then pos:line="1003" pos:column="75"> <block pos:line="1003" pos:column="76">{
				<expr_stmt><expr><name pos:line="1004" pos:column="33">levelUse</name> <op:operator pos:line="1004" pos:column="42">=</op:operator> <name pos:line="1004" pos:column="44">levelMinCurrent</name></expr>;</expr_stmt>
			}</block></then></if>
			<decl_stmt><decl><type><name pos:line="1006" pos:column="25">int</name></type> <name pos:line="1006" pos:column="29">lev</name> <init pos:line="1006" pos:column="33">= <expr><name pos:line="1006" pos:column="35">levelUse</name> <op:operator pos:line="1006" pos:column="44">|</op:operator> <name pos:line="1006" pos:column="46">levelNext</name> <op:operator pos:line="1006" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1006" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="1007" pos:column="25">if <condition pos:line="1007" pos:column="28">(<expr><name pos:line="1007" pos:column="29">visibleChars</name> <op:operator pos:line="1007" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="1007" pos:column="45">0</lit:literal> <op:operator pos:line="1007" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="1007" pos:column="50">options</name><op:operator pos:line="1007" pos:column="57">.</op:operator><name pos:line="1007" pos:column="58">foldCompact</name></name></expr>)</condition><then pos:line="1007" pos:column="70">
				<expr_stmt><expr><name pos:line="1008" pos:column="33">lev</name> <op:operator pos:line="1008" pos:column="37">|=</op:operator> <name pos:line="1008" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="1009" pos:column="25">if <condition pos:line="1009" pos:column="28">(<expr><name pos:line="1009" pos:column="29">levelUse</name> <op:operator pos:line="1009" pos:column="38">&lt;</op:operator> <name pos:line="1009" pos:column="40">levelNext</name></expr>)</condition><then pos:line="1009" pos:column="50">
				<expr_stmt><expr><name pos:line="1010" pos:column="33">lev</name> <op:operator pos:line="1010" pos:column="37">|=</op:operator> <name pos:line="1010" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="1011" pos:column="25">if <condition pos:line="1011" pos:column="28">(<expr><name pos:line="1011" pos:column="29">lev</name> <op:operator pos:line="1011" pos:column="33">!=</op:operator> <call><name><name pos:line="1011" pos:column="36">styler</name><op:operator pos:line="1011" pos:column="42">.</op:operator><name pos:line="1011" pos:column="43">LevelAt</name></name><argument_list pos:line="1011" pos:column="50">(<argument><expr><name pos:line="1011" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1011" pos:column="64"> <block pos:line="1011" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="1012" pos:column="33">styler</name><op:operator pos:line="1012" pos:column="39">.</op:operator><name pos:line="1012" pos:column="40">SetLevel</name></name><argument_list pos:line="1012" pos:column="48">(<argument><expr><name pos:line="1012" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="1012" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="1014" pos:column="25">lineCurrent</name><op:operator pos:line="1014" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1015" pos:column="25">levelCurrent</name> <op:operator pos:line="1015" pos:column="38">=</op:operator> <name pos:line="1015" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1016" pos:column="25">levelMinCurrent</name> <op:operator pos:line="1016" pos:column="41">=</op:operator> <name pos:line="1016" pos:column="43">levelCurrent</name></expr>;</expr_stmt>
			<if pos:line="1017" pos:column="25">if <condition pos:line="1017" pos:column="28">(<expr><name pos:line="1017" pos:column="29">atEOL</name> <op:operator pos:line="1017" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="1017" pos:column="38">(</op:operator><name pos:line="1017" pos:column="39">i</name> <op:operator pos:line="1017" pos:column="41">==</op:operator> <call><name><name pos:line="1017" pos:column="44">static_cast</name><argument_list pos:line="1017" pos:column="55">&lt;<argument><expr><name pos:line="1017" pos:column="56">unsigned</name> <name pos:line="1017" pos:column="65">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1017" pos:column="69">(<argument><expr><call><name><name pos:line="1017" pos:column="70">styler</name><op:operator pos:line="1017" pos:column="76">.</op:operator><name pos:line="1017" pos:column="77">Length</name></name><argument_list pos:line="1017" pos:column="83">()</argument_list></call><op:operator pos:line="1017" pos:column="85">-</op:operator><lit:literal type="number" pos:line="1017" pos:column="86">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1017" pos:column="88">)</op:operator></expr>)</condition><then pos:line="1017" pos:column="90"> <block pos:line="1017" pos:column="91">{
				<comment type="line" pos:line="1018" pos:column="33">// There is an empty line at end of file so give it same level and empty</comment>
				<expr_stmt><expr><call><name><name pos:line="1019" pos:column="33">styler</name><op:operator pos:line="1019" pos:column="39">.</op:operator><name pos:line="1019" pos:column="40">SetLevel</name></name><argument_list pos:line="1019" pos:column="48">(<argument><expr><name pos:line="1019" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="1019" pos:column="62">(</op:operator><name pos:line="1019" pos:column="63">levelCurrent</name> <op:operator pos:line="1019" pos:column="76">|</op:operator> <name pos:line="1019" pos:column="78">levelCurrent</name> <op:operator pos:line="1019" pos:column="91">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="1019" pos:column="94">16</lit:literal><op:operator pos:line="1019" pos:column="96">)</op:operator> <op:operator pos:line="1019" pos:column="98">|</op:operator> <name pos:line="1019" pos:column="100">SC_FOLDLEVELWHITEFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="1021" pos:column="25">visibleChars</name> <op:operator pos:line="1021" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="1021" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="1026" pos:column="1">void</name></type> <name><name pos:line="1026" pos:column="6">LexerCPP</name><op:operator pos:line="1026" pos:column="14">::</op:operator><name pos:line="1026" pos:column="16">EvaluateTokens</name></name><parameter_list pos:line="1026" pos:column="30">(<param><decl><type><name><name pos:line="1026" pos:column="31">std</name><op:operator pos:line="1026" pos:column="34">::</op:operator><name><name pos:line="1026" pos:column="36">vector</name><argument_list pos:line="1026" pos:column="42">&lt;<argument><expr><name><name pos:line="1026" pos:column="43">std</name><op:operator pos:line="1026" pos:column="46">::</op:operator><name pos:line="1026" pos:column="48">string</name></name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="1026" pos:column="56">&amp;</type:modifier></type><name pos:line="1026" pos:column="57">tokens</name></decl></param>)</parameter_list> <block pos:line="1026" pos:column="65">{

	<comment type="line" pos:line="1028" pos:column="9">// Evaluate defined() statements to either 0 or 1</comment>
	<for pos:line="1029" pos:column="9">for (<init><decl><type><name pos:line="1029" pos:column="14">size_t</name></type> <name pos:line="1029" pos:column="21">i</name><init pos:line="1029" pos:column="22">=<expr><lit:literal type="number" pos:line="1029" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="1029" pos:column="26">(</op:operator><name pos:line="1029" pos:column="27">i</name><op:operator pos:line="1029" pos:column="28">+</op:operator><lit:literal type="number" pos:line="1029" pos:column="29">2</lit:literal><op:operator pos:line="1029" pos:column="30">)</op:operator><op:operator pos:line="1029" pos:column="31">&lt;</op:operator><call><name><name pos:line="1029" pos:column="32">tokens</name><op:operator pos:line="1029" pos:column="38">.</op:operator><name pos:line="1029" pos:column="39">size</name></name><argument_list pos:line="1029" pos:column="43">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="1029" pos:column="48">{
		<if pos:line="1030" pos:column="17">if <condition pos:line="1030" pos:column="20">(<expr><op:operator pos:line="1030" pos:column="21">(</op:operator><name><name pos:line="1030" pos:column="22">tokens</name><index pos:line="1030" pos:column="28">[<expr><name pos:line="1030" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="1030" pos:column="32">==</op:operator> <lit:literal type="string" pos:line="1030" pos:column="35">"defined"</lit:literal><op:operator pos:line="1030" pos:column="44">)</op:operator> <op:operator pos:line="1030" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="1030" pos:column="49">(</op:operator><name><name pos:line="1030" pos:column="50">tokens</name><index pos:line="1030" pos:column="56">[<expr><name pos:line="1030" pos:column="57">i</name><op:operator pos:line="1030" pos:column="58">+</op:operator><lit:literal type="number" pos:line="1030" pos:column="59">1</lit:literal></expr>]</index></name> <op:operator pos:line="1030" pos:column="62">==</op:operator> <lit:literal type="string" pos:line="1030" pos:column="65">"("</lit:literal><op:operator pos:line="1030" pos:column="68">)</op:operator></expr>)</condition><then pos:line="1030" pos:column="70"> <block pos:line="1030" pos:column="71">{
			<decl_stmt><decl><type><specifier pos:line="1031" pos:column="25">const</specifier> <name pos:line="1031" pos:column="31">char</name> <type:modifier pos:line="1031" pos:column="36">*</type:modifier></type><name pos:line="1031" pos:column="37">val</name> <init pos:line="1031" pos:column="41">= <expr><lit:literal type="string" pos:line="1031" pos:column="43">"0"</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="1032" pos:column="25">if <condition pos:line="1032" pos:column="28">(<expr><name><name pos:line="1032" pos:column="29">tokens</name><index pos:line="1032" pos:column="35">[<expr><name pos:line="1032" pos:column="36">i</name><op:operator pos:line="1032" pos:column="37">+</op:operator><lit:literal type="number" pos:line="1032" pos:column="38">2</lit:literal></expr>]</index></name> <op:operator pos:line="1032" pos:column="41">==</op:operator> <lit:literal type="string" pos:line="1032" pos:column="44">")"</lit:literal></expr>)</condition><then pos:line="1032" pos:column="48"> <block pos:line="1032" pos:column="49">{
				<comment type="line" pos:line="1033" pos:column="33">// defined()</comment>
				<expr_stmt><expr><call><name><name pos:line="1034" pos:column="33">tokens</name><op:operator pos:line="1034" pos:column="39">.</op:operator><name pos:line="1034" pos:column="40">erase</name></name><argument_list pos:line="1034" pos:column="45">(<argument><expr><call><name><name pos:line="1034" pos:column="46">tokens</name><op:operator pos:line="1034" pos:column="52">.</op:operator><name pos:line="1034" pos:column="53">begin</name></name><argument_list pos:line="1034" pos:column="58">()</argument_list></call> <op:operator pos:line="1034" pos:column="61">+</op:operator> <name pos:line="1034" pos:column="63">i</name> <op:operator pos:line="1034" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="1034" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1034" pos:column="70">tokens</name><op:operator pos:line="1034" pos:column="76">.</op:operator><name pos:line="1034" pos:column="77">begin</name></name><argument_list pos:line="1034" pos:column="82">()</argument_list></call> <op:operator pos:line="1034" pos:column="85">+</op:operator> <name pos:line="1034" pos:column="87">i</name> <op:operator pos:line="1034" pos:column="89">+</op:operator> <lit:literal type="number" pos:line="1034" pos:column="91">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1035" pos:column="27">else <if pos:line="1035" pos:column="32">if <condition pos:line="1035" pos:column="35">(<expr><op:operator pos:line="1035" pos:column="36">(</op:operator><op:operator pos:line="1035" pos:column="37">(</op:operator><name pos:line="1035" pos:column="38">i</name><op:operator pos:line="1035" pos:column="39">+</op:operator><lit:literal type="number" pos:line="1035" pos:column="40">2</lit:literal><op:operator pos:line="1035" pos:column="41">)</op:operator><op:operator pos:line="1035" pos:column="42">&lt;</op:operator><call><name><name pos:line="1035" pos:column="43">tokens</name><op:operator pos:line="1035" pos:column="49">.</op:operator><name pos:line="1035" pos:column="50">size</name></name><argument_list pos:line="1035" pos:column="54">()</argument_list></call><op:operator pos:line="1035" pos:column="56">)</op:operator> <op:operator pos:line="1035" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="1035" pos:column="61">(</op:operator><name><name pos:line="1035" pos:column="62">tokens</name><index pos:line="1035" pos:column="68">[<expr><name pos:line="1035" pos:column="69">i</name><op:operator pos:line="1035" pos:column="70">+</op:operator><lit:literal type="number" pos:line="1035" pos:column="71">3</lit:literal></expr>]</index></name> <op:operator pos:line="1035" pos:column="74">==</op:operator> <lit:literal type="string" pos:line="1035" pos:column="77">")"</lit:literal><op:operator pos:line="1035" pos:column="80">)</op:operator></expr>)</condition><then pos:line="1035" pos:column="82"> <block pos:line="1035" pos:column="83">{
				<comment type="line" pos:line="1036" pos:column="33">// defined(&lt;int&gt;)</comment>
				<expr_stmt><expr><call><name><name pos:line="1037" pos:column="33">tokens</name><op:operator pos:line="1037" pos:column="39">.</op:operator><name pos:line="1037" pos:column="40">erase</name></name><argument_list pos:line="1037" pos:column="45">(<argument><expr><call><name><name pos:line="1037" pos:column="46">tokens</name><op:operator pos:line="1037" pos:column="52">.</op:operator><name pos:line="1037" pos:column="53">begin</name></name><argument_list pos:line="1037" pos:column="58">()</argument_list></call> <op:operator pos:line="1037" pos:column="61">+</op:operator> <name pos:line="1037" pos:column="63">i</name> <op:operator pos:line="1037" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="1037" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1037" pos:column="70">tokens</name><op:operator pos:line="1037" pos:column="76">.</op:operator><name pos:line="1037" pos:column="77">begin</name></name><argument_list pos:line="1037" pos:column="82">()</argument_list></call> <op:operator pos:line="1037" pos:column="85">+</op:operator> <name pos:line="1037" pos:column="87">i</name> <op:operator pos:line="1037" pos:column="89">+</op:operator> <lit:literal type="number" pos:line="1037" pos:column="91">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1038" pos:column="33">val</name> <op:operator pos:line="1038" pos:column="37">=</op:operator> <lit:literal type="string" pos:line="1038" pos:column="39">"1"</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<expr_stmt><expr><name><name pos:line="1040" pos:column="25">tokens</name><index pos:line="1040" pos:column="31">[<expr><name pos:line="1040" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="1040" pos:column="35">=</op:operator> <name pos:line="1040" pos:column="37">val</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="1041" pos:column="19">else <block pos:line="1041" pos:column="24">{
			<expr_stmt><expr><name pos:line="1042" pos:column="25">i</name><op:operator pos:line="1042" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>

	<comment type="line" pos:line="1046" pos:column="9">// Find bracketed subexpressions and recurse on them</comment>
	<decl_stmt><decl><type><name><name pos:line="1047" pos:column="9">std</name><op:operator pos:line="1047" pos:column="12">::</op:operator><name><name pos:line="1047" pos:column="14">vector</name><argument_list pos:line="1047" pos:column="20">&lt;<argument><expr><name><name pos:line="1047" pos:column="21">std</name><op:operator pos:line="1047" pos:column="24">::</op:operator><name pos:line="1047" pos:column="26">string</name></name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1047" pos:column="33">::</op:operator><name pos:line="1047" pos:column="35">iterator</name></name></type> <name pos:line="1047" pos:column="44">itBracket</name> <init pos:line="1047" pos:column="54">= <expr><call><name><name pos:line="1047" pos:column="56">std</name><op:operator pos:line="1047" pos:column="59">::</op:operator><name pos:line="1047" pos:column="61">find</name></name><argument_list pos:line="1047" pos:column="65">(<argument><expr><call><name><name pos:line="1047" pos:column="66">tokens</name><op:operator pos:line="1047" pos:column="72">.</op:operator><name pos:line="1047" pos:column="73">begin</name></name><argument_list pos:line="1047" pos:column="78">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1047" pos:column="82">tokens</name><op:operator pos:line="1047" pos:column="88">.</op:operator><name pos:line="1047" pos:column="89">end</name></name><argument_list pos:line="1047" pos:column="92">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1047" pos:column="96">"("</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1048" pos:column="9">std</name><op:operator pos:line="1048" pos:column="12">::</op:operator><name><name pos:line="1048" pos:column="14">vector</name><argument_list pos:line="1048" pos:column="20">&lt;<argument><expr><name><name pos:line="1048" pos:column="21">std</name><op:operator pos:line="1048" pos:column="24">::</op:operator><name pos:line="1048" pos:column="26">string</name></name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1048" pos:column="33">::</op:operator><name pos:line="1048" pos:column="35">iterator</name></name></type> <name pos:line="1048" pos:column="44">itEndBracket</name> <init pos:line="1048" pos:column="57">= <expr><call><name><name pos:line="1048" pos:column="59">std</name><op:operator pos:line="1048" pos:column="62">::</op:operator><name pos:line="1048" pos:column="64">find</name></name><argument_list pos:line="1048" pos:column="68">(<argument><expr><call><name><name pos:line="1048" pos:column="69">tokens</name><op:operator pos:line="1048" pos:column="75">.</op:operator><name pos:line="1048" pos:column="76">begin</name></name><argument_list pos:line="1048" pos:column="81">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1048" pos:column="85">tokens</name><op:operator pos:line="1048" pos:column="91">.</op:operator><name pos:line="1048" pos:column="92">end</name></name><argument_list pos:line="1048" pos:column="95">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1048" pos:column="99">")"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="1049" pos:column="9">while <condition pos:line="1049" pos:column="15">(<expr><op:operator pos:line="1049" pos:column="16">(</op:operator><name pos:line="1049" pos:column="17">itBracket</name> <op:operator pos:line="1049" pos:column="27">!=</op:operator> <call><name><name pos:line="1049" pos:column="30">tokens</name><op:operator pos:line="1049" pos:column="36">.</op:operator><name pos:line="1049" pos:column="37">end</name></name><argument_list pos:line="1049" pos:column="40">()</argument_list></call><op:operator pos:line="1049" pos:column="42">)</op:operator> <op:operator pos:line="1049" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="1049" pos:column="47">(</op:operator><name pos:line="1049" pos:column="48">itEndBracket</name> <op:operator pos:line="1049" pos:column="61">!=</op:operator> <call><name><name pos:line="1049" pos:column="64">tokens</name><op:operator pos:line="1049" pos:column="70">.</op:operator><name pos:line="1049" pos:column="71">end</name></name><argument_list pos:line="1049" pos:column="74">()</argument_list></call><op:operator pos:line="1049" pos:column="76">)</op:operator> <op:operator pos:line="1049" pos:column="78">&amp;&amp;</op:operator> <op:operator pos:line="1049" pos:column="81">(</op:operator><name pos:line="1049" pos:column="82">itEndBracket</name> <op:operator pos:line="1049" pos:column="95">&gt;</op:operator> <name pos:line="1049" pos:column="97">itBracket</name><op:operator pos:line="1049" pos:column="106">)</op:operator></expr>)</condition> <block pos:line="1049" pos:column="109">{
		<decl_stmt><decl><type><name><name pos:line="1050" pos:column="17">std</name><op:operator pos:line="1050" pos:column="20">::</op:operator><name><name pos:line="1050" pos:column="22">vector</name><argument_list pos:line="1050" pos:column="28">&lt;<argument><expr><name><name pos:line="1050" pos:column="29">std</name><op:operator pos:line="1050" pos:column="32">::</op:operator><name pos:line="1050" pos:column="34">string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1050" pos:column="42">inBracket</name><argument_list pos:line="1050" pos:column="51">(<argument><expr><name pos:line="1050" pos:column="52">itBracket</name> <op:operator pos:line="1050" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="1050" pos:column="64">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1050" pos:column="67">itEndBracket</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1051" pos:column="17">EvaluateTokens</name><argument_list pos:line="1051" pos:column="31">(<argument><expr><name pos:line="1051" pos:column="32">inBracket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="1053" pos:column="17">// The insertion is done before the removal because there were failures with the opposite approach</comment>
		<expr_stmt><expr><call><name><name pos:line="1054" pos:column="17">tokens</name><op:operator pos:line="1054" pos:column="23">.</op:operator><name pos:line="1054" pos:column="24">insert</name></name><argument_list pos:line="1054" pos:column="30">(<argument><expr><name pos:line="1054" pos:column="31">itBracket</name></expr></argument>, <argument><expr><call><name><name pos:line="1054" pos:column="42">inBracket</name><op:operator pos:line="1054" pos:column="51">.</op:operator><name pos:line="1054" pos:column="52">begin</name></name><argument_list pos:line="1054" pos:column="57">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1054" pos:column="61">inBracket</name><op:operator pos:line="1054" pos:column="70">.</op:operator><name pos:line="1054" pos:column="71">end</name></name><argument_list pos:line="1054" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1055" pos:column="17">itBracket</name> <op:operator pos:line="1055" pos:column="27">=</op:operator> <call><name><name pos:line="1055" pos:column="29">std</name><op:operator pos:line="1055" pos:column="32">::</op:operator><name pos:line="1055" pos:column="34">find</name></name><argument_list pos:line="1055" pos:column="38">(<argument><expr><call><name><name pos:line="1055" pos:column="39">tokens</name><op:operator pos:line="1055" pos:column="45">.</op:operator><name pos:line="1055" pos:column="46">begin</name></name><argument_list pos:line="1055" pos:column="51">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1055" pos:column="55">tokens</name><op:operator pos:line="1055" pos:column="61">.</op:operator><name pos:line="1055" pos:column="62">end</name></name><argument_list pos:line="1055" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1055" pos:column="69">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1056" pos:column="17">itEndBracket</name> <op:operator pos:line="1056" pos:column="30">=</op:operator> <call><name><name pos:line="1056" pos:column="32">std</name><op:operator pos:line="1056" pos:column="35">::</op:operator><name pos:line="1056" pos:column="37">find</name></name><argument_list pos:line="1056" pos:column="41">(<argument><expr><call><name><name pos:line="1056" pos:column="42">tokens</name><op:operator pos:line="1056" pos:column="48">.</op:operator><name pos:line="1056" pos:column="49">begin</name></name><argument_list pos:line="1056" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1056" pos:column="58">tokens</name><op:operator pos:line="1056" pos:column="64">.</op:operator><name pos:line="1056" pos:column="65">end</name></name><argument_list pos:line="1056" pos:column="68">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1056" pos:column="72">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="1057" pos:column="17">tokens</name><op:operator pos:line="1057" pos:column="23">.</op:operator><name pos:line="1057" pos:column="24">erase</name></name><argument_list pos:line="1057" pos:column="29">(<argument><expr><name pos:line="1057" pos:column="30">itBracket</name></expr></argument>, <argument><expr><name pos:line="1057" pos:column="41">itEndBracket</name> <op:operator pos:line="1057" pos:column="54">+</op:operator> <lit:literal type="number" pos:line="1057" pos:column="56">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name pos:line="1059" pos:column="17">itBracket</name> <op:operator pos:line="1059" pos:column="27">=</op:operator> <call><name><name pos:line="1059" pos:column="29">std</name><op:operator pos:line="1059" pos:column="32">::</op:operator><name pos:line="1059" pos:column="34">find</name></name><argument_list pos:line="1059" pos:column="38">(<argument><expr><call><name><name pos:line="1059" pos:column="39">tokens</name><op:operator pos:line="1059" pos:column="45">.</op:operator><name pos:line="1059" pos:column="46">begin</name></name><argument_list pos:line="1059" pos:column="51">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1059" pos:column="55">tokens</name><op:operator pos:line="1059" pos:column="61">.</op:operator><name pos:line="1059" pos:column="62">end</name></name><argument_list pos:line="1059" pos:column="65">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1059" pos:column="69">"("</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1060" pos:column="17">itEndBracket</name> <op:operator pos:line="1060" pos:column="30">=</op:operator> <call><name><name pos:line="1060" pos:column="32">std</name><op:operator pos:line="1060" pos:column="35">::</op:operator><name pos:line="1060" pos:column="37">find</name></name><argument_list pos:line="1060" pos:column="41">(<argument><expr><call><name><name pos:line="1060" pos:column="42">tokens</name><op:operator pos:line="1060" pos:column="48">.</op:operator><name pos:line="1060" pos:column="49">begin</name></name><argument_list pos:line="1060" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1060" pos:column="58">tokens</name><op:operator pos:line="1060" pos:column="64">.</op:operator><name pos:line="1060" pos:column="65">end</name></name><argument_list pos:line="1060" pos:column="68">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1060" pos:column="72">")"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<comment type="line" pos:line="1063" pos:column="9">// Evaluate logical negations</comment>
	<for pos:line="1064" pos:column="9">for (<init><decl><type><name pos:line="1064" pos:column="14">size_t</name></type> <name pos:line="1064" pos:column="21">j</name><init pos:line="1064" pos:column="22">=<expr><lit:literal type="number" pos:line="1064" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="1064" pos:column="26">(</op:operator><name pos:line="1064" pos:column="27">j</name><op:operator pos:line="1064" pos:column="28">+</op:operator><lit:literal type="number" pos:line="1064" pos:column="29">1</lit:literal><op:operator pos:line="1064" pos:column="30">)</op:operator><op:operator pos:line="1064" pos:column="31">&lt;</op:operator><call><name><name pos:line="1064" pos:column="32">tokens</name><op:operator pos:line="1064" pos:column="38">.</op:operator><name pos:line="1064" pos:column="39">size</name></name><argument_list pos:line="1064" pos:column="43">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="1064" pos:column="48">{
		<if pos:line="1065" pos:column="17">if <condition pos:line="1065" pos:column="20">(<expr><call><name><name pos:line="1065" pos:column="21">setNegationOp</name><op:operator pos:line="1065" pos:column="34">.</op:operator><name pos:line="1065" pos:column="35">Contains</name></name><argument_list pos:line="1065" pos:column="43">(<argument><expr><name><name pos:line="1065" pos:column="44">tokens</name><index pos:line="1065" pos:column="50">[<expr><name pos:line="1065" pos:column="51">j</name></expr>]</index><index pos:line="1065" pos:column="53">[<expr><lit:literal type="number" pos:line="1065" pos:column="54">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1065" pos:column="58"> <block pos:line="1065" pos:column="59">{
			<decl_stmt><decl><type><name pos:line="1066" pos:column="25">int</name></type> <name pos:line="1066" pos:column="29">isTrue</name> <init pos:line="1066" pos:column="36">= <expr><call><name pos:line="1066" pos:column="38">atoi</name><argument_list pos:line="1066" pos:column="42">(<argument><expr><name><name pos:line="1066" pos:column="43">tokens</name><index pos:line="1066" pos:column="49">[<expr><name pos:line="1066" pos:column="50">j</name><op:operator pos:line="1066" pos:column="51">+</op:operator><lit:literal type="number" pos:line="1066" pos:column="52">1</lit:literal></expr>]</index></name><op:operator pos:line="1066" pos:column="54">.</op:operator><call><name pos:line="1066" pos:column="55">c_str</name><argument_list pos:line="1066" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1067" pos:column="25">if <condition pos:line="1067" pos:column="28">(<expr><name><name pos:line="1067" pos:column="29">tokens</name><index pos:line="1067" pos:column="35">[<expr><name pos:line="1067" pos:column="36">j</name></expr>]</index></name> <op:operator pos:line="1067" pos:column="39">==</op:operator> <lit:literal type="string" pos:line="1067" pos:column="42">"!"</lit:literal></expr>)</condition><then pos:line="1067" pos:column="46">
				<expr_stmt><expr><name pos:line="1068" pos:column="33">isTrue</name> <op:operator pos:line="1068" pos:column="40">=</op:operator> <op:operator pos:line="1068" pos:column="42">!</op:operator><name pos:line="1068" pos:column="43">isTrue</name></expr>;</expr_stmt></then></if>
			<decl_stmt><decl><type><name><name pos:line="1069" pos:column="25">std</name><op:operator pos:line="1069" pos:column="28">::</op:operator><name><name pos:line="1069" pos:column="30">vector</name><argument_list pos:line="1069" pos:column="36">&lt;<argument><expr><name><name pos:line="1069" pos:column="37">std</name><op:operator pos:line="1069" pos:column="40">::</op:operator><name pos:line="1069" pos:column="42">string</name></name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1069" pos:column="49">::</op:operator><name pos:line="1069" pos:column="51">iterator</name></name></type> <name pos:line="1069" pos:column="60">itInsert</name> <init pos:line="1069" pos:column="69">=
				<expr><call><name><name pos:line="1070" pos:column="33">tokens</name><op:operator pos:line="1070" pos:column="39">.</op:operator><name pos:line="1070" pos:column="40">erase</name></name><argument_list pos:line="1070" pos:column="45">(<argument><expr><call><name><name pos:line="1070" pos:column="46">tokens</name><op:operator pos:line="1070" pos:column="52">.</op:operator><name pos:line="1070" pos:column="53">begin</name></name><argument_list pos:line="1070" pos:column="58">()</argument_list></call> <op:operator pos:line="1070" pos:column="61">+</op:operator> <name pos:line="1070" pos:column="63">j</name></expr></argument>, <argument><expr><call><name><name pos:line="1070" pos:column="66">tokens</name><op:operator pos:line="1070" pos:column="72">.</op:operator><name pos:line="1070" pos:column="73">begin</name></name><argument_list pos:line="1070" pos:column="78">()</argument_list></call> <op:operator pos:line="1070" pos:column="81">+</op:operator> <name pos:line="1070" pos:column="83">j</name> <op:operator pos:line="1070" pos:column="85">+</op:operator> <lit:literal type="number" pos:line="1070" pos:column="87">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="1071" pos:column="25">tokens</name><op:operator pos:line="1071" pos:column="31">.</op:operator><name pos:line="1071" pos:column="32">insert</name></name><argument_list pos:line="1071" pos:column="38">(<argument><expr><name pos:line="1071" pos:column="39">itInsert</name></expr></argument>, <argument><expr><name pos:line="1071" pos:column="49">isTrue</name> <op:operator pos:line="1071" pos:column="56">?</op:operator> <lit:literal type="string" pos:line="1071" pos:column="58">"1"</lit:literal> <op:operator pos:line="1071" pos:column="62">:</op:operator> <lit:literal type="string" pos:line="1071" pos:column="64">"0"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1072" pos:column="19">else <block pos:line="1072" pos:column="24">{
			<expr_stmt><expr><name pos:line="1073" pos:column="25">j</name><op:operator pos:line="1073" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>

	<comment type="line" pos:line="1077" pos:column="9">// Evaluate expressions in precedence order</comment>
	<enum pos:line="1078" pos:column="9">enum <name pos:line="1078" pos:column="14">precedence</name> <block pos:line="1078" pos:column="25">{ <decl><name pos:line="1078" pos:column="27">precArithmetic</name></decl><op:operator pos:line="1078" pos:column="41">,</op:operator> <decl><name pos:line="1078" pos:column="43">precRelative</name></decl><op:operator pos:line="1078" pos:column="55">,</op:operator> <decl><name pos:line="1078" pos:column="57">precLogical</name></decl> }</block>;</enum>
	<for pos:line="1079" pos:column="9">for (<init><decl><type><name pos:line="1079" pos:column="14">int</name></type> <name pos:line="1079" pos:column="18">prec</name><init pos:line="1079" pos:column="22">=<expr><name pos:line="1079" pos:column="23">precArithmetic</name></expr></init></decl>;</init> <condition><expr><name pos:line="1079" pos:column="39">prec</name> <op:operator pos:line="1079" pos:column="44">&lt;=</op:operator> <name pos:line="1079" pos:column="47">precLogical</name></expr>;</condition> <incr><expr><name pos:line="1079" pos:column="60">prec</name><op:operator pos:line="1079" pos:column="64">++</op:operator></expr></incr>) <block pos:line="1079" pos:column="68">{
		<comment type="line" pos:line="1080" pos:column="17">// Looking at 3 tokens at a time so end at 2 before end</comment>
		<for pos:line="1081" pos:column="17">for (<init><decl><type><name pos:line="1081" pos:column="22">size_t</name></type> <name pos:line="1081" pos:column="29">k</name><init pos:line="1081" pos:column="30">=<expr><lit:literal type="number" pos:line="1081" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="1081" pos:column="34">(</op:operator><name pos:line="1081" pos:column="35">k</name><op:operator pos:line="1081" pos:column="36">+</op:operator><lit:literal type="number" pos:line="1081" pos:column="37">2</lit:literal><op:operator pos:line="1081" pos:column="38">)</op:operator><op:operator pos:line="1081" pos:column="39">&lt;</op:operator><call><name><name pos:line="1081" pos:column="40">tokens</name><op:operator pos:line="1081" pos:column="46">.</op:operator><name pos:line="1081" pos:column="47">size</name></name><argument_list pos:line="1081" pos:column="51">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="1081" pos:column="56">{
			<decl_stmt><decl><type><name pos:line="1082" pos:column="25">char</name></type> <name pos:line="1082" pos:column="30">chOp</name> <init pos:line="1082" pos:column="35">= <expr><name><name pos:line="1082" pos:column="37">tokens</name><index pos:line="1082" pos:column="43">[<expr><name pos:line="1082" pos:column="44">k</name><op:operator pos:line="1082" pos:column="45">+</op:operator><lit:literal type="number" pos:line="1082" pos:column="46">1</lit:literal></expr>]</index><index pos:line="1082" pos:column="48">[<expr><lit:literal type="number" pos:line="1082" pos:column="49">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if pos:line="1083" pos:column="25">if <condition pos:line="1083" pos:column="28">(
				<expr><op:operator pos:line="1084" pos:column="33">(</op:operator><op:operator pos:line="1084" pos:column="34">(</op:operator><name pos:line="1084" pos:column="35">prec</name><op:operator pos:line="1084" pos:column="39">==</op:operator><name pos:line="1084" pos:column="41">precArithmetic</name><op:operator pos:line="1084" pos:column="55">)</op:operator> <op:operator pos:line="1084" pos:column="57">&amp;&amp;</op:operator> <call><name><name pos:line="1084" pos:column="60">setArithmethicOp</name><op:operator pos:line="1084" pos:column="76">.</op:operator><name pos:line="1084" pos:column="77">Contains</name></name><argument_list pos:line="1084" pos:column="85">(<argument><expr><name pos:line="1084" pos:column="86">chOp</name></expr></argument>)</argument_list></call><op:operator pos:line="1084" pos:column="91">)</op:operator> <op:operator pos:line="1084" pos:column="93">||</op:operator>
				<op:operator pos:line="1085" pos:column="33">(</op:operator><op:operator pos:line="1085" pos:column="34">(</op:operator><name pos:line="1085" pos:column="35">prec</name><op:operator pos:line="1085" pos:column="39">==</op:operator><name pos:line="1085" pos:column="41">precRelative</name><op:operator pos:line="1085" pos:column="53">)</op:operator> <op:operator pos:line="1085" pos:column="55">&amp;&amp;</op:operator> <call><name><name pos:line="1085" pos:column="58">setRelOp</name><op:operator pos:line="1085" pos:column="66">.</op:operator><name pos:line="1085" pos:column="67">Contains</name></name><argument_list pos:line="1085" pos:column="75">(<argument><expr><name pos:line="1085" pos:column="76">chOp</name></expr></argument>)</argument_list></call><op:operator pos:line="1085" pos:column="81">)</op:operator> <op:operator pos:line="1085" pos:column="83">||</op:operator>
				<op:operator pos:line="1086" pos:column="33">(</op:operator><op:operator pos:line="1086" pos:column="34">(</op:operator><name pos:line="1086" pos:column="35">prec</name><op:operator pos:line="1086" pos:column="39">==</op:operator><name pos:line="1086" pos:column="41">precLogical</name><op:operator pos:line="1086" pos:column="52">)</op:operator> <op:operator pos:line="1086" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="1086" pos:column="57">setLogicalOp</name><op:operator pos:line="1086" pos:column="69">.</op:operator><name pos:line="1086" pos:column="70">Contains</name></name><argument_list pos:line="1086" pos:column="78">(<argument><expr><name pos:line="1086" pos:column="79">chOp</name></expr></argument>)</argument_list></call><op:operator pos:line="1086" pos:column="84">)</op:operator></expr>
				)</condition><then pos:line="1087" pos:column="34"> <block pos:line="1087" pos:column="35">{
				<decl_stmt><decl><type><name pos:line="1088" pos:column="33">int</name></type> <name pos:line="1088" pos:column="37">valA</name> <init pos:line="1088" pos:column="42">= <expr><call><name pos:line="1088" pos:column="44">atoi</name><argument_list pos:line="1088" pos:column="48">(<argument><expr><name><name pos:line="1088" pos:column="49">tokens</name><index pos:line="1088" pos:column="55">[<expr><name pos:line="1088" pos:column="56">k</name></expr>]</index></name><op:operator pos:line="1088" pos:column="58">.</op:operator><call><name pos:line="1088" pos:column="59">c_str</name><argument_list pos:line="1088" pos:column="64">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1089" pos:column="33">int</name></type> <name pos:line="1089" pos:column="37">valB</name> <init pos:line="1089" pos:column="42">= <expr><call><name pos:line="1089" pos:column="44">atoi</name><argument_list pos:line="1089" pos:column="48">(<argument><expr><name><name pos:line="1089" pos:column="49">tokens</name><index pos:line="1089" pos:column="55">[<expr><name pos:line="1089" pos:column="56">k</name><op:operator pos:line="1089" pos:column="57">+</op:operator><lit:literal type="number" pos:line="1089" pos:column="58">2</lit:literal></expr>]</index></name><op:operator pos:line="1089" pos:column="60">.</op:operator><call><name pos:line="1089" pos:column="61">c_str</name><argument_list pos:line="1089" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1090" pos:column="33">int</name></type> <name pos:line="1090" pos:column="37">result</name> <init pos:line="1090" pos:column="44">= <expr><lit:literal type="number" pos:line="1090" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="1091" pos:column="33">if <condition pos:line="1091" pos:column="36">(<expr><name><name pos:line="1091" pos:column="37">tokens</name><index pos:line="1091" pos:column="43">[<expr><name pos:line="1091" pos:column="44">k</name><op:operator pos:line="1091" pos:column="45">+</op:operator><lit:literal type="number" pos:line="1091" pos:column="46">1</lit:literal></expr>]</index></name> <op:operator pos:line="1091" pos:column="49">==</op:operator> <lit:literal type="string" pos:line="1091" pos:column="52">"+"</lit:literal></expr>)</condition><then pos:line="1091" pos:column="56">
					<expr_stmt><expr><name pos:line="1092" pos:column="41">result</name> <op:operator pos:line="1092" pos:column="48">=</op:operator> <name pos:line="1092" pos:column="50">valA</name> <op:operator pos:line="1092" pos:column="55">+</op:operator> <name pos:line="1092" pos:column="57">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1093" pos:column="33">else <if pos:line="1093" pos:column="38">if <condition pos:line="1093" pos:column="41">(<expr><name><name pos:line="1093" pos:column="42">tokens</name><index pos:line="1093" pos:column="48">[<expr><name pos:line="1093" pos:column="49">k</name><op:operator pos:line="1093" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1093" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1093" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1093" pos:column="57">"-"</lit:literal></expr>)</condition><then pos:line="1093" pos:column="61">
					<expr_stmt><expr><name pos:line="1094" pos:column="41">result</name> <op:operator pos:line="1094" pos:column="48">=</op:operator> <name pos:line="1094" pos:column="50">valA</name> <op:operator pos:line="1094" pos:column="55">-</op:operator> <name pos:line="1094" pos:column="57">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1095" pos:column="33">else <if pos:line="1095" pos:column="38">if <condition pos:line="1095" pos:column="41">(<expr><name><name pos:line="1095" pos:column="42">tokens</name><index pos:line="1095" pos:column="48">[<expr><name pos:line="1095" pos:column="49">k</name><op:operator pos:line="1095" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1095" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1095" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1095" pos:column="57">"*"</lit:literal></expr>)</condition><then pos:line="1095" pos:column="61">
					<expr_stmt><expr><name pos:line="1096" pos:column="41">result</name> <op:operator pos:line="1096" pos:column="48">=</op:operator> <name pos:line="1096" pos:column="50">valA</name> <op:operator pos:line="1096" pos:column="55">*</op:operator> <name pos:line="1096" pos:column="57">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1097" pos:column="33">else <if pos:line="1097" pos:column="38">if <condition pos:line="1097" pos:column="41">(<expr><name><name pos:line="1097" pos:column="42">tokens</name><index pos:line="1097" pos:column="48">[<expr><name pos:line="1097" pos:column="49">k</name><op:operator pos:line="1097" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1097" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1097" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1097" pos:column="57">"/"</lit:literal></expr>)</condition><then pos:line="1097" pos:column="61">
					<expr_stmt><expr><name pos:line="1098" pos:column="41">result</name> <op:operator pos:line="1098" pos:column="48">=</op:operator> <name pos:line="1098" pos:column="50">valA</name> <op:operator pos:line="1098" pos:column="55">/</op:operator> <op:operator pos:line="1098" pos:column="57">(</op:operator><name pos:line="1098" pos:column="58">valB</name> <op:operator pos:line="1098" pos:column="63">?</op:operator> <name pos:line="1098" pos:column="65">valB</name> <op:operator pos:line="1098" pos:column="70">:</op:operator> <lit:literal type="number" pos:line="1098" pos:column="72">1</lit:literal><op:operator pos:line="1098" pos:column="73">)</op:operator></expr>;</expr_stmt></then>
				<else pos:line="1099" pos:column="33">else <if pos:line="1099" pos:column="38">if <condition pos:line="1099" pos:column="41">(<expr><name><name pos:line="1099" pos:column="42">tokens</name><index pos:line="1099" pos:column="48">[<expr><name pos:line="1099" pos:column="49">k</name><op:operator pos:line="1099" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1099" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1099" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1099" pos:column="57">"%"</lit:literal></expr>)</condition><then pos:line="1099" pos:column="61">
					<expr_stmt><expr><name pos:line="1100" pos:column="41">result</name> <op:operator pos:line="1100" pos:column="48">=</op:operator> <name pos:line="1100" pos:column="50">valA</name> <op:operator pos:line="1100" pos:column="55">%</op:operator> <op:operator pos:line="1100" pos:column="57">(</op:operator><name pos:line="1100" pos:column="58">valB</name> <op:operator pos:line="1100" pos:column="63">?</op:operator> <name pos:line="1100" pos:column="65">valB</name> <op:operator pos:line="1100" pos:column="70">:</op:operator> <lit:literal type="number" pos:line="1100" pos:column="72">1</lit:literal><op:operator pos:line="1100" pos:column="73">)</op:operator></expr>;</expr_stmt></then>
				<else pos:line="1101" pos:column="33">else <if pos:line="1101" pos:column="38">if <condition pos:line="1101" pos:column="41">(<expr><name><name pos:line="1101" pos:column="42">tokens</name><index pos:line="1101" pos:column="48">[<expr><name pos:line="1101" pos:column="49">k</name><op:operator pos:line="1101" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1101" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1101" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1101" pos:column="57">"&lt;"</lit:literal></expr>)</condition><then pos:line="1101" pos:column="61">
					<expr_stmt><expr><name pos:line="1102" pos:column="41">result</name> <op:operator pos:line="1102" pos:column="48">=</op:operator> <name pos:line="1102" pos:column="50">valA</name> <op:operator pos:line="1102" pos:column="55">&lt;</op:operator> <name pos:line="1102" pos:column="57">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1103" pos:column="33">else <if pos:line="1103" pos:column="38">if <condition pos:line="1103" pos:column="41">(<expr><name><name pos:line="1103" pos:column="42">tokens</name><index pos:line="1103" pos:column="48">[<expr><name pos:line="1103" pos:column="49">k</name><op:operator pos:line="1103" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1103" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1103" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1103" pos:column="57">"&lt;="</lit:literal></expr>)</condition><then pos:line="1103" pos:column="62">
					<expr_stmt><expr><name pos:line="1104" pos:column="41">result</name> <op:operator pos:line="1104" pos:column="48">=</op:operator> <name pos:line="1104" pos:column="50">valA</name> <op:operator pos:line="1104" pos:column="55">&lt;=</op:operator> <name pos:line="1104" pos:column="58">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1105" pos:column="33">else <if pos:line="1105" pos:column="38">if <condition pos:line="1105" pos:column="41">(<expr><name><name pos:line="1105" pos:column="42">tokens</name><index pos:line="1105" pos:column="48">[<expr><name pos:line="1105" pos:column="49">k</name><op:operator pos:line="1105" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1105" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1105" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1105" pos:column="57">"&gt;"</lit:literal></expr>)</condition><then pos:line="1105" pos:column="61">
					<expr_stmt><expr><name pos:line="1106" pos:column="41">result</name> <op:operator pos:line="1106" pos:column="48">=</op:operator> <name pos:line="1106" pos:column="50">valA</name> <op:operator pos:line="1106" pos:column="55">&gt;</op:operator> <name pos:line="1106" pos:column="57">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1107" pos:column="33">else <if pos:line="1107" pos:column="38">if <condition pos:line="1107" pos:column="41">(<expr><name><name pos:line="1107" pos:column="42">tokens</name><index pos:line="1107" pos:column="48">[<expr><name pos:line="1107" pos:column="49">k</name><op:operator pos:line="1107" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1107" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1107" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1107" pos:column="57">"&gt;="</lit:literal></expr>)</condition><then pos:line="1107" pos:column="62">
					<expr_stmt><expr><name pos:line="1108" pos:column="41">result</name> <op:operator pos:line="1108" pos:column="48">=</op:operator> <name pos:line="1108" pos:column="50">valA</name> <op:operator pos:line="1108" pos:column="55">&gt;=</op:operator> <name pos:line="1108" pos:column="58">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1109" pos:column="33">else <if pos:line="1109" pos:column="38">if <condition pos:line="1109" pos:column="41">(<expr><name><name pos:line="1109" pos:column="42">tokens</name><index pos:line="1109" pos:column="48">[<expr><name pos:line="1109" pos:column="49">k</name><op:operator pos:line="1109" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1109" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1109" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1109" pos:column="57">"=="</lit:literal></expr>)</condition><then pos:line="1109" pos:column="62">
					<expr_stmt><expr><name pos:line="1110" pos:column="41">result</name> <op:operator pos:line="1110" pos:column="48">=</op:operator> <name pos:line="1110" pos:column="50">valA</name> <op:operator pos:line="1110" pos:column="55">==</op:operator> <name pos:line="1110" pos:column="58">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1111" pos:column="33">else <if pos:line="1111" pos:column="38">if <condition pos:line="1111" pos:column="41">(<expr><name><name pos:line="1111" pos:column="42">tokens</name><index pos:line="1111" pos:column="48">[<expr><name pos:line="1111" pos:column="49">k</name><op:operator pos:line="1111" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1111" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1111" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1111" pos:column="57">"!="</lit:literal></expr>)</condition><then pos:line="1111" pos:column="62">
					<expr_stmt><expr><name pos:line="1112" pos:column="41">result</name> <op:operator pos:line="1112" pos:column="48">=</op:operator> <name pos:line="1112" pos:column="50">valA</name> <op:operator pos:line="1112" pos:column="55">!=</op:operator> <name pos:line="1112" pos:column="58">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1113" pos:column="33">else <if pos:line="1113" pos:column="38">if <condition pos:line="1113" pos:column="41">(<expr><name><name pos:line="1113" pos:column="42">tokens</name><index pos:line="1113" pos:column="48">[<expr><name pos:line="1113" pos:column="49">k</name><op:operator pos:line="1113" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1113" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1113" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1113" pos:column="57">"||"</lit:literal></expr>)</condition><then pos:line="1113" pos:column="62">
					<expr_stmt><expr><name pos:line="1114" pos:column="41">result</name> <op:operator pos:line="1114" pos:column="48">=</op:operator> <name pos:line="1114" pos:column="50">valA</name> <op:operator pos:line="1114" pos:column="55">||</op:operator> <name pos:line="1114" pos:column="58">valB</name></expr>;</expr_stmt></then>
				<else pos:line="1115" pos:column="33">else <if pos:line="1115" pos:column="38">if <condition pos:line="1115" pos:column="41">(<expr><name><name pos:line="1115" pos:column="42">tokens</name><index pos:line="1115" pos:column="48">[<expr><name pos:line="1115" pos:column="49">k</name><op:operator pos:line="1115" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1115" pos:column="51">1</lit:literal></expr>]</index></name> <op:operator pos:line="1115" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1115" pos:column="57">"&amp;&amp;"</lit:literal></expr>)</condition><then pos:line="1115" pos:column="62">
					<expr_stmt><expr><name pos:line="1116" pos:column="41">result</name> <op:operator pos:line="1116" pos:column="48">=</op:operator> <name pos:line="1116" pos:column="50">valA</name> <op:operator pos:line="1116" pos:column="55">&amp;&amp;</op:operator> <name pos:line="1116" pos:column="58">valB</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<decl_stmt><decl><type><name pos:line="1117" pos:column="33">char</name></type> <name><name pos:line="1117" pos:column="38">sResult</name><index pos:line="1117" pos:column="45">[<expr><lit:literal type="number" pos:line="1117" pos:column="46">30</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="1118" pos:column="33">sprintf</name><argument_list pos:line="1118" pos:column="40">(<argument><expr><name pos:line="1118" pos:column="41">sResult</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1118" pos:column="50">"%d"</lit:literal></expr></argument>, <argument><expr><name pos:line="1118" pos:column="56">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name><name pos:line="1119" pos:column="33">std</name><op:operator pos:line="1119" pos:column="36">::</op:operator><name><name pos:line="1119" pos:column="38">vector</name><argument_list pos:line="1119" pos:column="44">&lt;<argument><expr><name><name pos:line="1119" pos:column="45">std</name><op:operator pos:line="1119" pos:column="48">::</op:operator><name pos:line="1119" pos:column="50">string</name></name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1119" pos:column="57">::</op:operator><name pos:line="1119" pos:column="59">iterator</name></name></type> <name pos:line="1119" pos:column="68">itInsert</name> <init pos:line="1119" pos:column="77">=
					<expr><call><name><name pos:line="1120" pos:column="41">tokens</name><op:operator pos:line="1120" pos:column="47">.</op:operator><name pos:line="1120" pos:column="48">erase</name></name><argument_list pos:line="1120" pos:column="53">(<argument><expr><call><name><name pos:line="1120" pos:column="54">tokens</name><op:operator pos:line="1120" pos:column="60">.</op:operator><name pos:line="1120" pos:column="61">begin</name></name><argument_list pos:line="1120" pos:column="66">()</argument_list></call> <op:operator pos:line="1120" pos:column="69">+</op:operator> <name pos:line="1120" pos:column="71">k</name></expr></argument>, <argument><expr><call><name><name pos:line="1120" pos:column="74">tokens</name><op:operator pos:line="1120" pos:column="80">.</op:operator><name pos:line="1120" pos:column="81">begin</name></name><argument_list pos:line="1120" pos:column="86">()</argument_list></call> <op:operator pos:line="1120" pos:column="89">+</op:operator> <name pos:line="1120" pos:column="91">k</name> <op:operator pos:line="1120" pos:column="93">+</op:operator> <lit:literal type="number" pos:line="1120" pos:column="95">3</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="1121" pos:column="33">tokens</name><op:operator pos:line="1121" pos:column="39">.</op:operator><name pos:line="1121" pos:column="40">insert</name></name><argument_list pos:line="1121" pos:column="46">(<argument><expr><name pos:line="1121" pos:column="47">itInsert</name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="57">sResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1122" pos:column="27">else <block pos:line="1122" pos:column="32">{
				<expr_stmt><expr><name pos:line="1123" pos:column="33">k</name><op:operator pos:line="1123" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
	}</block></for>
}</block></function>

<function><type><name pos:line="1129" pos:column="1">bool</name></type> <name><name pos:line="1129" pos:column="6">LexerCPP</name><op:operator pos:line="1129" pos:column="14">::</op:operator><name pos:line="1129" pos:column="16">EvaluateExpression</name></name><parameter_list pos:line="1129" pos:column="34">(<param><decl><type><specifier pos:line="1129" pos:column="35">const</specifier> <name><name pos:line="1129" pos:column="41">std</name><op:operator pos:line="1129" pos:column="44">::</op:operator><name pos:line="1129" pos:column="46">string</name></name> <type:modifier pos:line="1129" pos:column="53">&amp;</type:modifier></type><name pos:line="1129" pos:column="54">expr</name></decl></param>, <param><decl><type><specifier pos:line="1129" pos:column="60">const</specifier> <name><name pos:line="1129" pos:column="66">std</name><op:operator pos:line="1129" pos:column="69">::</op:operator><name><name pos:line="1129" pos:column="71">map</name><argument_list pos:line="1129" pos:column="74">&lt;<argument><expr><name><name pos:line="1129" pos:column="75">std</name><op:operator pos:line="1129" pos:column="78">::</op:operator><name pos:line="1129" pos:column="80">string</name></name></expr></argument>, <argument><expr><name><name pos:line="1129" pos:column="88">std</name><op:operator pos:line="1129" pos:column="91">::</op:operator><name pos:line="1129" pos:column="93">string</name></name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="1129" pos:column="101">&amp;</type:modifier></type><name pos:line="1129" pos:column="102">preprocessorDefinitions</name></decl></param>)</parameter_list> <block pos:line="1129" pos:column="127">{
	<comment type="line" pos:line="1130" pos:column="9">// Break into tokens, replacing with definitions</comment>
	<decl_stmt><decl><type><name><name pos:line="1131" pos:column="9">std</name><op:operator pos:line="1131" pos:column="12">::</op:operator><name pos:line="1131" pos:column="14">string</name></name></type> <name pos:line="1131" pos:column="21">word</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1132" pos:column="9">std</name><op:operator pos:line="1132" pos:column="12">::</op:operator><name><name pos:line="1132" pos:column="14">vector</name><argument_list pos:line="1132" pos:column="20">&lt;<argument><expr><name><name pos:line="1132" pos:column="21">std</name><op:operator pos:line="1132" pos:column="24">::</op:operator><name pos:line="1132" pos:column="26">string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1132" pos:column="34">tokens</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="1133" pos:column="9">const</specifier> <name pos:line="1133" pos:column="15">char</name> <type:modifier pos:line="1133" pos:column="20">*</type:modifier></type><name pos:line="1133" pos:column="21">cp</name> <init pos:line="1133" pos:column="24">= <expr><call><name><name pos:line="1133" pos:column="26">expr</name><op:operator pos:line="1133" pos:column="30">.</op:operator><name pos:line="1133" pos:column="31">c_str</name></name><argument_list pos:line="1133" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="1134" pos:column="9">for (<init pos:line="1134" pos:column="14">;</init><condition pos:line="1134" pos:column="15">;</condition><incr/>) <block pos:line="1134" pos:column="18">{
		<if pos:line="1135" pos:column="17">if <condition pos:line="1135" pos:column="20">(<expr><call><name><name pos:line="1135" pos:column="21">setWord</name><op:operator pos:line="1135" pos:column="28">.</op:operator><name pos:line="1135" pos:column="29">Contains</name></name><argument_list pos:line="1135" pos:column="37">(<argument><expr><op:operator pos:line="1135" pos:column="38">*</op:operator><name pos:line="1135" pos:column="39">cp</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1135" pos:column="43"> <block pos:line="1135" pos:column="44">{
			<expr_stmt><expr><name pos:line="1136" pos:column="25">word</name> <op:operator pos:line="1136" pos:column="30">+=</op:operator> <op:operator pos:line="1136" pos:column="33">*</op:operator><name pos:line="1136" pos:column="34">cp</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="1137" pos:column="19">else <block pos:line="1137" pos:column="24">{
			<decl_stmt><decl><type><name><name pos:line="1138" pos:column="25">std</name><op:operator pos:line="1138" pos:column="28">::</op:operator><name><name pos:line="1138" pos:column="30">map</name><argument_list pos:line="1138" pos:column="33">&lt;<argument><expr><name><name pos:line="1138" pos:column="34">std</name><op:operator pos:line="1138" pos:column="37">::</op:operator><name pos:line="1138" pos:column="39">string</name></name></expr></argument>, <argument><expr><name><name pos:line="1138" pos:column="47">std</name><op:operator pos:line="1138" pos:column="50">::</op:operator><name pos:line="1138" pos:column="52">string</name></name></expr></argument>&gt;</argument_list></name><op:operator pos:line="1138" pos:column="59">::</op:operator><name pos:line="1138" pos:column="61">const_iterator</name></name></type> <name pos:line="1138" pos:column="76">it</name> <init pos:line="1138" pos:column="79">= <expr><call><name><name pos:line="1138" pos:column="81">preprocessorDefinitions</name><op:operator pos:line="1138" pos:column="104">.</op:operator><name pos:line="1138" pos:column="105">find</name></name><argument_list pos:line="1138" pos:column="109">(<argument><expr><name pos:line="1138" pos:column="110">word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1139" pos:column="25">if <condition pos:line="1139" pos:column="28">(<expr><name pos:line="1139" pos:column="29">it</name> <op:operator pos:line="1139" pos:column="32">!=</op:operator> <call><name><name pos:line="1139" pos:column="35">preprocessorDefinitions</name><op:operator pos:line="1139" pos:column="58">.</op:operator><name pos:line="1139" pos:column="59">end</name></name><argument_list pos:line="1139" pos:column="62">()</argument_list></call></expr>)</condition><then pos:line="1139" pos:column="65"> <block pos:line="1139" pos:column="66">{
				<expr_stmt><expr><call><name><name pos:line="1140" pos:column="33">tokens</name><op:operator pos:line="1140" pos:column="39">.</op:operator><name pos:line="1140" pos:column="40">push_back</name></name><argument_list pos:line="1140" pos:column="49">(<argument><expr><name><name pos:line="1140" pos:column="50">it</name><op:operator pos:line="1140" pos:column="52">-&gt;</op:operator><name pos:line="1140" pos:column="54">second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1141" pos:column="27">else <if pos:line="1141" pos:column="32">if <condition pos:line="1141" pos:column="35">(<expr><op:operator pos:line="1141" pos:column="36">!</op:operator><call><name><name pos:line="1141" pos:column="37">word</name><op:operator pos:line="1141" pos:column="41">.</op:operator><name pos:line="1141" pos:column="42">empty</name></name><argument_list pos:line="1141" pos:column="47">()</argument_list></call> <op:operator pos:line="1141" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="1141" pos:column="53">(</op:operator><op:operator pos:line="1141" pos:column="54">(</op:operator><name><name pos:line="1141" pos:column="55">word</name><index pos:line="1141" pos:column="59">[<expr><lit:literal type="number" pos:line="1141" pos:column="60">0</lit:literal></expr>]</index></name> <op:operator pos:line="1141" pos:column="63">&gt;=</op:operator> <lit:literal type="char" pos:line="1141" pos:column="66">'0'</lit:literal> <op:operator pos:line="1141" pos:column="70">&amp;&amp;</op:operator> <name><name pos:line="1141" pos:column="73">word</name><index pos:line="1141" pos:column="77">[<expr><lit:literal type="number" pos:line="1141" pos:column="78">0</lit:literal></expr>]</index></name> <op:operator pos:line="1141" pos:column="81">&lt;=</op:operator> <lit:literal type="char" pos:line="1141" pos:column="84">'9'</lit:literal><op:operator pos:line="1141" pos:column="87">)</op:operator> <op:operator pos:line="1141" pos:column="89">||</op:operator> <op:operator pos:line="1141" pos:column="92">(</op:operator><name pos:line="1141" pos:column="93">word</name> <op:operator pos:line="1141" pos:column="98">==</op:operator> <lit:literal type="string" pos:line="1141" pos:column="101">"defined"</lit:literal><op:operator pos:line="1141" pos:column="110">)</op:operator><op:operator pos:line="1141" pos:column="111">)</op:operator></expr>)</condition><then pos:line="1141" pos:column="113"> <block pos:line="1141" pos:column="114">{
				<expr_stmt><expr><call><name><name pos:line="1142" pos:column="33">tokens</name><op:operator pos:line="1142" pos:column="39">.</op:operator><name pos:line="1142" pos:column="40">push_back</name></name><argument_list pos:line="1142" pos:column="49">(<argument><expr><name pos:line="1142" pos:column="50">word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<expr_stmt><expr><name pos:line="1144" pos:column="25">word</name> <op:operator pos:line="1144" pos:column="30">=</op:operator> <lit:literal type="string" pos:line="1144" pos:column="32">""</lit:literal></expr>;</expr_stmt>
			<if pos:line="1145" pos:column="25">if <condition pos:line="1145" pos:column="28">(<expr><op:operator pos:line="1145" pos:column="29">!</op:operator><op:operator pos:line="1145" pos:column="30">*</op:operator><name pos:line="1145" pos:column="31">cp</name></expr>)</condition><then pos:line="1145" pos:column="34"> <block pos:line="1145" pos:column="35">{
				<break pos:line="1146" pos:column="33">break;</break>
			}</block></then></if>
			<if pos:line="1148" pos:column="25">if <condition pos:line="1148" pos:column="28">(<expr><op:operator pos:line="1148" pos:column="29">(</op:operator><op:operator pos:line="1148" pos:column="30">*</op:operator><name pos:line="1148" pos:column="31">cp</name> <op:operator pos:line="1148" pos:column="34">!=</op:operator> <lit:literal type="char" pos:line="1148" pos:column="37">' '</lit:literal><op:operator pos:line="1148" pos:column="40">)</op:operator> <op:operator pos:line="1148" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="1148" pos:column="45">(</op:operator><op:operator pos:line="1148" pos:column="46">*</op:operator><name pos:line="1148" pos:column="47">cp</name> <op:operator pos:line="1148" pos:column="50">!=</op:operator> <lit:literal type="char" pos:line="1148" pos:column="53">'\t'</lit:literal><op:operator pos:line="1148" pos:column="57">)</op:operator></expr>)</condition><then pos:line="1148" pos:column="59"> <block pos:line="1148" pos:column="60">{
				<decl_stmt><decl><type><name><name pos:line="1149" pos:column="33">std</name><op:operator pos:line="1149" pos:column="36">::</op:operator><name pos:line="1149" pos:column="38">string</name></name></type> <name pos:line="1149" pos:column="45">op</name><argument_list pos:line="1149" pos:column="47">(<argument><expr><name pos:line="1149" pos:column="48">cp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1149" pos:column="52">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
				<if pos:line="1150" pos:column="33">if <condition pos:line="1150" pos:column="36">(<expr><call><name><name pos:line="1150" pos:column="37">setRelOp</name><op:operator pos:line="1150" pos:column="45">.</op:operator><name pos:line="1150" pos:column="46">Contains</name></name><argument_list pos:line="1150" pos:column="54">(<argument><expr><op:operator pos:line="1150" pos:column="55">*</op:operator><name pos:line="1150" pos:column="56">cp</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1150" pos:column="60"> <block pos:line="1150" pos:column="61">{
					<if pos:line="1151" pos:column="41">if <condition pos:line="1151" pos:column="44">(<expr><call><name><name pos:line="1151" pos:column="45">setRelOp</name><op:operator pos:line="1151" pos:column="53">.</op:operator><name pos:line="1151" pos:column="54">Contains</name></name><argument_list pos:line="1151" pos:column="62">(<argument><expr><name><name pos:line="1151" pos:column="63">cp</name><index pos:line="1151" pos:column="65">[<expr><lit:literal type="number" pos:line="1151" pos:column="66">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1151" pos:column="70"> <block pos:line="1151" pos:column="71">{
						<expr_stmt><expr><name pos:line="1152" pos:column="49">op</name> <op:operator pos:line="1152" pos:column="52">+=</op:operator> <name><name pos:line="1152" pos:column="55">cp</name><index pos:line="1152" pos:column="57">[<expr><lit:literal type="number" pos:line="1152" pos:column="58">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1153" pos:column="49">cp</name><op:operator pos:line="1153" pos:column="51">++</op:operator></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="1155" pos:column="35">else <if pos:line="1155" pos:column="40">if <condition pos:line="1155" pos:column="43">(<expr><call><name><name pos:line="1155" pos:column="44">setLogicalOp</name><op:operator pos:line="1155" pos:column="56">.</op:operator><name pos:line="1155" pos:column="57">Contains</name></name><argument_list pos:line="1155" pos:column="65">(<argument><expr><op:operator pos:line="1155" pos:column="66">*</op:operator><name pos:line="1155" pos:column="67">cp</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1155" pos:column="71"> <block pos:line="1155" pos:column="72">{
					<if pos:line="1156" pos:column="41">if <condition pos:line="1156" pos:column="44">(<expr><call><name><name pos:line="1156" pos:column="45">setLogicalOp</name><op:operator pos:line="1156" pos:column="57">.</op:operator><name pos:line="1156" pos:column="58">Contains</name></name><argument_list pos:line="1156" pos:column="66">(<argument><expr><name><name pos:line="1156" pos:column="67">cp</name><index pos:line="1156" pos:column="69">[<expr><lit:literal type="number" pos:line="1156" pos:column="70">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1156" pos:column="74"> <block pos:line="1156" pos:column="75">{
						<expr_stmt><expr><name pos:line="1157" pos:column="49">op</name> <op:operator pos:line="1157" pos:column="52">+=</op:operator> <name><name pos:line="1157" pos:column="55">cp</name><index pos:line="1157" pos:column="57">[<expr><lit:literal type="number" pos:line="1157" pos:column="58">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1158" pos:column="49">cp</name><op:operator pos:line="1158" pos:column="51">++</op:operator></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="1161" pos:column="33">tokens</name><op:operator pos:line="1161" pos:column="39">.</op:operator><name pos:line="1161" pos:column="40">push_back</name></name><argument_list pos:line="1161" pos:column="49">(<argument><expr><name pos:line="1161" pos:column="50">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
		<expr_stmt><expr><name pos:line="1164" pos:column="17">cp</name><op:operator pos:line="1164" pos:column="19">++</op:operator></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name pos:line="1167" pos:column="9">EvaluateTokens</name><argument_list pos:line="1167" pos:column="23">(<argument><expr><name pos:line="1167" pos:column="24">tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="1169" pos:column="9">// "0" or "" -&gt; false else true</comment>
	<decl_stmt><decl><type><name pos:line="1170" pos:column="9">bool</name></type> <name pos:line="1170" pos:column="14">isFalse</name> <init pos:line="1170" pos:column="22">= <expr><call><name><name pos:line="1170" pos:column="24">tokens</name><op:operator pos:line="1170" pos:column="30">.</op:operator><name pos:line="1170" pos:column="31">empty</name></name><argument_list pos:line="1170" pos:column="36">()</argument_list></call> <op:operator pos:line="1170" pos:column="39">||</op:operator>
		<op:operator pos:line="1171" pos:column="17">(</op:operator><op:operator pos:line="1171" pos:column="18">(</op:operator><call><name><name pos:line="1171" pos:column="19">tokens</name><op:operator pos:line="1171" pos:column="25">.</op:operator><name pos:line="1171" pos:column="26">size</name></name><argument_list pos:line="1171" pos:column="30">()</argument_list></call> <op:operator pos:line="1171" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="1171" pos:column="36">1</lit:literal><op:operator pos:line="1171" pos:column="37">)</op:operator> <op:operator pos:line="1171" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="1171" pos:column="42">(</op:operator><op:operator pos:line="1171" pos:column="43">(</op:operator><name><name pos:line="1171" pos:column="44">tokens</name><index pos:line="1171" pos:column="50">[<expr><lit:literal type="number" pos:line="1171" pos:column="51">0</lit:literal></expr>]</index></name> <op:operator pos:line="1171" pos:column="54">==</op:operator> <lit:literal type="string" pos:line="1171" pos:column="57">""</lit:literal><op:operator pos:line="1171" pos:column="59">)</op:operator> <op:operator pos:line="1171" pos:column="61">||</op:operator> <name><name pos:line="1171" pos:column="64">tokens</name><index pos:line="1171" pos:column="70">[<expr><lit:literal type="number" pos:line="1171" pos:column="71">0</lit:literal></expr>]</index></name> <op:operator pos:line="1171" pos:column="74">==</op:operator> <lit:literal type="string" pos:line="1171" pos:column="77">"0"</lit:literal><op:operator pos:line="1171" pos:column="80">)</op:operator><op:operator pos:line="1171" pos:column="81">)</op:operator></expr></init></decl>;</decl_stmt>
	<return pos:line="1172" pos:column="9">return <expr><op:operator pos:line="1172" pos:column="16">!</op:operator><name pos:line="1172" pos:column="17">isFalse</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name pos:line="1175" pos:column="1">LexerModule</name></type> <name pos:line="1175" pos:column="13">lmCPP</name><argument_list pos:line="1175" pos:column="18">(<argument><expr><name pos:line="1175" pos:column="19">SCLEX_CPP</name></expr></argument>, <argument><expr><name><name pos:line="1175" pos:column="30">LexerCPP</name><op:operator pos:line="1175" pos:column="38">::</op:operator><name pos:line="1175" pos:column="40">LexerFactoryCPP</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1175" pos:column="57">"cpp"</lit:literal></expr></argument>, <argument><expr><name pos:line="1175" pos:column="64">cppWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="1176" pos:column="1">LexerModule</name></type> <name pos:line="1176" pos:column="13">lmCPPNoCase</name><argument_list pos:line="1176" pos:column="24">(<argument><expr><name pos:line="1176" pos:column="25">SCLEX_CPPNOCASE</name></expr></argument>, <argument><expr><name><name pos:line="1176" pos:column="42">LexerCPP</name><op:operator pos:line="1176" pos:column="50">::</op:operator><name pos:line="1176" pos:column="52">LexerFactoryCPPInsensitive</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1176" pos:column="80">"cppnocase"</lit:literal></expr></argument>, <argument><expr><name pos:line="1176" pos:column="93">cppWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
