<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\AutoComplete.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file AutoComplete.cxx
 ** Defines the auto completion list box.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"AutoComplete.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef</cpp:directive> <name pos:line="18" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="19" pos:column="1">using namespace <name pos:line="19" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="22" pos:column="1">AutoComplete</name><op:operator pos:line="22" pos:column="13">::</op:operator><name pos:line="22" pos:column="15">AutoComplete</name></name><parameter_list pos:line="22" pos:column="27">()</parameter_list> <member_list pos:line="22" pos:column="30">:
	<call><name pos:line="23" pos:column="9">active</name><argument_list pos:line="23" pos:column="15">(<argument><expr><lit:literal type="boolean" pos:line="23" pos:column="16">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="23" pos:column="22">,</op:operator>
	<call><name pos:line="24" pos:column="9">separator</name><argument_list pos:line="24" pos:column="18">(<argument><expr><lit:literal type="char" pos:line="24" pos:column="19">' '</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="24" pos:column="23">,</op:operator>
	<call><name pos:line="25" pos:column="9">typesep</name><argument_list pos:line="25" pos:column="16">(<argument><expr><lit:literal type="char" pos:line="25" pos:column="17">'?'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="21">,</op:operator>
	<call><name pos:line="26" pos:column="9">ignoreCase</name><argument_list pos:line="26" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="26" pos:column="20">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="26" pos:column="26">,</op:operator>
	<call><name pos:line="27" pos:column="9">chooseSingle</name><argument_list pos:line="27" pos:column="21">(<argument><expr><lit:literal type="boolean" pos:line="27" pos:column="22">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="27" pos:column="28">,</op:operator>
	<call><name pos:line="28" pos:column="9">lb</name><argument_list pos:line="28" pos:column="11">(<argument><expr><lit:literal type="number" pos:line="28" pos:column="12">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="28" pos:column="14">,</op:operator>
	<call><name pos:line="29" pos:column="9">posStart</name><argument_list pos:line="29" pos:column="17">(<argument><expr><lit:literal type="number" pos:line="29" pos:column="18">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="29" pos:column="20">,</op:operator>
	<call><name pos:line="30" pos:column="9">startLen</name><argument_list pos:line="30" pos:column="17">(<argument><expr><lit:literal type="number" pos:line="30" pos:column="18">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="30" pos:column="20">,</op:operator>
	<call><name pos:line="31" pos:column="9">cancelAtStartPos</name><argument_list pos:line="31" pos:column="25">(<argument><expr><lit:literal type="boolean" pos:line="31" pos:column="26">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="31" pos:column="31">,</op:operator>
	<call><name pos:line="32" pos:column="9">autoHide</name><argument_list pos:line="32" pos:column="17">(<argument><expr><lit:literal type="boolean" pos:line="32" pos:column="18">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="32" pos:column="23">,</op:operator>
	<call><name pos:line="33" pos:column="9">dropRestOfWord</name><argument_list pos:line="33" pos:column="23">(<argument><expr><lit:literal type="boolean" pos:line="33" pos:column="24">false</lit:literal></expr></argument>)</argument_list></call>	</member_list><block pos:line="33" pos:column="33">{
	<expr_stmt><expr><name pos:line="34" pos:column="9">lb</name> <op:operator pos:line="34" pos:column="12">=</op:operator> <call><name><name pos:line="34" pos:column="14">ListBox</name><op:operator pos:line="34" pos:column="21">::</op:operator><name pos:line="34" pos:column="23">Allocate</name></name><argument_list pos:line="34" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="35" pos:column="9">stopChars</name><index pos:line="35" pos:column="18">[<expr><lit:literal type="number" pos:line="35" pos:column="19">0</lit:literal></expr>]</index></name> <op:operator pos:line="35" pos:column="22">=</op:operator> <lit:literal type="char" pos:line="35" pos:column="24">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="36" pos:column="9">fillUpChars</name><index pos:line="36" pos:column="20">[<expr><lit:literal type="number" pos:line="36" pos:column="21">0</lit:literal></expr>]</index></name> <op:operator pos:line="36" pos:column="24">=</op:operator> <lit:literal type="char" pos:line="36" pos:column="26">'\0'</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="39" pos:column="1">AutoComplete</name><op:operator pos:line="39" pos:column="13">::</op:operator>~<name pos:line="39" pos:column="16">AutoComplete</name></name><parameter_list pos:line="39" pos:column="28">()</parameter_list> <block pos:line="39" pos:column="31">{
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">lb</name></expr>)</condition><then pos:line="40" pos:column="16"> <block pos:line="40" pos:column="17">{
		<expr_stmt><expr><call><name><name pos:line="41" pos:column="17">lb</name><op:operator pos:line="41" pos:column="19">-&gt;</op:operator><name pos:line="41" pos:column="21">Destroy</name></name><argument_list pos:line="41" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="42" pos:column="17">delete</op:operator> <name pos:line="42" pos:column="24">lb</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="43" pos:column="17">lb</name> <op:operator pos:line="43" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="43" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></destructor>

<function><type><name pos:line="47" pos:column="1">bool</name></type> <name><name pos:line="47" pos:column="6">AutoComplete</name><op:operator pos:line="47" pos:column="18">::</op:operator><name pos:line="47" pos:column="20">Active</name></name><parameter_list pos:line="47" pos:column="26">()</parameter_list> <specifier pos:line="47" pos:column="29">const</specifier> <block pos:line="47" pos:column="35">{
	<return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">active</name></expr>;</return>
}</block></function>

<function><type><name pos:line="51" pos:column="1">void</name></type> <name><name pos:line="51" pos:column="6">AutoComplete</name><op:operator pos:line="51" pos:column="18">::</op:operator><name pos:line="51" pos:column="20">Start</name></name><parameter_list pos:line="51" pos:column="25">(<param><decl><type><name pos:line="51" pos:column="26">Window</name> <type:modifier pos:line="51" pos:column="33">&amp;</type:modifier></type><name pos:line="51" pos:column="34">parent</name></decl></param>, <param><decl><type><name pos:line="51" pos:column="42">int</name></type> <name pos:line="51" pos:column="46">ctrlID</name></decl></param>,
	<param><decl><type><name pos:line="52" pos:column="9">int</name></type> <name pos:line="52" pos:column="13">position</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="23">Point</name></type> <name pos:line="52" pos:column="29">location</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="39">int</name></type> <name pos:line="52" pos:column="43">startLen_</name></decl></param>,
	<param><decl><type><name pos:line="53" pos:column="9">int</name></type> <name pos:line="53" pos:column="13">lineHeight</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="25">bool</name></type> <name pos:line="53" pos:column="30">unicodeMode</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="43">{
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">active</name></expr>)</condition><then pos:line="54" pos:column="20"> <block pos:line="54" pos:column="21">{
		<expr_stmt><expr><call><name pos:line="55" pos:column="17">Cancel</name><argument_list pos:line="55" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="57" pos:column="9">lb</name><op:operator pos:line="57" pos:column="11">-&gt;</op:operator><name pos:line="57" pos:column="13">Create</name></name><argument_list pos:line="57" pos:column="19">(<argument><expr><name pos:line="57" pos:column="20">parent</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="28">ctrlID</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="36">location</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="46">lineHeight</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="58">unicodeMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="58" pos:column="9">lb</name><op:operator pos:line="58" pos:column="11">-&gt;</op:operator><name pos:line="58" pos:column="13">Clear</name></name><argument_list pos:line="58" pos:column="18">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="59" pos:column="9">active</name> <op:operator pos:line="59" pos:column="16">=</op:operator> <lit:literal type="boolean" pos:line="59" pos:column="18">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="60" pos:column="9">startLen</name> <op:operator pos:line="60" pos:column="18">=</op:operator> <name pos:line="60" pos:column="20">startLen_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="61" pos:column="9">posStart</name> <op:operator pos:line="61" pos:column="18">=</op:operator> <name pos:line="61" pos:column="20">position</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="64" pos:column="1">void</name></type> <name><name pos:line="64" pos:column="6">AutoComplete</name><op:operator pos:line="64" pos:column="18">::</op:operator><name pos:line="64" pos:column="20">SetStopChars</name></name><parameter_list pos:line="64" pos:column="32">(<param><decl><type><specifier pos:line="64" pos:column="33">const</specifier> <name pos:line="64" pos:column="39">char</name> <type:modifier pos:line="64" pos:column="44">*</type:modifier></type><name pos:line="64" pos:column="45">stopChars_</name></decl></param>)</parameter_list> <block pos:line="64" pos:column="57">{
	<expr_stmt><expr><call><name pos:line="65" pos:column="9">strncpy</name><argument_list pos:line="65" pos:column="16">(<argument><expr><name pos:line="65" pos:column="17">stopChars</name></expr></argument>, <argument><expr><name pos:line="65" pos:column="28">stopChars_</name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="40">sizeof<argument_list pos:line="65" pos:column="46">(<argument><expr><name pos:line="65" pos:column="47">stopChars</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="66" pos:column="9">stopChars</name><index pos:line="66" pos:column="18">[<expr><sizeof pos:line="66" pos:column="19">sizeof<argument_list pos:line="66" pos:column="25">(<argument><expr><name pos:line="66" pos:column="26">stopChars</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="66" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="66" pos:column="39">1</lit:literal></expr>]</index></name> <op:operator pos:line="66" pos:column="42">=</op:operator> <lit:literal type="char" pos:line="66" pos:column="44">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="69" pos:column="1">bool</name></type> <name><name pos:line="69" pos:column="6">AutoComplete</name><op:operator pos:line="69" pos:column="18">::</op:operator><name pos:line="69" pos:column="20">IsStopChar</name></name><parameter_list pos:line="69" pos:column="30">(<param><decl><type><name pos:line="69" pos:column="31">char</name></type> <name pos:line="69" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="40">{
	<return pos:line="70" pos:column="9">return <expr><name pos:line="70" pos:column="16">ch</name> <op:operator pos:line="70" pos:column="19">&amp;&amp;</op:operator> <call><name pos:line="70" pos:column="22">strchr</name><argument_list pos:line="70" pos:column="28">(<argument><expr><name pos:line="70" pos:column="29">stopChars</name></expr></argument>, <argument><expr><name pos:line="70" pos:column="40">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="73" pos:column="1">void</name></type> <name><name pos:line="73" pos:column="6">AutoComplete</name><op:operator pos:line="73" pos:column="18">::</op:operator><name pos:line="73" pos:column="20">SetFillUpChars</name></name><parameter_list pos:line="73" pos:column="34">(<param><decl><type><specifier pos:line="73" pos:column="35">const</specifier> <name pos:line="73" pos:column="41">char</name> <type:modifier pos:line="73" pos:column="46">*</type:modifier></type><name pos:line="73" pos:column="47">fillUpChars_</name></decl></param>)</parameter_list> <block pos:line="73" pos:column="61">{
	<expr_stmt><expr><call><name pos:line="74" pos:column="9">strncpy</name><argument_list pos:line="74" pos:column="16">(<argument><expr><name pos:line="74" pos:column="17">fillUpChars</name></expr></argument>, <argument><expr><name pos:line="74" pos:column="30">fillUpChars_</name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="44">sizeof<argument_list pos:line="74" pos:column="50">(<argument><expr><name pos:line="74" pos:column="51">fillUpChars</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="75" pos:column="9">fillUpChars</name><index pos:line="75" pos:column="20">[<expr><sizeof pos:line="75" pos:column="21">sizeof<argument_list pos:line="75" pos:column="27">(<argument><expr><name pos:line="75" pos:column="28">fillUpChars</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="75" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="75" pos:column="43">1</lit:literal></expr>]</index></name> <op:operator pos:line="75" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="75" pos:column="48">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="78" pos:column="1">bool</name></type> <name><name pos:line="78" pos:column="6">AutoComplete</name><op:operator pos:line="78" pos:column="18">::</op:operator><name pos:line="78" pos:column="20">IsFillUpChar</name></name><parameter_list pos:line="78" pos:column="32">(<param><decl><type><name pos:line="78" pos:column="33">char</name></type> <name pos:line="78" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="42">{
	<return pos:line="79" pos:column="9">return <expr><name pos:line="79" pos:column="16">ch</name> <op:operator pos:line="79" pos:column="19">&amp;&amp;</op:operator> <call><name pos:line="79" pos:column="22">strchr</name><argument_list pos:line="79" pos:column="28">(<argument><expr><name pos:line="79" pos:column="29">fillUpChars</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="82" pos:column="1">void</name></type> <name><name pos:line="82" pos:column="6">AutoComplete</name><op:operator pos:line="82" pos:column="18">::</op:operator><name pos:line="82" pos:column="20">SetSeparator</name></name><parameter_list pos:line="82" pos:column="32">(<param><decl><type><name pos:line="82" pos:column="33">char</name></type> <name pos:line="82" pos:column="38">separator_</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="50">{
	<expr_stmt><expr><name pos:line="83" pos:column="9">separator</name> <op:operator pos:line="83" pos:column="19">=</op:operator> <name pos:line="83" pos:column="21">separator_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="86" pos:column="1">char</name></type> <name><name pos:line="86" pos:column="6">AutoComplete</name><op:operator pos:line="86" pos:column="18">::</op:operator><name pos:line="86" pos:column="20">GetSeparator</name></name><parameter_list pos:line="86" pos:column="32">()</parameter_list> <specifier pos:line="86" pos:column="35">const</specifier> <block pos:line="86" pos:column="41">{
	<return pos:line="87" pos:column="9">return <expr><name pos:line="87" pos:column="16">separator</name></expr>;</return>
}</block></function>

<function><type><name pos:line="90" pos:column="1">void</name></type> <name><name pos:line="90" pos:column="6">AutoComplete</name><op:operator pos:line="90" pos:column="18">::</op:operator><name pos:line="90" pos:column="20">SetTypesep</name></name><parameter_list pos:line="90" pos:column="30">(<param><decl><type><name pos:line="90" pos:column="31">char</name></type> <name pos:line="90" pos:column="36">separator_</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="48">{
	<expr_stmt><expr><name pos:line="91" pos:column="9">typesep</name> <op:operator pos:line="91" pos:column="17">=</op:operator> <name pos:line="91" pos:column="19">separator_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="94" pos:column="1">char</name></type> <name><name pos:line="94" pos:column="6">AutoComplete</name><op:operator pos:line="94" pos:column="18">::</op:operator><name pos:line="94" pos:column="20">GetTypesep</name></name><parameter_list pos:line="94" pos:column="30">()</parameter_list> <specifier pos:line="94" pos:column="33">const</specifier> <block pos:line="94" pos:column="39">{
	<return pos:line="95" pos:column="9">return <expr><name pos:line="95" pos:column="16">typesep</name></expr>;</return>
}</block></function>

<function><type><name pos:line="98" pos:column="1">void</name></type> <name><name pos:line="98" pos:column="6">AutoComplete</name><op:operator pos:line="98" pos:column="18">::</op:operator><name pos:line="98" pos:column="20">SetList</name></name><parameter_list pos:line="98" pos:column="27">(<param><decl><type><specifier pos:line="98" pos:column="28">const</specifier> <name pos:line="98" pos:column="34">char</name> <type:modifier pos:line="98" pos:column="39">*</type:modifier></type><name pos:line="98" pos:column="40">list</name></decl></param>)</parameter_list> <block pos:line="98" pos:column="46">{
	<expr_stmt><expr><call><name><name pos:line="99" pos:column="9">lb</name><op:operator pos:line="99" pos:column="11">-&gt;</op:operator><name pos:line="99" pos:column="13">SetList</name></name><argument_list pos:line="99" pos:column="20">(<argument><expr><name pos:line="99" pos:column="21">list</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="27">separator</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="38">typesep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="102" pos:column="1">void</name></type> <name><name pos:line="102" pos:column="6">AutoComplete</name><op:operator pos:line="102" pos:column="18">::</op:operator><name pos:line="102" pos:column="20">Show</name></name><parameter_list pos:line="102" pos:column="24">(<param><decl><type><name pos:line="102" pos:column="25">bool</name></type> <name pos:line="102" pos:column="30">show</name></decl></param>)</parameter_list> <block pos:line="102" pos:column="36">{
	<expr_stmt><expr><call><name><name pos:line="103" pos:column="9">lb</name><op:operator pos:line="103" pos:column="11">-&gt;</op:operator><name pos:line="103" pos:column="13">Show</name></name><argument_list pos:line="103" pos:column="17">(<argument><expr><name pos:line="103" pos:column="18">show</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">show</name></expr>)</condition><then pos:line="104" pos:column="18">
		<expr_stmt><expr><call><name><name pos:line="105" pos:column="17">lb</name><op:operator pos:line="105" pos:column="19">-&gt;</op:operator><name pos:line="105" pos:column="21">Select</name></name><argument_list pos:line="105" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="105" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="108" pos:column="1">void</name></type> <name><name pos:line="108" pos:column="6">AutoComplete</name><op:operator pos:line="108" pos:column="18">::</op:operator><name pos:line="108" pos:column="20">Cancel</name></name><parameter_list pos:line="108" pos:column="26">()</parameter_list> <block pos:line="108" pos:column="29">{
	<if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><call><name><name pos:line="109" pos:column="13">lb</name><op:operator pos:line="109" pos:column="15">-&gt;</op:operator><name pos:line="109" pos:column="17">Created</name></name><argument_list pos:line="109" pos:column="24">()</argument_list></call></expr>)</condition><then pos:line="109" pos:column="27"> <block pos:line="109" pos:column="28">{
		<expr_stmt><expr><call><name><name pos:line="110" pos:column="17">lb</name><op:operator pos:line="110" pos:column="19">-&gt;</op:operator><name pos:line="110" pos:column="21">Clear</name></name><argument_list pos:line="110" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="111" pos:column="17">lb</name><op:operator pos:line="111" pos:column="19">-&gt;</op:operator><name pos:line="111" pos:column="21">Destroy</name></name><argument_list pos:line="111" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="112" pos:column="17">active</name> <op:operator pos:line="112" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="112" pos:column="26">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>


<function><type><name pos:line="117" pos:column="1">void</name></type> <name><name pos:line="117" pos:column="6">AutoComplete</name><op:operator pos:line="117" pos:column="18">::</op:operator><name pos:line="117" pos:column="20">Move</name></name><parameter_list pos:line="117" pos:column="24">(<param><decl><type><name pos:line="117" pos:column="25">int</name></type> <name pos:line="117" pos:column="29">delta</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="36">{
	<decl_stmt><decl><type><name pos:line="118" pos:column="9">int</name></type> <name pos:line="118" pos:column="13">count</name> <init pos:line="118" pos:column="19">= <expr><call><name><name pos:line="118" pos:column="21">lb</name><op:operator pos:line="118" pos:column="23">-&gt;</op:operator><name pos:line="118" pos:column="25">Length</name></name><argument_list pos:line="118" pos:column="31">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="119" pos:column="9">int</name></type> <name pos:line="119" pos:column="13">current</name> <init pos:line="119" pos:column="21">= <expr><call><name><name pos:line="119" pos:column="23">lb</name><op:operator pos:line="119" pos:column="25">-&gt;</op:operator><name pos:line="119" pos:column="27">GetSelection</name></name><argument_list pos:line="119" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="120" pos:column="9">current</name> <op:operator pos:line="120" pos:column="17">+=</op:operator> <name pos:line="120" pos:column="20">delta</name></expr>;</expr_stmt>
	<if pos:line="121" pos:column="9">if <condition pos:line="121" pos:column="12">(<expr><name pos:line="121" pos:column="13">current</name> <op:operator pos:line="121" pos:column="21">&gt;=</op:operator> <name pos:line="121" pos:column="24">count</name></expr>)</condition><then pos:line="121" pos:column="30">
		<expr_stmt><expr><name pos:line="122" pos:column="17">current</name> <op:operator pos:line="122" pos:column="25">=</op:operator> <name pos:line="122" pos:column="27">count</name> <op:operator pos:line="122" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="122" pos:column="35">1</lit:literal></expr>;</expr_stmt></then></if>
	<if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><name pos:line="123" pos:column="13">current</name> <op:operator pos:line="123" pos:column="21">&lt;</op:operator> <lit:literal type="number" pos:line="123" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="123" pos:column="25">
		<expr_stmt><expr><name pos:line="124" pos:column="17">current</name> <op:operator pos:line="124" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="124" pos:column="27">0</lit:literal></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name><name pos:line="125" pos:column="9">lb</name><op:operator pos:line="125" pos:column="11">-&gt;</op:operator><name pos:line="125" pos:column="13">Select</name></name><argument_list pos:line="125" pos:column="19">(<argument><expr><name pos:line="125" pos:column="20">current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="128" pos:column="1">void</name></type> <name><name pos:line="128" pos:column="6">AutoComplete</name><op:operator pos:line="128" pos:column="18">::</op:operator><name pos:line="128" pos:column="20">Select</name></name><parameter_list pos:line="128" pos:column="26">(<param><decl><type><specifier pos:line="128" pos:column="27">const</specifier> <name pos:line="128" pos:column="33">char</name> <type:modifier pos:line="128" pos:column="38">*</type:modifier></type><name pos:line="128" pos:column="39">word</name></decl></param>)</parameter_list> <block pos:line="128" pos:column="45">{
	<decl_stmt><decl><type><name pos:line="129" pos:column="9">size_t</name></type> <name pos:line="129" pos:column="16">lenWord</name> <init pos:line="129" pos:column="24">= <expr><call><name pos:line="129" pos:column="26">strlen</name><argument_list pos:line="129" pos:column="32">(<argument><expr><name pos:line="129" pos:column="33">word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">int</name></type> <name pos:line="130" pos:column="13">location</name> <init pos:line="130" pos:column="22">= <expr><op:operator pos:line="130" pos:column="24">-</op:operator><lit:literal type="number" pos:line="130" pos:column="25">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="131" pos:column="9">const</specifier> <name pos:line="131" pos:column="15">int</name></type> <name pos:line="131" pos:column="19">maxItemLen</name><init pos:line="131" pos:column="29">=<expr><lit:literal type="number" pos:line="131" pos:column="30">1000</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="132" pos:column="9">int</name></type> <name pos:line="132" pos:column="13">start</name> <init pos:line="132" pos:column="19">= <expr><lit:literal type="number" pos:line="132" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="132" pos:column="24">// lower bound of the api array block to search</comment>
	<decl_stmt><decl><type><name pos:line="133" pos:column="9">int</name></type> <name pos:line="133" pos:column="13">end</name> <init pos:line="133" pos:column="17">= <expr><call><name><name pos:line="133" pos:column="19">lb</name><op:operator pos:line="133" pos:column="21">-&gt;</op:operator><name pos:line="133" pos:column="23">Length</name></name><argument_list pos:line="133" pos:column="29">()</argument_list></call> <op:operator pos:line="133" pos:column="32">-</op:operator> <lit:literal type="number" pos:line="133" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="133" pos:column="37">// upper bound of the api array block to search</comment>
	<while pos:line="134" pos:column="9">while <condition pos:line="134" pos:column="15">(<expr><op:operator pos:line="134" pos:column="16">(</op:operator><name pos:line="134" pos:column="17">start</name> <op:operator pos:line="134" pos:column="23">&lt;=</op:operator> <name pos:line="134" pos:column="26">end</name><op:operator pos:line="134" pos:column="29">)</op:operator> <op:operator pos:line="134" pos:column="31">&amp;&amp;</op:operator> <op:operator pos:line="134" pos:column="34">(</op:operator><name pos:line="134" pos:column="35">location</name> <op:operator pos:line="134" pos:column="44">==</op:operator> <op:operator pos:line="134" pos:column="47">-</op:operator><lit:literal type="number" pos:line="134" pos:column="48">1</lit:literal><op:operator pos:line="134" pos:column="49">)</op:operator></expr>)</condition> <block pos:line="134" pos:column="52">{ <comment type="line" pos:line="134" pos:column="54">// Binary searching loop</comment>
		<decl_stmt><decl><type><name pos:line="135" pos:column="17">int</name></type> <name pos:line="135" pos:column="21">pivot</name> <init pos:line="135" pos:column="27">= <expr><op:operator pos:line="135" pos:column="29">(</op:operator><name pos:line="135" pos:column="30">start</name> <op:operator pos:line="135" pos:column="36">+</op:operator> <name pos:line="135" pos:column="38">end</name><op:operator pos:line="135" pos:column="41">)</op:operator> <op:operator pos:line="135" pos:column="43">/</op:operator> <lit:literal type="number" pos:line="135" pos:column="45">2</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="136" pos:column="17">char</name></type> <name><name pos:line="136" pos:column="22">item</name><index pos:line="136" pos:column="26">[<expr><name pos:line="136" pos:column="27">maxItemLen</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="137" pos:column="17">lb</name><op:operator pos:line="137" pos:column="19">-&gt;</op:operator><name pos:line="137" pos:column="21">GetValue</name></name><argument_list pos:line="137" pos:column="29">(<argument><expr><name pos:line="137" pos:column="30">pivot</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="37">item</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="43">maxItemLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="138" pos:column="17">int</name></type> <name pos:line="138" pos:column="21">cond</name></decl>;</decl_stmt>
		<if pos:line="139" pos:column="17">if <condition pos:line="139" pos:column="20">(<expr><name pos:line="139" pos:column="21">ignoreCase</name></expr>)</condition><then pos:line="139" pos:column="32">
			<expr_stmt><expr><name pos:line="140" pos:column="25">cond</name> <op:operator pos:line="140" pos:column="30">=</op:operator> <call><name pos:line="140" pos:column="32">CompareNCaseInsensitive</name><argument_list pos:line="140" pos:column="55">(<argument><expr><name pos:line="140" pos:column="56">word</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="62">item</name></expr></argument>, <argument><expr><name pos:line="140" pos:column="68">lenWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="141" pos:column="17">else
			<expr_stmt><expr><name pos:line="142" pos:column="25">cond</name> <op:operator pos:line="142" pos:column="30">=</op:operator> <call><name pos:line="142" pos:column="32">strncmp</name><argument_list pos:line="142" pos:column="39">(<argument><expr><name pos:line="142" pos:column="40">word</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="46">item</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="52">lenWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		<if pos:line="143" pos:column="17">if <condition pos:line="143" pos:column="20">(<expr><op:operator pos:line="143" pos:column="21">!</op:operator><name pos:line="143" pos:column="22">cond</name></expr>)</condition><then pos:line="143" pos:column="27"> <block pos:line="143" pos:column="28">{
			<comment type="line" pos:line="144" pos:column="25">// Find first match</comment>
			<while pos:line="145" pos:column="25">while <condition pos:line="145" pos:column="31">(<expr><name pos:line="145" pos:column="32">pivot</name> <op:operator pos:line="145" pos:column="38">&gt;</op:operator> <name pos:line="145" pos:column="40">start</name></expr>)</condition> <block pos:line="145" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="146" pos:column="33">lb</name><op:operator pos:line="146" pos:column="35">-&gt;</op:operator><name pos:line="146" pos:column="37">GetValue</name></name><argument_list pos:line="146" pos:column="45">(<argument><expr><name pos:line="146" pos:column="46">pivot</name><op:operator pos:line="146" pos:column="51">-</op:operator><lit:literal type="number" pos:line="146" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="146" pos:column="55">item</name></expr></argument>, <argument><expr><name pos:line="146" pos:column="61">maxItemLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="147" pos:column="33">if <condition pos:line="147" pos:column="36">(<expr><name pos:line="147" pos:column="37">ignoreCase</name></expr>)</condition><then pos:line="147" pos:column="48">
					<expr_stmt><expr><name pos:line="148" pos:column="41">cond</name> <op:operator pos:line="148" pos:column="46">=</op:operator> <call><name pos:line="148" pos:column="48">CompareNCaseInsensitive</name><argument_list pos:line="148" pos:column="71">(<argument><expr><name pos:line="148" pos:column="72">word</name></expr></argument>, <argument><expr><name pos:line="148" pos:column="78">item</name></expr></argument>, <argument><expr><name pos:line="148" pos:column="84">lenWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="149" pos:column="33">else
					<expr_stmt><expr><name pos:line="150" pos:column="41">cond</name> <op:operator pos:line="150" pos:column="46">=</op:operator> <call><name pos:line="150" pos:column="48">strncmp</name><argument_list pos:line="150" pos:column="55">(<argument><expr><name pos:line="150" pos:column="56">word</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="62">item</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="68">lenWord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				<if pos:line="151" pos:column="33">if <condition pos:line="151" pos:column="36">(<expr><lit:literal type="number" pos:line="151" pos:column="37">0</lit:literal> <op:operator pos:line="151" pos:column="39">!=</op:operator> <name pos:line="151" pos:column="42">cond</name></expr>)</condition><then pos:line="151" pos:column="47">
					<break pos:line="152" pos:column="41">break;</break></then></if>
				<expr_stmt><expr><op:operator pos:line="153" pos:column="33">--</op:operator><name pos:line="153" pos:column="35">pivot</name></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name pos:line="155" pos:column="25">location</name> <op:operator pos:line="155" pos:column="34">=</op:operator> <name pos:line="155" pos:column="36">pivot</name></expr>;</expr_stmt>
			<if pos:line="156" pos:column="25">if <condition pos:line="156" pos:column="28">(<expr><name pos:line="156" pos:column="29">ignoreCase</name></expr>)</condition><then pos:line="156" pos:column="40"> <block pos:line="156" pos:column="41">{
				<comment type="line" pos:line="157" pos:column="33">// Check for exact-case match</comment>
				<for pos:line="158" pos:column="33">for (<init pos:line="158" pos:column="38">;</init> <condition><expr><name pos:line="158" pos:column="40">pivot</name> <op:operator pos:line="158" pos:column="46">&lt;=</op:operator> <name pos:line="158" pos:column="49">end</name></expr>;</condition> <incr><expr><name pos:line="158" pos:column="54">pivot</name><op:operator pos:line="158" pos:column="59">++</op:operator></expr></incr>) <block pos:line="158" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="159" pos:column="41">lb</name><op:operator pos:line="159" pos:column="43">-&gt;</op:operator><name pos:line="159" pos:column="45">GetValue</name></name><argument_list pos:line="159" pos:column="53">(<argument><expr><name pos:line="159" pos:column="54">pivot</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="61">item</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="67">maxItemLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="160" pos:column="41">if <condition pos:line="160" pos:column="44">(<expr><op:operator pos:line="160" pos:column="45">!</op:operator><call><name pos:line="160" pos:column="46">strncmp</name><argument_list pos:line="160" pos:column="53">(<argument><expr><name pos:line="160" pos:column="54">word</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="60">item</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="66">lenWord</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="75"> <block pos:line="160" pos:column="76">{
						<expr_stmt><expr><name pos:line="161" pos:column="49">location</name> <op:operator pos:line="161" pos:column="58">=</op:operator> <name pos:line="161" pos:column="60">pivot</name></expr>;</expr_stmt>
						<break pos:line="162" pos:column="49">break;</break>
					}</block></then></if>
					<if pos:line="164" pos:column="41">if <condition pos:line="164" pos:column="44">(<expr><call><name pos:line="164" pos:column="45">CompareNCaseInsensitive</name><argument_list pos:line="164" pos:column="68">(<argument><expr><name pos:line="164" pos:column="69">word</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="75">item</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="81">lenWord</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="164" pos:column="90">
						<break pos:line="165" pos:column="49">break;</break></then></if>
				}</block></for>
			}</block></then></if>
		}</block></then> <else pos:line="168" pos:column="19">else <if pos:line="168" pos:column="24">if <condition pos:line="168" pos:column="27">(<expr><name pos:line="168" pos:column="28">cond</name> <op:operator pos:line="168" pos:column="33">&lt;</op:operator> <lit:literal type="number" pos:line="168" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="168" pos:column="37"> <block pos:line="168" pos:column="38">{
			<expr_stmt><expr><name pos:line="169" pos:column="25">end</name> <op:operator pos:line="169" pos:column="29">=</op:operator> <name pos:line="169" pos:column="31">pivot</name> <op:operator pos:line="169" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="169" pos:column="39">1</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="170" pos:column="19">else <if pos:line="170" pos:column="24">if <condition pos:line="170" pos:column="27">(<expr><name pos:line="170" pos:column="28">cond</name> <op:operator pos:line="170" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="170" pos:column="35">0</lit:literal></expr>)</condition><then pos:line="170" pos:column="37"> <block pos:line="170" pos:column="38">{
			<expr_stmt><expr><name pos:line="171" pos:column="25">start</name> <op:operator pos:line="171" pos:column="31">=</op:operator> <name pos:line="171" pos:column="33">pivot</name> <op:operator pos:line="171" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="171" pos:column="41">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if>
	}</block></while>
	<if pos:line="174" pos:column="9">if <condition pos:line="174" pos:column="12">(<expr><name pos:line="174" pos:column="13">location</name> <op:operator pos:line="174" pos:column="22">==</op:operator> <op:operator pos:line="174" pos:column="25">-</op:operator><lit:literal type="number" pos:line="174" pos:column="26">1</lit:literal> <op:operator pos:line="174" pos:column="28">&amp;&amp;</op:operator> <name pos:line="174" pos:column="31">autoHide</name></expr>)</condition><then pos:line="174" pos:column="40">
		<expr_stmt><expr><call><name pos:line="175" pos:column="17">Cancel</name><argument_list pos:line="175" pos:column="23">()</argument_list></call></expr>;</expr_stmt></then>
	<else pos:line="176" pos:column="9">else
		<expr_stmt><expr><call><name><name pos:line="177" pos:column="17">lb</name><op:operator pos:line="177" pos:column="19">-&gt;</op:operator><name pos:line="177" pos:column="21">Select</name></name><argument_list pos:line="177" pos:column="27">(<argument><expr><name pos:line="177" pos:column="28">location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

</unit>
