<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexLua.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexLua.cxx
 ** Lexer for Lua language.
 **
 ** Written by Paul Winwood.
 ** Folder by Alexey Yutkin.
 ** Modified by Marcos E. Wurzius &amp; Philippe Lhoste
 **/</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef</cpp:directive> <name pos:line="28" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="29" pos:column="1">using namespace <name pos:line="29" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="32" pos:column="1">// Test for [=[ ... ]=] delimiters, returns 0 if it's only a [ or ],</comment>
<comment type="line" pos:line="33" pos:column="1">// return 1 for [[ or ]], returns &gt;=2 for [=[ or ]=] and so on.</comment>
<comment type="line" pos:line="34" pos:column="1">// The maximum number of '=' characters allowed is 254.</comment>
<function><type><specifier pos:line="35" pos:column="1">static</specifier> <name pos:line="35" pos:column="8">int</name></type> <name pos:line="35" pos:column="12">LongDelimCheck</name><parameter_list pos:line="35" pos:column="26">(<param><decl><type><name pos:line="35" pos:column="27">StyleContext</name> <type:modifier pos:line="35" pos:column="40">&amp;</type:modifier></type><name pos:line="35" pos:column="41">sc</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="45">{
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">int</name></type> <name pos:line="36" pos:column="13">sep</name> <init pos:line="36" pos:column="17">= <expr><lit:literal type="number" pos:line="36" pos:column="19">1</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="37" pos:column="9">while <condition pos:line="37" pos:column="15">(<expr><call><name><name pos:line="37" pos:column="16">sc</name><op:operator pos:line="37" pos:column="18">.</op:operator><name pos:line="37" pos:column="19">GetRelative</name></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name pos:line="37" pos:column="31">sep</name></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="39">'='</lit:literal> <op:operator pos:line="37" pos:column="43">&amp;&amp;</op:operator> <name pos:line="37" pos:column="46">sep</name> <op:operator pos:line="37" pos:column="50">&lt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="52">0xFF</lit:literal></expr>)</condition>
		<expr_stmt><expr><name pos:line="38" pos:column="17">sep</name><op:operator pos:line="38" pos:column="20">++</op:operator></expr>;</expr_stmt></while>
	<if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name><name pos:line="39" pos:column="13">sc</name><op:operator pos:line="39" pos:column="15">.</op:operator><name pos:line="39" pos:column="16">GetRelative</name></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name pos:line="39" pos:column="28">sep</name></expr></argument>)</argument_list></call> <op:operator pos:line="39" pos:column="33">==</op:operator> <name><name pos:line="39" pos:column="36">sc</name><op:operator pos:line="39" pos:column="38">.</op:operator><name pos:line="39" pos:column="39">ch</name></name></expr>)</condition><then pos:line="39" pos:column="42">
		<return pos:line="40" pos:column="17">return <expr><name pos:line="40" pos:column="24">sep</name></expr>;</return></then></if>
	<return pos:line="41" pos:column="9">return <expr><lit:literal type="number" pos:line="41" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="44" pos:column="1">static</specifier> <name pos:line="44" pos:column="8">void</name></type> <name pos:line="44" pos:column="13">ColouriseLuaDoc</name><parameter_list pos:line="44" pos:column="28">(
	<param><decl><type><name pos:line="45" pos:column="9">unsigned</name> <name pos:line="45" pos:column="18">int</name></type> <name pos:line="45" pos:column="22">startPos</name></decl></param>,
	<param><decl><type><name pos:line="46" pos:column="9">int</name></type> <name pos:line="46" pos:column="13">length</name></decl></param>,
	<param><decl><type><name pos:line="47" pos:column="9">int</name></type> <name pos:line="47" pos:column="13">initStyle</name></decl></param>,
	<param><decl><type><name pos:line="48" pos:column="9">WordList</name> <type:modifier pos:line="48" pos:column="18">*</type:modifier></type><name><name pos:line="48" pos:column="19">keywordlists</name><index pos:line="48" pos:column="31">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="49" pos:column="9">Accessor</name> <type:modifier pos:line="49" pos:column="18">&amp;</type:modifier></type><name pos:line="49" pos:column="19">styler</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="27">{

	<decl_stmt><decl><type><name pos:line="51" pos:column="9">WordList</name> <type:modifier pos:line="51" pos:column="18">&amp;</type:modifier></type><name pos:line="51" pos:column="19">keywords</name> <init pos:line="51" pos:column="28">= <expr><op:operator pos:line="51" pos:column="30">*</op:operator><name><name pos:line="51" pos:column="31">keywordlists</name><index pos:line="51" pos:column="43">[<expr><lit:literal type="number" pos:line="51" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">WordList</name> <type:modifier pos:line="52" pos:column="18">&amp;</type:modifier></type><name pos:line="52" pos:column="19">keywords2</name> <init pos:line="52" pos:column="29">= <expr><op:operator pos:line="52" pos:column="31">*</op:operator><name><name pos:line="52" pos:column="32">keywordlists</name><index pos:line="52" pos:column="44">[<expr><lit:literal type="number" pos:line="52" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">WordList</name> <type:modifier pos:line="53" pos:column="18">&amp;</type:modifier></type><name pos:line="53" pos:column="19">keywords3</name> <init pos:line="53" pos:column="29">= <expr><op:operator pos:line="53" pos:column="31">*</op:operator><name><name pos:line="53" pos:column="32">keywordlists</name><index pos:line="53" pos:column="44">[<expr><lit:literal type="number" pos:line="53" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="54" pos:column="9">WordList</name> <type:modifier pos:line="54" pos:column="18">&amp;</type:modifier></type><name pos:line="54" pos:column="19">keywords4</name> <init pos:line="54" pos:column="29">= <expr><op:operator pos:line="54" pos:column="31">*</op:operator><name><name pos:line="54" pos:column="32">keywordlists</name><index pos:line="54" pos:column="44">[<expr><lit:literal type="number" pos:line="54" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">WordList</name> <type:modifier pos:line="55" pos:column="18">&amp;</type:modifier></type><name pos:line="55" pos:column="19">keywords5</name> <init pos:line="55" pos:column="29">= <expr><op:operator pos:line="55" pos:column="31">*</op:operator><name><name pos:line="55" pos:column="32">keywordlists</name><index pos:line="55" pos:column="44">[<expr><lit:literal type="number" pos:line="55" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">WordList</name> <type:modifier pos:line="56" pos:column="18">&amp;</type:modifier></type><name pos:line="56" pos:column="19">keywords6</name> <init pos:line="56" pos:column="29">= <expr><op:operator pos:line="56" pos:column="31">*</op:operator><name><name pos:line="56" pos:column="32">keywordlists</name><index pos:line="56" pos:column="44">[<expr><lit:literal type="number" pos:line="56" pos:column="45">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">WordList</name> <type:modifier pos:line="57" pos:column="18">&amp;</type:modifier></type><name pos:line="57" pos:column="19">keywords7</name> <init pos:line="57" pos:column="29">= <expr><op:operator pos:line="57" pos:column="31">*</op:operator><name><name pos:line="57" pos:column="32">keywordlists</name><index pos:line="57" pos:column="44">[<expr><lit:literal type="number" pos:line="57" pos:column="45">6</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">WordList</name> <type:modifier pos:line="58" pos:column="18">&amp;</type:modifier></type><name pos:line="58" pos:column="19">keywords8</name> <init pos:line="58" pos:column="29">= <expr><op:operator pos:line="58" pos:column="31">*</op:operator><name><name pos:line="58" pos:column="32">keywordlists</name><index pos:line="58" pos:column="44">[<expr><lit:literal type="number" pos:line="58" pos:column="45">7</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="60" pos:column="9">// Accepts accented characters</comment>
	<decl_stmt><decl><type><name pos:line="61" pos:column="9">CharacterSet</name></type> <name pos:line="61" pos:column="22">setWordStart</name><argument_list pos:line="61" pos:column="34">(<argument><expr><name><name pos:line="61" pos:column="35">CharacterSet</name><op:operator pos:line="61" pos:column="47">::</op:operator><name pos:line="61" pos:column="49">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="61" pos:column="59">"_"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="61" pos:column="64">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="61" pos:column="70">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="62" pos:column="9">CharacterSet</name></type> <name pos:line="62" pos:column="22">setWord</name><argument_list pos:line="62" pos:column="29">(<argument><expr><name><name pos:line="62" pos:column="30">CharacterSet</name><op:operator pos:line="62" pos:column="42">::</op:operator><name pos:line="62" pos:column="44">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="62" pos:column="57">"._"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="62" pos:column="63">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="62" pos:column="69">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<comment type="line" pos:line="63" pos:column="9">// Not exactly following number definition (several dots are seen as OK, etc.)</comment>
	<comment type="line" pos:line="64" pos:column="9">// but probably enough in most cases. [pP] is for hex floats.</comment>
	<decl_stmt><decl><type><name pos:line="65" pos:column="9">CharacterSet</name></type> <name pos:line="65" pos:column="22">setNumber</name><argument_list pos:line="65" pos:column="31">(<argument><expr><name><name pos:line="65" pos:column="32">CharacterSet</name><op:operator pos:line="65" pos:column="44">::</op:operator><name pos:line="65" pos:column="46">setDigits</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="65" pos:column="57">".-+abcdefpABCDEFP"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">CharacterSet</name></type> <name pos:line="66" pos:column="22">setExponent</name><argument_list pos:line="66" pos:column="33">(<argument><expr><name><name pos:line="66" pos:column="34">CharacterSet</name><op:operator pos:line="66" pos:column="46">::</op:operator><name pos:line="66" pos:column="48">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="66" pos:column="57">"eEpP"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">CharacterSet</name></type> <name pos:line="67" pos:column="22">setLuaOperator</name><argument_list pos:line="67" pos:column="36">(<argument><expr><name><name pos:line="67" pos:column="37">CharacterSet</name><op:operator pos:line="67" pos:column="49">::</op:operator><name pos:line="67" pos:column="51">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="67" pos:column="60">"*/-+()={}~[];&lt;&gt;,.^%:#"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">CharacterSet</name></type> <name pos:line="68" pos:column="22">setEscapeSkip</name><argument_list pos:line="68" pos:column="35">(<argument><expr><name><name pos:line="68" pos:column="36">CharacterSet</name><op:operator pos:line="68" pos:column="48">::</op:operator><name pos:line="68" pos:column="50">setNone</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="68" pos:column="59">"\"'\\"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="70" pos:column="9">int</name></type> <name pos:line="70" pos:column="13">currentLine</name> <init pos:line="70" pos:column="25">= <expr><call><name><name pos:line="70" pos:column="27">styler</name><op:operator pos:line="70" pos:column="33">.</op:operator><name pos:line="70" pos:column="34">GetLine</name></name><argument_list pos:line="70" pos:column="41">(<argument><expr><name pos:line="70" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="71" pos:column="9">// Initialize long string [[ ... ]] or block comment --[[ ... ]] nesting level,</comment>
	<comment type="line" pos:line="72" pos:column="9">// if we are inside such a string. Block comment was introduced in Lua 5.0,</comment>
	<comment type="line" pos:line="73" pos:column="9">// blocks with separators [=[ ... ]=] in Lua 5.1.</comment>
	<comment type="line" pos:line="74" pos:column="9">// Continuation of a string (\* whitespace escaping) is controlled by stringWs.</comment>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">int</name></type> <name pos:line="75" pos:column="13">nestLevel</name> <init pos:line="75" pos:column="23">= <expr><lit:literal type="number" pos:line="75" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">int</name></type> <name pos:line="76" pos:column="13">sepCount</name> <init pos:line="76" pos:column="22">= <expr><lit:literal type="number" pos:line="76" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">int</name></type> <name pos:line="77" pos:column="13">stringWs</name> <init pos:line="77" pos:column="22">= <expr><lit:literal type="number" pos:line="77" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">initStyle</name> <op:operator pos:line="78" pos:column="23">==</op:operator> <name pos:line="78" pos:column="26">SCE_LUA_LITERALSTRING</name> <op:operator pos:line="78" pos:column="48">||</op:operator> <name pos:line="78" pos:column="51">initStyle</name> <op:operator pos:line="78" pos:column="61">==</op:operator> <name pos:line="78" pos:column="64">SCE_LUA_COMMENT</name> <op:operator pos:line="78" pos:column="80">||</op:operator>
		<name pos:line="79" pos:column="17">initStyle</name> <op:operator pos:line="79" pos:column="27">==</op:operator> <name pos:line="79" pos:column="30">SCE_LUA_STRING</name> <op:operator pos:line="79" pos:column="45">||</op:operator> <name pos:line="79" pos:column="48">initStyle</name> <op:operator pos:line="79" pos:column="58">==</op:operator> <name pos:line="79" pos:column="61">SCE_LUA_CHARACTER</name></expr>)</condition><then pos:line="79" pos:column="79"> <block pos:line="79" pos:column="80">{
		<decl_stmt><decl><type><name pos:line="80" pos:column="17">int</name></type> <name pos:line="80" pos:column="21">lineState</name> <init pos:line="80" pos:column="31">= <expr><call><name><name pos:line="80" pos:column="33">styler</name><op:operator pos:line="80" pos:column="39">.</op:operator><name pos:line="80" pos:column="40">GetLineState</name></name><argument_list pos:line="80" pos:column="52">(<argument><expr><name pos:line="80" pos:column="53">currentLine</name> <op:operator pos:line="80" pos:column="65">-</op:operator> <lit:literal type="number" pos:line="80" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="81" pos:column="17">nestLevel</name> <op:operator pos:line="81" pos:column="27">=</op:operator> <name pos:line="81" pos:column="29">lineState</name> <op:operator pos:line="81" pos:column="39">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="81" pos:column="42">9</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="82" pos:column="17">sepCount</name> <op:operator pos:line="82" pos:column="26">=</op:operator> <name pos:line="82" pos:column="28">lineState</name> <op:operator pos:line="82" pos:column="38">&amp;</op:operator> <lit:literal type="number" pos:line="82" pos:column="40">0xFF</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="83" pos:column="17">stringWs</name> <op:operator pos:line="83" pos:column="26">=</op:operator> <name pos:line="83" pos:column="28">lineState</name> <op:operator pos:line="83" pos:column="38">&amp;</op:operator> <lit:literal type="number" pos:line="83" pos:column="40">0x100</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="86" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">initStyle</name> <op:operator pos:line="87" pos:column="23">==</op:operator> <name pos:line="87" pos:column="26">SCE_LUA_STRINGEOL</name> <op:operator pos:line="87" pos:column="44">||</op:operator> <name pos:line="87" pos:column="47">initStyle</name> <op:operator pos:line="87" pos:column="57">==</op:operator> <name pos:line="87" pos:column="60">SCE_LUA_COMMENTLINE</name> <op:operator pos:line="87" pos:column="80">||</op:operator> <name pos:line="87" pos:column="83">initStyle</name> <op:operator pos:line="87" pos:column="93">==</op:operator> <name pos:line="87" pos:column="96">SCE_LUA_PREPROCESSOR</name></expr>)</condition><then pos:line="87" pos:column="117"> <block pos:line="87" pos:column="118">{
		<expr_stmt><expr><name pos:line="88" pos:column="17">initStyle</name> <op:operator pos:line="88" pos:column="27">=</op:operator> <name pos:line="88" pos:column="29">SCE_LUA_DEFAULT</name></expr>;</expr_stmt>
	}</block></then></if>

	<function_decl><type><name pos:line="91" pos:column="9">StyleContext</name></type> <name pos:line="91" pos:column="22">sc</name><parameter_list pos:line="91" pos:column="24">(<param><decl><type><name pos:line="91" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="91" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="91" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="91" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">startPos</name> <op:operator pos:line="92" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="92" pos:column="25">0</lit:literal> <op:operator pos:line="92" pos:column="27">&amp;&amp;</op:operator> <name><name pos:line="92" pos:column="30">sc</name><op:operator pos:line="92" pos:column="32">.</op:operator><name pos:line="92" pos:column="33">ch</name></name> <op:operator pos:line="92" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="39">'#'</lit:literal></expr>)</condition><then pos:line="92" pos:column="43"> <block pos:line="92" pos:column="44">{
		<comment type="line" pos:line="93" pos:column="17">// shbang line: # is a comment only if first char of the script</comment>
		<expr_stmt><expr><call><name><name pos:line="94" pos:column="17">sc</name><op:operator pos:line="94" pos:column="19">.</op:operator><name pos:line="94" pos:column="20">SetState</name></name><argument_list pos:line="94" pos:column="28">(<argument><expr><name pos:line="94" pos:column="29">SCE_LUA_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<for pos:line="96" pos:column="9">for (<init pos:line="96" pos:column="14">;</init> <condition><expr><call><name><name pos:line="96" pos:column="16">sc</name><op:operator pos:line="96" pos:column="18">.</op:operator><name pos:line="96" pos:column="19">More</name></name><argument_list pos:line="96" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="96" pos:column="27">sc</name><op:operator pos:line="96" pos:column="29">.</op:operator><name pos:line="96" pos:column="30">Forward</name></name><argument_list pos:line="96" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="96" pos:column="41">{
		<if pos:line="97" pos:column="17">if <condition pos:line="97" pos:column="20">(<expr><name><name pos:line="97" pos:column="21">sc</name><op:operator pos:line="97" pos:column="23">.</op:operator><name pos:line="97" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="97" pos:column="34"> <block pos:line="97" pos:column="35">{
			<comment type="line" pos:line="98" pos:column="25">// Update the line state, so it can be seen by next line</comment>
			<expr_stmt><expr><name pos:line="99" pos:column="25">currentLine</name> <op:operator pos:line="99" pos:column="37">=</op:operator> <call><name><name pos:line="99" pos:column="39">styler</name><op:operator pos:line="99" pos:column="45">.</op:operator><name pos:line="99" pos:column="46">GetLine</name></name><argument_list pos:line="99" pos:column="53">(<argument><expr><name><name pos:line="99" pos:column="54">sc</name><op:operator pos:line="99" pos:column="56">.</op:operator><name pos:line="99" pos:column="57">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<switch pos:line="100" pos:column="25">switch <condition pos:line="100" pos:column="32">(<expr><name><name pos:line="100" pos:column="33">sc</name><op:operator pos:line="100" pos:column="35">.</op:operator><name pos:line="100" pos:column="36">state</name></name></expr>)</condition> <block pos:line="100" pos:column="43">{
			<case pos:line="101" pos:column="25">case <expr><name pos:line="101" pos:column="30">SCE_LUA_LITERALSTRING</name></expr>:
			</case><case pos:line="102" pos:column="25">case <expr><name pos:line="102" pos:column="30">SCE_LUA_COMMENT</name></expr>:
			</case><case pos:line="103" pos:column="25">case <expr><name pos:line="103" pos:column="30">SCE_LUA_STRING</name></expr>:
			</case><case pos:line="104" pos:column="25">case <expr><name pos:line="104" pos:column="30">SCE_LUA_CHARACTER</name></expr>:
				<comment type="line" pos:line="105" pos:column="33">// Inside a literal string, block comment or string, we set the line state</comment>
				<expr_stmt><expr><call><name><name pos:line="106" pos:column="33">styler</name><op:operator pos:line="106" pos:column="39">.</op:operator><name pos:line="106" pos:column="40">SetLineState</name></name><argument_list pos:line="106" pos:column="52">(<argument><expr><name pos:line="106" pos:column="53">currentLine</name></expr></argument>, <argument><expr><op:operator pos:line="106" pos:column="66">(</op:operator><name pos:line="106" pos:column="67">nestLevel</name> <op:operator pos:line="106" pos:column="77">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="106" pos:column="80">9</lit:literal><op:operator pos:line="106" pos:column="81">)</op:operator> <op:operator pos:line="106" pos:column="83">|</op:operator> <name pos:line="106" pos:column="85">stringWs</name> <op:operator pos:line="106" pos:column="94">|</op:operator> <name pos:line="106" pos:column="96">sepCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="107" pos:column="33">break;</break>
			</case><default pos:line="108" pos:column="25">default:
				<comment type="line" pos:line="109" pos:column="33">// Reset the line state</comment>
				<expr_stmt><expr><call><name><name pos:line="110" pos:column="33">styler</name><op:operator pos:line="110" pos:column="39">.</op:operator><name pos:line="110" pos:column="40">SetLineState</name></name><argument_list pos:line="110" pos:column="52">(<argument><expr><name pos:line="110" pos:column="53">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="110" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="111" pos:column="33">break;</break>
			</default>}</block></switch>
		}</block></then></if>
		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name><name pos:line="114" pos:column="21">sc</name><op:operator pos:line="114" pos:column="23">.</op:operator><name pos:line="114" pos:column="24">atLineStart</name></name> <op:operator pos:line="114" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="114" pos:column="39">(</op:operator><name><name pos:line="114" pos:column="40">sc</name><op:operator pos:line="114" pos:column="42">.</op:operator><name pos:line="114" pos:column="43">state</name></name> <op:operator pos:line="114" pos:column="49">==</op:operator> <name pos:line="114" pos:column="52">SCE_LUA_STRING</name><op:operator pos:line="114" pos:column="66">)</op:operator></expr>)</condition><then pos:line="114" pos:column="68"> <block pos:line="114" pos:column="69">{
			<comment type="line" pos:line="115" pos:column="25">// Prevent SCE_LUA_STRINGEOL from leaking back to previous line</comment>
			<expr_stmt><expr><call><name><name pos:line="116" pos:column="25">sc</name><op:operator pos:line="116" pos:column="27">.</op:operator><name pos:line="116" pos:column="28">SetState</name></name><argument_list pos:line="116" pos:column="36">(<argument><expr><name pos:line="116" pos:column="37">SCE_LUA_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="119" pos:column="17">// Handle string line continuation</comment>
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><op:operator pos:line="120" pos:column="21">(</op:operator><name><name pos:line="120" pos:column="22">sc</name><op:operator pos:line="120" pos:column="24">.</op:operator><name pos:line="120" pos:column="25">state</name></name> <op:operator pos:line="120" pos:column="31">==</op:operator> <name pos:line="120" pos:column="34">SCE_LUA_STRING</name> <op:operator pos:line="120" pos:column="49">||</op:operator> <name><name pos:line="120" pos:column="52">sc</name><op:operator pos:line="120" pos:column="54">.</op:operator><name pos:line="120" pos:column="55">state</name></name> <op:operator pos:line="120" pos:column="61">==</op:operator> <name pos:line="120" pos:column="64">SCE_LUA_CHARACTER</name><op:operator pos:line="120" pos:column="81">)</op:operator> <op:operator pos:line="120" pos:column="83">&amp;&amp;</op:operator>
				<name><name pos:line="121" pos:column="33">sc</name><op:operator pos:line="121" pos:column="35">.</op:operator><name pos:line="121" pos:column="36">ch</name></name> <op:operator pos:line="121" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="42">'\\'</lit:literal></expr>)</condition><then pos:line="121" pos:column="47"> <block pos:line="121" pos:column="48">{
			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><name><name pos:line="122" pos:column="29">sc</name><op:operator pos:line="122" pos:column="31">.</op:operator><name pos:line="122" pos:column="32">chNext</name></name> <op:operator pos:line="122" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="42">'\n'</lit:literal> <op:operator pos:line="122" pos:column="47">||</op:operator> <name><name pos:line="122" pos:column="50">sc</name><op:operator pos:line="122" pos:column="52">.</op:operator><name pos:line="122" pos:column="53">chNext</name></name> <op:operator pos:line="122" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="122" pos:column="68"> <block pos:line="122" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="123" pos:column="33">sc</name><op:operator pos:line="123" pos:column="35">.</op:operator><name pos:line="123" pos:column="36">Forward</name></name><argument_list pos:line="123" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="124" pos:column="33">if <condition pos:line="124" pos:column="36">(<expr><name><name pos:line="124" pos:column="37">sc</name><op:operator pos:line="124" pos:column="39">.</op:operator><name pos:line="124" pos:column="40">ch</name></name> <op:operator pos:line="124" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="46">'\r'</lit:literal> <op:operator pos:line="124" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="124" pos:column="54">sc</name><op:operator pos:line="124" pos:column="56">.</op:operator><name pos:line="124" pos:column="57">chNext</name></name> <op:operator pos:line="124" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="124" pos:column="72"> <block pos:line="124" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="125" pos:column="41">sc</name><op:operator pos:line="125" pos:column="43">.</op:operator><name pos:line="125" pos:column="44">Forward</name></name><argument_list pos:line="125" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<continue pos:line="127" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="131" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><name><name pos:line="132" pos:column="21">sc</name><op:operator pos:line="132" pos:column="23">.</op:operator><name pos:line="132" pos:column="24">state</name></name> <op:operator pos:line="132" pos:column="30">==</op:operator> <name pos:line="132" pos:column="33">SCE_LUA_OPERATOR</name></expr>)</condition><then pos:line="132" pos:column="50"> <block pos:line="132" pos:column="51">{
			<expr_stmt><expr><call><name><name pos:line="133" pos:column="25">sc</name><op:operator pos:line="133" pos:column="27">.</op:operator><name pos:line="133" pos:column="28">SetState</name></name><argument_list pos:line="133" pos:column="36">(<argument><expr><name pos:line="133" pos:column="37">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="134" pos:column="19">else <if pos:line="134" pos:column="24">if <condition pos:line="134" pos:column="27">(<expr><name><name pos:line="134" pos:column="28">sc</name><op:operator pos:line="134" pos:column="30">.</op:operator><name pos:line="134" pos:column="31">state</name></name> <op:operator pos:line="134" pos:column="37">==</op:operator> <name pos:line="134" pos:column="40">SCE_LUA_NUMBER</name></expr>)</condition><then pos:line="134" pos:column="55"> <block pos:line="134" pos:column="56">{
			<comment type="line" pos:line="135" pos:column="25">// We stop the number definition on non-numerical non-dot non-eEpP non-sign non-hexdigit char</comment>
			<if pos:line="136" pos:column="25">if <condition pos:line="136" pos:column="28">(<expr><op:operator pos:line="136" pos:column="29">!</op:operator><call><name><name pos:line="136" pos:column="30">setNumber</name><op:operator pos:line="136" pos:column="39">.</op:operator><name pos:line="136" pos:column="40">Contains</name></name><argument_list pos:line="136" pos:column="48">(<argument><expr><name><name pos:line="136" pos:column="49">sc</name><op:operator pos:line="136" pos:column="51">.</op:operator><name pos:line="136" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="136" pos:column="56"> <block pos:line="136" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="137" pos:column="33">sc</name><op:operator pos:line="137" pos:column="35">.</op:operator><name pos:line="137" pos:column="36">SetState</name></name><argument_list pos:line="137" pos:column="44">(<argument><expr><name pos:line="137" pos:column="45">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="138" pos:column="27">else <if pos:line="138" pos:column="32">if <condition pos:line="138" pos:column="35">(<expr><name><name pos:line="138" pos:column="36">sc</name><op:operator pos:line="138" pos:column="38">.</op:operator><name pos:line="138" pos:column="39">ch</name></name> <op:operator pos:line="138" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="138" pos:column="45">'-'</lit:literal> <op:operator pos:line="138" pos:column="49">||</op:operator> <name><name pos:line="138" pos:column="52">sc</name><op:operator pos:line="138" pos:column="54">.</op:operator><name pos:line="138" pos:column="55">ch</name></name> <op:operator pos:line="138" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="138" pos:column="61">'+'</lit:literal></expr>)</condition><then pos:line="138" pos:column="65"> <block pos:line="138" pos:column="66">{
				<if pos:line="139" pos:column="33">if <condition pos:line="139" pos:column="36">(<expr><op:operator pos:line="139" pos:column="37">!</op:operator><call><name><name pos:line="139" pos:column="38">setExponent</name><op:operator pos:line="139" pos:column="49">.</op:operator><name pos:line="139" pos:column="50">Contains</name></name><argument_list pos:line="139" pos:column="58">(<argument><expr><name><name pos:line="139" pos:column="59">sc</name><op:operator pos:line="139" pos:column="61">.</op:operator><name pos:line="139" pos:column="62">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="139" pos:column="70">
					<expr_stmt><expr><call><name><name pos:line="140" pos:column="41">sc</name><op:operator pos:line="140" pos:column="43">.</op:operator><name pos:line="140" pos:column="44">SetState</name></name><argument_list pos:line="140" pos:column="52">(<argument><expr><name pos:line="140" pos:column="53">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="142" pos:column="19">else <if pos:line="142" pos:column="24">if <condition pos:line="142" pos:column="27">(<expr><name><name pos:line="142" pos:column="28">sc</name><op:operator pos:line="142" pos:column="30">.</op:operator><name pos:line="142" pos:column="31">state</name></name> <op:operator pos:line="142" pos:column="37">==</op:operator> <name pos:line="142" pos:column="40">SCE_LUA_IDENTIFIER</name></expr>)</condition><then pos:line="142" pos:column="59"> <block pos:line="142" pos:column="60">{
			<if pos:line="143" pos:column="25">if <condition pos:line="143" pos:column="28">(<expr><op:operator pos:line="143" pos:column="29">!</op:operator><call><name><name pos:line="143" pos:column="30">setWord</name><op:operator pos:line="143" pos:column="37">.</op:operator><name pos:line="143" pos:column="38">Contains</name></name><argument_list pos:line="143" pos:column="46">(<argument><expr><name><name pos:line="143" pos:column="47">sc</name><op:operator pos:line="143" pos:column="49">.</op:operator><name pos:line="143" pos:column="50">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="54">||</op:operator> <call><name><name pos:line="143" pos:column="57">sc</name><op:operator pos:line="143" pos:column="59">.</op:operator><name pos:line="143" pos:column="60">Match</name></name><argument_list pos:line="143" pos:column="65">(<argument><expr><lit:literal type="char" pos:line="143" pos:column="66">'.'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="143" pos:column="71">'.'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="143" pos:column="76"> <block pos:line="143" pos:column="77">{
				<decl_stmt><decl><type><name pos:line="144" pos:column="33">char</name></type> <name><name pos:line="144" pos:column="38">s</name><index pos:line="144" pos:column="39">[<expr><lit:literal type="number" pos:line="144" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">sc</name><op:operator pos:line="145" pos:column="35">.</op:operator><name pos:line="145" pos:column="36">GetCurrent</name></name><argument_list pos:line="145" pos:column="46">(<argument><expr><name pos:line="145" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="145" pos:column="50">sizeof<argument_list pos:line="145" pos:column="56">(<argument><expr><name pos:line="145" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="146" pos:column="33">if <condition pos:line="146" pos:column="36">(<expr><call><name><name pos:line="146" pos:column="37">keywords</name><op:operator pos:line="146" pos:column="45">.</op:operator><name pos:line="146" pos:column="46">InList</name></name><argument_list pos:line="146" pos:column="52">(<argument><expr><name pos:line="146" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="146" pos:column="56"> <block pos:line="146" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="147" pos:column="41">sc</name><op:operator pos:line="147" pos:column="43">.</op:operator><name pos:line="147" pos:column="44">ChangeState</name></name><argument_list pos:line="147" pos:column="55">(<argument><expr><name pos:line="147" pos:column="56">SCE_LUA_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="148" pos:column="35">else <if pos:line="148" pos:column="40">if <condition pos:line="148" pos:column="43">(<expr><call><name><name pos:line="148" pos:column="44">keywords2</name><op:operator pos:line="148" pos:column="53">.</op:operator><name pos:line="148" pos:column="54">InList</name></name><argument_list pos:line="148" pos:column="60">(<argument><expr><name pos:line="148" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="148" pos:column="64"> <block pos:line="148" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="149" pos:column="41">sc</name><op:operator pos:line="149" pos:column="43">.</op:operator><name pos:line="149" pos:column="44">ChangeState</name></name><argument_list pos:line="149" pos:column="55">(<argument><expr><name pos:line="149" pos:column="56">SCE_LUA_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="150" pos:column="35">else <if pos:line="150" pos:column="40">if <condition pos:line="150" pos:column="43">(<expr><call><name><name pos:line="150" pos:column="44">keywords3</name><op:operator pos:line="150" pos:column="53">.</op:operator><name pos:line="150" pos:column="54">InList</name></name><argument_list pos:line="150" pos:column="60">(<argument><expr><name pos:line="150" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="150" pos:column="64"> <block pos:line="150" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="151" pos:column="41">sc</name><op:operator pos:line="151" pos:column="43">.</op:operator><name pos:line="151" pos:column="44">ChangeState</name></name><argument_list pos:line="151" pos:column="55">(<argument><expr><name pos:line="151" pos:column="56">SCE_LUA_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="152" pos:column="35">else <if pos:line="152" pos:column="40">if <condition pos:line="152" pos:column="43">(<expr><call><name><name pos:line="152" pos:column="44">keywords4</name><op:operator pos:line="152" pos:column="53">.</op:operator><name pos:line="152" pos:column="54">InList</name></name><argument_list pos:line="152" pos:column="60">(<argument><expr><name pos:line="152" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="64"> <block pos:line="152" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="153" pos:column="41">sc</name><op:operator pos:line="153" pos:column="43">.</op:operator><name pos:line="153" pos:column="44">ChangeState</name></name><argument_list pos:line="153" pos:column="55">(<argument><expr><name pos:line="153" pos:column="56">SCE_LUA_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="154" pos:column="35">else <if pos:line="154" pos:column="40">if <condition pos:line="154" pos:column="43">(<expr><call><name><name pos:line="154" pos:column="44">keywords5</name><op:operator pos:line="154" pos:column="53">.</op:operator><name pos:line="154" pos:column="54">InList</name></name><argument_list pos:line="154" pos:column="60">(<argument><expr><name pos:line="154" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="154" pos:column="64"> <block pos:line="154" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="155" pos:column="41">sc</name><op:operator pos:line="155" pos:column="43">.</op:operator><name pos:line="155" pos:column="44">ChangeState</name></name><argument_list pos:line="155" pos:column="55">(<argument><expr><name pos:line="155" pos:column="56">SCE_LUA_WORD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="156" pos:column="35">else <if pos:line="156" pos:column="40">if <condition pos:line="156" pos:column="43">(<expr><call><name><name pos:line="156" pos:column="44">keywords6</name><op:operator pos:line="156" pos:column="53">.</op:operator><name pos:line="156" pos:column="54">InList</name></name><argument_list pos:line="156" pos:column="60">(<argument><expr><name pos:line="156" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="64"> <block pos:line="156" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="157" pos:column="41">sc</name><op:operator pos:line="157" pos:column="43">.</op:operator><name pos:line="157" pos:column="44">ChangeState</name></name><argument_list pos:line="157" pos:column="55">(<argument><expr><name pos:line="157" pos:column="56">SCE_LUA_WORD6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="158" pos:column="35">else <if pos:line="158" pos:column="40">if <condition pos:line="158" pos:column="43">(<expr><call><name><name pos:line="158" pos:column="44">keywords7</name><op:operator pos:line="158" pos:column="53">.</op:operator><name pos:line="158" pos:column="54">InList</name></name><argument_list pos:line="158" pos:column="60">(<argument><expr><name pos:line="158" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="64"> <block pos:line="158" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="159" pos:column="41">sc</name><op:operator pos:line="159" pos:column="43">.</op:operator><name pos:line="159" pos:column="44">ChangeState</name></name><argument_list pos:line="159" pos:column="55">(<argument><expr><name pos:line="159" pos:column="56">SCE_LUA_WORD7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="160" pos:column="35">else <if pos:line="160" pos:column="40">if <condition pos:line="160" pos:column="43">(<expr><call><name><name pos:line="160" pos:column="44">keywords8</name><op:operator pos:line="160" pos:column="53">.</op:operator><name pos:line="160" pos:column="54">InList</name></name><argument_list pos:line="160" pos:column="60">(<argument><expr><name pos:line="160" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="160" pos:column="64"> <block pos:line="160" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="161" pos:column="41">sc</name><op:operator pos:line="161" pos:column="43">.</op:operator><name pos:line="161" pos:column="44">ChangeState</name></name><argument_list pos:line="161" pos:column="55">(<argument><expr><name pos:line="161" pos:column="56">SCE_LUA_WORD8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="163" pos:column="33">sc</name><op:operator pos:line="163" pos:column="35">.</op:operator><name pos:line="163" pos:column="36">SetState</name></name><argument_list pos:line="163" pos:column="44">(<argument><expr><name pos:line="163" pos:column="45">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="165" pos:column="19">else <if pos:line="165" pos:column="24">if <condition pos:line="165" pos:column="27">(<expr><name><name pos:line="165" pos:column="28">sc</name><op:operator pos:line="165" pos:column="30">.</op:operator><name pos:line="165" pos:column="31">state</name></name> <op:operator pos:line="165" pos:column="37">==</op:operator> <name pos:line="165" pos:column="40">SCE_LUA_COMMENTLINE</name> <op:operator pos:line="165" pos:column="60">||</op:operator> <name><name pos:line="165" pos:column="63">sc</name><op:operator pos:line="165" pos:column="65">.</op:operator><name pos:line="165" pos:column="66">state</name></name> <op:operator pos:line="165" pos:column="72">==</op:operator> <name pos:line="165" pos:column="75">SCE_LUA_PREPROCESSOR</name></expr>)</condition><then pos:line="165" pos:column="96"> <block pos:line="165" pos:column="97">{
			<if pos:line="166" pos:column="25">if <condition pos:line="166" pos:column="28">(<expr><name><name pos:line="166" pos:column="29">sc</name><op:operator pos:line="166" pos:column="31">.</op:operator><name pos:line="166" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="166" pos:column="42"> <block pos:line="166" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="167" pos:column="33">sc</name><op:operator pos:line="167" pos:column="35">.</op:operator><name pos:line="167" pos:column="36">ForwardSetState</name></name><argument_list pos:line="167" pos:column="51">(<argument><expr><name pos:line="167" pos:column="52">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="169" pos:column="19">else <if pos:line="169" pos:column="24">if <condition pos:line="169" pos:column="27">(<expr><name><name pos:line="169" pos:column="28">sc</name><op:operator pos:line="169" pos:column="30">.</op:operator><name pos:line="169" pos:column="31">state</name></name> <op:operator pos:line="169" pos:column="37">==</op:operator> <name pos:line="169" pos:column="40">SCE_LUA_STRING</name></expr>)</condition><then pos:line="169" pos:column="55"> <block pos:line="169" pos:column="56">{
			<if pos:line="170" pos:column="25">if <condition pos:line="170" pos:column="28">(<expr><name pos:line="170" pos:column="29">stringWs</name></expr>)</condition><then pos:line="170" pos:column="38"> <block pos:line="170" pos:column="39">{
				<if pos:line="171" pos:column="33">if <condition pos:line="171" pos:column="36">(<expr><op:operator pos:line="171" pos:column="37">!</op:operator><call><name pos:line="171" pos:column="38">IsASpace</name><argument_list pos:line="171" pos:column="46">(<argument><expr><name><name pos:line="171" pos:column="47">sc</name><op:operator pos:line="171" pos:column="49">.</op:operator><name pos:line="171" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="171" pos:column="54">
					<expr_stmt><expr><name pos:line="172" pos:column="41">stringWs</name> <op:operator pos:line="172" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="172" pos:column="52">0</lit:literal></expr>;</expr_stmt></then></if>
			}</block></then></if>
			<if pos:line="174" pos:column="25">if <condition pos:line="174" pos:column="28">(<expr><name><name pos:line="174" pos:column="29">sc</name><op:operator pos:line="174" pos:column="31">.</op:operator><name pos:line="174" pos:column="32">ch</name></name> <op:operator pos:line="174" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="174" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="174" pos:column="43"> <block pos:line="174" pos:column="44">{
				<if pos:line="175" pos:column="33">if <condition pos:line="175" pos:column="36">(<expr><call><name><name pos:line="175" pos:column="37">setEscapeSkip</name><op:operator pos:line="175" pos:column="50">.</op:operator><name pos:line="175" pos:column="51">Contains</name></name><argument_list pos:line="175" pos:column="59">(<argument><expr><name><name pos:line="175" pos:column="60">sc</name><op:operator pos:line="175" pos:column="62">.</op:operator><name pos:line="175" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="175" pos:column="71"> <block pos:line="175" pos:column="72">{
					<expr_stmt><expr><call><name><name pos:line="176" pos:column="41">sc</name><op:operator pos:line="176" pos:column="43">.</op:operator><name pos:line="176" pos:column="44">Forward</name></name><argument_list pos:line="176" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="177" pos:column="35">else <if pos:line="177" pos:column="40">if <condition pos:line="177" pos:column="43">(<expr><name><name pos:line="177" pos:column="44">sc</name><op:operator pos:line="177" pos:column="46">.</op:operator><name pos:line="177" pos:column="47">chNext</name></name> <op:operator pos:line="177" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="177" pos:column="57">'*'</lit:literal></expr>)</condition><then pos:line="177" pos:column="61"> <block pos:line="177" pos:column="62">{
					<expr_stmt><expr><call><name><name pos:line="178" pos:column="41">sc</name><op:operator pos:line="178" pos:column="43">.</op:operator><name pos:line="178" pos:column="44">Forward</name></name><argument_list pos:line="178" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="179" pos:column="41">stringWs</name> <op:operator pos:line="179" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="179" pos:column="52">0x100</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="181" pos:column="27">else <if pos:line="181" pos:column="32">if <condition pos:line="181" pos:column="35">(<expr><name><name pos:line="181" pos:column="36">sc</name><op:operator pos:line="181" pos:column="38">.</op:operator><name pos:line="181" pos:column="39">ch</name></name> <op:operator pos:line="181" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="181" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="181" pos:column="50"> <block pos:line="181" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="182" pos:column="33">sc</name><op:operator pos:line="182" pos:column="35">.</op:operator><name pos:line="182" pos:column="36">ForwardSetState</name></name><argument_list pos:line="182" pos:column="51">(<argument><expr><name pos:line="182" pos:column="52">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="183" pos:column="27">else <if pos:line="183" pos:column="32">if <condition pos:line="183" pos:column="35">(<expr><name pos:line="183" pos:column="36">stringWs</name> <op:operator pos:line="183" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="183" pos:column="48">0</lit:literal> <op:operator pos:line="183" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="183" pos:column="53">sc</name><op:operator pos:line="183" pos:column="55">.</op:operator><name pos:line="183" pos:column="56">atLineEnd</name></name></expr>)</condition><then pos:line="183" pos:column="66"> <block pos:line="183" pos:column="67">{
				<expr_stmt><expr><call><name><name pos:line="184" pos:column="33">sc</name><op:operator pos:line="184" pos:column="35">.</op:operator><name pos:line="184" pos:column="36">ChangeState</name></name><argument_list pos:line="184" pos:column="47">(<argument><expr><name pos:line="184" pos:column="48">SCE_LUA_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="185" pos:column="33">sc</name><op:operator pos:line="185" pos:column="35">.</op:operator><name pos:line="185" pos:column="36">ForwardSetState</name></name><argument_list pos:line="185" pos:column="51">(<argument><expr><name pos:line="185" pos:column="52">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then> <else pos:line="187" pos:column="19">else <if pos:line="187" pos:column="24">if <condition pos:line="187" pos:column="27">(<expr><name><name pos:line="187" pos:column="28">sc</name><op:operator pos:line="187" pos:column="30">.</op:operator><name pos:line="187" pos:column="31">state</name></name> <op:operator pos:line="187" pos:column="37">==</op:operator> <name pos:line="187" pos:column="40">SCE_LUA_CHARACTER</name></expr>)</condition><then pos:line="187" pos:column="58"> <block pos:line="187" pos:column="59">{
			<if pos:line="188" pos:column="25">if <condition pos:line="188" pos:column="28">(<expr><name pos:line="188" pos:column="29">stringWs</name></expr>)</condition><then pos:line="188" pos:column="38"> <block pos:line="188" pos:column="39">{
				<if pos:line="189" pos:column="33">if <condition pos:line="189" pos:column="36">(<expr><op:operator pos:line="189" pos:column="37">!</op:operator><call><name pos:line="189" pos:column="38">IsASpace</name><argument_list pos:line="189" pos:column="46">(<argument><expr><name><name pos:line="189" pos:column="47">sc</name><op:operator pos:line="189" pos:column="49">.</op:operator><name pos:line="189" pos:column="50">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="54">
					<expr_stmt><expr><name pos:line="190" pos:column="41">stringWs</name> <op:operator pos:line="190" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="190" pos:column="52">0</lit:literal></expr>;</expr_stmt></then></if>
			}</block></then></if>
			<if pos:line="192" pos:column="25">if <condition pos:line="192" pos:column="28">(<expr><name><name pos:line="192" pos:column="29">sc</name><op:operator pos:line="192" pos:column="31">.</op:operator><name pos:line="192" pos:column="32">ch</name></name> <op:operator pos:line="192" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="192" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="192" pos:column="43"> <block pos:line="192" pos:column="44">{
				<if pos:line="193" pos:column="33">if <condition pos:line="193" pos:column="36">(<expr><call><name><name pos:line="193" pos:column="37">setEscapeSkip</name><op:operator pos:line="193" pos:column="50">.</op:operator><name pos:line="193" pos:column="51">Contains</name></name><argument_list pos:line="193" pos:column="59">(<argument><expr><name><name pos:line="193" pos:column="60">sc</name><op:operator pos:line="193" pos:column="62">.</op:operator><name pos:line="193" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="71"> <block pos:line="193" pos:column="72">{
					<expr_stmt><expr><call><name><name pos:line="194" pos:column="41">sc</name><op:operator pos:line="194" pos:column="43">.</op:operator><name pos:line="194" pos:column="44">Forward</name></name><argument_list pos:line="194" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="195" pos:column="35">else <if pos:line="195" pos:column="40">if <condition pos:line="195" pos:column="43">(<expr><name><name pos:line="195" pos:column="44">sc</name><op:operator pos:line="195" pos:column="46">.</op:operator><name pos:line="195" pos:column="47">chNext</name></name> <op:operator pos:line="195" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="195" pos:column="57">'*'</lit:literal></expr>)</condition><then pos:line="195" pos:column="61"> <block pos:line="195" pos:column="62">{
					<expr_stmt><expr><call><name><name pos:line="196" pos:column="41">sc</name><op:operator pos:line="196" pos:column="43">.</op:operator><name pos:line="196" pos:column="44">Forward</name></name><argument_list pos:line="196" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="197" pos:column="41">stringWs</name> <op:operator pos:line="197" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="197" pos:column="52">0x100</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="199" pos:column="27">else <if pos:line="199" pos:column="32">if <condition pos:line="199" pos:column="35">(<expr><name><name pos:line="199" pos:column="36">sc</name><op:operator pos:line="199" pos:column="38">.</op:operator><name pos:line="199" pos:column="39">ch</name></name> <op:operator pos:line="199" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="199" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="199" pos:column="50"> <block pos:line="199" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="200" pos:column="33">sc</name><op:operator pos:line="200" pos:column="35">.</op:operator><name pos:line="200" pos:column="36">ForwardSetState</name></name><argument_list pos:line="200" pos:column="51">(<argument><expr><name pos:line="200" pos:column="52">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="201" pos:column="27">else <if pos:line="201" pos:column="32">if <condition pos:line="201" pos:column="35">(<expr><name pos:line="201" pos:column="36">stringWs</name> <op:operator pos:line="201" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="201" pos:column="48">0</lit:literal> <op:operator pos:line="201" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="201" pos:column="53">sc</name><op:operator pos:line="201" pos:column="55">.</op:operator><name pos:line="201" pos:column="56">atLineEnd</name></name></expr>)</condition><then pos:line="201" pos:column="66"> <block pos:line="201" pos:column="67">{
				<expr_stmt><expr><call><name><name pos:line="202" pos:column="33">sc</name><op:operator pos:line="202" pos:column="35">.</op:operator><name pos:line="202" pos:column="36">ChangeState</name></name><argument_list pos:line="202" pos:column="47">(<argument><expr><name pos:line="202" pos:column="48">SCE_LUA_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="203" pos:column="33">sc</name><op:operator pos:line="203" pos:column="35">.</op:operator><name pos:line="203" pos:column="36">ForwardSetState</name></name><argument_list pos:line="203" pos:column="51">(<argument><expr><name pos:line="203" pos:column="52">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then> <else pos:line="205" pos:column="19">else <if pos:line="205" pos:column="24">if <condition pos:line="205" pos:column="27">(<expr><name><name pos:line="205" pos:column="28">sc</name><op:operator pos:line="205" pos:column="30">.</op:operator><name pos:line="205" pos:column="31">state</name></name> <op:operator pos:line="205" pos:column="37">==</op:operator> <name pos:line="205" pos:column="40">SCE_LUA_LITERALSTRING</name> <op:operator pos:line="205" pos:column="62">||</op:operator> <name><name pos:line="205" pos:column="65">sc</name><op:operator pos:line="205" pos:column="67">.</op:operator><name pos:line="205" pos:column="68">state</name></name> <op:operator pos:line="205" pos:column="74">==</op:operator> <name pos:line="205" pos:column="77">SCE_LUA_COMMENT</name></expr>)</condition><then pos:line="205" pos:column="93"> <block pos:line="205" pos:column="94">{
			<if pos:line="206" pos:column="25">if <condition pos:line="206" pos:column="28">(<expr><name><name pos:line="206" pos:column="29">sc</name><op:operator pos:line="206" pos:column="31">.</op:operator><name pos:line="206" pos:column="32">ch</name></name> <op:operator pos:line="206" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="206" pos:column="38">'['</lit:literal></expr>)</condition><then pos:line="206" pos:column="42"> <block pos:line="206" pos:column="43">{
				<decl_stmt><decl><type><name pos:line="207" pos:column="33">int</name></type> <name pos:line="207" pos:column="37">sep</name> <init pos:line="207" pos:column="41">= <expr><call><name pos:line="207" pos:column="43">LongDelimCheck</name><argument_list pos:line="207" pos:column="57">(<argument><expr><name pos:line="207" pos:column="58">sc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="208" pos:column="33">if <condition pos:line="208" pos:column="36">(<expr><name pos:line="208" pos:column="37">sep</name> <op:operator pos:line="208" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="208" pos:column="44">1</lit:literal> <op:operator pos:line="208" pos:column="46">&amp;&amp;</op:operator> <name pos:line="208" pos:column="49">sepCount</name> <op:operator pos:line="208" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="208" pos:column="61">1</lit:literal></expr>)</condition><then pos:line="208" pos:column="63"> <block pos:line="208" pos:column="64">{    <comment type="line" pos:line="208" pos:column="69">// [[-only allowed to nest</comment>
					<expr_stmt><expr><name pos:line="209" pos:column="41">nestLevel</name><op:operator pos:line="209" pos:column="50">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="210" pos:column="41">sc</name><op:operator pos:line="210" pos:column="43">.</op:operator><name pos:line="210" pos:column="44">Forward</name></name><argument_list pos:line="210" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="212" pos:column="27">else <if pos:line="212" pos:column="32">if <condition pos:line="212" pos:column="35">(<expr><name><name pos:line="212" pos:column="36">sc</name><op:operator pos:line="212" pos:column="38">.</op:operator><name pos:line="212" pos:column="39">ch</name></name> <op:operator pos:line="212" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="212" pos:column="45">']'</lit:literal></expr>)</condition><then pos:line="212" pos:column="49"> <block pos:line="212" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="213" pos:column="33">int</name></type> <name pos:line="213" pos:column="37">sep</name> <init pos:line="213" pos:column="41">= <expr><call><name pos:line="213" pos:column="43">LongDelimCheck</name><argument_list pos:line="213" pos:column="57">(<argument><expr><name pos:line="213" pos:column="58">sc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="214" pos:column="33">if <condition pos:line="214" pos:column="36">(<expr><name pos:line="214" pos:column="37">sep</name> <op:operator pos:line="214" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="214" pos:column="44">1</lit:literal> <op:operator pos:line="214" pos:column="46">&amp;&amp;</op:operator> <name pos:line="214" pos:column="49">sepCount</name> <op:operator pos:line="214" pos:column="58">==</op:operator> <lit:literal type="number" pos:line="214" pos:column="61">1</lit:literal></expr>)</condition><then pos:line="214" pos:column="63"> <block pos:line="214" pos:column="64">{    <comment type="line" pos:line="214" pos:column="69">// un-nest with ]]-only</comment>
					<expr_stmt><expr><name pos:line="215" pos:column="41">nestLevel</name><op:operator pos:line="215" pos:column="50">--</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="216" pos:column="41">sc</name><op:operator pos:line="216" pos:column="43">.</op:operator><name pos:line="216" pos:column="44">Forward</name></name><argument_list pos:line="216" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<if pos:line="217" pos:column="41">if <condition pos:line="217" pos:column="44">(<expr><name pos:line="217" pos:column="45">nestLevel</name> <op:operator pos:line="217" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="217" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="217" pos:column="60"> <block pos:line="217" pos:column="61">{
						<expr_stmt><expr><call><name><name pos:line="218" pos:column="49">sc</name><op:operator pos:line="218" pos:column="51">.</op:operator><name pos:line="218" pos:column="52">ForwardSetState</name></name><argument_list pos:line="218" pos:column="67">(<argument><expr><name pos:line="218" pos:column="68">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="220" pos:column="35">else <if pos:line="220" pos:column="40">if <condition pos:line="220" pos:column="43">(<expr><name pos:line="220" pos:column="44">sep</name> <op:operator pos:line="220" pos:column="48">&gt;</op:operator> <lit:literal type="number" pos:line="220" pos:column="50">1</lit:literal> <op:operator pos:line="220" pos:column="52">&amp;&amp;</op:operator> <name pos:line="220" pos:column="55">sep</name> <op:operator pos:line="220" pos:column="59">==</op:operator> <name pos:line="220" pos:column="62">sepCount</name></expr>)</condition><then pos:line="220" pos:column="71"> <block pos:line="220" pos:column="72">{   <comment type="line" pos:line="220" pos:column="76">// ]=]-style delim</comment>
					<expr_stmt><expr><call><name><name pos:line="221" pos:column="41">sc</name><op:operator pos:line="221" pos:column="43">.</op:operator><name pos:line="221" pos:column="44">Forward</name></name><argument_list pos:line="221" pos:column="51">(<argument><expr><name pos:line="221" pos:column="52">sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="222" pos:column="41">sc</name><op:operator pos:line="222" pos:column="43">.</op:operator><name pos:line="222" pos:column="44">ForwardSetState</name></name><argument_list pos:line="222" pos:column="59">(<argument><expr><name pos:line="222" pos:column="60">SCE_LUA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="227" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="228" pos:column="17">if <condition pos:line="228" pos:column="20">(<expr><name><name pos:line="228" pos:column="21">sc</name><op:operator pos:line="228" pos:column="23">.</op:operator><name pos:line="228" pos:column="24">state</name></name> <op:operator pos:line="228" pos:column="30">==</op:operator> <name pos:line="228" pos:column="33">SCE_LUA_DEFAULT</name></expr>)</condition><then pos:line="228" pos:column="49"> <block pos:line="228" pos:column="50">{
			<if pos:line="229" pos:column="25">if <condition pos:line="229" pos:column="28">(<expr><call><name pos:line="229" pos:column="29">IsADigit</name><argument_list pos:line="229" pos:column="37">(<argument><expr><name><name pos:line="229" pos:column="38">sc</name><op:operator pos:line="229" pos:column="40">.</op:operator><name pos:line="229" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="229" pos:column="45">||</op:operator> <op:operator pos:line="229" pos:column="48">(</op:operator><name><name pos:line="229" pos:column="49">sc</name><op:operator pos:line="229" pos:column="51">.</op:operator><name pos:line="229" pos:column="52">ch</name></name> <op:operator pos:line="229" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="229" pos:column="58">'.'</lit:literal> <op:operator pos:line="229" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="229" pos:column="65">IsADigit</name><argument_list pos:line="229" pos:column="73">(<argument><expr><name><name pos:line="229" pos:column="74">sc</name><op:operator pos:line="229" pos:column="76">.</op:operator><name pos:line="229" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="229" pos:column="84">)</op:operator></expr>)</condition><then pos:line="229" pos:column="86"> <block pos:line="229" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="230" pos:column="33">sc</name><op:operator pos:line="230" pos:column="35">.</op:operator><name pos:line="230" pos:column="36">SetState</name></name><argument_list pos:line="230" pos:column="44">(<argument><expr><name pos:line="230" pos:column="45">SCE_LUA_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="231" pos:column="33">if <condition pos:line="231" pos:column="36">(<expr><name><name pos:line="231" pos:column="37">sc</name><op:operator pos:line="231" pos:column="39">.</op:operator><name pos:line="231" pos:column="40">ch</name></name> <op:operator pos:line="231" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="231" pos:column="46">'0'</lit:literal> <op:operator pos:line="231" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="231" pos:column="53">toupper</name><argument_list pos:line="231" pos:column="60">(<argument><expr><name><name pos:line="231" pos:column="61">sc</name><op:operator pos:line="231" pos:column="63">.</op:operator><name pos:line="231" pos:column="64">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="231" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="231" pos:column="75">'X'</lit:literal></expr>)</condition><then pos:line="231" pos:column="79"> <block pos:line="231" pos:column="80">{
					<expr_stmt><expr><call><name><name pos:line="232" pos:column="41">sc</name><op:operator pos:line="232" pos:column="43">.</op:operator><name pos:line="232" pos:column="44">Forward</name></name><argument_list pos:line="232" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="234" pos:column="27">else <if pos:line="234" pos:column="32">if <condition pos:line="234" pos:column="35">(<expr><call><name><name pos:line="234" pos:column="36">setWordStart</name><op:operator pos:line="234" pos:column="48">.</op:operator><name pos:line="234" pos:column="49">Contains</name></name><argument_list pos:line="234" pos:column="57">(<argument><expr><name><name pos:line="234" pos:column="58">sc</name><op:operator pos:line="234" pos:column="60">.</op:operator><name pos:line="234" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="234" pos:column="65"> <block pos:line="234" pos:column="66">{
				<expr_stmt><expr><call><name><name pos:line="235" pos:column="33">sc</name><op:operator pos:line="235" pos:column="35">.</op:operator><name pos:line="235" pos:column="36">SetState</name></name><argument_list pos:line="235" pos:column="44">(<argument><expr><name pos:line="235" pos:column="45">SCE_LUA_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="236" pos:column="27">else <if pos:line="236" pos:column="32">if <condition pos:line="236" pos:column="35">(<expr><name><name pos:line="236" pos:column="36">sc</name><op:operator pos:line="236" pos:column="38">.</op:operator><name pos:line="236" pos:column="39">ch</name></name> <op:operator pos:line="236" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="236" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="236" pos:column="50"> <block pos:line="236" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="237" pos:column="33">sc</name><op:operator pos:line="237" pos:column="35">.</op:operator><name pos:line="237" pos:column="36">SetState</name></name><argument_list pos:line="237" pos:column="44">(<argument><expr><name pos:line="237" pos:column="45">SCE_LUA_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="238" pos:column="33">stringWs</name> <op:operator pos:line="238" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="238" pos:column="44">0</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="239" pos:column="27">else <if pos:line="239" pos:column="32">if <condition pos:line="239" pos:column="35">(<expr><name><name pos:line="239" pos:column="36">sc</name><op:operator pos:line="239" pos:column="38">.</op:operator><name pos:line="239" pos:column="39">ch</name></name> <op:operator pos:line="239" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="239" pos:column="50"> <block pos:line="239" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="240" pos:column="33">sc</name><op:operator pos:line="240" pos:column="35">.</op:operator><name pos:line="240" pos:column="36">SetState</name></name><argument_list pos:line="240" pos:column="44">(<argument><expr><name pos:line="240" pos:column="45">SCE_LUA_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="241" pos:column="33">stringWs</name> <op:operator pos:line="241" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="241" pos:column="44">0</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="242" pos:column="27">else <if pos:line="242" pos:column="32">if <condition pos:line="242" pos:column="35">(<expr><name><name pos:line="242" pos:column="36">sc</name><op:operator pos:line="242" pos:column="38">.</op:operator><name pos:line="242" pos:column="39">ch</name></name> <op:operator pos:line="242" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="242" pos:column="45">'['</lit:literal></expr>)</condition><then pos:line="242" pos:column="49"> <block pos:line="242" pos:column="50">{
				<expr_stmt><expr><name pos:line="243" pos:column="33">sepCount</name> <op:operator pos:line="243" pos:column="42">=</op:operator> <call><name pos:line="243" pos:column="44">LongDelimCheck</name><argument_list pos:line="243" pos:column="58">(<argument><expr><name pos:line="243" pos:column="59">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="244" pos:column="33">if <condition pos:line="244" pos:column="36">(<expr><name pos:line="244" pos:column="37">sepCount</name> <op:operator pos:line="244" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="244" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="244" pos:column="51"> <block pos:line="244" pos:column="52">{
					<expr_stmt><expr><call><name><name pos:line="245" pos:column="41">sc</name><op:operator pos:line="245" pos:column="43">.</op:operator><name pos:line="245" pos:column="44">SetState</name></name><argument_list pos:line="245" pos:column="52">(<argument><expr><name pos:line="245" pos:column="53">SCE_LUA_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="246" pos:column="35">else <block pos:line="246" pos:column="40">{
					<expr_stmt><expr><name pos:line="247" pos:column="41">nestLevel</name> <op:operator pos:line="247" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="247" pos:column="53">1</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="248" pos:column="41">sc</name><op:operator pos:line="248" pos:column="43">.</op:operator><name pos:line="248" pos:column="44">SetState</name></name><argument_list pos:line="248" pos:column="52">(<argument><expr><name pos:line="248" pos:column="53">SCE_LUA_LITERALSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="249" pos:column="41">sc</name><op:operator pos:line="249" pos:column="43">.</op:operator><name pos:line="249" pos:column="44">Forward</name></name><argument_list pos:line="249" pos:column="51">(<argument><expr><name pos:line="249" pos:column="52">sepCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="251" pos:column="27">else <if pos:line="251" pos:column="32">if <condition pos:line="251" pos:column="35">(<expr><call><name><name pos:line="251" pos:column="36">sc</name><op:operator pos:line="251" pos:column="38">.</op:operator><name pos:line="251" pos:column="39">Match</name></name><argument_list pos:line="251" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="251" pos:column="45">'-'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="251" pos:column="50">'-'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="251" pos:column="55"> <block pos:line="251" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="252" pos:column="33">sc</name><op:operator pos:line="252" pos:column="35">.</op:operator><name pos:line="252" pos:column="36">SetState</name></name><argument_list pos:line="252" pos:column="44">(<argument><expr><name pos:line="252" pos:column="45">SCE_LUA_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="253" pos:column="33">if <condition pos:line="253" pos:column="36">(<expr><call><name><name pos:line="253" pos:column="37">sc</name><op:operator pos:line="253" pos:column="39">.</op:operator><name pos:line="253" pos:column="40">Match</name></name><argument_list pos:line="253" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="253" pos:column="46">"--["</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="253" pos:column="53"> <block pos:line="253" pos:column="54">{
					<expr_stmt><expr><call><name><name pos:line="254" pos:column="41">sc</name><op:operator pos:line="254" pos:column="43">.</op:operator><name pos:line="254" pos:column="44">Forward</name></name><argument_list pos:line="254" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="254" pos:column="52">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="255" pos:column="41">sepCount</name> <op:operator pos:line="255" pos:column="50">=</op:operator> <call><name pos:line="255" pos:column="52">LongDelimCheck</name><argument_list pos:line="255" pos:column="66">(<argument><expr><name pos:line="255" pos:column="67">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="256" pos:column="41">if <condition pos:line="256" pos:column="44">(<expr><name pos:line="256" pos:column="45">sepCount</name> <op:operator pos:line="256" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="256" pos:column="56">0</lit:literal></expr>)</condition><then pos:line="256" pos:column="58"> <block pos:line="256" pos:column="59">{
						<expr_stmt><expr><name pos:line="257" pos:column="49">nestLevel</name> <op:operator pos:line="257" pos:column="59">=</op:operator> <lit:literal type="number" pos:line="257" pos:column="61">1</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="258" pos:column="49">sc</name><op:operator pos:line="258" pos:column="51">.</op:operator><name pos:line="258" pos:column="52">ChangeState</name></name><argument_list pos:line="258" pos:column="63">(<argument><expr><name pos:line="258" pos:column="64">SCE_LUA_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="259" pos:column="49">sc</name><op:operator pos:line="259" pos:column="51">.</op:operator><name pos:line="259" pos:column="52">Forward</name></name><argument_list pos:line="259" pos:column="59">(<argument><expr><name pos:line="259" pos:column="60">sepCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="261" pos:column="35">else <block pos:line="261" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="262" pos:column="41">sc</name><op:operator pos:line="262" pos:column="43">.</op:operator><name pos:line="262" pos:column="44">Forward</name></name><argument_list pos:line="262" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="264" pos:column="27">else <if pos:line="264" pos:column="32">if <condition pos:line="264" pos:column="35">(<expr><name><name pos:line="264" pos:column="36">sc</name><op:operator pos:line="264" pos:column="38">.</op:operator><name pos:line="264" pos:column="39">atLineStart</name></name> <op:operator pos:line="264" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="264" pos:column="54">sc</name><op:operator pos:line="264" pos:column="56">.</op:operator><name pos:line="264" pos:column="57">Match</name></name><argument_list pos:line="264" pos:column="62">(<argument><expr><lit:literal type="char" pos:line="264" pos:column="63">'$'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="264" pos:column="68"> <block pos:line="264" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="265" pos:column="33">sc</name><op:operator pos:line="265" pos:column="35">.</op:operator><name pos:line="265" pos:column="36">SetState</name></name><argument_list pos:line="265" pos:column="44">(<argument><expr><name pos:line="265" pos:column="45">SCE_LUA_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="265" pos:column="73">// Obsolete since Lua 4.0, but still in old code</comment>
			}</block></then> <else pos:line="266" pos:column="27">else <if pos:line="266" pos:column="32">if <condition pos:line="266" pos:column="35">(<expr><call><name><name pos:line="266" pos:column="36">setLuaOperator</name><op:operator pos:line="266" pos:column="50">.</op:operator><name pos:line="266" pos:column="51">Contains</name></name><argument_list pos:line="266" pos:column="59">(<argument><expr><name><name pos:line="266" pos:column="60">sc</name><op:operator pos:line="266" pos:column="62">.</op:operator><name pos:line="266" pos:column="63">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="266" pos:column="67"> <block pos:line="266" pos:column="68">{
				<expr_stmt><expr><call><name><name pos:line="267" pos:column="33">sc</name><op:operator pos:line="267" pos:column="35">.</op:operator><name pos:line="267" pos:column="36">SetState</name></name><argument_list pos:line="267" pos:column="44">(<argument><expr><name pos:line="267" pos:column="45">SCE_LUA_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>

	<if pos:line="272" pos:column="9">if <condition pos:line="272" pos:column="12">(<expr><call><name><name pos:line="272" pos:column="13">setWord</name><op:operator pos:line="272" pos:column="20">.</op:operator><name pos:line="272" pos:column="21">Contains</name></name><argument_list pos:line="272" pos:column="29">(<argument><expr><name><name pos:line="272" pos:column="30">sc</name><op:operator pos:line="272" pos:column="32">.</op:operator><name pos:line="272" pos:column="33">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="272" pos:column="41"> <block pos:line="272" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="273" pos:column="17">char</name></type> <name><name pos:line="273" pos:column="22">s</name><index pos:line="273" pos:column="23">[<expr><lit:literal type="number" pos:line="273" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="274" pos:column="17">sc</name><op:operator pos:line="274" pos:column="19">.</op:operator><name pos:line="274" pos:column="20">GetCurrent</name></name><argument_list pos:line="274" pos:column="30">(<argument><expr><name pos:line="274" pos:column="31">s</name></expr></argument>, <argument><expr><sizeof pos:line="274" pos:column="34">sizeof<argument_list pos:line="274" pos:column="40">(<argument><expr><name pos:line="274" pos:column="41">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="275" pos:column="17">if <condition pos:line="275" pos:column="20">(<expr><call><name><name pos:line="275" pos:column="21">keywords</name><op:operator pos:line="275" pos:column="29">.</op:operator><name pos:line="275" pos:column="30">InList</name></name><argument_list pos:line="275" pos:column="36">(<argument><expr><name pos:line="275" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="275" pos:column="40"> <block pos:line="275" pos:column="41">{
			<expr_stmt><expr><call><name><name pos:line="276" pos:column="25">sc</name><op:operator pos:line="276" pos:column="27">.</op:operator><name pos:line="276" pos:column="28">ChangeState</name></name><argument_list pos:line="276" pos:column="39">(<argument><expr><name pos:line="276" pos:column="40">SCE_LUA_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="277" pos:column="19">else <if pos:line="277" pos:column="24">if <condition pos:line="277" pos:column="27">(<expr><call><name><name pos:line="277" pos:column="28">keywords2</name><op:operator pos:line="277" pos:column="37">.</op:operator><name pos:line="277" pos:column="38">InList</name></name><argument_list pos:line="277" pos:column="44">(<argument><expr><name pos:line="277" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="277" pos:column="48"> <block pos:line="277" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="278" pos:column="25">sc</name><op:operator pos:line="278" pos:column="27">.</op:operator><name pos:line="278" pos:column="28">ChangeState</name></name><argument_list pos:line="278" pos:column="39">(<argument><expr><name pos:line="278" pos:column="40">SCE_LUA_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="279" pos:column="19">else <if pos:line="279" pos:column="24">if <condition pos:line="279" pos:column="27">(<expr><call><name><name pos:line="279" pos:column="28">keywords3</name><op:operator pos:line="279" pos:column="37">.</op:operator><name pos:line="279" pos:column="38">InList</name></name><argument_list pos:line="279" pos:column="44">(<argument><expr><name pos:line="279" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="279" pos:column="48"> <block pos:line="279" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="280" pos:column="25">sc</name><op:operator pos:line="280" pos:column="27">.</op:operator><name pos:line="280" pos:column="28">ChangeState</name></name><argument_list pos:line="280" pos:column="39">(<argument><expr><name pos:line="280" pos:column="40">SCE_LUA_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="281" pos:column="19">else <if pos:line="281" pos:column="24">if <condition pos:line="281" pos:column="27">(<expr><call><name><name pos:line="281" pos:column="28">keywords4</name><op:operator pos:line="281" pos:column="37">.</op:operator><name pos:line="281" pos:column="38">InList</name></name><argument_list pos:line="281" pos:column="44">(<argument><expr><name pos:line="281" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="281" pos:column="48"> <block pos:line="281" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="282" pos:column="25">sc</name><op:operator pos:line="282" pos:column="27">.</op:operator><name pos:line="282" pos:column="28">ChangeState</name></name><argument_list pos:line="282" pos:column="39">(<argument><expr><name pos:line="282" pos:column="40">SCE_LUA_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="283" pos:column="19">else <if pos:line="283" pos:column="24">if <condition pos:line="283" pos:column="27">(<expr><call><name><name pos:line="283" pos:column="28">keywords5</name><op:operator pos:line="283" pos:column="37">.</op:operator><name pos:line="283" pos:column="38">InList</name></name><argument_list pos:line="283" pos:column="44">(<argument><expr><name pos:line="283" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="283" pos:column="48"> <block pos:line="283" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="284" pos:column="25">sc</name><op:operator pos:line="284" pos:column="27">.</op:operator><name pos:line="284" pos:column="28">ChangeState</name></name><argument_list pos:line="284" pos:column="39">(<argument><expr><name pos:line="284" pos:column="40">SCE_LUA_WORD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="285" pos:column="19">else <if pos:line="285" pos:column="24">if <condition pos:line="285" pos:column="27">(<expr><call><name><name pos:line="285" pos:column="28">keywords6</name><op:operator pos:line="285" pos:column="37">.</op:operator><name pos:line="285" pos:column="38">InList</name></name><argument_list pos:line="285" pos:column="44">(<argument><expr><name pos:line="285" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="285" pos:column="48"> <block pos:line="285" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="286" pos:column="25">sc</name><op:operator pos:line="286" pos:column="27">.</op:operator><name pos:line="286" pos:column="28">ChangeState</name></name><argument_list pos:line="286" pos:column="39">(<argument><expr><name pos:line="286" pos:column="40">SCE_LUA_WORD6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="287" pos:column="19">else <if pos:line="287" pos:column="24">if <condition pos:line="287" pos:column="27">(<expr><call><name><name pos:line="287" pos:column="28">keywords7</name><op:operator pos:line="287" pos:column="37">.</op:operator><name pos:line="287" pos:column="38">InList</name></name><argument_list pos:line="287" pos:column="44">(<argument><expr><name pos:line="287" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="287" pos:column="48"> <block pos:line="287" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="288" pos:column="25">sc</name><op:operator pos:line="288" pos:column="27">.</op:operator><name pos:line="288" pos:column="28">ChangeState</name></name><argument_list pos:line="288" pos:column="39">(<argument><expr><name pos:line="288" pos:column="40">SCE_LUA_WORD7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="289" pos:column="19">else <if pos:line="289" pos:column="24">if <condition pos:line="289" pos:column="27">(<expr><call><name><name pos:line="289" pos:column="28">keywords8</name><op:operator pos:line="289" pos:column="37">.</op:operator><name pos:line="289" pos:column="38">InList</name></name><argument_list pos:line="289" pos:column="44">(<argument><expr><name pos:line="289" pos:column="45">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="289" pos:column="48"> <block pos:line="289" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="290" pos:column="25">sc</name><op:operator pos:line="290" pos:column="27">.</op:operator><name pos:line="290" pos:column="28">ChangeState</name></name><argument_list pos:line="290" pos:column="39">(<argument><expr><name pos:line="290" pos:column="40">SCE_LUA_WORD8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="294" pos:column="9">sc</name><op:operator pos:line="294" pos:column="11">.</op:operator><name pos:line="294" pos:column="12">Complete</name></name><argument_list pos:line="294" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="297" pos:column="1">static</specifier> <name pos:line="297" pos:column="8">void</name></type> <name pos:line="297" pos:column="13">FoldLuaDoc</name><parameter_list pos:line="297" pos:column="23">(<param><decl><type><name pos:line="297" pos:column="24">unsigned</name> <name pos:line="297" pos:column="33">int</name></type> <name pos:line="297" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="297" pos:column="47">int</name></type> <name pos:line="297" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="297" pos:column="59">int</name></type></decl></param> <comment type="block" pos:line="297" pos:column="63">/* initStyle */</comment>, <param><decl><type><name><name pos:line="297" pos:column="80">WordList</name> <type:modifier pos:line="297" pos:column="89">*</type:modifier><index pos:line="297" pos:column="90">[]</index></name></type></decl></param>,
                       <param><decl><type><name pos:line="298" pos:column="24">Accessor</name> <type:modifier pos:line="298" pos:column="33">&amp;</type:modifier></type><name pos:line="298" pos:column="34">styler</name></decl></param>)</parameter_list> <block pos:line="298" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="299" pos:column="9">unsigned</name> <name pos:line="299" pos:column="18">int</name></type> <name pos:line="299" pos:column="22">lengthDoc</name> <init pos:line="299" pos:column="32">= <expr><name pos:line="299" pos:column="34">startPos</name> <op:operator pos:line="299" pos:column="43">+</op:operator> <name pos:line="299" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="300" pos:column="9">int</name></type> <name pos:line="300" pos:column="13">visibleChars</name> <init pos:line="300" pos:column="26">= <expr><lit:literal type="number" pos:line="300" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="301" pos:column="9">int</name></type> <name pos:line="301" pos:column="13">lineCurrent</name> <init pos:line="301" pos:column="25">= <expr><call><name><name pos:line="301" pos:column="27">styler</name><op:operator pos:line="301" pos:column="33">.</op:operator><name pos:line="301" pos:column="34">GetLine</name></name><argument_list pos:line="301" pos:column="41">(<argument><expr><name pos:line="301" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="302" pos:column="9">int</name></type> <name pos:line="302" pos:column="13">levelPrev</name> <init pos:line="302" pos:column="23">= <expr><call><name><name pos:line="302" pos:column="25">styler</name><op:operator pos:line="302" pos:column="31">.</op:operator><name pos:line="302" pos:column="32">LevelAt</name></name><argument_list pos:line="302" pos:column="39">(<argument><expr><name pos:line="302" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="302" pos:column="53">&amp;</op:operator> <name pos:line="302" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="303" pos:column="9">int</name></type> <name pos:line="303" pos:column="13">levelCurrent</name> <init pos:line="303" pos:column="26">= <expr><name pos:line="303" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="304" pos:column="9">char</name></type> <name pos:line="304" pos:column="14">chNext</name> <init pos:line="304" pos:column="21">= <expr><name><name pos:line="304" pos:column="23">styler</name><index pos:line="304" pos:column="29">[<expr><name pos:line="304" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="305" pos:column="9">bool</name></type> <name pos:line="305" pos:column="14">foldCompact</name> <init pos:line="305" pos:column="26">= <expr><call><name><name pos:line="305" pos:column="28">styler</name><op:operator pos:line="305" pos:column="34">.</op:operator><name pos:line="305" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="305" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="305" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="305" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="305" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="305" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="306" pos:column="9">int</name></type> <name pos:line="306" pos:column="13">styleNext</name> <init pos:line="306" pos:column="23">= <expr><call><name><name pos:line="306" pos:column="25">styler</name><op:operator pos:line="306" pos:column="31">.</op:operator><name pos:line="306" pos:column="32">StyleAt</name></name><argument_list pos:line="306" pos:column="39">(<argument><expr><name pos:line="306" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="307" pos:column="9">char</name></type> <name><name pos:line="307" pos:column="14">s</name><index pos:line="307" pos:column="15">[<expr><lit:literal type="number" pos:line="307" pos:column="16">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<for pos:line="309" pos:column="9">for (<init><decl><type><name pos:line="309" pos:column="14">unsigned</name> <name pos:line="309" pos:column="23">int</name></type> <name pos:line="309" pos:column="27">i</name> <init pos:line="309" pos:column="29">= <expr><name pos:line="309" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="309" pos:column="41">i</name> <op:operator pos:line="309" pos:column="43">&lt;</op:operator> <name pos:line="309" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="309" pos:column="56">i</name><op:operator pos:line="309" pos:column="57">++</op:operator></expr></incr>) <block pos:line="309" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="310" pos:column="17">char</name></type> <name pos:line="310" pos:column="22">ch</name> <init pos:line="310" pos:column="25">= <expr><name pos:line="310" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="311" pos:column="17">chNext</name> <op:operator pos:line="311" pos:column="24">=</op:operator> <call><name><name pos:line="311" pos:column="26">styler</name><op:operator pos:line="311" pos:column="32">.</op:operator><name pos:line="311" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="311" pos:column="46">(<argument><expr><name pos:line="311" pos:column="47">i</name> <op:operator pos:line="311" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="311" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="312" pos:column="17">int</name></type> <name pos:line="312" pos:column="21">style</name> <init pos:line="312" pos:column="27">= <expr><name pos:line="312" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="313" pos:column="17">styleNext</name> <op:operator pos:line="313" pos:column="27">=</op:operator> <call><name><name pos:line="313" pos:column="29">styler</name><op:operator pos:line="313" pos:column="35">.</op:operator><name pos:line="313" pos:column="36">StyleAt</name></name><argument_list pos:line="313" pos:column="43">(<argument><expr><name pos:line="313" pos:column="44">i</name> <op:operator pos:line="313" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="313" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="314" pos:column="17">bool</name></type> <name pos:line="314" pos:column="22">atEOL</name> <init pos:line="314" pos:column="28">= <expr><op:operator pos:line="314" pos:column="30">(</op:operator><name pos:line="314" pos:column="31">ch</name> <op:operator pos:line="314" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="314" pos:column="37">'\r'</lit:literal> <op:operator pos:line="314" pos:column="42">&amp;&amp;</op:operator> <name pos:line="314" pos:column="45">chNext</name> <op:operator pos:line="314" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="314" pos:column="55">'\n'</lit:literal><op:operator pos:line="314" pos:column="59">)</op:operator> <op:operator pos:line="314" pos:column="61">||</op:operator> <op:operator pos:line="314" pos:column="64">(</op:operator><name pos:line="314" pos:column="65">ch</name> <op:operator pos:line="314" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="314" pos:column="71">'\n'</lit:literal><op:operator pos:line="314" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="315" pos:column="17">if <condition pos:line="315" pos:column="20">(<expr><name pos:line="315" pos:column="21">style</name> <op:operator pos:line="315" pos:column="27">==</op:operator> <name pos:line="315" pos:column="30">SCE_LUA_WORD</name></expr>)</condition><then pos:line="315" pos:column="43"> <block pos:line="315" pos:column="44">{
			<if pos:line="316" pos:column="25">if <condition pos:line="316" pos:column="28">(<expr><name pos:line="316" pos:column="29">ch</name> <op:operator pos:line="316" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="35">'i'</lit:literal> <op:operator pos:line="316" pos:column="39">||</op:operator> <name pos:line="316" pos:column="42">ch</name> <op:operator pos:line="316" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="48">'d'</lit:literal> <op:operator pos:line="316" pos:column="52">||</op:operator> <name pos:line="316" pos:column="55">ch</name> <op:operator pos:line="316" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="61">'f'</lit:literal> <op:operator pos:line="316" pos:column="65">||</op:operator> <name pos:line="316" pos:column="68">ch</name> <op:operator pos:line="316" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="74">'e'</lit:literal> <op:operator pos:line="316" pos:column="78">||</op:operator> <name pos:line="316" pos:column="81">ch</name> <op:operator pos:line="316" pos:column="84">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="87">'r'</lit:literal> <op:operator pos:line="316" pos:column="91">||</op:operator> <name pos:line="316" pos:column="94">ch</name> <op:operator pos:line="316" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="316" pos:column="100">'u'</lit:literal></expr>)</condition><then pos:line="316" pos:column="104"> <block pos:line="316" pos:column="105">{
				<for pos:line="317" pos:column="33">for (<init><decl><type><name pos:line="317" pos:column="38">unsigned</name> <name pos:line="317" pos:column="47">int</name></type> <name pos:line="317" pos:column="51">j</name> <init pos:line="317" pos:column="53">= <expr><lit:literal type="number" pos:line="317" pos:column="55">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="317" pos:column="58">j</name> <op:operator pos:line="317" pos:column="60">&lt;</op:operator> <lit:literal type="number" pos:line="317" pos:column="62">8</lit:literal></expr>;</condition> <incr><expr><name pos:line="317" pos:column="65">j</name><op:operator pos:line="317" pos:column="66">++</op:operator></expr></incr>) <block pos:line="317" pos:column="70">{
					<if pos:line="318" pos:column="41">if <condition pos:line="318" pos:column="44">(<expr><op:operator pos:line="318" pos:column="45">!</op:operator><call><name pos:line="318" pos:column="46">iswordchar</name><argument_list pos:line="318" pos:column="56">(<argument><expr><name><name pos:line="318" pos:column="57">styler</name><index pos:line="318" pos:column="63">[<expr><name pos:line="318" pos:column="64">i</name> <op:operator pos:line="318" pos:column="66">+</op:operator> <name pos:line="318" pos:column="68">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="318" pos:column="72"> <block pos:line="318" pos:column="73">{
						<break pos:line="319" pos:column="49">break;</break>
					}</block></then></if>
					<expr_stmt><expr><name><name pos:line="321" pos:column="41">s</name><index pos:line="321" pos:column="42">[<expr><name pos:line="321" pos:column="43">j</name></expr>]</index></name> <op:operator pos:line="321" pos:column="46">=</op:operator> <name><name pos:line="321" pos:column="48">styler</name><index pos:line="321" pos:column="54">[<expr><name pos:line="321" pos:column="55">i</name> <op:operator pos:line="321" pos:column="57">+</op:operator> <name pos:line="321" pos:column="59">j</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="322" pos:column="41">s</name><index pos:line="322" pos:column="42">[<expr><name pos:line="322" pos:column="43">j</name> <op:operator pos:line="322" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="322" pos:column="47">1</lit:literal></expr>]</index></name> <op:operator pos:line="322" pos:column="50">=</op:operator> <lit:literal type="char" pos:line="322" pos:column="52">'\0'</lit:literal></expr>;</expr_stmt>
				}</block></for>

				<if pos:line="325" pos:column="33">if <condition pos:line="325" pos:column="36">(<expr><op:operator pos:line="325" pos:column="37">(</op:operator><call><name pos:line="325" pos:column="38">strcmp</name><argument_list pos:line="325" pos:column="44">(<argument><expr><name pos:line="325" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="325" pos:column="48">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="325" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="325" pos:column="57">0</lit:literal><op:operator pos:line="325" pos:column="58">)</op:operator> <op:operator pos:line="325" pos:column="60">||</op:operator> <op:operator pos:line="325" pos:column="63">(</op:operator><call><name pos:line="325" pos:column="64">strcmp</name><argument_list pos:line="325" pos:column="70">(<argument><expr><name pos:line="325" pos:column="71">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="325" pos:column="74">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="325" pos:column="80">==</op:operator> <lit:literal type="number" pos:line="325" pos:column="83">0</lit:literal><op:operator pos:line="325" pos:column="84">)</op:operator> <op:operator pos:line="325" pos:column="86">||</op:operator> <op:operator pos:line="325" pos:column="89">(</op:operator><call><name pos:line="325" pos:column="90">strcmp</name><argument_list pos:line="325" pos:column="96">(<argument><expr><name pos:line="325" pos:column="97">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="325" pos:column="100">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="325" pos:column="112">==</op:operator> <lit:literal type="number" pos:line="325" pos:column="115">0</lit:literal><op:operator pos:line="325" pos:column="116">)</op:operator> <op:operator pos:line="325" pos:column="118">||</op:operator> <op:operator pos:line="325" pos:column="121">(</op:operator><call><name pos:line="325" pos:column="122">strcmp</name><argument_list pos:line="325" pos:column="128">(<argument><expr><name pos:line="325" pos:column="129">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="325" pos:column="132">"repeat"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="325" pos:column="142">==</op:operator> <lit:literal type="number" pos:line="325" pos:column="145">0</lit:literal><op:operator pos:line="325" pos:column="146">)</op:operator></expr>)</condition><then pos:line="325" pos:column="148"> <block pos:line="325" pos:column="149">{
					<expr_stmt><expr><name pos:line="326" pos:column="41">levelCurrent</name><op:operator pos:line="326" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="328" pos:column="33">if <condition pos:line="328" pos:column="36">(<expr><op:operator pos:line="328" pos:column="37">(</op:operator><call><name pos:line="328" pos:column="38">strcmp</name><argument_list pos:line="328" pos:column="44">(<argument><expr><name pos:line="328" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="328" pos:column="48">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="328" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="328" pos:column="58">0</lit:literal><op:operator pos:line="328" pos:column="59">)</op:operator> <op:operator pos:line="328" pos:column="61">||</op:operator> <op:operator pos:line="328" pos:column="64">(</op:operator><call><name pos:line="328" pos:column="65">strcmp</name><argument_list pos:line="328" pos:column="71">(<argument><expr><name pos:line="328" pos:column="72">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="328" pos:column="75">"elseif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="328" pos:column="85">==</op:operator> <lit:literal type="number" pos:line="328" pos:column="88">0</lit:literal><op:operator pos:line="328" pos:column="89">)</op:operator> <op:operator pos:line="328" pos:column="91">||</op:operator> <op:operator pos:line="328" pos:column="94">(</op:operator><call><name pos:line="328" pos:column="95">strcmp</name><argument_list pos:line="328" pos:column="101">(<argument><expr><name pos:line="328" pos:column="102">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="328" pos:column="105">"until"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="328" pos:column="114">==</op:operator> <lit:literal type="number" pos:line="328" pos:column="117">0</lit:literal><op:operator pos:line="328" pos:column="118">)</op:operator></expr>)</condition><then pos:line="328" pos:column="120"> <block pos:line="328" pos:column="121">{
					<expr_stmt><expr><name pos:line="329" pos:column="41">levelCurrent</name><op:operator pos:line="329" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></then> <else pos:line="332" pos:column="19">else <if pos:line="332" pos:column="24">if <condition pos:line="332" pos:column="27">(<expr><name pos:line="332" pos:column="28">style</name> <op:operator pos:line="332" pos:column="34">==</op:operator> <name pos:line="332" pos:column="37">SCE_LUA_OPERATOR</name></expr>)</condition><then pos:line="332" pos:column="54"> <block pos:line="332" pos:column="55">{
			<if pos:line="333" pos:column="25">if <condition pos:line="333" pos:column="28">(<expr><name pos:line="333" pos:column="29">ch</name> <op:operator pos:line="333" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="333" pos:column="35">'{'</lit:literal> <op:operator pos:line="333" pos:column="39">||</op:operator> <name pos:line="333" pos:column="42">ch</name> <op:operator pos:line="333" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="333" pos:column="48">'('</lit:literal></expr>)</condition><then pos:line="333" pos:column="52"> <block pos:line="333" pos:column="53">{
				<expr_stmt><expr><name pos:line="334" pos:column="33">levelCurrent</name><op:operator pos:line="334" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="335" pos:column="27">else <if pos:line="335" pos:column="32">if <condition pos:line="335" pos:column="35">(<expr><name pos:line="335" pos:column="36">ch</name> <op:operator pos:line="335" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="335" pos:column="42">'}'</lit:literal> <op:operator pos:line="335" pos:column="46">||</op:operator> <name pos:line="335" pos:column="49">ch</name> <op:operator pos:line="335" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="335" pos:column="55">')'</lit:literal></expr>)</condition><then pos:line="335" pos:column="59"> <block pos:line="335" pos:column="60">{
				<expr_stmt><expr><name pos:line="336" pos:column="33">levelCurrent</name><op:operator pos:line="336" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="338" pos:column="19">else <if pos:line="338" pos:column="24">if <condition pos:line="338" pos:column="27">(<expr><name pos:line="338" pos:column="28">style</name> <op:operator pos:line="338" pos:column="34">==</op:operator> <name pos:line="338" pos:column="37">SCE_LUA_LITERALSTRING</name> <op:operator pos:line="338" pos:column="59">||</op:operator> <name pos:line="338" pos:column="62">style</name> <op:operator pos:line="338" pos:column="68">==</op:operator> <name pos:line="338" pos:column="71">SCE_LUA_COMMENT</name></expr>)</condition><then pos:line="338" pos:column="87"> <block pos:line="338" pos:column="88">{
			<if pos:line="339" pos:column="25">if <condition pos:line="339" pos:column="28">(<expr><name pos:line="339" pos:column="29">ch</name> <op:operator pos:line="339" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="339" pos:column="35">'['</lit:literal></expr>)</condition><then pos:line="339" pos:column="39"> <block pos:line="339" pos:column="40">{
				<expr_stmt><expr><name pos:line="340" pos:column="33">levelCurrent</name><op:operator pos:line="340" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="341" pos:column="27">else <if pos:line="341" pos:column="32">if <condition pos:line="341" pos:column="35">(<expr><name pos:line="341" pos:column="36">ch</name> <op:operator pos:line="341" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="341" pos:column="42">']'</lit:literal></expr>)</condition><then pos:line="341" pos:column="46"> <block pos:line="341" pos:column="47">{
				<expr_stmt><expr><name pos:line="342" pos:column="33">levelCurrent</name><op:operator pos:line="342" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if></else></if>

		<if pos:line="346" pos:column="17">if <condition pos:line="346" pos:column="20">(<expr><name pos:line="346" pos:column="21">atEOL</name></expr>)</condition><then pos:line="346" pos:column="27"> <block pos:line="346" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="347" pos:column="25">int</name></type> <name pos:line="347" pos:column="29">lev</name> <init pos:line="347" pos:column="33">= <expr><name pos:line="347" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="348" pos:column="25">if <condition pos:line="348" pos:column="28">(<expr><name pos:line="348" pos:column="29">visibleChars</name> <op:operator pos:line="348" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="348" pos:column="45">0</lit:literal> <op:operator pos:line="348" pos:column="47">&amp;&amp;</op:operator> <name pos:line="348" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="348" pos:column="62"> <block pos:line="348" pos:column="63">{
				<expr_stmt><expr><name pos:line="349" pos:column="33">lev</name> <op:operator pos:line="349" pos:column="37">|=</op:operator> <name pos:line="349" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="351" pos:column="25">if <condition pos:line="351" pos:column="28">(<expr><op:operator pos:line="351" pos:column="29">(</op:operator><name pos:line="351" pos:column="30">levelCurrent</name> <op:operator pos:line="351" pos:column="43">&gt;</op:operator> <name pos:line="351" pos:column="45">levelPrev</name><op:operator pos:line="351" pos:column="54">)</op:operator> <op:operator pos:line="351" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="351" pos:column="59">(</op:operator><name pos:line="351" pos:column="60">visibleChars</name> <op:operator pos:line="351" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="351" pos:column="75">0</lit:literal><op:operator pos:line="351" pos:column="76">)</op:operator></expr>)</condition><then pos:line="351" pos:column="78"> <block pos:line="351" pos:column="79">{
				<expr_stmt><expr><name pos:line="352" pos:column="33">lev</name> <op:operator pos:line="352" pos:column="37">|=</op:operator> <name pos:line="352" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="354" pos:column="25">if <condition pos:line="354" pos:column="28">(<expr><name pos:line="354" pos:column="29">lev</name> <op:operator pos:line="354" pos:column="33">!=</op:operator> <call><name><name pos:line="354" pos:column="36">styler</name><op:operator pos:line="354" pos:column="42">.</op:operator><name pos:line="354" pos:column="43">LevelAt</name></name><argument_list pos:line="354" pos:column="50">(<argument><expr><name pos:line="354" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="354" pos:column="64"> <block pos:line="354" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="355" pos:column="33">styler</name><op:operator pos:line="355" pos:column="39">.</op:operator><name pos:line="355" pos:column="40">SetLevel</name></name><argument_list pos:line="355" pos:column="48">(<argument><expr><name pos:line="355" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="355" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="357" pos:column="25">lineCurrent</name><op:operator pos:line="357" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="358" pos:column="25">levelPrev</name> <op:operator pos:line="358" pos:column="35">=</op:operator> <name pos:line="358" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="359" pos:column="25">visibleChars</name> <op:operator pos:line="359" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="359" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="361" pos:column="17">if <condition pos:line="361" pos:column="20">(<expr><op:operator pos:line="361" pos:column="21">!</op:operator><call><name pos:line="361" pos:column="22">isspacechar</name><argument_list pos:line="361" pos:column="33">(<argument><expr><name pos:line="361" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="361" pos:column="38"> <block pos:line="361" pos:column="39">{
			<expr_stmt><expr><name pos:line="362" pos:column="25">visibleChars</name><op:operator pos:line="362" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<comment type="line" pos:line="365" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>

	<decl_stmt><decl><type><name pos:line="367" pos:column="9">int</name></type> <name pos:line="367" pos:column="13">flagsNext</name> <init pos:line="367" pos:column="23">= <expr><call><name><name pos:line="367" pos:column="25">styler</name><op:operator pos:line="367" pos:column="31">.</op:operator><name pos:line="367" pos:column="32">LevelAt</name></name><argument_list pos:line="367" pos:column="39">(<argument><expr><name pos:line="367" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="367" pos:column="53">&amp;</op:operator> <op:operator pos:line="367" pos:column="55">~</op:operator><name pos:line="367" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="368" pos:column="9">styler</name><op:operator pos:line="368" pos:column="15">.</op:operator><name pos:line="368" pos:column="16">SetLevel</name></name><argument_list pos:line="368" pos:column="24">(<argument><expr><name pos:line="368" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="368" pos:column="38">levelPrev</name> <op:operator pos:line="368" pos:column="48">|</op:operator> <name pos:line="368" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="371" pos:column="1">static</specifier> <specifier pos:line="371" pos:column="8">const</specifier> <name pos:line="371" pos:column="14">char</name> <type:modifier pos:line="371" pos:column="19">*</type:modifier> <specifier pos:line="371" pos:column="21">const</specifier></type> <name><name pos:line="371" pos:column="27">luaWordListDesc</name><index pos:line="371" pos:column="42">[]</index></name> <init pos:line="371" pos:column="45">= <expr><block pos:line="371" pos:column="47">{
	<expr><lit:literal type="string" pos:line="372" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="373" pos:column="9">"Basic functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="374" pos:column="9">"String, (table) &amp; math functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="375" pos:column="9">"(coroutines), I/O &amp; system facilities"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="376" pos:column="9">"user1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="377" pos:column="9">"user2"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="378" pos:column="9">"user3"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="379" pos:column="9">"user4"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="380" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="383" pos:column="1">LexerModule</name></type> <name pos:line="383" pos:column="13">lmLua</name><argument_list pos:line="383" pos:column="18">(<argument><expr><name pos:line="383" pos:column="19">SCLEX_LUA</name></expr></argument>, <argument><expr><name pos:line="383" pos:column="30">ColouriseLuaDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="383" pos:column="47">"lua"</lit:literal></expr></argument>, <argument><expr><name pos:line="383" pos:column="54">FoldLuaDoc</name></expr></argument>, <argument><expr><name pos:line="383" pos:column="66">luaWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
