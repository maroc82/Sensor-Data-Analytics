<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexAsm.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexAsm.cxx
 ** Lexer for Assembler, just for the MASM syntax
 ** Written by The Black Horus
 ** Enhancements and NASM stuff by Kein-Hong Man, 2003-10
 ** SCE_ASM_COMMENTBLOCK and SCE_ASM_CHARACTER are for future GNU as colouring
 ** Converted to lexer object and added further folding features/properties by "Udo Lechner" &lt;dlchnr(at)gmx(dot)net&gt;
 **/</comment>
<comment type="line" pos:line="9" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="10" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifdef pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">ifdef</cpp:directive> <name pos:line="19" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">pragma</cpp:directive> warning(disable: 4786)</cpp:pragma>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file pos:line="23" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file pos:line="24" pos:column="10">&lt;map&gt;</cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file pos:line="25" pos:column="10">&lt;set&gt;</cpp:file></cpp:include>

<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="36" pos:column="10">"OptionSet.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef</cpp:directive> <name pos:line="38" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="39" pos:column="1">using namespace <name pos:line="39" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="42" pos:column="1">static</specifier> <specifier pos:line="42" pos:column="8">inline</specifier> <name pos:line="42" pos:column="15">bool</name></type> <name pos:line="42" pos:column="20">IsAWordChar</name><parameter_list pos:line="42" pos:column="31">(<param><decl><type><specifier pos:line="42" pos:column="32">const</specifier> <name pos:line="42" pos:column="38">int</name></type> <name pos:line="42" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="42" pos:column="46">{
	<return pos:line="43" pos:column="9">return <expr><op:operator pos:line="43" pos:column="16">(</op:operator><name pos:line="43" pos:column="17">ch</name> <op:operator pos:line="43" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="43" pos:column="22">0x80</lit:literal><op:operator pos:line="43" pos:column="26">)</op:operator> <op:operator pos:line="43" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="43" pos:column="31">(</op:operator><call><name pos:line="43" pos:column="32">isalnum</name><argument_list pos:line="43" pos:column="39">(<argument><expr><name pos:line="43" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="43" pos:column="44">||</op:operator> <name pos:line="43" pos:column="47">ch</name> <op:operator pos:line="43" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="43" pos:column="53">'.'</lit:literal> <op:operator pos:line="43" pos:column="57">||</op:operator>
		<name pos:line="44" pos:column="17">ch</name> <op:operator pos:line="44" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="23">'_'</lit:literal> <op:operator pos:line="44" pos:column="27">||</op:operator> <name pos:line="44" pos:column="30">ch</name> <op:operator pos:line="44" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="36">'?'</lit:literal><op:operator pos:line="44" pos:column="39">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <specifier pos:line="47" pos:column="8">inline</specifier> <name pos:line="47" pos:column="15">bool</name></type> <name pos:line="47" pos:column="20">IsAWordStart</name><parameter_list pos:line="47" pos:column="32">(<param><decl><type><specifier pos:line="47" pos:column="33">const</specifier> <name pos:line="47" pos:column="39">int</name></type> <name pos:line="47" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="47">{
	<return pos:line="48" pos:column="9">return <expr><op:operator pos:line="48" pos:column="16">(</op:operator><name pos:line="48" pos:column="17">ch</name> <op:operator pos:line="48" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="48" pos:column="22">0x80</lit:literal><op:operator pos:line="48" pos:column="26">)</op:operator> <op:operator pos:line="48" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="48" pos:column="31">(</op:operator><call><name pos:line="48" pos:column="32">isalnum</name><argument_list pos:line="48" pos:column="39">(<argument><expr><name pos:line="48" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="44">||</op:operator> <name pos:line="48" pos:column="47">ch</name> <op:operator pos:line="48" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="53">'_'</lit:literal> <op:operator pos:line="48" pos:column="57">||</op:operator> <name pos:line="48" pos:column="60">ch</name> <op:operator pos:line="48" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="48" pos:column="66">'.'</lit:literal> <op:operator pos:line="48" pos:column="70">||</op:operator>
		<name pos:line="49" pos:column="17">ch</name> <op:operator pos:line="49" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="23">'%'</lit:literal> <op:operator pos:line="49" pos:column="27">||</op:operator> <name pos:line="49" pos:column="30">ch</name> <op:operator pos:line="49" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="36">'@'</lit:literal> <op:operator pos:line="49" pos:column="40">||</op:operator> <name pos:line="49" pos:column="43">ch</name> <op:operator pos:line="49" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="49">'$'</lit:literal> <op:operator pos:line="49" pos:column="53">||</op:operator> <name pos:line="49" pos:column="56">ch</name> <op:operator pos:line="49" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="62">'?'</lit:literal><op:operator pos:line="49" pos:column="65">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="52" pos:column="1">static</specifier> <specifier pos:line="52" pos:column="8">inline</specifier> <name pos:line="52" pos:column="15">bool</name></type> <name pos:line="52" pos:column="20">IsAsmOperator</name><parameter_list pos:line="52" pos:column="33">(<param><decl><type><specifier pos:line="52" pos:column="34">const</specifier> <name pos:line="52" pos:column="40">int</name></type> <name pos:line="52" pos:column="44">ch</name></decl></param>)</parameter_list> <block pos:line="52" pos:column="48">{
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><op:operator pos:line="53" pos:column="13">(</op:operator><name pos:line="53" pos:column="14">ch</name> <op:operator pos:line="53" pos:column="17">&lt;</op:operator> <lit:literal type="number" pos:line="53" pos:column="19">0x80</lit:literal><op:operator pos:line="53" pos:column="23">)</op:operator> <op:operator pos:line="53" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="53" pos:column="28">(</op:operator><call><name pos:line="53" pos:column="29">isalnum</name><argument_list pos:line="53" pos:column="36">(<argument><expr><name pos:line="53" pos:column="37">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="53" pos:column="40">)</op:operator></expr>)</condition><then pos:line="53" pos:column="42">
		<return pos:line="54" pos:column="17">return <expr><lit:literal type="boolean" pos:line="54" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<comment type="line" pos:line="55" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">ch</name> <op:operator pos:line="56" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="19">'*'</lit:literal> <op:operator pos:line="56" pos:column="23">||</op:operator> <name pos:line="56" pos:column="26">ch</name> <op:operator pos:line="56" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="32">'/'</lit:literal> <op:operator pos:line="56" pos:column="36">||</op:operator> <name pos:line="56" pos:column="39">ch</name> <op:operator pos:line="56" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="45">'-'</lit:literal> <op:operator pos:line="56" pos:column="49">||</op:operator> <name pos:line="56" pos:column="52">ch</name> <op:operator pos:line="56" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="58">'+'</lit:literal> <op:operator pos:line="56" pos:column="62">||</op:operator>
		<name pos:line="57" pos:column="17">ch</name> <op:operator pos:line="57" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="23">'('</lit:literal> <op:operator pos:line="57" pos:column="27">||</op:operator> <name pos:line="57" pos:column="30">ch</name> <op:operator pos:line="57" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="36">')'</lit:literal> <op:operator pos:line="57" pos:column="40">||</op:operator> <name pos:line="57" pos:column="43">ch</name> <op:operator pos:line="57" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="49">'='</lit:literal> <op:operator pos:line="57" pos:column="53">||</op:operator> <name pos:line="57" pos:column="56">ch</name> <op:operator pos:line="57" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="62">'^'</lit:literal> <op:operator pos:line="57" pos:column="66">||</op:operator>
		<name pos:line="58" pos:column="17">ch</name> <op:operator pos:line="58" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="23">'['</lit:literal> <op:operator pos:line="58" pos:column="27">||</op:operator> <name pos:line="58" pos:column="30">ch</name> <op:operator pos:line="58" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="36">']'</lit:literal> <op:operator pos:line="58" pos:column="40">||</op:operator> <name pos:line="58" pos:column="43">ch</name> <op:operator pos:line="58" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="49">'&lt;'</lit:literal> <op:operator pos:line="58" pos:column="53">||</op:operator> <name pos:line="58" pos:column="56">ch</name> <op:operator pos:line="58" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="58" pos:column="62">'&amp;'</lit:literal> <op:operator pos:line="58" pos:column="66">||</op:operator>
		<name pos:line="59" pos:column="17">ch</name> <op:operator pos:line="59" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="23">'&gt;'</lit:literal> <op:operator pos:line="59" pos:column="27">||</op:operator> <name pos:line="59" pos:column="30">ch</name> <op:operator pos:line="59" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="36">','</lit:literal> <op:operator pos:line="59" pos:column="40">||</op:operator> <name pos:line="59" pos:column="43">ch</name> <op:operator pos:line="59" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="49">'|'</lit:literal> <op:operator pos:line="59" pos:column="53">||</op:operator> <name pos:line="59" pos:column="56">ch</name> <op:operator pos:line="59" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="62">'~'</lit:literal> <op:operator pos:line="59" pos:column="66">||</op:operator>
		<name pos:line="60" pos:column="17">ch</name> <op:operator pos:line="60" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="23">'%'</lit:literal> <op:operator pos:line="60" pos:column="27">||</op:operator> <name pos:line="60" pos:column="30">ch</name> <op:operator pos:line="60" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="60" pos:column="36">':'</lit:literal></expr>)</condition><then pos:line="60" pos:column="40">
		<return pos:line="61" pos:column="17">return <expr><lit:literal type="boolean" pos:line="61" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="62" pos:column="9">return <expr><lit:literal type="boolean" pos:line="62" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="65" pos:column="1">static</specifier> <name pos:line="65" pos:column="8">bool</name></type> <name pos:line="65" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="65" pos:column="33">(<param><decl><type><name pos:line="65" pos:column="34">int</name></type> <name pos:line="65" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="65" pos:column="45">{
	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">style</name> <op:operator pos:line="66" pos:column="22">==</op:operator> <name pos:line="66" pos:column="25">SCE_ASM_COMMENTDIRECTIVE</name> <op:operator pos:line="66" pos:column="50">||</op:operator> <name pos:line="66" pos:column="53">style</name> <op:operator pos:line="66" pos:column="59">==</op:operator> <name pos:line="66" pos:column="62">SCE_ASM_COMMENTBLOCK</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="69" pos:column="1">static</specifier> <specifier pos:line="69" pos:column="8">inline</specifier> <name pos:line="69" pos:column="15">int</name></type> <name pos:line="69" pos:column="19">LowerCase</name><parameter_list pos:line="69" pos:column="28">(<param><decl><type><name pos:line="69" pos:column="29">int</name></type> <name pos:line="69" pos:column="33">c</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="36">{
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">c</name> <op:operator pos:line="70" pos:column="15">&gt;=</op:operator> <lit:literal type="char" pos:line="70" pos:column="18">'A'</lit:literal> <op:operator pos:line="70" pos:column="22">&amp;&amp;</op:operator> <name pos:line="70" pos:column="25">c</name> <op:operator pos:line="70" pos:column="27">&lt;=</op:operator> <lit:literal type="char" pos:line="70" pos:column="30">'Z'</lit:literal></expr>)</condition><then pos:line="70" pos:column="34">
		<return pos:line="71" pos:column="17">return <expr><lit:literal type="char" pos:line="71" pos:column="24">'a'</lit:literal> <op:operator pos:line="71" pos:column="28">+</op:operator> <name pos:line="71" pos:column="30">c</name> <op:operator pos:line="71" pos:column="32">-</op:operator> <lit:literal type="char" pos:line="71" pos:column="34">'A'</lit:literal></expr>;</return></then></if>
	<return pos:line="72" pos:column="9">return <expr><name pos:line="72" pos:column="16">c</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="75" pos:column="1">// An individual named option for use in an OptionSet</comment>

<comment type="line" pos:line="77" pos:column="1">// Options used for LexerAsm</comment>
<struct pos:line="78" pos:column="1">struct <name pos:line="78" pos:column="8">OptionsAsm</name> <block pos:line="78" pos:column="19">{<public type="default" pos:line="78" pos:column="20">
	<decl_stmt><decl><type><name><name pos:line="79" pos:column="9">std</name><op:operator pos:line="79" pos:column="12">::</op:operator><name pos:line="79" pos:column="14">string</name></name></type> <name pos:line="79" pos:column="21">delimiter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">bool</name></type> <name pos:line="80" pos:column="14">fold</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">bool</name></type> <name pos:line="81" pos:column="14">foldSyntaxBased</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="82" pos:column="9">bool</name></type> <name pos:line="82" pos:column="14">foldCommentMultiline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="83" pos:column="9">bool</name></type> <name pos:line="83" pos:column="14">foldCommentExplicit</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="84" pos:column="9">std</name><op:operator pos:line="84" pos:column="12">::</op:operator><name pos:line="84" pos:column="14">string</name></name></type> <name pos:line="84" pos:column="21">foldExplicitStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="85" pos:column="9">std</name><op:operator pos:line="85" pos:column="12">::</op:operator><name pos:line="85" pos:column="14">string</name></name></type> <name pos:line="85" pos:column="21">foldExplicitEnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="86" pos:column="9">bool</name></type> <name pos:line="86" pos:column="14">foldExplicitAnywhere</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="87" pos:column="9">bool</name></type> <name pos:line="87" pos:column="14">foldCompact</name></decl>;</decl_stmt>
	<constructor><name pos:line="88" pos:column="9">OptionsAsm</name><parameter_list pos:line="88" pos:column="19">()</parameter_list> <block pos:line="88" pos:column="22">{
		<expr_stmt><expr><name pos:line="89" pos:column="17">delimiter</name> <op:operator pos:line="89" pos:column="27">=</op:operator> <lit:literal type="string" pos:line="89" pos:column="29">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="90" pos:column="17">fold</name> <op:operator pos:line="90" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="90" pos:column="24">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="91" pos:column="17">foldSyntaxBased</name> <op:operator pos:line="91" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="91" pos:column="35">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="92" pos:column="17">foldCommentMultiline</name> <op:operator pos:line="92" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="92" pos:column="40">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="93" pos:column="17">foldCommentExplicit</name> <op:operator pos:line="93" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="93" pos:column="39">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="94" pos:column="17">foldExplicitStart</name> <op:operator pos:line="94" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="94" pos:column="37">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="95" pos:column="17">foldExplicitEnd</name>   <op:operator pos:line="95" pos:column="35">=</op:operator> <lit:literal type="string" pos:line="95" pos:column="37">""</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="96" pos:column="17">foldExplicitAnywhere</name> <op:operator pos:line="96" pos:column="38">=</op:operator> <lit:literal type="boolean" pos:line="96" pos:column="40">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="97" pos:column="17">foldCompact</name> <op:operator pos:line="97" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="97" pos:column="31">true</lit:literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier pos:line="101" pos:column="1">static</specifier> <specifier pos:line="101" pos:column="8">const</specifier> <name pos:line="101" pos:column="14">char</name> <type:modifier pos:line="101" pos:column="19">*</type:modifier> <specifier pos:line="101" pos:column="21">const</specifier></type> <name><name pos:line="101" pos:column="27">asmWordListDesc</name><index pos:line="101" pos:column="42">[]</index></name> <init pos:line="101" pos:column="45">= <expr><block pos:line="101" pos:column="47">{
	<expr><lit:literal type="string" pos:line="102" pos:column="9">"CPU instructions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="103" pos:column="9">"FPU instructions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="104" pos:column="9">"Registers"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="105" pos:column="9">"Directives"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="106" pos:column="9">"Directive operands"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="107" pos:column="9">"Extended instructions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="108" pos:column="9">"Directives4Foldstart"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="109" pos:column="9">"Directives4Foldend"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="110" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<struct pos:line="113" pos:column="1">struct <name pos:line="113" pos:column="8">OptionSetAsm</name> <super pos:line="113" pos:column="21">: <specifier pos:line="113" pos:column="23">public</specifier> <name><name pos:line="113" pos:column="30">OptionSet</name><argument_list pos:line="113" pos:column="39">&lt;<argument><expr><name pos:line="113" pos:column="40">OptionsAsm</name></expr></argument>&gt;</argument_list></name></super> <block pos:line="113" pos:column="52">{<public type="default" pos:line="113" pos:column="53">
	<constructor><name pos:line="114" pos:column="9">OptionSetAsm</name><parameter_list pos:line="114" pos:column="21">()</parameter_list> <block pos:line="114" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="115" pos:column="17">DefineProperty</name><argument_list pos:line="115" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="32">"lexer.asm.comment.delimiter"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="115" pos:column="63">&amp;</op:operator><name><name pos:line="115" pos:column="64">OptionsAsm</name><op:operator pos:line="115" pos:column="74">::</op:operator><name pos:line="115" pos:column="76">delimiter</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="116" pos:column="25">"Character used for COMMENT directive's delimiter, replacing the standard \"~\"."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="118" pos:column="17">DefineProperty</name><argument_list pos:line="118" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="32">"fold"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="118" pos:column="40">&amp;</op:operator><name><name pos:line="118" pos:column="41">OptionsAsm</name><op:operator pos:line="118" pos:column="51">::</op:operator><name pos:line="118" pos:column="53">fold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="120" pos:column="17">DefineProperty</name><argument_list pos:line="120" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="32">"fold.asm.syntax.based"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="120" pos:column="57">&amp;</op:operator><name><name pos:line="120" pos:column="58">OptionsAsm</name><op:operator pos:line="120" pos:column="68">::</op:operator><name pos:line="120" pos:column="70">foldSyntaxBased</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="121" pos:column="25">"Set this property to 0 to disable syntax based folding."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="123" pos:column="17">DefineProperty</name><argument_list pos:line="123" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="32">"fold.asm.comment.multiline"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="123" pos:column="62">&amp;</op:operator><name><name pos:line="123" pos:column="63">OptionsAsm</name><op:operator pos:line="123" pos:column="73">::</op:operator><name pos:line="123" pos:column="75">foldCommentMultiline</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="124" pos:column="25">"Set this property to 1 to enable folding multi-line comments."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="126" pos:column="17">DefineProperty</name><argument_list pos:line="126" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="32">"fold.asm.comment.explicit"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="126" pos:column="61">&amp;</op:operator><name><name pos:line="126" pos:column="62">OptionsAsm</name><op:operator pos:line="126" pos:column="72">::</op:operator><name pos:line="126" pos:column="74">foldCommentExplicit</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="127" pos:column="25">"This option enables folding explicit fold points when using the Asm lexer. "</lit:literal>
			<lit:literal type="string" pos:line="128" pos:column="25">"Explicit fold points allows adding extra folding by placing a ;{ comment at the start and a ;} "</lit:literal>
			<lit:literal type="string" pos:line="129" pos:column="25">"at the end of a section that should fold."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="131" pos:column="17">DefineProperty</name><argument_list pos:line="131" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="32">"fold.asm.explicit.start"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="131" pos:column="59">&amp;</op:operator><name><name pos:line="131" pos:column="60">OptionsAsm</name><op:operator pos:line="131" pos:column="70">::</op:operator><name pos:line="131" pos:column="72">foldExplicitStart</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="132" pos:column="25">"The string to use for explicit fold start points, replacing the standard ;{."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="134" pos:column="17">DefineProperty</name><argument_list pos:line="134" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="32">"fold.asm.explicit.end"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="134" pos:column="57">&amp;</op:operator><name><name pos:line="134" pos:column="58">OptionsAsm</name><op:operator pos:line="134" pos:column="68">::</op:operator><name pos:line="134" pos:column="70">foldExplicitEnd</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="135" pos:column="25">"The string to use for explicit fold end points, replacing the standard ;}."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="137" pos:column="17">DefineProperty</name><argument_list pos:line="137" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="32">"fold.asm.explicit.anywhere"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="137" pos:column="62">&amp;</op:operator><name><name pos:line="137" pos:column="63">OptionsAsm</name><op:operator pos:line="137" pos:column="73">::</op:operator><name pos:line="137" pos:column="75">foldExplicitAnywhere</name></name></expr></argument>,
			<argument><expr><lit:literal type="string" pos:line="138" pos:column="25">"Set this property to 1 to enable explicit fold points anywhere, not just in line comments."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="140" pos:column="17">DefineProperty</name><argument_list pos:line="140" pos:column="31">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="32">"fold.compact"</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="140" pos:column="48">&amp;</op:operator><name><name pos:line="140" pos:column="49">OptionsAsm</name><op:operator pos:line="140" pos:column="59">::</op:operator><name pos:line="140" pos:column="61">foldCompact</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="142" pos:column="17">DefineWordListSets</name><argument_list pos:line="142" pos:column="35">(<argument><expr><name pos:line="142" pos:column="36">asmWordListDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<class pos:line="146" pos:column="1">class <name pos:line="146" pos:column="7">LexerAsm</name> <super pos:line="146" pos:column="16">: <specifier pos:line="146" pos:column="18">public</specifier> <name pos:line="146" pos:column="25">ILexer</name></super> <block pos:line="146" pos:column="32">{<private type="default" pos:line="146" pos:column="33">
	<decl_stmt><decl><type><name pos:line="147" pos:column="9">WordList</name></type> <name pos:line="147" pos:column="18">cpuInstruction</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="148" pos:column="9">WordList</name></type> <name pos:line="148" pos:column="18">mathInstruction</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="149" pos:column="9">WordList</name></type> <name pos:line="149" pos:column="18">registers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="150" pos:column="9">WordList</name></type> <name pos:line="150" pos:column="18">directive</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="151" pos:column="9">WordList</name></type> <name pos:line="151" pos:column="18">directiveOperand</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="152" pos:column="9">WordList</name></type> <name pos:line="152" pos:column="18">extInstruction</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="153" pos:column="9">WordList</name></type> <name pos:line="153" pos:column="18">directives4foldstart</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="154" pos:column="9">WordList</name></type> <name pos:line="154" pos:column="18">directives4foldend</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="155" pos:column="9">OptionsAsm</name></type> <name pos:line="155" pos:column="20">options</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="156" pos:column="9">OptionSetAsm</name></type> <name pos:line="156" pos:column="22">osAsm</name></decl>;</decl_stmt>
</private><public pos:line="157" pos:column="1">public:
	<constructor><name pos:line="158" pos:column="9">LexerAsm</name><parameter_list pos:line="158" pos:column="17">()</parameter_list> <block pos:line="158" pos:column="20">{
	}</block></constructor>
	<destructor><name pos:line="160" pos:column="9">~<name pos:line="160" pos:column="10">LexerAsm</name></name><parameter_list pos:line="160" pos:column="18">()</parameter_list> <block pos:line="160" pos:column="21">{
	}</block></destructor>
	<function><type><name pos:line="162" pos:column="9">void</name> <name pos:line="162" pos:column="14">SCI_METHOD</name></type> <name pos:line="162" pos:column="25">Release</name><parameter_list pos:line="162" pos:column="32">()</parameter_list> <block pos:line="162" pos:column="35">{
		<expr_stmt><expr><op:operator pos:line="163" pos:column="17">delete</op:operator> <name pos:line="163" pos:column="24">this</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="165" pos:column="9">int</name> <name pos:line="165" pos:column="13">SCI_METHOD</name></type> <name pos:line="165" pos:column="24">Version</name><parameter_list pos:line="165" pos:column="31">()</parameter_list> <specifier pos:line="165" pos:column="34">const</specifier> <block pos:line="165" pos:column="40">{
		<return pos:line="166" pos:column="17">return <expr><name pos:line="166" pos:column="24">lvOriginal</name></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="168" pos:column="9">const</specifier> <name pos:line="168" pos:column="15">char</name> <type:modifier pos:line="168" pos:column="20">*</type:modifier> <name pos:line="168" pos:column="22">SCI_METHOD</name></type> <name pos:line="168" pos:column="33">PropertyNames</name><parameter_list pos:line="168" pos:column="46">()</parameter_list> <block pos:line="168" pos:column="49">{
		<return pos:line="169" pos:column="17">return <expr><call><name><name pos:line="169" pos:column="24">osAsm</name><op:operator pos:line="169" pos:column="29">.</op:operator><name pos:line="169" pos:column="30">PropertyNames</name></name><argument_list pos:line="169" pos:column="43">()</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="171" pos:column="9">int</name> <name pos:line="171" pos:column="13">SCI_METHOD</name></type> <name pos:line="171" pos:column="24">PropertyType</name><parameter_list pos:line="171" pos:column="36">(<param><decl><type><specifier pos:line="171" pos:column="37">const</specifier> <name pos:line="171" pos:column="43">char</name> <type:modifier pos:line="171" pos:column="48">*</type:modifier></type><name pos:line="171" pos:column="49">name</name></decl></param>)</parameter_list> <block pos:line="171" pos:column="55">{
		<return pos:line="172" pos:column="17">return <expr><call><name><name pos:line="172" pos:column="24">osAsm</name><op:operator pos:line="172" pos:column="29">.</op:operator><name pos:line="172" pos:column="30">PropertyType</name></name><argument_list pos:line="172" pos:column="42">(<argument><expr><name pos:line="172" pos:column="43">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><specifier pos:line="174" pos:column="9">const</specifier> <name pos:line="174" pos:column="15">char</name> <type:modifier pos:line="174" pos:column="20">*</type:modifier> <name pos:line="174" pos:column="22">SCI_METHOD</name></type> <name pos:line="174" pos:column="33">DescribeProperty</name><parameter_list pos:line="174" pos:column="49">(<param><decl><type><specifier pos:line="174" pos:column="50">const</specifier> <name pos:line="174" pos:column="56">char</name> <type:modifier pos:line="174" pos:column="61">*</type:modifier></type><name pos:line="174" pos:column="62">name</name></decl></param>)</parameter_list> <block pos:line="174" pos:column="68">{
		<return pos:line="175" pos:column="17">return <expr><call><name><name pos:line="175" pos:column="24">osAsm</name><op:operator pos:line="175" pos:column="29">.</op:operator><name pos:line="175" pos:column="30">DescribeProperty</name></name><argument_list pos:line="175" pos:column="46">(<argument><expr><name pos:line="175" pos:column="47">name</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="177" pos:column="9">int</name> <name pos:line="177" pos:column="13">SCI_METHOD</name></type> <name pos:line="177" pos:column="24">PropertySet</name><parameter_list pos:line="177" pos:column="35">(<param><decl><type><specifier pos:line="177" pos:column="36">const</specifier> <name pos:line="177" pos:column="42">char</name> <type:modifier pos:line="177" pos:column="47">*</type:modifier></type><name pos:line="177" pos:column="48">key</name></decl></param>, <param><decl><type><specifier pos:line="177" pos:column="53">const</specifier> <name pos:line="177" pos:column="59">char</name> <type:modifier pos:line="177" pos:column="64">*</type:modifier></type><name pos:line="177" pos:column="65">val</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><specifier pos:line="178" pos:column="9">const</specifier> <name pos:line="178" pos:column="15">char</name> <type:modifier pos:line="178" pos:column="20">*</type:modifier> <name pos:line="178" pos:column="22">SCI_METHOD</name></type> <name pos:line="178" pos:column="33">DescribeWordListSets</name><parameter_list pos:line="178" pos:column="53">()</parameter_list> <block pos:line="178" pos:column="56">{
		<return pos:line="179" pos:column="17">return <expr><call><name><name pos:line="179" pos:column="24">osAsm</name><op:operator pos:line="179" pos:column="29">.</op:operator><name pos:line="179" pos:column="30">DescribeWordListSets</name></name><argument_list pos:line="179" pos:column="50">()</argument_list></call></expr>;</return>
	}</block></function>
	<function_decl><type><name pos:line="181" pos:column="9">int</name> <name pos:line="181" pos:column="13">SCI_METHOD</name></type> <name pos:line="181" pos:column="24">WordListSet</name><parameter_list pos:line="181" pos:column="35">(<param><decl><type><name pos:line="181" pos:column="36">int</name></type> <name pos:line="181" pos:column="40">n</name></decl></param>, <param><decl><type><specifier pos:line="181" pos:column="43">const</specifier> <name pos:line="181" pos:column="49">char</name> <type:modifier pos:line="181" pos:column="54">*</type:modifier></type><name pos:line="181" pos:column="55">wl</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="182" pos:column="9">void</name> <name pos:line="182" pos:column="14">SCI_METHOD</name></type> <name pos:line="182" pos:column="25">Lex</name><parameter_list pos:line="182" pos:column="28">(<param><decl><type><name pos:line="182" pos:column="29">unsigned</name> <name pos:line="182" pos:column="38">int</name></type> <name pos:line="182" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="52">int</name></type> <name pos:line="182" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="64">int</name></type> <name pos:line="182" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="79">IDocument</name> <type:modifier pos:line="182" pos:column="89">*</type:modifier></type><name pos:line="182" pos:column="90">pAccess</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="183" pos:column="9">void</name> <name pos:line="183" pos:column="14">SCI_METHOD</name></type> <name pos:line="183" pos:column="25">Fold</name><parameter_list pos:line="183" pos:column="29">(<param><decl><type><name pos:line="183" pos:column="30">unsigned</name> <name pos:line="183" pos:column="39">int</name></type> <name pos:line="183" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="53">int</name></type> <name pos:line="183" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="65">int</name></type> <name pos:line="183" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="183" pos:column="80">IDocument</name> <type:modifier pos:line="183" pos:column="90">*</type:modifier></type><name pos:line="183" pos:column="91">pAccess</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="185" pos:column="9">void</name> <type:modifier pos:line="185" pos:column="14">*</type:modifier> <name pos:line="185" pos:column="16">SCI_METHOD</name></type> <name pos:line="185" pos:column="27">PrivateCall</name><parameter_list pos:line="185" pos:column="38">(<param><decl><type><name pos:line="185" pos:column="39">int</name></type></decl></param>, <param><decl><type><name pos:line="185" pos:column="44">void</name> <type:modifier pos:line="185" pos:column="49">*</type:modifier></type></decl></param>)</parameter_list> <block pos:line="185" pos:column="52">{
		<return pos:line="186" pos:column="17">return <expr><lit:literal type="number" pos:line="186" pos:column="24">0</lit:literal></expr>;</return>
	}</block></function>

	<function><type><specifier pos:line="189" pos:column="9">static</specifier> <name pos:line="189" pos:column="16">ILexer</name> <type:modifier pos:line="189" pos:column="23">*</type:modifier></type><name pos:line="189" pos:column="24">LexerFactoryAsm</name><parameter_list pos:line="189" pos:column="39">()</parameter_list> <block pos:line="189" pos:column="42">{
		<return pos:line="190" pos:column="17">return <expr><op:operator pos:line="190" pos:column="24">new</op:operator> <call><name pos:line="190" pos:column="28">LexerAsm</name><argument_list pos:line="190" pos:column="36">()</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="194" pos:column="1">int</name> <name pos:line="194" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="194" pos:column="16">LexerAsm</name><op:operator pos:line="194" pos:column="24">::</op:operator><name pos:line="194" pos:column="26">PropertySet</name></name><parameter_list pos:line="194" pos:column="37">(<param><decl><type><specifier pos:line="194" pos:column="38">const</specifier> <name pos:line="194" pos:column="44">char</name> <type:modifier pos:line="194" pos:column="49">*</type:modifier></type><name pos:line="194" pos:column="50">key</name></decl></param>, <param><decl><type><specifier pos:line="194" pos:column="55">const</specifier> <name pos:line="194" pos:column="61">char</name> <type:modifier pos:line="194" pos:column="66">*</type:modifier></type><name pos:line="194" pos:column="67">val</name></decl></param>)</parameter_list> <block pos:line="194" pos:column="72">{
	<if pos:line="195" pos:column="9">if <condition pos:line="195" pos:column="12">(<expr><call><name><name pos:line="195" pos:column="13">osAsm</name><op:operator pos:line="195" pos:column="18">.</op:operator><name pos:line="195" pos:column="19">PropertySet</name></name><argument_list pos:line="195" pos:column="30">(<argument><expr><op:operator pos:line="195" pos:column="31">&amp;</op:operator><name pos:line="195" pos:column="32">options</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="41">key</name></expr></argument>, <argument><expr><name pos:line="195" pos:column="46">val</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="195" pos:column="51"> <block pos:line="195" pos:column="52">{
		<return pos:line="196" pos:column="17">return <expr><lit:literal type="number" pos:line="196" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="198" pos:column="9">return <expr><op:operator pos:line="198" pos:column="16">-</op:operator><lit:literal type="number" pos:line="198" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="201" pos:column="1">int</name> <name pos:line="201" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="201" pos:column="16">LexerAsm</name><op:operator pos:line="201" pos:column="24">::</op:operator><name pos:line="201" pos:column="26">WordListSet</name></name><parameter_list pos:line="201" pos:column="37">(<param><decl><type><name pos:line="201" pos:column="38">int</name></type> <name pos:line="201" pos:column="42">n</name></decl></param>, <param><decl><type><specifier pos:line="201" pos:column="45">const</specifier> <name pos:line="201" pos:column="51">char</name> <type:modifier pos:line="201" pos:column="56">*</type:modifier></type><name pos:line="201" pos:column="57">wl</name></decl></param>)</parameter_list> <block pos:line="201" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="202" pos:column="9">WordList</name> <type:modifier pos:line="202" pos:column="18">*</type:modifier></type><name pos:line="202" pos:column="19">wordListN</name> <init pos:line="202" pos:column="29">= <expr><lit:literal type="number" pos:line="202" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<switch pos:line="203" pos:column="9">switch <condition pos:line="203" pos:column="16">(<expr><name pos:line="203" pos:column="17">n</name></expr>)</condition> <block pos:line="203" pos:column="20">{
	<case pos:line="204" pos:column="9">case <expr><lit:literal type="number" pos:line="204" pos:column="14">0</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="205" pos:column="17">wordListN</name> <op:operator pos:line="205" pos:column="27">=</op:operator> <op:operator pos:line="205" pos:column="29">&amp;</op:operator><name pos:line="205" pos:column="30">cpuInstruction</name></expr>;</expr_stmt>
		<break pos:line="206" pos:column="17">break;</break>
	</case><case pos:line="207" pos:column="9">case <expr><lit:literal type="number" pos:line="207" pos:column="14">1</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="208" pos:column="17">wordListN</name> <op:operator pos:line="208" pos:column="27">=</op:operator> <op:operator pos:line="208" pos:column="29">&amp;</op:operator><name pos:line="208" pos:column="30">mathInstruction</name></expr>;</expr_stmt>
		<break pos:line="209" pos:column="17">break;</break>
	</case><case pos:line="210" pos:column="9">case <expr><lit:literal type="number" pos:line="210" pos:column="14">2</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="211" pos:column="17">wordListN</name> <op:operator pos:line="211" pos:column="27">=</op:operator> <op:operator pos:line="211" pos:column="29">&amp;</op:operator><name pos:line="211" pos:column="30">registers</name></expr>;</expr_stmt>
		<break pos:line="212" pos:column="17">break;</break>
	</case><case pos:line="213" pos:column="9">case <expr><lit:literal type="number" pos:line="213" pos:column="14">3</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="214" pos:column="17">wordListN</name> <op:operator pos:line="214" pos:column="27">=</op:operator> <op:operator pos:line="214" pos:column="29">&amp;</op:operator><name pos:line="214" pos:column="30">directive</name></expr>;</expr_stmt>
		<break pos:line="215" pos:column="17">break;</break>
	</case><case pos:line="216" pos:column="9">case <expr><lit:literal type="number" pos:line="216" pos:column="14">4</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="217" pos:column="17">wordListN</name> <op:operator pos:line="217" pos:column="27">=</op:operator> <op:operator pos:line="217" pos:column="29">&amp;</op:operator><name pos:line="217" pos:column="30">directiveOperand</name></expr>;</expr_stmt>
		<break pos:line="218" pos:column="17">break;</break>
	</case><case pos:line="219" pos:column="9">case <expr><lit:literal type="number" pos:line="219" pos:column="14">5</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="220" pos:column="17">wordListN</name> <op:operator pos:line="220" pos:column="27">=</op:operator> <op:operator pos:line="220" pos:column="29">&amp;</op:operator><name pos:line="220" pos:column="30">extInstruction</name></expr>;</expr_stmt>
		<break pos:line="221" pos:column="17">break;</break>
	</case><case pos:line="222" pos:column="9">case <expr><lit:literal type="number" pos:line="222" pos:column="14">6</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="223" pos:column="17">wordListN</name> <op:operator pos:line="223" pos:column="27">=</op:operator> <op:operator pos:line="223" pos:column="29">&amp;</op:operator><name pos:line="223" pos:column="30">directives4foldstart</name></expr>;</expr_stmt>
		<break pos:line="224" pos:column="17">break;</break>
	</case><case pos:line="225" pos:column="9">case <expr><lit:literal type="number" pos:line="225" pos:column="14">7</lit:literal></expr>:
		<expr_stmt><expr><name pos:line="226" pos:column="17">wordListN</name> <op:operator pos:line="226" pos:column="27">=</op:operator> <op:operator pos:line="226" pos:column="29">&amp;</op:operator><name pos:line="226" pos:column="30">directives4foldend</name></expr>;</expr_stmt>
		<break pos:line="227" pos:column="17">break;</break>
	</case>}</block></switch>
	<decl_stmt><decl><type><name pos:line="229" pos:column="9">int</name></type> <name pos:line="229" pos:column="13">firstModification</name> <init pos:line="229" pos:column="31">= <expr><op:operator pos:line="229" pos:column="33">-</op:operator><lit:literal type="number" pos:line="229" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="230" pos:column="9">if <condition pos:line="230" pos:column="12">(<expr><name pos:line="230" pos:column="13">wordListN</name></expr>)</condition><then pos:line="230" pos:column="23"> <block pos:line="230" pos:column="24">{
		<decl_stmt><decl><type><name pos:line="231" pos:column="17">WordList</name></type> <name pos:line="231" pos:column="26">wlNew</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="232" pos:column="17">wlNew</name><op:operator pos:line="232" pos:column="22">.</op:operator><name pos:line="232" pos:column="23">Set</name></name><argument_list pos:line="232" pos:column="26">(<argument><expr><name pos:line="232" pos:column="27">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="233" pos:column="17">if <condition pos:line="233" pos:column="20">(<expr><op:operator pos:line="233" pos:column="21">*</op:operator><name pos:line="233" pos:column="22">wordListN</name> <op:operator pos:line="233" pos:column="32">!=</op:operator> <name pos:line="233" pos:column="35">wlNew</name></expr>)</condition><then pos:line="233" pos:column="41"> <block pos:line="233" pos:column="42">{
			<expr_stmt><expr><call><name><name pos:line="234" pos:column="25">wordListN</name><op:operator pos:line="234" pos:column="34">-&gt;</op:operator><name pos:line="234" pos:column="36">Set</name></name><argument_list pos:line="234" pos:column="39">(<argument><expr><name pos:line="234" pos:column="40">wl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="235" pos:column="25">firstModification</name> <op:operator pos:line="235" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="235" pos:column="45">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="238" pos:column="9">return <expr><name pos:line="238" pos:column="16">firstModification</name></expr>;</return>
}</block></function>

<function><type><name pos:line="241" pos:column="1">void</name> <name pos:line="241" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="241" pos:column="17">LexerAsm</name><op:operator pos:line="241" pos:column="25">::</op:operator><name pos:line="241" pos:column="27">Lex</name></name><parameter_list pos:line="241" pos:column="30">(<param><decl><type><name pos:line="241" pos:column="31">unsigned</name> <name pos:line="241" pos:column="40">int</name></type> <name pos:line="241" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="241" pos:column="54">int</name></type> <name pos:line="241" pos:column="58">length</name></decl></param>, <param><decl><type><name pos:line="241" pos:column="66">int</name></type> <name pos:line="241" pos:column="70">initStyle</name></decl></param>, <param><decl><type><name pos:line="241" pos:column="81">IDocument</name> <type:modifier pos:line="241" pos:column="91">*</type:modifier></type><name pos:line="241" pos:column="92">pAccess</name></decl></param>)</parameter_list> <block pos:line="241" pos:column="101">{
	<function_decl><type><name pos:line="242" pos:column="9">LexAccessor</name></type> <name pos:line="242" pos:column="21">styler</name><parameter_list pos:line="242" pos:column="27">(<param><decl><type><name pos:line="242" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<comment type="line" pos:line="244" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="245" pos:column="9">if <condition pos:line="245" pos:column="12">(<expr><name pos:line="245" pos:column="13">initStyle</name> <op:operator pos:line="245" pos:column="23">==</op:operator> <name pos:line="245" pos:column="26">SCE_ASM_STRINGEOL</name></expr>)</condition><then pos:line="245" pos:column="44">
		<expr_stmt><expr><name pos:line="246" pos:column="17">initStyle</name> <op:operator pos:line="246" pos:column="27">=</op:operator> <name pos:line="246" pos:column="29">SCE_ASM_DEFAULT</name></expr>;</expr_stmt></then></if>

	<function_decl><type><name pos:line="248" pos:column="9">StyleContext</name></type> <name pos:line="248" pos:column="22">sc</name><parameter_list pos:line="248" pos:column="24">(<param><decl><type><name pos:line="248" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="248" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="248" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="248" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="250" pos:column="9">for (<init pos:line="250" pos:column="14">;</init> <condition><expr><call><name><name pos:line="250" pos:column="16">sc</name><op:operator pos:line="250" pos:column="18">.</op:operator><name pos:line="250" pos:column="19">More</name></name><argument_list pos:line="250" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="250" pos:column="27">sc</name><op:operator pos:line="250" pos:column="29">.</op:operator><name pos:line="250" pos:column="30">Forward</name></name><argument_list pos:line="250" pos:column="37">()</argument_list></call></expr></incr>)
	<block pos:line="251" pos:column="9">{

		<comment type="line" pos:line="253" pos:column="17">// Prevent SCE_ASM_STRINGEOL from leaking back to previous line</comment>
		<if pos:line="254" pos:column="17">if <condition pos:line="254" pos:column="20">(<expr><name><name pos:line="254" pos:column="21">sc</name><op:operator pos:line="254" pos:column="23">.</op:operator><name pos:line="254" pos:column="24">atLineStart</name></name> <op:operator pos:line="254" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="254" pos:column="39">(</op:operator><name><name pos:line="254" pos:column="40">sc</name><op:operator pos:line="254" pos:column="42">.</op:operator><name pos:line="254" pos:column="43">state</name></name> <op:operator pos:line="254" pos:column="49">==</op:operator> <name pos:line="254" pos:column="52">SCE_ASM_STRING</name><op:operator pos:line="254" pos:column="66">)</op:operator></expr>)</condition><then pos:line="254" pos:column="68"> <block pos:line="254" pos:column="69">{
			<expr_stmt><expr><call><name><name pos:line="255" pos:column="25">sc</name><op:operator pos:line="255" pos:column="27">.</op:operator><name pos:line="255" pos:column="28">SetState</name></name><argument_list pos:line="255" pos:column="36">(<argument><expr><name pos:line="255" pos:column="37">SCE_ASM_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="256" pos:column="19">else <if pos:line="256" pos:column="24">if <condition pos:line="256" pos:column="27">(<expr><name><name pos:line="256" pos:column="28">sc</name><op:operator pos:line="256" pos:column="30">.</op:operator><name pos:line="256" pos:column="31">atLineStart</name></name> <op:operator pos:line="256" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="256" pos:column="46">(</op:operator><name><name pos:line="256" pos:column="47">sc</name><op:operator pos:line="256" pos:column="49">.</op:operator><name pos:line="256" pos:column="50">state</name></name> <op:operator pos:line="256" pos:column="56">==</op:operator> <name pos:line="256" pos:column="59">SCE_ASM_CHARACTER</name><op:operator pos:line="256" pos:column="76">)</op:operator></expr>)</condition><then pos:line="256" pos:column="78"> <block pos:line="256" pos:column="79">{
			<expr_stmt><expr><call><name><name pos:line="257" pos:column="25">sc</name><op:operator pos:line="257" pos:column="27">.</op:operator><name pos:line="257" pos:column="28">SetState</name></name><argument_list pos:line="257" pos:column="36">(<argument><expr><name pos:line="257" pos:column="37">SCE_ASM_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></else></if>

		<comment type="line" pos:line="260" pos:column="17">// Handle line continuation generically.</comment>
		<if pos:line="261" pos:column="17">if <condition pos:line="261" pos:column="20">(<expr><name><name pos:line="261" pos:column="21">sc</name><op:operator pos:line="261" pos:column="23">.</op:operator><name pos:line="261" pos:column="24">ch</name></name> <op:operator pos:line="261" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="261" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="261" pos:column="35"> <block pos:line="261" pos:column="36">{
			<if pos:line="262" pos:column="25">if <condition pos:line="262" pos:column="28">(<expr><name><name pos:line="262" pos:column="29">sc</name><op:operator pos:line="262" pos:column="31">.</op:operator><name pos:line="262" pos:column="32">chNext</name></name> <op:operator pos:line="262" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="42">'\n'</lit:literal> <op:operator pos:line="262" pos:column="47">||</op:operator> <name><name pos:line="262" pos:column="50">sc</name><op:operator pos:line="262" pos:column="52">.</op:operator><name pos:line="262" pos:column="53">chNext</name></name> <op:operator pos:line="262" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="262" pos:column="68"> <block pos:line="262" pos:column="69">{
				<expr_stmt><expr><call><name><name pos:line="263" pos:column="33">sc</name><op:operator pos:line="263" pos:column="35">.</op:operator><name pos:line="263" pos:column="36">Forward</name></name><argument_list pos:line="263" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="264" pos:column="33">if <condition pos:line="264" pos:column="36">(<expr><name><name pos:line="264" pos:column="37">sc</name><op:operator pos:line="264" pos:column="39">.</op:operator><name pos:line="264" pos:column="40">ch</name></name> <op:operator pos:line="264" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="46">'\r'</lit:literal> <op:operator pos:line="264" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="264" pos:column="54">sc</name><op:operator pos:line="264" pos:column="56">.</op:operator><name pos:line="264" pos:column="57">chNext</name></name> <op:operator pos:line="264" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="264" pos:column="72"> <block pos:line="264" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="265" pos:column="41">sc</name><op:operator pos:line="265" pos:column="43">.</op:operator><name pos:line="265" pos:column="44">Forward</name></name><argument_list pos:line="265" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<continue pos:line="267" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="271" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="272" pos:column="17">if <condition pos:line="272" pos:column="20">(<expr><name><name pos:line="272" pos:column="21">sc</name><op:operator pos:line="272" pos:column="23">.</op:operator><name pos:line="272" pos:column="24">state</name></name> <op:operator pos:line="272" pos:column="30">==</op:operator> <name pos:line="272" pos:column="33">SCE_ASM_OPERATOR</name></expr>)</condition><then pos:line="272" pos:column="50"> <block pos:line="272" pos:column="51">{
			<if pos:line="273" pos:column="25">if <condition pos:line="273" pos:column="28">(<expr><op:operator pos:line="273" pos:column="29">!</op:operator><call><name pos:line="273" pos:column="30">IsAsmOperator</name><argument_list pos:line="273" pos:column="43">(<argument><expr><name><name pos:line="273" pos:column="44">sc</name><op:operator pos:line="273" pos:column="46">.</op:operator><name pos:line="273" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="273" pos:column="51"> <block pos:line="273" pos:column="52">{
			    <expr_stmt><expr><call><name><name pos:line="274" pos:column="29">sc</name><op:operator pos:line="274" pos:column="31">.</op:operator><name pos:line="274" pos:column="32">SetState</name></name><argument_list pos:line="274" pos:column="40">(<argument><expr><name pos:line="274" pos:column="41">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="276" pos:column="19">else <if pos:line="276" pos:column="24">if <condition pos:line="276" pos:column="27">(<expr><name><name pos:line="276" pos:column="28">sc</name><op:operator pos:line="276" pos:column="30">.</op:operator><name pos:line="276" pos:column="31">state</name></name> <op:operator pos:line="276" pos:column="37">==</op:operator> <name pos:line="276" pos:column="40">SCE_ASM_NUMBER</name></expr>)</condition><then pos:line="276" pos:column="55"> <block pos:line="276" pos:column="56">{
			<if pos:line="277" pos:column="25">if <condition pos:line="277" pos:column="28">(<expr><op:operator pos:line="277" pos:column="29">!</op:operator><call><name pos:line="277" pos:column="30">IsAWordChar</name><argument_list pos:line="277" pos:column="41">(<argument><expr><name><name pos:line="277" pos:column="42">sc</name><op:operator pos:line="277" pos:column="44">.</op:operator><name pos:line="277" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="277" pos:column="49"> <block pos:line="277" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="278" pos:column="33">sc</name><op:operator pos:line="278" pos:column="35">.</op:operator><name pos:line="278" pos:column="36">SetState</name></name><argument_list pos:line="278" pos:column="44">(<argument><expr><name pos:line="278" pos:column="45">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="280" pos:column="19">else <if pos:line="280" pos:column="24">if <condition pos:line="280" pos:column="27">(<expr><name><name pos:line="280" pos:column="28">sc</name><op:operator pos:line="280" pos:column="30">.</op:operator><name pos:line="280" pos:column="31">state</name></name> <op:operator pos:line="280" pos:column="37">==</op:operator> <name pos:line="280" pos:column="40">SCE_ASM_IDENTIFIER</name></expr>)</condition><then pos:line="280" pos:column="59"> <block pos:line="280" pos:column="60">{
			<if pos:line="281" pos:column="25">if <condition pos:line="281" pos:column="28">(<expr><op:operator pos:line="281" pos:column="29">!</op:operator><call><name pos:line="281" pos:column="30">IsAWordChar</name><argument_list pos:line="281" pos:column="41">(<argument><expr><name><name pos:line="281" pos:column="42">sc</name><op:operator pos:line="281" pos:column="44">.</op:operator><name pos:line="281" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr> )</condition><then pos:line="281" pos:column="50"> <block pos:line="281" pos:column="51">{
				<decl_stmt><decl><type><name pos:line="282" pos:column="33">char</name></type> <name><name pos:line="282" pos:column="38">s</name><index pos:line="282" pos:column="39">[<expr><lit:literal type="number" pos:line="282" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="283" pos:column="33">sc</name><op:operator pos:line="283" pos:column="35">.</op:operator><name pos:line="283" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="283" pos:column="53">(<argument><expr><name pos:line="283" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="283" pos:column="57">sizeof<argument_list pos:line="283" pos:column="63">(<argument><expr><name pos:line="283" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="284" pos:column="33">bool</name></type> <name pos:line="284" pos:column="38">IsDirective</name> <init pos:line="284" pos:column="50">= <expr><lit:literal type="boolean" pos:line="284" pos:column="52">false</lit:literal></expr></init></decl>;</decl_stmt>

				<if pos:line="286" pos:column="33">if <condition pos:line="286" pos:column="36">(<expr><call><name><name pos:line="286" pos:column="37">cpuInstruction</name><op:operator pos:line="286" pos:column="51">.</op:operator><name pos:line="286" pos:column="52">InList</name></name><argument_list pos:line="286" pos:column="58">(<argument><expr><name pos:line="286" pos:column="59">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="286" pos:column="62"> <block pos:line="286" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="287" pos:column="41">sc</name><op:operator pos:line="287" pos:column="43">.</op:operator><name pos:line="287" pos:column="44">ChangeState</name></name><argument_list pos:line="287" pos:column="55">(<argument><expr><name pos:line="287" pos:column="56">SCE_ASM_CPUINSTRUCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="288" pos:column="35">else <if pos:line="288" pos:column="40">if <condition pos:line="288" pos:column="43">(<expr><call><name><name pos:line="288" pos:column="44">mathInstruction</name><op:operator pos:line="288" pos:column="59">.</op:operator><name pos:line="288" pos:column="60">InList</name></name><argument_list pos:line="288" pos:column="66">(<argument><expr><name pos:line="288" pos:column="67">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="288" pos:column="70"> <block pos:line="288" pos:column="71">{
					<expr_stmt><expr><call><name><name pos:line="289" pos:column="41">sc</name><op:operator pos:line="289" pos:column="43">.</op:operator><name pos:line="289" pos:column="44">ChangeState</name></name><argument_list pos:line="289" pos:column="55">(<argument><expr><name pos:line="289" pos:column="56">SCE_ASM_MATHINSTRUCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="290" pos:column="35">else <if pos:line="290" pos:column="40">if <condition pos:line="290" pos:column="43">(<expr><call><name><name pos:line="290" pos:column="44">registers</name><op:operator pos:line="290" pos:column="53">.</op:operator><name pos:line="290" pos:column="54">InList</name></name><argument_list pos:line="290" pos:column="60">(<argument><expr><name pos:line="290" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="290" pos:column="64"> <block pos:line="290" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="291" pos:column="41">sc</name><op:operator pos:line="291" pos:column="43">.</op:operator><name pos:line="291" pos:column="44">ChangeState</name></name><argument_list pos:line="291" pos:column="55">(<argument><expr><name pos:line="291" pos:column="56">SCE_ASM_REGISTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>  <else pos:line="292" pos:column="36">else <if pos:line="292" pos:column="41">if <condition pos:line="292" pos:column="44">(<expr><call><name><name pos:line="292" pos:column="45">directive</name><op:operator pos:line="292" pos:column="54">.</op:operator><name pos:line="292" pos:column="55">InList</name></name><argument_list pos:line="292" pos:column="61">(<argument><expr><name pos:line="292" pos:column="62">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="292" pos:column="65"> <block pos:line="292" pos:column="66">{
					<expr_stmt><expr><call><name><name pos:line="293" pos:column="41">sc</name><op:operator pos:line="293" pos:column="43">.</op:operator><name pos:line="293" pos:column="44">ChangeState</name></name><argument_list pos:line="293" pos:column="55">(<argument><expr><name pos:line="293" pos:column="56">SCE_ASM_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="294" pos:column="41">IsDirective</name> <op:operator pos:line="294" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="294" pos:column="55">true</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="295" pos:column="35">else <if pos:line="295" pos:column="40">if <condition pos:line="295" pos:column="43">(<expr><call><name><name pos:line="295" pos:column="44">directiveOperand</name><op:operator pos:line="295" pos:column="60">.</op:operator><name pos:line="295" pos:column="61">InList</name></name><argument_list pos:line="295" pos:column="67">(<argument><expr><name pos:line="295" pos:column="68">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="295" pos:column="71"> <block pos:line="295" pos:column="72">{
					<expr_stmt><expr><call><name><name pos:line="296" pos:column="41">sc</name><op:operator pos:line="296" pos:column="43">.</op:operator><name pos:line="296" pos:column="44">ChangeState</name></name><argument_list pos:line="296" pos:column="55">(<argument><expr><name pos:line="296" pos:column="56">SCE_ASM_DIRECTIVEOPERAND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="297" pos:column="35">else <if pos:line="297" pos:column="40">if <condition pos:line="297" pos:column="43">(<expr><call><name><name pos:line="297" pos:column="44">extInstruction</name><op:operator pos:line="297" pos:column="58">.</op:operator><name pos:line="297" pos:column="59">InList</name></name><argument_list pos:line="297" pos:column="65">(<argument><expr><name pos:line="297" pos:column="66">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="297" pos:column="69"> <block pos:line="297" pos:column="70">{
					<expr_stmt><expr><call><name><name pos:line="298" pos:column="41">sc</name><op:operator pos:line="298" pos:column="43">.</op:operator><name pos:line="298" pos:column="44">ChangeState</name></name><argument_list pos:line="298" pos:column="55">(<argument><expr><name pos:line="298" pos:column="56">SCE_ASM_EXTINSTRUCTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="300" pos:column="33">sc</name><op:operator pos:line="300" pos:column="35">.</op:operator><name pos:line="300" pos:column="36">SetState</name></name><argument_list pos:line="300" pos:column="44">(<argument><expr><name pos:line="300" pos:column="45">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="301" pos:column="33">if <condition pos:line="301" pos:column="36">(<expr><name pos:line="301" pos:column="37">IsDirective</name> <op:operator pos:line="301" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="301" pos:column="52">!</op:operator><call><name pos:line="301" pos:column="53">strcmp</name><argument_list pos:line="301" pos:column="59">(<argument><expr><name pos:line="301" pos:column="60">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="301" pos:column="63">"comment"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="301" pos:column="74"> <block pos:line="301" pos:column="75">{
					<decl_stmt><decl><type><name pos:line="302" pos:column="41">char</name></type> <name pos:line="302" pos:column="46">delimiter</name> <init pos:line="302" pos:column="56">= <expr><call><name><name pos:line="302" pos:column="58">options</name><op:operator pos:line="302" pos:column="65">.</op:operator><name pos:line="302" pos:column="66">delimiter</name><op:operator pos:line="302" pos:column="75">.</op:operator><name pos:line="302" pos:column="76">empty</name></name><argument_list pos:line="302" pos:column="81">()</argument_list></call> <op:operator pos:line="302" pos:column="84">?</op:operator> <lit:literal type="char" pos:line="302" pos:column="86">'~'</lit:literal> <op:operator pos:line="302" pos:column="90">:</op:operator> <call><name><name pos:line="302" pos:column="92">options</name><op:operator pos:line="302" pos:column="99">.</op:operator><name pos:line="302" pos:column="100">delimiter</name><op:operator pos:line="302" pos:column="109">.</op:operator><name pos:line="302" pos:column="110">c_str</name></name><argument_list pos:line="302" pos:column="115">()</argument_list></call><index pos:line="302" pos:column="117">[<expr><lit:literal type="number" pos:line="302" pos:column="118">0</lit:literal></expr>]</index></expr></init></decl>;</decl_stmt>
					<while pos:line="303" pos:column="41">while <condition pos:line="303" pos:column="47">(<expr><call><name pos:line="303" pos:column="48">IsASpaceOrTab</name><argument_list pos:line="303" pos:column="61">(<argument><expr><name><name pos:line="303" pos:column="62">sc</name><op:operator pos:line="303" pos:column="64">.</op:operator><name pos:line="303" pos:column="65">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="303" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="303" pos:column="72">!</op:operator><name><name pos:line="303" pos:column="73">sc</name><op:operator pos:line="303" pos:column="75">.</op:operator><name pos:line="303" pos:column="76">atLineEnd</name></name></expr>)</condition> <block pos:line="303" pos:column="87">{
						<expr_stmt><expr><call><name><name pos:line="304" pos:column="49">sc</name><op:operator pos:line="304" pos:column="51">.</op:operator><name pos:line="304" pos:column="52">ForwardSetState</name></name><argument_list pos:line="304" pos:column="67">(<argument><expr><name pos:line="304" pos:column="68">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					<if pos:line="306" pos:column="41">if <condition pos:line="306" pos:column="44">(<expr><name><name pos:line="306" pos:column="45">sc</name><op:operator pos:line="306" pos:column="47">.</op:operator><name pos:line="306" pos:column="48">ch</name></name> <op:operator pos:line="306" pos:column="51">==</op:operator> <name pos:line="306" pos:column="54">delimiter</name></expr>)</condition><then pos:line="306" pos:column="64"> <block pos:line="306" pos:column="65">{
						<expr_stmt><expr><call><name><name pos:line="307" pos:column="49">sc</name><op:operator pos:line="307" pos:column="51">.</op:operator><name pos:line="307" pos:column="52">SetState</name></name><argument_list pos:line="307" pos:column="60">(<argument><expr><name pos:line="307" pos:column="61">SCE_ASM_COMMENTDIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if>
		}</block></then> <else pos:line="311" pos:column="19">else <if pos:line="311" pos:column="24">if <condition pos:line="311" pos:column="27">(<expr><name><name pos:line="311" pos:column="28">sc</name><op:operator pos:line="311" pos:column="30">.</op:operator><name pos:line="311" pos:column="31">state</name></name> <op:operator pos:line="311" pos:column="37">==</op:operator> <name pos:line="311" pos:column="40">SCE_ASM_COMMENTDIRECTIVE</name></expr>)</condition><then pos:line="311" pos:column="65"> <block pos:line="311" pos:column="66">{
			<decl_stmt><decl><type><name pos:line="312" pos:column="25">char</name></type> <name pos:line="312" pos:column="30">delimiter</name> <init pos:line="312" pos:column="40">= <expr><call><name><name pos:line="312" pos:column="42">options</name><op:operator pos:line="312" pos:column="49">.</op:operator><name pos:line="312" pos:column="50">delimiter</name><op:operator pos:line="312" pos:column="59">.</op:operator><name pos:line="312" pos:column="60">empty</name></name><argument_list pos:line="312" pos:column="65">()</argument_list></call> <op:operator pos:line="312" pos:column="68">?</op:operator> <lit:literal type="char" pos:line="312" pos:column="70">'~'</lit:literal> <op:operator pos:line="312" pos:column="74">:</op:operator> <call><name><name pos:line="312" pos:column="76">options</name><op:operator pos:line="312" pos:column="83">.</op:operator><name pos:line="312" pos:column="84">delimiter</name><op:operator pos:line="312" pos:column="93">.</op:operator><name pos:line="312" pos:column="94">c_str</name></name><argument_list pos:line="312" pos:column="99">()</argument_list></call><index pos:line="312" pos:column="101">[<expr><lit:literal type="number" pos:line="312" pos:column="102">0</lit:literal></expr>]</index></expr></init></decl>;</decl_stmt>
			<if pos:line="313" pos:column="25">if <condition pos:line="313" pos:column="28">(<expr><name><name pos:line="313" pos:column="29">sc</name><op:operator pos:line="313" pos:column="31">.</op:operator><name pos:line="313" pos:column="32">ch</name></name> <op:operator pos:line="313" pos:column="35">==</op:operator> <name pos:line="313" pos:column="38">delimiter</name></expr>)</condition><then pos:line="313" pos:column="48"> <block pos:line="313" pos:column="49">{
				<while pos:line="314" pos:column="33">while <condition pos:line="314" pos:column="39">(<expr><op:operator pos:line="314" pos:column="40">!</op:operator><name><name pos:line="314" pos:column="41">sc</name><op:operator pos:line="314" pos:column="43">.</op:operator><name pos:line="314" pos:column="44">atLineEnd</name></name></expr>)</condition> <block pos:line="314" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="315" pos:column="41">sc</name><op:operator pos:line="315" pos:column="43">.</op:operator><name pos:line="315" pos:column="44">Forward</name></name><argument_list pos:line="315" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></while>
				<expr_stmt><expr><call><name><name pos:line="317" pos:column="33">sc</name><op:operator pos:line="317" pos:column="35">.</op:operator><name pos:line="317" pos:column="36">SetState</name></name><argument_list pos:line="317" pos:column="44">(<argument><expr><name pos:line="317" pos:column="45">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="319" pos:column="19">else <if pos:line="319" pos:column="24">if <condition pos:line="319" pos:column="27">(<expr><name><name pos:line="319" pos:column="28">sc</name><op:operator pos:line="319" pos:column="30">.</op:operator><name pos:line="319" pos:column="31">state</name></name> <op:operator pos:line="319" pos:column="37">==</op:operator> <name pos:line="319" pos:column="40">SCE_ASM_COMMENT</name></expr> )</condition><then pos:line="319" pos:column="57"> <block pos:line="319" pos:column="58">{
			<if pos:line="320" pos:column="25">if <condition pos:line="320" pos:column="28">(<expr><name><name pos:line="320" pos:column="29">sc</name><op:operator pos:line="320" pos:column="31">.</op:operator><name pos:line="320" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="320" pos:column="42"> <block pos:line="320" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="321" pos:column="33">sc</name><op:operator pos:line="321" pos:column="35">.</op:operator><name pos:line="321" pos:column="36">SetState</name></name><argument_list pos:line="321" pos:column="44">(<argument><expr><name pos:line="321" pos:column="45">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="323" pos:column="19">else <if pos:line="323" pos:column="24">if <condition pos:line="323" pos:column="27">(<expr><name><name pos:line="323" pos:column="28">sc</name><op:operator pos:line="323" pos:column="30">.</op:operator><name pos:line="323" pos:column="31">state</name></name> <op:operator pos:line="323" pos:column="37">==</op:operator> <name pos:line="323" pos:column="40">SCE_ASM_STRING</name></expr>)</condition><then pos:line="323" pos:column="55"> <block pos:line="323" pos:column="56">{
			<if pos:line="324" pos:column="25">if <condition pos:line="324" pos:column="28">(<expr><name><name pos:line="324" pos:column="29">sc</name><op:operator pos:line="324" pos:column="31">.</op:operator><name pos:line="324" pos:column="32">ch</name></name> <op:operator pos:line="324" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="324" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="324" pos:column="43"> <block pos:line="324" pos:column="44">{
				<if pos:line="325" pos:column="33">if <condition pos:line="325" pos:column="36">(<expr><name><name pos:line="325" pos:column="37">sc</name><op:operator pos:line="325" pos:column="39">.</op:operator><name pos:line="325" pos:column="40">chNext</name></name> <op:operator pos:line="325" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="325" pos:column="50">'\"'</lit:literal> <op:operator pos:line="325" pos:column="55">||</op:operator> <name><name pos:line="325" pos:column="58">sc</name><op:operator pos:line="325" pos:column="60">.</op:operator><name pos:line="325" pos:column="61">chNext</name></name> <op:operator pos:line="325" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="325" pos:column="71">'\''</lit:literal> <op:operator pos:line="325" pos:column="76">||</op:operator> <name><name pos:line="325" pos:column="79">sc</name><op:operator pos:line="325" pos:column="81">.</op:operator><name pos:line="325" pos:column="82">chNext</name></name> <op:operator pos:line="325" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="325" pos:column="92">'\\'</lit:literal></expr>)</condition><then pos:line="325" pos:column="97"> <block pos:line="325" pos:column="98">{
					<expr_stmt><expr><call><name><name pos:line="326" pos:column="41">sc</name><op:operator pos:line="326" pos:column="43">.</op:operator><name pos:line="326" pos:column="44">Forward</name></name><argument_list pos:line="326" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="328" pos:column="27">else <if pos:line="328" pos:column="32">if <condition pos:line="328" pos:column="35">(<expr><name><name pos:line="328" pos:column="36">sc</name><op:operator pos:line="328" pos:column="38">.</op:operator><name pos:line="328" pos:column="39">ch</name></name> <op:operator pos:line="328" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="328" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="328" pos:column="50"> <block pos:line="328" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="329" pos:column="33">sc</name><op:operator pos:line="329" pos:column="35">.</op:operator><name pos:line="329" pos:column="36">ForwardSetState</name></name><argument_list pos:line="329" pos:column="51">(<argument><expr><name pos:line="329" pos:column="52">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="330" pos:column="27">else <if pos:line="330" pos:column="32">if <condition pos:line="330" pos:column="35">(<expr><name><name pos:line="330" pos:column="36">sc</name><op:operator pos:line="330" pos:column="38">.</op:operator><name pos:line="330" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="330" pos:column="49"> <block pos:line="330" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="331" pos:column="33">sc</name><op:operator pos:line="331" pos:column="35">.</op:operator><name pos:line="331" pos:column="36">ChangeState</name></name><argument_list pos:line="331" pos:column="47">(<argument><expr><name pos:line="331" pos:column="48">SCE_ASM_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="332" pos:column="33">sc</name><op:operator pos:line="332" pos:column="35">.</op:operator><name pos:line="332" pos:column="36">ForwardSetState</name></name><argument_list pos:line="332" pos:column="51">(<argument><expr><name pos:line="332" pos:column="52">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then> <else pos:line="334" pos:column="19">else <if pos:line="334" pos:column="24">if <condition pos:line="334" pos:column="27">(<expr><name><name pos:line="334" pos:column="28">sc</name><op:operator pos:line="334" pos:column="30">.</op:operator><name pos:line="334" pos:column="31">state</name></name> <op:operator pos:line="334" pos:column="37">==</op:operator> <name pos:line="334" pos:column="40">SCE_ASM_CHARACTER</name></expr>)</condition><then pos:line="334" pos:column="58"> <block pos:line="334" pos:column="59">{
			<if pos:line="335" pos:column="25">if <condition pos:line="335" pos:column="28">(<expr><name><name pos:line="335" pos:column="29">sc</name><op:operator pos:line="335" pos:column="31">.</op:operator><name pos:line="335" pos:column="32">ch</name></name> <op:operator pos:line="335" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="335" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="335" pos:column="43"> <block pos:line="335" pos:column="44">{
				<if pos:line="336" pos:column="33">if <condition pos:line="336" pos:column="36">(<expr><name><name pos:line="336" pos:column="37">sc</name><op:operator pos:line="336" pos:column="39">.</op:operator><name pos:line="336" pos:column="40">chNext</name></name> <op:operator pos:line="336" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="336" pos:column="50">'\"'</lit:literal> <op:operator pos:line="336" pos:column="55">||</op:operator> <name><name pos:line="336" pos:column="58">sc</name><op:operator pos:line="336" pos:column="60">.</op:operator><name pos:line="336" pos:column="61">chNext</name></name> <op:operator pos:line="336" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="336" pos:column="71">'\''</lit:literal> <op:operator pos:line="336" pos:column="76">||</op:operator> <name><name pos:line="336" pos:column="79">sc</name><op:operator pos:line="336" pos:column="81">.</op:operator><name pos:line="336" pos:column="82">chNext</name></name> <op:operator pos:line="336" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="336" pos:column="92">'\\'</lit:literal></expr>)</condition><then pos:line="336" pos:column="97"> <block pos:line="336" pos:column="98">{
					<expr_stmt><expr><call><name><name pos:line="337" pos:column="41">sc</name><op:operator pos:line="337" pos:column="43">.</op:operator><name pos:line="337" pos:column="44">Forward</name></name><argument_list pos:line="337" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="339" pos:column="27">else <if pos:line="339" pos:column="32">if <condition pos:line="339" pos:column="35">(<expr><name><name pos:line="339" pos:column="36">sc</name><op:operator pos:line="339" pos:column="38">.</op:operator><name pos:line="339" pos:column="39">ch</name></name> <op:operator pos:line="339" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="339" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="339" pos:column="50"> <block pos:line="339" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="340" pos:column="33">sc</name><op:operator pos:line="340" pos:column="35">.</op:operator><name pos:line="340" pos:column="36">ForwardSetState</name></name><argument_list pos:line="340" pos:column="51">(<argument><expr><name pos:line="340" pos:column="52">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="341" pos:column="27">else <if pos:line="341" pos:column="32">if <condition pos:line="341" pos:column="35">(<expr><name><name pos:line="341" pos:column="36">sc</name><op:operator pos:line="341" pos:column="38">.</op:operator><name pos:line="341" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="341" pos:column="49"> <block pos:line="341" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="342" pos:column="33">sc</name><op:operator pos:line="342" pos:column="35">.</op:operator><name pos:line="342" pos:column="36">ChangeState</name></name><argument_list pos:line="342" pos:column="47">(<argument><expr><name pos:line="342" pos:column="48">SCE_ASM_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="343" pos:column="33">sc</name><op:operator pos:line="343" pos:column="35">.</op:operator><name pos:line="343" pos:column="36">ForwardSetState</name></name><argument_list pos:line="343" pos:column="51">(<argument><expr><name pos:line="343" pos:column="52">SCE_ASM_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="347" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="348" pos:column="17">if <condition pos:line="348" pos:column="20">(<expr><name><name pos:line="348" pos:column="21">sc</name><op:operator pos:line="348" pos:column="23">.</op:operator><name pos:line="348" pos:column="24">state</name></name> <op:operator pos:line="348" pos:column="30">==</op:operator> <name pos:line="348" pos:column="33">SCE_ASM_DEFAULT</name></expr>)</condition><then pos:line="348" pos:column="49"> <block pos:line="348" pos:column="50">{
			<if pos:line="349" pos:column="25">if <condition pos:line="349" pos:column="28">(<expr><name><name pos:line="349" pos:column="29">sc</name><op:operator pos:line="349" pos:column="31">.</op:operator><name pos:line="349" pos:column="32">ch</name></name> <op:operator pos:line="349" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="349" pos:column="38">';'</lit:literal></expr>)</condition><then><block pos:line="349" pos:column="42">{
				<expr_stmt><expr><call><name><name pos:line="350" pos:column="33">sc</name><op:operator pos:line="350" pos:column="35">.</op:operator><name pos:line="350" pos:column="36">SetState</name></name><argument_list pos:line="350" pos:column="44">(<argument><expr><name pos:line="350" pos:column="45">SCE_ASM_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="351" pos:column="27">else <if pos:line="351" pos:column="32">if <condition pos:line="351" pos:column="35">(<expr><call><name pos:line="351" pos:column="36">isascii</name><argument_list pos:line="351" pos:column="43">(<argument><expr><name><name pos:line="351" pos:column="44">sc</name><op:operator pos:line="351" pos:column="46">.</op:operator><name pos:line="351" pos:column="47">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="351" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="351" pos:column="54">(</op:operator><call><name pos:line="351" pos:column="55">isdigit</name><argument_list pos:line="351" pos:column="62">(<argument><expr><name><name pos:line="351" pos:column="63">sc</name><op:operator pos:line="351" pos:column="65">.</op:operator><name pos:line="351" pos:column="66">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="351" pos:column="70">||</op:operator> <op:operator pos:line="351" pos:column="73">(</op:operator><name><name pos:line="351" pos:column="74">sc</name><op:operator pos:line="351" pos:column="76">.</op:operator><name pos:line="351" pos:column="77">ch</name></name> <op:operator pos:line="351" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="351" pos:column="83">'.'</lit:literal> <op:operator pos:line="351" pos:column="87">&amp;&amp;</op:operator> <call><name pos:line="351" pos:column="90">isascii</name><argument_list pos:line="351" pos:column="97">(<argument><expr><name><name pos:line="351" pos:column="98">sc</name><op:operator pos:line="351" pos:column="100">.</op:operator><name pos:line="351" pos:column="101">chNext</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="351" pos:column="109">&amp;&amp;</op:operator> <call><name pos:line="351" pos:column="112">isdigit</name><argument_list pos:line="351" pos:column="119">(<argument><expr><name><name pos:line="351" pos:column="120">sc</name><op:operator pos:line="351" pos:column="122">.</op:operator><name pos:line="351" pos:column="123">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="351" pos:column="130">)</op:operator><op:operator pos:line="351" pos:column="131">)</op:operator></expr>)</condition><then pos:line="351" pos:column="133"> <block pos:line="351" pos:column="134">{
				<expr_stmt><expr><call><name><name pos:line="352" pos:column="33">sc</name><op:operator pos:line="352" pos:column="35">.</op:operator><name pos:line="352" pos:column="36">SetState</name></name><argument_list pos:line="352" pos:column="44">(<argument><expr><name pos:line="352" pos:column="45">SCE_ASM_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="353" pos:column="27">else <if pos:line="353" pos:column="32">if <condition pos:line="353" pos:column="35">(<expr><call><name pos:line="353" pos:column="36">IsAWordStart</name><argument_list pos:line="353" pos:column="48">(<argument><expr><name><name pos:line="353" pos:column="49">sc</name><op:operator pos:line="353" pos:column="51">.</op:operator><name pos:line="353" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="353" pos:column="56"> <block pos:line="353" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="354" pos:column="33">sc</name><op:operator pos:line="354" pos:column="35">.</op:operator><name pos:line="354" pos:column="36">SetState</name></name><argument_list pos:line="354" pos:column="44">(<argument><expr><name pos:line="354" pos:column="45">SCE_ASM_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="355" pos:column="27">else <if pos:line="355" pos:column="32">if <condition pos:line="355" pos:column="35">(<expr><name><name pos:line="355" pos:column="36">sc</name><op:operator pos:line="355" pos:column="38">.</op:operator><name pos:line="355" pos:column="39">ch</name></name> <op:operator pos:line="355" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="355" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="355" pos:column="50"> <block pos:line="355" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="356" pos:column="33">sc</name><op:operator pos:line="356" pos:column="35">.</op:operator><name pos:line="356" pos:column="36">SetState</name></name><argument_list pos:line="356" pos:column="44">(<argument><expr><name pos:line="356" pos:column="45">SCE_ASM_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="357" pos:column="27">else <if pos:line="357" pos:column="32">if <condition pos:line="357" pos:column="35">(<expr><name><name pos:line="357" pos:column="36">sc</name><op:operator pos:line="357" pos:column="38">.</op:operator><name pos:line="357" pos:column="39">ch</name></name> <op:operator pos:line="357" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="357" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="357" pos:column="50"> <block pos:line="357" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="358" pos:column="33">sc</name><op:operator pos:line="358" pos:column="35">.</op:operator><name pos:line="358" pos:column="36">SetState</name></name><argument_list pos:line="358" pos:column="44">(<argument><expr><name pos:line="358" pos:column="45">SCE_ASM_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="359" pos:column="27">else <if pos:line="359" pos:column="32">if <condition pos:line="359" pos:column="35">(<expr><call><name pos:line="359" pos:column="36">IsAsmOperator</name><argument_list pos:line="359" pos:column="49">(<argument><expr><name><name pos:line="359" pos:column="50">sc</name><op:operator pos:line="359" pos:column="52">.</op:operator><name pos:line="359" pos:column="53">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="359" pos:column="57"> <block pos:line="359" pos:column="58">{
				<expr_stmt><expr><call><name><name pos:line="360" pos:column="33">sc</name><op:operator pos:line="360" pos:column="35">.</op:operator><name pos:line="360" pos:column="36">SetState</name></name><argument_list pos:line="360" pos:column="44">(<argument><expr><name pos:line="360" pos:column="45">SCE_ASM_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="365" pos:column="9">sc</name><op:operator pos:line="365" pos:column="11">.</op:operator><name pos:line="365" pos:column="12">Complete</name></name><argument_list pos:line="365" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="368" pos:column="1">// Store both the current line's fold level and the next lines in the</comment>
<comment type="line" pos:line="369" pos:column="1">// level store to make it easy to pick up with each increment</comment>
<comment type="line" pos:line="370" pos:column="1">// and to make it possible to fiddle the current level for "else".</comment>

<function><type><name pos:line="372" pos:column="1">void</name> <name pos:line="372" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="372" pos:column="17">LexerAsm</name><op:operator pos:line="372" pos:column="25">::</op:operator><name pos:line="372" pos:column="27">Fold</name></name><parameter_list pos:line="372" pos:column="31">(<param><decl><type><name pos:line="372" pos:column="32">unsigned</name> <name pos:line="372" pos:column="41">int</name></type> <name pos:line="372" pos:column="45">startPos</name></decl></param>, <param><decl><type><name pos:line="372" pos:column="55">int</name></type> <name pos:line="372" pos:column="59">length</name></decl></param>, <param><decl><type><name pos:line="372" pos:column="67">int</name></type> <name pos:line="372" pos:column="71">initStyle</name></decl></param>, <param><decl><type><name pos:line="372" pos:column="82">IDocument</name> <type:modifier pos:line="372" pos:column="92">*</type:modifier></type><name pos:line="372" pos:column="93">pAccess</name></decl></param>)</parameter_list> <block pos:line="372" pos:column="102">{

	<if pos:line="374" pos:column="9">if <condition pos:line="374" pos:column="12">(<expr><op:operator pos:line="374" pos:column="13">!</op:operator><name><name pos:line="374" pos:column="14">options</name><op:operator pos:line="374" pos:column="21">.</op:operator><name pos:line="374" pos:column="22">fold</name></name></expr>)</condition><then pos:line="374" pos:column="27">
		<return pos:line="375" pos:column="17">return;</return></then></if>

	<function_decl><type><name pos:line="377" pos:column="9">LexAccessor</name></type> <name pos:line="377" pos:column="21">styler</name><parameter_list pos:line="377" pos:column="27">(<param><decl><type><name pos:line="377" pos:column="28">pAccess</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="379" pos:column="9">unsigned</name> <name pos:line="379" pos:column="18">int</name></type> <name pos:line="379" pos:column="22">endPos</name> <init pos:line="379" pos:column="29">= <expr><name pos:line="379" pos:column="31">startPos</name> <op:operator pos:line="379" pos:column="40">+</op:operator> <name pos:line="379" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="380" pos:column="9">int</name></type> <name pos:line="380" pos:column="13">visibleChars</name> <init pos:line="380" pos:column="26">= <expr><lit:literal type="number" pos:line="380" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="381" pos:column="9">int</name></type> <name pos:line="381" pos:column="13">lineCurrent</name> <init pos:line="381" pos:column="25">= <expr><call><name><name pos:line="381" pos:column="27">styler</name><op:operator pos:line="381" pos:column="33">.</op:operator><name pos:line="381" pos:column="34">GetLine</name></name><argument_list pos:line="381" pos:column="41">(<argument><expr><name pos:line="381" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="382" pos:column="9">int</name></type> <name pos:line="382" pos:column="13">levelCurrent</name> <init pos:line="382" pos:column="26">= <expr><name pos:line="382" pos:column="28">SC_FOLDLEVELBASE</name></expr></init></decl>;</decl_stmt>
	<if pos:line="383" pos:column="9">if <condition pos:line="383" pos:column="12">(<expr><name pos:line="383" pos:column="13">lineCurrent</name> <op:operator pos:line="383" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="383" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="383" pos:column="29">
		<expr_stmt><expr><name pos:line="384" pos:column="17">levelCurrent</name> <op:operator pos:line="384" pos:column="30">=</op:operator> <call><name><name pos:line="384" pos:column="32">styler</name><op:operator pos:line="384" pos:column="38">.</op:operator><name pos:line="384" pos:column="39">LevelAt</name></name><argument_list pos:line="384" pos:column="46">(<argument><expr><name pos:line="384" pos:column="47">lineCurrent</name><op:operator pos:line="384" pos:column="58">-</op:operator><lit:literal type="number" pos:line="384" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="384" pos:column="62">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="384" pos:column="65">16</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="385" pos:column="9">int</name></type> <name pos:line="385" pos:column="13">levelNext</name> <init pos:line="385" pos:column="23">= <expr><name pos:line="385" pos:column="25">levelCurrent</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="386" pos:column="9">char</name></type> <name pos:line="386" pos:column="14">chNext</name> <init pos:line="386" pos:column="21">= <expr><name><name pos:line="386" pos:column="23">styler</name><index pos:line="386" pos:column="29">[<expr><name pos:line="386" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="387" pos:column="9">int</name></type> <name pos:line="387" pos:column="13">styleNext</name> <init pos:line="387" pos:column="23">= <expr><call><name><name pos:line="387" pos:column="25">styler</name><op:operator pos:line="387" pos:column="31">.</op:operator><name pos:line="387" pos:column="32">StyleAt</name></name><argument_list pos:line="387" pos:column="39">(<argument><expr><name pos:line="387" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="388" pos:column="9">int</name></type> <name pos:line="388" pos:column="13">style</name> <init pos:line="388" pos:column="19">= <expr><name pos:line="388" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="389" pos:column="9">char</name></type> <name><name pos:line="389" pos:column="14">word</name><index pos:line="389" pos:column="18">[<expr><lit:literal type="number" pos:line="389" pos:column="19">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="390" pos:column="9">int</name></type> <name pos:line="390" pos:column="13">wordlen</name> <init pos:line="390" pos:column="21">= <expr><lit:literal type="number" pos:line="390" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="391" pos:column="9">const</specifier> <name pos:line="391" pos:column="15">bool</name></type> <name pos:line="391" pos:column="20">userDefinedFoldMarkers</name> <init pos:line="391" pos:column="43">= <expr><op:operator pos:line="391" pos:column="45">!</op:operator><call><name><name pos:line="391" pos:column="46">options</name><op:operator pos:line="391" pos:column="53">.</op:operator><name pos:line="391" pos:column="54">foldExplicitStart</name><op:operator pos:line="391" pos:column="71">.</op:operator><name pos:line="391" pos:column="72">empty</name></name><argument_list pos:line="391" pos:column="77">()</argument_list></call> <op:operator pos:line="391" pos:column="80">&amp;&amp;</op:operator> <op:operator pos:line="391" pos:column="83">!</op:operator><call><name><name pos:line="391" pos:column="84">options</name><op:operator pos:line="391" pos:column="91">.</op:operator><name pos:line="391" pos:column="92">foldExplicitEnd</name><op:operator pos:line="391" pos:column="107">.</op:operator><name pos:line="391" pos:column="108">empty</name></name><argument_list pos:line="391" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="392" pos:column="9">for (<init><decl><type><name pos:line="392" pos:column="14">unsigned</name> <name pos:line="392" pos:column="23">int</name></type> <name pos:line="392" pos:column="27">i</name> <init pos:line="392" pos:column="29">= <expr><name pos:line="392" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="392" pos:column="41">i</name> <op:operator pos:line="392" pos:column="43">&lt;</op:operator> <name pos:line="392" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="392" pos:column="53">i</name><op:operator pos:line="392" pos:column="54">++</op:operator></expr></incr>) <block pos:line="392" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="393" pos:column="17">char</name></type> <name pos:line="393" pos:column="22">ch</name> <init pos:line="393" pos:column="25">= <expr><name pos:line="393" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="394" pos:column="17">chNext</name> <op:operator pos:line="394" pos:column="24">=</op:operator> <call><name><name pos:line="394" pos:column="26">styler</name><op:operator pos:line="394" pos:column="32">.</op:operator><name pos:line="394" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="394" pos:column="46">(<argument><expr><name pos:line="394" pos:column="47">i</name> <op:operator pos:line="394" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="394" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="395" pos:column="17">int</name></type> <name pos:line="395" pos:column="21">stylePrev</name> <init pos:line="395" pos:column="31">= <expr><name pos:line="395" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="396" pos:column="17">style</name> <op:operator pos:line="396" pos:column="23">=</op:operator> <name pos:line="396" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="397" pos:column="17">styleNext</name> <op:operator pos:line="397" pos:column="27">=</op:operator> <call><name><name pos:line="397" pos:column="29">styler</name><op:operator pos:line="397" pos:column="35">.</op:operator><name pos:line="397" pos:column="36">StyleAt</name></name><argument_list pos:line="397" pos:column="43">(<argument><expr><name pos:line="397" pos:column="44">i</name> <op:operator pos:line="397" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="397" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="398" pos:column="17">bool</name></type> <name pos:line="398" pos:column="22">atEOL</name> <init pos:line="398" pos:column="28">= <expr><op:operator pos:line="398" pos:column="30">(</op:operator><name pos:line="398" pos:column="31">ch</name> <op:operator pos:line="398" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="398" pos:column="37">'\r'</lit:literal> <op:operator pos:line="398" pos:column="42">&amp;&amp;</op:operator> <name pos:line="398" pos:column="45">chNext</name> <op:operator pos:line="398" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="398" pos:column="55">'\n'</lit:literal><op:operator pos:line="398" pos:column="59">)</op:operator> <op:operator pos:line="398" pos:column="61">||</op:operator> <op:operator pos:line="398" pos:column="64">(</op:operator><name pos:line="398" pos:column="65">ch</name> <op:operator pos:line="398" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="398" pos:column="71">'\n'</lit:literal><op:operator pos:line="398" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="399" pos:column="17">if <condition pos:line="399" pos:column="20">(<expr><name><name pos:line="399" pos:column="21">options</name><op:operator pos:line="399" pos:column="28">.</op:operator><name pos:line="399" pos:column="29">foldCommentMultiline</name></name> <op:operator pos:line="399" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="399" pos:column="53">IsStreamCommentStyle</name><argument_list pos:line="399" pos:column="73">(<argument><expr><name pos:line="399" pos:column="74">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="399" pos:column="81"> <block pos:line="399" pos:column="82">{
			<if pos:line="400" pos:column="25">if <condition pos:line="400" pos:column="28">(<expr><op:operator pos:line="400" pos:column="29">!</op:operator><call><name pos:line="400" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="400" pos:column="50">(<argument><expr><name pos:line="400" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="400" pos:column="62"> <block pos:line="400" pos:column="63">{
				<expr_stmt><expr><name pos:line="401" pos:column="33">levelNext</name><op:operator pos:line="401" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="402" pos:column="27">else <if pos:line="402" pos:column="32">if <condition pos:line="402" pos:column="35">(<expr><op:operator pos:line="402" pos:column="36">!</op:operator><call><name pos:line="402" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="402" pos:column="57">(<argument><expr><name pos:line="402" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="402" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="402" pos:column="72">!</op:operator><name pos:line="402" pos:column="73">atEOL</name></expr>)</condition><then pos:line="402" pos:column="79"> <block pos:line="402" pos:column="80">{
				<comment type="line" pos:line="403" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="404" pos:column="33">levelNext</name><op:operator pos:line="404" pos:column="42">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="407" pos:column="17">if <condition pos:line="407" pos:column="20">(<expr><name><name pos:line="407" pos:column="21">options</name><op:operator pos:line="407" pos:column="28">.</op:operator><name pos:line="407" pos:column="29">foldCommentExplicit</name></name> <op:operator pos:line="407" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="407" pos:column="52">(</op:operator><op:operator pos:line="407" pos:column="53">(</op:operator><name pos:line="407" pos:column="54">style</name> <op:operator pos:line="407" pos:column="60">==</op:operator> <name pos:line="407" pos:column="63">SCE_ASM_COMMENT</name><op:operator pos:line="407" pos:column="78">)</op:operator> <op:operator pos:line="407" pos:column="80">||</op:operator> <name><name pos:line="407" pos:column="83">options</name><op:operator pos:line="407" pos:column="90">.</op:operator><name pos:line="407" pos:column="91">foldExplicitAnywhere</name></name><op:operator pos:line="407" pos:column="111">)</op:operator></expr>)</condition><then pos:line="407" pos:column="113"> <block pos:line="407" pos:column="114">{
			<if pos:line="408" pos:column="25">if <condition pos:line="408" pos:column="28">(<expr><name pos:line="408" pos:column="29">userDefinedFoldMarkers</name></expr>)</condition><then pos:line="408" pos:column="52"> <block pos:line="408" pos:column="53">{
				<if pos:line="409" pos:column="33">if <condition pos:line="409" pos:column="36">(<expr><call><name><name pos:line="409" pos:column="37">styler</name><op:operator pos:line="409" pos:column="43">.</op:operator><name pos:line="409" pos:column="44">Match</name></name><argument_list pos:line="409" pos:column="49">(<argument><expr><name pos:line="409" pos:column="50">i</name></expr></argument>, <argument><expr><call><name><name pos:line="409" pos:column="53">options</name><op:operator pos:line="409" pos:column="60">.</op:operator><name pos:line="409" pos:column="61">foldExplicitStart</name><op:operator pos:line="409" pos:column="78">.</op:operator><name pos:line="409" pos:column="79">c_str</name></name><argument_list pos:line="409" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="409" pos:column="88"> <block pos:line="409" pos:column="89">{
 					<expr_stmt><expr><name pos:line="410" pos:column="41">levelNext</name><op:operator pos:line="410" pos:column="50">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="411" pos:column="35">else <if pos:line="411" pos:column="40">if <condition pos:line="411" pos:column="43">(<expr><call><name><name pos:line="411" pos:column="44">styler</name><op:operator pos:line="411" pos:column="50">.</op:operator><name pos:line="411" pos:column="51">Match</name></name><argument_list pos:line="411" pos:column="56">(<argument><expr><name pos:line="411" pos:column="57">i</name></expr></argument>, <argument><expr><call><name><name pos:line="411" pos:column="60">options</name><op:operator pos:line="411" pos:column="67">.</op:operator><name pos:line="411" pos:column="68">foldExplicitEnd</name><op:operator pos:line="411" pos:column="83">.</op:operator><name pos:line="411" pos:column="84">c_str</name></name><argument_list pos:line="411" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="411" pos:column="93"> <block pos:line="411" pos:column="94">{
 					<expr_stmt><expr><name pos:line="412" pos:column="41">levelNext</name><op:operator pos:line="412" pos:column="50">--</op:operator></expr>;</expr_stmt>
 				}</block></then></if></else></if>
			}</block></then> <else pos:line="414" pos:column="27">else <block pos:line="414" pos:column="32">{
				<if pos:line="415" pos:column="33">if <condition pos:line="415" pos:column="36">(<expr><name pos:line="415" pos:column="37">ch</name> <op:operator pos:line="415" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="415" pos:column="43">';'</lit:literal></expr>)</condition><then pos:line="415" pos:column="47"> <block pos:line="415" pos:column="48">{
					<if pos:line="416" pos:column="41">if <condition pos:line="416" pos:column="44">(<expr><name pos:line="416" pos:column="45">chNext</name> <op:operator pos:line="416" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="416" pos:column="55">'{'</lit:literal></expr>)</condition><then pos:line="416" pos:column="59"> <block pos:line="416" pos:column="60">{
						<expr_stmt><expr><name pos:line="417" pos:column="49">levelNext</name><op:operator pos:line="417" pos:column="58">++</op:operator></expr>;</expr_stmt>
					}</block></then> <else pos:line="418" pos:column="43">else <if pos:line="418" pos:column="48">if <condition pos:line="418" pos:column="51">(<expr><name pos:line="418" pos:column="52">chNext</name> <op:operator pos:line="418" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="418" pos:column="62">'}'</lit:literal></expr>)</condition><then pos:line="418" pos:column="66"> <block pos:line="418" pos:column="67">{
						<expr_stmt><expr><name pos:line="419" pos:column="49">levelNext</name><op:operator pos:line="419" pos:column="58">--</op:operator></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then></if>
 			}</block></else></if>
 		}</block></then></if>
		<if pos:line="424" pos:column="17">if <condition pos:line="424" pos:column="20">(<expr><name><name pos:line="424" pos:column="21">options</name><op:operator pos:line="424" pos:column="28">.</op:operator><name pos:line="424" pos:column="29">foldSyntaxBased</name></name> <op:operator pos:line="424" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="424" pos:column="48">(</op:operator><name pos:line="424" pos:column="49">style</name> <op:operator pos:line="424" pos:column="55">==</op:operator> <name pos:line="424" pos:column="58">SCE_ASM_DIRECTIVE</name><op:operator pos:line="424" pos:column="75">)</op:operator></expr>)</condition><then pos:line="424" pos:column="77"> <block pos:line="424" pos:column="78">{
			<expr_stmt><expr><name><name pos:line="425" pos:column="25">word</name><index pos:line="425" pos:column="29">[<expr><name pos:line="425" pos:column="30">wordlen</name><op:operator pos:line="425" pos:column="37">++</op:operator></expr>]</index></name> <op:operator pos:line="425" pos:column="41">=</op:operator> <call><name><name pos:line="425" pos:column="43">static_cast</name><argument_list pos:line="425" pos:column="54">&lt;<argument><expr><name pos:line="425" pos:column="55">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="425" pos:column="60">(<argument><expr><call><name pos:line="425" pos:column="61">LowerCase</name><argument_list pos:line="425" pos:column="70">(<argument><expr><name pos:line="425" pos:column="71">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="426" pos:column="25">if <condition pos:line="426" pos:column="28">(<expr><name pos:line="426" pos:column="29">wordlen</name> <op:operator pos:line="426" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="426" pos:column="40">100</lit:literal></expr>)</condition><then pos:line="426" pos:column="44"> <block pos:line="426" pos:column="45">{                   <comment type="line" pos:line="426" pos:column="65">// prevent overflow</comment>
				<expr_stmt><expr><name><name pos:line="427" pos:column="33">word</name><index pos:line="427" pos:column="37">[<expr><lit:literal type="number" pos:line="427" pos:column="38">0</lit:literal></expr>]</index></name> <op:operator pos:line="427" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="427" pos:column="43">'\0'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="428" pos:column="33">wordlen</name> <op:operator pos:line="428" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="428" pos:column="43">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="430" pos:column="25">if <condition pos:line="430" pos:column="28">(<expr><name pos:line="430" pos:column="29">styleNext</name> <op:operator pos:line="430" pos:column="39">!=</op:operator> <name pos:line="430" pos:column="42">SCE_ASM_DIRECTIVE</name></expr>)</condition><then pos:line="430" pos:column="60"> <block pos:line="430" pos:column="61">{   <comment type="line" pos:line="430" pos:column="65">// reading directive ready</comment>
				<expr_stmt><expr><name><name pos:line="431" pos:column="33">word</name><index pos:line="431" pos:column="37">[<expr><name pos:line="431" pos:column="38">wordlen</name></expr>]</index></name> <op:operator pos:line="431" pos:column="47">=</op:operator> <lit:literal type="char" pos:line="431" pos:column="49">'\0'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="432" pos:column="33">wordlen</name> <op:operator pos:line="432" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="432" pos:column="43">0</lit:literal></expr>;</expr_stmt>
				<if pos:line="433" pos:column="33">if <condition pos:line="433" pos:column="36">(<expr><call><name><name pos:line="433" pos:column="37">directives4foldstart</name><op:operator pos:line="433" pos:column="57">.</op:operator><name pos:line="433" pos:column="58">InList</name></name><argument_list pos:line="433" pos:column="64">(<argument><expr><name pos:line="433" pos:column="65">word</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="433" pos:column="71"> <block pos:line="433" pos:column="72">{
					<expr_stmt><expr><name pos:line="434" pos:column="41">levelNext</name><op:operator pos:line="434" pos:column="50">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="435" pos:column="35">else <if pos:line="435" pos:column="40">if <condition pos:line="435" pos:column="43">(<expr><call><name><name pos:line="435" pos:column="44">directives4foldend</name><op:operator pos:line="435" pos:column="62">.</op:operator><name pos:line="435" pos:column="63">InList</name></name><argument_list pos:line="435" pos:column="69">(<argument><expr><name pos:line="435" pos:column="70">word</name></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="435" pos:column="76">{
					<expr_stmt><expr><name pos:line="436" pos:column="41">levelNext</name><op:operator pos:line="436" pos:column="50">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="440" pos:column="17">if <condition pos:line="440" pos:column="20">(<expr><op:operator pos:line="440" pos:column="21">!</op:operator><call><name pos:line="440" pos:column="22">IsASpace</name><argument_list pos:line="440" pos:column="30">(<argument><expr><name pos:line="440" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="440" pos:column="35">
			<expr_stmt><expr><name pos:line="441" pos:column="25">visibleChars</name><op:operator pos:line="441" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
		<if pos:line="442" pos:column="17">if <condition pos:line="442" pos:column="20">(<expr><name pos:line="442" pos:column="21">atEOL</name> <op:operator pos:line="442" pos:column="27">||</op:operator> <op:operator pos:line="442" pos:column="30">(</op:operator><name pos:line="442" pos:column="31">i</name> <op:operator pos:line="442" pos:column="33">==</op:operator> <name pos:line="442" pos:column="36">endPos</name><op:operator pos:line="442" pos:column="42">-</op:operator><lit:literal type="number" pos:line="442" pos:column="43">1</lit:literal><op:operator pos:line="442" pos:column="44">)</op:operator></expr>)</condition><then pos:line="442" pos:column="46"> <block pos:line="442" pos:column="47">{
			<decl_stmt><decl><type><name pos:line="443" pos:column="25">int</name></type> <name pos:line="443" pos:column="29">levelUse</name> <init pos:line="443" pos:column="38">= <expr><name pos:line="443" pos:column="40">levelCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="444" pos:column="25">int</name></type> <name pos:line="444" pos:column="29">lev</name> <init pos:line="444" pos:column="33">= <expr><name pos:line="444" pos:column="35">levelUse</name> <op:operator pos:line="444" pos:column="44">|</op:operator> <name pos:line="444" pos:column="46">levelNext</name> <op:operator pos:line="444" pos:column="56">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="444" pos:column="59">16</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="445" pos:column="25">if <condition pos:line="445" pos:column="28">(<expr><name pos:line="445" pos:column="29">visibleChars</name> <op:operator pos:line="445" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="445" pos:column="45">0</lit:literal> <op:operator pos:line="445" pos:column="47">&amp;&amp;</op:operator> <name><name pos:line="445" pos:column="50">options</name><op:operator pos:line="445" pos:column="57">.</op:operator><name pos:line="445" pos:column="58">foldCompact</name></name></expr>)</condition><then pos:line="445" pos:column="70">
				<expr_stmt><expr><name pos:line="446" pos:column="33">lev</name> <op:operator pos:line="446" pos:column="37">|=</op:operator> <name pos:line="446" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="447" pos:column="25">if <condition pos:line="447" pos:column="28">(<expr><name pos:line="447" pos:column="29">levelUse</name> <op:operator pos:line="447" pos:column="38">&lt;</op:operator> <name pos:line="447" pos:column="40">levelNext</name></expr>)</condition><then pos:line="447" pos:column="50">
				<expr_stmt><expr><name pos:line="448" pos:column="33">lev</name> <op:operator pos:line="448" pos:column="37">|=</op:operator> <name pos:line="448" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="449" pos:column="25">if <condition pos:line="449" pos:column="28">(<expr><name pos:line="449" pos:column="29">lev</name> <op:operator pos:line="449" pos:column="33">!=</op:operator> <call><name><name pos:line="449" pos:column="36">styler</name><op:operator pos:line="449" pos:column="42">.</op:operator><name pos:line="449" pos:column="43">LevelAt</name></name><argument_list pos:line="449" pos:column="50">(<argument><expr><name pos:line="449" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="449" pos:column="64"> <block pos:line="449" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="450" pos:column="33">styler</name><op:operator pos:line="450" pos:column="39">.</op:operator><name pos:line="450" pos:column="40">SetLevel</name></name><argument_list pos:line="450" pos:column="48">(<argument><expr><name pos:line="450" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="450" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="452" pos:column="25">lineCurrent</name><op:operator pos:line="452" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="453" pos:column="25">levelCurrent</name> <op:operator pos:line="453" pos:column="38">=</op:operator> <name pos:line="453" pos:column="40">levelNext</name></expr>;</expr_stmt>
			<if pos:line="454" pos:column="25">if <condition pos:line="454" pos:column="28">(<expr><name pos:line="454" pos:column="29">atEOL</name> <op:operator pos:line="454" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="454" pos:column="38">(</op:operator><name pos:line="454" pos:column="39">i</name> <op:operator pos:line="454" pos:column="41">==</op:operator> <call><name><name pos:line="454" pos:column="44">static_cast</name><argument_list pos:line="454" pos:column="55">&lt;<argument><expr><name pos:line="454" pos:column="56">unsigned</name> <name pos:line="454" pos:column="65">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="454" pos:column="69">(<argument><expr><call><name><name pos:line="454" pos:column="70">styler</name><op:operator pos:line="454" pos:column="76">.</op:operator><name pos:line="454" pos:column="77">Length</name></name><argument_list pos:line="454" pos:column="83">()</argument_list></call><op:operator pos:line="454" pos:column="85">-</op:operator><lit:literal type="number" pos:line="454" pos:column="86">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="454" pos:column="88">)</op:operator></expr>)</condition><then pos:line="454" pos:column="90"> <block pos:line="454" pos:column="91">{
				<comment type="line" pos:line="455" pos:column="33">// There is an empty line at end of file so give it same level and empty</comment>
				<expr_stmt><expr><call><name><name pos:line="456" pos:column="33">styler</name><op:operator pos:line="456" pos:column="39">.</op:operator><name pos:line="456" pos:column="40">SetLevel</name></name><argument_list pos:line="456" pos:column="48">(<argument><expr><name pos:line="456" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="456" pos:column="62">(</op:operator><name pos:line="456" pos:column="63">levelCurrent</name> <op:operator pos:line="456" pos:column="76">|</op:operator> <name pos:line="456" pos:column="78">levelCurrent</name> <op:operator pos:line="456" pos:column="91">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="456" pos:column="94">16</lit:literal><op:operator pos:line="456" pos:column="96">)</op:operator> <op:operator pos:line="456" pos:column="98">|</op:operator> <name pos:line="456" pos:column="100">SC_FOLDLEVELWHITEFLAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="458" pos:column="25">visibleChars</name> <op:operator pos:line="458" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="458" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name pos:line="463" pos:column="1">LexerModule</name></type> <name pos:line="463" pos:column="13">lmAsm</name><argument_list pos:line="463" pos:column="18">(<argument><expr><name pos:line="463" pos:column="19">SCLEX_ASM</name></expr></argument>, <argument><expr><name><name pos:line="463" pos:column="30">LexerAsm</name><op:operator pos:line="463" pos:column="38">::</op:operator><name pos:line="463" pos:column="40">LexerFactoryAsm</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="463" pos:column="57">"asm"</lit:literal></expr></argument>, <argument><expr><name pos:line="463" pos:column="64">asmWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
