<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\WindowsDlg\WinMgr.cpp" pos:tabs="8"><comment type="line" format="doxygen" pos:line="1" pos:column="1">////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="2" pos:column="1">// MSDN Magazine -- July 2001</comment>
<comment type="line" pos:line="3" pos:column="1">// If this code works, it was written by Paul DiLascia.</comment>
<comment type="line" pos:line="4" pos:column="1">// If not, I don't know who wrote it.</comment>
<comment type="line" pos:line="5" pos:column="1">// Compiles with Visual C++ 6.0. Runs on Win 98 and probably Win 2000 too.</comment>
<comment type="line" pos:line="6" pos:column="1">// Set tabsize = 3 in your editor.</comment>
<comment type="line" pos:line="7" pos:column="1">//</comment>
<comment type="line" pos:line="8" pos:column="1">// Theo - Heavily modified to remove MFC dependencies.  </comment>
<comment type="line" pos:line="9" pos:column="1">//        Replaced CWnd*/HWND, CRect/RECT, CSize/SIZE, CPoint/POINT</comment>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="11" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"WinMgr.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" pos:line="14" pos:column="1">// Theo - Style Helpers</comment>
<function><type><specifier pos:line="15" pos:column="1">inline</specifier> <specifier pos:line="15" pos:column="8">static</specifier> <name pos:line="15" pos:column="15">DWORD</name></type> <name pos:line="15" pos:column="21">GetStyle</name><parameter_list pos:line="15" pos:column="29">(<param><decl><type><name pos:line="15" pos:column="30">HWND</name></type> <name pos:line="15" pos:column="35">hWnd</name></decl></param>)</parameter_list> <block pos:line="15" pos:column="41">{ 
	<return pos:line="16" pos:column="9">return <expr><op:operator pos:line="16" pos:column="16">(</op:operator><name pos:line="16" pos:column="17">DWORD</name><op:operator pos:line="16" pos:column="22">)</op:operator><call><name pos:line="16" pos:column="23">GetWindowLongPtr</name><argument_list pos:line="16" pos:column="39">(<argument><expr><name pos:line="16" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="16" pos:column="46">GWL_STYLE</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function>

<function><type><specifier pos:line="19" pos:column="1">inline</specifier> <specifier pos:line="19" pos:column="8">static</specifier> <name pos:line="19" pos:column="15">DWORD</name></type> <name pos:line="19" pos:column="21">GetExStyle</name><parameter_list pos:line="19" pos:column="31">(<param><decl><type><name pos:line="19" pos:column="32">HWND</name></type> <name pos:line="19" pos:column="37">hWnd</name></decl></param>)</parameter_list> <block pos:line="19" pos:column="43">{ 
	<return pos:line="20" pos:column="9">return <expr><op:operator pos:line="20" pos:column="16">(</op:operator><name pos:line="20" pos:column="17">DWORD</name><op:operator pos:line="20" pos:column="22">)</op:operator><call><name pos:line="20" pos:column="23">GetWindowLongPtr</name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">hWnd</name></expr></argument>, <argument><expr><name pos:line="20" pos:column="46">GWL_EXSTYLE</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function>

<decl_stmt><decl><type><specifier pos:line="23" pos:column="1">const</specifier> <name pos:line="23" pos:column="7">UINT</name></type> <name pos:line="23" pos:column="12">WM_WINMGR</name> <init pos:line="23" pos:column="22">= <expr><call><name pos:line="23" pos:column="24">RegisterWindowMessage</name><argument_list pos:line="23" pos:column="45">(<argument><expr><call><name pos:line="23" pos:column="46">TEXT</name><argument_list pos:line="23" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="51">"WM_WINMGR"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="25" pos:column="1">CWinMgr</name><op:operator pos:line="25" pos:column="8">::</op:operator><name pos:line="25" pos:column="10">CWinMgr</name></name><parameter_list pos:line="25" pos:column="17">(<param><decl><type><name pos:line="25" pos:column="18">WINRECT</name><type:modifier pos:line="25" pos:column="25">*</type:modifier></type> <name pos:line="25" pos:column="27">pWinMap</name></decl></param>)</parameter_list> <member_list pos:line="25" pos:column="36">: <call><name pos:line="25" pos:column="38">m_map</name><argument_list pos:line="25" pos:column="43">(<argument><expr><name pos:line="25" pos:column="44">pWinMap</name></expr></argument>)</argument_list></call>
</member_list><block pos:line="26" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="27" pos:column="9">WINRECT</name><op:operator pos:line="27" pos:column="16">::</op:operator><name pos:line="27" pos:column="18">InitMap</name></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">m_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="30" pos:column="1">CWinMgr</name><op:operator pos:line="30" pos:column="8">::</op:operator>~<name pos:line="30" pos:column="11">CWinMgr</name></name><parameter_list pos:line="30" pos:column="18">()</parameter_list>
<block pos:line="31" pos:column="1">{
}</block></destructor>

<comment type="line" format="doxygen" pos:line="34" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="35" pos:column="1">// Set each control's tofit (desired) size to current size. Useful for</comment>
<comment type="line" pos:line="36" pos:column="1">// dialogs, to "remember" the current sizes as desired size.</comment>
<comment type="line" pos:line="37" pos:column="1">//</comment>
<function><type><name pos:line="38" pos:column="1">void</name></type> <name><name pos:line="38" pos:column="6">CWinMgr</name><op:operator pos:line="38" pos:column="13">::</op:operator><name pos:line="38" pos:column="15">InitToFitSizeFromCurrent</name></name><parameter_list pos:line="38" pos:column="39">(<param><decl><type><name pos:line="38" pos:column="40">HWND</name></type> <name pos:line="38" pos:column="45">hWnd</name></decl></param>)</parameter_list>
<block pos:line="39" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">assert</name><argument_list pos:line="40" pos:column="15">(<argument><expr><name pos:line="40" pos:column="16">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">assert</name><argument_list pos:line="41" pos:column="15">(<argument><expr><name pos:line="41" pos:column="16">m_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">GetWindowPositions</name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="43" pos:column="9">for (<init><decl><type><name pos:line="43" pos:column="14">WINRECT</name><type:modifier pos:line="43" pos:column="21">*</type:modifier></type> <name pos:line="43" pos:column="23">w</name> <init pos:line="43" pos:column="25">= <expr><name pos:line="43" pos:column="27">m_map</name></expr></init></decl>;</init> <condition><expr><op:operator pos:line="43" pos:column="34">!</op:operator><call><name><name pos:line="43" pos:column="35">w</name><op:operator pos:line="43" pos:column="36">-&gt;</op:operator><name pos:line="43" pos:column="38">IsEnd</name></name><argument_list pos:line="43" pos:column="43">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="43" pos:column="47">w</name><op:operator pos:line="43" pos:column="48">++</op:operator></expr></incr>) <block pos:line="43" pos:column="52">{
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><call><name><name pos:line="44" pos:column="21">w</name><op:operator pos:line="44" pos:column="22">-&gt;</op:operator><name pos:line="44" pos:column="24">Type</name></name><argument_list pos:line="44" pos:column="28">()</argument_list></call><op:operator pos:line="44" pos:column="30">==</op:operator><name pos:line="44" pos:column="32">WRCT_TOFIT</name> <op:operator pos:line="44" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="46">!</op:operator><call><name><name pos:line="44" pos:column="47">w</name><op:operator pos:line="44" pos:column="48">-&gt;</op:operator><name pos:line="44" pos:column="50">IsGroup</name></name><argument_list pos:line="44" pos:column="57">()</argument_list></call></expr>)</condition><then pos:line="44" pos:column="60"> <block pos:line="44" pos:column="61">{
			<expr_stmt><expr><call><name><name pos:line="45" pos:column="25">w</name><op:operator pos:line="45" pos:column="26">-&gt;</op:operator><name pos:line="45" pos:column="28">SetToFitSize</name></name><argument_list pos:line="45" pos:column="40">(<argument><expr><call><name pos:line="45" pos:column="41">RectToSize</name><argument_list pos:line="45" pos:column="51">(<argument><expr><call><name><name pos:line="45" pos:column="52">w</name><op:operator pos:line="45" pos:column="53">-&gt;</op:operator><name pos:line="45" pos:column="55">GetRect</name></name><argument_list pos:line="45" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<comment type="line" format="doxygen" pos:line="50" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="51" pos:column="1">// Load all rectangles from current window positions.</comment>
<comment type="line" pos:line="52" pos:column="1">//</comment>
<function><type><name pos:line="53" pos:column="1">void</name></type> <name><name pos:line="53" pos:column="6">CWinMgr</name><op:operator pos:line="53" pos:column="13">::</op:operator><name pos:line="53" pos:column="15">GetWindowPositions</name></name><parameter_list pos:line="53" pos:column="33">(<param><decl><type><name pos:line="53" pos:column="34">HWND</name></type> <name pos:line="53" pos:column="39">hWnd</name></decl></param>)</parameter_list>
<block pos:line="54" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="55" pos:column="9">assert</name><argument_list pos:line="55" pos:column="15">(<argument><expr><name pos:line="55" pos:column="16">m_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="56" pos:column="9">assert</name><argument_list pos:line="56" pos:column="15">(<argument><expr><name pos:line="56" pos:column="16">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="57" pos:column="9">for (<init><decl><type><name pos:line="57" pos:column="14">WINRECT</name><type:modifier pos:line="57" pos:column="21">*</type:modifier></type> <name pos:line="57" pos:column="23">wrc</name><init pos:line="57" pos:column="26">=<expr><name pos:line="57" pos:column="27">m_map</name></expr></init></decl>;</init> <condition><expr><op:operator pos:line="57" pos:column="34">!</op:operator><call><name><name pos:line="57" pos:column="35">wrc</name><op:operator pos:line="57" pos:column="38">-&gt;</op:operator><name pos:line="57" pos:column="40">IsEnd</name></name><argument_list pos:line="57" pos:column="45">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="57" pos:column="49">wrc</name><op:operator pos:line="57" pos:column="52">++</op:operator></expr></incr>) <block pos:line="57" pos:column="56">{
		<if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><call><name><name pos:line="58" pos:column="21">wrc</name><op:operator pos:line="58" pos:column="24">-&gt;</op:operator><name pos:line="58" pos:column="26">IsWindow</name></name><argument_list pos:line="58" pos:column="34">()</argument_list></call></expr>)</condition><then pos:line="58" pos:column="37"> <block pos:line="58" pos:column="38">{
			<decl_stmt><decl><type><name pos:line="59" pos:column="25">HWND</name></type> <name pos:line="59" pos:column="30">HChild</name> <init pos:line="59" pos:column="37">= <expr><call><name pos:line="59" pos:column="39">GetDlgItem</name><argument_list pos:line="59" pos:column="49">(<argument><expr><name pos:line="59" pos:column="50">hWnd</name></expr></argument>, <argument><expr><call><name><name pos:line="59" pos:column="56">wrc</name><op:operator pos:line="59" pos:column="59">-&gt;</op:operator><name pos:line="59" pos:column="61">GetID</name></name><argument_list pos:line="59" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><name pos:line="60" pos:column="29">HChild</name></expr>)</condition><then pos:line="60" pos:column="36"> <block pos:line="60" pos:column="37">{
				<expr_stmt><expr><call><name pos:line="61" pos:column="33">GetWindowRect</name><argument_list pos:line="61" pos:column="46">(<argument><expr><name pos:line="61" pos:column="47">HChild</name></expr></argument>, <argument><expr><op:operator pos:line="61" pos:column="55">&amp;</op:operator><call><name><name pos:line="61" pos:column="56">wrc</name><op:operator pos:line="61" pos:column="59">-&gt;</op:operator><name pos:line="61" pos:column="61">GetRect</name></name><argument_list pos:line="61" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="62" pos:column="33">POINT</name></type> <name pos:line="62" pos:column="39">p</name> <init pos:line="62" pos:column="41">= <expr><call><name pos:line="62" pos:column="43">RectToPoint</name><argument_list pos:line="62" pos:column="54">(<argument><expr><call><name><name pos:line="62" pos:column="55">wrc</name><op:operator pos:line="62" pos:column="58">-&gt;</op:operator><name pos:line="62" pos:column="60">GetRect</name></name><argument_list pos:line="62" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="63" pos:column="33">::</op:operator><name pos:line="63" pos:column="35">ScreenToClient</name></name><argument_list pos:line="63" pos:column="49">(<argument><expr><name pos:line="63" pos:column="50">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="63" pos:column="56">&amp;</op:operator><name pos:line="63" pos:column="57">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></for>
}</block></function>

<comment type="line" format="doxygen" pos:line="69" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="70" pos:column="1">// Move all the windows. Use DeferWindowPos for speed.</comment>
<comment type="line" pos:line="71" pos:column="1">//</comment>
<function><type><name pos:line="72" pos:column="1">void</name></type>
<name><name pos:line="73" pos:column="1">CWinMgr</name><op:operator pos:line="73" pos:column="8">::</op:operator><name pos:line="73" pos:column="10">SetWindowPositions</name></name><parameter_list pos:line="73" pos:column="28">(<param><decl><type><name pos:line="73" pos:column="29">HWND</name></type> <name pos:line="73" pos:column="34">hWnd</name></decl></param>)</parameter_list>
<block pos:line="74" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">int</name></type> <name pos:line="75" pos:column="13">nWindows</name> <init pos:line="75" pos:column="22">= <expr><call><name pos:line="75" pos:column="24">CountWindows</name><argument_list pos:line="75" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">m_map</name> <op:operator pos:line="76" pos:column="19">&amp;&amp;</op:operator> <name pos:line="76" pos:column="22">hWnd</name> <op:operator pos:line="76" pos:column="27">&amp;&amp;</op:operator> <name pos:line="76" pos:column="30">nWindows</name><op:operator pos:line="76" pos:column="38">&gt;</op:operator><lit:literal type="number" pos:line="76" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="76" pos:column="41"> <block pos:line="76" pos:column="42">{
		<decl_stmt><decl><type><name pos:line="77" pos:column="17">HDWP</name></type> <name pos:line="77" pos:column="22">hdwp</name> <init pos:line="77" pos:column="27">= <expr><call><name><op:operator pos:line="77" pos:column="29">::</op:operator><name pos:line="77" pos:column="31">BeginDeferWindowPos</name></name><argument_list pos:line="77" pos:column="50">(<argument><expr><name pos:line="77" pos:column="51">nWindows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="78" pos:column="17">int</name></type> <name pos:line="78" pos:column="21">count</name><init pos:line="78" pos:column="26">=<expr><lit:literal type="number" pos:line="78" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="79" pos:column="17">for (<init><decl><type><name pos:line="79" pos:column="22">WINRECT</name><type:modifier pos:line="79" pos:column="29">*</type:modifier></type> <name pos:line="79" pos:column="31">wrc</name><init pos:line="79" pos:column="34">=<expr><name pos:line="79" pos:column="35">m_map</name></expr></init></decl>;</init> <condition><expr><op:operator pos:line="79" pos:column="42">!</op:operator><call><name><name pos:line="79" pos:column="43">wrc</name><op:operator pos:line="79" pos:column="46">-&gt;</op:operator><name pos:line="79" pos:column="48">IsEnd</name></name><argument_list pos:line="79" pos:column="53">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="79" pos:column="57">wrc</name><op:operator pos:line="79" pos:column="60">++</op:operator></expr></incr>) <block pos:line="79" pos:column="64">{
			<if pos:line="80" pos:column="25">if <condition pos:line="80" pos:column="28">(<expr><call><name><name pos:line="80" pos:column="29">wrc</name><op:operator pos:line="80" pos:column="32">-&gt;</op:operator><name pos:line="80" pos:column="34">IsWindow</name></name><argument_list pos:line="80" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="80" pos:column="45"> <block pos:line="80" pos:column="46">{
				<expr_stmt><expr><call><name pos:line="81" pos:column="33">assert</name><argument_list pos:line="81" pos:column="39">(<argument><expr><name pos:line="81" pos:column="40">count</name> <op:operator pos:line="81" pos:column="46">&lt;</op:operator> <name pos:line="81" pos:column="48">nWindows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="82" pos:column="33">HWND</name></type> <name pos:line="82" pos:column="38">hwndChild</name> <init pos:line="82" pos:column="48">= <expr><call><name><op:operator pos:line="82" pos:column="50">::</op:operator><name pos:line="82" pos:column="52">GetDlgItem</name></name><argument_list pos:line="82" pos:column="62">(<argument><expr><name pos:line="82" pos:column="63">hWnd</name></expr></argument>, <argument><expr><call><name><name pos:line="82" pos:column="69">wrc</name><op:operator pos:line="82" pos:column="72">-&gt;</op:operator><name pos:line="82" pos:column="74">GetID</name></name><argument_list pos:line="82" pos:column="79">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="83" pos:column="33">if <condition pos:line="83" pos:column="36">(<expr><name pos:line="83" pos:column="37">hwndChild</name></expr>)</condition><then pos:line="83" pos:column="47"> <block pos:line="83" pos:column="48">{
					<decl_stmt><decl><type><specifier pos:line="84" pos:column="41">const</specifier> <name pos:line="84" pos:column="47">RECT</name><type:modifier pos:line="84" pos:column="51">&amp;</type:modifier></type> <name pos:line="84" pos:column="53">rc</name> <init pos:line="84" pos:column="56">= <expr><call><name><name pos:line="84" pos:column="58">wrc</name><op:operator pos:line="84" pos:column="61">-&gt;</op:operator><name pos:line="84" pos:column="63">GetRect</name></name><argument_list pos:line="84" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="85" pos:column="41">::</op:operator><name pos:line="85" pos:column="43">DeferWindowPos</name></name><argument_list pos:line="85" pos:column="57">(<argument><expr><name pos:line="85" pos:column="58">hdwp</name></expr></argument>,
						<argument><expr><name pos:line="86" pos:column="49">hwndChild</name></expr></argument>,
						<argument><expr><name pos:line="87" pos:column="49">NULL</name></expr></argument>,		<comment type="line" pos:line="87" pos:column="65">// HWND insert after</comment>
						<argument><expr><name><name pos:line="88" pos:column="49">rc</name><op:operator pos:line="88" pos:column="51">.</op:operator><name pos:line="88" pos:column="52">left</name></name></expr></argument>,<argument><expr><name><name pos:line="88" pos:column="57">rc</name><op:operator pos:line="88" pos:column="59">.</op:operator><name pos:line="88" pos:column="60">top</name></name></expr></argument>,<argument><expr><call><name pos:line="88" pos:column="64">RectWidth</name><argument_list pos:line="88" pos:column="73">(<argument><expr><name pos:line="88" pos:column="74">rc</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name pos:line="88" pos:column="78">RectHeight</name><argument_list pos:line="88" pos:column="88">(<argument><expr><name pos:line="88" pos:column="89">rc</name></expr></argument>)</argument_list></call></expr></argument>,
						<argument><expr><name pos:line="89" pos:column="49">SWP_NOZORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="90" pos:column="41">InvalidateRect</name><argument_list pos:line="90" pos:column="55">(<argument><expr><name pos:line="90" pos:column="56">hwndChild</name></expr></argument>,<argument><expr><name pos:line="90" pos:column="66">NULL</name></expr></argument>,<argument><expr><name pos:line="90" pos:column="71">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="90" pos:column="78">// repaint</comment>
					<expr_stmt><expr><name pos:line="91" pos:column="41">count</name><op:operator pos:line="91" pos:column="46">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="93" pos:column="27">else <block pos:line="93" pos:column="32">{
				<comment type="line" pos:line="94" pos:column="33">// not a window: still need to repaint background</comment>
				<expr_stmt><expr><call><name pos:line="95" pos:column="33">InvalidateRect</name><argument_list pos:line="95" pos:column="47">(<argument><expr><name pos:line="95" pos:column="48">hWnd</name></expr></argument>, <argument><expr><op:operator pos:line="95" pos:column="54">&amp;</op:operator><call><name><name pos:line="95" pos:column="55">wrc</name><op:operator pos:line="95" pos:column="58">-&gt;</op:operator><name pos:line="95" pos:column="60">GetRect</name></name><argument_list pos:line="95" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="95" pos:column="71">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
		<expr_stmt><expr><call><name><op:operator pos:line="98" pos:column="17">::</op:operator><name pos:line="98" pos:column="19">EndDeferWindowPos</name></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name pos:line="98" pos:column="37">hdwp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<comment type="line" format="doxygen" pos:line="102" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="103" pos:column="1">// Count number of table entries that correspond to windows--ie,</comment>
<comment type="line" pos:line="104" pos:column="1">// that have a child window ID associated with the entry.</comment>
<comment type="line" pos:line="105" pos:column="1">//</comment>
<function><type><name pos:line="106" pos:column="1">int</name></type> <name><name pos:line="106" pos:column="5">CWinMgr</name><op:operator pos:line="106" pos:column="12">::</op:operator><name pos:line="106" pos:column="14">CountWindows</name></name><parameter_list pos:line="106" pos:column="26">()</parameter_list>
<block pos:line="107" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="108" pos:column="9">assert</name><argument_list pos:line="108" pos:column="15">(<argument><expr><name pos:line="108" pos:column="16">m_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="109" pos:column="9">int</name></type> <name pos:line="109" pos:column="13">nWin</name> <init pos:line="109" pos:column="18">= <expr><lit:literal type="number" pos:line="109" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="110" pos:column="9">for (<init><decl><type><name pos:line="110" pos:column="14">WINRECT</name><type:modifier pos:line="110" pos:column="21">*</type:modifier></type> <name pos:line="110" pos:column="23">w</name><init pos:line="110" pos:column="24">=<expr><name pos:line="110" pos:column="25">m_map</name></expr></init></decl>;</init> <condition><expr><op:operator pos:line="110" pos:column="32">!</op:operator><call><name><name pos:line="110" pos:column="33">w</name><op:operator pos:line="110" pos:column="34">-&gt;</op:operator><name pos:line="110" pos:column="36">IsEnd</name></name><argument_list pos:line="110" pos:column="41">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="110" pos:column="45">w</name><op:operator pos:line="110" pos:column="46">++</op:operator></expr></incr>) <block pos:line="110" pos:column="50">{
		<if pos:line="111" pos:column="17">if <condition pos:line="111" pos:column="20">(<expr><call><name><name pos:line="111" pos:column="21">w</name><op:operator pos:line="111" pos:column="22">-&gt;</op:operator><name pos:line="111" pos:column="24">IsWindow</name></name><argument_list pos:line="111" pos:column="32">()</argument_list></call></expr>)</condition><then pos:line="111" pos:column="35">
			<expr_stmt><expr><name pos:line="112" pos:column="25">nWin</name><op:operator pos:line="112" pos:column="29">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<return pos:line="114" pos:column="9">return <expr><name pos:line="114" pos:column="16">nWin</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="117" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="118" pos:column="1">// Find the entry for a given control ID</comment>
<comment type="line" pos:line="119" pos:column="1">//</comment>
<function><type><name pos:line="120" pos:column="1">WINRECT</name><type:modifier pos:line="120" pos:column="8">*</type:modifier></type> <name><name pos:line="120" pos:column="10">CWinMgr</name><op:operator pos:line="120" pos:column="17">::</op:operator><name pos:line="120" pos:column="19">FindRect</name></name><parameter_list pos:line="120" pos:column="27">(<param><decl><type><name pos:line="120" pos:column="28">int</name></type> <name pos:line="120" pos:column="32">nID</name></decl></param>)</parameter_list>
<block pos:line="121" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="122" pos:column="9">assert</name><argument_list pos:line="122" pos:column="15">(<argument><expr><name pos:line="122" pos:column="16">m_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="123" pos:column="9">for (<init><decl><type><name pos:line="123" pos:column="14">WINRECT</name><type:modifier pos:line="123" pos:column="21">*</type:modifier></type> <name pos:line="123" pos:column="23">w</name><init pos:line="123" pos:column="24">=<expr><name pos:line="123" pos:column="25">m_map</name></expr></init></decl>;</init> <condition><expr><op:operator pos:line="123" pos:column="32">!</op:operator><call><name><name pos:line="123" pos:column="33">w</name><op:operator pos:line="123" pos:column="34">-&gt;</op:operator><name pos:line="123" pos:column="36">IsEnd</name></name><argument_list pos:line="123" pos:column="41">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="123" pos:column="45">w</name><op:operator pos:line="123" pos:column="46">++</op:operator></expr></incr>) <block pos:line="123" pos:column="50">{
		<if pos:line="124" pos:column="17">if <condition pos:line="124" pos:column="20">(<expr><call><name><name pos:line="124" pos:column="21">w</name><op:operator pos:line="124" pos:column="22">-&gt;</op:operator><name pos:line="124" pos:column="24">GetID</name></name><argument_list pos:line="124" pos:column="29">()</argument_list></call><op:operator pos:line="124" pos:column="31">==</op:operator><op:operator pos:line="124" pos:column="33">(</op:operator><name pos:line="124" pos:column="34">UINT</name><op:operator pos:line="124" pos:column="38">)</op:operator><name pos:line="124" pos:column="39">nID</name></expr>)</condition><then pos:line="124" pos:column="43">
			<return pos:line="125" pos:column="25">return <expr><name pos:line="125" pos:column="32">w</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="127" pos:column="9">return <expr><name pos:line="127" pos:column="16">NULL</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="130" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="131" pos:column="1">// Calculate size/positions for a row or column group This is the main</comment>
<comment type="line" pos:line="132" pos:column="1">// algorithm. If a window is given, it's used to get the min/max size and</comment>
<comment type="line" pos:line="133" pos:column="1">// desired size for TOFIT types.</comment>
<comment type="line" pos:line="134" pos:column="1">//</comment>
<function><type><name pos:line="135" pos:column="1">void</name></type>
<name><name pos:line="136" pos:column="1">CWinMgr</name><op:operator pos:line="136" pos:column="8">::</op:operator><name pos:line="136" pos:column="10">CalcGroup</name></name><parameter_list pos:line="136" pos:column="19">(<param><decl><type><name pos:line="136" pos:column="20">WINRECT</name><type:modifier pos:line="136" pos:column="27">*</type:modifier></type> <name pos:line="136" pos:column="29">pGroup</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="37">HWND</name></type> <name pos:line="136" pos:column="42">hWnd</name></decl></param>)</parameter_list>
<block pos:line="137" pos:column="1">{
	<comment type="line" pos:line="138" pos:column="9">// If this bombs, most likely the first entry in your map is not a group!</comment>
	<expr_stmt><expr><call><name pos:line="139" pos:column="9">assert</name><argument_list pos:line="139" pos:column="15">(<argument><expr><name pos:line="139" pos:column="16">pGroup</name> <op:operator pos:line="139" pos:column="23">&amp;&amp;</op:operator> <call><name><name pos:line="139" pos:column="26">pGroup</name><op:operator pos:line="139" pos:column="32">-&gt;</op:operator><name pos:line="139" pos:column="34">IsGroup</name></name><argument_list pos:line="139" pos:column="41">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="140" pos:column="9">assert</name><argument_list pos:line="140" pos:column="15">(<argument><expr><name pos:line="140" pos:column="16">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="142" pos:column="9">// adjust total avail by margins</comment>
	<decl_stmt><decl><type><name pos:line="143" pos:column="9">RECT</name></type> <name pos:line="143" pos:column="14">rcTotal</name> <init pos:line="143" pos:column="22">= <expr><call><name><name pos:line="143" pos:column="24">pGroup</name><op:operator pos:line="143" pos:column="30">-&gt;</op:operator><name pos:line="143" pos:column="32">GetRect</name></name><argument_list pos:line="143" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="144" pos:column="9">int</name></type> <name pos:line="144" pos:column="13">w</name></decl><op:operator pos:line="144" pos:column="14">,</op:operator><decl><type ref="prev"/><name pos:line="144" pos:column="15">h</name></decl>;</decl_stmt>
	<if pos:line="145" pos:column="9">if <condition pos:line="145" pos:column="12">(<expr><call><name><name pos:line="145" pos:column="13">pGroup</name><op:operator pos:line="145" pos:column="19">-&gt;</op:operator><name pos:line="145" pos:column="21">GetMargins</name></name><argument_list pos:line="145" pos:column="31">(<argument><expr><name pos:line="145" pos:column="32">w</name></expr></argument>,<argument><expr><name pos:line="145" pos:column="34">h</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="145" pos:column="37"> <block pos:line="145" pos:column="38">{
		<expr_stmt><expr><name pos:line="146" pos:column="17">w</name> <op:operator pos:line="146" pos:column="19">=</op:operator> <call><name pos:line="146" pos:column="21">min</name><argument_list pos:line="146" pos:column="24">(<argument><expr><call><name pos:line="146" pos:column="25">abs</name><argument_list pos:line="146" pos:column="28">(<argument><expr><name pos:line="146" pos:column="29">w</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="146" pos:column="33">RectWidth</name><argument_list pos:line="146" pos:column="42">(<argument><expr><name pos:line="146" pos:column="43">rcTotal</name></expr></argument>)</argument_list></call><op:operator pos:line="146" pos:column="51">/</op:operator><lit:literal type="number" pos:line="146" pos:column="52">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="147" pos:column="17">h</name> <op:operator pos:line="147" pos:column="19">=</op:operator> <call><name pos:line="147" pos:column="21">min</name><argument_list pos:line="147" pos:column="24">(<argument><expr><call><name pos:line="147" pos:column="25">abs</name><argument_list pos:line="147" pos:column="28">(<argument><expr><name pos:line="147" pos:column="29">h</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="147" pos:column="33">RectHeight</name><argument_list pos:line="147" pos:column="43">(<argument><expr><name pos:line="147" pos:column="44">rcTotal</name></expr></argument>)</argument_list></call><op:operator pos:line="147" pos:column="52">/</op:operator><lit:literal type="number" pos:line="147" pos:column="53">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="148" pos:column="17">::</op:operator><name pos:line="148" pos:column="19">InflateRect</name></name><argument_list pos:line="148" pos:column="30">(<argument><expr><op:operator pos:line="148" pos:column="31">&amp;</op:operator><name pos:line="148" pos:column="32">rcTotal</name></expr></argument>, <argument><expr><op:operator pos:line="148" pos:column="41">-</op:operator><name pos:line="148" pos:column="42">w</name></expr></argument>, <argument><expr><op:operator pos:line="148" pos:column="45">-</op:operator><name pos:line="148" pos:column="46">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	
	<decl_stmt><decl><type><name pos:line="151" pos:column="9">BOOL</name></type> <name pos:line="151" pos:column="14">bRow</name> <init pos:line="151" pos:column="19">= <expr><call><name><name pos:line="151" pos:column="21">pGroup</name><op:operator pos:line="151" pos:column="27">-&gt;</op:operator><name pos:line="151" pos:column="29">IsRowGroup</name></name><argument_list pos:line="151" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>		 <comment type="line" pos:line="151" pos:column="58">// Is this a row group?</comment>

	<comment type="line" pos:line="153" pos:column="9">// Running height or width: start with total</comment>
	<decl_stmt><decl><type><name pos:line="154" pos:column="9">int</name></type> <name pos:line="154" pos:column="13">hwRemaining</name> <init pos:line="154" pos:column="25">= <expr><name pos:line="154" pos:column="27">bRow</name> <op:operator pos:line="154" pos:column="32">?</op:operator> <call><name pos:line="154" pos:column="34">RectHeight</name><argument_list pos:line="154" pos:column="44">(<argument><expr><name pos:line="154" pos:column="45">rcTotal</name></expr></argument>)</argument_list></call> <op:operator pos:line="154" pos:column="54">:</op:operator> <call><name pos:line="154" pos:column="56">RectWidth</name><argument_list pos:line="154" pos:column="65">(<argument><expr><name pos:line="154" pos:column="66">rcTotal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="156" pos:column="9">// First, set all rects to their minimum sizes.</comment>
	<comment type="line" pos:line="157" pos:column="9">// This ensures that each rect gets its min size.</comment>
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">CWinGroupIterator</name></type> <name pos:line="158" pos:column="27">it</name></decl>;</decl_stmt>
	<for pos:line="159" pos:column="9">for (<init><expr><name pos:line="159" pos:column="14">it</name><op:operator pos:line="159" pos:column="16">=</op:operator><name pos:line="159" pos:column="17">pGroup</name></expr>;</init> <condition><expr><name pos:line="159" pos:column="25">it</name></expr>;</condition> <incr><expr><call><name><name pos:line="159" pos:column="29">it</name><op:operator pos:line="159" pos:column="31">.</op:operator><name pos:line="159" pos:column="32">Next</name></name><argument_list pos:line="159" pos:column="36">()</argument_list></call></expr></incr>) <block pos:line="159" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="160" pos:column="17">WINRECT</name><type:modifier pos:line="160" pos:column="24">*</type:modifier></type> <name pos:line="160" pos:column="26">wrc</name> <init pos:line="160" pos:column="30">= <expr><name pos:line="160" pos:column="32">it</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="161" pos:column="17">SIZEINFO</name></type> <name pos:line="161" pos:column="26">szi</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="162" pos:column="17">OnGetSizeInfo</name><argument_list pos:line="162" pos:column="30">(<argument><expr><name pos:line="162" pos:column="31">szi</name></expr></argument>, <argument><expr><name pos:line="162" pos:column="36">wrc</name></expr></argument>, <argument><expr><name pos:line="162" pos:column="41">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="163" pos:column="17">int</name></type> <name pos:line="163" pos:column="21">hwMin</name> <init pos:line="163" pos:column="27">= <expr><name pos:line="163" pos:column="29">bRow</name> <op:operator pos:line="163" pos:column="34">?</op:operator> <name><name pos:line="163" pos:column="36">szi</name><op:operator pos:line="163" pos:column="39">.</op:operator><name pos:line="163" pos:column="40">szMin</name><op:operator pos:line="163" pos:column="45">.</op:operator><name pos:line="163" pos:column="46">cy</name></name> <op:operator pos:line="163" pos:column="49">:</op:operator> <name><name pos:line="163" pos:column="51">szi</name><op:operator pos:line="163" pos:column="54">.</op:operator><name pos:line="163" pos:column="55">szMin</name><op:operator pos:line="163" pos:column="60">.</op:operator><name pos:line="163" pos:column="61">cx</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="164" pos:column="17">hwMin</name> <op:operator pos:line="164" pos:column="23">=</op:operator> <call><name pos:line="164" pos:column="25">min</name><argument_list pos:line="164" pos:column="28">(<argument><expr><name pos:line="164" pos:column="29">hwMin</name></expr></argument>, <argument><expr><name pos:line="164" pos:column="36">hwRemaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="line" pos:line="164" pos:column="65">// truncate</comment>
		<expr_stmt><expr><call><name><name pos:line="165" pos:column="17">wrc</name><op:operator pos:line="165" pos:column="20">-&gt;</op:operator><name pos:line="165" pos:column="22">SetHeightOrWidth</name></name><argument_list pos:line="165" pos:column="38">(<argument><expr><name pos:line="165" pos:column="39">hwMin</name></expr></argument>, <argument><expr><name pos:line="165" pos:column="46">bRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="165" pos:column="57">// set</comment>
		<expr_stmt><expr><name pos:line="166" pos:column="17">hwRemaining</name> <op:operator pos:line="166" pos:column="29">-=</op:operator> <name pos:line="166" pos:column="32">hwMin</name></expr>;</expr_stmt>					<comment type="line" pos:line="166" pos:column="73">// decrement remaining height/width</comment>
		<expr_stmt><expr><call><name pos:line="167" pos:column="17">assert</name><argument_list pos:line="167" pos:column="23">(<argument><expr><name pos:line="167" pos:column="24">hwRemaining</name><op:operator pos:line="167" pos:column="35">&gt;=</op:operator><lit:literal type="number" pos:line="167" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<comment type="line" pos:line="170" pos:column="9">// Now adjust all rects upward to desired size. Save REST rect for last.</comment>
	<decl_stmt><decl><type><name pos:line="171" pos:column="9">WINRECT</name><type:modifier pos:line="171" pos:column="16">*</type:modifier></type> <name pos:line="171" pos:column="18">pRestRect</name> <init pos:line="171" pos:column="28">= <expr><name pos:line="171" pos:column="30">NULL</name></expr></init></decl>;</decl_stmt>
	<for pos:line="172" pos:column="9">for (<init><expr><name pos:line="172" pos:column="14">it</name><op:operator pos:line="172" pos:column="16">=</op:operator><name pos:line="172" pos:column="17">pGroup</name></expr>;</init> <condition><expr><name pos:line="172" pos:column="25">it</name></expr>;</condition> <incr><expr><call><name><name pos:line="172" pos:column="29">it</name><op:operator pos:line="172" pos:column="31">.</op:operator><name pos:line="172" pos:column="32">Next</name></name><argument_list pos:line="172" pos:column="36">()</argument_list></call></expr></incr>) <block pos:line="172" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="173" pos:column="17">WINRECT</name><type:modifier pos:line="173" pos:column="24">*</type:modifier></type> <name pos:line="173" pos:column="26">wrc</name> <init pos:line="173" pos:column="30">= <expr><name pos:line="173" pos:column="32">it</name></expr></init></decl>;</decl_stmt>
		<if pos:line="174" pos:column="17">if <condition pos:line="174" pos:column="20">(<expr><call><name><name pos:line="174" pos:column="21">wrc</name><op:operator pos:line="174" pos:column="24">-&gt;</op:operator><name pos:line="174" pos:column="26">Type</name></name><argument_list pos:line="174" pos:column="30">()</argument_list></call><op:operator pos:line="174" pos:column="32">==</op:operator><name pos:line="174" pos:column="34">WRCT_REST</name></expr>)</condition><then pos:line="174" pos:column="44"> <block pos:line="174" pos:column="45">{
			<expr_stmt><expr><call><name pos:line="175" pos:column="25">assert</name><argument_list pos:line="175" pos:column="31">(<argument><expr><name pos:line="175" pos:column="32">pRestRect</name><op:operator pos:line="175" pos:column="41">==</op:operator><name pos:line="175" pos:column="43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		 <comment type="line" pos:line="175" pos:column="66">// can only be one REST rect!</comment>
			<expr_stmt><expr><name pos:line="176" pos:column="25">pRestRect</name> <op:operator pos:line="176" pos:column="35">=</op:operator> <name pos:line="176" pos:column="37">wrc</name></expr>;</expr_stmt>					 <comment type="line" pos:line="176" pos:column="82">// remember it</comment>
		}</block></then> <else pos:line="177" pos:column="19">else <block pos:line="177" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="178" pos:column="25">AdjustSize</name><argument_list pos:line="178" pos:column="35">(<argument><expr><name pos:line="178" pos:column="36">wrc</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="41">bRow</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="47">hwRemaining</name></expr></argument>, <argument><expr><name pos:line="178" pos:column="60">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name pos:line="181" pos:column="9">assert</name><argument_list pos:line="181" pos:column="15">(<argument><expr><name pos:line="181" pos:column="16">hwRemaining</name><op:operator pos:line="181" pos:column="27">&gt;=</op:operator><lit:literal type="number" pos:line="181" pos:column="29">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="183" pos:column="9">// Adjust REST rect if any</comment>
	<if pos:line="184" pos:column="9">if <condition pos:line="184" pos:column="12">(<expr><name pos:line="184" pos:column="13">pRestRect</name></expr>)</condition><then pos:line="184" pos:column="23"> <block pos:line="184" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="185" pos:column="17">AdjustSize</name><argument_list pos:line="185" pos:column="27">(<argument><expr><name pos:line="185" pos:column="28">pRestRect</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="39">bRow</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="45">hwRemaining</name></expr></argument>, <argument><expr><name pos:line="185" pos:column="58">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="186" pos:column="17">assert</name><argument_list pos:line="186" pos:column="23">(<argument><expr><name pos:line="186" pos:column="24">hwRemaining</name><op:operator pos:line="186" pos:column="35">==</op:operator><lit:literal type="number" pos:line="186" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="189" pos:column="9">// All the sizes of the entries have been calculated, including</comment>
	<comment type="line" pos:line="190" pos:column="9">// groups (but not their children). Now move all the rects so they're</comment>
	<comment type="line" pos:line="191" pos:column="9">// adjacent to one another, without altering sizes.</comment>
	<expr_stmt><expr><call><name pos:line="192" pos:column="9">PositionRects</name><argument_list pos:line="192" pos:column="22">(<argument><expr><name pos:line="192" pos:column="23">pGroup</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="31">rcTotal</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="40">bRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="194" pos:column="9">// Finally, descend recursively into each subgroup.</comment>
	<for pos:line="195" pos:column="9">for (<init><expr><name pos:line="195" pos:column="14">it</name><op:operator pos:line="195" pos:column="16">=</op:operator><name pos:line="195" pos:column="17">pGroup</name></expr>;</init> <condition><expr><name pos:line="195" pos:column="25">it</name></expr>;</condition> <incr><expr><call><name><name pos:line="195" pos:column="29">it</name><op:operator pos:line="195" pos:column="31">.</op:operator><name pos:line="195" pos:column="32">Next</name></name><argument_list pos:line="195" pos:column="36">()</argument_list></call></expr></incr>) <block pos:line="195" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="196" pos:column="17">WINRECT</name><type:modifier pos:line="196" pos:column="24">*</type:modifier></type> <name pos:line="196" pos:column="26">wrc</name> <init pos:line="196" pos:column="30">= <expr><name pos:line="196" pos:column="32">it</name></expr></init></decl>;</decl_stmt>
		<if pos:line="197" pos:column="17">if <condition pos:line="197" pos:column="20">(<expr><call><name><name pos:line="197" pos:column="21">wrc</name><op:operator pos:line="197" pos:column="24">-&gt;</op:operator><name pos:line="197" pos:column="26">IsGroup</name></name><argument_list pos:line="197" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="197" pos:column="36">
			<expr_stmt><expr><call><name pos:line="198" pos:column="25">CalcGroup</name><argument_list pos:line="198" pos:column="34">(<argument><expr><name pos:line="198" pos:column="35">wrc</name></expr></argument>, <argument><expr><name pos:line="198" pos:column="40">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> <comment type="line" pos:line="198" pos:column="47">// recurse!</comment>
	}</block></for>
}</block></function>

<comment type="line" format="doxygen" pos:line="202" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="203" pos:column="1">// Adjust the size of a single entry upwards to its desired size.</comment>
<comment type="line" pos:line="204" pos:column="1">// Decrement hwRemaining by amount increased.</comment>
<comment type="line" pos:line="205" pos:column="1">//</comment>
<function><type><name pos:line="206" pos:column="1">void</name></type>
<name><name pos:line="207" pos:column="1">CWinMgr</name><op:operator pos:line="207" pos:column="8">::</op:operator><name pos:line="207" pos:column="10">AdjustSize</name></name><parameter_list pos:line="207" pos:column="20">(<param><decl><type><name pos:line="207" pos:column="21">WINRECT</name><type:modifier pos:line="207" pos:column="28">*</type:modifier></type> <name pos:line="207" pos:column="30">wrc</name></decl></param>, <param><decl><type><name pos:line="207" pos:column="35">BOOL</name></type> <name pos:line="207" pos:column="40">bRow</name></decl></param>,
	<param><decl><type><name pos:line="208" pos:column="9">int</name><type:modifier pos:line="208" pos:column="12">&amp;</type:modifier></type> <name pos:line="208" pos:column="14">hwRemaining</name></decl></param>, <param><decl><type><name pos:line="208" pos:column="27">HWND</name></type> <name pos:line="208" pos:column="32">hWnd</name></decl></param>)</parameter_list>
<block pos:line="209" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="210" pos:column="9">SIZEINFO</name></type> <name pos:line="210" pos:column="18">szi</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="211" pos:column="9">OnGetSizeInfo</name><argument_list pos:line="211" pos:column="22">(<argument><expr><name pos:line="211" pos:column="23">szi</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="28">wrc</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="33">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="212" pos:column="9">int</name></type> <name pos:line="212" pos:column="13">hw</name> <init pos:line="212" pos:column="16">= <expr><name pos:line="212" pos:column="18">bRow</name> <op:operator pos:line="212" pos:column="23">?</op:operator> <name><name pos:line="212" pos:column="25">szi</name><op:operator pos:line="212" pos:column="28">.</op:operator><name pos:line="212" pos:column="29">szDesired</name><op:operator pos:line="212" pos:column="38">.</op:operator><name pos:line="212" pos:column="39">cy</name></name> <op:operator pos:line="212" pos:column="42">:</op:operator> <name><name pos:line="212" pos:column="44">szi</name><op:operator pos:line="212" pos:column="47">.</op:operator><name pos:line="212" pos:column="48">szDesired</name><op:operator pos:line="212" pos:column="57">.</op:operator><name pos:line="212" pos:column="58">cx</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="212" pos:column="62">// desired ht or wid</comment>
	<if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><call><name><name pos:line="213" pos:column="13">wrc</name><op:operator pos:line="213" pos:column="16">-&gt;</op:operator><name pos:line="213" pos:column="18">Type</name></name><argument_list pos:line="213" pos:column="22">()</argument_list></call> <op:operator pos:line="213" pos:column="25">==</op:operator> <name pos:line="213" pos:column="28">WRCT_REST</name></expr>)</condition><then pos:line="213" pos:column="38"> <block pos:line="213" pos:column="39">{
		<comment type="line" pos:line="214" pos:column="17">// for REST type, use all remaining space</comment>
		<decl_stmt><decl><type><name pos:line="215" pos:column="17">RECT</name><type:modifier pos:line="215" pos:column="21">&amp;</type:modifier></type> <name pos:line="215" pos:column="23">rc</name> <init pos:line="215" pos:column="26">= <expr><call><name><name pos:line="215" pos:column="28">wrc</name><op:operator pos:line="215" pos:column="31">-&gt;</op:operator><name pos:line="215" pos:column="33">GetRect</name></name><argument_list pos:line="215" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="216" pos:column="17">hw</name> <op:operator pos:line="216" pos:column="20">=</op:operator> <name pos:line="216" pos:column="22">hwRemaining</name> <op:operator pos:line="216" pos:column="34">+</op:operator> <op:operator pos:line="216" pos:column="36">(</op:operator><name pos:line="216" pos:column="37">bRow</name> <op:operator pos:line="216" pos:column="42">?</op:operator> <call><name pos:line="216" pos:column="44">RectHeight</name><argument_list pos:line="216" pos:column="54">(<argument><expr><name pos:line="216" pos:column="55">rc</name></expr></argument>)</argument_list></call> <op:operator pos:line="216" pos:column="59">:</op:operator> <call><name pos:line="216" pos:column="61">RectWidth</name><argument_list pos:line="216" pos:column="70">(<argument><expr><name pos:line="216" pos:column="71">rc</name></expr></argument>)</argument_list></call><op:operator pos:line="216" pos:column="74">)</op:operator></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="219" pos:column="9">// Now hw is the desired height or width, and the current size of the</comment>
	<comment type="line" pos:line="220" pos:column="9">// entry is the min size. So adjust the size upwards, and decrement</comment>
	<comment type="line" pos:line="221" pos:column="9">// hwRemaining appropriately. This is a little confusing, but necessary so</comment>
	<comment type="line" pos:line="222" pos:column="9">// each entry gets its min size.</comment>
	<comment type="line" pos:line="223" pos:column="9">//</comment>
	<decl_stmt><decl><type><name pos:line="224" pos:column="9">int</name></type> <name pos:line="224" pos:column="13">hwCurrent</name> <init pos:line="224" pos:column="23">= <expr><call><name><name pos:line="224" pos:column="25">wrc</name><op:operator pos:line="224" pos:column="28">-&gt;</op:operator><name pos:line="224" pos:column="30">GetHeightOrWidth</name></name><argument_list pos:line="224" pos:column="46">(<argument><expr><name pos:line="224" pos:column="47">bRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="224" pos:column="54">// current size</comment>
	<decl_stmt><decl><type><name pos:line="225" pos:column="9">int</name></type> <name pos:line="225" pos:column="13">hwExtra</name> <init pos:line="225" pos:column="21">= <expr><name pos:line="225" pos:column="23">hw</name> <op:operator pos:line="225" pos:column="26">-</op:operator> <name pos:line="225" pos:column="28">hwCurrent</name></expr></init></decl>;</decl_stmt>						<comment type="line" pos:line="225" pos:column="81">// amount extra</comment>
	<expr_stmt><expr><name pos:line="226" pos:column="9">hwExtra</name> <op:operator pos:line="226" pos:column="17">=</op:operator> <call><name pos:line="226" pos:column="19">min</name><argument_list pos:line="226" pos:column="22">(<argument><expr><call><name pos:line="226" pos:column="23">max</name><argument_list pos:line="226" pos:column="26">(<argument><expr><name pos:line="226" pos:column="27">hwExtra</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="226" pos:column="36">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="226" pos:column="40">hwRemaining</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="226" pos:column="57">// truncate </comment>
	<expr_stmt><expr><name pos:line="227" pos:column="9">hw</name> <op:operator pos:line="227" pos:column="12">=</op:operator> <name pos:line="227" pos:column="14">hwCurrent</name> <op:operator pos:line="227" pos:column="24">+</op:operator> <name pos:line="227" pos:column="26">hwExtra</name></expr>;</expr_stmt>							<comment type="line" pos:line="227" pos:column="89">// new height-or-width</comment>
	<expr_stmt><expr><call><name><name pos:line="228" pos:column="9">wrc</name><op:operator pos:line="228" pos:column="12">-&gt;</op:operator><name pos:line="228" pos:column="14">SetHeightOrWidth</name></name><argument_list pos:line="228" pos:column="30">(<argument><expr><name pos:line="228" pos:column="31">hw</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="35">bRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="line" pos:line="228" pos:column="73">// set...</comment>
	<expr_stmt><expr><name pos:line="229" pos:column="9">hwRemaining</name> <op:operator pos:line="229" pos:column="21">-=</op:operator> <name pos:line="229" pos:column="24">hwExtra</name></expr>;</expr_stmt>								<comment type="line" pos:line="229" pos:column="89">// and adjust remaining</comment>
}</block></function>

<comment type="line" format="doxygen" pos:line="232" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="233" pos:column="1">// Position all the rects so they're as wide/high as the total and follow one</comment>
<comment type="line" pos:line="234" pos:column="1">// another; ie, are adjacent. This operation leaves the height (rows) and</comment>
<comment type="line" pos:line="235" pos:column="1">// width (columns) unaffected. For rows, set each row's width to rcTotal and</comment>
<comment type="line" pos:line="236" pos:column="1">// one below the other; for columns, set each column as tall as rcTotal and</comment>
<comment type="line" pos:line="237" pos:column="1">// each to the right of the previous.</comment>
<comment type="line" pos:line="238" pos:column="1">//</comment>
<function><type><name pos:line="239" pos:column="1">void</name></type>
<name><name pos:line="240" pos:column="1">CWinMgr</name><op:operator pos:line="240" pos:column="8">::</op:operator><name pos:line="240" pos:column="10">PositionRects</name></name><parameter_list pos:line="240" pos:column="23">(<param><decl><type><name pos:line="240" pos:column="24">WINRECT</name><type:modifier pos:line="240" pos:column="31">*</type:modifier></type> <name pos:line="240" pos:column="33">pGroup</name></decl></param>, <param><decl><type><specifier pos:line="240" pos:column="41">const</specifier> <name pos:line="240" pos:column="47">RECT</name><type:modifier pos:line="240" pos:column="51">&amp;</type:modifier></type> <name pos:line="240" pos:column="53">rcTotal</name></decl></param>, <param><decl><type><name pos:line="240" pos:column="62">BOOL</name></type> <name pos:line="240" pos:column="67">bRow</name></decl></param>)</parameter_list>
<block pos:line="241" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="242" pos:column="9">LONG</name></type> <name pos:line="242" pos:column="14">xoryPos</name> <init pos:line="242" pos:column="22">= <expr><name pos:line="242" pos:column="24">bRow</name> <op:operator pos:line="242" pos:column="29">?</op:operator> <name><name pos:line="242" pos:column="31">rcTotal</name><op:operator pos:line="242" pos:column="38">.</op:operator><name pos:line="242" pos:column="39">top</name></name> <op:operator pos:line="242" pos:column="43">:</op:operator> <name><name pos:line="242" pos:column="45">rcTotal</name><op:operator pos:line="242" pos:column="52">.</op:operator><name pos:line="242" pos:column="53">left</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="244" pos:column="9">CWinGroupIterator</name></type> <name pos:line="244" pos:column="27">it</name></decl>;</decl_stmt>
	<for pos:line="245" pos:column="9">for (<init><expr><name pos:line="245" pos:column="14">it</name><op:operator pos:line="245" pos:column="16">=</op:operator><name pos:line="245" pos:column="17">pGroup</name></expr>;</init> <condition><expr><name pos:line="245" pos:column="25">it</name></expr>;</condition> <incr><expr><call><name><name pos:line="245" pos:column="29">it</name><op:operator pos:line="245" pos:column="31">.</op:operator><name pos:line="245" pos:column="32">Next</name></name><argument_list pos:line="245" pos:column="36">()</argument_list></call></expr></incr>) <block pos:line="245" pos:column="40">{
		<decl_stmt><decl><type><name pos:line="246" pos:column="17">WINRECT</name><type:modifier pos:line="246" pos:column="24">*</type:modifier></type> <name pos:line="246" pos:column="26">wrc</name> <init pos:line="246" pos:column="30">= <expr><name pos:line="246" pos:column="32">it</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="247" pos:column="17">RECT</name><type:modifier pos:line="247" pos:column="21">&amp;</type:modifier></type> <name pos:line="247" pos:column="23">rc</name> <init pos:line="247" pos:column="26">= <expr><call><name><name pos:line="247" pos:column="28">wrc</name><op:operator pos:line="247" pos:column="31">-&gt;</op:operator><name pos:line="247" pos:column="33">GetRect</name></name><argument_list pos:line="247" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="248" pos:column="17">if <condition pos:line="248" pos:column="20">(<expr><name pos:line="248" pos:column="21">bRow</name></expr>)</condition><then pos:line="248" pos:column="26"> <block pos:line="248" pos:column="27">{							 <comment type="line" pos:line="248" pos:column="82">// for ROWS:</comment>
			<decl_stmt><decl><type><name pos:line="249" pos:column="25">LONG</name></type> <name pos:line="249" pos:column="30">height</name> <init pos:line="249" pos:column="37">= <expr><call><name pos:line="249" pos:column="39">RectHeight</name><argument_list pos:line="249" pos:column="49">(<argument><expr><name pos:line="249" pos:column="50">rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>		 <comment type="line" pos:line="249" pos:column="66">// height of row = total height</comment>
			<expr_stmt><expr><name><name pos:line="250" pos:column="25">rc</name><op:operator pos:line="250" pos:column="27">.</op:operator><name pos:line="250" pos:column="28">top</name></name>    <op:operator pos:line="250" pos:column="35">=</op:operator> <name pos:line="250" pos:column="37">xoryPos</name></expr>;</expr_stmt>				 <comment type="line" pos:line="250" pos:column="74">// top = running yPos</comment>
			<expr_stmt><expr><name><name pos:line="251" pos:column="25">rc</name><op:operator pos:line="251" pos:column="27">.</op:operator><name pos:line="251" pos:column="28">bottom</name></name> <op:operator pos:line="251" pos:column="35">=</op:operator> <name><name pos:line="251" pos:column="37">rc</name><op:operator pos:line="251" pos:column="39">.</op:operator><name pos:line="251" pos:column="40">top</name></name> <op:operator pos:line="251" pos:column="44">+</op:operator> <name pos:line="251" pos:column="46">height</name></expr>;</expr_stmt>	 <comment type="line" pos:line="251" pos:column="58">// ...</comment>
			<expr_stmt><expr><name><name pos:line="252" pos:column="25">rc</name><op:operator pos:line="252" pos:column="27">.</op:operator><name pos:line="252" pos:column="28">left</name></name>   <op:operator pos:line="252" pos:column="35">=</op:operator> <name><name pos:line="252" pos:column="37">rcTotal</name><op:operator pos:line="252" pos:column="44">.</op:operator><name pos:line="252" pos:column="45">left</name></name></expr>;</expr_stmt>		 <comment type="line" pos:line="252" pos:column="66">// ...</comment>
			<expr_stmt><expr><name><name pos:line="253" pos:column="25">rc</name><op:operator pos:line="253" pos:column="27">.</op:operator><name pos:line="253" pos:column="28">right</name></name>  <op:operator pos:line="253" pos:column="35">=</op:operator> <name><name pos:line="253" pos:column="37">rcTotal</name><op:operator pos:line="253" pos:column="44">.</op:operator><name pos:line="253" pos:column="45">right</name></name></expr>;</expr_stmt>		 <comment type="line" pos:line="253" pos:column="66">// ...</comment>
			<expr_stmt><expr><name pos:line="254" pos:column="25">xoryPos</name> <op:operator pos:line="254" pos:column="33">+=</op:operator> <name pos:line="254" pos:column="36">height</name></expr>;</expr_stmt>				 <comment type="line" pos:line="254" pos:column="74">// increment yPos</comment>

		}</block></then> <else pos:line="256" pos:column="19">else <block pos:line="256" pos:column="24">{									 <comment type="line" pos:line="256" pos:column="98">// for COLS:</comment>
			<decl_stmt><decl><type><name pos:line="257" pos:column="25">LONG</name></type> <name pos:line="257" pos:column="30">width</name> <init pos:line="257" pos:column="36">= <expr><call><name pos:line="257" pos:column="38">RectWidth</name><argument_list pos:line="257" pos:column="47">(<argument><expr><name pos:line="257" pos:column="48">rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>		 <comment type="line" pos:line="257" pos:column="66">// width = total width</comment>
			<expr_stmt><expr><name><name pos:line="258" pos:column="25">rc</name><op:operator pos:line="258" pos:column="27">.</op:operator><name pos:line="258" pos:column="28">left</name></name>    <op:operator pos:line="258" pos:column="36">=</op:operator> <name pos:line="258" pos:column="38">xoryPos</name></expr>;</expr_stmt>			 <comment type="line" pos:line="258" pos:column="66">// left = running xPos</comment>
			<expr_stmt><expr><name><name pos:line="259" pos:column="25">rc</name><op:operator pos:line="259" pos:column="27">.</op:operator><name pos:line="259" pos:column="28">right</name></name>   <op:operator pos:line="259" pos:column="36">=</op:operator> <name><name pos:line="259" pos:column="38">rc</name><op:operator pos:line="259" pos:column="40">.</op:operator><name pos:line="259" pos:column="41">left</name></name> <op:operator pos:line="259" pos:column="46">+</op:operator> <name pos:line="259" pos:column="48">width</name></expr>;</expr_stmt>	 <comment type="line" pos:line="259" pos:column="58">// ...</comment>
			<expr_stmt><expr><name><name pos:line="260" pos:column="25">rc</name><op:operator pos:line="260" pos:column="27">.</op:operator><name pos:line="260" pos:column="28">top</name></name>     <op:operator pos:line="260" pos:column="36">=</op:operator> <name><name pos:line="260" pos:column="38">rcTotal</name><op:operator pos:line="260" pos:column="45">.</op:operator><name pos:line="260" pos:column="46">top</name></name></expr>;</expr_stmt>		 <comment type="line" pos:line="260" pos:column="66">// ...</comment>
			<expr_stmt><expr><name><name pos:line="261" pos:column="25">rc</name><op:operator pos:line="261" pos:column="27">.</op:operator><name pos:line="261" pos:column="28">bottom</name></name>  <op:operator pos:line="261" pos:column="36">=</op:operator> <name><name pos:line="261" pos:column="38">rcTotal</name><op:operator pos:line="261" pos:column="45">.</op:operator><name pos:line="261" pos:column="46">bottom</name></name></expr>;</expr_stmt>	 <comment type="line" pos:line="261" pos:column="58">// ...</comment>
			<expr_stmt><expr><name pos:line="262" pos:column="25">xoryPos</name> <op:operator pos:line="262" pos:column="33">+=</op:operator> <name pos:line="262" pos:column="36">width</name></expr>;</expr_stmt>					 <comment type="line" pos:line="262" pos:column="82">// increment xPos</comment>
		}</block></else></if>
	}</block></for>
}</block></function>

<comment type="line" format="doxygen" pos:line="267" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="268" pos:column="1">// Get size information for a single entry (WINRECT). Returns size info in</comment>
<comment type="line" pos:line="269" pos:column="1">// the SIZEINFO argument. For a group, calculate size info as aggregate of</comment>
<comment type="line" pos:line="270" pos:column="1">// subentries.</comment>
<comment type="line" pos:line="271" pos:column="1">//</comment>
<function><type><name pos:line="272" pos:column="1">void</name></type>
<name><name pos:line="273" pos:column="1">CWinMgr</name><op:operator pos:line="273" pos:column="8">::</op:operator><name pos:line="273" pos:column="10">OnGetSizeInfo</name></name><parameter_list pos:line="273" pos:column="23">(<param><decl><type><name pos:line="273" pos:column="24">SIZEINFO</name><type:modifier pos:line="273" pos:column="32">&amp;</type:modifier></type> <name pos:line="273" pos:column="34">szi</name></decl></param>, <param><decl><type><name pos:line="273" pos:column="39">WINRECT</name><type:modifier pos:line="273" pos:column="46">*</type:modifier></type> <name pos:line="273" pos:column="48">wrc</name></decl></param>, <param><decl><type><name pos:line="273" pos:column="53">HWND</name></type> <name pos:line="273" pos:column="58">hWnd</name></decl></param>)</parameter_list>
<block pos:line="274" pos:column="1">{
	<expr_stmt><expr><name><name pos:line="275" pos:column="9">szi</name><op:operator pos:line="275" pos:column="12">.</op:operator><name pos:line="275" pos:column="13">szMin</name></name> <op:operator pos:line="275" pos:column="19">=</op:operator> <name pos:line="275" pos:column="21">SIZEZERO</name></expr>;</expr_stmt>				<comment type="line" pos:line="275" pos:column="57">// default min size = zero</comment>
	<expr_stmt><expr><name><name pos:line="276" pos:column="9">szi</name><op:operator pos:line="276" pos:column="12">.</op:operator><name pos:line="276" pos:column="13">szMax</name></name> <op:operator pos:line="276" pos:column="19">=</op:operator> <name pos:line="276" pos:column="21">SIZEMAX</name></expr>;</expr_stmt>					<comment type="line" pos:line="276" pos:column="65">// default max size = infinite</comment>
	<expr_stmt><expr><name><name pos:line="277" pos:column="9">szi</name><op:operator pos:line="277" pos:column="12">.</op:operator><name pos:line="277" pos:column="13">szDesired</name></name> <op:operator pos:line="277" pos:column="23">=</op:operator> <call><name pos:line="277" pos:column="25">RectToSize</name><argument_list pos:line="277" pos:column="35">(<argument><expr><call><name><name pos:line="277" pos:column="36">wrc</name><op:operator pos:line="277" pos:column="39">-&gt;</op:operator><name pos:line="277" pos:column="41">GetRect</name></name><argument_list pos:line="277" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="277" pos:column="57">// default desired size = current </comment>

	<if pos:line="279" pos:column="9">if <condition pos:line="279" pos:column="12">(<expr><call><name><name pos:line="279" pos:column="13">wrc</name><op:operator pos:line="279" pos:column="16">-&gt;</op:operator><name pos:line="279" pos:column="18">IsGroup</name></name><argument_list pos:line="279" pos:column="25">()</argument_list></call></expr>)</condition><then pos:line="279" pos:column="28"> <block pos:line="279" pos:column="29">{
		<comment type="line" pos:line="280" pos:column="17">// For groups, calculate min, max, desired size as aggregate of children</comment>
		<expr_stmt><expr><name><name pos:line="281" pos:column="17">szi</name><op:operator pos:line="281" pos:column="20">.</op:operator><name pos:line="281" pos:column="21">szDesired</name></name> <op:operator pos:line="281" pos:column="31">=</op:operator> <name pos:line="281" pos:column="33">SIZEZERO</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="282" pos:column="17">BOOL</name></type> <name pos:line="282" pos:column="22">bRow</name> <init pos:line="282" pos:column="27">= <expr><call><name><name pos:line="282" pos:column="29">wrc</name><op:operator pos:line="282" pos:column="32">-&gt;</op:operator><name pos:line="282" pos:column="34">IsRowGroup</name></name><argument_list pos:line="282" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name pos:line="284" pos:column="17">CWinGroupIterator</name></type> <name pos:line="284" pos:column="35">it</name></decl>;</decl_stmt>
		<for pos:line="285" pos:column="17">for (<init><expr><name pos:line="285" pos:column="22">it</name><op:operator pos:line="285" pos:column="24">=</op:operator><name pos:line="285" pos:column="25">wrc</name></expr>;</init> <condition><expr><name pos:line="285" pos:column="30">it</name></expr>;</condition> <incr><expr><call><name><name pos:line="285" pos:column="34">it</name><op:operator pos:line="285" pos:column="36">.</op:operator><name pos:line="285" pos:column="37">Next</name></name><argument_list pos:line="285" pos:column="41">()</argument_list></call></expr></incr>) <block pos:line="285" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="286" pos:column="25">WINRECT</name><type:modifier pos:line="286" pos:column="32">*</type:modifier></type> <name pos:line="286" pos:column="34">wrc2</name> <init pos:line="286" pos:column="39">= <expr><name pos:line="286" pos:column="41">it</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="287" pos:column="25">SIZEINFO</name></type> <name pos:line="287" pos:column="34">szi2</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="288" pos:column="25">OnGetSizeInfo</name><argument_list pos:line="288" pos:column="38">(<argument><expr><name pos:line="288" pos:column="39">szi2</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="45">wrc2</name></expr></argument>, <argument><expr><name pos:line="288" pos:column="51">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="289" pos:column="25">if <condition pos:line="289" pos:column="28">(<expr><name pos:line="289" pos:column="29">bRow</name></expr>)</condition><then pos:line="289" pos:column="34"> <block pos:line="289" pos:column="35">{
				<expr_stmt><expr><name><name pos:line="290" pos:column="33">szi</name><op:operator pos:line="290" pos:column="36">.</op:operator><name pos:line="290" pos:column="37">szMin</name><op:operator pos:line="290" pos:column="42">.</op:operator><name pos:line="290" pos:column="43">cx</name></name> <op:operator pos:line="290" pos:column="46">=</op:operator> <call><name pos:line="290" pos:column="48">max</name><argument_list pos:line="290" pos:column="51">(<argument><expr><name><name pos:line="290" pos:column="52">szi</name><op:operator pos:line="290" pos:column="55">.</op:operator><name pos:line="290" pos:column="56">szMin</name><op:operator pos:line="290" pos:column="61">.</op:operator><name pos:line="290" pos:column="62">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="290" pos:column="66">szi2</name><op:operator pos:line="290" pos:column="70">.</op:operator><name pos:line="290" pos:column="71">szMin</name><op:operator pos:line="290" pos:column="76">.</op:operator><name pos:line="290" pos:column="77">cx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="291" pos:column="33">szi</name><op:operator pos:line="291" pos:column="36">.</op:operator><name pos:line="291" pos:column="37">szMin</name><op:operator pos:line="291" pos:column="42">.</op:operator><name pos:line="291" pos:column="43">cy</name></name> <op:operator pos:line="291" pos:column="46">+=</op:operator> <name><name pos:line="291" pos:column="49">szi2</name><op:operator pos:line="291" pos:column="53">.</op:operator><name pos:line="291" pos:column="54">szMin</name><op:operator pos:line="291" pos:column="59">.</op:operator><name pos:line="291" pos:column="60">cy</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="292" pos:column="33">szi</name><op:operator pos:line="292" pos:column="36">.</op:operator><name pos:line="292" pos:column="37">szMax</name><op:operator pos:line="292" pos:column="42">.</op:operator><name pos:line="292" pos:column="43">cx</name></name> <op:operator pos:line="292" pos:column="46">=</op:operator> <call><name pos:line="292" pos:column="48">min</name><argument_list pos:line="292" pos:column="51">(<argument><expr><name><name pos:line="292" pos:column="52">szi</name><op:operator pos:line="292" pos:column="55">.</op:operator><name pos:line="292" pos:column="56">szMax</name><op:operator pos:line="292" pos:column="61">.</op:operator><name pos:line="292" pos:column="62">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="292" pos:column="66">szi2</name><op:operator pos:line="292" pos:column="70">.</op:operator><name pos:line="292" pos:column="71">szMax</name><op:operator pos:line="292" pos:column="76">.</op:operator><name pos:line="292" pos:column="77">cx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="293" pos:column="33">szi</name><op:operator pos:line="293" pos:column="36">.</op:operator><name pos:line="293" pos:column="37">szMax</name><op:operator pos:line="293" pos:column="42">.</op:operator><name pos:line="293" pos:column="43">cy</name></name> <op:operator pos:line="293" pos:column="46">=</op:operator> <call><name pos:line="293" pos:column="48">min</name><argument_list pos:line="293" pos:column="51">(<argument><expr><name><name pos:line="293" pos:column="52">szi</name><op:operator pos:line="293" pos:column="55">.</op:operator><name pos:line="293" pos:column="56">szMax</name><op:operator pos:line="293" pos:column="61">.</op:operator><name pos:line="293" pos:column="62">cy</name></name> <op:operator pos:line="293" pos:column="65">+</op:operator> <name><name pos:line="293" pos:column="67">szi2</name><op:operator pos:line="293" pos:column="71">.</op:operator><name pos:line="293" pos:column="72">szMax</name><op:operator pos:line="293" pos:column="77">.</op:operator><name pos:line="293" pos:column="78">cy</name></name></expr></argument>, <argument><expr><name pos:line="293" pos:column="82">INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="294" pos:column="33">szi</name><op:operator pos:line="294" pos:column="36">.</op:operator><name pos:line="294" pos:column="37">szDesired</name><op:operator pos:line="294" pos:column="46">.</op:operator><name pos:line="294" pos:column="47">cx</name></name> <op:operator pos:line="294" pos:column="50">=</op:operator> <call><name pos:line="294" pos:column="52">max</name><argument_list pos:line="294" pos:column="55">(<argument><expr><name><name pos:line="294" pos:column="56">szi</name><op:operator pos:line="294" pos:column="59">.</op:operator><name pos:line="294" pos:column="60">szDesired</name><op:operator pos:line="294" pos:column="69">.</op:operator><name pos:line="294" pos:column="70">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="294" pos:column="74">szi2</name><op:operator pos:line="294" pos:column="78">.</op:operator><name pos:line="294" pos:column="79">szDesired</name><op:operator pos:line="294" pos:column="88">.</op:operator><name pos:line="294" pos:column="89">cx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="295" pos:column="33">szi</name><op:operator pos:line="295" pos:column="36">.</op:operator><name pos:line="295" pos:column="37">szDesired</name><op:operator pos:line="295" pos:column="46">.</op:operator><name pos:line="295" pos:column="47">cy</name></name> <op:operator pos:line="295" pos:column="50">+=</op:operator> <name><name pos:line="295" pos:column="53">szi2</name><op:operator pos:line="295" pos:column="57">.</op:operator><name pos:line="295" pos:column="58">szDesired</name><op:operator pos:line="295" pos:column="67">.</op:operator><name pos:line="295" pos:column="68">cy</name></name></expr>;</expr_stmt>

			}</block></then> <else pos:line="297" pos:column="27">else <block pos:line="297" pos:column="32">{
				<expr_stmt><expr><name><name pos:line="298" pos:column="33">szi</name><op:operator pos:line="298" pos:column="36">.</op:operator><name pos:line="298" pos:column="37">szMin</name><op:operator pos:line="298" pos:column="42">.</op:operator><name pos:line="298" pos:column="43">cx</name></name> <op:operator pos:line="298" pos:column="46">+=</op:operator> <name><name pos:line="298" pos:column="49">szi2</name><op:operator pos:line="298" pos:column="53">.</op:operator><name pos:line="298" pos:column="54">szMin</name><op:operator pos:line="298" pos:column="59">.</op:operator><name pos:line="298" pos:column="60">cx</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="299" pos:column="33">szi</name><op:operator pos:line="299" pos:column="36">.</op:operator><name pos:line="299" pos:column="37">szMin</name><op:operator pos:line="299" pos:column="42">.</op:operator><name pos:line="299" pos:column="43">cy</name></name> <op:operator pos:line="299" pos:column="46">=</op:operator> <call><name pos:line="299" pos:column="48">max</name><argument_list pos:line="299" pos:column="51">(<argument><expr><name><name pos:line="299" pos:column="52">szi</name><op:operator pos:line="299" pos:column="55">.</op:operator><name pos:line="299" pos:column="56">szMin</name><op:operator pos:line="299" pos:column="61">.</op:operator><name pos:line="299" pos:column="62">cy</name></name></expr></argument>, <argument><expr><name><name pos:line="299" pos:column="66">szi2</name><op:operator pos:line="299" pos:column="70">.</op:operator><name pos:line="299" pos:column="71">szMin</name><op:operator pos:line="299" pos:column="76">.</op:operator><name pos:line="299" pos:column="77">cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="300" pos:column="33">szi</name><op:operator pos:line="300" pos:column="36">.</op:operator><name pos:line="300" pos:column="37">szMax</name><op:operator pos:line="300" pos:column="42">.</op:operator><name pos:line="300" pos:column="43">cx</name></name> <op:operator pos:line="300" pos:column="46">=</op:operator> <call><name pos:line="300" pos:column="48">min</name><argument_list pos:line="300" pos:column="51">(<argument><expr><name><name pos:line="300" pos:column="52">szi</name><op:operator pos:line="300" pos:column="55">.</op:operator><name pos:line="300" pos:column="56">szMax</name><op:operator pos:line="300" pos:column="61">.</op:operator><name pos:line="300" pos:column="62">cx</name></name> <op:operator pos:line="300" pos:column="65">+</op:operator> <name><name pos:line="300" pos:column="67">szi2</name><op:operator pos:line="300" pos:column="71">.</op:operator><name pos:line="300" pos:column="72">szMax</name><op:operator pos:line="300" pos:column="77">.</op:operator><name pos:line="300" pos:column="78">cx</name></name></expr></argument>, <argument><expr><name pos:line="300" pos:column="82">INFINITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="301" pos:column="33">szi</name><op:operator pos:line="301" pos:column="36">.</op:operator><name pos:line="301" pos:column="37">szMax</name><op:operator pos:line="301" pos:column="42">.</op:operator><name pos:line="301" pos:column="43">cy</name></name> <op:operator pos:line="301" pos:column="46">=</op:operator> <call><name pos:line="301" pos:column="48">min</name><argument_list pos:line="301" pos:column="51">(<argument><expr><name><name pos:line="301" pos:column="52">szi</name><op:operator pos:line="301" pos:column="55">.</op:operator><name pos:line="301" pos:column="56">szMax</name><op:operator pos:line="301" pos:column="61">.</op:operator><name pos:line="301" pos:column="62">cy</name></name></expr></argument>, <argument><expr><name><name pos:line="301" pos:column="66">szi2</name><op:operator pos:line="301" pos:column="70">.</op:operator><name pos:line="301" pos:column="71">szMax</name><op:operator pos:line="301" pos:column="76">.</op:operator><name pos:line="301" pos:column="77">cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="302" pos:column="33">szi</name><op:operator pos:line="302" pos:column="36">.</op:operator><name pos:line="302" pos:column="37">szDesired</name><op:operator pos:line="302" pos:column="46">.</op:operator><name pos:line="302" pos:column="47">cx</name></name> <op:operator pos:line="302" pos:column="50">+=</op:operator> <name><name pos:line="302" pos:column="53">szi2</name><op:operator pos:line="302" pos:column="57">.</op:operator><name pos:line="302" pos:column="58">szDesired</name><op:operator pos:line="302" pos:column="67">.</op:operator><name pos:line="302" pos:column="68">cx</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="303" pos:column="33">szi</name><op:operator pos:line="303" pos:column="36">.</op:operator><name pos:line="303" pos:column="37">szDesired</name><op:operator pos:line="303" pos:column="46">.</op:operator><name pos:line="303" pos:column="47">cy</name></name> <op:operator pos:line="303" pos:column="50">=</op:operator> <call><name pos:line="303" pos:column="52">max</name><argument_list pos:line="303" pos:column="55">(<argument><expr><name><name pos:line="303" pos:column="56">szi</name><op:operator pos:line="303" pos:column="59">.</op:operator><name pos:line="303" pos:column="60">szDesired</name><op:operator pos:line="303" pos:column="69">.</op:operator><name pos:line="303" pos:column="70">cy</name></name></expr></argument>, <argument><expr><name><name pos:line="303" pos:column="74">szi2</name><op:operator pos:line="303" pos:column="78">.</op:operator><name pos:line="303" pos:column="79">szDesired</name><op:operator pos:line="303" pos:column="88">.</op:operator><name pos:line="303" pos:column="89">cy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>

		<comment type="line" pos:line="307" pos:column="17">// Add margins. </comment>
		<decl_stmt><decl><type><name pos:line="308" pos:column="17">int</name></type> <name pos:line="308" pos:column="21">w2</name></decl><op:operator pos:line="308" pos:column="23">,</op:operator><decl><type ref="prev"/><name pos:line="308" pos:column="24">h2</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="309" pos:column="17">wrc</name><op:operator pos:line="309" pos:column="20">-&gt;</op:operator><name pos:line="309" pos:column="22">GetMargins</name></name><argument_list pos:line="309" pos:column="32">(<argument><expr><name pos:line="309" pos:column="33">w2</name></expr></argument>,<argument><expr><name pos:line="309" pos:column="36">h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="line" pos:line="309" pos:column="57">// get margins</comment>
		<expr_stmt><expr><name pos:line="310" pos:column="17">w2</name><op:operator pos:line="310" pos:column="19">&lt;&lt;=</op:operator><lit:literal type="number" pos:line="310" pos:column="22">1</lit:literal></expr>;</expr_stmt> <expr_stmt><expr><name pos:line="310" pos:column="25">h2</name><op:operator pos:line="310" pos:column="27">&lt;&lt;=</op:operator><lit:literal type="number" pos:line="310" pos:column="30">1</lit:literal></expr>;</expr_stmt>					<comment type="line" pos:line="310" pos:column="65">// double</comment>
		<expr_stmt><expr><name><name pos:line="311" pos:column="17">szi</name><op:operator pos:line="311" pos:column="20">.</op:operator><name pos:line="311" pos:column="21">szMin</name><op:operator pos:line="311" pos:column="26">.</op:operator><name pos:line="311" pos:column="27">cx</name></name> <op:operator pos:line="311" pos:column="30">+=</op:operator> <call><name pos:line="311" pos:column="33">max</name><argument_list pos:line="311" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="311" pos:column="37">0</lit:literal></expr></argument>,<argument><expr><name pos:line="311" pos:column="39">w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="line" pos:line="311" pos:column="57">// negative margins ==&gt; don't include in min</comment>
		<expr_stmt><expr><name><name pos:line="312" pos:column="17">szi</name><op:operator pos:line="312" pos:column="20">.</op:operator><name pos:line="312" pos:column="21">szMin</name><op:operator pos:line="312" pos:column="26">.</op:operator><name pos:line="312" pos:column="27">cy</name></name> <op:operator pos:line="312" pos:column="30">+=</op:operator> <call><name pos:line="312" pos:column="33">max</name><argument_list pos:line="312" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="312" pos:column="37">0</lit:literal></expr></argument>,<argument><expr><name pos:line="312" pos:column="39">h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="line" pos:line="312" pos:column="57">// ditto</comment>
		<expr_stmt><expr><name><name pos:line="313" pos:column="17">szi</name><op:operator pos:line="313" pos:column="20">.</op:operator><name pos:line="313" pos:column="21">szDesired</name><op:operator pos:line="313" pos:column="30">.</op:operator><name pos:line="313" pos:column="31">cx</name></name> <op:operator pos:line="313" pos:column="34">+=</op:operator> <call><name pos:line="313" pos:column="37">abs</name><argument_list pos:line="313" pos:column="40">(<argument><expr><name pos:line="313" pos:column="41">w2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="313" pos:column="49">// for desired size, use abs vallue</comment>
		<expr_stmt><expr><name><name pos:line="314" pos:column="17">szi</name><op:operator pos:line="314" pos:column="20">.</op:operator><name pos:line="314" pos:column="21">szDesired</name><op:operator pos:line="314" pos:column="30">.</op:operator><name pos:line="314" pos:column="31">cy</name></name> <op:operator pos:line="314" pos:column="34">+=</op:operator> <call><name pos:line="314" pos:column="37">abs</name><argument_list pos:line="314" pos:column="40">(<argument><expr><name pos:line="314" pos:column="41">h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="314" pos:column="49">// ditto</comment>

	}</block></then> <else pos:line="316" pos:column="11">else <block pos:line="316" pos:column="16">{
		<comment type="line" pos:line="317" pos:column="17">// not a group</comment>
		<decl_stmt><decl><type><name pos:line="318" pos:column="17">WINRECT</name><type:modifier pos:line="318" pos:column="24">*</type:modifier></type> <name pos:line="318" pos:column="26">parent</name> <init pos:line="318" pos:column="33">= <expr><call><name><name pos:line="318" pos:column="35">wrc</name><op:operator pos:line="318" pos:column="38">-&gt;</op:operator><name pos:line="318" pos:column="40">Parent</name></name><argument_list pos:line="318" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="319" pos:column="17">assert</name><argument_list pos:line="319" pos:column="23">(<argument><expr><name pos:line="319" pos:column="24">parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="320" pos:column="17">RECT</name><type:modifier pos:line="320" pos:column="21">&amp;</type:modifier></type> <name pos:line="320" pos:column="23">rcParent</name> <init pos:line="320" pos:column="32">= <expr><call><name><name pos:line="320" pos:column="34">parent</name><op:operator pos:line="320" pos:column="40">-&gt;</op:operator><name pos:line="320" pos:column="42">GetRect</name></name><argument_list pos:line="320" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="321" pos:column="17">BOOL</name></type> <name pos:line="321" pos:column="22">bRow</name> <init pos:line="321" pos:column="27">= <expr><call><name><name pos:line="321" pos:column="29">parent</name><op:operator pos:line="321" pos:column="35">-&gt;</op:operator><name pos:line="321" pos:column="37">IsRowGroup</name></name><argument_list pos:line="321" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="322" pos:column="17">int</name></type> <name pos:line="322" pos:column="21">hw</name></decl><op:operator pos:line="322" pos:column="23">,</op:operator> <decl><type ref="prev"/><name pos:line="322" pos:column="25">hwMin</name></decl><op:operator pos:line="322" pos:column="30">,</op:operator> <decl><type ref="prev"/><name pos:line="322" pos:column="32">hwTotal</name></decl><op:operator pos:line="322" pos:column="39">,</op:operator> <decl><type ref="prev"/><name pos:line="322" pos:column="41">pct</name></decl>;</decl_stmt>

		<switch pos:line="324" pos:column="17">switch <condition pos:line="324" pos:column="24">(<expr><call><name><name pos:line="324" pos:column="25">wrc</name><op:operator pos:line="324" pos:column="28">-&gt;</op:operator><name pos:line="324" pos:column="30">Type</name></name><argument_list pos:line="324" pos:column="34">()</argument_list></call></expr>)</condition> <block pos:line="324" pos:column="38">{
		<case pos:line="325" pos:column="17">case <expr><name pos:line="325" pos:column="22">WRCT_FIXED</name></expr>:
			<expr_stmt><expr><name pos:line="326" pos:column="25">hw</name> <op:operator pos:line="326" pos:column="28">=</op:operator> <name pos:line="326" pos:column="30">hwMin</name> <op:operator pos:line="326" pos:column="36">=</op:operator> <call><name><name pos:line="326" pos:column="38">wrc</name><op:operator pos:line="326" pos:column="41">-&gt;</op:operator><name pos:line="326" pos:column="43">GetParam</name></name><argument_list pos:line="326" pos:column="51">()</argument_list></call></expr>;</expr_stmt>	 <comment type="line" pos:line="326" pos:column="58">// ht/wid is parameter</comment>
			<if pos:line="327" pos:column="25">if <condition pos:line="327" pos:column="28">(<expr><name pos:line="327" pos:column="29">hw</name><op:operator pos:line="327" pos:column="31">&lt;</op:operator><lit:literal type="number" pos:line="327" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="327" pos:column="34"> <block pos:line="327" pos:column="35">{							 <comment type="line" pos:line="327" pos:column="90">// if fixed val is negative:</comment>
				<expr_stmt><expr><name pos:line="328" pos:column="33">hw</name> <op:operator pos:line="328" pos:column="36">=</op:operator> <op:operator pos:line="328" pos:column="38">-</op:operator><name pos:line="328" pos:column="39">hw</name></expr>;</expr_stmt>						 <comment type="line" pos:line="328" pos:column="90">// use absolute val for desired..</comment>
				<expr_stmt><expr><name pos:line="329" pos:column="33">hwMin</name> <op:operator pos:line="329" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="329" pos:column="41">0</lit:literal></expr>;</expr_stmt>						 <comment type="line" pos:line="329" pos:column="90">// ..and zero for minimum</comment>
			}</block></then></if>
			<if pos:line="331" pos:column="25">if <condition pos:line="331" pos:column="28">(<expr><name pos:line="331" pos:column="29">bRow</name></expr>)</condition><then pos:line="331" pos:column="34"> <block pos:line="331" pos:column="35">{
				<expr_stmt><expr><name><name pos:line="332" pos:column="33">szi</name><op:operator pos:line="332" pos:column="36">.</op:operator><name pos:line="332" pos:column="37">szMax</name><op:operator pos:line="332" pos:column="42">.</op:operator><name pos:line="332" pos:column="43">cy</name></name> <op:operator pos:line="332" pos:column="46">=</op:operator> <name><name pos:line="332" pos:column="48">szi</name><op:operator pos:line="332" pos:column="51">.</op:operator><name pos:line="332" pos:column="52">szDesired</name><op:operator pos:line="332" pos:column="61">.</op:operator><name pos:line="332" pos:column="62">cy</name></name> <op:operator pos:line="332" pos:column="65">=</op:operator> <name pos:line="332" pos:column="67">hw</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="333" pos:column="33">szi</name><op:operator pos:line="333" pos:column="36">.</op:operator><name pos:line="333" pos:column="37">szMin</name><op:operator pos:line="333" pos:column="42">.</op:operator><name pos:line="333" pos:column="43">cy</name></name> <op:operator pos:line="333" pos:column="46">=</op:operator> <name pos:line="333" pos:column="48">hwMin</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="334" pos:column="27">else <block pos:line="334" pos:column="32">{
				<expr_stmt><expr><name><name pos:line="335" pos:column="33">szi</name><op:operator pos:line="335" pos:column="36">.</op:operator><name pos:line="335" pos:column="37">szMax</name><op:operator pos:line="335" pos:column="42">.</op:operator><name pos:line="335" pos:column="43">cx</name></name> <op:operator pos:line="335" pos:column="46">=</op:operator> <name><name pos:line="335" pos:column="48">szi</name><op:operator pos:line="335" pos:column="51">.</op:operator><name pos:line="335" pos:column="52">szDesired</name><op:operator pos:line="335" pos:column="61">.</op:operator><name pos:line="335" pos:column="62">cx</name></name> <op:operator pos:line="335" pos:column="65">=</op:operator> <name pos:line="335" pos:column="67">hw</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="336" pos:column="33">szi</name><op:operator pos:line="336" pos:column="36">.</op:operator><name pos:line="336" pos:column="37">szMin</name><op:operator pos:line="336" pos:column="42">.</op:operator><name pos:line="336" pos:column="43">cx</name></name> <op:operator pos:line="336" pos:column="46">=</op:operator> <name pos:line="336" pos:column="48">hwMin</name></expr>;</expr_stmt>
			}</block></else></if>
			<break pos:line="338" pos:column="25">break;</break>

		</case><case pos:line="340" pos:column="17">case <expr><name pos:line="340" pos:column="22">WRCT_PCT</name></expr>:
			<expr_stmt><expr><name pos:line="341" pos:column="25">pct</name> <op:operator pos:line="341" pos:column="29">=</op:operator> <call><name><name pos:line="341" pos:column="31">wrc</name><op:operator pos:line="341" pos:column="34">-&gt;</op:operator><name pos:line="341" pos:column="36">GetParam</name></name><argument_list pos:line="341" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="342" pos:column="25">assert</name><argument_list pos:line="342" pos:column="31">(<argument><expr><lit:literal type="number" pos:line="342" pos:column="32">0</lit:literal><op:operator pos:line="342" pos:column="33">&lt;</op:operator><name pos:line="342" pos:column="34">pct</name> <op:operator pos:line="342" pos:column="38">&amp;&amp;</op:operator> <name pos:line="342" pos:column="41">pct</name><op:operator pos:line="342" pos:column="44">&lt;</op:operator><lit:literal type="number" pos:line="342" pos:column="45">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="343" pos:column="25">hwTotal</name> <op:operator pos:line="343" pos:column="33">=</op:operator> <name pos:line="343" pos:column="35">bRow</name> <op:operator pos:line="343" pos:column="40">?</op:operator> <call><name pos:line="343" pos:column="42">RectHeight</name><argument_list pos:line="343" pos:column="52">(<argument><expr><name pos:line="343" pos:column="53">rcParent</name></expr></argument>)</argument_list></call> <op:operator pos:line="343" pos:column="63">:</op:operator> <call><name pos:line="343" pos:column="65">RectWidth</name><argument_list pos:line="343" pos:column="74">(<argument><expr><name pos:line="343" pos:column="75">rcParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="344" pos:column="25">hw</name> <op:operator pos:line="344" pos:column="28">=</op:operator> <op:operator pos:line="344" pos:column="30">(</op:operator><name pos:line="344" pos:column="31">hwTotal</name> <op:operator pos:line="344" pos:column="39">*</op:operator> <name pos:line="344" pos:column="41">pct</name><op:operator pos:line="344" pos:column="44">)</op:operator> <op:operator pos:line="344" pos:column="46">/</op:operator> <lit:literal type="number" pos:line="344" pos:column="48">100</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="345" pos:column="25">szi</name><op:operator pos:line="345" pos:column="28">.</op:operator><name pos:line="345" pos:column="29">szDesired</name></name> <op:operator pos:line="345" pos:column="39">=</op:operator> <name pos:line="345" pos:column="41">bRow</name> <op:operator pos:line="345" pos:column="46">?</op:operator> <call><name pos:line="345" pos:column="48">GetSize</name><argument_list pos:line="345" pos:column="55">(<argument><expr><call><name pos:line="345" pos:column="56">RectWidth</name><argument_list pos:line="345" pos:column="65">(<argument><expr><name pos:line="345" pos:column="66">rcParent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="345" pos:column="77">hw</name></expr></argument>)</argument_list></call> <op:operator pos:line="345" pos:column="81">:</op:operator> <call><name pos:line="345" pos:column="83">GetSize</name><argument_list pos:line="345" pos:column="90">(<argument><expr><name pos:line="345" pos:column="91">hw</name></expr></argument>, <argument><expr><call><name pos:line="345" pos:column="95">RectHeight</name><argument_list pos:line="345" pos:column="105">(<argument><expr><name pos:line="345" pos:column="106">rcParent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="346" pos:column="25">break;</break>

		</case><case pos:line="348" pos:column="17">case <expr><name pos:line="348" pos:column="22">WRCT_TOFIT</name></expr>:
			<if pos:line="349" pos:column="25">if <condition pos:line="349" pos:column="28">(<expr><call><name><name pos:line="349" pos:column="29">wrc</name><op:operator pos:line="349" pos:column="32">-&gt;</op:operator><name pos:line="349" pos:column="34">HasToFitSize</name></name><argument_list pos:line="349" pos:column="46">()</argument_list></call></expr>)</condition><then pos:line="349" pos:column="49"> <block pos:line="349" pos:column="50">{
				<expr_stmt><expr><name><name pos:line="350" pos:column="33">szi</name><op:operator pos:line="350" pos:column="36">.</op:operator><name pos:line="350" pos:column="37">szDesired</name></name> <op:operator pos:line="350" pos:column="47">=</op:operator> <call><name><name pos:line="350" pos:column="49">wrc</name><op:operator pos:line="350" pos:column="52">-&gt;</op:operator><name pos:line="350" pos:column="54">GetToFitSize</name></name><argument_list pos:line="350" pos:column="66">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="352" pos:column="25">break;</break>

		</case><case pos:line="354" pos:column="17">case <expr><name pos:line="354" pos:column="22">WRCT_REST</name></expr>:
			<break pos:line="355" pos:column="25">break;</break>

		</case><default pos:line="357" pos:column="17">default:
			<expr_stmt><expr><call><name pos:line="358" pos:column="25">assert</name><argument_list pos:line="358" pos:column="31">(<argument><expr><name pos:line="358" pos:column="32">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</default>}</block></switch>

		<comment type="line" pos:line="361" pos:column="17">// If the entry is a window, send message to get min/max/tofit size.</comment>
		<comment type="line" pos:line="362" pos:column="17">// Only set tofit size if type is TOFIT.</comment>
		<comment type="line" pos:line="363" pos:column="17">//</comment>
		<if pos:line="364" pos:column="17">if <condition pos:line="364" pos:column="20">(<expr><call><name><name pos:line="364" pos:column="21">wrc</name><op:operator pos:line="364" pos:column="24">-&gt;</op:operator><name pos:line="364" pos:column="26">IsWindow</name></name><argument_list pos:line="364" pos:column="34">()</argument_list></call> <op:operator pos:line="364" pos:column="37">&amp;&amp;</op:operator> <name pos:line="364" pos:column="40">hWnd</name></expr>)</condition><then pos:line="364" pos:column="45"> <block pos:line="364" pos:column="46">{
			<decl_stmt><decl><type><name pos:line="365" pos:column="25">HWND</name></type> <name pos:line="365" pos:column="30">hChild</name> <init pos:line="365" pos:column="37">= <expr><call><name pos:line="365" pos:column="39">GetDlgItem</name><argument_list pos:line="365" pos:column="49">(<argument><expr><name pos:line="365" pos:column="50">hWnd</name></expr></argument>, <argument><expr><call><name><name pos:line="365" pos:column="56">wrc</name><op:operator pos:line="365" pos:column="59">-&gt;</op:operator><name pos:line="365" pos:column="61">GetID</name></name><argument_list pos:line="365" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="366" pos:column="25">if <condition pos:line="366" pos:column="28">(<expr><name pos:line="366" pos:column="29">hChild</name></expr>)</condition><then pos:line="366" pos:column="36"> <block pos:line="366" pos:column="37">{
				<if pos:line="367" pos:column="33">if <condition pos:line="367" pos:column="36">(<expr><op:operator pos:line="367" pos:column="37">!</op:operator><call><name pos:line="367" pos:column="38">IsWindowVisible</name><argument_list pos:line="367" pos:column="53">(<argument><expr><name pos:line="367" pos:column="54">hChild</name></expr></argument>)</argument_list></call> <op:operator pos:line="367" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="367" pos:column="65">IsWindowVisible</name><argument_list pos:line="367" pos:column="80">(<argument><expr><name pos:line="367" pos:column="81">hWnd</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="367" pos:column="87"> <block pos:line="367" pos:column="88">{
					<comment type="line" pos:line="368" pos:column="41">// parent visible but child not ==&gt; tofit size is zero</comment>
					<comment type="line" pos:line="369" pos:column="41">// important so hidden windows use no space</comment>
					<expr_stmt><expr><name><name pos:line="370" pos:column="41">szi</name><op:operator pos:line="370" pos:column="44">.</op:operator><name pos:line="370" pos:column="45">szDesired</name></name> <op:operator pos:line="370" pos:column="55">=</op:operator> <name pos:line="370" pos:column="57">SIZEZERO</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="371" pos:column="35">else <block pos:line="371" pos:column="40">{
					<expr_stmt><expr><name><name pos:line="372" pos:column="41">szi</name><op:operator pos:line="372" pos:column="44">.</op:operator><name pos:line="372" pos:column="45">szAvail</name></name> <op:operator pos:line="372" pos:column="53">=</op:operator> <call><name pos:line="372" pos:column="55">RectToSize</name><argument_list pos:line="372" pos:column="65">(<argument><expr><name pos:line="372" pos:column="66">rcParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="373" pos:column="41">SendGetSizeInfo</name><argument_list pos:line="373" pos:column="56">(<argument><expr><name pos:line="373" pos:column="57">szi</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="62">hWnd</name></expr></argument>, <argument><expr><call><name><name pos:line="373" pos:column="68">wrc</name><op:operator pos:line="373" pos:column="71">-&gt;</op:operator><name pos:line="373" pos:column="73">GetID</name></name><argument_list pos:line="373" pos:column="78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name><name pos:line="377" pos:column="17">szi</name><op:operator pos:line="377" pos:column="20">.</op:operator><name pos:line="377" pos:column="21">szDesired</name></name> <op:operator pos:line="377" pos:column="31">=</op:operator> <call><name pos:line="377" pos:column="33">maxsize</name><argument_list pos:line="377" pos:column="40">(<argument><expr><call><name pos:line="377" pos:column="41">minsize</name><argument_list pos:line="377" pos:column="48">(<argument><expr><name><name pos:line="377" pos:column="49">szi</name><op:operator pos:line="377" pos:column="52">.</op:operator><name pos:line="377" pos:column="53">szDesired</name></name></expr></argument>,<argument><expr><name><name pos:line="377" pos:column="63">szi</name><op:operator pos:line="377" pos:column="66">.</op:operator><name pos:line="377" pos:column="67">szMax</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="377" pos:column="75">szi</name><op:operator pos:line="377" pos:column="78">.</op:operator><name pos:line="377" pos:column="79">szMin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<comment type="line" format="doxygen" pos:line="381" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="382" pos:column="1">// Send message to parent, then window itself, to get size info.</comment>
<comment type="line" pos:line="383" pos:column="1">//</comment>
<function><type><name pos:line="384" pos:column="1">BOOL</name></type> <name><name pos:line="384" pos:column="6">CWinMgr</name><op:operator pos:line="384" pos:column="13">::</op:operator><name pos:line="384" pos:column="15">SendGetSizeInfo</name></name><parameter_list pos:line="384" pos:column="30">(<param><decl><type><name pos:line="384" pos:column="31">SIZEINFO</name><type:modifier pos:line="384" pos:column="39">&amp;</type:modifier></type> <name pos:line="384" pos:column="41">szi</name></decl></param>, <param><decl><type><name pos:line="384" pos:column="46">HWND</name></type> <name pos:line="384" pos:column="51">hWnd</name></decl></param>, <param><decl><type><name pos:line="384" pos:column="57">UINT</name></type> <name pos:line="384" pos:column="62">nID</name></decl></param>)</parameter_list>
<block pos:line="385" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="386" pos:column="9">NMWINMGR</name></type> <name pos:line="386" pos:column="18">nmw</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="387" pos:column="9">nmw</name><op:operator pos:line="387" pos:column="12">.</op:operator><name pos:line="387" pos:column="13">code</name></name> <op:operator pos:line="387" pos:column="18">=</op:operator> <name><name pos:line="387" pos:column="20">NMWINMGR</name><op:operator pos:line="387" pos:column="28">::</op:operator><name pos:line="387" pos:column="30">GET_SIZEINFO</name></name></expr>;</expr_stmt>	<comment type="line" pos:line="387" pos:column="49">// request size info</comment>
	<expr_stmt><expr><name><name pos:line="388" pos:column="9">nmw</name><op:operator pos:line="388" pos:column="12">.</op:operator><name pos:line="388" pos:column="13">idFrom</name></name> <op:operator pos:line="388" pos:column="20">=</op:operator> <name pos:line="388" pos:column="22">nID</name></expr>;</expr_stmt>							<comment type="line" pos:line="388" pos:column="81">// ID of child I'm computing</comment>
	<expr_stmt><expr><name><name pos:line="389" pos:column="9">nmw</name><op:operator pos:line="389" pos:column="12">.</op:operator><name pos:line="389" pos:column="13">sizeinfo</name></name> <op:operator pos:line="389" pos:column="22">=</op:operator> <name pos:line="389" pos:column="24">szi</name></expr>;</expr_stmt>						<comment type="line" pos:line="389" pos:column="73">// copy</comment>

	<if pos:line="391" pos:column="9">if <condition pos:line="391" pos:column="12">(<expr><op:operator pos:line="391" pos:column="13">!</op:operator><call><name pos:line="391" pos:column="14">SendMessage</name><argument_list pos:line="391" pos:column="25">(<argument><expr><name pos:line="391" pos:column="26">hWnd</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="32">WM_WINMGR</name></expr></argument>, <argument><expr><name pos:line="391" pos:column="43">nID</name></expr></argument>, <argument><expr><op:operator pos:line="391" pos:column="48">(</op:operator><name pos:line="391" pos:column="49">LPARAM</name><op:operator pos:line="391" pos:column="55">)</op:operator><op:operator pos:line="391" pos:column="56">&amp;</op:operator><name pos:line="391" pos:column="57">nmw</name></expr></argument>)</argument_list></call> <op:operator pos:line="391" pos:column="62">&amp;&amp;</op:operator> <op:operator pos:line="391" pos:column="65">!</op:operator><name><name pos:line="391" pos:column="66">nmw</name><op:operator pos:line="391" pos:column="69">.</op:operator><name pos:line="391" pos:column="70">processed</name></name></expr>)</condition><then pos:line="391" pos:column="80"> <block pos:line="391" pos:column="81">{
		<decl_stmt><decl><type><name pos:line="392" pos:column="17">HWND</name></type> <name pos:line="392" pos:column="22">hwndChild</name> <init pos:line="392" pos:column="32">= <expr><call><name><op:operator pos:line="392" pos:column="34">::</op:operator><name pos:line="392" pos:column="36">GetDlgItem</name></name><argument_list pos:line="392" pos:column="46">(<argument><expr><name pos:line="392" pos:column="47">hWnd</name></expr></argument>, <argument><expr><name pos:line="392" pos:column="53">nID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="393" pos:column="17">if <condition pos:line="393" pos:column="20">(<expr><op:operator pos:line="393" pos:column="21">!</op:operator><name pos:line="393" pos:column="22">hwndChild</name> <op:operator pos:line="393" pos:column="32">||</op:operator> <op:operator pos:line="393" pos:column="35">!</op:operator><call><name><op:operator pos:line="393" pos:column="36">::</op:operator><name pos:line="393" pos:column="38">SendMessage</name></name><argument_list pos:line="393" pos:column="49">(<argument><expr><name pos:line="393" pos:column="50">hwndChild</name></expr></argument>,<argument><expr><name pos:line="393" pos:column="60">WM_WINMGR</name></expr></argument>,<argument><expr><name pos:line="393" pos:column="70">nID</name></expr></argument>,<argument><expr><op:operator pos:line="393" pos:column="74">(</op:operator><name pos:line="393" pos:column="75">LPARAM</name><op:operator pos:line="393" pos:column="81">)</op:operator><op:operator pos:line="393" pos:column="82">&amp;</op:operator><name pos:line="393" pos:column="83">nmw</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="393" pos:column="88">
			<return pos:line="394" pos:column="25">return <expr><name pos:line="394" pos:column="32">FALSE</name></expr>;</return></then></if>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="396" pos:column="9">szi</name> <op:operator pos:line="396" pos:column="13">=</op:operator> <name><name pos:line="396" pos:column="15">nmw</name><op:operator pos:line="396" pos:column="18">.</op:operator><name pos:line="396" pos:column="19">sizeinfo</name></name></expr>;</expr_stmt> <comment type="line" pos:line="396" pos:column="29">// copy back to caller's struct</comment>
	<return pos:line="397" pos:column="9">return <expr><name pos:line="397" pos:column="16">TRUE</name></expr>;</return>
}</block></function>
		
<comment type="line" format="doxygen" pos:line="400" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="401" pos:column="1">// Get min/max info.</comment>
<comment type="line" pos:line="402" pos:column="1">//</comment>
<function><type><name pos:line="403" pos:column="1">void</name></type>
<name><name pos:line="404" pos:column="1">CWinMgr</name><op:operator pos:line="404" pos:column="8">::</op:operator><name pos:line="404" pos:column="10">GetMinMaxInfo</name></name><parameter_list pos:line="404" pos:column="23">(<param><decl><type><name pos:line="404" pos:column="24">HWND</name></type> <name pos:line="404" pos:column="29">hWnd</name></decl></param>, <param><decl><type><name pos:line="404" pos:column="35">MINMAXINFO</name><type:modifier pos:line="404" pos:column="45">*</type:modifier></type> <name pos:line="404" pos:column="47">lpMMI</name></decl></param>)</parameter_list>
<block pos:line="405" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="406" pos:column="9">SIZEINFO</name></type> <name pos:line="406" pos:column="18">szi</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="407" pos:column="9">GetMinMaxInfo</name><argument_list pos:line="407" pos:column="22">(<argument><expr><name pos:line="407" pos:column="23">hWnd</name></expr></argument>, <argument><expr><name pos:line="407" pos:column="29">szi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="407" pos:column="35">// call overloaded version</comment>
	<expr_stmt><expr><name><name pos:line="408" pos:column="9">lpMMI</name><op:operator pos:line="408" pos:column="14">-&gt;</op:operator><name pos:line="408" pos:column="16">ptMinTrackSize</name></name> <op:operator pos:line="408" pos:column="31">=</op:operator> <call><name pos:line="408" pos:column="33">SizeToPoint</name><argument_list pos:line="408" pos:column="44">(<argument><expr><name><name pos:line="408" pos:column="45">szi</name><op:operator pos:line="408" pos:column="48">.</op:operator><name pos:line="408" pos:column="49">szMin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="409" pos:column="9">lpMMI</name><op:operator pos:line="409" pos:column="14">-&gt;</op:operator><name pos:line="409" pos:column="16">ptMaxTrackSize</name></name> <op:operator pos:line="409" pos:column="31">=</op:operator> <call><name pos:line="409" pos:column="33">SizeToPoint</name><argument_list pos:line="409" pos:column="44">(<argument><expr><name><name pos:line="409" pos:column="45">szi</name><op:operator pos:line="409" pos:column="48">.</op:operator><name pos:line="409" pos:column="49">szMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" format="doxygen" pos:line="412" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="413" pos:column="1">// Get min/max info. </comment>
<comment type="line" pos:line="414" pos:column="1">//</comment>
<function><type><name pos:line="415" pos:column="1">void</name></type> <name><name pos:line="415" pos:column="6">CWinMgr</name><op:operator pos:line="415" pos:column="13">::</op:operator><name pos:line="415" pos:column="15">GetMinMaxInfo</name></name><parameter_list pos:line="415" pos:column="28">(<param><decl><type><name pos:line="415" pos:column="29">HWND</name></type> <name pos:line="415" pos:column="34">hWnd</name></decl></param>, <param><decl><type><name pos:line="415" pos:column="40">SIZEINFO</name><type:modifier pos:line="415" pos:column="48">&amp;</type:modifier></type> <name pos:line="415" pos:column="50">szi</name></decl></param>)</parameter_list>
<block pos:line="416" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="417" pos:column="9">OnGetSizeInfo</name><argument_list pos:line="417" pos:column="22">(<argument><expr><name pos:line="417" pos:column="23">szi</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="28">m_map</name></expr></argument>, <argument><expr><name pos:line="417" pos:column="35">hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:line="417" pos:column="43">// get size info</comment>
	<if pos:line="418" pos:column="9">if <condition pos:line="418" pos:column="12">(<expr><op:operator pos:line="418" pos:column="13">!</op:operator><name pos:line="418" pos:column="14">hWnd</name></expr>)</condition><then pos:line="418" pos:column="19">					 <comment type="line" pos:line="418" pos:column="58">// window not created ==&gt; done</comment>
		<return pos:line="419" pos:column="17">return;</return></then></if>

	<comment type="line" pos:line="421" pos:column="9">// Add extra space for frame/dialog screen junk.</comment>
	<decl_stmt><decl><type><name pos:line="422" pos:column="9">DWORD</name></type> <name pos:line="422" pos:column="15">dwStyle</name> <init pos:line="422" pos:column="23">= <expr><call><name pos:line="422" pos:column="25">GetStyle</name><argument_list pos:line="422" pos:column="33">(<argument><expr><name pos:line="422" pos:column="34">hWnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="423" pos:column="9">DWORD</name></type> <name pos:line="423" pos:column="15">dwExStyle</name> <init pos:line="423" pos:column="25">= <expr><call><name pos:line="423" pos:column="27">GetExStyle</name><argument_list pos:line="423" pos:column="37">(<argument><expr><name pos:line="423" pos:column="38">hWnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="424" pos:column="9">if <condition pos:line="424" pos:column="12">(<expr><name pos:line="424" pos:column="13">dwStyle</name> <op:operator pos:line="424" pos:column="21">&amp;</op:operator> <name pos:line="424" pos:column="23">WS_VISIBLE</name></expr>)</condition><then pos:line="424" pos:column="34"> <block pos:line="424" pos:column="35">{
		<decl_stmt><decl><type><name pos:line="425" pos:column="17">SIZE</name><type:modifier pos:line="425" pos:column="21">&amp;</type:modifier></type> <name pos:line="425" pos:column="23">szMin</name> <init pos:line="425" pos:column="29">= <expr><name><name pos:line="425" pos:column="31">szi</name><op:operator pos:line="425" pos:column="34">.</op:operator><name pos:line="425" pos:column="35">szMin</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="425" pos:column="42">// ref!</comment>
		<if pos:line="426" pos:column="17">if <condition pos:line="426" pos:column="20">(<expr><op:operator pos:line="426" pos:column="21">!</op:operator><op:operator pos:line="426" pos:column="22">(</op:operator><name pos:line="426" pos:column="23">dwStyle</name> <op:operator pos:line="426" pos:column="31">&amp;</op:operator> <name pos:line="426" pos:column="33">WS_CHILD</name><op:operator pos:line="426" pos:column="41">)</op:operator></expr>)</condition><then pos:line="426" pos:column="43"> <block pos:line="426" pos:column="44">{
			<if pos:line="427" pos:column="25">if <condition pos:line="427" pos:column="28">(<expr><name pos:line="427" pos:column="29">dwStyle</name> <op:operator pos:line="427" pos:column="37">&amp;</op:operator> <name pos:line="427" pos:column="39">WS_CAPTION</name></expr>)</condition><then pos:line="427" pos:column="50">
				<expr_stmt><expr><name><name pos:line="428" pos:column="33">szMin</name><op:operator pos:line="428" pos:column="38">.</op:operator><name pos:line="428" pos:column="39">cy</name></name> <op:operator pos:line="428" pos:column="42">+=</op:operator> <call><name pos:line="428" pos:column="45">GetSystemMetrics</name><argument_list pos:line="428" pos:column="61">(<argument><expr><name pos:line="428" pos:column="62">SM_CYCAPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="429" pos:column="25">if <condition pos:line="429" pos:column="28">(<expr><call><name><op:operator pos:line="429" pos:column="29">::</op:operator><name pos:line="429" pos:column="31">GetMenu</name></name><argument_list pos:line="429" pos:column="38">(<argument><expr><name pos:line="429" pos:column="39">hWnd</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="429" pos:column="45">
				<expr_stmt><expr><name><name pos:line="430" pos:column="33">szMin</name><op:operator pos:line="430" pos:column="38">.</op:operator><name pos:line="430" pos:column="39">cy</name></name> <op:operator pos:line="430" pos:column="42">+=</op:operator> <call><name pos:line="430" pos:column="45">GetSystemMetrics</name><argument_list pos:line="430" pos:column="61">(<argument><expr><name pos:line="430" pos:column="62">SM_CYMENU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<if pos:line="432" pos:column="17">if <condition pos:line="432" pos:column="20">(<expr><name pos:line="432" pos:column="21">dwStyle</name> <op:operator pos:line="432" pos:column="29">&amp;</op:operator> <name pos:line="432" pos:column="31">WS_THICKFRAME</name></expr>)</condition><then pos:line="432" pos:column="45"> <block pos:line="432" pos:column="46">{
			<expr_stmt><expr><name><name pos:line="433" pos:column="25">szMin</name><op:operator pos:line="433" pos:column="30">.</op:operator><name pos:line="433" pos:column="31">cx</name></name> <op:operator pos:line="433" pos:column="34">+=</op:operator> <lit:literal type="number" pos:line="433" pos:column="37">2</lit:literal><op:operator pos:line="433" pos:column="38">*</op:operator><call><name pos:line="433" pos:column="39">GetSystemMetrics</name><argument_list pos:line="433" pos:column="55">(<argument><expr><name pos:line="433" pos:column="56">SM_CXSIZEFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="434" pos:column="25">szMin</name><op:operator pos:line="434" pos:column="30">.</op:operator><name pos:line="434" pos:column="31">cy</name></name> <op:operator pos:line="434" pos:column="34">+=</op:operator> <lit:literal type="number" pos:line="434" pos:column="37">2</lit:literal><op:operator pos:line="434" pos:column="38">*</op:operator><call><name pos:line="434" pos:column="39">GetSystemMetrics</name><argument_list pos:line="434" pos:column="55">(<argument><expr><name pos:line="434" pos:column="56">SM_CYSIZEFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="435" pos:column="19">else <if pos:line="435" pos:column="24">if <condition pos:line="435" pos:column="27">(<expr><name pos:line="435" pos:column="28">dwStyle</name> <op:operator pos:line="435" pos:column="36">&amp;</op:operator> <name pos:line="435" pos:column="38">WS_BORDER</name></expr>)</condition><then pos:line="435" pos:column="48"> <block pos:line="435" pos:column="49">{
			<expr_stmt><expr><name><name pos:line="436" pos:column="25">szMin</name><op:operator pos:line="436" pos:column="30">.</op:operator><name pos:line="436" pos:column="31">cx</name></name> <op:operator pos:line="436" pos:column="34">+=</op:operator> <lit:literal type="number" pos:line="436" pos:column="37">2</lit:literal><op:operator pos:line="436" pos:column="38">*</op:operator><call><name pos:line="436" pos:column="39">GetSystemMetrics</name><argument_list pos:line="436" pos:column="55">(<argument><expr><name pos:line="436" pos:column="56">SM_CXBORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="437" pos:column="25">szMin</name><op:operator pos:line="437" pos:column="30">.</op:operator><name pos:line="437" pos:column="31">cy</name></name> <op:operator pos:line="437" pos:column="34">+=</op:operator> <lit:literal type="number" pos:line="437" pos:column="37">2</lit:literal><op:operator pos:line="437" pos:column="38">*</op:operator><call><name pos:line="437" pos:column="39">GetSystemMetrics</name><argument_list pos:line="437" pos:column="55">(<argument><expr><name pos:line="437" pos:column="56">SM_CYBORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></else></if>
		<if pos:line="439" pos:column="17">if <condition pos:line="439" pos:column="20">(<expr><name pos:line="439" pos:column="21">dwExStyle</name> <op:operator pos:line="439" pos:column="31">&amp;</op:operator> <name pos:line="439" pos:column="33">WS_EX_CLIENTEDGE</name></expr>)</condition><then pos:line="439" pos:column="50"> <block pos:line="439" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="440" pos:column="25">szMin</name><op:operator pos:line="440" pos:column="30">.</op:operator><name pos:line="440" pos:column="31">cx</name></name> <op:operator pos:line="440" pos:column="34">+=</op:operator> <lit:literal type="number" pos:line="440" pos:column="37">2</lit:literal><op:operator pos:line="440" pos:column="38">*</op:operator><call><name pos:line="440" pos:column="39">GetSystemMetrics</name><argument_list pos:line="440" pos:column="55">(<argument><expr><name pos:line="440" pos:column="56">SM_CXEDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="441" pos:column="25">szMin</name><op:operator pos:line="441" pos:column="30">.</op:operator><name pos:line="441" pos:column="31">cy</name></name> <op:operator pos:line="441" pos:column="34">+=</op:operator> <lit:literal type="number" pos:line="441" pos:column="37">2</lit:literal><op:operator pos:line="441" pos:column="38">*</op:operator><call><name pos:line="441" pos:column="39">GetSystemMetrics</name><argument_list pos:line="441" pos:column="55">(<argument><expr><name pos:line="441" pos:column="56">SM_CYEDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<comment type="line" format="doxygen" pos:line="446" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="447" pos:column="1">// Move desired rectangle by a given vector amount.</comment>
<comment type="line" pos:line="448" pos:column="1">// Call this when a sizer bar tells you it has moved.</comment>
<comment type="line" pos:line="449" pos:column="1">//</comment>
<function><type><name pos:line="450" pos:column="1">void</name></type> <name><name pos:line="450" pos:column="6">CWinMgr</name><op:operator pos:line="450" pos:column="13">::</op:operator><name pos:line="450" pos:column="15">MoveRect</name></name><parameter_list pos:line="450" pos:column="23">(<param><decl><type><name pos:line="450" pos:column="24">WINRECT</name><type:modifier pos:line="450" pos:column="31">*</type:modifier></type> <name pos:line="450" pos:column="33">pwrcMove</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="43">POINT</name></type> <name pos:line="450" pos:column="49">ptMove</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="57">HWND</name></type> <name pos:line="450" pos:column="62">pParentWnd</name></decl></param>)</parameter_list>
<block pos:line="451" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="452" pos:column="9">assert</name><argument_list pos:line="452" pos:column="15">(<argument><expr><name pos:line="452" pos:column="16">pwrcMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="453" pos:column="9">WINRECT</name><type:modifier pos:line="453" pos:column="16">*</type:modifier></type> <name pos:line="453" pos:column="18">prev</name> <init pos:line="453" pos:column="23">= <expr><call><name><name pos:line="453" pos:column="25">pwrcMove</name><op:operator pos:line="453" pos:column="33">-&gt;</op:operator><name pos:line="453" pos:column="35">Prev</name></name><argument_list pos:line="453" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="454" pos:column="9">assert</name><argument_list pos:line="454" pos:column="15">(<argument><expr><name pos:line="454" pos:column="16">prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="455" pos:column="9">WINRECT</name><type:modifier pos:line="455" pos:column="16">*</type:modifier></type> <name pos:line="455" pos:column="18">next</name> <init pos:line="455" pos:column="23">= <expr><call><name><name pos:line="455" pos:column="25">pwrcMove</name><op:operator pos:line="455" pos:column="33">-&gt;</op:operator><name pos:line="455" pos:column="35">Next</name></name><argument_list pos:line="455" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="456" pos:column="9">assert</name><argument_list pos:line="456" pos:column="15">(<argument><expr><name pos:line="456" pos:column="16">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="458" pos:column="9">BOOL</name></type> <name pos:line="458" pos:column="14">bIsRow</name> <init pos:line="458" pos:column="21">= <expr><call><name><name pos:line="458" pos:column="23">pwrcMove</name><op:operator pos:line="458" pos:column="31">-&gt;</op:operator><name pos:line="458" pos:column="33">Parent</name></name><argument_list pos:line="458" pos:column="39">()</argument_list></call><op:operator pos:line="458" pos:column="41">-&gt;</op:operator><call><name pos:line="458" pos:column="43">IsRowGroup</name><argument_list pos:line="458" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="460" pos:column="9">RECT</name><type:modifier pos:line="460" pos:column="13">&amp;</type:modifier></type> <name pos:line="460" pos:column="15">rcNext</name> <init pos:line="460" pos:column="22">= <expr><call><name><name pos:line="460" pos:column="24">next</name><op:operator pos:line="460" pos:column="28">-&gt;</op:operator><name pos:line="460" pos:column="30">GetRect</name></name><argument_list pos:line="460" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="461" pos:column="9">RECT</name><type:modifier pos:line="461" pos:column="13">&amp;</type:modifier></type> <name pos:line="461" pos:column="15">rcPrev</name> <init pos:line="461" pos:column="22">= <expr><call><name><name pos:line="461" pos:column="24">prev</name><op:operator pos:line="461" pos:column="28">-&gt;</op:operator><name pos:line="461" pos:column="30">GetRect</name></name><argument_list pos:line="461" pos:column="37">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="462" pos:column="9">if <condition pos:line="462" pos:column="12">(<expr><name pos:line="462" pos:column="13">bIsRow</name></expr>)</condition><then pos:line="462" pos:column="20"> <block pos:line="462" pos:column="21">{
		<comment type="line" pos:line="463" pos:column="17">// a row can only be moved up or down</comment>
		<expr_stmt><expr><name><name pos:line="464" pos:column="17">ptMove</name><op:operator pos:line="464" pos:column="23">.</op:operator><name pos:line="464" pos:column="24">x</name></name> <op:operator pos:line="464" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="464" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="465" pos:column="17">rcPrev</name><op:operator pos:line="465" pos:column="23">.</op:operator><name pos:line="465" pos:column="24">bottom</name></name> <op:operator pos:line="465" pos:column="31">+=</op:operator> <name><name pos:line="465" pos:column="34">ptMove</name><op:operator pos:line="465" pos:column="40">.</op:operator><name pos:line="465" pos:column="41">y</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="466" pos:column="17">rcNext</name><op:operator pos:line="466" pos:column="23">.</op:operator><name pos:line="466" pos:column="24">top</name></name> <op:operator pos:line="466" pos:column="28">+=</op:operator> <name><name pos:line="466" pos:column="31">ptMove</name><op:operator pos:line="466" pos:column="37">.</op:operator><name pos:line="466" pos:column="38">y</name></name></expr>;</expr_stmt>
	}</block></then> <else pos:line="467" pos:column="11">else <block pos:line="467" pos:column="16">{
		<comment type="line" pos:line="468" pos:column="17">// a column can only be moved left or right</comment>
		<expr_stmt><expr><name><name pos:line="469" pos:column="17">ptMove</name><op:operator pos:line="469" pos:column="23">.</op:operator><name pos:line="469" pos:column="24">y</name></name> <op:operator pos:line="469" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="469" pos:column="28">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="470" pos:column="17">rcPrev</name><op:operator pos:line="470" pos:column="23">.</op:operator><name pos:line="470" pos:column="24">right</name></name> <op:operator pos:line="470" pos:column="30">+=</op:operator> <name><name pos:line="470" pos:column="33">ptMove</name><op:operator pos:line="470" pos:column="39">.</op:operator><name pos:line="470" pos:column="40">x</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="471" pos:column="17">rcNext</name><op:operator pos:line="471" pos:column="23">.</op:operator><name pos:line="471" pos:column="24">left</name></name> <op:operator pos:line="471" pos:column="29">+=</op:operator> <name><name pos:line="471" pos:column="32">ptMove</name><op:operator pos:line="471" pos:column="38">.</op:operator><name pos:line="471" pos:column="39">x</name></name></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name pos:line="473" pos:column="9">OffsetRect</name><argument_list pos:line="473" pos:column="19">(<argument><expr><call><name><name pos:line="473" pos:column="20">pwrcMove</name><op:operator pos:line="473" pos:column="28">-&gt;</op:operator><name pos:line="473" pos:column="30">GetRect</name></name><argument_list pos:line="473" pos:column="37">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="473" pos:column="41">ptMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="474" pos:column="9">if <condition pos:line="474" pos:column="12">(<expr><call><name><name pos:line="474" pos:column="13">prev</name><op:operator pos:line="474" pos:column="17">-&gt;</op:operator><name pos:line="474" pos:column="19">IsGroup</name></name><argument_list pos:line="474" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="474" pos:column="29">
		<expr_stmt><expr><call><name pos:line="475" pos:column="17">CalcGroup</name><argument_list pos:line="475" pos:column="26">(<argument><expr><name pos:line="475" pos:column="27">prev</name></expr></argument>, <argument><expr><name pos:line="475" pos:column="33">pParentWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="476" pos:column="9">if <condition pos:line="476" pos:column="12">(<expr><call><name><name pos:line="476" pos:column="13">next</name><op:operator pos:line="476" pos:column="17">-&gt;</op:operator><name pos:line="476" pos:column="19">IsGroup</name></name><argument_list pos:line="476" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="476" pos:column="29">
		<expr_stmt><expr><call><name pos:line="477" pos:column="17">CalcGroup</name><argument_list pos:line="477" pos:column="26">(<argument><expr><name pos:line="477" pos:column="27">next</name></expr></argument>, <argument><expr><name pos:line="477" pos:column="33">pParentWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<comment type="line" pos:line="480" pos:column="1">// Theo - Removed Tracing</comment>
</unit>
