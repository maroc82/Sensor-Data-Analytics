<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\Buffer.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"Buffer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"Parameters.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Notepad_plus.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"EncodingMapper.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><name pos:line="37" pos:column="1">FileManager</name> <type:modifier pos:line="37" pos:column="13">*</type:modifier></type> <name><name pos:line="37" pos:column="15">FileManager</name><op:operator pos:line="37" pos:column="26">::</op:operator><name pos:line="37" pos:column="28">_pSelf</name></name> <init pos:line="37" pos:column="35">= <expr><op:operator pos:line="37" pos:column="37">new</op:operator> <call><name pos:line="37" pos:column="41">FileManager</name><argument_list pos:line="37" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="39" pos:column="1">const</specifier> <name pos:line="39" pos:column="7">int</name></type> <name pos:line="39" pos:column="11">blockSize</name> <init pos:line="39" pos:column="21">= <expr><lit:literal type="number" pos:line="39" pos:column="23">128</lit:literal> <op:operator pos:line="39" pos:column="27">*</op:operator> <lit:literal type="number" pos:line="39" pos:column="29">1024</lit:literal> <op:operator pos:line="39" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="39" pos:column="36">4</lit:literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="41" pos:column="1">// Ordre important!! Ne le changes pas!</comment>
<comment type="line" pos:line="42" pos:column="1">//SC_EOL_CRLF (0), SC_EOL_CR (1), or SC_EOL_LF (2).</comment>

<decl_stmt><decl><type><specifier pos:line="44" pos:column="1">const</specifier> <name pos:line="44" pos:column="7">int</name></type> <name pos:line="44" pos:column="11">CR</name> <init pos:line="44" pos:column="14">= <expr><lit:literal type="number" pos:line="44" pos:column="16">0x0D</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="45" pos:column="1">const</specifier> <name pos:line="45" pos:column="7">int</name></type> <name pos:line="45" pos:column="11">LF</name> <init pos:line="45" pos:column="14">= <expr><lit:literal type="number" pos:line="45" pos:column="16">0x0A</lit:literal></expr></init></decl>;</decl_stmt>

<constructor><name><name pos:line="47" pos:column="1">Buffer</name><op:operator pos:line="47" pos:column="7">::</op:operator><name pos:line="47" pos:column="9">Buffer</name></name><parameter_list pos:line="47" pos:column="15">(<param><decl><type><name pos:line="47" pos:column="16">FileManager</name> <type:modifier pos:line="47" pos:column="28">*</type:modifier></type> <name pos:line="47" pos:column="30">pManager</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="40">BufferID</name></type> <name pos:line="47" pos:column="49">id</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="53">Document</name></type> <name pos:line="47" pos:column="62">doc</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="67">DocFileStatus</name></type> <name pos:line="47" pos:column="81">type</name></decl></param>, <param><decl><type><specifier pos:line="47" pos:column="87">const</specifier> <name pos:line="47" pos:column="93">TCHAR</name> <type:modifier pos:line="47" pos:column="99">*</type:modifier></type><name pos:line="47" pos:column="100">fileName</name></decl></param>)</parameter_list>	<comment type="line" pos:line="47" pos:column="113">//type must be either DOC_REGULAR or DOC_UNNAMED</comment>
	<member_list pos:line="48" pos:column="9">: <call><name pos:line="48" pos:column="11">_pManager</name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">pManager</name></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="30">,</op:operator> <call><name pos:line="48" pos:column="32">_id</name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">id</name></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="39">,</op:operator> <call><name pos:line="48" pos:column="41">_isDirty</name><argument_list pos:line="48" pos:column="49">(<argument><expr><lit:literal type="boolean" pos:line="48" pos:column="50">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="56">,</op:operator> <call><name pos:line="48" pos:column="58">_doc</name><argument_list pos:line="48" pos:column="62">(<argument><expr><name pos:line="48" pos:column="63">doc</name></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="67">,</op:operator> <call><name pos:line="48" pos:column="69">_isFileReadOnly</name><argument_list pos:line="48" pos:column="84">(<argument><expr><lit:literal type="boolean" pos:line="48" pos:column="85">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="91">,</op:operator> <call><name pos:line="48" pos:column="93">_isUserReadOnly</name><argument_list pos:line="48" pos:column="108">(<argument><expr><lit:literal type="boolean" pos:line="48" pos:column="109">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="115">,</op:operator> <call><name pos:line="48" pos:column="117">_recentTag</name><argument_list pos:line="48" pos:column="127">(<argument><expr><op:operator pos:line="48" pos:column="128">-</op:operator><lit:literal type="number" pos:line="48" pos:column="129">1</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="131">,</op:operator> <call><name pos:line="48" pos:column="133">_references</name><argument_list pos:line="48" pos:column="144">(<argument><expr><lit:literal type="number" pos:line="48" pos:column="145">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="48" pos:column="147">,</op:operator>
	<call><name pos:line="49" pos:column="9">_canNotify</name><argument_list pos:line="49" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="49" pos:column="20">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="26">,</op:operator> <call><name pos:line="49" pos:column="28">_timeStamp</name><argument_list pos:line="49" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="49" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="41">,</op:operator> <call><name pos:line="49" pos:column="43">_needReloading</name><argument_list pos:line="49" pos:column="57">(<argument><expr><lit:literal type="boolean" pos:line="49" pos:column="58">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="49" pos:column="64">,</op:operator> <call><name pos:line="49" pos:column="66">_encoding</name><argument_list pos:line="49" pos:column="75">(<argument><expr><op:operator pos:line="49" pos:column="76">-</op:operator><lit:literal type="number" pos:line="49" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call>
</member_list><block pos:line="50" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">NppParameters</name> <type:modifier pos:line="51" pos:column="23">*</type:modifier></type><name pos:line="51" pos:column="24">pNppParamInst</name> <init pos:line="51" pos:column="38">= <expr><call><name><name pos:line="51" pos:column="40">NppParameters</name><op:operator pos:line="51" pos:column="53">::</op:operator><name pos:line="51" pos:column="55">getInstance</name></name><argument_list pos:line="51" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="52" pos:column="9">const</specifier> <name pos:line="52" pos:column="15">NewDocDefaultSettings</name> <type:modifier pos:line="52" pos:column="37">&amp;</type:modifier></type> <name pos:line="52" pos:column="39">ndds</name> <init pos:line="52" pos:column="44">= <expr><op:operator pos:line="52" pos:column="46">(</op:operator><call><name><name pos:line="52" pos:column="47">pNppParamInst</name><op:operator pos:line="52" pos:column="60">-&gt;</op:operator><name pos:line="52" pos:column="62">getNppGUI</name></name><argument_list pos:line="52" pos:column="71">()</argument_list></call><op:operator pos:line="52" pos:column="73">)</op:operator><op:operator pos:line="52" pos:column="74">.</op:operator><call><name pos:line="52" pos:column="75">getNewDocDefaultSettings</name><argument_list pos:line="52" pos:column="99">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="53" pos:column="9">_format</name> <op:operator pos:line="53" pos:column="17">=</op:operator> <name><name pos:line="53" pos:column="19">ndds</name><op:operator pos:line="53" pos:column="23">.</op:operator><name pos:line="53" pos:column="24">_format</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="54" pos:column="9">_unicodeMode</name> <op:operator pos:line="54" pos:column="22">=</op:operator> <name><name pos:line="54" pos:column="24">ndds</name><op:operator pos:line="54" pos:column="28">.</op:operator><name pos:line="54" pos:column="29">_encoding</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="55" pos:column="9">_encoding</name> <op:operator pos:line="55" pos:column="19">=</op:operator> <name><name pos:line="55" pos:column="21">ndds</name><op:operator pos:line="55" pos:column="25">.</op:operator><name pos:line="55" pos:column="26">_codepage</name></name></expr>;</expr_stmt>
	<if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">_encoding</name> <op:operator pos:line="56" pos:column="23">!=</op:operator> <op:operator pos:line="56" pos:column="26">-</op:operator><lit:literal type="number" pos:line="56" pos:column="27">1</lit:literal></expr>)</condition><then pos:line="56" pos:column="29">
		<expr_stmt><expr><name pos:line="57" pos:column="17">_unicodeMode</name> <op:operator pos:line="57" pos:column="30">=</op:operator> <name pos:line="57" pos:column="32">uniCookie</name></expr>;</expr_stmt></then></if>

	<expr_stmt><expr><name pos:line="59" pos:column="9">_userLangExt</name> <op:operator pos:line="59" pos:column="22">=</op:operator> <call><name pos:line="59" pos:column="24">TEXT</name><argument_list pos:line="59" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="59" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="60" pos:column="9">_fullPathName</name> <op:operator pos:line="60" pos:column="23">=</op:operator> <call><name pos:line="60" pos:column="25">TEXT</name><argument_list pos:line="60" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="60" pos:column="30">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="61" pos:column="9">_fileName</name> <op:operator pos:line="61" pos:column="19">=</op:operator> <name pos:line="61" pos:column="21">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="62" pos:column="9">setFileName</name><argument_list pos:line="62" pos:column="20">(<argument><expr><name pos:line="62" pos:column="21">fileName</name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="31">ndds</name><op:operator pos:line="62" pos:column="35">.</op:operator><name pos:line="62" pos:column="36">_lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="63" pos:column="9">updateTimeStamp</name><argument_list pos:line="63" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="64" pos:column="9">checkFileState</name><argument_list pos:line="64" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="65" pos:column="9">_currentStatus</name> <op:operator pos:line="65" pos:column="24">=</op:operator> <name pos:line="65" pos:column="26">type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="66" pos:column="9">_isDirty</name> <op:operator pos:line="66" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="66" pos:column="20">false</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="68" pos:column="9">_needLexer</name> <op:operator pos:line="68" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="68" pos:column="22">false</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="68" pos:column="33">//new buffers do not need lexing, Scintilla takes care of that</comment>
	<expr_stmt><expr><name pos:line="69" pos:column="9">_canNotify</name> <op:operator pos:line="69" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="69" pos:column="22">true</lit:literal></expr>;</expr_stmt>
}</block></constructor>


<function><type><name pos:line="73" pos:column="1">void</name></type> <name><name pos:line="73" pos:column="6">Buffer</name><op:operator pos:line="73" pos:column="12">::</op:operator><name pos:line="73" pos:column="14">setLangType</name></name><parameter_list pos:line="73" pos:column="25">(<param><decl><type><name pos:line="73" pos:column="26">LangType</name></type> <name pos:line="73" pos:column="35">lang</name></decl></param>, <param><decl><type><specifier pos:line="73" pos:column="41">const</specifier> <name pos:line="73" pos:column="47">TCHAR</name> <type:modifier pos:line="73" pos:column="53">*</type:modifier></type> <name pos:line="73" pos:column="55">userLangName</name></decl></param>)</parameter_list>
<block pos:line="74" pos:column="1">{
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">lang</name> <op:operator pos:line="75" pos:column="18">==</op:operator> <name pos:line="75" pos:column="21">_lang</name> <op:operator pos:line="75" pos:column="27">&amp;&amp;</op:operator> <name pos:line="75" pos:column="30">lang</name> <op:operator pos:line="75" pos:column="35">!=</op:operator> <name pos:line="75" pos:column="38">L_USER</name></expr>)</condition><then pos:line="75" pos:column="45">
		<return pos:line="76" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><name pos:line="77" pos:column="9">_lang</name> <op:operator pos:line="77" pos:column="15">=</op:operator> <name pos:line="77" pos:column="17">lang</name></expr>;</expr_stmt>
	<if pos:line="78" pos:column="9">if <condition pos:line="78" pos:column="12">(<expr><name pos:line="78" pos:column="13">_lang</name> <op:operator pos:line="78" pos:column="19">==</op:operator> <name pos:line="78" pos:column="22">L_USER</name></expr>)</condition><then pos:line="78" pos:column="29"> 
	<block pos:line="79" pos:column="9">{
		<expr_stmt><expr><name pos:line="80" pos:column="17">_userLangExt</name> <op:operator pos:line="80" pos:column="30">=</op:operator> <name pos:line="80" pos:column="32">userLangName</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="82" pos:column="9">_needLexer</name> <op:operator pos:line="82" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="82" pos:column="22">true</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="82" pos:column="33">//change of lang means lexern needs updating</comment>
	<expr_stmt><expr><call><name pos:line="83" pos:column="9">doNotify</name><argument_list pos:line="83" pos:column="17">(<argument><expr><name pos:line="83" pos:column="18">BufferChangeLanguage</name><op:operator pos:line="83" pos:column="38">|</op:operator><name pos:line="83" pos:column="39">BufferChangeLexing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name pos:line="86" pos:column="1">long</name></type> <name><name pos:line="86" pos:column="6">Buffer</name><op:operator pos:line="86" pos:column="12">::</op:operator><name pos:line="86" pos:column="14">_recentTagCtr</name></name> <init pos:line="86" pos:column="28">= <expr><lit:literal type="number" pos:line="86" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="88" pos:column="1">void</name></type> <name><name pos:line="88" pos:column="6">Buffer</name><op:operator pos:line="88" pos:column="12">::</op:operator><name pos:line="88" pos:column="14">updateTimeStamp</name></name><parameter_list pos:line="88" pos:column="29">()</parameter_list> <block pos:line="88" pos:column="32">{
	<decl_stmt><decl><type pos:line="89" pos:column="9">struct <name pos:line="89" pos:column="16">_stat</name></type> <name pos:line="89" pos:column="22">buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="90" pos:column="9">time_t</name></type> <name pos:line="90" pos:column="16">timeStamp</name> <init pos:line="90" pos:column="26">= <expr><op:operator pos:line="90" pos:column="28">(</op:operator><call><name pos:line="90" pos:column="29">generic_stat</name><argument_list pos:line="90" pos:column="41">(<argument><expr><call><name><name pos:line="90" pos:column="42">_fullPathName</name><op:operator pos:line="90" pos:column="55">.</op:operator><name pos:line="90" pos:column="56">c_str</name></name><argument_list pos:line="90" pos:column="61">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="90" pos:column="65">&amp;</op:operator><name pos:line="90" pos:column="66">buf</name></expr></argument>)</argument_list></call><op:operator pos:line="90" pos:column="70">==</op:operator><lit:literal type="number" pos:line="90" pos:column="72">0</lit:literal><op:operator pos:line="90" pos:column="73">)</op:operator><op:operator pos:line="90" pos:column="74">?</op:operator><name><name pos:line="90" pos:column="75">buf</name><op:operator pos:line="90" pos:column="78">.</op:operator><name pos:line="90" pos:column="79">st_mtime</name></name><op:operator pos:line="90" pos:column="87">:</op:operator><lit:literal type="number" pos:line="90" pos:column="88">0</lit:literal></expr></init></decl>;</decl_stmt>

	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">timeStamp</name> <op:operator pos:line="92" pos:column="23">!=</op:operator> <name pos:line="92" pos:column="26">_timeStamp</name></expr>)</condition><then pos:line="92" pos:column="37"> <block pos:line="92" pos:column="38">{
		<expr_stmt><expr><name pos:line="93" pos:column="17">_timeStamp</name> <op:operator pos:line="93" pos:column="28">=</op:operator> <name pos:line="93" pos:column="30">timeStamp</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="94" pos:column="17">doNotify</name><argument_list pos:line="94" pos:column="25">(<argument><expr><name pos:line="94" pos:column="26">BufferChangeTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function><empty_stmt pos:line="96" pos:column="2">;</empty_stmt>

<comment type="line" pos:line="98" pos:column="1">// Set full path file name in buffer object,</comment>
<comment type="line" pos:line="99" pos:column="1">// and determinate its language by its extension.</comment>
<comment type="line" pos:line="100" pos:column="1">// If the ext is not in the list, the defaultLang passed as argument will be set.</comment>
<function><type><name pos:line="101" pos:column="1">void</name></type> <name><name pos:line="101" pos:column="6">Buffer</name><op:operator pos:line="101" pos:column="12">::</op:operator><name pos:line="101" pos:column="14">setFileName</name></name><parameter_list pos:line="101" pos:column="25">(<param><decl><type><specifier pos:line="101" pos:column="26">const</specifier> <name pos:line="101" pos:column="32">TCHAR</name> <type:modifier pos:line="101" pos:column="38">*</type:modifier></type><name pos:line="101" pos:column="39">fn</name></decl></param>, <param><decl><type><name pos:line="101" pos:column="43">LangType</name></type> <name pos:line="101" pos:column="52">defaultLang</name></decl></param>)</parameter_list> 
<block pos:line="102" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="103" pos:column="9">NppParameters</name> <type:modifier pos:line="103" pos:column="23">*</type:modifier></type><name pos:line="103" pos:column="24">pNppParamInst</name> <init pos:line="103" pos:column="38">= <expr><call><name><name pos:line="103" pos:column="40">NppParameters</name><op:operator pos:line="103" pos:column="53">::</op:operator><name pos:line="103" pos:column="55">getInstance</name></name><argument_list pos:line="103" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">_fullPathName</name> <op:operator pos:line="104" pos:column="27">==</op:operator> <name pos:line="104" pos:column="30">fn</name></expr>)</condition><then pos:line="104" pos:column="33"> 
	<block pos:line="105" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="106" pos:column="17">updateTimeStamp</name><argument_list pos:line="106" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="107" pos:column="17">doNotify</name><argument_list pos:line="107" pos:column="25">(<argument><expr><name pos:line="107" pos:column="26">BufferChangeTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="108" pos:column="17">return;</return>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="110" pos:column="9">_fullPathName</name> <op:operator pos:line="110" pos:column="23">=</op:operator> <name pos:line="110" pos:column="25">fn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="111" pos:column="9">_fileName</name> <op:operator pos:line="111" pos:column="19">=</op:operator> <call><name pos:line="111" pos:column="21">PathFindFileName</name><argument_list pos:line="111" pos:column="37">(<argument><expr><call><name><name pos:line="111" pos:column="38">_fullPathName</name><op:operator pos:line="111" pos:column="51">.</op:operator><name pos:line="111" pos:column="52">c_str</name></name><argument_list pos:line="111" pos:column="57">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="113" pos:column="9">// for _lang</comment>
	<decl_stmt><decl><type><name pos:line="114" pos:column="9">LangType</name></type> <name pos:line="114" pos:column="18">newLang</name> <init pos:line="114" pos:column="26">= <expr><name pos:line="114" pos:column="28">defaultLang</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="115" pos:column="9">TCHAR</name> <type:modifier pos:line="115" pos:column="15">*</type:modifier></type><name pos:line="115" pos:column="16">ext</name> <init pos:line="115" pos:column="20">= <expr><call><name pos:line="115" pos:column="22">PathFindExtension</name><argument_list pos:line="115" pos:column="39">(<argument><expr><call><name><name pos:line="115" pos:column="40">_fullPathName</name><op:operator pos:line="115" pos:column="53">.</op:operator><name pos:line="115" pos:column="54">c_str</name></name><argument_list pos:line="115" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><op:operator pos:line="116" pos:column="13">*</op:operator><name pos:line="116" pos:column="14">ext</name> <op:operator pos:line="116" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="21">'.'</lit:literal></expr>)</condition><then pos:line="116" pos:column="25"> <block pos:line="116" pos:column="26">{	<comment type="line" pos:line="116" pos:column="33">//extension found</comment>
		<expr_stmt><expr><name pos:line="117" pos:column="17">ext</name> <op:operator pos:line="117" pos:column="21">+=</op:operator> <lit:literal type="number" pos:line="117" pos:column="24">1</lit:literal></expr>;</expr_stmt>

		<comment type="line" pos:line="119" pos:column="17">// Define User Lang firstly</comment>
		<decl_stmt><decl><type><specifier pos:line="120" pos:column="17">const</specifier> <name pos:line="120" pos:column="23">TCHAR</name> <type:modifier pos:line="120" pos:column="29">*</type:modifier></type><name pos:line="120" pos:column="30">langName</name> <init pos:line="120" pos:column="39">= <expr><call><name><name pos:line="120" pos:column="41">pNppParamInst</name><op:operator pos:line="120" pos:column="54">-&gt;</op:operator><name pos:line="120" pos:column="56">getUserDefinedLangNameFromExt</name></name><argument_list pos:line="120" pos:column="85">(<argument><expr><name pos:line="120" pos:column="86">ext</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="91">_fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">langName</name></expr>)</condition><then pos:line="121" pos:column="30">
		<block pos:line="122" pos:column="17">{
			<expr_stmt><expr><name pos:line="123" pos:column="25">newLang</name> <op:operator pos:line="123" pos:column="33">=</op:operator> <name pos:line="123" pos:column="35">L_USER</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="124" pos:column="25">_userLangExt</name> <op:operator pos:line="124" pos:column="38">=</op:operator> <name pos:line="124" pos:column="40">langName</name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="126" pos:column="17">else <comment type="line" pos:line="126" pos:column="22">// if it's not user lang, then check if it's supported lang</comment>
		<block pos:line="127" pos:column="17">{
			<expr_stmt><expr><name pos:line="128" pos:column="25">_userLangExt</name> <op:operator pos:line="128" pos:column="38">=</op:operator> <call><name pos:line="128" pos:column="40">TEXT</name><argument_list pos:line="128" pos:column="44">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="45">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="129" pos:column="25">newLang</name> <op:operator pos:line="129" pos:column="33">=</op:operator> <call><name><name pos:line="129" pos:column="35">pNppParamInst</name><op:operator pos:line="129" pos:column="48">-&gt;</op:operator><name pos:line="129" pos:column="50">getLangFromExt</name></name><argument_list pos:line="129" pos:column="64">(<argument><expr><name pos:line="129" pos:column="65">ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>	
	}</block></then></if>

	<if pos:line="133" pos:column="9">if <condition pos:line="133" pos:column="12">(<expr><name pos:line="133" pos:column="13">newLang</name> <op:operator pos:line="133" pos:column="21">==</op:operator> <name pos:line="133" pos:column="24">defaultLang</name> <op:operator pos:line="133" pos:column="36">||</op:operator> <name pos:line="133" pos:column="39">newLang</name> <op:operator pos:line="133" pos:column="47">==</op:operator> <name pos:line="133" pos:column="50">L_TEXT</name></expr>)</condition><then pos:line="133" pos:column="57">	<comment type="line" pos:line="133" pos:column="65">//language can probably be refined</comment>
	<block pos:line="134" pos:column="9">{
		<if pos:line="135" pos:column="17">if <condition pos:line="135" pos:column="20">(<expr><op:operator pos:line="135" pos:column="21">(</op:operator><op:operator pos:line="135" pos:column="22">!</op:operator><call><name pos:line="135" pos:column="23">generic_stricmp</name><argument_list pos:line="135" pos:column="38">(<argument><expr><name pos:line="135" pos:column="39">_fileName</name></expr></argument>, <argument><expr><call><name pos:line="135" pos:column="50">TEXT</name><argument_list pos:line="135" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="55">"makefile"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="67">)</op:operator> <op:operator pos:line="135" pos:column="69">||</op:operator> <op:operator pos:line="135" pos:column="72">(</op:operator><op:operator pos:line="135" pos:column="73">!</op:operator><call><name pos:line="135" pos:column="74">generic_stricmp</name><argument_list pos:line="135" pos:column="89">(<argument><expr><name pos:line="135" pos:column="90">_fileName</name></expr></argument>, <argument><expr><call><name pos:line="135" pos:column="101">TEXT</name><argument_list pos:line="135" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="135" pos:column="106">"GNUmakefile"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="135" pos:column="121">)</op:operator></expr>)</condition><then pos:line="135" pos:column="123">
			<expr_stmt><expr><name pos:line="136" pos:column="25">newLang</name> <op:operator pos:line="136" pos:column="33">=</op:operator> <name pos:line="136" pos:column="35">L_MAKEFILE</name></expr>;</expr_stmt></then>
		<else pos:line="137" pos:column="17">else <if pos:line="137" pos:column="22">if <condition pos:line="137" pos:column="25">(<expr><op:operator pos:line="137" pos:column="26">!</op:operator><call><name pos:line="137" pos:column="27">generic_stricmp</name><argument_list pos:line="137" pos:column="42">(<argument><expr><name pos:line="137" pos:column="43">_fileName</name></expr></argument>, <argument><expr><call><name pos:line="137" pos:column="54">TEXT</name><argument_list pos:line="137" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="137" pos:column="59">"CmakeLists.txt"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="137" pos:column="78">
			<expr_stmt><expr><name pos:line="138" pos:column="25">newLang</name> <op:operator pos:line="138" pos:column="33">=</op:operator> <name pos:line="138" pos:column="35">L_CMAKE</name></expr>;</expr_stmt></then>
		<else pos:line="139" pos:column="17">else <if pos:line="139" pos:column="22">if <condition pos:line="139" pos:column="25">(<expr><op:operator pos:line="139" pos:column="26">(</op:operator><op:operator pos:line="139" pos:column="27">!</op:operator><call><name pos:line="139" pos:column="28">generic_stricmp</name><argument_list pos:line="139" pos:column="43">(<argument><expr><name pos:line="139" pos:column="44">_fileName</name></expr></argument>, <argument><expr><call><name pos:line="139" pos:column="55">TEXT</name><argument_list pos:line="139" pos:column="59">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="60">"SConstruct"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="139" pos:column="74">)</op:operator> <op:operator pos:line="139" pos:column="76">||</op:operator> <op:operator pos:line="139" pos:column="79">(</op:operator><op:operator pos:line="139" pos:column="80">!</op:operator><call><name pos:line="139" pos:column="81">generic_stricmp</name><argument_list pos:line="139" pos:column="96">(<argument><expr><name pos:line="139" pos:column="97">_fileName</name></expr></argument>, <argument><expr><call><name pos:line="139" pos:column="108">TEXT</name><argument_list pos:line="139" pos:column="112">(<argument><expr><lit:literal type="string" pos:line="139" pos:column="113">"SConscript"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="139" pos:column="127">)</op:operator></expr>)</condition><then pos:line="139" pos:column="129">
			<expr_stmt><expr><name pos:line="140" pos:column="25">newLang</name> <op:operator pos:line="140" pos:column="33">=</op:operator> <name pos:line="140" pos:column="35">L_PYTHON</name></expr>;</expr_stmt></then></if></else></if></else></if>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="143" pos:column="9">updateTimeStamp</name><argument_list pos:line="143" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><name pos:line="144" pos:column="13">newLang</name> <op:operator pos:line="144" pos:column="21">!=</op:operator> <name pos:line="144" pos:column="24">_lang</name> <op:operator pos:line="144" pos:column="30">||</op:operator> <name pos:line="144" pos:column="33">_lang</name> <op:operator pos:line="144" pos:column="39">==</op:operator> <name pos:line="144" pos:column="42">L_USER</name></expr>)</condition><then pos:line="144" pos:column="49"> <block pos:line="144" pos:column="50">{
		<expr_stmt><expr><name pos:line="145" pos:column="17">_lang</name> <op:operator pos:line="145" pos:column="23">=</op:operator> <name pos:line="145" pos:column="25">newLang</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="146" pos:column="17">doNotify</name><argument_list pos:line="146" pos:column="25">(<argument><expr><name pos:line="146" pos:column="26">BufferChangeFilename</name> <op:operator pos:line="146" pos:column="47">|</op:operator> <name pos:line="146" pos:column="49">BufferChangeLanguage</name> <op:operator pos:line="146" pos:column="70">|</op:operator> <name pos:line="146" pos:column="72">BufferChangeTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="147" pos:column="17">return;</return>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="150" pos:column="9">doNotify</name><argument_list pos:line="150" pos:column="17">(<argument><expr><name pos:line="150" pos:column="18">BufferChangeFilename</name> <op:operator pos:line="150" pos:column="39">|</op:operator> <name pos:line="150" pos:column="41">BufferChangeTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="153" pos:column="1">bool</name></type> <name><name pos:line="153" pos:column="6">Buffer</name><op:operator pos:line="153" pos:column="12">::</op:operator><name pos:line="153" pos:column="14">checkFileState</name></name><parameter_list pos:line="153" pos:column="28">()</parameter_list> <block pos:line="153" pos:column="31">{	<comment type="line" pos:line="153" pos:column="33">//returns true if the status has been changed (it can change into DOC_REGULAR too). false otherwise</comment>
	<decl_stmt><decl><type pos:line="154" pos:column="9">struct <name pos:line="154" pos:column="16">_stat</name></type> <name pos:line="154" pos:column="22">buf</name></decl>;</decl_stmt>

 	<if pos:line="156" pos:column="9">if <condition pos:line="156" pos:column="12">(<expr><name pos:line="156" pos:column="13">_currentStatus</name> <op:operator pos:line="156" pos:column="28">==</op:operator> <name pos:line="156" pos:column="31">DOC_UNNAMED</name></expr>)</condition><then pos:line="156" pos:column="43">	<comment type="line" pos:line="156" pos:column="49">//unsaved document cannot change by environment</comment>
		<return pos:line="157" pos:column="17">return <expr><lit:literal type="boolean" pos:line="157" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="159" pos:column="9">bool</name></type> <name pos:line="159" pos:column="14">isWow64Off</name> <init pos:line="159" pos:column="25">= <expr><lit:literal type="boolean" pos:line="159" pos:column="27">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="160" pos:column="9">NppParameters</name> <type:modifier pos:line="160" pos:column="23">*</type:modifier></type><name pos:line="160" pos:column="24">pNppParam</name> <init pos:line="160" pos:column="34">= <expr><call><name><name pos:line="160" pos:column="36">NppParameters</name><op:operator pos:line="160" pos:column="49">::</op:operator><name pos:line="160" pos:column="51">getInstance</name></name><argument_list pos:line="160" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="161" pos:column="9">if <condition pos:line="161" pos:column="12">(<expr><op:operator pos:line="161" pos:column="13">!</op:operator><call><name pos:line="161" pos:column="14">PathFileExists</name><argument_list pos:line="161" pos:column="28">(<argument><expr><call><name><name pos:line="161" pos:column="29">_fullPathName</name><op:operator pos:line="161" pos:column="42">.</op:operator><name pos:line="161" pos:column="43">c_str</name></name><argument_list pos:line="161" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="52">
	<block pos:line="162" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="163" pos:column="17">pNppParam</name><op:operator pos:line="163" pos:column="26">-&gt;</op:operator><name pos:line="163" pos:column="28">safeWow64EnableWow64FsRedirection</name></name><argument_list pos:line="163" pos:column="61">(<argument><expr><name pos:line="163" pos:column="62">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="164" pos:column="17">isWow64Off</name> <op:operator pos:line="164" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="164" pos:column="30">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="167" pos:column="9">bool</name></type> <name pos:line="167" pos:column="14">isOK</name> <init pos:line="167" pos:column="19">= <expr><lit:literal type="boolean" pos:line="167" pos:column="21">false</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><name pos:line="168" pos:column="13">_currentStatus</name> <op:operator pos:line="168" pos:column="28">!=</op:operator> <name pos:line="168" pos:column="31">DOC_DELETED</name> <op:operator pos:line="168" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="168" pos:column="46">!</op:operator><call><name pos:line="168" pos:column="47">PathFileExists</name><argument_list pos:line="168" pos:column="61">(<argument><expr><call><name><name pos:line="168" pos:column="62">_fullPathName</name><op:operator pos:line="168" pos:column="75">.</op:operator><name pos:line="168" pos:column="76">c_str</name></name><argument_list pos:line="168" pos:column="81">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="168" pos:column="85">	<comment type="line" pos:line="168" pos:column="89">//document has been deleted</comment>
	<block pos:line="169" pos:column="9">{
		<expr_stmt><expr><name pos:line="170" pos:column="17">_currentStatus</name> <op:operator pos:line="170" pos:column="32">=</op:operator> <name pos:line="170" pos:column="34">DOC_DELETED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="171" pos:column="17">_isFileReadOnly</name> <op:operator pos:line="171" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="171" pos:column="35">false</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="172" pos:column="17">_isDirty</name> <op:operator pos:line="172" pos:column="26">=</op:operator> <lit:literal type="boolean" pos:line="172" pos:column="28">true</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="172" pos:column="41">//dirty sicne no match with filesystem</comment>
		<expr_stmt><expr><name pos:line="173" pos:column="17">_timeStamp</name> <op:operator pos:line="173" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="173" pos:column="30">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="174" pos:column="17">doNotify</name><argument_list pos:line="174" pos:column="25">(<argument><expr><name pos:line="174" pos:column="26">BufferChangeStatus</name> <op:operator pos:line="174" pos:column="45">|</op:operator> <name pos:line="174" pos:column="47">BufferChangeReadonly</name> <op:operator pos:line="174" pos:column="68">|</op:operator> <name pos:line="174" pos:column="70">BufferChangeTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="175" pos:column="17">isOK</name> <op:operator pos:line="175" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="175" pos:column="24">true</lit:literal></expr>;</expr_stmt>
	}</block></then> 
	<else pos:line="177" pos:column="9">else <if pos:line="177" pos:column="14">if <condition pos:line="177" pos:column="17">(<expr><name pos:line="177" pos:column="18">_currentStatus</name> <op:operator pos:line="177" pos:column="33">==</op:operator> <name pos:line="177" pos:column="36">DOC_DELETED</name> <op:operator pos:line="177" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="177" pos:column="51">PathFileExists</name><argument_list pos:line="177" pos:column="65">(<argument><expr><call><name><name pos:line="177" pos:column="66">_fullPathName</name><op:operator pos:line="177" pos:column="79">.</op:operator><name pos:line="177" pos:column="80">c_str</name></name><argument_list pos:line="177" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="177" pos:column="89"> 
	<block pos:line="178" pos:column="9">{	<comment type="line" pos:line="178" pos:column="17">//document has returned from its grave</comment>
		<if pos:line="179" pos:column="17">if <condition pos:line="179" pos:column="20">(<expr><op:operator pos:line="179" pos:column="21">!</op:operator><call><name pos:line="179" pos:column="22">generic_stat</name><argument_list pos:line="179" pos:column="34">(<argument><expr><call><name><name pos:line="179" pos:column="35">_fullPathName</name><op:operator pos:line="179" pos:column="48">.</op:operator><name pos:line="179" pos:column="49">c_str</name></name><argument_list pos:line="179" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="179" pos:column="58">&amp;</op:operator><name pos:line="179" pos:column="59">buf</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="179" pos:column="64">
		<block pos:line="180" pos:column="17">{
			<expr_stmt><expr><name pos:line="181" pos:column="25">_isFileReadOnly</name> <op:operator pos:line="181" pos:column="41">=</op:operator> <call pos:line="181" pos:column="43">(<name pos:line="181" pos:column="44">bool</name>)<argument_list pos:line="181" pos:column="49">(<argument><expr><op:operator pos:line="181" pos:column="50">!</op:operator><op:operator pos:line="181" pos:column="51">(</op:operator><name><name pos:line="181" pos:column="52">buf</name><op:operator pos:line="181" pos:column="55">.</op:operator><name pos:line="181" pos:column="56">st_mode</name></name> <op:operator pos:line="181" pos:column="64">&amp;</op:operator> <name pos:line="181" pos:column="66">_S_IWRITE</name><op:operator pos:line="181" pos:column="75">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="183" pos:column="25">_currentStatus</name> <op:operator pos:line="183" pos:column="40">=</op:operator> <name pos:line="183" pos:column="42">DOC_MODIFIED</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="184" pos:column="25">_timeStamp</name> <op:operator pos:line="184" pos:column="36">=</op:operator> <name><name pos:line="184" pos:column="38">buf</name><op:operator pos:line="184" pos:column="41">.</op:operator><name pos:line="184" pos:column="42">st_mtime</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="185" pos:column="25">doNotify</name><argument_list pos:line="185" pos:column="33">(<argument><expr><name pos:line="185" pos:column="34">BufferChangeStatus</name> <op:operator pos:line="185" pos:column="53">|</op:operator> <name pos:line="185" pos:column="55">BufferChangeReadonly</name> <op:operator pos:line="185" pos:column="76">|</op:operator> <name pos:line="185" pos:column="78">BufferChangeTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="186" pos:column="25">isOK</name> <op:operator pos:line="186" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="186" pos:column="32">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then>
	<else pos:line="189" pos:column="9">else <if pos:line="189" pos:column="14">if <condition pos:line="189" pos:column="17">(<expr><op:operator pos:line="189" pos:column="18">!</op:operator><call><name pos:line="189" pos:column="19">generic_stat</name><argument_list pos:line="189" pos:column="31">(<argument><expr><call><name><name pos:line="189" pos:column="32">_fullPathName</name><op:operator pos:line="189" pos:column="45">.</op:operator><name pos:line="189" pos:column="46">c_str</name></name><argument_list pos:line="189" pos:column="51">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="189" pos:column="55">&amp;</op:operator><name pos:line="189" pos:column="56">buf</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="189" pos:column="61">
	<block pos:line="190" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="191" pos:column="17">int</name></type> <name pos:line="191" pos:column="21">mask</name> <init pos:line="191" pos:column="26">= <expr><lit:literal type="number" pos:line="191" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="191" pos:column="33">//status always 'changes', even if from modified to modified</comment>
		<decl_stmt><decl><type><name pos:line="192" pos:column="17">bool</name></type> <name pos:line="192" pos:column="22">isFileReadOnly</name> <init pos:line="192" pos:column="37">= <expr><call pos:line="192" pos:column="39">(<name pos:line="192" pos:column="40">bool</name>)<argument_list pos:line="192" pos:column="45">(<argument><expr><op:operator pos:line="192" pos:column="46">!</op:operator><op:operator pos:line="192" pos:column="47">(</op:operator><name><name pos:line="192" pos:column="48">buf</name><op:operator pos:line="192" pos:column="51">.</op:operator><name pos:line="192" pos:column="52">st_mode</name></name> <op:operator pos:line="192" pos:column="60">&amp;</op:operator> <name pos:line="192" pos:column="62">_S_IWRITE</name><op:operator pos:line="192" pos:column="71">)</op:operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="193" pos:column="17">if <condition pos:line="193" pos:column="20">(<expr><name pos:line="193" pos:column="21">isFileReadOnly</name> <op:operator pos:line="193" pos:column="36">!=</op:operator> <name pos:line="193" pos:column="39">_isFileReadOnly</name></expr>)</condition><then pos:line="193" pos:column="55">
		<block pos:line="194" pos:column="17">{
			<expr_stmt><expr><name pos:line="195" pos:column="25">_isFileReadOnly</name> <op:operator pos:line="195" pos:column="41">=</op:operator> <name pos:line="195" pos:column="43">isFileReadOnly</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="196" pos:column="25">mask</name> <op:operator pos:line="196" pos:column="30">|=</op:operator> <name pos:line="196" pos:column="33">BufferChangeReadonly</name></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="198" pos:column="17">if <condition pos:line="198" pos:column="20">(<expr><name pos:line="198" pos:column="21">_timeStamp</name> <op:operator pos:line="198" pos:column="32">!=</op:operator> <name><name pos:line="198" pos:column="35">buf</name><op:operator pos:line="198" pos:column="38">.</op:operator><name pos:line="198" pos:column="39">st_mtime</name></name></expr>)</condition><then pos:line="198" pos:column="48">
		<block pos:line="199" pos:column="17">{
			<expr_stmt><expr><name pos:line="200" pos:column="25">_timeStamp</name> <op:operator pos:line="200" pos:column="36">=</op:operator> <name><name pos:line="200" pos:column="38">buf</name><op:operator pos:line="200" pos:column="41">.</op:operator><name pos:line="200" pos:column="42">st_mtime</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="201" pos:column="25">mask</name> <op:operator pos:line="201" pos:column="30">|=</op:operator> <name pos:line="201" pos:column="33">BufferChangeTimestamp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="202" pos:column="25">_currentStatus</name> <op:operator pos:line="202" pos:column="40">=</op:operator> <name pos:line="202" pos:column="42">DOC_MODIFIED</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="203" pos:column="25">mask</name> <op:operator pos:line="203" pos:column="30">|=</op:operator> <name pos:line="203" pos:column="33">BufferChangeStatus</name></expr>;</expr_stmt>	<comment type="line" pos:line="203" pos:column="57">//status always 'changes', even if from modified to modified</comment>
		}</block></then></if>

		<if pos:line="206" pos:column="17">if <condition pos:line="206" pos:column="20">(<expr><name pos:line="206" pos:column="21">mask</name> <op:operator pos:line="206" pos:column="26">!=</op:operator> <lit:literal type="number" pos:line="206" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="206" pos:column="31"> 
		<block pos:line="207" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="208" pos:column="25">doNotify</name><argument_list pos:line="208" pos:column="33">(<argument><expr><name pos:line="208" pos:column="34">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="209" pos:column="25">isOK</name> <op:operator pos:line="209" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="209" pos:column="32">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="211" pos:column="17">isOK</name> <op:operator pos:line="211" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="211" pos:column="24">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if></else></if></else></if>
	
	<if pos:line="214" pos:column="9">if <condition pos:line="214" pos:column="12">(<expr><name pos:line="214" pos:column="13">isWow64Off</name></expr>)</condition><then pos:line="214" pos:column="24">
	<block pos:line="215" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="216" pos:column="17">pNppParam</name><op:operator pos:line="216" pos:column="26">-&gt;</op:operator><name pos:line="216" pos:column="28">safeWow64EnableWow64FsRedirection</name></name><argument_list pos:line="216" pos:column="61">(<argument><expr><name pos:line="216" pos:column="62">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="217" pos:column="17">isWow64Off</name> <op:operator pos:line="217" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="217" pos:column="30">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="219" pos:column="9">return <expr><name pos:line="219" pos:column="16">isOK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="222" pos:column="1">int</name></type> <name><name pos:line="222" pos:column="5">Buffer</name><op:operator pos:line="222" pos:column="11">::</op:operator><name pos:line="222" pos:column="13">getFileLength</name></name><parameter_list pos:line="222" pos:column="26">()</parameter_list>
<block pos:line="223" pos:column="1">{
	<if pos:line="224" pos:column="9">if <condition pos:line="224" pos:column="12">(<expr><name pos:line="224" pos:column="13">_currentStatus</name> <op:operator pos:line="224" pos:column="28">==</op:operator> <name pos:line="224" pos:column="31">DOC_UNNAMED</name></expr>)</condition><then pos:line="224" pos:column="43">
		<return pos:line="225" pos:column="17">return <expr><op:operator pos:line="225" pos:column="24">-</op:operator><lit:literal type="number" pos:line="225" pos:column="25">1</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type pos:line="227" pos:column="9">struct <name pos:line="227" pos:column="16">_stat</name></type> <name pos:line="227" pos:column="22">buf</name></decl>;</decl_stmt>

	<if pos:line="229" pos:column="9">if <condition pos:line="229" pos:column="12">(<expr><call><name pos:line="229" pos:column="13">PathFileExists</name><argument_list pos:line="229" pos:column="27">(<argument><expr><call><name><name pos:line="229" pos:column="28">_fullPathName</name><op:operator pos:line="229" pos:column="41">.</op:operator><name pos:line="229" pos:column="42">c_str</name></name><argument_list pos:line="229" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="229" pos:column="51"> 
	<block pos:line="230" pos:column="9">{
		<if pos:line="231" pos:column="17">if <condition pos:line="231" pos:column="20">(<expr><op:operator pos:line="231" pos:column="21">!</op:operator><call><name pos:line="231" pos:column="22">generic_stat</name><argument_list pos:line="231" pos:column="34">(<argument><expr><call><name><name pos:line="231" pos:column="35">_fullPathName</name><op:operator pos:line="231" pos:column="48">.</op:operator><name pos:line="231" pos:column="49">c_str</name></name><argument_list pos:line="231" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="231" pos:column="58">&amp;</op:operator><name pos:line="231" pos:column="59">buf</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="231" pos:column="64">
		<block pos:line="232" pos:column="17">{
			<return pos:line="233" pos:column="25">return <expr><name><name pos:line="233" pos:column="32">buf</name><op:operator pos:line="233" pos:column="35">.</op:operator><name pos:line="233" pos:column="36">st_size</name></name></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="236" pos:column="9">return <expr><op:operator pos:line="236" pos:column="16">-</op:operator><lit:literal type="number" pos:line="236" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="239" pos:column="1">generic_string</name></type> <name><name pos:line="239" pos:column="16">Buffer</name><op:operator pos:line="239" pos:column="22">::</op:operator><name pos:line="239" pos:column="24">getFileTime</name></name><parameter_list pos:line="239" pos:column="35">(<param><decl><type><name pos:line="239" pos:column="36">fileTimeType</name></type> <name pos:line="239" pos:column="49">ftt</name></decl></param>)</parameter_list>
<block pos:line="240" pos:column="1">{
	<if pos:line="241" pos:column="9">if <condition pos:line="241" pos:column="12">(<expr><name pos:line="241" pos:column="13">_currentStatus</name> <op:operator pos:line="241" pos:column="28">==</op:operator> <name pos:line="241" pos:column="31">DOC_UNNAMED</name></expr>)</condition><then pos:line="241" pos:column="43">
		<return pos:line="242" pos:column="17">return <expr><call><name pos:line="242" pos:column="24">TEXT</name><argument_list pos:line="242" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="242" pos:column="29">""</lit:literal></expr></argument>)</argument_list></call></expr>;</return></then></if>

	<decl_stmt><decl><type pos:line="244" pos:column="9">struct <name pos:line="244" pos:column="16">_stat</name></type> <name pos:line="244" pos:column="22">buf</name></decl>;</decl_stmt>

	<if pos:line="246" pos:column="9">if <condition pos:line="246" pos:column="12">(<expr><call><name pos:line="246" pos:column="13">PathFileExists</name><argument_list pos:line="246" pos:column="27">(<argument><expr><call><name><name pos:line="246" pos:column="28">_fullPathName</name><op:operator pos:line="246" pos:column="41">.</op:operator><name pos:line="246" pos:column="42">c_str</name></name><argument_list pos:line="246" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="246" pos:column="51"> 
	<block pos:line="247" pos:column="9">{
		<if pos:line="248" pos:column="17">if <condition pos:line="248" pos:column="20">(<expr><op:operator pos:line="248" pos:column="21">!</op:operator><call><name pos:line="248" pos:column="22">generic_stat</name><argument_list pos:line="248" pos:column="34">(<argument><expr><call><name><name pos:line="248" pos:column="35">_fullPathName</name><op:operator pos:line="248" pos:column="48">.</op:operator><name pos:line="248" pos:column="49">c_str</name></name><argument_list pos:line="248" pos:column="54">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="248" pos:column="58">&amp;</op:operator><name pos:line="248" pos:column="59">buf</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="248" pos:column="64">
		<block pos:line="249" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="250" pos:column="25">time_t</name></type> <name pos:line="250" pos:column="32">rawtime</name> <init pos:line="250" pos:column="40">= <expr><name pos:line="250" pos:column="42">ftt</name><op:operator pos:line="250" pos:column="45">==</op:operator><name pos:line="250" pos:column="47">ft_created</name><op:operator pos:line="250" pos:column="57">?</op:operator><name><name pos:line="250" pos:column="58">buf</name><op:operator pos:line="250" pos:column="61">.</op:operator><name pos:line="250" pos:column="62">st_ctime</name></name><op:operator pos:line="250" pos:column="70">:</op:operator><name pos:line="250" pos:column="71">ftt</name><op:operator pos:line="250" pos:column="74">==</op:operator><name pos:line="250" pos:column="76">ft_modified</name><op:operator pos:line="250" pos:column="87">?</op:operator><name><name pos:line="250" pos:column="88">buf</name><op:operator pos:line="250" pos:column="91">.</op:operator><name pos:line="250" pos:column="92">st_mtime</name></name><op:operator pos:line="250" pos:column="100">:</op:operator><name><name pos:line="250" pos:column="101">buf</name><op:operator pos:line="250" pos:column="104">.</op:operator><name pos:line="250" pos:column="105">st_atime</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="251" pos:column="25">tm</name> <type:modifier pos:line="251" pos:column="28">*</type:modifier></type><name pos:line="251" pos:column="29">timeinfo</name> <init pos:line="251" pos:column="38">= <expr><call><name pos:line="251" pos:column="40">localtime</name><argument_list pos:line="251" pos:column="49">(<argument><expr><op:operator pos:line="251" pos:column="50">&amp;</op:operator><name pos:line="251" pos:column="51">rawtime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="252" pos:column="25">const</specifier> <name pos:line="252" pos:column="31">int</name></type> <name pos:line="252" pos:column="35">temBufLen</name> <init pos:line="252" pos:column="45">= <expr><lit:literal type="number" pos:line="252" pos:column="47">64</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="253" pos:column="25">TCHAR</name></type> <name><name pos:line="253" pos:column="31">tmpbuf</name><index pos:line="253" pos:column="37">[<expr><name pos:line="253" pos:column="38">temBufLen</name></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name pos:line="255" pos:column="25">generic_strftime</name><argument_list pos:line="255" pos:column="41">(<argument><expr><name pos:line="255" pos:column="42">tmpbuf</name></expr></argument>, <argument><expr><name pos:line="255" pos:column="50">temBufLen</name></expr></argument>, <argument><expr><call><name pos:line="255" pos:column="61">TEXT</name><argument_list pos:line="255" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="255" pos:column="66">"%Y-%m-%d %H:%M:%S"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="255" pos:column="88">timeinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="256" pos:column="25">return <expr><name pos:line="256" pos:column="32">tmpbuf</name></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="259" pos:column="9">return <expr><call><name pos:line="259" pos:column="16">TEXT</name><argument_list pos:line="259" pos:column="20">(<argument><expr><lit:literal type="string" pos:line="259" pos:column="21">""</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="263" pos:column="1">void</name></type> <name><name pos:line="263" pos:column="6">Buffer</name><op:operator pos:line="263" pos:column="12">::</op:operator><name pos:line="263" pos:column="14">setPosition</name></name><parameter_list pos:line="263" pos:column="25">(<param><decl><type><specifier pos:line="263" pos:column="26">const</specifier> <name pos:line="263" pos:column="32">Position</name> <type:modifier pos:line="263" pos:column="41">&amp;</type:modifier></type> <name pos:line="263" pos:column="43">pos</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="48">ScintillaEditView</name> <type:modifier pos:line="263" pos:column="66">*</type:modifier></type> <name pos:line="263" pos:column="68">identifier</name></decl></param>)</parameter_list> <block pos:line="263" pos:column="80">{
	<decl_stmt><decl><type><name pos:line="264" pos:column="9">int</name></type> <name pos:line="264" pos:column="13">index</name> <init pos:line="264" pos:column="19">= <expr><call><name pos:line="264" pos:column="21">indexOfReference</name><argument_list pos:line="264" pos:column="37">(<argument><expr><name pos:line="264" pos:column="38">identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="265" pos:column="9">if <condition pos:line="265" pos:column="12">(<expr><name pos:line="265" pos:column="13">index</name> <op:operator pos:line="265" pos:column="19">==</op:operator> <op:operator pos:line="265" pos:column="22">-</op:operator><lit:literal type="number" pos:line="265" pos:column="23">1</lit:literal></expr>)</condition><then pos:line="265" pos:column="25">
		<return pos:line="266" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><name><name pos:line="267" pos:column="9">_positions</name><index pos:line="267" pos:column="19">[<expr><name pos:line="267" pos:column="20">index</name></expr>]</index></name> <op:operator pos:line="267" pos:column="27">=</op:operator> <name pos:line="267" pos:column="29">pos</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="270" pos:column="1">Position</name> <type:modifier pos:line="270" pos:column="10">&amp;</type:modifier></type> <name><name pos:line="270" pos:column="12">Buffer</name><op:operator pos:line="270" pos:column="18">::</op:operator><name pos:line="270" pos:column="20">getPosition</name></name><parameter_list pos:line="270" pos:column="31">(<param><decl><type><name pos:line="270" pos:column="32">ScintillaEditView</name> <type:modifier pos:line="270" pos:column="50">*</type:modifier></type> <name pos:line="270" pos:column="52">identifier</name></decl></param>)</parameter_list> <block pos:line="270" pos:column="64">{
	<decl_stmt><decl><type><name pos:line="271" pos:column="9">int</name></type> <name pos:line="271" pos:column="13">index</name> <init pos:line="271" pos:column="19">= <expr><call><name pos:line="271" pos:column="21">indexOfReference</name><argument_list pos:line="271" pos:column="37">(<argument><expr><name pos:line="271" pos:column="38">identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="272" pos:column="9">return <expr><call><name><name pos:line="272" pos:column="16">_positions</name><op:operator pos:line="272" pos:column="26">.</op:operator><name pos:line="272" pos:column="27">at</name></name><argument_list pos:line="272" pos:column="29">(<argument><expr><name pos:line="272" pos:column="30">index</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="275" pos:column="1">void</name></type> <name><name pos:line="275" pos:column="6">Buffer</name><op:operator pos:line="275" pos:column="12">::</op:operator><name pos:line="275" pos:column="14">setHeaderLineState</name></name><parameter_list pos:line="275" pos:column="32">(<param><decl><type><specifier pos:line="275" pos:column="33">const</specifier> <name><name pos:line="275" pos:column="39">std</name><op:operator pos:line="275" pos:column="42">::</op:operator><name><name pos:line="275" pos:column="44">vector</name><argument_list pos:line="275" pos:column="50">&lt;<argument><expr><name pos:line="275" pos:column="51">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="275" pos:column="68">&amp;</type:modifier></type> <name pos:line="275" pos:column="70">folds</name></decl></param>, <param><decl><type><name pos:line="275" pos:column="77">ScintillaEditView</name> <type:modifier pos:line="275" pos:column="95">*</type:modifier></type> <name pos:line="275" pos:column="97">identifier</name></decl></param>)</parameter_list> <block pos:line="275" pos:column="109">{
	<decl_stmt><decl><type><name pos:line="276" pos:column="9">int</name></type> <name pos:line="276" pos:column="13">index</name> <init pos:line="276" pos:column="19">= <expr><call><name pos:line="276" pos:column="21">indexOfReference</name><argument_list pos:line="276" pos:column="37">(<argument><expr><name pos:line="276" pos:column="38">identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="277" pos:column="9">if <condition pos:line="277" pos:column="12">(<expr><name pos:line="277" pos:column="13">index</name> <op:operator pos:line="277" pos:column="19">==</op:operator> <op:operator pos:line="277" pos:column="22">-</op:operator><lit:literal type="number" pos:line="277" pos:column="23">1</lit:literal></expr>)</condition><then pos:line="277" pos:column="25">
		<return pos:line="278" pos:column="17">return;</return></then></if>
	<comment type="line" pos:line="279" pos:column="9">//deep copy</comment>
	<decl_stmt><decl><type><name><name pos:line="280" pos:column="9">std</name><op:operator pos:line="280" pos:column="12">::</op:operator><name><name pos:line="280" pos:column="14">vector</name><argument_list pos:line="280" pos:column="20">&lt;<argument><expr><name pos:line="280" pos:column="21">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="280" pos:column="38">&amp;</type:modifier></type> <name pos:line="280" pos:column="40">local</name> <init pos:line="280" pos:column="46">= <expr><name><name pos:line="280" pos:column="48">_foldStates</name><index pos:line="280" pos:column="59">[<expr><name pos:line="280" pos:column="60">index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="281" pos:column="9">local</name><op:operator pos:line="281" pos:column="14">.</op:operator><name pos:line="281" pos:column="15">clear</name></name><argument_list pos:line="281" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="282" pos:column="9">size_t</name></type> <name pos:line="282" pos:column="16">size</name> <init pos:line="282" pos:column="21">= <expr><call><name><name pos:line="282" pos:column="23">folds</name><op:operator pos:line="282" pos:column="28">.</op:operator><name pos:line="282" pos:column="29">size</name></name><argument_list pos:line="282" pos:column="33">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="283" pos:column="9">for(<init><decl><type><name pos:line="283" pos:column="13">size_t</name></type> <name pos:line="283" pos:column="20">i</name> <init pos:line="283" pos:column="22">= <expr><lit:literal type="number" pos:line="283" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="283" pos:column="27">i</name> <op:operator pos:line="283" pos:column="29">&lt;</op:operator> <name pos:line="283" pos:column="31">size</name></expr>;</condition> <incr><expr><name pos:line="283" pos:column="37">i</name><op:operator pos:line="283" pos:column="38">++</op:operator></expr></incr>) <block pos:line="283" pos:column="42">{
		<expr_stmt><expr><call><name><name pos:line="284" pos:column="17">local</name><op:operator pos:line="284" pos:column="22">.</op:operator><name pos:line="284" pos:column="23">push_back</name></name><argument_list pos:line="284" pos:column="32">(<argument><expr><name><name pos:line="284" pos:column="33">folds</name><index pos:line="284" pos:column="38">[<expr><name pos:line="284" pos:column="39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><specifier pos:line="288" pos:column="1">const</specifier> <name><name pos:line="288" pos:column="7">std</name><op:operator pos:line="288" pos:column="10">::</op:operator><name><name pos:line="288" pos:column="12">vector</name><argument_list pos:line="288" pos:column="18">&lt;<argument><expr><name pos:line="288" pos:column="19">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="288" pos:column="36">&amp;</type:modifier></type> <name><name pos:line="288" pos:column="38">Buffer</name><op:operator pos:line="288" pos:column="44">::</op:operator><name pos:line="288" pos:column="46">getHeaderLineState</name></name><parameter_list pos:line="288" pos:column="64">(<param><decl><type><specifier pos:line="288" pos:column="65">const</specifier> <name pos:line="288" pos:column="71">ScintillaEditView</name> <type:modifier pos:line="288" pos:column="89">*</type:modifier></type> <name pos:line="288" pos:column="91">identifier</name></decl></param>)</parameter_list> <specifier pos:line="288" pos:column="103">const</specifier> <block pos:line="288" pos:column="109">{
	<decl_stmt><decl><type><name pos:line="289" pos:column="9">int</name></type> <name pos:line="289" pos:column="13">index</name> <init pos:line="289" pos:column="19">= <expr><call><name pos:line="289" pos:column="21">indexOfReference</name><argument_list pos:line="289" pos:column="37">(<argument><expr><name pos:line="289" pos:column="38">identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="290" pos:column="9">return <expr><call><name><name pos:line="290" pos:column="16">_foldStates</name><op:operator pos:line="290" pos:column="27">.</op:operator><name pos:line="290" pos:column="28">at</name></name><argument_list pos:line="290" pos:column="30">(<argument><expr><name pos:line="290" pos:column="31">index</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="293" pos:column="1">Lang</name> <type:modifier pos:line="293" pos:column="6">*</type:modifier></type> <name><name pos:line="293" pos:column="8">Buffer</name><op:operator pos:line="293" pos:column="14">::</op:operator><name pos:line="293" pos:column="16">getCurrentLang</name></name><parameter_list pos:line="293" pos:column="30">()</parameter_list> <specifier pos:line="293" pos:column="33">const</specifier> <block pos:line="293" pos:column="39">{
	<decl_stmt><decl><type><name pos:line="294" pos:column="9">NppParameters</name> <type:modifier pos:line="294" pos:column="23">*</type:modifier></type><name pos:line="294" pos:column="24">pNppParam</name> <init pos:line="294" pos:column="34">= <expr><call><name><name pos:line="294" pos:column="36">NppParameters</name><op:operator pos:line="294" pos:column="49">::</op:operator><name pos:line="294" pos:column="51">getInstance</name></name><argument_list pos:line="294" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="295" pos:column="9">int</name></type> <name pos:line="295" pos:column="13">i</name> <init pos:line="295" pos:column="15">= <expr><lit:literal type="number" pos:line="295" pos:column="17">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="296" pos:column="9">Lang</name> <type:modifier pos:line="296" pos:column="14">*</type:modifier></type><name pos:line="296" pos:column="15">l</name> <init pos:line="296" pos:column="17">= <expr><call><name><name pos:line="296" pos:column="19">pNppParam</name><op:operator pos:line="296" pos:column="28">-&gt;</op:operator><name pos:line="296" pos:column="30">getLangFromIndex</name></name><argument_list pos:line="296" pos:column="46">(<argument><expr><name pos:line="296" pos:column="47">i</name><op:operator pos:line="296" pos:column="48">++</op:operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="297" pos:column="9">while <condition pos:line="297" pos:column="15">(<expr><name pos:line="297" pos:column="16">l</name></expr>)</condition>
	<block pos:line="298" pos:column="9">{
		<if pos:line="299" pos:column="17">if <condition pos:line="299" pos:column="20">(<expr><name><name pos:line="299" pos:column="21">l</name><op:operator pos:line="299" pos:column="22">-&gt;</op:operator><name pos:line="299" pos:column="24">_langID</name></name> <op:operator pos:line="299" pos:column="32">==</op:operator> <name pos:line="299" pos:column="35">_lang</name></expr>)</condition><then pos:line="299" pos:column="41">
			<return pos:line="300" pos:column="25">return <expr><name pos:line="300" pos:column="32">l</name></expr>;</return></then></if>

		<expr_stmt><expr><name pos:line="302" pos:column="17">l</name> <op:operator pos:line="302" pos:column="19">=</op:operator> <call><name><name pos:line="302" pos:column="21">pNppParam</name><op:operator pos:line="302" pos:column="30">-&gt;</op:operator><name pos:line="302" pos:column="32">getLangFromIndex</name></name><argument_list pos:line="302" pos:column="48">(<argument><expr><name pos:line="302" pos:column="49">i</name><op:operator pos:line="302" pos:column="50">++</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="304" pos:column="9">return <expr><name pos:line="304" pos:column="16">NULL</name></expr>;</return>
}</block></function><empty_stmt pos:line="305" pos:column="2">;</empty_stmt>

<function><type><name pos:line="307" pos:column="1">int</name></type> <name><name pos:line="307" pos:column="5">Buffer</name><op:operator pos:line="307" pos:column="11">::</op:operator><name pos:line="307" pos:column="13">indexOfReference</name></name><parameter_list pos:line="307" pos:column="29">(<param><decl><type><specifier pos:line="307" pos:column="30">const</specifier> <name pos:line="307" pos:column="36">ScintillaEditView</name> <type:modifier pos:line="307" pos:column="54">*</type:modifier></type> <name pos:line="307" pos:column="56">identifier</name></decl></param>)</parameter_list> <specifier pos:line="307" pos:column="68">const</specifier> <block pos:line="307" pos:column="74">{
	<decl_stmt><decl><type><name pos:line="308" pos:column="9">int</name></type> <name pos:line="308" pos:column="13">size</name> <init pos:line="308" pos:column="18">= <expr><op:operator pos:line="308" pos:column="20">(</op:operator><name pos:line="308" pos:column="21">int</name><op:operator pos:line="308" pos:column="24">)</op:operator><call><name><name pos:line="308" pos:column="25">_referees</name><op:operator pos:line="308" pos:column="34">.</op:operator><name pos:line="308" pos:column="35">size</name></name><argument_list pos:line="308" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="309" pos:column="9">for(<init><decl><type><name pos:line="309" pos:column="13">int</name></type> <name pos:line="309" pos:column="17">i</name> <init pos:line="309" pos:column="19">= <expr><lit:literal type="number" pos:line="309" pos:column="21">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="309" pos:column="24">i</name> <op:operator pos:line="309" pos:column="26">&lt;</op:operator> <name pos:line="309" pos:column="28">size</name></expr>;</condition> <incr><expr><name pos:line="309" pos:column="34">i</name><op:operator pos:line="309" pos:column="35">++</op:operator></expr></incr>) <block pos:line="309" pos:column="39">{
		<if pos:line="310" pos:column="17">if <condition pos:line="310" pos:column="20">(<expr><name><name pos:line="310" pos:column="21">_referees</name><index pos:line="310" pos:column="30">[<expr><name pos:line="310" pos:column="31">i</name></expr>]</index></name> <op:operator pos:line="310" pos:column="34">==</op:operator> <name pos:line="310" pos:column="37">identifier</name></expr>)</condition><then pos:line="310" pos:column="48">
			<return pos:line="311" pos:column="25">return <expr><name pos:line="311" pos:column="32">i</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="313" pos:column="9">return <expr><op:operator pos:line="313" pos:column="16">-</op:operator><lit:literal type="number" pos:line="313" pos:column="17">1</lit:literal></expr>;</return>	<comment type="line" pos:line="313" pos:column="25">//not found</comment>
}</block></function>

<function><type><name pos:line="316" pos:column="1">int</name></type> <name><name pos:line="316" pos:column="5">Buffer</name><op:operator pos:line="316" pos:column="11">::</op:operator><name pos:line="316" pos:column="13">addReference</name></name><parameter_list pos:line="316" pos:column="25">(<param><decl><type><name pos:line="316" pos:column="26">ScintillaEditView</name> <type:modifier pos:line="316" pos:column="44">*</type:modifier></type> <name pos:line="316" pos:column="46">identifier</name></decl></param>)</parameter_list> <block pos:line="316" pos:column="58">{
	<if pos:line="317" pos:column="9">if <condition pos:line="317" pos:column="12">(<expr><call><name pos:line="317" pos:column="13">indexOfReference</name><argument_list pos:line="317" pos:column="29">(<argument><expr><name pos:line="317" pos:column="30">identifier</name></expr></argument>)</argument_list></call> <op:operator pos:line="317" pos:column="42">!=</op:operator> <op:operator pos:line="317" pos:column="45">-</op:operator><lit:literal type="number" pos:line="317" pos:column="46">1</lit:literal></expr>)</condition><then pos:line="317" pos:column="48">
		<return pos:line="318" pos:column="17">return <expr><name pos:line="318" pos:column="24">_references</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name><name pos:line="319" pos:column="9">_referees</name><op:operator pos:line="319" pos:column="18">.</op:operator><name pos:line="319" pos:column="19">push_back</name></name><argument_list pos:line="319" pos:column="28">(<argument><expr><name pos:line="319" pos:column="29">identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="320" pos:column="9">_positions</name><op:operator pos:line="320" pos:column="19">.</op:operator><name pos:line="320" pos:column="20">push_back</name></name><argument_list pos:line="320" pos:column="29">(<argument><expr><call><name pos:line="320" pos:column="30">Position</name><argument_list pos:line="320" pos:column="38">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="321" pos:column="9">_foldStates</name><op:operator pos:line="321" pos:column="20">.</op:operator><name pos:line="321" pos:column="21">push_back</name></name><argument_list pos:line="321" pos:column="30">(<argument><expr><call><name><name pos:line="321" pos:column="31">std</name><op:operator pos:line="321" pos:column="34">::</op:operator><name><name pos:line="321" pos:column="36">vector</name><argument_list pos:line="321" pos:column="42">&lt;<argument><expr><name pos:line="321" pos:column="43">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name><argument_list pos:line="321" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="322" pos:column="9">_references</name><op:operator pos:line="322" pos:column="20">++</op:operator></expr>;</expr_stmt>
	<return pos:line="323" pos:column="9">return <expr><name pos:line="323" pos:column="16">_references</name></expr>;</return>
}</block></function>

<function><type><name pos:line="326" pos:column="1">int</name></type> <name><name pos:line="326" pos:column="5">Buffer</name><op:operator pos:line="326" pos:column="11">::</op:operator><name pos:line="326" pos:column="13">removeReference</name></name><parameter_list pos:line="326" pos:column="28">(<param><decl><type><name pos:line="326" pos:column="29">ScintillaEditView</name> <type:modifier pos:line="326" pos:column="47">*</type:modifier></type> <name pos:line="326" pos:column="49">identifier</name></decl></param>)</parameter_list> <block pos:line="326" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="327" pos:column="9">int</name></type> <name pos:line="327" pos:column="13">indexToPop</name> <init pos:line="327" pos:column="24">= <expr><call><name pos:line="327" pos:column="26">indexOfReference</name><argument_list pos:line="327" pos:column="42">(<argument><expr><name pos:line="327" pos:column="43">identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="328" pos:column="9">if <condition pos:line="328" pos:column="12">(<expr><name pos:line="328" pos:column="13">indexToPop</name> <op:operator pos:line="328" pos:column="24">==</op:operator> <op:operator pos:line="328" pos:column="27">-</op:operator><lit:literal type="number" pos:line="328" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="328" pos:column="30">
		<return pos:line="329" pos:column="17">return <expr><name pos:line="329" pos:column="24">_references</name></expr>;</return></then></if>
	<expr_stmt><expr><call><name><name pos:line="330" pos:column="9">_referees</name><op:operator pos:line="330" pos:column="18">.</op:operator><name pos:line="330" pos:column="19">erase</name></name><argument_list pos:line="330" pos:column="24">(<argument><expr><call><name><name pos:line="330" pos:column="25">_referees</name><op:operator pos:line="330" pos:column="34">.</op:operator><name pos:line="330" pos:column="35">begin</name></name><argument_list pos:line="330" pos:column="40">()</argument_list></call> <op:operator pos:line="330" pos:column="43">+</op:operator> <name pos:line="330" pos:column="45">indexToPop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="331" pos:column="9">_positions</name><op:operator pos:line="331" pos:column="19">.</op:operator><name pos:line="331" pos:column="20">erase</name></name><argument_list pos:line="331" pos:column="25">(<argument><expr><call><name><name pos:line="331" pos:column="26">_positions</name><op:operator pos:line="331" pos:column="36">.</op:operator><name pos:line="331" pos:column="37">begin</name></name><argument_list pos:line="331" pos:column="42">()</argument_list></call> <op:operator pos:line="331" pos:column="45">+</op:operator> <name pos:line="331" pos:column="47">indexToPop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="332" pos:column="9">_foldStates</name><op:operator pos:line="332" pos:column="20">.</op:operator><name pos:line="332" pos:column="21">erase</name></name><argument_list pos:line="332" pos:column="26">(<argument><expr><call><name><name pos:line="332" pos:column="27">_foldStates</name><op:operator pos:line="332" pos:column="38">.</op:operator><name pos:line="332" pos:column="39">begin</name></name><argument_list pos:line="332" pos:column="44">()</argument_list></call> <op:operator pos:line="332" pos:column="47">+</op:operator> <name pos:line="332" pos:column="49">indexToPop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="333" pos:column="9">_references</name><op:operator pos:line="333" pos:column="20">--</op:operator></expr>;</expr_stmt>
	<return pos:line="334" pos:column="9">return <expr><name pos:line="334" pos:column="16">_references</name></expr>;</return>
}</block></function>

<function><type><name pos:line="337" pos:column="1">void</name></type> <name><name pos:line="337" pos:column="6">Buffer</name><op:operator pos:line="337" pos:column="12">::</op:operator><name pos:line="337" pos:column="14">setHideLineChanged</name></name><parameter_list pos:line="337" pos:column="32">(<param><decl><type><name pos:line="337" pos:column="33">bool</name></type> <name pos:line="337" pos:column="38">isHide</name></decl></param>, <param><decl><type><name pos:line="337" pos:column="46">int</name></type> <name pos:line="337" pos:column="50">location</name></decl></param>)</parameter_list> <block pos:line="337" pos:column="60">{
	<comment type="line" pos:line="338" pos:column="9">//First run through all docs without removing markers</comment>
	<for pos:line="339" pos:column="9">for(<init><decl><type><name pos:line="339" pos:column="13">int</name></type> <name pos:line="339" pos:column="17">i</name> <init pos:line="339" pos:column="19">= <expr><lit:literal type="number" pos:line="339" pos:column="21">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="339" pos:column="24">i</name> <op:operator pos:line="339" pos:column="26">&lt;</op:operator> <name pos:line="339" pos:column="28">_references</name></expr>;</condition> <incr><expr><name pos:line="339" pos:column="41">i</name><op:operator pos:line="339" pos:column="42">++</op:operator></expr></incr>) <block pos:line="339" pos:column="46">{
		<expr_stmt><expr><call><name><name pos:line="340" pos:column="17">_referees</name><op:operator pos:line="340" pos:column="26">.</op:operator><name pos:line="340" pos:column="27">at</name></name><argument_list pos:line="340" pos:column="29">(<argument><expr><name pos:line="340" pos:column="30">i</name></expr></argument>)</argument_list></call><op:operator pos:line="340" pos:column="32">-&gt;</op:operator><call><name pos:line="340" pos:column="34">notifyMarkers</name><argument_list pos:line="340" pos:column="47">(<argument><expr><name pos:line="340" pos:column="48">this</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="54">isHide</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="62">location</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="340" pos:column="72">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line" pos:line="340" pos:column="79">//(i == _references-1));</comment>
	}</block></for>

	<if pos:line="343" pos:column="9">if <condition pos:line="343" pos:column="12">(<expr><op:operator pos:line="343" pos:column="13">!</op:operator><name pos:line="343" pos:column="14">isHide</name></expr>)</condition><then pos:line="343" pos:column="21"> <block pos:line="343" pos:column="22">{	<comment type="line" pos:line="343" pos:column="25">//no deleting if hiding lines</comment>
		<comment type="line" pos:line="344" pos:column="17">//Then all docs to remove markers.</comment>
		<for pos:line="345" pos:column="17">for(<init><decl><type><name pos:line="345" pos:column="21">int</name></type> <name pos:line="345" pos:column="25">i</name> <init pos:line="345" pos:column="27">= <expr><lit:literal type="number" pos:line="345" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="345" pos:column="32">i</name> <op:operator pos:line="345" pos:column="34">&lt;</op:operator> <name pos:line="345" pos:column="36">_references</name></expr>;</condition> <incr><expr><name pos:line="345" pos:column="49">i</name><op:operator pos:line="345" pos:column="50">++</op:operator></expr></incr>) <block pos:line="345" pos:column="54">{
			<expr_stmt><expr><call><name><name pos:line="346" pos:column="25">_referees</name><op:operator pos:line="346" pos:column="34">.</op:operator><name pos:line="346" pos:column="35">at</name></name><argument_list pos:line="346" pos:column="37">(<argument><expr><name pos:line="346" pos:column="38">i</name></expr></argument>)</argument_list></call><op:operator pos:line="346" pos:column="40">-&gt;</op:operator><call><name pos:line="346" pos:column="42">notifyMarkers</name><argument_list pos:line="346" pos:column="55">(<argument><expr><name pos:line="346" pos:column="56">this</name></expr></argument>, <argument><expr><name pos:line="346" pos:column="62">isHide</name></expr></argument>, <argument><expr><name pos:line="346" pos:column="70">location</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="346" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></then></if>
}</block></function>
<function><type><name pos:line="350" pos:column="1">void</name></type> <name><name pos:line="350" pos:column="6">Buffer</name><op:operator pos:line="350" pos:column="12">::</op:operator><name pos:line="350" pos:column="14">setDeferredReload</name></name><parameter_list pos:line="350" pos:column="31">()</parameter_list> <block pos:line="350" pos:column="34">{	<comment type="line" pos:line="350" pos:column="41">//triggers a reload on the next Document access</comment>
	<expr_stmt><expr><name pos:line="351" pos:column="9">_isDirty</name> <op:operator pos:line="351" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="351" pos:column="20">false</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="351" pos:column="33">//when reloading, just set to false, since it sohuld be marked as clean</comment>
	<expr_stmt><expr><name pos:line="352" pos:column="9">_needReloading</name> <op:operator pos:line="352" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="352" pos:column="26">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="353" pos:column="9">doNotify</name><argument_list pos:line="353" pos:column="17">(<argument><expr><name pos:line="353" pos:column="18">BufferChangeDirty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" pos:line="356" pos:column="1">/*
pair&lt;size_t, bool&gt; Buffer::getLineUndoState(size_t currentLine) const
{
	for (size_t i = 0 ; i &lt; _linesUndoState.size() ; i++)
	{
		if (_linesUndoState[i].first == currentLine)
			return _linesUndoState[i].second;
	}
	return pair&lt;size_t, bool&gt;(0, false);
}

void Buffer::setLineUndoState(size_t currentLine, size_t undoLevel, bool isSaved)
{
	bool found = false;
	for (size_t i = 0 ; i &lt; _linesUndoState.size() ; i++)
	{
		if (_linesUndoState[i].first == currentLine)
		{
			_linesUndoState[i].second.first = undoLevel;
			_linesUndoState[i].second.second = isSaved;
		}
	}
	if (!found)
	{
		_linesUndoState.push_back(pair&lt;size_t, pair&lt;size_t, bool&gt; &gt;(currentLine, pair&lt;size_t, bool&gt;(undoLevel, false)));
	}
}
*/</comment>

<comment type="line" pos:line="385" pos:column="1">//filemanager</comment>

<destructor><name><name pos:line="387" pos:column="1">FileManager</name><op:operator pos:line="387" pos:column="12">::</op:operator>~<name pos:line="387" pos:column="15">FileManager</name></name><parameter_list pos:line="387" pos:column="26">()</parameter_list>
<block pos:line="388" pos:column="1">{
	<for pos:line="389" pos:column="9">for (<init><decl><type><name><name pos:line="389" pos:column="14">std</name><op:operator pos:line="389" pos:column="17">::</op:operator><name><name pos:line="389" pos:column="19">vector</name><argument_list pos:line="389" pos:column="25">&lt;<argument><expr><name pos:line="389" pos:column="26">Buffer</name> <op:operator pos:line="389" pos:column="33">*</op:operator></expr></argument>&gt;</argument_list></name><op:operator pos:line="389" pos:column="35">::</op:operator><name pos:line="389" pos:column="37">iterator</name></name></type> <name pos:line="389" pos:column="46">it</name> <init pos:line="389" pos:column="49">= <expr><call><name><name pos:line="389" pos:column="51">_buffers</name><op:operator pos:line="389" pos:column="59">.</op:operator><name pos:line="389" pos:column="60">begin</name></name><argument_list pos:line="389" pos:column="65">()</argument_list></call></expr></init><op:operator pos:line="389" pos:column="67">,</op:operator> <name pos:line="389" pos:column="69">end</name> <init pos:line="389" pos:column="73">= <expr><call><name><name pos:line="389" pos:column="75">_buffers</name><op:operator pos:line="389" pos:column="83">.</op:operator><name pos:line="389" pos:column="84">end</name></name><argument_list pos:line="389" pos:column="87">()</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="389" pos:column="91">it</name> <op:operator pos:line="389" pos:column="94">!=</op:operator> <name pos:line="389" pos:column="97">end</name></expr>;</condition> <incr><expr><op:operator pos:line="389" pos:column="102">++</op:operator><name pos:line="389" pos:column="104">it</name></expr></incr>)
	<block pos:line="390" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="391" pos:column="17">delete</op:operator> <op:operator pos:line="391" pos:column="24">*</op:operator><name pos:line="391" pos:column="25">it</name></expr>;</expr_stmt>
	}</block></for>
}</block></destructor>

<function><type><name pos:line="395" pos:column="1">void</name></type> <name><name pos:line="395" pos:column="6">FileManager</name><op:operator pos:line="395" pos:column="17">::</op:operator><name pos:line="395" pos:column="19">init</name></name><parameter_list pos:line="395" pos:column="23">(<param><decl><type><name pos:line="395" pos:column="24">Notepad_plus</name> <type:modifier pos:line="395" pos:column="37">*</type:modifier></type> <name pos:line="395" pos:column="39">pNotepadPlus</name></decl></param>, <param><decl><type><name pos:line="395" pos:column="53">ScintillaEditView</name> <type:modifier pos:line="395" pos:column="71">*</type:modifier></type> <name pos:line="395" pos:column="73">pscratchTilla</name></decl></param>)</parameter_list>
<block pos:line="396" pos:column="1">{
	<expr_stmt><expr><name pos:line="397" pos:column="9">_pNotepadPlus</name> <op:operator pos:line="397" pos:column="23">=</op:operator> <name pos:line="397" pos:column="25">pNotepadPlus</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="398" pos:column="9">_pscratchTilla</name> <op:operator pos:line="398" pos:column="24">=</op:operator> <name pos:line="398" pos:column="26">pscratchTilla</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="399" pos:column="9">_pscratchTilla</name><op:operator pos:line="399" pos:column="23">-&gt;</op:operator><name pos:line="399" pos:column="25">execute</name></name><argument_list pos:line="399" pos:column="32">(<argument><expr><name pos:line="399" pos:column="33">SCI_SETUNDOCOLLECTION</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="399" pos:column="56">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="399" pos:column="65">//dont store any undo information</comment>
	<expr_stmt><expr><name pos:line="400" pos:column="9">_scratchDocDefault</name> <op:operator pos:line="400" pos:column="28">=</op:operator> <op:operator pos:line="400" pos:column="30">(</op:operator><name pos:line="400" pos:column="31">Document</name><op:operator pos:line="400" pos:column="39">)</op:operator><call><name><name pos:line="400" pos:column="40">_pscratchTilla</name><op:operator pos:line="400" pos:column="54">-&gt;</op:operator><name pos:line="400" pos:column="56">execute</name></name><argument_list pos:line="400" pos:column="63">(<argument><expr><name pos:line="400" pos:column="64">SCI_GETDOCPOINTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="401" pos:column="9">_pscratchTilla</name><op:operator pos:line="401" pos:column="23">-&gt;</op:operator><name pos:line="401" pos:column="25">execute</name></name><argument_list pos:line="401" pos:column="32">(<argument><expr><name pos:line="401" pos:column="33">SCI_ADDREFDOCUMENT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="401" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><name pos:line="401" pos:column="56">_scratchDocDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="404" pos:column="1">void</name></type> <name><name pos:line="404" pos:column="6">FileManager</name><op:operator pos:line="404" pos:column="17">::</op:operator><name pos:line="404" pos:column="19">checkFilesystemChanges</name></name><parameter_list pos:line="404" pos:column="41">()</parameter_list> <block pos:line="404" pos:column="44">{
	<for pos:line="405" pos:column="9">for(<init><decl><type><name pos:line="405" pos:column="13">int</name></type> <name pos:line="405" pos:column="17">i</name> <init pos:line="405" pos:column="19">= <expr><call><name pos:line="405" pos:column="21">int</name><argument_list pos:line="405" pos:column="24">(<argument><expr><name pos:line="405" pos:column="25">_nrBufs</name> <op:operator pos:line="405" pos:column="33">-</op:operator><lit:literal type="number" pos:line="405" pos:column="34">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl> ;</init> <condition><expr><name pos:line="405" pos:column="39">i</name> <op:operator pos:line="405" pos:column="41">&gt;=</op:operator> <lit:literal type="number" pos:line="405" pos:column="44">0</lit:literal></expr> ;</condition> <incr><expr><name pos:line="405" pos:column="48">i</name><op:operator pos:line="405" pos:column="49">--</op:operator></expr></incr>)
    <block pos:line="406" pos:column="5">{
        <if pos:line="407" pos:column="9">if <condition pos:line="407" pos:column="12">(<expr><name pos:line="407" pos:column="13">i</name> <op:operator pos:line="407" pos:column="15">&gt;=</op:operator> <call><name pos:line="407" pos:column="18">int</name><argument_list pos:line="407" pos:column="21">(<argument><expr><name pos:line="407" pos:column="22">_nrBufs</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="407" pos:column="31">
        <block pos:line="408" pos:column="9">{
            <if pos:line="409" pos:column="13">if <condition pos:line="409" pos:column="16">(<expr><name pos:line="409" pos:column="17">_nrBufs</name> <op:operator pos:line="409" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="409" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="409" pos:column="30">
                <return pos:line="410" pos:column="17">return;</return></then></if>

            <expr_stmt><expr><name pos:line="412" pos:column="13">i</name> <op:operator pos:line="412" pos:column="15">=</op:operator> <name pos:line="412" pos:column="17">_nrBufs</name> <op:operator pos:line="412" pos:column="25">-</op:operator> <lit:literal type="number" pos:line="412" pos:column="27">1</lit:literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name pos:line="414" pos:column="9">_buffers</name><index pos:line="414" pos:column="17">[<expr><name pos:line="414" pos:column="18">i</name></expr>]</index></name><op:operator pos:line="414" pos:column="20">-&gt;</op:operator><call><name pos:line="414" pos:column="22">checkFileState</name><argument_list pos:line="414" pos:column="36">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="414" pos:column="41">//something has changed. Triggers update automatically</comment>
	}</block></for>
    
}</block></function>

<function><type><name pos:line="419" pos:column="1">int</name></type> <name><name pos:line="419" pos:column="5">FileManager</name><op:operator pos:line="419" pos:column="16">::</op:operator><name pos:line="419" pos:column="18">getBufferIndexByID</name></name><parameter_list pos:line="419" pos:column="36">(<param><decl><type><name pos:line="419" pos:column="37">BufferID</name></type> <name pos:line="419" pos:column="46">id</name></decl></param>)</parameter_list> <block pos:line="419" pos:column="50">{
	<for pos:line="420" pos:column="9">for(<init><decl><type><name pos:line="420" pos:column="13">size_t</name></type> <name pos:line="420" pos:column="20">i</name> <init pos:line="420" pos:column="22">= <expr><lit:literal type="number" pos:line="420" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="420" pos:column="27">i</name> <op:operator pos:line="420" pos:column="29">&lt;</op:operator> <name pos:line="420" pos:column="31">_nrBufs</name></expr>;</condition> <incr><expr><name pos:line="420" pos:column="40">i</name><op:operator pos:line="420" pos:column="41">++</op:operator></expr></incr>) <block pos:line="420" pos:column="45">{
		<if pos:line="421" pos:column="17">if <condition pos:line="421" pos:column="20">(<expr><name><name pos:line="421" pos:column="21">_buffers</name><index pos:line="421" pos:column="29">[<expr><name pos:line="421" pos:column="30">i</name></expr>]</index></name><op:operator pos:line="421" pos:column="32">-&gt;</op:operator><name pos:line="421" pos:column="34">_id</name> <op:operator pos:line="421" pos:column="38">==</op:operator> <name pos:line="421" pos:column="41">id</name></expr>)</condition><then pos:line="421" pos:column="44">
			<return pos:line="422" pos:column="25">return <expr><op:operator pos:line="422" pos:column="32">(</op:operator><name pos:line="422" pos:column="33">int</name><op:operator pos:line="422" pos:column="36">)</op:operator><name pos:line="422" pos:column="37">i</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="424" pos:column="9">return <expr><op:operator pos:line="424" pos:column="16">-</op:operator><lit:literal type="number" pos:line="424" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="427" pos:column="1">Buffer</name> <type:modifier pos:line="427" pos:column="8">*</type:modifier></type> <name><name pos:line="427" pos:column="10">FileManager</name><op:operator pos:line="427" pos:column="21">::</op:operator><name pos:line="427" pos:column="23">getBufferByIndex</name></name><parameter_list pos:line="427" pos:column="39">(<param><decl><type><name pos:line="427" pos:column="40">int</name></type> <name pos:line="427" pos:column="44">index</name></decl></param>)</parameter_list> <block pos:line="427" pos:column="51">{
	<return pos:line="428" pos:column="9">return <expr><call><name><name pos:line="428" pos:column="16">_buffers</name><op:operator pos:line="428" pos:column="24">.</op:operator><name pos:line="428" pos:column="25">at</name></name><argument_list pos:line="428" pos:column="27">(<argument><expr><name pos:line="428" pos:column="28">index</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="431" pos:column="1">void</name></type> <name><name pos:line="431" pos:column="6">FileManager</name><op:operator pos:line="431" pos:column="17">::</op:operator><name pos:line="431" pos:column="19">beNotifiedOfBufferChange</name></name><parameter_list pos:line="431" pos:column="43">(<param><decl><type><name pos:line="431" pos:column="44">Buffer</name> <type:modifier pos:line="431" pos:column="51">*</type:modifier></type> <name pos:line="431" pos:column="53">theBuf</name></decl></param>, <param><decl><type><name pos:line="431" pos:column="61">int</name></type> <name pos:line="431" pos:column="65">mask</name></decl></param>)</parameter_list> <block pos:line="431" pos:column="71">{
	<expr_stmt><expr><call><name><name pos:line="432" pos:column="9">_pNotepadPlus</name><op:operator pos:line="432" pos:column="22">-&gt;</op:operator><name pos:line="432" pos:column="24">notifyBufferChanged</name></name><argument_list pos:line="432" pos:column="43">(<argument><expr><name pos:line="432" pos:column="44">theBuf</name></expr></argument>, <argument><expr><name pos:line="432" pos:column="52">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function><empty_stmt pos:line="433" pos:column="2">;</empty_stmt>

<function><type><name pos:line="435" pos:column="1">void</name></type> <name><name pos:line="435" pos:column="6">FileManager</name><op:operator pos:line="435" pos:column="17">::</op:operator><name pos:line="435" pos:column="19">addBufferReference</name></name><parameter_list pos:line="435" pos:column="37">(<param><decl><type><name pos:line="435" pos:column="38">BufferID</name></type> <name pos:line="435" pos:column="47">buffer</name></decl></param>, <param><decl><type><name pos:line="435" pos:column="55">ScintillaEditView</name> <type:modifier pos:line="435" pos:column="73">*</type:modifier></type> <name pos:line="435" pos:column="75">identifier</name></decl></param>)</parameter_list> <block pos:line="435" pos:column="87">{
	<decl_stmt><decl><type><name pos:line="436" pos:column="9">Buffer</name> <type:modifier pos:line="436" pos:column="16">*</type:modifier></type> <name pos:line="436" pos:column="18">buf</name> <init pos:line="436" pos:column="22">= <expr><call><name pos:line="436" pos:column="24">getBufferByID</name><argument_list pos:line="436" pos:column="37">(<argument><expr><name pos:line="436" pos:column="38">buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="437" pos:column="9">buf</name><op:operator pos:line="437" pos:column="12">-&gt;</op:operator><name pos:line="437" pos:column="14">addReference</name></name><argument_list pos:line="437" pos:column="26">(<argument><expr><name pos:line="437" pos:column="27">identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="440" pos:column="1">void</name></type> <name><name pos:line="440" pos:column="6">FileManager</name><op:operator pos:line="440" pos:column="17">::</op:operator><name pos:line="440" pos:column="19">closeBuffer</name></name><parameter_list pos:line="440" pos:column="30">(<param><decl><type><name pos:line="440" pos:column="31">BufferID</name></type> <name pos:line="440" pos:column="40">id</name></decl></param>, <param><decl><type><name pos:line="440" pos:column="44">ScintillaEditView</name> <type:modifier pos:line="440" pos:column="62">*</type:modifier></type> <name pos:line="440" pos:column="64">identifier</name></decl></param>)</parameter_list> <block pos:line="440" pos:column="76">{
	<decl_stmt><decl><type><name pos:line="441" pos:column="9">int</name></type> <name pos:line="441" pos:column="13">index</name> <init pos:line="441" pos:column="19">= <expr><call><name pos:line="441" pos:column="21">getBufferIndexByID</name><argument_list pos:line="441" pos:column="39">(<argument><expr><name pos:line="441" pos:column="40">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="442" pos:column="9">Buffer</name> <type:modifier pos:line="442" pos:column="16">*</type:modifier></type> <name pos:line="442" pos:column="18">buf</name> <init pos:line="442" pos:column="22">= <expr><call><name pos:line="442" pos:column="24">getBufferByIndex</name><argument_list pos:line="442" pos:column="40">(<argument><expr><name pos:line="442" pos:column="41">index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="444" pos:column="9">int</name></type> <name pos:line="444" pos:column="13">refs</name> <init pos:line="444" pos:column="18">= <expr><call><name><name pos:line="444" pos:column="20">buf</name><op:operator pos:line="444" pos:column="23">-&gt;</op:operator><name pos:line="444" pos:column="25">removeReference</name></name><argument_list pos:line="444" pos:column="40">(<argument><expr><name pos:line="444" pos:column="41">identifier</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="446" pos:column="9">if <condition pos:line="446" pos:column="12">(<expr><op:operator pos:line="446" pos:column="13">!</op:operator><name pos:line="446" pos:column="14">refs</name></expr>)</condition><then pos:line="446" pos:column="19"> <block pos:line="446" pos:column="20">{	<comment type="line" pos:line="446" pos:column="25">//buffer can be deallocated</comment>
		<expr_stmt><expr><call><name><name pos:line="447" pos:column="17">_pscratchTilla</name><op:operator pos:line="447" pos:column="31">-&gt;</op:operator><name pos:line="447" pos:column="33">execute</name></name><argument_list pos:line="447" pos:column="40">(<argument><expr><name pos:line="447" pos:column="41">SCI_RELEASEDOCUMENT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="447" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="447" pos:column="65">buf</name><op:operator pos:line="447" pos:column="68">-&gt;</op:operator><name pos:line="447" pos:column="70">_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="447" pos:column="81">//release for FileManager, Document is now gone</comment>
		<expr_stmt><expr><call><name><name pos:line="448" pos:column="17">_buffers</name><op:operator pos:line="448" pos:column="25">.</op:operator><name pos:line="448" pos:column="26">erase</name></name><argument_list pos:line="448" pos:column="31">(<argument><expr><call><name><name pos:line="448" pos:column="32">_buffers</name><op:operator pos:line="448" pos:column="40">.</op:operator><name pos:line="448" pos:column="41">begin</name></name><argument_list pos:line="448" pos:column="46">()</argument_list></call> <op:operator pos:line="448" pos:column="49">+</op:operator> <name pos:line="448" pos:column="51">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="449" pos:column="17">delete</op:operator> <name pos:line="449" pos:column="24">buf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="450" pos:column="17">_nrBufs</name><op:operator pos:line="450" pos:column="24">--</op:operator></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="454" pos:column="1">BufferID</name></type> <name><name pos:line="454" pos:column="10">FileManager</name><op:operator pos:line="454" pos:column="21">::</op:operator><name pos:line="454" pos:column="23">loadFile</name></name><parameter_list pos:line="454" pos:column="31">(<param><decl><type><specifier pos:line="454" pos:column="32">const</specifier> <name pos:line="454" pos:column="38">TCHAR</name> <type:modifier pos:line="454" pos:column="44">*</type:modifier></type> <name pos:line="454" pos:column="46">filename</name></decl></param>, <param><decl><type><name pos:line="454" pos:column="56">Document</name></type> <name pos:line="454" pos:column="65">doc</name></decl></param>, <param><decl><type><name pos:line="454" pos:column="70">int</name></type> <name pos:line="454" pos:column="74">encoding</name></decl></param>)</parameter_list>
<block pos:line="455" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="456" pos:column="9">bool</name></type> <name pos:line="456" pos:column="14">ownDoc</name> <init pos:line="456" pos:column="21">= <expr><lit:literal type="boolean" pos:line="456" pos:column="23">false</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="457" pos:column="9">if <condition pos:line="457" pos:column="12">(<expr><name pos:line="457" pos:column="13">doc</name> <op:operator pos:line="457" pos:column="17">==</op:operator> <name pos:line="457" pos:column="20">NULL</name></expr>)</condition><then pos:line="457" pos:column="25"> 
	<block pos:line="458" pos:column="9">{
		<expr_stmt><expr><name pos:line="459" pos:column="17">doc</name> <op:operator pos:line="459" pos:column="21">=</op:operator> <op:operator pos:line="459" pos:column="23">(</op:operator><name pos:line="459" pos:column="24">Document</name><op:operator pos:line="459" pos:column="32">)</op:operator><call><name><name pos:line="459" pos:column="33">_pscratchTilla</name><op:operator pos:line="459" pos:column="47">-&gt;</op:operator><name pos:line="459" pos:column="49">execute</name></name><argument_list pos:line="459" pos:column="56">(<argument><expr><name pos:line="459" pos:column="57">SCI_CREATEDOCUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="460" pos:column="17">ownDoc</name> <op:operator pos:line="460" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="460" pos:column="26">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="463" pos:column="9">TCHAR</name></type> <name><name pos:line="463" pos:column="15">fullpath</name><index pos:line="463" pos:column="23">[<expr><name pos:line="463" pos:column="24">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="464" pos:column="9">::</op:operator><name pos:line="464" pos:column="11">GetFullPathName</name></name><argument_list pos:line="464" pos:column="26">(<argument><expr><name pos:line="464" pos:column="27">filename</name></expr></argument>, <argument><expr><name pos:line="464" pos:column="37">MAX_PATH</name></expr></argument>, <argument><expr><name pos:line="464" pos:column="47">fullpath</name></expr></argument>, <argument><expr><name pos:line="464" pos:column="57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="465" pos:column="9">::</op:operator><name pos:line="465" pos:column="11">GetLongPathName</name></name><argument_list pos:line="465" pos:column="26">(<argument><expr><name pos:line="465" pos:column="27">fullpath</name></expr></argument>, <argument><expr><name pos:line="465" pos:column="37">fullpath</name></expr></argument>, <argument><expr><name pos:line="465" pos:column="47">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="466" pos:column="9">Utf8_16_Read</name></type> <name pos:line="466" pos:column="22">UnicodeConvertor</name></decl>;</decl_stmt>	<comment type="line" pos:line="466" pos:column="41">//declare here so we can get information after loading is done</comment>

	<decl_stmt><decl><type><name pos:line="468" pos:column="9">formatType</name></type> <name pos:line="468" pos:column="20">format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="469" pos:column="9">bool</name></type> <name pos:line="469" pos:column="14">res</name> <init pos:line="469" pos:column="18">= <expr><call><name pos:line="469" pos:column="20">loadFileData</name><argument_list pos:line="469" pos:column="32">(<argument><expr><name pos:line="469" pos:column="33">doc</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="38">fullpath</name></expr></argument>, <argument><expr><op:operator pos:line="469" pos:column="48">&amp;</op:operator><name pos:line="469" pos:column="49">UnicodeConvertor</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="67">L_TEXT</name></expr></argument>, <argument><expr><name pos:line="469" pos:column="75">encoding</name></expr></argument>, <argument><expr><op:operator pos:line="469" pos:column="85">&amp;</op:operator><name pos:line="469" pos:column="86">format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="470" pos:column="9">if <condition pos:line="470" pos:column="12">(<expr><name pos:line="470" pos:column="13">res</name></expr>)</condition><then pos:line="470" pos:column="17"> 
	<block pos:line="471" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="472" pos:column="17">Buffer</name> <type:modifier pos:line="472" pos:column="24">*</type:modifier></type> <name pos:line="472" pos:column="26">newBuf</name> <init pos:line="472" pos:column="33">= <expr><op:operator pos:line="472" pos:column="35">new</op:operator> <call><name pos:line="472" pos:column="39">Buffer</name><argument_list pos:line="472" pos:column="45">(<argument><expr><name pos:line="472" pos:column="46">this</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="52">_nextBufferID</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="67">doc</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="72">DOC_REGULAR</name></expr></argument>, <argument><expr><name pos:line="472" pos:column="85">fullpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="473" pos:column="17">BufferID</name></type> <name pos:line="473" pos:column="26">id</name> <init pos:line="473" pos:column="29">= <expr><op:operator pos:line="473" pos:column="31">(</op:operator><name pos:line="473" pos:column="32">BufferID</name><op:operator pos:line="473" pos:column="40">)</op:operator> <name pos:line="473" pos:column="42">newBuf</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="474" pos:column="17">newBuf</name><op:operator pos:line="474" pos:column="23">-&gt;</op:operator><name pos:line="474" pos:column="25">_id</name></name> <op:operator pos:line="474" pos:column="29">=</op:operator> <name pos:line="474" pos:column="31">id</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="475" pos:column="17">_buffers</name><op:operator pos:line="475" pos:column="25">.</op:operator><name pos:line="475" pos:column="26">push_back</name></name><argument_list pos:line="475" pos:column="35">(<argument><expr><name pos:line="475" pos:column="36">newBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="476" pos:column="17">_nrBufs</name><op:operator pos:line="476" pos:column="24">++</op:operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="477" pos:column="17">Buffer</name> <type:modifier pos:line="477" pos:column="24">*</type:modifier></type> <name pos:line="477" pos:column="26">buf</name> <init pos:line="477" pos:column="30">= <expr><call><name><name pos:line="477" pos:column="32">_buffers</name><op:operator pos:line="477" pos:column="40">.</op:operator><name pos:line="477" pos:column="41">at</name></name><argument_list pos:line="477" pos:column="43">(<argument><expr><name pos:line="477" pos:column="44">_nrBufs</name> <op:operator pos:line="477" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="477" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="479" pos:column="17">// restore the encoding (ANSI based) while opening the existing file</comment>
		<decl_stmt><decl><type><name pos:line="480" pos:column="17">NppParameters</name> <type:modifier pos:line="480" pos:column="31">*</type:modifier></type><name pos:line="480" pos:column="32">pNppParamInst</name> <init pos:line="480" pos:column="46">= <expr><call><name><name pos:line="480" pos:column="48">NppParameters</name><op:operator pos:line="480" pos:column="61">::</op:operator><name pos:line="480" pos:column="63">getInstance</name></name><argument_list pos:line="480" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="481" pos:column="17">const</specifier> <name pos:line="481" pos:column="23">NewDocDefaultSettings</name> <type:modifier pos:line="481" pos:column="45">&amp;</type:modifier></type> <name pos:line="481" pos:column="47">ndds</name> <init pos:line="481" pos:column="52">= <expr><op:operator pos:line="481" pos:column="54">(</op:operator><call><name><name pos:line="481" pos:column="55">pNppParamInst</name><op:operator pos:line="481" pos:column="68">-&gt;</op:operator><name pos:line="481" pos:column="70">getNppGUI</name></name><argument_list pos:line="481" pos:column="79">()</argument_list></call><op:operator pos:line="481" pos:column="81">)</op:operator><op:operator pos:line="481" pos:column="82">.</op:operator><call><name pos:line="481" pos:column="83">getNewDocDefaultSettings</name><argument_list pos:line="481" pos:column="107">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="482" pos:column="17">buf</name><op:operator pos:line="482" pos:column="20">-&gt;</op:operator><name pos:line="482" pos:column="22">setUnicodeMode</name></name><argument_list pos:line="482" pos:column="36">(<argument><expr><name><name pos:line="482" pos:column="37">ndds</name><op:operator pos:line="482" pos:column="41">.</op:operator><name pos:line="482" pos:column="42">_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="483" pos:column="17">buf</name><op:operator pos:line="483" pos:column="20">-&gt;</op:operator><name pos:line="483" pos:column="22">setEncoding</name></name><argument_list pos:line="483" pos:column="33">(<argument><expr><op:operator pos:line="483" pos:column="34">-</op:operator><lit:literal type="number" pos:line="483" pos:column="35">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="485" pos:column="17">if <condition pos:line="485" pos:column="20">(<expr><name pos:line="485" pos:column="21">encoding</name> <op:operator pos:line="485" pos:column="30">==</op:operator> <op:operator pos:line="485" pos:column="33">-</op:operator><lit:literal type="number" pos:line="485" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="485" pos:column="36">
		<block pos:line="486" pos:column="17">{
			<comment type="line" pos:line="487" pos:column="25">// 3 formats : WIN_FORMAT, UNIX_FORMAT and MAC_FORMAT</comment>
			<if pos:line="488" pos:column="25">if <condition pos:line="488" pos:column="28">(<expr><call><name><name pos:line="488" pos:column="29">UnicodeConvertor</name><op:operator pos:line="488" pos:column="45">.</op:operator><name pos:line="488" pos:column="46">getNewBuf</name></name><argument_list pos:line="488" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="488" pos:column="58"> 
			<block pos:line="489" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="490" pos:column="33">int</name></type> <name pos:line="490" pos:column="37">format</name> <init pos:line="490" pos:column="44">= <expr><call><name pos:line="490" pos:column="46">getEOLFormatForm</name><argument_list pos:line="490" pos:column="62">(<argument><expr><call><name><name pos:line="490" pos:column="63">UnicodeConvertor</name><op:operator pos:line="490" pos:column="79">.</op:operator><name pos:line="490" pos:column="80">getNewBuf</name></name><argument_list pos:line="490" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="491" pos:column="33">buf</name><op:operator pos:line="491" pos:column="36">-&gt;</op:operator><name pos:line="491" pos:column="38">setFormat</name></name><argument_list pos:line="491" pos:column="47">(<argument><expr><name pos:line="491" pos:column="48">format</name> <op:operator pos:line="491" pos:column="55">==</op:operator> <op:operator pos:line="491" pos:column="58">-</op:operator><lit:literal type="number" pos:line="491" pos:column="59">1</lit:literal><op:operator pos:line="491" pos:column="60">?</op:operator><name pos:line="491" pos:column="61">WIN_FORMAT</name><op:operator pos:line="491" pos:column="71">:</op:operator><op:operator pos:line="491" pos:column="72">(</op:operator><name pos:line="491" pos:column="73">formatType</name><op:operator pos:line="491" pos:column="83">)</op:operator><name pos:line="491" pos:column="84">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></then>
			<else pos:line="494" pos:column="25">else
			<block pos:line="495" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="496" pos:column="33">buf</name><op:operator pos:line="496" pos:column="36">-&gt;</op:operator><name pos:line="496" pos:column="38">setFormat</name></name><argument_list pos:line="496" pos:column="47">(<argument><expr><name pos:line="496" pos:column="48">WIN_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>

			<decl_stmt><decl><type><name pos:line="499" pos:column="25">UniMode</name></type> <name pos:line="499" pos:column="33">um</name> <init pos:line="499" pos:column="36">= <expr><call><name><name pos:line="499" pos:column="38">UnicodeConvertor</name><op:operator pos:line="499" pos:column="54">.</op:operator><name pos:line="499" pos:column="55">getEncoding</name></name><argument_list pos:line="499" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="500" pos:column="25">if <condition pos:line="500" pos:column="28">(<expr><name pos:line="500" pos:column="29">um</name> <op:operator pos:line="500" pos:column="32">==</op:operator> <name pos:line="500" pos:column="35">uni7Bit</name></expr>)</condition><then pos:line="500" pos:column="43">
			<block pos:line="501" pos:column="25">{
				<if pos:line="502" pos:column="33">if <condition pos:line="502" pos:column="36">(<expr><name><name pos:line="502" pos:column="37">ndds</name><op:operator pos:line="502" pos:column="41">.</op:operator><name pos:line="502" pos:column="42">_openAnsiAsUtf8</name></name></expr>)</condition><then pos:line="502" pos:column="58">
				<block pos:line="503" pos:column="33">{
					<expr_stmt><expr><name pos:line="504" pos:column="41">um</name> <op:operator pos:line="504" pos:column="44">=</op:operator> <name pos:line="504" pos:column="46">uniCookie</name></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="506" pos:column="33">else
				<block pos:line="507" pos:column="33">{
					<expr_stmt><expr><name pos:line="508" pos:column="41">um</name> <op:operator pos:line="508" pos:column="44">=</op:operator> <name pos:line="508" pos:column="46">uni8Bit</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="511" pos:column="25">buf</name><op:operator pos:line="511" pos:column="28">-&gt;</op:operator><name pos:line="511" pos:column="30">setUnicodeMode</name></name><argument_list pos:line="511" pos:column="44">(<argument><expr><name pos:line="511" pos:column="45">um</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="513" pos:column="17">else <comment type="line" pos:line="513" pos:column="22">// encoding != -1</comment>
		<block pos:line="514" pos:column="17">{
            <comment type="line" pos:line="515" pos:column="13">// Test if encoding is set to UTF8 w/o BOM (usually for utf8 indicator of xml or html)</comment>
            <expr_stmt><expr><call><name><name pos:line="516" pos:column="13">buf</name><op:operator pos:line="516" pos:column="16">-&gt;</op:operator><name pos:line="516" pos:column="18">setEncoding</name></name><argument_list pos:line="516" pos:column="29">(<argument><expr><op:operator pos:line="516" pos:column="30">(</op:operator><name pos:line="516" pos:column="31">encoding</name> <op:operator pos:line="516" pos:column="40">==</op:operator> <name pos:line="516" pos:column="43">SC_CP_UTF8</name><op:operator pos:line="516" pos:column="53">)</op:operator><op:operator pos:line="516" pos:column="54">?</op:operator><op:operator pos:line="516" pos:column="55">-</op:operator><lit:literal type="number" pos:line="516" pos:column="56">1</lit:literal><op:operator pos:line="516" pos:column="57">:</op:operator><name pos:line="516" pos:column="58">encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="517" pos:column="13">buf</name><op:operator pos:line="517" pos:column="16">-&gt;</op:operator><name pos:line="517" pos:column="18">setUnicodeMode</name></name><argument_list pos:line="517" pos:column="32">(<argument><expr><name pos:line="517" pos:column="33">uniCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="518" pos:column="25">buf</name><op:operator pos:line="518" pos:column="28">-&gt;</op:operator><name pos:line="518" pos:column="30">setFormat</name></name><argument_list pos:line="518" pos:column="39">(<argument><expr><name pos:line="518" pos:column="40">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<comment type="line" pos:line="520" pos:column="17">//determine buffer properties</comment>
		<expr_stmt><expr><name pos:line="521" pos:column="17">_nextBufferID</name><op:operator pos:line="521" pos:column="30">++</op:operator></expr>;</expr_stmt>
		<return pos:line="522" pos:column="17">return <expr><name pos:line="522" pos:column="24">id</name></expr>;</return>
	}</block></then>
	<else pos:line="524" pos:column="9">else <comment type="line" pos:line="524" pos:column="14">//failed loading, release document</comment>
	<block pos:line="525" pos:column="9">{	
		<if pos:line="526" pos:column="17">if <condition pos:line="526" pos:column="20">(<expr><name pos:line="526" pos:column="21">ownDoc</name></expr>)</condition><then pos:line="526" pos:column="28">
			<expr_stmt><expr><call><name><name pos:line="527" pos:column="25">_pscratchTilla</name><op:operator pos:line="527" pos:column="39">-&gt;</op:operator><name pos:line="527" pos:column="41">execute</name></name><argument_list pos:line="527" pos:column="48">(<argument><expr><name pos:line="527" pos:column="49">SCI_RELEASEDOCUMENT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="527" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><name pos:line="527" pos:column="73">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>	<comment type="line" pos:line="527" pos:column="81">//Failure, so release document</comment>
		<return pos:line="528" pos:column="17">return <expr><name pos:line="528" pos:column="24">BUFFER_INVALID</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="532" pos:column="1">bool</name></type> <name><name pos:line="532" pos:column="6">FileManager</name><op:operator pos:line="532" pos:column="17">::</op:operator><name pos:line="532" pos:column="19">reloadBuffer</name></name><parameter_list pos:line="532" pos:column="31">(<param><decl><type><name pos:line="532" pos:column="32">BufferID</name></type> <name pos:line="532" pos:column="41">id</name></decl></param>)</parameter_list>
<block pos:line="533" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="534" pos:column="9">Buffer</name> <type:modifier pos:line="534" pos:column="16">*</type:modifier></type> <name pos:line="534" pos:column="18">buf</name> <init pos:line="534" pos:column="22">= <expr><call><name pos:line="534" pos:column="24">getBufferByID</name><argument_list pos:line="534" pos:column="37">(<argument><expr><name pos:line="534" pos:column="38">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="535" pos:column="9">Document</name></type> <name pos:line="535" pos:column="18">doc</name> <init pos:line="535" pos:column="22">= <expr><call><name><name pos:line="535" pos:column="24">buf</name><op:operator pos:line="535" pos:column="27">-&gt;</op:operator><name pos:line="535" pos:column="29">getDocument</name></name><argument_list pos:line="535" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="536" pos:column="9">Utf8_16_Read</name></type> <name pos:line="536" pos:column="22">UnicodeConvertor</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="537" pos:column="9">buf</name><op:operator pos:line="537" pos:column="12">-&gt;</op:operator><name pos:line="537" pos:column="14">_canNotify</name></name> <op:operator pos:line="537" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="537" pos:column="27">false</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="537" pos:column="41">//disable notify during file load, we dont want dirty to be triggered</comment>
	<decl_stmt><decl><type><name pos:line="538" pos:column="9">int</name></type> <name pos:line="538" pos:column="13">encoding</name> <init pos:line="538" pos:column="22">= <expr><call><name><name pos:line="538" pos:column="24">buf</name><op:operator pos:line="538" pos:column="27">-&gt;</op:operator><name pos:line="538" pos:column="29">getEncoding</name></name><argument_list pos:line="538" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="539" pos:column="9">formatType</name></type> <name pos:line="539" pos:column="20">format</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="540" pos:column="9">bool</name></type> <name pos:line="540" pos:column="14">res</name> <init pos:line="540" pos:column="18">= <expr><call><name pos:line="540" pos:column="20">loadFileData</name><argument_list pos:line="540" pos:column="32">(<argument><expr><name pos:line="540" pos:column="33">doc</name></expr></argument>, <argument><expr><call><name><name pos:line="540" pos:column="38">buf</name><op:operator pos:line="540" pos:column="41">-&gt;</op:operator><name pos:line="540" pos:column="43">getFullPathName</name></name><argument_list pos:line="540" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="540" pos:column="62">&amp;</op:operator><name pos:line="540" pos:column="63">UnicodeConvertor</name></expr></argument>, <argument><expr><call><name><name pos:line="540" pos:column="81">buf</name><op:operator pos:line="540" pos:column="84">-&gt;</op:operator><name pos:line="540" pos:column="86">getLangType</name></name><argument_list pos:line="540" pos:column="97">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="540" pos:column="101">encoding</name></expr></argument>, <argument><expr><op:operator pos:line="540" pos:column="111">&amp;</op:operator><name pos:line="540" pos:column="112">format</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="541" pos:column="9">buf</name><op:operator pos:line="541" pos:column="12">-&gt;</op:operator><name pos:line="541" pos:column="14">_canNotify</name></name> <op:operator pos:line="541" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="541" pos:column="27">true</lit:literal></expr>;</expr_stmt>
	<if pos:line="542" pos:column="9">if <condition pos:line="542" pos:column="12">(<expr><name pos:line="542" pos:column="13">res</name></expr>)</condition><then pos:line="542" pos:column="17"> 
	<block pos:line="543" pos:column="9">{
		<if pos:line="544" pos:column="17">if <condition pos:line="544" pos:column="20">(<expr><name pos:line="544" pos:column="21">encoding</name> <op:operator pos:line="544" pos:column="30">==</op:operator> <op:operator pos:line="544" pos:column="33">-</op:operator><lit:literal type="number" pos:line="544" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="544" pos:column="36">
		<block pos:line="545" pos:column="17">{
			<if pos:line="546" pos:column="25">if <condition pos:line="546" pos:column="28">(<expr><call><name><name pos:line="546" pos:column="29">UnicodeConvertor</name><op:operator pos:line="546" pos:column="45">.</op:operator><name pos:line="546" pos:column="46">getNewBuf</name></name><argument_list pos:line="546" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="546" pos:column="58"> 
			<block pos:line="547" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="548" pos:column="33">int</name></type> <name pos:line="548" pos:column="37">format</name> <init pos:line="548" pos:column="44">= <expr><call><name pos:line="548" pos:column="46">getEOLFormatForm</name><argument_list pos:line="548" pos:column="62">(<argument><expr><call><name><name pos:line="548" pos:column="63">UnicodeConvertor</name><op:operator pos:line="548" pos:column="79">.</op:operator><name pos:line="548" pos:column="80">getNewBuf</name></name><argument_list pos:line="548" pos:column="89">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="549" pos:column="33">buf</name><op:operator pos:line="549" pos:column="36">-&gt;</op:operator><name pos:line="549" pos:column="38">setFormat</name></name><argument_list pos:line="549" pos:column="47">(<argument><expr><name pos:line="549" pos:column="48">format</name> <op:operator pos:line="549" pos:column="55">==</op:operator> <op:operator pos:line="549" pos:column="58">-</op:operator><lit:literal type="number" pos:line="549" pos:column="59">1</lit:literal><op:operator pos:line="549" pos:column="60">?</op:operator><name pos:line="549" pos:column="61">WIN_FORMAT</name><op:operator pos:line="549" pos:column="71">:</op:operator><op:operator pos:line="549" pos:column="72">(</op:operator><name pos:line="549" pos:column="73">formatType</name><op:operator pos:line="549" pos:column="83">)</op:operator><name pos:line="549" pos:column="84">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="551" pos:column="25">else
			<block pos:line="552" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="553" pos:column="33">buf</name><op:operator pos:line="553" pos:column="36">-&gt;</op:operator><name pos:line="553" pos:column="38">setFormat</name></name><argument_list pos:line="553" pos:column="47">(<argument><expr><name pos:line="553" pos:column="48">WIN_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name><name pos:line="555" pos:column="25">buf</name><op:operator pos:line="555" pos:column="28">-&gt;</op:operator><name pos:line="555" pos:column="30">setUnicodeMode</name></name><argument_list pos:line="555" pos:column="44">(<argument><expr><call><name><name pos:line="555" pos:column="45">UnicodeConvertor</name><op:operator pos:line="555" pos:column="61">.</op:operator><name pos:line="555" pos:column="62">getEncoding</name></name><argument_list pos:line="555" pos:column="73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="557" pos:column="17">else
		<block pos:line="558" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="559" pos:column="25">buf</name><op:operator pos:line="559" pos:column="28">-&gt;</op:operator><name pos:line="559" pos:column="30">setEncoding</name></name><argument_list pos:line="559" pos:column="41">(<argument><expr><name pos:line="559" pos:column="42">encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="560" pos:column="25">buf</name><op:operator pos:line="560" pos:column="28">-&gt;</op:operator><name pos:line="560" pos:column="30">setFormat</name></name><argument_list pos:line="560" pos:column="39">(<argument><expr><name pos:line="560" pos:column="40">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="561" pos:column="25">buf</name><op:operator pos:line="561" pos:column="28">-&gt;</op:operator><name pos:line="561" pos:column="30">setUnicodeMode</name></name><argument_list pos:line="561" pos:column="44">(<argument><expr><name pos:line="561" pos:column="45">uniCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>
	<return pos:line="564" pos:column="9">return <expr><name pos:line="564" pos:column="16">res</name></expr>;</return>
}</block></function>

<function><type><name pos:line="567" pos:column="1">bool</name></type> <name><name pos:line="567" pos:column="6">FileManager</name><op:operator pos:line="567" pos:column="17">::</op:operator><name pos:line="567" pos:column="19">reloadBufferDeferred</name></name><parameter_list pos:line="567" pos:column="39">(<param><decl><type><name pos:line="567" pos:column="40">BufferID</name></type> <name pos:line="567" pos:column="49">id</name></decl></param>)</parameter_list>
<block pos:line="568" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="569" pos:column="9">Buffer</name> <type:modifier pos:line="569" pos:column="16">*</type:modifier></type> <name pos:line="569" pos:column="18">buf</name> <init pos:line="569" pos:column="22">= <expr><call><name pos:line="569" pos:column="24">getBufferByID</name><argument_list pos:line="569" pos:column="37">(<argument><expr><name pos:line="569" pos:column="38">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="570" pos:column="9">buf</name><op:operator pos:line="570" pos:column="12">-&gt;</op:operator><name pos:line="570" pos:column="14">setDeferredReload</name></name><argument_list pos:line="570" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
	<return pos:line="571" pos:column="9">return <expr><lit:literal type="boolean" pos:line="571" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="574" pos:column="1">bool</name></type> <name><name pos:line="574" pos:column="6">FileManager</name><op:operator pos:line="574" pos:column="17">::</op:operator><name pos:line="574" pos:column="19">deleteFile</name></name><parameter_list pos:line="574" pos:column="29">(<param><decl><type><name pos:line="574" pos:column="30">BufferID</name></type> <name pos:line="574" pos:column="39">id</name></decl></param>)</parameter_list>
<block pos:line="575" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="576" pos:column="9">Buffer</name> <type:modifier pos:line="576" pos:column="16">*</type:modifier></type> <name pos:line="576" pos:column="18">buf</name> <init pos:line="576" pos:column="22">= <expr><call><name pos:line="576" pos:column="24">getBufferByID</name><argument_list pos:line="576" pos:column="37">(<argument><expr><name pos:line="576" pos:column="38">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="577" pos:column="9">generic_string</name></type> <name pos:line="577" pos:column="24">fileNamePath</name> <init pos:line="577" pos:column="37">= <expr><call><name><name pos:line="577" pos:column="39">buf</name><op:operator pos:line="577" pos:column="42">-&gt;</op:operator><name pos:line="577" pos:column="44">getFullPathName</name></name><argument_list pos:line="577" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="579" pos:column="9">// Make sure to form a string with double '\0' terminator.</comment>
	<expr_stmt><expr><call><name><name pos:line="580" pos:column="9">fileNamePath</name><op:operator pos:line="580" pos:column="21">.</op:operator><name pos:line="580" pos:column="22">append</name></name><argument_list pos:line="580" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="580" pos:column="29">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="580" pos:column="32">'\0'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="582" pos:column="9">if <condition pos:line="582" pos:column="12">(<expr><op:operator pos:line="582" pos:column="13">!</op:operator><call><name pos:line="582" pos:column="14">PathFileExists</name><argument_list pos:line="582" pos:column="28">(<argument><expr><call><name><name pos:line="582" pos:column="29">fileNamePath</name><op:operator pos:line="582" pos:column="41">.</op:operator><name pos:line="582" pos:column="42">c_str</name></name><argument_list pos:line="582" pos:column="47">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="582" pos:column="51">
		<return pos:line="583" pos:column="17">return <expr><lit:literal type="boolean" pos:line="583" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<comment type="line" pos:line="584" pos:column="9">//return ::DeleteFile(fileNamePath) != 0;</comment>

	<decl_stmt><decl><type><name pos:line="586" pos:column="9">SHFILEOPSTRUCT</name></type> <name pos:line="586" pos:column="24">fileOpStruct</name> <init pos:line="586" pos:column="37">= <expr><block pos:line="586" pos:column="39">{<expr><lit:literal type="number" pos:line="586" pos:column="40">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="587" pos:column="9">fileOpStruct</name><op:operator pos:line="587" pos:column="21">.</op:operator><name pos:line="587" pos:column="22">hwnd</name></name> <op:operator pos:line="587" pos:column="27">=</op:operator> <name pos:line="587" pos:column="29">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="588" pos:column="9">fileOpStruct</name><op:operator pos:line="588" pos:column="21">.</op:operator><name pos:line="588" pos:column="22">pFrom</name></name> <op:operator pos:line="588" pos:column="28">=</op:operator> <call><name><name pos:line="588" pos:column="30">fileNamePath</name><op:operator pos:line="588" pos:column="42">.</op:operator><name pos:line="588" pos:column="43">c_str</name></name><argument_list pos:line="588" pos:column="48">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="589" pos:column="9">fileOpStruct</name><op:operator pos:line="589" pos:column="21">.</op:operator><name pos:line="589" pos:column="22">pTo</name></name> <op:operator pos:line="589" pos:column="26">=</op:operator> <name pos:line="589" pos:column="28">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="590" pos:column="9">fileOpStruct</name><op:operator pos:line="590" pos:column="21">.</op:operator><name pos:line="590" pos:column="22">wFunc</name></name> <op:operator pos:line="590" pos:column="28">=</op:operator> <name pos:line="590" pos:column="30">FO_DELETE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="591" pos:column="9">fileOpStruct</name><op:operator pos:line="591" pos:column="21">.</op:operator><name pos:line="591" pos:column="22">fFlags</name></name> <op:operator pos:line="591" pos:column="29">=</op:operator> <name pos:line="591" pos:column="31">FOF_ALLOWUNDO</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="592" pos:column="9">fileOpStruct</name><op:operator pos:line="592" pos:column="21">.</op:operator><name pos:line="592" pos:column="22">fAnyOperationsAborted</name></name> <op:operator pos:line="592" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="592" pos:column="46">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="593" pos:column="9">fileOpStruct</name><op:operator pos:line="593" pos:column="21">.</op:operator><name pos:line="593" pos:column="22">hNameMappings</name></name>         <op:operator pos:line="593" pos:column="44">=</op:operator> <name pos:line="593" pos:column="46">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="594" pos:column="9">fileOpStruct</name><op:operator pos:line="594" pos:column="21">.</op:operator><name pos:line="594" pos:column="22">lpszProgressTitle</name></name>     <op:operator pos:line="594" pos:column="44">=</op:operator> <name pos:line="594" pos:column="46">NULL</name></expr>;</expr_stmt>

	<return pos:line="596" pos:column="9">return <expr><call><name pos:line="596" pos:column="16">SHFileOperation</name><argument_list pos:line="596" pos:column="31">(<argument><expr><op:operator pos:line="596" pos:column="32">&amp;</op:operator><name pos:line="596" pos:column="33">fileOpStruct</name></expr></argument>)</argument_list></call> <op:operator pos:line="596" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="596" pos:column="50">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="599" pos:column="1">bool</name></type> <name><name pos:line="599" pos:column="6">FileManager</name><op:operator pos:line="599" pos:column="17">::</op:operator><name pos:line="599" pos:column="19">moveFile</name></name><parameter_list pos:line="599" pos:column="27">(<param><decl><type><name pos:line="599" pos:column="28">BufferID</name></type> <name pos:line="599" pos:column="37">id</name></decl></param>, <param><decl><type><specifier pos:line="599" pos:column="41">const</specifier> <name pos:line="599" pos:column="47">TCHAR</name> <type:modifier pos:line="599" pos:column="53">*</type:modifier></type> <name pos:line="599" pos:column="55">newFileName</name></decl></param>)</parameter_list>
<block pos:line="600" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="601" pos:column="9">Buffer</name> <type:modifier pos:line="601" pos:column="16">*</type:modifier></type> <name pos:line="601" pos:column="18">buf</name> <init pos:line="601" pos:column="22">= <expr><call><name pos:line="601" pos:column="24">getBufferByID</name><argument_list pos:line="601" pos:column="37">(<argument><expr><name pos:line="601" pos:column="38">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="602" pos:column="9">const</specifier> <name pos:line="602" pos:column="15">TCHAR</name> <type:modifier pos:line="602" pos:column="21">*</type:modifier></type><name pos:line="602" pos:column="22">fileNamePath</name> <init pos:line="602" pos:column="35">= <expr><call><name><name pos:line="602" pos:column="37">buf</name><op:operator pos:line="602" pos:column="40">-&gt;</op:operator><name pos:line="602" pos:column="42">getFullPathName</name></name><argument_list pos:line="602" pos:column="57">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="603" pos:column="9">if <condition pos:line="603" pos:column="12">(<expr><op:operator pos:line="603" pos:column="13">!</op:operator><call><name pos:line="603" pos:column="14">PathFileExists</name><argument_list pos:line="603" pos:column="28">(<argument><expr><name pos:line="603" pos:column="29">fileNamePath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="603" pos:column="43">
		<return pos:line="604" pos:column="17">return <expr><lit:literal type="boolean" pos:line="604" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<if pos:line="606" pos:column="9">if <condition pos:line="606" pos:column="12">(<expr><call><name><op:operator pos:line="606" pos:column="13">::</op:operator><name pos:line="606" pos:column="15">MoveFile</name></name><argument_list pos:line="606" pos:column="23">(<argument><expr><name pos:line="606" pos:column="24">fileNamePath</name></expr></argument>, <argument><expr><name pos:line="606" pos:column="38">newFileName</name></expr></argument>)</argument_list></call> <op:operator pos:line="606" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="606" pos:column="54">0</lit:literal></expr>)</condition><then pos:line="606" pos:column="56">
		<return pos:line="607" pos:column="17">return <expr><lit:literal type="boolean" pos:line="607" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name><name pos:line="609" pos:column="9">buf</name><op:operator pos:line="609" pos:column="12">-&gt;</op:operator><name pos:line="609" pos:column="14">setFileName</name></name><argument_list pos:line="609" pos:column="25">(<argument><expr><name pos:line="609" pos:column="26">newFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="610" pos:column="9">return <expr><lit:literal type="boolean" pos:line="610" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="613" pos:column="1">bool</name></type> <name><name pos:line="613" pos:column="6">FileManager</name><op:operator pos:line="613" pos:column="17">::</op:operator><name pos:line="613" pos:column="19">saveBuffer</name></name><parameter_list pos:line="613" pos:column="29">(<param><decl><type><name pos:line="613" pos:column="30">BufferID</name></type> <name pos:line="613" pos:column="39">id</name></decl></param>, <param><decl><type><specifier pos:line="613" pos:column="43">const</specifier> <name pos:line="613" pos:column="49">TCHAR</name> <type:modifier pos:line="613" pos:column="55">*</type:modifier></type> <name pos:line="613" pos:column="57">filename</name></decl></param>, <param><decl><type><name pos:line="613" pos:column="67">bool</name></type> <name pos:line="613" pos:column="72">isCopy</name></decl></param>, <param><decl><type><name pos:line="613" pos:column="80">generic_string</name> <type:modifier pos:line="613" pos:column="95">*</type:modifier></type> <name pos:line="613" pos:column="97">error_msg</name></decl></param>)</parameter_list> <block pos:line="613" pos:column="108">{
	<decl_stmt><decl><type><name pos:line="614" pos:column="9">Buffer</name> <type:modifier pos:line="614" pos:column="16">*</type:modifier></type> <name pos:line="614" pos:column="18">buffer</name> <init pos:line="614" pos:column="25">= <expr><call><name pos:line="614" pos:column="27">getBufferByID</name><argument_list pos:line="614" pos:column="40">(<argument><expr><name pos:line="614" pos:column="41">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="615" pos:column="9">bool</name></type> <name pos:line="615" pos:column="14">isHidden</name> <init pos:line="615" pos:column="23">= <expr><lit:literal type="boolean" pos:line="615" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="616" pos:column="9">bool</name></type> <name pos:line="616" pos:column="14">isSys</name> <init pos:line="616" pos:column="20">= <expr><lit:literal type="boolean" pos:line="616" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="617" pos:column="9">DWORD</name></type> <name pos:line="617" pos:column="15">attrib</name> <init pos:line="617" pos:column="22">= <expr><lit:literal type="number" pos:line="617" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="619" pos:column="9">TCHAR</name></type> <name><name pos:line="619" pos:column="15">fullpath</name><index pos:line="619" pos:column="23">[<expr><name pos:line="619" pos:column="24">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="620" pos:column="9">::</op:operator><name pos:line="620" pos:column="11">GetFullPathName</name></name><argument_list pos:line="620" pos:column="26">(<argument><expr><name pos:line="620" pos:column="27">filename</name></expr></argument>, <argument><expr><name pos:line="620" pos:column="37">MAX_PATH</name></expr></argument>, <argument><expr><name pos:line="620" pos:column="47">fullpath</name></expr></argument>, <argument><expr><name pos:line="620" pos:column="57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="621" pos:column="9">::</op:operator><name pos:line="621" pos:column="11">GetLongPathName</name></name><argument_list pos:line="621" pos:column="26">(<argument><expr><name pos:line="621" pos:column="27">fullpath</name></expr></argument>, <argument><expr><name pos:line="621" pos:column="37">fullpath</name></expr></argument>, <argument><expr><name pos:line="621" pos:column="47">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="622" pos:column="9">if <condition pos:line="622" pos:column="12">(<expr><call><name pos:line="622" pos:column="13">PathFileExists</name><argument_list pos:line="622" pos:column="27">(<argument><expr><name pos:line="622" pos:column="28">fullpath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="622" pos:column="38">
	<block pos:line="623" pos:column="9">{
		<expr_stmt><expr><name pos:line="624" pos:column="17">attrib</name> <op:operator pos:line="624" pos:column="24">=</op:operator> <call><name><op:operator pos:line="624" pos:column="26">::</op:operator><name pos:line="624" pos:column="28">GetFileAttributes</name></name><argument_list pos:line="624" pos:column="45">(<argument><expr><name pos:line="624" pos:column="46">fullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="626" pos:column="17">if <condition pos:line="626" pos:column="20">(<expr><name pos:line="626" pos:column="21">attrib</name> <op:operator pos:line="626" pos:column="28">!=</op:operator> <name pos:line="626" pos:column="31">INVALID_FILE_ATTRIBUTES</name></expr>)</condition><then pos:line="626" pos:column="55">
		<block pos:line="627" pos:column="17">{
			<expr_stmt><expr><name pos:line="628" pos:column="25">isHidden</name> <op:operator pos:line="628" pos:column="34">=</op:operator> <op:operator pos:line="628" pos:column="36">(</op:operator><name pos:line="628" pos:column="37">attrib</name> <op:operator pos:line="628" pos:column="44">&amp;</op:operator> <name pos:line="628" pos:column="46">FILE_ATTRIBUTE_HIDDEN</name><op:operator pos:line="628" pos:column="67">)</op:operator> <op:operator pos:line="628" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="628" pos:column="72">0</lit:literal></expr>;</expr_stmt>
			<if pos:line="629" pos:column="25">if <condition pos:line="629" pos:column="28">(<expr><name pos:line="629" pos:column="29">isHidden</name></expr>)</condition><then pos:line="629" pos:column="38">
				<expr_stmt><expr><call><name><op:operator pos:line="630" pos:column="33">::</op:operator><name pos:line="630" pos:column="35">SetFileAttributes</name></name><argument_list pos:line="630" pos:column="52">(<argument><expr><name pos:line="630" pos:column="53">filename</name></expr></argument>, <argument><expr><name pos:line="630" pos:column="63">attrib</name> <op:operator pos:line="630" pos:column="70">&amp;</op:operator> <op:operator pos:line="630" pos:column="72">~</op:operator><name pos:line="630" pos:column="73">FILE_ATTRIBUTE_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

			<expr_stmt><expr><name pos:line="632" pos:column="25">isSys</name> <op:operator pos:line="632" pos:column="31">=</op:operator> <op:operator pos:line="632" pos:column="33">(</op:operator><name pos:line="632" pos:column="34">attrib</name> <op:operator pos:line="632" pos:column="41">&amp;</op:operator> <name pos:line="632" pos:column="43">FILE_ATTRIBUTE_SYSTEM</name><op:operator pos:line="632" pos:column="64">)</op:operator> <op:operator pos:line="632" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="632" pos:column="69">0</lit:literal></expr>;</expr_stmt>
			<if pos:line="633" pos:column="25">if <condition pos:line="633" pos:column="28">(<expr><name pos:line="633" pos:column="29">isSys</name></expr>)</condition><then pos:line="633" pos:column="35">
				<expr_stmt><expr><call><name><op:operator pos:line="634" pos:column="33">::</op:operator><name pos:line="634" pos:column="35">SetFileAttributes</name></name><argument_list pos:line="634" pos:column="52">(<argument><expr><name pos:line="634" pos:column="53">filename</name></expr></argument>, <argument><expr><name pos:line="634" pos:column="63">attrib</name> <op:operator pos:line="634" pos:column="70">&amp;</op:operator> <op:operator pos:line="634" pos:column="72">~</op:operator><name pos:line="634" pos:column="73">FILE_ATTRIBUTE_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="638" pos:column="9">UniMode</name></type> <name pos:line="638" pos:column="17">mode</name> <init pos:line="638" pos:column="22">= <expr><call><name><name pos:line="638" pos:column="24">buffer</name><op:operator pos:line="638" pos:column="30">-&gt;</op:operator><name pos:line="638" pos:column="32">getUnicodeMode</name></name><argument_list pos:line="638" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="639" pos:column="9">if <condition pos:line="639" pos:column="12">(<expr><name pos:line="639" pos:column="13">mode</name> <op:operator pos:line="639" pos:column="18">==</op:operator> <name pos:line="639" pos:column="21">uniCookie</name></expr>)</condition><then pos:line="639" pos:column="31">
		<expr_stmt><expr><name pos:line="640" pos:column="17">mode</name> <op:operator pos:line="640" pos:column="22">=</op:operator> <name pos:line="640" pos:column="24">uni8Bit</name></expr>;</expr_stmt></then></if>	<comment type="line" pos:line="640" pos:column="33">//set the mode to ANSI to prevent converter from adding BOM and performing conversions, Scintilla's data can be copied directly</comment>

	<decl_stmt><decl><type><name pos:line="642" pos:column="9">Utf8_16_Write</name></type> <name pos:line="642" pos:column="23">UnicodeConvertor</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="643" pos:column="9">UnicodeConvertor</name><op:operator pos:line="643" pos:column="25">.</op:operator><name pos:line="643" pos:column="26">setEncoding</name></name><argument_list pos:line="643" pos:column="37">(<argument><expr><name pos:line="643" pos:column="38">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="645" pos:column="9">int</name></type> <name pos:line="645" pos:column="13">encoding</name> <init pos:line="645" pos:column="22">= <expr><call><name><name pos:line="645" pos:column="24">buffer</name><op:operator pos:line="645" pos:column="30">-&gt;</op:operator><name pos:line="645" pos:column="32">getEncoding</name></name><argument_list pos:line="645" pos:column="43">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="647" pos:column="9">FILE</name> <type:modifier pos:line="647" pos:column="14">*</type:modifier></type><name pos:line="647" pos:column="15">fp</name> <init pos:line="647" pos:column="18">= <expr><call><name><name pos:line="647" pos:column="20">UnicodeConvertor</name><op:operator pos:line="647" pos:column="36">.</op:operator><name pos:line="647" pos:column="37">fopen</name></name><argument_list pos:line="647" pos:column="42">(<argument><expr><name pos:line="647" pos:column="43">fullpath</name></expr></argument>, <argument><expr><call><name pos:line="647" pos:column="53">TEXT</name><argument_list pos:line="647" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="647" pos:column="58">"wb"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="648" pos:column="9">if <condition pos:line="648" pos:column="12">(<expr><name pos:line="648" pos:column="13">fp</name></expr>)</condition><then pos:line="648" pos:column="16">
	<block pos:line="649" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="650" pos:column="17">_pscratchTilla</name><op:operator pos:line="650" pos:column="31">-&gt;</op:operator><name pos:line="650" pos:column="33">execute</name></name><argument_list pos:line="650" pos:column="40">(<argument><expr><name pos:line="650" pos:column="41">SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="650" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="650" pos:column="63">buffer</name><op:operator pos:line="650" pos:column="69">-&gt;</op:operator><name pos:line="650" pos:column="71">_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="650" pos:column="81">//generate new document</comment>

		<decl_stmt><decl><type><name pos:line="652" pos:column="17">int</name></type> <name pos:line="652" pos:column="21">lengthDoc</name> <init pos:line="652" pos:column="31">= <expr><call><name><name pos:line="652" pos:column="33">_pscratchTilla</name><op:operator pos:line="652" pos:column="47">-&gt;</op:operator><name pos:line="652" pos:column="49">getCurrentDocLen</name></name><argument_list pos:line="652" pos:column="65">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="653" pos:column="17">char</name><type:modifier pos:line="653" pos:column="21">*</type:modifier></type> <name pos:line="653" pos:column="23">buf</name> <init pos:line="653" pos:column="27">= <expr><op:operator pos:line="653" pos:column="29">(</op:operator><name pos:line="653" pos:column="30">char</name><op:operator pos:line="653" pos:column="34">*</op:operator><op:operator pos:line="653" pos:column="35">)</op:operator><call><name><name pos:line="653" pos:column="36">_pscratchTilla</name><op:operator pos:line="653" pos:column="50">-&gt;</op:operator><name pos:line="653" pos:column="52">execute</name></name><argument_list pos:line="653" pos:column="59">(<argument><expr><name pos:line="653" pos:column="60">SCI_GETCHARACTERPOINTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="653" pos:column="89">//to get characters directly from Scintilla buffer</comment>
		<decl_stmt><decl><type><name pos:line="654" pos:column="17">size_t</name></type> <name pos:line="654" pos:column="24">items_written</name> <init pos:line="654" pos:column="38">= <expr><lit:literal type="number" pos:line="654" pos:column="40">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="655" pos:column="17">if <condition pos:line="655" pos:column="20">(<expr><name pos:line="655" pos:column="21">encoding</name> <op:operator pos:line="655" pos:column="30">==</op:operator> <op:operator pos:line="655" pos:column="33">-</op:operator><lit:literal type="number" pos:line="655" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="655" pos:column="36"> <comment type="line" pos:line="655" pos:column="37">//no special encoding; can be handled directly by Utf8_16_Write</comment>
		<block pos:line="656" pos:column="17">{
			<expr_stmt><expr><name pos:line="657" pos:column="25">items_written</name> <op:operator pos:line="657" pos:column="39">=</op:operator> <call><name><name pos:line="657" pos:column="41">UnicodeConvertor</name><op:operator pos:line="657" pos:column="57">.</op:operator><name pos:line="657" pos:column="58">fwrite</name></name><argument_list pos:line="657" pos:column="64">(<argument><expr><name pos:line="657" pos:column="65">buf</name></expr></argument>, <argument><expr><name pos:line="657" pos:column="70">lengthDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="658" pos:column="25">if <condition pos:line="658" pos:column="28">(<expr><name pos:line="658" pos:column="29">lengthDoc</name> <op:operator pos:line="658" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="658" pos:column="42">0</lit:literal></expr>)</condition><then pos:line="658" pos:column="44">
				<expr_stmt><expr><name pos:line="659" pos:column="33">items_written</name> <op:operator pos:line="659" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="659" pos:column="49">1</lit:literal></expr>;</expr_stmt></then></if>
		}</block></then>
		<else pos:line="661" pos:column="17">else
		<block pos:line="662" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="663" pos:column="25">WcharMbcsConvertor</name> <type:modifier pos:line="663" pos:column="44">*</type:modifier></type><name pos:line="663" pos:column="45">wmc</name> <init pos:line="663" pos:column="49">= <expr><call><name><name pos:line="663" pos:column="51">WcharMbcsConvertor</name><op:operator pos:line="663" pos:column="69">::</op:operator><name pos:line="663" pos:column="71">getInstance</name></name><argument_list pos:line="663" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="664" pos:column="25">int</name></type> <name pos:line="664" pos:column="29">grabSize</name></decl>;</decl_stmt>
			<for pos:line="665" pos:column="25">for (<init><decl><type><name pos:line="665" pos:column="30">int</name></type> <name pos:line="665" pos:column="34">i</name> <init pos:line="665" pos:column="36">= <expr><lit:literal type="number" pos:line="665" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="665" pos:column="41">i</name> <op:operator pos:line="665" pos:column="43">&lt;</op:operator> <name pos:line="665" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="665" pos:column="56">i</name> <op:operator pos:line="665" pos:column="58">+=</op:operator> <name pos:line="665" pos:column="61">grabSize</name></expr></incr>)
			<block pos:line="666" pos:column="25">{
				<expr_stmt><expr><name pos:line="667" pos:column="33">grabSize</name> <op:operator pos:line="667" pos:column="42">=</op:operator> <name pos:line="667" pos:column="44">lengthDoc</name> <op:operator pos:line="667" pos:column="54">-</op:operator> <name pos:line="667" pos:column="56">i</name></expr>;</expr_stmt>
				<if pos:line="668" pos:column="33">if <condition pos:line="668" pos:column="36">(<expr><name pos:line="668" pos:column="37">grabSize</name> <op:operator pos:line="668" pos:column="46">&gt;</op:operator> <name pos:line="668" pos:column="48">blockSize</name></expr>)</condition><then pos:line="668" pos:column="58"> 
					<expr_stmt><expr><name pos:line="669" pos:column="41">grabSize</name> <op:operator pos:line="669" pos:column="50">=</op:operator> <name pos:line="669" pos:column="52">blockSize</name></expr>;</expr_stmt></then></if>
				
				<decl_stmt><decl><type><name pos:line="671" pos:column="33">int</name></type> <name pos:line="671" pos:column="37">newDataLen</name> <init pos:line="671" pos:column="48">= <expr><lit:literal type="number" pos:line="671" pos:column="50">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="672" pos:column="33">int</name></type> <name pos:line="672" pos:column="37">incompleteMultibyteChar</name> <init pos:line="672" pos:column="61">= <expr><lit:literal type="number" pos:line="672" pos:column="63">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="673" pos:column="33">const</specifier> <name pos:line="673" pos:column="39">char</name> <type:modifier pos:line="673" pos:column="44">*</type:modifier></type><name pos:line="673" pos:column="45">newData</name> <init pos:line="673" pos:column="53">= <expr><call><name><name pos:line="673" pos:column="55">wmc</name><op:operator pos:line="673" pos:column="58">-&gt;</op:operator><name pos:line="673" pos:column="60">encode</name></name><argument_list pos:line="673" pos:column="66">(<argument><expr><name pos:line="673" pos:column="67">SC_CP_UTF8</name></expr></argument>, <argument><expr><name pos:line="673" pos:column="79">encoding</name></expr></argument>, <argument><expr><name pos:line="673" pos:column="89">buf</name><op:operator pos:line="673" pos:column="92">+</op:operator><name pos:line="673" pos:column="93">i</name></expr></argument>, <argument><expr><name pos:line="673" pos:column="96">grabSize</name></expr></argument>, <argument><expr><op:operator pos:line="673" pos:column="106">&amp;</op:operator><name pos:line="673" pos:column="107">newDataLen</name></expr></argument>, <argument><expr><op:operator pos:line="673" pos:column="119">&amp;</op:operator><name pos:line="673" pos:column="120">incompleteMultibyteChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="674" pos:column="33">grabSize</name> <op:operator pos:line="674" pos:column="42">-=</op:operator> <name pos:line="674" pos:column="45">incompleteMultibyteChar</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="675" pos:column="33">items_written</name> <op:operator pos:line="675" pos:column="47">=</op:operator> <call><name><name pos:line="675" pos:column="49">UnicodeConvertor</name><op:operator pos:line="675" pos:column="65">.</op:operator><name pos:line="675" pos:column="66">fwrite</name></name><argument_list pos:line="675" pos:column="72">(<argument><expr><name pos:line="675" pos:column="73">newData</name></expr></argument>, <argument><expr><name pos:line="675" pos:column="82">newDataLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
		<expr_stmt><expr><call><name><name pos:line="678" pos:column="17">UnicodeConvertor</name><op:operator pos:line="678" pos:column="33">.</op:operator><name pos:line="678" pos:column="34">fclose</name></name><argument_list pos:line="678" pos:column="40">()</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="680" pos:column="17">// Error, we didn't write the entire document to disk.</comment>
		<comment type="line" pos:line="681" pos:column="17">// Note that fwrite() doesn't return the number of bytes written, but rather the number of ITEMS.</comment>
		<if pos:line="682" pos:column="17">if<condition pos:line="682" pos:column="19">(<expr><name pos:line="682" pos:column="20">items_written</name> <op:operator pos:line="682" pos:column="34">!=</op:operator> <lit:literal type="number" pos:line="682" pos:column="37">1</lit:literal></expr>)</condition><then pos:line="682" pos:column="39">
		<block pos:line="683" pos:column="17">{
			<if pos:line="684" pos:column="25">if<condition pos:line="684" pos:column="27">(<expr><name pos:line="684" pos:column="28">error_msg</name> <op:operator pos:line="684" pos:column="38">!=</op:operator> <name pos:line="684" pos:column="41">NULL</name></expr>)</condition><then pos:line="684" pos:column="46">
				<expr_stmt><expr><op:operator pos:line="685" pos:column="33">*</op:operator><name pos:line="685" pos:column="34">error_msg</name> <op:operator pos:line="685" pos:column="44">=</op:operator> <call><name pos:line="685" pos:column="46">TEXT</name><argument_list pos:line="685" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="685" pos:column="51">"Not enough space on disk to save file."</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<return pos:line="686" pos:column="25">return <expr><lit:literal type="boolean" pos:line="686" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>

		<if pos:line="689" pos:column="17">if <condition pos:line="689" pos:column="20">(<expr><name pos:line="689" pos:column="21">isHidden</name></expr>)</condition><then pos:line="689" pos:column="30">
			<expr_stmt><expr><call><name><op:operator pos:line="690" pos:column="25">::</op:operator><name pos:line="690" pos:column="27">SetFileAttributes</name></name><argument_list pos:line="690" pos:column="44">(<argument><expr><name pos:line="690" pos:column="45">fullpath</name></expr></argument>, <argument><expr><name pos:line="690" pos:column="55">attrib</name> <op:operator pos:line="690" pos:column="62">|</op:operator> <name pos:line="690" pos:column="64">FILE_ATTRIBUTE_HIDDEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<if pos:line="692" pos:column="17">if <condition pos:line="692" pos:column="20">(<expr><name pos:line="692" pos:column="21">isSys</name></expr>)</condition><then pos:line="692" pos:column="27">
			<expr_stmt><expr><call><name><op:operator pos:line="693" pos:column="25">::</op:operator><name pos:line="693" pos:column="27">SetFileAttributes</name></name><argument_list pos:line="693" pos:column="44">(<argument><expr><name pos:line="693" pos:column="45">fullpath</name></expr></argument>, <argument><expr><name pos:line="693" pos:column="55">attrib</name> <op:operator pos:line="693" pos:column="62">|</op:operator> <name pos:line="693" pos:column="64">FILE_ATTRIBUTE_SYSTEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<if pos:line="695" pos:column="17">if <condition pos:line="695" pos:column="20">(<expr><name pos:line="695" pos:column="21">isCopy</name></expr>)</condition><then pos:line="695" pos:column="28"> <block pos:line="695" pos:column="29">{
			<expr_stmt><expr><call><name><name pos:line="696" pos:column="25">_pscratchTilla</name><op:operator pos:line="696" pos:column="39">-&gt;</op:operator><name pos:line="696" pos:column="41">execute</name></name><argument_list pos:line="696" pos:column="48">(<argument><expr><name pos:line="696" pos:column="49">SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="696" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><name pos:line="696" pos:column="71">_scratchDocDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="697" pos:column="25">return <expr><lit:literal type="boolean" pos:line="697" pos:column="32">true</lit:literal></expr>;</return>	<comment type="line" pos:line="697" pos:column="41">//all done</comment>
		}</block></then></if>

		<expr_stmt><expr><call><name><name pos:line="700" pos:column="17">buffer</name><op:operator pos:line="700" pos:column="23">-&gt;</op:operator><name pos:line="700" pos:column="25">setFileName</name></name><argument_list pos:line="700" pos:column="36">(<argument><expr><name pos:line="700" pos:column="37">fullpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="701" pos:column="17">buffer</name><op:operator pos:line="701" pos:column="23">-&gt;</op:operator><name pos:line="701" pos:column="25">setDirty</name></name><argument_list pos:line="701" pos:column="33">(<argument><expr><lit:literal type="boolean" pos:line="701" pos:column="34">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="702" pos:column="17">buffer</name><op:operator pos:line="702" pos:column="23">-&gt;</op:operator><name pos:line="702" pos:column="25">setStatus</name></name><argument_list pos:line="702" pos:column="34">(<argument><expr><name pos:line="702" pos:column="35">DOC_REGULAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="703" pos:column="17">buffer</name><op:operator pos:line="703" pos:column="23">-&gt;</op:operator><name pos:line="703" pos:column="25">checkFileState</name></name><argument_list pos:line="703" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="704" pos:column="17">_pscratchTilla</name><op:operator pos:line="704" pos:column="31">-&gt;</op:operator><name pos:line="704" pos:column="33">execute</name></name><argument_list pos:line="704" pos:column="40">(<argument><expr><name pos:line="704" pos:column="41">SCI_SETSAVEPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="705" pos:column="17">//_pscratchTilla-&gt;markSavedLines();</comment>
		<expr_stmt><expr><call><name><name pos:line="706" pos:column="17">_pscratchTilla</name><op:operator pos:line="706" pos:column="31">-&gt;</op:operator><name pos:line="706" pos:column="33">execute</name></name><argument_list pos:line="706" pos:column="40">(<argument><expr><name pos:line="706" pos:column="41">SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="706" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><name pos:line="706" pos:column="63">_scratchDocDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:line="708" pos:column="17">return <expr><lit:literal type="boolean" pos:line="708" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="710" pos:column="9">return <expr><lit:literal type="boolean" pos:line="710" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="713" pos:column="1">BufferID</name></type> <name><name pos:line="713" pos:column="10">FileManager</name><op:operator pos:line="713" pos:column="21">::</op:operator><name pos:line="713" pos:column="23">newEmptyDocument</name></name><parameter_list pos:line="713" pos:column="39">()</parameter_list> 
<block pos:line="714" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="715" pos:column="9">generic_string</name></type> <name pos:line="715" pos:column="24">newTitle</name> <init pos:line="715" pos:column="33">= <expr><name pos:line="715" pos:column="35">UNTITLED_STR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="716" pos:column="9">TCHAR</name></type> <name><name pos:line="716" pos:column="15">nb</name><index pos:line="716" pos:column="17">[<expr><lit:literal type="number" pos:line="716" pos:column="18">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="717" pos:column="9">wsprintf</name><argument_list pos:line="717" pos:column="17">(<argument><expr><name pos:line="717" pos:column="18">nb</name></expr></argument>, <argument><expr><call><name pos:line="717" pos:column="22">TEXT</name><argument_list pos:line="717" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="717" pos:column="27">" %d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="717" pos:column="35">_nextNewNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="718" pos:column="9">_nextNewNumber</name><op:operator pos:line="718" pos:column="23">++</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="719" pos:column="9">newTitle</name> <op:operator pos:line="719" pos:column="18">+=</op:operator> <name pos:line="719" pos:column="21">nb</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="721" pos:column="9">Document</name></type> <name pos:line="721" pos:column="18">doc</name> <init pos:line="721" pos:column="22">= <expr><op:operator pos:line="721" pos:column="24">(</op:operator><name pos:line="721" pos:column="25">Document</name><op:operator pos:line="721" pos:column="33">)</op:operator><call><name><name pos:line="721" pos:column="34">_pscratchTilla</name><op:operator pos:line="721" pos:column="48">-&gt;</op:operator><name pos:line="721" pos:column="50">execute</name></name><argument_list pos:line="721" pos:column="57">(<argument><expr><name pos:line="721" pos:column="58">SCI_CREATEDOCUMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="721" pos:column="81">//this already sets a reference for filemanager</comment>
	<decl_stmt><decl><type><name pos:line="722" pos:column="9">Buffer</name> <type:modifier pos:line="722" pos:column="16">*</type:modifier></type> <name pos:line="722" pos:column="18">newBuf</name> <init pos:line="722" pos:column="25">= <expr><op:operator pos:line="722" pos:column="27">new</op:operator> <call><name pos:line="722" pos:column="31">Buffer</name><argument_list pos:line="722" pos:column="37">(<argument><expr><name pos:line="722" pos:column="38">this</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="44">_nextBufferID</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="59">doc</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="64">DOC_UNNAMED</name></expr></argument>, <argument><expr><call><name><name pos:line="722" pos:column="77">newTitle</name><op:operator pos:line="722" pos:column="85">.</op:operator><name pos:line="722" pos:column="86">c_str</name></name><argument_list pos:line="722" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="723" pos:column="9">BufferID</name></type> <name pos:line="723" pos:column="18">id</name> <init pos:line="723" pos:column="21">= <expr><op:operator pos:line="723" pos:column="23">(</op:operator><name pos:line="723" pos:column="24">BufferID</name><op:operator pos:line="723" pos:column="32">)</op:operator><name pos:line="723" pos:column="33">newBuf</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="724" pos:column="9">newBuf</name><op:operator pos:line="724" pos:column="15">-&gt;</op:operator><name pos:line="724" pos:column="17">_id</name></name> <op:operator pos:line="724" pos:column="21">=</op:operator> <name pos:line="724" pos:column="23">id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="725" pos:column="9">_buffers</name><op:operator pos:line="725" pos:column="17">.</op:operator><name pos:line="725" pos:column="18">push_back</name></name><argument_list pos:line="725" pos:column="27">(<argument><expr><name pos:line="725" pos:column="28">newBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="726" pos:column="9">_nrBufs</name><op:operator pos:line="726" pos:column="16">++</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="727" pos:column="9">_nextBufferID</name><op:operator pos:line="727" pos:column="22">++</op:operator></expr>;</expr_stmt>
	<return pos:line="728" pos:column="9">return <expr><name pos:line="728" pos:column="16">id</name></expr>;</return>
}</block></function>

<function><type><name pos:line="731" pos:column="1">BufferID</name></type> <name><name pos:line="731" pos:column="10">FileManager</name><op:operator pos:line="731" pos:column="21">::</op:operator><name pos:line="731" pos:column="23">bufferFromDocument</name></name><parameter_list pos:line="731" pos:column="41">(<param><decl><type><name pos:line="731" pos:column="42">Document</name></type> <name pos:line="731" pos:column="51">doc</name></decl></param>, <param><decl><type><name pos:line="731" pos:column="56">bool</name></type> <name pos:line="731" pos:column="61">dontIncrease</name></decl></param>, <param><decl><type><name pos:line="731" pos:column="75">bool</name></type> <name pos:line="731" pos:column="80">dontRef</name></decl></param>)</parameter_list>  
<block pos:line="732" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="733" pos:column="9">generic_string</name></type> <name pos:line="733" pos:column="24">newTitle</name> <init pos:line="733" pos:column="33">= <expr><name pos:line="733" pos:column="35">UNTITLED_STR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="734" pos:column="9">TCHAR</name></type> <name><name pos:line="734" pos:column="15">nb</name><index pos:line="734" pos:column="17">[<expr><lit:literal type="number" pos:line="734" pos:column="18">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="735" pos:column="9">wsprintf</name><argument_list pos:line="735" pos:column="17">(<argument><expr><name pos:line="735" pos:column="18">nb</name></expr></argument>, <argument><expr><call><name pos:line="735" pos:column="22">TEXT</name><argument_list pos:line="735" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="735" pos:column="27">" %d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="735" pos:column="35">_nextNewNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="736" pos:column="9">newTitle</name> <op:operator pos:line="736" pos:column="18">+=</op:operator> <name pos:line="736" pos:column="21">nb</name></expr>;</expr_stmt>

	<if pos:line="738" pos:column="9">if <condition pos:line="738" pos:column="12">(<expr><op:operator pos:line="738" pos:column="13">!</op:operator><name pos:line="738" pos:column="14">dontRef</name></expr>)</condition><then pos:line="738" pos:column="22">
		<expr_stmt><expr><call><name><name pos:line="739" pos:column="17">_pscratchTilla</name><op:operator pos:line="739" pos:column="31">-&gt;</op:operator><name pos:line="739" pos:column="33">execute</name></name><argument_list pos:line="739" pos:column="40">(<argument><expr><name pos:line="739" pos:column="41">SCI_ADDREFDOCUMENT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="739" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><name pos:line="739" pos:column="64">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>	<comment type="line" pos:line="739" pos:column="73">//set reference for FileManager</comment>
	<decl_stmt><decl><type><name pos:line="740" pos:column="9">Buffer</name> <type:modifier pos:line="740" pos:column="16">*</type:modifier></type> <name pos:line="740" pos:column="18">newBuf</name> <init pos:line="740" pos:column="25">= <expr><op:operator pos:line="740" pos:column="27">new</op:operator> <call><name pos:line="740" pos:column="31">Buffer</name><argument_list pos:line="740" pos:column="37">(<argument><expr><name pos:line="740" pos:column="38">this</name></expr></argument>, <argument><expr><name pos:line="740" pos:column="44">_nextBufferID</name></expr></argument>, <argument><expr><name pos:line="740" pos:column="59">doc</name></expr></argument>, <argument><expr><name pos:line="740" pos:column="64">DOC_UNNAMED</name></expr></argument>, <argument><expr><call><name><name pos:line="740" pos:column="77">newTitle</name><op:operator pos:line="740" pos:column="85">.</op:operator><name pos:line="740" pos:column="86">c_str</name></name><argument_list pos:line="740" pos:column="91">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="741" pos:column="9">BufferID</name></type> <name pos:line="741" pos:column="18">id</name> <init pos:line="741" pos:column="21">= <expr><op:operator pos:line="741" pos:column="23">(</op:operator><name pos:line="741" pos:column="24">BufferID</name><op:operator pos:line="741" pos:column="32">)</op:operator><name pos:line="741" pos:column="33">newBuf</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="742" pos:column="9">newBuf</name><op:operator pos:line="742" pos:column="15">-&gt;</op:operator><name pos:line="742" pos:column="17">_id</name></name> <op:operator pos:line="742" pos:column="21">=</op:operator> <name pos:line="742" pos:column="23">id</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="743" pos:column="9">_buffers</name><op:operator pos:line="743" pos:column="17">.</op:operator><name pos:line="743" pos:column="18">push_back</name></name><argument_list pos:line="743" pos:column="27">(<argument><expr><name pos:line="743" pos:column="28">newBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="744" pos:column="9">_nrBufs</name><op:operator pos:line="744" pos:column="16">++</op:operator></expr>;</expr_stmt>

	<if pos:line="746" pos:column="9">if <condition pos:line="746" pos:column="12">(<expr><op:operator pos:line="746" pos:column="13">!</op:operator><name pos:line="746" pos:column="14">dontIncrease</name></expr>)</condition><then pos:line="746" pos:column="27">
		<expr_stmt><expr><name pos:line="747" pos:column="17">_nextBufferID</name><op:operator pos:line="747" pos:column="30">++</op:operator></expr>;</expr_stmt></then></if>
	<return pos:line="748" pos:column="9">return <expr><name pos:line="748" pos:column="16">id</name></expr>;</return>
}</block></function>

<function><type><name pos:line="751" pos:column="1">bool</name></type> <name><name pos:line="751" pos:column="6">FileManager</name><op:operator pos:line="751" pos:column="17">::</op:operator><name pos:line="751" pos:column="19">loadFileData</name></name><parameter_list pos:line="751" pos:column="31">(<param><decl><type><name pos:line="751" pos:column="32">Document</name></type> <name pos:line="751" pos:column="41">doc</name></decl></param>, <param><decl><type><specifier pos:line="751" pos:column="46">const</specifier> <name pos:line="751" pos:column="52">TCHAR</name> <type:modifier pos:line="751" pos:column="58">*</type:modifier></type> <name pos:line="751" pos:column="60">filename</name></decl></param>, <param><decl><type><name pos:line="751" pos:column="70">Utf8_16_Read</name> <type:modifier pos:line="751" pos:column="83">*</type:modifier></type> <name pos:line="751" pos:column="85">UnicodeConvertor</name></decl></param>, <param><decl><type><name pos:line="751" pos:column="103">LangType</name></type> <name pos:line="751" pos:column="112">language</name></decl></param>, <param><decl><type><name pos:line="751" pos:column="122">int</name> <type:modifier pos:line="751" pos:column="126">&amp;</type:modifier></type> <name pos:line="751" pos:column="128">encoding</name></decl></param>, <param><decl><type><name pos:line="751" pos:column="138">formatType</name> <type:modifier pos:line="751" pos:column="149">*</type:modifier></type><name pos:line="751" pos:column="150">pFormat</name></decl></param>)</parameter_list>
<block pos:line="752" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="753" pos:column="9">const</specifier> <name pos:line="753" pos:column="15">int</name></type> <name pos:line="753" pos:column="19">blockSize</name> <init pos:line="753" pos:column="29">= <expr><lit:literal type="number" pos:line="753" pos:column="31">128</lit:literal> <op:operator pos:line="753" pos:column="35">*</op:operator> <lit:literal type="number" pos:line="753" pos:column="37">1024</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="753" pos:column="49">//128 kB</comment>
	<decl_stmt><decl><type><name pos:line="754" pos:column="9">char</name></type> <name><name pos:line="754" pos:column="14">data</name><index pos:line="754" pos:column="18">[<expr><name pos:line="754" pos:column="19">blockSize</name><op:operator pos:line="754" pos:column="28">+</op:operator><lit:literal type="number" pos:line="754" pos:column="29">8</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="755" pos:column="9">FILE</name> <type:modifier pos:line="755" pos:column="14">*</type:modifier></type><name pos:line="755" pos:column="15">fp</name> <init pos:line="755" pos:column="18">= <expr><call><name pos:line="755" pos:column="20">generic_fopen</name><argument_list pos:line="755" pos:column="33">(<argument><expr><name pos:line="755" pos:column="34">filename</name></expr></argument>, <argument><expr><call><name pos:line="755" pos:column="44">TEXT</name><argument_list pos:line="755" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="755" pos:column="49">"rb"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="756" pos:column="9">if <condition pos:line="756" pos:column="12">(<expr><op:operator pos:line="756" pos:column="13">!</op:operator><name pos:line="756" pos:column="14">fp</name></expr>)</condition><then pos:line="756" pos:column="17">
		<return pos:line="757" pos:column="17">return <expr><lit:literal type="boolean" pos:line="757" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<comment type="line" pos:line="759" pos:column="9">//Get file size</comment>
	<expr_stmt><expr><call><name pos:line="760" pos:column="9">_fseeki64</name> <argument_list pos:line="760" pos:column="19">(<argument><expr><name pos:line="760" pos:column="20">fp</name></expr></argument> , <argument><expr><lit:literal type="number" pos:line="760" pos:column="25">0</lit:literal></expr></argument> , <argument><expr><name pos:line="760" pos:column="29">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="761" pos:column="9">unsigned</name> <name pos:line="761" pos:column="18">__int64</name></type> <name pos:line="761" pos:column="26">fileSize</name> <init pos:line="761" pos:column="35">=<expr><call><name pos:line="761" pos:column="36">_ftelli64</name><argument_list pos:line="761" pos:column="45">(<argument><expr><name pos:line="761" pos:column="46">fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="762" pos:column="9">rewind</name><argument_list pos:line="762" pos:column="15">(<argument><expr><name pos:line="762" pos:column="16">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="763" pos:column="9">// size/6 is the normal room Scintilla keeps for editing, but here we limit it to 1MiB when loading (maybe we want to load big files without editing them too much)</comment>
	<decl_stmt><decl><type><name pos:line="764" pos:column="9">unsigned</name> <name pos:line="764" pos:column="18">__int64</name></type> <name pos:line="764" pos:column="26">bufferSizeRequested</name> <init pos:line="764" pos:column="46">= <expr><name pos:line="764" pos:column="48">fileSize</name> <op:operator pos:line="764" pos:column="57">+</op:operator> <call><name pos:line="764" pos:column="59">min</name><argument_list pos:line="764" pos:column="62">(<argument><expr><lit:literal type="number" pos:line="764" pos:column="63">1</lit:literal><op:operator pos:line="764" pos:column="64">&lt;&lt;</op:operator><lit:literal type="number" pos:line="764" pos:column="66">20</lit:literal></expr></argument>,<argument><expr><name pos:line="764" pos:column="69">fileSize</name><op:operator pos:line="764" pos:column="77">/</op:operator><lit:literal type="number" pos:line="764" pos:column="78">6</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="765" pos:column="9">// As a 32bit application, we cannot allocate 2 buffer of more than INT_MAX size (it takes the whole address space)</comment>
	<if pos:line="766" pos:column="9">if<condition pos:line="766" pos:column="11">(<expr><name pos:line="766" pos:column="12">bufferSizeRequested</name> <op:operator pos:line="766" pos:column="32">&gt;</op:operator> <name pos:line="766" pos:column="34">INT_MAX</name></expr>)</condition><then pos:line="766" pos:column="42">
	<block pos:line="767" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="768" pos:column="17">::</op:operator><name pos:line="768" pos:column="19">MessageBox</name></name><argument_list pos:line="768" pos:column="29">(<argument><expr><name pos:line="768" pos:column="30">NULL</name></expr></argument>, <argument><expr><call><name pos:line="768" pos:column="36">TEXT</name><argument_list pos:line="768" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="768" pos:column="41">"File is too big to be opened by Notepad++"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="768" pos:column="87">TEXT</name><argument_list pos:line="768" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="768" pos:column="92">"File open problem"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="768" pos:column="114">MB_OK</name><op:operator pos:line="768" pos:column="119">|</op:operator><name pos:line="768" pos:column="120">MB_APPLMODAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block" pos:line="769" pos:column="17">/*
		_nativeLangSpeaker.messageBox("NbFileToOpenImportantWarning",
										_pPublicInterface-&gt;getHSelf(),
										TEXT("File is too big to be opened by Notepad++"),
										TEXT("File open problem"),
										MB_OK|MB_APPLMODAL);
		*/</comment>
		<expr_stmt><expr><call><name pos:line="776" pos:column="17">fclose</name><argument_list pos:line="776" pos:column="23">(<argument><expr><name pos:line="776" pos:column="24">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="777" pos:column="17">return <expr><lit:literal type="boolean" pos:line="777" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>

	<comment type="line" pos:line="780" pos:column="9">//Setup scratchtilla for new filedata</comment>
	<expr_stmt><expr><call><name><name pos:line="781" pos:column="9">_pscratchTilla</name><op:operator pos:line="781" pos:column="23">-&gt;</op:operator><name pos:line="781" pos:column="25">execute</name></name><argument_list pos:line="781" pos:column="32">(<argument><expr><name pos:line="781" pos:column="33">SCI_SETSTATUS</name></expr></argument>, <argument><expr><name pos:line="781" pos:column="48">SC_STATUS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="781" pos:column="63">// reset error status</comment>
	<expr_stmt><expr><call><name><name pos:line="782" pos:column="9">_pscratchTilla</name><op:operator pos:line="782" pos:column="23">-&gt;</op:operator><name pos:line="782" pos:column="25">execute</name></name><argument_list pos:line="782" pos:column="32">(<argument><expr><name pos:line="782" pos:column="33">SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="782" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="782" pos:column="55">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="783" pos:column="9">bool</name></type> <name pos:line="783" pos:column="14">ro</name> <init pos:line="783" pos:column="17">= <expr><call><name><name pos:line="783" pos:column="19">_pscratchTilla</name><op:operator pos:line="783" pos:column="33">-&gt;</op:operator><name pos:line="783" pos:column="35">execute</name></name><argument_list pos:line="783" pos:column="42">(<argument><expr><name pos:line="783" pos:column="43">SCI_GETREADONLY</name></expr></argument>)</argument_list></call> <op:operator pos:line="783" pos:column="60">!=</op:operator> <lit:literal type="number" pos:line="783" pos:column="63">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="784" pos:column="9">if <condition pos:line="784" pos:column="12">(<expr><name pos:line="784" pos:column="13">ro</name></expr>)</condition><then pos:line="784" pos:column="16">
	<block pos:line="785" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="786" pos:column="17">_pscratchTilla</name><op:operator pos:line="786" pos:column="31">-&gt;</op:operator><name pos:line="786" pos:column="33">execute</name></name><argument_list pos:line="786" pos:column="40">(<argument><expr><name pos:line="786" pos:column="41">SCI_SETREADONLY</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="786" pos:column="58">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="788" pos:column="9">_pscratchTilla</name><op:operator pos:line="788" pos:column="23">-&gt;</op:operator><name pos:line="788" pos:column="25">execute</name></name><argument_list pos:line="788" pos:column="32">(<argument><expr><name pos:line="788" pos:column="33">SCI_CLEARALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="789" pos:column="1">#<cpp:directive pos:line="789" pos:column="2">ifdef</cpp:directive> <name pos:line="789" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="790" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="790" pos:column="28">*</type:modifier></type><name pos:line="790" pos:column="29">wmc</name> <init pos:line="790" pos:column="33">= <expr><call><name><name pos:line="790" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="790" pos:column="53">::</op:operator><name pos:line="790" pos:column="55">getInstance</name></name><argument_list pos:line="790" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="791" pos:column="1">#<cpp:directive pos:line="791" pos:column="2">endif</cpp:directive></cpp:endif>
	<if pos:line="792" pos:column="9">if <condition pos:line="792" pos:column="12">(<expr><name pos:line="792" pos:column="13">language</name> <op:operator pos:line="792" pos:column="22">&lt;</op:operator> <name pos:line="792" pos:column="24">L_EXTERNAL</name></expr>)</condition><then pos:line="792" pos:column="35">
	<block pos:line="793" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="794" pos:column="17">_pscratchTilla</name><op:operator pos:line="794" pos:column="31">-&gt;</op:operator><name pos:line="794" pos:column="33">execute</name></name><argument_list pos:line="794" pos:column="40">(<argument><expr><name pos:line="794" pos:column="41">SCI_SETLEXER</name></expr></argument>, <argument><expr><name><name pos:line="794" pos:column="55">ScintillaEditView</name><op:operator pos:line="794" pos:column="72">::</op:operator><name pos:line="794" pos:column="74">langNames</name><index pos:line="794" pos:column="83">[<expr><name pos:line="794" pos:column="84">language</name></expr>]</index></name><op:operator pos:line="794" pos:column="93">.</op:operator><name pos:line="794" pos:column="94">lexerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> 
	<else pos:line="796" pos:column="9">else
	<block pos:line="797" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="798" pos:column="17">int</name></type> <name pos:line="798" pos:column="21">id</name> <init pos:line="798" pos:column="24">= <expr><name pos:line="798" pos:column="26">language</name> <op:operator pos:line="798" pos:column="35">-</op:operator> <name pos:line="798" pos:column="37">L_EXTERNAL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="799" pos:column="17">TCHAR</name> <type:modifier pos:line="799" pos:column="23">*</type:modifier></type> <name pos:line="799" pos:column="25">name</name> <init pos:line="799" pos:column="30">= <expr><call><name><name pos:line="799" pos:column="32">NppParameters</name><op:operator pos:line="799" pos:column="45">::</op:operator><name pos:line="799" pos:column="47">getInstance</name></name><argument_list pos:line="799" pos:column="58">()</argument_list></call><op:operator pos:line="799" pos:column="60">-&gt;</op:operator><call><name pos:line="799" pos:column="62">getELCFromIndex</name><argument_list pos:line="799" pos:column="77">(<argument><expr><name pos:line="799" pos:column="78">id</name></expr></argument>)</argument_list></call><op:operator pos:line="799" pos:column="81">.</op:operator><name pos:line="799" pos:column="82">_name</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef pos:line="800" pos:column="1">#<cpp:directive pos:line="800" pos:column="2">ifdef</cpp:directive> <name pos:line="800" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="801" pos:column="17">const</specifier> <name pos:line="801" pos:column="23">char</name> <type:modifier pos:line="801" pos:column="28">*</type:modifier></type><name pos:line="801" pos:column="29">pName</name> <init pos:line="801" pos:column="35">= <expr><call><name><name pos:line="801" pos:column="37">wmc</name><op:operator pos:line="801" pos:column="40">-&gt;</op:operator><name pos:line="801" pos:column="42">wchar2char</name></name><argument_list pos:line="801" pos:column="52">(<argument><expr><name pos:line="801" pos:column="53">name</name></expr></argument>, <argument><expr><name pos:line="801" pos:column="59">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="802" pos:column="1">#<cpp:directive pos:line="802" pos:column="2">else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><specifier pos:line="803" pos:column="17">const</specifier> <name pos:line="803" pos:column="23">char</name> <type:modifier pos:line="803" pos:column="28">*</type:modifier></type><name pos:line="803" pos:column="29">pName</name> <init pos:line="803" pos:column="35">= <expr><name pos:line="803" pos:column="37">name</name></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="804" pos:column="1">#<cpp:directive pos:line="804" pos:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name><name pos:line="805" pos:column="17">_pscratchTilla</name><op:operator pos:line="805" pos:column="31">-&gt;</op:operator><name pos:line="805" pos:column="33">execute</name></name><argument_list pos:line="805" pos:column="40">(<argument><expr><name pos:line="805" pos:column="41">SCI_SETLEXERLANGUAGE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="805" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="805" pos:column="66">(</op:operator><name pos:line="805" pos:column="67">LPARAM</name><op:operator pos:line="805" pos:column="73">)</op:operator><name pos:line="805" pos:column="74">pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<if pos:line="808" pos:column="9">if <condition pos:line="808" pos:column="12">(<expr><name pos:line="808" pos:column="13">encoding</name> <op:operator pos:line="808" pos:column="22">!=</op:operator> <op:operator pos:line="808" pos:column="25">-</op:operator><lit:literal type="number" pos:line="808" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="808" pos:column="28">
	<block pos:line="809" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="810" pos:column="17">_pscratchTilla</name><op:operator pos:line="810" pos:column="31">-&gt;</op:operator><name pos:line="810" pos:column="33">execute</name></name><argument_list pos:line="810" pos:column="40">(<argument><expr><name pos:line="810" pos:column="41">SCI_SETCODEPAGE</name></expr></argument>, <argument><expr><name pos:line="810" pos:column="58">SC_CP_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="813" pos:column="9">bool</name></type> <name pos:line="813" pos:column="14">success</name> <init pos:line="813" pos:column="22">= <expr><lit:literal type="boolean" pos:line="813" pos:column="24">true</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="814" pos:column="9">int</name></type> <name pos:line="814" pos:column="13">format</name> <init pos:line="814" pos:column="20">= <expr><op:operator pos:line="814" pos:column="22">-</op:operator><lit:literal type="number" pos:line="814" pos:column="23">1</lit:literal></expr></init></decl>;</decl_stmt>
	<macro><name pos:line="815" pos:column="9">__try</name></macro> <block pos:line="815" pos:column="15">{
		<comment type="line" pos:line="816" pos:column="17">// First allocate enough memory for the whole file (this will reduce memory copy during loading)</comment>
		<expr_stmt><expr><call><name><name pos:line="817" pos:column="17">_pscratchTilla</name><op:operator pos:line="817" pos:column="31">-&gt;</op:operator><name pos:line="817" pos:column="33">execute</name></name><argument_list pos:line="817" pos:column="40">(<argument><expr><name pos:line="817" pos:column="41">SCI_ALLOCATE</name></expr></argument>, <argument><expr><call><name pos:line="817" pos:column="55">WPARAM</name><argument_list pos:line="817" pos:column="61">(<argument><expr><name pos:line="817" pos:column="62">bufferSizeRequested</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="818" pos:column="17">if<condition pos:line="818" pos:column="19">(<expr><call><name><name pos:line="818" pos:column="20">_pscratchTilla</name><op:operator pos:line="818" pos:column="34">-&gt;</op:operator><name pos:line="818" pos:column="36">execute</name></name><argument_list pos:line="818" pos:column="43">(<argument><expr><name pos:line="818" pos:column="44">SCI_GETSTATUS</name></expr></argument>)</argument_list></call> <op:operator pos:line="818" pos:column="59">!=</op:operator> <name pos:line="818" pos:column="62">SC_STATUS_OK</name></expr>)</condition><then pos:line="818" pos:column="75"> <throw pos:line="818" pos:column="76">throw;</throw></then></if>

		<decl_stmt><decl><type><name pos:line="820" pos:column="17">size_t</name></type> <name pos:line="820" pos:column="24">lenFile</name> <init pos:line="820" pos:column="32">= <expr><lit:literal type="number" pos:line="820" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="821" pos:column="17">size_t</name></type> <name pos:line="821" pos:column="24">lenConvert</name> <init pos:line="821" pos:column="35">= <expr><lit:literal type="number" pos:line="821" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="821" pos:column="41">//just in case conversion results in 0, but file not empty</comment>
		<decl_stmt><decl><type><name pos:line="822" pos:column="17">bool</name></type> <name pos:line="822" pos:column="22">isFirstTime</name> <init pos:line="822" pos:column="34">= <expr><lit:literal type="boolean" pos:line="822" pos:column="36">true</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="823" pos:column="17">int</name></type> <name pos:line="823" pos:column="21">incompleteMultibyteChar</name> <init pos:line="823" pos:column="45">= <expr><lit:literal type="number" pos:line="823" pos:column="47">0</lit:literal></expr></init></decl>;</decl_stmt>

		<do pos:line="825" pos:column="17">do <block pos:line="825" pos:column="20">{
			<expr_stmt><expr><name pos:line="826" pos:column="25">lenFile</name> <op:operator pos:line="826" pos:column="33">=</op:operator> <call><name pos:line="826" pos:column="35">fread</name><argument_list pos:line="826" pos:column="40">(<argument><expr><name pos:line="826" pos:column="41">data</name><op:operator pos:line="826" pos:column="45">+</op:operator><name pos:line="826" pos:column="46">incompleteMultibyteChar</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="826" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><name pos:line="826" pos:column="74">blockSize</name><op:operator pos:line="826" pos:column="83">-</op:operator><name pos:line="826" pos:column="84">incompleteMultibyteChar</name></expr></argument>, <argument><expr><name pos:line="826" pos:column="109">fp</name></expr></argument>)</argument_list></call> <op:operator pos:line="826" pos:column="113">+</op:operator> <name pos:line="826" pos:column="115">incompleteMultibyteChar</name></expr>;</expr_stmt>

            <comment type="line" pos:line="828" pos:column="13">// check if file contain any BOM</comment>
            <if pos:line="829" pos:column="13">if <condition pos:line="829" pos:column="16">(<expr><name pos:line="829" pos:column="17">isFirstTime</name></expr>)</condition><then pos:line="829" pos:column="29"> 
            <block pos:line="830" pos:column="13">{
                <if pos:line="831" pos:column="17">if <condition pos:line="831" pos:column="20">(<expr><call><name><name pos:line="831" pos:column="21">Utf8_16_Read</name><op:operator pos:line="831" pos:column="33">::</op:operator><name pos:line="831" pos:column="35">determineEncoding</name></name><argument_list pos:line="831" pos:column="52">(<argument><expr><op:operator pos:line="831" pos:column="53">(</op:operator><name pos:line="831" pos:column="54">unsigned</name> <name pos:line="831" pos:column="63">char</name> <op:operator pos:line="831" pos:column="68">*</op:operator><op:operator pos:line="831" pos:column="69">)</op:operator><name pos:line="831" pos:column="70">data</name></expr></argument>, <argument><expr><name pos:line="831" pos:column="76">lenFile</name></expr></argument>)</argument_list></call> <op:operator pos:line="831" pos:column="85">!=</op:operator> <name pos:line="831" pos:column="88">uni8Bit</name></expr>)</condition><then pos:line="831" pos:column="96">
                <block pos:line="832" pos:column="17">{
                    <comment type="line" pos:line="833" pos:column="21">// if file contains any BOM, then encoding will be erased,</comment>
                    <comment type="line" pos:line="834" pos:column="21">// and the document will be interpreted as UTF </comment>
                    <expr_stmt><expr><name pos:line="835" pos:column="21">encoding</name> <op:operator pos:line="835" pos:column="30">=</op:operator> <op:operator pos:line="835" pos:column="32">-</op:operator><lit:literal type="number" pos:line="835" pos:column="33">1</lit:literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name pos:line="837" pos:column="17">isFirstTime</name> <op:operator pos:line="837" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="837" pos:column="31">false</lit:literal></expr>;</expr_stmt>
            }</block></then></if>

			<if pos:line="840" pos:column="25">if <condition pos:line="840" pos:column="28">(<expr><name pos:line="840" pos:column="29">encoding</name> <op:operator pos:line="840" pos:column="38">!=</op:operator> <op:operator pos:line="840" pos:column="41">-</op:operator><lit:literal type="number" pos:line="840" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="840" pos:column="44">
			<block pos:line="841" pos:column="25">{
				<if pos:line="842" pos:column="33">if <condition pos:line="842" pos:column="36">(<expr><name pos:line="842" pos:column="37">encoding</name> <op:operator pos:line="842" pos:column="46">==</op:operator> <name pos:line="842" pos:column="49">SC_CP_UTF8</name></expr>)</condition><then pos:line="842" pos:column="60">
				<block pos:line="843" pos:column="33">{
					<comment type="line" pos:line="844" pos:column="41">// Pass through UTF-8 (this does not check validity of characters, thus inserting a multi-byte character in two halfs is working)</comment>
					<expr_stmt><expr><call><name><name pos:line="845" pos:column="41">_pscratchTilla</name><op:operator pos:line="845" pos:column="55">-&gt;</op:operator><name pos:line="845" pos:column="57">execute</name></name><argument_list pos:line="845" pos:column="64">(<argument><expr><name pos:line="845" pos:column="65">SCI_APPENDTEXT</name></expr></argument>, <argument><expr><name pos:line="845" pos:column="81">lenFile</name></expr></argument>, <argument><expr><op:operator pos:line="845" pos:column="90">(</op:operator><name pos:line="845" pos:column="91">LPARAM</name><op:operator pos:line="845" pos:column="97">)</op:operator><name pos:line="845" pos:column="98">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="847" pos:column="33">else
				<block pos:line="848" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="849" pos:column="41">WcharMbcsConvertor</name> <type:modifier pos:line="849" pos:column="60">*</type:modifier></type><name pos:line="849" pos:column="61">wmc</name> <init pos:line="849" pos:column="65">= <expr><call><name><name pos:line="849" pos:column="67">WcharMbcsConvertor</name><op:operator pos:line="849" pos:column="85">::</op:operator><name pos:line="849" pos:column="87">getInstance</name></name><argument_list pos:line="849" pos:column="98">()</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="850" pos:column="41">int</name></type> <name pos:line="850" pos:column="45">newDataLen</name> <init pos:line="850" pos:column="56">= <expr><lit:literal type="number" pos:line="850" pos:column="58">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier pos:line="851" pos:column="41">const</specifier> <name pos:line="851" pos:column="47">char</name> <type:modifier pos:line="851" pos:column="52">*</type:modifier></type><name pos:line="851" pos:column="53">newData</name> <init pos:line="851" pos:column="61">= <expr><call><name><name pos:line="851" pos:column="63">wmc</name><op:operator pos:line="851" pos:column="66">-&gt;</op:operator><name pos:line="851" pos:column="68">encode</name></name><argument_list pos:line="851" pos:column="74">(<argument><expr><name pos:line="851" pos:column="75">encoding</name></expr></argument>, <argument><expr><name pos:line="851" pos:column="85">SC_CP_UTF8</name></expr></argument>, <argument><expr><name pos:line="851" pos:column="97">data</name></expr></argument>, <argument><expr><name pos:line="851" pos:column="103">lenFile</name></expr></argument>, <argument><expr><op:operator pos:line="851" pos:column="112">&amp;</op:operator><name pos:line="851" pos:column="113">newDataLen</name></expr></argument>, <argument><expr><op:operator pos:line="851" pos:column="125">&amp;</op:operator><name pos:line="851" pos:column="126">incompleteMultibyteChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="852" pos:column="41">_pscratchTilla</name><op:operator pos:line="852" pos:column="55">-&gt;</op:operator><name pos:line="852" pos:column="57">execute</name></name><argument_list pos:line="852" pos:column="64">(<argument><expr><name pos:line="852" pos:column="65">SCI_APPENDTEXT</name></expr></argument>, <argument><expr><name pos:line="852" pos:column="81">newDataLen</name></expr></argument>, <argument><expr><op:operator pos:line="852" pos:column="93">(</op:operator><name pos:line="852" pos:column="94">LPARAM</name><op:operator pos:line="852" pos:column="100">)</op:operator><name pos:line="852" pos:column="101">newData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

				<if pos:line="855" pos:column="33">if <condition pos:line="855" pos:column="36">(<expr><name pos:line="855" pos:column="37">format</name> <op:operator pos:line="855" pos:column="44">==</op:operator> <op:operator pos:line="855" pos:column="47">-</op:operator><lit:literal type="number" pos:line="855" pos:column="48">1</lit:literal></expr>)</condition><then pos:line="855" pos:column="50">
					<expr_stmt><expr><name pos:line="856" pos:column="41">format</name> <op:operator pos:line="856" pos:column="48">=</op:operator> <call><name pos:line="856" pos:column="50">getEOLFormatForm</name><argument_list pos:line="856" pos:column="66">(<argument><expr><name pos:line="856" pos:column="67">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then>
			<else pos:line="858" pos:column="25">else
			<block pos:line="859" pos:column="25">{
				<expr_stmt><expr><name pos:line="860" pos:column="33">lenConvert</name> <op:operator pos:line="860" pos:column="44">=</op:operator> <call><name><name pos:line="860" pos:column="46">UnicodeConvertor</name><op:operator pos:line="860" pos:column="62">-&gt;</op:operator><name pos:line="860" pos:column="64">convert</name></name><argument_list pos:line="860" pos:column="71">(<argument><expr><name pos:line="860" pos:column="72">data</name></expr></argument>, <argument><expr><name pos:line="860" pos:column="78">lenFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="861" pos:column="33">_pscratchTilla</name><op:operator pos:line="861" pos:column="47">-&gt;</op:operator><name pos:line="861" pos:column="49">execute</name></name><argument_list pos:line="861" pos:column="56">(<argument><expr><name pos:line="861" pos:column="57">SCI_APPENDTEXT</name></expr></argument>, <argument><expr><name pos:line="861" pos:column="73">lenConvert</name></expr></argument>, <argument><expr><call pos:line="861" pos:column="85">(<name pos:line="861" pos:column="86">LPARAM</name>)<argument_list pos:line="861" pos:column="93">(<argument><expr><call><name><name pos:line="861" pos:column="94">UnicodeConvertor</name><op:operator pos:line="861" pos:column="110">-&gt;</op:operator><name pos:line="861" pos:column="112">getNewBuf</name></name><argument_list pos:line="861" pos:column="121">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<if pos:line="863" pos:column="25">if<condition pos:line="863" pos:column="27">(<expr><call><name><name pos:line="863" pos:column="28">_pscratchTilla</name><op:operator pos:line="863" pos:column="42">-&gt;</op:operator><name pos:line="863" pos:column="44">execute</name></name><argument_list pos:line="863" pos:column="51">(<argument><expr><name pos:line="863" pos:column="52">SCI_GETSTATUS</name></expr></argument>)</argument_list></call> <op:operator pos:line="863" pos:column="67">!=</op:operator> <name pos:line="863" pos:column="70">SC_STATUS_OK</name></expr>)</condition><then pos:line="863" pos:column="83"> <throw pos:line="863" pos:column="84">throw;</throw></then></if>

			<if pos:line="865" pos:column="25">if<condition pos:line="865" pos:column="27">(<expr><name pos:line="865" pos:column="28">incompleteMultibyteChar</name> <op:operator pos:line="865" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="865" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="865" pos:column="57">
			<block pos:line="866" pos:column="25">{
				<comment type="line" pos:line="867" pos:column="33">// copy bytes to next buffer</comment>
				<expr_stmt><expr><call><name pos:line="868" pos:column="33">memcpy</name><argument_list pos:line="868" pos:column="39">(<argument><expr><name pos:line="868" pos:column="40">data</name></expr></argument>, <argument><expr><name pos:line="868" pos:column="46">data</name><op:operator pos:line="868" pos:column="50">+</op:operator><name pos:line="868" pos:column="51">blockSize</name><op:operator pos:line="868" pos:column="60">-</op:operator><name pos:line="868" pos:column="61">incompleteMultibyteChar</name></expr></argument>, <argument><expr><name pos:line="868" pos:column="86">incompleteMultibyteChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			
		}</block> while <condition pos:line="871" pos:column="25">(<expr><name pos:line="871" pos:column="26">lenFile</name> <op:operator pos:line="871" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="871" pos:column="36">0</lit:literal></expr>)</condition>;</do>
	}</block> <macro><name pos:line="872" pos:column="11">__except</name><argument_list pos:line="872" pos:column="19">(<argument pos:line="872" pos:column="20">EXCEPTION_EXECUTE_HANDLER</argument>)</argument_list></macro> <block pos:line="872" pos:column="47">{  <comment type="line" pos:line="872" pos:column="50">//TODO: should filter correctly for other exceptions; the old filter(GetExceptionCode(), GetExceptionInformation()) was only catching access violations</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="873" pos:column="17">::</op:operator><name pos:line="873" pos:column="19">MessageBox</name></name><argument_list pos:line="873" pos:column="29">(<argument><expr><name pos:line="873" pos:column="30">NULL</name></expr></argument>, <argument><expr><call><name pos:line="873" pos:column="36">TEXT</name><argument_list pos:line="873" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="873" pos:column="41">"File is too big to be opened by Notepad++"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="873" pos:column="87">TEXT</name><argument_list pos:line="873" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="873" pos:column="92">"File open problem"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="873" pos:column="114">MB_OK</name><op:operator pos:line="873" pos:column="119">|</op:operator><name pos:line="873" pos:column="120">MB_APPLMODAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="874" pos:column="17">success</name> <op:operator pos:line="874" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="874" pos:column="27">false</lit:literal></expr>;</expr_stmt>
	}</block>
	
	<expr_stmt><expr><call><name pos:line="877" pos:column="9">fclose</name><argument_list pos:line="877" pos:column="15">(<argument><expr><name pos:line="877" pos:column="16">fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="879" pos:column="9">if <condition pos:line="879" pos:column="12">(<expr><name pos:line="879" pos:column="13">pFormat</name> <op:operator pos:line="879" pos:column="21">!=</op:operator> <name pos:line="879" pos:column="24">NULL</name></expr>)</condition><then pos:line="879" pos:column="29">
	<block pos:line="880" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="881" pos:column="17">*</op:operator><name pos:line="881" pos:column="18">pFormat</name> <op:operator pos:line="881" pos:column="26">=</op:operator> <op:operator pos:line="881" pos:column="28">(</op:operator><name pos:line="881" pos:column="29">format</name> <op:operator pos:line="881" pos:column="36">==</op:operator> <op:operator pos:line="881" pos:column="39">-</op:operator><lit:literal type="number" pos:line="881" pos:column="40">1</lit:literal><op:operator pos:line="881" pos:column="41">)</op:operator><op:operator pos:line="881" pos:column="42">?</op:operator><name pos:line="881" pos:column="43">WIN_FORMAT</name><op:operator pos:line="881" pos:column="53">:</op:operator><op:operator pos:line="881" pos:column="54">(</op:operator><name pos:line="881" pos:column="55">formatType</name><op:operator pos:line="881" pos:column="65">)</op:operator><name pos:line="881" pos:column="66">format</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="883" pos:column="9">_pscratchTilla</name><op:operator pos:line="883" pos:column="23">-&gt;</op:operator><name pos:line="883" pos:column="25">execute</name></name><argument_list pos:line="883" pos:column="32">(<argument><expr><name pos:line="883" pos:column="33">SCI_EMPTYUNDOBUFFER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="884" pos:column="9">_pscratchTilla</name><op:operator pos:line="884" pos:column="23">-&gt;</op:operator><name pos:line="884" pos:column="25">execute</name></name><argument_list pos:line="884" pos:column="32">(<argument><expr><name pos:line="884" pos:column="33">SCI_SETSAVEPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="885" pos:column="9">if <condition pos:line="885" pos:column="12">(<expr><name pos:line="885" pos:column="13">ro</name></expr>)</condition><then pos:line="885" pos:column="16"> <block pos:line="885" pos:column="17">{
		<expr_stmt><expr><call><name><name pos:line="886" pos:column="17">_pscratchTilla</name><op:operator pos:line="886" pos:column="31">-&gt;</op:operator><name pos:line="886" pos:column="33">execute</name></name><argument_list pos:line="886" pos:column="40">(<argument><expr><name pos:line="886" pos:column="41">SCI_SETREADONLY</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="886" pos:column="58">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="888" pos:column="9">_pscratchTilla</name><op:operator pos:line="888" pos:column="23">-&gt;</op:operator><name pos:line="888" pos:column="25">execute</name></name><argument_list pos:line="888" pos:column="32">(<argument><expr><name pos:line="888" pos:column="33">SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="888" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="888" pos:column="55">_scratchDocDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="889" pos:column="9">return <expr><name pos:line="889" pos:column="16">success</name></expr>;</return>
}</block></function>

<function><type><name pos:line="892" pos:column="1">BufferID</name></type> <name><name pos:line="892" pos:column="10">FileManager</name><op:operator pos:line="892" pos:column="21">::</op:operator><name pos:line="892" pos:column="23">getBufferFromName</name></name><parameter_list pos:line="892" pos:column="40">(<param><decl><type><specifier pos:line="892" pos:column="41">const</specifier> <name pos:line="892" pos:column="47">TCHAR</name> <type:modifier pos:line="892" pos:column="53">*</type:modifier></type> <name pos:line="892" pos:column="55">name</name></decl></param>)</parameter_list> <block pos:line="892" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="893" pos:column="9">TCHAR</name></type> <name><name pos:line="893" pos:column="15">fullpath</name><index pos:line="893" pos:column="23">[<expr><name pos:line="893" pos:column="24">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="894" pos:column="9">::</op:operator><name pos:line="894" pos:column="11">GetFullPathName</name></name><argument_list pos:line="894" pos:column="26">(<argument><expr><name pos:line="894" pos:column="27">name</name></expr></argument>, <argument><expr><name pos:line="894" pos:column="33">MAX_PATH</name></expr></argument>, <argument><expr><name pos:line="894" pos:column="43">fullpath</name></expr></argument>, <argument><expr><name pos:line="894" pos:column="53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="895" pos:column="9">::</op:operator><name pos:line="895" pos:column="11">GetLongPathName</name></name><argument_list pos:line="895" pos:column="26">(<argument><expr><name pos:line="895" pos:column="27">fullpath</name></expr></argument>, <argument><expr><name pos:line="895" pos:column="37">fullpath</name></expr></argument>, <argument><expr><name pos:line="895" pos:column="47">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="896" pos:column="9">for(<init><decl><type><name pos:line="896" pos:column="13">size_t</name></type> <name pos:line="896" pos:column="20">i</name> <init pos:line="896" pos:column="22">= <expr><lit:literal type="number" pos:line="896" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="896" pos:column="27">i</name> <op:operator pos:line="896" pos:column="29">&lt;</op:operator> <call><name><name pos:line="896" pos:column="31">_buffers</name><op:operator pos:line="896" pos:column="39">.</op:operator><name pos:line="896" pos:column="40">size</name></name><argument_list pos:line="896" pos:column="44">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="896" pos:column="48">i</name><op:operator pos:line="896" pos:column="49">++</op:operator></expr></incr>) <block pos:line="896" pos:column="53">{
		<if pos:line="897" pos:column="17">if <condition pos:line="897" pos:column="20">(<expr><op:operator pos:line="897" pos:column="21">!</op:operator><call><name pos:line="897" pos:column="22">lstrcmpi</name><argument_list pos:line="897" pos:column="30">(<argument><expr><name pos:line="897" pos:column="31">name</name></expr></argument>, <argument><expr><call><name><name pos:line="897" pos:column="37">_buffers</name><op:operator pos:line="897" pos:column="45">.</op:operator><name pos:line="897" pos:column="46">at</name></name><argument_list pos:line="897" pos:column="48">(<argument><expr><name pos:line="897" pos:column="49">i</name></expr></argument>)</argument_list></call><op:operator pos:line="897" pos:column="51">-&gt;</op:operator><call><name pos:line="897" pos:column="53">getFullPathName</name><argument_list pos:line="897" pos:column="68">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="897" pos:column="72">
			<return pos:line="898" pos:column="25">return <expr><call><name><name pos:line="898" pos:column="32">_buffers</name><op:operator pos:line="898" pos:column="40">.</op:operator><name pos:line="898" pos:column="41">at</name></name><argument_list pos:line="898" pos:column="43">(<argument><expr><name pos:line="898" pos:column="44">i</name></expr></argument>)</argument_list></call><op:operator pos:line="898" pos:column="46">-&gt;</op:operator><call><name pos:line="898" pos:column="48">getID</name><argument_list pos:line="898" pos:column="53">()</argument_list></call></expr>;</return></then></if>
	}</block></for>
	<return pos:line="900" pos:column="9">return <expr><name pos:line="900" pos:column="16">BUFFER_INVALID</name></expr>;</return>
}</block></function>

<function><type><name pos:line="903" pos:column="1">BufferID</name></type> <name><name pos:line="903" pos:column="10">FileManager</name><op:operator pos:line="903" pos:column="21">::</op:operator><name pos:line="903" pos:column="23">getBufferFromDocument</name></name><parameter_list pos:line="903" pos:column="44">(<param><decl><type><name pos:line="903" pos:column="45">Document</name></type> <name pos:line="903" pos:column="54">doc</name></decl></param>)</parameter_list> <block pos:line="903" pos:column="59">{
	<for pos:line="904" pos:column="9">for(<init><decl><type><name pos:line="904" pos:column="13">size_t</name></type> <name pos:line="904" pos:column="20">i</name> <init pos:line="904" pos:column="22">= <expr><lit:literal type="number" pos:line="904" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="904" pos:column="27">i</name> <op:operator pos:line="904" pos:column="29">&lt;</op:operator> <name pos:line="904" pos:column="31">_nrBufs</name></expr>;</condition> <incr><expr><name pos:line="904" pos:column="40">i</name><op:operator pos:line="904" pos:column="41">++</op:operator></expr></incr>) <block pos:line="904" pos:column="45">{
		<if pos:line="905" pos:column="17">if <condition pos:line="905" pos:column="20">(<expr><name><name pos:line="905" pos:column="21">_buffers</name><index pos:line="905" pos:column="29">[<expr><name pos:line="905" pos:column="30">i</name></expr>]</index></name><op:operator pos:line="905" pos:column="32">-&gt;</op:operator><name pos:line="905" pos:column="34">_doc</name> <op:operator pos:line="905" pos:column="39">==</op:operator> <name pos:line="905" pos:column="42">doc</name></expr>)</condition><then pos:line="905" pos:column="46">
			<return pos:line="906" pos:column="25">return <expr><name><name pos:line="906" pos:column="32">_buffers</name><index pos:line="906" pos:column="40">[<expr><name pos:line="906" pos:column="41">i</name></expr>]</index></name><op:operator pos:line="906" pos:column="43">-&gt;</op:operator><name pos:line="906" pos:column="45">_id</name></expr>;</return></then></if>
	}</block></for>
	<return pos:line="908" pos:column="9">return <expr><name pos:line="908" pos:column="16">BUFFER_INVALID</name></expr>;</return>
}</block></function>

<function><type><name pos:line="911" pos:column="1">bool</name></type> <name><name pos:line="911" pos:column="6">FileManager</name><op:operator pos:line="911" pos:column="17">::</op:operator><name pos:line="911" pos:column="19">createEmptyFile</name></name><parameter_list pos:line="911" pos:column="34">(<param><decl><type><specifier pos:line="911" pos:column="35">const</specifier> <name pos:line="911" pos:column="41">TCHAR</name> <type:modifier pos:line="911" pos:column="47">*</type:modifier></type> <name pos:line="911" pos:column="49">path</name></decl></param>)</parameter_list> <block pos:line="911" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="912" pos:column="9">FILE</name> <type:modifier pos:line="912" pos:column="14">*</type:modifier></type> <name pos:line="912" pos:column="16">file</name> <init pos:line="912" pos:column="21">= <expr><call><name pos:line="912" pos:column="23">generic_fopen</name><argument_list pos:line="912" pos:column="36">(<argument><expr><name pos:line="912" pos:column="37">path</name></expr></argument>, <argument><expr><call><name pos:line="912" pos:column="43">TEXT</name><argument_list pos:line="912" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="912" pos:column="48">"wb"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="913" pos:column="9">if <condition pos:line="913" pos:column="12">(<expr><op:operator pos:line="913" pos:column="13">!</op:operator><name pos:line="913" pos:column="14">file</name></expr>)</condition><then pos:line="913" pos:column="19">
		<return pos:line="914" pos:column="17">return <expr><lit:literal type="boolean" pos:line="914" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><call><name pos:line="915" pos:column="9">fclose</name><argument_list pos:line="915" pos:column="15">(<argument><expr><name pos:line="915" pos:column="16">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="916" pos:column="9">return <expr><lit:literal type="boolean" pos:line="916" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="919" pos:column="1">int</name></type> <name><name pos:line="919" pos:column="5">FileManager</name><op:operator pos:line="919" pos:column="16">::</op:operator><name pos:line="919" pos:column="18">getFileNameFromBuffer</name></name><parameter_list pos:line="919" pos:column="39">(<param><decl><type><name pos:line="919" pos:column="40">BufferID</name></type> <name pos:line="919" pos:column="49">id</name></decl></param>, <param><decl><type><name pos:line="919" pos:column="53">TCHAR</name> <type:modifier pos:line="919" pos:column="59">*</type:modifier></type> <name pos:line="919" pos:column="61">fn2copy</name></decl></param>)</parameter_list> <block pos:line="919" pos:column="70">{
	<if pos:line="920" pos:column="9">if <condition pos:line="920" pos:column="12">(<expr><call><name pos:line="920" pos:column="13">getBufferIndexByID</name><argument_list pos:line="920" pos:column="31">(<argument><expr><name pos:line="920" pos:column="32">id</name></expr></argument>)</argument_list></call> <op:operator pos:line="920" pos:column="36">==</op:operator> <op:operator pos:line="920" pos:column="39">-</op:operator><lit:literal type="number" pos:line="920" pos:column="40">1</lit:literal></expr>)</condition><then pos:line="920" pos:column="42">
		<return pos:line="921" pos:column="17">return <expr><op:operator pos:line="921" pos:column="24">-</op:operator><lit:literal type="number" pos:line="921" pos:column="25">1</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="922" pos:column="9">Buffer</name> <type:modifier pos:line="922" pos:column="16">*</type:modifier></type> <name pos:line="922" pos:column="18">buf</name> <init pos:line="922" pos:column="22">= <expr><call><name pos:line="922" pos:column="24">getBufferByID</name><argument_list pos:line="922" pos:column="37">(<argument><expr><name pos:line="922" pos:column="38">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="923" pos:column="9">if <condition pos:line="923" pos:column="12">(<expr><name pos:line="923" pos:column="13">fn2copy</name></expr>)</condition><then pos:line="923" pos:column="21">
		<expr_stmt><expr><call><name pos:line="924" pos:column="17">lstrcpy</name><argument_list pos:line="924" pos:column="24">(<argument><expr><name pos:line="924" pos:column="25">fn2copy</name></expr></argument>, <argument><expr><call><name><name pos:line="924" pos:column="34">buf</name><op:operator pos:line="924" pos:column="37">-&gt;</op:operator><name pos:line="924" pos:column="39">getFullPathName</name></name><argument_list pos:line="924" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<return pos:line="925" pos:column="9">return <expr><call><name pos:line="925" pos:column="16">lstrlen</name><argument_list pos:line="925" pos:column="23">(<argument><expr><call><name><name pos:line="925" pos:column="24">buf</name><op:operator pos:line="925" pos:column="27">-&gt;</op:operator><name pos:line="925" pos:column="29">getFullPathName</name></name><argument_list pos:line="925" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="928" pos:column="1">int</name></type> <name><name pos:line="928" pos:column="5">FileManager</name><op:operator pos:line="928" pos:column="16">::</op:operator><name pos:line="928" pos:column="18">docLength</name></name><parameter_list pos:line="928" pos:column="27">(<param><decl><type><name pos:line="928" pos:column="28">Buffer</name> <type:modifier pos:line="928" pos:column="35">*</type:modifier></type> <name pos:line="928" pos:column="37">buffer</name></decl></param>)</parameter_list> <specifier pos:line="928" pos:column="45">const</specifier> 
<block pos:line="929" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="930" pos:column="9">_pscratchTilla</name><op:operator pos:line="930" pos:column="23">-&gt;</op:operator><name pos:line="930" pos:column="25">execute</name></name><argument_list pos:line="930" pos:column="32">(<argument><expr><name pos:line="930" pos:column="33">SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="930" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="930" pos:column="55">buffer</name><op:operator pos:line="930" pos:column="61">-&gt;</op:operator><name pos:line="930" pos:column="63">_doc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="931" pos:column="9">int</name></type> <name pos:line="931" pos:column="13">docLen</name> <init pos:line="931" pos:column="20">= <expr><call><name><name pos:line="931" pos:column="22">_pscratchTilla</name><op:operator pos:line="931" pos:column="36">-&gt;</op:operator><name pos:line="931" pos:column="38">getCurrentDocLen</name></name><argument_list pos:line="931" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="932" pos:column="9">_pscratchTilla</name><op:operator pos:line="932" pos:column="23">-&gt;</op:operator><name pos:line="932" pos:column="25">execute</name></name><argument_list pos:line="932" pos:column="32">(<argument><expr><name pos:line="932" pos:column="33">SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="932" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="932" pos:column="55">_scratchDocDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="933" pos:column="9">return <expr><name pos:line="933" pos:column="16">docLen</name></expr>;</return>
}</block></function>

<function><type><name pos:line="936" pos:column="1">int</name></type> <name><name pos:line="936" pos:column="5">FileManager</name><op:operator pos:line="936" pos:column="16">::</op:operator><name pos:line="936" pos:column="18">getEOLFormatForm</name></name><parameter_list pos:line="936" pos:column="34">(<param><decl><type><specifier pos:line="936" pos:column="35">const</specifier> <name pos:line="936" pos:column="41">char</name> <type:modifier pos:line="936" pos:column="46">*</type:modifier></type><name pos:line="936" pos:column="47">data</name></decl></param>)</parameter_list> <specifier pos:line="936" pos:column="53">const</specifier>
<block pos:line="937" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="938" pos:column="9">size_t</name></type> <name pos:line="938" pos:column="16">len</name> <init pos:line="938" pos:column="20">= <expr><call><name pos:line="938" pos:column="22">strlen</name><argument_list pos:line="938" pos:column="28">(<argument><expr><name pos:line="938" pos:column="29">data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="939" pos:column="9">for (<init><decl><type><name pos:line="939" pos:column="14">size_t</name></type> <name pos:line="939" pos:column="21">i</name> <init pos:line="939" pos:column="23">= <expr><lit:literal type="number" pos:line="939" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="939" pos:column="29">i</name> <op:operator pos:line="939" pos:column="31">&lt;</op:operator> <name pos:line="939" pos:column="33">len</name></expr> ;</condition> <incr><expr><name pos:line="939" pos:column="39">i</name><op:operator pos:line="939" pos:column="40">++</op:operator></expr></incr>)
	<block pos:line="940" pos:column="9">{
		<if pos:line="941" pos:column="17">if <condition pos:line="941" pos:column="20">(<expr><name><name pos:line="941" pos:column="21">data</name><index pos:line="941" pos:column="25">[<expr><name pos:line="941" pos:column="26">i</name></expr>]</index></name> <op:operator pos:line="941" pos:column="29">==</op:operator> <name pos:line="941" pos:column="32">CR</name></expr>)</condition><then pos:line="941" pos:column="35">
		<block pos:line="942" pos:column="17">{
			<if pos:line="943" pos:column="25">if <condition pos:line="943" pos:column="28">(<expr><name pos:line="943" pos:column="29">i</name><op:operator pos:line="943" pos:column="30">+</op:operator><lit:literal type="number" pos:line="943" pos:column="31">1</lit:literal> <op:operator pos:line="943" pos:column="33">&lt;</op:operator> <name pos:line="943" pos:column="35">len</name> <op:operator pos:line="943" pos:column="39">&amp;&amp;</op:operator>  <name><name pos:line="943" pos:column="43">data</name><index pos:line="943" pos:column="47">[<expr><name pos:line="943" pos:column="48">i</name><op:operator pos:line="943" pos:column="49">+</op:operator><lit:literal type="number" pos:line="943" pos:column="50">1</lit:literal></expr>]</index></name> <op:operator pos:line="943" pos:column="53">==</op:operator> <name pos:line="943" pos:column="56">LF</name></expr>)</condition><then pos:line="943" pos:column="59">
			<block pos:line="944" pos:column="25">{
				<return pos:line="945" pos:column="33">return <expr><call><name pos:line="945" pos:column="40">int</name><argument_list pos:line="945" pos:column="43">(<argument><expr><name pos:line="945" pos:column="44">WIN_FORMAT</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else pos:line="947" pos:column="25">else
			<block pos:line="948" pos:column="25">{
				<return pos:line="949" pos:column="33">return <expr><call><name pos:line="949" pos:column="40">int</name><argument_list pos:line="949" pos:column="43">(<argument><expr><name pos:line="949" pos:column="44">MAC_FORMAT</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></else></if>
		}</block></then></if>
		<if pos:line="952" pos:column="17">if <condition pos:line="952" pos:column="20">(<expr><name><name pos:line="952" pos:column="21">data</name><index pos:line="952" pos:column="25">[<expr><name pos:line="952" pos:column="26">i</name></expr>]</index></name> <op:operator pos:line="952" pos:column="29">==</op:operator> <name pos:line="952" pos:column="32">LF</name></expr>)</condition><then pos:line="952" pos:column="35">
		<block pos:line="953" pos:column="17">{
			<return pos:line="954" pos:column="25">return <expr><call><name pos:line="954" pos:column="32">int</name><argument_list pos:line="954" pos:column="35">(<argument><expr><name pos:line="954" pos:column="36">UNIX_FORMAT</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="957" pos:column="9">return <expr><op:operator pos:line="957" pos:column="16">-</op:operator><lit:literal type="number" pos:line="957" pos:column="17">1</lit:literal></expr>;</return>
}</block></function></unit>
