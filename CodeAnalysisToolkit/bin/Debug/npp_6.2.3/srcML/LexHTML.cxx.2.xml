<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexHTML.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexHTML.cxx
 ** Lexer for HTML.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2005 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">SCE_HA_JS</name></cpp:macro> <cpp:value pos:line="30" pos:column="19">(SCE_HJA_START - SCE_HJ_START)</cpp:value></cpp:define>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">SCE_HA_VBS</name></cpp:macro> <cpp:value pos:line="31" pos:column="20">(SCE_HBA_START - SCE_HB_START)</cpp:value></cpp:define>
<cpp:define pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="32" pos:column="9">SCE_HA_PYTHON</name></cpp:macro> <cpp:value pos:line="32" pos:column="23">(SCE_HPA_START - SCE_HP_START)</cpp:value></cpp:define>

<enum pos:line="34" pos:column="1">enum <name pos:line="34" pos:column="6">script_type</name> <block pos:line="34" pos:column="18">{ <decl><name pos:line="34" pos:column="20">eScriptNone</name> <init pos:line="34" pos:column="32">= <expr><lit:literal type="number" pos:line="34" pos:column="34">0</lit:literal></expr></init></decl><op:operator pos:line="34" pos:column="35">,</op:operator> <decl><name pos:line="34" pos:column="37">eScriptJS</name></decl><op:operator pos:line="34" pos:column="46">,</op:operator> <decl><name pos:line="34" pos:column="48">eScriptVBS</name></decl><op:operator pos:line="34" pos:column="58">,</op:operator> <decl><name pos:line="34" pos:column="60">eScriptPython</name></decl><op:operator pos:line="34" pos:column="73">,</op:operator> <decl><name pos:line="34" pos:column="75">eScriptPHP</name></decl><op:operator pos:line="34" pos:column="85">,</op:operator> <decl><name pos:line="34" pos:column="87">eScriptXML</name></decl><op:operator pos:line="34" pos:column="97">,</op:operator> <decl><name pos:line="34" pos:column="99">eScriptSGML</name></decl><op:operator pos:line="34" pos:column="110">,</op:operator> <decl><name pos:line="34" pos:column="112">eScriptSGMLblock</name></decl><op:operator pos:line="34" pos:column="128">,</op:operator> <decl><name pos:line="34" pos:column="130">eScriptComment</name></decl> }</block>;</enum>
<enum pos:line="35" pos:column="1">enum <name pos:line="35" pos:column="6">script_mode</name> <block pos:line="35" pos:column="18">{ <decl><name pos:line="35" pos:column="20">eHtml</name> <init pos:line="35" pos:column="26">= <expr><lit:literal type="number" pos:line="35" pos:column="28">0</lit:literal></expr></init></decl><op:operator pos:line="35" pos:column="29">,</op:operator> <decl><name pos:line="35" pos:column="31">eNonHtmlScript</name></decl><op:operator pos:line="35" pos:column="45">,</op:operator> <decl><name pos:line="35" pos:column="47">eNonHtmlPreProc</name></decl><op:operator pos:line="35" pos:column="62">,</op:operator> <decl><name pos:line="35" pos:column="64">eNonHtmlScriptPreProc</name></decl> }</block>;</enum>

<function><type><specifier pos:line="37" pos:column="1">static</specifier> <specifier pos:line="37" pos:column="8">inline</specifier> <name pos:line="37" pos:column="15">bool</name></type> <name pos:line="37" pos:column="20">IsAWordChar</name><parameter_list pos:line="37" pos:column="31">(<param><decl><type><specifier pos:line="37" pos:column="32">const</specifier> <name pos:line="37" pos:column="38">int</name></type> <name pos:line="37" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="46">{
	<return pos:line="38" pos:column="9">return <expr><op:operator pos:line="38" pos:column="16">(</op:operator><name pos:line="38" pos:column="17">ch</name> <op:operator pos:line="38" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="38" pos:column="22">0x80</lit:literal><op:operator pos:line="38" pos:column="26">)</op:operator> <op:operator pos:line="38" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="38" pos:column="31">(</op:operator><call><name pos:line="38" pos:column="32">isalnum</name><argument_list pos:line="38" pos:column="39">(<argument><expr><name pos:line="38" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="38" pos:column="44">||</op:operator> <name pos:line="38" pos:column="47">ch</name> <op:operator pos:line="38" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="53">'.'</lit:literal> <op:operator pos:line="38" pos:column="57">||</op:operator> <name pos:line="38" pos:column="60">ch</name> <op:operator pos:line="38" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="66">'_'</lit:literal><op:operator pos:line="38" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <specifier pos:line="41" pos:column="8">inline</specifier> <name pos:line="41" pos:column="15">bool</name></type> <name pos:line="41" pos:column="20">IsAWordStart</name><parameter_list pos:line="41" pos:column="32">(<param><decl><type><specifier pos:line="41" pos:column="33">const</specifier> <name pos:line="41" pos:column="39">int</name></type> <name pos:line="41" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="47">{
	<return pos:line="42" pos:column="9">return <expr><op:operator pos:line="42" pos:column="16">(</op:operator><name pos:line="42" pos:column="17">ch</name> <op:operator pos:line="42" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="42" pos:column="22">0x80</lit:literal><op:operator pos:line="42" pos:column="26">)</op:operator> <op:operator pos:line="42" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="42" pos:column="31">(</op:operator><call><name pos:line="42" pos:column="32">isalnum</name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="44">||</op:operator> <name pos:line="42" pos:column="47">ch</name> <op:operator pos:line="42" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="53">'_'</lit:literal><op:operator pos:line="42" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="45" pos:column="1">inline</specifier> <name pos:line="45" pos:column="8">bool</name></type> <name pos:line="45" pos:column="13">IsOperator</name><parameter_list pos:line="45" pos:column="23">(<param><decl><type><name pos:line="45" pos:column="24">int</name></type> <name pos:line="45" pos:column="28">ch</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="32">{
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">isascii</name><argument_list pos:line="46" pos:column="20">(<argument><expr><name pos:line="46" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="46" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="46" pos:column="28">isalnum</name><argument_list pos:line="46" pos:column="35">(<argument><expr><name pos:line="46" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="46" pos:column="40">
		<return pos:line="47" pos:column="17">return <expr><lit:literal type="boolean" pos:line="47" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<comment type="line" pos:line="48" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">ch</name> <op:operator pos:line="49" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="19">'%'</lit:literal> <op:operator pos:line="49" pos:column="23">||</op:operator> <name pos:line="49" pos:column="26">ch</name> <op:operator pos:line="49" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="32">'^'</lit:literal> <op:operator pos:line="49" pos:column="36">||</op:operator> <name pos:line="49" pos:column="39">ch</name> <op:operator pos:line="49" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="45">'&amp;'</lit:literal> <op:operator pos:line="49" pos:column="49">||</op:operator> <name pos:line="49" pos:column="52">ch</name> <op:operator pos:line="49" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="49" pos:column="58">'*'</lit:literal> <op:operator pos:line="49" pos:column="62">||</op:operator>
	        <name pos:line="50" pos:column="17">ch</name> <op:operator pos:line="50" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="23">'('</lit:literal> <op:operator pos:line="50" pos:column="27">||</op:operator> <name pos:line="50" pos:column="30">ch</name> <op:operator pos:line="50" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="36">')'</lit:literal> <op:operator pos:line="50" pos:column="40">||</op:operator> <name pos:line="50" pos:column="43">ch</name> <op:operator pos:line="50" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="49">'-'</lit:literal> <op:operator pos:line="50" pos:column="53">||</op:operator> <name pos:line="50" pos:column="56">ch</name> <op:operator pos:line="50" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="50" pos:column="62">'+'</lit:literal> <op:operator pos:line="50" pos:column="66">||</op:operator>
	        <name pos:line="51" pos:column="17">ch</name> <op:operator pos:line="51" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="23">'='</lit:literal> <op:operator pos:line="51" pos:column="27">||</op:operator> <name pos:line="51" pos:column="30">ch</name> <op:operator pos:line="51" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="36">'|'</lit:literal> <op:operator pos:line="51" pos:column="40">||</op:operator> <name pos:line="51" pos:column="43">ch</name> <op:operator pos:line="51" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="49">'{'</lit:literal> <op:operator pos:line="51" pos:column="53">||</op:operator> <name pos:line="51" pos:column="56">ch</name> <op:operator pos:line="51" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="62">'}'</lit:literal> <op:operator pos:line="51" pos:column="66">||</op:operator>
	        <name pos:line="52" pos:column="17">ch</name> <op:operator pos:line="52" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="23">'['</lit:literal> <op:operator pos:line="52" pos:column="27">||</op:operator> <name pos:line="52" pos:column="30">ch</name> <op:operator pos:line="52" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="36">']'</lit:literal> <op:operator pos:line="52" pos:column="40">||</op:operator> <name pos:line="52" pos:column="43">ch</name> <op:operator pos:line="52" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="49">':'</lit:literal> <op:operator pos:line="52" pos:column="53">||</op:operator> <name pos:line="52" pos:column="56">ch</name> <op:operator pos:line="52" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="62">';'</lit:literal> <op:operator pos:line="52" pos:column="66">||</op:operator>
	        <name pos:line="53" pos:column="17">ch</name> <op:operator pos:line="53" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="23">'&lt;'</lit:literal> <op:operator pos:line="53" pos:column="27">||</op:operator> <name pos:line="53" pos:column="30">ch</name> <op:operator pos:line="53" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="36">'&gt;'</lit:literal> <op:operator pos:line="53" pos:column="40">||</op:operator> <name pos:line="53" pos:column="43">ch</name> <op:operator pos:line="53" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="49">','</lit:literal> <op:operator pos:line="53" pos:column="53">||</op:operator> <name pos:line="53" pos:column="56">ch</name> <op:operator pos:line="53" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="62">'/'</lit:literal> <op:operator pos:line="53" pos:column="66">||</op:operator>
	        <name pos:line="54" pos:column="17">ch</name> <op:operator pos:line="54" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="23">'?'</lit:literal> <op:operator pos:line="54" pos:column="27">||</op:operator> <name pos:line="54" pos:column="30">ch</name> <op:operator pos:line="54" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="36">'!'</lit:literal> <op:operator pos:line="54" pos:column="40">||</op:operator> <name pos:line="54" pos:column="43">ch</name> <op:operator pos:line="54" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="49">'.'</lit:literal> <op:operator pos:line="54" pos:column="53">||</op:operator> <name pos:line="54" pos:column="56">ch</name> <op:operator pos:line="54" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="62">'~'</lit:literal></expr>)</condition><then pos:line="54" pos:column="66">
		<return pos:line="55" pos:column="17">return <expr><lit:literal type="boolean" pos:line="55" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="56" pos:column="9">return <expr><lit:literal type="boolean" pos:line="56" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="59" pos:column="1">static</specifier> <name pos:line="59" pos:column="8">void</name></type> <name pos:line="59" pos:column="13">GetTextSegment</name><parameter_list pos:line="59" pos:column="27">(<param><decl><type><name pos:line="59" pos:column="28">Accessor</name> <type:modifier pos:line="59" pos:column="37">&amp;</type:modifier></type><name pos:line="59" pos:column="38">styler</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="46">unsigned</name> <name pos:line="59" pos:column="55">int</name></type> <name pos:line="59" pos:column="59">start</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="66">unsigned</name> <name pos:line="59" pos:column="75">int</name></type> <name pos:line="59" pos:column="79">end</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="84">char</name> <type:modifier pos:line="59" pos:column="89">*</type:modifier></type><name pos:line="59" pos:column="90">s</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="93">size_t</name></type> <name pos:line="59" pos:column="100">len</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="105">{
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">size_t</name></type> <name pos:line="60" pos:column="16">i</name> <init pos:line="60" pos:column="18">= <expr><lit:literal type="number" pos:line="60" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="61" pos:column="9">for (<init pos:line="61" pos:column="14">;</init> <condition><expr><op:operator pos:line="61" pos:column="16">(</op:operator><name pos:line="61" pos:column="17">i</name> <op:operator pos:line="61" pos:column="19">&lt;</op:operator> <name pos:line="61" pos:column="21">end</name> <op:operator pos:line="61" pos:column="25">-</op:operator> <name pos:line="61" pos:column="27">start</name> <op:operator pos:line="61" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="61" pos:column="35">1</lit:literal><op:operator pos:line="61" pos:column="36">)</op:operator> <op:operator pos:line="61" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="61" pos:column="41">(</op:operator><name pos:line="61" pos:column="42">i</name> <op:operator pos:line="61" pos:column="44">&lt;</op:operator> <name pos:line="61" pos:column="46">len</name><op:operator pos:line="61" pos:column="49">-</op:operator><lit:literal type="number" pos:line="61" pos:column="50">1</lit:literal><op:operator pos:line="61" pos:column="51">)</op:operator></expr>;</condition> <incr><expr><name pos:line="61" pos:column="54">i</name><op:operator pos:line="61" pos:column="55">++</op:operator></expr></incr>) <block pos:line="61" pos:column="59">{
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">s</name><index pos:line="62" pos:column="18">[<expr><name pos:line="62" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="62" pos:column="22">=</op:operator> <call><name><name pos:line="62" pos:column="24">static_cast</name><argument_list pos:line="62" pos:column="35">&lt;<argument><expr><name pos:line="62" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="62" pos:column="41">(<argument><expr><call><name pos:line="62" pos:column="42">MakeLowerCase</name><argument_list pos:line="62" pos:column="55">(<argument><expr><name><name pos:line="62" pos:column="56">styler</name><index pos:line="62" pos:column="62">[<expr><name pos:line="62" pos:column="63">start</name> <op:operator pos:line="62" pos:column="69">+</op:operator> <name pos:line="62" pos:column="71">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="64" pos:column="9">s</name><index pos:line="64" pos:column="10">[<expr><name pos:line="64" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="64" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="64" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="67" pos:column="1">static</specifier> <specifier pos:line="67" pos:column="8">const</specifier> <name pos:line="67" pos:column="14">char</name> <type:modifier pos:line="67" pos:column="19">*</type:modifier></type><name pos:line="67" pos:column="20">GetNextWord</name><parameter_list pos:line="67" pos:column="31">(<param><decl><type><name pos:line="67" pos:column="32">Accessor</name> <type:modifier pos:line="67" pos:column="41">&amp;</type:modifier></type><name pos:line="67" pos:column="42">styler</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="50">unsigned</name> <name pos:line="67" pos:column="59">int</name></type> <name pos:line="67" pos:column="63">start</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="70">char</name> <type:modifier pos:line="67" pos:column="75">*</type:modifier></type><name pos:line="67" pos:column="76">s</name></decl></param>, <param><decl><type><name pos:line="67" pos:column="79">size_t</name></type> <name pos:line="67" pos:column="86">sLen</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="92">{

	<decl_stmt><decl><type><name pos:line="69" pos:column="9">size_t</name></type> <name pos:line="69" pos:column="16">i</name> <init pos:line="69" pos:column="18">= <expr><lit:literal type="number" pos:line="69" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="70" pos:column="9">for (<init pos:line="70" pos:column="14">;</init> <condition><expr><name pos:line="70" pos:column="16">i</name> <op:operator pos:line="70" pos:column="18">&lt;</op:operator> <name pos:line="70" pos:column="20">sLen</name><op:operator pos:line="70" pos:column="24">-</op:operator><lit:literal type="number" pos:line="70" pos:column="25">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="70" pos:column="28">i</name><op:operator pos:line="70" pos:column="29">++</op:operator></expr></incr>) <block pos:line="70" pos:column="33">{
		<decl_stmt><decl><type><name pos:line="71" pos:column="17">char</name></type> <name pos:line="71" pos:column="22">ch</name> <init pos:line="71" pos:column="25">= <expr><call><name><name pos:line="71" pos:column="27">static_cast</name><argument_list pos:line="71" pos:column="38">&lt;<argument><expr><name pos:line="71" pos:column="39">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="71" pos:column="44">(<argument><expr><call><name><name pos:line="71" pos:column="45">styler</name><op:operator pos:line="71" pos:column="51">.</op:operator><name pos:line="71" pos:column="52">SafeGetCharAt</name></name><argument_list pos:line="71" pos:column="65">(<argument><expr><name pos:line="71" pos:column="66">start</name> <op:operator pos:line="71" pos:column="72">+</op:operator> <name pos:line="71" pos:column="74">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><op:operator pos:line="72" pos:column="21">(</op:operator><name pos:line="72" pos:column="22">i</name> <op:operator pos:line="72" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="72" pos:column="27">0</lit:literal><op:operator pos:line="72" pos:column="28">)</op:operator> <op:operator pos:line="72" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="72" pos:column="33">!</op:operator><call><name pos:line="72" pos:column="34">IsAWordStart</name><argument_list pos:line="72" pos:column="46">(<argument><expr><name pos:line="72" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="72" pos:column="51">
			<break pos:line="73" pos:column="25">break;</break></then></if>
		<if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><op:operator pos:line="74" pos:column="21">(</op:operator><name pos:line="74" pos:column="22">i</name> <op:operator pos:line="74" pos:column="24">&gt;</op:operator> <lit:literal type="number" pos:line="74" pos:column="26">0</lit:literal><op:operator pos:line="74" pos:column="27">)</op:operator> <op:operator pos:line="74" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="74" pos:column="32">!</op:operator><call><name pos:line="74" pos:column="33">IsAWordChar</name><argument_list pos:line="74" pos:column="44">(<argument><expr><name pos:line="74" pos:column="45">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="74" pos:column="49">
			<break pos:line="75" pos:column="25">break;</break></then></if>
		<expr_stmt><expr><name><name pos:line="76" pos:column="17">s</name><index pos:line="76" pos:column="18">[<expr><name pos:line="76" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="76" pos:column="22">=</op:operator> <name pos:line="76" pos:column="24">ch</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="78" pos:column="9">s</name><index pos:line="78" pos:column="10">[<expr><name pos:line="78" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="78" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="78" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>

	<return pos:line="80" pos:column="9">return <expr><name pos:line="80" pos:column="16">s</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="83" pos:column="1">static</specifier> <name pos:line="83" pos:column="8">script_type</name></type> <name pos:line="83" pos:column="20">segIsScriptingIndicator</name><parameter_list pos:line="83" pos:column="43">(<param><decl><type><name pos:line="83" pos:column="44">Accessor</name> <type:modifier pos:line="83" pos:column="53">&amp;</type:modifier></type><name pos:line="83" pos:column="54">styler</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="62">unsigned</name> <name pos:line="83" pos:column="71">int</name></type> <name pos:line="83" pos:column="75">start</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="82">unsigned</name> <name pos:line="83" pos:column="91">int</name></type> <name pos:line="83" pos:column="95">end</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="100">script_type</name></type> <name pos:line="83" pos:column="112">prevValue</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="123">{
	<decl_stmt><decl><type><name pos:line="84" pos:column="9">char</name></type> <name><name pos:line="84" pos:column="14">s</name><index pos:line="84" pos:column="15">[<expr><lit:literal type="number" pos:line="84" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="85" pos:column="9">GetTextSegment</name><argument_list pos:line="85" pos:column="23">(<argument><expr><name pos:line="85" pos:column="24">styler</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="32">start</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="39">end</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="44">s</name></expr></argument>, <argument><expr><sizeof pos:line="85" pos:column="47">sizeof<argument_list pos:line="85" pos:column="53">(<argument><expr><name pos:line="85" pos:column="54">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="86" pos:column="9">//Platform::DebugPrintf("Scripting indicator [%s]\n", s);</comment>
	<comment type="line" pos:line="87" pos:column="9">//if (strstr(s, "src"))	// External script</comment>
		<comment type="line" pos:line="88" pos:column="17">//return eScriptNone;</comment>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><call><name pos:line="89" pos:column="13">strstr</name><argument_list pos:line="89" pos:column="19">(<argument><expr><name pos:line="89" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="89" pos:column="23">"vbs"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="89" pos:column="30">
		<return pos:line="90" pos:column="17">return <expr><name pos:line="90" pos:column="24">eScriptVBS</name></expr>;</return></then></if>
	<if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><call><name pos:line="91" pos:column="13">strstr</name><argument_list pos:line="91" pos:column="19">(<argument><expr><name pos:line="91" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="23">"pyth"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="91" pos:column="31">
		<return pos:line="92" pos:column="17">return <expr><name pos:line="92" pos:column="24">eScriptPython</name></expr>;</return></then></if>
	<if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><call><name pos:line="93" pos:column="13">strstr</name><argument_list pos:line="93" pos:column="19">(<argument><expr><name pos:line="93" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="93" pos:column="23">"javas"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="93" pos:column="32">
		<return pos:line="94" pos:column="17">return <expr><name pos:line="94" pos:column="24">eScriptJS</name></expr>;</return></then></if>
	<if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><call><name pos:line="95" pos:column="13">strstr</name><argument_list pos:line="95" pos:column="19">(<argument><expr><name pos:line="95" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="23">"jscr"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="95" pos:column="31">
		<return pos:line="96" pos:column="17">return <expr><name pos:line="96" pos:column="24">eScriptJS</name></expr>;</return></then></if>
	<if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><call><name pos:line="97" pos:column="13">strstr</name><argument_list pos:line="97" pos:column="19">(<argument><expr><name pos:line="97" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="97" pos:column="23">"php"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="97" pos:column="30">
		<return pos:line="98" pos:column="17">return <expr><name pos:line="98" pos:column="24">eScriptPHP</name></expr>;</return></then></if>
	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><call><name pos:line="99" pos:column="13">strstr</name><argument_list pos:line="99" pos:column="19">(<argument><expr><name pos:line="99" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="99" pos:column="23">"xml"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="99" pos:column="30"> <block pos:line="99" pos:column="31">{
		<decl_stmt><decl><type><specifier pos:line="100" pos:column="17">const</specifier> <name pos:line="100" pos:column="23">char</name> <type:modifier pos:line="100" pos:column="28">*</type:modifier></type><name pos:line="100" pos:column="29">xml</name> <init pos:line="100" pos:column="33">= <expr><call><name pos:line="100" pos:column="35">strstr</name><argument_list pos:line="100" pos:column="41">(<argument><expr><name pos:line="100" pos:column="42">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="100" pos:column="45">"xml"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="101" pos:column="17">for (<init><decl><type><specifier pos:line="101" pos:column="22">const</specifier> <name pos:line="101" pos:column="28">char</name> <type:modifier pos:line="101" pos:column="33">*</type:modifier></type><name pos:line="101" pos:column="34">t</name><init pos:line="101" pos:column="35">=<expr><name pos:line="101" pos:column="36">s</name></expr></init></decl>;</init> <condition><expr><name pos:line="101" pos:column="39">t</name><op:operator pos:line="101" pos:column="40">&lt;</op:operator><name pos:line="101" pos:column="41">xml</name></expr>;</condition> <incr><expr><name pos:line="101" pos:column="46">t</name><op:operator pos:line="101" pos:column="47">++</op:operator></expr></incr>) <block pos:line="101" pos:column="51">{
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><op:operator pos:line="102" pos:column="29">!</op:operator><call><name pos:line="102" pos:column="30">IsASpace</name><argument_list pos:line="102" pos:column="38">(<argument><expr><op:operator pos:line="102" pos:column="39">*</op:operator><name pos:line="102" pos:column="40">t</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="43"> <block pos:line="102" pos:column="44">{
				<return pos:line="103" pos:column="33">return <expr><name pos:line="103" pos:column="40">prevValue</name></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return pos:line="106" pos:column="17">return <expr><name pos:line="106" pos:column="24">eScriptXML</name></expr>;</return>
	}</block></then></if>

	<return pos:line="109" pos:column="9">return <expr><name pos:line="109" pos:column="16">prevValue</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="112" pos:column="1">static</specifier> <name pos:line="112" pos:column="8">int</name></type> <name pos:line="112" pos:column="12">PrintScriptingIndicatorOffset</name><parameter_list pos:line="112" pos:column="41">(<param><decl><type><name pos:line="112" pos:column="42">Accessor</name> <type:modifier pos:line="112" pos:column="51">&amp;</type:modifier></type><name pos:line="112" pos:column="52">styler</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="60">unsigned</name> <name pos:line="112" pos:column="69">int</name></type> <name pos:line="112" pos:column="73">start</name></decl></param>, <param><decl><type><name pos:line="112" pos:column="80">unsigned</name> <name pos:line="112" pos:column="89">int</name></type> <name pos:line="112" pos:column="93">end</name></decl></param>)</parameter_list> <block pos:line="112" pos:column="98">{
	<decl_stmt><decl><type><name pos:line="113" pos:column="9">int</name></type> <name pos:line="113" pos:column="13">iResult</name> <init pos:line="113" pos:column="21">= <expr><lit:literal type="number" pos:line="113" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="114" pos:column="9">char</name></type> <name><name pos:line="114" pos:column="14">s</name><index pos:line="114" pos:column="15">[<expr><lit:literal type="number" pos:line="114" pos:column="16">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="115" pos:column="9">GetTextSegment</name><argument_list pos:line="115" pos:column="23">(<argument><expr><name pos:line="115" pos:column="24">styler</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="32">start</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="39">end</name></expr></argument>, <argument><expr><name pos:line="115" pos:column="44">s</name></expr></argument>, <argument><expr><sizeof pos:line="115" pos:column="47">sizeof<argument_list pos:line="115" pos:column="53">(<argument><expr><name pos:line="115" pos:column="54">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><lit:literal type="number" pos:line="116" pos:column="13">0</lit:literal> <op:operator pos:line="116" pos:column="15">==</op:operator> <call><name pos:line="116" pos:column="18">strncmp</name><argument_list pos:line="116" pos:column="25">(<argument><expr><name pos:line="116" pos:column="26">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="29">"php"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="116" pos:column="36">3</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="39"> <block pos:line="116" pos:column="40">{
		<expr_stmt><expr><name pos:line="117" pos:column="17">iResult</name> <op:operator pos:line="117" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="117" pos:column="27">3</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<return pos:line="120" pos:column="9">return <expr><name pos:line="120" pos:column="16">iResult</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="123" pos:column="1">static</specifier> <name pos:line="123" pos:column="8">script_type</name></type> <name pos:line="123" pos:column="20">ScriptOfState</name><parameter_list pos:line="123" pos:column="33">(<param><decl><type><name pos:line="123" pos:column="34">int</name></type> <name pos:line="123" pos:column="38">state</name></decl></param>)</parameter_list> <block pos:line="123" pos:column="45">{
	<if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><op:operator pos:line="124" pos:column="13">(</op:operator><name pos:line="124" pos:column="14">state</name> <op:operator pos:line="124" pos:column="20">&gt;=</op:operator> <name pos:line="124" pos:column="23">SCE_HP_START</name><op:operator pos:line="124" pos:column="35">)</op:operator> <op:operator pos:line="124" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="124" pos:column="40">(</op:operator><name pos:line="124" pos:column="41">state</name> <op:operator pos:line="124" pos:column="47">&lt;=</op:operator> <name pos:line="124" pos:column="50">SCE_HP_IDENTIFIER</name><op:operator pos:line="124" pos:column="67">)</op:operator></expr>)</condition><then pos:line="124" pos:column="69"> <block pos:line="124" pos:column="70">{
		<return pos:line="125" pos:column="17">return <expr><name pos:line="125" pos:column="24">eScriptPython</name></expr>;</return>
	}</block></then> <else pos:line="126" pos:column="11">else <if pos:line="126" pos:column="16">if <condition pos:line="126" pos:column="19">(<expr><op:operator pos:line="126" pos:column="20">(</op:operator><name pos:line="126" pos:column="21">state</name> <op:operator pos:line="126" pos:column="27">&gt;=</op:operator> <name pos:line="126" pos:column="30">SCE_HB_START</name><op:operator pos:line="126" pos:column="42">)</op:operator> <op:operator pos:line="126" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="126" pos:column="47">(</op:operator><name pos:line="126" pos:column="48">state</name> <op:operator pos:line="126" pos:column="54">&lt;=</op:operator> <name pos:line="126" pos:column="57">SCE_HB_STRINGEOL</name><op:operator pos:line="126" pos:column="73">)</op:operator></expr>)</condition><then pos:line="126" pos:column="75"> <block pos:line="126" pos:column="76">{
		<return pos:line="127" pos:column="17">return <expr><name pos:line="127" pos:column="24">eScriptVBS</name></expr>;</return>
	}</block></then> <else pos:line="128" pos:column="11">else <if pos:line="128" pos:column="16">if <condition pos:line="128" pos:column="19">(<expr><op:operator pos:line="128" pos:column="20">(</op:operator><name pos:line="128" pos:column="21">state</name> <op:operator pos:line="128" pos:column="27">&gt;=</op:operator> <name pos:line="128" pos:column="30">SCE_HJ_START</name><op:operator pos:line="128" pos:column="42">)</op:operator> <op:operator pos:line="128" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="128" pos:column="47">(</op:operator><name pos:line="128" pos:column="48">state</name> <op:operator pos:line="128" pos:column="54">&lt;=</op:operator> <name pos:line="128" pos:column="57">SCE_HJ_REGEX</name><op:operator pos:line="128" pos:column="69">)</op:operator></expr>)</condition><then pos:line="128" pos:column="71"> <block pos:line="128" pos:column="72">{
		<return pos:line="129" pos:column="17">return <expr><name pos:line="129" pos:column="24">eScriptJS</name></expr>;</return>
	}</block></then> <else pos:line="130" pos:column="11">else <if pos:line="130" pos:column="16">if <condition pos:line="130" pos:column="19">(<expr><op:operator pos:line="130" pos:column="20">(</op:operator><name pos:line="130" pos:column="21">state</name> <op:operator pos:line="130" pos:column="27">&gt;=</op:operator> <name pos:line="130" pos:column="30">SCE_HPHP_DEFAULT</name><op:operator pos:line="130" pos:column="46">)</op:operator> <op:operator pos:line="130" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="130" pos:column="51">(</op:operator><name pos:line="130" pos:column="52">state</name> <op:operator pos:line="130" pos:column="58">&lt;=</op:operator> <name pos:line="130" pos:column="61">SCE_HPHP_COMMENTLINE</name><op:operator pos:line="130" pos:column="81">)</op:operator></expr>)</condition><then pos:line="130" pos:column="83"> <block pos:line="130" pos:column="84">{
		<return pos:line="131" pos:column="17">return <expr><name pos:line="131" pos:column="24">eScriptPHP</name></expr>;</return>
	}</block></then> <else pos:line="132" pos:column="11">else <if pos:line="132" pos:column="16">if <condition pos:line="132" pos:column="19">(<expr><op:operator pos:line="132" pos:column="20">(</op:operator><name pos:line="132" pos:column="21">state</name> <op:operator pos:line="132" pos:column="27">&gt;=</op:operator> <name pos:line="132" pos:column="30">SCE_H_SGML_DEFAULT</name><op:operator pos:line="132" pos:column="48">)</op:operator> <op:operator pos:line="132" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="132" pos:column="53">(</op:operator><name pos:line="132" pos:column="54">state</name> <op:operator pos:line="132" pos:column="60">&lt;</op:operator> <name pos:line="132" pos:column="62">SCE_H_SGML_BLOCK_DEFAULT</name><op:operator pos:line="132" pos:column="86">)</op:operator></expr>)</condition><then pos:line="132" pos:column="88"> <block pos:line="132" pos:column="89">{
		<return pos:line="133" pos:column="17">return <expr><name pos:line="133" pos:column="24">eScriptSGML</name></expr>;</return>
	}</block></then> <else pos:line="134" pos:column="11">else <if pos:line="134" pos:column="16">if <condition pos:line="134" pos:column="19">(<expr><name pos:line="134" pos:column="20">state</name> <op:operator pos:line="134" pos:column="26">==</op:operator> <name pos:line="134" pos:column="29">SCE_H_SGML_BLOCK_DEFAULT</name></expr>)</condition><then pos:line="134" pos:column="54"> <block pos:line="134" pos:column="55">{
		<return pos:line="135" pos:column="17">return <expr><name pos:line="135" pos:column="24">eScriptSGMLblock</name></expr>;</return>
	}</block></then> <else pos:line="136" pos:column="11">else <block pos:line="136" pos:column="16">{
		<return pos:line="137" pos:column="17">return <expr><name pos:line="137" pos:column="24">eScriptNone</name></expr>;</return>
	}</block></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="141" pos:column="1">static</specifier> <name pos:line="141" pos:column="8">int</name></type> <name pos:line="141" pos:column="12">statePrintForState</name><parameter_list pos:line="141" pos:column="30">(<param><decl><type><name pos:line="141" pos:column="31">int</name></type> <name pos:line="141" pos:column="35">state</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="42">script_mode</name></type> <name pos:line="141" pos:column="54">inScriptType</name></decl></param>)</parameter_list> <block pos:line="141" pos:column="68">{
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">int</name></type> <name pos:line="142" pos:column="13">StateToPrint</name> <init pos:line="142" pos:column="26">= <expr><name pos:line="142" pos:column="28">state</name></expr></init></decl>;</decl_stmt>

	<if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><name pos:line="144" pos:column="13">state</name> <op:operator pos:line="144" pos:column="19">&gt;=</op:operator> <name pos:line="144" pos:column="22">SCE_HJ_START</name></expr>)</condition><then pos:line="144" pos:column="35"> <block pos:line="144" pos:column="36">{
		<if pos:line="145" pos:column="17">if <condition pos:line="145" pos:column="20">(<expr><op:operator pos:line="145" pos:column="21">(</op:operator><name pos:line="145" pos:column="22">state</name> <op:operator pos:line="145" pos:column="28">&gt;=</op:operator> <name pos:line="145" pos:column="31">SCE_HP_START</name><op:operator pos:line="145" pos:column="43">)</op:operator> <op:operator pos:line="145" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="145" pos:column="48">(</op:operator><name pos:line="145" pos:column="49">state</name> <op:operator pos:line="145" pos:column="55">&lt;=</op:operator> <name pos:line="145" pos:column="58">SCE_HP_IDENTIFIER</name><op:operator pos:line="145" pos:column="75">)</op:operator></expr>)</condition><then pos:line="145" pos:column="77"> <block pos:line="145" pos:column="78">{
			<expr_stmt><expr><name pos:line="146" pos:column="25">StateToPrint</name> <op:operator pos:line="146" pos:column="38">=</op:operator> <name pos:line="146" pos:column="40">state</name> <op:operator pos:line="146" pos:column="46">+</op:operator> <op:operator pos:line="146" pos:column="48">(</op:operator><op:operator pos:line="146" pos:column="49">(</op:operator><name pos:line="146" pos:column="50">inScriptType</name> <op:operator pos:line="146" pos:column="63">==</op:operator> <name pos:line="146" pos:column="66">eNonHtmlScript</name><op:operator pos:line="146" pos:column="80">)</op:operator> <op:operator pos:line="146" pos:column="82">?</op:operator> <lit:literal type="number" pos:line="146" pos:column="84">0</lit:literal> <op:operator pos:line="146" pos:column="86">:</op:operator> <name pos:line="146" pos:column="88">SCE_HA_PYTHON</name><op:operator pos:line="146" pos:column="101">)</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="147" pos:column="19">else <if pos:line="147" pos:column="24">if <condition pos:line="147" pos:column="27">(<expr><op:operator pos:line="147" pos:column="28">(</op:operator><name pos:line="147" pos:column="29">state</name> <op:operator pos:line="147" pos:column="35">&gt;=</op:operator> <name pos:line="147" pos:column="38">SCE_HB_START</name><op:operator pos:line="147" pos:column="50">)</op:operator> <op:operator pos:line="147" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="147" pos:column="55">(</op:operator><name pos:line="147" pos:column="56">state</name> <op:operator pos:line="147" pos:column="62">&lt;=</op:operator> <name pos:line="147" pos:column="65">SCE_HB_STRINGEOL</name><op:operator pos:line="147" pos:column="81">)</op:operator></expr>)</condition><then pos:line="147" pos:column="83"> <block pos:line="147" pos:column="84">{
			<expr_stmt><expr><name pos:line="148" pos:column="25">StateToPrint</name> <op:operator pos:line="148" pos:column="38">=</op:operator> <name pos:line="148" pos:column="40">state</name> <op:operator pos:line="148" pos:column="46">+</op:operator> <op:operator pos:line="148" pos:column="48">(</op:operator><op:operator pos:line="148" pos:column="49">(</op:operator><name pos:line="148" pos:column="50">inScriptType</name> <op:operator pos:line="148" pos:column="63">==</op:operator> <name pos:line="148" pos:column="66">eNonHtmlScript</name><op:operator pos:line="148" pos:column="80">)</op:operator> <op:operator pos:line="148" pos:column="82">?</op:operator> <lit:literal type="number" pos:line="148" pos:column="84">0</lit:literal> <op:operator pos:line="148" pos:column="86">:</op:operator> <name pos:line="148" pos:column="88">SCE_HA_VBS</name><op:operator pos:line="148" pos:column="98">)</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="149" pos:column="19">else <if pos:line="149" pos:column="24">if <condition pos:line="149" pos:column="27">(<expr><op:operator pos:line="149" pos:column="28">(</op:operator><name pos:line="149" pos:column="29">state</name> <op:operator pos:line="149" pos:column="35">&gt;=</op:operator> <name pos:line="149" pos:column="38">SCE_HJ_START</name><op:operator pos:line="149" pos:column="50">)</op:operator> <op:operator pos:line="149" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="149" pos:column="55">(</op:operator><name pos:line="149" pos:column="56">state</name> <op:operator pos:line="149" pos:column="62">&lt;=</op:operator> <name pos:line="149" pos:column="65">SCE_HJ_REGEX</name><op:operator pos:line="149" pos:column="77">)</op:operator></expr>)</condition><then pos:line="149" pos:column="79"> <block pos:line="149" pos:column="80">{
			<expr_stmt><expr><name pos:line="150" pos:column="25">StateToPrint</name> <op:operator pos:line="150" pos:column="38">=</op:operator> <name pos:line="150" pos:column="40">state</name> <op:operator pos:line="150" pos:column="46">+</op:operator> <op:operator pos:line="150" pos:column="48">(</op:operator><op:operator pos:line="150" pos:column="49">(</op:operator><name pos:line="150" pos:column="50">inScriptType</name> <op:operator pos:line="150" pos:column="63">==</op:operator> <name pos:line="150" pos:column="66">eNonHtmlScript</name><op:operator pos:line="150" pos:column="80">)</op:operator> <op:operator pos:line="150" pos:column="82">?</op:operator> <lit:literal type="number" pos:line="150" pos:column="84">0</lit:literal> <op:operator pos:line="150" pos:column="86">:</op:operator> <name pos:line="150" pos:column="88">SCE_HA_JS</name><op:operator pos:line="150" pos:column="97">)</op:operator></expr>;</expr_stmt>
		}</block></then></if></else></if></else></if>
	}</block></then></if>

	<return pos:line="154" pos:column="9">return <expr><name pos:line="154" pos:column="16">StateToPrint</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="157" pos:column="1">static</specifier> <name pos:line="157" pos:column="8">int</name></type> <name pos:line="157" pos:column="12">stateForPrintState</name><parameter_list pos:line="157" pos:column="30">(<param><decl><type><name pos:line="157" pos:column="31">int</name></type> <name pos:line="157" pos:column="35">StateToPrint</name></decl></param>)</parameter_list> <block pos:line="157" pos:column="49">{
	<decl_stmt><decl><type><name pos:line="158" pos:column="9">int</name></type> <name pos:line="158" pos:column="13">state</name></decl>;</decl_stmt>

	<if pos:line="160" pos:column="9">if <condition pos:line="160" pos:column="12">(<expr><op:operator pos:line="160" pos:column="13">(</op:operator><name pos:line="160" pos:column="14">StateToPrint</name> <op:operator pos:line="160" pos:column="27">&gt;=</op:operator> <name pos:line="160" pos:column="30">SCE_HPA_START</name><op:operator pos:line="160" pos:column="43">)</op:operator> <op:operator pos:line="160" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="160" pos:column="48">(</op:operator><name pos:line="160" pos:column="49">StateToPrint</name> <op:operator pos:line="160" pos:column="62">&lt;=</op:operator> <name pos:line="160" pos:column="65">SCE_HPA_IDENTIFIER</name><op:operator pos:line="160" pos:column="83">)</op:operator></expr>)</condition><then pos:line="160" pos:column="85"> <block pos:line="160" pos:column="86">{
		<expr_stmt><expr><name pos:line="161" pos:column="17">state</name> <op:operator pos:line="161" pos:column="23">=</op:operator> <name pos:line="161" pos:column="25">StateToPrint</name> <op:operator pos:line="161" pos:column="38">-</op:operator> <name pos:line="161" pos:column="40">SCE_HA_PYTHON</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="162" pos:column="11">else <if pos:line="162" pos:column="16">if <condition pos:line="162" pos:column="19">(<expr><op:operator pos:line="162" pos:column="20">(</op:operator><name pos:line="162" pos:column="21">StateToPrint</name> <op:operator pos:line="162" pos:column="34">&gt;=</op:operator> <name pos:line="162" pos:column="37">SCE_HBA_START</name><op:operator pos:line="162" pos:column="50">)</op:operator> <op:operator pos:line="162" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="162" pos:column="55">(</op:operator><name pos:line="162" pos:column="56">StateToPrint</name> <op:operator pos:line="162" pos:column="69">&lt;=</op:operator> <name pos:line="162" pos:column="72">SCE_HBA_STRINGEOL</name><op:operator pos:line="162" pos:column="89">)</op:operator></expr>)</condition><then pos:line="162" pos:column="91"> <block pos:line="162" pos:column="92">{
		<expr_stmt><expr><name pos:line="163" pos:column="17">state</name> <op:operator pos:line="163" pos:column="23">=</op:operator> <name pos:line="163" pos:column="25">StateToPrint</name> <op:operator pos:line="163" pos:column="38">-</op:operator> <name pos:line="163" pos:column="40">SCE_HA_VBS</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="164" pos:column="11">else <if pos:line="164" pos:column="16">if <condition pos:line="164" pos:column="19">(<expr><op:operator pos:line="164" pos:column="20">(</op:operator><name pos:line="164" pos:column="21">StateToPrint</name> <op:operator pos:line="164" pos:column="34">&gt;=</op:operator> <name pos:line="164" pos:column="37">SCE_HJA_START</name><op:operator pos:line="164" pos:column="50">)</op:operator> <op:operator pos:line="164" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="164" pos:column="55">(</op:operator><name pos:line="164" pos:column="56">StateToPrint</name> <op:operator pos:line="164" pos:column="69">&lt;=</op:operator> <name pos:line="164" pos:column="72">SCE_HJA_REGEX</name><op:operator pos:line="164" pos:column="85">)</op:operator></expr>)</condition><then pos:line="164" pos:column="87"> <block pos:line="164" pos:column="88">{
		<expr_stmt><expr><name pos:line="165" pos:column="17">state</name> <op:operator pos:line="165" pos:column="23">=</op:operator> <name pos:line="165" pos:column="25">StateToPrint</name> <op:operator pos:line="165" pos:column="38">-</op:operator> <name pos:line="165" pos:column="40">SCE_HA_JS</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="166" pos:column="11">else <block pos:line="166" pos:column="16">{
		<expr_stmt><expr><name pos:line="167" pos:column="17">state</name> <op:operator pos:line="167" pos:column="23">=</op:operator> <name pos:line="167" pos:column="25">StateToPrint</name></expr>;</expr_stmt>
	}</block></else></if></else></if></else></if>

	<return pos:line="170" pos:column="9">return <expr><name pos:line="170" pos:column="16">state</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="173" pos:column="1">static</specifier> <specifier pos:line="173" pos:column="8">inline</specifier> <name pos:line="173" pos:column="15">bool</name></type> <name pos:line="173" pos:column="20">IsNumber</name><parameter_list pos:line="173" pos:column="28">(<param><decl><type><name pos:line="173" pos:column="29">unsigned</name> <name pos:line="173" pos:column="38">int</name></type> <name pos:line="173" pos:column="42">start</name></decl></param>, <param><decl><type><name pos:line="173" pos:column="49">Accessor</name> <type:modifier pos:line="173" pos:column="58">&amp;</type:modifier></type><name pos:line="173" pos:column="59">styler</name></decl></param>)</parameter_list> <block pos:line="173" pos:column="67">{
	<return pos:line="174" pos:column="9">return <expr><call><name pos:line="174" pos:column="16">IsADigit</name><argument_list pos:line="174" pos:column="24">(<argument><expr><name><name pos:line="174" pos:column="25">styler</name><index pos:line="174" pos:column="31">[<expr><name pos:line="174" pos:column="32">start</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="174" pos:column="40">||</op:operator> <op:operator pos:line="174" pos:column="43">(</op:operator><name><name pos:line="174" pos:column="44">styler</name><index pos:line="174" pos:column="50">[<expr><name pos:line="174" pos:column="51">start</name></expr>]</index></name> <op:operator pos:line="174" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="174" pos:column="61">'.'</lit:literal><op:operator pos:line="174" pos:column="64">)</op:operator> <op:operator pos:line="174" pos:column="66">||</op:operator>
	       <op:operator pos:line="175" pos:column="16">(</op:operator><name><name pos:line="175" pos:column="17">styler</name><index pos:line="175" pos:column="23">[<expr><name pos:line="175" pos:column="24">start</name></expr>]</index></name> <op:operator pos:line="175" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="34">'-'</lit:literal><op:operator pos:line="175" pos:column="37">)</op:operator> <op:operator pos:line="175" pos:column="39">||</op:operator> <op:operator pos:line="175" pos:column="42">(</op:operator><name><name pos:line="175" pos:column="43">styler</name><index pos:line="175" pos:column="49">[<expr><name pos:line="175" pos:column="50">start</name></expr>]</index></name> <op:operator pos:line="175" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="175" pos:column="60">'#'</lit:literal><op:operator pos:line="175" pos:column="63">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="178" pos:column="1">static</specifier> <specifier pos:line="178" pos:column="8">inline</specifier> <name pos:line="178" pos:column="15">bool</name></type> <name pos:line="178" pos:column="20">isStringState</name><parameter_list pos:line="178" pos:column="33">(<param><decl><type><name pos:line="178" pos:column="34">int</name></type> <name pos:line="178" pos:column="38">state</name></decl></param>)</parameter_list> <block pos:line="178" pos:column="45">{
	<decl_stmt><decl><type><name pos:line="179" pos:column="9">bool</name></type> <name pos:line="179" pos:column="14">bResult</name></decl>;</decl_stmt>

	<switch pos:line="181" pos:column="9">switch <condition pos:line="181" pos:column="16">(<expr><name pos:line="181" pos:column="17">state</name></expr>)</condition> <block pos:line="181" pos:column="24">{
	<case pos:line="182" pos:column="9">case <expr><name pos:line="182" pos:column="14">SCE_HJ_DOUBLESTRING</name></expr>:
	</case><case pos:line="183" pos:column="9">case <expr><name pos:line="183" pos:column="14">SCE_HJ_SINGLESTRING</name></expr>:
	</case><case pos:line="184" pos:column="9">case <expr><name pos:line="184" pos:column="14">SCE_HJA_DOUBLESTRING</name></expr>:
	</case><case pos:line="185" pos:column="9">case <expr><name pos:line="185" pos:column="14">SCE_HJA_SINGLESTRING</name></expr>:
	</case><case pos:line="186" pos:column="9">case <expr><name pos:line="186" pos:column="14">SCE_HB_STRING</name></expr>:
	</case><case pos:line="187" pos:column="9">case <expr><name pos:line="187" pos:column="14">SCE_HBA_STRING</name></expr>:
	</case><case pos:line="188" pos:column="9">case <expr><name pos:line="188" pos:column="14">SCE_HP_STRING</name></expr>:
	</case><case pos:line="189" pos:column="9">case <expr><name pos:line="189" pos:column="14">SCE_HP_CHARACTER</name></expr>:
	</case><case pos:line="190" pos:column="9">case <expr><name pos:line="190" pos:column="14">SCE_HP_TRIPLE</name></expr>:
	</case><case pos:line="191" pos:column="9">case <expr><name pos:line="191" pos:column="14">SCE_HP_TRIPLEDOUBLE</name></expr>:
	</case><case pos:line="192" pos:column="9">case <expr><name pos:line="192" pos:column="14">SCE_HPA_STRING</name></expr>:
	</case><case pos:line="193" pos:column="9">case <expr><name pos:line="193" pos:column="14">SCE_HPA_CHARACTER</name></expr>:
	</case><case pos:line="194" pos:column="9">case <expr><name pos:line="194" pos:column="14">SCE_HPA_TRIPLE</name></expr>:
	</case><case pos:line="195" pos:column="9">case <expr><name pos:line="195" pos:column="14">SCE_HPA_TRIPLEDOUBLE</name></expr>:
	</case><case pos:line="196" pos:column="9">case <expr><name pos:line="196" pos:column="14">SCE_HPHP_HSTRING</name></expr>:
	</case><case pos:line="197" pos:column="9">case <expr><name pos:line="197" pos:column="14">SCE_HPHP_SIMPLESTRING</name></expr>:
	</case><case pos:line="198" pos:column="9">case <expr><name pos:line="198" pos:column="14">SCE_HPHP_HSTRING_VARIABLE</name></expr>:
	</case><case pos:line="199" pos:column="9">case <expr><name pos:line="199" pos:column="14">SCE_HPHP_COMPLEX_VARIABLE</name></expr>:
		<expr_stmt><expr><name pos:line="200" pos:column="17">bResult</name> <op:operator pos:line="200" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="200" pos:column="27">true</lit:literal></expr>;</expr_stmt>
		<break pos:line="201" pos:column="17">break;</break>
	</case><default pos:line="202" pos:column="9">default :
		<expr_stmt><expr><name pos:line="203" pos:column="17">bResult</name> <op:operator pos:line="203" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="203" pos:column="27">false</lit:literal></expr>;</expr_stmt>
		<break pos:line="204" pos:column="17">break;</break>
	</default>}</block></switch>
	<return pos:line="206" pos:column="9">return <expr><name pos:line="206" pos:column="16">bResult</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="209" pos:column="1">static</specifier> <specifier pos:line="209" pos:column="8">inline</specifier> <name pos:line="209" pos:column="15">bool</name></type> <name pos:line="209" pos:column="20">stateAllowsTermination</name><parameter_list pos:line="209" pos:column="42">(<param><decl><type><name pos:line="209" pos:column="43">int</name></type> <name pos:line="209" pos:column="47">state</name></decl></param>)</parameter_list> <block pos:line="209" pos:column="54">{
	<decl_stmt><decl><type><name pos:line="210" pos:column="9">bool</name></type> <name pos:line="210" pos:column="14">allowTermination</name> <init pos:line="210" pos:column="31">= <expr><op:operator pos:line="210" pos:column="33">!</op:operator><call><name pos:line="210" pos:column="34">isStringState</name><argument_list pos:line="210" pos:column="47">(<argument><expr><name pos:line="210" pos:column="48">state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="211" pos:column="9">if <condition pos:line="211" pos:column="12">(<expr><name pos:line="211" pos:column="13">allowTermination</name></expr>)</condition><then pos:line="211" pos:column="30"> <block pos:line="211" pos:column="31">{
		<switch pos:line="212" pos:column="17">switch <condition pos:line="212" pos:column="24">(<expr><name pos:line="212" pos:column="25">state</name></expr>)</condition> <block pos:line="212" pos:column="32">{
		<case pos:line="213" pos:column="17">case <expr><name pos:line="213" pos:column="22">SCE_HB_COMMENTLINE</name></expr>:
		</case><case pos:line="214" pos:column="17">case <expr><name pos:line="214" pos:column="22">SCE_HPHP_COMMENT</name></expr>:
		</case><case pos:line="215" pos:column="17">case <expr><name pos:line="215" pos:column="22">SCE_HP_COMMENTLINE</name></expr>:
		</case><case pos:line="216" pos:column="17">case <expr><name pos:line="216" pos:column="22">SCE_HPA_COMMENTLINE</name></expr>:
			<expr_stmt><expr><name pos:line="217" pos:column="25">allowTermination</name> <op:operator pos:line="217" pos:column="42">=</op:operator> <lit:literal type="boolean" pos:line="217" pos:column="44">false</lit:literal></expr>;</expr_stmt>
		</case>}</block></switch>
	}</block></then></if>
	<return pos:line="220" pos:column="9">return <expr><name pos:line="220" pos:column="16">allowTermination</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="223" pos:column="1">// not really well done, since it's only comments that should lex the %&gt; and &lt;%</comment>
<function><type><specifier pos:line="224" pos:column="1">static</specifier> <specifier pos:line="224" pos:column="8">inline</specifier> <name pos:line="224" pos:column="15">bool</name></type> <name pos:line="224" pos:column="20">isCommentASPState</name><parameter_list pos:line="224" pos:column="37">(<param><decl><type><name pos:line="224" pos:column="38">int</name></type> <name pos:line="224" pos:column="42">state</name></decl></param>)</parameter_list> <block pos:line="224" pos:column="49">{
	<decl_stmt><decl><type><name pos:line="225" pos:column="9">bool</name></type> <name pos:line="225" pos:column="14">bResult</name></decl>;</decl_stmt>

	<switch pos:line="227" pos:column="9">switch <condition pos:line="227" pos:column="16">(<expr><name pos:line="227" pos:column="17">state</name></expr>)</condition> <block pos:line="227" pos:column="24">{
	<case pos:line="228" pos:column="9">case <expr><name pos:line="228" pos:column="14">SCE_HJ_COMMENT</name></expr>:
	</case><case pos:line="229" pos:column="9">case <expr><name pos:line="229" pos:column="14">SCE_HJ_COMMENTLINE</name></expr>:
	</case><case pos:line="230" pos:column="9">case <expr><name pos:line="230" pos:column="14">SCE_HJ_COMMENTDOC</name></expr>:
	</case><case pos:line="231" pos:column="9">case <expr><name pos:line="231" pos:column="14">SCE_HB_COMMENTLINE</name></expr>:
	</case><case pos:line="232" pos:column="9">case <expr><name pos:line="232" pos:column="14">SCE_HP_COMMENTLINE</name></expr>:
	</case><case pos:line="233" pos:column="9">case <expr><name pos:line="233" pos:column="14">SCE_HPHP_COMMENT</name></expr>:
	</case><case pos:line="234" pos:column="9">case <expr><name pos:line="234" pos:column="14">SCE_HPHP_COMMENTLINE</name></expr>:
		<expr_stmt><expr><name pos:line="235" pos:column="17">bResult</name> <op:operator pos:line="235" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="235" pos:column="27">true</lit:literal></expr>;</expr_stmt>
		<break pos:line="236" pos:column="17">break;</break>
	</case><default pos:line="237" pos:column="9">default :
		<expr_stmt><expr><name pos:line="238" pos:column="17">bResult</name> <op:operator pos:line="238" pos:column="25">=</op:operator> <lit:literal type="boolean" pos:line="238" pos:column="27">false</lit:literal></expr>;</expr_stmt>
		<break pos:line="239" pos:column="17">break;</break>
	</default>}</block></switch>
	<return pos:line="241" pos:column="9">return <expr><name pos:line="241" pos:column="16">bResult</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="244" pos:column="1">static</specifier> <name pos:line="244" pos:column="8">void</name></type> <name pos:line="244" pos:column="13">classifyAttribHTML</name><parameter_list pos:line="244" pos:column="31">(<param><decl><type><name pos:line="244" pos:column="32">unsigned</name> <name pos:line="244" pos:column="41">int</name></type> <name pos:line="244" pos:column="45">start</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="52">unsigned</name> <name pos:line="244" pos:column="61">int</name></type> <name pos:line="244" pos:column="65">end</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="70">WordList</name> <type:modifier pos:line="244" pos:column="79">&amp;</type:modifier></type><name pos:line="244" pos:column="80">keywords</name></decl></param>, <param><decl><type><name pos:line="244" pos:column="90">Accessor</name> <type:modifier pos:line="244" pos:column="99">&amp;</type:modifier></type><name pos:line="244" pos:column="100">styler</name></decl></param>)</parameter_list> <block pos:line="244" pos:column="108">{
	<decl_stmt><decl><type><name pos:line="245" pos:column="9">bool</name></type> <name pos:line="245" pos:column="14">wordIsNumber</name> <init pos:line="245" pos:column="27">= <expr><call><name pos:line="245" pos:column="29">IsNumber</name><argument_list pos:line="245" pos:column="37">(<argument><expr><name pos:line="245" pos:column="38">start</name></expr></argument>, <argument><expr><name pos:line="245" pos:column="45">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="246" pos:column="9">char</name></type> <name pos:line="246" pos:column="14">chAttr</name> <init pos:line="246" pos:column="21">= <expr><name pos:line="246" pos:column="23">SCE_H_ATTRIBUTEUNKNOWN</name></expr></init></decl>;</decl_stmt>
	<if pos:line="247" pos:column="9">if <condition pos:line="247" pos:column="12">(<expr><name pos:line="247" pos:column="13">wordIsNumber</name></expr>)</condition><then pos:line="247" pos:column="26"> <block pos:line="247" pos:column="27">{
		<expr_stmt><expr><name pos:line="248" pos:column="17">chAttr</name> <op:operator pos:line="248" pos:column="24">=</op:operator> <name pos:line="248" pos:column="26">SCE_H_NUMBER</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="249" pos:column="11">else <block pos:line="249" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="250" pos:column="17">char</name></type> <name><name pos:line="250" pos:column="22">s</name><index pos:line="250" pos:column="23">[<expr><lit:literal type="number" pos:line="250" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="251" pos:column="17">GetTextSegment</name><argument_list pos:line="251" pos:column="31">(<argument><expr><name pos:line="251" pos:column="32">styler</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="40">start</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="47">end</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="52">s</name></expr></argument>, <argument><expr><sizeof pos:line="251" pos:column="55">sizeof<argument_list pos:line="251" pos:column="61">(<argument><expr><name pos:line="251" pos:column="62">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="252" pos:column="17">if <condition pos:line="252" pos:column="20">(<expr><call><name><name pos:line="252" pos:column="21">keywords</name><op:operator pos:line="252" pos:column="29">.</op:operator><name pos:line="252" pos:column="30">InList</name></name><argument_list pos:line="252" pos:column="36">(<argument><expr><name pos:line="252" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="40">
			<expr_stmt><expr><name pos:line="253" pos:column="25">chAttr</name> <op:operator pos:line="253" pos:column="32">=</op:operator> <name pos:line="253" pos:column="34">SCE_H_ATTRIBUTE</name></expr>;</expr_stmt></then></if>
	}</block></else></if>
	<if pos:line="255" pos:column="9">if <condition pos:line="255" pos:column="12">(<expr><op:operator pos:line="255" pos:column="13">(</op:operator><name pos:line="255" pos:column="14">chAttr</name> <op:operator pos:line="255" pos:column="21">==</op:operator> <name pos:line="255" pos:column="24">SCE_H_ATTRIBUTEUNKNOWN</name><op:operator pos:line="255" pos:column="46">)</op:operator> <op:operator pos:line="255" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="255" pos:column="51">!</op:operator><name pos:line="255" pos:column="52">keywords</name></expr>)</condition><then pos:line="255" pos:column="61">
		<comment type="line" pos:line="256" pos:column="17">// No keywords -&gt; all are known</comment>
		<expr_stmt><expr><name pos:line="257" pos:column="17">chAttr</name> <op:operator pos:line="257" pos:column="24">=</op:operator> <name pos:line="257" pos:column="26">SCE_H_ATTRIBUTE</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name><name pos:line="258" pos:column="9">styler</name><op:operator pos:line="258" pos:column="15">.</op:operator><name pos:line="258" pos:column="16">ColourTo</name></name><argument_list pos:line="258" pos:column="24">(<argument><expr><name pos:line="258" pos:column="25">end</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="30">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="261" pos:column="1">static</specifier> <name pos:line="261" pos:column="8">int</name></type> <name pos:line="261" pos:column="12">classifyTagHTML</name><parameter_list pos:line="261" pos:column="27">(<param><decl><type><name pos:line="261" pos:column="28">unsigned</name> <name pos:line="261" pos:column="37">int</name></type> <name pos:line="261" pos:column="41">start</name></decl></param>, <param><decl><type><name pos:line="261" pos:column="48">unsigned</name> <name pos:line="261" pos:column="57">int</name></type> <name pos:line="261" pos:column="61">end</name></decl></param>,
                           <param><decl><type><name pos:line="262" pos:column="28">WordList</name> <type:modifier pos:line="262" pos:column="37">&amp;</type:modifier></type><name pos:line="262" pos:column="38">keywords</name></decl></param>, <param><decl><type><name pos:line="262" pos:column="48">Accessor</name> <type:modifier pos:line="262" pos:column="57">&amp;</type:modifier></type><name pos:line="262" pos:column="58">styler</name></decl></param>, <param><decl><type><name pos:line="262" pos:column="66">bool</name> <type:modifier pos:line="262" pos:column="71">&amp;</type:modifier></type><name pos:line="262" pos:column="72">tagDontFold</name></decl></param>,
			   <param><decl><type><name pos:line="263" pos:column="28">bool</name></type> <name pos:line="263" pos:column="33">caseSensitive</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="48">bool</name></type> <name pos:line="263" pos:column="53">isXml</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="60">bool</name></type> <name pos:line="263" pos:column="65">allowScripts</name></decl></param>)</parameter_list> <block pos:line="263" pos:column="79">{
	<decl_stmt><decl><type><name pos:line="264" pos:column="9">char</name></type> <name><name pos:line="264" pos:column="14">s</name><index pos:line="264" pos:column="15">[<expr><lit:literal type="number" pos:line="264" pos:column="16">30</lit:literal> <op:operator pos:line="264" pos:column="19">+</op:operator> <lit:literal type="number" pos:line="264" pos:column="21">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="line" pos:line="265" pos:column="9">// Copy after the '&lt;'</comment>
	<decl_stmt><decl><type><name pos:line="266" pos:column="9">unsigned</name> <name pos:line="266" pos:column="18">int</name></type> <name pos:line="266" pos:column="22">i</name> <init pos:line="266" pos:column="24">= <expr><lit:literal type="number" pos:line="266" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="267" pos:column="9">for (<init><decl><type><name pos:line="267" pos:column="14">unsigned</name> <name pos:line="267" pos:column="23">int</name></type> <name pos:line="267" pos:column="27">cPos</name> <init pos:line="267" pos:column="32">= <expr><name pos:line="267" pos:column="34">start</name></expr></init></decl>;</init> <condition><expr><name pos:line="267" pos:column="41">cPos</name> <op:operator pos:line="267" pos:column="46">&lt;=</op:operator> <name pos:line="267" pos:column="49">end</name> <op:operator pos:line="267" pos:column="53">&amp;&amp;</op:operator> <name pos:line="267" pos:column="56">i</name> <op:operator pos:line="267" pos:column="58">&lt;</op:operator> <lit:literal type="number" pos:line="267" pos:column="60">30</lit:literal></expr>;</condition> <incr><expr><name pos:line="267" pos:column="64">cPos</name><op:operator pos:line="267" pos:column="68">++</op:operator></expr></incr>) <block pos:line="267" pos:column="72">{
		<decl_stmt><decl><type><name pos:line="268" pos:column="17">char</name></type> <name pos:line="268" pos:column="22">ch</name> <init pos:line="268" pos:column="25">= <expr><name><name pos:line="268" pos:column="27">styler</name><index pos:line="268" pos:column="33">[<expr><name pos:line="268" pos:column="34">cPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if pos:line="269" pos:column="17">if <condition pos:line="269" pos:column="20">(<expr><op:operator pos:line="269" pos:column="21">(</op:operator><name pos:line="269" pos:column="22">ch</name> <op:operator pos:line="269" pos:column="25">!=</op:operator> <lit:literal type="char" pos:line="269" pos:column="28">'&lt;'</lit:literal><op:operator pos:line="269" pos:column="31">)</op:operator> <op:operator pos:line="269" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="269" pos:column="36">(</op:operator><name pos:line="269" pos:column="37">ch</name> <op:operator pos:line="269" pos:column="40">!=</op:operator> <lit:literal type="char" pos:line="269" pos:column="43">'/'</lit:literal><op:operator pos:line="269" pos:column="46">)</op:operator></expr>)</condition><then pos:line="269" pos:column="48"> <block pos:line="269" pos:column="49">{
			<expr_stmt><expr><name><name pos:line="270" pos:column="25">s</name><index pos:line="270" pos:column="26">[<expr><name pos:line="270" pos:column="27">i</name><op:operator pos:line="270" pos:column="28">++</op:operator></expr>]</index></name> <op:operator pos:line="270" pos:column="32">=</op:operator> <name pos:line="270" pos:column="34">caseSensitive</name> <op:operator pos:line="270" pos:column="48">?</op:operator> <name pos:line="270" pos:column="50">ch</name> <op:operator pos:line="270" pos:column="53">:</op:operator> <call><name><name pos:line="270" pos:column="55">static_cast</name><argument_list pos:line="270" pos:column="66">&lt;<argument><expr><name pos:line="270" pos:column="67">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="270" pos:column="72">(<argument><expr><call><name pos:line="270" pos:column="73">MakeLowerCase</name><argument_list pos:line="270" pos:column="86">(<argument><expr><name pos:line="270" pos:column="87">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<comment type="line" pos:line="274" pos:column="9">//The following is only a quick hack, to see if this whole thing would work</comment>
	<comment type="line" pos:line="275" pos:column="9">//we first need the tagname with a trailing space...</comment>
	<expr_stmt><expr><name><name pos:line="276" pos:column="9">s</name><index pos:line="276" pos:column="10">[<expr><name pos:line="276" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="276" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="276" pos:column="16">' '</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="277" pos:column="9">s</name><index pos:line="277" pos:column="10">[<expr><name pos:line="277" pos:column="11">i</name><op:operator pos:line="277" pos:column="12">+</op:operator><lit:literal type="number" pos:line="277" pos:column="13">1</lit:literal></expr>]</index></name> <op:operator pos:line="277" pos:column="16">=</op:operator> <lit:literal type="char" pos:line="277" pos:column="18">'\0'</lit:literal></expr>;</expr_stmt>

	<comment type="line" pos:line="279" pos:column="9">// if the current language is XML, I can fold any tag</comment>
	<comment type="line" pos:line="280" pos:column="9">// if the current language is HTML, I don't want to fold certain tags (input, meta, etc.)</comment>
	<comment type="line" pos:line="281" pos:column="9">//...to find it in the list of no-container-tags</comment>
	<expr_stmt><expr><name pos:line="282" pos:column="9">tagDontFold</name> <op:operator pos:line="282" pos:column="21">=</op:operator> <op:operator pos:line="282" pos:column="23">(</op:operator><op:operator pos:line="282" pos:column="24">!</op:operator><name pos:line="282" pos:column="25">isXml</name><op:operator pos:line="282" pos:column="30">)</op:operator> <op:operator pos:line="282" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="282" pos:column="35">(</op:operator><name pos:line="282" pos:column="36">NULL</name> <op:operator pos:line="282" pos:column="41">!=</op:operator> <call><name pos:line="282" pos:column="44">strstr</name><argument_list pos:line="282" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="282" pos:column="51">"meta link img area br hr input "</lit:literal></expr></argument>, <argument><expr><name pos:line="282" pos:column="86">s</name></expr></argument>)</argument_list></call><op:operator pos:line="282" pos:column="88">)</op:operator></expr>;</expr_stmt>

	<comment type="line" pos:line="284" pos:column="9">//now we can remove the trailing space</comment>
	<expr_stmt><expr><name><name pos:line="285" pos:column="9">s</name><index pos:line="285" pos:column="10">[<expr><name pos:line="285" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="285" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="285" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>

	<comment type="line" pos:line="287" pos:column="9">// No keywords -&gt; all are known</comment>
	<decl_stmt><decl><type><name pos:line="288" pos:column="9">char</name></type> <name pos:line="288" pos:column="14">chAttr</name> <init pos:line="288" pos:column="21">= <expr><name pos:line="288" pos:column="23">SCE_H_TAGUNKNOWN</name></expr></init></decl>;</decl_stmt>
	<if pos:line="289" pos:column="9">if <condition pos:line="289" pos:column="12">(<expr><name><name pos:line="289" pos:column="13">s</name><index pos:line="289" pos:column="14">[<expr><lit:literal type="number" pos:line="289" pos:column="15">0</lit:literal></expr>]</index></name> <op:operator pos:line="289" pos:column="18">==</op:operator> <lit:literal type="char" pos:line="289" pos:column="21">'!'</lit:literal></expr>)</condition><then pos:line="289" pos:column="25"> <block pos:line="289" pos:column="26">{
		<expr_stmt><expr><name pos:line="290" pos:column="17">chAttr</name> <op:operator pos:line="290" pos:column="24">=</op:operator> <name pos:line="290" pos:column="26">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="291" pos:column="11">else <if pos:line="291" pos:column="16">if <condition pos:line="291" pos:column="19">(<expr><op:operator pos:line="291" pos:column="20">!</op:operator><name pos:line="291" pos:column="21">keywords</name> <op:operator pos:line="291" pos:column="30">||</op:operator> <call><name><name pos:line="291" pos:column="33">keywords</name><op:operator pos:line="291" pos:column="41">.</op:operator><name pos:line="291" pos:column="42">InList</name></name><argument_list pos:line="291" pos:column="48">(<argument><expr><name pos:line="291" pos:column="49">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="291" pos:column="52"> <block pos:line="291" pos:column="53">{
		<expr_stmt><expr><name pos:line="292" pos:column="17">chAttr</name> <op:operator pos:line="292" pos:column="24">=</op:operator> <name pos:line="292" pos:column="26">SCE_H_TAG</name></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<expr_stmt><expr><call><name><name pos:line="294" pos:column="9">styler</name><op:operator pos:line="294" pos:column="15">.</op:operator><name pos:line="294" pos:column="16">ColourTo</name></name><argument_list pos:line="294" pos:column="24">(<argument><expr><name pos:line="294" pos:column="25">end</name></expr></argument>, <argument><expr><name pos:line="294" pos:column="30">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="295" pos:column="9">if <condition pos:line="295" pos:column="12">(<expr><name pos:line="295" pos:column="13">chAttr</name> <op:operator pos:line="295" pos:column="20">==</op:operator> <name pos:line="295" pos:column="23">SCE_H_TAG</name></expr>)</condition><then pos:line="295" pos:column="33"> <block pos:line="295" pos:column="34">{
		<if pos:line="296" pos:column="17">if <condition pos:line="296" pos:column="20">(<expr><name pos:line="296" pos:column="21">allowScripts</name> <op:operator pos:line="296" pos:column="34">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="296" pos:column="37">0</lit:literal> <op:operator pos:line="296" pos:column="39">==</op:operator> <call><name pos:line="296" pos:column="42">strcmp</name><argument_list pos:line="296" pos:column="48">(<argument><expr><name pos:line="296" pos:column="49">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="296" pos:column="52">"script"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="296" pos:column="62"> <block pos:line="296" pos:column="63">{
			<comment type="line" pos:line="297" pos:column="25">// check to see if this is a self-closing tag by sniffing ahead</comment>
			<decl_stmt><decl><type><name pos:line="298" pos:column="25">bool</name></type> <name pos:line="298" pos:column="30">isSelfClose</name> <init pos:line="298" pos:column="42">= <expr><lit:literal type="boolean" pos:line="298" pos:column="44">false</lit:literal></expr></init></decl>;</decl_stmt>
			<for pos:line="299" pos:column="25">for (<init><decl><type><name pos:line="299" pos:column="30">unsigned</name> <name pos:line="299" pos:column="39">int</name></type> <name pos:line="299" pos:column="43">cPos</name> <init pos:line="299" pos:column="48">= <expr><name pos:line="299" pos:column="50">end</name></expr></init></decl>;</init> <condition><expr><name pos:line="299" pos:column="55">cPos</name> <op:operator pos:line="299" pos:column="60">&lt;=</op:operator> <name pos:line="299" pos:column="63">end</name> <op:operator pos:line="299" pos:column="67">+</op:operator> <lit:literal type="number" pos:line="299" pos:column="69">100</lit:literal></expr>;</condition> <incr><expr><name pos:line="299" pos:column="74">cPos</name><op:operator pos:line="299" pos:column="78">++</op:operator></expr></incr>) <block pos:line="299" pos:column="82">{
				<decl_stmt><decl><type><name pos:line="300" pos:column="33">char</name></type> <name pos:line="300" pos:column="38">ch</name> <init pos:line="300" pos:column="41">= <expr><call><name><name pos:line="300" pos:column="43">styler</name><op:operator pos:line="300" pos:column="49">.</op:operator><name pos:line="300" pos:column="50">SafeGetCharAt</name></name><argument_list pos:line="300" pos:column="63">(<argument><expr><name pos:line="300" pos:column="64">cPos</name></expr></argument>, <argument><expr><lit:literal type="char" pos:line="300" pos:column="70">'\0'</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="301" pos:column="33">if <condition pos:line="301" pos:column="36">(<expr><name pos:line="301" pos:column="37">ch</name> <op:operator pos:line="301" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="301" pos:column="43">'\0'</lit:literal> <op:operator pos:line="301" pos:column="48">||</op:operator> <name pos:line="301" pos:column="51">ch</name> <op:operator pos:line="301" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="301" pos:column="57">'&gt;'</lit:literal></expr>)</condition><then pos:line="301" pos:column="61">
					<break pos:line="302" pos:column="41">break;</break></then>
				<else pos:line="303" pos:column="33">else <if pos:line="303" pos:column="38">if <condition pos:line="303" pos:column="41">(<expr><name pos:line="303" pos:column="42">ch</name> <op:operator pos:line="303" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="48">'/'</lit:literal> <op:operator pos:line="303" pos:column="52">&amp;&amp;</op:operator> <call><name><name pos:line="303" pos:column="55">styler</name><op:operator pos:line="303" pos:column="61">.</op:operator><name pos:line="303" pos:column="62">SafeGetCharAt</name></name><argument_list pos:line="303" pos:column="75">(<argument><expr><name pos:line="303" pos:column="76">cPos</name> <op:operator pos:line="303" pos:column="81">+</op:operator> <lit:literal type="number" pos:line="303" pos:column="83">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="303" pos:column="86">'\0'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="303" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="303" pos:column="95">'&gt;'</lit:literal></expr>)</condition><then pos:line="303" pos:column="99"> <block pos:line="303" pos:column="100">{
					<expr_stmt><expr><name pos:line="304" pos:column="41">isSelfClose</name> <op:operator pos:line="304" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="304" pos:column="55">true</lit:literal></expr>;</expr_stmt>
					<break pos:line="305" pos:column="41">break;</break>
				}</block></then></if></else></if>
			}</block></for>

			<comment type="line" pos:line="309" pos:column="25">// do not enter a script state if the tag self-closed</comment>
			<if pos:line="310" pos:column="25">if <condition pos:line="310" pos:column="28">(<expr><op:operator pos:line="310" pos:column="29">!</op:operator><name pos:line="310" pos:column="30">isSelfClose</name></expr>)</condition><then pos:line="310" pos:column="42">
				<expr_stmt><expr><name pos:line="311" pos:column="33">chAttr</name> <op:operator pos:line="311" pos:column="40">=</op:operator> <name pos:line="311" pos:column="42">SCE_H_SCRIPT</name></expr>;</expr_stmt></then></if>
		}</block></then> <else pos:line="312" pos:column="19">else <if pos:line="312" pos:column="24">if <condition pos:line="312" pos:column="27">(<expr><op:operator pos:line="312" pos:column="28">!</op:operator><name pos:line="312" pos:column="29">isXml</name> <op:operator pos:line="312" pos:column="35">&amp;&amp;</op:operator> <lit:literal type="number" pos:line="312" pos:column="38">0</lit:literal> <op:operator pos:line="312" pos:column="40">==</op:operator> <call><name pos:line="312" pos:column="43">strcmp</name><argument_list pos:line="312" pos:column="49">(<argument><expr><name pos:line="312" pos:column="50">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="312" pos:column="53">"comment"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="312" pos:column="64"> <block pos:line="312" pos:column="65">{
			<expr_stmt><expr><name pos:line="313" pos:column="25">chAttr</name> <op:operator pos:line="313" pos:column="32">=</op:operator> <name pos:line="313" pos:column="34">SCE_H_COMMENT</name></expr>;</expr_stmt>
		}</block></then></if></else></if>
	}</block></then></if>
	<return pos:line="316" pos:column="9">return <expr><name pos:line="316" pos:column="16">chAttr</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="319" pos:column="1">static</specifier> <name pos:line="319" pos:column="8">void</name></type> <name pos:line="319" pos:column="13">classifyWordHTJS</name><parameter_list pos:line="319" pos:column="29">(<param><decl><type><name pos:line="319" pos:column="30">unsigned</name> <name pos:line="319" pos:column="39">int</name></type> <name pos:line="319" pos:column="43">start</name></decl></param>, <param><decl><type><name pos:line="319" pos:column="50">unsigned</name> <name pos:line="319" pos:column="59">int</name></type> <name pos:line="319" pos:column="63">end</name></decl></param>,
                             <param><decl><type><name pos:line="320" pos:column="30">WordList</name> <type:modifier pos:line="320" pos:column="39">&amp;</type:modifier></type><name pos:line="320" pos:column="40">keywords</name></decl></param>, <param><decl><type><name pos:line="320" pos:column="50">Accessor</name> <type:modifier pos:line="320" pos:column="59">&amp;</type:modifier></type><name pos:line="320" pos:column="60">styler</name></decl></param>, <param><decl><type><name pos:line="320" pos:column="68">script_mode</name></type> <name pos:line="320" pos:column="80">inScriptType</name></decl></param>)</parameter_list> <block pos:line="320" pos:column="94">{
	<decl_stmt><decl><type><name pos:line="321" pos:column="9">char</name></type> <name><name pos:line="321" pos:column="14">s</name><index pos:line="321" pos:column="15">[<expr><lit:literal type="number" pos:line="321" pos:column="16">30</lit:literal> <op:operator pos:line="321" pos:column="19">+</op:operator> <lit:literal type="number" pos:line="321" pos:column="21">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="322" pos:column="9">unsigned</name> <name pos:line="322" pos:column="18">int</name></type> <name pos:line="322" pos:column="22">i</name> <init pos:line="322" pos:column="24">= <expr><lit:literal type="number" pos:line="322" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="323" pos:column="9">for (<init pos:line="323" pos:column="14">;</init> <condition><expr><name pos:line="323" pos:column="16">i</name> <op:operator pos:line="323" pos:column="18">&lt;</op:operator> <name pos:line="323" pos:column="20">end</name> <op:operator pos:line="323" pos:column="24">-</op:operator> <name pos:line="323" pos:column="26">start</name> <op:operator pos:line="323" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="323" pos:column="34">1</lit:literal> <op:operator pos:line="323" pos:column="36">&amp;&amp;</op:operator> <name pos:line="323" pos:column="39">i</name> <op:operator pos:line="323" pos:column="41">&lt;</op:operator> <lit:literal type="number" pos:line="323" pos:column="43">30</lit:literal></expr>;</condition> <incr><expr><name pos:line="323" pos:column="47">i</name><op:operator pos:line="323" pos:column="48">++</op:operator></expr></incr>) <block pos:line="323" pos:column="52">{
		<expr_stmt><expr><name><name pos:line="324" pos:column="17">s</name><index pos:line="324" pos:column="18">[<expr><name pos:line="324" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="324" pos:column="22">=</op:operator> <name><name pos:line="324" pos:column="24">styler</name><index pos:line="324" pos:column="30">[<expr><name pos:line="324" pos:column="31">start</name> <op:operator pos:line="324" pos:column="37">+</op:operator> <name pos:line="324" pos:column="39">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="326" pos:column="9">s</name><index pos:line="326" pos:column="10">[<expr><name pos:line="326" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="326" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="326" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="328" pos:column="9">char</name></type> <name pos:line="328" pos:column="14">chAttr</name> <init pos:line="328" pos:column="21">= <expr><name pos:line="328" pos:column="23">SCE_HJ_WORD</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="329" pos:column="9">bool</name></type> <name pos:line="329" pos:column="14">wordIsNumber</name> <init pos:line="329" pos:column="27">= <expr><call><name pos:line="329" pos:column="29">IsADigit</name><argument_list pos:line="329" pos:column="37">(<argument><expr><name><name pos:line="329" pos:column="38">s</name><index pos:line="329" pos:column="39">[<expr><lit:literal type="number" pos:line="329" pos:column="40">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="329" pos:column="44">||</op:operator> <op:operator pos:line="329" pos:column="47">(</op:operator><op:operator pos:line="329" pos:column="48">(</op:operator><name><name pos:line="329" pos:column="49">s</name><index pos:line="329" pos:column="50">[<expr><lit:literal type="number" pos:line="329" pos:column="51">0</lit:literal></expr>]</index></name> <op:operator pos:line="329" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="329" pos:column="57">'.'</lit:literal><op:operator pos:line="329" pos:column="60">)</op:operator> <op:operator pos:line="329" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="329" pos:column="65">IsADigit</name><argument_list pos:line="329" pos:column="73">(<argument><expr><name><name pos:line="329" pos:column="74">s</name><index pos:line="329" pos:column="75">[<expr><lit:literal type="number" pos:line="329" pos:column="76">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="329" pos:column="79">)</op:operator></expr></init></decl>;</decl_stmt>
	<if pos:line="330" pos:column="9">if <condition pos:line="330" pos:column="12">(<expr><name pos:line="330" pos:column="13">wordIsNumber</name></expr>)</condition><then pos:line="330" pos:column="26"> <block pos:line="330" pos:column="27">{
		<expr_stmt><expr><name pos:line="331" pos:column="17">chAttr</name> <op:operator pos:line="331" pos:column="24">=</op:operator> <name pos:line="331" pos:column="26">SCE_HJ_NUMBER</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="332" pos:column="11">else <if pos:line="332" pos:column="16">if <condition pos:line="332" pos:column="19">(<expr><call><name><name pos:line="332" pos:column="20">keywords</name><op:operator pos:line="332" pos:column="28">.</op:operator><name pos:line="332" pos:column="29">InList</name></name><argument_list pos:line="332" pos:column="35">(<argument><expr><name pos:line="332" pos:column="36">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="332" pos:column="39"> <block pos:line="332" pos:column="40">{
		<expr_stmt><expr><name pos:line="333" pos:column="17">chAttr</name> <op:operator pos:line="333" pos:column="24">=</op:operator> <name pos:line="333" pos:column="26">SCE_HJ_KEYWORD</name></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<expr_stmt><expr><call><name><name pos:line="335" pos:column="9">styler</name><op:operator pos:line="335" pos:column="15">.</op:operator><name pos:line="335" pos:column="16">ColourTo</name></name><argument_list pos:line="335" pos:column="24">(<argument><expr><name pos:line="335" pos:column="25">end</name></expr></argument>, <argument><expr><call><name pos:line="335" pos:column="30">statePrintForState</name><argument_list pos:line="335" pos:column="48">(<argument><expr><name pos:line="335" pos:column="49">chAttr</name></expr></argument>, <argument><expr><name pos:line="335" pos:column="57">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="338" pos:column="1">static</specifier> <name pos:line="338" pos:column="8">int</name></type> <name pos:line="338" pos:column="12">classifyWordHTVB</name><parameter_list pos:line="338" pos:column="28">(<param><decl><type><name pos:line="338" pos:column="29">unsigned</name> <name pos:line="338" pos:column="38">int</name></type> <name pos:line="338" pos:column="42">start</name></decl></param>, <param><decl><type><name pos:line="338" pos:column="49">unsigned</name> <name pos:line="338" pos:column="58">int</name></type> <name pos:line="338" pos:column="62">end</name></decl></param>, <param><decl><type><name pos:line="338" pos:column="67">WordList</name> <type:modifier pos:line="338" pos:column="76">&amp;</type:modifier></type><name pos:line="338" pos:column="77">keywords</name></decl></param>, <param><decl><type><name pos:line="338" pos:column="87">Accessor</name> <type:modifier pos:line="338" pos:column="96">&amp;</type:modifier></type><name pos:line="338" pos:column="97">styler</name></decl></param>, <param><decl><type><name pos:line="338" pos:column="105">script_mode</name></type> <name pos:line="338" pos:column="117">inScriptType</name></decl></param>)</parameter_list> <block pos:line="338" pos:column="131">{
	<decl_stmt><decl><type><name pos:line="339" pos:column="9">char</name></type> <name pos:line="339" pos:column="14">chAttr</name> <init pos:line="339" pos:column="21">= <expr><name pos:line="339" pos:column="23">SCE_HB_IDENTIFIER</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="340" pos:column="9">bool</name></type> <name pos:line="340" pos:column="14">wordIsNumber</name> <init pos:line="340" pos:column="27">= <expr><call><name pos:line="340" pos:column="29">IsADigit</name><argument_list pos:line="340" pos:column="37">(<argument><expr><name><name pos:line="340" pos:column="38">styler</name><index pos:line="340" pos:column="44">[<expr><name pos:line="340" pos:column="45">start</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="340" pos:column="53">||</op:operator> <op:operator pos:line="340" pos:column="56">(</op:operator><name><name pos:line="340" pos:column="57">styler</name><index pos:line="340" pos:column="63">[<expr><name pos:line="340" pos:column="64">start</name></expr>]</index></name> <op:operator pos:line="340" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="340" pos:column="74">'.'</lit:literal><op:operator pos:line="340" pos:column="77">)</op:operator></expr></init></decl>;</decl_stmt>
	<if pos:line="341" pos:column="9">if <condition pos:line="341" pos:column="12">(<expr><name pos:line="341" pos:column="13">wordIsNumber</name></expr>)</condition><then pos:line="341" pos:column="26">
		<expr_stmt><expr><name pos:line="342" pos:column="17">chAttr</name> <op:operator pos:line="342" pos:column="24">=</op:operator> <name pos:line="342" pos:column="26">SCE_HB_NUMBER</name></expr>;</expr_stmt></then>
	<else pos:line="343" pos:column="9">else <block pos:line="343" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="344" pos:column="17">char</name></type> <name><name pos:line="344" pos:column="22">s</name><index pos:line="344" pos:column="23">[<expr><lit:literal type="number" pos:line="344" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="345" pos:column="17">GetTextSegment</name><argument_list pos:line="345" pos:column="31">(<argument><expr><name pos:line="345" pos:column="32">styler</name></expr></argument>, <argument><expr><name pos:line="345" pos:column="40">start</name></expr></argument>, <argument><expr><name pos:line="345" pos:column="47">end</name></expr></argument>, <argument><expr><name pos:line="345" pos:column="52">s</name></expr></argument>, <argument><expr><sizeof pos:line="345" pos:column="55">sizeof<argument_list pos:line="345" pos:column="61">(<argument><expr><name pos:line="345" pos:column="62">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="346" pos:column="17">if <condition pos:line="346" pos:column="20">(<expr><call><name><name pos:line="346" pos:column="21">keywords</name><op:operator pos:line="346" pos:column="29">.</op:operator><name pos:line="346" pos:column="30">InList</name></name><argument_list pos:line="346" pos:column="36">(<argument><expr><name pos:line="346" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="346" pos:column="40"> <block pos:line="346" pos:column="41">{
			<expr_stmt><expr><name pos:line="347" pos:column="25">chAttr</name> <op:operator pos:line="347" pos:column="32">=</op:operator> <name pos:line="347" pos:column="34">SCE_HB_WORD</name></expr>;</expr_stmt>
			<if pos:line="348" pos:column="25">if <condition pos:line="348" pos:column="28">(<expr><call><name pos:line="348" pos:column="29">strcmp</name><argument_list pos:line="348" pos:column="35">(<argument><expr><name pos:line="348" pos:column="36">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="348" pos:column="39">"rem"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="348" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="348" pos:column="49">0</lit:literal></expr>)</condition><then pos:line="348" pos:column="51">
				<expr_stmt><expr><name pos:line="349" pos:column="33">chAttr</name> <op:operator pos:line="349" pos:column="40">=</op:operator> <name pos:line="349" pos:column="42">SCE_HB_COMMENTLINE</name></expr>;</expr_stmt></then></if>
		}</block></then></if>
	}</block></else></if>
	<expr_stmt><expr><call><name><name pos:line="352" pos:column="9">styler</name><op:operator pos:line="352" pos:column="15">.</op:operator><name pos:line="352" pos:column="16">ColourTo</name></name><argument_list pos:line="352" pos:column="24">(<argument><expr><name pos:line="352" pos:column="25">end</name></expr></argument>, <argument><expr><call><name pos:line="352" pos:column="30">statePrintForState</name><argument_list pos:line="352" pos:column="48">(<argument><expr><name pos:line="352" pos:column="49">chAttr</name></expr></argument>, <argument><expr><name pos:line="352" pos:column="57">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="353" pos:column="9">if <condition pos:line="353" pos:column="12">(<expr><name pos:line="353" pos:column="13">chAttr</name> <op:operator pos:line="353" pos:column="20">==</op:operator> <name pos:line="353" pos:column="23">SCE_HB_COMMENTLINE</name></expr>)</condition><then pos:line="353" pos:column="42">
		<return pos:line="354" pos:column="17">return <expr><name pos:line="354" pos:column="24">SCE_HB_COMMENTLINE</name></expr>;</return></then>
	<else pos:line="355" pos:column="9">else
		<return pos:line="356" pos:column="17">return <expr><name pos:line="356" pos:column="24">SCE_HB_DEFAULT</name></expr>;</return></else></if>
}</block></function>

<function><type><specifier pos:line="359" pos:column="1">static</specifier> <name pos:line="359" pos:column="8">void</name></type> <name pos:line="359" pos:column="13">classifyWordHTPy</name><parameter_list pos:line="359" pos:column="29">(<param><decl><type><name pos:line="359" pos:column="30">unsigned</name> <name pos:line="359" pos:column="39">int</name></type> <name pos:line="359" pos:column="43">start</name></decl></param>, <param><decl><type><name pos:line="359" pos:column="50">unsigned</name> <name pos:line="359" pos:column="59">int</name></type> <name pos:line="359" pos:column="63">end</name></decl></param>, <param><decl><type><name pos:line="359" pos:column="68">WordList</name> <type:modifier pos:line="359" pos:column="77">&amp;</type:modifier></type><name pos:line="359" pos:column="78">keywords</name></decl></param>, <param><decl><type><name pos:line="359" pos:column="88">Accessor</name> <type:modifier pos:line="359" pos:column="97">&amp;</type:modifier></type><name pos:line="359" pos:column="98">styler</name></decl></param>, <param><decl><type><name pos:line="359" pos:column="106">char</name> <type:modifier pos:line="359" pos:column="111">*</type:modifier></type><name pos:line="359" pos:column="112">prevWord</name></decl></param>, <param><decl><type><name pos:line="359" pos:column="122">script_mode</name></type> <name pos:line="359" pos:column="134">inScriptType</name></decl></param>)</parameter_list> <block pos:line="359" pos:column="148">{
	<decl_stmt><decl><type><name pos:line="360" pos:column="9">bool</name></type> <name pos:line="360" pos:column="14">wordIsNumber</name> <init pos:line="360" pos:column="27">= <expr><call><name pos:line="360" pos:column="29">IsADigit</name><argument_list pos:line="360" pos:column="37">(<argument><expr><name><name pos:line="360" pos:column="38">styler</name><index pos:line="360" pos:column="44">[<expr><name pos:line="360" pos:column="45">start</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="361" pos:column="9">char</name></type> <name><name pos:line="361" pos:column="14">s</name><index pos:line="361" pos:column="15">[<expr><lit:literal type="number" pos:line="361" pos:column="16">30</lit:literal> <op:operator pos:line="361" pos:column="19">+</op:operator> <lit:literal type="number" pos:line="361" pos:column="21">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="362" pos:column="9">unsigned</name> <name pos:line="362" pos:column="18">int</name></type> <name pos:line="362" pos:column="22">i</name> <init pos:line="362" pos:column="24">= <expr><lit:literal type="number" pos:line="362" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="363" pos:column="9">for (<init pos:line="363" pos:column="14">;</init> <condition><expr><name pos:line="363" pos:column="16">i</name> <op:operator pos:line="363" pos:column="18">&lt;</op:operator> <name pos:line="363" pos:column="20">end</name> <op:operator pos:line="363" pos:column="24">-</op:operator> <name pos:line="363" pos:column="26">start</name> <op:operator pos:line="363" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="363" pos:column="34">1</lit:literal> <op:operator pos:line="363" pos:column="36">&amp;&amp;</op:operator> <name pos:line="363" pos:column="39">i</name> <op:operator pos:line="363" pos:column="41">&lt;</op:operator> <lit:literal type="number" pos:line="363" pos:column="43">30</lit:literal></expr>;</condition> <incr><expr><name pos:line="363" pos:column="47">i</name><op:operator pos:line="363" pos:column="48">++</op:operator></expr></incr>) <block pos:line="363" pos:column="52">{
		<expr_stmt><expr><name><name pos:line="364" pos:column="17">s</name><index pos:line="364" pos:column="18">[<expr><name pos:line="364" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="364" pos:column="22">=</op:operator> <name><name pos:line="364" pos:column="24">styler</name><index pos:line="364" pos:column="30">[<expr><name pos:line="364" pos:column="31">start</name> <op:operator pos:line="364" pos:column="37">+</op:operator> <name pos:line="364" pos:column="39">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="366" pos:column="9">s</name><index pos:line="366" pos:column="10">[<expr><name pos:line="366" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="366" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="366" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="367" pos:column="9">char</name></type> <name pos:line="367" pos:column="14">chAttr</name> <init pos:line="367" pos:column="21">= <expr><name pos:line="367" pos:column="23">SCE_HP_IDENTIFIER</name></expr></init></decl>;</decl_stmt>
	<if pos:line="368" pos:column="9">if <condition pos:line="368" pos:column="12">(<expr><lit:literal type="number" pos:line="368" pos:column="13">0</lit:literal> <op:operator pos:line="368" pos:column="15">==</op:operator> <call><name pos:line="368" pos:column="18">strcmp</name><argument_list pos:line="368" pos:column="24">(<argument><expr><name pos:line="368" pos:column="25">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="368" pos:column="35">"class"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="368" pos:column="44">
		<expr_stmt><expr><name pos:line="369" pos:column="17">chAttr</name> <op:operator pos:line="369" pos:column="24">=</op:operator> <name pos:line="369" pos:column="26">SCE_HP_CLASSNAME</name></expr>;</expr_stmt></then>
	<else pos:line="370" pos:column="9">else <if pos:line="370" pos:column="14">if <condition pos:line="370" pos:column="17">(<expr><lit:literal type="number" pos:line="370" pos:column="18">0</lit:literal> <op:operator pos:line="370" pos:column="20">==</op:operator> <call><name pos:line="370" pos:column="23">strcmp</name><argument_list pos:line="370" pos:column="29">(<argument><expr><name pos:line="370" pos:column="30">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="370" pos:column="40">"def"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="370" pos:column="47">
		<expr_stmt><expr><name pos:line="371" pos:column="17">chAttr</name> <op:operator pos:line="371" pos:column="24">=</op:operator> <name pos:line="371" pos:column="26">SCE_HP_DEFNAME</name></expr>;</expr_stmt></then>
	<else pos:line="372" pos:column="9">else <if pos:line="372" pos:column="14">if <condition pos:line="372" pos:column="17">(<expr><name pos:line="372" pos:column="18">wordIsNumber</name></expr>)</condition><then pos:line="372" pos:column="31">
		<expr_stmt><expr><name pos:line="373" pos:column="17">chAttr</name> <op:operator pos:line="373" pos:column="24">=</op:operator> <name pos:line="373" pos:column="26">SCE_HP_NUMBER</name></expr>;</expr_stmt></then>
	<else pos:line="374" pos:column="9">else <if pos:line="374" pos:column="14">if <condition pos:line="374" pos:column="17">(<expr><call><name><name pos:line="374" pos:column="18">keywords</name><op:operator pos:line="374" pos:column="26">.</op:operator><name pos:line="374" pos:column="27">InList</name></name><argument_list pos:line="374" pos:column="33">(<argument><expr><name pos:line="374" pos:column="34">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="374" pos:column="37">
		<expr_stmt><expr><name pos:line="375" pos:column="17">chAttr</name> <op:operator pos:line="375" pos:column="24">=</op:operator> <name pos:line="375" pos:column="26">SCE_HP_WORD</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if>
	<expr_stmt><expr><call><name><name pos:line="376" pos:column="9">styler</name><op:operator pos:line="376" pos:column="15">.</op:operator><name pos:line="376" pos:column="16">ColourTo</name></name><argument_list pos:line="376" pos:column="24">(<argument><expr><name pos:line="376" pos:column="25">end</name></expr></argument>, <argument><expr><call><name pos:line="376" pos:column="30">statePrintForState</name><argument_list pos:line="376" pos:column="48">(<argument><expr><name pos:line="376" pos:column="49">chAttr</name></expr></argument>, <argument><expr><name pos:line="376" pos:column="57">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="377" pos:column="9">strcpy</name><argument_list pos:line="377" pos:column="15">(<argument><expr><name pos:line="377" pos:column="16">prevWord</name></expr></argument>, <argument><expr><name pos:line="377" pos:column="26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="380" pos:column="1">// Update the word colour to default or keyword</comment>
<comment type="line" pos:line="381" pos:column="1">// Called when in a PHP word</comment>
<function><type><specifier pos:line="382" pos:column="1">static</specifier> <name pos:line="382" pos:column="8">void</name></type> <name pos:line="382" pos:column="13">classifyWordHTPHP</name><parameter_list pos:line="382" pos:column="30">(<param><decl><type><name pos:line="382" pos:column="31">unsigned</name> <name pos:line="382" pos:column="40">int</name></type> <name pos:line="382" pos:column="44">start</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="51">unsigned</name> <name pos:line="382" pos:column="60">int</name></type> <name pos:line="382" pos:column="64">end</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="69">WordList</name> <type:modifier pos:line="382" pos:column="78">&amp;</type:modifier></type><name pos:line="382" pos:column="79">keywords</name></decl></param>, <param><decl><type><name pos:line="382" pos:column="89">Accessor</name> <type:modifier pos:line="382" pos:column="98">&amp;</type:modifier></type><name pos:line="382" pos:column="99">styler</name></decl></param>)</parameter_list> <block pos:line="382" pos:column="107">{
	<decl_stmt><decl><type><name pos:line="383" pos:column="9">char</name></type> <name pos:line="383" pos:column="14">chAttr</name> <init pos:line="383" pos:column="21">= <expr><name pos:line="383" pos:column="23">SCE_HPHP_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="384" pos:column="9">bool</name></type> <name pos:line="384" pos:column="14">wordIsNumber</name> <init pos:line="384" pos:column="27">= <expr><call><name pos:line="384" pos:column="29">IsADigit</name><argument_list pos:line="384" pos:column="37">(<argument><expr><name><name pos:line="384" pos:column="38">styler</name><index pos:line="384" pos:column="44">[<expr><name pos:line="384" pos:column="45">start</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="384" pos:column="53">||</op:operator> <op:operator pos:line="384" pos:column="56">(</op:operator><name><name pos:line="384" pos:column="57">styler</name><index pos:line="384" pos:column="63">[<expr><name pos:line="384" pos:column="64">start</name></expr>]</index></name> <op:operator pos:line="384" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="384" pos:column="74">'.'</lit:literal> <op:operator pos:line="384" pos:column="78">&amp;&amp;</op:operator> <name pos:line="384" pos:column="81">start</name><op:operator pos:line="384" pos:column="86">+</op:operator><lit:literal type="number" pos:line="384" pos:column="87">1</lit:literal> <op:operator pos:line="384" pos:column="89">&lt;=</op:operator> <name pos:line="384" pos:column="92">end</name> <op:operator pos:line="384" pos:column="96">&amp;&amp;</op:operator> <call><name pos:line="384" pos:column="99">IsADigit</name><argument_list pos:line="384" pos:column="107">(<argument><expr><name><name pos:line="384" pos:column="108">styler</name><index pos:line="384" pos:column="114">[<expr><name pos:line="384" pos:column="115">start</name><op:operator pos:line="384" pos:column="120">+</op:operator><lit:literal type="number" pos:line="384" pos:column="121">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="384" pos:column="124">)</op:operator></expr></init></decl>;</decl_stmt>
	<if pos:line="385" pos:column="9">if <condition pos:line="385" pos:column="12">(<expr><name pos:line="385" pos:column="13">wordIsNumber</name></expr>)</condition><then pos:line="385" pos:column="26">
		<expr_stmt><expr><name pos:line="386" pos:column="17">chAttr</name> <op:operator pos:line="386" pos:column="24">=</op:operator> <name pos:line="386" pos:column="26">SCE_HPHP_NUMBER</name></expr>;</expr_stmt></then>
	<else pos:line="387" pos:column="9">else <block pos:line="387" pos:column="14">{
		<decl_stmt><decl><type><name pos:line="388" pos:column="17">char</name></type> <name><name pos:line="388" pos:column="22">s</name><index pos:line="388" pos:column="23">[<expr><lit:literal type="number" pos:line="388" pos:column="24">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="389" pos:column="17">GetTextSegment</name><argument_list pos:line="389" pos:column="31">(<argument><expr><name pos:line="389" pos:column="32">styler</name></expr></argument>, <argument><expr><name pos:line="389" pos:column="40">start</name></expr></argument>, <argument><expr><name pos:line="389" pos:column="47">end</name></expr></argument>, <argument><expr><name pos:line="389" pos:column="52">s</name></expr></argument>, <argument><expr><sizeof pos:line="389" pos:column="55">sizeof<argument_list pos:line="389" pos:column="61">(<argument><expr><name pos:line="389" pos:column="62">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="390" pos:column="17">if <condition pos:line="390" pos:column="20">(<expr><call><name><name pos:line="390" pos:column="21">keywords</name><op:operator pos:line="390" pos:column="29">.</op:operator><name pos:line="390" pos:column="30">InList</name></name><argument_list pos:line="390" pos:column="36">(<argument><expr><name pos:line="390" pos:column="37">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="390" pos:column="40">
			<expr_stmt><expr><name pos:line="391" pos:column="25">chAttr</name> <op:operator pos:line="391" pos:column="32">=</op:operator> <name pos:line="391" pos:column="34">SCE_HPHP_WORD</name></expr>;</expr_stmt></then></if>
	}</block></else></if>
	<expr_stmt><expr><call><name><name pos:line="393" pos:column="9">styler</name><op:operator pos:line="393" pos:column="15">.</op:operator><name pos:line="393" pos:column="16">ColourTo</name></name><argument_list pos:line="393" pos:column="24">(<argument><expr><name pos:line="393" pos:column="25">end</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="30">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="396" pos:column="1">static</specifier> <name pos:line="396" pos:column="8">bool</name></type> <name pos:line="396" pos:column="13">isWordHSGML</name><parameter_list pos:line="396" pos:column="24">(<param><decl><type><name pos:line="396" pos:column="25">unsigned</name> <name pos:line="396" pos:column="34">int</name></type> <name pos:line="396" pos:column="38">start</name></decl></param>, <param><decl><type><name pos:line="396" pos:column="45">unsigned</name> <name pos:line="396" pos:column="54">int</name></type> <name pos:line="396" pos:column="58">end</name></decl></param>, <param><decl><type><name pos:line="396" pos:column="63">WordList</name> <type:modifier pos:line="396" pos:column="72">&amp;</type:modifier></type><name pos:line="396" pos:column="73">keywords</name></decl></param>, <param><decl><type><name pos:line="396" pos:column="83">Accessor</name> <type:modifier pos:line="396" pos:column="92">&amp;</type:modifier></type><name pos:line="396" pos:column="93">styler</name></decl></param>)</parameter_list> <block pos:line="396" pos:column="101">{
	<decl_stmt><decl><type><name pos:line="397" pos:column="9">char</name></type> <name><name pos:line="397" pos:column="14">s</name><index pos:line="397" pos:column="15">[<expr><lit:literal type="number" pos:line="397" pos:column="16">30</lit:literal> <op:operator pos:line="397" pos:column="19">+</op:operator> <lit:literal type="number" pos:line="397" pos:column="21">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="398" pos:column="9">unsigned</name> <name pos:line="398" pos:column="18">int</name></type> <name pos:line="398" pos:column="22">i</name> <init pos:line="398" pos:column="24">= <expr><lit:literal type="number" pos:line="398" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="399" pos:column="9">for (<init pos:line="399" pos:column="14">;</init> <condition><expr><name pos:line="399" pos:column="16">i</name> <op:operator pos:line="399" pos:column="18">&lt;</op:operator> <name pos:line="399" pos:column="20">end</name> <op:operator pos:line="399" pos:column="24">-</op:operator> <name pos:line="399" pos:column="26">start</name> <op:operator pos:line="399" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="399" pos:column="34">1</lit:literal> <op:operator pos:line="399" pos:column="36">&amp;&amp;</op:operator> <name pos:line="399" pos:column="39">i</name> <op:operator pos:line="399" pos:column="41">&lt;</op:operator> <lit:literal type="number" pos:line="399" pos:column="43">30</lit:literal></expr>;</condition> <incr><expr><name pos:line="399" pos:column="47">i</name><op:operator pos:line="399" pos:column="48">++</op:operator></expr></incr>) <block pos:line="399" pos:column="52">{
		<expr_stmt><expr><name><name pos:line="400" pos:column="17">s</name><index pos:line="400" pos:column="18">[<expr><name pos:line="400" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="400" pos:column="22">=</op:operator> <name><name pos:line="400" pos:column="24">styler</name><index pos:line="400" pos:column="30">[<expr><name pos:line="400" pos:column="31">start</name> <op:operator pos:line="400" pos:column="37">+</op:operator> <name pos:line="400" pos:column="39">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="402" pos:column="9">s</name><index pos:line="402" pos:column="10">[<expr><name pos:line="402" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="402" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="402" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
	<return pos:line="403" pos:column="9">return <expr><call><name><name pos:line="403" pos:column="16">keywords</name><op:operator pos:line="403" pos:column="24">.</op:operator><name pos:line="403" pos:column="25">InList</name></name><argument_list pos:line="403" pos:column="31">(<argument><expr><name pos:line="403" pos:column="32">s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="406" pos:column="1">static</specifier> <name pos:line="406" pos:column="8">bool</name></type> <name pos:line="406" pos:column="13">isWordCdata</name><parameter_list pos:line="406" pos:column="24">(<param><decl><type><name pos:line="406" pos:column="25">unsigned</name> <name pos:line="406" pos:column="34">int</name></type> <name pos:line="406" pos:column="38">start</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="45">unsigned</name> <name pos:line="406" pos:column="54">int</name></type> <name pos:line="406" pos:column="58">end</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="63">Accessor</name> <type:modifier pos:line="406" pos:column="72">&amp;</type:modifier></type><name pos:line="406" pos:column="73">styler</name></decl></param>)</parameter_list> <block pos:line="406" pos:column="81">{
	<decl_stmt><decl><type><name pos:line="407" pos:column="9">char</name></type> <name><name pos:line="407" pos:column="14">s</name><index pos:line="407" pos:column="15">[<expr><lit:literal type="number" pos:line="407" pos:column="16">30</lit:literal> <op:operator pos:line="407" pos:column="19">+</op:operator> <lit:literal type="number" pos:line="407" pos:column="21">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="408" pos:column="9">unsigned</name> <name pos:line="408" pos:column="18">int</name></type> <name pos:line="408" pos:column="22">i</name> <init pos:line="408" pos:column="24">= <expr><lit:literal type="number" pos:line="408" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="409" pos:column="9">for (<init pos:line="409" pos:column="14">;</init> <condition><expr><name pos:line="409" pos:column="16">i</name> <op:operator pos:line="409" pos:column="18">&lt;</op:operator> <name pos:line="409" pos:column="20">end</name> <op:operator pos:line="409" pos:column="24">-</op:operator> <name pos:line="409" pos:column="26">start</name> <op:operator pos:line="409" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="409" pos:column="34">1</lit:literal> <op:operator pos:line="409" pos:column="36">&amp;&amp;</op:operator> <name pos:line="409" pos:column="39">i</name> <op:operator pos:line="409" pos:column="41">&lt;</op:operator> <lit:literal type="number" pos:line="409" pos:column="43">30</lit:literal></expr>;</condition> <incr><expr><name pos:line="409" pos:column="47">i</name><op:operator pos:line="409" pos:column="48">++</op:operator></expr></incr>) <block pos:line="409" pos:column="52">{
		<expr_stmt><expr><name><name pos:line="410" pos:column="17">s</name><index pos:line="410" pos:column="18">[<expr><name pos:line="410" pos:column="19">i</name></expr>]</index></name> <op:operator pos:line="410" pos:column="22">=</op:operator> <name><name pos:line="410" pos:column="24">styler</name><index pos:line="410" pos:column="30">[<expr><name pos:line="410" pos:column="31">start</name> <op:operator pos:line="410" pos:column="37">+</op:operator> <name pos:line="410" pos:column="39">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="412" pos:column="9">s</name><index pos:line="412" pos:column="10">[<expr><name pos:line="412" pos:column="11">i</name></expr>]</index></name> <op:operator pos:line="412" pos:column="14">=</op:operator> <lit:literal type="char" pos:line="412" pos:column="16">'\0'</lit:literal></expr>;</expr_stmt>
	<return pos:line="413" pos:column="9">return <expr><op:operator pos:line="413" pos:column="16">(</op:operator><lit:literal type="number" pos:line="413" pos:column="17">0</lit:literal> <op:operator pos:line="413" pos:column="19">==</op:operator> <call><name pos:line="413" pos:column="22">strcmp</name><argument_list pos:line="413" pos:column="28">(<argument><expr><name pos:line="413" pos:column="29">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="413" pos:column="32">"[CDATA["</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="413" pos:column="42">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="416" pos:column="1">// Return the first state to reach when entering a scripting language</comment>
<function><type><specifier pos:line="417" pos:column="1">static</specifier> <name pos:line="417" pos:column="8">int</name></type> <name pos:line="417" pos:column="12">StateForScript</name><parameter_list pos:line="417" pos:column="26">(<param><decl><type><name pos:line="417" pos:column="27">script_type</name></type> <name pos:line="417" pos:column="39">scriptLanguage</name></decl></param>)</parameter_list> <block pos:line="417" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="418" pos:column="9">int</name></type> <name pos:line="418" pos:column="13">Result</name></decl>;</decl_stmt>
	<switch pos:line="419" pos:column="9">switch <condition pos:line="419" pos:column="16">(<expr><name pos:line="419" pos:column="17">scriptLanguage</name></expr>)</condition> <block pos:line="419" pos:column="33">{
	<case pos:line="420" pos:column="9">case <expr><name pos:line="420" pos:column="14">eScriptJS</name></expr>:
		<expr_stmt><expr><name pos:line="421" pos:column="17">Result</name> <op:operator pos:line="421" pos:column="24">=</op:operator> <name pos:line="421" pos:column="26">SCE_HJ_START</name></expr>;</expr_stmt>
		<break pos:line="422" pos:column="17">break;</break>
	</case><case pos:line="423" pos:column="9">case <expr><name pos:line="423" pos:column="14">eScriptPython</name></expr>:
		<expr_stmt><expr><name pos:line="424" pos:column="17">Result</name> <op:operator pos:line="424" pos:column="24">=</op:operator> <name pos:line="424" pos:column="26">SCE_HP_START</name></expr>;</expr_stmt>
		<break pos:line="425" pos:column="17">break;</break>
	</case><case pos:line="426" pos:column="9">case <expr><name pos:line="426" pos:column="14">eScriptPHP</name></expr>:
		<expr_stmt><expr><name pos:line="427" pos:column="17">Result</name> <op:operator pos:line="427" pos:column="24">=</op:operator> <name pos:line="427" pos:column="26">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
		<break pos:line="428" pos:column="17">break;</break>
	</case><case pos:line="429" pos:column="9">case <expr><name pos:line="429" pos:column="14">eScriptXML</name></expr>:
		<expr_stmt><expr><name pos:line="430" pos:column="17">Result</name> <op:operator pos:line="430" pos:column="24">=</op:operator> <name pos:line="430" pos:column="26">SCE_H_TAGUNKNOWN</name></expr>;</expr_stmt>
		<break pos:line="431" pos:column="17">break;</break>
	</case><case pos:line="432" pos:column="9">case <expr><name pos:line="432" pos:column="14">eScriptSGML</name></expr>:
		<expr_stmt><expr><name pos:line="433" pos:column="17">Result</name> <op:operator pos:line="433" pos:column="24">=</op:operator> <name pos:line="433" pos:column="26">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
		<break pos:line="434" pos:column="17">break;</break>
	</case><case pos:line="435" pos:column="9">case <expr><name pos:line="435" pos:column="14">eScriptComment</name></expr>:
		<expr_stmt><expr><name pos:line="436" pos:column="17">Result</name> <op:operator pos:line="436" pos:column="24">=</op:operator> <name pos:line="436" pos:column="26">SCE_H_COMMENT</name></expr>;</expr_stmt>
		<break pos:line="437" pos:column="17">break;</break>
	</case><default pos:line="438" pos:column="9">default :
		<expr_stmt><expr><name pos:line="439" pos:column="17">Result</name> <op:operator pos:line="439" pos:column="24">=</op:operator> <name pos:line="439" pos:column="26">SCE_HB_START</name></expr>;</expr_stmt>
		<break pos:line="440" pos:column="17">break;</break>
	</default>}</block></switch>
	<return pos:line="442" pos:column="9">return <expr><name pos:line="442" pos:column="16">Result</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="445" pos:column="1">static</specifier> <specifier pos:line="445" pos:column="8">inline</specifier> <name pos:line="445" pos:column="15">bool</name></type> <name pos:line="445" pos:column="20">ishtmlwordchar</name><parameter_list pos:line="445" pos:column="34">(<param><decl><type><name pos:line="445" pos:column="35">int</name></type> <name pos:line="445" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="445" pos:column="43">{
	<return pos:line="446" pos:column="9">return <expr><op:operator pos:line="446" pos:column="16">!</op:operator><call><name pos:line="446" pos:column="17">isascii</name><argument_list pos:line="446" pos:column="24">(<argument><expr><name pos:line="446" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="446" pos:column="29">||</op:operator>
		<op:operator pos:line="447" pos:column="17">(</op:operator><call><name pos:line="447" pos:column="18">isalnum</name><argument_list pos:line="447" pos:column="25">(<argument><expr><name pos:line="447" pos:column="26">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="447" pos:column="30">||</op:operator> <name pos:line="447" pos:column="33">ch</name> <op:operator pos:line="447" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="447" pos:column="39">'.'</lit:literal> <op:operator pos:line="447" pos:column="43">||</op:operator> <name pos:line="447" pos:column="46">ch</name> <op:operator pos:line="447" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="447" pos:column="52">'-'</lit:literal> <op:operator pos:line="447" pos:column="56">||</op:operator> <name pos:line="447" pos:column="59">ch</name> <op:operator pos:line="447" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="447" pos:column="65">'_'</lit:literal> <op:operator pos:line="447" pos:column="69">||</op:operator> <name pos:line="447" pos:column="72">ch</name> <op:operator pos:line="447" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="447" pos:column="78">':'</lit:literal> <op:operator pos:line="447" pos:column="82">||</op:operator> <name pos:line="447" pos:column="85">ch</name> <op:operator pos:line="447" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="447" pos:column="91">'!'</lit:literal> <op:operator pos:line="447" pos:column="95">||</op:operator> <name pos:line="447" pos:column="98">ch</name> <op:operator pos:line="447" pos:column="101">==</op:operator> <lit:literal type="char" pos:line="447" pos:column="104">'#'</lit:literal><op:operator pos:line="447" pos:column="107">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="450" pos:column="1">static</specifier> <specifier pos:line="450" pos:column="8">inline</specifier> <name pos:line="450" pos:column="15">bool</name></type> <name pos:line="450" pos:column="20">issgmlwordchar</name><parameter_list pos:line="450" pos:column="34">(<param><decl><type><name pos:line="450" pos:column="35">int</name></type> <name pos:line="450" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="450" pos:column="43">{
	<return pos:line="451" pos:column="9">return <expr><op:operator pos:line="451" pos:column="16">!</op:operator><call><name pos:line="451" pos:column="17">isascii</name><argument_list pos:line="451" pos:column="24">(<argument><expr><name pos:line="451" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="451" pos:column="29">||</op:operator>
		<op:operator pos:line="452" pos:column="17">(</op:operator><call><name pos:line="452" pos:column="18">isalnum</name><argument_list pos:line="452" pos:column="25">(<argument><expr><name pos:line="452" pos:column="26">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="452" pos:column="30">||</op:operator> <name pos:line="452" pos:column="33">ch</name> <op:operator pos:line="452" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="452" pos:column="39">'.'</lit:literal> <op:operator pos:line="452" pos:column="43">||</op:operator> <name pos:line="452" pos:column="46">ch</name> <op:operator pos:line="452" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="452" pos:column="52">'_'</lit:literal> <op:operator pos:line="452" pos:column="56">||</op:operator> <name pos:line="452" pos:column="59">ch</name> <op:operator pos:line="452" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="452" pos:column="65">':'</lit:literal> <op:operator pos:line="452" pos:column="69">||</op:operator> <name pos:line="452" pos:column="72">ch</name> <op:operator pos:line="452" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="452" pos:column="78">'!'</lit:literal> <op:operator pos:line="452" pos:column="82">||</op:operator> <name pos:line="452" pos:column="85">ch</name> <op:operator pos:line="452" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="452" pos:column="91">'#'</lit:literal> <op:operator pos:line="452" pos:column="95">||</op:operator> <name pos:line="452" pos:column="98">ch</name> <op:operator pos:line="452" pos:column="101">==</op:operator> <lit:literal type="char" pos:line="452" pos:column="104">'['</lit:literal><op:operator pos:line="452" pos:column="107">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="455" pos:column="1">static</specifier> <specifier pos:line="455" pos:column="8">inline</specifier> <name pos:line="455" pos:column="15">bool</name></type> <name pos:line="455" pos:column="20">IsPhpWordStart</name><parameter_list pos:line="455" pos:column="34">(<param><decl><type><name pos:line="455" pos:column="35">int</name></type> <name pos:line="455" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="455" pos:column="43">{
	<return pos:line="456" pos:column="9">return <expr><op:operator pos:line="456" pos:column="16">(</op:operator><call><name pos:line="456" pos:column="17">isascii</name><argument_list pos:line="456" pos:column="24">(<argument><expr><name pos:line="456" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="456" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="456" pos:column="32">(</op:operator><call><name pos:line="456" pos:column="33">isalpha</name><argument_list pos:line="456" pos:column="40">(<argument><expr><name pos:line="456" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="456" pos:column="45">||</op:operator> <op:operator pos:line="456" pos:column="48">(</op:operator><name pos:line="456" pos:column="49">ch</name> <op:operator pos:line="456" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="456" pos:column="55">'_'</lit:literal><op:operator pos:line="456" pos:column="58">)</op:operator><op:operator pos:line="456" pos:column="59">)</op:operator><op:operator pos:line="456" pos:column="60">)</op:operator> <op:operator pos:line="456" pos:column="62">||</op:operator> <op:operator pos:line="456" pos:column="65">(</op:operator><name pos:line="456" pos:column="66">ch</name> <op:operator pos:line="456" pos:column="69">&gt;=</op:operator> <lit:literal type="number" pos:line="456" pos:column="72">0x7f</lit:literal><op:operator pos:line="456" pos:column="76">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="459" pos:column="1">static</specifier> <specifier pos:line="459" pos:column="8">inline</specifier> <name pos:line="459" pos:column="15">bool</name></type> <name pos:line="459" pos:column="20">IsPhpWordChar</name><parameter_list pos:line="459" pos:column="33">(<param><decl><type><name pos:line="459" pos:column="34">int</name></type> <name pos:line="459" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="459" pos:column="42">{
	<return pos:line="460" pos:column="9">return <expr><call><name pos:line="460" pos:column="16">IsADigit</name><argument_list pos:line="460" pos:column="24">(<argument><expr><name pos:line="460" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="460" pos:column="29">||</op:operator> <call><name pos:line="460" pos:column="32">IsPhpWordStart</name><argument_list pos:line="460" pos:column="46">(<argument><expr><name pos:line="460" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="463" pos:column="1">static</specifier> <name pos:line="463" pos:column="8">bool</name></type> <name pos:line="463" pos:column="13">InTagState</name><parameter_list pos:line="463" pos:column="23">(<param><decl><type><name pos:line="463" pos:column="24">int</name></type> <name pos:line="463" pos:column="28">state</name></decl></param>)</parameter_list> <block pos:line="463" pos:column="35">{
	<return pos:line="464" pos:column="9">return <expr><name pos:line="464" pos:column="16">state</name> <op:operator pos:line="464" pos:column="22">==</op:operator> <name pos:line="464" pos:column="25">SCE_H_TAG</name> <op:operator pos:line="464" pos:column="35">||</op:operator> <name pos:line="464" pos:column="38">state</name> <op:operator pos:line="464" pos:column="44">==</op:operator> <name pos:line="464" pos:column="47">SCE_H_TAGUNKNOWN</name> <op:operator pos:line="464" pos:column="64">||</op:operator>
	       <name pos:line="465" pos:column="16">state</name> <op:operator pos:line="465" pos:column="22">==</op:operator> <name pos:line="465" pos:column="25">SCE_H_SCRIPT</name> <op:operator pos:line="465" pos:column="38">||</op:operator>
	       <name pos:line="466" pos:column="16">state</name> <op:operator pos:line="466" pos:column="22">==</op:operator> <name pos:line="466" pos:column="25">SCE_H_ATTRIBUTE</name> <op:operator pos:line="466" pos:column="41">||</op:operator> <name pos:line="466" pos:column="44">state</name> <op:operator pos:line="466" pos:column="50">==</op:operator> <name pos:line="466" pos:column="53">SCE_H_ATTRIBUTEUNKNOWN</name> <op:operator pos:line="466" pos:column="76">||</op:operator>
	       <name pos:line="467" pos:column="16">state</name> <op:operator pos:line="467" pos:column="22">==</op:operator> <name pos:line="467" pos:column="25">SCE_H_NUMBER</name> <op:operator pos:line="467" pos:column="38">||</op:operator> <name pos:line="467" pos:column="41">state</name> <op:operator pos:line="467" pos:column="47">==</op:operator> <name pos:line="467" pos:column="50">SCE_H_OTHER</name> <op:operator pos:line="467" pos:column="62">||</op:operator>
	       <name pos:line="468" pos:column="16">state</name> <op:operator pos:line="468" pos:column="22">==</op:operator> <name pos:line="468" pos:column="25">SCE_H_DOUBLESTRING</name> <op:operator pos:line="468" pos:column="44">||</op:operator> <name pos:line="468" pos:column="47">state</name> <op:operator pos:line="468" pos:column="53">==</op:operator> <name pos:line="468" pos:column="56">SCE_H_SINGLESTRING</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="471" pos:column="1">static</specifier> <name pos:line="471" pos:column="8">bool</name></type> <name pos:line="471" pos:column="13">IsCommentState</name><parameter_list pos:line="471" pos:column="27">(<param><decl><type><specifier pos:line="471" pos:column="28">const</specifier> <name pos:line="471" pos:column="34">int</name></type> <name pos:line="471" pos:column="38">state</name></decl></param>)</parameter_list> <block pos:line="471" pos:column="45">{
	<return pos:line="472" pos:column="9">return <expr><name pos:line="472" pos:column="16">state</name> <op:operator pos:line="472" pos:column="22">==</op:operator> <name pos:line="472" pos:column="25">SCE_H_COMMENT</name> <op:operator pos:line="472" pos:column="39">||</op:operator> <name pos:line="472" pos:column="42">state</name> <op:operator pos:line="472" pos:column="48">==</op:operator> <name pos:line="472" pos:column="51">SCE_H_SGML_COMMENT</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="475" pos:column="1">static</specifier> <name pos:line="475" pos:column="8">bool</name></type> <name pos:line="475" pos:column="13">IsScriptCommentState</name><parameter_list pos:line="475" pos:column="33">(<param><decl><type><specifier pos:line="475" pos:column="34">const</specifier> <name pos:line="475" pos:column="40">int</name></type> <name pos:line="475" pos:column="44">state</name></decl></param>)</parameter_list> <block pos:line="475" pos:column="51">{
	<return pos:line="476" pos:column="9">return <expr><name pos:line="476" pos:column="16">state</name> <op:operator pos:line="476" pos:column="22">==</op:operator> <name pos:line="476" pos:column="25">SCE_HJ_COMMENT</name> <op:operator pos:line="476" pos:column="40">||</op:operator> <name pos:line="476" pos:column="43">state</name> <op:operator pos:line="476" pos:column="49">==</op:operator> <name pos:line="476" pos:column="52">SCE_HJ_COMMENTLINE</name> <op:operator pos:line="476" pos:column="71">||</op:operator> <name pos:line="476" pos:column="74">state</name> <op:operator pos:line="476" pos:column="80">==</op:operator> <name pos:line="476" pos:column="83">SCE_HJA_COMMENT</name> <op:operator pos:line="476" pos:column="99">||</op:operator>
		   <name pos:line="477" pos:column="20">state</name> <op:operator pos:line="477" pos:column="26">==</op:operator> <name pos:line="477" pos:column="29">SCE_HJA_COMMENTLINE</name> <op:operator pos:line="477" pos:column="49">||</op:operator> <name pos:line="477" pos:column="52">state</name> <op:operator pos:line="477" pos:column="58">==</op:operator> <name pos:line="477" pos:column="61">SCE_HB_COMMENTLINE</name> <op:operator pos:line="477" pos:column="80">||</op:operator> <name pos:line="477" pos:column="83">state</name> <op:operator pos:line="477" pos:column="89">==</op:operator> <name pos:line="477" pos:column="92">SCE_HBA_COMMENTLINE</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="480" pos:column="1">static</specifier> <name pos:line="480" pos:column="8">bool</name></type> <name pos:line="480" pos:column="13">isLineEnd</name><parameter_list pos:line="480" pos:column="22">(<param><decl><type><name pos:line="480" pos:column="23">int</name></type> <name pos:line="480" pos:column="27">ch</name></decl></param>)</parameter_list> <block pos:line="480" pos:column="31">{
	<return pos:line="481" pos:column="9">return <expr><name pos:line="481" pos:column="16">ch</name> <op:operator pos:line="481" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="481" pos:column="22">'\r'</lit:literal> <op:operator pos:line="481" pos:column="27">||</op:operator> <name pos:line="481" pos:column="30">ch</name> <op:operator pos:line="481" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="481" pos:column="36">'\n'</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="484" pos:column="1">static</specifier> <name pos:line="484" pos:column="8">bool</name></type> <name pos:line="484" pos:column="13">isOKBeforeRE</name><parameter_list pos:line="484" pos:column="25">(<param><decl><type><name pos:line="484" pos:column="26">int</name></type> <name pos:line="484" pos:column="30">ch</name></decl></param>)</parameter_list> <block pos:line="484" pos:column="34">{
	<return pos:line="485" pos:column="9">return <expr><op:operator pos:line="485" pos:column="16">(</op:operator><name pos:line="485" pos:column="17">ch</name> <op:operator pos:line="485" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="485" pos:column="23">'('</lit:literal><op:operator pos:line="485" pos:column="26">)</op:operator> <op:operator pos:line="485" pos:column="28">||</op:operator> <op:operator pos:line="485" pos:column="31">(</op:operator><name pos:line="485" pos:column="32">ch</name> <op:operator pos:line="485" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="485" pos:column="38">'='</lit:literal><op:operator pos:line="485" pos:column="41">)</op:operator> <op:operator pos:line="485" pos:column="43">||</op:operator> <op:operator pos:line="485" pos:column="46">(</op:operator><name pos:line="485" pos:column="47">ch</name> <op:operator pos:line="485" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="485" pos:column="53">','</lit:literal><op:operator pos:line="485" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="488" pos:column="1">static</specifier> <name pos:line="488" pos:column="8">bool</name></type> <name pos:line="488" pos:column="13">isMakoBlockEnd</name><parameter_list pos:line="488" pos:column="27">(<param><decl><type><specifier pos:line="488" pos:column="28">const</specifier> <name pos:line="488" pos:column="34">int</name></type> <name pos:line="488" pos:column="38">ch</name></decl></param>, <param><decl><type><specifier pos:line="488" pos:column="42">const</specifier> <name pos:line="488" pos:column="48">int</name></type> <name pos:line="488" pos:column="52">chNext</name></decl></param>, <param><decl><type><specifier pos:line="488" pos:column="60">const</specifier> <name pos:line="488" pos:column="66">char</name> <type:modifier pos:line="488" pos:column="71">*</type:modifier></type><name pos:line="488" pos:column="72">blockType</name></decl></param>)</parameter_list> <block pos:line="488" pos:column="83">{
	<if pos:line="489" pos:column="9">if <condition pos:line="489" pos:column="12">(<expr><call><name pos:line="489" pos:column="13">strlen</name><argument_list pos:line="489" pos:column="19">(<argument><expr><name pos:line="489" pos:column="20">blockType</name></expr></argument>)</argument_list></call> <op:operator pos:line="489" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="489" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="489" pos:column="36"> <block pos:line="489" pos:column="37">{
		<return pos:line="490" pos:column="17">return <expr><op:operator pos:line="490" pos:column="24">(</op:operator><op:operator pos:line="490" pos:column="25">(</op:operator><name pos:line="490" pos:column="26">ch</name> <op:operator pos:line="490" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="490" pos:column="32">'%'</lit:literal><op:operator pos:line="490" pos:column="35">)</op:operator> <op:operator pos:line="490" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="490" pos:column="40">(</op:operator><name pos:line="490" pos:column="41">chNext</name> <op:operator pos:line="490" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="490" pos:column="51">'&gt;'</lit:literal><op:operator pos:line="490" pos:column="54">)</op:operator><op:operator pos:line="490" pos:column="55">)</op:operator></expr>;</return>
	}</block></then> <else pos:line="491" pos:column="11">else <if pos:line="491" pos:column="16">if <condition pos:line="491" pos:column="19">(<expr><op:operator pos:line="491" pos:column="20">(</op:operator><lit:literal type="number" pos:line="491" pos:column="21">0</lit:literal> <op:operator pos:line="491" pos:column="23">==</op:operator> <call><name pos:line="491" pos:column="26">strcmp</name><argument_list pos:line="491" pos:column="32">(<argument><expr><name pos:line="491" pos:column="33">blockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="491" pos:column="44">"inherit"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="491" pos:column="54">)</op:operator> <op:operator pos:line="491" pos:column="56">||</op:operator>
			   <op:operator pos:line="492" pos:column="28">(</op:operator><lit:literal type="number" pos:line="492" pos:column="29">0</lit:literal> <op:operator pos:line="492" pos:column="31">==</op:operator> <call><name pos:line="492" pos:column="34">strcmp</name><argument_list pos:line="492" pos:column="40">(<argument><expr><name pos:line="492" pos:column="41">blockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="492" pos:column="52">"namespace"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="492" pos:column="64">)</op:operator> <op:operator pos:line="492" pos:column="66">||</op:operator>
			   <op:operator pos:line="493" pos:column="28">(</op:operator><lit:literal type="number" pos:line="493" pos:column="29">0</lit:literal> <op:operator pos:line="493" pos:column="31">==</op:operator> <call><name pos:line="493" pos:column="34">strcmp</name><argument_list pos:line="493" pos:column="40">(<argument><expr><name pos:line="493" pos:column="41">blockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="493" pos:column="52">"include"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="493" pos:column="62">)</op:operator> <op:operator pos:line="493" pos:column="64">||</op:operator>
			   <op:operator pos:line="494" pos:column="28">(</op:operator><lit:literal type="number" pos:line="494" pos:column="29">0</lit:literal> <op:operator pos:line="494" pos:column="31">==</op:operator> <call><name pos:line="494" pos:column="34">strcmp</name><argument_list pos:line="494" pos:column="40">(<argument><expr><name pos:line="494" pos:column="41">blockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="494" pos:column="52">"page"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="494" pos:column="59">)</op:operator></expr>)</condition><then pos:line="494" pos:column="61"> <block pos:line="494" pos:column="62">{
		<return pos:line="495" pos:column="17">return <expr><op:operator pos:line="495" pos:column="24">(</op:operator><op:operator pos:line="495" pos:column="25">(</op:operator><name pos:line="495" pos:column="26">ch</name> <op:operator pos:line="495" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="495" pos:column="32">'/'</lit:literal><op:operator pos:line="495" pos:column="35">)</op:operator> <op:operator pos:line="495" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="495" pos:column="40">(</op:operator><name pos:line="495" pos:column="41">chNext</name> <op:operator pos:line="495" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="495" pos:column="51">'&gt;'</lit:literal><op:operator pos:line="495" pos:column="54">)</op:operator><op:operator pos:line="495" pos:column="55">)</op:operator></expr>;</return>
	}</block></then> <else pos:line="496" pos:column="11">else <if pos:line="496" pos:column="16">if <condition pos:line="496" pos:column="19">(<expr><lit:literal type="number" pos:line="496" pos:column="20">0</lit:literal> <op:operator pos:line="496" pos:column="22">==</op:operator> <call><name pos:line="496" pos:column="25">strcmp</name><argument_list pos:line="496" pos:column="31">(<argument><expr><name pos:line="496" pos:column="32">blockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="496" pos:column="43">"%"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="496" pos:column="48"> <block pos:line="496" pos:column="49">{
		<return pos:line="497" pos:column="17">return <expr><call><name pos:line="497" pos:column="24">isLineEnd</name><argument_list pos:line="497" pos:column="33">(<argument><expr><name pos:line="497" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="498" pos:column="11">else <if pos:line="498" pos:column="16">if <condition pos:line="498" pos:column="19">(<expr><lit:literal type="number" pos:line="498" pos:column="20">0</lit:literal> <op:operator pos:line="498" pos:column="22">==</op:operator> <call><name pos:line="498" pos:column="25">strcmp</name><argument_list pos:line="498" pos:column="31">(<argument><expr><name pos:line="498" pos:column="32">blockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="498" pos:column="43">"{"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="498" pos:column="48"> <block pos:line="498" pos:column="49">{
		<return pos:line="499" pos:column="17">return <expr><name pos:line="499" pos:column="24">ch</name> <op:operator pos:line="499" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="499" pos:column="30">'}'</lit:literal></expr>;</return>
	}</block></then> <else pos:line="500" pos:column="11">else <block pos:line="500" pos:column="16">{
		<return pos:line="501" pos:column="17">return <expr><op:operator pos:line="501" pos:column="24">(</op:operator><name pos:line="501" pos:column="25">ch</name> <op:operator pos:line="501" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="501" pos:column="31">'&gt;'</lit:literal><op:operator pos:line="501" pos:column="34">)</op:operator></expr>;</return>
	}</block></else></if></else></if></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="505" pos:column="1">static</specifier> <name pos:line="505" pos:column="8">bool</name></type> <name pos:line="505" pos:column="13">isDjangoBlockEnd</name><parameter_list pos:line="505" pos:column="29">(<param><decl><type><specifier pos:line="505" pos:column="30">const</specifier> <name pos:line="505" pos:column="36">int</name></type> <name pos:line="505" pos:column="40">ch</name></decl></param>, <param><decl><type><specifier pos:line="505" pos:column="44">const</specifier> <name pos:line="505" pos:column="50">int</name></type> <name pos:line="505" pos:column="54">chNext</name></decl></param>, <param><decl><type><specifier pos:line="505" pos:column="62">const</specifier> <name pos:line="505" pos:column="68">char</name> <type:modifier pos:line="505" pos:column="73">*</type:modifier></type><name pos:line="505" pos:column="74">blockType</name></decl></param>)</parameter_list> <block pos:line="505" pos:column="85">{
	<if pos:line="506" pos:column="9">if <condition pos:line="506" pos:column="12">(<expr><call><name pos:line="506" pos:column="13">strlen</name><argument_list pos:line="506" pos:column="19">(<argument><expr><name pos:line="506" pos:column="20">blockType</name></expr></argument>)</argument_list></call> <op:operator pos:line="506" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="506" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="506" pos:column="36"> <block pos:line="506" pos:column="37">{
		<return pos:line="507" pos:column="17">return <expr><lit:literal type="number" pos:line="507" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then> <else pos:line="508" pos:column="11">else <if pos:line="508" pos:column="16">if <condition pos:line="508" pos:column="19">(<expr><lit:literal type="number" pos:line="508" pos:column="20">0</lit:literal> <op:operator pos:line="508" pos:column="22">==</op:operator> <call><name pos:line="508" pos:column="25">strcmp</name><argument_list pos:line="508" pos:column="31">(<argument><expr><name pos:line="508" pos:column="32">blockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="508" pos:column="43">"%"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="508" pos:column="48"> <block pos:line="508" pos:column="49">{
		<return pos:line="509" pos:column="17">return <expr><op:operator pos:line="509" pos:column="24">(</op:operator><op:operator pos:line="509" pos:column="25">(</op:operator><name pos:line="509" pos:column="26">ch</name> <op:operator pos:line="509" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="509" pos:column="32">'%'</lit:literal><op:operator pos:line="509" pos:column="35">)</op:operator> <op:operator pos:line="509" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="509" pos:column="40">(</op:operator><name pos:line="509" pos:column="41">chNext</name> <op:operator pos:line="509" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="509" pos:column="51">'}'</lit:literal><op:operator pos:line="509" pos:column="54">)</op:operator><op:operator pos:line="509" pos:column="55">)</op:operator></expr>;</return>
	}</block></then> <else pos:line="510" pos:column="11">else <if pos:line="510" pos:column="16">if <condition pos:line="510" pos:column="19">(<expr><lit:literal type="number" pos:line="510" pos:column="20">0</lit:literal> <op:operator pos:line="510" pos:column="22">==</op:operator> <call><name pos:line="510" pos:column="25">strcmp</name><argument_list pos:line="510" pos:column="31">(<argument><expr><name pos:line="510" pos:column="32">blockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="510" pos:column="43">"{"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="510" pos:column="48"> <block pos:line="510" pos:column="49">{
		<return pos:line="511" pos:column="17">return <expr><op:operator pos:line="511" pos:column="24">(</op:operator><op:operator pos:line="511" pos:column="25">(</op:operator><name pos:line="511" pos:column="26">ch</name> <op:operator pos:line="511" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="511" pos:column="32">'}'</lit:literal><op:operator pos:line="511" pos:column="35">)</op:operator> <op:operator pos:line="511" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="511" pos:column="40">(</op:operator><name pos:line="511" pos:column="41">chNext</name> <op:operator pos:line="511" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="511" pos:column="51">'}'</lit:literal><op:operator pos:line="511" pos:column="54">)</op:operator><op:operator pos:line="511" pos:column="55">)</op:operator></expr>;</return>
	}</block></then> <else pos:line="512" pos:column="11">else <block pos:line="512" pos:column="16">{
		<return pos:line="513" pos:column="17">return <expr><lit:literal type="number" pos:line="513" pos:column="24">0</lit:literal></expr>;</return>
	}</block></else></if></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="517" pos:column="1">static</specifier> <name pos:line="517" pos:column="8">bool</name></type> <name pos:line="517" pos:column="13">isPHPStringState</name><parameter_list pos:line="517" pos:column="29">(<param><decl><type><name pos:line="517" pos:column="30">int</name></type> <name pos:line="517" pos:column="34">state</name></decl></param>)</parameter_list> <block pos:line="517" pos:column="41">{
	<return pos:line="518" pos:column="9">return
	    <expr><op:operator pos:line="519" pos:column="13">(</op:operator><name pos:line="519" pos:column="14">state</name> <op:operator pos:line="519" pos:column="20">==</op:operator> <name pos:line="519" pos:column="23">SCE_HPHP_HSTRING</name><op:operator pos:line="519" pos:column="39">)</op:operator> <op:operator pos:line="519" pos:column="41">||</op:operator>
	    <op:operator pos:line="520" pos:column="13">(</op:operator><name pos:line="520" pos:column="14">state</name> <op:operator pos:line="520" pos:column="20">==</op:operator> <name pos:line="520" pos:column="23">SCE_HPHP_SIMPLESTRING</name><op:operator pos:line="520" pos:column="44">)</op:operator> <op:operator pos:line="520" pos:column="46">||</op:operator>
	    <op:operator pos:line="521" pos:column="13">(</op:operator><name pos:line="521" pos:column="14">state</name> <op:operator pos:line="521" pos:column="20">==</op:operator> <name pos:line="521" pos:column="23">SCE_HPHP_HSTRING_VARIABLE</name><op:operator pos:line="521" pos:column="48">)</op:operator> <op:operator pos:line="521" pos:column="50">||</op:operator>
	    <op:operator pos:line="522" pos:column="13">(</op:operator><name pos:line="522" pos:column="14">state</name> <op:operator pos:line="522" pos:column="20">==</op:operator> <name pos:line="522" pos:column="23">SCE_HPHP_COMPLEX_VARIABLE</name><op:operator pos:line="522" pos:column="48">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="525" pos:column="1">static</specifier> <name pos:line="525" pos:column="8">int</name></type> <name pos:line="525" pos:column="12">FindPhpStringDelimiter</name><parameter_list pos:line="525" pos:column="34">(<param><decl><type><name pos:line="525" pos:column="35">char</name> <type:modifier pos:line="525" pos:column="40">*</type:modifier></type><name pos:line="525" pos:column="41">phpStringDelimiter</name></decl></param>, <param><decl><type><specifier pos:line="525" pos:column="61">const</specifier> <name pos:line="525" pos:column="67">int</name></type> <name pos:line="525" pos:column="71">phpStringDelimiterSize</name></decl></param>, <param><decl><type><name pos:line="525" pos:column="95">int</name></type> <name pos:line="525" pos:column="99">i</name></decl></param>, <param><decl><type><specifier pos:line="525" pos:column="102">const</specifier> <name pos:line="525" pos:column="108">int</name></type> <name pos:line="525" pos:column="112">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="525" pos:column="123">Accessor</name> <type:modifier pos:line="525" pos:column="132">&amp;</type:modifier></type><name pos:line="525" pos:column="133">styler</name></decl></param>, <param><decl><type><name pos:line="525" pos:column="141">bool</name> <type:modifier pos:line="525" pos:column="146">&amp;</type:modifier></type><name pos:line="525" pos:column="147">isSimpleString</name></decl></param>)</parameter_list> <block pos:line="525" pos:column="163">{
	<decl_stmt><decl><type><name pos:line="526" pos:column="9">int</name></type> <name pos:line="526" pos:column="13">j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="527" pos:column="9">const</specifier> <name pos:line="527" pos:column="15">int</name></type> <name pos:line="527" pos:column="19">beginning</name> <init pos:line="527" pos:column="29">= <expr><name pos:line="527" pos:column="31">i</name> <op:operator pos:line="527" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="527" pos:column="35">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="528" pos:column="9">bool</name></type> <name pos:line="528" pos:column="14">isValidSimpleString</name> <init pos:line="528" pos:column="34">= <expr><lit:literal type="boolean" pos:line="528" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>

	<while pos:line="530" pos:column="9">while <condition pos:line="530" pos:column="15">(<expr><name pos:line="530" pos:column="16">i</name> <op:operator pos:line="530" pos:column="18">&lt;</op:operator> <name pos:line="530" pos:column="20">lengthDoc</name> <op:operator pos:line="530" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="530" pos:column="33">(</op:operator><name><name pos:line="530" pos:column="34">styler</name><index pos:line="530" pos:column="40">[<expr><name pos:line="530" pos:column="41">i</name></expr>]</index></name> <op:operator pos:line="530" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="530" pos:column="47">' '</lit:literal> <op:operator pos:line="530" pos:column="51">||</op:operator> <name><name pos:line="530" pos:column="54">styler</name><index pos:line="530" pos:column="60">[<expr><name pos:line="530" pos:column="61">i</name></expr>]</index></name> <op:operator pos:line="530" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="530" pos:column="67">'\t'</lit:literal><op:operator pos:line="530" pos:column="71">)</op:operator></expr>)</condition>
		<expr_stmt><expr><name pos:line="531" pos:column="17">i</name><op:operator pos:line="531" pos:column="18">++</op:operator></expr>;</expr_stmt></while>

	<decl_stmt><decl><type><name pos:line="533" pos:column="9">char</name></type> <name pos:line="533" pos:column="14">ch</name> <init pos:line="533" pos:column="17">= <expr><call><name><name pos:line="533" pos:column="19">styler</name><op:operator pos:line="533" pos:column="25">.</op:operator><name pos:line="533" pos:column="26">SafeGetCharAt</name></name><argument_list pos:line="533" pos:column="39">(<argument><expr><name pos:line="533" pos:column="40">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="534" pos:column="9">const</specifier> <name pos:line="534" pos:column="15">char</name></type> <name pos:line="534" pos:column="20">chNext</name> <init pos:line="534" pos:column="27">= <expr><call><name><name pos:line="534" pos:column="29">styler</name><op:operator pos:line="534" pos:column="35">.</op:operator><name pos:line="534" pos:column="36">SafeGetCharAt</name></name><argument_list pos:line="534" pos:column="49">(<argument><expr><name pos:line="534" pos:column="50">i</name> <op:operator pos:line="534" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="534" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="535" pos:column="9">if <condition pos:line="535" pos:column="12">(<expr><op:operator pos:line="535" pos:column="13">!</op:operator><call><name pos:line="535" pos:column="14">IsPhpWordStart</name><argument_list pos:line="535" pos:column="28">(<argument><expr><name pos:line="535" pos:column="29">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="535" pos:column="33"> <block pos:line="535" pos:column="34">{
		<if pos:line="536" pos:column="17">if <condition pos:line="536" pos:column="20">(<expr><name pos:line="536" pos:column="21">ch</name> <op:operator pos:line="536" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="536" pos:column="27">'\''</lit:literal> <op:operator pos:line="536" pos:column="32">&amp;&amp;</op:operator> <call><name pos:line="536" pos:column="35">IsPhpWordStart</name><argument_list pos:line="536" pos:column="49">(<argument><expr><name pos:line="536" pos:column="50">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="536" pos:column="58"> <block pos:line="536" pos:column="59">{
			<expr_stmt><expr><name pos:line="537" pos:column="25">i</name><op:operator pos:line="537" pos:column="26">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="538" pos:column="25">ch</name> <op:operator pos:line="538" pos:column="28">=</op:operator> <name pos:line="538" pos:column="30">chNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="539" pos:column="25">isSimpleString</name> <op:operator pos:line="539" pos:column="40">=</op:operator> <lit:literal type="boolean" pos:line="539" pos:column="42">true</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="540" pos:column="19">else <block pos:line="540" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="541" pos:column="25">phpStringDelimiter</name><index pos:line="541" pos:column="43">[<expr><lit:literal type="number" pos:line="541" pos:column="44">0</lit:literal></expr>]</index></name> <op:operator pos:line="541" pos:column="47">=</op:operator> <lit:literal type="char" pos:line="541" pos:column="49">'\0'</lit:literal></expr>;</expr_stmt>
			<return pos:line="542" pos:column="25">return <expr><name pos:line="542" pos:column="32">beginning</name></expr>;</return>
		}</block></else></if>
	}</block></then></if>
	<expr_stmt><expr><name><name pos:line="545" pos:column="9">phpStringDelimiter</name><index pos:line="545" pos:column="27">[<expr><lit:literal type="number" pos:line="545" pos:column="28">0</lit:literal></expr>]</index></name> <op:operator pos:line="545" pos:column="31">=</op:operator> <name pos:line="545" pos:column="33">ch</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="546" pos:column="9">i</name><op:operator pos:line="546" pos:column="10">++</op:operator></expr>;</expr_stmt>

	<for pos:line="548" pos:column="9">for (<init><expr><name pos:line="548" pos:column="14">j</name> <op:operator pos:line="548" pos:column="16">=</op:operator> <name pos:line="548" pos:column="18">i</name></expr>;</init> <condition><expr><name pos:line="548" pos:column="21">j</name> <op:operator pos:line="548" pos:column="23">&lt;</op:operator> <name pos:line="548" pos:column="25">lengthDoc</name> <op:operator pos:line="548" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="548" pos:column="38">!</op:operator><call><name pos:line="548" pos:column="39">isLineEnd</name><argument_list pos:line="548" pos:column="48">(<argument><expr><name><name pos:line="548" pos:column="49">styler</name><index pos:line="548" pos:column="55">[<expr><name pos:line="548" pos:column="56">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name pos:line="548" pos:column="61">j</name><op:operator pos:line="548" pos:column="62">++</op:operator></expr></incr>) <block pos:line="548" pos:column="66">{
		<if pos:line="549" pos:column="17">if <condition pos:line="549" pos:column="20">(<expr><op:operator pos:line="549" pos:column="21">!</op:operator><call><name pos:line="549" pos:column="22">IsPhpWordChar</name><argument_list pos:line="549" pos:column="35">(<argument><expr><name><name pos:line="549" pos:column="36">styler</name><index pos:line="549" pos:column="42">[<expr><name pos:line="549" pos:column="43">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="549" pos:column="47"> <block pos:line="549" pos:column="48">{
			<if pos:line="550" pos:column="25">if <condition pos:line="550" pos:column="28">(<expr><name pos:line="550" pos:column="29">isSimpleString</name> <op:operator pos:line="550" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="550" pos:column="47">(</op:operator><name><name pos:line="550" pos:column="48">styler</name><index pos:line="550" pos:column="54">[<expr><name pos:line="550" pos:column="55">j</name></expr>]</index></name> <op:operator pos:line="550" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="550" pos:column="61">'\''</lit:literal><op:operator pos:line="550" pos:column="65">)</op:operator> <op:operator pos:line="550" pos:column="67">&amp;&amp;</op:operator> <call><name pos:line="550" pos:column="70">isLineEnd</name><argument_list pos:line="550" pos:column="79">(<argument><expr><call><name><name pos:line="550" pos:column="80">styler</name><op:operator pos:line="550" pos:column="86">.</op:operator><name pos:line="550" pos:column="87">SafeGetCharAt</name></name><argument_list pos:line="550" pos:column="100">(<argument><expr><name pos:line="550" pos:column="101">j</name> <op:operator pos:line="550" pos:column="103">+</op:operator> <lit:literal type="number" pos:line="550" pos:column="105">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="550" pos:column="109"> <block pos:line="550" pos:column="110">{
				<expr_stmt><expr><name pos:line="551" pos:column="33">isValidSimpleString</name> <op:operator pos:line="551" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="551" pos:column="55">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="552" pos:column="33">j</name><op:operator pos:line="552" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<break pos:line="553" pos:column="33">break;</break>
			}</block></then> <else pos:line="554" pos:column="27">else <block pos:line="554" pos:column="32">{
				<expr_stmt><expr><name><name pos:line="555" pos:column="33">phpStringDelimiter</name><index pos:line="555" pos:column="51">[<expr><lit:literal type="number" pos:line="555" pos:column="52">0</lit:literal></expr>]</index></name> <op:operator pos:line="555" pos:column="55">=</op:operator> <lit:literal type="char" pos:line="555" pos:column="57">'\0'</lit:literal></expr>;</expr_stmt>
				<return pos:line="556" pos:column="33">return <expr><name pos:line="556" pos:column="40">beginning</name></expr>;</return>
			}</block></else></if>
		}</block></then></if>
		<if pos:line="559" pos:column="17">if <condition pos:line="559" pos:column="20">(<expr><name pos:line="559" pos:column="21">j</name> <op:operator pos:line="559" pos:column="23">-</op:operator> <name pos:line="559" pos:column="25">i</name> <op:operator pos:line="559" pos:column="27">&lt;</op:operator> <name pos:line="559" pos:column="29">phpStringDelimiterSize</name> <op:operator pos:line="559" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="559" pos:column="54">2</lit:literal></expr>)</condition><then pos:line="559" pos:column="56">
			<expr_stmt><expr><name><name pos:line="560" pos:column="25">phpStringDelimiter</name><index pos:line="560" pos:column="43">[<expr><name pos:line="560" pos:column="44">j</name><op:operator pos:line="560" pos:column="45">-</op:operator><name pos:line="560" pos:column="46">i</name><op:operator pos:line="560" pos:column="47">+</op:operator><lit:literal type="number" pos:line="560" pos:column="48">1</lit:literal></expr>]</index></name> <op:operator pos:line="560" pos:column="51">=</op:operator> <name><name pos:line="560" pos:column="53">styler</name><index pos:line="560" pos:column="59">[<expr><name pos:line="560" pos:column="60">j</name></expr>]</index></name></expr>;</expr_stmt></then>
		<else pos:line="561" pos:column="17">else
			<expr_stmt><expr><name pos:line="562" pos:column="25">i</name><op:operator pos:line="562" pos:column="26">++</op:operator></expr>;</expr_stmt></else></if>
	}</block></for>
	<if pos:line="564" pos:column="9">if <condition pos:line="564" pos:column="12">(<expr><name pos:line="564" pos:column="13">isSimpleString</name> <op:operator pos:line="564" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="564" pos:column="31">!</op:operator><name pos:line="564" pos:column="32">isValidSimpleString</name></expr>)</condition><then pos:line="564" pos:column="52"> <block pos:line="564" pos:column="53">{
		<expr_stmt><expr><name><name pos:line="565" pos:column="17">phpStringDelimiter</name><index pos:line="565" pos:column="35">[<expr><lit:literal type="number" pos:line="565" pos:column="36">0</lit:literal></expr>]</index></name> <op:operator pos:line="565" pos:column="39">=</op:operator> <lit:literal type="char" pos:line="565" pos:column="41">'\0'</lit:literal></expr>;</expr_stmt>
		<return pos:line="566" pos:column="17">return <expr><name pos:line="566" pos:column="24">beginning</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name pos:line="568" pos:column="9">phpStringDelimiter</name><index pos:line="568" pos:column="27">[<expr><name pos:line="568" pos:column="28">j</name><op:operator pos:line="568" pos:column="29">-</op:operator><name pos:line="568" pos:column="30">i</name><op:operator pos:line="568" pos:column="31">+</op:operator><lit:literal type="number" pos:line="568" pos:column="32">1</lit:literal> <op:operator pos:line="568" pos:column="34">-</op:operator> <op:operator pos:line="568" pos:column="36">(</op:operator><name pos:line="568" pos:column="37">isSimpleString</name> <op:operator pos:line="568" pos:column="52">?</op:operator> <lit:literal type="number" pos:line="568" pos:column="54">1</lit:literal> <op:operator pos:line="568" pos:column="56">:</op:operator> <lit:literal type="number" pos:line="568" pos:column="58">0</lit:literal><op:operator pos:line="568" pos:column="59">)</op:operator></expr>]</index></name> <op:operator pos:line="568" pos:column="62">=</op:operator> <lit:literal type="char" pos:line="568" pos:column="64">'\0'</lit:literal></expr>;</expr_stmt>
	<return pos:line="569" pos:column="9">return <expr><name pos:line="569" pos:column="16">j</name> <op:operator pos:line="569" pos:column="18">-</op:operator> <lit:literal type="number" pos:line="569" pos:column="20">1</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="572" pos:column="1">static</specifier> <name pos:line="572" pos:column="8">void</name></type> <name pos:line="572" pos:column="13">ColouriseHyperTextDoc</name><parameter_list pos:line="572" pos:column="34">(<param><decl><type><name pos:line="572" pos:column="35">unsigned</name> <name pos:line="572" pos:column="44">int</name></type> <name pos:line="572" pos:column="48">startPos</name></decl></param>, <param><decl><type><name pos:line="572" pos:column="58">int</name></type> <name pos:line="572" pos:column="62">length</name></decl></param>, <param><decl><type><name pos:line="572" pos:column="70">int</name></type> <name pos:line="572" pos:column="74">initStyle</name></decl></param>, <param><decl><type><name pos:line="572" pos:column="85">WordList</name> <type:modifier pos:line="572" pos:column="94">*</type:modifier></type><name><name pos:line="572" pos:column="95">keywordlists</name><index pos:line="572" pos:column="107">[]</index></name></decl></param>,
                                  <param><decl><type><name pos:line="573" pos:column="35">Accessor</name> <type:modifier pos:line="573" pos:column="44">&amp;</type:modifier></type><name pos:line="573" pos:column="45">styler</name></decl></param>, <param><decl><type><name pos:line="573" pos:column="53">bool</name></type> <name pos:line="573" pos:column="58">isXml</name></decl></param>)</parameter_list> <block pos:line="573" pos:column="65">{
	<decl_stmt><decl><type><name pos:line="574" pos:column="9">WordList</name> <type:modifier pos:line="574" pos:column="18">&amp;</type:modifier></type><name pos:line="574" pos:column="19">keywords</name> <init pos:line="574" pos:column="28">= <expr><op:operator pos:line="574" pos:column="30">*</op:operator><name><name pos:line="574" pos:column="31">keywordlists</name><index pos:line="574" pos:column="43">[<expr><lit:literal type="number" pos:line="574" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="575" pos:column="9">WordList</name> <type:modifier pos:line="575" pos:column="18">&amp;</type:modifier></type><name pos:line="575" pos:column="19">keywords2</name> <init pos:line="575" pos:column="29">= <expr><op:operator pos:line="575" pos:column="31">*</op:operator><name><name pos:line="575" pos:column="32">keywordlists</name><index pos:line="575" pos:column="44">[<expr><lit:literal type="number" pos:line="575" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="576" pos:column="9">WordList</name> <type:modifier pos:line="576" pos:column="18">&amp;</type:modifier></type><name pos:line="576" pos:column="19">keywords3</name> <init pos:line="576" pos:column="29">= <expr><op:operator pos:line="576" pos:column="31">*</op:operator><name><name pos:line="576" pos:column="32">keywordlists</name><index pos:line="576" pos:column="44">[<expr><lit:literal type="number" pos:line="576" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="577" pos:column="9">WordList</name> <type:modifier pos:line="577" pos:column="18">&amp;</type:modifier></type><name pos:line="577" pos:column="19">keywords4</name> <init pos:line="577" pos:column="29">= <expr><op:operator pos:line="577" pos:column="31">*</op:operator><name><name pos:line="577" pos:column="32">keywordlists</name><index pos:line="577" pos:column="44">[<expr><lit:literal type="number" pos:line="577" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="578" pos:column="9">WordList</name> <type:modifier pos:line="578" pos:column="18">&amp;</type:modifier></type><name pos:line="578" pos:column="19">keywords5</name> <init pos:line="578" pos:column="29">= <expr><op:operator pos:line="578" pos:column="31">*</op:operator><name><name pos:line="578" pos:column="32">keywordlists</name><index pos:line="578" pos:column="44">[<expr><lit:literal type="number" pos:line="578" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="579" pos:column="9">WordList</name> <type:modifier pos:line="579" pos:column="18">&amp;</type:modifier></type><name pos:line="579" pos:column="19">keywords6</name> <init pos:line="579" pos:column="29">= <expr><op:operator pos:line="579" pos:column="31">*</op:operator><name><name pos:line="579" pos:column="32">keywordlists</name><index pos:line="579" pos:column="44">[<expr><lit:literal type="number" pos:line="579" pos:column="45">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="579" pos:column="49">// SGML (DTD) keywords</comment>

	<comment type="line" pos:line="581" pos:column="9">// Lexer for HTML requires more lexical states (8 bits worth) than most lexers</comment>
	<expr_stmt><expr><call><name><name pos:line="582" pos:column="9">styler</name><op:operator pos:line="582" pos:column="15">.</op:operator><name pos:line="582" pos:column="16">StartAt</name></name><argument_list pos:line="582" pos:column="23">(<argument><expr><name pos:line="582" pos:column="24">startPos</name></expr></argument>, <argument><expr><call><name><name pos:line="582" pos:column="34">static_cast</name><argument_list pos:line="582" pos:column="45">&lt;<argument><expr><name pos:line="582" pos:column="46">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="582" pos:column="51">(<argument><expr><name pos:line="582" pos:column="52">STYLE_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="583" pos:column="9">char</name></type> <name><name pos:line="583" pos:column="14">prevWord</name><index pos:line="583" pos:column="22">[<expr><lit:literal type="number" pos:line="583" pos:column="23">200</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="584" pos:column="9">prevWord</name><index pos:line="584" pos:column="17">[<expr><lit:literal type="number" pos:line="584" pos:column="18">0</lit:literal></expr>]</index></name> <op:operator pos:line="584" pos:column="21">=</op:operator> <lit:literal type="char" pos:line="584" pos:column="23">'\0'</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="585" pos:column="9">char</name></type> <name><name pos:line="585" pos:column="14">phpStringDelimiter</name><index pos:line="585" pos:column="32">[<expr><lit:literal type="number" pos:line="585" pos:column="33">200</lit:literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:line="585" pos:column="39">// PHP is not limited in length, we are</comment>
	<expr_stmt><expr><name><name pos:line="586" pos:column="9">phpStringDelimiter</name><index pos:line="586" pos:column="27">[<expr><lit:literal type="number" pos:line="586" pos:column="28">0</lit:literal></expr>]</index></name> <op:operator pos:line="586" pos:column="31">=</op:operator> <lit:literal type="char" pos:line="586" pos:column="33">'\0'</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="587" pos:column="9">int</name></type> <name pos:line="587" pos:column="13">StateToPrint</name> <init pos:line="587" pos:column="26">= <expr><name pos:line="587" pos:column="28">initStyle</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="588" pos:column="9">int</name></type> <name pos:line="588" pos:column="13">state</name> <init pos:line="588" pos:column="19">= <expr><call><name pos:line="588" pos:column="21">stateForPrintState</name><argument_list pos:line="588" pos:column="39">(<argument><expr><name pos:line="588" pos:column="40">StateToPrint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="589" pos:column="9">char</name></type> <name><name pos:line="589" pos:column="14">makoBlockType</name><index pos:line="589" pos:column="27">[<expr><lit:literal type="number" pos:line="589" pos:column="28">200</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="590" pos:column="9">makoBlockType</name><index pos:line="590" pos:column="22">[<expr><lit:literal type="number" pos:line="590" pos:column="23">0</lit:literal></expr>]</index></name> <op:operator pos:line="590" pos:column="26">=</op:operator> <lit:literal type="char" pos:line="590" pos:column="28">'\0'</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="591" pos:column="9">char</name></type> <name><name pos:line="591" pos:column="14">djangoBlockType</name><index pos:line="591" pos:column="29">[<expr><lit:literal type="number" pos:line="591" pos:column="30">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="592" pos:column="9">djangoBlockType</name><index pos:line="592" pos:column="24">[<expr><lit:literal type="number" pos:line="592" pos:column="25">0</lit:literal></expr>]</index></name> <op:operator pos:line="592" pos:column="28">=</op:operator> <lit:literal type="char" pos:line="592" pos:column="30">'\0'</lit:literal></expr>;</expr_stmt>

	<comment type="line" pos:line="594" pos:column="9">// If inside a tag, it may be a script tag, so reread from the start to ensure any language tags are seen</comment>
	<if pos:line="595" pos:column="9">if <condition pos:line="595" pos:column="12">(<expr><call><name pos:line="595" pos:column="13">InTagState</name><argument_list pos:line="595" pos:column="23">(<argument><expr><name pos:line="595" pos:column="24">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="595" pos:column="31"> <block pos:line="595" pos:column="32">{
		<while pos:line="596" pos:column="17">while <condition pos:line="596" pos:column="23">(<expr><op:operator pos:line="596" pos:column="24">(</op:operator><name pos:line="596" pos:column="25">startPos</name> <op:operator pos:line="596" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="596" pos:column="36">0</lit:literal><op:operator pos:line="596" pos:column="37">)</op:operator> <op:operator pos:line="596" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="596" pos:column="42">(</op:operator><call><name pos:line="596" pos:column="43">InTagState</name><argument_list pos:line="596" pos:column="53">(<argument><expr><call><name><name pos:line="596" pos:column="54">styler</name><op:operator pos:line="596" pos:column="60">.</op:operator><name pos:line="596" pos:column="61">StyleAt</name></name><argument_list pos:line="596" pos:column="68">(<argument><expr><name pos:line="596" pos:column="69">startPos</name> <op:operator pos:line="596" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="596" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="596" pos:column="83">)</op:operator></expr>)</condition> <block pos:line="596" pos:column="86">{
			<expr_stmt><expr><name pos:line="597" pos:column="25">startPos</name><op:operator pos:line="597" pos:column="33">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="598" pos:column="25">length</name><op:operator pos:line="598" pos:column="31">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name pos:line="600" pos:column="17">state</name> <op:operator pos:line="600" pos:column="23">=</op:operator> <name pos:line="600" pos:column="25">SCE_H_DEFAULT</name></expr>;</expr_stmt>
	}</block></then></if>
	<comment type="line" pos:line="602" pos:column="9">// String can be heredoc, must find a delimiter first. Reread from beginning of line containing the string, to get the correct lineState</comment>
	<if pos:line="603" pos:column="9">if <condition pos:line="603" pos:column="12">(<expr><call><name pos:line="603" pos:column="13">isPHPStringState</name><argument_list pos:line="603" pos:column="29">(<argument><expr><name pos:line="603" pos:column="30">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="603" pos:column="37"> <block pos:line="603" pos:column="38">{
		<while pos:line="604" pos:column="17">while <condition pos:line="604" pos:column="23">(<expr><name pos:line="604" pos:column="24">startPos</name> <op:operator pos:line="604" pos:column="33">&gt;</op:operator> <lit:literal type="number" pos:line="604" pos:column="35">0</lit:literal> <op:operator pos:line="604" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="604" pos:column="40">(</op:operator><call><name pos:line="604" pos:column="41">isPHPStringState</name><argument_list pos:line="604" pos:column="57">(<argument><expr><name pos:line="604" pos:column="58">state</name></expr></argument>)</argument_list></call> <op:operator pos:line="604" pos:column="65">||</op:operator> <op:operator pos:line="604" pos:column="68">!</op:operator><call><name pos:line="604" pos:column="69">isLineEnd</name><argument_list pos:line="604" pos:column="78">(<argument><expr><name><name pos:line="604" pos:column="79">styler</name><index pos:line="604" pos:column="85">[<expr><name pos:line="604" pos:column="86">startPos</name> <op:operator pos:line="604" pos:column="95">-</op:operator> <lit:literal type="number" pos:line="604" pos:column="97">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="604" pos:column="100">)</op:operator></expr>)</condition> <block pos:line="604" pos:column="103">{
			<expr_stmt><expr><name pos:line="605" pos:column="25">startPos</name><op:operator pos:line="605" pos:column="33">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="606" pos:column="25">length</name><op:operator pos:line="606" pos:column="31">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="607" pos:column="25">state</name> <op:operator pos:line="607" pos:column="31">=</op:operator> <call><name><name pos:line="607" pos:column="33">styler</name><op:operator pos:line="607" pos:column="39">.</op:operator><name pos:line="607" pos:column="40">StyleAt</name></name><argument_list pos:line="607" pos:column="47">(<argument><expr><name pos:line="607" pos:column="48">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<if pos:line="609" pos:column="17">if <condition pos:line="609" pos:column="20">(<expr><name pos:line="609" pos:column="21">startPos</name> <op:operator pos:line="609" pos:column="30">==</op:operator> <lit:literal type="number" pos:line="609" pos:column="33">0</lit:literal></expr>)</condition><then pos:line="609" pos:column="35">
			<expr_stmt><expr><name pos:line="610" pos:column="25">state</name> <op:operator pos:line="610" pos:column="31">=</op:operator> <name pos:line="610" pos:column="33">SCE_H_DEFAULT</name></expr>;</expr_stmt></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="612" pos:column="9">styler</name><op:operator pos:line="612" pos:column="15">.</op:operator><name pos:line="612" pos:column="16">StartAt</name></name><argument_list pos:line="612" pos:column="23">(<argument><expr><name pos:line="612" pos:column="24">startPos</name></expr></argument>, <argument><expr><call><name><name pos:line="612" pos:column="34">static_cast</name><argument_list pos:line="612" pos:column="45">&lt;<argument><expr><name pos:line="612" pos:column="46">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="612" pos:column="51">(<argument><expr><name pos:line="612" pos:column="52">STYLE_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="614" pos:column="9">int</name></type> <name pos:line="614" pos:column="13">lineCurrent</name> <init pos:line="614" pos:column="25">= <expr><call><name><name pos:line="614" pos:column="27">styler</name><op:operator pos:line="614" pos:column="33">.</op:operator><name pos:line="614" pos:column="34">GetLine</name></name><argument_list pos:line="614" pos:column="41">(<argument><expr><name pos:line="614" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="615" pos:column="9">int</name></type> <name pos:line="615" pos:column="13">lineState</name></decl>;</decl_stmt>
	<if pos:line="616" pos:column="9">if <condition pos:line="616" pos:column="12">(<expr><name pos:line="616" pos:column="13">lineCurrent</name> <op:operator pos:line="616" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="616" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="616" pos:column="29"> <block pos:line="616" pos:column="30">{
		<expr_stmt><expr><name pos:line="617" pos:column="17">lineState</name> <op:operator pos:line="617" pos:column="27">=</op:operator> <call><name><name pos:line="617" pos:column="29">styler</name><op:operator pos:line="617" pos:column="35">.</op:operator><name pos:line="617" pos:column="36">GetLineState</name></name><argument_list pos:line="617" pos:column="48">(<argument><expr><name pos:line="617" pos:column="49">lineCurrent</name><op:operator pos:line="617" pos:column="60">-</op:operator><lit:literal type="number" pos:line="617" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="618" pos:column="11">else <block pos:line="618" pos:column="16">{
		<comment type="line" pos:line="619" pos:column="17">// Default client and ASP scripting language is JavaScript</comment>
		<expr_stmt><expr><name pos:line="620" pos:column="17">lineState</name> <op:operator pos:line="620" pos:column="27">=</op:operator> <name pos:line="620" pos:column="29">eScriptJS</name> <op:operator pos:line="620" pos:column="39">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="620" pos:column="42">8</lit:literal></expr>;</expr_stmt>

		<comment type="line" pos:line="622" pos:column="17">// property asp.default.language</comment>
		<comment type="line" pos:line="623" pos:column="17">//	Script in ASP code is initially assumed to be in JavaScript.</comment>
		<comment type="line" pos:line="624" pos:column="17">//	To change this to VBScript set asp.default.language to 2. Python is 3.</comment>
		<expr_stmt><expr><name pos:line="625" pos:column="17">lineState</name> <op:operator pos:line="625" pos:column="27">|=</op:operator> <call><name><name pos:line="625" pos:column="30">styler</name><op:operator pos:line="625" pos:column="36">.</op:operator><name pos:line="625" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="625" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="625" pos:column="52">"asp.default.language"</lit:literal></expr></argument>, <argument><expr><name pos:line="625" pos:column="76">eScriptVBS</name></expr></argument>)</argument_list></call> <op:operator pos:line="625" pos:column="88">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="625" pos:column="91">4</lit:literal></expr>;</expr_stmt>
	}</block></else></if>
	<decl_stmt><decl><type><name pos:line="627" pos:column="9">script_mode</name></type> <name pos:line="627" pos:column="21">inScriptType</name> <init pos:line="627" pos:column="34">= <expr><call><name pos:line="627" pos:column="36">script_mode</name><argument_list pos:line="627" pos:column="47">(<argument><expr><op:operator pos:line="627" pos:column="48">(</op:operator><name pos:line="627" pos:column="49">lineState</name> <op:operator pos:line="627" pos:column="59">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="627" pos:column="62">0</lit:literal><op:operator pos:line="627" pos:column="63">)</op:operator> <op:operator pos:line="627" pos:column="65">&amp;</op:operator> <lit:literal type="number" pos:line="627" pos:column="67">0x03</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="627" pos:column="74">// 2 bits of scripting mode</comment>
	<decl_stmt><decl><type><name pos:line="628" pos:column="9">bool</name></type> <name pos:line="628" pos:column="14">tagOpened</name> <init pos:line="628" pos:column="24">= <expr><op:operator pos:line="628" pos:column="26">(</op:operator><name pos:line="628" pos:column="27">lineState</name> <op:operator pos:line="628" pos:column="37">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="628" pos:column="40">2</lit:literal><op:operator pos:line="628" pos:column="41">)</op:operator> <op:operator pos:line="628" pos:column="43">&amp;</op:operator> <lit:literal type="number" pos:line="628" pos:column="45">0x01</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="628" pos:column="51">// 1 bit to know if we are in an opened tag</comment>
	<decl_stmt><decl><type><name pos:line="629" pos:column="9">bool</name></type> <name pos:line="629" pos:column="14">tagClosing</name> <init pos:line="629" pos:column="25">= <expr><op:operator pos:line="629" pos:column="27">(</op:operator><name pos:line="629" pos:column="28">lineState</name> <op:operator pos:line="629" pos:column="38">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="629" pos:column="41">3</lit:literal><op:operator pos:line="629" pos:column="42">)</op:operator> <op:operator pos:line="629" pos:column="44">&amp;</op:operator> <lit:literal type="number" pos:line="629" pos:column="46">0x01</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="629" pos:column="52">// 1 bit to know if we are in a closing tag</comment>
	<decl_stmt><decl><type><name pos:line="630" pos:column="9">bool</name></type> <name pos:line="630" pos:column="14">tagDontFold</name> <init pos:line="630" pos:column="26">= <expr><lit:literal type="boolean" pos:line="630" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="630" pos:column="35">//some HTML tags should not be folded</comment>
	<decl_stmt><decl><type><name pos:line="631" pos:column="9">script_type</name></type> <name pos:line="631" pos:column="21">aspScript</name> <init pos:line="631" pos:column="31">= <expr><call><name pos:line="631" pos:column="33">script_type</name><argument_list pos:line="631" pos:column="44">(<argument><expr><op:operator pos:line="631" pos:column="45">(</op:operator><name pos:line="631" pos:column="46">lineState</name> <op:operator pos:line="631" pos:column="56">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="631" pos:column="59">4</lit:literal><op:operator pos:line="631" pos:column="60">)</op:operator> <op:operator pos:line="631" pos:column="62">&amp;</op:operator> <lit:literal type="number" pos:line="631" pos:column="64">0x0F</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="631" pos:column="71">// 4 bits of script name</comment>
	<decl_stmt><decl><type><name pos:line="632" pos:column="9">script_type</name></type> <name pos:line="632" pos:column="21">clientScript</name> <init pos:line="632" pos:column="34">= <expr><call><name pos:line="632" pos:column="36">script_type</name><argument_list pos:line="632" pos:column="47">(<argument><expr><op:operator pos:line="632" pos:column="48">(</op:operator><name pos:line="632" pos:column="49">lineState</name> <op:operator pos:line="632" pos:column="59">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="632" pos:column="62">8</lit:literal><op:operator pos:line="632" pos:column="63">)</op:operator> <op:operator pos:line="632" pos:column="65">&amp;</op:operator> <lit:literal type="number" pos:line="632" pos:column="67">0x0F</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="632" pos:column="74">// 4 bits of script name</comment>
	<decl_stmt><decl><type><name pos:line="633" pos:column="9">int</name></type> <name pos:line="633" pos:column="13">beforePreProc</name> <init pos:line="633" pos:column="27">= <expr><op:operator pos:line="633" pos:column="29">(</op:operator><name pos:line="633" pos:column="30">lineState</name> <op:operator pos:line="633" pos:column="40">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="633" pos:column="43">12</lit:literal><op:operator pos:line="633" pos:column="45">)</op:operator> <op:operator pos:line="633" pos:column="47">&amp;</op:operator> <lit:literal type="number" pos:line="633" pos:column="49">0xFF</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="633" pos:column="55">// 8 bits of state</comment>

	<decl_stmt><decl><type><name pos:line="635" pos:column="9">script_type</name></type> <name pos:line="635" pos:column="21">scriptLanguage</name> <init pos:line="635" pos:column="36">= <expr><call><name pos:line="635" pos:column="38">ScriptOfState</name><argument_list pos:line="635" pos:column="51">(<argument><expr><name pos:line="635" pos:column="52">state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="636" pos:column="9">// If eNonHtmlScript coincides with SCE_H_COMMENT, assume eScriptComment</comment>
	<if pos:line="637" pos:column="9">if <condition pos:line="637" pos:column="12">(<expr><name pos:line="637" pos:column="13">inScriptType</name> <op:operator pos:line="637" pos:column="26">==</op:operator> <name pos:line="637" pos:column="29">eNonHtmlScript</name> <op:operator pos:line="637" pos:column="44">&amp;&amp;</op:operator> <name pos:line="637" pos:column="47">state</name> <op:operator pos:line="637" pos:column="53">==</op:operator> <name pos:line="637" pos:column="56">SCE_H_COMMENT</name></expr>)</condition><then pos:line="637" pos:column="70"> <block pos:line="637" pos:column="71">{
		<expr_stmt><expr><name pos:line="638" pos:column="17">scriptLanguage</name> <op:operator pos:line="638" pos:column="32">=</op:operator> <name pos:line="638" pos:column="34">eScriptComment</name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="640" pos:column="9">script_type</name></type> <name pos:line="640" pos:column="21">beforeLanguage</name> <init pos:line="640" pos:column="36">= <expr><call><name pos:line="640" pos:column="38">ScriptOfState</name><argument_list pos:line="640" pos:column="51">(<argument><expr><name pos:line="640" pos:column="52">beforePreProc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="642" pos:column="9">// property fold.html</comment>
	<comment type="line" pos:line="643" pos:column="9">//	Folding is turned on or off for HTML and XML files with this option.</comment>
	<comment type="line" pos:line="644" pos:column="9">//	The fold option must also be on for folding to occur.</comment>
	<decl_stmt><decl><type><specifier pos:line="645" pos:column="9">const</specifier> <name pos:line="645" pos:column="15">bool</name></type> <name pos:line="645" pos:column="20">foldHTML</name> <init pos:line="645" pos:column="29">= <expr><call><name><name pos:line="645" pos:column="31">styler</name><op:operator pos:line="645" pos:column="37">.</op:operator><name pos:line="645" pos:column="38">GetPropertyInt</name></name><argument_list pos:line="645" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="645" pos:column="53">"fold.html"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="645" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="645" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="645" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="647" pos:column="9">const</specifier> <name pos:line="647" pos:column="15">bool</name></type> <name pos:line="647" pos:column="20">fold</name> <init pos:line="647" pos:column="25">= <expr><name pos:line="647" pos:column="27">foldHTML</name> <op:operator pos:line="647" pos:column="36">&amp;&amp;</op:operator> <call><name><name pos:line="647" pos:column="39">styler</name><op:operator pos:line="647" pos:column="45">.</op:operator><name pos:line="647" pos:column="46">GetPropertyInt</name></name><argument_list pos:line="647" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="647" pos:column="61">"fold"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="647" pos:column="69">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="649" pos:column="9">// property fold.html.preprocessor</comment>
	<comment type="line" pos:line="650" pos:column="9">//	Folding is turned on or off for scripts embedded in HTML files with this option.</comment>
	<comment type="line" pos:line="651" pos:column="9">//	The default is on.</comment>
	<decl_stmt><decl><type><specifier pos:line="652" pos:column="9">const</specifier> <name pos:line="652" pos:column="15">bool</name></type> <name pos:line="652" pos:column="20">foldHTMLPreprocessor</name> <init pos:line="652" pos:column="41">= <expr><name pos:line="652" pos:column="43">foldHTML</name> <op:operator pos:line="652" pos:column="52">&amp;&amp;</op:operator> <call><name><name pos:line="652" pos:column="55">styler</name><op:operator pos:line="652" pos:column="61">.</op:operator><name pos:line="652" pos:column="62">GetPropertyInt</name></name><argument_list pos:line="652" pos:column="76">(<argument><expr><lit:literal type="string" pos:line="652" pos:column="77">"fold.html.preprocessor"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="652" pos:column="103">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="654" pos:column="9">const</specifier> <name pos:line="654" pos:column="15">bool</name></type> <name pos:line="654" pos:column="20">foldCompact</name> <init pos:line="654" pos:column="32">= <expr><call><name><name pos:line="654" pos:column="34">styler</name><op:operator pos:line="654" pos:column="40">.</op:operator><name pos:line="654" pos:column="41">GetPropertyInt</name></name><argument_list pos:line="654" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="654" pos:column="56">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="654" pos:column="72">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="654" pos:column="75">!=</op:operator> <lit:literal type="number" pos:line="654" pos:column="78">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="656" pos:column="9">// property fold.hypertext.comment</comment>
	<comment type="line" pos:line="657" pos:column="9">//	Allow folding for comments in scripts embedded in HTML.</comment>
	<comment type="line" pos:line="658" pos:column="9">//	The default is off.</comment>
	<decl_stmt><decl><type><specifier pos:line="659" pos:column="9">const</specifier> <name pos:line="659" pos:column="15">bool</name></type> <name pos:line="659" pos:column="20">foldComment</name> <init pos:line="659" pos:column="32">= <expr><name pos:line="659" pos:column="34">fold</name> <op:operator pos:line="659" pos:column="39">&amp;&amp;</op:operator> <call><name><name pos:line="659" pos:column="42">styler</name><op:operator pos:line="659" pos:column="48">.</op:operator><name pos:line="659" pos:column="49">GetPropertyInt</name></name><argument_list pos:line="659" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="659" pos:column="64">"fold.hypertext.comment"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="659" pos:column="90">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="659" pos:column="93">!=</op:operator> <lit:literal type="number" pos:line="659" pos:column="96">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="661" pos:column="9">// property fold.hypertext.heredoc</comment>
	<comment type="line" pos:line="662" pos:column="9">//	Allow folding for heredocs in scripts embedded in HTML.</comment>
	<comment type="line" pos:line="663" pos:column="9">//	The default is off.</comment>
	<decl_stmt><decl><type><specifier pos:line="664" pos:column="9">const</specifier> <name pos:line="664" pos:column="15">bool</name></type> <name pos:line="664" pos:column="20">foldHeredoc</name> <init pos:line="664" pos:column="32">= <expr><name pos:line="664" pos:column="34">fold</name> <op:operator pos:line="664" pos:column="39">&amp;&amp;</op:operator> <call><name><name pos:line="664" pos:column="42">styler</name><op:operator pos:line="664" pos:column="48">.</op:operator><name pos:line="664" pos:column="49">GetPropertyInt</name></name><argument_list pos:line="664" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="664" pos:column="64">"fold.hypertext.heredoc"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="664" pos:column="90">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="664" pos:column="93">!=</op:operator> <lit:literal type="number" pos:line="664" pos:column="96">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="666" pos:column="9">// property html.tags.case.sensitive</comment>
	<comment type="line" pos:line="667" pos:column="9">//	For XML and HTML, setting this property to 1 will make tags match in a case</comment>
	<comment type="line" pos:line="668" pos:column="9">//	sensitive way which is the expected behaviour for XML and XHTML.</comment>
	<decl_stmt><decl><type><specifier pos:line="669" pos:column="9">const</specifier> <name pos:line="669" pos:column="15">bool</name></type> <name pos:line="669" pos:column="20">caseSensitive</name> <init pos:line="669" pos:column="34">= <expr><call><name><name pos:line="669" pos:column="36">styler</name><op:operator pos:line="669" pos:column="42">.</op:operator><name pos:line="669" pos:column="43">GetPropertyInt</name></name><argument_list pos:line="669" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="669" pos:column="58">"html.tags.case.sensitive"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="669" pos:column="86">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="669" pos:column="89">!=</op:operator> <lit:literal type="number" pos:line="669" pos:column="92">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="671" pos:column="9">// property lexer.xml.allow.scripts</comment>
	<comment type="line" pos:line="672" pos:column="9">//	Set to 0 to disable scripts in XML.</comment>
	<decl_stmt><decl><type><specifier pos:line="673" pos:column="9">const</specifier> <name pos:line="673" pos:column="15">bool</name></type> <name pos:line="673" pos:column="20">allowScripts</name> <init pos:line="673" pos:column="33">= <expr><call><name><name pos:line="673" pos:column="35">styler</name><op:operator pos:line="673" pos:column="41">.</op:operator><name pos:line="673" pos:column="42">GetPropertyInt</name></name><argument_list pos:line="673" pos:column="56">(<argument><expr><lit:literal type="string" pos:line="673" pos:column="57">"lexer.xml.allow.scripts"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="673" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="673" pos:column="87">!=</op:operator> <lit:literal type="number" pos:line="673" pos:column="90">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="675" pos:column="9">// property lexer.html.mako</comment>
	<comment type="line" pos:line="676" pos:column="9">//	Set to 1 to enable the mako template language.</comment>
	<decl_stmt><decl><type><specifier pos:line="677" pos:column="9">const</specifier> <name pos:line="677" pos:column="15">bool</name></type> <name pos:line="677" pos:column="20">isMako</name> <init pos:line="677" pos:column="27">= <expr><call><name><name pos:line="677" pos:column="29">styler</name><op:operator pos:line="677" pos:column="35">.</op:operator><name pos:line="677" pos:column="36">GetPropertyInt</name></name><argument_list pos:line="677" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="677" pos:column="51">"lexer.html.mako"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="677" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="677" pos:column="73">!=</op:operator> <lit:literal type="number" pos:line="677" pos:column="76">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="679" pos:column="9">// property lexer.html.django</comment>
	<comment type="line" pos:line="680" pos:column="9">//	Set to 1 to enable the django template language.</comment>
	<decl_stmt><decl><type><specifier pos:line="681" pos:column="9">const</specifier> <name pos:line="681" pos:column="15">bool</name></type> <name pos:line="681" pos:column="20">isDjango</name> <init pos:line="681" pos:column="29">= <expr><call><name><name pos:line="681" pos:column="31">styler</name><op:operator pos:line="681" pos:column="37">.</op:operator><name pos:line="681" pos:column="38">GetPropertyInt</name></name><argument_list pos:line="681" pos:column="52">(<argument><expr><lit:literal type="string" pos:line="681" pos:column="53">"lexer.html.django"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="681" pos:column="74">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="681" pos:column="77">!=</op:operator> <lit:literal type="number" pos:line="681" pos:column="80">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="683" pos:column="9">const</specifier> <name pos:line="683" pos:column="15">CharacterSet</name></type> <name pos:line="683" pos:column="28">setHTMLWord</name><argument_list pos:line="683" pos:column="39">(<argument><expr><name><name pos:line="683" pos:column="40">CharacterSet</name><op:operator pos:line="683" pos:column="52">::</op:operator><name pos:line="683" pos:column="54">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="683" pos:column="67">".-_:!#"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="683" pos:column="77">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="683" pos:column="83">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="684" pos:column="9">const</specifier> <name pos:line="684" pos:column="15">CharacterSet</name></type> <name pos:line="684" pos:column="28">setTagContinue</name><argument_list pos:line="684" pos:column="42">(<argument><expr><name><name pos:line="684" pos:column="43">CharacterSet</name><op:operator pos:line="684" pos:column="55">::</op:operator><name pos:line="684" pos:column="57">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="684" pos:column="70">".-_:!#["</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="684" pos:column="81">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="684" pos:column="87">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="685" pos:column="9">const</specifier> <name pos:line="685" pos:column="15">CharacterSet</name></type> <name pos:line="685" pos:column="28">setAttributeContinue</name><argument_list pos:line="685" pos:column="48">(<argument><expr><name><name pos:line="685" pos:column="49">CharacterSet</name><op:operator pos:line="685" pos:column="61">::</op:operator><name pos:line="685" pos:column="63">setAlphaNum</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="685" pos:column="76">".-_:!#/"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="685" pos:column="87">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="685" pos:column="93">true</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="687" pos:column="9">int</name></type> <name pos:line="687" pos:column="13">levelPrev</name> <init pos:line="687" pos:column="23">= <expr><call><name><name pos:line="687" pos:column="25">styler</name><op:operator pos:line="687" pos:column="31">.</op:operator><name pos:line="687" pos:column="32">LevelAt</name></name><argument_list pos:line="687" pos:column="39">(<argument><expr><name pos:line="687" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="687" pos:column="53">&amp;</op:operator> <name pos:line="687" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="688" pos:column="9">int</name></type> <name pos:line="688" pos:column="13">levelCurrent</name> <init pos:line="688" pos:column="26">= <expr><name pos:line="688" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="689" pos:column="9">int</name></type> <name pos:line="689" pos:column="13">visibleChars</name> <init pos:line="689" pos:column="26">= <expr><lit:literal type="number" pos:line="689" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="690" pos:column="9">int</name></type> <name pos:line="690" pos:column="13">lineStartVisibleChars</name> <init pos:line="690" pos:column="35">= <expr><lit:literal type="number" pos:line="690" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="692" pos:column="9">int</name></type> <name pos:line="692" pos:column="13">chPrev</name> <init pos:line="692" pos:column="20">= <expr><lit:literal type="char" pos:line="692" pos:column="22">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="693" pos:column="9">int</name></type> <name pos:line="693" pos:column="13">ch</name> <init pos:line="693" pos:column="16">= <expr><lit:literal type="char" pos:line="693" pos:column="18">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="694" pos:column="9">int</name></type> <name pos:line="694" pos:column="13">chPrevNonWhite</name> <init pos:line="694" pos:column="28">= <expr><lit:literal type="char" pos:line="694" pos:column="30">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="695" pos:column="9">// look back to set chPrevNonWhite properly for better regex colouring</comment>
	<if pos:line="696" pos:column="9">if <condition pos:line="696" pos:column="12">(<expr><name pos:line="696" pos:column="13">scriptLanguage</name> <op:operator pos:line="696" pos:column="28">==</op:operator> <name pos:line="696" pos:column="31">eScriptJS</name> <op:operator pos:line="696" pos:column="41">&amp;&amp;</op:operator> <name pos:line="696" pos:column="44">startPos</name> <op:operator pos:line="696" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="696" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="696" pos:column="57"> <block pos:line="696" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="697" pos:column="17">int</name></type> <name pos:line="697" pos:column="21">back</name> <init pos:line="697" pos:column="26">= <expr><name pos:line="697" pos:column="28">startPos</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="698" pos:column="17">int</name></type> <name pos:line="698" pos:column="21">style</name> <init pos:line="698" pos:column="27">= <expr><lit:literal type="number" pos:line="698" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="699" pos:column="17">while <condition pos:line="699" pos:column="23">(<expr><op:operator pos:line="699" pos:column="24">--</op:operator><name pos:line="699" pos:column="26">back</name></expr>)</condition> <block pos:line="699" pos:column="32">{
			<expr_stmt><expr><name pos:line="700" pos:column="25">style</name> <op:operator pos:line="700" pos:column="31">=</op:operator> <call><name><name pos:line="700" pos:column="33">styler</name><op:operator pos:line="700" pos:column="39">.</op:operator><name pos:line="700" pos:column="40">StyleAt</name></name><argument_list pos:line="700" pos:column="47">(<argument><expr><name pos:line="700" pos:column="48">back</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="701" pos:column="25">if <condition pos:line="701" pos:column="28">(<expr><name><name pos:line="701" pos:column="29">style</name> <argument_list pos:line="701" pos:column="35">&lt; <argument><expr><name pos:line="701" pos:column="37">SCE_HJ_DEFAULT</name> <op:operator pos:line="701" pos:column="52">||</op:operator> <name pos:line="701" pos:column="55">style</name></expr></argument> &gt;</argument_list></name> <name pos:line="701" pos:column="63">SCE_HJ_COMMENTDOC</name></expr>)</condition><then pos:line="701" pos:column="81">
				<comment type="line" pos:line="702" pos:column="33">// includes SCE_HJ_COMMENT &amp; SCE_HJ_COMMENTLINE</comment>
				<break pos:line="703" pos:column="33">break;</break></then></if>
		}</block></while>
		<if pos:line="705" pos:column="17">if <condition pos:line="705" pos:column="20">(<expr><name pos:line="705" pos:column="21">style</name> <op:operator pos:line="705" pos:column="27">==</op:operator> <name pos:line="705" pos:column="30">SCE_HJ_SYMBOLS</name></expr>)</condition><then pos:line="705" pos:column="45"> <block pos:line="705" pos:column="46">{
			<expr_stmt><expr><name pos:line="706" pos:column="25">chPrevNonWhite</name> <op:operator pos:line="706" pos:column="40">=</op:operator> <call><name><name pos:line="706" pos:column="42">static_cast</name><argument_list pos:line="706" pos:column="53">&lt;<argument><expr><name pos:line="706" pos:column="54">unsigned</name> <name pos:line="706" pos:column="63">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="706" pos:column="68">(<argument><expr><call><name><name pos:line="706" pos:column="69">styler</name><op:operator pos:line="706" pos:column="75">.</op:operator><name pos:line="706" pos:column="76">SafeGetCharAt</name></name><argument_list pos:line="706" pos:column="89">(<argument><expr><name pos:line="706" pos:column="90">back</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="710" pos:column="9">styler</name><op:operator pos:line="710" pos:column="15">.</op:operator><name pos:line="710" pos:column="16">StartSegment</name></name><argument_list pos:line="710" pos:column="28">(<argument><expr><name pos:line="710" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier pos:line="711" pos:column="9">const</specifier> <name pos:line="711" pos:column="15">int</name></type> <name pos:line="711" pos:column="19">lengthDoc</name> <init pos:line="711" pos:column="29">= <expr><name pos:line="711" pos:column="31">startPos</name> <op:operator pos:line="711" pos:column="40">+</op:operator> <name pos:line="711" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<for pos:line="712" pos:column="9">for (<init><decl><type><name pos:line="712" pos:column="14">int</name></type> <name pos:line="712" pos:column="18">i</name> <init pos:line="712" pos:column="20">= <expr><name pos:line="712" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="712" pos:column="32">i</name> <op:operator pos:line="712" pos:column="34">&lt;</op:operator> <name pos:line="712" pos:column="36">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="712" pos:column="47">i</name><op:operator pos:line="712" pos:column="48">++</op:operator></expr></incr>) <block pos:line="712" pos:column="52">{
		<decl_stmt><decl><type><specifier pos:line="713" pos:column="17">const</specifier> <name pos:line="713" pos:column="23">int</name></type> <name pos:line="713" pos:column="27">chPrev2</name> <init pos:line="713" pos:column="35">= <expr><name pos:line="713" pos:column="37">chPrev</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="714" pos:column="17">chPrev</name> <op:operator pos:line="714" pos:column="24">=</op:operator> <name pos:line="714" pos:column="26">ch</name></expr>;</expr_stmt>
		<if pos:line="715" pos:column="17">if <condition pos:line="715" pos:column="20">(<expr><op:operator pos:line="715" pos:column="21">!</op:operator><call><name pos:line="715" pos:column="22">IsASpace</name><argument_list pos:line="715" pos:column="30">(<argument><expr><name pos:line="715" pos:column="31">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="715" pos:column="35">&amp;&amp;</op:operator> <name pos:line="715" pos:column="38">state</name> <op:operator pos:line="715" pos:column="44">!=</op:operator> <name pos:line="715" pos:column="47">SCE_HJ_COMMENT</name> <op:operator pos:line="715" pos:column="62">&amp;&amp;</op:operator>
			<name pos:line="716" pos:column="25">state</name> <op:operator pos:line="716" pos:column="31">!=</op:operator> <name pos:line="716" pos:column="34">SCE_HJ_COMMENTLINE</name> <op:operator pos:line="716" pos:column="53">&amp;&amp;</op:operator> <name pos:line="716" pos:column="56">state</name> <op:operator pos:line="716" pos:column="62">!=</op:operator> <name pos:line="716" pos:column="65">SCE_HJ_COMMENTDOC</name></expr>)</condition><then pos:line="716" pos:column="83">
			<expr_stmt><expr><name pos:line="717" pos:column="25">chPrevNonWhite</name> <op:operator pos:line="717" pos:column="40">=</op:operator> <name pos:line="717" pos:column="42">ch</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="718" pos:column="17">ch</name> <op:operator pos:line="718" pos:column="20">=</op:operator> <call><name><name pos:line="718" pos:column="22">static_cast</name><argument_list pos:line="718" pos:column="33">&lt;<argument><expr><name pos:line="718" pos:column="34">unsigned</name> <name pos:line="718" pos:column="43">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="718" pos:column="48">(<argument><expr><name><name pos:line="718" pos:column="49">styler</name><index pos:line="718" pos:column="55">[<expr><name pos:line="718" pos:column="56">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="719" pos:column="17">int</name></type> <name pos:line="719" pos:column="21">chNext</name> <init pos:line="719" pos:column="28">= <expr><call><name><name pos:line="719" pos:column="30">static_cast</name><argument_list pos:line="719" pos:column="41">&lt;<argument><expr><name pos:line="719" pos:column="42">unsigned</name> <name pos:line="719" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="719" pos:column="56">(<argument><expr><call><name><name pos:line="719" pos:column="57">styler</name><op:operator pos:line="719" pos:column="63">.</op:operator><name pos:line="719" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="719" pos:column="77">(<argument><expr><name pos:line="719" pos:column="78">i</name> <op:operator pos:line="719" pos:column="80">+</op:operator> <lit:literal type="number" pos:line="719" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="720" pos:column="17">const</specifier> <name pos:line="720" pos:column="23">int</name></type> <name pos:line="720" pos:column="27">chNext2</name> <init pos:line="720" pos:column="35">= <expr><call><name><name pos:line="720" pos:column="37">static_cast</name><argument_list pos:line="720" pos:column="48">&lt;<argument><expr><name pos:line="720" pos:column="49">unsigned</name> <name pos:line="720" pos:column="58">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="720" pos:column="63">(<argument><expr><call><name><name pos:line="720" pos:column="64">styler</name><op:operator pos:line="720" pos:column="70">.</op:operator><name pos:line="720" pos:column="71">SafeGetCharAt</name></name><argument_list pos:line="720" pos:column="84">(<argument><expr><name pos:line="720" pos:column="85">i</name> <op:operator pos:line="720" pos:column="87">+</op:operator> <lit:literal type="number" pos:line="720" pos:column="89">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="722" pos:column="17">// Handle DBCS codepages</comment>
		<if pos:line="723" pos:column="17">if <condition pos:line="723" pos:column="20">(<expr><call><name><name pos:line="723" pos:column="21">styler</name><op:operator pos:line="723" pos:column="27">.</op:operator><name pos:line="723" pos:column="28">IsLeadByte</name></name><argument_list pos:line="723" pos:column="38">(<argument><expr><call><name><name pos:line="723" pos:column="39">static_cast</name><argument_list pos:line="723" pos:column="50">&lt;<argument><expr><name pos:line="723" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="723" pos:column="56">(<argument><expr><name pos:line="723" pos:column="57">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="723" pos:column="62"> <block pos:line="723" pos:column="63">{
			<expr_stmt><expr><name pos:line="724" pos:column="25">chPrev</name> <op:operator pos:line="724" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="724" pos:column="34">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="725" pos:column="25">i</name> <op:operator pos:line="725" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="725" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<continue pos:line="726" pos:column="25">continue;</continue>
		}</block></then></if>

		<if pos:line="729" pos:column="17">if <condition pos:line="729" pos:column="20">(<expr><op:operator pos:line="729" pos:column="21">(</op:operator><op:operator pos:line="729" pos:column="22">!</op:operator><call><name pos:line="729" pos:column="23">IsASpace</name><argument_list pos:line="729" pos:column="31">(<argument><expr><name pos:line="729" pos:column="32">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="729" pos:column="36">||</op:operator> <op:operator pos:line="729" pos:column="39">!</op:operator><name pos:line="729" pos:column="40">foldCompact</name><op:operator pos:line="729" pos:column="51">)</op:operator> <op:operator pos:line="729" pos:column="53">&amp;&amp;</op:operator> <name pos:line="729" pos:column="56">fold</name></expr>)</condition><then pos:line="729" pos:column="61">
			<expr_stmt><expr><name pos:line="730" pos:column="25">visibleChars</name><op:operator pos:line="730" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
		<if pos:line="731" pos:column="17">if <condition pos:line="731" pos:column="20">(<expr><op:operator pos:line="731" pos:column="21">!</op:operator><call><name pos:line="731" pos:column="22">IsASpace</name><argument_list pos:line="731" pos:column="30">(<argument><expr><name pos:line="731" pos:column="31">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="731" pos:column="35">
			<expr_stmt><expr><name pos:line="732" pos:column="25">lineStartVisibleChars</name><op:operator pos:line="732" pos:column="46">++</op:operator></expr>;</expr_stmt></then></if>

		<comment type="line" pos:line="734" pos:column="17">// decide what is the current state to print (depending of the script tag)</comment>
		<expr_stmt><expr><name pos:line="735" pos:column="17">StateToPrint</name> <op:operator pos:line="735" pos:column="30">=</op:operator> <call><name pos:line="735" pos:column="32">statePrintForState</name><argument_list pos:line="735" pos:column="50">(<argument><expr><name pos:line="735" pos:column="51">state</name></expr></argument>, <argument><expr><name pos:line="735" pos:column="58">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="737" pos:column="17">// handle script folding</comment>
		<if pos:line="738" pos:column="17">if <condition pos:line="738" pos:column="20">(<expr><name pos:line="738" pos:column="21">fold</name></expr>)</condition><then pos:line="738" pos:column="26"> <block pos:line="738" pos:column="27">{
			<switch pos:line="739" pos:column="25">switch <condition pos:line="739" pos:column="32">(<expr><name pos:line="739" pos:column="33">scriptLanguage</name></expr>)</condition> <block pos:line="739" pos:column="49">{
			<case pos:line="740" pos:column="25">case <expr><name pos:line="740" pos:column="30">eScriptJS</name></expr>:
			</case><case pos:line="741" pos:column="25">case <expr><name pos:line="741" pos:column="30">eScriptPHP</name></expr>:
				<comment type="line" pos:line="742" pos:column="33">//not currently supported				case eScriptVBS:</comment>

				<if pos:line="744" pos:column="33">if <condition pos:line="744" pos:column="36">(<expr><op:operator pos:line="744" pos:column="37">(</op:operator><name pos:line="744" pos:column="38">state</name> <op:operator pos:line="744" pos:column="44">!=</op:operator> <name pos:line="744" pos:column="47">SCE_HPHP_COMMENT</name><op:operator pos:line="744" pos:column="63">)</op:operator> <op:operator pos:line="744" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="744" pos:column="68">(</op:operator><name pos:line="744" pos:column="69">state</name> <op:operator pos:line="744" pos:column="75">!=</op:operator> <name pos:line="744" pos:column="78">SCE_HPHP_COMMENTLINE</name><op:operator pos:line="744" pos:column="98">)</op:operator> <op:operator pos:line="744" pos:column="100">&amp;&amp;</op:operator> <op:operator pos:line="744" pos:column="103">(</op:operator><name pos:line="744" pos:column="104">state</name> <op:operator pos:line="744" pos:column="110">!=</op:operator> <name pos:line="744" pos:column="113">SCE_HJ_COMMENT</name><op:operator pos:line="744" pos:column="127">)</op:operator> <op:operator pos:line="744" pos:column="129">&amp;&amp;</op:operator> <op:operator pos:line="744" pos:column="132">(</op:operator><name pos:line="744" pos:column="133">state</name> <op:operator pos:line="744" pos:column="139">!=</op:operator> <name pos:line="744" pos:column="142">SCE_HJ_COMMENTLINE</name><op:operator pos:line="744" pos:column="160">)</op:operator> <op:operator pos:line="744" pos:column="162">&amp;&amp;</op:operator> <op:operator pos:line="744" pos:column="165">(</op:operator><name pos:line="744" pos:column="166">state</name> <op:operator pos:line="744" pos:column="172">!=</op:operator> <name pos:line="744" pos:column="175">SCE_HJ_COMMENTDOC</name><op:operator pos:line="744" pos:column="192">)</op:operator> <op:operator pos:line="744" pos:column="194">&amp;&amp;</op:operator> <op:operator pos:line="744" pos:column="197">(</op:operator><op:operator pos:line="744" pos:column="198">!</op:operator><call><name pos:line="744" pos:column="199">isStringState</name><argument_list pos:line="744" pos:column="212">(<argument><expr><name pos:line="744" pos:column="213">state</name></expr></argument>)</argument_list></call><op:operator pos:line="744" pos:column="219">)</op:operator></expr>)</condition><then pos:line="744" pos:column="221"> <block pos:line="744" pos:column="222">{
				<comment type="line" pos:line="745" pos:column="33">//Platform::DebugPrintf("state=%d, StateToPrint=%d, initStyle=%d\n", state, StateToPrint, initStyle);</comment>
				<comment type="line" pos:line="746" pos:column="33">//if ((state == SCE_HPHP_OPERATOR) || (state == SCE_HPHP_DEFAULT) || (state == SCE_HJ_SYMBOLS) || (state == SCE_HJ_START) || (state == SCE_HJ_DEFAULT)) {</comment>
					<if pos:line="747" pos:column="41">if <condition pos:line="747" pos:column="44">(<expr><name pos:line="747" pos:column="45">ch</name> <op:operator pos:line="747" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="747" pos:column="51">'#'</lit:literal></expr>)</condition><then pos:line="747" pos:column="55"> <block pos:line="747" pos:column="56">{
						<decl_stmt><decl><type><name pos:line="748" pos:column="49">int</name></type> <name pos:line="748" pos:column="53">j</name> <init pos:line="748" pos:column="55">= <expr><name pos:line="748" pos:column="57">i</name> <op:operator pos:line="748" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="748" pos:column="61">1</lit:literal></expr></init></decl>;</decl_stmt>
						<while pos:line="749" pos:column="49">while <condition pos:line="749" pos:column="55">(<expr><op:operator pos:line="749" pos:column="56">(</op:operator><name pos:line="749" pos:column="57">j</name> <op:operator pos:line="749" pos:column="59">&lt;</op:operator> <name pos:line="749" pos:column="61">lengthDoc</name><op:operator pos:line="749" pos:column="70">)</op:operator> <op:operator pos:line="749" pos:column="72">&amp;&amp;</op:operator> <call><name pos:line="749" pos:column="75">IsASpaceOrTab</name><argument_list pos:line="749" pos:column="88">(<argument><expr><call><name><name pos:line="749" pos:column="89">styler</name><op:operator pos:line="749" pos:column="95">.</op:operator><name pos:line="749" pos:column="96">SafeGetCharAt</name></name><argument_list pos:line="749" pos:column="109">(<argument><expr><name pos:line="749" pos:column="110">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="749" pos:column="115">{
							<expr_stmt><expr><name pos:line="750" pos:column="57">j</name><op:operator pos:line="750" pos:column="58">++</op:operator></expr>;</expr_stmt>
						}</block></while>
						<if pos:line="752" pos:column="49">if <condition pos:line="752" pos:column="52">(<expr><call><name><name pos:line="752" pos:column="53">styler</name><op:operator pos:line="752" pos:column="59">.</op:operator><name pos:line="752" pos:column="60">Match</name></name><argument_list pos:line="752" pos:column="65">(<argument><expr><name pos:line="752" pos:column="66">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="752" pos:column="69">"region"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="752" pos:column="79">||</op:operator> <call><name><name pos:line="752" pos:column="82">styler</name><op:operator pos:line="752" pos:column="88">.</op:operator><name pos:line="752" pos:column="89">Match</name></name><argument_list pos:line="752" pos:column="94">(<argument><expr><name pos:line="752" pos:column="95">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="752" pos:column="98">"if"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="752" pos:column="104"> <block pos:line="752" pos:column="105">{
							<expr_stmt><expr><name pos:line="753" pos:column="57">levelCurrent</name><op:operator pos:line="753" pos:column="69">++</op:operator></expr>;</expr_stmt>
						}</block></then> <else pos:line="754" pos:column="51">else <if pos:line="754" pos:column="56">if <condition pos:line="754" pos:column="59">(<expr><call><name><name pos:line="754" pos:column="60">styler</name><op:operator pos:line="754" pos:column="66">.</op:operator><name pos:line="754" pos:column="67">Match</name></name><argument_list pos:line="754" pos:column="72">(<argument><expr><name pos:line="754" pos:column="73">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="754" pos:column="76">"end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="754" pos:column="83"> <block pos:line="754" pos:column="84">{
							<expr_stmt><expr><name pos:line="755" pos:column="57">levelCurrent</name><op:operator pos:line="755" pos:column="69">--</op:operator></expr>;</expr_stmt>
						}</block></then></if></else></if>
					}</block></then> <else pos:line="757" pos:column="43">else <if pos:line="757" pos:column="48">if <condition pos:line="757" pos:column="51">(<expr><op:operator pos:line="757" pos:column="52">(</op:operator><name pos:line="757" pos:column="53">ch</name> <op:operator pos:line="757" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="757" pos:column="59">'{'</lit:literal><op:operator pos:line="757" pos:column="62">)</op:operator> <op:operator pos:line="757" pos:column="64">||</op:operator> <op:operator pos:line="757" pos:column="67">(</op:operator><name pos:line="757" pos:column="68">ch</name> <op:operator pos:line="757" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="757" pos:column="74">'}'</lit:literal><op:operator pos:line="757" pos:column="77">)</op:operator> <op:operator pos:line="757" pos:column="79">||</op:operator> <op:operator pos:line="757" pos:column="82">(</op:operator><name pos:line="757" pos:column="83">foldComment</name> <op:operator pos:line="757" pos:column="95">&amp;&amp;</op:operator> <op:operator pos:line="757" pos:column="98">(</op:operator><name pos:line="757" pos:column="99">ch</name> <op:operator pos:line="757" pos:column="102">==</op:operator> <lit:literal type="char" pos:line="757" pos:column="105">'/'</lit:literal><op:operator pos:line="757" pos:column="108">)</op:operator> <op:operator pos:line="757" pos:column="110">&amp;&amp;</op:operator> <op:operator pos:line="757" pos:column="113">(</op:operator><name pos:line="757" pos:column="114">chNext</name> <op:operator pos:line="757" pos:column="121">==</op:operator> <lit:literal type="char" pos:line="757" pos:column="124">'*'</lit:literal><op:operator pos:line="757" pos:column="127">)</op:operator><op:operator pos:line="757" pos:column="128">)</op:operator></expr>)</condition><then pos:line="757" pos:column="130"> <block pos:line="757" pos:column="131">{
						<expr_stmt><expr><name pos:line="758" pos:column="49">levelCurrent</name> <op:operator pos:line="758" pos:column="62">+=</op:operator> <op:operator pos:line="758" pos:column="65">(</op:operator><op:operator pos:line="758" pos:column="66">(</op:operator><op:operator pos:line="758" pos:column="67">(</op:operator><name pos:line="758" pos:column="68">ch</name> <op:operator pos:line="758" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="758" pos:column="74">'{'</lit:literal><op:operator pos:line="758" pos:column="77">)</op:operator> <op:operator pos:line="758" pos:column="79">||</op:operator> <op:operator pos:line="758" pos:column="82">(</op:operator><name pos:line="758" pos:column="83">ch</name> <op:operator pos:line="758" pos:column="86">==</op:operator> <lit:literal type="char" pos:line="758" pos:column="89">'/'</lit:literal><op:operator pos:line="758" pos:column="92">)</op:operator><op:operator pos:line="758" pos:column="93">)</op:operator> <op:operator pos:line="758" pos:column="95">?</op:operator> <lit:literal type="number" pos:line="758" pos:column="97">1</lit:literal> <op:operator pos:line="758" pos:column="99">:</op:operator> <op:operator pos:line="758" pos:column="101">-</op:operator><lit:literal type="number" pos:line="758" pos:column="102">1</lit:literal><op:operator pos:line="758" pos:column="103">)</op:operator></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then> <else pos:line="760" pos:column="35">else <if pos:line="760" pos:column="40">if <condition pos:line="760" pos:column="43">(<expr><op:operator pos:line="760" pos:column="44">(</op:operator><op:operator pos:line="760" pos:column="45">(</op:operator><name pos:line="760" pos:column="46">state</name> <op:operator pos:line="760" pos:column="52">==</op:operator> <name pos:line="760" pos:column="55">SCE_HPHP_COMMENT</name><op:operator pos:line="760" pos:column="71">)</op:operator> <op:operator pos:line="760" pos:column="73">||</op:operator> <op:operator pos:line="760" pos:column="76">(</op:operator><name pos:line="760" pos:column="77">state</name> <op:operator pos:line="760" pos:column="83">==</op:operator> <name pos:line="760" pos:column="86">SCE_HJ_COMMENT</name><op:operator pos:line="760" pos:column="100">)</op:operator><op:operator pos:line="760" pos:column="101">)</op:operator> <op:operator pos:line="760" pos:column="103">&amp;&amp;</op:operator> <name pos:line="760" pos:column="106">foldComment</name> <op:operator pos:line="760" pos:column="118">&amp;&amp;</op:operator> <op:operator pos:line="760" pos:column="121">(</op:operator><name pos:line="760" pos:column="122">ch</name> <op:operator pos:line="760" pos:column="125">==</op:operator> <lit:literal type="char" pos:line="760" pos:column="128">'*'</lit:literal><op:operator pos:line="760" pos:column="131">)</op:operator> <op:operator pos:line="760" pos:column="133">&amp;&amp;</op:operator> <op:operator pos:line="760" pos:column="136">(</op:operator><name pos:line="760" pos:column="137">chNext</name> <op:operator pos:line="760" pos:column="144">==</op:operator> <lit:literal type="char" pos:line="760" pos:column="147">'/'</lit:literal><op:operator pos:line="760" pos:column="150">)</op:operator></expr>)</condition><then pos:line="760" pos:column="152"> <block pos:line="760" pos:column="153">{
					<expr_stmt><expr><name pos:line="761" pos:column="41">levelCurrent</name><op:operator pos:line="761" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="763" pos:column="33">break;</break>
			</case><case pos:line="764" pos:column="25">case <expr><name pos:line="764" pos:column="30">eScriptPython</name></expr>:
				<if pos:line="765" pos:column="33">if <condition pos:line="765" pos:column="36">(<expr><name pos:line="765" pos:column="37">state</name> <op:operator pos:line="765" pos:column="43">!=</op:operator> <name pos:line="765" pos:column="46">SCE_HP_COMMENTLINE</name></expr>)</condition><then pos:line="765" pos:column="65"> <block pos:line="765" pos:column="66">{
					<if pos:line="766" pos:column="41">if <condition pos:line="766" pos:column="44">(<expr><op:operator pos:line="766" pos:column="45">(</op:operator><name pos:line="766" pos:column="46">ch</name> <op:operator pos:line="766" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="766" pos:column="52">':'</lit:literal><op:operator pos:line="766" pos:column="55">)</op:operator> <op:operator pos:line="766" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="766" pos:column="60">(</op:operator><op:operator pos:line="766" pos:column="61">(</op:operator><name pos:line="766" pos:column="62">chNext</name> <op:operator pos:line="766" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="766" pos:column="72">'\n'</lit:literal><op:operator pos:line="766" pos:column="76">)</op:operator> <op:operator pos:line="766" pos:column="78">||</op:operator> <op:operator pos:line="766" pos:column="81">(</op:operator><name pos:line="766" pos:column="82">chNext</name> <op:operator pos:line="766" pos:column="89">==</op:operator> <lit:literal type="char" pos:line="766" pos:column="92">'\r'</lit:literal> <op:operator pos:line="766" pos:column="97">&amp;&amp;</op:operator> <name pos:line="766" pos:column="100">chNext2</name> <op:operator pos:line="766" pos:column="108">==</op:operator> <lit:literal type="char" pos:line="766" pos:column="111">'\n'</lit:literal><op:operator pos:line="766" pos:column="115">)</op:operator><op:operator pos:line="766" pos:column="116">)</op:operator></expr>)</condition><then pos:line="766" pos:column="118"> <block pos:line="766" pos:column="119">{
						<expr_stmt><expr><name pos:line="767" pos:column="49">levelCurrent</name><op:operator pos:line="767" pos:column="61">++</op:operator></expr>;</expr_stmt>
					}</block></then> <else pos:line="768" pos:column="43">else <if pos:line="768" pos:column="48">if <condition pos:line="768" pos:column="51">(<expr><op:operator pos:line="768" pos:column="52">(</op:operator><name pos:line="768" pos:column="53">ch</name> <op:operator pos:line="768" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="768" pos:column="59">'\n'</lit:literal><op:operator pos:line="768" pos:column="63">)</op:operator> <op:operator pos:line="768" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="768" pos:column="68">!</op:operator><op:operator pos:line="768" pos:column="69">(</op:operator><op:operator pos:line="768" pos:column="70">(</op:operator><name pos:line="768" pos:column="71">chNext</name> <op:operator pos:line="768" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="768" pos:column="81">'\r'</lit:literal><op:operator pos:line="768" pos:column="85">)</op:operator> <op:operator pos:line="768" pos:column="87">&amp;&amp;</op:operator> <op:operator pos:line="768" pos:column="90">(</op:operator><name pos:line="768" pos:column="91">chNext2</name> <op:operator pos:line="768" pos:column="99">==</op:operator> <lit:literal type="char" pos:line="768" pos:column="102">'\n'</lit:literal><op:operator pos:line="768" pos:column="106">)</op:operator><op:operator pos:line="768" pos:column="107">)</op:operator> <op:operator pos:line="768" pos:column="109">&amp;&amp;</op:operator> <op:operator pos:line="768" pos:column="112">(</op:operator><name pos:line="768" pos:column="113">chNext</name> <op:operator pos:line="768" pos:column="120">!=</op:operator> <lit:literal type="char" pos:line="768" pos:column="123">'\n'</lit:literal><op:operator pos:line="768" pos:column="127">)</op:operator></expr>)</condition><then pos:line="768" pos:column="129"> <block pos:line="768" pos:column="130">{
						<comment type="line" pos:line="769" pos:column="49">// check if the number of tabs is lower than the level</comment>
						<decl_stmt><decl><type><name pos:line="770" pos:column="49">int</name></type> <name pos:line="770" pos:column="53">Findlevel</name> <init pos:line="770" pos:column="63">= <expr><op:operator pos:line="770" pos:column="65">(</op:operator><name pos:line="770" pos:column="66">levelCurrent</name> <op:operator pos:line="770" pos:column="79">&amp;</op:operator> <op:operator pos:line="770" pos:column="81">~</op:operator><name pos:line="770" pos:column="82">SC_FOLDLEVELBASE</name><op:operator pos:line="770" pos:column="98">)</op:operator> <op:operator pos:line="770" pos:column="100">*</op:operator> <lit:literal type="number" pos:line="770" pos:column="102">8</lit:literal></expr></init></decl>;</decl_stmt>
						<for pos:line="771" pos:column="49">for (<init><decl><type><name pos:line="771" pos:column="54">int</name></type> <name pos:line="771" pos:column="58">j</name> <init pos:line="771" pos:column="60">= <expr><lit:literal type="number" pos:line="771" pos:column="62">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="771" pos:column="65">Findlevel</name> <op:operator pos:line="771" pos:column="75">&gt;</op:operator> <lit:literal type="number" pos:line="771" pos:column="77">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="771" pos:column="80">j</name><op:operator pos:line="771" pos:column="81">++</op:operator></expr></incr>) <block pos:line="771" pos:column="85">{
							<decl_stmt><decl><type><name pos:line="772" pos:column="57">char</name></type> <name pos:line="772" pos:column="62">chTmp</name> <init pos:line="772" pos:column="68">= <expr><call><name><name pos:line="772" pos:column="70">styler</name><op:operator pos:line="772" pos:column="76">.</op:operator><name pos:line="772" pos:column="77">SafeGetCharAt</name></name><argument_list pos:line="772" pos:column="90">(<argument><expr><name pos:line="772" pos:column="91">i</name> <op:operator pos:line="772" pos:column="93">+</op:operator> <name pos:line="772" pos:column="95">j</name> <op:operator pos:line="772" pos:column="97">+</op:operator> <lit:literal type="number" pos:line="772" pos:column="99">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="773" pos:column="57">if <condition pos:line="773" pos:column="60">(<expr><name pos:line="773" pos:column="61">chTmp</name> <op:operator pos:line="773" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="773" pos:column="70">'\t'</lit:literal></expr>)</condition><then pos:line="773" pos:column="75"> <block pos:line="773" pos:column="76">{
								<expr_stmt><expr><name pos:line="774" pos:column="65">Findlevel</name> <op:operator pos:line="774" pos:column="75">-=</op:operator> <lit:literal type="number" pos:line="774" pos:column="78">8</lit:literal></expr>;</expr_stmt>
							}</block></then> <else pos:line="775" pos:column="59">else <if pos:line="775" pos:column="64">if <condition pos:line="775" pos:column="67">(<expr><name pos:line="775" pos:column="68">chTmp</name> <op:operator pos:line="775" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="775" pos:column="77">' '</lit:literal></expr>)</condition><then pos:line="775" pos:column="81"> <block pos:line="775" pos:column="82">{
								<expr_stmt><expr><name pos:line="776" pos:column="65">Findlevel</name><op:operator pos:line="776" pos:column="74">--</op:operator></expr>;</expr_stmt>
							}</block></then> <else pos:line="777" pos:column="59">else <block pos:line="777" pos:column="64">{
								<break pos:line="778" pos:column="65">break;</break>
							}</block></else></if></else></if>
						}</block></for>

						<if pos:line="782" pos:column="49">if <condition pos:line="782" pos:column="52">(<expr><name pos:line="782" pos:column="53">Findlevel</name> <op:operator pos:line="782" pos:column="63">&gt;</op:operator> <lit:literal type="number" pos:line="782" pos:column="65">0</lit:literal></expr>)</condition><then pos:line="782" pos:column="67"> <block pos:line="782" pos:column="68">{
							<expr_stmt><expr><name pos:line="783" pos:column="57">levelCurrent</name> <op:operator pos:line="783" pos:column="70">-=</op:operator> <name pos:line="783" pos:column="73">Findlevel</name> <op:operator pos:line="783" pos:column="83">/</op:operator> <lit:literal type="number" pos:line="783" pos:column="85">8</lit:literal></expr>;</expr_stmt>
							<if pos:line="784" pos:column="57">if <condition pos:line="784" pos:column="60">(<expr><name pos:line="784" pos:column="61">Findlevel</name> <op:operator pos:line="784" pos:column="71">%</op:operator> <lit:literal type="number" pos:line="784" pos:column="73">8</lit:literal></expr>)</condition><then pos:line="784" pos:column="75">
								<expr_stmt><expr><name pos:line="785" pos:column="65">levelCurrent</name><op:operator pos:line="785" pos:column="77">--</op:operator></expr>;</expr_stmt></then></if>
						}</block></then></if>
					}</block></then></if></else></if>
				}</block></then></if>
				<break pos:line="789" pos:column="33">break;</break>
			</case><default pos:line="790" pos:column="25">default:
				<break pos:line="791" pos:column="33">break;</break>
			</default>}</block></switch>
		}</block></then></if>

		<if pos:line="795" pos:column="17">if <condition pos:line="795" pos:column="20">(<expr><op:operator pos:line="795" pos:column="21">(</op:operator><name pos:line="795" pos:column="22">ch</name> <op:operator pos:line="795" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="795" pos:column="28">'\r'</lit:literal> <op:operator pos:line="795" pos:column="33">&amp;&amp;</op:operator> <name pos:line="795" pos:column="36">chNext</name> <op:operator pos:line="795" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="795" pos:column="46">'\n'</lit:literal><op:operator pos:line="795" pos:column="50">)</op:operator> <op:operator pos:line="795" pos:column="52">||</op:operator> <op:operator pos:line="795" pos:column="55">(</op:operator><name pos:line="795" pos:column="56">ch</name> <op:operator pos:line="795" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="795" pos:column="62">'\n'</lit:literal><op:operator pos:line="795" pos:column="66">)</op:operator></expr>)</condition><then pos:line="795" pos:column="68"> <block pos:line="795" pos:column="69">{
			<comment type="line" pos:line="796" pos:column="25">// Trigger on CR only (Mac style) or either on LF from CR+LF (Dos/Win) or on LF alone (Unix)</comment>
			<comment type="line" pos:line="797" pos:column="25">// Avoid triggering two times on Dos/Win</comment>
			<comment type="line" pos:line="798" pos:column="25">// New line -&gt; record any line state onto /next/ line</comment>
			<if pos:line="799" pos:column="25">if <condition pos:line="799" pos:column="28">(<expr><name pos:line="799" pos:column="29">fold</name></expr>)</condition><then pos:line="799" pos:column="34"> <block pos:line="799" pos:column="35">{
				<decl_stmt><decl><type><name pos:line="800" pos:column="33">int</name></type> <name pos:line="800" pos:column="37">lev</name> <init pos:line="800" pos:column="41">= <expr><name pos:line="800" pos:column="43">levelPrev</name></expr></init></decl>;</decl_stmt>
				<if pos:line="801" pos:column="33">if <condition pos:line="801" pos:column="36">(<expr><name pos:line="801" pos:column="37">visibleChars</name> <op:operator pos:line="801" pos:column="50">==</op:operator> <lit:literal type="number" pos:line="801" pos:column="53">0</lit:literal></expr>)</condition><then pos:line="801" pos:column="55">
					<expr_stmt><expr><name pos:line="802" pos:column="41">lev</name> <op:operator pos:line="802" pos:column="45">|=</op:operator> <name pos:line="802" pos:column="48">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
				<if pos:line="803" pos:column="33">if <condition pos:line="803" pos:column="36">(<expr><op:operator pos:line="803" pos:column="37">(</op:operator><name pos:line="803" pos:column="38">levelCurrent</name> <op:operator pos:line="803" pos:column="51">&gt;</op:operator> <name pos:line="803" pos:column="53">levelPrev</name><op:operator pos:line="803" pos:column="62">)</op:operator> <op:operator pos:line="803" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="803" pos:column="67">(</op:operator><name pos:line="803" pos:column="68">visibleChars</name> <op:operator pos:line="803" pos:column="81">&gt;</op:operator> <lit:literal type="number" pos:line="803" pos:column="83">0</lit:literal><op:operator pos:line="803" pos:column="84">)</op:operator></expr>)</condition><then pos:line="803" pos:column="86">
					<expr_stmt><expr><name pos:line="804" pos:column="41">lev</name> <op:operator pos:line="804" pos:column="45">|=</op:operator> <name pos:line="804" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>

				<expr_stmt><expr><call><name><name pos:line="806" pos:column="33">styler</name><op:operator pos:line="806" pos:column="39">.</op:operator><name pos:line="806" pos:column="40">SetLevel</name></name><argument_list pos:line="806" pos:column="48">(<argument><expr><name pos:line="806" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="806" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="807" pos:column="33">visibleChars</name> <op:operator pos:line="807" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="807" pos:column="48">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="808" pos:column="33">levelPrev</name> <op:operator pos:line="808" pos:column="43">=</op:operator> <name pos:line="808" pos:column="45">levelCurrent</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name pos:line="810" pos:column="25">styler</name><op:operator pos:line="810" pos:column="31">.</op:operator><name pos:line="810" pos:column="32">SetLineState</name></name><argument_list pos:line="810" pos:column="44">(<argument><expr><name pos:line="810" pos:column="45">lineCurrent</name></expr></argument>,
			                    <argument><expr><op:operator pos:line="811" pos:column="45">(</op:operator><op:operator pos:line="811" pos:column="46">(</op:operator><name pos:line="811" pos:column="47">inScriptType</name> <op:operator pos:line="811" pos:column="60">&amp;</op:operator> <lit:literal type="number" pos:line="811" pos:column="62">0x03</lit:literal><op:operator pos:line="811" pos:column="66">)</op:operator> <op:operator pos:line="811" pos:column="68">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="811" pos:column="71">0</lit:literal><op:operator pos:line="811" pos:column="72">)</op:operator> <op:operator pos:line="811" pos:column="74">|</op:operator>
			                    <op:operator pos:line="812" pos:column="45">(</op:operator><op:operator pos:line="812" pos:column="46">(</op:operator><name pos:line="812" pos:column="47">tagOpened</name> <op:operator pos:line="812" pos:column="57">&amp;</op:operator> <lit:literal type="number" pos:line="812" pos:column="59">0x01</lit:literal><op:operator pos:line="812" pos:column="63">)</op:operator> <op:operator pos:line="812" pos:column="65">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="812" pos:column="68">2</lit:literal><op:operator pos:line="812" pos:column="69">)</op:operator> <op:operator pos:line="812" pos:column="71">|</op:operator>
			                    <op:operator pos:line="813" pos:column="45">(</op:operator><op:operator pos:line="813" pos:column="46">(</op:operator><name pos:line="813" pos:column="47">tagClosing</name> <op:operator pos:line="813" pos:column="58">&amp;</op:operator> <lit:literal type="number" pos:line="813" pos:column="60">0x01</lit:literal><op:operator pos:line="813" pos:column="64">)</op:operator> <op:operator pos:line="813" pos:column="66">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="813" pos:column="69">3</lit:literal><op:operator pos:line="813" pos:column="70">)</op:operator> <op:operator pos:line="813" pos:column="72">|</op:operator>
			                    <op:operator pos:line="814" pos:column="45">(</op:operator><op:operator pos:line="814" pos:column="46">(</op:operator><name pos:line="814" pos:column="47">aspScript</name> <op:operator pos:line="814" pos:column="57">&amp;</op:operator> <lit:literal type="number" pos:line="814" pos:column="59">0x0F</lit:literal><op:operator pos:line="814" pos:column="63">)</op:operator> <op:operator pos:line="814" pos:column="65">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="814" pos:column="68">4</lit:literal><op:operator pos:line="814" pos:column="69">)</op:operator> <op:operator pos:line="814" pos:column="71">|</op:operator>
			                    <op:operator pos:line="815" pos:column="45">(</op:operator><op:operator pos:line="815" pos:column="46">(</op:operator><name pos:line="815" pos:column="47">clientScript</name> <op:operator pos:line="815" pos:column="60">&amp;</op:operator> <lit:literal type="number" pos:line="815" pos:column="62">0x0F</lit:literal><op:operator pos:line="815" pos:column="66">)</op:operator> <op:operator pos:line="815" pos:column="68">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="815" pos:column="71">8</lit:literal><op:operator pos:line="815" pos:column="72">)</op:operator> <op:operator pos:line="815" pos:column="74">|</op:operator>
			                    <op:operator pos:line="816" pos:column="45">(</op:operator><op:operator pos:line="816" pos:column="46">(</op:operator><name pos:line="816" pos:column="47">beforePreProc</name> <op:operator pos:line="816" pos:column="61">&amp;</op:operator> <lit:literal type="number" pos:line="816" pos:column="63">0xFF</lit:literal><op:operator pos:line="816" pos:column="67">)</op:operator> <op:operator pos:line="816" pos:column="69">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="816" pos:column="72">12</lit:literal><op:operator pos:line="816" pos:column="74">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="817" pos:column="25">lineCurrent</name><op:operator pos:line="817" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="818" pos:column="25">lineStartVisibleChars</name> <op:operator pos:line="818" pos:column="47">=</op:operator> <lit:literal type="number" pos:line="818" pos:column="49">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="821" pos:column="17">// Allow falling through to mako handling code if newline is going to end a block</comment>
		<if pos:line="822" pos:column="17">if <condition pos:line="822" pos:column="20">(<expr><op:operator pos:line="822" pos:column="21">(</op:operator><op:operator pos:line="822" pos:column="22">(</op:operator><name pos:line="822" pos:column="23">ch</name> <op:operator pos:line="822" pos:column="26">==</op:operator> <lit:literal type="char" pos:line="822" pos:column="29">'\r'</lit:literal> <op:operator pos:line="822" pos:column="34">&amp;&amp;</op:operator> <name pos:line="822" pos:column="37">chNext</name> <op:operator pos:line="822" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="822" pos:column="47">'\n'</lit:literal><op:operator pos:line="822" pos:column="51">)</op:operator> <op:operator pos:line="822" pos:column="53">||</op:operator> <op:operator pos:line="822" pos:column="56">(</op:operator><name pos:line="822" pos:column="57">ch</name> <op:operator pos:line="822" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="822" pos:column="63">'\n'</lit:literal><op:operator pos:line="822" pos:column="67">)</op:operator><op:operator pos:line="822" pos:column="68">)</op:operator> <op:operator pos:line="822" pos:column="70">&amp;&amp;</op:operator>
			<op:operator pos:line="823" pos:column="25">(</op:operator><op:operator pos:line="823" pos:column="26">!</op:operator><name pos:line="823" pos:column="27">isMako</name> <op:operator pos:line="823" pos:column="34">||</op:operator> <op:operator pos:line="823" pos:column="37">(</op:operator><lit:literal type="number" pos:line="823" pos:column="38">0</lit:literal> <op:operator pos:line="823" pos:column="40">!=</op:operator> <call><name pos:line="823" pos:column="43">strcmp</name><argument_list pos:line="823" pos:column="49">(<argument><expr><name pos:line="823" pos:column="50">makoBlockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="823" pos:column="65">"%"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="823" pos:column="69">)</op:operator><op:operator pos:line="823" pos:column="70">)</op:operator></expr>)</condition><then pos:line="823" pos:column="72"> <block pos:line="823" pos:column="73">{
		}</block></then>

		<comment type="line" pos:line="826" pos:column="17">// generic end of script processing</comment>
		<else pos:line="827" pos:column="17">else <if pos:line="827" pos:column="22">if <condition pos:line="827" pos:column="25">(<expr><op:operator pos:line="827" pos:column="26">(</op:operator><name pos:line="827" pos:column="27">inScriptType</name> <op:operator pos:line="827" pos:column="40">==</op:operator> <name pos:line="827" pos:column="43">eNonHtmlScript</name><op:operator pos:line="827" pos:column="57">)</op:operator> <op:operator pos:line="827" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="827" pos:column="62">(</op:operator><name pos:line="827" pos:column="63">ch</name> <op:operator pos:line="827" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="827" pos:column="69">'&lt;'</lit:literal><op:operator pos:line="827" pos:column="72">)</op:operator> <op:operator pos:line="827" pos:column="74">&amp;&amp;</op:operator> <op:operator pos:line="827" pos:column="77">(</op:operator><name pos:line="827" pos:column="78">chNext</name> <op:operator pos:line="827" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="827" pos:column="88">'/'</lit:literal><op:operator pos:line="827" pos:column="91">)</op:operator></expr>)</condition><then pos:line="827" pos:column="93"> <block pos:line="827" pos:column="94">{
			<comment type="line" pos:line="828" pos:column="25">// Check if it's the end of the script tag (or any other HTML tag)</comment>
			<switch pos:line="829" pos:column="25">switch <condition pos:line="829" pos:column="32">(<expr><name pos:line="829" pos:column="33">state</name></expr>)</condition> <block pos:line="829" pos:column="40">{
				<comment type="line" pos:line="830" pos:column="33">// in these cases, you can embed HTML tags (to confirm !!!!!!!!!!!!!!!!!!!!!!)</comment>
			<case pos:line="831" pos:column="25">case <expr><name pos:line="831" pos:column="30">SCE_H_DOUBLESTRING</name></expr>:
			</case><case pos:line="832" pos:column="25">case <expr><name pos:line="832" pos:column="30">SCE_H_SINGLESTRING</name></expr>:
			</case><case pos:line="833" pos:column="25">case <expr><name pos:line="833" pos:column="30">SCE_HJ_COMMENT</name></expr>:
			</case><case pos:line="834" pos:column="25">case <expr><name pos:line="834" pos:column="30">SCE_HJ_COMMENTDOC</name></expr>:
			<comment type="line" pos:line="835" pos:column="25">//case SCE_HJ_COMMENTLINE: // removed as this is a common thing done to hide</comment>
			<comment type="line" pos:line="836" pos:column="25">// the end of script marker from some JS interpreters.</comment>
			</case><case pos:line="837" pos:column="25">case <expr><name pos:line="837" pos:column="30">SCE_HB_COMMENTLINE</name></expr>:
			</case><case pos:line="838" pos:column="25">case <expr><name pos:line="838" pos:column="30">SCE_HBA_COMMENTLINE</name></expr>:
			</case><case pos:line="839" pos:column="25">case <expr><name pos:line="839" pos:column="30">SCE_HJ_DOUBLESTRING</name></expr>:
			</case><case pos:line="840" pos:column="25">case <expr><name pos:line="840" pos:column="30">SCE_HJ_SINGLESTRING</name></expr>:
			</case><case pos:line="841" pos:column="25">case <expr><name pos:line="841" pos:column="30">SCE_HJ_REGEX</name></expr>:
			</case><case pos:line="842" pos:column="25">case <expr><name pos:line="842" pos:column="30">SCE_HB_STRING</name></expr>:
			</case><case pos:line="843" pos:column="25">case <expr><name pos:line="843" pos:column="30">SCE_HBA_STRING</name></expr>:
			</case><case pos:line="844" pos:column="25">case <expr><name pos:line="844" pos:column="30">SCE_HP_STRING</name></expr>:
			</case><case pos:line="845" pos:column="25">case <expr><name pos:line="845" pos:column="30">SCE_HP_TRIPLE</name></expr>:
			</case><case pos:line="846" pos:column="25">case <expr><name pos:line="846" pos:column="30">SCE_HP_TRIPLEDOUBLE</name></expr>:
			</case><case pos:line="847" pos:column="25">case <expr><name pos:line="847" pos:column="30">SCE_HPHP_HSTRING</name></expr>:
			</case><case pos:line="848" pos:column="25">case <expr><name pos:line="848" pos:column="30">SCE_HPHP_SIMPLESTRING</name></expr>:
			</case><case pos:line="849" pos:column="25">case <expr><name pos:line="849" pos:column="30">SCE_HPHP_COMMENT</name></expr>:
			</case><case pos:line="850" pos:column="25">case <expr><name pos:line="850" pos:column="30">SCE_HPHP_COMMENTLINE</name></expr>:
				<break pos:line="851" pos:column="33">break;</break>
			</case><default pos:line="852" pos:column="25">default :
				<comment type="line" pos:line="853" pos:column="33">// check if the closing tag is a script tag</comment>
				<if pos:line="854" pos:column="33">if <condition pos:line="854" pos:column="36">(<decl><type><specifier pos:line="854" pos:column="37">const</specifier> <name pos:line="854" pos:column="43">char</name> <type:modifier pos:line="854" pos:column="48">*</type:modifier></type><name pos:line="854" pos:column="49">tag</name> <init pos:line="854" pos:column="53">=
						<expr><name pos:line="855" pos:column="49">state</name> <op:operator pos:line="855" pos:column="55">==</op:operator> <name pos:line="855" pos:column="58">SCE_HJ_COMMENTLINE</name> <op:operator pos:line="855" pos:column="77">||</op:operator> <name pos:line="855" pos:column="80">isXml</name> <op:operator pos:line="855" pos:column="86">?</op:operator> <lit:literal type="string" pos:line="855" pos:column="88">"script"</lit:literal> <op:operator pos:line="855" pos:column="97">:</op:operator>
						<name pos:line="856" pos:column="49">state</name> <op:operator pos:line="856" pos:column="55">==</op:operator> <name pos:line="856" pos:column="58">SCE_H_COMMENT</name> <op:operator pos:line="856" pos:column="72">?</op:operator> <lit:literal type="string" pos:line="856" pos:column="74">"comment"</lit:literal> <op:operator pos:line="856" pos:column="84">:</op:operator> <lit:literal type="number" pos:line="856" pos:column="86">0</lit:literal></expr></init></decl>)</condition><then pos:line="856" pos:column="88"> <block pos:line="856" pos:column="89">{
					<decl_stmt><decl><type><name pos:line="857" pos:column="41">int</name></type> <name pos:line="857" pos:column="45">j</name> <init pos:line="857" pos:column="47">= <expr><name pos:line="857" pos:column="49">i</name> <op:operator pos:line="857" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="857" pos:column="53">2</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="858" pos:column="41">int</name></type> <name pos:line="858" pos:column="45">chr</name></decl>;</decl_stmt>
					<do pos:line="859" pos:column="41">do <block pos:line="859" pos:column="44">{
						<expr_stmt><expr><name pos:line="860" pos:column="49">chr</name> <op:operator pos:line="860" pos:column="53">=</op:operator> <call><name><name pos:line="860" pos:column="55">static_cast</name><argument_list pos:line="860" pos:column="66">&lt;<argument><expr><name pos:line="860" pos:column="67">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="860" pos:column="71">(<argument><expr><op:operator pos:line="860" pos:column="72">*</op:operator><name pos:line="860" pos:column="73">tag</name><op:operator pos:line="860" pos:column="76">++</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block> while <condition pos:line="861" pos:column="49">(<expr><name pos:line="861" pos:column="50">chr</name> <op:operator pos:line="861" pos:column="54">!=</op:operator> <lit:literal type="number" pos:line="861" pos:column="57">0</lit:literal> <op:operator pos:line="861" pos:column="59">&amp;&amp;</op:operator> <name pos:line="861" pos:column="62">chr</name> <op:operator pos:line="861" pos:column="66">==</op:operator> <call><name pos:line="861" pos:column="69">MakeLowerCase</name><argument_list pos:line="861" pos:column="82">(<argument><expr><call><name><name pos:line="861" pos:column="83">styler</name><op:operator pos:line="861" pos:column="89">.</op:operator><name pos:line="861" pos:column="90">SafeGetCharAt</name></name><argument_list pos:line="861" pos:column="103">(<argument><expr><name pos:line="861" pos:column="104">j</name><op:operator pos:line="861" pos:column="105">++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
					<if pos:line="862" pos:column="41">if <condition pos:line="862" pos:column="44">(<expr><name pos:line="862" pos:column="45">chr</name> <op:operator pos:line="862" pos:column="49">!=</op:operator> <lit:literal type="number" pos:line="862" pos:column="52">0</lit:literal></expr>)</condition><then pos:line="862" pos:column="54"> <break pos:line="862" pos:column="55">break;</break></then></if>
				}</block></then></if>
				<comment type="line" pos:line="864" pos:column="33">// closing tag of the script (it's a closing HTML tag anyway)</comment>
				<expr_stmt><expr><call><name><name pos:line="865" pos:column="33">styler</name><op:operator pos:line="865" pos:column="39">.</op:operator><name pos:line="865" pos:column="40">ColourTo</name></name><argument_list pos:line="865" pos:column="48">(<argument><expr><name pos:line="865" pos:column="49">i</name> <op:operator pos:line="865" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="865" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="865" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="866" pos:column="33">state</name> <op:operator pos:line="866" pos:column="39">=</op:operator> <name pos:line="866" pos:column="41">SCE_H_TAGUNKNOWN</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="867" pos:column="33">inScriptType</name> <op:operator pos:line="867" pos:column="46">=</op:operator> <name pos:line="867" pos:column="48">eHtml</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="868" pos:column="33">scriptLanguage</name> <op:operator pos:line="868" pos:column="48">=</op:operator> <name pos:line="868" pos:column="50">eScriptNone</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="869" pos:column="33">clientScript</name> <op:operator pos:line="869" pos:column="46">=</op:operator> <name pos:line="869" pos:column="48">eScriptJS</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="870" pos:column="33">i</name> <op:operator pos:line="870" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="870" pos:column="38">2</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="871" pos:column="33">visibleChars</name> <op:operator pos:line="871" pos:column="46">+=</op:operator> <lit:literal type="number" pos:line="871" pos:column="49">2</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="872" pos:column="33">tagClosing</name> <op:operator pos:line="872" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="872" pos:column="46">true</lit:literal></expr>;</expr_stmt>
				<continue pos:line="873" pos:column="33">continue;</continue>
			</default>}</block></switch>
		}</block></then>

		<comment type="line" format="doxygen" pos:line="877" pos:column="17">/////////////////////////////////////</comment>
		<comment type="line" pos:line="878" pos:column="17">// handle the start of PHP pre-processor = Non-HTML</comment>
		<else pos:line="879" pos:column="17">else <if pos:line="879" pos:column="22">if <condition pos:line="879" pos:column="25">(<expr><op:operator pos:line="879" pos:column="26">(</op:operator><name pos:line="879" pos:column="27">state</name> <op:operator pos:line="879" pos:column="33">!=</op:operator> <name pos:line="879" pos:column="36">SCE_H_ASPAT</name><op:operator pos:line="879" pos:column="47">)</op:operator> <op:operator pos:line="879" pos:column="49">&amp;&amp;</op:operator>
		         <op:operator pos:line="880" pos:column="26">!</op:operator><call><name pos:line="880" pos:column="27">isPHPStringState</name><argument_list pos:line="880" pos:column="43">(<argument><expr><name pos:line="880" pos:column="44">state</name></expr></argument>)</argument_list></call> <op:operator pos:line="880" pos:column="51">&amp;&amp;</op:operator>
		         <op:operator pos:line="881" pos:column="26">(</op:operator><name pos:line="881" pos:column="27">state</name> <op:operator pos:line="881" pos:column="33">!=</op:operator> <name pos:line="881" pos:column="36">SCE_HPHP_COMMENT</name><op:operator pos:line="881" pos:column="52">)</op:operator> <op:operator pos:line="881" pos:column="54">&amp;&amp;</op:operator>
		         <op:operator pos:line="882" pos:column="26">(</op:operator><name pos:line="882" pos:column="27">state</name> <op:operator pos:line="882" pos:column="33">!=</op:operator> <name pos:line="882" pos:column="36">SCE_HPHP_COMMENTLINE</name><op:operator pos:line="882" pos:column="56">)</op:operator> <op:operator pos:line="882" pos:column="58">&amp;&amp;</op:operator>
		         <op:operator pos:line="883" pos:column="26">(</op:operator><name pos:line="883" pos:column="27">ch</name> <op:operator pos:line="883" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="883" pos:column="33">'&lt;'</lit:literal><op:operator pos:line="883" pos:column="36">)</op:operator> <op:operator pos:line="883" pos:column="38">&amp;&amp;</op:operator>
		         <op:operator pos:line="884" pos:column="26">(</op:operator><name pos:line="884" pos:column="27">chNext</name> <op:operator pos:line="884" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="884" pos:column="37">'?'</lit:literal><op:operator pos:line="884" pos:column="40">)</op:operator> <op:operator pos:line="884" pos:column="42">&amp;&amp;</op:operator>
				 <op:operator pos:line="885" pos:column="34">!</op:operator><call><name pos:line="885" pos:column="35">IsScriptCommentState</name><argument_list pos:line="885" pos:column="55">(<argument><expr><name pos:line="885" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="885" pos:column="63"> <block pos:line="885" pos:column="64">{
 			<expr_stmt><expr><name pos:line="886" pos:column="25">beforeLanguage</name> <op:operator pos:line="886" pos:column="40">=</op:operator> <name pos:line="886" pos:column="42">scriptLanguage</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="887" pos:column="25">scriptLanguage</name> <op:operator pos:line="887" pos:column="40">=</op:operator> <call><name pos:line="887" pos:column="42">segIsScriptingIndicator</name><argument_list pos:line="887" pos:column="65">(<argument><expr><name pos:line="887" pos:column="66">styler</name></expr></argument>, <argument><expr><name pos:line="887" pos:column="74">i</name> <op:operator pos:line="887" pos:column="76">+</op:operator> <lit:literal type="number" pos:line="887" pos:column="78">2</lit:literal></expr></argument>, <argument><expr><name pos:line="887" pos:column="81">i</name> <op:operator pos:line="887" pos:column="83">+</op:operator> <lit:literal type="number" pos:line="887" pos:column="85">6</lit:literal></expr></argument>, <argument><expr><name pos:line="887" pos:column="88">isXml</name> <op:operator pos:line="887" pos:column="94">?</op:operator> <name pos:line="887" pos:column="96">eScriptXML</name> <op:operator pos:line="887" pos:column="107">:</op:operator> <name pos:line="887" pos:column="109">eScriptPHP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="888" pos:column="25">if <condition pos:line="888" pos:column="28">(<expr><name pos:line="888" pos:column="29">scriptLanguage</name> <op:operator pos:line="888" pos:column="44">!=</op:operator> <name pos:line="888" pos:column="47">eScriptPHP</name> <op:operator pos:line="888" pos:column="58">&amp;&amp;</op:operator> <call><name pos:line="888" pos:column="61">isStringState</name><argument_list pos:line="888" pos:column="74">(<argument><expr><name pos:line="888" pos:column="75">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="888" pos:column="82"> <continue pos:line="888" pos:column="83">continue;</continue></then></if>
			<expr_stmt><expr><call><name><name pos:line="889" pos:column="25">styler</name><op:operator pos:line="889" pos:column="31">.</op:operator><name pos:line="889" pos:column="32">ColourTo</name></name><argument_list pos:line="889" pos:column="40">(<argument><expr><name pos:line="889" pos:column="41">i</name> <op:operator pos:line="889" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="889" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="889" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="890" pos:column="25">beforePreProc</name> <op:operator pos:line="890" pos:column="39">=</op:operator> <name pos:line="890" pos:column="41">state</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="891" pos:column="25">i</name><op:operator pos:line="891" pos:column="26">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="892" pos:column="25">visibleChars</name><op:operator pos:line="892" pos:column="37">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="893" pos:column="25">i</name> <op:operator pos:line="893" pos:column="27">+=</op:operator> <call><name pos:line="893" pos:column="30">PrintScriptingIndicatorOffset</name><argument_list pos:line="893" pos:column="59">(<argument><expr><name pos:line="893" pos:column="60">styler</name></expr></argument>, <argument><expr><call><name><name pos:line="893" pos:column="68">styler</name><op:operator pos:line="893" pos:column="74">.</op:operator><name pos:line="893" pos:column="75">GetStartSegment</name></name><argument_list pos:line="893" pos:column="90">()</argument_list></call> <op:operator pos:line="893" pos:column="93">+</op:operator> <lit:literal type="number" pos:line="893" pos:column="95">2</lit:literal></expr></argument>, <argument><expr><name pos:line="893" pos:column="98">i</name> <op:operator pos:line="893" pos:column="100">+</op:operator> <lit:literal type="number" pos:line="893" pos:column="102">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="894" pos:column="25">if <condition pos:line="894" pos:column="28">(<expr><name pos:line="894" pos:column="29">scriptLanguage</name> <op:operator pos:line="894" pos:column="44">==</op:operator> <name pos:line="894" pos:column="47">eScriptXML</name></expr>)</condition><then pos:line="894" pos:column="58">
				<expr_stmt><expr><call><name><name pos:line="895" pos:column="33">styler</name><op:operator pos:line="895" pos:column="39">.</op:operator><name pos:line="895" pos:column="40">ColourTo</name></name><argument_list pos:line="895" pos:column="48">(<argument><expr><name pos:line="895" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="895" pos:column="52">SCE_H_XMLSTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="896" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="897" pos:column="33">styler</name><op:operator pos:line="897" pos:column="39">.</op:operator><name pos:line="897" pos:column="40">ColourTo</name></name><argument_list pos:line="897" pos:column="48">(<argument><expr><name pos:line="897" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="897" pos:column="52">SCE_H_QUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><name pos:line="898" pos:column="25">state</name> <op:operator pos:line="898" pos:column="31">=</op:operator> <call><name pos:line="898" pos:column="33">StateForScript</name><argument_list pos:line="898" pos:column="47">(<argument><expr><name pos:line="898" pos:column="48">scriptLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="899" pos:column="25">if <condition pos:line="899" pos:column="28">(<expr><name pos:line="899" pos:column="29">inScriptType</name> <op:operator pos:line="899" pos:column="42">==</op:operator> <name pos:line="899" pos:column="45">eNonHtmlScript</name></expr>)</condition><then pos:line="899" pos:column="60">
				<expr_stmt><expr><name pos:line="900" pos:column="33">inScriptType</name> <op:operator pos:line="900" pos:column="46">=</op:operator> <name pos:line="900" pos:column="48">eNonHtmlScriptPreProc</name></expr>;</expr_stmt></then>
			<else pos:line="901" pos:column="25">else
				<expr_stmt><expr><name pos:line="902" pos:column="33">inScriptType</name> <op:operator pos:line="902" pos:column="46">=</op:operator> <name pos:line="902" pos:column="48">eNonHtmlPreProc</name></expr>;</expr_stmt></else></if>
			<comment type="line" pos:line="903" pos:column="25">// Fold whole script, but not if the XML first tag (all XML-like tags in this case)</comment>
			<if pos:line="904" pos:column="25">if <condition pos:line="904" pos:column="28">(<expr><name pos:line="904" pos:column="29">foldHTMLPreprocessor</name> <op:operator pos:line="904" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="904" pos:column="53">(</op:operator><name pos:line="904" pos:column="54">scriptLanguage</name> <op:operator pos:line="904" pos:column="69">!=</op:operator> <name pos:line="904" pos:column="72">eScriptXML</name><op:operator pos:line="904" pos:column="82">)</op:operator></expr>)</condition><then pos:line="904" pos:column="84"> <block pos:line="904" pos:column="85">{
				<expr_stmt><expr><name pos:line="905" pos:column="33">levelCurrent</name><op:operator pos:line="905" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="907" pos:column="25">// should be better</comment>
			<expr_stmt><expr><name pos:line="908" pos:column="25">ch</name> <op:operator pos:line="908" pos:column="28">=</op:operator> <call><name><name pos:line="908" pos:column="30">static_cast</name><argument_list pos:line="908" pos:column="41">&lt;<argument><expr><name pos:line="908" pos:column="42">unsigned</name> <name pos:line="908" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="908" pos:column="56">(<argument><expr><call><name><name pos:line="908" pos:column="57">styler</name><op:operator pos:line="908" pos:column="63">.</op:operator><name pos:line="908" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="908" pos:column="77">(<argument><expr><name pos:line="908" pos:column="78">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue pos:line="909" pos:column="25">continue;</continue>
		}</block></then>

		<comment type="line" pos:line="912" pos:column="17">// handle the start Mako template Python code</comment>
		<else pos:line="913" pos:column="17">else <if pos:line="913" pos:column="22">if <condition pos:line="913" pos:column="25">(<expr><name pos:line="913" pos:column="26">isMako</name> <op:operator pos:line="913" pos:column="33">&amp;&amp;</op:operator> <name pos:line="913" pos:column="36">scriptLanguage</name> <op:operator pos:line="913" pos:column="51">==</op:operator> <name pos:line="913" pos:column="54">eScriptNone</name> <op:operator pos:line="913" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="913" pos:column="69">(</op:operator><op:operator pos:line="913" pos:column="70">(</op:operator><name pos:line="913" pos:column="71">ch</name> <op:operator pos:line="913" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="913" pos:column="77">'&lt;'</lit:literal> <op:operator pos:line="913" pos:column="81">&amp;&amp;</op:operator> <name pos:line="913" pos:column="84">chNext</name> <op:operator pos:line="913" pos:column="91">==</op:operator> <lit:literal type="char" pos:line="913" pos:column="94">'%'</lit:literal><op:operator pos:line="913" pos:column="97">)</op:operator> <op:operator pos:line="913" pos:column="99">||</op:operator>
															 <op:operator pos:line="914" pos:column="122">(</op:operator><name pos:line="914" pos:column="123">lineStartVisibleChars</name> <op:operator pos:line="914" pos:column="145">==</op:operator> <lit:literal type="number" pos:line="914" pos:column="148">1</lit:literal> <op:operator pos:line="914" pos:column="150">&amp;&amp;</op:operator> <name pos:line="914" pos:column="153">ch</name> <op:operator pos:line="914" pos:column="156">==</op:operator> <lit:literal type="char" pos:line="914" pos:column="159">'%'</lit:literal><op:operator pos:line="914" pos:column="162">)</op:operator> <op:operator pos:line="914" pos:column="164">||</op:operator>
															 <op:operator pos:line="915" pos:column="122">(</op:operator><name pos:line="915" pos:column="123">ch</name> <op:operator pos:line="915" pos:column="126">==</op:operator> <lit:literal type="char" pos:line="915" pos:column="129">'$'</lit:literal> <op:operator pos:line="915" pos:column="133">&amp;&amp;</op:operator> <name pos:line="915" pos:column="136">chNext</name> <op:operator pos:line="915" pos:column="143">==</op:operator> <lit:literal type="char" pos:line="915" pos:column="146">'{'</lit:literal><op:operator pos:line="915" pos:column="149">)</op:operator> <op:operator pos:line="915" pos:column="151">||</op:operator>
															 <op:operator pos:line="916" pos:column="122">(</op:operator><name pos:line="916" pos:column="123">ch</name> <op:operator pos:line="916" pos:column="126">==</op:operator> <lit:literal type="char" pos:line="916" pos:column="129">'&lt;'</lit:literal> <op:operator pos:line="916" pos:column="133">&amp;&amp;</op:operator> <name pos:line="916" pos:column="136">chNext</name> <op:operator pos:line="916" pos:column="143">==</op:operator> <lit:literal type="char" pos:line="916" pos:column="146">'/'</lit:literal> <op:operator pos:line="916" pos:column="150">&amp;&amp;</op:operator> <name pos:line="916" pos:column="153">chNext2</name> <op:operator pos:line="916" pos:column="161">==</op:operator> <lit:literal type="char" pos:line="916" pos:column="164">'%'</lit:literal><op:operator pos:line="916" pos:column="167">)</op:operator><op:operator pos:line="916" pos:column="168">)</op:operator></expr>)</condition><then pos:line="916" pos:column="170"> <block pos:line="916" pos:column="171">{
			<if pos:line="917" pos:column="25">if <condition pos:line="917" pos:column="28">(<expr><name pos:line="917" pos:column="29">ch</name> <op:operator pos:line="917" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="917" pos:column="35">'%'</lit:literal></expr>)</condition><then pos:line="917" pos:column="39">
				<expr_stmt><expr><call><name pos:line="918" pos:column="33">strcpy</name><argument_list pos:line="918" pos:column="39">(<argument><expr><name pos:line="918" pos:column="40">makoBlockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="918" pos:column="55">"%"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="919" pos:column="25">else <if pos:line="919" pos:column="30">if <condition pos:line="919" pos:column="33">(<expr><name pos:line="919" pos:column="34">ch</name> <op:operator pos:line="919" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="919" pos:column="40">'$'</lit:literal></expr>)</condition><then pos:line="919" pos:column="44">
				<expr_stmt><expr><call><name pos:line="920" pos:column="33">strcpy</name><argument_list pos:line="920" pos:column="39">(<argument><expr><name pos:line="920" pos:column="40">makoBlockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="920" pos:column="55">"{"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="921" pos:column="25">else <if pos:line="921" pos:column="30">if <condition pos:line="921" pos:column="33">(<expr><name pos:line="921" pos:column="34">chNext</name> <op:operator pos:line="921" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="921" pos:column="44">'/'</lit:literal></expr>)</condition><then pos:line="921" pos:column="48">
				<expr_stmt><expr><call><name pos:line="922" pos:column="33">GetNextWord</name><argument_list pos:line="922" pos:column="44">(<argument><expr><name pos:line="922" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="922" pos:column="53">i</name><op:operator pos:line="922" pos:column="54">+</op:operator><lit:literal type="number" pos:line="922" pos:column="55">3</lit:literal></expr></argument>, <argument><expr><name pos:line="922" pos:column="58">makoBlockType</name></expr></argument>, <argument><expr><sizeof pos:line="922" pos:column="73">sizeof<argument_list pos:line="922" pos:column="79">(<argument><expr><name pos:line="922" pos:column="80">makoBlockType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="923" pos:column="25">else
				<expr_stmt><expr><call><name pos:line="924" pos:column="33">GetNextWord</name><argument_list pos:line="924" pos:column="44">(<argument><expr><name pos:line="924" pos:column="45">styler</name></expr></argument>, <argument><expr><name pos:line="924" pos:column="53">i</name><op:operator pos:line="924" pos:column="54">+</op:operator><lit:literal type="number" pos:line="924" pos:column="55">2</lit:literal></expr></argument>, <argument><expr><name pos:line="924" pos:column="58">makoBlockType</name></expr></argument>, <argument><expr><sizeof pos:line="924" pos:column="73">sizeof<argument_list pos:line="924" pos:column="79">(<argument><expr><name pos:line="924" pos:column="80">makoBlockType</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>
			<expr_stmt><expr><call><name><name pos:line="925" pos:column="25">styler</name><op:operator pos:line="925" pos:column="31">.</op:operator><name pos:line="925" pos:column="32">ColourTo</name></name><argument_list pos:line="925" pos:column="40">(<argument><expr><name pos:line="925" pos:column="41">i</name> <op:operator pos:line="925" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="925" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="925" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="926" pos:column="25">beforePreProc</name> <op:operator pos:line="926" pos:column="39">=</op:operator> <name pos:line="926" pos:column="41">state</name></expr>;</expr_stmt>
			<if pos:line="927" pos:column="25">if <condition pos:line="927" pos:column="28">(<expr><name pos:line="927" pos:column="29">inScriptType</name> <op:operator pos:line="927" pos:column="42">==</op:operator> <name pos:line="927" pos:column="45">eNonHtmlScript</name></expr>)</condition><then pos:line="927" pos:column="60">
				<expr_stmt><expr><name pos:line="928" pos:column="33">inScriptType</name> <op:operator pos:line="928" pos:column="46">=</op:operator> <name pos:line="928" pos:column="48">eNonHtmlScriptPreProc</name></expr>;</expr_stmt></then>
			<else pos:line="929" pos:column="25">else
				<expr_stmt><expr><name pos:line="930" pos:column="33">inScriptType</name> <op:operator pos:line="930" pos:column="46">=</op:operator> <name pos:line="930" pos:column="48">eNonHtmlPreProc</name></expr>;</expr_stmt></else></if>

			<if pos:line="932" pos:column="25">if <condition pos:line="932" pos:column="28">(<expr><name pos:line="932" pos:column="29">chNext</name> <op:operator pos:line="932" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="932" pos:column="39">'/'</lit:literal></expr>)</condition><then pos:line="932" pos:column="43"> <block pos:line="932" pos:column="44">{
				<expr_stmt><expr><name pos:line="933" pos:column="33">i</name> <op:operator pos:line="933" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="933" pos:column="38">2</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="934" pos:column="33">visibleChars</name> <op:operator pos:line="934" pos:column="46">+=</op:operator> <lit:literal type="number" pos:line="934" pos:column="49">2</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="935" pos:column="27">else <if pos:line="935" pos:column="32">if <condition pos:line="935" pos:column="35">(<expr><name pos:line="935" pos:column="36">ch</name> <op:operator pos:line="935" pos:column="39">!=</op:operator> <lit:literal type="char" pos:line="935" pos:column="42">'%'</lit:literal></expr>)</condition><then pos:line="935" pos:column="46"> <block pos:line="935" pos:column="47">{
				<expr_stmt><expr><name pos:line="936" pos:column="33">i</name><op:operator pos:line="936" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="937" pos:column="33">visibleChars</name><op:operator pos:line="937" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<expr_stmt><expr><name pos:line="939" pos:column="25">state</name> <op:operator pos:line="939" pos:column="31">=</op:operator> <name pos:line="939" pos:column="33">SCE_HP_START</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="940" pos:column="25">scriptLanguage</name> <op:operator pos:line="940" pos:column="40">=</op:operator> <name pos:line="940" pos:column="42">eScriptPython</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="941" pos:column="25">styler</name><op:operator pos:line="941" pos:column="31">.</op:operator><name pos:line="941" pos:column="32">ColourTo</name></name><argument_list pos:line="941" pos:column="40">(<argument><expr><name pos:line="941" pos:column="41">i</name></expr></argument>, <argument><expr><name pos:line="941" pos:column="44">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="942" pos:column="25">if <condition pos:line="942" pos:column="28">(<expr><name pos:line="942" pos:column="29">foldHTMLPreprocessor</name> <op:operator pos:line="942" pos:column="50">&amp;&amp;</op:operator> <name pos:line="942" pos:column="53">ch</name> <op:operator pos:line="942" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="942" pos:column="59">'&lt;'</lit:literal></expr>)</condition><then pos:line="942" pos:column="63">
				<expr_stmt><expr><name pos:line="943" pos:column="33">levelCurrent</name><op:operator pos:line="943" pos:column="45">++</op:operator></expr>;</expr_stmt></then></if>

			<if pos:line="945" pos:column="25">if <condition pos:line="945" pos:column="28">(<expr><name pos:line="945" pos:column="29">ch</name> <op:operator pos:line="945" pos:column="32">!=</op:operator> <lit:literal type="char" pos:line="945" pos:column="35">'%'</lit:literal> <op:operator pos:line="945" pos:column="39">&amp;&amp;</op:operator> <name pos:line="945" pos:column="42">ch</name> <op:operator pos:line="945" pos:column="45">!=</op:operator> <lit:literal type="char" pos:line="945" pos:column="48">'$'</lit:literal></expr>)</condition><then pos:line="945" pos:column="52"> <block pos:line="945" pos:column="53">{
				<expr_stmt><expr><name pos:line="946" pos:column="33">i</name> <op:operator pos:line="946" pos:column="35">+=</op:operator> <call><name pos:line="946" pos:column="38">strlen</name><argument_list pos:line="946" pos:column="44">(<argument><expr><name pos:line="946" pos:column="45">makoBlockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="947" pos:column="33">visibleChars</name> <op:operator pos:line="947" pos:column="46">+=</op:operator> <call><name pos:line="947" pos:column="49">strlen</name><argument_list pos:line="947" pos:column="55">(<argument><expr><name pos:line="947" pos:column="56">makoBlockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="948" pos:column="33">if <condition pos:line="948" pos:column="36">(<expr><call><name><name pos:line="948" pos:column="37">keywords4</name><op:operator pos:line="948" pos:column="46">.</op:operator><name pos:line="948" pos:column="47">InList</name></name><argument_list pos:line="948" pos:column="53">(<argument><expr><name pos:line="948" pos:column="54">makoBlockType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="948" pos:column="69">
					<expr_stmt><expr><call><name><name pos:line="949" pos:column="41">styler</name><op:operator pos:line="949" pos:column="47">.</op:operator><name pos:line="949" pos:column="48">ColourTo</name></name><argument_list pos:line="949" pos:column="56">(<argument><expr><name pos:line="949" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="949" pos:column="60">SCE_HP_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="950" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="951" pos:column="41">styler</name><op:operator pos:line="951" pos:column="47">.</op:operator><name pos:line="951" pos:column="48">ColourTo</name></name><argument_list pos:line="951" pos:column="56">(<argument><expr><name pos:line="951" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="951" pos:column="60">SCE_H_TAGUNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="954" pos:column="25">ch</name> <op:operator pos:line="954" pos:column="28">=</op:operator> <call><name><name pos:line="954" pos:column="30">static_cast</name><argument_list pos:line="954" pos:column="41">&lt;<argument><expr><name pos:line="954" pos:column="42">unsigned</name> <name pos:line="954" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="954" pos:column="56">(<argument><expr><call><name><name pos:line="954" pos:column="57">styler</name><op:operator pos:line="954" pos:column="63">.</op:operator><name pos:line="954" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="954" pos:column="77">(<argument><expr><name pos:line="954" pos:column="78">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue pos:line="955" pos:column="25">continue;</continue>
		}</block></then>

		<comment type="line" pos:line="958" pos:column="17">// handle the start/end of Django comment</comment>
		<else pos:line="959" pos:column="17">else <if pos:line="959" pos:column="22">if <condition pos:line="959" pos:column="25">(<expr><name pos:line="959" pos:column="26">isDjango</name> <op:operator pos:line="959" pos:column="35">&amp;&amp;</op:operator> <name pos:line="959" pos:column="38">state</name> <op:operator pos:line="959" pos:column="44">!=</op:operator> <name pos:line="959" pos:column="47">SCE_H_COMMENT</name> <op:operator pos:line="959" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="959" pos:column="64">(</op:operator><name pos:line="959" pos:column="65">ch</name> <op:operator pos:line="959" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="959" pos:column="71">'{'</lit:literal> <op:operator pos:line="959" pos:column="75">&amp;&amp;</op:operator> <name pos:line="959" pos:column="78">chNext</name> <op:operator pos:line="959" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="959" pos:column="88">'#'</lit:literal><op:operator pos:line="959" pos:column="91">)</op:operator></expr>)</condition><then pos:line="959" pos:column="93"> <block pos:line="959" pos:column="94">{
			<expr_stmt><expr><call><name><name pos:line="960" pos:column="25">styler</name><op:operator pos:line="960" pos:column="31">.</op:operator><name pos:line="960" pos:column="32">ColourTo</name></name><argument_list pos:line="960" pos:column="40">(<argument><expr><name pos:line="960" pos:column="41">i</name> <op:operator pos:line="960" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="960" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="960" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="961" pos:column="25">beforePreProc</name> <op:operator pos:line="961" pos:column="39">=</op:operator> <name pos:line="961" pos:column="41">state</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="962" pos:column="25">beforeLanguage</name> <op:operator pos:line="962" pos:column="40">=</op:operator> <name pos:line="962" pos:column="42">scriptLanguage</name></expr>;</expr_stmt>
			<if pos:line="963" pos:column="25">if <condition pos:line="963" pos:column="28">(<expr><name pos:line="963" pos:column="29">inScriptType</name> <op:operator pos:line="963" pos:column="42">==</op:operator> <name pos:line="963" pos:column="45">eNonHtmlScript</name></expr>)</condition><then pos:line="963" pos:column="60">
				<expr_stmt><expr><name pos:line="964" pos:column="33">inScriptType</name> <op:operator pos:line="964" pos:column="46">=</op:operator> <name pos:line="964" pos:column="48">eNonHtmlScriptPreProc</name></expr>;</expr_stmt></then>
			<else pos:line="965" pos:column="25">else
				<expr_stmt><expr><name pos:line="966" pos:column="33">inScriptType</name> <op:operator pos:line="966" pos:column="46">=</op:operator> <name pos:line="966" pos:column="48">eNonHtmlPreProc</name></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><name pos:line="967" pos:column="25">i</name> <op:operator pos:line="967" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="967" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="968" pos:column="25">visibleChars</name> <op:operator pos:line="968" pos:column="38">+=</op:operator> <lit:literal type="number" pos:line="968" pos:column="41">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="969" pos:column="25">scriptLanguage</name> <op:operator pos:line="969" pos:column="40">=</op:operator> <name pos:line="969" pos:column="42">eScriptComment</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="970" pos:column="25">state</name> <op:operator pos:line="970" pos:column="31">=</op:operator> <name pos:line="970" pos:column="33">SCE_H_COMMENT</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="971" pos:column="25">styler</name><op:operator pos:line="971" pos:column="31">.</op:operator><name pos:line="971" pos:column="32">ColourTo</name></name><argument_list pos:line="971" pos:column="40">(<argument><expr><name pos:line="971" pos:column="41">i</name></expr></argument>, <argument><expr><name pos:line="971" pos:column="44">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="972" pos:column="25">ch</name> <op:operator pos:line="972" pos:column="28">=</op:operator> <call><name><name pos:line="972" pos:column="30">static_cast</name><argument_list pos:line="972" pos:column="41">&lt;<argument><expr><name pos:line="972" pos:column="42">unsigned</name> <name pos:line="972" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="972" pos:column="56">(<argument><expr><call><name><name pos:line="972" pos:column="57">styler</name><op:operator pos:line="972" pos:column="63">.</op:operator><name pos:line="972" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="972" pos:column="77">(<argument><expr><name pos:line="972" pos:column="78">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue pos:line="973" pos:column="25">continue;</continue>
		}</block></then> <else pos:line="974" pos:column="19">else <if pos:line="974" pos:column="24">if <condition pos:line="974" pos:column="27">(<expr><name pos:line="974" pos:column="28">isDjango</name> <op:operator pos:line="974" pos:column="37">&amp;&amp;</op:operator> <name pos:line="974" pos:column="40">state</name> <op:operator pos:line="974" pos:column="46">==</op:operator> <name pos:line="974" pos:column="49">SCE_H_COMMENT</name> <op:operator pos:line="974" pos:column="63">&amp;&amp;</op:operator> <op:operator pos:line="974" pos:column="66">(</op:operator><name pos:line="974" pos:column="67">ch</name> <op:operator pos:line="974" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="974" pos:column="73">'#'</lit:literal> <op:operator pos:line="974" pos:column="77">&amp;&amp;</op:operator> <name pos:line="974" pos:column="80">chNext</name> <op:operator pos:line="974" pos:column="87">==</op:operator> <lit:literal type="char" pos:line="974" pos:column="90">'}'</lit:literal><op:operator pos:line="974" pos:column="93">)</op:operator></expr>)</condition><then pos:line="974" pos:column="95"> <block pos:line="974" pos:column="96">{
			<expr_stmt><expr><call><name><name pos:line="975" pos:column="25">styler</name><op:operator pos:line="975" pos:column="31">.</op:operator><name pos:line="975" pos:column="32">ColourTo</name></name><argument_list pos:line="975" pos:column="40">(<argument><expr><name pos:line="975" pos:column="41">i</name> <op:operator pos:line="975" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="975" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="975" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="976" pos:column="25">i</name> <op:operator pos:line="976" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="976" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="977" pos:column="25">visibleChars</name> <op:operator pos:line="977" pos:column="38">+=</op:operator> <lit:literal type="number" pos:line="977" pos:column="41">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="978" pos:column="25">styler</name><op:operator pos:line="978" pos:column="31">.</op:operator><name pos:line="978" pos:column="32">ColourTo</name></name><argument_list pos:line="978" pos:column="40">(<argument><expr><name pos:line="978" pos:column="41">i</name></expr></argument>, <argument><expr><name pos:line="978" pos:column="44">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="979" pos:column="25">state</name> <op:operator pos:line="979" pos:column="31">=</op:operator> <name pos:line="979" pos:column="33">beforePreProc</name></expr>;</expr_stmt>
			<if pos:line="980" pos:column="25">if <condition pos:line="980" pos:column="28">(<expr><name pos:line="980" pos:column="29">inScriptType</name> <op:operator pos:line="980" pos:column="42">==</op:operator> <name pos:line="980" pos:column="45">eNonHtmlScriptPreProc</name></expr>)</condition><then pos:line="980" pos:column="67">
				<expr_stmt><expr><name pos:line="981" pos:column="33">inScriptType</name> <op:operator pos:line="981" pos:column="46">=</op:operator> <name pos:line="981" pos:column="48">eNonHtmlScript</name></expr>;</expr_stmt></then>
			<else pos:line="982" pos:column="25">else
				<expr_stmt><expr><name pos:line="983" pos:column="33">inScriptType</name> <op:operator pos:line="983" pos:column="46">=</op:operator> <name pos:line="983" pos:column="48">eHtml</name></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><name pos:line="984" pos:column="25">scriptLanguage</name> <op:operator pos:line="984" pos:column="40">=</op:operator> <name pos:line="984" pos:column="42">beforeLanguage</name></expr>;</expr_stmt>
			<continue pos:line="985" pos:column="25">continue;</continue>
		}</block></then>

		<comment type="line" pos:line="988" pos:column="17">// handle the start Django template code</comment>
		<else pos:line="989" pos:column="17">else <if pos:line="989" pos:column="22">if <condition pos:line="989" pos:column="25">(<expr><name pos:line="989" pos:column="26">isDjango</name> <op:operator pos:line="989" pos:column="35">&amp;&amp;</op:operator> <name pos:line="989" pos:column="38">scriptLanguage</name> <op:operator pos:line="989" pos:column="53">!=</op:operator> <name pos:line="989" pos:column="56">eScriptPython</name> <op:operator pos:line="989" pos:column="70">&amp;&amp;</op:operator> <op:operator pos:line="989" pos:column="73">(</op:operator><name pos:line="989" pos:column="74">ch</name> <op:operator pos:line="989" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="989" pos:column="80">'{'</lit:literal> <op:operator pos:line="989" pos:column="84">&amp;&amp;</op:operator> <op:operator pos:line="989" pos:column="87">(</op:operator><name pos:line="989" pos:column="88">chNext</name> <op:operator pos:line="989" pos:column="95">==</op:operator> <lit:literal type="char" pos:line="989" pos:column="98">'%'</lit:literal> <op:operator pos:line="989" pos:column="102">||</op:operator>  <name pos:line="989" pos:column="106">chNext</name> <op:operator pos:line="989" pos:column="113">==</op:operator> <lit:literal type="char" pos:line="989" pos:column="116">'{'</lit:literal><op:operator pos:line="989" pos:column="119">)</op:operator><op:operator pos:line="989" pos:column="120">)</op:operator></expr>)</condition><then pos:line="989" pos:column="122"> <block pos:line="989" pos:column="123">{
			<if pos:line="990" pos:column="25">if <condition pos:line="990" pos:column="28">(<expr><name pos:line="990" pos:column="29">chNext</name> <op:operator pos:line="990" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="990" pos:column="39">'%'</lit:literal></expr>)</condition><then pos:line="990" pos:column="43">
				<expr_stmt><expr><call><name pos:line="991" pos:column="33">strcpy</name><argument_list pos:line="991" pos:column="39">(<argument><expr><name pos:line="991" pos:column="40">djangoBlockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="991" pos:column="57">"%"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="992" pos:column="25">else
				<expr_stmt><expr><call><name pos:line="993" pos:column="33">strcpy</name><argument_list pos:line="993" pos:column="39">(<argument><expr><name pos:line="993" pos:column="40">djangoBlockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="993" pos:column="57">"{"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name><name pos:line="994" pos:column="25">styler</name><op:operator pos:line="994" pos:column="31">.</op:operator><name pos:line="994" pos:column="32">ColourTo</name></name><argument_list pos:line="994" pos:column="40">(<argument><expr><name pos:line="994" pos:column="41">i</name> <op:operator pos:line="994" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="994" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="994" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="995" pos:column="25">beforePreProc</name> <op:operator pos:line="995" pos:column="39">=</op:operator> <name pos:line="995" pos:column="41">state</name></expr>;</expr_stmt>
			<if pos:line="996" pos:column="25">if <condition pos:line="996" pos:column="28">(<expr><name pos:line="996" pos:column="29">inScriptType</name> <op:operator pos:line="996" pos:column="42">==</op:operator> <name pos:line="996" pos:column="45">eNonHtmlScript</name></expr>)</condition><then pos:line="996" pos:column="60">
				<expr_stmt><expr><name pos:line="997" pos:column="33">inScriptType</name> <op:operator pos:line="997" pos:column="46">=</op:operator> <name pos:line="997" pos:column="48">eNonHtmlScriptPreProc</name></expr>;</expr_stmt></then>
			<else pos:line="998" pos:column="25">else
				<expr_stmt><expr><name pos:line="999" pos:column="33">inScriptType</name> <op:operator pos:line="999" pos:column="46">=</op:operator> <name pos:line="999" pos:column="48">eNonHtmlPreProc</name></expr>;</expr_stmt></else></if>

			<expr_stmt><expr><name pos:line="1001" pos:column="25">i</name> <op:operator pos:line="1001" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="1001" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1002" pos:column="25">visibleChars</name> <op:operator pos:line="1002" pos:column="38">+=</op:operator> <lit:literal type="number" pos:line="1002" pos:column="41">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1003" pos:column="25">state</name> <op:operator pos:line="1003" pos:column="31">=</op:operator> <name pos:line="1003" pos:column="33">SCE_HP_START</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1004" pos:column="25">beforeLanguage</name> <op:operator pos:line="1004" pos:column="40">=</op:operator> <name pos:line="1004" pos:column="42">scriptLanguage</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1005" pos:column="25">scriptLanguage</name> <op:operator pos:line="1005" pos:column="40">=</op:operator> <name pos:line="1005" pos:column="42">eScriptPython</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="1006" pos:column="25">styler</name><op:operator pos:line="1006" pos:column="31">.</op:operator><name pos:line="1006" pos:column="32">ColourTo</name></name><argument_list pos:line="1006" pos:column="40">(<argument><expr><name pos:line="1006" pos:column="41">i</name></expr></argument>, <argument><expr><name pos:line="1006" pos:column="44">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name pos:line="1008" pos:column="25">ch</name> <op:operator pos:line="1008" pos:column="28">=</op:operator> <call><name><name pos:line="1008" pos:column="30">static_cast</name><argument_list pos:line="1008" pos:column="41">&lt;<argument><expr><name pos:line="1008" pos:column="42">unsigned</name> <name pos:line="1008" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1008" pos:column="56">(<argument><expr><call><name><name pos:line="1008" pos:column="57">styler</name><op:operator pos:line="1008" pos:column="63">.</op:operator><name pos:line="1008" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="1008" pos:column="77">(<argument><expr><name pos:line="1008" pos:column="78">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue pos:line="1009" pos:column="25">continue;</continue>
		}</block></then>

		<comment type="line" pos:line="1012" pos:column="17">// handle the start of ASP pre-processor = Non-HTML</comment>
		<else pos:line="1013" pos:column="17">else <if pos:line="1013" pos:column="22">if <condition pos:line="1013" pos:column="25">(<expr><op:operator pos:line="1013" pos:column="26">!</op:operator><name pos:line="1013" pos:column="27">isMako</name> <op:operator pos:line="1013" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="1013" pos:column="37">!</op:operator><name pos:line="1013" pos:column="38">isDjango</name> <op:operator pos:line="1013" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="1013" pos:column="50">!</op:operator><call><name pos:line="1013" pos:column="51">isCommentASPState</name><argument_list pos:line="1013" pos:column="68">(<argument><expr><name pos:line="1013" pos:column="69">state</name></expr></argument>)</argument_list></call> <op:operator pos:line="1013" pos:column="76">&amp;&amp;</op:operator> <op:operator pos:line="1013" pos:column="79">(</op:operator><name pos:line="1013" pos:column="80">ch</name> <op:operator pos:line="1013" pos:column="83">==</op:operator> <lit:literal type="char" pos:line="1013" pos:column="86">'&lt;'</lit:literal><op:operator pos:line="1013" pos:column="89">)</op:operator> <op:operator pos:line="1013" pos:column="91">&amp;&amp;</op:operator> <op:operator pos:line="1013" pos:column="94">(</op:operator><name pos:line="1013" pos:column="95">chNext</name> <op:operator pos:line="1013" pos:column="102">==</op:operator> <lit:literal type="char" pos:line="1013" pos:column="105">'%'</lit:literal><op:operator pos:line="1013" pos:column="108">)</op:operator> <op:operator pos:line="1013" pos:column="110">&amp;&amp;</op:operator> <op:operator pos:line="1013" pos:column="113">!</op:operator><call><name pos:line="1013" pos:column="114">isPHPStringState</name><argument_list pos:line="1013" pos:column="130">(<argument><expr><name pos:line="1013" pos:column="131">state</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1013" pos:column="138"> <block pos:line="1013" pos:column="139">{
			<expr_stmt><expr><call><name><name pos:line="1014" pos:column="25">styler</name><op:operator pos:line="1014" pos:column="31">.</op:operator><name pos:line="1014" pos:column="32">ColourTo</name></name><argument_list pos:line="1014" pos:column="40">(<argument><expr><name pos:line="1014" pos:column="41">i</name> <op:operator pos:line="1014" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="1014" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1014" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1015" pos:column="25">beforePreProc</name> <op:operator pos:line="1015" pos:column="39">=</op:operator> <name pos:line="1015" pos:column="41">state</name></expr>;</expr_stmt>
			<if pos:line="1016" pos:column="25">if <condition pos:line="1016" pos:column="28">(<expr><name pos:line="1016" pos:column="29">inScriptType</name> <op:operator pos:line="1016" pos:column="42">==</op:operator> <name pos:line="1016" pos:column="45">eNonHtmlScript</name></expr>)</condition><then pos:line="1016" pos:column="60">
				<expr_stmt><expr><name pos:line="1017" pos:column="33">inScriptType</name> <op:operator pos:line="1017" pos:column="46">=</op:operator> <name pos:line="1017" pos:column="48">eNonHtmlScriptPreProc</name></expr>;</expr_stmt></then>
			<else pos:line="1018" pos:column="25">else
				<expr_stmt><expr><name pos:line="1019" pos:column="33">inScriptType</name> <op:operator pos:line="1019" pos:column="46">=</op:operator> <name pos:line="1019" pos:column="48">eNonHtmlPreProc</name></expr>;</expr_stmt></else></if>

			<if pos:line="1021" pos:column="25">if <condition pos:line="1021" pos:column="28">(<expr><name pos:line="1021" pos:column="29">chNext2</name> <op:operator pos:line="1021" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="1021" pos:column="40">'@'</lit:literal></expr>)</condition><then pos:line="1021" pos:column="44"> <block pos:line="1021" pos:column="45">{
				<expr_stmt><expr><name pos:line="1022" pos:column="33">i</name> <op:operator pos:line="1022" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="1022" pos:column="38">2</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="1022" pos:column="41">// place as if it was the second next char treated</comment>
				<expr_stmt><expr><name pos:line="1023" pos:column="33">visibleChars</name> <op:operator pos:line="1023" pos:column="46">+=</op:operator> <lit:literal type="number" pos:line="1023" pos:column="49">2</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1024" pos:column="33">state</name> <op:operator pos:line="1024" pos:column="39">=</op:operator> <name pos:line="1024" pos:column="41">SCE_H_ASPAT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1025" pos:column="27">else <if pos:line="1025" pos:column="32">if <condition pos:line="1025" pos:column="35">(<expr><op:operator pos:line="1025" pos:column="36">(</op:operator><name pos:line="1025" pos:column="37">chNext2</name> <op:operator pos:line="1025" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="1025" pos:column="48">'-'</lit:literal><op:operator pos:line="1025" pos:column="51">)</op:operator> <op:operator pos:line="1025" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="1025" pos:column="56">(</op:operator><call><name><name pos:line="1025" pos:column="57">styler</name><op:operator pos:line="1025" pos:column="63">.</op:operator><name pos:line="1025" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="1025" pos:column="77">(<argument><expr><name pos:line="1025" pos:column="78">i</name> <op:operator pos:line="1025" pos:column="80">+</op:operator> <lit:literal type="number" pos:line="1025" pos:column="82">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1025" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="1025" pos:column="88">'-'</lit:literal><op:operator pos:line="1025" pos:column="91">)</op:operator></expr>)</condition><then pos:line="1025" pos:column="93"> <block pos:line="1025" pos:column="94">{
				<expr_stmt><expr><call><name><name pos:line="1026" pos:column="33">styler</name><op:operator pos:line="1026" pos:column="39">.</op:operator><name pos:line="1026" pos:column="40">ColourTo</name></name><argument_list pos:line="1026" pos:column="48">(<argument><expr><name pos:line="1026" pos:column="49">i</name> <op:operator pos:line="1026" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="1026" pos:column="53">3</lit:literal></expr></argument>, <argument><expr><name pos:line="1026" pos:column="56">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1027" pos:column="33">state</name> <op:operator pos:line="1027" pos:column="39">=</op:operator> <name pos:line="1027" pos:column="41">SCE_H_XCCOMMENT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1028" pos:column="33">scriptLanguage</name> <op:operator pos:line="1028" pos:column="48">=</op:operator> <name pos:line="1028" pos:column="50">eScriptVBS</name></expr>;</expr_stmt>
				<continue pos:line="1029" pos:column="33">continue;</continue>
			}</block></then> <else pos:line="1030" pos:column="27">else <block pos:line="1030" pos:column="32">{
				<if pos:line="1031" pos:column="33">if <condition pos:line="1031" pos:column="36">(<expr><name pos:line="1031" pos:column="37">chNext2</name> <op:operator pos:line="1031" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="1031" pos:column="48">'='</lit:literal></expr>)</condition><then pos:line="1031" pos:column="52"> <block pos:line="1031" pos:column="53">{
					<expr_stmt><expr><name pos:line="1032" pos:column="41">i</name> <op:operator pos:line="1032" pos:column="43">+=</op:operator> <lit:literal type="number" pos:line="1032" pos:column="46">2</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="1032" pos:column="49">// place as if it was the second next char treated</comment>
					<expr_stmt><expr><name pos:line="1033" pos:column="41">visibleChars</name> <op:operator pos:line="1033" pos:column="54">+=</op:operator> <lit:literal type="number" pos:line="1033" pos:column="57">2</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="1034" pos:column="35">else <block pos:line="1034" pos:column="40">{
					<expr_stmt><expr><name pos:line="1035" pos:column="41">i</name><op:operator pos:line="1035" pos:column="42">++</op:operator></expr>;</expr_stmt> <comment type="line" pos:line="1035" pos:column="46">// place as if it was the next char treated</comment>
					<expr_stmt><expr><name pos:line="1036" pos:column="41">visibleChars</name><op:operator pos:line="1036" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></else></if>

				<expr_stmt><expr><name pos:line="1039" pos:column="33">state</name> <op:operator pos:line="1039" pos:column="39">=</op:operator> <call><name pos:line="1039" pos:column="41">StateForScript</name><argument_list pos:line="1039" pos:column="55">(<argument><expr><name pos:line="1039" pos:column="56">aspScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if>
			<expr_stmt><expr><name pos:line="1041" pos:column="25">scriptLanguage</name> <op:operator pos:line="1041" pos:column="40">=</op:operator> <name pos:line="1041" pos:column="42">eScriptVBS</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="1042" pos:column="25">styler</name><op:operator pos:line="1042" pos:column="31">.</op:operator><name pos:line="1042" pos:column="32">ColourTo</name></name><argument_list pos:line="1042" pos:column="40">(<argument><expr><name pos:line="1042" pos:column="41">i</name></expr></argument>, <argument><expr><name pos:line="1042" pos:column="44">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="1043" pos:column="25">// fold whole script</comment>
			<if pos:line="1044" pos:column="25">if <condition pos:line="1044" pos:column="28">(<expr><name pos:line="1044" pos:column="29">foldHTMLPreprocessor</name></expr>)</condition><then pos:line="1044" pos:column="50">
				<expr_stmt><expr><name pos:line="1045" pos:column="33">levelCurrent</name><op:operator pos:line="1045" pos:column="45">++</op:operator></expr>;</expr_stmt></then></if>
			<comment type="line" pos:line="1046" pos:column="25">// should be better</comment>
			<expr_stmt><expr><name pos:line="1047" pos:column="25">ch</name> <op:operator pos:line="1047" pos:column="28">=</op:operator> <call><name><name pos:line="1047" pos:column="30">static_cast</name><argument_list pos:line="1047" pos:column="41">&lt;<argument><expr><name pos:line="1047" pos:column="42">unsigned</name> <name pos:line="1047" pos:column="51">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1047" pos:column="56">(<argument><expr><call><name><name pos:line="1047" pos:column="57">styler</name><op:operator pos:line="1047" pos:column="63">.</op:operator><name pos:line="1047" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="1047" pos:column="77">(<argument><expr><name pos:line="1047" pos:column="78">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue pos:line="1048" pos:column="25">continue;</continue>
		}</block></then>

		<comment type="line" format="doxygen" pos:line="1051" pos:column="17">/////////////////////////////////////</comment>
		<comment type="line" pos:line="1052" pos:column="17">// handle the start of SGML language (DTD)</comment>
		<else pos:line="1053" pos:column="17">else <if pos:line="1053" pos:column="22">if <condition pos:line="1053" pos:column="25">(<expr><op:operator pos:line="1053" pos:column="26">(</op:operator><op:operator pos:line="1053" pos:column="27">(</op:operator><name pos:line="1053" pos:column="28">scriptLanguage</name> <op:operator pos:line="1053" pos:column="43">==</op:operator> <name pos:line="1053" pos:column="46">eScriptNone</name><op:operator pos:line="1053" pos:column="57">)</op:operator> <op:operator pos:line="1053" pos:column="59">||</op:operator> <op:operator pos:line="1053" pos:column="62">(</op:operator><name pos:line="1053" pos:column="63">scriptLanguage</name> <op:operator pos:line="1053" pos:column="78">==</op:operator> <name pos:line="1053" pos:column="81">eScriptXML</name><op:operator pos:line="1053" pos:column="91">)</op:operator><op:operator pos:line="1053" pos:column="92">)</op:operator> <op:operator pos:line="1053" pos:column="94">&amp;&amp;</op:operator>
				 <op:operator pos:line="1054" pos:column="34">(</op:operator><name pos:line="1054" pos:column="35">chPrev</name> <op:operator pos:line="1054" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="1054" pos:column="45">'&lt;'</lit:literal><op:operator pos:line="1054" pos:column="48">)</op:operator> <op:operator pos:line="1054" pos:column="50">&amp;&amp;</op:operator>
				 <op:operator pos:line="1055" pos:column="34">(</op:operator><name pos:line="1055" pos:column="35">ch</name> <op:operator pos:line="1055" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="1055" pos:column="41">'!'</lit:literal><op:operator pos:line="1055" pos:column="44">)</op:operator> <op:operator pos:line="1055" pos:column="46">&amp;&amp;</op:operator>
				 <op:operator pos:line="1056" pos:column="34">(</op:operator><name pos:line="1056" pos:column="35">StateToPrint</name> <op:operator pos:line="1056" pos:column="48">!=</op:operator> <name pos:line="1056" pos:column="51">SCE_H_CDATA</name><op:operator pos:line="1056" pos:column="62">)</op:operator> <op:operator pos:line="1056" pos:column="64">&amp;&amp;</op:operator>
				 <op:operator pos:line="1057" pos:column="34">(</op:operator><op:operator pos:line="1057" pos:column="35">!</op:operator><call><name pos:line="1057" pos:column="36">IsCommentState</name><argument_list pos:line="1057" pos:column="50">(<argument><expr><name pos:line="1057" pos:column="51">StateToPrint</name></expr></argument>)</argument_list></call><op:operator pos:line="1057" pos:column="64">)</op:operator> <op:operator pos:line="1057" pos:column="66">&amp;&amp;</op:operator>
				 <op:operator pos:line="1058" pos:column="34">(</op:operator><op:operator pos:line="1058" pos:column="35">!</op:operator><call><name pos:line="1058" pos:column="36">IsScriptCommentState</name><argument_list pos:line="1058" pos:column="56">(<argument><expr><name pos:line="1058" pos:column="57">StateToPrint</name></expr></argument>)</argument_list></call><op:operator pos:line="1058" pos:column="70">)</op:operator></expr>)</condition><then pos:line="1058" pos:column="72"> <block pos:line="1058" pos:column="73">{
			<expr_stmt><expr><name pos:line="1059" pos:column="25">beforePreProc</name> <op:operator pos:line="1059" pos:column="39">=</op:operator> <name pos:line="1059" pos:column="41">state</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="1060" pos:column="25">styler</name><op:operator pos:line="1060" pos:column="31">.</op:operator><name pos:line="1060" pos:column="32">ColourTo</name></name><argument_list pos:line="1060" pos:column="40">(<argument><expr><name pos:line="1060" pos:column="41">i</name> <op:operator pos:line="1060" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="1060" pos:column="45">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1060" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1061" pos:column="25">if <condition pos:line="1061" pos:column="28">(<expr><op:operator pos:line="1061" pos:column="29">(</op:operator><name pos:line="1061" pos:column="30">chNext</name> <op:operator pos:line="1061" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="1061" pos:column="40">'-'</lit:literal><op:operator pos:line="1061" pos:column="43">)</op:operator> <op:operator pos:line="1061" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="1061" pos:column="48">(</op:operator><name pos:line="1061" pos:column="49">chNext2</name> <op:operator pos:line="1061" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="1061" pos:column="60">'-'</lit:literal><op:operator pos:line="1061" pos:column="63">)</op:operator></expr>)</condition><then pos:line="1061" pos:column="65"> <block pos:line="1061" pos:column="66">{
				<expr_stmt><expr><name pos:line="1062" pos:column="33">state</name> <op:operator pos:line="1062" pos:column="39">=</op:operator> <name pos:line="1062" pos:column="41">SCE_H_COMMENT</name></expr>;</expr_stmt> <comment type="line" pos:line="1062" pos:column="56">// wait for a pending command</comment>
				<expr_stmt><expr><call><name><name pos:line="1063" pos:column="33">styler</name><op:operator pos:line="1063" pos:column="39">.</op:operator><name pos:line="1063" pos:column="40">ColourTo</name></name><argument_list pos:line="1063" pos:column="48">(<argument><expr><name pos:line="1063" pos:column="49">i</name> <op:operator pos:line="1063" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="1063" pos:column="53">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1063" pos:column="56">SCE_H_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1064" pos:column="33">i</name> <op:operator pos:line="1064" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="1064" pos:column="38">2</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="1064" pos:column="41">// follow styling after the --</comment>
			}</block></then> <else pos:line="1065" pos:column="27">else <if pos:line="1065" pos:column="32">if <condition pos:line="1065" pos:column="35">(<expr><call><name pos:line="1065" pos:column="36">isWordCdata</name><argument_list pos:line="1065" pos:column="47">(<argument><expr><name pos:line="1065" pos:column="48">i</name> <op:operator pos:line="1065" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="1065" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1065" pos:column="55">i</name> <op:operator pos:line="1065" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1065" pos:column="59">7</lit:literal></expr></argument>, <argument><expr><name pos:line="1065" pos:column="62">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1065" pos:column="70"> <block pos:line="1065" pos:column="71">{
				<expr_stmt><expr><name pos:line="1066" pos:column="33">state</name> <op:operator pos:line="1066" pos:column="39">=</op:operator> <name pos:line="1066" pos:column="41">SCE_H_CDATA</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1067" pos:column="27">else <block pos:line="1067" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="1068" pos:column="33">styler</name><op:operator pos:line="1068" pos:column="39">.</op:operator><name pos:line="1068" pos:column="40">ColourTo</name></name><argument_list pos:line="1068" pos:column="48">(<argument><expr><name pos:line="1068" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1068" pos:column="52">SCE_H_SGML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1068" pos:column="73">// &lt;! is default</comment>
				<expr_stmt><expr><name pos:line="1069" pos:column="33">scriptLanguage</name> <op:operator pos:line="1069" pos:column="48">=</op:operator> <name pos:line="1069" pos:column="50">eScriptSGML</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1070" pos:column="33">state</name> <op:operator pos:line="1070" pos:column="39">=</op:operator> <name pos:line="1070" pos:column="41">SCE_H_SGML_COMMAND</name></expr>;</expr_stmt> <comment type="line" pos:line="1070" pos:column="61">// wait for a pending command</comment>
			}</block></else></if></else></if>
			<comment type="line" pos:line="1072" pos:column="25">// fold whole tag (-- when closing the tag)</comment>
			<if pos:line="1073" pos:column="25">if <condition pos:line="1073" pos:column="28">(<expr><name pos:line="1073" pos:column="29">foldHTMLPreprocessor</name> <op:operator pos:line="1073" pos:column="50">||</op:operator> <op:operator pos:line="1073" pos:column="53">(</op:operator><name pos:line="1073" pos:column="54">state</name> <op:operator pos:line="1073" pos:column="60">==</op:operator> <name pos:line="1073" pos:column="63">SCE_H_COMMENT</name><op:operator pos:line="1073" pos:column="76">)</op:operator></expr>)</condition><then pos:line="1073" pos:column="78">
				<expr_stmt><expr><name pos:line="1074" pos:column="33">levelCurrent</name><op:operator pos:line="1074" pos:column="45">++</op:operator></expr>;</expr_stmt></then></if>
			<continue pos:line="1075" pos:column="25">continue;</continue>
		}</block></then>

		<comment type="line" pos:line="1078" pos:column="17">// handle the end of Mako Python code</comment>
		<else pos:line="1079" pos:column="17">else <if pos:line="1079" pos:column="22">if <condition pos:line="1079" pos:column="25">(<expr><name pos:line="1079" pos:column="26">isMako</name> <op:operator pos:line="1079" pos:column="33">&amp;&amp;</op:operator>
			     <op:operator pos:line="1080" pos:column="30">(</op:operator><op:operator pos:line="1080" pos:column="31">(</op:operator><name pos:line="1080" pos:column="32">inScriptType</name> <op:operator pos:line="1080" pos:column="45">==</op:operator> <name pos:line="1080" pos:column="48">eNonHtmlPreProc</name><op:operator pos:line="1080" pos:column="63">)</op:operator> <op:operator pos:line="1080" pos:column="65">||</op:operator> <op:operator pos:line="1080" pos:column="68">(</op:operator><name pos:line="1080" pos:column="69">inScriptType</name> <op:operator pos:line="1080" pos:column="82">==</op:operator> <name pos:line="1080" pos:column="85">eNonHtmlScriptPreProc</name><op:operator pos:line="1080" pos:column="106">)</op:operator><op:operator pos:line="1080" pos:column="107">)</op:operator> <op:operator pos:line="1080" pos:column="109">&amp;&amp;</op:operator>
				 <op:operator pos:line="1081" pos:column="34">(</op:operator><name pos:line="1081" pos:column="35">scriptLanguage</name> <op:operator pos:line="1081" pos:column="50">!=</op:operator> <name pos:line="1081" pos:column="53">eScriptNone</name><op:operator pos:line="1081" pos:column="64">)</op:operator> <op:operator pos:line="1081" pos:column="66">&amp;&amp;</op:operator> <call><name pos:line="1081" pos:column="69">stateAllowsTermination</name><argument_list pos:line="1081" pos:column="91">(<argument><expr><name pos:line="1081" pos:column="92">state</name></expr></argument>)</argument_list></call> <op:operator pos:line="1081" pos:column="99">&amp;&amp;</op:operator>
				 <call><name pos:line="1082" pos:column="34">isMakoBlockEnd</name><argument_list pos:line="1082" pos:column="48">(<argument><expr><name pos:line="1082" pos:column="49">ch</name></expr></argument>, <argument><expr><name pos:line="1082" pos:column="53">chNext</name></expr></argument>, <argument><expr><name pos:line="1082" pos:column="61">makoBlockType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1082" pos:column="76"> <block pos:line="1082" pos:column="77">{
			<if pos:line="1083" pos:column="25">if <condition pos:line="1083" pos:column="28">(<expr><name pos:line="1083" pos:column="29">state</name> <op:operator pos:line="1083" pos:column="35">==</op:operator> <name pos:line="1083" pos:column="38">SCE_H_ASPAT</name></expr>)</condition><then pos:line="1083" pos:column="50"> <block pos:line="1083" pos:column="51">{
				<expr_stmt><expr><name pos:line="1084" pos:column="33">aspScript</name> <op:operator pos:line="1084" pos:column="43">=</op:operator> <call><name pos:line="1084" pos:column="45">segIsScriptingIndicator</name><argument_list pos:line="1084" pos:column="68">(<argument><expr><name pos:line="1084" pos:column="69">styler</name></expr></argument>,
				                                    <argument><expr><call><name><name pos:line="1085" pos:column="69">styler</name><op:operator pos:line="1085" pos:column="75">.</op:operator><name pos:line="1085" pos:column="76">GetStartSegment</name></name><argument_list pos:line="1085" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1085" pos:column="95">i</name> <op:operator pos:line="1085" pos:column="97">-</op:operator> <lit:literal type="number" pos:line="1085" pos:column="99">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1085" pos:column="102">aspScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="1087" pos:column="25">if <condition pos:line="1087" pos:column="28">(<expr><name pos:line="1087" pos:column="29">state</name> <op:operator pos:line="1087" pos:column="35">==</op:operator> <name pos:line="1087" pos:column="38">SCE_HP_WORD</name></expr>)</condition><then pos:line="1087" pos:column="50"> <block pos:line="1087" pos:column="51">{
				<expr_stmt><expr><call><name pos:line="1088" pos:column="33">classifyWordHTPy</name><argument_list pos:line="1088" pos:column="49">(<argument><expr><call><name><name pos:line="1088" pos:column="50">styler</name><op:operator pos:line="1088" pos:column="56">.</op:operator><name pos:line="1088" pos:column="57">GetStartSegment</name></name><argument_list pos:line="1088" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1088" pos:column="76">i</name> <op:operator pos:line="1088" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="1088" pos:column="80">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1088" pos:column="83">keywords4</name></expr></argument>, <argument><expr><name pos:line="1088" pos:column="94">styler</name></expr></argument>, <argument><expr><name pos:line="1088" pos:column="102">prevWord</name></expr></argument>, <argument><expr><name pos:line="1088" pos:column="112">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1089" pos:column="27">else <block pos:line="1089" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="1090" pos:column="33">styler</name><op:operator pos:line="1090" pos:column="39">.</op:operator><name pos:line="1090" pos:column="40">ColourTo</name></name><argument_list pos:line="1090" pos:column="48">(<argument><expr><name pos:line="1090" pos:column="49">i</name> <op:operator pos:line="1090" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1090" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1090" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<if pos:line="1092" pos:column="25">if <condition pos:line="1092" pos:column="28">(<expr><lit:literal type="number" pos:line="1092" pos:column="29">0</lit:literal> <op:operator pos:line="1092" pos:column="31">!=</op:operator> <call><name pos:line="1092" pos:column="34">strcmp</name><argument_list pos:line="1092" pos:column="40">(<argument><expr><name pos:line="1092" pos:column="41">makoBlockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1092" pos:column="56">"%"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1092" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="1092" pos:column="64">(</op:operator><lit:literal type="number" pos:line="1092" pos:column="65">0</lit:literal> <op:operator pos:line="1092" pos:column="67">!=</op:operator> <call><name pos:line="1092" pos:column="70">strcmp</name><argument_list pos:line="1092" pos:column="76">(<argument><expr><name pos:line="1092" pos:column="77">makoBlockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1092" pos:column="92">"{"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="1092" pos:column="96">)</op:operator> <op:operator pos:line="1092" pos:column="98">&amp;&amp;</op:operator> <name pos:line="1092" pos:column="101">ch</name> <op:operator pos:line="1092" pos:column="104">!=</op:operator> <lit:literal type="char" pos:line="1092" pos:column="107">'&gt;'</lit:literal></expr>)</condition><then pos:line="1092" pos:column="111"> <block pos:line="1092" pos:column="112">{
				<expr_stmt><expr><name pos:line="1093" pos:column="33">i</name><op:operator pos:line="1093" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1094" pos:column="33">visibleChars</name><op:operator pos:line="1094" pos:column="45">++</op:operator></expr>;</expr_stmt>
		    }</block></then></if>
			<if pos:line="1096" pos:column="25">if <condition pos:line="1096" pos:column="28">(<expr><lit:literal type="number" pos:line="1096" pos:column="29">0</lit:literal> <op:operator pos:line="1096" pos:column="31">!=</op:operator> <call><name pos:line="1096" pos:column="34">strcmp</name><argument_list pos:line="1096" pos:column="40">(<argument><expr><name pos:line="1096" pos:column="41">makoBlockType</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1096" pos:column="56">"%"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1096" pos:column="61"> <block pos:line="1096" pos:column="62">{
				<expr_stmt><expr><call><name><name pos:line="1097" pos:column="33">styler</name><op:operator pos:line="1097" pos:column="39">.</op:operator><name pos:line="1097" pos:column="40">ColourTo</name></name><argument_list pos:line="1097" pos:column="48">(<argument><expr><name pos:line="1097" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1097" pos:column="52">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="1099" pos:column="25">state</name> <op:operator pos:line="1099" pos:column="31">=</op:operator> <name pos:line="1099" pos:column="33">beforePreProc</name></expr>;</expr_stmt>
			<if pos:line="1100" pos:column="25">if <condition pos:line="1100" pos:column="28">(<expr><name pos:line="1100" pos:column="29">inScriptType</name> <op:operator pos:line="1100" pos:column="42">==</op:operator> <name pos:line="1100" pos:column="45">eNonHtmlScriptPreProc</name></expr>)</condition><then pos:line="1100" pos:column="67">
				<expr_stmt><expr><name pos:line="1101" pos:column="33">inScriptType</name> <op:operator pos:line="1101" pos:column="46">=</op:operator> <name pos:line="1101" pos:column="48">eNonHtmlScript</name></expr>;</expr_stmt></then>
			<else pos:line="1102" pos:column="25">else
				<expr_stmt><expr><name pos:line="1103" pos:column="33">inScriptType</name> <op:operator pos:line="1103" pos:column="46">=</op:operator> <name pos:line="1103" pos:column="48">eHtml</name></expr>;</expr_stmt></else></if>
			<if pos:line="1104" pos:column="25">if <condition pos:line="1104" pos:column="28">(<expr><name pos:line="1104" pos:column="29">foldHTMLPreprocessor</name> <op:operator pos:line="1104" pos:column="50">&amp;&amp;</op:operator> <name pos:line="1104" pos:column="53">ch</name> <op:operator pos:line="1104" pos:column="56">!=</op:operator> <lit:literal type="char" pos:line="1104" pos:column="59">'\n'</lit:literal> <op:operator pos:line="1104" pos:column="64">&amp;&amp;</op:operator> <name pos:line="1104" pos:column="67">ch</name> <op:operator pos:line="1104" pos:column="70">!=</op:operator> <lit:literal type="char" pos:line="1104" pos:column="73">'\r'</lit:literal></expr>)</condition><then pos:line="1104" pos:column="78"> <block pos:line="1104" pos:column="79">{
				<expr_stmt><expr><name pos:line="1105" pos:column="33">levelCurrent</name><op:operator pos:line="1105" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="1107" pos:column="25">scriptLanguage</name> <op:operator pos:line="1107" pos:column="40">=</op:operator> <name pos:line="1107" pos:column="42">eScriptNone</name></expr>;</expr_stmt>
			<continue pos:line="1108" pos:column="25">continue;</continue>
		}</block></then>

		<comment type="line" pos:line="1111" pos:column="17">// handle the end of Django template code</comment>
		<else pos:line="1112" pos:column="17">else <if pos:line="1112" pos:column="22">if <condition pos:line="1112" pos:column="25">(<expr><name pos:line="1112" pos:column="26">isDjango</name> <op:operator pos:line="1112" pos:column="35">&amp;&amp;</op:operator>
			     <op:operator pos:line="1113" pos:column="30">(</op:operator><op:operator pos:line="1113" pos:column="31">(</op:operator><name pos:line="1113" pos:column="32">inScriptType</name> <op:operator pos:line="1113" pos:column="45">==</op:operator> <name pos:line="1113" pos:column="48">eNonHtmlPreProc</name><op:operator pos:line="1113" pos:column="63">)</op:operator> <op:operator pos:line="1113" pos:column="65">||</op:operator> <op:operator pos:line="1113" pos:column="68">(</op:operator><name pos:line="1113" pos:column="69">inScriptType</name> <op:operator pos:line="1113" pos:column="82">==</op:operator> <name pos:line="1113" pos:column="85">eNonHtmlScriptPreProc</name><op:operator pos:line="1113" pos:column="106">)</op:operator><op:operator pos:line="1113" pos:column="107">)</op:operator> <op:operator pos:line="1113" pos:column="109">&amp;&amp;</op:operator>
				 <op:operator pos:line="1114" pos:column="34">(</op:operator><name pos:line="1114" pos:column="35">scriptLanguage</name> <op:operator pos:line="1114" pos:column="50">!=</op:operator> <name pos:line="1114" pos:column="53">eScriptNone</name><op:operator pos:line="1114" pos:column="64">)</op:operator> <op:operator pos:line="1114" pos:column="66">&amp;&amp;</op:operator> <call><name pos:line="1114" pos:column="69">stateAllowsTermination</name><argument_list pos:line="1114" pos:column="91">(<argument><expr><name pos:line="1114" pos:column="92">state</name></expr></argument>)</argument_list></call> <op:operator pos:line="1114" pos:column="99">&amp;&amp;</op:operator>
				 <call><name pos:line="1115" pos:column="34">isDjangoBlockEnd</name><argument_list pos:line="1115" pos:column="50">(<argument><expr><name pos:line="1115" pos:column="51">ch</name></expr></argument>, <argument><expr><name pos:line="1115" pos:column="55">chNext</name></expr></argument>, <argument><expr><name pos:line="1115" pos:column="63">djangoBlockType</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1115" pos:column="80"> <block pos:line="1115" pos:column="81">{
			<if pos:line="1116" pos:column="25">if <condition pos:line="1116" pos:column="28">(<expr><name pos:line="1116" pos:column="29">state</name> <op:operator pos:line="1116" pos:column="35">==</op:operator> <name pos:line="1116" pos:column="38">SCE_H_ASPAT</name></expr>)</condition><then pos:line="1116" pos:column="50"> <block pos:line="1116" pos:column="51">{
				<expr_stmt><expr><name pos:line="1117" pos:column="33">aspScript</name> <op:operator pos:line="1117" pos:column="43">=</op:operator> <call><name pos:line="1117" pos:column="45">segIsScriptingIndicator</name><argument_list pos:line="1117" pos:column="68">(<argument><expr><name pos:line="1117" pos:column="69">styler</name></expr></argument>,
				                                    <argument><expr><call><name><name pos:line="1118" pos:column="69">styler</name><op:operator pos:line="1118" pos:column="75">.</op:operator><name pos:line="1118" pos:column="76">GetStartSegment</name></name><argument_list pos:line="1118" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1118" pos:column="95">i</name> <op:operator pos:line="1118" pos:column="97">-</op:operator> <lit:literal type="number" pos:line="1118" pos:column="99">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1118" pos:column="102">aspScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="1120" pos:column="25">if <condition pos:line="1120" pos:column="28">(<expr><name pos:line="1120" pos:column="29">state</name> <op:operator pos:line="1120" pos:column="35">==</op:operator> <name pos:line="1120" pos:column="38">SCE_HP_WORD</name></expr>)</condition><then pos:line="1120" pos:column="50"> <block pos:line="1120" pos:column="51">{
				<expr_stmt><expr><call><name pos:line="1121" pos:column="33">classifyWordHTPy</name><argument_list pos:line="1121" pos:column="49">(<argument><expr><call><name><name pos:line="1121" pos:column="50">styler</name><op:operator pos:line="1121" pos:column="56">.</op:operator><name pos:line="1121" pos:column="57">GetStartSegment</name></name><argument_list pos:line="1121" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1121" pos:column="76">i</name> <op:operator pos:line="1121" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="1121" pos:column="80">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1121" pos:column="83">keywords4</name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="94">styler</name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="102">prevWord</name></expr></argument>, <argument><expr><name pos:line="1121" pos:column="112">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1122" pos:column="27">else <block pos:line="1122" pos:column="32">{
				<expr_stmt><expr><call><name><name pos:line="1123" pos:column="33">styler</name><op:operator pos:line="1123" pos:column="39">.</op:operator><name pos:line="1123" pos:column="40">ColourTo</name></name><argument_list pos:line="1123" pos:column="48">(<argument><expr><name pos:line="1123" pos:column="49">i</name> <op:operator pos:line="1123" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1123" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1123" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name pos:line="1125" pos:column="25">i</name> <op:operator pos:line="1125" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="1125" pos:column="30">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1126" pos:column="25">visibleChars</name> <op:operator pos:line="1126" pos:column="38">+=</op:operator> <lit:literal type="number" pos:line="1126" pos:column="41">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="1127" pos:column="25">styler</name><op:operator pos:line="1127" pos:column="31">.</op:operator><name pos:line="1127" pos:column="32">ColourTo</name></name><argument_list pos:line="1127" pos:column="40">(<argument><expr><name pos:line="1127" pos:column="41">i</name></expr></argument>, <argument><expr><name pos:line="1127" pos:column="44">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1128" pos:column="25">state</name> <op:operator pos:line="1128" pos:column="31">=</op:operator> <name pos:line="1128" pos:column="33">beforePreProc</name></expr>;</expr_stmt>
			<if pos:line="1129" pos:column="25">if <condition pos:line="1129" pos:column="28">(<expr><name pos:line="1129" pos:column="29">inScriptType</name> <op:operator pos:line="1129" pos:column="42">==</op:operator> <name pos:line="1129" pos:column="45">eNonHtmlScriptPreProc</name></expr>)</condition><then pos:line="1129" pos:column="67">
				<expr_stmt><expr><name pos:line="1130" pos:column="33">inScriptType</name> <op:operator pos:line="1130" pos:column="46">=</op:operator> <name pos:line="1130" pos:column="48">eNonHtmlScript</name></expr>;</expr_stmt></then>
			<else pos:line="1131" pos:column="25">else
				<expr_stmt><expr><name pos:line="1132" pos:column="33">inScriptType</name> <op:operator pos:line="1132" pos:column="46">=</op:operator> <name pos:line="1132" pos:column="48">eHtml</name></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><name pos:line="1133" pos:column="25">scriptLanguage</name> <op:operator pos:line="1133" pos:column="40">=</op:operator> <name pos:line="1133" pos:column="42">beforeLanguage</name></expr>;</expr_stmt>
			<continue pos:line="1134" pos:column="25">continue;</continue>
		}</block></then>

		<comment type="line" pos:line="1137" pos:column="17">// handle the end of a pre-processor = Non-HTML</comment>
		<else pos:line="1138" pos:column="17">else <if pos:line="1138" pos:column="22">if <condition pos:line="1138" pos:column="25">(<expr><op:operator pos:line="1138" pos:column="26">(</op:operator><op:operator pos:line="1138" pos:column="27">!</op:operator><name pos:line="1138" pos:column="28">isMako</name> <op:operator pos:line="1138" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="1138" pos:column="38">!</op:operator><name pos:line="1138" pos:column="39">isDjango</name> <op:operator pos:line="1138" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="1138" pos:column="51">(</op:operator><op:operator pos:line="1138" pos:column="52">(</op:operator><name pos:line="1138" pos:column="53">inScriptType</name> <op:operator pos:line="1138" pos:column="66">==</op:operator> <name pos:line="1138" pos:column="69">eNonHtmlPreProc</name><op:operator pos:line="1138" pos:column="84">)</op:operator> <op:operator pos:line="1138" pos:column="86">||</op:operator> <op:operator pos:line="1138" pos:column="89">(</op:operator><name pos:line="1138" pos:column="90">inScriptType</name> <op:operator pos:line="1138" pos:column="103">==</op:operator> <name pos:line="1138" pos:column="106">eNonHtmlScriptPreProc</name><op:operator pos:line="1138" pos:column="127">)</op:operator><op:operator pos:line="1138" pos:column="128">)</op:operator> <op:operator pos:line="1138" pos:column="130">&amp;&amp;</op:operator>
				  <op:operator pos:line="1139" pos:column="35">(</op:operator><op:operator pos:line="1139" pos:column="36">(</op:operator><op:operator pos:line="1139" pos:column="37">(</op:operator><name pos:line="1139" pos:column="38">scriptLanguage</name> <op:operator pos:line="1139" pos:column="53">!=</op:operator> <name pos:line="1139" pos:column="56">eScriptNone</name><op:operator pos:line="1139" pos:column="67">)</op:operator> <op:operator pos:line="1139" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="1139" pos:column="72">stateAllowsTermination</name><argument_list pos:line="1139" pos:column="94">(<argument><expr><name pos:line="1139" pos:column="95">state</name></expr></argument>)</argument_list></call><op:operator pos:line="1139" pos:column="101">)</op:operator><op:operator pos:line="1139" pos:column="102">)</op:operator> <op:operator pos:line="1139" pos:column="104">&amp;&amp;</op:operator>
				  <op:operator pos:line="1140" pos:column="35">(</op:operator><op:operator pos:line="1140" pos:column="36">(</op:operator><op:operator pos:line="1140" pos:column="37">(</op:operator><name pos:line="1140" pos:column="38">ch</name> <op:operator pos:line="1140" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="1140" pos:column="44">'%'</lit:literal><op:operator pos:line="1140" pos:column="47">)</op:operator> <op:operator pos:line="1140" pos:column="49">||</op:operator> <op:operator pos:line="1140" pos:column="52">(</op:operator><name pos:line="1140" pos:column="53">ch</name> <op:operator pos:line="1140" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="1140" pos:column="59">'?'</lit:literal><op:operator pos:line="1140" pos:column="62">)</op:operator><op:operator pos:line="1140" pos:column="63">)</op:operator> <op:operator pos:line="1140" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="1140" pos:column="68">(</op:operator><name pos:line="1140" pos:column="69">chNext</name> <op:operator pos:line="1140" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="1140" pos:column="79">'&gt;'</lit:literal><op:operator pos:line="1140" pos:column="82">)</op:operator><op:operator pos:line="1140" pos:column="83">)</op:operator><op:operator pos:line="1140" pos:column="84">)</op:operator> <op:operator pos:line="1140" pos:column="86">||</op:operator>
		         <op:operator pos:line="1141" pos:column="26">(</op:operator><op:operator pos:line="1141" pos:column="27">(</op:operator><name pos:line="1141" pos:column="28">scriptLanguage</name> <op:operator pos:line="1141" pos:column="43">==</op:operator> <name pos:line="1141" pos:column="46">eScriptSGML</name><op:operator pos:line="1141" pos:column="57">)</op:operator> <op:operator pos:line="1141" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="1141" pos:column="62">(</op:operator><name pos:line="1141" pos:column="63">ch</name> <op:operator pos:line="1141" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="1141" pos:column="69">'&gt;'</lit:literal><op:operator pos:line="1141" pos:column="72">)</op:operator> <op:operator pos:line="1141" pos:column="74">&amp;&amp;</op:operator> <op:operator pos:line="1141" pos:column="77">(</op:operator><name pos:line="1141" pos:column="78">state</name> <op:operator pos:line="1141" pos:column="84">!=</op:operator> <name pos:line="1141" pos:column="87">SCE_H_SGML_COMMENT</name><op:operator pos:line="1141" pos:column="105">)</op:operator><op:operator pos:line="1141" pos:column="106">)</op:operator></expr>)</condition><then pos:line="1141" pos:column="108"> <block pos:line="1141" pos:column="109">{
			<if pos:line="1142" pos:column="25">if <condition pos:line="1142" pos:column="28">(<expr><name pos:line="1142" pos:column="29">state</name> <op:operator pos:line="1142" pos:column="35">==</op:operator> <name pos:line="1142" pos:column="38">SCE_H_ASPAT</name></expr>)</condition><then pos:line="1142" pos:column="50"> <block pos:line="1142" pos:column="51">{
				<expr_stmt><expr><name pos:line="1143" pos:column="33">aspScript</name> <op:operator pos:line="1143" pos:column="43">=</op:operator> <call><name pos:line="1143" pos:column="45">segIsScriptingIndicator</name><argument_list pos:line="1143" pos:column="68">(<argument><expr><name pos:line="1143" pos:column="69">styler</name></expr></argument>,
				                                    <argument><expr><call><name><name pos:line="1144" pos:column="69">styler</name><op:operator pos:line="1144" pos:column="75">.</op:operator><name pos:line="1144" pos:column="76">GetStartSegment</name></name><argument_list pos:line="1144" pos:column="91">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1144" pos:column="95">i</name> <op:operator pos:line="1144" pos:column="97">-</op:operator> <lit:literal type="number" pos:line="1144" pos:column="99">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1144" pos:column="102">aspScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="1146" pos:column="25">// Bounce out of any ASP mode</comment>
			<switch pos:line="1147" pos:column="25">switch <condition pos:line="1147" pos:column="32">(<expr><name pos:line="1147" pos:column="33">state</name></expr>)</condition> <block pos:line="1147" pos:column="40">{
			<case pos:line="1148" pos:column="25">case <expr><name pos:line="1148" pos:column="30">SCE_HJ_WORD</name></expr>:
				<expr_stmt><expr><call><name pos:line="1149" pos:column="33">classifyWordHTJS</name><argument_list pos:line="1149" pos:column="49">(<argument><expr><call><name><name pos:line="1149" pos:column="50">styler</name><op:operator pos:line="1149" pos:column="56">.</op:operator><name pos:line="1149" pos:column="57">GetStartSegment</name></name><argument_list pos:line="1149" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1149" pos:column="76">i</name> <op:operator pos:line="1149" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="1149" pos:column="80">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1149" pos:column="83">keywords2</name></expr></argument>, <argument><expr><name pos:line="1149" pos:column="94">styler</name></expr></argument>, <argument><expr><name pos:line="1149" pos:column="102">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="1150" pos:column="33">break;</break>
			</case><case pos:line="1151" pos:column="25">case <expr><name pos:line="1151" pos:column="30">SCE_HB_WORD</name></expr>:
				<expr_stmt><expr><call><name pos:line="1152" pos:column="33">classifyWordHTVB</name><argument_list pos:line="1152" pos:column="49">(<argument><expr><call><name><name pos:line="1152" pos:column="50">styler</name><op:operator pos:line="1152" pos:column="56">.</op:operator><name pos:line="1152" pos:column="57">GetStartSegment</name></name><argument_list pos:line="1152" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1152" pos:column="76">i</name> <op:operator pos:line="1152" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="1152" pos:column="80">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1152" pos:column="83">keywords3</name></expr></argument>, <argument><expr><name pos:line="1152" pos:column="94">styler</name></expr></argument>, <argument><expr><name pos:line="1152" pos:column="102">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="1153" pos:column="33">break;</break>
			</case><case pos:line="1154" pos:column="25">case <expr><name pos:line="1154" pos:column="30">SCE_HP_WORD</name></expr>:
				<expr_stmt><expr><call><name pos:line="1155" pos:column="33">classifyWordHTPy</name><argument_list pos:line="1155" pos:column="49">(<argument><expr><call><name><name pos:line="1155" pos:column="50">styler</name><op:operator pos:line="1155" pos:column="56">.</op:operator><name pos:line="1155" pos:column="57">GetStartSegment</name></name><argument_list pos:line="1155" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1155" pos:column="76">i</name> <op:operator pos:line="1155" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="1155" pos:column="80">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1155" pos:column="83">keywords4</name></expr></argument>, <argument><expr><name pos:line="1155" pos:column="94">styler</name></expr></argument>, <argument><expr><name pos:line="1155" pos:column="102">prevWord</name></expr></argument>, <argument><expr><name pos:line="1155" pos:column="112">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="1156" pos:column="33">break;</break>
			</case><case pos:line="1157" pos:column="25">case <expr><name pos:line="1157" pos:column="30">SCE_HPHP_WORD</name></expr>:
				<expr_stmt><expr><call><name pos:line="1158" pos:column="33">classifyWordHTPHP</name><argument_list pos:line="1158" pos:column="50">(<argument><expr><call><name><name pos:line="1158" pos:column="51">styler</name><op:operator pos:line="1158" pos:column="57">.</op:operator><name pos:line="1158" pos:column="58">GetStartSegment</name></name><argument_list pos:line="1158" pos:column="73">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1158" pos:column="77">i</name> <op:operator pos:line="1158" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="1158" pos:column="81">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1158" pos:column="84">keywords5</name></expr></argument>, <argument><expr><name pos:line="1158" pos:column="95">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="1159" pos:column="33">break;</break>
			</case><case pos:line="1160" pos:column="25">case <expr><name pos:line="1160" pos:column="30">SCE_H_XCCOMMENT</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="1161" pos:column="33">styler</name><op:operator pos:line="1161" pos:column="39">.</op:operator><name pos:line="1161" pos:column="40">ColourTo</name></name><argument_list pos:line="1161" pos:column="48">(<argument><expr><name pos:line="1161" pos:column="49">i</name> <op:operator pos:line="1161" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1161" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1161" pos:column="56">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="1162" pos:column="33">break;</break>
			</case><default pos:line="1163" pos:column="25">default :
				<expr_stmt><expr><call><name><name pos:line="1164" pos:column="33">styler</name><op:operator pos:line="1164" pos:column="39">.</op:operator><name pos:line="1164" pos:column="40">ColourTo</name></name><argument_list pos:line="1164" pos:column="48">(<argument><expr><name pos:line="1164" pos:column="49">i</name> <op:operator pos:line="1164" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1164" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1164" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="1165" pos:column="33">break;</break>
			</default>}</block></switch>
			<if pos:line="1167" pos:column="25">if <condition pos:line="1167" pos:column="28">(<expr><name pos:line="1167" pos:column="29">scriptLanguage</name> <op:operator pos:line="1167" pos:column="44">!=</op:operator> <name pos:line="1167" pos:column="47">eScriptSGML</name></expr>)</condition><then pos:line="1167" pos:column="59"> <block pos:line="1167" pos:column="60">{
				<expr_stmt><expr><name pos:line="1168" pos:column="33">i</name><op:operator pos:line="1168" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1169" pos:column="33">visibleChars</name><op:operator pos:line="1169" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="1171" pos:column="25">if <condition pos:line="1171" pos:column="28">(<expr><name pos:line="1171" pos:column="29">ch</name> <op:operator pos:line="1171" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1171" pos:column="35">'%'</lit:literal></expr>)</condition><then pos:line="1171" pos:column="39">
				<expr_stmt><expr><call><name><name pos:line="1172" pos:column="33">styler</name><op:operator pos:line="1172" pos:column="39">.</op:operator><name pos:line="1172" pos:column="40">ColourTo</name></name><argument_list pos:line="1172" pos:column="48">(<argument><expr><name pos:line="1172" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1172" pos:column="52">SCE_H_ASP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="1173" pos:column="25">else <if pos:line="1173" pos:column="30">if <condition pos:line="1173" pos:column="33">(<expr><name pos:line="1173" pos:column="34">scriptLanguage</name> <op:operator pos:line="1173" pos:column="49">==</op:operator> <name pos:line="1173" pos:column="52">eScriptXML</name></expr>)</condition><then pos:line="1173" pos:column="63">
				<expr_stmt><expr><call><name><name pos:line="1174" pos:column="33">styler</name><op:operator pos:line="1174" pos:column="39">.</op:operator><name pos:line="1174" pos:column="40">ColourTo</name></name><argument_list pos:line="1174" pos:column="48">(<argument><expr><name pos:line="1174" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1174" pos:column="52">SCE_H_XMLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="1175" pos:column="25">else <if pos:line="1175" pos:column="30">if <condition pos:line="1175" pos:column="33">(<expr><name pos:line="1175" pos:column="34">scriptLanguage</name> <op:operator pos:line="1175" pos:column="49">==</op:operator> <name pos:line="1175" pos:column="52">eScriptSGML</name></expr>)</condition><then pos:line="1175" pos:column="64">
				<expr_stmt><expr><call><name><name pos:line="1176" pos:column="33">styler</name><op:operator pos:line="1176" pos:column="39">.</op:operator><name pos:line="1176" pos:column="40">ColourTo</name></name><argument_list pos:line="1176" pos:column="48">(<argument><expr><name pos:line="1176" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1176" pos:column="52">SCE_H_SGML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="1177" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="1178" pos:column="33">styler</name><op:operator pos:line="1178" pos:column="39">.</op:operator><name pos:line="1178" pos:column="40">ColourTo</name></name><argument_list pos:line="1178" pos:column="48">(<argument><expr><name pos:line="1178" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1178" pos:column="52">SCE_H_QUESTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>
			<expr_stmt><expr><name pos:line="1179" pos:column="25">state</name> <op:operator pos:line="1179" pos:column="31">=</op:operator> <name pos:line="1179" pos:column="33">beforePreProc</name></expr>;</expr_stmt>
			<if pos:line="1180" pos:column="25">if <condition pos:line="1180" pos:column="28">(<expr><name pos:line="1180" pos:column="29">inScriptType</name> <op:operator pos:line="1180" pos:column="42">==</op:operator> <name pos:line="1180" pos:column="45">eNonHtmlScriptPreProc</name></expr>)</condition><then pos:line="1180" pos:column="67">
				<expr_stmt><expr><name pos:line="1181" pos:column="33">inScriptType</name> <op:operator pos:line="1181" pos:column="46">=</op:operator> <name pos:line="1181" pos:column="48">eNonHtmlScript</name></expr>;</expr_stmt></then>
			<else pos:line="1182" pos:column="25">else
				<expr_stmt><expr><name pos:line="1183" pos:column="33">inScriptType</name> <op:operator pos:line="1183" pos:column="46">=</op:operator> <name pos:line="1183" pos:column="48">eHtml</name></expr>;</expr_stmt></else></if>
			<comment type="line" pos:line="1184" pos:column="25">// Unfold all scripting languages, except for XML tag</comment>
			<if pos:line="1185" pos:column="25">if <condition pos:line="1185" pos:column="28">(<expr><name pos:line="1185" pos:column="29">foldHTMLPreprocessor</name> <op:operator pos:line="1185" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="1185" pos:column="53">(</op:operator><name pos:line="1185" pos:column="54">scriptLanguage</name> <op:operator pos:line="1185" pos:column="69">!=</op:operator> <name pos:line="1185" pos:column="72">eScriptXML</name><op:operator pos:line="1185" pos:column="82">)</op:operator></expr>)</condition><then pos:line="1185" pos:column="84"> <block pos:line="1185" pos:column="85">{
				<expr_stmt><expr><name pos:line="1186" pos:column="33">levelCurrent</name><op:operator pos:line="1186" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="1188" pos:column="25">scriptLanguage</name> <op:operator pos:line="1188" pos:column="40">=</op:operator> <name pos:line="1188" pos:column="42">beforeLanguage</name></expr>;</expr_stmt>
			<continue pos:line="1189" pos:column="25">continue;</continue>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		<comment type="line" format="doxygen" pos:line="1191" pos:column="17">/////////////////////////////////////</comment>

		<switch pos:line="1193" pos:column="17">switch <condition pos:line="1193" pos:column="24">(<expr><name pos:line="1193" pos:column="25">state</name></expr>)</condition> <block pos:line="1193" pos:column="32">{
		<case pos:line="1194" pos:column="17">case <expr><name pos:line="1194" pos:column="22">SCE_H_DEFAULT</name></expr>:
			<if pos:line="1195" pos:column="25">if <condition pos:line="1195" pos:column="28">(<expr><name pos:line="1195" pos:column="29">ch</name> <op:operator pos:line="1195" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1195" pos:column="35">'&lt;'</lit:literal></expr>)</condition><then pos:line="1195" pos:column="39"> <block pos:line="1195" pos:column="40">{
				<comment type="line" pos:line="1196" pos:column="33">// in HTML, fold on tag open and unfold on tag close</comment>
				<expr_stmt><expr><name pos:line="1197" pos:column="33">tagOpened</name> <op:operator pos:line="1197" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="1197" pos:column="45">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1198" pos:column="33">tagClosing</name> <op:operator pos:line="1198" pos:column="44">=</op:operator> <op:operator pos:line="1198" pos:column="46">(</op:operator><name pos:line="1198" pos:column="47">chNext</name> <op:operator pos:line="1198" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="1198" pos:column="57">'/'</lit:literal><op:operator pos:line="1198" pos:column="60">)</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1199" pos:column="33">styler</name><op:operator pos:line="1199" pos:column="39">.</op:operator><name pos:line="1199" pos:column="40">ColourTo</name></name><argument_list pos:line="1199" pos:column="48">(<argument><expr><name pos:line="1199" pos:column="49">i</name> <op:operator pos:line="1199" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1199" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1199" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1200" pos:column="33">if <condition pos:line="1200" pos:column="36">(<expr><name pos:line="1200" pos:column="37">chNext</name> <op:operator pos:line="1200" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="1200" pos:column="47">'!'</lit:literal></expr>)</condition><then pos:line="1200" pos:column="51">
					<expr_stmt><expr><name pos:line="1201" pos:column="41">state</name> <op:operator pos:line="1201" pos:column="47">=</op:operator> <name pos:line="1201" pos:column="49">SCE_H_TAGUNKNOWN</name></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="1202" pos:column="27">else <if pos:line="1202" pos:column="32">if <condition pos:line="1202" pos:column="35">(<expr><name pos:line="1202" pos:column="36">ch</name> <op:operator pos:line="1202" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1202" pos:column="42">'&amp;'</lit:literal></expr>)</condition><then pos:line="1202" pos:column="46"> <block pos:line="1202" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="1203" pos:column="33">styler</name><op:operator pos:line="1203" pos:column="39">.</op:operator><name pos:line="1203" pos:column="40">ColourTo</name></name><argument_list pos:line="1203" pos:column="48">(<argument><expr><name pos:line="1203" pos:column="49">i</name> <op:operator pos:line="1203" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1203" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1203" pos:column="56">SCE_H_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1204" pos:column="33">state</name> <op:operator pos:line="1204" pos:column="39">=</op:operator> <name pos:line="1204" pos:column="41">SCE_H_ENTITY</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="1206" pos:column="25">break;</break>
		</case><case pos:line="1207" pos:column="17">case <expr><name pos:line="1207" pos:column="22">SCE_H_SGML_DEFAULT</name></expr>:
		</case><case pos:line="1208" pos:column="17">case <expr><name pos:line="1208" pos:column="22">SCE_H_SGML_BLOCK_DEFAULT</name></expr>:
<comment type="line" pos:line="1209" pos:column="1">//			if (scriptLanguage == eScriptSGMLblock)</comment>
<comment type="line" pos:line="1210" pos:column="1">//				StateToPrint = SCE_H_SGML_BLOCK_DEFAULT;</comment>

			<if pos:line="1212" pos:column="25">if <condition pos:line="1212" pos:column="28">(<expr><name pos:line="1212" pos:column="29">ch</name> <op:operator pos:line="1212" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1212" pos:column="35">'\"'</lit:literal></expr>)</condition><then pos:line="1212" pos:column="40"> <block pos:line="1212" pos:column="41">{
				<expr_stmt><expr><call><name><name pos:line="1213" pos:column="33">styler</name><op:operator pos:line="1213" pos:column="39">.</op:operator><name pos:line="1213" pos:column="40">ColourTo</name></name><argument_list pos:line="1213" pos:column="48">(<argument><expr><name pos:line="1213" pos:column="49">i</name> <op:operator pos:line="1213" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1213" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1213" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1214" pos:column="33">state</name> <op:operator pos:line="1214" pos:column="39">=</op:operator> <name pos:line="1214" pos:column="41">SCE_H_SGML_DOUBLESTRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1215" pos:column="27">else <if pos:line="1215" pos:column="32">if <condition pos:line="1215" pos:column="35">(<expr><name pos:line="1215" pos:column="36">ch</name> <op:operator pos:line="1215" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1215" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="1215" pos:column="47"> <block pos:line="1215" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1216" pos:column="33">styler</name><op:operator pos:line="1216" pos:column="39">.</op:operator><name pos:line="1216" pos:column="40">ColourTo</name></name><argument_list pos:line="1216" pos:column="48">(<argument><expr><name pos:line="1216" pos:column="49">i</name> <op:operator pos:line="1216" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1216" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1216" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1217" pos:column="33">state</name> <op:operator pos:line="1217" pos:column="39">=</op:operator> <name pos:line="1217" pos:column="41">SCE_H_SGML_SIMPLESTRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1218" pos:column="27">else <if pos:line="1218" pos:column="32">if <condition pos:line="1218" pos:column="35">(<expr><op:operator pos:line="1218" pos:column="36">(</op:operator><name pos:line="1218" pos:column="37">ch</name> <op:operator pos:line="1218" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1218" pos:column="43">'-'</lit:literal><op:operator pos:line="1218" pos:column="46">)</op:operator> <op:operator pos:line="1218" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="1218" pos:column="51">(</op:operator><name pos:line="1218" pos:column="52">chPrev</name> <op:operator pos:line="1218" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1218" pos:column="62">'-'</lit:literal><op:operator pos:line="1218" pos:column="65">)</op:operator></expr>)</condition><then pos:line="1218" pos:column="67"> <block pos:line="1218" pos:column="68">{
				<if pos:line="1219" pos:column="33">if <condition pos:line="1219" pos:column="36">(<expr><call><name><name pos:line="1219" pos:column="37">static_cast</name><argument_list pos:line="1219" pos:column="48">&lt;<argument><expr><name pos:line="1219" pos:column="49">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1219" pos:column="53">(<argument><expr><call><name><name pos:line="1219" pos:column="54">styler</name><op:operator pos:line="1219" pos:column="60">.</op:operator><name pos:line="1219" pos:column="61">GetStartSegment</name></name><argument_list pos:line="1219" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1219" pos:column="80">&lt;=</op:operator> <op:operator pos:line="1219" pos:column="83">(</op:operator><name pos:line="1219" pos:column="84">i</name> <op:operator pos:line="1219" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="1219" pos:column="88">2</lit:literal><op:operator pos:line="1219" pos:column="89">)</op:operator></expr>)</condition><then pos:line="1219" pos:column="91"> <block pos:line="1219" pos:column="92">{
					<expr_stmt><expr><call><name><name pos:line="1220" pos:column="41">styler</name><op:operator pos:line="1220" pos:column="47">.</op:operator><name pos:line="1220" pos:column="48">ColourTo</name></name><argument_list pos:line="1220" pos:column="56">(<argument><expr><name pos:line="1220" pos:column="57">i</name> <op:operator pos:line="1220" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1220" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1220" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="1222" pos:column="33">state</name> <op:operator pos:line="1222" pos:column="39">=</op:operator> <name pos:line="1222" pos:column="41">SCE_H_SGML_COMMENT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1223" pos:column="27">else <if pos:line="1223" pos:column="32">if <condition pos:line="1223" pos:column="35">(<expr><call><name pos:line="1223" pos:column="36">isascii</name><argument_list pos:line="1223" pos:column="43">(<argument><expr><name pos:line="1223" pos:column="44">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1223" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="1223" pos:column="51">isalpha</name><argument_list pos:line="1223" pos:column="58">(<argument><expr><name pos:line="1223" pos:column="59">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1223" pos:column="63">&amp;&amp;</op:operator> <op:operator pos:line="1223" pos:column="66">(</op:operator><name pos:line="1223" pos:column="67">chPrev</name> <op:operator pos:line="1223" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="1223" pos:column="77">'%'</lit:literal><op:operator pos:line="1223" pos:column="80">)</op:operator></expr>)</condition><then pos:line="1223" pos:column="82"> <block pos:line="1223" pos:column="83">{
				<expr_stmt><expr><call><name><name pos:line="1224" pos:column="33">styler</name><op:operator pos:line="1224" pos:column="39">.</op:operator><name pos:line="1224" pos:column="40">ColourTo</name></name><argument_list pos:line="1224" pos:column="48">(<argument><expr><name pos:line="1224" pos:column="49">i</name> <op:operator pos:line="1224" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1224" pos:column="53">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1224" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1225" pos:column="33">state</name> <op:operator pos:line="1225" pos:column="39">=</op:operator> <name pos:line="1225" pos:column="41">SCE_H_SGML_ENTITY</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1226" pos:column="27">else <if pos:line="1226" pos:column="32">if <condition pos:line="1226" pos:column="35">(<expr><name pos:line="1226" pos:column="36">ch</name> <op:operator pos:line="1226" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1226" pos:column="42">'#'</lit:literal></expr>)</condition><then pos:line="1226" pos:column="46"> <block pos:line="1226" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="1227" pos:column="33">styler</name><op:operator pos:line="1227" pos:column="39">.</op:operator><name pos:line="1227" pos:column="40">ColourTo</name></name><argument_list pos:line="1227" pos:column="48">(<argument><expr><name pos:line="1227" pos:column="49">i</name> <op:operator pos:line="1227" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1227" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1227" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1228" pos:column="33">state</name> <op:operator pos:line="1228" pos:column="39">=</op:operator> <name pos:line="1228" pos:column="41">SCE_H_SGML_SPECIAL</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1229" pos:column="27">else <if pos:line="1229" pos:column="32">if <condition pos:line="1229" pos:column="35">(<expr><name pos:line="1229" pos:column="36">ch</name> <op:operator pos:line="1229" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1229" pos:column="42">'['</lit:literal></expr>)</condition><then pos:line="1229" pos:column="46"> <block pos:line="1229" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="1230" pos:column="33">styler</name><op:operator pos:line="1230" pos:column="39">.</op:operator><name pos:line="1230" pos:column="40">ColourTo</name></name><argument_list pos:line="1230" pos:column="48">(<argument><expr><name pos:line="1230" pos:column="49">i</name> <op:operator pos:line="1230" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1230" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1230" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1231" pos:column="33">scriptLanguage</name> <op:operator pos:line="1231" pos:column="48">=</op:operator> <name pos:line="1231" pos:column="50">eScriptSGMLblock</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1232" pos:column="33">state</name> <op:operator pos:line="1232" pos:column="39">=</op:operator> <name pos:line="1232" pos:column="41">SCE_H_SGML_BLOCK_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1233" pos:column="27">else <if pos:line="1233" pos:column="32">if <condition pos:line="1233" pos:column="35">(<expr><name pos:line="1233" pos:column="36">ch</name> <op:operator pos:line="1233" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1233" pos:column="42">']'</lit:literal></expr>)</condition><then pos:line="1233" pos:column="46"> <block pos:line="1233" pos:column="47">{
				<if pos:line="1234" pos:column="33">if <condition pos:line="1234" pos:column="36">(<expr><name pos:line="1234" pos:column="37">scriptLanguage</name> <op:operator pos:line="1234" pos:column="52">==</op:operator> <name pos:line="1234" pos:column="55">eScriptSGMLblock</name></expr>)</condition><then pos:line="1234" pos:column="72"> <block pos:line="1234" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="1235" pos:column="41">styler</name><op:operator pos:line="1235" pos:column="47">.</op:operator><name pos:line="1235" pos:column="48">ColourTo</name></name><argument_list pos:line="1235" pos:column="56">(<argument><expr><name pos:line="1235" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1235" pos:column="60">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1236" pos:column="41">scriptLanguage</name> <op:operator pos:line="1236" pos:column="56">=</op:operator> <name pos:line="1236" pos:column="58">eScriptSGML</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1237" pos:column="35">else <block pos:line="1237" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="1238" pos:column="41">styler</name><op:operator pos:line="1238" pos:column="47">.</op:operator><name pos:line="1238" pos:column="48">ColourTo</name></name><argument_list pos:line="1238" pos:column="56">(<argument><expr><name pos:line="1238" pos:column="57">i</name> <op:operator pos:line="1238" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1238" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1238" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1239" pos:column="41">styler</name><op:operator pos:line="1239" pos:column="47">.</op:operator><name pos:line="1239" pos:column="48">ColourTo</name></name><argument_list pos:line="1239" pos:column="56">(<argument><expr><name pos:line="1239" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1239" pos:column="60">SCE_H_SGML_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name pos:line="1241" pos:column="33">state</name> <op:operator pos:line="1241" pos:column="39">=</op:operator> <name pos:line="1241" pos:column="41">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1242" pos:column="27">else <if pos:line="1242" pos:column="32">if <condition pos:line="1242" pos:column="35">(<expr><name pos:line="1242" pos:column="36">scriptLanguage</name> <op:operator pos:line="1242" pos:column="51">==</op:operator> <name pos:line="1242" pos:column="54">eScriptSGMLblock</name></expr>)</condition><then pos:line="1242" pos:column="71"> <block pos:line="1242" pos:column="72">{
				<if pos:line="1243" pos:column="33">if <condition pos:line="1243" pos:column="36">(<expr><op:operator pos:line="1243" pos:column="37">(</op:operator><name pos:line="1243" pos:column="38">ch</name> <op:operator pos:line="1243" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="1243" pos:column="44">'!'</lit:literal><op:operator pos:line="1243" pos:column="47">)</op:operator> <op:operator pos:line="1243" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="1243" pos:column="52">(</op:operator><name pos:line="1243" pos:column="53">chPrev</name> <op:operator pos:line="1243" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="1243" pos:column="63">'&lt;'</lit:literal><op:operator pos:line="1243" pos:column="66">)</op:operator></expr>)</condition><then pos:line="1243" pos:column="68"> <block pos:line="1243" pos:column="69">{
					<expr_stmt><expr><call><name><name pos:line="1244" pos:column="41">styler</name><op:operator pos:line="1244" pos:column="47">.</op:operator><name pos:line="1244" pos:column="48">ColourTo</name></name><argument_list pos:line="1244" pos:column="56">(<argument><expr><name pos:line="1244" pos:column="57">i</name> <op:operator pos:line="1244" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1244" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1244" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1245" pos:column="41">styler</name><op:operator pos:line="1245" pos:column="47">.</op:operator><name pos:line="1245" pos:column="48">ColourTo</name></name><argument_list pos:line="1245" pos:column="56">(<argument><expr><name pos:line="1245" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1245" pos:column="60">SCE_H_SGML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1246" pos:column="41">state</name> <op:operator pos:line="1246" pos:column="47">=</op:operator> <name pos:line="1246" pos:column="49">SCE_H_SGML_COMMAND</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1247" pos:column="35">else <if pos:line="1247" pos:column="40">if <condition pos:line="1247" pos:column="43">(<expr><name pos:line="1247" pos:column="44">ch</name> <op:operator pos:line="1247" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1247" pos:column="50">'&gt;'</lit:literal></expr>)</condition><then pos:line="1247" pos:column="54"> <block pos:line="1247" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="1248" pos:column="41">styler</name><op:operator pos:line="1248" pos:column="47">.</op:operator><name pos:line="1248" pos:column="48">ColourTo</name></name><argument_list pos:line="1248" pos:column="56">(<argument><expr><name pos:line="1248" pos:column="57">i</name> <op:operator pos:line="1248" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1248" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1248" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1249" pos:column="41">styler</name><op:operator pos:line="1249" pos:column="47">.</op:operator><name pos:line="1249" pos:column="48">ColourTo</name></name><argument_list pos:line="1249" pos:column="56">(<argument><expr><name pos:line="1249" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1249" pos:column="60">SCE_H_SGML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="1252" pos:column="25">break;</break>
		</case><case pos:line="1253" pos:column="17">case <expr><name pos:line="1253" pos:column="22">SCE_H_SGML_COMMAND</name></expr>:
			<if pos:line="1254" pos:column="25">if <condition pos:line="1254" pos:column="28">(<expr><op:operator pos:line="1254" pos:column="29">(</op:operator><name pos:line="1254" pos:column="30">ch</name> <op:operator pos:line="1254" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="1254" pos:column="36">'-'</lit:literal><op:operator pos:line="1254" pos:column="39">)</op:operator> <op:operator pos:line="1254" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1254" pos:column="44">(</op:operator><name pos:line="1254" pos:column="45">chPrev</name> <op:operator pos:line="1254" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1254" pos:column="55">'-'</lit:literal><op:operator pos:line="1254" pos:column="58">)</op:operator></expr>)</condition><then pos:line="1254" pos:column="60"> <block pos:line="1254" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="1255" pos:column="33">styler</name><op:operator pos:line="1255" pos:column="39">.</op:operator><name pos:line="1255" pos:column="40">ColourTo</name></name><argument_list pos:line="1255" pos:column="48">(<argument><expr><name pos:line="1255" pos:column="49">i</name> <op:operator pos:line="1255" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1255" pos:column="53">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1255" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1256" pos:column="33">state</name> <op:operator pos:line="1256" pos:column="39">=</op:operator> <name pos:line="1256" pos:column="41">SCE_H_SGML_COMMENT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1257" pos:column="27">else <if pos:line="1257" pos:column="32">if <condition pos:line="1257" pos:column="35">(<expr><op:operator pos:line="1257" pos:column="36">!</op:operator><call><name pos:line="1257" pos:column="37">issgmlwordchar</name><argument_list pos:line="1257" pos:column="51">(<argument><expr><name pos:line="1257" pos:column="52">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1257" pos:column="56"> <block pos:line="1257" pos:column="57">{
				<if pos:line="1258" pos:column="33">if <condition pos:line="1258" pos:column="36">(<expr><call><name pos:line="1258" pos:column="37">isWordHSGML</name><argument_list pos:line="1258" pos:column="48">(<argument><expr><call><name><name pos:line="1258" pos:column="49">styler</name><op:operator pos:line="1258" pos:column="55">.</op:operator><name pos:line="1258" pos:column="56">GetStartSegment</name></name><argument_list pos:line="1258" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1258" pos:column="75">i</name> <op:operator pos:line="1258" pos:column="77">-</op:operator> <lit:literal type="number" pos:line="1258" pos:column="79">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1258" pos:column="82">keywords6</name></expr></argument>, <argument><expr><name pos:line="1258" pos:column="93">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1258" pos:column="101"> <block pos:line="1258" pos:column="102">{
					<expr_stmt><expr><call><name><name pos:line="1259" pos:column="41">styler</name><op:operator pos:line="1259" pos:column="47">.</op:operator><name pos:line="1259" pos:column="48">ColourTo</name></name><argument_list pos:line="1259" pos:column="56">(<argument><expr><name pos:line="1259" pos:column="57">i</name> <op:operator pos:line="1259" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1259" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1259" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1260" pos:column="41">state</name> <op:operator pos:line="1260" pos:column="47">=</op:operator> <name pos:line="1260" pos:column="49">SCE_H_SGML_1ST_PARAM</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1261" pos:column="35">else <block pos:line="1261" pos:column="40">{
					<expr_stmt><expr><name pos:line="1262" pos:column="41">state</name> <op:operator pos:line="1262" pos:column="47">=</op:operator> <name pos:line="1262" pos:column="49">SCE_H_SGML_ERROR</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if></else></if>
			<break pos:line="1265" pos:column="25">break;</break>
		</case><case pos:line="1266" pos:column="17">case <expr><name pos:line="1266" pos:column="22">SCE_H_SGML_1ST_PARAM</name></expr>:
			<comment type="line" pos:line="1267" pos:column="25">// wait for the beginning of the word</comment>
			<if pos:line="1268" pos:column="25">if <condition pos:line="1268" pos:column="28">(<expr><op:operator pos:line="1268" pos:column="29">(</op:operator><name pos:line="1268" pos:column="30">ch</name> <op:operator pos:line="1268" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="1268" pos:column="36">'-'</lit:literal><op:operator pos:line="1268" pos:column="39">)</op:operator> <op:operator pos:line="1268" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1268" pos:column="44">(</op:operator><name pos:line="1268" pos:column="45">chPrev</name> <op:operator pos:line="1268" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1268" pos:column="55">'-'</lit:literal><op:operator pos:line="1268" pos:column="58">)</op:operator></expr>)</condition><then pos:line="1268" pos:column="60"> <block pos:line="1268" pos:column="61">{
				<if pos:line="1269" pos:column="33">if <condition pos:line="1269" pos:column="36">(<expr><name pos:line="1269" pos:column="37">scriptLanguage</name> <op:operator pos:line="1269" pos:column="52">==</op:operator> <name pos:line="1269" pos:column="55">eScriptSGMLblock</name></expr>)</condition><then pos:line="1269" pos:column="72"> <block pos:line="1269" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="1270" pos:column="41">styler</name><op:operator pos:line="1270" pos:column="47">.</op:operator><name pos:line="1270" pos:column="48">ColourTo</name></name><argument_list pos:line="1270" pos:column="56">(<argument><expr><name pos:line="1270" pos:column="57">i</name> <op:operator pos:line="1270" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1270" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1270" pos:column="64">SCE_H_SGML_BLOCK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1271" pos:column="35">else <block pos:line="1271" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="1272" pos:column="41">styler</name><op:operator pos:line="1272" pos:column="47">.</op:operator><name pos:line="1272" pos:column="48">ColourTo</name></name><argument_list pos:line="1272" pos:column="56">(<argument><expr><name pos:line="1272" pos:column="57">i</name> <op:operator pos:line="1272" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1272" pos:column="61">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1272" pos:column="64">SCE_H_SGML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name pos:line="1274" pos:column="33">state</name> <op:operator pos:line="1274" pos:column="39">=</op:operator> <name pos:line="1274" pos:column="41">SCE_H_SGML_1ST_PARAM_COMMENT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1275" pos:column="27">else <if pos:line="1275" pos:column="32">if <condition pos:line="1275" pos:column="35">(<expr><call><name pos:line="1275" pos:column="36">issgmlwordchar</name><argument_list pos:line="1275" pos:column="50">(<argument><expr><name pos:line="1275" pos:column="51">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1275" pos:column="55"> <block pos:line="1275" pos:column="56">{
				<if pos:line="1276" pos:column="33">if <condition pos:line="1276" pos:column="36">(<expr><name pos:line="1276" pos:column="37">scriptLanguage</name> <op:operator pos:line="1276" pos:column="52">==</op:operator> <name pos:line="1276" pos:column="55">eScriptSGMLblock</name></expr>)</condition><then pos:line="1276" pos:column="72"> <block pos:line="1276" pos:column="73">{
					<expr_stmt><expr><call><name><name pos:line="1277" pos:column="41">styler</name><op:operator pos:line="1277" pos:column="47">.</op:operator><name pos:line="1277" pos:column="48">ColourTo</name></name><argument_list pos:line="1277" pos:column="56">(<argument><expr><name pos:line="1277" pos:column="57">i</name> <op:operator pos:line="1277" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1277" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1277" pos:column="64">SCE_H_SGML_BLOCK_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1278" pos:column="35">else <block pos:line="1278" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="1279" pos:column="41">styler</name><op:operator pos:line="1279" pos:column="47">.</op:operator><name pos:line="1279" pos:column="48">ColourTo</name></name><argument_list pos:line="1279" pos:column="56">(<argument><expr><name pos:line="1279" pos:column="57">i</name> <op:operator pos:line="1279" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1279" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1279" pos:column="64">SCE_H_SGML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<comment type="line" pos:line="1281" pos:column="33">// find the length of the word</comment>
				<decl_stmt><decl><type><name pos:line="1282" pos:column="33">int</name></type> <name pos:line="1282" pos:column="37">size</name> <init pos:line="1282" pos:column="42">= <expr><lit:literal type="number" pos:line="1282" pos:column="44">1</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="1283" pos:column="33">while <condition pos:line="1283" pos:column="39">(<macro><name pos:line="1283" pos:column="40">setHTMLWord</name></macro><expr><op:operator pos:line="1283" pos:column="51">.</op:operator><macro><name pos:line="1283" pos:column="52">Contains</name><argument_list pos:line="1283" pos:column="60">(<argument pos:line="1283" pos:column="61">static_cast&lt;unsigned char&gt;(styler.SafeGetCharAt(i + size))</argument>)</argument_list></macro></expr>)</condition>
					<expr_stmt><expr><name pos:line="1284" pos:column="41">size</name><op:operator pos:line="1284" pos:column="45">++</op:operator></expr>;</expr_stmt></while>
				<expr_stmt><expr><call><name><name pos:line="1285" pos:column="33">styler</name><op:operator pos:line="1285" pos:column="39">.</op:operator><name pos:line="1285" pos:column="40">ColourTo</name></name><argument_list pos:line="1285" pos:column="48">(<argument><expr><name pos:line="1285" pos:column="49">i</name> <op:operator pos:line="1285" pos:column="51">+</op:operator> <name pos:line="1285" pos:column="53">size</name> <op:operator pos:line="1285" pos:column="58">-</op:operator> <lit:literal type="number" pos:line="1285" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1285" pos:column="63">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1286" pos:column="33">i</name> <op:operator pos:line="1286" pos:column="35">+=</op:operator> <name pos:line="1286" pos:column="38">size</name> <op:operator pos:line="1286" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="1286" pos:column="45">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1287" pos:column="33">visibleChars</name> <op:operator pos:line="1287" pos:column="46">+=</op:operator> <name pos:line="1287" pos:column="49">size</name> <op:operator pos:line="1287" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="1287" pos:column="56">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1288" pos:column="33">ch</name> <op:operator pos:line="1288" pos:column="36">=</op:operator> <call><name><name pos:line="1288" pos:column="38">static_cast</name><argument_list pos:line="1288" pos:column="49">&lt;<argument><expr><name pos:line="1288" pos:column="50">unsigned</name> <name pos:line="1288" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1288" pos:column="64">(<argument><expr><call><name><name pos:line="1288" pos:column="65">styler</name><op:operator pos:line="1288" pos:column="71">.</op:operator><name pos:line="1288" pos:column="72">SafeGetCharAt</name></name><argument_list pos:line="1288" pos:column="85">(<argument><expr><name pos:line="1288" pos:column="86">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1289" pos:column="33">if <condition pos:line="1289" pos:column="36">(<expr><name pos:line="1289" pos:column="37">scriptLanguage</name> <op:operator pos:line="1289" pos:column="52">==</op:operator> <name pos:line="1289" pos:column="55">eScriptSGMLblock</name></expr>)</condition><then pos:line="1289" pos:column="72"> <block pos:line="1289" pos:column="73">{
					<expr_stmt><expr><name pos:line="1290" pos:column="41">state</name> <op:operator pos:line="1290" pos:column="47">=</op:operator> <name pos:line="1290" pos:column="49">SCE_H_SGML_BLOCK_DEFAULT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1291" pos:column="35">else <block pos:line="1291" pos:column="40">{
					<expr_stmt><expr><name pos:line="1292" pos:column="41">state</name> <op:operator pos:line="1292" pos:column="47">=</op:operator> <name pos:line="1292" pos:column="49">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
				}</block></else></if>
				<continue pos:line="1294" pos:column="33">continue;</continue>
			}</block></then></if></else></if>
			<break pos:line="1296" pos:column="25">break;</break>
		</case><case pos:line="1297" pos:column="17">case <expr><name pos:line="1297" pos:column="22">SCE_H_SGML_ERROR</name></expr>:
			<if pos:line="1298" pos:column="25">if <condition pos:line="1298" pos:column="28">(<expr><op:operator pos:line="1298" pos:column="29">(</op:operator><name pos:line="1298" pos:column="30">ch</name> <op:operator pos:line="1298" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="1298" pos:column="36">'-'</lit:literal><op:operator pos:line="1298" pos:column="39">)</op:operator> <op:operator pos:line="1298" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1298" pos:column="44">(</op:operator><name pos:line="1298" pos:column="45">chPrev</name> <op:operator pos:line="1298" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1298" pos:column="55">'-'</lit:literal><op:operator pos:line="1298" pos:column="58">)</op:operator></expr>)</condition><then pos:line="1298" pos:column="60"> <block pos:line="1298" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="1299" pos:column="33">styler</name><op:operator pos:line="1299" pos:column="39">.</op:operator><name pos:line="1299" pos:column="40">ColourTo</name></name><argument_list pos:line="1299" pos:column="48">(<argument><expr><name pos:line="1299" pos:column="49">i</name> <op:operator pos:line="1299" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1299" pos:column="53">2</lit:literal></expr></argument>, <argument><expr><name pos:line="1299" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1300" pos:column="33">state</name> <op:operator pos:line="1300" pos:column="39">=</op:operator> <name pos:line="1300" pos:column="41">SCE_H_SGML_COMMENT</name></expr>;</expr_stmt>
			}</block></then></if>
		</case><case pos:line="1302" pos:column="17">case <expr><name pos:line="1302" pos:column="22">SCE_H_SGML_DOUBLESTRING</name></expr>:
			<if pos:line="1303" pos:column="25">if <condition pos:line="1303" pos:column="28">(<expr><name pos:line="1303" pos:column="29">ch</name> <op:operator pos:line="1303" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1303" pos:column="35">'\"'</lit:literal></expr>)</condition><then pos:line="1303" pos:column="40"> <block pos:line="1303" pos:column="41">{
				<expr_stmt><expr><call><name><name pos:line="1304" pos:column="33">styler</name><op:operator pos:line="1304" pos:column="39">.</op:operator><name pos:line="1304" pos:column="40">ColourTo</name></name><argument_list pos:line="1304" pos:column="48">(<argument><expr><name pos:line="1304" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1304" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1305" pos:column="33">state</name> <op:operator pos:line="1305" pos:column="39">=</op:operator> <name pos:line="1305" pos:column="41">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1307" pos:column="25">break;</break>
		</case><case pos:line="1308" pos:column="17">case <expr><name pos:line="1308" pos:column="22">SCE_H_SGML_SIMPLESTRING</name></expr>:
			<if pos:line="1309" pos:column="25">if <condition pos:line="1309" pos:column="28">(<expr><name pos:line="1309" pos:column="29">ch</name> <op:operator pos:line="1309" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1309" pos:column="35">'\''</lit:literal></expr>)</condition><then pos:line="1309" pos:column="40"> <block pos:line="1309" pos:column="41">{
				<expr_stmt><expr><call><name><name pos:line="1310" pos:column="33">styler</name><op:operator pos:line="1310" pos:column="39">.</op:operator><name pos:line="1310" pos:column="40">ColourTo</name></name><argument_list pos:line="1310" pos:column="48">(<argument><expr><name pos:line="1310" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1310" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1311" pos:column="33">state</name> <op:operator pos:line="1311" pos:column="39">=</op:operator> <name pos:line="1311" pos:column="41">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1313" pos:column="25">break;</break>
		</case><case pos:line="1314" pos:column="17">case <expr><name pos:line="1314" pos:column="22">SCE_H_SGML_COMMENT</name></expr>:
			<if pos:line="1315" pos:column="25">if <condition pos:line="1315" pos:column="28">(<expr><op:operator pos:line="1315" pos:column="29">(</op:operator><name pos:line="1315" pos:column="30">ch</name> <op:operator pos:line="1315" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="1315" pos:column="36">'-'</lit:literal><op:operator pos:line="1315" pos:column="39">)</op:operator> <op:operator pos:line="1315" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1315" pos:column="44">(</op:operator><name pos:line="1315" pos:column="45">chPrev</name> <op:operator pos:line="1315" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1315" pos:column="55">'-'</lit:literal><op:operator pos:line="1315" pos:column="58">)</op:operator></expr>)</condition><then pos:line="1315" pos:column="60"> <block pos:line="1315" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="1316" pos:column="33">styler</name><op:operator pos:line="1316" pos:column="39">.</op:operator><name pos:line="1316" pos:column="40">ColourTo</name></name><argument_list pos:line="1316" pos:column="48">(<argument><expr><name pos:line="1316" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1316" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1317" pos:column="33">state</name> <op:operator pos:line="1317" pos:column="39">=</op:operator> <name pos:line="1317" pos:column="41">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1319" pos:column="25">break;</break>
		</case><case pos:line="1320" pos:column="17">case <expr><name pos:line="1320" pos:column="22">SCE_H_CDATA</name></expr>:
			<if pos:line="1321" pos:column="25">if <condition pos:line="1321" pos:column="28">(<expr><op:operator pos:line="1321" pos:column="29">(</op:operator><name pos:line="1321" pos:column="30">chPrev2</name> <op:operator pos:line="1321" pos:column="38">==</op:operator> <lit:literal type="char" pos:line="1321" pos:column="41">']'</lit:literal><op:operator pos:line="1321" pos:column="44">)</op:operator> <op:operator pos:line="1321" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="1321" pos:column="49">(</op:operator><name pos:line="1321" pos:column="50">chPrev</name> <op:operator pos:line="1321" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="1321" pos:column="60">']'</lit:literal><op:operator pos:line="1321" pos:column="63">)</op:operator> <op:operator pos:line="1321" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="1321" pos:column="68">(</op:operator><name pos:line="1321" pos:column="69">ch</name> <op:operator pos:line="1321" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="1321" pos:column="75">'&gt;'</lit:literal><op:operator pos:line="1321" pos:column="78">)</op:operator></expr>)</condition><then pos:line="1321" pos:column="80"> <block pos:line="1321" pos:column="81">{
				<expr_stmt><expr><call><name><name pos:line="1322" pos:column="33">styler</name><op:operator pos:line="1322" pos:column="39">.</op:operator><name pos:line="1322" pos:column="40">ColourTo</name></name><argument_list pos:line="1322" pos:column="48">(<argument><expr><name pos:line="1322" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1322" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1323" pos:column="33">state</name> <op:operator pos:line="1323" pos:column="39">=</op:operator> <name pos:line="1323" pos:column="41">SCE_H_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1324" pos:column="33">levelCurrent</name><op:operator pos:line="1324" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1326" pos:column="25">break;</break>
		</case><case pos:line="1327" pos:column="17">case <expr><name pos:line="1327" pos:column="22">SCE_H_COMMENT</name></expr>:
			<if pos:line="1328" pos:column="25">if <condition pos:line="1328" pos:column="28">(<expr><op:operator pos:line="1328" pos:column="29">(</op:operator><name pos:line="1328" pos:column="30">scriptLanguage</name> <op:operator pos:line="1328" pos:column="45">!=</op:operator> <name pos:line="1328" pos:column="48">eScriptComment</name><op:operator pos:line="1328" pos:column="62">)</op:operator> <op:operator pos:line="1328" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="1328" pos:column="67">(</op:operator><name pos:line="1328" pos:column="68">chPrev2</name> <op:operator pos:line="1328" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="1328" pos:column="79">'-'</lit:literal><op:operator pos:line="1328" pos:column="82">)</op:operator> <op:operator pos:line="1328" pos:column="84">&amp;&amp;</op:operator> <op:operator pos:line="1328" pos:column="87">(</op:operator><name pos:line="1328" pos:column="88">chPrev</name> <op:operator pos:line="1328" pos:column="95">==</op:operator> <lit:literal type="char" pos:line="1328" pos:column="98">'-'</lit:literal><op:operator pos:line="1328" pos:column="101">)</op:operator> <op:operator pos:line="1328" pos:column="103">&amp;&amp;</op:operator> <op:operator pos:line="1328" pos:column="106">(</op:operator><name pos:line="1328" pos:column="107">ch</name> <op:operator pos:line="1328" pos:column="110">==</op:operator> <lit:literal type="char" pos:line="1328" pos:column="113">'&gt;'</lit:literal><op:operator pos:line="1328" pos:column="116">)</op:operator></expr>)</condition><then pos:line="1328" pos:column="118"> <block pos:line="1328" pos:column="119">{
				<expr_stmt><expr><call><name><name pos:line="1329" pos:column="33">styler</name><op:operator pos:line="1329" pos:column="39">.</op:operator><name pos:line="1329" pos:column="40">ColourTo</name></name><argument_list pos:line="1329" pos:column="48">(<argument><expr><name pos:line="1329" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1329" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1330" pos:column="33">state</name> <op:operator pos:line="1330" pos:column="39">=</op:operator> <name pos:line="1330" pos:column="41">SCE_H_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1331" pos:column="33">levelCurrent</name><op:operator pos:line="1331" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1333" pos:column="25">break;</break>
		</case><case pos:line="1334" pos:column="17">case <expr><name pos:line="1334" pos:column="22">SCE_H_SGML_1ST_PARAM_COMMENT</name></expr>:
			<if pos:line="1335" pos:column="25">if <condition pos:line="1335" pos:column="28">(<expr><op:operator pos:line="1335" pos:column="29">(</op:operator><name pos:line="1335" pos:column="30">ch</name> <op:operator pos:line="1335" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="1335" pos:column="36">'-'</lit:literal><op:operator pos:line="1335" pos:column="39">)</op:operator> <op:operator pos:line="1335" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1335" pos:column="44">(</op:operator><name pos:line="1335" pos:column="45">chPrev</name> <op:operator pos:line="1335" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1335" pos:column="55">'-'</lit:literal><op:operator pos:line="1335" pos:column="58">)</op:operator></expr>)</condition><then pos:line="1335" pos:column="60"> <block pos:line="1335" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="1336" pos:column="33">styler</name><op:operator pos:line="1336" pos:column="39">.</op:operator><name pos:line="1336" pos:column="40">ColourTo</name></name><argument_list pos:line="1336" pos:column="48">(<argument><expr><name pos:line="1336" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1336" pos:column="52">SCE_H_SGML_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1337" pos:column="33">state</name> <op:operator pos:line="1337" pos:column="39">=</op:operator> <name pos:line="1337" pos:column="41">SCE_H_SGML_1ST_PARAM</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1339" pos:column="25">break;</break>
		</case><case pos:line="1340" pos:column="17">case <expr><name pos:line="1340" pos:column="22">SCE_H_SGML_SPECIAL</name></expr>:
			<if pos:line="1341" pos:column="25">if <condition pos:line="1341" pos:column="28">(<expr><op:operator pos:line="1341" pos:column="29">!</op:operator><op:operator pos:line="1341" pos:column="30">(</op:operator><call><name pos:line="1341" pos:column="31">isascii</name><argument_list pos:line="1341" pos:column="38">(<argument><expr><name pos:line="1341" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1341" pos:column="43">&amp;&amp;</op:operator> <call><name pos:line="1341" pos:column="46">isupper</name><argument_list pos:line="1341" pos:column="53">(<argument><expr><name pos:line="1341" pos:column="54">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="1341" pos:column="57">)</op:operator></expr>)</condition><then pos:line="1341" pos:column="59"> <block pos:line="1341" pos:column="60">{
				<expr_stmt><expr><call><name><name pos:line="1342" pos:column="33">styler</name><op:operator pos:line="1342" pos:column="39">.</op:operator><name pos:line="1342" pos:column="40">ColourTo</name></name><argument_list pos:line="1342" pos:column="48">(<argument><expr><name pos:line="1342" pos:column="49">i</name> <op:operator pos:line="1342" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1342" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1342" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1343" pos:column="33">if <condition pos:line="1343" pos:column="36">(<expr><call><name pos:line="1343" pos:column="37">isalnum</name><argument_list pos:line="1343" pos:column="44">(<argument><expr><name pos:line="1343" pos:column="45">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1343" pos:column="49"> <block pos:line="1343" pos:column="50">{
					<expr_stmt><expr><name pos:line="1344" pos:column="41">state</name> <op:operator pos:line="1344" pos:column="47">=</op:operator> <name pos:line="1344" pos:column="49">SCE_H_SGML_ERROR</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1345" pos:column="35">else <block pos:line="1345" pos:column="40">{
					<expr_stmt><expr><name pos:line="1346" pos:column="41">state</name> <op:operator pos:line="1346" pos:column="47">=</op:operator> <name pos:line="1346" pos:column="49">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
			<break pos:line="1349" pos:column="25">break;</break>
		</case><case pos:line="1350" pos:column="17">case <expr><name pos:line="1350" pos:column="22">SCE_H_SGML_ENTITY</name></expr>:
			<if pos:line="1351" pos:column="25">if <condition pos:line="1351" pos:column="28">(<expr><name pos:line="1351" pos:column="29">ch</name> <op:operator pos:line="1351" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1351" pos:column="35">';'</lit:literal></expr>)</condition><then pos:line="1351" pos:column="39"> <block pos:line="1351" pos:column="40">{
				<expr_stmt><expr><call><name><name pos:line="1352" pos:column="33">styler</name><op:operator pos:line="1352" pos:column="39">.</op:operator><name pos:line="1352" pos:column="40">ColourTo</name></name><argument_list pos:line="1352" pos:column="48">(<argument><expr><name pos:line="1352" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1352" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1353" pos:column="33">state</name> <op:operator pos:line="1353" pos:column="39">=</op:operator> <name pos:line="1353" pos:column="41">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1354" pos:column="27">else <if pos:line="1354" pos:column="32">if <condition pos:line="1354" pos:column="35">(<expr><op:operator pos:line="1354" pos:column="36">!</op:operator><op:operator pos:line="1354" pos:column="37">(</op:operator><call><name pos:line="1354" pos:column="38">isascii</name><argument_list pos:line="1354" pos:column="45">(<argument><expr><name pos:line="1354" pos:column="46">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1354" pos:column="50">&amp;&amp;</op:operator> <call><name pos:line="1354" pos:column="53">isalnum</name><argument_list pos:line="1354" pos:column="60">(<argument><expr><name pos:line="1354" pos:column="61">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="1354" pos:column="64">)</op:operator> <op:operator pos:line="1354" pos:column="66">&amp;&amp;</op:operator> <name pos:line="1354" pos:column="69">ch</name> <op:operator pos:line="1354" pos:column="72">!=</op:operator> <lit:literal type="char" pos:line="1354" pos:column="75">'-'</lit:literal> <op:operator pos:line="1354" pos:column="79">&amp;&amp;</op:operator> <name pos:line="1354" pos:column="82">ch</name> <op:operator pos:line="1354" pos:column="85">!=</op:operator> <lit:literal type="char" pos:line="1354" pos:column="88">'.'</lit:literal></expr>)</condition><then pos:line="1354" pos:column="92"> <block pos:line="1354" pos:column="93">{
				<expr_stmt><expr><call><name><name pos:line="1355" pos:column="33">styler</name><op:operator pos:line="1355" pos:column="39">.</op:operator><name pos:line="1355" pos:column="40">ColourTo</name></name><argument_list pos:line="1355" pos:column="48">(<argument><expr><name pos:line="1355" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1355" pos:column="52">SCE_H_SGML_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1356" pos:column="33">state</name> <op:operator pos:line="1356" pos:column="39">=</op:operator> <name pos:line="1356" pos:column="41">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="1358" pos:column="25">break;</break>
		</case><case pos:line="1359" pos:column="17">case <expr><name pos:line="1359" pos:column="22">SCE_H_ENTITY</name></expr>:
			<if pos:line="1360" pos:column="25">if <condition pos:line="1360" pos:column="28">(<expr><name pos:line="1360" pos:column="29">ch</name> <op:operator pos:line="1360" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1360" pos:column="35">';'</lit:literal></expr>)</condition><then pos:line="1360" pos:column="39"> <block pos:line="1360" pos:column="40">{
				<expr_stmt><expr><call><name><name pos:line="1361" pos:column="33">styler</name><op:operator pos:line="1361" pos:column="39">.</op:operator><name pos:line="1361" pos:column="40">ColourTo</name></name><argument_list pos:line="1361" pos:column="48">(<argument><expr><name pos:line="1361" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1361" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1362" pos:column="33">state</name> <op:operator pos:line="1362" pos:column="39">=</op:operator> <name pos:line="1362" pos:column="41">SCE_H_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="1364" pos:column="25">if <condition pos:line="1364" pos:column="28">(<expr><name pos:line="1364" pos:column="29">ch</name> <op:operator pos:line="1364" pos:column="32">!=</op:operator> <lit:literal type="char" pos:line="1364" pos:column="35">'#'</lit:literal> <op:operator pos:line="1364" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="1364" pos:column="42">!</op:operator><op:operator pos:line="1364" pos:column="43">(</op:operator><call><name pos:line="1364" pos:column="44">isascii</name><argument_list pos:line="1364" pos:column="51">(<argument><expr><name pos:line="1364" pos:column="52">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1364" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="1364" pos:column="59">isalnum</name><argument_list pos:line="1364" pos:column="66">(<argument><expr><name pos:line="1364" pos:column="67">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="1364" pos:column="70">)</op:operator>	<comment type="line" pos:line="1364" pos:column="73">// Should check that '#' follows '&amp;', but it is unlikely anyway...</comment>
				<op:operator pos:line="1365" pos:column="33">&amp;&amp;</op:operator> <name pos:line="1365" pos:column="36">ch</name> <op:operator pos:line="1365" pos:column="39">!=</op:operator> <lit:literal type="char" pos:line="1365" pos:column="42">'.'</lit:literal> <op:operator pos:line="1365" pos:column="46">&amp;&amp;</op:operator> <name pos:line="1365" pos:column="49">ch</name> <op:operator pos:line="1365" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="1365" pos:column="55">'-'</lit:literal> <op:operator pos:line="1365" pos:column="59">&amp;&amp;</op:operator> <name pos:line="1365" pos:column="62">ch</name> <op:operator pos:line="1365" pos:column="65">!=</op:operator> <lit:literal type="char" pos:line="1365" pos:column="68">'_'</lit:literal> <op:operator pos:line="1365" pos:column="72">&amp;&amp;</op:operator> <name pos:line="1365" pos:column="75">ch</name> <op:operator pos:line="1365" pos:column="78">!=</op:operator> <lit:literal type="char" pos:line="1365" pos:column="81">':'</lit:literal></expr>)</condition><then pos:line="1365" pos:column="85"> <block pos:line="1365" pos:column="86">{ <comment type="line" pos:line="1365" pos:column="88">// valid in XML</comment>
				<if pos:line="1366" pos:column="33">if <condition pos:line="1366" pos:column="36">(<expr><op:operator pos:line="1366" pos:column="37">!</op:operator><call><name pos:line="1366" pos:column="38">isascii</name><argument_list pos:line="1366" pos:column="45">(<argument><expr><name pos:line="1366" pos:column="46">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1366" pos:column="50">	<comment type="line" pos:line="1366" pos:column="57">// Possibly start of a multibyte character so don't allow this byte to be in entity style</comment>
					<expr_stmt><expr><call><name><name pos:line="1367" pos:column="41">styler</name><op:operator pos:line="1367" pos:column="47">.</op:operator><name pos:line="1367" pos:column="48">ColourTo</name></name><argument_list pos:line="1367" pos:column="56">(<argument><expr><name pos:line="1367" pos:column="57">i</name><op:operator pos:line="1367" pos:column="58">-</op:operator><lit:literal type="number" pos:line="1367" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1367" pos:column="62">SCE_H_TAGUNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="1368" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="1369" pos:column="41">styler</name><op:operator pos:line="1369" pos:column="47">.</op:operator><name pos:line="1369" pos:column="48">ColourTo</name></name><argument_list pos:line="1369" pos:column="56">(<argument><expr><name pos:line="1369" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1369" pos:column="60">SCE_H_TAGUNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><name pos:line="1370" pos:column="33">state</name> <op:operator pos:line="1370" pos:column="39">=</op:operator> <name pos:line="1370" pos:column="41">SCE_H_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1372" pos:column="25">break;</break>
		</case><case pos:line="1373" pos:column="17">case <expr><name pos:line="1373" pos:column="22">SCE_H_TAGUNKNOWN</name></expr>:
			<if pos:line="1374" pos:column="25">if <condition pos:line="1374" pos:column="28">(<expr><op:operator pos:line="1374" pos:column="29">!</op:operator><call><name><name pos:line="1374" pos:column="30">setTagContinue</name><op:operator pos:line="1374" pos:column="44">.</op:operator><name pos:line="1374" pos:column="45">Contains</name></name><argument_list pos:line="1374" pos:column="53">(<argument><expr><name pos:line="1374" pos:column="54">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1374" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="1374" pos:column="61">!</op:operator><op:operator pos:line="1374" pos:column="62">(</op:operator><op:operator pos:line="1374" pos:column="63">(</op:operator><name pos:line="1374" pos:column="64">ch</name> <op:operator pos:line="1374" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="1374" pos:column="70">'/'</lit:literal><op:operator pos:line="1374" pos:column="73">)</op:operator> <op:operator pos:line="1374" pos:column="75">&amp;&amp;</op:operator> <op:operator pos:line="1374" pos:column="78">(</op:operator><name pos:line="1374" pos:column="79">chPrev</name> <op:operator pos:line="1374" pos:column="86">==</op:operator> <lit:literal type="char" pos:line="1374" pos:column="89">'&lt;'</lit:literal><op:operator pos:line="1374" pos:column="92">)</op:operator><op:operator pos:line="1374" pos:column="93">)</op:operator></expr>)</condition><then pos:line="1374" pos:column="95"> <block pos:line="1374" pos:column="96">{
				<decl_stmt><decl><type><name pos:line="1375" pos:column="33">int</name></type> <name pos:line="1375" pos:column="37">eClass</name> <init pos:line="1375" pos:column="44">= <expr><call><name pos:line="1375" pos:column="46">classifyTagHTML</name><argument_list pos:line="1375" pos:column="61">(<argument><expr><call><name><name pos:line="1375" pos:column="62">styler</name><op:operator pos:line="1375" pos:column="68">.</op:operator><name pos:line="1375" pos:column="69">GetStartSegment</name></name><argument_list pos:line="1375" pos:column="84">()</argument_list></call></expr></argument>,
					<argument><expr><name pos:line="1376" pos:column="41">i</name> <op:operator pos:line="1376" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="1376" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1376" pos:column="48">keywords</name></expr></argument>, <argument><expr><name pos:line="1376" pos:column="58">styler</name></expr></argument>, <argument><expr><name pos:line="1376" pos:column="66">tagDontFold</name></expr></argument>, <argument><expr><name pos:line="1376" pos:column="79">caseSensitive</name></expr></argument>, <argument><expr><name pos:line="1376" pos:column="94">isXml</name></expr></argument>, <argument><expr><name pos:line="1376" pos:column="101">allowScripts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1377" pos:column="33">if <condition pos:line="1377" pos:column="36">(<expr><name pos:line="1377" pos:column="37">eClass</name> <op:operator pos:line="1377" pos:column="44">==</op:operator> <name pos:line="1377" pos:column="47">SCE_H_SCRIPT</name> <op:operator pos:line="1377" pos:column="60">||</op:operator> <name pos:line="1377" pos:column="63">eClass</name> <op:operator pos:line="1377" pos:column="70">==</op:operator> <name pos:line="1377" pos:column="73">SCE_H_COMMENT</name></expr>)</condition><then pos:line="1377" pos:column="87"> <block pos:line="1377" pos:column="88">{
					<if pos:line="1378" pos:column="41">if <condition pos:line="1378" pos:column="44">(<expr><op:operator pos:line="1378" pos:column="45">!</op:operator><name pos:line="1378" pos:column="46">tagClosing</name></expr>)</condition><then pos:line="1378" pos:column="57"> <block pos:line="1378" pos:column="58">{
						<expr_stmt><expr><name pos:line="1379" pos:column="49">inScriptType</name> <op:operator pos:line="1379" pos:column="62">=</op:operator> <name pos:line="1379" pos:column="64">eNonHtmlScript</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1380" pos:column="49">scriptLanguage</name> <op:operator pos:line="1380" pos:column="64">=</op:operator> <name pos:line="1380" pos:column="66">eClass</name> <op:operator pos:line="1380" pos:column="73">==</op:operator> <name pos:line="1380" pos:column="76">SCE_H_SCRIPT</name> <op:operator pos:line="1380" pos:column="89">?</op:operator> <name pos:line="1380" pos:column="91">clientScript</name> <op:operator pos:line="1380" pos:column="104">:</op:operator> <name pos:line="1380" pos:column="106">eScriptComment</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="1381" pos:column="43">else <block pos:line="1381" pos:column="48">{
						<expr_stmt><expr><name pos:line="1382" pos:column="49">scriptLanguage</name> <op:operator pos:line="1382" pos:column="64">=</op:operator> <name pos:line="1382" pos:column="66">eScriptNone</name></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><name pos:line="1384" pos:column="41">eClass</name> <op:operator pos:line="1384" pos:column="48">=</op:operator> <name pos:line="1384" pos:column="50">SCE_H_TAG</name></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="1386" pos:column="33">if <condition pos:line="1386" pos:column="36">(<expr><name pos:line="1386" pos:column="37">ch</name> <op:operator pos:line="1386" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1386" pos:column="43">'&gt;'</lit:literal></expr>)</condition><then pos:line="1386" pos:column="47"> <block pos:line="1386" pos:column="48">{
					<expr_stmt><expr><call><name><name pos:line="1387" pos:column="41">styler</name><op:operator pos:line="1387" pos:column="47">.</op:operator><name pos:line="1387" pos:column="48">ColourTo</name></name><argument_list pos:line="1387" pos:column="56">(<argument><expr><name pos:line="1387" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1387" pos:column="60">eClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="1388" pos:column="41">if <condition pos:line="1388" pos:column="44">(<expr><name pos:line="1388" pos:column="45">inScriptType</name> <op:operator pos:line="1388" pos:column="58">==</op:operator> <name pos:line="1388" pos:column="61">eNonHtmlScript</name></expr>)</condition><then pos:line="1388" pos:column="76"> <block pos:line="1388" pos:column="77">{
						<expr_stmt><expr><name pos:line="1389" pos:column="49">state</name> <op:operator pos:line="1389" pos:column="55">=</op:operator> <call><name pos:line="1389" pos:column="57">StateForScript</name><argument_list pos:line="1389" pos:column="71">(<argument><expr><name pos:line="1389" pos:column="72">scriptLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1390" pos:column="43">else <block pos:line="1390" pos:column="48">{
						<expr_stmt><expr><name pos:line="1391" pos:column="49">state</name> <op:operator pos:line="1391" pos:column="55">=</op:operator> <name pos:line="1391" pos:column="57">SCE_H_DEFAULT</name></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><name pos:line="1393" pos:column="41">tagOpened</name> <op:operator pos:line="1393" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="1393" pos:column="53">false</lit:literal></expr>;</expr_stmt>
					<if pos:line="1394" pos:column="41">if <condition pos:line="1394" pos:column="44">(<expr><op:operator pos:line="1394" pos:column="45">!</op:operator><name pos:line="1394" pos:column="46">tagDontFold</name></expr>)</condition><then pos:line="1394" pos:column="58"> <block pos:line="1394" pos:column="59">{
						<if pos:line="1395" pos:column="49">if <condition pos:line="1395" pos:column="52">(<expr><name pos:line="1395" pos:column="53">tagClosing</name></expr>)</condition><then pos:line="1395" pos:column="64"> <block pos:line="1395" pos:column="65">{
							<expr_stmt><expr><name pos:line="1396" pos:column="57">levelCurrent</name><op:operator pos:line="1396" pos:column="69">--</op:operator></expr>;</expr_stmt>
						}</block></then> <else pos:line="1397" pos:column="51">else <block pos:line="1397" pos:column="56">{
							<expr_stmt><expr><name pos:line="1398" pos:column="57">levelCurrent</name><op:operator pos:line="1398" pos:column="69">++</op:operator></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="1401" pos:column="41">tagClosing</name> <op:operator pos:line="1401" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="1401" pos:column="54">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="1402" pos:column="35">else <if pos:line="1402" pos:column="40">if <condition pos:line="1402" pos:column="43">(<expr><name pos:line="1402" pos:column="44">ch</name> <op:operator pos:line="1402" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1402" pos:column="50">'/'</lit:literal> <op:operator pos:line="1402" pos:column="54">&amp;&amp;</op:operator> <name pos:line="1402" pos:column="57">chNext</name> <op:operator pos:line="1402" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="1402" pos:column="67">'&gt;'</lit:literal></expr>)</condition><then pos:line="1402" pos:column="71"> <block pos:line="1402" pos:column="72">{
					<if pos:line="1403" pos:column="41">if <condition pos:line="1403" pos:column="44">(<expr><name pos:line="1403" pos:column="45">eClass</name> <op:operator pos:line="1403" pos:column="52">==</op:operator> <name pos:line="1403" pos:column="55">SCE_H_TAGUNKNOWN</name></expr>)</condition><then pos:line="1403" pos:column="72"> <block pos:line="1403" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="1404" pos:column="49">styler</name><op:operator pos:line="1404" pos:column="55">.</op:operator><name pos:line="1404" pos:column="56">ColourTo</name></name><argument_list pos:line="1404" pos:column="64">(<argument><expr><name pos:line="1404" pos:column="65">i</name> <op:operator pos:line="1404" pos:column="67">+</op:operator> <lit:literal type="number" pos:line="1404" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1404" pos:column="72">SCE_H_TAGUNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1405" pos:column="43">else <block pos:line="1405" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="1406" pos:column="49">styler</name><op:operator pos:line="1406" pos:column="55">.</op:operator><name pos:line="1406" pos:column="56">ColourTo</name></name><argument_list pos:line="1406" pos:column="64">(<argument><expr><name pos:line="1406" pos:column="65">i</name> <op:operator pos:line="1406" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="1406" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1406" pos:column="72">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="1407" pos:column="49">styler</name><op:operator pos:line="1407" pos:column="55">.</op:operator><name pos:line="1407" pos:column="56">ColourTo</name></name><argument_list pos:line="1407" pos:column="64">(<argument><expr><name pos:line="1407" pos:column="65">i</name> <op:operator pos:line="1407" pos:column="67">+</op:operator> <lit:literal type="number" pos:line="1407" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1407" pos:column="72">SCE_H_TAGEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><name pos:line="1409" pos:column="41">i</name><op:operator pos:line="1409" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1410" pos:column="41">ch</name> <op:operator pos:line="1410" pos:column="44">=</op:operator> <name pos:line="1410" pos:column="46">chNext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1411" pos:column="41">state</name> <op:operator pos:line="1411" pos:column="47">=</op:operator> <name pos:line="1411" pos:column="49">SCE_H_DEFAULT</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1412" pos:column="41">tagOpened</name> <op:operator pos:line="1412" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="1412" pos:column="53">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="1413" pos:column="35">else <block pos:line="1413" pos:column="40">{
					<if pos:line="1414" pos:column="41">if <condition pos:line="1414" pos:column="44">(<expr><name pos:line="1414" pos:column="45">eClass</name> <op:operator pos:line="1414" pos:column="52">!=</op:operator> <name pos:line="1414" pos:column="55">SCE_H_TAGUNKNOWN</name></expr>)</condition><then pos:line="1414" pos:column="72"> <block pos:line="1414" pos:column="73">{
						<if pos:line="1415" pos:column="49">if <condition pos:line="1415" pos:column="52">(<expr><name pos:line="1415" pos:column="53">eClass</name> <op:operator pos:line="1415" pos:column="60">==</op:operator> <name pos:line="1415" pos:column="63">SCE_H_SGML_DEFAULT</name></expr>)</condition><then pos:line="1415" pos:column="82"> <block pos:line="1415" pos:column="83">{
							<expr_stmt><expr><name pos:line="1416" pos:column="57">state</name> <op:operator pos:line="1416" pos:column="63">=</op:operator> <name pos:line="1416" pos:column="65">SCE_H_SGML_DEFAULT</name></expr>;</expr_stmt>
						}</block></then> <else pos:line="1417" pos:column="51">else <block pos:line="1417" pos:column="56">{
							<expr_stmt><expr><name pos:line="1418" pos:column="57">state</name> <op:operator pos:line="1418" pos:column="63">=</op:operator> <name pos:line="1418" pos:column="65">SCE_H_OTHER</name></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then></if>
				}</block></else></if></else></if>
			}</block></then></if>
			<break pos:line="1423" pos:column="25">break;</break>
		</case><case pos:line="1424" pos:column="17">case <expr><name pos:line="1424" pos:column="22">SCE_H_ATTRIBUTE</name></expr>:
			<if pos:line="1425" pos:column="25">if <condition pos:line="1425" pos:column="28">(<expr><op:operator pos:line="1425" pos:column="29">!</op:operator><call><name><name pos:line="1425" pos:column="30">setAttributeContinue</name><op:operator pos:line="1425" pos:column="50">.</op:operator><name pos:line="1425" pos:column="51">Contains</name></name><argument_list pos:line="1425" pos:column="59">(<argument><expr><name pos:line="1425" pos:column="60">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1425" pos:column="64"> <block pos:line="1425" pos:column="65">{
				<if pos:line="1426" pos:column="33">if <condition pos:line="1426" pos:column="36">(<expr><name pos:line="1426" pos:column="37">inScriptType</name> <op:operator pos:line="1426" pos:column="50">==</op:operator> <name pos:line="1426" pos:column="53">eNonHtmlScript</name></expr>)</condition><then pos:line="1426" pos:column="68"> <block pos:line="1426" pos:column="69">{
					<decl_stmt><decl><type><name pos:line="1427" pos:column="41">int</name></type> <name pos:line="1427" pos:column="45">scriptLanguagePrev</name> <init pos:line="1427" pos:column="64">= <expr><name pos:line="1427" pos:column="66">scriptLanguage</name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="1428" pos:column="41">clientScript</name> <op:operator pos:line="1428" pos:column="54">=</op:operator> <call><name pos:line="1428" pos:column="56">segIsScriptingIndicator</name><argument_list pos:line="1428" pos:column="79">(<argument><expr><name pos:line="1428" pos:column="80">styler</name></expr></argument>, <argument><expr><call><name><name pos:line="1428" pos:column="88">styler</name><op:operator pos:line="1428" pos:column="94">.</op:operator><name pos:line="1428" pos:column="95">GetStartSegment</name></name><argument_list pos:line="1428" pos:column="110">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1428" pos:column="114">i</name> <op:operator pos:line="1428" pos:column="116">-</op:operator> <lit:literal type="number" pos:line="1428" pos:column="118">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1428" pos:column="121">scriptLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1429" pos:column="41">scriptLanguage</name> <op:operator pos:line="1429" pos:column="56">=</op:operator> <name pos:line="1429" pos:column="58">clientScript</name></expr>;</expr_stmt>
					<if pos:line="1430" pos:column="41">if <condition pos:line="1430" pos:column="44">(<expr><op:operator pos:line="1430" pos:column="45">(</op:operator><name pos:line="1430" pos:column="46">scriptLanguagePrev</name> <op:operator pos:line="1430" pos:column="65">!=</op:operator> <name pos:line="1430" pos:column="68">scriptLanguage</name><op:operator pos:line="1430" pos:column="82">)</op:operator> <op:operator pos:line="1430" pos:column="84">&amp;&amp;</op:operator> <op:operator pos:line="1430" pos:column="87">(</op:operator><name pos:line="1430" pos:column="88">scriptLanguage</name> <op:operator pos:line="1430" pos:column="103">==</op:operator> <name pos:line="1430" pos:column="106">eScriptNone</name><op:operator pos:line="1430" pos:column="117">)</op:operator></expr>)</condition><then pos:line="1430" pos:column="119">
						<expr_stmt><expr><name pos:line="1431" pos:column="49">inScriptType</name> <op:operator pos:line="1431" pos:column="62">=</op:operator> <name pos:line="1431" pos:column="64">eHtml</name></expr>;</expr_stmt></then></if>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="1433" pos:column="33">classifyAttribHTML</name><argument_list pos:line="1433" pos:column="51">(<argument><expr><call><name><name pos:line="1433" pos:column="52">styler</name><op:operator pos:line="1433" pos:column="58">.</op:operator><name pos:line="1433" pos:column="59">GetStartSegment</name></name><argument_list pos:line="1433" pos:column="74">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1433" pos:column="78">i</name> <op:operator pos:line="1433" pos:column="80">-</op:operator> <lit:literal type="number" pos:line="1433" pos:column="82">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1433" pos:column="85">keywords</name></expr></argument>, <argument><expr><name pos:line="1433" pos:column="95">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1434" pos:column="33">if <condition pos:line="1434" pos:column="36">(<expr><name pos:line="1434" pos:column="37">ch</name> <op:operator pos:line="1434" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1434" pos:column="43">'&gt;'</lit:literal></expr>)</condition><then pos:line="1434" pos:column="47"> <block pos:line="1434" pos:column="48">{
					<expr_stmt><expr><call><name><name pos:line="1435" pos:column="41">styler</name><op:operator pos:line="1435" pos:column="47">.</op:operator><name pos:line="1435" pos:column="48">ColourTo</name></name><argument_list pos:line="1435" pos:column="56">(<argument><expr><name pos:line="1435" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1435" pos:column="60">SCE_H_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="1436" pos:column="41">if <condition pos:line="1436" pos:column="44">(<expr><name pos:line="1436" pos:column="45">inScriptType</name> <op:operator pos:line="1436" pos:column="58">==</op:operator> <name pos:line="1436" pos:column="61">eNonHtmlScript</name></expr>)</condition><then pos:line="1436" pos:column="76"> <block pos:line="1436" pos:column="77">{
						<expr_stmt><expr><name pos:line="1437" pos:column="49">state</name> <op:operator pos:line="1437" pos:column="55">=</op:operator> <call><name pos:line="1437" pos:column="57">StateForScript</name><argument_list pos:line="1437" pos:column="71">(<argument><expr><name pos:line="1437" pos:column="72">scriptLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1438" pos:column="43">else <block pos:line="1438" pos:column="48">{
						<expr_stmt><expr><name pos:line="1439" pos:column="49">state</name> <op:operator pos:line="1439" pos:column="55">=</op:operator> <name pos:line="1439" pos:column="57">SCE_H_DEFAULT</name></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><name pos:line="1441" pos:column="41">tagOpened</name> <op:operator pos:line="1441" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="1441" pos:column="53">false</lit:literal></expr>;</expr_stmt>
					<if pos:line="1442" pos:column="41">if <condition pos:line="1442" pos:column="44">(<expr><op:operator pos:line="1442" pos:column="45">!</op:operator><name pos:line="1442" pos:column="46">tagDontFold</name></expr>)</condition><then pos:line="1442" pos:column="58"> <block pos:line="1442" pos:column="59">{
						<if pos:line="1443" pos:column="49">if <condition pos:line="1443" pos:column="52">(<expr><name pos:line="1443" pos:column="53">tagClosing</name></expr>)</condition><then pos:line="1443" pos:column="64"> <block pos:line="1443" pos:column="65">{
							<expr_stmt><expr><name pos:line="1444" pos:column="57">levelCurrent</name><op:operator pos:line="1444" pos:column="69">--</op:operator></expr>;</expr_stmt>
						}</block></then> <else pos:line="1445" pos:column="51">else <block pos:line="1445" pos:column="56">{
							<expr_stmt><expr><name pos:line="1446" pos:column="57">levelCurrent</name><op:operator pos:line="1446" pos:column="69">++</op:operator></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="1449" pos:column="41">tagClosing</name> <op:operator pos:line="1449" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="1449" pos:column="54">false</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="1450" pos:column="35">else <if pos:line="1450" pos:column="40">if <condition pos:line="1450" pos:column="43">(<expr><name pos:line="1450" pos:column="44">ch</name> <op:operator pos:line="1450" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1450" pos:column="50">'='</lit:literal></expr>)</condition><then pos:line="1450" pos:column="54"> <block pos:line="1450" pos:column="55">{
					<expr_stmt><expr><call><name><name pos:line="1451" pos:column="41">styler</name><op:operator pos:line="1451" pos:column="47">.</op:operator><name pos:line="1451" pos:column="48">ColourTo</name></name><argument_list pos:line="1451" pos:column="56">(<argument><expr><name pos:line="1451" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1451" pos:column="60">SCE_H_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1452" pos:column="41">state</name> <op:operator pos:line="1452" pos:column="47">=</op:operator> <name pos:line="1452" pos:column="49">SCE_H_VALUE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1453" pos:column="35">else <block pos:line="1453" pos:column="40">{
					<expr_stmt><expr><name pos:line="1454" pos:column="41">state</name> <op:operator pos:line="1454" pos:column="47">=</op:operator> <name pos:line="1454" pos:column="49">SCE_H_OTHER</name></expr>;</expr_stmt>
				}</block></else></if></else></if>
			}</block></then></if>
			<break pos:line="1457" pos:column="25">break;</break>
		</case><case pos:line="1458" pos:column="17">case <expr><name pos:line="1458" pos:column="22">SCE_H_OTHER</name></expr>:
			<if pos:line="1459" pos:column="25">if <condition pos:line="1459" pos:column="28">(<expr><name pos:line="1459" pos:column="29">ch</name> <op:operator pos:line="1459" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1459" pos:column="35">'&gt;'</lit:literal></expr>)</condition><then pos:line="1459" pos:column="39"> <block pos:line="1459" pos:column="40">{
				<expr_stmt><expr><call><name><name pos:line="1460" pos:column="33">styler</name><op:operator pos:line="1460" pos:column="39">.</op:operator><name pos:line="1460" pos:column="40">ColourTo</name></name><argument_list pos:line="1460" pos:column="48">(<argument><expr><name pos:line="1460" pos:column="49">i</name> <op:operator pos:line="1460" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1460" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1460" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1461" pos:column="33">styler</name><op:operator pos:line="1461" pos:column="39">.</op:operator><name pos:line="1461" pos:column="40">ColourTo</name></name><argument_list pos:line="1461" pos:column="48">(<argument><expr><name pos:line="1461" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1461" pos:column="52">SCE_H_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1462" pos:column="33">if <condition pos:line="1462" pos:column="36">(<expr><name pos:line="1462" pos:column="37">inScriptType</name> <op:operator pos:line="1462" pos:column="50">==</op:operator> <name pos:line="1462" pos:column="53">eNonHtmlScript</name></expr>)</condition><then pos:line="1462" pos:column="68"> <block pos:line="1462" pos:column="69">{
					<expr_stmt><expr><name pos:line="1463" pos:column="41">state</name> <op:operator pos:line="1463" pos:column="47">=</op:operator> <call><name pos:line="1463" pos:column="49">StateForScript</name><argument_list pos:line="1463" pos:column="63">(<argument><expr><name pos:line="1463" pos:column="64">scriptLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1464" pos:column="35">else <block pos:line="1464" pos:column="40">{
					<expr_stmt><expr><name pos:line="1465" pos:column="41">state</name> <op:operator pos:line="1465" pos:column="47">=</op:operator> <name pos:line="1465" pos:column="49">SCE_H_DEFAULT</name></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name pos:line="1467" pos:column="33">tagOpened</name> <op:operator pos:line="1467" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="1467" pos:column="45">false</lit:literal></expr>;</expr_stmt>
				<if pos:line="1468" pos:column="33">if <condition pos:line="1468" pos:column="36">(<expr><op:operator pos:line="1468" pos:column="37">!</op:operator><name pos:line="1468" pos:column="38">tagDontFold</name></expr>)</condition><then pos:line="1468" pos:column="50"> <block pos:line="1468" pos:column="51">{
					<if pos:line="1469" pos:column="41">if <condition pos:line="1469" pos:column="44">(<expr><name pos:line="1469" pos:column="45">tagClosing</name></expr>)</condition><then pos:line="1469" pos:column="56"> <block pos:line="1469" pos:column="57">{
						<expr_stmt><expr><name pos:line="1470" pos:column="49">levelCurrent</name><op:operator pos:line="1470" pos:column="61">--</op:operator></expr>;</expr_stmt>
					}</block></then> <else pos:line="1471" pos:column="43">else <block pos:line="1471" pos:column="48">{
						<expr_stmt><expr><name pos:line="1472" pos:column="49">levelCurrent</name><op:operator pos:line="1472" pos:column="61">++</op:operator></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="1475" pos:column="33">tagClosing</name> <op:operator pos:line="1475" pos:column="44">=</op:operator> <lit:literal type="boolean" pos:line="1475" pos:column="46">false</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="1476" pos:column="27">else <if pos:line="1476" pos:column="32">if <condition pos:line="1476" pos:column="35">(<expr><name pos:line="1476" pos:column="36">ch</name> <op:operator pos:line="1476" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1476" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="1476" pos:column="47"> <block pos:line="1476" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1477" pos:column="33">styler</name><op:operator pos:line="1477" pos:column="39">.</op:operator><name pos:line="1477" pos:column="40">ColourTo</name></name><argument_list pos:line="1477" pos:column="48">(<argument><expr><name pos:line="1477" pos:column="49">i</name> <op:operator pos:line="1477" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1477" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1477" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1478" pos:column="33">state</name> <op:operator pos:line="1478" pos:column="39">=</op:operator> <name pos:line="1478" pos:column="41">SCE_H_DOUBLESTRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1479" pos:column="27">else <if pos:line="1479" pos:column="32">if <condition pos:line="1479" pos:column="35">(<expr><name pos:line="1479" pos:column="36">ch</name> <op:operator pos:line="1479" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1479" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="1479" pos:column="47"> <block pos:line="1479" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1480" pos:column="33">styler</name><op:operator pos:line="1480" pos:column="39">.</op:operator><name pos:line="1480" pos:column="40">ColourTo</name></name><argument_list pos:line="1480" pos:column="48">(<argument><expr><name pos:line="1480" pos:column="49">i</name> <op:operator pos:line="1480" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1480" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1480" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1481" pos:column="33">state</name> <op:operator pos:line="1481" pos:column="39">=</op:operator> <name pos:line="1481" pos:column="41">SCE_H_SINGLESTRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1482" pos:column="27">else <if pos:line="1482" pos:column="32">if <condition pos:line="1482" pos:column="35">(<expr><name pos:line="1482" pos:column="36">ch</name> <op:operator pos:line="1482" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1482" pos:column="42">'='</lit:literal></expr>)</condition><then pos:line="1482" pos:column="46"> <block pos:line="1482" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="1483" pos:column="33">styler</name><op:operator pos:line="1483" pos:column="39">.</op:operator><name pos:line="1483" pos:column="40">ColourTo</name></name><argument_list pos:line="1483" pos:column="48">(<argument><expr><name pos:line="1483" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1483" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1484" pos:column="33">state</name> <op:operator pos:line="1484" pos:column="39">=</op:operator> <name pos:line="1484" pos:column="41">SCE_H_VALUE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1485" pos:column="27">else <if pos:line="1485" pos:column="32">if <condition pos:line="1485" pos:column="35">(<expr><name pos:line="1485" pos:column="36">ch</name> <op:operator pos:line="1485" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1485" pos:column="42">'/'</lit:literal> <op:operator pos:line="1485" pos:column="46">&amp;&amp;</op:operator> <name pos:line="1485" pos:column="49">chNext</name> <op:operator pos:line="1485" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="1485" pos:column="59">'&gt;'</lit:literal></expr>)</condition><then pos:line="1485" pos:column="63"> <block pos:line="1485" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="1486" pos:column="33">styler</name><op:operator pos:line="1486" pos:column="39">.</op:operator><name pos:line="1486" pos:column="40">ColourTo</name></name><argument_list pos:line="1486" pos:column="48">(<argument><expr><name pos:line="1486" pos:column="49">i</name> <op:operator pos:line="1486" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1486" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1486" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1487" pos:column="33">styler</name><op:operator pos:line="1487" pos:column="39">.</op:operator><name pos:line="1487" pos:column="40">ColourTo</name></name><argument_list pos:line="1487" pos:column="48">(<argument><expr><name pos:line="1487" pos:column="49">i</name> <op:operator pos:line="1487" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="1487" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1487" pos:column="56">SCE_H_TAGEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1488" pos:column="33">i</name><op:operator pos:line="1488" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1489" pos:column="33">ch</name> <op:operator pos:line="1489" pos:column="36">=</op:operator> <name pos:line="1489" pos:column="38">chNext</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1490" pos:column="33">state</name> <op:operator pos:line="1490" pos:column="39">=</op:operator> <name pos:line="1490" pos:column="41">SCE_H_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1491" pos:column="33">tagOpened</name> <op:operator pos:line="1491" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="1491" pos:column="45">false</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="1492" pos:column="27">else <if pos:line="1492" pos:column="32">if <condition pos:line="1492" pos:column="35">(<expr><name pos:line="1492" pos:column="36">ch</name> <op:operator pos:line="1492" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1492" pos:column="42">'?'</lit:literal> <op:operator pos:line="1492" pos:column="46">&amp;&amp;</op:operator> <name pos:line="1492" pos:column="49">chNext</name> <op:operator pos:line="1492" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="1492" pos:column="59">'&gt;'</lit:literal></expr>)</condition><then pos:line="1492" pos:column="63"> <block pos:line="1492" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="1493" pos:column="33">styler</name><op:operator pos:line="1493" pos:column="39">.</op:operator><name pos:line="1493" pos:column="40">ColourTo</name></name><argument_list pos:line="1493" pos:column="48">(<argument><expr><name pos:line="1493" pos:column="49">i</name> <op:operator pos:line="1493" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1493" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1493" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1494" pos:column="33">styler</name><op:operator pos:line="1494" pos:column="39">.</op:operator><name pos:line="1494" pos:column="40">ColourTo</name></name><argument_list pos:line="1494" pos:column="48">(<argument><expr><name pos:line="1494" pos:column="49">i</name> <op:operator pos:line="1494" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="1494" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1494" pos:column="56">SCE_H_XMLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1495" pos:column="33">i</name><op:operator pos:line="1495" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1496" pos:column="33">ch</name> <op:operator pos:line="1496" pos:column="36">=</op:operator> <name pos:line="1496" pos:column="38">chNext</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1497" pos:column="33">state</name> <op:operator pos:line="1497" pos:column="39">=</op:operator> <name pos:line="1497" pos:column="41">SCE_H_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1498" pos:column="27">else <if pos:line="1498" pos:column="32">if <condition pos:line="1498" pos:column="35">(<expr><call><name><name pos:line="1498" pos:column="36">setHTMLWord</name><op:operator pos:line="1498" pos:column="47">.</op:operator><name pos:line="1498" pos:column="48">Contains</name></name><argument_list pos:line="1498" pos:column="56">(<argument><expr><name pos:line="1498" pos:column="57">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1498" pos:column="61"> <block pos:line="1498" pos:column="62">{
				<expr_stmt><expr><call><name><name pos:line="1499" pos:column="33">styler</name><op:operator pos:line="1499" pos:column="39">.</op:operator><name pos:line="1499" pos:column="40">ColourTo</name></name><argument_list pos:line="1499" pos:column="48">(<argument><expr><name pos:line="1499" pos:column="49">i</name> <op:operator pos:line="1499" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1499" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1499" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1500" pos:column="33">state</name> <op:operator pos:line="1500" pos:column="39">=</op:operator> <name pos:line="1500" pos:column="41">SCE_H_ATTRIBUTE</name></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="1502" pos:column="25">break;</break>
		</case><case pos:line="1503" pos:column="17">case <expr><name pos:line="1503" pos:column="22">SCE_H_DOUBLESTRING</name></expr>:
			<if pos:line="1504" pos:column="25">if <condition pos:line="1504" pos:column="28">(<expr><name pos:line="1504" pos:column="29">ch</name> <op:operator pos:line="1504" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1504" pos:column="35">'\"'</lit:literal></expr>)</condition><then pos:line="1504" pos:column="40"> <block pos:line="1504" pos:column="41">{
				<if pos:line="1505" pos:column="33">if <condition pos:line="1505" pos:column="36">(<expr><name pos:line="1505" pos:column="37">inScriptType</name> <op:operator pos:line="1505" pos:column="50">==</op:operator> <name pos:line="1505" pos:column="53">eNonHtmlScript</name></expr>)</condition><then pos:line="1505" pos:column="68"> <block pos:line="1505" pos:column="69">{
					<expr_stmt><expr><name pos:line="1506" pos:column="41">scriptLanguage</name> <op:operator pos:line="1506" pos:column="56">=</op:operator> <call><name pos:line="1506" pos:column="58">segIsScriptingIndicator</name><argument_list pos:line="1506" pos:column="81">(<argument><expr><name pos:line="1506" pos:column="82">styler</name></expr></argument>, <argument><expr><call><name><name pos:line="1506" pos:column="90">styler</name><op:operator pos:line="1506" pos:column="96">.</op:operator><name pos:line="1506" pos:column="97">GetStartSegment</name></name><argument_list pos:line="1506" pos:column="112">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1506" pos:column="116">i</name></expr></argument>, <argument><expr><name pos:line="1506" pos:column="119">scriptLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="1508" pos:column="33">styler</name><op:operator pos:line="1508" pos:column="39">.</op:operator><name pos:line="1508" pos:column="40">ColourTo</name></name><argument_list pos:line="1508" pos:column="48">(<argument><expr><name pos:line="1508" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1508" pos:column="52">SCE_H_DOUBLESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1509" pos:column="33">state</name> <op:operator pos:line="1509" pos:column="39">=</op:operator> <name pos:line="1509" pos:column="41">SCE_H_OTHER</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1511" pos:column="25">break;</break>
		</case><case pos:line="1512" pos:column="17">case <expr><name pos:line="1512" pos:column="22">SCE_H_SINGLESTRING</name></expr>:
			<if pos:line="1513" pos:column="25">if <condition pos:line="1513" pos:column="28">(<expr><name pos:line="1513" pos:column="29">ch</name> <op:operator pos:line="1513" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1513" pos:column="35">'\''</lit:literal></expr>)</condition><then pos:line="1513" pos:column="40"> <block pos:line="1513" pos:column="41">{
				<if pos:line="1514" pos:column="33">if <condition pos:line="1514" pos:column="36">(<expr><name pos:line="1514" pos:column="37">inScriptType</name> <op:operator pos:line="1514" pos:column="50">==</op:operator> <name pos:line="1514" pos:column="53">eNonHtmlScript</name></expr>)</condition><then pos:line="1514" pos:column="68"> <block pos:line="1514" pos:column="69">{
					<expr_stmt><expr><name pos:line="1515" pos:column="41">scriptLanguage</name> <op:operator pos:line="1515" pos:column="56">=</op:operator> <call><name pos:line="1515" pos:column="58">segIsScriptingIndicator</name><argument_list pos:line="1515" pos:column="81">(<argument><expr><name pos:line="1515" pos:column="82">styler</name></expr></argument>, <argument><expr><call><name><name pos:line="1515" pos:column="90">styler</name><op:operator pos:line="1515" pos:column="96">.</op:operator><name pos:line="1515" pos:column="97">GetStartSegment</name></name><argument_list pos:line="1515" pos:column="112">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1515" pos:column="116">i</name></expr></argument>, <argument><expr><name pos:line="1515" pos:column="119">scriptLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="1517" pos:column="33">styler</name><op:operator pos:line="1517" pos:column="39">.</op:operator><name pos:line="1517" pos:column="40">ColourTo</name></name><argument_list pos:line="1517" pos:column="48">(<argument><expr><name pos:line="1517" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1517" pos:column="52">SCE_H_SINGLESTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1518" pos:column="33">state</name> <op:operator pos:line="1518" pos:column="39">=</op:operator> <name pos:line="1518" pos:column="41">SCE_H_OTHER</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1520" pos:column="25">break;</break>
		</case><case pos:line="1521" pos:column="17">case <expr><name pos:line="1521" pos:column="22">SCE_H_VALUE</name></expr>:
			<if pos:line="1522" pos:column="25">if <condition pos:line="1522" pos:column="28">(<expr><op:operator pos:line="1522" pos:column="29">!</op:operator><call><name><name pos:line="1522" pos:column="30">setHTMLWord</name><op:operator pos:line="1522" pos:column="41">.</op:operator><name pos:line="1522" pos:column="42">Contains</name></name><argument_list pos:line="1522" pos:column="50">(<argument><expr><name pos:line="1522" pos:column="51">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1522" pos:column="55"> <block pos:line="1522" pos:column="56">{
				<if pos:line="1523" pos:column="33">if <condition pos:line="1523" pos:column="36">(<expr><name pos:line="1523" pos:column="37">ch</name> <op:operator pos:line="1523" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1523" pos:column="43">'\"'</lit:literal> <op:operator pos:line="1523" pos:column="48">&amp;&amp;</op:operator> <name pos:line="1523" pos:column="51">chPrev</name> <op:operator pos:line="1523" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="1523" pos:column="61">'='</lit:literal></expr>)</condition><then pos:line="1523" pos:column="65"> <block pos:line="1523" pos:column="66">{
					<comment type="line" pos:line="1524" pos:column="41">// Should really test for being first character</comment>
					<expr_stmt><expr><name pos:line="1525" pos:column="41">state</name> <op:operator pos:line="1525" pos:column="47">=</op:operator> <name pos:line="1525" pos:column="49">SCE_H_DOUBLESTRING</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1526" pos:column="35">else <if pos:line="1526" pos:column="40">if <condition pos:line="1526" pos:column="43">(<expr><name pos:line="1526" pos:column="44">ch</name> <op:operator pos:line="1526" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1526" pos:column="50">'\''</lit:literal> <op:operator pos:line="1526" pos:column="55">&amp;&amp;</op:operator> <name pos:line="1526" pos:column="58">chPrev</name> <op:operator pos:line="1526" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="1526" pos:column="68">'='</lit:literal></expr>)</condition><then pos:line="1526" pos:column="72"> <block pos:line="1526" pos:column="73">{
					<expr_stmt><expr><name pos:line="1527" pos:column="41">state</name> <op:operator pos:line="1527" pos:column="47">=</op:operator> <name pos:line="1527" pos:column="49">SCE_H_SINGLESTRING</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1528" pos:column="35">else <block pos:line="1528" pos:column="40">{
					<if pos:line="1529" pos:column="41">if <condition pos:line="1529" pos:column="44">(<expr><call><name pos:line="1529" pos:column="45">IsNumber</name><argument_list pos:line="1529" pos:column="53">(<argument><expr><call><name><name pos:line="1529" pos:column="54">styler</name><op:operator pos:line="1529" pos:column="60">.</op:operator><name pos:line="1529" pos:column="61">GetStartSegment</name></name><argument_list pos:line="1529" pos:column="76">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1529" pos:column="80">styler</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1529" pos:column="88"> <block pos:line="1529" pos:column="89">{
						<expr_stmt><expr><call><name><name pos:line="1530" pos:column="49">styler</name><op:operator pos:line="1530" pos:column="55">.</op:operator><name pos:line="1530" pos:column="56">ColourTo</name></name><argument_list pos:line="1530" pos:column="64">(<argument><expr><name pos:line="1530" pos:column="65">i</name> <op:operator pos:line="1530" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="1530" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1530" pos:column="72">SCE_H_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1531" pos:column="43">else <block pos:line="1531" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="1532" pos:column="49">styler</name><op:operator pos:line="1532" pos:column="55">.</op:operator><name pos:line="1532" pos:column="56">ColourTo</name></name><argument_list pos:line="1532" pos:column="64">(<argument><expr><name pos:line="1532" pos:column="65">i</name> <op:operator pos:line="1532" pos:column="67">-</op:operator> <lit:literal type="number" pos:line="1532" pos:column="69">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1532" pos:column="72">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<if pos:line="1534" pos:column="41">if <condition pos:line="1534" pos:column="44">(<expr><name pos:line="1534" pos:column="45">ch</name> <op:operator pos:line="1534" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1534" pos:column="51">'&gt;'</lit:literal></expr>)</condition><then pos:line="1534" pos:column="55"> <block pos:line="1534" pos:column="56">{
						<expr_stmt><expr><call><name><name pos:line="1535" pos:column="49">styler</name><op:operator pos:line="1535" pos:column="55">.</op:operator><name pos:line="1535" pos:column="56">ColourTo</name></name><argument_list pos:line="1535" pos:column="64">(<argument><expr><name pos:line="1535" pos:column="65">i</name></expr></argument>, <argument><expr><name pos:line="1535" pos:column="68">SCE_H_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="1536" pos:column="49">if <condition pos:line="1536" pos:column="52">(<expr><name pos:line="1536" pos:column="53">inScriptType</name> <op:operator pos:line="1536" pos:column="66">==</op:operator> <name pos:line="1536" pos:column="69">eNonHtmlScript</name></expr>)</condition><then pos:line="1536" pos:column="84"> <block pos:line="1536" pos:column="85">{
							<expr_stmt><expr><name pos:line="1537" pos:column="57">state</name> <op:operator pos:line="1537" pos:column="63">=</op:operator> <call><name pos:line="1537" pos:column="65">StateForScript</name><argument_list pos:line="1537" pos:column="79">(<argument><expr><name pos:line="1537" pos:column="80">scriptLanguage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="1538" pos:column="51">else <block pos:line="1538" pos:column="56">{
							<expr_stmt><expr><name pos:line="1539" pos:column="57">state</name> <op:operator pos:line="1539" pos:column="63">=</op:operator> <name pos:line="1539" pos:column="65">SCE_H_DEFAULT</name></expr>;</expr_stmt>
						}</block></else></if>
						<expr_stmt><expr><name pos:line="1541" pos:column="49">tagOpened</name> <op:operator pos:line="1541" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="1541" pos:column="61">false</lit:literal></expr>;</expr_stmt>
						<if pos:line="1542" pos:column="49">if <condition pos:line="1542" pos:column="52">(<expr><op:operator pos:line="1542" pos:column="53">!</op:operator><name pos:line="1542" pos:column="54">tagDontFold</name></expr>)</condition><then pos:line="1542" pos:column="66"> <block pos:line="1542" pos:column="67">{
							<if pos:line="1543" pos:column="57">if <condition pos:line="1543" pos:column="60">(<expr><name pos:line="1543" pos:column="61">tagClosing</name></expr>)</condition><then pos:line="1543" pos:column="72"> <block pos:line="1543" pos:column="73">{
								<expr_stmt><expr><name pos:line="1544" pos:column="65">levelCurrent</name><op:operator pos:line="1544" pos:column="77">--</op:operator></expr>;</expr_stmt>
							}</block></then> <else pos:line="1545" pos:column="59">else <block pos:line="1545" pos:column="64">{
								<expr_stmt><expr><name pos:line="1546" pos:column="65">levelCurrent</name><op:operator pos:line="1546" pos:column="77">++</op:operator></expr>;</expr_stmt>
							}</block></else></if>
						}</block></then></if>
						<expr_stmt><expr><name pos:line="1549" pos:column="49">tagClosing</name> <op:operator pos:line="1549" pos:column="60">=</op:operator> <lit:literal type="boolean" pos:line="1549" pos:column="62">false</lit:literal></expr>;</expr_stmt>
					}</block></then> <else pos:line="1550" pos:column="43">else <block pos:line="1550" pos:column="48">{
						<expr_stmt><expr><name pos:line="1551" pos:column="49">state</name> <op:operator pos:line="1551" pos:column="55">=</op:operator> <name pos:line="1551" pos:column="57">SCE_H_OTHER</name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></else></if></else></if>
			}</block></then></if>
			<break pos:line="1555" pos:column="25">break;</break>
		</case><case pos:line="1556" pos:column="17">case <expr><name pos:line="1556" pos:column="22">SCE_HJ_DEFAULT</name></expr>:
		</case><case pos:line="1557" pos:column="17">case <expr><name pos:line="1557" pos:column="22">SCE_HJ_START</name></expr>:
		</case><case pos:line="1558" pos:column="17">case <expr><name pos:line="1558" pos:column="22">SCE_HJ_SYMBOLS</name></expr>:
			<if pos:line="1559" pos:column="25">if <condition pos:line="1559" pos:column="28">(<expr><call><name pos:line="1559" pos:column="29">IsAWordStart</name><argument_list pos:line="1559" pos:column="41">(<argument><expr><name pos:line="1559" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1559" pos:column="46"> <block pos:line="1559" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="1560" pos:column="33">styler</name><op:operator pos:line="1560" pos:column="39">.</op:operator><name pos:line="1560" pos:column="40">ColourTo</name></name><argument_list pos:line="1560" pos:column="48">(<argument><expr><name pos:line="1560" pos:column="49">i</name> <op:operator pos:line="1560" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1560" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1560" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1561" pos:column="33">state</name> <op:operator pos:line="1561" pos:column="39">=</op:operator> <name pos:line="1561" pos:column="41">SCE_HJ_WORD</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1562" pos:column="27">else <if pos:line="1562" pos:column="32">if <condition pos:line="1562" pos:column="35">(<expr><name pos:line="1562" pos:column="36">ch</name> <op:operator pos:line="1562" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1562" pos:column="42">'/'</lit:literal> <op:operator pos:line="1562" pos:column="46">&amp;&amp;</op:operator> <name pos:line="1562" pos:column="49">chNext</name> <op:operator pos:line="1562" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="1562" pos:column="59">'*'</lit:literal></expr>)</condition><then pos:line="1562" pos:column="63"> <block pos:line="1562" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="1563" pos:column="33">styler</name><op:operator pos:line="1563" pos:column="39">.</op:operator><name pos:line="1563" pos:column="40">ColourTo</name></name><argument_list pos:line="1563" pos:column="48">(<argument><expr><name pos:line="1563" pos:column="49">i</name> <op:operator pos:line="1563" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1563" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1563" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1564" pos:column="33">if <condition pos:line="1564" pos:column="36">(<expr><name pos:line="1564" pos:column="37">chNext2</name> <op:operator pos:line="1564" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="1564" pos:column="48">'*'</lit:literal></expr>)</condition><then pos:line="1564" pos:column="52">
					<expr_stmt><expr><name pos:line="1565" pos:column="41">state</name> <op:operator pos:line="1565" pos:column="47">=</op:operator> <name pos:line="1565" pos:column="49">SCE_HJ_COMMENTDOC</name></expr>;</expr_stmt></then>
				<else pos:line="1566" pos:column="33">else
					<expr_stmt><expr><name pos:line="1567" pos:column="41">state</name> <op:operator pos:line="1567" pos:column="47">=</op:operator> <name pos:line="1567" pos:column="49">SCE_HJ_COMMENT</name></expr>;</expr_stmt></else></if>
			}</block></then> <else pos:line="1568" pos:column="27">else <if pos:line="1568" pos:column="32">if <condition pos:line="1568" pos:column="35">(<expr><name pos:line="1568" pos:column="36">ch</name> <op:operator pos:line="1568" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1568" pos:column="42">'/'</lit:literal> <op:operator pos:line="1568" pos:column="46">&amp;&amp;</op:operator> <name pos:line="1568" pos:column="49">chNext</name> <op:operator pos:line="1568" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="1568" pos:column="59">'/'</lit:literal></expr>)</condition><then pos:line="1568" pos:column="63"> <block pos:line="1568" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="1569" pos:column="33">styler</name><op:operator pos:line="1569" pos:column="39">.</op:operator><name pos:line="1569" pos:column="40">ColourTo</name></name><argument_list pos:line="1569" pos:column="48">(<argument><expr><name pos:line="1569" pos:column="49">i</name> <op:operator pos:line="1569" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1569" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1569" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1570" pos:column="33">state</name> <op:operator pos:line="1570" pos:column="39">=</op:operator> <name pos:line="1570" pos:column="41">SCE_HJ_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1571" pos:column="27">else <if pos:line="1571" pos:column="32">if <condition pos:line="1571" pos:column="35">(<expr><name pos:line="1571" pos:column="36">ch</name> <op:operator pos:line="1571" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1571" pos:column="42">'/'</lit:literal> <op:operator pos:line="1571" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="1571" pos:column="49">isOKBeforeRE</name><argument_list pos:line="1571" pos:column="61">(<argument><expr><name pos:line="1571" pos:column="62">chPrevNonWhite</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1571" pos:column="78"> <block pos:line="1571" pos:column="79">{
				<expr_stmt><expr><call><name><name pos:line="1572" pos:column="33">styler</name><op:operator pos:line="1572" pos:column="39">.</op:operator><name pos:line="1572" pos:column="40">ColourTo</name></name><argument_list pos:line="1572" pos:column="48">(<argument><expr><name pos:line="1572" pos:column="49">i</name> <op:operator pos:line="1572" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1572" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1572" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1573" pos:column="33">state</name> <op:operator pos:line="1573" pos:column="39">=</op:operator> <name pos:line="1573" pos:column="41">SCE_HJ_REGEX</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1574" pos:column="27">else <if pos:line="1574" pos:column="32">if <condition pos:line="1574" pos:column="35">(<expr><name pos:line="1574" pos:column="36">ch</name> <op:operator pos:line="1574" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1574" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="1574" pos:column="47"> <block pos:line="1574" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1575" pos:column="33">styler</name><op:operator pos:line="1575" pos:column="39">.</op:operator><name pos:line="1575" pos:column="40">ColourTo</name></name><argument_list pos:line="1575" pos:column="48">(<argument><expr><name pos:line="1575" pos:column="49">i</name> <op:operator pos:line="1575" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1575" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1575" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1576" pos:column="33">state</name> <op:operator pos:line="1576" pos:column="39">=</op:operator> <name pos:line="1576" pos:column="41">SCE_HJ_DOUBLESTRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1577" pos:column="27">else <if pos:line="1577" pos:column="32">if <condition pos:line="1577" pos:column="35">(<expr><name pos:line="1577" pos:column="36">ch</name> <op:operator pos:line="1577" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1577" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="1577" pos:column="47"> <block pos:line="1577" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1578" pos:column="33">styler</name><op:operator pos:line="1578" pos:column="39">.</op:operator><name pos:line="1578" pos:column="40">ColourTo</name></name><argument_list pos:line="1578" pos:column="48">(<argument><expr><name pos:line="1578" pos:column="49">i</name> <op:operator pos:line="1578" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1578" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1578" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1579" pos:column="33">state</name> <op:operator pos:line="1579" pos:column="39">=</op:operator> <name pos:line="1579" pos:column="41">SCE_HJ_SINGLESTRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1580" pos:column="27">else <if pos:line="1580" pos:column="32">if <condition pos:line="1580" pos:column="35">(<expr><op:operator pos:line="1580" pos:column="36">(</op:operator><name pos:line="1580" pos:column="37">ch</name> <op:operator pos:line="1580" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1580" pos:column="43">'&lt;'</lit:literal><op:operator pos:line="1580" pos:column="46">)</op:operator> <op:operator pos:line="1580" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="1580" pos:column="51">(</op:operator><name pos:line="1580" pos:column="52">chNext</name> <op:operator pos:line="1580" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1580" pos:column="62">'!'</lit:literal><op:operator pos:line="1580" pos:column="65">)</op:operator> <op:operator pos:line="1580" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="1580" pos:column="70">(</op:operator><name pos:line="1580" pos:column="71">chNext2</name> <op:operator pos:line="1580" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="1580" pos:column="82">'-'</lit:literal><op:operator pos:line="1580" pos:column="85">)</op:operator> <op:operator pos:line="1580" pos:column="87">&amp;&amp;</op:operator>
			           <call><name><name pos:line="1581" pos:column="36">styler</name><op:operator pos:line="1581" pos:column="42">.</op:operator><name pos:line="1581" pos:column="43">SafeGetCharAt</name></name><argument_list pos:line="1581" pos:column="56">(<argument><expr><name pos:line="1581" pos:column="57">i</name> <op:operator pos:line="1581" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="1581" pos:column="61">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1581" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="1581" pos:column="67">'-'</lit:literal></expr>)</condition><then pos:line="1581" pos:column="71"> <block pos:line="1581" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="1582" pos:column="33">styler</name><op:operator pos:line="1582" pos:column="39">.</op:operator><name pos:line="1582" pos:column="40">ColourTo</name></name><argument_list pos:line="1582" pos:column="48">(<argument><expr><name pos:line="1582" pos:column="49">i</name> <op:operator pos:line="1582" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1582" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1582" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1583" pos:column="33">state</name> <op:operator pos:line="1583" pos:column="39">=</op:operator> <name pos:line="1583" pos:column="41">SCE_HJ_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1584" pos:column="27">else <if pos:line="1584" pos:column="32">if <condition pos:line="1584" pos:column="35">(<expr><op:operator pos:line="1584" pos:column="36">(</op:operator><name pos:line="1584" pos:column="37">ch</name> <op:operator pos:line="1584" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1584" pos:column="43">'-'</lit:literal><op:operator pos:line="1584" pos:column="46">)</op:operator> <op:operator pos:line="1584" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="1584" pos:column="51">(</op:operator><name pos:line="1584" pos:column="52">chNext</name> <op:operator pos:line="1584" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1584" pos:column="62">'-'</lit:literal><op:operator pos:line="1584" pos:column="65">)</op:operator> <op:operator pos:line="1584" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="1584" pos:column="70">(</op:operator><name pos:line="1584" pos:column="71">chNext2</name> <op:operator pos:line="1584" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="1584" pos:column="82">'&gt;'</lit:literal><op:operator pos:line="1584" pos:column="85">)</op:operator></expr>)</condition><then pos:line="1584" pos:column="87"> <block pos:line="1584" pos:column="88">{
				<expr_stmt><expr><call><name><name pos:line="1585" pos:column="33">styler</name><op:operator pos:line="1585" pos:column="39">.</op:operator><name pos:line="1585" pos:column="40">ColourTo</name></name><argument_list pos:line="1585" pos:column="48">(<argument><expr><name pos:line="1585" pos:column="49">i</name> <op:operator pos:line="1585" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1585" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1585" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1586" pos:column="33">state</name> <op:operator pos:line="1586" pos:column="39">=</op:operator> <name pos:line="1586" pos:column="41">SCE_HJ_COMMENTLINE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1587" pos:column="33">i</name> <op:operator pos:line="1587" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="1587" pos:column="38">2</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="1588" pos:column="27">else <if pos:line="1588" pos:column="32">if <condition pos:line="1588" pos:column="35">(<expr><call><name pos:line="1588" pos:column="36">IsOperator</name><argument_list pos:line="1588" pos:column="46">(<argument><expr><name pos:line="1588" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1588" pos:column="51"> <block pos:line="1588" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="1589" pos:column="33">styler</name><op:operator pos:line="1589" pos:column="39">.</op:operator><name pos:line="1589" pos:column="40">ColourTo</name></name><argument_list pos:line="1589" pos:column="48">(<argument><expr><name pos:line="1589" pos:column="49">i</name> <op:operator pos:line="1589" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1589" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1589" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1590" pos:column="33">styler</name><op:operator pos:line="1590" pos:column="39">.</op:operator><name pos:line="1590" pos:column="40">ColourTo</name></name><argument_list pos:line="1590" pos:column="48">(<argument><expr><name pos:line="1590" pos:column="49">i</name></expr></argument>, <argument><expr><call><name pos:line="1590" pos:column="52">statePrintForState</name><argument_list pos:line="1590" pos:column="70">(<argument><expr><name pos:line="1590" pos:column="71">SCE_HJ_SYMBOLS</name></expr></argument>, <argument><expr><name pos:line="1590" pos:column="87">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1591" pos:column="33">state</name> <op:operator pos:line="1591" pos:column="39">=</op:operator> <name pos:line="1591" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1592" pos:column="27">else <if pos:line="1592" pos:column="32">if <condition pos:line="1592" pos:column="35">(<expr><op:operator pos:line="1592" pos:column="36">(</op:operator><name pos:line="1592" pos:column="37">ch</name> <op:operator pos:line="1592" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1592" pos:column="43">' '</lit:literal><op:operator pos:line="1592" pos:column="46">)</op:operator> <op:operator pos:line="1592" pos:column="48">||</op:operator> <op:operator pos:line="1592" pos:column="51">(</op:operator><name pos:line="1592" pos:column="52">ch</name> <op:operator pos:line="1592" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1592" pos:column="58">'\t'</lit:literal><op:operator pos:line="1592" pos:column="62">)</op:operator></expr>)</condition><then pos:line="1592" pos:column="64"> <block pos:line="1592" pos:column="65">{
				<if pos:line="1593" pos:column="33">if <condition pos:line="1593" pos:column="36">(<expr><name pos:line="1593" pos:column="37">state</name> <op:operator pos:line="1593" pos:column="43">==</op:operator> <name pos:line="1593" pos:column="46">SCE_HJ_START</name></expr>)</condition><then pos:line="1593" pos:column="59"> <block pos:line="1593" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="1594" pos:column="41">styler</name><op:operator pos:line="1594" pos:column="47">.</op:operator><name pos:line="1594" pos:column="48">ColourTo</name></name><argument_list pos:line="1594" pos:column="56">(<argument><expr><name pos:line="1594" pos:column="57">i</name> <op:operator pos:line="1594" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1594" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1594" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1595" pos:column="41">state</name> <op:operator pos:line="1595" pos:column="47">=</op:operator> <name pos:line="1595" pos:column="49">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="1598" pos:column="25">break;</break>
		</case><case pos:line="1599" pos:column="17">case <expr><name pos:line="1599" pos:column="22">SCE_HJ_WORD</name></expr>:
			<if pos:line="1600" pos:column="25">if <condition pos:line="1600" pos:column="28">(<expr><op:operator pos:line="1600" pos:column="29">!</op:operator><call><name pos:line="1600" pos:column="30">IsAWordChar</name><argument_list pos:line="1600" pos:column="41">(<argument><expr><name pos:line="1600" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1600" pos:column="46"> <block pos:line="1600" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="1601" pos:column="33">classifyWordHTJS</name><argument_list pos:line="1601" pos:column="49">(<argument><expr><call><name><name pos:line="1601" pos:column="50">styler</name><op:operator pos:line="1601" pos:column="56">.</op:operator><name pos:line="1601" pos:column="57">GetStartSegment</name></name><argument_list pos:line="1601" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1601" pos:column="76">i</name> <op:operator pos:line="1601" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="1601" pos:column="80">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1601" pos:column="83">keywords2</name></expr></argument>, <argument><expr><name pos:line="1601" pos:column="94">styler</name></expr></argument>, <argument><expr><name pos:line="1601" pos:column="102">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="1602" pos:column="33">//styler.ColourTo(i - 1, eHTJSKeyword);</comment>
				<expr_stmt><expr><name pos:line="1603" pos:column="33">state</name> <op:operator pos:line="1603" pos:column="39">=</op:operator> <name pos:line="1603" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
				<if pos:line="1604" pos:column="33">if <condition pos:line="1604" pos:column="36">(<expr><name pos:line="1604" pos:column="37">ch</name> <op:operator pos:line="1604" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1604" pos:column="43">'/'</lit:literal> <op:operator pos:line="1604" pos:column="47">&amp;&amp;</op:operator> <name pos:line="1604" pos:column="50">chNext</name> <op:operator pos:line="1604" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="1604" pos:column="60">'*'</lit:literal></expr>)</condition><then pos:line="1604" pos:column="64"> <block pos:line="1604" pos:column="65">{
					<if pos:line="1605" pos:column="41">if <condition pos:line="1605" pos:column="44">(<expr><name pos:line="1605" pos:column="45">chNext2</name> <op:operator pos:line="1605" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="1605" pos:column="56">'*'</lit:literal></expr>)</condition><then pos:line="1605" pos:column="60">
						<expr_stmt><expr><name pos:line="1606" pos:column="49">state</name> <op:operator pos:line="1606" pos:column="55">=</op:operator> <name pos:line="1606" pos:column="57">SCE_HJ_COMMENTDOC</name></expr>;</expr_stmt></then>
					<else pos:line="1607" pos:column="41">else
						<expr_stmt><expr><name pos:line="1608" pos:column="49">state</name> <op:operator pos:line="1608" pos:column="55">=</op:operator> <name pos:line="1608" pos:column="57">SCE_HJ_COMMENT</name></expr>;</expr_stmt></else></if>
				}</block></then> <else pos:line="1609" pos:column="35">else <if pos:line="1609" pos:column="40">if <condition pos:line="1609" pos:column="43">(<expr><name pos:line="1609" pos:column="44">ch</name> <op:operator pos:line="1609" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1609" pos:column="50">'/'</lit:literal> <op:operator pos:line="1609" pos:column="54">&amp;&amp;</op:operator> <name pos:line="1609" pos:column="57">chNext</name> <op:operator pos:line="1609" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="1609" pos:column="67">'/'</lit:literal></expr>)</condition><then pos:line="1609" pos:column="71"> <block pos:line="1609" pos:column="72">{
					<expr_stmt><expr><name pos:line="1610" pos:column="41">state</name> <op:operator pos:line="1610" pos:column="47">=</op:operator> <name pos:line="1610" pos:column="49">SCE_HJ_COMMENTLINE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1611" pos:column="35">else <if pos:line="1611" pos:column="40">if <condition pos:line="1611" pos:column="43">(<expr><name pos:line="1611" pos:column="44">ch</name> <op:operator pos:line="1611" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1611" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="1611" pos:column="55"> <block pos:line="1611" pos:column="56">{
					<expr_stmt><expr><name pos:line="1612" pos:column="41">state</name> <op:operator pos:line="1612" pos:column="47">=</op:operator> <name pos:line="1612" pos:column="49">SCE_HJ_DOUBLESTRING</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1613" pos:column="35">else <if pos:line="1613" pos:column="40">if <condition pos:line="1613" pos:column="43">(<expr><name pos:line="1613" pos:column="44">ch</name> <op:operator pos:line="1613" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1613" pos:column="50">'\''</lit:literal></expr>)</condition><then pos:line="1613" pos:column="55"> <block pos:line="1613" pos:column="56">{
					<expr_stmt><expr><name pos:line="1614" pos:column="41">state</name> <op:operator pos:line="1614" pos:column="47">=</op:operator> <name pos:line="1614" pos:column="49">SCE_HJ_SINGLESTRING</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1615" pos:column="35">else <if pos:line="1615" pos:column="40">if <condition pos:line="1615" pos:column="43">(<expr><op:operator pos:line="1615" pos:column="44">(</op:operator><name pos:line="1615" pos:column="45">ch</name> <op:operator pos:line="1615" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1615" pos:column="51">'-'</lit:literal><op:operator pos:line="1615" pos:column="54">)</op:operator> <op:operator pos:line="1615" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="1615" pos:column="59">(</op:operator><name pos:line="1615" pos:column="60">chNext</name> <op:operator pos:line="1615" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="1615" pos:column="70">'-'</lit:literal><op:operator pos:line="1615" pos:column="73">)</op:operator> <op:operator pos:line="1615" pos:column="75">&amp;&amp;</op:operator> <op:operator pos:line="1615" pos:column="78">(</op:operator><name pos:line="1615" pos:column="79">chNext2</name> <op:operator pos:line="1615" pos:column="87">==</op:operator> <lit:literal type="char" pos:line="1615" pos:column="90">'&gt;'</lit:literal><op:operator pos:line="1615" pos:column="93">)</op:operator></expr>)</condition><then pos:line="1615" pos:column="95"> <block pos:line="1615" pos:column="96">{
					<expr_stmt><expr><call><name><name pos:line="1616" pos:column="41">styler</name><op:operator pos:line="1616" pos:column="47">.</op:operator><name pos:line="1616" pos:column="48">ColourTo</name></name><argument_list pos:line="1616" pos:column="56">(<argument><expr><name pos:line="1616" pos:column="57">i</name> <op:operator pos:line="1616" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1616" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1616" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1617" pos:column="41">state</name> <op:operator pos:line="1617" pos:column="47">=</op:operator> <name pos:line="1617" pos:column="49">SCE_HJ_COMMENTLINE</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1618" pos:column="41">i</name> <op:operator pos:line="1618" pos:column="43">+=</op:operator> <lit:literal type="number" pos:line="1618" pos:column="46">2</lit:literal></expr>;</expr_stmt>
				}</block></then> <else pos:line="1619" pos:column="35">else <if pos:line="1619" pos:column="40">if <condition pos:line="1619" pos:column="43">(<expr><call><name pos:line="1619" pos:column="44">IsOperator</name><argument_list pos:line="1619" pos:column="54">(<argument><expr><name pos:line="1619" pos:column="55">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1619" pos:column="59"> <block pos:line="1619" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="1620" pos:column="41">styler</name><op:operator pos:line="1620" pos:column="47">.</op:operator><name pos:line="1620" pos:column="48">ColourTo</name></name><argument_list pos:line="1620" pos:column="56">(<argument><expr><name pos:line="1620" pos:column="57">i</name></expr></argument>, <argument><expr><call><name pos:line="1620" pos:column="60">statePrintForState</name><argument_list pos:line="1620" pos:column="78">(<argument><expr><name pos:line="1620" pos:column="79">SCE_HJ_SYMBOLS</name></expr></argument>, <argument><expr><name pos:line="1620" pos:column="95">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1621" pos:column="41">state</name> <op:operator pos:line="1621" pos:column="47">=</op:operator> <name pos:line="1621" pos:column="49">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if>
			}</block></then></if>
			<break pos:line="1624" pos:column="25">break;</break>
		</case><case pos:line="1625" pos:column="17">case <expr><name pos:line="1625" pos:column="22">SCE_HJ_COMMENT</name></expr>:
		</case><case pos:line="1626" pos:column="17">case <expr><name pos:line="1626" pos:column="22">SCE_HJ_COMMENTDOC</name></expr>:
			<if pos:line="1627" pos:column="25">if <condition pos:line="1627" pos:column="28">(<expr><name pos:line="1627" pos:column="29">ch</name> <op:operator pos:line="1627" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1627" pos:column="35">'/'</lit:literal> <op:operator pos:line="1627" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1627" pos:column="42">chPrev</name> <op:operator pos:line="1627" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="1627" pos:column="52">'*'</lit:literal></expr>)</condition><then pos:line="1627" pos:column="56"> <block pos:line="1627" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="1628" pos:column="33">styler</name><op:operator pos:line="1628" pos:column="39">.</op:operator><name pos:line="1628" pos:column="40">ColourTo</name></name><argument_list pos:line="1628" pos:column="48">(<argument><expr><name pos:line="1628" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1628" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1629" pos:column="33">state</name> <op:operator pos:line="1629" pos:column="39">=</op:operator> <name pos:line="1629" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1630" pos:column="33">ch</name> <op:operator pos:line="1630" pos:column="36">=</op:operator> <lit:literal type="char" pos:line="1630" pos:column="38">' '</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1632" pos:column="25">break;</break>
		</case><case pos:line="1633" pos:column="17">case <expr><name pos:line="1633" pos:column="22">SCE_HJ_COMMENTLINE</name></expr>:
			<if pos:line="1634" pos:column="25">if <condition pos:line="1634" pos:column="28">(<expr><name pos:line="1634" pos:column="29">ch</name> <op:operator pos:line="1634" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1634" pos:column="35">'\r'</lit:literal> <op:operator pos:line="1634" pos:column="40">||</op:operator> <name pos:line="1634" pos:column="43">ch</name> <op:operator pos:line="1634" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="1634" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="1634" pos:column="54"> <block pos:line="1634" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="1635" pos:column="33">styler</name><op:operator pos:line="1635" pos:column="39">.</op:operator><name pos:line="1635" pos:column="40">ColourTo</name></name><argument_list pos:line="1635" pos:column="48">(<argument><expr><name pos:line="1635" pos:column="49">i</name> <op:operator pos:line="1635" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1635" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><call><name pos:line="1635" pos:column="56">statePrintForState</name><argument_list pos:line="1635" pos:column="74">(<argument><expr><name pos:line="1635" pos:column="75">SCE_HJ_COMMENTLINE</name></expr></argument>, <argument><expr><name pos:line="1635" pos:column="95">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1636" pos:column="33">state</name> <op:operator pos:line="1636" pos:column="39">=</op:operator> <name pos:line="1636" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1637" pos:column="33">ch</name> <op:operator pos:line="1637" pos:column="36">=</op:operator> <lit:literal type="char" pos:line="1637" pos:column="38">' '</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1639" pos:column="25">break;</break>
		</case><case pos:line="1640" pos:column="17">case <expr><name pos:line="1640" pos:column="22">SCE_HJ_DOUBLESTRING</name></expr>:
			<if pos:line="1641" pos:column="25">if <condition pos:line="1641" pos:column="28">(<expr><name pos:line="1641" pos:column="29">ch</name> <op:operator pos:line="1641" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1641" pos:column="35">'\\'</lit:literal></expr>)</condition><then pos:line="1641" pos:column="40"> <block pos:line="1641" pos:column="41">{
				<if pos:line="1642" pos:column="33">if <condition pos:line="1642" pos:column="36">(<expr><name pos:line="1642" pos:column="37">chNext</name> <op:operator pos:line="1642" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1642" pos:column="47">'\"'</lit:literal> <op:operator pos:line="1642" pos:column="52">||</op:operator> <name pos:line="1642" pos:column="55">chNext</name> <op:operator pos:line="1642" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1642" pos:column="65">'\''</lit:literal> <op:operator pos:line="1642" pos:column="70">||</op:operator> <name pos:line="1642" pos:column="73">chNext</name> <op:operator pos:line="1642" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="1642" pos:column="83">'\\'</lit:literal></expr>)</condition><then pos:line="1642" pos:column="88"> <block pos:line="1642" pos:column="89">{
					<expr_stmt><expr><name pos:line="1643" pos:column="41">i</name><op:operator pos:line="1643" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="1645" pos:column="27">else <if pos:line="1645" pos:column="32">if <condition pos:line="1645" pos:column="35">(<expr><name pos:line="1645" pos:column="36">ch</name> <op:operator pos:line="1645" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1645" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="1645" pos:column="47"> <block pos:line="1645" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1646" pos:column="33">styler</name><op:operator pos:line="1646" pos:column="39">.</op:operator><name pos:line="1646" pos:column="40">ColourTo</name></name><argument_list pos:line="1646" pos:column="48">(<argument><expr><name pos:line="1646" pos:column="49">i</name></expr></argument>, <argument><expr><call><name pos:line="1646" pos:column="52">statePrintForState</name><argument_list pos:line="1646" pos:column="70">(<argument><expr><name pos:line="1646" pos:column="71">SCE_HJ_DOUBLESTRING</name></expr></argument>, <argument><expr><name pos:line="1646" pos:column="92">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1647" pos:column="33">state</name> <op:operator pos:line="1647" pos:column="39">=</op:operator> <name pos:line="1647" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1648" pos:column="27">else <if pos:line="1648" pos:column="32">if <condition pos:line="1648" pos:column="35">(<expr><op:operator pos:line="1648" pos:column="36">(</op:operator><name pos:line="1648" pos:column="37">inScriptType</name> <op:operator pos:line="1648" pos:column="50">==</op:operator> <name pos:line="1648" pos:column="53">eNonHtmlScript</name><op:operator pos:line="1648" pos:column="67">)</op:operator> <op:operator pos:line="1648" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="1648" pos:column="72">(</op:operator><name pos:line="1648" pos:column="73">ch</name> <op:operator pos:line="1648" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="1648" pos:column="79">'-'</lit:literal><op:operator pos:line="1648" pos:column="82">)</op:operator> <op:operator pos:line="1648" pos:column="84">&amp;&amp;</op:operator> <op:operator pos:line="1648" pos:column="87">(</op:operator><name pos:line="1648" pos:column="88">chNext</name> <op:operator pos:line="1648" pos:column="95">==</op:operator> <lit:literal type="char" pos:line="1648" pos:column="98">'-'</lit:literal><op:operator pos:line="1648" pos:column="101">)</op:operator> <op:operator pos:line="1648" pos:column="103">&amp;&amp;</op:operator> <op:operator pos:line="1648" pos:column="106">(</op:operator><name pos:line="1648" pos:column="107">chNext2</name> <op:operator pos:line="1648" pos:column="115">==</op:operator> <lit:literal type="char" pos:line="1648" pos:column="118">'&gt;'</lit:literal><op:operator pos:line="1648" pos:column="121">)</op:operator></expr>)</condition><then pos:line="1648" pos:column="123"> <block pos:line="1648" pos:column="124">{
				<expr_stmt><expr><call><name><name pos:line="1649" pos:column="33">styler</name><op:operator pos:line="1649" pos:column="39">.</op:operator><name pos:line="1649" pos:column="40">ColourTo</name></name><argument_list pos:line="1649" pos:column="48">(<argument><expr><name pos:line="1649" pos:column="49">i</name> <op:operator pos:line="1649" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1649" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1649" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1650" pos:column="33">state</name> <op:operator pos:line="1650" pos:column="39">=</op:operator> <name pos:line="1650" pos:column="41">SCE_HJ_COMMENTLINE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1651" pos:column="33">i</name> <op:operator pos:line="1651" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="1651" pos:column="38">2</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="1652" pos:column="27">else <if pos:line="1652" pos:column="32">if <condition pos:line="1652" pos:column="35">(<expr><call><name pos:line="1652" pos:column="36">isLineEnd</name><argument_list pos:line="1652" pos:column="45">(<argument><expr><name pos:line="1652" pos:column="46">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1652" pos:column="50"> <block pos:line="1652" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="1653" pos:column="33">styler</name><op:operator pos:line="1653" pos:column="39">.</op:operator><name pos:line="1653" pos:column="40">ColourTo</name></name><argument_list pos:line="1653" pos:column="48">(<argument><expr><name pos:line="1653" pos:column="49">i</name> <op:operator pos:line="1653" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1653" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1653" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1654" pos:column="33">state</name> <op:operator pos:line="1654" pos:column="39">=</op:operator> <name pos:line="1654" pos:column="41">SCE_HJ_STRINGEOL</name></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
			<break pos:line="1656" pos:column="25">break;</break>
		</case><case pos:line="1657" pos:column="17">case <expr><name pos:line="1657" pos:column="22">SCE_HJ_SINGLESTRING</name></expr>:
			<if pos:line="1658" pos:column="25">if <condition pos:line="1658" pos:column="28">(<expr><name pos:line="1658" pos:column="29">ch</name> <op:operator pos:line="1658" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1658" pos:column="35">'\\'</lit:literal></expr>)</condition><then pos:line="1658" pos:column="40"> <block pos:line="1658" pos:column="41">{
				<if pos:line="1659" pos:column="33">if <condition pos:line="1659" pos:column="36">(<expr><name pos:line="1659" pos:column="37">chNext</name> <op:operator pos:line="1659" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1659" pos:column="47">'\"'</lit:literal> <op:operator pos:line="1659" pos:column="52">||</op:operator> <name pos:line="1659" pos:column="55">chNext</name> <op:operator pos:line="1659" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1659" pos:column="65">'\''</lit:literal> <op:operator pos:line="1659" pos:column="70">||</op:operator> <name pos:line="1659" pos:column="73">chNext</name> <op:operator pos:line="1659" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="1659" pos:column="83">'\\'</lit:literal></expr>)</condition><then pos:line="1659" pos:column="88"> <block pos:line="1659" pos:column="89">{
					<expr_stmt><expr><name pos:line="1660" pos:column="41">i</name><op:operator pos:line="1660" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="1662" pos:column="27">else <if pos:line="1662" pos:column="32">if <condition pos:line="1662" pos:column="35">(<expr><name pos:line="1662" pos:column="36">ch</name> <op:operator pos:line="1662" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1662" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="1662" pos:column="47"> <block pos:line="1662" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1663" pos:column="33">styler</name><op:operator pos:line="1663" pos:column="39">.</op:operator><name pos:line="1663" pos:column="40">ColourTo</name></name><argument_list pos:line="1663" pos:column="48">(<argument><expr><name pos:line="1663" pos:column="49">i</name></expr></argument>, <argument><expr><call><name pos:line="1663" pos:column="52">statePrintForState</name><argument_list pos:line="1663" pos:column="70">(<argument><expr><name pos:line="1663" pos:column="71">SCE_HJ_SINGLESTRING</name></expr></argument>, <argument><expr><name pos:line="1663" pos:column="92">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1664" pos:column="33">state</name> <op:operator pos:line="1664" pos:column="39">=</op:operator> <name pos:line="1664" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1665" pos:column="27">else <if pos:line="1665" pos:column="32">if <condition pos:line="1665" pos:column="35">(<expr><op:operator pos:line="1665" pos:column="36">(</op:operator><name pos:line="1665" pos:column="37">inScriptType</name> <op:operator pos:line="1665" pos:column="50">==</op:operator> <name pos:line="1665" pos:column="53">eNonHtmlScript</name><op:operator pos:line="1665" pos:column="67">)</op:operator> <op:operator pos:line="1665" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="1665" pos:column="72">(</op:operator><name pos:line="1665" pos:column="73">ch</name> <op:operator pos:line="1665" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="1665" pos:column="79">'-'</lit:literal><op:operator pos:line="1665" pos:column="82">)</op:operator> <op:operator pos:line="1665" pos:column="84">&amp;&amp;</op:operator> <op:operator pos:line="1665" pos:column="87">(</op:operator><name pos:line="1665" pos:column="88">chNext</name> <op:operator pos:line="1665" pos:column="95">==</op:operator> <lit:literal type="char" pos:line="1665" pos:column="98">'-'</lit:literal><op:operator pos:line="1665" pos:column="101">)</op:operator> <op:operator pos:line="1665" pos:column="103">&amp;&amp;</op:operator> <op:operator pos:line="1665" pos:column="106">(</op:operator><name pos:line="1665" pos:column="107">chNext2</name> <op:operator pos:line="1665" pos:column="115">==</op:operator> <lit:literal type="char" pos:line="1665" pos:column="118">'&gt;'</lit:literal><op:operator pos:line="1665" pos:column="121">)</op:operator></expr>)</condition><then pos:line="1665" pos:column="123"> <block pos:line="1665" pos:column="124">{
				<expr_stmt><expr><call><name><name pos:line="1666" pos:column="33">styler</name><op:operator pos:line="1666" pos:column="39">.</op:operator><name pos:line="1666" pos:column="40">ColourTo</name></name><argument_list pos:line="1666" pos:column="48">(<argument><expr><name pos:line="1666" pos:column="49">i</name> <op:operator pos:line="1666" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1666" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1666" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1667" pos:column="33">state</name> <op:operator pos:line="1667" pos:column="39">=</op:operator> <name pos:line="1667" pos:column="41">SCE_HJ_COMMENTLINE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1668" pos:column="33">i</name> <op:operator pos:line="1668" pos:column="35">+=</op:operator> <lit:literal type="number" pos:line="1668" pos:column="38">2</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="1669" pos:column="27">else <if pos:line="1669" pos:column="32">if <condition pos:line="1669" pos:column="35">(<expr><call><name pos:line="1669" pos:column="36">isLineEnd</name><argument_list pos:line="1669" pos:column="45">(<argument><expr><name pos:line="1669" pos:column="46">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1669" pos:column="50"> <block pos:line="1669" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="1670" pos:column="33">styler</name><op:operator pos:line="1670" pos:column="39">.</op:operator><name pos:line="1670" pos:column="40">ColourTo</name></name><argument_list pos:line="1670" pos:column="48">(<argument><expr><name pos:line="1670" pos:column="49">i</name> <op:operator pos:line="1670" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1670" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1670" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1671" pos:column="33">if <condition pos:line="1671" pos:column="36">(<expr><name pos:line="1671" pos:column="37">chPrev</name> <op:operator pos:line="1671" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="1671" pos:column="47">'\\'</lit:literal> <op:operator pos:line="1671" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="1671" pos:column="55">(</op:operator><name pos:line="1671" pos:column="56">chPrev2</name> <op:operator pos:line="1671" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="1671" pos:column="67">'\\'</lit:literal> <op:operator pos:line="1671" pos:column="72">||</op:operator> <name pos:line="1671" pos:column="75">chPrev</name> <op:operator pos:line="1671" pos:column="82">!=</op:operator> <lit:literal type="char" pos:line="1671" pos:column="85">'\r'</lit:literal> <op:operator pos:line="1671" pos:column="90">||</op:operator> <name pos:line="1671" pos:column="93">ch</name> <op:operator pos:line="1671" pos:column="96">!=</op:operator> <lit:literal type="char" pos:line="1671" pos:column="99">'\n'</lit:literal><op:operator pos:line="1671" pos:column="103">)</op:operator></expr>)</condition><then pos:line="1671" pos:column="105"> <block pos:line="1671" pos:column="106">{
					<expr_stmt><expr><name pos:line="1672" pos:column="41">state</name> <op:operator pos:line="1672" pos:column="47">=</op:operator> <name pos:line="1672" pos:column="49">SCE_HJ_STRINGEOL</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if></else></if></else></if>
			<break pos:line="1675" pos:column="25">break;</break>
		</case><case pos:line="1676" pos:column="17">case <expr><name pos:line="1676" pos:column="22">SCE_HJ_STRINGEOL</name></expr>:
			<if pos:line="1677" pos:column="25">if <condition pos:line="1677" pos:column="28">(<expr><op:operator pos:line="1677" pos:column="29">!</op:operator><call><name pos:line="1677" pos:column="30">isLineEnd</name><argument_list pos:line="1677" pos:column="39">(<argument><expr><name pos:line="1677" pos:column="40">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1677" pos:column="44"> <block pos:line="1677" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="1678" pos:column="33">styler</name><op:operator pos:line="1678" pos:column="39">.</op:operator><name pos:line="1678" pos:column="40">ColourTo</name></name><argument_list pos:line="1678" pos:column="48">(<argument><expr><name pos:line="1678" pos:column="49">i</name> <op:operator pos:line="1678" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1678" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1678" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1679" pos:column="33">state</name> <op:operator pos:line="1679" pos:column="39">=</op:operator> <name pos:line="1679" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1680" pos:column="27">else <if pos:line="1680" pos:column="32">if <condition pos:line="1680" pos:column="35">(<expr><op:operator pos:line="1680" pos:column="36">!</op:operator><call><name pos:line="1680" pos:column="37">isLineEnd</name><argument_list pos:line="1680" pos:column="46">(<argument><expr><name pos:line="1680" pos:column="47">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1680" pos:column="55"> <block pos:line="1680" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="1681" pos:column="33">styler</name><op:operator pos:line="1681" pos:column="39">.</op:operator><name pos:line="1681" pos:column="40">ColourTo</name></name><argument_list pos:line="1681" pos:column="48">(<argument><expr><name pos:line="1681" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1681" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1682" pos:column="33">state</name> <op:operator pos:line="1682" pos:column="39">=</op:operator> <name pos:line="1682" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="1684" pos:column="25">break;</break>
		</case><case pos:line="1685" pos:column="17">case <expr><name pos:line="1685" pos:column="22">SCE_HJ_REGEX</name></expr>:
			<if pos:line="1686" pos:column="25">if <condition pos:line="1686" pos:column="28">(<expr><name pos:line="1686" pos:column="29">ch</name> <op:operator pos:line="1686" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1686" pos:column="35">'\r'</lit:literal> <op:operator pos:line="1686" pos:column="40">||</op:operator> <name pos:line="1686" pos:column="43">ch</name> <op:operator pos:line="1686" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="1686" pos:column="49">'\n'</lit:literal> <op:operator pos:line="1686" pos:column="54">||</op:operator> <name pos:line="1686" pos:column="57">ch</name> <op:operator pos:line="1686" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="1686" pos:column="63">'/'</lit:literal></expr>)</condition><then pos:line="1686" pos:column="67"> <block pos:line="1686" pos:column="68">{
				<if pos:line="1687" pos:column="33">if <condition pos:line="1687" pos:column="36">(<expr><name pos:line="1687" pos:column="37">ch</name> <op:operator pos:line="1687" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1687" pos:column="43">'/'</lit:literal></expr>)</condition><then pos:line="1687" pos:column="47"> <block pos:line="1687" pos:column="48">{
					<while pos:line="1688" pos:column="41">while <condition pos:line="1688" pos:column="47">(<expr><call><name pos:line="1688" pos:column="48">isascii</name><argument_list pos:line="1688" pos:column="55">(<argument><expr><name pos:line="1688" pos:column="56">chNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="1688" pos:column="64">&amp;&amp;</op:operator> <call><name pos:line="1688" pos:column="67">islower</name><argument_list pos:line="1688" pos:column="74">(<argument><expr><name pos:line="1688" pos:column="75">chNext</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1688" pos:column="84">{   <comment type="line" pos:line="1688" pos:column="88">// gobble regex flags</comment>
						<expr_stmt><expr><name pos:line="1689" pos:column="49">i</name><op:operator pos:line="1689" pos:column="50">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1690" pos:column="49">ch</name> <op:operator pos:line="1690" pos:column="52">=</op:operator> <name pos:line="1690" pos:column="54">chNext</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1691" pos:column="49">chNext</name> <op:operator pos:line="1691" pos:column="56">=</op:operator> <call><name><name pos:line="1691" pos:column="58">static_cast</name><argument_list pos:line="1691" pos:column="69">&lt;<argument><expr><name pos:line="1691" pos:column="70">unsigned</name> <name pos:line="1691" pos:column="79">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1691" pos:column="84">(<argument><expr><call><name><name pos:line="1691" pos:column="85">styler</name><op:operator pos:line="1691" pos:column="91">.</op:operator><name pos:line="1691" pos:column="92">SafeGetCharAt</name></name><argument_list pos:line="1691" pos:column="105">(<argument><expr><name pos:line="1691" pos:column="106">i</name> <op:operator pos:line="1691" pos:column="108">+</op:operator> <lit:literal type="number" pos:line="1691" pos:column="110">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></while>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="1694" pos:column="33">styler</name><op:operator pos:line="1694" pos:column="39">.</op:operator><name pos:line="1694" pos:column="40">ColourTo</name></name><argument_list pos:line="1694" pos:column="48">(<argument><expr><name pos:line="1694" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1694" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1695" pos:column="33">state</name> <op:operator pos:line="1695" pos:column="39">=</op:operator> <name pos:line="1695" pos:column="41">SCE_HJ_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1696" pos:column="27">else <if pos:line="1696" pos:column="32">if <condition pos:line="1696" pos:column="35">(<expr><name pos:line="1696" pos:column="36">ch</name> <op:operator pos:line="1696" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1696" pos:column="42">'\\'</lit:literal></expr>)</condition><then pos:line="1696" pos:column="47"> <block pos:line="1696" pos:column="48">{
				<comment type="line" pos:line="1697" pos:column="33">// Gobble up the quoted character</comment>
				<if pos:line="1698" pos:column="33">if <condition pos:line="1698" pos:column="36">(<expr><name pos:line="1698" pos:column="37">chNext</name> <op:operator pos:line="1698" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1698" pos:column="47">'\\'</lit:literal> <op:operator pos:line="1698" pos:column="52">||</op:operator> <name pos:line="1698" pos:column="55">chNext</name> <op:operator pos:line="1698" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1698" pos:column="65">'/'</lit:literal></expr>)</condition><then pos:line="1698" pos:column="69"> <block pos:line="1698" pos:column="70">{
					<expr_stmt><expr><name pos:line="1699" pos:column="41">i</name><op:operator pos:line="1699" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1700" pos:column="41">ch</name> <op:operator pos:line="1700" pos:column="44">=</op:operator> <name pos:line="1700" pos:column="46">chNext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1701" pos:column="41">chNext</name> <op:operator pos:line="1701" pos:column="48">=</op:operator> <call><name><name pos:line="1701" pos:column="50">static_cast</name><argument_list pos:line="1701" pos:column="61">&lt;<argument><expr><name pos:line="1701" pos:column="62">unsigned</name> <name pos:line="1701" pos:column="71">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1701" pos:column="76">(<argument><expr><call><name><name pos:line="1701" pos:column="77">styler</name><op:operator pos:line="1701" pos:column="83">.</op:operator><name pos:line="1701" pos:column="84">SafeGetCharAt</name></name><argument_list pos:line="1701" pos:column="97">(<argument><expr><name pos:line="1701" pos:column="98">i</name> <op:operator pos:line="1701" pos:column="100">+</op:operator> <lit:literal type="number" pos:line="1701" pos:column="102">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if>
			<break pos:line="1704" pos:column="25">break;</break>
		</case><case pos:line="1705" pos:column="17">case <expr><name pos:line="1705" pos:column="22">SCE_HB_DEFAULT</name></expr>:
		</case><case pos:line="1706" pos:column="17">case <expr><name pos:line="1706" pos:column="22">SCE_HB_START</name></expr>:
			<if pos:line="1707" pos:column="25">if <condition pos:line="1707" pos:column="28">(<expr><call><name pos:line="1707" pos:column="29">IsAWordStart</name><argument_list pos:line="1707" pos:column="41">(<argument><expr><name pos:line="1707" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1707" pos:column="46"> <block pos:line="1707" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="1708" pos:column="33">styler</name><op:operator pos:line="1708" pos:column="39">.</op:operator><name pos:line="1708" pos:column="40">ColourTo</name></name><argument_list pos:line="1708" pos:column="48">(<argument><expr><name pos:line="1708" pos:column="49">i</name> <op:operator pos:line="1708" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1708" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1708" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1709" pos:column="33">state</name> <op:operator pos:line="1709" pos:column="39">=</op:operator> <name pos:line="1709" pos:column="41">SCE_HB_WORD</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1710" pos:column="27">else <if pos:line="1710" pos:column="32">if <condition pos:line="1710" pos:column="35">(<expr><name pos:line="1710" pos:column="36">ch</name> <op:operator pos:line="1710" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1710" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="1710" pos:column="47"> <block pos:line="1710" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1711" pos:column="33">styler</name><op:operator pos:line="1711" pos:column="39">.</op:operator><name pos:line="1711" pos:column="40">ColourTo</name></name><argument_list pos:line="1711" pos:column="48">(<argument><expr><name pos:line="1711" pos:column="49">i</name> <op:operator pos:line="1711" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1711" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1711" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1712" pos:column="33">state</name> <op:operator pos:line="1712" pos:column="39">=</op:operator> <name pos:line="1712" pos:column="41">SCE_HB_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1713" pos:column="27">else <if pos:line="1713" pos:column="32">if <condition pos:line="1713" pos:column="35">(<expr><name pos:line="1713" pos:column="36">ch</name> <op:operator pos:line="1713" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1713" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="1713" pos:column="47"> <block pos:line="1713" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1714" pos:column="33">styler</name><op:operator pos:line="1714" pos:column="39">.</op:operator><name pos:line="1714" pos:column="40">ColourTo</name></name><argument_list pos:line="1714" pos:column="48">(<argument><expr><name pos:line="1714" pos:column="49">i</name> <op:operator pos:line="1714" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1714" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1714" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1715" pos:column="33">state</name> <op:operator pos:line="1715" pos:column="39">=</op:operator> <name pos:line="1715" pos:column="41">SCE_HB_STRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1716" pos:column="27">else <if pos:line="1716" pos:column="32">if <condition pos:line="1716" pos:column="35">(<expr><op:operator pos:line="1716" pos:column="36">(</op:operator><name pos:line="1716" pos:column="37">ch</name> <op:operator pos:line="1716" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1716" pos:column="43">'&lt;'</lit:literal><op:operator pos:line="1716" pos:column="46">)</op:operator> <op:operator pos:line="1716" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="1716" pos:column="51">(</op:operator><name pos:line="1716" pos:column="52">chNext</name> <op:operator pos:line="1716" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1716" pos:column="62">'!'</lit:literal><op:operator pos:line="1716" pos:column="65">)</op:operator> <op:operator pos:line="1716" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="1716" pos:column="70">(</op:operator><name pos:line="1716" pos:column="71">chNext2</name> <op:operator pos:line="1716" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="1716" pos:column="82">'-'</lit:literal><op:operator pos:line="1716" pos:column="85">)</op:operator> <op:operator pos:line="1716" pos:column="87">&amp;&amp;</op:operator>
			           <call><name><name pos:line="1717" pos:column="36">styler</name><op:operator pos:line="1717" pos:column="42">.</op:operator><name pos:line="1717" pos:column="43">SafeGetCharAt</name></name><argument_list pos:line="1717" pos:column="56">(<argument><expr><name pos:line="1717" pos:column="57">i</name> <op:operator pos:line="1717" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="1717" pos:column="61">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1717" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="1717" pos:column="67">'-'</lit:literal></expr>)</condition><then pos:line="1717" pos:column="71"> <block pos:line="1717" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="1718" pos:column="33">styler</name><op:operator pos:line="1718" pos:column="39">.</op:operator><name pos:line="1718" pos:column="40">ColourTo</name></name><argument_list pos:line="1718" pos:column="48">(<argument><expr><name pos:line="1718" pos:column="49">i</name> <op:operator pos:line="1718" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1718" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1718" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1719" pos:column="33">state</name> <op:operator pos:line="1719" pos:column="39">=</op:operator> <name pos:line="1719" pos:column="41">SCE_HB_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1720" pos:column="27">else <if pos:line="1720" pos:column="32">if <condition pos:line="1720" pos:column="35">(<expr><call><name pos:line="1720" pos:column="36">IsOperator</name><argument_list pos:line="1720" pos:column="46">(<argument><expr><name pos:line="1720" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1720" pos:column="51"> <block pos:line="1720" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="1721" pos:column="33">styler</name><op:operator pos:line="1721" pos:column="39">.</op:operator><name pos:line="1721" pos:column="40">ColourTo</name></name><argument_list pos:line="1721" pos:column="48">(<argument><expr><name pos:line="1721" pos:column="49">i</name> <op:operator pos:line="1721" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1721" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1721" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1722" pos:column="33">styler</name><op:operator pos:line="1722" pos:column="39">.</op:operator><name pos:line="1722" pos:column="40">ColourTo</name></name><argument_list pos:line="1722" pos:column="48">(<argument><expr><name pos:line="1722" pos:column="49">i</name></expr></argument>, <argument><expr><call><name pos:line="1722" pos:column="52">statePrintForState</name><argument_list pos:line="1722" pos:column="70">(<argument><expr><name pos:line="1722" pos:column="71">SCE_HB_DEFAULT</name></expr></argument>, <argument><expr><name pos:line="1722" pos:column="87">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1723" pos:column="33">state</name> <op:operator pos:line="1723" pos:column="39">=</op:operator> <name pos:line="1723" pos:column="41">SCE_HB_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1724" pos:column="27">else <if pos:line="1724" pos:column="32">if <condition pos:line="1724" pos:column="35">(<expr><op:operator pos:line="1724" pos:column="36">(</op:operator><name pos:line="1724" pos:column="37">ch</name> <op:operator pos:line="1724" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1724" pos:column="43">' '</lit:literal><op:operator pos:line="1724" pos:column="46">)</op:operator> <op:operator pos:line="1724" pos:column="48">||</op:operator> <op:operator pos:line="1724" pos:column="51">(</op:operator><name pos:line="1724" pos:column="52">ch</name> <op:operator pos:line="1724" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1724" pos:column="58">'\t'</lit:literal><op:operator pos:line="1724" pos:column="62">)</op:operator></expr>)</condition><then pos:line="1724" pos:column="64"> <block pos:line="1724" pos:column="65">{
				<if pos:line="1725" pos:column="33">if <condition pos:line="1725" pos:column="36">(<expr><name pos:line="1725" pos:column="37">state</name> <op:operator pos:line="1725" pos:column="43">==</op:operator> <name pos:line="1725" pos:column="46">SCE_HB_START</name></expr>)</condition><then pos:line="1725" pos:column="59"> <block pos:line="1725" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="1726" pos:column="41">styler</name><op:operator pos:line="1726" pos:column="47">.</op:operator><name pos:line="1726" pos:column="48">ColourTo</name></name><argument_list pos:line="1726" pos:column="56">(<argument><expr><name pos:line="1726" pos:column="57">i</name> <op:operator pos:line="1726" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1726" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1726" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1727" pos:column="41">state</name> <op:operator pos:line="1727" pos:column="47">=</op:operator> <name pos:line="1727" pos:column="49">SCE_HB_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="1730" pos:column="25">break;</break>
		</case><case pos:line="1731" pos:column="17">case <expr><name pos:line="1731" pos:column="22">SCE_HB_WORD</name></expr>:
			<if pos:line="1732" pos:column="25">if <condition pos:line="1732" pos:column="28">(<expr><op:operator pos:line="1732" pos:column="29">!</op:operator><call><name pos:line="1732" pos:column="30">IsAWordChar</name><argument_list pos:line="1732" pos:column="41">(<argument><expr><name pos:line="1732" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1732" pos:column="46"> <block pos:line="1732" pos:column="47">{
				<expr_stmt><expr><name pos:line="1733" pos:column="33">state</name> <op:operator pos:line="1733" pos:column="39">=</op:operator> <call><name pos:line="1733" pos:column="41">classifyWordHTVB</name><argument_list pos:line="1733" pos:column="57">(<argument><expr><call><name><name pos:line="1733" pos:column="58">styler</name><op:operator pos:line="1733" pos:column="64">.</op:operator><name pos:line="1733" pos:column="65">GetStartSegment</name></name><argument_list pos:line="1733" pos:column="80">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1733" pos:column="84">i</name> <op:operator pos:line="1733" pos:column="86">-</op:operator> <lit:literal type="number" pos:line="1733" pos:column="88">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1733" pos:column="91">keywords3</name></expr></argument>, <argument><expr><name pos:line="1733" pos:column="102">styler</name></expr></argument>, <argument><expr><name pos:line="1733" pos:column="110">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1734" pos:column="33">if <condition pos:line="1734" pos:column="36">(<expr><name pos:line="1734" pos:column="37">state</name> <op:operator pos:line="1734" pos:column="43">==</op:operator> <name pos:line="1734" pos:column="46">SCE_HB_DEFAULT</name></expr>)</condition><then pos:line="1734" pos:column="61"> <block pos:line="1734" pos:column="62">{
					<if pos:line="1735" pos:column="41">if <condition pos:line="1735" pos:column="44">(<expr><name pos:line="1735" pos:column="45">ch</name> <op:operator pos:line="1735" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1735" pos:column="51">'\"'</lit:literal></expr>)</condition><then pos:line="1735" pos:column="56"> <block pos:line="1735" pos:column="57">{
						<expr_stmt><expr><name pos:line="1736" pos:column="49">state</name> <op:operator pos:line="1736" pos:column="55">=</op:operator> <name pos:line="1736" pos:column="57">SCE_HB_STRING</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="1737" pos:column="43">else <if pos:line="1737" pos:column="48">if <condition pos:line="1737" pos:column="51">(<expr><name pos:line="1737" pos:column="52">ch</name> <op:operator pos:line="1737" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1737" pos:column="58">'\''</lit:literal></expr>)</condition><then pos:line="1737" pos:column="63"> <block pos:line="1737" pos:column="64">{
						<expr_stmt><expr><name pos:line="1738" pos:column="49">state</name> <op:operator pos:line="1738" pos:column="55">=</op:operator> <name pos:line="1738" pos:column="57">SCE_HB_COMMENTLINE</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="1739" pos:column="43">else <if pos:line="1739" pos:column="48">if <condition pos:line="1739" pos:column="51">(<expr><call><name pos:line="1739" pos:column="52">IsOperator</name><argument_list pos:line="1739" pos:column="62">(<argument><expr><name pos:line="1739" pos:column="63">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1739" pos:column="67"> <block pos:line="1739" pos:column="68">{
						<expr_stmt><expr><call><name><name pos:line="1740" pos:column="49">styler</name><op:operator pos:line="1740" pos:column="55">.</op:operator><name pos:line="1740" pos:column="56">ColourTo</name></name><argument_list pos:line="1740" pos:column="64">(<argument><expr><name pos:line="1740" pos:column="65">i</name></expr></argument>, <argument><expr><call><name pos:line="1740" pos:column="68">statePrintForState</name><argument_list pos:line="1740" pos:column="86">(<argument><expr><name pos:line="1740" pos:column="87">SCE_HB_DEFAULT</name></expr></argument>, <argument><expr><name pos:line="1740" pos:column="103">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1741" pos:column="49">state</name> <op:operator pos:line="1741" pos:column="55">=</op:operator> <name pos:line="1741" pos:column="57">SCE_HB_DEFAULT</name></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if>
				}</block></then></if>
			}</block></then></if>
			<break pos:line="1745" pos:column="25">break;</break>
		</case><case pos:line="1746" pos:column="17">case <expr><name pos:line="1746" pos:column="22">SCE_HB_STRING</name></expr>:
			<if pos:line="1747" pos:column="25">if <condition pos:line="1747" pos:column="28">(<expr><name pos:line="1747" pos:column="29">ch</name> <op:operator pos:line="1747" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1747" pos:column="35">'\"'</lit:literal></expr>)</condition><then pos:line="1747" pos:column="40"> <block pos:line="1747" pos:column="41">{
				<expr_stmt><expr><call><name><name pos:line="1748" pos:column="33">styler</name><op:operator pos:line="1748" pos:column="39">.</op:operator><name pos:line="1748" pos:column="40">ColourTo</name></name><argument_list pos:line="1748" pos:column="48">(<argument><expr><name pos:line="1748" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1748" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1749" pos:column="33">state</name> <op:operator pos:line="1749" pos:column="39">=</op:operator> <name pos:line="1749" pos:column="41">SCE_HB_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1750" pos:column="27">else <if pos:line="1750" pos:column="32">if <condition pos:line="1750" pos:column="35">(<expr><name pos:line="1750" pos:column="36">ch</name> <op:operator pos:line="1750" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1750" pos:column="42">'\r'</lit:literal> <op:operator pos:line="1750" pos:column="47">||</op:operator> <name pos:line="1750" pos:column="50">ch</name> <op:operator pos:line="1750" pos:column="53">==</op:operator> <lit:literal type="char" pos:line="1750" pos:column="56">'\n'</lit:literal></expr>)</condition><then pos:line="1750" pos:column="61"> <block pos:line="1750" pos:column="62">{
				<expr_stmt><expr><call><name><name pos:line="1751" pos:column="33">styler</name><op:operator pos:line="1751" pos:column="39">.</op:operator><name pos:line="1751" pos:column="40">ColourTo</name></name><argument_list pos:line="1751" pos:column="48">(<argument><expr><name pos:line="1751" pos:column="49">i</name> <op:operator pos:line="1751" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1751" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1751" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1752" pos:column="33">state</name> <op:operator pos:line="1752" pos:column="39">=</op:operator> <name pos:line="1752" pos:column="41">SCE_HB_STRINGEOL</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="1754" pos:column="25">break;</break>
		</case><case pos:line="1755" pos:column="17">case <expr><name pos:line="1755" pos:column="22">SCE_HB_COMMENTLINE</name></expr>:
			<if pos:line="1756" pos:column="25">if <condition pos:line="1756" pos:column="28">(<expr><name pos:line="1756" pos:column="29">ch</name> <op:operator pos:line="1756" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1756" pos:column="35">'\r'</lit:literal> <op:operator pos:line="1756" pos:column="40">||</op:operator> <name pos:line="1756" pos:column="43">ch</name> <op:operator pos:line="1756" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="1756" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="1756" pos:column="54"> <block pos:line="1756" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="1757" pos:column="33">styler</name><op:operator pos:line="1757" pos:column="39">.</op:operator><name pos:line="1757" pos:column="40">ColourTo</name></name><argument_list pos:line="1757" pos:column="48">(<argument><expr><name pos:line="1757" pos:column="49">i</name> <op:operator pos:line="1757" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1757" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1757" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1758" pos:column="33">state</name> <op:operator pos:line="1758" pos:column="39">=</op:operator> <name pos:line="1758" pos:column="41">SCE_HB_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1760" pos:column="25">break;</break>
		</case><case pos:line="1761" pos:column="17">case <expr><name pos:line="1761" pos:column="22">SCE_HB_STRINGEOL</name></expr>:
			<if pos:line="1762" pos:column="25">if <condition pos:line="1762" pos:column="28">(<expr><op:operator pos:line="1762" pos:column="29">!</op:operator><call><name pos:line="1762" pos:column="30">isLineEnd</name><argument_list pos:line="1762" pos:column="39">(<argument><expr><name pos:line="1762" pos:column="40">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1762" pos:column="44"> <block pos:line="1762" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="1763" pos:column="33">styler</name><op:operator pos:line="1763" pos:column="39">.</op:operator><name pos:line="1763" pos:column="40">ColourTo</name></name><argument_list pos:line="1763" pos:column="48">(<argument><expr><name pos:line="1763" pos:column="49">i</name> <op:operator pos:line="1763" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1763" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1763" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1764" pos:column="33">state</name> <op:operator pos:line="1764" pos:column="39">=</op:operator> <name pos:line="1764" pos:column="41">SCE_HB_DEFAULT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1765" pos:column="27">else <if pos:line="1765" pos:column="32">if <condition pos:line="1765" pos:column="35">(<expr><op:operator pos:line="1765" pos:column="36">!</op:operator><call><name pos:line="1765" pos:column="37">isLineEnd</name><argument_list pos:line="1765" pos:column="46">(<argument><expr><name pos:line="1765" pos:column="47">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1765" pos:column="55"> <block pos:line="1765" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="1766" pos:column="33">styler</name><op:operator pos:line="1766" pos:column="39">.</op:operator><name pos:line="1766" pos:column="40">ColourTo</name></name><argument_list pos:line="1766" pos:column="48">(<argument><expr><name pos:line="1766" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1766" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1767" pos:column="33">state</name> <op:operator pos:line="1767" pos:column="39">=</op:operator> <name pos:line="1767" pos:column="41">SCE_HB_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="1769" pos:column="25">break;</break>
		</case><case pos:line="1770" pos:column="17">case <expr><name pos:line="1770" pos:column="22">SCE_HP_DEFAULT</name></expr>:
		</case><case pos:line="1771" pos:column="17">case <expr><name pos:line="1771" pos:column="22">SCE_HP_START</name></expr>:
			<if pos:line="1772" pos:column="25">if <condition pos:line="1772" pos:column="28">(<expr><call><name pos:line="1772" pos:column="29">IsAWordStart</name><argument_list pos:line="1772" pos:column="41">(<argument><expr><name pos:line="1772" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1772" pos:column="46"> <block pos:line="1772" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="1773" pos:column="33">styler</name><op:operator pos:line="1773" pos:column="39">.</op:operator><name pos:line="1773" pos:column="40">ColourTo</name></name><argument_list pos:line="1773" pos:column="48">(<argument><expr><name pos:line="1773" pos:column="49">i</name> <op:operator pos:line="1773" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1773" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1773" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1774" pos:column="33">state</name> <op:operator pos:line="1774" pos:column="39">=</op:operator> <name pos:line="1774" pos:column="41">SCE_HP_WORD</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1775" pos:column="27">else <if pos:line="1775" pos:column="32">if <condition pos:line="1775" pos:column="35">(<expr><op:operator pos:line="1775" pos:column="36">(</op:operator><name pos:line="1775" pos:column="37">ch</name> <op:operator pos:line="1775" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1775" pos:column="43">'&lt;'</lit:literal><op:operator pos:line="1775" pos:column="46">)</op:operator> <op:operator pos:line="1775" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="1775" pos:column="51">(</op:operator><name pos:line="1775" pos:column="52">chNext</name> <op:operator pos:line="1775" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1775" pos:column="62">'!'</lit:literal><op:operator pos:line="1775" pos:column="65">)</op:operator> <op:operator pos:line="1775" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="1775" pos:column="70">(</op:operator><name pos:line="1775" pos:column="71">chNext2</name> <op:operator pos:line="1775" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="1775" pos:column="82">'-'</lit:literal><op:operator pos:line="1775" pos:column="85">)</op:operator> <op:operator pos:line="1775" pos:column="87">&amp;&amp;</op:operator>
			           <call><name><name pos:line="1776" pos:column="36">styler</name><op:operator pos:line="1776" pos:column="42">.</op:operator><name pos:line="1776" pos:column="43">SafeGetCharAt</name></name><argument_list pos:line="1776" pos:column="56">(<argument><expr><name pos:line="1776" pos:column="57">i</name> <op:operator pos:line="1776" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="1776" pos:column="61">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1776" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="1776" pos:column="67">'-'</lit:literal></expr>)</condition><then pos:line="1776" pos:column="71"> <block pos:line="1776" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="1777" pos:column="33">styler</name><op:operator pos:line="1777" pos:column="39">.</op:operator><name pos:line="1777" pos:column="40">ColourTo</name></name><argument_list pos:line="1777" pos:column="48">(<argument><expr><name pos:line="1777" pos:column="49">i</name> <op:operator pos:line="1777" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1777" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1777" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1778" pos:column="33">state</name> <op:operator pos:line="1778" pos:column="39">=</op:operator> <name pos:line="1778" pos:column="41">SCE_HP_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1779" pos:column="27">else <if pos:line="1779" pos:column="32">if <condition pos:line="1779" pos:column="35">(<expr><name pos:line="1779" pos:column="36">ch</name> <op:operator pos:line="1779" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1779" pos:column="42">'#'</lit:literal></expr>)</condition><then pos:line="1779" pos:column="46"> <block pos:line="1779" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="1780" pos:column="33">styler</name><op:operator pos:line="1780" pos:column="39">.</op:operator><name pos:line="1780" pos:column="40">ColourTo</name></name><argument_list pos:line="1780" pos:column="48">(<argument><expr><name pos:line="1780" pos:column="49">i</name> <op:operator pos:line="1780" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1780" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1780" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1781" pos:column="33">state</name> <op:operator pos:line="1781" pos:column="39">=</op:operator> <name pos:line="1781" pos:column="41">SCE_HP_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1782" pos:column="27">else <if pos:line="1782" pos:column="32">if <condition pos:line="1782" pos:column="35">(<expr><name pos:line="1782" pos:column="36">ch</name> <op:operator pos:line="1782" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1782" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="1782" pos:column="47"> <block pos:line="1782" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1783" pos:column="33">styler</name><op:operator pos:line="1783" pos:column="39">.</op:operator><name pos:line="1783" pos:column="40">ColourTo</name></name><argument_list pos:line="1783" pos:column="48">(<argument><expr><name pos:line="1783" pos:column="49">i</name> <op:operator pos:line="1783" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1783" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1783" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1784" pos:column="33">if <condition pos:line="1784" pos:column="36">(<expr><name pos:line="1784" pos:column="37">chNext</name> <op:operator pos:line="1784" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1784" pos:column="47">'\"'</lit:literal> <op:operator pos:line="1784" pos:column="52">&amp;&amp;</op:operator> <name pos:line="1784" pos:column="55">chNext2</name> <op:operator pos:line="1784" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="1784" pos:column="66">'\"'</lit:literal></expr>)</condition><then pos:line="1784" pos:column="71"> <block pos:line="1784" pos:column="72">{
					<expr_stmt><expr><name pos:line="1785" pos:column="41">i</name> <op:operator pos:line="1785" pos:column="43">+=</op:operator> <lit:literal type="number" pos:line="1785" pos:column="46">2</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1786" pos:column="41">state</name> <op:operator pos:line="1786" pos:column="47">=</op:operator> <name pos:line="1786" pos:column="49">SCE_HP_TRIPLEDOUBLE</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1787" pos:column="41">ch</name> <op:operator pos:line="1787" pos:column="44">=</op:operator> <lit:literal type="char" pos:line="1787" pos:column="46">' '</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1788" pos:column="41">chPrev</name> <op:operator pos:line="1788" pos:column="48">=</op:operator> <lit:literal type="char" pos:line="1788" pos:column="50">' '</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1789" pos:column="41">chNext</name> <op:operator pos:line="1789" pos:column="48">=</op:operator> <call><name><name pos:line="1789" pos:column="50">static_cast</name><argument_list pos:line="1789" pos:column="61">&lt;<argument><expr><name pos:line="1789" pos:column="62">unsigned</name> <name pos:line="1789" pos:column="71">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1789" pos:column="76">(<argument><expr><call><name><name pos:line="1789" pos:column="77">styler</name><op:operator pos:line="1789" pos:column="83">.</op:operator><name pos:line="1789" pos:column="84">SafeGetCharAt</name></name><argument_list pos:line="1789" pos:column="97">(<argument><expr><name pos:line="1789" pos:column="98">i</name> <op:operator pos:line="1789" pos:column="100">+</op:operator> <lit:literal type="number" pos:line="1789" pos:column="102">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1790" pos:column="35">else <block pos:line="1790" pos:column="40">{
					<comment type="line" pos:line="1791" pos:column="41">//					state = statePrintForState(SCE_HP_STRING,inScriptType);</comment>
					<expr_stmt><expr><name pos:line="1792" pos:column="41">state</name> <op:operator pos:line="1792" pos:column="47">=</op:operator> <name pos:line="1792" pos:column="49">SCE_HP_STRING</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="1794" pos:column="27">else <if pos:line="1794" pos:column="32">if <condition pos:line="1794" pos:column="35">(<expr><name pos:line="1794" pos:column="36">ch</name> <op:operator pos:line="1794" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1794" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="1794" pos:column="47"> <block pos:line="1794" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1795" pos:column="33">styler</name><op:operator pos:line="1795" pos:column="39">.</op:operator><name pos:line="1795" pos:column="40">ColourTo</name></name><argument_list pos:line="1795" pos:column="48">(<argument><expr><name pos:line="1795" pos:column="49">i</name> <op:operator pos:line="1795" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1795" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1795" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1796" pos:column="33">if <condition pos:line="1796" pos:column="36">(<expr><name pos:line="1796" pos:column="37">chNext</name> <op:operator pos:line="1796" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1796" pos:column="47">'\''</lit:literal> <op:operator pos:line="1796" pos:column="52">&amp;&amp;</op:operator> <name pos:line="1796" pos:column="55">chNext2</name> <op:operator pos:line="1796" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="1796" pos:column="66">'\''</lit:literal></expr>)</condition><then pos:line="1796" pos:column="71"> <block pos:line="1796" pos:column="72">{
					<expr_stmt><expr><name pos:line="1797" pos:column="41">i</name> <op:operator pos:line="1797" pos:column="43">+=</op:operator> <lit:literal type="number" pos:line="1797" pos:column="46">2</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1798" pos:column="41">state</name> <op:operator pos:line="1798" pos:column="47">=</op:operator> <name pos:line="1798" pos:column="49">SCE_HP_TRIPLE</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1799" pos:column="41">ch</name> <op:operator pos:line="1799" pos:column="44">=</op:operator> <lit:literal type="char" pos:line="1799" pos:column="46">' '</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1800" pos:column="41">chPrev</name> <op:operator pos:line="1800" pos:column="48">=</op:operator> <lit:literal type="char" pos:line="1800" pos:column="50">' '</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1801" pos:column="41">chNext</name> <op:operator pos:line="1801" pos:column="48">=</op:operator> <call><name><name pos:line="1801" pos:column="50">static_cast</name><argument_list pos:line="1801" pos:column="61">&lt;<argument><expr><name pos:line="1801" pos:column="62">unsigned</name> <name pos:line="1801" pos:column="71">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1801" pos:column="76">(<argument><expr><call><name><name pos:line="1801" pos:column="77">styler</name><op:operator pos:line="1801" pos:column="83">.</op:operator><name pos:line="1801" pos:column="84">SafeGetCharAt</name></name><argument_list pos:line="1801" pos:column="97">(<argument><expr><name pos:line="1801" pos:column="98">i</name> <op:operator pos:line="1801" pos:column="100">+</op:operator> <lit:literal type="number" pos:line="1801" pos:column="102">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1802" pos:column="35">else <block pos:line="1802" pos:column="40">{
					<expr_stmt><expr><name pos:line="1803" pos:column="41">state</name> <op:operator pos:line="1803" pos:column="47">=</op:operator> <name pos:line="1803" pos:column="49">SCE_HP_CHARACTER</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="1805" pos:column="27">else <if pos:line="1805" pos:column="32">if <condition pos:line="1805" pos:column="35">(<expr><call><name pos:line="1805" pos:column="36">IsOperator</name><argument_list pos:line="1805" pos:column="46">(<argument><expr><name pos:line="1805" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1805" pos:column="51"> <block pos:line="1805" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="1806" pos:column="33">styler</name><op:operator pos:line="1806" pos:column="39">.</op:operator><name pos:line="1806" pos:column="40">ColourTo</name></name><argument_list pos:line="1806" pos:column="48">(<argument><expr><name pos:line="1806" pos:column="49">i</name> <op:operator pos:line="1806" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1806" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1806" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="1807" pos:column="33">styler</name><op:operator pos:line="1807" pos:column="39">.</op:operator><name pos:line="1807" pos:column="40">ColourTo</name></name><argument_list pos:line="1807" pos:column="48">(<argument><expr><name pos:line="1807" pos:column="49">i</name></expr></argument>, <argument><expr><call><name pos:line="1807" pos:column="52">statePrintForState</name><argument_list pos:line="1807" pos:column="70">(<argument><expr><name pos:line="1807" pos:column="71">SCE_HP_OPERATOR</name></expr></argument>, <argument><expr><name pos:line="1807" pos:column="88">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="1808" pos:column="27">else <if pos:line="1808" pos:column="32">if <condition pos:line="1808" pos:column="35">(<expr><op:operator pos:line="1808" pos:column="36">(</op:operator><name pos:line="1808" pos:column="37">ch</name> <op:operator pos:line="1808" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1808" pos:column="43">' '</lit:literal><op:operator pos:line="1808" pos:column="46">)</op:operator> <op:operator pos:line="1808" pos:column="48">||</op:operator> <op:operator pos:line="1808" pos:column="51">(</op:operator><name pos:line="1808" pos:column="52">ch</name> <op:operator pos:line="1808" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="1808" pos:column="58">'\t'</lit:literal><op:operator pos:line="1808" pos:column="62">)</op:operator></expr>)</condition><then pos:line="1808" pos:column="64"> <block pos:line="1808" pos:column="65">{
				<if pos:line="1809" pos:column="33">if <condition pos:line="1809" pos:column="36">(<expr><name pos:line="1809" pos:column="37">state</name> <op:operator pos:line="1809" pos:column="43">==</op:operator> <name pos:line="1809" pos:column="46">SCE_HP_START</name></expr>)</condition><then pos:line="1809" pos:column="59"> <block pos:line="1809" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="1810" pos:column="41">styler</name><op:operator pos:line="1810" pos:column="47">.</op:operator><name pos:line="1810" pos:column="48">ColourTo</name></name><argument_list pos:line="1810" pos:column="56">(<argument><expr><name pos:line="1810" pos:column="57">i</name> <op:operator pos:line="1810" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="1810" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1810" pos:column="64">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1811" pos:column="41">state</name> <op:operator pos:line="1811" pos:column="47">=</op:operator> <name pos:line="1811" pos:column="49">SCE_HP_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="1814" pos:column="25">break;</break>
		</case><case pos:line="1815" pos:column="17">case <expr><name pos:line="1815" pos:column="22">SCE_HP_WORD</name></expr>:
			<if pos:line="1816" pos:column="25">if <condition pos:line="1816" pos:column="28">(<expr><op:operator pos:line="1816" pos:column="29">!</op:operator><call><name pos:line="1816" pos:column="30">IsAWordChar</name><argument_list pos:line="1816" pos:column="41">(<argument><expr><name pos:line="1816" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1816" pos:column="46"> <block pos:line="1816" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="1817" pos:column="33">classifyWordHTPy</name><argument_list pos:line="1817" pos:column="49">(<argument><expr><call><name><name pos:line="1817" pos:column="50">styler</name><op:operator pos:line="1817" pos:column="56">.</op:operator><name pos:line="1817" pos:column="57">GetStartSegment</name></name><argument_list pos:line="1817" pos:column="72">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1817" pos:column="76">i</name> <op:operator pos:line="1817" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="1817" pos:column="80">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1817" pos:column="83">keywords4</name></expr></argument>, <argument><expr><name pos:line="1817" pos:column="94">styler</name></expr></argument>, <argument><expr><name pos:line="1817" pos:column="102">prevWord</name></expr></argument>, <argument><expr><name pos:line="1817" pos:column="112">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1818" pos:column="33">state</name> <op:operator pos:line="1818" pos:column="39">=</op:operator> <name pos:line="1818" pos:column="41">SCE_HP_DEFAULT</name></expr>;</expr_stmt>
				<if pos:line="1819" pos:column="33">if <condition pos:line="1819" pos:column="36">(<expr><name pos:line="1819" pos:column="37">ch</name> <op:operator pos:line="1819" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1819" pos:column="43">'#'</lit:literal></expr>)</condition><then pos:line="1819" pos:column="47"> <block pos:line="1819" pos:column="48">{
					<expr_stmt><expr><name pos:line="1820" pos:column="41">state</name> <op:operator pos:line="1820" pos:column="47">=</op:operator> <name pos:line="1820" pos:column="49">SCE_HP_COMMENTLINE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1821" pos:column="35">else <if pos:line="1821" pos:column="40">if <condition pos:line="1821" pos:column="43">(<expr><name pos:line="1821" pos:column="44">ch</name> <op:operator pos:line="1821" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1821" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="1821" pos:column="55"> <block pos:line="1821" pos:column="56">{
					<if pos:line="1822" pos:column="41">if <condition pos:line="1822" pos:column="44">(<expr><name pos:line="1822" pos:column="45">chNext</name> <op:operator pos:line="1822" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1822" pos:column="55">'\"'</lit:literal> <op:operator pos:line="1822" pos:column="60">&amp;&amp;</op:operator> <name pos:line="1822" pos:column="63">chNext2</name> <op:operator pos:line="1822" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="1822" pos:column="74">'\"'</lit:literal></expr>)</condition><then pos:line="1822" pos:column="79"> <block pos:line="1822" pos:column="80">{
						<expr_stmt><expr><name pos:line="1823" pos:column="49">i</name> <op:operator pos:line="1823" pos:column="51">+=</op:operator> <lit:literal type="number" pos:line="1823" pos:column="54">2</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1824" pos:column="49">state</name> <op:operator pos:line="1824" pos:column="55">=</op:operator> <name pos:line="1824" pos:column="57">SCE_HP_TRIPLEDOUBLE</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1825" pos:column="49">ch</name> <op:operator pos:line="1825" pos:column="52">=</op:operator> <lit:literal type="char" pos:line="1825" pos:column="54">' '</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1826" pos:column="49">chPrev</name> <op:operator pos:line="1826" pos:column="56">=</op:operator> <lit:literal type="char" pos:line="1826" pos:column="58">' '</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1827" pos:column="49">chNext</name> <op:operator pos:line="1827" pos:column="56">=</op:operator> <call><name><name pos:line="1827" pos:column="58">static_cast</name><argument_list pos:line="1827" pos:column="69">&lt;<argument><expr><name pos:line="1827" pos:column="70">unsigned</name> <name pos:line="1827" pos:column="79">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1827" pos:column="84">(<argument><expr><call><name><name pos:line="1827" pos:column="85">styler</name><op:operator pos:line="1827" pos:column="91">.</op:operator><name pos:line="1827" pos:column="92">SafeGetCharAt</name></name><argument_list pos:line="1827" pos:column="105">(<argument><expr><name pos:line="1827" pos:column="106">i</name> <op:operator pos:line="1827" pos:column="108">+</op:operator> <lit:literal type="number" pos:line="1827" pos:column="110">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1828" pos:column="43">else <block pos:line="1828" pos:column="48">{
						<expr_stmt><expr><name pos:line="1829" pos:column="49">state</name> <op:operator pos:line="1829" pos:column="55">=</op:operator> <name pos:line="1829" pos:column="57">SCE_HP_STRING</name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="1831" pos:column="35">else <if pos:line="1831" pos:column="40">if <condition pos:line="1831" pos:column="43">(<expr><name pos:line="1831" pos:column="44">ch</name> <op:operator pos:line="1831" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1831" pos:column="50">'\''</lit:literal></expr>)</condition><then pos:line="1831" pos:column="55"> <block pos:line="1831" pos:column="56">{
					<if pos:line="1832" pos:column="41">if <condition pos:line="1832" pos:column="44">(<expr><name pos:line="1832" pos:column="45">chNext</name> <op:operator pos:line="1832" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="1832" pos:column="55">'\''</lit:literal> <op:operator pos:line="1832" pos:column="60">&amp;&amp;</op:operator> <name pos:line="1832" pos:column="63">chNext2</name> <op:operator pos:line="1832" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="1832" pos:column="74">'\''</lit:literal></expr>)</condition><then pos:line="1832" pos:column="79"> <block pos:line="1832" pos:column="80">{
						<expr_stmt><expr><name pos:line="1833" pos:column="49">i</name> <op:operator pos:line="1833" pos:column="51">+=</op:operator> <lit:literal type="number" pos:line="1833" pos:column="54">2</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1834" pos:column="49">state</name> <op:operator pos:line="1834" pos:column="55">=</op:operator> <name pos:line="1834" pos:column="57">SCE_HP_TRIPLE</name></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1835" pos:column="49">ch</name> <op:operator pos:line="1835" pos:column="52">=</op:operator> <lit:literal type="char" pos:line="1835" pos:column="54">' '</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1836" pos:column="49">chPrev</name> <op:operator pos:line="1836" pos:column="56">=</op:operator> <lit:literal type="char" pos:line="1836" pos:column="58">' '</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1837" pos:column="49">chNext</name> <op:operator pos:line="1837" pos:column="56">=</op:operator> <call><name><name pos:line="1837" pos:column="58">static_cast</name><argument_list pos:line="1837" pos:column="69">&lt;<argument><expr><name pos:line="1837" pos:column="70">unsigned</name> <name pos:line="1837" pos:column="79">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1837" pos:column="84">(<argument><expr><call><name><name pos:line="1837" pos:column="85">styler</name><op:operator pos:line="1837" pos:column="91">.</op:operator><name pos:line="1837" pos:column="92">SafeGetCharAt</name></name><argument_list pos:line="1837" pos:column="105">(<argument><expr><name pos:line="1837" pos:column="106">i</name> <op:operator pos:line="1837" pos:column="108">+</op:operator> <lit:literal type="number" pos:line="1837" pos:column="110">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="1838" pos:column="43">else <block pos:line="1838" pos:column="48">{
						<expr_stmt><expr><name pos:line="1839" pos:column="49">state</name> <op:operator pos:line="1839" pos:column="55">=</op:operator> <name pos:line="1839" pos:column="57">SCE_HP_CHARACTER</name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then> <else pos:line="1841" pos:column="35">else <if pos:line="1841" pos:column="40">if <condition pos:line="1841" pos:column="43">(<expr><call><name pos:line="1841" pos:column="44">IsOperator</name><argument_list pos:line="1841" pos:column="54">(<argument><expr><name pos:line="1841" pos:column="55">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1841" pos:column="59"> <block pos:line="1841" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="1842" pos:column="41">styler</name><op:operator pos:line="1842" pos:column="47">.</op:operator><name pos:line="1842" pos:column="48">ColourTo</name></name><argument_list pos:line="1842" pos:column="56">(<argument><expr><name pos:line="1842" pos:column="57">i</name></expr></argument>, <argument><expr><call><name pos:line="1842" pos:column="60">statePrintForState</name><argument_list pos:line="1842" pos:column="78">(<argument><expr><name pos:line="1842" pos:column="79">SCE_HP_OPERATOR</name></expr></argument>, <argument><expr><name pos:line="1842" pos:column="96">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if>
			}</block></then></if>
			<break pos:line="1845" pos:column="25">break;</break>
		</case><case pos:line="1846" pos:column="17">case <expr><name pos:line="1846" pos:column="22">SCE_HP_COMMENTLINE</name></expr>:
			<if pos:line="1847" pos:column="25">if <condition pos:line="1847" pos:column="28">(<expr><name pos:line="1847" pos:column="29">ch</name> <op:operator pos:line="1847" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1847" pos:column="35">'\r'</lit:literal> <op:operator pos:line="1847" pos:column="40">||</op:operator> <name pos:line="1847" pos:column="43">ch</name> <op:operator pos:line="1847" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="1847" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="1847" pos:column="54"> <block pos:line="1847" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="1848" pos:column="33">styler</name><op:operator pos:line="1848" pos:column="39">.</op:operator><name pos:line="1848" pos:column="40">ColourTo</name></name><argument_list pos:line="1848" pos:column="48">(<argument><expr><name pos:line="1848" pos:column="49">i</name> <op:operator pos:line="1848" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1848" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1848" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1849" pos:column="33">state</name> <op:operator pos:line="1849" pos:column="39">=</op:operator> <name pos:line="1849" pos:column="41">SCE_HP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1851" pos:column="25">break;</break>
		</case><case pos:line="1852" pos:column="17">case <expr><name pos:line="1852" pos:column="22">SCE_HP_STRING</name></expr>:
			<if pos:line="1853" pos:column="25">if <condition pos:line="1853" pos:column="28">(<expr><name pos:line="1853" pos:column="29">ch</name> <op:operator pos:line="1853" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1853" pos:column="35">'\\'</lit:literal></expr>)</condition><then pos:line="1853" pos:column="40"> <block pos:line="1853" pos:column="41">{
				<if pos:line="1854" pos:column="33">if <condition pos:line="1854" pos:column="36">(<expr><name pos:line="1854" pos:column="37">chNext</name> <op:operator pos:line="1854" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1854" pos:column="47">'\"'</lit:literal> <op:operator pos:line="1854" pos:column="52">||</op:operator> <name pos:line="1854" pos:column="55">chNext</name> <op:operator pos:line="1854" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1854" pos:column="65">'\''</lit:literal> <op:operator pos:line="1854" pos:column="70">||</op:operator> <name pos:line="1854" pos:column="73">chNext</name> <op:operator pos:line="1854" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="1854" pos:column="83">'\\'</lit:literal></expr>)</condition><then pos:line="1854" pos:column="88"> <block pos:line="1854" pos:column="89">{
					<expr_stmt><expr><name pos:line="1855" pos:column="41">i</name><op:operator pos:line="1855" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1856" pos:column="41">ch</name> <op:operator pos:line="1856" pos:column="44">=</op:operator> <name pos:line="1856" pos:column="46">chNext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1857" pos:column="41">chNext</name> <op:operator pos:line="1857" pos:column="48">=</op:operator> <call><name><name pos:line="1857" pos:column="50">static_cast</name><argument_list pos:line="1857" pos:column="61">&lt;<argument><expr><name pos:line="1857" pos:column="62">unsigned</name> <name pos:line="1857" pos:column="71">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1857" pos:column="76">(<argument><expr><call><name><name pos:line="1857" pos:column="77">styler</name><op:operator pos:line="1857" pos:column="83">.</op:operator><name pos:line="1857" pos:column="84">SafeGetCharAt</name></name><argument_list pos:line="1857" pos:column="97">(<argument><expr><name pos:line="1857" pos:column="98">i</name> <op:operator pos:line="1857" pos:column="100">+</op:operator> <lit:literal type="number" pos:line="1857" pos:column="102">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="1859" pos:column="27">else <if pos:line="1859" pos:column="32">if <condition pos:line="1859" pos:column="35">(<expr><name pos:line="1859" pos:column="36">ch</name> <op:operator pos:line="1859" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1859" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="1859" pos:column="47"> <block pos:line="1859" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1860" pos:column="33">styler</name><op:operator pos:line="1860" pos:column="39">.</op:operator><name pos:line="1860" pos:column="40">ColourTo</name></name><argument_list pos:line="1860" pos:column="48">(<argument><expr><name pos:line="1860" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1860" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1861" pos:column="33">state</name> <op:operator pos:line="1861" pos:column="39">=</op:operator> <name pos:line="1861" pos:column="41">SCE_HP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="1863" pos:column="25">break;</break>
		</case><case pos:line="1864" pos:column="17">case <expr><name pos:line="1864" pos:column="22">SCE_HP_CHARACTER</name></expr>:
			<if pos:line="1865" pos:column="25">if <condition pos:line="1865" pos:column="28">(<expr><name pos:line="1865" pos:column="29">ch</name> <op:operator pos:line="1865" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1865" pos:column="35">'\\'</lit:literal></expr>)</condition><then pos:line="1865" pos:column="40"> <block pos:line="1865" pos:column="41">{
				<if pos:line="1866" pos:column="33">if <condition pos:line="1866" pos:column="36">(<expr><name pos:line="1866" pos:column="37">chNext</name> <op:operator pos:line="1866" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1866" pos:column="47">'\"'</lit:literal> <op:operator pos:line="1866" pos:column="52">||</op:operator> <name pos:line="1866" pos:column="55">chNext</name> <op:operator pos:line="1866" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="1866" pos:column="65">'\''</lit:literal> <op:operator pos:line="1866" pos:column="70">||</op:operator> <name pos:line="1866" pos:column="73">chNext</name> <op:operator pos:line="1866" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="1866" pos:column="83">'\\'</lit:literal></expr>)</condition><then pos:line="1866" pos:column="88"> <block pos:line="1866" pos:column="89">{
					<expr_stmt><expr><name pos:line="1867" pos:column="41">i</name><op:operator pos:line="1867" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1868" pos:column="41">ch</name> <op:operator pos:line="1868" pos:column="44">=</op:operator> <name pos:line="1868" pos:column="46">chNext</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1869" pos:column="41">chNext</name> <op:operator pos:line="1869" pos:column="48">=</op:operator> <call><name><name pos:line="1869" pos:column="50">static_cast</name><argument_list pos:line="1869" pos:column="61">&lt;<argument><expr><name pos:line="1869" pos:column="62">unsigned</name> <name pos:line="1869" pos:column="71">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1869" pos:column="76">(<argument><expr><call><name><name pos:line="1869" pos:column="77">styler</name><op:operator pos:line="1869" pos:column="83">.</op:operator><name pos:line="1869" pos:column="84">SafeGetCharAt</name></name><argument_list pos:line="1869" pos:column="97">(<argument><expr><name pos:line="1869" pos:column="98">i</name> <op:operator pos:line="1869" pos:column="100">+</op:operator> <lit:literal type="number" pos:line="1869" pos:column="102">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="1871" pos:column="27">else <if pos:line="1871" pos:column="32">if <condition pos:line="1871" pos:column="35">(<expr><name pos:line="1871" pos:column="36">ch</name> <op:operator pos:line="1871" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1871" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="1871" pos:column="47"> <block pos:line="1871" pos:column="48">{
				<expr_stmt><expr><call><name><name pos:line="1872" pos:column="33">styler</name><op:operator pos:line="1872" pos:column="39">.</op:operator><name pos:line="1872" pos:column="40">ColourTo</name></name><argument_list pos:line="1872" pos:column="48">(<argument><expr><name pos:line="1872" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1872" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1873" pos:column="33">state</name> <op:operator pos:line="1873" pos:column="39">=</op:operator> <name pos:line="1873" pos:column="41">SCE_HP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if></else></if>
			<break pos:line="1875" pos:column="25">break;</break>
		</case><case pos:line="1876" pos:column="17">case <expr><name pos:line="1876" pos:column="22">SCE_HP_TRIPLE</name></expr>:
			<if pos:line="1877" pos:column="25">if <condition pos:line="1877" pos:column="28">(<expr><name pos:line="1877" pos:column="29">ch</name> <op:operator pos:line="1877" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1877" pos:column="35">'\''</lit:literal> <op:operator pos:line="1877" pos:column="40">&amp;&amp;</op:operator> <name pos:line="1877" pos:column="43">chPrev</name> <op:operator pos:line="1877" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1877" pos:column="53">'\''</lit:literal> <op:operator pos:line="1877" pos:column="58">&amp;&amp;</op:operator> <name pos:line="1877" pos:column="61">chPrev2</name> <op:operator pos:line="1877" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="1877" pos:column="72">'\''</lit:literal></expr>)</condition><then pos:line="1877" pos:column="77"> <block pos:line="1877" pos:column="78">{
				<expr_stmt><expr><call><name><name pos:line="1878" pos:column="33">styler</name><op:operator pos:line="1878" pos:column="39">.</op:operator><name pos:line="1878" pos:column="40">ColourTo</name></name><argument_list pos:line="1878" pos:column="48">(<argument><expr><name pos:line="1878" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1878" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1879" pos:column="33">state</name> <op:operator pos:line="1879" pos:column="39">=</op:operator> <name pos:line="1879" pos:column="41">SCE_HP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1881" pos:column="25">break;</break>
		</case><case pos:line="1882" pos:column="17">case <expr><name pos:line="1882" pos:column="22">SCE_HP_TRIPLEDOUBLE</name></expr>:
			<if pos:line="1883" pos:column="25">if <condition pos:line="1883" pos:column="28">(<expr><name pos:line="1883" pos:column="29">ch</name> <op:operator pos:line="1883" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1883" pos:column="35">'\"'</lit:literal> <op:operator pos:line="1883" pos:column="40">&amp;&amp;</op:operator> <name pos:line="1883" pos:column="43">chPrev</name> <op:operator pos:line="1883" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="1883" pos:column="53">'\"'</lit:literal> <op:operator pos:line="1883" pos:column="58">&amp;&amp;</op:operator> <name pos:line="1883" pos:column="61">chPrev2</name> <op:operator pos:line="1883" pos:column="69">==</op:operator> <lit:literal type="char" pos:line="1883" pos:column="72">'\"'</lit:literal></expr>)</condition><then pos:line="1883" pos:column="77"> <block pos:line="1883" pos:column="78">{
				<expr_stmt><expr><call><name><name pos:line="1884" pos:column="33">styler</name><op:operator pos:line="1884" pos:column="39">.</op:operator><name pos:line="1884" pos:column="40">ColourTo</name></name><argument_list pos:line="1884" pos:column="48">(<argument><expr><name pos:line="1884" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1884" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1885" pos:column="33">state</name> <op:operator pos:line="1885" pos:column="39">=</op:operator> <name pos:line="1885" pos:column="41">SCE_HP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1887" pos:column="25">break;</break>
			<comment type="line" format="doxygen" pos:line="1888" pos:column="25">///////////// start - PHP state handling</comment>
		</case><case pos:line="1889" pos:column="17">case <expr><name pos:line="1889" pos:column="22">SCE_HPHP_WORD</name></expr>:
			<if pos:line="1890" pos:column="25">if <condition pos:line="1890" pos:column="28">(<expr><op:operator pos:line="1890" pos:column="29">!</op:operator><call><name pos:line="1890" pos:column="30">IsAWordChar</name><argument_list pos:line="1890" pos:column="41">(<argument><expr><name pos:line="1890" pos:column="42">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1890" pos:column="46"> <block pos:line="1890" pos:column="47">{
				<expr_stmt><expr><call><name pos:line="1891" pos:column="33">classifyWordHTPHP</name><argument_list pos:line="1891" pos:column="50">(<argument><expr><call><name><name pos:line="1891" pos:column="51">styler</name><op:operator pos:line="1891" pos:column="57">.</op:operator><name pos:line="1891" pos:column="58">GetStartSegment</name></name><argument_list pos:line="1891" pos:column="73">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1891" pos:column="77">i</name> <op:operator pos:line="1891" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="1891" pos:column="81">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1891" pos:column="84">keywords5</name></expr></argument>, <argument><expr><name pos:line="1891" pos:column="95">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1892" pos:column="33">if <condition pos:line="1892" pos:column="36">(<expr><name pos:line="1892" pos:column="37">ch</name> <op:operator pos:line="1892" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1892" pos:column="43">'/'</lit:literal> <op:operator pos:line="1892" pos:column="47">&amp;&amp;</op:operator> <name pos:line="1892" pos:column="50">chNext</name> <op:operator pos:line="1892" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="1892" pos:column="60">'*'</lit:literal></expr>)</condition><then pos:line="1892" pos:column="64"> <block pos:line="1892" pos:column="65">{
					<expr_stmt><expr><name pos:line="1893" pos:column="41">i</name><op:operator pos:line="1893" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1894" pos:column="41">state</name> <op:operator pos:line="1894" pos:column="47">=</op:operator> <name pos:line="1894" pos:column="49">SCE_HPHP_COMMENT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1895" pos:column="35">else <if pos:line="1895" pos:column="40">if <condition pos:line="1895" pos:column="43">(<expr><name pos:line="1895" pos:column="44">ch</name> <op:operator pos:line="1895" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1895" pos:column="50">'/'</lit:literal> <op:operator pos:line="1895" pos:column="54">&amp;&amp;</op:operator> <name pos:line="1895" pos:column="57">chNext</name> <op:operator pos:line="1895" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="1895" pos:column="67">'/'</lit:literal></expr>)</condition><then pos:line="1895" pos:column="71"> <block pos:line="1895" pos:column="72">{
					<expr_stmt><expr><name pos:line="1896" pos:column="41">i</name><op:operator pos:line="1896" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1897" pos:column="41">state</name> <op:operator pos:line="1897" pos:column="47">=</op:operator> <name pos:line="1897" pos:column="49">SCE_HPHP_COMMENTLINE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1898" pos:column="35">else <if pos:line="1898" pos:column="40">if <condition pos:line="1898" pos:column="43">(<expr><name pos:line="1898" pos:column="44">ch</name> <op:operator pos:line="1898" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1898" pos:column="50">'#'</lit:literal></expr>)</condition><then pos:line="1898" pos:column="54"> <block pos:line="1898" pos:column="55">{
					<expr_stmt><expr><name pos:line="1899" pos:column="41">state</name> <op:operator pos:line="1899" pos:column="47">=</op:operator> <name pos:line="1899" pos:column="49">SCE_HPHP_COMMENTLINE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1900" pos:column="35">else <if pos:line="1900" pos:column="40">if <condition pos:line="1900" pos:column="43">(<expr><name pos:line="1900" pos:column="44">ch</name> <op:operator pos:line="1900" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1900" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="1900" pos:column="55"> <block pos:line="1900" pos:column="56">{
					<expr_stmt><expr><name pos:line="1901" pos:column="41">state</name> <op:operator pos:line="1901" pos:column="47">=</op:operator> <name pos:line="1901" pos:column="49">SCE_HPHP_HSTRING</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="1902" pos:column="41">strcpy</name><argument_list pos:line="1902" pos:column="47">(<argument><expr><name pos:line="1902" pos:column="48">phpStringDelimiter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1902" pos:column="68">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1903" pos:column="35">else <if pos:line="1903" pos:column="40">if <condition pos:line="1903" pos:column="43">(<expr><call><name><name pos:line="1903" pos:column="44">styler</name><op:operator pos:line="1903" pos:column="50">.</op:operator><name pos:line="1903" pos:column="51">Match</name></name><argument_list pos:line="1903" pos:column="56">(<argument><expr><name pos:line="1903" pos:column="57">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1903" pos:column="60">"&lt;&lt;&lt;"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1903" pos:column="67"> <block pos:line="1903" pos:column="68">{
					<decl_stmt><decl><type><name pos:line="1904" pos:column="41">bool</name></type> <name pos:line="1904" pos:column="46">isSimpleString</name> <init pos:line="1904" pos:column="61">= <expr><lit:literal type="boolean" pos:line="1904" pos:column="63">false</lit:literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name pos:line="1905" pos:column="41">i</name> <op:operator pos:line="1905" pos:column="43">=</op:operator> <call><name pos:line="1905" pos:column="45">FindPhpStringDelimiter</name><argument_list pos:line="1905" pos:column="67">(<argument><expr><name pos:line="1905" pos:column="68">phpStringDelimiter</name></expr></argument>, <argument><expr><sizeof pos:line="1905" pos:column="88">sizeof<argument_list pos:line="1905" pos:column="94">(<argument><expr><name pos:line="1905" pos:column="95">phpStringDelimiter</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1905" pos:column="116">i</name> <op:operator pos:line="1905" pos:column="118">+</op:operator> <lit:literal type="number" pos:line="1905" pos:column="120">3</lit:literal></expr></argument>, <argument><expr><name pos:line="1905" pos:column="123">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="1905" pos:column="134">styler</name></expr></argument>, <argument><expr><name pos:line="1905" pos:column="142">isSimpleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="1906" pos:column="41">if <condition pos:line="1906" pos:column="44">(<expr><call><name pos:line="1906" pos:column="45">strlen</name><argument_list pos:line="1906" pos:column="51">(<argument><expr><name pos:line="1906" pos:column="52">phpStringDelimiter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1906" pos:column="72"> <block pos:line="1906" pos:column="73">{
						<expr_stmt><expr><name pos:line="1907" pos:column="49">state</name> <op:operator pos:line="1907" pos:column="55">=</op:operator> <op:operator pos:line="1907" pos:column="57">(</op:operator><name pos:line="1907" pos:column="58">isSimpleString</name> <op:operator pos:line="1907" pos:column="73">?</op:operator> <name pos:line="1907" pos:column="75">SCE_HPHP_SIMPLESTRING</name> <op:operator pos:line="1907" pos:column="97">:</op:operator> <name pos:line="1907" pos:column="99">SCE_HPHP_HSTRING</name><op:operator pos:line="1907" pos:column="115">)</op:operator></expr>;</expr_stmt>
						<if pos:line="1908" pos:column="49">if <condition pos:line="1908" pos:column="52">(<expr><name pos:line="1908" pos:column="53">foldHeredoc</name></expr>)</condition><then pos:line="1908" pos:column="65"> <expr_stmt><expr><name pos:line="1908" pos:column="66">levelCurrent</name><op:operator pos:line="1908" pos:column="78">++</op:operator></expr>;</expr_stmt></then></if>
					}</block></then></if>
				}</block></then> <else pos:line="1910" pos:column="35">else <if pos:line="1910" pos:column="40">if <condition pos:line="1910" pos:column="43">(<expr><name pos:line="1910" pos:column="44">ch</name> <op:operator pos:line="1910" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1910" pos:column="50">'\''</lit:literal></expr>)</condition><then pos:line="1910" pos:column="55"> <block pos:line="1910" pos:column="56">{
					<expr_stmt><expr><name pos:line="1911" pos:column="41">state</name> <op:operator pos:line="1911" pos:column="47">=</op:operator> <name pos:line="1911" pos:column="49">SCE_HPHP_SIMPLESTRING</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="1912" pos:column="41">strcpy</name><argument_list pos:line="1912" pos:column="47">(<argument><expr><name pos:line="1912" pos:column="48">phpStringDelimiter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1912" pos:column="68">"\'"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="1913" pos:column="35">else <if pos:line="1913" pos:column="40">if <condition pos:line="1913" pos:column="43">(<expr><name pos:line="1913" pos:column="44">ch</name> <op:operator pos:line="1913" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1913" pos:column="50">'$'</lit:literal> <op:operator pos:line="1913" pos:column="54">&amp;&amp;</op:operator> <call><name pos:line="1913" pos:column="57">IsPhpWordStart</name><argument_list pos:line="1913" pos:column="71">(<argument><expr><name pos:line="1913" pos:column="72">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1913" pos:column="80"> <block pos:line="1913" pos:column="81">{
					<expr_stmt><expr><name pos:line="1914" pos:column="41">state</name> <op:operator pos:line="1914" pos:column="47">=</op:operator> <name pos:line="1914" pos:column="49">SCE_HPHP_VARIABLE</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1915" pos:column="35">else <if pos:line="1915" pos:column="40">if <condition pos:line="1915" pos:column="43">(<expr><call><name pos:line="1915" pos:column="44">IsOperator</name><argument_list pos:line="1915" pos:column="54">(<argument><expr><name pos:line="1915" pos:column="55">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1915" pos:column="59"> <block pos:line="1915" pos:column="60">{
					<expr_stmt><expr><name pos:line="1916" pos:column="41">state</name> <op:operator pos:line="1916" pos:column="47">=</op:operator> <name pos:line="1916" pos:column="49">SCE_HPHP_OPERATOR</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1917" pos:column="35">else <block pos:line="1917" pos:column="40">{
					<expr_stmt><expr><name pos:line="1918" pos:column="41">state</name> <op:operator pos:line="1918" pos:column="47">=</op:operator> <name pos:line="1918" pos:column="49">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
				}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
			}</block></then></if>
			<break pos:line="1921" pos:column="25">break;</break>
		</case><case pos:line="1922" pos:column="17">case <expr><name pos:line="1922" pos:column="22">SCE_HPHP_NUMBER</name></expr>:
			<comment type="line" pos:line="1923" pos:column="25">// recognize bases 8,10 or 16 integers OR floating-point numbers</comment>
			<if pos:line="1924" pos:column="25">if <condition pos:line="1924" pos:column="28">(<expr><op:operator pos:line="1924" pos:column="29">!</op:operator><call><name pos:line="1924" pos:column="30">IsADigit</name><argument_list pos:line="1924" pos:column="38">(<argument><expr><name pos:line="1924" pos:column="39">ch</name></expr></argument>)</argument_list></call>
				<op:operator pos:line="1925" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="1925" pos:column="36">strchr</name><argument_list pos:line="1925" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="1925" pos:column="43">".xXabcdefABCDEF"</lit:literal></expr></argument>, <argument><expr><name pos:line="1925" pos:column="62">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1925" pos:column="66">==</op:operator> <name pos:line="1925" pos:column="69">NULL</name>
				<op:operator pos:line="1926" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="1926" pos:column="36">(</op:operator><op:operator pos:line="1926" pos:column="37">(</op:operator><name pos:line="1926" pos:column="38">ch</name> <op:operator pos:line="1926" pos:column="41">!=</op:operator> <lit:literal type="char" pos:line="1926" pos:column="44">'-'</lit:literal> <op:operator pos:line="1926" pos:column="48">&amp;&amp;</op:operator> <name pos:line="1926" pos:column="51">ch</name> <op:operator pos:line="1926" pos:column="54">!=</op:operator> <lit:literal type="char" pos:line="1926" pos:column="57">'+'</lit:literal><op:operator pos:line="1926" pos:column="60">)</op:operator> <op:operator pos:line="1926" pos:column="62">||</op:operator> <op:operator pos:line="1926" pos:column="65">(</op:operator><name pos:line="1926" pos:column="66">chPrev</name> <op:operator pos:line="1926" pos:column="73">!=</op:operator> <lit:literal type="char" pos:line="1926" pos:column="76">'e'</lit:literal> <op:operator pos:line="1926" pos:column="80">&amp;&amp;</op:operator> <name pos:line="1926" pos:column="83">chPrev</name> <op:operator pos:line="1926" pos:column="90">!=</op:operator> <lit:literal type="char" pos:line="1926" pos:column="93">'E'</lit:literal><op:operator pos:line="1926" pos:column="96">)</op:operator><op:operator pos:line="1926" pos:column="97">)</op:operator></expr>)</condition><then pos:line="1926" pos:column="99"> <block pos:line="1926" pos:column="100">{
				<expr_stmt><expr><call><name><name pos:line="1927" pos:column="33">styler</name><op:operator pos:line="1927" pos:column="39">.</op:operator><name pos:line="1927" pos:column="40">ColourTo</name></name><argument_list pos:line="1927" pos:column="48">(<argument><expr><name pos:line="1927" pos:column="49">i</name> <op:operator pos:line="1927" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1927" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1927" pos:column="56">SCE_HPHP_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="1928" pos:column="33">if <condition pos:line="1928" pos:column="36">(<expr><call><name pos:line="1928" pos:column="37">IsOperator</name><argument_list pos:line="1928" pos:column="47">(<argument><expr><name pos:line="1928" pos:column="48">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1928" pos:column="52">
					<expr_stmt><expr><name pos:line="1929" pos:column="41">state</name> <op:operator pos:line="1929" pos:column="47">=</op:operator> <name pos:line="1929" pos:column="49">SCE_HPHP_OPERATOR</name></expr>;</expr_stmt></then>
				<else pos:line="1930" pos:column="33">else
					<expr_stmt><expr><name pos:line="1931" pos:column="41">state</name> <op:operator pos:line="1931" pos:column="47">=</op:operator> <name pos:line="1931" pos:column="49">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt></else></if>
			}</block></then></if>
			<break pos:line="1933" pos:column="25">break;</break>
		</case><case pos:line="1934" pos:column="17">case <expr><name pos:line="1934" pos:column="22">SCE_HPHP_VARIABLE</name></expr>:
			<if pos:line="1935" pos:column="25">if <condition pos:line="1935" pos:column="28">(<expr><op:operator pos:line="1935" pos:column="29">!</op:operator><call><name pos:line="1935" pos:column="30">IsPhpWordChar</name><argument_list pos:line="1935" pos:column="43">(<argument><expr><name pos:line="1935" pos:column="44">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1935" pos:column="52"> <block pos:line="1935" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="1936" pos:column="33">styler</name><op:operator pos:line="1936" pos:column="39">.</op:operator><name pos:line="1936" pos:column="40">ColourTo</name></name><argument_list pos:line="1936" pos:column="48">(<argument><expr><name pos:line="1936" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1936" pos:column="52">SCE_HPHP_VARIABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1937" pos:column="33">state</name> <op:operator pos:line="1937" pos:column="39">=</op:operator> <name pos:line="1937" pos:column="41">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1939" pos:column="25">break;</break>
		</case><case pos:line="1940" pos:column="17">case <expr><name pos:line="1940" pos:column="22">SCE_HPHP_COMMENT</name></expr>:
			<if pos:line="1941" pos:column="25">if <condition pos:line="1941" pos:column="28">(<expr><name pos:line="1941" pos:column="29">ch</name> <op:operator pos:line="1941" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1941" pos:column="35">'/'</lit:literal> <op:operator pos:line="1941" pos:column="39">&amp;&amp;</op:operator> <name pos:line="1941" pos:column="42">chPrev</name> <op:operator pos:line="1941" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="1941" pos:column="52">'*'</lit:literal></expr>)</condition><then pos:line="1941" pos:column="56"> <block pos:line="1941" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="1942" pos:column="33">styler</name><op:operator pos:line="1942" pos:column="39">.</op:operator><name pos:line="1942" pos:column="40">ColourTo</name></name><argument_list pos:line="1942" pos:column="48">(<argument><expr><name pos:line="1942" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1942" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1943" pos:column="33">state</name> <op:operator pos:line="1943" pos:column="39">=</op:operator> <name pos:line="1943" pos:column="41">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1945" pos:column="25">break;</break>
		</case><case pos:line="1946" pos:column="17">case <expr><name pos:line="1946" pos:column="22">SCE_HPHP_COMMENTLINE</name></expr>:
			<if pos:line="1947" pos:column="25">if <condition pos:line="1947" pos:column="28">(<expr><name pos:line="1947" pos:column="29">ch</name> <op:operator pos:line="1947" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1947" pos:column="35">'\r'</lit:literal> <op:operator pos:line="1947" pos:column="40">||</op:operator> <name pos:line="1947" pos:column="43">ch</name> <op:operator pos:line="1947" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="1947" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="1947" pos:column="54"> <block pos:line="1947" pos:column="55">{
				<expr_stmt><expr><call><name><name pos:line="1948" pos:column="33">styler</name><op:operator pos:line="1948" pos:column="39">.</op:operator><name pos:line="1948" pos:column="40">ColourTo</name></name><argument_list pos:line="1948" pos:column="48">(<argument><expr><name pos:line="1948" pos:column="49">i</name> <op:operator pos:line="1948" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1948" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1948" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1949" pos:column="33">state</name> <op:operator pos:line="1949" pos:column="39">=</op:operator> <name pos:line="1949" pos:column="41">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="1951" pos:column="25">break;</break>
		</case><case pos:line="1952" pos:column="17">case <expr><name pos:line="1952" pos:column="22">SCE_HPHP_HSTRING</name></expr>:
			<if pos:line="1953" pos:column="25">if <condition pos:line="1953" pos:column="28">(<expr><name pos:line="1953" pos:column="29">ch</name> <op:operator pos:line="1953" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1953" pos:column="35">'\\'</lit:literal> <op:operator pos:line="1953" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="1953" pos:column="43">(</op:operator><name><name pos:line="1953" pos:column="44">phpStringDelimiter</name><index pos:line="1953" pos:column="62">[<expr><lit:literal type="number" pos:line="1953" pos:column="63">0</lit:literal></expr>]</index></name> <op:operator pos:line="1953" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="1953" pos:column="69">'\"'</lit:literal> <op:operator pos:line="1953" pos:column="74">||</op:operator> <name pos:line="1953" pos:column="77">chNext</name> <op:operator pos:line="1953" pos:column="84">==</op:operator> <lit:literal type="char" pos:line="1953" pos:column="87">'$'</lit:literal> <op:operator pos:line="1953" pos:column="91">||</op:operator> <name pos:line="1953" pos:column="94">chNext</name> <op:operator pos:line="1953" pos:column="101">==</op:operator> <lit:literal type="char" pos:line="1953" pos:column="104">'{'</lit:literal><op:operator pos:line="1953" pos:column="107">)</op:operator></expr>)</condition><then pos:line="1953" pos:column="109"> <block pos:line="1953" pos:column="110">{
				<comment type="line" pos:line="1954" pos:column="33">// skip the next char</comment>
				<expr_stmt><expr><name pos:line="1955" pos:column="33">i</name><op:operator pos:line="1955" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1956" pos:column="27">else <if pos:line="1956" pos:column="32">if <condition pos:line="1956" pos:column="35">(<expr><op:operator pos:line="1956" pos:column="36">(</op:operator><op:operator pos:line="1956" pos:column="37">(</op:operator><name pos:line="1956" pos:column="38">ch</name> <op:operator pos:line="1956" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="1956" pos:column="44">'{'</lit:literal> <op:operator pos:line="1956" pos:column="48">&amp;&amp;</op:operator> <name pos:line="1956" pos:column="51">chNext</name> <op:operator pos:line="1956" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="1956" pos:column="61">'$'</lit:literal><op:operator pos:line="1956" pos:column="64">)</op:operator> <op:operator pos:line="1956" pos:column="66">||</op:operator> <op:operator pos:line="1956" pos:column="69">(</op:operator><name pos:line="1956" pos:column="70">ch</name> <op:operator pos:line="1956" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="1956" pos:column="76">'$'</lit:literal> <op:operator pos:line="1956" pos:column="80">&amp;&amp;</op:operator> <name pos:line="1956" pos:column="83">chNext</name> <op:operator pos:line="1956" pos:column="90">==</op:operator> <lit:literal type="char" pos:line="1956" pos:column="93">'{'</lit:literal><op:operator pos:line="1956" pos:column="96">)</op:operator><op:operator pos:line="1956" pos:column="97">)</op:operator>
				<op:operator pos:line="1957" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="1957" pos:column="36">IsPhpWordStart</name><argument_list pos:line="1957" pos:column="50">(<argument><expr><name pos:line="1957" pos:column="51">chNext2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1957" pos:column="60"> <block pos:line="1957" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="1958" pos:column="33">styler</name><op:operator pos:line="1958" pos:column="39">.</op:operator><name pos:line="1958" pos:column="40">ColourTo</name></name><argument_list pos:line="1958" pos:column="48">(<argument><expr><name pos:line="1958" pos:column="49">i</name> <op:operator pos:line="1958" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1958" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1958" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1959" pos:column="33">state</name> <op:operator pos:line="1959" pos:column="39">=</op:operator> <name pos:line="1959" pos:column="41">SCE_HPHP_COMPLEX_VARIABLE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1960" pos:column="27">else <if pos:line="1960" pos:column="32">if <condition pos:line="1960" pos:column="35">(<expr><name pos:line="1960" pos:column="36">ch</name> <op:operator pos:line="1960" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1960" pos:column="42">'$'</lit:literal> <op:operator pos:line="1960" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="1960" pos:column="49">IsPhpWordStart</name><argument_list pos:line="1960" pos:column="63">(<argument><expr><name pos:line="1960" pos:column="64">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1960" pos:column="72"> <block pos:line="1960" pos:column="73">{
				<expr_stmt><expr><call><name><name pos:line="1961" pos:column="33">styler</name><op:operator pos:line="1961" pos:column="39">.</op:operator><name pos:line="1961" pos:column="40">ColourTo</name></name><argument_list pos:line="1961" pos:column="48">(<argument><expr><name pos:line="1961" pos:column="49">i</name> <op:operator pos:line="1961" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="1961" pos:column="53">1</lit:literal></expr></argument>, <argument><expr><name pos:line="1961" pos:column="56">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1962" pos:column="33">state</name> <op:operator pos:line="1962" pos:column="39">=</op:operator> <name pos:line="1962" pos:column="41">SCE_HPHP_HSTRING_VARIABLE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="1963" pos:column="27">else <if pos:line="1963" pos:column="32">if <condition pos:line="1963" pos:column="35">(<expr><call><name><name pos:line="1963" pos:column="36">styler</name><op:operator pos:line="1963" pos:column="42">.</op:operator><name pos:line="1963" pos:column="43">Match</name></name><argument_list pos:line="1963" pos:column="48">(<argument><expr><name pos:line="1963" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="1963" pos:column="52">phpStringDelimiter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1963" pos:column="72"> <block pos:line="1963" pos:column="73">{
				<if pos:line="1964" pos:column="33">if <condition pos:line="1964" pos:column="36">(<expr><name><name pos:line="1964" pos:column="37">phpStringDelimiter</name><index pos:line="1964" pos:column="55">[<expr><lit:literal type="number" pos:line="1964" pos:column="56">0</lit:literal></expr>]</index></name> <op:operator pos:line="1964" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="1964" pos:column="62">'\"'</lit:literal></expr>)</condition><then pos:line="1964" pos:column="67"> <block pos:line="1964" pos:column="68">{
					<expr_stmt><expr><call><name><name pos:line="1965" pos:column="41">styler</name><op:operator pos:line="1965" pos:column="47">.</op:operator><name pos:line="1965" pos:column="48">ColourTo</name></name><argument_list pos:line="1965" pos:column="56">(<argument><expr><name pos:line="1965" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1965" pos:column="60">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1966" pos:column="41">state</name> <op:operator pos:line="1966" pos:column="47">=</op:operator> <name pos:line="1966" pos:column="49">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1967" pos:column="35">else <if pos:line="1967" pos:column="40">if <condition pos:line="1967" pos:column="43">(<expr><call><name pos:line="1967" pos:column="44">isLineEnd</name><argument_list pos:line="1967" pos:column="53">(<argument><expr><name pos:line="1967" pos:column="54">chPrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1967" pos:column="62"> <block pos:line="1967" pos:column="63">{
				<decl_stmt><decl><type><specifier pos:line="1968" pos:column="33">const</specifier> <name pos:line="1968" pos:column="39">int</name></type> <name pos:line="1968" pos:column="43">psdLength</name> <init pos:line="1968" pos:column="53">= <expr><call><name pos:line="1968" pos:column="55">strlen</name><argument_list pos:line="1968" pos:column="61">(<argument><expr><name pos:line="1968" pos:column="62">phpStringDelimiter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier pos:line="1969" pos:column="41">const</specifier> <name pos:line="1969" pos:column="47">char</name></type> <name pos:line="1969" pos:column="52">chAfterPsd</name> <init pos:line="1969" pos:column="63">= <expr><call><name><name pos:line="1969" pos:column="65">styler</name><op:operator pos:line="1969" pos:column="71">.</op:operator><name pos:line="1969" pos:column="72">SafeGetCharAt</name></name><argument_list pos:line="1969" pos:column="85">(<argument><expr><name pos:line="1969" pos:column="86">i</name> <op:operator pos:line="1969" pos:column="88">+</op:operator> <name pos:line="1969" pos:column="90">psdLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier pos:line="1970" pos:column="41">const</specifier> <name pos:line="1970" pos:column="47">char</name></type> <name pos:line="1970" pos:column="52">chAfterPsd2</name> <init pos:line="1970" pos:column="64">= <expr><call><name><name pos:line="1970" pos:column="66">styler</name><op:operator pos:line="1970" pos:column="72">.</op:operator><name pos:line="1970" pos:column="73">SafeGetCharAt</name></name><argument_list pos:line="1970" pos:column="86">(<argument><expr><name pos:line="1970" pos:column="87">i</name> <op:operator pos:line="1970" pos:column="89">+</op:operator> <name pos:line="1970" pos:column="91">psdLength</name> <op:operator pos:line="1970" pos:column="101">+</op:operator> <lit:literal type="number" pos:line="1970" pos:column="103">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="1971" pos:column="41">if <condition pos:line="1971" pos:column="44">(<expr><call><name pos:line="1971" pos:column="45">isLineEnd</name><argument_list pos:line="1971" pos:column="54">(<argument><expr><name pos:line="1971" pos:column="55">chAfterPsd</name></expr></argument>)</argument_list></call> <op:operator pos:line="1971" pos:column="67">||</op:operator>
						<op:operator pos:line="1972" pos:column="49">(</op:operator><name pos:line="1972" pos:column="50">chAfterPsd</name> <op:operator pos:line="1972" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="1972" pos:column="64">';'</lit:literal> <op:operator pos:line="1972" pos:column="68">&amp;&amp;</op:operator> <call><name pos:line="1972" pos:column="71">isLineEnd</name><argument_list pos:line="1972" pos:column="80">(<argument><expr><name pos:line="1972" pos:column="81">chAfterPsd2</name></expr></argument>)</argument_list></call><op:operator pos:line="1972" pos:column="93">)</op:operator></expr>)</condition><then pos:line="1972" pos:column="95"> <block pos:line="1972" pos:column="96">{
							<expr_stmt><expr><name pos:line="1973" pos:column="57">i</name> <op:operator pos:line="1973" pos:column="59">+=</op:operator> <op:operator pos:line="1973" pos:column="62">(</op:operator><op:operator pos:line="1973" pos:column="63">(</op:operator><op:operator pos:line="1973" pos:column="64">(</op:operator><name pos:line="1973" pos:column="65">i</name> <op:operator pos:line="1973" pos:column="67">+</op:operator> <name pos:line="1973" pos:column="69">psdLength</name><op:operator pos:line="1973" pos:column="78">)</op:operator> <op:operator pos:line="1973" pos:column="80">&lt;</op:operator> <name pos:line="1973" pos:column="82">lengthDoc</name><op:operator pos:line="1973" pos:column="91">)</op:operator> <op:operator pos:line="1973" pos:column="93">?</op:operator> <name pos:line="1973" pos:column="95">psdLength</name> <op:operator pos:line="1973" pos:column="105">:</op:operator> <name pos:line="1973" pos:column="107">lengthDoc</name><op:operator pos:line="1973" pos:column="116">)</op:operator> <op:operator pos:line="1973" pos:column="118">-</op:operator> <lit:literal type="number" pos:line="1973" pos:column="120">1</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="1974" pos:column="49">styler</name><op:operator pos:line="1974" pos:column="55">.</op:operator><name pos:line="1974" pos:column="56">ColourTo</name></name><argument_list pos:line="1974" pos:column="64">(<argument><expr><name pos:line="1974" pos:column="65">i</name></expr></argument>, <argument><expr><name pos:line="1974" pos:column="68">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="1975" pos:column="49">state</name> <op:operator pos:line="1975" pos:column="55">=</op:operator> <name pos:line="1975" pos:column="57">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
						<if pos:line="1976" pos:column="49">if <condition pos:line="1976" pos:column="52">(<expr><name pos:line="1976" pos:column="53">foldHeredoc</name></expr>)</condition><then pos:line="1976" pos:column="65"> <expr_stmt><expr><name pos:line="1976" pos:column="66">levelCurrent</name><op:operator pos:line="1976" pos:column="78">--</op:operator></expr>;</expr_stmt></then></if>
					}</block></then></if>
				}</block></then></if></else></if>
			}</block></then></if></else></if></else></if></else></if>
			<break pos:line="1980" pos:column="25">break;</break>
		</case><case pos:line="1981" pos:column="17">case <expr><name pos:line="1981" pos:column="22">SCE_HPHP_SIMPLESTRING</name></expr>:
			<if pos:line="1982" pos:column="25">if <condition pos:line="1982" pos:column="28">(<expr><name><name pos:line="1982" pos:column="29">phpStringDelimiter</name><index pos:line="1982" pos:column="47">[<expr><lit:literal type="number" pos:line="1982" pos:column="48">0</lit:literal></expr>]</index></name> <op:operator pos:line="1982" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="1982" pos:column="54">'\''</lit:literal></expr>)</condition><then pos:line="1982" pos:column="59"> <block pos:line="1982" pos:column="60">{
				<if pos:line="1983" pos:column="33">if <condition pos:line="1983" pos:column="36">(<expr><name pos:line="1983" pos:column="37">ch</name> <op:operator pos:line="1983" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="1983" pos:column="43">'\\'</lit:literal></expr>)</condition><then pos:line="1983" pos:column="48"> <block pos:line="1983" pos:column="49">{
					<comment type="line" pos:line="1984" pos:column="41">// skip the next char</comment>
					<expr_stmt><expr><name pos:line="1985" pos:column="41">i</name><op:operator pos:line="1985" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="1986" pos:column="35">else <if pos:line="1986" pos:column="40">if <condition pos:line="1986" pos:column="43">(<expr><name pos:line="1986" pos:column="44">ch</name> <op:operator pos:line="1986" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="1986" pos:column="50">'\''</lit:literal></expr>)</condition><then pos:line="1986" pos:column="55"> <block pos:line="1986" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="1987" pos:column="41">styler</name><op:operator pos:line="1987" pos:column="47">.</op:operator><name pos:line="1987" pos:column="48">ColourTo</name></name><argument_list pos:line="1987" pos:column="56">(<argument><expr><name pos:line="1987" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1987" pos:column="60">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1988" pos:column="41">state</name> <op:operator pos:line="1988" pos:column="47">=</op:operator> <name pos:line="1988" pos:column="49">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then> <else pos:line="1990" pos:column="27">else <if pos:line="1990" pos:column="32">if <condition pos:line="1990" pos:column="35">(<expr><call><name pos:line="1990" pos:column="36">isLineEnd</name><argument_list pos:line="1990" pos:column="45">(<argument><expr><name pos:line="1990" pos:column="46">chPrev</name></expr></argument>)</argument_list></call> <op:operator pos:line="1990" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="1990" pos:column="57">styler</name><op:operator pos:line="1990" pos:column="63">.</op:operator><name pos:line="1990" pos:column="64">Match</name></name><argument_list pos:line="1990" pos:column="69">(<argument><expr><name pos:line="1990" pos:column="70">i</name></expr></argument>, <argument><expr><name pos:line="1990" pos:column="73">phpStringDelimiter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1990" pos:column="93"> <block pos:line="1990" pos:column="94">{
				<decl_stmt><decl><type><specifier pos:line="1991" pos:column="33">const</specifier> <name pos:line="1991" pos:column="39">int</name></type> <name pos:line="1991" pos:column="43">psdLength</name> <init pos:line="1991" pos:column="53">= <expr><call><name pos:line="1991" pos:column="55">strlen</name><argument_list pos:line="1991" pos:column="61">(<argument><expr><name pos:line="1991" pos:column="62">phpStringDelimiter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="1992" pos:column="33">const</specifier> <name pos:line="1992" pos:column="39">char</name></type> <name pos:line="1992" pos:column="44">chAfterPsd</name> <init pos:line="1992" pos:column="55">= <expr><call><name><name pos:line="1992" pos:column="57">styler</name><op:operator pos:line="1992" pos:column="63">.</op:operator><name pos:line="1992" pos:column="64">SafeGetCharAt</name></name><argument_list pos:line="1992" pos:column="77">(<argument><expr><name pos:line="1992" pos:column="78">i</name> <op:operator pos:line="1992" pos:column="80">+</op:operator> <name pos:line="1992" pos:column="82">psdLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="1993" pos:column="33">const</specifier> <name pos:line="1993" pos:column="39">char</name></type> <name pos:line="1993" pos:column="44">chAfterPsd2</name> <init pos:line="1993" pos:column="56">= <expr><call><name><name pos:line="1993" pos:column="58">styler</name><op:operator pos:line="1993" pos:column="64">.</op:operator><name pos:line="1993" pos:column="65">SafeGetCharAt</name></name><argument_list pos:line="1993" pos:column="78">(<argument><expr><name pos:line="1993" pos:column="79">i</name> <op:operator pos:line="1993" pos:column="81">+</op:operator> <name pos:line="1993" pos:column="83">psdLength</name> <op:operator pos:line="1993" pos:column="93">+</op:operator> <lit:literal type="number" pos:line="1993" pos:column="95">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1994" pos:column="33">if <condition pos:line="1994" pos:column="36">(<expr><call><name pos:line="1994" pos:column="37">isLineEnd</name><argument_list pos:line="1994" pos:column="46">(<argument><expr><name pos:line="1994" pos:column="47">chAfterPsd</name></expr></argument>)</argument_list></call> <op:operator pos:line="1994" pos:column="59">||</op:operator>
				<op:operator pos:line="1995" pos:column="33">(</op:operator><name pos:line="1995" pos:column="34">chAfterPsd</name> <op:operator pos:line="1995" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="1995" pos:column="48">';'</lit:literal> <op:operator pos:line="1995" pos:column="52">&amp;&amp;</op:operator> <call><name pos:line="1995" pos:column="55">isLineEnd</name><argument_list pos:line="1995" pos:column="64">(<argument><expr><name pos:line="1995" pos:column="65">chAfterPsd2</name></expr></argument>)</argument_list></call><op:operator pos:line="1995" pos:column="77">)</op:operator></expr>)</condition><then pos:line="1995" pos:column="79"> <block pos:line="1995" pos:column="80">{
					<expr_stmt><expr><name pos:line="1996" pos:column="41">i</name> <op:operator pos:line="1996" pos:column="43">+=</op:operator> <op:operator pos:line="1996" pos:column="46">(</op:operator><op:operator pos:line="1996" pos:column="47">(</op:operator><op:operator pos:line="1996" pos:column="48">(</op:operator><name pos:line="1996" pos:column="49">i</name> <op:operator pos:line="1996" pos:column="51">+</op:operator> <name pos:line="1996" pos:column="53">psdLength</name><op:operator pos:line="1996" pos:column="62">)</op:operator> <op:operator pos:line="1996" pos:column="64">&lt;</op:operator> <name pos:line="1996" pos:column="66">lengthDoc</name><op:operator pos:line="1996" pos:column="75">)</op:operator> <op:operator pos:line="1996" pos:column="77">?</op:operator> <name pos:line="1996" pos:column="79">psdLength</name> <op:operator pos:line="1996" pos:column="89">:</op:operator> <name pos:line="1996" pos:column="91">lengthDoc</name><op:operator pos:line="1996" pos:column="100">)</op:operator> <op:operator pos:line="1996" pos:column="102">-</op:operator> <lit:literal type="number" pos:line="1996" pos:column="104">1</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="1997" pos:column="41">styler</name><op:operator pos:line="1997" pos:column="47">.</op:operator><name pos:line="1997" pos:column="48">ColourTo</name></name><argument_list pos:line="1997" pos:column="56">(<argument><expr><name pos:line="1997" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="1997" pos:column="60">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1998" pos:column="41">state</name> <op:operator pos:line="1998" pos:column="47">=</op:operator> <name pos:line="1998" pos:column="49">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
					<if pos:line="1999" pos:column="41">if <condition pos:line="1999" pos:column="44">(<expr><name pos:line="1999" pos:column="45">foldHeredoc</name></expr>)</condition><then pos:line="1999" pos:column="57"> <expr_stmt><expr><name pos:line="1999" pos:column="58">levelCurrent</name><op:operator pos:line="1999" pos:column="70">--</op:operator></expr>;</expr_stmt></then></if>
				}</block></then></if>
			}</block></then></if></else></if>
			<break pos:line="2002" pos:column="25">break;</break>
		</case><case pos:line="2003" pos:column="17">case <expr><name pos:line="2003" pos:column="22">SCE_HPHP_HSTRING_VARIABLE</name></expr>:
			<if pos:line="2004" pos:column="25">if <condition pos:line="2004" pos:column="28">(<expr><op:operator pos:line="2004" pos:column="29">!</op:operator><call><name pos:line="2004" pos:column="30">IsPhpWordChar</name><argument_list pos:line="2004" pos:column="43">(<argument><expr><name pos:line="2004" pos:column="44">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2004" pos:column="52"> <block pos:line="2004" pos:column="53">{
				<expr_stmt><expr><call><name><name pos:line="2005" pos:column="33">styler</name><op:operator pos:line="2005" pos:column="39">.</op:operator><name pos:line="2005" pos:column="40">ColourTo</name></name><argument_list pos:line="2005" pos:column="48">(<argument><expr><name pos:line="2005" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="2005" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2006" pos:column="33">state</name> <op:operator pos:line="2006" pos:column="39">=</op:operator> <name pos:line="2006" pos:column="41">SCE_HPHP_HSTRING</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="2008" pos:column="25">break;</break>
		</case><case pos:line="2009" pos:column="17">case <expr><name pos:line="2009" pos:column="22">SCE_HPHP_COMPLEX_VARIABLE</name></expr>:
			<if pos:line="2010" pos:column="25">if <condition pos:line="2010" pos:column="28">(<expr><name pos:line="2010" pos:column="29">ch</name> <op:operator pos:line="2010" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="2010" pos:column="35">'}'</lit:literal></expr>)</condition><then pos:line="2010" pos:column="39"> <block pos:line="2010" pos:column="40">{
				<expr_stmt><expr><call><name><name pos:line="2011" pos:column="33">styler</name><op:operator pos:line="2011" pos:column="39">.</op:operator><name pos:line="2011" pos:column="40">ColourTo</name></name><argument_list pos:line="2011" pos:column="48">(<argument><expr><name pos:line="2011" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="2011" pos:column="52">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2012" pos:column="33">state</name> <op:operator pos:line="2012" pos:column="39">=</op:operator> <name pos:line="2012" pos:column="41">SCE_HPHP_HSTRING</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="2014" pos:column="25">break;</break>
		</case><case pos:line="2015" pos:column="17">case <expr><name pos:line="2015" pos:column="22">SCE_HPHP_OPERATOR</name></expr>:
		</case><case pos:line="2016" pos:column="17">case <expr><name pos:line="2016" pos:column="22">SCE_HPHP_DEFAULT</name></expr>:
			<expr_stmt><expr><call><name><name pos:line="2017" pos:column="25">styler</name><op:operator pos:line="2017" pos:column="31">.</op:operator><name pos:line="2017" pos:column="32">ColourTo</name></name><argument_list pos:line="2017" pos:column="40">(<argument><expr><name pos:line="2017" pos:column="41">i</name> <op:operator pos:line="2017" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="2017" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2017" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="2018" pos:column="25">if <condition pos:line="2018" pos:column="28">(<expr><call><name pos:line="2018" pos:column="29">IsADigit</name><argument_list pos:line="2018" pos:column="37">(<argument><expr><name pos:line="2018" pos:column="38">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="2018" pos:column="42">||</op:operator> <op:operator pos:line="2018" pos:column="45">(</op:operator><name pos:line="2018" pos:column="46">ch</name> <op:operator pos:line="2018" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="2018" pos:column="52">'.'</lit:literal> <op:operator pos:line="2018" pos:column="56">&amp;&amp;</op:operator> <call><name pos:line="2018" pos:column="59">IsADigit</name><argument_list pos:line="2018" pos:column="67">(<argument><expr><name pos:line="2018" pos:column="68">chNext</name></expr></argument>)</argument_list></call><op:operator pos:line="2018" pos:column="75">)</op:operator></expr>)</condition><then pos:line="2018" pos:column="77"> <block pos:line="2018" pos:column="78">{
				<expr_stmt><expr><name pos:line="2019" pos:column="33">state</name> <op:operator pos:line="2019" pos:column="39">=</op:operator> <name pos:line="2019" pos:column="41">SCE_HPHP_NUMBER</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2020" pos:column="27">else <if pos:line="2020" pos:column="32">if <condition pos:line="2020" pos:column="35">(<expr><call><name pos:line="2020" pos:column="36">IsAWordStart</name><argument_list pos:line="2020" pos:column="48">(<argument><expr><name pos:line="2020" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2020" pos:column="53"> <block pos:line="2020" pos:column="54">{
				<expr_stmt><expr><name pos:line="2021" pos:column="33">state</name> <op:operator pos:line="2021" pos:column="39">=</op:operator> <name pos:line="2021" pos:column="41">SCE_HPHP_WORD</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2022" pos:column="27">else <if pos:line="2022" pos:column="32">if <condition pos:line="2022" pos:column="35">(<expr><name pos:line="2022" pos:column="36">ch</name> <op:operator pos:line="2022" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2022" pos:column="42">'/'</lit:literal> <op:operator pos:line="2022" pos:column="46">&amp;&amp;</op:operator> <name pos:line="2022" pos:column="49">chNext</name> <op:operator pos:line="2022" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="2022" pos:column="59">'*'</lit:literal></expr>)</condition><then pos:line="2022" pos:column="63"> <block pos:line="2022" pos:column="64">{
				<expr_stmt><expr><name pos:line="2023" pos:column="33">i</name><op:operator pos:line="2023" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2024" pos:column="33">state</name> <op:operator pos:line="2024" pos:column="39">=</op:operator> <name pos:line="2024" pos:column="41">SCE_HPHP_COMMENT</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2025" pos:column="27">else <if pos:line="2025" pos:column="32">if <condition pos:line="2025" pos:column="35">(<expr><name pos:line="2025" pos:column="36">ch</name> <op:operator pos:line="2025" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2025" pos:column="42">'/'</lit:literal> <op:operator pos:line="2025" pos:column="46">&amp;&amp;</op:operator> <name pos:line="2025" pos:column="49">chNext</name> <op:operator pos:line="2025" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="2025" pos:column="59">'/'</lit:literal></expr>)</condition><then pos:line="2025" pos:column="63"> <block pos:line="2025" pos:column="64">{
				<expr_stmt><expr><name pos:line="2026" pos:column="33">i</name><op:operator pos:line="2026" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2027" pos:column="33">state</name> <op:operator pos:line="2027" pos:column="39">=</op:operator> <name pos:line="2027" pos:column="41">SCE_HPHP_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2028" pos:column="27">else <if pos:line="2028" pos:column="32">if <condition pos:line="2028" pos:column="35">(<expr><name pos:line="2028" pos:column="36">ch</name> <op:operator pos:line="2028" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2028" pos:column="42">'#'</lit:literal></expr>)</condition><then pos:line="2028" pos:column="46"> <block pos:line="2028" pos:column="47">{
				<expr_stmt><expr><name pos:line="2029" pos:column="33">state</name> <op:operator pos:line="2029" pos:column="39">=</op:operator> <name pos:line="2029" pos:column="41">SCE_HPHP_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2030" pos:column="27">else <if pos:line="2030" pos:column="32">if <condition pos:line="2030" pos:column="35">(<expr><name pos:line="2030" pos:column="36">ch</name> <op:operator pos:line="2030" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2030" pos:column="42">'\"'</lit:literal></expr>)</condition><then pos:line="2030" pos:column="47"> <block pos:line="2030" pos:column="48">{
				<expr_stmt><expr><name pos:line="2031" pos:column="33">state</name> <op:operator pos:line="2031" pos:column="39">=</op:operator> <name pos:line="2031" pos:column="41">SCE_HPHP_HSTRING</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="2032" pos:column="33">strcpy</name><argument_list pos:line="2032" pos:column="39">(<argument><expr><name pos:line="2032" pos:column="40">phpStringDelimiter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2032" pos:column="60">"\""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="2033" pos:column="27">else <if pos:line="2033" pos:column="32">if <condition pos:line="2033" pos:column="35">(<expr><call><name><name pos:line="2033" pos:column="36">styler</name><op:operator pos:line="2033" pos:column="42">.</op:operator><name pos:line="2033" pos:column="43">Match</name></name><argument_list pos:line="2033" pos:column="48">(<argument><expr><name pos:line="2033" pos:column="49">i</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2033" pos:column="52">"&lt;&lt;&lt;"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2033" pos:column="59"> <block pos:line="2033" pos:column="60">{
				<decl_stmt><decl><type><name pos:line="2034" pos:column="33">bool</name></type> <name pos:line="2034" pos:column="38">isSimpleString</name> <init pos:line="2034" pos:column="53">= <expr><lit:literal type="boolean" pos:line="2034" pos:column="55">false</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="2035" pos:column="33">i</name> <op:operator pos:line="2035" pos:column="35">=</op:operator> <call><name pos:line="2035" pos:column="37">FindPhpStringDelimiter</name><argument_list pos:line="2035" pos:column="59">(<argument><expr><name pos:line="2035" pos:column="60">phpStringDelimiter</name></expr></argument>, <argument><expr><sizeof pos:line="2035" pos:column="80">sizeof<argument_list pos:line="2035" pos:column="86">(<argument><expr><name pos:line="2035" pos:column="87">phpStringDelimiter</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="2035" pos:column="108">i</name> <op:operator pos:line="2035" pos:column="110">+</op:operator> <lit:literal type="number" pos:line="2035" pos:column="112">3</lit:literal></expr></argument>, <argument><expr><name pos:line="2035" pos:column="115">lengthDoc</name></expr></argument>, <argument><expr><name pos:line="2035" pos:column="126">styler</name></expr></argument>, <argument><expr><name pos:line="2035" pos:column="134">isSimpleString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="2036" pos:column="33">if <condition pos:line="2036" pos:column="36">(<expr><call><name pos:line="2036" pos:column="37">strlen</name><argument_list pos:line="2036" pos:column="43">(<argument><expr><name pos:line="2036" pos:column="44">phpStringDelimiter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2036" pos:column="64"> <block pos:line="2036" pos:column="65">{
					<expr_stmt><expr><name pos:line="2037" pos:column="41">state</name> <op:operator pos:line="2037" pos:column="47">=</op:operator> <op:operator pos:line="2037" pos:column="49">(</op:operator><name pos:line="2037" pos:column="50">isSimpleString</name> <op:operator pos:line="2037" pos:column="65">?</op:operator> <name pos:line="2037" pos:column="67">SCE_HPHP_SIMPLESTRING</name> <op:operator pos:line="2037" pos:column="89">:</op:operator> <name pos:line="2037" pos:column="91">SCE_HPHP_HSTRING</name><op:operator pos:line="2037" pos:column="107">)</op:operator></expr>;</expr_stmt>
					<if pos:line="2038" pos:column="41">if <condition pos:line="2038" pos:column="44">(<expr><name pos:line="2038" pos:column="45">foldHeredoc</name></expr>)</condition><then pos:line="2038" pos:column="57"> <expr_stmt><expr><name pos:line="2038" pos:column="58">levelCurrent</name><op:operator pos:line="2038" pos:column="70">++</op:operator></expr>;</expr_stmt></then></if>
				}</block></then></if>
			}</block></then> <else pos:line="2040" pos:column="27">else <if pos:line="2040" pos:column="32">if <condition pos:line="2040" pos:column="35">(<expr><name pos:line="2040" pos:column="36">ch</name> <op:operator pos:line="2040" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2040" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="2040" pos:column="47"> <block pos:line="2040" pos:column="48">{
				<expr_stmt><expr><name pos:line="2041" pos:column="33">state</name> <op:operator pos:line="2041" pos:column="39">=</op:operator> <name pos:line="2041" pos:column="41">SCE_HPHP_SIMPLESTRING</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="2042" pos:column="33">strcpy</name><argument_list pos:line="2042" pos:column="39">(<argument><expr><name pos:line="2042" pos:column="40">phpStringDelimiter</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2042" pos:column="60">"\'"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="2043" pos:column="27">else <if pos:line="2043" pos:column="32">if <condition pos:line="2043" pos:column="35">(<expr><name pos:line="2043" pos:column="36">ch</name> <op:operator pos:line="2043" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2043" pos:column="42">'$'</lit:literal> <op:operator pos:line="2043" pos:column="46">&amp;&amp;</op:operator> <call><name pos:line="2043" pos:column="49">IsPhpWordStart</name><argument_list pos:line="2043" pos:column="63">(<argument><expr><name pos:line="2043" pos:column="64">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2043" pos:column="72"> <block pos:line="2043" pos:column="73">{
				<expr_stmt><expr><name pos:line="2044" pos:column="33">state</name> <op:operator pos:line="2044" pos:column="39">=</op:operator> <name pos:line="2044" pos:column="41">SCE_HPHP_VARIABLE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2045" pos:column="27">else <if pos:line="2045" pos:column="32">if <condition pos:line="2045" pos:column="35">(<expr><call><name pos:line="2045" pos:column="36">IsOperator</name><argument_list pos:line="2045" pos:column="46">(<argument><expr><name pos:line="2045" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2045" pos:column="51"> <block pos:line="2045" pos:column="52">{
				<expr_stmt><expr><name pos:line="2046" pos:column="33">state</name> <op:operator pos:line="2046" pos:column="39">=</op:operator> <name pos:line="2046" pos:column="41">SCE_HPHP_OPERATOR</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2047" pos:column="27">else <if pos:line="2047" pos:column="32">if <condition pos:line="2047" pos:column="35">(<expr><op:operator pos:line="2047" pos:column="36">(</op:operator><name pos:line="2047" pos:column="37">state</name> <op:operator pos:line="2047" pos:column="43">==</op:operator> <name pos:line="2047" pos:column="46">SCE_HPHP_OPERATOR</name><op:operator pos:line="2047" pos:column="63">)</op:operator> <op:operator pos:line="2047" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="2047" pos:column="68">(</op:operator><call><name pos:line="2047" pos:column="69">IsASpace</name><argument_list pos:line="2047" pos:column="77">(<argument><expr><name pos:line="2047" pos:column="78">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="2047" pos:column="81">)</op:operator></expr>)</condition><then pos:line="2047" pos:column="83"> <block pos:line="2047" pos:column="84">{
				<expr_stmt><expr><name pos:line="2048" pos:column="33">state</name> <op:operator pos:line="2048" pos:column="39">=</op:operator> <name pos:line="2048" pos:column="41">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="2050" pos:column="25">break;</break>
			<comment type="line" format="doxygen" pos:line="2051" pos:column="25">///////////// end - PHP state handling</comment>
		</case>}</block></switch>

		<comment type="line" pos:line="2054" pos:column="17">// Some of the above terminated their lexeme but since the same character starts</comment>
		<comment type="line" pos:line="2055" pos:column="17">// the same class again, only reenter if non empty segment.</comment>

		<decl_stmt><decl><type><name pos:line="2057" pos:column="17">bool</name></type> <name pos:line="2057" pos:column="22">nonEmptySegment</name> <init pos:line="2057" pos:column="38">= <expr><name pos:line="2057" pos:column="40">i</name> <op:operator pos:line="2057" pos:column="42">&gt;=</op:operator> <call><name><name pos:line="2057" pos:column="45">static_cast</name><argument_list pos:line="2057" pos:column="56">&lt;<argument><expr><name pos:line="2057" pos:column="57">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2057" pos:column="61">(<argument><expr><call><name><name pos:line="2057" pos:column="62">styler</name><op:operator pos:line="2057" pos:column="68">.</op:operator><name pos:line="2057" pos:column="69">GetStartSegment</name></name><argument_list pos:line="2057" pos:column="84">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2058" pos:column="17">if <condition pos:line="2058" pos:column="20">(<expr><name pos:line="2058" pos:column="21">state</name> <op:operator pos:line="2058" pos:column="27">==</op:operator> <name pos:line="2058" pos:column="30">SCE_HB_DEFAULT</name></expr>)</condition><then pos:line="2058" pos:column="45"> <block pos:line="2058" pos:column="46">{    <comment type="line" pos:line="2058" pos:column="51">// One of the above succeeded</comment>
			<if pos:line="2059" pos:column="25">if <condition pos:line="2059" pos:column="28">(<expr><op:operator pos:line="2059" pos:column="29">(</op:operator><name pos:line="2059" pos:column="30">ch</name> <op:operator pos:line="2059" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="2059" pos:column="36">'\"'</lit:literal><op:operator pos:line="2059" pos:column="40">)</op:operator> <op:operator pos:line="2059" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="2059" pos:column="45">(</op:operator><name pos:line="2059" pos:column="46">nonEmptySegment</name><op:operator pos:line="2059" pos:column="61">)</op:operator></expr>)</condition><then pos:line="2059" pos:column="63"> <block pos:line="2059" pos:column="64">{
				<expr_stmt><expr><name pos:line="2060" pos:column="33">state</name> <op:operator pos:line="2060" pos:column="39">=</op:operator> <name pos:line="2060" pos:column="41">SCE_HB_STRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2061" pos:column="27">else <if pos:line="2061" pos:column="32">if <condition pos:line="2061" pos:column="35">(<expr><name pos:line="2061" pos:column="36">ch</name> <op:operator pos:line="2061" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2061" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="2061" pos:column="47"> <block pos:line="2061" pos:column="48">{
				<expr_stmt><expr><name pos:line="2062" pos:column="33">state</name> <op:operator pos:line="2062" pos:column="39">=</op:operator> <name pos:line="2062" pos:column="41">SCE_HB_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2063" pos:column="27">else <if pos:line="2063" pos:column="32">if <condition pos:line="2063" pos:column="35">(<expr><call><name pos:line="2063" pos:column="36">IsAWordStart</name><argument_list pos:line="2063" pos:column="48">(<argument><expr><name pos:line="2063" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2063" pos:column="53"> <block pos:line="2063" pos:column="54">{
				<expr_stmt><expr><name pos:line="2064" pos:column="33">state</name> <op:operator pos:line="2064" pos:column="39">=</op:operator> <name pos:line="2064" pos:column="41">SCE_HB_WORD</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2065" pos:column="27">else <if pos:line="2065" pos:column="32">if <condition pos:line="2065" pos:column="35">(<expr><call><name pos:line="2065" pos:column="36">IsOperator</name><argument_list pos:line="2065" pos:column="46">(<argument><expr><name pos:line="2065" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2065" pos:column="51"> <block pos:line="2065" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="2066" pos:column="33">styler</name><op:operator pos:line="2066" pos:column="39">.</op:operator><name pos:line="2066" pos:column="40">ColourTo</name></name><argument_list pos:line="2066" pos:column="48">(<argument><expr><name pos:line="2066" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="2066" pos:column="52">SCE_HB_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
		}</block></then> <else pos:line="2068" pos:column="19">else <if pos:line="2068" pos:column="24">if <condition pos:line="2068" pos:column="27">(<expr><name pos:line="2068" pos:column="28">state</name> <op:operator pos:line="2068" pos:column="34">==</op:operator> <name pos:line="2068" pos:column="37">SCE_HBA_DEFAULT</name></expr>)</condition><then pos:line="2068" pos:column="53"> <block pos:line="2068" pos:column="54">{    <comment type="line" pos:line="2068" pos:column="59">// One of the above succeeded</comment>
			<if pos:line="2069" pos:column="25">if <condition pos:line="2069" pos:column="28">(<expr><op:operator pos:line="2069" pos:column="29">(</op:operator><name pos:line="2069" pos:column="30">ch</name> <op:operator pos:line="2069" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="2069" pos:column="36">'\"'</lit:literal><op:operator pos:line="2069" pos:column="40">)</op:operator> <op:operator pos:line="2069" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="2069" pos:column="45">(</op:operator><name pos:line="2069" pos:column="46">nonEmptySegment</name><op:operator pos:line="2069" pos:column="61">)</op:operator></expr>)</condition><then pos:line="2069" pos:column="63"> <block pos:line="2069" pos:column="64">{
				<expr_stmt><expr><name pos:line="2070" pos:column="33">state</name> <op:operator pos:line="2070" pos:column="39">=</op:operator> <name pos:line="2070" pos:column="41">SCE_HBA_STRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2071" pos:column="27">else <if pos:line="2071" pos:column="32">if <condition pos:line="2071" pos:column="35">(<expr><name pos:line="2071" pos:column="36">ch</name> <op:operator pos:line="2071" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2071" pos:column="42">'\''</lit:literal></expr>)</condition><then pos:line="2071" pos:column="47"> <block pos:line="2071" pos:column="48">{
				<expr_stmt><expr><name pos:line="2072" pos:column="33">state</name> <op:operator pos:line="2072" pos:column="39">=</op:operator> <name pos:line="2072" pos:column="41">SCE_HBA_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2073" pos:column="27">else <if pos:line="2073" pos:column="32">if <condition pos:line="2073" pos:column="35">(<expr><call><name pos:line="2073" pos:column="36">IsAWordStart</name><argument_list pos:line="2073" pos:column="48">(<argument><expr><name pos:line="2073" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2073" pos:column="53"> <block pos:line="2073" pos:column="54">{
				<expr_stmt><expr><name pos:line="2074" pos:column="33">state</name> <op:operator pos:line="2074" pos:column="39">=</op:operator> <name pos:line="2074" pos:column="41">SCE_HBA_WORD</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2075" pos:column="27">else <if pos:line="2075" pos:column="32">if <condition pos:line="2075" pos:column="35">(<expr><call><name pos:line="2075" pos:column="36">IsOperator</name><argument_list pos:line="2075" pos:column="46">(<argument><expr><name pos:line="2075" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2075" pos:column="51"> <block pos:line="2075" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="2076" pos:column="33">styler</name><op:operator pos:line="2076" pos:column="39">.</op:operator><name pos:line="2076" pos:column="40">ColourTo</name></name><argument_list pos:line="2076" pos:column="48">(<argument><expr><name pos:line="2076" pos:column="49">i</name></expr></argument>, <argument><expr><name pos:line="2076" pos:column="52">SCE_HBA_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
		}</block></then> <else pos:line="2078" pos:column="19">else <if pos:line="2078" pos:column="24">if <condition pos:line="2078" pos:column="27">(<expr><name pos:line="2078" pos:column="28">state</name> <op:operator pos:line="2078" pos:column="34">==</op:operator> <name pos:line="2078" pos:column="37">SCE_HJ_DEFAULT</name></expr>)</condition><then pos:line="2078" pos:column="52"> <block pos:line="2078" pos:column="53">{    <comment type="line" pos:line="2078" pos:column="58">// One of the above succeeded</comment>
			<if pos:line="2079" pos:column="25">if <condition pos:line="2079" pos:column="28">(<expr><name pos:line="2079" pos:column="29">ch</name> <op:operator pos:line="2079" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="2079" pos:column="35">'/'</lit:literal> <op:operator pos:line="2079" pos:column="39">&amp;&amp;</op:operator> <name pos:line="2079" pos:column="42">chNext</name> <op:operator pos:line="2079" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="2079" pos:column="52">'*'</lit:literal></expr>)</condition><then pos:line="2079" pos:column="56"> <block pos:line="2079" pos:column="57">{
				<if pos:line="2080" pos:column="33">if <condition pos:line="2080" pos:column="36">(<expr><call><name><name pos:line="2080" pos:column="37">styler</name><op:operator pos:line="2080" pos:column="43">.</op:operator><name pos:line="2080" pos:column="44">SafeGetCharAt</name></name><argument_list pos:line="2080" pos:column="57">(<argument><expr><name pos:line="2080" pos:column="58">i</name> <op:operator pos:line="2080" pos:column="60">+</op:operator> <lit:literal type="number" pos:line="2080" pos:column="62">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="2080" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="2080" pos:column="68">'*'</lit:literal></expr>)</condition><then pos:line="2080" pos:column="72">
					<expr_stmt><expr><name pos:line="2081" pos:column="41">state</name> <op:operator pos:line="2081" pos:column="47">=</op:operator> <name pos:line="2081" pos:column="49">SCE_HJ_COMMENTDOC</name></expr>;</expr_stmt></then>
				<else pos:line="2082" pos:column="33">else
					<expr_stmt><expr><name pos:line="2083" pos:column="41">state</name> <op:operator pos:line="2083" pos:column="47">=</op:operator> <name pos:line="2083" pos:column="49">SCE_HJ_COMMENT</name></expr>;</expr_stmt></else></if>
			}</block></then> <else pos:line="2084" pos:column="27">else <if pos:line="2084" pos:column="32">if <condition pos:line="2084" pos:column="35">(<expr><name pos:line="2084" pos:column="36">ch</name> <op:operator pos:line="2084" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2084" pos:column="42">'/'</lit:literal> <op:operator pos:line="2084" pos:column="46">&amp;&amp;</op:operator> <name pos:line="2084" pos:column="49">chNext</name> <op:operator pos:line="2084" pos:column="56">==</op:operator> <lit:literal type="char" pos:line="2084" pos:column="59">'/'</lit:literal></expr>)</condition><then pos:line="2084" pos:column="63"> <block pos:line="2084" pos:column="64">{
				<expr_stmt><expr><name pos:line="2085" pos:column="33">state</name> <op:operator pos:line="2085" pos:column="39">=</op:operator> <name pos:line="2085" pos:column="41">SCE_HJ_COMMENTLINE</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2086" pos:column="27">else <if pos:line="2086" pos:column="32">if <condition pos:line="2086" pos:column="35">(<expr><op:operator pos:line="2086" pos:column="36">(</op:operator><name pos:line="2086" pos:column="37">ch</name> <op:operator pos:line="2086" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="2086" pos:column="43">'\"'</lit:literal><op:operator pos:line="2086" pos:column="47">)</op:operator> <op:operator pos:line="2086" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="2086" pos:column="52">(</op:operator><name pos:line="2086" pos:column="53">nonEmptySegment</name><op:operator pos:line="2086" pos:column="68">)</op:operator></expr>)</condition><then pos:line="2086" pos:column="70"> <block pos:line="2086" pos:column="71">{
				<expr_stmt><expr><name pos:line="2087" pos:column="33">state</name> <op:operator pos:line="2087" pos:column="39">=</op:operator> <name pos:line="2087" pos:column="41">SCE_HJ_DOUBLESTRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2088" pos:column="27">else <if pos:line="2088" pos:column="32">if <condition pos:line="2088" pos:column="35">(<expr><op:operator pos:line="2088" pos:column="36">(</op:operator><name pos:line="2088" pos:column="37">ch</name> <op:operator pos:line="2088" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="2088" pos:column="43">'\''</lit:literal><op:operator pos:line="2088" pos:column="47">)</op:operator> <op:operator pos:line="2088" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="2088" pos:column="52">(</op:operator><name pos:line="2088" pos:column="53">nonEmptySegment</name><op:operator pos:line="2088" pos:column="68">)</op:operator></expr>)</condition><then pos:line="2088" pos:column="70"> <block pos:line="2088" pos:column="71">{
				<expr_stmt><expr><name pos:line="2089" pos:column="33">state</name> <op:operator pos:line="2089" pos:column="39">=</op:operator> <name pos:line="2089" pos:column="41">SCE_HJ_SINGLESTRING</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2090" pos:column="27">else <if pos:line="2090" pos:column="32">if <condition pos:line="2090" pos:column="35">(<expr><call><name pos:line="2090" pos:column="36">IsAWordStart</name><argument_list pos:line="2090" pos:column="48">(<argument><expr><name pos:line="2090" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2090" pos:column="53"> <block pos:line="2090" pos:column="54">{
				<expr_stmt><expr><name pos:line="2091" pos:column="33">state</name> <op:operator pos:line="2091" pos:column="39">=</op:operator> <name pos:line="2091" pos:column="41">SCE_HJ_WORD</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="2092" pos:column="27">else <if pos:line="2092" pos:column="32">if <condition pos:line="2092" pos:column="35">(<expr><call><name pos:line="2092" pos:column="36">IsOperator</name><argument_list pos:line="2092" pos:column="46">(<argument><expr><name pos:line="2092" pos:column="47">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2092" pos:column="51"> <block pos:line="2092" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="2093" pos:column="33">styler</name><op:operator pos:line="2093" pos:column="39">.</op:operator><name pos:line="2093" pos:column="40">ColourTo</name></name><argument_list pos:line="2093" pos:column="48">(<argument><expr><name pos:line="2093" pos:column="49">i</name></expr></argument>, <argument><expr><call><name pos:line="2093" pos:column="52">statePrintForState</name><argument_list pos:line="2093" pos:column="70">(<argument><expr><name pos:line="2093" pos:column="71">SCE_HJ_SYMBOLS</name></expr></argument>, <argument><expr><name pos:line="2093" pos:column="87">inScriptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if></else></if></else></if>
	}</block></for>

	<switch pos:line="2098" pos:column="9">switch <condition pos:line="2098" pos:column="16">(<expr><name pos:line="2098" pos:column="17">state</name></expr>)</condition> <block pos:line="2098" pos:column="24">{
	<case pos:line="2099" pos:column="9">case <expr><name pos:line="2099" pos:column="14">SCE_HJ_WORD</name></expr>:
		<expr_stmt><expr><call><name pos:line="2100" pos:column="17">classifyWordHTJS</name><argument_list pos:line="2100" pos:column="33">(<argument><expr><call><name><name pos:line="2100" pos:column="34">styler</name><op:operator pos:line="2100" pos:column="40">.</op:operator><name pos:line="2100" pos:column="41">GetStartSegment</name></name><argument_list pos:line="2100" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2100" pos:column="60">lengthDoc</name> <op:operator pos:line="2100" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="2100" pos:column="72">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2100" pos:column="75">keywords2</name></expr></argument>, <argument><expr><name pos:line="2100" pos:column="86">styler</name></expr></argument>, <argument><expr><name pos:line="2100" pos:column="94">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2101" pos:column="17">break;</break>
	</case><case pos:line="2102" pos:column="9">case <expr><name pos:line="2102" pos:column="14">SCE_HB_WORD</name></expr>:
		<expr_stmt><expr><call><name pos:line="2103" pos:column="17">classifyWordHTVB</name><argument_list pos:line="2103" pos:column="33">(<argument><expr><call><name><name pos:line="2103" pos:column="34">styler</name><op:operator pos:line="2103" pos:column="40">.</op:operator><name pos:line="2103" pos:column="41">GetStartSegment</name></name><argument_list pos:line="2103" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2103" pos:column="60">lengthDoc</name> <op:operator pos:line="2103" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="2103" pos:column="72">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2103" pos:column="75">keywords3</name></expr></argument>, <argument><expr><name pos:line="2103" pos:column="86">styler</name></expr></argument>, <argument><expr><name pos:line="2103" pos:column="94">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2104" pos:column="17">break;</break>
	</case><case pos:line="2105" pos:column="9">case <expr><name pos:line="2105" pos:column="14">SCE_HP_WORD</name></expr>:
		<expr_stmt><expr><call><name pos:line="2106" pos:column="17">classifyWordHTPy</name><argument_list pos:line="2106" pos:column="33">(<argument><expr><call><name><name pos:line="2106" pos:column="34">styler</name><op:operator pos:line="2106" pos:column="40">.</op:operator><name pos:line="2106" pos:column="41">GetStartSegment</name></name><argument_list pos:line="2106" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2106" pos:column="60">lengthDoc</name> <op:operator pos:line="2106" pos:column="70">-</op:operator> <lit:literal type="number" pos:line="2106" pos:column="72">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2106" pos:column="75">keywords4</name></expr></argument>, <argument><expr><name pos:line="2106" pos:column="86">styler</name></expr></argument>, <argument><expr><name pos:line="2106" pos:column="94">prevWord</name></expr></argument>, <argument><expr><name pos:line="2106" pos:column="104">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2107" pos:column="17">break;</break>
	</case><case pos:line="2108" pos:column="9">case <expr><name pos:line="2108" pos:column="14">SCE_HPHP_WORD</name></expr>:
		<expr_stmt><expr><call><name pos:line="2109" pos:column="17">classifyWordHTPHP</name><argument_list pos:line="2109" pos:column="34">(<argument><expr><call><name><name pos:line="2109" pos:column="35">styler</name><op:operator pos:line="2109" pos:column="41">.</op:operator><name pos:line="2109" pos:column="42">GetStartSegment</name></name><argument_list pos:line="2109" pos:column="57">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="2109" pos:column="61">lengthDoc</name> <op:operator pos:line="2109" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="2109" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2109" pos:column="76">keywords5</name></expr></argument>, <argument><expr><name pos:line="2109" pos:column="87">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2110" pos:column="17">break;</break>
	</case><default pos:line="2111" pos:column="9">default:
		<expr_stmt><expr><name pos:line="2112" pos:column="17">StateToPrint</name> <op:operator pos:line="2112" pos:column="30">=</op:operator> <call><name pos:line="2112" pos:column="32">statePrintForState</name><argument_list pos:line="2112" pos:column="50">(<argument><expr><name pos:line="2112" pos:column="51">state</name></expr></argument>, <argument><expr><name pos:line="2112" pos:column="58">inScriptType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="2113" pos:column="17">styler</name><op:operator pos:line="2113" pos:column="23">.</op:operator><name pos:line="2113" pos:column="24">ColourTo</name></name><argument_list pos:line="2113" pos:column="32">(<argument><expr><name pos:line="2113" pos:column="33">lengthDoc</name> <op:operator pos:line="2113" pos:column="43">-</op:operator> <lit:literal type="number" pos:line="2113" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2113" pos:column="48">StateToPrint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break pos:line="2114" pos:column="17">break;</break>
	</default>}</block></switch>

	<comment type="line" pos:line="2117" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<if pos:line="2118" pos:column="9">if <condition pos:line="2118" pos:column="12">(<expr><name pos:line="2118" pos:column="13">fold</name></expr>)</condition><then pos:line="2118" pos:column="18"> <block pos:line="2118" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="2119" pos:column="17">int</name></type> <name pos:line="2119" pos:column="21">flagsNext</name> <init pos:line="2119" pos:column="31">= <expr><call><name><name pos:line="2119" pos:column="33">styler</name><op:operator pos:line="2119" pos:column="39">.</op:operator><name pos:line="2119" pos:column="40">LevelAt</name></name><argument_list pos:line="2119" pos:column="47">(<argument><expr><name pos:line="2119" pos:column="48">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="2119" pos:column="61">&amp;</op:operator> <op:operator pos:line="2119" pos:column="63">~</op:operator><name pos:line="2119" pos:column="64">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="2120" pos:column="17">styler</name><op:operator pos:line="2120" pos:column="23">.</op:operator><name pos:line="2120" pos:column="24">SetLevel</name></name><argument_list pos:line="2120" pos:column="32">(<argument><expr><name pos:line="2120" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="2120" pos:column="46">levelPrev</name> <op:operator pos:line="2120" pos:column="56">|</op:operator> <name pos:line="2120" pos:column="58">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="2124" pos:column="1">static</specifier> <name pos:line="2124" pos:column="8">void</name></type> <name pos:line="2124" pos:column="13">ColouriseXMLDoc</name><parameter_list pos:line="2124" pos:column="28">(<param><decl><type><name pos:line="2124" pos:column="29">unsigned</name> <name pos:line="2124" pos:column="38">int</name></type> <name pos:line="2124" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="2124" pos:column="52">int</name></type> <name pos:line="2124" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="2124" pos:column="64">int</name></type> <name pos:line="2124" pos:column="68">initStyle</name></decl></param>, <param><decl><type><name pos:line="2124" pos:column="79">WordList</name> <type:modifier pos:line="2124" pos:column="88">*</type:modifier></type><name><name pos:line="2124" pos:column="89">keywordlists</name><index pos:line="2124" pos:column="101">[]</index></name></decl></param>,
                                  <param><decl><type><name pos:line="2125" pos:column="35">Accessor</name> <type:modifier pos:line="2125" pos:column="44">&amp;</type:modifier></type><name pos:line="2125" pos:column="45">styler</name></decl></param>)</parameter_list> <block pos:line="2125" pos:column="53">{
	<comment type="line" pos:line="2126" pos:column="9">// Passing in true because we're lexing XML</comment>
	<expr_stmt><expr><call><name pos:line="2127" pos:column="9">ColouriseHyperTextDoc</name><argument_list pos:line="2127" pos:column="30">(<argument><expr><name pos:line="2127" pos:column="31">startPos</name></expr></argument>, <argument><expr><name pos:line="2127" pos:column="41">length</name></expr></argument>, <argument><expr><name pos:line="2127" pos:column="49">initStyle</name></expr></argument>, <argument><expr><name pos:line="2127" pos:column="60">keywordlists</name></expr></argument>, <argument><expr><name pos:line="2127" pos:column="74">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2127" pos:column="82">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="2130" pos:column="1">static</specifier> <name pos:line="2130" pos:column="8">void</name></type> <name pos:line="2130" pos:column="13">ColouriseHTMLDoc</name><parameter_list pos:line="2130" pos:column="29">(<param><decl><type><name pos:line="2130" pos:column="30">unsigned</name> <name pos:line="2130" pos:column="39">int</name></type> <name pos:line="2130" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="2130" pos:column="53">int</name></type> <name pos:line="2130" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="2130" pos:column="65">int</name></type> <name pos:line="2130" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="2130" pos:column="80">WordList</name> <type:modifier pos:line="2130" pos:column="89">*</type:modifier></type><name><name pos:line="2130" pos:column="90">keywordlists</name><index pos:line="2130" pos:column="102">[]</index></name></decl></param>,
                                  <param><decl><type><name pos:line="2131" pos:column="35">Accessor</name> <type:modifier pos:line="2131" pos:column="44">&amp;</type:modifier></type><name pos:line="2131" pos:column="45">styler</name></decl></param>)</parameter_list> <block pos:line="2131" pos:column="53">{
	<comment type="line" pos:line="2132" pos:column="9">// Passing in false because we're notlexing XML</comment>
	<expr_stmt><expr><call><name pos:line="2133" pos:column="9">ColouriseHyperTextDoc</name><argument_list pos:line="2133" pos:column="30">(<argument><expr><name pos:line="2133" pos:column="31">startPos</name></expr></argument>, <argument><expr><name pos:line="2133" pos:column="41">length</name></expr></argument>, <argument><expr><name pos:line="2133" pos:column="49">initStyle</name></expr></argument>, <argument><expr><name pos:line="2133" pos:column="60">keywordlists</name></expr></argument>, <argument><expr><name pos:line="2133" pos:column="74">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2133" pos:column="82">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="2136" pos:column="1">static</specifier> <name pos:line="2136" pos:column="8">void</name></type> <name pos:line="2136" pos:column="13">ColourisePHPScriptDoc</name><parameter_list pos:line="2136" pos:column="34">(<param><decl><type><name pos:line="2136" pos:column="35">unsigned</name> <name pos:line="2136" pos:column="44">int</name></type> <name pos:line="2136" pos:column="48">startPos</name></decl></param>, <param><decl><type><name pos:line="2136" pos:column="58">int</name></type> <name pos:line="2136" pos:column="62">length</name></decl></param>, <param><decl><type><name pos:line="2136" pos:column="70">int</name></type> <name pos:line="2136" pos:column="74">initStyle</name></decl></param>, <param><decl><type><name pos:line="2136" pos:column="85">WordList</name> <type:modifier pos:line="2136" pos:column="94">*</type:modifier></type><name><name pos:line="2136" pos:column="95">keywordlists</name><index pos:line="2136" pos:column="107">[]</index></name></decl></param>,
        <param><decl><type><name pos:line="2137" pos:column="9">Accessor</name> <type:modifier pos:line="2137" pos:column="18">&amp;</type:modifier></type><name pos:line="2137" pos:column="19">styler</name></decl></param>)</parameter_list> <block pos:line="2137" pos:column="27">{
	<if pos:line="2138" pos:column="9">if <condition pos:line="2138" pos:column="12">(<expr><name pos:line="2138" pos:column="13">startPos</name> <op:operator pos:line="2138" pos:column="22">==</op:operator> <lit:literal type="number" pos:line="2138" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="2138" pos:column="27">
		<expr_stmt><expr><name pos:line="2139" pos:column="17">initStyle</name> <op:operator pos:line="2139" pos:column="27">=</op:operator> <name pos:line="2139" pos:column="29">SCE_HPHP_DEFAULT</name></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><call><name pos:line="2140" pos:column="9">ColouriseHTMLDoc</name><argument_list pos:line="2140" pos:column="25">(<argument><expr><name pos:line="2140" pos:column="26">startPos</name></expr></argument>, <argument><expr><name pos:line="2140" pos:column="36">length</name></expr></argument>, <argument><expr><name pos:line="2140" pos:column="44">initStyle</name></expr></argument>, <argument><expr><name pos:line="2140" pos:column="55">keywordlists</name></expr></argument>, <argument><expr><name pos:line="2140" pos:column="69">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="2143" pos:column="1">static</specifier> <specifier pos:line="2143" pos:column="8">const</specifier> <name pos:line="2143" pos:column="14">char</name> <type:modifier pos:line="2143" pos:column="19">*</type:modifier> <specifier pos:line="2143" pos:column="21">const</specifier></type> <name><name pos:line="2143" pos:column="27">htmlWordListDesc</name><index pos:line="2143" pos:column="43">[]</index></name> <init pos:line="2143" pos:column="46">= <expr><block pos:line="2143" pos:column="48">{
	<expr><lit:literal type="string" pos:line="2144" pos:column="9">"HTML elements and attributes"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="2145" pos:column="9">"JavaScript keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="2146" pos:column="9">"VBScript keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="2147" pos:column="9">"Python keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="2148" pos:column="9">"PHP keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="2149" pos:column="9">"SGML and DTD keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="2150" pos:column="9">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="2153" pos:column="1">static</specifier> <specifier pos:line="2153" pos:column="8">const</specifier> <name pos:line="2153" pos:column="14">char</name> <type:modifier pos:line="2153" pos:column="19">*</type:modifier> <specifier pos:line="2153" pos:column="21">const</specifier></type> <name><name pos:line="2153" pos:column="27">phpscriptWordListDesc</name><index pos:line="2153" pos:column="48">[]</index></name> <init pos:line="2153" pos:column="51">= <expr><block pos:line="2153" pos:column="53">{
	<expr><lit:literal type="string" pos:line="2154" pos:column="9">""</lit:literal></expr>, <comment type="line" pos:line="2154" pos:column="13">//Unused</comment>
	<expr><lit:literal type="string" pos:line="2155" pos:column="9">""</lit:literal></expr>, <comment type="line" pos:line="2155" pos:column="13">//Unused</comment>
	<expr><lit:literal type="string" pos:line="2156" pos:column="9">""</lit:literal></expr>, <comment type="line" pos:line="2156" pos:column="13">//Unused</comment>
	<expr><lit:literal type="string" pos:line="2157" pos:column="9">""</lit:literal></expr>, <comment type="line" pos:line="2157" pos:column="13">//Unused</comment>
	<expr><lit:literal type="string" pos:line="2158" pos:column="9">"PHP keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="2159" pos:column="9">""</lit:literal></expr>, <comment type="line" pos:line="2159" pos:column="13">//Unused</comment>
	<expr><lit:literal type="number" pos:line="2160" pos:column="9">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="2163" pos:column="1">LexerModule</name></type> <name pos:line="2163" pos:column="13">lmHTML</name><argument_list pos:line="2163" pos:column="19">(<argument><expr><name pos:line="2163" pos:column="20">SCLEX_HTML</name></expr></argument>, <argument><expr><name pos:line="2163" pos:column="32">ColouriseHTMLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2163" pos:column="50">"hypertext"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2163" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2163" pos:column="66">htmlWordListDesc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2163" pos:column="84">8</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="2164" pos:column="1">LexerModule</name></type> <name pos:line="2164" pos:column="13">lmXML</name><argument_list pos:line="2164" pos:column="18">(<argument><expr><name pos:line="2164" pos:column="19">SCLEX_XML</name></expr></argument>, <argument><expr><name pos:line="2164" pos:column="30">ColouriseXMLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2164" pos:column="47">"xml"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2164" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2164" pos:column="57">htmlWordListDesc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2164" pos:column="75">8</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="2165" pos:column="1">LexerModule</name></type> <name pos:line="2165" pos:column="13">lmPHPSCRIPT</name><argument_list pos:line="2165" pos:column="24">(<argument><expr><name pos:line="2165" pos:column="25">SCLEX_PHPSCRIPT</name></expr></argument>, <argument><expr><name pos:line="2165" pos:column="42">ColourisePHPScriptDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="2165" pos:column="65">"phpscript"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2165" pos:column="78">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2165" pos:column="81">phpscriptWordListDesc</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2165" pos:column="104">8</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
