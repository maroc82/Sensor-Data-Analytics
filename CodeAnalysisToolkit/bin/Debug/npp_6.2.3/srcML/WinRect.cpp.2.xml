<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\WindowsDlg\WinRect.cpp" pos:tabs="8"><comment type="line" format="doxygen" pos:line="1" pos:column="1">////////////////////////////////////////////////////////////////</comment>
<comment type="line" pos:line="2" pos:column="1">// MSDN Magazine -- July 2001</comment>
<comment type="line" pos:line="3" pos:column="1">// If this code works, it was written by Paul DiLascia.</comment>
<comment type="line" pos:line="4" pos:column="1">// If not, I don't know who wrote it.</comment>
<comment type="line" pos:line="5" pos:column="1">// Compiles with Visual C++ 6.0. Runs on Win 98 and probably Win 2000 too.</comment>
<comment type="line" pos:line="6" pos:column="1">// Set tabsize = 3 in your editor.</comment>
<comment type="line" pos:line="7" pos:column="1">//</comment>


<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="10" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="11" pos:column="10">"WinMgr.h"</lit:literal></cpp:file></cpp:include>

<comment type="line" format="doxygen" pos:line="13" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="14" pos:column="1">// Construct from args</comment>
<comment type="line" pos:line="15" pos:column="1">//</comment>
<constructor><name><name pos:line="16" pos:column="1">WINRECT</name><op:operator pos:line="16" pos:column="8">::</op:operator><name pos:line="16" pos:column="10">WINRECT</name></name><parameter_list pos:line="16" pos:column="17">(<param><decl><type><name pos:line="16" pos:column="18">WORD</name></type> <name pos:line="16" pos:column="23">f</name></decl></param>, <param><decl><type><name pos:line="16" pos:column="26">int</name></type> <name pos:line="16" pos:column="30">id</name></decl></param>, <param><decl><type><name pos:line="16" pos:column="34">LONG</name></type> <name pos:line="16" pos:column="39">p</name></decl></param>)</parameter_list>
<block pos:line="17" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">memset</name><argument_list pos:line="18" pos:column="15">(<argument><expr><name pos:line="18" pos:column="16">this</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="18" pos:column="22">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="25">sizeof<argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">WINRECT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">flags</name> <op:operator pos:line="19" pos:column="15">=</op:operator> <name pos:line="19" pos:column="17">f</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">nID</name> <op:operator pos:line="20" pos:column="13">=</op:operator> <op:operator pos:line="20" pos:column="15">(</op:operator><name pos:line="20" pos:column="16">UINT</name><op:operator pos:line="20" pos:column="20">)</op:operator><name pos:line="20" pos:column="21">id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="21" pos:column="9">param</name> <op:operator pos:line="21" pos:column="15">=</op:operator> <name pos:line="21" pos:column="17">p</name></expr>;</expr_stmt>
}</block></constructor>

<comment type="line" format="doxygen" pos:line="24" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="25" pos:column="1">// Get the parent of a given WINRECT. To find the parent, chase the prev</comment>
<comment type="line" pos:line="26" pos:column="1">// pointer to the start of the list, then take the item before that in</comment>
<comment type="line" pos:line="27" pos:column="1">// memory. </comment>
<comment type="line" pos:line="28" pos:column="1">//</comment>
<function><type><name pos:line="29" pos:column="1">WINRECT</name><type:modifier pos:line="29" pos:column="8">*</type:modifier></type> <name><name pos:line="29" pos:column="10">WINRECT</name><op:operator pos:line="29" pos:column="17">::</op:operator><name pos:line="29" pos:column="19">Parent</name></name><parameter_list pos:line="29" pos:column="25">()</parameter_list>
<block pos:line="30" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">WINRECT</name><type:modifier pos:line="31" pos:column="16">*</type:modifier></type> <name pos:line="31" pos:column="18">pEntry</name> <init pos:line="31" pos:column="25">= <expr><name pos:line="31" pos:column="27">NULL</name></expr></init></decl>;</decl_stmt>
	<for pos:line="32" pos:column="9">for (<init><expr><name pos:line="32" pos:column="14">pEntry</name><op:operator pos:line="32" pos:column="20">=</op:operator><name pos:line="32" pos:column="21">this</name></expr>;</init> <condition><expr><call><name><name pos:line="32" pos:column="27">pEntry</name><op:operator pos:line="32" pos:column="33">-&gt;</op:operator><name pos:line="32" pos:column="35">Prev</name></name><argument_list pos:line="32" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="32" pos:column="43">pEntry</name><op:operator pos:line="32" pos:column="49">=</op:operator><call><name><name pos:line="32" pos:column="50">pEntry</name><op:operator pos:line="32" pos:column="56">-&gt;</op:operator><name pos:line="32" pos:column="58">Prev</name></name><argument_list pos:line="32" pos:column="62">()</argument_list></call></expr></incr>) <block pos:line="32" pos:column="66">{
		<empty_stmt pos:line="33" pos:column="17">;</empty_stmt> <comment type="line" pos:line="33" pos:column="19">// go backwards to the end</comment>
	}</block></for>
	<comment type="line" pos:line="35" pos:column="9">// the entry before the first child is the group</comment>
	<decl_stmt><decl><type><name pos:line="36" pos:column="9">WINRECT</name> <type:modifier pos:line="36" pos:column="17">*</type:modifier></type><name pos:line="36" pos:column="18">parent</name> <init pos:line="36" pos:column="25">= <expr><name pos:line="36" pos:column="27">pEntry</name><op:operator pos:line="36" pos:column="33">-</op:operator><lit:literal type="number" pos:line="36" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="37" pos:column="9">assert</name><argument_list pos:line="37" pos:column="15">(<argument><expr><call><name><name pos:line="37" pos:column="16">parent</name><op:operator pos:line="37" pos:column="22">-&gt;</op:operator><name pos:line="37" pos:column="24">IsGroup</name></name><argument_list pos:line="37" pos:column="31">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">parent</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="41" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="42" pos:column="1">// Get group margins</comment>
<comment type="line" pos:line="43" pos:column="1">//</comment>
<function><type><name pos:line="44" pos:column="1">BOOL</name></type> <name><name pos:line="44" pos:column="6">WINRECT</name><op:operator pos:line="44" pos:column="13">::</op:operator><name pos:line="44" pos:column="15">GetMargins</name></name><parameter_list pos:line="44" pos:column="25">(<param><decl><type><name pos:line="44" pos:column="26">int</name><type:modifier pos:line="44" pos:column="29">&amp;</type:modifier></type> <name pos:line="44" pos:column="31">w</name></decl></param>, <param><decl><type><name pos:line="44" pos:column="34">int</name><type:modifier pos:line="44" pos:column="37">&amp;</type:modifier></type> <name pos:line="44" pos:column="39">h</name></decl></param>)</parameter_list>
<block pos:line="45" pos:column="1">{
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">IsGroup</name><argument_list pos:line="46" pos:column="20">()</argument_list></call></expr>)</condition><then pos:line="46" pos:column="23"> <block pos:line="46" pos:column="24">{
		<expr_stmt><expr><name pos:line="47" pos:column="17">w</name><op:operator pos:line="47" pos:column="18">=</op:operator><op:operator pos:line="47" pos:column="19">(</op:operator><name pos:line="47" pos:column="20">short</name><op:operator pos:line="47" pos:column="25">)</op:operator><call><name pos:line="47" pos:column="26">LOWORD</name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="48" pos:column="17">h</name><op:operator pos:line="48" pos:column="18">=</op:operator><op:operator pos:line="48" pos:column="19">(</op:operator><name pos:line="48" pos:column="20">short</name><op:operator pos:line="48" pos:column="25">)</op:operator><call><name pos:line="48" pos:column="26">HIWORD</name><argument_list pos:line="48" pos:column="32">(<argument><expr><name pos:line="48" pos:column="33">param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="49" pos:column="17">return <expr><name pos:line="49" pos:column="24">TRUE</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="51" pos:column="9">w</name><op:operator pos:line="51" pos:column="10">=</op:operator><name pos:line="51" pos:column="11">h</name><op:operator pos:line="51" pos:column="12">=</op:operator><lit:literal type="number" pos:line="51" pos:column="13">0</lit:literal></expr>;</expr_stmt>
	<return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">FALSE</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen" pos:line="55" pos:column="1">//////////////////</comment>
<comment type="line" pos:line="56" pos:column="1">// Initialize map: set up all the next/prev pointers. This converts the</comment>
<comment type="line" pos:line="57" pos:column="1">// linear array to a more convenient linked list. Called from END_WINDOW_MAP.</comment>
<comment type="line" pos:line="58" pos:column="1">//</comment>
<function><type><name pos:line="59" pos:column="1">WINRECT</name><type:modifier pos:line="59" pos:column="8">*</type:modifier></type> <name><name pos:line="59" pos:column="10">WINRECT</name><op:operator pos:line="59" pos:column="17">::</op:operator><name pos:line="59" pos:column="19">InitMap</name></name><parameter_list pos:line="59" pos:column="26">(<param><decl><type><name pos:line="59" pos:column="27">WINRECT</name><type:modifier pos:line="59" pos:column="34">*</type:modifier></type> <name pos:line="59" pos:column="36">pWinMap</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="45">WINRECT</name><type:modifier pos:line="59" pos:column="52">*</type:modifier></type> <name pos:line="59" pos:column="54">parent</name></decl></param>)</parameter_list>
<block pos:line="60" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="61" pos:column="9">assert</name><argument_list pos:line="61" pos:column="15">(<argument><expr><name pos:line="61" pos:column="16">pWinMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="63" pos:column="9">WINRECT</name><type:modifier pos:line="63" pos:column="16">*</type:modifier></type> <name pos:line="63" pos:column="18">pwrc</name> <init pos:line="63" pos:column="23">= <expr><name pos:line="63" pos:column="25">pWinMap</name></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="63" pos:column="35">// current table entry</comment>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">WINRECT</name><type:modifier pos:line="64" pos:column="16">*</type:modifier></type> <name pos:line="64" pos:column="18">prev</name> <init pos:line="64" pos:column="23">= <expr><name pos:line="64" pos:column="25">NULL</name></expr></init></decl>;</decl_stmt>	  <comment type="line" pos:line="64" pos:column="35">// previous entry starts out none</comment>

	<while pos:line="66" pos:column="9">while <condition pos:line="66" pos:column="15">(<expr><op:operator pos:line="66" pos:column="16">!</op:operator><call><name><name pos:line="66" pos:column="17">pwrc</name><op:operator pos:line="66" pos:column="21">-&gt;</op:operator><name pos:line="66" pos:column="23">IsEndGroup</name></name><argument_list pos:line="66" pos:column="33">()</argument_list></call></expr>)</condition> <block pos:line="66" pos:column="37">{
		<expr_stmt><expr><name><name pos:line="67" pos:column="17">pwrc</name><op:operator pos:line="67" pos:column="21">-&gt;</op:operator><name pos:line="67" pos:column="23">prev</name></name><op:operator pos:line="67" pos:column="27">=</op:operator><name pos:line="67" pos:column="28">prev</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="68" pos:column="17">pwrc</name><op:operator pos:line="68" pos:column="21">-&gt;</op:operator><name pos:line="68" pos:column="23">next</name></name><op:operator pos:line="68" pos:column="27">=</op:operator><name pos:line="68" pos:column="28">NULL</name></expr>;</expr_stmt>
		<if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">prev</name></expr>)</condition><then pos:line="69" pos:column="26">
			<expr_stmt><expr><name><name pos:line="70" pos:column="25">prev</name><op:operator pos:line="70" pos:column="29">-&gt;</op:operator><name pos:line="70" pos:column="31">next</name></name> <op:operator pos:line="70" pos:column="36">=</op:operator> <name pos:line="70" pos:column="38">pwrc</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="71" pos:column="17">prev</name> <op:operator pos:line="71" pos:column="22">=</op:operator> <name pos:line="71" pos:column="24">pwrc</name></expr>;</expr_stmt>
		<if pos:line="72" pos:column="17">if <condition pos:line="72" pos:column="20">(<expr><call><name><name pos:line="72" pos:column="21">pwrc</name><op:operator pos:line="72" pos:column="25">-&gt;</op:operator><name pos:line="72" pos:column="27">IsGroup</name></name><argument_list pos:line="72" pos:column="34">()</argument_list></call></expr>)</condition><then pos:line="72" pos:column="37"> <block pos:line="72" pos:column="38">{
			<expr_stmt><expr><name pos:line="73" pos:column="25">pwrc</name> <op:operator pos:line="73" pos:column="30">=</op:operator> <call><name pos:line="73" pos:column="32">InitMap</name><argument_list pos:line="73" pos:column="39">(<argument><expr><name pos:line="73" pos:column="40">pwrc</name><op:operator pos:line="73" pos:column="44">+</op:operator><lit:literal type="number" pos:line="73" pos:column="45">1</lit:literal></expr></argument>,<argument><expr><name pos:line="73" pos:column="47">pwrc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="73" pos:column="54">// recurse! Returns end-of-grp</comment>
			<expr_stmt><expr><call><name pos:line="74" pos:column="25">assert</name><argument_list pos:line="74" pos:column="31">(<argument><expr><call><name><name pos:line="74" pos:column="32">pwrc</name><op:operator pos:line="74" pos:column="36">-&gt;</op:operator><name pos:line="74" pos:column="38">IsEndGroup</name></name><argument_list pos:line="74" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="76" pos:column="17">pwrc</name><op:operator pos:line="76" pos:column="21">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<comment type="line" pos:line="78" pos:column="9">// safety checks</comment>
	<expr_stmt><expr><call><name pos:line="79" pos:column="9">assert</name><argument_list pos:line="79" pos:column="15">(<argument><expr><call><name><name pos:line="79" pos:column="16">pwrc</name><op:operator pos:line="79" pos:column="20">-&gt;</op:operator><name pos:line="79" pos:column="22">IsEndGroup</name></name><argument_list pos:line="79" pos:column="32">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">assert</name><argument_list pos:line="80" pos:column="15">(<argument><expr><name pos:line="80" pos:column="16">prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="81" pos:column="9">assert</name><argument_list pos:line="81" pos:column="15">(<argument><expr><name><name pos:line="81" pos:column="16">prev</name><op:operator pos:line="81" pos:column="20">-&gt;</op:operator><name pos:line="81" pos:column="22">next</name></name><op:operator pos:line="81" pos:column="26">==</op:operator><name pos:line="81" pos:column="28">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="82" pos:column="9">return <expr><name pos:line="82" pos:column="16">parent</name> <op:operator pos:line="82" pos:column="23">?</op:operator> <name pos:line="82" pos:column="25">pwrc</name> <op:operator pos:line="82" pos:column="30">:</op:operator> <name pos:line="82" pos:column="32">NULL</name></expr>;</return>
}</block></function>

</unit>
