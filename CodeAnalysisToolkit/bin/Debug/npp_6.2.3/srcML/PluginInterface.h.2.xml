<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\PluginsManager\PluginInterface.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">PLUGININTERFACE_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">PLUGININTERFACE_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">SCINTILLA_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//SCINTILLA_H</comment>

<cpp:ifndef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifndef</cpp:directive> <name pos:line="36" pos:column="9">NOTEPAD_PLUS_MSGS_H</name></cpp:ifndef>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"Notepad_plus_msgs.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="38" pos:column="8">//NOTEPAD_PLUS_MSGS_H</comment>

<decl_stmt><decl><type><specifier pos:line="40" pos:column="1">const</specifier> <name pos:line="40" pos:column="7">int</name></type> <name pos:line="40" pos:column="11">nbChar</name> <init pos:line="40" pos:column="18">= <expr><lit:literal type="number" pos:line="40" pos:column="20">64</lit:literal></expr></init></decl>;</decl_stmt>

<typedef pos:line="42" pos:column="1">typedef <function_decl><type><specifier pos:line="42" pos:column="9">const</specifier> <name pos:line="42" pos:column="15">TCHAR</name> <type:modifier pos:line="42" pos:column="21">*</type:modifier></type> (<name pos:line="42" pos:column="24">__cdecl</name> <type:modifier pos:line="42" pos:column="32">*</type:modifier> <name pos:line="42" pos:column="34">PFUNCGETNAME</name>)<parameter_list pos:line="42" pos:column="47">()</parameter_list>;</function_decl></typedef>

<struct pos:line="44" pos:column="1">struct <name pos:line="44" pos:column="8">NppData</name> <block pos:line="44" pos:column="16">{<public type="default" pos:line="44" pos:column="17">
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">HWND</name></type> <name pos:line="45" pos:column="14">_nppHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">HWND</name></type> <name pos:line="46" pos:column="14">_scintillaMainHandle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">HWND</name></type> <name pos:line="47" pos:column="14">_scintillaSecondHandle</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<typedef pos:line="50" pos:column="1">typedef <function_decl><type><name pos:line="50" pos:column="9">void</name></type> (<name pos:line="50" pos:column="15">__cdecl</name> <type:modifier pos:line="50" pos:column="23">*</type:modifier> <name pos:line="50" pos:column="25">PFUNCSETINFO</name>)<parameter_list pos:line="50" pos:column="38">(<param><decl><type><name pos:line="50" pos:column="39">NppData</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef pos:line="51" pos:column="1">typedef <function_decl><type><name pos:line="51" pos:column="9">void</name></type> (<name pos:line="51" pos:column="15">__cdecl</name> <type:modifier pos:line="51" pos:column="23">*</type:modifier> <name pos:line="51" pos:column="25">PFUNCPLUGINCMD</name>)<parameter_list pos:line="51" pos:column="40">()</parameter_list>;</function_decl></typedef>
<typedef pos:line="52" pos:column="1">typedef <function_decl><type><name pos:line="52" pos:column="9">void</name></type> (<name pos:line="52" pos:column="15">__cdecl</name> <type:modifier pos:line="52" pos:column="23">*</type:modifier> <name pos:line="52" pos:column="25">PBENOTIFIED</name>)<parameter_list pos:line="52" pos:column="37">(<param><decl><type><name pos:line="52" pos:column="38">SCNotification</name> <type:modifier pos:line="52" pos:column="53">*</type:modifier></type></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef pos:line="53" pos:column="1">typedef <function_decl><type><name pos:line="53" pos:column="9">LRESULT</name></type> (<name pos:line="53" pos:column="18">__cdecl</name> <type:modifier pos:line="53" pos:column="26">*</type:modifier> <name pos:line="53" pos:column="28">PMESSAGEPROC</name>)<parameter_list pos:line="53" pos:column="41">(<param><decl><type><name pos:line="53" pos:column="42">UINT</name></type> <name pos:line="53" pos:column="47">Message</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="56">WPARAM</name></type> <name pos:line="53" pos:column="63">wParam</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="71">LPARAM</name></type> <name pos:line="53" pos:column="78">lParam</name></decl></param>)</parameter_list>;</function_decl></typedef>


<struct pos:line="56" pos:column="1">struct <name pos:line="56" pos:column="8">ShortcutKey</name> <block pos:line="56" pos:column="20">{<public type="default" pos:line="56" pos:column="21">
	<decl_stmt><decl><type><name pos:line="57" pos:column="9">bool</name></type> <name pos:line="57" pos:column="14">_isCtrl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">bool</name></type> <name pos:line="58" pos:column="14">_isAlt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">bool</name></type> <name pos:line="59" pos:column="14">_isShift</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">UCHAR</name></type> <name pos:line="60" pos:column="15">_key</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct pos:line="63" pos:column="1">struct <name pos:line="63" pos:column="8">FuncItem</name> <block pos:line="63" pos:column="17">{<public type="default" pos:line="63" pos:column="18">
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">TCHAR</name></type> <name><name pos:line="64" pos:column="15">_itemName</name><index pos:line="64" pos:column="24">[<expr><name pos:line="64" pos:column="25">nbChar</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="65" pos:column="9">PFUNCPLUGINCMD</name></type> <name pos:line="65" pos:column="24">_pFunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">int</name></type> <name pos:line="66" pos:column="13">_cmdID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">bool</name></type> <name pos:line="67" pos:column="14">_init2Check</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">ShortcutKey</name> <type:modifier pos:line="68" pos:column="21">*</type:modifier></type><name pos:line="68" pos:column="22">_pShKey</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<typedef pos:line="71" pos:column="1">typedef <function_decl><type><name pos:line="71" pos:column="9">FuncItem</name> <type:modifier pos:line="71" pos:column="18">*</type:modifier></type> (<name pos:line="71" pos:column="21">__cdecl</name> <type:modifier pos:line="71" pos:column="29">*</type:modifier> <name pos:line="71" pos:column="31">PFUNCGETFUNCSARRAY</name>)<parameter_list pos:line="71" pos:column="50">(<param><decl><type><name pos:line="71" pos:column="51">int</name> <type:modifier pos:line="71" pos:column="55">*</type:modifier></type></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="line" pos:line="73" pos:column="1">// You should implement (or define an empty function body) those functions which are called by Notepad++ plugin manager</comment>
<extern pos:line="74" pos:column="1">extern <lit:literal type="string" pos:line="74" pos:column="8">"C"</lit:literal> <macro><name pos:line="74" pos:column="12">__declspec</name><argument_list pos:line="74" pos:column="22">(<argument pos:line="74" pos:column="23">dllexport</argument>)</argument_list></macro> <function_decl><type><name pos:line="74" pos:column="34">void</name></type> <name pos:line="74" pos:column="39">setInfo</name><parameter_list pos:line="74" pos:column="46">(<param><decl><type><name pos:line="74" pos:column="47">NppData</name></type></decl></param>)</parameter_list>;</function_decl></extern>
<extern pos:line="75" pos:column="1">extern <lit:literal type="string" pos:line="75" pos:column="8">"C"</lit:literal> <macro><name pos:line="75" pos:column="12">__declspec</name><argument_list pos:line="75" pos:column="22">(<argument pos:line="75" pos:column="23">dllexport</argument>)</argument_list></macro> <function_decl><type><specifier pos:line="75" pos:column="34">const</specifier> <name pos:line="75" pos:column="40">TCHAR</name> <type:modifier pos:line="75" pos:column="46">*</type:modifier></type> <name pos:line="75" pos:column="48">getName</name><parameter_list pos:line="75" pos:column="55">()</parameter_list>;</function_decl></extern>
<extern pos:line="76" pos:column="1">extern <lit:literal type="string" pos:line="76" pos:column="8">"C"</lit:literal> <macro><name pos:line="76" pos:column="12">__declspec</name><argument_list pos:line="76" pos:column="22">(<argument pos:line="76" pos:column="23">dllexport</argument>)</argument_list></macro> <function_decl><type><name pos:line="76" pos:column="34">FuncItem</name> <type:modifier pos:line="76" pos:column="43">*</type:modifier></type> <name pos:line="76" pos:column="45">getFuncsArray</name><parameter_list pos:line="76" pos:column="58">(<param><decl><type><name pos:line="76" pos:column="59">int</name> <type:modifier pos:line="76" pos:column="63">*</type:modifier></type></decl></param>)</parameter_list>;</function_decl></extern>
<extern pos:line="77" pos:column="1">extern <lit:literal type="string" pos:line="77" pos:column="8">"C"</lit:literal> <macro><name pos:line="77" pos:column="12">__declspec</name><argument_list pos:line="77" pos:column="22">(<argument pos:line="77" pos:column="23">dllexport</argument>)</argument_list></macro> <function_decl><type><name pos:line="77" pos:column="34">void</name></type> <name pos:line="77" pos:column="39">beNotified</name><parameter_list pos:line="77" pos:column="49">(<param><decl><type><name pos:line="77" pos:column="50">SCNotification</name> <type:modifier pos:line="77" pos:column="65">*</type:modifier></type></decl></param>)</parameter_list>;</function_decl></extern>
<extern pos:line="78" pos:column="1">extern <lit:literal type="string" pos:line="78" pos:column="8">"C"</lit:literal> <macro><name pos:line="78" pos:column="12">__declspec</name><argument_list pos:line="78" pos:column="22">(<argument pos:line="78" pos:column="23">dllexport</argument>)</argument_list></macro> <function_decl><type><name pos:line="78" pos:column="34">LRESULT</name></type> <name pos:line="78" pos:column="42">messageProc</name><parameter_list pos:line="78" pos:column="53">(<param><decl><type><name pos:line="78" pos:column="54">UINT</name></type> <name pos:line="78" pos:column="59">Message</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="68">WPARAM</name></type> <name pos:line="78" pos:column="75">wParam</name></decl></param>, <param><decl><type><name pos:line="78" pos:column="83">LPARAM</name></type> <name pos:line="78" pos:column="90">lParam</name></decl></param>)</parameter_list>;</function_decl></extern>

<cpp:ifdef pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">ifdef</cpp:directive> <name pos:line="80" pos:column="8">UNICODE</name></cpp:ifdef>
<extern pos:line="81" pos:column="1">extern <lit:literal type="string" pos:line="81" pos:column="8">"C"</lit:literal> <macro><name pos:line="81" pos:column="12">__declspec</name><argument_list pos:line="81" pos:column="22">(<argument pos:line="81" pos:column="23">dllexport</argument>)</argument_list></macro> <function_decl><type><name pos:line="81" pos:column="34">BOOL</name></type> <name pos:line="81" pos:column="39">isUnicode</name><parameter_list pos:line="81" pos:column="48">()</parameter_list>;</function_decl></extern>
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="82" pos:column="8">//UNICODE</comment>

<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="84" pos:column="8">//PLUGININTERFACE_H</comment>
</unit>
