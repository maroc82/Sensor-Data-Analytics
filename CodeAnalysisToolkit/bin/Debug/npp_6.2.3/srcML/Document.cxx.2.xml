<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\Document.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file Document.cxx
 ** Text document that handles notifications, DBCS, styling, words and end of line.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2011 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;string&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"RunStyles.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"CellBuffer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"PerLine.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"CharClassify.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"Decoration.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"Document.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"RESearch.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"UniConversion.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef</cpp:directive> <name pos:line="34" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="35" pos:column="1">using namespace <name pos:line="35" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="38" pos:column="1">// This is ASCII specific but is safe with chars &gt;= 0x80</comment>
<function><type><specifier pos:line="39" pos:column="1">static</specifier> <specifier pos:line="39" pos:column="8">inline</specifier> <name pos:line="39" pos:column="15">bool</name></type> <name pos:line="39" pos:column="20">isspacechar</name><parameter_list pos:line="39" pos:column="31">(<param><decl><type><name pos:line="39" pos:column="32">unsigned</name> <name pos:line="39" pos:column="41">char</name></type> <name pos:line="39" pos:column="46">ch</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="50">{
	<return pos:line="40" pos:column="9">return <expr><op:operator pos:line="40" pos:column="16">(</op:operator><name pos:line="40" pos:column="17">ch</name> <op:operator pos:line="40" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="23">' '</lit:literal><op:operator pos:line="40" pos:column="26">)</op:operator> <op:operator pos:line="40" pos:column="28">||</op:operator> <op:operator pos:line="40" pos:column="31">(</op:operator><op:operator pos:line="40" pos:column="32">(</op:operator><name pos:line="40" pos:column="33">ch</name> <op:operator pos:line="40" pos:column="36">&gt;=</op:operator> <lit:literal type="number" pos:line="40" pos:column="39">0x09</lit:literal><op:operator pos:line="40" pos:column="43">)</op:operator> <op:operator pos:line="40" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="40" pos:column="48">(</op:operator><name pos:line="40" pos:column="49">ch</name> <op:operator pos:line="40" pos:column="52">&lt;=</op:operator> <lit:literal type="number" pos:line="40" pos:column="55">0x0d</lit:literal><op:operator pos:line="40" pos:column="59">)</op:operator><op:operator pos:line="40" pos:column="60">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <specifier pos:line="43" pos:column="8">inline</specifier> <name pos:line="43" pos:column="15">bool</name></type> <name pos:line="43" pos:column="20">IsPunctuation</name><parameter_list pos:line="43" pos:column="33">(<param><decl><type><name pos:line="43" pos:column="34">char</name></type> <name pos:line="43" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="43">{
	<return pos:line="44" pos:column="9">return <expr><call><name pos:line="44" pos:column="16">isascii</name><argument_list pos:line="44" pos:column="23">(<argument><expr><name pos:line="44" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="44" pos:column="31">ispunct</name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <specifier pos:line="47" pos:column="8">inline</specifier> <name pos:line="47" pos:column="15">bool</name></type> <name pos:line="47" pos:column="20">IsADigit</name><parameter_list pos:line="47" pos:column="28">(<param><decl><type><name pos:line="47" pos:column="29">char</name></type> <name pos:line="47" pos:column="34">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="38">{
	<return pos:line="48" pos:column="9">return <expr><call><name pos:line="48" pos:column="16">isascii</name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="48" pos:column="31">isdigit</name><argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="51" pos:column="1">static</specifier> <specifier pos:line="51" pos:column="8">inline</specifier> <name pos:line="51" pos:column="15">bool</name></type> <name pos:line="51" pos:column="20">IsLowerCase</name><parameter_list pos:line="51" pos:column="31">(<param><decl><type><name pos:line="51" pos:column="32">char</name></type> <name pos:line="51" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="51" pos:column="41">{
	<return pos:line="52" pos:column="9">return <expr><call><name pos:line="52" pos:column="16">isascii</name><argument_list pos:line="52" pos:column="23">(<argument><expr><name pos:line="52" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="52" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="52" pos:column="31">islower</name><argument_list pos:line="52" pos:column="38">(<argument><expr><name pos:line="52" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="55" pos:column="1">static</specifier> <specifier pos:line="55" pos:column="8">inline</specifier> <name pos:line="55" pos:column="15">bool</name></type> <name pos:line="55" pos:column="20">IsUpperCase</name><parameter_list pos:line="55" pos:column="31">(<param><decl><type><name pos:line="55" pos:column="32">char</name></type> <name pos:line="55" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="55" pos:column="41">{
	<return pos:line="56" pos:column="9">return <expr><call><name pos:line="56" pos:column="16">isascii</name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="56" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="56" pos:column="31">isupper</name><argument_list pos:line="56" pos:column="38">(<argument><expr><name pos:line="56" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="59" pos:column="1">void</name></type> <name><name pos:line="59" pos:column="6">LexInterface</name><op:operator pos:line="59" pos:column="18">::</op:operator><name pos:line="59" pos:column="20">Colourise</name></name><parameter_list pos:line="59" pos:column="29">(<param><decl><type><name pos:line="59" pos:column="30">int</name></type> <name pos:line="59" pos:column="34">start</name></decl></param>, <param><decl><type><name pos:line="59" pos:column="41">int</name></type> <name pos:line="59" pos:column="45">end</name></decl></param>)</parameter_list> <block pos:line="59" pos:column="50">{
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">ElapsedTime</name></type> <name pos:line="60" pos:column="21">et</name></decl>;</decl_stmt>
	<if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">pdoc</name> <op:operator pos:line="61" pos:column="18">&amp;&amp;</op:operator> <name pos:line="61" pos:column="21">instance</name> <op:operator pos:line="61" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="61" pos:column="33">!</op:operator><name pos:line="61" pos:column="34">performingStyle</name></expr>)</condition><then pos:line="61" pos:column="50"> <block pos:line="61" pos:column="51">{
		<comment type="line" pos:line="62" pos:column="17">// Protect against reentrance, which may occur, for example, when</comment>
		<comment type="line" pos:line="63" pos:column="17">// fold points are discovered while performing styling and the folding</comment>
		<comment type="line" pos:line="64" pos:column="17">// code looks for child lines which may trigger styling.</comment>
		<expr_stmt><expr><name pos:line="65" pos:column="17">performingStyle</name> <op:operator pos:line="65" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="65" pos:column="35">true</lit:literal></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="67" pos:column="17">int</name></type> <name pos:line="67" pos:column="21">lengthDoc</name> <init pos:line="67" pos:column="31">= <expr><call><name><name pos:line="67" pos:column="33">pdoc</name><op:operator pos:line="67" pos:column="37">-&gt;</op:operator><name pos:line="67" pos:column="39">Length</name></name><argument_list pos:line="67" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">end</name> <op:operator pos:line="68" pos:column="25">==</op:operator> <op:operator pos:line="68" pos:column="28">-</op:operator><lit:literal type="number" pos:line="68" pos:column="29">1</lit:literal></expr>)</condition><then pos:line="68" pos:column="31">
			<expr_stmt><expr><name pos:line="69" pos:column="25">end</name> <op:operator pos:line="69" pos:column="29">=</op:operator> <name pos:line="69" pos:column="31">lengthDoc</name></expr>;</expr_stmt></then></if>
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">int</name></type> <name pos:line="70" pos:column="21">len</name> <init pos:line="70" pos:column="25">= <expr><name pos:line="70" pos:column="27">end</name> <op:operator pos:line="70" pos:column="31">-</op:operator> <name pos:line="70" pos:column="33">start</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name pos:line="72" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">len</name> <op:operator pos:line="72" pos:column="37">&gt;=</op:operator> <lit:literal type="number" pos:line="72" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="73" pos:column="17">PLATFORM_ASSERT</name><argument_list pos:line="73" pos:column="32">(<argument><expr><name pos:line="73" pos:column="33">start</name> <op:operator pos:line="73" pos:column="39">+</op:operator> <name pos:line="73" pos:column="41">len</name> <op:operator pos:line="73" pos:column="45">&lt;=</op:operator> <name pos:line="73" pos:column="48">lengthDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="75" pos:column="17">int</name></type> <name pos:line="75" pos:column="21">styleStart</name> <init pos:line="75" pos:column="32">= <expr><lit:literal type="number" pos:line="75" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><name pos:line="76" pos:column="21">start</name> <op:operator pos:line="76" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="76" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="76" pos:column="31">
			<expr_stmt><expr><name pos:line="77" pos:column="25">styleStart</name> <op:operator pos:line="77" pos:column="36">=</op:operator> <call><name><name pos:line="77" pos:column="38">pdoc</name><op:operator pos:line="77" pos:column="42">-&gt;</op:operator><name pos:line="77" pos:column="44">StyleAt</name></name><argument_list pos:line="77" pos:column="51">(<argument><expr><name pos:line="77" pos:column="52">start</name> <op:operator pos:line="77" pos:column="58">-</op:operator> <lit:literal type="number" pos:line="77" pos:column="60">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="77" pos:column="63">&amp;</op:operator> <name><name pos:line="77" pos:column="65">pdoc</name><op:operator pos:line="77" pos:column="69">-&gt;</op:operator><name pos:line="77" pos:column="71">stylingBitsMask</name></name></expr>;</expr_stmt></then></if>

		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">len</name> <op:operator pos:line="79" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="79" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="79" pos:column="29"> <block pos:line="79" pos:column="30">{
			<expr_stmt><expr><call><name><name pos:line="80" pos:column="25">instance</name><op:operator pos:line="80" pos:column="33">-&gt;</op:operator><name pos:line="80" pos:column="35">Lex</name></name><argument_list pos:line="80" pos:column="38">(<argument><expr><name pos:line="80" pos:column="39">start</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="46">len</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="51">styleStart</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="63">pdoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="81" pos:column="25">instance</name><op:operator pos:line="81" pos:column="33">-&gt;</op:operator><name pos:line="81" pos:column="35">Fold</name></name><argument_list pos:line="81" pos:column="39">(<argument><expr><name pos:line="81" pos:column="40">start</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="47">len</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="52">styleStart</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="64">pdoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="84" pos:column="17">performingStyle</name> <op:operator pos:line="84" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="84" pos:column="35">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<constructor><name><name pos:line="88" pos:column="1">Document</name><op:operator pos:line="88" pos:column="9">::</op:operator><name pos:line="88" pos:column="11">Document</name></name><parameter_list pos:line="88" pos:column="19">()</parameter_list> <block pos:line="88" pos:column="22">{
	<expr_stmt><expr><name pos:line="89" pos:column="9">refCount</name> <op:operator pos:line="89" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="89" pos:column="20">0</lit:literal></expr>;</expr_stmt>
<cpp:ifdef pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">ifdef</cpp:directive> <name pos:line="90" pos:column="8">__unix__</name></cpp:ifdef>
	<expr_stmt><expr><name pos:line="91" pos:column="9">eolMode</name> <op:operator pos:line="91" pos:column="17">=</op:operator> <name pos:line="91" pos:column="19">SC_EOL_LF</name></expr>;</expr_stmt>
<cpp:else pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name pos:line="93" pos:column="9">eolMode</name> <op:operator pos:line="93" pos:column="17">=</op:operator> <name pos:line="93" pos:column="19">SC_EOL_CRLF</name></expr>;</expr_stmt>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name pos:line="95" pos:column="9">dbcsCodePage</name> <op:operator pos:line="95" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="95" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="96" pos:column="9">stylingBits</name> <op:operator pos:line="96" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="96" pos:column="23">5</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="97" pos:column="9">stylingBitsMask</name> <op:operator pos:line="97" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="97" pos:column="27">0x1F</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="98" pos:column="9">stylingMask</name> <op:operator pos:line="98" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="98" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="99" pos:column="9">endStyled</name> <op:operator pos:line="99" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="99" pos:column="21">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="100" pos:column="9">styleClock</name> <op:operator pos:line="100" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="100" pos:column="22">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="101" pos:column="9">enteredModification</name> <op:operator pos:line="101" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="101" pos:column="31">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="102" pos:column="9">enteredStyling</name> <op:operator pos:line="102" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="102" pos:column="26">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="103" pos:column="9">enteredReadOnlyCount</name> <op:operator pos:line="103" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="103" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="104" pos:column="9">tabInChars</name> <op:operator pos:line="104" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="104" pos:column="22">8</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="105" pos:column="9">indentInChars</name> <op:operator pos:line="105" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="105" pos:column="25">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="106" pos:column="9">actualIndentInChars</name> <op:operator pos:line="106" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="106" pos:column="31">8</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="107" pos:column="9">useTabs</name> <op:operator pos:line="107" pos:column="17">=</op:operator> <lit:literal type="boolean" pos:line="107" pos:column="19">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="108" pos:column="9">tabIndents</name> <op:operator pos:line="108" pos:column="20">=</op:operator> <lit:literal type="boolean" pos:line="108" pos:column="22">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="109" pos:column="9">backspaceUnindents</name> <op:operator pos:line="109" pos:column="28">=</op:operator> <lit:literal type="boolean" pos:line="109" pos:column="30">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="110" pos:column="9">watchers</name> <op:operator pos:line="110" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="110" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="111" pos:column="9">lenWatchers</name> <op:operator pos:line="111" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="111" pos:column="23">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="113" pos:column="9">matchesValid</name> <op:operator pos:line="113" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="113" pos:column="24">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="114" pos:column="9">regex</name> <op:operator pos:line="114" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="114" pos:column="17">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="116" pos:column="9">perLineData</name><index pos:line="116" pos:column="20">[<expr><name pos:line="116" pos:column="21">ldMarkers</name></expr>]</index></name> <op:operator pos:line="116" pos:column="32">=</op:operator> <op:operator pos:line="116" pos:column="34">new</op:operator> <call><name pos:line="116" pos:column="38">LineMarkers</name><argument_list pos:line="116" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="117" pos:column="9">perLineData</name><index pos:line="117" pos:column="20">[<expr><name pos:line="117" pos:column="21">ldLevels</name></expr>]</index></name> <op:operator pos:line="117" pos:column="31">=</op:operator> <op:operator pos:line="117" pos:column="33">new</op:operator> <call><name pos:line="117" pos:column="37">LineLevels</name><argument_list pos:line="117" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="118" pos:column="9">perLineData</name><index pos:line="118" pos:column="20">[<expr><name pos:line="118" pos:column="21">ldState</name></expr>]</index></name> <op:operator pos:line="118" pos:column="30">=</op:operator> <op:operator pos:line="118" pos:column="32">new</op:operator> <call><name pos:line="118" pos:column="36">LineState</name><argument_list pos:line="118" pos:column="45">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="119" pos:column="9">perLineData</name><index pos:line="119" pos:column="20">[<expr><name pos:line="119" pos:column="21">ldMargin</name></expr>]</index></name> <op:operator pos:line="119" pos:column="31">=</op:operator> <op:operator pos:line="119" pos:column="33">new</op:operator> <call><name pos:line="119" pos:column="37">LineAnnotation</name><argument_list pos:line="119" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="120" pos:column="9">perLineData</name><index pos:line="120" pos:column="20">[<expr><name pos:line="120" pos:column="21">ldAnnotation</name></expr>]</index></name> <op:operator pos:line="120" pos:column="35">=</op:operator> <op:operator pos:line="120" pos:column="37">new</op:operator> <call><name pos:line="120" pos:column="41">LineAnnotation</name><argument_list pos:line="120" pos:column="55">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="122" pos:column="9">cb</name><op:operator pos:line="122" pos:column="11">.</op:operator><name pos:line="122" pos:column="12">SetPerLine</name></name><argument_list pos:line="122" pos:column="22">(<argument><expr><name pos:line="122" pos:column="23">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="124" pos:column="9">pli</name> <op:operator pos:line="124" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="124" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="127" pos:column="1">Document</name><op:operator pos:line="127" pos:column="9">::</op:operator>~<name pos:line="127" pos:column="12">Document</name></name><parameter_list pos:line="127" pos:column="20">()</parameter_list> <block pos:line="127" pos:column="23">{
	<for pos:line="128" pos:column="9">for (<init><decl><type><name pos:line="128" pos:column="14">int</name></type> <name pos:line="128" pos:column="18">i</name> <init pos:line="128" pos:column="20">= <expr><lit:literal type="number" pos:line="128" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="128" pos:column="25">i</name> <op:operator pos:line="128" pos:column="27">&lt;</op:operator> <name pos:line="128" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="128" pos:column="42">i</name><op:operator pos:line="128" pos:column="43">++</op:operator></expr></incr>) <block pos:line="128" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="129" pos:column="17">watchers</name><index pos:line="129" pos:column="25">[<expr><name pos:line="129" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="129" pos:column="28">.</op:operator><call><name><name pos:line="129" pos:column="29">watcher</name><op:operator pos:line="129" pos:column="36">-&gt;</op:operator><name pos:line="129" pos:column="38">NotifyDeleted</name></name><argument_list pos:line="129" pos:column="51">(<argument><expr><name pos:line="129" pos:column="52">this</name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="58">watchers</name><index pos:line="129" pos:column="66">[<expr><name pos:line="129" pos:column="67">i</name></expr>]</index></name><op:operator pos:line="129" pos:column="69">.</op:operator><name pos:line="129" pos:column="70">userData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><op:operator pos:line="131" pos:column="9">delete</op:operator> <index pos:line="131" pos:column="16">[]</index><name pos:line="131" pos:column="18">watchers</name></expr>;</expr_stmt>
	<for pos:line="132" pos:column="9">for (<init><decl><type><name pos:line="132" pos:column="14">int</name></type> <name pos:line="132" pos:column="18">j</name><init pos:line="132" pos:column="19">=<expr><lit:literal type="number" pos:line="132" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="132" pos:column="23">j</name><op:operator pos:line="132" pos:column="24">&lt;</op:operator><name pos:line="132" pos:column="25">ldSize</name></expr>;</condition> <incr><expr><name pos:line="132" pos:column="33">j</name><op:operator pos:line="132" pos:column="34">++</op:operator></expr></incr>) <block pos:line="132" pos:column="38">{
		<expr_stmt><expr><op:operator pos:line="133" pos:column="17">delete</op:operator> <name><name pos:line="133" pos:column="24">perLineData</name><index pos:line="133" pos:column="35">[<expr><name pos:line="133" pos:column="36">j</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="134" pos:column="17">perLineData</name><index pos:line="134" pos:column="28">[<expr><name pos:line="134" pos:column="29">j</name></expr>]</index></name> <op:operator pos:line="134" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="134" pos:column="34">0</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name pos:line="136" pos:column="9">watchers</name> <op:operator pos:line="136" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="136" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="137" pos:column="9">lenWatchers</name> <op:operator pos:line="137" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="137" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="138" pos:column="9">delete</op:operator> <name pos:line="138" pos:column="16">regex</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="139" pos:column="9">regex</name> <op:operator pos:line="139" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="139" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="140" pos:column="9">delete</op:operator> <name pos:line="140" pos:column="16">pli</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="141" pos:column="9">pli</name> <op:operator pos:line="141" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="141" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="144" pos:column="1">void</name></type> <name><name pos:line="144" pos:column="6">Document</name><op:operator pos:line="144" pos:column="14">::</op:operator><name pos:line="144" pos:column="16">Init</name></name><parameter_list pos:line="144" pos:column="20">()</parameter_list> <block pos:line="144" pos:column="23">{
	<for pos:line="145" pos:column="9">for (<init><decl><type><name pos:line="145" pos:column="14">int</name></type> <name pos:line="145" pos:column="18">j</name><init pos:line="145" pos:column="19">=<expr><lit:literal type="number" pos:line="145" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="145" pos:column="23">j</name><op:operator pos:line="145" pos:column="24">&lt;</op:operator><name pos:line="145" pos:column="25">ldSize</name></expr>;</condition> <incr><expr><name pos:line="145" pos:column="33">j</name><op:operator pos:line="145" pos:column="34">++</op:operator></expr></incr>) <block pos:line="145" pos:column="38">{
		<if pos:line="146" pos:column="17">if <condition pos:line="146" pos:column="20">(<expr><name><name pos:line="146" pos:column="21">perLineData</name><index pos:line="146" pos:column="32">[<expr><name pos:line="146" pos:column="33">j</name></expr>]</index></name></expr>)</condition><then pos:line="146" pos:column="36">
			<expr_stmt><expr><name><name pos:line="147" pos:column="25">perLineData</name><index pos:line="147" pos:column="36">[<expr><name pos:line="147" pos:column="37">j</name></expr>]</index></name><op:operator pos:line="147" pos:column="39">-&gt;</op:operator><call><name pos:line="147" pos:column="41">Init</name><argument_list pos:line="147" pos:column="45">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="151" pos:column="1">void</name></type> <name><name pos:line="151" pos:column="6">Document</name><op:operator pos:line="151" pos:column="14">::</op:operator><name pos:line="151" pos:column="16">InsertLine</name></name><parameter_list pos:line="151" pos:column="26">(<param><decl><type><name pos:line="151" pos:column="27">int</name></type> <name pos:line="151" pos:column="31">line</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="37">{
	<for pos:line="152" pos:column="9">for (<init><decl><type><name pos:line="152" pos:column="14">int</name></type> <name pos:line="152" pos:column="18">j</name><init pos:line="152" pos:column="19">=<expr><lit:literal type="number" pos:line="152" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="152" pos:column="23">j</name><op:operator pos:line="152" pos:column="24">&lt;</op:operator><name pos:line="152" pos:column="25">ldSize</name></expr>;</condition> <incr><expr><name pos:line="152" pos:column="33">j</name><op:operator pos:line="152" pos:column="34">++</op:operator></expr></incr>) <block pos:line="152" pos:column="38">{
		<if pos:line="153" pos:column="17">if <condition pos:line="153" pos:column="20">(<expr><name><name pos:line="153" pos:column="21">perLineData</name><index pos:line="153" pos:column="32">[<expr><name pos:line="153" pos:column="33">j</name></expr>]</index></name></expr>)</condition><then pos:line="153" pos:column="36">
			<expr_stmt><expr><name><name pos:line="154" pos:column="25">perLineData</name><index pos:line="154" pos:column="36">[<expr><name pos:line="154" pos:column="37">j</name></expr>]</index></name><op:operator pos:line="154" pos:column="39">-&gt;</op:operator><call><name pos:line="154" pos:column="41">InsertLine</name><argument_list pos:line="154" pos:column="51">(<argument><expr><name pos:line="154" pos:column="52">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="158" pos:column="1">void</name></type> <name><name pos:line="158" pos:column="6">Document</name><op:operator pos:line="158" pos:column="14">::</op:operator><name pos:line="158" pos:column="16">RemoveLine</name></name><parameter_list pos:line="158" pos:column="26">(<param><decl><type><name pos:line="158" pos:column="27">int</name></type> <name pos:line="158" pos:column="31">line</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="37">{
	<for pos:line="159" pos:column="9">for (<init><decl><type><name pos:line="159" pos:column="14">int</name></type> <name pos:line="159" pos:column="18">j</name><init pos:line="159" pos:column="19">=<expr><lit:literal type="number" pos:line="159" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="159" pos:column="23">j</name><op:operator pos:line="159" pos:column="24">&lt;</op:operator><name pos:line="159" pos:column="25">ldSize</name></expr>;</condition> <incr><expr><name pos:line="159" pos:column="33">j</name><op:operator pos:line="159" pos:column="34">++</op:operator></expr></incr>) <block pos:line="159" pos:column="38">{
		<if pos:line="160" pos:column="17">if <condition pos:line="160" pos:column="20">(<expr><name><name pos:line="160" pos:column="21">perLineData</name><index pos:line="160" pos:column="32">[<expr><name pos:line="160" pos:column="33">j</name></expr>]</index></name></expr>)</condition><then pos:line="160" pos:column="36">
			<expr_stmt><expr><name><name pos:line="161" pos:column="25">perLineData</name><index pos:line="161" pos:column="36">[<expr><name pos:line="161" pos:column="37">j</name></expr>]</index></name><op:operator pos:line="161" pos:column="39">-&gt;</op:operator><call><name pos:line="161" pos:column="41">RemoveLine</name><argument_list pos:line="161" pos:column="51">(<argument><expr><name pos:line="161" pos:column="52">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<comment type="line" pos:line="165" pos:column="1">// Increase reference count and return its previous value.</comment>
<function><type><name pos:line="166" pos:column="1">int</name></type> <name><name pos:line="166" pos:column="5">Document</name><op:operator pos:line="166" pos:column="13">::</op:operator><name pos:line="166" pos:column="15">AddRef</name></name><parameter_list pos:line="166" pos:column="21">()</parameter_list> <block pos:line="166" pos:column="24">{
	<return pos:line="167" pos:column="9">return <expr><name pos:line="167" pos:column="16">refCount</name><op:operator pos:line="167" pos:column="24">++</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="170" pos:column="1">// Decrease reference count and return its previous value.</comment>
<comment type="line" pos:line="171" pos:column="1">// Delete the document if reference count reaches zero.</comment>
<function><type><name pos:line="172" pos:column="1">int</name></type> <name><name pos:line="172" pos:column="5">Document</name><op:operator pos:line="172" pos:column="13">::</op:operator><name pos:line="172" pos:column="15">Release</name></name><parameter_list pos:line="172" pos:column="22">()</parameter_list> <block pos:line="172" pos:column="25">{
	<decl_stmt><decl><type><name pos:line="173" pos:column="9">int</name></type> <name pos:line="173" pos:column="13">curRefCount</name> <init pos:line="173" pos:column="25">= <expr><op:operator pos:line="173" pos:column="27">--</op:operator><name pos:line="173" pos:column="29">refCount</name></expr></init></decl>;</decl_stmt>
	<if pos:line="174" pos:column="9">if <condition pos:line="174" pos:column="12">(<expr><name pos:line="174" pos:column="13">curRefCount</name> <op:operator pos:line="174" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="174" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="174" pos:column="30">
		<expr_stmt><expr><op:operator pos:line="175" pos:column="17">delete</op:operator> <name pos:line="175" pos:column="24">this</name></expr>;</expr_stmt></then></if>
	<return pos:line="176" pos:column="9">return <expr><name pos:line="176" pos:column="16">curRefCount</name></expr>;</return>
}</block></function>

<function><type><name pos:line="179" pos:column="1">void</name></type> <name><name pos:line="179" pos:column="6">Document</name><op:operator pos:line="179" pos:column="14">::</op:operator><name pos:line="179" pos:column="16">SetSavePoint</name></name><parameter_list pos:line="179" pos:column="28">()</parameter_list> <block pos:line="179" pos:column="31">{
	<expr_stmt><expr><call><name><name pos:line="180" pos:column="9">cb</name><op:operator pos:line="180" pos:column="11">.</op:operator><name pos:line="180" pos:column="12">SetSavePoint</name></name><argument_list pos:line="180" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="181" pos:column="9">NotifySavePoint</name><argument_list pos:line="181" pos:column="24">(<argument><expr><lit:literal type="boolean" pos:line="181" pos:column="25">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="184" pos:column="1">int</name></type> <name><name pos:line="184" pos:column="5">Document</name><op:operator pos:line="184" pos:column="13">::</op:operator><name pos:line="184" pos:column="15">GetMark</name></name><parameter_list pos:line="184" pos:column="22">(<param><decl><type><name pos:line="184" pos:column="23">int</name></type> <name pos:line="184" pos:column="27">line</name></decl></param>)</parameter_list> <block pos:line="184" pos:column="33">{
	<return pos:line="185" pos:column="9">return <expr><call><name><name pos:line="185" pos:column="16">static_cast</name><argument_list pos:line="185" pos:column="27">&lt;<argument><expr><name pos:line="185" pos:column="28">LineMarkers</name> <op:operator pos:line="185" pos:column="40">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="185" pos:column="42">(<argument><expr><name><name pos:line="185" pos:column="43">perLineData</name><index pos:line="185" pos:column="54">[<expr><name pos:line="185" pos:column="55">ldMarkers</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="185" pos:column="66">-&gt;</op:operator><call><name pos:line="185" pos:column="68">MarkValue</name><argument_list pos:line="185" pos:column="77">(<argument><expr><name pos:line="185" pos:column="78">line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="188" pos:column="1">int</name></type> <name><name pos:line="188" pos:column="5">Document</name><op:operator pos:line="188" pos:column="13">::</op:operator><name pos:line="188" pos:column="15">AddMark</name></name><parameter_list pos:line="188" pos:column="22">(<param><decl><type><name pos:line="188" pos:column="23">int</name></type> <name pos:line="188" pos:column="27">line</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="33">int</name></type> <name pos:line="188" pos:column="37">markerNum</name></decl></param>)</parameter_list> <block pos:line="188" pos:column="48">{
	<if pos:line="189" pos:column="9">if <condition pos:line="189" pos:column="12">(<expr><name pos:line="189" pos:column="13">line</name> <op:operator pos:line="189" pos:column="18">&gt;=</op:operator> <lit:literal type="number" pos:line="189" pos:column="21">0</lit:literal> <op:operator pos:line="189" pos:column="23">&amp;&amp;</op:operator> <name pos:line="189" pos:column="26">line</name> <op:operator pos:line="189" pos:column="31">&lt;=</op:operator> <call><name pos:line="189" pos:column="34">LinesTotal</name><argument_list pos:line="189" pos:column="44">()</argument_list></call></expr>)</condition><then pos:line="189" pos:column="47"> <block pos:line="189" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="190" pos:column="17">int</name></type> <name pos:line="190" pos:column="21">prev</name> <init pos:line="190" pos:column="26">= <expr><call><name><name pos:line="190" pos:column="28">static_cast</name><argument_list pos:line="190" pos:column="39">&lt;<argument><expr><name pos:line="190" pos:column="40">LineMarkers</name> <op:operator pos:line="190" pos:column="52">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="190" pos:column="54">(<argument><expr><name><name pos:line="190" pos:column="55">perLineData</name><index pos:line="190" pos:column="66">[<expr><name pos:line="190" pos:column="67">ldMarkers</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="190" pos:column="78">-&gt;</op:operator>
			<call><name pos:line="191" pos:column="25">AddMark</name><argument_list pos:line="191" pos:column="32">(<argument><expr><name pos:line="191" pos:column="33">line</name></expr></argument>, <argument><expr><name pos:line="191" pos:column="39">markerNum</name></expr></argument>, <argument><expr><call><name pos:line="191" pos:column="50">LinesTotal</name><argument_list pos:line="191" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="192" pos:column="17">DocModification</name></type> <name pos:line="192" pos:column="33">mh</name><argument_list pos:line="192" pos:column="35">(<argument><expr><name pos:line="192" pos:column="36">SC_MOD_CHANGEMARKER</name></expr></argument>, <argument><expr><call><name pos:line="192" pos:column="57">LineStart</name><argument_list pos:line="192" pos:column="66">(<argument><expr><name pos:line="192" pos:column="67">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="74">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="192" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="83">line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="193" pos:column="17">NotifyModified</name><argument_list pos:line="193" pos:column="31">(<argument><expr><name pos:line="193" pos:column="32">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="194" pos:column="17">return <expr><name pos:line="194" pos:column="24">prev</name></expr>;</return>
	}</block></then> <else pos:line="195" pos:column="11">else <block pos:line="195" pos:column="16">{
		<return pos:line="196" pos:column="17">return <expr><lit:literal type="number" pos:line="196" pos:column="24">0</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="200" pos:column="1">void</name></type> <name><name pos:line="200" pos:column="6">Document</name><op:operator pos:line="200" pos:column="14">::</op:operator><name pos:line="200" pos:column="16">AddMarkSet</name></name><parameter_list pos:line="200" pos:column="26">(<param><decl><type><name pos:line="200" pos:column="27">int</name></type> <name pos:line="200" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="200" pos:column="37">int</name></type> <name pos:line="200" pos:column="41">valueSet</name></decl></param>)</parameter_list> <block pos:line="200" pos:column="51">{
	<if pos:line="201" pos:column="9">if <condition pos:line="201" pos:column="12">(<expr><name><name pos:line="201" pos:column="13">line</name> <argument_list pos:line="201" pos:column="18">&lt; <argument><expr><lit:literal type="number" pos:line="201" pos:column="20">0</lit:literal> <op:operator pos:line="201" pos:column="22">||</op:operator> <name pos:line="201" pos:column="25">line</name></expr></argument> &gt;</argument_list></name> <call><name pos:line="201" pos:column="32">LinesTotal</name><argument_list pos:line="201" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="201" pos:column="45"> <block pos:line="201" pos:column="46">{
		<return pos:line="202" pos:column="17">return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">unsigned</name> <name pos:line="204" pos:column="18">int</name></type> <name pos:line="204" pos:column="22">m</name> <init pos:line="204" pos:column="24">= <expr><name pos:line="204" pos:column="26">valueSet</name></expr></init></decl>;</decl_stmt>
	<for pos:line="205" pos:column="9">for (<init><decl><type><name pos:line="205" pos:column="14">int</name></type> <name pos:line="205" pos:column="18">i</name> <init pos:line="205" pos:column="20">= <expr><lit:literal type="number" pos:line="205" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="205" pos:column="25">m</name></expr>;</condition> <incr><expr><name pos:line="205" pos:column="28">i</name><op:operator pos:line="205" pos:column="29">++</op:operator></expr><op:operator pos:line="205" pos:column="31">,</op:operator> <expr><name pos:line="205" pos:column="33">m</name> <op:operator pos:line="205" pos:column="35">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="205" pos:column="39">1</lit:literal></expr></incr>)
		<if pos:line="206" pos:column="17">if <condition pos:line="206" pos:column="20">(<expr><name pos:line="206" pos:column="21">m</name> <op:operator pos:line="206" pos:column="23">&amp;</op:operator> <lit:literal type="number" pos:line="206" pos:column="25">1</lit:literal></expr>)</condition><then pos:line="206" pos:column="27">
			<expr_stmt><expr><call><name><name pos:line="207" pos:column="25">static_cast</name><argument_list pos:line="207" pos:column="36">&lt;<argument><expr><name pos:line="207" pos:column="37">LineMarkers</name> <op:operator pos:line="207" pos:column="49">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="207" pos:column="51">(<argument><expr><name><name pos:line="207" pos:column="52">perLineData</name><index pos:line="207" pos:column="63">[<expr><name pos:line="207" pos:column="64">ldMarkers</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="207" pos:column="75">-&gt;</op:operator>
				<call><name pos:line="208" pos:column="33">AddMark</name><argument_list pos:line="208" pos:column="40">(<argument><expr><name pos:line="208" pos:column="41">line</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="47">i</name></expr></argument>, <argument><expr><call><name pos:line="208" pos:column="50">LinesTotal</name><argument_list pos:line="208" pos:column="60">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></for>
	<decl_stmt><decl><type><name pos:line="209" pos:column="9">DocModification</name></type> <name pos:line="209" pos:column="25">mh</name><argument_list pos:line="209" pos:column="27">(<argument><expr><name pos:line="209" pos:column="28">SC_MOD_CHANGEMARKER</name></expr></argument>, <argument><expr><call><name pos:line="209" pos:column="49">LineStart</name><argument_list pos:line="209" pos:column="58">(<argument><expr><name pos:line="209" pos:column="59">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="209" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="209" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="209" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><name pos:line="209" pos:column="75">line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="210" pos:column="9">NotifyModified</name><argument_list pos:line="210" pos:column="23">(<argument><expr><name pos:line="210" pos:column="24">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="213" pos:column="1">void</name></type> <name><name pos:line="213" pos:column="6">Document</name><op:operator pos:line="213" pos:column="14">::</op:operator><name pos:line="213" pos:column="16">DeleteMark</name></name><parameter_list pos:line="213" pos:column="26">(<param><decl><type><name pos:line="213" pos:column="27">int</name></type> <name pos:line="213" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="213" pos:column="37">int</name></type> <name pos:line="213" pos:column="41">markerNum</name></decl></param>)</parameter_list> <block pos:line="213" pos:column="52">{
	<expr_stmt><expr><call><name><name pos:line="214" pos:column="9">static_cast</name><argument_list pos:line="214" pos:column="20">&lt;<argument><expr><name pos:line="214" pos:column="21">LineMarkers</name> <op:operator pos:line="214" pos:column="33">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="214" pos:column="35">(<argument><expr><name><name pos:line="214" pos:column="36">perLineData</name><index pos:line="214" pos:column="47">[<expr><name pos:line="214" pos:column="48">ldMarkers</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="214" pos:column="59">-&gt;</op:operator><call><name pos:line="214" pos:column="61">DeleteMark</name><argument_list pos:line="214" pos:column="71">(<argument><expr><name pos:line="214" pos:column="72">line</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="78">markerNum</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="214" pos:column="89">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="215" pos:column="9">DocModification</name></type> <name pos:line="215" pos:column="25">mh</name><argument_list pos:line="215" pos:column="27">(<argument><expr><name pos:line="215" pos:column="28">SC_MOD_CHANGEMARKER</name></expr></argument>, <argument><expr><call><name pos:line="215" pos:column="49">LineStart</name><argument_list pos:line="215" pos:column="58">(<argument><expr><name pos:line="215" pos:column="59">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="215" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="215" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="215" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><name pos:line="215" pos:column="75">line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="216" pos:column="9">NotifyModified</name><argument_list pos:line="216" pos:column="23">(<argument><expr><name pos:line="216" pos:column="24">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="219" pos:column="1">void</name></type> <name><name pos:line="219" pos:column="6">Document</name><op:operator pos:line="219" pos:column="14">::</op:operator><name pos:line="219" pos:column="16">DeleteMarkFromHandle</name></name><parameter_list pos:line="219" pos:column="36">(<param><decl><type><name pos:line="219" pos:column="37">int</name></type> <name pos:line="219" pos:column="41">markerHandle</name></decl></param>)</parameter_list> <block pos:line="219" pos:column="55">{
	<expr_stmt><expr><call><name><name pos:line="220" pos:column="9">static_cast</name><argument_list pos:line="220" pos:column="20">&lt;<argument><expr><name pos:line="220" pos:column="21">LineMarkers</name> <op:operator pos:line="220" pos:column="33">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="220" pos:column="35">(<argument><expr><name><name pos:line="220" pos:column="36">perLineData</name><index pos:line="220" pos:column="47">[<expr><name pos:line="220" pos:column="48">ldMarkers</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="220" pos:column="59">-&gt;</op:operator><call><name pos:line="220" pos:column="61">DeleteMarkFromHandle</name><argument_list pos:line="220" pos:column="81">(<argument><expr><name pos:line="220" pos:column="82">markerHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="221" pos:column="9">DocModification</name></type> <name pos:line="221" pos:column="25">mh</name><argument_list pos:line="221" pos:column="27">(<argument><expr><name pos:line="221" pos:column="28">SC_MOD_CHANGEMARKER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="221" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="221" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="221" pos:column="55">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="221" pos:column="58">0</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="222" pos:column="9">mh</name><op:operator pos:line="222" pos:column="11">.</op:operator><name pos:line="222" pos:column="12">line</name></name> <op:operator pos:line="222" pos:column="17">=</op:operator> <op:operator pos:line="222" pos:column="19">-</op:operator><lit:literal type="number" pos:line="222" pos:column="20">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="223" pos:column="9">NotifyModified</name><argument_list pos:line="223" pos:column="23">(<argument><expr><name pos:line="223" pos:column="24">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="226" pos:column="1">void</name></type> <name><name pos:line="226" pos:column="6">Document</name><op:operator pos:line="226" pos:column="14">::</op:operator><name pos:line="226" pos:column="16">DeleteAllMarks</name></name><parameter_list pos:line="226" pos:column="30">(<param><decl><type><name pos:line="226" pos:column="31">int</name></type> <name pos:line="226" pos:column="35">markerNum</name></decl></param>)</parameter_list> <block pos:line="226" pos:column="46">{
	<decl_stmt><decl><type><name pos:line="227" pos:column="9">bool</name></type> <name pos:line="227" pos:column="14">someChanges</name> <init pos:line="227" pos:column="26">= <expr><lit:literal type="boolean" pos:line="227" pos:column="28">false</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="228" pos:column="9">for (<init><decl><type><name pos:line="228" pos:column="14">int</name></type> <name pos:line="228" pos:column="18">line</name> <init pos:line="228" pos:column="23">= <expr><lit:literal type="number" pos:line="228" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="228" pos:column="28">line</name> <op:operator pos:line="228" pos:column="33">&lt;</op:operator> <call><name pos:line="228" pos:column="35">LinesTotal</name><argument_list pos:line="228" pos:column="45">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="228" pos:column="49">line</name><op:operator pos:line="228" pos:column="53">++</op:operator></expr></incr>) <block pos:line="228" pos:column="57">{
		<if pos:line="229" pos:column="17">if <condition pos:line="229" pos:column="20">(<expr><call><name><name pos:line="229" pos:column="21">static_cast</name><argument_list pos:line="229" pos:column="32">&lt;<argument><expr><name pos:line="229" pos:column="33">LineMarkers</name> <op:operator pos:line="229" pos:column="45">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="229" pos:column="47">(<argument><expr><name><name pos:line="229" pos:column="48">perLineData</name><index pos:line="229" pos:column="59">[<expr><name pos:line="229" pos:column="60">ldMarkers</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="229" pos:column="71">-&gt;</op:operator><call><name pos:line="229" pos:column="73">DeleteMark</name><argument_list pos:line="229" pos:column="83">(<argument><expr><name pos:line="229" pos:column="84">line</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="90">markerNum</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="229" pos:column="101">true</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="229" pos:column="107">
			<expr_stmt><expr><name pos:line="230" pos:column="25">someChanges</name> <op:operator pos:line="230" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="230" pos:column="39">true</lit:literal></expr>;</expr_stmt></then></if>
	}</block></for>
	<if pos:line="232" pos:column="9">if <condition pos:line="232" pos:column="12">(<expr><name pos:line="232" pos:column="13">someChanges</name></expr>)</condition><then pos:line="232" pos:column="25"> <block pos:line="232" pos:column="26">{
		<decl_stmt><decl><type><name pos:line="233" pos:column="17">DocModification</name></type> <name pos:line="233" pos:column="33">mh</name><argument_list pos:line="233" pos:column="35">(<argument><expr><name pos:line="233" pos:column="36">SC_MOD_CHANGEMARKER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="233" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="233" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="233" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="233" pos:column="66">0</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="234" pos:column="17">mh</name><op:operator pos:line="234" pos:column="19">.</op:operator><name pos:line="234" pos:column="20">line</name></name> <op:operator pos:line="234" pos:column="25">=</op:operator> <op:operator pos:line="234" pos:column="27">-</op:operator><lit:literal type="number" pos:line="234" pos:column="28">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="235" pos:column="17">NotifyModified</name><argument_list pos:line="235" pos:column="31">(<argument><expr><name pos:line="235" pos:column="32">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="239" pos:column="1">int</name></type> <name><name pos:line="239" pos:column="5">Document</name><op:operator pos:line="239" pos:column="13">::</op:operator><name pos:line="239" pos:column="15">LineFromHandle</name></name><parameter_list pos:line="239" pos:column="29">(<param><decl><type><name pos:line="239" pos:column="30">int</name></type> <name pos:line="239" pos:column="34">markerHandle</name></decl></param>)</parameter_list> <block pos:line="239" pos:column="48">{
	<return pos:line="240" pos:column="9">return <expr><call><name><name pos:line="240" pos:column="16">static_cast</name><argument_list pos:line="240" pos:column="27">&lt;<argument><expr><name pos:line="240" pos:column="28">LineMarkers</name> <op:operator pos:line="240" pos:column="40">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="240" pos:column="42">(<argument><expr><name><name pos:line="240" pos:column="43">perLineData</name><index pos:line="240" pos:column="54">[<expr><name pos:line="240" pos:column="55">ldMarkers</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="240" pos:column="66">-&gt;</op:operator><call><name pos:line="240" pos:column="68">LineFromHandle</name><argument_list pos:line="240" pos:column="82">(<argument><expr><name pos:line="240" pos:column="83">markerHandle</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="243" pos:column="1">int</name> <name pos:line="243" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="243" pos:column="16">Document</name><op:operator pos:line="243" pos:column="24">::</op:operator><name pos:line="243" pos:column="26">LineStart</name></name><parameter_list pos:line="243" pos:column="35">(<param><decl><type><name pos:line="243" pos:column="36">int</name></type> <name pos:line="243" pos:column="40">line</name></decl></param>)</parameter_list> <specifier pos:line="243" pos:column="46">const</specifier> <block pos:line="243" pos:column="52">{
	<return pos:line="244" pos:column="9">return <expr><call><name><name pos:line="244" pos:column="16">cb</name><op:operator pos:line="244" pos:column="18">.</op:operator><name pos:line="244" pos:column="19">LineStart</name></name><argument_list pos:line="244" pos:column="28">(<argument><expr><name pos:line="244" pos:column="29">line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="247" pos:column="1">int</name></type> <name><name pos:line="247" pos:column="5">Document</name><op:operator pos:line="247" pos:column="13">::</op:operator><name pos:line="247" pos:column="15">LineEnd</name></name><parameter_list pos:line="247" pos:column="22">(<param><decl><type><name pos:line="247" pos:column="23">int</name></type> <name pos:line="247" pos:column="27">line</name></decl></param>)</parameter_list> <specifier pos:line="247" pos:column="33">const</specifier> <block pos:line="247" pos:column="39">{
	<if pos:line="248" pos:column="9">if <condition pos:line="248" pos:column="12">(<expr><name pos:line="248" pos:column="13">line</name> <op:operator pos:line="248" pos:column="18">==</op:operator> <call><name pos:line="248" pos:column="21">LinesTotal</name><argument_list pos:line="248" pos:column="31">()</argument_list></call> <op:operator pos:line="248" pos:column="34">-</op:operator> <lit:literal type="number" pos:line="248" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="248" pos:column="38"> <block pos:line="248" pos:column="39">{
		<return pos:line="249" pos:column="17">return <expr><call><name pos:line="249" pos:column="24">LineStart</name><argument_list pos:line="249" pos:column="33">(<argument><expr><name pos:line="249" pos:column="34">line</name> <op:operator pos:line="249" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="249" pos:column="41">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="250" pos:column="11">else <block pos:line="250" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="251" pos:column="17">int</name></type> <name pos:line="251" pos:column="21">position</name> <init pos:line="251" pos:column="30">= <expr><call><name pos:line="251" pos:column="32">LineStart</name><argument_list pos:line="251" pos:column="41">(<argument><expr><name pos:line="251" pos:column="42">line</name> <op:operator pos:line="251" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="251" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="251" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="251" pos:column="54">1</lit:literal></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="252" pos:column="17">// When line terminator is CR+LF, may need to go back one more</comment>
		<if pos:line="253" pos:column="17">if <condition pos:line="253" pos:column="20">(<expr><op:operator pos:line="253" pos:column="21">(</op:operator><name pos:line="253" pos:column="22">position</name> <op:operator pos:line="253" pos:column="31">&gt;</op:operator> <call><name pos:line="253" pos:column="33">LineStart</name><argument_list pos:line="253" pos:column="42">(<argument><expr><name pos:line="253" pos:column="43">line</name></expr></argument>)</argument_list></call><op:operator pos:line="253" pos:column="48">)</op:operator> <op:operator pos:line="253" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="253" pos:column="53">(</op:operator><call><name><name pos:line="253" pos:column="54">cb</name><op:operator pos:line="253" pos:column="56">.</op:operator><name pos:line="253" pos:column="57">CharAt</name></name><argument_list pos:line="253" pos:column="63">(<argument><expr><name pos:line="253" pos:column="64">position</name> <op:operator pos:line="253" pos:column="73">-</op:operator> <lit:literal type="number" pos:line="253" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="253" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="253" pos:column="81">'\r'</lit:literal><op:operator pos:line="253" pos:column="85">)</op:operator></expr>)</condition><then pos:line="253" pos:column="87"> <block pos:line="253" pos:column="88">{
			<expr_stmt><expr><name pos:line="254" pos:column="25">position</name><op:operator pos:line="254" pos:column="33">--</op:operator></expr>;</expr_stmt>
		}</block></then></if>
		<return pos:line="256" pos:column="17">return <expr><name pos:line="256" pos:column="24">position</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="260" pos:column="1">void</name> <name pos:line="260" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="260" pos:column="17">Document</name><op:operator pos:line="260" pos:column="25">::</op:operator><name pos:line="260" pos:column="27">SetErrorStatus</name></name><parameter_list pos:line="260" pos:column="41">(<param><decl><type><name pos:line="260" pos:column="42">int</name></type> <name pos:line="260" pos:column="46">status</name></decl></param>)</parameter_list> <block pos:line="260" pos:column="54">{
	<comment type="line" pos:line="261" pos:column="9">// Tell the watchers the lexer has changed.</comment>
	<for pos:line="262" pos:column="9">for (<init><decl><type><name pos:line="262" pos:column="14">int</name></type> <name pos:line="262" pos:column="18">i</name> <init pos:line="262" pos:column="20">= <expr><lit:literal type="number" pos:line="262" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="262" pos:column="25">i</name> <op:operator pos:line="262" pos:column="27">&lt;</op:operator> <name pos:line="262" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="262" pos:column="42">i</name><op:operator pos:line="262" pos:column="43">++</op:operator></expr></incr>) <block pos:line="262" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="263" pos:column="17">watchers</name><index pos:line="263" pos:column="25">[<expr><name pos:line="263" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="263" pos:column="28">.</op:operator><call><name><name pos:line="263" pos:column="29">watcher</name><op:operator pos:line="263" pos:column="36">-&gt;</op:operator><name pos:line="263" pos:column="38">NotifyErrorOccurred</name></name><argument_list pos:line="263" pos:column="57">(<argument><expr><name pos:line="263" pos:column="58">this</name></expr></argument>, <argument><expr><name><name pos:line="263" pos:column="64">watchers</name><index pos:line="263" pos:column="72">[<expr><name pos:line="263" pos:column="73">i</name></expr>]</index></name><op:operator pos:line="263" pos:column="75">.</op:operator><name pos:line="263" pos:column="76">userData</name></expr></argument>, <argument><expr><name pos:line="263" pos:column="86">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="267" pos:column="1">int</name> <name pos:line="267" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="267" pos:column="16">Document</name><op:operator pos:line="267" pos:column="24">::</op:operator><name pos:line="267" pos:column="26">LineFromPosition</name></name><parameter_list pos:line="267" pos:column="42">(<param><decl><type><name pos:line="267" pos:column="43">int</name></type> <name pos:line="267" pos:column="47">pos</name></decl></param>)</parameter_list> <specifier pos:line="267" pos:column="52">const</specifier> <block pos:line="267" pos:column="58">{
	<return pos:line="268" pos:column="9">return <expr><call><name><name pos:line="268" pos:column="16">cb</name><op:operator pos:line="268" pos:column="18">.</op:operator><name pos:line="268" pos:column="19">LineFromPosition</name></name><argument_list pos:line="268" pos:column="35">(<argument><expr><name pos:line="268" pos:column="36">pos</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="271" pos:column="1">int</name></type> <name><name pos:line="271" pos:column="5">Document</name><op:operator pos:line="271" pos:column="13">::</op:operator><name pos:line="271" pos:column="15">LineEndPosition</name></name><parameter_list pos:line="271" pos:column="30">(<param><decl><type><name pos:line="271" pos:column="31">int</name></type> <name pos:line="271" pos:column="35">position</name></decl></param>)</parameter_list> <specifier pos:line="271" pos:column="45">const</specifier> <block pos:line="271" pos:column="51">{
	<return pos:line="272" pos:column="9">return <expr><call><name pos:line="272" pos:column="16">LineEnd</name><argument_list pos:line="272" pos:column="23">(<argument><expr><call><name pos:line="272" pos:column="24">LineFromPosition</name><argument_list pos:line="272" pos:column="40">(<argument><expr><name pos:line="272" pos:column="41">position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="275" pos:column="1">bool</name></type> <name><name pos:line="275" pos:column="6">Document</name><op:operator pos:line="275" pos:column="14">::</op:operator><name pos:line="275" pos:column="16">IsLineEndPosition</name></name><parameter_list pos:line="275" pos:column="33">(<param><decl><type><name pos:line="275" pos:column="34">int</name></type> <name pos:line="275" pos:column="38">position</name></decl></param>)</parameter_list> <specifier pos:line="275" pos:column="48">const</specifier> <block pos:line="275" pos:column="54">{
	<return pos:line="276" pos:column="9">return <expr><call><name pos:line="276" pos:column="16">LineEnd</name><argument_list pos:line="276" pos:column="23">(<argument><expr><call><name pos:line="276" pos:column="24">LineFromPosition</name><argument_list pos:line="276" pos:column="40">(<argument><expr><name pos:line="276" pos:column="41">position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="276" pos:column="52">==</op:operator> <name pos:line="276" pos:column="55">position</name></expr>;</return>
}</block></function>

<function><type><name pos:line="279" pos:column="1">int</name></type> <name><name pos:line="279" pos:column="5">Document</name><op:operator pos:line="279" pos:column="13">::</op:operator><name pos:line="279" pos:column="15">VCHomePosition</name></name><parameter_list pos:line="279" pos:column="29">(<param><decl><type><name pos:line="279" pos:column="30">int</name></type> <name pos:line="279" pos:column="34">position</name></decl></param>)</parameter_list> <specifier pos:line="279" pos:column="44">const</specifier> <block pos:line="279" pos:column="50">{
	<decl_stmt><decl><type><name pos:line="280" pos:column="9">int</name></type> <name pos:line="280" pos:column="13">line</name> <init pos:line="280" pos:column="18">= <expr><call><name pos:line="280" pos:column="20">LineFromPosition</name><argument_list pos:line="280" pos:column="36">(<argument><expr><name pos:line="280" pos:column="37">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="281" pos:column="9">int</name></type> <name pos:line="281" pos:column="13">startPosition</name> <init pos:line="281" pos:column="27">= <expr><call><name pos:line="281" pos:column="29">LineStart</name><argument_list pos:line="281" pos:column="38">(<argument><expr><name pos:line="281" pos:column="39">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="282" pos:column="9">int</name></type> <name pos:line="282" pos:column="13">endLine</name> <init pos:line="282" pos:column="21">= <expr><call><name pos:line="282" pos:column="23">LineEnd</name><argument_list pos:line="282" pos:column="30">(<argument><expr><name pos:line="282" pos:column="31">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="283" pos:column="9">int</name></type> <name pos:line="283" pos:column="13">startText</name> <init pos:line="283" pos:column="23">= <expr><name pos:line="283" pos:column="25">startPosition</name></expr></init></decl>;</decl_stmt>
	<while pos:line="284" pos:column="9">while <condition pos:line="284" pos:column="15">(<expr><name pos:line="284" pos:column="16">startText</name> <op:operator pos:line="284" pos:column="26">&lt;</op:operator> <name pos:line="284" pos:column="28">endLine</name> <op:operator pos:line="284" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="284" pos:column="39">(</op:operator><call><name><name pos:line="284" pos:column="40">cb</name><op:operator pos:line="284" pos:column="42">.</op:operator><name pos:line="284" pos:column="43">CharAt</name></name><argument_list pos:line="284" pos:column="49">(<argument><expr><name pos:line="284" pos:column="50">startText</name></expr></argument>)</argument_list></call> <op:operator pos:line="284" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="284" pos:column="64">' '</lit:literal> <op:operator pos:line="284" pos:column="68">||</op:operator> <call><name><name pos:line="284" pos:column="71">cb</name><op:operator pos:line="284" pos:column="73">.</op:operator><name pos:line="284" pos:column="74">CharAt</name></name><argument_list pos:line="284" pos:column="80">(<argument><expr><name pos:line="284" pos:column="81">startText</name></expr></argument>)</argument_list></call> <op:operator pos:line="284" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="284" pos:column="95">'\t'</lit:literal><op:operator pos:line="284" pos:column="99">)</op:operator></expr>)</condition>
		<expr_stmt><expr><name pos:line="285" pos:column="17">startText</name><op:operator pos:line="285" pos:column="26">++</op:operator></expr>;</expr_stmt></while>
	<if pos:line="286" pos:column="9">if <condition pos:line="286" pos:column="12">(<expr><name pos:line="286" pos:column="13">position</name> <op:operator pos:line="286" pos:column="22">==</op:operator> <name pos:line="286" pos:column="25">startText</name></expr>)</condition><then pos:line="286" pos:column="35">
		<return pos:line="287" pos:column="17">return <expr><name pos:line="287" pos:column="24">startPosition</name></expr>;</return></then>
	<else pos:line="288" pos:column="9">else
		<return pos:line="289" pos:column="17">return <expr><name pos:line="289" pos:column="24">startText</name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="292" pos:column="1">int</name> <name pos:line="292" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="292" pos:column="16">Document</name><op:operator pos:line="292" pos:column="24">::</op:operator><name pos:line="292" pos:column="26">SetLevel</name></name><parameter_list pos:line="292" pos:column="34">(<param><decl><type><name pos:line="292" pos:column="35">int</name></type> <name pos:line="292" pos:column="39">line</name></decl></param>, <param><decl><type><name pos:line="292" pos:column="45">int</name></type> <name pos:line="292" pos:column="49">level</name></decl></param>)</parameter_list> <block pos:line="292" pos:column="56">{
	<decl_stmt><decl><type><name pos:line="293" pos:column="9">int</name></type> <name pos:line="293" pos:column="13">prev</name> <init pos:line="293" pos:column="18">= <expr><call><name><name pos:line="293" pos:column="20">static_cast</name><argument_list pos:line="293" pos:column="31">&lt;<argument><expr><name pos:line="293" pos:column="32">LineLevels</name> <op:operator pos:line="293" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="293" pos:column="45">(<argument><expr><name><name pos:line="293" pos:column="46">perLineData</name><index pos:line="293" pos:column="57">[<expr><name pos:line="293" pos:column="58">ldLevels</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="293" pos:column="68">-&gt;</op:operator><call><name pos:line="293" pos:column="70">SetLevel</name><argument_list pos:line="293" pos:column="78">(<argument><expr><name pos:line="293" pos:column="79">line</name></expr></argument>, <argument><expr><name pos:line="293" pos:column="85">level</name></expr></argument>, <argument><expr><call><name pos:line="293" pos:column="92">LinesTotal</name><argument_list pos:line="293" pos:column="102">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="294" pos:column="9">if <condition pos:line="294" pos:column="12">(<expr><name pos:line="294" pos:column="13">prev</name> <op:operator pos:line="294" pos:column="18">!=</op:operator> <name pos:line="294" pos:column="21">level</name></expr>)</condition><then pos:line="294" pos:column="27"> <block pos:line="294" pos:column="28">{
		<decl_stmt><decl><type><name pos:line="295" pos:column="17">DocModification</name></type> <name pos:line="295" pos:column="33">mh</name><argument_list pos:line="295" pos:column="35">(<argument><expr><name pos:line="295" pos:column="36">SC_MOD_CHANGEFOLD</name> <op:operator pos:line="295" pos:column="54">|</op:operator> <name pos:line="295" pos:column="56">SC_MOD_CHANGEMARKER</name></expr></argument>,
		                   <argument><expr><call><name pos:line="296" pos:column="36">LineStart</name><argument_list pos:line="296" pos:column="45">(<argument><expr><name pos:line="296" pos:column="46">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="296" pos:column="53">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="296" pos:column="56">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="296" pos:column="59">0</lit:literal></expr></argument>, <argument><expr><name pos:line="296" pos:column="62">line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="297" pos:column="17">mh</name><op:operator pos:line="297" pos:column="19">.</op:operator><name pos:line="297" pos:column="20">foldLevelNow</name></name> <op:operator pos:line="297" pos:column="33">=</op:operator> <name pos:line="297" pos:column="35">level</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="298" pos:column="17">mh</name><op:operator pos:line="298" pos:column="19">.</op:operator><name pos:line="298" pos:column="20">foldLevelPrev</name></name> <op:operator pos:line="298" pos:column="34">=</op:operator> <name pos:line="298" pos:column="36">prev</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="299" pos:column="17">NotifyModified</name><argument_list pos:line="299" pos:column="31">(<argument><expr><name pos:line="299" pos:column="32">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="301" pos:column="9">return <expr><name pos:line="301" pos:column="16">prev</name></expr>;</return>
}</block></function>

<function><type><name pos:line="304" pos:column="1">int</name> <name pos:line="304" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="304" pos:column="16">Document</name><op:operator pos:line="304" pos:column="24">::</op:operator><name pos:line="304" pos:column="26">GetLevel</name></name><parameter_list pos:line="304" pos:column="34">(<param><decl><type><name pos:line="304" pos:column="35">int</name></type> <name pos:line="304" pos:column="39">line</name></decl></param>)</parameter_list> <specifier pos:line="304" pos:column="45">const</specifier> <block pos:line="304" pos:column="51">{
	<return pos:line="305" pos:column="9">return <expr><call><name><name pos:line="305" pos:column="16">static_cast</name><argument_list pos:line="305" pos:column="27">&lt;<argument><expr><name pos:line="305" pos:column="28">LineLevels</name> <op:operator pos:line="305" pos:column="39">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="305" pos:column="41">(<argument><expr><name><name pos:line="305" pos:column="42">perLineData</name><index pos:line="305" pos:column="53">[<expr><name pos:line="305" pos:column="54">ldLevels</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="305" pos:column="64">-&gt;</op:operator><call><name pos:line="305" pos:column="66">GetLevel</name><argument_list pos:line="305" pos:column="74">(<argument><expr><name pos:line="305" pos:column="75">line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="308" pos:column="1">void</name></type> <name><name pos:line="308" pos:column="6">Document</name><op:operator pos:line="308" pos:column="14">::</op:operator><name pos:line="308" pos:column="16">ClearLevels</name></name><parameter_list pos:line="308" pos:column="27">()</parameter_list> <block pos:line="308" pos:column="30">{
	<expr_stmt><expr><call><name><name pos:line="309" pos:column="9">static_cast</name><argument_list pos:line="309" pos:column="20">&lt;<argument><expr><name pos:line="309" pos:column="21">LineLevels</name> <op:operator pos:line="309" pos:column="32">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="309" pos:column="34">(<argument><expr><name><name pos:line="309" pos:column="35">perLineData</name><index pos:line="309" pos:column="46">[<expr><name pos:line="309" pos:column="47">ldLevels</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="309" pos:column="57">-&gt;</op:operator><call><name pos:line="309" pos:column="59">ClearLevels</name><argument_list pos:line="309" pos:column="70">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="312" pos:column="1">static</specifier> <name pos:line="312" pos:column="8">bool</name></type> <name pos:line="312" pos:column="13">IsSubordinate</name><parameter_list pos:line="312" pos:column="26">(<param><decl><type><name pos:line="312" pos:column="27">int</name></type> <name pos:line="312" pos:column="31">levelStart</name></decl></param>, <param><decl><type><name pos:line="312" pos:column="43">int</name></type> <name pos:line="312" pos:column="47">levelTry</name></decl></param>)</parameter_list> <block pos:line="312" pos:column="57">{
	<if pos:line="313" pos:column="9">if <condition pos:line="313" pos:column="12">(<expr><name pos:line="313" pos:column="13">levelTry</name> <op:operator pos:line="313" pos:column="22">&amp;</op:operator> <name pos:line="313" pos:column="24">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="313" pos:column="46">
		<return pos:line="314" pos:column="17">return <expr><lit:literal type="boolean" pos:line="314" pos:column="24">true</lit:literal></expr>;</return></then>
	<else pos:line="315" pos:column="9">else
		<return pos:line="316" pos:column="17">return <expr><op:operator pos:line="316" pos:column="24">(</op:operator><name pos:line="316" pos:column="25">levelStart</name> <op:operator pos:line="316" pos:column="36">&amp;</op:operator> <name pos:line="316" pos:column="38">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="316" pos:column="60">)</op:operator> <op:operator pos:line="316" pos:column="62">&lt;</op:operator> <op:operator pos:line="316" pos:column="64">(</op:operator><name pos:line="316" pos:column="65">levelTry</name> <op:operator pos:line="316" pos:column="74">&amp;</op:operator> <name pos:line="316" pos:column="76">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="316" pos:column="98">)</op:operator></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="319" pos:column="1">int</name></type> <name><name pos:line="319" pos:column="5">Document</name><op:operator pos:line="319" pos:column="13">::</op:operator><name pos:line="319" pos:column="15">GetLastChild</name></name><parameter_list pos:line="319" pos:column="27">(<param><decl><type><name pos:line="319" pos:column="28">int</name></type> <name pos:line="319" pos:column="32">lineParent</name></decl></param>, <param><decl><type><name pos:line="319" pos:column="44">int</name></type> <name pos:line="319" pos:column="48">level</name></decl></param>)</parameter_list> <block pos:line="319" pos:column="55">{
	<if pos:line="320" pos:column="9">if <condition pos:line="320" pos:column="12">(<expr><name pos:line="320" pos:column="13">level</name> <op:operator pos:line="320" pos:column="19">==</op:operator> <op:operator pos:line="320" pos:column="22">-</op:operator><lit:literal type="number" pos:line="320" pos:column="23">1</lit:literal></expr>)</condition><then pos:line="320" pos:column="25">
		<expr_stmt><expr><name pos:line="321" pos:column="17">level</name> <op:operator pos:line="321" pos:column="23">=</op:operator> <call><name pos:line="321" pos:column="25">GetLevel</name><argument_list pos:line="321" pos:column="33">(<argument><expr><name pos:line="321" pos:column="34">lineParent</name></expr></argument>)</argument_list></call> <op:operator pos:line="321" pos:column="46">&amp;</op:operator> <name pos:line="321" pos:column="48">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="322" pos:column="9">int</name></type> <name pos:line="322" pos:column="13">maxLine</name> <init pos:line="322" pos:column="21">= <expr><call><name pos:line="322" pos:column="23">LinesTotal</name><argument_list pos:line="322" pos:column="33">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="323" pos:column="9">int</name></type> <name pos:line="323" pos:column="13">lineMaxSubord</name> <init pos:line="323" pos:column="27">= <expr><name pos:line="323" pos:column="29">lineParent</name></expr></init></decl>;</decl_stmt>
	<while pos:line="324" pos:column="9">while <condition pos:line="324" pos:column="15">(<expr><name pos:line="324" pos:column="16">lineMaxSubord</name> <op:operator pos:line="324" pos:column="30">&lt;</op:operator> <name pos:line="324" pos:column="32">maxLine</name> <op:operator pos:line="324" pos:column="40">-</op:operator> <lit:literal type="number" pos:line="324" pos:column="42">1</lit:literal></expr>)</condition> <block pos:line="324" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="325" pos:column="17">EnsureStyledTo</name><argument_list pos:line="325" pos:column="31">(<argument><expr><call><name pos:line="325" pos:column="32">LineStart</name><argument_list pos:line="325" pos:column="41">(<argument><expr><name pos:line="325" pos:column="42">lineMaxSubord</name> <op:operator pos:line="325" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="325" pos:column="58">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="326" pos:column="17">if <condition pos:line="326" pos:column="20">(<expr><op:operator pos:line="326" pos:column="21">!</op:operator><call><name pos:line="326" pos:column="22">IsSubordinate</name><argument_list pos:line="326" pos:column="35">(<argument><expr><name pos:line="326" pos:column="36">level</name></expr></argument>, <argument><expr><call><name pos:line="326" pos:column="43">GetLevel</name><argument_list pos:line="326" pos:column="51">(<argument><expr><name pos:line="326" pos:column="52">lineMaxSubord</name> <op:operator pos:line="326" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="326" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="326" pos:column="72">
			<break pos:line="327" pos:column="25">break;</break></then></if>
		<expr_stmt><expr><name pos:line="328" pos:column="17">lineMaxSubord</name><op:operator pos:line="328" pos:column="30">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="330" pos:column="9">if <condition pos:line="330" pos:column="12">(<expr><name pos:line="330" pos:column="13">lineMaxSubord</name> <op:operator pos:line="330" pos:column="27">&gt;</op:operator> <name pos:line="330" pos:column="29">lineParent</name></expr>)</condition><then pos:line="330" pos:column="40"> <block pos:line="330" pos:column="41">{
		<if pos:line="331" pos:column="17">if <condition pos:line="331" pos:column="20">(<expr><name pos:line="331" pos:column="21">level</name> <op:operator pos:line="331" pos:column="27">&gt;</op:operator> <op:operator pos:line="331" pos:column="29">(</op:operator><call><name pos:line="331" pos:column="30">GetLevel</name><argument_list pos:line="331" pos:column="38">(<argument><expr><name pos:line="331" pos:column="39">lineMaxSubord</name> <op:operator pos:line="331" pos:column="53">+</op:operator> <lit:literal type="number" pos:line="331" pos:column="55">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="331" pos:column="58">&amp;</op:operator> <name pos:line="331" pos:column="60">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="331" pos:column="82">)</op:operator></expr>)</condition><then pos:line="331" pos:column="84"> <block pos:line="331" pos:column="85">{
			<comment type="line" pos:line="332" pos:column="25">// Have chewed up some whitespace that belongs to a parent so seek back</comment>
			<if pos:line="333" pos:column="25">if <condition pos:line="333" pos:column="28">(<expr><call><name pos:line="333" pos:column="29">GetLevel</name><argument_list pos:line="333" pos:column="37">(<argument><expr><name pos:line="333" pos:column="38">lineMaxSubord</name></expr></argument>)</argument_list></call> <op:operator pos:line="333" pos:column="53">&amp;</op:operator> <name pos:line="333" pos:column="55">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="333" pos:column="77"> <block pos:line="333" pos:column="78">{
				<expr_stmt><expr><name pos:line="334" pos:column="33">lineMaxSubord</name><op:operator pos:line="334" pos:column="46">--</op:operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="338" pos:column="9">return <expr><name pos:line="338" pos:column="16">lineMaxSubord</name></expr>;</return>
}</block></function>

<function><type><name pos:line="341" pos:column="1">int</name></type> <name><name pos:line="341" pos:column="5">Document</name><op:operator pos:line="341" pos:column="13">::</op:operator><name pos:line="341" pos:column="15">GetFoldParent</name></name><parameter_list pos:line="341" pos:column="28">(<param><decl><type><name pos:line="341" pos:column="29">int</name></type> <name pos:line="341" pos:column="33">line</name></decl></param>)</parameter_list> <block pos:line="341" pos:column="39">{
	<decl_stmt><decl><type><name pos:line="342" pos:column="9">int</name></type> <name pos:line="342" pos:column="13">level</name> <init pos:line="342" pos:column="19">= <expr><call><name pos:line="342" pos:column="21">GetLevel</name><argument_list pos:line="342" pos:column="29">(<argument><expr><name pos:line="342" pos:column="30">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="342" pos:column="36">&amp;</op:operator> <name pos:line="342" pos:column="38">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="343" pos:column="9">int</name></type> <name pos:line="343" pos:column="13">lineLook</name> <init pos:line="343" pos:column="22">= <expr><name pos:line="343" pos:column="24">line</name> <op:operator pos:line="343" pos:column="29">-</op:operator> <lit:literal type="number" pos:line="343" pos:column="31">1</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="344" pos:column="9">while <condition pos:line="344" pos:column="15">(<expr><op:operator pos:line="344" pos:column="16">(</op:operator><name pos:line="344" pos:column="17">lineLook</name> <op:operator pos:line="344" pos:column="26">&gt;</op:operator> <lit:literal type="number" pos:line="344" pos:column="28">0</lit:literal><op:operator pos:line="344" pos:column="29">)</op:operator> <op:operator pos:line="344" pos:column="31">&amp;&amp;</op:operator> <op:operator pos:line="344" pos:column="34">(</op:operator>
	            <op:operator pos:line="345" pos:column="21">(</op:operator><op:operator pos:line="345" pos:column="22">!</op:operator><op:operator pos:line="345" pos:column="23">(</op:operator><call><name pos:line="345" pos:column="24">GetLevel</name><argument_list pos:line="345" pos:column="32">(<argument><expr><name pos:line="345" pos:column="33">lineLook</name></expr></argument>)</argument_list></call> <op:operator pos:line="345" pos:column="43">&amp;</op:operator> <name pos:line="345" pos:column="45">SC_FOLDLEVELHEADERFLAG</name><op:operator pos:line="345" pos:column="67">)</op:operator><op:operator pos:line="345" pos:column="68">)</op:operator> <op:operator pos:line="345" pos:column="70">||</op:operator>
	            <op:operator pos:line="346" pos:column="21">(</op:operator><op:operator pos:line="346" pos:column="22">(</op:operator><call><name pos:line="346" pos:column="23">GetLevel</name><argument_list pos:line="346" pos:column="31">(<argument><expr><name pos:line="346" pos:column="32">lineLook</name></expr></argument>)</argument_list></call> <op:operator pos:line="346" pos:column="42">&amp;</op:operator> <name pos:line="346" pos:column="44">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="346" pos:column="66">)</op:operator> <op:operator pos:line="346" pos:column="68">&gt;=</op:operator> <name pos:line="346" pos:column="71">level</name><op:operator pos:line="346" pos:column="76">)</op:operator><op:operator pos:line="346" pos:column="77">)</op:operator></expr>
	      )</condition> <block pos:line="347" pos:column="17">{
		<expr_stmt><expr><name pos:line="348" pos:column="17">lineLook</name><op:operator pos:line="348" pos:column="25">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="350" pos:column="9">if <condition pos:line="350" pos:column="12">(<expr><op:operator pos:line="350" pos:column="13">(</op:operator><call><name pos:line="350" pos:column="14">GetLevel</name><argument_list pos:line="350" pos:column="22">(<argument><expr><name pos:line="350" pos:column="23">lineLook</name></expr></argument>)</argument_list></call> <op:operator pos:line="350" pos:column="33">&amp;</op:operator> <name pos:line="350" pos:column="35">SC_FOLDLEVELHEADERFLAG</name><op:operator pos:line="350" pos:column="57">)</op:operator> <op:operator pos:line="350" pos:column="59">&amp;&amp;</op:operator>
	        <op:operator pos:line="351" pos:column="17">(</op:operator><op:operator pos:line="351" pos:column="18">(</op:operator><call><name pos:line="351" pos:column="19">GetLevel</name><argument_list pos:line="351" pos:column="27">(<argument><expr><name pos:line="351" pos:column="28">lineLook</name></expr></argument>)</argument_list></call> <op:operator pos:line="351" pos:column="38">&amp;</op:operator> <name pos:line="351" pos:column="40">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="351" pos:column="62">)</op:operator> <op:operator pos:line="351" pos:column="64">&lt;</op:operator> <name pos:line="351" pos:column="66">level</name><op:operator pos:line="351" pos:column="71">)</op:operator></expr>)</condition><then pos:line="351" pos:column="73"> <block pos:line="351" pos:column="74">{
		<return pos:line="352" pos:column="17">return <expr><name pos:line="352" pos:column="24">lineLook</name></expr>;</return>
	}</block></then> <else pos:line="353" pos:column="11">else <block pos:line="353" pos:column="16">{
		<return pos:line="354" pos:column="17">return <expr><op:operator pos:line="354" pos:column="24">-</op:operator><lit:literal type="number" pos:line="354" pos:column="25">1</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="358" pos:column="1">void</name></type> <name><name pos:line="358" pos:column="6">Document</name><op:operator pos:line="358" pos:column="14">::</op:operator><name pos:line="358" pos:column="16">GetHighlightDelimiters</name></name><parameter_list pos:line="358" pos:column="38">(<param><decl><type><name pos:line="358" pos:column="39">HighlightDelimiter</name> <type:modifier pos:line="358" pos:column="58">&amp;</type:modifier></type><name pos:line="358" pos:column="59">highlightDelimiter</name></decl></param>, <param><decl><type><name pos:line="358" pos:column="79">int</name></type> <name pos:line="358" pos:column="83">line</name></decl></param>, <param><decl><type><name pos:line="358" pos:column="89">int</name></type> <name pos:line="358" pos:column="93">topLine</name></decl></param>, <param><decl><type><name pos:line="358" pos:column="102">int</name></type> <name pos:line="358" pos:column="106">bottomLine</name></decl></param>)</parameter_list> <block pos:line="358" pos:column="118">{
	<decl_stmt><decl><type><name pos:line="359" pos:column="9">int</name></type> <name pos:line="359" pos:column="13">noNeedToParseBefore</name> <init pos:line="359" pos:column="33">= <expr><call><name><name pos:line="359" pos:column="35">Platform</name><op:operator pos:line="359" pos:column="43">::</op:operator><name pos:line="359" pos:column="45">Minimum</name></name><argument_list pos:line="359" pos:column="52">(<argument><expr><name pos:line="359" pos:column="53">line</name></expr></argument>, <argument><expr><name pos:line="359" pos:column="59">topLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="359" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="359" pos:column="70">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="360" pos:column="9">int</name></type> <name pos:line="360" pos:column="13">noNeedToParseAfter</name> <init pos:line="360" pos:column="32">= <expr><call><name><name pos:line="360" pos:column="34">Platform</name><op:operator pos:line="360" pos:column="42">::</op:operator><name pos:line="360" pos:column="44">Maximum</name></name><argument_list pos:line="360" pos:column="51">(<argument><expr><name pos:line="360" pos:column="52">line</name></expr></argument>, <argument><expr><name pos:line="360" pos:column="58">bottomLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="360" pos:column="70">+</op:operator> <lit:literal type="number" pos:line="360" pos:column="72">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="361" pos:column="9">int</name></type> <name pos:line="361" pos:column="13">endLine</name> <init pos:line="361" pos:column="21">= <expr><call><name pos:line="361" pos:column="23">LineFromPosition</name><argument_list pos:line="361" pos:column="39">(<argument><expr><call><name pos:line="361" pos:column="40">Length</name><argument_list pos:line="361" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="362" pos:column="9">int</name></type> <name pos:line="362" pos:column="13">beginFoldBlock</name> <init pos:line="362" pos:column="28">= <expr><name pos:line="362" pos:column="30">noNeedToParseBefore</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="363" pos:column="9">int</name></type> <name pos:line="363" pos:column="13">endFoldBlock</name> <init pos:line="363" pos:column="26">= <expr><op:operator pos:line="363" pos:column="28">-</op:operator><lit:literal type="number" pos:line="363" pos:column="29">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="364" pos:column="9">int</name></type> <name pos:line="364" pos:column="13">beginMarginCorrectlyDrawnZone</name> <init pos:line="364" pos:column="43">= <expr><name pos:line="364" pos:column="45">noNeedToParseBefore</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="365" pos:column="9">int</name></type> <name pos:line="365" pos:column="13">endMarginCorrectlyDrawnZone</name> <init pos:line="365" pos:column="41">= <expr><name pos:line="365" pos:column="43">noNeedToParseAfter</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="366" pos:column="9">int</name></type> <name pos:line="366" pos:column="13">endOfTailOfWhiteFlag</name> <init pos:line="366" pos:column="34">= <expr><op:operator pos:line="366" pos:column="36">-</op:operator><lit:literal type="number" pos:line="366" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="366" pos:column="40">//endOfTailOfWhiteFlag points the last SC_FOLDLEVELWHITEFLAG if follow a fold block. Otherwise endOfTailOfWhiteFlag points end of fold block.</comment>
	<decl_stmt><decl><type><name pos:line="367" pos:column="9">int</name></type> <name pos:line="367" pos:column="13">level</name> <init pos:line="367" pos:column="19">= <expr><call><name pos:line="367" pos:column="21">GetLevel</name><argument_list pos:line="367" pos:column="29">(<argument><expr><name pos:line="367" pos:column="30">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="368" pos:column="9">int</name></type> <name pos:line="368" pos:column="13">levelNumber</name> <init pos:line="368" pos:column="25">= <expr><op:operator pos:line="368" pos:column="27">-</op:operator><lit:literal type="number" pos:line="368" pos:column="28">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="369" pos:column="9">int</name></type> <name pos:line="369" pos:column="13">lineLookLevel</name> <init pos:line="369" pos:column="27">= <expr><lit:literal type="number" pos:line="369" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="370" pos:column="9">int</name></type> <name pos:line="370" pos:column="13">lineLookLevelNumber</name> <init pos:line="370" pos:column="33">= <expr><op:operator pos:line="370" pos:column="35">-</op:operator><lit:literal type="number" pos:line="370" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="371" pos:column="9">int</name></type> <name pos:line="371" pos:column="13">lineLook</name> <init pos:line="371" pos:column="22">= <expr><name pos:line="371" pos:column="24">line</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="372" pos:column="9">bool</name></type> <name pos:line="372" pos:column="14">beginFoldBlockFound</name> <init pos:line="372" pos:column="34">= <expr><lit:literal type="boolean" pos:line="372" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="373" pos:column="9">bool</name></type> <name pos:line="373" pos:column="14">endFoldBlockFound</name> <init pos:line="373" pos:column="32">= <expr><lit:literal type="boolean" pos:line="373" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="374" pos:column="9">bool</name></type> <name pos:line="374" pos:column="14">beginMarginCorrectlyDrawnZoneFound</name> <init pos:line="374" pos:column="49">= <expr><lit:literal type="boolean" pos:line="374" pos:column="51">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="375" pos:column="9">bool</name></type> <name pos:line="375" pos:column="14">endMarginCorrectlyDrawnZoneFound</name> <init pos:line="375" pos:column="47">= <expr><lit:literal type="boolean" pos:line="375" pos:column="49">false</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="block" format="doxygen" pos:line="377" pos:column="9">/*******************************************************************************/</comment>
	<comment type="block" pos:line="378" pos:column="9">/*      search backward (beginFoldBlock &amp; beginMarginCorrectlyDrawnZone)       */</comment>
	<comment type="block" format="doxygen" pos:line="379" pos:column="9">/*******************************************************************************/</comment>
	<for pos:line="380" pos:column="9">for (<init><expr><name pos:line="380" pos:column="14">endOfTailOfWhiteFlag</name> <op:operator pos:line="380" pos:column="35">=</op:operator> <name pos:line="380" pos:column="37">line</name></expr>;</init> <condition><expr><op:operator pos:line="380" pos:column="43">(</op:operator><name pos:line="380" pos:column="44">lineLook</name> <op:operator pos:line="380" pos:column="53">&gt;</op:operator> <name pos:line="380" pos:column="55">noNeedToParseBefore</name> <op:operator pos:line="380" pos:column="75">||</op:operator> <op:operator pos:line="380" pos:column="78">(</op:operator><name pos:line="380" pos:column="79">lineLookLevel</name> <op:operator pos:line="380" pos:column="93">&amp;</op:operator> <name pos:line="380" pos:column="95">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="380" pos:column="116">)</op:operator><op:operator pos:line="380" pos:column="117">)</op:operator> <op:operator pos:line="380" pos:column="119">&amp;&amp;</op:operator> <op:operator pos:line="380" pos:column="122">(</op:operator><op:operator pos:line="380" pos:column="123">!</op:operator><name pos:line="380" pos:column="124">beginFoldBlockFound</name> <op:operator pos:line="380" pos:column="144">||</op:operator> <op:operator pos:line="380" pos:column="147">!</op:operator><name pos:line="380" pos:column="148">beginMarginCorrectlyDrawnZoneFound</name><op:operator pos:line="380" pos:column="182">)</op:operator></expr>;</condition> <incr><expr><op:operator pos:line="380" pos:column="185">--</op:operator><name pos:line="380" pos:column="187">lineLook</name></expr></incr>) <block pos:line="380" pos:column="197">{
		<expr_stmt><expr><name pos:line="381" pos:column="17">lineLookLevel</name> <op:operator pos:line="381" pos:column="31">=</op:operator> <call><name pos:line="381" pos:column="33">GetLevel</name><argument_list pos:line="381" pos:column="41">(<argument><expr><name pos:line="381" pos:column="42">lineLook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="382" pos:column="17">if <condition pos:line="382" pos:column="20">(<expr><name pos:line="382" pos:column="21">levelNumber</name> <op:operator pos:line="382" pos:column="33">!=</op:operator> <op:operator pos:line="382" pos:column="36">-</op:operator><lit:literal type="number" pos:line="382" pos:column="37">1</lit:literal></expr>)</condition><then pos:line="382" pos:column="39"> <block pos:line="382" pos:column="40">{
			<expr_stmt><expr><name pos:line="383" pos:column="25">lineLookLevelNumber</name> <op:operator pos:line="383" pos:column="45">=</op:operator> <name pos:line="383" pos:column="47">lineLookLevel</name> <op:operator pos:line="383" pos:column="61">&amp;</op:operator> <name pos:line="383" pos:column="63">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
			<if pos:line="384" pos:column="25">if <condition pos:line="384" pos:column="28">(<expr><op:operator pos:line="384" pos:column="29">!</op:operator><name pos:line="384" pos:column="30">beginMarginCorrectlyDrawnZoneFound</name> <op:operator pos:line="384" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="384" pos:column="68">(</op:operator><name pos:line="384" pos:column="69">lineLookLevelNumber</name> <op:operator pos:line="384" pos:column="89">&gt;</op:operator> <name pos:line="384" pos:column="91">levelNumber</name><op:operator pos:line="384" pos:column="102">)</op:operator></expr>)</condition><then pos:line="384" pos:column="104"> <block pos:line="384" pos:column="105">{
				<expr_stmt><expr><name pos:line="385" pos:column="33">beginMarginCorrectlyDrawnZoneFound</name> <op:operator pos:line="385" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="385" pos:column="70">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="386" pos:column="33">beginMarginCorrectlyDrawnZone</name> <op:operator pos:line="386" pos:column="63">=</op:operator> <name pos:line="386" pos:column="65">endOfTailOfWhiteFlag</name></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="388" pos:column="25">//find the last space line (SC_FOLDLEVELWHITEFLAG).</comment>
			<if pos:line="389" pos:column="25">if <condition pos:line="389" pos:column="28">(<expr><op:operator pos:line="389" pos:column="29">!</op:operator><name pos:line="389" pos:column="30">beginMarginCorrectlyDrawnZoneFound</name> <op:operator pos:line="389" pos:column="65">&amp;&amp;</op:operator> <op:operator pos:line="389" pos:column="68">!</op:operator><op:operator pos:line="389" pos:column="69">(</op:operator><name pos:line="389" pos:column="70">lineLookLevel</name> <op:operator pos:line="389" pos:column="84">&amp;</op:operator> <name pos:line="389" pos:column="86">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="389" pos:column="107">)</op:operator></expr>)</condition><then pos:line="389" pos:column="109"> <block pos:line="389" pos:column="110">{
				<expr_stmt><expr><name pos:line="390" pos:column="33">endOfTailOfWhiteFlag</name> <op:operator pos:line="390" pos:column="54">=</op:operator> <name pos:line="390" pos:column="56">lineLook</name> <op:operator pos:line="390" pos:column="65">-</op:operator> <lit:literal type="number" pos:line="390" pos:column="67">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="392" pos:column="25">if <condition pos:line="392" pos:column="28">(<expr><op:operator pos:line="392" pos:column="29">!</op:operator><name pos:line="392" pos:column="30">beginFoldBlockFound</name> <op:operator pos:line="392" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="392" pos:column="53">(</op:operator><name pos:line="392" pos:column="54">lineLookLevelNumber</name> <op:operator pos:line="392" pos:column="74">&lt;</op:operator> <name pos:line="392" pos:column="76">levelNumber</name><op:operator pos:line="392" pos:column="87">)</op:operator></expr>)</condition><then pos:line="392" pos:column="89"> <block pos:line="392" pos:column="90">{
				<expr_stmt><expr><name pos:line="393" pos:column="33">beginFoldBlockFound</name> <op:operator pos:line="393" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="393" pos:column="55">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="394" pos:column="33">beginFoldBlock</name> <op:operator pos:line="394" pos:column="48">=</op:operator> <name pos:line="394" pos:column="50">lineLook</name></expr>;</expr_stmt>
				<if pos:line="395" pos:column="33">if <condition pos:line="395" pos:column="36">(<expr><op:operator pos:line="395" pos:column="37">!</op:operator><name pos:line="395" pos:column="38">beginMarginCorrectlyDrawnZoneFound</name></expr>)</condition><then pos:line="395" pos:column="73"> <block pos:line="395" pos:column="74">{
					<expr_stmt><expr><name pos:line="396" pos:column="41">beginMarginCorrectlyDrawnZoneFound</name> <op:operator pos:line="396" pos:column="76">=</op:operator> <lit:literal type="boolean" pos:line="396" pos:column="78">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="397" pos:column="41">beginMarginCorrectlyDrawnZone</name> <op:operator pos:line="397" pos:column="71">=</op:operator> <name pos:line="397" pos:column="73">lineLook</name> <op:operator pos:line="397" pos:column="82">-</op:operator> <lit:literal type="number" pos:line="397" pos:column="84">1</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="399" pos:column="27">else 	<if pos:line="399" pos:column="33">if <condition pos:line="399" pos:column="36">(<expr><op:operator pos:line="399" pos:column="37">!</op:operator><name pos:line="399" pos:column="38">beginFoldBlockFound</name> <op:operator pos:line="399" pos:column="58">&amp;&amp;</op:operator> <name pos:line="399" pos:column="61">lineLookLevelNumber</name> <op:operator pos:line="399" pos:column="81">==</op:operator> <name pos:line="399" pos:column="84">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="399" pos:column="101"> <block pos:line="399" pos:column="102">{
				<expr_stmt><expr><name pos:line="400" pos:column="33">beginFoldBlockFound</name> <op:operator pos:line="400" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="400" pos:column="55">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="401" pos:column="33">beginFoldBlock</name> <op:operator pos:line="401" pos:column="48">=</op:operator> <op:operator pos:line="401" pos:column="50">-</op:operator><lit:literal type="number" pos:line="401" pos:column="51">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="403" pos:column="19">else <if pos:line="403" pos:column="24">if <condition pos:line="403" pos:column="27">(<expr><op:operator pos:line="403" pos:column="28">!</op:operator><op:operator pos:line="403" pos:column="29">(</op:operator><name pos:line="403" pos:column="30">lineLookLevel</name> <op:operator pos:line="403" pos:column="44">&amp;</op:operator> <name pos:line="403" pos:column="46">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="403" pos:column="67">)</op:operator></expr>)</condition><then pos:line="403" pos:column="69"> <block pos:line="403" pos:column="70">{
			<expr_stmt><expr><name pos:line="404" pos:column="25">endOfTailOfWhiteFlag</name> <op:operator pos:line="404" pos:column="46">=</op:operator> <name pos:line="404" pos:column="48">lineLook</name> <op:operator pos:line="404" pos:column="57">-</op:operator> <lit:literal type="number" pos:line="404" pos:column="59">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="405" pos:column="25">levelNumber</name> <op:operator pos:line="405" pos:column="37">=</op:operator> <name pos:line="405" pos:column="39">lineLookLevel</name> <op:operator pos:line="405" pos:column="53">&amp;</op:operator> <name pos:line="405" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
			<if pos:line="406" pos:column="25">if <condition pos:line="406" pos:column="28">(<expr><name pos:line="406" pos:column="29">lineLookLevel</name> <op:operator pos:line="406" pos:column="43">&amp;</op:operator> <name pos:line="406" pos:column="45">SC_FOLDLEVELHEADERFLAG</name> <op:operator pos:line="406" pos:column="68">&amp;&amp;</op:operator>
			        <comment type="line" pos:line="407" pos:column="33">//Managed the folding block when a fold header does not have any subordinate lines to fold away.</comment>
			        <op:operator pos:line="408" pos:column="33">(</op:operator><name pos:line="408" pos:column="34">levelNumber</name> <op:operator pos:line="408" pos:column="46">&lt;</op:operator> <op:operator pos:line="408" pos:column="48">(</op:operator><call><name pos:line="408" pos:column="49">GetLevel</name><argument_list pos:line="408" pos:column="57">(<argument><expr><name pos:line="408" pos:column="58">lineLook</name> <op:operator pos:line="408" pos:column="67">+</op:operator> <lit:literal type="number" pos:line="408" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="408" pos:column="72">&amp;</op:operator> <name pos:line="408" pos:column="74">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="408" pos:column="96">)</op:operator><op:operator pos:line="408" pos:column="97">)</op:operator></expr>)</condition><then pos:line="408" pos:column="99"> <block pos:line="408" pos:column="100">{
				<expr_stmt><expr><name pos:line="409" pos:column="33">beginFoldBlockFound</name> <op:operator pos:line="409" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="409" pos:column="55">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="410" pos:column="33">beginFoldBlock</name> <op:operator pos:line="410" pos:column="48">=</op:operator> <name pos:line="410" pos:column="50">lineLook</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="411" pos:column="33">beginMarginCorrectlyDrawnZoneFound</name> <op:operator pos:line="411" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="411" pos:column="70">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="412" pos:column="33">beginMarginCorrectlyDrawnZone</name> <op:operator pos:line="412" pos:column="63">=</op:operator> <name pos:line="412" pos:column="65">endOfTailOfWhiteFlag</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="413" pos:column="33">levelNumber</name> <op:operator pos:line="413" pos:column="45">=</op:operator> <call><name pos:line="413" pos:column="47">GetLevel</name><argument_list pos:line="413" pos:column="55">(<argument><expr><name pos:line="413" pos:column="56">lineLook</name> <op:operator pos:line="413" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="413" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="413" pos:column="70">&amp;</op:operator> <name pos:line="413" pos:column="72">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt><empty_stmt pos:line="413" pos:column="95">;</empty_stmt>
			}</block></then></if>
		}</block></then></if></else></if>
	}</block></for>

	<comment type="block" format="doxygen" pos:line="418" pos:column="9">/****************************************************************************/</comment>
	<comment type="block" pos:line="419" pos:column="9">/*       search forward (endStartBlock &amp; endMarginCorrectlyDrawnZone)       */</comment>
	<comment type="block" format="doxygen" pos:line="420" pos:column="9">/****************************************************************************/</comment>
	<if pos:line="421" pos:column="9">if <condition pos:line="421" pos:column="12">(<expr><name pos:line="421" pos:column="13">level</name> <op:operator pos:line="421" pos:column="19">&amp;</op:operator> <name pos:line="421" pos:column="21">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="421" pos:column="44"> <block pos:line="421" pos:column="45">{
		<comment type="line" pos:line="422" pos:column="17">//ignore this line because this line is on first one of block.</comment>
		<expr_stmt><expr><name pos:line="423" pos:column="17">lineLook</name> <op:operator pos:line="423" pos:column="26">=</op:operator> <name pos:line="423" pos:column="28">line</name> <op:operator pos:line="423" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="423" pos:column="35">1</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="424" pos:column="11">else <block pos:line="424" pos:column="16">{
		<expr_stmt><expr><name pos:line="425" pos:column="17">lineLook</name> <op:operator pos:line="425" pos:column="26">=</op:operator> <name pos:line="425" pos:column="28">line</name></expr>;</expr_stmt>
	}</block></else></if>
	<for pos:line="427" pos:column="9">for (<init pos:line="427" pos:column="14">;</init> <condition><expr><name pos:line="427" pos:column="16">lineLook</name> <op:operator pos:line="427" pos:column="25">&lt;</op:operator> <name pos:line="427" pos:column="27">noNeedToParseAfter</name> <op:operator pos:line="427" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="427" pos:column="49">(</op:operator><op:operator pos:line="427" pos:column="50">!</op:operator><name pos:line="427" pos:column="51">endFoldBlockFound</name> <op:operator pos:line="427" pos:column="69">||</op:operator> <op:operator pos:line="427" pos:column="72">!</op:operator><name pos:line="427" pos:column="73">endMarginCorrectlyDrawnZoneFound</name><op:operator pos:line="427" pos:column="105">)</op:operator></expr>;</condition> <incr><expr><op:operator pos:line="427" pos:column="108">++</op:operator><name pos:line="427" pos:column="110">lineLook</name></expr></incr>) <block pos:line="427" pos:column="120">{
		<expr_stmt><expr><name pos:line="428" pos:column="17">lineLookLevel</name> <op:operator pos:line="428" pos:column="31">=</op:operator> <call><name pos:line="428" pos:column="33">GetLevel</name><argument_list pos:line="428" pos:column="41">(<argument><expr><name pos:line="428" pos:column="42">lineLook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="429" pos:column="17">lineLookLevelNumber</name> <op:operator pos:line="429" pos:column="37">=</op:operator> <name pos:line="429" pos:column="39">lineLookLevel</name> <op:operator pos:line="429" pos:column="53">&amp;</op:operator> <name pos:line="429" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
		<if pos:line="430" pos:column="17">if <condition pos:line="430" pos:column="20">(<expr><op:operator pos:line="430" pos:column="21">!</op:operator><name pos:line="430" pos:column="22">endFoldBlockFound</name> <op:operator pos:line="430" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="430" pos:column="43">!</op:operator><op:operator pos:line="430" pos:column="44">(</op:operator><name pos:line="430" pos:column="45">lineLookLevel</name> <op:operator pos:line="430" pos:column="59">&amp;</op:operator> <name pos:line="430" pos:column="61">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="430" pos:column="82">)</op:operator> <op:operator pos:line="430" pos:column="84">&amp;&amp;</op:operator> <name pos:line="430" pos:column="87">lineLookLevelNumber</name> <op:operator pos:line="430" pos:column="107">&lt;</op:operator> <name pos:line="430" pos:column="109">levelNumber</name></expr>)</condition><then pos:line="430" pos:column="121"> <block pos:line="430" pos:column="122">{
			<expr_stmt><expr><name pos:line="431" pos:column="25">endFoldBlockFound</name> <op:operator pos:line="431" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="431" pos:column="45">true</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="432" pos:column="25">endFoldBlock</name> <op:operator pos:line="432" pos:column="38">=</op:operator> <name pos:line="432" pos:column="40">lineLook</name> <op:operator pos:line="432" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="432" pos:column="51">1</lit:literal></expr>;</expr_stmt>
			<if pos:line="433" pos:column="25">if <condition pos:line="433" pos:column="28">(<expr><op:operator pos:line="433" pos:column="29">!</op:operator><name pos:line="433" pos:column="30">endMarginCorrectlyDrawnZoneFound</name></expr>)</condition><then pos:line="433" pos:column="63"> <block pos:line="433" pos:column="64">{
				<expr_stmt><expr><name pos:line="434" pos:column="33">endMarginCorrectlyDrawnZoneFound</name> <op:operator pos:line="434" pos:column="66">=</op:operator> <lit:literal type="boolean" pos:line="434" pos:column="68">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="435" pos:column="33">endMarginCorrectlyDrawnZone</name> <op:operator pos:line="435" pos:column="61">=</op:operator> <name pos:line="435" pos:column="63">lineLook</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="437" pos:column="19">else <if pos:line="437" pos:column="24">if <condition pos:line="437" pos:column="27">(<expr><op:operator pos:line="437" pos:column="28">!</op:operator><name pos:line="437" pos:column="29">endFoldBlockFound</name> <op:operator pos:line="437" pos:column="47">&amp;&amp;</op:operator> <name pos:line="437" pos:column="50">lineLookLevel</name> <op:operator pos:line="437" pos:column="64">==</op:operator> <name pos:line="437" pos:column="67">SC_FOLDLEVELBASE</name></expr>)</condition><then pos:line="437" pos:column="84"> <block pos:line="437" pos:column="85">{
			<expr_stmt><expr><name pos:line="438" pos:column="25">endFoldBlockFound</name> <op:operator pos:line="438" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="438" pos:column="45">true</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="439" pos:column="25">endFoldBlock</name> <op:operator pos:line="439" pos:column="38">=</op:operator> <op:operator pos:line="439" pos:column="40">-</op:operator><lit:literal type="number" pos:line="439" pos:column="41">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if></else></if>
		<if pos:line="441" pos:column="17">if <condition pos:line="441" pos:column="20">(<expr><op:operator pos:line="441" pos:column="21">!</op:operator><name pos:line="441" pos:column="22">endMarginCorrectlyDrawnZoneFound</name> <op:operator pos:line="441" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="441" pos:column="58">(</op:operator><name pos:line="441" pos:column="59">lineLookLevel</name> <op:operator pos:line="441" pos:column="73">&amp;</op:operator> <name pos:line="441" pos:column="75">SC_FOLDLEVELHEADERFLAG</name><op:operator pos:line="441" pos:column="97">)</op:operator> <op:operator pos:line="441" pos:column="99">&amp;&amp;</op:operator>
		        <comment type="line" pos:line="442" pos:column="25">//Managed the folding block when a fold header does not have any subordinate lines to fold away.</comment>
		        <op:operator pos:line="443" pos:column="25">(</op:operator><name pos:line="443" pos:column="26">levelNumber</name> <op:operator pos:line="443" pos:column="38">&lt;</op:operator> <op:operator pos:line="443" pos:column="40">(</op:operator><call><name pos:line="443" pos:column="41">GetLevel</name><argument_list pos:line="443" pos:column="49">(<argument><expr><name pos:line="443" pos:column="50">lineLook</name> <op:operator pos:line="443" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="443" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="443" pos:column="64">&amp;</op:operator> <name pos:line="443" pos:column="66">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="443" pos:column="88">)</op:operator><op:operator pos:line="443" pos:column="89">)</op:operator></expr>)</condition><then pos:line="443" pos:column="91"> <block pos:line="443" pos:column="92">{
			<expr_stmt><expr><name pos:line="444" pos:column="25">endMarginCorrectlyDrawnZoneFound</name> <op:operator pos:line="444" pos:column="58">=</op:operator> <lit:literal type="boolean" pos:line="444" pos:column="60">true</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="445" pos:column="25">endMarginCorrectlyDrawnZone</name> <op:operator pos:line="445" pos:column="53">=</op:operator> <name pos:line="445" pos:column="55">lineLook</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="448" pos:column="9">if <condition pos:line="448" pos:column="12">(<expr><op:operator pos:line="448" pos:column="13">!</op:operator><name pos:line="448" pos:column="14">endFoldBlockFound</name> <op:operator pos:line="448" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="448" pos:column="35">(</op:operator><op:operator pos:line="448" pos:column="36">(</op:operator><name pos:line="448" pos:column="37">lineLook</name> <op:operator pos:line="448" pos:column="46">&gt;</op:operator> <name pos:line="448" pos:column="48">endLine</name> <op:operator pos:line="448" pos:column="56">&amp;&amp;</op:operator> <name pos:line="448" pos:column="59">lineLookLevelNumber</name> <op:operator pos:line="448" pos:column="79">&lt;</op:operator> <name pos:line="448" pos:column="81">levelNumber</name><op:operator pos:line="448" pos:column="92">)</op:operator> <op:operator pos:line="448" pos:column="94">||</op:operator>
	        <op:operator pos:line="449" pos:column="17">(</op:operator><name pos:line="449" pos:column="18">levelNumber</name> <op:operator pos:line="449" pos:column="30">&gt;</op:operator> <name pos:line="449" pos:column="32">SC_FOLDLEVELBASE</name><op:operator pos:line="449" pos:column="48">)</op:operator><op:operator pos:line="449" pos:column="49">)</op:operator></expr>)</condition><then pos:line="449" pos:column="51"> <block pos:line="449" pos:column="52">{
		<comment type="line" pos:line="450" pos:column="17">//manage when endfold is incorrect or on last line.</comment>
		<expr_stmt><expr><name pos:line="451" pos:column="17">endFoldBlock</name> <op:operator pos:line="451" pos:column="30">=</op:operator> <name pos:line="451" pos:column="32">lineLook</name> <op:operator pos:line="451" pos:column="41">-</op:operator> <lit:literal type="number" pos:line="451" pos:column="43">1</lit:literal></expr>;</expr_stmt>
		<comment type="line" pos:line="452" pos:column="17">//useless to set endMarginCorrectlyDrawnZone.</comment>
		<comment type="line" pos:line="453" pos:column="17">//if endMarginCorrectlyDrawnZoneFound equals false then endMarginCorrectlyDrawnZone already equals to endLine + 1.</comment>
	}</block></then></if>

	<expr_stmt><expr><name><name pos:line="456" pos:column="9">highlightDelimiter</name><op:operator pos:line="456" pos:column="27">.</op:operator><name pos:line="456" pos:column="28">beginFoldBlock</name></name> <op:operator pos:line="456" pos:column="43">=</op:operator> <name pos:line="456" pos:column="45">beginFoldBlock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="457" pos:column="9">highlightDelimiter</name><op:operator pos:line="457" pos:column="27">.</op:operator><name pos:line="457" pos:column="28">endFoldBlock</name></name> <op:operator pos:line="457" pos:column="41">=</op:operator> <name pos:line="457" pos:column="43">endFoldBlock</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="458" pos:column="9">highlightDelimiter</name><op:operator pos:line="458" pos:column="27">.</op:operator><name pos:line="458" pos:column="28">beginMarginCorrectlyDrawnZone</name></name> <op:operator pos:line="458" pos:column="58">=</op:operator> <name pos:line="458" pos:column="60">beginMarginCorrectlyDrawnZone</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="459" pos:column="9">highlightDelimiter</name><op:operator pos:line="459" pos:column="27">.</op:operator><name pos:line="459" pos:column="28">endMarginCorrectlyDrawnZone</name></name> <op:operator pos:line="459" pos:column="56">=</op:operator> <name pos:line="459" pos:column="58">endMarginCorrectlyDrawnZone</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="462" pos:column="1">int</name></type> <name><name pos:line="462" pos:column="5">Document</name><op:operator pos:line="462" pos:column="13">::</op:operator><name pos:line="462" pos:column="15">ClampPositionIntoDocument</name></name><parameter_list pos:line="462" pos:column="40">(<param><decl><type><name pos:line="462" pos:column="41">int</name></type> <name pos:line="462" pos:column="45">pos</name></decl></param>)</parameter_list> <block pos:line="462" pos:column="50">{
	<return pos:line="463" pos:column="9">return <expr><call><name><name pos:line="463" pos:column="16">Platform</name><op:operator pos:line="463" pos:column="24">::</op:operator><name pos:line="463" pos:column="26">Clamp</name></name><argument_list pos:line="463" pos:column="31">(<argument><expr><name pos:line="463" pos:column="32">pos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="463" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="463" pos:column="40">Length</name><argument_list pos:line="463" pos:column="46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="466" pos:column="1">bool</name></type> <name><name pos:line="466" pos:column="6">Document</name><op:operator pos:line="466" pos:column="14">::</op:operator><name pos:line="466" pos:column="16">IsCrLf</name></name><parameter_list pos:line="466" pos:column="22">(<param><decl><type><name pos:line="466" pos:column="23">int</name></type> <name pos:line="466" pos:column="27">pos</name></decl></param>)</parameter_list> <block pos:line="466" pos:column="32">{
	<if pos:line="467" pos:column="9">if <condition pos:line="467" pos:column="12">(<expr><name pos:line="467" pos:column="13">pos</name> <op:operator pos:line="467" pos:column="17">&lt;</op:operator> <lit:literal type="number" pos:line="467" pos:column="19">0</lit:literal></expr>)</condition><then pos:line="467" pos:column="21">
		<return pos:line="468" pos:column="17">return <expr><lit:literal type="boolean" pos:line="468" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<if pos:line="469" pos:column="9">if <condition pos:line="469" pos:column="12">(<expr><name pos:line="469" pos:column="13">pos</name> <op:operator pos:line="469" pos:column="17">&gt;=</op:operator> <op:operator pos:line="469" pos:column="20">(</op:operator><call><name pos:line="469" pos:column="21">Length</name><argument_list pos:line="469" pos:column="27">()</argument_list></call> <op:operator pos:line="469" pos:column="30">-</op:operator> <lit:literal type="number" pos:line="469" pos:column="32">1</lit:literal><op:operator pos:line="469" pos:column="33">)</op:operator></expr>)</condition><then pos:line="469" pos:column="35">
		<return pos:line="470" pos:column="17">return <expr><lit:literal type="boolean" pos:line="470" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<return pos:line="471" pos:column="9">return <expr><op:operator pos:line="471" pos:column="16">(</op:operator><call><name><name pos:line="471" pos:column="17">cb</name><op:operator pos:line="471" pos:column="19">.</op:operator><name pos:line="471" pos:column="20">CharAt</name></name><argument_list pos:line="471" pos:column="26">(<argument><expr><name pos:line="471" pos:column="27">pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="471" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="471" pos:column="35">'\r'</lit:literal><op:operator pos:line="471" pos:column="39">)</op:operator> <op:operator pos:line="471" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="471" pos:column="44">(</op:operator><call><name><name pos:line="471" pos:column="45">cb</name><op:operator pos:line="471" pos:column="47">.</op:operator><name pos:line="471" pos:column="48">CharAt</name></name><argument_list pos:line="471" pos:column="54">(<argument><expr><name pos:line="471" pos:column="55">pos</name> <op:operator pos:line="471" pos:column="59">+</op:operator> <lit:literal type="number" pos:line="471" pos:column="61">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="471" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="471" pos:column="67">'\n'</lit:literal><op:operator pos:line="471" pos:column="71">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="474" pos:column="1">int</name></type> <name><name pos:line="474" pos:column="5">Document</name><op:operator pos:line="474" pos:column="13">::</op:operator><name pos:line="474" pos:column="15">LenChar</name></name><parameter_list pos:line="474" pos:column="22">(<param><decl><type><name pos:line="474" pos:column="23">int</name></type> <name pos:line="474" pos:column="27">pos</name></decl></param>)</parameter_list> <block pos:line="474" pos:column="32">{
	<if pos:line="475" pos:column="9">if <condition pos:line="475" pos:column="12">(<expr><name pos:line="475" pos:column="13">pos</name> <op:operator pos:line="475" pos:column="17">&lt;</op:operator> <lit:literal type="number" pos:line="475" pos:column="19">0</lit:literal></expr>)</condition><then pos:line="475" pos:column="21"> <block pos:line="475" pos:column="22">{
		<return pos:line="476" pos:column="17">return <expr><lit:literal type="number" pos:line="476" pos:column="24">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="477" pos:column="11">else <if pos:line="477" pos:column="16">if <condition pos:line="477" pos:column="19">(<expr><call><name pos:line="477" pos:column="20">IsCrLf</name><argument_list pos:line="477" pos:column="26">(<argument><expr><name pos:line="477" pos:column="27">pos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="477" pos:column="32"> <block pos:line="477" pos:column="33">{
		<return pos:line="478" pos:column="17">return <expr><lit:literal type="number" pos:line="478" pos:column="24">2</lit:literal></expr>;</return>
	}</block></then> <else pos:line="479" pos:column="11">else <if pos:line="479" pos:column="16">if <condition pos:line="479" pos:column="19">(<expr><name pos:line="479" pos:column="20">SC_CP_UTF8</name> <op:operator pos:line="479" pos:column="31">==</op:operator> <name pos:line="479" pos:column="34">dbcsCodePage</name></expr>)</condition><then pos:line="479" pos:column="47"> <block pos:line="479" pos:column="48">{
		<decl_stmt><decl><type><name pos:line="480" pos:column="17">unsigned</name> <name pos:line="480" pos:column="26">char</name></type> <name pos:line="480" pos:column="31">ch</name> <init pos:line="480" pos:column="34">= <expr><call><name><name pos:line="480" pos:column="36">static_cast</name><argument_list pos:line="480" pos:column="47">&lt;<argument><expr><name pos:line="480" pos:column="48">unsigned</name> <name pos:line="480" pos:column="57">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="480" pos:column="62">(<argument><expr><call><name><name pos:line="480" pos:column="63">cb</name><op:operator pos:line="480" pos:column="65">.</op:operator><name pos:line="480" pos:column="66">CharAt</name></name><argument_list pos:line="480" pos:column="72">(<argument><expr><name pos:line="480" pos:column="73">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="481" pos:column="17">if <condition pos:line="481" pos:column="20">(<expr><name pos:line="481" pos:column="21">ch</name> <op:operator pos:line="481" pos:column="24">&lt;</op:operator> <lit:literal type="number" pos:line="481" pos:column="26">0x80</lit:literal></expr>)</condition><then pos:line="481" pos:column="31">
			<return pos:line="482" pos:column="25">return <expr><lit:literal type="number" pos:line="482" pos:column="32">1</lit:literal></expr>;</return></then></if>
		<decl_stmt><decl><type><name pos:line="483" pos:column="17">int</name></type> <name pos:line="483" pos:column="21">len</name> <init pos:line="483" pos:column="25">= <expr><lit:literal type="number" pos:line="483" pos:column="27">2</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="484" pos:column="17">if <condition pos:line="484" pos:column="20">(<expr><name pos:line="484" pos:column="21">ch</name> <op:operator pos:line="484" pos:column="24">&gt;=</op:operator> <op:operator pos:line="484" pos:column="27">(</op:operator><lit:literal type="number" pos:line="484" pos:column="28">0x80</lit:literal> <op:operator pos:line="484" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="484" pos:column="35">0x40</lit:literal> <op:operator pos:line="484" pos:column="40">+</op:operator> <lit:literal type="number" pos:line="484" pos:column="42">0x20</lit:literal> <op:operator pos:line="484" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="484" pos:column="49">0x10</lit:literal><op:operator pos:line="484" pos:column="53">)</op:operator></expr>)</condition><then pos:line="484" pos:column="55">
			<expr_stmt><expr><name pos:line="485" pos:column="25">len</name> <op:operator pos:line="485" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="485" pos:column="31">4</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="486" pos:column="17">else <if pos:line="486" pos:column="22">if <condition pos:line="486" pos:column="25">(<expr><name pos:line="486" pos:column="26">ch</name> <op:operator pos:line="486" pos:column="29">&gt;=</op:operator> <op:operator pos:line="486" pos:column="32">(</op:operator><lit:literal type="number" pos:line="486" pos:column="33">0x80</lit:literal> <op:operator pos:line="486" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="486" pos:column="40">0x40</lit:literal> <op:operator pos:line="486" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="486" pos:column="47">0x20</lit:literal><op:operator pos:line="486" pos:column="51">)</op:operator></expr>)</condition><then pos:line="486" pos:column="53">
			<expr_stmt><expr><name pos:line="487" pos:column="25">len</name> <op:operator pos:line="487" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="487" pos:column="31">3</lit:literal></expr>;</expr_stmt></then></if></else></if>
		<decl_stmt><decl><type><name pos:line="488" pos:column="17">int</name></type> <name pos:line="488" pos:column="21">lengthDoc</name> <init pos:line="488" pos:column="31">= <expr><call><name pos:line="488" pos:column="33">Length</name><argument_list pos:line="488" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="489" pos:column="17">if <condition pos:line="489" pos:column="20">(<expr><op:operator pos:line="489" pos:column="21">(</op:operator><name pos:line="489" pos:column="22">pos</name> <op:operator pos:line="489" pos:column="26">+</op:operator> <name pos:line="489" pos:column="28">len</name><op:operator pos:line="489" pos:column="31">)</op:operator> <op:operator pos:line="489" pos:column="33">&gt;</op:operator> <name pos:line="489" pos:column="35">lengthDoc</name></expr>)</condition><then pos:line="489" pos:column="45">
			<return pos:line="490" pos:column="25">return <expr><name pos:line="490" pos:column="32">lengthDoc</name> <op:operator pos:line="490" pos:column="42">-</op:operator><name pos:line="490" pos:column="43">pos</name></expr>;</return></then>
		<else pos:line="491" pos:column="17">else
			<return pos:line="492" pos:column="25">return <expr><name pos:line="492" pos:column="32">len</name></expr>;</return></else></if>
	}</block></then> <else pos:line="493" pos:column="11">else <if pos:line="493" pos:column="16">if <condition pos:line="493" pos:column="19">(<expr><name pos:line="493" pos:column="20">dbcsCodePage</name></expr>)</condition><then pos:line="493" pos:column="33"> <block pos:line="493" pos:column="34">{
		<return pos:line="494" pos:column="17">return <expr><call><name pos:line="494" pos:column="24">IsDBCSLeadByte</name><argument_list pos:line="494" pos:column="38">(<argument><expr><call><name><name pos:line="494" pos:column="39">cb</name><op:operator pos:line="494" pos:column="41">.</op:operator><name pos:line="494" pos:column="42">CharAt</name></name><argument_list pos:line="494" pos:column="48">(<argument><expr><name pos:line="494" pos:column="49">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="494" pos:column="55">?</op:operator> <lit:literal type="number" pos:line="494" pos:column="57">2</lit:literal> <op:operator pos:line="494" pos:column="59">:</op:operator> <lit:literal type="number" pos:line="494" pos:column="61">1</lit:literal></expr>;</return>
	}</block></then> <else pos:line="495" pos:column="11">else <block pos:line="495" pos:column="16">{
		<return pos:line="496" pos:column="17">return <expr><lit:literal type="number" pos:line="496" pos:column="24">1</lit:literal></expr>;</return>
	}</block></else></if></else></if></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="500" pos:column="1">static</specifier> <name pos:line="500" pos:column="8">bool</name></type> <name pos:line="500" pos:column="13">IsTrailByte</name><parameter_list pos:line="500" pos:column="24">(<param><decl><type><name pos:line="500" pos:column="25">int</name></type> <name pos:line="500" pos:column="29">ch</name></decl></param>)</parameter_list> <block pos:line="500" pos:column="33">{
	<return pos:line="501" pos:column="9">return <expr><op:operator pos:line="501" pos:column="16">(</op:operator><name pos:line="501" pos:column="17">ch</name> <op:operator pos:line="501" pos:column="20">&gt;=</op:operator> <lit:literal type="number" pos:line="501" pos:column="23">0x80</lit:literal><op:operator pos:line="501" pos:column="27">)</op:operator> <op:operator pos:line="501" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="501" pos:column="32">(</op:operator><name pos:line="501" pos:column="33">ch</name> <op:operator pos:line="501" pos:column="36">&lt;</op:operator> <op:operator pos:line="501" pos:column="38">(</op:operator><lit:literal type="number" pos:line="501" pos:column="39">0x80</lit:literal> <op:operator pos:line="501" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="501" pos:column="46">0x40</lit:literal><op:operator pos:line="501" pos:column="50">)</op:operator><op:operator pos:line="501" pos:column="51">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="504" pos:column="1">static</specifier> <name pos:line="504" pos:column="8">int</name></type> <name pos:line="504" pos:column="12">BytesFromLead</name><parameter_list pos:line="504" pos:column="25">(<param><decl><type><name pos:line="504" pos:column="26">int</name></type> <name pos:line="504" pos:column="30">leadByte</name></decl></param>)</parameter_list> <block pos:line="504" pos:column="40">{
	<if pos:line="505" pos:column="9">if <condition pos:line="505" pos:column="12">(<expr><name pos:line="505" pos:column="13">leadByte</name> <op:operator pos:line="505" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="505" pos:column="24">0xF4</lit:literal></expr>)</condition><then pos:line="505" pos:column="29"> <block pos:line="505" pos:column="30">{
		<comment type="line" pos:line="506" pos:column="17">// Characters longer than 4 bytes not possible in current UTF-8</comment>
		<return pos:line="507" pos:column="17">return <expr><lit:literal type="number" pos:line="507" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then> <else pos:line="508" pos:column="11">else <if pos:line="508" pos:column="16">if <condition pos:line="508" pos:column="19">(<expr><name pos:line="508" pos:column="20">leadByte</name> <op:operator pos:line="508" pos:column="29">&gt;=</op:operator> <lit:literal type="number" pos:line="508" pos:column="32">0xF0</lit:literal></expr>)</condition><then pos:line="508" pos:column="37"> <block pos:line="508" pos:column="38">{
		<return pos:line="509" pos:column="17">return <expr><lit:literal type="number" pos:line="509" pos:column="24">4</lit:literal></expr>;</return>
	}</block></then> <else pos:line="510" pos:column="11">else <if pos:line="510" pos:column="16">if <condition pos:line="510" pos:column="19">(<expr><name pos:line="510" pos:column="20">leadByte</name> <op:operator pos:line="510" pos:column="29">&gt;=</op:operator> <lit:literal type="number" pos:line="510" pos:column="32">0xE0</lit:literal></expr>)</condition><then pos:line="510" pos:column="37"> <block pos:line="510" pos:column="38">{
		<return pos:line="511" pos:column="17">return <expr><lit:literal type="number" pos:line="511" pos:column="24">3</lit:literal></expr>;</return>
	}</block></then> <else pos:line="512" pos:column="11">else <if pos:line="512" pos:column="16">if <condition pos:line="512" pos:column="19">(<expr><name pos:line="512" pos:column="20">leadByte</name> <op:operator pos:line="512" pos:column="29">&gt;=</op:operator> <lit:literal type="number" pos:line="512" pos:column="32">0xC2</lit:literal></expr>)</condition><then pos:line="512" pos:column="37"> <block pos:line="512" pos:column="38">{
		<return pos:line="513" pos:column="17">return <expr><lit:literal type="number" pos:line="513" pos:column="24">2</lit:literal></expr>;</return>
	}</block></then></if></else></if></else></if></else></if>
	<return pos:line="515" pos:column="9">return <expr><lit:literal type="number" pos:line="515" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="518" pos:column="1">bool</name></type> <name><name pos:line="518" pos:column="6">Document</name><op:operator pos:line="518" pos:column="14">::</op:operator><name pos:line="518" pos:column="16">InGoodUTF8</name></name><parameter_list pos:line="518" pos:column="26">(<param><decl><type><name pos:line="518" pos:column="27">int</name></type> <name pos:line="518" pos:column="31">pos</name></decl></param>, <param><decl><type><name pos:line="518" pos:column="36">int</name> <type:modifier pos:line="518" pos:column="40">&amp;</type:modifier></type><name pos:line="518" pos:column="41">start</name></decl></param>, <param><decl><type><name pos:line="518" pos:column="48">int</name> <type:modifier pos:line="518" pos:column="52">&amp;</type:modifier></type><name pos:line="518" pos:column="53">end</name></decl></param>)</parameter_list> <specifier pos:line="518" pos:column="58">const</specifier> <block pos:line="518" pos:column="64">{
	<decl_stmt><decl><type><name pos:line="519" pos:column="9">int</name></type> <name pos:line="519" pos:column="13">lead</name> <init pos:line="519" pos:column="18">= <expr><name pos:line="519" pos:column="20">pos</name></expr></init></decl>;</decl_stmt>
	<while pos:line="520" pos:column="9">while <condition pos:line="520" pos:column="15">(<expr><op:operator pos:line="520" pos:column="16">(</op:operator><name pos:line="520" pos:column="17">lead</name><op:operator pos:line="520" pos:column="21">&gt;</op:operator><lit:literal type="number" pos:line="520" pos:column="22">0</lit:literal><op:operator pos:line="520" pos:column="23">)</op:operator> <op:operator pos:line="520" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="520" pos:column="28">(</op:operator><name pos:line="520" pos:column="29">pos</name><op:operator pos:line="520" pos:column="32">-</op:operator><name pos:line="520" pos:column="33">lead</name> <op:operator pos:line="520" pos:column="38">&lt;</op:operator> <lit:literal type="number" pos:line="520" pos:column="40">4</lit:literal><op:operator pos:line="520" pos:column="41">)</op:operator> <op:operator pos:line="520" pos:column="43">&amp;&amp;</op:operator> <macro><name pos:line="520" pos:column="46">IsTrailByte</name><argument_list pos:line="520" pos:column="57">(<argument pos:line="520" pos:column="58">static_cast&lt;unsigned char&gt;(cb.CharAt(lead-1))</argument>)</argument_list></macro></expr>)</condition>
		<expr_stmt><expr><name pos:line="521" pos:column="17">lead</name><op:operator pos:line="521" pos:column="21">--</op:operator></expr>;</expr_stmt></while>
	<expr_stmt><expr><name pos:line="522" pos:column="9">start</name> <op:operator pos:line="522" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="522" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="523" pos:column="9">if <condition pos:line="523" pos:column="12">(<expr><name pos:line="523" pos:column="13">lead</name> <op:operator pos:line="523" pos:column="18">&gt;</op:operator> <lit:literal type="number" pos:line="523" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="523" pos:column="22"> <block pos:line="523" pos:column="23">{
		<expr_stmt><expr><name pos:line="524" pos:column="17">start</name> <op:operator pos:line="524" pos:column="23">=</op:operator> <name pos:line="524" pos:column="25">lead</name><op:operator pos:line="524" pos:column="29">-</op:operator><lit:literal type="number" pos:line="524" pos:column="30">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="526" pos:column="9">int</name></type> <name pos:line="526" pos:column="13">leadByte</name> <init pos:line="526" pos:column="22">= <expr><call><name><name pos:line="526" pos:column="24">static_cast</name><argument_list pos:line="526" pos:column="35">&lt;<argument><expr><name pos:line="526" pos:column="36">unsigned</name> <name pos:line="526" pos:column="45">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="526" pos:column="50">(<argument><expr><call><name><name pos:line="526" pos:column="51">cb</name><op:operator pos:line="526" pos:column="53">.</op:operator><name pos:line="526" pos:column="54">CharAt</name></name><argument_list pos:line="526" pos:column="60">(<argument><expr><name pos:line="526" pos:column="61">start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="527" pos:column="9">int</name></type> <name pos:line="527" pos:column="13">bytes</name> <init pos:line="527" pos:column="19">= <expr><call><name pos:line="527" pos:column="21">BytesFromLead</name><argument_list pos:line="527" pos:column="34">(<argument><expr><name pos:line="527" pos:column="35">leadByte</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="528" pos:column="9">if <condition pos:line="528" pos:column="12">(<expr><name pos:line="528" pos:column="13">bytes</name> <op:operator pos:line="528" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="528" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="528" pos:column="24"> <block pos:line="528" pos:column="25">{
		<return pos:line="529" pos:column="17">return <expr><lit:literal type="boolean" pos:line="529" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="530" pos:column="11">else <block pos:line="530" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="531" pos:column="17">int</name></type> <name pos:line="531" pos:column="21">trailBytes</name> <init pos:line="531" pos:column="32">= <expr><name pos:line="531" pos:column="34">bytes</name> <op:operator pos:line="531" pos:column="40">-</op:operator> <lit:literal type="number" pos:line="531" pos:column="42">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="532" pos:column="17">int</name></type> <name pos:line="532" pos:column="21">len</name> <init pos:line="532" pos:column="25">= <expr><name pos:line="532" pos:column="27">pos</name> <op:operator pos:line="532" pos:column="31">-</op:operator> <name pos:line="532" pos:column="33">lead</name> <op:operator pos:line="532" pos:column="38">+</op:operator> <lit:literal type="number" pos:line="532" pos:column="40">1</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="533" pos:column="17">if <condition pos:line="533" pos:column="20">(<expr><name pos:line="533" pos:column="21">len</name> <op:operator pos:line="533" pos:column="25">&gt;</op:operator> <name pos:line="533" pos:column="27">trailBytes</name></expr>)</condition><then pos:line="533" pos:column="38">
			<comment type="line" pos:line="534" pos:column="25">// pos too far from lead</comment>
			<return pos:line="535" pos:column="25">return <expr><lit:literal type="boolean" pos:line="535" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<comment type="line" pos:line="536" pos:column="17">// Check that there are enough trails for this lead</comment>
		<decl_stmt><decl><type><name pos:line="537" pos:column="17">int</name></type> <name pos:line="537" pos:column="21">trail</name> <init pos:line="537" pos:column="27">= <expr><name pos:line="537" pos:column="29">pos</name> <op:operator pos:line="537" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="537" pos:column="35">1</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="538" pos:column="17">while <condition pos:line="538" pos:column="23">(<expr><op:operator pos:line="538" pos:column="24">(</op:operator><name pos:line="538" pos:column="25">trail</name><op:operator pos:line="538" pos:column="30">-</op:operator><name pos:line="538" pos:column="31">lead</name><op:operator pos:line="538" pos:column="35">&lt;</op:operator><name pos:line="538" pos:column="36">trailBytes</name><op:operator pos:line="538" pos:column="46">)</op:operator> <op:operator pos:line="538" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="538" pos:column="51">(</op:operator><name pos:line="538" pos:column="52">trail</name> <op:operator pos:line="538" pos:column="58">&lt;</op:operator> <call><name pos:line="538" pos:column="60">Length</name><argument_list pos:line="538" pos:column="66">()</argument_list></call><op:operator pos:line="538" pos:column="68">)</op:operator></expr>)</condition> <block pos:line="538" pos:column="71">{
			<if pos:line="539" pos:column="25">if <condition pos:line="539" pos:column="28">(<expr><op:operator pos:line="539" pos:column="29">!</op:operator><macro><name pos:line="539" pos:column="30">IsTrailByte</name><argument_list pos:line="539" pos:column="41">(<argument pos:line="539" pos:column="42">static_cast&lt;unsigned char&gt;(cb.CharAt(trail))</argument>)</argument_list></macro></expr>)</condition><then pos:line="539" pos:column="88"> <block pos:line="539" pos:column="89">{
				<return pos:line="540" pos:column="33">return <expr><lit:literal type="boolean" pos:line="540" pos:column="40">false</lit:literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="542" pos:column="25">trail</name><op:operator pos:line="542" pos:column="30">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name pos:line="544" pos:column="17">end</name> <op:operator pos:line="544" pos:column="21">=</op:operator> <name pos:line="544" pos:column="23">start</name> <op:operator pos:line="544" pos:column="29">+</op:operator> <name pos:line="544" pos:column="31">bytes</name></expr>;</expr_stmt>
		<return pos:line="545" pos:column="17">return <expr><lit:literal type="boolean" pos:line="545" pos:column="24">true</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="549" pos:column="1">// Normalise a position so that it is not halfway through a two byte character.</comment>
<comment type="line" pos:line="550" pos:column="1">// This can occur in two situations -</comment>
<comment type="line" pos:line="551" pos:column="1">// When lines are terminated with \r\n pairs which should be treated as one character.</comment>
<comment type="line" pos:line="552" pos:column="1">// When displaying DBCS text such as Japanese.</comment>
<comment type="line" pos:line="553" pos:column="1">// If moving, move the position in the indicated direction.</comment>
<function><type><name pos:line="554" pos:column="1">int</name></type> <name><name pos:line="554" pos:column="5">Document</name><op:operator pos:line="554" pos:column="13">::</op:operator><name pos:line="554" pos:column="15">MovePositionOutsideChar</name></name><parameter_list pos:line="554" pos:column="38">(<param><decl><type><name pos:line="554" pos:column="39">int</name></type> <name pos:line="554" pos:column="43">pos</name></decl></param>, <param><decl><type><name pos:line="554" pos:column="48">int</name></type> <name pos:line="554" pos:column="52">moveDir</name></decl></param>, <param><decl><type><name pos:line="554" pos:column="61">bool</name></type> <name pos:line="554" pos:column="66">checkLineEnd</name></decl></param>)</parameter_list> <block pos:line="554" pos:column="80">{
	<comment type="line" pos:line="555" pos:column="9">//Platform::DebugPrintf("NoCRLF %d %d\n", pos, moveDir);</comment>
	<comment type="line" pos:line="556" pos:column="9">// If out of range, just return minimum/maximum value.</comment>
	<if pos:line="557" pos:column="9">if <condition pos:line="557" pos:column="12">(<expr><name pos:line="557" pos:column="13">pos</name> <op:operator pos:line="557" pos:column="17">&lt;=</op:operator> <lit:literal type="number" pos:line="557" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="557" pos:column="22">
		<return pos:line="558" pos:column="17">return <expr><lit:literal type="number" pos:line="558" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<if pos:line="559" pos:column="9">if <condition pos:line="559" pos:column="12">(<expr><name pos:line="559" pos:column="13">pos</name> <op:operator pos:line="559" pos:column="17">&gt;=</op:operator> <call><name pos:line="559" pos:column="20">Length</name><argument_list pos:line="559" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="559" pos:column="29">
		<return pos:line="560" pos:column="17">return <expr><call><name pos:line="560" pos:column="24">Length</name><argument_list pos:line="560" pos:column="30">()</argument_list></call></expr>;</return></then></if>

	<comment type="line" pos:line="562" pos:column="9">// PLATFORM_ASSERT(pos &gt; 0 &amp;&amp; pos &lt; Length());</comment>
	<if pos:line="563" pos:column="9">if <condition pos:line="563" pos:column="12">(<expr><name pos:line="563" pos:column="13">checkLineEnd</name> <op:operator pos:line="563" pos:column="26">&amp;&amp;</op:operator> <call><name pos:line="563" pos:column="29">IsCrLf</name><argument_list pos:line="563" pos:column="35">(<argument><expr><name pos:line="563" pos:column="36">pos</name> <op:operator pos:line="563" pos:column="40">-</op:operator> <lit:literal type="number" pos:line="563" pos:column="42">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="563" pos:column="45"> <block pos:line="563" pos:column="46">{
		<if pos:line="564" pos:column="17">if <condition pos:line="564" pos:column="20">(<expr><name pos:line="564" pos:column="21">moveDir</name> <op:operator pos:line="564" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="564" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="564" pos:column="33">
			<return pos:line="565" pos:column="25">return <expr><name pos:line="565" pos:column="32">pos</name> <op:operator pos:line="565" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="565" pos:column="38">1</lit:literal></expr>;</return></then>
		<else pos:line="566" pos:column="17">else
			<return pos:line="567" pos:column="25">return <expr><name pos:line="567" pos:column="32">pos</name> <op:operator pos:line="567" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="567" pos:column="38">1</lit:literal></expr>;</return></else></if>
	}</block></then></if>

	<if pos:line="570" pos:column="9">if <condition pos:line="570" pos:column="12">(<expr><name pos:line="570" pos:column="13">dbcsCodePage</name></expr>)</condition><then pos:line="570" pos:column="26"> <block pos:line="570" pos:column="27">{
		<if pos:line="571" pos:column="17">if <condition pos:line="571" pos:column="20">(<expr><name pos:line="571" pos:column="21">SC_CP_UTF8</name> <op:operator pos:line="571" pos:column="32">==</op:operator> <name pos:line="571" pos:column="35">dbcsCodePage</name></expr>)</condition><then pos:line="571" pos:column="48"> <block pos:line="571" pos:column="49">{
			<decl_stmt><decl><type><name pos:line="572" pos:column="25">unsigned</name> <name pos:line="572" pos:column="34">char</name></type> <name pos:line="572" pos:column="39">ch</name> <init pos:line="572" pos:column="42">= <expr><call><name><name pos:line="572" pos:column="44">static_cast</name><argument_list pos:line="572" pos:column="55">&lt;<argument><expr><name pos:line="572" pos:column="56">unsigned</name> <name pos:line="572" pos:column="65">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="572" pos:column="70">(<argument><expr><call><name><name pos:line="572" pos:column="71">cb</name><op:operator pos:line="572" pos:column="73">.</op:operator><name pos:line="572" pos:column="74">CharAt</name></name><argument_list pos:line="572" pos:column="80">(<argument><expr><name pos:line="572" pos:column="81">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="573" pos:column="25">int</name></type> <name pos:line="573" pos:column="29">startUTF</name> <init pos:line="573" pos:column="38">= <expr><name pos:line="573" pos:column="40">pos</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="574" pos:column="25">int</name></type> <name pos:line="574" pos:column="29">endUTF</name> <init pos:line="574" pos:column="36">= <expr><name pos:line="574" pos:column="38">pos</name></expr></init></decl>;</decl_stmt>
			<if pos:line="575" pos:column="25">if <condition pos:line="575" pos:column="28">(<expr><call><name pos:line="575" pos:column="29">IsTrailByte</name><argument_list pos:line="575" pos:column="40">(<argument><expr><name pos:line="575" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="575" pos:column="45">&amp;&amp;</op:operator> <call><name pos:line="575" pos:column="48">InGoodUTF8</name><argument_list pos:line="575" pos:column="58">(<argument><expr><name pos:line="575" pos:column="59">pos</name></expr></argument>, <argument><expr><name pos:line="575" pos:column="64">startUTF</name></expr></argument>, <argument><expr><name pos:line="575" pos:column="74">endUTF</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="575" pos:column="82"> <block pos:line="575" pos:column="83">{
				<comment type="line" pos:line="576" pos:column="33">// ch is a trail byte within a UTF-8 character</comment>
				<if pos:line="577" pos:column="33">if <condition pos:line="577" pos:column="36">(<expr><name pos:line="577" pos:column="37">moveDir</name> <op:operator pos:line="577" pos:column="45">&gt;</op:operator> <lit:literal type="number" pos:line="577" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="577" pos:column="49">
					<expr_stmt><expr><name pos:line="578" pos:column="41">pos</name> <op:operator pos:line="578" pos:column="45">=</op:operator> <name pos:line="578" pos:column="47">endUTF</name></expr>;</expr_stmt></then>
				<else pos:line="579" pos:column="33">else
					<expr_stmt><expr><name pos:line="580" pos:column="41">pos</name> <op:operator pos:line="580" pos:column="45">=</op:operator> <name pos:line="580" pos:column="47">startUTF</name></expr>;</expr_stmt></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="582" pos:column="19">else <block pos:line="582" pos:column="24">{
			<comment type="line" pos:line="583" pos:column="25">// Anchor DBCS calculations at start of line because start of line can</comment>
			<comment type="line" pos:line="584" pos:column="25">// not be a DBCS trail byte.</comment>
			<decl_stmt><decl><type><name pos:line="585" pos:column="25">int</name></type> <name pos:line="585" pos:column="29">posStartLine</name> <init pos:line="585" pos:column="42">= <expr><call><name pos:line="585" pos:column="44">LineStart</name><argument_list pos:line="585" pos:column="53">(<argument><expr><call><name pos:line="585" pos:column="54">LineFromPosition</name><argument_list pos:line="585" pos:column="70">(<argument><expr><name pos:line="585" pos:column="71">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="586" pos:column="25">if <condition pos:line="586" pos:column="28">(<expr><name pos:line="586" pos:column="29">pos</name> <op:operator pos:line="586" pos:column="33">==</op:operator> <name pos:line="586" pos:column="36">posStartLine</name></expr>)</condition><then pos:line="586" pos:column="49">
				<return pos:line="587" pos:column="33">return <expr><name pos:line="587" pos:column="40">pos</name></expr>;</return></then></if>

			<comment type="line" pos:line="589" pos:column="25">// Step back until a non-lead-byte is found.</comment>
			<decl_stmt><decl><type><name pos:line="590" pos:column="25">int</name></type> <name pos:line="590" pos:column="29">posCheck</name> <init pos:line="590" pos:column="38">= <expr><name pos:line="590" pos:column="40">pos</name></expr></init></decl>;</decl_stmt>
			<while pos:line="591" pos:column="25">while <condition pos:line="591" pos:column="31">(<expr><op:operator pos:line="591" pos:column="32">(</op:operator><name pos:line="591" pos:column="33">posCheck</name> <op:operator pos:line="591" pos:column="42">&gt;</op:operator> <name pos:line="591" pos:column="44">posStartLine</name><op:operator pos:line="591" pos:column="56">)</op:operator> <op:operator pos:line="591" pos:column="58">&amp;&amp;</op:operator> <call><name pos:line="591" pos:column="61">IsDBCSLeadByte</name><argument_list pos:line="591" pos:column="75">(<argument><expr><call><name><name pos:line="591" pos:column="76">cb</name><op:operator pos:line="591" pos:column="78">.</op:operator><name pos:line="591" pos:column="79">CharAt</name></name><argument_list pos:line="591" pos:column="85">(<argument><expr><name pos:line="591" pos:column="86">posCheck</name><op:operator pos:line="591" pos:column="94">-</op:operator><lit:literal type="number" pos:line="591" pos:column="95">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<expr_stmt><expr><name pos:line="592" pos:column="33">posCheck</name><op:operator pos:line="592" pos:column="41">--</op:operator></expr>;</expr_stmt></while>

			<comment type="line" pos:line="594" pos:column="25">// Check from known start of character.</comment>
			<while pos:line="595" pos:column="25">while <condition pos:line="595" pos:column="31">(<expr><name pos:line="595" pos:column="32">posCheck</name> <op:operator pos:line="595" pos:column="41">&lt;</op:operator> <name pos:line="595" pos:column="43">pos</name></expr>)</condition> <block pos:line="595" pos:column="48">{
				<decl_stmt><decl><type><name pos:line="596" pos:column="33">int</name></type> <name pos:line="596" pos:column="37">mbsize</name> <init pos:line="596" pos:column="44">= <expr><call><name pos:line="596" pos:column="46">IsDBCSLeadByte</name><argument_list pos:line="596" pos:column="60">(<argument><expr><call><name><name pos:line="596" pos:column="61">cb</name><op:operator pos:line="596" pos:column="63">.</op:operator><name pos:line="596" pos:column="64">CharAt</name></name><argument_list pos:line="596" pos:column="70">(<argument><expr><name pos:line="596" pos:column="71">posCheck</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="596" pos:column="82">?</op:operator> <lit:literal type="number" pos:line="596" pos:column="84">2</lit:literal> <op:operator pos:line="596" pos:column="86">:</op:operator> <lit:literal type="number" pos:line="596" pos:column="88">1</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="597" pos:column="33">if <condition pos:line="597" pos:column="36">(<expr><name pos:line="597" pos:column="37">posCheck</name> <op:operator pos:line="597" pos:column="46">+</op:operator> <name pos:line="597" pos:column="48">mbsize</name> <op:operator pos:line="597" pos:column="55">==</op:operator> <name pos:line="597" pos:column="58">pos</name></expr>)</condition><then pos:line="597" pos:column="62"> <block pos:line="597" pos:column="63">{
					<return pos:line="598" pos:column="41">return <expr><name pos:line="598" pos:column="48">pos</name></expr>;</return>
				}</block></then> <else pos:line="599" pos:column="35">else <if pos:line="599" pos:column="40">if <condition pos:line="599" pos:column="43">(<expr><name pos:line="599" pos:column="44">posCheck</name> <op:operator pos:line="599" pos:column="53">+</op:operator> <name pos:line="599" pos:column="55">mbsize</name> <op:operator pos:line="599" pos:column="62">&gt;</op:operator> <name pos:line="599" pos:column="64">pos</name></expr>)</condition><then pos:line="599" pos:column="68"> <block pos:line="599" pos:column="69">{
					<if pos:line="600" pos:column="41">if <condition pos:line="600" pos:column="44">(<expr><name pos:line="600" pos:column="45">moveDir</name> <op:operator pos:line="600" pos:column="53">&gt;</op:operator> <lit:literal type="number" pos:line="600" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="600" pos:column="57"> <block pos:line="600" pos:column="58">{
						<return pos:line="601" pos:column="49">return <expr><name pos:line="601" pos:column="56">posCheck</name> <op:operator pos:line="601" pos:column="65">+</op:operator> <name pos:line="601" pos:column="67">mbsize</name></expr>;</return>
					}</block></then> <else pos:line="602" pos:column="43">else <block pos:line="602" pos:column="48">{
						<return pos:line="603" pos:column="49">return <expr><name pos:line="603" pos:column="56">posCheck</name></expr>;</return>
					}</block></else></if>
				}</block></then></if></else></if>
				<expr_stmt><expr><name pos:line="606" pos:column="33">posCheck</name> <op:operator pos:line="606" pos:column="42">+=</op:operator> <name pos:line="606" pos:column="45">mbsize</name></expr>;</expr_stmt>
			}</block></while>
		}</block></else></if>
	}</block></then></if>

	<return pos:line="611" pos:column="9">return <expr><name pos:line="611" pos:column="16">pos</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="614" pos:column="1">// NextPosition moves between valid positions - it can not handle a position in the middle of a</comment>
<comment type="line" pos:line="615" pos:column="1">// multi-byte character. It is used to iterate through text more efficiently than MovePositionOutsideChar.</comment>
<comment type="line" pos:line="616" pos:column="1">// A \r\n pair is treated as two characters.</comment>
<function><type><name pos:line="617" pos:column="1">int</name></type> <name><name pos:line="617" pos:column="5">Document</name><op:operator pos:line="617" pos:column="13">::</op:operator><name pos:line="617" pos:column="15">NextPosition</name></name><parameter_list pos:line="617" pos:column="27">(<param><decl><type><name pos:line="617" pos:column="28">int</name></type> <name pos:line="617" pos:column="32">pos</name></decl></param>, <param><decl><type><name pos:line="617" pos:column="37">int</name></type> <name pos:line="617" pos:column="41">moveDir</name></decl></param>)</parameter_list> <specifier pos:line="617" pos:column="50">const</specifier> <block pos:line="617" pos:column="56">{
	<comment type="line" pos:line="618" pos:column="9">// If out of range, just return minimum/maximum value.</comment>
	<decl_stmt><decl><type><name pos:line="619" pos:column="9">int</name></type> <name pos:line="619" pos:column="13">increment</name> <init pos:line="619" pos:column="23">= <expr><op:operator pos:line="619" pos:column="25">(</op:operator><name pos:line="619" pos:column="26">moveDir</name> <op:operator pos:line="619" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="619" pos:column="36">0</lit:literal><op:operator pos:line="619" pos:column="37">)</op:operator> <op:operator pos:line="619" pos:column="39">?</op:operator> <lit:literal type="number" pos:line="619" pos:column="41">1</lit:literal> <op:operator pos:line="619" pos:column="43">:</op:operator> <op:operator pos:line="619" pos:column="45">-</op:operator><lit:literal type="number" pos:line="619" pos:column="46">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="620" pos:column="9">if <condition pos:line="620" pos:column="12">(<expr><name pos:line="620" pos:column="13">pos</name> <op:operator pos:line="620" pos:column="17">+</op:operator> <name pos:line="620" pos:column="19">increment</name> <op:operator pos:line="620" pos:column="29">&lt;=</op:operator> <lit:literal type="number" pos:line="620" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="620" pos:column="34">
		<return pos:line="621" pos:column="17">return <expr><lit:literal type="number" pos:line="621" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<if pos:line="622" pos:column="9">if <condition pos:line="622" pos:column="12">(<expr><name pos:line="622" pos:column="13">pos</name> <op:operator pos:line="622" pos:column="17">+</op:operator> <name pos:line="622" pos:column="19">increment</name> <op:operator pos:line="622" pos:column="29">&gt;=</op:operator> <call><name pos:line="622" pos:column="32">Length</name><argument_list pos:line="622" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="622" pos:column="41">
		<return pos:line="623" pos:column="17">return <expr><call><name pos:line="623" pos:column="24">Length</name><argument_list pos:line="623" pos:column="30">()</argument_list></call></expr>;</return></then></if>

	<if pos:line="625" pos:column="9">if <condition pos:line="625" pos:column="12">(<expr><name pos:line="625" pos:column="13">dbcsCodePage</name></expr>)</condition><then pos:line="625" pos:column="26"> <block pos:line="625" pos:column="27">{
		<if pos:line="626" pos:column="17">if <condition pos:line="626" pos:column="20">(<expr><name pos:line="626" pos:column="21">SC_CP_UTF8</name> <op:operator pos:line="626" pos:column="32">==</op:operator> <name pos:line="626" pos:column="35">dbcsCodePage</name></expr>)</condition><then pos:line="626" pos:column="48"> <block pos:line="626" pos:column="49">{
			<expr_stmt><expr><name pos:line="627" pos:column="25">pos</name> <op:operator pos:line="627" pos:column="29">+=</op:operator> <name pos:line="627" pos:column="32">increment</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="628" pos:column="25">unsigned</name> <name pos:line="628" pos:column="34">char</name></type> <name pos:line="628" pos:column="39">ch</name> <init pos:line="628" pos:column="42">= <expr><call><name><name pos:line="628" pos:column="44">static_cast</name><argument_list pos:line="628" pos:column="55">&lt;<argument><expr><name pos:line="628" pos:column="56">unsigned</name> <name pos:line="628" pos:column="65">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="628" pos:column="70">(<argument><expr><call><name><name pos:line="628" pos:column="71">cb</name><op:operator pos:line="628" pos:column="73">.</op:operator><name pos:line="628" pos:column="74">CharAt</name></name><argument_list pos:line="628" pos:column="80">(<argument><expr><name pos:line="628" pos:column="81">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="629" pos:column="25">int</name></type> <name pos:line="629" pos:column="29">startUTF</name> <init pos:line="629" pos:column="38">= <expr><name pos:line="629" pos:column="40">pos</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="630" pos:column="25">int</name></type> <name pos:line="630" pos:column="29">endUTF</name> <init pos:line="630" pos:column="36">= <expr><name pos:line="630" pos:column="38">pos</name></expr></init></decl>;</decl_stmt>
			<if pos:line="631" pos:column="25">if <condition pos:line="631" pos:column="28">(<expr><call><name pos:line="631" pos:column="29">IsTrailByte</name><argument_list pos:line="631" pos:column="40">(<argument><expr><name pos:line="631" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="631" pos:column="45">&amp;&amp;</op:operator> <call><name pos:line="631" pos:column="48">InGoodUTF8</name><argument_list pos:line="631" pos:column="58">(<argument><expr><name pos:line="631" pos:column="59">pos</name></expr></argument>, <argument><expr><name pos:line="631" pos:column="64">startUTF</name></expr></argument>, <argument><expr><name pos:line="631" pos:column="74">endUTF</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="631" pos:column="82"> <block pos:line="631" pos:column="83">{
				<comment type="line" pos:line="632" pos:column="33">// ch is a trail byte within a UTF-8 character</comment>
				<if pos:line="633" pos:column="33">if <condition pos:line="633" pos:column="36">(<expr><name pos:line="633" pos:column="37">moveDir</name> <op:operator pos:line="633" pos:column="45">&gt;</op:operator> <lit:literal type="number" pos:line="633" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="633" pos:column="49">
					<expr_stmt><expr><name pos:line="634" pos:column="41">pos</name> <op:operator pos:line="634" pos:column="45">=</op:operator> <name pos:line="634" pos:column="47">endUTF</name></expr>;</expr_stmt></then>
				<else pos:line="635" pos:column="33">else
					<expr_stmt><expr><name pos:line="636" pos:column="41">pos</name> <op:operator pos:line="636" pos:column="45">=</op:operator> <name pos:line="636" pos:column="47">startUTF</name></expr>;</expr_stmt></else></if>
			}</block></then></if>
		}</block></then> <else pos:line="638" pos:column="19">else <block pos:line="638" pos:column="24">{
			<if pos:line="639" pos:column="25">if <condition pos:line="639" pos:column="28">(<expr><name pos:line="639" pos:column="29">moveDir</name> <op:operator pos:line="639" pos:column="37">&gt;</op:operator> <lit:literal type="number" pos:line="639" pos:column="39">0</lit:literal></expr>)</condition><then pos:line="639" pos:column="41"> <block pos:line="639" pos:column="42">{
				<decl_stmt><decl><type><name pos:line="640" pos:column="33">int</name></type> <name pos:line="640" pos:column="37">mbsize</name> <init pos:line="640" pos:column="44">= <expr><call><name pos:line="640" pos:column="46">IsDBCSLeadByte</name><argument_list pos:line="640" pos:column="60">(<argument><expr><call><name><name pos:line="640" pos:column="61">cb</name><op:operator pos:line="640" pos:column="63">.</op:operator><name pos:line="640" pos:column="64">CharAt</name></name><argument_list pos:line="640" pos:column="70">(<argument><expr><name pos:line="640" pos:column="71">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="640" pos:column="77">?</op:operator> <lit:literal type="number" pos:line="640" pos:column="79">2</lit:literal> <op:operator pos:line="640" pos:column="81">:</op:operator> <lit:literal type="number" pos:line="640" pos:column="83">1</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="641" pos:column="33">pos</name> <op:operator pos:line="641" pos:column="37">+=</op:operator> <name pos:line="641" pos:column="40">mbsize</name></expr>;</expr_stmt>
				<if pos:line="642" pos:column="33">if <condition pos:line="642" pos:column="36">(<expr><name pos:line="642" pos:column="37">pos</name> <op:operator pos:line="642" pos:column="41">&gt;</op:operator> <call><name pos:line="642" pos:column="43">Length</name><argument_list pos:line="642" pos:column="49">()</argument_list></call></expr>)</condition><then pos:line="642" pos:column="52">
					<expr_stmt><expr><name pos:line="643" pos:column="41">pos</name> <op:operator pos:line="643" pos:column="45">=</op:operator> <call><name pos:line="643" pos:column="47">Length</name><argument_list pos:line="643" pos:column="53">()</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="644" pos:column="27">else <block pos:line="644" pos:column="32">{
				<comment type="line" pos:line="645" pos:column="33">// Anchor DBCS calculations at start of line because start of line can</comment>
				<comment type="line" pos:line="646" pos:column="33">// not be a DBCS trail byte.</comment>
				<decl_stmt><decl><type><name pos:line="647" pos:column="33">int</name></type> <name pos:line="647" pos:column="37">posStartLine</name> <init pos:line="647" pos:column="50">= <expr><call><name pos:line="647" pos:column="52">LineStart</name><argument_list pos:line="647" pos:column="61">(<argument><expr><call><name pos:line="647" pos:column="62">LineFromPosition</name><argument_list pos:line="647" pos:column="78">(<argument><expr><name pos:line="647" pos:column="79">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="648" pos:column="33">// See http://msdn.microsoft.com/en-us/library/cc194792%28v=MSDN.10%29.aspx</comment>
				<comment type="line" pos:line="649" pos:column="33">// http://msdn.microsoft.com/en-us/library/cc194790.aspx</comment>
				<if pos:line="650" pos:column="33">if <condition pos:line="650" pos:column="36">(<expr><op:operator pos:line="650" pos:column="37">(</op:operator><name pos:line="650" pos:column="38">pos</name> <op:operator pos:line="650" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="650" pos:column="44">1</lit:literal><op:operator pos:line="650" pos:column="45">)</op:operator> <op:operator pos:line="650" pos:column="47">&lt;=</op:operator> <name pos:line="650" pos:column="50">posStartLine</name></expr>)</condition><then pos:line="650" pos:column="63"> <block pos:line="650" pos:column="64">{
					<return pos:line="651" pos:column="41">return <expr><name pos:line="651" pos:column="48">pos</name> <op:operator pos:line="651" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="651" pos:column="54">1</lit:literal></expr>;</return>
				}</block></then> <else pos:line="652" pos:column="35">else <if pos:line="652" pos:column="40">if <condition pos:line="652" pos:column="43">(<expr><call><name pos:line="652" pos:column="44">IsDBCSLeadByte</name><argument_list pos:line="652" pos:column="58">(<argument><expr><call><name><name pos:line="652" pos:column="59">cb</name><op:operator pos:line="652" pos:column="61">.</op:operator><name pos:line="652" pos:column="62">CharAt</name></name><argument_list pos:line="652" pos:column="68">(<argument><expr><name pos:line="652" pos:column="69">pos</name> <op:operator pos:line="652" pos:column="73">-</op:operator> <lit:literal type="number" pos:line="652" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="652" pos:column="79"> <block pos:line="652" pos:column="80">{
					<comment type="line" pos:line="653" pos:column="41">// Must actually be trail byte</comment>
					<return pos:line="654" pos:column="41">return <expr><name pos:line="654" pos:column="48">pos</name> <op:operator pos:line="654" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="654" pos:column="54">2</lit:literal></expr>;</return>
				}</block></then> <else pos:line="655" pos:column="35">else <block pos:line="655" pos:column="40">{
					<comment type="line" pos:line="656" pos:column="41">// Otherwise, step back until a non-lead-byte is found.</comment>
					<decl_stmt><decl><type><name pos:line="657" pos:column="41">int</name></type> <name pos:line="657" pos:column="45">posTemp</name> <init pos:line="657" pos:column="53">= <expr><name pos:line="657" pos:column="55">pos</name> <op:operator pos:line="657" pos:column="59">-</op:operator> <lit:literal type="number" pos:line="657" pos:column="61">1</lit:literal></expr></init></decl>;</decl_stmt>
					<while pos:line="658" pos:column="41">while <condition pos:line="658" pos:column="47">(<expr><name pos:line="658" pos:column="48">posStartLine</name> <op:operator pos:line="658" pos:column="61">&lt;=</op:operator> <op:operator pos:line="658" pos:column="64">--</op:operator><name pos:line="658" pos:column="66">posTemp</name> <op:operator pos:line="658" pos:column="74">&amp;&amp;</op:operator> <call><name pos:line="658" pos:column="77">IsDBCSLeadByte</name><argument_list pos:line="658" pos:column="91">(<argument><expr><call><name><name pos:line="658" pos:column="92">cb</name><op:operator pos:line="658" pos:column="94">.</op:operator><name pos:line="658" pos:column="95">CharAt</name></name><argument_list pos:line="658" pos:column="101">(<argument><expr><name pos:line="658" pos:column="102">posTemp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
						<empty_stmt pos:line="659" pos:column="49">;</empty_stmt></while>
					<comment type="line" pos:line="660" pos:column="41">// Now posTemp+1 must point to the beginning of a character,</comment>
					<comment type="line" pos:line="661" pos:column="41">// so figure out whether we went back an even or an odd</comment>
					<comment type="line" pos:line="662" pos:column="41">// number of bytes and go back 1 or 2 bytes, respectively.</comment>
					<return pos:line="663" pos:column="41">return <expr><op:operator pos:line="663" pos:column="48">(</op:operator><name pos:line="663" pos:column="49">pos</name> <op:operator pos:line="663" pos:column="53">-</op:operator> <lit:literal type="number" pos:line="663" pos:column="55">1</lit:literal> <op:operator pos:line="663" pos:column="57">-</op:operator> <op:operator pos:line="663" pos:column="59">(</op:operator><op:operator pos:line="663" pos:column="60">(</op:operator><name pos:line="663" pos:column="61">pos</name> <op:operator pos:line="663" pos:column="65">-</op:operator> <name pos:line="663" pos:column="67">posTemp</name><op:operator pos:line="663" pos:column="74">)</op:operator> <op:operator pos:line="663" pos:column="76">&amp;</op:operator> <lit:literal type="number" pos:line="663" pos:column="78">1</lit:literal><op:operator pos:line="663" pos:column="79">)</op:operator><op:operator pos:line="663" pos:column="80">)</op:operator></expr>;</return>
				}</block></else></if></else></if>
			}</block></else></if>
		}</block></else></if>
	}</block></then> <else pos:line="667" pos:column="11">else <block pos:line="667" pos:column="16">{
		<expr_stmt><expr><name pos:line="668" pos:column="17">pos</name> <op:operator pos:line="668" pos:column="21">+=</op:operator> <name pos:line="668" pos:column="24">increment</name></expr>;</expr_stmt>
	}</block></else></if>

	<return pos:line="671" pos:column="9">return <expr><name pos:line="671" pos:column="16">pos</name></expr>;</return>
}</block></function>

<function><type><name pos:line="674" pos:column="1">bool</name></type> <name><name pos:line="674" pos:column="6">Document</name><op:operator pos:line="674" pos:column="14">::</op:operator><name pos:line="674" pos:column="16">NextCharacter</name></name><parameter_list pos:line="674" pos:column="29">(<param><decl><type><name pos:line="674" pos:column="30">int</name> <type:modifier pos:line="674" pos:column="34">&amp;</type:modifier></type><name pos:line="674" pos:column="35">pos</name></decl></param>, <param><decl><type><name pos:line="674" pos:column="40">int</name></type> <name pos:line="674" pos:column="44">moveDir</name></decl></param>)</parameter_list> <block pos:line="674" pos:column="53">{
	<comment type="line" pos:line="675" pos:column="9">// Returns true if pos changed</comment>
	<decl_stmt><decl><type><name pos:line="676" pos:column="9">int</name></type> <name pos:line="676" pos:column="13">posNext</name> <init pos:line="676" pos:column="21">= <expr><call><name pos:line="676" pos:column="23">NextPosition</name><argument_list pos:line="676" pos:column="35">(<argument><expr><name pos:line="676" pos:column="36">pos</name></expr></argument>, <argument><expr><name pos:line="676" pos:column="41">moveDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="677" pos:column="9">if <condition pos:line="677" pos:column="12">(<expr><name pos:line="677" pos:column="13">posNext</name> <op:operator pos:line="677" pos:column="21">==</op:operator> <name pos:line="677" pos:column="24">pos</name></expr>)</condition><then pos:line="677" pos:column="28"> <block pos:line="677" pos:column="29">{
		<return pos:line="678" pos:column="17">return <expr><lit:literal type="boolean" pos:line="678" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="679" pos:column="11">else <block pos:line="679" pos:column="16">{
		<expr_stmt><expr><name pos:line="680" pos:column="17">pos</name> <op:operator pos:line="680" pos:column="21">=</op:operator> <name pos:line="680" pos:column="23">posNext</name></expr>;</expr_stmt>
		<return pos:line="681" pos:column="17">return <expr><lit:literal type="boolean" pos:line="681" pos:column="24">true</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="685" pos:column="1">int</name> <name pos:line="685" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="685" pos:column="16">Document</name><op:operator pos:line="685" pos:column="24">::</op:operator><name pos:line="685" pos:column="26">CodePage</name></name><parameter_list pos:line="685" pos:column="34">()</parameter_list> <specifier pos:line="685" pos:column="37">const</specifier> <block pos:line="685" pos:column="43">{
	<return pos:line="686" pos:column="9">return <expr><name pos:line="686" pos:column="16">dbcsCodePage</name></expr>;</return>
}</block></function>

<function><type><name pos:line="689" pos:column="1">bool</name> <name pos:line="689" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="689" pos:column="17">Document</name><op:operator pos:line="689" pos:column="25">::</op:operator><name pos:line="689" pos:column="27">IsDBCSLeadByte</name></name><parameter_list pos:line="689" pos:column="41">(<param><decl><type><name pos:line="689" pos:column="42">char</name></type> <name pos:line="689" pos:column="47">ch</name></decl></param>)</parameter_list> <specifier pos:line="689" pos:column="51">const</specifier> <block pos:line="689" pos:column="57">{
	<comment type="line" pos:line="690" pos:column="9">// Byte ranges found in Wikipedia articles with relevant search strings in each case</comment>
	<decl_stmt><decl><type><name pos:line="691" pos:column="9">unsigned</name> <name pos:line="691" pos:column="18">char</name></type> <name pos:line="691" pos:column="23">uch</name> <init pos:line="691" pos:column="27">= <expr><call><name><name pos:line="691" pos:column="29">static_cast</name><argument_list pos:line="691" pos:column="40">&lt;<argument><expr><name pos:line="691" pos:column="41">unsigned</name> <name pos:line="691" pos:column="50">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="691" pos:column="55">(<argument><expr><name pos:line="691" pos:column="56">ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<switch pos:line="692" pos:column="9">switch <condition pos:line="692" pos:column="16">(<expr><name pos:line="692" pos:column="17">dbcsCodePage</name></expr>)</condition> <block pos:line="692" pos:column="31">{
		<case pos:line="693" pos:column="17">case <expr><lit:literal type="number" pos:line="693" pos:column="22">932</lit:literal></expr>:
			<comment type="line" pos:line="694" pos:column="25">// Shift_jis</comment>
			<return pos:line="695" pos:column="25">return <expr><op:operator pos:line="695" pos:column="32">(</op:operator><op:operator pos:line="695" pos:column="33">(</op:operator><name pos:line="695" pos:column="34">uch</name> <op:operator pos:line="695" pos:column="38">&gt;=</op:operator> <lit:literal type="number" pos:line="695" pos:column="41">0x81</lit:literal><op:operator pos:line="695" pos:column="45">)</op:operator> <op:operator pos:line="695" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="695" pos:column="50">(</op:operator><name pos:line="695" pos:column="51">uch</name> <op:operator pos:line="695" pos:column="55">&lt;=</op:operator> <lit:literal type="number" pos:line="695" pos:column="58">0x9F</lit:literal><op:operator pos:line="695" pos:column="62">)</op:operator><op:operator pos:line="695" pos:column="63">)</op:operator> <op:operator pos:line="695" pos:column="65">||</op:operator>
				<op:operator pos:line="696" pos:column="33">(</op:operator><op:operator pos:line="696" pos:column="34">(</op:operator><name pos:line="696" pos:column="35">uch</name> <op:operator pos:line="696" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="696" pos:column="42">0xE0</lit:literal><op:operator pos:line="696" pos:column="46">)</op:operator> <op:operator pos:line="696" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="696" pos:column="51">(</op:operator><name pos:line="696" pos:column="52">uch</name> <op:operator pos:line="696" pos:column="56">&lt;=</op:operator> <lit:literal type="number" pos:line="696" pos:column="59">0xEF</lit:literal><op:operator pos:line="696" pos:column="63">)</op:operator><op:operator pos:line="696" pos:column="64">)</op:operator></expr>;</return>
		</case><case pos:line="697" pos:column="17">case <expr><lit:literal type="number" pos:line="697" pos:column="22">936</lit:literal></expr>:
			<comment type="line" pos:line="698" pos:column="25">// GBK</comment>
			<return pos:line="699" pos:column="25">return <expr><op:operator pos:line="699" pos:column="32">(</op:operator><name pos:line="699" pos:column="33">uch</name> <op:operator pos:line="699" pos:column="37">&gt;=</op:operator> <lit:literal type="number" pos:line="699" pos:column="40">0x81</lit:literal><op:operator pos:line="699" pos:column="44">)</op:operator> <op:operator pos:line="699" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="699" pos:column="49">(</op:operator><name pos:line="699" pos:column="50">uch</name> <op:operator pos:line="699" pos:column="54">&lt;=</op:operator> <lit:literal type="number" pos:line="699" pos:column="57">0xFE</lit:literal><op:operator pos:line="699" pos:column="61">)</op:operator></expr>;</return>
		</case><case pos:line="700" pos:column="17">case <expr><lit:literal type="number" pos:line="700" pos:column="22">949</lit:literal></expr>:
			<comment type="line" pos:line="701" pos:column="25">// Korean Wansung KS C-5601-1987</comment>
			<return pos:line="702" pos:column="25">return <expr><op:operator pos:line="702" pos:column="32">(</op:operator><name pos:line="702" pos:column="33">uch</name> <op:operator pos:line="702" pos:column="37">&gt;=</op:operator> <lit:literal type="number" pos:line="702" pos:column="40">0x81</lit:literal><op:operator pos:line="702" pos:column="44">)</op:operator> <op:operator pos:line="702" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="702" pos:column="49">(</op:operator><name pos:line="702" pos:column="50">uch</name> <op:operator pos:line="702" pos:column="54">&lt;=</op:operator> <lit:literal type="number" pos:line="702" pos:column="57">0xFE</lit:literal><op:operator pos:line="702" pos:column="61">)</op:operator></expr>;</return>
		</case><case pos:line="703" pos:column="17">case <expr><lit:literal type="number" pos:line="703" pos:column="22">950</lit:literal></expr>:
			<comment type="line" pos:line="704" pos:column="25">// Big5</comment>
			<return pos:line="705" pos:column="25">return <expr><op:operator pos:line="705" pos:column="32">(</op:operator><name pos:line="705" pos:column="33">uch</name> <op:operator pos:line="705" pos:column="37">&gt;=</op:operator> <lit:literal type="number" pos:line="705" pos:column="40">0x81</lit:literal><op:operator pos:line="705" pos:column="44">)</op:operator> <op:operator pos:line="705" pos:column="46">&amp;&amp;</op:operator> <op:operator pos:line="705" pos:column="49">(</op:operator><name pos:line="705" pos:column="50">uch</name> <op:operator pos:line="705" pos:column="54">&lt;=</op:operator> <lit:literal type="number" pos:line="705" pos:column="57">0xFE</lit:literal><op:operator pos:line="705" pos:column="61">)</op:operator></expr>;</return>
		</case><case pos:line="706" pos:column="17">case <expr><lit:literal type="number" pos:line="706" pos:column="22">1361</lit:literal></expr>:
			<comment type="line" pos:line="707" pos:column="25">// Korean Johab KS C-5601-1992</comment>
			<return pos:line="708" pos:column="25">return
				<expr><op:operator pos:line="709" pos:column="33">(</op:operator><op:operator pos:line="709" pos:column="34">(</op:operator><name pos:line="709" pos:column="35">uch</name> <op:operator pos:line="709" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="709" pos:column="42">0x84</lit:literal><op:operator pos:line="709" pos:column="46">)</op:operator> <op:operator pos:line="709" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="709" pos:column="51">(</op:operator><name pos:line="709" pos:column="52">uch</name> <op:operator pos:line="709" pos:column="56">&lt;=</op:operator> <lit:literal type="number" pos:line="709" pos:column="59">0xD3</lit:literal><op:operator pos:line="709" pos:column="63">)</op:operator><op:operator pos:line="709" pos:column="64">)</op:operator> <op:operator pos:line="709" pos:column="66">||</op:operator>
				<op:operator pos:line="710" pos:column="33">(</op:operator><op:operator pos:line="710" pos:column="34">(</op:operator><name pos:line="710" pos:column="35">uch</name> <op:operator pos:line="710" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="710" pos:column="42">0xD8</lit:literal><op:operator pos:line="710" pos:column="46">)</op:operator> <op:operator pos:line="710" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="710" pos:column="51">(</op:operator><name pos:line="710" pos:column="52">uch</name> <op:operator pos:line="710" pos:column="56">&lt;=</op:operator> <lit:literal type="number" pos:line="710" pos:column="59">0xDE</lit:literal><op:operator pos:line="710" pos:column="63">)</op:operator><op:operator pos:line="710" pos:column="64">)</op:operator> <op:operator pos:line="710" pos:column="66">||</op:operator>
				<op:operator pos:line="711" pos:column="33">(</op:operator><op:operator pos:line="711" pos:column="34">(</op:operator><name pos:line="711" pos:column="35">uch</name> <op:operator pos:line="711" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="711" pos:column="42">0xE0</lit:literal><op:operator pos:line="711" pos:column="46">)</op:operator> <op:operator pos:line="711" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="711" pos:column="51">(</op:operator><name pos:line="711" pos:column="52">uch</name> <op:operator pos:line="711" pos:column="56">&lt;=</op:operator> <lit:literal type="number" pos:line="711" pos:column="59">0xF9</lit:literal><op:operator pos:line="711" pos:column="63">)</op:operator><op:operator pos:line="711" pos:column="64">)</op:operator></expr>;</return>
	</case>}</block></switch>
	<return pos:line="713" pos:column="9">return <expr><lit:literal type="boolean" pos:line="713" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="716" pos:column="1">inline</specifier> <name pos:line="716" pos:column="8">bool</name></type> <name pos:line="716" pos:column="13">IsSpaceOrTab</name><parameter_list pos:line="716" pos:column="25">(<param><decl><type><name pos:line="716" pos:column="26">int</name></type> <name pos:line="716" pos:column="30">ch</name></decl></param>)</parameter_list> <block pos:line="716" pos:column="34">{
	<return pos:line="717" pos:column="9">return <expr><name pos:line="717" pos:column="16">ch</name> <op:operator pos:line="717" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="717" pos:column="22">' '</lit:literal> <op:operator pos:line="717" pos:column="26">||</op:operator> <name pos:line="717" pos:column="29">ch</name> <op:operator pos:line="717" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="717" pos:column="35">'\t'</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="720" pos:column="1">// Need to break text into segments near lengthSegment but taking into</comment>
<comment type="line" pos:line="721" pos:column="1">// account the encoding to not break inside a UTF-8 or DBCS character</comment>
<comment type="line" pos:line="722" pos:column="1">// and also trying to avoid breaking inside a pair of combining characters.</comment>
<comment type="line" pos:line="723" pos:column="1">// The segment length must always be long enough (more than 4 bytes)</comment>
<comment type="line" pos:line="724" pos:column="1">// so that there will be at least one whole character to make a segment.</comment>
<comment type="line" pos:line="725" pos:column="1">// For UTF-8, text must consist only of valid whole characters.</comment>
<comment type="line" pos:line="726" pos:column="1">// In preference order from best to worst:</comment>
<comment type="line" pos:line="727" pos:column="1">//   1) Break after space</comment>
<comment type="line" pos:line="728" pos:column="1">//   2) Break before punctuation</comment>
<comment type="line" pos:line="729" pos:column="1">//   3) Break after whole character</comment>

<function><type><name pos:line="731" pos:column="1">int</name></type> <name><name pos:line="731" pos:column="5">Document</name><op:operator pos:line="731" pos:column="13">::</op:operator><name pos:line="731" pos:column="15">SafeSegment</name></name><parameter_list pos:line="731" pos:column="26">(<param><decl><type><specifier pos:line="731" pos:column="27">const</specifier> <name pos:line="731" pos:column="33">char</name> <type:modifier pos:line="731" pos:column="38">*</type:modifier></type><name pos:line="731" pos:column="39">text</name></decl></param>, <param><decl><type><name pos:line="731" pos:column="45">int</name></type> <name pos:line="731" pos:column="49">length</name></decl></param>, <param><decl><type><name pos:line="731" pos:column="57">int</name></type> <name pos:line="731" pos:column="61">lengthSegment</name></decl></param>)</parameter_list> <block pos:line="731" pos:column="76">{
	<if pos:line="732" pos:column="9">if <condition pos:line="732" pos:column="12">(<expr><name pos:line="732" pos:column="13">length</name> <op:operator pos:line="732" pos:column="20">&lt;=</op:operator> <name pos:line="732" pos:column="23">lengthSegment</name></expr>)</condition><then pos:line="732" pos:column="37">
		<return pos:line="733" pos:column="17">return <expr><name pos:line="733" pos:column="24">length</name></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="734" pos:column="9">int</name></type> <name pos:line="734" pos:column="13">lastSpaceBreak</name> <init pos:line="734" pos:column="28">= <expr><op:operator pos:line="734" pos:column="30">-</op:operator><lit:literal type="number" pos:line="734" pos:column="31">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="735" pos:column="9">int</name></type> <name pos:line="735" pos:column="13">lastPunctuationBreak</name> <init pos:line="735" pos:column="34">= <expr><op:operator pos:line="735" pos:column="36">-</op:operator><lit:literal type="number" pos:line="735" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="736" pos:column="9">int</name></type> <name pos:line="736" pos:column="13">lastEncodingAllowedBreak</name> <init pos:line="736" pos:column="38">= <expr><op:operator pos:line="736" pos:column="40">-</op:operator><lit:literal type="number" pos:line="736" pos:column="41">1</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="737" pos:column="9">for (<init><decl><type><name pos:line="737" pos:column="14">int</name></type> <name pos:line="737" pos:column="18">j</name><init pos:line="737" pos:column="19">=<expr><lit:literal type="number" pos:line="737" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="737" pos:column="23">j</name> <op:operator pos:line="737" pos:column="25">&lt;</op:operator> <name pos:line="737" pos:column="27">lengthSegment</name></expr>;</condition><incr/>) <block pos:line="737" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="738" pos:column="17">unsigned</name> <name pos:line="738" pos:column="26">char</name></type> <name pos:line="738" pos:column="31">ch</name> <init pos:line="738" pos:column="34">= <expr><call><name><name pos:line="738" pos:column="36">static_cast</name><argument_list pos:line="738" pos:column="47">&lt;<argument><expr><name pos:line="738" pos:column="48">unsigned</name> <name pos:line="738" pos:column="57">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="738" pos:column="62">(<argument><expr><name><name pos:line="738" pos:column="63">text</name><index pos:line="738" pos:column="67">[<expr><name pos:line="738" pos:column="68">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="739" pos:column="17">if <condition pos:line="739" pos:column="20">(<expr><name pos:line="739" pos:column="21">j</name> <op:operator pos:line="739" pos:column="23">&gt;</op:operator> <lit:literal type="number" pos:line="739" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="739" pos:column="27"> <block pos:line="739" pos:column="28">{
			<if pos:line="740" pos:column="25">if <condition pos:line="740" pos:column="28">(<expr><call><name pos:line="740" pos:column="29">IsSpaceOrTab</name><argument_list pos:line="740" pos:column="41">(<argument><expr><name><name pos:line="740" pos:column="42">text</name><index pos:line="740" pos:column="46">[<expr><name pos:line="740" pos:column="47">j</name> <op:operator pos:line="740" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="740" pos:column="51">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="740" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="740" pos:column="58">!</op:operator><call><name pos:line="740" pos:column="59">IsSpaceOrTab</name><argument_list pos:line="740" pos:column="71">(<argument><expr><name><name pos:line="740" pos:column="72">text</name><index pos:line="740" pos:column="76">[<expr><name pos:line="740" pos:column="77">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="740" pos:column="81"> <block pos:line="740" pos:column="82">{
				<expr_stmt><expr><name pos:line="741" pos:column="33">lastSpaceBreak</name> <op:operator pos:line="741" pos:column="48">=</op:operator> <name pos:line="741" pos:column="50">j</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="743" pos:column="25">if <condition pos:line="743" pos:column="28">(<expr><name pos:line="743" pos:column="29">ch</name> <op:operator pos:line="743" pos:column="32">&lt;</op:operator> <lit:literal type="char" pos:line="743" pos:column="34">'A'</lit:literal></expr>)</condition><then pos:line="743" pos:column="38"> <block pos:line="743" pos:column="39">{
				<expr_stmt><expr><name pos:line="744" pos:column="33">lastPunctuationBreak</name> <op:operator pos:line="744" pos:column="54">=</op:operator> <name pos:line="744" pos:column="56">j</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="747" pos:column="17">lastEncodingAllowedBreak</name> <op:operator pos:line="747" pos:column="42">=</op:operator> <name pos:line="747" pos:column="44">j</name></expr>;</expr_stmt>

		<if pos:line="749" pos:column="17">if <condition pos:line="749" pos:column="20">(<expr><name pos:line="749" pos:column="21">dbcsCodePage</name> <op:operator pos:line="749" pos:column="34">==</op:operator> <name pos:line="749" pos:column="37">SC_CP_UTF8</name></expr>)</condition><then pos:line="749" pos:column="48"> <block pos:line="749" pos:column="49">{
			<expr_stmt><expr><name pos:line="750" pos:column="25">j</name> <op:operator pos:line="750" pos:column="27">+=</op:operator> <op:operator pos:line="750" pos:column="30">(</op:operator><name pos:line="750" pos:column="31">ch</name> <op:operator pos:line="750" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="750" pos:column="36">0x80</lit:literal><op:operator pos:line="750" pos:column="40">)</op:operator> <op:operator pos:line="750" pos:column="42">?</op:operator> <lit:literal type="number" pos:line="750" pos:column="44">1</lit:literal> <op:operator pos:line="750" pos:column="46">:</op:operator> <call><name pos:line="750" pos:column="48">BytesFromLead</name><argument_list pos:line="750" pos:column="61">(<argument><expr><name pos:line="750" pos:column="62">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="751" pos:column="19">else <if pos:line="751" pos:column="24">if <condition pos:line="751" pos:column="27">(<expr><name pos:line="751" pos:column="28">dbcsCodePage</name></expr>)</condition><then pos:line="751" pos:column="41"> <block pos:line="751" pos:column="42">{
			<expr_stmt><expr><name pos:line="752" pos:column="25">j</name> <op:operator pos:line="752" pos:column="27">+=</op:operator> <call><name pos:line="752" pos:column="30">IsDBCSLeadByte</name><argument_list pos:line="752" pos:column="44">(<argument><expr><name pos:line="752" pos:column="45">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="752" pos:column="49">?</op:operator> <lit:literal type="number" pos:line="752" pos:column="51">2</lit:literal> <op:operator pos:line="752" pos:column="53">:</op:operator> <lit:literal type="number" pos:line="752" pos:column="55">1</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="753" pos:column="19">else <block pos:line="753" pos:column="24">{
			<expr_stmt><expr><name pos:line="754" pos:column="25">j</name><op:operator pos:line="754" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></for>
	<if pos:line="757" pos:column="9">if <condition pos:line="757" pos:column="12">(<expr><name pos:line="757" pos:column="13">lastSpaceBreak</name> <op:operator pos:line="757" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="757" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="757" pos:column="33"> <block pos:line="757" pos:column="34">{
		<return pos:line="758" pos:column="17">return <expr><name pos:line="758" pos:column="24">lastSpaceBreak</name></expr>;</return>
	}</block></then> <else pos:line="759" pos:column="11">else <if pos:line="759" pos:column="16">if <condition pos:line="759" pos:column="19">(<expr><name pos:line="759" pos:column="20">lastPunctuationBreak</name> <op:operator pos:line="759" pos:column="41">&gt;=</op:operator> <lit:literal type="number" pos:line="759" pos:column="44">0</lit:literal></expr>)</condition><then pos:line="759" pos:column="46"> <block pos:line="759" pos:column="47">{
		<return pos:line="760" pos:column="17">return <expr><name pos:line="760" pos:column="24">lastPunctuationBreak</name></expr>;</return>
	}</block></then></if></else></if>
	<return pos:line="762" pos:column="9">return <expr><name pos:line="762" pos:column="16">lastEncodingAllowedBreak</name></expr>;</return>
}</block></function>

<function><type><name pos:line="765" pos:column="1">void</name></type> <name><name pos:line="765" pos:column="6">Document</name><op:operator pos:line="765" pos:column="14">::</op:operator><name pos:line="765" pos:column="16">ModifiedAt</name></name><parameter_list pos:line="765" pos:column="26">(<param><decl><type><name pos:line="765" pos:column="27">int</name></type> <name pos:line="765" pos:column="31">pos</name></decl></param>)</parameter_list> <block pos:line="765" pos:column="36">{
	<if pos:line="766" pos:column="9">if <condition pos:line="766" pos:column="12">(<expr><name pos:line="766" pos:column="13">endStyled</name> <op:operator pos:line="766" pos:column="23">&gt;</op:operator> <name pos:line="766" pos:column="25">pos</name></expr>)</condition><then pos:line="766" pos:column="29">
		<expr_stmt><expr><name pos:line="767" pos:column="17">endStyled</name> <op:operator pos:line="767" pos:column="27">=</op:operator> <name pos:line="767" pos:column="29">pos</name></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="770" pos:column="1">void</name></type> <name><name pos:line="770" pos:column="6">Document</name><op:operator pos:line="770" pos:column="14">::</op:operator><name pos:line="770" pos:column="16">CheckReadOnly</name></name><parameter_list pos:line="770" pos:column="29">()</parameter_list> <block pos:line="770" pos:column="32">{
	<if pos:line="771" pos:column="9">if <condition pos:line="771" pos:column="12">(<expr><call><name><name pos:line="771" pos:column="13">cb</name><op:operator pos:line="771" pos:column="15">.</op:operator><name pos:line="771" pos:column="16">IsReadOnly</name></name><argument_list pos:line="771" pos:column="26">()</argument_list></call> <op:operator pos:line="771" pos:column="29">&amp;&amp;</op:operator> <name pos:line="771" pos:column="32">enteredReadOnlyCount</name> <op:operator pos:line="771" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="771" pos:column="56">0</lit:literal></expr>)</condition><then pos:line="771" pos:column="58"> <block pos:line="771" pos:column="59">{
		<expr_stmt><expr><name pos:line="772" pos:column="17">enteredReadOnlyCount</name><op:operator pos:line="772" pos:column="37">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="773" pos:column="17">NotifyModifyAttempt</name><argument_list pos:line="773" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="774" pos:column="17">enteredReadOnlyCount</name><op:operator pos:line="774" pos:column="37">--</op:operator></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<comment type="line" pos:line="778" pos:column="1">// Document only modified by gateways DeleteChars, InsertString, Undo, Redo, and SetStyleAt.</comment>
<comment type="line" pos:line="779" pos:column="1">// SetStyleAt does not change the persistent state of a document</comment>

<function><type><name pos:line="781" pos:column="1">bool</name></type> <name><name pos:line="781" pos:column="6">Document</name><op:operator pos:line="781" pos:column="14">::</op:operator><name pos:line="781" pos:column="16">DeleteChars</name></name><parameter_list pos:line="781" pos:column="27">(<param><decl><type><name pos:line="781" pos:column="28">int</name></type> <name pos:line="781" pos:column="32">pos</name></decl></param>, <param><decl><type><name pos:line="781" pos:column="37">int</name></type> <name pos:line="781" pos:column="41">len</name></decl></param>)</parameter_list> <block pos:line="781" pos:column="46">{
	<if pos:line="782" pos:column="9">if <condition pos:line="782" pos:column="12">(<expr><name pos:line="782" pos:column="13">len</name> <op:operator pos:line="782" pos:column="17">==</op:operator> <lit:literal type="number" pos:line="782" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="782" pos:column="22">
		<return pos:line="783" pos:column="17">return <expr><lit:literal type="boolean" pos:line="783" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<if pos:line="784" pos:column="9">if <condition pos:line="784" pos:column="12">(<expr><op:operator pos:line="784" pos:column="13">(</op:operator><name pos:line="784" pos:column="14">pos</name> <op:operator pos:line="784" pos:column="18">+</op:operator> <name pos:line="784" pos:column="20">len</name><op:operator pos:line="784" pos:column="23">)</op:operator> <op:operator pos:line="784" pos:column="25">&gt;</op:operator> <call><name pos:line="784" pos:column="27">Length</name><argument_list pos:line="784" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="784" pos:column="36">
		<return pos:line="785" pos:column="17">return <expr><lit:literal type="boolean" pos:line="785" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<expr_stmt><expr><call><name pos:line="786" pos:column="9">CheckReadOnly</name><argument_list pos:line="786" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="787" pos:column="9">if <condition pos:line="787" pos:column="12">(<expr><name pos:line="787" pos:column="13">enteredModification</name> <op:operator pos:line="787" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="787" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="787" pos:column="38"> <block pos:line="787" pos:column="39">{
		<return pos:line="788" pos:column="17">return <expr><lit:literal type="boolean" pos:line="788" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="789" pos:column="11">else <block pos:line="789" pos:column="16">{
		<expr_stmt><expr><name pos:line="790" pos:column="17">enteredModification</name><op:operator pos:line="790" pos:column="36">++</op:operator></expr>;</expr_stmt>
		<if pos:line="791" pos:column="17">if <condition pos:line="791" pos:column="20">(<expr><op:operator pos:line="791" pos:column="21">!</op:operator><call><name><name pos:line="791" pos:column="22">cb</name><op:operator pos:line="791" pos:column="24">.</op:operator><name pos:line="791" pos:column="25">IsReadOnly</name></name><argument_list pos:line="791" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="791" pos:column="38"> <block pos:line="791" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="792" pos:column="25">NotifyModified</name><argument_list pos:line="792" pos:column="39">(
			    <argument><expr><call><name pos:line="793" pos:column="29">DocModification</name><argument_list pos:line="793" pos:column="44">(
			        <argument><expr><name pos:line="794" pos:column="33">SC_MOD_BEFOREDELETE</name> <op:operator pos:line="794" pos:column="53">|</op:operator> <name pos:line="794" pos:column="55">SC_PERFORMED_USER</name></expr></argument>,
			        <argument><expr><name pos:line="795" pos:column="33">pos</name></expr></argument>, <argument><expr><name pos:line="795" pos:column="38">len</name></expr></argument>,
			        <argument><expr><lit:literal type="number" pos:line="796" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="796" pos:column="36">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="797" pos:column="25">int</name></type> <name pos:line="797" pos:column="29">prevLinesTotal</name> <init pos:line="797" pos:column="44">= <expr><call><name pos:line="797" pos:column="46">LinesTotal</name><argument_list pos:line="797" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="798" pos:column="25">bool</name></type> <name pos:line="798" pos:column="30">startSavePoint</name> <init pos:line="798" pos:column="45">= <expr><call><name><name pos:line="798" pos:column="47">cb</name><op:operator pos:line="798" pos:column="49">.</op:operator><name pos:line="798" pos:column="50">IsSavePoint</name></name><argument_list pos:line="798" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="799" pos:column="25">bool</name></type> <name pos:line="799" pos:column="30">startSequence</name> <init pos:line="799" pos:column="44">= <expr><lit:literal type="boolean" pos:line="799" pos:column="46">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="800" pos:column="25">const</specifier> <name pos:line="800" pos:column="31">char</name> <type:modifier pos:line="800" pos:column="36">*</type:modifier></type><name pos:line="800" pos:column="37">text</name> <init pos:line="800" pos:column="42">= <expr><call><name><name pos:line="800" pos:column="44">cb</name><op:operator pos:line="800" pos:column="46">.</op:operator><name pos:line="800" pos:column="47">DeleteChars</name></name><argument_list pos:line="800" pos:column="58">(<argument><expr><name pos:line="800" pos:column="59">pos</name></expr></argument>, <argument><expr><name pos:line="800" pos:column="64">len</name></expr></argument>, <argument><expr><name pos:line="800" pos:column="69">startSequence</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="801" pos:column="25">if <condition pos:line="801" pos:column="28">(<expr><name pos:line="801" pos:column="29">startSavePoint</name> <op:operator pos:line="801" pos:column="44">&amp;&amp;</op:operator> <call><name><name pos:line="801" pos:column="47">cb</name><op:operator pos:line="801" pos:column="49">.</op:operator><name pos:line="801" pos:column="50">IsCollectingUndo</name></name><argument_list pos:line="801" pos:column="66">()</argument_list></call></expr>)</condition><then pos:line="801" pos:column="69">
				<expr_stmt><expr><call><name pos:line="802" pos:column="33">NotifySavePoint</name><argument_list pos:line="802" pos:column="48">(<argument><expr><op:operator pos:line="802" pos:column="49">!</op:operator><name pos:line="802" pos:column="50">startSavePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="803" pos:column="25">if <condition pos:line="803" pos:column="28">(<expr><op:operator pos:line="803" pos:column="29">(</op:operator><name pos:line="803" pos:column="30">pos</name> <op:operator pos:line="803" pos:column="34">&lt;</op:operator> <call><name pos:line="803" pos:column="36">Length</name><argument_list pos:line="803" pos:column="42">()</argument_list></call><op:operator pos:line="803" pos:column="44">)</op:operator> <op:operator pos:line="803" pos:column="46">||</op:operator> <op:operator pos:line="803" pos:column="49">(</op:operator><name pos:line="803" pos:column="50">pos</name> <op:operator pos:line="803" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="803" pos:column="57">0</lit:literal><op:operator pos:line="803" pos:column="58">)</op:operator></expr>)</condition><then pos:line="803" pos:column="60">
				<expr_stmt><expr><call><name pos:line="804" pos:column="33">ModifiedAt</name><argument_list pos:line="804" pos:column="43">(<argument><expr><name pos:line="804" pos:column="44">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="805" pos:column="25">else
				<expr_stmt><expr><call><name pos:line="806" pos:column="33">ModifiedAt</name><argument_list pos:line="806" pos:column="43">(<argument><expr><name pos:line="806" pos:column="44">pos</name><op:operator pos:line="806" pos:column="47">-</op:operator><lit:literal type="number" pos:line="806" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name pos:line="807" pos:column="25">NotifyModified</name><argument_list pos:line="807" pos:column="39">(
			    <argument><expr><call><name pos:line="808" pos:column="29">DocModification</name><argument_list pos:line="808" pos:column="44">(
			        <argument><expr><name pos:line="809" pos:column="33">SC_MOD_DELETETEXT</name> <op:operator pos:line="809" pos:column="51">|</op:operator> <name pos:line="809" pos:column="53">SC_PERFORMED_USER</name> <op:operator pos:line="809" pos:column="71">|</op:operator> <op:operator pos:line="809" pos:column="73">(</op:operator><name pos:line="809" pos:column="74">startSequence</name><op:operator pos:line="809" pos:column="87">?</op:operator><name pos:line="809" pos:column="88">SC_STARTACTION</name><op:operator pos:line="809" pos:column="102">:</op:operator><lit:literal type="number" pos:line="809" pos:column="103">0</lit:literal><op:operator pos:line="809" pos:column="104">)</op:operator></expr></argument>,
			        <argument><expr><name pos:line="810" pos:column="33">pos</name></expr></argument>, <argument><expr><name pos:line="810" pos:column="38">len</name></expr></argument>,
			        <argument><expr><call><name pos:line="811" pos:column="33">LinesTotal</name><argument_list pos:line="811" pos:column="43">()</argument_list></call> <op:operator pos:line="811" pos:column="46">-</op:operator> <name pos:line="811" pos:column="48">prevLinesTotal</name></expr></argument>, <argument><expr><name pos:line="811" pos:column="64">text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="813" pos:column="17">enteredModification</name><op:operator pos:line="813" pos:column="36">--</op:operator></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="815" pos:column="9">return <expr><op:operator pos:line="815" pos:column="16">!</op:operator><call><name><name pos:line="815" pos:column="17">cb</name><op:operator pos:line="815" pos:column="19">.</op:operator><name pos:line="815" pos:column="20">IsReadOnly</name></name><argument_list pos:line="815" pos:column="30">()</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="818" pos:column="1">/**
 * Insert a string with a length.
 */</comment>
<function><type><name pos:line="821" pos:column="1">bool</name></type> <name><name pos:line="821" pos:column="6">Document</name><op:operator pos:line="821" pos:column="14">::</op:operator><name pos:line="821" pos:column="16">InsertString</name></name><parameter_list pos:line="821" pos:column="28">(<param><decl><type><name pos:line="821" pos:column="29">int</name></type> <name pos:line="821" pos:column="33">position</name></decl></param>, <param><decl><type><specifier pos:line="821" pos:column="43">const</specifier> <name pos:line="821" pos:column="49">char</name> <type:modifier pos:line="821" pos:column="54">*</type:modifier></type><name pos:line="821" pos:column="55">s</name></decl></param>, <param><decl><type><name pos:line="821" pos:column="58">int</name></type> <name pos:line="821" pos:column="62">insertLength</name></decl></param>)</parameter_list> <block pos:line="821" pos:column="76">{
	<if pos:line="822" pos:column="9">if <condition pos:line="822" pos:column="12">(<expr><name pos:line="822" pos:column="13">insertLength</name> <op:operator pos:line="822" pos:column="26">&lt;=</op:operator> <lit:literal type="number" pos:line="822" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="822" pos:column="31"> <block pos:line="822" pos:column="32">{
		<return pos:line="823" pos:column="17">return <expr><lit:literal type="boolean" pos:line="823" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="825" pos:column="9">CheckReadOnly</name><argument_list pos:line="825" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="826" pos:column="9">if <condition pos:line="826" pos:column="12">(<expr><name pos:line="826" pos:column="13">enteredModification</name> <op:operator pos:line="826" pos:column="33">!=</op:operator> <lit:literal type="number" pos:line="826" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="826" pos:column="38"> <block pos:line="826" pos:column="39">{
		<return pos:line="827" pos:column="17">return <expr><lit:literal type="boolean" pos:line="827" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="828" pos:column="11">else <block pos:line="828" pos:column="16">{
		<expr_stmt><expr><name pos:line="829" pos:column="17">enteredModification</name><op:operator pos:line="829" pos:column="36">++</op:operator></expr>;</expr_stmt>
		<if pos:line="830" pos:column="17">if <condition pos:line="830" pos:column="20">(<expr><op:operator pos:line="830" pos:column="21">!</op:operator><call><name><name pos:line="830" pos:column="22">cb</name><op:operator pos:line="830" pos:column="24">.</op:operator><name pos:line="830" pos:column="25">IsReadOnly</name></name><argument_list pos:line="830" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="830" pos:column="38"> <block pos:line="830" pos:column="39">{
			<expr_stmt><expr><call><name pos:line="831" pos:column="25">NotifyModified</name><argument_list pos:line="831" pos:column="39">(
			    <argument><expr><call><name pos:line="832" pos:column="29">DocModification</name><argument_list pos:line="832" pos:column="44">(
			        <argument><expr><name pos:line="833" pos:column="33">SC_MOD_BEFOREINSERT</name> <op:operator pos:line="833" pos:column="53">|</op:operator> <name pos:line="833" pos:column="55">SC_PERFORMED_USER</name></expr></argument>,
			        <argument><expr><name pos:line="834" pos:column="33">position</name></expr></argument>, <argument><expr><name pos:line="834" pos:column="43">insertLength</name></expr></argument>,
			        <argument><expr><lit:literal type="number" pos:line="835" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><name pos:line="835" pos:column="36">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="836" pos:column="25">int</name></type> <name pos:line="836" pos:column="29">prevLinesTotal</name> <init pos:line="836" pos:column="44">= <expr><call><name pos:line="836" pos:column="46">LinesTotal</name><argument_list pos:line="836" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="837" pos:column="25">bool</name></type> <name pos:line="837" pos:column="30">startSavePoint</name> <init pos:line="837" pos:column="45">= <expr><call><name><name pos:line="837" pos:column="47">cb</name><op:operator pos:line="837" pos:column="49">.</op:operator><name pos:line="837" pos:column="50">IsSavePoint</name></name><argument_list pos:line="837" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="838" pos:column="25">bool</name></type> <name pos:line="838" pos:column="30">startSequence</name> <init pos:line="838" pos:column="44">= <expr><lit:literal type="boolean" pos:line="838" pos:column="46">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="839" pos:column="25">const</specifier> <name pos:line="839" pos:column="31">char</name> <type:modifier pos:line="839" pos:column="36">*</type:modifier></type><name pos:line="839" pos:column="37">text</name> <init pos:line="839" pos:column="42">= <expr><call><name><name pos:line="839" pos:column="44">cb</name><op:operator pos:line="839" pos:column="46">.</op:operator><name pos:line="839" pos:column="47">InsertString</name></name><argument_list pos:line="839" pos:column="59">(<argument><expr><name pos:line="839" pos:column="60">position</name></expr></argument>, <argument><expr><name pos:line="839" pos:column="70">s</name></expr></argument>, <argument><expr><name pos:line="839" pos:column="73">insertLength</name></expr></argument>, <argument><expr><name pos:line="839" pos:column="87">startSequence</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="840" pos:column="25">if <condition pos:line="840" pos:column="28">(<expr><name pos:line="840" pos:column="29">startSavePoint</name> <op:operator pos:line="840" pos:column="44">&amp;&amp;</op:operator> <call><name><name pos:line="840" pos:column="47">cb</name><op:operator pos:line="840" pos:column="49">.</op:operator><name pos:line="840" pos:column="50">IsCollectingUndo</name></name><argument_list pos:line="840" pos:column="66">()</argument_list></call></expr>)</condition><then pos:line="840" pos:column="69">
				<expr_stmt><expr><call><name pos:line="841" pos:column="33">NotifySavePoint</name><argument_list pos:line="841" pos:column="48">(<argument><expr><op:operator pos:line="841" pos:column="49">!</op:operator><name pos:line="841" pos:column="50">startSavePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<expr_stmt><expr><call><name pos:line="842" pos:column="25">ModifiedAt</name><argument_list pos:line="842" pos:column="35">(<argument><expr><name pos:line="842" pos:column="36">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="843" pos:column="25">NotifyModified</name><argument_list pos:line="843" pos:column="39">(
			    <argument><expr><call><name pos:line="844" pos:column="29">DocModification</name><argument_list pos:line="844" pos:column="44">(
			        <argument><expr><name pos:line="845" pos:column="33">SC_MOD_INSERTTEXT</name> <op:operator pos:line="845" pos:column="51">|</op:operator> <name pos:line="845" pos:column="53">SC_PERFORMED_USER</name> <op:operator pos:line="845" pos:column="71">|</op:operator> <op:operator pos:line="845" pos:column="73">(</op:operator><name pos:line="845" pos:column="74">startSequence</name><op:operator pos:line="845" pos:column="87">?</op:operator><name pos:line="845" pos:column="88">SC_STARTACTION</name><op:operator pos:line="845" pos:column="102">:</op:operator><lit:literal type="number" pos:line="845" pos:column="103">0</lit:literal><op:operator pos:line="845" pos:column="104">)</op:operator></expr></argument>,
			        <argument><expr><name pos:line="846" pos:column="33">position</name></expr></argument>, <argument><expr><name pos:line="846" pos:column="43">insertLength</name></expr></argument>,
			        <argument><expr><call><name pos:line="847" pos:column="33">LinesTotal</name><argument_list pos:line="847" pos:column="43">()</argument_list></call> <op:operator pos:line="847" pos:column="46">-</op:operator> <name pos:line="847" pos:column="48">prevLinesTotal</name></expr></argument>, <argument><expr><name pos:line="847" pos:column="64">text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="849" pos:column="17">enteredModification</name><op:operator pos:line="849" pos:column="36">--</op:operator></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="851" pos:column="9">return <expr><op:operator pos:line="851" pos:column="16">!</op:operator><call><name><name pos:line="851" pos:column="17">cb</name><op:operator pos:line="851" pos:column="19">.</op:operator><name pos:line="851" pos:column="20">IsReadOnly</name></name><argument_list pos:line="851" pos:column="30">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="854" pos:column="1">int</name></type> <name><name pos:line="854" pos:column="5">Document</name><op:operator pos:line="854" pos:column="13">::</op:operator><name pos:line="854" pos:column="15">Undo</name></name><parameter_list pos:line="854" pos:column="19">()</parameter_list> <block pos:line="854" pos:column="22">{
	<decl_stmt><decl><type><name pos:line="855" pos:column="9">int</name></type> <name pos:line="855" pos:column="13">newPos</name> <init pos:line="855" pos:column="20">= <expr><op:operator pos:line="855" pos:column="22">-</op:operator><lit:literal type="number" pos:line="855" pos:column="23">1</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="856" pos:column="9">CheckReadOnly</name><argument_list pos:line="856" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="857" pos:column="9">if <condition pos:line="857" pos:column="12">(<expr><name pos:line="857" pos:column="13">enteredModification</name> <op:operator pos:line="857" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="857" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="857" pos:column="38"> <block pos:line="857" pos:column="39">{
		<expr_stmt><expr><name pos:line="858" pos:column="17">enteredModification</name><op:operator pos:line="858" pos:column="36">++</op:operator></expr>;</expr_stmt>
		<if pos:line="859" pos:column="17">if <condition pos:line="859" pos:column="20">(<expr><op:operator pos:line="859" pos:column="21">!</op:operator><call><name><name pos:line="859" pos:column="22">cb</name><op:operator pos:line="859" pos:column="24">.</op:operator><name pos:line="859" pos:column="25">IsReadOnly</name></name><argument_list pos:line="859" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="859" pos:column="38"> <block pos:line="859" pos:column="39">{
			<decl_stmt><decl><type><name pos:line="860" pos:column="25">bool</name></type> <name pos:line="860" pos:column="30">startSavePoint</name> <init pos:line="860" pos:column="45">= <expr><call><name><name pos:line="860" pos:column="47">cb</name><op:operator pos:line="860" pos:column="49">.</op:operator><name pos:line="860" pos:column="50">IsSavePoint</name></name><argument_list pos:line="860" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="861" pos:column="25">bool</name></type> <name pos:line="861" pos:column="30">multiLine</name> <init pos:line="861" pos:column="40">= <expr><lit:literal type="boolean" pos:line="861" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="862" pos:column="25">int</name></type> <name pos:line="862" pos:column="29">steps</name> <init pos:line="862" pos:column="35">= <expr><call><name><name pos:line="862" pos:column="37">cb</name><op:operator pos:line="862" pos:column="39">.</op:operator><name pos:line="862" pos:column="40">StartUndo</name></name><argument_list pos:line="862" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="863" pos:column="25">//Platform::DebugPrintf("Steps=%d\n", steps);</comment>
			<for pos:line="864" pos:column="25">for (<init><decl><type><name pos:line="864" pos:column="30">int</name></type> <name pos:line="864" pos:column="34">step</name> <init pos:line="864" pos:column="39">= <expr><lit:literal type="number" pos:line="864" pos:column="41">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="864" pos:column="44">step</name> <op:operator pos:line="864" pos:column="49">&lt;</op:operator> <name pos:line="864" pos:column="51">steps</name></expr>;</condition> <incr><expr><name pos:line="864" pos:column="58">step</name><op:operator pos:line="864" pos:column="62">++</op:operator></expr></incr>) <block pos:line="864" pos:column="66">{
				<decl_stmt><decl><type><specifier pos:line="865" pos:column="33">const</specifier> <name pos:line="865" pos:column="39">int</name></type> <name pos:line="865" pos:column="43">prevLinesTotal</name> <init pos:line="865" pos:column="58">= <expr><call><name pos:line="865" pos:column="60">LinesTotal</name><argument_list pos:line="865" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="866" pos:column="33">const</specifier> <name pos:line="866" pos:column="39">Action</name> <type:modifier pos:line="866" pos:column="46">&amp;</type:modifier></type><name pos:line="866" pos:column="47">action</name> <init pos:line="866" pos:column="54">= <expr><call><name><name pos:line="866" pos:column="56">cb</name><op:operator pos:line="866" pos:column="58">.</op:operator><name pos:line="866" pos:column="59">GetUndoStep</name></name><argument_list pos:line="866" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="867" pos:column="33">if <condition pos:line="867" pos:column="36">(<expr><name><name pos:line="867" pos:column="37">action</name><op:operator pos:line="867" pos:column="43">.</op:operator><name pos:line="867" pos:column="44">at</name></name> <op:operator pos:line="867" pos:column="47">==</op:operator> <name pos:line="867" pos:column="50">removeAction</name></expr>)</condition><then pos:line="867" pos:column="63"> <block pos:line="867" pos:column="64">{
					<expr_stmt><expr><call><name pos:line="868" pos:column="41">NotifyModified</name><argument_list pos:line="868" pos:column="55">(<argument><expr><call><name pos:line="868" pos:column="56">DocModification</name><argument_list pos:line="868" pos:column="71">(
									<argument><expr><name pos:line="869" pos:column="73">SC_MOD_BEFOREINSERT</name> <op:operator pos:line="869" pos:column="93">|</op:operator> <name pos:line="869" pos:column="95">SC_PERFORMED_UNDO</name></expr></argument>, <argument><expr><name pos:line="869" pos:column="114">action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="870" pos:column="35">else <if pos:line="870" pos:column="40">if <condition pos:line="870" pos:column="43">(<expr><name><name pos:line="870" pos:column="44">action</name><op:operator pos:line="870" pos:column="50">.</op:operator><name pos:line="870" pos:column="51">at</name></name> <op:operator pos:line="870" pos:column="54">==</op:operator> <name pos:line="870" pos:column="57">containerAction</name></expr>)</condition><then pos:line="870" pos:column="73"> <block pos:line="870" pos:column="74">{
					<decl_stmt><decl><type><name pos:line="871" pos:column="41">DocModification</name></type> <name pos:line="871" pos:column="57">dm</name><argument_list pos:line="871" pos:column="59">(<argument><expr><name pos:line="871" pos:column="60">SC_MOD_CONTAINER</name> <op:operator pos:line="871" pos:column="77">|</op:operator> <name pos:line="871" pos:column="79">SC_PERFORMED_UNDO</name></expr></argument>)</argument_list></decl>;</decl_stmt>
					<expr_stmt><expr><name><name pos:line="872" pos:column="41">dm</name><op:operator pos:line="872" pos:column="43">.</op:operator><name pos:line="872" pos:column="44">token</name></name> <op:operator pos:line="872" pos:column="50">=</op:operator> <name><name pos:line="872" pos:column="52">action</name><op:operator pos:line="872" pos:column="58">.</op:operator><name pos:line="872" pos:column="59">position</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="873" pos:column="41">NotifyModified</name><argument_list pos:line="873" pos:column="55">(<argument><expr><name pos:line="873" pos:column="56">dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="874" pos:column="35">else <block pos:line="874" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="875" pos:column="41">NotifyModified</name><argument_list pos:line="875" pos:column="55">(<argument><expr><call><name pos:line="875" pos:column="56">DocModification</name><argument_list pos:line="875" pos:column="71">(
									<argument><expr><name pos:line="876" pos:column="73">SC_MOD_BEFOREDELETE</name> <op:operator pos:line="876" pos:column="93">|</op:operator> <name pos:line="876" pos:column="95">SC_PERFORMED_UNDO</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="114">action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="878" pos:column="33">cb</name><op:operator pos:line="878" pos:column="35">.</op:operator><name pos:line="878" pos:column="36">PerformUndoStep</name></name><argument_list pos:line="878" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name pos:line="879" pos:column="33">int</name></type> <name pos:line="879" pos:column="37">cellPosition</name> <init pos:line="879" pos:column="50">= <expr><name><name pos:line="879" pos:column="52">action</name><op:operator pos:line="879" pos:column="58">.</op:operator><name pos:line="879" pos:column="59">position</name></name></expr></init></decl>;</decl_stmt>
				<if pos:line="880" pos:column="33">if <condition pos:line="880" pos:column="36">(<expr><name><name pos:line="880" pos:column="37">action</name><op:operator pos:line="880" pos:column="43">.</op:operator><name pos:line="880" pos:column="44">at</name></name> <op:operator pos:line="880" pos:column="47">!=</op:operator> <name pos:line="880" pos:column="50">containerAction</name></expr>)</condition><then pos:line="880" pos:column="66"> <block pos:line="880" pos:column="67">{
					<expr_stmt><expr><call><name pos:line="881" pos:column="41">ModifiedAt</name><argument_list pos:line="881" pos:column="51">(<argument><expr><name pos:line="881" pos:column="52">cellPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="882" pos:column="41">newPos</name> <op:operator pos:line="882" pos:column="48">=</op:operator> <name pos:line="882" pos:column="50">cellPosition</name></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="885" pos:column="33">int</name></type> <name pos:line="885" pos:column="37">modFlags</name> <init pos:line="885" pos:column="46">= <expr><name pos:line="885" pos:column="48">SC_PERFORMED_UNDO</name></expr></init></decl>;</decl_stmt>
				<comment type="line" pos:line="886" pos:column="33">// With undo, an insertion action becomes a deletion notification</comment>
				<if pos:line="887" pos:column="33">if <condition pos:line="887" pos:column="36">(<expr><name><name pos:line="887" pos:column="37">action</name><op:operator pos:line="887" pos:column="43">.</op:operator><name pos:line="887" pos:column="44">at</name></name> <op:operator pos:line="887" pos:column="47">==</op:operator> <name pos:line="887" pos:column="50">removeAction</name></expr>)</condition><then pos:line="887" pos:column="63"> <block pos:line="887" pos:column="64">{
					<expr_stmt><expr><name pos:line="888" pos:column="41">newPos</name> <op:operator pos:line="888" pos:column="48">+=</op:operator> <name><name pos:line="888" pos:column="51">action</name><op:operator pos:line="888" pos:column="57">.</op:operator><name pos:line="888" pos:column="58">lenData</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="889" pos:column="41">modFlags</name> <op:operator pos:line="889" pos:column="50">|=</op:operator> <name pos:line="889" pos:column="53">SC_MOD_INSERTTEXT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="890" pos:column="35">else <if pos:line="890" pos:column="40">if <condition pos:line="890" pos:column="43">(<expr><name><name pos:line="890" pos:column="44">action</name><op:operator pos:line="890" pos:column="50">.</op:operator><name pos:line="890" pos:column="51">at</name></name> <op:operator pos:line="890" pos:column="54">==</op:operator> <name pos:line="890" pos:column="57">insertAction</name></expr>)</condition><then pos:line="890" pos:column="70"> <block pos:line="890" pos:column="71">{
					<expr_stmt><expr><name pos:line="891" pos:column="41">modFlags</name> <op:operator pos:line="891" pos:column="50">|=</op:operator> <name pos:line="891" pos:column="53">SC_MOD_DELETETEXT</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<if pos:line="893" pos:column="33">if <condition pos:line="893" pos:column="36">(<expr><name pos:line="893" pos:column="37">steps</name> <op:operator pos:line="893" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="893" pos:column="45">1</lit:literal></expr>)</condition><then pos:line="893" pos:column="47">
					<expr_stmt><expr><name pos:line="894" pos:column="41">modFlags</name> <op:operator pos:line="894" pos:column="50">|=</op:operator> <name pos:line="894" pos:column="53">SC_MULTISTEPUNDOREDO</name></expr>;</expr_stmt></then></if>
				<decl_stmt><decl><type><specifier pos:line="895" pos:column="33">const</specifier> <name pos:line="895" pos:column="39">int</name></type> <name pos:line="895" pos:column="43">linesAdded</name> <init pos:line="895" pos:column="54">= <expr><call><name pos:line="895" pos:column="56">LinesTotal</name><argument_list pos:line="895" pos:column="66">()</argument_list></call> <op:operator pos:line="895" pos:column="69">-</op:operator> <name pos:line="895" pos:column="71">prevLinesTotal</name></expr></init></decl>;</decl_stmt>
				<if pos:line="896" pos:column="33">if <condition pos:line="896" pos:column="36">(<expr><name pos:line="896" pos:column="37">linesAdded</name> <op:operator pos:line="896" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="896" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="896" pos:column="53">
					<expr_stmt><expr><name pos:line="897" pos:column="41">multiLine</name> <op:operator pos:line="897" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="897" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>
				<if pos:line="898" pos:column="33">if <condition pos:line="898" pos:column="36">(<expr><name pos:line="898" pos:column="37">step</name> <op:operator pos:line="898" pos:column="42">==</op:operator> <name pos:line="898" pos:column="45">steps</name> <op:operator pos:line="898" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="898" pos:column="53">1</lit:literal></expr>)</condition><then pos:line="898" pos:column="55"> <block pos:line="898" pos:column="56">{
					<expr_stmt><expr><name pos:line="899" pos:column="41">modFlags</name> <op:operator pos:line="899" pos:column="50">|=</op:operator> <name pos:line="899" pos:column="53">SC_LASTSTEPINUNDOREDO</name></expr>;</expr_stmt>
					<if pos:line="900" pos:column="41">if <condition pos:line="900" pos:column="44">(<expr><name pos:line="900" pos:column="45">multiLine</name></expr>)</condition><then pos:line="900" pos:column="55">
						<expr_stmt><expr><name pos:line="901" pos:column="49">modFlags</name> <op:operator pos:line="901" pos:column="58">|=</op:operator> <name pos:line="901" pos:column="61">SC_MULTILINEUNDOREDO</name></expr>;</expr_stmt></then></if>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="903" pos:column="33">NotifyModified</name><argument_list pos:line="903" pos:column="47">(<argument><expr><call><name pos:line="903" pos:column="48">DocModification</name><argument_list pos:line="903" pos:column="63">(<argument><expr><name pos:line="903" pos:column="64">modFlags</name></expr></argument>, <argument><expr><name pos:line="903" pos:column="74">cellPosition</name></expr></argument>, <argument><expr><name><name pos:line="903" pos:column="88">action</name><op:operator pos:line="903" pos:column="94">.</op:operator><name pos:line="903" pos:column="95">lenData</name></name></expr></argument>,
											   <argument><expr><name pos:line="904" pos:column="92">linesAdded</name></expr></argument>, <argument><expr><name><name pos:line="904" pos:column="104">action</name><op:operator pos:line="904" pos:column="110">.</op:operator><name pos:line="904" pos:column="111">data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>

			<decl_stmt><decl><type><name pos:line="907" pos:column="25">bool</name></type> <name pos:line="907" pos:column="30">endSavePoint</name> <init pos:line="907" pos:column="43">= <expr><call><name><name pos:line="907" pos:column="45">cb</name><op:operator pos:line="907" pos:column="47">.</op:operator><name pos:line="907" pos:column="48">IsSavePoint</name></name><argument_list pos:line="907" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="908" pos:column="25">if <condition pos:line="908" pos:column="28">(<expr><name pos:line="908" pos:column="29">startSavePoint</name> <op:operator pos:line="908" pos:column="44">!=</op:operator> <name pos:line="908" pos:column="47">endSavePoint</name></expr>)</condition><then pos:line="908" pos:column="60">
				<expr_stmt><expr><call><name pos:line="909" pos:column="33">NotifySavePoint</name><argument_list pos:line="909" pos:column="48">(<argument><expr><name pos:line="909" pos:column="49">endSavePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="911" pos:column="17">enteredModification</name><op:operator pos:line="911" pos:column="36">--</op:operator></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="913" pos:column="9">return <expr><name pos:line="913" pos:column="16">newPos</name></expr>;</return>
}</block></function>

<function><type><name pos:line="916" pos:column="1">int</name></type> <name><name pos:line="916" pos:column="5">Document</name><op:operator pos:line="916" pos:column="13">::</op:operator><name pos:line="916" pos:column="15">Redo</name></name><parameter_list pos:line="916" pos:column="19">()</parameter_list> <block pos:line="916" pos:column="22">{
	<decl_stmt><decl><type><name pos:line="917" pos:column="9">int</name></type> <name pos:line="917" pos:column="13">newPos</name> <init pos:line="917" pos:column="20">= <expr><op:operator pos:line="917" pos:column="22">-</op:operator><lit:literal type="number" pos:line="917" pos:column="23">1</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="918" pos:column="9">CheckReadOnly</name><argument_list pos:line="918" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="919" pos:column="9">if <condition pos:line="919" pos:column="12">(<expr><name pos:line="919" pos:column="13">enteredModification</name> <op:operator pos:line="919" pos:column="33">==</op:operator> <lit:literal type="number" pos:line="919" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="919" pos:column="38"> <block pos:line="919" pos:column="39">{
		<expr_stmt><expr><name pos:line="920" pos:column="17">enteredModification</name><op:operator pos:line="920" pos:column="36">++</op:operator></expr>;</expr_stmt>
		<if pos:line="921" pos:column="17">if <condition pos:line="921" pos:column="20">(<expr><op:operator pos:line="921" pos:column="21">!</op:operator><call><name><name pos:line="921" pos:column="22">cb</name><op:operator pos:line="921" pos:column="24">.</op:operator><name pos:line="921" pos:column="25">IsReadOnly</name></name><argument_list pos:line="921" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="921" pos:column="38"> <block pos:line="921" pos:column="39">{
			<decl_stmt><decl><type><name pos:line="922" pos:column="25">bool</name></type> <name pos:line="922" pos:column="30">startSavePoint</name> <init pos:line="922" pos:column="45">= <expr><call><name><name pos:line="922" pos:column="47">cb</name><op:operator pos:line="922" pos:column="49">.</op:operator><name pos:line="922" pos:column="50">IsSavePoint</name></name><argument_list pos:line="922" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="923" pos:column="25">bool</name></type> <name pos:line="923" pos:column="30">multiLine</name> <init pos:line="923" pos:column="40">= <expr><lit:literal type="boolean" pos:line="923" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="924" pos:column="25">int</name></type> <name pos:line="924" pos:column="29">steps</name> <init pos:line="924" pos:column="35">= <expr><call><name><name pos:line="924" pos:column="37">cb</name><op:operator pos:line="924" pos:column="39">.</op:operator><name pos:line="924" pos:column="40">StartRedo</name></name><argument_list pos:line="924" pos:column="49">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<for pos:line="925" pos:column="25">for (<init><decl><type><name pos:line="925" pos:column="30">int</name></type> <name pos:line="925" pos:column="34">step</name> <init pos:line="925" pos:column="39">= <expr><lit:literal type="number" pos:line="925" pos:column="41">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="925" pos:column="44">step</name> <op:operator pos:line="925" pos:column="49">&lt;</op:operator> <name pos:line="925" pos:column="51">steps</name></expr>;</condition> <incr><expr><name pos:line="925" pos:column="58">step</name><op:operator pos:line="925" pos:column="62">++</op:operator></expr></incr>) <block pos:line="925" pos:column="66">{
				<decl_stmt><decl><type><specifier pos:line="926" pos:column="33">const</specifier> <name pos:line="926" pos:column="39">int</name></type> <name pos:line="926" pos:column="43">prevLinesTotal</name> <init pos:line="926" pos:column="58">= <expr><call><name pos:line="926" pos:column="60">LinesTotal</name><argument_list pos:line="926" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="927" pos:column="33">const</specifier> <name pos:line="927" pos:column="39">Action</name> <type:modifier pos:line="927" pos:column="46">&amp;</type:modifier></type><name pos:line="927" pos:column="47">action</name> <init pos:line="927" pos:column="54">= <expr><call><name><name pos:line="927" pos:column="56">cb</name><op:operator pos:line="927" pos:column="58">.</op:operator><name pos:line="927" pos:column="59">GetRedoStep</name></name><argument_list pos:line="927" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="928" pos:column="33">if <condition pos:line="928" pos:column="36">(<expr><name><name pos:line="928" pos:column="37">action</name><op:operator pos:line="928" pos:column="43">.</op:operator><name pos:line="928" pos:column="44">at</name></name> <op:operator pos:line="928" pos:column="47">==</op:operator> <name pos:line="928" pos:column="50">insertAction</name></expr>)</condition><then pos:line="928" pos:column="63"> <block pos:line="928" pos:column="64">{
					<expr_stmt><expr><call><name pos:line="929" pos:column="41">NotifyModified</name><argument_list pos:line="929" pos:column="55">(<argument><expr><call><name pos:line="929" pos:column="56">DocModification</name><argument_list pos:line="929" pos:column="71">(
									<argument><expr><name pos:line="930" pos:column="73">SC_MOD_BEFOREINSERT</name> <op:operator pos:line="930" pos:column="93">|</op:operator> <name pos:line="930" pos:column="95">SC_PERFORMED_REDO</name></expr></argument>, <argument><expr><name pos:line="930" pos:column="114">action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="931" pos:column="35">else <if pos:line="931" pos:column="40">if <condition pos:line="931" pos:column="43">(<expr><name><name pos:line="931" pos:column="44">action</name><op:operator pos:line="931" pos:column="50">.</op:operator><name pos:line="931" pos:column="51">at</name></name> <op:operator pos:line="931" pos:column="54">==</op:operator> <name pos:line="931" pos:column="57">containerAction</name></expr>)</condition><then pos:line="931" pos:column="73"> <block pos:line="931" pos:column="74">{
					<decl_stmt><decl><type><name pos:line="932" pos:column="41">DocModification</name></type> <name pos:line="932" pos:column="57">dm</name><argument_list pos:line="932" pos:column="59">(<argument><expr><name pos:line="932" pos:column="60">SC_MOD_CONTAINER</name> <op:operator pos:line="932" pos:column="77">|</op:operator> <name pos:line="932" pos:column="79">SC_PERFORMED_REDO</name></expr></argument>)</argument_list></decl>;</decl_stmt>
					<expr_stmt><expr><name><name pos:line="933" pos:column="41">dm</name><op:operator pos:line="933" pos:column="43">.</op:operator><name pos:line="933" pos:column="44">token</name></name> <op:operator pos:line="933" pos:column="50">=</op:operator> <name><name pos:line="933" pos:column="52">action</name><op:operator pos:line="933" pos:column="58">.</op:operator><name pos:line="933" pos:column="59">position</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="934" pos:column="41">NotifyModified</name><argument_list pos:line="934" pos:column="55">(<argument><expr><name pos:line="934" pos:column="56">dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="935" pos:column="35">else <block pos:line="935" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="936" pos:column="41">NotifyModified</name><argument_list pos:line="936" pos:column="55">(<argument><expr><call><name pos:line="936" pos:column="56">DocModification</name><argument_list pos:line="936" pos:column="71">(
									<argument><expr><name pos:line="937" pos:column="73">SC_MOD_BEFOREDELETE</name> <op:operator pos:line="937" pos:column="93">|</op:operator> <name pos:line="937" pos:column="95">SC_PERFORMED_REDO</name></expr></argument>, <argument><expr><name pos:line="937" pos:column="114">action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="939" pos:column="33">cb</name><op:operator pos:line="939" pos:column="35">.</op:operator><name pos:line="939" pos:column="36">PerformRedoStep</name></name><argument_list pos:line="939" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="940" pos:column="33">if <condition pos:line="940" pos:column="36">(<expr><name><name pos:line="940" pos:column="37">action</name><op:operator pos:line="940" pos:column="43">.</op:operator><name pos:line="940" pos:column="44">at</name></name> <op:operator pos:line="940" pos:column="47">!=</op:operator> <name pos:line="940" pos:column="50">containerAction</name></expr>)</condition><then pos:line="940" pos:column="66"> <block pos:line="940" pos:column="67">{
					<expr_stmt><expr><call><name pos:line="941" pos:column="41">ModifiedAt</name><argument_list pos:line="941" pos:column="51">(<argument><expr><name><name pos:line="941" pos:column="52">action</name><op:operator pos:line="941" pos:column="58">.</op:operator><name pos:line="941" pos:column="59">position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="942" pos:column="41">newPos</name> <op:operator pos:line="942" pos:column="48">=</op:operator> <name><name pos:line="942" pos:column="50">action</name><op:operator pos:line="942" pos:column="56">.</op:operator><name pos:line="942" pos:column="57">position</name></name></expr>;</expr_stmt>
				}</block></then></if>

				<decl_stmt><decl><type><name pos:line="945" pos:column="33">int</name></type> <name pos:line="945" pos:column="37">modFlags</name> <init pos:line="945" pos:column="46">= <expr><name pos:line="945" pos:column="48">SC_PERFORMED_REDO</name></expr></init></decl>;</decl_stmt>
				<if pos:line="946" pos:column="33">if <condition pos:line="946" pos:column="36">(<expr><name><name pos:line="946" pos:column="37">action</name><op:operator pos:line="946" pos:column="43">.</op:operator><name pos:line="946" pos:column="44">at</name></name> <op:operator pos:line="946" pos:column="47">==</op:operator> <name pos:line="946" pos:column="50">insertAction</name></expr>)</condition><then pos:line="946" pos:column="63"> <block pos:line="946" pos:column="64">{
					<expr_stmt><expr><name pos:line="947" pos:column="41">newPos</name> <op:operator pos:line="947" pos:column="48">+=</op:operator> <name><name pos:line="947" pos:column="51">action</name><op:operator pos:line="947" pos:column="57">.</op:operator><name pos:line="947" pos:column="58">lenData</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="948" pos:column="41">modFlags</name> <op:operator pos:line="948" pos:column="50">|=</op:operator> <name pos:line="948" pos:column="53">SC_MOD_INSERTTEXT</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="949" pos:column="35">else <if pos:line="949" pos:column="40">if <condition pos:line="949" pos:column="43">(<expr><name><name pos:line="949" pos:column="44">action</name><op:operator pos:line="949" pos:column="50">.</op:operator><name pos:line="949" pos:column="51">at</name></name> <op:operator pos:line="949" pos:column="54">==</op:operator> <name pos:line="949" pos:column="57">removeAction</name></expr>)</condition><then pos:line="949" pos:column="70"> <block pos:line="949" pos:column="71">{
					<expr_stmt><expr><name pos:line="950" pos:column="41">modFlags</name> <op:operator pos:line="950" pos:column="50">|=</op:operator> <name pos:line="950" pos:column="53">SC_MOD_DELETETEXT</name></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<if pos:line="952" pos:column="33">if <condition pos:line="952" pos:column="36">(<expr><name pos:line="952" pos:column="37">steps</name> <op:operator pos:line="952" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="952" pos:column="45">1</lit:literal></expr>)</condition><then pos:line="952" pos:column="47">
					<expr_stmt><expr><name pos:line="953" pos:column="41">modFlags</name> <op:operator pos:line="953" pos:column="50">|=</op:operator> <name pos:line="953" pos:column="53">SC_MULTISTEPUNDOREDO</name></expr>;</expr_stmt></then></if>
				<decl_stmt><decl><type><specifier pos:line="954" pos:column="33">const</specifier> <name pos:line="954" pos:column="39">int</name></type> <name pos:line="954" pos:column="43">linesAdded</name> <init pos:line="954" pos:column="54">= <expr><call><name pos:line="954" pos:column="56">LinesTotal</name><argument_list pos:line="954" pos:column="66">()</argument_list></call> <op:operator pos:line="954" pos:column="69">-</op:operator> <name pos:line="954" pos:column="71">prevLinesTotal</name></expr></init></decl>;</decl_stmt>
				<if pos:line="955" pos:column="33">if <condition pos:line="955" pos:column="36">(<expr><name pos:line="955" pos:column="37">linesAdded</name> <op:operator pos:line="955" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="955" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="955" pos:column="53">
					<expr_stmt><expr><name pos:line="956" pos:column="41">multiLine</name> <op:operator pos:line="956" pos:column="51">=</op:operator> <lit:literal type="boolean" pos:line="956" pos:column="53">true</lit:literal></expr>;</expr_stmt></then></if>
				<if pos:line="957" pos:column="33">if <condition pos:line="957" pos:column="36">(<expr><name pos:line="957" pos:column="37">step</name> <op:operator pos:line="957" pos:column="42">==</op:operator> <name pos:line="957" pos:column="45">steps</name> <op:operator pos:line="957" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="957" pos:column="53">1</lit:literal></expr>)</condition><then pos:line="957" pos:column="55"> <block pos:line="957" pos:column="56">{
					<expr_stmt><expr><name pos:line="958" pos:column="41">modFlags</name> <op:operator pos:line="958" pos:column="50">|=</op:operator> <name pos:line="958" pos:column="53">SC_LASTSTEPINUNDOREDO</name></expr>;</expr_stmt>
					<if pos:line="959" pos:column="41">if <condition pos:line="959" pos:column="44">(<expr><name pos:line="959" pos:column="45">multiLine</name></expr>)</condition><then pos:line="959" pos:column="55">
						<expr_stmt><expr><name pos:line="960" pos:column="49">modFlags</name> <op:operator pos:line="960" pos:column="58">|=</op:operator> <name pos:line="960" pos:column="61">SC_MULTILINEUNDOREDO</name></expr>;</expr_stmt></then></if>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="962" pos:column="33">NotifyModified</name><argument_list pos:line="962" pos:column="47">(
					<argument><expr><call><name pos:line="963" pos:column="41">DocModification</name><argument_list pos:line="963" pos:column="56">(<argument><expr><name pos:line="963" pos:column="57">modFlags</name></expr></argument>, <argument><expr><name><name pos:line="963" pos:column="67">action</name><op:operator pos:line="963" pos:column="73">.</op:operator><name pos:line="963" pos:column="74">position</name></name></expr></argument>, <argument><expr><name><name pos:line="963" pos:column="84">action</name><op:operator pos:line="963" pos:column="90">.</op:operator><name pos:line="963" pos:column="91">lenData</name></name></expr></argument>,
									<argument><expr><name pos:line="964" pos:column="73">linesAdded</name></expr></argument>, <argument><expr><name><name pos:line="964" pos:column="85">action</name><op:operator pos:line="964" pos:column="91">.</op:operator><name pos:line="964" pos:column="92">data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>

			<decl_stmt><decl><type><name pos:line="967" pos:column="25">bool</name></type> <name pos:line="967" pos:column="30">endSavePoint</name> <init pos:line="967" pos:column="43">= <expr><call><name><name pos:line="967" pos:column="45">cb</name><op:operator pos:line="967" pos:column="47">.</op:operator><name pos:line="967" pos:column="48">IsSavePoint</name></name><argument_list pos:line="967" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="968" pos:column="25">if <condition pos:line="968" pos:column="28">(<expr><name pos:line="968" pos:column="29">startSavePoint</name> <op:operator pos:line="968" pos:column="44">!=</op:operator> <name pos:line="968" pos:column="47">endSavePoint</name></expr>)</condition><then pos:line="968" pos:column="60">
				<expr_stmt><expr><call><name pos:line="969" pos:column="33">NotifySavePoint</name><argument_list pos:line="969" pos:column="48">(<argument><expr><name pos:line="969" pos:column="49">endSavePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="971" pos:column="17">enteredModification</name><op:operator pos:line="971" pos:column="36">--</op:operator></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="973" pos:column="9">return <expr><name pos:line="973" pos:column="16">newPos</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="976" pos:column="1">/**
 * Insert a single character.
 */</comment>
<function><type><name pos:line="979" pos:column="1">bool</name></type> <name><name pos:line="979" pos:column="6">Document</name><op:operator pos:line="979" pos:column="14">::</op:operator><name pos:line="979" pos:column="16">InsertChar</name></name><parameter_list pos:line="979" pos:column="26">(<param><decl><type><name pos:line="979" pos:column="27">int</name></type> <name pos:line="979" pos:column="31">pos</name></decl></param>, <param><decl><type><name pos:line="979" pos:column="36">char</name></type> <name pos:line="979" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="979" pos:column="45">{
	<decl_stmt><decl><type><name pos:line="980" pos:column="9">char</name></type> <name><name pos:line="980" pos:column="14">chs</name><index pos:line="980" pos:column="17">[<expr><lit:literal type="number" pos:line="980" pos:column="18">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="981" pos:column="9">chs</name><index pos:line="981" pos:column="12">[<expr><lit:literal type="number" pos:line="981" pos:column="13">0</lit:literal></expr>]</index></name> <op:operator pos:line="981" pos:column="16">=</op:operator> <name pos:line="981" pos:column="18">ch</name></expr>;</expr_stmt>
	<return pos:line="982" pos:column="9">return <expr><call><name pos:line="982" pos:column="16">InsertString</name><argument_list pos:line="982" pos:column="28">(<argument><expr><name pos:line="982" pos:column="29">pos</name></expr></argument>, <argument><expr><name pos:line="982" pos:column="34">chs</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="982" pos:column="39">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="985" pos:column="1">/**
 * Insert a null terminated string.
 */</comment>
<function><type><name pos:line="988" pos:column="1">bool</name></type> <name><name pos:line="988" pos:column="6">Document</name><op:operator pos:line="988" pos:column="14">::</op:operator><name pos:line="988" pos:column="16">InsertCString</name></name><parameter_list pos:line="988" pos:column="29">(<param><decl><type><name pos:line="988" pos:column="30">int</name></type> <name pos:line="988" pos:column="34">position</name></decl></param>, <param><decl><type><specifier pos:line="988" pos:column="44">const</specifier> <name pos:line="988" pos:column="50">char</name> <type:modifier pos:line="988" pos:column="55">*</type:modifier></type><name pos:line="988" pos:column="56">s</name></decl></param>)</parameter_list> <block pos:line="988" pos:column="59">{
	<return pos:line="989" pos:column="9">return <expr><call><name pos:line="989" pos:column="16">InsertString</name><argument_list pos:line="989" pos:column="28">(<argument><expr><name pos:line="989" pos:column="29">position</name></expr></argument>, <argument><expr><name pos:line="989" pos:column="39">s</name></expr></argument>, <argument><expr><call><name pos:line="989" pos:column="42">strlen</name><argument_list pos:line="989" pos:column="48">(<argument><expr><name pos:line="989" pos:column="49">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="992" pos:column="1">void</name></type> <name><name pos:line="992" pos:column="6">Document</name><op:operator pos:line="992" pos:column="14">::</op:operator><name pos:line="992" pos:column="16">ChangeChar</name></name><parameter_list pos:line="992" pos:column="26">(<param><decl><type><name pos:line="992" pos:column="27">int</name></type> <name pos:line="992" pos:column="31">pos</name></decl></param>, <param><decl><type><name pos:line="992" pos:column="36">char</name></type> <name pos:line="992" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="992" pos:column="45">{
	<expr_stmt><expr><call><name pos:line="993" pos:column="9">DeleteChars</name><argument_list pos:line="993" pos:column="20">(<argument><expr><name pos:line="993" pos:column="21">pos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="993" pos:column="26">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="994" pos:column="9">InsertChar</name><argument_list pos:line="994" pos:column="19">(<argument><expr><name pos:line="994" pos:column="20">pos</name></expr></argument>, <argument><expr><name pos:line="994" pos:column="25">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="997" pos:column="1">void</name></type> <name><name pos:line="997" pos:column="6">Document</name><op:operator pos:line="997" pos:column="14">::</op:operator><name pos:line="997" pos:column="16">DelChar</name></name><parameter_list pos:line="997" pos:column="23">(<param><decl><type><name pos:line="997" pos:column="24">int</name></type> <name pos:line="997" pos:column="28">pos</name></decl></param>)</parameter_list> <block pos:line="997" pos:column="33">{
	<expr_stmt><expr><call><name pos:line="998" pos:column="9">DeleteChars</name><argument_list pos:line="998" pos:column="20">(<argument><expr><name pos:line="998" pos:column="21">pos</name></expr></argument>, <argument><expr><call><name pos:line="998" pos:column="26">LenChar</name><argument_list pos:line="998" pos:column="33">(<argument><expr><name pos:line="998" pos:column="34">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1001" pos:column="1">void</name></type> <name><name pos:line="1001" pos:column="6">Document</name><op:operator pos:line="1001" pos:column="14">::</op:operator><name pos:line="1001" pos:column="16">DelCharBack</name></name><parameter_list pos:line="1001" pos:column="27">(<param><decl><type><name pos:line="1001" pos:column="28">int</name></type> <name pos:line="1001" pos:column="32">pos</name></decl></param>)</parameter_list> <block pos:line="1001" pos:column="37">{
	<if pos:line="1002" pos:column="9">if <condition pos:line="1002" pos:column="12">(<expr><name pos:line="1002" pos:column="13">pos</name> <op:operator pos:line="1002" pos:column="17">&lt;=</op:operator> <lit:literal type="number" pos:line="1002" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="1002" pos:column="22"> <block pos:line="1002" pos:column="23">{
		<return pos:line="1003" pos:column="17">return;</return>
	}</block></then> <else pos:line="1004" pos:column="11">else <if pos:line="1004" pos:column="16">if <condition pos:line="1004" pos:column="19">(<expr><call><name pos:line="1004" pos:column="20">IsCrLf</name><argument_list pos:line="1004" pos:column="26">(<argument><expr><name pos:line="1004" pos:column="27">pos</name> <op:operator pos:line="1004" pos:column="31">-</op:operator> <lit:literal type="number" pos:line="1004" pos:column="33">2</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1004" pos:column="36"> <block pos:line="1004" pos:column="37">{
		<expr_stmt><expr><call><name pos:line="1005" pos:column="17">DeleteChars</name><argument_list pos:line="1005" pos:column="28">(<argument><expr><name pos:line="1005" pos:column="29">pos</name> <op:operator pos:line="1005" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="1005" pos:column="35">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1005" pos:column="38">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="1006" pos:column="11">else <if pos:line="1006" pos:column="16">if <condition pos:line="1006" pos:column="19">(<expr><name pos:line="1006" pos:column="20">dbcsCodePage</name></expr>)</condition><then pos:line="1006" pos:column="33"> <block pos:line="1006" pos:column="34">{
		<decl_stmt><decl><type><name pos:line="1007" pos:column="17">int</name></type> <name pos:line="1007" pos:column="21">startChar</name> <init pos:line="1007" pos:column="31">= <expr><call><name pos:line="1007" pos:column="33">NextPosition</name><argument_list pos:line="1007" pos:column="45">(<argument><expr><name pos:line="1007" pos:column="46">pos</name></expr></argument>, <argument><expr><op:operator pos:line="1007" pos:column="51">-</op:operator><lit:literal type="number" pos:line="1007" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1008" pos:column="17">DeleteChars</name><argument_list pos:line="1008" pos:column="28">(<argument><expr><name pos:line="1008" pos:column="29">startChar</name></expr></argument>, <argument><expr><name pos:line="1008" pos:column="40">pos</name> <op:operator pos:line="1008" pos:column="44">-</op:operator> <name pos:line="1008" pos:column="46">startChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="1009" pos:column="11">else <block pos:line="1009" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="1010" pos:column="17">DeleteChars</name><argument_list pos:line="1010" pos:column="28">(<argument><expr><name pos:line="1010" pos:column="29">pos</name> <op:operator pos:line="1010" pos:column="33">-</op:operator> <lit:literal type="number" pos:line="1010" pos:column="35">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1010" pos:column="38">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if></else></if></else></if>
}</block></function>

<function><type><specifier pos:line="1014" pos:column="1">static</specifier> <name pos:line="1014" pos:column="8">bool</name></type> <name pos:line="1014" pos:column="13">isindentchar</name><parameter_list pos:line="1014" pos:column="25">(<param><decl><type><name pos:line="1014" pos:column="26">char</name></type> <name pos:line="1014" pos:column="31">ch</name></decl></param>)</parameter_list> <block pos:line="1014" pos:column="35">{
	<return pos:line="1015" pos:column="9">return <expr><op:operator pos:line="1015" pos:column="16">(</op:operator><name pos:line="1015" pos:column="17">ch</name> <op:operator pos:line="1015" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="1015" pos:column="23">' '</lit:literal><op:operator pos:line="1015" pos:column="26">)</op:operator> <op:operator pos:line="1015" pos:column="28">||</op:operator> <op:operator pos:line="1015" pos:column="31">(</op:operator><name pos:line="1015" pos:column="32">ch</name> <op:operator pos:line="1015" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="1015" pos:column="38">'\t'</lit:literal><op:operator pos:line="1015" pos:column="42">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1018" pos:column="1">static</specifier> <name pos:line="1018" pos:column="8">int</name></type> <name pos:line="1018" pos:column="12">NextTab</name><parameter_list pos:line="1018" pos:column="19">(<param><decl><type><name pos:line="1018" pos:column="20">int</name></type> <name pos:line="1018" pos:column="24">pos</name></decl></param>, <param><decl><type><name pos:line="1018" pos:column="29">int</name></type> <name pos:line="1018" pos:column="33">tabSize</name></decl></param>)</parameter_list> <block pos:line="1018" pos:column="42">{
	<return pos:line="1019" pos:column="9">return <expr><op:operator pos:line="1019" pos:column="16">(</op:operator><op:operator pos:line="1019" pos:column="17">(</op:operator><name pos:line="1019" pos:column="18">pos</name> <op:operator pos:line="1019" pos:column="22">/</op:operator> <name pos:line="1019" pos:column="24">tabSize</name><op:operator pos:line="1019" pos:column="31">)</op:operator> <op:operator pos:line="1019" pos:column="33">+</op:operator> <lit:literal type="number" pos:line="1019" pos:column="35">1</lit:literal><op:operator pos:line="1019" pos:column="36">)</op:operator> <op:operator pos:line="1019" pos:column="38">*</op:operator> <name pos:line="1019" pos:column="40">tabSize</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1022" pos:column="1">static</specifier> <name pos:line="1022" pos:column="8">void</name></type> <name pos:line="1022" pos:column="13">CreateIndentation</name><parameter_list pos:line="1022" pos:column="30">(<param><decl><type><name pos:line="1022" pos:column="31">char</name> <type:modifier pos:line="1022" pos:column="36">*</type:modifier></type><name pos:line="1022" pos:column="37">linebuf</name></decl></param>, <param><decl><type><name pos:line="1022" pos:column="46">int</name></type> <name pos:line="1022" pos:column="50">length</name></decl></param>, <param><decl><type><name pos:line="1022" pos:column="58">int</name></type> <name pos:line="1022" pos:column="62">indent</name></decl></param>, <param><decl><type><name pos:line="1022" pos:column="70">int</name></type> <name pos:line="1022" pos:column="74">tabSize</name></decl></param>, <param><decl><type><name pos:line="1022" pos:column="83">bool</name></type> <name pos:line="1022" pos:column="88">insertSpaces</name></decl></param>)</parameter_list> <block pos:line="1022" pos:column="102">{
	<expr_stmt><expr><name pos:line="1023" pos:column="9">length</name><op:operator pos:line="1023" pos:column="15">--</op:operator></expr>;</expr_stmt>	<comment type="line" pos:line="1023" pos:column="25">// ensure space for \0</comment>
	<if pos:line="1024" pos:column="9">if <condition pos:line="1024" pos:column="12">(<expr><op:operator pos:line="1024" pos:column="13">!</op:operator><name pos:line="1024" pos:column="14">insertSpaces</name></expr>)</condition><then pos:line="1024" pos:column="27"> <block pos:line="1024" pos:column="28">{
		<while pos:line="1025" pos:column="17">while <condition pos:line="1025" pos:column="23">(<expr><op:operator pos:line="1025" pos:column="24">(</op:operator><name pos:line="1025" pos:column="25">indent</name> <op:operator pos:line="1025" pos:column="32">&gt;=</op:operator> <name pos:line="1025" pos:column="35">tabSize</name><op:operator pos:line="1025" pos:column="42">)</op:operator> <op:operator pos:line="1025" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="1025" pos:column="47">(</op:operator><name pos:line="1025" pos:column="48">length</name> <op:operator pos:line="1025" pos:column="55">&gt;</op:operator> <lit:literal type="number" pos:line="1025" pos:column="57">0</lit:literal><op:operator pos:line="1025" pos:column="58">)</op:operator></expr>)</condition> <block pos:line="1025" pos:column="61">{
			<expr_stmt><expr><op:operator pos:line="1026" pos:column="25">*</op:operator><name pos:line="1026" pos:column="26">linebuf</name><op:operator pos:line="1026" pos:column="33">++</op:operator> <op:operator pos:line="1026" pos:column="36">=</op:operator> <lit:literal type="char" pos:line="1026" pos:column="38">'\t'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1027" pos:column="25">indent</name> <op:operator pos:line="1027" pos:column="32">-=</op:operator> <name pos:line="1027" pos:column="35">tabSize</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="1028" pos:column="25">length</name><op:operator pos:line="1028" pos:column="31">--</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<while pos:line="1031" pos:column="9">while <condition pos:line="1031" pos:column="15">(<expr><op:operator pos:line="1031" pos:column="16">(</op:operator><name pos:line="1031" pos:column="17">indent</name> <op:operator pos:line="1031" pos:column="24">&gt;</op:operator> <lit:literal type="number" pos:line="1031" pos:column="26">0</lit:literal><op:operator pos:line="1031" pos:column="27">)</op:operator> <op:operator pos:line="1031" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="1031" pos:column="32">(</op:operator><name pos:line="1031" pos:column="33">length</name> <op:operator pos:line="1031" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="1031" pos:column="42">0</lit:literal><op:operator pos:line="1031" pos:column="43">)</op:operator></expr>)</condition> <block pos:line="1031" pos:column="46">{
		<expr_stmt><expr><op:operator pos:line="1032" pos:column="17">*</op:operator><name pos:line="1032" pos:column="18">linebuf</name><op:operator pos:line="1032" pos:column="25">++</op:operator> <op:operator pos:line="1032" pos:column="28">=</op:operator> <lit:literal type="char" pos:line="1032" pos:column="30">' '</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1033" pos:column="17">indent</name><op:operator pos:line="1033" pos:column="23">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1034" pos:column="17">length</name><op:operator pos:line="1034" pos:column="23">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><op:operator pos:line="1036" pos:column="9">*</op:operator><name pos:line="1036" pos:column="10">linebuf</name> <op:operator pos:line="1036" pos:column="18">=</op:operator> <lit:literal type="char" pos:line="1036" pos:column="20">'\0'</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1039" pos:column="1">int</name> <name pos:line="1039" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="1039" pos:column="16">Document</name><op:operator pos:line="1039" pos:column="24">::</op:operator><name pos:line="1039" pos:column="26">GetLineIndentation</name></name><parameter_list pos:line="1039" pos:column="44">(<param><decl><type><name pos:line="1039" pos:column="45">int</name></type> <name pos:line="1039" pos:column="49">line</name></decl></param>)</parameter_list> <block pos:line="1039" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="1040" pos:column="9">int</name></type> <name pos:line="1040" pos:column="13">indent</name> <init pos:line="1040" pos:column="20">= <expr><lit:literal type="number" pos:line="1040" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="1041" pos:column="9">if <condition pos:line="1041" pos:column="12">(<expr><op:operator pos:line="1041" pos:column="13">(</op:operator><name pos:line="1041" pos:column="14">line</name> <op:operator pos:line="1041" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="1041" pos:column="22">0</lit:literal><op:operator pos:line="1041" pos:column="23">)</op:operator> <op:operator pos:line="1041" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="1041" pos:column="28">(</op:operator><name pos:line="1041" pos:column="29">line</name> <op:operator pos:line="1041" pos:column="34">&lt;</op:operator> <call><name pos:line="1041" pos:column="36">LinesTotal</name><argument_list pos:line="1041" pos:column="46">()</argument_list></call><op:operator pos:line="1041" pos:column="48">)</op:operator></expr>)</condition><then pos:line="1041" pos:column="50"> <block pos:line="1041" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="1042" pos:column="17">int</name></type> <name pos:line="1042" pos:column="21">lineStart</name> <init pos:line="1042" pos:column="31">= <expr><call><name pos:line="1042" pos:column="33">LineStart</name><argument_list pos:line="1042" pos:column="42">(<argument><expr><name pos:line="1042" pos:column="43">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1043" pos:column="17">int</name></type> <name pos:line="1043" pos:column="21">length</name> <init pos:line="1043" pos:column="28">= <expr><call><name pos:line="1043" pos:column="30">Length</name><argument_list pos:line="1043" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="1044" pos:column="17">for (<init><decl><type><name pos:line="1044" pos:column="22">int</name></type> <name pos:line="1044" pos:column="26">i</name> <init pos:line="1044" pos:column="28">= <expr><name pos:line="1044" pos:column="30">lineStart</name></expr></init></decl>;</init> <condition><expr><name pos:line="1044" pos:column="41">i</name> <op:operator pos:line="1044" pos:column="43">&lt;</op:operator> <name pos:line="1044" pos:column="45">length</name></expr>;</condition> <incr><expr><name pos:line="1044" pos:column="53">i</name><op:operator pos:line="1044" pos:column="54">++</op:operator></expr></incr>) <block pos:line="1044" pos:column="58">{
			<decl_stmt><decl><type><name pos:line="1045" pos:column="25">char</name></type> <name pos:line="1045" pos:column="30">ch</name> <init pos:line="1045" pos:column="33">= <expr><call><name><name pos:line="1045" pos:column="35">cb</name><op:operator pos:line="1045" pos:column="37">.</op:operator><name pos:line="1045" pos:column="38">CharAt</name></name><argument_list pos:line="1045" pos:column="44">(<argument><expr><name pos:line="1045" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1046" pos:column="25">if <condition pos:line="1046" pos:column="28">(<expr><name pos:line="1046" pos:column="29">ch</name> <op:operator pos:line="1046" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1046" pos:column="35">' '</lit:literal></expr>)</condition><then pos:line="1046" pos:column="39">
				<expr_stmt><expr><name pos:line="1047" pos:column="33">indent</name><op:operator pos:line="1047" pos:column="39">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="1048" pos:column="25">else <if pos:line="1048" pos:column="30">if <condition pos:line="1048" pos:column="33">(<expr><name pos:line="1048" pos:column="34">ch</name> <op:operator pos:line="1048" pos:column="37">==</op:operator> <lit:literal type="char" pos:line="1048" pos:column="40">'\t'</lit:literal></expr>)</condition><then pos:line="1048" pos:column="45">
				<expr_stmt><expr><name pos:line="1049" pos:column="33">indent</name> <op:operator pos:line="1049" pos:column="40">=</op:operator> <call><name pos:line="1049" pos:column="42">NextTab</name><argument_list pos:line="1049" pos:column="49">(<argument><expr><name pos:line="1049" pos:column="50">indent</name></expr></argument>, <argument><expr><name pos:line="1049" pos:column="58">tabInChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="1050" pos:column="25">else
				<return pos:line="1051" pos:column="33">return <expr><name pos:line="1051" pos:column="40">indent</name></expr>;</return></else></if></else></if>
		}</block></for>
	}</block></then></if>
	<return pos:line="1054" pos:column="9">return <expr><name pos:line="1054" pos:column="16">indent</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1057" pos:column="1">void</name></type> <name><name pos:line="1057" pos:column="6">Document</name><op:operator pos:line="1057" pos:column="14">::</op:operator><name pos:line="1057" pos:column="16">SetLineIndentation</name></name><parameter_list pos:line="1057" pos:column="34">(<param><decl><type><name pos:line="1057" pos:column="35">int</name></type> <name pos:line="1057" pos:column="39">line</name></decl></param>, <param><decl><type><name pos:line="1057" pos:column="45">int</name></type> <name pos:line="1057" pos:column="49">indent</name></decl></param>)</parameter_list> <block pos:line="1057" pos:column="57">{
	<decl_stmt><decl><type><name pos:line="1058" pos:column="9">int</name></type> <name pos:line="1058" pos:column="13">indentOfLine</name> <init pos:line="1058" pos:column="26">= <expr><call><name pos:line="1058" pos:column="28">GetLineIndentation</name><argument_list pos:line="1058" pos:column="46">(<argument><expr><name pos:line="1058" pos:column="47">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1059" pos:column="9">if <condition pos:line="1059" pos:column="12">(<expr><name pos:line="1059" pos:column="13">indent</name> <op:operator pos:line="1059" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="1059" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="1059" pos:column="24">
		<expr_stmt><expr><name pos:line="1060" pos:column="17">indent</name> <op:operator pos:line="1060" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="1060" pos:column="26">0</lit:literal></expr>;</expr_stmt></then></if>
	<if pos:line="1061" pos:column="9">if <condition pos:line="1061" pos:column="12">(<expr><name pos:line="1061" pos:column="13">indent</name> <op:operator pos:line="1061" pos:column="20">!=</op:operator> <name pos:line="1061" pos:column="23">indentOfLine</name></expr>)</condition><then pos:line="1061" pos:column="36"> <block pos:line="1061" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="1062" pos:column="17">char</name></type> <name><name pos:line="1062" pos:column="22">linebuf</name><index pos:line="1062" pos:column="29">[<expr><lit:literal type="number" pos:line="1062" pos:column="30">1000</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1063" pos:column="17">CreateIndentation</name><argument_list pos:line="1063" pos:column="34">(<argument><expr><name pos:line="1063" pos:column="35">linebuf</name></expr></argument>, <argument><expr><sizeof pos:line="1063" pos:column="44">sizeof<argument_list pos:line="1063" pos:column="50">(<argument><expr><name pos:line="1063" pos:column="51">linebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1063" pos:column="61">indent</name></expr></argument>, <argument><expr><name pos:line="1063" pos:column="69">tabInChars</name></expr></argument>, <argument><expr><op:operator pos:line="1063" pos:column="81">!</op:operator><name pos:line="1063" pos:column="82">useTabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1064" pos:column="17">int</name></type> <name pos:line="1064" pos:column="21">thisLineStart</name> <init pos:line="1064" pos:column="35">= <expr><call><name pos:line="1064" pos:column="37">LineStart</name><argument_list pos:line="1064" pos:column="46">(<argument><expr><name pos:line="1064" pos:column="47">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1065" pos:column="17">int</name></type> <name pos:line="1065" pos:column="21">indentPos</name> <init pos:line="1065" pos:column="31">= <expr><call><name pos:line="1065" pos:column="33">GetLineIndentPosition</name><argument_list pos:line="1065" pos:column="54">(<argument><expr><name pos:line="1065" pos:column="55">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<function_decl><type><name pos:line="1066" pos:column="17">UndoGroup</name></type> <name pos:line="1066" pos:column="27">ug</name><parameter_list pos:line="1066" pos:column="29">(<param><decl><type><name pos:line="1066" pos:column="30">this</name></type></decl></param>)</parameter_list>;</function_decl>
		<expr_stmt><expr><call><name pos:line="1067" pos:column="17">DeleteChars</name><argument_list pos:line="1067" pos:column="28">(<argument><expr><name pos:line="1067" pos:column="29">thisLineStart</name></expr></argument>, <argument><expr><name pos:line="1067" pos:column="44">indentPos</name> <op:operator pos:line="1067" pos:column="54">-</op:operator> <name pos:line="1067" pos:column="56">thisLineStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1068" pos:column="17">InsertCString</name><argument_list pos:line="1068" pos:column="30">(<argument><expr><name pos:line="1068" pos:column="31">thisLineStart</name></expr></argument>, <argument><expr><name pos:line="1068" pos:column="46">linebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1072" pos:column="1">int</name></type> <name><name pos:line="1072" pos:column="5">Document</name><op:operator pos:line="1072" pos:column="13">::</op:operator><name pos:line="1072" pos:column="15">GetLineIndentPosition</name></name><parameter_list pos:line="1072" pos:column="36">(<param><decl><type><name pos:line="1072" pos:column="37">int</name></type> <name pos:line="1072" pos:column="41">line</name></decl></param>)</parameter_list> <specifier pos:line="1072" pos:column="47">const</specifier> <block pos:line="1072" pos:column="53">{
	<if pos:line="1073" pos:column="9">if <condition pos:line="1073" pos:column="12">(<expr><name pos:line="1073" pos:column="13">line</name> <op:operator pos:line="1073" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="1073" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="1073" pos:column="22">
		<return pos:line="1074" pos:column="17">return <expr><lit:literal type="number" pos:line="1074" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="1075" pos:column="9">int</name></type> <name pos:line="1075" pos:column="13">pos</name> <init pos:line="1075" pos:column="17">= <expr><call><name pos:line="1075" pos:column="19">LineStart</name><argument_list pos:line="1075" pos:column="28">(<argument><expr><name pos:line="1075" pos:column="29">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1076" pos:column="9">int</name></type> <name pos:line="1076" pos:column="13">length</name> <init pos:line="1076" pos:column="20">= <expr><call><name pos:line="1076" pos:column="22">Length</name><argument_list pos:line="1076" pos:column="28">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="1077" pos:column="9">while <condition pos:line="1077" pos:column="15">(<expr><op:operator pos:line="1077" pos:column="16">(</op:operator><name pos:line="1077" pos:column="17">pos</name> <op:operator pos:line="1077" pos:column="21">&lt;</op:operator> <name pos:line="1077" pos:column="23">length</name><op:operator pos:line="1077" pos:column="29">)</op:operator> <op:operator pos:line="1077" pos:column="31">&amp;&amp;</op:operator> <call><name pos:line="1077" pos:column="34">isindentchar</name><argument_list pos:line="1077" pos:column="46">(<argument><expr><call><name><name pos:line="1077" pos:column="47">cb</name><op:operator pos:line="1077" pos:column="49">.</op:operator><name pos:line="1077" pos:column="50">CharAt</name></name><argument_list pos:line="1077" pos:column="56">(<argument><expr><name pos:line="1077" pos:column="57">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1077" pos:column="64">{
		<expr_stmt><expr><name pos:line="1078" pos:column="17">pos</name><op:operator pos:line="1078" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="1080" pos:column="9">return <expr><name pos:line="1080" pos:column="16">pos</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1083" pos:column="1">int</name></type> <name><name pos:line="1083" pos:column="5">Document</name><op:operator pos:line="1083" pos:column="13">::</op:operator><name pos:line="1083" pos:column="15">GetColumn</name></name><parameter_list pos:line="1083" pos:column="24">(<param><decl><type><name pos:line="1083" pos:column="25">int</name></type> <name pos:line="1083" pos:column="29">pos</name></decl></param>)</parameter_list> <block pos:line="1083" pos:column="34">{
	<decl_stmt><decl><type><name pos:line="1084" pos:column="9">int</name></type> <name pos:line="1084" pos:column="13">column</name> <init pos:line="1084" pos:column="20">= <expr><lit:literal type="number" pos:line="1084" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1085" pos:column="9">int</name></type> <name pos:line="1085" pos:column="13">line</name> <init pos:line="1085" pos:column="18">= <expr><call><name pos:line="1085" pos:column="20">LineFromPosition</name><argument_list pos:line="1085" pos:column="36">(<argument><expr><name pos:line="1085" pos:column="37">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1086" pos:column="9">if <condition pos:line="1086" pos:column="12">(<expr><op:operator pos:line="1086" pos:column="13">(</op:operator><name pos:line="1086" pos:column="14">line</name> <op:operator pos:line="1086" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="1086" pos:column="22">0</lit:literal><op:operator pos:line="1086" pos:column="23">)</op:operator> <op:operator pos:line="1086" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="1086" pos:column="28">(</op:operator><name pos:line="1086" pos:column="29">line</name> <op:operator pos:line="1086" pos:column="34">&lt;</op:operator> <call><name pos:line="1086" pos:column="36">LinesTotal</name><argument_list pos:line="1086" pos:column="46">()</argument_list></call><op:operator pos:line="1086" pos:column="48">)</op:operator></expr>)</condition><then pos:line="1086" pos:column="50"> <block pos:line="1086" pos:column="51">{
		<for pos:line="1087" pos:column="17">for (<init><decl><type><name pos:line="1087" pos:column="22">int</name></type> <name pos:line="1087" pos:column="26">i</name> <init pos:line="1087" pos:column="28">= <expr><call><name pos:line="1087" pos:column="30">LineStart</name><argument_list pos:line="1087" pos:column="39">(<argument><expr><name pos:line="1087" pos:column="40">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name pos:line="1087" pos:column="47">i</name> <op:operator pos:line="1087" pos:column="49">&lt;</op:operator> <name pos:line="1087" pos:column="51">pos</name></expr>;</condition><incr/>) <block pos:line="1087" pos:column="57">{
			<decl_stmt><decl><type><name pos:line="1088" pos:column="25">char</name></type> <name pos:line="1088" pos:column="30">ch</name> <init pos:line="1088" pos:column="33">= <expr><call><name><name pos:line="1088" pos:column="35">cb</name><op:operator pos:line="1088" pos:column="37">.</op:operator><name pos:line="1088" pos:column="38">CharAt</name></name><argument_list pos:line="1088" pos:column="44">(<argument><expr><name pos:line="1088" pos:column="45">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1089" pos:column="25">if <condition pos:line="1089" pos:column="28">(<expr><name pos:line="1089" pos:column="29">ch</name> <op:operator pos:line="1089" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1089" pos:column="35">'\t'</lit:literal></expr>)</condition><then pos:line="1089" pos:column="40"> <block pos:line="1089" pos:column="41">{
				<expr_stmt><expr><name pos:line="1090" pos:column="33">column</name> <op:operator pos:line="1090" pos:column="40">=</op:operator> <call><name pos:line="1090" pos:column="42">NextTab</name><argument_list pos:line="1090" pos:column="49">(<argument><expr><name pos:line="1090" pos:column="50">column</name></expr></argument>, <argument><expr><name pos:line="1090" pos:column="58">tabInChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1091" pos:column="33">i</name><op:operator pos:line="1091" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1092" pos:column="27">else <if pos:line="1092" pos:column="32">if <condition pos:line="1092" pos:column="35">(<expr><name pos:line="1092" pos:column="36">ch</name> <op:operator pos:line="1092" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1092" pos:column="42">'\r'</lit:literal></expr>)</condition><then pos:line="1092" pos:column="47"> <block pos:line="1092" pos:column="48">{
				<return pos:line="1093" pos:column="33">return <expr><name pos:line="1093" pos:column="40">column</name></expr>;</return>
			}</block></then> <else pos:line="1094" pos:column="27">else <if pos:line="1094" pos:column="32">if <condition pos:line="1094" pos:column="35">(<expr><name pos:line="1094" pos:column="36">ch</name> <op:operator pos:line="1094" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1094" pos:column="42">'\n'</lit:literal></expr>)</condition><then pos:line="1094" pos:column="47"> <block pos:line="1094" pos:column="48">{
				<return pos:line="1095" pos:column="33">return <expr><name pos:line="1095" pos:column="40">column</name></expr>;</return>
			}</block></then> <else pos:line="1096" pos:column="27">else <if pos:line="1096" pos:column="32">if <condition pos:line="1096" pos:column="35">(<expr><name pos:line="1096" pos:column="36">i</name> <op:operator pos:line="1096" pos:column="38">&gt;=</op:operator> <call><name pos:line="1096" pos:column="41">Length</name><argument_list pos:line="1096" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="1096" pos:column="50"> <block pos:line="1096" pos:column="51">{
				<return pos:line="1097" pos:column="33">return <expr><name pos:line="1097" pos:column="40">column</name></expr>;</return>
			}</block></then> <else pos:line="1098" pos:column="27">else <block pos:line="1098" pos:column="32">{
				<expr_stmt><expr><name pos:line="1099" pos:column="33">column</name><op:operator pos:line="1099" pos:column="39">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1100" pos:column="33">i</name> <op:operator pos:line="1100" pos:column="35">=</op:operator> <call><name pos:line="1100" pos:column="37">NextPosition</name><argument_list pos:line="1100" pos:column="49">(<argument><expr><name pos:line="1100" pos:column="50">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1100" pos:column="53">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if></else></if>
		}</block></for>
	}</block></then></if>
	<return pos:line="1104" pos:column="9">return <expr><name pos:line="1104" pos:column="16">column</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1107" pos:column="1">int</name></type> <name><name pos:line="1107" pos:column="5">Document</name><op:operator pos:line="1107" pos:column="13">::</op:operator><name pos:line="1107" pos:column="15">FindColumn</name></name><parameter_list pos:line="1107" pos:column="25">(<param><decl><type><name pos:line="1107" pos:column="26">int</name></type> <name pos:line="1107" pos:column="30">line</name></decl></param>, <param><decl><type><name pos:line="1107" pos:column="36">int</name></type> <name pos:line="1107" pos:column="40">column</name></decl></param>)</parameter_list> <block pos:line="1107" pos:column="48">{
	<decl_stmt><decl><type><name pos:line="1108" pos:column="9">int</name></type> <name pos:line="1108" pos:column="13">position</name> <init pos:line="1108" pos:column="22">= <expr><call><name pos:line="1108" pos:column="24">LineStart</name><argument_list pos:line="1108" pos:column="33">(<argument><expr><name pos:line="1108" pos:column="34">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1109" pos:column="9">if <condition pos:line="1109" pos:column="12">(<expr><op:operator pos:line="1109" pos:column="13">(</op:operator><name pos:line="1109" pos:column="14">line</name> <op:operator pos:line="1109" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="1109" pos:column="22">0</lit:literal><op:operator pos:line="1109" pos:column="23">)</op:operator> <op:operator pos:line="1109" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="1109" pos:column="28">(</op:operator><name pos:line="1109" pos:column="29">line</name> <op:operator pos:line="1109" pos:column="34">&lt;</op:operator> <call><name pos:line="1109" pos:column="36">LinesTotal</name><argument_list pos:line="1109" pos:column="46">()</argument_list></call><op:operator pos:line="1109" pos:column="48">)</op:operator></expr>)</condition><then pos:line="1109" pos:column="50"> <block pos:line="1109" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="1110" pos:column="17">int</name></type> <name pos:line="1110" pos:column="21">columnCurrent</name> <init pos:line="1110" pos:column="35">= <expr><lit:literal type="number" pos:line="1110" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="1111" pos:column="17">while <condition pos:line="1111" pos:column="23">(<expr><op:operator pos:line="1111" pos:column="24">(</op:operator><name pos:line="1111" pos:column="25">columnCurrent</name> <op:operator pos:line="1111" pos:column="39">&lt;</op:operator> <name pos:line="1111" pos:column="41">column</name><op:operator pos:line="1111" pos:column="47">)</op:operator> <op:operator pos:line="1111" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="1111" pos:column="52">(</op:operator><name pos:line="1111" pos:column="53">position</name> <op:operator pos:line="1111" pos:column="62">&lt;</op:operator> <call><name pos:line="1111" pos:column="64">Length</name><argument_list pos:line="1111" pos:column="70">()</argument_list></call><op:operator pos:line="1111" pos:column="72">)</op:operator></expr>)</condition> <block pos:line="1111" pos:column="75">{
			<decl_stmt><decl><type><name pos:line="1112" pos:column="25">char</name></type> <name pos:line="1112" pos:column="30">ch</name> <init pos:line="1112" pos:column="33">= <expr><call><name><name pos:line="1112" pos:column="35">cb</name><op:operator pos:line="1112" pos:column="37">.</op:operator><name pos:line="1112" pos:column="38">CharAt</name></name><argument_list pos:line="1112" pos:column="44">(<argument><expr><name pos:line="1112" pos:column="45">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1113" pos:column="25">if <condition pos:line="1113" pos:column="28">(<expr><name pos:line="1113" pos:column="29">ch</name> <op:operator pos:line="1113" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1113" pos:column="35">'\t'</lit:literal></expr>)</condition><then pos:line="1113" pos:column="40"> <block pos:line="1113" pos:column="41">{
				<expr_stmt><expr><name pos:line="1114" pos:column="33">columnCurrent</name> <op:operator pos:line="1114" pos:column="47">=</op:operator> <call><name pos:line="1114" pos:column="49">NextTab</name><argument_list pos:line="1114" pos:column="56">(<argument><expr><name pos:line="1114" pos:column="57">columnCurrent</name></expr></argument>, <argument><expr><name pos:line="1114" pos:column="72">tabInChars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1115" pos:column="33">position</name><op:operator pos:line="1115" pos:column="41">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1116" pos:column="27">else <if pos:line="1116" pos:column="32">if <condition pos:line="1116" pos:column="35">(<expr><name pos:line="1116" pos:column="36">ch</name> <op:operator pos:line="1116" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1116" pos:column="42">'\r'</lit:literal></expr>)</condition><then pos:line="1116" pos:column="47"> <block pos:line="1116" pos:column="48">{
				<return pos:line="1117" pos:column="33">return <expr><name pos:line="1117" pos:column="40">position</name></expr>;</return>
			}</block></then> <else pos:line="1118" pos:column="27">else <if pos:line="1118" pos:column="32">if <condition pos:line="1118" pos:column="35">(<expr><name pos:line="1118" pos:column="36">ch</name> <op:operator pos:line="1118" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="1118" pos:column="42">'\n'</lit:literal></expr>)</condition><then pos:line="1118" pos:column="47"> <block pos:line="1118" pos:column="48">{
				<return pos:line="1119" pos:column="33">return <expr><name pos:line="1119" pos:column="40">position</name></expr>;</return>
			}</block></then> <else pos:line="1120" pos:column="27">else <block pos:line="1120" pos:column="32">{
				<expr_stmt><expr><name pos:line="1121" pos:column="33">columnCurrent</name><op:operator pos:line="1121" pos:column="46">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1122" pos:column="33">position</name> <op:operator pos:line="1122" pos:column="42">=</op:operator> <call><name pos:line="1122" pos:column="44">NextPosition</name><argument_list pos:line="1122" pos:column="56">(<argument><expr><name pos:line="1122" pos:column="57">position</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1122" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if>
		}</block></while>
	}</block></then></if>
	<return pos:line="1126" pos:column="9">return <expr><name pos:line="1126" pos:column="16">position</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1129" pos:column="1">void</name></type> <name><name pos:line="1129" pos:column="6">Document</name><op:operator pos:line="1129" pos:column="14">::</op:operator><name pos:line="1129" pos:column="16">Indent</name></name><parameter_list pos:line="1129" pos:column="22">(<param><decl><type><name pos:line="1129" pos:column="23">bool</name></type> <name pos:line="1129" pos:column="28">forwards</name></decl></param>, <param><decl><type><name pos:line="1129" pos:column="38">int</name></type> <name pos:line="1129" pos:column="42">lineBottom</name></decl></param>, <param><decl><type><name pos:line="1129" pos:column="54">int</name></type> <name pos:line="1129" pos:column="58">lineTop</name></decl></param>)</parameter_list> <block pos:line="1129" pos:column="67">{
	<comment type="line" pos:line="1130" pos:column="9">// Dedent - suck white space off the front of the line to dedent by equivalent of a tab</comment>
	<for pos:line="1131" pos:column="9">for (<init><decl><type><name pos:line="1131" pos:column="14">int</name></type> <name pos:line="1131" pos:column="18">line</name> <init pos:line="1131" pos:column="23">= <expr><name pos:line="1131" pos:column="25">lineBottom</name></expr></init></decl>;</init> <condition><expr><name pos:line="1131" pos:column="37">line</name> <op:operator pos:line="1131" pos:column="42">&gt;=</op:operator> <name pos:line="1131" pos:column="45">lineTop</name></expr>;</condition> <incr><expr><name pos:line="1131" pos:column="54">line</name><op:operator pos:line="1131" pos:column="58">--</op:operator></expr></incr>) <block pos:line="1131" pos:column="62">{
		<decl_stmt><decl><type><name pos:line="1132" pos:column="17">int</name></type> <name pos:line="1132" pos:column="21">indentOfLine</name> <init pos:line="1132" pos:column="34">= <expr><call><name pos:line="1132" pos:column="36">GetLineIndentation</name><argument_list pos:line="1132" pos:column="54">(<argument><expr><name pos:line="1132" pos:column="55">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1133" pos:column="17">if <condition pos:line="1133" pos:column="20">(<expr><name pos:line="1133" pos:column="21">forwards</name></expr>)</condition><then pos:line="1133" pos:column="30"> <block pos:line="1133" pos:column="31">{
			<if pos:line="1134" pos:column="25">if <condition pos:line="1134" pos:column="28">(<expr><call><name pos:line="1134" pos:column="29">LineStart</name><argument_list pos:line="1134" pos:column="38">(<argument><expr><name pos:line="1134" pos:column="39">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="1134" pos:column="45">&lt;</op:operator> <call><name pos:line="1134" pos:column="47">LineEnd</name><argument_list pos:line="1134" pos:column="54">(<argument><expr><name pos:line="1134" pos:column="55">line</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1134" pos:column="61"> <block pos:line="1134" pos:column="62">{
				<expr_stmt><expr><call><name pos:line="1135" pos:column="33">SetLineIndentation</name><argument_list pos:line="1135" pos:column="51">(<argument><expr><name pos:line="1135" pos:column="52">line</name></expr></argument>, <argument><expr><name pos:line="1135" pos:column="58">indentOfLine</name> <op:operator pos:line="1135" pos:column="71">+</op:operator> <call><name pos:line="1135" pos:column="73">IndentSize</name><argument_list pos:line="1135" pos:column="83">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="1137" pos:column="19">else <block pos:line="1137" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="1138" pos:column="25">SetLineIndentation</name><argument_list pos:line="1138" pos:column="43">(<argument><expr><name pos:line="1138" pos:column="44">line</name></expr></argument>, <argument><expr><name pos:line="1138" pos:column="50">indentOfLine</name> <op:operator pos:line="1138" pos:column="63">-</op:operator> <call><name pos:line="1138" pos:column="65">IndentSize</name><argument_list pos:line="1138" pos:column="75">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>

<comment type="line" pos:line="1143" pos:column="1">// Convert line endings for a piece of text to a particular mode.</comment>
<comment type="line" pos:line="1144" pos:column="1">// Stop at len or when a NUL is found.</comment>
<comment type="line" pos:line="1145" pos:column="1">// Caller must delete the returned pointer.</comment>
<function><type><name pos:line="1146" pos:column="1">char</name> <type:modifier pos:line="1146" pos:column="6">*</type:modifier></type><name><name pos:line="1146" pos:column="7">Document</name><op:operator pos:line="1146" pos:column="15">::</op:operator><name pos:line="1146" pos:column="17">TransformLineEnds</name></name><parameter_list pos:line="1146" pos:column="34">(<param><decl><type><name pos:line="1146" pos:column="35">int</name> <type:modifier pos:line="1146" pos:column="39">*</type:modifier></type><name pos:line="1146" pos:column="40">pLenOut</name></decl></param>, <param><decl><type><specifier pos:line="1146" pos:column="49">const</specifier> <name pos:line="1146" pos:column="55">char</name> <type:modifier pos:line="1146" pos:column="60">*</type:modifier></type><name pos:line="1146" pos:column="61">s</name></decl></param>, <param><decl><type><name pos:line="1146" pos:column="64">size_t</name></type> <name pos:line="1146" pos:column="71">len</name></decl></param>, <param><decl><type><name pos:line="1146" pos:column="76">int</name></type> <name pos:line="1146" pos:column="80">eolMode</name></decl></param>)</parameter_list> <block pos:line="1146" pos:column="89">{
	<decl_stmt><decl><type><name pos:line="1147" pos:column="9">char</name> <type:modifier pos:line="1147" pos:column="14">*</type:modifier></type><name pos:line="1147" pos:column="15">dest</name> <init pos:line="1147" pos:column="20">= <expr><op:operator pos:line="1147" pos:column="22">new</op:operator> <name><name pos:line="1147" pos:column="26">char</name><index pos:line="1147" pos:column="30">[<expr><lit:literal type="number" pos:line="1147" pos:column="31">2</lit:literal> <op:operator pos:line="1147" pos:column="33">*</op:operator> <name pos:line="1147" pos:column="35">len</name> <op:operator pos:line="1147" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="1147" pos:column="41">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="1148" pos:column="9">const</specifier> <name pos:line="1148" pos:column="15">char</name> <type:modifier pos:line="1148" pos:column="20">*</type:modifier></type><name pos:line="1148" pos:column="21">sptr</name> <init pos:line="1148" pos:column="26">= <expr><name pos:line="1148" pos:column="28">s</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1149" pos:column="9">char</name> <type:modifier pos:line="1149" pos:column="14">*</type:modifier></type><name pos:line="1149" pos:column="15">dptr</name> <init pos:line="1149" pos:column="20">= <expr><name pos:line="1149" pos:column="22">dest</name></expr></init></decl>;</decl_stmt>
	<for pos:line="1150" pos:column="9">for (<init><decl><type><name pos:line="1150" pos:column="14">size_t</name></type> <name pos:line="1150" pos:column="21">i</name> <init pos:line="1150" pos:column="23">= <expr><lit:literal type="number" pos:line="1150" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="1150" pos:column="28">(</op:operator><name pos:line="1150" pos:column="29">i</name> <op:operator pos:line="1150" pos:column="31">&lt;</op:operator> <name pos:line="1150" pos:column="33">len</name><op:operator pos:line="1150" pos:column="36">)</op:operator> <op:operator pos:line="1150" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="1150" pos:column="41">(</op:operator><op:operator pos:line="1150" pos:column="42">*</op:operator><name pos:line="1150" pos:column="43">sptr</name> <op:operator pos:line="1150" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="1150" pos:column="51">'\0'</lit:literal><op:operator pos:line="1150" pos:column="55">)</op:operator></expr>;</condition> <incr><expr><name pos:line="1150" pos:column="58">i</name><op:operator pos:line="1150" pos:column="59">++</op:operator></expr></incr>) <block pos:line="1150" pos:column="63">{
		<if pos:line="1151" pos:column="17">if <condition pos:line="1151" pos:column="20">(<expr><op:operator pos:line="1151" pos:column="21">*</op:operator><name pos:line="1151" pos:column="22">sptr</name> <op:operator pos:line="1151" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="1151" pos:column="30">'\n'</lit:literal> <op:operator pos:line="1151" pos:column="35">||</op:operator> <op:operator pos:line="1151" pos:column="38">*</op:operator><name pos:line="1151" pos:column="39">sptr</name> <op:operator pos:line="1151" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="1151" pos:column="47">'\r'</lit:literal></expr>)</condition><then pos:line="1151" pos:column="52"> <block pos:line="1151" pos:column="53">{
			<if pos:line="1152" pos:column="25">if <condition pos:line="1152" pos:column="28">(<expr><name pos:line="1152" pos:column="29">eolMode</name> <op:operator pos:line="1152" pos:column="37">==</op:operator> <name pos:line="1152" pos:column="40">SC_EOL_CR</name></expr>)</condition><then pos:line="1152" pos:column="50"> <block pos:line="1152" pos:column="51">{
				<expr_stmt><expr><op:operator pos:line="1153" pos:column="33">*</op:operator><name pos:line="1153" pos:column="34">dptr</name><op:operator pos:line="1153" pos:column="38">++</op:operator> <op:operator pos:line="1153" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="1153" pos:column="43">'\r'</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="1154" pos:column="27">else <if pos:line="1154" pos:column="32">if <condition pos:line="1154" pos:column="35">(<expr><name pos:line="1154" pos:column="36">eolMode</name> <op:operator pos:line="1154" pos:column="44">==</op:operator> <name pos:line="1154" pos:column="47">SC_EOL_LF</name></expr>)</condition><then pos:line="1154" pos:column="57"> <block pos:line="1154" pos:column="58">{
				<expr_stmt><expr><op:operator pos:line="1155" pos:column="33">*</op:operator><name pos:line="1155" pos:column="34">dptr</name><op:operator pos:line="1155" pos:column="38">++</op:operator> <op:operator pos:line="1155" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="1155" pos:column="43">'\n'</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="1156" pos:column="27">else <block pos:line="1156" pos:column="32">{ <comment type="line" pos:line="1156" pos:column="34">// eolMode == SC_EOL_CRLF</comment>
				<expr_stmt><expr><op:operator pos:line="1157" pos:column="33">*</op:operator><name pos:line="1157" pos:column="34">dptr</name><op:operator pos:line="1157" pos:column="38">++</op:operator> <op:operator pos:line="1157" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="1157" pos:column="43">'\r'</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="1158" pos:column="33">*</op:operator><name pos:line="1158" pos:column="34">dptr</name><op:operator pos:line="1158" pos:column="38">++</op:operator> <op:operator pos:line="1158" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="1158" pos:column="43">'\n'</lit:literal></expr>;</expr_stmt>
			}</block></else></if></else></if>
			<if pos:line="1160" pos:column="25">if <condition pos:line="1160" pos:column="28">(<expr><op:operator pos:line="1160" pos:column="29">(</op:operator><op:operator pos:line="1160" pos:column="30">*</op:operator><name pos:line="1160" pos:column="31">sptr</name> <op:operator pos:line="1160" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="1160" pos:column="39">'\r'</lit:literal><op:operator pos:line="1160" pos:column="43">)</op:operator> <op:operator pos:line="1160" pos:column="45">&amp;&amp;</op:operator> <op:operator pos:line="1160" pos:column="48">(</op:operator><name pos:line="1160" pos:column="49">i</name><op:operator pos:line="1160" pos:column="50">+</op:operator><lit:literal type="number" pos:line="1160" pos:column="51">1</lit:literal> <op:operator pos:line="1160" pos:column="53">&lt;</op:operator> <name pos:line="1160" pos:column="55">len</name><op:operator pos:line="1160" pos:column="58">)</op:operator> <op:operator pos:line="1160" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="1160" pos:column="63">(</op:operator><op:operator pos:line="1160" pos:column="64">*</op:operator><op:operator pos:line="1160" pos:column="65">(</op:operator><name pos:line="1160" pos:column="66">sptr</name><op:operator pos:line="1160" pos:column="70">+</op:operator><lit:literal type="number" pos:line="1160" pos:column="71">1</lit:literal><op:operator pos:line="1160" pos:column="72">)</op:operator> <op:operator pos:line="1160" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="1160" pos:column="77">'\n'</lit:literal><op:operator pos:line="1160" pos:column="81">)</op:operator></expr>)</condition><then pos:line="1160" pos:column="83"> <block pos:line="1160" pos:column="84">{
				<expr_stmt><expr><name pos:line="1161" pos:column="33">i</name><op:operator pos:line="1161" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1162" pos:column="33">sptr</name><op:operator pos:line="1162" pos:column="37">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="1164" pos:column="25">sptr</name><op:operator pos:line="1164" pos:column="29">++</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="1165" pos:column="19">else <block pos:line="1165" pos:column="24">{
			<expr_stmt><expr><op:operator pos:line="1166" pos:column="25">*</op:operator><name pos:line="1166" pos:column="26">dptr</name><op:operator pos:line="1166" pos:column="30">++</op:operator> <op:operator pos:line="1166" pos:column="33">=</op:operator> <op:operator pos:line="1166" pos:column="35">*</op:operator><name pos:line="1166" pos:column="36">sptr</name><op:operator pos:line="1166" pos:column="40">++</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><op:operator pos:line="1169" pos:column="9">*</op:operator><name pos:line="1169" pos:column="10">dptr</name><op:operator pos:line="1169" pos:column="14">++</op:operator> <op:operator pos:line="1169" pos:column="17">=</op:operator> <lit:literal type="char" pos:line="1169" pos:column="19">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="1170" pos:column="9">*</op:operator><name pos:line="1170" pos:column="10">pLenOut</name> <op:operator pos:line="1170" pos:column="18">=</op:operator> <op:operator pos:line="1170" pos:column="20">(</op:operator><name pos:line="1170" pos:column="21">dptr</name> <op:operator pos:line="1170" pos:column="26">-</op:operator> <name pos:line="1170" pos:column="28">dest</name><op:operator pos:line="1170" pos:column="32">)</op:operator> <op:operator pos:line="1170" pos:column="34">-</op:operator> <lit:literal type="number" pos:line="1170" pos:column="36">1</lit:literal></expr>;</expr_stmt>
	<return pos:line="1171" pos:column="9">return <expr><name pos:line="1171" pos:column="16">dest</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1174" pos:column="1">void</name></type> <name><name pos:line="1174" pos:column="6">Document</name><op:operator pos:line="1174" pos:column="14">::</op:operator><name pos:line="1174" pos:column="16">ConvertLineEnds</name></name><parameter_list pos:line="1174" pos:column="31">(<param><decl><type><name pos:line="1174" pos:column="32">int</name></type> <name pos:line="1174" pos:column="36">eolModeSet</name></decl></param>)</parameter_list> <block pos:line="1174" pos:column="48">{
	<function_decl><type><name pos:line="1175" pos:column="9">UndoGroup</name></type> <name pos:line="1175" pos:column="19">ug</name><parameter_list pos:line="1175" pos:column="21">(<param><decl><type><name pos:line="1175" pos:column="22">this</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="1177" pos:column="9">for (<init><decl><type><name pos:line="1177" pos:column="14">int</name></type> <name pos:line="1177" pos:column="18">pos</name> <init pos:line="1177" pos:column="22">= <expr><lit:literal type="number" pos:line="1177" pos:column="24">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1177" pos:column="27">pos</name> <op:operator pos:line="1177" pos:column="31">&lt;</op:operator> <call><name pos:line="1177" pos:column="33">Length</name><argument_list pos:line="1177" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="1177" pos:column="43">pos</name><op:operator pos:line="1177" pos:column="46">++</op:operator></expr></incr>) <block pos:line="1177" pos:column="50">{
		<if pos:line="1178" pos:column="17">if <condition pos:line="1178" pos:column="20">(<expr><call><name><name pos:line="1178" pos:column="21">cb</name><op:operator pos:line="1178" pos:column="23">.</op:operator><name pos:line="1178" pos:column="24">CharAt</name></name><argument_list pos:line="1178" pos:column="30">(<argument><expr><name pos:line="1178" pos:column="31">pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="1178" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="1178" pos:column="39">'\r'</lit:literal></expr>)</condition><then pos:line="1178" pos:column="44"> <block pos:line="1178" pos:column="45">{
			<if pos:line="1179" pos:column="25">if <condition pos:line="1179" pos:column="28">(<expr><call><name><name pos:line="1179" pos:column="29">cb</name><op:operator pos:line="1179" pos:column="31">.</op:operator><name pos:line="1179" pos:column="32">CharAt</name></name><argument_list pos:line="1179" pos:column="38">(<argument><expr><name pos:line="1179" pos:column="39">pos</name> <op:operator pos:line="1179" pos:column="43">+</op:operator> <lit:literal type="number" pos:line="1179" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="1179" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="1179" pos:column="51">'\n'</lit:literal></expr>)</condition><then pos:line="1179" pos:column="56"> <block pos:line="1179" pos:column="57">{
				<comment type="line" pos:line="1180" pos:column="33">// CRLF</comment>
				<if pos:line="1181" pos:column="33">if <condition pos:line="1181" pos:column="36">(<expr><name pos:line="1181" pos:column="37">eolModeSet</name> <op:operator pos:line="1181" pos:column="48">==</op:operator> <name pos:line="1181" pos:column="51">SC_EOL_CR</name></expr>)</condition><then pos:line="1181" pos:column="61"> <block pos:line="1181" pos:column="62">{
					<expr_stmt><expr><call><name pos:line="1182" pos:column="41">DeleteChars</name><argument_list pos:line="1182" pos:column="52">(<argument><expr><name pos:line="1182" pos:column="53">pos</name> <op:operator pos:line="1182" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1182" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1182" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1182" pos:column="66">// Delete the LF</comment>
				}</block></then> <else pos:line="1183" pos:column="35">else <if pos:line="1183" pos:column="40">if <condition pos:line="1183" pos:column="43">(<expr><name pos:line="1183" pos:column="44">eolModeSet</name> <op:operator pos:line="1183" pos:column="55">==</op:operator> <name pos:line="1183" pos:column="58">SC_EOL_LF</name></expr>)</condition><then pos:line="1183" pos:column="68"> <block pos:line="1183" pos:column="69">{
					<expr_stmt><expr><call><name pos:line="1184" pos:column="41">DeleteChars</name><argument_list pos:line="1184" pos:column="52">(<argument><expr><name pos:line="1184" pos:column="53">pos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1184" pos:column="58">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1184" pos:column="62">// Delete the CR</comment>
				}</block></then> <else pos:line="1185" pos:column="35">else <block pos:line="1185" pos:column="40">{
					<expr_stmt><expr><name pos:line="1186" pos:column="41">pos</name><op:operator pos:line="1186" pos:column="44">++</op:operator></expr>;</expr_stmt>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="1188" pos:column="27">else <block pos:line="1188" pos:column="32">{
				<comment type="line" pos:line="1189" pos:column="33">// CR</comment>
				<if pos:line="1190" pos:column="33">if <condition pos:line="1190" pos:column="36">(<expr><name pos:line="1190" pos:column="37">eolModeSet</name> <op:operator pos:line="1190" pos:column="48">==</op:operator> <name pos:line="1190" pos:column="51">SC_EOL_CRLF</name></expr>)</condition><then pos:line="1190" pos:column="63"> <block pos:line="1190" pos:column="64">{
					<expr_stmt><expr><call><name pos:line="1191" pos:column="41">InsertString</name><argument_list pos:line="1191" pos:column="53">(<argument><expr><name pos:line="1191" pos:column="54">pos</name> <op:operator pos:line="1191" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="1191" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1191" pos:column="63">"\n"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1191" pos:column="69">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1191" pos:column="73">// Insert LF</comment>
					<expr_stmt><expr><name pos:line="1192" pos:column="41">pos</name><op:operator pos:line="1192" pos:column="44">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="1193" pos:column="35">else <if pos:line="1193" pos:column="40">if <condition pos:line="1193" pos:column="43">(<expr><name pos:line="1193" pos:column="44">eolModeSet</name> <op:operator pos:line="1193" pos:column="55">==</op:operator> <name pos:line="1193" pos:column="58">SC_EOL_LF</name></expr>)</condition><then pos:line="1193" pos:column="68"> <block pos:line="1193" pos:column="69">{
					<expr_stmt><expr><call><name pos:line="1194" pos:column="41">InsertString</name><argument_list pos:line="1194" pos:column="53">(<argument><expr><name pos:line="1194" pos:column="54">pos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1194" pos:column="59">"\n"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1194" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1194" pos:column="69">// Insert LF</comment>
					<expr_stmt><expr><call><name pos:line="1195" pos:column="41">DeleteChars</name><argument_list pos:line="1195" pos:column="52">(<argument><expr><name pos:line="1195" pos:column="53">pos</name> <op:operator pos:line="1195" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="1195" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1195" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1195" pos:column="66">// Delete CR</comment>
				}</block></then></if></else></if>
			}</block></else></if>
		}</block></then> <else pos:line="1198" pos:column="19">else <if pos:line="1198" pos:column="24">if <condition pos:line="1198" pos:column="27">(<expr><call><name><name pos:line="1198" pos:column="28">cb</name><op:operator pos:line="1198" pos:column="30">.</op:operator><name pos:line="1198" pos:column="31">CharAt</name></name><argument_list pos:line="1198" pos:column="37">(<argument><expr><name pos:line="1198" pos:column="38">pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="1198" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="1198" pos:column="46">'\n'</lit:literal></expr>)</condition><then pos:line="1198" pos:column="51"> <block pos:line="1198" pos:column="52">{
			<comment type="line" pos:line="1199" pos:column="25">// LF</comment>
			<if pos:line="1200" pos:column="25">if <condition pos:line="1200" pos:column="28">(<expr><name pos:line="1200" pos:column="29">eolModeSet</name> <op:operator pos:line="1200" pos:column="40">==</op:operator> <name pos:line="1200" pos:column="43">SC_EOL_CRLF</name></expr>)</condition><then pos:line="1200" pos:column="55"> <block pos:line="1200" pos:column="56">{
				<expr_stmt><expr><call><name pos:line="1201" pos:column="33">InsertString</name><argument_list pos:line="1201" pos:column="45">(<argument><expr><name pos:line="1201" pos:column="46">pos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1201" pos:column="51">"\r"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1201" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1201" pos:column="61">// Insert CR</comment>
				<expr_stmt><expr><name pos:line="1202" pos:column="33">pos</name><op:operator pos:line="1202" pos:column="36">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="1203" pos:column="27">else <if pos:line="1203" pos:column="32">if <condition pos:line="1203" pos:column="35">(<expr><name pos:line="1203" pos:column="36">eolModeSet</name> <op:operator pos:line="1203" pos:column="47">==</op:operator> <name pos:line="1203" pos:column="50">SC_EOL_CR</name></expr>)</condition><then pos:line="1203" pos:column="60"> <block pos:line="1203" pos:column="61">{
				<expr_stmt><expr><call><name pos:line="1204" pos:column="33">InsertString</name><argument_list pos:line="1204" pos:column="45">(<argument><expr><name pos:line="1204" pos:column="46">pos</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="1204" pos:column="51">"\r"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1204" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1204" pos:column="61">// Insert CR</comment>
				<expr_stmt><expr><call><name pos:line="1205" pos:column="33">DeleteChars</name><argument_list pos:line="1205" pos:column="44">(<argument><expr><name pos:line="1205" pos:column="45">pos</name> <op:operator pos:line="1205" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="1205" pos:column="51">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1205" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1205" pos:column="58">// Delete LF</comment>
			}</block></then></if></else></if>
		}</block></then></if></else></if>
	}</block></for>

}</block></function>

<function><type><name pos:line="1212" pos:column="1">bool</name></type> <name><name pos:line="1212" pos:column="6">Document</name><op:operator pos:line="1212" pos:column="14">::</op:operator><name pos:line="1212" pos:column="16">IsWhiteLine</name></name><parameter_list pos:line="1212" pos:column="27">(<param><decl><type><name pos:line="1212" pos:column="28">int</name></type> <name pos:line="1212" pos:column="32">line</name></decl></param>)</parameter_list> <specifier pos:line="1212" pos:column="38">const</specifier> <block pos:line="1212" pos:column="44">{
	<decl_stmt><decl><type><name pos:line="1213" pos:column="9">int</name></type> <name pos:line="1213" pos:column="13">currentChar</name> <init pos:line="1213" pos:column="25">= <expr><call><name pos:line="1213" pos:column="27">LineStart</name><argument_list pos:line="1213" pos:column="36">(<argument><expr><name pos:line="1213" pos:column="37">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1214" pos:column="9">int</name></type> <name pos:line="1214" pos:column="13">endLine</name> <init pos:line="1214" pos:column="21">= <expr><call><name pos:line="1214" pos:column="23">LineEnd</name><argument_list pos:line="1214" pos:column="30">(<argument><expr><name pos:line="1214" pos:column="31">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="1215" pos:column="9">while <condition pos:line="1215" pos:column="15">(<expr><name pos:line="1215" pos:column="16">currentChar</name> <op:operator pos:line="1215" pos:column="28">&lt;</op:operator> <name pos:line="1215" pos:column="30">endLine</name></expr>)</condition> <block pos:line="1215" pos:column="39">{
		<if pos:line="1216" pos:column="17">if <condition pos:line="1216" pos:column="20">(<expr><call><name><name pos:line="1216" pos:column="21">cb</name><op:operator pos:line="1216" pos:column="23">.</op:operator><name pos:line="1216" pos:column="24">CharAt</name></name><argument_list pos:line="1216" pos:column="30">(<argument><expr><name pos:line="1216" pos:column="31">currentChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="1216" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="1216" pos:column="47">' '</lit:literal> <op:operator pos:line="1216" pos:column="51">&amp;&amp;</op:operator> <call><name><name pos:line="1216" pos:column="54">cb</name><op:operator pos:line="1216" pos:column="56">.</op:operator><name pos:line="1216" pos:column="57">CharAt</name></name><argument_list pos:line="1216" pos:column="63">(<argument><expr><name pos:line="1216" pos:column="64">currentChar</name></expr></argument>)</argument_list></call> <op:operator pos:line="1216" pos:column="77">!=</op:operator> <lit:literal type="char" pos:line="1216" pos:column="80">'\t'</lit:literal></expr>)</condition><then pos:line="1216" pos:column="85"> <block pos:line="1216" pos:column="86">{
			<return pos:line="1217" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1217" pos:column="32">false</lit:literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><op:operator pos:line="1219" pos:column="17">++</op:operator><name pos:line="1219" pos:column="19">currentChar</name></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="1221" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1221" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1224" pos:column="1">int</name></type> <name><name pos:line="1224" pos:column="5">Document</name><op:operator pos:line="1224" pos:column="13">::</op:operator><name pos:line="1224" pos:column="15">ParaUp</name></name><parameter_list pos:line="1224" pos:column="21">(<param><decl><type><name pos:line="1224" pos:column="22">int</name></type> <name pos:line="1224" pos:column="26">pos</name></decl></param>)</parameter_list> <block pos:line="1224" pos:column="31">{
	<decl_stmt><decl><type><name pos:line="1225" pos:column="9">int</name></type> <name pos:line="1225" pos:column="13">line</name> <init pos:line="1225" pos:column="18">= <expr><call><name pos:line="1225" pos:column="20">LineFromPosition</name><argument_list pos:line="1225" pos:column="36">(<argument><expr><name pos:line="1225" pos:column="37">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="1226" pos:column="9">line</name><op:operator pos:line="1226" pos:column="13">--</op:operator></expr>;</expr_stmt>
	<while pos:line="1227" pos:column="9">while <condition pos:line="1227" pos:column="15">(<expr><name pos:line="1227" pos:column="16">line</name> <op:operator pos:line="1227" pos:column="21">&gt;=</op:operator> <lit:literal type="number" pos:line="1227" pos:column="24">0</lit:literal> <op:operator pos:line="1227" pos:column="26">&amp;&amp;</op:operator> <call><name pos:line="1227" pos:column="29">IsWhiteLine</name><argument_list pos:line="1227" pos:column="40">(<argument><expr><name pos:line="1227" pos:column="41">line</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1227" pos:column="48">{ <comment type="line" pos:line="1227" pos:column="50">// skip empty lines</comment>
		<expr_stmt><expr><name pos:line="1228" pos:column="17">line</name><op:operator pos:line="1228" pos:column="21">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<while pos:line="1230" pos:column="9">while <condition pos:line="1230" pos:column="15">(<expr><name pos:line="1230" pos:column="16">line</name> <op:operator pos:line="1230" pos:column="21">&gt;=</op:operator> <lit:literal type="number" pos:line="1230" pos:column="24">0</lit:literal> <op:operator pos:line="1230" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="1230" pos:column="29">!</op:operator><call><name pos:line="1230" pos:column="30">IsWhiteLine</name><argument_list pos:line="1230" pos:column="41">(<argument><expr><name pos:line="1230" pos:column="42">line</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1230" pos:column="49">{ <comment type="line" pos:line="1230" pos:column="51">// skip non-empty lines</comment>
		<expr_stmt><expr><name pos:line="1231" pos:column="17">line</name><op:operator pos:line="1231" pos:column="21">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name pos:line="1233" pos:column="9">line</name><op:operator pos:line="1233" pos:column="13">++</op:operator></expr>;</expr_stmt>
	<return pos:line="1234" pos:column="9">return <expr><call><name pos:line="1234" pos:column="16">LineStart</name><argument_list pos:line="1234" pos:column="25">(<argument><expr><name pos:line="1234" pos:column="26">line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1237" pos:column="1">int</name></type> <name><name pos:line="1237" pos:column="5">Document</name><op:operator pos:line="1237" pos:column="13">::</op:operator><name pos:line="1237" pos:column="15">ParaDown</name></name><parameter_list pos:line="1237" pos:column="23">(<param><decl><type><name pos:line="1237" pos:column="24">int</name></type> <name pos:line="1237" pos:column="28">pos</name></decl></param>)</parameter_list> <block pos:line="1237" pos:column="33">{
	<decl_stmt><decl><type><name pos:line="1238" pos:column="9">int</name></type> <name pos:line="1238" pos:column="13">line</name> <init pos:line="1238" pos:column="18">= <expr><call><name pos:line="1238" pos:column="20">LineFromPosition</name><argument_list pos:line="1238" pos:column="36">(<argument><expr><name pos:line="1238" pos:column="37">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="1239" pos:column="9">while <condition pos:line="1239" pos:column="15">(<expr><name pos:line="1239" pos:column="16">line</name> <op:operator pos:line="1239" pos:column="21">&lt;</op:operator> <call><name pos:line="1239" pos:column="23">LinesTotal</name><argument_list pos:line="1239" pos:column="33">()</argument_list></call> <op:operator pos:line="1239" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="1239" pos:column="39">!</op:operator><call><name pos:line="1239" pos:column="40">IsWhiteLine</name><argument_list pos:line="1239" pos:column="51">(<argument><expr><name pos:line="1239" pos:column="52">line</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1239" pos:column="59">{ <comment type="line" pos:line="1239" pos:column="61">// skip non-empty lines</comment>
		<expr_stmt><expr><name pos:line="1240" pos:column="17">line</name><op:operator pos:line="1240" pos:column="21">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<while pos:line="1242" pos:column="9">while <condition pos:line="1242" pos:column="15">(<expr><name pos:line="1242" pos:column="16">line</name> <op:operator pos:line="1242" pos:column="21">&lt;</op:operator> <call><name pos:line="1242" pos:column="23">LinesTotal</name><argument_list pos:line="1242" pos:column="33">()</argument_list></call> <op:operator pos:line="1242" pos:column="36">&amp;&amp;</op:operator> <call><name pos:line="1242" pos:column="39">IsWhiteLine</name><argument_list pos:line="1242" pos:column="50">(<argument><expr><name pos:line="1242" pos:column="51">line</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1242" pos:column="58">{ <comment type="line" pos:line="1242" pos:column="60">// skip empty lines</comment>
		<expr_stmt><expr><name pos:line="1243" pos:column="17">line</name><op:operator pos:line="1243" pos:column="21">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="1245" pos:column="9">if <condition pos:line="1245" pos:column="12">(<expr><name pos:line="1245" pos:column="13">line</name> <op:operator pos:line="1245" pos:column="18">&lt;</op:operator> <call><name pos:line="1245" pos:column="20">LinesTotal</name><argument_list pos:line="1245" pos:column="30">()</argument_list></call></expr>)</condition><then pos:line="1245" pos:column="33">
		<return pos:line="1246" pos:column="17">return <expr><call><name pos:line="1246" pos:column="24">LineStart</name><argument_list pos:line="1246" pos:column="33">(<argument><expr><name pos:line="1246" pos:column="34">line</name></expr></argument>)</argument_list></call></expr>;</return></then>
	<else pos:line="1247" pos:column="9">else <comment type="line" pos:line="1247" pos:column="14">// end of a document</comment>
		<return pos:line="1248" pos:column="17">return <expr><call><name pos:line="1248" pos:column="24">LineEnd</name><argument_list pos:line="1248" pos:column="31">(<argument><expr><name pos:line="1248" pos:column="32">line</name><op:operator pos:line="1248" pos:column="36">-</op:operator><lit:literal type="number" pos:line="1248" pos:column="37">1</lit:literal></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<function><type><name><name pos:line="1251" pos:column="1">CharClassify</name><op:operator pos:line="1251" pos:column="13">::</op:operator><name pos:line="1251" pos:column="15">cc</name></name></type> <name><name pos:line="1251" pos:column="18">Document</name><op:operator pos:line="1251" pos:column="26">::</op:operator><name pos:line="1251" pos:column="28">WordCharClass</name></name><parameter_list pos:line="1251" pos:column="41">(<param><decl><type><name pos:line="1251" pos:column="42">unsigned</name> <name pos:line="1251" pos:column="51">char</name></type> <name pos:line="1251" pos:column="56">ch</name></decl></param>)</parameter_list> <block pos:line="1251" pos:column="60">{
	<if pos:line="1252" pos:column="9">if <condition pos:line="1252" pos:column="12">(<expr><op:operator pos:line="1252" pos:column="13">(</op:operator><name pos:line="1252" pos:column="14">SC_CP_UTF8</name> <op:operator pos:line="1252" pos:column="25">==</op:operator> <name pos:line="1252" pos:column="28">dbcsCodePage</name><op:operator pos:line="1252" pos:column="40">)</op:operator> <op:operator pos:line="1252" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="1252" pos:column="45">(</op:operator><name pos:line="1252" pos:column="46">ch</name> <op:operator pos:line="1252" pos:column="49">&gt;=</op:operator> <lit:literal type="number" pos:line="1252" pos:column="52">0x80</lit:literal><op:operator pos:line="1252" pos:column="56">)</op:operator></expr>)</condition><then pos:line="1252" pos:column="58">
		<return pos:line="1253" pos:column="17">return <expr><name><name pos:line="1253" pos:column="24">CharClassify</name><op:operator pos:line="1253" pos:column="36">::</op:operator><name pos:line="1253" pos:column="38">ccWord</name></name></expr>;</return></then></if>
	<return pos:line="1254" pos:column="9">return <expr><call><name><name pos:line="1254" pos:column="16">charClass</name><op:operator pos:line="1254" pos:column="25">.</op:operator><name pos:line="1254" pos:column="26">GetClass</name></name><argument_list pos:line="1254" pos:column="34">(<argument><expr><name pos:line="1254" pos:column="35">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="1257" pos:column="1">/**
 * Used by commmands that want to select whole words.
 * Finds the start of word at pos when delta &lt; 0 or the end of the word when delta &gt;= 0.
 */</comment>
<function><type><name pos:line="1261" pos:column="1">int</name></type> <name><name pos:line="1261" pos:column="5">Document</name><op:operator pos:line="1261" pos:column="13">::</op:operator><name pos:line="1261" pos:column="15">ExtendWordSelect</name></name><parameter_list pos:line="1261" pos:column="31">(<param><decl><type><name pos:line="1261" pos:column="32">int</name></type> <name pos:line="1261" pos:column="36">pos</name></decl></param>, <param><decl><type><name pos:line="1261" pos:column="41">int</name></type> <name pos:line="1261" pos:column="45">delta</name></decl></param>, <param><decl><type><name pos:line="1261" pos:column="52">bool</name></type> <name pos:line="1261" pos:column="57">onlyWordCharacters</name></decl></param>)</parameter_list> <block pos:line="1261" pos:column="77">{
	<decl_stmt><decl><type><name><name pos:line="1262" pos:column="9">CharClassify</name><op:operator pos:line="1262" pos:column="21">::</op:operator><name pos:line="1262" pos:column="23">cc</name></name></type> <name pos:line="1262" pos:column="26">ccStart</name> <init pos:line="1262" pos:column="34">= <expr><name><name pos:line="1262" pos:column="36">CharClassify</name><op:operator pos:line="1262" pos:column="48">::</op:operator><name pos:line="1262" pos:column="50">ccWord</name></name></expr></init></decl>;</decl_stmt>
	<if pos:line="1263" pos:column="9">if <condition pos:line="1263" pos:column="12">(<expr><name pos:line="1263" pos:column="13">delta</name> <op:operator pos:line="1263" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="1263" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="1263" pos:column="23"> <block pos:line="1263" pos:column="24">{
		<if pos:line="1264" pos:column="17">if <condition pos:line="1264" pos:column="20">(<expr><op:operator pos:line="1264" pos:column="21">!</op:operator><name pos:line="1264" pos:column="22">onlyWordCharacters</name></expr>)</condition><then pos:line="1264" pos:column="41">
			<expr_stmt><expr><name pos:line="1265" pos:column="25">ccStart</name> <op:operator pos:line="1265" pos:column="33">=</op:operator> <call><name pos:line="1265" pos:column="35">WordCharClass</name><argument_list pos:line="1265" pos:column="48">(<argument><expr><call><name><name pos:line="1265" pos:column="49">cb</name><op:operator pos:line="1265" pos:column="51">.</op:operator><name pos:line="1265" pos:column="52">CharAt</name></name><argument_list pos:line="1265" pos:column="58">(<argument><expr><name pos:line="1265" pos:column="59">pos</name><op:operator pos:line="1265" pos:column="62">-</op:operator><lit:literal type="number" pos:line="1265" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<while pos:line="1266" pos:column="17">while <condition pos:line="1266" pos:column="23">(<expr><name pos:line="1266" pos:column="24">pos</name> <op:operator pos:line="1266" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="1266" pos:column="30">0</lit:literal> <op:operator pos:line="1266" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="1266" pos:column="35">(</op:operator><call><name pos:line="1266" pos:column="36">WordCharClass</name><argument_list pos:line="1266" pos:column="49">(<argument><expr><call><name><name pos:line="1266" pos:column="50">cb</name><op:operator pos:line="1266" pos:column="52">.</op:operator><name pos:line="1266" pos:column="53">CharAt</name></name><argument_list pos:line="1266" pos:column="59">(<argument><expr><name pos:line="1266" pos:column="60">pos</name> <op:operator pos:line="1266" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="1266" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1266" pos:column="70">==</op:operator> <name pos:line="1266" pos:column="73">ccStart</name><op:operator pos:line="1266" pos:column="80">)</op:operator></expr>)</condition>
			<expr_stmt><expr><name pos:line="1267" pos:column="25">pos</name><op:operator pos:line="1267" pos:column="28">--</op:operator></expr>;</expr_stmt></while>
	}</block></then> <else pos:line="1268" pos:column="11">else <block pos:line="1268" pos:column="16">{
		<if pos:line="1269" pos:column="17">if <condition pos:line="1269" pos:column="20">(<expr><op:operator pos:line="1269" pos:column="21">!</op:operator><name pos:line="1269" pos:column="22">onlyWordCharacters</name> <op:operator pos:line="1269" pos:column="41">&amp;&amp;</op:operator> <name pos:line="1269" pos:column="44">pos</name> <op:operator pos:line="1269" pos:column="48">&lt;</op:operator> <call><name pos:line="1269" pos:column="50">Length</name><argument_list pos:line="1269" pos:column="56">()</argument_list></call></expr>)</condition><then pos:line="1269" pos:column="59">
			<expr_stmt><expr><name pos:line="1270" pos:column="25">ccStart</name> <op:operator pos:line="1270" pos:column="33">=</op:operator> <call><name pos:line="1270" pos:column="35">WordCharClass</name><argument_list pos:line="1270" pos:column="48">(<argument><expr><call><name><name pos:line="1270" pos:column="49">cb</name><op:operator pos:line="1270" pos:column="51">.</op:operator><name pos:line="1270" pos:column="52">CharAt</name></name><argument_list pos:line="1270" pos:column="58">(<argument><expr><name pos:line="1270" pos:column="59">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<while pos:line="1271" pos:column="17">while <condition pos:line="1271" pos:column="23">(<expr><name pos:line="1271" pos:column="24">pos</name> <op:operator pos:line="1271" pos:column="28">&lt;</op:operator> <op:operator pos:line="1271" pos:column="30">(</op:operator><call><name pos:line="1271" pos:column="31">Length</name><argument_list pos:line="1271" pos:column="37">()</argument_list></call><op:operator pos:line="1271" pos:column="39">)</op:operator> <op:operator pos:line="1271" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1271" pos:column="44">(</op:operator><call><name pos:line="1271" pos:column="45">WordCharClass</name><argument_list pos:line="1271" pos:column="58">(<argument><expr><call><name><name pos:line="1271" pos:column="59">cb</name><op:operator pos:line="1271" pos:column="61">.</op:operator><name pos:line="1271" pos:column="62">CharAt</name></name><argument_list pos:line="1271" pos:column="68">(<argument><expr><name pos:line="1271" pos:column="69">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1271" pos:column="75">==</op:operator> <name pos:line="1271" pos:column="78">ccStart</name><op:operator pos:line="1271" pos:column="85">)</op:operator></expr>)</condition>
			<expr_stmt><expr><name pos:line="1272" pos:column="25">pos</name><op:operator pos:line="1272" pos:column="28">++</op:operator></expr>;</expr_stmt></while>
	}</block></else></if>
	<return pos:line="1274" pos:column="9">return <expr><call><name pos:line="1274" pos:column="16">MovePositionOutsideChar</name><argument_list pos:line="1274" pos:column="39">(<argument><expr><name pos:line="1274" pos:column="40">pos</name></expr></argument>, <argument><expr><name pos:line="1274" pos:column="45">delta</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1274" pos:column="52">true</lit:literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="1277" pos:column="1">/**
 * Find the start of the next word in either a forward (delta &gt;= 0) or backwards direction
 * (delta &lt; 0).
 * This is looking for a transition between character classes although there is also some
 * additional movement to transit white space.
 * Used by cursor movement by word commands.
 */</comment>
<function><type><name pos:line="1284" pos:column="1">int</name></type> <name><name pos:line="1284" pos:column="5">Document</name><op:operator pos:line="1284" pos:column="13">::</op:operator><name pos:line="1284" pos:column="15">NextWordStart</name></name><parameter_list pos:line="1284" pos:column="28">(<param><decl><type><name pos:line="1284" pos:column="29">int</name></type> <name pos:line="1284" pos:column="33">pos</name></decl></param>, <param><decl><type><name pos:line="1284" pos:column="38">int</name></type> <name pos:line="1284" pos:column="42">delta</name></decl></param>)</parameter_list> <block pos:line="1284" pos:column="49">{
	<if pos:line="1285" pos:column="9">if <condition pos:line="1285" pos:column="12">(<expr><name pos:line="1285" pos:column="13">delta</name> <op:operator pos:line="1285" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="1285" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="1285" pos:column="23"> <block pos:line="1285" pos:column="24">{
		<while pos:line="1286" pos:column="17">while <condition pos:line="1286" pos:column="23">(<expr><name pos:line="1286" pos:column="24">pos</name> <op:operator pos:line="1286" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="1286" pos:column="30">0</lit:literal> <op:operator pos:line="1286" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="1286" pos:column="35">(</op:operator><call><name pos:line="1286" pos:column="36">WordCharClass</name><argument_list pos:line="1286" pos:column="49">(<argument><expr><call><name><name pos:line="1286" pos:column="50">cb</name><op:operator pos:line="1286" pos:column="52">.</op:operator><name pos:line="1286" pos:column="53">CharAt</name></name><argument_list pos:line="1286" pos:column="59">(<argument><expr><name pos:line="1286" pos:column="60">pos</name> <op:operator pos:line="1286" pos:column="64">-</op:operator> <lit:literal type="number" pos:line="1286" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1286" pos:column="70">==</op:operator> <name><name pos:line="1286" pos:column="73">CharClassify</name><op:operator pos:line="1286" pos:column="85">::</op:operator><name pos:line="1286" pos:column="87">ccSpace</name></name><op:operator pos:line="1286" pos:column="94">)</op:operator></expr>)</condition>
			<expr_stmt><expr><name pos:line="1287" pos:column="25">pos</name><op:operator pos:line="1287" pos:column="28">--</op:operator></expr>;</expr_stmt></while>
		<if pos:line="1288" pos:column="17">if <condition pos:line="1288" pos:column="20">(<expr><name pos:line="1288" pos:column="21">pos</name> <op:operator pos:line="1288" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="1288" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="1288" pos:column="29"> <block pos:line="1288" pos:column="30">{
			<decl_stmt><decl><type><name><name pos:line="1289" pos:column="25">CharClassify</name><op:operator pos:line="1289" pos:column="37">::</op:operator><name pos:line="1289" pos:column="39">cc</name></name></type> <name pos:line="1289" pos:column="42">ccStart</name> <init pos:line="1289" pos:column="50">= <expr><call><name pos:line="1289" pos:column="52">WordCharClass</name><argument_list pos:line="1289" pos:column="65">(<argument><expr><call><name><name pos:line="1289" pos:column="66">cb</name><op:operator pos:line="1289" pos:column="68">.</op:operator><name pos:line="1289" pos:column="69">CharAt</name></name><argument_list pos:line="1289" pos:column="75">(<argument><expr><name pos:line="1289" pos:column="76">pos</name><op:operator pos:line="1289" pos:column="79">-</op:operator><lit:literal type="number" pos:line="1289" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<while pos:line="1290" pos:column="25">while <condition pos:line="1290" pos:column="31">(<expr><name pos:line="1290" pos:column="32">pos</name> <op:operator pos:line="1290" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="1290" pos:column="38">0</lit:literal> <op:operator pos:line="1290" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="1290" pos:column="43">(</op:operator><call><name pos:line="1290" pos:column="44">WordCharClass</name><argument_list pos:line="1290" pos:column="57">(<argument><expr><call><name><name pos:line="1290" pos:column="58">cb</name><op:operator pos:line="1290" pos:column="60">.</op:operator><name pos:line="1290" pos:column="61">CharAt</name></name><argument_list pos:line="1290" pos:column="67">(<argument><expr><name pos:line="1290" pos:column="68">pos</name> <op:operator pos:line="1290" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="1290" pos:column="74">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1290" pos:column="78">==</op:operator> <name pos:line="1290" pos:column="81">ccStart</name><op:operator pos:line="1290" pos:column="88">)</op:operator></expr>)</condition> <block pos:line="1290" pos:column="91">{
				<expr_stmt><expr><name pos:line="1291" pos:column="33">pos</name><op:operator pos:line="1291" pos:column="36">--</op:operator></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></then> <else pos:line="1294" pos:column="11">else <block pos:line="1294" pos:column="16">{
		<decl_stmt><decl><type><name><name pos:line="1295" pos:column="17">CharClassify</name><op:operator pos:line="1295" pos:column="29">::</op:operator><name pos:line="1295" pos:column="31">cc</name></name></type> <name pos:line="1295" pos:column="34">ccStart</name> <init pos:line="1295" pos:column="42">= <expr><call><name pos:line="1295" pos:column="44">WordCharClass</name><argument_list pos:line="1295" pos:column="57">(<argument><expr><call><name><name pos:line="1295" pos:column="58">cb</name><op:operator pos:line="1295" pos:column="60">.</op:operator><name pos:line="1295" pos:column="61">CharAt</name></name><argument_list pos:line="1295" pos:column="67">(<argument><expr><name pos:line="1295" pos:column="68">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while pos:line="1296" pos:column="17">while <condition pos:line="1296" pos:column="23">(<expr><name pos:line="1296" pos:column="24">pos</name> <op:operator pos:line="1296" pos:column="28">&lt;</op:operator> <op:operator pos:line="1296" pos:column="30">(</op:operator><call><name pos:line="1296" pos:column="31">Length</name><argument_list pos:line="1296" pos:column="37">()</argument_list></call><op:operator pos:line="1296" pos:column="39">)</op:operator> <op:operator pos:line="1296" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1296" pos:column="44">(</op:operator><call><name pos:line="1296" pos:column="45">WordCharClass</name><argument_list pos:line="1296" pos:column="58">(<argument><expr><call><name><name pos:line="1296" pos:column="59">cb</name><op:operator pos:line="1296" pos:column="61">.</op:operator><name pos:line="1296" pos:column="62">CharAt</name></name><argument_list pos:line="1296" pos:column="68">(<argument><expr><name pos:line="1296" pos:column="69">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1296" pos:column="75">==</op:operator> <name pos:line="1296" pos:column="78">ccStart</name><op:operator pos:line="1296" pos:column="85">)</op:operator></expr>)</condition>
			<expr_stmt><expr><name pos:line="1297" pos:column="25">pos</name><op:operator pos:line="1297" pos:column="28">++</op:operator></expr>;</expr_stmt></while>
		<while pos:line="1298" pos:column="17">while <condition pos:line="1298" pos:column="23">(<expr><name pos:line="1298" pos:column="24">pos</name> <op:operator pos:line="1298" pos:column="28">&lt;</op:operator> <op:operator pos:line="1298" pos:column="30">(</op:operator><call><name pos:line="1298" pos:column="31">Length</name><argument_list pos:line="1298" pos:column="37">()</argument_list></call><op:operator pos:line="1298" pos:column="39">)</op:operator> <op:operator pos:line="1298" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1298" pos:column="44">(</op:operator><call><name pos:line="1298" pos:column="45">WordCharClass</name><argument_list pos:line="1298" pos:column="58">(<argument><expr><call><name><name pos:line="1298" pos:column="59">cb</name><op:operator pos:line="1298" pos:column="61">.</op:operator><name pos:line="1298" pos:column="62">CharAt</name></name><argument_list pos:line="1298" pos:column="68">(<argument><expr><name pos:line="1298" pos:column="69">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1298" pos:column="75">==</op:operator> <name><name pos:line="1298" pos:column="78">CharClassify</name><op:operator pos:line="1298" pos:column="90">::</op:operator><name pos:line="1298" pos:column="92">ccSpace</name></name><op:operator pos:line="1298" pos:column="99">)</op:operator></expr>)</condition>
			<expr_stmt><expr><name pos:line="1299" pos:column="25">pos</name><op:operator pos:line="1299" pos:column="28">++</op:operator></expr>;</expr_stmt></while>
	}</block></else></if>
	<return pos:line="1301" pos:column="9">return <expr><name pos:line="1301" pos:column="16">pos</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="1304" pos:column="1">/**
 * Find the end of the next word in either a forward (delta &gt;= 0) or backwards direction
 * (delta &lt; 0).
 * This is looking for a transition between character classes although there is also some
 * additional movement to transit white space.
 * Used by cursor movement by word commands.
 */</comment>
<function><type><name pos:line="1311" pos:column="1">int</name></type> <name><name pos:line="1311" pos:column="5">Document</name><op:operator pos:line="1311" pos:column="13">::</op:operator><name pos:line="1311" pos:column="15">NextWordEnd</name></name><parameter_list pos:line="1311" pos:column="26">(<param><decl><type><name pos:line="1311" pos:column="27">int</name></type> <name pos:line="1311" pos:column="31">pos</name></decl></param>, <param><decl><type><name pos:line="1311" pos:column="36">int</name></type> <name pos:line="1311" pos:column="40">delta</name></decl></param>)</parameter_list> <block pos:line="1311" pos:column="47">{
	<if pos:line="1312" pos:column="9">if <condition pos:line="1312" pos:column="12">(<expr><name pos:line="1312" pos:column="13">delta</name> <op:operator pos:line="1312" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="1312" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="1312" pos:column="23"> <block pos:line="1312" pos:column="24">{
		<if pos:line="1313" pos:column="17">if <condition pos:line="1313" pos:column="20">(<expr><name pos:line="1313" pos:column="21">pos</name> <op:operator pos:line="1313" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="1313" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="1313" pos:column="29"> <block pos:line="1313" pos:column="30">{
			<decl_stmt><decl><type><name><name pos:line="1314" pos:column="25">CharClassify</name><op:operator pos:line="1314" pos:column="37">::</op:operator><name pos:line="1314" pos:column="39">cc</name></name></type> <name pos:line="1314" pos:column="42">ccStart</name> <init pos:line="1314" pos:column="50">= <expr><call><name pos:line="1314" pos:column="52">WordCharClass</name><argument_list pos:line="1314" pos:column="65">(<argument><expr><call><name><name pos:line="1314" pos:column="66">cb</name><op:operator pos:line="1314" pos:column="68">.</op:operator><name pos:line="1314" pos:column="69">CharAt</name></name><argument_list pos:line="1314" pos:column="75">(<argument><expr><name pos:line="1314" pos:column="76">pos</name><op:operator pos:line="1314" pos:column="79">-</op:operator><lit:literal type="number" pos:line="1314" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1315" pos:column="25">if <condition pos:line="1315" pos:column="28">(<expr><name pos:line="1315" pos:column="29">ccStart</name> <op:operator pos:line="1315" pos:column="37">!=</op:operator> <name><name pos:line="1315" pos:column="40">CharClassify</name><op:operator pos:line="1315" pos:column="52">::</op:operator><name pos:line="1315" pos:column="54">ccSpace</name></name></expr>)</condition><then pos:line="1315" pos:column="62"> <block pos:line="1315" pos:column="63">{
				<while pos:line="1316" pos:column="33">while <condition pos:line="1316" pos:column="39">(<expr><name pos:line="1316" pos:column="40">pos</name> <op:operator pos:line="1316" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="1316" pos:column="46">0</lit:literal> <op:operator pos:line="1316" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="1316" pos:column="51">WordCharClass</name><argument_list pos:line="1316" pos:column="64">(<argument><expr><call><name><name pos:line="1316" pos:column="65">cb</name><op:operator pos:line="1316" pos:column="67">.</op:operator><name pos:line="1316" pos:column="68">CharAt</name></name><argument_list pos:line="1316" pos:column="74">(<argument><expr><name pos:line="1316" pos:column="75">pos</name> <op:operator pos:line="1316" pos:column="79">-</op:operator> <lit:literal type="number" pos:line="1316" pos:column="81">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1316" pos:column="85">==</op:operator> <name pos:line="1316" pos:column="88">ccStart</name></expr>)</condition> <block pos:line="1316" pos:column="97">{
					<expr_stmt><expr><name pos:line="1317" pos:column="41">pos</name><op:operator pos:line="1317" pos:column="44">--</op:operator></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if>
			<while pos:line="1320" pos:column="25">while <condition pos:line="1320" pos:column="31">(<expr><name pos:line="1320" pos:column="32">pos</name> <op:operator pos:line="1320" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="1320" pos:column="38">0</lit:literal> <op:operator pos:line="1320" pos:column="40">&amp;&amp;</op:operator> <call><name pos:line="1320" pos:column="43">WordCharClass</name><argument_list pos:line="1320" pos:column="56">(<argument><expr><call><name><name pos:line="1320" pos:column="57">cb</name><op:operator pos:line="1320" pos:column="59">.</op:operator><name pos:line="1320" pos:column="60">CharAt</name></name><argument_list pos:line="1320" pos:column="66">(<argument><expr><name pos:line="1320" pos:column="67">pos</name> <op:operator pos:line="1320" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="1320" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1320" pos:column="77">==</op:operator> <name><name pos:line="1320" pos:column="80">CharClassify</name><op:operator pos:line="1320" pos:column="92">::</op:operator><name pos:line="1320" pos:column="94">ccSpace</name></name></expr>)</condition> <block pos:line="1320" pos:column="103">{
				<expr_stmt><expr><name pos:line="1321" pos:column="33">pos</name><op:operator pos:line="1321" pos:column="36">--</op:operator></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></then> <else pos:line="1324" pos:column="11">else <block pos:line="1324" pos:column="16">{
		<while pos:line="1325" pos:column="17">while <condition pos:line="1325" pos:column="23">(<expr><name pos:line="1325" pos:column="24">pos</name> <op:operator pos:line="1325" pos:column="28">&lt;</op:operator> <call><name pos:line="1325" pos:column="30">Length</name><argument_list pos:line="1325" pos:column="36">()</argument_list></call> <op:operator pos:line="1325" pos:column="39">&amp;&amp;</op:operator> <call><name pos:line="1325" pos:column="42">WordCharClass</name><argument_list pos:line="1325" pos:column="55">(<argument><expr><call><name><name pos:line="1325" pos:column="56">cb</name><op:operator pos:line="1325" pos:column="58">.</op:operator><name pos:line="1325" pos:column="59">CharAt</name></name><argument_list pos:line="1325" pos:column="65">(<argument><expr><name pos:line="1325" pos:column="66">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1325" pos:column="72">==</op:operator> <name><name pos:line="1325" pos:column="75">CharClassify</name><op:operator pos:line="1325" pos:column="87">::</op:operator><name pos:line="1325" pos:column="89">ccSpace</name></name></expr>)</condition> <block pos:line="1325" pos:column="98">{
			<expr_stmt><expr><name pos:line="1326" pos:column="25">pos</name><op:operator pos:line="1326" pos:column="28">++</op:operator></expr>;</expr_stmt>
		}</block></while>
		<if pos:line="1328" pos:column="17">if <condition pos:line="1328" pos:column="20">(<expr><name pos:line="1328" pos:column="21">pos</name> <op:operator pos:line="1328" pos:column="25">&lt;</op:operator> <call><name pos:line="1328" pos:column="27">Length</name><argument_list pos:line="1328" pos:column="33">()</argument_list></call></expr>)</condition><then pos:line="1328" pos:column="36"> <block pos:line="1328" pos:column="37">{
			<decl_stmt><decl><type><name><name pos:line="1329" pos:column="25">CharClassify</name><op:operator pos:line="1329" pos:column="37">::</op:operator><name pos:line="1329" pos:column="39">cc</name></name></type> <name pos:line="1329" pos:column="42">ccStart</name> <init pos:line="1329" pos:column="50">= <expr><call><name pos:line="1329" pos:column="52">WordCharClass</name><argument_list pos:line="1329" pos:column="65">(<argument><expr><call><name><name pos:line="1329" pos:column="66">cb</name><op:operator pos:line="1329" pos:column="68">.</op:operator><name pos:line="1329" pos:column="69">CharAt</name></name><argument_list pos:line="1329" pos:column="75">(<argument><expr><name pos:line="1329" pos:column="76">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<while pos:line="1330" pos:column="25">while <condition pos:line="1330" pos:column="31">(<expr><name pos:line="1330" pos:column="32">pos</name> <op:operator pos:line="1330" pos:column="36">&lt;</op:operator> <call><name pos:line="1330" pos:column="38">Length</name><argument_list pos:line="1330" pos:column="44">()</argument_list></call> <op:operator pos:line="1330" pos:column="47">&amp;&amp;</op:operator> <call><name pos:line="1330" pos:column="50">WordCharClass</name><argument_list pos:line="1330" pos:column="63">(<argument><expr><call><name><name pos:line="1330" pos:column="64">cb</name><op:operator pos:line="1330" pos:column="66">.</op:operator><name pos:line="1330" pos:column="67">CharAt</name></name><argument_list pos:line="1330" pos:column="73">(<argument><expr><name pos:line="1330" pos:column="74">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1330" pos:column="80">==</op:operator> <name pos:line="1330" pos:column="83">ccStart</name></expr>)</condition> <block pos:line="1330" pos:column="92">{
				<expr_stmt><expr><name pos:line="1331" pos:column="33">pos</name><op:operator pos:line="1331" pos:column="36">++</op:operator></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></else></if>
	<return pos:line="1335" pos:column="9">return <expr><name pos:line="1335" pos:column="16">pos</name></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="1338" pos:column="1">/**
 * Check that the character at the given position is a word or punctuation character and that
 * the previous character is of a different character class.
 */</comment>
<function><type><name pos:line="1342" pos:column="1">bool</name></type> <name><name pos:line="1342" pos:column="6">Document</name><op:operator pos:line="1342" pos:column="14">::</op:operator><name pos:line="1342" pos:column="16">IsWordStartAt</name></name><parameter_list pos:line="1342" pos:column="29">(<param><decl><type><name pos:line="1342" pos:column="30">int</name></type> <name pos:line="1342" pos:column="34">pos</name></decl></param>)</parameter_list> <block pos:line="1342" pos:column="39">{
	<if pos:line="1343" pos:column="9">if <condition pos:line="1343" pos:column="12">(<expr><name pos:line="1343" pos:column="13">pos</name> <op:operator pos:line="1343" pos:column="17">&gt;</op:operator> <lit:literal type="number" pos:line="1343" pos:column="19">0</lit:literal></expr>)</condition><then pos:line="1343" pos:column="21"> <block pos:line="1343" pos:column="22">{
		<decl_stmt><decl><type><name><name pos:line="1344" pos:column="17">CharClassify</name><op:operator pos:line="1344" pos:column="29">::</op:operator><name pos:line="1344" pos:column="31">cc</name></name></type> <name pos:line="1344" pos:column="34">ccPos</name> <init pos:line="1344" pos:column="40">= <expr><call><name pos:line="1344" pos:column="42">WordCharClass</name><argument_list pos:line="1344" pos:column="55">(<argument><expr><call><name pos:line="1344" pos:column="56">CharAt</name><argument_list pos:line="1344" pos:column="62">(<argument><expr><name pos:line="1344" pos:column="63">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="1345" pos:column="17">return <expr><op:operator pos:line="1345" pos:column="24">(</op:operator><name pos:line="1345" pos:column="25">ccPos</name> <op:operator pos:line="1345" pos:column="31">==</op:operator> <name><name pos:line="1345" pos:column="34">CharClassify</name><op:operator pos:line="1345" pos:column="46">::</op:operator><name pos:line="1345" pos:column="48">ccWord</name></name> <op:operator pos:line="1345" pos:column="55">||</op:operator> <name pos:line="1345" pos:column="58">ccPos</name> <op:operator pos:line="1345" pos:column="64">==</op:operator> <name><name pos:line="1345" pos:column="67">CharClassify</name><op:operator pos:line="1345" pos:column="79">::</op:operator><name pos:line="1345" pos:column="81">ccPunctuation</name></name><op:operator pos:line="1345" pos:column="94">)</op:operator> <op:operator pos:line="1345" pos:column="96">&amp;&amp;</op:operator>
			<op:operator pos:line="1346" pos:column="25">(</op:operator><name pos:line="1346" pos:column="26">ccPos</name> <op:operator pos:line="1346" pos:column="32">!=</op:operator> <call><name pos:line="1346" pos:column="35">WordCharClass</name><argument_list pos:line="1346" pos:column="48">(<argument><expr><call><name pos:line="1346" pos:column="49">CharAt</name><argument_list pos:line="1346" pos:column="55">(<argument><expr><name pos:line="1346" pos:column="56">pos</name> <op:operator pos:line="1346" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="1346" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1346" pos:column="65">)</op:operator></expr>;</return>
	}</block></then></if>
	<return pos:line="1348" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1348" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="1351" pos:column="1">/**
 * Check that the character at the given position is a word or punctuation character and that
 * the next character is of a different character class.
 */</comment>
<function><type><name pos:line="1355" pos:column="1">bool</name></type> <name><name pos:line="1355" pos:column="6">Document</name><op:operator pos:line="1355" pos:column="14">::</op:operator><name pos:line="1355" pos:column="16">IsWordEndAt</name></name><parameter_list pos:line="1355" pos:column="27">(<param><decl><type><name pos:line="1355" pos:column="28">int</name></type> <name pos:line="1355" pos:column="32">pos</name></decl></param>)</parameter_list> <block pos:line="1355" pos:column="37">{
	<if pos:line="1356" pos:column="9">if <condition pos:line="1356" pos:column="12">(<expr><name pos:line="1356" pos:column="13">pos</name> <op:operator pos:line="1356" pos:column="17">&lt;</op:operator> <call><name pos:line="1356" pos:column="19">Length</name><argument_list pos:line="1356" pos:column="25">()</argument_list></call></expr>)</condition><then pos:line="1356" pos:column="28"> <block pos:line="1356" pos:column="29">{
		<decl_stmt><decl><type><name><name pos:line="1357" pos:column="17">CharClassify</name><op:operator pos:line="1357" pos:column="29">::</op:operator><name pos:line="1357" pos:column="31">cc</name></name></type> <name pos:line="1357" pos:column="34">ccPrev</name> <init pos:line="1357" pos:column="41">= <expr><call><name pos:line="1357" pos:column="43">WordCharClass</name><argument_list pos:line="1357" pos:column="56">(<argument><expr><call><name pos:line="1357" pos:column="57">CharAt</name><argument_list pos:line="1357" pos:column="63">(<argument><expr><name pos:line="1357" pos:column="64">pos</name><op:operator pos:line="1357" pos:column="67">-</op:operator><lit:literal type="number" pos:line="1357" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return pos:line="1358" pos:column="17">return <expr><op:operator pos:line="1358" pos:column="24">(</op:operator><name pos:line="1358" pos:column="25">ccPrev</name> <op:operator pos:line="1358" pos:column="32">==</op:operator> <name><name pos:line="1358" pos:column="35">CharClassify</name><op:operator pos:line="1358" pos:column="47">::</op:operator><name pos:line="1358" pos:column="49">ccWord</name></name> <op:operator pos:line="1358" pos:column="56">||</op:operator> <name pos:line="1358" pos:column="59">ccPrev</name> <op:operator pos:line="1358" pos:column="66">==</op:operator> <name><name pos:line="1358" pos:column="69">CharClassify</name><op:operator pos:line="1358" pos:column="81">::</op:operator><name pos:line="1358" pos:column="83">ccPunctuation</name></name><op:operator pos:line="1358" pos:column="96">)</op:operator> <op:operator pos:line="1358" pos:column="98">&amp;&amp;</op:operator>
			<op:operator pos:line="1359" pos:column="25">(</op:operator><name pos:line="1359" pos:column="26">ccPrev</name> <op:operator pos:line="1359" pos:column="33">!=</op:operator> <call><name pos:line="1359" pos:column="36">WordCharClass</name><argument_list pos:line="1359" pos:column="49">(<argument><expr><call><name pos:line="1359" pos:column="50">CharAt</name><argument_list pos:line="1359" pos:column="56">(<argument><expr><name pos:line="1359" pos:column="57">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1359" pos:column="62">)</op:operator></expr>;</return>
	}</block></then></if>
	<return pos:line="1361" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1361" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="1364" pos:column="1">/**
 * Check that the given range is has transitions between character classes at both
 * ends and where the characters on the inside are word or punctuation characters.
 */</comment>
<function><type><name pos:line="1368" pos:column="1">bool</name></type> <name><name pos:line="1368" pos:column="6">Document</name><op:operator pos:line="1368" pos:column="14">::</op:operator><name pos:line="1368" pos:column="16">IsWordAt</name></name><parameter_list pos:line="1368" pos:column="24">(<param><decl><type><name pos:line="1368" pos:column="25">int</name></type> <name pos:line="1368" pos:column="29">start</name></decl></param>, <param><decl><type><name pos:line="1368" pos:column="36">int</name></type> <name pos:line="1368" pos:column="40">end</name></decl></param>)</parameter_list> <block pos:line="1368" pos:column="45">{
	<return pos:line="1369" pos:column="9">return <expr><call><name pos:line="1369" pos:column="16">IsWordStartAt</name><argument_list pos:line="1369" pos:column="29">(<argument><expr><name pos:line="1369" pos:column="30">start</name></expr></argument>)</argument_list></call> <op:operator pos:line="1369" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="1369" pos:column="40">IsWordEndAt</name><argument_list pos:line="1369" pos:column="51">(<argument><expr><name pos:line="1369" pos:column="52">end</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1372" pos:column="1">static</specifier> <specifier pos:line="1372" pos:column="8">inline</specifier> <name pos:line="1372" pos:column="15">char</name></type> <name pos:line="1372" pos:column="20">MakeLowerCase</name><parameter_list pos:line="1372" pos:column="33">(<param><decl><type><name pos:line="1372" pos:column="34">char</name></type> <name pos:line="1372" pos:column="39">ch</name></decl></param>)</parameter_list> <block pos:line="1372" pos:column="43">{
	<if pos:line="1373" pos:column="9">if <condition pos:line="1373" pos:column="12">(<expr><name><name pos:line="1373" pos:column="13">ch</name> <argument_list pos:line="1373" pos:column="16">&lt; <argument><expr><lit:literal type="char" pos:line="1373" pos:column="18">'A'</lit:literal> <op:operator pos:line="1373" pos:column="22">||</op:operator> <name pos:line="1373" pos:column="25">ch</name></expr></argument> &gt;</argument_list></name> <lit:literal type="char" pos:line="1373" pos:column="30">'Z'</lit:literal></expr>)</condition><then pos:line="1373" pos:column="34">
		<return pos:line="1374" pos:column="17">return <expr><name pos:line="1374" pos:column="24">ch</name></expr>;</return></then>
	<else pos:line="1375" pos:column="9">else
		<return pos:line="1376" pos:column="17">return <expr><call><name><name pos:line="1376" pos:column="24">static_cast</name><argument_list pos:line="1376" pos:column="35">&lt;<argument><expr><name pos:line="1376" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1376" pos:column="41">(<argument><expr><name pos:line="1376" pos:column="42">ch</name> <op:operator pos:line="1376" pos:column="45">-</op:operator> <lit:literal type="char" pos:line="1376" pos:column="47">'A'</lit:literal> <op:operator pos:line="1376" pos:column="51">+</op:operator> <lit:literal type="char" pos:line="1376" pos:column="53">'a'</lit:literal></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<function><type><specifier pos:line="1379" pos:column="1">static</specifier> <name pos:line="1379" pos:column="8">bool</name></type> <name pos:line="1379" pos:column="13">GoodTrailByte</name><parameter_list pos:line="1379" pos:column="26">(<param><decl><type><name pos:line="1379" pos:column="27">int</name></type> <name pos:line="1379" pos:column="31">v</name></decl></param>)</parameter_list> <block pos:line="1379" pos:column="34">{
	<return pos:line="1380" pos:column="9">return <expr><op:operator pos:line="1380" pos:column="16">(</op:operator><name pos:line="1380" pos:column="17">v</name> <op:operator pos:line="1380" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="1380" pos:column="22">0x80</lit:literal><op:operator pos:line="1380" pos:column="26">)</op:operator> <op:operator pos:line="1380" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="1380" pos:column="31">(</op:operator><name pos:line="1380" pos:column="32">v</name> <op:operator pos:line="1380" pos:column="34">&lt;</op:operator> <lit:literal type="number" pos:line="1380" pos:column="36">0xc0</lit:literal><op:operator pos:line="1380" pos:column="40">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="1383" pos:column="1">size_t</name></type> <name><name pos:line="1383" pos:column="8">Document</name><op:operator pos:line="1383" pos:column="16">::</op:operator><name pos:line="1383" pos:column="18">ExtractChar</name></name><parameter_list pos:line="1383" pos:column="29">(<param><decl><type><name pos:line="1383" pos:column="30">int</name></type> <name pos:line="1383" pos:column="34">pos</name></decl></param>, <param><decl><type><name pos:line="1383" pos:column="39">char</name> <type:modifier pos:line="1383" pos:column="44">*</type:modifier></type><name pos:line="1383" pos:column="45">bytes</name></decl></param>)</parameter_list> <block pos:line="1383" pos:column="52">{
	<decl_stmt><decl><type><name pos:line="1384" pos:column="9">unsigned</name> <name pos:line="1384" pos:column="18">char</name></type> <name pos:line="1384" pos:column="23">ch</name> <init pos:line="1384" pos:column="26">= <expr><call><name><name pos:line="1384" pos:column="28">static_cast</name><argument_list pos:line="1384" pos:column="39">&lt;<argument><expr><name pos:line="1384" pos:column="40">unsigned</name> <name pos:line="1384" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1384" pos:column="54">(<argument><expr><call><name><name pos:line="1384" pos:column="55">cb</name><op:operator pos:line="1384" pos:column="57">.</op:operator><name pos:line="1384" pos:column="58">CharAt</name></name><argument_list pos:line="1384" pos:column="64">(<argument><expr><name pos:line="1384" pos:column="65">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1385" pos:column="9">size_t</name></type> <name pos:line="1385" pos:column="16">widthChar</name> <init pos:line="1385" pos:column="26">= <expr><call><name pos:line="1385" pos:column="28">UTF8CharLength</name><argument_list pos:line="1385" pos:column="42">(<argument><expr><name pos:line="1385" pos:column="43">ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="1386" pos:column="9">bytes</name><index pos:line="1386" pos:column="14">[<expr><lit:literal type="number" pos:line="1386" pos:column="15">0</lit:literal></expr>]</index></name> <op:operator pos:line="1386" pos:column="18">=</op:operator> <name pos:line="1386" pos:column="20">ch</name></expr>;</expr_stmt>
	<for pos:line="1387" pos:column="9">for (<init><decl><type><name pos:line="1387" pos:column="14">size_t</name></type> <name pos:line="1387" pos:column="21">i</name><init pos:line="1387" pos:column="22">=<expr><lit:literal type="number" pos:line="1387" pos:column="23">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1387" pos:column="26">i</name><op:operator pos:line="1387" pos:column="27">&lt;</op:operator><name pos:line="1387" pos:column="28">widthChar</name></expr>;</condition> <incr><expr><name pos:line="1387" pos:column="39">i</name><op:operator pos:line="1387" pos:column="40">++</op:operator></expr></incr>) <block pos:line="1387" pos:column="44">{
		<expr_stmt><expr><name><name pos:line="1388" pos:column="17">bytes</name><index pos:line="1388" pos:column="22">[<expr><name pos:line="1388" pos:column="23">i</name></expr>]</index></name> <op:operator pos:line="1388" pos:column="26">=</op:operator> <call><name><name pos:line="1388" pos:column="28">cb</name><op:operator pos:line="1388" pos:column="30">.</op:operator><name pos:line="1388" pos:column="31">CharAt</name></name><argument_list pos:line="1388" pos:column="37">(<argument><expr><name pos:line="1388" pos:column="38">pos</name><op:operator pos:line="1388" pos:column="41">+</op:operator><name pos:line="1388" pos:column="42">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="1389" pos:column="17">if <condition pos:line="1389" pos:column="20">(<expr><op:operator pos:line="1389" pos:column="21">!</op:operator><macro><name pos:line="1389" pos:column="22">GoodTrailByte</name><argument_list pos:line="1389" pos:column="35">(<argument pos:line="1389" pos:column="36">static_cast&lt;unsigned char&gt;(bytes[i])</argument>)</argument_list></macro></expr>)</condition><then pos:line="1389" pos:column="74"> <block pos:line="1389" pos:column="75">{ <comment type="line" pos:line="1389" pos:column="77">// Bad byte</comment>
			<expr_stmt><expr><name pos:line="1390" pos:column="25">widthChar</name> <op:operator pos:line="1390" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="1390" pos:column="37">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<return pos:line="1393" pos:column="9">return <expr><name pos:line="1393" pos:column="16">widthChar</name></expr>;</return>
}</block></function>

<constructor><name><name pos:line="1396" pos:column="1">CaseFolderTable</name><op:operator pos:line="1396" pos:column="16">::</op:operator><name pos:line="1396" pos:column="18">CaseFolderTable</name></name><parameter_list pos:line="1396" pos:column="33">()</parameter_list> <block pos:line="1396" pos:column="36">{
	<for pos:line="1397" pos:column="9">for (<init><decl><type><name pos:line="1397" pos:column="14">size_t</name></type> <name pos:line="1397" pos:column="21">iChar</name><init pos:line="1397" pos:column="26">=<expr><lit:literal type="number" pos:line="1397" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1397" pos:column="30">iChar</name><op:operator pos:line="1397" pos:column="35">&lt;</op:operator><sizeof pos:line="1397" pos:column="36">sizeof<argument_list pos:line="1397" pos:column="42">(<argument><expr><name pos:line="1397" pos:column="43">mapping</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name pos:line="1397" pos:column="53">iChar</name><op:operator pos:line="1397" pos:column="58">++</op:operator></expr></incr>) <block pos:line="1397" pos:column="62">{
		<expr_stmt><expr><name><name pos:line="1398" pos:column="17">mapping</name><index pos:line="1398" pos:column="24">[<expr><name pos:line="1398" pos:column="25">iChar</name></expr>]</index></name> <op:operator pos:line="1398" pos:column="32">=</op:operator> <call><name><name pos:line="1398" pos:column="34">static_cast</name><argument_list pos:line="1398" pos:column="45">&lt;<argument><expr><name pos:line="1398" pos:column="46">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1398" pos:column="51">(<argument><expr><name pos:line="1398" pos:column="52">iChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></constructor>

<destructor><name><name pos:line="1402" pos:column="1">CaseFolderTable</name><op:operator pos:line="1402" pos:column="16">::</op:operator>~<name pos:line="1402" pos:column="19">CaseFolderTable</name></name><parameter_list pos:line="1402" pos:column="34">()</parameter_list> <block pos:line="1402" pos:column="37">{
}</block></destructor>

<function><type><name pos:line="1405" pos:column="1">size_t</name></type> <name><name pos:line="1405" pos:column="8">CaseFolderTable</name><op:operator pos:line="1405" pos:column="23">::</op:operator><name pos:line="1405" pos:column="25">Fold</name></name><parameter_list pos:line="1405" pos:column="29">(<param><decl><type><name pos:line="1405" pos:column="30">char</name> <type:modifier pos:line="1405" pos:column="35">*</type:modifier></type><name pos:line="1405" pos:column="36">folded</name></decl></param>, <param><decl><type><name pos:line="1405" pos:column="44">size_t</name></type> <name pos:line="1405" pos:column="51">sizeFolded</name></decl></param>, <param><decl><type><specifier pos:line="1405" pos:column="63">const</specifier> <name pos:line="1405" pos:column="69">char</name> <type:modifier pos:line="1405" pos:column="74">*</type:modifier></type><name pos:line="1405" pos:column="75">mixed</name></decl></param>, <param><decl><type><name pos:line="1405" pos:column="82">size_t</name></type> <name pos:line="1405" pos:column="89">lenMixed</name></decl></param>)</parameter_list> <block pos:line="1405" pos:column="99">{
	<if pos:line="1406" pos:column="9">if <condition pos:line="1406" pos:column="12">(<expr><name pos:line="1406" pos:column="13">lenMixed</name> <op:operator pos:line="1406" pos:column="22">&gt;</op:operator> <name pos:line="1406" pos:column="24">sizeFolded</name></expr>)</condition><then pos:line="1406" pos:column="35"> <block pos:line="1406" pos:column="36">{
		<return pos:line="1407" pos:column="17">return <expr><lit:literal type="number" pos:line="1407" pos:column="24">0</lit:literal></expr>;</return>
	}</block></then> <else pos:line="1408" pos:column="11">else <block pos:line="1408" pos:column="16">{
		<for pos:line="1409" pos:column="17">for (<init><decl><type><name pos:line="1409" pos:column="22">size_t</name></type> <name pos:line="1409" pos:column="29">i</name><init pos:line="1409" pos:column="30">=<expr><lit:literal type="number" pos:line="1409" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1409" pos:column="34">i</name><op:operator pos:line="1409" pos:column="35">&lt;</op:operator><name pos:line="1409" pos:column="36">lenMixed</name></expr>;</condition> <incr><expr><name pos:line="1409" pos:column="46">i</name><op:operator pos:line="1409" pos:column="47">++</op:operator></expr></incr>) <block pos:line="1409" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="1410" pos:column="25">folded</name><index pos:line="1410" pos:column="31">[<expr><name pos:line="1410" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="1410" pos:column="35">=</op:operator> <name><name pos:line="1410" pos:column="37">mapping</name><index pos:line="1410" pos:column="44">[<expr><call><name><name pos:line="1410" pos:column="45">static_cast</name><argument_list pos:line="1410" pos:column="56">&lt;<argument><expr><name pos:line="1410" pos:column="57">unsigned</name> <name pos:line="1410" pos:column="66">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1410" pos:column="71">(<argument><expr><name><name pos:line="1410" pos:column="72">mixed</name><index pos:line="1410" pos:column="77">[<expr><name pos:line="1410" pos:column="78">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<return pos:line="1412" pos:column="17">return <expr><name pos:line="1412" pos:column="24">lenMixed</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="1416" pos:column="1">void</name></type> <name><name pos:line="1416" pos:column="6">CaseFolderTable</name><op:operator pos:line="1416" pos:column="21">::</op:operator><name pos:line="1416" pos:column="23">SetTranslation</name></name><parameter_list pos:line="1416" pos:column="37">(<param><decl><type><name pos:line="1416" pos:column="38">char</name></type> <name pos:line="1416" pos:column="43">ch</name></decl></param>, <param><decl><type><name pos:line="1416" pos:column="47">char</name></type> <name pos:line="1416" pos:column="52">chTranslation</name></decl></param>)</parameter_list> <block pos:line="1416" pos:column="67">{
	<expr_stmt><expr><name><name pos:line="1417" pos:column="9">mapping</name><index pos:line="1417" pos:column="16">[<expr><call><name><name pos:line="1417" pos:column="17">static_cast</name><argument_list pos:line="1417" pos:column="28">&lt;<argument><expr><name pos:line="1417" pos:column="29">unsigned</name> <name pos:line="1417" pos:column="38">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1417" pos:column="43">(<argument><expr><name pos:line="1417" pos:column="44">ch</name></expr></argument>)</argument_list></call></expr>]</index></name> <op:operator pos:line="1417" pos:column="49">=</op:operator> <name pos:line="1417" pos:column="51">chTranslation</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1420" pos:column="1">void</name></type> <name><name pos:line="1420" pos:column="6">CaseFolderTable</name><op:operator pos:line="1420" pos:column="21">::</op:operator><name pos:line="1420" pos:column="23">StandardASCII</name></name><parameter_list pos:line="1420" pos:column="36">()</parameter_list> <block pos:line="1420" pos:column="39">{
	<for pos:line="1421" pos:column="9">for (<init><decl><type><name pos:line="1421" pos:column="14">size_t</name></type> <name pos:line="1421" pos:column="21">iChar</name><init pos:line="1421" pos:column="26">=<expr><lit:literal type="number" pos:line="1421" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1421" pos:column="30">iChar</name><op:operator pos:line="1421" pos:column="35">&lt;</op:operator><sizeof pos:line="1421" pos:column="36">sizeof<argument_list pos:line="1421" pos:column="42">(<argument><expr><name pos:line="1421" pos:column="43">mapping</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name pos:line="1421" pos:column="53">iChar</name><op:operator pos:line="1421" pos:column="58">++</op:operator></expr></incr>) <block pos:line="1421" pos:column="62">{
		<if pos:line="1422" pos:column="17">if <condition pos:line="1422" pos:column="20">(<expr><name pos:line="1422" pos:column="21">iChar</name> <op:operator pos:line="1422" pos:column="27">&gt;=</op:operator> <lit:literal type="char" pos:line="1422" pos:column="30">'A'</lit:literal> <op:operator pos:line="1422" pos:column="34">&amp;&amp;</op:operator> <name pos:line="1422" pos:column="37">iChar</name> <op:operator pos:line="1422" pos:column="43">&lt;=</op:operator> <lit:literal type="char" pos:line="1422" pos:column="46">'Z'</lit:literal></expr>)</condition><then pos:line="1422" pos:column="50"> <block pos:line="1422" pos:column="51">{
			<expr_stmt><expr><name><name pos:line="1423" pos:column="25">mapping</name><index pos:line="1423" pos:column="32">[<expr><name pos:line="1423" pos:column="33">iChar</name></expr>]</index></name> <op:operator pos:line="1423" pos:column="40">=</op:operator> <call><name><name pos:line="1423" pos:column="42">static_cast</name><argument_list pos:line="1423" pos:column="53">&lt;<argument><expr><name pos:line="1423" pos:column="54">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1423" pos:column="59">(<argument><expr><name pos:line="1423" pos:column="60">iChar</name> <op:operator pos:line="1423" pos:column="66">-</op:operator> <lit:literal type="char" pos:line="1423" pos:column="68">'A'</lit:literal> <op:operator pos:line="1423" pos:column="72">+</op:operator> <lit:literal type="char" pos:line="1423" pos:column="74">'a'</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1424" pos:column="19">else <block pos:line="1424" pos:column="24">{
			<expr_stmt><expr><name><name pos:line="1425" pos:column="25">mapping</name><index pos:line="1425" pos:column="32">[<expr><name pos:line="1425" pos:column="33">iChar</name></expr>]</index></name> <op:operator pos:line="1425" pos:column="40">=</op:operator> <call><name><name pos:line="1425" pos:column="42">static_cast</name><argument_list pos:line="1425" pos:column="53">&lt;<argument><expr><name pos:line="1425" pos:column="54">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1425" pos:column="59">(<argument><expr><name pos:line="1425" pos:column="60">iChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="1430" pos:column="1">bool</name></type> <name><name pos:line="1430" pos:column="6">Document</name><op:operator pos:line="1430" pos:column="14">::</op:operator><name pos:line="1430" pos:column="16">MatchesWordOptions</name></name><parameter_list pos:line="1430" pos:column="34">(<param><decl><type><name pos:line="1430" pos:column="35">bool</name></type> <name pos:line="1430" pos:column="40">word</name></decl></param>, <param><decl><type><name pos:line="1430" pos:column="46">bool</name></type> <name pos:line="1430" pos:column="51">wordStart</name></decl></param>, <param><decl><type><name pos:line="1430" pos:column="62">int</name></type> <name pos:line="1430" pos:column="66">pos</name></decl></param>, <param><decl><type><name pos:line="1430" pos:column="71">int</name></type> <name pos:line="1430" pos:column="75">length</name></decl></param>)</parameter_list> <block pos:line="1430" pos:column="83">{
	<return pos:line="1431" pos:column="9">return <expr><op:operator pos:line="1431" pos:column="16">(</op:operator><op:operator pos:line="1431" pos:column="17">!</op:operator><name pos:line="1431" pos:column="18">word</name> <op:operator pos:line="1431" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="1431" pos:column="26">!</op:operator><name pos:line="1431" pos:column="27">wordStart</name><op:operator pos:line="1431" pos:column="36">)</op:operator> <op:operator pos:line="1431" pos:column="38">||</op:operator>
			<op:operator pos:line="1432" pos:column="25">(</op:operator><name pos:line="1432" pos:column="26">word</name> <op:operator pos:line="1432" pos:column="31">&amp;&amp;</op:operator> <call><name pos:line="1432" pos:column="34">IsWordAt</name><argument_list pos:line="1432" pos:column="42">(<argument><expr><name pos:line="1432" pos:column="43">pos</name></expr></argument>, <argument><expr><name pos:line="1432" pos:column="48">pos</name> <op:operator pos:line="1432" pos:column="52">+</op:operator> <name pos:line="1432" pos:column="54">length</name></expr></argument>)</argument_list></call><op:operator pos:line="1432" pos:column="61">)</op:operator> <op:operator pos:line="1432" pos:column="63">||</op:operator>
			<op:operator pos:line="1433" pos:column="25">(</op:operator><name pos:line="1433" pos:column="26">wordStart</name> <op:operator pos:line="1433" pos:column="36">&amp;&amp;</op:operator> <call><name pos:line="1433" pos:column="39">IsWordStartAt</name><argument_list pos:line="1433" pos:column="52">(<argument><expr><name pos:line="1433" pos:column="53">pos</name></expr></argument>)</argument_list></call><op:operator pos:line="1433" pos:column="57">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="1436" pos:column="1">/**
 * Find text in document, supporting both forward and backward
 * searches (just pass minPos &gt; maxPos to do a backward search)
 * Has not been tested with backwards DBCS searches yet.
 */</comment>
<function><type><name pos:line="1441" pos:column="1">long</name></type> <name><name pos:line="1441" pos:column="6">Document</name><op:operator pos:line="1441" pos:column="14">::</op:operator><name pos:line="1441" pos:column="16">FindText</name></name><parameter_list pos:line="1441" pos:column="24">(<param><decl><type><name pos:line="1441" pos:column="25">int</name></type> <name pos:line="1441" pos:column="29">minPos</name></decl></param>, <param><decl><type><name pos:line="1441" pos:column="37">int</name></type> <name pos:line="1441" pos:column="41">maxPos</name></decl></param>, <param><decl><type><specifier pos:line="1441" pos:column="49">const</specifier> <name pos:line="1441" pos:column="55">char</name> <type:modifier pos:line="1441" pos:column="60">*</type:modifier></type><name pos:line="1441" pos:column="61">search</name></decl></param>,
                        <param><decl><type><name pos:line="1442" pos:column="25">bool</name></type> <name pos:line="1442" pos:column="30">caseSensitive</name></decl></param>, <param><decl><type><name pos:line="1442" pos:column="45">bool</name></type> <name pos:line="1442" pos:column="50">word</name></decl></param>, <param><decl><type><name pos:line="1442" pos:column="56">bool</name></type> <name pos:line="1442" pos:column="61">wordStart</name></decl></param>, <param><decl><type><name pos:line="1442" pos:column="72">bool</name></type> <name pos:line="1442" pos:column="77">regExp</name></decl></param>, <param><decl><type><name pos:line="1442" pos:column="85">int</name></type> <name pos:line="1442" pos:column="89">flags</name></decl></param>,
                        <param><decl><type><name pos:line="1443" pos:column="25">int</name> <type:modifier pos:line="1443" pos:column="29">*</type:modifier></type><name pos:line="1443" pos:column="30">length</name></decl></param>, <param><decl><type><name pos:line="1443" pos:column="38">CaseFolder</name> <type:modifier pos:line="1443" pos:column="49">*</type:modifier></type><name pos:line="1443" pos:column="50">pcf</name></decl></param>)</parameter_list> <block pos:line="1443" pos:column="55">{
	<if pos:line="1444" pos:column="9">if <condition pos:line="1444" pos:column="12">(<expr><op:operator pos:line="1444" pos:column="13">*</op:operator><name pos:line="1444" pos:column="14">length</name> <op:operator pos:line="1444" pos:column="21">&lt;=</op:operator> <lit:literal type="number" pos:line="1444" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="1444" pos:column="26">
		<return pos:line="1445" pos:column="17">return <expr><name pos:line="1445" pos:column="24">minPos</name></expr>;</return></then></if>
	<if pos:line="1446" pos:column="9">if <condition pos:line="1446" pos:column="12">(<expr><name pos:line="1446" pos:column="13">regExp</name></expr>)</condition><then pos:line="1446" pos:column="20"> <block pos:line="1446" pos:column="21">{
		<if pos:line="1447" pos:column="17">if <condition pos:line="1447" pos:column="20">(<expr><op:operator pos:line="1447" pos:column="21">!</op:operator><name pos:line="1447" pos:column="22">regex</name></expr>)</condition><then pos:line="1447" pos:column="28">
			<expr_stmt><expr><name pos:line="1448" pos:column="25">regex</name> <op:operator pos:line="1448" pos:column="31">=</op:operator> <call><name pos:line="1448" pos:column="33">CreateRegexSearch</name><argument_list pos:line="1448" pos:column="50">(<argument><expr><op:operator pos:line="1448" pos:column="51">&amp;</op:operator><name pos:line="1448" pos:column="52">charClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return pos:line="1449" pos:column="17">return <expr><call><name><name pos:line="1449" pos:column="24">regex</name><op:operator pos:line="1449" pos:column="29">-&gt;</op:operator><name pos:line="1449" pos:column="31">FindText</name></name><argument_list pos:line="1449" pos:column="39">(<argument><expr><name pos:line="1449" pos:column="40">this</name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="46">minPos</name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="54">maxPos</name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="62">search</name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="70">caseSensitive</name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="85">word</name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="91">wordStart</name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="102">flags</name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="109">length</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="1450" pos:column="11">else <block pos:line="1450" pos:column="16">{

		<decl_stmt><decl><type><specifier pos:line="1452" pos:column="17">const</specifier> <name pos:line="1452" pos:column="23">bool</name></type> <name pos:line="1452" pos:column="28">forward</name> <init pos:line="1452" pos:column="36">= <expr><name pos:line="1452" pos:column="38">minPos</name> <op:operator pos:line="1452" pos:column="45">&lt;=</op:operator> <name pos:line="1452" pos:column="48">maxPos</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1453" pos:column="17">const</specifier> <name pos:line="1453" pos:column="23">int</name></type> <name pos:line="1453" pos:column="27">increment</name> <init pos:line="1453" pos:column="37">= <expr><name pos:line="1453" pos:column="39">forward</name> <op:operator pos:line="1453" pos:column="47">?</op:operator> <lit:literal type="number" pos:line="1453" pos:column="49">1</lit:literal> <op:operator pos:line="1453" pos:column="51">:</op:operator> <op:operator pos:line="1453" pos:column="53">-</op:operator><lit:literal type="number" pos:line="1453" pos:column="54">1</lit:literal></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="1455" pos:column="17">// Range endpoints should not be inside DBCS characters, but just in case, move them.</comment>
		<decl_stmt><decl><type><specifier pos:line="1456" pos:column="17">const</specifier> <name pos:line="1456" pos:column="23">int</name></type> <name pos:line="1456" pos:column="27">startPos</name> <init pos:line="1456" pos:column="36">= <expr><call><name pos:line="1456" pos:column="38">MovePositionOutsideChar</name><argument_list pos:line="1456" pos:column="61">(<argument><expr><name pos:line="1456" pos:column="62">minPos</name></expr></argument>, <argument><expr><name pos:line="1456" pos:column="70">increment</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1456" pos:column="81">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1457" pos:column="17">const</specifier> <name pos:line="1457" pos:column="23">int</name></type> <name pos:line="1457" pos:column="27">endPos</name> <init pos:line="1457" pos:column="34">= <expr><call><name pos:line="1457" pos:column="36">MovePositionOutsideChar</name><argument_list pos:line="1457" pos:column="59">(<argument><expr><name pos:line="1457" pos:column="60">maxPos</name></expr></argument>, <argument><expr><name pos:line="1457" pos:column="68">increment</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1457" pos:column="79">false</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="1459" pos:column="17">// Compute actual search ranges needed</comment>
		<decl_stmt><decl><type><specifier pos:line="1460" pos:column="17">const</specifier> <name pos:line="1460" pos:column="23">int</name></type> <name pos:line="1460" pos:column="27">lengthFind</name> <init pos:line="1460" pos:column="38">= <expr><op:operator pos:line="1460" pos:column="40">(</op:operator><op:operator pos:line="1460" pos:column="41">*</op:operator><name pos:line="1460" pos:column="42">length</name> <op:operator pos:line="1460" pos:column="49">==</op:operator> <op:operator pos:line="1460" pos:column="52">-</op:operator><lit:literal type="number" pos:line="1460" pos:column="53">1</lit:literal><op:operator pos:line="1460" pos:column="54">)</op:operator> <op:operator pos:line="1460" pos:column="56">?</op:operator> <call><name><name pos:line="1460" pos:column="58">static_cast</name><argument_list pos:line="1460" pos:column="69">&lt;<argument><expr><name pos:line="1460" pos:column="70">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1460" pos:column="74">(<argument><expr><call><name pos:line="1460" pos:column="75">strlen</name><argument_list pos:line="1460" pos:column="81">(<argument><expr><name pos:line="1460" pos:column="82">search</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1460" pos:column="91">:</op:operator> <op:operator pos:line="1460" pos:column="93">*</op:operator><name pos:line="1460" pos:column="94">length</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="1461" pos:column="17">const</specifier> <name pos:line="1461" pos:column="23">int</name></type> <name pos:line="1461" pos:column="27">endSearch</name> <init pos:line="1461" pos:column="37">= <expr><op:operator pos:line="1461" pos:column="39">(</op:operator><name pos:line="1461" pos:column="40">startPos</name> <op:operator pos:line="1461" pos:column="49">&lt;=</op:operator> <name pos:line="1461" pos:column="52">endPos</name><op:operator pos:line="1461" pos:column="58">)</op:operator> <op:operator pos:line="1461" pos:column="60">?</op:operator> <name pos:line="1461" pos:column="62">endPos</name> <op:operator pos:line="1461" pos:column="69">-</op:operator> <name pos:line="1461" pos:column="71">lengthFind</name> <op:operator pos:line="1461" pos:column="82">+</op:operator> <lit:literal type="number" pos:line="1461" pos:column="84">1</lit:literal> <op:operator pos:line="1461" pos:column="86">:</op:operator> <name pos:line="1461" pos:column="88">endPos</name></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="1463" pos:column="17">//Platform::DebugPrintf("Find %d %d %s %d\n", startPos, endPos, ft-&gt;lpstrText, lengthFind);</comment>
		<decl_stmt><decl><type><specifier pos:line="1464" pos:column="17">const</specifier> <name pos:line="1464" pos:column="23">int</name></type> <name pos:line="1464" pos:column="27">limitPos</name> <init pos:line="1464" pos:column="36">= <expr><call><name><name pos:line="1464" pos:column="38">Platform</name><op:operator pos:line="1464" pos:column="46">::</op:operator><name pos:line="1464" pos:column="48">Maximum</name></name><argument_list pos:line="1464" pos:column="55">(<argument><expr><name pos:line="1464" pos:column="56">startPos</name></expr></argument>, <argument><expr><name pos:line="1464" pos:column="66">endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1465" pos:column="17">int</name></type> <name pos:line="1465" pos:column="21">pos</name> <init pos:line="1465" pos:column="25">= <expr><name pos:line="1465" pos:column="27">startPos</name></expr></init></decl>;</decl_stmt>
		<if pos:line="1466" pos:column="17">if <condition pos:line="1466" pos:column="20">(<expr><op:operator pos:line="1466" pos:column="21">!</op:operator><name pos:line="1466" pos:column="22">forward</name></expr>)</condition><then pos:line="1466" pos:column="30"> <block pos:line="1466" pos:column="31">{
			<comment type="line" pos:line="1467" pos:column="25">// Back all of a character</comment>
			<expr_stmt><expr><name pos:line="1468" pos:column="25">pos</name> <op:operator pos:line="1468" pos:column="29">=</op:operator> <call><name pos:line="1468" pos:column="31">NextPosition</name><argument_list pos:line="1468" pos:column="43">(<argument><expr><name pos:line="1468" pos:column="44">pos</name></expr></argument>, <argument><expr><name pos:line="1468" pos:column="49">increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="1470" pos:column="17">if <condition pos:line="1470" pos:column="20">(<expr><name pos:line="1470" pos:column="21">caseSensitive</name></expr>)</condition><then pos:line="1470" pos:column="35"> <block pos:line="1470" pos:column="36">{
			<while pos:line="1471" pos:column="25">while <condition pos:line="1471" pos:column="31">(<expr><name pos:line="1471" pos:column="32">forward</name> <op:operator pos:line="1471" pos:column="40">?</op:operator> <op:operator pos:line="1471" pos:column="42">(</op:operator><name pos:line="1471" pos:column="43">pos</name> <op:operator pos:line="1471" pos:column="47">&lt;</op:operator> <name pos:line="1471" pos:column="49">endSearch</name><op:operator pos:line="1471" pos:column="58">)</op:operator> <op:operator pos:line="1471" pos:column="60">:</op:operator> <op:operator pos:line="1471" pos:column="62">(</op:operator><name pos:line="1471" pos:column="63">pos</name> <op:operator pos:line="1471" pos:column="67">&gt;=</op:operator> <name pos:line="1471" pos:column="70">endSearch</name><op:operator pos:line="1471" pos:column="79">)</op:operator></expr>)</condition> <block pos:line="1471" pos:column="82">{
				<decl_stmt><decl><type><name pos:line="1472" pos:column="33">bool</name></type> <name pos:line="1472" pos:column="38">found</name> <init pos:line="1472" pos:column="44">= <expr><op:operator pos:line="1472" pos:column="46">(</op:operator><name pos:line="1472" pos:column="47">pos</name> <op:operator pos:line="1472" pos:column="51">+</op:operator> <name pos:line="1472" pos:column="53">lengthFind</name><op:operator pos:line="1472" pos:column="63">)</op:operator> <op:operator pos:line="1472" pos:column="65">&lt;=</op:operator> <name pos:line="1472" pos:column="68">limitPos</name></expr></init></decl>;</decl_stmt>
				<for pos:line="1473" pos:column="33">for (<init><decl><type><name pos:line="1473" pos:column="38">int</name></type> <name pos:line="1473" pos:column="42">indexSearch</name> <init pos:line="1473" pos:column="54">= <expr><lit:literal type="number" pos:line="1473" pos:column="56">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="1473" pos:column="59">(</op:operator><name pos:line="1473" pos:column="60">indexSearch</name> <op:operator pos:line="1473" pos:column="72">&lt;</op:operator> <name pos:line="1473" pos:column="74">lengthFind</name><op:operator pos:line="1473" pos:column="84">)</op:operator> <op:operator pos:line="1473" pos:column="86">&amp;&amp;</op:operator> <name pos:line="1473" pos:column="89">found</name></expr>;</condition> <incr><expr><name pos:line="1473" pos:column="96">indexSearch</name><op:operator pos:line="1473" pos:column="107">++</op:operator></expr></incr>) <block pos:line="1473" pos:column="111">{
					<expr_stmt><expr><name pos:line="1474" pos:column="41">found</name> <op:operator pos:line="1474" pos:column="47">=</op:operator> <call><name pos:line="1474" pos:column="49">CharAt</name><argument_list pos:line="1474" pos:column="55">(<argument><expr><name pos:line="1474" pos:column="56">pos</name> <op:operator pos:line="1474" pos:column="60">+</op:operator> <name pos:line="1474" pos:column="62">indexSearch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1474" pos:column="75">==</op:operator> <name><name pos:line="1474" pos:column="78">search</name><index pos:line="1474" pos:column="84">[<expr><name pos:line="1474" pos:column="85">indexSearch</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></for>
				<if pos:line="1476" pos:column="33">if <condition pos:line="1476" pos:column="36">(<expr><name pos:line="1476" pos:column="37">found</name> <op:operator pos:line="1476" pos:column="43">&amp;&amp;</op:operator> <call><name pos:line="1476" pos:column="46">MatchesWordOptions</name><argument_list pos:line="1476" pos:column="64">(<argument><expr><name pos:line="1476" pos:column="65">word</name></expr></argument>, <argument><expr><name pos:line="1476" pos:column="71">wordStart</name></expr></argument>, <argument><expr><name pos:line="1476" pos:column="82">pos</name></expr></argument>, <argument><expr><name pos:line="1476" pos:column="87">lengthFind</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1476" pos:column="99"> <block pos:line="1476" pos:column="100">{
					<return pos:line="1477" pos:column="41">return <expr><name pos:line="1477" pos:column="48">pos</name></expr>;</return>
				}</block></then></if>
				<if pos:line="1479" pos:column="33">if <condition pos:line="1479" pos:column="36">(<expr><op:operator pos:line="1479" pos:column="37">!</op:operator><call><name pos:line="1479" pos:column="38">NextCharacter</name><argument_list pos:line="1479" pos:column="51">(<argument><expr><name pos:line="1479" pos:column="52">pos</name></expr></argument>, <argument><expr><name pos:line="1479" pos:column="57">increment</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1479" pos:column="68">
					<break pos:line="1480" pos:column="41">break;</break></then></if>
			}</block></while>
		}</block></then> <else pos:line="1482" pos:column="19">else <if pos:line="1482" pos:column="24">if <condition pos:line="1482" pos:column="27">(<expr><name pos:line="1482" pos:column="28">SC_CP_UTF8</name> <op:operator pos:line="1482" pos:column="39">==</op:operator> <name pos:line="1482" pos:column="42">dbcsCodePage</name></expr>)</condition><then pos:line="1482" pos:column="55"> <block pos:line="1482" pos:column="56">{
			<decl_stmt><decl><type><specifier pos:line="1483" pos:column="25">const</specifier> <name pos:line="1483" pos:column="31">size_t</name></type> <name pos:line="1483" pos:column="38">maxBytesCharacter</name> <init pos:line="1483" pos:column="56">= <expr><lit:literal type="number" pos:line="1483" pos:column="58">4</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="1484" pos:column="25">const</specifier> <name pos:line="1484" pos:column="31">size_t</name></type> <name pos:line="1484" pos:column="38">maxFoldingExpansion</name> <init pos:line="1484" pos:column="58">= <expr><lit:literal type="number" pos:line="1484" pos:column="60">4</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="1485" pos:column="25">std</name><op:operator pos:line="1485" pos:column="28">::</op:operator><name><name pos:line="1485" pos:column="30">vector</name><argument_list pos:line="1485" pos:column="36">&lt;<argument><expr><name pos:line="1485" pos:column="37">char</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1485" pos:column="43">searchThing</name><argument_list pos:line="1485" pos:column="54">(<argument><expr><name pos:line="1485" pos:column="55">lengthFind</name> <op:operator pos:line="1485" pos:column="66">*</op:operator> <name pos:line="1485" pos:column="68">maxBytesCharacter</name> <op:operator pos:line="1485" pos:column="86">*</op:operator> <name pos:line="1485" pos:column="88">maxFoldingExpansion</name> <op:operator pos:line="1485" pos:column="108">+</op:operator> <lit:literal type="number" pos:line="1485" pos:column="110">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="1486" pos:column="25">const</specifier> <name pos:line="1486" pos:column="31">int</name></type> <name pos:line="1486" pos:column="35">lenSearch</name> <init pos:line="1486" pos:column="45">= <expr><call><name><name pos:line="1486" pos:column="47">pcf</name><op:operator pos:line="1486" pos:column="50">-&gt;</op:operator><name pos:line="1486" pos:column="52">Fold</name></name><argument_list pos:line="1486" pos:column="56">(<argument><expr><op:operator pos:line="1486" pos:column="57">&amp;</op:operator><name><name pos:line="1486" pos:column="58">searchThing</name><index pos:line="1486" pos:column="69">[<expr><lit:literal type="number" pos:line="1486" pos:column="70">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1486" pos:column="74">searchThing</name><op:operator pos:line="1486" pos:column="85">.</op:operator><name pos:line="1486" pos:column="86">size</name></name><argument_list pos:line="1486" pos:column="90">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1486" pos:column="94">search</name></expr></argument>, <argument><expr><name pos:line="1486" pos:column="102">lengthFind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<while pos:line="1487" pos:column="25">while <condition pos:line="1487" pos:column="31">(<expr><name pos:line="1487" pos:column="32">forward</name> <op:operator pos:line="1487" pos:column="40">?</op:operator> <op:operator pos:line="1487" pos:column="42">(</op:operator><name pos:line="1487" pos:column="43">pos</name> <op:operator pos:line="1487" pos:column="47">&lt;</op:operator> <name pos:line="1487" pos:column="49">endSearch</name><op:operator pos:line="1487" pos:column="58">)</op:operator> <op:operator pos:line="1487" pos:column="60">:</op:operator> <op:operator pos:line="1487" pos:column="62">(</op:operator><name pos:line="1487" pos:column="63">pos</name> <op:operator pos:line="1487" pos:column="67">&gt;=</op:operator> <name pos:line="1487" pos:column="70">endSearch</name><op:operator pos:line="1487" pos:column="79">)</op:operator></expr>)</condition> <block pos:line="1487" pos:column="82">{
				<decl_stmt><decl><type><name pos:line="1488" pos:column="33">int</name></type> <name pos:line="1488" pos:column="37">widthFirstCharacter</name> <init pos:line="1488" pos:column="57">= <expr><lit:literal type="number" pos:line="1488" pos:column="59">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1489" pos:column="33">int</name></type> <name pos:line="1489" pos:column="37">indexDocument</name> <init pos:line="1489" pos:column="51">= <expr><lit:literal type="number" pos:line="1489" pos:column="53">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1490" pos:column="33">int</name></type> <name pos:line="1490" pos:column="37">indexSearch</name> <init pos:line="1490" pos:column="49">= <expr><lit:literal type="number" pos:line="1490" pos:column="51">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1491" pos:column="33">bool</name></type> <name pos:line="1491" pos:column="38">characterMatches</name> <init pos:line="1491" pos:column="55">= <expr><lit:literal type="boolean" pos:line="1491" pos:column="57">true</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="1492" pos:column="33">while <condition pos:line="1492" pos:column="39">(<expr><name pos:line="1492" pos:column="40">characterMatches</name> <op:operator pos:line="1492" pos:column="57">&amp;&amp;</op:operator>
					<op:operator pos:line="1493" pos:column="41">(</op:operator><op:operator pos:line="1493" pos:column="42">(</op:operator><name pos:line="1493" pos:column="43">pos</name> <op:operator pos:line="1493" pos:column="47">+</op:operator> <name pos:line="1493" pos:column="49">indexDocument</name><op:operator pos:line="1493" pos:column="62">)</op:operator> <op:operator pos:line="1493" pos:column="64">&lt;</op:operator> <name pos:line="1493" pos:column="66">limitPos</name><op:operator pos:line="1493" pos:column="74">)</op:operator> <op:operator pos:line="1493" pos:column="76">&amp;&amp;</op:operator>
					<op:operator pos:line="1494" pos:column="41">(</op:operator><name pos:line="1494" pos:column="42">indexSearch</name> <op:operator pos:line="1494" pos:column="54">&lt;</op:operator> <name pos:line="1494" pos:column="56">lenSearch</name><op:operator pos:line="1494" pos:column="65">)</op:operator></expr>)</condition> <block pos:line="1494" pos:column="68">{
					<decl_stmt><decl><type><name pos:line="1495" pos:column="41">char</name></type> <name><name pos:line="1495" pos:column="46">bytes</name><index pos:line="1495" pos:column="51">[<expr><name pos:line="1495" pos:column="52">maxBytesCharacter</name> <op:operator pos:line="1495" pos:column="70">+</op:operator> <lit:literal type="number" pos:line="1495" pos:column="72">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><name><name pos:line="1496" pos:column="41">bytes</name><index pos:line="1496" pos:column="46">[<expr><name pos:line="1496" pos:column="47">maxBytesCharacter</name></expr>]</index></name> <op:operator pos:line="1496" pos:column="66">=</op:operator> <lit:literal type="number" pos:line="1496" pos:column="68">0</lit:literal></expr>;</expr_stmt>
					<decl_stmt><decl><type><specifier pos:line="1497" pos:column="41">const</specifier> <name pos:line="1497" pos:column="47">int</name></type> <name pos:line="1497" pos:column="51">widthChar</name> <init pos:line="1497" pos:column="61">= <expr><call><name pos:line="1497" pos:column="63">ExtractChar</name><argument_list pos:line="1497" pos:column="74">(<argument><expr><name pos:line="1497" pos:column="75">pos</name> <op:operator pos:line="1497" pos:column="79">+</op:operator> <name pos:line="1497" pos:column="81">indexDocument</name></expr></argument>, <argument><expr><name pos:line="1497" pos:column="96">bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="1498" pos:column="41">if <condition pos:line="1498" pos:column="44">(<expr><op:operator pos:line="1498" pos:column="45">!</op:operator><name pos:line="1498" pos:column="46">widthFirstCharacter</name></expr>)</condition><then pos:line="1498" pos:column="66">
						<expr_stmt><expr><name pos:line="1499" pos:column="49">widthFirstCharacter</name> <op:operator pos:line="1499" pos:column="69">=</op:operator> <name pos:line="1499" pos:column="71">widthChar</name></expr>;</expr_stmt></then></if>
					<decl_stmt><decl><type><name pos:line="1500" pos:column="41">char</name></type> <name><name pos:line="1500" pos:column="46">folded</name><index pos:line="1500" pos:column="52">[<expr><name pos:line="1500" pos:column="53">maxBytesCharacter</name> <op:operator pos:line="1500" pos:column="71">*</op:operator> <name pos:line="1500" pos:column="73">maxFoldingExpansion</name> <op:operator pos:line="1500" pos:column="93">+</op:operator> <lit:literal type="number" pos:line="1500" pos:column="95">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier pos:line="1501" pos:column="41">const</specifier> <name pos:line="1501" pos:column="47">int</name></type> <name pos:line="1501" pos:column="51">lenFlat</name> <init pos:line="1501" pos:column="59">= <expr><call><name><name pos:line="1501" pos:column="61">pcf</name><op:operator pos:line="1501" pos:column="64">-&gt;</op:operator><name pos:line="1501" pos:column="66">Fold</name></name><argument_list pos:line="1501" pos:column="70">(<argument><expr><name pos:line="1501" pos:column="71">folded</name></expr></argument>, <argument><expr><sizeof pos:line="1501" pos:column="79">sizeof<argument_list pos:line="1501" pos:column="85">(<argument><expr><name pos:line="1501" pos:column="86">folded</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1501" pos:column="95">bytes</name></expr></argument>, <argument><expr><name pos:line="1501" pos:column="102">widthChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name pos:line="1502" pos:column="41">folded</name><index pos:line="1502" pos:column="47">[<expr><name pos:line="1502" pos:column="48">lenFlat</name></expr>]</index></name> <op:operator pos:line="1502" pos:column="57">=</op:operator> <lit:literal type="number" pos:line="1502" pos:column="59">0</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="1503" pos:column="41">// Does folded match the buffer</comment>
					<expr_stmt><expr><name pos:line="1504" pos:column="41">characterMatches</name> <op:operator pos:line="1504" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="1504" pos:column="60">0</lit:literal> <op:operator pos:line="1504" pos:column="62">==</op:operator> <call><name pos:line="1504" pos:column="65">memcmp</name><argument_list pos:line="1504" pos:column="71">(<argument><expr><name pos:line="1504" pos:column="72">folded</name></expr></argument>, <argument><expr><op:operator pos:line="1504" pos:column="80">&amp;</op:operator><name><name pos:line="1504" pos:column="81">searchThing</name><index pos:line="1504" pos:column="92">[<expr><lit:literal type="number" pos:line="1504" pos:column="93">0</lit:literal></expr>]</index></name> <op:operator pos:line="1504" pos:column="96">+</op:operator> <name pos:line="1504" pos:column="98">indexSearch</name></expr></argument>, <argument><expr><name pos:line="1504" pos:column="111">lenFlat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1505" pos:column="41">indexDocument</name> <op:operator pos:line="1505" pos:column="55">+=</op:operator> <name pos:line="1505" pos:column="58">widthChar</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1506" pos:column="41">indexSearch</name> <op:operator pos:line="1506" pos:column="53">+=</op:operator> <name pos:line="1506" pos:column="56">lenFlat</name></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="1508" pos:column="33">if <condition pos:line="1508" pos:column="36">(<expr><name pos:line="1508" pos:column="37">characterMatches</name> <op:operator pos:line="1508" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="1508" pos:column="57">(</op:operator><name pos:line="1508" pos:column="58">indexSearch</name> <op:operator pos:line="1508" pos:column="70">==</op:operator> <call><name><name pos:line="1508" pos:column="73">static_cast</name><argument_list pos:line="1508" pos:column="84">&lt;<argument><expr><name pos:line="1508" pos:column="85">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1508" pos:column="89">(<argument><expr><name pos:line="1508" pos:column="90">lenSearch</name></expr></argument>)</argument_list></call><op:operator pos:line="1508" pos:column="100">)</op:operator></expr>)</condition><then pos:line="1508" pos:column="102"> <block pos:line="1508" pos:column="103">{
					<if pos:line="1509" pos:column="41">if <condition pos:line="1509" pos:column="44">(<expr><call><name pos:line="1509" pos:column="45">MatchesWordOptions</name><argument_list pos:line="1509" pos:column="63">(<argument><expr><name pos:line="1509" pos:column="64">word</name></expr></argument>, <argument><expr><name pos:line="1509" pos:column="70">wordStart</name></expr></argument>, <argument><expr><name pos:line="1509" pos:column="81">pos</name></expr></argument>, <argument><expr><name pos:line="1509" pos:column="86">indexDocument</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1509" pos:column="101"> <block pos:line="1509" pos:column="102">{
						<expr_stmt><expr><op:operator pos:line="1510" pos:column="49">*</op:operator><name pos:line="1510" pos:column="50">length</name> <op:operator pos:line="1510" pos:column="57">=</op:operator> <name pos:line="1510" pos:column="59">indexDocument</name></expr>;</expr_stmt>
						<return pos:line="1511" pos:column="49">return <expr><name pos:line="1511" pos:column="56">pos</name></expr>;</return>
					}</block></then></if>
				}</block></then></if>
				<if pos:line="1514" pos:column="33">if <condition pos:line="1514" pos:column="36">(<expr><name pos:line="1514" pos:column="37">forward</name></expr>)</condition><then pos:line="1514" pos:column="45"> <block pos:line="1514" pos:column="46">{
					<expr_stmt><expr><name pos:line="1515" pos:column="41">pos</name> <op:operator pos:line="1515" pos:column="45">+=</op:operator> <name pos:line="1515" pos:column="48">widthFirstCharacter</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="1516" pos:column="35">else <block pos:line="1516" pos:column="40">{
					<if pos:line="1517" pos:column="41">if <condition pos:line="1517" pos:column="44">(<expr><op:operator pos:line="1517" pos:column="45">!</op:operator><call><name pos:line="1517" pos:column="46">NextCharacter</name><argument_list pos:line="1517" pos:column="59">(<argument><expr><name pos:line="1517" pos:column="60">pos</name></expr></argument>, <argument><expr><name pos:line="1517" pos:column="65">increment</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1517" pos:column="76">
						<break pos:line="1518" pos:column="49">break;</break></then></if>
				}</block></else></if>
			}</block></while>
		}</block></then> <else pos:line="1521" pos:column="19">else <if pos:line="1521" pos:column="24">if <condition pos:line="1521" pos:column="27">(<expr><name pos:line="1521" pos:column="28">dbcsCodePage</name></expr>)</condition><then pos:line="1521" pos:column="41"> <block pos:line="1521" pos:column="42">{
			<decl_stmt><decl><type><specifier pos:line="1522" pos:column="25">const</specifier> <name pos:line="1522" pos:column="31">size_t</name></type> <name pos:line="1522" pos:column="38">maxBytesCharacter</name> <init pos:line="1522" pos:column="56">= <expr><lit:literal type="number" pos:line="1522" pos:column="58">2</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="1523" pos:column="25">const</specifier> <name pos:line="1523" pos:column="31">size_t</name></type> <name pos:line="1523" pos:column="38">maxFoldingExpansion</name> <init pos:line="1523" pos:column="58">= <expr><lit:literal type="number" pos:line="1523" pos:column="60">4</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="1524" pos:column="25">std</name><op:operator pos:line="1524" pos:column="28">::</op:operator><name><name pos:line="1524" pos:column="30">vector</name><argument_list pos:line="1524" pos:column="36">&lt;<argument><expr><name pos:line="1524" pos:column="37">char</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1524" pos:column="43">searchThing</name><argument_list pos:line="1524" pos:column="54">(<argument><expr><name pos:line="1524" pos:column="55">lengthFind</name> <op:operator pos:line="1524" pos:column="66">*</op:operator> <name pos:line="1524" pos:column="68">maxBytesCharacter</name> <op:operator pos:line="1524" pos:column="86">*</op:operator> <name pos:line="1524" pos:column="88">maxFoldingExpansion</name> <op:operator pos:line="1524" pos:column="108">+</op:operator> <lit:literal type="number" pos:line="1524" pos:column="110">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="1525" pos:column="25">const</specifier> <name pos:line="1525" pos:column="31">int</name></type> <name pos:line="1525" pos:column="35">lenSearch</name> <init pos:line="1525" pos:column="45">= <expr><call><name><name pos:line="1525" pos:column="47">pcf</name><op:operator pos:line="1525" pos:column="50">-&gt;</op:operator><name pos:line="1525" pos:column="52">Fold</name></name><argument_list pos:line="1525" pos:column="56">(<argument><expr><op:operator pos:line="1525" pos:column="57">&amp;</op:operator><name><name pos:line="1525" pos:column="58">searchThing</name><index pos:line="1525" pos:column="69">[<expr><lit:literal type="number" pos:line="1525" pos:column="70">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1525" pos:column="74">searchThing</name><op:operator pos:line="1525" pos:column="85">.</op:operator><name pos:line="1525" pos:column="86">size</name></name><argument_list pos:line="1525" pos:column="90">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1525" pos:column="94">search</name></expr></argument>, <argument><expr><name pos:line="1525" pos:column="102">lengthFind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<while pos:line="1526" pos:column="25">while <condition pos:line="1526" pos:column="31">(<expr><name pos:line="1526" pos:column="32">forward</name> <op:operator pos:line="1526" pos:column="40">?</op:operator> <op:operator pos:line="1526" pos:column="42">(</op:operator><name pos:line="1526" pos:column="43">pos</name> <op:operator pos:line="1526" pos:column="47">&lt;</op:operator> <name pos:line="1526" pos:column="49">endSearch</name><op:operator pos:line="1526" pos:column="58">)</op:operator> <op:operator pos:line="1526" pos:column="60">:</op:operator> <op:operator pos:line="1526" pos:column="62">(</op:operator><name pos:line="1526" pos:column="63">pos</name> <op:operator pos:line="1526" pos:column="67">&gt;=</op:operator> <name pos:line="1526" pos:column="70">endSearch</name><op:operator pos:line="1526" pos:column="79">)</op:operator></expr>)</condition> <block pos:line="1526" pos:column="82">{
				<decl_stmt><decl><type><name pos:line="1527" pos:column="33">int</name></type> <name pos:line="1527" pos:column="37">indexDocument</name> <init pos:line="1527" pos:column="51">= <expr><lit:literal type="number" pos:line="1527" pos:column="53">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1528" pos:column="33">int</name></type> <name pos:line="1528" pos:column="37">indexSearch</name> <init pos:line="1528" pos:column="49">= <expr><lit:literal type="number" pos:line="1528" pos:column="51">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="1529" pos:column="33">bool</name></type> <name pos:line="1529" pos:column="38">characterMatches</name> <init pos:line="1529" pos:column="55">= <expr><lit:literal type="boolean" pos:line="1529" pos:column="57">true</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="1530" pos:column="33">while <condition pos:line="1530" pos:column="39">(<expr><name pos:line="1530" pos:column="40">characterMatches</name> <op:operator pos:line="1530" pos:column="57">&amp;&amp;</op:operator>
					<op:operator pos:line="1531" pos:column="41">(</op:operator><op:operator pos:line="1531" pos:column="42">(</op:operator><name pos:line="1531" pos:column="43">pos</name> <op:operator pos:line="1531" pos:column="47">+</op:operator> <name pos:line="1531" pos:column="49">indexDocument</name><op:operator pos:line="1531" pos:column="62">)</op:operator> <op:operator pos:line="1531" pos:column="64">&lt;</op:operator> <name pos:line="1531" pos:column="66">limitPos</name><op:operator pos:line="1531" pos:column="74">)</op:operator> <op:operator pos:line="1531" pos:column="76">&amp;&amp;</op:operator>
					<op:operator pos:line="1532" pos:column="41">(</op:operator><name pos:line="1532" pos:column="42">indexSearch</name> <op:operator pos:line="1532" pos:column="54">&lt;</op:operator> <name pos:line="1532" pos:column="56">lenSearch</name><op:operator pos:line="1532" pos:column="65">)</op:operator></expr>)</condition> <block pos:line="1532" pos:column="68">{
					<decl_stmt><decl><type><name pos:line="1533" pos:column="41">char</name></type> <name><name pos:line="1533" pos:column="46">bytes</name><index pos:line="1533" pos:column="51">[<expr><name pos:line="1533" pos:column="52">maxBytesCharacter</name> <op:operator pos:line="1533" pos:column="70">+</op:operator> <lit:literal type="number" pos:line="1533" pos:column="72">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><name><name pos:line="1534" pos:column="41">bytes</name><index pos:line="1534" pos:column="46">[<expr><lit:literal type="number" pos:line="1534" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="1534" pos:column="50">=</op:operator> <call><name><name pos:line="1534" pos:column="52">cb</name><op:operator pos:line="1534" pos:column="54">.</op:operator><name pos:line="1534" pos:column="55">CharAt</name></name><argument_list pos:line="1534" pos:column="61">(<argument><expr><name pos:line="1534" pos:column="62">pos</name> <op:operator pos:line="1534" pos:column="66">+</op:operator> <name pos:line="1534" pos:column="68">indexDocument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><specifier pos:line="1535" pos:column="41">const</specifier> <name pos:line="1535" pos:column="47">int</name></type> <name pos:line="1535" pos:column="51">widthChar</name> <init pos:line="1535" pos:column="61">= <expr><call><name pos:line="1535" pos:column="63">IsDBCSLeadByte</name><argument_list pos:line="1535" pos:column="77">(<argument><expr><name><name pos:line="1535" pos:column="78">bytes</name><index pos:line="1535" pos:column="83">[<expr><lit:literal type="number" pos:line="1535" pos:column="84">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="1535" pos:column="88">?</op:operator> <lit:literal type="number" pos:line="1535" pos:column="90">2</lit:literal> <op:operator pos:line="1535" pos:column="92">:</op:operator> <lit:literal type="number" pos:line="1535" pos:column="94">1</lit:literal></expr></init></decl>;</decl_stmt>
					<if pos:line="1536" pos:column="41">if <condition pos:line="1536" pos:column="44">(<expr><name pos:line="1536" pos:column="45">widthChar</name> <op:operator pos:line="1536" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="1536" pos:column="58">2</lit:literal></expr>)</condition><then pos:line="1536" pos:column="60">
						<expr_stmt><expr><name><name pos:line="1537" pos:column="49">bytes</name><index pos:line="1537" pos:column="54">[<expr><lit:literal type="number" pos:line="1537" pos:column="55">1</lit:literal></expr>]</index></name> <op:operator pos:line="1537" pos:column="58">=</op:operator> <call><name><name pos:line="1537" pos:column="60">cb</name><op:operator pos:line="1537" pos:column="62">.</op:operator><name pos:line="1537" pos:column="63">CharAt</name></name><argument_list pos:line="1537" pos:column="69">(<argument><expr><name pos:line="1537" pos:column="70">pos</name> <op:operator pos:line="1537" pos:column="74">+</op:operator> <name pos:line="1537" pos:column="76">indexDocument</name> <op:operator pos:line="1537" pos:column="90">+</op:operator> <lit:literal type="number" pos:line="1537" pos:column="92">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<decl_stmt><decl><type><name pos:line="1538" pos:column="41">char</name></type> <name><name pos:line="1538" pos:column="46">folded</name><index pos:line="1538" pos:column="52">[<expr><name pos:line="1538" pos:column="53">maxBytesCharacter</name> <op:operator pos:line="1538" pos:column="71">*</op:operator> <name pos:line="1538" pos:column="73">maxFoldingExpansion</name> <op:operator pos:line="1538" pos:column="93">+</op:operator> <lit:literal type="number" pos:line="1538" pos:column="95">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<decl_stmt><decl><type><specifier pos:line="1539" pos:column="41">const</specifier> <name pos:line="1539" pos:column="47">int</name></type> <name pos:line="1539" pos:column="51">lenFlat</name> <init pos:line="1539" pos:column="59">= <expr><call><name><name pos:line="1539" pos:column="61">pcf</name><op:operator pos:line="1539" pos:column="64">-&gt;</op:operator><name pos:line="1539" pos:column="66">Fold</name></name><argument_list pos:line="1539" pos:column="70">(<argument><expr><name pos:line="1539" pos:column="71">folded</name></expr></argument>, <argument><expr><sizeof pos:line="1539" pos:column="79">sizeof<argument_list pos:line="1539" pos:column="85">(<argument><expr><name pos:line="1539" pos:column="86">folded</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="1539" pos:column="95">bytes</name></expr></argument>, <argument><expr><name pos:line="1539" pos:column="102">widthChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name pos:line="1540" pos:column="41">folded</name><index pos:line="1540" pos:column="47">[<expr><name pos:line="1540" pos:column="48">lenFlat</name></expr>]</index></name> <op:operator pos:line="1540" pos:column="57">=</op:operator> <lit:literal type="number" pos:line="1540" pos:column="59">0</lit:literal></expr>;</expr_stmt>
					<comment type="line" pos:line="1541" pos:column="41">// Does folded match the buffer</comment>
					<expr_stmt><expr><name pos:line="1542" pos:column="41">characterMatches</name> <op:operator pos:line="1542" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="1542" pos:column="60">0</lit:literal> <op:operator pos:line="1542" pos:column="62">==</op:operator> <call><name pos:line="1542" pos:column="65">memcmp</name><argument_list pos:line="1542" pos:column="71">(<argument><expr><name pos:line="1542" pos:column="72">folded</name></expr></argument>, <argument><expr><op:operator pos:line="1542" pos:column="80">&amp;</op:operator><name><name pos:line="1542" pos:column="81">searchThing</name><index pos:line="1542" pos:column="92">[<expr><lit:literal type="number" pos:line="1542" pos:column="93">0</lit:literal></expr>]</index></name> <op:operator pos:line="1542" pos:column="96">+</op:operator> <name pos:line="1542" pos:column="98">indexSearch</name></expr></argument>, <argument><expr><name pos:line="1542" pos:column="111">lenFlat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1543" pos:column="41">indexDocument</name> <op:operator pos:line="1543" pos:column="55">+=</op:operator> <name pos:line="1543" pos:column="58">widthChar</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1544" pos:column="41">indexSearch</name> <op:operator pos:line="1544" pos:column="53">+=</op:operator> <name pos:line="1544" pos:column="56">lenFlat</name></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="1546" pos:column="33">if <condition pos:line="1546" pos:column="36">(<expr><name pos:line="1546" pos:column="37">characterMatches</name> <op:operator pos:line="1546" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="1546" pos:column="57">(</op:operator><name pos:line="1546" pos:column="58">indexSearch</name> <op:operator pos:line="1546" pos:column="70">==</op:operator> <call><name><name pos:line="1546" pos:column="73">static_cast</name><argument_list pos:line="1546" pos:column="84">&lt;<argument><expr><name pos:line="1546" pos:column="85">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1546" pos:column="89">(<argument><expr><name pos:line="1546" pos:column="90">lenSearch</name></expr></argument>)</argument_list></call><op:operator pos:line="1546" pos:column="100">)</op:operator></expr>)</condition><then pos:line="1546" pos:column="102"> <block pos:line="1546" pos:column="103">{
					<if pos:line="1547" pos:column="41">if <condition pos:line="1547" pos:column="44">(<expr><call><name pos:line="1547" pos:column="45">MatchesWordOptions</name><argument_list pos:line="1547" pos:column="63">(<argument><expr><name pos:line="1547" pos:column="64">word</name></expr></argument>, <argument><expr><name pos:line="1547" pos:column="70">wordStart</name></expr></argument>, <argument><expr><name pos:line="1547" pos:column="81">pos</name></expr></argument>, <argument><expr><name pos:line="1547" pos:column="86">indexDocument</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1547" pos:column="101"> <block pos:line="1547" pos:column="102">{
						<expr_stmt><expr><op:operator pos:line="1548" pos:column="49">*</op:operator><name pos:line="1548" pos:column="50">length</name> <op:operator pos:line="1548" pos:column="57">=</op:operator> <name pos:line="1548" pos:column="59">indexDocument</name></expr>;</expr_stmt>
						<return pos:line="1549" pos:column="49">return <expr><name pos:line="1549" pos:column="56">pos</name></expr>;</return>
					}</block></then></if>
				}</block></then></if>
				<if pos:line="1552" pos:column="33">if <condition pos:line="1552" pos:column="36">(<expr><op:operator pos:line="1552" pos:column="37">!</op:operator><call><name pos:line="1552" pos:column="38">NextCharacter</name><argument_list pos:line="1552" pos:column="51">(<argument><expr><name pos:line="1552" pos:column="52">pos</name></expr></argument>, <argument><expr><name pos:line="1552" pos:column="57">increment</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1552" pos:column="68">
					<break pos:line="1553" pos:column="41">break;</break></then></if>
			}</block></while>
		}</block></then> <else pos:line="1555" pos:column="19">else <block pos:line="1555" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="1556" pos:column="25">CaseFolderTable</name></type> <name pos:line="1556" pos:column="41">caseFolder</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name pos:line="1557" pos:column="25">std</name><op:operator pos:line="1557" pos:column="28">::</op:operator><name><name pos:line="1557" pos:column="30">vector</name><argument_list pos:line="1557" pos:column="36">&lt;<argument><expr><name pos:line="1557" pos:column="37">char</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1557" pos:column="43">searchThing</name><argument_list pos:line="1557" pos:column="54">(<argument><expr><name pos:line="1557" pos:column="55">lengthFind</name> <op:operator pos:line="1557" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="1557" pos:column="68">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="1558" pos:column="25">pcf</name><op:operator pos:line="1558" pos:column="28">-&gt;</op:operator><name pos:line="1558" pos:column="30">Fold</name></name><argument_list pos:line="1558" pos:column="34">(<argument><expr><op:operator pos:line="1558" pos:column="35">&amp;</op:operator><name><name pos:line="1558" pos:column="36">searchThing</name><index pos:line="1558" pos:column="47">[<expr><lit:literal type="number" pos:line="1558" pos:column="48">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><call><name><name pos:line="1558" pos:column="52">searchThing</name><op:operator pos:line="1558" pos:column="63">.</op:operator><name pos:line="1558" pos:column="64">size</name></name><argument_list pos:line="1558" pos:column="68">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="1558" pos:column="72">search</name></expr></argument>, <argument><expr><name pos:line="1558" pos:column="80">lengthFind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<while pos:line="1559" pos:column="25">while <condition pos:line="1559" pos:column="31">(<expr><name pos:line="1559" pos:column="32">forward</name> <op:operator pos:line="1559" pos:column="40">?</op:operator> <op:operator pos:line="1559" pos:column="42">(</op:operator><name pos:line="1559" pos:column="43">pos</name> <op:operator pos:line="1559" pos:column="47">&lt;</op:operator> <name pos:line="1559" pos:column="49">endSearch</name><op:operator pos:line="1559" pos:column="58">)</op:operator> <op:operator pos:line="1559" pos:column="60">:</op:operator> <op:operator pos:line="1559" pos:column="62">(</op:operator><name pos:line="1559" pos:column="63">pos</name> <op:operator pos:line="1559" pos:column="67">&gt;=</op:operator> <name pos:line="1559" pos:column="70">endSearch</name><op:operator pos:line="1559" pos:column="79">)</op:operator></expr>)</condition> <block pos:line="1559" pos:column="82">{
				<decl_stmt><decl><type><name pos:line="1560" pos:column="33">bool</name></type> <name pos:line="1560" pos:column="38">found</name> <init pos:line="1560" pos:column="44">= <expr><op:operator pos:line="1560" pos:column="46">(</op:operator><name pos:line="1560" pos:column="47">pos</name> <op:operator pos:line="1560" pos:column="51">+</op:operator> <name pos:line="1560" pos:column="53">lengthFind</name><op:operator pos:line="1560" pos:column="63">)</op:operator> <op:operator pos:line="1560" pos:column="65">&lt;=</op:operator> <name pos:line="1560" pos:column="68">limitPos</name></expr></init></decl>;</decl_stmt>
				<for pos:line="1561" pos:column="33">for (<init><decl><type><name pos:line="1561" pos:column="38">int</name></type> <name pos:line="1561" pos:column="42">indexSearch</name> <init pos:line="1561" pos:column="54">= <expr><lit:literal type="number" pos:line="1561" pos:column="56">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="1561" pos:column="59">(</op:operator><name pos:line="1561" pos:column="60">indexSearch</name> <op:operator pos:line="1561" pos:column="72">&lt;</op:operator> <name pos:line="1561" pos:column="74">lengthFind</name><op:operator pos:line="1561" pos:column="84">)</op:operator> <op:operator pos:line="1561" pos:column="86">&amp;&amp;</op:operator> <name pos:line="1561" pos:column="89">found</name></expr>;</condition> <incr><expr><name pos:line="1561" pos:column="96">indexSearch</name><op:operator pos:line="1561" pos:column="107">++</op:operator></expr></incr>) <block pos:line="1561" pos:column="111">{
					<decl_stmt><decl><type><name pos:line="1562" pos:column="41">char</name></type> <name pos:line="1562" pos:column="46">ch</name> <init pos:line="1562" pos:column="49">= <expr><call><name pos:line="1562" pos:column="51">CharAt</name><argument_list pos:line="1562" pos:column="57">(<argument><expr><name pos:line="1562" pos:column="58">pos</name> <op:operator pos:line="1562" pos:column="62">+</op:operator> <name pos:line="1562" pos:column="64">indexSearch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="1563" pos:column="41">char</name></type> <name><name pos:line="1563" pos:column="46">folded</name><index pos:line="1563" pos:column="52">[<expr><lit:literal type="number" pos:line="1563" pos:column="53">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="1564" pos:column="41">pcf</name><op:operator pos:line="1564" pos:column="44">-&gt;</op:operator><name pos:line="1564" pos:column="46">Fold</name></name><argument_list pos:line="1564" pos:column="50">(<argument><expr><name pos:line="1564" pos:column="51">folded</name></expr></argument>, <argument><expr><sizeof pos:line="1564" pos:column="59">sizeof<argument_list pos:line="1564" pos:column="65">(<argument><expr><name pos:line="1564" pos:column="66">folded</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><op:operator pos:line="1564" pos:column="75">&amp;</op:operator><name pos:line="1564" pos:column="76">ch</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1564" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="1565" pos:column="41">found</name> <op:operator pos:line="1565" pos:column="47">=</op:operator> <name><name pos:line="1565" pos:column="49">folded</name><index pos:line="1565" pos:column="55">[<expr><lit:literal type="number" pos:line="1565" pos:column="56">0</lit:literal></expr>]</index></name> <op:operator pos:line="1565" pos:column="59">==</op:operator> <name><name pos:line="1565" pos:column="62">searchThing</name><index pos:line="1565" pos:column="73">[<expr><name pos:line="1565" pos:column="74">indexSearch</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></for>
				<if pos:line="1567" pos:column="33">if <condition pos:line="1567" pos:column="36">(<expr><name pos:line="1567" pos:column="37">found</name> <op:operator pos:line="1567" pos:column="43">&amp;&amp;</op:operator> <call><name pos:line="1567" pos:column="46">MatchesWordOptions</name><argument_list pos:line="1567" pos:column="64">(<argument><expr><name pos:line="1567" pos:column="65">word</name></expr></argument>, <argument><expr><name pos:line="1567" pos:column="71">wordStart</name></expr></argument>, <argument><expr><name pos:line="1567" pos:column="82">pos</name></expr></argument>, <argument><expr><name pos:line="1567" pos:column="87">lengthFind</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1567" pos:column="99"> <block pos:line="1567" pos:column="100">{
					<return pos:line="1568" pos:column="41">return <expr><name pos:line="1568" pos:column="48">pos</name></expr>;</return>
				}</block></then></if>
				<if pos:line="1570" pos:column="33">if <condition pos:line="1570" pos:column="36">(<expr><op:operator pos:line="1570" pos:column="37">!</op:operator><call><name pos:line="1570" pos:column="38">NextCharacter</name><argument_list pos:line="1570" pos:column="51">(<argument><expr><name pos:line="1570" pos:column="52">pos</name></expr></argument>, <argument><expr><name pos:line="1570" pos:column="57">increment</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1570" pos:column="68">
					<break pos:line="1571" pos:column="41">break;</break></then></if>
			}</block></while>
		}</block></else></if></else></if></else></if>
	}</block></else></if>
	<comment type="line" pos:line="1575" pos:column="9">//Platform::DebugPrintf("Not found\n");</comment>
	<return pos:line="1576" pos:column="9">return <expr><op:operator pos:line="1576" pos:column="16">-</op:operator><lit:literal type="number" pos:line="1576" pos:column="17">1</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1579" pos:column="1">const</specifier> <name pos:line="1579" pos:column="7">char</name> <type:modifier pos:line="1579" pos:column="12">*</type:modifier></type><name><name pos:line="1579" pos:column="13">Document</name><op:operator pos:line="1579" pos:column="21">::</op:operator><name pos:line="1579" pos:column="23">SubstituteByPosition</name></name><parameter_list pos:line="1579" pos:column="43">(<param><decl><type><specifier pos:line="1579" pos:column="44">const</specifier> <name pos:line="1579" pos:column="50">char</name> <type:modifier pos:line="1579" pos:column="55">*</type:modifier></type><name pos:line="1579" pos:column="56">text</name></decl></param>, <param><decl><type><name pos:line="1579" pos:column="62">int</name> <type:modifier pos:line="1579" pos:column="66">*</type:modifier></type><name pos:line="1579" pos:column="67">length</name></decl></param>)</parameter_list> <block pos:line="1579" pos:column="75">{
	<if pos:line="1580" pos:column="9">if <condition pos:line="1580" pos:column="12">(<expr><name pos:line="1580" pos:column="13">regex</name></expr>)</condition><then pos:line="1580" pos:column="19">
		<return pos:line="1581" pos:column="17">return <expr><call><name><name pos:line="1581" pos:column="24">regex</name><op:operator pos:line="1581" pos:column="29">-&gt;</op:operator><name pos:line="1581" pos:column="31">SubstituteByPosition</name></name><argument_list pos:line="1581" pos:column="51">(<argument><expr><name pos:line="1581" pos:column="52">this</name></expr></argument>, <argument><expr><name pos:line="1581" pos:column="58">text</name></expr></argument>, <argument><expr><name pos:line="1581" pos:column="64">length</name></expr></argument>)</argument_list></call></expr>;</return></then>
	<else pos:line="1582" pos:column="9">else
		<return pos:line="1583" pos:column="17">return <expr><lit:literal type="number" pos:line="1583" pos:column="24">0</lit:literal></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="1586" pos:column="1">int</name></type> <name><name pos:line="1586" pos:column="5">Document</name><op:operator pos:line="1586" pos:column="13">::</op:operator><name pos:line="1586" pos:column="15">LinesTotal</name></name><parameter_list pos:line="1586" pos:column="25">()</parameter_list> <specifier pos:line="1586" pos:column="28">const</specifier> <block pos:line="1586" pos:column="34">{
	<return pos:line="1587" pos:column="9">return <expr><call><name><name pos:line="1587" pos:column="16">cb</name><op:operator pos:line="1587" pos:column="18">.</op:operator><name pos:line="1587" pos:column="19">Lines</name></name><argument_list pos:line="1587" pos:column="24">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1590" pos:column="1">void</name></type> <name><name pos:line="1590" pos:column="6">Document</name><op:operator pos:line="1590" pos:column="14">::</op:operator><name pos:line="1590" pos:column="16">ChangeCase</name></name><parameter_list pos:line="1590" pos:column="26">(<param><decl><type><name pos:line="1590" pos:column="27">Range</name></type> <name pos:line="1590" pos:column="33">r</name></decl></param>, <param><decl><type><name pos:line="1590" pos:column="36">bool</name></type> <name pos:line="1590" pos:column="41">makeUpperCase</name></decl></param>)</parameter_list> <block pos:line="1590" pos:column="56">{
	<for pos:line="1591" pos:column="9">for (<init><decl><type><name pos:line="1591" pos:column="14">int</name></type> <name pos:line="1591" pos:column="18">pos</name> <init pos:line="1591" pos:column="22">= <expr><name><name pos:line="1591" pos:column="24">r</name><op:operator pos:line="1591" pos:column="25">.</op:operator><name pos:line="1591" pos:column="26">start</name></name></expr></init></decl>;</init> <condition><expr><name pos:line="1591" pos:column="33">pos</name> <op:operator pos:line="1591" pos:column="37">&lt;</op:operator> <name><name pos:line="1591" pos:column="39">r</name><op:operator pos:line="1591" pos:column="40">.</op:operator><name pos:line="1591" pos:column="41">end</name></name></expr>;</condition><incr/>) <block pos:line="1591" pos:column="47">{
		<decl_stmt><decl><type><name pos:line="1592" pos:column="17">int</name></type> <name pos:line="1592" pos:column="21">len</name> <init pos:line="1592" pos:column="25">= <expr><call><name pos:line="1592" pos:column="27">LenChar</name><argument_list pos:line="1592" pos:column="34">(<argument><expr><name pos:line="1592" pos:column="35">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1593" pos:column="17">if <condition pos:line="1593" pos:column="20">(<expr><name pos:line="1593" pos:column="21">len</name> <op:operator pos:line="1593" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="1593" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="1593" pos:column="30"> <block pos:line="1593" pos:column="31">{
			<decl_stmt><decl><type><name pos:line="1594" pos:column="25">char</name></type> <name pos:line="1594" pos:column="30">ch</name> <init pos:line="1594" pos:column="33">= <expr><call><name pos:line="1594" pos:column="35">CharAt</name><argument_list pos:line="1594" pos:column="41">(<argument><expr><name pos:line="1594" pos:column="42">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1595" pos:column="25">if <condition pos:line="1595" pos:column="28">(<expr><name pos:line="1595" pos:column="29">makeUpperCase</name></expr>)</condition><then pos:line="1595" pos:column="43"> <block pos:line="1595" pos:column="44">{
				<if pos:line="1596" pos:column="33">if <condition pos:line="1596" pos:column="36">(<expr><call><name pos:line="1596" pos:column="37">IsLowerCase</name><argument_list pos:line="1596" pos:column="48">(<argument><expr><name pos:line="1596" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1596" pos:column="53"> <block pos:line="1596" pos:column="54">{
					<expr_stmt><expr><call><name pos:line="1597" pos:column="41">ChangeChar</name><argument_list pos:line="1597" pos:column="51">(<argument><expr><name pos:line="1597" pos:column="52">pos</name></expr></argument>, <argument><expr><call><name><name pos:line="1597" pos:column="57">static_cast</name><argument_list pos:line="1597" pos:column="68">&lt;<argument><expr><name pos:line="1597" pos:column="69">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1597" pos:column="74">(<argument><expr><call><name pos:line="1597" pos:column="75">MakeUpperCase</name><argument_list pos:line="1597" pos:column="88">(<argument><expr><name pos:line="1597" pos:column="89">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="1599" pos:column="27">else <block pos:line="1599" pos:column="32">{
				<if pos:line="1600" pos:column="33">if <condition pos:line="1600" pos:column="36">(<expr><call><name pos:line="1600" pos:column="37">IsUpperCase</name><argument_list pos:line="1600" pos:column="48">(<argument><expr><name pos:line="1600" pos:column="49">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1600" pos:column="53"> <block pos:line="1600" pos:column="54">{
					<expr_stmt><expr><call><name pos:line="1601" pos:column="41">ChangeChar</name><argument_list pos:line="1601" pos:column="51">(<argument><expr><name pos:line="1601" pos:column="52">pos</name></expr></argument>, <argument><expr><call><name><name pos:line="1601" pos:column="57">static_cast</name><argument_list pos:line="1601" pos:column="68">&lt;<argument><expr><name pos:line="1601" pos:column="69">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1601" pos:column="74">(<argument><expr><call><name pos:line="1601" pos:column="75">MakeLowerCase</name><argument_list pos:line="1601" pos:column="88">(<argument><expr><name pos:line="1601" pos:column="89">ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></else></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="1605" pos:column="17">pos</name> <op:operator pos:line="1605" pos:column="21">+=</op:operator> <name pos:line="1605" pos:column="24">len</name></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="1609" pos:column="1">void</name></type> <name><name pos:line="1609" pos:column="6">Document</name><op:operator pos:line="1609" pos:column="14">::</op:operator><name pos:line="1609" pos:column="16">SetDefaultCharClasses</name></name><parameter_list pos:line="1609" pos:column="37">(<param><decl><type><name pos:line="1609" pos:column="38">bool</name></type> <name pos:line="1609" pos:column="43">includeWordClass</name></decl></param>)</parameter_list> <block pos:line="1609" pos:column="61">{
    <expr_stmt><expr><call><name><name pos:line="1610" pos:column="5">charClass</name><op:operator pos:line="1610" pos:column="14">.</op:operator><name pos:line="1610" pos:column="15">SetDefaultCharClasses</name></name><argument_list pos:line="1610" pos:column="36">(<argument><expr><name pos:line="1610" pos:column="37">includeWordClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1613" pos:column="1">void</name></type> <name><name pos:line="1613" pos:column="6">Document</name><op:operator pos:line="1613" pos:column="14">::</op:operator><name pos:line="1613" pos:column="16">SetCharClasses</name></name><parameter_list pos:line="1613" pos:column="30">(<param><decl><type><specifier pos:line="1613" pos:column="31">const</specifier> <name pos:line="1613" pos:column="37">unsigned</name> <name pos:line="1613" pos:column="46">char</name> <type:modifier pos:line="1613" pos:column="51">*</type:modifier></type><name pos:line="1613" pos:column="52">chars</name></decl></param>, <param><decl><type><name><name pos:line="1613" pos:column="59">CharClassify</name><op:operator pos:line="1613" pos:column="71">::</op:operator><name pos:line="1613" pos:column="73">cc</name></name></type> <name pos:line="1613" pos:column="76">newCharClass</name></decl></param>)</parameter_list> <block pos:line="1613" pos:column="90">{
    <expr_stmt><expr><call><name><name pos:line="1614" pos:column="5">charClass</name><op:operator pos:line="1614" pos:column="14">.</op:operator><name pos:line="1614" pos:column="15">SetCharClasses</name></name><argument_list pos:line="1614" pos:column="29">(<argument><expr><name pos:line="1614" pos:column="30">chars</name></expr></argument>, <argument><expr><name pos:line="1614" pos:column="37">newCharClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1617" pos:column="1">void</name></type> <name><name pos:line="1617" pos:column="6">Document</name><op:operator pos:line="1617" pos:column="14">::</op:operator><name pos:line="1617" pos:column="16">SetStylingBits</name></name><parameter_list pos:line="1617" pos:column="30">(<param><decl><type><name pos:line="1617" pos:column="31">int</name></type> <name pos:line="1617" pos:column="35">bits</name></decl></param>)</parameter_list> <block pos:line="1617" pos:column="41">{
	<expr_stmt><expr><name pos:line="1618" pos:column="9">stylingBits</name> <op:operator pos:line="1618" pos:column="21">=</op:operator> <name pos:line="1618" pos:column="23">bits</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1619" pos:column="9">stylingBitsMask</name> <op:operator pos:line="1619" pos:column="25">=</op:operator> <op:operator pos:line="1619" pos:column="27">(</op:operator><lit:literal type="number" pos:line="1619" pos:column="28">1</lit:literal> <op:operator pos:line="1619" pos:column="30">&lt;&lt;</op:operator> <name pos:line="1619" pos:column="33">stylingBits</name><op:operator pos:line="1619" pos:column="44">)</op:operator> <op:operator pos:line="1619" pos:column="46">-</op:operator> <lit:literal type="number" pos:line="1619" pos:column="48">1</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1622" pos:column="1">void</name> <name pos:line="1622" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="1622" pos:column="17">Document</name><op:operator pos:line="1622" pos:column="25">::</op:operator><name pos:line="1622" pos:column="27">StartStyling</name></name><parameter_list pos:line="1622" pos:column="39">(<param><decl><type><name pos:line="1622" pos:column="40">int</name></type> <name pos:line="1622" pos:column="44">position</name></decl></param>, <param><decl><type><name pos:line="1622" pos:column="54">char</name></type> <name pos:line="1622" pos:column="59">mask</name></decl></param>)</parameter_list> <block pos:line="1622" pos:column="65">{
	<expr_stmt><expr><name pos:line="1623" pos:column="9">stylingMask</name> <op:operator pos:line="1623" pos:column="21">=</op:operator> <name pos:line="1623" pos:column="23">mask</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1624" pos:column="9">endStyled</name> <op:operator pos:line="1624" pos:column="19">=</op:operator> <name pos:line="1624" pos:column="21">position</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1627" pos:column="1">bool</name> <name pos:line="1627" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="1627" pos:column="17">Document</name><op:operator pos:line="1627" pos:column="25">::</op:operator><name pos:line="1627" pos:column="27">SetStyleFor</name></name><parameter_list pos:line="1627" pos:column="38">(<param><decl><type><name pos:line="1627" pos:column="39">int</name></type> <name pos:line="1627" pos:column="43">length</name></decl></param>, <param><decl><type><name pos:line="1627" pos:column="51">char</name></type> <name pos:line="1627" pos:column="56">style</name></decl></param>)</parameter_list> <block pos:line="1627" pos:column="63">{
	<if pos:line="1628" pos:column="9">if <condition pos:line="1628" pos:column="12">(<expr><name pos:line="1628" pos:column="13">enteredStyling</name> <op:operator pos:line="1628" pos:column="28">!=</op:operator> <lit:literal type="number" pos:line="1628" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="1628" pos:column="33"> <block pos:line="1628" pos:column="34">{
		<return pos:line="1629" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1629" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="1630" pos:column="11">else <block pos:line="1630" pos:column="16">{
		<expr_stmt><expr><name pos:line="1631" pos:column="17">enteredStyling</name><op:operator pos:line="1631" pos:column="31">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1632" pos:column="17">style</name> <op:operator pos:line="1632" pos:column="23">&amp;=</op:operator> <name pos:line="1632" pos:column="26">stylingMask</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1633" pos:column="17">int</name></type> <name pos:line="1633" pos:column="21">prevEndStyled</name> <init pos:line="1633" pos:column="35">= <expr><name pos:line="1633" pos:column="37">endStyled</name></expr></init></decl>;</decl_stmt>
		<if pos:line="1634" pos:column="17">if <condition pos:line="1634" pos:column="20">(<expr><call><name><name pos:line="1634" pos:column="21">cb</name><op:operator pos:line="1634" pos:column="23">.</op:operator><name pos:line="1634" pos:column="24">SetStyleFor</name></name><argument_list pos:line="1634" pos:column="35">(<argument><expr><name pos:line="1634" pos:column="36">endStyled</name></expr></argument>, <argument><expr><name pos:line="1634" pos:column="47">length</name></expr></argument>, <argument><expr><name pos:line="1634" pos:column="55">style</name></expr></argument>, <argument><expr><name pos:line="1634" pos:column="62">stylingMask</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1634" pos:column="75"> <block pos:line="1634" pos:column="76">{
			<decl_stmt><decl><type><name pos:line="1635" pos:column="25">DocModification</name></type> <name pos:line="1635" pos:column="41">mh</name><argument_list pos:line="1635" pos:column="43">(<argument><expr><name pos:line="1635" pos:column="44">SC_MOD_CHANGESTYLE</name> <op:operator pos:line="1635" pos:column="63">|</op:operator> <name pos:line="1635" pos:column="65">SC_PERFORMED_USER</name></expr></argument>,
			                   <argument><expr><name pos:line="1636" pos:column="44">prevEndStyled</name></expr></argument>, <argument><expr><name pos:line="1636" pos:column="59">length</name></expr></argument>)</argument_list></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="1637" pos:column="25">NotifyModified</name><argument_list pos:line="1637" pos:column="39">(<argument><expr><name pos:line="1637" pos:column="40">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="1639" pos:column="17">endStyled</name> <op:operator pos:line="1639" pos:column="27">+=</op:operator> <name pos:line="1639" pos:column="30">length</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1640" pos:column="17">enteredStyling</name><op:operator pos:line="1640" pos:column="31">--</op:operator></expr>;</expr_stmt>
		<return pos:line="1641" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1641" pos:column="24">true</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="1645" pos:column="1">bool</name> <name pos:line="1645" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="1645" pos:column="17">Document</name><op:operator pos:line="1645" pos:column="25">::</op:operator><name pos:line="1645" pos:column="27">SetStyles</name></name><parameter_list pos:line="1645" pos:column="36">(<param><decl><type><name pos:line="1645" pos:column="37">int</name></type> <name pos:line="1645" pos:column="41">length</name></decl></param>, <param><decl><type><specifier pos:line="1645" pos:column="49">const</specifier> <name pos:line="1645" pos:column="55">char</name> <type:modifier pos:line="1645" pos:column="60">*</type:modifier></type><name pos:line="1645" pos:column="61">styles</name></decl></param>)</parameter_list> <block pos:line="1645" pos:column="69">{
	<if pos:line="1646" pos:column="9">if <condition pos:line="1646" pos:column="12">(<expr><name pos:line="1646" pos:column="13">enteredStyling</name> <op:operator pos:line="1646" pos:column="28">!=</op:operator> <lit:literal type="number" pos:line="1646" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="1646" pos:column="33"> <block pos:line="1646" pos:column="34">{
		<return pos:line="1647" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1647" pos:column="24">false</lit:literal></expr>;</return>
	}</block></then> <else pos:line="1648" pos:column="11">else <block pos:line="1648" pos:column="16">{
		<expr_stmt><expr><name pos:line="1649" pos:column="17">enteredStyling</name><op:operator pos:line="1649" pos:column="31">++</op:operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1650" pos:column="17">bool</name></type> <name pos:line="1650" pos:column="22">didChange</name> <init pos:line="1650" pos:column="32">= <expr><lit:literal type="boolean" pos:line="1650" pos:column="34">false</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1651" pos:column="17">int</name></type> <name pos:line="1651" pos:column="21">startMod</name> <init pos:line="1651" pos:column="30">= <expr><lit:literal type="number" pos:line="1651" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1652" pos:column="17">int</name></type> <name pos:line="1652" pos:column="21">endMod</name> <init pos:line="1652" pos:column="28">= <expr><lit:literal type="number" pos:line="1652" pos:column="30">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="1653" pos:column="17">for (<init><decl><type><name pos:line="1653" pos:column="22">int</name></type> <name pos:line="1653" pos:column="26">iPos</name> <init pos:line="1653" pos:column="31">= <expr><lit:literal type="number" pos:line="1653" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1653" pos:column="36">iPos</name> <op:operator pos:line="1653" pos:column="41">&lt;</op:operator> <name pos:line="1653" pos:column="43">length</name></expr>;</condition> <incr><expr><name pos:line="1653" pos:column="51">iPos</name><op:operator pos:line="1653" pos:column="55">++</op:operator></expr><op:operator pos:line="1653" pos:column="57">,</op:operator> <expr><name pos:line="1653" pos:column="59">endStyled</name><op:operator pos:line="1653" pos:column="68">++</op:operator></expr></incr>) <block pos:line="1653" pos:column="72">{
			<expr_stmt><expr><call><name pos:line="1654" pos:column="25">PLATFORM_ASSERT</name><argument_list pos:line="1654" pos:column="40">(<argument><expr><name pos:line="1654" pos:column="41">endStyled</name> <op:operator pos:line="1654" pos:column="51">&lt;</op:operator> <call><name pos:line="1654" pos:column="53">Length</name><argument_list pos:line="1654" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1655" pos:column="25">if <condition pos:line="1655" pos:column="28">(<expr><call><name><name pos:line="1655" pos:column="29">cb</name><op:operator pos:line="1655" pos:column="31">.</op:operator><name pos:line="1655" pos:column="32">SetStyleAt</name></name><argument_list pos:line="1655" pos:column="42">(<argument><expr><name pos:line="1655" pos:column="43">endStyled</name></expr></argument>, <argument><expr><name><name pos:line="1655" pos:column="54">styles</name><index pos:line="1655" pos:column="60">[<expr><name pos:line="1655" pos:column="61">iPos</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1655" pos:column="68">stylingMask</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1655" pos:column="81"> <block pos:line="1655" pos:column="82">{
				<if pos:line="1656" pos:column="33">if <condition pos:line="1656" pos:column="36">(<expr><op:operator pos:line="1656" pos:column="37">!</op:operator><name pos:line="1656" pos:column="38">didChange</name></expr>)</condition><then pos:line="1656" pos:column="48"> <block pos:line="1656" pos:column="49">{
					<expr_stmt><expr><name pos:line="1657" pos:column="41">startMod</name> <op:operator pos:line="1657" pos:column="50">=</op:operator> <name pos:line="1657" pos:column="52">endStyled</name></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="1659" pos:column="33">didChange</name> <op:operator pos:line="1659" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="1659" pos:column="45">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1660" pos:column="33">endMod</name> <op:operator pos:line="1660" pos:column="40">=</op:operator> <name pos:line="1660" pos:column="42">endStyled</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<if pos:line="1663" pos:column="17">if <condition pos:line="1663" pos:column="20">(<expr><name pos:line="1663" pos:column="21">didChange</name></expr>)</condition><then pos:line="1663" pos:column="31"> <block pos:line="1663" pos:column="32">{
			<decl_stmt><decl><type><name pos:line="1664" pos:column="25">DocModification</name></type> <name pos:line="1664" pos:column="41">mh</name><argument_list pos:line="1664" pos:column="43">(<argument><expr><name pos:line="1664" pos:column="44">SC_MOD_CHANGESTYLE</name> <op:operator pos:line="1664" pos:column="63">|</op:operator> <name pos:line="1664" pos:column="65">SC_PERFORMED_USER</name></expr></argument>,
			                   <argument><expr><name pos:line="1665" pos:column="44">startMod</name></expr></argument>, <argument><expr><name pos:line="1665" pos:column="54">endMod</name> <op:operator pos:line="1665" pos:column="61">-</op:operator> <name pos:line="1665" pos:column="63">startMod</name> <op:operator pos:line="1665" pos:column="72">+</op:operator> <lit:literal type="number" pos:line="1665" pos:column="74">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="1666" pos:column="25">NotifyModified</name><argument_list pos:line="1666" pos:column="39">(<argument><expr><name pos:line="1666" pos:column="40">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="1668" pos:column="17">enteredStyling</name><op:operator pos:line="1668" pos:column="31">--</op:operator></expr>;</expr_stmt>
		<return pos:line="1669" pos:column="17">return <expr><lit:literal type="boolean" pos:line="1669" pos:column="24">true</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="1673" pos:column="1">void</name></type> <name><name pos:line="1673" pos:column="6">Document</name><op:operator pos:line="1673" pos:column="14">::</op:operator><name pos:line="1673" pos:column="16">EnsureStyledTo</name></name><parameter_list pos:line="1673" pos:column="30">(<param><decl><type><name pos:line="1673" pos:column="31">int</name></type> <name pos:line="1673" pos:column="35">pos</name></decl></param>)</parameter_list> <block pos:line="1673" pos:column="40">{
	<if pos:line="1674" pos:column="9">if <condition pos:line="1674" pos:column="12">(<expr><op:operator pos:line="1674" pos:column="13">(</op:operator><name pos:line="1674" pos:column="14">enteredStyling</name> <op:operator pos:line="1674" pos:column="29">==</op:operator> <lit:literal type="number" pos:line="1674" pos:column="32">0</lit:literal><op:operator pos:line="1674" pos:column="33">)</op:operator> <op:operator pos:line="1674" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="1674" pos:column="38">(</op:operator><name pos:line="1674" pos:column="39">pos</name> <op:operator pos:line="1674" pos:column="43">&gt;</op:operator> <call><name pos:line="1674" pos:column="45">GetEndStyled</name><argument_list pos:line="1674" pos:column="57">()</argument_list></call><op:operator pos:line="1674" pos:column="59">)</op:operator></expr>)</condition><then pos:line="1674" pos:column="61"> <block pos:line="1674" pos:column="62">{
		<expr_stmt><expr><call><name pos:line="1675" pos:column="17">IncrementStyleClock</name><argument_list pos:line="1675" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
		<if pos:line="1676" pos:column="17">if <condition pos:line="1676" pos:column="20">(<expr><name pos:line="1676" pos:column="21">pli</name> <op:operator pos:line="1676" pos:column="25">&amp;&amp;</op:operator> <op:operator pos:line="1676" pos:column="28">!</op:operator><call><name><name pos:line="1676" pos:column="29">pli</name><op:operator pos:line="1676" pos:column="32">-&gt;</op:operator><name pos:line="1676" pos:column="34">UseContainerLexing</name></name><argument_list pos:line="1676" pos:column="52">()</argument_list></call></expr>)</condition><then pos:line="1676" pos:column="55"> <block pos:line="1676" pos:column="56">{
			<decl_stmt><decl><type><name pos:line="1677" pos:column="25">int</name></type> <name pos:line="1677" pos:column="29">lineEndStyled</name> <init pos:line="1677" pos:column="43">= <expr><call><name pos:line="1677" pos:column="45">LineFromPosition</name><argument_list pos:line="1677" pos:column="61">(<argument><expr><call><name pos:line="1677" pos:column="62">GetEndStyled</name><argument_list pos:line="1677" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="1678" pos:column="25">int</name></type> <name pos:line="1678" pos:column="29">endStyledTo</name> <init pos:line="1678" pos:column="41">= <expr><call><name pos:line="1678" pos:column="43">LineStart</name><argument_list pos:line="1678" pos:column="52">(<argument><expr><name pos:line="1678" pos:column="53">lineEndStyled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="1679" pos:column="25">pli</name><op:operator pos:line="1679" pos:column="28">-&gt;</op:operator><name pos:line="1679" pos:column="30">Colourise</name></name><argument_list pos:line="1679" pos:column="39">(<argument><expr><name pos:line="1679" pos:column="40">endStyledTo</name></expr></argument>, <argument><expr><name pos:line="1679" pos:column="53">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="1680" pos:column="19">else <block pos:line="1680" pos:column="24">{
			<comment type="line" pos:line="1681" pos:column="25">// Ask the watchers to style, and stop as soon as one responds.</comment>
			<for pos:line="1682" pos:column="25">for (<init><decl><type><name pos:line="1682" pos:column="30">int</name></type> <name pos:line="1682" pos:column="34">i</name> <init pos:line="1682" pos:column="36">= <expr><lit:literal type="number" pos:line="1682" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1682" pos:column="41">pos</name> <op:operator pos:line="1682" pos:column="45">&gt;</op:operator> <call><name pos:line="1682" pos:column="47">GetEndStyled</name><argument_list pos:line="1682" pos:column="59">()</argument_list></call> <op:operator pos:line="1682" pos:column="62">&amp;&amp;</op:operator> <name pos:line="1682" pos:column="65">i</name> <op:operator pos:line="1682" pos:column="67">&lt;</op:operator> <name pos:line="1682" pos:column="69">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="1682" pos:column="82">i</name><op:operator pos:line="1682" pos:column="83">++</op:operator></expr></incr>) <block pos:line="1682" pos:column="87">{
				<expr_stmt><expr><name><name pos:line="1683" pos:column="33">watchers</name><index pos:line="1683" pos:column="41">[<expr><name pos:line="1683" pos:column="42">i</name></expr>]</index></name><op:operator pos:line="1683" pos:column="44">.</op:operator><call><name><name pos:line="1683" pos:column="45">watcher</name><op:operator pos:line="1683" pos:column="52">-&gt;</op:operator><name pos:line="1683" pos:column="54">NotifyStyleNeeded</name></name><argument_list pos:line="1683" pos:column="71">(<argument><expr><name pos:line="1683" pos:column="72">this</name></expr></argument>, <argument><expr><name><name pos:line="1683" pos:column="78">watchers</name><index pos:line="1683" pos:column="86">[<expr><name pos:line="1683" pos:column="87">i</name></expr>]</index></name><op:operator pos:line="1683" pos:column="89">.</op:operator><name pos:line="1683" pos:column="90">userData</name></expr></argument>, <argument><expr><name pos:line="1683" pos:column="100">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1689" pos:column="1">void</name></type> <name><name pos:line="1689" pos:column="6">Document</name><op:operator pos:line="1689" pos:column="14">::</op:operator><name pos:line="1689" pos:column="16">LexerChanged</name></name><parameter_list pos:line="1689" pos:column="28">()</parameter_list> <block pos:line="1689" pos:column="31">{
	<comment type="line" pos:line="1690" pos:column="9">// Tell the watchers the lexer has changed.</comment>
	<for pos:line="1691" pos:column="9">for (<init><decl><type><name pos:line="1691" pos:column="14">int</name></type> <name pos:line="1691" pos:column="18">i</name> <init pos:line="1691" pos:column="20">= <expr><lit:literal type="number" pos:line="1691" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1691" pos:column="25">i</name> <op:operator pos:line="1691" pos:column="27">&lt;</op:operator> <name pos:line="1691" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="1691" pos:column="42">i</name><op:operator pos:line="1691" pos:column="43">++</op:operator></expr></incr>) <block pos:line="1691" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="1692" pos:column="17">watchers</name><index pos:line="1692" pos:column="25">[<expr><name pos:line="1692" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="1692" pos:column="28">.</op:operator><call><name><name pos:line="1692" pos:column="29">watcher</name><op:operator pos:line="1692" pos:column="36">-&gt;</op:operator><name pos:line="1692" pos:column="38">NotifyLexerChanged</name></name><argument_list pos:line="1692" pos:column="56">(<argument><expr><name pos:line="1692" pos:column="57">this</name></expr></argument>, <argument><expr><name><name pos:line="1692" pos:column="63">watchers</name><index pos:line="1692" pos:column="71">[<expr><name pos:line="1692" pos:column="72">i</name></expr>]</index></name><op:operator pos:line="1692" pos:column="74">.</op:operator><name pos:line="1692" pos:column="75">userData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="1696" pos:column="1">int</name> <name pos:line="1696" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="1696" pos:column="16">Document</name><op:operator pos:line="1696" pos:column="24">::</op:operator><name pos:line="1696" pos:column="26">SetLineState</name></name><parameter_list pos:line="1696" pos:column="38">(<param><decl><type><name pos:line="1696" pos:column="39">int</name></type> <name pos:line="1696" pos:column="43">line</name></decl></param>, <param><decl><type><name pos:line="1696" pos:column="49">int</name></type> <name pos:line="1696" pos:column="53">state</name></decl></param>)</parameter_list> <block pos:line="1696" pos:column="60">{
	<decl_stmt><decl><type><name pos:line="1697" pos:column="9">int</name></type> <name pos:line="1697" pos:column="13">statePrevious</name> <init pos:line="1697" pos:column="27">= <expr><call><name><name pos:line="1697" pos:column="29">static_cast</name><argument_list pos:line="1697" pos:column="40">&lt;<argument><expr><name pos:line="1697" pos:column="41">LineState</name> <op:operator pos:line="1697" pos:column="51">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1697" pos:column="53">(<argument><expr><name><name pos:line="1697" pos:column="54">perLineData</name><index pos:line="1697" pos:column="65">[<expr><name pos:line="1697" pos:column="66">ldState</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1697" pos:column="75">-&gt;</op:operator><call><name pos:line="1697" pos:column="77">SetLineState</name><argument_list pos:line="1697" pos:column="89">(<argument><expr><name pos:line="1697" pos:column="90">line</name></expr></argument>, <argument><expr><name pos:line="1697" pos:column="96">state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1698" pos:column="9">if <condition pos:line="1698" pos:column="12">(<expr><name pos:line="1698" pos:column="13">state</name> <op:operator pos:line="1698" pos:column="19">!=</op:operator> <name pos:line="1698" pos:column="22">statePrevious</name></expr>)</condition><then pos:line="1698" pos:column="36"> <block pos:line="1698" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="1699" pos:column="17">DocModification</name></type> <name pos:line="1699" pos:column="33">mh</name><argument_list pos:line="1699" pos:column="35">(<argument><expr><name pos:line="1699" pos:column="36">SC_MOD_CHANGELINESTATE</name></expr></argument>, <argument><expr><call><name pos:line="1699" pos:column="60">LineStart</name><argument_list pos:line="1699" pos:column="69">(<argument><expr><name pos:line="1699" pos:column="70">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1699" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1699" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1699" pos:column="83">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1699" pos:column="86">line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1700" pos:column="17">NotifyModified</name><argument_list pos:line="1700" pos:column="31">(<argument><expr><name pos:line="1700" pos:column="32">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="1702" pos:column="9">return <expr><name pos:line="1702" pos:column="16">statePrevious</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1705" pos:column="1">int</name> <name pos:line="1705" pos:column="5">SCI_METHOD</name></type> <name><name pos:line="1705" pos:column="16">Document</name><op:operator pos:line="1705" pos:column="24">::</op:operator><name pos:line="1705" pos:column="26">GetLineState</name></name><parameter_list pos:line="1705" pos:column="38">(<param><decl><type><name pos:line="1705" pos:column="39">int</name></type> <name pos:line="1705" pos:column="43">line</name></decl></param>)</parameter_list> <specifier pos:line="1705" pos:column="49">const</specifier> <block pos:line="1705" pos:column="55">{
	<return pos:line="1706" pos:column="9">return <expr><call><name><name pos:line="1706" pos:column="16">static_cast</name><argument_list pos:line="1706" pos:column="27">&lt;<argument><expr><name pos:line="1706" pos:column="28">LineState</name> <op:operator pos:line="1706" pos:column="38">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1706" pos:column="40">(<argument><expr><name><name pos:line="1706" pos:column="41">perLineData</name><index pos:line="1706" pos:column="52">[<expr><name pos:line="1706" pos:column="53">ldState</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1706" pos:column="62">-&gt;</op:operator><call><name pos:line="1706" pos:column="64">GetLineState</name><argument_list pos:line="1706" pos:column="76">(<argument><expr><name pos:line="1706" pos:column="77">line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1709" pos:column="1">int</name></type> <name><name pos:line="1709" pos:column="5">Document</name><op:operator pos:line="1709" pos:column="13">::</op:operator><name pos:line="1709" pos:column="15">GetMaxLineState</name></name><parameter_list pos:line="1709" pos:column="30">()</parameter_list> <block pos:line="1709" pos:column="33">{
	<return pos:line="1710" pos:column="9">return <expr><call><name><name pos:line="1710" pos:column="16">static_cast</name><argument_list pos:line="1710" pos:column="27">&lt;<argument><expr><name pos:line="1710" pos:column="28">LineState</name> <op:operator pos:line="1710" pos:column="38">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1710" pos:column="40">(<argument><expr><name><name pos:line="1710" pos:column="41">perLineData</name><index pos:line="1710" pos:column="52">[<expr><name pos:line="1710" pos:column="53">ldState</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1710" pos:column="62">-&gt;</op:operator><call><name pos:line="1710" pos:column="64">GetMaxLineState</name><argument_list pos:line="1710" pos:column="79">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1713" pos:column="1">void</name> <name pos:line="1713" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="1713" pos:column="17">Document</name><op:operator pos:line="1713" pos:column="25">::</op:operator><name pos:line="1713" pos:column="27">ChangeLexerState</name></name><parameter_list pos:line="1713" pos:column="43">(<param><decl><type><name pos:line="1713" pos:column="44">int</name></type> <name pos:line="1713" pos:column="48">start</name></decl></param>, <param><decl><type><name pos:line="1713" pos:column="55">int</name></type> <name pos:line="1713" pos:column="59">end</name></decl></param>)</parameter_list> <block pos:line="1713" pos:column="64">{
	<decl_stmt><decl><type><name pos:line="1714" pos:column="9">DocModification</name></type> <name pos:line="1714" pos:column="25">mh</name><argument_list pos:line="1714" pos:column="27">(<argument><expr><name pos:line="1714" pos:column="28">SC_MOD_LEXERSTATE</name></expr></argument>, <argument><expr><name pos:line="1714" pos:column="47">start</name></expr></argument>, <argument><expr><name pos:line="1714" pos:column="54">end</name><op:operator pos:line="1714" pos:column="57">-</op:operator><name pos:line="1714" pos:column="58">start</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1714" pos:column="65">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1714" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1714" pos:column="71">0</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1715" pos:column="9">NotifyModified</name><argument_list pos:line="1715" pos:column="23">(<argument><expr><name pos:line="1715" pos:column="24">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1718" pos:column="1">StyledText</name></type> <name><name pos:line="1718" pos:column="12">Document</name><op:operator pos:line="1718" pos:column="20">::</op:operator><name pos:line="1718" pos:column="22">MarginStyledText</name></name><parameter_list pos:line="1718" pos:column="38">(<param><decl><type><name pos:line="1718" pos:column="39">int</name></type> <name pos:line="1718" pos:column="43">line</name></decl></param>)</parameter_list> <block pos:line="1718" pos:column="49">{
	<decl_stmt><decl><type><name pos:line="1719" pos:column="9">LineAnnotation</name> <type:modifier pos:line="1719" pos:column="24">*</type:modifier></type><name pos:line="1719" pos:column="25">pla</name> <init pos:line="1719" pos:column="29">= <expr><call><name><name pos:line="1719" pos:column="31">static_cast</name><argument_list pos:line="1719" pos:column="42">&lt;<argument><expr><name pos:line="1719" pos:column="43">LineAnnotation</name> <op:operator pos:line="1719" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1719" pos:column="60">(<argument><expr><name><name pos:line="1719" pos:column="61">perLineData</name><index pos:line="1719" pos:column="72">[<expr><name pos:line="1719" pos:column="73">ldMargin</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="1720" pos:column="9">return <expr><call><name pos:line="1720" pos:column="16">StyledText</name><argument_list pos:line="1720" pos:column="26">(<argument><expr><call><name><name pos:line="1720" pos:column="27">pla</name><op:operator pos:line="1720" pos:column="30">-&gt;</op:operator><name pos:line="1720" pos:column="32">Length</name></name><argument_list pos:line="1720" pos:column="38">(<argument><expr><name pos:line="1720" pos:column="39">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1720" pos:column="46">pla</name><op:operator pos:line="1720" pos:column="49">-&gt;</op:operator><name pos:line="1720" pos:column="51">Text</name></name><argument_list pos:line="1720" pos:column="55">(<argument><expr><name pos:line="1720" pos:column="56">line</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name><name pos:line="1721" pos:column="17">pla</name><op:operator pos:line="1721" pos:column="20">-&gt;</op:operator><name pos:line="1721" pos:column="22">MultipleStyles</name></name><argument_list pos:line="1721" pos:column="36">(<argument><expr><name pos:line="1721" pos:column="37">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1721" pos:column="44">pla</name><op:operator pos:line="1721" pos:column="47">-&gt;</op:operator><name pos:line="1721" pos:column="49">Style</name></name><argument_list pos:line="1721" pos:column="54">(<argument><expr><name pos:line="1721" pos:column="55">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1721" pos:column="62">pla</name><op:operator pos:line="1721" pos:column="65">-&gt;</op:operator><name pos:line="1721" pos:column="67">Styles</name></name><argument_list pos:line="1721" pos:column="73">(<argument><expr><name pos:line="1721" pos:column="74">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1724" pos:column="1">void</name></type> <name><name pos:line="1724" pos:column="6">Document</name><op:operator pos:line="1724" pos:column="14">::</op:operator><name pos:line="1724" pos:column="16">MarginSetText</name></name><parameter_list pos:line="1724" pos:column="29">(<param><decl><type><name pos:line="1724" pos:column="30">int</name></type> <name pos:line="1724" pos:column="34">line</name></decl></param>, <param><decl><type><specifier pos:line="1724" pos:column="40">const</specifier> <name pos:line="1724" pos:column="46">char</name> <type:modifier pos:line="1724" pos:column="51">*</type:modifier></type><name pos:line="1724" pos:column="52">text</name></decl></param>)</parameter_list> <block pos:line="1724" pos:column="58">{
	<expr_stmt><expr><call><name><name pos:line="1725" pos:column="9">static_cast</name><argument_list pos:line="1725" pos:column="20">&lt;<argument><expr><name pos:line="1725" pos:column="21">LineAnnotation</name> <op:operator pos:line="1725" pos:column="36">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1725" pos:column="38">(<argument><expr><name><name pos:line="1725" pos:column="39">perLineData</name><index pos:line="1725" pos:column="50">[<expr><name pos:line="1725" pos:column="51">ldMargin</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1725" pos:column="61">-&gt;</op:operator><call><name pos:line="1725" pos:column="63">SetText</name><argument_list pos:line="1725" pos:column="70">(<argument><expr><name pos:line="1725" pos:column="71">line</name></expr></argument>, <argument><expr><name pos:line="1725" pos:column="77">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1726" pos:column="9">DocModification</name></type> <name pos:line="1726" pos:column="25">mh</name><argument_list pos:line="1726" pos:column="27">(<argument><expr><name pos:line="1726" pos:column="28">SC_MOD_CHANGEMARGIN</name></expr></argument>, <argument><expr><call><name pos:line="1726" pos:column="49">LineStart</name><argument_list pos:line="1726" pos:column="58">(<argument><expr><name pos:line="1726" pos:column="59">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1726" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1726" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1726" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1726" pos:column="75">line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1727" pos:column="9">NotifyModified</name><argument_list pos:line="1727" pos:column="23">(<argument><expr><name pos:line="1727" pos:column="24">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1730" pos:column="1">void</name></type> <name><name pos:line="1730" pos:column="6">Document</name><op:operator pos:line="1730" pos:column="14">::</op:operator><name pos:line="1730" pos:column="16">MarginSetStyle</name></name><parameter_list pos:line="1730" pos:column="30">(<param><decl><type><name pos:line="1730" pos:column="31">int</name></type> <name pos:line="1730" pos:column="35">line</name></decl></param>, <param><decl><type><name pos:line="1730" pos:column="41">int</name></type> <name pos:line="1730" pos:column="45">style</name></decl></param>)</parameter_list> <block pos:line="1730" pos:column="52">{
	<expr_stmt><expr><call><name><name pos:line="1731" pos:column="9">static_cast</name><argument_list pos:line="1731" pos:column="20">&lt;<argument><expr><name pos:line="1731" pos:column="21">LineAnnotation</name> <op:operator pos:line="1731" pos:column="36">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1731" pos:column="38">(<argument><expr><name><name pos:line="1731" pos:column="39">perLineData</name><index pos:line="1731" pos:column="50">[<expr><name pos:line="1731" pos:column="51">ldMargin</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1731" pos:column="61">-&gt;</op:operator><call><name pos:line="1731" pos:column="63">SetStyle</name><argument_list pos:line="1731" pos:column="71">(<argument><expr><name pos:line="1731" pos:column="72">line</name></expr></argument>, <argument><expr><name pos:line="1731" pos:column="78">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1734" pos:column="1">void</name></type> <name><name pos:line="1734" pos:column="6">Document</name><op:operator pos:line="1734" pos:column="14">::</op:operator><name pos:line="1734" pos:column="16">MarginSetStyles</name></name><parameter_list pos:line="1734" pos:column="31">(<param><decl><type><name pos:line="1734" pos:column="32">int</name></type> <name pos:line="1734" pos:column="36">line</name></decl></param>, <param><decl><type><specifier pos:line="1734" pos:column="42">const</specifier> <name pos:line="1734" pos:column="48">unsigned</name> <name pos:line="1734" pos:column="57">char</name> <type:modifier pos:line="1734" pos:column="62">*</type:modifier></type><name pos:line="1734" pos:column="63">styles</name></decl></param>)</parameter_list> <block pos:line="1734" pos:column="71">{
	<expr_stmt><expr><call><name><name pos:line="1735" pos:column="9">static_cast</name><argument_list pos:line="1735" pos:column="20">&lt;<argument><expr><name pos:line="1735" pos:column="21">LineAnnotation</name> <op:operator pos:line="1735" pos:column="36">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1735" pos:column="38">(<argument><expr><name><name pos:line="1735" pos:column="39">perLineData</name><index pos:line="1735" pos:column="50">[<expr><name pos:line="1735" pos:column="51">ldMargin</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1735" pos:column="61">-&gt;</op:operator><call><name pos:line="1735" pos:column="63">SetStyles</name><argument_list pos:line="1735" pos:column="72">(<argument><expr><name pos:line="1735" pos:column="73">line</name></expr></argument>, <argument><expr><name pos:line="1735" pos:column="79">styles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1738" pos:column="1">int</name></type> <name><name pos:line="1738" pos:column="5">Document</name><op:operator pos:line="1738" pos:column="13">::</op:operator><name pos:line="1738" pos:column="15">MarginLength</name></name><parameter_list pos:line="1738" pos:column="27">(<param><decl><type><name pos:line="1738" pos:column="28">int</name></type> <name pos:line="1738" pos:column="32">line</name></decl></param>)</parameter_list> <specifier pos:line="1738" pos:column="38">const</specifier> <block pos:line="1738" pos:column="44">{
	<return pos:line="1739" pos:column="9">return <expr><call><name><name pos:line="1739" pos:column="16">static_cast</name><argument_list pos:line="1739" pos:column="27">&lt;<argument><expr><name pos:line="1739" pos:column="28">LineAnnotation</name> <op:operator pos:line="1739" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1739" pos:column="45">(<argument><expr><name><name pos:line="1739" pos:column="46">perLineData</name><index pos:line="1739" pos:column="57">[<expr><name pos:line="1739" pos:column="58">ldMargin</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1739" pos:column="68">-&gt;</op:operator><call><name pos:line="1739" pos:column="70">Length</name><argument_list pos:line="1739" pos:column="76">(<argument><expr><name pos:line="1739" pos:column="77">line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1742" pos:column="1">void</name></type> <name><name pos:line="1742" pos:column="6">Document</name><op:operator pos:line="1742" pos:column="14">::</op:operator><name pos:line="1742" pos:column="16">MarginClearAll</name></name><parameter_list pos:line="1742" pos:column="30">()</parameter_list> <block pos:line="1742" pos:column="33">{
	<decl_stmt><decl><type><name pos:line="1743" pos:column="9">int</name></type> <name pos:line="1743" pos:column="13">maxEditorLine</name> <init pos:line="1743" pos:column="27">= <expr><call><name pos:line="1743" pos:column="29">LinesTotal</name><argument_list pos:line="1743" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="1744" pos:column="9">for (<init><decl><type><name pos:line="1744" pos:column="14">int</name></type> <name pos:line="1744" pos:column="18">l</name><init pos:line="1744" pos:column="19">=<expr><lit:literal type="number" pos:line="1744" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1744" pos:column="23">l</name><op:operator pos:line="1744" pos:column="24">&lt;</op:operator><name pos:line="1744" pos:column="25">maxEditorLine</name></expr>;</condition> <incr><expr><name pos:line="1744" pos:column="40">l</name><op:operator pos:line="1744" pos:column="41">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name pos:line="1745" pos:column="17">MarginSetText</name><argument_list pos:line="1745" pos:column="30">(<argument><expr><name pos:line="1745" pos:column="31">l</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1745" pos:column="34">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
	<comment type="line" pos:line="1746" pos:column="9">// Free remaining data</comment>
	<expr_stmt><expr><call><name><name pos:line="1747" pos:column="9">static_cast</name><argument_list pos:line="1747" pos:column="20">&lt;<argument><expr><name pos:line="1747" pos:column="21">LineAnnotation</name> <op:operator pos:line="1747" pos:column="36">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1747" pos:column="38">(<argument><expr><name><name pos:line="1747" pos:column="39">perLineData</name><index pos:line="1747" pos:column="50">[<expr><name pos:line="1747" pos:column="51">ldMargin</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1747" pos:column="61">-&gt;</op:operator><call><name pos:line="1747" pos:column="63">ClearAll</name><argument_list pos:line="1747" pos:column="71">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1750" pos:column="1">bool</name></type> <name><name pos:line="1750" pos:column="6">Document</name><op:operator pos:line="1750" pos:column="14">::</op:operator><name pos:line="1750" pos:column="16">AnnotationAny</name></name><parameter_list pos:line="1750" pos:column="29">()</parameter_list> <specifier pos:line="1750" pos:column="32">const</specifier> <block pos:line="1750" pos:column="38">{
	<return pos:line="1751" pos:column="9">return <expr><call><name><name pos:line="1751" pos:column="16">static_cast</name><argument_list pos:line="1751" pos:column="27">&lt;<argument><expr><name pos:line="1751" pos:column="28">LineAnnotation</name> <op:operator pos:line="1751" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1751" pos:column="45">(<argument><expr><name><name pos:line="1751" pos:column="46">perLineData</name><index pos:line="1751" pos:column="57">[<expr><name pos:line="1751" pos:column="58">ldAnnotation</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1751" pos:column="72">-&gt;</op:operator><call><name pos:line="1751" pos:column="74">AnySet</name><argument_list pos:line="1751" pos:column="80">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1754" pos:column="1">StyledText</name></type> <name><name pos:line="1754" pos:column="12">Document</name><op:operator pos:line="1754" pos:column="20">::</op:operator><name pos:line="1754" pos:column="22">AnnotationStyledText</name></name><parameter_list pos:line="1754" pos:column="42">(<param><decl><type><name pos:line="1754" pos:column="43">int</name></type> <name pos:line="1754" pos:column="47">line</name></decl></param>)</parameter_list> <block pos:line="1754" pos:column="53">{
	<decl_stmt><decl><type><name pos:line="1755" pos:column="9">LineAnnotation</name> <type:modifier pos:line="1755" pos:column="24">*</type:modifier></type><name pos:line="1755" pos:column="25">pla</name> <init pos:line="1755" pos:column="29">= <expr><call><name><name pos:line="1755" pos:column="31">static_cast</name><argument_list pos:line="1755" pos:column="42">&lt;<argument><expr><name pos:line="1755" pos:column="43">LineAnnotation</name> <op:operator pos:line="1755" pos:column="58">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1755" pos:column="60">(<argument><expr><name><name pos:line="1755" pos:column="61">perLineData</name><index pos:line="1755" pos:column="72">[<expr><name pos:line="1755" pos:column="73">ldAnnotation</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="1756" pos:column="9">return <expr><call><name pos:line="1756" pos:column="16">StyledText</name><argument_list pos:line="1756" pos:column="26">(<argument><expr><call><name><name pos:line="1756" pos:column="27">pla</name><op:operator pos:line="1756" pos:column="30">-&gt;</op:operator><name pos:line="1756" pos:column="32">Length</name></name><argument_list pos:line="1756" pos:column="38">(<argument><expr><name pos:line="1756" pos:column="39">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1756" pos:column="46">pla</name><op:operator pos:line="1756" pos:column="49">-&gt;</op:operator><name pos:line="1756" pos:column="51">Text</name></name><argument_list pos:line="1756" pos:column="55">(<argument><expr><name pos:line="1756" pos:column="56">line</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name><name pos:line="1757" pos:column="17">pla</name><op:operator pos:line="1757" pos:column="20">-&gt;</op:operator><name pos:line="1757" pos:column="22">MultipleStyles</name></name><argument_list pos:line="1757" pos:column="36">(<argument><expr><name pos:line="1757" pos:column="37">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1757" pos:column="44">pla</name><op:operator pos:line="1757" pos:column="47">-&gt;</op:operator><name pos:line="1757" pos:column="49">Style</name></name><argument_list pos:line="1757" pos:column="54">(<argument><expr><name pos:line="1757" pos:column="55">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1757" pos:column="62">pla</name><op:operator pos:line="1757" pos:column="65">-&gt;</op:operator><name pos:line="1757" pos:column="67">Styles</name></name><argument_list pos:line="1757" pos:column="73">(<argument><expr><name pos:line="1757" pos:column="74">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1760" pos:column="1">void</name></type> <name><name pos:line="1760" pos:column="6">Document</name><op:operator pos:line="1760" pos:column="14">::</op:operator><name pos:line="1760" pos:column="16">AnnotationSetText</name></name><parameter_list pos:line="1760" pos:column="33">(<param><decl><type><name pos:line="1760" pos:column="34">int</name></type> <name pos:line="1760" pos:column="38">line</name></decl></param>, <param><decl><type><specifier pos:line="1760" pos:column="44">const</specifier> <name pos:line="1760" pos:column="50">char</name> <type:modifier pos:line="1760" pos:column="55">*</type:modifier></type><name pos:line="1760" pos:column="56">text</name></decl></param>)</parameter_list> <block pos:line="1760" pos:column="62">{
	<decl_stmt><decl><type><specifier pos:line="1761" pos:column="9">const</specifier> <name pos:line="1761" pos:column="15">int</name></type> <name pos:line="1761" pos:column="19">linesBefore</name> <init pos:line="1761" pos:column="31">= <expr><call><name pos:line="1761" pos:column="33">AnnotationLines</name><argument_list pos:line="1761" pos:column="48">(<argument><expr><name pos:line="1761" pos:column="49">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="1762" pos:column="9">static_cast</name><argument_list pos:line="1762" pos:column="20">&lt;<argument><expr><name pos:line="1762" pos:column="21">LineAnnotation</name> <op:operator pos:line="1762" pos:column="36">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1762" pos:column="38">(<argument><expr><name><name pos:line="1762" pos:column="39">perLineData</name><index pos:line="1762" pos:column="50">[<expr><name pos:line="1762" pos:column="51">ldAnnotation</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1762" pos:column="65">-&gt;</op:operator><call><name pos:line="1762" pos:column="67">SetText</name><argument_list pos:line="1762" pos:column="74">(<argument><expr><name pos:line="1762" pos:column="75">line</name></expr></argument>, <argument><expr><name pos:line="1762" pos:column="81">text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier pos:line="1763" pos:column="9">const</specifier> <name pos:line="1763" pos:column="15">int</name></type> <name pos:line="1763" pos:column="19">linesAfter</name> <init pos:line="1763" pos:column="30">= <expr><call><name pos:line="1763" pos:column="32">AnnotationLines</name><argument_list pos:line="1763" pos:column="47">(<argument><expr><name pos:line="1763" pos:column="48">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1764" pos:column="9">DocModification</name></type> <name pos:line="1764" pos:column="25">mh</name><argument_list pos:line="1764" pos:column="27">(<argument><expr><name pos:line="1764" pos:column="28">SC_MOD_CHANGEANNOTATION</name></expr></argument>, <argument><expr><call><name pos:line="1764" pos:column="53">LineStart</name><argument_list pos:line="1764" pos:column="62">(<argument><expr><name pos:line="1764" pos:column="63">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1764" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1764" pos:column="73">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1764" pos:column="76">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1764" pos:column="79">line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="1765" pos:column="9">mh</name><op:operator pos:line="1765" pos:column="11">.</op:operator><name pos:line="1765" pos:column="12">annotationLinesAdded</name></name> <op:operator pos:line="1765" pos:column="33">=</op:operator> <name pos:line="1765" pos:column="35">linesAfter</name> <op:operator pos:line="1765" pos:column="46">-</op:operator> <name pos:line="1765" pos:column="48">linesBefore</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1766" pos:column="9">NotifyModified</name><argument_list pos:line="1766" pos:column="23">(<argument><expr><name pos:line="1766" pos:column="24">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1769" pos:column="1">void</name></type> <name><name pos:line="1769" pos:column="6">Document</name><op:operator pos:line="1769" pos:column="14">::</op:operator><name pos:line="1769" pos:column="16">AnnotationSetStyle</name></name><parameter_list pos:line="1769" pos:column="34">(<param><decl><type><name pos:line="1769" pos:column="35">int</name></type> <name pos:line="1769" pos:column="39">line</name></decl></param>, <param><decl><type><name pos:line="1769" pos:column="45">int</name></type> <name pos:line="1769" pos:column="49">style</name></decl></param>)</parameter_list> <block pos:line="1769" pos:column="56">{
	<expr_stmt><expr><call><name><name pos:line="1770" pos:column="9">static_cast</name><argument_list pos:line="1770" pos:column="20">&lt;<argument><expr><name pos:line="1770" pos:column="21">LineAnnotation</name> <op:operator pos:line="1770" pos:column="36">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1770" pos:column="38">(<argument><expr><name><name pos:line="1770" pos:column="39">perLineData</name><index pos:line="1770" pos:column="50">[<expr><name pos:line="1770" pos:column="51">ldAnnotation</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1770" pos:column="65">-&gt;</op:operator><call><name pos:line="1770" pos:column="67">SetStyle</name><argument_list pos:line="1770" pos:column="75">(<argument><expr><name pos:line="1770" pos:column="76">line</name></expr></argument>, <argument><expr><name pos:line="1770" pos:column="82">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1771" pos:column="9">DocModification</name></type> <name pos:line="1771" pos:column="25">mh</name><argument_list pos:line="1771" pos:column="27">(<argument><expr><name pos:line="1771" pos:column="28">SC_MOD_CHANGEANNOTATION</name></expr></argument>, <argument><expr><call><name pos:line="1771" pos:column="53">LineStart</name><argument_list pos:line="1771" pos:column="62">(<argument><expr><name pos:line="1771" pos:column="63">line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1771" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1771" pos:column="73">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1771" pos:column="76">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1771" pos:column="79">line</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1772" pos:column="9">NotifyModified</name><argument_list pos:line="1772" pos:column="23">(<argument><expr><name pos:line="1772" pos:column="24">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1775" pos:column="1">void</name></type> <name><name pos:line="1775" pos:column="6">Document</name><op:operator pos:line="1775" pos:column="14">::</op:operator><name pos:line="1775" pos:column="16">AnnotationSetStyles</name></name><parameter_list pos:line="1775" pos:column="35">(<param><decl><type><name pos:line="1775" pos:column="36">int</name></type> <name pos:line="1775" pos:column="40">line</name></decl></param>, <param><decl><type><specifier pos:line="1775" pos:column="46">const</specifier> <name pos:line="1775" pos:column="52">unsigned</name> <name pos:line="1775" pos:column="61">char</name> <type:modifier pos:line="1775" pos:column="66">*</type:modifier></type><name pos:line="1775" pos:column="67">styles</name></decl></param>)</parameter_list> <block pos:line="1775" pos:column="75">{
	<expr_stmt><expr><call><name><name pos:line="1776" pos:column="9">static_cast</name><argument_list pos:line="1776" pos:column="20">&lt;<argument><expr><name pos:line="1776" pos:column="21">LineAnnotation</name> <op:operator pos:line="1776" pos:column="36">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1776" pos:column="38">(<argument><expr><name><name pos:line="1776" pos:column="39">perLineData</name><index pos:line="1776" pos:column="50">[<expr><name pos:line="1776" pos:column="51">ldAnnotation</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1776" pos:column="65">-&gt;</op:operator><call><name pos:line="1776" pos:column="67">SetStyles</name><argument_list pos:line="1776" pos:column="76">(<argument><expr><name pos:line="1776" pos:column="77">line</name></expr></argument>, <argument><expr><name pos:line="1776" pos:column="83">styles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1779" pos:column="1">int</name></type> <name><name pos:line="1779" pos:column="5">Document</name><op:operator pos:line="1779" pos:column="13">::</op:operator><name pos:line="1779" pos:column="15">AnnotationLength</name></name><parameter_list pos:line="1779" pos:column="31">(<param><decl><type><name pos:line="1779" pos:column="32">int</name></type> <name pos:line="1779" pos:column="36">line</name></decl></param>)</parameter_list> <specifier pos:line="1779" pos:column="42">const</specifier> <block pos:line="1779" pos:column="48">{
	<return pos:line="1780" pos:column="9">return <expr><call><name><name pos:line="1780" pos:column="16">static_cast</name><argument_list pos:line="1780" pos:column="27">&lt;<argument><expr><name pos:line="1780" pos:column="28">LineAnnotation</name> <op:operator pos:line="1780" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1780" pos:column="45">(<argument><expr><name><name pos:line="1780" pos:column="46">perLineData</name><index pos:line="1780" pos:column="57">[<expr><name pos:line="1780" pos:column="58">ldAnnotation</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1780" pos:column="72">-&gt;</op:operator><call><name pos:line="1780" pos:column="74">Length</name><argument_list pos:line="1780" pos:column="80">(<argument><expr><name pos:line="1780" pos:column="81">line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1783" pos:column="1">int</name></type> <name><name pos:line="1783" pos:column="5">Document</name><op:operator pos:line="1783" pos:column="13">::</op:operator><name pos:line="1783" pos:column="15">AnnotationLines</name></name><parameter_list pos:line="1783" pos:column="30">(<param><decl><type><name pos:line="1783" pos:column="31">int</name></type> <name pos:line="1783" pos:column="35">line</name></decl></param>)</parameter_list> <specifier pos:line="1783" pos:column="41">const</specifier> <block pos:line="1783" pos:column="47">{
	<return pos:line="1784" pos:column="9">return <expr><call><name><name pos:line="1784" pos:column="16">static_cast</name><argument_list pos:line="1784" pos:column="27">&lt;<argument><expr><name pos:line="1784" pos:column="28">LineAnnotation</name> <op:operator pos:line="1784" pos:column="43">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1784" pos:column="45">(<argument><expr><name><name pos:line="1784" pos:column="46">perLineData</name><index pos:line="1784" pos:column="57">[<expr><name pos:line="1784" pos:column="58">ldAnnotation</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1784" pos:column="72">-&gt;</op:operator><call><name pos:line="1784" pos:column="74">Lines</name><argument_list pos:line="1784" pos:column="79">(<argument><expr><name pos:line="1784" pos:column="80">line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1787" pos:column="1">void</name></type> <name><name pos:line="1787" pos:column="6">Document</name><op:operator pos:line="1787" pos:column="14">::</op:operator><name pos:line="1787" pos:column="16">AnnotationClearAll</name></name><parameter_list pos:line="1787" pos:column="34">()</parameter_list> <block pos:line="1787" pos:column="37">{
	<decl_stmt><decl><type><name pos:line="1788" pos:column="9">int</name></type> <name pos:line="1788" pos:column="13">maxEditorLine</name> <init pos:line="1788" pos:column="27">= <expr><call><name pos:line="1788" pos:column="29">LinesTotal</name><argument_list pos:line="1788" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="1789" pos:column="9">for (<init><decl><type><name pos:line="1789" pos:column="14">int</name></type> <name pos:line="1789" pos:column="18">l</name><init pos:line="1789" pos:column="19">=<expr><lit:literal type="number" pos:line="1789" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1789" pos:column="23">l</name><op:operator pos:line="1789" pos:column="24">&lt;</op:operator><name pos:line="1789" pos:column="25">maxEditorLine</name></expr>;</condition> <incr><expr><name pos:line="1789" pos:column="40">l</name><op:operator pos:line="1789" pos:column="41">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name pos:line="1790" pos:column="17">AnnotationSetText</name><argument_list pos:line="1790" pos:column="34">(<argument><expr><name pos:line="1790" pos:column="35">l</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1790" pos:column="38">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
	<comment type="line" pos:line="1791" pos:column="9">// Free remaining data</comment>
	<expr_stmt><expr><call><name><name pos:line="1792" pos:column="9">static_cast</name><argument_list pos:line="1792" pos:column="20">&lt;<argument><expr><name pos:line="1792" pos:column="21">LineAnnotation</name> <op:operator pos:line="1792" pos:column="36">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="1792" pos:column="38">(<argument><expr><name><name pos:line="1792" pos:column="39">perLineData</name><index pos:line="1792" pos:column="50">[<expr><name pos:line="1792" pos:column="51">ldAnnotation</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="1792" pos:column="65">-&gt;</op:operator><call><name pos:line="1792" pos:column="67">ClearAll</name><argument_list pos:line="1792" pos:column="75">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1795" pos:column="1">void</name></type> <name><name pos:line="1795" pos:column="6">Document</name><op:operator pos:line="1795" pos:column="14">::</op:operator><name pos:line="1795" pos:column="16">IncrementStyleClock</name></name><parameter_list pos:line="1795" pos:column="35">()</parameter_list> <block pos:line="1795" pos:column="38">{
	<expr_stmt><expr><name pos:line="1796" pos:column="9">styleClock</name> <op:operator pos:line="1796" pos:column="20">=</op:operator> <op:operator pos:line="1796" pos:column="22">(</op:operator><name pos:line="1796" pos:column="23">styleClock</name> <op:operator pos:line="1796" pos:column="34">+</op:operator> <lit:literal type="number" pos:line="1796" pos:column="36">1</lit:literal><op:operator pos:line="1796" pos:column="37">)</op:operator> <op:operator pos:line="1796" pos:column="39">%</op:operator> <lit:literal type="number" pos:line="1796" pos:column="41">0x100000</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1799" pos:column="1">void</name> <name pos:line="1799" pos:column="6">SCI_METHOD</name></type> <name><name pos:line="1799" pos:column="17">Document</name><op:operator pos:line="1799" pos:column="25">::</op:operator><name pos:line="1799" pos:column="27">DecorationFillRange</name></name><parameter_list pos:line="1799" pos:column="46">(<param><decl><type><name pos:line="1799" pos:column="47">int</name></type> <name pos:line="1799" pos:column="51">position</name></decl></param>, <param><decl><type><name pos:line="1799" pos:column="61">int</name></type> <name pos:line="1799" pos:column="65">value</name></decl></param>, <param><decl><type><name pos:line="1799" pos:column="72">int</name></type> <name pos:line="1799" pos:column="76">fillLength</name></decl></param>)</parameter_list> <block pos:line="1799" pos:column="88">{
	<if pos:line="1800" pos:column="9">if <condition pos:line="1800" pos:column="12">(<expr><call><name><name pos:line="1800" pos:column="13">decorations</name><op:operator pos:line="1800" pos:column="24">.</op:operator><name pos:line="1800" pos:column="25">FillRange</name></name><argument_list pos:line="1800" pos:column="34">(<argument><expr><name pos:line="1800" pos:column="35">position</name></expr></argument>, <argument><expr><name pos:line="1800" pos:column="45">value</name></expr></argument>, <argument><expr><name pos:line="1800" pos:column="52">fillLength</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1800" pos:column="64"> <block pos:line="1800" pos:column="65">{
		<decl_stmt><decl><type><name pos:line="1801" pos:column="17">DocModification</name></type> <name pos:line="1801" pos:column="33">mh</name><argument_list pos:line="1801" pos:column="35">(<argument><expr><name pos:line="1801" pos:column="36">SC_MOD_CHANGEINDICATOR</name> <op:operator pos:line="1801" pos:column="59">|</op:operator> <name pos:line="1801" pos:column="61">SC_PERFORMED_USER</name></expr></argument>,
							<argument><expr><name pos:line="1802" pos:column="57">position</name></expr></argument>, <argument><expr><name pos:line="1802" pos:column="67">fillLength</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1803" pos:column="17">NotifyModified</name><argument_list pos:line="1803" pos:column="31">(<argument><expr><name pos:line="1803" pos:column="32">mh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1807" pos:column="1">bool</name></type> <name><name pos:line="1807" pos:column="6">Document</name><op:operator pos:line="1807" pos:column="14">::</op:operator><name pos:line="1807" pos:column="16">AddWatcher</name></name><parameter_list pos:line="1807" pos:column="26">(<param><decl><type><name pos:line="1807" pos:column="27">DocWatcher</name> <type:modifier pos:line="1807" pos:column="38">*</type:modifier></type><name pos:line="1807" pos:column="39">watcher</name></decl></param>, <param><decl><type><name pos:line="1807" pos:column="48">void</name> <type:modifier pos:line="1807" pos:column="53">*</type:modifier></type><name pos:line="1807" pos:column="54">userData</name></decl></param>)</parameter_list> <block pos:line="1807" pos:column="64">{
	<for pos:line="1808" pos:column="9">for (<init><decl><type><name pos:line="1808" pos:column="14">int</name></type> <name pos:line="1808" pos:column="18">i</name> <init pos:line="1808" pos:column="20">= <expr><lit:literal type="number" pos:line="1808" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1808" pos:column="25">i</name> <op:operator pos:line="1808" pos:column="27">&lt;</op:operator> <name pos:line="1808" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="1808" pos:column="42">i</name><op:operator pos:line="1808" pos:column="43">++</op:operator></expr></incr>) <block pos:line="1808" pos:column="47">{
		<if pos:line="1809" pos:column="17">if <condition pos:line="1809" pos:column="20">(<expr><op:operator pos:line="1809" pos:column="21">(</op:operator><name><name pos:line="1809" pos:column="22">watchers</name><index pos:line="1809" pos:column="30">[<expr><name pos:line="1809" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="1809" pos:column="33">.</op:operator><name pos:line="1809" pos:column="34">watcher</name> <op:operator pos:line="1809" pos:column="42">==</op:operator> <name pos:line="1809" pos:column="45">watcher</name><op:operator pos:line="1809" pos:column="52">)</op:operator> <op:operator pos:line="1809" pos:column="54">&amp;&amp;</op:operator>
		        <op:operator pos:line="1810" pos:column="25">(</op:operator><name><name pos:line="1810" pos:column="26">watchers</name><index pos:line="1810" pos:column="34">[<expr><name pos:line="1810" pos:column="35">i</name></expr>]</index></name><op:operator pos:line="1810" pos:column="37">.</op:operator><name pos:line="1810" pos:column="38">userData</name> <op:operator pos:line="1810" pos:column="47">==</op:operator> <name pos:line="1810" pos:column="50">userData</name><op:operator pos:line="1810" pos:column="58">)</op:operator></expr>)</condition><then pos:line="1810" pos:column="60">
			<return pos:line="1811" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1811" pos:column="32">false</lit:literal></expr>;</return></then></if>
	}</block></for>
	<decl_stmt><decl><type><name pos:line="1813" pos:column="9">WatcherWithUserData</name> <type:modifier pos:line="1813" pos:column="29">*</type:modifier></type><name pos:line="1813" pos:column="30">pwNew</name> <init pos:line="1813" pos:column="36">= <expr><op:operator pos:line="1813" pos:column="38">new</op:operator> <name><name pos:line="1813" pos:column="42">WatcherWithUserData</name><index pos:line="1813" pos:column="61">[<expr><name pos:line="1813" pos:column="62">lenWatchers</name> <op:operator pos:line="1813" pos:column="74">+</op:operator> <lit:literal type="number" pos:line="1813" pos:column="76">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for pos:line="1814" pos:column="9">for (<init><decl><type><name pos:line="1814" pos:column="14">int</name></type> <name pos:line="1814" pos:column="18">j</name> <init pos:line="1814" pos:column="20">= <expr><lit:literal type="number" pos:line="1814" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1814" pos:column="25">j</name> <op:operator pos:line="1814" pos:column="27">&lt;</op:operator> <name pos:line="1814" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="1814" pos:column="42">j</name><op:operator pos:line="1814" pos:column="43">++</op:operator></expr></incr>)
		<expr_stmt><expr><name><name pos:line="1815" pos:column="17">pwNew</name><index pos:line="1815" pos:column="22">[<expr><name pos:line="1815" pos:column="23">j</name></expr>]</index></name> <op:operator pos:line="1815" pos:column="26">=</op:operator> <name><name pos:line="1815" pos:column="28">watchers</name><index pos:line="1815" pos:column="36">[<expr><name pos:line="1815" pos:column="37">j</name></expr>]</index></name></expr>;</expr_stmt></for>
	<expr_stmt><expr><name><name pos:line="1816" pos:column="9">pwNew</name><index pos:line="1816" pos:column="14">[<expr><name pos:line="1816" pos:column="15">lenWatchers</name></expr>]</index></name><op:operator pos:line="1816" pos:column="27">.</op:operator><name pos:line="1816" pos:column="28">watcher</name> <op:operator pos:line="1816" pos:column="36">=</op:operator> <name pos:line="1816" pos:column="38">watcher</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1817" pos:column="9">pwNew</name><index pos:line="1817" pos:column="14">[<expr><name pos:line="1817" pos:column="15">lenWatchers</name></expr>]</index></name><op:operator pos:line="1817" pos:column="27">.</op:operator><name pos:line="1817" pos:column="28">userData</name> <op:operator pos:line="1817" pos:column="37">=</op:operator> <name pos:line="1817" pos:column="39">userData</name></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="1818" pos:column="9">delete</op:operator> <index pos:line="1818" pos:column="16">[]</index><name pos:line="1818" pos:column="18">watchers</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1819" pos:column="9">watchers</name> <op:operator pos:line="1819" pos:column="18">=</op:operator> <name pos:line="1819" pos:column="20">pwNew</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1820" pos:column="9">lenWatchers</name><op:operator pos:line="1820" pos:column="20">++</op:operator></expr>;</expr_stmt>
	<return pos:line="1821" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1821" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1824" pos:column="1">bool</name></type> <name><name pos:line="1824" pos:column="6">Document</name><op:operator pos:line="1824" pos:column="14">::</op:operator><name pos:line="1824" pos:column="16">RemoveWatcher</name></name><parameter_list pos:line="1824" pos:column="29">(<param><decl><type><name pos:line="1824" pos:column="30">DocWatcher</name> <type:modifier pos:line="1824" pos:column="41">*</type:modifier></type><name pos:line="1824" pos:column="42">watcher</name></decl></param>, <param><decl><type><name pos:line="1824" pos:column="51">void</name> <type:modifier pos:line="1824" pos:column="56">*</type:modifier></type><name pos:line="1824" pos:column="57">userData</name></decl></param>)</parameter_list> <block pos:line="1824" pos:column="67">{
	<for pos:line="1825" pos:column="9">for (<init><decl><type><name pos:line="1825" pos:column="14">int</name></type> <name pos:line="1825" pos:column="18">i</name> <init pos:line="1825" pos:column="20">= <expr><lit:literal type="number" pos:line="1825" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1825" pos:column="25">i</name> <op:operator pos:line="1825" pos:column="27">&lt;</op:operator> <name pos:line="1825" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="1825" pos:column="42">i</name><op:operator pos:line="1825" pos:column="43">++</op:operator></expr></incr>) <block pos:line="1825" pos:column="47">{
		<if pos:line="1826" pos:column="17">if <condition pos:line="1826" pos:column="20">(<expr><op:operator pos:line="1826" pos:column="21">(</op:operator><name><name pos:line="1826" pos:column="22">watchers</name><index pos:line="1826" pos:column="30">[<expr><name pos:line="1826" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="1826" pos:column="33">.</op:operator><name pos:line="1826" pos:column="34">watcher</name> <op:operator pos:line="1826" pos:column="42">==</op:operator> <name pos:line="1826" pos:column="45">watcher</name><op:operator pos:line="1826" pos:column="52">)</op:operator> <op:operator pos:line="1826" pos:column="54">&amp;&amp;</op:operator>
		        <op:operator pos:line="1827" pos:column="25">(</op:operator><name><name pos:line="1827" pos:column="26">watchers</name><index pos:line="1827" pos:column="34">[<expr><name pos:line="1827" pos:column="35">i</name></expr>]</index></name><op:operator pos:line="1827" pos:column="37">.</op:operator><name pos:line="1827" pos:column="38">userData</name> <op:operator pos:line="1827" pos:column="47">==</op:operator> <name pos:line="1827" pos:column="50">userData</name><op:operator pos:line="1827" pos:column="58">)</op:operator></expr>)</condition><then pos:line="1827" pos:column="60"> <block pos:line="1827" pos:column="61">{
			<if pos:line="1828" pos:column="25">if <condition pos:line="1828" pos:column="28">(<expr><name pos:line="1828" pos:column="29">lenWatchers</name> <op:operator pos:line="1828" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="1828" pos:column="44">1</lit:literal></expr>)</condition><then pos:line="1828" pos:column="46"> <block pos:line="1828" pos:column="47">{
				<expr_stmt><expr><op:operator pos:line="1829" pos:column="33">delete</op:operator> <index pos:line="1829" pos:column="40">[]</index><name pos:line="1829" pos:column="42">watchers</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1830" pos:column="33">watchers</name> <op:operator pos:line="1830" pos:column="42">=</op:operator> <lit:literal type="number" pos:line="1830" pos:column="44">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1831" pos:column="33">lenWatchers</name> <op:operator pos:line="1831" pos:column="45">=</op:operator> <lit:literal type="number" pos:line="1831" pos:column="47">0</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="1832" pos:column="27">else <block pos:line="1832" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="1833" pos:column="33">WatcherWithUserData</name> <type:modifier pos:line="1833" pos:column="53">*</type:modifier></type><name pos:line="1833" pos:column="54">pwNew</name> <init pos:line="1833" pos:column="60">= <expr><op:operator pos:line="1833" pos:column="62">new</op:operator> <name><name pos:line="1833" pos:column="66">WatcherWithUserData</name><index pos:line="1833" pos:column="85">[<expr><name pos:line="1833" pos:column="86">lenWatchers</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<for pos:line="1834" pos:column="33">for (<init><decl><type><name pos:line="1834" pos:column="38">int</name></type> <name pos:line="1834" pos:column="42">j</name> <init pos:line="1834" pos:column="44">= <expr><lit:literal type="number" pos:line="1834" pos:column="46">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1834" pos:column="49">j</name> <op:operator pos:line="1834" pos:column="51">&lt;</op:operator> <name pos:line="1834" pos:column="53">lenWatchers</name> <op:operator pos:line="1834" pos:column="65">-</op:operator> <lit:literal type="number" pos:line="1834" pos:column="67">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="1834" pos:column="70">j</name><op:operator pos:line="1834" pos:column="71">++</op:operator></expr></incr>) <block pos:line="1834" pos:column="75">{
					<expr_stmt><expr><name><name pos:line="1835" pos:column="41">pwNew</name><index pos:line="1835" pos:column="46">[<expr><name pos:line="1835" pos:column="47">j</name></expr>]</index></name> <op:operator pos:line="1835" pos:column="50">=</op:operator> <op:operator pos:line="1835" pos:column="52">(</op:operator><name pos:line="1835" pos:column="53">j</name> <op:operator pos:line="1835" pos:column="55">&lt;</op:operator> <name pos:line="1835" pos:column="57">i</name><op:operator pos:line="1835" pos:column="58">)</op:operator> <op:operator pos:line="1835" pos:column="60">?</op:operator> <name><name pos:line="1835" pos:column="62">watchers</name><index pos:line="1835" pos:column="70">[<expr><name pos:line="1835" pos:column="71">j</name></expr>]</index></name> <op:operator pos:line="1835" pos:column="74">:</op:operator> <name><name pos:line="1835" pos:column="76">watchers</name><index pos:line="1835" pos:column="84">[<expr><name pos:line="1835" pos:column="85">j</name> <op:operator pos:line="1835" pos:column="87">+</op:operator> <lit:literal type="number" pos:line="1835" pos:column="89">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><op:operator pos:line="1837" pos:column="33">delete</op:operator> <index pos:line="1837" pos:column="40">[]</index><name pos:line="1837" pos:column="42">watchers</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1838" pos:column="33">watchers</name> <op:operator pos:line="1838" pos:column="42">=</op:operator> <name pos:line="1838" pos:column="44">pwNew</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="1839" pos:column="33">lenWatchers</name><op:operator pos:line="1839" pos:column="44">--</op:operator></expr>;</expr_stmt>
			}</block></else></if>
			<return pos:line="1841" pos:column="25">return <expr><lit:literal type="boolean" pos:line="1841" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="1844" pos:column="9">return <expr><lit:literal type="boolean" pos:line="1844" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="1847" pos:column="1">void</name></type> <name><name pos:line="1847" pos:column="6">Document</name><op:operator pos:line="1847" pos:column="14">::</op:operator><name pos:line="1847" pos:column="16">NotifyModifyAttempt</name></name><parameter_list pos:line="1847" pos:column="35">()</parameter_list> <block pos:line="1847" pos:column="38">{
	<for pos:line="1848" pos:column="9">for (<init><decl><type><name pos:line="1848" pos:column="14">int</name></type> <name pos:line="1848" pos:column="18">i</name> <init pos:line="1848" pos:column="20">= <expr><lit:literal type="number" pos:line="1848" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1848" pos:column="25">i</name> <op:operator pos:line="1848" pos:column="27">&lt;</op:operator> <name pos:line="1848" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="1848" pos:column="42">i</name><op:operator pos:line="1848" pos:column="43">++</op:operator></expr></incr>) <block pos:line="1848" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="1849" pos:column="17">watchers</name><index pos:line="1849" pos:column="25">[<expr><name pos:line="1849" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="1849" pos:column="28">.</op:operator><call><name><name pos:line="1849" pos:column="29">watcher</name><op:operator pos:line="1849" pos:column="36">-&gt;</op:operator><name pos:line="1849" pos:column="38">NotifyModifyAttempt</name></name><argument_list pos:line="1849" pos:column="57">(<argument><expr><name pos:line="1849" pos:column="58">this</name></expr></argument>, <argument><expr><name><name pos:line="1849" pos:column="64">watchers</name><index pos:line="1849" pos:column="72">[<expr><name pos:line="1849" pos:column="73">i</name></expr>]</index></name><op:operator pos:line="1849" pos:column="75">.</op:operator><name pos:line="1849" pos:column="76">userData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="1853" pos:column="1">void</name></type> <name><name pos:line="1853" pos:column="6">Document</name><op:operator pos:line="1853" pos:column="14">::</op:operator><name pos:line="1853" pos:column="16">NotifySavePoint</name></name><parameter_list pos:line="1853" pos:column="31">(<param><decl><type><name pos:line="1853" pos:column="32">bool</name></type> <name pos:line="1853" pos:column="37">atSavePoint</name></decl></param>)</parameter_list> <block pos:line="1853" pos:column="50">{
	<for pos:line="1854" pos:column="9">for (<init><decl><type><name pos:line="1854" pos:column="14">int</name></type> <name pos:line="1854" pos:column="18">i</name> <init pos:line="1854" pos:column="20">= <expr><lit:literal type="number" pos:line="1854" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1854" pos:column="25">i</name> <op:operator pos:line="1854" pos:column="27">&lt;</op:operator> <name pos:line="1854" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="1854" pos:column="42">i</name><op:operator pos:line="1854" pos:column="43">++</op:operator></expr></incr>) <block pos:line="1854" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="1855" pos:column="17">watchers</name><index pos:line="1855" pos:column="25">[<expr><name pos:line="1855" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="1855" pos:column="28">.</op:operator><call><name><name pos:line="1855" pos:column="29">watcher</name><op:operator pos:line="1855" pos:column="36">-&gt;</op:operator><name pos:line="1855" pos:column="38">NotifySavePoint</name></name><argument_list pos:line="1855" pos:column="53">(<argument><expr><name pos:line="1855" pos:column="54">this</name></expr></argument>, <argument><expr><name><name pos:line="1855" pos:column="60">watchers</name><index pos:line="1855" pos:column="68">[<expr><name pos:line="1855" pos:column="69">i</name></expr>]</index></name><op:operator pos:line="1855" pos:column="71">.</op:operator><name pos:line="1855" pos:column="72">userData</name></expr></argument>, <argument><expr><name pos:line="1855" pos:column="82">atSavePoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="1859" pos:column="1">void</name></type> <name><name pos:line="1859" pos:column="6">Document</name><op:operator pos:line="1859" pos:column="14">::</op:operator><name pos:line="1859" pos:column="16">NotifyModified</name></name><parameter_list pos:line="1859" pos:column="30">(<param><decl><type><name pos:line="1859" pos:column="31">DocModification</name></type> <name pos:line="1859" pos:column="47">mh</name></decl></param>)</parameter_list> <block pos:line="1859" pos:column="51">{
	<if pos:line="1860" pos:column="9">if <condition pos:line="1860" pos:column="12">(<expr><name><name pos:line="1860" pos:column="13">mh</name><op:operator pos:line="1860" pos:column="15">.</op:operator><name pos:line="1860" pos:column="16">modificationType</name></name> <op:operator pos:line="1860" pos:column="33">&amp;</op:operator> <name pos:line="1860" pos:column="35">SC_MOD_INSERTTEXT</name></expr>)</condition><then pos:line="1860" pos:column="53"> <block pos:line="1860" pos:column="54">{
		<expr_stmt><expr><call><name><name pos:line="1861" pos:column="17">decorations</name><op:operator pos:line="1861" pos:column="28">.</op:operator><name pos:line="1861" pos:column="29">InsertSpace</name></name><argument_list pos:line="1861" pos:column="40">(<argument><expr><name><name pos:line="1861" pos:column="41">mh</name><op:operator pos:line="1861" pos:column="43">.</op:operator><name pos:line="1861" pos:column="44">position</name></name></expr></argument>, <argument><expr><name><name pos:line="1861" pos:column="54">mh</name><op:operator pos:line="1861" pos:column="56">.</op:operator><name pos:line="1861" pos:column="57">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="1862" pos:column="11">else <if pos:line="1862" pos:column="16">if <condition pos:line="1862" pos:column="19">(<expr><name><name pos:line="1862" pos:column="20">mh</name><op:operator pos:line="1862" pos:column="22">.</op:operator><name pos:line="1862" pos:column="23">modificationType</name></name> <op:operator pos:line="1862" pos:column="40">&amp;</op:operator> <name pos:line="1862" pos:column="42">SC_MOD_DELETETEXT</name></expr>)</condition><then pos:line="1862" pos:column="60"> <block pos:line="1862" pos:column="61">{
		<expr_stmt><expr><call><name><name pos:line="1863" pos:column="17">decorations</name><op:operator pos:line="1863" pos:column="28">.</op:operator><name pos:line="1863" pos:column="29">DeleteRange</name></name><argument_list pos:line="1863" pos:column="40">(<argument><expr><name><name pos:line="1863" pos:column="41">mh</name><op:operator pos:line="1863" pos:column="43">.</op:operator><name pos:line="1863" pos:column="44">position</name></name></expr></argument>, <argument><expr><name><name pos:line="1863" pos:column="54">mh</name><op:operator pos:line="1863" pos:column="56">.</op:operator><name pos:line="1863" pos:column="57">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<for pos:line="1865" pos:column="9">for (<init><decl><type><name pos:line="1865" pos:column="14">int</name></type> <name pos:line="1865" pos:column="18">i</name> <init pos:line="1865" pos:column="20">= <expr><lit:literal type="number" pos:line="1865" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1865" pos:column="25">i</name> <op:operator pos:line="1865" pos:column="27">&lt;</op:operator> <name pos:line="1865" pos:column="29">lenWatchers</name></expr>;</condition> <incr><expr><name pos:line="1865" pos:column="42">i</name><op:operator pos:line="1865" pos:column="43">++</op:operator></expr></incr>) <block pos:line="1865" pos:column="47">{
		<expr_stmt><expr><name><name pos:line="1866" pos:column="17">watchers</name><index pos:line="1866" pos:column="25">[<expr><name pos:line="1866" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="1866" pos:column="28">.</op:operator><call><name><name pos:line="1866" pos:column="29">watcher</name><op:operator pos:line="1866" pos:column="36">-&gt;</op:operator><name pos:line="1866" pos:column="38">NotifyModified</name></name><argument_list pos:line="1866" pos:column="52">(<argument><expr><name pos:line="1866" pos:column="53">this</name></expr></argument>, <argument><expr><name pos:line="1866" pos:column="59">mh</name></expr></argument>, <argument><expr><name><name pos:line="1866" pos:column="63">watchers</name><index pos:line="1866" pos:column="71">[<expr><name pos:line="1866" pos:column="72">i</name></expr>]</index></name><op:operator pos:line="1866" pos:column="74">.</op:operator><name pos:line="1866" pos:column="75">userData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="1870" pos:column="1">bool</name></type> <name><name pos:line="1870" pos:column="6">Document</name><op:operator pos:line="1870" pos:column="14">::</op:operator><name pos:line="1870" pos:column="16">IsWordPartSeparator</name></name><parameter_list pos:line="1870" pos:column="35">(<param><decl><type><name pos:line="1870" pos:column="36">char</name></type> <name pos:line="1870" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="1870" pos:column="45">{
	<return pos:line="1871" pos:column="9">return <expr><op:operator pos:line="1871" pos:column="16">(</op:operator><call><name pos:line="1871" pos:column="17">WordCharClass</name><argument_list pos:line="1871" pos:column="30">(<argument><expr><name pos:line="1871" pos:column="31">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="1871" pos:column="35">==</op:operator> <name><name pos:line="1871" pos:column="38">CharClassify</name><op:operator pos:line="1871" pos:column="50">::</op:operator><name pos:line="1871" pos:column="52">ccWord</name></name><op:operator pos:line="1871" pos:column="58">)</op:operator> <op:operator pos:line="1871" pos:column="60">&amp;&amp;</op:operator> <call><name pos:line="1871" pos:column="63">IsPunctuation</name><argument_list pos:line="1871" pos:column="76">(<argument><expr><name pos:line="1871" pos:column="77">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1874" pos:column="1">int</name></type> <name><name pos:line="1874" pos:column="5">Document</name><op:operator pos:line="1874" pos:column="13">::</op:operator><name pos:line="1874" pos:column="15">WordPartLeft</name></name><parameter_list pos:line="1874" pos:column="27">(<param><decl><type><name pos:line="1874" pos:column="28">int</name></type> <name pos:line="1874" pos:column="32">pos</name></decl></param>)</parameter_list> <block pos:line="1874" pos:column="37">{
	<if pos:line="1875" pos:column="9">if <condition pos:line="1875" pos:column="12">(<expr><name pos:line="1875" pos:column="13">pos</name> <op:operator pos:line="1875" pos:column="17">&gt;</op:operator> <lit:literal type="number" pos:line="1875" pos:column="19">0</lit:literal></expr>)</condition><then pos:line="1875" pos:column="21"> <block pos:line="1875" pos:column="22">{
		<expr_stmt><expr><op:operator pos:line="1876" pos:column="17">--</op:operator><name pos:line="1876" pos:column="19">pos</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="1877" pos:column="17">char</name></type> <name pos:line="1877" pos:column="22">startChar</name> <init pos:line="1877" pos:column="32">= <expr><call><name><name pos:line="1877" pos:column="34">cb</name><op:operator pos:line="1877" pos:column="36">.</op:operator><name pos:line="1877" pos:column="37">CharAt</name></name><argument_list pos:line="1877" pos:column="43">(<argument><expr><name pos:line="1877" pos:column="44">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1878" pos:column="17">if <condition pos:line="1878" pos:column="20">(<expr><call><name pos:line="1878" pos:column="21">IsWordPartSeparator</name><argument_list pos:line="1878" pos:column="40">(<argument><expr><name pos:line="1878" pos:column="41">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1878" pos:column="52"> <block pos:line="1878" pos:column="53">{
			<while pos:line="1879" pos:column="25">while <condition pos:line="1879" pos:column="31">(<expr><name pos:line="1879" pos:column="32">pos</name> <op:operator pos:line="1879" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="1879" pos:column="38">0</lit:literal> <op:operator pos:line="1879" pos:column="40">&amp;&amp;</op:operator> <call><name pos:line="1879" pos:column="43">IsWordPartSeparator</name><argument_list pos:line="1879" pos:column="62">(<argument><expr><call><name><name pos:line="1879" pos:column="63">cb</name><op:operator pos:line="1879" pos:column="65">.</op:operator><name pos:line="1879" pos:column="66">CharAt</name></name><argument_list pos:line="1879" pos:column="72">(<argument><expr><name pos:line="1879" pos:column="73">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="1879" pos:column="80">{
				<expr_stmt><expr><op:operator pos:line="1880" pos:column="33">--</op:operator><name pos:line="1880" pos:column="35">pos</name></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
		<if pos:line="1883" pos:column="17">if <condition pos:line="1883" pos:column="20">(<expr><name pos:line="1883" pos:column="21">pos</name> <op:operator pos:line="1883" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="1883" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="1883" pos:column="29"> <block pos:line="1883" pos:column="30">{
			<expr_stmt><expr><name pos:line="1884" pos:column="25">startChar</name> <op:operator pos:line="1884" pos:column="35">=</op:operator> <call><name><name pos:line="1884" pos:column="37">cb</name><op:operator pos:line="1884" pos:column="39">.</op:operator><name pos:line="1884" pos:column="40">CharAt</name></name><argument_list pos:line="1884" pos:column="46">(<argument><expr><name pos:line="1884" pos:column="47">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="1885" pos:column="25">--</op:operator><name pos:line="1885" pos:column="27">pos</name></expr>;</expr_stmt>
			<if pos:line="1886" pos:column="25">if <condition pos:line="1886" pos:column="28">(<expr><call><name pos:line="1886" pos:column="29">IsLowerCase</name><argument_list pos:line="1886" pos:column="40">(<argument><expr><name pos:line="1886" pos:column="41">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1886" pos:column="52"> <block pos:line="1886" pos:column="53">{
				<while pos:line="1887" pos:column="33">while <condition pos:line="1887" pos:column="39">(<expr><name pos:line="1887" pos:column="40">pos</name> <op:operator pos:line="1887" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="1887" pos:column="46">0</lit:literal> <op:operator pos:line="1887" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="1887" pos:column="51">IsLowerCase</name><argument_list pos:line="1887" pos:column="62">(<argument><expr><call><name><name pos:line="1887" pos:column="63">cb</name><op:operator pos:line="1887" pos:column="65">.</op:operator><name pos:line="1887" pos:column="66">CharAt</name></name><argument_list pos:line="1887" pos:column="72">(<argument><expr><name pos:line="1887" pos:column="73">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><op:operator pos:line="1888" pos:column="41">--</op:operator><name pos:line="1888" pos:column="43">pos</name></expr>;</expr_stmt></while>
				<if pos:line="1889" pos:column="33">if <condition pos:line="1889" pos:column="36">(<expr><op:operator pos:line="1889" pos:column="37">!</op:operator><call><name pos:line="1889" pos:column="38">IsUpperCase</name><argument_list pos:line="1889" pos:column="49">(<argument><expr><call><name><name pos:line="1889" pos:column="50">cb</name><op:operator pos:line="1889" pos:column="52">.</op:operator><name pos:line="1889" pos:column="53">CharAt</name></name><argument_list pos:line="1889" pos:column="59">(<argument><expr><name pos:line="1889" pos:column="60">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1889" pos:column="66">&amp;&amp;</op:operator> <op:operator pos:line="1889" pos:column="69">!</op:operator><call><name pos:line="1889" pos:column="70">IsLowerCase</name><argument_list pos:line="1889" pos:column="81">(<argument><expr><call><name><name pos:line="1889" pos:column="82">cb</name><op:operator pos:line="1889" pos:column="84">.</op:operator><name pos:line="1889" pos:column="85">CharAt</name></name><argument_list pos:line="1889" pos:column="91">(<argument><expr><name pos:line="1889" pos:column="92">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1889" pos:column="98">
					<expr_stmt><expr><op:operator pos:line="1890" pos:column="41">++</op:operator><name pos:line="1890" pos:column="43">pos</name></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="1891" pos:column="27">else <if pos:line="1891" pos:column="32">if <condition pos:line="1891" pos:column="35">(<expr><call><name pos:line="1891" pos:column="36">IsUpperCase</name><argument_list pos:line="1891" pos:column="47">(<argument><expr><name pos:line="1891" pos:column="48">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1891" pos:column="59"> <block pos:line="1891" pos:column="60">{
				<while pos:line="1892" pos:column="33">while <condition pos:line="1892" pos:column="39">(<expr><name pos:line="1892" pos:column="40">pos</name> <op:operator pos:line="1892" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="1892" pos:column="46">0</lit:literal> <op:operator pos:line="1892" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="1892" pos:column="51">IsUpperCase</name><argument_list pos:line="1892" pos:column="62">(<argument><expr><call><name><name pos:line="1892" pos:column="63">cb</name><op:operator pos:line="1892" pos:column="65">.</op:operator><name pos:line="1892" pos:column="66">CharAt</name></name><argument_list pos:line="1892" pos:column="72">(<argument><expr><name pos:line="1892" pos:column="73">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><op:operator pos:line="1893" pos:column="41">--</op:operator><name pos:line="1893" pos:column="43">pos</name></expr>;</expr_stmt></while>
				<if pos:line="1894" pos:column="33">if <condition pos:line="1894" pos:column="36">(<expr><op:operator pos:line="1894" pos:column="37">!</op:operator><call><name pos:line="1894" pos:column="38">IsUpperCase</name><argument_list pos:line="1894" pos:column="49">(<argument><expr><call><name><name pos:line="1894" pos:column="50">cb</name><op:operator pos:line="1894" pos:column="52">.</op:operator><name pos:line="1894" pos:column="53">CharAt</name></name><argument_list pos:line="1894" pos:column="59">(<argument><expr><name pos:line="1894" pos:column="60">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1894" pos:column="66">
					<expr_stmt><expr><op:operator pos:line="1895" pos:column="41">++</op:operator><name pos:line="1895" pos:column="43">pos</name></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="1896" pos:column="27">else <if pos:line="1896" pos:column="32">if <condition pos:line="1896" pos:column="35">(<expr><call><name pos:line="1896" pos:column="36">IsADigit</name><argument_list pos:line="1896" pos:column="44">(<argument><expr><name pos:line="1896" pos:column="45">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1896" pos:column="56"> <block pos:line="1896" pos:column="57">{
				<while pos:line="1897" pos:column="33">while <condition pos:line="1897" pos:column="39">(<expr><name pos:line="1897" pos:column="40">pos</name> <op:operator pos:line="1897" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="1897" pos:column="46">0</lit:literal> <op:operator pos:line="1897" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="1897" pos:column="51">IsADigit</name><argument_list pos:line="1897" pos:column="59">(<argument><expr><call><name><name pos:line="1897" pos:column="60">cb</name><op:operator pos:line="1897" pos:column="62">.</op:operator><name pos:line="1897" pos:column="63">CharAt</name></name><argument_list pos:line="1897" pos:column="69">(<argument><expr><name pos:line="1897" pos:column="70">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><op:operator pos:line="1898" pos:column="41">--</op:operator><name pos:line="1898" pos:column="43">pos</name></expr>;</expr_stmt></while>
				<if pos:line="1899" pos:column="33">if <condition pos:line="1899" pos:column="36">(<expr><op:operator pos:line="1899" pos:column="37">!</op:operator><call><name pos:line="1899" pos:column="38">IsADigit</name><argument_list pos:line="1899" pos:column="46">(<argument><expr><call><name><name pos:line="1899" pos:column="47">cb</name><op:operator pos:line="1899" pos:column="49">.</op:operator><name pos:line="1899" pos:column="50">CharAt</name></name><argument_list pos:line="1899" pos:column="56">(<argument><expr><name pos:line="1899" pos:column="57">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1899" pos:column="63">
					<expr_stmt><expr><op:operator pos:line="1900" pos:column="41">++</op:operator><name pos:line="1900" pos:column="43">pos</name></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="1901" pos:column="27">else <if pos:line="1901" pos:column="32">if <condition pos:line="1901" pos:column="35">(<expr><call><name pos:line="1901" pos:column="36">IsPunctuation</name><argument_list pos:line="1901" pos:column="49">(<argument><expr><name pos:line="1901" pos:column="50">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1901" pos:column="61"> <block pos:line="1901" pos:column="62">{
				<while pos:line="1902" pos:column="33">while <condition pos:line="1902" pos:column="39">(<expr><name pos:line="1902" pos:column="40">pos</name> <op:operator pos:line="1902" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="1902" pos:column="46">0</lit:literal> <op:operator pos:line="1902" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="1902" pos:column="51">IsPunctuation</name><argument_list pos:line="1902" pos:column="64">(<argument><expr><call><name><name pos:line="1902" pos:column="65">cb</name><op:operator pos:line="1902" pos:column="67">.</op:operator><name pos:line="1902" pos:column="68">CharAt</name></name><argument_list pos:line="1902" pos:column="74">(<argument><expr><name pos:line="1902" pos:column="75">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><op:operator pos:line="1903" pos:column="41">--</op:operator><name pos:line="1903" pos:column="43">pos</name></expr>;</expr_stmt></while>
				<if pos:line="1904" pos:column="33">if <condition pos:line="1904" pos:column="36">(<expr><op:operator pos:line="1904" pos:column="37">!</op:operator><call><name pos:line="1904" pos:column="38">IsPunctuation</name><argument_list pos:line="1904" pos:column="51">(<argument><expr><call><name><name pos:line="1904" pos:column="52">cb</name><op:operator pos:line="1904" pos:column="54">.</op:operator><name pos:line="1904" pos:column="55">CharAt</name></name><argument_list pos:line="1904" pos:column="61">(<argument><expr><name pos:line="1904" pos:column="62">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1904" pos:column="68">
					<expr_stmt><expr><op:operator pos:line="1905" pos:column="41">++</op:operator><name pos:line="1905" pos:column="43">pos</name></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="1906" pos:column="27">else <if pos:line="1906" pos:column="32">if <condition pos:line="1906" pos:column="35">(<expr><call><name pos:line="1906" pos:column="36">isspacechar</name><argument_list pos:line="1906" pos:column="47">(<argument><expr><name pos:line="1906" pos:column="48">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1906" pos:column="59"> <block pos:line="1906" pos:column="60">{
				<while pos:line="1907" pos:column="33">while <condition pos:line="1907" pos:column="39">(<expr><name pos:line="1907" pos:column="40">pos</name> <op:operator pos:line="1907" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="1907" pos:column="46">0</lit:literal> <op:operator pos:line="1907" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="1907" pos:column="51">isspacechar</name><argument_list pos:line="1907" pos:column="62">(<argument><expr><call><name><name pos:line="1907" pos:column="63">cb</name><op:operator pos:line="1907" pos:column="65">.</op:operator><name pos:line="1907" pos:column="66">CharAt</name></name><argument_list pos:line="1907" pos:column="72">(<argument><expr><name pos:line="1907" pos:column="73">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><op:operator pos:line="1908" pos:column="41">--</op:operator><name pos:line="1908" pos:column="43">pos</name></expr>;</expr_stmt></while>
				<if pos:line="1909" pos:column="33">if <condition pos:line="1909" pos:column="36">(<expr><op:operator pos:line="1909" pos:column="37">!</op:operator><call><name pos:line="1909" pos:column="38">isspacechar</name><argument_list pos:line="1909" pos:column="49">(<argument><expr><call><name><name pos:line="1909" pos:column="50">cb</name><op:operator pos:line="1909" pos:column="52">.</op:operator><name pos:line="1909" pos:column="53">CharAt</name></name><argument_list pos:line="1909" pos:column="59">(<argument><expr><name pos:line="1909" pos:column="60">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1909" pos:column="66">
					<expr_stmt><expr><op:operator pos:line="1910" pos:column="41">++</op:operator><name pos:line="1910" pos:column="43">pos</name></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="1911" pos:column="27">else <if pos:line="1911" pos:column="32">if <condition pos:line="1911" pos:column="35">(<expr><op:operator pos:line="1911" pos:column="36">!</op:operator><call><name pos:line="1911" pos:column="37">isascii</name><argument_list pos:line="1911" pos:column="44">(<argument><expr><name pos:line="1911" pos:column="45">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1911" pos:column="56"> <block pos:line="1911" pos:column="57">{
				<while pos:line="1912" pos:column="33">while <condition pos:line="1912" pos:column="39">(<expr><name pos:line="1912" pos:column="40">pos</name> <op:operator pos:line="1912" pos:column="44">&gt;</op:operator> <lit:literal type="number" pos:line="1912" pos:column="46">0</lit:literal> <op:operator pos:line="1912" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="1912" pos:column="51">!</op:operator><call><name pos:line="1912" pos:column="52">isascii</name><argument_list pos:line="1912" pos:column="59">(<argument><expr><call><name><name pos:line="1912" pos:column="60">cb</name><op:operator pos:line="1912" pos:column="62">.</op:operator><name pos:line="1912" pos:column="63">CharAt</name></name><argument_list pos:line="1912" pos:column="69">(<argument><expr><name pos:line="1912" pos:column="70">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><op:operator pos:line="1913" pos:column="41">--</op:operator><name pos:line="1913" pos:column="43">pos</name></expr>;</expr_stmt></while>
				<if pos:line="1914" pos:column="33">if <condition pos:line="1914" pos:column="36">(<expr><call><name pos:line="1914" pos:column="37">isascii</name><argument_list pos:line="1914" pos:column="44">(<argument><expr><call><name><name pos:line="1914" pos:column="45">cb</name><op:operator pos:line="1914" pos:column="47">.</op:operator><name pos:line="1914" pos:column="48">CharAt</name></name><argument_list pos:line="1914" pos:column="54">(<argument><expr><name pos:line="1914" pos:column="55">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1914" pos:column="61">
					<expr_stmt><expr><op:operator pos:line="1915" pos:column="41">++</op:operator><name pos:line="1915" pos:column="43">pos</name></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="1916" pos:column="27">else <block pos:line="1916" pos:column="32">{
				<expr_stmt><expr><op:operator pos:line="1917" pos:column="33">++</op:operator><name pos:line="1917" pos:column="35">pos</name></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></then></if>
	<return pos:line="1921" pos:column="9">return <expr><name pos:line="1921" pos:column="16">pos</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1924" pos:column="1">int</name></type> <name><name pos:line="1924" pos:column="5">Document</name><op:operator pos:line="1924" pos:column="13">::</op:operator><name pos:line="1924" pos:column="15">WordPartRight</name></name><parameter_list pos:line="1924" pos:column="28">(<param><decl><type><name pos:line="1924" pos:column="29">int</name></type> <name pos:line="1924" pos:column="33">pos</name></decl></param>)</parameter_list> <block pos:line="1924" pos:column="38">{
	<decl_stmt><decl><type><name pos:line="1925" pos:column="9">char</name></type> <name pos:line="1925" pos:column="14">startChar</name> <init pos:line="1925" pos:column="24">= <expr><call><name><name pos:line="1925" pos:column="26">cb</name><op:operator pos:line="1925" pos:column="28">.</op:operator><name pos:line="1925" pos:column="29">CharAt</name></name><argument_list pos:line="1925" pos:column="35">(<argument><expr><name pos:line="1925" pos:column="36">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1926" pos:column="9">int</name></type> <name pos:line="1926" pos:column="13">length</name> <init pos:line="1926" pos:column="20">= <expr><call><name pos:line="1926" pos:column="22">Length</name><argument_list pos:line="1926" pos:column="28">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1927" pos:column="9">if <condition pos:line="1927" pos:column="12">(<expr><call><name pos:line="1927" pos:column="13">IsWordPartSeparator</name><argument_list pos:line="1927" pos:column="32">(<argument><expr><name pos:line="1927" pos:column="33">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1927" pos:column="44"> <block pos:line="1927" pos:column="45">{
		<while pos:line="1928" pos:column="17">while <condition pos:line="1928" pos:column="23">(<expr><name pos:line="1928" pos:column="24">pos</name> <op:operator pos:line="1928" pos:column="28">&lt;</op:operator> <name pos:line="1928" pos:column="30">length</name> <op:operator pos:line="1928" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="1928" pos:column="40">IsWordPartSeparator</name><argument_list pos:line="1928" pos:column="59">(<argument><expr><call><name><name pos:line="1928" pos:column="60">cb</name><op:operator pos:line="1928" pos:column="62">.</op:operator><name pos:line="1928" pos:column="63">CharAt</name></name><argument_list pos:line="1928" pos:column="69">(<argument><expr><name pos:line="1928" pos:column="70">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<expr_stmt><expr><op:operator pos:line="1929" pos:column="25">++</op:operator><name pos:line="1929" pos:column="27">pos</name></expr>;</expr_stmt></while>
		<expr_stmt><expr><name pos:line="1930" pos:column="17">startChar</name> <op:operator pos:line="1930" pos:column="27">=</op:operator> <call><name><name pos:line="1930" pos:column="29">cb</name><op:operator pos:line="1930" pos:column="31">.</op:operator><name pos:line="1930" pos:column="32">CharAt</name></name><argument_list pos:line="1930" pos:column="38">(<argument><expr><name pos:line="1930" pos:column="39">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="1932" pos:column="9">if <condition pos:line="1932" pos:column="12">(<expr><op:operator pos:line="1932" pos:column="13">!</op:operator><call><name pos:line="1932" pos:column="14">isascii</name><argument_list pos:line="1932" pos:column="21">(<argument><expr><name pos:line="1932" pos:column="22">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1932" pos:column="33"> <block pos:line="1932" pos:column="34">{
		<while pos:line="1933" pos:column="17">while <condition pos:line="1933" pos:column="23">(<expr><name pos:line="1933" pos:column="24">pos</name> <op:operator pos:line="1933" pos:column="28">&lt;</op:operator> <name pos:line="1933" pos:column="30">length</name> <op:operator pos:line="1933" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="1933" pos:column="40">!</op:operator><call><name pos:line="1933" pos:column="41">isascii</name><argument_list pos:line="1933" pos:column="48">(<argument><expr><call><name><name pos:line="1933" pos:column="49">cb</name><op:operator pos:line="1933" pos:column="51">.</op:operator><name pos:line="1933" pos:column="52">CharAt</name></name><argument_list pos:line="1933" pos:column="58">(<argument><expr><name pos:line="1933" pos:column="59">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<expr_stmt><expr><op:operator pos:line="1934" pos:column="25">++</op:operator><name pos:line="1934" pos:column="27">pos</name></expr>;</expr_stmt></while>
	}</block></then> <else pos:line="1935" pos:column="11">else <if pos:line="1935" pos:column="16">if <condition pos:line="1935" pos:column="19">(<expr><call><name pos:line="1935" pos:column="20">IsLowerCase</name><argument_list pos:line="1935" pos:column="31">(<argument><expr><name pos:line="1935" pos:column="32">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1935" pos:column="43"> <block pos:line="1935" pos:column="44">{
		<while pos:line="1936" pos:column="17">while <condition pos:line="1936" pos:column="23">(<expr><name pos:line="1936" pos:column="24">pos</name> <op:operator pos:line="1936" pos:column="28">&lt;</op:operator> <name pos:line="1936" pos:column="30">length</name> <op:operator pos:line="1936" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="1936" pos:column="40">IsLowerCase</name><argument_list pos:line="1936" pos:column="51">(<argument><expr><call><name><name pos:line="1936" pos:column="52">cb</name><op:operator pos:line="1936" pos:column="54">.</op:operator><name pos:line="1936" pos:column="55">CharAt</name></name><argument_list pos:line="1936" pos:column="61">(<argument><expr><name pos:line="1936" pos:column="62">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<expr_stmt><expr><op:operator pos:line="1937" pos:column="25">++</op:operator><name pos:line="1937" pos:column="27">pos</name></expr>;</expr_stmt></while>
	}</block></then> <else pos:line="1938" pos:column="11">else <if pos:line="1938" pos:column="16">if <condition pos:line="1938" pos:column="19">(<expr><call><name pos:line="1938" pos:column="20">IsUpperCase</name><argument_list pos:line="1938" pos:column="31">(<argument><expr><name pos:line="1938" pos:column="32">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1938" pos:column="43"> <block pos:line="1938" pos:column="44">{
		<if pos:line="1939" pos:column="17">if <condition pos:line="1939" pos:column="20">(<expr><call><name pos:line="1939" pos:column="21">IsLowerCase</name><argument_list pos:line="1939" pos:column="32">(<argument><expr><call><name><name pos:line="1939" pos:column="33">cb</name><op:operator pos:line="1939" pos:column="35">.</op:operator><name pos:line="1939" pos:column="36">CharAt</name></name><argument_list pos:line="1939" pos:column="42">(<argument><expr><name pos:line="1939" pos:column="43">pos</name> <op:operator pos:line="1939" pos:column="47">+</op:operator> <lit:literal type="number" pos:line="1939" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1939" pos:column="53"> <block pos:line="1939" pos:column="54">{
			<expr_stmt><expr><op:operator pos:line="1940" pos:column="25">++</op:operator><name pos:line="1940" pos:column="27">pos</name></expr>;</expr_stmt>
			<while pos:line="1941" pos:column="25">while <condition pos:line="1941" pos:column="31">(<expr><name pos:line="1941" pos:column="32">pos</name> <op:operator pos:line="1941" pos:column="36">&lt;</op:operator> <name pos:line="1941" pos:column="38">length</name> <op:operator pos:line="1941" pos:column="45">&amp;&amp;</op:operator> <call><name pos:line="1941" pos:column="48">IsLowerCase</name><argument_list pos:line="1941" pos:column="59">(<argument><expr><call><name><name pos:line="1941" pos:column="60">cb</name><op:operator pos:line="1941" pos:column="62">.</op:operator><name pos:line="1941" pos:column="63">CharAt</name></name><argument_list pos:line="1941" pos:column="69">(<argument><expr><name pos:line="1941" pos:column="70">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<expr_stmt><expr><op:operator pos:line="1942" pos:column="33">++</op:operator><name pos:line="1942" pos:column="35">pos</name></expr>;</expr_stmt></while>
		}</block></then> <else pos:line="1943" pos:column="19">else <block pos:line="1943" pos:column="24">{
			<while pos:line="1944" pos:column="25">while <condition pos:line="1944" pos:column="31">(<expr><name pos:line="1944" pos:column="32">pos</name> <op:operator pos:line="1944" pos:column="36">&lt;</op:operator> <name pos:line="1944" pos:column="38">length</name> <op:operator pos:line="1944" pos:column="45">&amp;&amp;</op:operator> <call><name pos:line="1944" pos:column="48">IsUpperCase</name><argument_list pos:line="1944" pos:column="59">(<argument><expr><call><name><name pos:line="1944" pos:column="60">cb</name><op:operator pos:line="1944" pos:column="62">.</op:operator><name pos:line="1944" pos:column="63">CharAt</name></name><argument_list pos:line="1944" pos:column="69">(<argument><expr><name pos:line="1944" pos:column="70">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
				<expr_stmt><expr><op:operator pos:line="1945" pos:column="33">++</op:operator><name pos:line="1945" pos:column="35">pos</name></expr>;</expr_stmt></while>
		}</block></else></if>
		<if pos:line="1947" pos:column="17">if <condition pos:line="1947" pos:column="20">(<expr><call><name pos:line="1947" pos:column="21">IsLowerCase</name><argument_list pos:line="1947" pos:column="32">(<argument><expr><call><name><name pos:line="1947" pos:column="33">cb</name><op:operator pos:line="1947" pos:column="35">.</op:operator><name pos:line="1947" pos:column="36">CharAt</name></name><argument_list pos:line="1947" pos:column="42">(<argument><expr><name pos:line="1947" pos:column="43">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="1947" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="1947" pos:column="52">IsUpperCase</name><argument_list pos:line="1947" pos:column="63">(<argument><expr><call><name><name pos:line="1947" pos:column="64">cb</name><op:operator pos:line="1947" pos:column="66">.</op:operator><name pos:line="1947" pos:column="67">CharAt</name></name><argument_list pos:line="1947" pos:column="73">(<argument><expr><name pos:line="1947" pos:column="74">pos</name> <op:operator pos:line="1947" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="1947" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1947" pos:column="84">
			<expr_stmt><expr><op:operator pos:line="1948" pos:column="25">--</op:operator><name pos:line="1948" pos:column="27">pos</name></expr>;</expr_stmt></then></if>
	}</block></then> <else pos:line="1949" pos:column="11">else <if pos:line="1949" pos:column="16">if <condition pos:line="1949" pos:column="19">(<expr><call><name pos:line="1949" pos:column="20">IsADigit</name><argument_list pos:line="1949" pos:column="28">(<argument><expr><name pos:line="1949" pos:column="29">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1949" pos:column="40"> <block pos:line="1949" pos:column="41">{
		<while pos:line="1950" pos:column="17">while <condition pos:line="1950" pos:column="23">(<expr><name pos:line="1950" pos:column="24">pos</name> <op:operator pos:line="1950" pos:column="28">&lt;</op:operator> <name pos:line="1950" pos:column="30">length</name> <op:operator pos:line="1950" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="1950" pos:column="40">IsADigit</name><argument_list pos:line="1950" pos:column="48">(<argument><expr><call><name><name pos:line="1950" pos:column="49">cb</name><op:operator pos:line="1950" pos:column="51">.</op:operator><name pos:line="1950" pos:column="52">CharAt</name></name><argument_list pos:line="1950" pos:column="58">(<argument><expr><name pos:line="1950" pos:column="59">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<expr_stmt><expr><op:operator pos:line="1951" pos:column="25">++</op:operator><name pos:line="1951" pos:column="27">pos</name></expr>;</expr_stmt></while>
	}</block></then> <else pos:line="1952" pos:column="11">else <if pos:line="1952" pos:column="16">if <condition pos:line="1952" pos:column="19">(<expr><call><name pos:line="1952" pos:column="20">IsPunctuation</name><argument_list pos:line="1952" pos:column="33">(<argument><expr><name pos:line="1952" pos:column="34">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1952" pos:column="45"> <block pos:line="1952" pos:column="46">{
		<while pos:line="1953" pos:column="17">while <condition pos:line="1953" pos:column="23">(<expr><name pos:line="1953" pos:column="24">pos</name> <op:operator pos:line="1953" pos:column="28">&lt;</op:operator> <name pos:line="1953" pos:column="30">length</name> <op:operator pos:line="1953" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="1953" pos:column="40">IsPunctuation</name><argument_list pos:line="1953" pos:column="53">(<argument><expr><call><name><name pos:line="1953" pos:column="54">cb</name><op:operator pos:line="1953" pos:column="56">.</op:operator><name pos:line="1953" pos:column="57">CharAt</name></name><argument_list pos:line="1953" pos:column="63">(<argument><expr><name pos:line="1953" pos:column="64">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<expr_stmt><expr><op:operator pos:line="1954" pos:column="25">++</op:operator><name pos:line="1954" pos:column="27">pos</name></expr>;</expr_stmt></while>
	}</block></then> <else pos:line="1955" pos:column="11">else <if pos:line="1955" pos:column="16">if <condition pos:line="1955" pos:column="19">(<expr><call><name pos:line="1955" pos:column="20">isspacechar</name><argument_list pos:line="1955" pos:column="31">(<argument><expr><name pos:line="1955" pos:column="32">startChar</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1955" pos:column="43"> <block pos:line="1955" pos:column="44">{
		<while pos:line="1956" pos:column="17">while <condition pos:line="1956" pos:column="23">(<expr><name pos:line="1956" pos:column="24">pos</name> <op:operator pos:line="1956" pos:column="28">&lt;</op:operator> <name pos:line="1956" pos:column="30">length</name> <op:operator pos:line="1956" pos:column="37">&amp;&amp;</op:operator> <call><name pos:line="1956" pos:column="40">isspacechar</name><argument_list pos:line="1956" pos:column="51">(<argument><expr><call><name><name pos:line="1956" pos:column="52">cb</name><op:operator pos:line="1956" pos:column="54">.</op:operator><name pos:line="1956" pos:column="55">CharAt</name></name><argument_list pos:line="1956" pos:column="61">(<argument><expr><name pos:line="1956" pos:column="62">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
			<expr_stmt><expr><op:operator pos:line="1957" pos:column="25">++</op:operator><name pos:line="1957" pos:column="27">pos</name></expr>;</expr_stmt></while>
	}</block></then> <else pos:line="1958" pos:column="11">else <block pos:line="1958" pos:column="16">{
		<expr_stmt><expr><op:operator pos:line="1959" pos:column="17">++</op:operator><name pos:line="1959" pos:column="19">pos</name></expr>;</expr_stmt>
	}</block></else></if></else></if></else></if></else></if></else></if></else></if>
	<return pos:line="1961" pos:column="9">return <expr><name pos:line="1961" pos:column="16">pos</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1964" pos:column="1">bool</name></type> <name pos:line="1964" pos:column="6">IsLineEndChar</name><parameter_list pos:line="1964" pos:column="19">(<param><decl><type><name pos:line="1964" pos:column="20">char</name></type> <name pos:line="1964" pos:column="25">c</name></decl></param>)</parameter_list> <block pos:line="1964" pos:column="28">{
	<return pos:line="1965" pos:column="9">return <expr><op:operator pos:line="1965" pos:column="16">(</op:operator><name pos:line="1965" pos:column="17">c</name> <op:operator pos:line="1965" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="1965" pos:column="22">'\n'</lit:literal> <op:operator pos:line="1965" pos:column="27">||</op:operator> <name pos:line="1965" pos:column="30">c</name> <op:operator pos:line="1965" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="1965" pos:column="35">'\r'</lit:literal><op:operator pos:line="1965" pos:column="39">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="1968" pos:column="1">int</name></type> <name><name pos:line="1968" pos:column="5">Document</name><op:operator pos:line="1968" pos:column="13">::</op:operator><name pos:line="1968" pos:column="15">ExtendStyleRange</name></name><parameter_list pos:line="1968" pos:column="31">(<param><decl><type><name pos:line="1968" pos:column="32">int</name></type> <name pos:line="1968" pos:column="36">pos</name></decl></param>, <param><decl><type><name pos:line="1968" pos:column="41">int</name></type> <name pos:line="1968" pos:column="45">delta</name></decl></param>, <param><decl><type><name pos:line="1968" pos:column="52">bool</name></type> <name pos:line="1968" pos:column="57">singleLine</name></decl></param>)</parameter_list> <block pos:line="1968" pos:column="69">{
	<decl_stmt><decl><type><name pos:line="1969" pos:column="9">int</name></type> <name pos:line="1969" pos:column="13">sStart</name> <init pos:line="1969" pos:column="20">= <expr><call><name><name pos:line="1969" pos:column="22">cb</name><op:operator pos:line="1969" pos:column="24">.</op:operator><name pos:line="1969" pos:column="25">StyleAt</name></name><argument_list pos:line="1969" pos:column="32">(<argument><expr><name pos:line="1969" pos:column="33">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1970" pos:column="9">if <condition pos:line="1970" pos:column="12">(<expr><name pos:line="1970" pos:column="13">delta</name> <op:operator pos:line="1970" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="1970" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="1970" pos:column="23"> <block pos:line="1970" pos:column="24">{
		<while pos:line="1971" pos:column="17">while <condition pos:line="1971" pos:column="23">(<expr><name pos:line="1971" pos:column="24">pos</name> <op:operator pos:line="1971" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="1971" pos:column="30">0</lit:literal> <op:operator pos:line="1971" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="1971" pos:column="35">(</op:operator><call><name><name pos:line="1971" pos:column="36">cb</name><op:operator pos:line="1971" pos:column="38">.</op:operator><name pos:line="1971" pos:column="39">StyleAt</name></name><argument_list pos:line="1971" pos:column="46">(<argument><expr><name pos:line="1971" pos:column="47">pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="1971" pos:column="52">==</op:operator> <name pos:line="1971" pos:column="55">sStart</name><op:operator pos:line="1971" pos:column="61">)</op:operator> <op:operator pos:line="1971" pos:column="63">&amp;&amp;</op:operator> <op:operator pos:line="1971" pos:column="66">(</op:operator><op:operator pos:line="1971" pos:column="67">!</op:operator><name pos:line="1971" pos:column="68">singleLine</name> <op:operator pos:line="1971" pos:column="79">||</op:operator> <op:operator pos:line="1971" pos:column="82">!</op:operator><call><name pos:line="1971" pos:column="83">IsLineEndChar</name><argument_list pos:line="1971" pos:column="96">(<argument><expr><call><name><name pos:line="1971" pos:column="97">cb</name><op:operator pos:line="1971" pos:column="99">.</op:operator><name pos:line="1971" pos:column="100">CharAt</name></name><argument_list pos:line="1971" pos:column="106">(<argument><expr><name pos:line="1971" pos:column="107">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1971" pos:column="112">)</op:operator></expr>)</condition>
			<expr_stmt><expr><name pos:line="1972" pos:column="25">pos</name><op:operator pos:line="1972" pos:column="28">--</op:operator></expr>;</expr_stmt></while>
		<expr_stmt><expr><name pos:line="1973" pos:column="17">pos</name><op:operator pos:line="1973" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></then> <else pos:line="1974" pos:column="11">else <block pos:line="1974" pos:column="16">{
		<while pos:line="1975" pos:column="17">while <condition pos:line="1975" pos:column="23">(<expr><name pos:line="1975" pos:column="24">pos</name> <op:operator pos:line="1975" pos:column="28">&lt;</op:operator> <op:operator pos:line="1975" pos:column="30">(</op:operator><call><name pos:line="1975" pos:column="31">Length</name><argument_list pos:line="1975" pos:column="37">()</argument_list></call><op:operator pos:line="1975" pos:column="39">)</op:operator> <op:operator pos:line="1975" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="1975" pos:column="44">(</op:operator><call><name><name pos:line="1975" pos:column="45">cb</name><op:operator pos:line="1975" pos:column="47">.</op:operator><name pos:line="1975" pos:column="48">StyleAt</name></name><argument_list pos:line="1975" pos:column="55">(<argument><expr><name pos:line="1975" pos:column="56">pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="1975" pos:column="61">==</op:operator> <name pos:line="1975" pos:column="64">sStart</name><op:operator pos:line="1975" pos:column="70">)</op:operator> <op:operator pos:line="1975" pos:column="72">&amp;&amp;</op:operator> <op:operator pos:line="1975" pos:column="75">(</op:operator><op:operator pos:line="1975" pos:column="76">!</op:operator><name pos:line="1975" pos:column="77">singleLine</name> <op:operator pos:line="1975" pos:column="88">||</op:operator> <op:operator pos:line="1975" pos:column="91">!</op:operator><call><name pos:line="1975" pos:column="92">IsLineEndChar</name><argument_list pos:line="1975" pos:column="105">(<argument><expr><call><name><name pos:line="1975" pos:column="106">cb</name><op:operator pos:line="1975" pos:column="108">.</op:operator><name pos:line="1975" pos:column="109">CharAt</name></name><argument_list pos:line="1975" pos:column="115">(<argument><expr><name pos:line="1975" pos:column="116">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="1975" pos:column="121">)</op:operator></expr>)</condition>
			<expr_stmt><expr><name pos:line="1976" pos:column="25">pos</name><op:operator pos:line="1976" pos:column="28">++</op:operator></expr>;</expr_stmt></while>
	}</block></else></if>
	<return pos:line="1978" pos:column="9">return <expr><name pos:line="1978" pos:column="16">pos</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="1981" pos:column="1">static</specifier> <name pos:line="1981" pos:column="8">char</name></type> <name pos:line="1981" pos:column="13">BraceOpposite</name><parameter_list pos:line="1981" pos:column="26">(<param><decl><type><name pos:line="1981" pos:column="27">char</name></type> <name pos:line="1981" pos:column="32">ch</name></decl></param>)</parameter_list> <block pos:line="1981" pos:column="36">{
	<switch pos:line="1982" pos:column="9">switch <condition pos:line="1982" pos:column="16">(<expr><name pos:line="1982" pos:column="17">ch</name></expr>)</condition> <block pos:line="1982" pos:column="21">{
	<case pos:line="1983" pos:column="9">case <expr><lit:literal type="char" pos:line="1983" pos:column="14">'('</lit:literal></expr>:
		<return pos:line="1984" pos:column="17">return <expr><lit:literal type="char" pos:line="1984" pos:column="24">')'</lit:literal></expr>;</return>
	</case><case pos:line="1985" pos:column="9">case <expr><lit:literal type="char" pos:line="1985" pos:column="14">')'</lit:literal></expr>:
		<return pos:line="1986" pos:column="17">return <expr><lit:literal type="char" pos:line="1986" pos:column="24">'('</lit:literal></expr>;</return>
	</case><case pos:line="1987" pos:column="9">case <expr><lit:literal type="char" pos:line="1987" pos:column="14">'['</lit:literal></expr>:
		<return pos:line="1988" pos:column="17">return <expr><lit:literal type="char" pos:line="1988" pos:column="24">']'</lit:literal></expr>;</return>
	</case><case pos:line="1989" pos:column="9">case <expr><lit:literal type="char" pos:line="1989" pos:column="14">']'</lit:literal></expr>:
		<return pos:line="1990" pos:column="17">return <expr><lit:literal type="char" pos:line="1990" pos:column="24">'['</lit:literal></expr>;</return>
	</case><case pos:line="1991" pos:column="9">case <expr><lit:literal type="char" pos:line="1991" pos:column="14">'{'</lit:literal></expr>:
		<return pos:line="1992" pos:column="17">return <expr><lit:literal type="char" pos:line="1992" pos:column="24">'}'</lit:literal></expr>;</return>
	</case><case pos:line="1993" pos:column="9">case <expr><lit:literal type="char" pos:line="1993" pos:column="14">'}'</lit:literal></expr>:
		<return pos:line="1994" pos:column="17">return <expr><lit:literal type="char" pos:line="1994" pos:column="24">'{'</lit:literal></expr>;</return>
	</case><case pos:line="1995" pos:column="9">case <expr><lit:literal type="char" pos:line="1995" pos:column="14">'&lt;'</lit:literal></expr>:
		<return pos:line="1996" pos:column="17">return <expr><lit:literal type="char" pos:line="1996" pos:column="24">'&gt;'</lit:literal></expr>;</return>
	</case><case pos:line="1997" pos:column="9">case <expr><lit:literal type="char" pos:line="1997" pos:column="14">'&gt;'</lit:literal></expr>:
		<return pos:line="1998" pos:column="17">return <expr><lit:literal type="char" pos:line="1998" pos:column="24">'&lt;'</lit:literal></expr>;</return>
	</case><default pos:line="1999" pos:column="9">default:
		<return pos:line="2000" pos:column="17">return <expr><lit:literal type="char" pos:line="2000" pos:column="24">'\0'</lit:literal></expr>;</return>
	</default>}</block></switch>
}</block></function>

<comment type="line" pos:line="2004" pos:column="1">// TODO: should be able to extend styled region to find matching brace</comment>
<function><type><name pos:line="2005" pos:column="1">int</name></type> <name><name pos:line="2005" pos:column="5">Document</name><op:operator pos:line="2005" pos:column="13">::</op:operator><name pos:line="2005" pos:column="15">BraceMatch</name></name><parameter_list pos:line="2005" pos:column="25">(<param><decl><type><name pos:line="2005" pos:column="26">int</name></type> <name pos:line="2005" pos:column="30">position</name></decl></param>, <param><decl><type><name pos:line="2005" pos:column="40">int</name></type></decl></param> <comment type="block" pos:line="2005" pos:column="44">/*maxReStyle*/</comment>)</parameter_list> <block pos:line="2005" pos:column="60">{
	<decl_stmt><decl><type><name pos:line="2006" pos:column="9">char</name></type> <name pos:line="2006" pos:column="14">chBrace</name> <init pos:line="2006" pos:column="22">= <expr><call><name pos:line="2006" pos:column="24">CharAt</name><argument_list pos:line="2006" pos:column="30">(<argument><expr><name pos:line="2006" pos:column="31">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2007" pos:column="9">char</name></type> <name pos:line="2007" pos:column="14">chSeek</name> <init pos:line="2007" pos:column="21">= <expr><call><name pos:line="2007" pos:column="23">BraceOpposite</name><argument_list pos:line="2007" pos:column="36">(<argument><expr><name pos:line="2007" pos:column="37">chBrace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2008" pos:column="9">if <condition pos:line="2008" pos:column="12">(<expr><name pos:line="2008" pos:column="13">chSeek</name> <op:operator pos:line="2008" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="2008" pos:column="23">'\0'</lit:literal></expr>)</condition><then pos:line="2008" pos:column="28">
		<return pos:line="2009" pos:column="17">return <expr><op:operator pos:line="2009" pos:column="24">-</op:operator> <lit:literal type="number" pos:line="2009" pos:column="26">1</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="2010" pos:column="9">char</name></type> <name pos:line="2010" pos:column="14">styBrace</name> <init pos:line="2010" pos:column="23">= <expr><call><name><name pos:line="2010" pos:column="25">static_cast</name><argument_list pos:line="2010" pos:column="36">&lt;<argument><expr><name pos:line="2010" pos:column="37">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2010" pos:column="42">(<argument><expr><call><name pos:line="2010" pos:column="43">StyleAt</name><argument_list pos:line="2010" pos:column="50">(<argument><expr><name pos:line="2010" pos:column="51">position</name></expr></argument>)</argument_list></call> <op:operator pos:line="2010" pos:column="61">&amp;</op:operator> <name pos:line="2010" pos:column="63">stylingBitsMask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2011" pos:column="9">int</name></type> <name pos:line="2011" pos:column="13">direction</name> <init pos:line="2011" pos:column="23">= <expr><op:operator pos:line="2011" pos:column="25">-</op:operator><lit:literal type="number" pos:line="2011" pos:column="26">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="2012" pos:column="9">if <condition pos:line="2012" pos:column="12">(<expr><name pos:line="2012" pos:column="13">chBrace</name> <op:operator pos:line="2012" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="2012" pos:column="24">'('</lit:literal> <op:operator pos:line="2012" pos:column="28">||</op:operator> <name pos:line="2012" pos:column="31">chBrace</name> <op:operator pos:line="2012" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="2012" pos:column="42">'['</lit:literal> <op:operator pos:line="2012" pos:column="46">||</op:operator> <name pos:line="2012" pos:column="49">chBrace</name> <op:operator pos:line="2012" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="2012" pos:column="60">'{'</lit:literal> <op:operator pos:line="2012" pos:column="64">||</op:operator> <name pos:line="2012" pos:column="67">chBrace</name> <op:operator pos:line="2012" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="2012" pos:column="78">'&lt;'</lit:literal></expr>)</condition><then pos:line="2012" pos:column="82">
		<expr_stmt><expr><name pos:line="2013" pos:column="17">direction</name> <op:operator pos:line="2013" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="2013" pos:column="29">1</lit:literal></expr>;</expr_stmt></then></if>
	<decl_stmt><decl><type><name pos:line="2014" pos:column="9">int</name></type> <name pos:line="2014" pos:column="13">depth</name> <init pos:line="2014" pos:column="19">= <expr><lit:literal type="number" pos:line="2014" pos:column="21">1</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2015" pos:column="9">position</name> <op:operator pos:line="2015" pos:column="18">=</op:operator> <call><name pos:line="2015" pos:column="20">NextPosition</name><argument_list pos:line="2015" pos:column="32">(<argument><expr><name pos:line="2015" pos:column="33">position</name></expr></argument>, <argument><expr><name pos:line="2015" pos:column="43">direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while pos:line="2016" pos:column="9">while <condition pos:line="2016" pos:column="15">(<expr><op:operator pos:line="2016" pos:column="16">(</op:operator><name pos:line="2016" pos:column="17">position</name> <op:operator pos:line="2016" pos:column="26">&gt;=</op:operator> <lit:literal type="number" pos:line="2016" pos:column="29">0</lit:literal><op:operator pos:line="2016" pos:column="30">)</op:operator> <op:operator pos:line="2016" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="2016" pos:column="35">(</op:operator><name pos:line="2016" pos:column="36">position</name> <op:operator pos:line="2016" pos:column="45">&lt;</op:operator> <call><name pos:line="2016" pos:column="47">Length</name><argument_list pos:line="2016" pos:column="53">()</argument_list></call><op:operator pos:line="2016" pos:column="55">)</op:operator></expr>)</condition> <block pos:line="2016" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="2017" pos:column="17">char</name></type> <name pos:line="2017" pos:column="22">chAtPos</name> <init pos:line="2017" pos:column="30">= <expr><call><name pos:line="2017" pos:column="32">CharAt</name><argument_list pos:line="2017" pos:column="38">(<argument><expr><name pos:line="2017" pos:column="39">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2018" pos:column="17">char</name></type> <name pos:line="2018" pos:column="22">styAtPos</name> <init pos:line="2018" pos:column="31">= <expr><call><name><name pos:line="2018" pos:column="33">static_cast</name><argument_list pos:line="2018" pos:column="44">&lt;<argument><expr><name pos:line="2018" pos:column="45">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2018" pos:column="50">(<argument><expr><call><name pos:line="2018" pos:column="51">StyleAt</name><argument_list pos:line="2018" pos:column="58">(<argument><expr><name pos:line="2018" pos:column="59">position</name></expr></argument>)</argument_list></call> <op:operator pos:line="2018" pos:column="69">&amp;</op:operator> <name pos:line="2018" pos:column="71">stylingBitsMask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2019" pos:column="17">if <condition pos:line="2019" pos:column="20">(<expr><op:operator pos:line="2019" pos:column="21">(</op:operator><name pos:line="2019" pos:column="22">position</name> <op:operator pos:line="2019" pos:column="31">&gt;</op:operator> <call><name pos:line="2019" pos:column="33">GetEndStyled</name><argument_list pos:line="2019" pos:column="45">()</argument_list></call><op:operator pos:line="2019" pos:column="47">)</op:operator> <op:operator pos:line="2019" pos:column="49">||</op:operator> <op:operator pos:line="2019" pos:column="52">(</op:operator><name pos:line="2019" pos:column="53">styAtPos</name> <op:operator pos:line="2019" pos:column="62">==</op:operator> <name pos:line="2019" pos:column="65">styBrace</name><op:operator pos:line="2019" pos:column="73">)</op:operator></expr>)</condition><then pos:line="2019" pos:column="75"> <block pos:line="2019" pos:column="76">{
			<if pos:line="2020" pos:column="25">if <condition pos:line="2020" pos:column="28">(<expr><name pos:line="2020" pos:column="29">chAtPos</name> <op:operator pos:line="2020" pos:column="37">==</op:operator> <name pos:line="2020" pos:column="40">chBrace</name></expr>)</condition><then pos:line="2020" pos:column="48">
				<expr_stmt><expr><name pos:line="2021" pos:column="33">depth</name><op:operator pos:line="2021" pos:column="38">++</op:operator></expr>;</expr_stmt></then></if>
			<if pos:line="2022" pos:column="25">if <condition pos:line="2022" pos:column="28">(<expr><name pos:line="2022" pos:column="29">chAtPos</name> <op:operator pos:line="2022" pos:column="37">==</op:operator> <name pos:line="2022" pos:column="40">chSeek</name></expr>)</condition><then pos:line="2022" pos:column="47">
				<expr_stmt><expr><name pos:line="2023" pos:column="33">depth</name><op:operator pos:line="2023" pos:column="38">--</op:operator></expr>;</expr_stmt></then></if>
			<if pos:line="2024" pos:column="25">if <condition pos:line="2024" pos:column="28">(<expr><name pos:line="2024" pos:column="29">depth</name> <op:operator pos:line="2024" pos:column="35">==</op:operator> <lit:literal type="number" pos:line="2024" pos:column="38">0</lit:literal></expr>)</condition><then pos:line="2024" pos:column="40">
				<return pos:line="2025" pos:column="33">return <expr><name pos:line="2025" pos:column="40">position</name></expr>;</return></then></if>
		}</block></then></if>
		<decl_stmt><decl><type><name pos:line="2027" pos:column="17">int</name></type> <name pos:line="2027" pos:column="21">positionBeforeMove</name> <init pos:line="2027" pos:column="40">= <expr><name pos:line="2027" pos:column="42">position</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2028" pos:column="17">position</name> <op:operator pos:line="2028" pos:column="26">=</op:operator> <call><name pos:line="2028" pos:column="28">NextPosition</name><argument_list pos:line="2028" pos:column="40">(<argument><expr><name pos:line="2028" pos:column="41">position</name></expr></argument>, <argument><expr><name pos:line="2028" pos:column="51">direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="2029" pos:column="17">if <condition pos:line="2029" pos:column="20">(<expr><name pos:line="2029" pos:column="21">position</name> <op:operator pos:line="2029" pos:column="30">==</op:operator> <name pos:line="2029" pos:column="33">positionBeforeMove</name></expr>)</condition><then pos:line="2029" pos:column="52">
			<break pos:line="2030" pos:column="25">break;</break></then></if>
	}</block></while>
	<return pos:line="2032" pos:column="9">return <expr><op:operator pos:line="2032" pos:column="16">-</op:operator> <lit:literal type="number" pos:line="2032" pos:column="18">1</lit:literal></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="2035" pos:column="1">/**
 * Implementation of RegexSearchBase for the default built-in regular expression engine
 */</comment>
<class pos:line="2038" pos:column="1">class <name pos:line="2038" pos:column="7">BuiltinRegex</name> <super pos:line="2038" pos:column="20">: <specifier pos:line="2038" pos:column="22">public</specifier> <name pos:line="2038" pos:column="29">RegexSearchBase</name></super> <block pos:line="2038" pos:column="45">{<private type="default" pos:line="2038" pos:column="46">
</private><public pos:line="2039" pos:column="1">public:
	<constructor><name pos:line="2040" pos:column="9">BuiltinRegex</name><parameter_list pos:line="2040" pos:column="21">(<param><decl><type><name pos:line="2040" pos:column="22">CharClassify</name> <type:modifier pos:line="2040" pos:column="35">*</type:modifier></type><name pos:line="2040" pos:column="36">charClassTable</name></decl></param>)</parameter_list> <member_list pos:line="2040" pos:column="52">: <call><name pos:line="2040" pos:column="54">search</name><argument_list pos:line="2040" pos:column="60">(<argument><expr><name pos:line="2040" pos:column="61">charClassTable</name></expr></argument>)</argument_list></call><op:operator pos:line="2040" pos:column="76">,</op:operator> <call><name pos:line="2040" pos:column="78">substituted</name><argument_list pos:line="2040" pos:column="89">(<argument><expr><name pos:line="2040" pos:column="90">NULL</name></expr></argument>)</argument_list></call> </member_list><block pos:line="2040" pos:column="96">{}</block></constructor>

	<destructor><specifier pos:line="2042" pos:column="9">virtual</specifier> <name pos:line="2042" pos:column="17">~<name pos:line="2042" pos:column="18">BuiltinRegex</name></name><parameter_list pos:line="2042" pos:column="30">()</parameter_list> <block pos:line="2042" pos:column="33">{
		<expr_stmt><expr><op:operator pos:line="2043" pos:column="17">delete</op:operator> <name pos:line="2043" pos:column="24">substituted</name></expr>;</expr_stmt>
	}</block></destructor>

	<function_decl><type><specifier pos:line="2046" pos:column="9">virtual</specifier> <name pos:line="2046" pos:column="17">long</name></type> <name pos:line="2046" pos:column="22">FindText</name><parameter_list pos:line="2046" pos:column="30">(<param><decl><type><name pos:line="2046" pos:column="31">Document</name> <type:modifier pos:line="2046" pos:column="40">*</type:modifier></type><name pos:line="2046" pos:column="41">doc</name></decl></param>, <param><decl><type><name pos:line="2046" pos:column="46">int</name></type> <name pos:line="2046" pos:column="50">minPos</name></decl></param>, <param><decl><type><name pos:line="2046" pos:column="58">int</name></type> <name pos:line="2046" pos:column="62">maxPos</name></decl></param>, <param><decl><type><specifier pos:line="2046" pos:column="70">const</specifier> <name pos:line="2046" pos:column="76">char</name> <type:modifier pos:line="2046" pos:column="81">*</type:modifier></type><name pos:line="2046" pos:column="82">s</name></decl></param>,
                        <param><decl><type><name pos:line="2047" pos:column="25">bool</name></type> <name pos:line="2047" pos:column="30">caseSensitive</name></decl></param>, <param><decl><type><name pos:line="2047" pos:column="45">bool</name></type> <name pos:line="2047" pos:column="50">word</name></decl></param>, <param><decl><type><name pos:line="2047" pos:column="56">bool</name></type> <name pos:line="2047" pos:column="61">wordStart</name></decl></param>, <param><decl><type><name pos:line="2047" pos:column="72">int</name></type> <name pos:line="2047" pos:column="76">flags</name></decl></param>,
                        <param><decl><type><name pos:line="2048" pos:column="25">int</name> <type:modifier pos:line="2048" pos:column="29">*</type:modifier></type><name pos:line="2048" pos:column="30">length</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><specifier pos:line="2050" pos:column="9">virtual</specifier> <specifier pos:line="2050" pos:column="17">const</specifier> <name pos:line="2050" pos:column="23">char</name> <type:modifier pos:line="2050" pos:column="28">*</type:modifier></type><name pos:line="2050" pos:column="29">SubstituteByPosition</name><parameter_list pos:line="2050" pos:column="49">(<param><decl><type><name pos:line="2050" pos:column="50">Document</name> <type:modifier pos:line="2050" pos:column="59">*</type:modifier></type><name pos:line="2050" pos:column="60">doc</name></decl></param>, <param><decl><type><specifier pos:line="2050" pos:column="65">const</specifier> <name pos:line="2050" pos:column="71">char</name> <type:modifier pos:line="2050" pos:column="76">*</type:modifier></type><name pos:line="2050" pos:column="77">text</name></decl></param>, <param><decl><type><name pos:line="2050" pos:column="83">int</name> <type:modifier pos:line="2050" pos:column="87">*</type:modifier></type><name pos:line="2050" pos:column="88">length</name></decl></param>)</parameter_list>;</function_decl>

</public><private pos:line="2052" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="2053" pos:column="9">RESearch</name></type> <name pos:line="2053" pos:column="18">search</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2054" pos:column="9">char</name> <type:modifier pos:line="2054" pos:column="14">*</type:modifier></type><name pos:line="2054" pos:column="15">substituted</name></decl>;</decl_stmt>
</private>}</block>;</class>

<comment type="line" pos:line="2057" pos:column="1">// Define a way for the Regular Expression code to access the document</comment>
<class pos:line="2058" pos:column="1">class <name pos:line="2058" pos:column="7">DocumentIndexer</name> <super pos:line="2058" pos:column="23">: <specifier pos:line="2058" pos:column="25">public</specifier> <name pos:line="2058" pos:column="32">CharacterIndexer</name></super> <block pos:line="2058" pos:column="49">{<private type="default" pos:line="2058" pos:column="50">
	<decl_stmt><decl><type><name pos:line="2059" pos:column="9">Document</name> <type:modifier pos:line="2059" pos:column="18">*</type:modifier></type><name pos:line="2059" pos:column="19">pdoc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2060" pos:column="9">int</name></type> <name pos:line="2060" pos:column="13">end</name></decl>;</decl_stmt>
</private><public pos:line="2061" pos:column="1">public:
	<constructor><name pos:line="2062" pos:column="9">DocumentIndexer</name><parameter_list pos:line="2062" pos:column="24">(<param><decl><type><name pos:line="2062" pos:column="25">Document</name> <type:modifier pos:line="2062" pos:column="34">*</type:modifier></type><name pos:line="2062" pos:column="35">pdoc_</name></decl></param>, <param><decl><type><name pos:line="2062" pos:column="42">int</name></type> <name pos:line="2062" pos:column="46">end_</name></decl></param>)</parameter_list> <member_list pos:line="2062" pos:column="52">:
		<call><name pos:line="2063" pos:column="17">pdoc</name><argument_list pos:line="2063" pos:column="21">(<argument><expr><name pos:line="2063" pos:column="22">pdoc_</name></expr></argument>)</argument_list></call><op:operator pos:line="2063" pos:column="28">,</op:operator> <call><name pos:line="2063" pos:column="30">end</name><argument_list pos:line="2063" pos:column="33">(<argument><expr><name pos:line="2063" pos:column="34">end_</name></expr></argument>)</argument_list></call> </member_list><block pos:line="2063" pos:column="40">{
	}</block></constructor>

	<destructor><specifier pos:line="2066" pos:column="9">virtual</specifier> <name pos:line="2066" pos:column="17">~<name pos:line="2066" pos:column="18">DocumentIndexer</name></name><parameter_list pos:line="2066" pos:column="33">()</parameter_list> <block pos:line="2066" pos:column="36">{
	}</block></destructor>

	<function><type><specifier pos:line="2069" pos:column="9">virtual</specifier> <name pos:line="2069" pos:column="17">char</name></type> <name pos:line="2069" pos:column="22">CharAt</name><parameter_list pos:line="2069" pos:column="28">(<param><decl><type><name pos:line="2069" pos:column="29">int</name></type> <name pos:line="2069" pos:column="33">index</name></decl></param>)</parameter_list> <block pos:line="2069" pos:column="40">{
		<if pos:line="2070" pos:column="17">if <condition pos:line="2070" pos:column="20">(<expr><name><name pos:line="2070" pos:column="21">index</name> <argument_list pos:line="2070" pos:column="27">&lt; <argument><expr><lit:literal type="number" pos:line="2070" pos:column="29">0</lit:literal> <op:operator pos:line="2070" pos:column="31">||</op:operator> <name pos:line="2070" pos:column="34">index</name></expr></argument> &gt;</argument_list></name><op:operator pos:line="2070" pos:column="41">=</op:operator> <name pos:line="2070" pos:column="43">end</name></expr>)</condition><then pos:line="2070" pos:column="47">
			<return pos:line="2071" pos:column="25">return <expr><lit:literal type="number" pos:line="2071" pos:column="32">0</lit:literal></expr>;</return></then>
		<else pos:line="2072" pos:column="17">else
			<return pos:line="2073" pos:column="25">return <expr><call><name><name pos:line="2073" pos:column="32">pdoc</name><op:operator pos:line="2073" pos:column="36">-&gt;</op:operator><name pos:line="2073" pos:column="38">CharAt</name></name><argument_list pos:line="2073" pos:column="44">(<argument><expr><name pos:line="2073" pos:column="45">index</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
	}</block></function>
</public>}</block>;</class>

<function><type><name pos:line="2077" pos:column="1">long</name></type> <name><name pos:line="2077" pos:column="6">BuiltinRegex</name><op:operator pos:line="2077" pos:column="18">::</op:operator><name pos:line="2077" pos:column="20">FindText</name></name><parameter_list pos:line="2077" pos:column="28">(<param><decl><type><name pos:line="2077" pos:column="29">Document</name> <type:modifier pos:line="2077" pos:column="38">*</type:modifier></type><name pos:line="2077" pos:column="39">doc</name></decl></param>, <param><decl><type><name pos:line="2077" pos:column="44">int</name></type> <name pos:line="2077" pos:column="48">minPos</name></decl></param>, <param><decl><type><name pos:line="2077" pos:column="56">int</name></type> <name pos:line="2077" pos:column="60">maxPos</name></decl></param>, <param><decl><type><specifier pos:line="2077" pos:column="68">const</specifier> <name pos:line="2077" pos:column="74">char</name> <type:modifier pos:line="2077" pos:column="79">*</type:modifier></type><name pos:line="2077" pos:column="80">s</name></decl></param>,
                        <param><decl><type><name pos:line="2078" pos:column="25">bool</name></type> <name pos:line="2078" pos:column="30">caseSensitive</name></decl></param>, <param><decl><type><name pos:line="2078" pos:column="45">bool</name></type></decl></param>, <param><decl><type><name pos:line="2078" pos:column="51">bool</name></type></decl></param>, <param><decl><type><name pos:line="2078" pos:column="57">int</name></type> <name pos:line="2078" pos:column="61">flags</name></decl></param>,
                        <param><decl><type><name pos:line="2079" pos:column="25">int</name> <type:modifier pos:line="2079" pos:column="29">*</type:modifier></type><name pos:line="2079" pos:column="30">length</name></decl></param>)</parameter_list> <block pos:line="2079" pos:column="38">{
	<decl_stmt><decl><type><name pos:line="2080" pos:column="9">bool</name></type> <name pos:line="2080" pos:column="14">posix</name> <init pos:line="2080" pos:column="20">= <expr><op:operator pos:line="2080" pos:column="22">(</op:operator><name pos:line="2080" pos:column="23">flags</name> <op:operator pos:line="2080" pos:column="29">&amp;</op:operator> <name pos:line="2080" pos:column="31">SCFIND_POSIX</name><op:operator pos:line="2080" pos:column="43">)</op:operator> <op:operator pos:line="2080" pos:column="45">!=</op:operator> <lit:literal type="number" pos:line="2080" pos:column="48">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2081" pos:column="9">int</name></type> <name pos:line="2081" pos:column="13">increment</name> <init pos:line="2081" pos:column="23">= <expr><op:operator pos:line="2081" pos:column="25">(</op:operator><name pos:line="2081" pos:column="26">minPos</name> <op:operator pos:line="2081" pos:column="33">&lt;=</op:operator> <name pos:line="2081" pos:column="36">maxPos</name><op:operator pos:line="2081" pos:column="42">)</op:operator> <op:operator pos:line="2081" pos:column="44">?</op:operator> <lit:literal type="number" pos:line="2081" pos:column="46">1</lit:literal> <op:operator pos:line="2081" pos:column="48">:</op:operator> <op:operator pos:line="2081" pos:column="50">-</op:operator><lit:literal type="number" pos:line="2081" pos:column="51">1</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="2083" pos:column="9">int</name></type> <name pos:line="2083" pos:column="13">startPos</name> <init pos:line="2083" pos:column="22">= <expr><name pos:line="2083" pos:column="24">minPos</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2084" pos:column="9">int</name></type> <name pos:line="2084" pos:column="13">endPos</name> <init pos:line="2084" pos:column="20">= <expr><name pos:line="2084" pos:column="22">maxPos</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="2086" pos:column="9">// Range endpoints should not be inside DBCS characters, but just in case, move them.</comment>
	<expr_stmt><expr><name pos:line="2087" pos:column="9">startPos</name> <op:operator pos:line="2087" pos:column="18">=</op:operator> <call><name><name pos:line="2087" pos:column="20">doc</name><op:operator pos:line="2087" pos:column="23">-&gt;</op:operator><name pos:line="2087" pos:column="25">MovePositionOutsideChar</name></name><argument_list pos:line="2087" pos:column="48">(<argument><expr><name pos:line="2087" pos:column="49">startPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2087" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2087" pos:column="62">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2088" pos:column="9">endPos</name> <op:operator pos:line="2088" pos:column="16">=</op:operator> <call><name><name pos:line="2088" pos:column="18">doc</name><op:operator pos:line="2088" pos:column="21">-&gt;</op:operator><name pos:line="2088" pos:column="23">MovePositionOutsideChar</name></name><argument_list pos:line="2088" pos:column="46">(<argument><expr><name pos:line="2088" pos:column="47">endPos</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2088" pos:column="55">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2088" pos:column="58">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier pos:line="2090" pos:column="9">const</specifier> <name pos:line="2090" pos:column="15">char</name> <type:modifier pos:line="2090" pos:column="20">*</type:modifier></type><name pos:line="2090" pos:column="21">errmsg</name> <init pos:line="2090" pos:column="28">= <expr><call><name><name pos:line="2090" pos:column="30">search</name><op:operator pos:line="2090" pos:column="36">.</op:operator><name pos:line="2090" pos:column="37">Compile</name></name><argument_list pos:line="2090" pos:column="44">(<argument><expr><name pos:line="2090" pos:column="45">s</name></expr></argument>, <argument><expr><op:operator pos:line="2090" pos:column="48">*</op:operator><name pos:line="2090" pos:column="49">length</name></expr></argument>, <argument><expr><name pos:line="2090" pos:column="57">caseSensitive</name></expr></argument>, <argument><expr><name pos:line="2090" pos:column="72">posix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2091" pos:column="9">if <condition pos:line="2091" pos:column="12">(<expr><name pos:line="2091" pos:column="13">errmsg</name></expr>)</condition><then pos:line="2091" pos:column="20"> <block pos:line="2091" pos:column="21">{
		<return pos:line="2092" pos:column="17">return <expr><op:operator pos:line="2092" pos:column="24">-</op:operator><lit:literal type="number" pos:line="2092" pos:column="25">1</lit:literal></expr>;</return>
	}</block></then></if>
	<comment type="line" pos:line="2094" pos:column="9">// Find a variable in a property file: \$(\([A-Za-z0-9_.]+\))</comment>
	<comment type="line" pos:line="2095" pos:column="9">// Replace first '.' with '-' in each property file variable reference:</comment>
	<comment type="line" pos:line="2096" pos:column="9">//     Search: \$(\([A-Za-z0-9_-]+\)\.\([A-Za-z0-9_.]+\))</comment>
	<comment type="line" pos:line="2097" pos:column="9">//     Replace: $(\1-\2)</comment>
	<decl_stmt><decl><type><name pos:line="2098" pos:column="9">int</name></type> <name pos:line="2098" pos:column="13">lineRangeStart</name> <init pos:line="2098" pos:column="28">= <expr><call><name><name pos:line="2098" pos:column="30">doc</name><op:operator pos:line="2098" pos:column="33">-&gt;</op:operator><name pos:line="2098" pos:column="35">LineFromPosition</name></name><argument_list pos:line="2098" pos:column="51">(<argument><expr><name pos:line="2098" pos:column="52">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2099" pos:column="9">int</name></type> <name pos:line="2099" pos:column="13">lineRangeEnd</name> <init pos:line="2099" pos:column="26">= <expr><call><name><name pos:line="2099" pos:column="28">doc</name><op:operator pos:line="2099" pos:column="31">-&gt;</op:operator><name pos:line="2099" pos:column="33">LineFromPosition</name></name><argument_list pos:line="2099" pos:column="49">(<argument><expr><name pos:line="2099" pos:column="50">endPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2100" pos:column="9">if <condition pos:line="2100" pos:column="12">(<expr><op:operator pos:line="2100" pos:column="13">(</op:operator><name pos:line="2100" pos:column="14">increment</name> <op:operator pos:line="2100" pos:column="24">==</op:operator> <lit:literal type="number" pos:line="2100" pos:column="27">1</lit:literal><op:operator pos:line="2100" pos:column="28">)</op:operator> <op:operator pos:line="2100" pos:column="30">&amp;&amp;</op:operator>
		<op:operator pos:line="2101" pos:column="17">(</op:operator><name pos:line="2101" pos:column="18">startPos</name> <op:operator pos:line="2101" pos:column="27">&gt;=</op:operator> <call><name><name pos:line="2101" pos:column="30">doc</name><op:operator pos:line="2101" pos:column="33">-&gt;</op:operator><name pos:line="2101" pos:column="35">LineEnd</name></name><argument_list pos:line="2101" pos:column="42">(<argument><expr><name pos:line="2101" pos:column="43">lineRangeStart</name></expr></argument>)</argument_list></call><op:operator pos:line="2101" pos:column="58">)</op:operator> <op:operator pos:line="2101" pos:column="60">&amp;&amp;</op:operator>
		<op:operator pos:line="2102" pos:column="17">(</op:operator><name pos:line="2102" pos:column="18">lineRangeStart</name> <op:operator pos:line="2102" pos:column="33">&lt;</op:operator> <name pos:line="2102" pos:column="35">lineRangeEnd</name><op:operator pos:line="2102" pos:column="47">)</op:operator></expr>)</condition><then pos:line="2102" pos:column="49"> <block pos:line="2102" pos:column="50">{
		<comment type="line" pos:line="2103" pos:column="17">// the start position is at end of line or between line end characters.</comment>
		<expr_stmt><expr><name pos:line="2104" pos:column="17">lineRangeStart</name><op:operator pos:line="2104" pos:column="31">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2105" pos:column="17">startPos</name> <op:operator pos:line="2105" pos:column="26">=</op:operator> <call><name><name pos:line="2105" pos:column="28">doc</name><op:operator pos:line="2105" pos:column="31">-&gt;</op:operator><name pos:line="2105" pos:column="33">LineStart</name></name><argument_list pos:line="2105" pos:column="42">(<argument><expr><name pos:line="2105" pos:column="43">lineRangeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="2106" pos:column="11">else <if pos:line="2106" pos:column="16">if <condition pos:line="2106" pos:column="19">(<expr><op:operator pos:line="2106" pos:column="20">(</op:operator><name pos:line="2106" pos:column="21">increment</name> <op:operator pos:line="2106" pos:column="31">==</op:operator> <op:operator pos:line="2106" pos:column="34">-</op:operator><lit:literal type="number" pos:line="2106" pos:column="35">1</lit:literal><op:operator pos:line="2106" pos:column="36">)</op:operator> <op:operator pos:line="2106" pos:column="38">&amp;&amp;</op:operator>
	           <op:operator pos:line="2107" pos:column="20">(</op:operator><name pos:line="2107" pos:column="21">startPos</name> <op:operator pos:line="2107" pos:column="30">&lt;=</op:operator> <call><name><name pos:line="2107" pos:column="33">doc</name><op:operator pos:line="2107" pos:column="36">-&gt;</op:operator><name pos:line="2107" pos:column="38">LineStart</name></name><argument_list pos:line="2107" pos:column="47">(<argument><expr><name pos:line="2107" pos:column="48">lineRangeStart</name></expr></argument>)</argument_list></call><op:operator pos:line="2107" pos:column="63">)</op:operator> <op:operator pos:line="2107" pos:column="65">&amp;&amp;</op:operator>
	           <op:operator pos:line="2108" pos:column="20">(</op:operator><name pos:line="2108" pos:column="21">lineRangeStart</name> <op:operator pos:line="2108" pos:column="36">&gt;</op:operator> <name pos:line="2108" pos:column="38">lineRangeEnd</name><op:operator pos:line="2108" pos:column="50">)</op:operator></expr>)</condition><then pos:line="2108" pos:column="52"> <block pos:line="2108" pos:column="53">{
		<comment type="line" pos:line="2109" pos:column="17">// the start position is at beginning of line.</comment>
		<expr_stmt><expr><name pos:line="2110" pos:column="17">lineRangeStart</name><op:operator pos:line="2110" pos:column="31">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2111" pos:column="17">startPos</name> <op:operator pos:line="2111" pos:column="26">=</op:operator> <call><name><name pos:line="2111" pos:column="28">doc</name><op:operator pos:line="2111" pos:column="31">-&gt;</op:operator><name pos:line="2111" pos:column="33">LineEnd</name></name><argument_list pos:line="2111" pos:column="40">(<argument><expr><name pos:line="2111" pos:column="41">lineRangeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<decl_stmt><decl><type><name pos:line="2113" pos:column="9">int</name></type> <name pos:line="2113" pos:column="13">pos</name> <init pos:line="2113" pos:column="17">= <expr><op:operator pos:line="2113" pos:column="19">-</op:operator><lit:literal type="number" pos:line="2113" pos:column="20">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2114" pos:column="9">int</name></type> <name pos:line="2114" pos:column="13">lenRet</name> <init pos:line="2114" pos:column="20">= <expr><lit:literal type="number" pos:line="2114" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2115" pos:column="9">char</name></type> <name pos:line="2115" pos:column="14">searchEnd</name> <init pos:line="2115" pos:column="24">= <expr><name><name pos:line="2115" pos:column="26">s</name><index pos:line="2115" pos:column="27">[<expr><op:operator pos:line="2115" pos:column="28">*</op:operator><name pos:line="2115" pos:column="29">length</name> <op:operator pos:line="2115" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="2115" pos:column="38">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2116" pos:column="9">char</name></type> <name pos:line="2116" pos:column="14">searchEndPrev</name> <init pos:line="2116" pos:column="28">= <expr><op:operator pos:line="2116" pos:column="30">(</op:operator><op:operator pos:line="2116" pos:column="31">*</op:operator><name pos:line="2116" pos:column="32">length</name> <op:operator pos:line="2116" pos:column="39">&gt;</op:operator> <lit:literal type="number" pos:line="2116" pos:column="41">1</lit:literal><op:operator pos:line="2116" pos:column="42">)</op:operator> <op:operator pos:line="2116" pos:column="44">?</op:operator> <name><name pos:line="2116" pos:column="46">s</name><index pos:line="2116" pos:column="47">[<expr><op:operator pos:line="2116" pos:column="48">*</op:operator><name pos:line="2116" pos:column="49">length</name> <op:operator pos:line="2116" pos:column="56">-</op:operator> <lit:literal type="number" pos:line="2116" pos:column="58">2</lit:literal></expr>]</index></name> <op:operator pos:line="2116" pos:column="61">:</op:operator> <lit:literal type="char" pos:line="2116" pos:column="63">'\0'</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2117" pos:column="9">int</name></type> <name pos:line="2117" pos:column="13">lineRangeBreak</name> <init pos:line="2117" pos:column="28">= <expr><name pos:line="2117" pos:column="30">lineRangeEnd</name> <op:operator pos:line="2117" pos:column="43">+</op:operator> <name pos:line="2117" pos:column="45">increment</name></expr></init></decl>;</decl_stmt>
	<for pos:line="2118" pos:column="9">for (<init><decl><type><name pos:line="2118" pos:column="14">int</name></type> <name pos:line="2118" pos:column="18">line</name> <init pos:line="2118" pos:column="23">= <expr><name pos:line="2118" pos:column="25">lineRangeStart</name></expr></init></decl>;</init> <condition><expr><name pos:line="2118" pos:column="41">line</name> <op:operator pos:line="2118" pos:column="46">!=</op:operator> <name pos:line="2118" pos:column="49">lineRangeBreak</name></expr>;</condition> <incr><expr><name pos:line="2118" pos:column="65">line</name> <op:operator pos:line="2118" pos:column="70">+=</op:operator> <name pos:line="2118" pos:column="73">increment</name></expr></incr>) <block pos:line="2118" pos:column="84">{
		<decl_stmt><decl><type><name pos:line="2119" pos:column="17">int</name></type> <name pos:line="2119" pos:column="21">startOfLine</name> <init pos:line="2119" pos:column="33">= <expr><call><name><name pos:line="2119" pos:column="35">doc</name><op:operator pos:line="2119" pos:column="38">-&gt;</op:operator><name pos:line="2119" pos:column="40">LineStart</name></name><argument_list pos:line="2119" pos:column="49">(<argument><expr><name pos:line="2119" pos:column="50">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2120" pos:column="17">int</name></type> <name pos:line="2120" pos:column="21">endOfLine</name> <init pos:line="2120" pos:column="31">= <expr><call><name><name pos:line="2120" pos:column="33">doc</name><op:operator pos:line="2120" pos:column="36">-&gt;</op:operator><name pos:line="2120" pos:column="38">LineEnd</name></name><argument_list pos:line="2120" pos:column="45">(<argument><expr><name pos:line="2120" pos:column="46">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2121" pos:column="17">if <condition pos:line="2121" pos:column="20">(<expr><name pos:line="2121" pos:column="21">increment</name> <op:operator pos:line="2121" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="2121" pos:column="34">1</lit:literal></expr>)</condition><then pos:line="2121" pos:column="36"> <block pos:line="2121" pos:column="37">{
			<if pos:line="2122" pos:column="25">if <condition pos:line="2122" pos:column="28">(<expr><name pos:line="2122" pos:column="29">line</name> <op:operator pos:line="2122" pos:column="34">==</op:operator> <name pos:line="2122" pos:column="37">lineRangeStart</name></expr>)</condition><then pos:line="2122" pos:column="52"> <block pos:line="2122" pos:column="53">{
				<if pos:line="2123" pos:column="33">if <condition pos:line="2123" pos:column="36">(<expr><op:operator pos:line="2123" pos:column="37">(</op:operator><name pos:line="2123" pos:column="38">startPos</name> <op:operator pos:line="2123" pos:column="47">!=</op:operator> <name pos:line="2123" pos:column="50">startOfLine</name><op:operator pos:line="2123" pos:column="61">)</op:operator> <op:operator pos:line="2123" pos:column="63">&amp;&amp;</op:operator> <op:operator pos:line="2123" pos:column="66">(</op:operator><name><name pos:line="2123" pos:column="67">s</name><index pos:line="2123" pos:column="68">[<expr><lit:literal type="number" pos:line="2123" pos:column="69">0</lit:literal></expr>]</index></name> <op:operator pos:line="2123" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="2123" pos:column="75">'^'</lit:literal><op:operator pos:line="2123" pos:column="78">)</op:operator></expr>)</condition><then pos:line="2123" pos:column="80">
					<continue pos:line="2124" pos:column="41">continue;</continue></then></if>	<comment type="line" pos:line="2124" pos:column="57">// Can't match start of line if start position after start of line</comment>
				<expr_stmt><expr><name pos:line="2125" pos:column="33">startOfLine</name> <op:operator pos:line="2125" pos:column="45">=</op:operator> <name pos:line="2125" pos:column="47">startPos</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="2127" pos:column="25">if <condition pos:line="2127" pos:column="28">(<expr><name pos:line="2127" pos:column="29">line</name> <op:operator pos:line="2127" pos:column="34">==</op:operator> <name pos:line="2127" pos:column="37">lineRangeEnd</name></expr>)</condition><then pos:line="2127" pos:column="50"> <block pos:line="2127" pos:column="51">{
				<if pos:line="2128" pos:column="33">if <condition pos:line="2128" pos:column="36">(<expr><op:operator pos:line="2128" pos:column="37">(</op:operator><name pos:line="2128" pos:column="38">endPos</name> <op:operator pos:line="2128" pos:column="45">!=</op:operator> <name pos:line="2128" pos:column="48">endOfLine</name><op:operator pos:line="2128" pos:column="57">)</op:operator> <op:operator pos:line="2128" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="2128" pos:column="62">(</op:operator><name pos:line="2128" pos:column="63">searchEnd</name> <op:operator pos:line="2128" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="2128" pos:column="76">'$'</lit:literal><op:operator pos:line="2128" pos:column="79">)</op:operator> <op:operator pos:line="2128" pos:column="81">&amp;&amp;</op:operator> <op:operator pos:line="2128" pos:column="84">(</op:operator><name pos:line="2128" pos:column="85">searchEndPrev</name> <op:operator pos:line="2128" pos:column="99">!=</op:operator> <lit:literal type="char" pos:line="2128" pos:column="102">'\\'</lit:literal><op:operator pos:line="2128" pos:column="106">)</op:operator></expr>)</condition><then pos:line="2128" pos:column="108">
					<continue pos:line="2129" pos:column="41">continue;</continue></then></if>	<comment type="line" pos:line="2129" pos:column="57">// Can't match end of line if end position before end of line</comment>
				<expr_stmt><expr><name pos:line="2130" pos:column="33">endOfLine</name> <op:operator pos:line="2130" pos:column="43">=</op:operator> <name pos:line="2130" pos:column="45">endPos</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="2132" pos:column="19">else <block pos:line="2132" pos:column="24">{
			<if pos:line="2133" pos:column="25">if <condition pos:line="2133" pos:column="28">(<expr><name pos:line="2133" pos:column="29">line</name> <op:operator pos:line="2133" pos:column="34">==</op:operator> <name pos:line="2133" pos:column="37">lineRangeEnd</name></expr>)</condition><then pos:line="2133" pos:column="50"> <block pos:line="2133" pos:column="51">{
				<if pos:line="2134" pos:column="33">if <condition pos:line="2134" pos:column="36">(<expr><op:operator pos:line="2134" pos:column="37">(</op:operator><name pos:line="2134" pos:column="38">endPos</name> <op:operator pos:line="2134" pos:column="45">!=</op:operator> <name pos:line="2134" pos:column="48">startOfLine</name><op:operator pos:line="2134" pos:column="59">)</op:operator> <op:operator pos:line="2134" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="2134" pos:column="64">(</op:operator><name><name pos:line="2134" pos:column="65">s</name><index pos:line="2134" pos:column="66">[<expr><lit:literal type="number" pos:line="2134" pos:column="67">0</lit:literal></expr>]</index></name> <op:operator pos:line="2134" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="2134" pos:column="73">'^'</lit:literal><op:operator pos:line="2134" pos:column="76">)</op:operator></expr>)</condition><then pos:line="2134" pos:column="78">
					<continue pos:line="2135" pos:column="41">continue;</continue></then></if>	<comment type="line" pos:line="2135" pos:column="57">// Can't match start of line if end position after start of line</comment>
				<expr_stmt><expr><name pos:line="2136" pos:column="33">startOfLine</name> <op:operator pos:line="2136" pos:column="45">=</op:operator> <name pos:line="2136" pos:column="47">endPos</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="2138" pos:column="25">if <condition pos:line="2138" pos:column="28">(<expr><name pos:line="2138" pos:column="29">line</name> <op:operator pos:line="2138" pos:column="34">==</op:operator> <name pos:line="2138" pos:column="37">lineRangeStart</name></expr>)</condition><then pos:line="2138" pos:column="52"> <block pos:line="2138" pos:column="53">{
				<if pos:line="2139" pos:column="33">if <condition pos:line="2139" pos:column="36">(<expr><op:operator pos:line="2139" pos:column="37">(</op:operator><name pos:line="2139" pos:column="38">startPos</name> <op:operator pos:line="2139" pos:column="47">!=</op:operator> <name pos:line="2139" pos:column="50">endOfLine</name><op:operator pos:line="2139" pos:column="59">)</op:operator> <op:operator pos:line="2139" pos:column="61">&amp;&amp;</op:operator> <op:operator pos:line="2139" pos:column="64">(</op:operator><name pos:line="2139" pos:column="65">searchEnd</name> <op:operator pos:line="2139" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="2139" pos:column="78">'$'</lit:literal><op:operator pos:line="2139" pos:column="81">)</op:operator> <op:operator pos:line="2139" pos:column="83">&amp;&amp;</op:operator> <op:operator pos:line="2139" pos:column="86">(</op:operator><name pos:line="2139" pos:column="87">searchEndPrev</name> <op:operator pos:line="2139" pos:column="101">!=</op:operator> <lit:literal type="char" pos:line="2139" pos:column="104">'\\'</lit:literal><op:operator pos:line="2139" pos:column="108">)</op:operator></expr>)</condition><then pos:line="2139" pos:column="110">
					<continue pos:line="2140" pos:column="41">continue;</continue></then></if>	<comment type="line" pos:line="2140" pos:column="57">// Can't match end of line if start position before end of line</comment>
				<expr_stmt><expr><name pos:line="2141" pos:column="33">endOfLine</name> <op:operator pos:line="2141" pos:column="43">=</op:operator> <name pos:line="2141" pos:column="45">startPos</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>

		<function_decl><type><name pos:line="2145" pos:column="17">DocumentIndexer</name></type> <name pos:line="2145" pos:column="33">di</name><parameter_list pos:line="2145" pos:column="35">(<param><decl><type><name pos:line="2145" pos:column="36">doc</name></type></decl></param>, <param><decl><type><name pos:line="2145" pos:column="41">endOfLine</name></type></decl></param>)</parameter_list>;</function_decl>
		<decl_stmt><decl><type><name pos:line="2146" pos:column="17">int</name></type> <name pos:line="2146" pos:column="21">success</name> <init pos:line="2146" pos:column="29">= <expr><call><name><name pos:line="2146" pos:column="31">search</name><op:operator pos:line="2146" pos:column="37">.</op:operator><name pos:line="2146" pos:column="38">Execute</name></name><argument_list pos:line="2146" pos:column="45">(<argument><expr><name pos:line="2146" pos:column="46">di</name></expr></argument>, <argument><expr><name pos:line="2146" pos:column="50">startOfLine</name></expr></argument>, <argument><expr><name pos:line="2146" pos:column="63">endOfLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2147" pos:column="17">if <condition pos:line="2147" pos:column="20">(<expr><name pos:line="2147" pos:column="21">success</name></expr>)</condition><then pos:line="2147" pos:column="29"> <block pos:line="2147" pos:column="30">{
			<expr_stmt><expr><name pos:line="2148" pos:column="25">pos</name> <op:operator pos:line="2148" pos:column="29">=</op:operator> <name><name pos:line="2148" pos:column="31">search</name><op:operator pos:line="2148" pos:column="37">.</op:operator><name pos:line="2148" pos:column="38">bopat</name><index pos:line="2148" pos:column="43">[<expr><lit:literal type="number" pos:line="2148" pos:column="44">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="2149" pos:column="25">lenRet</name> <op:operator pos:line="2149" pos:column="32">=</op:operator> <name><name pos:line="2149" pos:column="34">search</name><op:operator pos:line="2149" pos:column="40">.</op:operator><name pos:line="2149" pos:column="41">eopat</name><index pos:line="2149" pos:column="46">[<expr><lit:literal type="number" pos:line="2149" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="2149" pos:column="50">-</op:operator> <name><name pos:line="2149" pos:column="52">search</name><op:operator pos:line="2149" pos:column="58">.</op:operator><name pos:line="2149" pos:column="59">bopat</name><index pos:line="2149" pos:column="64">[<expr><lit:literal type="number" pos:line="2149" pos:column="65">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
			<comment type="line" pos:line="2150" pos:column="25">// There can be only one start of a line, so no need to look for last match in line</comment>
			<if pos:line="2151" pos:column="25">if <condition pos:line="2151" pos:column="28">(<expr><op:operator pos:line="2151" pos:column="29">(</op:operator><name pos:line="2151" pos:column="30">increment</name> <op:operator pos:line="2151" pos:column="40">==</op:operator> <op:operator pos:line="2151" pos:column="43">-</op:operator><lit:literal type="number" pos:line="2151" pos:column="44">1</lit:literal><op:operator pos:line="2151" pos:column="45">)</op:operator> <op:operator pos:line="2151" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="2151" pos:column="50">(</op:operator><name><name pos:line="2151" pos:column="51">s</name><index pos:line="2151" pos:column="52">[<expr><lit:literal type="number" pos:line="2151" pos:column="53">0</lit:literal></expr>]</index></name> <op:operator pos:line="2151" pos:column="56">!=</op:operator> <lit:literal type="char" pos:line="2151" pos:column="59">'^'</lit:literal><op:operator pos:line="2151" pos:column="62">)</op:operator></expr>)</condition><then pos:line="2151" pos:column="64"> <block pos:line="2151" pos:column="65">{
				<comment type="line" pos:line="2152" pos:column="33">// Check for the last match on this line.</comment>
				<decl_stmt><decl><type><name pos:line="2153" pos:column="33">int</name></type> <name pos:line="2153" pos:column="37">repetitions</name> <init pos:line="2153" pos:column="49">= <expr><lit:literal type="number" pos:line="2153" pos:column="51">1000</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="2153" pos:column="57">// Break out of infinite loop</comment>
				<while pos:line="2154" pos:column="33">while <condition pos:line="2154" pos:column="39">(<expr><name pos:line="2154" pos:column="40">success</name> <op:operator pos:line="2154" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="2154" pos:column="51">(</op:operator><name><name pos:line="2154" pos:column="52">search</name><op:operator pos:line="2154" pos:column="58">.</op:operator><name pos:line="2154" pos:column="59">eopat</name><index pos:line="2154" pos:column="64">[<expr><lit:literal type="number" pos:line="2154" pos:column="65">0</lit:literal></expr>]</index></name> <op:operator pos:line="2154" pos:column="68">&lt;=</op:operator> <name pos:line="2154" pos:column="71">endOfLine</name><op:operator pos:line="2154" pos:column="80">)</op:operator> <op:operator pos:line="2154" pos:column="82">&amp;&amp;</op:operator> <op:operator pos:line="2154" pos:column="85">(</op:operator><name pos:line="2154" pos:column="86">repetitions</name><op:operator pos:line="2154" pos:column="97">--</op:operator><op:operator pos:line="2154" pos:column="99">)</op:operator></expr>)</condition> <block pos:line="2154" pos:column="102">{
					<expr_stmt><expr><name pos:line="2155" pos:column="41">success</name> <op:operator pos:line="2155" pos:column="49">=</op:operator> <call><name><name pos:line="2155" pos:column="51">search</name><op:operator pos:line="2155" pos:column="57">.</op:operator><name pos:line="2155" pos:column="58">Execute</name></name><argument_list pos:line="2155" pos:column="65">(<argument><expr><name pos:line="2155" pos:column="66">di</name></expr></argument>, <argument><expr><name pos:line="2155" pos:column="70">pos</name><op:operator pos:line="2155" pos:column="73">+</op:operator><lit:literal type="number" pos:line="2155" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2155" pos:column="77">endOfLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="2156" pos:column="41">if <condition pos:line="2156" pos:column="44">(<expr><name pos:line="2156" pos:column="45">success</name></expr>)</condition><then pos:line="2156" pos:column="53"> <block pos:line="2156" pos:column="54">{
						<if pos:line="2157" pos:column="49">if <condition pos:line="2157" pos:column="52">(<expr><name><name pos:line="2157" pos:column="53">search</name><op:operator pos:line="2157" pos:column="59">.</op:operator><name pos:line="2157" pos:column="60">eopat</name><index pos:line="2157" pos:column="65">[<expr><lit:literal type="number" pos:line="2157" pos:column="66">0</lit:literal></expr>]</index></name> <op:operator pos:line="2157" pos:column="69">&lt;=</op:operator> <name pos:line="2157" pos:column="72">minPos</name></expr>)</condition><then pos:line="2157" pos:column="79"> <block pos:line="2157" pos:column="80">{
							<expr_stmt><expr><name pos:line="2158" pos:column="57">pos</name> <op:operator pos:line="2158" pos:column="61">=</op:operator> <name><name pos:line="2158" pos:column="63">search</name><op:operator pos:line="2158" pos:column="69">.</op:operator><name pos:line="2158" pos:column="70">bopat</name><index pos:line="2158" pos:column="75">[<expr><lit:literal type="number" pos:line="2158" pos:column="76">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="2159" pos:column="57">lenRet</name> <op:operator pos:line="2159" pos:column="64">=</op:operator> <name><name pos:line="2159" pos:column="66">search</name><op:operator pos:line="2159" pos:column="72">.</op:operator><name pos:line="2159" pos:column="73">eopat</name><index pos:line="2159" pos:column="78">[<expr><lit:literal type="number" pos:line="2159" pos:column="79">0</lit:literal></expr>]</index></name> <op:operator pos:line="2159" pos:column="82">-</op:operator> <name><name pos:line="2159" pos:column="84">search</name><op:operator pos:line="2159" pos:column="90">.</op:operator><name pos:line="2159" pos:column="91">bopat</name><index pos:line="2159" pos:column="96">[<expr><lit:literal type="number" pos:line="2159" pos:column="97">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
						}</block></then> <else pos:line="2160" pos:column="51">else <block pos:line="2160" pos:column="56">{
							<expr_stmt><expr><name pos:line="2161" pos:column="57">success</name> <op:operator pos:line="2161" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="2161" pos:column="67">0</lit:literal></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then></if>
				}</block></while>
			}</block></then></if>
			<break pos:line="2166" pos:column="25">break;</break>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><op:operator pos:line="2169" pos:column="9">*</op:operator><name pos:line="2169" pos:column="10">length</name> <op:operator pos:line="2169" pos:column="17">=</op:operator> <name pos:line="2169" pos:column="19">lenRet</name></expr>;</expr_stmt>
	<return pos:line="2170" pos:column="9">return <expr><name pos:line="2170" pos:column="16">pos</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="2173" pos:column="1">const</specifier> <name pos:line="2173" pos:column="7">char</name> <type:modifier pos:line="2173" pos:column="12">*</type:modifier></type><name><name pos:line="2173" pos:column="13">BuiltinRegex</name><op:operator pos:line="2173" pos:column="25">::</op:operator><name pos:line="2173" pos:column="27">SubstituteByPosition</name></name><parameter_list pos:line="2173" pos:column="47">(<param><decl><type><name pos:line="2173" pos:column="48">Document</name> <type:modifier pos:line="2173" pos:column="57">*</type:modifier></type><name pos:line="2173" pos:column="58">doc</name></decl></param>, <param><decl><type><specifier pos:line="2173" pos:column="63">const</specifier> <name pos:line="2173" pos:column="69">char</name> <type:modifier pos:line="2173" pos:column="74">*</type:modifier></type><name pos:line="2173" pos:column="75">text</name></decl></param>, <param><decl><type><name pos:line="2173" pos:column="81">int</name> <type:modifier pos:line="2173" pos:column="85">*</type:modifier></type><name pos:line="2173" pos:column="86">length</name></decl></param>)</parameter_list> <block pos:line="2173" pos:column="94">{
	<expr_stmt><expr><op:operator pos:line="2174" pos:column="9">delete</op:operator> <index pos:line="2174" pos:column="16">[]</index><name pos:line="2174" pos:column="18">substituted</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="2175" pos:column="9">substituted</name> <op:operator pos:line="2175" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="2175" pos:column="23">0</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2176" pos:column="9">DocumentIndexer</name></type> <name pos:line="2176" pos:column="25">di</name><argument_list pos:line="2176" pos:column="27">(<argument><expr><name pos:line="2176" pos:column="28">doc</name></expr></argument>, <argument><expr><call><name><name pos:line="2176" pos:column="33">doc</name><op:operator pos:line="2176" pos:column="36">-&gt;</op:operator><name pos:line="2176" pos:column="38">Length</name></name><argument_list pos:line="2176" pos:column="44">()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="2177" pos:column="9">if <condition pos:line="2177" pos:column="12">(<expr><op:operator pos:line="2177" pos:column="13">!</op:operator><call><name><name pos:line="2177" pos:column="14">search</name><op:operator pos:line="2177" pos:column="20">.</op:operator><name pos:line="2177" pos:column="21">GrabMatches</name></name><argument_list pos:line="2177" pos:column="32">(<argument><expr><name pos:line="2177" pos:column="33">di</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2177" pos:column="37">
		<return pos:line="2178" pos:column="17">return <expr><lit:literal type="number" pos:line="2178" pos:column="24">0</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="2179" pos:column="9">unsigned</name> <name pos:line="2179" pos:column="18">int</name></type> <name pos:line="2179" pos:column="22">lenResult</name> <init pos:line="2179" pos:column="32">= <expr><lit:literal type="number" pos:line="2179" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="2180" pos:column="9">for (<init><decl><type><name pos:line="2180" pos:column="14">int</name></type> <name pos:line="2180" pos:column="18">i</name> <init pos:line="2180" pos:column="20">= <expr><lit:literal type="number" pos:line="2180" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="2180" pos:column="25">i</name> <op:operator pos:line="2180" pos:column="27">&lt;</op:operator> <op:operator pos:line="2180" pos:column="29">*</op:operator><name pos:line="2180" pos:column="30">length</name></expr>;</condition> <incr><expr><name pos:line="2180" pos:column="38">i</name><op:operator pos:line="2180" pos:column="39">++</op:operator></expr></incr>) <block pos:line="2180" pos:column="43">{
		<if pos:line="2181" pos:column="17">if <condition pos:line="2181" pos:column="20">(<expr><name><name pos:line="2181" pos:column="21">text</name><index pos:line="2181" pos:column="25">[<expr><name pos:line="2181" pos:column="26">i</name></expr>]</index></name> <op:operator pos:line="2181" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="2181" pos:column="32">'\\'</lit:literal></expr>)</condition><then pos:line="2181" pos:column="37"> <block pos:line="2181" pos:column="38">{
			<if pos:line="2182" pos:column="25">if <condition pos:line="2182" pos:column="28">(<expr><name><name pos:line="2182" pos:column="29">text</name><index pos:line="2182" pos:column="33">[<expr><name pos:line="2182" pos:column="34">i</name> <op:operator pos:line="2182" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="2182" pos:column="38">1</lit:literal></expr>]</index></name> <op:operator pos:line="2182" pos:column="41">&gt;=</op:operator> <lit:literal type="char" pos:line="2182" pos:column="44">'1'</lit:literal> <op:operator pos:line="2182" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="2182" pos:column="51">text</name><index pos:line="2182" pos:column="55">[<expr><name pos:line="2182" pos:column="56">i</name> <op:operator pos:line="2182" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="2182" pos:column="60">1</lit:literal></expr>]</index></name> <op:operator pos:line="2182" pos:column="63">&lt;=</op:operator> <lit:literal type="char" pos:line="2182" pos:column="66">'9'</lit:literal></expr>)</condition><then pos:line="2182" pos:column="70"> <block pos:line="2182" pos:column="71">{
				<decl_stmt><decl><type><name pos:line="2183" pos:column="33">unsigned</name> <name pos:line="2183" pos:column="42">int</name></type> <name pos:line="2183" pos:column="46">patNum</name> <init pos:line="2183" pos:column="53">= <expr><name><name pos:line="2183" pos:column="55">text</name><index pos:line="2183" pos:column="59">[<expr><name pos:line="2183" pos:column="60">i</name> <op:operator pos:line="2183" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="2183" pos:column="64">1</lit:literal></expr>]</index></name> <op:operator pos:line="2183" pos:column="67">-</op:operator> <lit:literal type="char" pos:line="2183" pos:column="69">'0'</lit:literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name pos:line="2184" pos:column="33">lenResult</name> <op:operator pos:line="2184" pos:column="43">+=</op:operator> <name><name pos:line="2184" pos:column="46">search</name><op:operator pos:line="2184" pos:column="52">.</op:operator><name pos:line="2184" pos:column="53">eopat</name><index pos:line="2184" pos:column="58">[<expr><name pos:line="2184" pos:column="59">patNum</name></expr>]</index></name> <op:operator pos:line="2184" pos:column="67">-</op:operator> <name><name pos:line="2184" pos:column="69">search</name><op:operator pos:line="2184" pos:column="75">.</op:operator><name pos:line="2184" pos:column="76">bopat</name><index pos:line="2184" pos:column="81">[<expr><name pos:line="2184" pos:column="82">patNum</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2185" pos:column="33">i</name><op:operator pos:line="2185" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="2186" pos:column="27">else <block pos:line="2186" pos:column="32">{
				<switch pos:line="2187" pos:column="33">switch <condition pos:line="2187" pos:column="40">(<expr><name><name pos:line="2187" pos:column="41">text</name><index pos:line="2187" pos:column="45">[<expr><name pos:line="2187" pos:column="46">i</name> <op:operator pos:line="2187" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="2187" pos:column="50">1</lit:literal></expr>]</index></name></expr>)</condition> <block pos:line="2187" pos:column="54">{
				<case pos:line="2188" pos:column="33">case <expr><lit:literal type="char" pos:line="2188" pos:column="38">'a'</lit:literal></expr>:
				</case><case pos:line="2189" pos:column="33">case <expr><lit:literal type="char" pos:line="2189" pos:column="38">'b'</lit:literal></expr>:
				</case><case pos:line="2190" pos:column="33">case <expr><lit:literal type="char" pos:line="2190" pos:column="38">'f'</lit:literal></expr>:
				</case><case pos:line="2191" pos:column="33">case <expr><lit:literal type="char" pos:line="2191" pos:column="38">'n'</lit:literal></expr>:
				</case><case pos:line="2192" pos:column="33">case <expr><lit:literal type="char" pos:line="2192" pos:column="38">'r'</lit:literal></expr>:
				</case><case pos:line="2193" pos:column="33">case <expr><lit:literal type="char" pos:line="2193" pos:column="38">'t'</lit:literal></expr>:
				</case><case pos:line="2194" pos:column="33">case <expr><lit:literal type="char" pos:line="2194" pos:column="38">'v'</lit:literal></expr>:
				</case><case pos:line="2195" pos:column="33">case <expr><lit:literal type="char" pos:line="2195" pos:column="38">'\\'</lit:literal></expr>:
					<expr_stmt><expr><name pos:line="2196" pos:column="41">i</name><op:operator pos:line="2196" pos:column="42">++</op:operator></expr>;</expr_stmt>
				</case>}</block></switch>
				<expr_stmt><expr><name pos:line="2198" pos:column="33">lenResult</name><op:operator pos:line="2198" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else pos:line="2200" pos:column="19">else <block pos:line="2200" pos:column="24">{
			<expr_stmt><expr><name pos:line="2201" pos:column="25">lenResult</name><op:operator pos:line="2201" pos:column="34">++</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name pos:line="2204" pos:column="9">substituted</name> <op:operator pos:line="2204" pos:column="21">=</op:operator> <op:operator pos:line="2204" pos:column="23">new</op:operator> <name><name pos:line="2204" pos:column="27">char</name><index pos:line="2204" pos:column="31">[<expr><name pos:line="2204" pos:column="32">lenResult</name> <op:operator pos:line="2204" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="2204" pos:column="44">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2205" pos:column="9">char</name> <type:modifier pos:line="2205" pos:column="14">*</type:modifier></type><name pos:line="2205" pos:column="15">o</name> <init pos:line="2205" pos:column="17">= <expr><name pos:line="2205" pos:column="19">substituted</name></expr></init></decl>;</decl_stmt>
	<for pos:line="2206" pos:column="9">for (<init><decl><type><name pos:line="2206" pos:column="14">int</name></type> <name pos:line="2206" pos:column="18">j</name> <init pos:line="2206" pos:column="20">= <expr><lit:literal type="number" pos:line="2206" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="2206" pos:column="25">j</name> <op:operator pos:line="2206" pos:column="27">&lt;</op:operator> <op:operator pos:line="2206" pos:column="29">*</op:operator><name pos:line="2206" pos:column="30">length</name></expr>;</condition> <incr><expr><name pos:line="2206" pos:column="38">j</name><op:operator pos:line="2206" pos:column="39">++</op:operator></expr></incr>) <block pos:line="2206" pos:column="43">{
		<if pos:line="2207" pos:column="17">if <condition pos:line="2207" pos:column="20">(<expr><name><name pos:line="2207" pos:column="21">text</name><index pos:line="2207" pos:column="25">[<expr><name pos:line="2207" pos:column="26">j</name></expr>]</index></name> <op:operator pos:line="2207" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="2207" pos:column="32">'\\'</lit:literal></expr>)</condition><then pos:line="2207" pos:column="37"> <block pos:line="2207" pos:column="38">{
			<if pos:line="2208" pos:column="25">if <condition pos:line="2208" pos:column="28">(<expr><name><name pos:line="2208" pos:column="29">text</name><index pos:line="2208" pos:column="33">[<expr><name pos:line="2208" pos:column="34">j</name> <op:operator pos:line="2208" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="2208" pos:column="38">1</lit:literal></expr>]</index></name> <op:operator pos:line="2208" pos:column="41">&gt;=</op:operator> <lit:literal type="char" pos:line="2208" pos:column="44">'1'</lit:literal> <op:operator pos:line="2208" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="2208" pos:column="51">text</name><index pos:line="2208" pos:column="55">[<expr><name pos:line="2208" pos:column="56">j</name> <op:operator pos:line="2208" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="2208" pos:column="60">1</lit:literal></expr>]</index></name> <op:operator pos:line="2208" pos:column="63">&lt;=</op:operator> <lit:literal type="char" pos:line="2208" pos:column="66">'9'</lit:literal></expr>)</condition><then pos:line="2208" pos:column="70"> <block pos:line="2208" pos:column="71">{
				<decl_stmt><decl><type><name pos:line="2209" pos:column="33">unsigned</name> <name pos:line="2209" pos:column="42">int</name></type> <name pos:line="2209" pos:column="46">patNum</name> <init pos:line="2209" pos:column="53">= <expr><name><name pos:line="2209" pos:column="55">text</name><index pos:line="2209" pos:column="59">[<expr><name pos:line="2209" pos:column="60">j</name> <op:operator pos:line="2209" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="2209" pos:column="64">1</lit:literal></expr>]</index></name> <op:operator pos:line="2209" pos:column="67">-</op:operator> <lit:literal type="char" pos:line="2209" pos:column="69">'0'</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="2210" pos:column="33">unsigned</name> <name pos:line="2210" pos:column="42">int</name></type> <name pos:line="2210" pos:column="46">len</name> <init pos:line="2210" pos:column="50">= <expr><name><name pos:line="2210" pos:column="52">search</name><op:operator pos:line="2210" pos:column="58">.</op:operator><name pos:line="2210" pos:column="59">eopat</name><index pos:line="2210" pos:column="64">[<expr><name pos:line="2210" pos:column="65">patNum</name></expr>]</index></name> <op:operator pos:line="2210" pos:column="73">-</op:operator> <name><name pos:line="2210" pos:column="75">search</name><op:operator pos:line="2210" pos:column="81">.</op:operator><name pos:line="2210" pos:column="82">bopat</name><index pos:line="2210" pos:column="87">[<expr><name pos:line="2210" pos:column="88">patNum</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if pos:line="2211" pos:column="33">if <condition pos:line="2211" pos:column="36">(<expr><name><name pos:line="2211" pos:column="37">search</name><op:operator pos:line="2211" pos:column="43">.</op:operator><name pos:line="2211" pos:column="44">pat</name><index pos:line="2211" pos:column="47">[<expr><name pos:line="2211" pos:column="48">patNum</name></expr>]</index></name></expr>)</condition><then pos:line="2211" pos:column="56">	<comment type="line" pos:line="2211" pos:column="57">// Will be null if try for a match that did not occur</comment>
					<expr_stmt><expr><call><name pos:line="2212" pos:column="41">memcpy</name><argument_list pos:line="2212" pos:column="47">(<argument><expr><name pos:line="2212" pos:column="48">o</name></expr></argument>, <argument><expr><name><name pos:line="2212" pos:column="51">search</name><op:operator pos:line="2212" pos:column="57">.</op:operator><name pos:line="2212" pos:column="58">pat</name><index pos:line="2212" pos:column="61">[<expr><name pos:line="2212" pos:column="62">patNum</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="2212" pos:column="71">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="2213" pos:column="33">o</name> <op:operator pos:line="2213" pos:column="35">+=</op:operator> <name pos:line="2213" pos:column="38">len</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2214" pos:column="33">j</name><op:operator pos:line="2214" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="2215" pos:column="27">else <block pos:line="2215" pos:column="32">{
				<expr_stmt><expr><name pos:line="2216" pos:column="33">j</name><op:operator pos:line="2216" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<switch pos:line="2217" pos:column="33">switch <condition pos:line="2217" pos:column="40">(<expr><name><name pos:line="2217" pos:column="41">text</name><index pos:line="2217" pos:column="45">[<expr><name pos:line="2217" pos:column="46">j</name></expr>]</index></name></expr>)</condition> <block pos:line="2217" pos:column="50">{
				<case pos:line="2218" pos:column="33">case <expr><lit:literal type="char" pos:line="2218" pos:column="38">'a'</lit:literal></expr>:
					<expr_stmt><expr><op:operator pos:line="2219" pos:column="41">*</op:operator><name pos:line="2219" pos:column="42">o</name><op:operator pos:line="2219" pos:column="43">++</op:operator> <op:operator pos:line="2219" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2219" pos:column="48">'\a'</lit:literal></expr>;</expr_stmt>
					<break pos:line="2220" pos:column="41">break;</break>
				</case><case pos:line="2221" pos:column="33">case <expr><lit:literal type="char" pos:line="2221" pos:column="38">'b'</lit:literal></expr>:
					<expr_stmt><expr><op:operator pos:line="2222" pos:column="41">*</op:operator><name pos:line="2222" pos:column="42">o</name><op:operator pos:line="2222" pos:column="43">++</op:operator> <op:operator pos:line="2222" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2222" pos:column="48">'\b'</lit:literal></expr>;</expr_stmt>
					<break pos:line="2223" pos:column="41">break;</break>
				</case><case pos:line="2224" pos:column="33">case <expr><lit:literal type="char" pos:line="2224" pos:column="38">'f'</lit:literal></expr>:
					<expr_stmt><expr><op:operator pos:line="2225" pos:column="41">*</op:operator><name pos:line="2225" pos:column="42">o</name><op:operator pos:line="2225" pos:column="43">++</op:operator> <op:operator pos:line="2225" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2225" pos:column="48">'\f'</lit:literal></expr>;</expr_stmt>
					<break pos:line="2226" pos:column="41">break;</break>
				</case><case pos:line="2227" pos:column="33">case <expr><lit:literal type="char" pos:line="2227" pos:column="38">'n'</lit:literal></expr>:
					<expr_stmt><expr><op:operator pos:line="2228" pos:column="41">*</op:operator><name pos:line="2228" pos:column="42">o</name><op:operator pos:line="2228" pos:column="43">++</op:operator> <op:operator pos:line="2228" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2228" pos:column="48">'\n'</lit:literal></expr>;</expr_stmt>
					<break pos:line="2229" pos:column="41">break;</break>
				</case><case pos:line="2230" pos:column="33">case <expr><lit:literal type="char" pos:line="2230" pos:column="38">'r'</lit:literal></expr>:
					<expr_stmt><expr><op:operator pos:line="2231" pos:column="41">*</op:operator><name pos:line="2231" pos:column="42">o</name><op:operator pos:line="2231" pos:column="43">++</op:operator> <op:operator pos:line="2231" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2231" pos:column="48">'\r'</lit:literal></expr>;</expr_stmt>
					<break pos:line="2232" pos:column="41">break;</break>
				</case><case pos:line="2233" pos:column="33">case <expr><lit:literal type="char" pos:line="2233" pos:column="38">'t'</lit:literal></expr>:
					<expr_stmt><expr><op:operator pos:line="2234" pos:column="41">*</op:operator><name pos:line="2234" pos:column="42">o</name><op:operator pos:line="2234" pos:column="43">++</op:operator> <op:operator pos:line="2234" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2234" pos:column="48">'\t'</lit:literal></expr>;</expr_stmt>
					<break pos:line="2235" pos:column="41">break;</break>
				</case><case pos:line="2236" pos:column="33">case <expr><lit:literal type="char" pos:line="2236" pos:column="38">'v'</lit:literal></expr>:
					<expr_stmt><expr><op:operator pos:line="2237" pos:column="41">*</op:operator><name pos:line="2237" pos:column="42">o</name><op:operator pos:line="2237" pos:column="43">++</op:operator> <op:operator pos:line="2237" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2237" pos:column="48">'\v'</lit:literal></expr>;</expr_stmt>
					<break pos:line="2238" pos:column="41">break;</break>
				</case><case pos:line="2239" pos:column="33">case <expr><lit:literal type="char" pos:line="2239" pos:column="38">'\\'</lit:literal></expr>:
					<expr_stmt><expr><op:operator pos:line="2240" pos:column="41">*</op:operator><name pos:line="2240" pos:column="42">o</name><op:operator pos:line="2240" pos:column="43">++</op:operator> <op:operator pos:line="2240" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2240" pos:column="48">'\\'</lit:literal></expr>;</expr_stmt>
					<break pos:line="2241" pos:column="41">break;</break>
				</case><default pos:line="2242" pos:column="33">default:
					<expr_stmt><expr><op:operator pos:line="2243" pos:column="41">*</op:operator><name pos:line="2243" pos:column="42">o</name><op:operator pos:line="2243" pos:column="43">++</op:operator> <op:operator pos:line="2243" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="2243" pos:column="48">'\\'</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="2244" pos:column="41">j</name><op:operator pos:line="2244" pos:column="42">--</op:operator></expr>;</expr_stmt>
				</default>}</block></switch>
			}</block></else></if>
		}</block></then> <else pos:line="2247" pos:column="19">else <block pos:line="2247" pos:column="24">{
			<expr_stmt><expr><op:operator pos:line="2248" pos:column="25">*</op:operator><name pos:line="2248" pos:column="26">o</name><op:operator pos:line="2248" pos:column="27">++</op:operator> <op:operator pos:line="2248" pos:column="30">=</op:operator> <name><name pos:line="2248" pos:column="32">text</name><index pos:line="2248" pos:column="36">[<expr><name pos:line="2248" pos:column="37">j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><op:operator pos:line="2251" pos:column="9">*</op:operator><name pos:line="2251" pos:column="10">o</name> <op:operator pos:line="2251" pos:column="12">=</op:operator> <lit:literal type="char" pos:line="2251" pos:column="14">'\0'</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="2252" pos:column="9">*</op:operator><name pos:line="2252" pos:column="10">length</name> <op:operator pos:line="2252" pos:column="17">=</op:operator> <name pos:line="2252" pos:column="19">lenResult</name></expr>;</expr_stmt>
	<return pos:line="2253" pos:column="9">return <expr><name pos:line="2253" pos:column="16">substituted</name></expr>;</return>
}</block></function>

<cpp:ifndef pos:line="2256" pos:column="1">#<cpp:directive pos:line="2256" pos:column="2">ifndef</cpp:directive> <name pos:line="2256" pos:column="9">SCI_OWNREGEX</name></cpp:ifndef>

<cpp:ifdef pos:line="2258" pos:column="1">#<cpp:directive pos:line="2258" pos:column="2">ifdef</cpp:directive> <name pos:line="2258" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>

<function><type><name pos:line="2260" pos:column="1">RegexSearchBase</name> <type:modifier pos:line="2260" pos:column="17">*</type:modifier></type><name><name pos:line="2260" pos:column="18">Scintilla</name><op:operator pos:line="2260" pos:column="27">::</op:operator><name pos:line="2260" pos:column="29">CreateRegexSearch</name></name><parameter_list pos:line="2260" pos:column="46">(<param><decl><type><name pos:line="2260" pos:column="47">CharClassify</name> <type:modifier pos:line="2260" pos:column="60">*</type:modifier></type><name pos:line="2260" pos:column="61">charClassTable</name></decl></param>)</parameter_list> <block pos:line="2260" pos:column="77">{
	<return pos:line="2261" pos:column="9">return <expr><op:operator pos:line="2261" pos:column="16">new</op:operator> <call><name pos:line="2261" pos:column="20">BuiltinRegex</name><argument_list pos:line="2261" pos:column="32">(<argument><expr><name pos:line="2261" pos:column="33">charClassTable</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:else pos:line="2264" pos:column="1">#<cpp:directive pos:line="2264" pos:column="2">else</cpp:directive></cpp:else>

<function><type><name pos:line="2266" pos:column="1">RegexSearchBase</name> <type:modifier pos:line="2266" pos:column="17">*</type:modifier></type><name pos:line="2266" pos:column="18">CreateRegexSearch</name><parameter_list pos:line="2266" pos:column="35">(<param><decl><type><name pos:line="2266" pos:column="36">CharClassify</name> <type:modifier pos:line="2266" pos:column="49">*</type:modifier></type><name pos:line="2266" pos:column="50">charClassTable</name></decl></param>)</parameter_list> <block pos:line="2266" pos:column="66">{
	<return pos:line="2267" pos:column="9">return <expr><op:operator pos:line="2267" pos:column="16">new</op:operator> <call><name pos:line="2267" pos:column="20">BuiltinRegex</name><argument_list pos:line="2267" pos:column="32">(<argument><expr><name pos:line="2267" pos:column="33">charClassTable</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:endif pos:line="2270" pos:column="1">#<cpp:directive pos:line="2270" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="2272" pos:column="1">#<cpp:directive pos:line="2272" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
