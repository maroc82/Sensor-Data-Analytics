<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\CellBuffer.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file CellBuffer.cxx
 ** Manages a buffer of cells.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="13" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"SplitVector.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Partitioning.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"CellBuffer.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef</cpp:directive> <name pos:line="20" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="21" pos:column="1">using namespace <name pos:line="21" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif</cpp:directive></cpp:endif>

<constructor><name><name pos:line="24" pos:column="1">LineVector</name><op:operator pos:line="24" pos:column="11">::</op:operator><name pos:line="24" pos:column="13">LineVector</name></name><parameter_list pos:line="24" pos:column="23">()</parameter_list> <member_list pos:line="24" pos:column="26">: <call><name pos:line="24" pos:column="28">starts</name><argument_list pos:line="24" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="24" pos:column="35">256</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="24" pos:column="39">,</op:operator> <call><name pos:line="24" pos:column="41">perLine</name><argument_list pos:line="24" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="24" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="24" pos:column="52">{
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">Init</name><argument_list pos:line="25" pos:column="13">()</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="28" pos:column="1">LineVector</name><op:operator pos:line="28" pos:column="11">::</op:operator>~<name pos:line="28" pos:column="14">LineVector</name></name><parameter_list pos:line="28" pos:column="24">()</parameter_list> <block pos:line="28" pos:column="27">{
	<expr_stmt><expr><call><name><name pos:line="29" pos:column="9">starts</name><op:operator pos:line="29" pos:column="15">.</op:operator><name pos:line="29" pos:column="16">DeleteAll</name></name><argument_list pos:line="29" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="32" pos:column="1">void</name></type> <name><name pos:line="32" pos:column="6">LineVector</name><op:operator pos:line="32" pos:column="16">::</op:operator><name pos:line="32" pos:column="18">Init</name></name><parameter_list pos:line="32" pos:column="22">()</parameter_list> <block pos:line="32" pos:column="25">{
	<expr_stmt><expr><call><name><name pos:line="33" pos:column="9">starts</name><op:operator pos:line="33" pos:column="15">.</op:operator><name pos:line="33" pos:column="16">DeleteAll</name></name><argument_list pos:line="33" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">perLine</name></expr>)</condition><then pos:line="34" pos:column="21"> <block pos:line="34" pos:column="22">{
		<expr_stmt><expr><call><name><name pos:line="35" pos:column="17">perLine</name><op:operator pos:line="35" pos:column="24">-&gt;</op:operator><name pos:line="35" pos:column="26">Init</name></name><argument_list pos:line="35" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="39" pos:column="1">void</name></type> <name><name pos:line="39" pos:column="6">LineVector</name><op:operator pos:line="39" pos:column="16">::</op:operator><name pos:line="39" pos:column="18">SetPerLine</name></name><parameter_list pos:line="39" pos:column="28">(<param><decl><type><name pos:line="39" pos:column="29">PerLine</name> <type:modifier pos:line="39" pos:column="37">*</type:modifier></type><name pos:line="39" pos:column="38">pl</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="42">{
	<expr_stmt><expr><name pos:line="40" pos:column="9">perLine</name> <op:operator pos:line="40" pos:column="17">=</op:operator> <name pos:line="40" pos:column="19">pl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="43" pos:column="1">void</name></type> <name><name pos:line="43" pos:column="6">LineVector</name><op:operator pos:line="43" pos:column="16">::</op:operator><name pos:line="43" pos:column="18">InsertText</name></name><parameter_list pos:line="43" pos:column="28">(<param><decl><type><name pos:line="43" pos:column="29">int</name></type> <name pos:line="43" pos:column="33">line</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="39">int</name></type> <name pos:line="43" pos:column="43">delta</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="50">{
	<expr_stmt><expr><call><name><name pos:line="44" pos:column="9">starts</name><op:operator pos:line="44" pos:column="15">.</op:operator><name pos:line="44" pos:column="16">InsertText</name></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">line</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="33">delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="47" pos:column="1">void</name></type> <name><name pos:line="47" pos:column="6">LineVector</name><op:operator pos:line="47" pos:column="16">::</op:operator><name pos:line="47" pos:column="18">InsertLine</name></name><parameter_list pos:line="47" pos:column="28">(<param><decl><type><name pos:line="47" pos:column="29">int</name></type> <name pos:line="47" pos:column="33">line</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="39">int</name></type> <name pos:line="47" pos:column="43">position</name></decl></param>, <param><decl><type><name pos:line="47" pos:column="53">bool</name></type> <name pos:line="47" pos:column="58">lineStart</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="69">{
	<expr_stmt><expr><call><name><name pos:line="48" pos:column="9">starts</name><op:operator pos:line="48" pos:column="15">.</op:operator><name pos:line="48" pos:column="16">InsertPartition</name></name><argument_list pos:line="48" pos:column="31">(<argument><expr><name pos:line="48" pos:column="32">line</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="38">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name pos:line="49" pos:column="13">perLine</name></expr>)</condition><then pos:line="49" pos:column="21"> <block pos:line="49" pos:column="22">{
		<if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><op:operator pos:line="50" pos:column="21">(</op:operator><name pos:line="50" pos:column="22">line</name> <op:operator pos:line="50" pos:column="27">&gt;</op:operator> <lit:literal type="number" pos:line="50" pos:column="29">0</lit:literal><op:operator pos:line="50" pos:column="30">)</op:operator> <op:operator pos:line="50" pos:column="32">&amp;&amp;</op:operator> <name pos:line="50" pos:column="35">lineStart</name></expr>)</condition><then pos:line="50" pos:column="45">
			<expr_stmt><expr><name pos:line="51" pos:column="25">line</name><op:operator pos:line="51" pos:column="29">--</op:operator></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name><name pos:line="52" pos:column="17">perLine</name><op:operator pos:line="52" pos:column="24">-&gt;</op:operator><name pos:line="52" pos:column="26">InsertLine</name></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="56" pos:column="1">void</name></type> <name><name pos:line="56" pos:column="6">LineVector</name><op:operator pos:line="56" pos:column="16">::</op:operator><name pos:line="56" pos:column="18">SetLineStart</name></name><parameter_list pos:line="56" pos:column="30">(<param><decl><type><name pos:line="56" pos:column="31">int</name></type> <name pos:line="56" pos:column="35">line</name></decl></param>, <param><decl><type><name pos:line="56" pos:column="41">int</name></type> <name pos:line="56" pos:column="45">position</name></decl></param>)</parameter_list> <block pos:line="56" pos:column="55">{
	<expr_stmt><expr><call><name><name pos:line="57" pos:column="9">starts</name><op:operator pos:line="57" pos:column="15">.</op:operator><name pos:line="57" pos:column="16">SetPartitionStartPosition</name></name><argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">line</name></expr></argument>, <argument><expr><name pos:line="57" pos:column="48">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="60" pos:column="1">void</name></type> <name><name pos:line="60" pos:column="6">LineVector</name><op:operator pos:line="60" pos:column="16">::</op:operator><name pos:line="60" pos:column="18">RemoveLine</name></name><parameter_list pos:line="60" pos:column="28">(<param><decl><type><name pos:line="60" pos:column="29">int</name></type> <name pos:line="60" pos:column="33">line</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="39">{
	<expr_stmt><expr><call><name><name pos:line="61" pos:column="9">starts</name><op:operator pos:line="61" pos:column="15">.</op:operator><name pos:line="61" pos:column="16">RemovePartition</name></name><argument_list pos:line="61" pos:column="31">(<argument><expr><name pos:line="61" pos:column="32">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">perLine</name></expr>)</condition><then pos:line="62" pos:column="21"> <block pos:line="62" pos:column="22">{
		<expr_stmt><expr><call><name><name pos:line="63" pos:column="17">perLine</name><op:operator pos:line="63" pos:column="24">-&gt;</op:operator><name pos:line="63" pos:column="26">RemoveLine</name></name><argument_list pos:line="63" pos:column="36">(<argument><expr><name pos:line="63" pos:column="37">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="67" pos:column="1">int</name></type> <name><name pos:line="67" pos:column="5">LineVector</name><op:operator pos:line="67" pos:column="15">::</op:operator><name pos:line="67" pos:column="17">LineFromPosition</name></name><parameter_list pos:line="67" pos:column="33">(<param><decl><type><name pos:line="67" pos:column="34">int</name></type> <name pos:line="67" pos:column="38">pos</name></decl></param>)</parameter_list> <specifier pos:line="67" pos:column="43">const</specifier> <block pos:line="67" pos:column="49">{
	<return pos:line="68" pos:column="9">return <expr><call><name><name pos:line="68" pos:column="16">starts</name><op:operator pos:line="68" pos:column="22">.</op:operator><name pos:line="68" pos:column="23">PartitionFromPosition</name></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">pos</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<constructor><name><name pos:line="71" pos:column="1">Action</name><op:operator pos:line="71" pos:column="7">::</op:operator><name pos:line="71" pos:column="9">Action</name></name><parameter_list pos:line="71" pos:column="15">()</parameter_list> <block pos:line="71" pos:column="18">{
	<expr_stmt><expr><name pos:line="72" pos:column="9">at</name> <op:operator pos:line="72" pos:column="12">=</op:operator> <name pos:line="72" pos:column="14">startAction</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="73" pos:column="9">position</name> <op:operator pos:line="73" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="73" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="74" pos:column="9">data</name> <op:operator pos:line="74" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="74" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="75" pos:column="9">lenData</name> <op:operator pos:line="75" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="75" pos:column="19">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="76" pos:column="9">mayCoalesce</name> <op:operator pos:line="76" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="76" pos:column="23">false</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="79" pos:column="1">Action</name><op:operator pos:line="79" pos:column="7">::</op:operator>~<name pos:line="79" pos:column="10">Action</name></name><parameter_list pos:line="79" pos:column="16">()</parameter_list> <block pos:line="79" pos:column="19">{
	<expr_stmt><expr><call><name pos:line="80" pos:column="9">Destroy</name><argument_list pos:line="80" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="83" pos:column="1">void</name></type> <name><name pos:line="83" pos:column="6">Action</name><op:operator pos:line="83" pos:column="12">::</op:operator><name pos:line="83" pos:column="14">Create</name></name><parameter_list pos:line="83" pos:column="20">(<param><decl><type><name pos:line="83" pos:column="21">actionType</name></type> <name pos:line="83" pos:column="32">at_</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="37">int</name></type> <name pos:line="83" pos:column="41">position_</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="52">char</name> <type:modifier pos:line="83" pos:column="57">*</type:modifier></type><name pos:line="83" pos:column="58">data_</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="65">int</name></type> <name pos:line="83" pos:column="69">lenData_</name></decl></param>, <param><decl><type><name pos:line="83" pos:column="79">bool</name></type> <name pos:line="83" pos:column="84">mayCoalesce_</name></decl></param>)</parameter_list> <block pos:line="83" pos:column="98">{
	<expr_stmt><expr><op:operator pos:line="84" pos:column="9">delete</op:operator> <index pos:line="84" pos:column="16">[]</index><name pos:line="84" pos:column="18">data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="85" pos:column="9">position</name> <op:operator pos:line="85" pos:column="18">=</op:operator> <name pos:line="85" pos:column="20">position_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="86" pos:column="9">at</name> <op:operator pos:line="86" pos:column="12">=</op:operator> <name pos:line="86" pos:column="14">at_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="87" pos:column="9">data</name> <op:operator pos:line="87" pos:column="14">=</op:operator> <name pos:line="87" pos:column="16">data_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="88" pos:column="9">lenData</name> <op:operator pos:line="88" pos:column="17">=</op:operator> <name pos:line="88" pos:column="19">lenData_</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="89" pos:column="9">mayCoalesce</name> <op:operator pos:line="89" pos:column="21">=</op:operator> <name pos:line="89" pos:column="23">mayCoalesce_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="92" pos:column="1">void</name></type> <name><name pos:line="92" pos:column="6">Action</name><op:operator pos:line="92" pos:column="12">::</op:operator><name pos:line="92" pos:column="14">Destroy</name></name><parameter_list pos:line="92" pos:column="21">()</parameter_list> <block pos:line="92" pos:column="24">{
	<expr_stmt><expr><op:operator pos:line="93" pos:column="9">delete</op:operator> <index pos:line="93" pos:column="16">[]</index><name pos:line="93" pos:column="18">data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="94" pos:column="9">data</name> <op:operator pos:line="94" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="94" pos:column="16">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="97" pos:column="1">void</name></type> <name><name pos:line="97" pos:column="6">Action</name><op:operator pos:line="97" pos:column="12">::</op:operator><name pos:line="97" pos:column="14">Grab</name></name><parameter_list pos:line="97" pos:column="18">(<param><decl><type><name pos:line="97" pos:column="19">Action</name> <type:modifier pos:line="97" pos:column="26">*</type:modifier></type><name pos:line="97" pos:column="27">source</name></decl></param>)</parameter_list> <block pos:line="97" pos:column="35">{
	<expr_stmt><expr><op:operator pos:line="98" pos:column="9">delete</op:operator> <index pos:line="98" pos:column="16">[]</index><name pos:line="98" pos:column="18">data</name></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="100" pos:column="9">position</name> <op:operator pos:line="100" pos:column="18">=</op:operator> <name><name pos:line="100" pos:column="20">source</name><op:operator pos:line="100" pos:column="26">-&gt;</op:operator><name pos:line="100" pos:column="28">position</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="101" pos:column="9">at</name> <op:operator pos:line="101" pos:column="12">=</op:operator> <name><name pos:line="101" pos:column="14">source</name><op:operator pos:line="101" pos:column="20">-&gt;</op:operator><name pos:line="101" pos:column="22">at</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="102" pos:column="9">data</name> <op:operator pos:line="102" pos:column="14">=</op:operator> <name><name pos:line="102" pos:column="16">source</name><op:operator pos:line="102" pos:column="22">-&gt;</op:operator><name pos:line="102" pos:column="24">data</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="103" pos:column="9">lenData</name> <op:operator pos:line="103" pos:column="17">=</op:operator> <name><name pos:line="103" pos:column="19">source</name><op:operator pos:line="103" pos:column="25">-&gt;</op:operator><name pos:line="103" pos:column="27">lenData</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="104" pos:column="9">mayCoalesce</name> <op:operator pos:line="104" pos:column="21">=</op:operator> <name><name pos:line="104" pos:column="23">source</name><op:operator pos:line="104" pos:column="29">-&gt;</op:operator><name pos:line="104" pos:column="31">mayCoalesce</name></name></expr>;</expr_stmt>

	<comment type="line" pos:line="106" pos:column="9">// Ownership of source data transferred to this</comment>
	<expr_stmt><expr><name><name pos:line="107" pos:column="9">source</name><op:operator pos:line="107" pos:column="15">-&gt;</op:operator><name pos:line="107" pos:column="17">position</name></name> <op:operator pos:line="107" pos:column="26">=</op:operator> <lit:literal type="number" pos:line="107" pos:column="28">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="108" pos:column="9">source</name><op:operator pos:line="108" pos:column="15">-&gt;</op:operator><name pos:line="108" pos:column="17">at</name></name> <op:operator pos:line="108" pos:column="20">=</op:operator> <name pos:line="108" pos:column="22">startAction</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="109" pos:column="9">source</name><op:operator pos:line="109" pos:column="15">-&gt;</op:operator><name pos:line="109" pos:column="17">data</name></name> <op:operator pos:line="109" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="109" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="110" pos:column="9">source</name><op:operator pos:line="110" pos:column="15">-&gt;</op:operator><name pos:line="110" pos:column="17">lenData</name></name> <op:operator pos:line="110" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="110" pos:column="27">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="111" pos:column="9">source</name><op:operator pos:line="111" pos:column="15">-&gt;</op:operator><name pos:line="111" pos:column="17">mayCoalesce</name></name> <op:operator pos:line="111" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="111" pos:column="31">true</lit:literal></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="114" pos:column="1">// The undo history stores a sequence of user operations that represent the user's view of the</comment>
<comment type="line" pos:line="115" pos:column="1">// commands executed on the text.</comment>
<comment type="line" pos:line="116" pos:column="1">// Each user operation contains a sequence of text insertion and text deletion actions.</comment>
<comment type="line" pos:line="117" pos:column="1">// All the user operations are stored in a list of individual actions with 'start' actions used</comment>
<comment type="line" pos:line="118" pos:column="1">// as delimiters between user operations.</comment>
<comment type="line" pos:line="119" pos:column="1">// Initially there is one start action in the history.</comment>
<comment type="line" pos:line="120" pos:column="1">// As each action is performed, it is recorded in the history. The action may either become</comment>
<comment type="line" pos:line="121" pos:column="1">// part of the current user operation or may start a new user operation. If it is to be part of the</comment>
<comment type="line" pos:line="122" pos:column="1">// current operation, then it overwrites the current last action. If it is to be part of a new</comment>
<comment type="line" pos:line="123" pos:column="1">// operation, it is appended after the current last action.</comment>
<comment type="line" pos:line="124" pos:column="1">// After writing the new action, a new start action is appended at the end of the history.</comment>
<comment type="line" pos:line="125" pos:column="1">// The decision of whether to start a new user operation is based upon two factors. If a</comment>
<comment type="line" pos:line="126" pos:column="1">// compound operation has been explicitly started by calling BeginUndoAction and no matching</comment>
<comment type="line" pos:line="127" pos:column="1">// EndUndoAction (these calls nest) has been called, then the action is coalesced into the current</comment>
<comment type="line" pos:line="128" pos:column="1">// operation. If there is no outstanding BeginUndoAction call then a new operation is started</comment>
<comment type="line" pos:line="129" pos:column="1">// unless it looks as if the new action is caused by the user typing or deleting a stream of text.</comment>
<comment type="line" pos:line="130" pos:column="1">// Sequences that look like typing or deletion are coalesced into a single user operation.</comment>

<constructor><name><name pos:line="132" pos:column="1">UndoHistory</name><op:operator pos:line="132" pos:column="12">::</op:operator><name pos:line="132" pos:column="14">UndoHistory</name></name><parameter_list pos:line="132" pos:column="25">()</parameter_list> <block pos:line="132" pos:column="28">{

	<expr_stmt><expr><name pos:line="134" pos:column="9">lenActions</name> <op:operator pos:line="134" pos:column="20">=</op:operator> <lit:literal type="number" pos:line="134" pos:column="22">100</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="135" pos:column="9">actions</name> <op:operator pos:line="135" pos:column="17">=</op:operator> <op:operator pos:line="135" pos:column="19">new</op:operator> <name><name pos:line="135" pos:column="23">Action</name><index pos:line="135" pos:column="29">[<expr><name pos:line="135" pos:column="30">lenActions</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="136" pos:column="9">maxAction</name> <op:operator pos:line="136" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="136" pos:column="21">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="137" pos:column="9">currentAction</name> <op:operator pos:line="137" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="137" pos:column="25">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="138" pos:column="9">undoSequenceDepth</name> <op:operator pos:line="138" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="138" pos:column="29">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="139" pos:column="9">savePoint</name> <op:operator pos:line="139" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="139" pos:column="21">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="141" pos:column="9">actions</name><index pos:line="141" pos:column="16">[<expr><name pos:line="141" pos:column="17">currentAction</name></expr>]</index></name><op:operator pos:line="141" pos:column="31">.</op:operator><call><name pos:line="141" pos:column="32">Create</name><argument_list pos:line="141" pos:column="38">(<argument><expr><name pos:line="141" pos:column="39">startAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="144" pos:column="1">UndoHistory</name><op:operator pos:line="144" pos:column="12">::</op:operator>~<name pos:line="144" pos:column="15">UndoHistory</name></name><parameter_list pos:line="144" pos:column="26">()</parameter_list> <block pos:line="144" pos:column="29">{
	<expr_stmt><expr><op:operator pos:line="145" pos:column="9">delete</op:operator> <index pos:line="145" pos:column="16">[]</index><name pos:line="145" pos:column="18">actions</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="146" pos:column="9">actions</name> <op:operator pos:line="146" pos:column="17">=</op:operator> <lit:literal type="number" pos:line="146" pos:column="19">0</lit:literal></expr>;</expr_stmt>
}</block></destructor>

<function><type><name pos:line="149" pos:column="1">void</name></type> <name><name pos:line="149" pos:column="6">UndoHistory</name><op:operator pos:line="149" pos:column="17">::</op:operator><name pos:line="149" pos:column="19">EnsureUndoRoom</name></name><parameter_list pos:line="149" pos:column="33">()</parameter_list> <block pos:line="149" pos:column="36">{
	<comment type="line" pos:line="150" pos:column="9">// Have to test that there is room for 2 more actions in the array</comment>
	<comment type="line" pos:line="151" pos:column="9">// as two actions may be created by the calling function</comment>
	<if pos:line="152" pos:column="9">if <condition pos:line="152" pos:column="12">(<expr><name pos:line="152" pos:column="13">currentAction</name> <op:operator pos:line="152" pos:column="27">&gt;=</op:operator> <op:operator pos:line="152" pos:column="30">(</op:operator><name pos:line="152" pos:column="31">lenActions</name> <op:operator pos:line="152" pos:column="42">-</op:operator> <lit:literal type="number" pos:line="152" pos:column="44">2</lit:literal><op:operator pos:line="152" pos:column="45">)</op:operator></expr>)</condition><then pos:line="152" pos:column="47"> <block pos:line="152" pos:column="48">{
		<comment type="line" pos:line="153" pos:column="17">// Run out of undo nodes so extend the array</comment>
		<decl_stmt><decl><type><name pos:line="154" pos:column="17">int</name></type> <name pos:line="154" pos:column="21">lenActionsNew</name> <init pos:line="154" pos:column="35">= <expr><name pos:line="154" pos:column="37">lenActions</name> <op:operator pos:line="154" pos:column="48">*</op:operator> <lit:literal type="number" pos:line="154" pos:column="50">2</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="155" pos:column="17">Action</name> <type:modifier pos:line="155" pos:column="24">*</type:modifier></type><name pos:line="155" pos:column="25">actionsNew</name> <init pos:line="155" pos:column="36">= <expr><op:operator pos:line="155" pos:column="38">new</op:operator> <name><name pos:line="155" pos:column="42">Action</name><index pos:line="155" pos:column="48">[<expr><name pos:line="155" pos:column="49">lenActionsNew</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for pos:line="156" pos:column="17">for (<init><decl><type><name pos:line="156" pos:column="22">int</name></type> <name pos:line="156" pos:column="26">act</name> <init pos:line="156" pos:column="30">= <expr><lit:literal type="number" pos:line="156" pos:column="32">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="156" pos:column="35">act</name> <op:operator pos:line="156" pos:column="39">&lt;=</op:operator> <name pos:line="156" pos:column="42">currentAction</name></expr>;</condition> <incr><expr><name pos:line="156" pos:column="57">act</name><op:operator pos:line="156" pos:column="60">++</op:operator></expr></incr>)
			<expr_stmt><expr><name><name pos:line="157" pos:column="25">actionsNew</name><index pos:line="157" pos:column="35">[<expr><name pos:line="157" pos:column="36">act</name></expr>]</index></name><op:operator pos:line="157" pos:column="40">.</op:operator><call><name pos:line="157" pos:column="41">Grab</name><argument_list pos:line="157" pos:column="45">(<argument><expr><op:operator pos:line="157" pos:column="46">&amp;</op:operator><name><name pos:line="157" pos:column="47">actions</name><index pos:line="157" pos:column="54">[<expr><name pos:line="157" pos:column="55">act</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
		<expr_stmt><expr><op:operator pos:line="158" pos:column="17">delete</op:operator> <index pos:line="158" pos:column="24">[]</index><name pos:line="158" pos:column="26">actions</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="159" pos:column="17">lenActions</name> <op:operator pos:line="159" pos:column="28">=</op:operator> <name pos:line="159" pos:column="30">lenActionsNew</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="160" pos:column="17">actions</name> <op:operator pos:line="160" pos:column="25">=</op:operator> <name pos:line="160" pos:column="27">actionsNew</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="164" pos:column="1">void</name></type> <name><name pos:line="164" pos:column="6">UndoHistory</name><op:operator pos:line="164" pos:column="17">::</op:operator><name pos:line="164" pos:column="19">AppendAction</name></name><parameter_list pos:line="164" pos:column="31">(<param><decl><type><name pos:line="164" pos:column="32">actionType</name></type> <name pos:line="164" pos:column="43">at</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="47">int</name></type> <name pos:line="164" pos:column="51">position</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="61">char</name> <type:modifier pos:line="164" pos:column="66">*</type:modifier></type><name pos:line="164" pos:column="67">data</name></decl></param>, <param><decl><type><name pos:line="164" pos:column="73">int</name></type> <name pos:line="164" pos:column="77">lengthData</name></decl></param>,
	<param><decl><type><name pos:line="165" pos:column="9">bool</name> <type:modifier pos:line="165" pos:column="14">&amp;</type:modifier></type><name pos:line="165" pos:column="15">startSequence</name></decl></param>, <param><decl><type><name pos:line="165" pos:column="30">bool</name></type> <name pos:line="165" pos:column="35">mayCoalesce</name></decl></param>)</parameter_list> <block pos:line="165" pos:column="48">{
	<expr_stmt><expr><call><name pos:line="166" pos:column="9">EnsureUndoRoom</name><argument_list pos:line="166" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="167" pos:column="9">//Platform::DebugPrintf("%% %d action %d %d %d\n", at, position, lengthData, currentAction);</comment>
	<comment type="line" pos:line="168" pos:column="9">//Platform::DebugPrintf("^ %d action %d %d\n", actions[currentAction - 1].at,</comment>
	<comment type="line" pos:line="169" pos:column="9">//	actions[currentAction - 1].position, actions[currentAction - 1].lenData);</comment>
	<if pos:line="170" pos:column="9">if <condition pos:line="170" pos:column="12">(<expr><name pos:line="170" pos:column="13">currentAction</name> <op:operator pos:line="170" pos:column="27">&lt;</op:operator> <name pos:line="170" pos:column="29">savePoint</name></expr>)</condition><then pos:line="170" pos:column="39"> <block pos:line="170" pos:column="40">{
		<expr_stmt><expr><name pos:line="171" pos:column="17">savePoint</name> <op:operator pos:line="171" pos:column="27">=</op:operator> <op:operator pos:line="171" pos:column="29">-</op:operator><lit:literal type="number" pos:line="171" pos:column="30">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="173" pos:column="9">int</name></type> <name pos:line="173" pos:column="13">oldCurrentAction</name> <init pos:line="173" pos:column="30">= <expr><name pos:line="173" pos:column="32">currentAction</name></expr></init></decl>;</decl_stmt>
	<if pos:line="174" pos:column="9">if <condition pos:line="174" pos:column="12">(<expr><name pos:line="174" pos:column="13">currentAction</name> <op:operator pos:line="174" pos:column="27">&gt;=</op:operator> <lit:literal type="number" pos:line="174" pos:column="30">1</lit:literal></expr>)</condition><then pos:line="174" pos:column="32"> <block pos:line="174" pos:column="33">{
		<if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><lit:literal type="number" pos:line="175" pos:column="21">0</lit:literal> <op:operator pos:line="175" pos:column="23">==</op:operator> <name pos:line="175" pos:column="26">undoSequenceDepth</name></expr>)</condition><then pos:line="175" pos:column="44"> <block pos:line="175" pos:column="45">{
			<comment type="line" pos:line="176" pos:column="25">// Top level actions may not always be coalesced</comment>
			<decl_stmt><decl><type><name pos:line="177" pos:column="25">int</name></type> <name pos:line="177" pos:column="29">targetAct</name> <init pos:line="177" pos:column="39">= <expr><op:operator pos:line="177" pos:column="41">-</op:operator><lit:literal type="number" pos:line="177" pos:column="42">1</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="178" pos:column="25">const</specifier> <name pos:line="178" pos:column="31">Action</name> <type:modifier pos:line="178" pos:column="38">*</type:modifier></type><name pos:line="178" pos:column="39">actPrevious</name> <init pos:line="178" pos:column="51">= <expr><op:operator pos:line="178" pos:column="53">&amp;</op:operator><op:operator pos:line="178" pos:column="54">(</op:operator><name><name pos:line="178" pos:column="55">actions</name><index pos:line="178" pos:column="62">[<expr><name pos:line="178" pos:column="63">currentAction</name> <op:operator pos:line="178" pos:column="77">+</op:operator> <name pos:line="178" pos:column="79">targetAct</name></expr>]</index></name><op:operator pos:line="178" pos:column="89">)</op:operator></expr></init></decl>;</decl_stmt>
			<comment type="line" pos:line="179" pos:column="25">// Container actions may forward the coalesce state of Scintilla Actions.</comment>
			<while pos:line="180" pos:column="25">while <condition pos:line="180" pos:column="31">(<expr><op:operator pos:line="180" pos:column="32">(</op:operator><name><name pos:line="180" pos:column="33">actPrevious</name><op:operator pos:line="180" pos:column="44">-&gt;</op:operator><name pos:line="180" pos:column="46">at</name></name> <op:operator pos:line="180" pos:column="49">==</op:operator> <name pos:line="180" pos:column="52">containerAction</name><op:operator pos:line="180" pos:column="67">)</op:operator> <op:operator pos:line="180" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="180" pos:column="72">actPrevious</name><op:operator pos:line="180" pos:column="83">-&gt;</op:operator><name pos:line="180" pos:column="85">mayCoalesce</name></name></expr>)</condition> <block pos:line="180" pos:column="98">{
				<expr_stmt><expr><name pos:line="181" pos:column="33">targetAct</name><op:operator pos:line="181" pos:column="42">--</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="182" pos:column="33">actPrevious</name> <op:operator pos:line="182" pos:column="45">=</op:operator> <op:operator pos:line="182" pos:column="47">&amp;</op:operator><op:operator pos:line="182" pos:column="48">(</op:operator><name><name pos:line="182" pos:column="49">actions</name><index pos:line="182" pos:column="56">[<expr><name pos:line="182" pos:column="57">currentAction</name> <op:operator pos:line="182" pos:column="71">+</op:operator> <name pos:line="182" pos:column="73">targetAct</name></expr>]</index></name><op:operator pos:line="182" pos:column="83">)</op:operator></expr>;</expr_stmt>
			}</block></while>
			<comment type="line" pos:line="184" pos:column="25">// See if current action can be coalesced into previous action</comment>
			<comment type="line" pos:line="185" pos:column="25">// Will work if both are inserts or deletes and position is same</comment>
			<if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><name pos:line="186" pos:column="29">currentAction</name> <op:operator pos:line="186" pos:column="43">==</op:operator> <name pos:line="186" pos:column="46">savePoint</name></expr>)</condition><then pos:line="186" pos:column="56"> <block pos:line="186" pos:column="57">{
				<expr_stmt><expr><name pos:line="187" pos:column="33">currentAction</name><op:operator pos:line="187" pos:column="46">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="188" pos:column="27">else <if pos:line="188" pos:column="32">if <condition pos:line="188" pos:column="35">(<expr><op:operator pos:line="188" pos:column="36">!</op:operator><name><name pos:line="188" pos:column="37">actions</name><index pos:line="188" pos:column="44">[<expr><name pos:line="188" pos:column="45">currentAction</name></expr>]</index></name><op:operator pos:line="188" pos:column="59">.</op:operator><name pos:line="188" pos:column="60">mayCoalesce</name></expr>)</condition><then pos:line="188" pos:column="72"> <block pos:line="188" pos:column="73">{
				<comment type="line" pos:line="189" pos:column="33">// Not allowed to coalesce if this set</comment>
				<expr_stmt><expr><name pos:line="190" pos:column="33">currentAction</name><op:operator pos:line="190" pos:column="46">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="191" pos:column="27">else <if pos:line="191" pos:column="32">if <condition pos:line="191" pos:column="35">(<expr><op:operator pos:line="191" pos:column="36">!</op:operator><name pos:line="191" pos:column="37">mayCoalesce</name> <op:operator pos:line="191" pos:column="49">||</op:operator> <op:operator pos:line="191" pos:column="52">!</op:operator><name><name pos:line="191" pos:column="53">actPrevious</name><op:operator pos:line="191" pos:column="64">-&gt;</op:operator><name pos:line="191" pos:column="66">mayCoalesce</name></name></expr>)</condition><then pos:line="191" pos:column="78"> <block pos:line="191" pos:column="79">{
				<expr_stmt><expr><name pos:line="192" pos:column="33">currentAction</name><op:operator pos:line="192" pos:column="46">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="193" pos:column="27">else <if pos:line="193" pos:column="32">if <condition pos:line="193" pos:column="35">(<expr><name pos:line="193" pos:column="36">at</name> <op:operator pos:line="193" pos:column="39">==</op:operator> <name pos:line="193" pos:column="42">containerAction</name> <op:operator pos:line="193" pos:column="58">||</op:operator> <name><name pos:line="193" pos:column="61">actions</name><index pos:line="193" pos:column="68">[<expr><name pos:line="193" pos:column="69">currentAction</name></expr>]</index></name><op:operator pos:line="193" pos:column="83">.</op:operator><name pos:line="193" pos:column="84">at</name> <op:operator pos:line="193" pos:column="87">==</op:operator> <name pos:line="193" pos:column="90">containerAction</name></expr>)</condition><then pos:line="193" pos:column="106"> <block pos:line="193" pos:column="107">{
				<empty_stmt pos:line="194" pos:column="33">;</empty_stmt>	<comment type="line" pos:line="194" pos:column="41">// A coalescible containerAction</comment>
			}</block></then> <else pos:line="195" pos:column="27">else <if pos:line="195" pos:column="32">if <condition pos:line="195" pos:column="35">(<expr><op:operator pos:line="195" pos:column="36">(</op:operator><name pos:line="195" pos:column="37">at</name> <op:operator pos:line="195" pos:column="40">!=</op:operator> <name><name pos:line="195" pos:column="43">actPrevious</name><op:operator pos:line="195" pos:column="54">-&gt;</op:operator><name pos:line="195" pos:column="56">at</name></name><op:operator pos:line="195" pos:column="58">)</op:operator> <op:operator pos:line="195" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="195" pos:column="63">(</op:operator><name><name pos:line="195" pos:column="64">actPrevious</name><op:operator pos:line="195" pos:column="75">-&gt;</op:operator><name pos:line="195" pos:column="77">at</name></name> <op:operator pos:line="195" pos:column="80">!=</op:operator> <name pos:line="195" pos:column="83">startAction</name><op:operator pos:line="195" pos:column="94">)</op:operator></expr>)</condition><then pos:line="195" pos:column="96"> <block pos:line="195" pos:column="97">{
				<expr_stmt><expr><name pos:line="196" pos:column="33">currentAction</name><op:operator pos:line="196" pos:column="46">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="197" pos:column="27">else <if pos:line="197" pos:column="32">if <condition pos:line="197" pos:column="35">(<expr><op:operator pos:line="197" pos:column="36">(</op:operator><name pos:line="197" pos:column="37">at</name> <op:operator pos:line="197" pos:column="40">==</op:operator> <name pos:line="197" pos:column="43">insertAction</name><op:operator pos:line="197" pos:column="55">)</op:operator> <op:operator pos:line="197" pos:column="57">&amp;&amp;</op:operator>
			           <op:operator pos:line="198" pos:column="36">(</op:operator><name pos:line="198" pos:column="37">position</name> <op:operator pos:line="198" pos:column="46">!=</op:operator> <op:operator pos:line="198" pos:column="49">(</op:operator><name><name pos:line="198" pos:column="50">actPrevious</name><op:operator pos:line="198" pos:column="61">-&gt;</op:operator><name pos:line="198" pos:column="63">position</name></name> <op:operator pos:line="198" pos:column="72">+</op:operator> <name><name pos:line="198" pos:column="74">actPrevious</name><op:operator pos:line="198" pos:column="85">-&gt;</op:operator><name pos:line="198" pos:column="87">lenData</name></name><op:operator pos:line="198" pos:column="94">)</op:operator><op:operator pos:line="198" pos:column="95">)</op:operator></expr>)</condition><then pos:line="198" pos:column="97"> <block pos:line="198" pos:column="98">{
				<comment type="line" pos:line="199" pos:column="33">// Insertions must be immediately after to coalesce</comment>
				<expr_stmt><expr><name pos:line="200" pos:column="33">currentAction</name><op:operator pos:line="200" pos:column="46">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="201" pos:column="27">else <if pos:line="201" pos:column="32">if <condition pos:line="201" pos:column="35">(<expr><name pos:line="201" pos:column="36">at</name> <op:operator pos:line="201" pos:column="39">==</op:operator> <name pos:line="201" pos:column="42">removeAction</name></expr>)</condition><then pos:line="201" pos:column="55"> <block pos:line="201" pos:column="56">{
				<if pos:line="202" pos:column="33">if <condition pos:line="202" pos:column="36">(<expr><op:operator pos:line="202" pos:column="37">(</op:operator><name pos:line="202" pos:column="38">lengthData</name> <op:operator pos:line="202" pos:column="49">==</op:operator> <lit:literal type="number" pos:line="202" pos:column="52">1</lit:literal><op:operator pos:line="202" pos:column="53">)</op:operator> <op:operator pos:line="202" pos:column="55">||</op:operator> <op:operator pos:line="202" pos:column="58">(</op:operator><name pos:line="202" pos:column="59">lengthData</name> <op:operator pos:line="202" pos:column="70">==</op:operator> <lit:literal type="number" pos:line="202" pos:column="73">2</lit:literal><op:operator pos:line="202" pos:column="74">)</op:operator></expr>)</condition><then pos:line="202" pos:column="76"> <block pos:line="202" pos:column="77">{
					<if pos:line="203" pos:column="41">if <condition pos:line="203" pos:column="44">(<expr><op:operator pos:line="203" pos:column="45">(</op:operator><name pos:line="203" pos:column="46">position</name> <op:operator pos:line="203" pos:column="55">+</op:operator> <name pos:line="203" pos:column="57">lengthData</name><op:operator pos:line="203" pos:column="67">)</op:operator> <op:operator pos:line="203" pos:column="69">==</op:operator> <name><name pos:line="203" pos:column="72">actPrevious</name><op:operator pos:line="203" pos:column="83">-&gt;</op:operator><name pos:line="203" pos:column="85">position</name></name></expr>)</condition><then pos:line="203" pos:column="94"> <block pos:line="203" pos:column="95">{
						<empty_stmt pos:line="204" pos:column="49">;</empty_stmt> <comment type="line" pos:line="204" pos:column="51">// Backspace -&gt; OK</comment>
					}</block></then> <else pos:line="205" pos:column="43">else <if pos:line="205" pos:column="48">if <condition pos:line="205" pos:column="51">(<expr><name pos:line="205" pos:column="52">position</name> <op:operator pos:line="205" pos:column="61">==</op:operator> <name><name pos:line="205" pos:column="64">actPrevious</name><op:operator pos:line="205" pos:column="75">-&gt;</op:operator><name pos:line="205" pos:column="77">position</name></name></expr>)</condition><then pos:line="205" pos:column="86"> <block pos:line="205" pos:column="87">{
						<empty_stmt pos:line="206" pos:column="49">;</empty_stmt> <comment type="line" pos:line="206" pos:column="51">// Delete -&gt; OK</comment>
					}</block></then> <else pos:line="207" pos:column="43">else <block pos:line="207" pos:column="48">{
						<comment type="line" pos:line="208" pos:column="49">// Removals must be at same position to coalesce</comment>
						<expr_stmt><expr><name pos:line="209" pos:column="49">currentAction</name><op:operator pos:line="209" pos:column="62">++</op:operator></expr>;</expr_stmt>
					}</block></else></if></else></if>
				}</block></then> <else pos:line="211" pos:column="35">else <block pos:line="211" pos:column="40">{
					<comment type="line" pos:line="212" pos:column="41">// Removals must be of one character to coalesce</comment>
					<expr_stmt><expr><name pos:line="213" pos:column="41">currentAction</name><op:operator pos:line="213" pos:column="54">++</op:operator></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="215" pos:column="27">else <block pos:line="215" pos:column="32">{
				<comment type="line" pos:line="216" pos:column="33">// Action coalesced.</comment>
			}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

		}</block></then> <else pos:line="219" pos:column="19">else <block pos:line="219" pos:column="24">{
			<comment type="line" pos:line="220" pos:column="25">// Actions not at top level are always coalesced unless this is after return to top level</comment>
			<if pos:line="221" pos:column="25">if <condition pos:line="221" pos:column="28">(<expr><op:operator pos:line="221" pos:column="29">!</op:operator><name><name pos:line="221" pos:column="30">actions</name><index pos:line="221" pos:column="37">[<expr><name pos:line="221" pos:column="38">currentAction</name></expr>]</index></name><op:operator pos:line="221" pos:column="52">.</op:operator><name pos:line="221" pos:column="53">mayCoalesce</name></expr>)</condition><then pos:line="221" pos:column="65">
				<expr_stmt><expr><name pos:line="222" pos:column="33">currentAction</name><op:operator pos:line="222" pos:column="46">++</op:operator></expr>;</expr_stmt></then></if>
		}</block></else></if>
	}</block></then> <else pos:line="224" pos:column="11">else <block pos:line="224" pos:column="16">{
		<expr_stmt><expr><name pos:line="225" pos:column="17">currentAction</name><op:operator pos:line="225" pos:column="30">++</op:operator></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name pos:line="227" pos:column="9">startSequence</name> <op:operator pos:line="227" pos:column="23">=</op:operator> <name pos:line="227" pos:column="25">oldCurrentAction</name> <op:operator pos:line="227" pos:column="42">!=</op:operator> <name pos:line="227" pos:column="45">currentAction</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="228" pos:column="9">actions</name><index pos:line="228" pos:column="16">[<expr><name pos:line="228" pos:column="17">currentAction</name></expr>]</index></name><op:operator pos:line="228" pos:column="31">.</op:operator><call><name pos:line="228" pos:column="32">Create</name><argument_list pos:line="228" pos:column="38">(<argument><expr><name pos:line="228" pos:column="39">at</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="43">position</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="53">data</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="59">lengthData</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="71">mayCoalesce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="229" pos:column="9">currentAction</name><op:operator pos:line="229" pos:column="22">++</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="230" pos:column="9">actions</name><index pos:line="230" pos:column="16">[<expr><name pos:line="230" pos:column="17">currentAction</name></expr>]</index></name><op:operator pos:line="230" pos:column="31">.</op:operator><call><name pos:line="230" pos:column="32">Create</name><argument_list pos:line="230" pos:column="38">(<argument><expr><name pos:line="230" pos:column="39">startAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="231" pos:column="9">maxAction</name> <op:operator pos:line="231" pos:column="19">=</op:operator> <name pos:line="231" pos:column="21">currentAction</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="234" pos:column="1">void</name></type> <name><name pos:line="234" pos:column="6">UndoHistory</name><op:operator pos:line="234" pos:column="17">::</op:operator><name pos:line="234" pos:column="19">BeginUndoAction</name></name><parameter_list pos:line="234" pos:column="34">()</parameter_list> <block pos:line="234" pos:column="37">{
	<expr_stmt><expr><call><name pos:line="235" pos:column="9">EnsureUndoRoom</name><argument_list pos:line="235" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="236" pos:column="9">if <condition pos:line="236" pos:column="12">(<expr><name pos:line="236" pos:column="13">undoSequenceDepth</name> <op:operator pos:line="236" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="236" pos:column="34">0</lit:literal></expr>)</condition><then pos:line="236" pos:column="36"> <block pos:line="236" pos:column="37">{
		<if pos:line="237" pos:column="17">if <condition pos:line="237" pos:column="20">(<expr><name><name pos:line="237" pos:column="21">actions</name><index pos:line="237" pos:column="28">[<expr><name pos:line="237" pos:column="29">currentAction</name></expr>]</index></name><op:operator pos:line="237" pos:column="43">.</op:operator><name pos:line="237" pos:column="44">at</name> <op:operator pos:line="237" pos:column="47">!=</op:operator> <name pos:line="237" pos:column="50">startAction</name></expr>)</condition><then pos:line="237" pos:column="62"> <block pos:line="237" pos:column="63">{
			<expr_stmt><expr><name pos:line="238" pos:column="25">currentAction</name><op:operator pos:line="238" pos:column="38">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="239" pos:column="25">actions</name><index pos:line="239" pos:column="32">[<expr><name pos:line="239" pos:column="33">currentAction</name></expr>]</index></name><op:operator pos:line="239" pos:column="47">.</op:operator><call><name pos:line="239" pos:column="48">Create</name><argument_list pos:line="239" pos:column="54">(<argument><expr><name pos:line="239" pos:column="55">startAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="240" pos:column="25">maxAction</name> <op:operator pos:line="240" pos:column="35">=</op:operator> <name pos:line="240" pos:column="37">currentAction</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name pos:line="242" pos:column="17">actions</name><index pos:line="242" pos:column="24">[<expr><name pos:line="242" pos:column="25">currentAction</name></expr>]</index></name><op:operator pos:line="242" pos:column="39">.</op:operator><name pos:line="242" pos:column="40">mayCoalesce</name> <op:operator pos:line="242" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="242" pos:column="54">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="244" pos:column="9">undoSequenceDepth</name><op:operator pos:line="244" pos:column="26">++</op:operator></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="247" pos:column="1">void</name></type> <name><name pos:line="247" pos:column="6">UndoHistory</name><op:operator pos:line="247" pos:column="17">::</op:operator><name pos:line="247" pos:column="19">EndUndoAction</name></name><parameter_list pos:line="247" pos:column="32">()</parameter_list> <block pos:line="247" pos:column="35">{
	<expr_stmt><expr><call><name pos:line="248" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="248" pos:column="24">(<argument><expr><name pos:line="248" pos:column="25">undoSequenceDepth</name> <op:operator pos:line="248" pos:column="43">&gt;</op:operator> <lit:literal type="number" pos:line="248" pos:column="45">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="249" pos:column="9">EnsureUndoRoom</name><argument_list pos:line="249" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="250" pos:column="9">undoSequenceDepth</name><op:operator pos:line="250" pos:column="26">--</op:operator></expr>;</expr_stmt>
	<if pos:line="251" pos:column="9">if <condition pos:line="251" pos:column="12">(<expr><lit:literal type="number" pos:line="251" pos:column="13">0</lit:literal> <op:operator pos:line="251" pos:column="15">==</op:operator> <name pos:line="251" pos:column="18">undoSequenceDepth</name></expr>)</condition><then pos:line="251" pos:column="36"> <block pos:line="251" pos:column="37">{
		<if pos:line="252" pos:column="17">if <condition pos:line="252" pos:column="20">(<expr><name><name pos:line="252" pos:column="21">actions</name><index pos:line="252" pos:column="28">[<expr><name pos:line="252" pos:column="29">currentAction</name></expr>]</index></name><op:operator pos:line="252" pos:column="43">.</op:operator><name pos:line="252" pos:column="44">at</name> <op:operator pos:line="252" pos:column="47">!=</op:operator> <name pos:line="252" pos:column="50">startAction</name></expr>)</condition><then pos:line="252" pos:column="62"> <block pos:line="252" pos:column="63">{
			<expr_stmt><expr><name pos:line="253" pos:column="25">currentAction</name><op:operator pos:line="253" pos:column="38">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="254" pos:column="25">actions</name><index pos:line="254" pos:column="32">[<expr><name pos:line="254" pos:column="33">currentAction</name></expr>]</index></name><op:operator pos:line="254" pos:column="47">.</op:operator><call><name pos:line="254" pos:column="48">Create</name><argument_list pos:line="254" pos:column="54">(<argument><expr><name pos:line="254" pos:column="55">startAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="255" pos:column="25">maxAction</name> <op:operator pos:line="255" pos:column="35">=</op:operator> <name pos:line="255" pos:column="37">currentAction</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name pos:line="257" pos:column="17">actions</name><index pos:line="257" pos:column="24">[<expr><name pos:line="257" pos:column="25">currentAction</name></expr>]</index></name><op:operator pos:line="257" pos:column="39">.</op:operator><name pos:line="257" pos:column="40">mayCoalesce</name> <op:operator pos:line="257" pos:column="52">=</op:operator> <lit:literal type="boolean" pos:line="257" pos:column="54">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="261" pos:column="1">void</name></type> <name><name pos:line="261" pos:column="6">UndoHistory</name><op:operator pos:line="261" pos:column="17">::</op:operator><name pos:line="261" pos:column="19">DropUndoSequence</name></name><parameter_list pos:line="261" pos:column="35">()</parameter_list> <block pos:line="261" pos:column="38">{
	<expr_stmt><expr><name pos:line="262" pos:column="9">undoSequenceDepth</name> <op:operator pos:line="262" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="262" pos:column="29">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="265" pos:column="1">void</name></type> <name><name pos:line="265" pos:column="6">UndoHistory</name><op:operator pos:line="265" pos:column="17">::</op:operator><name pos:line="265" pos:column="19">DeleteUndoHistory</name></name><parameter_list pos:line="265" pos:column="36">()</parameter_list> <block pos:line="265" pos:column="39">{
	<for pos:line="266" pos:column="9">for (<init><decl><type><name pos:line="266" pos:column="14">int</name></type> <name pos:line="266" pos:column="18">i</name> <init pos:line="266" pos:column="20">= <expr><lit:literal type="number" pos:line="266" pos:column="22">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="266" pos:column="25">i</name> <op:operator pos:line="266" pos:column="27">&lt;</op:operator> <name pos:line="266" pos:column="29">maxAction</name></expr>;</condition> <incr><expr><name pos:line="266" pos:column="40">i</name><op:operator pos:line="266" pos:column="41">++</op:operator></expr></incr>)
		<expr_stmt><expr><name><name pos:line="267" pos:column="17">actions</name><index pos:line="267" pos:column="24">[<expr><name pos:line="267" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="267" pos:column="27">.</op:operator><call><name pos:line="267" pos:column="28">Destroy</name><argument_list pos:line="267" pos:column="35">()</argument_list></call></expr>;</expr_stmt></for>
	<expr_stmt><expr><name pos:line="268" pos:column="9">maxAction</name> <op:operator pos:line="268" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="268" pos:column="21">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="269" pos:column="9">currentAction</name> <op:operator pos:line="269" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="269" pos:column="25">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="270" pos:column="9">actions</name><index pos:line="270" pos:column="16">[<expr><name pos:line="270" pos:column="17">currentAction</name></expr>]</index></name><op:operator pos:line="270" pos:column="31">.</op:operator><call><name pos:line="270" pos:column="32">Create</name><argument_list pos:line="270" pos:column="38">(<argument><expr><name pos:line="270" pos:column="39">startAction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="271" pos:column="9">savePoint</name> <op:operator pos:line="271" pos:column="19">=</op:operator> <lit:literal type="number" pos:line="271" pos:column="21">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="274" pos:column="1">void</name></type> <name><name pos:line="274" pos:column="6">UndoHistory</name><op:operator pos:line="274" pos:column="17">::</op:operator><name pos:line="274" pos:column="19">SetSavePoint</name></name><parameter_list pos:line="274" pos:column="31">()</parameter_list> <block pos:line="274" pos:column="34">{
	<expr_stmt><expr><name pos:line="275" pos:column="9">savePoint</name> <op:operator pos:line="275" pos:column="19">=</op:operator> <name pos:line="275" pos:column="21">currentAction</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="278" pos:column="1">bool</name></type> <name><name pos:line="278" pos:column="6">UndoHistory</name><op:operator pos:line="278" pos:column="17">::</op:operator><name pos:line="278" pos:column="19">IsSavePoint</name></name><parameter_list pos:line="278" pos:column="30">()</parameter_list> <specifier pos:line="278" pos:column="33">const</specifier> <block pos:line="278" pos:column="39">{
	<return pos:line="279" pos:column="9">return <expr><name pos:line="279" pos:column="16">savePoint</name> <op:operator pos:line="279" pos:column="26">==</op:operator> <name pos:line="279" pos:column="29">currentAction</name></expr>;</return>
}</block></function>

<function><type><name pos:line="282" pos:column="1">bool</name></type> <name><name pos:line="282" pos:column="6">UndoHistory</name><op:operator pos:line="282" pos:column="17">::</op:operator><name pos:line="282" pos:column="19">CanUndo</name></name><parameter_list pos:line="282" pos:column="26">()</parameter_list> <specifier pos:line="282" pos:column="29">const</specifier> <block pos:line="282" pos:column="35">{
	<return pos:line="283" pos:column="9">return <expr><op:operator pos:line="283" pos:column="16">(</op:operator><name pos:line="283" pos:column="17">currentAction</name> <op:operator pos:line="283" pos:column="31">&gt;</op:operator> <lit:literal type="number" pos:line="283" pos:column="33">0</lit:literal><op:operator pos:line="283" pos:column="34">)</op:operator> <op:operator pos:line="283" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="283" pos:column="39">(</op:operator><name pos:line="283" pos:column="40">maxAction</name> <op:operator pos:line="283" pos:column="50">&gt;</op:operator> <lit:literal type="number" pos:line="283" pos:column="52">0</lit:literal><op:operator pos:line="283" pos:column="53">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="286" pos:column="1">int</name></type> <name><name pos:line="286" pos:column="5">UndoHistory</name><op:operator pos:line="286" pos:column="16">::</op:operator><name pos:line="286" pos:column="18">StartUndo</name></name><parameter_list pos:line="286" pos:column="27">()</parameter_list> <block pos:line="286" pos:column="30">{
	<comment type="line" pos:line="287" pos:column="9">// Drop any trailing startAction</comment>
	<if pos:line="288" pos:column="9">if <condition pos:line="288" pos:column="12">(<expr><name><name pos:line="288" pos:column="13">actions</name><index pos:line="288" pos:column="20">[<expr><name pos:line="288" pos:column="21">currentAction</name></expr>]</index></name><op:operator pos:line="288" pos:column="35">.</op:operator><name pos:line="288" pos:column="36">at</name> <op:operator pos:line="288" pos:column="39">==</op:operator> <name pos:line="288" pos:column="42">startAction</name> <op:operator pos:line="288" pos:column="54">&amp;&amp;</op:operator> <name pos:line="288" pos:column="57">currentAction</name> <op:operator pos:line="288" pos:column="71">&gt;</op:operator> <lit:literal type="number" pos:line="288" pos:column="73">0</lit:literal></expr>)</condition><then pos:line="288" pos:column="75">
		<expr_stmt><expr><name pos:line="289" pos:column="17">currentAction</name><op:operator pos:line="289" pos:column="30">--</op:operator></expr>;</expr_stmt></then></if>

	<comment type="line" pos:line="291" pos:column="9">// Count the steps in this action</comment>
	<decl_stmt><decl><type><name pos:line="292" pos:column="9">int</name></type> <name pos:line="292" pos:column="13">act</name> <init pos:line="292" pos:column="17">= <expr><name pos:line="292" pos:column="19">currentAction</name></expr></init></decl>;</decl_stmt>
	<while pos:line="293" pos:column="9">while <condition pos:line="293" pos:column="15">(<expr><name><name pos:line="293" pos:column="16">actions</name><index pos:line="293" pos:column="23">[<expr><name pos:line="293" pos:column="24">act</name></expr>]</index></name><op:operator pos:line="293" pos:column="28">.</op:operator><name pos:line="293" pos:column="29">at</name> <op:operator pos:line="293" pos:column="32">!=</op:operator> <name pos:line="293" pos:column="35">startAction</name> <op:operator pos:line="293" pos:column="47">&amp;&amp;</op:operator> <name pos:line="293" pos:column="50">act</name> <op:operator pos:line="293" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="293" pos:column="56">0</lit:literal></expr>)</condition> <block pos:line="293" pos:column="59">{
		<expr_stmt><expr><name pos:line="294" pos:column="17">act</name><op:operator pos:line="294" pos:column="20">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="296" pos:column="9">return <expr><name pos:line="296" pos:column="16">currentAction</name> <op:operator pos:line="296" pos:column="30">-</op:operator> <name pos:line="296" pos:column="32">act</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="299" pos:column="1">const</specifier> <name pos:line="299" pos:column="7">Action</name> <type:modifier pos:line="299" pos:column="14">&amp;</type:modifier></type><name><name pos:line="299" pos:column="15">UndoHistory</name><op:operator pos:line="299" pos:column="26">::</op:operator><name pos:line="299" pos:column="28">GetUndoStep</name></name><parameter_list pos:line="299" pos:column="39">()</parameter_list> <specifier pos:line="299" pos:column="42">const</specifier> <block pos:line="299" pos:column="48">{
	<return pos:line="300" pos:column="9">return <expr><name><name pos:line="300" pos:column="16">actions</name><index pos:line="300" pos:column="23">[<expr><name pos:line="300" pos:column="24">currentAction</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name pos:line="303" pos:column="1">void</name></type> <name><name pos:line="303" pos:column="6">UndoHistory</name><op:operator pos:line="303" pos:column="17">::</op:operator><name pos:line="303" pos:column="19">CompletedUndoStep</name></name><parameter_list pos:line="303" pos:column="36">()</parameter_list> <block pos:line="303" pos:column="39">{
	<expr_stmt><expr><name pos:line="304" pos:column="9">currentAction</name><op:operator pos:line="304" pos:column="22">--</op:operator></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="307" pos:column="1">bool</name></type> <name><name pos:line="307" pos:column="6">UndoHistory</name><op:operator pos:line="307" pos:column="17">::</op:operator><name pos:line="307" pos:column="19">CanRedo</name></name><parameter_list pos:line="307" pos:column="26">()</parameter_list> <specifier pos:line="307" pos:column="29">const</specifier> <block pos:line="307" pos:column="35">{
	<return pos:line="308" pos:column="9">return <expr><name pos:line="308" pos:column="16">maxAction</name> <op:operator pos:line="308" pos:column="26">&gt;</op:operator> <name pos:line="308" pos:column="28">currentAction</name></expr>;</return>
}</block></function>

<function><type><name pos:line="311" pos:column="1">int</name></type> <name><name pos:line="311" pos:column="5">UndoHistory</name><op:operator pos:line="311" pos:column="16">::</op:operator><name pos:line="311" pos:column="18">StartRedo</name></name><parameter_list pos:line="311" pos:column="27">()</parameter_list> <block pos:line="311" pos:column="30">{
	<comment type="line" pos:line="312" pos:column="9">// Drop any leading startAction</comment>
	<if pos:line="313" pos:column="9">if <condition pos:line="313" pos:column="12">(<expr><name><name pos:line="313" pos:column="13">actions</name><index pos:line="313" pos:column="20">[<expr><name pos:line="313" pos:column="21">currentAction</name></expr>]</index></name><op:operator pos:line="313" pos:column="35">.</op:operator><name pos:line="313" pos:column="36">at</name> <op:operator pos:line="313" pos:column="39">==</op:operator> <name pos:line="313" pos:column="42">startAction</name> <op:operator pos:line="313" pos:column="54">&amp;&amp;</op:operator> <name pos:line="313" pos:column="57">currentAction</name> <op:operator pos:line="313" pos:column="71">&lt;</op:operator> <name pos:line="313" pos:column="73">maxAction</name></expr>)</condition><then pos:line="313" pos:column="83">
		<expr_stmt><expr><name pos:line="314" pos:column="17">currentAction</name><op:operator pos:line="314" pos:column="30">++</op:operator></expr>;</expr_stmt></then></if>

	<comment type="line" pos:line="316" pos:column="9">// Count the steps in this action</comment>
	<decl_stmt><decl><type><name pos:line="317" pos:column="9">int</name></type> <name pos:line="317" pos:column="13">act</name> <init pos:line="317" pos:column="17">= <expr><name pos:line="317" pos:column="19">currentAction</name></expr></init></decl>;</decl_stmt>
	<while pos:line="318" pos:column="9">while <condition pos:line="318" pos:column="15">(<expr><name><name pos:line="318" pos:column="16">actions</name><index pos:line="318" pos:column="23">[<expr><name pos:line="318" pos:column="24">act</name></expr>]</index></name><op:operator pos:line="318" pos:column="28">.</op:operator><name pos:line="318" pos:column="29">at</name> <op:operator pos:line="318" pos:column="32">!=</op:operator> <name pos:line="318" pos:column="35">startAction</name> <op:operator pos:line="318" pos:column="47">&amp;&amp;</op:operator> <name pos:line="318" pos:column="50">act</name> <op:operator pos:line="318" pos:column="54">&lt;</op:operator> <name pos:line="318" pos:column="56">maxAction</name></expr>)</condition> <block pos:line="318" pos:column="67">{
		<expr_stmt><expr><name pos:line="319" pos:column="17">act</name><op:operator pos:line="319" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="321" pos:column="9">return <expr><name pos:line="321" pos:column="16">act</name> <op:operator pos:line="321" pos:column="20">-</op:operator> <name pos:line="321" pos:column="22">currentAction</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="324" pos:column="1">const</specifier> <name pos:line="324" pos:column="7">Action</name> <type:modifier pos:line="324" pos:column="14">&amp;</type:modifier></type><name><name pos:line="324" pos:column="15">UndoHistory</name><op:operator pos:line="324" pos:column="26">::</op:operator><name pos:line="324" pos:column="28">GetRedoStep</name></name><parameter_list pos:line="324" pos:column="39">()</parameter_list> <specifier pos:line="324" pos:column="42">const</specifier> <block pos:line="324" pos:column="48">{
	<return pos:line="325" pos:column="9">return <expr><name><name pos:line="325" pos:column="16">actions</name><index pos:line="325" pos:column="23">[<expr><name pos:line="325" pos:column="24">currentAction</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name pos:line="328" pos:column="1">void</name></type> <name><name pos:line="328" pos:column="6">UndoHistory</name><op:operator pos:line="328" pos:column="17">::</op:operator><name pos:line="328" pos:column="19">CompletedRedoStep</name></name><parameter_list pos:line="328" pos:column="36">()</parameter_list> <block pos:line="328" pos:column="39">{
	<expr_stmt><expr><name pos:line="329" pos:column="9">currentAction</name><op:operator pos:line="329" pos:column="22">++</op:operator></expr>;</expr_stmt>
}</block></function>

<constructor><name><name pos:line="332" pos:column="1">CellBuffer</name><op:operator pos:line="332" pos:column="11">::</op:operator><name pos:line="332" pos:column="13">CellBuffer</name></name><parameter_list pos:line="332" pos:column="23">()</parameter_list> <block pos:line="332" pos:column="26">{
	<expr_stmt><expr><name pos:line="333" pos:column="9">readOnly</name> <op:operator pos:line="333" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="333" pos:column="20">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="334" pos:column="9">collectingUndo</name> <op:operator pos:line="334" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="334" pos:column="26">true</lit:literal></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="337" pos:column="1">CellBuffer</name><op:operator pos:line="337" pos:column="11">::</op:operator>~<name pos:line="337" pos:column="14">CellBuffer</name></name><parameter_list pos:line="337" pos:column="24">()</parameter_list> <block pos:line="337" pos:column="27">{
}</block></destructor>

<function><type><name pos:line="340" pos:column="1">char</name></type> <name><name pos:line="340" pos:column="6">CellBuffer</name><op:operator pos:line="340" pos:column="16">::</op:operator><name pos:line="340" pos:column="18">CharAt</name></name><parameter_list pos:line="340" pos:column="24">(<param><decl><type><name pos:line="340" pos:column="25">int</name></type> <name pos:line="340" pos:column="29">position</name></decl></param>)</parameter_list> <specifier pos:line="340" pos:column="39">const</specifier> <block pos:line="340" pos:column="45">{
	<return pos:line="341" pos:column="9">return <expr><call><name><name pos:line="341" pos:column="16">substance</name><op:operator pos:line="341" pos:column="25">.</op:operator><name pos:line="341" pos:column="26">ValueAt</name></name><argument_list pos:line="341" pos:column="33">(<argument><expr><name pos:line="341" pos:column="34">position</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="344" pos:column="1">void</name></type> <name><name pos:line="344" pos:column="6">CellBuffer</name><op:operator pos:line="344" pos:column="16">::</op:operator><name pos:line="344" pos:column="18">GetCharRange</name></name><parameter_list pos:line="344" pos:column="30">(<param><decl><type><name pos:line="344" pos:column="31">char</name> <type:modifier pos:line="344" pos:column="36">*</type:modifier></type><name pos:line="344" pos:column="37">buffer</name></decl></param>, <param><decl><type><name pos:line="344" pos:column="45">int</name></type> <name pos:line="344" pos:column="49">position</name></decl></param>, <param><decl><type><name pos:line="344" pos:column="59">int</name></type> <name pos:line="344" pos:column="63">lengthRetrieve</name></decl></param>)</parameter_list> <specifier pos:line="344" pos:column="79">const</specifier> <block pos:line="344" pos:column="85">{
	<if pos:line="345" pos:column="9">if <condition pos:line="345" pos:column="12">(<expr><name pos:line="345" pos:column="13">lengthRetrieve</name> <op:operator pos:line="345" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="345" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="345" pos:column="32">
		<return pos:line="346" pos:column="17">return;</return></then></if>
	<if pos:line="347" pos:column="9">if <condition pos:line="347" pos:column="12">(<expr><name pos:line="347" pos:column="13">position</name> <op:operator pos:line="347" pos:column="22">&lt;</op:operator> <lit:literal type="number" pos:line="347" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="347" pos:column="26">
		<return pos:line="348" pos:column="17">return;</return></then></if>
	<if pos:line="349" pos:column="9">if <condition pos:line="349" pos:column="12">(<expr><op:operator pos:line="349" pos:column="13">(</op:operator><name pos:line="349" pos:column="14">position</name> <op:operator pos:line="349" pos:column="23">+</op:operator> <name pos:line="349" pos:column="25">lengthRetrieve</name><op:operator pos:line="349" pos:column="39">)</op:operator> <op:operator pos:line="349" pos:column="41">&gt;</op:operator> <call><name><name pos:line="349" pos:column="43">substance</name><op:operator pos:line="349" pos:column="52">.</op:operator><name pos:line="349" pos:column="53">Length</name></name><argument_list pos:line="349" pos:column="59">()</argument_list></call></expr>)</condition><then pos:line="349" pos:column="62"> <block pos:line="349" pos:column="63">{
		<expr_stmt><expr><call><name><name pos:line="350" pos:column="17">Platform</name><op:operator pos:line="350" pos:column="25">::</op:operator><name pos:line="350" pos:column="27">DebugPrintf</name></name><argument_list pos:line="350" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="350" pos:column="39">"Bad GetCharRange %d for %d of %d\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="350" pos:column="77">position</name></expr></argument>,
		                      <argument><expr><name pos:line="351" pos:column="39">lengthRetrieve</name></expr></argument>, <argument><expr><call><name><name pos:line="351" pos:column="55">substance</name><op:operator pos:line="351" pos:column="64">.</op:operator><name pos:line="351" pos:column="65">Length</name></name><argument_list pos:line="351" pos:column="71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="352" pos:column="17">return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="354" pos:column="9">substance</name><op:operator pos:line="354" pos:column="18">.</op:operator><name pos:line="354" pos:column="19">GetRange</name></name><argument_list pos:line="354" pos:column="27">(<argument><expr><name pos:line="354" pos:column="28">buffer</name></expr></argument>, <argument><expr><name pos:line="354" pos:column="36">position</name></expr></argument>, <argument><expr><name pos:line="354" pos:column="46">lengthRetrieve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="357" pos:column="1">char</name></type> <name><name pos:line="357" pos:column="6">CellBuffer</name><op:operator pos:line="357" pos:column="16">::</op:operator><name pos:line="357" pos:column="18">StyleAt</name></name><parameter_list pos:line="357" pos:column="25">(<param><decl><type><name pos:line="357" pos:column="26">int</name></type> <name pos:line="357" pos:column="30">position</name></decl></param>)</parameter_list> <specifier pos:line="357" pos:column="40">const</specifier> <block pos:line="357" pos:column="46">{
	<return pos:line="358" pos:column="9">return <expr><call><name><name pos:line="358" pos:column="16">style</name><op:operator pos:line="358" pos:column="21">.</op:operator><name pos:line="358" pos:column="22">ValueAt</name></name><argument_list pos:line="358" pos:column="29">(<argument><expr><name pos:line="358" pos:column="30">position</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="361" pos:column="1">void</name></type> <name><name pos:line="361" pos:column="6">CellBuffer</name><op:operator pos:line="361" pos:column="16">::</op:operator><name pos:line="361" pos:column="18">GetStyleRange</name></name><parameter_list pos:line="361" pos:column="31">(<param><decl><type><name pos:line="361" pos:column="32">unsigned</name> <name pos:line="361" pos:column="41">char</name> <type:modifier pos:line="361" pos:column="46">*</type:modifier></type><name pos:line="361" pos:column="47">buffer</name></decl></param>, <param><decl><type><name pos:line="361" pos:column="55">int</name></type> <name pos:line="361" pos:column="59">position</name></decl></param>, <param><decl><type><name pos:line="361" pos:column="69">int</name></type> <name pos:line="361" pos:column="73">lengthRetrieve</name></decl></param>)</parameter_list> <specifier pos:line="361" pos:column="89">const</specifier> <block pos:line="361" pos:column="95">{
	<if pos:line="362" pos:column="9">if <condition pos:line="362" pos:column="12">(<expr><name pos:line="362" pos:column="13">lengthRetrieve</name> <op:operator pos:line="362" pos:column="28">&lt;</op:operator> <lit:literal type="number" pos:line="362" pos:column="30">0</lit:literal></expr>)</condition><then pos:line="362" pos:column="32">
		<return pos:line="363" pos:column="17">return;</return></then></if>
	<if pos:line="364" pos:column="9">if <condition pos:line="364" pos:column="12">(<expr><name pos:line="364" pos:column="13">position</name> <op:operator pos:line="364" pos:column="22">&lt;</op:operator> <lit:literal type="number" pos:line="364" pos:column="24">0</lit:literal></expr>)</condition><then pos:line="364" pos:column="26">
		<return pos:line="365" pos:column="17">return;</return></then></if>
	<if pos:line="366" pos:column="9">if <condition pos:line="366" pos:column="12">(<expr><op:operator pos:line="366" pos:column="13">(</op:operator><name pos:line="366" pos:column="14">position</name> <op:operator pos:line="366" pos:column="23">+</op:operator> <name pos:line="366" pos:column="25">lengthRetrieve</name><op:operator pos:line="366" pos:column="39">)</op:operator> <op:operator pos:line="366" pos:column="41">&gt;</op:operator> <call><name><name pos:line="366" pos:column="43">style</name><op:operator pos:line="366" pos:column="48">.</op:operator><name pos:line="366" pos:column="49">Length</name></name><argument_list pos:line="366" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="366" pos:column="58"> <block pos:line="366" pos:column="59">{
		<expr_stmt><expr><call><name><name pos:line="367" pos:column="17">Platform</name><op:operator pos:line="367" pos:column="25">::</op:operator><name pos:line="367" pos:column="27">DebugPrintf</name></name><argument_list pos:line="367" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="367" pos:column="39">"Bad GetStyleRange %d for %d of %d\n"</lit:literal></expr></argument>, <argument><expr><name pos:line="367" pos:column="78">position</name></expr></argument>,
		                      <argument><expr><name pos:line="368" pos:column="39">lengthRetrieve</name></expr></argument>, <argument><expr><call><name><name pos:line="368" pos:column="55">style</name><op:operator pos:line="368" pos:column="60">.</op:operator><name pos:line="368" pos:column="61">Length</name></name><argument_list pos:line="368" pos:column="67">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="369" pos:column="17">return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="371" pos:column="9">style</name><op:operator pos:line="371" pos:column="14">.</op:operator><name pos:line="371" pos:column="15">GetRange</name></name><argument_list pos:line="371" pos:column="23">(<argument><expr><call><name><name pos:line="371" pos:column="24">reinterpret_cast</name><argument_list pos:line="371" pos:column="40">&lt;<argument><expr><name pos:line="371" pos:column="41">char</name> <op:operator pos:line="371" pos:column="46">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="371" pos:column="48">(<argument><expr><name pos:line="371" pos:column="49">buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="371" pos:column="58">position</name></expr></argument>, <argument><expr><name pos:line="371" pos:column="68">lengthRetrieve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="374" pos:column="1">const</specifier> <name pos:line="374" pos:column="7">char</name> <type:modifier pos:line="374" pos:column="12">*</type:modifier></type><name><name pos:line="374" pos:column="13">CellBuffer</name><op:operator pos:line="374" pos:column="23">::</op:operator><name pos:line="374" pos:column="25">BufferPointer</name></name><parameter_list pos:line="374" pos:column="38">()</parameter_list> <block pos:line="374" pos:column="41">{
	<return pos:line="375" pos:column="9">return <expr><call><name><name pos:line="375" pos:column="16">substance</name><op:operator pos:line="375" pos:column="25">.</op:operator><name pos:line="375" pos:column="26">BufferPointer</name></name><argument_list pos:line="375" pos:column="39">()</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="378" pos:column="1">// The char* returned is to an allocation owned by the undo history</comment>
<function><type><specifier pos:line="379" pos:column="1">const</specifier> <name pos:line="379" pos:column="7">char</name> <type:modifier pos:line="379" pos:column="12">*</type:modifier></type><name><name pos:line="379" pos:column="13">CellBuffer</name><op:operator pos:line="379" pos:column="23">::</op:operator><name pos:line="379" pos:column="25">InsertString</name></name><parameter_list pos:line="379" pos:column="37">(<param><decl><type><name pos:line="379" pos:column="38">int</name></type> <name pos:line="379" pos:column="42">position</name></decl></param>, <param><decl><type><specifier pos:line="379" pos:column="52">const</specifier> <name pos:line="379" pos:column="58">char</name> <type:modifier pos:line="379" pos:column="63">*</type:modifier></type><name pos:line="379" pos:column="64">s</name></decl></param>, <param><decl><type><name pos:line="379" pos:column="67">int</name></type> <name pos:line="379" pos:column="71">insertLength</name></decl></param>, <param><decl><type><name pos:line="379" pos:column="85">bool</name> <type:modifier pos:line="379" pos:column="90">&amp;</type:modifier></type><name pos:line="379" pos:column="91">startSequence</name></decl></param>)</parameter_list> <block pos:line="379" pos:column="106">{
	<decl_stmt><decl><type><name pos:line="380" pos:column="9">char</name> <type:modifier pos:line="380" pos:column="14">*</type:modifier></type><name pos:line="380" pos:column="15">data</name> <init pos:line="380" pos:column="20">= <expr><lit:literal type="number" pos:line="380" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="381" pos:column="9">// InsertString and DeleteChars are the bottleneck though which all changes occur</comment>
	<if pos:line="382" pos:column="9">if <condition pos:line="382" pos:column="12">(<expr><op:operator pos:line="382" pos:column="13">!</op:operator><name pos:line="382" pos:column="14">readOnly</name></expr>)</condition><then pos:line="382" pos:column="23"> <block pos:line="382" pos:column="24">{
		<if pos:line="383" pos:column="17">if <condition pos:line="383" pos:column="20">(<expr><name pos:line="383" pos:column="21">collectingUndo</name></expr>)</condition><then pos:line="383" pos:column="36"> <block pos:line="383" pos:column="37">{
			<comment type="line" pos:line="384" pos:column="25">// Save into the undo/redo stack, but only the characters - not the formatting</comment>
			<comment type="line" pos:line="385" pos:column="25">// This takes up about half load time</comment>
			<expr_stmt><expr><name pos:line="386" pos:column="25">data</name> <op:operator pos:line="386" pos:column="30">=</op:operator> <op:operator pos:line="386" pos:column="32">new</op:operator> <name><name pos:line="386" pos:column="36">char</name><index pos:line="386" pos:column="40">[<expr><name pos:line="386" pos:column="41">insertLength</name></expr>]</index></name></expr>;</expr_stmt>
			<for pos:line="387" pos:column="25">for (<init><decl><type><name pos:line="387" pos:column="30">int</name></type> <name pos:line="387" pos:column="34">i</name> <init pos:line="387" pos:column="36">= <expr><lit:literal type="number" pos:line="387" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="387" pos:column="41">i</name> <op:operator pos:line="387" pos:column="43">&lt;</op:operator> <name pos:line="387" pos:column="45">insertLength</name></expr>;</condition> <incr><expr><name pos:line="387" pos:column="59">i</name><op:operator pos:line="387" pos:column="60">++</op:operator></expr></incr>) <block pos:line="387" pos:column="64">{
				<expr_stmt><expr><name><name pos:line="388" pos:column="33">data</name><index pos:line="388" pos:column="37">[<expr><name pos:line="388" pos:column="38">i</name></expr>]</index></name> <op:operator pos:line="388" pos:column="41">=</op:operator> <name><name pos:line="388" pos:column="43">s</name><index pos:line="388" pos:column="44">[<expr><name pos:line="388" pos:column="45">i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name><name pos:line="390" pos:column="25">uh</name><op:operator pos:line="390" pos:column="27">.</op:operator><name pos:line="390" pos:column="28">AppendAction</name></name><argument_list pos:line="390" pos:column="40">(<argument><expr><name pos:line="390" pos:column="41">insertAction</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="55">position</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="65">data</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="71">insertLength</name></expr></argument>, <argument><expr><name pos:line="390" pos:column="85">startSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name pos:line="393" pos:column="17">BasicInsertString</name><argument_list pos:line="393" pos:column="34">(<argument><expr><name pos:line="393" pos:column="35">position</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="45">s</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="48">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="395" pos:column="9">return <expr><name pos:line="395" pos:column="16">data</name></expr>;</return>
}</block></function>

<function><type><name pos:line="398" pos:column="1">bool</name></type> <name><name pos:line="398" pos:column="6">CellBuffer</name><op:operator pos:line="398" pos:column="16">::</op:operator><name pos:line="398" pos:column="18">SetStyleAt</name></name><parameter_list pos:line="398" pos:column="28">(<param><decl><type><name pos:line="398" pos:column="29">int</name></type> <name pos:line="398" pos:column="33">position</name></decl></param>, <param><decl><type><name pos:line="398" pos:column="43">char</name></type> <name pos:line="398" pos:column="48">styleValue</name></decl></param>, <param><decl><type><name pos:line="398" pos:column="60">char</name></type> <name pos:line="398" pos:column="65">mask</name></decl></param>)</parameter_list> <block pos:line="398" pos:column="71">{
	<expr_stmt><expr><name pos:line="399" pos:column="9">styleValue</name> <op:operator pos:line="399" pos:column="20">&amp;=</op:operator> <name pos:line="399" pos:column="23">mask</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="400" pos:column="9">char</name></type> <name pos:line="400" pos:column="14">curVal</name> <init pos:line="400" pos:column="21">= <expr><call><name><name pos:line="400" pos:column="23">style</name><op:operator pos:line="400" pos:column="28">.</op:operator><name pos:line="400" pos:column="29">ValueAt</name></name><argument_list pos:line="400" pos:column="36">(<argument><expr><name pos:line="400" pos:column="37">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="401" pos:column="9">if <condition pos:line="401" pos:column="12">(<expr><op:operator pos:line="401" pos:column="13">(</op:operator><name pos:line="401" pos:column="14">curVal</name> <op:operator pos:line="401" pos:column="21">&amp;</op:operator> <name pos:line="401" pos:column="23">mask</name><op:operator pos:line="401" pos:column="27">)</op:operator> <op:operator pos:line="401" pos:column="29">!=</op:operator> <name pos:line="401" pos:column="32">styleValue</name></expr>)</condition><then pos:line="401" pos:column="43"> <block pos:line="401" pos:column="44">{
		<expr_stmt><expr><call><name><name pos:line="402" pos:column="17">style</name><op:operator pos:line="402" pos:column="22">.</op:operator><name pos:line="402" pos:column="23">SetValueAt</name></name><argument_list pos:line="402" pos:column="33">(<argument><expr><name pos:line="402" pos:column="34">position</name></expr></argument>, <argument><expr><call><name><name pos:line="402" pos:column="44">static_cast</name><argument_list pos:line="402" pos:column="55">&lt;<argument><expr><name pos:line="402" pos:column="56">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="402" pos:column="61">(<argument><expr><op:operator pos:line="402" pos:column="62">(</op:operator><name pos:line="402" pos:column="63">curVal</name> <op:operator pos:line="402" pos:column="70">&amp;</op:operator> <op:operator pos:line="402" pos:column="72">~</op:operator><name pos:line="402" pos:column="73">mask</name><op:operator pos:line="402" pos:column="77">)</op:operator> <op:operator pos:line="402" pos:column="79">|</op:operator> <name pos:line="402" pos:column="81">styleValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="403" pos:column="17">return <expr><lit:literal type="boolean" pos:line="403" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then> <else pos:line="404" pos:column="11">else <block pos:line="404" pos:column="16">{
		<return pos:line="405" pos:column="17">return <expr><lit:literal type="boolean" pos:line="405" pos:column="24">false</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="409" pos:column="1">bool</name></type> <name><name pos:line="409" pos:column="6">CellBuffer</name><op:operator pos:line="409" pos:column="16">::</op:operator><name pos:line="409" pos:column="18">SetStyleFor</name></name><parameter_list pos:line="409" pos:column="29">(<param><decl><type><name pos:line="409" pos:column="30">int</name></type> <name pos:line="409" pos:column="34">position</name></decl></param>, <param><decl><type><name pos:line="409" pos:column="44">int</name></type> <name pos:line="409" pos:column="48">lengthStyle</name></decl></param>, <param><decl><type><name pos:line="409" pos:column="61">char</name></type> <name pos:line="409" pos:column="66">styleValue</name></decl></param>, <param><decl><type><name pos:line="409" pos:column="78">char</name></type> <name pos:line="409" pos:column="83">mask</name></decl></param>)</parameter_list> <block pos:line="409" pos:column="89">{
	<decl_stmt><decl><type><name pos:line="410" pos:column="9">bool</name></type> <name pos:line="410" pos:column="14">changed</name> <init pos:line="410" pos:column="22">= <expr><lit:literal type="boolean" pos:line="410" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="411" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="411" pos:column="24">(<argument><expr><name pos:line="411" pos:column="25">lengthStyle</name> <op:operator pos:line="411" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="411" pos:column="40">0</lit:literal> <op:operator pos:line="411" pos:column="42">||</op:operator>
		<op:operator pos:line="412" pos:column="17">(</op:operator><name pos:line="412" pos:column="18">lengthStyle</name> <op:operator pos:line="412" pos:column="30">&gt;</op:operator> <lit:literal type="number" pos:line="412" pos:column="32">0</lit:literal> <op:operator pos:line="412" pos:column="34">&amp;&amp;</op:operator> <name pos:line="412" pos:column="37">lengthStyle</name> <op:operator pos:line="412" pos:column="49">+</op:operator> <name pos:line="412" pos:column="51">position</name> <op:operator pos:line="412" pos:column="60">&lt;=</op:operator> <call><name><name pos:line="412" pos:column="63">style</name><op:operator pos:line="412" pos:column="68">.</op:operator><name pos:line="412" pos:column="69">Length</name></name><argument_list pos:line="412" pos:column="75">()</argument_list></call><op:operator pos:line="412" pos:column="77">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while pos:line="413" pos:column="9">while <condition pos:line="413" pos:column="15">(<expr><name pos:line="413" pos:column="16">lengthStyle</name><op:operator pos:line="413" pos:column="27">--</op:operator></expr>)</condition> <block pos:line="413" pos:column="31">{
		<decl_stmt><decl><type><name pos:line="414" pos:column="17">char</name></type> <name pos:line="414" pos:column="22">curVal</name> <init pos:line="414" pos:column="29">= <expr><call><name><name pos:line="414" pos:column="31">style</name><op:operator pos:line="414" pos:column="36">.</op:operator><name pos:line="414" pos:column="37">ValueAt</name></name><argument_list pos:line="414" pos:column="44">(<argument><expr><name pos:line="414" pos:column="45">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="415" pos:column="17">if <condition pos:line="415" pos:column="20">(<expr><op:operator pos:line="415" pos:column="21">(</op:operator><name pos:line="415" pos:column="22">curVal</name> <op:operator pos:line="415" pos:column="29">&amp;</op:operator> <name pos:line="415" pos:column="31">mask</name><op:operator pos:line="415" pos:column="35">)</op:operator> <op:operator pos:line="415" pos:column="37">!=</op:operator> <name pos:line="415" pos:column="40">styleValue</name></expr>)</condition><then pos:line="415" pos:column="51"> <block pos:line="415" pos:column="52">{
			<expr_stmt><expr><call><name><name pos:line="416" pos:column="25">style</name><op:operator pos:line="416" pos:column="30">.</op:operator><name pos:line="416" pos:column="31">SetValueAt</name></name><argument_list pos:line="416" pos:column="41">(<argument><expr><name pos:line="416" pos:column="42">position</name></expr></argument>, <argument><expr><call><name><name pos:line="416" pos:column="52">static_cast</name><argument_list pos:line="416" pos:column="63">&lt;<argument><expr><name pos:line="416" pos:column="64">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="416" pos:column="69">(<argument><expr><op:operator pos:line="416" pos:column="70">(</op:operator><name pos:line="416" pos:column="71">curVal</name> <op:operator pos:line="416" pos:column="78">&amp;</op:operator> <op:operator pos:line="416" pos:column="80">~</op:operator><name pos:line="416" pos:column="81">mask</name><op:operator pos:line="416" pos:column="85">)</op:operator> <op:operator pos:line="416" pos:column="87">|</op:operator> <name pos:line="416" pos:column="89">styleValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="417" pos:column="25">changed</name> <op:operator pos:line="417" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="417" pos:column="35">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="419" pos:column="17">position</name><op:operator pos:line="419" pos:column="25">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<return pos:line="421" pos:column="9">return <expr><name pos:line="421" pos:column="16">changed</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="424" pos:column="1">// The char* returned is to an allocation owned by the undo history</comment>
<function><type><specifier pos:line="425" pos:column="1">const</specifier> <name pos:line="425" pos:column="7">char</name> <type:modifier pos:line="425" pos:column="12">*</type:modifier></type><name><name pos:line="425" pos:column="13">CellBuffer</name><op:operator pos:line="425" pos:column="23">::</op:operator><name pos:line="425" pos:column="25">DeleteChars</name></name><parameter_list pos:line="425" pos:column="36">(<param><decl><type><name pos:line="425" pos:column="37">int</name></type> <name pos:line="425" pos:column="41">position</name></decl></param>, <param><decl><type><name pos:line="425" pos:column="51">int</name></type> <name pos:line="425" pos:column="55">deleteLength</name></decl></param>, <param><decl><type><name pos:line="425" pos:column="69">bool</name> <type:modifier pos:line="425" pos:column="74">&amp;</type:modifier></type><name pos:line="425" pos:column="75">startSequence</name></decl></param>)</parameter_list> <block pos:line="425" pos:column="90">{
	<comment type="line" pos:line="426" pos:column="9">// InsertString and DeleteChars are the bottleneck though which all changes occur</comment>
	<expr_stmt><expr><call><name pos:line="427" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="427" pos:column="24">(<argument><expr><name pos:line="427" pos:column="25">deleteLength</name> <op:operator pos:line="427" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="427" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="428" pos:column="9">char</name> <type:modifier pos:line="428" pos:column="14">*</type:modifier></type><name pos:line="428" pos:column="15">data</name> <init pos:line="428" pos:column="20">= <expr><lit:literal type="number" pos:line="428" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="429" pos:column="9">if <condition pos:line="429" pos:column="12">(<expr><op:operator pos:line="429" pos:column="13">!</op:operator><name pos:line="429" pos:column="14">readOnly</name></expr>)</condition><then pos:line="429" pos:column="23"> <block pos:line="429" pos:column="24">{
		<if pos:line="430" pos:column="17">if <condition pos:line="430" pos:column="20">(<expr><name pos:line="430" pos:column="21">collectingUndo</name></expr>)</condition><then pos:line="430" pos:column="36"> <block pos:line="430" pos:column="37">{
			<comment type="line" pos:line="431" pos:column="25">// Save into the undo/redo stack, but only the characters - not the formatting</comment>
			<expr_stmt><expr><name pos:line="432" pos:column="25">data</name> <op:operator pos:line="432" pos:column="30">=</op:operator> <op:operator pos:line="432" pos:column="32">new</op:operator> <name><name pos:line="432" pos:column="36">char</name><index pos:line="432" pos:column="40">[<expr><name pos:line="432" pos:column="41">deleteLength</name></expr>]</index></name></expr>;</expr_stmt>
			<for pos:line="433" pos:column="25">for (<init><decl><type><name pos:line="433" pos:column="30">int</name></type> <name pos:line="433" pos:column="34">i</name> <init pos:line="433" pos:column="36">= <expr><lit:literal type="number" pos:line="433" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="433" pos:column="41">i</name> <op:operator pos:line="433" pos:column="43">&lt;</op:operator> <name pos:line="433" pos:column="45">deleteLength</name></expr>;</condition> <incr><expr><name pos:line="433" pos:column="59">i</name><op:operator pos:line="433" pos:column="60">++</op:operator></expr></incr>) <block pos:line="433" pos:column="64">{
				<expr_stmt><expr><name><name pos:line="434" pos:column="33">data</name><index pos:line="434" pos:column="37">[<expr><name pos:line="434" pos:column="38">i</name></expr>]</index></name> <op:operator pos:line="434" pos:column="41">=</op:operator> <call><name><name pos:line="434" pos:column="43">substance</name><op:operator pos:line="434" pos:column="52">.</op:operator><name pos:line="434" pos:column="53">ValueAt</name></name><argument_list pos:line="434" pos:column="60">(<argument><expr><name pos:line="434" pos:column="61">position</name> <op:operator pos:line="434" pos:column="70">+</op:operator> <name pos:line="434" pos:column="72">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name><name pos:line="436" pos:column="25">uh</name><op:operator pos:line="436" pos:column="27">.</op:operator><name pos:line="436" pos:column="28">AppendAction</name></name><argument_list pos:line="436" pos:column="40">(<argument><expr><name pos:line="436" pos:column="41">removeAction</name></expr></argument>, <argument><expr><name pos:line="436" pos:column="55">position</name></expr></argument>, <argument><expr><name pos:line="436" pos:column="65">data</name></expr></argument>, <argument><expr><name pos:line="436" pos:column="71">deleteLength</name></expr></argument>, <argument><expr><name pos:line="436" pos:column="85">startSequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name pos:line="439" pos:column="17">BasicDeleteChars</name><argument_list pos:line="439" pos:column="33">(<argument><expr><name pos:line="439" pos:column="34">position</name></expr></argument>, <argument><expr><name pos:line="439" pos:column="44">deleteLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="441" pos:column="9">return <expr><name pos:line="441" pos:column="16">data</name></expr>;</return>
}</block></function>

<function><type><name pos:line="444" pos:column="1">int</name></type> <name><name pos:line="444" pos:column="5">CellBuffer</name><op:operator pos:line="444" pos:column="15">::</op:operator><name pos:line="444" pos:column="17">Length</name></name><parameter_list pos:line="444" pos:column="23">()</parameter_list> <specifier pos:line="444" pos:column="26">const</specifier> <block pos:line="444" pos:column="32">{
	<return pos:line="445" pos:column="9">return <expr><call><name><name pos:line="445" pos:column="16">substance</name><op:operator pos:line="445" pos:column="25">.</op:operator><name pos:line="445" pos:column="26">Length</name></name><argument_list pos:line="445" pos:column="32">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="448" pos:column="1">void</name></type> <name><name pos:line="448" pos:column="6">CellBuffer</name><op:operator pos:line="448" pos:column="16">::</op:operator><name pos:line="448" pos:column="18">Allocate</name></name><parameter_list pos:line="448" pos:column="26">(<param><decl><type><name pos:line="448" pos:column="27">int</name></type> <name pos:line="448" pos:column="31">newSize</name></decl></param>)</parameter_list> <block pos:line="448" pos:column="40">{
	<expr_stmt><expr><call><name><name pos:line="449" pos:column="9">substance</name><op:operator pos:line="449" pos:column="18">.</op:operator><name pos:line="449" pos:column="19">ReAllocate</name></name><argument_list pos:line="449" pos:column="29">(<argument><expr><name pos:line="449" pos:column="30">newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="450" pos:column="9">style</name><op:operator pos:line="450" pos:column="14">.</op:operator><name pos:line="450" pos:column="15">ReAllocate</name></name><argument_list pos:line="450" pos:column="25">(<argument><expr><name pos:line="450" pos:column="26">newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="453" pos:column="1">void</name></type> <name><name pos:line="453" pos:column="6">CellBuffer</name><op:operator pos:line="453" pos:column="16">::</op:operator><name pos:line="453" pos:column="18">SetPerLine</name></name><parameter_list pos:line="453" pos:column="28">(<param><decl><type><name pos:line="453" pos:column="29">PerLine</name> <type:modifier pos:line="453" pos:column="37">*</type:modifier></type><name pos:line="453" pos:column="38">pl</name></decl></param>)</parameter_list> <block pos:line="453" pos:column="42">{
	<expr_stmt><expr><call><name><name pos:line="454" pos:column="9">lv</name><op:operator pos:line="454" pos:column="11">.</op:operator><name pos:line="454" pos:column="12">SetPerLine</name></name><argument_list pos:line="454" pos:column="22">(<argument><expr><name pos:line="454" pos:column="23">pl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="457" pos:column="1">int</name></type> <name><name pos:line="457" pos:column="5">CellBuffer</name><op:operator pos:line="457" pos:column="15">::</op:operator><name pos:line="457" pos:column="17">Lines</name></name><parameter_list pos:line="457" pos:column="22">()</parameter_list> <specifier pos:line="457" pos:column="25">const</specifier> <block pos:line="457" pos:column="31">{
	<return pos:line="458" pos:column="9">return <expr><call><name><name pos:line="458" pos:column="16">lv</name><op:operator pos:line="458" pos:column="18">.</op:operator><name pos:line="458" pos:column="19">Lines</name></name><argument_list pos:line="458" pos:column="24">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="461" pos:column="1">int</name></type> <name><name pos:line="461" pos:column="5">CellBuffer</name><op:operator pos:line="461" pos:column="15">::</op:operator><name pos:line="461" pos:column="17">LineStart</name></name><parameter_list pos:line="461" pos:column="26">(<param><decl><type><name pos:line="461" pos:column="27">int</name></type> <name pos:line="461" pos:column="31">line</name></decl></param>)</parameter_list> <specifier pos:line="461" pos:column="37">const</specifier> <block pos:line="461" pos:column="43">{
	<if pos:line="462" pos:column="9">if <condition pos:line="462" pos:column="12">(<expr><name pos:line="462" pos:column="13">line</name> <op:operator pos:line="462" pos:column="18">&lt;</op:operator> <lit:literal type="number" pos:line="462" pos:column="20">0</lit:literal></expr>)</condition><then pos:line="462" pos:column="22">
		<return pos:line="463" pos:column="17">return <expr><lit:literal type="number" pos:line="463" pos:column="24">0</lit:literal></expr>;</return></then>
	<else pos:line="464" pos:column="9">else <if pos:line="464" pos:column="14">if <condition pos:line="464" pos:column="17">(<expr><name pos:line="464" pos:column="18">line</name> <op:operator pos:line="464" pos:column="23">&gt;=</op:operator> <call><name pos:line="464" pos:column="26">Lines</name><argument_list pos:line="464" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="464" pos:column="34">
		<return pos:line="465" pos:column="17">return <expr><call><name pos:line="465" pos:column="24">Length</name><argument_list pos:line="465" pos:column="30">()</argument_list></call></expr>;</return></then>
	<else pos:line="466" pos:column="9">else
		<return pos:line="467" pos:column="17">return <expr><call><name><name pos:line="467" pos:column="24">lv</name><op:operator pos:line="467" pos:column="26">.</op:operator><name pos:line="467" pos:column="27">LineStart</name></name><argument_list pos:line="467" pos:column="36">(<argument><expr><name pos:line="467" pos:column="37">line</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
}</block></function>

<function><type><name pos:line="470" pos:column="1">bool</name></type> <name><name pos:line="470" pos:column="6">CellBuffer</name><op:operator pos:line="470" pos:column="16">::</op:operator><name pos:line="470" pos:column="18">IsReadOnly</name></name><parameter_list pos:line="470" pos:column="28">()</parameter_list> <specifier pos:line="470" pos:column="31">const</specifier> <block pos:line="470" pos:column="37">{
	<return pos:line="471" pos:column="9">return <expr><name pos:line="471" pos:column="16">readOnly</name></expr>;</return>
}</block></function>

<function><type><name pos:line="474" pos:column="1">void</name></type> <name><name pos:line="474" pos:column="6">CellBuffer</name><op:operator pos:line="474" pos:column="16">::</op:operator><name pos:line="474" pos:column="18">SetReadOnly</name></name><parameter_list pos:line="474" pos:column="29">(<param><decl><type><name pos:line="474" pos:column="30">bool</name></type> <name pos:line="474" pos:column="35">set</name></decl></param>)</parameter_list> <block pos:line="474" pos:column="40">{
	<expr_stmt><expr><name pos:line="475" pos:column="9">readOnly</name> <op:operator pos:line="475" pos:column="18">=</op:operator> <name pos:line="475" pos:column="20">set</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="478" pos:column="1">void</name></type> <name><name pos:line="478" pos:column="6">CellBuffer</name><op:operator pos:line="478" pos:column="16">::</op:operator><name pos:line="478" pos:column="18">SetSavePoint</name></name><parameter_list pos:line="478" pos:column="30">()</parameter_list> <block pos:line="478" pos:column="33">{
	<expr_stmt><expr><call><name><name pos:line="479" pos:column="9">uh</name><op:operator pos:line="479" pos:column="11">.</op:operator><name pos:line="479" pos:column="12">SetSavePoint</name></name><argument_list pos:line="479" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="482" pos:column="1">bool</name></type> <name><name pos:line="482" pos:column="6">CellBuffer</name><op:operator pos:line="482" pos:column="16">::</op:operator><name pos:line="482" pos:column="18">IsSavePoint</name></name><parameter_list pos:line="482" pos:column="29">()</parameter_list> <block pos:line="482" pos:column="32">{
	<return pos:line="483" pos:column="9">return <expr><call><name><name pos:line="483" pos:column="16">uh</name><op:operator pos:line="483" pos:column="18">.</op:operator><name pos:line="483" pos:column="19">IsSavePoint</name></name><argument_list pos:line="483" pos:column="30">()</argument_list></call></expr>;</return>
}</block></function>

<comment type="line" pos:line="486" pos:column="1">// Without undo</comment>

<function><type><name pos:line="488" pos:column="1">void</name></type> <name><name pos:line="488" pos:column="6">CellBuffer</name><op:operator pos:line="488" pos:column="16">::</op:operator><name pos:line="488" pos:column="18">InsertLine</name></name><parameter_list pos:line="488" pos:column="28">(<param><decl><type><name pos:line="488" pos:column="29">int</name></type> <name pos:line="488" pos:column="33">line</name></decl></param>, <param><decl><type><name pos:line="488" pos:column="39">int</name></type> <name pos:line="488" pos:column="43">position</name></decl></param>, <param><decl><type><name pos:line="488" pos:column="53">bool</name></type> <name pos:line="488" pos:column="58">lineStart</name></decl></param>)</parameter_list> <block pos:line="488" pos:column="69">{
	<expr_stmt><expr><call><name><name pos:line="489" pos:column="9">lv</name><op:operator pos:line="489" pos:column="11">.</op:operator><name pos:line="489" pos:column="12">InsertLine</name></name><argument_list pos:line="489" pos:column="22">(<argument><expr><name pos:line="489" pos:column="23">line</name></expr></argument>, <argument><expr><name pos:line="489" pos:column="29">position</name></expr></argument>, <argument><expr><name pos:line="489" pos:column="39">lineStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="492" pos:column="1">void</name></type> <name><name pos:line="492" pos:column="6">CellBuffer</name><op:operator pos:line="492" pos:column="16">::</op:operator><name pos:line="492" pos:column="18">RemoveLine</name></name><parameter_list pos:line="492" pos:column="28">(<param><decl><type><name pos:line="492" pos:column="29">int</name></type> <name pos:line="492" pos:column="33">line</name></decl></param>)</parameter_list> <block pos:line="492" pos:column="39">{
	<expr_stmt><expr><call><name><name pos:line="493" pos:column="9">lv</name><op:operator pos:line="493" pos:column="11">.</op:operator><name pos:line="493" pos:column="12">RemoveLine</name></name><argument_list pos:line="493" pos:column="22">(<argument><expr><name pos:line="493" pos:column="23">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="496" pos:column="1">void</name></type> <name><name pos:line="496" pos:column="6">CellBuffer</name><op:operator pos:line="496" pos:column="16">::</op:operator><name pos:line="496" pos:column="18">BasicInsertString</name></name><parameter_list pos:line="496" pos:column="35">(<param><decl><type><name pos:line="496" pos:column="36">int</name></type> <name pos:line="496" pos:column="40">position</name></decl></param>, <param><decl><type><specifier pos:line="496" pos:column="50">const</specifier> <name pos:line="496" pos:column="56">char</name> <type:modifier pos:line="496" pos:column="61">*</type:modifier></type><name pos:line="496" pos:column="62">s</name></decl></param>, <param><decl><type><name pos:line="496" pos:column="65">int</name></type> <name pos:line="496" pos:column="69">insertLength</name></decl></param>)</parameter_list> <block pos:line="496" pos:column="83">{
	<if pos:line="497" pos:column="9">if <condition pos:line="497" pos:column="12">(<expr><name pos:line="497" pos:column="13">insertLength</name> <op:operator pos:line="497" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="497" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="497" pos:column="31">
		<return pos:line="498" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><call><name pos:line="499" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="499" pos:column="24">(<argument><expr><name pos:line="499" pos:column="25">insertLength</name> <op:operator pos:line="499" pos:column="38">&gt;</op:operator> <lit:literal type="number" pos:line="499" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="501" pos:column="9">substance</name><op:operator pos:line="501" pos:column="18">.</op:operator><name pos:line="501" pos:column="19">InsertFromArray</name></name><argument_list pos:line="501" pos:column="34">(<argument><expr><name pos:line="501" pos:column="35">position</name></expr></argument>, <argument><expr><name pos:line="501" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="501" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><name pos:line="501" pos:column="51">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="502" pos:column="9">style</name><op:operator pos:line="502" pos:column="14">.</op:operator><name pos:line="502" pos:column="15">InsertValue</name></name><argument_list pos:line="502" pos:column="26">(<argument><expr><name pos:line="502" pos:column="27">position</name></expr></argument>, <argument><expr><name pos:line="502" pos:column="37">insertLength</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="502" pos:column="51">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="504" pos:column="9">int</name></type> <name pos:line="504" pos:column="13">lineInsert</name> <init pos:line="504" pos:column="24">= <expr><call><name><name pos:line="504" pos:column="26">lv</name><op:operator pos:line="504" pos:column="28">.</op:operator><name pos:line="504" pos:column="29">LineFromPosition</name></name><argument_list pos:line="504" pos:column="45">(<argument><expr><name pos:line="504" pos:column="46">position</name></expr></argument>)</argument_list></call> <op:operator pos:line="504" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="504" pos:column="58">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="505" pos:column="9">bool</name></type> <name pos:line="505" pos:column="14">atLineStart</name> <init pos:line="505" pos:column="26">= <expr><call><name><name pos:line="505" pos:column="28">lv</name><op:operator pos:line="505" pos:column="30">.</op:operator><name pos:line="505" pos:column="31">LineStart</name></name><argument_list pos:line="505" pos:column="40">(<argument><expr><name pos:line="505" pos:column="41">lineInsert</name><op:operator pos:line="505" pos:column="51">-</op:operator><lit:literal type="number" pos:line="505" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="505" pos:column="55">==</op:operator> <name pos:line="505" pos:column="58">position</name></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="506" pos:column="9">// Point all the lines after the insertion point further along in the buffer</comment>
	<expr_stmt><expr><call><name><name pos:line="507" pos:column="9">lv</name><op:operator pos:line="507" pos:column="11">.</op:operator><name pos:line="507" pos:column="12">InsertText</name></name><argument_list pos:line="507" pos:column="22">(<argument><expr><name pos:line="507" pos:column="23">lineInsert</name><op:operator pos:line="507" pos:column="33">-</op:operator><lit:literal type="number" pos:line="507" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><name pos:line="507" pos:column="37">insertLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="508" pos:column="9">char</name></type> <name pos:line="508" pos:column="14">chPrev</name> <init pos:line="508" pos:column="21">= <expr><call><name><name pos:line="508" pos:column="23">substance</name><op:operator pos:line="508" pos:column="32">.</op:operator><name pos:line="508" pos:column="33">ValueAt</name></name><argument_list pos:line="508" pos:column="40">(<argument><expr><name pos:line="508" pos:column="41">position</name> <op:operator pos:line="508" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="508" pos:column="52">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="509" pos:column="9">char</name></type> <name pos:line="509" pos:column="14">chAfter</name> <init pos:line="509" pos:column="22">= <expr><call><name><name pos:line="509" pos:column="24">substance</name><op:operator pos:line="509" pos:column="33">.</op:operator><name pos:line="509" pos:column="34">ValueAt</name></name><argument_list pos:line="509" pos:column="41">(<argument><expr><name pos:line="509" pos:column="42">position</name> <op:operator pos:line="509" pos:column="51">+</op:operator> <name pos:line="509" pos:column="53">insertLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="510" pos:column="9">if <condition pos:line="510" pos:column="12">(<expr><name pos:line="510" pos:column="13">chPrev</name> <op:operator pos:line="510" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="510" pos:column="23">'\r'</lit:literal> <op:operator pos:line="510" pos:column="28">&amp;&amp;</op:operator> <name pos:line="510" pos:column="31">chAfter</name> <op:operator pos:line="510" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="510" pos:column="42">'\n'</lit:literal></expr>)</condition><then pos:line="510" pos:column="47"> <block pos:line="510" pos:column="48">{
		<comment type="line" pos:line="511" pos:column="17">// Splitting up a crlf pair at position</comment>
		<expr_stmt><expr><call><name pos:line="512" pos:column="17">InsertLine</name><argument_list pos:line="512" pos:column="27">(<argument><expr><name pos:line="512" pos:column="28">lineInsert</name></expr></argument>, <argument><expr><name pos:line="512" pos:column="40">position</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="512" pos:column="50">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="513" pos:column="17">lineInsert</name><op:operator pos:line="513" pos:column="27">++</op:operator></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="515" pos:column="9">char</name></type> <name pos:line="515" pos:column="14">ch</name> <init pos:line="515" pos:column="17">= <expr><lit:literal type="char" pos:line="515" pos:column="19">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="516" pos:column="9">for (<init><decl><type><name pos:line="516" pos:column="14">int</name></type> <name pos:line="516" pos:column="18">i</name> <init pos:line="516" pos:column="20">= <expr><lit:literal type="number" pos:line="516" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="516" pos:column="25">i</name> <op:operator pos:line="516" pos:column="27">&lt;</op:operator> <name pos:line="516" pos:column="29">insertLength</name></expr>;</condition> <incr><expr><name pos:line="516" pos:column="43">i</name><op:operator pos:line="516" pos:column="44">++</op:operator></expr></incr>) <block pos:line="516" pos:column="48">{
		<expr_stmt><expr><name pos:line="517" pos:column="17">ch</name> <op:operator pos:line="517" pos:column="20">=</op:operator> <name><name pos:line="517" pos:column="22">s</name><index pos:line="517" pos:column="23">[<expr><name pos:line="517" pos:column="24">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="518" pos:column="17">if <condition pos:line="518" pos:column="20">(<expr><name pos:line="518" pos:column="21">ch</name> <op:operator pos:line="518" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="518" pos:column="27">'\r'</lit:literal></expr>)</condition><then pos:line="518" pos:column="32"> <block pos:line="518" pos:column="33">{
			<expr_stmt><expr><call><name pos:line="519" pos:column="25">InsertLine</name><argument_list pos:line="519" pos:column="35">(<argument><expr><name pos:line="519" pos:column="36">lineInsert</name></expr></argument>, <argument><expr><op:operator pos:line="519" pos:column="48">(</op:operator><name pos:line="519" pos:column="49">position</name> <op:operator pos:line="519" pos:column="58">+</op:operator> <name pos:line="519" pos:column="60">i</name><op:operator pos:line="519" pos:column="61">)</op:operator> <op:operator pos:line="519" pos:column="63">+</op:operator> <lit:literal type="number" pos:line="519" pos:column="65">1</lit:literal></expr></argument>, <argument><expr><name pos:line="519" pos:column="68">atLineStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="520" pos:column="25">lineInsert</name><op:operator pos:line="520" pos:column="35">++</op:operator></expr>;</expr_stmt>
		}</block></then> <else pos:line="521" pos:column="19">else <if pos:line="521" pos:column="24">if <condition pos:line="521" pos:column="27">(<expr><name pos:line="521" pos:column="28">ch</name> <op:operator pos:line="521" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="521" pos:column="34">'\n'</lit:literal></expr>)</condition><then pos:line="521" pos:column="39"> <block pos:line="521" pos:column="40">{
			<if pos:line="522" pos:column="25">if <condition pos:line="522" pos:column="28">(<expr><name pos:line="522" pos:column="29">chPrev</name> <op:operator pos:line="522" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="522" pos:column="39">'\r'</lit:literal></expr>)</condition><then pos:line="522" pos:column="44"> <block pos:line="522" pos:column="45">{
				<comment type="line" pos:line="523" pos:column="33">// Patch up what was end of line</comment>
				<expr_stmt><expr><call><name><name pos:line="524" pos:column="33">lv</name><op:operator pos:line="524" pos:column="35">.</op:operator><name pos:line="524" pos:column="36">SetLineStart</name></name><argument_list pos:line="524" pos:column="48">(<argument><expr><name pos:line="524" pos:column="49">lineInsert</name> <op:operator pos:line="524" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="524" pos:column="62">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="524" pos:column="65">(</op:operator><name pos:line="524" pos:column="66">position</name> <op:operator pos:line="524" pos:column="75">+</op:operator> <name pos:line="524" pos:column="77">i</name><op:operator pos:line="524" pos:column="78">)</op:operator> <op:operator pos:line="524" pos:column="80">+</op:operator> <lit:literal type="number" pos:line="524" pos:column="82">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="525" pos:column="27">else <block pos:line="525" pos:column="32">{
				<expr_stmt><expr><call><name pos:line="526" pos:column="33">InsertLine</name><argument_list pos:line="526" pos:column="43">(<argument><expr><name pos:line="526" pos:column="44">lineInsert</name></expr></argument>, <argument><expr><op:operator pos:line="526" pos:column="56">(</op:operator><name pos:line="526" pos:column="57">position</name> <op:operator pos:line="526" pos:column="66">+</op:operator> <name pos:line="526" pos:column="68">i</name><op:operator pos:line="526" pos:column="69">)</op:operator> <op:operator pos:line="526" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="526" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name pos:line="526" pos:column="76">atLineStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="527" pos:column="33">lineInsert</name><op:operator pos:line="527" pos:column="43">++</op:operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if></else></if>
		<expr_stmt><expr><name pos:line="530" pos:column="17">chPrev</name> <op:operator pos:line="530" pos:column="24">=</op:operator> <name pos:line="530" pos:column="26">ch</name></expr>;</expr_stmt>
	}</block></for>
	<comment type="line" pos:line="532" pos:column="9">// Joining two lines where last insertion is cr and following substance starts with lf</comment>
	<if pos:line="533" pos:column="9">if <condition pos:line="533" pos:column="12">(<expr><name pos:line="533" pos:column="13">chAfter</name> <op:operator pos:line="533" pos:column="21">==</op:operator> <lit:literal type="char" pos:line="533" pos:column="24">'\n'</lit:literal></expr>)</condition><then pos:line="533" pos:column="29"> <block pos:line="533" pos:column="30">{
		<if pos:line="534" pos:column="17">if <condition pos:line="534" pos:column="20">(<expr><name pos:line="534" pos:column="21">ch</name> <op:operator pos:line="534" pos:column="24">==</op:operator> <lit:literal type="char" pos:line="534" pos:column="27">'\r'</lit:literal></expr>)</condition><then pos:line="534" pos:column="32"> <block pos:line="534" pos:column="33">{
			<comment type="line" pos:line="535" pos:column="25">// End of line already in buffer so drop the newly created one</comment>
			<expr_stmt><expr><call><name pos:line="536" pos:column="25">RemoveLine</name><argument_list pos:line="536" pos:column="35">(<argument><expr><name pos:line="536" pos:column="36">lineInsert</name> <op:operator pos:line="536" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="536" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="541" pos:column="1">void</name></type> <name><name pos:line="541" pos:column="6">CellBuffer</name><op:operator pos:line="541" pos:column="16">::</op:operator><name pos:line="541" pos:column="18">BasicDeleteChars</name></name><parameter_list pos:line="541" pos:column="34">(<param><decl><type><name pos:line="541" pos:column="35">int</name></type> <name pos:line="541" pos:column="39">position</name></decl></param>, <param><decl><type><name pos:line="541" pos:column="49">int</name></type> <name pos:line="541" pos:column="53">deleteLength</name></decl></param>)</parameter_list> <block pos:line="541" pos:column="67">{
	<if pos:line="542" pos:column="9">if <condition pos:line="542" pos:column="12">(<expr><name pos:line="542" pos:column="13">deleteLength</name> <op:operator pos:line="542" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="542" pos:column="29">0</lit:literal></expr>)</condition><then pos:line="542" pos:column="31">
		<return pos:line="543" pos:column="17">return;</return></then></if>

	<if pos:line="545" pos:column="9">if <condition pos:line="545" pos:column="12">(<expr><op:operator pos:line="545" pos:column="13">(</op:operator><name pos:line="545" pos:column="14">position</name> <op:operator pos:line="545" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="545" pos:column="26">0</lit:literal><op:operator pos:line="545" pos:column="27">)</op:operator> <op:operator pos:line="545" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="545" pos:column="32">(</op:operator><name pos:line="545" pos:column="33">deleteLength</name> <op:operator pos:line="545" pos:column="46">==</op:operator> <call><name><name pos:line="545" pos:column="49">substance</name><op:operator pos:line="545" pos:column="58">.</op:operator><name pos:line="545" pos:column="59">Length</name></name><argument_list pos:line="545" pos:column="65">()</argument_list></call><op:operator pos:line="545" pos:column="67">)</op:operator></expr>)</condition><then pos:line="545" pos:column="69"> <block pos:line="545" pos:column="70">{
		<comment type="line" pos:line="546" pos:column="17">// If whole buffer is being deleted, faster to reinitialise lines data</comment>
		<comment type="line" pos:line="547" pos:column="17">// than to delete each line.</comment>
		<expr_stmt><expr><call><name><name pos:line="548" pos:column="17">lv</name><op:operator pos:line="548" pos:column="19">.</op:operator><name pos:line="548" pos:column="20">Init</name></name><argument_list pos:line="548" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="549" pos:column="11">else <block pos:line="549" pos:column="16">{
		<comment type="line" pos:line="550" pos:column="17">// Have to fix up line positions before doing deletion as looking at text in buffer</comment>
		<comment type="line" pos:line="551" pos:column="17">// to work out which lines have been removed</comment>

		<decl_stmt><decl><type><name pos:line="553" pos:column="17">int</name></type> <name pos:line="553" pos:column="21">lineRemove</name> <init pos:line="553" pos:column="32">= <expr><call><name><name pos:line="553" pos:column="34">lv</name><op:operator pos:line="553" pos:column="36">.</op:operator><name pos:line="553" pos:column="37">LineFromPosition</name></name><argument_list pos:line="553" pos:column="53">(<argument><expr><name pos:line="553" pos:column="54">position</name></expr></argument>)</argument_list></call> <op:operator pos:line="553" pos:column="64">+</op:operator> <lit:literal type="number" pos:line="553" pos:column="66">1</lit:literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="554" pos:column="17">lv</name><op:operator pos:line="554" pos:column="19">.</op:operator><name pos:line="554" pos:column="20">InsertText</name></name><argument_list pos:line="554" pos:column="30">(<argument><expr><name pos:line="554" pos:column="31">lineRemove</name><op:operator pos:line="554" pos:column="41">-</op:operator><lit:literal type="number" pos:line="554" pos:column="42">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="554" pos:column="45">-</op:operator> <op:operator pos:line="554" pos:column="47">(</op:operator><name pos:line="554" pos:column="48">deleteLength</name><op:operator pos:line="554" pos:column="60">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="555" pos:column="17">char</name></type> <name pos:line="555" pos:column="22">chPrev</name> <init pos:line="555" pos:column="29">= <expr><call><name><name pos:line="555" pos:column="31">substance</name><op:operator pos:line="555" pos:column="40">.</op:operator><name pos:line="555" pos:column="41">ValueAt</name></name><argument_list pos:line="555" pos:column="48">(<argument><expr><name pos:line="555" pos:column="49">position</name> <op:operator pos:line="555" pos:column="58">-</op:operator> <lit:literal type="number" pos:line="555" pos:column="60">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="556" pos:column="17">char</name></type> <name pos:line="556" pos:column="22">chBefore</name> <init pos:line="556" pos:column="31">= <expr><name pos:line="556" pos:column="33">chPrev</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="557" pos:column="17">char</name></type> <name pos:line="557" pos:column="22">chNext</name> <init pos:line="557" pos:column="29">= <expr><call><name><name pos:line="557" pos:column="31">substance</name><op:operator pos:line="557" pos:column="40">.</op:operator><name pos:line="557" pos:column="41">ValueAt</name></name><argument_list pos:line="557" pos:column="48">(<argument><expr><name pos:line="557" pos:column="49">position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="558" pos:column="17">bool</name></type> <name pos:line="558" pos:column="22">ignoreNL</name> <init pos:line="558" pos:column="31">= <expr><lit:literal type="boolean" pos:line="558" pos:column="33">false</lit:literal></expr></init></decl>;</decl_stmt>
		<if pos:line="559" pos:column="17">if <condition pos:line="559" pos:column="20">(<expr><name pos:line="559" pos:column="21">chPrev</name> <op:operator pos:line="559" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="559" pos:column="31">'\r'</lit:literal> <op:operator pos:line="559" pos:column="36">&amp;&amp;</op:operator> <name pos:line="559" pos:column="39">chNext</name> <op:operator pos:line="559" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="559" pos:column="49">'\n'</lit:literal></expr>)</condition><then pos:line="559" pos:column="54"> <block pos:line="559" pos:column="55">{
			<comment type="line" pos:line="560" pos:column="25">// Move back one</comment>
			<expr_stmt><expr><call><name><name pos:line="561" pos:column="25">lv</name><op:operator pos:line="561" pos:column="27">.</op:operator><name pos:line="561" pos:column="28">SetLineStart</name></name><argument_list pos:line="561" pos:column="40">(<argument><expr><name pos:line="561" pos:column="41">lineRemove</name></expr></argument>, <argument><expr><name pos:line="561" pos:column="53">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="562" pos:column="25">lineRemove</name><op:operator pos:line="562" pos:column="35">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="563" pos:column="25">ignoreNL</name> <op:operator pos:line="563" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="563" pos:column="36">true</lit:literal></expr>;</expr_stmt> 	<comment type="line" pos:line="563" pos:column="49">// First \n is not real deletion</comment>
		}</block></then></if>

		<decl_stmt><decl><type><name pos:line="566" pos:column="17">char</name></type> <name pos:line="566" pos:column="22">ch</name> <init pos:line="566" pos:column="25">= <expr><name pos:line="566" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<for pos:line="567" pos:column="17">for (<init><decl><type><name pos:line="567" pos:column="22">int</name></type> <name pos:line="567" pos:column="26">i</name> <init pos:line="567" pos:column="28">= <expr><lit:literal type="number" pos:line="567" pos:column="30">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="567" pos:column="33">i</name> <op:operator pos:line="567" pos:column="35">&lt;</op:operator> <name pos:line="567" pos:column="37">deleteLength</name></expr>;</condition> <incr><expr><name pos:line="567" pos:column="51">i</name><op:operator pos:line="567" pos:column="52">++</op:operator></expr></incr>) <block pos:line="567" pos:column="56">{
			<expr_stmt><expr><name pos:line="568" pos:column="25">chNext</name> <op:operator pos:line="568" pos:column="32">=</op:operator> <call><name><name pos:line="568" pos:column="34">substance</name><op:operator pos:line="568" pos:column="43">.</op:operator><name pos:line="568" pos:column="44">ValueAt</name></name><argument_list pos:line="568" pos:column="51">(<argument><expr><name pos:line="568" pos:column="52">position</name> <op:operator pos:line="568" pos:column="61">+</op:operator> <name pos:line="568" pos:column="63">i</name> <op:operator pos:line="568" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="568" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="569" pos:column="25">if <condition pos:line="569" pos:column="28">(<expr><name pos:line="569" pos:column="29">ch</name> <op:operator pos:line="569" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="569" pos:column="35">'\r'</lit:literal></expr>)</condition><then pos:line="569" pos:column="40"> <block pos:line="569" pos:column="41">{
				<if pos:line="570" pos:column="33">if <condition pos:line="570" pos:column="36">(<expr><name pos:line="570" pos:column="37">chNext</name> <op:operator pos:line="570" pos:column="44">!=</op:operator> <lit:literal type="char" pos:line="570" pos:column="47">'\n'</lit:literal></expr>)</condition><then pos:line="570" pos:column="52"> <block pos:line="570" pos:column="53">{
					<expr_stmt><expr><call><name pos:line="571" pos:column="41">RemoveLine</name><argument_list pos:line="571" pos:column="51">(<argument><expr><name pos:line="571" pos:column="52">lineRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="573" pos:column="27">else <if pos:line="573" pos:column="32">if <condition pos:line="573" pos:column="35">(<expr><name pos:line="573" pos:column="36">ch</name> <op:operator pos:line="573" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="573" pos:column="42">'\n'</lit:literal></expr>)</condition><then pos:line="573" pos:column="47"> <block pos:line="573" pos:column="48">{
				<if pos:line="574" pos:column="33">if <condition pos:line="574" pos:column="36">(<expr><name pos:line="574" pos:column="37">ignoreNL</name></expr>)</condition><then pos:line="574" pos:column="46"> <block pos:line="574" pos:column="47">{
					<expr_stmt><expr><name pos:line="575" pos:column="41">ignoreNL</name> <op:operator pos:line="575" pos:column="50">=</op:operator> <lit:literal type="boolean" pos:line="575" pos:column="52">false</lit:literal></expr>;</expr_stmt> 	<comment type="line" pos:line="575" pos:column="65">// Further \n are real deletions</comment>
				}</block></then> <else pos:line="576" pos:column="35">else <block pos:line="576" pos:column="40">{
					<expr_stmt><expr><call><name pos:line="577" pos:column="41">RemoveLine</name><argument_list pos:line="577" pos:column="51">(<argument><expr><name pos:line="577" pos:column="52">lineRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if></else></if>

			<expr_stmt><expr><name pos:line="581" pos:column="25">ch</name> <op:operator pos:line="581" pos:column="28">=</op:operator> <name pos:line="581" pos:column="30">chNext</name></expr>;</expr_stmt>
		}</block></for>
		<comment type="line" pos:line="583" pos:column="17">// May have to fix up end if last deletion causes cr to be next to lf</comment>
		<comment type="line" pos:line="584" pos:column="17">// or removes one of a crlf pair</comment>
		<decl_stmt><decl><type><name pos:line="585" pos:column="17">char</name></type> <name pos:line="585" pos:column="22">chAfter</name> <init pos:line="585" pos:column="30">= <expr><call><name><name pos:line="585" pos:column="32">substance</name><op:operator pos:line="585" pos:column="41">.</op:operator><name pos:line="585" pos:column="42">ValueAt</name></name><argument_list pos:line="585" pos:column="49">(<argument><expr><name pos:line="585" pos:column="50">position</name> <op:operator pos:line="585" pos:column="59">+</op:operator> <name pos:line="585" pos:column="61">deleteLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="586" pos:column="17">if <condition pos:line="586" pos:column="20">(<expr><name pos:line="586" pos:column="21">chBefore</name> <op:operator pos:line="586" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="586" pos:column="33">'\r'</lit:literal> <op:operator pos:line="586" pos:column="38">&amp;&amp;</op:operator> <name pos:line="586" pos:column="41">chAfter</name> <op:operator pos:line="586" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="586" pos:column="52">'\n'</lit:literal></expr>)</condition><then pos:line="586" pos:column="57"> <block pos:line="586" pos:column="58">{
			<comment type="line" pos:line="587" pos:column="25">// Using lineRemove-1 as cr ended line before start of deletion</comment>
			<expr_stmt><expr><call><name pos:line="588" pos:column="25">RemoveLine</name><argument_list pos:line="588" pos:column="35">(<argument><expr><name pos:line="588" pos:column="36">lineRemove</name> <op:operator pos:line="588" pos:column="47">-</op:operator> <lit:literal type="number" pos:line="588" pos:column="49">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="589" pos:column="25">lv</name><op:operator pos:line="589" pos:column="27">.</op:operator><name pos:line="589" pos:column="28">SetLineStart</name></name><argument_list pos:line="589" pos:column="40">(<argument><expr><name pos:line="589" pos:column="41">lineRemove</name> <op:operator pos:line="589" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="589" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><name pos:line="589" pos:column="57">position</name> <op:operator pos:line="589" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="589" pos:column="68">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	<expr_stmt><expr><call><name><name pos:line="592" pos:column="9">substance</name><op:operator pos:line="592" pos:column="18">.</op:operator><name pos:line="592" pos:column="19">DeleteRange</name></name><argument_list pos:line="592" pos:column="30">(<argument><expr><name pos:line="592" pos:column="31">position</name></expr></argument>, <argument><expr><name pos:line="592" pos:column="41">deleteLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="593" pos:column="9">style</name><op:operator pos:line="593" pos:column="14">.</op:operator><name pos:line="593" pos:column="15">DeleteRange</name></name><argument_list pos:line="593" pos:column="26">(<argument><expr><name pos:line="593" pos:column="27">position</name></expr></argument>, <argument><expr><name pos:line="593" pos:column="37">deleteLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="596" pos:column="1">bool</name></type> <name><name pos:line="596" pos:column="6">CellBuffer</name><op:operator pos:line="596" pos:column="16">::</op:operator><name pos:line="596" pos:column="18">SetUndoCollection</name></name><parameter_list pos:line="596" pos:column="35">(<param><decl><type><name pos:line="596" pos:column="36">bool</name></type> <name pos:line="596" pos:column="41">collectUndo</name></decl></param>)</parameter_list> <block pos:line="596" pos:column="54">{
	<expr_stmt><expr><name pos:line="597" pos:column="9">collectingUndo</name> <op:operator pos:line="597" pos:column="24">=</op:operator> <name pos:line="597" pos:column="26">collectUndo</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="598" pos:column="9">uh</name><op:operator pos:line="598" pos:column="11">.</op:operator><name pos:line="598" pos:column="12">DropUndoSequence</name></name><argument_list pos:line="598" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
	<return pos:line="599" pos:column="9">return <expr><name pos:line="599" pos:column="16">collectingUndo</name></expr>;</return>
}</block></function>

<function><type><name pos:line="602" pos:column="1">bool</name></type> <name><name pos:line="602" pos:column="6">CellBuffer</name><op:operator pos:line="602" pos:column="16">::</op:operator><name pos:line="602" pos:column="18">IsCollectingUndo</name></name><parameter_list pos:line="602" pos:column="34">()</parameter_list> <specifier pos:line="602" pos:column="37">const</specifier> <block pos:line="602" pos:column="43">{
	<return pos:line="603" pos:column="9">return <expr><name pos:line="603" pos:column="16">collectingUndo</name></expr>;</return>
}</block></function>

<function><type><name pos:line="606" pos:column="1">void</name></type> <name><name pos:line="606" pos:column="6">CellBuffer</name><op:operator pos:line="606" pos:column="16">::</op:operator><name pos:line="606" pos:column="18">BeginUndoAction</name></name><parameter_list pos:line="606" pos:column="33">()</parameter_list> <block pos:line="606" pos:column="36">{
	<expr_stmt><expr><call><name><name pos:line="607" pos:column="9">uh</name><op:operator pos:line="607" pos:column="11">.</op:operator><name pos:line="607" pos:column="12">BeginUndoAction</name></name><argument_list pos:line="607" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="610" pos:column="1">void</name></type> <name><name pos:line="610" pos:column="6">CellBuffer</name><op:operator pos:line="610" pos:column="16">::</op:operator><name pos:line="610" pos:column="18">EndUndoAction</name></name><parameter_list pos:line="610" pos:column="31">()</parameter_list> <block pos:line="610" pos:column="34">{
	<expr_stmt><expr><call><name><name pos:line="611" pos:column="9">uh</name><op:operator pos:line="611" pos:column="11">.</op:operator><name pos:line="611" pos:column="12">EndUndoAction</name></name><argument_list pos:line="611" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="614" pos:column="1">void</name></type> <name><name pos:line="614" pos:column="6">CellBuffer</name><op:operator pos:line="614" pos:column="16">::</op:operator><name pos:line="614" pos:column="18">AddUndoAction</name></name><parameter_list pos:line="614" pos:column="31">(<param><decl><type><name pos:line="614" pos:column="32">int</name></type> <name pos:line="614" pos:column="36">token</name></decl></param>, <param><decl><type><name pos:line="614" pos:column="43">bool</name></type> <name pos:line="614" pos:column="48">mayCoalesce</name></decl></param>)</parameter_list> <block pos:line="614" pos:column="61">{
	<decl_stmt><decl><type><name pos:line="615" pos:column="9">bool</name></type> <name pos:line="615" pos:column="14">startSequence</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="616" pos:column="9">uh</name><op:operator pos:line="616" pos:column="11">.</op:operator><name pos:line="616" pos:column="12">AppendAction</name></name><argument_list pos:line="616" pos:column="24">(<argument><expr><name pos:line="616" pos:column="25">containerAction</name></expr></argument>, <argument><expr><name pos:line="616" pos:column="42">token</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="616" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="616" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><name pos:line="616" pos:column="55">startSequence</name></expr></argument>, <argument><expr><name pos:line="616" pos:column="70">mayCoalesce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="619" pos:column="1">void</name></type> <name><name pos:line="619" pos:column="6">CellBuffer</name><op:operator pos:line="619" pos:column="16">::</op:operator><name pos:line="619" pos:column="18">DeleteUndoHistory</name></name><parameter_list pos:line="619" pos:column="35">()</parameter_list> <block pos:line="619" pos:column="38">{
	<expr_stmt><expr><call><name><name pos:line="620" pos:column="9">uh</name><op:operator pos:line="620" pos:column="11">.</op:operator><name pos:line="620" pos:column="12">DeleteUndoHistory</name></name><argument_list pos:line="620" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="623" pos:column="1">bool</name></type> <name><name pos:line="623" pos:column="6">CellBuffer</name><op:operator pos:line="623" pos:column="16">::</op:operator><name pos:line="623" pos:column="18">CanUndo</name></name><parameter_list pos:line="623" pos:column="25">()</parameter_list> <block pos:line="623" pos:column="28">{
	<return pos:line="624" pos:column="9">return <expr><call><name><name pos:line="624" pos:column="16">uh</name><op:operator pos:line="624" pos:column="18">.</op:operator><name pos:line="624" pos:column="19">CanUndo</name></name><argument_list pos:line="624" pos:column="26">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="627" pos:column="1">int</name></type> <name><name pos:line="627" pos:column="5">CellBuffer</name><op:operator pos:line="627" pos:column="15">::</op:operator><name pos:line="627" pos:column="17">StartUndo</name></name><parameter_list pos:line="627" pos:column="26">()</parameter_list> <block pos:line="627" pos:column="29">{
	<return pos:line="628" pos:column="9">return <expr><call><name><name pos:line="628" pos:column="16">uh</name><op:operator pos:line="628" pos:column="18">.</op:operator><name pos:line="628" pos:column="19">StartUndo</name></name><argument_list pos:line="628" pos:column="28">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="631" pos:column="1">const</specifier> <name pos:line="631" pos:column="7">Action</name> <type:modifier pos:line="631" pos:column="14">&amp;</type:modifier></type><name><name pos:line="631" pos:column="15">CellBuffer</name><op:operator pos:line="631" pos:column="25">::</op:operator><name pos:line="631" pos:column="27">GetUndoStep</name></name><parameter_list pos:line="631" pos:column="38">()</parameter_list> <specifier pos:line="631" pos:column="41">const</specifier> <block pos:line="631" pos:column="47">{
	<return pos:line="632" pos:column="9">return <expr><call><name><name pos:line="632" pos:column="16">uh</name><op:operator pos:line="632" pos:column="18">.</op:operator><name pos:line="632" pos:column="19">GetUndoStep</name></name><argument_list pos:line="632" pos:column="30">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="635" pos:column="1">void</name></type> <name><name pos:line="635" pos:column="6">CellBuffer</name><op:operator pos:line="635" pos:column="16">::</op:operator><name pos:line="635" pos:column="18">PerformUndoStep</name></name><parameter_list pos:line="635" pos:column="33">()</parameter_list> <block pos:line="635" pos:column="36">{
	<decl_stmt><decl><type><specifier pos:line="636" pos:column="9">const</specifier> <name pos:line="636" pos:column="15">Action</name> <type:modifier pos:line="636" pos:column="22">&amp;</type:modifier></type><name pos:line="636" pos:column="23">actionStep</name> <init pos:line="636" pos:column="34">= <expr><call><name><name pos:line="636" pos:column="36">uh</name><op:operator pos:line="636" pos:column="38">.</op:operator><name pos:line="636" pos:column="39">GetUndoStep</name></name><argument_list pos:line="636" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="637" pos:column="9">if <condition pos:line="637" pos:column="12">(<expr><name><name pos:line="637" pos:column="13">actionStep</name><op:operator pos:line="637" pos:column="23">.</op:operator><name pos:line="637" pos:column="24">at</name></name> <op:operator pos:line="637" pos:column="27">==</op:operator> <name pos:line="637" pos:column="30">insertAction</name></expr>)</condition><then pos:line="637" pos:column="43"> <block pos:line="637" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="638" pos:column="17">BasicDeleteChars</name><argument_list pos:line="638" pos:column="33">(<argument><expr><name><name pos:line="638" pos:column="34">actionStep</name><op:operator pos:line="638" pos:column="44">.</op:operator><name pos:line="638" pos:column="45">position</name></name></expr></argument>, <argument><expr><name><name pos:line="638" pos:column="55">actionStep</name><op:operator pos:line="638" pos:column="65">.</op:operator><name pos:line="638" pos:column="66">lenData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="639" pos:column="11">else <if pos:line="639" pos:column="16">if <condition pos:line="639" pos:column="19">(<expr><name><name pos:line="639" pos:column="20">actionStep</name><op:operator pos:line="639" pos:column="30">.</op:operator><name pos:line="639" pos:column="31">at</name></name> <op:operator pos:line="639" pos:column="34">==</op:operator> <name pos:line="639" pos:column="37">removeAction</name></expr>)</condition><then pos:line="639" pos:column="50"> <block pos:line="639" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="640" pos:column="17">BasicInsertString</name><argument_list pos:line="640" pos:column="34">(<argument><expr><name><name pos:line="640" pos:column="35">actionStep</name><op:operator pos:line="640" pos:column="45">.</op:operator><name pos:line="640" pos:column="46">position</name></name></expr></argument>, <argument><expr><name><name pos:line="640" pos:column="56">actionStep</name><op:operator pos:line="640" pos:column="66">.</op:operator><name pos:line="640" pos:column="67">data</name></name></expr></argument>, <argument><expr><name><name pos:line="640" pos:column="73">actionStep</name><op:operator pos:line="640" pos:column="83">.</op:operator><name pos:line="640" pos:column="84">lenData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<expr_stmt><expr><call><name><name pos:line="642" pos:column="9">uh</name><op:operator pos:line="642" pos:column="11">.</op:operator><name pos:line="642" pos:column="12">CompletedUndoStep</name></name><argument_list pos:line="642" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="645" pos:column="1">bool</name></type> <name><name pos:line="645" pos:column="6">CellBuffer</name><op:operator pos:line="645" pos:column="16">::</op:operator><name pos:line="645" pos:column="18">CanRedo</name></name><parameter_list pos:line="645" pos:column="25">()</parameter_list> <block pos:line="645" pos:column="28">{
	<return pos:line="646" pos:column="9">return <expr><call><name><name pos:line="646" pos:column="16">uh</name><op:operator pos:line="646" pos:column="18">.</op:operator><name pos:line="646" pos:column="19">CanRedo</name></name><argument_list pos:line="646" pos:column="26">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="649" pos:column="1">int</name></type> <name><name pos:line="649" pos:column="5">CellBuffer</name><op:operator pos:line="649" pos:column="15">::</op:operator><name pos:line="649" pos:column="17">StartRedo</name></name><parameter_list pos:line="649" pos:column="26">()</parameter_list> <block pos:line="649" pos:column="29">{
	<return pos:line="650" pos:column="9">return <expr><call><name><name pos:line="650" pos:column="16">uh</name><op:operator pos:line="650" pos:column="18">.</op:operator><name pos:line="650" pos:column="19">StartRedo</name></name><argument_list pos:line="650" pos:column="28">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="653" pos:column="1">const</specifier> <name pos:line="653" pos:column="7">Action</name> <type:modifier pos:line="653" pos:column="14">&amp;</type:modifier></type><name><name pos:line="653" pos:column="15">CellBuffer</name><op:operator pos:line="653" pos:column="25">::</op:operator><name pos:line="653" pos:column="27">GetRedoStep</name></name><parameter_list pos:line="653" pos:column="38">()</parameter_list> <specifier pos:line="653" pos:column="41">const</specifier> <block pos:line="653" pos:column="47">{
	<return pos:line="654" pos:column="9">return <expr><call><name><name pos:line="654" pos:column="16">uh</name><op:operator pos:line="654" pos:column="18">.</op:operator><name pos:line="654" pos:column="19">GetRedoStep</name></name><argument_list pos:line="654" pos:column="30">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="657" pos:column="1">void</name></type> <name><name pos:line="657" pos:column="6">CellBuffer</name><op:operator pos:line="657" pos:column="16">::</op:operator><name pos:line="657" pos:column="18">PerformRedoStep</name></name><parameter_list pos:line="657" pos:column="33">()</parameter_list> <block pos:line="657" pos:column="36">{
	<decl_stmt><decl><type><specifier pos:line="658" pos:column="9">const</specifier> <name pos:line="658" pos:column="15">Action</name> <type:modifier pos:line="658" pos:column="22">&amp;</type:modifier></type><name pos:line="658" pos:column="23">actionStep</name> <init pos:line="658" pos:column="34">= <expr><call><name><name pos:line="658" pos:column="36">uh</name><op:operator pos:line="658" pos:column="38">.</op:operator><name pos:line="658" pos:column="39">GetRedoStep</name></name><argument_list pos:line="658" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="659" pos:column="9">if <condition pos:line="659" pos:column="12">(<expr><name><name pos:line="659" pos:column="13">actionStep</name><op:operator pos:line="659" pos:column="23">.</op:operator><name pos:line="659" pos:column="24">at</name></name> <op:operator pos:line="659" pos:column="27">==</op:operator> <name pos:line="659" pos:column="30">insertAction</name></expr>)</condition><then pos:line="659" pos:column="43"> <block pos:line="659" pos:column="44">{
		<expr_stmt><expr><call><name pos:line="660" pos:column="17">BasicInsertString</name><argument_list pos:line="660" pos:column="34">(<argument><expr><name><name pos:line="660" pos:column="35">actionStep</name><op:operator pos:line="660" pos:column="45">.</op:operator><name pos:line="660" pos:column="46">position</name></name></expr></argument>, <argument><expr><name><name pos:line="660" pos:column="56">actionStep</name><op:operator pos:line="660" pos:column="66">.</op:operator><name pos:line="660" pos:column="67">data</name></name></expr></argument>, <argument><expr><name><name pos:line="660" pos:column="73">actionStep</name><op:operator pos:line="660" pos:column="83">.</op:operator><name pos:line="660" pos:column="84">lenData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <else pos:line="661" pos:column="11">else <if pos:line="661" pos:column="16">if <condition pos:line="661" pos:column="19">(<expr><name><name pos:line="661" pos:column="20">actionStep</name><op:operator pos:line="661" pos:column="30">.</op:operator><name pos:line="661" pos:column="31">at</name></name> <op:operator pos:line="661" pos:column="34">==</op:operator> <name pos:line="661" pos:column="37">removeAction</name></expr>)</condition><then pos:line="661" pos:column="50"> <block pos:line="661" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="662" pos:column="17">BasicDeleteChars</name><argument_list pos:line="662" pos:column="33">(<argument><expr><name><name pos:line="662" pos:column="34">actionStep</name><op:operator pos:line="662" pos:column="44">.</op:operator><name pos:line="662" pos:column="45">position</name></name></expr></argument>, <argument><expr><name><name pos:line="662" pos:column="55">actionStep</name><op:operator pos:line="662" pos:column="65">.</op:operator><name pos:line="662" pos:column="66">lenData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<expr_stmt><expr><call><name><name pos:line="664" pos:column="9">uh</name><op:operator pos:line="664" pos:column="11">.</op:operator><name pos:line="664" pos:column="12">CompletedRedoStep</name></name><argument_list pos:line="664" pos:column="29">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

</unit>
