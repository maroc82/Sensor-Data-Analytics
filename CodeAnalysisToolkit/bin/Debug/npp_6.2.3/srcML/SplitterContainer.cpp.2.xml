<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\SplitterContainer\SplitterContainer.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"SplitterContainer.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><name pos:line="32" pos:column="1">bool</name></type> <name><name pos:line="32" pos:column="6">SplitterContainer</name><op:operator pos:line="32" pos:column="23">::</op:operator><name pos:line="32" pos:column="25">_isRegistered</name></name> <init pos:line="32" pos:column="39">= <expr><lit:literal type="boolean" pos:line="32" pos:column="41">false</lit:literal></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="34" pos:column="1">void</name></type> <name><name pos:line="34" pos:column="6">SplitterContainer</name><op:operator pos:line="34" pos:column="23">::</op:operator><name pos:line="34" pos:column="25">create</name></name><parameter_list pos:line="34" pos:column="31">(<param><decl><type><name pos:line="34" pos:column="32">Window</name> <type:modifier pos:line="34" pos:column="39">*</type:modifier></type><name pos:line="34" pos:column="40">pWin0</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="47">Window</name> <type:modifier pos:line="34" pos:column="54">*</type:modifier></type><name pos:line="34" pos:column="55">pWin1</name></decl></param>, <param><decl><type><name pos:line="34" pos:column="62">int</name></type> <name pos:line="34" pos:column="66">splitterSize</name></decl></param>,
                               <param><decl><type><name pos:line="35" pos:column="32">SplitterMode</name></type> <name pos:line="35" pos:column="45">mode</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="51">int</name></type> <name pos:line="35" pos:column="55">ratio</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="62">bool</name></type> <name pos:line="35" pos:column="67">isVertical</name></decl></param>)</parameter_list>
<block pos:line="36" pos:column="1">{
	<comment type="line" pos:line="37" pos:column="9">//Window::init(hInst, parent);</comment>
	<expr_stmt><expr><name pos:line="38" pos:column="9">_pWin0</name> <op:operator pos:line="38" pos:column="16">=</op:operator> <name pos:line="38" pos:column="18">pWin0</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="39" pos:column="9">_pWin1</name> <op:operator pos:line="39" pos:column="16">=</op:operator> <name pos:line="39" pos:column="18">pWin1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="40" pos:column="9">_splitterSize</name> <op:operator pos:line="40" pos:column="23">=</op:operator> <name pos:line="40" pos:column="25">splitterSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="41" pos:column="9">_splitterMode</name> <op:operator pos:line="41" pos:column="23">=</op:operator> <name pos:line="41" pos:column="25">mode</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="42" pos:column="9">_ratio</name> <op:operator pos:line="42" pos:column="16">=</op:operator> <name pos:line="42" pos:column="18">ratio</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="43" pos:column="9">_dwSplitterStyle</name> <op:operator pos:line="43" pos:column="26">|=</op:operator> <name pos:line="43" pos:column="29">isVertical</name><op:operator pos:line="43" pos:column="39">?</op:operator><name pos:line="43" pos:column="40">SV_VERTICAL</name><op:operator pos:line="43" pos:column="51">:</op:operator><name pos:line="43" pos:column="52">SV_HORIZONTAL</name></expr>;</expr_stmt>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">_splitterMode</name> <op:operator pos:line="44" pos:column="23">!=</op:operator> <name pos:line="44" pos:column="26">DYNAMIC</name></expr>)</condition><then pos:line="44" pos:column="34">
	<block pos:line="45" pos:column="9">{
        <expr_stmt><expr><name pos:line="46" pos:column="9">_dwSplitterStyle</name> <op:operator pos:line="46" pos:column="26">|=</op:operator> <name pos:line="46" pos:column="29">SV_FIXED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="47" pos:column="17">_dwSplitterStyle</name> <op:operator pos:line="47" pos:column="34">&amp;=</op:operator> <op:operator pos:line="47" pos:column="37">~</op:operator><name pos:line="47" pos:column="38">SV_RESIZEWTHPERCNT</name></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><op:operator pos:line="49" pos:column="13">!</op:operator><name pos:line="49" pos:column="14">_isRegistered</name></expr>)</condition><then pos:line="49" pos:column="28">
	<block pos:line="50" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="51" pos:column="17">WNDCLASS</name></type> <name pos:line="51" pos:column="26">splitterContainerClass</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name pos:line="53" pos:column="17">splitterContainerClass</name><op:operator pos:line="53" pos:column="39">.</op:operator><name pos:line="53" pos:column="40">style</name></name> <op:operator pos:line="53" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="53" pos:column="48">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="54" pos:column="17">splitterContainerClass</name><op:operator pos:line="54" pos:column="39">.</op:operator><name pos:line="54" pos:column="40">lpfnWndProc</name></name> <op:operator pos:line="54" pos:column="52">=</op:operator> <name pos:line="54" pos:column="54">staticWinProc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="55" pos:column="17">splitterContainerClass</name><op:operator pos:line="55" pos:column="39">.</op:operator><name pos:line="55" pos:column="40">cbClsExtra</name></name> <op:operator pos:line="55" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="55" pos:column="53">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="56" pos:column="17">splitterContainerClass</name><op:operator pos:line="56" pos:column="39">.</op:operator><name pos:line="56" pos:column="40">cbWndExtra</name></name> <op:operator pos:line="56" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="56" pos:column="53">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="57" pos:column="17">splitterContainerClass</name><op:operator pos:line="57" pos:column="39">.</op:operator><name pos:line="57" pos:column="40">hInstance</name></name> <op:operator pos:line="57" pos:column="50">=</op:operator> <name pos:line="57" pos:column="52">_hInst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="58" pos:column="17">splitterContainerClass</name><op:operator pos:line="58" pos:column="39">.</op:operator><name pos:line="58" pos:column="40">hIcon</name></name> <op:operator pos:line="58" pos:column="46">=</op:operator> <name pos:line="58" pos:column="48">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="59" pos:column="17">splitterContainerClass</name><op:operator pos:line="59" pos:column="39">.</op:operator><name pos:line="59" pos:column="40">hCursor</name></name> <op:operator pos:line="59" pos:column="48">=</op:operator> <call><name><op:operator pos:line="59" pos:column="50">::</op:operator><name pos:line="59" pos:column="52">LoadCursor</name></name><argument_list pos:line="59" pos:column="62">(<argument><expr><name pos:line="59" pos:column="63">NULL</name></expr></argument>, <argument><expr><name pos:line="59" pos:column="69">IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="61" pos:column="17">// hbrBackground must be NULL,</comment>
		<comment type="line" pos:line="62" pos:column="17">// otherwise this window will hide some parts of 2 windows</comment>
		<expr_stmt><expr><name><name pos:line="63" pos:column="17">splitterContainerClass</name><op:operator pos:line="63" pos:column="39">.</op:operator><name pos:line="63" pos:column="40">hbrBackground</name></name> <op:operator pos:line="63" pos:column="54">=</op:operator> <name pos:line="63" pos:column="56">NULL</name></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name pos:line="64" pos:column="17">splitterContainerClass</name><op:operator pos:line="64" pos:column="39">.</op:operator><name pos:line="64" pos:column="40">lpszMenuName</name></name> <op:operator pos:line="64" pos:column="53">=</op:operator> <name pos:line="64" pos:column="55">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">splitterContainerClass</name><op:operator pos:line="65" pos:column="39">.</op:operator><name pos:line="65" pos:column="40">lpszClassName</name></name> <op:operator pos:line="65" pos:column="54">=</op:operator> <name pos:line="65" pos:column="56">SPC_CLASS_NAME</name></expr>;</expr_stmt><comment type="line" pos:line="65" pos:column="71">//_className;</comment>

		<if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><op:operator pos:line="67" pos:column="21">!</op:operator><call><name><op:operator pos:line="67" pos:column="22">::</op:operator><name pos:line="67" pos:column="24">RegisterClass</name></name><argument_list pos:line="67" pos:column="37">(<argument><expr><op:operator pos:line="67" pos:column="38">&amp;</op:operator><name pos:line="67" pos:column="39">splitterContainerClass</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="67" pos:column="63">
		<block pos:line="68" pos:column="17">{
			<throw pos:line="69" pos:column="25">throw <expr><call><name><name pos:line="69" pos:column="31">std</name><op:operator pos:line="69" pos:column="34">::</op:operator><name pos:line="69" pos:column="36">runtime_error</name></name><argument_list pos:line="69" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="69" pos:column="50">" SplitterContainer::create : RegisterClass() function failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="71" pos:column="17">_isRegistered</name> <op:operator pos:line="71" pos:column="31">=</op:operator> <lit:literal type="boolean" pos:line="71" pos:column="33">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><name pos:line="74" pos:column="9">_hSelf</name> <op:operator pos:line="74" pos:column="16">=</op:operator> <call><name><op:operator pos:line="74" pos:column="18">::</op:operator><name pos:line="74" pos:column="20">CreateWindowEx</name></name><argument_list pos:line="74" pos:column="34">(
					<argument><expr><lit:literal type="number" pos:line="75" pos:column="41">0</lit:literal></expr></argument>,
					<argument><expr><name pos:line="76" pos:column="41">SPC_CLASS_NAME</name></expr></argument>,
					<argument><expr><call><name pos:line="77" pos:column="41">TEXT</name><argument_list pos:line="77" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="77" pos:column="46">"a koi sert?"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
					<argument><expr><name pos:line="78" pos:column="41">WS_CHILD</name> <op:operator pos:line="78" pos:column="50">|</op:operator>  <name pos:line="78" pos:column="53">WS_CLIPCHILDREN</name></expr></argument>,
					<argument><expr><name pos:line="79" pos:column="41">CW_USEDEFAULT</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="56">CW_USEDEFAULT</name></expr></argument>,
					<argument><expr><name pos:line="80" pos:column="41">CW_USEDEFAULT</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="56">CW_USEDEFAULT</name></expr></argument>,
					<argument><expr><name pos:line="81" pos:column="41">_hParent</name></expr></argument>,
					<argument><expr><name pos:line="82" pos:column="41">NULL</name></expr></argument>,
					<argument><expr><name pos:line="83" pos:column="41">_hInst</name></expr></argument>,
					<argument><expr><op:operator pos:line="84" pos:column="41">(</op:operator><name pos:line="84" pos:column="42">LPVOID</name><op:operator pos:line="84" pos:column="48">)</op:operator><name pos:line="84" pos:column="49">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><op:operator pos:line="86" pos:column="13">!</op:operator><name pos:line="86" pos:column="14">_hSelf</name></expr>)</condition><then pos:line="86" pos:column="21">
	<block pos:line="87" pos:column="9">{
		<throw pos:line="88" pos:column="17">throw <expr><call><name><name pos:line="88" pos:column="23">std</name><op:operator pos:line="88" pos:column="26">::</op:operator><name pos:line="88" pos:column="28">runtime_error</name></name><argument_list pos:line="88" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="42">" SplitterContainer::create : CreateWindowEx() function return null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="92" pos:column="1">void</name></type> <name><name pos:line="92" pos:column="6">SplitterContainer</name><op:operator pos:line="92" pos:column="23">::</op:operator><name pos:line="92" pos:column="25">rotateTo</name></name><parameter_list pos:line="92" pos:column="33">(<param><decl><type><name pos:line="92" pos:column="34">DIRECTION</name></type> <name pos:line="92" pos:column="44">direction</name></decl></param>)</parameter_list> 
<block pos:line="93" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="94" pos:column="9">bool</name></type> <name pos:line="94" pos:column="14">doSwitchWindow</name> <init pos:line="94" pos:column="29">= <expr><lit:literal type="boolean" pos:line="94" pos:column="31">false</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name pos:line="95" pos:column="13">_dwSplitterStyle</name> <op:operator pos:line="95" pos:column="30">&amp;</op:operator> <name pos:line="95" pos:column="32">SV_VERTICAL</name></expr>)</condition><then pos:line="95" pos:column="44">
	<block pos:line="96" pos:column="9">{
		<expr_stmt><expr><name pos:line="97" pos:column="17">_dwSplitterStyle</name> <op:operator pos:line="97" pos:column="34">^=</op:operator> <name pos:line="97" pos:column="37">SV_VERTICAL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="98" pos:column="17">_dwSplitterStyle</name> <op:operator pos:line="98" pos:column="34">|=</op:operator> <name pos:line="98" pos:column="37">SV_HORIZONTAL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="99" pos:column="17">doSwitchWindow</name> <op:operator pos:line="99" pos:column="32">=</op:operator> <op:operator pos:line="99" pos:column="34">(</op:operator><name pos:line="99" pos:column="35">direction</name> <op:operator pos:line="99" pos:column="45">==</op:operator> <name pos:line="99" pos:column="48">LEFT</name><op:operator pos:line="99" pos:column="52">)</op:operator></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="101" pos:column="9">else
	<block pos:line="102" pos:column="9">{
		<expr_stmt><expr><name pos:line="103" pos:column="17">_dwSplitterStyle</name> <op:operator pos:line="103" pos:column="34">^=</op:operator> <name pos:line="103" pos:column="37">SV_HORIZONTAL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="104" pos:column="17">_dwSplitterStyle</name> <op:operator pos:line="104" pos:column="34">|=</op:operator> <name pos:line="104" pos:column="37">SV_VERTICAL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="105" pos:column="17">doSwitchWindow</name> <op:operator pos:line="105" pos:column="32">=</op:operator> <op:operator pos:line="105" pos:column="34">(</op:operator><name pos:line="105" pos:column="35">direction</name> <op:operator pos:line="105" pos:column="45">==</op:operator> <name pos:line="105" pos:column="48">RIGHT</name><op:operator pos:line="105" pos:column="53">)</op:operator></expr>;</expr_stmt>
	}</block></else></if>
	<if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><name pos:line="107" pos:column="13">doSwitchWindow</name></expr>)</condition><then pos:line="107" pos:column="28">
	<block pos:line="108" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="109" pos:column="17">Window</name> <type:modifier pos:line="109" pos:column="24">*</type:modifier></type><name pos:line="109" pos:column="25">tmp</name> <init pos:line="109" pos:column="29">= <expr><name pos:line="109" pos:column="31">_pWin0</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="110" pos:column="17">_pWin0</name> <op:operator pos:line="110" pos:column="24">=</op:operator> <name pos:line="110" pos:column="26">_pWin1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="111" pos:column="17">_pWin1</name> <op:operator pos:line="111" pos:column="24">=</op:operator> <name pos:line="111" pos:column="26">tmp</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="113" pos:column="9">_splitter</name><op:operator pos:line="113" pos:column="18">.</op:operator><name pos:line="113" pos:column="19">rotate</name></name><argument_list pos:line="113" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name pos:line="117" pos:column="1">LRESULT</name> <name pos:line="117" pos:column="9">CALLBACK</name></type> <name><name pos:line="117" pos:column="18">SplitterContainer</name><op:operator pos:line="117" pos:column="35">::</op:operator><name pos:line="117" pos:column="37">staticWinProc</name></name><parameter_list pos:line="117" pos:column="50">(<param><decl><type><name pos:line="117" pos:column="51">HWND</name></type> <name pos:line="117" pos:column="56">hwnd</name></decl></param>, <param><decl><type><name pos:line="117" pos:column="62">UINT</name></type> <name pos:line="117" pos:column="67">message</name></decl></param>, <param><decl><type><name pos:line="117" pos:column="76">WPARAM</name></type> <name pos:line="117" pos:column="83">wParam</name></decl></param>, <param><decl><type><name pos:line="117" pos:column="91">LPARAM</name></type> <name pos:line="117" pos:column="98">lParam</name></decl></param>)</parameter_list>
<block pos:line="118" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="119" pos:column="9">SplitterContainer</name> <type:modifier pos:line="119" pos:column="27">*</type:modifier></type><name pos:line="119" pos:column="28">pSplitterContainer</name> <init pos:line="119" pos:column="47">= <expr><name pos:line="119" pos:column="49">NULL</name></expr></init></decl>;</decl_stmt>
	<switch pos:line="120" pos:column="9">switch <condition pos:line="120" pos:column="16">(<expr><name pos:line="120" pos:column="17">message</name></expr>)</condition>
	<block pos:line="121" pos:column="9">{	
		<case pos:line="122" pos:column="17">case <expr><name pos:line="122" pos:column="22">WM_NCCREATE</name></expr> :
			<expr_stmt><expr><name pos:line="123" pos:column="25">pSplitterContainer</name> <op:operator pos:line="123" pos:column="44">=</op:operator> <op:operator pos:line="123" pos:column="46">(</op:operator><name pos:line="123" pos:column="47">SplitterContainer</name> <op:operator pos:line="123" pos:column="65">*</op:operator><op:operator pos:line="123" pos:column="66">)</op:operator><op:operator pos:line="123" pos:column="67">(</op:operator><op:operator pos:line="123" pos:column="68">(</op:operator><op:operator pos:line="123" pos:column="69">(</op:operator><name pos:line="123" pos:column="70">LPCREATESTRUCT</name><op:operator pos:line="123" pos:column="84">)</op:operator><name pos:line="123" pos:column="85">lParam</name><op:operator pos:line="123" pos:column="91">)</op:operator><op:operator pos:line="123" pos:column="92">-&gt;</op:operator><name pos:line="123" pos:column="94">lpCreateParams</name><op:operator pos:line="123" pos:column="108">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="124" pos:column="25">pSplitterContainer</name><op:operator pos:line="124" pos:column="43">-&gt;</op:operator><name pos:line="124" pos:column="45">_hSelf</name></name> <op:operator pos:line="124" pos:column="52">=</op:operator> <name pos:line="124" pos:column="54">hwnd</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="125" pos:column="25">::</op:operator><name pos:line="125" pos:column="27">SetWindowLongPtr</name></name><argument_list pos:line="125" pos:column="43">(<argument><expr><name pos:line="125" pos:column="44">hwnd</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="50">GWLP_USERDATA</name></expr></argument>, <argument><expr><op:operator pos:line="125" pos:column="65">(</op:operator><name pos:line="125" pos:column="66">LONG_PTR</name><op:operator pos:line="125" pos:column="74">)</op:operator><name pos:line="125" pos:column="75">pSplitterContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="126" pos:column="25">return <expr><name pos:line="126" pos:column="32">TRUE</name></expr>;</return>

		</case><default pos:line="128" pos:column="17">default :
			<expr_stmt><expr><name pos:line="129" pos:column="25">pSplitterContainer</name> <op:operator pos:line="129" pos:column="44">=</op:operator> <op:operator pos:line="129" pos:column="46">(</op:operator><name pos:line="129" pos:column="47">SplitterContainer</name> <op:operator pos:line="129" pos:column="65">*</op:operator><op:operator pos:line="129" pos:column="66">)</op:operator><call><name><op:operator pos:line="129" pos:column="67">::</op:operator><name pos:line="129" pos:column="69">GetWindowLongPtr</name></name><argument_list pos:line="129" pos:column="85">(<argument><expr><name pos:line="129" pos:column="86">hwnd</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="92">GWL_USERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="130" pos:column="25">if <condition pos:line="130" pos:column="28">(<expr><op:operator pos:line="130" pos:column="29">!</op:operator><name pos:line="130" pos:column="30">pSplitterContainer</name></expr>)</condition><then pos:line="130" pos:column="49">
				<return pos:line="131" pos:column="33">return <expr><call><name><op:operator pos:line="131" pos:column="40">::</op:operator><name pos:line="131" pos:column="42">DefWindowProc</name></name><argument_list pos:line="131" pos:column="55">(<argument><expr><name pos:line="131" pos:column="56">hwnd</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="62">message</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="71">wParam</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="79">lParam</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
			<return pos:line="132" pos:column="25">return <expr><call><name><name pos:line="132" pos:column="32">pSplitterContainer</name><op:operator pos:line="132" pos:column="50">-&gt;</op:operator><name pos:line="132" pos:column="52">runProc</name></name><argument_list pos:line="132" pos:column="59">(<argument><expr><name pos:line="132" pos:column="60">message</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="69">wParam</name></expr></argument>, <argument><expr><name pos:line="132" pos:column="77">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	</default>}</block></switch>
}</block></function>

<function><type><name pos:line="136" pos:column="1">LRESULT</name></type> <name><name pos:line="136" pos:column="9">SplitterContainer</name><op:operator pos:line="136" pos:column="26">::</op:operator><name pos:line="136" pos:column="28">runProc</name></name><parameter_list pos:line="136" pos:column="35">(<param><decl><type><name pos:line="136" pos:column="36">UINT</name></type> <name pos:line="136" pos:column="41">message</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="50">WPARAM</name></type> <name pos:line="136" pos:column="57">wParam</name></decl></param>, <param><decl><type><name pos:line="136" pos:column="65">LPARAM</name></type> <name pos:line="136" pos:column="72">lParam</name></decl></param>)</parameter_list>
<block pos:line="137" pos:column="1">{
	<switch pos:line="138" pos:column="9">switch <condition pos:line="138" pos:column="16">(<expr><name pos:line="138" pos:column="17">message</name></expr>)</condition>
	<block pos:line="139" pos:column="9">{
		<case pos:line="140" pos:column="17">case <expr><name pos:line="140" pos:column="22">WM_CREATE</name></expr> :
			<expr_stmt><expr><call><name><name pos:line="141" pos:column="25">_splitter</name><op:operator pos:line="141" pos:column="34">.</op:operator><name pos:line="141" pos:column="35">init</name></name><argument_list pos:line="141" pos:column="39">(<argument><expr><name pos:line="141" pos:column="40">_hInst</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="48">_hSelf</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="56">_splitterSize</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="71">_ratio</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="79">_dwSplitterStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="142" pos:column="25">return <expr><name pos:line="142" pos:column="32">TRUE</name></expr>;</return>
		
		</case><case pos:line="144" pos:column="17">case <expr><name pos:line="144" pos:column="22">WM_COMMAND</name></expr> :
		<block pos:line="145" pos:column="17">{
			<switch pos:line="146" pos:column="25">switch <condition pos:line="146" pos:column="32">(<expr><call><name pos:line="146" pos:column="33">LOWORD</name><argument_list pos:line="146" pos:column="39">(<argument><expr><name pos:line="146" pos:column="40">wParam</name></expr></argument>)</argument_list></call></expr>)</condition> 
			<block pos:line="147" pos:column="25">{
				<case pos:line="148" pos:column="33">case <expr><name pos:line="148" pos:column="38">ROTATION_A_GAUCHE</name></expr>:
					<expr_stmt><expr><call><name pos:line="149" pos:column="41">rotateTo</name><argument_list pos:line="149" pos:column="49">(<argument><expr><name pos:line="149" pos:column="50">LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="150" pos:column="41">return <expr><name pos:line="150" pos:column="48">TRUE</name></expr>;</return>
				</case><case pos:line="151" pos:column="33">case <expr><name pos:line="151" pos:column="38">ROTATION_A_DROITE</name></expr>:
					<expr_stmt><expr><call><name pos:line="152" pos:column="41">rotateTo</name><argument_list pos:line="152" pos:column="49">(<argument><expr><name pos:line="152" pos:column="50">RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="153" pos:column="41">return <expr><name pos:line="153" pos:column="48">TRUE</name></expr>;</return>
			</case>}</block></switch>
			<return pos:line="155" pos:column="25">return <expr><name pos:line="155" pos:column="32">TRUE</name></expr>;</return>
		}</block>
		</case><case pos:line="157" pos:column="17">case <expr><name pos:line="157" pos:column="22">WM_RESIZE_CONTAINER</name></expr> :
		<block pos:line="158" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="159" pos:column="25">RECT</name></type> <name pos:line="159" pos:column="30">rc0</name></decl><op:operator pos:line="159" pos:column="33">,</op:operator> <decl><type ref="prev"/><name pos:line="159" pos:column="35">rc1</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="160" pos:column="25">getClientRect</name><argument_list pos:line="160" pos:column="38">(<argument><expr><name pos:line="160" pos:column="39">rc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name pos:line="162" pos:column="25">rc1</name><op:operator pos:line="162" pos:column="28">.</op:operator><name pos:line="162" pos:column="29">top</name></name> <op:operator pos:line="162" pos:column="33">=</op:operator> <name><name pos:line="162" pos:column="35">rc0</name><op:operator pos:line="162" pos:column="38">.</op:operator><name pos:line="162" pos:column="39">top</name></name> <op:operator pos:line="162" pos:column="43">+=</op:operator> <name pos:line="162" pos:column="46">_y</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="163" pos:column="25">rc1</name><op:operator pos:line="163" pos:column="28">.</op:operator><name pos:line="163" pos:column="29">bottom</name></name> <op:operator pos:line="163" pos:column="36">=</op:operator> <name><name pos:line="163" pos:column="38">rc0</name><op:operator pos:line="163" pos:column="41">.</op:operator><name pos:line="163" pos:column="42">bottom</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="164" pos:column="25">rc1</name><op:operator pos:line="164" pos:column="28">.</op:operator><name pos:line="164" pos:column="29">left</name></name> <op:operator pos:line="164" pos:column="34">=</op:operator> <name><name pos:line="164" pos:column="36">rc0</name><op:operator pos:line="164" pos:column="39">.</op:operator><name pos:line="164" pos:column="40">left</name></name> <op:operator pos:line="164" pos:column="45">+=</op:operator> <name pos:line="164" pos:column="48">_x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="165" pos:column="25">rc1</name><op:operator pos:line="165" pos:column="28">.</op:operator><name pos:line="165" pos:column="29">right</name></name> <op:operator pos:line="165" pos:column="35">=</op:operator> <name><name pos:line="165" pos:column="37">rc0</name><op:operator pos:line="165" pos:column="40">.</op:operator><name pos:line="165" pos:column="41">right</name></name></expr>;</expr_stmt>

			<if pos:line="167" pos:column="25">if <condition pos:line="167" pos:column="28">(<expr><name pos:line="167" pos:column="29">_dwSplitterStyle</name> <op:operator pos:line="167" pos:column="46">&amp;</op:operator> <name pos:line="167" pos:column="48">SV_VERTICAL</name></expr>)</condition><then pos:line="167" pos:column="60">
			<block pos:line="168" pos:column="25">{
				<if pos:line="169" pos:column="33">if <condition pos:line="169" pos:column="36">(<expr><name pos:line="169" pos:column="37">wParam</name> <op:operator pos:line="169" pos:column="44">!=</op:operator> <lit:literal type="number" pos:line="169" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="169" pos:column="49">
				<block pos:line="170" pos:column="33">{
					<expr_stmt><expr><name><name pos:line="171" pos:column="41">rc0</name><op:operator pos:line="171" pos:column="44">.</op:operator><name pos:line="171" pos:column="45">right</name></name> <op:operator pos:line="171" pos:column="51">=</op:operator> <call><name pos:line="171" pos:column="53">int</name><argument_list pos:line="171" pos:column="56">(<argument><expr><name pos:line="171" pos:column="57">wParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><name><name pos:line="173" pos:column="41">rc1</name><op:operator pos:line="173" pos:column="44">.</op:operator><name pos:line="173" pos:column="45">left</name></name> <op:operator pos:line="173" pos:column="50">=</op:operator> <call><name pos:line="173" pos:column="52">int</name><argument_list pos:line="173" pos:column="55">(<argument><expr><name pos:line="173" pos:column="56">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="173" pos:column="64">+</op:operator> <name pos:line="173" pos:column="66">_x</name> <op:operator pos:line="173" pos:column="69">+</op:operator> <call><name><name pos:line="173" pos:column="71">_splitter</name><op:operator pos:line="173" pos:column="80">.</op:operator><name pos:line="173" pos:column="81">getPhisicalSize</name></name><argument_list pos:line="173" pos:column="96">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="174" pos:column="41">rc1</name><op:operator pos:line="174" pos:column="44">.</op:operator><name pos:line="174" pos:column="45">right</name></name> <op:operator pos:line="174" pos:column="51">=</op:operator> <name><name pos:line="174" pos:column="53">rc1</name><op:operator pos:line="174" pos:column="56">.</op:operator><name pos:line="174" pos:column="57">right</name></name> <op:operator pos:line="174" pos:column="63">-</op:operator> <name><name pos:line="174" pos:column="65">rc1</name><op:operator pos:line="174" pos:column="68">.</op:operator><name pos:line="174" pos:column="69">left</name></name> <op:operator pos:line="174" pos:column="74">+</op:operator> <name pos:line="174" pos:column="76">_x</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then>
			<else pos:line="177" pos:column="25">else <comment type="line" pos:line="177" pos:column="30">//SV_HORIZONTAL</comment>
			<block pos:line="178" pos:column="25">{
				<if pos:line="179" pos:column="33">if <condition pos:line="179" pos:column="36">(<expr><name pos:line="179" pos:column="37">lParam</name> <op:operator pos:line="179" pos:column="44">!=</op:operator> <lit:literal type="number" pos:line="179" pos:column="47">0</lit:literal></expr>)</condition><then pos:line="179" pos:column="49">
				<block pos:line="180" pos:column="33">{
					<expr_stmt><expr><name><name pos:line="181" pos:column="41">rc0</name><op:operator pos:line="181" pos:column="44">.</op:operator><name pos:line="181" pos:column="45">bottom</name></name> <op:operator pos:line="181" pos:column="52">=</op:operator> <call><name pos:line="181" pos:column="54">int</name><argument_list pos:line="181" pos:column="57">(<argument><expr><name pos:line="181" pos:column="58">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

					<expr_stmt><expr><name><name pos:line="183" pos:column="41">rc1</name><op:operator pos:line="183" pos:column="44">.</op:operator><name pos:line="183" pos:column="45">top</name></name>   <op:operator pos:line="183" pos:column="51">=</op:operator> <call><name pos:line="183" pos:column="53">int</name><argument_list pos:line="183" pos:column="56">(<argument><expr><name pos:line="183" pos:column="57">lParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="65">+</op:operator> <name pos:line="183" pos:column="67">_y</name> <op:operator pos:line="183" pos:column="70">+</op:operator> <call><name><name pos:line="183" pos:column="72">_splitter</name><op:operator pos:line="183" pos:column="81">.</op:operator><name pos:line="183" pos:column="82">getPhisicalSize</name></name><argument_list pos:line="183" pos:column="97">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="184" pos:column="41">rc1</name><op:operator pos:line="184" pos:column="44">.</op:operator><name pos:line="184" pos:column="45">bottom</name></name> <op:operator pos:line="184" pos:column="52">=</op:operator> <name><name pos:line="184" pos:column="54">rc1</name><op:operator pos:line="184" pos:column="57">.</op:operator><name pos:line="184" pos:column="58">bottom</name></name> <op:operator pos:line="184" pos:column="65">-</op:operator> <name><name pos:line="184" pos:column="67">rc1</name><op:operator pos:line="184" pos:column="70">.</op:operator><name pos:line="184" pos:column="71">top</name></name> <op:operator pos:line="184" pos:column="75">+</op:operator> <name pos:line="184" pos:column="77">_y</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></else></if>
			<expr_stmt><expr><call><name><name pos:line="187" pos:column="25">_pWin0</name><op:operator pos:line="187" pos:column="31">-&gt;</op:operator><name pos:line="187" pos:column="33">reSizeTo</name></name><argument_list pos:line="187" pos:column="41">(<argument><expr><name pos:line="187" pos:column="42">rc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="188" pos:column="25">_pWin1</name><op:operator pos:line="188" pos:column="31">-&gt;</op:operator><name pos:line="188" pos:column="33">reSizeTo</name></name><argument_list pos:line="188" pos:column="41">(<argument><expr><name pos:line="188" pos:column="42">rc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><op:operator pos:line="190" pos:column="25">::</op:operator><name pos:line="190" pos:column="27">InvalidateRect</name></name><argument_list pos:line="190" pos:column="41">(<argument><expr><call><name><name pos:line="190" pos:column="42">_splitter</name><op:operator pos:line="190" pos:column="51">.</op:operator><name pos:line="190" pos:column="52">getHSelf</name></name><argument_list pos:line="190" pos:column="60">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="190" pos:column="64">NULL</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="70">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="191" pos:column="25">return <expr><name pos:line="191" pos:column="32">TRUE</name></expr>;</return>
		}</block>
		
		</case><case pos:line="194" pos:column="17">case <expr><name pos:line="194" pos:column="22">WM_DOPOPUPMENU</name></expr> :
		<block pos:line="195" pos:column="17">{
			<if pos:line="196" pos:column="25">if <condition pos:line="196" pos:column="28">(<expr><op:operator pos:line="196" pos:column="29">(</op:operator><name pos:line="196" pos:column="30">_splitterMode</name> <op:operator pos:line="196" pos:column="44">!=</op:operator> <name pos:line="196" pos:column="47">LEFT_FIX</name><op:operator pos:line="196" pos:column="55">)</op:operator> <op:operator pos:line="196" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="196" pos:column="60">(</op:operator><name pos:line="196" pos:column="61">_splitterMode</name> <op:operator pos:line="196" pos:column="75">!=</op:operator> <name pos:line="196" pos:column="78">RIGHT_FIX</name><op:operator pos:line="196" pos:column="87">)</op:operator></expr> )</condition><then pos:line="196" pos:column="90">
			<block pos:line="197" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="198" pos:column="33">POINT</name></type> <name pos:line="198" pos:column="39">p</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="199" pos:column="33">::</op:operator><name pos:line="199" pos:column="35">GetCursorPos</name></name><argument_list pos:line="199" pos:column="47">(<argument><expr><op:operator pos:line="199" pos:column="48">&amp;</op:operator><name pos:line="199" pos:column="49">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
				<if pos:line="201" pos:column="33">if <condition pos:line="201" pos:column="36">(<expr><op:operator pos:line="201" pos:column="37">!</op:operator><name pos:line="201" pos:column="38">_hPopupMenu</name></expr>)</condition><then pos:line="201" pos:column="50">
				<block pos:line="202" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="203" pos:column="41">POINT</name></type> <name pos:line="203" pos:column="47">p</name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="204" pos:column="41">::</op:operator><name pos:line="204" pos:column="43">GetCursorPos</name></name><argument_list pos:line="204" pos:column="55">(<argument><expr><op:operator pos:line="204" pos:column="56">&amp;</op:operator><name pos:line="204" pos:column="57">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="205" pos:column="41">_hPopupMenu</name> <op:operator pos:line="205" pos:column="53">=</op:operator> <call><name><op:operator pos:line="205" pos:column="55">::</op:operator><name pos:line="205" pos:column="57">CreatePopupMenu</name></name><argument_list pos:line="205" pos:column="72">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="206" pos:column="41">::</op:operator><name pos:line="206" pos:column="43">InsertMenu</name></name><argument_list pos:line="206" pos:column="53">(<argument><expr><name pos:line="206" pos:column="54">_hPopupMenu</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="206" pos:column="67">1</lit:literal></expr></argument>, <argument><expr><name pos:line="206" pos:column="70">MF_BYPOSITION</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="85">ROTATION_A_GAUCHE</name></expr></argument>, <argument><expr><call><name pos:line="206" pos:column="104">TEXT</name><argument_list pos:line="206" pos:column="108">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="109">"Rotate to left"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><op:operator pos:line="207" pos:column="41">::</op:operator><name pos:line="207" pos:column="43">InsertMenu</name></name><argument_list pos:line="207" pos:column="53">(<argument><expr><name pos:line="207" pos:column="54">_hPopupMenu</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="207" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><name pos:line="207" pos:column="70">MF_BYPOSITION</name></expr></argument>, <argument><expr><name pos:line="207" pos:column="85">ROTATION_A_DROITE</name></expr></argument>, <argument><expr><call><name pos:line="207" pos:column="104">TEXT</name><argument_list pos:line="207" pos:column="108">(<argument><expr><lit:literal type="string" pos:line="207" pos:column="109">"Rotate to right"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				
				<expr_stmt><expr><call><name><op:operator pos:line="210" pos:column="33">::</op:operator><name pos:line="210" pos:column="35">TrackPopupMenu</name></name><argument_list pos:line="210" pos:column="49">(<argument><expr><name pos:line="210" pos:column="50">_hPopupMenu</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="63">TPM_LEFTALIGN</name></expr></argument>, <argument><expr><name><name pos:line="210" pos:column="78">p</name><op:operator pos:line="210" pos:column="79">.</op:operator><name pos:line="210" pos:column="80">x</name></name></expr></argument>, <argument><expr><name><name pos:line="210" pos:column="83">p</name><op:operator pos:line="210" pos:column="84">.</op:operator><name pos:line="210" pos:column="85">y</name></name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="210" pos:column="88">0</lit:literal></expr></argument>, <argument><expr><name pos:line="210" pos:column="91">_hSelf</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="99">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return pos:line="212" pos:column="25">return <expr><name pos:line="212" pos:column="32">TRUE</name></expr>;</return>
		}</block>

		</case><case pos:line="215" pos:column="17">case <expr><name pos:line="215" pos:column="22">WM_GETSPLITTER_X</name></expr> :
        <block pos:line="216" pos:column="9">{
            <if pos:line="217" pos:column="13">if <condition pos:line="217" pos:column="16">(<expr><name pos:line="217" pos:column="17">_splitterMode</name> <op:operator pos:line="217" pos:column="31">==</op:operator> <name pos:line="217" pos:column="34">LEFT_FIX</name></expr>)</condition><then pos:line="217" pos:column="43">
                <return pos:line="218" pos:column="17">return <expr><call><name pos:line="218" pos:column="24">MAKELONG</name><argument_list pos:line="218" pos:column="32">(<argument><expr><call><name><name pos:line="218" pos:column="33">_pWin0</name><op:operator pos:line="218" pos:column="39">-&gt;</op:operator><name pos:line="218" pos:column="41">getWidth</name></name><argument_list pos:line="218" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="218" pos:column="53">LEFT_FIX</name></expr></argument>)</argument_list></call></expr>;</return></then>
            <else pos:line="219" pos:column="13">else <if pos:line="219" pos:column="18">if <condition pos:line="219" pos:column="21">(<expr><name pos:line="219" pos:column="22">_splitterMode</name> <op:operator pos:line="219" pos:column="36">==</op:operator> <name pos:line="219" pos:column="39">RIGHT_FIX</name></expr>)</condition><then pos:line="219" pos:column="49">
            <block pos:line="220" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="221" pos:column="17">int</name></type> <name pos:line="221" pos:column="21">x</name> <init pos:line="221" pos:column="23">= <expr><call><name pos:line="221" pos:column="25">getWidth</name><argument_list pos:line="221" pos:column="33">()</argument_list></call><op:operator pos:line="221" pos:column="35">-</op:operator><call><name><name pos:line="221" pos:column="36">_pWin1</name><op:operator pos:line="221" pos:column="42">-&gt;</op:operator><name pos:line="221" pos:column="44">getWidth</name></name><argument_list pos:line="221" pos:column="52">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="222" pos:column="17">if <condition pos:line="222" pos:column="20">(<expr><name pos:line="222" pos:column="21">x</name> <op:operator pos:line="222" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="222" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="222" pos:column="27">
                    <expr_stmt><expr><name pos:line="223" pos:column="21">x</name> <op:operator pos:line="223" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="223" pos:column="25">0</lit:literal></expr>;</expr_stmt></then></if>
                <return pos:line="224" pos:column="17">return <expr><call><name pos:line="224" pos:column="24">MAKELONG</name><argument_list pos:line="224" pos:column="32">(<argument><expr><name pos:line="224" pos:column="33">x</name></expr></argument>, <argument><expr><name pos:line="224" pos:column="36">RIGHT_FIX</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else pos:line="226" pos:column="13">else
			    <return pos:line="227" pos:column="29">return <expr><call><name pos:line="227" pos:column="36">MAKELONG</name><argument_list pos:line="227" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="227" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><name pos:line="227" pos:column="48">DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
         
        }</block>

		</case><case pos:line="231" pos:column="17">case <expr><name pos:line="231" pos:column="22">WM_GETSPLITTER_Y</name></expr> :
        <block pos:line="232" pos:column="9">{
            <if pos:line="233" pos:column="13">if <condition pos:line="233" pos:column="16">(<expr><name pos:line="233" pos:column="17">_splitterMode</name> <op:operator pos:line="233" pos:column="31">==</op:operator> <name pos:line="233" pos:column="34">LEFT_FIX</name></expr>)</condition><then pos:line="233" pos:column="43">
                <return pos:line="234" pos:column="17">return <expr><call><name pos:line="234" pos:column="24">MAKELONG</name><argument_list pos:line="234" pos:column="32">(<argument><expr><call><name><name pos:line="234" pos:column="33">_pWin0</name><op:operator pos:line="234" pos:column="39">-&gt;</op:operator><name pos:line="234" pos:column="41">getHeight</name></name><argument_list pos:line="234" pos:column="50">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="234" pos:column="54">LEFT_FIX</name></expr></argument>)</argument_list></call></expr>;</return></then>
            <else pos:line="235" pos:column="13">else <if pos:line="235" pos:column="18">if <condition pos:line="235" pos:column="21">(<expr><name pos:line="235" pos:column="22">_splitterMode</name> <op:operator pos:line="235" pos:column="36">==</op:operator> <name pos:line="235" pos:column="39">RIGHT_FIX</name></expr>)</condition><then pos:line="235" pos:column="49">
            <block pos:line="236" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="237" pos:column="17">int</name></type> <name pos:line="237" pos:column="21">y</name> <init pos:line="237" pos:column="23">= <expr><call><name pos:line="237" pos:column="25">getHeight</name><argument_list pos:line="237" pos:column="34">()</argument_list></call><op:operator pos:line="237" pos:column="36">-</op:operator><call><name><name pos:line="237" pos:column="37">_pWin1</name><op:operator pos:line="237" pos:column="43">-&gt;</op:operator><name pos:line="237" pos:column="45">getHeight</name></name><argument_list pos:line="237" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><name pos:line="238" pos:column="21">y</name> <op:operator pos:line="238" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="238" pos:column="25">0</lit:literal></expr>)</condition><then pos:line="238" pos:column="27">
                    <expr_stmt><expr><name pos:line="239" pos:column="21">y</name> <op:operator pos:line="239" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="239" pos:column="25">0</lit:literal></expr>;</expr_stmt></then></if>
                <return pos:line="240" pos:column="17">return <expr><call><name pos:line="240" pos:column="24">MAKELONG</name><argument_list pos:line="240" pos:column="32">(<argument><expr><name pos:line="240" pos:column="33">y</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="36">RIGHT_FIX</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
            <else pos:line="242" pos:column="13">else
			    <return pos:line="243" pos:column="29">return <expr><call><name pos:line="243" pos:column="36">MAKELONG</name><argument_list pos:line="243" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="243" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><name pos:line="243" pos:column="48">DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
        }</block>

		</case><default pos:line="246" pos:column="17">default :
			<return pos:line="247" pos:column="25">return <expr><call><name><op:operator pos:line="247" pos:column="32">::</op:operator><name pos:line="247" pos:column="34">DefWindowProc</name></name><argument_list pos:line="247" pos:column="47">(<argument><expr><name pos:line="247" pos:column="48">_hSelf</name></expr></argument>, <argument><expr><name pos:line="247" pos:column="56">message</name></expr></argument>, <argument><expr><name pos:line="247" pos:column="65">wParam</name></expr></argument>, <argument><expr><name pos:line="247" pos:column="73">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	</default>}</block></switch>
}</block></function>
</unit>
