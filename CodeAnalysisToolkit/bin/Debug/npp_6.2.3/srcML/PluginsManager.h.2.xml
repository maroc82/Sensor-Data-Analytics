<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\PluginsManager\PluginsManager.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">PLUGINSMANAGER_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">PLUGINSMANAGER_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifndef</cpp:directive> <name pos:line="32" pos:column="9">RESOURCE_H</name></cpp:ifndef>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"resource.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="34" pos:column="8">//RESOURCE_H</comment>

<cpp:ifndef pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">ifndef</cpp:directive> <name pos:line="36" pos:column="9">PARAMETERS_H</name></cpp:ifndef>
<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="37" pos:column="10">"Parameters.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="38" pos:column="8">//PARAMETERS_H</comment>

<cpp:ifndef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifndef</cpp:directive> <name pos:line="40" pos:column="9">PLUGININTERFACE_H</name></cpp:ifndef>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="41" pos:column="10">"PluginInterface.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="42" pos:column="8">//PLUGININTERFACE_H</comment>

<cpp:ifndef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifndef</cpp:directive> <name pos:line="44" pos:column="9">IDALLOCATOR_H</name></cpp:ifndef>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"IDAllocator.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="46" pos:column="8">// IDALLOCATOR_H</comment>

<typedef pos:line="48" pos:column="1">typedef <function_decl><type><name pos:line="48" pos:column="9">BOOL</name></type> (<name pos:line="48" pos:column="15">__cdecl</name> <type:modifier pos:line="48" pos:column="23">*</type:modifier> <name pos:line="48" pos:column="25">PFUNCISUNICODE</name>)<parameter_list pos:line="48" pos:column="40">()</parameter_list>;</function_decl></typedef>

<struct pos:line="50" pos:column="1">struct <name pos:line="50" pos:column="8">PluginCommand</name> <block pos:line="50" pos:column="22">{<public type="default" pos:line="50" pos:column="23">
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">generic_string</name></type> <name pos:line="51" pos:column="24">_pluginName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">int</name></type> <name pos:line="52" pos:column="13">_funcID</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">PFUNCPLUGINCMD</name></type> <name pos:line="53" pos:column="24">_pFunc</name></decl>;</decl_stmt>
	<constructor><name pos:line="54" pos:column="9">PluginCommand</name><parameter_list pos:line="54" pos:column="22">(<param><decl><type><specifier pos:line="54" pos:column="23">const</specifier> <name pos:line="54" pos:column="29">TCHAR</name> <type:modifier pos:line="54" pos:column="35">*</type:modifier></type><name pos:line="54" pos:column="36">pluginName</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="48">int</name></type> <name pos:line="54" pos:column="52">funcID</name></decl></param>, <param><decl><type><name pos:line="54" pos:column="60">PFUNCPLUGINCMD</name></type> <name pos:line="54" pos:column="75">pFunc</name></decl></param>)</parameter_list><member_list pos:line="54" pos:column="81">: <call><name pos:line="54" pos:column="83">_funcID</name><argument_list pos:line="54" pos:column="90">(<argument><expr><name pos:line="54" pos:column="91">funcID</name></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="98">,</op:operator> <call><name pos:line="54" pos:column="100">_pFunc</name><argument_list pos:line="54" pos:column="106">(<argument><expr><name pos:line="54" pos:column="107">pFunc</name></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="113">,</op:operator> <call><name pos:line="54" pos:column="115">_pluginName</name><argument_list pos:line="54" pos:column="126">(<argument><expr><name pos:line="54" pos:column="127">pluginName</name></expr></argument>)</argument_list></call></member_list><block pos:line="54" pos:column="138">{}</block></constructor><empty_stmt pos:line="54" pos:column="140">;</empty_stmt>
</public>}</block>;</struct>

<struct pos:line="57" pos:column="1">struct <name pos:line="57" pos:column="8">PluginInfo</name> <block pos:line="57" pos:column="19">{<public type="default" pos:line="57" pos:column="20">
	<constructor><name pos:line="58" pos:column="9">PluginInfo</name><parameter_list pos:line="58" pos:column="19">()</parameter_list> <member_list pos:line="58" pos:column="22">:<call><name pos:line="58" pos:column="23">_hLib</name><argument_list pos:line="58" pos:column="28">(<argument><expr><name pos:line="58" pos:column="29">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="34">,</op:operator> <call><name pos:line="58" pos:column="36">_pluginMenu</name><argument_list pos:line="58" pos:column="47">(<argument><expr><name pos:line="58" pos:column="48">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="53">,</op:operator> <call><name pos:line="58" pos:column="55">_pFuncSetInfo</name><argument_list pos:line="58" pos:column="68">(<argument><expr><name pos:line="58" pos:column="69">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="58" pos:column="74">,</op:operator>\
		<call><name pos:line="59" pos:column="17">_pFuncGetFuncsArray</name><argument_list pos:line="59" pos:column="36">(<argument><expr><name pos:line="59" pos:column="37">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="42">,</op:operator> <call><name pos:line="59" pos:column="44">_pFuncGetName</name><argument_list pos:line="59" pos:column="57">(<argument><expr><name pos:line="59" pos:column="58">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="63">,</op:operator> <call><name pos:line="59" pos:column="65">_funcItems</name><argument_list pos:line="59" pos:column="75">(<argument><expr><name pos:line="59" pos:column="76">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="59" pos:column="81">,</op:operator>\
		<call><name pos:line="60" pos:column="17">_nbFuncItem</name><argument_list pos:line="60" pos:column="28">(<argument><expr><lit:literal type="number" pos:line="60" pos:column="29">0</lit:literal></expr></argument>)</argument_list></call></member_list><block pos:line="60" pos:column="31">{}</block></constructor><empty_stmt pos:line="60" pos:column="33">;</empty_stmt>
	<destructor><name pos:line="61" pos:column="9">~<name pos:line="61" pos:column="10">PluginInfo</name></name><parameter_list pos:line="61" pos:column="20">()</parameter_list><block pos:line="61" pos:column="22">{
		<if pos:line="62" pos:column="17">if <condition pos:line="62" pos:column="20">(<expr><name pos:line="62" pos:column="21">_pluginMenu</name></expr>)</condition><then pos:line="62" pos:column="33">
			<expr_stmt><expr><call><name><op:operator pos:line="63" pos:column="25">::</op:operator><name pos:line="63" pos:column="27">DestroyMenu</name></name><argument_list pos:line="63" pos:column="38">(<argument><expr><name pos:line="63" pos:column="39">_pluginMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name pos:line="65" pos:column="21">_hLib</name></expr>)</condition><then pos:line="65" pos:column="27">
			<expr_stmt><expr><call><name><op:operator pos:line="66" pos:column="25">::</op:operator><name pos:line="66" pos:column="27">FreeLibrary</name></name><argument_list pos:line="66" pos:column="38">(<argument><expr><name pos:line="66" pos:column="39">_hLib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></destructor><empty_stmt pos:line="67" pos:column="10">;</empty_stmt>

	<decl_stmt><decl><type><name pos:line="69" pos:column="9">HINSTANCE</name></type> <name pos:line="69" pos:column="19">_hLib</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="70" pos:column="9">HMENU</name></type> <name pos:line="70" pos:column="15">_pluginMenu</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="72" pos:column="9">PFUNCSETINFO</name></type> <name pos:line="72" pos:column="22">_pFuncSetInfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">PFUNCGETNAME</name></type> <name pos:line="73" pos:column="22">_pFuncGetName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">PBENOTIFIED</name></type>	<name pos:line="74" pos:column="25">_pBeNotified</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="75" pos:column="9">PFUNCGETFUNCSARRAY</name></type> <name pos:line="75" pos:column="28">_pFuncGetFuncsArray</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">PMESSAGEPROC</name></type> <name pos:line="76" pos:column="22">_pMessageProc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">PFUNCISUNICODE</name></type> <name pos:line="77" pos:column="24">_pFuncIsUnicode</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="79" pos:column="9">FuncItem</name> <type:modifier pos:line="79" pos:column="18">*</type:modifier></type><name pos:line="79" pos:column="19">_funcItems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">int</name></type> <name pos:line="80" pos:column="13">_nbFuncItem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="81" pos:column="9">generic_string</name></type> <name pos:line="81" pos:column="24">_moduleName</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<class pos:line="84" pos:column="1">class <name pos:line="84" pos:column="7">PluginsManager</name> <block pos:line="84" pos:column="22">{<private type="default" pos:line="84" pos:column="23">
</private><public pos:line="85" pos:column="1">public:
	<constructor><name pos:line="86" pos:column="9">PluginsManager</name><parameter_list pos:line="86" pos:column="23">()</parameter_list> <member_list pos:line="86" pos:column="26">: <call><name pos:line="86" pos:column="28">_hPluginsMenu</name><argument_list pos:line="86" pos:column="41">(<argument><expr><name pos:line="86" pos:column="42">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="86" pos:column="47">,</op:operator> <call><name pos:line="86" pos:column="49">_isDisabled</name><argument_list pos:line="86" pos:column="60">(<argument><expr><lit:literal type="boolean" pos:line="86" pos:column="61">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="86" pos:column="67">,</op:operator> <call><name pos:line="86" pos:column="69">_dynamicIDAlloc</name><argument_list pos:line="86" pos:column="84">(<argument><expr><name pos:line="86" pos:column="85">ID_PLUGINS_CMD_DYNAMIC</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="109">ID_PLUGINS_CMD_DYNAMIC_LIMIT</name></expr></argument>)</argument_list></call><op:operator pos:line="86" pos:column="138">,</op:operator>
					   <call><name pos:line="87" pos:column="44">_markerAlloc</name><argument_list pos:line="87" pos:column="56">(<argument><expr><name pos:line="87" pos:column="57">MARKER_PLUGINS</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="73">MARKER_PLUGINS_LIMIT</name></expr></argument>)</argument_list></call>	</member_list><block pos:line="87" pos:column="97">{}</block></constructor><empty_stmt pos:line="87" pos:column="99">;</empty_stmt>
	<destructor><name pos:line="88" pos:column="9">~<name pos:line="88" pos:column="10">PluginsManager</name></name><parameter_list pos:line="88" pos:column="24">()</parameter_list> <block pos:line="88" pos:column="27">{
		
		<for pos:line="90" pos:column="17">for (<init><decl><type><name pos:line="90" pos:column="22">size_t</name></type> <name pos:line="90" pos:column="29">i</name> <init pos:line="90" pos:column="31">= <expr><lit:literal type="number" pos:line="90" pos:column="33">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="90" pos:column="37">i</name> <op:operator pos:line="90" pos:column="39">&lt;</op:operator> <call><name><name pos:line="90" pos:column="41">_pluginInfos</name><op:operator pos:line="90" pos:column="53">.</op:operator><name pos:line="90" pos:column="54">size</name></name><argument_list pos:line="90" pos:column="58">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="90" pos:column="63">i</name><op:operator pos:line="90" pos:column="64">++</op:operator></expr></incr>)
			<expr_stmt><expr><op:operator pos:line="91" pos:column="25">delete</op:operator> <name><name pos:line="91" pos:column="32">_pluginInfos</name><index pos:line="91" pos:column="44">[<expr><name pos:line="91" pos:column="45">i</name></expr>]</index></name></expr>;</expr_stmt></for>

		<if pos:line="93" pos:column="17">if <condition pos:line="93" pos:column="20">(<expr><name pos:line="93" pos:column="21">_hPluginsMenu</name></expr>)</condition><then pos:line="93" pos:column="35">
			<expr_stmt><expr><call><name pos:line="94" pos:column="25">DestroyMenu</name><argument_list pos:line="94" pos:column="36">(<argument><expr><name pos:line="94" pos:column="37">_hPluginsMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></destructor><empty_stmt pos:line="95" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="96" pos:column="9">void</name></type> <name pos:line="96" pos:column="14">init</name><parameter_list pos:line="96" pos:column="18">(<param><decl><type><specifier pos:line="96" pos:column="19">const</specifier> <name pos:line="96" pos:column="25">NppData</name> <type:modifier pos:line="96" pos:column="33">&amp;</type:modifier></type> <name pos:line="96" pos:column="35">nppData</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="44">{
		<expr_stmt><expr><name pos:line="97" pos:column="17">_nppData</name> <op:operator pos:line="97" pos:column="26">=</op:operator> <name pos:line="97" pos:column="28">nppData</name></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="98" pos:column="10">;</empty_stmt>

    <function_decl><type><name pos:line="100" pos:column="5">int</name></type> <name pos:line="100" pos:column="9">loadPlugin</name><parameter_list pos:line="100" pos:column="19">(<param><decl><type><specifier pos:line="100" pos:column="20">const</specifier> <name pos:line="100" pos:column="26">TCHAR</name> <type:modifier pos:line="100" pos:column="32">*</type:modifier></type><name pos:line="100" pos:column="33">pluginFilePath</name></decl></param>, <param><decl><type><name><name pos:line="100" pos:column="49">vector</name><argument_list pos:line="100" pos:column="55">&lt;<argument><expr><name pos:line="100" pos:column="56">generic_string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="100" pos:column="72">&amp;</type:modifier></type> <name pos:line="100" pos:column="74">dll2Remove</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="101" pos:column="9">bool</name></type> <name pos:line="101" pos:column="14">loadPlugins</name><parameter_list pos:line="101" pos:column="25">(<param><decl><type><specifier pos:line="101" pos:column="26">const</specifier> <name pos:line="101" pos:column="32">TCHAR</name> <type:modifier pos:line="101" pos:column="38">*</type:modifier></type><name pos:line="101" pos:column="39">dir</name> <init pos:line="101" pos:column="43">= <expr><name pos:line="101" pos:column="45">NULL</name></expr></init></decl></param>)</parameter_list>;</function_decl>
	
    <function_decl><type><name pos:line="103" pos:column="5">bool</name></type> <name pos:line="103" pos:column="10">unloadPlugin</name><parameter_list pos:line="103" pos:column="22">(<param><decl><type><name pos:line="103" pos:column="23">int</name></type> <name pos:line="103" pos:column="27">index</name></decl></param>, <param><decl><type><name pos:line="103" pos:column="34">HWND</name></type> <name pos:line="103" pos:column="39">nppHandle</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="105" pos:column="9">void</name></type> <name pos:line="105" pos:column="14">runPluginCommand</name><parameter_list pos:line="105" pos:column="30">(<param><decl><type><name pos:line="105" pos:column="31">size_t</name></type> <name pos:line="105" pos:column="38">i</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="106" pos:column="9">void</name></type> <name pos:line="106" pos:column="14">runPluginCommand</name><parameter_list pos:line="106" pos:column="30">(<param><decl><type><specifier pos:line="106" pos:column="31">const</specifier> <name pos:line="106" pos:column="37">TCHAR</name> <type:modifier pos:line="106" pos:column="43">*</type:modifier></type><name pos:line="106" pos:column="44">pluginName</name></decl></param>, <param><decl><type><name pos:line="106" pos:column="56">int</name></type> <name pos:line="106" pos:column="60">commandID</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name pos:line="108" pos:column="5">void</name></type> <name pos:line="108" pos:column="10">addInMenuFromPMIndex</name><parameter_list pos:line="108" pos:column="30">(<param><decl><type><name pos:line="108" pos:column="31">int</name></type> <name pos:line="108" pos:column="35">i</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="109" pos:column="9">HMENU</name></type> <name pos:line="109" pos:column="15">setMenu</name><parameter_list pos:line="109" pos:column="22">(<param><decl><type><name pos:line="109" pos:column="23">HMENU</name></type> <name pos:line="109" pos:column="29">hMenu</name></decl></param>, <param><decl><type><specifier pos:line="109" pos:column="36">const</specifier> <name pos:line="109" pos:column="42">TCHAR</name> <type:modifier pos:line="109" pos:column="48">*</type:modifier></type><name pos:line="109" pos:column="49">menuName</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="110" pos:column="9">bool</name></type> <name pos:line="110" pos:column="14">getShortcutByCmdID</name><parameter_list pos:line="110" pos:column="32">(<param><decl><type><name pos:line="110" pos:column="33">int</name></type> <name pos:line="110" pos:column="37">cmdID</name></decl></param>, <param><decl><type><name pos:line="110" pos:column="44">ShortcutKey</name> <type:modifier pos:line="110" pos:column="56">*</type:modifier></type><name pos:line="110" pos:column="57">sk</name></decl></param>)</parameter_list>;</function_decl>

	<function_decl><type><name pos:line="112" pos:column="9">void</name></type> <name pos:line="112" pos:column="14">notify</name><parameter_list pos:line="112" pos:column="20">(<param><decl><type><name pos:line="112" pos:column="21">SCNotification</name> <type:modifier pos:line="112" pos:column="36">*</type:modifier></type><name pos:line="112" pos:column="37">notification</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="113" pos:column="9">void</name></type> <name pos:line="113" pos:column="14">relayNppMessages</name><parameter_list pos:line="113" pos:column="30">(<param><decl><type><name pos:line="113" pos:column="31">UINT</name></type> <name pos:line="113" pos:column="36">Message</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="45">WPARAM</name></type> <name pos:line="113" pos:column="52">wParam</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="60">LPARAM</name></type> <name pos:line="113" pos:column="67">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="114" pos:column="9">bool</name></type> <name pos:line="114" pos:column="14">relayPluginMessages</name><parameter_list pos:line="114" pos:column="33">(<param><decl><type><name pos:line="114" pos:column="34">UINT</name></type> <name pos:line="114" pos:column="39">Message</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="48">WPARAM</name></type> <name pos:line="114" pos:column="55">wParam</name></decl></param>, <param><decl><type><name pos:line="114" pos:column="63">LPARAM</name></type> <name pos:line="114" pos:column="70">lParam</name></decl></param>)</parameter_list>;</function_decl>

	<function><type><name pos:line="116" pos:column="9">HMENU</name></type> <name pos:line="116" pos:column="15">getMenuHandle</name><parameter_list pos:line="116" pos:column="28">()</parameter_list> <block pos:line="116" pos:column="31">{
		<return pos:line="117" pos:column="17">return <expr><name pos:line="117" pos:column="24">_hPluginsMenu</name></expr>;</return>
	}</block></function><empty_stmt pos:line="118" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="120" pos:column="9">void</name></type> <name pos:line="120" pos:column="14">disable</name><parameter_list pos:line="120" pos:column="21">()</parameter_list> <block pos:line="120" pos:column="24">{<expr_stmt><expr><name pos:line="120" pos:column="25">_isDisabled</name> <op:operator pos:line="120" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="120" pos:column="39">true</lit:literal></expr>;</expr_stmt>}</block></function><empty_stmt pos:line="120" pos:column="45">;</empty_stmt>
	<function><type><name pos:line="121" pos:column="9">bool</name></type> <name pos:line="121" pos:column="14">hasPlugins</name><parameter_list pos:line="121" pos:column="24">()</parameter_list><block pos:line="121" pos:column="26">{<return pos:line="121" pos:column="27">return <expr><op:operator pos:line="121" pos:column="34">(</op:operator><call><name><name pos:line="121" pos:column="35">_pluginInfos</name><op:operator pos:line="121" pos:column="47">.</op:operator><name pos:line="121" pos:column="48">size</name></name><argument_list pos:line="121" pos:column="52">()</argument_list></call><op:operator pos:line="121" pos:column="54">!=</op:operator> <lit:literal type="number" pos:line="121" pos:column="57">0</lit:literal><op:operator pos:line="121" pos:column="58">)</op:operator></expr>;</return>}</block></function><empty_stmt pos:line="121" pos:column="61">;</empty_stmt>

	<function_decl><type><name pos:line="123" pos:column="9">bool</name></type> <name pos:line="123" pos:column="14">allocateCmdID</name><parameter_list pos:line="123" pos:column="27">(<param><decl><type><name pos:line="123" pos:column="28">int</name></type> <name pos:line="123" pos:column="32">numberRequired</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="48">int</name> <type:modifier pos:line="123" pos:column="52">*</type:modifier></type><name pos:line="123" pos:column="53">start</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name pos:line="124" pos:column="9">bool</name></type> <name pos:line="124" pos:column="14">inDynamicRange</name><parameter_list pos:line="124" pos:column="28">(<param><decl><type><name pos:line="124" pos:column="29">int</name></type> <name pos:line="124" pos:column="33">id</name></decl></param>)</parameter_list> <block pos:line="124" pos:column="37">{ <return pos:line="124" pos:column="39">return <expr><call><name><name pos:line="124" pos:column="46">_dynamicIDAlloc</name><op:operator pos:line="124" pos:column="61">.</op:operator><name pos:line="124" pos:column="62">isInRange</name></name><argument_list pos:line="124" pos:column="71">(<argument><expr><name pos:line="124" pos:column="72">id</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

	<function_decl><type><name pos:line="126" pos:column="9">bool</name></type> <name pos:line="126" pos:column="14">allocateMarker</name><parameter_list pos:line="126" pos:column="28">(<param><decl><type><name pos:line="126" pos:column="29">int</name></type> <name pos:line="126" pos:column="33">numberRequired</name></decl></param>, <param><decl><type><name pos:line="126" pos:column="49">int</name> <type:modifier pos:line="126" pos:column="53">*</type:modifier></type><name pos:line="126" pos:column="54">start</name></decl></param>)</parameter_list>;</function_decl>

</public><private pos:line="128" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="129" pos:column="9">NppData</name></type> <name pos:line="129" pos:column="17">_nppData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">HMENU</name></type> <name pos:line="130" pos:column="15">_hPluginsMenu</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="132" pos:column="9">vector</name><argument_list pos:line="132" pos:column="15">&lt;<argument><expr><name pos:line="132" pos:column="16">PluginInfo</name> <type:modifier pos:line="132" pos:column="27">*</type:modifier></expr></argument>&gt;</argument_list></name></type> <name pos:line="132" pos:column="30">_pluginInfos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="133" pos:column="9">vector</name><argument_list pos:line="133" pos:column="15">&lt;<argument><expr><name pos:line="133" pos:column="16">PluginCommand</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="133" pos:column="31">_pluginsCommands</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="134" pos:column="9">vector</name><argument_list pos:line="134" pos:column="15">&lt;<argument><expr><name pos:line="134" pos:column="16">generic_string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="134" pos:column="32">_loadedDlls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">bool</name></type> <name pos:line="135" pos:column="14">_isDisabled</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">IDAllocator</name></type> <name pos:line="136" pos:column="21">_dynamicIDAlloc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">IDAllocator</name></type> <name pos:line="137" pos:column="21">_markerAlloc</name></decl>;</decl_stmt>
	<function><type><name pos:line="138" pos:column="9">void</name></type> <name pos:line="138" pos:column="14">pluginCrashAlert</name><parameter_list pos:line="138" pos:column="30">(<param><decl><type><specifier pos:line="138" pos:column="31">const</specifier> <name pos:line="138" pos:column="37">TCHAR</name> <type:modifier pos:line="138" pos:column="43">*</type:modifier></type><name pos:line="138" pos:column="44">pluginName</name></decl></param>, <param><decl><type><specifier pos:line="138" pos:column="56">const</specifier> <name pos:line="138" pos:column="62">TCHAR</name> <type:modifier pos:line="138" pos:column="68">*</type:modifier></type><name pos:line="138" pos:column="69">funcSignature</name></decl></param>)</parameter_list> <block pos:line="138" pos:column="84">{
		<decl_stmt><decl><type><name pos:line="139" pos:column="17">generic_string</name></type> <name pos:line="139" pos:column="32">msg</name> <init pos:line="139" pos:column="36">= <expr><name pos:line="139" pos:column="38">pluginName</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="140" pos:column="17">msg</name> <op:operator pos:line="140" pos:column="21">+=</op:operator> <call><name pos:line="140" pos:column="24">TEXT</name><argument_list pos:line="140" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="140" pos:column="29">" just crash in\r"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="141" pos:column="17">msg</name> <op:operator pos:line="141" pos:column="21">+=</op:operator> <name pos:line="141" pos:column="24">funcSignature</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="142" pos:column="17">::</op:operator><name pos:line="142" pos:column="19">MessageBox</name></name><argument_list pos:line="142" pos:column="29">(<argument><expr><name pos:line="142" pos:column="30">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="142" pos:column="36">msg</name><op:operator pos:line="142" pos:column="39">.</op:operator><name pos:line="142" pos:column="40">c_str</name></name><argument_list pos:line="142" pos:column="45">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="142" pos:column="49">TEXT</name><argument_list pos:line="142" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="142" pos:column="54">" just crash in\r"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="142" pos:column="75">MB_OK</name><op:operator pos:line="142" pos:column="80">|</op:operator><name pos:line="142" pos:column="81">MB_ICONSTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="143" pos:column="10">;</empty_stmt>
	<function><type><name pos:line="144" pos:column="9">bool</name></type> <name pos:line="144" pos:column="14">isInLoadedDlls</name><parameter_list pos:line="144" pos:column="28">(<param><decl><type><specifier pos:line="144" pos:column="29">const</specifier> <name pos:line="144" pos:column="35">TCHAR</name> <type:modifier pos:line="144" pos:column="41">*</type:modifier></type><name pos:line="144" pos:column="42">fn</name></decl></param>)</parameter_list> <specifier pos:line="144" pos:column="46">const</specifier> <block pos:line="144" pos:column="52">{
		<for pos:line="145" pos:column="17">for (<init><decl><type><name pos:line="145" pos:column="22">size_t</name></type> <name pos:line="145" pos:column="29">i</name> <init pos:line="145" pos:column="31">= <expr><lit:literal type="number" pos:line="145" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="145" pos:column="36">i</name> <op:operator pos:line="145" pos:column="38">&lt;</op:operator> <call><name><name pos:line="145" pos:column="40">_loadedDlls</name><op:operator pos:line="145" pos:column="51">.</op:operator><name pos:line="145" pos:column="52">size</name></name><argument_list pos:line="145" pos:column="56">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="145" pos:column="60">i</name><op:operator pos:line="145" pos:column="61">++</op:operator></expr></incr>)
			<if pos:line="146" pos:column="25">if <condition pos:line="146" pos:column="28">(<expr><call><name pos:line="146" pos:column="29">generic_stricmp</name><argument_list pos:line="146" pos:column="44">(<argument><expr><name pos:line="146" pos:column="45">fn</name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="49">_loadedDlls</name><index pos:line="146" pos:column="60">[<expr><name pos:line="146" pos:column="61">i</name></expr>]</index></name><op:operator pos:line="146" pos:column="63">.</op:operator><call><name pos:line="146" pos:column="64">c_str</name><argument_list pos:line="146" pos:column="69">()</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="146" pos:column="73">==</op:operator> <lit:literal type="number" pos:line="146" pos:column="76">0</lit:literal></expr>)</condition><then pos:line="146" pos:column="78">
				<return pos:line="147" pos:column="33">return <expr><lit:literal type="boolean" pos:line="147" pos:column="40">true</lit:literal></expr>;</return></then></if></for>
		<return pos:line="148" pos:column="17">return <expr><lit:literal type="boolean" pos:line="148" pos:column="24">false</lit:literal></expr>;</return>
	}</block></function><empty_stmt pos:line="149" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="151" pos:column="9">void</name></type> <name pos:line="151" pos:column="14">addInLoadedDlls</name><parameter_list pos:line="151" pos:column="29">(<param><decl><type><specifier pos:line="151" pos:column="30">const</specifier> <name pos:line="151" pos:column="36">TCHAR</name> <type:modifier pos:line="151" pos:column="42">*</type:modifier></type><name pos:line="151" pos:column="43">fn</name></decl></param>)</parameter_list> <block pos:line="151" pos:column="47">{
		<expr_stmt><expr><call><name><name pos:line="152" pos:column="17">_loadedDlls</name><op:operator pos:line="152" pos:column="28">.</op:operator><name pos:line="152" pos:column="29">push_back</name></name><argument_list pos:line="152" pos:column="38">(<argument><expr><name pos:line="152" pos:column="39">fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="153" pos:column="10">;</empty_stmt>
</private>}</block>;</class>

<cpp:define pos:line="156" pos:column="1">#<cpp:directive pos:line="156" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="156" pos:column="9">EXT_LEXER_DECL</name></cpp:macro> <cpp:value pos:line="156" pos:column="24">__stdcall</cpp:value></cpp:define>

<comment type="line" pos:line="158" pos:column="1">// External Lexer function definitions...</comment>
<typedef pos:line="159" pos:column="1">typedef <function_decl><type><name pos:line="159" pos:column="9">int</name></type> (<name pos:line="159" pos:column="14">EXT_LEXER_DECL</name> <type:modifier pos:line="159" pos:column="29">*</type:modifier><name pos:line="159" pos:column="30">GetLexerCountFn</name>)<parameter_list pos:line="159" pos:column="46">()</parameter_list>;</function_decl></typedef>
<typedef pos:line="160" pos:column="1">typedef <function_decl><type><name pos:line="160" pos:column="9">void</name></type> (<name pos:line="160" pos:column="15">EXT_LEXER_DECL</name> <type:modifier pos:line="160" pos:column="30">*</type:modifier><name pos:line="160" pos:column="31">GetLexerNameFn</name>)<parameter_list pos:line="160" pos:column="46">(<param><decl><type><name pos:line="160" pos:column="47">unsigned</name> <name pos:line="160" pos:column="56">int</name></type> <name pos:line="160" pos:column="60">Index</name></decl></param>, <param><decl><type><name pos:line="160" pos:column="67">char</name> <type:modifier pos:line="160" pos:column="72">*</type:modifier></type><name pos:line="160" pos:column="73">name</name></decl></param>, <param><decl><type><name pos:line="160" pos:column="79">int</name></type> <name pos:line="160" pos:column="83">buflength</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef pos:line="161" pos:column="1">typedef <function_decl><type><name pos:line="161" pos:column="9">void</name></type> (<name pos:line="161" pos:column="15">EXT_LEXER_DECL</name> <type:modifier pos:line="161" pos:column="30">*</type:modifier><name pos:line="161" pos:column="31">GetLexerStatusTextFn</name>)<parameter_list pos:line="161" pos:column="52">(<param><decl><type><name pos:line="161" pos:column="53">unsigned</name> <name pos:line="161" pos:column="62">int</name></type> <name pos:line="161" pos:column="66">Index</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="73">TCHAR</name> <type:modifier pos:line="161" pos:column="79">*</type:modifier></type><name pos:line="161" pos:column="80">desc</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="86">int</name></type> <name pos:line="161" pos:column="90">buflength</name></decl></param>)</parameter_list>;</function_decl></typedef>

<cpp:endif pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="163" pos:column="8">//PLUGINSMANAGER_H</comment>
</unit>
