<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\FunctionCallTip.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// this file is part of Notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2008 Harry Bruin &lt;harrybharry@users.sourceforge.net&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">// </comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">// </comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">// </comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<cpp:ifndef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifndef</cpp:directive> <name pos:line="28" pos:column="9">FUNCTIONCALLTIP_H</name></cpp:ifndef>
<cpp:define pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="29" pos:column="9">FUNCTIONCALLTIP_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifndef</cpp:directive> <name pos:line="31" pos:column="9">SCINTILLA_EDIT_VIEW_H</name></cpp:ifndef>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="33" pos:column="8">//SCINTILLA_EDIT_VIEW_H</comment>

<typedef pos:line="35" pos:column="1">typedef <type><name><name pos:line="35" pos:column="9">std</name><op:operator pos:line="35" pos:column="12">::</op:operator><name><name pos:line="35" pos:column="14">vector</name><argument_list pos:line="35" pos:column="20">&lt;<argument><expr><specifier pos:line="35" pos:column="21">const</specifier> <name pos:line="35" pos:column="27">TCHAR</name> <type:modifier pos:line="35" pos:column="33">*</type:modifier></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="35" pos:column="36">stringVec</name>;</typedef>

<class pos:line="37" pos:column="1">class <name pos:line="37" pos:column="7">FunctionCallTip</name> <block pos:line="37" pos:column="23">{<private type="default" pos:line="37" pos:column="24">
	 <class_decl><specifier pos:line="38" pos:column="10">friend</specifier> class <name pos:line="38" pos:column="23">AutoCompletion</name>;</class_decl>
</private><public pos:line="39" pos:column="1">public:
	<constructor><name pos:line="40" pos:column="9">FunctionCallTip</name><parameter_list pos:line="40" pos:column="24">(<param><decl><type><name pos:line="40" pos:column="25">ScintillaEditView</name> <type:modifier pos:line="40" pos:column="43">*</type:modifier></type> <name pos:line="40" pos:column="45">pEditView</name></decl></param>)</parameter_list> <member_list pos:line="40" pos:column="56">: <call><name pos:line="40" pos:column="58">_pEditView</name><argument_list pos:line="40" pos:column="68">(<argument><expr><name pos:line="40" pos:column="69">pEditView</name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="79">,</op:operator> <call><name pos:line="40" pos:column="81">_pXmlKeyword</name><argument_list pos:line="40" pos:column="93">(<argument><expr><name pos:line="40" pos:column="94">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="99">,</op:operator> <call><name pos:line="40" pos:column="101">_curPos</name><argument_list pos:line="40" pos:column="108">(<argument><expr><lit:literal type="number" pos:line="40" pos:column="109">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="111">,</op:operator> <call><name pos:line="40" pos:column="113">_startPos</name><argument_list pos:line="40" pos:column="122">(<argument><expr><lit:literal type="number" pos:line="40" pos:column="123">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="40" pos:column="125">,</op:operator>
													<call><name pos:line="41" pos:column="105">_curFunction</name><argument_list pos:line="41" pos:column="117">(<argument><expr><name pos:line="41" pos:column="118">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="123">,</op:operator> <call><name pos:line="41" pos:column="125">_currentNrOverloads</name><argument_list pos:line="41" pos:column="144">(<argument><expr><lit:literal type="number" pos:line="41" pos:column="145">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="147">,</op:operator> <call><name pos:line="41" pos:column="149">_currentOverload</name><argument_list pos:line="41" pos:column="165">(<argument><expr><lit:literal type="number" pos:line="41" pos:column="166">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="41" pos:column="168">,</op:operator>
													<call><name pos:line="42" pos:column="105">_currentParam</name><argument_list pos:line="42" pos:column="118">(<argument><expr><lit:literal type="number" pos:line="42" pos:column="119">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="121">,</op:operator> <call><name pos:line="42" pos:column="123">_funcName</name><argument_list pos:line="42" pos:column="132">(<argument><expr><name pos:line="42" pos:column="133">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="42" pos:column="138">,</op:operator>
													<call><name pos:line="43" pos:column="105">_start</name><argument_list pos:line="43" pos:column="111">(<argument><expr><lit:literal type="char" pos:line="43" pos:column="112">'('</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="116">,</op:operator> <call><name pos:line="43" pos:column="118">_stop</name><argument_list pos:line="43" pos:column="123">(<argument><expr><lit:literal type="char" pos:line="43" pos:column="124">')'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="128">,</op:operator> <call><name pos:line="43" pos:column="130">_param</name><argument_list pos:line="43" pos:column="136">(<argument><expr><lit:literal type="char" pos:line="43" pos:column="137">','</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="141">,</op:operator> <call><name pos:line="43" pos:column="143">_terminal</name><argument_list pos:line="43" pos:column="152">(<argument><expr><lit:literal type="char" pos:line="43" pos:column="153">';'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="157">,</op:operator> <call><name pos:line="43" pos:column="159">_ignoreCase</name><argument_list pos:line="43" pos:column="170">(<argument><expr><lit:literal type="boolean" pos:line="43" pos:column="171">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="43" pos:column="176">,</op:operator>
													<call><name pos:line="44" pos:column="105">_additionalWordChar</name><argument_list pos:line="44" pos:column="124">(<argument><expr><call><name pos:line="44" pos:column="125">TEXT</name><argument_list pos:line="44" pos:column="129">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="130">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="44" pos:column="134">,</op:operator> <call><name pos:line="44" pos:column="136">_selfActivated</name><argument_list pos:line="44" pos:column="150">(<argument><expr><lit:literal type="boolean" pos:line="44" pos:column="151">false</lit:literal></expr></argument>)</argument_list></call>
													</member_list><block pos:line="45" pos:column="105">{}</block></constructor><empty_stmt pos:line="45" pos:column="107">;</empty_stmt>
	<destructor><name pos:line="46" pos:column="9">~<name pos:line="46" pos:column="10">FunctionCallTip</name></name><parameter_list pos:line="46" pos:column="25">()</parameter_list> <block pos:line="46" pos:column="28">{<comment type="block" pos:line="46" pos:column="29">/* cleanup(); */</comment>}</block></destructor><empty_stmt pos:line="46" pos:column="46">;</empty_stmt>
	<function_decl><type><name pos:line="47" pos:column="9">void</name></type> <name pos:line="47" pos:column="14">setLanguageXML</name><parameter_list pos:line="47" pos:column="28">(<param><decl><type><name pos:line="47" pos:column="29">TiXmlElement</name> <type:modifier pos:line="47" pos:column="42">*</type:modifier></type> <name pos:line="47" pos:column="44">pXmlKeyword</name></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="47" pos:column="65">//set calltip keyword node</comment>
	<function_decl><type><name pos:line="48" pos:column="9">bool</name></type> <name pos:line="48" pos:column="14">updateCalltip</name><parameter_list pos:line="48" pos:column="27">(<param><decl><type><name pos:line="48" pos:column="28">int</name></type> <name pos:line="48" pos:column="32">ch</name></decl></param>, <param><decl><type><name pos:line="48" pos:column="36">bool</name></type> <name pos:line="48" pos:column="41">needShown</name> <init pos:line="48" pos:column="51">= <expr><lit:literal type="boolean" pos:line="48" pos:column="53">false</lit:literal></expr></init></decl></param>)</parameter_list>;</function_decl>	<comment type="line" pos:line="48" pos:column="65">//Ch is character typed, or 0 if another event occured. NeedShown is true if calltip should be attempted to displayed. Return true if calltip was made visible</comment>
	<function_decl><type><name pos:line="49" pos:column="9">void</name></type> <name pos:line="49" pos:column="14">showNextOverload</name><parameter_list pos:line="49" pos:column="30">()</parameter_list>;</function_decl>							<comment type="line" pos:line="49" pos:column="89">//show next overlaoded parameters</comment>
	<function_decl><type><name pos:line="50" pos:column="9">void</name></type> <name pos:line="50" pos:column="14">showPrevOverload</name><parameter_list pos:line="50" pos:column="30">()</parameter_list>;</function_decl>							<comment type="line" pos:line="50" pos:column="89">//show prev overlaoded parameters</comment>
	<function><type><name pos:line="51" pos:column="9">bool</name></type> <name pos:line="51" pos:column="14">isVisible</name><parameter_list pos:line="51" pos:column="23">()</parameter_list> <block pos:line="51" pos:column="26">{ <return pos:line="51" pos:column="28">return <expr><name pos:line="51" pos:column="35">_pEditView</name><op:operator pos:line="51" pos:column="45">?</op:operator><call><name><name pos:line="51" pos:column="46">_pEditView</name><op:operator pos:line="51" pos:column="56">-&gt;</op:operator><name pos:line="51" pos:column="58">execute</name></name><argument_list pos:line="51" pos:column="65">(<argument><expr><name pos:line="51" pos:column="66">SCI_CALLTIPACTIVE</name></expr></argument>)</argument_list></call> <op:operator pos:line="51" pos:column="85">==</op:operator> <name pos:line="51" pos:column="88">TRUE</name><op:operator pos:line="51" pos:column="92">:</op:operator><lit:literal type="boolean" pos:line="51" pos:column="93">false</lit:literal></expr>;</return> }</block></function><empty_stmt pos:line="51" pos:column="101">;</empty_stmt>	<comment type="line" pos:line="51" pos:column="105">//true if calltip visible</comment>
	<function_decl><type><name pos:line="52" pos:column="9">void</name></type> <name pos:line="52" pos:column="14">close</name><parameter_list pos:line="52" pos:column="19">()</parameter_list>;</function_decl>					<comment type="line" pos:line="52" pos:column="57">//Close calltip if visible</comment>

</public><private pos:line="54" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="55" pos:column="9">ScintillaEditView</name> <type:modifier pos:line="55" pos:column="27">*</type:modifier></type> <name pos:line="55" pos:column="29">_pEditView</name></decl>;</decl_stmt>	<comment type="line" pos:line="55" pos:column="41">//Scintilla to display calltip in</comment>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">TiXmlElement</name> <type:modifier pos:line="56" pos:column="22">*</type:modifier></type> <name pos:line="56" pos:column="24">_pXmlKeyword</name></decl>;</decl_stmt>	<comment type="line" pos:line="56" pos:column="41">//current keyword node (first one)</comment>

	<decl_stmt><decl><type><name pos:line="58" pos:column="9">int</name></type> <name pos:line="58" pos:column="13">_curPos</name></decl>;</decl_stmt>					<comment type="line" pos:line="58" pos:column="57">//cursor position</comment>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">int</name></type> <name pos:line="59" pos:column="13">_startPos</name></decl>;</decl_stmt>					<comment type="line" pos:line="59" pos:column="57">//display start position</comment>

	<decl_stmt><decl><type><name pos:line="61" pos:column="9">TiXmlElement</name> <type:modifier pos:line="61" pos:column="22">*</type:modifier></type> <name pos:line="61" pos:column="24">_curFunction</name></decl>;</decl_stmt>	<comment type="line" pos:line="61" pos:column="41">//current function element</comment>
	<comment type="line" pos:line="62" pos:column="9">//cache some XML values n stuff</comment>
	<decl_stmt><decl><type><name pos:line="63" pos:column="9">TCHAR</name> <type:modifier pos:line="63" pos:column="15">*</type:modifier></type> <name pos:line="63" pos:column="17">_funcName</name></decl>;</decl_stmt>				<comment type="line" pos:line="63" pos:column="57">//name of function</comment>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">stringVec</name></type> <name pos:line="64" pos:column="19">_retVals</name></decl>;</decl_stmt>				<comment type="line" pos:line="64" pos:column="57">//vector of overload return values/types</comment>
	<decl_stmt><decl><type><name><name pos:line="65" pos:column="9">vector</name><argument_list pos:line="65" pos:column="15">&lt;<argument><expr><name pos:line="65" pos:column="16">stringVec</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="65" pos:column="27">_overloads</name></decl>;</decl_stmt>	<comment type="line" pos:line="65" pos:column="41">//vector of overload params (=vector)</comment>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">stringVec</name></type> <name pos:line="66" pos:column="19">_descriptions</name></decl>;</decl_stmt>		<comment type="line" pos:line="66" pos:column="49">//vecotr of function descriptions</comment>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">int</name></type> <name pos:line="67" pos:column="13">_currentNrOverloads</name></decl>;</decl_stmt>		<comment type="line" pos:line="67" pos:column="49">//current amount of overloads</comment>
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">int</name></type> <name pos:line="68" pos:column="13">_currentOverload</name></decl>;</decl_stmt>			<comment type="line" pos:line="68" pos:column="49">//current chosen overload</comment>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">int</name></type> <name pos:line="69" pos:column="13">_currentParam</name></decl>;</decl_stmt>				<comment type="line" pos:line="69" pos:column="57">//current highlighted param</comment>

	<decl_stmt><decl><type><name pos:line="71" pos:column="9">TCHAR</name></type> <name pos:line="71" pos:column="15">_start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">TCHAR</name></type> <name pos:line="72" pos:column="15">_stop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">TCHAR</name></type> <name pos:line="73" pos:column="15">_param</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">TCHAR</name></type> <name pos:line="74" pos:column="15">_terminal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="75" pos:column="5">generic_string</name></type> <name pos:line="75" pos:column="20">_additionalWordChar</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">bool</name></type> <name pos:line="76" pos:column="14">_ignoreCase</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">bool</name></type> <name pos:line="77" pos:column="14">_selfActivated</name></decl>;</decl_stmt>

	<function_decl><type><name pos:line="79" pos:column="9">bool</name></type> <name pos:line="79" pos:column="14">getCursorFunction</name><parameter_list pos:line="79" pos:column="31">()</parameter_list>;</function_decl>		<comment type="line" pos:line="79" pos:column="49">//retrieve data about function at cursor. Returns true if a function was found. Calls loaddata if needed</comment>
	<function_decl><type><name pos:line="80" pos:column="9">bool</name></type> <name pos:line="80" pos:column="14">loadFunction</name><parameter_list pos:line="80" pos:column="26">()</parameter_list>;</function_decl>			<comment type="line" pos:line="80" pos:column="49">//returns true if the function can be found</comment>
	<function_decl><type><name pos:line="81" pos:column="9">void</name></type> <name pos:line="81" pos:column="14">showCalltip</name><parameter_list pos:line="81" pos:column="25">()</parameter_list>;</function_decl>				<comment type="line" pos:line="81" pos:column="57">//display calltip based on current variables</comment>
	<function_decl><type><name pos:line="82" pos:column="9">void</name></type> <name pos:line="82" pos:column="14">reset</name><parameter_list pos:line="82" pos:column="19">()</parameter_list>;</function_decl>					<comment type="line" pos:line="82" pos:column="57">//reset all vars in case function is invalidated</comment>
	<function_decl><type><name pos:line="83" pos:column="9">void</name></type> <name pos:line="83" pos:column="14">cleanup</name><parameter_list pos:line="83" pos:column="21">()</parameter_list>;</function_decl>					<comment type="line" pos:line="83" pos:column="57">//delete any leftovers</comment>
    <function><type><name pos:line="84" pos:column="5">bool</name></type> <name pos:line="84" pos:column="10">isBasicWordChar</name><parameter_list pos:line="84" pos:column="25">(<param><decl><type><name pos:line="84" pos:column="26">TCHAR</name></type> <name pos:line="84" pos:column="32">ch</name></decl></param>)</parameter_list> <specifier pos:line="84" pos:column="36">const</specifier> <block pos:line="84" pos:column="42">{
        <return pos:line="85" pos:column="9">return <expr><op:operator pos:line="85" pos:column="16">(</op:operator><name pos:line="85" pos:column="17">ch</name> <op:operator pos:line="85" pos:column="20">&gt;=</op:operator> <lit:literal type="char" pos:line="85" pos:column="23">'A'</lit:literal> <op:operator pos:line="85" pos:column="27">&amp;&amp;</op:operator> <name pos:line="85" pos:column="30">ch</name> <op:operator pos:line="85" pos:column="33">&lt;=</op:operator> <lit:literal type="char" pos:line="85" pos:column="36">'Z'</lit:literal> <op:operator pos:line="85" pos:column="40">||</op:operator> <name pos:line="85" pos:column="43">ch</name> <op:operator pos:line="85" pos:column="46">&gt;=</op:operator> <lit:literal type="char" pos:line="85" pos:column="49">'a'</lit:literal> <op:operator pos:line="85" pos:column="53">&amp;&amp;</op:operator> <name pos:line="85" pos:column="56">ch</name> <op:operator pos:line="85" pos:column="59">&lt;=</op:operator> <lit:literal type="char" pos:line="85" pos:column="62">'z'</lit:literal> <op:operator pos:line="85" pos:column="66">||</op:operator> <name pos:line="85" pos:column="69">ch</name> <op:operator pos:line="85" pos:column="72">&gt;=</op:operator> <lit:literal type="char" pos:line="85" pos:column="75">'0'</lit:literal> <op:operator pos:line="85" pos:column="79">&amp;&amp;</op:operator> <name pos:line="85" pos:column="82">ch</name> <op:operator pos:line="85" pos:column="85">&lt;=</op:operator> <lit:literal type="char" pos:line="85" pos:column="88">'9'</lit:literal> <op:operator pos:line="85" pos:column="92">||</op:operator> <name pos:line="85" pos:column="95">ch</name> <op:operator pos:line="85" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="85" pos:column="101">'_'</lit:literal><op:operator pos:line="85" pos:column="104">)</op:operator></expr>;</return>
    }</block></function><empty_stmt pos:line="86" pos:column="6">;</empty_stmt>
    <function><type><name pos:line="87" pos:column="5">bool</name></type> <name pos:line="87" pos:column="10">isAdditionalWordChar</name><parameter_list pos:line="87" pos:column="30">(<param><decl><type><name pos:line="87" pos:column="31">TCHAR</name></type> <name pos:line="87" pos:column="37">ch</name></decl></param>)</parameter_list> <specifier pos:line="87" pos:column="41">const</specifier> <block pos:line="87" pos:column="47">{
        <decl_stmt><decl><type><specifier pos:line="88" pos:column="9">const</specifier> <name pos:line="88" pos:column="15">TCHAR</name> <type:modifier pos:line="88" pos:column="21">*</type:modifier></type><name pos:line="88" pos:column="22">addChars</name> <init pos:line="88" pos:column="31">= <expr><call><name><name pos:line="88" pos:column="33">_additionalWordChar</name><op:operator pos:line="88" pos:column="52">.</op:operator><name pos:line="88" pos:column="53">c_str</name></name><argument_list pos:line="88" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="89" pos:column="9">size_t</name></type> <name pos:line="89" pos:column="16">len</name> <init pos:line="89" pos:column="20">= <expr><call><name><name pos:line="89" pos:column="22">_additionalWordChar</name><op:operator pos:line="89" pos:column="41">.</op:operator><name pos:line="89" pos:column="42">length</name></name><argument_list pos:line="89" pos:column="48">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for pos:line="90" pos:column="9">for (<init><decl><type><name pos:line="90" pos:column="14">size_t</name></type> <name pos:line="90" pos:column="21">i</name> <init pos:line="90" pos:column="23">= <expr><lit:literal type="number" pos:line="90" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="90" pos:column="29">i</name> <op:operator pos:line="90" pos:column="31">&lt;</op:operator> <name pos:line="90" pos:column="33">len</name></expr> ;</condition> <incr><expr><name pos:line="90" pos:column="39">i</name><op:operator pos:line="90" pos:column="40">++</op:operator></expr></incr>)
            <if pos:line="91" pos:column="13">if <condition pos:line="91" pos:column="16">(<expr><name pos:line="91" pos:column="17">ch</name> <op:operator pos:line="91" pos:column="20">==</op:operator> <name><name pos:line="91" pos:column="23">addChars</name><index pos:line="91" pos:column="31">[<expr><name pos:line="91" pos:column="32">i</name></expr>]</index></name></expr>)</condition><then pos:line="91" pos:column="35">
                <return pos:line="92" pos:column="17">return <expr><lit:literal type="boolean" pos:line="92" pos:column="24">true</lit:literal></expr>;</return></then></if></for>
        <return pos:line="93" pos:column="9">return <expr><lit:literal type="boolean" pos:line="93" pos:column="16">false</lit:literal></expr>;</return>
    }</block></function><empty_stmt pos:line="94" pos:column="6">;</empty_stmt>
</private>}</block>;</class>

<cpp:endif pos:line="97" pos:column="1">#<cpp:directive pos:line="97" pos:column="2">endif</cpp:directive></cpp:endif><comment type="line" pos:line="97" pos:column="7">// FUNCTIONCALLTIP_H</comment>
</unit>
