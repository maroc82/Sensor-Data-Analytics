<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\AnsiCharPanel\ansiCharPanel.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"ansiCharPanel.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>

<function><type><name pos:line="33" pos:column="1">void</name></type> <name><name pos:line="33" pos:column="6">AnsiCharPanel</name><op:operator pos:line="33" pos:column="19">::</op:operator><name pos:line="33" pos:column="21">switchEncoding</name></name><parameter_list pos:line="33" pos:column="35">()</parameter_list>
<block pos:line="34" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">int</name></type> <name pos:line="35" pos:column="13">codepage</name> <init pos:line="35" pos:column="22">= <expr><call><name pos:line="35" pos:column="24">(<type:modifier pos:line="35" pos:column="25">*</type:modifier><name pos:line="35" pos:column="26">_ppEditView</name>)<op:operator pos:line="35" pos:column="38">-&gt;</op:operator><name pos:line="35" pos:column="40">getCurrentBuffer</name></name><argument_list pos:line="35" pos:column="56">()</argument_list></call><op:operator pos:line="35" pos:column="58">-&gt;</op:operator><call><name pos:line="35" pos:column="60">getEncoding</name><argument_list pos:line="35" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="36" pos:column="9">_listView</name><op:operator pos:line="36" pos:column="18">.</op:operator><name pos:line="36" pos:column="19">resetValues</name></name><argument_list pos:line="36" pos:column="30">(<argument><expr><name pos:line="36" pos:column="31">codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="39" pos:column="1">BOOL</name> <name pos:line="39" pos:column="6">CALLBACK</name></type> <name><name pos:line="39" pos:column="15">AnsiCharPanel</name><op:operator pos:line="39" pos:column="28">::</op:operator><name pos:line="39" pos:column="30">run_dlgProc</name></name><parameter_list pos:line="39" pos:column="41">(<param><decl><type><name pos:line="39" pos:column="42">UINT</name></type> <name pos:line="39" pos:column="47">message</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="56">WPARAM</name></type> <name pos:line="39" pos:column="63">wParam</name></decl></param>, <param><decl><type><name pos:line="39" pos:column="71">LPARAM</name></type> <name pos:line="39" pos:column="78">lParam</name></decl></param>)</parameter_list>
<block pos:line="40" pos:column="1">{
    <switch pos:line="41" pos:column="5">switch <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">message</name></expr>)</condition>
    <block pos:line="42" pos:column="5">{
        <case pos:line="43" pos:column="9">case <expr><name pos:line="43" pos:column="14">WM_INITDIALOG</name></expr> :
        <block pos:line="44" pos:column="9">{
			<expr_stmt><expr><call><name><name pos:line="45" pos:column="25">_listView</name><op:operator pos:line="45" pos:column="34">.</op:operator><name pos:line="45" pos:column="35">init</name></name><argument_list pos:line="45" pos:column="39">(<argument><expr><name pos:line="45" pos:column="40">_hInst</name></expr></argument>, <argument><expr><name pos:line="45" pos:column="48">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="46" pos:column="25">int</name></type> <name pos:line="46" pos:column="29">codepage</name> <init pos:line="46" pos:column="38">= <expr><call><name pos:line="46" pos:column="40">(<type:modifier pos:line="46" pos:column="41">*</type:modifier><name pos:line="46" pos:column="42">_ppEditView</name>)<op:operator pos:line="46" pos:column="54">-&gt;</op:operator><name pos:line="46" pos:column="56">getCurrentBuffer</name></name><argument_list pos:line="46" pos:column="72">()</argument_list></call><op:operator pos:line="46" pos:column="74">-&gt;</op:operator><call><name pos:line="46" pos:column="76">getEncoding</name><argument_list pos:line="46" pos:column="87">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="47" pos:column="25">_listView</name><op:operator pos:line="47" pos:column="34">.</op:operator><name pos:line="47" pos:column="35">setValues</name></name><argument_list pos:line="47" pos:column="44">(<argument><expr><name pos:line="47" pos:column="45">codepage</name><op:operator pos:line="47" pos:column="53">==</op:operator><op:operator pos:line="47" pos:column="55">-</op:operator><lit:literal type="number" pos:line="47" pos:column="56">1</lit:literal><op:operator pos:line="47" pos:column="57">?</op:operator><lit:literal type="number" pos:line="47" pos:column="58">0</lit:literal><op:operator pos:line="47" pos:column="59">:</op:operator><name pos:line="47" pos:column="60">codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="48" pos:column="25">_listView</name><op:operator pos:line="48" pos:column="34">.</op:operator><name pos:line="48" pos:column="35">display</name></name><argument_list pos:line="48" pos:column="42">()</argument_list></call></expr>;</expr_stmt>

            <return pos:line="50" pos:column="13">return <expr><name pos:line="50" pos:column="20">TRUE</name></expr>;</return>
        }</block>

		</case><case pos:line="53" pos:column="17">case <expr><name pos:line="53" pos:column="22">WM_NOTIFY</name></expr>:
		<block pos:line="54" pos:column="17">{
			<switch pos:line="55" pos:column="25">switch <condition pos:line="55" pos:column="32">(<expr><op:operator pos:line="55" pos:column="33">(</op:operator><op:operator pos:line="55" pos:column="34">(</op:operator><name pos:line="55" pos:column="35">LPNMHDR</name><op:operator pos:line="55" pos:column="42">)</op:operator><name pos:line="55" pos:column="43">lParam</name><op:operator pos:line="55" pos:column="49">)</op:operator><op:operator pos:line="55" pos:column="50">-&gt;</op:operator><name pos:line="55" pos:column="52">code</name></expr>)</condition>
			<block pos:line="56" pos:column="25">{
				<case pos:line="57" pos:column="33">case <expr><name pos:line="57" pos:column="38">NM_DBLCLK</name></expr>:
				<block pos:line="58" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="59" pos:column="41">LPNMITEMACTIVATE</name></type> <name pos:line="59" pos:column="58">lpnmitem</name> <init pos:line="59" pos:column="67">= <expr><op:operator pos:line="59" pos:column="69">(</op:operator><name pos:line="59" pos:column="70">LPNMITEMACTIVATE</name><op:operator pos:line="59" pos:column="86">)</op:operator> <name pos:line="59" pos:column="88">lParam</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="60" pos:column="41">int</name></type> <name pos:line="60" pos:column="45">i</name> <init pos:line="60" pos:column="47">= <expr><name><name pos:line="60" pos:column="49">lpnmitem</name><op:operator pos:line="60" pos:column="57">-&gt;</op:operator><name pos:line="60" pos:column="59">iItem</name></name></expr></init></decl>;</decl_stmt>

					<if pos:line="62" pos:column="41">if <condition pos:line="62" pos:column="44">(<expr><name pos:line="62" pos:column="45">i</name> <op:operator pos:line="62" pos:column="47">==</op:operator> <op:operator pos:line="62" pos:column="50">-</op:operator><lit:literal type="number" pos:line="62" pos:column="51">1</lit:literal></expr>)</condition><then pos:line="62" pos:column="53">
						<return pos:line="63" pos:column="49">return <expr><name pos:line="63" pos:column="56">TRUE</name></expr>;</return></then></if>

					<expr_stmt><expr><call><name pos:line="65" pos:column="41">insertChar</name><argument_list pos:line="65" pos:column="51">(<argument><expr><op:operator pos:line="65" pos:column="52">(</op:operator><name pos:line="65" pos:column="53">unsigned</name> <name pos:line="65" pos:column="62">char</name><op:operator pos:line="65" pos:column="66">)</op:operator><name pos:line="65" pos:column="67">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="66" pos:column="41">return <expr><name pos:line="66" pos:column="48">TRUE</name></expr>;</return>
				}</block>

				</case><case pos:line="69" pos:column="33">case <expr><name pos:line="69" pos:column="38">LVN_KEYDOWN</name></expr>:
				<block pos:line="70" pos:column="33">{
					<switch pos:line="71" pos:column="41">switch <condition pos:line="71" pos:column="48">(<expr><op:operator pos:line="71" pos:column="49">(</op:operator><op:operator pos:line="71" pos:column="50">(</op:operator><name pos:line="71" pos:column="51">LPNMLVKEYDOWN</name><op:operator pos:line="71" pos:column="64">)</op:operator><name pos:line="71" pos:column="65">lParam</name><op:operator pos:line="71" pos:column="71">)</op:operator><op:operator pos:line="71" pos:column="72">-&gt;</op:operator><name pos:line="71" pos:column="74">wVKey</name></expr>)</condition>
					<block pos:line="72" pos:column="41">{
						<case pos:line="73" pos:column="49">case <expr><name pos:line="73" pos:column="54">VK_RETURN</name></expr>:
						<block pos:line="74" pos:column="49">{
							<decl_stmt><decl><type><name pos:line="75" pos:column="57">int</name></type> <name pos:line="75" pos:column="61">i</name> <init pos:line="75" pos:column="63">= <expr><call><name pos:line="75" pos:column="65">ListView_GetSelectionMark</name><argument_list pos:line="75" pos:column="90">(<argument><expr><call><name><name pos:line="75" pos:column="91">_listView</name><op:operator pos:line="75" pos:column="100">.</op:operator><name pos:line="75" pos:column="101">getHSelf</name></name><argument_list pos:line="75" pos:column="109">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

							<if pos:line="77" pos:column="57">if <condition pos:line="77" pos:column="60">(<expr><name pos:line="77" pos:column="61">i</name> <op:operator pos:line="77" pos:column="63">==</op:operator> <op:operator pos:line="77" pos:column="66">-</op:operator><lit:literal type="number" pos:line="77" pos:column="67">1</lit:literal></expr>)</condition><then pos:line="77" pos:column="69">
								<return pos:line="78" pos:column="65">return <expr><name pos:line="78" pos:column="72">TRUE</name></expr>;</return></then></if>

							<expr_stmt><expr><call><name pos:line="80" pos:column="57">insertChar</name><argument_list pos:line="80" pos:column="67">(<argument><expr><op:operator pos:line="80" pos:column="68">(</op:operator><name pos:line="80" pos:column="69">unsigned</name> <name pos:line="80" pos:column="78">char</name><op:operator pos:line="80" pos:column="82">)</op:operator><name pos:line="80" pos:column="83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<return pos:line="81" pos:column="57">return <expr><name pos:line="81" pos:column="64">TRUE</name></expr>;</return>
						}</block>
						</case><default pos:line="83" pos:column="49">default:
							<break pos:line="84" pos:column="57">break;</break>
					</default>}</block></switch>
				}</block>
				<break pos:line="87" pos:column="33">break;</break>

				</case><default pos:line="89" pos:column="33">default:
					<break pos:line="90" pos:column="41">break;</break>
			</default>}</block></switch>
		}</block>
		<return pos:line="93" pos:column="17">return <expr><name pos:line="93" pos:column="24">TRUE</name></expr>;</return>

        </case><case pos:line="95" pos:column="9">case <expr><name pos:line="95" pos:column="14">WM_SIZE</name></expr>:
        <block pos:line="96" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="97" pos:column="13">int</name></type> <name pos:line="97" pos:column="17">width</name> <init pos:line="97" pos:column="23">= <expr><call><name pos:line="97" pos:column="25">LOWORD</name><argument_list pos:line="97" pos:column="31">(<argument><expr><name pos:line="97" pos:column="32">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="98" pos:column="13">int</name></type> <name pos:line="98" pos:column="17">height</name> <init pos:line="98" pos:column="24">= <expr><call><name pos:line="98" pos:column="26">HIWORD</name><argument_list pos:line="98" pos:column="32">(<argument><expr><name pos:line="98" pos:column="33">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="99" pos:column="25">::</op:operator><name pos:line="99" pos:column="27">MoveWindow</name></name><argument_list pos:line="99" pos:column="37">(<argument><expr><call><name><name pos:line="99" pos:column="38">_listView</name><op:operator pos:line="99" pos:column="47">.</op:operator><name pos:line="99" pos:column="48">getHSelf</name></name><argument_list pos:line="99" pos:column="56">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="99" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="99" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="66">width</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="73">height</name></expr></argument>, <argument><expr><name pos:line="99" pos:column="81">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:line="100" pos:column="13">break;</break>
        }</block>

        </case><default pos:line="103" pos:column="9">default :
            <return pos:line="104" pos:column="13">return <expr><call><name><name pos:line="104" pos:column="20">DockingDlgInterface</name><op:operator pos:line="104" pos:column="39">::</op:operator><name pos:line="104" pos:column="41">run_dlgProc</name></name><argument_list pos:line="104" pos:column="52">(<argument><expr><name pos:line="104" pos:column="53">message</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="62">wParam</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="70">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
    </default>}</block></switch>
	<return pos:line="106" pos:column="9">return <expr><call><name><name pos:line="106" pos:column="16">DockingDlgInterface</name><op:operator pos:line="106" pos:column="35">::</op:operator><name pos:line="106" pos:column="37">run_dlgProc</name></name><argument_list pos:line="106" pos:column="48">(<argument><expr><name pos:line="106" pos:column="49">message</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="58">wParam</name></expr></argument>, <argument><expr><name pos:line="106" pos:column="66">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="109" pos:column="1">void</name></type> <name><name pos:line="109" pos:column="6">AnsiCharPanel</name><op:operator pos:line="109" pos:column="19">::</op:operator><name pos:line="109" pos:column="21">insertChar</name></name><parameter_list pos:line="109" pos:column="31">(<param><decl><type><name pos:line="109" pos:column="32">unsigned</name> <name pos:line="109" pos:column="41">char</name></type> <name pos:line="109" pos:column="46">char2insert</name></decl></param>)</parameter_list> <specifier pos:line="109" pos:column="59">const</specifier>
<block pos:line="110" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="111" pos:column="5">char</name></type> <name><name pos:line="111" pos:column="10">charStr</name><index pos:line="111" pos:column="17">[<expr><lit:literal type="number" pos:line="111" pos:column="18">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name pos:line="112" pos:column="5">charStr</name><index pos:line="112" pos:column="12">[<expr><lit:literal type="number" pos:line="112" pos:column="13">0</lit:literal></expr>]</index></name> <op:operator pos:line="112" pos:column="16">=</op:operator> <name pos:line="112" pos:column="18">char2insert</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="113" pos:column="5">charStr</name><index pos:line="113" pos:column="12">[<expr><lit:literal type="number" pos:line="113" pos:column="13">1</lit:literal></expr>]</index></name> <op:operator pos:line="113" pos:column="16">=</op:operator> <lit:literal type="char" pos:line="113" pos:column="18">'\0'</lit:literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="114" pos:column="5">wchar_t</name></type> <name><name pos:line="114" pos:column="13">wCharStr</name><index pos:line="114" pos:column="21">[<expr><lit:literal type="number" pos:line="114" pos:column="22">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="115" pos:column="5">char</name></type> <name><name pos:line="115" pos:column="10">multiByteStr</name><index pos:line="115" pos:column="22">[<expr><lit:literal type="number" pos:line="115" pos:column="23">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="116" pos:column="9">int</name></type> <name pos:line="116" pos:column="13">codepage</name> <init pos:line="116" pos:column="22">= <expr><call><name pos:line="116" pos:column="24">(<type:modifier pos:line="116" pos:column="25">*</type:modifier><name pos:line="116" pos:column="26">_ppEditView</name>)<op:operator pos:line="116" pos:column="38">-&gt;</op:operator><name pos:line="116" pos:column="40">getCurrentBuffer</name></name><argument_list pos:line="116" pos:column="56">()</argument_list></call><op:operator pos:line="116" pos:column="58">-&gt;</op:operator><call><name pos:line="116" pos:column="60">getEncoding</name><argument_list pos:line="116" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><name pos:line="117" pos:column="13">codepage</name> <op:operator pos:line="117" pos:column="22">==</op:operator> <op:operator pos:line="117" pos:column="25">-</op:operator><lit:literal type="number" pos:line="117" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="117" pos:column="28">
	<block pos:line="118" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="119" pos:column="17">bool</name></type> <name pos:line="119" pos:column="22">isUnicode</name> <init pos:line="119" pos:column="32">= <expr><op:operator pos:line="119" pos:column="34">(</op:operator><call><name pos:line="119" pos:column="35">(<type:modifier pos:line="119" pos:column="36">*</type:modifier><name pos:line="119" pos:column="37">_ppEditView</name>)<op:operator pos:line="119" pos:column="49">-&gt;</op:operator><name pos:line="119" pos:column="51">execute</name></name><argument_list pos:line="119" pos:column="58">(<argument><expr><name pos:line="119" pos:column="59">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call> <op:operator pos:line="119" pos:column="76">==</op:operator> <name pos:line="119" pos:column="79">SC_CP_UTF8</name><op:operator pos:line="119" pos:column="89">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><name pos:line="120" pos:column="21">isUnicode</name></expr>)</condition><then pos:line="120" pos:column="31">
		<block pos:line="121" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="122" pos:column="25">MultiByteToWideChar</name><argument_list pos:line="122" pos:column="44">(<argument><expr><lit:literal type="number" pos:line="122" pos:column="45">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="122" pos:column="48">0</lit:literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="51">charStr</name></expr></argument>, <argument><expr><op:operator pos:line="122" pos:column="60">-</op:operator><lit:literal type="number" pos:line="122" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><name pos:line="122" pos:column="64">wCharStr</name></expr></argument>, <argument><expr><sizeof pos:line="122" pos:column="74">sizeof<argument_list pos:line="122" pos:column="80">(<argument><expr><name pos:line="122" pos:column="81">wCharStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="123" pos:column="25">WideCharToMultiByte</name><argument_list pos:line="123" pos:column="44">(<argument><expr><name pos:line="123" pos:column="45">CP_UTF8</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="123" pos:column="54">0</lit:literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="57">wCharStr</name></expr></argument>, <argument><expr><op:operator pos:line="123" pos:column="67">-</op:operator><lit:literal type="number" pos:line="123" pos:column="68">1</lit:literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="71">multiByteStr</name></expr></argument>, <argument><expr><sizeof pos:line="123" pos:column="85">sizeof<argument_list pos:line="123" pos:column="91">(<argument><expr><name pos:line="123" pos:column="92">multiByteStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="123" pos:column="107">NULL</name></expr></argument>, <argument><expr><name pos:line="123" pos:column="113">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="125" pos:column="17">else <comment type="line" pos:line="125" pos:column="22">// ANSI</comment>
		<block pos:line="126" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="127" pos:column="25">multiByteStr</name><index pos:line="127" pos:column="37">[<expr><lit:literal type="number" pos:line="127" pos:column="38">0</lit:literal></expr>]</index></name> <op:operator pos:line="127" pos:column="41">=</op:operator> <name><name pos:line="127" pos:column="43">charStr</name><index pos:line="127" pos:column="50">[<expr><lit:literal type="number" pos:line="127" pos:column="51">0</lit:literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="128" pos:column="25">multiByteStr</name><index pos:line="128" pos:column="37">[<expr><lit:literal type="number" pos:line="128" pos:column="38">1</lit:literal></expr>]</index></name> <op:operator pos:line="128" pos:column="41">=</op:operator> <name><name pos:line="128" pos:column="43">charStr</name><index pos:line="128" pos:column="50">[<expr><lit:literal type="number" pos:line="128" pos:column="51">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then>
	<else pos:line="131" pos:column="9">else
	<block pos:line="132" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="133" pos:column="17">MultiByteToWideChar</name><argument_list pos:line="133" pos:column="36">(<argument><expr><name pos:line="133" pos:column="37">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="133" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="50">charStr</name></expr></argument>, <argument><expr><op:operator pos:line="133" pos:column="59">-</op:operator><lit:literal type="number" pos:line="133" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="63">wCharStr</name></expr></argument>, <argument><expr><sizeof pos:line="133" pos:column="73">sizeof<argument_list pos:line="133" pos:column="79">(<argument><expr><name pos:line="133" pos:column="80">wCharStr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="134" pos:column="17">WideCharToMultiByte</name><argument_list pos:line="134" pos:column="36">(<argument><expr><name pos:line="134" pos:column="37">CP_UTF8</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="134" pos:column="46">0</lit:literal></expr></argument>, <argument><expr><name pos:line="134" pos:column="49">wCharStr</name></expr></argument>, <argument><expr><op:operator pos:line="134" pos:column="59">-</op:operator><lit:literal type="number" pos:line="134" pos:column="60">1</lit:literal></expr></argument>, <argument><expr><name pos:line="134" pos:column="63">multiByteStr</name></expr></argument>, <argument><expr><sizeof pos:line="134" pos:column="77">sizeof<argument_list pos:line="134" pos:column="83">(<argument><expr><name pos:line="134" pos:column="84">multiByteStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="134" pos:column="99">NULL</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="105">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name pos:line="136" pos:column="9">(<type:modifier pos:line="136" pos:column="10">*</type:modifier><name pos:line="136" pos:column="11">_ppEditView</name>)<op:operator pos:line="136" pos:column="23">-&gt;</op:operator><name pos:line="136" pos:column="25">execute</name></name><argument_list pos:line="136" pos:column="32">(<argument><expr><name pos:line="136" pos:column="33">SCI_REPLACESEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="136" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="136" pos:column="52">(</op:operator><name pos:line="136" pos:column="53">LPARAM</name><op:operator pos:line="136" pos:column="59">)</op:operator><lit:literal type="string" pos:line="136" pos:column="60">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="137" pos:column="9">int</name></type> <name pos:line="137" pos:column="13">len</name> <init pos:line="137" pos:column="17">= <expr><op:operator pos:line="137" pos:column="19">(</op:operator><name pos:line="137" pos:column="20">char2insert</name> <op:operator pos:line="137" pos:column="32">&lt;</op:operator> <lit:literal type="number" pos:line="137" pos:column="34">128</lit:literal><op:operator pos:line="137" pos:column="37">)</op:operator><op:operator pos:line="137" pos:column="38">?</op:operator><lit:literal type="number" pos:line="137" pos:column="39">1</lit:literal><op:operator pos:line="137" pos:column="40">:</op:operator><call><name pos:line="137" pos:column="41">strlen</name><argument_list pos:line="137" pos:column="47">(<argument><expr><name pos:line="137" pos:column="48">multiByteStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="138" pos:column="5">(<type:modifier pos:line="138" pos:column="6">*</type:modifier><name pos:line="138" pos:column="7">_ppEditView</name>)<op:operator pos:line="138" pos:column="19">-&gt;</op:operator><name pos:line="138" pos:column="21">execute</name></name><argument_list pos:line="138" pos:column="28">(<argument><expr><name pos:line="138" pos:column="29">SCI_ADDTEXT</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="42">len</name></expr></argument>, <argument><expr><op:operator pos:line="138" pos:column="47">(</op:operator><name pos:line="138" pos:column="48">LPARAM</name><op:operator pos:line="138" pos:column="54">)</op:operator><name pos:line="138" pos:column="55">multiByteStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="139" pos:column="9">(<type:modifier pos:line="139" pos:column="10">*</type:modifier><name pos:line="139" pos:column="11">_ppEditView</name>)<op:operator pos:line="139" pos:column="23">-&gt;</op:operator><name pos:line="139" pos:column="25">getFocus</name></name><argument_list pos:line="139" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
