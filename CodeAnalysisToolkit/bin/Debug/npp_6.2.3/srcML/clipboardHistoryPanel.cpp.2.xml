<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\ClipboardHistory\clipboardHistoryPanel.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"clipboardHistoryPanel.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"clipboardFormats.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef</cpp:directive> <name pos:line="34" pos:column="8">UNICODE</name></cpp:ifdef>
<cpp:define pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="35" pos:column="9">CLIPBOARD_TEXTFORMAT</name></cpp:macro> <cpp:value pos:line="35" pos:column="30">CF_UNICODETEXT</cpp:value></cpp:define>
<cpp:else pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="37" pos:column="9">CLIPBOARD_TEXTFORMAT</name></cpp:macro> <cpp:value pos:line="37" pos:column="30">CF_TEXT</cpp:value></cpp:define>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="40" pos:column="1">ClipboardData</name></type> <name><name pos:line="40" pos:column="15">ClipboardHistoryPanel</name><op:operator pos:line="40" pos:column="36">::</op:operator><name pos:line="40" pos:column="38">getClipboadData</name></name><parameter_list pos:line="40" pos:column="53">()</parameter_list>
<block pos:line="41" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">ClipboardData</name></type> <name pos:line="42" pos:column="23">clipboardData</name></decl>;</decl_stmt>
	<if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><op:operator pos:line="43" pos:column="13">!</op:operator><call><name pos:line="43" pos:column="14">IsClipboardFormatAvailable</name><argument_list pos:line="43" pos:column="40">(<argument><expr><name pos:line="43" pos:column="41">CLIPBOARD_TEXTFORMAT</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="43" pos:column="63">
		<return pos:line="44" pos:column="17">return <expr><name pos:line="44" pos:column="24">clipboardData</name></expr>;</return></then></if>

	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><op:operator pos:line="46" pos:column="13">!</op:operator><call><name pos:line="46" pos:column="14">OpenClipboard</name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="46" pos:column="34">
		<return pos:line="47" pos:column="17">return <expr><name pos:line="47" pos:column="24">clipboardData</name></expr>;</return></then></if>
	 
	<decl_stmt><decl><type><name pos:line="49" pos:column="9">HGLOBAL</name></type> <name pos:line="49" pos:column="17">hglb</name> <init pos:line="49" pos:column="22">= <expr><call><name pos:line="49" pos:column="24">GetClipboardData</name><argument_list pos:line="49" pos:column="40">(<argument><expr><name pos:line="49" pos:column="41">CLIPBOARD_TEXTFORMAT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">hglb</name> <op:operator pos:line="50" pos:column="18">!=</op:operator> <name pos:line="50" pos:column="21">NULL</name></expr>)</condition><then pos:line="50" pos:column="26"> 
	<block pos:line="51" pos:column="9">{ 
		<decl_stmt><decl><type><name pos:line="52" pos:column="17">char</name> <type:modifier pos:line="52" pos:column="22">*</type:modifier></type><name pos:line="52" pos:column="23">lpchar</name> <init pos:line="52" pos:column="30">= <expr><op:operator pos:line="52" pos:column="32">(</op:operator><name pos:line="52" pos:column="33">char</name> <op:operator pos:line="52" pos:column="38">*</op:operator><op:operator pos:line="52" pos:column="39">)</op:operator><call><name pos:line="52" pos:column="40">GlobalLock</name><argument_list pos:line="52" pos:column="50">(<argument><expr><name pos:line="52" pos:column="51">hglb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="53" pos:column="17">wchar_t</name> <type:modifier pos:line="53" pos:column="25">*</type:modifier></type><name pos:line="53" pos:column="26">lpWchar</name> <init pos:line="53" pos:column="34">= <expr><op:operator pos:line="53" pos:column="36">(</op:operator><name pos:line="53" pos:column="37">wchar_t</name> <op:operator pos:line="53" pos:column="45">*</op:operator><op:operator pos:line="53" pos:column="46">)</op:operator><call><name pos:line="53" pos:column="47">GlobalLock</name><argument_list pos:line="53" pos:column="57">(<argument><expr><name pos:line="53" pos:column="58">hglb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><name pos:line="55" pos:column="21">lpchar</name> <op:operator pos:line="55" pos:column="28">!=</op:operator> <name pos:line="55" pos:column="31">NULL</name></expr>)</condition><then pos:line="55" pos:column="36"> 
		<block pos:line="56" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="57" pos:column="25">UINT</name></type> <name pos:line="57" pos:column="30">cf_nppTextLen</name> <init pos:line="57" pos:column="44">= <expr><call><name pos:line="57" pos:column="46">RegisterClipboardFormat</name><argument_list pos:line="57" pos:column="69">(<argument><expr><name pos:line="57" pos:column="70">CF_NPPTEXTLEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="58" pos:column="25">if <condition pos:line="58" pos:column="28">(<expr><call><name pos:line="58" pos:column="29">IsClipboardFormatAvailable</name><argument_list pos:line="58" pos:column="55">(<argument><expr><name pos:line="58" pos:column="56">cf_nppTextLen</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="58" pos:column="71">
			<block pos:line="59" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="60" pos:column="33">HGLOBAL</name></type> <name pos:line="60" pos:column="41">hglbLen</name> <init pos:line="60" pos:column="49">= <expr><call><name pos:line="60" pos:column="51">GetClipboardData</name><argument_list pos:line="60" pos:column="67">(<argument><expr><name pos:line="60" pos:column="68">cf_nppTextLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
				<if pos:line="61" pos:column="33">if <condition pos:line="61" pos:column="36">(<expr><name pos:line="61" pos:column="37">hglbLen</name> <op:operator pos:line="61" pos:column="45">!=</op:operator> <name pos:line="61" pos:column="48">NULL</name></expr>)</condition><then pos:line="61" pos:column="53"> 
				<block pos:line="62" pos:column="33">{ 
					<decl_stmt><decl><type><name pos:line="63" pos:column="41">unsigned</name> <name pos:line="63" pos:column="50">long</name> <type:modifier pos:line="63" pos:column="55">*</type:modifier></type><name pos:line="63" pos:column="56">lpLen</name> <init pos:line="63" pos:column="62">= <expr><op:operator pos:line="63" pos:column="64">(</op:operator><name pos:line="63" pos:column="65">unsigned</name> <name pos:line="63" pos:column="74">long</name> <op:operator pos:line="63" pos:column="79">*</op:operator><op:operator pos:line="63" pos:column="80">)</op:operator><call><name pos:line="63" pos:column="81">GlobalLock</name><argument_list pos:line="63" pos:column="91">(<argument><expr><name pos:line="63" pos:column="92">hglbLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
					<if pos:line="64" pos:column="41">if <condition pos:line="64" pos:column="44">(<expr><name pos:line="64" pos:column="45">lpLen</name> <op:operator pos:line="64" pos:column="51">!=</op:operator> <name pos:line="64" pos:column="54">NULL</name></expr>)</condition><then pos:line="64" pos:column="59"> 
					<block pos:line="65" pos:column="41">{
						<for pos:line="66" pos:column="49">for (<init><decl><type><name pos:line="66" pos:column="54">size_t</name></type> <name pos:line="66" pos:column="61">i</name> <init pos:line="66" pos:column="63">= <expr><lit:literal type="number" pos:line="66" pos:column="65">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="66" pos:column="69">i</name> <op:operator pos:line="66" pos:column="71">&lt;</op:operator> <op:operator pos:line="66" pos:column="73">(</op:operator><op:operator pos:line="66" pos:column="74">*</op:operator><name pos:line="66" pos:column="75">lpLen</name><op:operator pos:line="66" pos:column="80">)</op:operator></expr> ;</condition> <incr><expr><name pos:line="66" pos:column="84">i</name><op:operator pos:line="66" pos:column="85">++</op:operator></expr></incr>)
						<block pos:line="67" pos:column="49">{
							<expr_stmt><expr><call><name><name pos:line="68" pos:column="57">clipboardData</name><op:operator pos:line="68" pos:column="70">.</op:operator><name pos:line="68" pos:column="71">push_back</name></name><argument_list pos:line="68" pos:column="80">(<argument><expr><op:operator pos:line="68" pos:column="81">(</op:operator><name pos:line="68" pos:column="82">unsigned</name> <name pos:line="68" pos:column="91">char</name><op:operator pos:line="68" pos:column="95">)</op:operator><name><name pos:line="68" pos:column="96">lpchar</name><index pos:line="68" pos:column="102">[<expr><name pos:line="68" pos:column="103">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></for>
						<expr_stmt><expr><call><name pos:line="70" pos:column="49">GlobalUnlock</name><argument_list pos:line="70" pos:column="61">(<argument><expr><name pos:line="70" pos:column="62">hglb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
					}</block></then></if>
				}</block></then></if>
			}</block></then>
			<else pos:line="74" pos:column="25">else
			<block pos:line="75" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="76" pos:column="33">int</name></type> <name pos:line="76" pos:column="37">nbBytes</name> <init pos:line="76" pos:column="45">= <expr><op:operator pos:line="76" pos:column="47">(</op:operator><call><name pos:line="76" pos:column="48">lstrlenW</name><argument_list pos:line="76" pos:column="56">(<argument><expr><name pos:line="76" pos:column="57">lpWchar</name></expr></argument>)</argument_list></call> <op:operator pos:line="76" pos:column="66">+</op:operator> <lit:literal type="number" pos:line="76" pos:column="68">1</lit:literal><op:operator pos:line="76" pos:column="69">)</op:operator> <op:operator pos:line="76" pos:column="71">*</op:operator> <sizeof pos:line="76" pos:column="73">sizeof<argument_list pos:line="76" pos:column="79">(<argument><expr><name pos:line="76" pos:column="80">wchar_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
				<for pos:line="77" pos:column="33">for (<init><decl><type><name pos:line="77" pos:column="38">int</name></type> <name pos:line="77" pos:column="42">i</name> <init pos:line="77" pos:column="44">= <expr><lit:literal type="number" pos:line="77" pos:column="46">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="77" pos:column="50">i</name> <op:operator pos:line="77" pos:column="52">&lt;</op:operator> <name pos:line="77" pos:column="54">nbBytes</name></expr> ;</condition> <incr><expr><name pos:line="77" pos:column="64">i</name><op:operator pos:line="77" pos:column="65">++</op:operator></expr></incr>)
				<block pos:line="78" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="79" pos:column="41">clipboardData</name><op:operator pos:line="79" pos:column="54">.</op:operator><name pos:line="79" pos:column="55">push_back</name></name><argument_list pos:line="79" pos:column="64">(<argument><expr><op:operator pos:line="79" pos:column="65">(</op:operator><name pos:line="79" pos:column="66">unsigned</name> <name pos:line="79" pos:column="75">char</name><op:operator pos:line="79" pos:column="79">)</op:operator><name><name pos:line="79" pos:column="80">lpchar</name><index pos:line="79" pos:column="86">[<expr><name pos:line="79" pos:column="87">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></else></if>
			<expr_stmt><expr><call><name pos:line="82" pos:column="25">GlobalUnlock</name><argument_list pos:line="82" pos:column="37">(<argument><expr><name pos:line="82" pos:column="38">hglb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="85" pos:column="9">CloseClipboard</name><argument_list pos:line="85" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
	<return pos:line="86" pos:column="9">return <expr><name pos:line="86" pos:column="16">clipboardData</name></expr>;</return>
}</block></function>

<constructor><name><name pos:line="89" pos:column="1">ByteArray</name><op:operator pos:line="89" pos:column="10">::</op:operator><name pos:line="89" pos:column="12">ByteArray</name></name><parameter_list pos:line="89" pos:column="21">(<param><decl><type><name pos:line="89" pos:column="22">ClipboardData</name></type> <name pos:line="89" pos:column="36">cd</name></decl></param>)</parameter_list>
<block pos:line="90" pos:column="1">{
	<expr_stmt><expr><name pos:line="91" pos:column="9">_length</name> <op:operator pos:line="91" pos:column="17">=</op:operator> <call><name><name pos:line="91" pos:column="19">cd</name><op:operator pos:line="91" pos:column="21">.</op:operator><name pos:line="91" pos:column="22">size</name></name><argument_list pos:line="91" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><op:operator pos:line="92" pos:column="13">!</op:operator><name pos:line="92" pos:column="14">_length</name></expr>)</condition><then pos:line="92" pos:column="22">
	<block pos:line="93" pos:column="9">{
		<expr_stmt><expr><name pos:line="94" pos:column="17">_pBytes</name> <op:operator pos:line="94" pos:column="25">=</op:operator> <name pos:line="94" pos:column="27">NULL</name></expr>;</expr_stmt>
		<return pos:line="95" pos:column="17">return;</return>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="97" pos:column="9">_pBytes</name> <op:operator pos:line="97" pos:column="17">=</op:operator> <op:operator pos:line="97" pos:column="19">new</op:operator> <name pos:line="97" pos:column="23">unsigned</name> <name><name pos:line="97" pos:column="32">char</name><index pos:line="97" pos:column="36">[<expr><name pos:line="97" pos:column="37">_length</name></expr>]</index></name></expr>;</expr_stmt>
	<for pos:line="98" pos:column="9">for (<init><decl><type><name pos:line="98" pos:column="14">size_t</name></type> <name pos:line="98" pos:column="21">i</name> <init pos:line="98" pos:column="23">= <expr><lit:literal type="number" pos:line="98" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="98" pos:column="29">i</name> <op:operator pos:line="98" pos:column="31">&lt;</op:operator> <name pos:line="98" pos:column="33">_length</name></expr> ;</condition> <incr><expr><name pos:line="98" pos:column="43">i</name><op:operator pos:line="98" pos:column="44">++</op:operator></expr></incr>)
	<block pos:line="99" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="100" pos:column="17">_pBytes</name><index pos:line="100" pos:column="24">[<expr><name pos:line="100" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="100" pos:column="28">=</op:operator> <name><name pos:line="100" pos:column="30">cd</name><index pos:line="100" pos:column="32">[<expr><name pos:line="100" pos:column="33">i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
}</block></constructor>

<constructor><name><name pos:line="104" pos:column="1">StringArray</name><op:operator pos:line="104" pos:column="12">::</op:operator><name pos:line="104" pos:column="14">StringArray</name></name><parameter_list pos:line="104" pos:column="25">(<param><decl><type><name pos:line="104" pos:column="26">ClipboardData</name></type> <name pos:line="104" pos:column="40">cd</name></decl></param>, <param><decl><type><name pos:line="104" pos:column="44">size_t</name></type> <name pos:line="104" pos:column="51">maxLen</name></decl></param>)</parameter_list>
<block pos:line="105" pos:column="1">{
	<if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><op:operator pos:line="106" pos:column="13">!</op:operator><call><name><name pos:line="106" pos:column="14">cd</name><op:operator pos:line="106" pos:column="16">.</op:operator><name pos:line="106" pos:column="17">size</name></name><argument_list pos:line="106" pos:column="21">()</argument_list></call></expr>)</condition><then pos:line="106" pos:column="24">
	<block pos:line="107" pos:column="9">{
		<expr_stmt><expr><name pos:line="108" pos:column="17">_pBytes</name> <op:operator pos:line="108" pos:column="25">=</op:operator> <name pos:line="108" pos:column="27">NULL</name></expr>;</expr_stmt>
		<return pos:line="109" pos:column="17">return;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="112" pos:column="9">bool</name></type> <name pos:line="112" pos:column="14">isCompleted</name> <init pos:line="112" pos:column="26">= <expr><op:operator pos:line="112" pos:column="28">(</op:operator><call><name><name pos:line="112" pos:column="29">cd</name><op:operator pos:line="112" pos:column="31">.</op:operator><name pos:line="112" pos:column="32">size</name></name><argument_list pos:line="112" pos:column="36">()</argument_list></call> <op:operator pos:line="112" pos:column="39">&lt;=</op:operator> <name pos:line="112" pos:column="42">maxLen</name><op:operator pos:line="112" pos:column="48">)</op:operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="113" pos:column="9">_length</name> <op:operator pos:line="113" pos:column="17">=</op:operator> <name pos:line="113" pos:column="19">isCompleted</name><op:operator pos:line="113" pos:column="30">?</op:operator><call><name><name pos:line="113" pos:column="31">cd</name><op:operator pos:line="113" pos:column="33">.</op:operator><name pos:line="113" pos:column="34">size</name></name><argument_list pos:line="113" pos:column="38">()</argument_list></call><op:operator pos:line="113" pos:column="40">:</op:operator><name pos:line="113" pos:column="41">maxLen</name></expr>;</expr_stmt>

	
	<expr_stmt><expr><name pos:line="116" pos:column="9">_pBytes</name> <op:operator pos:line="116" pos:column="17">=</op:operator> <op:operator pos:line="116" pos:column="19">new</op:operator> <name pos:line="116" pos:column="23">unsigned</name> <name><name pos:line="116" pos:column="32">char</name><index pos:line="116" pos:column="36">[<expr><name pos:line="116" pos:column="37">_length</name><op:operator pos:line="116" pos:column="44">+</op:operator><op:operator pos:line="116" pos:column="45">(</op:operator><name pos:line="116" pos:column="46">isCompleted</name><op:operator pos:line="116" pos:column="57">?</op:operator><lit:literal type="number" pos:line="116" pos:column="58">0</lit:literal><op:operator pos:line="116" pos:column="59">:</op:operator><lit:literal type="number" pos:line="116" pos:column="60">2</lit:literal><op:operator pos:line="116" pos:column="61">)</op:operator></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="117" pos:column="9">size_t</name></type> <name pos:line="117" pos:column="16">i</name> <init pos:line="117" pos:column="18">= <expr><lit:literal type="number" pos:line="117" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="118" pos:column="9">for ( <init pos:line="118" pos:column="15">;</init> <condition><expr><name pos:line="118" pos:column="17">i</name> <op:operator pos:line="118" pos:column="19">&lt;</op:operator> <name pos:line="118" pos:column="21">_length</name></expr> ;</condition> <incr><expr><name pos:line="118" pos:column="31">i</name><op:operator pos:line="118" pos:column="32">++</op:operator></expr></incr>)
	<block pos:line="119" pos:column="9">{
		<if pos:line="120" pos:column="17">if <condition pos:line="120" pos:column="20">(<expr><op:operator pos:line="120" pos:column="21">!</op:operator><name pos:line="120" pos:column="22">isCompleted</name> <op:operator pos:line="120" pos:column="34">&amp;&amp;</op:operator> <op:operator pos:line="120" pos:column="37">(</op:operator><name pos:line="120" pos:column="38">i</name> <op:operator pos:line="120" pos:column="40">==</op:operator> <name pos:line="120" pos:column="43">_length</name><op:operator pos:line="120" pos:column="50">-</op:operator><lit:literal type="number" pos:line="120" pos:column="51">5</lit:literal> <op:operator pos:line="120" pos:column="53">||</op:operator> <name pos:line="120" pos:column="56">i</name> <op:operator pos:line="120" pos:column="58">==</op:operator> <name pos:line="120" pos:column="61">_length</name><op:operator pos:line="120" pos:column="68">-</op:operator><lit:literal type="number" pos:line="120" pos:column="69">3</lit:literal> <op:operator pos:line="120" pos:column="71">||</op:operator> <name pos:line="120" pos:column="74">i</name> <op:operator pos:line="120" pos:column="76">==</op:operator> <name pos:line="120" pos:column="79">_length</name><op:operator pos:line="120" pos:column="86">-</op:operator><lit:literal type="number" pos:line="120" pos:column="87">1</lit:literal><op:operator pos:line="120" pos:column="88">)</op:operator></expr>)</condition><then pos:line="120" pos:column="90">
			<expr_stmt><expr><name><name pos:line="121" pos:column="25">_pBytes</name><index pos:line="121" pos:column="32">[<expr><name pos:line="121" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="121" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="121" pos:column="38">0</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="122" pos:column="17">else <if pos:line="122" pos:column="22">if <condition pos:line="122" pos:column="25">(<expr><op:operator pos:line="122" pos:column="26">!</op:operator><name pos:line="122" pos:column="27">isCompleted</name> <op:operator pos:line="122" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="122" pos:column="42">(</op:operator><name pos:line="122" pos:column="43">i</name> <op:operator pos:line="122" pos:column="45">==</op:operator> <name pos:line="122" pos:column="48">_length</name><op:operator pos:line="122" pos:column="55">-</op:operator><lit:literal type="number" pos:line="122" pos:column="56">6</lit:literal> <op:operator pos:line="122" pos:column="58">||</op:operator> <name pos:line="122" pos:column="61">i</name> <op:operator pos:line="122" pos:column="63">==</op:operator> <name pos:line="122" pos:column="66">_length</name><op:operator pos:line="122" pos:column="73">-</op:operator><lit:literal type="number" pos:line="122" pos:column="74">4</lit:literal> <op:operator pos:line="122" pos:column="76">||</op:operator> <name pos:line="122" pos:column="79">i</name> <op:operator pos:line="122" pos:column="81">==</op:operator> <name pos:line="122" pos:column="84">_length</name><op:operator pos:line="122" pos:column="91">-</op:operator><lit:literal type="number" pos:line="122" pos:column="92">2</lit:literal><op:operator pos:line="122" pos:column="93">)</op:operator></expr>)</condition><then pos:line="122" pos:column="95">
			<expr_stmt><expr><name><name pos:line="123" pos:column="25">_pBytes</name><index pos:line="123" pos:column="32">[<expr><name pos:line="123" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="123" pos:column="36">=</op:operator> <lit:literal type="char" pos:line="123" pos:column="38">'.'</lit:literal></expr>;</expr_stmt></then>
		<else pos:line="124" pos:column="17">else
			<expr_stmt><expr><name><name pos:line="125" pos:column="25">_pBytes</name><index pos:line="125" pos:column="32">[<expr><name pos:line="125" pos:column="33">i</name></expr>]</index></name> <op:operator pos:line="125" pos:column="36">=</op:operator> <name><name pos:line="125" pos:column="38">cd</name><index pos:line="125" pos:column="40">[<expr><name pos:line="125" pos:column="41">i</name></expr>]</index></name></expr>;</expr_stmt></else></if></else></if>
	}</block></for>

	<if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><op:operator pos:line="128" pos:column="13">!</op:operator><name pos:line="128" pos:column="14">isCompleted</name></expr>)</condition><then pos:line="128" pos:column="26">
	<block pos:line="129" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="130" pos:column="17">_pBytes</name><index pos:line="130" pos:column="24">[<expr><name pos:line="130" pos:column="25">i</name><op:operator pos:line="130" pos:column="26">++</op:operator></expr>]</index></name> <op:operator pos:line="130" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="130" pos:column="32">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="131" pos:column="17">_pBytes</name><index pos:line="131" pos:column="24">[<expr><name pos:line="131" pos:column="25">i</name></expr>]</index></name> <op:operator pos:line="131" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="131" pos:column="30">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></constructor>

<comment type="line" pos:line="135" pos:column="1">// Search clipboard data in internal storage</comment>
<comment type="line" pos:line="136" pos:column="1">// return -1 if not found, else return the index of internal array</comment>
<function><type><name pos:line="137" pos:column="1">int</name></type> <name><name pos:line="137" pos:column="5">ClipboardHistoryPanel</name><op:operator pos:line="137" pos:column="26">::</op:operator><name pos:line="137" pos:column="28">getClipboardDataIndex</name></name><parameter_list pos:line="137" pos:column="49">(<param><decl><type><name pos:line="137" pos:column="50">ClipboardData</name></type> <name pos:line="137" pos:column="64">cbd</name></decl></param>)</parameter_list>
<block pos:line="138" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">int</name></type> <name pos:line="139" pos:column="13">iFound</name> <init pos:line="139" pos:column="20">= <expr><op:operator pos:line="139" pos:column="22">-</op:operator><lit:literal type="number" pos:line="139" pos:column="23">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="140" pos:column="9">bool</name></type> <name pos:line="140" pos:column="14">found</name> <init pos:line="140" pos:column="20">= <expr><lit:literal type="boolean" pos:line="140" pos:column="22">false</lit:literal></expr></init></decl>;</decl_stmt> 
	<for pos:line="141" pos:column="9">for (<init><decl><type><name pos:line="141" pos:column="14">size_t</name></type> <name pos:line="141" pos:column="21">i</name> <init pos:line="141" pos:column="23">= <expr><lit:literal type="number" pos:line="141" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="141" pos:column="29">i</name> <op:operator pos:line="141" pos:column="31">&lt;</op:operator> <call><name><name pos:line="141" pos:column="33">_clipboardDataVector</name><op:operator pos:line="141" pos:column="53">.</op:operator><name pos:line="141" pos:column="54">size</name></name><argument_list pos:line="141" pos:column="58">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="141" pos:column="63">i</name><op:operator pos:line="141" pos:column="64">++</op:operator></expr></incr>)
	<block pos:line="142" pos:column="9">{
		<if pos:line="143" pos:column="17">if <condition pos:line="143" pos:column="20">(<expr><call><name><name pos:line="143" pos:column="21">cbd</name><op:operator pos:line="143" pos:column="24">.</op:operator><name pos:line="143" pos:column="25">size</name></name><argument_list pos:line="143" pos:column="29">()</argument_list></call> <op:operator pos:line="143" pos:column="32">==</op:operator> <name><name pos:line="143" pos:column="35">_clipboardDataVector</name><index pos:line="143" pos:column="55">[<expr><name pos:line="143" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="143" pos:column="58">.</op:operator><call><name pos:line="143" pos:column="59">size</name><argument_list pos:line="143" pos:column="63">()</argument_list></call></expr>)</condition><then pos:line="143" pos:column="66">
		<block pos:line="144" pos:column="17">{
			<for pos:line="145" pos:column="25">for (<init><decl><type><name pos:line="145" pos:column="30">size_t</name></type> <name pos:line="145" pos:column="37">j</name> <init pos:line="145" pos:column="39">= <expr><lit:literal type="number" pos:line="145" pos:column="41">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="145" pos:column="45">j</name> <op:operator pos:line="145" pos:column="47">&lt;</op:operator> <call><name><name pos:line="145" pos:column="49">cbd</name><op:operator pos:line="145" pos:column="52">.</op:operator><name pos:line="145" pos:column="53">size</name></name><argument_list pos:line="145" pos:column="57">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="145" pos:column="62">j</name><op:operator pos:line="145" pos:column="63">++</op:operator></expr></incr>)
			<block pos:line="146" pos:column="25">{
				<if pos:line="147" pos:column="33">if <condition pos:line="147" pos:column="36">(<expr><name><name pos:line="147" pos:column="37">cbd</name><index pos:line="147" pos:column="40">[<expr><name pos:line="147" pos:column="41">j</name></expr>]</index></name> <op:operator pos:line="147" pos:column="44">==</op:operator> <name><name pos:line="147" pos:column="47">_clipboardDataVector</name><index pos:line="147" pos:column="67">[<expr><name pos:line="147" pos:column="68">i</name></expr>]</index><index pos:line="147" pos:column="70">[<expr><name pos:line="147" pos:column="71">j</name></expr>]</index></name></expr>)</condition><then pos:line="147" pos:column="74">
					<expr_stmt><expr><name pos:line="148" pos:column="41">found</name> <op:operator pos:line="148" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="148" pos:column="49">true</lit:literal></expr>;</expr_stmt></then>
				<else pos:line="149" pos:column="33">else
				<block pos:line="150" pos:column="33">{
					<expr_stmt><expr><name pos:line="151" pos:column="41">found</name> <op:operator pos:line="151" pos:column="47">=</op:operator> <lit:literal type="boolean" pos:line="151" pos:column="49">false</lit:literal></expr>;</expr_stmt>
					<break pos:line="152" pos:column="41">break;</break>
				}</block></else></if>
			}</block></for>

			<if pos:line="156" pos:column="25">if <condition pos:line="156" pos:column="28">(<expr><name pos:line="156" pos:column="29">found</name></expr>)</condition><then pos:line="156" pos:column="35">
			<block pos:line="157" pos:column="25">{
				<expr_stmt><expr><name pos:line="158" pos:column="33">iFound</name> <op:operator pos:line="158" pos:column="40">=</op:operator> <name pos:line="158" pos:column="42">i</name></expr>;</expr_stmt>
				<break pos:line="159" pos:column="33">break;</break>
			}</block></then></if>
		}</block></then></if>
	}</block></for>
	<return pos:line="163" pos:column="9">return <expr><name pos:line="163" pos:column="16">iFound</name></expr>;</return>
}</block></function>

<function><type><name pos:line="166" pos:column="1">void</name></type> <name><name pos:line="166" pos:column="6">ClipboardHistoryPanel</name><op:operator pos:line="166" pos:column="27">::</op:operator><name pos:line="166" pos:column="29">addToClipboadHistory</name></name><parameter_list pos:line="166" pos:column="49">(<param><decl><type><name pos:line="166" pos:column="50">ClipboardData</name></type> <name pos:line="166" pos:column="64">cbd</name></decl></param>)</parameter_list>
<block pos:line="167" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="168" pos:column="9">int</name></type> <name pos:line="168" pos:column="13">i</name> <init pos:line="168" pos:column="15">= <expr><call><name pos:line="168" pos:column="17">getClipboardDataIndex</name><argument_list pos:line="168" pos:column="38">(<argument><expr><name pos:line="168" pos:column="39">cbd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="169" pos:column="9">if <condition pos:line="169" pos:column="12">(<expr><name pos:line="169" pos:column="13">i</name> <op:operator pos:line="169" pos:column="15">==</op:operator> <lit:literal type="number" pos:line="169" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="169" pos:column="20"> <return pos:line="169" pos:column="21">return;</return></then></if>
	<if pos:line="170" pos:column="9">if <condition pos:line="170" pos:column="12">(<expr><name pos:line="170" pos:column="13">i</name> <op:operator pos:line="170" pos:column="15">!=</op:operator> <op:operator pos:line="170" pos:column="18">-</op:operator><lit:literal type="number" pos:line="170" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="170" pos:column="21">
	<block pos:line="171" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="172" pos:column="17">_clipboardDataVector</name><op:operator pos:line="172" pos:column="37">.</op:operator><name pos:line="172" pos:column="38">erase</name></name><argument_list pos:line="172" pos:column="43">(<argument><expr><call><name><name pos:line="172" pos:column="44">_clipboardDataVector</name><op:operator pos:line="172" pos:column="64">.</op:operator><name pos:line="172" pos:column="65">begin</name></name><argument_list pos:line="172" pos:column="70">()</argument_list></call> <op:operator pos:line="172" pos:column="73">+</op:operator> <name pos:line="172" pos:column="75">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="173" pos:column="17">::</op:operator><name pos:line="173" pos:column="19">SendDlgItemMessage</name></name><argument_list pos:line="173" pos:column="37">(<argument><expr><name pos:line="173" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="173" pos:column="46">IDC_LIST_CLIPBOARD</name></expr></argument>, <argument><expr><name pos:line="173" pos:column="66">LB_DELETESTRING</name></expr></argument>, <argument><expr><name pos:line="173" pos:column="83">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="173" pos:column="86">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="175" pos:column="9">_clipboardDataVector</name><op:operator pos:line="175" pos:column="29">.</op:operator><name pos:line="175" pos:column="30">insert</name></name><argument_list pos:line="175" pos:column="36">(<argument><expr><call><name><name pos:line="175" pos:column="37">_clipboardDataVector</name><op:operator pos:line="175" pos:column="57">.</op:operator><name pos:line="175" pos:column="58">begin</name></name><argument_list pos:line="175" pos:column="63">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="175" pos:column="67">cbd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="177" pos:column="9">StringArray</name></type> <name pos:line="177" pos:column="21">sa</name><argument_list pos:line="177" pos:column="23">(<argument><expr><name pos:line="177" pos:column="24">cbd</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="177" pos:column="29">64</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="178" pos:column="9">TCHAR</name> <type:modifier pos:line="178" pos:column="15">*</type:modifier></type><name pos:line="178" pos:column="16">displayStr</name> <init pos:line="178" pos:column="27">= <expr><op:operator pos:line="178" pos:column="29">(</op:operator><name pos:line="178" pos:column="30">TCHAR</name> <op:operator pos:line="178" pos:column="36">*</op:operator><op:operator pos:line="178" pos:column="37">)</op:operator><call><name><name pos:line="178" pos:column="38">sa</name><op:operator pos:line="178" pos:column="40">.</op:operator><name pos:line="178" pos:column="41">getPointer</name></name><argument_list pos:line="178" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="179" pos:column="9">::</op:operator><name pos:line="179" pos:column="11">SendDlgItemMessage</name></name><argument_list pos:line="179" pos:column="29">(<argument><expr><name pos:line="179" pos:column="30">_hSelf</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="38">IDC_LIST_CLIPBOARD</name></expr></argument>, <argument><expr><name pos:line="179" pos:column="58">LB_INSERTSTRING</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="179" pos:column="75">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="179" pos:column="78">(</op:operator><name pos:line="179" pos:column="79">LPARAM</name><op:operator pos:line="179" pos:column="85">)</op:operator><name pos:line="179" pos:column="86">displayStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="182" pos:column="1">BOOL</name> <name pos:line="182" pos:column="6">CALLBACK</name></type> <name><name pos:line="182" pos:column="15">ClipboardHistoryPanel</name><op:operator pos:line="182" pos:column="36">::</op:operator><name pos:line="182" pos:column="38">run_dlgProc</name></name><parameter_list pos:line="182" pos:column="49">(<param><decl><type><name pos:line="182" pos:column="50">UINT</name></type> <name pos:line="182" pos:column="55">message</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="64">WPARAM</name></type> <name pos:line="182" pos:column="71">wParam</name></decl></param>, <param><decl><type><name pos:line="182" pos:column="79">LPARAM</name></type> <name pos:line="182" pos:column="86">lParam</name></decl></param>)</parameter_list>
<block pos:line="183" pos:column="1">{
    <switch pos:line="184" pos:column="5">switch <condition pos:line="184" pos:column="12">(<expr><name pos:line="184" pos:column="13">message</name></expr>)</condition>
    <block pos:line="185" pos:column="5">{
        <case pos:line="186" pos:column="9">case <expr><name pos:line="186" pos:column="14">WM_INITDIALOG</name></expr> :
        <block pos:line="187" pos:column="9">{
			<expr_stmt><expr><name pos:line="188" pos:column="25">_hwndNextCbViewer</name> <op:operator pos:line="188" pos:column="43">=</op:operator> <call><name><op:operator pos:line="188" pos:column="45">::</op:operator><name pos:line="188" pos:column="47">SetClipboardViewer</name></name><argument_list pos:line="188" pos:column="65">(<argument><expr><name pos:line="188" pos:column="66">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:line="189" pos:column="13">return <expr><name pos:line="189" pos:column="20">TRUE</name></expr>;</return>
        }</block>

		</case><case pos:line="192" pos:column="17">case <expr><name pos:line="192" pos:column="22">WM_CHANGECBCHAIN</name></expr>:
			<if pos:line="193" pos:column="25">if <condition pos:line="193" pos:column="28">(<expr><name pos:line="193" pos:column="29">_hwndNextCbViewer</name> <op:operator pos:line="193" pos:column="47">==</op:operator> <op:operator pos:line="193" pos:column="50">(</op:operator><name pos:line="193" pos:column="51">HWND</name><op:operator pos:line="193" pos:column="55">)</op:operator><name pos:line="193" pos:column="56">wParam</name></expr>)</condition><then pos:line="193" pos:column="63">
				<expr_stmt><expr><name pos:line="194" pos:column="33">_hwndNextCbViewer</name> <op:operator pos:line="194" pos:column="51">=</op:operator> <op:operator pos:line="194" pos:column="53">(</op:operator><name pos:line="194" pos:column="54">HWND</name><op:operator pos:line="194" pos:column="58">)</op:operator><name pos:line="194" pos:column="59">lParam</name></expr>;</expr_stmt></then>
			<else pos:line="195" pos:column="25">else <if pos:line="195" pos:column="30">if <condition pos:line="195" pos:column="33">(<expr><name pos:line="195" pos:column="34">_hwndNextCbViewer</name></expr>)</condition><then pos:line="195" pos:column="52">
				<expr_stmt><expr><call><name><op:operator pos:line="196" pos:column="33">::</op:operator><name pos:line="196" pos:column="35">SendMessage</name></name><argument_list pos:line="196" pos:column="46">(<argument><expr><name pos:line="196" pos:column="47">_hwndNextCbViewer</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="66">message</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="75">wParam</name></expr></argument>, <argument><expr><name pos:line="196" pos:column="83">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
			<return pos:line="197" pos:column="25">return <expr><name pos:line="197" pos:column="32">TRUE</name></expr>;</return>

		</case><case pos:line="199" pos:column="17">case <expr><name pos:line="199" pos:column="22">WM_DRAWCLIPBOARD</name></expr> :
		<block pos:line="200" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="201" pos:column="25">ClipboardData</name></type> <name pos:line="201" pos:column="39">clipboardData</name> <init pos:line="201" pos:column="53">= <expr><call><name pos:line="201" pos:column="55">getClipboadData</name><argument_list pos:line="201" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="202" pos:column="25">if <condition pos:line="202" pos:column="28">(<expr><call><name><name pos:line="202" pos:column="29">clipboardData</name><op:operator pos:line="202" pos:column="42">.</op:operator><name pos:line="202" pos:column="43">size</name></name><argument_list pos:line="202" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="202" pos:column="50">
				<expr_stmt><expr><call><name pos:line="203" pos:column="33">addToClipboadHistory</name><argument_list pos:line="203" pos:column="53">(<argument><expr><name pos:line="203" pos:column="54">clipboardData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="204" pos:column="25">if <condition pos:line="204" pos:column="28">(<expr><name pos:line="204" pos:column="29">_hwndNextCbViewer</name></expr>)</condition><then pos:line="204" pos:column="47">
				<expr_stmt><expr><call><name><op:operator pos:line="205" pos:column="33">::</op:operator><name pos:line="205" pos:column="35">SendMessage</name></name><argument_list pos:line="205" pos:column="46">(<argument><expr><name pos:line="205" pos:column="47">_hwndNextCbViewer</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="66">message</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="75">wParam</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="83">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<return pos:line="206" pos:column="25">return <expr><name pos:line="206" pos:column="32">TRUE</name></expr>;</return>
		}</block>
		
		</case><case pos:line="209" pos:column="17">case <expr><name pos:line="209" pos:column="22">WM_DESTROY</name></expr>:
			<expr_stmt><expr><call><name><op:operator pos:line="210" pos:column="25">::</op:operator><name pos:line="210" pos:column="27">ChangeClipboardChain</name></name><argument_list pos:line="210" pos:column="47">(<argument><expr><name pos:line="210" pos:column="48">_hSelf</name></expr></argument>, <argument><expr><name pos:line="210" pos:column="56">_hwndNextCbViewer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="211" pos:column="25">break;</break>

		</case><case pos:line="213" pos:column="17">case <expr><name pos:line="213" pos:column="22">WM_COMMAND</name></expr> : 
		<block pos:line="214" pos:column="17">{
			<switch pos:line="215" pos:column="25">switch <condition pos:line="215" pos:column="32">(<expr><call><name pos:line="215" pos:column="33">LOWORD</name><argument_list pos:line="215" pos:column="39">(<argument><expr><name pos:line="215" pos:column="40">wParam</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block pos:line="216" pos:column="13">{
                <case pos:line="217" pos:column="17">case <expr><name pos:line="217" pos:column="22">IDC_LIST_CLIPBOARD</name></expr>:
				<block pos:line="218" pos:column="33">{
					<if pos:line="219" pos:column="41">if <condition pos:line="219" pos:column="44">(<expr><call><name pos:line="219" pos:column="45">HIWORD</name><argument_list pos:line="219" pos:column="51">(<argument><expr><name pos:line="219" pos:column="52">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="219" pos:column="60">==</op:operator> <name pos:line="219" pos:column="63">LBN_DBLCLK</name></expr>)</condition><then pos:line="219" pos:column="74">
					<block pos:line="220" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="221" pos:column="49">int</name></type> <name pos:line="221" pos:column="53">i</name> <init pos:line="221" pos:column="55">= <expr><call><name><op:operator pos:line="221" pos:column="57">::</op:operator><name pos:line="221" pos:column="59">SendDlgItemMessage</name></name><argument_list pos:line="221" pos:column="77">(<argument><expr><name pos:line="221" pos:column="78">_hSelf</name></expr></argument>, <argument><expr><name pos:line="221" pos:column="86">IDC_LIST_CLIPBOARD</name></expr></argument>, <argument><expr><name pos:line="221" pos:column="106">LB_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="221" pos:column="120">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="221" pos:column="123">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<if pos:line="222" pos:column="49">if <condition pos:line="222" pos:column="52">(<expr><name pos:line="222" pos:column="53">i</name> <op:operator pos:line="222" pos:column="55">!=</op:operator> <name pos:line="222" pos:column="58">LB_ERR</name></expr>)</condition><then pos:line="222" pos:column="65">
						<block pos:line="223" pos:column="49">{
<cpp:ifdef pos:line="224" pos:column="1">#<cpp:directive pos:line="224" pos:column="2">ifdef</cpp:directive> <name pos:line="224" pos:column="8">UNICODE</name></cpp:ifdef>
							<decl_stmt><decl><type><name pos:line="225" pos:column="57">int</name></type> <name pos:line="225" pos:column="61">codepage</name> <init pos:line="225" pos:column="70">= <expr><call><name pos:line="225" pos:column="72">(<type:modifier pos:line="225" pos:column="73">*</type:modifier><name pos:line="225" pos:column="74">_ppEditView</name>)<op:operator pos:line="225" pos:column="86">-&gt;</op:operator><name pos:line="225" pos:column="88">getCurrentBuffer</name></name><argument_list pos:line="225" pos:column="104">()</argument_list></call><op:operator pos:line="225" pos:column="106">-&gt;</op:operator><call><name pos:line="225" pos:column="108">getEncoding</name><argument_list pos:line="225" pos:column="119">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<if pos:line="226" pos:column="57">if <condition pos:line="226" pos:column="60">(<expr><name pos:line="226" pos:column="61">codepage</name> <op:operator pos:line="226" pos:column="70">==</op:operator> <op:operator pos:line="226" pos:column="73">-</op:operator><lit:literal type="number" pos:line="226" pos:column="74">1</lit:literal></expr>)</condition><then pos:line="226" pos:column="76">
							<block pos:line="227" pos:column="57">{
								<decl_stmt><decl><type><name pos:line="228" pos:column="65">int</name></type> <name pos:line="228" pos:column="69">cp</name> <init pos:line="228" pos:column="72">= <expr><call><name pos:line="228" pos:column="74">(<type:modifier pos:line="228" pos:column="75">*</type:modifier><name pos:line="228" pos:column="76">_ppEditView</name>)<op:operator pos:line="228" pos:column="88">-&gt;</op:operator><name pos:line="228" pos:column="90">execute</name></name><argument_list pos:line="228" pos:column="97">(<argument><expr><name pos:line="228" pos:column="98">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><name pos:line="229" pos:column="65">codepage</name> <op:operator pos:line="229" pos:column="74">=</op:operator> <name pos:line="229" pos:column="76">cp</name><op:operator pos:line="229" pos:column="78">==</op:operator><name pos:line="229" pos:column="80">SC_CP_UTF8</name><op:operator pos:line="229" pos:column="90">?</op:operator><name pos:line="229" pos:column="91">SC_CP_UTF8</name><op:operator pos:line="229" pos:column="101">:</op:operator><lit:literal type="number" pos:line="229" pos:column="102">0</lit:literal></expr>;</expr_stmt>
							}</block></then>
							<else pos:line="231" pos:column="57">else
								<expr_stmt><expr><name pos:line="232" pos:column="65">codepage</name> <op:operator pos:line="232" pos:column="74">=</op:operator> <name pos:line="232" pos:column="76">SC_CP_UTF8</name></expr>;</expr_stmt></else></if>

							<function_decl><type><name pos:line="234" pos:column="57">ByteArray</name></type> <name pos:line="234" pos:column="67">ba</name><parameter_list pos:line="234" pos:column="69">(<param><decl><type><name><name pos:line="234" pos:column="70">_clipboardDataVector</name><index pos:line="234" pos:column="90">[<expr><name pos:line="234" pos:column="91">i</name></expr>]</index></name></type></decl></param>)</parameter_list>;</function_decl>

							<decl_stmt><decl><type><name pos:line="236" pos:column="57">int</name></type> <name pos:line="236" pos:column="61">nbChar</name> <init pos:line="236" pos:column="68">= <expr><call><name pos:line="236" pos:column="70">WideCharToMultiByte</name><argument_list pos:line="236" pos:column="89">(<argument><expr><name pos:line="236" pos:column="90">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="236" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="236" pos:column="103">(</op:operator><name pos:line="236" pos:column="104">wchar_t</name> <op:operator pos:line="236" pos:column="112">*</op:operator><op:operator pos:line="236" pos:column="113">)</op:operator><call><name><name pos:line="236" pos:column="114">ba</name><op:operator pos:line="236" pos:column="116">.</op:operator><name pos:line="236" pos:column="117">getPointer</name></name><argument_list pos:line="236" pos:column="127">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="236" pos:column="131">ba</name><op:operator pos:line="236" pos:column="133">.</op:operator><name pos:line="236" pos:column="134">getLength</name></name><argument_list pos:line="236" pos:column="143">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="236" pos:column="147">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="236" pos:column="153">0</lit:literal></expr></argument>, <argument><expr><name pos:line="236" pos:column="156">NULL</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="162">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

							<decl_stmt><decl><type><name pos:line="238" pos:column="57">char</name> <type:modifier pos:line="238" pos:column="62">*</type:modifier></type><name pos:line="238" pos:column="63">c</name> <init pos:line="238" pos:column="65">= <expr><op:operator pos:line="238" pos:column="67">new</op:operator> <name><name pos:line="238" pos:column="71">char</name><index pos:line="238" pos:column="75">[<expr><name pos:line="238" pos:column="76">nbChar</name><op:operator pos:line="238" pos:column="82">+</op:operator><lit:literal type="number" pos:line="238" pos:column="83">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name pos:line="239" pos:column="57">WideCharToMultiByte</name><argument_list pos:line="239" pos:column="76">(<argument><expr><name pos:line="239" pos:column="77">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="239" pos:column="87">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="239" pos:column="90">(</op:operator><name pos:line="239" pos:column="91">wchar_t</name> <op:operator pos:line="239" pos:column="99">*</op:operator><op:operator pos:line="239" pos:column="100">)</op:operator><call><name><name pos:line="239" pos:column="101">ba</name><op:operator pos:line="239" pos:column="103">.</op:operator><name pos:line="239" pos:column="104">getPointer</name></name><argument_list pos:line="239" pos:column="114">()</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="239" pos:column="118">ba</name><op:operator pos:line="239" pos:column="120">.</op:operator><name pos:line="239" pos:column="121">getLength</name></name><argument_list pos:line="239" pos:column="130">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="239" pos:column="134">c</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="137">nbChar</name><op:operator pos:line="239" pos:column="143">+</op:operator><lit:literal type="number" pos:line="239" pos:column="144">1</lit:literal></expr></argument>, <argument><expr><name pos:line="239" pos:column="147">NULL</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="153">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

							<expr_stmt><expr><call><name pos:line="241" pos:column="57">(<type:modifier pos:line="241" pos:column="58">*</type:modifier><name pos:line="241" pos:column="59">_ppEditView</name>)<op:operator pos:line="241" pos:column="71">-&gt;</op:operator><name pos:line="241" pos:column="73">execute</name></name><argument_list pos:line="241" pos:column="80">(<argument><expr><name pos:line="241" pos:column="81">SCI_REPLACESEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="241" pos:column="97">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="241" pos:column="100">(</op:operator><name pos:line="241" pos:column="101">LPARAM</name><op:operator pos:line="241" pos:column="107">)</op:operator><lit:literal type="string" pos:line="241" pos:column="108">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="242" pos:column="57">(<type:modifier pos:line="242" pos:column="58">*</type:modifier><name pos:line="242" pos:column="59">_ppEditView</name>)<op:operator pos:line="242" pos:column="71">-&gt;</op:operator><name pos:line="242" pos:column="73">execute</name></name><argument_list pos:line="242" pos:column="80">(<argument><expr><name pos:line="242" pos:column="81">SCI_ADDTEXT</name></expr></argument>, <argument><expr><call><name pos:line="242" pos:column="94">strlen</name><argument_list pos:line="242" pos:column="100">(<argument><expr><name pos:line="242" pos:column="101">c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="242" pos:column="105">(</op:operator><name pos:line="242" pos:column="106">LPARAM</name><op:operator pos:line="242" pos:column="112">)</op:operator><name pos:line="242" pos:column="113">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="243" pos:column="57">(<type:modifier pos:line="243" pos:column="58">*</type:modifier><name pos:line="243" pos:column="59">_ppEditView</name>)<op:operator pos:line="243" pos:column="71">-&gt;</op:operator><name pos:line="243" pos:column="73">getFocus</name></name><argument_list pos:line="243" pos:column="81">()</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><op:operator pos:line="244" pos:column="57">delete</op:operator> <index pos:line="244" pos:column="64">[]</index> <name pos:line="244" pos:column="67">c</name></expr>;</expr_stmt>
							
<cpp:else pos:line="246" pos:column="1">#<cpp:directive pos:line="246" pos:column="2">else</cpp:directive></cpp:else>
							<function_decl><type><name pos:line="247" pos:column="57">ByteArray</name></type> <name pos:line="247" pos:column="67">ba</name><parameter_list pos:line="247" pos:column="69">(<param><decl><type><name><name pos:line="247" pos:column="70">_clipboardDataVector</name><index pos:line="247" pos:column="90">[<expr><name pos:line="247" pos:column="91">i</name></expr>]</index></name></type></decl></param>)</parameter_list>;</function_decl>
							<decl_stmt><decl><type><name pos:line="248" pos:column="57">char</name> <type:modifier pos:line="248" pos:column="62">*</type:modifier></type><name pos:line="248" pos:column="63">str</name> <init pos:line="248" pos:column="67">= <expr><op:operator pos:line="248" pos:column="69">(</op:operator><name pos:line="248" pos:column="70">char</name> <op:operator pos:line="248" pos:column="75">*</op:operator><op:operator pos:line="248" pos:column="76">)</op:operator><call><name><name pos:line="248" pos:column="77">ba</name><op:operator pos:line="248" pos:column="79">.</op:operator><name pos:line="248" pos:column="80">getPointer</name></name><argument_list pos:line="248" pos:column="90">()</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><call><name pos:line="249" pos:column="57">(<type:modifier pos:line="249" pos:column="58">*</type:modifier><name pos:line="249" pos:column="59">_ppEditView</name>)<op:operator pos:line="249" pos:column="71">-&gt;</op:operator><name pos:line="249" pos:column="73">execute</name></name><argument_list pos:line="249" pos:column="80">(<argument><expr><name pos:line="249" pos:column="81">SCI_REPLACESEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="249" pos:column="97">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="249" pos:column="100">(</op:operator><name pos:line="249" pos:column="101">LPARAM</name><op:operator pos:line="249" pos:column="107">)</op:operator><lit:literal type="string" pos:line="249" pos:column="108">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="250" pos:column="57">(<type:modifier pos:line="250" pos:column="58">*</type:modifier><name pos:line="250" pos:column="59">_ppEditView</name>)<op:operator pos:line="250" pos:column="71">-&gt;</op:operator><name pos:line="250" pos:column="73">execute</name></name><argument_list pos:line="250" pos:column="80">(<argument><expr><name pos:line="250" pos:column="81">SCI_ADDTEXT</name></expr></argument>, <argument><expr><call><name pos:line="250" pos:column="94">strlen</name><argument_list pos:line="250" pos:column="100">(<argument><expr><name pos:line="250" pos:column="101">str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="250" pos:column="107">(</op:operator><name pos:line="250" pos:column="108">LPARAM</name><op:operator pos:line="250" pos:column="114">)</op:operator><name pos:line="250" pos:column="115">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="251" pos:column="57">(<type:modifier pos:line="251" pos:column="58">*</type:modifier><name pos:line="251" pos:column="59">_ppEditView</name>)<op:operator pos:line="251" pos:column="71">-&gt;</op:operator><name pos:line="251" pos:column="73">getFocus</name></name><argument_list pos:line="251" pos:column="81">()</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="252" pos:column="1">#<cpp:directive pos:line="252" pos:column="2">endif</cpp:directive></cpp:endif>
						}</block></then></if>
					}</block></then></if>
					<return pos:line="255" pos:column="41">return <expr><name pos:line="255" pos:column="48">TRUE</name></expr>;</return>
				}</block>
			</case>}</block></switch>
		}</block>
		<break pos:line="259" pos:column="17">break;</break>
		
        </case><case pos:line="261" pos:column="9">case <expr><name pos:line="261" pos:column="14">WM_SIZE</name></expr>:
        <block pos:line="262" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="263" pos:column="13">int</name></type> <name pos:line="263" pos:column="17">width</name> <init pos:line="263" pos:column="23">= <expr><call><name pos:line="263" pos:column="25">LOWORD</name><argument_list pos:line="263" pos:column="31">(<argument><expr><name pos:line="263" pos:column="32">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="264" pos:column="13">int</name></type> <name pos:line="264" pos:column="17">height</name> <init pos:line="264" pos:column="24">= <expr><call><name pos:line="264" pos:column="26">HIWORD</name><argument_list pos:line="264" pos:column="32">(<argument><expr><name pos:line="264" pos:column="33">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="265" pos:column="25">::</op:operator><name pos:line="265" pos:column="27">MoveWindow</name></name><argument_list pos:line="265" pos:column="37">(<argument><expr><call><name><op:operator pos:line="265" pos:column="38">::</op:operator><name pos:line="265" pos:column="40">GetDlgItem</name></name><argument_list pos:line="265" pos:column="50">(<argument><expr><name pos:line="265" pos:column="51">_hSelf</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="59">IDC_LIST_CLIPBOARD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="265" pos:column="80">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="265" pos:column="83">0</lit:literal></expr></argument>, <argument><expr><name pos:line="265" pos:column="86">width</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="93">height</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="101">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:line="266" pos:column="13">break;</break>
        }</block>
<comment type="block" pos:line="268" pos:column="1">/*
		case WM_VKEYTOITEM:
		{
			if (LOWORD(wParam) == VK_RETURN)
			{
				int i = ::SendDlgItemMessage(_hSelf, IDC_LIST_CLIPBOARD, LB_GETCURSEL, 0, 0);
				printInt(i);
				return TRUE;
			}//return TRUE;
			break;
		}
*/</comment>

        </case><default pos:line="281" pos:column="9">default :
            <return pos:line="282" pos:column="13">return <expr><call><name><name pos:line="282" pos:column="20">DockingDlgInterface</name><op:operator pos:line="282" pos:column="39">::</op:operator><name pos:line="282" pos:column="41">run_dlgProc</name></name><argument_list pos:line="282" pos:column="52">(<argument><expr><name pos:line="282" pos:column="53">message</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="62">wParam</name></expr></argument>, <argument><expr><name pos:line="282" pos:column="70">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
    </default>}</block></switch>
	<return pos:line="284" pos:column="9">return <expr><call><name><name pos:line="284" pos:column="16">DockingDlgInterface</name><op:operator pos:line="284" pos:column="35">::</op:operator><name pos:line="284" pos:column="37">run_dlgProc</name></name><argument_list pos:line="284" pos:column="48">(<argument><expr><name pos:line="284" pos:column="49">message</name></expr></argument>, <argument><expr><name pos:line="284" pos:column="58">wParam</name></expr></argument>, <argument><expr><name pos:line="284" pos:column="66">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
