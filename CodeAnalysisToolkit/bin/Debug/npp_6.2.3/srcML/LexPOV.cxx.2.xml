<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexPOV.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexPOV.cxx
 ** Lexer for POV-Ray SDL (Persistance of Vision Raytracer, Scene Description Language).
 ** Written by Philippe Lhoste but this is mostly a derivative of LexCPP...
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2005 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<comment type="line" pos:line="9" pos:column="1">// Some points that distinguish from a simple C lexer:</comment>
<comment type="line" pos:line="10" pos:column="1">// Identifiers start only by a character.</comment>
<comment type="line" pos:line="11" pos:column="1">// No line continuation character.</comment>
<comment type="line" pos:line="12" pos:column="1">// Strings are limited to 256 characters.</comment>
<comment type="line" pos:line="13" pos:column="1">// Directives are similar to preprocessor commands,</comment>
<comment type="line" pos:line="14" pos:column="1">// but we match directive keywords and colorize incorrect ones.</comment>
<comment type="line" pos:line="15" pos:column="1">// Block comments can be nested (code stolen from my code in LexLua).</comment>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file pos:line="17" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file pos:line="18" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file pos:line="19" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file pos:line="20" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file pos:line="21" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file pos:line="22" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">ifdef</cpp:directive> <name pos:line="35" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="36" pos:column="1">using namespace <name pos:line="36" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="39" pos:column="1">static</specifier> <specifier pos:line="39" pos:column="8">inline</specifier> <name pos:line="39" pos:column="15">bool</name></type> <name pos:line="39" pos:column="20">IsAWordChar</name><parameter_list pos:line="39" pos:column="31">(<param><decl><type><name pos:line="39" pos:column="32">int</name></type> <name pos:line="39" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="40">{
	<return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">ch</name> <op:operator pos:line="40" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="40" pos:column="21">0x80</lit:literal> <op:operator pos:line="40" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="40" pos:column="29">(</op:operator><call><name pos:line="40" pos:column="30">isalnum</name><argument_list pos:line="40" pos:column="37">(<argument><expr><name pos:line="40" pos:column="38">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="40" pos:column="42">||</op:operator> <name pos:line="40" pos:column="45">ch</name> <op:operator pos:line="40" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="51">'_'</lit:literal><op:operator pos:line="40" pos:column="54">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">static</specifier> <specifier pos:line="43" pos:column="8">inline</specifier> <name pos:line="43" pos:column="15">bool</name></type> <name pos:line="43" pos:column="20">IsAWordStart</name><parameter_list pos:line="43" pos:column="32">(<param><decl><type><name pos:line="43" pos:column="33">int</name></type> <name pos:line="43" pos:column="37">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="41">{
	<return pos:line="44" pos:column="9">return <expr><name pos:line="44" pos:column="16">ch</name> <op:operator pos:line="44" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="44" pos:column="21">0x80</lit:literal> <op:operator pos:line="44" pos:column="26">&amp;&amp;</op:operator> <call><name pos:line="44" pos:column="29">isalpha</name><argument_list pos:line="44" pos:column="36">(<argument><expr><name pos:line="44" pos:column="37">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">static</specifier> <specifier pos:line="47" pos:column="8">inline</specifier> <name pos:line="47" pos:column="15">bool</name></type> <name pos:line="47" pos:column="20">IsANumberChar</name><parameter_list pos:line="47" pos:column="33">(<param><decl><type><name pos:line="47" pos:column="34">int</name></type> <name pos:line="47" pos:column="38">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="42">{
	<comment type="line" pos:line="48" pos:column="9">// Not exactly following number definition (several dots are seen as OK, etc.)</comment>
	<comment type="line" pos:line="49" pos:column="9">// but probably enough in most cases.</comment>
	<return pos:line="50" pos:column="9">return <expr><op:operator pos:line="50" pos:column="16">(</op:operator><name pos:line="50" pos:column="17">ch</name> <op:operator pos:line="50" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="50" pos:column="22">0x80</lit:literal><op:operator pos:line="50" pos:column="26">)</op:operator> <op:operator pos:line="50" pos:column="28">&amp;&amp;</op:operator>
	        <op:operator pos:line="51" pos:column="17">(</op:operator><call><name pos:line="51" pos:column="18">isdigit</name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="51" pos:column="30">||</op:operator> <call><name pos:line="51" pos:column="33">toupper</name><argument_list pos:line="51" pos:column="40">(<argument><expr><name pos:line="51" pos:column="41">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="51" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="48">'E'</lit:literal> <op:operator pos:line="51" pos:column="52">||</op:operator>
             <name pos:line="52" pos:column="14">ch</name> <op:operator pos:line="52" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="20">'.'</lit:literal> <op:operator pos:line="52" pos:column="24">||</op:operator> <name pos:line="52" pos:column="27">ch</name> <op:operator pos:line="52" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="33">'-'</lit:literal> <op:operator pos:line="52" pos:column="37">||</op:operator> <name pos:line="52" pos:column="40">ch</name> <op:operator pos:line="52" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="46">'+'</lit:literal><op:operator pos:line="52" pos:column="49">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="55" pos:column="1">static</specifier> <name pos:line="55" pos:column="8">void</name></type> <name pos:line="55" pos:column="13">ColourisePovDoc</name><parameter_list pos:line="55" pos:column="28">(
	<param><decl><type><name pos:line="56" pos:column="9">unsigned</name> <name pos:line="56" pos:column="18">int</name></type> <name pos:line="56" pos:column="22">startPos</name></decl></param>,
	<param><decl><type><name pos:line="57" pos:column="9">int</name></type> <name pos:line="57" pos:column="13">length</name></decl></param>,
	<param><decl><type><name pos:line="58" pos:column="9">int</name></type> <name pos:line="58" pos:column="13">initStyle</name></decl></param>,
	<param><decl><type><name pos:line="59" pos:column="9">WordList</name> <type:modifier pos:line="59" pos:column="18">*</type:modifier></type><name><name pos:line="59" pos:column="19">keywordlists</name><index pos:line="59" pos:column="31">[]</index></name></decl></param>,
    <param><decl><type><name pos:line="60" pos:column="5">Accessor</name> <type:modifier pos:line="60" pos:column="14">&amp;</type:modifier></type><name pos:line="60" pos:column="15">styler</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="23">{

	<decl_stmt><decl><type><name pos:line="62" pos:column="9">WordList</name> <type:modifier pos:line="62" pos:column="18">&amp;</type:modifier></type><name pos:line="62" pos:column="19">keywords1</name> <init pos:line="62" pos:column="29">= <expr><op:operator pos:line="62" pos:column="31">*</op:operator><name><name pos:line="62" pos:column="32">keywordlists</name><index pos:line="62" pos:column="44">[<expr><lit:literal type="number" pos:line="62" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="63" pos:column="9">WordList</name> <type:modifier pos:line="63" pos:column="18">&amp;</type:modifier></type><name pos:line="63" pos:column="19">keywords2</name> <init pos:line="63" pos:column="29">= <expr><op:operator pos:line="63" pos:column="31">*</op:operator><name><name pos:line="63" pos:column="32">keywordlists</name><index pos:line="63" pos:column="44">[<expr><lit:literal type="number" pos:line="63" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">WordList</name> <type:modifier pos:line="64" pos:column="18">&amp;</type:modifier></type><name pos:line="64" pos:column="19">keywords3</name> <init pos:line="64" pos:column="29">= <expr><op:operator pos:line="64" pos:column="31">*</op:operator><name><name pos:line="64" pos:column="32">keywordlists</name><index pos:line="64" pos:column="44">[<expr><lit:literal type="number" pos:line="64" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="65" pos:column="9">WordList</name> <type:modifier pos:line="65" pos:column="18">&amp;</type:modifier></type><name pos:line="65" pos:column="19">keywords4</name> <init pos:line="65" pos:column="29">= <expr><op:operator pos:line="65" pos:column="31">*</op:operator><name><name pos:line="65" pos:column="32">keywordlists</name><index pos:line="65" pos:column="44">[<expr><lit:literal type="number" pos:line="65" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">WordList</name> <type:modifier pos:line="66" pos:column="18">&amp;</type:modifier></type><name pos:line="66" pos:column="19">keywords5</name> <init pos:line="66" pos:column="29">= <expr><op:operator pos:line="66" pos:column="31">*</op:operator><name><name pos:line="66" pos:column="32">keywordlists</name><index pos:line="66" pos:column="44">[<expr><lit:literal type="number" pos:line="66" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">WordList</name> <type:modifier pos:line="67" pos:column="18">&amp;</type:modifier></type><name pos:line="67" pos:column="19">keywords6</name> <init pos:line="67" pos:column="29">= <expr><op:operator pos:line="67" pos:column="31">*</op:operator><name><name pos:line="67" pos:column="32">keywordlists</name><index pos:line="67" pos:column="44">[<expr><lit:literal type="number" pos:line="67" pos:column="45">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">WordList</name> <type:modifier pos:line="68" pos:column="18">&amp;</type:modifier></type><name pos:line="68" pos:column="19">keywords7</name> <init pos:line="68" pos:column="29">= <expr><op:operator pos:line="68" pos:column="31">*</op:operator><name><name pos:line="68" pos:column="32">keywordlists</name><index pos:line="68" pos:column="44">[<expr><lit:literal type="number" pos:line="68" pos:column="45">6</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">WordList</name> <type:modifier pos:line="69" pos:column="18">&amp;</type:modifier></type><name pos:line="69" pos:column="19">keywords8</name> <init pos:line="69" pos:column="29">= <expr><op:operator pos:line="69" pos:column="31">*</op:operator><name><name pos:line="69" pos:column="32">keywordlists</name><index pos:line="69" pos:column="44">[<expr><lit:literal type="number" pos:line="69" pos:column="45">7</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="71" pos:column="9">int</name></type> <name pos:line="71" pos:column="13">currentLine</name> <init pos:line="71" pos:column="25">= <expr><call><name><name pos:line="71" pos:column="27">styler</name><op:operator pos:line="71" pos:column="33">.</op:operator><name pos:line="71" pos:column="34">GetLine</name></name><argument_list pos:line="71" pos:column="41">(<argument><expr><name pos:line="71" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="72" pos:column="9">// Initialize the block comment /* */ nesting level, if we are inside such a comment.</comment>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">int</name></type> <name pos:line="73" pos:column="13">blockCommentLevel</name> <init pos:line="73" pos:column="31">= <expr><lit:literal type="number" pos:line="73" pos:column="33">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">initStyle</name> <op:operator pos:line="74" pos:column="23">==</op:operator> <name pos:line="74" pos:column="26">SCE_POV_COMMENT</name></expr>)</condition><then pos:line="74" pos:column="42"> <block pos:line="74" pos:column="43">{
		<expr_stmt><expr><name pos:line="75" pos:column="17">blockCommentLevel</name> <op:operator pos:line="75" pos:column="35">=</op:operator> <call><name><name pos:line="75" pos:column="37">styler</name><op:operator pos:line="75" pos:column="43">.</op:operator><name pos:line="75" pos:column="44">GetLineState</name></name><argument_list pos:line="75" pos:column="56">(<argument><expr><name pos:line="75" pos:column="57">currentLine</name> <op:operator pos:line="75" pos:column="69">-</op:operator> <lit:literal type="number" pos:line="75" pos:column="71">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="78" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">initStyle</name> <op:operator pos:line="79" pos:column="23">==</op:operator> <name pos:line="79" pos:column="26">SCE_POV_STRINGEOL</name> <op:operator pos:line="79" pos:column="44">||</op:operator> <name pos:line="79" pos:column="47">initStyle</name> <op:operator pos:line="79" pos:column="57">==</op:operator> <name pos:line="79" pos:column="60">SCE_POV_COMMENTLINE</name></expr>)</condition><then pos:line="79" pos:column="80"> <block pos:line="79" pos:column="81">{
		<expr_stmt><expr><name pos:line="80" pos:column="17">initStyle</name> <op:operator pos:line="80" pos:column="27">=</op:operator> <name pos:line="80" pos:column="29">SCE_POV_DEFAULT</name></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="83" pos:column="9">short</name></type> <name pos:line="83" pos:column="15">stringLen</name> <init pos:line="83" pos:column="25">= <expr><lit:literal type="number" pos:line="83" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="85" pos:column="9">StyleContext</name></type> <name pos:line="85" pos:column="22">sc</name><parameter_list pos:line="85" pos:column="24">(<param><decl><type><name pos:line="85" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="85" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="85" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="85" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="87" pos:column="9">for (<init pos:line="87" pos:column="14">;</init> <condition><expr><call><name><name pos:line="87" pos:column="16">sc</name><op:operator pos:line="87" pos:column="18">.</op:operator><name pos:line="87" pos:column="19">More</name></name><argument_list pos:line="87" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="87" pos:column="27">sc</name><op:operator pos:line="87" pos:column="29">.</op:operator><name pos:line="87" pos:column="30">Forward</name></name><argument_list pos:line="87" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="87" pos:column="41">{
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><name><name pos:line="88" pos:column="21">sc</name><op:operator pos:line="88" pos:column="23">.</op:operator><name pos:line="88" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="88" pos:column="34"> <block pos:line="88" pos:column="35">{
			<comment type="line" pos:line="89" pos:column="25">// Update the line state, so it can be seen by next line</comment>
			<expr_stmt><expr><name pos:line="90" pos:column="25">currentLine</name> <op:operator pos:line="90" pos:column="37">=</op:operator> <call><name><name pos:line="90" pos:column="39">styler</name><op:operator pos:line="90" pos:column="45">.</op:operator><name pos:line="90" pos:column="46">GetLine</name></name><argument_list pos:line="90" pos:column="53">(<argument><expr><name><name pos:line="90" pos:column="54">sc</name><op:operator pos:line="90" pos:column="56">.</op:operator><name pos:line="90" pos:column="57">currentPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><name><name pos:line="91" pos:column="29">sc</name><op:operator pos:line="91" pos:column="31">.</op:operator><name pos:line="91" pos:column="32">state</name></name> <op:operator pos:line="91" pos:column="38">==</op:operator> <name pos:line="91" pos:column="41">SCE_POV_COMMENT</name></expr>)</condition><then pos:line="91" pos:column="57"> <block pos:line="91" pos:column="58">{
				<comment type="line" pos:line="92" pos:column="33">// Inside a block comment, we set the line state</comment>
				<expr_stmt><expr><call><name><name pos:line="93" pos:column="33">styler</name><op:operator pos:line="93" pos:column="39">.</op:operator><name pos:line="93" pos:column="40">SetLineState</name></name><argument_list pos:line="93" pos:column="52">(<argument><expr><name pos:line="93" pos:column="53">currentLine</name></expr></argument>, <argument><expr><name pos:line="93" pos:column="66">blockCommentLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="94" pos:column="27">else <block pos:line="94" pos:column="32">{
				<comment type="line" pos:line="95" pos:column="33">// Reset the line state</comment>
				<expr_stmt><expr><call><name><name pos:line="96" pos:column="33">styler</name><op:operator pos:line="96" pos:column="39">.</op:operator><name pos:line="96" pos:column="40">SetLineState</name></name><argument_list pos:line="96" pos:column="52">(<argument><expr><name pos:line="96" pos:column="53">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="96" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>

		<if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><name><name pos:line="100" pos:column="21">sc</name><op:operator pos:line="100" pos:column="23">.</op:operator><name pos:line="100" pos:column="24">atLineStart</name></name> <op:operator pos:line="100" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="100" pos:column="39">(</op:operator><name><name pos:line="100" pos:column="40">sc</name><op:operator pos:line="100" pos:column="42">.</op:operator><name pos:line="100" pos:column="43">state</name></name> <op:operator pos:line="100" pos:column="49">==</op:operator> <name pos:line="100" pos:column="52">SCE_POV_STRING</name><op:operator pos:line="100" pos:column="66">)</op:operator></expr>)</condition><then pos:line="100" pos:column="68"> <block pos:line="100" pos:column="69">{
			<comment type="line" pos:line="101" pos:column="25">// Prevent SCE_POV_STRINGEOL from leaking back to previous line</comment>
			<expr_stmt><expr><call><name><name pos:line="102" pos:column="25">sc</name><op:operator pos:line="102" pos:column="27">.</op:operator><name pos:line="102" pos:column="28">SetState</name></name><argument_list pos:line="102" pos:column="36">(<argument><expr><name pos:line="102" pos:column="37">SCE_POV_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="105" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><name><name pos:line="106" pos:column="21">sc</name><op:operator pos:line="106" pos:column="23">.</op:operator><name pos:line="106" pos:column="24">state</name></name> <op:operator pos:line="106" pos:column="30">==</op:operator> <name pos:line="106" pos:column="33">SCE_POV_OPERATOR</name></expr>)</condition><then pos:line="106" pos:column="50"> <block pos:line="106" pos:column="51">{
			<expr_stmt><expr><call><name><name pos:line="107" pos:column="25">sc</name><op:operator pos:line="107" pos:column="27">.</op:operator><name pos:line="107" pos:column="28">SetState</name></name><argument_list pos:line="107" pos:column="36">(<argument><expr><name pos:line="107" pos:column="37">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="108" pos:column="19">else <if pos:line="108" pos:column="24">if <condition pos:line="108" pos:column="27">(<expr><name><name pos:line="108" pos:column="28">sc</name><op:operator pos:line="108" pos:column="30">.</op:operator><name pos:line="108" pos:column="31">state</name></name> <op:operator pos:line="108" pos:column="37">==</op:operator> <name pos:line="108" pos:column="40">SCE_POV_NUMBER</name></expr>)</condition><then pos:line="108" pos:column="55"> <block pos:line="108" pos:column="56">{
			<comment type="line" pos:line="109" pos:column="25">// We stop the number definition on non-numerical non-dot non-eE non-sign char</comment>
			<if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><op:operator pos:line="110" pos:column="29">!</op:operator><call><name pos:line="110" pos:column="30">IsANumberChar</name><argument_list pos:line="110" pos:column="43">(<argument><expr><name><name pos:line="110" pos:column="44">sc</name><op:operator pos:line="110" pos:column="46">.</op:operator><name pos:line="110" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="51"> <block pos:line="110" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="111" pos:column="33">sc</name><op:operator pos:line="111" pos:column="35">.</op:operator><name pos:line="111" pos:column="36">SetState</name></name><argument_list pos:line="111" pos:column="44">(<argument><expr><name pos:line="111" pos:column="45">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="113" pos:column="19">else <if pos:line="113" pos:column="24">if <condition pos:line="113" pos:column="27">(<expr><name><name pos:line="113" pos:column="28">sc</name><op:operator pos:line="113" pos:column="30">.</op:operator><name pos:line="113" pos:column="31">state</name></name> <op:operator pos:line="113" pos:column="37">==</op:operator> <name pos:line="113" pos:column="40">SCE_POV_IDENTIFIER</name></expr>)</condition><then pos:line="113" pos:column="59"> <block pos:line="113" pos:column="60">{
			<if pos:line="114" pos:column="25">if <condition pos:line="114" pos:column="28">(<expr><op:operator pos:line="114" pos:column="29">!</op:operator><call><name pos:line="114" pos:column="30">IsAWordChar</name><argument_list pos:line="114" pos:column="41">(<argument><expr><name><name pos:line="114" pos:column="42">sc</name><op:operator pos:line="114" pos:column="44">.</op:operator><name pos:line="114" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="114" pos:column="49"> <block pos:line="114" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="115" pos:column="33">char</name></type> <name><name pos:line="115" pos:column="38">s</name><index pos:line="115" pos:column="39">[<expr><lit:literal type="number" pos:line="115" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="116" pos:column="33">sc</name><op:operator pos:line="116" pos:column="35">.</op:operator><name pos:line="116" pos:column="36">GetCurrent</name></name><argument_list pos:line="116" pos:column="46">(<argument><expr><name pos:line="116" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="116" pos:column="50">sizeof<argument_list pos:line="116" pos:column="56">(<argument><expr><name pos:line="116" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="117" pos:column="33">if <condition pos:line="117" pos:column="36">(<expr><call><name><name pos:line="117" pos:column="37">keywords2</name><op:operator pos:line="117" pos:column="46">.</op:operator><name pos:line="117" pos:column="47">InList</name></name><argument_list pos:line="117" pos:column="53">(<argument><expr><name pos:line="117" pos:column="54">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="117" pos:column="57"> <block pos:line="117" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="118" pos:column="41">sc</name><op:operator pos:line="118" pos:column="43">.</op:operator><name pos:line="118" pos:column="44">ChangeState</name></name><argument_list pos:line="118" pos:column="55">(<argument><expr><name pos:line="118" pos:column="56">SCE_POV_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="119" pos:column="35">else <if pos:line="119" pos:column="40">if <condition pos:line="119" pos:column="43">(<expr><call><name><name pos:line="119" pos:column="44">keywords3</name><op:operator pos:line="119" pos:column="53">.</op:operator><name pos:line="119" pos:column="54">InList</name></name><argument_list pos:line="119" pos:column="60">(<argument><expr><name pos:line="119" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="119" pos:column="64"> <block pos:line="119" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="120" pos:column="41">sc</name><op:operator pos:line="120" pos:column="43">.</op:operator><name pos:line="120" pos:column="44">ChangeState</name></name><argument_list pos:line="120" pos:column="55">(<argument><expr><name pos:line="120" pos:column="56">SCE_POV_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="121" pos:column="35">else <if pos:line="121" pos:column="40">if <condition pos:line="121" pos:column="43">(<expr><call><name><name pos:line="121" pos:column="44">keywords4</name><op:operator pos:line="121" pos:column="53">.</op:operator><name pos:line="121" pos:column="54">InList</name></name><argument_list pos:line="121" pos:column="60">(<argument><expr><name pos:line="121" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="121" pos:column="64"> <block pos:line="121" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="122" pos:column="41">sc</name><op:operator pos:line="122" pos:column="43">.</op:operator><name pos:line="122" pos:column="44">ChangeState</name></name><argument_list pos:line="122" pos:column="55">(<argument><expr><name pos:line="122" pos:column="56">SCE_POV_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="123" pos:column="35">else <if pos:line="123" pos:column="40">if <condition pos:line="123" pos:column="43">(<expr><call><name><name pos:line="123" pos:column="44">keywords5</name><op:operator pos:line="123" pos:column="53">.</op:operator><name pos:line="123" pos:column="54">InList</name></name><argument_list pos:line="123" pos:column="60">(<argument><expr><name pos:line="123" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="123" pos:column="64"> <block pos:line="123" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="124" pos:column="41">sc</name><op:operator pos:line="124" pos:column="43">.</op:operator><name pos:line="124" pos:column="44">ChangeState</name></name><argument_list pos:line="124" pos:column="55">(<argument><expr><name pos:line="124" pos:column="56">SCE_POV_WORD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="125" pos:column="35">else <if pos:line="125" pos:column="40">if <condition pos:line="125" pos:column="43">(<expr><call><name><name pos:line="125" pos:column="44">keywords6</name><op:operator pos:line="125" pos:column="53">.</op:operator><name pos:line="125" pos:column="54">InList</name></name><argument_list pos:line="125" pos:column="60">(<argument><expr><name pos:line="125" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="125" pos:column="64"> <block pos:line="125" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="126" pos:column="41">sc</name><op:operator pos:line="126" pos:column="43">.</op:operator><name pos:line="126" pos:column="44">ChangeState</name></name><argument_list pos:line="126" pos:column="55">(<argument><expr><name pos:line="126" pos:column="56">SCE_POV_WORD6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="127" pos:column="35">else <if pos:line="127" pos:column="40">if <condition pos:line="127" pos:column="43">(<expr><call><name><name pos:line="127" pos:column="44">keywords7</name><op:operator pos:line="127" pos:column="53">.</op:operator><name pos:line="127" pos:column="54">InList</name></name><argument_list pos:line="127" pos:column="60">(<argument><expr><name pos:line="127" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="127" pos:column="64"> <block pos:line="127" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="128" pos:column="41">sc</name><op:operator pos:line="128" pos:column="43">.</op:operator><name pos:line="128" pos:column="44">ChangeState</name></name><argument_list pos:line="128" pos:column="55">(<argument><expr><name pos:line="128" pos:column="56">SCE_POV_WORD7</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="129" pos:column="35">else <if pos:line="129" pos:column="40">if <condition pos:line="129" pos:column="43">(<expr><call><name><name pos:line="129" pos:column="44">keywords8</name><op:operator pos:line="129" pos:column="53">.</op:operator><name pos:line="129" pos:column="54">InList</name></name><argument_list pos:line="129" pos:column="60">(<argument><expr><name pos:line="129" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="129" pos:column="64"> <block pos:line="129" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="130" pos:column="41">sc</name><op:operator pos:line="130" pos:column="43">.</op:operator><name pos:line="130" pos:column="44">ChangeState</name></name><argument_list pos:line="130" pos:column="55">(<argument><expr><name pos:line="130" pos:column="56">SCE_POV_WORD8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="132" pos:column="33">sc</name><op:operator pos:line="132" pos:column="35">.</op:operator><name pos:line="132" pos:column="36">SetState</name></name><argument_list pos:line="132" pos:column="44">(<argument><expr><name pos:line="132" pos:column="45">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="134" pos:column="19">else <if pos:line="134" pos:column="24">if <condition pos:line="134" pos:column="27">(<expr><name><name pos:line="134" pos:column="28">sc</name><op:operator pos:line="134" pos:column="30">.</op:operator><name pos:line="134" pos:column="31">state</name></name> <op:operator pos:line="134" pos:column="37">==</op:operator> <name pos:line="134" pos:column="40">SCE_POV_DIRECTIVE</name></expr>)</condition><then pos:line="134" pos:column="58"> <block pos:line="134" pos:column="59">{
			<if pos:line="135" pos:column="25">if <condition pos:line="135" pos:column="28">(<expr><op:operator pos:line="135" pos:column="29">!</op:operator><call><name pos:line="135" pos:column="30">IsAWordChar</name><argument_list pos:line="135" pos:column="41">(<argument><expr><name><name pos:line="135" pos:column="42">sc</name><op:operator pos:line="135" pos:column="44">.</op:operator><name pos:line="135" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="135" pos:column="49"> <block pos:line="135" pos:column="50">{
				<decl_stmt><decl><type><name pos:line="136" pos:column="33">char</name></type> <name><name pos:line="136" pos:column="38">s</name><index pos:line="136" pos:column="39">[<expr><lit:literal type="number" pos:line="136" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="137" pos:column="33">char</name> <type:modifier pos:line="137" pos:column="38">*</type:modifier></type><name pos:line="137" pos:column="39">p</name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="138" pos:column="33">sc</name><op:operator pos:line="138" pos:column="35">.</op:operator><name pos:line="138" pos:column="36">GetCurrent</name></name><argument_list pos:line="138" pos:column="46">(<argument><expr><name pos:line="138" pos:column="47">s</name></expr></argument>, <argument><expr><sizeof pos:line="138" pos:column="50">sizeof<argument_list pos:line="138" pos:column="56">(<argument><expr><name pos:line="138" pos:column="57">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="139" pos:column="33">p</name> <op:operator pos:line="139" pos:column="35">=</op:operator> <name pos:line="139" pos:column="37">s</name></expr>;</expr_stmt>
				<comment type="line" pos:line="140" pos:column="33">// Skip # and whitespace between # and directive word</comment>
				<do pos:line="141" pos:column="33">do <block pos:line="141" pos:column="36">{
					<expr_stmt><expr><name pos:line="142" pos:column="41">p</name><op:operator pos:line="142" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block> while <condition pos:line="143" pos:column="41">(<expr><op:operator pos:line="143" pos:column="42">(</op:operator><op:operator pos:line="143" pos:column="43">*</op:operator><name pos:line="143" pos:column="44">p</name> <op:operator pos:line="143" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="143" pos:column="49">' '</lit:literal> <op:operator pos:line="143" pos:column="53">||</op:operator> <op:operator pos:line="143" pos:column="56">*</op:operator><name pos:line="143" pos:column="57">p</name> <op:operator pos:line="143" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="143" pos:column="62">'\t'</lit:literal><op:operator pos:line="143" pos:column="66">)</op:operator> <op:operator pos:line="143" pos:column="68">&amp;&amp;</op:operator> <op:operator pos:line="143" pos:column="71">*</op:operator><name pos:line="143" pos:column="72">p</name> <op:operator pos:line="143" pos:column="74">!=</op:operator> <lit:literal type="char" pos:line="143" pos:column="77">'\0'</lit:literal></expr>)</condition>;</do>
				<if pos:line="144" pos:column="33">if <condition pos:line="144" pos:column="36">(<expr><op:operator pos:line="144" pos:column="37">!</op:operator><call><name><name pos:line="144" pos:column="38">keywords1</name><op:operator pos:line="144" pos:column="47">.</op:operator><name pos:line="144" pos:column="48">InList</name></name><argument_list pos:line="144" pos:column="54">(<argument><expr><name pos:line="144" pos:column="55">p</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="144" pos:column="58"> <block pos:line="144" pos:column="59">{
					<expr_stmt><expr><call><name><name pos:line="145" pos:column="41">sc</name><op:operator pos:line="145" pos:column="43">.</op:operator><name pos:line="145" pos:column="44">ChangeState</name></name><argument_list pos:line="145" pos:column="55">(<argument><expr><name pos:line="145" pos:column="56">SCE_POV_BADDIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="147" pos:column="33">sc</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">SetState</name></name><argument_list pos:line="147" pos:column="44">(<argument><expr><name pos:line="147" pos:column="45">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="149" pos:column="19">else <if pos:line="149" pos:column="24">if <condition pos:line="149" pos:column="27">(<expr><name><name pos:line="149" pos:column="28">sc</name><op:operator pos:line="149" pos:column="30">.</op:operator><name pos:line="149" pos:column="31">state</name></name> <op:operator pos:line="149" pos:column="37">==</op:operator> <name pos:line="149" pos:column="40">SCE_POV_COMMENT</name></expr>)</condition><then pos:line="149" pos:column="56"> <block pos:line="149" pos:column="57">{
			<if pos:line="150" pos:column="25">if <condition pos:line="150" pos:column="28">(<expr><call><name><name pos:line="150" pos:column="29">sc</name><op:operator pos:line="150" pos:column="31">.</op:operator><name pos:line="150" pos:column="32">Match</name></name><argument_list pos:line="150" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="150" pos:column="38">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="150" pos:column="43">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="150" pos:column="48"> <block pos:line="150" pos:column="49">{
				<expr_stmt><expr><name pos:line="151" pos:column="33">blockCommentLevel</name><op:operator pos:line="151" pos:column="50">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="152" pos:column="33">sc</name><op:operator pos:line="152" pos:column="35">.</op:operator><name pos:line="152" pos:column="36">Forward</name></name><argument_list pos:line="152" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="153" pos:column="27">else <if pos:line="153" pos:column="32">if <condition pos:line="153" pos:column="35">(<expr><call><name><name pos:line="153" pos:column="36">sc</name><op:operator pos:line="153" pos:column="38">.</op:operator><name pos:line="153" pos:column="39">Match</name></name><argument_list pos:line="153" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="153" pos:column="45">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="153" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="153" pos:column="55">&amp;&amp;</op:operator> <name pos:line="153" pos:column="58">blockCommentLevel</name> <op:operator pos:line="153" pos:column="76">&gt;</op:operator> <lit:literal type="number" pos:line="153" pos:column="78">0</lit:literal></expr>)</condition><then pos:line="153" pos:column="80"> <block pos:line="153" pos:column="81">{
				<expr_stmt><expr><name pos:line="154" pos:column="33">blockCommentLevel</name><op:operator pos:line="154" pos:column="50">--</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="155" pos:column="33">sc</name><op:operator pos:line="155" pos:column="35">.</op:operator><name pos:line="155" pos:column="36">Forward</name></name><argument_list pos:line="155" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="156" pos:column="33">if <condition pos:line="156" pos:column="36">(<expr><name pos:line="156" pos:column="37">blockCommentLevel</name> <op:operator pos:line="156" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="156" pos:column="58">0</lit:literal></expr>)</condition><then pos:line="156" pos:column="60"> <block pos:line="156" pos:column="61">{
					<expr_stmt><expr><call><name><name pos:line="157" pos:column="41">sc</name><op:operator pos:line="157" pos:column="43">.</op:operator><name pos:line="157" pos:column="44">ForwardSetState</name></name><argument_list pos:line="157" pos:column="59">(<argument><expr><name pos:line="157" pos:column="60">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="160" pos:column="19">else <if pos:line="160" pos:column="24">if <condition pos:line="160" pos:column="27">(<expr><name><name pos:line="160" pos:column="28">sc</name><op:operator pos:line="160" pos:column="30">.</op:operator><name pos:line="160" pos:column="31">state</name></name> <op:operator pos:line="160" pos:column="37">==</op:operator> <name pos:line="160" pos:column="40">SCE_POV_COMMENTLINE</name></expr>)</condition><then pos:line="160" pos:column="60"> <block pos:line="160" pos:column="61">{
			<if pos:line="161" pos:column="25">if <condition pos:line="161" pos:column="28">(<expr><name><name pos:line="161" pos:column="29">sc</name><op:operator pos:line="161" pos:column="31">.</op:operator><name pos:line="161" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="161" pos:column="42"> <block pos:line="161" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="162" pos:column="33">sc</name><op:operator pos:line="162" pos:column="35">.</op:operator><name pos:line="162" pos:column="36">ForwardSetState</name></name><argument_list pos:line="162" pos:column="51">(<argument><expr><name pos:line="162" pos:column="52">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="164" pos:column="19">else <if pos:line="164" pos:column="24">if <condition pos:line="164" pos:column="27">(<expr><name><name pos:line="164" pos:column="28">sc</name><op:operator pos:line="164" pos:column="30">.</op:operator><name pos:line="164" pos:column="31">state</name></name> <op:operator pos:line="164" pos:column="37">==</op:operator> <name pos:line="164" pos:column="40">SCE_POV_STRING</name></expr>)</condition><then pos:line="164" pos:column="55"> <block pos:line="164" pos:column="56">{
			<if pos:line="165" pos:column="25">if <condition pos:line="165" pos:column="28">(<expr><name><name pos:line="165" pos:column="29">sc</name><op:operator pos:line="165" pos:column="31">.</op:operator><name pos:line="165" pos:column="32">ch</name></name> <op:operator pos:line="165" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="165" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="165" pos:column="43"> <block pos:line="165" pos:column="44">{
				<expr_stmt><expr><name pos:line="166" pos:column="33">stringLen</name><op:operator pos:line="166" pos:column="42">++</op:operator></expr>;</expr_stmt>
				<if pos:line="167" pos:column="33">if <condition pos:line="167" pos:column="36">(<expr><call><name pos:line="167" pos:column="37">strchr</name><argument_list pos:line="167" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="167" pos:column="44">"abfnrtuv0'\""</lit:literal></expr></argument>, <argument><expr><name><name pos:line="167" pos:column="60">sc</name><op:operator pos:line="167" pos:column="62">.</op:operator><name pos:line="167" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="167" pos:column="71"> <block pos:line="167" pos:column="72">{
					<comment type="line" pos:line="168" pos:column="41">// Compound characters are counted as one.</comment>
					<comment type="line" pos:line="169" pos:column="41">// Note: for Unicode chars \u, we shouldn't count the next 4 digits...</comment>
					<expr_stmt><expr><call><name><name pos:line="170" pos:column="41">sc</name><op:operator pos:line="170" pos:column="43">.</op:operator><name pos:line="170" pos:column="44">Forward</name></name><argument_list pos:line="170" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="172" pos:column="27">else <if pos:line="172" pos:column="32">if <condition pos:line="172" pos:column="35">(<expr><name><name pos:line="172" pos:column="36">sc</name><op:operator pos:line="172" pos:column="38">.</op:operator><name pos:line="172" pos:column="39">ch</name></name> <op:operator pos:line="172" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="172" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="172" pos:column="50"> <block pos:line="172" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="173" pos:column="33">sc</name><op:operator pos:line="173" pos:column="35">.</op:operator><name pos:line="173" pos:column="36">ForwardSetState</name></name><argument_list pos:line="173" pos:column="51">(<argument><expr><name pos:line="173" pos:column="52">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="174" pos:column="27">else <if pos:line="174" pos:column="32">if <condition pos:line="174" pos:column="35">(<expr><name><name pos:line="174" pos:column="36">sc</name><op:operator pos:line="174" pos:column="38">.</op:operator><name pos:line="174" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="174" pos:column="49"> <block pos:line="174" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="175" pos:column="33">sc</name><op:operator pos:line="175" pos:column="35">.</op:operator><name pos:line="175" pos:column="36">ChangeState</name></name><argument_list pos:line="175" pos:column="47">(<argument><expr><name pos:line="175" pos:column="48">SCE_POV_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="176" pos:column="33">sc</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">ForwardSetState</name></name><argument_list pos:line="176" pos:column="51">(<argument><expr><name pos:line="176" pos:column="52">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="177" pos:column="27">else <block pos:line="177" pos:column="32">{
				<expr_stmt><expr><name pos:line="178" pos:column="33">stringLen</name><op:operator pos:line="178" pos:column="42">++</op:operator></expr>;</expr_stmt>
			}</block></else></if></else></if></else></if>
			<if pos:line="180" pos:column="25">if <condition pos:line="180" pos:column="28">(<expr><name pos:line="180" pos:column="29">stringLen</name> <op:operator pos:line="180" pos:column="39">&gt;</op:operator> <lit:literal type="number" pos:line="180" pos:column="41">256</lit:literal></expr>)</condition><then pos:line="180" pos:column="45"> <block pos:line="180" pos:column="46">{
				<comment type="line" pos:line="181" pos:column="33">// Strings are limited to 256 chars</comment>
				<expr_stmt><expr><call><name><name pos:line="182" pos:column="33">sc</name><op:operator pos:line="182" pos:column="35">.</op:operator><name pos:line="182" pos:column="36">SetState</name></name><argument_list pos:line="182" pos:column="44">(<argument><expr><name pos:line="182" pos:column="45">SCE_POV_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="184" pos:column="19">else <if pos:line="184" pos:column="24">if <condition pos:line="184" pos:column="27">(<expr><name><name pos:line="184" pos:column="28">sc</name><op:operator pos:line="184" pos:column="30">.</op:operator><name pos:line="184" pos:column="31">state</name></name> <op:operator pos:line="184" pos:column="37">==</op:operator> <name pos:line="184" pos:column="40">SCE_POV_STRINGEOL</name></expr>)</condition><then pos:line="184" pos:column="58"> <block pos:line="184" pos:column="59">{
			<if pos:line="185" pos:column="25">if <condition pos:line="185" pos:column="28">(<expr><name><name pos:line="185" pos:column="29">sc</name><op:operator pos:line="185" pos:column="31">.</op:operator><name pos:line="185" pos:column="32">ch</name></name> <op:operator pos:line="185" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="185" pos:column="38">'\\'</lit:literal></expr>)</condition><then pos:line="185" pos:column="43"> <block pos:line="185" pos:column="44">{
				<if pos:line="186" pos:column="33">if <condition pos:line="186" pos:column="36">(<expr><name><name pos:line="186" pos:column="37">sc</name><op:operator pos:line="186" pos:column="39">.</op:operator><name pos:line="186" pos:column="40">chNext</name></name> <op:operator pos:line="186" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="50">'\"'</lit:literal> <op:operator pos:line="186" pos:column="55">||</op:operator> <name><name pos:line="186" pos:column="58">sc</name><op:operator pos:line="186" pos:column="60">.</op:operator><name pos:line="186" pos:column="61">chNext</name></name> <op:operator pos:line="186" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="71">'\\'</lit:literal></expr>)</condition><then pos:line="186" pos:column="76"> <block pos:line="186" pos:column="77">{
					<expr_stmt><expr><call><name><name pos:line="187" pos:column="41">sc</name><op:operator pos:line="187" pos:column="43">.</op:operator><name pos:line="187" pos:column="44">Forward</name></name><argument_list pos:line="187" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="189" pos:column="27">else <if pos:line="189" pos:column="32">if <condition pos:line="189" pos:column="35">(<expr><name><name pos:line="189" pos:column="36">sc</name><op:operator pos:line="189" pos:column="38">.</op:operator><name pos:line="189" pos:column="39">ch</name></name> <op:operator pos:line="189" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="189" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="189" pos:column="50"> <block pos:line="189" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="190" pos:column="33">sc</name><op:operator pos:line="190" pos:column="35">.</op:operator><name pos:line="190" pos:column="36">ForwardSetState</name></name><argument_list pos:line="190" pos:column="51">(<argument><expr><name pos:line="190" pos:column="52">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="191" pos:column="27">else <if pos:line="191" pos:column="32">if <condition pos:line="191" pos:column="35">(<expr><name><name pos:line="191" pos:column="36">sc</name><op:operator pos:line="191" pos:column="38">.</op:operator><name pos:line="191" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="191" pos:column="49"> <block pos:line="191" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="192" pos:column="33">sc</name><op:operator pos:line="192" pos:column="35">.</op:operator><name pos:line="192" pos:column="36">ForwardSetState</name></name><argument_list pos:line="192" pos:column="51">(<argument><expr><name pos:line="192" pos:column="52">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="196" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="197" pos:column="17">if <condition pos:line="197" pos:column="20">(<expr><name><name pos:line="197" pos:column="21">sc</name><op:operator pos:line="197" pos:column="23">.</op:operator><name pos:line="197" pos:column="24">state</name></name> <op:operator pos:line="197" pos:column="30">==</op:operator> <name pos:line="197" pos:column="33">SCE_POV_DEFAULT</name></expr>)</condition><then pos:line="197" pos:column="49"> <block pos:line="197" pos:column="50">{
			<if pos:line="198" pos:column="25">if <condition pos:line="198" pos:column="28">(<expr><call><name pos:line="198" pos:column="29">IsADigit</name><argument_list pos:line="198" pos:column="37">(<argument><expr><name><name pos:line="198" pos:column="38">sc</name><op:operator pos:line="198" pos:column="40">.</op:operator><name pos:line="198" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="198" pos:column="45">||</op:operator> <op:operator pos:line="198" pos:column="48">(</op:operator><name><name pos:line="198" pos:column="49">sc</name><op:operator pos:line="198" pos:column="51">.</op:operator><name pos:line="198" pos:column="52">ch</name></name> <op:operator pos:line="198" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="198" pos:column="58">'.'</lit:literal> <op:operator pos:line="198" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="198" pos:column="65">IsADigit</name><argument_list pos:line="198" pos:column="73">(<argument><expr><name><name pos:line="198" pos:column="74">sc</name><op:operator pos:line="198" pos:column="76">.</op:operator><name pos:line="198" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="198" pos:column="84">)</op:operator></expr>)</condition><then pos:line="198" pos:column="86"> <block pos:line="198" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="199" pos:column="33">sc</name><op:operator pos:line="199" pos:column="35">.</op:operator><name pos:line="199" pos:column="36">SetState</name></name><argument_list pos:line="199" pos:column="44">(<argument><expr><name pos:line="199" pos:column="45">SCE_POV_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="200" pos:column="27">else <if pos:line="200" pos:column="32">if <condition pos:line="200" pos:column="35">(<expr><call><name pos:line="200" pos:column="36">IsAWordStart</name><argument_list pos:line="200" pos:column="48">(<argument><expr><name><name pos:line="200" pos:column="49">sc</name><op:operator pos:line="200" pos:column="51">.</op:operator><name pos:line="200" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="200" pos:column="56"> <block pos:line="200" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="201" pos:column="33">sc</name><op:operator pos:line="201" pos:column="35">.</op:operator><name pos:line="201" pos:column="36">SetState</name></name><argument_list pos:line="201" pos:column="44">(<argument><expr><name pos:line="201" pos:column="45">SCE_POV_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="202" pos:column="27">else <if pos:line="202" pos:column="32">if <condition pos:line="202" pos:column="35">(<expr><call><name><name pos:line="202" pos:column="36">sc</name><op:operator pos:line="202" pos:column="38">.</op:operator><name pos:line="202" pos:column="39">Match</name></name><argument_list pos:line="202" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="202" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="202" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="202" pos:column="55"> <block pos:line="202" pos:column="56">{
				<expr_stmt><expr><name pos:line="203" pos:column="33">blockCommentLevel</name> <op:operator pos:line="203" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="203" pos:column="53">1</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="204" pos:column="33">sc</name><op:operator pos:line="204" pos:column="35">.</op:operator><name pos:line="204" pos:column="36">SetState</name></name><argument_list pos:line="204" pos:column="44">(<argument><expr><name pos:line="204" pos:column="45">SCE_POV_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="205" pos:column="33">sc</name><op:operator pos:line="205" pos:column="35">.</op:operator><name pos:line="205" pos:column="36">Forward</name></name><argument_list pos:line="205" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="205" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> <else pos:line="206" pos:column="27">else <if pos:line="206" pos:column="32">if <condition pos:line="206" pos:column="35">(<expr><call><name><name pos:line="206" pos:column="36">sc</name><op:operator pos:line="206" pos:column="38">.</op:operator><name pos:line="206" pos:column="39">Match</name></name><argument_list pos:line="206" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="206" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="206" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="206" pos:column="55"> <block pos:line="206" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="207" pos:column="33">sc</name><op:operator pos:line="207" pos:column="35">.</op:operator><name pos:line="207" pos:column="36">SetState</name></name><argument_list pos:line="207" pos:column="44">(<argument><expr><name pos:line="207" pos:column="45">SCE_POV_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="208" pos:column="27">else <if pos:line="208" pos:column="32">if <condition pos:line="208" pos:column="35">(<expr><name><name pos:line="208" pos:column="36">sc</name><op:operator pos:line="208" pos:column="38">.</op:operator><name pos:line="208" pos:column="39">ch</name></name> <op:operator pos:line="208" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="208" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="208" pos:column="50"> <block pos:line="208" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="209" pos:column="33">sc</name><op:operator pos:line="209" pos:column="35">.</op:operator><name pos:line="209" pos:column="36">SetState</name></name><argument_list pos:line="209" pos:column="44">(<argument><expr><name pos:line="209" pos:column="45">SCE_POV_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="210" pos:column="33">stringLen</name> <op:operator pos:line="210" pos:column="43">=</op:operator> <lit:literal type="number" pos:line="210" pos:column="45">0</lit:literal></expr>;</expr_stmt>
			}</block></then> <else pos:line="211" pos:column="27">else <if pos:line="211" pos:column="32">if <condition pos:line="211" pos:column="35">(<expr><name><name pos:line="211" pos:column="36">sc</name><op:operator pos:line="211" pos:column="38">.</op:operator><name pos:line="211" pos:column="39">ch</name></name> <op:operator pos:line="211" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="211" pos:column="45">'#'</lit:literal></expr>)</condition><then pos:line="211" pos:column="49"> <block pos:line="211" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="212" pos:column="33">sc</name><op:operator pos:line="212" pos:column="35">.</op:operator><name pos:line="212" pos:column="36">SetState</name></name><argument_list pos:line="212" pos:column="44">(<argument><expr><name pos:line="212" pos:column="45">SCE_POV_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="213" pos:column="33">// Skip whitespace between # and directive word</comment>
				<do pos:line="214" pos:column="33">do <block pos:line="214" pos:column="36">{
					<expr_stmt><expr><call><name><name pos:line="215" pos:column="41">sc</name><op:operator pos:line="215" pos:column="43">.</op:operator><name pos:line="215" pos:column="44">Forward</name></name><argument_list pos:line="215" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="216" pos:column="41">(<expr><op:operator pos:line="216" pos:column="42">(</op:operator><name><name pos:line="216" pos:column="43">sc</name><op:operator pos:line="216" pos:column="45">.</op:operator><name pos:line="216" pos:column="46">ch</name></name> <op:operator pos:line="216" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="216" pos:column="52">' '</lit:literal> <op:operator pos:line="216" pos:column="56">||</op:operator> <name><name pos:line="216" pos:column="59">sc</name><op:operator pos:line="216" pos:column="61">.</op:operator><name pos:line="216" pos:column="62">ch</name></name> <op:operator pos:line="216" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="216" pos:column="68">'\t'</lit:literal><op:operator pos:line="216" pos:column="72">)</op:operator> <op:operator pos:line="216" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="216" pos:column="77">sc</name><op:operator pos:line="216" pos:column="79">.</op:operator><name pos:line="216" pos:column="80">More</name></name><argument_list pos:line="216" pos:column="84">()</argument_list></call></expr>)</condition>;</do>
				<if pos:line="217" pos:column="33">if <condition pos:line="217" pos:column="36">(<expr><name><name pos:line="217" pos:column="37">sc</name><op:operator pos:line="217" pos:column="39">.</op:operator><name pos:line="217" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="217" pos:column="50"> <block pos:line="217" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="218" pos:column="41">sc</name><op:operator pos:line="218" pos:column="43">.</op:operator><name pos:line="218" pos:column="44">SetState</name></name><argument_list pos:line="218" pos:column="52">(<argument><expr><name pos:line="218" pos:column="53">SCE_POV_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="220" pos:column="27">else <if pos:line="220" pos:column="32">if <condition pos:line="220" pos:column="35">(<expr><call><name pos:line="220" pos:column="36">isoperator</name><argument_list pos:line="220" pos:column="46">(<argument><expr><call><name><name pos:line="220" pos:column="47">static_cast</name><argument_list pos:line="220" pos:column="58">&lt;<argument><expr><name pos:line="220" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="220" pos:column="64">(<argument><expr><name><name pos:line="220" pos:column="65">sc</name><op:operator pos:line="220" pos:column="67">.</op:operator><name pos:line="220" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="220" pos:column="73"> <block pos:line="220" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="221" pos:column="33">sc</name><op:operator pos:line="221" pos:column="35">.</op:operator><name pos:line="221" pos:column="36">SetState</name></name><argument_list pos:line="221" pos:column="44">(<argument><expr><name pos:line="221" pos:column="45">SCE_POV_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="225" pos:column="9">sc</name><op:operator pos:line="225" pos:column="11">.</op:operator><name pos:line="225" pos:column="12">Complete</name></name><argument_list pos:line="225" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="228" pos:column="1">static</specifier> <name pos:line="228" pos:column="8">void</name></type> <name pos:line="228" pos:column="13">FoldPovDoc</name><parameter_list pos:line="228" pos:column="23">(
	<param><decl><type><name pos:line="229" pos:column="9">unsigned</name> <name pos:line="229" pos:column="18">int</name></type> <name pos:line="229" pos:column="22">startPos</name></decl></param>,
	<param><decl><type><name pos:line="230" pos:column="9">int</name></type> <name pos:line="230" pos:column="13">length</name></decl></param>,
	<param><decl><type><name pos:line="231" pos:column="9">int</name></type> <name pos:line="231" pos:column="13">initStyle</name></decl></param>,
	<param><decl><type><name><name pos:line="232" pos:column="9">WordList</name> <type:modifier pos:line="232" pos:column="18">*</type:modifier><index pos:line="232" pos:column="19">[]</index></name></type></decl></param>,
	<param><decl><type><name pos:line="233" pos:column="9">Accessor</name> <type:modifier pos:line="233" pos:column="18">&amp;</type:modifier></type><name pos:line="233" pos:column="19">styler</name></decl></param>)</parameter_list> <block pos:line="233" pos:column="27">{

	<decl_stmt><decl><type><name pos:line="235" pos:column="9">bool</name></type> <name pos:line="235" pos:column="14">foldComment</name> <init pos:line="235" pos:column="26">= <expr><call><name><name pos:line="235" pos:column="28">styler</name><op:operator pos:line="235" pos:column="34">.</op:operator><name pos:line="235" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="235" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="235" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="235" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="235" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="236" pos:column="9">bool</name></type> <name pos:line="236" pos:column="14">foldDirective</name> <init pos:line="236" pos:column="28">= <expr><call><name><name pos:line="236" pos:column="30">styler</name><op:operator pos:line="236" pos:column="36">.</op:operator><name pos:line="236" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="236" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="236" pos:column="52">"fold.directive"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="236" pos:column="70">!=</op:operator> <lit:literal type="number" pos:line="236" pos:column="73">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="237" pos:column="9">bool</name></type> <name pos:line="237" pos:column="14">foldCompact</name> <init pos:line="237" pos:column="26">= <expr><call><name><name pos:line="237" pos:column="28">styler</name><op:operator pos:line="237" pos:column="34">.</op:operator><name pos:line="237" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="237" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="237" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="237" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="237" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="237" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="238" pos:column="9">unsigned</name> <name pos:line="238" pos:column="18">int</name></type> <name pos:line="238" pos:column="22">endPos</name> <init pos:line="238" pos:column="29">= <expr><name pos:line="238" pos:column="31">startPos</name> <op:operator pos:line="238" pos:column="40">+</op:operator> <name pos:line="238" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="239" pos:column="9">int</name></type> <name pos:line="239" pos:column="13">visibleChars</name> <init pos:line="239" pos:column="26">= <expr><lit:literal type="number" pos:line="239" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="240" pos:column="9">int</name></type> <name pos:line="240" pos:column="13">lineCurrent</name> <init pos:line="240" pos:column="25">= <expr><call><name><name pos:line="240" pos:column="27">styler</name><op:operator pos:line="240" pos:column="33">.</op:operator><name pos:line="240" pos:column="34">GetLine</name></name><argument_list pos:line="240" pos:column="41">(<argument><expr><name pos:line="240" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="241" pos:column="9">int</name></type> <name pos:line="241" pos:column="13">levelPrev</name> <init pos:line="241" pos:column="23">= <expr><call><name><name pos:line="241" pos:column="25">styler</name><op:operator pos:line="241" pos:column="31">.</op:operator><name pos:line="241" pos:column="32">LevelAt</name></name><argument_list pos:line="241" pos:column="39">(<argument><expr><name pos:line="241" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="241" pos:column="53">&amp;</op:operator> <name pos:line="241" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="242" pos:column="9">int</name></type> <name pos:line="242" pos:column="13">levelCurrent</name> <init pos:line="242" pos:column="26">= <expr><name pos:line="242" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="243" pos:column="9">char</name></type> <name pos:line="243" pos:column="14">chNext</name> <init pos:line="243" pos:column="21">= <expr><name><name pos:line="243" pos:column="23">styler</name><index pos:line="243" pos:column="29">[<expr><name pos:line="243" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="244" pos:column="9">int</name></type> <name pos:line="244" pos:column="13">styleNext</name> <init pos:line="244" pos:column="23">= <expr><call><name><name pos:line="244" pos:column="25">styler</name><op:operator pos:line="244" pos:column="31">.</op:operator><name pos:line="244" pos:column="32">StyleAt</name></name><argument_list pos:line="244" pos:column="39">(<argument><expr><name pos:line="244" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="245" pos:column="9">int</name></type> <name pos:line="245" pos:column="13">style</name> <init pos:line="245" pos:column="19">= <expr><name pos:line="245" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<for pos:line="246" pos:column="9">for (<init><decl><type><name pos:line="246" pos:column="14">unsigned</name> <name pos:line="246" pos:column="23">int</name></type> <name pos:line="246" pos:column="27">i</name> <init pos:line="246" pos:column="29">= <expr><name pos:line="246" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="246" pos:column="41">i</name> <op:operator pos:line="246" pos:column="43">&lt;</op:operator> <name pos:line="246" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="246" pos:column="53">i</name><op:operator pos:line="246" pos:column="54">++</op:operator></expr></incr>) <block pos:line="246" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="247" pos:column="17">char</name></type> <name pos:line="247" pos:column="22">ch</name> <init pos:line="247" pos:column="25">= <expr><name pos:line="247" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="248" pos:column="17">chNext</name> <op:operator pos:line="248" pos:column="24">=</op:operator> <call><name><name pos:line="248" pos:column="26">styler</name><op:operator pos:line="248" pos:column="32">.</op:operator><name pos:line="248" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="248" pos:column="46">(<argument><expr><name pos:line="248" pos:column="47">i</name> <op:operator pos:line="248" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="248" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="249" pos:column="17">int</name></type> <name pos:line="249" pos:column="21">stylePrev</name> <init pos:line="249" pos:column="31">= <expr><name pos:line="249" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="250" pos:column="17">style</name> <op:operator pos:line="250" pos:column="23">=</op:operator> <name pos:line="250" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="251" pos:column="17">styleNext</name> <op:operator pos:line="251" pos:column="27">=</op:operator> <call><name><name pos:line="251" pos:column="29">styler</name><op:operator pos:line="251" pos:column="35">.</op:operator><name pos:line="251" pos:column="36">StyleAt</name></name><argument_list pos:line="251" pos:column="43">(<argument><expr><name pos:line="251" pos:column="44">i</name> <op:operator pos:line="251" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="251" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="252" pos:column="17">bool</name></type> <name pos:line="252" pos:column="22">atEOL</name> <init pos:line="252" pos:column="28">= <expr><op:operator pos:line="252" pos:column="30">(</op:operator><name pos:line="252" pos:column="31">ch</name> <op:operator pos:line="252" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="252" pos:column="37">'\r'</lit:literal> <op:operator pos:line="252" pos:column="42">&amp;&amp;</op:operator> <name pos:line="252" pos:column="45">chNext</name> <op:operator pos:line="252" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="252" pos:column="55">'\n'</lit:literal><op:operator pos:line="252" pos:column="59">)</op:operator> <op:operator pos:line="252" pos:column="61">||</op:operator> <op:operator pos:line="252" pos:column="64">(</op:operator><name pos:line="252" pos:column="65">ch</name> <op:operator pos:line="252" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="252" pos:column="71">'\n'</lit:literal><op:operator pos:line="252" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="253" pos:column="17">if <condition pos:line="253" pos:column="20">(<expr><name pos:line="253" pos:column="21">foldComment</name> <op:operator pos:line="253" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="253" pos:column="36">(</op:operator><name pos:line="253" pos:column="37">style</name> <op:operator pos:line="253" pos:column="43">==</op:operator> <name pos:line="253" pos:column="46">SCE_POV_COMMENT</name><op:operator pos:line="253" pos:column="61">)</op:operator></expr>)</condition><then pos:line="253" pos:column="63"> <block pos:line="253" pos:column="64">{
			<if pos:line="254" pos:column="25">if <condition pos:line="254" pos:column="28">(<expr><name pos:line="254" pos:column="29">stylePrev</name> <op:operator pos:line="254" pos:column="39">!=</op:operator> <name pos:line="254" pos:column="42">SCE_POV_COMMENT</name></expr>)</condition><then pos:line="254" pos:column="58"> <block pos:line="254" pos:column="59">{
				<expr_stmt><expr><name pos:line="255" pos:column="33">levelCurrent</name><op:operator pos:line="255" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="256" pos:column="27">else <if pos:line="256" pos:column="32">if <condition pos:line="256" pos:column="35">(<expr><op:operator pos:line="256" pos:column="36">(</op:operator><name pos:line="256" pos:column="37">styleNext</name> <op:operator pos:line="256" pos:column="47">!=</op:operator> <name pos:line="256" pos:column="50">SCE_POV_COMMENT</name><op:operator pos:line="256" pos:column="65">)</op:operator> <op:operator pos:line="256" pos:column="67">&amp;&amp;</op:operator> <op:operator pos:line="256" pos:column="70">!</op:operator><name pos:line="256" pos:column="71">atEOL</name></expr>)</condition><then pos:line="256" pos:column="77"> <block pos:line="256" pos:column="78">{
				<comment type="line" pos:line="257" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="258" pos:column="33">levelCurrent</name><op:operator pos:line="258" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="261" pos:column="17">if <condition pos:line="261" pos:column="20">(<expr><name pos:line="261" pos:column="21">foldComment</name> <op:operator pos:line="261" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="261" pos:column="36">(</op:operator><name pos:line="261" pos:column="37">style</name> <op:operator pos:line="261" pos:column="43">==</op:operator> <name pos:line="261" pos:column="46">SCE_POV_COMMENTLINE</name><op:operator pos:line="261" pos:column="65">)</op:operator></expr>)</condition><then pos:line="261" pos:column="67"> <block pos:line="261" pos:column="68">{
			<if pos:line="262" pos:column="25">if <condition pos:line="262" pos:column="28">(<expr><op:operator pos:line="262" pos:column="29">(</op:operator><name pos:line="262" pos:column="30">ch</name> <op:operator pos:line="262" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="36">'/'</lit:literal><op:operator pos:line="262" pos:column="39">)</op:operator> <op:operator pos:line="262" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="262" pos:column="44">(</op:operator><name pos:line="262" pos:column="45">chNext</name> <op:operator pos:line="262" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="262" pos:column="55">'/'</lit:literal><op:operator pos:line="262" pos:column="58">)</op:operator></expr>)</condition><then pos:line="262" pos:column="60"> <block pos:line="262" pos:column="61">{
				<decl_stmt><decl><type><name pos:line="263" pos:column="33">char</name></type> <name pos:line="263" pos:column="38">chNext2</name> <init pos:line="263" pos:column="46">= <expr><call><name><name pos:line="263" pos:column="48">styler</name><op:operator pos:line="263" pos:column="54">.</op:operator><name pos:line="263" pos:column="55">SafeGetCharAt</name></name><argument_list pos:line="263" pos:column="68">(<argument><expr><name pos:line="263" pos:column="69">i</name> <op:operator pos:line="263" pos:column="71">+</op:operator> <lit:literal type="number" pos:line="263" pos:column="73">2</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="264" pos:column="33">if <condition pos:line="264" pos:column="36">(<expr><name pos:line="264" pos:column="37">chNext2</name> <op:operator pos:line="264" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="48">'{'</lit:literal></expr>)</condition><then pos:line="264" pos:column="52"> <block pos:line="264" pos:column="53">{
					<expr_stmt><expr><name pos:line="265" pos:column="41">levelCurrent</name><op:operator pos:line="265" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="266" pos:column="35">else <if pos:line="266" pos:column="40">if <condition pos:line="266" pos:column="43">(<expr><name pos:line="266" pos:column="44">chNext2</name> <op:operator pos:line="266" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="266" pos:column="55">'}'</lit:literal></expr>)</condition><then pos:line="266" pos:column="59"> <block pos:line="266" pos:column="60">{
					<expr_stmt><expr><name pos:line="267" pos:column="41">levelCurrent</name><op:operator pos:line="267" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="271" pos:column="17">if <condition pos:line="271" pos:column="20">(<expr><name pos:line="271" pos:column="21">foldDirective</name> <op:operator pos:line="271" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="271" pos:column="38">(</op:operator><name pos:line="271" pos:column="39">style</name> <op:operator pos:line="271" pos:column="45">==</op:operator> <name pos:line="271" pos:column="48">SCE_POV_DIRECTIVE</name><op:operator pos:line="271" pos:column="65">)</op:operator></expr>)</condition><then pos:line="271" pos:column="67"> <block pos:line="271" pos:column="68">{
			<if pos:line="272" pos:column="25">if <condition pos:line="272" pos:column="28">(<expr><name pos:line="272" pos:column="29">ch</name> <op:operator pos:line="272" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="35">'#'</lit:literal></expr>)</condition><then pos:line="272" pos:column="39"> <block pos:line="272" pos:column="40">{
				<decl_stmt><decl><type><name pos:line="273" pos:column="33">unsigned</name> <name pos:line="273" pos:column="42">int</name></type> <name pos:line="273" pos:column="46">j</name><init pos:line="273" pos:column="47">=<expr><name pos:line="273" pos:column="48">i</name><op:operator pos:line="273" pos:column="49">+</op:operator><lit:literal type="number" pos:line="273" pos:column="50">1</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="274" pos:column="33">while <condition pos:line="274" pos:column="39">(<expr><op:operator pos:line="274" pos:column="40">(</op:operator><name pos:line="274" pos:column="41">j</name><op:operator pos:line="274" pos:column="42">&lt;</op:operator><name pos:line="274" pos:column="43">endPos</name><op:operator pos:line="274" pos:column="49">)</op:operator> <op:operator pos:line="274" pos:column="51">&amp;&amp;</op:operator> <call><name pos:line="274" pos:column="54">IsASpaceOrTab</name><argument_list pos:line="274" pos:column="67">(<argument><expr><call><name><name pos:line="274" pos:column="68">styler</name><op:operator pos:line="274" pos:column="74">.</op:operator><name pos:line="274" pos:column="75">SafeGetCharAt</name></name><argument_list pos:line="274" pos:column="88">(<argument><expr><name pos:line="274" pos:column="89">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="274" pos:column="94">{
					<expr_stmt><expr><name pos:line="275" pos:column="41">j</name><op:operator pos:line="275" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if>
		}</block></then></if>
		<if pos:line="279" pos:column="17">if <condition pos:line="279" pos:column="20">(<expr><name pos:line="279" pos:column="21">style</name> <op:operator pos:line="279" pos:column="27">==</op:operator> <name pos:line="279" pos:column="30">SCE_POV_OPERATOR</name></expr>)</condition><then pos:line="279" pos:column="47"> <block pos:line="279" pos:column="48">{
			<if pos:line="280" pos:column="25">if <condition pos:line="280" pos:column="28">(<expr><name pos:line="280" pos:column="29">ch</name> <op:operator pos:line="280" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="280" pos:column="39"> <block pos:line="280" pos:column="40">{
				<expr_stmt><expr><name pos:line="281" pos:column="33">levelCurrent</name><op:operator pos:line="281" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="282" pos:column="27">else <if pos:line="282" pos:column="32">if <condition pos:line="282" pos:column="35">(<expr><name pos:line="282" pos:column="36">ch</name> <op:operator pos:line="282" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="282" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="282" pos:column="46"> <block pos:line="282" pos:column="47">{
				<expr_stmt><expr><name pos:line="283" pos:column="33">levelCurrent</name><op:operator pos:line="283" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="286" pos:column="17">if <condition pos:line="286" pos:column="20">(<expr><name pos:line="286" pos:column="21">atEOL</name></expr>)</condition><then pos:line="286" pos:column="27"> <block pos:line="286" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="287" pos:column="25">int</name></type> <name pos:line="287" pos:column="29">lev</name> <init pos:line="287" pos:column="33">= <expr><name pos:line="287" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="288" pos:column="25">if <condition pos:line="288" pos:column="28">(<expr><name pos:line="288" pos:column="29">visibleChars</name> <op:operator pos:line="288" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="288" pos:column="45">0</lit:literal> <op:operator pos:line="288" pos:column="47">&amp;&amp;</op:operator> <name pos:line="288" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="288" pos:column="62">
				<expr_stmt><expr><name pos:line="289" pos:column="33">lev</name> <op:operator pos:line="289" pos:column="37">|=</op:operator> <name pos:line="289" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="290" pos:column="25">if <condition pos:line="290" pos:column="28">(<expr><op:operator pos:line="290" pos:column="29">(</op:operator><name pos:line="290" pos:column="30">levelCurrent</name> <op:operator pos:line="290" pos:column="43">&gt;</op:operator> <name pos:line="290" pos:column="45">levelPrev</name><op:operator pos:line="290" pos:column="54">)</op:operator> <op:operator pos:line="290" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="290" pos:column="59">(</op:operator><name pos:line="290" pos:column="60">visibleChars</name> <op:operator pos:line="290" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="290" pos:column="75">0</lit:literal><op:operator pos:line="290" pos:column="76">)</op:operator></expr>)</condition><then pos:line="290" pos:column="78">
				<expr_stmt><expr><name pos:line="291" pos:column="33">lev</name> <op:operator pos:line="291" pos:column="37">|=</op:operator> <name pos:line="291" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="292" pos:column="25">if <condition pos:line="292" pos:column="28">(<expr><name pos:line="292" pos:column="29">lev</name> <op:operator pos:line="292" pos:column="33">!=</op:operator> <call><name><name pos:line="292" pos:column="36">styler</name><op:operator pos:line="292" pos:column="42">.</op:operator><name pos:line="292" pos:column="43">LevelAt</name></name><argument_list pos:line="292" pos:column="50">(<argument><expr><name pos:line="292" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="292" pos:column="64"> <block pos:line="292" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="293" pos:column="33">styler</name><op:operator pos:line="293" pos:column="39">.</op:operator><name pos:line="293" pos:column="40">SetLevel</name></name><argument_list pos:line="293" pos:column="48">(<argument><expr><name pos:line="293" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="293" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="295" pos:column="25">lineCurrent</name><op:operator pos:line="295" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="296" pos:column="25">levelPrev</name> <op:operator pos:line="296" pos:column="35">=</op:operator> <name pos:line="296" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="297" pos:column="25">visibleChars</name> <op:operator pos:line="297" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="297" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="299" pos:column="17">if <condition pos:line="299" pos:column="20">(<expr><op:operator pos:line="299" pos:column="21">!</op:operator><call><name pos:line="299" pos:column="22">isspacechar</name><argument_list pos:line="299" pos:column="33">(<argument><expr><name pos:line="299" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="299" pos:column="38">
			<expr_stmt><expr><name pos:line="300" pos:column="25">visibleChars</name><op:operator pos:line="300" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="302" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="303" pos:column="9">int</name></type> <name pos:line="303" pos:column="13">flagsNext</name> <init pos:line="303" pos:column="23">= <expr><call><name><name pos:line="303" pos:column="25">styler</name><op:operator pos:line="303" pos:column="31">.</op:operator><name pos:line="303" pos:column="32">LevelAt</name></name><argument_list pos:line="303" pos:column="39">(<argument><expr><name pos:line="303" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="303" pos:column="53">&amp;</op:operator> <op:operator pos:line="303" pos:column="55">~</op:operator><name pos:line="303" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="304" pos:column="9">styler</name><op:operator pos:line="304" pos:column="15">.</op:operator><name pos:line="304" pos:column="16">SetLevel</name></name><argument_list pos:line="304" pos:column="24">(<argument><expr><name pos:line="304" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="38">levelPrev</name> <op:operator pos:line="304" pos:column="48">|</op:operator> <name pos:line="304" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="307" pos:column="1">static</specifier> <specifier pos:line="307" pos:column="8">const</specifier> <name pos:line="307" pos:column="14">char</name> <type:modifier pos:line="307" pos:column="19">*</type:modifier> <specifier pos:line="307" pos:column="21">const</specifier></type> <name><name pos:line="307" pos:column="27">povWordLists</name><index pos:line="307" pos:column="39">[]</index></name> <init pos:line="307" pos:column="42">= <expr><block pos:line="307" pos:column="44">{
	<expr><lit:literal type="string" pos:line="308" pos:column="9">"Language directives"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="309" pos:column="9">"Objects &amp; CSG &amp; Appearance"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="310" pos:column="9">"Types &amp; Modifiers &amp; Items"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="311" pos:column="9">"Predefined Identifiers"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="312" pos:column="9">"Predefined Functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="313" pos:column="9">"User defined 1"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="314" pos:column="9">"User defined 2"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="315" pos:column="9">"User defined 3"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="316" pos:column="9">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="319" pos:column="1">LexerModule</name></type> <name pos:line="319" pos:column="13">lmPOV</name><argument_list pos:line="319" pos:column="18">(<argument><expr><name pos:line="319" pos:column="19">SCLEX_POV</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="30">ColourisePovDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="319" pos:column="47">"pov"</lit:literal></expr></argument>, <argument><expr><name pos:line="319" pos:column="54">FoldPovDoc</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="66">povWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
