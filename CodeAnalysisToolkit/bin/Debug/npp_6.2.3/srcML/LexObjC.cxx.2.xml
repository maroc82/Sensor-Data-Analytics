<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexObjC.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexCPP.cxx
 ** Lexer for C++, C, Java, Javascript, Resource File and Objective-C
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>
<comment type="line" pos:line="7" pos:column="1">// Modified by Don &lt;don.h@free.fr&gt; 2004 to add lexer Object C</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:define pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="26" pos:column="9">INCLUDE_DEPRECATED_FEATURES</name></cpp:macro></cpp:define>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="28" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">KEYWORD_BOXHEADER</name></cpp:macro> <cpp:value pos:line="30" pos:column="27">1</cpp:value></cpp:define>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">KEYWORD_FOLDCONTRACTED</name></cpp:macro> <cpp:value pos:line="31" pos:column="32">2</cpp:value></cpp:define>

<function><type><specifier pos:line="33" pos:column="1">static</specifier> <name pos:line="33" pos:column="8">bool</name></type> <name pos:line="33" pos:column="13">IsOKBeforeRE</name><parameter_list pos:line="33" pos:column="25">(<param><decl><type><specifier pos:line="33" pos:column="26">const</specifier> <name pos:line="33" pos:column="32">int</name></type> <name pos:line="33" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="40">{
	<return pos:line="34" pos:column="9">return <expr><op:operator pos:line="34" pos:column="16">(</op:operator><name pos:line="34" pos:column="17">ch</name> <op:operator pos:line="34" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="23">'('</lit:literal><op:operator pos:line="34" pos:column="26">)</op:operator> <op:operator pos:line="34" pos:column="28">||</op:operator> <op:operator pos:line="34" pos:column="31">(</op:operator><name pos:line="34" pos:column="32">ch</name> <op:operator pos:line="34" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="38">'='</lit:literal><op:operator pos:line="34" pos:column="41">)</op:operator> <op:operator pos:line="34" pos:column="43">||</op:operator> <op:operator pos:line="34" pos:column="46">(</op:operator><name pos:line="34" pos:column="47">ch</name> <op:operator pos:line="34" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="53">','</lit:literal><op:operator pos:line="34" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="37" pos:column="1">static</specifier> <specifier pos:line="37" pos:column="8">inline</specifier> <name pos:line="37" pos:column="15">bool</name></type> <name pos:line="37" pos:column="20">IsAWordChar</name><parameter_list pos:line="37" pos:column="31">(<param><decl><type><specifier pos:line="37" pos:column="32">const</specifier> <name pos:line="37" pos:column="38">int</name></type> <name pos:line="37" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="46">{
	<return pos:line="38" pos:column="9">return <expr><op:operator pos:line="38" pos:column="16">(</op:operator><name pos:line="38" pos:column="17">ch</name> <op:operator pos:line="38" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="38" pos:column="22">0x80</lit:literal><op:operator pos:line="38" pos:column="26">)</op:operator> <op:operator pos:line="38" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="38" pos:column="31">(</op:operator><call><name pos:line="38" pos:column="32">isalnum</name><argument_list pos:line="38" pos:column="39">(<argument><expr><name pos:line="38" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="38" pos:column="44">||</op:operator> <name pos:line="38" pos:column="47">ch</name> <op:operator pos:line="38" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="53">'.'</lit:literal> <op:operator pos:line="38" pos:column="57">||</op:operator> <name pos:line="38" pos:column="60">ch</name> <op:operator pos:line="38" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="38" pos:column="66">'_'</lit:literal><op:operator pos:line="38" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="41" pos:column="1">static</specifier> <specifier pos:line="41" pos:column="8">inline</specifier> <name pos:line="41" pos:column="15">bool</name></type> <name pos:line="41" pos:column="20">IsAWordStart</name><parameter_list pos:line="41" pos:column="32">(<param><decl><type><specifier pos:line="41" pos:column="33">const</specifier> <name pos:line="41" pos:column="39">int</name></type> <name pos:line="41" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="47">{
	<return pos:line="42" pos:column="9">return <expr><op:operator pos:line="42" pos:column="16">(</op:operator><name pos:line="42" pos:column="17">ch</name> <op:operator pos:line="42" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="42" pos:column="22">0x80</lit:literal><op:operator pos:line="42" pos:column="26">)</op:operator> <op:operator pos:line="42" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="42" pos:column="31">(</op:operator><call><name pos:line="42" pos:column="32">isalnum</name><argument_list pos:line="42" pos:column="39">(<argument><expr><name pos:line="42" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="42" pos:column="44">||</op:operator> <name pos:line="42" pos:column="47">ch</name> <op:operator pos:line="42" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="53">'_'</lit:literal><op:operator pos:line="42" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="45" pos:column="1">inline</specifier> <name pos:line="45" pos:column="8">bool</name></type> <name pos:line="45" pos:column="13">IsASpace</name><parameter_list pos:line="45" pos:column="21">(<param><decl><type><name pos:line="45" pos:column="22">unsigned</name> <name pos:line="45" pos:column="31">int</name></type> <name pos:line="45" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="39">{
    <return pos:line="46" pos:column="5">return <expr><op:operator pos:line="46" pos:column="12">(</op:operator><name pos:line="46" pos:column="13">ch</name> <op:operator pos:line="46" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="19">' '</lit:literal><op:operator pos:line="46" pos:column="22">)</op:operator> <op:operator pos:line="46" pos:column="24">||</op:operator> <op:operator pos:line="46" pos:column="27">(</op:operator><op:operator pos:line="46" pos:column="28">(</op:operator><name pos:line="46" pos:column="29">ch</name> <op:operator pos:line="46" pos:column="32">&gt;=</op:operator> <lit:literal type="number" pos:line="46" pos:column="35">0x09</lit:literal><op:operator pos:line="46" pos:column="39">)</op:operator> <op:operator pos:line="46" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="46" pos:column="44">(</op:operator><name pos:line="46" pos:column="45">ch</name> <op:operator pos:line="46" pos:column="48">&lt;=</op:operator> <lit:literal type="number" pos:line="46" pos:column="51">0x0d</lit:literal><op:operator pos:line="46" pos:column="55">)</op:operator><op:operator pos:line="46" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="49" pos:column="1">static</specifier> <specifier pos:line="49" pos:column="8">inline</specifier> <name pos:line="49" pos:column="15">bool</name></type> <name pos:line="49" pos:column="20">IsADigit</name><parameter_list pos:line="49" pos:column="28">(<param><decl><type><name pos:line="49" pos:column="29">char</name></type> <name pos:line="49" pos:column="34">ch</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="38">{
	<return pos:line="50" pos:column="9">return <expr><call><name pos:line="50" pos:column="16">isascii</name><argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="50" pos:column="28">&amp;&amp;</op:operator> <call><name pos:line="50" pos:column="31">isdigit</name><argument_list pos:line="50" pos:column="38">(<argument><expr><name pos:line="50" pos:column="39">ch</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="53" pos:column="1">static</specifier> <specifier pos:line="53" pos:column="8">inline</specifier> <name pos:line="53" pos:column="15">bool</name></type> <name pos:line="53" pos:column="20">IsADoxygenChar</name><parameter_list pos:line="53" pos:column="34">(<param><decl><type><specifier pos:line="53" pos:column="35">const</specifier> <name pos:line="53" pos:column="41">int</name></type> <name pos:line="53" pos:column="45">ch</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="49">{
	<return pos:line="54" pos:column="9">return <expr><op:operator pos:line="54" pos:column="16">(</op:operator><call><name pos:line="54" pos:column="17">islower</name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="54" pos:column="29">||</op:operator> <name pos:line="54" pos:column="32">ch</name> <op:operator pos:line="54" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="38">'$'</lit:literal> <op:operator pos:line="54" pos:column="42">||</op:operator> <name pos:line="54" pos:column="45">ch</name> <op:operator pos:line="54" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="51">'@'</lit:literal> <op:operator pos:line="54" pos:column="55">||</op:operator>
	        <name pos:line="55" pos:column="17">ch</name> <op:operator pos:line="55" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="23">'\\'</lit:literal> <op:operator pos:line="55" pos:column="28">||</op:operator> <name pos:line="55" pos:column="31">ch</name> <op:operator pos:line="55" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="37">'&amp;'</lit:literal> <op:operator pos:line="55" pos:column="41">||</op:operator> <name pos:line="55" pos:column="44">ch</name> <op:operator pos:line="55" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="50">'&lt;'</lit:literal> <op:operator pos:line="55" pos:column="54">||</op:operator>
	        <name pos:line="56" pos:column="17">ch</name> <op:operator pos:line="56" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="23">'&gt;'</lit:literal> <op:operator pos:line="56" pos:column="27">||</op:operator> <name pos:line="56" pos:column="30">ch</name> <op:operator pos:line="56" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="36">'#'</lit:literal> <op:operator pos:line="56" pos:column="40">||</op:operator> <name pos:line="56" pos:column="43">ch</name> <op:operator pos:line="56" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="49">'{'</lit:literal> <op:operator pos:line="56" pos:column="53">||</op:operator>
	        <name pos:line="57" pos:column="17">ch</name> <op:operator pos:line="57" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="23">'}'</lit:literal> <op:operator pos:line="57" pos:column="27">||</op:operator> <name pos:line="57" pos:column="30">ch</name> <op:operator pos:line="57" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="36">'['</lit:literal> <op:operator pos:line="57" pos:column="40">||</op:operator> <name pos:line="57" pos:column="43">ch</name> <op:operator pos:line="57" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="57" pos:column="49">']'</lit:literal><op:operator pos:line="57" pos:column="52">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="60" pos:column="1">static</specifier> <specifier pos:line="60" pos:column="8">inline</specifier> <name pos:line="60" pos:column="15">bool</name></type> <name pos:line="60" pos:column="20">IsStateComment</name><parameter_list pos:line="60" pos:column="34">(<param><decl><type><specifier pos:line="60" pos:column="35">const</specifier> <name pos:line="60" pos:column="41">int</name></type> <name pos:line="60" pos:column="45">state</name></decl></param>)</parameter_list> <block pos:line="60" pos:column="52">{
	<return pos:line="61" pos:column="9">return <expr><op:operator pos:line="61" pos:column="16">(</op:operator><op:operator pos:line="61" pos:column="17">(</op:operator><name pos:line="61" pos:column="18">state</name> <op:operator pos:line="61" pos:column="24">==</op:operator> <name pos:line="61" pos:column="27">SCE_C_COMMENT</name><op:operator pos:line="61" pos:column="40">)</op:operator> <op:operator pos:line="61" pos:column="42">||</op:operator>
	        <op:operator pos:line="62" pos:column="17">(</op:operator><name pos:line="62" pos:column="18">state</name> <op:operator pos:line="62" pos:column="24">==</op:operator> <name pos:line="62" pos:column="27">SCE_C_COMMENTLINE</name><op:operator pos:line="62" pos:column="44">)</op:operator> <op:operator pos:line="62" pos:column="46">||</op:operator>
	        <op:operator pos:line="63" pos:column="17">(</op:operator><name pos:line="63" pos:column="18">state</name> <op:operator pos:line="63" pos:column="24">==</op:operator> <name pos:line="63" pos:column="27">SCE_C_COMMENTDOC</name><op:operator pos:line="63" pos:column="43">)</op:operator> <op:operator pos:line="63" pos:column="45">||</op:operator>
	        <op:operator pos:line="64" pos:column="17">(</op:operator><name pos:line="64" pos:column="18">state</name> <op:operator pos:line="64" pos:column="24">==</op:operator> <name pos:line="64" pos:column="27">SCE_C_COMMENTDOCKEYWORD</name><op:operator pos:line="64" pos:column="50">)</op:operator> <op:operator pos:line="64" pos:column="52">||</op:operator>
	        <op:operator pos:line="65" pos:column="17">(</op:operator><name pos:line="65" pos:column="18">state</name> <op:operator pos:line="65" pos:column="24">==</op:operator> <name pos:line="65" pos:column="27">SCE_C_COMMENTDOCKEYWORDERROR</name><op:operator pos:line="65" pos:column="55">)</op:operator><op:operator pos:line="65" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="68" pos:column="1">static</specifier> <specifier pos:line="68" pos:column="8">inline</specifier> <name pos:line="68" pos:column="15">bool</name></type> <name pos:line="68" pos:column="20">IsStateString</name><parameter_list pos:line="68" pos:column="33">(<param><decl><type><specifier pos:line="68" pos:column="34">const</specifier> <name pos:line="68" pos:column="40">int</name></type> <name pos:line="68" pos:column="44">state</name></decl></param>)</parameter_list> <block pos:line="68" pos:column="51">{
	<return pos:line="69" pos:column="9">return <expr><op:operator pos:line="69" pos:column="16">(</op:operator><op:operator pos:line="69" pos:column="17">(</op:operator><name pos:line="69" pos:column="18">state</name> <op:operator pos:line="69" pos:column="24">==</op:operator> <name pos:line="69" pos:column="27">SCE_C_STRING</name><op:operator pos:line="69" pos:column="39">)</op:operator> <op:operator pos:line="69" pos:column="41">||</op:operator> <op:operator pos:line="69" pos:column="44">(</op:operator><name pos:line="69" pos:column="45">state</name> <op:operator pos:line="69" pos:column="51">==</op:operator> <name pos:line="69" pos:column="54">SCE_C_VERBATIM</name><op:operator pos:line="69" pos:column="68">)</op:operator><op:operator pos:line="69" pos:column="69">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="72" pos:column="1">static</specifier> <name pos:line="72" pos:column="8">void</name></type> <name pos:line="72" pos:column="13">ColouriseObjCDoc</name><parameter_list pos:line="72" pos:column="29">(<param><decl><type><name pos:line="72" pos:column="30">unsigned</name> <name pos:line="72" pos:column="39">int</name></type> <name pos:line="72" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="53">int</name></type> <name pos:line="72" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="65">int</name></type> <name pos:line="72" pos:column="69">initStyle</name></decl></param>, <param><decl><type><name pos:line="72" pos:column="80">WordList</name> <type:modifier pos:line="72" pos:column="89">*</type:modifier></type><name><name pos:line="72" pos:column="90">keywordlists</name><index pos:line="72" pos:column="102">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="73" pos:column="29">Accessor</name> <type:modifier pos:line="73" pos:column="38">&amp;</type:modifier></type><name pos:line="73" pos:column="39">styler</name></decl></param>, <param><decl><type><name pos:line="73" pos:column="47">bool</name></type> <name pos:line="73" pos:column="52">caseSensitive</name></decl></param>)</parameter_list> <block pos:line="73" pos:column="67">{

	<decl_stmt><decl><type><name pos:line="75" pos:column="9">WordList</name> <type:modifier pos:line="75" pos:column="18">&amp;</type:modifier></type><name pos:line="75" pos:column="19">mainInstrsList</name> <init pos:line="75" pos:column="34">= <expr><op:operator pos:line="75" pos:column="36">*</op:operator><name><name pos:line="75" pos:column="37">keywordlists</name><index pos:line="75" pos:column="49">[<expr><lit:literal type="number" pos:line="75" pos:column="50">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="75" pos:column="54">//Commun Instriction</comment>
	<decl_stmt><decl><type><name pos:line="76" pos:column="9">WordList</name> <type:modifier pos:line="76" pos:column="18">&amp;</type:modifier></type><name pos:line="76" pos:column="19">mainTypesList</name> <init pos:line="76" pos:column="33">= <expr><op:operator pos:line="76" pos:column="35">*</op:operator><name><name pos:line="76" pos:column="36">keywordlists</name><index pos:line="76" pos:column="48">[<expr><lit:literal type="number" pos:line="76" pos:column="49">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="76" pos:column="53">//Commun Type</comment>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">WordList</name> <type:modifier pos:line="77" pos:column="18">&amp;</type:modifier></type><name pos:line="77" pos:column="19">DoxygenList</name> <init pos:line="77" pos:column="31">= <expr><op:operator pos:line="77" pos:column="33">*</op:operator><name><name pos:line="77" pos:column="34">keywordlists</name><index pos:line="77" pos:column="46">[<expr><lit:literal type="number" pos:line="77" pos:column="47">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="77" pos:column="51">//Doxygen keyword</comment>
	<decl_stmt><decl><type><name pos:line="78" pos:column="9">WordList</name> <type:modifier pos:line="78" pos:column="18">&amp;</type:modifier></type><name pos:line="78" pos:column="19">objcDirectiveList</name> <init pos:line="78" pos:column="37">= <expr><op:operator pos:line="78" pos:column="39">*</op:operator><name><name pos:line="78" pos:column="40">keywordlists</name><index pos:line="78" pos:column="52">[<expr><lit:literal type="number" pos:line="78" pos:column="53">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="78" pos:column="57">// objC Directive</comment>
	<decl_stmt><decl><type><name pos:line="79" pos:column="9">WordList</name> <type:modifier pos:line="79" pos:column="18">&amp;</type:modifier></type><name pos:line="79" pos:column="19">objcQualifierList</name> <init pos:line="79" pos:column="37">= <expr><op:operator pos:line="79" pos:column="39">*</op:operator><name><name pos:line="79" pos:column="40">keywordlists</name><index pos:line="79" pos:column="52">[<expr><lit:literal type="number" pos:line="79" pos:column="53">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="79" pos:column="57">//objC Qualifier</comment>

	<decl_stmt><decl><type><name pos:line="81" pos:column="9">bool</name></type> <name pos:line="81" pos:column="14">stylingWithinPreprocessor</name> <init pos:line="81" pos:column="40">= <expr><call><name><name pos:line="81" pos:column="42">styler</name><op:operator pos:line="81" pos:column="48">.</op:operator><name pos:line="81" pos:column="49">GetPropertyInt</name></name><argument_list pos:line="81" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="64">"styling.within.preprocessor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="81" pos:column="95">!=</op:operator> <lit:literal type="number" pos:line="81" pos:column="98">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="83" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name pos:line="84" pos:column="13">initStyle</name> <op:operator pos:line="84" pos:column="23">==</op:operator> <name pos:line="84" pos:column="26">SCE_C_STRINGEOL</name></expr>)</condition><then pos:line="84" pos:column="42">
		<expr_stmt><expr><name pos:line="85" pos:column="17">initStyle</name> <op:operator pos:line="85" pos:column="27">=</op:operator> <name pos:line="85" pos:column="29">SCE_C_DEFAULT</name></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="87" pos:column="9">int</name></type> <name pos:line="87" pos:column="13">chPrevNonWhite</name> <init pos:line="87" pos:column="28">= <expr><lit:literal type="char" pos:line="87" pos:column="30">' '</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="88" pos:column="9">int</name></type> <name pos:line="88" pos:column="13">visibleChars</name> <init pos:line="88" pos:column="26">= <expr><lit:literal type="number" pos:line="88" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="89" pos:column="9">bool</name></type> <name pos:line="89" pos:column="14">lastWordWasUUID</name> <init pos:line="89" pos:column="30">= <expr><lit:literal type="boolean" pos:line="89" pos:column="32">false</lit:literal></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="91" pos:column="9">StyleContext</name></type> <name pos:line="91" pos:column="22">sc</name><parameter_list pos:line="91" pos:column="24">(<param><decl><type><name pos:line="91" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="91" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="91" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="91" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="93" pos:column="9">for (<init pos:line="93" pos:column="14">;</init> <condition><expr><call><name><name pos:line="93" pos:column="16">sc</name><op:operator pos:line="93" pos:column="18">.</op:operator><name pos:line="93" pos:column="19">More</name></name><argument_list pos:line="93" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="93" pos:column="27">sc</name><op:operator pos:line="93" pos:column="29">.</op:operator><name pos:line="93" pos:column="30">Forward</name></name><argument_list pos:line="93" pos:column="37">()</argument_list></call></expr></incr>) 
	<block pos:line="94" pos:column="9">{
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name><name pos:line="95" pos:column="21">sc</name><op:operator pos:line="95" pos:column="23">.</op:operator><name pos:line="95" pos:column="24">atLineStart</name></name> <op:operator pos:line="95" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="95" pos:column="39">(</op:operator><name><name pos:line="95" pos:column="40">sc</name><op:operator pos:line="95" pos:column="42">.</op:operator><name pos:line="95" pos:column="43">state</name></name> <op:operator pos:line="95" pos:column="49">==</op:operator> <name pos:line="95" pos:column="52">SCE_C_STRING</name><op:operator pos:line="95" pos:column="64">)</op:operator></expr>)</condition><then pos:line="95" pos:column="66"> 
		<block pos:line="96" pos:column="17">{
			<comment type="line" pos:line="97" pos:column="25">// Prevent SCE_C_STRINGEOL from leaking back to previous line</comment>
			<expr_stmt><expr><call><name><name pos:line="98" pos:column="25">sc</name><op:operator pos:line="98" pos:column="27">.</op:operator><name pos:line="98" pos:column="28">SetState</name></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name pos:line="98" pos:column="37">SCE_C_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" pos:line="101" pos:column="17">// Handle line continuation generically.</comment>
		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><name><name pos:line="102" pos:column="21">sc</name><op:operator pos:line="102" pos:column="23">.</op:operator><name pos:line="102" pos:column="24">ch</name></name> <op:operator pos:line="102" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="102" pos:column="30">'\\'</lit:literal></expr>)</condition><then pos:line="102" pos:column="35"> 
		<block pos:line="103" pos:column="17">{
			<if pos:line="104" pos:column="25">if <condition pos:line="104" pos:column="28">(<expr><name><name pos:line="104" pos:column="29">sc</name><op:operator pos:line="104" pos:column="31">.</op:operator><name pos:line="104" pos:column="32">chNext</name></name> <op:operator pos:line="104" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="42">'\n'</lit:literal> <op:operator pos:line="104" pos:column="47">||</op:operator> <name><name pos:line="104" pos:column="50">sc</name><op:operator pos:line="104" pos:column="52">.</op:operator><name pos:line="104" pos:column="53">chNext</name></name> <op:operator pos:line="104" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="104" pos:column="63">'\r'</lit:literal></expr>)</condition><then pos:line="104" pos:column="68"> 
			<block pos:line="105" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="106" pos:column="33">sc</name><op:operator pos:line="106" pos:column="35">.</op:operator><name pos:line="106" pos:column="36">Forward</name></name><argument_list pos:line="106" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
				<if pos:line="107" pos:column="33">if <condition pos:line="107" pos:column="36">(<expr><name><name pos:line="107" pos:column="37">sc</name><op:operator pos:line="107" pos:column="39">.</op:operator><name pos:line="107" pos:column="40">ch</name></name> <op:operator pos:line="107" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="46">'\r'</lit:literal> <op:operator pos:line="107" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="107" pos:column="54">sc</name><op:operator pos:line="107" pos:column="56">.</op:operator><name pos:line="107" pos:column="57">chNext</name></name> <op:operator pos:line="107" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="67">'\n'</lit:literal></expr>)</condition><then pos:line="107" pos:column="72"> 
				<block pos:line="108" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="109" pos:column="41">sc</name><op:operator pos:line="109" pos:column="43">.</op:operator><name pos:line="109" pos:column="44">Forward</name></name><argument_list pos:line="109" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<continue pos:line="111" pos:column="33">continue;</continue>
			}</block></then></if>
		}</block></then></if>

		<comment type="line" pos:line="115" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="116" pos:column="17">switch <condition pos:line="116" pos:column="24">(<expr><name><name pos:line="116" pos:column="25">sc</name><op:operator pos:line="116" pos:column="27">.</op:operator><name pos:line="116" pos:column="28">state</name></name></expr>)</condition>
		<block pos:line="117" pos:column="17">{
			<case pos:line="118" pos:column="25">case <expr><name pos:line="118" pos:column="30">SCE_C_OPERATOR</name></expr> :
			<block pos:line="119" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="120" pos:column="33">sc</name><op:operator pos:line="120" pos:column="35">.</op:operator><name pos:line="120" pos:column="36">SetState</name></name><argument_list pos:line="120" pos:column="44">(<argument><expr><name pos:line="120" pos:column="45">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="121" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="123" pos:column="25">case <expr><name pos:line="123" pos:column="30">SCE_C_NUMBER</name></expr> :
			<block pos:line="124" pos:column="25">{
				<if pos:line="125" pos:column="33">if <condition pos:line="125" pos:column="36">(<expr><op:operator pos:line="125" pos:column="37">!</op:operator><call><name pos:line="125" pos:column="38">IsAWordChar</name><argument_list pos:line="125" pos:column="49">(<argument><expr><name><name pos:line="125" pos:column="50">sc</name><op:operator pos:line="125" pos:column="52">.</op:operator><name pos:line="125" pos:column="53">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="125" pos:column="57"> 
					<expr_stmt><expr><call><name><name pos:line="126" pos:column="41">sc</name><op:operator pos:line="126" pos:column="43">.</op:operator><name pos:line="126" pos:column="44">SetState</name></name><argument_list pos:line="126" pos:column="52">(<argument><expr><name pos:line="126" pos:column="53">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<break pos:line="127" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="129" pos:column="25">case <expr><name pos:line="129" pos:column="30">SCE_C_IDENTIFIER</name></expr> : 
			<block pos:line="130" pos:column="25">{
				<if pos:line="131" pos:column="33">if <condition pos:line="131" pos:column="36">(<expr><op:operator pos:line="131" pos:column="37">!</op:operator><call><name pos:line="131" pos:column="38">IsAWordChar</name><argument_list pos:line="131" pos:column="49">(<argument><expr><name><name pos:line="131" pos:column="50">sc</name><op:operator pos:line="131" pos:column="52">.</op:operator><name pos:line="131" pos:column="53">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="131" pos:column="57">||</op:operator> <op:operator pos:line="131" pos:column="60">(</op:operator><name><name pos:line="131" pos:column="61">sc</name><op:operator pos:line="131" pos:column="63">.</op:operator><name pos:line="131" pos:column="64">ch</name></name> <op:operator pos:line="131" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="70">'.'</lit:literal><op:operator pos:line="131" pos:column="73">)</op:operator></expr>)</condition><then pos:line="131" pos:column="75"> 
				<block pos:line="132" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="133" pos:column="41">char</name></type> <name><name pos:line="133" pos:column="46">s</name><index pos:line="133" pos:column="47">[<expr><lit:literal type="number" pos:line="133" pos:column="48">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="134" pos:column="41">sc</name><op:operator pos:line="134" pos:column="43">.</op:operator><name pos:line="134" pos:column="44">GetCurrent</name></name><argument_list pos:line="134" pos:column="54">(<argument><expr><name pos:line="134" pos:column="55">s</name></expr></argument>, <argument><expr><sizeof pos:line="134" pos:column="58">sizeof<argument_list pos:line="134" pos:column="64">(<argument><expr><name pos:line="134" pos:column="65">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="135" pos:column="41">if <condition pos:line="135" pos:column="44">(<expr><name><name pos:line="135" pos:column="45">s</name><index pos:line="135" pos:column="46">[<expr><lit:literal type="number" pos:line="135" pos:column="47">0</lit:literal></expr>]</index></name> <op:operator pos:line="135" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="135" pos:column="53">'@'</lit:literal></expr>)</condition><then pos:line="135" pos:column="57">
					<block pos:line="136" pos:column="41">{
						<decl_stmt><decl><type><name pos:line="137" pos:column="49">char</name> <type:modifier pos:line="137" pos:column="54">*</type:modifier></type><name pos:line="137" pos:column="55">ps</name> <init pos:line="137" pos:column="58">= <expr><name pos:line="137" pos:column="60">s</name> <op:operator pos:line="137" pos:column="62">+</op:operator> <lit:literal type="number" pos:line="137" pos:column="64">1</lit:literal></expr></init></decl>;</decl_stmt>
						<if pos:line="138" pos:column="49">if <condition pos:line="138" pos:column="52">(<expr><call><name><name pos:line="138" pos:column="53">objcDirectiveList</name><op:operator pos:line="138" pos:column="70">.</op:operator><name pos:line="138" pos:column="71">InList</name></name><argument_list pos:line="138" pos:column="77">(<argument><expr><name pos:line="138" pos:column="78">ps</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="138" pos:column="82">
							<expr_stmt><expr><call><name><name pos:line="139" pos:column="57">sc</name><op:operator pos:line="139" pos:column="59">.</op:operator><name pos:line="139" pos:column="60">ChangeState</name></name><argument_list pos:line="139" pos:column="71">(<argument><expr><name pos:line="139" pos:column="72">SCE_OBJC_DIRECTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					}</block></then>
					<else pos:line="141" pos:column="41">else 
					<block pos:line="142" pos:column="41">{
						<if pos:line="143" pos:column="49">if <condition pos:line="143" pos:column="52">(<expr><call><name><name pos:line="143" pos:column="53">mainInstrsList</name><op:operator pos:line="143" pos:column="67">.</op:operator><name pos:line="143" pos:column="68">InList</name></name><argument_list pos:line="143" pos:column="74">(<argument><expr><name pos:line="143" pos:column="75">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="143" pos:column="78"> 
						<block pos:line="144" pos:column="49">{
							<expr_stmt><expr><name pos:line="145" pos:column="57">lastWordWasUUID</name> <op:operator pos:line="145" pos:column="73">=</op:operator> <call><name pos:line="145" pos:column="75">strcmp</name><argument_list pos:line="145" pos:column="81">(<argument><expr><name pos:line="145" pos:column="82">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="145" pos:column="85">"uuid"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="145" pos:column="93">==</op:operator> <lit:literal type="number" pos:line="145" pos:column="96">0</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="146" pos:column="57">sc</name><op:operator pos:line="146" pos:column="59">.</op:operator><name pos:line="146" pos:column="60">ChangeState</name></name><argument_list pos:line="146" pos:column="71">(<argument><expr><name pos:line="146" pos:column="72">SCE_C_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> 
						<else pos:line="148" pos:column="49">else <if pos:line="148" pos:column="54">if <condition pos:line="148" pos:column="57">(<expr><call><name><name pos:line="148" pos:column="58">mainTypesList</name><op:operator pos:line="148" pos:column="71">.</op:operator><name pos:line="148" pos:column="72">InList</name></name><argument_list pos:line="148" pos:column="78">(<argument><expr><name pos:line="148" pos:column="79">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="148" pos:column="82"> 
						<block pos:line="149" pos:column="49">{
							<expr_stmt><expr><call><name><name pos:line="150" pos:column="57">sc</name><op:operator pos:line="150" pos:column="59">.</op:operator><name pos:line="150" pos:column="60">ChangeState</name></name><argument_list pos:line="150" pos:column="71">(<argument><expr><name pos:line="150" pos:column="72">SCE_C_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else pos:line="152" pos:column="49">else <if pos:line="152" pos:column="54">if <condition pos:line="152" pos:column="57">(<expr><call><name><name pos:line="152" pos:column="58">objcQualifierList</name><op:operator pos:line="152" pos:column="75">.</op:operator><name pos:line="152" pos:column="76">InList</name></name><argument_list pos:line="152" pos:column="82">(<argument><expr><name pos:line="152" pos:column="83">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="86"> 
						<block pos:line="153" pos:column="49">{
							<expr_stmt><expr><call><name><name pos:line="154" pos:column="57">sc</name><op:operator pos:line="154" pos:column="59">.</op:operator><name pos:line="154" pos:column="60">ChangeState</name></name><argument_list pos:line="154" pos:column="71">(<argument><expr><name pos:line="154" pos:column="72">SCE_OBJC_QUALIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if></else></if></else></if>
					}</block></else></if>
					<expr_stmt><expr><call><name><name pos:line="157" pos:column="41">sc</name><op:operator pos:line="157" pos:column="43">.</op:operator><name pos:line="157" pos:column="44">SetState</name></name><argument_list pos:line="157" pos:column="52">(<argument><expr><name pos:line="157" pos:column="53">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="159" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="161" pos:column="25">case <expr><name pos:line="161" pos:column="30">SCE_C_PREPROCESSOR</name></expr> :
			<block pos:line="162" pos:column="25">{
				<if pos:line="163" pos:column="33">if <condition pos:line="163" pos:column="36">(<expr><name pos:line="163" pos:column="37">stylingWithinPreprocessor</name></expr>)</condition><then pos:line="163" pos:column="63"> 
				<block pos:line="164" pos:column="33">{
					<if pos:line="165" pos:column="41">if <condition pos:line="165" pos:column="44">(<expr><call><name pos:line="165" pos:column="45">IsASpace</name><argument_list pos:line="165" pos:column="53">(<argument><expr><name><name pos:line="165" pos:column="54">sc</name><op:operator pos:line="165" pos:column="56">.</op:operator><name pos:line="165" pos:column="57">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="165" pos:column="61"> 
						<expr_stmt><expr><call><name><name pos:line="166" pos:column="49">sc</name><op:operator pos:line="166" pos:column="51">.</op:operator><name pos:line="166" pos:column="52">SetState</name></name><argument_list pos:line="166" pos:column="60">(<argument><expr><name pos:line="166" pos:column="61">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				}</block></then> 
				<else pos:line="168" pos:column="33">else 
				<block pos:line="169" pos:column="33">{
					<if pos:line="170" pos:column="41">if <condition pos:line="170" pos:column="44">(<expr><op:operator pos:line="170" pos:column="45">(</op:operator><name><name pos:line="170" pos:column="46">sc</name><op:operator pos:line="170" pos:column="48">.</op:operator><name pos:line="170" pos:column="49">atLineEnd</name></name><op:operator pos:line="170" pos:column="58">)</op:operator> <op:operator pos:line="170" pos:column="60">||</op:operator> <op:operator pos:line="170" pos:column="63">(</op:operator><call><name><name pos:line="170" pos:column="64">sc</name><op:operator pos:line="170" pos:column="66">.</op:operator><name pos:line="170" pos:column="67">Match</name></name><argument_list pos:line="170" pos:column="72">(<argument><expr><lit:literal type="char" pos:line="170" pos:column="73">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="170" pos:column="78">'*'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="82">)</op:operator> <op:operator pos:line="170" pos:column="84">||</op:operator> <op:operator pos:line="170" pos:column="87">(</op:operator><call><name><name pos:line="170" pos:column="88">sc</name><op:operator pos:line="170" pos:column="90">.</op:operator><name pos:line="170" pos:column="91">Match</name></name><argument_list pos:line="170" pos:column="96">(<argument><expr><lit:literal type="char" pos:line="170" pos:column="97">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="170" pos:column="102">'/'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="170" pos:column="106">)</op:operator></expr>)</condition><then pos:line="170" pos:column="108"> 
						<expr_stmt><expr><call><name><name pos:line="171" pos:column="49">sc</name><op:operator pos:line="171" pos:column="51">.</op:operator><name pos:line="171" pos:column="52">SetState</name></name><argument_list pos:line="171" pos:column="60">(<argument><expr><name pos:line="171" pos:column="61">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				}</block></else></if>
				<break pos:line="173" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="175" pos:column="25">case <expr><name pos:line="175" pos:column="30">SCE_C_COMMENT</name></expr> :
			<block pos:line="176" pos:column="25">{
				<if pos:line="177" pos:column="33">if <condition pos:line="177" pos:column="36">(<expr><call><name><name pos:line="177" pos:column="37">sc</name><op:operator pos:line="177" pos:column="39">.</op:operator><name pos:line="177" pos:column="40">Match</name></name><argument_list pos:line="177" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="177" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="177" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="177" pos:column="56"> 
				<block pos:line="178" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="179" pos:column="41">sc</name><op:operator pos:line="179" pos:column="43">.</op:operator><name pos:line="179" pos:column="44">Forward</name></name><argument_list pos:line="179" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="180" pos:column="41">sc</name><op:operator pos:line="180" pos:column="43">.</op:operator><name pos:line="180" pos:column="44">ForwardSetState</name></name><argument_list pos:line="180" pos:column="59">(<argument><expr><name pos:line="180" pos:column="60">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="182" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="184" pos:column="25">case <expr><name pos:line="184" pos:column="30">SCE_C_COMMENTDOC</name></expr> :
			<block pos:line="185" pos:column="25">{
				<if pos:line="186" pos:column="33">if <condition pos:line="186" pos:column="36">(<expr><call><name><name pos:line="186" pos:column="37">sc</name><op:operator pos:line="186" pos:column="39">.</op:operator><name pos:line="186" pos:column="40">Match</name></name><argument_list pos:line="186" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="186" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="186" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="186" pos:column="56"> 
				<block pos:line="187" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="188" pos:column="41">sc</name><op:operator pos:line="188" pos:column="43">.</op:operator><name pos:line="188" pos:column="44">Forward</name></name><argument_list pos:line="188" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="189" pos:column="41">sc</name><op:operator pos:line="189" pos:column="43">.</op:operator><name pos:line="189" pos:column="44">ForwardSetState</name></name><argument_list pos:line="189" pos:column="59">(<argument><expr><name pos:line="189" pos:column="60">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="191" pos:column="33">else <if pos:line="191" pos:column="38">if <condition pos:line="191" pos:column="41">(<expr><name><name pos:line="191" pos:column="42">sc</name><op:operator pos:line="191" pos:column="44">.</op:operator><name pos:line="191" pos:column="45">ch</name></name> <op:operator pos:line="191" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="191" pos:column="51">'@'</lit:literal> <op:operator pos:line="191" pos:column="55">||</op:operator> <name><name pos:line="191" pos:column="58">sc</name><op:operator pos:line="191" pos:column="60">.</op:operator><name pos:line="191" pos:column="61">ch</name></name> <op:operator pos:line="191" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="191" pos:column="67">'\\'</lit:literal></expr>)</condition><then pos:line="191" pos:column="72"> 
				<block pos:line="192" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="193" pos:column="41">sc</name><op:operator pos:line="193" pos:column="43">.</op:operator><name pos:line="193" pos:column="44">SetState</name></name><argument_list pos:line="193" pos:column="52">(<argument><expr><name pos:line="193" pos:column="53">SCE_C_COMMENTDOCKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="195" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="197" pos:column="25">case <expr><name pos:line="197" pos:column="30">SCE_C_COMMENTLINE</name></expr> :
			</case><case pos:line="198" pos:column="25">case <expr><name pos:line="198" pos:column="30">SCE_C_COMMENTLINEDOC</name></expr> :
			<block pos:line="199" pos:column="25">{
				<if pos:line="200" pos:column="33">if <condition pos:line="200" pos:column="36">(<expr><name><name pos:line="200" pos:column="37">sc</name><op:operator pos:line="200" pos:column="39">.</op:operator><name pos:line="200" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="200" pos:column="50"> 
				<block pos:line="201" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="202" pos:column="41">sc</name><op:operator pos:line="202" pos:column="43">.</op:operator><name pos:line="202" pos:column="44">SetState</name></name><argument_list pos:line="202" pos:column="52">(<argument><expr><name pos:line="202" pos:column="53">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="203" pos:column="41">visibleChars</name> <op:operator pos:line="203" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="203" pos:column="56">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="205" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="207" pos:column="25">case <expr><name pos:line="207" pos:column="30">SCE_C_COMMENTDOCKEYWORD</name></expr> :
			<block pos:line="208" pos:column="25">{
				<if pos:line="209" pos:column="33">if <condition pos:line="209" pos:column="36">(<expr><call><name><name pos:line="209" pos:column="37">sc</name><op:operator pos:line="209" pos:column="39">.</op:operator><name pos:line="209" pos:column="40">Match</name></name><argument_list pos:line="209" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="209" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="209" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="209" pos:column="56"> 
				<block pos:line="210" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="211" pos:column="41">sc</name><op:operator pos:line="211" pos:column="43">.</op:operator><name pos:line="211" pos:column="44">ChangeState</name></name><argument_list pos:line="211" pos:column="55">(<argument><expr><name pos:line="211" pos:column="56">SCE_C_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="212" pos:column="41">sc</name><op:operator pos:line="212" pos:column="43">.</op:operator><name pos:line="212" pos:column="44">Forward</name></name><argument_list pos:line="212" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="213" pos:column="41">sc</name><op:operator pos:line="213" pos:column="43">.</op:operator><name pos:line="213" pos:column="44">ForwardSetState</name></name><argument_list pos:line="213" pos:column="59">(<argument><expr><name pos:line="213" pos:column="60">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="215" pos:column="33">else <if pos:line="215" pos:column="38">if <condition pos:line="215" pos:column="41">(<expr><op:operator pos:line="215" pos:column="42">!</op:operator><call><name pos:line="215" pos:column="43">IsADoxygenChar</name><argument_list pos:line="215" pos:column="57">(<argument><expr><name><name pos:line="215" pos:column="58">sc</name><op:operator pos:line="215" pos:column="60">.</op:operator><name pos:line="215" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="215" pos:column="65"> 
				<block pos:line="216" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="217" pos:column="41">char</name></type> <name><name pos:line="217" pos:column="46">s</name><index pos:line="217" pos:column="47">[<expr><lit:literal type="number" pos:line="217" pos:column="48">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<if pos:line="218" pos:column="41">if <condition pos:line="218" pos:column="44">(<expr><name pos:line="218" pos:column="45">caseSensitive</name></expr>)</condition><then pos:line="218" pos:column="59"> 
						<expr_stmt><expr><call><name><name pos:line="219" pos:column="49">sc</name><op:operator pos:line="219" pos:column="51">.</op:operator><name pos:line="219" pos:column="52">GetCurrent</name></name><argument_list pos:line="219" pos:column="62">(<argument><expr><name pos:line="219" pos:column="63">s</name></expr></argument>, <argument><expr><sizeof pos:line="219" pos:column="66">sizeof<argument_list pos:line="219" pos:column="72">(<argument><expr><name pos:line="219" pos:column="73">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="220" pos:column="41">else 
						<expr_stmt><expr><call><name><name pos:line="221" pos:column="49">sc</name><op:operator pos:line="221" pos:column="51">.</op:operator><name pos:line="221" pos:column="52">GetCurrentLowered</name></name><argument_list pos:line="221" pos:column="69">(<argument><expr><name pos:line="221" pos:column="70">s</name></expr></argument>, <argument><expr><sizeof pos:line="221" pos:column="73">sizeof<argument_list pos:line="221" pos:column="79">(<argument><expr><name pos:line="221" pos:column="80">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

					<if pos:line="223" pos:column="41">if <condition pos:line="223" pos:column="44">(<expr><op:operator pos:line="223" pos:column="45">!</op:operator><call><name pos:line="223" pos:column="46">isspace</name><argument_list pos:line="223" pos:column="53">(<argument><expr><name><name pos:line="223" pos:column="54">sc</name><op:operator pos:line="223" pos:column="56">.</op:operator><name pos:line="223" pos:column="57">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="223" pos:column="61">||</op:operator> <op:operator pos:line="223" pos:column="64">!</op:operator><call><name><name pos:line="223" pos:column="65">DoxygenList</name><op:operator pos:line="223" pos:column="76">.</op:operator><name pos:line="223" pos:column="77">InList</name></name><argument_list pos:line="223" pos:column="83">(<argument><expr><name pos:line="223" pos:column="84">s</name> <op:operator pos:line="223" pos:column="86">+</op:operator> <lit:literal type="number" pos:line="223" pos:column="88">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="223" pos:column="91"> 
						<expr_stmt><expr><call><name><name pos:line="224" pos:column="49">sc</name><op:operator pos:line="224" pos:column="51">.</op:operator><name pos:line="224" pos:column="52">ChangeState</name></name><argument_list pos:line="224" pos:column="63">(<argument><expr><name pos:line="224" pos:column="64">SCE_C_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

					<expr_stmt><expr><call><name><name pos:line="226" pos:column="41">sc</name><op:operator pos:line="226" pos:column="43">.</op:operator><name pos:line="226" pos:column="44">SetState</name></name><argument_list pos:line="226" pos:column="52">(<argument><expr><name pos:line="226" pos:column="53">SCE_C_COMMENTDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="228" pos:column="33">break;</break>
			}</block>
			</case><case pos:line="230" pos:column="25">case <expr><name pos:line="230" pos:column="30">SCE_C_STRING</name></expr> :
			<block pos:line="231" pos:column="25">{
				<if pos:line="232" pos:column="33">if <condition pos:line="232" pos:column="36">(<expr><name><name pos:line="232" pos:column="37">sc</name><op:operator pos:line="232" pos:column="39">.</op:operator><name pos:line="232" pos:column="40">ch</name></name> <op:operator pos:line="232" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="232" pos:column="46">'\\'</lit:literal></expr>)</condition><then pos:line="232" pos:column="51"> 
				<block pos:line="233" pos:column="33">{
					<if pos:line="234" pos:column="41">if <condition pos:line="234" pos:column="44">(<expr><name><name pos:line="234" pos:column="45">sc</name><op:operator pos:line="234" pos:column="47">.</op:operator><name pos:line="234" pos:column="48">chNext</name></name> <op:operator pos:line="234" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="58">'\"'</lit:literal> <op:operator pos:line="234" pos:column="63">||</op:operator> <name><name pos:line="234" pos:column="66">sc</name><op:operator pos:line="234" pos:column="68">.</op:operator><name pos:line="234" pos:column="69">chNext</name></name> <op:operator pos:line="234" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="79">'\''</lit:literal> <op:operator pos:line="234" pos:column="84">||</op:operator> <name><name pos:line="234" pos:column="87">sc</name><op:operator pos:line="234" pos:column="89">.</op:operator><name pos:line="234" pos:column="90">chNext</name></name> <op:operator pos:line="234" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="234" pos:column="105">
						<expr_stmt><expr><call><name><name pos:line="235" pos:column="49">sc</name><op:operator pos:line="235" pos:column="51">.</op:operator><name pos:line="235" pos:column="52">Forward</name></name><argument_list pos:line="235" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
				}</block></then> 
				<else pos:line="237" pos:column="33">else <if pos:line="237" pos:column="38">if <condition pos:line="237" pos:column="41">(<expr><name><name pos:line="237" pos:column="42">sc</name><op:operator pos:line="237" pos:column="44">.</op:operator><name pos:line="237" pos:column="45">ch</name></name> <op:operator pos:line="237" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="237" pos:column="51">'\"'</lit:literal></expr>)</condition><then pos:line="237" pos:column="56"> 
				<block pos:line="238" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="239" pos:column="41">sc</name><op:operator pos:line="239" pos:column="43">.</op:operator><name pos:line="239" pos:column="44">ForwardSetState</name></name><argument_list pos:line="239" pos:column="59">(<argument><expr><name pos:line="239" pos:column="60">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="241" pos:column="33">else <if pos:line="241" pos:column="38">if <condition pos:line="241" pos:column="41">(<expr><name><name pos:line="241" pos:column="42">sc</name><op:operator pos:line="241" pos:column="44">.</op:operator><name pos:line="241" pos:column="45">atLineEnd</name></name></expr>)</condition><then pos:line="241" pos:column="55"> 
				<block pos:line="242" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="243" pos:column="41">sc</name><op:operator pos:line="243" pos:column="43">.</op:operator><name pos:line="243" pos:column="44">ChangeState</name></name><argument_list pos:line="243" pos:column="55">(<argument><expr><name pos:line="243" pos:column="56">SCE_C_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="244" pos:column="41">sc</name><op:operator pos:line="244" pos:column="43">.</op:operator><name pos:line="244" pos:column="44">ForwardSetState</name></name><argument_list pos:line="244" pos:column="59">(<argument><expr><name pos:line="244" pos:column="60">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="245" pos:column="41">visibleChars</name> <op:operator pos:line="245" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="245" pos:column="56">0</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="247" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="249" pos:column="25">case <expr><name pos:line="249" pos:column="30">SCE_C_CHARACTER</name></expr> :
			<block pos:line="250" pos:column="25">{
				<if pos:line="251" pos:column="33">if <condition pos:line="251" pos:column="36">(<expr><name><name pos:line="251" pos:column="37">sc</name><op:operator pos:line="251" pos:column="39">.</op:operator><name pos:line="251" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="251" pos:column="50"> 
				<block pos:line="252" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="253" pos:column="41">sc</name><op:operator pos:line="253" pos:column="43">.</op:operator><name pos:line="253" pos:column="44">ChangeState</name></name><argument_list pos:line="253" pos:column="55">(<argument><expr><name pos:line="253" pos:column="56">SCE_C_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="254" pos:column="41">sc</name><op:operator pos:line="254" pos:column="43">.</op:operator><name pos:line="254" pos:column="44">ForwardSetState</name></name><argument_list pos:line="254" pos:column="59">(<argument><expr><name pos:line="254" pos:column="60">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="255" pos:column="41">visibleChars</name> <op:operator pos:line="255" pos:column="54">=</op:operator> <lit:literal type="number" pos:line="255" pos:column="56">0</lit:literal></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="257" pos:column="33">else <if pos:line="257" pos:column="38">if <condition pos:line="257" pos:column="41">(<expr><name><name pos:line="257" pos:column="42">sc</name><op:operator pos:line="257" pos:column="44">.</op:operator><name pos:line="257" pos:column="45">ch</name></name> <op:operator pos:line="257" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="257" pos:column="51">'\\'</lit:literal></expr>)</condition><then pos:line="257" pos:column="56"> 
				<block pos:line="258" pos:column="33">{
					<if pos:line="259" pos:column="41">if <condition pos:line="259" pos:column="44">(<expr><name><name pos:line="259" pos:column="45">sc</name><op:operator pos:line="259" pos:column="47">.</op:operator><name pos:line="259" pos:column="48">chNext</name></name> <op:operator pos:line="259" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="259" pos:column="58">'\"'</lit:literal> <op:operator pos:line="259" pos:column="63">||</op:operator> <name><name pos:line="259" pos:column="66">sc</name><op:operator pos:line="259" pos:column="68">.</op:operator><name pos:line="259" pos:column="69">chNext</name></name> <op:operator pos:line="259" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="259" pos:column="79">'\''</lit:literal> <op:operator pos:line="259" pos:column="84">||</op:operator> <name><name pos:line="259" pos:column="87">sc</name><op:operator pos:line="259" pos:column="89">.</op:operator><name pos:line="259" pos:column="90">chNext</name></name> <op:operator pos:line="259" pos:column="97">==</op:operator> <lit:literal type="char" pos:line="259" pos:column="100">'\\'</lit:literal></expr>)</condition><then pos:line="259" pos:column="105"> 
					<block pos:line="260" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="261" pos:column="49">sc</name><op:operator pos:line="261" pos:column="51">.</op:operator><name pos:line="261" pos:column="52">Forward</name></name><argument_list pos:line="261" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> 
				<else pos:line="264" pos:column="33">else <if pos:line="264" pos:column="38">if <condition pos:line="264" pos:column="41">(<expr><name><name pos:line="264" pos:column="42">sc</name><op:operator pos:line="264" pos:column="44">.</op:operator><name pos:line="264" pos:column="45">ch</name></name> <op:operator pos:line="264" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="264" pos:column="51">'\''</lit:literal></expr>)</condition><then pos:line="264" pos:column="56"> 
				<block pos:line="265" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="266" pos:column="41">sc</name><op:operator pos:line="266" pos:column="43">.</op:operator><name pos:line="266" pos:column="44">ForwardSetState</name></name><argument_list pos:line="266" pos:column="59">(<argument><expr><name pos:line="266" pos:column="60">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="268" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="270" pos:column="25">case <expr><name pos:line="270" pos:column="30">SCE_C_REGEX</name></expr> :
			<block pos:line="271" pos:column="25">{
				<if pos:line="272" pos:column="33">if <condition pos:line="272" pos:column="36">(<expr><name><name pos:line="272" pos:column="37">sc</name><op:operator pos:line="272" pos:column="39">.</op:operator><name pos:line="272" pos:column="40">ch</name></name> <op:operator pos:line="272" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="46">'\r'</lit:literal> <op:operator pos:line="272" pos:column="51">||</op:operator> <name><name pos:line="272" pos:column="54">sc</name><op:operator pos:line="272" pos:column="56">.</op:operator><name pos:line="272" pos:column="57">ch</name></name> <op:operator pos:line="272" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="63">'\n'</lit:literal> <op:operator pos:line="272" pos:column="68">||</op:operator> <name><name pos:line="272" pos:column="71">sc</name><op:operator pos:line="272" pos:column="73">.</op:operator><name pos:line="272" pos:column="74">ch</name></name> <op:operator pos:line="272" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="272" pos:column="80">'/'</lit:literal></expr>)</condition><then pos:line="272" pos:column="84"> 
				<block pos:line="273" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="274" pos:column="41">sc</name><op:operator pos:line="274" pos:column="43">.</op:operator><name pos:line="274" pos:column="44">ForwardSetState</name></name><argument_list pos:line="274" pos:column="59">(<argument><expr><name pos:line="274" pos:column="60">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="276" pos:column="33">else <if pos:line="276" pos:column="38">if <condition pos:line="276" pos:column="41">(<expr><name><name pos:line="276" pos:column="42">sc</name><op:operator pos:line="276" pos:column="44">.</op:operator><name pos:line="276" pos:column="45">ch</name></name> <op:operator pos:line="276" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="276" pos:column="51">'\\'</lit:literal></expr>)</condition><then pos:line="276" pos:column="56"> 
				<block pos:line="277" pos:column="33">{
					<comment type="line" pos:line="278" pos:column="41">// Gobble up the quoted character</comment>
					<if pos:line="279" pos:column="41">if <condition pos:line="279" pos:column="44">(<expr><name><name pos:line="279" pos:column="45">sc</name><op:operator pos:line="279" pos:column="47">.</op:operator><name pos:line="279" pos:column="48">chNext</name></name> <op:operator pos:line="279" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="279" pos:column="58">'\\'</lit:literal> <op:operator pos:line="279" pos:column="63">||</op:operator> <name><name pos:line="279" pos:column="66">sc</name><op:operator pos:line="279" pos:column="68">.</op:operator><name pos:line="279" pos:column="69">chNext</name></name> <op:operator pos:line="279" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="279" pos:column="79">'/'</lit:literal></expr>)</condition><then pos:line="279" pos:column="83"> 
					<block pos:line="280" pos:column="41">{
						<expr_stmt><expr><call><name><name pos:line="281" pos:column="49">sc</name><op:operator pos:line="281" pos:column="51">.</op:operator><name pos:line="281" pos:column="52">Forward</name></name><argument_list pos:line="281" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="284" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="286" pos:column="25">case <expr><name pos:line="286" pos:column="30">SCE_C_VERBATIM</name></expr> :
			<block pos:line="287" pos:column="25">{
				<if pos:line="288" pos:column="33">if <condition pos:line="288" pos:column="36">(<expr><name><name pos:line="288" pos:column="37">sc</name><op:operator pos:line="288" pos:column="39">.</op:operator><name pos:line="288" pos:column="40">ch</name></name> <op:operator pos:line="288" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="288" pos:column="46">'\"'</lit:literal></expr>)</condition><then pos:line="288" pos:column="51"> 
				<block pos:line="289" pos:column="33">{
					<if pos:line="290" pos:column="41">if <condition pos:line="290" pos:column="44">(<expr><name><name pos:line="290" pos:column="45">sc</name><op:operator pos:line="290" pos:column="47">.</op:operator><name pos:line="290" pos:column="48">chNext</name></name> <op:operator pos:line="290" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="290" pos:column="58">'\"'</lit:literal></expr>)</condition><then pos:line="290" pos:column="63"> 
						<expr_stmt><expr><call><name><name pos:line="291" pos:column="49">sc</name><op:operator pos:line="291" pos:column="51">.</op:operator><name pos:line="291" pos:column="52">Forward</name></name><argument_list pos:line="291" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="292" pos:column="41">else 
						<expr_stmt><expr><call><name><name pos:line="293" pos:column="49">sc</name><op:operator pos:line="293" pos:column="51">.</op:operator><name pos:line="293" pos:column="52">ForwardSetState</name></name><argument_list pos:line="293" pos:column="67">(<argument><expr><name pos:line="293" pos:column="68">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				}</block></then></if>
				<break pos:line="295" pos:column="33">break;</break>
			}</block> 
			</case><case pos:line="297" pos:column="25">case <expr><name pos:line="297" pos:column="30">SCE_C_UUID</name></expr> :
			<block pos:line="298" pos:column="25">{
				<if pos:line="299" pos:column="33">if <condition pos:line="299" pos:column="36">(<expr><name><name pos:line="299" pos:column="37">sc</name><op:operator pos:line="299" pos:column="39">.</op:operator><name pos:line="299" pos:column="40">ch</name></name> <op:operator pos:line="299" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="299" pos:column="46">'\r'</lit:literal> <op:operator pos:line="299" pos:column="51">||</op:operator> <name><name pos:line="299" pos:column="54">sc</name><op:operator pos:line="299" pos:column="56">.</op:operator><name pos:line="299" pos:column="57">ch</name></name> <op:operator pos:line="299" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="299" pos:column="63">'\n'</lit:literal> <op:operator pos:line="299" pos:column="68">||</op:operator> <name><name pos:line="299" pos:column="71">sc</name><op:operator pos:line="299" pos:column="73">.</op:operator><name pos:line="299" pos:column="74">ch</name></name> <op:operator pos:line="299" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="299" pos:column="80">')'</lit:literal></expr>)</condition><then pos:line="299" pos:column="84"> 
					<expr_stmt><expr><call><name><name pos:line="300" pos:column="41">sc</name><op:operator pos:line="300" pos:column="43">.</op:operator><name pos:line="300" pos:column="44">SetState</name></name><argument_list pos:line="300" pos:column="52">(<argument><expr><name pos:line="300" pos:column="53">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<break pos:line="301" pos:column="33">break;</break>
			}</block>
			</case><default pos:line="303" pos:column="25">default :
				<break pos:line="304" pos:column="33">break;</break>
		</default>}</block></switch>

		<comment type="line" pos:line="307" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="308" pos:column="17">if <condition pos:line="308" pos:column="20">(<expr><name><name pos:line="308" pos:column="21">sc</name><op:operator pos:line="308" pos:column="23">.</op:operator><name pos:line="308" pos:column="24">state</name></name> <op:operator pos:line="308" pos:column="30">==</op:operator> <name pos:line="308" pos:column="33">SCE_C_DEFAULT</name></expr>)</condition><then pos:line="308" pos:column="47"> 
		<block pos:line="309" pos:column="17">{
			<if pos:line="310" pos:column="25">if <condition pos:line="310" pos:column="28">(<expr><call><name><name pos:line="310" pos:column="29">sc</name><op:operator pos:line="310" pos:column="31">.</op:operator><name pos:line="310" pos:column="32">Match</name></name><argument_list pos:line="310" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="310" pos:column="38">'@'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="310" pos:column="43">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="310" pos:column="49"> 
			<block pos:line="311" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="312" pos:column="33">sc</name><op:operator pos:line="312" pos:column="35">.</op:operator><name pos:line="312" pos:column="36">SetState</name></name><argument_list pos:line="312" pos:column="44">(<argument><expr><name pos:line="312" pos:column="45">SCE_C_VERBATIM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="313" pos:column="33">sc</name><op:operator pos:line="313" pos:column="35">.</op:operator><name pos:line="313" pos:column="36">Forward</name></name><argument_list pos:line="313" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="315" pos:column="25">else <if pos:line="315" pos:column="30">if <condition pos:line="315" pos:column="33">(<expr><call><name pos:line="315" pos:column="34">IsADigit</name><argument_list pos:line="315" pos:column="42">(<argument><expr><name><name pos:line="315" pos:column="43">sc</name><op:operator pos:line="315" pos:column="45">.</op:operator><name pos:line="315" pos:column="46">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="315" pos:column="50">||</op:operator> <op:operator pos:line="315" pos:column="53">(</op:operator><name><name pos:line="315" pos:column="54">sc</name><op:operator pos:line="315" pos:column="56">.</op:operator><name pos:line="315" pos:column="57">ch</name></name> <op:operator pos:line="315" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="315" pos:column="63">'.'</lit:literal> <op:operator pos:line="315" pos:column="67">&amp;&amp;</op:operator> <call><name pos:line="315" pos:column="70">IsADigit</name><argument_list pos:line="315" pos:column="78">(<argument><expr><name><name pos:line="315" pos:column="79">sc</name><op:operator pos:line="315" pos:column="81">.</op:operator><name pos:line="315" pos:column="82">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="315" pos:column="89">)</op:operator></expr>)</condition><then pos:line="315" pos:column="91"> 
			<block pos:line="316" pos:column="25">{
				<if pos:line="317" pos:column="33">if <condition pos:line="317" pos:column="36">(<expr><name pos:line="317" pos:column="37">lastWordWasUUID</name></expr>)</condition><then pos:line="317" pos:column="53"> 
				<block pos:line="318" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="319" pos:column="41">sc</name><op:operator pos:line="319" pos:column="43">.</op:operator><name pos:line="319" pos:column="44">SetState</name></name><argument_list pos:line="319" pos:column="52">(<argument><expr><name pos:line="319" pos:column="53">SCE_C_UUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="320" pos:column="41">lastWordWasUUID</name> <op:operator pos:line="320" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="320" pos:column="59">false</lit:literal></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="322" pos:column="33">else 
				<block pos:line="323" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="324" pos:column="41">sc</name><op:operator pos:line="324" pos:column="43">.</op:operator><name pos:line="324" pos:column="44">SetState</name></name><argument_list pos:line="324" pos:column="52">(<argument><expr><name pos:line="324" pos:column="53">SCE_C_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> 
			<else pos:line="327" pos:column="25">else <if pos:line="327" pos:column="30">if <condition pos:line="327" pos:column="33">(<expr><call><name pos:line="327" pos:column="34">IsAWordStart</name><argument_list pos:line="327" pos:column="46">(<argument><expr><name><name pos:line="327" pos:column="47">sc</name><op:operator pos:line="327" pos:column="49">.</op:operator><name pos:line="327" pos:column="50">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="327" pos:column="54">||</op:operator> <op:operator pos:line="327" pos:column="57">(</op:operator><name><name pos:line="327" pos:column="58">sc</name><op:operator pos:line="327" pos:column="60">.</op:operator><name pos:line="327" pos:column="61">ch</name></name> <op:operator pos:line="327" pos:column="64">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="67">'@'</lit:literal><op:operator pos:line="327" pos:column="70">)</op:operator></expr>)</condition><then pos:line="327" pos:column="72"> 
			<block pos:line="328" pos:column="25">{
				<if pos:line="329" pos:column="33">if <condition pos:line="329" pos:column="36">(<expr><name pos:line="329" pos:column="37">lastWordWasUUID</name></expr>)</condition><then pos:line="329" pos:column="53"> 
				<block pos:line="330" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="331" pos:column="41">sc</name><op:operator pos:line="331" pos:column="43">.</op:operator><name pos:line="331" pos:column="44">SetState</name></name><argument_list pos:line="331" pos:column="52">(<argument><expr><name pos:line="331" pos:column="53">SCE_C_UUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="332" pos:column="41">lastWordWasUUID</name> <op:operator pos:line="332" pos:column="57">=</op:operator> <lit:literal type="boolean" pos:line="332" pos:column="59">false</lit:literal></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="334" pos:column="33">else 
				<block pos:line="335" pos:column="33">{
					<expr_stmt><expr><call><name><name pos:line="336" pos:column="41">sc</name><op:operator pos:line="336" pos:column="43">.</op:operator><name pos:line="336" pos:column="44">SetState</name></name><argument_list pos:line="336" pos:column="52">(<argument><expr><name pos:line="336" pos:column="53">SCE_C_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> 
			<else pos:line="339" pos:column="25">else <if pos:line="339" pos:column="30">if <condition pos:line="339" pos:column="33">(<expr><call><name><name pos:line="339" pos:column="34">sc</name><op:operator pos:line="339" pos:column="36">.</op:operator><name pos:line="339" pos:column="37">Match</name></name><argument_list pos:line="339" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="339" pos:column="43">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="339" pos:column="48">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="339" pos:column="53"> 
			<block pos:line="340" pos:column="25">{
				<if pos:line="341" pos:column="33">if <condition pos:line="341" pos:column="36">(<expr><call><name><name pos:line="341" pos:column="37">sc</name><op:operator pos:line="341" pos:column="39">.</op:operator><name pos:line="341" pos:column="40">Match</name></name><argument_list pos:line="341" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="341" pos:column="46">"/**"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="341" pos:column="53">||</op:operator> <call><name><name pos:line="341" pos:column="56">sc</name><op:operator pos:line="341" pos:column="58">.</op:operator><name pos:line="341" pos:column="59">Match</name></name><argument_list pos:line="341" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="341" pos:column="65">"/*!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="341" pos:column="72"> 
					<comment type="line" pos:line="342" pos:column="41">// Support of Qt/Doxygen doc. style</comment>
					<expr_stmt><expr><call><name><name pos:line="343" pos:column="41">sc</name><op:operator pos:line="343" pos:column="43">.</op:operator><name pos:line="343" pos:column="44">SetState</name></name><argument_list pos:line="343" pos:column="52">(<argument><expr><name pos:line="343" pos:column="53">SCE_C_COMMENTDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="344" pos:column="33">else 
					<expr_stmt><expr><call><name><name pos:line="345" pos:column="41">sc</name><op:operator pos:line="345" pos:column="43">.</op:operator><name pos:line="345" pos:column="44">SetState</name></name><argument_list pos:line="345" pos:column="52">(<argument><expr><name pos:line="345" pos:column="53">SCE_C_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><call><name><name pos:line="346" pos:column="33">sc</name><op:operator pos:line="346" pos:column="35">.</op:operator><name pos:line="346" pos:column="36">Forward</name></name><argument_list pos:line="346" pos:column="43">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="346" pos:column="49">// Eat the * so it isn't used for the end of the comment</comment>
			}</block></then> 
			<else pos:line="348" pos:column="25">else <if pos:line="348" pos:column="30">if <condition pos:line="348" pos:column="33">(<expr><call><name><name pos:line="348" pos:column="34">sc</name><op:operator pos:line="348" pos:column="36">.</op:operator><name pos:line="348" pos:column="37">Match</name></name><argument_list pos:line="348" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="348" pos:column="43">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="348" pos:column="48">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="348" pos:column="53"> 
			<block pos:line="349" pos:column="25">{
				<if pos:line="350" pos:column="33">if <condition pos:line="350" pos:column="36">(<expr><call><name><name pos:line="350" pos:column="37">sc</name><op:operator pos:line="350" pos:column="39">.</op:operator><name pos:line="350" pos:column="40">Match</name></name><argument_list pos:line="350" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="350" pos:column="46">"///"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="350" pos:column="53">||</op:operator> <call><name><name pos:line="350" pos:column="56">sc</name><op:operator pos:line="350" pos:column="58">.</op:operator><name pos:line="350" pos:column="59">Match</name></name><argument_list pos:line="350" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="350" pos:column="65">"//!"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="350" pos:column="72">	<comment type="line" pos:line="350" pos:column="73">// Support of Qt/Doxygen doc. style</comment>
					<expr_stmt><expr><call><name><name pos:line="351" pos:column="41">sc</name><op:operator pos:line="351" pos:column="43">.</op:operator><name pos:line="351" pos:column="44">SetState</name></name><argument_list pos:line="351" pos:column="52">(<argument><expr><name pos:line="351" pos:column="53">SCE_C_COMMENTLINEDOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="352" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="353" pos:column="41">sc</name><op:operator pos:line="353" pos:column="43">.</op:operator><name pos:line="353" pos:column="44">SetState</name></name><argument_list pos:line="353" pos:column="52">(<argument><expr><name pos:line="353" pos:column="53">SCE_C_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then> 
			<else pos:line="355" pos:column="25">else <if pos:line="355" pos:column="30">if <condition pos:line="355" pos:column="33">(<expr><name><name pos:line="355" pos:column="34">sc</name><op:operator pos:line="355" pos:column="36">.</op:operator><name pos:line="355" pos:column="37">ch</name></name> <op:operator pos:line="355" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="355" pos:column="43">'/'</lit:literal> <op:operator pos:line="355" pos:column="47">&amp;&amp;</op:operator> <call><name pos:line="355" pos:column="50">IsOKBeforeRE</name><argument_list pos:line="355" pos:column="62">(<argument><expr><name pos:line="355" pos:column="63">chPrevNonWhite</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="355" pos:column="79"> 
			<block pos:line="356" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="357" pos:column="33">sc</name><op:operator pos:line="357" pos:column="35">.</op:operator><name pos:line="357" pos:column="36">SetState</name></name><argument_list pos:line="357" pos:column="44">(<argument><expr><name pos:line="357" pos:column="45">SCE_C_REGEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> 
			<else pos:line="359" pos:column="25">else <if pos:line="359" pos:column="30">if <condition pos:line="359" pos:column="33">(<expr><name><name pos:line="359" pos:column="34">sc</name><op:operator pos:line="359" pos:column="36">.</op:operator><name pos:line="359" pos:column="37">ch</name></name> <op:operator pos:line="359" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="359" pos:column="43">'\"'</lit:literal></expr>)</condition><then pos:line="359" pos:column="48"> 
			<block pos:line="360" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="361" pos:column="33">sc</name><op:operator pos:line="361" pos:column="35">.</op:operator><name pos:line="361" pos:column="36">SetState</name></name><argument_list pos:line="361" pos:column="44">(<argument><expr><name pos:line="361" pos:column="45">SCE_C_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> 
			<else pos:line="363" pos:column="25">else <if pos:line="363" pos:column="30">if <condition pos:line="363" pos:column="33">(<expr><name><name pos:line="363" pos:column="34">sc</name><op:operator pos:line="363" pos:column="36">.</op:operator><name pos:line="363" pos:column="37">ch</name></name> <op:operator pos:line="363" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="363" pos:column="43">'\''</lit:literal></expr>)</condition><then pos:line="363" pos:column="48"> 
			<block pos:line="364" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="365" pos:column="33">sc</name><op:operator pos:line="365" pos:column="35">.</op:operator><name pos:line="365" pos:column="36">SetState</name></name><argument_list pos:line="365" pos:column="44">(<argument><expr><name pos:line="365" pos:column="45">SCE_C_CHARACTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> 
			<else pos:line="367" pos:column="25">else <if pos:line="367" pos:column="30">if <condition pos:line="367" pos:column="33">(<expr><name><name pos:line="367" pos:column="34">sc</name><op:operator pos:line="367" pos:column="36">.</op:operator><name pos:line="367" pos:column="37">ch</name></name> <op:operator pos:line="367" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="367" pos:column="43">'#'</lit:literal> <op:operator pos:line="367" pos:column="47">&amp;&amp;</op:operator> <name pos:line="367" pos:column="50">visibleChars</name> <op:operator pos:line="367" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="367" pos:column="66">0</lit:literal></expr>)</condition><then pos:line="367" pos:column="68"> 
			<block pos:line="368" pos:column="25">{
				<comment type="line" pos:line="369" pos:column="33">// Preprocessor commands are alone on their line</comment>
				<expr_stmt><expr><call><name><name pos:line="370" pos:column="33">sc</name><op:operator pos:line="370" pos:column="35">.</op:operator><name pos:line="370" pos:column="36">SetState</name></name><argument_list pos:line="370" pos:column="44">(<argument><expr><name pos:line="370" pos:column="45">SCE_C_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="371" pos:column="33">// Skip whitespace between # and preprocessor word</comment>
				<do pos:line="372" pos:column="33">do <block pos:line="372" pos:column="36">{
					<expr_stmt><expr><call><name><name pos:line="373" pos:column="41">sc</name><op:operator pos:line="373" pos:column="43">.</op:operator><name pos:line="373" pos:column="44">Forward</name></name><argument_list pos:line="373" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="374" pos:column="41">(<expr><op:operator pos:line="374" pos:column="42">(</op:operator><name><name pos:line="374" pos:column="43">sc</name><op:operator pos:line="374" pos:column="45">.</op:operator><name pos:line="374" pos:column="46">ch</name></name> <op:operator pos:line="374" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="374" pos:column="52">' '</lit:literal> <op:operator pos:line="374" pos:column="56">||</op:operator> <name><name pos:line="374" pos:column="59">sc</name><op:operator pos:line="374" pos:column="61">.</op:operator><name pos:line="374" pos:column="62">ch</name></name> <op:operator pos:line="374" pos:column="65">==</op:operator> <lit:literal type="char" pos:line="374" pos:column="68">'\t'</lit:literal><op:operator pos:line="374" pos:column="72">)</op:operator> <op:operator pos:line="374" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="374" pos:column="77">sc</name><op:operator pos:line="374" pos:column="79">.</op:operator><name pos:line="374" pos:column="80">More</name></name><argument_list pos:line="374" pos:column="84">()</argument_list></call></expr>)</condition>;</do>
				<if pos:line="375" pos:column="33">if <condition pos:line="375" pos:column="36">(<expr><name><name pos:line="375" pos:column="37">sc</name><op:operator pos:line="375" pos:column="39">.</op:operator><name pos:line="375" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="375" pos:column="50"> 
					<expr_stmt><expr><call><name><name pos:line="376" pos:column="41">sc</name><op:operator pos:line="376" pos:column="43">.</op:operator><name pos:line="376" pos:column="44">SetState</name></name><argument_list pos:line="376" pos:column="52">(<argument><expr><name pos:line="376" pos:column="53">SCE_C_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then>
			<else pos:line="378" pos:column="25">else <if pos:line="378" pos:column="30">if <condition pos:line="378" pos:column="33">(<expr><call><name pos:line="378" pos:column="34">isoperator</name><argument_list pos:line="378" pos:column="44">(<argument><expr><call><name><name pos:line="378" pos:column="45">static_cast</name><argument_list pos:line="378" pos:column="56">&lt;<argument><expr><name pos:line="378" pos:column="57">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="378" pos:column="62">(<argument><expr><name><name pos:line="378" pos:column="63">sc</name><op:operator pos:line="378" pos:column="65">.</op:operator><name pos:line="378" pos:column="66">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="378" pos:column="71">
			<block pos:line="379" pos:column="25">{
				<expr_stmt><expr><call><name><name pos:line="380" pos:column="33">sc</name><op:operator pos:line="380" pos:column="35">.</op:operator><name pos:line="380" pos:column="36">SetState</name></name><argument_list pos:line="380" pos:column="44">(<argument><expr><name pos:line="380" pos:column="45">SCE_C_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

		<if pos:line="384" pos:column="17">if <condition pos:line="384" pos:column="20">(<expr><name><name pos:line="384" pos:column="21">sc</name><op:operator pos:line="384" pos:column="23">.</op:operator><name pos:line="384" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="384" pos:column="34"> <block pos:line="384" pos:column="35">{
			<comment type="line" pos:line="385" pos:column="25">// Reset states to begining of colourise so no surprises</comment>
			<comment type="line" pos:line="386" pos:column="25">// if different sets of lines lexed.</comment>
			<expr_stmt><expr><name pos:line="387" pos:column="25">chPrevNonWhite</name> <op:operator pos:line="387" pos:column="40">=</op:operator> <lit:literal type="char" pos:line="387" pos:column="42">' '</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="388" pos:column="25">visibleChars</name> <op:operator pos:line="388" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="388" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="389" pos:column="25">lastWordWasUUID</name> <op:operator pos:line="389" pos:column="41">=</op:operator> <lit:literal type="boolean" pos:line="389" pos:column="43">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="391" pos:column="17">if <condition pos:line="391" pos:column="20">(<expr><op:operator pos:line="391" pos:column="21">!</op:operator><call><name pos:line="391" pos:column="22">IsASpace</name><argument_list pos:line="391" pos:column="30">(<argument><expr><name><name pos:line="391" pos:column="31">sc</name><op:operator pos:line="391" pos:column="33">.</op:operator><name pos:line="391" pos:column="34">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="391" pos:column="38"> <block pos:line="391" pos:column="39">{
			<expr_stmt><expr><name pos:line="392" pos:column="25">chPrevNonWhite</name> <op:operator pos:line="392" pos:column="40">=</op:operator> <name><name pos:line="392" pos:column="42">sc</name><op:operator pos:line="392" pos:column="44">.</op:operator><name pos:line="392" pos:column="45">ch</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="393" pos:column="25">visibleChars</name><op:operator pos:line="393" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="396" pos:column="9">sc</name><op:operator pos:line="396" pos:column="11">.</op:operator><name pos:line="396" pos:column="12">Complete</name></name><argument_list pos:line="396" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="399" pos:column="1">static</specifier> <name pos:line="399" pos:column="8">bool</name></type> <name pos:line="399" pos:column="13">IsStreamCommentStyle</name><parameter_list pos:line="399" pos:column="33">(<param><decl><type><name pos:line="399" pos:column="34">int</name></type> <name pos:line="399" pos:column="38">style</name></decl></param>)</parameter_list> <block pos:line="399" pos:column="45">{
	<return pos:line="400" pos:column="9">return <expr><name pos:line="400" pos:column="16">style</name> <op:operator pos:line="400" pos:column="22">==</op:operator> <name pos:line="400" pos:column="25">SCE_C_COMMENT</name> <op:operator pos:line="400" pos:column="39">||</op:operator>
	       <name pos:line="401" pos:column="16">style</name> <op:operator pos:line="401" pos:column="22">==</op:operator> <name pos:line="401" pos:column="25">SCE_C_COMMENTDOC</name> <op:operator pos:line="401" pos:column="42">||</op:operator>
	       <name pos:line="402" pos:column="16">style</name> <op:operator pos:line="402" pos:column="22">==</op:operator> <name pos:line="402" pos:column="25">SCE_C_COMMENTDOCKEYWORD</name> <op:operator pos:line="402" pos:column="49">||</op:operator>
	       <name pos:line="403" pos:column="16">style</name> <op:operator pos:line="403" pos:column="22">==</op:operator> <name pos:line="403" pos:column="25">SCE_C_COMMENTDOCKEYWORDERROR</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="406" pos:column="1">static</specifier> <name pos:line="406" pos:column="8">bool</name></type> <name pos:line="406" pos:column="13">matchKeyword</name><parameter_list pos:line="406" pos:column="25">(<param><decl><type><name pos:line="406" pos:column="26">unsigned</name> <name pos:line="406" pos:column="35">int</name></type> <name pos:line="406" pos:column="39">start</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="46">WordList</name> <type:modifier pos:line="406" pos:column="55">&amp;</type:modifier></type><name pos:line="406" pos:column="56">keywords</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="66">Accessor</name> <type:modifier pos:line="406" pos:column="75">&amp;</type:modifier></type><name pos:line="406" pos:column="76">styler</name></decl></param>, <param><decl><type><name pos:line="406" pos:column="84">int</name></type> <name pos:line="406" pos:column="88">keywordtype</name></decl></param>)</parameter_list> <block pos:line="406" pos:column="101">{
	<decl_stmt><decl><type><name pos:line="407" pos:column="9">bool</name></type> <name pos:line="407" pos:column="14">FoundKeyword</name> <init pos:line="407" pos:column="27">= <expr><lit:literal type="boolean" pos:line="407" pos:column="29">false</lit:literal></expr></init></decl>;</decl_stmt>

	<for pos:line="409" pos:column="9">for (<init><decl><type><name pos:line="409" pos:column="14">unsigned</name> <name pos:line="409" pos:column="23">int</name></type> <name pos:line="409" pos:column="27">i</name> <init pos:line="409" pos:column="29">= <expr><lit:literal type="number" pos:line="409" pos:column="31">0</lit:literal></expr></init></decl>;</init>
			<condition><expr><call><name pos:line="410" pos:column="25">strlen</name><argument_list pos:line="410" pos:column="31">(<argument><expr><name><name pos:line="410" pos:column="32">keywords</name><op:operator pos:line="410" pos:column="40">.</op:operator><name pos:line="410" pos:column="41">words</name><index pos:line="410" pos:column="46">[<expr><name pos:line="410" pos:column="47">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="410" pos:column="51">&gt;</op:operator> <lit:literal type="number" pos:line="410" pos:column="53">0</lit:literal> <op:operator pos:line="410" pos:column="55">&amp;&amp;</op:operator> <op:operator pos:line="410" pos:column="58">!</op:operator><name pos:line="410" pos:column="59">FoundKeyword</name></expr>;</condition>
	        <incr><expr><name pos:line="411" pos:column="17">i</name><op:operator pos:line="411" pos:column="18">++</op:operator></expr></incr>) <block pos:line="411" pos:column="22">{
		<if pos:line="412" pos:column="17">if <condition pos:line="412" pos:column="20">(<expr><call><name pos:line="412" pos:column="21">atoi</name><argument_list pos:line="412" pos:column="25">(<argument><expr><name><name pos:line="412" pos:column="26">keywords</name><op:operator pos:line="412" pos:column="34">.</op:operator><name pos:line="412" pos:column="35">words</name><index pos:line="412" pos:column="40">[<expr><name pos:line="412" pos:column="41">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="412" pos:column="45">==</op:operator> <name pos:line="412" pos:column="48">keywordtype</name></expr>)</condition><then pos:line="412" pos:column="60"> <block pos:line="412" pos:column="61">{
			<expr_stmt><expr><name pos:line="413" pos:column="25">FoundKeyword</name> <op:operator pos:line="413" pos:column="38">=</op:operator> <call><name><name pos:line="413" pos:column="40">styler</name><op:operator pos:line="413" pos:column="46">.</op:operator><name pos:line="413" pos:column="47">Match</name></name><argument_list pos:line="413" pos:column="52">(<argument><expr><name pos:line="413" pos:column="53">start</name></expr></argument>, <argument><expr><op:operator pos:line="413" pos:column="60">(</op:operator><op:operator pos:line="413" pos:column="61">(</op:operator><name pos:line="413" pos:column="62">char</name> <op:operator pos:line="413" pos:column="67">*</op:operator><op:operator pos:line="413" pos:column="68">)</op:operator><name><name pos:line="413" pos:column="69">keywords</name><op:operator pos:line="413" pos:column="77">.</op:operator><name pos:line="413" pos:column="78">words</name><index pos:line="413" pos:column="83">[<expr><name pos:line="413" pos:column="84">i</name></expr>]</index></name><op:operator pos:line="413" pos:column="86">)</op:operator> <op:operator pos:line="413" pos:column="88">+</op:operator> <lit:literal type="number" pos:line="413" pos:column="90">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<return pos:line="416" pos:column="9">return <expr><name pos:line="416" pos:column="16">FoundKeyword</name></expr>;</return>
}</block></function>

<function><type><specifier pos:line="419" pos:column="1">static</specifier> <name pos:line="419" pos:column="8">bool</name></type> <name pos:line="419" pos:column="13">IsCommentLine</name><parameter_list pos:line="419" pos:column="26">(<param><decl><type><name pos:line="419" pos:column="27">int</name></type> <name pos:line="419" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="419" pos:column="37">Accessor</name> <type:modifier pos:line="419" pos:column="46">&amp;</type:modifier></type><name pos:line="419" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="419" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="420" pos:column="9">unsigned</name> <name pos:line="420" pos:column="18">int</name></type> <name pos:line="420" pos:column="22">Pos</name> <init pos:line="420" pos:column="26">= <expr><call><name><name pos:line="420" pos:column="28">styler</name><op:operator pos:line="420" pos:column="34">.</op:operator><name pos:line="420" pos:column="35">LineStart</name></name><argument_list pos:line="420" pos:column="44">(<argument><expr><name pos:line="420" pos:column="45">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="421" pos:column="9">while <condition pos:line="421" pos:column="15">(<expr><call><name><name pos:line="421" pos:column="16">styler</name><op:operator pos:line="421" pos:column="22">.</op:operator><name pos:line="421" pos:column="23">GetLine</name></name><argument_list pos:line="421" pos:column="30">(<argument><expr><name pos:line="421" pos:column="31">Pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="421" pos:column="36">==</op:operator> <name pos:line="421" pos:column="39">line</name></expr>)</condition> <block pos:line="421" pos:column="45">{
		<decl_stmt><decl><type><name pos:line="422" pos:column="17">int</name></type> <name pos:line="422" pos:column="21">PosStyle</name> <init pos:line="422" pos:column="30">= <expr><call><name><name pos:line="422" pos:column="32">styler</name><op:operator pos:line="422" pos:column="38">.</op:operator><name pos:line="422" pos:column="39">StyleAt</name></name><argument_list pos:line="422" pos:column="46">(<argument><expr><name pos:line="422" pos:column="47">Pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="424" pos:column="17">if <condition pos:line="424" pos:column="20">(	<expr><op:operator pos:line="424" pos:column="25">!</op:operator><call><name pos:line="424" pos:column="26">IsStreamCommentStyle</name><argument_list pos:line="424" pos:column="46">(<argument><expr><name pos:line="424" pos:column="47">PosStyle</name></expr></argument>)</argument_list></call>
		        <op:operator pos:line="425" pos:column="25">&amp;&amp;</op:operator>
		        <name pos:line="426" pos:column="25">PosStyle</name> <op:operator pos:line="426" pos:column="34">!=</op:operator> <name pos:line="426" pos:column="37">SCE_C_COMMENTLINEDOC</name>
		        <op:operator pos:line="427" pos:column="25">&amp;&amp;</op:operator>
		        <name pos:line="428" pos:column="25">PosStyle</name> <op:operator pos:line="428" pos:column="34">!=</op:operator> <name pos:line="428" pos:column="37">SCE_C_COMMENTLINE</name>
		        <op:operator pos:line="429" pos:column="25">&amp;&amp;</op:operator>
		        <op:operator pos:line="430" pos:column="25">!</op:operator><call><name pos:line="430" pos:column="26">IsASpace</name><argument_list pos:line="430" pos:column="34">(<argument><expr><call><name><name pos:line="430" pos:column="35">styler</name><op:operator pos:line="430" pos:column="41">.</op:operator><name pos:line="430" pos:column="42">SafeGetCharAt</name></name><argument_list pos:line="430" pos:column="55">(<argument><expr><name pos:line="430" pos:column="56">Pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
		   )</condition><then pos:line="431" pos:column="21">
			<return pos:line="432" pos:column="25">return <expr><lit:literal type="boolean" pos:line="432" pos:column="32">false</lit:literal></expr>;</return></then></if>
		<expr_stmt><expr><name pos:line="433" pos:column="17">Pos</name><op:operator pos:line="433" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></while>

	<return pos:line="436" pos:column="9">return <expr><lit:literal type="boolean" pos:line="436" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>


<function><type><specifier pos:line="440" pos:column="1">static</specifier> <name pos:line="440" pos:column="8">void</name></type> <name pos:line="440" pos:column="13">FoldObjCDoc</name><parameter_list pos:line="440" pos:column="24">(<param><decl><type><name pos:line="440" pos:column="25">unsigned</name> <name pos:line="440" pos:column="34">int</name></type> <name pos:line="440" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="440" pos:column="48">int</name></type> <name pos:line="440" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="440" pos:column="60">int</name></type> <name pos:line="440" pos:column="64">initStyle</name></decl></param>, <param><decl><type><name pos:line="440" pos:column="75">WordList</name> <type:modifier pos:line="440" pos:column="84">*</type:modifier></type><name><name pos:line="440" pos:column="85">keywordlists</name><index pos:line="440" pos:column="97">[]</index></name></decl></param>,
                       <param><decl><type><name pos:line="441" pos:column="24">Accessor</name> <type:modifier pos:line="441" pos:column="33">&amp;</type:modifier></type><name pos:line="441" pos:column="34">styler</name></decl></param>)</parameter_list> <block pos:line="441" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="442" pos:column="9">WordList</name> <type:modifier pos:line="442" pos:column="18">&amp;</type:modifier></type><name pos:line="442" pos:column="19">keywords4</name> <init pos:line="442" pos:column="29">= <expr><op:operator pos:line="442" pos:column="31">*</op:operator><name><name pos:line="442" pos:column="32">keywordlists</name><index pos:line="442" pos:column="44">[<expr><lit:literal type="number" pos:line="442" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="444" pos:column="9">bool</name></type> <name pos:line="444" pos:column="14">foldComment</name> <init pos:line="444" pos:column="26">= <expr><call><name><name pos:line="444" pos:column="28">styler</name><op:operator pos:line="444" pos:column="34">.</op:operator><name pos:line="444" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="444" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="444" pos:column="50">"fold.comment"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="444" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="444" pos:column="69">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="445" pos:column="9">bool</name></type> <name pos:line="445" pos:column="14">foldPreprocessor</name> <init pos:line="445" pos:column="31">= <expr><call><name><name pos:line="445" pos:column="33">styler</name><op:operator pos:line="445" pos:column="39">.</op:operator><name pos:line="445" pos:column="40">GetPropertyInt</name></name><argument_list pos:line="445" pos:column="54">(<argument><expr><lit:literal type="string" pos:line="445" pos:column="55">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="445" pos:column="76">!=</op:operator> <lit:literal type="number" pos:line="445" pos:column="79">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="446" pos:column="9">bool</name></type> <name pos:line="446" pos:column="14">foldCompact</name> <init pos:line="446" pos:column="26">= <expr><call><name><name pos:line="446" pos:column="28">styler</name><op:operator pos:line="446" pos:column="34">.</op:operator><name pos:line="446" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="446" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="446" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="446" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="446" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="446" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="447" pos:column="9">bool</name></type> <name pos:line="447" pos:column="14">firstLine</name> <init pos:line="447" pos:column="24">= <expr><lit:literal type="boolean" pos:line="447" pos:column="26">true</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="448" pos:column="9">unsigned</name> <name pos:line="448" pos:column="18">int</name></type> <name pos:line="448" pos:column="22">endPos</name> <init pos:line="448" pos:column="29">= <expr><name pos:line="448" pos:column="31">startPos</name> <op:operator pos:line="448" pos:column="40">+</op:operator> <name pos:line="448" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="449" pos:column="9">int</name></type> <name pos:line="449" pos:column="13">visibleChars</name> <init pos:line="449" pos:column="26">= <expr><lit:literal type="number" pos:line="449" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="450" pos:column="9">int</name></type> <name pos:line="450" pos:column="13">lineCurrent</name> <init pos:line="450" pos:column="25">= <expr><call><name><name pos:line="450" pos:column="27">styler</name><op:operator pos:line="450" pos:column="33">.</op:operator><name pos:line="450" pos:column="34">GetLine</name></name><argument_list pos:line="450" pos:column="41">(<argument><expr><name pos:line="450" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="451" pos:column="9">int</name></type> <name pos:line="451" pos:column="13">levelPrev</name> <init pos:line="451" pos:column="23">= <expr><call><name><name pos:line="451" pos:column="25">styler</name><op:operator pos:line="451" pos:column="31">.</op:operator><name pos:line="451" pos:column="32">LevelAt</name></name><argument_list pos:line="451" pos:column="39">(<argument><expr><name pos:line="451" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="451" pos:column="53">&amp;</op:operator> <name pos:line="451" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="452" pos:column="9">int</name></type> <name pos:line="452" pos:column="13">levelCurrent</name> <init pos:line="452" pos:column="26">= <expr><name pos:line="452" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="453" pos:column="9">int</name></type> <name pos:line="453" pos:column="13">levelPrevPrev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="454" pos:column="9">int</name></type> <name pos:line="454" pos:column="13">levelUnindent</name> <init pos:line="454" pos:column="27">= <expr><lit:literal type="number" pos:line="454" pos:column="29">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="455" pos:column="9">char</name></type> <name pos:line="455" pos:column="14">chNext</name> <init pos:line="455" pos:column="21">= <expr><name><name pos:line="455" pos:column="23">styler</name><index pos:line="455" pos:column="29">[<expr><name pos:line="455" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="456" pos:column="9">int</name></type> <name pos:line="456" pos:column="13">styleNext</name> <init pos:line="456" pos:column="23">= <expr><call><name><name pos:line="456" pos:column="25">styler</name><op:operator pos:line="456" pos:column="31">.</op:operator><name pos:line="456" pos:column="32">StyleAt</name></name><argument_list pos:line="456" pos:column="39">(<argument><expr><name pos:line="456" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="457" pos:column="9">int</name></type> <name pos:line="457" pos:column="13">style</name> <init pos:line="457" pos:column="19">= <expr><name pos:line="457" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>

	<if pos:line="459" pos:column="9">if <condition pos:line="459" pos:column="12">(<expr><name pos:line="459" pos:column="13">lineCurrent</name> <op:operator pos:line="459" pos:column="25">==</op:operator> <lit:literal type="number" pos:line="459" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="459" pos:column="30"> <block pos:line="459" pos:column="31">{
		<expr_stmt><expr><name pos:line="460" pos:column="17">levelPrevPrev</name> <op:operator pos:line="460" pos:column="31">=</op:operator> <name pos:line="460" pos:column="33">levelPrev</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="461" pos:column="11">else <block pos:line="461" pos:column="16">{
		<expr_stmt><expr><name pos:line="462" pos:column="17">levelPrevPrev</name> <op:operator pos:line="462" pos:column="31">=</op:operator> <call><name><name pos:line="462" pos:column="33">styler</name><op:operator pos:line="462" pos:column="39">.</op:operator><name pos:line="462" pos:column="40">LevelAt</name></name><argument_list pos:line="462" pos:column="47">(<argument><expr><name pos:line="462" pos:column="48">lineCurrent</name> <op:operator pos:line="462" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="462" pos:column="62">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="462" pos:column="65">&amp;</op:operator> <name pos:line="462" pos:column="67">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt>
	}</block></else></if>

	<for pos:line="465" pos:column="9">for (<init><decl><type><name pos:line="465" pos:column="14">unsigned</name> <name pos:line="465" pos:column="23">int</name></type> <name pos:line="465" pos:column="27">i</name> <init pos:line="465" pos:column="29">= <expr><name pos:line="465" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="465" pos:column="41">i</name> <op:operator pos:line="465" pos:column="43">&lt;</op:operator> <name pos:line="465" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="465" pos:column="53">i</name><op:operator pos:line="465" pos:column="54">++</op:operator></expr></incr>) <block pos:line="465" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="466" pos:column="17">char</name></type> <name pos:line="466" pos:column="22">ch</name> <init pos:line="466" pos:column="25">= <expr><name pos:line="466" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="467" pos:column="17">chNext</name> <op:operator pos:line="467" pos:column="24">=</op:operator> <call><name><name pos:line="467" pos:column="26">styler</name><op:operator pos:line="467" pos:column="32">.</op:operator><name pos:line="467" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="467" pos:column="46">(<argument><expr><name pos:line="467" pos:column="47">i</name> <op:operator pos:line="467" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="467" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="468" pos:column="17">int</name></type> <name pos:line="468" pos:column="21">stylePrev</name> <init pos:line="468" pos:column="31">= <expr><name pos:line="468" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="469" pos:column="17">style</name> <op:operator pos:line="469" pos:column="23">=</op:operator> <name pos:line="469" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="470" pos:column="17">styleNext</name> <op:operator pos:line="470" pos:column="27">=</op:operator> <call><name><name pos:line="470" pos:column="29">styler</name><op:operator pos:line="470" pos:column="35">.</op:operator><name pos:line="470" pos:column="36">StyleAt</name></name><argument_list pos:line="470" pos:column="43">(<argument><expr><name pos:line="470" pos:column="44">i</name> <op:operator pos:line="470" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="470" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="472" pos:column="17">bool</name></type> <name pos:line="472" pos:column="22">atEOL</name> <init pos:line="472" pos:column="28">= <expr><op:operator pos:line="472" pos:column="30">(</op:operator><name pos:line="472" pos:column="31">ch</name> <op:operator pos:line="472" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="472" pos:column="37">'\r'</lit:literal> <op:operator pos:line="472" pos:column="42">&amp;&amp;</op:operator> <name pos:line="472" pos:column="45">chNext</name> <op:operator pos:line="472" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="472" pos:column="55">'\n'</lit:literal><op:operator pos:line="472" pos:column="59">)</op:operator> <op:operator pos:line="472" pos:column="61">||</op:operator> <op:operator pos:line="472" pos:column="64">(</op:operator><name pos:line="472" pos:column="65">ch</name> <op:operator pos:line="472" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="472" pos:column="71">'\n'</lit:literal><op:operator pos:line="472" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>

		<if pos:line="474" pos:column="17">if <condition pos:line="474" pos:column="20">(<expr><name pos:line="474" pos:column="21">foldComment</name> <op:operator pos:line="474" pos:column="33">&amp;&amp;</op:operator> <call><name pos:line="474" pos:column="36">IsStreamCommentStyle</name><argument_list pos:line="474" pos:column="56">(<argument><expr><name pos:line="474" pos:column="57">style</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="474" pos:column="64"> <block pos:line="474" pos:column="65">{
			<if pos:line="475" pos:column="25">if <condition pos:line="475" pos:column="28">(<expr><op:operator pos:line="475" pos:column="29">!</op:operator><call><name pos:line="475" pos:column="30">IsStreamCommentStyle</name><argument_list pos:line="475" pos:column="50">(<argument><expr><name pos:line="475" pos:column="51">stylePrev</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="475" pos:column="62"> <block pos:line="475" pos:column="63">{
				<expr_stmt><expr><name pos:line="476" pos:column="33">levelCurrent</name><op:operator pos:line="476" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="477" pos:column="27">else <if pos:line="477" pos:column="32">if <condition pos:line="477" pos:column="35">(<expr><op:operator pos:line="477" pos:column="36">!</op:operator><call><name pos:line="477" pos:column="37">IsStreamCommentStyle</name><argument_list pos:line="477" pos:column="57">(<argument><expr><name pos:line="477" pos:column="58">styleNext</name></expr></argument>)</argument_list></call> <op:operator pos:line="477" pos:column="69">&amp;&amp;</op:operator> <op:operator pos:line="477" pos:column="72">!</op:operator><name pos:line="477" pos:column="73">atEOL</name></expr>)</condition><then pos:line="477" pos:column="79"> <block pos:line="477" pos:column="80">{
				<comment type="line" pos:line="478" pos:column="33">// Comments don't end at end of line and the next character may be unstyled.</comment>
				<expr_stmt><expr><name pos:line="479" pos:column="33">levelCurrent</name><op:operator pos:line="479" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<if pos:line="482" pos:column="17">if <condition pos:line="482" pos:column="20">(<expr><name pos:line="482" pos:column="21">foldPreprocessor</name> <op:operator pos:line="482" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="482" pos:column="41">(</op:operator><name pos:line="482" pos:column="42">style</name> <op:operator pos:line="482" pos:column="48">==</op:operator> <name pos:line="482" pos:column="51">SCE_C_PREPROCESSOR</name><op:operator pos:line="482" pos:column="69">)</op:operator></expr>)</condition><then pos:line="482" pos:column="71"> <block pos:line="482" pos:column="72">{
			<if pos:line="483" pos:column="25">if <condition pos:line="483" pos:column="28">(<expr><name pos:line="483" pos:column="29">ch</name> <op:operator pos:line="483" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="483" pos:column="35">'#'</lit:literal></expr>)</condition><then pos:line="483" pos:column="39"> <block pos:line="483" pos:column="40">{
				<decl_stmt><decl><type><name pos:line="484" pos:column="33">unsigned</name> <name pos:line="484" pos:column="42">int</name></type> <name pos:line="484" pos:column="46">j</name> <init pos:line="484" pos:column="48">= <expr><name pos:line="484" pos:column="50">i</name> <op:operator pos:line="484" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="484" pos:column="54">1</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="485" pos:column="33">while <condition pos:line="485" pos:column="39">(<expr><op:operator pos:line="485" pos:column="40">(</op:operator><name pos:line="485" pos:column="41">j</name> <op:operator pos:line="485" pos:column="43">&lt;</op:operator> <name pos:line="485" pos:column="45">endPos</name><op:operator pos:line="485" pos:column="51">)</op:operator> <op:operator pos:line="485" pos:column="53">&amp;&amp;</op:operator> <call><name pos:line="485" pos:column="56">IsASpaceOrTab</name><argument_list pos:line="485" pos:column="69">(<argument><expr><call><name><name pos:line="485" pos:column="70">styler</name><op:operator pos:line="485" pos:column="76">.</op:operator><name pos:line="485" pos:column="77">SafeGetCharAt</name></name><argument_list pos:line="485" pos:column="90">(<argument><expr><name pos:line="485" pos:column="91">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="485" pos:column="96">{
					<expr_stmt><expr><name pos:line="486" pos:column="41">j</name><op:operator pos:line="486" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>

				<if pos:line="489" pos:column="33">if <condition pos:line="489" pos:column="36">(<expr><call><name><name pos:line="489" pos:column="37">styler</name><op:operator pos:line="489" pos:column="43">.</op:operator><name pos:line="489" pos:column="44">Match</name></name><argument_list pos:line="489" pos:column="49">(<argument><expr><name pos:line="489" pos:column="50">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="489" pos:column="53">"region"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="489" pos:column="63">||</op:operator> <call><name><name pos:line="489" pos:column="66">styler</name><op:operator pos:line="489" pos:column="72">.</op:operator><name pos:line="489" pos:column="73">Match</name></name><argument_list pos:line="489" pos:column="78">(<argument><expr><name pos:line="489" pos:column="79">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="489" pos:column="82">"if"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="489" pos:column="88"> <block pos:line="489" pos:column="89">{
					<expr_stmt><expr><name pos:line="490" pos:column="41">levelCurrent</name><op:operator pos:line="490" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="491" pos:column="35">else <if pos:line="491" pos:column="40">if <condition pos:line="491" pos:column="43">(<expr><call><name><name pos:line="491" pos:column="44">styler</name><op:operator pos:line="491" pos:column="50">.</op:operator><name pos:line="491" pos:column="51">Match</name></name><argument_list pos:line="491" pos:column="56">(<argument><expr><name pos:line="491" pos:column="57">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="491" pos:column="60">"end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="491" pos:column="67"> <block pos:line="491" pos:column="68">{
					<expr_stmt><expr><name pos:line="492" pos:column="41">levelCurrent</name><op:operator pos:line="492" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>

		<if pos:line="497" pos:column="17">if <condition pos:line="497" pos:column="20">(<expr><name pos:line="497" pos:column="21">style</name> <op:operator pos:line="497" pos:column="27">==</op:operator> <name pos:line="497" pos:column="30">SCE_C_OPERATOR</name>
		        <op:operator pos:line="498" pos:column="25">||</op:operator>
		        <name pos:line="499" pos:column="25">style</name> <op:operator pos:line="499" pos:column="31">==</op:operator> <name pos:line="499" pos:column="34">SCE_C_COMMENT</name>
		        <op:operator pos:line="500" pos:column="25">||</op:operator>
		        <name pos:line="501" pos:column="25">style</name> <op:operator pos:line="501" pos:column="31">==</op:operator> <name pos:line="501" pos:column="34">SCE_C_COMMENTLINE</name></expr>)</condition><then pos:line="501" pos:column="52"> <block pos:line="501" pos:column="53">{

			<if pos:line="503" pos:column="25">if <condition pos:line="503" pos:column="28">(<expr><name pos:line="503" pos:column="29">ch</name> <op:operator pos:line="503" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="503" pos:column="35">'{'</lit:literal></expr>)</condition><then pos:line="503" pos:column="39"> <block pos:line="503" pos:column="40">{
				<expr_stmt><expr><name pos:line="504" pos:column="33">levelCurrent</name><op:operator pos:line="504" pos:column="45">++</op:operator></expr>;</expr_stmt>
				<comment type="line" pos:line="505" pos:column="33">// Special handling if line has closing brace followed by opening brace.</comment>
				<if pos:line="506" pos:column="33">if <condition pos:line="506" pos:column="36">(<expr><name pos:line="506" pos:column="37">levelCurrent</name> <op:operator pos:line="506" pos:column="50">==</op:operator> <name pos:line="506" pos:column="53">levelPrev</name></expr>)</condition><then pos:line="506" pos:column="63"> <block pos:line="506" pos:column="64">{
					<if pos:line="507" pos:column="41">if <condition pos:line="507" pos:column="44">(<expr><name pos:line="507" pos:column="45">firstLine</name></expr>)</condition><then pos:line="507" pos:column="55">
						<expr_stmt><expr><name pos:line="508" pos:column="49">levelUnindent</name> <op:operator pos:line="508" pos:column="63">=</op:operator> <lit:literal type="number" pos:line="508" pos:column="65">1</lit:literal></expr>;</expr_stmt></then>
					<else pos:line="509" pos:column="41">else
						<expr_stmt><expr><name pos:line="510" pos:column="49">levelUnindent</name> <op:operator pos:line="510" pos:column="63">=</op:operator> <op:operator pos:line="510" pos:column="65">-</op:operator><lit:literal type="number" pos:line="510" pos:column="66">1</lit:literal></expr>;</expr_stmt></else></if>
				}</block></then></if>
			}</block></then> <else pos:line="512" pos:column="27">else <if pos:line="512" pos:column="32">if <condition pos:line="512" pos:column="35">(<expr><name pos:line="512" pos:column="36">ch</name> <op:operator pos:line="512" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="512" pos:column="42">'}'</lit:literal></expr>)</condition><then pos:line="512" pos:column="46"> <block pos:line="512" pos:column="47">{
				<expr_stmt><expr><name pos:line="513" pos:column="33">levelCurrent</name><op:operator pos:line="513" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>

		<if pos:line="517" pos:column="17">if <condition pos:line="517" pos:column="20">(<expr><name pos:line="517" pos:column="21">style</name> <op:operator pos:line="517" pos:column="27">==</op:operator> <name pos:line="517" pos:column="30">SCE_OBJC_DIRECTIVE</name></expr>)</condition><then pos:line="517" pos:column="49">
		<block pos:line="518" pos:column="17">{
			<if pos:line="519" pos:column="25">if <condition pos:line="519" pos:column="28">(<expr><name pos:line="519" pos:column="29">ch</name> <op:operator pos:line="519" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="519" pos:column="35">'@'</lit:literal></expr>)</condition><then pos:line="519" pos:column="39"> 
			<block pos:line="520" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="521" pos:column="33">unsigned</name> <name pos:line="521" pos:column="42">int</name></type> <name pos:line="521" pos:column="46">j</name> <init pos:line="521" pos:column="48">= <expr><name pos:line="521" pos:column="50">i</name> <op:operator pos:line="521" pos:column="52">+</op:operator> <lit:literal type="number" pos:line="521" pos:column="54">1</lit:literal></expr></init></decl>;</decl_stmt>
				<if pos:line="522" pos:column="33">if <condition pos:line="522" pos:column="36">(<expr><call><name><name pos:line="522" pos:column="37">styler</name><op:operator pos:line="522" pos:column="43">.</op:operator><name pos:line="522" pos:column="44">Match</name></name><argument_list pos:line="522" pos:column="49">(<argument><expr><name pos:line="522" pos:column="50">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="522" pos:column="53">"interface"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="522" pos:column="66">||</op:operator> <call><name><name pos:line="522" pos:column="69">styler</name><op:operator pos:line="522" pos:column="75">.</op:operator><name pos:line="522" pos:column="76">Match</name></name><argument_list pos:line="522" pos:column="81">(<argument><expr><name pos:line="522" pos:column="82">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="522" pos:column="85">"implementation"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="522" pos:column="103">||</op:operator> <call><name><name pos:line="522" pos:column="106">styler</name><op:operator pos:line="522" pos:column="112">.</op:operator><name pos:line="522" pos:column="113">Match</name></name><argument_list pos:line="522" pos:column="118">(<argument><expr><name pos:line="522" pos:column="119">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="522" pos:column="122">"protocol"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="522" pos:column="134"> 
				<block pos:line="523" pos:column="33">{
					<expr_stmt><expr><name pos:line="524" pos:column="41">levelCurrent</name><op:operator pos:line="524" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then> 
				<else pos:line="526" pos:column="33">else <if pos:line="526" pos:column="38">if <condition pos:line="526" pos:column="41">(<expr><call><name><name pos:line="526" pos:column="42">styler</name><op:operator pos:line="526" pos:column="48">.</op:operator><name pos:line="526" pos:column="49">Match</name></name><argument_list pos:line="526" pos:column="54">(<argument><expr><name pos:line="526" pos:column="55">j</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="526" pos:column="58">"end"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="526" pos:column="65"> 
				<block pos:line="527" pos:column="33">{
					<expr_stmt><expr><name pos:line="528" pos:column="41">levelCurrent</name><op:operator pos:line="528" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
		}</block></then></if>
		
		<comment type="block" pos:line="533" pos:column="17">/* Check for fold header keyword at beginning of word */</comment>
		<if pos:line="534" pos:column="17">if <condition pos:line="534" pos:column="20">(<expr><op:operator pos:line="534" pos:column="21">(</op:operator><name pos:line="534" pos:column="22">style</name> <op:operator pos:line="534" pos:column="28">==</op:operator> <name pos:line="534" pos:column="31">SCE_C_WORD</name> <op:operator pos:line="534" pos:column="42">||</op:operator> <name pos:line="534" pos:column="45">style</name> <op:operator pos:line="534" pos:column="51">==</op:operator> <name pos:line="534" pos:column="54">SCE_C_COMMENT</name> <op:operator pos:line="534" pos:column="68">||</op:operator> <name pos:line="534" pos:column="71">style</name> <op:operator pos:line="534" pos:column="77">==</op:operator> <name pos:line="534" pos:column="80">SCE_C_COMMENTLINE</name><op:operator pos:line="534" pos:column="97">)</op:operator>
		 <op:operator pos:line="535" pos:column="18">&amp;&amp;</op:operator> <op:operator pos:line="535" pos:column="21">(</op:operator><name pos:line="535" pos:column="22">style</name> <op:operator pos:line="535" pos:column="28">!=</op:operator> <name pos:line="535" pos:column="31">stylePrev</name><op:operator pos:line="535" pos:column="40">)</op:operator></expr>)</condition><then pos:line="535" pos:column="42"> <block pos:line="535" pos:column="43">{
			<if pos:line="536" pos:column="25">if <condition pos:line="536" pos:column="28">(<expr><call><name pos:line="536" pos:column="29">matchKeyword</name><argument_list pos:line="536" pos:column="41">(<argument><expr><name pos:line="536" pos:column="42">i</name></expr></argument>, <argument><expr><name pos:line="536" pos:column="45">keywords4</name></expr></argument>, <argument><expr><name pos:line="536" pos:column="56">styler</name></expr></argument>, <argument><expr><name pos:line="536" pos:column="64">KEYWORD_BOXHEADER</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="536" pos:column="83"> <block pos:line="536" pos:column="84">{
				<decl_stmt><decl><type><name pos:line="537" pos:column="33">int</name></type> <name pos:line="537" pos:column="37">line</name></decl>;</decl_stmt>
				<comment type="line" pos:line="538" pos:column="33">// Loop backwards all empty or comment lines</comment>
				<for pos:line="539" pos:column="33">for (<init><expr><name pos:line="539" pos:column="38">line</name> <op:operator pos:line="539" pos:column="43">=</op:operator> <name pos:line="539" pos:column="45">lineCurrent</name> <op:operator pos:line="539" pos:column="57">-</op:operator> <lit:literal type="number" pos:line="539" pos:column="59">1</lit:literal></expr>;</init>
				        <condition><expr><name pos:line="540" pos:column="41">line</name> <op:operator pos:line="540" pos:column="46">&gt;=</op:operator> <lit:literal type="number" pos:line="540" pos:column="49">0</lit:literal>
				        <op:operator pos:line="541" pos:column="41">&amp;&amp;</op:operator>
				        <name pos:line="542" pos:column="41">levelCurrent</name> <op:operator pos:line="542" pos:column="54">==</op:operator> <op:operator pos:line="542" pos:column="57">(</op:operator><call><name><name pos:line="542" pos:column="58">styler</name><op:operator pos:line="542" pos:column="64">.</op:operator><name pos:line="542" pos:column="65">LevelAt</name></name><argument_list pos:line="542" pos:column="72">(<argument><expr><name pos:line="542" pos:column="73">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="542" pos:column="79">&amp;</op:operator> <name pos:line="542" pos:column="81">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="542" pos:column="103">)</op:operator>
				        <op:operator pos:line="543" pos:column="41">&amp;&amp;</op:operator>
				        <call><name pos:line="544" pos:column="41">IsCommentLine</name><argument_list pos:line="544" pos:column="54">(<argument><expr><name pos:line="544" pos:column="55">line</name></expr></argument>, <argument><expr><name pos:line="544" pos:column="61">styler</name></expr></argument>)</argument_list></call></expr>;</condition>
				        <incr><expr><name pos:line="545" pos:column="41">line</name><op:operator pos:line="545" pos:column="45">--</op:operator></expr></incr>) <block pos:line="545" pos:column="49">{
					<comment type="line" pos:line="546" pos:column="41">// just loop backwards;</comment>
				}</block></for>
				<expr_stmt><expr><name pos:line="548" pos:column="33">line</name><op:operator pos:line="548" pos:column="37">++</op:operator></expr>;</expr_stmt>
                <if pos:line="549" pos:column="17">if <condition pos:line="549" pos:column="20">(<expr><name pos:line="549" pos:column="21">line</name> <op:operator pos:line="549" pos:column="26">==</op:operator> <name pos:line="549" pos:column="29">lineCurrent</name></expr>)</condition><then pos:line="549" pos:column="41"> <block pos:line="549" pos:column="42">{
                    <comment type="line" pos:line="550" pos:column="21">// in current line</comment>
                }</block></then> <else pos:line="551" pos:column="19">else <block pos:line="551" pos:column="24">{
                    <comment type="line" pos:line="552" pos:column="21">// at top of all preceding comment lines</comment>
                    <expr_stmt><expr><call><name><name pos:line="553" pos:column="21">styler</name><op:operator pos:line="553" pos:column="27">.</op:operator><name pos:line="553" pos:column="28">SetLevel</name></name><argument_list pos:line="553" pos:column="36">(<argument><expr><name pos:line="553" pos:column="37">line</name></expr></argument>, <argument><expr><call><name><name pos:line="553" pos:column="43">styler</name><op:operator pos:line="553" pos:column="49">.</op:operator><name pos:line="553" pos:column="50">LevelAt</name></name><argument_list pos:line="553" pos:column="57">(<argument><expr><name pos:line="553" pos:column="58">line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

			}</block></then></if>
		}</block></then></if>

		<if pos:line="559" pos:column="17">if <condition pos:line="559" pos:column="20">(<expr><name pos:line="559" pos:column="21">atEOL</name></expr>)</condition><then pos:line="559" pos:column="27"> <block pos:line="559" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="560" pos:column="25">int</name></type> <name pos:line="560" pos:column="29">lev</name></decl>;</decl_stmt>
			<comment type="line" pos:line="561" pos:column="25">// Compute level correction for special case: '} else {'</comment>
			<if pos:line="562" pos:column="25">if <condition pos:line="562" pos:column="28">(<expr><name pos:line="562" pos:column="29">levelUnindent</name> <op:operator pos:line="562" pos:column="43">&lt;</op:operator> <lit:literal type="number" pos:line="562" pos:column="45">0</lit:literal></expr>)</condition><then pos:line="562" pos:column="47"> <block pos:line="562" pos:column="48">{
				<expr_stmt><expr><name pos:line="563" pos:column="33">levelPrev</name> <op:operator pos:line="563" pos:column="43">+=</op:operator> <name pos:line="563" pos:column="46">levelUnindent</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="564" pos:column="27">else <block pos:line="564" pos:column="32">{
				<expr_stmt><expr><name pos:line="565" pos:column="33">levelCurrent</name> <op:operator pos:line="565" pos:column="46">+=</op:operator> <name pos:line="565" pos:column="49">levelUnindent</name></expr>;</expr_stmt>
			}</block></else></if>

			<expr_stmt><expr><name pos:line="568" pos:column="25">lev</name> <op:operator pos:line="568" pos:column="29">=</op:operator> <name pos:line="568" pos:column="31">levelPrev</name></expr>;</expr_stmt>
			<if pos:line="569" pos:column="25">if <condition pos:line="569" pos:column="28">(<expr><name pos:line="569" pos:column="29">visibleChars</name> <op:operator pos:line="569" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="569" pos:column="45">0</lit:literal> <op:operator pos:line="569" pos:column="47">&amp;&amp;</op:operator> <name pos:line="569" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="569" pos:column="62">
				<expr_stmt><expr><name pos:line="570" pos:column="33">lev</name> <op:operator pos:line="570" pos:column="37">|=</op:operator> <name pos:line="570" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>

			<comment type="line" pos:line="572" pos:column="25">// Produce footer line at line before (special handling for '} else {'</comment>
			<if pos:line="573" pos:column="25">if <condition pos:line="573" pos:column="28">(<expr><name pos:line="573" pos:column="29">levelPrev</name> <op:operator pos:line="573" pos:column="39">&lt;</op:operator> <name pos:line="573" pos:column="41">levelPrevPrev</name></expr>)</condition><then pos:line="573" pos:column="55"> <block pos:line="573" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="574" pos:column="33">styler</name><op:operator pos:line="574" pos:column="39">.</op:operator><name pos:line="574" pos:column="40">SetLevel</name></name><argument_list pos:line="574" pos:column="48">(<argument><expr><name pos:line="574" pos:column="49">lineCurrent</name> <op:operator pos:line="574" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="574" pos:column="63">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="574" pos:column="66">styler</name><op:operator pos:line="574" pos:column="72">.</op:operator><name pos:line="574" pos:column="73">LevelAt</name></name><argument_list pos:line="574" pos:column="80">(<argument><expr><name pos:line="574" pos:column="81">lineCurrent</name> <op:operator pos:line="574" pos:column="93">-</op:operator> <lit:literal type="number" pos:line="574" pos:column="95">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<comment type="line" pos:line="576" pos:column="25">// Mark the fold header (the line that is always visible)</comment>
			<if pos:line="577" pos:column="25">if <condition pos:line="577" pos:column="28">(<expr><op:operator pos:line="577" pos:column="29">(</op:operator><name pos:line="577" pos:column="30">levelCurrent</name> <op:operator pos:line="577" pos:column="43">&gt;</op:operator> <name pos:line="577" pos:column="45">levelPrev</name><op:operator pos:line="577" pos:column="54">)</op:operator> <op:operator pos:line="577" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="577" pos:column="59">(</op:operator><name pos:line="577" pos:column="60">visibleChars</name> <op:operator pos:line="577" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="577" pos:column="75">0</lit:literal><op:operator pos:line="577" pos:column="76">)</op:operator></expr>)</condition><then pos:line="577" pos:column="78">
				<expr_stmt><expr><name pos:line="578" pos:column="33">lev</name> <op:operator pos:line="578" pos:column="37">|=</op:operator> <name pos:line="578" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>

			<if pos:line="580" pos:column="25">if <condition pos:line="580" pos:column="28">(<expr><name pos:line="580" pos:column="29">lev</name> <op:operator pos:line="580" pos:column="33">!=</op:operator> <call><name><name pos:line="580" pos:column="36">styler</name><op:operator pos:line="580" pos:column="42">.</op:operator><name pos:line="580" pos:column="43">LevelAt</name></name><argument_list pos:line="580" pos:column="50">(<argument><expr><name pos:line="580" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="580" pos:column="64"> <block pos:line="580" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="581" pos:column="33">styler</name><op:operator pos:line="581" pos:column="39">.</op:operator><name pos:line="581" pos:column="40">SetLevel</name></name><argument_list pos:line="581" pos:column="48">(<argument><expr><name pos:line="581" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="581" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><name pos:line="584" pos:column="25">lineCurrent</name><op:operator pos:line="584" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="585" pos:column="25">levelPrevPrev</name> <op:operator pos:line="585" pos:column="39">=</op:operator> <name pos:line="585" pos:column="41">levelPrev</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="586" pos:column="25">levelPrev</name> <op:operator pos:line="586" pos:column="35">=</op:operator> <name pos:line="586" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="587" pos:column="25">levelUnindent</name> <op:operator pos:line="587" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="587" pos:column="41">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="588" pos:column="25">visibleChars</name> <op:operator pos:line="588" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="588" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="589" pos:column="25">firstLine</name> <op:operator pos:line="589" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="589" pos:column="37">false</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="592" pos:column="17">if <condition pos:line="592" pos:column="20">(<expr><op:operator pos:line="592" pos:column="21">!</op:operator><call><name pos:line="592" pos:column="22">isspacechar</name><argument_list pos:line="592" pos:column="33">(<argument><expr><name pos:line="592" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="592" pos:column="38">
			<expr_stmt><expr><name pos:line="593" pos:column="25">visibleChars</name><op:operator pos:line="593" pos:column="37">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="line" pos:line="595" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="596" pos:column="9">int</name></type> <name pos:line="596" pos:column="13">flagsNext</name> <init pos:line="596" pos:column="23">= <expr><call><name><name pos:line="596" pos:column="25">styler</name><op:operator pos:line="596" pos:column="31">.</op:operator><name pos:line="596" pos:column="32">LevelAt</name></name><argument_list pos:line="596" pos:column="39">(<argument><expr><name pos:line="596" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="596" pos:column="53">&amp;</op:operator> <op:operator pos:line="596" pos:column="55">~</op:operator><name pos:line="596" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="597" pos:column="9">styler</name><op:operator pos:line="597" pos:column="15">.</op:operator><name pos:line="597" pos:column="16">SetLevel</name></name><argument_list pos:line="597" pos:column="24">(<argument><expr><name pos:line="597" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="597" pos:column="38">levelPrev</name> <op:operator pos:line="597" pos:column="48">|</op:operator> <name pos:line="597" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="600" pos:column="1">static</specifier> <specifier pos:line="600" pos:column="8">const</specifier> <name pos:line="600" pos:column="14">char</name> <type:modifier pos:line="600" pos:column="19">*</type:modifier> <specifier pos:line="600" pos:column="21">const</specifier></type> <name><name pos:line="600" pos:column="27">cppWordLists</name><index pos:line="600" pos:column="39">[]</index></name> <init pos:line="600" pos:column="42">= <expr><block pos:line="600" pos:column="44">{
            <expr><lit:literal type="string" pos:line="601" pos:column="13">"Primary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="602" pos:column="13">"Secondary keywords and identifiers"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="603" pos:column="13">"Documentation comment keywords"</lit:literal></expr>,
            <expr><lit:literal type="string" pos:line="604" pos:column="13">"Fold header keywords"</lit:literal></expr>,
            <expr><lit:literal type="number" pos:line="605" pos:column="13">0</lit:literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="608" pos:column="1">static</specifier> <name pos:line="608" pos:column="8">void</name></type> <name pos:line="608" pos:column="13">ColouriseObjCDocSensitive</name><parameter_list pos:line="608" pos:column="38">(<param><decl><type><name pos:line="608" pos:column="39">unsigned</name> <name pos:line="608" pos:column="48">int</name></type> <name pos:line="608" pos:column="52">startPos</name></decl></param>, <param><decl><type><name pos:line="608" pos:column="62">int</name></type> <name pos:line="608" pos:column="66">length</name></decl></param>, <param><decl><type><name pos:line="608" pos:column="74">int</name></type> <name pos:line="608" pos:column="78">initStyle</name></decl></param>, <param><decl><type><name pos:line="608" pos:column="89">WordList</name> <type:modifier pos:line="608" pos:column="98">*</type:modifier></type><name><name pos:line="608" pos:column="99">keywordlists</name><index pos:line="608" pos:column="111">[]</index></name></decl></param>,
                                     <param><decl><type><name pos:line="609" pos:column="38">Accessor</name> <type:modifier pos:line="609" pos:column="47">&amp;</type:modifier></type><name pos:line="609" pos:column="48">styler</name></decl></param>)</parameter_list> <block pos:line="609" pos:column="56">{
	<expr_stmt><expr><call><name pos:line="610" pos:column="9">ColouriseObjCDoc</name><argument_list pos:line="610" pos:column="25">(<argument><expr><name pos:line="610" pos:column="26">startPos</name></expr></argument>, <argument><expr><name pos:line="610" pos:column="36">length</name></expr></argument>, <argument><expr><name pos:line="610" pos:column="44">initStyle</name></expr></argument>, <argument><expr><name pos:line="610" pos:column="55">keywordlists</name></expr></argument>, <argument><expr><name pos:line="610" pos:column="69">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="610" pos:column="77">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name pos:line="613" pos:column="1">LexerModule</name></type> <name pos:line="613" pos:column="13">lmObjC</name><argument_list pos:line="613" pos:column="19">(<argument><expr><name pos:line="613" pos:column="20">SCLEX_OBJC</name></expr></argument>, <argument><expr><name pos:line="613" pos:column="32">ColouriseObjCDocSensitive</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="613" pos:column="59">"cpp"</lit:literal></expr></argument>, <argument><expr><name pos:line="613" pos:column="66">FoldObjCDoc</name></expr></argument>, <argument><expr><name pos:line="613" pos:column="79">cppWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
