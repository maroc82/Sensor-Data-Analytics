<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\PluginsManager\PluginsManager.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"PluginsManager.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"resource.h"</lit:literal></cpp:file></cpp:include>

<decl_stmt><decl><type><specifier pos:line="33" pos:column="1">const</specifier> <name pos:line="33" pos:column="7">TCHAR</name> <type:modifier pos:line="33" pos:column="13">*</type:modifier></type> <name pos:line="33" pos:column="15">USERMSG</name> <init pos:line="33" pos:column="23">= <expr><call><name pos:line="33" pos:column="25">TEXT</name><argument_list pos:line="33" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="33" pos:column="30">"This plugin is not compatible with current version of Notepad++.\n\n\
Do you want to remove this plugin from plugins directory to prevent this message from the next launch time?"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name pos:line="36" pos:column="1">bool</name></type> <name><name pos:line="36" pos:column="6">PluginsManager</name><op:operator pos:line="36" pos:column="20">::</op:operator><name pos:line="36" pos:column="22">unloadPlugin</name></name><parameter_list pos:line="36" pos:column="34">(<param><decl><type><name pos:line="36" pos:column="35">int</name></type> <name pos:line="36" pos:column="39">index</name></decl></param>, <param><decl><type><name pos:line="36" pos:column="46">HWND</name></type> <name pos:line="36" pos:column="51">nppHandle</name></decl></param>)</parameter_list>
<block pos:line="37" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="38" pos:column="5">SCNotification</name></type> <name pos:line="38" pos:column="20">scnN</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="39" pos:column="9">scnN</name><op:operator pos:line="39" pos:column="13">.</op:operator><name pos:line="39" pos:column="14">nmhdr</name><op:operator pos:line="39" pos:column="19">.</op:operator><name pos:line="39" pos:column="20">code</name></name> <op:operator pos:line="39" pos:column="25">=</op:operator> <name pos:line="39" pos:column="27">NPPN_SHUTDOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="40" pos:column="9">scnN</name><op:operator pos:line="40" pos:column="13">.</op:operator><name pos:line="40" pos:column="14">nmhdr</name><op:operator pos:line="40" pos:column="19">.</op:operator><name pos:line="40" pos:column="20">hwndFrom</name></name> <op:operator pos:line="40" pos:column="29">=</op:operator> <name pos:line="40" pos:column="31">nppHandle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="41" pos:column="9">scnN</name><op:operator pos:line="41" pos:column="13">.</op:operator><name pos:line="41" pos:column="14">nmhdr</name><op:operator pos:line="41" pos:column="19">.</op:operator><name pos:line="41" pos:column="20">idFrom</name></name> <op:operator pos:line="41" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="41" pos:column="29">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="42" pos:column="9">_pluginInfos</name><index pos:line="42" pos:column="21">[<expr><name pos:line="42" pos:column="22">index</name></expr>]</index></name><op:operator pos:line="42" pos:column="28">-&gt;</op:operator><call><name pos:line="42" pos:column="30">_pBeNotified</name><argument_list pos:line="42" pos:column="42">(<argument><expr><op:operator pos:line="42" pos:column="43">&amp;</op:operator><name pos:line="42" pos:column="44">scnN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="44" pos:column="5">//::DestroyMenu(_pluginInfos[index]-&gt;_pluginMenu);</comment>
    <comment type="line" pos:line="45" pos:column="5">//_pluginInfos[index]-&gt;_pluginMenu = NULL;</comment>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><call><name><op:operator pos:line="47" pos:column="9">::</op:operator><name pos:line="47" pos:column="11">FreeLibrary</name></name><argument_list pos:line="47" pos:column="22">(<argument><expr><name><name pos:line="47" pos:column="23">_pluginInfos</name><index pos:line="47" pos:column="35">[<expr><name pos:line="47" pos:column="36">index</name></expr>]</index></name><op:operator pos:line="47" pos:column="42">-&gt;</op:operator><name pos:line="47" pos:column="44">_hLib</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="47" pos:column="51">
        <expr_stmt><expr><name><name pos:line="48" pos:column="9">_pluginInfos</name><index pos:line="48" pos:column="21">[<expr><name pos:line="48" pos:column="22">index</name></expr>]</index></name><op:operator pos:line="48" pos:column="28">-&gt;</op:operator><name pos:line="48" pos:column="30">_hLib</name> <op:operator pos:line="48" pos:column="36">=</op:operator> <name pos:line="48" pos:column="38">NULL</name></expr>;</expr_stmt></then>
    <else pos:line="49" pos:column="5">else
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">printStr</name><argument_list pos:line="50" pos:column="17">(<argument><expr><call><name pos:line="50" pos:column="18">TEXT</name><argument_list pos:line="50" pos:column="22">(<argument><expr><lit:literal type="string" pos:line="50" pos:column="23">"not ok"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <comment type="line" pos:line="51" pos:column="5">//delete _pluginInfos[index];</comment>
<comment type="line" pos:line="52" pos:column="1">//      printInt(index);</comment>
    <comment type="line" pos:line="53" pos:column="5">//vector&lt;PluginInfo *&gt;::iterator it = _pluginInfos.begin() + index;</comment>
    <comment type="line" pos:line="54" pos:column="5">//_pluginInfos.erase(it);</comment>
    <comment type="line" pos:line="55" pos:column="5">//printStr(TEXT("remove"));</comment>
    <return pos:line="56" pos:column="5">return <expr><lit:literal type="boolean" pos:line="56" pos:column="12">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="59" pos:column="1">int</name></type> <name><name pos:line="59" pos:column="5">PluginsManager</name><op:operator pos:line="59" pos:column="19">::</op:operator><name pos:line="59" pos:column="21">loadPlugin</name></name><parameter_list pos:line="59" pos:column="31">(<param><decl><type><specifier pos:line="59" pos:column="32">const</specifier> <name pos:line="59" pos:column="38">TCHAR</name> <type:modifier pos:line="59" pos:column="44">*</type:modifier></type><name pos:line="59" pos:column="45">pluginFilePath</name></decl></param>, <param><decl><type><name><name pos:line="59" pos:column="61">vector</name><argument_list pos:line="59" pos:column="67">&lt;<argument><expr><name pos:line="59" pos:column="68">generic_string</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="59" pos:column="84">&amp;</type:modifier></type> <name pos:line="59" pos:column="86">dll2Remove</name></decl></param>)</parameter_list>
<block pos:line="60" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="61" pos:column="9">const</specifier> <name pos:line="61" pos:column="15">TCHAR</name> <type:modifier pos:line="61" pos:column="21">*</type:modifier></type><name pos:line="61" pos:column="22">pluginFileName</name> <init pos:line="61" pos:column="37">= <expr><call><name><op:operator pos:line="61" pos:column="39">::</op:operator><name pos:line="61" pos:column="41">PathFindFileName</name></name><argument_list pos:line="61" pos:column="57">(<argument><expr><name pos:line="61" pos:column="58">pluginFilePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><call><name pos:line="62" pos:column="13">isInLoadedDlls</name><argument_list pos:line="62" pos:column="27">(<argument><expr><name pos:line="62" pos:column="28">pluginFileName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="62" pos:column="44">
		<return pos:line="63" pos:column="17">return <expr><lit:literal type="number" pos:line="63" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="65" pos:column="9">PluginInfo</name> <type:modifier pos:line="65" pos:column="20">*</type:modifier></type><name pos:line="65" pos:column="21">pi</name> <init pos:line="65" pos:column="24">= <expr><op:operator pos:line="65" pos:column="26">new</op:operator> <name pos:line="65" pos:column="30">PluginInfo</name></expr></init></decl>;</decl_stmt>
	<try pos:line="66" pos:column="9">try <block pos:line="66" pos:column="13">{
		<expr_stmt><expr><name><name pos:line="67" pos:column="17">pi</name><op:operator pos:line="67" pos:column="19">-&gt;</op:operator><name pos:line="67" pos:column="21">_moduleName</name></name> <op:operator pos:line="67" pos:column="33">=</op:operator> <call><name pos:line="67" pos:column="35">PathFindFileName</name><argument_list pos:line="67" pos:column="51">(<argument><expr><name pos:line="67" pos:column="52">pluginFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name pos:line="69" pos:column="17">pi</name><op:operator pos:line="69" pos:column="19">-&gt;</op:operator><name pos:line="69" pos:column="21">_hLib</name></name> <op:operator pos:line="69" pos:column="27">=</op:operator> <call><name><op:operator pos:line="69" pos:column="29">::</op:operator><name pos:line="69" pos:column="31">LoadLibrary</name></name><argument_list pos:line="69" pos:column="42">(<argument><expr><name pos:line="69" pos:column="43">pluginFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><op:operator pos:line="70" pos:column="21">!</op:operator><name><name pos:line="70" pos:column="22">pi</name><op:operator pos:line="70" pos:column="24">-&gt;</op:operator><name pos:line="70" pos:column="26">_hLib</name></name></expr>)</condition><then pos:line="70" pos:column="32">
			<throw pos:line="71" pos:column="25">throw <expr><call><name pos:line="71" pos:column="31">generic_string</name><argument_list pos:line="71" pos:column="45">(<argument><expr><call><name pos:line="71" pos:column="46">TEXT</name><argument_list pos:line="71" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="71" pos:column="51">"Load Library is failed.\nMake \"Runtime Library\" setting of this project as \"Multi-threaded(/MT)\" may cure this problem."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

		<expr_stmt><expr><name><name pos:line="73" pos:column="17">pi</name><op:operator pos:line="73" pos:column="19">-&gt;</op:operator><name pos:line="73" pos:column="21">_pFuncIsUnicode</name></name> <op:operator pos:line="73" pos:column="37">=</op:operator> <op:operator pos:line="73" pos:column="39">(</op:operator><name pos:line="73" pos:column="40">PFUNCISUNICODE</name><op:operator pos:line="73" pos:column="54">)</op:operator><call><name pos:line="73" pos:column="55">GetProcAddress</name><argument_list pos:line="73" pos:column="69">(<argument><expr><name><name pos:line="73" pos:column="70">pi</name><op:operator pos:line="73" pos:column="72">-&gt;</op:operator><name pos:line="73" pos:column="74">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="73" pos:column="81">"isUnicode"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">ifdef</cpp:directive> <name pos:line="74" pos:column="8">UNICODE</name></cpp:ifdef>
		<if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><op:operator pos:line="75" pos:column="21">!</op:operator><name><name pos:line="75" pos:column="22">pi</name><op:operator pos:line="75" pos:column="24">-&gt;</op:operator><name pos:line="75" pos:column="26">_pFuncIsUnicode</name></name> <op:operator pos:line="75" pos:column="42">||</op:operator> <op:operator pos:line="75" pos:column="45">!</op:operator><call><name><name pos:line="75" pos:column="46">pi</name><op:operator pos:line="75" pos:column="48">-&gt;</op:operator><name pos:line="75" pos:column="50">_pFuncIsUnicode</name></name><argument_list pos:line="75" pos:column="65">()</argument_list></call></expr>)</condition><then pos:line="75" pos:column="68">
			<throw pos:line="76" pos:column="25">throw <expr><call><name pos:line="76" pos:column="31">generic_string</name><argument_list pos:line="76" pos:column="45">(<argument><expr><call><name pos:line="76" pos:column="46">TEXT</name><argument_list pos:line="76" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="51">"This ANSI plugin is not compatible with your Unicode Notepad++."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
<cpp:else pos:line="77" pos:column="1">#<cpp:directive pos:line="77" pos:column="2">else</cpp:directive></cpp:else>
		<if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><name><name pos:line="78" pos:column="21">pi</name><op:operator pos:line="78" pos:column="23">-&gt;</op:operator><name pos:line="78" pos:column="25">_pFuncIsUnicode</name></name></expr>)</condition><then pos:line="78" pos:column="41">
			<throw pos:line="79" pos:column="25">throw <expr><call><name pos:line="79" pos:column="31">generic_string</name><argument_list pos:line="79" pos:column="45">(<argument><expr><call><name pos:line="79" pos:column="46">TEXT</name><argument_list pos:line="79" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="51">"This Unicode plugin is not compatible with your ANSI mode Notepad++."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name><name pos:line="82" pos:column="17">pi</name><op:operator pos:line="82" pos:column="19">-&gt;</op:operator><name pos:line="82" pos:column="21">_pFuncSetInfo</name></name> <op:operator pos:line="82" pos:column="35">=</op:operator> <op:operator pos:line="82" pos:column="37">(</op:operator><name pos:line="82" pos:column="38">PFUNCSETINFO</name><op:operator pos:line="82" pos:column="50">)</op:operator><call><name pos:line="82" pos:column="51">GetProcAddress</name><argument_list pos:line="82" pos:column="65">(<argument><expr><name><name pos:line="82" pos:column="66">pi</name><op:operator pos:line="82" pos:column="68">-&gt;</op:operator><name pos:line="82" pos:column="70">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="82" pos:column="77">"setInfo"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
		<if pos:line="84" pos:column="17">if <condition pos:line="84" pos:column="20">(<expr><op:operator pos:line="84" pos:column="21">!</op:operator><name><name pos:line="84" pos:column="22">pi</name><op:operator pos:line="84" pos:column="24">-&gt;</op:operator><name pos:line="84" pos:column="26">_pFuncSetInfo</name></name></expr>)</condition><then pos:line="84" pos:column="40">
			<throw pos:line="85" pos:column="25">throw <expr><call><name pos:line="85" pos:column="31">generic_string</name><argument_list pos:line="85" pos:column="45">(<argument><expr><call><name pos:line="85" pos:column="46">TEXT</name><argument_list pos:line="85" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="51">"Missing \"setInfo\" function"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

		<expr_stmt><expr><name><name pos:line="87" pos:column="17">pi</name><op:operator pos:line="87" pos:column="19">-&gt;</op:operator><name pos:line="87" pos:column="21">_pFuncGetName</name></name> <op:operator pos:line="87" pos:column="35">=</op:operator> <op:operator pos:line="87" pos:column="37">(</op:operator><name pos:line="87" pos:column="38">PFUNCGETNAME</name><op:operator pos:line="87" pos:column="50">)</op:operator><call><name pos:line="87" pos:column="51">GetProcAddress</name><argument_list pos:line="87" pos:column="65">(<argument><expr><name><name pos:line="87" pos:column="66">pi</name><op:operator pos:line="87" pos:column="68">-&gt;</op:operator><name pos:line="87" pos:column="70">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="87" pos:column="77">"getName"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><op:operator pos:line="88" pos:column="21">!</op:operator><name><name pos:line="88" pos:column="22">pi</name><op:operator pos:line="88" pos:column="24">-&gt;</op:operator><name pos:line="88" pos:column="26">_pFuncGetName</name></name></expr>)</condition><then pos:line="88" pos:column="40">
			<throw pos:line="89" pos:column="25">throw <expr><call><name pos:line="89" pos:column="31">generic_string</name><argument_list pos:line="89" pos:column="45">(<argument><expr><call><name pos:line="89" pos:column="46">TEXT</name><argument_list pos:line="89" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="51">"Missing \"getName\" function"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

		<expr_stmt><expr><name><name pos:line="91" pos:column="17">pi</name><op:operator pos:line="91" pos:column="19">-&gt;</op:operator><name pos:line="91" pos:column="21">_pBeNotified</name></name> <op:operator pos:line="91" pos:column="34">=</op:operator> <op:operator pos:line="91" pos:column="36">(</op:operator><name pos:line="91" pos:column="37">PBENOTIFIED</name><op:operator pos:line="91" pos:column="48">)</op:operator><call><name pos:line="91" pos:column="49">GetProcAddress</name><argument_list pos:line="91" pos:column="63">(<argument><expr><name><name pos:line="91" pos:column="64">pi</name><op:operator pos:line="91" pos:column="66">-&gt;</op:operator><name pos:line="91" pos:column="68">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="91" pos:column="75">"beNotified"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><op:operator pos:line="92" pos:column="21">!</op:operator><name><name pos:line="92" pos:column="22">pi</name><op:operator pos:line="92" pos:column="24">-&gt;</op:operator><name pos:line="92" pos:column="26">_pBeNotified</name></name></expr>)</condition><then pos:line="92" pos:column="39">
			<throw pos:line="93" pos:column="25">throw <expr><call><name pos:line="93" pos:column="31">generic_string</name><argument_list pos:line="93" pos:column="45">(<argument><expr><call><name pos:line="93" pos:column="46">TEXT</name><argument_list pos:line="93" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="51">"Missing \"beNotified\" function"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

		<expr_stmt><expr><name><name pos:line="95" pos:column="17">pi</name><op:operator pos:line="95" pos:column="19">-&gt;</op:operator><name pos:line="95" pos:column="21">_pMessageProc</name></name> <op:operator pos:line="95" pos:column="35">=</op:operator> <op:operator pos:line="95" pos:column="37">(</op:operator><name pos:line="95" pos:column="38">PMESSAGEPROC</name><op:operator pos:line="95" pos:column="50">)</op:operator><call><name pos:line="95" pos:column="51">GetProcAddress</name><argument_list pos:line="95" pos:column="65">(<argument><expr><name><name pos:line="95" pos:column="66">pi</name><op:operator pos:line="95" pos:column="68">-&gt;</op:operator><name pos:line="95" pos:column="70">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="95" pos:column="77">"messageProc"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="96" pos:column="17">if <condition pos:line="96" pos:column="20">(<expr><op:operator pos:line="96" pos:column="21">!</op:operator><name><name pos:line="96" pos:column="22">pi</name><op:operator pos:line="96" pos:column="24">-&gt;</op:operator><name pos:line="96" pos:column="26">_pMessageProc</name></name></expr>)</condition><then pos:line="96" pos:column="40">
			<throw pos:line="97" pos:column="25">throw <expr><call><name pos:line="97" pos:column="31">generic_string</name><argument_list pos:line="97" pos:column="45">(<argument><expr><call><name pos:line="97" pos:column="46">TEXT</name><argument_list pos:line="97" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="51">"Missing \"messageProc\" function"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>
		
		<expr_stmt><expr><call><name><name pos:line="99" pos:column="17">pi</name><op:operator pos:line="99" pos:column="19">-&gt;</op:operator><name pos:line="99" pos:column="21">_pFuncSetInfo</name></name><argument_list pos:line="99" pos:column="34">(<argument><expr><name pos:line="99" pos:column="35">_nppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name pos:line="101" pos:column="17">pi</name><op:operator pos:line="101" pos:column="19">-&gt;</op:operator><name pos:line="101" pos:column="21">_pFuncGetFuncsArray</name></name> <op:operator pos:line="101" pos:column="41">=</op:operator> <op:operator pos:line="101" pos:column="43">(</op:operator><name pos:line="101" pos:column="44">PFUNCGETFUNCSARRAY</name><op:operator pos:line="101" pos:column="62">)</op:operator><call><name pos:line="101" pos:column="63">GetProcAddress</name><argument_list pos:line="101" pos:column="77">(<argument><expr><name><name pos:line="101" pos:column="78">pi</name><op:operator pos:line="101" pos:column="80">-&gt;</op:operator><name pos:line="101" pos:column="82">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="101" pos:column="89">"getFuncsArray"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="102" pos:column="17">if <condition pos:line="102" pos:column="20">(<expr><op:operator pos:line="102" pos:column="21">!</op:operator><name><name pos:line="102" pos:column="22">pi</name><op:operator pos:line="102" pos:column="24">-&gt;</op:operator><name pos:line="102" pos:column="26">_pFuncGetFuncsArray</name></name></expr>)</condition><then pos:line="102" pos:column="46"> 
			<throw pos:line="103" pos:column="25">throw <expr><call><name pos:line="103" pos:column="31">generic_string</name><argument_list pos:line="103" pos:column="45">(<argument><expr><call><name pos:line="103" pos:column="46">TEXT</name><argument_list pos:line="103" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="51">"Missing \"getFuncsArray\" function"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

		<expr_stmt><expr><name><name pos:line="105" pos:column="17">pi</name><op:operator pos:line="105" pos:column="19">-&gt;</op:operator><name pos:line="105" pos:column="21">_funcItems</name></name> <op:operator pos:line="105" pos:column="32">=</op:operator> <call><name><name pos:line="105" pos:column="34">pi</name><op:operator pos:line="105" pos:column="36">-&gt;</op:operator><name pos:line="105" pos:column="38">_pFuncGetFuncsArray</name></name><argument_list pos:line="105" pos:column="57">(<argument><expr><op:operator pos:line="105" pos:column="58">&amp;</op:operator><name><name pos:line="105" pos:column="59">pi</name><op:operator pos:line="105" pos:column="61">-&gt;</op:operator><name pos:line="105" pos:column="63">_nbFuncItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="107" pos:column="17">if <condition pos:line="107" pos:column="20">(<expr><op:operator pos:line="107" pos:column="21">(</op:operator><op:operator pos:line="107" pos:column="22">!</op:operator><name><name pos:line="107" pos:column="23">pi</name><op:operator pos:line="107" pos:column="25">-&gt;</op:operator><name pos:line="107" pos:column="27">_funcItems</name></name><op:operator pos:line="107" pos:column="37">)</op:operator> <op:operator pos:line="107" pos:column="39">||</op:operator> <op:operator pos:line="107" pos:column="42">(</op:operator><name><name pos:line="107" pos:column="43">pi</name><op:operator pos:line="107" pos:column="45">-&gt;</op:operator><name pos:line="107" pos:column="47">_nbFuncItem</name></name> <op:operator pos:line="107" pos:column="59">&lt;=</op:operator> <lit:literal type="number" pos:line="107" pos:column="62">0</lit:literal><op:operator pos:line="107" pos:column="63">)</op:operator></expr>)</condition><then pos:line="107" pos:column="65">
			<throw pos:line="108" pos:column="25">throw <expr><call><name pos:line="108" pos:column="31">generic_string</name><argument_list pos:line="108" pos:column="45">(<argument><expr><call><name pos:line="108" pos:column="46">TEXT</name><argument_list pos:line="108" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="51">"Missing \"FuncItems\" array, or the nb of Function Item is not set correctly"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

		<expr_stmt><expr><name><name pos:line="110" pos:column="17">pi</name><op:operator pos:line="110" pos:column="19">-&gt;</op:operator><name pos:line="110" pos:column="21">_pluginMenu</name></name> <op:operator pos:line="110" pos:column="33">=</op:operator> <call><name><op:operator pos:line="110" pos:column="35">::</op:operator><name pos:line="110" pos:column="37">CreateMenu</name></name><argument_list pos:line="110" pos:column="47">()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name pos:line="112" pos:column="17">GetLexerCountFn</name></type> <name pos:line="112" pos:column="33">GetLexerCount</name> <init pos:line="112" pos:column="47">= <expr><op:operator pos:line="112" pos:column="49">(</op:operator><name pos:line="112" pos:column="50">GetLexerCountFn</name><op:operator pos:line="112" pos:column="65">)</op:operator><call><name><op:operator pos:line="112" pos:column="66">::</op:operator><name pos:line="112" pos:column="68">GetProcAddress</name></name><argument_list pos:line="112" pos:column="82">(<argument><expr><name><name pos:line="112" pos:column="83">pi</name><op:operator pos:line="112" pos:column="85">-&gt;</op:operator><name pos:line="112" pos:column="87">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="112" pos:column="94">"GetLexerCount"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="113" pos:column="17">// it's a lexer plugin</comment>
		<if pos:line="114" pos:column="17">if <condition pos:line="114" pos:column="20">(<expr><name pos:line="114" pos:column="21">GetLexerCount</name></expr>)</condition><then pos:line="114" pos:column="35">
		<block pos:line="115" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="116" pos:column="25">GetLexerNameFn</name></type> <name pos:line="116" pos:column="40">GetLexerName</name> <init pos:line="116" pos:column="53">= <expr><op:operator pos:line="116" pos:column="55">(</op:operator><name pos:line="116" pos:column="56">GetLexerNameFn</name><op:operator pos:line="116" pos:column="70">)</op:operator><call><name><op:operator pos:line="116" pos:column="71">::</op:operator><name pos:line="116" pos:column="73">GetProcAddress</name></name><argument_list pos:line="116" pos:column="87">(<argument><expr><name><name pos:line="116" pos:column="88">pi</name><op:operator pos:line="116" pos:column="90">-&gt;</op:operator><name pos:line="116" pos:column="92">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="116" pos:column="99">"GetLexerName"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="117" pos:column="25">if <condition pos:line="117" pos:column="28">(<expr><op:operator pos:line="117" pos:column="29">!</op:operator><name pos:line="117" pos:column="30">GetLexerName</name></expr>)</condition><then pos:line="117" pos:column="43">
				<throw pos:line="118" pos:column="33">throw <expr><call><name pos:line="118" pos:column="39">generic_string</name><argument_list pos:line="118" pos:column="53">(<argument><expr><call><name pos:line="118" pos:column="54">TEXT</name><argument_list pos:line="118" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="59">"Loading GetLexerName function failed."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<decl_stmt><decl><type><name pos:line="120" pos:column="25">GetLexerStatusTextFn</name></type> <name pos:line="120" pos:column="46">GetLexerStatusText</name> <init pos:line="120" pos:column="65">= <expr><op:operator pos:line="120" pos:column="67">(</op:operator><name pos:line="120" pos:column="68">GetLexerStatusTextFn</name><op:operator pos:line="120" pos:column="88">)</op:operator><call><name><op:operator pos:line="120" pos:column="89">::</op:operator><name pos:line="120" pos:column="91">GetProcAddress</name></name><argument_list pos:line="120" pos:column="105">(<argument><expr><name><name pos:line="120" pos:column="106">pi</name><op:operator pos:line="120" pos:column="108">-&gt;</op:operator><name pos:line="120" pos:column="110">_hLib</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="120" pos:column="117">"GetLexerStatusText"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="122" pos:column="25">if <condition pos:line="122" pos:column="28">(<expr><op:operator pos:line="122" pos:column="29">!</op:operator><name pos:line="122" pos:column="30">GetLexerStatusText</name></expr>)</condition><then pos:line="122" pos:column="49">
				<throw pos:line="123" pos:column="33">throw <expr><call><name pos:line="123" pos:column="39">generic_string</name><argument_list pos:line="123" pos:column="53">(<argument><expr><call><name pos:line="123" pos:column="54">TEXT</name><argument_list pos:line="123" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="59">"Loading GetLexerStatusText function failed."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw></then></if>

			<comment type="line" pos:line="125" pos:column="25">// Assign a buffer for the lexer name.</comment>
			<decl_stmt><decl><type><name pos:line="126" pos:column="25">char</name></type> <name><name pos:line="126" pos:column="30">lexName</name><index pos:line="126" pos:column="37">[<expr><name pos:line="126" pos:column="38">MAX_EXTERNAL_LEXER_NAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="127" pos:column="25">lexName</name><index pos:line="127" pos:column="32">[<expr><lit:literal type="number" pos:line="127" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="127" pos:column="36">=</op:operator> <lit:literal type="char" pos:line="127" pos:column="38">'\0'</lit:literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="128" pos:column="25">TCHAR</name></type> <name><name pos:line="128" pos:column="31">lexDesc</name><index pos:line="128" pos:column="38">[<expr><name pos:line="128" pos:column="39">MAX_EXTERNAL_LEXER_DESC_LEN</name></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="129" pos:column="25">lexDesc</name><index pos:line="129" pos:column="32">[<expr><lit:literal type="number" pos:line="129" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="129" pos:column="36">=</op:operator> <lit:literal type="char" pos:line="129" pos:column="38">'\0'</lit:literal></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="131" pos:column="25">int</name></type> <name pos:line="131" pos:column="29">numLexers</name> <init pos:line="131" pos:column="39">= <expr><call><name pos:line="131" pos:column="41">GetLexerCount</name><argument_list pos:line="131" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="133" pos:column="25">NppParameters</name> <type:modifier pos:line="133" pos:column="39">*</type:modifier></type> <name pos:line="133" pos:column="41">nppParams</name> <init pos:line="133" pos:column="51">= <expr><call><name><name pos:line="133" pos:column="53">NppParameters</name><op:operator pos:line="133" pos:column="66">::</op:operator><name pos:line="133" pos:column="68">getInstance</name></name><argument_list pos:line="133" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name pos:line="135" pos:column="25">ExternalLangContainer</name> <type:modifier pos:line="135" pos:column="47">*</type:modifier></type><name><name pos:line="135" pos:column="48">containers</name><index pos:line="135" pos:column="58">[<expr><lit:literal type="number" pos:line="135" pos:column="59">30</lit:literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifdef pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">ifdef</cpp:directive> <name pos:line="136" pos:column="8">UNICODE</name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="137" pos:column="25">WcharMbcsConvertor</name> <type:modifier pos:line="137" pos:column="44">*</type:modifier></type><name pos:line="137" pos:column="45">wmc</name> <init pos:line="137" pos:column="49">= <expr><call><name><name pos:line="137" pos:column="51">WcharMbcsConvertor</name><op:operator pos:line="137" pos:column="69">::</op:operator><name pos:line="137" pos:column="71">getInstance</name></name><argument_list pos:line="137" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">endif</cpp:directive></cpp:endif>
			<for pos:line="139" pos:column="25">for (<init><decl><type><name pos:line="139" pos:column="30">int</name></type> <name pos:line="139" pos:column="34">x</name> <init pos:line="139" pos:column="36">= <expr><lit:literal type="number" pos:line="139" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="139" pos:column="41">x</name> <op:operator pos:line="139" pos:column="43">&lt;</op:operator> <name pos:line="139" pos:column="45">numLexers</name></expr>;</condition> <incr><expr><name pos:line="139" pos:column="56">x</name><op:operator pos:line="139" pos:column="57">++</op:operator></expr></incr>)
			<block pos:line="140" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="141" pos:column="33">GetLexerName</name><argument_list pos:line="141" pos:column="45">(<argument><expr><name pos:line="141" pos:column="46">x</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="49">lexName</name></expr></argument>, <argument><expr><name pos:line="141" pos:column="58">MAX_EXTERNAL_LEXER_NAME_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="142" pos:column="33">GetLexerStatusText</name><argument_list pos:line="142" pos:column="51">(<argument><expr><name pos:line="142" pos:column="52">x</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="55">lexDesc</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="64">MAX_EXTERNAL_LEXER_DESC_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="143" pos:column="1">#<cpp:directive pos:line="143" pos:column="2">ifdef</cpp:directive> <name pos:line="143" pos:column="8">UNICODE</name></cpp:ifdef>
				<decl_stmt><decl><type><specifier pos:line="144" pos:column="33">const</specifier> <name pos:line="144" pos:column="39">TCHAR</name> <type:modifier pos:line="144" pos:column="45">*</type:modifier></type><name pos:line="144" pos:column="46">pLexerName</name> <init pos:line="144" pos:column="57">= <expr><call><name><name pos:line="144" pos:column="59">wmc</name><op:operator pos:line="144" pos:column="62">-&gt;</op:operator><name pos:line="144" pos:column="64">char2wchar</name></name><argument_list pos:line="144" pos:column="74">(<argument><expr><name pos:line="144" pos:column="75">lexName</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="84">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="145" pos:column="1">#<cpp:directive pos:line="145" pos:column="2">else</cpp:directive></cpp:else>
				<decl_stmt><decl><type><specifier pos:line="146" pos:column="33">const</specifier> <name pos:line="146" pos:column="39">TCHAR</name> <type:modifier pos:line="146" pos:column="45">*</type:modifier></type><name pos:line="146" pos:column="46">pLexerName</name> <init pos:line="146" pos:column="57">= <expr><name pos:line="146" pos:column="59">lexName</name></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="147" pos:column="1">#<cpp:directive pos:line="147" pos:column="2">endif</cpp:directive></cpp:endif>
				<if pos:line="148" pos:column="33">if <condition pos:line="148" pos:column="36">(<expr><op:operator pos:line="148" pos:column="37">!</op:operator><call><name><name pos:line="148" pos:column="38">nppParams</name><op:operator pos:line="148" pos:column="47">-&gt;</op:operator><name pos:line="148" pos:column="49">isExistingExternalLangName</name></name><argument_list pos:line="148" pos:column="75">(<argument><expr><name pos:line="148" pos:column="76">pLexerName</name></expr></argument>)</argument_list></call> <op:operator pos:line="148" pos:column="88">&amp;&amp;</op:operator> <call><name><name pos:line="148" pos:column="91">nppParams</name><op:operator pos:line="148" pos:column="100">-&gt;</op:operator><name pos:line="148" pos:column="102">ExternalLangHasRoom</name></name><argument_list pos:line="148" pos:column="121">()</argument_list></call></expr>)</condition><then pos:line="148" pos:column="124">
					<expr_stmt><expr><name><name pos:line="149" pos:column="41">containers</name><index pos:line="149" pos:column="51">[<expr><name pos:line="149" pos:column="52">x</name></expr>]</index></name> <op:operator pos:line="149" pos:column="55">=</op:operator> <op:operator pos:line="149" pos:column="57">new</op:operator> <call><name pos:line="149" pos:column="61">ExternalLangContainer</name><argument_list pos:line="149" pos:column="82">(<argument><expr><name pos:line="149" pos:column="83">pLexerName</name></expr></argument>, <argument><expr><name pos:line="149" pos:column="95">lexDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="150" pos:column="33">else
					<expr_stmt><expr><name><name pos:line="151" pos:column="41">containers</name><index pos:line="151" pos:column="51">[<expr><name pos:line="151" pos:column="52">x</name></expr>]</index></name> <op:operator pos:line="151" pos:column="55">=</op:operator> <name pos:line="151" pos:column="57">NULL</name></expr>;</expr_stmt></else></if>
			}</block></for>

			<decl_stmt><decl><type><name pos:line="154" pos:column="25">TCHAR</name></type> <name><name pos:line="154" pos:column="31">xmlPath</name><index pos:line="154" pos:column="38">[<expr><name pos:line="154" pos:column="39">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name pos:line="155" pos:column="13">lstrcpy</name><argument_list pos:line="155" pos:column="20">(<argument><expr><name pos:line="155" pos:column="21">xmlPath</name></expr></argument>, <argument><expr><call><name><name pos:line="155" pos:column="30">nppParams</name><op:operator pos:line="155" pos:column="39">-&gt;</op:operator><name pos:line="155" pos:column="41">getNppPath</name></name><argument_list pos:line="155" pos:column="51">()</argument_list></call><op:operator pos:line="155" pos:column="53">.</op:operator><call><name pos:line="155" pos:column="54">c_str</name><argument_list pos:line="155" pos:column="59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="156" pos:column="25">PathAppend</name><argument_list pos:line="156" pos:column="35">(<argument><expr><name pos:line="156" pos:column="36">xmlPath</name></expr></argument>, <argument><expr><call><name pos:line="156" pos:column="45">TEXT</name><argument_list pos:line="156" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="156" pos:column="50">"plugins\\Config"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name pos:line="157" pos:column="13">PathAppend</name><argument_list pos:line="157" pos:column="23">(<argument><expr><name pos:line="157" pos:column="24">xmlPath</name></expr></argument>, <argument><expr><call><name><name pos:line="157" pos:column="33">pi</name><op:operator pos:line="157" pos:column="35">-&gt;</op:operator><name pos:line="157" pos:column="37">_moduleName</name><op:operator pos:line="157" pos:column="48">.</op:operator><name pos:line="157" pos:column="49">c_str</name></name><argument_list pos:line="157" pos:column="54">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="158" pos:column="25">PathRemoveExtension</name><argument_list pos:line="158" pos:column="44">(<argument><expr><name pos:line="158" pos:column="45">xmlPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="159" pos:column="25">PathAddExtension</name><argument_list pos:line="159" pos:column="41">(<argument><expr><name pos:line="159" pos:column="42">xmlPath</name></expr></argument>, <argument><expr><call><name pos:line="159" pos:column="51">TEXT</name><argument_list pos:line="159" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="56">".xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="161" pos:column="25">if <condition pos:line="161" pos:column="28">(<expr><op:operator pos:line="161" pos:column="29">!</op:operator><call><name pos:line="161" pos:column="30">PathFileExists</name><argument_list pos:line="161" pos:column="44">(<argument><expr><name pos:line="161" pos:column="45">xmlPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="161" pos:column="54">
			<block pos:line="162" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="163" pos:column="33">lstrcpyn</name><argument_list pos:line="163" pos:column="41">(<argument><expr><name pos:line="163" pos:column="42">xmlPath</name></expr></argument>, <argument><expr><call><name pos:line="163" pos:column="51">TEXT</name><argument_list pos:line="163" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="163" pos:column="56">"\0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="163" pos:column="63">MAX_PATH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="164" pos:column="33">lstrcpy</name><argument_list pos:line="164" pos:column="40">(<argument><expr><name pos:line="164" pos:column="41">xmlPath</name></expr></argument>, <argument><expr><call><name><name pos:line="164" pos:column="50">nppParams</name><op:operator pos:line="164" pos:column="59">-&gt;</op:operator><name pos:line="164" pos:column="61">getAppDataNppDir</name></name><argument_list pos:line="164" pos:column="77">()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="165" pos:column="33">PathAppend</name><argument_list pos:line="165" pos:column="43">(<argument><expr><name pos:line="165" pos:column="44">xmlPath</name></expr></argument>, <argument><expr><call><name pos:line="165" pos:column="53">TEXT</name><argument_list pos:line="165" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="58">"plugins\\Config"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name pos:line="166" pos:column="17">PathAppend</name><argument_list pos:line="166" pos:column="27">(<argument><expr><name pos:line="166" pos:column="28">xmlPath</name></expr></argument>, <argument><expr><call><name><name pos:line="166" pos:column="37">pi</name><op:operator pos:line="166" pos:column="39">-&gt;</op:operator><name pos:line="166" pos:column="41">_moduleName</name><op:operator pos:line="166" pos:column="52">.</op:operator><name pos:line="166" pos:column="53">c_str</name></name><argument_list pos:line="166" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="167" pos:column="33">PathRemoveExtension</name><argument_list pos:line="167" pos:column="52">( <argument><expr><name pos:line="167" pos:column="54">xmlPath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="168" pos:column="33">PathAddExtension</name><argument_list pos:line="168" pos:column="49">( <argument><expr><name pos:line="168" pos:column="51">xmlPath</name></expr></argument>, <argument><expr><call><name pos:line="168" pos:column="60">TEXT</name><argument_list pos:line="168" pos:column="64">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="65">".xml"</lit:literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				
				<if pos:line="170" pos:column="33">if <condition pos:line="170" pos:column="36">(<expr><op:operator pos:line="170" pos:column="37">!</op:operator> <call><name pos:line="170" pos:column="39">PathFileExists</name><argument_list pos:line="170" pos:column="53">( <argument><expr><name pos:line="170" pos:column="55">xmlPath</name></expr></argument> )</argument_list></call></expr> )</condition><then pos:line="170" pos:column="66">
				<block pos:line="171" pos:column="33">{
					<throw pos:line="172" pos:column="41">throw <expr><call><name pos:line="172" pos:column="47">generic_string</name><argument_list pos:line="172" pos:column="61">(<argument><expr><call><name pos:line="172" pos:column="62">generic_string</name><argument_list pos:line="172" pos:column="76">(<argument><expr><name pos:line="172" pos:column="77">xmlPath</name></expr></argument>)</argument_list></call> <op:operator pos:line="172" pos:column="86">+</op:operator> <call><name pos:line="172" pos:column="88">TEXT</name><argument_list pos:line="172" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="172" pos:column="93">" is missing."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
				}</block></then></if>
			}</block></then></if>

			<decl_stmt><decl><type><name pos:line="176" pos:column="25">TiXmlDocument</name> <type:modifier pos:line="176" pos:column="39">*</type:modifier></type><name pos:line="176" pos:column="40">pXmlDoc</name> <init pos:line="176" pos:column="48">= <expr><op:operator pos:line="176" pos:column="50">new</op:operator> <call><name pos:line="176" pos:column="54">TiXmlDocument</name><argument_list pos:line="176" pos:column="67">(<argument><expr><name pos:line="176" pos:column="68">xmlPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="178" pos:column="25">if <condition pos:line="178" pos:column="28">(<expr><op:operator pos:line="178" pos:column="29">!</op:operator><call><name><name pos:line="178" pos:column="30">pXmlDoc</name><op:operator pos:line="178" pos:column="37">-&gt;</op:operator><name pos:line="178" pos:column="39">LoadFile</name></name><argument_list pos:line="178" pos:column="47">()</argument_list></call></expr>)</condition><then pos:line="178" pos:column="50">
			<block pos:line="179" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="180" pos:column="33">delete</op:operator> <name pos:line="180" pos:column="40">pXmlDoc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="181" pos:column="33">pXmlDoc</name> <op:operator pos:line="181" pos:column="41">=</op:operator> <name pos:line="181" pos:column="43">NULL</name></expr>;</expr_stmt>
				<throw pos:line="182" pos:column="33">throw <expr><call><name pos:line="182" pos:column="39">generic_string</name><argument_list pos:line="182" pos:column="53">(<argument><expr><call><name pos:line="182" pos:column="54">generic_string</name><argument_list pos:line="182" pos:column="68">(<argument><expr><name pos:line="182" pos:column="69">xmlPath</name></expr></argument>)</argument_list></call> <op:operator pos:line="182" pos:column="78">+</op:operator> <call><name pos:line="182" pos:column="80">TEXT</name><argument_list pos:line="182" pos:column="84">(<argument><expr><lit:literal type="string" pos:line="182" pos:column="85">" failed to load."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
			}</block></then></if>
			
			<for pos:line="185" pos:column="25">for (<init><decl><type><name pos:line="185" pos:column="30">int</name></type> <name pos:line="185" pos:column="34">x</name> <init pos:line="185" pos:column="36">= <expr><lit:literal type="number" pos:line="185" pos:column="38">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="185" pos:column="41">x</name> <op:operator pos:line="185" pos:column="43">&lt;</op:operator> <name pos:line="185" pos:column="45">numLexers</name></expr>;</condition> <incr><expr><name pos:line="185" pos:column="56">x</name><op:operator pos:line="185" pos:column="57">++</op:operator></expr></incr>) <comment type="line" pos:line="185" pos:column="61">// postpone adding in case the xml is missing/corrupt</comment>
				<if pos:line="186" pos:column="33">if <condition pos:line="186" pos:column="36">(<expr><name><name pos:line="186" pos:column="37">containers</name><index pos:line="186" pos:column="47">[<expr><name pos:line="186" pos:column="48">x</name></expr>]</index></name> <op:operator pos:line="186" pos:column="51">!=</op:operator> <name pos:line="186" pos:column="54">NULL</name></expr>)</condition><then pos:line="186" pos:column="59">
					<expr_stmt><expr><call><name><name pos:line="187" pos:column="41">nppParams</name><op:operator pos:line="187" pos:column="50">-&gt;</op:operator><name pos:line="187" pos:column="52">addExternalLangToEnd</name></name><argument_list pos:line="187" pos:column="72">(<argument><expr><name><name pos:line="187" pos:column="73">containers</name><index pos:line="187" pos:column="83">[<expr><name pos:line="187" pos:column="84">x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></for>

			<expr_stmt><expr><call><name><name pos:line="189" pos:column="25">nppParams</name><op:operator pos:line="189" pos:column="34">-&gt;</op:operator><name pos:line="189" pos:column="36">getExternalLexerFromXmlTree</name></name><argument_list pos:line="189" pos:column="63">(<argument><expr><name pos:line="189" pos:column="64">pXmlDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="190" pos:column="25">nppParams</name><op:operator pos:line="190" pos:column="34">-&gt;</op:operator><name pos:line="190" pos:column="36">getExternalLexerDoc</name></name><argument_list pos:line="190" pos:column="55">()</argument_list></call><op:operator pos:line="190" pos:column="57">-&gt;</op:operator><call><name pos:line="190" pos:column="59">push_back</name><argument_list pos:line="190" pos:column="68">(<argument><expr><name pos:line="190" pos:column="69">pXmlDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="191" pos:column="1">#<cpp:directive pos:line="191" pos:column="2">ifdef</cpp:directive> <name pos:line="191" pos:column="8">UNICODE</name></cpp:ifdef>
			<decl_stmt><decl><type><specifier pos:line="192" pos:column="25">const</specifier> <name pos:line="192" pos:column="31">char</name> <type:modifier pos:line="192" pos:column="36">*</type:modifier></type><name pos:line="192" pos:column="37">pDllName</name> <init pos:line="192" pos:column="46">= <expr><call><name><name pos:line="192" pos:column="48">wmc</name><op:operator pos:line="192" pos:column="51">-&gt;</op:operator><name pos:line="192" pos:column="53">wchar2char</name></name><argument_list pos:line="192" pos:column="63">(<argument><expr><name pos:line="192" pos:column="64">pluginFilePath</name></expr></argument>, <argument><expr><name pos:line="192" pos:column="80">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="193" pos:column="1">#<cpp:directive pos:line="193" pos:column="2">else</cpp:directive></cpp:else>
			<decl_stmt><decl><type><specifier pos:line="194" pos:column="25">const</specifier> <name pos:line="194" pos:column="31">char</name> <type:modifier pos:line="194" pos:column="36">*</type:modifier></type><name pos:line="194" pos:column="37">pDllName</name> <init pos:line="194" pos:column="46">= <expr><name pos:line="194" pos:column="48">pluginFilePath</name></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="195" pos:column="1">#<cpp:directive pos:line="195" pos:column="2">endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><call><name><op:operator pos:line="196" pos:column="25">::</op:operator><name pos:line="196" pos:column="27">SendMessage</name></name><argument_list pos:line="196" pos:column="38">(<argument><expr><name><name pos:line="196" pos:column="39">_nppData</name><op:operator pos:line="196" pos:column="47">.</op:operator><name pos:line="196" pos:column="48">_scintillaMainHandle</name></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="70">SCI_LOADLEXERLIBRARY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="196" pos:column="92">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="196" pos:column="95">(</op:operator><name pos:line="196" pos:column="96">LPARAM</name><op:operator pos:line="196" pos:column="102">)</op:operator><name pos:line="196" pos:column="103">pDllName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="199" pos:column="17">addInLoadedDlls</name><argument_list pos:line="199" pos:column="32">(<argument><expr><name pos:line="199" pos:column="33">pluginFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="200" pos:column="17">_pluginInfos</name><op:operator pos:line="200" pos:column="29">.</op:operator><name pos:line="200" pos:column="30">push_back</name></name><argument_list pos:line="200" pos:column="39">(<argument><expr><name pos:line="200" pos:column="40">pi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="201" pos:column="9">return <expr><op:operator pos:line="201" pos:column="16">(</op:operator><call><name><name pos:line="201" pos:column="17">_pluginInfos</name><op:operator pos:line="201" pos:column="29">.</op:operator><name pos:line="201" pos:column="30">size</name></name><argument_list pos:line="201" pos:column="34">()</argument_list></call> <op:operator pos:line="201" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="201" pos:column="39">1</lit:literal><op:operator pos:line="201" pos:column="40">)</op:operator></expr>;</return>
	}</block> <catch pos:line="202" pos:column="11">catch<parameter_list pos:line="202" pos:column="16">(<param><decl><type><name><name pos:line="202" pos:column="17">std</name><op:operator pos:line="202" pos:column="20">::</op:operator><name pos:line="202" pos:column="22">exception</name></name></type> <name pos:line="202" pos:column="32">e</name></decl></param>)</parameter_list> <block pos:line="202" pos:column="35">{
		<expr_stmt><expr><call><name><op:operator pos:line="203" pos:column="17">::</op:operator><name pos:line="203" pos:column="19">MessageBoxA</name></name><argument_list pos:line="203" pos:column="30">(<argument><expr><name pos:line="203" pos:column="31">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="203" pos:column="37">e</name><op:operator pos:line="203" pos:column="38">.</op:operator><name pos:line="203" pos:column="39">what</name></name><argument_list pos:line="203" pos:column="43">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="203" pos:column="47">"Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="203" pos:column="60">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="204" pos:column="17">return <expr><op:operator pos:line="204" pos:column="24">-</op:operator><lit:literal type="number" pos:line="204" pos:column="25">1</lit:literal></expr>;</return>
	}</block></catch> <catch pos:line="205" pos:column="11">catch<parameter_list pos:line="205" pos:column="16">(<param><decl><type><name pos:line="205" pos:column="17">generic_string</name></type> <name pos:line="205" pos:column="32">s</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="35">{
		<expr_stmt><expr><name pos:line="206" pos:column="17">s</name> <op:operator pos:line="206" pos:column="19">+=</op:operator> <call><name pos:line="206" pos:column="22">TEXT</name><argument_list pos:line="206" pos:column="26">(<argument><expr><lit:literal type="string" pos:line="206" pos:column="27">"\n\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="207" pos:column="17">s</name> <op:operator pos:line="207" pos:column="19">+=</op:operator> <name pos:line="207" pos:column="22">USERMSG</name></expr>;</expr_stmt>
		<if pos:line="208" pos:column="17">if <condition pos:line="208" pos:column="20">(<expr><call><name><op:operator pos:line="208" pos:column="21">::</op:operator><name pos:line="208" pos:column="23">MessageBox</name></name><argument_list pos:line="208" pos:column="33">(<argument><expr><name pos:line="208" pos:column="34">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="208" pos:column="40">s</name><op:operator pos:line="208" pos:column="41">.</op:operator><name pos:line="208" pos:column="42">c_str</name></name><argument_list pos:line="208" pos:column="47">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="208" pos:column="51">pluginFilePath</name></expr></argument>, <argument><expr><name pos:line="208" pos:column="67">MB_YESNO</name></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="77">==</op:operator> <name pos:line="208" pos:column="80">IDYES</name></expr>)</condition><then pos:line="208" pos:column="86">
		<block pos:line="209" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="210" pos:column="25">dll2Remove</name><op:operator pos:line="210" pos:column="35">.</op:operator><name pos:line="210" pos:column="36">push_back</name></name><argument_list pos:line="210" pos:column="45">(<argument><expr><name pos:line="210" pos:column="46">pluginFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><op:operator pos:line="212" pos:column="17">delete</op:operator> <name pos:line="212" pos:column="24">pi</name></expr>;</expr_stmt>
        <return pos:line="213" pos:column="9">return <expr><op:operator pos:line="213" pos:column="16">-</op:operator><lit:literal type="number" pos:line="213" pos:column="17">1</lit:literal></expr>;</return>
	}</block></catch> <catch pos:line="214" pos:column="11">catch<parameter_list pos:line="214" pos:column="16">(<param><decl><type><type:modifier pos:line="214" pos:column="17">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="214" pos:column="22">{
		<decl_stmt><decl><type><name pos:line="215" pos:column="17">generic_string</name></type> <name pos:line="215" pos:column="32">msg</name> <init pos:line="215" pos:column="36">= <expr><call><name pos:line="215" pos:column="38">TEXT</name><argument_list pos:line="215" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="43">"Failed to load"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="216" pos:column="17">msg</name> <op:operator pos:line="216" pos:column="21">+=</op:operator> <call><name pos:line="216" pos:column="24">TEXT</name><argument_list pos:line="216" pos:column="28">(<argument><expr><lit:literal type="string" pos:line="216" pos:column="29">"\n\n"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="217" pos:column="17">msg</name> <op:operator pos:line="217" pos:column="21">+=</op:operator> <name pos:line="217" pos:column="24">USERMSG</name></expr>;</expr_stmt>
		<if pos:line="218" pos:column="17">if <condition pos:line="218" pos:column="20">(<expr><call><name><op:operator pos:line="218" pos:column="21">::</op:operator><name pos:line="218" pos:column="23">MessageBox</name></name><argument_list pos:line="218" pos:column="33">(<argument><expr><name pos:line="218" pos:column="34">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="218" pos:column="40">msg</name><op:operator pos:line="218" pos:column="43">.</op:operator><name pos:line="218" pos:column="44">c_str</name></name><argument_list pos:line="218" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="218" pos:column="53">pluginFilePath</name></expr></argument>, <argument><expr><name pos:line="218" pos:column="69">MB_YESNO</name></expr></argument>)</argument_list></call> <op:operator pos:line="218" pos:column="79">==</op:operator> <name pos:line="218" pos:column="82">IDYES</name></expr>)</condition><then pos:line="218" pos:column="88">
		<block pos:line="219" pos:column="17">{
			<expr_stmt><expr><call><name><name pos:line="220" pos:column="25">dll2Remove</name><op:operator pos:line="220" pos:column="35">.</op:operator><name pos:line="220" pos:column="36">push_back</name></name><argument_list pos:line="220" pos:column="45">(<argument><expr><name pos:line="220" pos:column="46">pluginFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><op:operator pos:line="222" pos:column="17">delete</op:operator> <name pos:line="222" pos:column="24">pi</name></expr>;</expr_stmt>
        <return pos:line="223" pos:column="9">return <expr><op:operator pos:line="223" pos:column="16">-</op:operator><lit:literal type="number" pos:line="223" pos:column="17">1</lit:literal></expr>;</return>
	}</block></catch></try>
}</block></function>


<function><type><name pos:line="228" pos:column="1">bool</name></type> <name><name pos:line="228" pos:column="6">PluginsManager</name><op:operator pos:line="228" pos:column="20">::</op:operator><name pos:line="228" pos:column="22">loadPlugins</name></name><parameter_list pos:line="228" pos:column="33">(<param><decl><type><specifier pos:line="228" pos:column="34">const</specifier> <name pos:line="228" pos:column="40">TCHAR</name> <type:modifier pos:line="228" pos:column="46">*</type:modifier></type><name pos:line="228" pos:column="47">dir</name></decl></param>)</parameter_list>
<block pos:line="229" pos:column="1">{
	<if pos:line="230" pos:column="9">if <condition pos:line="230" pos:column="12">(<expr><name pos:line="230" pos:column="13">_isDisabled</name></expr>)</condition><then pos:line="230" pos:column="25">
		<return pos:line="231" pos:column="17">return <expr><lit:literal type="boolean" pos:line="231" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name><name pos:line="233" pos:column="9">vector</name><argument_list pos:line="233" pos:column="15">&lt;<argument><expr><name pos:line="233" pos:column="16">generic_string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="233" pos:column="32">dllNames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="234" pos:column="9">vector</name><argument_list pos:line="234" pos:column="15">&lt;<argument><expr><name pos:line="234" pos:column="16">generic_string</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="234" pos:column="32">dll2Remove</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="235" pos:column="9">NppParameters</name> <type:modifier pos:line="235" pos:column="23">*</type:modifier></type> <name pos:line="235" pos:column="25">nppParams</name> <init pos:line="235" pos:column="35">= <expr><call><name><name pos:line="235" pos:column="37">NppParameters</name><op:operator pos:line="235" pos:column="50">::</op:operator><name pos:line="235" pos:column="52">getInstance</name></name><argument_list pos:line="235" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="236" pos:column="5">generic_string</name></type> <name pos:line="236" pos:column="20">nppPath</name> <init pos:line="236" pos:column="28">= <expr><call><name><name pos:line="236" pos:column="30">nppParams</name><op:operator pos:line="236" pos:column="39">-&gt;</op:operator><name pos:line="236" pos:column="41">getNppPath</name></name><argument_list pos:line="236" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="237" pos:column="9">generic_string</name></type> <name pos:line="237" pos:column="24">pluginsFullPathFilter</name> <init pos:line="237" pos:column="46">= <expr><op:operator pos:line="237" pos:column="48">(</op:operator><name pos:line="237" pos:column="49">dir</name> <op:operator pos:line="237" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="237" pos:column="56">dir</name><index pos:line="237" pos:column="59">[<expr><lit:literal type="number" pos:line="237" pos:column="60">0</lit:literal></expr>]</index></name><op:operator pos:line="237" pos:column="62">)</op:operator><op:operator pos:line="237" pos:column="63">?</op:operator><name pos:line="237" pos:column="64">dir</name><op:operator pos:line="237" pos:column="67">:</op:operator><name pos:line="237" pos:column="68">nppPath</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="239" pos:column="9">pluginsFullPathFilter</name> <op:operator pos:line="239" pos:column="31">+=</op:operator> <call><name pos:line="239" pos:column="34">TEXT</name><argument_list pos:line="239" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="239" pos:column="39">"\\plugins\\*.dll"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="241" pos:column="9">WIN32_FIND_DATA</name></type> <name pos:line="241" pos:column="25">foundData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="242" pos:column="9">HANDLE</name></type> <name pos:line="242" pos:column="16">hFindFile</name> <init pos:line="242" pos:column="26">= <expr><call><name><op:operator pos:line="242" pos:column="28">::</op:operator><name pos:line="242" pos:column="30">FindFirstFile</name></name><argument_list pos:line="242" pos:column="43">(<argument><expr><call><name><name pos:line="242" pos:column="44">pluginsFullPathFilter</name><op:operator pos:line="242" pos:column="65">.</op:operator><name pos:line="242" pos:column="66">c_str</name></name><argument_list pos:line="242" pos:column="71">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="242" pos:column="75">&amp;</op:operator><name pos:line="242" pos:column="76">foundData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="243" pos:column="9">if <condition pos:line="243" pos:column="12">(<expr><name pos:line="243" pos:column="13">hFindFile</name> <op:operator pos:line="243" pos:column="23">!=</op:operator> <name pos:line="243" pos:column="26">INVALID_HANDLE_VALUE</name></expr>)</condition><then pos:line="243" pos:column="47">
	<block pos:line="244" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="245" pos:column="17">generic_string</name></type> <name pos:line="245" pos:column="32">plugins1stFullPath</name> <init pos:line="245" pos:column="51">= <expr><op:operator pos:line="245" pos:column="53">(</op:operator><name pos:line="245" pos:column="54">dir</name> <op:operator pos:line="245" pos:column="58">&amp;&amp;</op:operator> <name><name pos:line="245" pos:column="61">dir</name><index pos:line="245" pos:column="64">[<expr><lit:literal type="number" pos:line="245" pos:column="65">0</lit:literal></expr>]</index></name><op:operator pos:line="245" pos:column="67">)</op:operator><op:operator pos:line="245" pos:column="68">?</op:operator><name pos:line="245" pos:column="69">dir</name><op:operator pos:line="245" pos:column="72">:</op:operator><name pos:line="245" pos:column="73">nppPath</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="246" pos:column="17">plugins1stFullPath</name> <op:operator pos:line="246" pos:column="36">+=</op:operator> <call><name pos:line="246" pos:column="39">TEXT</name><argument_list pos:line="246" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="246" pos:column="44">"\\plugins\\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="247" pos:column="17">plugins1stFullPath</name> <op:operator pos:line="247" pos:column="36">+=</op:operator> <name><name pos:line="247" pos:column="39">foundData</name><op:operator pos:line="247" pos:column="48">.</op:operator><name pos:line="247" pos:column="49">cFileName</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="248" pos:column="17">dllNames</name><op:operator pos:line="248" pos:column="25">.</op:operator><name pos:line="248" pos:column="26">push_back</name></name><argument_list pos:line="248" pos:column="35">(<argument><expr><name pos:line="248" pos:column="36">plugins1stFullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<while pos:line="250" pos:column="17">while <condition pos:line="250" pos:column="23">(<expr><call><name><op:operator pos:line="250" pos:column="24">::</op:operator><name pos:line="250" pos:column="26">FindNextFile</name></name><argument_list pos:line="250" pos:column="38">(<argument><expr><name pos:line="250" pos:column="39">hFindFile</name></expr></argument>, <argument><expr><op:operator pos:line="250" pos:column="50">&amp;</op:operator><name pos:line="250" pos:column="51">foundData</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block pos:line="251" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="252" pos:column="13">bool</name></type> <name pos:line="252" pos:column="18">isInBlackList</name> <init pos:line="252" pos:column="32">= <expr><call><name><name pos:line="252" pos:column="34">nppParams</name><op:operator pos:line="252" pos:column="43">-&gt;</op:operator><name pos:line="252" pos:column="45">isInBlackList</name></name><argument_list pos:line="252" pos:column="58">(<argument><expr><name><name pos:line="252" pos:column="59">foundData</name><op:operator pos:line="252" pos:column="68">.</op:operator><name pos:line="252" pos:column="69">cFileName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if pos:line="253" pos:column="13">if <condition pos:line="253" pos:column="16">(<expr><op:operator pos:line="253" pos:column="17">!</op:operator><name pos:line="253" pos:column="18">isInBlackList</name></expr>)</condition><then pos:line="253" pos:column="32">
            <block pos:line="254" pos:column="13">{
			    <decl_stmt><decl><type><name pos:line="255" pos:column="29">generic_string</name></type> <name pos:line="255" pos:column="44">fullPath</name> <init pos:line="255" pos:column="53">= <expr><op:operator pos:line="255" pos:column="55">(</op:operator><name pos:line="255" pos:column="56">dir</name> <op:operator pos:line="255" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="255" pos:column="63">dir</name><index pos:line="255" pos:column="66">[<expr><lit:literal type="number" pos:line="255" pos:column="67">0</lit:literal></expr>]</index></name><op:operator pos:line="255" pos:column="69">)</op:operator><op:operator pos:line="255" pos:column="70">?</op:operator><name pos:line="255" pos:column="71">dir</name><op:operator pos:line="255" pos:column="74">:</op:operator><name pos:line="255" pos:column="75">nppPath</name></expr></init></decl>;</decl_stmt>
			    <expr_stmt><expr><name pos:line="256" pos:column="29">fullPath</name> <op:operator pos:line="256" pos:column="38">+=</op:operator> <call><name pos:line="256" pos:column="41">TEXT</name><argument_list pos:line="256" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="256" pos:column="46">"\\plugins\\"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <expr_stmt><expr><name pos:line="258" pos:column="29">fullPath</name> <op:operator pos:line="258" pos:column="38">+=</op:operator> <name><name pos:line="258" pos:column="41">foundData</name><op:operator pos:line="258" pos:column="50">.</op:operator><name pos:line="258" pos:column="51">cFileName</name></name></expr>;</expr_stmt>
			    <expr_stmt><expr><call><name><name pos:line="259" pos:column="29">dllNames</name><op:operator pos:line="259" pos:column="37">.</op:operator><name pos:line="259" pos:column="38">push_back</name></name><argument_list pos:line="259" pos:column="47">(<argument><expr><name pos:line="259" pos:column="48">fullPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <decl_stmt><decl><type><name pos:line="261" pos:column="13">PluginList</name> <type:modifier pos:line="261" pos:column="24">&amp;</type:modifier></type> <name pos:line="261" pos:column="26">pl</name> <init pos:line="261" pos:column="29">= <expr><call><name><name pos:line="261" pos:column="31">nppParams</name><op:operator pos:line="261" pos:column="40">-&gt;</op:operator><name pos:line="261" pos:column="42">getPluginList</name></name><argument_list pos:line="261" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="262" pos:column="13">pl</name><op:operator pos:line="262" pos:column="15">.</op:operator><name pos:line="262" pos:column="16">add</name></name><argument_list pos:line="262" pos:column="19">(<argument><expr><name><name pos:line="262" pos:column="20">foundData</name><op:operator pos:line="262" pos:column="29">.</op:operator><name pos:line="262" pos:column="30">cFileName</name></name></expr></argument>, <argument><expr><name pos:line="262" pos:column="41">isInBlackList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name><op:operator pos:line="264" pos:column="17">::</op:operator><name pos:line="264" pos:column="19">FindClose</name></name><argument_list pos:line="264" pos:column="28">(<argument><expr><name pos:line="264" pos:column="29">hFindFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="266" pos:column="17">size_t</name></type> <name pos:line="266" pos:column="24">i</name> <init pos:line="266" pos:column="26">= <expr><lit:literal type="number" pos:line="266" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>

		<for pos:line="268" pos:column="17">for ( <init pos:line="268" pos:column="23">;</init> <condition><expr><name pos:line="268" pos:column="25">i</name> <op:operator pos:line="268" pos:column="27">&lt;</op:operator> <call><name><name pos:line="268" pos:column="29">dllNames</name><op:operator pos:line="268" pos:column="37">.</op:operator><name pos:line="268" pos:column="38">size</name></name><argument_list pos:line="268" pos:column="42">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="268" pos:column="47">i</name><op:operator pos:line="268" pos:column="48">++</op:operator></expr></incr>)
		<block pos:line="269" pos:column="17">{
            <expr_stmt><expr><call><name pos:line="270" pos:column="13">loadPlugin</name><argument_list pos:line="270" pos:column="23">(<argument><expr><name><name pos:line="270" pos:column="24">dllNames</name><index pos:line="270" pos:column="32">[<expr><name pos:line="270" pos:column="33">i</name></expr>]</index></name><op:operator pos:line="270" pos:column="35">.</op:operator><call><name pos:line="270" pos:column="36">c_str</name><argument_list pos:line="270" pos:column="41">()</argument_list></call></expr></argument>,  <argument><expr><name pos:line="270" pos:column="46">dll2Remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
        
	}</block></then></if>

	<for pos:line="275" pos:column="9">for (<init><decl><type><name pos:line="275" pos:column="14">size_t</name></type> <name pos:line="275" pos:column="21">j</name> <init pos:line="275" pos:column="23">= <expr><lit:literal type="number" pos:line="275" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="275" pos:column="29">j</name> <op:operator pos:line="275" pos:column="31">&lt;</op:operator> <call><name><name pos:line="275" pos:column="33">dll2Remove</name><op:operator pos:line="275" pos:column="43">.</op:operator><name pos:line="275" pos:column="44">size</name></name><argument_list pos:line="275" pos:column="48">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="275" pos:column="53">j</name><op:operator pos:line="275" pos:column="54">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name><op:operator pos:line="276" pos:column="17">::</op:operator><name pos:line="276" pos:column="19">DeleteFile</name></name><argument_list pos:line="276" pos:column="29">(<argument><expr><name><name pos:line="276" pos:column="30">dll2Remove</name><index pos:line="276" pos:column="40">[<expr><name pos:line="276" pos:column="41">j</name></expr>]</index></name><op:operator pos:line="276" pos:column="43">.</op:operator><call><name pos:line="276" pos:column="44">c_str</name><argument_list pos:line="276" pos:column="49">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

	<return pos:line="278" pos:column="9">return <expr><lit:literal type="boolean" pos:line="278" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="281" pos:column="1">// return true if cmdID found and its shortcut is enable</comment>
<comment type="line" pos:line="282" pos:column="1">// false otherwise</comment>
<function><type><name pos:line="283" pos:column="1">bool</name></type> <name><name pos:line="283" pos:column="6">PluginsManager</name><op:operator pos:line="283" pos:column="20">::</op:operator><name pos:line="283" pos:column="22">getShortcutByCmdID</name></name><parameter_list pos:line="283" pos:column="40">(<param><decl><type><name pos:line="283" pos:column="41">int</name></type> <name pos:line="283" pos:column="45">cmdID</name></decl></param>, <param><decl><type><name pos:line="283" pos:column="52">ShortcutKey</name> <type:modifier pos:line="283" pos:column="64">*</type:modifier></type><name pos:line="283" pos:column="65">sk</name></decl></param>)</parameter_list>
<block pos:line="284" pos:column="1">{
	<if pos:line="285" pos:column="9">if <condition pos:line="285" pos:column="12">(<expr><name pos:line="285" pos:column="13">cmdID</name> <op:operator pos:line="285" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="285" pos:column="22">0</lit:literal> <op:operator pos:line="285" pos:column="24">||</op:operator> <op:operator pos:line="285" pos:column="27">!</op:operator><name pos:line="285" pos:column="28">sk</name></expr>)</condition><then pos:line="285" pos:column="31">
		<return pos:line="286" pos:column="17">return <expr><lit:literal type="boolean" pos:line="286" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><specifier pos:line="288" pos:column="9">const</specifier> <name><name pos:line="288" pos:column="15">vector</name><argument_list pos:line="288" pos:column="21">&lt;<argument><expr><name pos:line="288" pos:column="22">PluginCmdShortcut</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="288" pos:column="41">&amp;</type:modifier></type> <name pos:line="288" pos:column="43">pluginCmdSCList</name> <init pos:line="288" pos:column="59">= <expr><op:operator pos:line="288" pos:column="61">(</op:operator><call><name><name pos:line="288" pos:column="62">NppParameters</name><op:operator pos:line="288" pos:column="75">::</op:operator><name pos:line="288" pos:column="77">getInstance</name></name><argument_list pos:line="288" pos:column="88">()</argument_list></call><op:operator pos:line="288" pos:column="90">)</op:operator><op:operator pos:line="288" pos:column="91">-&gt;</op:operator><call><name pos:line="288" pos:column="93">getPluginCommandList</name><argument_list pos:line="288" pos:column="113">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for pos:line="290" pos:column="9">for (<init><decl><type><name pos:line="290" pos:column="14">size_t</name></type> <name pos:line="290" pos:column="21">i</name> <init pos:line="290" pos:column="23">= <expr><lit:literal type="number" pos:line="290" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="290" pos:column="29">i</name> <op:operator pos:line="290" pos:column="31">&lt;</op:operator> <call><name><name pos:line="290" pos:column="33">pluginCmdSCList</name><op:operator pos:line="290" pos:column="48">.</op:operator><name pos:line="290" pos:column="49">size</name></name><argument_list pos:line="290" pos:column="53">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="290" pos:column="58">i</name><op:operator pos:line="290" pos:column="59">++</op:operator></expr></incr>)
	<block pos:line="291" pos:column="9">{
		<if pos:line="292" pos:column="17">if <condition pos:line="292" pos:column="20">(<expr><name><name pos:line="292" pos:column="21">pluginCmdSCList</name><index pos:line="292" pos:column="36">[<expr><name pos:line="292" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="292" pos:column="39">.</op:operator><call><name pos:line="292" pos:column="40">getID</name><argument_list pos:line="292" pos:column="45">()</argument_list></call> <op:operator pos:line="292" pos:column="48">==</op:operator> <op:operator pos:line="292" pos:column="51">(</op:operator><name pos:line="292" pos:column="52">unsigned</name> <name pos:line="292" pos:column="61">long</name><op:operator pos:line="292" pos:column="65">)</op:operator><name pos:line="292" pos:column="66">cmdID</name></expr>)</condition><then pos:line="292" pos:column="72">
		<block pos:line="293" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="294" pos:column="25">const</specifier> <name pos:line="294" pos:column="31">KeyCombo</name> <type:modifier pos:line="294" pos:column="40">&amp;</type:modifier></type> <name pos:line="294" pos:column="42">kc</name> <init pos:line="294" pos:column="45">= <expr><name><name pos:line="294" pos:column="47">pluginCmdSCList</name><index pos:line="294" pos:column="62">[<expr><name pos:line="294" pos:column="63">i</name></expr>]</index></name><op:operator pos:line="294" pos:column="65">.</op:operator><call><name pos:line="294" pos:column="66">getKeyCombo</name><argument_list pos:line="294" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="295" pos:column="25">if <condition pos:line="295" pos:column="28">(<expr><name><name pos:line="295" pos:column="29">kc</name><op:operator pos:line="295" pos:column="31">.</op:operator><name pos:line="295" pos:column="32">_key</name></name> <op:operator pos:line="295" pos:column="37">==</op:operator> <lit:literal type="number" pos:line="295" pos:column="40">0x00</lit:literal></expr>)</condition><then pos:line="295" pos:column="45">
				<return pos:line="296" pos:column="33">return <expr><lit:literal type="boolean" pos:line="296" pos:column="40">false</lit:literal></expr>;</return></then></if>

			<expr_stmt><expr><name><name pos:line="298" pos:column="25">sk</name><op:operator pos:line="298" pos:column="27">-&gt;</op:operator><name pos:line="298" pos:column="29">_isAlt</name></name> <op:operator pos:line="298" pos:column="36">=</op:operator> <name><name pos:line="298" pos:column="38">kc</name><op:operator pos:line="298" pos:column="40">.</op:operator><name pos:line="298" pos:column="41">_isAlt</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="299" pos:column="25">sk</name><op:operator pos:line="299" pos:column="27">-&gt;</op:operator><name pos:line="299" pos:column="29">_isCtrl</name></name> <op:operator pos:line="299" pos:column="37">=</op:operator> <name><name pos:line="299" pos:column="39">kc</name><op:operator pos:line="299" pos:column="41">.</op:operator><name pos:line="299" pos:column="42">_isCtrl</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="300" pos:column="25">sk</name><op:operator pos:line="300" pos:column="27">-&gt;</op:operator><name pos:line="300" pos:column="29">_isShift</name></name> <op:operator pos:line="300" pos:column="38">=</op:operator> <name><name pos:line="300" pos:column="40">kc</name><op:operator pos:line="300" pos:column="42">.</op:operator><name pos:line="300" pos:column="43">_isShift</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="301" pos:column="25">sk</name><op:operator pos:line="301" pos:column="27">-&gt;</op:operator><name pos:line="301" pos:column="29">_key</name></name> <op:operator pos:line="301" pos:column="34">=</op:operator> <name><name pos:line="301" pos:column="36">kc</name><op:operator pos:line="301" pos:column="38">.</op:operator><name pos:line="301" pos:column="39">_key</name></name></expr>;</expr_stmt>
			<return pos:line="302" pos:column="25">return <expr><lit:literal type="boolean" pos:line="302" pos:column="32">true</lit:literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return pos:line="305" pos:column="9">return <expr><lit:literal type="boolean" pos:line="305" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>


<function><type><name pos:line="309" pos:column="1">void</name></type> <name><name pos:line="309" pos:column="6">PluginsManager</name><op:operator pos:line="309" pos:column="20">::</op:operator><name pos:line="309" pos:column="22">addInMenuFromPMIndex</name></name><parameter_list pos:line="309" pos:column="42">(<param><decl><type><name pos:line="309" pos:column="43">int</name></type> <name pos:line="309" pos:column="47">i</name></decl></param>)</parameter_list>
<block pos:line="310" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="311" pos:column="5">vector</name><argument_list pos:line="311" pos:column="11">&lt;<argument><expr><name pos:line="311" pos:column="12">PluginCmdShortcut</name></expr></argument>&gt;</argument_list></name> <type:modifier pos:line="311" pos:column="31">&amp;</type:modifier></type> <name pos:line="311" pos:column="33">pluginCmdSCList</name> <init pos:line="311" pos:column="49">= <expr><op:operator pos:line="311" pos:column="51">(</op:operator><call><name><name pos:line="311" pos:column="52">NppParameters</name><op:operator pos:line="311" pos:column="65">::</op:operator><name pos:line="311" pos:column="67">getInstance</name></name><argument_list pos:line="311" pos:column="78">()</argument_list></call><op:operator pos:line="311" pos:column="80">)</op:operator><op:operator pos:line="311" pos:column="81">-&gt;</op:operator><call><name pos:line="311" pos:column="83">getPluginCommandList</name><argument_list pos:line="311" pos:column="103">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="312" pos:column="9">::</op:operator><name pos:line="312" pos:column="11">InsertMenu</name></name><argument_list pos:line="312" pos:column="21">(<argument><expr><name pos:line="312" pos:column="22">_hPluginsMenu</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="37">i</name></expr></argument>, <argument><expr><name pos:line="312" pos:column="40">MF_BYPOSITION</name> <op:operator pos:line="312" pos:column="54">|</op:operator> <name pos:line="312" pos:column="56">MF_POPUP</name></expr></argument>, <argument><expr><op:operator pos:line="312" pos:column="66">(</op:operator><name pos:line="312" pos:column="67">UINT_PTR</name><op:operator pos:line="312" pos:column="75">)</op:operator><name><name pos:line="312" pos:column="76">_pluginInfos</name><index pos:line="312" pos:column="88">[<expr><name pos:line="312" pos:column="89">i</name></expr>]</index></name><op:operator pos:line="312" pos:column="91">-&gt;</op:operator><name pos:line="312" pos:column="93">_pluginMenu</name></expr></argument>, <argument><expr><name><name pos:line="312" pos:column="106">_pluginInfos</name><index pos:line="312" pos:column="118">[<expr><name pos:line="312" pos:column="119">i</name></expr>]</index></name><op:operator pos:line="312" pos:column="121">-&gt;</op:operator><call><name pos:line="312" pos:column="123">_pFuncGetName</name><argument_list pos:line="312" pos:column="136">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="314" pos:column="5">unsigned</name> <name pos:line="314" pos:column="14">short</name></type> <name pos:line="314" pos:column="20">j</name> <init pos:line="314" pos:column="22">= <expr><lit:literal type="number" pos:line="314" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="315" pos:column="9">for ( <init pos:line="315" pos:column="15">;</init> <condition><expr><name pos:line="315" pos:column="17">j</name> <op:operator pos:line="315" pos:column="19">&lt;</op:operator> <name><name pos:line="315" pos:column="21">_pluginInfos</name><index pos:line="315" pos:column="33">[<expr><name pos:line="315" pos:column="34">i</name></expr>]</index></name><op:operator pos:line="315" pos:column="36">-&gt;</op:operator><name pos:line="315" pos:column="38">_nbFuncItem</name></expr> ;</condition> <incr><expr><name pos:line="315" pos:column="52">j</name><op:operator pos:line="315" pos:column="53">++</op:operator></expr></incr>)
	<block pos:line="316" pos:column="9">{
		<if pos:line="317" pos:column="17">if <condition pos:line="317" pos:column="20">(<expr><name><name pos:line="317" pos:column="21">_pluginInfos</name><index pos:line="317" pos:column="33">[<expr><name pos:line="317" pos:column="34">i</name></expr>]</index></name><op:operator pos:line="317" pos:column="36">-&gt;</op:operator><name><name pos:line="317" pos:column="38">_funcItems</name><index pos:line="317" pos:column="48">[<expr><name pos:line="317" pos:column="49">j</name></expr>]</index></name><op:operator pos:line="317" pos:column="51">.</op:operator><name pos:line="317" pos:column="52">_pFunc</name> <op:operator pos:line="317" pos:column="59">==</op:operator> <name pos:line="317" pos:column="62">NULL</name></expr>)</condition><then pos:line="317" pos:column="67">
		<block pos:line="318" pos:column="17">{
			<expr_stmt><expr><call><name><op:operator pos:line="319" pos:column="25">::</op:operator><name pos:line="319" pos:column="27">InsertMenu</name></name><argument_list pos:line="319" pos:column="37">(<argument><expr><name><name pos:line="319" pos:column="38">_pluginInfos</name><index pos:line="319" pos:column="50">[<expr><name pos:line="319" pos:column="51">i</name></expr>]</index></name><op:operator pos:line="319" pos:column="53">-&gt;</op:operator><name pos:line="319" pos:column="55">_pluginMenu</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="68">j</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="71">MF_BYPOSITION</name> <op:operator pos:line="319" pos:column="85">|</op:operator> <name pos:line="319" pos:column="87">MF_SEPARATOR</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="319" pos:column="101">0</lit:literal></expr></argument>, <argument><expr><call><name pos:line="319" pos:column="104">TEXT</name><argument_list pos:line="319" pos:column="108">(<argument><expr><lit:literal type="string" pos:line="319" pos:column="109">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue pos:line="320" pos:column="25">continue;</continue>
		}</block></then></if>
		
        <expr_stmt><expr><call><name><name pos:line="323" pos:column="9">_pluginsCommands</name><op:operator pos:line="323" pos:column="25">.</op:operator><name pos:line="323" pos:column="26">push_back</name></name><argument_list pos:line="323" pos:column="35">(<argument><expr><call><name pos:line="323" pos:column="36">PluginCommand</name><argument_list pos:line="323" pos:column="49">(<argument><expr><name><name pos:line="323" pos:column="50">_pluginInfos</name><index pos:line="323" pos:column="62">[<expr><name pos:line="323" pos:column="63">i</name></expr>]</index></name><op:operator pos:line="323" pos:column="65">-&gt;</op:operator><call><name><name pos:line="323" pos:column="67">_moduleName</name><op:operator pos:line="323" pos:column="78">.</op:operator><name pos:line="323" pos:column="79">c_str</name></name><argument_list pos:line="323" pos:column="84">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="323" pos:column="88">j</name></expr></argument>, <argument><expr><name><name pos:line="323" pos:column="91">_pluginInfos</name><index pos:line="323" pos:column="103">[<expr><name pos:line="323" pos:column="104">i</name></expr>]</index></name><op:operator pos:line="323" pos:column="106">-&gt;</op:operator><name><name pos:line="323" pos:column="108">_funcItems</name><index pos:line="323" pos:column="118">[<expr><name pos:line="323" pos:column="119">j</name></expr>]</index></name><op:operator pos:line="323" pos:column="121">.</op:operator><name pos:line="323" pos:column="122">_pFunc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name pos:line="325" pos:column="17">int</name></type> <name pos:line="325" pos:column="21">cmdID</name> <init pos:line="325" pos:column="27">= <expr><name pos:line="325" pos:column="29">ID_PLUGINS_CMD</name> <op:operator pos:line="325" pos:column="44">+</op:operator> <op:operator pos:line="325" pos:column="46">(</op:operator><call><name><name pos:line="325" pos:column="47">_pluginsCommands</name><op:operator pos:line="325" pos:column="63">.</op:operator><name pos:line="325" pos:column="64">size</name></name><argument_list pos:line="325" pos:column="68">()</argument_list></call> <op:operator pos:line="325" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="325" pos:column="73">1</lit:literal><op:operator pos:line="325" pos:column="74">)</op:operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="326" pos:column="17">_pluginInfos</name><index pos:line="326" pos:column="29">[<expr><name pos:line="326" pos:column="30">i</name></expr>]</index></name><op:operator pos:line="326" pos:column="32">-&gt;</op:operator><name><name pos:line="326" pos:column="34">_funcItems</name><index pos:line="326" pos:column="44">[<expr><name pos:line="326" pos:column="45">j</name></expr>]</index></name><op:operator pos:line="326" pos:column="47">.</op:operator><name pos:line="326" pos:column="48">_cmdID</name> <op:operator pos:line="326" pos:column="55">=</op:operator> <name pos:line="326" pos:column="57">cmdID</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="327" pos:column="17">generic_string</name></type> <name pos:line="327" pos:column="32">itemName</name> <init pos:line="327" pos:column="41">= <expr><name><name pos:line="327" pos:column="43">_pluginInfos</name><index pos:line="327" pos:column="55">[<expr><name pos:line="327" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="327" pos:column="58">-&gt;</op:operator><name><name pos:line="327" pos:column="60">_funcItems</name><index pos:line="327" pos:column="70">[<expr><name pos:line="327" pos:column="71">j</name></expr>]</index></name><op:operator pos:line="327" pos:column="73">.</op:operator><name pos:line="327" pos:column="74">_itemName</name></expr></init></decl>;</decl_stmt>

		<if pos:line="329" pos:column="17">if <condition pos:line="329" pos:column="20">(<expr><name><name pos:line="329" pos:column="21">_pluginInfos</name><index pos:line="329" pos:column="33">[<expr><name pos:line="329" pos:column="34">i</name></expr>]</index></name><op:operator pos:line="329" pos:column="36">-&gt;</op:operator><name><name pos:line="329" pos:column="38">_funcItems</name><index pos:line="329" pos:column="48">[<expr><name pos:line="329" pos:column="49">j</name></expr>]</index></name><op:operator pos:line="329" pos:column="51">.</op:operator><name pos:line="329" pos:column="52">_pShKey</name></expr>)</condition><then pos:line="329" pos:column="60">
		<block pos:line="330" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="331" pos:column="25">ShortcutKey</name> <type:modifier pos:line="331" pos:column="37">&amp;</type:modifier></type> <name pos:line="331" pos:column="39">sKey</name> <init pos:line="331" pos:column="44">= <expr><op:operator pos:line="331" pos:column="46">*</op:operator><op:operator pos:line="331" pos:column="47">(</op:operator><name><name pos:line="331" pos:column="48">_pluginInfos</name><index pos:line="331" pos:column="60">[<expr><name pos:line="331" pos:column="61">i</name></expr>]</index></name><op:operator pos:line="331" pos:column="63">-&gt;</op:operator><name><name pos:line="331" pos:column="65">_funcItems</name><index pos:line="331" pos:column="75">[<expr><name pos:line="331" pos:column="76">j</name></expr>]</index></name><op:operator pos:line="331" pos:column="78">.</op:operator><name pos:line="331" pos:column="79">_pShKey</name><op:operator pos:line="331" pos:column="86">)</op:operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="332" pos:column="13">PluginCmdShortcut</name></type> <name pos:line="332" pos:column="31">pcs</name><argument_list pos:line="332" pos:column="34">(<argument><expr><call><name pos:line="332" pos:column="35">Shortcut</name><argument_list pos:line="332" pos:column="43">(<argument><expr><call><name><name pos:line="332" pos:column="44">itemName</name><op:operator pos:line="332" pos:column="52">.</op:operator><name pos:line="332" pos:column="53">c_str</name></name><argument_list pos:line="332" pos:column="58">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="332" pos:column="62">sKey</name><op:operator pos:line="332" pos:column="66">.</op:operator><name pos:line="332" pos:column="67">_isCtrl</name></name></expr></argument>, <argument><expr><name><name pos:line="332" pos:column="76">sKey</name><op:operator pos:line="332" pos:column="80">.</op:operator><name pos:line="332" pos:column="81">_isAlt</name></name></expr></argument>, <argument><expr><name><name pos:line="332" pos:column="89">sKey</name><op:operator pos:line="332" pos:column="93">.</op:operator><name pos:line="332" pos:column="94">_isShift</name></name></expr></argument>, <argument><expr><name><name pos:line="332" pos:column="104">sKey</name><op:operator pos:line="332" pos:column="108">.</op:operator><name pos:line="332" pos:column="109">_key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="332" pos:column="116">cmdID</name></expr></argument>, <argument><expr><name><name pos:line="332" pos:column="123">_pluginInfos</name><index pos:line="332" pos:column="135">[<expr><name pos:line="332" pos:column="136">i</name></expr>]</index></name><op:operator pos:line="332" pos:column="138">-&gt;</op:operator><call><name><name pos:line="332" pos:column="140">_moduleName</name><op:operator pos:line="332" pos:column="151">.</op:operator><name pos:line="332" pos:column="152">c_str</name></name><argument_list pos:line="332" pos:column="157">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="332" pos:column="161">j</name></expr></argument>)</argument_list></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="333" pos:column="25">pluginCmdSCList</name><op:operator pos:line="333" pos:column="40">.</op:operator><name pos:line="333" pos:column="41">push_back</name></name><argument_list pos:line="333" pos:column="50">(<argument><expr><name pos:line="333" pos:column="51">pcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="334" pos:column="25">itemName</name> <op:operator pos:line="334" pos:column="34">+=</op:operator> <call><name pos:line="334" pos:column="37">TEXT</name><argument_list pos:line="334" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="334" pos:column="42">"\t"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="335" pos:column="25">itemName</name> <op:operator pos:line="335" pos:column="34">+=</op:operator> <call><name><name pos:line="335" pos:column="37">pcs</name><op:operator pos:line="335" pos:column="40">.</op:operator><name pos:line="335" pos:column="41">toString</name></name><argument_list pos:line="335" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="337" pos:column="17">else
		<block pos:line="338" pos:column="17">{	<comment type="line" pos:line="338" pos:column="25">//no ShortcutKey is provided, add an disabled shortcut (so it can still be mapped, Paramaters class can still index any changes and the toolbar wont funk out</comment>
            <decl_stmt><decl><type><name pos:line="339" pos:column="13">Shortcut</name></type> <name pos:line="339" pos:column="22">sc</name><argument_list pos:line="339" pos:column="24">(<argument><expr><call><name><name pos:line="339" pos:column="25">itemName</name><op:operator pos:line="339" pos:column="33">.</op:operator><name pos:line="339" pos:column="34">c_str</name></name><argument_list pos:line="339" pos:column="39">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="339" pos:column="43">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="339" pos:column="50">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="339" pos:column="57">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="339" pos:column="64">0x00</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name pos:line="340" pos:column="13">PluginCmdShortcut</name></type> <name pos:line="340" pos:column="31">pcs</name><argument_list pos:line="340" pos:column="34">(<argument><expr><name pos:line="340" pos:column="35">sc</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="39">cmdID</name></expr></argument>, <argument><expr><name><name pos:line="340" pos:column="46">_pluginInfos</name><index pos:line="340" pos:column="58">[<expr><name pos:line="340" pos:column="59">i</name></expr>]</index></name><op:operator pos:line="340" pos:column="61">-&gt;</op:operator><call><name><name pos:line="340" pos:column="63">_moduleName</name><op:operator pos:line="340" pos:column="74">.</op:operator><name pos:line="340" pos:column="75">c_str</name></name><argument_list pos:line="340" pos:column="80">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="340" pos:column="84">j</name></expr></argument>)</argument_list></decl>;</decl_stmt>	<comment type="line" pos:line="340" pos:column="89">//VK_NULL and everything disabled, the menu name is left alone</comment>
			<expr_stmt><expr><call><name><name pos:line="341" pos:column="25">pluginCmdSCList</name><op:operator pos:line="341" pos:column="40">.</op:operator><name pos:line="341" pos:column="41">push_back</name></name><argument_list pos:line="341" pos:column="50">(<argument><expr><name pos:line="341" pos:column="51">pcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><op:operator pos:line="343" pos:column="17">::</op:operator><name pos:line="343" pos:column="19">InsertMenu</name></name><argument_list pos:line="343" pos:column="29">(<argument><expr><name><name pos:line="343" pos:column="30">_pluginInfos</name><index pos:line="343" pos:column="42">[<expr><name pos:line="343" pos:column="43">i</name></expr>]</index></name><op:operator pos:line="343" pos:column="45">-&gt;</op:operator><name pos:line="343" pos:column="47">_pluginMenu</name></expr></argument>, <argument><expr><name pos:line="343" pos:column="60">j</name></expr></argument>, <argument><expr><name pos:line="343" pos:column="63">MF_BYPOSITION</name></expr></argument>, <argument><expr><name pos:line="343" pos:column="78">cmdID</name></expr></argument>, <argument><expr><call><name><name pos:line="343" pos:column="85">itemName</name><op:operator pos:line="343" pos:column="93">.</op:operator><name pos:line="343" pos:column="94">c_str</name></name><argument_list pos:line="343" pos:column="99">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="345" pos:column="17">if <condition pos:line="345" pos:column="20">(<expr><name><name pos:line="345" pos:column="21">_pluginInfos</name><index pos:line="345" pos:column="33">[<expr><name pos:line="345" pos:column="34">i</name></expr>]</index></name><op:operator pos:line="345" pos:column="36">-&gt;</op:operator><name><name pos:line="345" pos:column="38">_funcItems</name><index pos:line="345" pos:column="48">[<expr><name pos:line="345" pos:column="49">j</name></expr>]</index></name><op:operator pos:line="345" pos:column="51">.</op:operator><name pos:line="345" pos:column="52">_init2Check</name></expr>)</condition><then pos:line="345" pos:column="64">
			<expr_stmt><expr><call><name><op:operator pos:line="346" pos:column="25">::</op:operator><name pos:line="346" pos:column="27">CheckMenuItem</name></name><argument_list pos:line="346" pos:column="40">(<argument><expr><name pos:line="346" pos:column="41">_hPluginsMenu</name></expr></argument>, <argument><expr><name pos:line="346" pos:column="56">cmdID</name></expr></argument>, <argument><expr><name pos:line="346" pos:column="63">MF_BYCOMMAND</name> <op:operator pos:line="346" pos:column="76">|</op:operator> <name pos:line="346" pos:column="78">MF_CHECKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="block" pos:line="348" pos:column="9">/*UNLOAD
    ::InsertMenu(_pluginInfos[i]-&gt;_pluginMenu, j++, MF_BYPOSITION | MF_SEPARATOR, 0, TEXT(""));
    ::InsertMenu(_pluginInfos[i]-&gt;_pluginMenu, j, MF_BYPOSITION, ID_PLUGINS_REMOVING + i, TEXT("Remove this plugin"));
	*/</comment>
}</block></function>

<function><type><name pos:line="354" pos:column="1">HMENU</name></type> <name><name pos:line="354" pos:column="7">PluginsManager</name><op:operator pos:line="354" pos:column="21">::</op:operator><name pos:line="354" pos:column="23">setMenu</name></name><parameter_list pos:line="354" pos:column="30">(<param><decl><type><name pos:line="354" pos:column="31">HMENU</name></type> <name pos:line="354" pos:column="37">hMenu</name></decl></param>, <param><decl><type><specifier pos:line="354" pos:column="44">const</specifier> <name pos:line="354" pos:column="50">TCHAR</name> <type:modifier pos:line="354" pos:column="56">*</type:modifier></type><name pos:line="354" pos:column="57">menuName</name></decl></param>)</parameter_list>
<block pos:line="355" pos:column="1">{
	<if pos:line="356" pos:column="9">if <condition pos:line="356" pos:column="12">(<expr><call><name pos:line="356" pos:column="13">hasPlugins</name><argument_list pos:line="356" pos:column="23">()</argument_list></call></expr>)</condition><then pos:line="356" pos:column="26">
	<block pos:line="357" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="358" pos:column="17">const</specifier> <name pos:line="358" pos:column="23">TCHAR</name> <type:modifier pos:line="358" pos:column="29">*</type:modifier></type><name pos:line="358" pos:column="30">nom_menu</name> <init pos:line="358" pos:column="39">= <expr><op:operator pos:line="358" pos:column="41">(</op:operator><name pos:line="358" pos:column="42">menuName</name> <op:operator pos:line="358" pos:column="51">&amp;&amp;</op:operator> <name><name pos:line="358" pos:column="54">menuName</name><index pos:line="358" pos:column="62">[<expr><lit:literal type="number" pos:line="358" pos:column="63">0</lit:literal></expr>]</index></name><op:operator pos:line="358" pos:column="65">)</op:operator><op:operator pos:line="358" pos:column="66">?</op:operator><name pos:line="358" pos:column="67">menuName</name><op:operator pos:line="358" pos:column="75">:</op:operator><call><name pos:line="358" pos:column="76">TEXT</name><argument_list pos:line="358" pos:column="80">(<argument><expr><lit:literal type="string" pos:line="358" pos:column="81">"Plugins"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if pos:line="360" pos:column="9">if <condition pos:line="360" pos:column="12">(<expr><op:operator pos:line="360" pos:column="13">!</op:operator><name pos:line="360" pos:column="14">_hPluginsMenu</name></expr>)</condition><then pos:line="360" pos:column="28">
        <block pos:line="361" pos:column="9">{
		    <expr_stmt><expr><name pos:line="362" pos:column="21">_hPluginsMenu</name> <op:operator pos:line="362" pos:column="35">=</op:operator> <call><name><op:operator pos:line="362" pos:column="37">::</op:operator><name pos:line="362" pos:column="39">CreateMenu</name></name><argument_list pos:line="362" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><op:operator pos:line="363" pos:column="21">::</op:operator><name pos:line="363" pos:column="23">InsertMenu</name></name><argument_list pos:line="363" pos:column="33">(<argument><expr><name pos:line="363" pos:column="34">hMenu</name></expr></argument>,  <argument><expr><name pos:line="363" pos:column="42">MENUINDEX_PLUGINS</name></expr></argument>, <argument><expr><name pos:line="363" pos:column="61">MF_BYPOSITION</name> <op:operator pos:line="363" pos:column="75">|</op:operator> <name pos:line="363" pos:column="77">MF_POPUP</name></expr></argument>, <argument><expr><op:operator pos:line="363" pos:column="87">(</op:operator><name pos:line="363" pos:column="88">UINT_PTR</name><op:operator pos:line="363" pos:column="96">)</op:operator><name pos:line="363" pos:column="97">_hPluginsMenu</name></expr></argument>, <argument><expr><name pos:line="363" pos:column="112">nom_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name pos:line="366" pos:column="9">size_t</name></type> <name pos:line="366" pos:column="16">i</name> <init pos:line="366" pos:column="18">= <expr><lit:literal type="number" pos:line="366" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="367" pos:column="17">for ( <init pos:line="367" pos:column="23">;</init> <condition><expr><name pos:line="367" pos:column="25">i</name> <op:operator pos:line="367" pos:column="27">&lt;</op:operator> <call><name><name pos:line="367" pos:column="29">_pluginInfos</name><op:operator pos:line="367" pos:column="41">.</op:operator><name pos:line="367" pos:column="42">size</name></name><argument_list pos:line="367" pos:column="46">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="367" pos:column="51">i</name><op:operator pos:line="367" pos:column="52">++</op:operator></expr></incr>)
		<block pos:line="368" pos:column="17">{
            <expr_stmt><expr><call><name pos:line="369" pos:column="13">addInMenuFromPMIndex</name><argument_list pos:line="369" pos:column="33">(<argument><expr><name pos:line="369" pos:column="34">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
        <return pos:line="371" pos:column="9">return <expr><name pos:line="371" pos:column="16">_hPluginsMenu</name></expr>;</return>
	}</block></then></if>
	<return pos:line="373" pos:column="9">return <expr><name pos:line="373" pos:column="16">NULL</name></expr>;</return>
}</block></function>


<function><type><name pos:line="377" pos:column="1">void</name></type> <name><name pos:line="377" pos:column="6">PluginsManager</name><op:operator pos:line="377" pos:column="20">::</op:operator><name pos:line="377" pos:column="22">runPluginCommand</name></name><parameter_list pos:line="377" pos:column="38">(<param><decl><type><name pos:line="377" pos:column="39">size_t</name></type> <name pos:line="377" pos:column="46">i</name></decl></param>)</parameter_list>
<block pos:line="378" pos:column="1">{
	<if pos:line="379" pos:column="9">if <condition pos:line="379" pos:column="12">(<expr><name pos:line="379" pos:column="13">i</name> <op:operator pos:line="379" pos:column="15">&lt;</op:operator> <call><name><name pos:line="379" pos:column="17">_pluginsCommands</name><op:operator pos:line="379" pos:column="33">.</op:operator><name pos:line="379" pos:column="34">size</name></name><argument_list pos:line="379" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="379" pos:column="41">
	<block pos:line="380" pos:column="9">{
		<if pos:line="381" pos:column="17">if <condition pos:line="381" pos:column="20">(<expr><name><name pos:line="381" pos:column="21">_pluginsCommands</name><index pos:line="381" pos:column="37">[<expr><name pos:line="381" pos:column="38">i</name></expr>]</index></name><op:operator pos:line="381" pos:column="40">.</op:operator><name pos:line="381" pos:column="41">_pFunc</name> <op:operator pos:line="381" pos:column="48">!=</op:operator> <name pos:line="381" pos:column="51">NULL</name></expr>)</condition><then pos:line="381" pos:column="56">
		<block pos:line="382" pos:column="17">{
			<try pos:line="383" pos:column="25">try <block pos:line="383" pos:column="29">{
				<expr_stmt><expr><name><name pos:line="384" pos:column="33">_pluginsCommands</name><index pos:line="384" pos:column="49">[<expr><name pos:line="384" pos:column="50">i</name></expr>]</index></name><op:operator pos:line="384" pos:column="52">.</op:operator><call><name pos:line="384" pos:column="53">_pFunc</name><argument_list pos:line="384" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
			}</block> <catch pos:line="385" pos:column="27">catch<parameter_list pos:line="385" pos:column="32">(<param><decl><type><name><name pos:line="385" pos:column="33">std</name><op:operator pos:line="385" pos:column="36">::</op:operator><name pos:line="385" pos:column="38">exception</name></name></type> <name pos:line="385" pos:column="48">e</name></decl></param>)</parameter_list> <block pos:line="385" pos:column="51">{
				<expr_stmt><expr><call><name><op:operator pos:line="386" pos:column="33">::</op:operator><name pos:line="386" pos:column="35">MessageBoxA</name></name><argument_list pos:line="386" pos:column="46">(<argument><expr><name pos:line="386" pos:column="47">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="386" pos:column="53">e</name><op:operator pos:line="386" pos:column="54">.</op:operator><name pos:line="386" pos:column="55">what</name></name><argument_list pos:line="386" pos:column="59">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="386" pos:column="63">"PluginsManager::runPluginCommand Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="386" pos:column="109">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="387" pos:column="27">catch <parameter_list pos:line="387" pos:column="33">(<param><decl><type><type:modifier pos:line="387" pos:column="34">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="387" pos:column="39">{
				<decl_stmt><decl><type><name pos:line="388" pos:column="33">TCHAR</name></type> <name><name pos:line="388" pos:column="39">funcInfo</name><index pos:line="388" pos:column="47">[<expr><lit:literal type="number" pos:line="388" pos:column="48">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="389" pos:column="33">generic_sprintf</name><argument_list pos:line="389" pos:column="48">(<argument><expr><name pos:line="389" pos:column="49">funcInfo</name></expr></argument>, <argument><expr><call><name pos:line="389" pos:column="59">TEXT</name><argument_list pos:line="389" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="389" pos:column="64">"runPluginCommand(size_t i : %d)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="389" pos:column="100">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="390" pos:column="33">pluginCrashAlert</name><argument_list pos:line="390" pos:column="49">(<argument><expr><name><name pos:line="390" pos:column="50">_pluginsCommands</name><index pos:line="390" pos:column="66">[<expr><name pos:line="390" pos:column="67">i</name></expr>]</index></name><op:operator pos:line="390" pos:column="69">.</op:operator><call><name><name pos:line="390" pos:column="70">_pluginName</name><op:operator pos:line="390" pos:column="81">.</op:operator><name pos:line="390" pos:column="82">c_str</name></name><argument_list pos:line="390" pos:column="87">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="390" pos:column="91">funcInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>
	}</block></then></if>
}</block></function>


<function><type><name pos:line="397" pos:column="1">void</name></type> <name><name pos:line="397" pos:column="6">PluginsManager</name><op:operator pos:line="397" pos:column="20">::</op:operator><name pos:line="397" pos:column="22">runPluginCommand</name></name><parameter_list pos:line="397" pos:column="38">(<param><decl><type><specifier pos:line="397" pos:column="39">const</specifier> <name pos:line="397" pos:column="45">TCHAR</name> <type:modifier pos:line="397" pos:column="51">*</type:modifier></type><name pos:line="397" pos:column="52">pluginName</name></decl></param>, <param><decl><type><name pos:line="397" pos:column="64">int</name></type> <name pos:line="397" pos:column="68">commandID</name></decl></param>)</parameter_list>
<block pos:line="398" pos:column="1">{
	<for pos:line="399" pos:column="9">for (<init><decl><type><name pos:line="399" pos:column="14">size_t</name></type> <name pos:line="399" pos:column="21">i</name> <init pos:line="399" pos:column="23">= <expr><lit:literal type="number" pos:line="399" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="399" pos:column="29">i</name> <op:operator pos:line="399" pos:column="31">&lt;</op:operator> <call><name><name pos:line="399" pos:column="33">_pluginsCommands</name><op:operator pos:line="399" pos:column="49">.</op:operator><name pos:line="399" pos:column="50">size</name></name><argument_list pos:line="399" pos:column="54">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="399" pos:column="59">i</name><op:operator pos:line="399" pos:column="60">++</op:operator></expr></incr>)
	<block pos:line="400" pos:column="9">{
		<if pos:line="401" pos:column="17">if <condition pos:line="401" pos:column="20">(<expr><op:operator pos:line="401" pos:column="21">!</op:operator><call><name pos:line="401" pos:column="22">generic_stricmp</name><argument_list pos:line="401" pos:column="37">(<argument><expr><name><name pos:line="401" pos:column="38">_pluginsCommands</name><index pos:line="401" pos:column="54">[<expr><name pos:line="401" pos:column="55">i</name></expr>]</index></name><op:operator pos:line="401" pos:column="57">.</op:operator><call><name><name pos:line="401" pos:column="58">_pluginName</name><op:operator pos:line="401" pos:column="69">.</op:operator><name pos:line="401" pos:column="70">c_str</name></name><argument_list pos:line="401" pos:column="75">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="401" pos:column="79">pluginName</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="401" pos:column="91">
		<block pos:line="402" pos:column="17">{
			<if pos:line="403" pos:column="25">if <condition pos:line="403" pos:column="28">(<expr><name><name pos:line="403" pos:column="29">_pluginsCommands</name><index pos:line="403" pos:column="45">[<expr><name pos:line="403" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="403" pos:column="48">.</op:operator><name pos:line="403" pos:column="49">_funcID</name> <op:operator pos:line="403" pos:column="57">==</op:operator> <name pos:line="403" pos:column="60">commandID</name></expr>)</condition><then pos:line="403" pos:column="70">
			<block pos:line="404" pos:column="25">{
				<try pos:line="405" pos:column="33">try <block pos:line="405" pos:column="37">{
					<expr_stmt><expr><name><name pos:line="406" pos:column="41">_pluginsCommands</name><index pos:line="406" pos:column="57">[<expr><name pos:line="406" pos:column="58">i</name></expr>]</index></name><op:operator pos:line="406" pos:column="60">.</op:operator><call><name pos:line="406" pos:column="61">_pFunc</name><argument_list pos:line="406" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
				}</block> <catch pos:line="407" pos:column="35">catch<parameter_list pos:line="407" pos:column="40">(<param><decl><type><name><name pos:line="407" pos:column="41">std</name><op:operator pos:line="407" pos:column="44">::</op:operator><name pos:line="407" pos:column="46">exception</name></name></type> <name pos:line="407" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="407" pos:column="59">{
					<expr_stmt><expr><call><name><op:operator pos:line="408" pos:column="41">::</op:operator><name pos:line="408" pos:column="43">MessageBoxA</name></name><argument_list pos:line="408" pos:column="54">(<argument><expr><name pos:line="408" pos:column="55">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="408" pos:column="61">e</name><op:operator pos:line="408" pos:column="62">.</op:operator><name pos:line="408" pos:column="63">what</name></name><argument_list pos:line="408" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="408" pos:column="71">"Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="408" pos:column="84">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch pos:line="409" pos:column="35">catch <parameter_list pos:line="409" pos:column="41">(<param><decl><type><type:modifier pos:line="409" pos:column="42">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="409" pos:column="47">{
					<decl_stmt><decl><type><name pos:line="410" pos:column="41">TCHAR</name></type> <name><name pos:line="410" pos:column="47">funcInfo</name><index pos:line="410" pos:column="55">[<expr><lit:literal type="number" pos:line="410" pos:column="56">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name pos:line="411" pos:column="41">generic_sprintf</name><argument_list pos:line="411" pos:column="56">(<argument><expr><name pos:line="411" pos:column="57">funcInfo</name></expr></argument>, <argument><expr><call><name pos:line="411" pos:column="67">TEXT</name><argument_list pos:line="411" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="411" pos:column="72">"runPluginCommand(const TCHAR *pluginName : %s, int commandID : %d)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="411" pos:column="143">pluginName</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="155">commandID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="412" pos:column="41">pluginCrashAlert</name><argument_list pos:line="412" pos:column="57">(<argument><expr><name><name pos:line="412" pos:column="58">_pluginsCommands</name><index pos:line="412" pos:column="74">[<expr><name pos:line="412" pos:column="75">i</name></expr>]</index></name><op:operator pos:line="412" pos:column="77">.</op:operator><call><name><name pos:line="412" pos:column="78">_pluginName</name><op:operator pos:line="412" pos:column="89">.</op:operator><name pos:line="412" pos:column="90">c_str</name></name><argument_list pos:line="412" pos:column="95">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="412" pos:column="99">funcInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
			}</block></then></if>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="419" pos:column="1">void</name></type> <name><name pos:line="419" pos:column="6">PluginsManager</name><op:operator pos:line="419" pos:column="20">::</op:operator><name pos:line="419" pos:column="22">notify</name></name><parameter_list pos:line="419" pos:column="28">(<param><decl><type><name pos:line="419" pos:column="29">SCNotification</name> <type:modifier pos:line="419" pos:column="44">*</type:modifier></type><name pos:line="419" pos:column="45">notification</name></decl></param>)</parameter_list>
<block pos:line="420" pos:column="1">{
	<for pos:line="421" pos:column="9">for (<init><decl><type><name pos:line="421" pos:column="14">size_t</name></type> <name pos:line="421" pos:column="21">i</name> <init pos:line="421" pos:column="23">= <expr><lit:literal type="number" pos:line="421" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="421" pos:column="29">i</name> <op:operator pos:line="421" pos:column="31">&lt;</op:operator> <call><name><name pos:line="421" pos:column="33">_pluginInfos</name><op:operator pos:line="421" pos:column="45">.</op:operator><name pos:line="421" pos:column="46">size</name></name><argument_list pos:line="421" pos:column="50">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="421" pos:column="55">i</name><op:operator pos:line="421" pos:column="56">++</op:operator></expr></incr>)
	<block pos:line="422" pos:column="9">{
        <if pos:line="423" pos:column="9">if <condition pos:line="423" pos:column="12">(<expr><name><name pos:line="423" pos:column="13">_pluginInfos</name><index pos:line="423" pos:column="25">[<expr><name pos:line="423" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="423" pos:column="28">-&gt;</op:operator><name pos:line="423" pos:column="30">_hLib</name></expr>)</condition><then pos:line="423" pos:column="36">
        <block pos:line="424" pos:column="9">{
			<comment type="line" pos:line="425" pos:column="25">// To avoid the plugin change the data in SCNotification</comment>
			<comment type="line" pos:line="426" pos:column="25">// Each notification to pass to a plugin is a copy of SCNotification instance</comment>
			<decl_stmt><decl><type><name pos:line="427" pos:column="25">SCNotification</name></type> <name pos:line="427" pos:column="40">scNotif</name> <init pos:line="427" pos:column="48">= <expr><op:operator pos:line="427" pos:column="50">*</op:operator><name pos:line="427" pos:column="51">notification</name></expr></init></decl>;</decl_stmt>
			<try pos:line="428" pos:column="25">try <block pos:line="428" pos:column="29">{
				<expr_stmt><expr><name><name pos:line="429" pos:column="33">_pluginInfos</name><index pos:line="429" pos:column="45">[<expr><name pos:line="429" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="429" pos:column="48">-&gt;</op:operator><call><name pos:line="429" pos:column="50">_pBeNotified</name><argument_list pos:line="429" pos:column="62">(<argument><expr><op:operator pos:line="429" pos:column="63">&amp;</op:operator><name pos:line="429" pos:column="64">scNotif</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch pos:line="430" pos:column="27">catch<parameter_list pos:line="430" pos:column="32">(<param><decl><type><name><name pos:line="430" pos:column="33">std</name><op:operator pos:line="430" pos:column="36">::</op:operator><name pos:line="430" pos:column="38">exception</name></name></type> <name pos:line="430" pos:column="48">e</name></decl></param>)</parameter_list> <block pos:line="430" pos:column="51">{
				<expr_stmt><expr><call><name><op:operator pos:line="431" pos:column="33">::</op:operator><name pos:line="431" pos:column="35">MessageBoxA</name></name><argument_list pos:line="431" pos:column="46">(<argument><expr><name pos:line="431" pos:column="47">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="431" pos:column="53">e</name><op:operator pos:line="431" pos:column="54">.</op:operator><name pos:line="431" pos:column="55">what</name></name><argument_list pos:line="431" pos:column="59">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="431" pos:column="63">"Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="431" pos:column="76">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="432" pos:column="27">catch <parameter_list pos:line="432" pos:column="33">(<param><decl><type><type:modifier pos:line="432" pos:column="34">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="432" pos:column="39">{
				<decl_stmt><decl><type><name pos:line="433" pos:column="33">TCHAR</name></type> <name><name pos:line="433" pos:column="39">funcInfo</name><index pos:line="433" pos:column="47">[<expr><lit:literal type="number" pos:line="433" pos:column="48">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="434" pos:column="33">generic_sprintf</name><argument_list pos:line="434" pos:column="48">(<argument><expr><name pos:line="434" pos:column="49">funcInfo</name></expr></argument>, <argument><expr><call><name pos:line="434" pos:column="59">TEXT</name><argument_list pos:line="434" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="434" pos:column="64">"notify(SCNotification *notification) : \r notification-&gt;nmhdr.code == %d\r notification-&gt;nmhdr.hwndFrom == %d\r notification-&gt;nmhdr.idFrom == %d"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,\
					<argument><expr><name><name pos:line="435" pos:column="41">scNotif</name><op:operator pos:line="435" pos:column="48">.</op:operator><name pos:line="435" pos:column="49">nmhdr</name><op:operator pos:line="435" pos:column="54">.</op:operator><name pos:line="435" pos:column="55">code</name></name></expr></argument>, <argument><expr><name><name pos:line="435" pos:column="61">scNotif</name><op:operator pos:line="435" pos:column="68">.</op:operator><name pos:line="435" pos:column="69">nmhdr</name><op:operator pos:line="435" pos:column="74">.</op:operator><name pos:line="435" pos:column="75">hwndFrom</name></name></expr></argument>, <argument><expr><name><name pos:line="435" pos:column="85">scNotif</name><op:operator pos:line="435" pos:column="92">.</op:operator><name pos:line="435" pos:column="93">nmhdr</name><op:operator pos:line="435" pos:column="98">.</op:operator><name pos:line="435" pos:column="99">idFrom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="436" pos:column="33">pluginCrashAlert</name><argument_list pos:line="436" pos:column="49">(<argument><expr><name><name pos:line="436" pos:column="50">_pluginsCommands</name><index pos:line="436" pos:column="66">[<expr><name pos:line="436" pos:column="67">i</name></expr>]</index></name><op:operator pos:line="436" pos:column="69">.</op:operator><call><name><name pos:line="436" pos:column="70">_pluginName</name><op:operator pos:line="436" pos:column="81">.</op:operator><name pos:line="436" pos:column="82">c_str</name></name><argument_list pos:line="436" pos:column="87">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="436" pos:column="91">funcInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="442" pos:column="1">void</name></type> <name><name pos:line="442" pos:column="6">PluginsManager</name><op:operator pos:line="442" pos:column="20">::</op:operator><name pos:line="442" pos:column="22">relayNppMessages</name></name><parameter_list pos:line="442" pos:column="38">(<param><decl><type><name pos:line="442" pos:column="39">UINT</name></type> <name pos:line="442" pos:column="44">Message</name></decl></param>, <param><decl><type><name pos:line="442" pos:column="53">WPARAM</name></type> <name pos:line="442" pos:column="60">wParam</name></decl></param>, <param><decl><type><name pos:line="442" pos:column="68">LPARAM</name></type> <name pos:line="442" pos:column="75">lParam</name></decl></param>)</parameter_list>
<block pos:line="443" pos:column="1">{
	<for pos:line="444" pos:column="9">for (<init><decl><type><name pos:line="444" pos:column="14">size_t</name></type> <name pos:line="444" pos:column="21">i</name> <init pos:line="444" pos:column="23">= <expr><lit:literal type="number" pos:line="444" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="444" pos:column="29">i</name> <op:operator pos:line="444" pos:column="31">&lt;</op:operator> <call><name><name pos:line="444" pos:column="33">_pluginInfos</name><op:operator pos:line="444" pos:column="45">.</op:operator><name pos:line="444" pos:column="46">size</name></name><argument_list pos:line="444" pos:column="50">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="444" pos:column="55">i</name><op:operator pos:line="444" pos:column="56">++</op:operator></expr></incr>)
	<block pos:line="445" pos:column="9">{
        <if pos:line="446" pos:column="9">if <condition pos:line="446" pos:column="12">(<expr><name><name pos:line="446" pos:column="13">_pluginInfos</name><index pos:line="446" pos:column="25">[<expr><name pos:line="446" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="446" pos:column="28">-&gt;</op:operator><name pos:line="446" pos:column="30">_hLib</name></expr>)</condition><then pos:line="446" pos:column="36">
		<block pos:line="447" pos:column="17">{
			<try pos:line="448" pos:column="25">try <block pos:line="448" pos:column="29">{
				<expr_stmt><expr><name><name pos:line="449" pos:column="33">_pluginInfos</name><index pos:line="449" pos:column="45">[<expr><name pos:line="449" pos:column="46">i</name></expr>]</index></name><op:operator pos:line="449" pos:column="48">-&gt;</op:operator><call><name pos:line="449" pos:column="50">_pMessageProc</name><argument_list pos:line="449" pos:column="63">(<argument><expr><name pos:line="449" pos:column="64">Message</name></expr></argument>, <argument><expr><name pos:line="449" pos:column="73">wParam</name></expr></argument>, <argument><expr><name pos:line="449" pos:column="81">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch pos:line="450" pos:column="27">catch<parameter_list pos:line="450" pos:column="32">(<param><decl><type><name><name pos:line="450" pos:column="33">std</name><op:operator pos:line="450" pos:column="36">::</op:operator><name pos:line="450" pos:column="38">exception</name></name></type> <name pos:line="450" pos:column="48">e</name></decl></param>)</parameter_list> <block pos:line="450" pos:column="51">{
				<expr_stmt><expr><call><name><op:operator pos:line="451" pos:column="33">::</op:operator><name pos:line="451" pos:column="35">MessageBoxA</name></name><argument_list pos:line="451" pos:column="46">(<argument><expr><name pos:line="451" pos:column="47">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="451" pos:column="53">e</name><op:operator pos:line="451" pos:column="54">.</op:operator><name pos:line="451" pos:column="55">what</name></name><argument_list pos:line="451" pos:column="59">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="451" pos:column="63">"Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="451" pos:column="76">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch> <catch pos:line="452" pos:column="27">catch <parameter_list pos:line="452" pos:column="33">(<param><decl><type><type:modifier pos:line="452" pos:column="34">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="452" pos:column="39">{
				<decl_stmt><decl><type><name pos:line="453" pos:column="33">TCHAR</name></type> <name><name pos:line="453" pos:column="39">funcInfo</name><index pos:line="453" pos:column="47">[<expr><lit:literal type="number" pos:line="453" pos:column="48">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="454" pos:column="33">generic_sprintf</name><argument_list pos:line="454" pos:column="48">(<argument><expr><name pos:line="454" pos:column="49">funcInfo</name></expr></argument>, <argument><expr><call><name pos:line="454" pos:column="59">TEXT</name><argument_list pos:line="454" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="454" pos:column="64">"relayNppMessages(UINT Message : %d, WPARAM wParam : %d, LPARAM lParam : %d)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="454" pos:column="144">Message</name></expr></argument>, <argument><expr><name pos:line="454" pos:column="153">wParam</name></expr></argument>, <argument><expr><name pos:line="454" pos:column="161">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="455" pos:column="33">pluginCrashAlert</name><argument_list pos:line="455" pos:column="49">(<argument><expr><name><name pos:line="455" pos:column="50">_pluginsCommands</name><index pos:line="455" pos:column="66">[<expr><name pos:line="455" pos:column="67">i</name></expr>]</index></name><op:operator pos:line="455" pos:column="69">.</op:operator><call><name><name pos:line="455" pos:column="70">_pluginName</name><op:operator pos:line="455" pos:column="81">.</op:operator><name pos:line="455" pos:column="82">c_str</name></name><argument_list pos:line="455" pos:column="87">()</argument_list></call></expr></argument>, <argument><expr><call><name pos:line="455" pos:column="91">TEXT</name><argument_list pos:line="455" pos:column="95">(<argument><expr><lit:literal type="string" pos:line="455" pos:column="96">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="461" pos:column="1">bool</name></type> <name><name pos:line="461" pos:column="6">PluginsManager</name><op:operator pos:line="461" pos:column="20">::</op:operator><name pos:line="461" pos:column="22">relayPluginMessages</name></name><parameter_list pos:line="461" pos:column="41">(<param><decl><type><name pos:line="461" pos:column="42">UINT</name></type> <name pos:line="461" pos:column="47">Message</name></decl></param>, <param><decl><type><name pos:line="461" pos:column="56">WPARAM</name></type> <name pos:line="461" pos:column="63">wParam</name></decl></param>, <param><decl><type><name pos:line="461" pos:column="71">LPARAM</name></type> <name pos:line="461" pos:column="78">lParam</name></decl></param>)</parameter_list>
<block pos:line="462" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="463" pos:column="9">const</specifier> <name pos:line="463" pos:column="15">TCHAR</name> <type:modifier pos:line="463" pos:column="21">*</type:modifier></type> <name pos:line="463" pos:column="23">moduleName</name> <init pos:line="463" pos:column="34">= <expr><op:operator pos:line="463" pos:column="36">(</op:operator>const <name pos:line="463" pos:column="43">TCHAR</name> <op:operator pos:line="463" pos:column="49">*</op:operator><op:operator pos:line="463" pos:column="50">)</op:operator><name pos:line="463" pos:column="51">wParam</name></expr></init></decl>;</decl_stmt>
	<if pos:line="464" pos:column="9">if <condition pos:line="464" pos:column="12">(<expr><op:operator pos:line="464" pos:column="13">!</op:operator><name pos:line="464" pos:column="14">moduleName</name> <op:operator pos:line="464" pos:column="25">||</op:operator> <op:operator pos:line="464" pos:column="28">!</op:operator><name><name pos:line="464" pos:column="29">moduleName</name><index pos:line="464" pos:column="39">[<expr><lit:literal type="number" pos:line="464" pos:column="40">0</lit:literal></expr>]</index></name> <op:operator pos:line="464" pos:column="43">||</op:operator> <op:operator pos:line="464" pos:column="46">!</op:operator><name pos:line="464" pos:column="47">lParam</name></expr>)</condition><then pos:line="464" pos:column="54">
		<return pos:line="465" pos:column="17">return <expr><lit:literal type="boolean" pos:line="465" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<for pos:line="467" pos:column="9">for (<init><decl><type><name pos:line="467" pos:column="14">size_t</name></type> <name pos:line="467" pos:column="21">i</name> <init pos:line="467" pos:column="23">= <expr><lit:literal type="number" pos:line="467" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="467" pos:column="29">i</name> <op:operator pos:line="467" pos:column="31">&lt;</op:operator> <call><name><name pos:line="467" pos:column="33">_pluginInfos</name><op:operator pos:line="467" pos:column="45">.</op:operator><name pos:line="467" pos:column="46">size</name></name><argument_list pos:line="467" pos:column="50">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="467" pos:column="55">i</name><op:operator pos:line="467" pos:column="56">++</op:operator></expr></incr>)
	<block pos:line="468" pos:column="9">{
        <if pos:line="469" pos:column="9">if <condition pos:line="469" pos:column="12">(<expr><name><name pos:line="469" pos:column="13">_pluginInfos</name><index pos:line="469" pos:column="25">[<expr><name pos:line="469" pos:column="26">i</name></expr>]</index></name><op:operator pos:line="469" pos:column="28">-&gt;</op:operator><name pos:line="469" pos:column="30">_moduleName</name> <op:operator pos:line="469" pos:column="42">==</op:operator> <name pos:line="469" pos:column="45">moduleName</name></expr>)</condition><then pos:line="469" pos:column="56">
		<block pos:line="470" pos:column="17">{
            <if pos:line="471" pos:column="13">if <condition pos:line="471" pos:column="16">(<expr><name><name pos:line="471" pos:column="17">_pluginInfos</name><index pos:line="471" pos:column="29">[<expr><name pos:line="471" pos:column="30">i</name></expr>]</index></name><op:operator pos:line="471" pos:column="32">-&gt;</op:operator><name pos:line="471" pos:column="34">_hLib</name></expr>)</condition><then pos:line="471" pos:column="40">
			<block pos:line="472" pos:column="25">{
				<try pos:line="473" pos:column="33">try <block pos:line="473" pos:column="37">{
					<expr_stmt><expr><name><name pos:line="474" pos:column="41">_pluginInfos</name><index pos:line="474" pos:column="53">[<expr><name pos:line="474" pos:column="54">i</name></expr>]</index></name><op:operator pos:line="474" pos:column="56">-&gt;</op:operator><call><name pos:line="474" pos:column="58">_pMessageProc</name><argument_list pos:line="474" pos:column="71">(<argument><expr><name pos:line="474" pos:column="72">Message</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="81">wParam</name></expr></argument>, <argument><expr><name pos:line="474" pos:column="89">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> <catch pos:line="475" pos:column="35">catch<parameter_list pos:line="475" pos:column="40">(<param><decl><type><name><name pos:line="475" pos:column="41">std</name><op:operator pos:line="475" pos:column="44">::</op:operator><name pos:line="475" pos:column="46">exception</name></name></type> <name pos:line="475" pos:column="56">e</name></decl></param>)</parameter_list> <block pos:line="475" pos:column="59">{
					<expr_stmt><expr><call><name><op:operator pos:line="476" pos:column="41">::</op:operator><name pos:line="476" pos:column="43">MessageBoxA</name></name><argument_list pos:line="476" pos:column="54">(<argument><expr><name pos:line="476" pos:column="55">NULL</name></expr></argument>, <argument><expr><call><name><name pos:line="476" pos:column="61">e</name><op:operator pos:line="476" pos:column="62">.</op:operator><name pos:line="476" pos:column="63">what</name></name><argument_list pos:line="476" pos:column="67">()</argument_list></call></expr></argument>, <argument><expr><lit:literal type="string" pos:line="476" pos:column="71">"Exception"</lit:literal></expr></argument>, <argument><expr><name pos:line="476" pos:column="84">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch> <catch pos:line="477" pos:column="35">catch <parameter_list pos:line="477" pos:column="41">(<param><decl><type><type:modifier pos:line="477" pos:column="42">...</type:modifier></type></decl></param>)</parameter_list> <block pos:line="477" pos:column="47">{
					<decl_stmt><decl><type><name pos:line="478" pos:column="41">TCHAR</name></type> <name><name pos:line="478" pos:column="47">funcInfo</name><index pos:line="478" pos:column="55">[<expr><lit:literal type="number" pos:line="478" pos:column="56">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name pos:line="479" pos:column="41">generic_sprintf</name><argument_list pos:line="479" pos:column="56">(<argument><expr><name pos:line="479" pos:column="57">funcInfo</name></expr></argument>, <argument><expr><call><name pos:line="479" pos:column="67">TEXT</name><argument_list pos:line="479" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="479" pos:column="72">"relayPluginMessages(UINT Message : %d, WPARAM wParam : %d, LPARAM lParam : %d)"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="479" pos:column="155">Message</name></expr></argument>, <argument><expr><name pos:line="479" pos:column="164">wParam</name></expr></argument>, <argument><expr><name pos:line="479" pos:column="172">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="480" pos:column="41">pluginCrashAlert</name><argument_list pos:line="480" pos:column="57">(<argument><expr><name><name pos:line="480" pos:column="58">_pluginsCommands</name><index pos:line="480" pos:column="74">[<expr><name pos:line="480" pos:column="75">i</name></expr>]</index></name><op:operator pos:line="480" pos:column="77">.</op:operator><call><name><name pos:line="480" pos:column="78">_pluginName</name><op:operator pos:line="480" pos:column="89">.</op:operator><name pos:line="480" pos:column="90">c_str</name></name><argument_list pos:line="480" pos:column="95">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="480" pos:column="99">funcInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></catch></try>
				<return pos:line="482" pos:column="33">return <expr><lit:literal type="boolean" pos:line="482" pos:column="40">true</lit:literal></expr>;</return>
            }</block></then></if>
		}</block></then></if>
	}</block></for>
	<return pos:line="486" pos:column="9">return <expr><lit:literal type="boolean" pos:line="486" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>


<function><type><name pos:line="490" pos:column="1">bool</name></type> <name><name pos:line="490" pos:column="6">PluginsManager</name><op:operator pos:line="490" pos:column="20">::</op:operator><name pos:line="490" pos:column="22">allocateCmdID</name></name><parameter_list pos:line="490" pos:column="35">(<param><decl><type><name pos:line="490" pos:column="36">int</name></type> <name pos:line="490" pos:column="40">numberRequired</name></decl></param>, <param><decl><type><name pos:line="490" pos:column="56">int</name> <type:modifier pos:line="490" pos:column="60">*</type:modifier></type><name pos:line="490" pos:column="61">start</name></decl></param>)</parameter_list>
<block pos:line="491" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="492" pos:column="9">bool</name></type> <name pos:line="492" pos:column="14">retVal</name> <init pos:line="492" pos:column="21">= <expr><lit:literal type="boolean" pos:line="492" pos:column="23">true</lit:literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><op:operator pos:line="494" pos:column="9">*</op:operator><name pos:line="494" pos:column="10">start</name> <op:operator pos:line="494" pos:column="16">=</op:operator> <call><name><name pos:line="494" pos:column="18">_dynamicIDAlloc</name><op:operator pos:line="494" pos:column="33">.</op:operator><name pos:line="494" pos:column="34">allocate</name></name><argument_list pos:line="494" pos:column="42">(<argument><expr><name pos:line="494" pos:column="43">numberRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="496" pos:column="9">if <condition pos:line="496" pos:column="12">(<expr><op:operator pos:line="496" pos:column="13">-</op:operator><lit:literal type="number" pos:line="496" pos:column="14">1</lit:literal> <op:operator pos:line="496" pos:column="16">==</op:operator> <op:operator pos:line="496" pos:column="19">*</op:operator><name pos:line="496" pos:column="20">start</name></expr>)</condition><then pos:line="496" pos:column="26">
	<block pos:line="497" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="498" pos:column="17">*</op:operator><name pos:line="498" pos:column="18">start</name> <op:operator pos:line="498" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="498" pos:column="26">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="499" pos:column="17">retVal</name> <op:operator pos:line="499" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="499" pos:column="26">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="501" pos:column="9">return <expr><name pos:line="501" pos:column="16">retVal</name></expr>;</return>
}</block></function>

<function><type><name pos:line="504" pos:column="1">bool</name></type> <name><name pos:line="504" pos:column="6">PluginsManager</name><op:operator pos:line="504" pos:column="20">::</op:operator><name pos:line="504" pos:column="22">allocateMarker</name></name><parameter_list pos:line="504" pos:column="36">(<param><decl><type><name pos:line="504" pos:column="37">int</name></type> <name pos:line="504" pos:column="41">numberRequired</name></decl></param>, <param><decl><type><name pos:line="504" pos:column="57">int</name> <type:modifier pos:line="504" pos:column="61">*</type:modifier></type><name pos:line="504" pos:column="62">start</name></decl></param>)</parameter_list>
<block pos:line="505" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="506" pos:column="9">bool</name></type> <name pos:line="506" pos:column="14">retVal</name> <init pos:line="506" pos:column="21">= <expr><lit:literal type="boolean" pos:line="506" pos:column="23">true</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="507" pos:column="9">*</op:operator><name pos:line="507" pos:column="10">start</name> <op:operator pos:line="507" pos:column="16">=</op:operator> <call><name><name pos:line="507" pos:column="18">_markerAlloc</name><op:operator pos:line="507" pos:column="30">.</op:operator><name pos:line="507" pos:column="31">allocate</name></name><argument_list pos:line="507" pos:column="39">(<argument><expr><name pos:line="507" pos:column="40">numberRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="508" pos:column="9">if <condition pos:line="508" pos:column="12">(<expr><op:operator pos:line="508" pos:column="13">-</op:operator><lit:literal type="number" pos:line="508" pos:column="14">1</lit:literal> <op:operator pos:line="508" pos:column="16">==</op:operator> <op:operator pos:line="508" pos:column="19">*</op:operator><name pos:line="508" pos:column="20">start</name></expr>)</condition><then pos:line="508" pos:column="26">
	<block pos:line="509" pos:column="9">{
		<expr_stmt><expr><op:operator pos:line="510" pos:column="17">*</op:operator><name pos:line="510" pos:column="18">start</name> <op:operator pos:line="510" pos:column="24">=</op:operator> <lit:literal type="number" pos:line="510" pos:column="26">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="511" pos:column="17">retVal</name> <op:operator pos:line="511" pos:column="24">=</op:operator> <lit:literal type="boolean" pos:line="511" pos:column="26">false</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="513" pos:column="9">return <expr><name pos:line="513" pos:column="16">retVal</name></expr>;</return>
}</block></function></unit>
