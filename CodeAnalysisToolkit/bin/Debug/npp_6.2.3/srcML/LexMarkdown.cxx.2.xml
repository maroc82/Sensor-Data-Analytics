<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexMarkdown.cxx" pos:tabs="8"><comment type="block" format="doxygen" pos:line="1" pos:column="1">/******************************************************************
 *  LexMarkdown.cxx
 *
 *  A simple Markdown lexer for scintilla.
 *
 *  Includes highlighting for some extra features from the
 *  Pandoc implementation; strikeout, using '#.' as a default
 *  ordered list item marker, and delimited code blocks.
 *
 *  Limitations:
 *
 *  Standard indented code blocks are not highlighted at all,
 *  as it would conflict with other indentation schemes. Use
 *  delimited code blocks for blanket highlighting of an
 *  entire code block.  Embedded HTML is not highlighted either.
 *  Blanket HTML highlighting has issues, because some Markdown
 *  implementations allow Markdown markup inside of the HTML. Also,
 *  there is a following blank line issue that can't be ignored,
 *  explained in the next paragraph. Embedded HTML and code
 *  blocks would be better supported with language specific
 *  highlighting.
 *
 *  The highlighting aims to accurately reflect correct syntax,
 *  but a few restrictions are relaxed. Delimited code blocks are
 *  highlighted, even if the line following the code block is not blank.
 *  Requiring a blank line after a block, breaks the highlighting
 *  in certain cases, because of the way Scintilla ends up calling
 *  the lexer.
 *
 *  Written by Jon Strait - jstrait@moonloop.net
 *
 *  The License.txt file describes the conditions under which this
 *  software may be distributed.
 *
 *****************************************************************/</comment>

<cpp:include pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">include</cpp:directive> <cpp:file pos:line="37" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">include</cpp:directive> <cpp:file pos:line="38" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">include</cpp:directive> <cpp:file pos:line="39" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">include</cpp:directive> <cpp:file pos:line="40" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">include</cpp:directive> <cpp:file pos:line="41" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="43" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="44" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="45" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="47" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="48" pos:column="1">#<cpp:directive pos:line="48" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="48" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="49" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="50" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="51" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="52" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">ifdef</cpp:directive> <name pos:line="54" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="55" pos:column="1">using namespace <name pos:line="55" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><specifier pos:line="58" pos:column="1">static</specifier> <specifier pos:line="58" pos:column="8">inline</specifier> <name pos:line="58" pos:column="15">bool</name></type> <name pos:line="58" pos:column="20">IsNewline</name><parameter_list pos:line="58" pos:column="29">(<param><decl><type><specifier pos:line="58" pos:column="30">const</specifier> <name pos:line="58" pos:column="36">int</name></type> <name pos:line="58" pos:column="40">ch</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="44">{
    <return pos:line="59" pos:column="5">return <expr><op:operator pos:line="59" pos:column="12">(</op:operator><name pos:line="59" pos:column="13">ch</name> <op:operator pos:line="59" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="19">'\n'</lit:literal> <op:operator pos:line="59" pos:column="24">||</op:operator> <name pos:line="59" pos:column="27">ch</name> <op:operator pos:line="59" pos:column="30">==</op:operator> <lit:literal type="char" pos:line="59" pos:column="33">'\r'</lit:literal><op:operator pos:line="59" pos:column="37">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="62" pos:column="1">// True if can follow ch down to the end with possibly trailing whitespace</comment>
<function><type><specifier pos:line="63" pos:column="1">static</specifier> <name pos:line="63" pos:column="8">bool</name></type> <name pos:line="63" pos:column="13">FollowToLineEnd</name><parameter_list pos:line="63" pos:column="28">(<param><decl><type><specifier pos:line="63" pos:column="29">const</specifier> <name pos:line="63" pos:column="35">int</name></type> <name pos:line="63" pos:column="39">ch</name></decl></param>, <param><decl><type><specifier pos:line="63" pos:column="43">const</specifier> <name pos:line="63" pos:column="49">int</name></type> <name pos:line="63" pos:column="53">state</name></decl></param>, <param><decl><type><specifier pos:line="63" pos:column="60">const</specifier> <name pos:line="63" pos:column="66">unsigned</name> <name pos:line="63" pos:column="75">int</name></type> <name pos:line="63" pos:column="79">endPos</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="87">StyleContext</name> <type:modifier pos:line="63" pos:column="100">&amp;</type:modifier></type><name pos:line="63" pos:column="101">sc</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="105">{
    <decl_stmt><decl><type><name pos:line="64" pos:column="5">unsigned</name> <name pos:line="64" pos:column="14">int</name></type> <name pos:line="64" pos:column="18">i</name> <init pos:line="64" pos:column="20">= <expr><lit:literal type="number" pos:line="64" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
    <while pos:line="65" pos:column="5">while <condition pos:line="65" pos:column="11">(<expr><call><name><name pos:line="65" pos:column="12">sc</name><op:operator pos:line="65" pos:column="14">.</op:operator><name pos:line="65" pos:column="15">GetRelative</name></name><argument_list pos:line="65" pos:column="26">(<argument><expr><op:operator pos:line="65" pos:column="27">++</op:operator><name pos:line="65" pos:column="29">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="65" pos:column="32">==</op:operator> <name pos:line="65" pos:column="35">ch</name></expr>)</condition>
        <empty_stmt pos:line="66" pos:column="9">;</empty_stmt></while>
    <comment type="line" pos:line="67" pos:column="5">// Skip over whitespace</comment>
    <while pos:line="68" pos:column="5">while <condition pos:line="68" pos:column="11">(<expr><call><name pos:line="68" pos:column="12">IsASpaceOrTab</name><argument_list pos:line="68" pos:column="25">(<argument><expr><call><name><name pos:line="68" pos:column="26">sc</name><op:operator pos:line="68" pos:column="28">.</op:operator><name pos:line="68" pos:column="29">GetRelative</name></name><argument_list pos:line="68" pos:column="40">(<argument><expr><name pos:line="68" pos:column="41">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="68" pos:column="45">&amp;&amp;</op:operator> <name><name pos:line="68" pos:column="48">sc</name><op:operator pos:line="68" pos:column="50">.</op:operator><name pos:line="68" pos:column="51">currentPos</name></name> <op:operator pos:line="68" pos:column="62">+</op:operator> <name pos:line="68" pos:column="64">i</name> <op:operator pos:line="68" pos:column="66">&lt;</op:operator> <name pos:line="68" pos:column="68">endPos</name></expr>)</condition>
        <expr_stmt><expr><op:operator pos:line="69" pos:column="9">++</op:operator><name pos:line="69" pos:column="11">i</name></expr>;</expr_stmt></while>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><call><name pos:line="70" pos:column="9">IsNewline</name><argument_list pos:line="70" pos:column="18">(<argument><expr><call><name><name pos:line="70" pos:column="19">sc</name><op:operator pos:line="70" pos:column="21">.</op:operator><name pos:line="70" pos:column="22">GetRelative</name></name><argument_list pos:line="70" pos:column="33">(<argument><expr><name pos:line="70" pos:column="34">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="70" pos:column="38">||</op:operator> <name><name pos:line="70" pos:column="41">sc</name><op:operator pos:line="70" pos:column="43">.</op:operator><name pos:line="70" pos:column="44">currentPos</name></name> <op:operator pos:line="70" pos:column="55">+</op:operator> <name pos:line="70" pos:column="57">i</name> <op:operator pos:line="70" pos:column="59">==</op:operator> <name pos:line="70" pos:column="62">endPos</name></expr>)</condition><then pos:line="70" pos:column="69"> <block pos:line="70" pos:column="70">{
        <expr_stmt><expr><call><name><name pos:line="71" pos:column="9">sc</name><op:operator pos:line="71" pos:column="11">.</op:operator><name pos:line="71" pos:column="12">Forward</name></name><argument_list pos:line="71" pos:column="19">(<argument><expr><name pos:line="71" pos:column="20">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="72" pos:column="9">sc</name><op:operator pos:line="72" pos:column="11">.</op:operator><name pos:line="72" pos:column="12">ChangeState</name></name><argument_list pos:line="72" pos:column="23">(<argument><expr><name pos:line="72" pos:column="24">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name pos:line="73" pos:column="9">sc</name><op:operator pos:line="73" pos:column="11">.</op:operator><name pos:line="73" pos:column="12">SetState</name></name><argument_list pos:line="73" pos:column="20">(<argument><expr><name pos:line="73" pos:column="21">SCE_MARKDOWN_LINE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:line="74" pos:column="9">return <expr><lit:literal type="boolean" pos:line="74" pos:column="16">true</lit:literal></expr>;</return>
    }</block></then>
    <else pos:line="76" pos:column="5">else <return pos:line="76" pos:column="10">return <expr><lit:literal type="boolean" pos:line="76" pos:column="17">false</lit:literal></expr>;</return></else></if>
}</block></function>

<comment type="line" pos:line="79" pos:column="1">// Set the state on text section from current to length characters,</comment>
<comment type="line" pos:line="80" pos:column="1">// then set the rest until the newline to default, except for any characters matching token</comment>
<function><type><specifier pos:line="81" pos:column="1">static</specifier> <name pos:line="81" pos:column="8">void</name></type> <name pos:line="81" pos:column="13">SetStateAndZoom</name><parameter_list pos:line="81" pos:column="28">(<param><decl><type><specifier pos:line="81" pos:column="29">const</specifier> <name pos:line="81" pos:column="35">int</name></type> <name pos:line="81" pos:column="39">state</name></decl></param>, <param><decl><type><specifier pos:line="81" pos:column="46">const</specifier> <name pos:line="81" pos:column="52">int</name></type> <name pos:line="81" pos:column="56">length</name></decl></param>, <param><decl><type><specifier pos:line="81" pos:column="64">const</specifier> <name pos:line="81" pos:column="70">int</name></type> <name pos:line="81" pos:column="74">token</name></decl></param>, <param><decl><type><name pos:line="81" pos:column="81">StyleContext</name> <type:modifier pos:line="81" pos:column="94">&amp;</type:modifier></type><name pos:line="81" pos:column="95">sc</name></decl></param>)</parameter_list> <block pos:line="81" pos:column="99">{
    <expr_stmt><expr><call><name><name pos:line="82" pos:column="5">sc</name><op:operator pos:line="82" pos:column="7">.</op:operator><name pos:line="82" pos:column="8">SetState</name></name><argument_list pos:line="82" pos:column="16">(<argument><expr><name pos:line="82" pos:column="17">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="83" pos:column="5">sc</name><op:operator pos:line="83" pos:column="7">.</op:operator><name pos:line="83" pos:column="8">Forward</name></name><argument_list pos:line="83" pos:column="15">(<argument><expr><name pos:line="83" pos:column="16">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="84" pos:column="5">sc</name><op:operator pos:line="84" pos:column="7">.</op:operator><name pos:line="84" pos:column="8">SetState</name></name><argument_list pos:line="84" pos:column="16">(<argument><expr><name pos:line="84" pos:column="17">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name pos:line="85" pos:column="5">sc</name><op:operator pos:line="85" pos:column="7">.</op:operator><name pos:line="85" pos:column="8">Forward</name></name><argument_list pos:line="85" pos:column="15">()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="86" pos:column="5">bool</name></type> <name pos:line="86" pos:column="10">started</name> <init pos:line="86" pos:column="18">= <expr><lit:literal type="boolean" pos:line="86" pos:column="20">false</lit:literal></expr></init></decl>;</decl_stmt>
    <while pos:line="87" pos:column="5">while <condition pos:line="87" pos:column="11">(<expr><call><name><name pos:line="87" pos:column="12">sc</name><op:operator pos:line="87" pos:column="14">.</op:operator><name pos:line="87" pos:column="15">More</name></name><argument_list pos:line="87" pos:column="19">()</argument_list></call> <op:operator pos:line="87" pos:column="22">&amp;&amp;</op:operator> <op:operator pos:line="87" pos:column="25">!</op:operator><call><name pos:line="87" pos:column="26">IsNewline</name><argument_list pos:line="87" pos:column="35">(<argument><expr><name><name pos:line="87" pos:column="36">sc</name><op:operator pos:line="87" pos:column="38">.</op:operator><name pos:line="87" pos:column="39">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="87" pos:column="44">{
        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name><name pos:line="88" pos:column="13">sc</name><op:operator pos:line="88" pos:column="15">.</op:operator><name pos:line="88" pos:column="16">ch</name></name> <op:operator pos:line="88" pos:column="19">==</op:operator> <name pos:line="88" pos:column="22">token</name> <op:operator pos:line="88" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="31">!</op:operator><name pos:line="88" pos:column="32">started</name></expr>)</condition><then pos:line="88" pos:column="40"> <block pos:line="88" pos:column="41">{
            <expr_stmt><expr><call><name><name pos:line="89" pos:column="13">sc</name><op:operator pos:line="89" pos:column="15">.</op:operator><name pos:line="89" pos:column="16">SetState</name></name><argument_list pos:line="89" pos:column="24">(<argument><expr><name pos:line="89" pos:column="25">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="90" pos:column="13">started</name> <op:operator pos:line="90" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="90" pos:column="23">true</lit:literal></expr>;</expr_stmt>
        }</block></then>
        <else pos:line="92" pos:column="9">else <if pos:line="92" pos:column="14">if <condition pos:line="92" pos:column="17">(<expr><name><name pos:line="92" pos:column="18">sc</name><op:operator pos:line="92" pos:column="20">.</op:operator><name pos:line="92" pos:column="21">ch</name></name> <op:operator pos:line="92" pos:column="24">!=</op:operator> <name pos:line="92" pos:column="27">token</name></expr>)</condition><then pos:line="92" pos:column="33"> <block pos:line="92" pos:column="34">{
            <expr_stmt><expr><call><name><name pos:line="93" pos:column="13">sc</name><op:operator pos:line="93" pos:column="15">.</op:operator><name pos:line="93" pos:column="16">SetState</name></name><argument_list pos:line="93" pos:column="24">(<argument><expr><name pos:line="93" pos:column="25">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="94" pos:column="13">started</name> <op:operator pos:line="94" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="94" pos:column="23">false</lit:literal></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name><name pos:line="96" pos:column="9">sc</name><op:operator pos:line="96" pos:column="11">.</op:operator><name pos:line="96" pos:column="12">Forward</name></name><argument_list pos:line="96" pos:column="19">()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name><name pos:line="98" pos:column="5">sc</name><op:operator pos:line="98" pos:column="7">.</op:operator><name pos:line="98" pos:column="8">SetState</name></name><argument_list pos:line="98" pos:column="16">(<argument><expr><name pos:line="98" pos:column="17">SCE_MARKDOWN_LINE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="101" pos:column="1">// Does the previous line have more than spaces and tabs?</comment>
<function><type><specifier pos:line="102" pos:column="1">static</specifier> <name pos:line="102" pos:column="8">bool</name></type> <name pos:line="102" pos:column="13">HasPrevLineContent</name><parameter_list pos:line="102" pos:column="31">(<param><decl><type><name pos:line="102" pos:column="32">StyleContext</name> <type:modifier pos:line="102" pos:column="45">&amp;</type:modifier></type><name pos:line="102" pos:column="46">sc</name></decl></param>)</parameter_list> <block pos:line="102" pos:column="50">{
    <decl_stmt><decl><type><name pos:line="103" pos:column="5">int</name></type> <name pos:line="103" pos:column="9">i</name> <init pos:line="103" pos:column="11">= <expr><lit:literal type="number" pos:line="103" pos:column="13">0</lit:literal></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="104" pos:column="5">// Go back to the previous newline</comment>
    <while pos:line="105" pos:column="5">while <condition pos:line="105" pos:column="11">(<expr><op:operator pos:line="105" pos:column="12">(</op:operator><op:operator pos:line="105" pos:column="13">--</op:operator><name pos:line="105" pos:column="15">i</name> <op:operator pos:line="105" pos:column="17">+</op:operator> <op:operator pos:line="105" pos:column="19">(</op:operator><name pos:line="105" pos:column="20">int</name><op:operator pos:line="105" pos:column="23">)</op:operator><name><name pos:line="105" pos:column="24">sc</name><op:operator pos:line="105" pos:column="26">.</op:operator><name pos:line="105" pos:column="27">currentPos</name></name><op:operator pos:line="105" pos:column="37">)</op:operator> <op:operator pos:line="105" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="105" pos:column="42">0</lit:literal> <op:operator pos:line="105" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="105" pos:column="47">!</op:operator><call><name pos:line="105" pos:column="48">IsNewline</name><argument_list pos:line="105" pos:column="57">(<argument><expr><call><name><name pos:line="105" pos:column="58">sc</name><op:operator pos:line="105" pos:column="60">.</op:operator><name pos:line="105" pos:column="61">GetRelative</name></name><argument_list pos:line="105" pos:column="72">(<argument><expr><name pos:line="105" pos:column="73">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <empty_stmt pos:line="106" pos:column="9">;</empty_stmt></while>
    <while pos:line="107" pos:column="5">while <condition pos:line="107" pos:column="11">(<expr><op:operator pos:line="107" pos:column="12">(</op:operator><op:operator pos:line="107" pos:column="13">--</op:operator><name pos:line="107" pos:column="15">i</name> <op:operator pos:line="107" pos:column="17">+</op:operator> <op:operator pos:line="107" pos:column="19">(</op:operator><name pos:line="107" pos:column="20">int</name><op:operator pos:line="107" pos:column="23">)</op:operator><name><name pos:line="107" pos:column="24">sc</name><op:operator pos:line="107" pos:column="26">.</op:operator><name pos:line="107" pos:column="27">currentPos</name></name><op:operator pos:line="107" pos:column="37">)</op:operator> <op:operator pos:line="107" pos:column="39">&gt;=</op:operator> <lit:literal type="number" pos:line="107" pos:column="42">0</lit:literal></expr>)</condition> <block pos:line="107" pos:column="45">{
        <if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><call><name pos:line="108" pos:column="13">IsNewline</name><argument_list pos:line="108" pos:column="22">(<argument><expr><call><name><name pos:line="108" pos:column="23">sc</name><op:operator pos:line="108" pos:column="25">.</op:operator><name pos:line="108" pos:column="26">GetRelative</name></name><argument_list pos:line="108" pos:column="37">(<argument><expr><name pos:line="108" pos:column="38">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="108" pos:column="42">
            <break pos:line="109" pos:column="13">break;</break></then></if>
        <if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><op:operator pos:line="110" pos:column="13">!</op:operator><call><name pos:line="110" pos:column="14">IsASpaceOrTab</name><argument_list pos:line="110" pos:column="27">(<argument><expr><call><name><name pos:line="110" pos:column="28">sc</name><op:operator pos:line="110" pos:column="30">.</op:operator><name pos:line="110" pos:column="31">GetRelative</name></name><argument_list pos:line="110" pos:column="42">(<argument><expr><name pos:line="110" pos:column="43">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="47">
            <return pos:line="111" pos:column="13">return <expr><lit:literal type="boolean" pos:line="111" pos:column="20">true</lit:literal></expr>;</return></then></if>
    }</block></while>
    <return pos:line="113" pos:column="5">return <expr><lit:literal type="boolean" pos:line="113" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="116" pos:column="1">static</specifier> <name pos:line="116" pos:column="8">bool</name></type> <name pos:line="116" pos:column="13">IsValidHrule</name><parameter_list pos:line="116" pos:column="25">(<param><decl><type><specifier pos:line="116" pos:column="26">const</specifier> <name pos:line="116" pos:column="32">unsigned</name> <name pos:line="116" pos:column="41">int</name></type> <name pos:line="116" pos:column="45">endPos</name></decl></param>, <param><decl><type><name pos:line="116" pos:column="53">StyleContext</name> <type:modifier pos:line="116" pos:column="66">&amp;</type:modifier></type><name pos:line="116" pos:column="67">sc</name></decl></param>)</parameter_list> <block pos:line="116" pos:column="71">{
    <decl_stmt><decl><type><name pos:line="117" pos:column="5">int</name></type> <name pos:line="117" pos:column="9">c</name></decl><op:operator pos:line="117" pos:column="10">,</op:operator> <decl><type ref="prev"/><name pos:line="117" pos:column="12">count</name> <init pos:line="117" pos:column="18">= <expr><lit:literal type="number" pos:line="117" pos:column="20">1</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="118" pos:column="5">unsigned</name> <name pos:line="118" pos:column="14">int</name></type> <name pos:line="118" pos:column="18">i</name> <init pos:line="118" pos:column="20">= <expr><lit:literal type="number" pos:line="118" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
    <while pos:line="119" pos:column="5">while <condition pos:line="119" pos:column="11">(<expr><op:operator pos:line="119" pos:column="12">++</op:operator><name pos:line="119" pos:column="14">i</name></expr>)</condition> <block pos:line="119" pos:column="17">{
        <expr_stmt><expr><name pos:line="120" pos:column="9">c</name> <op:operator pos:line="120" pos:column="11">=</op:operator> <call><name><name pos:line="120" pos:column="13">sc</name><op:operator pos:line="120" pos:column="15">.</op:operator><name pos:line="120" pos:column="16">GetRelative</name></name><argument_list pos:line="120" pos:column="27">(<argument><expr><name pos:line="120" pos:column="28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if pos:line="121" pos:column="9">if <condition pos:line="121" pos:column="12">(<expr><name pos:line="121" pos:column="13">c</name> <op:operator pos:line="121" pos:column="15">==</op:operator> <name><name pos:line="121" pos:column="18">sc</name><op:operator pos:line="121" pos:column="20">.</op:operator><name pos:line="121" pos:column="21">ch</name></name></expr>)</condition><then pos:line="121" pos:column="24">
            <expr_stmt><expr><op:operator pos:line="122" pos:column="13">++</op:operator><name pos:line="122" pos:column="15">count</name></expr>;</expr_stmt></then>
        <comment type="line" pos:line="123" pos:column="9">// hit a terminating character</comment>
        <else pos:line="124" pos:column="9">else <if pos:line="124" pos:column="14">if <condition pos:line="124" pos:column="17">(<expr><op:operator pos:line="124" pos:column="18">!</op:operator><call><name pos:line="124" pos:column="19">IsASpaceOrTab</name><argument_list pos:line="124" pos:column="32">(<argument><expr><name pos:line="124" pos:column="33">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="124" pos:column="36">||</op:operator> <name><name pos:line="124" pos:column="39">sc</name><op:operator pos:line="124" pos:column="41">.</op:operator><name pos:line="124" pos:column="42">currentPos</name></name> <op:operator pos:line="124" pos:column="53">+</op:operator> <name pos:line="124" pos:column="55">i</name> <op:operator pos:line="124" pos:column="57">==</op:operator> <name pos:line="124" pos:column="60">endPos</name></expr>)</condition><then pos:line="124" pos:column="67"> <block pos:line="124" pos:column="68">{
            <comment type="line" pos:line="125" pos:column="13">// Are we a valid HRULE</comment>
            <if pos:line="126" pos:column="13">if <condition pos:line="126" pos:column="16">(<expr><op:operator pos:line="126" pos:column="17">(</op:operator><call><name pos:line="126" pos:column="18">IsNewline</name><argument_list pos:line="126" pos:column="27">(<argument><expr><name pos:line="126" pos:column="28">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="31">||</op:operator> <name><name pos:line="126" pos:column="34">sc</name><op:operator pos:line="126" pos:column="36">.</op:operator><name pos:line="126" pos:column="37">currentPos</name></name> <op:operator pos:line="126" pos:column="48">+</op:operator> <name pos:line="126" pos:column="50">i</name> <op:operator pos:line="126" pos:column="52">==</op:operator> <name pos:line="126" pos:column="55">endPos</name><op:operator pos:line="126" pos:column="61">)</op:operator> <op:operator pos:line="126" pos:column="63">&amp;&amp;</op:operator>
                    <name pos:line="127" pos:column="21">count</name> <op:operator pos:line="127" pos:column="27">&gt;=</op:operator> <lit:literal type="number" pos:line="127" pos:column="30">3</lit:literal> <op:operator pos:line="127" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="127" pos:column="35">!</op:operator><call><name pos:line="127" pos:column="36">HasPrevLineContent</name><argument_list pos:line="127" pos:column="54">(<argument><expr><name pos:line="127" pos:column="55">sc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="127" pos:column="59"> <block pos:line="127" pos:column="60">{
                <expr_stmt><expr><call><name><name pos:line="128" pos:column="17">sc</name><op:operator pos:line="128" pos:column="19">.</op:operator><name pos:line="128" pos:column="20">SetState</name></name><argument_list pos:line="128" pos:column="28">(<argument><expr><name pos:line="128" pos:column="29">SCE_MARKDOWN_HRULE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="129" pos:column="17">sc</name><op:operator pos:line="129" pos:column="19">.</op:operator><name pos:line="129" pos:column="20">Forward</name></name><argument_list pos:line="129" pos:column="27">(<argument><expr><name pos:line="129" pos:column="28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="130" pos:column="17">sc</name><op:operator pos:line="130" pos:column="19">.</op:operator><name pos:line="130" pos:column="20">SetState</name></name><argument_list pos:line="130" pos:column="28">(<argument><expr><name pos:line="130" pos:column="29">SCE_MARKDOWN_LINE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:line="131" pos:column="17">return <expr><lit:literal type="boolean" pos:line="131" pos:column="24">true</lit:literal></expr>;</return>
            }</block></then>
            <else pos:line="133" pos:column="13">else <block pos:line="133" pos:column="18">{
                <expr_stmt><expr><call><name><name pos:line="134" pos:column="17">sc</name><op:operator pos:line="134" pos:column="19">.</op:operator><name pos:line="134" pos:column="20">SetState</name></name><argument_list pos:line="134" pos:column="28">(<argument><expr><name pos:line="134" pos:column="29">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="135" pos:column="17">return <expr><lit:literal type="boolean" pos:line="135" pos:column="24">false</lit:literal></expr>;</return>
            }</block></else></if>
        }</block></then></if></else></if>
    }</block></while>
    <return pos:line="139" pos:column="5">return <expr><lit:literal type="boolean" pos:line="139" pos:column="12">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="142" pos:column="1">static</specifier> <name pos:line="142" pos:column="8">void</name></type> <name pos:line="142" pos:column="13">ColorizeMarkdownDoc</name><parameter_list pos:line="142" pos:column="32">(<param><decl><type><name pos:line="142" pos:column="33">unsigned</name> <name pos:line="142" pos:column="42">int</name></type> <name pos:line="142" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="56">int</name></type> <name pos:line="142" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="68">int</name></type> <name pos:line="142" pos:column="72">initStyle</name></decl></param>,
                               <param><decl><type><name pos:line="143" pos:column="32">WordList</name> <type:modifier pos:line="143" pos:column="41">*</type:modifier><type:modifier pos:line="143" pos:column="42">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="143" pos:column="45">Accessor</name> <type:modifier pos:line="143" pos:column="54">&amp;</type:modifier></type><name pos:line="143" pos:column="55">styler</name></decl></param>)</parameter_list> <block pos:line="143" pos:column="63">{
    <decl_stmt><decl><type><name pos:line="144" pos:column="5">unsigned</name> <name pos:line="144" pos:column="14">int</name></type> <name pos:line="144" pos:column="18">endPos</name> <init pos:line="144" pos:column="25">= <expr><name pos:line="144" pos:column="27">startPos</name> <op:operator pos:line="144" pos:column="36">+</op:operator> <name pos:line="144" pos:column="38">length</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="145" pos:column="5">int</name></type> <name pos:line="145" pos:column="9">precharCount</name> <init pos:line="145" pos:column="22">= <expr><lit:literal type="number" pos:line="145" pos:column="24">0</lit:literal></expr></init></decl>;</decl_stmt>
    <comment type="line" pos:line="146" pos:column="5">// Don't advance on a new loop iteration and retry at the same position.</comment>
    <comment type="line" pos:line="147" pos:column="5">// Useful in the corner case of having to start at the beginning file position</comment>
    <comment type="line" pos:line="148" pos:column="5">// in the default state.</comment>
    <decl_stmt><decl><type><name pos:line="149" pos:column="5">bool</name></type> <name pos:line="149" pos:column="10">freezeCursor</name> <init pos:line="149" pos:column="23">= <expr><lit:literal type="boolean" pos:line="149" pos:column="25">false</lit:literal></expr></init></decl>;</decl_stmt>

    <function_decl><type><name pos:line="151" pos:column="5">StyleContext</name></type> <name pos:line="151" pos:column="18">sc</name><parameter_list pos:line="151" pos:column="20">(<param><decl><type><name pos:line="151" pos:column="21">startPos</name></type></decl></param>, <param><decl><type><name pos:line="151" pos:column="31">length</name></type></decl></param>, <param><decl><type><name pos:line="151" pos:column="39">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="151" pos:column="50">styler</name></type></decl></param>)</parameter_list>;</function_decl>

    <while pos:line="153" pos:column="5">while <condition pos:line="153" pos:column="11">(<expr><call><name><name pos:line="153" pos:column="12">sc</name><op:operator pos:line="153" pos:column="14">.</op:operator><name pos:line="153" pos:column="15">More</name></name><argument_list pos:line="153" pos:column="19">()</argument_list></call></expr>)</condition> <block pos:line="153" pos:column="23">{
        <comment type="line" pos:line="154" pos:column="9">// Skip past escaped characters</comment>
        <if pos:line="155" pos:column="9">if <condition pos:line="155" pos:column="12">(<expr><name><name pos:line="155" pos:column="13">sc</name><op:operator pos:line="155" pos:column="15">.</op:operator><name pos:line="155" pos:column="16">ch</name></name> <op:operator pos:line="155" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="155" pos:column="22">'\\'</lit:literal></expr>)</condition><then pos:line="155" pos:column="27"> <block pos:line="155" pos:column="28">{
            <expr_stmt><expr><call><name><name pos:line="156" pos:column="13">sc</name><op:operator pos:line="156" pos:column="15">.</op:operator><name pos:line="156" pos:column="16">Forward</name></name><argument_list pos:line="156" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
            <continue pos:line="157" pos:column="13">continue;</continue>
        }</block></then></if>

        <comment type="line" pos:line="160" pos:column="9">// A blockquotes resets the line semantics</comment>
        <if pos:line="161" pos:column="9">if <condition pos:line="161" pos:column="12">(<expr><name><name pos:line="161" pos:column="13">sc</name><op:operator pos:line="161" pos:column="15">.</op:operator><name pos:line="161" pos:column="16">state</name></name> <op:operator pos:line="161" pos:column="22">==</op:operator> <name pos:line="161" pos:column="25">SCE_MARKDOWN_BLOCKQUOTE</name></expr>)</condition><then pos:line="161" pos:column="49">
            <expr_stmt><expr><call><name><name pos:line="162" pos:column="13">sc</name><op:operator pos:line="162" pos:column="15">.</op:operator><name pos:line="162" pos:column="16">SetState</name></name><argument_list pos:line="162" pos:column="24">(<argument><expr><name pos:line="162" pos:column="25">SCE_MARKDOWN_LINE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="line" pos:line="164" pos:column="9">// Conditional state-based actions</comment>
        <if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><name><name pos:line="165" pos:column="13">sc</name><op:operator pos:line="165" pos:column="15">.</op:operator><name pos:line="165" pos:column="16">state</name></name> <op:operator pos:line="165" pos:column="22">==</op:operator> <name pos:line="165" pos:column="25">SCE_MARKDOWN_CODE2</name></expr>)</condition><then pos:line="165" pos:column="44"> <block pos:line="165" pos:column="45">{
            <if pos:line="166" pos:column="13">if <condition pos:line="166" pos:column="16">(<expr><call><name><name pos:line="166" pos:column="17">sc</name><op:operator pos:line="166" pos:column="19">.</op:operator><name pos:line="166" pos:column="20">Match</name></name><argument_list pos:line="166" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="166" pos:column="26">"``"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="166" pos:column="32">&amp;&amp;</op:operator> <call><name><name pos:line="166" pos:column="35">sc</name><op:operator pos:line="166" pos:column="37">.</op:operator><name pos:line="166" pos:column="38">GetRelative</name></name><argument_list pos:line="166" pos:column="49">(<argument><expr><op:operator pos:line="166" pos:column="50">-</op:operator><lit:literal type="number" pos:line="166" pos:column="51">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="166" pos:column="54">!=</op:operator> <lit:literal type="char" pos:line="166" pos:column="57">' '</lit:literal></expr>)</condition><then pos:line="166" pos:column="61"> <block pos:line="166" pos:column="62">{
                <expr_stmt><expr><call><name><name pos:line="167" pos:column="17">sc</name><op:operator pos:line="167" pos:column="19">.</op:operator><name pos:line="167" pos:column="20">Forward</name></name><argument_list pos:line="167" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="167" pos:column="28">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="168" pos:column="17">sc</name><op:operator pos:line="168" pos:column="19">.</op:operator><name pos:line="168" pos:column="20">SetState</name></name><argument_list pos:line="168" pos:column="28">(<argument><expr><name pos:line="168" pos:column="29">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else pos:line="171" pos:column="9">else <if pos:line="171" pos:column="14">if <condition pos:line="171" pos:column="17">(<expr><name><name pos:line="171" pos:column="18">sc</name><op:operator pos:line="171" pos:column="20">.</op:operator><name pos:line="171" pos:column="21">state</name></name> <op:operator pos:line="171" pos:column="27">==</op:operator> <name pos:line="171" pos:column="30">SCE_MARKDOWN_CODE</name></expr>)</condition><then pos:line="171" pos:column="48"> <block pos:line="171" pos:column="49">{
            <if pos:line="172" pos:column="13">if <condition pos:line="172" pos:column="16">(<expr><name><name pos:line="172" pos:column="17">sc</name><op:operator pos:line="172" pos:column="19">.</op:operator><name pos:line="172" pos:column="20">ch</name></name> <op:operator pos:line="172" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="172" pos:column="26">'`'</lit:literal> <op:operator pos:line="172" pos:column="30">&amp;&amp;</op:operator> <name><name pos:line="172" pos:column="33">sc</name><op:operator pos:line="172" pos:column="35">.</op:operator><name pos:line="172" pos:column="36">chPrev</name></name> <op:operator pos:line="172" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="172" pos:column="46">' '</lit:literal></expr>)</condition><then pos:line="172" pos:column="50">
                <expr_stmt><expr><call><name><name pos:line="173" pos:column="17">sc</name><op:operator pos:line="173" pos:column="19">.</op:operator><name pos:line="173" pos:column="20">ForwardSetState</name></name><argument_list pos:line="173" pos:column="35">(<argument><expr><name pos:line="173" pos:column="36">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
        <comment type="block" pos:line="175" pos:column="9">/* De-activated because it gets in the way of other valid indentation
         * schemes, for example multiple paragraphs inside a list item.
        // Code block
        else if (sc.state == SCE_MARKDOWN_CODEBK) {
            bool d = true;
            if (IsNewline(sc.ch)) {
                if (sc.chNext != '\t') {
                    for (int c = 1; c &lt; 5; ++c) {
                        if (sc.GetRelative(c) != ' ')
                            d = false;
                    }
                }
            }
            else if (sc.atLineStart) {
                if (sc.ch != '\t' ) {
                    for (int i = 0; i &lt; 4; ++i) {
                        if (sc.GetRelative(i) != ' ')
                            d = false;
                    }
                }
            }
            if (!d)
                sc.SetState(SCE_MARKDOWN_LINE_BEGIN);
        }
        */</comment>
        <comment type="line" pos:line="200" pos:column="9">// Strong</comment>
        <else pos:line="201" pos:column="9">else <if pos:line="201" pos:column="14">if <condition pos:line="201" pos:column="17">(<expr><name><name pos:line="201" pos:column="18">sc</name><op:operator pos:line="201" pos:column="20">.</op:operator><name pos:line="201" pos:column="21">state</name></name> <op:operator pos:line="201" pos:column="27">==</op:operator> <name pos:line="201" pos:column="30">SCE_MARKDOWN_STRONG1</name></expr>)</condition><then pos:line="201" pos:column="51"> <block pos:line="201" pos:column="52">{
            <if pos:line="202" pos:column="13">if <condition pos:line="202" pos:column="16">(<expr><call><name><name pos:line="202" pos:column="17">sc</name><op:operator pos:line="202" pos:column="19">.</op:operator><name pos:line="202" pos:column="20">Match</name></name><argument_list pos:line="202" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="202" pos:column="26">"**"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="202" pos:column="32">&amp;&amp;</op:operator> <name><name pos:line="202" pos:column="35">sc</name><op:operator pos:line="202" pos:column="37">.</op:operator><name pos:line="202" pos:column="38">chPrev</name></name> <op:operator pos:line="202" pos:column="45">!=</op:operator> <lit:literal type="char" pos:line="202" pos:column="48">' '</lit:literal></expr>)</condition><then pos:line="202" pos:column="52"> <block pos:line="202" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="203" pos:column="17">sc</name><op:operator pos:line="203" pos:column="19">.</op:operator><name pos:line="203" pos:column="20">Forward</name></name><argument_list pos:line="203" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="203" pos:column="28">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="204" pos:column="17">sc</name><op:operator pos:line="204" pos:column="19">.</op:operator><name pos:line="204" pos:column="20">SetState</name></name><argument_list pos:line="204" pos:column="28">(<argument><expr><name pos:line="204" pos:column="29">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else pos:line="207" pos:column="9">else <if pos:line="207" pos:column="14">if <condition pos:line="207" pos:column="17">(<expr><name><name pos:line="207" pos:column="18">sc</name><op:operator pos:line="207" pos:column="20">.</op:operator><name pos:line="207" pos:column="21">state</name></name> <op:operator pos:line="207" pos:column="27">==</op:operator> <name pos:line="207" pos:column="30">SCE_MARKDOWN_STRONG2</name></expr>)</condition><then pos:line="207" pos:column="51"> <block pos:line="207" pos:column="52">{
            <if pos:line="208" pos:column="13">if <condition pos:line="208" pos:column="16">(<expr><call><name><name pos:line="208" pos:column="17">sc</name><op:operator pos:line="208" pos:column="19">.</op:operator><name pos:line="208" pos:column="20">Match</name></name><argument_list pos:line="208" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="26">"__"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="208" pos:column="32">&amp;&amp;</op:operator> <name><name pos:line="208" pos:column="35">sc</name><op:operator pos:line="208" pos:column="37">.</op:operator><name pos:line="208" pos:column="38">chPrev</name></name> <op:operator pos:line="208" pos:column="45">!=</op:operator> <lit:literal type="char" pos:line="208" pos:column="48">' '</lit:literal></expr>)</condition><then pos:line="208" pos:column="52"> <block pos:line="208" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="209" pos:column="17">sc</name><op:operator pos:line="209" pos:column="19">.</op:operator><name pos:line="209" pos:column="20">Forward</name></name><argument_list pos:line="209" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="209" pos:column="28">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="210" pos:column="17">sc</name><op:operator pos:line="210" pos:column="19">.</op:operator><name pos:line="210" pos:column="20">SetState</name></name><argument_list pos:line="210" pos:column="28">(<argument><expr><name pos:line="210" pos:column="29">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <comment type="line" pos:line="213" pos:column="9">// Emphasis</comment>
        <else pos:line="214" pos:column="9">else <if pos:line="214" pos:column="14">if <condition pos:line="214" pos:column="17">(<expr><name><name pos:line="214" pos:column="18">sc</name><op:operator pos:line="214" pos:column="20">.</op:operator><name pos:line="214" pos:column="21">state</name></name> <op:operator pos:line="214" pos:column="27">==</op:operator> <name pos:line="214" pos:column="30">SCE_MARKDOWN_EM1</name></expr>)</condition><then pos:line="214" pos:column="47"> <block pos:line="214" pos:column="48">{
            <if pos:line="215" pos:column="13">if <condition pos:line="215" pos:column="16">(<expr><name><name pos:line="215" pos:column="17">sc</name><op:operator pos:line="215" pos:column="19">.</op:operator><name pos:line="215" pos:column="20">ch</name></name> <op:operator pos:line="215" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="215" pos:column="26">'*'</lit:literal> <op:operator pos:line="215" pos:column="30">&amp;&amp;</op:operator> <name><name pos:line="215" pos:column="33">sc</name><op:operator pos:line="215" pos:column="35">.</op:operator><name pos:line="215" pos:column="36">chPrev</name></name> <op:operator pos:line="215" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="215" pos:column="46">' '</lit:literal></expr>)</condition><then pos:line="215" pos:column="50">
                <expr_stmt><expr><call><name><name pos:line="216" pos:column="17">sc</name><op:operator pos:line="216" pos:column="19">.</op:operator><name pos:line="216" pos:column="20">ForwardSetState</name></name><argument_list pos:line="216" pos:column="35">(<argument><expr><name pos:line="216" pos:column="36">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
        <else pos:line="218" pos:column="9">else <if pos:line="218" pos:column="14">if <condition pos:line="218" pos:column="17">(<expr><name><name pos:line="218" pos:column="18">sc</name><op:operator pos:line="218" pos:column="20">.</op:operator><name pos:line="218" pos:column="21">state</name></name> <op:operator pos:line="218" pos:column="27">==</op:operator> <name pos:line="218" pos:column="30">SCE_MARKDOWN_EM2</name></expr>)</condition><then pos:line="218" pos:column="47"> <block pos:line="218" pos:column="48">{
            <if pos:line="219" pos:column="13">if <condition pos:line="219" pos:column="16">(<expr><name><name pos:line="219" pos:column="17">sc</name><op:operator pos:line="219" pos:column="19">.</op:operator><name pos:line="219" pos:column="20">ch</name></name> <op:operator pos:line="219" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="219" pos:column="26">'_'</lit:literal> <op:operator pos:line="219" pos:column="30">&amp;&amp;</op:operator> <name><name pos:line="219" pos:column="33">sc</name><op:operator pos:line="219" pos:column="35">.</op:operator><name pos:line="219" pos:column="36">chPrev</name></name> <op:operator pos:line="219" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="219" pos:column="46">' '</lit:literal></expr>)</condition><then pos:line="219" pos:column="50">
                <expr_stmt><expr><call><name><name pos:line="220" pos:column="17">sc</name><op:operator pos:line="220" pos:column="19">.</op:operator><name pos:line="220" pos:column="20">ForwardSetState</name></name><argument_list pos:line="220" pos:column="35">(<argument><expr><name pos:line="220" pos:column="36">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
        <else pos:line="222" pos:column="9">else <if pos:line="222" pos:column="14">if <condition pos:line="222" pos:column="17">(<expr><name><name pos:line="222" pos:column="18">sc</name><op:operator pos:line="222" pos:column="20">.</op:operator><name pos:line="222" pos:column="21">state</name></name> <op:operator pos:line="222" pos:column="27">==</op:operator> <name pos:line="222" pos:column="30">SCE_MARKDOWN_CODEBK</name></expr>)</condition><then pos:line="222" pos:column="50"> <block pos:line="222" pos:column="51">{
            <if pos:line="223" pos:column="13">if <condition pos:line="223" pos:column="16">(<expr><name><name pos:line="223" pos:column="17">sc</name><op:operator pos:line="223" pos:column="19">.</op:operator><name pos:line="223" pos:column="20">atLineStart</name></name> <op:operator pos:line="223" pos:column="32">&amp;&amp;</op:operator> <call><name><name pos:line="223" pos:column="35">sc</name><op:operator pos:line="223" pos:column="37">.</op:operator><name pos:line="223" pos:column="38">Match</name></name><argument_list pos:line="223" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="223" pos:column="44">"~~~"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="223" pos:column="51"> <block pos:line="223" pos:column="52">{
                <decl_stmt><decl><type><name pos:line="224" pos:column="17">int</name></type> <name pos:line="224" pos:column="21">i</name> <init pos:line="224" pos:column="23">= <expr><lit:literal type="number" pos:line="224" pos:column="25">1</lit:literal></expr></init></decl>;</decl_stmt>
                <while pos:line="225" pos:column="17">while <condition pos:line="225" pos:column="23">(<expr><op:operator pos:line="225" pos:column="24">!</op:operator><call><name pos:line="225" pos:column="25">IsNewline</name><argument_list pos:line="225" pos:column="34">(<argument><expr><call><name><name pos:line="225" pos:column="35">sc</name><op:operator pos:line="225" pos:column="37">.</op:operator><name pos:line="225" pos:column="38">GetRelative</name></name><argument_list pos:line="225" pos:column="49">(<argument><expr><name pos:line="225" pos:column="50">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="225" pos:column="54">&amp;&amp;</op:operator> <name><name pos:line="225" pos:column="57">sc</name><op:operator pos:line="225" pos:column="59">.</op:operator><name pos:line="225" pos:column="60">currentPos</name></name> <op:operator pos:line="225" pos:column="71">+</op:operator> <name pos:line="225" pos:column="73">i</name> <op:operator pos:line="225" pos:column="75">&lt;</op:operator> <name pos:line="225" pos:column="77">endPos</name></expr>)</condition>
                    <expr_stmt><expr><name pos:line="226" pos:column="21">i</name><op:operator pos:line="226" pos:column="22">++</op:operator></expr>;</expr_stmt></while>
                <expr_stmt><expr><call><name><name pos:line="227" pos:column="17">sc</name><op:operator pos:line="227" pos:column="19">.</op:operator><name pos:line="227" pos:column="20">Forward</name></name><argument_list pos:line="227" pos:column="27">(<argument><expr><name pos:line="227" pos:column="28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="228" pos:column="17">sc</name><op:operator pos:line="228" pos:column="19">.</op:operator><name pos:line="228" pos:column="20">SetState</name></name><argument_list pos:line="228" pos:column="28">(<argument><expr><name pos:line="228" pos:column="29">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else pos:line="231" pos:column="9">else <if pos:line="231" pos:column="14">if <condition pos:line="231" pos:column="17">(<expr><name><name pos:line="231" pos:column="18">sc</name><op:operator pos:line="231" pos:column="20">.</op:operator><name pos:line="231" pos:column="21">state</name></name> <op:operator pos:line="231" pos:column="27">==</op:operator> <name pos:line="231" pos:column="30">SCE_MARKDOWN_STRIKEOUT</name></expr>)</condition><then pos:line="231" pos:column="53"> <block pos:line="231" pos:column="54">{
            <if pos:line="232" pos:column="13">if <condition pos:line="232" pos:column="16">(<expr><call><name><name pos:line="232" pos:column="17">sc</name><op:operator pos:line="232" pos:column="19">.</op:operator><name pos:line="232" pos:column="20">Match</name></name><argument_list pos:line="232" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="232" pos:column="26">"~~"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="232" pos:column="32">&amp;&amp;</op:operator> <name><name pos:line="232" pos:column="35">sc</name><op:operator pos:line="232" pos:column="37">.</op:operator><name pos:line="232" pos:column="38">chPrev</name></name> <op:operator pos:line="232" pos:column="45">!=</op:operator> <lit:literal type="char" pos:line="232" pos:column="48">' '</lit:literal></expr>)</condition><then pos:line="232" pos:column="52"> <block pos:line="232" pos:column="53">{
                <expr_stmt><expr><call><name><name pos:line="233" pos:column="17">sc</name><op:operator pos:line="233" pos:column="19">.</op:operator><name pos:line="233" pos:column="20">Forward</name></name><argument_list pos:line="233" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="233" pos:column="28">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="234" pos:column="17">sc</name><op:operator pos:line="234" pos:column="19">.</op:operator><name pos:line="234" pos:column="20">SetState</name></name><argument_list pos:line="234" pos:column="28">(<argument><expr><name pos:line="234" pos:column="29">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else pos:line="237" pos:column="9">else <if pos:line="237" pos:column="14">if <condition pos:line="237" pos:column="17">(<expr><name><name pos:line="237" pos:column="18">sc</name><op:operator pos:line="237" pos:column="20">.</op:operator><name pos:line="237" pos:column="21">state</name></name> <op:operator pos:line="237" pos:column="27">==</op:operator> <name pos:line="237" pos:column="30">SCE_MARKDOWN_LINE_BEGIN</name></expr>)</condition><then pos:line="237" pos:column="54"> <block pos:line="237" pos:column="55">{
            <comment type="line" pos:line="238" pos:column="13">// Header</comment>
            <if pos:line="239" pos:column="13">if <condition pos:line="239" pos:column="16">(<expr><call><name><name pos:line="239" pos:column="17">sc</name><op:operator pos:line="239" pos:column="19">.</op:operator><name pos:line="239" pos:column="20">Match</name></name><argument_list pos:line="239" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="239" pos:column="26">"######"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="239" pos:column="36">
                <expr_stmt><expr><call><name pos:line="240" pos:column="17">SetStateAndZoom</name><argument_list pos:line="240" pos:column="32">(<argument><expr><name pos:line="240" pos:column="33">SCE_MARKDOWN_HEADER6</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="240" pos:column="55">6</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="240" pos:column="58">'#'</lit:literal></expr></argument>, <argument><expr><name pos:line="240" pos:column="63">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="241" pos:column="13">else <if pos:line="241" pos:column="18">if <condition pos:line="241" pos:column="21">(<expr><call><name><name pos:line="241" pos:column="22">sc</name><op:operator pos:line="241" pos:column="24">.</op:operator><name pos:line="241" pos:column="25">Match</name></name><argument_list pos:line="241" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="241" pos:column="31">"#####"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="241" pos:column="40">
                <expr_stmt><expr><call><name pos:line="242" pos:column="17">SetStateAndZoom</name><argument_list pos:line="242" pos:column="32">(<argument><expr><name pos:line="242" pos:column="33">SCE_MARKDOWN_HEADER5</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="242" pos:column="55">5</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="242" pos:column="58">'#'</lit:literal></expr></argument>, <argument><expr><name pos:line="242" pos:column="63">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="243" pos:column="13">else <if pos:line="243" pos:column="18">if <condition pos:line="243" pos:column="21">(<expr><call><name><name pos:line="243" pos:column="22">sc</name><op:operator pos:line="243" pos:column="24">.</op:operator><name pos:line="243" pos:column="25">Match</name></name><argument_list pos:line="243" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="243" pos:column="31">"####"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="243" pos:column="39">
                <expr_stmt><expr><call><name pos:line="244" pos:column="17">SetStateAndZoom</name><argument_list pos:line="244" pos:column="32">(<argument><expr><name pos:line="244" pos:column="33">SCE_MARKDOWN_HEADER4</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="244" pos:column="55">4</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="244" pos:column="58">'#'</lit:literal></expr></argument>, <argument><expr><name pos:line="244" pos:column="63">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="245" pos:column="13">else <if pos:line="245" pos:column="18">if <condition pos:line="245" pos:column="21">(<expr><call><name><name pos:line="245" pos:column="22">sc</name><op:operator pos:line="245" pos:column="24">.</op:operator><name pos:line="245" pos:column="25">Match</name></name><argument_list pos:line="245" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="245" pos:column="31">"###"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="245" pos:column="38">
                <expr_stmt><expr><call><name pos:line="246" pos:column="17">SetStateAndZoom</name><argument_list pos:line="246" pos:column="32">(<argument><expr><name pos:line="246" pos:column="33">SCE_MARKDOWN_HEADER3</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="246" pos:column="55">3</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="246" pos:column="58">'#'</lit:literal></expr></argument>, <argument><expr><name pos:line="246" pos:column="63">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="247" pos:column="13">else <if pos:line="247" pos:column="18">if <condition pos:line="247" pos:column="21">(<expr><call><name><name pos:line="247" pos:column="22">sc</name><op:operator pos:line="247" pos:column="24">.</op:operator><name pos:line="247" pos:column="25">Match</name></name><argument_list pos:line="247" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="247" pos:column="31">"##"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="247" pos:column="37">
                <expr_stmt><expr><call><name pos:line="248" pos:column="17">SetStateAndZoom</name><argument_list pos:line="248" pos:column="32">(<argument><expr><name pos:line="248" pos:column="33">SCE_MARKDOWN_HEADER2</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="248" pos:column="55">2</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="248" pos:column="58">'#'</lit:literal></expr></argument>, <argument><expr><name pos:line="248" pos:column="63">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="249" pos:column="13">else <if pos:line="249" pos:column="18">if <condition pos:line="249" pos:column="21">(<expr><call><name><name pos:line="249" pos:column="22">sc</name><op:operator pos:line="249" pos:column="24">.</op:operator><name pos:line="249" pos:column="25">Match</name></name><argument_list pos:line="249" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="249" pos:column="31">"#"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="249" pos:column="36"> <block pos:line="249" pos:column="37">{
                <comment type="line" pos:line="250" pos:column="17">// Catch the special case of an unordered list</comment>
                <if pos:line="251" pos:column="17">if <condition pos:line="251" pos:column="20">(<expr><name><name pos:line="251" pos:column="21">sc</name><op:operator pos:line="251" pos:column="23">.</op:operator><name pos:line="251" pos:column="24">chNext</name></name> <op:operator pos:line="251" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="251" pos:column="34">'.'</lit:literal> <op:operator pos:line="251" pos:column="38">&amp;&amp;</op:operator> <call><name pos:line="251" pos:column="41">IsASpaceOrTab</name><argument_list pos:line="251" pos:column="54">(<argument><expr><call><name><name pos:line="251" pos:column="55">sc</name><op:operator pos:line="251" pos:column="57">.</op:operator><name pos:line="251" pos:column="58">GetRelative</name></name><argument_list pos:line="251" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="251" pos:column="70">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="251" pos:column="74"> <block pos:line="251" pos:column="75">{
                    <expr_stmt><expr><name pos:line="252" pos:column="21">precharCount</name> <op:operator pos:line="252" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="252" pos:column="36">0</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="253" pos:column="21">sc</name><op:operator pos:line="253" pos:column="23">.</op:operator><name pos:line="253" pos:column="24">SetState</name></name><argument_list pos:line="253" pos:column="32">(<argument><expr><name pos:line="253" pos:column="33">SCE_MARKDOWN_PRECHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else pos:line="255" pos:column="17">else
                    <expr_stmt><expr><call><name pos:line="256" pos:column="21">SetStateAndZoom</name><argument_list pos:line="256" pos:column="36">(<argument><expr><name pos:line="256" pos:column="37">SCE_MARKDOWN_HEADER1</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="256" pos:column="59">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="256" pos:column="62">'#'</lit:literal></expr></argument>, <argument><expr><name pos:line="256" pos:column="67">sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then>
            <comment type="line" pos:line="258" pos:column="13">// Code block</comment>
            <else pos:line="259" pos:column="13">else <if pos:line="259" pos:column="18">if <condition pos:line="259" pos:column="21">(<expr><call><name><name pos:line="259" pos:column="22">sc</name><op:operator pos:line="259" pos:column="24">.</op:operator><name pos:line="259" pos:column="25">Match</name></name><argument_list pos:line="259" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="259" pos:column="31">"~~~"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="259" pos:column="38"> <block pos:line="259" pos:column="39">{
                <if pos:line="260" pos:column="17">if <condition pos:line="260" pos:column="20">(<expr><op:operator pos:line="260" pos:column="21">!</op:operator><call><name pos:line="260" pos:column="22">HasPrevLineContent</name><argument_list pos:line="260" pos:column="40">(<argument><expr><name pos:line="260" pos:column="41">sc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="260" pos:column="45">
                    <expr_stmt><expr><call><name><name pos:line="261" pos:column="21">sc</name><op:operator pos:line="261" pos:column="23">.</op:operator><name pos:line="261" pos:column="24">SetState</name></name><argument_list pos:line="261" pos:column="32">(<argument><expr><name pos:line="261" pos:column="33">SCE_MARKDOWN_CODEBK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else pos:line="262" pos:column="17">else
                    <expr_stmt><expr><call><name><name pos:line="263" pos:column="21">sc</name><op:operator pos:line="263" pos:column="23">.</op:operator><name pos:line="263" pos:column="24">SetState</name></name><argument_list pos:line="263" pos:column="32">(<argument><expr><name pos:line="263" pos:column="33">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then>
            <else pos:line="265" pos:column="13">else <if pos:line="265" pos:column="18">if <condition pos:line="265" pos:column="21">(<expr><name><name pos:line="265" pos:column="22">sc</name><op:operator pos:line="265" pos:column="24">.</op:operator><name pos:line="265" pos:column="25">ch</name></name> <op:operator pos:line="265" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="265" pos:column="31">'='</lit:literal></expr>)</condition><then pos:line="265" pos:column="35"> <block pos:line="265" pos:column="36">{
                <if pos:line="266" pos:column="17">if <condition pos:line="266" pos:column="20">(<expr><call><name pos:line="266" pos:column="21">HasPrevLineContent</name><argument_list pos:line="266" pos:column="39">(<argument><expr><name pos:line="266" pos:column="40">sc</name></expr></argument>)</argument_list></call> <op:operator pos:line="266" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="266" pos:column="47">FollowToLineEnd</name><argument_list pos:line="266" pos:column="62">(<argument><expr><lit:literal type="char" pos:line="266" pos:column="63">'='</lit:literal></expr></argument>, <argument><expr><name pos:line="266" pos:column="68">SCE_MARKDOWN_HEADER1</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="90">endPos</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="98">sc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="266" pos:column="102">
                    <empty_stmt pos:line="267" pos:column="21">;</empty_stmt></then>
                <else pos:line="268" pos:column="17">else
                    <expr_stmt><expr><call><name><name pos:line="269" pos:column="21">sc</name><op:operator pos:line="269" pos:column="23">.</op:operator><name pos:line="269" pos:column="24">SetState</name></name><argument_list pos:line="269" pos:column="32">(<argument><expr><name pos:line="269" pos:column="33">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then>
            <else pos:line="271" pos:column="13">else <if pos:line="271" pos:column="18">if <condition pos:line="271" pos:column="21">(<expr><name><name pos:line="271" pos:column="22">sc</name><op:operator pos:line="271" pos:column="24">.</op:operator><name pos:line="271" pos:column="25">ch</name></name> <op:operator pos:line="271" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="271" pos:column="31">'-'</lit:literal></expr>)</condition><then pos:line="271" pos:column="35"> <block pos:line="271" pos:column="36">{
                <if pos:line="272" pos:column="17">if <condition pos:line="272" pos:column="20">(<expr><call><name pos:line="272" pos:column="21">HasPrevLineContent</name><argument_list pos:line="272" pos:column="39">(<argument><expr><name pos:line="272" pos:column="40">sc</name></expr></argument>)</argument_list></call> <op:operator pos:line="272" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="272" pos:column="47">FollowToLineEnd</name><argument_list pos:line="272" pos:column="62">(<argument><expr><lit:literal type="char" pos:line="272" pos:column="63">'-'</lit:literal></expr></argument>, <argument><expr><name pos:line="272" pos:column="68">SCE_MARKDOWN_HEADER2</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="90">endPos</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="98">sc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="272" pos:column="102">
                    <empty_stmt pos:line="273" pos:column="21">;</empty_stmt></then>
                <else pos:line="274" pos:column="17">else <block pos:line="274" pos:column="22">{
                    <expr_stmt><expr><name pos:line="275" pos:column="21">precharCount</name> <op:operator pos:line="275" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="275" pos:column="36">0</lit:literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="276" pos:column="21">sc</name><op:operator pos:line="276" pos:column="23">.</op:operator><name pos:line="276" pos:column="24">SetState</name></name><argument_list pos:line="276" pos:column="32">(<argument><expr><name pos:line="276" pos:column="33">SCE_MARKDOWN_PRECHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else pos:line="279" pos:column="13">else <if pos:line="279" pos:column="18">if <condition pos:line="279" pos:column="21">(<expr><call><name pos:line="279" pos:column="22">IsNewline</name><argument_list pos:line="279" pos:column="31">(<argument><expr><name><name pos:line="279" pos:column="32">sc</name><op:operator pos:line="279" pos:column="34">.</op:operator><name pos:line="279" pos:column="35">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="279" pos:column="39">
                <expr_stmt><expr><call><name><name pos:line="280" pos:column="17">sc</name><op:operator pos:line="280" pos:column="19">.</op:operator><name pos:line="280" pos:column="20">SetState</name></name><argument_list pos:line="280" pos:column="28">(<argument><expr><name pos:line="280" pos:column="29">SCE_MARKDOWN_LINE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="281" pos:column="13">else <block pos:line="281" pos:column="18">{
                <expr_stmt><expr><name pos:line="282" pos:column="17">precharCount</name> <op:operator pos:line="282" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="282" pos:column="32">0</lit:literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="283" pos:column="17">sc</name><op:operator pos:line="283" pos:column="19">.</op:operator><name pos:line="283" pos:column="20">SetState</name></name><argument_list pos:line="283" pos:column="28">(<argument><expr><name pos:line="283" pos:column="29">SCE_MARKDOWN_PRECHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></then>

        <comment type="line" pos:line="287" pos:column="9">// The header lasts until the newline</comment>
        <else pos:line="288" pos:column="9">else <if pos:line="288" pos:column="14">if <condition pos:line="288" pos:column="17">(<expr><name><name pos:line="288" pos:column="18">sc</name><op:operator pos:line="288" pos:column="20">.</op:operator><name pos:line="288" pos:column="21">state</name></name> <op:operator pos:line="288" pos:column="27">==</op:operator> <name pos:line="288" pos:column="30">SCE_MARKDOWN_HEADER1</name> <op:operator pos:line="288" pos:column="51">||</op:operator> <name><name pos:line="288" pos:column="54">sc</name><op:operator pos:line="288" pos:column="56">.</op:operator><name pos:line="288" pos:column="57">state</name></name> <op:operator pos:line="288" pos:column="63">==</op:operator> <name pos:line="288" pos:column="66">SCE_MARKDOWN_HEADER2</name> <op:operator pos:line="288" pos:column="87">||</op:operator>
                <name><name pos:line="289" pos:column="17">sc</name><op:operator pos:line="289" pos:column="19">.</op:operator><name pos:line="289" pos:column="20">state</name></name> <op:operator pos:line="289" pos:column="26">==</op:operator> <name pos:line="289" pos:column="29">SCE_MARKDOWN_HEADER3</name> <op:operator pos:line="289" pos:column="50">||</op:operator> <name><name pos:line="289" pos:column="53">sc</name><op:operator pos:line="289" pos:column="55">.</op:operator><name pos:line="289" pos:column="56">state</name></name> <op:operator pos:line="289" pos:column="62">==</op:operator> <name pos:line="289" pos:column="65">SCE_MARKDOWN_HEADER4</name> <op:operator pos:line="289" pos:column="86">||</op:operator>
                <name><name pos:line="290" pos:column="17">sc</name><op:operator pos:line="290" pos:column="19">.</op:operator><name pos:line="290" pos:column="20">state</name></name> <op:operator pos:line="290" pos:column="26">==</op:operator> <name pos:line="290" pos:column="29">SCE_MARKDOWN_HEADER5</name> <op:operator pos:line="290" pos:column="50">||</op:operator> <name><name pos:line="290" pos:column="53">sc</name><op:operator pos:line="290" pos:column="55">.</op:operator><name pos:line="290" pos:column="56">state</name></name> <op:operator pos:line="290" pos:column="62">==</op:operator> <name pos:line="290" pos:column="65">SCE_MARKDOWN_HEADER6</name></expr>)</condition><then pos:line="290" pos:column="86"> <block pos:line="290" pos:column="87">{
            <if pos:line="291" pos:column="13">if <condition pos:line="291" pos:column="16">(<expr><call><name pos:line="291" pos:column="17">IsNewline</name><argument_list pos:line="291" pos:column="26">(<argument><expr><name><name pos:line="291" pos:column="27">sc</name><op:operator pos:line="291" pos:column="29">.</op:operator><name pos:line="291" pos:column="30">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="291" pos:column="34">
                <expr_stmt><expr><call><name><name pos:line="292" pos:column="17">sc</name><op:operator pos:line="292" pos:column="19">.</op:operator><name pos:line="292" pos:column="20">SetState</name></name><argument_list pos:line="292" pos:column="28">(<argument><expr><name pos:line="292" pos:column="29">SCE_MARKDOWN_LINE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

        <comment type="line" pos:line="295" pos:column="9">// New state only within the initial whitespace</comment>
        <if pos:line="296" pos:column="9">if <condition pos:line="296" pos:column="12">(<expr><name><name pos:line="296" pos:column="13">sc</name><op:operator pos:line="296" pos:column="15">.</op:operator><name pos:line="296" pos:column="16">state</name></name> <op:operator pos:line="296" pos:column="22">==</op:operator> <name pos:line="296" pos:column="25">SCE_MARKDOWN_PRECHAR</name></expr>)</condition><then pos:line="296" pos:column="46"> <block pos:line="296" pos:column="47">{
            <comment type="line" pos:line="297" pos:column="13">// Blockquote</comment>
            <if pos:line="298" pos:column="13">if <condition pos:line="298" pos:column="16">(<expr><name><name pos:line="298" pos:column="17">sc</name><op:operator pos:line="298" pos:column="19">.</op:operator><name pos:line="298" pos:column="20">ch</name></name> <op:operator pos:line="298" pos:column="23">==</op:operator> <lit:literal type="char" pos:line="298" pos:column="26">'&gt;'</lit:literal> <op:operator pos:line="298" pos:column="30">&amp;&amp;</op:operator> <name pos:line="298" pos:column="33">precharCount</name> <op:operator pos:line="298" pos:column="46">&lt;</op:operator> <lit:literal type="number" pos:line="298" pos:column="48">5</lit:literal></expr>)</condition><then pos:line="298" pos:column="50">
                <expr_stmt><expr><call><name><name pos:line="299" pos:column="17">sc</name><op:operator pos:line="299" pos:column="19">.</op:operator><name pos:line="299" pos:column="20">SetState</name></name><argument_list pos:line="299" pos:column="28">(<argument><expr><name pos:line="299" pos:column="29">SCE_MARKDOWN_BLOCKQUOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <comment type="block" pos:line="300" pos:column="13">/*
            // Begin of code block
            else if (!HasPrevLineContent(sc) &amp;&amp; (sc.chPrev == '\t' || precharCount &gt;= 4))
                sc.SetState(SCE_MARKDOWN_CODEBK);
            */</comment>
            <comment type="line" pos:line="305" pos:column="13">// HRule - Total of three or more hyphens, asterisks, or underscores</comment>
            <comment type="line" pos:line="306" pos:column="13">// on a line by themselves</comment>
            <else pos:line="307" pos:column="13">else <if pos:line="307" pos:column="18">if <condition pos:line="307" pos:column="21">(<expr><op:operator pos:line="307" pos:column="22">(</op:operator><name><name pos:line="307" pos:column="23">sc</name><op:operator pos:line="307" pos:column="25">.</op:operator><name pos:line="307" pos:column="26">ch</name></name> <op:operator pos:line="307" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="307" pos:column="32">'-'</lit:literal> <op:operator pos:line="307" pos:column="36">||</op:operator> <name><name pos:line="307" pos:column="39">sc</name><op:operator pos:line="307" pos:column="41">.</op:operator><name pos:line="307" pos:column="42">ch</name></name> <op:operator pos:line="307" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="307" pos:column="48">'*'</lit:literal> <op:operator pos:line="307" pos:column="52">||</op:operator> <name><name pos:line="307" pos:column="55">sc</name><op:operator pos:line="307" pos:column="57">.</op:operator><name pos:line="307" pos:column="58">ch</name></name> <op:operator pos:line="307" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="307" pos:column="64">'_'</lit:literal><op:operator pos:line="307" pos:column="67">)</op:operator> <op:operator pos:line="307" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="307" pos:column="72">IsValidHrule</name><argument_list pos:line="307" pos:column="84">(<argument><expr><name pos:line="307" pos:column="85">endPos</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="93">sc</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="307" pos:column="97">
                <empty_stmt pos:line="308" pos:column="17">;</empty_stmt></then>
            <comment type="line" pos:line="309" pos:column="13">// Unordered list</comment>
            <else pos:line="310" pos:column="13">else <if pos:line="310" pos:column="18">if <condition pos:line="310" pos:column="21">(<expr><op:operator pos:line="310" pos:column="22">(</op:operator><name><name pos:line="310" pos:column="23">sc</name><op:operator pos:line="310" pos:column="25">.</op:operator><name pos:line="310" pos:column="26">ch</name></name> <op:operator pos:line="310" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="310" pos:column="32">'-'</lit:literal> <op:operator pos:line="310" pos:column="36">||</op:operator> <name><name pos:line="310" pos:column="39">sc</name><op:operator pos:line="310" pos:column="41">.</op:operator><name pos:line="310" pos:column="42">ch</name></name> <op:operator pos:line="310" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="310" pos:column="48">'*'</lit:literal> <op:operator pos:line="310" pos:column="52">||</op:operator> <name><name pos:line="310" pos:column="55">sc</name><op:operator pos:line="310" pos:column="57">.</op:operator><name pos:line="310" pos:column="58">ch</name></name> <op:operator pos:line="310" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="310" pos:column="64">'+'</lit:literal><op:operator pos:line="310" pos:column="67">)</op:operator> <op:operator pos:line="310" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="310" pos:column="72">IsASpaceOrTab</name><argument_list pos:line="310" pos:column="85">(<argument><expr><name><name pos:line="310" pos:column="86">sc</name><op:operator pos:line="310" pos:column="88">.</op:operator><name pos:line="310" pos:column="89">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="310" pos:column="97"> <block pos:line="310" pos:column="98">{
                <expr_stmt><expr><call><name><name pos:line="311" pos:column="17">sc</name><op:operator pos:line="311" pos:column="19">.</op:operator><name pos:line="311" pos:column="20">SetState</name></name><argument_list pos:line="311" pos:column="28">(<argument><expr><name pos:line="311" pos:column="29">SCE_MARKDOWN_ULIST_ITEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="312" pos:column="17">sc</name><op:operator pos:line="312" pos:column="19">.</op:operator><name pos:line="312" pos:column="20">ForwardSetState</name></name><argument_list pos:line="312" pos:column="35">(<argument><expr><name pos:line="312" pos:column="36">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <comment type="line" pos:line="314" pos:column="13">// Ordered list</comment>
            <else pos:line="315" pos:column="13">else <if pos:line="315" pos:column="18">if <condition pos:line="315" pos:column="21">(<expr><call><name pos:line="315" pos:column="22">IsADigit</name><argument_list pos:line="315" pos:column="30">(<argument><expr><name><name pos:line="315" pos:column="31">sc</name><op:operator pos:line="315" pos:column="33">.</op:operator><name pos:line="315" pos:column="34">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="315" pos:column="38"> <block pos:line="315" pos:column="39">{
                <decl_stmt><decl><type><name pos:line="316" pos:column="17">int</name></type> <name pos:line="316" pos:column="21">digitCount</name> <init pos:line="316" pos:column="32">= <expr><lit:literal type="number" pos:line="316" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
                <while pos:line="317" pos:column="17">while <condition pos:line="317" pos:column="23">(<expr><call><name pos:line="317" pos:column="24">IsADigit</name><argument_list pos:line="317" pos:column="32">(<argument><expr><call><name><name pos:line="317" pos:column="33">sc</name><op:operator pos:line="317" pos:column="35">.</op:operator><name pos:line="317" pos:column="36">GetRelative</name></name><argument_list pos:line="317" pos:column="47">(<argument><expr><op:operator pos:line="317" pos:column="48">++</op:operator><name pos:line="317" pos:column="50">digitCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                    <empty_stmt pos:line="318" pos:column="21">;</empty_stmt></while>
                <if pos:line="319" pos:column="17">if <condition pos:line="319" pos:column="20">(<expr><call><name><name pos:line="319" pos:column="21">sc</name><op:operator pos:line="319" pos:column="23">.</op:operator><name pos:line="319" pos:column="24">GetRelative</name></name><argument_list pos:line="319" pos:column="35">(<argument><expr><name pos:line="319" pos:column="36">digitCount</name></expr></argument>)</argument_list></call> <op:operator pos:line="319" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="319" pos:column="51">'.'</lit:literal> <op:operator pos:line="319" pos:column="55">&amp;&amp;</op:operator>
                        <call><name pos:line="320" pos:column="25">IsASpaceOrTab</name><argument_list pos:line="320" pos:column="38">(<argument><expr><call><name><name pos:line="320" pos:column="39">sc</name><op:operator pos:line="320" pos:column="41">.</op:operator><name pos:line="320" pos:column="42">GetRelative</name></name><argument_list pos:line="320" pos:column="53">(<argument><expr><name pos:line="320" pos:column="54">digitCount</name> <op:operator pos:line="320" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="320" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="320" pos:column="71"> <block pos:line="320" pos:column="72">{
                    <expr_stmt><expr><call><name><name pos:line="321" pos:column="21">sc</name><op:operator pos:line="321" pos:column="23">.</op:operator><name pos:line="321" pos:column="24">SetState</name></name><argument_list pos:line="321" pos:column="32">(<argument><expr><name pos:line="321" pos:column="33">SCE_MARKDOWN_OLIST_ITEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="322" pos:column="21">sc</name><op:operator pos:line="322" pos:column="23">.</op:operator><name pos:line="322" pos:column="24">Forward</name></name><argument_list pos:line="322" pos:column="31">(<argument><expr><name pos:line="322" pos:column="32">digitCount</name> <op:operator pos:line="322" pos:column="43">+</op:operator> <lit:literal type="number" pos:line="322" pos:column="45">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="323" pos:column="21">sc</name><op:operator pos:line="323" pos:column="23">.</op:operator><name pos:line="323" pos:column="24">SetState</name></name><argument_list pos:line="323" pos:column="32">(<argument><expr><name pos:line="323" pos:column="33">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <comment type="line" pos:line="326" pos:column="13">// Alternate Ordered list</comment>
            <else pos:line="327" pos:column="13">else <if pos:line="327" pos:column="18">if <condition pos:line="327" pos:column="21">(<expr><name><name pos:line="327" pos:column="22">sc</name><op:operator pos:line="327" pos:column="24">.</op:operator><name pos:line="327" pos:column="25">ch</name></name> <op:operator pos:line="327" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="31">'#'</lit:literal> <op:operator pos:line="327" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="327" pos:column="38">sc</name><op:operator pos:line="327" pos:column="40">.</op:operator><name pos:line="327" pos:column="41">chNext</name></name> <op:operator pos:line="327" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="327" pos:column="51">'.'</lit:literal> <op:operator pos:line="327" pos:column="55">&amp;&amp;</op:operator> <call><name pos:line="327" pos:column="58">IsASpaceOrTab</name><argument_list pos:line="327" pos:column="71">(<argument><expr><call><name><name pos:line="327" pos:column="72">sc</name><op:operator pos:line="327" pos:column="74">.</op:operator><name pos:line="327" pos:column="75">GetRelative</name></name><argument_list pos:line="327" pos:column="86">(<argument><expr><lit:literal type="number" pos:line="327" pos:column="87">2</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="327" pos:column="91"> <block pos:line="327" pos:column="92">{
                <expr_stmt><expr><call><name><name pos:line="328" pos:column="17">sc</name><op:operator pos:line="328" pos:column="19">.</op:operator><name pos:line="328" pos:column="20">SetState</name></name><argument_list pos:line="328" pos:column="28">(<argument><expr><name pos:line="328" pos:column="29">SCE_MARKDOWN_OLIST_ITEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="329" pos:column="17">sc</name><op:operator pos:line="329" pos:column="19">.</op:operator><name pos:line="329" pos:column="20">Forward</name></name><argument_list pos:line="329" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="329" pos:column="28">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="330" pos:column="17">sc</name><op:operator pos:line="330" pos:column="19">.</op:operator><name pos:line="330" pos:column="20">SetState</name></name><argument_list pos:line="330" pos:column="28">(<argument><expr><name pos:line="330" pos:column="29">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="332" pos:column="13">else <if pos:line="332" pos:column="18">if <condition pos:line="332" pos:column="21">(<expr><name><name pos:line="332" pos:column="22">sc</name><op:operator pos:line="332" pos:column="24">.</op:operator><name pos:line="332" pos:column="25">ch</name></name> <op:operator pos:line="332" pos:column="28">!=</op:operator> <lit:literal type="char" pos:line="332" pos:column="31">' '</lit:literal> <op:operator pos:line="332" pos:column="35">||</op:operator> <name pos:line="332" pos:column="38">precharCount</name> <op:operator pos:line="332" pos:column="51">&gt;</op:operator> <lit:literal type="number" pos:line="332" pos:column="53">2</lit:literal></expr>)</condition><then pos:line="332" pos:column="55">
                <expr_stmt><expr><call><name><name pos:line="333" pos:column="17">sc</name><op:operator pos:line="333" pos:column="19">.</op:operator><name pos:line="333" pos:column="20">SetState</name></name><argument_list pos:line="333" pos:column="28">(<argument><expr><name pos:line="333" pos:column="29">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="334" pos:column="13">else
                <expr_stmt><expr><op:operator pos:line="335" pos:column="17">++</op:operator><name pos:line="335" pos:column="19">precharCount</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></then></if>

        <comment type="line" pos:line="338" pos:column="9">// New state anywhere in doc</comment>
        <if pos:line="339" pos:column="9">if <condition pos:line="339" pos:column="12">(<expr><name><name pos:line="339" pos:column="13">sc</name><op:operator pos:line="339" pos:column="15">.</op:operator><name pos:line="339" pos:column="16">state</name></name> <op:operator pos:line="339" pos:column="22">==</op:operator> <name pos:line="339" pos:column="25">SCE_MARKDOWN_DEFAULT</name></expr>)</condition><then pos:line="339" pos:column="46"> <block pos:line="339" pos:column="47">{
            <if pos:line="340" pos:column="13">if <condition pos:line="340" pos:column="16">(<expr><name><name pos:line="340" pos:column="17">sc</name><op:operator pos:line="340" pos:column="19">.</op:operator><name pos:line="340" pos:column="20">atLineStart</name></name> <op:operator pos:line="340" pos:column="32">&amp;&amp;</op:operator> <name><name pos:line="340" pos:column="35">sc</name><op:operator pos:line="340" pos:column="37">.</op:operator><name pos:line="340" pos:column="38">ch</name></name> <op:operator pos:line="340" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="340" pos:column="44">'#'</lit:literal></expr>)</condition><then pos:line="340" pos:column="48"> <block pos:line="340" pos:column="49">{
                <expr_stmt><expr><call><name><name pos:line="341" pos:column="17">sc</name><op:operator pos:line="341" pos:column="19">.</op:operator><name pos:line="341" pos:column="20">SetState</name></name><argument_list pos:line="341" pos:column="28">(<argument><expr><name pos:line="341" pos:column="29">SCE_MARKDOWN_LINE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name pos:line="342" pos:column="17">freezeCursor</name> <op:operator pos:line="342" pos:column="30">=</op:operator> <lit:literal type="boolean" pos:line="342" pos:column="32">true</lit:literal></expr>;</expr_stmt>
            }</block></then></if>
            <comment type="line" pos:line="344" pos:column="13">// Links and Images</comment>
            <if pos:line="345" pos:column="13">if <condition pos:line="345" pos:column="16">(<expr><call><name><name pos:line="345" pos:column="17">sc</name><op:operator pos:line="345" pos:column="19">.</op:operator><name pos:line="345" pos:column="20">Match</name></name><argument_list pos:line="345" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="345" pos:column="26">"!["</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="345" pos:column="32">||</op:operator> <name><name pos:line="345" pos:column="35">sc</name><op:operator pos:line="345" pos:column="37">.</op:operator><name pos:line="345" pos:column="38">ch</name></name> <op:operator pos:line="345" pos:column="41">==</op:operator> <lit:literal type="char" pos:line="345" pos:column="44">'['</lit:literal></expr>)</condition><then pos:line="345" pos:column="48"> <block pos:line="345" pos:column="49">{
                <decl_stmt><decl><type><name pos:line="346" pos:column="17">int</name></type> <name pos:line="346" pos:column="21">i</name> <init pos:line="346" pos:column="23">= <expr><lit:literal type="number" pos:line="346" pos:column="25">0</lit:literal></expr></init><op:operator pos:line="346" pos:column="26">,</op:operator> <name pos:line="346" pos:column="28">j</name> <init pos:line="346" pos:column="30">= <expr><lit:literal type="number" pos:line="346" pos:column="32">0</lit:literal></expr></init><op:operator pos:line="346" pos:column="33">,</op:operator> <name pos:line="346" pos:column="35">k</name> <init pos:line="346" pos:column="37">= <expr><lit:literal type="number" pos:line="346" pos:column="39">0</lit:literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name pos:line="347" pos:column="17">int</name></type> <name pos:line="347" pos:column="21">len</name> <init pos:line="347" pos:column="25">= <expr><name pos:line="347" pos:column="27">endPos</name> <op:operator pos:line="347" pos:column="34">-</op:operator> <name><name pos:line="347" pos:column="36">sc</name><op:operator pos:line="347" pos:column="38">.</op:operator><name pos:line="347" pos:column="39">currentPos</name></name></expr></init></decl>;</decl_stmt>
                <while pos:line="348" pos:column="17">while <condition pos:line="348" pos:column="23">(<expr><name pos:line="348" pos:column="24">i</name> <op:operator pos:line="348" pos:column="26">&lt;</op:operator> <name pos:line="348" pos:column="28">len</name> <op:operator pos:line="348" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="348" pos:column="35">(</op:operator><call><name><name pos:line="348" pos:column="36">sc</name><op:operator pos:line="348" pos:column="38">.</op:operator><name pos:line="348" pos:column="39">GetRelative</name></name><argument_list pos:line="348" pos:column="50">(<argument><expr><op:operator pos:line="348" pos:column="51">++</op:operator><name pos:line="348" pos:column="53">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="348" pos:column="56">!=</op:operator> <lit:literal type="char" pos:line="348" pos:column="59">']'</lit:literal> <op:operator pos:line="348" pos:column="63">||</op:operator> <call><name><name pos:line="348" pos:column="66">sc</name><op:operator pos:line="348" pos:column="68">.</op:operator><name pos:line="348" pos:column="69">GetRelative</name></name><argument_list pos:line="348" pos:column="80">(<argument><expr><name pos:line="348" pos:column="81">i</name> <op:operator pos:line="348" pos:column="83">-</op:operator> <lit:literal type="number" pos:line="348" pos:column="85">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="348" pos:column="88">==</op:operator> <lit:literal type="char" pos:line="348" pos:column="91">'\\'</lit:literal><op:operator pos:line="348" pos:column="95">)</op:operator></expr>)</condition>
                    <empty_stmt pos:line="349" pos:column="21">;</empty_stmt></while>
                <if pos:line="350" pos:column="17">if <condition pos:line="350" pos:column="20">(<expr><call><name><name pos:line="350" pos:column="21">sc</name><op:operator pos:line="350" pos:column="23">.</op:operator><name pos:line="350" pos:column="24">GetRelative</name></name><argument_list pos:line="350" pos:column="35">(<argument><expr><name pos:line="350" pos:column="36">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="350" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="350" pos:column="42">']'</lit:literal></expr>)</condition><then pos:line="350" pos:column="46"> <block pos:line="350" pos:column="47">{
                    <expr_stmt><expr><name pos:line="351" pos:column="21">j</name> <op:operator pos:line="351" pos:column="23">=</op:operator> <name pos:line="351" pos:column="25">i</name></expr>;</expr_stmt>
                    <if pos:line="352" pos:column="21">if <condition pos:line="352" pos:column="24">(<expr><call><name><name pos:line="352" pos:column="25">sc</name><op:operator pos:line="352" pos:column="27">.</op:operator><name pos:line="352" pos:column="28">GetRelative</name></name><argument_list pos:line="352" pos:column="39">(<argument><expr><op:operator pos:line="352" pos:column="40">++</op:operator><name pos:line="352" pos:column="42">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="352" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="352" pos:column="48">'('</lit:literal></expr>)</condition><then pos:line="352" pos:column="52"> <block pos:line="352" pos:column="53">{
                        <while pos:line="353" pos:column="25">while <condition pos:line="353" pos:column="31">(<expr><name pos:line="353" pos:column="32">i</name> <op:operator pos:line="353" pos:column="34">&lt;</op:operator> <name pos:line="353" pos:column="36">len</name> <op:operator pos:line="353" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="353" pos:column="43">(</op:operator><call><name><name pos:line="353" pos:column="44">sc</name><op:operator pos:line="353" pos:column="46">.</op:operator><name pos:line="353" pos:column="47">GetRelative</name></name><argument_list pos:line="353" pos:column="58">(<argument><expr><op:operator pos:line="353" pos:column="59">++</op:operator><name pos:line="353" pos:column="61">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="353" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="353" pos:column="67">')'</lit:literal> <op:operator pos:line="353" pos:column="71">||</op:operator> <call><name><name pos:line="353" pos:column="74">sc</name><op:operator pos:line="353" pos:column="76">.</op:operator><name pos:line="353" pos:column="77">GetRelative</name></name><argument_list pos:line="353" pos:column="88">(<argument><expr><name pos:line="353" pos:column="89">i</name> <op:operator pos:line="353" pos:column="91">-</op:operator> <lit:literal type="number" pos:line="353" pos:column="93">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="353" pos:column="96">==</op:operator> <lit:literal type="char" pos:line="353" pos:column="99">'\\'</lit:literal><op:operator pos:line="353" pos:column="103">)</op:operator></expr>)</condition>
                            <empty_stmt pos:line="354" pos:column="29">;</empty_stmt></while>
                        <if pos:line="355" pos:column="25">if <condition pos:line="355" pos:column="28">(<expr><call><name><name pos:line="355" pos:column="29">sc</name><op:operator pos:line="355" pos:column="31">.</op:operator><name pos:line="355" pos:column="32">GetRelative</name></name><argument_list pos:line="355" pos:column="43">(<argument><expr><name pos:line="355" pos:column="44">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="355" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="355" pos:column="50">')'</lit:literal></expr>)</condition><then pos:line="355" pos:column="54">
                            <expr_stmt><expr><name pos:line="356" pos:column="29">k</name> <op:operator pos:line="356" pos:column="31">=</op:operator> <name pos:line="356" pos:column="33">i</name></expr>;</expr_stmt></then></if>
                    }</block></then>
                    <else pos:line="358" pos:column="21">else <if pos:line="358" pos:column="26">if <condition pos:line="358" pos:column="29">(<expr><call><name><name pos:line="358" pos:column="30">sc</name><op:operator pos:line="358" pos:column="32">.</op:operator><name pos:line="358" pos:column="33">GetRelative</name></name><argument_list pos:line="358" pos:column="44">(<argument><expr><name pos:line="358" pos:column="45">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="358" pos:column="48">==</op:operator> <lit:literal type="char" pos:line="358" pos:column="51">'['</lit:literal> <op:operator pos:line="358" pos:column="55">||</op:operator> <call><name><name pos:line="358" pos:column="58">sc</name><op:operator pos:line="358" pos:column="60">.</op:operator><name pos:line="358" pos:column="61">GetRelative</name></name><argument_list pos:line="358" pos:column="72">(<argument><expr><op:operator pos:line="358" pos:column="73">++</op:operator><name pos:line="358" pos:column="75">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="358" pos:column="78">==</op:operator> <lit:literal type="char" pos:line="358" pos:column="81">'['</lit:literal></expr>)</condition><then pos:line="358" pos:column="85"> <block pos:line="358" pos:column="86">{
                        <while pos:line="359" pos:column="25">while <condition pos:line="359" pos:column="31">(<expr><name pos:line="359" pos:column="32">i</name> <op:operator pos:line="359" pos:column="34">&lt;</op:operator> <name pos:line="359" pos:column="36">len</name> <op:operator pos:line="359" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="359" pos:column="43">(</op:operator><call><name><name pos:line="359" pos:column="44">sc</name><op:operator pos:line="359" pos:column="46">.</op:operator><name pos:line="359" pos:column="47">GetRelative</name></name><argument_list pos:line="359" pos:column="58">(<argument><expr><op:operator pos:line="359" pos:column="59">++</op:operator><name pos:line="359" pos:column="61">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="359" pos:column="64">!=</op:operator> <lit:literal type="char" pos:line="359" pos:column="67">']'</lit:literal> <op:operator pos:line="359" pos:column="71">||</op:operator> <call><name><name pos:line="359" pos:column="74">sc</name><op:operator pos:line="359" pos:column="76">.</op:operator><name pos:line="359" pos:column="77">GetRelative</name></name><argument_list pos:line="359" pos:column="88">(<argument><expr><name pos:line="359" pos:column="89">i</name> <op:operator pos:line="359" pos:column="91">-</op:operator> <lit:literal type="number" pos:line="359" pos:column="93">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="359" pos:column="96">==</op:operator> <lit:literal type="char" pos:line="359" pos:column="99">'\\'</lit:literal><op:operator pos:line="359" pos:column="103">)</op:operator></expr>)</condition>
                            <empty_stmt pos:line="360" pos:column="29">;</empty_stmt></while>
                        <if pos:line="361" pos:column="25">if <condition pos:line="361" pos:column="28">(<expr><call><name><name pos:line="361" pos:column="29">sc</name><op:operator pos:line="361" pos:column="31">.</op:operator><name pos:line="361" pos:column="32">GetRelative</name></name><argument_list pos:line="361" pos:column="43">(<argument><expr><name pos:line="361" pos:column="44">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="361" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="361" pos:column="50">']'</lit:literal></expr>)</condition><then pos:line="361" pos:column="54">
                            <expr_stmt><expr><name pos:line="362" pos:column="29">k</name> <op:operator pos:line="362" pos:column="31">=</op:operator> <name pos:line="362" pos:column="33">i</name></expr>;</expr_stmt></then></if>
                    }</block></then></if></else></if>
                }</block></then></if>
                <comment type="line" pos:line="365" pos:column="17">// At least a link text</comment>
                <if pos:line="366" pos:column="17">if <condition pos:line="366" pos:column="20">(<expr><name pos:line="366" pos:column="21">j</name></expr>)</condition><then pos:line="366" pos:column="23"> <block pos:line="366" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="367" pos:column="21">sc</name><op:operator pos:line="367" pos:column="23">.</op:operator><name pos:line="367" pos:column="24">SetState</name></name><argument_list pos:line="367" pos:column="32">(<argument><expr><name pos:line="367" pos:column="33">SCE_MARKDOWN_LINK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name pos:line="368" pos:column="21">sc</name><op:operator pos:line="368" pos:column="23">.</op:operator><name pos:line="368" pos:column="24">Forward</name></name><argument_list pos:line="368" pos:column="31">(<argument><expr><name pos:line="368" pos:column="32">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:line="369" pos:column="21">// Also has a URL or reference portion</comment>
                    <if pos:line="370" pos:column="21">if <condition pos:line="370" pos:column="24">(<expr><name pos:line="370" pos:column="25">k</name></expr>)</condition><then pos:line="370" pos:column="27">
                        <expr_stmt><expr><call><name><name pos:line="371" pos:column="25">sc</name><op:operator pos:line="371" pos:column="27">.</op:operator><name pos:line="371" pos:column="28">Forward</name></name><argument_list pos:line="371" pos:column="35">(<argument><expr><name pos:line="371" pos:column="36">k</name> <op:operator pos:line="371" pos:column="38">-</op:operator> <name pos:line="371" pos:column="40">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><call><name><name pos:line="372" pos:column="21">sc</name><op:operator pos:line="372" pos:column="23">.</op:operator><name pos:line="372" pos:column="24">ForwardSetState</name></name><argument_list pos:line="372" pos:column="39">(<argument><expr><name pos:line="372" pos:column="40">SCE_MARKDOWN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <comment type="line" pos:line="375" pos:column="13">// Code - also a special case for alternate inside spacing</comment>
            <if pos:line="376" pos:column="13">if <condition pos:line="376" pos:column="16">(<expr><call><name><name pos:line="376" pos:column="17">sc</name><op:operator pos:line="376" pos:column="19">.</op:operator><name pos:line="376" pos:column="20">Match</name></name><argument_list pos:line="376" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="376" pos:column="26">"``"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="376" pos:column="32">&amp;&amp;</op:operator> <call><name><name pos:line="376" pos:column="35">sc</name><op:operator pos:line="376" pos:column="37">.</op:operator><name pos:line="376" pos:column="38">GetRelative</name></name><argument_list pos:line="376" pos:column="49">(<argument><expr><lit:literal type="number" pos:line="376" pos:column="50">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="376" pos:column="53">!=</op:operator> <lit:literal type="char" pos:line="376" pos:column="56">' '</lit:literal></expr>)</condition><then pos:line="376" pos:column="60"> <block pos:line="376" pos:column="61">{
                <expr_stmt><expr><call><name><name pos:line="377" pos:column="17">sc</name><op:operator pos:line="377" pos:column="19">.</op:operator><name pos:line="377" pos:column="20">SetState</name></name><argument_list pos:line="377" pos:column="28">(<argument><expr><name pos:line="377" pos:column="29">SCE_MARKDOWN_CODE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="378" pos:column="17">sc</name><op:operator pos:line="378" pos:column="19">.</op:operator><name pos:line="378" pos:column="20">Forward</name></name><argument_list pos:line="378" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else pos:line="380" pos:column="13">else <if pos:line="380" pos:column="18">if <condition pos:line="380" pos:column="21">(<expr><name><name pos:line="380" pos:column="22">sc</name><op:operator pos:line="380" pos:column="24">.</op:operator><name pos:line="380" pos:column="25">ch</name></name> <op:operator pos:line="380" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="380" pos:column="31">'`'</lit:literal> <op:operator pos:line="380" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="380" pos:column="38">sc</name><op:operator pos:line="380" pos:column="40">.</op:operator><name pos:line="380" pos:column="41">chNext</name></name> <op:operator pos:line="380" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="380" pos:column="51">' '</lit:literal></expr>)</condition><then pos:line="380" pos:column="55"> <block pos:line="380" pos:column="56">{
                <expr_stmt><expr><call><name><name pos:line="381" pos:column="17">sc</name><op:operator pos:line="381" pos:column="19">.</op:operator><name pos:line="381" pos:column="20">SetState</name></name><argument_list pos:line="381" pos:column="28">(<argument><expr><name pos:line="381" pos:column="29">SCE_MARKDOWN_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <comment type="line" pos:line="383" pos:column="13">// Strong</comment>
            <else pos:line="384" pos:column="13">else <if pos:line="384" pos:column="18">if <condition pos:line="384" pos:column="21">(<expr><call><name><name pos:line="384" pos:column="22">sc</name><op:operator pos:line="384" pos:column="24">.</op:operator><name pos:line="384" pos:column="25">Match</name></name><argument_list pos:line="384" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="384" pos:column="31">"**"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="384" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="384" pos:column="40">sc</name><op:operator pos:line="384" pos:column="42">.</op:operator><name pos:line="384" pos:column="43">GetRelative</name></name><argument_list pos:line="384" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="384" pos:column="55">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="384" pos:column="58">!=</op:operator> <lit:literal type="char" pos:line="384" pos:column="61">' '</lit:literal></expr>)</condition><then pos:line="384" pos:column="65"> <block pos:line="384" pos:column="66">{
                <expr_stmt><expr><call><name><name pos:line="385" pos:column="17">sc</name><op:operator pos:line="385" pos:column="19">.</op:operator><name pos:line="385" pos:column="20">SetState</name></name><argument_list pos:line="385" pos:column="28">(<argument><expr><name pos:line="385" pos:column="29">SCE_MARKDOWN_STRONG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="386" pos:column="17">sc</name><op:operator pos:line="386" pos:column="19">.</op:operator><name pos:line="386" pos:column="20">Forward</name></name><argument_list pos:line="386" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
           }</block></then>
            <else pos:line="388" pos:column="13">else <if pos:line="388" pos:column="18">if <condition pos:line="388" pos:column="21">(<expr><call><name><name pos:line="388" pos:column="22">sc</name><op:operator pos:line="388" pos:column="24">.</op:operator><name pos:line="388" pos:column="25">Match</name></name><argument_list pos:line="388" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="388" pos:column="31">"__"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="388" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="388" pos:column="40">sc</name><op:operator pos:line="388" pos:column="42">.</op:operator><name pos:line="388" pos:column="43">GetRelative</name></name><argument_list pos:line="388" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="388" pos:column="55">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="388" pos:column="58">!=</op:operator> <lit:literal type="char" pos:line="388" pos:column="61">' '</lit:literal></expr>)</condition><then pos:line="388" pos:column="65"> <block pos:line="388" pos:column="66">{
                <expr_stmt><expr><call><name><name pos:line="389" pos:column="17">sc</name><op:operator pos:line="389" pos:column="19">.</op:operator><name pos:line="389" pos:column="20">SetState</name></name><argument_list pos:line="389" pos:column="28">(<argument><expr><name pos:line="389" pos:column="29">SCE_MARKDOWN_STRONG2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="390" pos:column="17">sc</name><op:operator pos:line="390" pos:column="19">.</op:operator><name pos:line="390" pos:column="20">Forward</name></name><argument_list pos:line="390" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <comment type="line" pos:line="392" pos:column="13">// Emphasis</comment>
            <else pos:line="393" pos:column="13">else <if pos:line="393" pos:column="18">if <condition pos:line="393" pos:column="21">(<expr><name><name pos:line="393" pos:column="22">sc</name><op:operator pos:line="393" pos:column="24">.</op:operator><name pos:line="393" pos:column="25">ch</name></name> <op:operator pos:line="393" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="393" pos:column="31">'*'</lit:literal> <op:operator pos:line="393" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="393" pos:column="38">sc</name><op:operator pos:line="393" pos:column="40">.</op:operator><name pos:line="393" pos:column="41">chNext</name></name> <op:operator pos:line="393" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="393" pos:column="51">' '</lit:literal></expr>)</condition><then pos:line="393" pos:column="55">
                <expr_stmt><expr><call><name><name pos:line="394" pos:column="17">sc</name><op:operator pos:line="394" pos:column="19">.</op:operator><name pos:line="394" pos:column="20">SetState</name></name><argument_list pos:line="394" pos:column="28">(<argument><expr><name pos:line="394" pos:column="29">SCE_MARKDOWN_EM1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else pos:line="395" pos:column="13">else <if pos:line="395" pos:column="18">if <condition pos:line="395" pos:column="21">(<expr><name><name pos:line="395" pos:column="22">sc</name><op:operator pos:line="395" pos:column="24">.</op:operator><name pos:line="395" pos:column="25">ch</name></name> <op:operator pos:line="395" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="395" pos:column="31">'_'</lit:literal> <op:operator pos:line="395" pos:column="35">&amp;&amp;</op:operator> <name><name pos:line="395" pos:column="38">sc</name><op:operator pos:line="395" pos:column="40">.</op:operator><name pos:line="395" pos:column="41">chNext</name></name> <op:operator pos:line="395" pos:column="48">!=</op:operator> <lit:literal type="char" pos:line="395" pos:column="51">' '</lit:literal></expr>)</condition><then pos:line="395" pos:column="55">
                <expr_stmt><expr><call><name><name pos:line="396" pos:column="17">sc</name><op:operator pos:line="396" pos:column="19">.</op:operator><name pos:line="396" pos:column="20">SetState</name></name><argument_list pos:line="396" pos:column="28">(<argument><expr><name pos:line="396" pos:column="29">SCE_MARKDOWN_EM2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <comment type="line" pos:line="397" pos:column="13">// Strikeout</comment>
            <else pos:line="398" pos:column="13">else <if pos:line="398" pos:column="18">if <condition pos:line="398" pos:column="21">(<expr><call><name><name pos:line="398" pos:column="22">sc</name><op:operator pos:line="398" pos:column="24">.</op:operator><name pos:line="398" pos:column="25">Match</name></name><argument_list pos:line="398" pos:column="30">(<argument><expr><lit:literal type="string" pos:line="398" pos:column="31">"~~"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="398" pos:column="37">&amp;&amp;</op:operator> <call><name><name pos:line="398" pos:column="40">sc</name><op:operator pos:line="398" pos:column="42">.</op:operator><name pos:line="398" pos:column="43">GetRelative</name></name><argument_list pos:line="398" pos:column="54">(<argument><expr><lit:literal type="number" pos:line="398" pos:column="55">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="398" pos:column="58">!=</op:operator> <lit:literal type="char" pos:line="398" pos:column="61">' '</lit:literal></expr>)</condition><then pos:line="398" pos:column="65"> <block pos:line="398" pos:column="66">{
                <expr_stmt><expr><call><name><name pos:line="399" pos:column="17">sc</name><op:operator pos:line="399" pos:column="19">.</op:operator><name pos:line="399" pos:column="20">SetState</name></name><argument_list pos:line="399" pos:column="28">(<argument><expr><name pos:line="399" pos:column="29">SCE_MARKDOWN_STRIKEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="400" pos:column="17">sc</name><op:operator pos:line="400" pos:column="19">.</op:operator><name pos:line="400" pos:column="20">Forward</name></name><argument_list pos:line="400" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <comment type="line" pos:line="402" pos:column="13">// Beginning of line</comment>
            <else pos:line="403" pos:column="13">else <if pos:line="403" pos:column="18">if <condition pos:line="403" pos:column="21">(<expr><call><name pos:line="403" pos:column="22">IsNewline</name><argument_list pos:line="403" pos:column="31">(<argument><expr><name><name pos:line="403" pos:column="32">sc</name><op:operator pos:line="403" pos:column="34">.</op:operator><name pos:line="403" pos:column="35">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="403" pos:column="39">
                <expr_stmt><expr><call><name><name pos:line="404" pos:column="17">sc</name><op:operator pos:line="404" pos:column="19">.</op:operator><name pos:line="404" pos:column="20">SetState</name></name><argument_list pos:line="404" pos:column="28">(<argument><expr><name pos:line="404" pos:column="29">SCE_MARKDOWN_LINE_BEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
        }</block></then></if>
        <comment type="line" pos:line="406" pos:column="9">// Advance if not holding back the cursor for this iteration.</comment>
        <if pos:line="407" pos:column="9">if <condition pos:line="407" pos:column="12">(<expr><op:operator pos:line="407" pos:column="13">!</op:operator><name pos:line="407" pos:column="14">freezeCursor</name></expr>)</condition><then pos:line="407" pos:column="27">
            <expr_stmt><expr><call><name><name pos:line="408" pos:column="13">sc</name><op:operator pos:line="408" pos:column="15">.</op:operator><name pos:line="408" pos:column="16">Forward</name></name><argument_list pos:line="408" pos:column="23">()</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name pos:line="409" pos:column="9">freezeCursor</name> <op:operator pos:line="409" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="409" pos:column="24">false</lit:literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name><name pos:line="411" pos:column="5">sc</name><op:operator pos:line="411" pos:column="7">.</op:operator><name pos:line="411" pos:column="8">Complete</name></name><argument_list pos:line="411" pos:column="16">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name pos:line="414" pos:column="1">LexerModule</name></type> <name pos:line="414" pos:column="13">lmMarkdown</name><argument_list pos:line="414" pos:column="23">(<argument><expr><name pos:line="414" pos:column="24">SCLEX_MARKDOWN</name></expr></argument>, <argument><expr><name pos:line="414" pos:column="40">ColorizeMarkdownDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="414" pos:column="61">"markdown"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
