<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\ScitillaComponent\ScintillaEditView.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"ScintillaEditView.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="31" pos:column="10">"Parameters.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"TCHAR.h"</lit:literal></cpp:file></cpp:include>


<comment type="line" pos:line="35" pos:column="1">// initialize the static variable</comment>

<comment type="line" pos:line="37" pos:column="1">// get full ScinLexer.dll path to avoid hijack</comment>
<function><type><name pos:line="38" pos:column="1">TCHAR</name> <type:modifier pos:line="38" pos:column="7">*</type:modifier></type> <name pos:line="38" pos:column="9">getSciLexerFullPathName</name><parameter_list pos:line="38" pos:column="32">(<param><decl><type><name pos:line="38" pos:column="33">TCHAR</name> <type:modifier pos:line="38" pos:column="39">*</type:modifier></type> <name pos:line="38" pos:column="41">moduleFileName</name></decl></param>, <param><decl><type><name pos:line="38" pos:column="57">size_t</name></type> <name pos:line="38" pos:column="64">len</name></decl></param>)</parameter_list><block pos:line="38" pos:column="68">{
	<expr_stmt><expr><call><name><op:operator pos:line="39" pos:column="9">::</op:operator><name pos:line="39" pos:column="11">GetModuleFileName</name></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">NULL</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">moduleFileName</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="51">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="40" pos:column="9">::</op:operator><name pos:line="40" pos:column="11">PathRemoveFileSpec</name></name><argument_list pos:line="40" pos:column="29">(<argument><expr><name pos:line="40" pos:column="30">moduleFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="41" pos:column="9">::</op:operator><name pos:line="41" pos:column="11">PathAppend</name></name><argument_list pos:line="41" pos:column="21">(<argument><expr><name pos:line="41" pos:column="22">moduleFileName</name></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="38">TEXT</name><argument_list pos:line="41" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="43">"SciLexer.dll"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">moduleFileName</name></expr>;</return>
}</block></function><empty_stmt pos:line="43" pos:column="2">;</empty_stmt>

<decl_stmt><decl><type><name pos:line="45" pos:column="1">TCHAR</name></type> <name><name pos:line="45" pos:column="7">moduleFileName</name><index pos:line="45" pos:column="21">[<expr><lit:literal type="number" pos:line="45" pos:column="22">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="46" pos:column="1">HINSTANCE</name></type> <name><name pos:line="46" pos:column="11">ScintillaEditView</name><op:operator pos:line="46" pos:column="28">::</op:operator><name pos:line="46" pos:column="30">_hLib</name></name> <init pos:line="46" pos:column="36">= <expr><call><name><op:operator pos:line="46" pos:column="38">::</op:operator><name pos:line="46" pos:column="40">LoadLibrary</name></name><argument_list pos:line="46" pos:column="51">(<argument><expr><call><name pos:line="46" pos:column="52">getSciLexerFullPathName</name><argument_list pos:line="46" pos:column="75">(<argument><expr><name pos:line="46" pos:column="76">moduleFileName</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="46" pos:column="92">1024</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="47" pos:column="1">int</name></type> <name><name pos:line="47" pos:column="5">ScintillaEditView</name><op:operator pos:line="47" pos:column="22">::</op:operator><name pos:line="47" pos:column="24">_refCount</name></name> <init pos:line="47" pos:column="34">= <expr><lit:literal type="number" pos:line="47" pos:column="36">0</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="48" pos:column="1">UserDefineDialog</name></type> <name><name pos:line="48" pos:column="18">ScintillaEditView</name><op:operator pos:line="48" pos:column="35">::</op:operator><name pos:line="48" pos:column="37">_userDefineDlg</name></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="50" pos:column="1">const</specifier> <name pos:line="50" pos:column="7">int</name></type> <name><name pos:line="50" pos:column="11">ScintillaEditView</name><op:operator pos:line="50" pos:column="28">::</op:operator><name pos:line="50" pos:column="30">_SC_MARGE_LINENUMBER</name></name> <init pos:line="50" pos:column="51">= <expr><lit:literal type="number" pos:line="50" pos:column="53">0</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="51" pos:column="1">const</specifier> <name pos:line="51" pos:column="7">int</name></type> <name><name pos:line="51" pos:column="11">ScintillaEditView</name><op:operator pos:line="51" pos:column="28">::</op:operator><name pos:line="51" pos:column="30">_SC_MARGE_SYBOLE</name></name> <init pos:line="51" pos:column="47">= <expr><lit:literal type="number" pos:line="51" pos:column="49">1</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="52" pos:column="1">const</specifier> <name pos:line="52" pos:column="7">int</name></type> <name><name pos:line="52" pos:column="11">ScintillaEditView</name><op:operator pos:line="52" pos:column="28">::</op:operator><name pos:line="52" pos:column="30">_SC_MARGE_FOLDER</name></name> <init pos:line="52" pos:column="47">= <expr><lit:literal type="number" pos:line="52" pos:column="49">2</lit:literal></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="53" pos:column="1">//const int ScintillaEditView::_SC_MARGE_MODIFMARKER = 3;</comment>

<decl_stmt><decl><type><name pos:line="55" pos:column="1">WNDPROC</name></type> <name><name pos:line="55" pos:column="9">ScintillaEditView</name><op:operator pos:line="55" pos:column="26">::</op:operator><name pos:line="55" pos:column="28">_scintillaDefaultProc</name></name> <init pos:line="55" pos:column="50">= <expr><name pos:line="55" pos:column="52">NULL</name></expr></init></decl>;</decl_stmt>
<comment type="block" pos:line="56" pos:column="1">/*
SC_MARKNUM_*     | Arrow               Plus/minus           Circle tree                 Box tree 
-------------------------------------------------------------------------------------------------------------
FOLDEROPEN       | SC_MARK_ARROWDOWN   SC_MARK_MINUS     SC_MARK_CIRCLEMINUS            SC_MARK_BOXMINUS 
FOLDER           | SC_MARK_ARROW       SC_MARK_PLUS      SC_MARK_CIRCLEPLUS             SC_MARK_BOXPLUS 
FOLDERSUB        | SC_MARK_EMPTY       SC_MARK_EMPTY     SC_MARK_VLINE                  SC_MARK_VLINE 
FOLDERTAIL       | SC_MARK_EMPTY       SC_MARK_EMPTY     SC_MARK_LCORNERCURVE           SC_MARK_LCORNER 
FOLDEREND        | SC_MARK_EMPTY       SC_MARK_EMPTY     SC_MARK_CIRCLEPLUSCONNECTED    SC_MARK_BOXPLUSCONNECTED 
FOLDEROPENMID    | SC_MARK_EMPTY       SC_MARK_EMPTY     SC_MARK_CIRCLEMINUSCONNECTED   SC_MARK_BOXMINUSCONNECTED 
FOLDERMIDTAIL    | SC_MARK_EMPTY       SC_MARK_EMPTY     SC_MARK_TCORNERCURVE           SC_MARK_TCORNER 
*/</comment>

<decl_stmt><decl><type><specifier pos:line="68" pos:column="1">const</specifier> <name pos:line="68" pos:column="7">int</name></type> <name><name pos:line="68" pos:column="11">ScintillaEditView</name><op:operator pos:line="68" pos:column="28">::</op:operator><name pos:line="68" pos:column="30">_markersArray</name><index pos:line="68" pos:column="43">[]</index><index pos:line="68" pos:column="45">[<expr><name pos:line="68" pos:column="46">NB_FOLDER_STATE</name></expr>]</index></name> <init pos:line="68" pos:column="63">= <expr><block pos:line="68" pos:column="65">{
  <expr><block pos:line="69" pos:column="3">{<expr><name pos:line="69" pos:column="4">SC_MARKNUM_FOLDEROPEN</name></expr>, <expr><name pos:line="69" pos:column="27">SC_MARKNUM_FOLDER</name></expr>, <expr><name pos:line="69" pos:column="46">SC_MARKNUM_FOLDERSUB</name></expr>, <expr><name pos:line="69" pos:column="68">SC_MARKNUM_FOLDERTAIL</name></expr>, <expr><name pos:line="69" pos:column="91">SC_MARKNUM_FOLDEREND</name></expr>,        <expr><name pos:line="69" pos:column="120">SC_MARKNUM_FOLDEROPENMID</name></expr>,     <expr><name pos:line="69" pos:column="150">SC_MARKNUM_FOLDERMIDTAIL</name></expr>}</block></expr>,
  <expr><block pos:line="70" pos:column="3">{<expr><name pos:line="70" pos:column="4">SC_MARK_MINUS</name></expr>,         <expr><name pos:line="70" pos:column="27">SC_MARK_PLUS</name></expr>,      <expr><name pos:line="70" pos:column="46">SC_MARK_EMPTY</name></expr>,        <expr><name pos:line="70" pos:column="68">SC_MARK_EMPTY</name></expr>,         <expr><name pos:line="70" pos:column="91">SC_MARK_EMPTY</name></expr>,               <expr><name pos:line="70" pos:column="120">SC_MARK_EMPTY</name></expr>,                <expr><name pos:line="70" pos:column="150">SC_MARK_EMPTY</name></expr>}</block></expr>,
  <expr><block pos:line="71" pos:column="3">{<expr><name pos:line="71" pos:column="4">SC_MARK_ARROWDOWN</name></expr>,     <expr><name pos:line="71" pos:column="27">SC_MARK_ARROW</name></expr>,     <expr><name pos:line="71" pos:column="46">SC_MARK_EMPTY</name></expr>,        <expr><name pos:line="71" pos:column="68">SC_MARK_EMPTY</name></expr>,         <expr><name pos:line="71" pos:column="91">SC_MARK_EMPTY</name></expr>,               <expr><name pos:line="71" pos:column="120">SC_MARK_EMPTY</name></expr>,                <expr><name pos:line="71" pos:column="150">SC_MARK_EMPTY</name></expr>}</block></expr>,
  <expr><block pos:line="72" pos:column="3">{<expr><name pos:line="72" pos:column="4">SC_MARK_CIRCLEMINUS</name></expr>,   <expr><name pos:line="72" pos:column="27">SC_MARK_CIRCLEPLUS</name></expr>,<expr><name pos:line="72" pos:column="46">SC_MARK_VLINE</name></expr>,        <expr><name pos:line="72" pos:column="68">SC_MARK_LCORNERCURVE</name></expr>,  <expr><name pos:line="72" pos:column="91">SC_MARK_CIRCLEPLUSCONNECTED</name></expr>, <expr><name pos:line="72" pos:column="120">SC_MARK_CIRCLEMINUSCONNECTED</name></expr>, <expr><name pos:line="72" pos:column="150">SC_MARK_TCORNERCURVE</name></expr>}</block></expr>,
  <expr><block pos:line="73" pos:column="3">{<expr><name pos:line="73" pos:column="4">SC_MARK_BOXMINUS</name></expr>,      <expr><name pos:line="73" pos:column="27">SC_MARK_BOXPLUS</name></expr>,   <expr><name pos:line="73" pos:column="46">SC_MARK_VLINE</name></expr>,        <expr><name pos:line="73" pos:column="68">SC_MARK_LCORNER</name></expr>,       <expr><name pos:line="73" pos:column="91">SC_MARK_BOXPLUSCONNECTED</name></expr>,    <expr><name pos:line="73" pos:column="120">SC_MARK_BOXMINUSCONNECTED</name></expr>,    <expr><name pos:line="73" pos:column="150">SC_MARK_TCORNER</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="76" pos:column="1">//Array with all the names of all languages</comment>
<decl_stmt><decl><type><name pos:line="77" pos:column="1">LanguageName</name></type> <name><name pos:line="77" pos:column="14">ScintillaEditView</name><op:operator pos:line="77" pos:column="31">::</op:operator><name pos:line="77" pos:column="33">langNames</name><index pos:line="77" pos:column="42">[<expr><name pos:line="77" pos:column="43">L_EXTERNAL</name><op:operator pos:line="77" pos:column="53">+</op:operator><lit:literal type="number" pos:line="77" pos:column="54">1</lit:literal></expr>]</index></name> <init pos:line="77" pos:column="57">= <expr><block pos:line="77" pos:column="59">{
<expr><block pos:line="78" pos:column="1">{<expr><call><name pos:line="78" pos:column="2">TEXT</name><argument_list pos:line="78" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="7">"normal"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="78" pos:column="33">TEXT</name><argument_list pos:line="78" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="38">"Normal text"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="78" pos:column="65">TEXT</name><argument_list pos:line="78" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="70">"Normal text file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="78" pos:column="153">L_TEXT</name></expr>,			<expr><name pos:line="78" pos:column="177">SCLEX_NULL</name></expr>}</block></expr>,
<expr><block pos:line="79" pos:column="1">{<expr><call><name pos:line="79" pos:column="2">TEXT</name><argument_list pos:line="79" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="7">"php"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="79" pos:column="33">TEXT</name><argument_list pos:line="79" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="38">"PHP"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="79" pos:column="73">TEXT</name><argument_list pos:line="79" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="79" pos:column="78">"PHP Hypertext Preprocessor file"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><name pos:line="79" pos:column="145">L_PHP</name></expr>,			<expr><name pos:line="79" pos:column="169">SCLEX_HTML</name></expr>}</block></expr>,
<expr><block pos:line="80" pos:column="1">{<expr><call><name pos:line="80" pos:column="2">TEXT</name><argument_list pos:line="80" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="7">"c"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="80" pos:column="41">TEXT</name><argument_list pos:line="80" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="46">"C"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><call><name pos:line="80" pos:column="89">TEXT</name><argument_list pos:line="80" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="80" pos:column="94">"C source file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="80" pos:column="177">L_C</name></expr>,			<expr><name pos:line="80" pos:column="201">SCLEX_CPP</name></expr>}</block></expr>,
<expr><block pos:line="81" pos:column="1">{<expr><call><name pos:line="81" pos:column="2">TEXT</name><argument_list pos:line="81" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="7">"cpp"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="81" pos:column="33">TEXT</name><argument_list pos:line="81" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="38">"C++"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="81" pos:column="73">TEXT</name><argument_list pos:line="81" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="81" pos:column="78">"C++ source file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="81" pos:column="161">L_CPP</name></expr>,			<expr><name pos:line="81" pos:column="185">SCLEX_CPP</name></expr>}</block></expr>,
<expr><block pos:line="82" pos:column="1">{<expr><call><name pos:line="82" pos:column="2">TEXT</name><argument_list pos:line="82" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="7">"cs"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="82" pos:column="33">TEXT</name><argument_list pos:line="82" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="38">"C#"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><call><name pos:line="82" pos:column="81">TEXT</name><argument_list pos:line="82" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="82" pos:column="86">"C# source file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="82" pos:column="169">L_CS</name></expr>,			<expr><name pos:line="82" pos:column="193">SCLEX_CPP</name></expr>}</block></expr>,
<expr><block pos:line="83" pos:column="1">{<expr><call><name pos:line="83" pos:column="2">TEXT</name><argument_list pos:line="83" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="7">"objc"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="83" pos:column="33">TEXT</name><argument_list pos:line="83" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="38">"Objective-C"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="83" pos:column="65">TEXT</name><argument_list pos:line="83" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="83" pos:column="70">"Objective-C source file"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><name pos:line="83" pos:column="145">L_OBJC</name></expr>,			<expr><name pos:line="83" pos:column="169">SCLEX_CPP</name></expr>}</block></expr>,
<expr><block pos:line="84" pos:column="1">{<expr><call><name pos:line="84" pos:column="2">TEXT</name><argument_list pos:line="84" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="7">"java"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="84" pos:column="33">TEXT</name><argument_list pos:line="84" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="38">"Java"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="84" pos:column="73">TEXT</name><argument_list pos:line="84" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="78">"Java source file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="84" pos:column="161">L_JAVA</name></expr>,			<expr><name pos:line="84" pos:column="185">SCLEX_CPP</name></expr>}</block></expr>,
<expr><block pos:line="85" pos:column="1">{<expr><call><name pos:line="85" pos:column="2">TEXT</name><argument_list pos:line="85" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="7">"rc"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="85" pos:column="33">TEXT</name><argument_list pos:line="85" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="38">"RC"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><call><name pos:line="85" pos:column="81">TEXT</name><argument_list pos:line="85" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="86">"Windows Resource file"</lit:literal></expr></argument>)</argument_list></call></expr>,							<expr><name pos:line="85" pos:column="161">L_RC</name></expr>,			<expr><name pos:line="85" pos:column="185">SCLEX_CPP</name></expr>}</block></expr>,
<expr><block pos:line="86" pos:column="1">{<expr><call><name pos:line="86" pos:column="2">TEXT</name><argument_list pos:line="86" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="7">"html"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="86" pos:column="33">TEXT</name><argument_list pos:line="86" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="38">"HTML"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="86" pos:column="73">TEXT</name><argument_list pos:line="86" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="78">"Hyper Text Markup Language file"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><name pos:line="86" pos:column="145">L_HTML</name></expr>,			<expr><name pos:line="86" pos:column="169">SCLEX_HTML</name></expr>}</block></expr>,
<expr><block pos:line="87" pos:column="1">{<expr><call><name pos:line="87" pos:column="2">TEXT</name><argument_list pos:line="87" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="7">"xml"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="87" pos:column="33">TEXT</name><argument_list pos:line="87" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="38">"XML"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="87" pos:column="73">TEXT</name><argument_list pos:line="87" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="87" pos:column="78">"eXtensible Markup Language file"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><name pos:line="87" pos:column="145">L_XML</name></expr>,			<expr><name pos:line="87" pos:column="169">SCLEX_XML</name></expr>}</block></expr>,
<expr><block pos:line="88" pos:column="1">{<expr><call><name pos:line="88" pos:column="2">TEXT</name><argument_list pos:line="88" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="7">"makefile"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="88" pos:column="33">TEXT</name><argument_list pos:line="88" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="38">"Makefile"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="88" pos:column="73">TEXT</name><argument_list pos:line="88" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="78">"Makefile"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="88" pos:column="169">L_MAKEFILE</name></expr>,		<expr><name pos:line="88" pos:column="193">SCLEX_MAKEFILE</name></expr>}</block></expr>,
<expr><block pos:line="89" pos:column="1">{<expr><call><name pos:line="89" pos:column="2">TEXT</name><argument_list pos:line="89" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="7">"pascal"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="89" pos:column="33">TEXT</name><argument_list pos:line="89" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="38">"Pascal"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="89" pos:column="73">TEXT</name><argument_list pos:line="89" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="89" pos:column="78">"Pascal source file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="89" pos:column="161">L_PASCAL</name></expr>,		<expr><name pos:line="89" pos:column="185">SCLEX_PASCAL</name></expr>}</block></expr>,
<expr><block pos:line="90" pos:column="1">{<expr><call><name pos:line="90" pos:column="2">TEXT</name><argument_list pos:line="90" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="7">"batch"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="90" pos:column="33">TEXT</name><argument_list pos:line="90" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="38">"Batch"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="90" pos:column="73">TEXT</name><argument_list pos:line="90" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="78">"Batch file"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="90" pos:column="169">L_BATCH</name></expr>,		<expr><name pos:line="90" pos:column="193">SCLEX_BATCH</name></expr>}</block></expr>,
<expr><block pos:line="91" pos:column="1">{<expr><call><name pos:line="91" pos:column="2">TEXT</name><argument_list pos:line="91" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="7">"ini"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="91" pos:column="33">TEXT</name><argument_list pos:line="91" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="38">"ini"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="91" pos:column="73">TEXT</name><argument_list pos:line="91" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="91" pos:column="78">"MS ini file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="91" pos:column="161">L_INI</name></expr>,			<expr><name pos:line="91" pos:column="185">SCLEX_PROPERTIES</name></expr>}</block></expr>,
<expr><block pos:line="92" pos:column="1">{<expr><call><name pos:line="92" pos:column="2">TEXT</name><argument_list pos:line="92" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="7">"nfo"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="92" pos:column="33">TEXT</name><argument_list pos:line="92" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="38">"NFO"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="92" pos:column="73">TEXT</name><argument_list pos:line="92" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="78">"MSDOS Style/ASCII Art"</lit:literal></expr></argument>)</argument_list></call></expr>,							<expr><name pos:line="92" pos:column="153">L_ASCII</name></expr>,		<expr><name pos:line="92" pos:column="177">SCLEX_NULL</name></expr>}</block></expr>,
<expr><block pos:line="93" pos:column="1">{<expr><call><name pos:line="93" pos:column="2">TEXT</name><argument_list pos:line="93" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="7">"udf"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="93" pos:column="33">TEXT</name><argument_list pos:line="93" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="38">"udf"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="93" pos:column="73">TEXT</name><argument_list pos:line="93" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="78">"User Define File"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="93" pos:column="161">L_USER</name></expr>,			<expr><name pos:line="93" pos:column="185">SCLEX_USER</name></expr>}</block></expr>,
<expr><block pos:line="94" pos:column="1">{<expr><call><name pos:line="94" pos:column="2">TEXT</name><argument_list pos:line="94" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="7">"asp"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="94" pos:column="33">TEXT</name><argument_list pos:line="94" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="38">"ASP"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="94" pos:column="73">TEXT</name><argument_list pos:line="94" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="78">"Active Server Pages script file"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><name pos:line="94" pos:column="145">L_ASP</name></expr>,			<expr><name pos:line="94" pos:column="169">SCLEX_HTML</name></expr>}</block></expr>,
<expr><block pos:line="95" pos:column="1">{<expr><call><name pos:line="95" pos:column="2">TEXT</name><argument_list pos:line="95" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="7">"sql"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="95" pos:column="33">TEXT</name><argument_list pos:line="95" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="38">"SQL"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="95" pos:column="73">TEXT</name><argument_list pos:line="95" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="95" pos:column="78">"Structured Query Language file"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><name pos:line="95" pos:column="145">L_SQL</name></expr>,			<expr><name pos:line="95" pos:column="169">SCLEX_SQL</name></expr>}</block></expr>,
<expr><block pos:line="96" pos:column="1">{<expr><call><name pos:line="96" pos:column="2">TEXT</name><argument_list pos:line="96" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="7">"vb"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="96" pos:column="33">TEXT</name><argument_list pos:line="96" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="38">"VB"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><call><name pos:line="96" pos:column="81">TEXT</name><argument_list pos:line="96" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="86">"Visual Basic file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="96" pos:column="169">L_VB</name></expr>,			<expr><name pos:line="96" pos:column="193">SCLEX_VB</name></expr>}</block></expr>,
<expr><block pos:line="97" pos:column="1">{<expr><call><name pos:line="97" pos:column="2">TEXT</name><argument_list pos:line="97" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="7">"javascript"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><call><name pos:line="97" pos:column="25">TEXT</name><argument_list pos:line="97" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="30">"JavaScript"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="97" pos:column="65">TEXT</name><argument_list pos:line="97" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="97" pos:column="70">"JavaScript file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="97" pos:column="153">L_JS</name></expr>,			<expr><name pos:line="97" pos:column="177">SCLEX_CPP</name></expr>}</block></expr>,
<expr><block pos:line="98" pos:column="1">{<expr><call><name pos:line="98" pos:column="2">TEXT</name><argument_list pos:line="98" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="7">"css"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="98" pos:column="33">TEXT</name><argument_list pos:line="98" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="38">"CSS"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="98" pos:column="73">TEXT</name><argument_list pos:line="98" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="98" pos:column="78">"Cascade Style Sheets File"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><name pos:line="98" pos:column="153">L_CSS</name></expr>,			<expr><name pos:line="98" pos:column="177">SCLEX_CSS</name></expr>}</block></expr>,
<expr><block pos:line="99" pos:column="1">{<expr><call><name pos:line="99" pos:column="2">TEXT</name><argument_list pos:line="99" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="7">"perl"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="99" pos:column="33">TEXT</name><argument_list pos:line="99" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="38">"Perl"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="99" pos:column="73">TEXT</name><argument_list pos:line="99" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="99" pos:column="78">"Perl source file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="99" pos:column="161">L_PERL</name></expr>,			<expr><name pos:line="99" pos:column="185">SCLEX_PERL</name></expr>}</block></expr>,
<expr><block pos:line="100" pos:column="1">{<expr><call><name pos:line="100" pos:column="2">TEXT</name><argument_list pos:line="100" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="7">"python"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="100" pos:column="33">TEXT</name><argument_list pos:line="100" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="38">"Python"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="100" pos:column="73">TEXT</name><argument_list pos:line="100" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="78">"Python file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="100" pos:column="161">L_PYTHON</name></expr>,		<expr><name pos:line="100" pos:column="185">SCLEX_PYTHON</name></expr>}</block></expr>,
<expr><block pos:line="101" pos:column="1">{<expr><call><name pos:line="101" pos:column="2">TEXT</name><argument_list pos:line="101" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="7">"lua"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="101" pos:column="33">TEXT</name><argument_list pos:line="101" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="38">"Lua"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="101" pos:column="73">TEXT</name><argument_list pos:line="101" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="101" pos:column="78">"Lua source File"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="101" pos:column="161">L_LUA</name></expr>,			<expr><name pos:line="101" pos:column="185">SCLEX_LUA</name></expr>}</block></expr>,
<expr><block pos:line="102" pos:column="1">{<expr><call><name pos:line="102" pos:column="2">TEXT</name><argument_list pos:line="102" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="7">"tex"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="102" pos:column="33">TEXT</name><argument_list pos:line="102" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="38">"TeX"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="102" pos:column="73">TEXT</name><argument_list pos:line="102" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="102" pos:column="78">"TeX file"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="102" pos:column="169">L_TEX</name></expr>,			<expr><name pos:line="102" pos:column="193">SCLEX_TEX</name></expr>}</block></expr>,
<expr><block pos:line="103" pos:column="1">{<expr><call><name pos:line="103" pos:column="2">TEXT</name><argument_list pos:line="103" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="7">"fortran"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="103" pos:column="33">TEXT</name><argument_list pos:line="103" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="38">"Fortran"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="103" pos:column="73">TEXT</name><argument_list pos:line="103" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="103" pos:column="78">"Fortran source file"</lit:literal></expr></argument>)</argument_list></call></expr>,							<expr><name pos:line="103" pos:column="153">L_FORTRAN</name></expr>,		<expr><name pos:line="103" pos:column="177">SCLEX_FORTRAN</name></expr>}</block></expr>,
<expr><block pos:line="104" pos:column="1">{<expr><call><name pos:line="104" pos:column="2">TEXT</name><argument_list pos:line="104" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="7">"bash"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="104" pos:column="33">TEXT</name><argument_list pos:line="104" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="38">"Shell"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="104" pos:column="73">TEXT</name><argument_list pos:line="104" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="104" pos:column="78">"Unix script file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="104" pos:column="161">L_BASH</name></expr>,			<expr><name pos:line="104" pos:column="185">SCLEX_BASH</name></expr>}</block></expr>,
<expr><block pos:line="105" pos:column="1">{<expr><call><name pos:line="105" pos:column="2">TEXT</name><argument_list pos:line="105" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="105" pos:column="7">"actionscript"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><call><name pos:line="105" pos:column="25">TEXT</name><argument_list pos:line="105" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="105" pos:column="30">"Flash Action"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="105" pos:column="57">TEXT</name><argument_list pos:line="105" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="105" pos:column="62">"Flash Action script file"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><name pos:line="105" pos:column="137">L_FLASH</name></expr>,		<expr><name pos:line="105" pos:column="161">SCLEX_CPP</name></expr>}</block></expr>,<comment type="line" pos:line="105" pos:column="172">//WARNING, was "flash"</comment>
<expr><block pos:line="106" pos:column="1">{<expr><call><name pos:line="106" pos:column="2">TEXT</name><argument_list pos:line="106" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="7">"nsis"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="106" pos:column="33">TEXT</name><argument_list pos:line="106" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="38">"NSIS"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="106" pos:column="73">TEXT</name><argument_list pos:line="106" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="106" pos:column="78">"Nullsoft Scriptable Install System script file"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><name pos:line="106" pos:column="129">L_NSIS</name></expr>,			<expr><name pos:line="106" pos:column="153">SCLEX_NSIS</name></expr>}</block></expr>,
<expr><block pos:line="107" pos:column="1">{<expr><call><name pos:line="107" pos:column="2">TEXT</name><argument_list pos:line="107" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="7">"tcl"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="107" pos:column="33">TEXT</name><argument_list pos:line="107" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="38">"TCL"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="107" pos:column="73">TEXT</name><argument_list pos:line="107" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="107" pos:column="78">"Tool Command Language file"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><name pos:line="107" pos:column="153">L_TCL</name></expr>,			<expr><name pos:line="107" pos:column="177">SCLEX_TCL</name></expr>}</block></expr>,
<expr><block pos:line="108" pos:column="1">{<expr><call><name pos:line="108" pos:column="2">TEXT</name><argument_list pos:line="108" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="7">"lisp"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="108" pos:column="33">TEXT</name><argument_list pos:line="108" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="38">"Lisp"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="108" pos:column="73">TEXT</name><argument_list pos:line="108" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="108" pos:column="78">"List Processing language file"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><name pos:line="108" pos:column="145">L_LISP</name></expr>,			<expr><name pos:line="108" pos:column="169">SCLEX_LISP</name></expr>}</block></expr>,
<expr><block pos:line="109" pos:column="1">{<expr><call><name pos:line="109" pos:column="2">TEXT</name><argument_list pos:line="109" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="7">"scheme"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="109" pos:column="33">TEXT</name><argument_list pos:line="109" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="38">"Scheme"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="109" pos:column="73">TEXT</name><argument_list pos:line="109" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="109" pos:column="78">"Scheme file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="109" pos:column="161">L_SCHEME</name></expr>,		<expr><name pos:line="109" pos:column="185">SCLEX_LISP</name></expr>}</block></expr>,
<expr><block pos:line="110" pos:column="1">{<expr><call><name pos:line="110" pos:column="2">TEXT</name><argument_list pos:line="110" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="7">"asm"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="110" pos:column="33">TEXT</name><argument_list pos:line="110" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="38">"Assembly"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="110" pos:column="73">TEXT</name><argument_list pos:line="110" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="110" pos:column="78">"Assembly language source file"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><name pos:line="110" pos:column="145">L_ASM</name></expr>,			<expr><name pos:line="110" pos:column="169">SCLEX_ASM</name></expr>}</block></expr>,
<expr><block pos:line="111" pos:column="1">{<expr><call><name pos:line="111" pos:column="2">TEXT</name><argument_list pos:line="111" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="7">"diff"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="111" pos:column="33">TEXT</name><argument_list pos:line="111" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="38">"Diff"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="111" pos:column="73">TEXT</name><argument_list pos:line="111" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="111" pos:column="78">"Diff file"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="111" pos:column="169">L_DIFF</name></expr>,			<expr><name pos:line="111" pos:column="193">SCLEX_DIFF</name></expr>}</block></expr>,
<expr><block pos:line="112" pos:column="1">{<expr><call><name pos:line="112" pos:column="2">TEXT</name><argument_list pos:line="112" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="7">"props"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="112" pos:column="33">TEXT</name><argument_list pos:line="112" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="38">"Properties file"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><call><name pos:line="112" pos:column="65">TEXT</name><argument_list pos:line="112" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="112" pos:column="70">"Properties file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="112" pos:column="153">L_PROPS</name></expr>,		<expr><name pos:line="112" pos:column="177">SCLEX_PROPERTIES</name></expr>}</block></expr>,
<expr><block pos:line="113" pos:column="1">{<expr><call><name pos:line="113" pos:column="2">TEXT</name><argument_list pos:line="113" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="7">"postscript"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><call><name pos:line="113" pos:column="25">TEXT</name><argument_list pos:line="113" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="30">"Postscript"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="113" pos:column="65">TEXT</name><argument_list pos:line="113" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="113" pos:column="70">"Postscript file"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="113" pos:column="153">L_PS</name></expr>,			<expr><name pos:line="113" pos:column="177">SCLEX_PS</name></expr>}</block></expr>,
<expr><block pos:line="114" pos:column="1">{<expr><call><name pos:line="114" pos:column="2">TEXT</name><argument_list pos:line="114" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="7">"ruby"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="114" pos:column="33">TEXT</name><argument_list pos:line="114" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="38">"Ruby"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="114" pos:column="73">TEXT</name><argument_list pos:line="114" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="114" pos:column="78">"Ruby file"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="114" pos:column="169">L_RUBY</name></expr>,			<expr><name pos:line="114" pos:column="193">SCLEX_RUBY</name></expr>}</block></expr>,
<expr><block pos:line="115" pos:column="1">{<expr><call><name pos:line="115" pos:column="2">TEXT</name><argument_list pos:line="115" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="7">"smalltalk"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="115" pos:column="33">TEXT</name><argument_list pos:line="115" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="38">"Smalltalk"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="115" pos:column="73">TEXT</name><argument_list pos:line="115" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="115" pos:column="78">"Smalltalk file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="115" pos:column="161">L_SMALLTALK</name></expr>,	<expr><name pos:line="115" pos:column="177">SCLEX_SMALLTALK</name></expr>}</block></expr>,
<expr><block pos:line="116" pos:column="1">{<expr><call><name pos:line="116" pos:column="2">TEXT</name><argument_list pos:line="116" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="7">"vhdl"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="116" pos:column="33">TEXT</name><argument_list pos:line="116" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="38">"VHDL"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="116" pos:column="73">TEXT</name><argument_list pos:line="116" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="116" pos:column="78">"VHSIC Hardware Description Language file"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><name pos:line="116" pos:column="137">L_VHDL</name></expr>,			<expr><name pos:line="116" pos:column="161">SCLEX_VHDL</name></expr>}</block></expr>,
<expr><block pos:line="117" pos:column="1">{<expr><call><name pos:line="117" pos:column="2">TEXT</name><argument_list pos:line="117" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="7">"kix"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="117" pos:column="33">TEXT</name><argument_list pos:line="117" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="38">"KiXtart"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="117" pos:column="73">TEXT</name><argument_list pos:line="117" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="117" pos:column="78">"KiXtart file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="117" pos:column="161">L_KIX</name></expr>,			<expr><name pos:line="117" pos:column="185">SCLEX_KIX</name></expr>}</block></expr>,
<expr><block pos:line="118" pos:column="1">{<expr><call><name pos:line="118" pos:column="2">TEXT</name><argument_list pos:line="118" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="7">"autoit"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="118" pos:column="33">TEXT</name><argument_list pos:line="118" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="38">"AutoIt"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="118" pos:column="73">TEXT</name><argument_list pos:line="118" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="118" pos:column="78">"AutoIt"</lit:literal></expr></argument>)</argument_list></call></expr>,											<expr><name pos:line="118" pos:column="169">L_AU3</name></expr>,			<expr><name pos:line="118" pos:column="193">SCLEX_AU3</name></expr>}</block></expr>,
<expr><block pos:line="119" pos:column="1">{<expr><call><name pos:line="119" pos:column="2">TEXT</name><argument_list pos:line="119" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="7">"caml"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="119" pos:column="33">TEXT</name><argument_list pos:line="119" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="38">"CAML"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="119" pos:column="73">TEXT</name><argument_list pos:line="119" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="119" pos:column="78">"Categorical Abstract Machine Language"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><name pos:line="119" pos:column="137">L_CAML</name></expr>,			<expr><name pos:line="119" pos:column="161">SCLEX_CAML</name></expr>}</block></expr>,
<expr><block pos:line="120" pos:column="1">{<expr><call><name pos:line="120" pos:column="2">TEXT</name><argument_list pos:line="120" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="7">"ada"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="120" pos:column="33">TEXT</name><argument_list pos:line="120" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="38">"Ada"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="120" pos:column="73">TEXT</name><argument_list pos:line="120" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="78">"Ada file"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="120" pos:column="169">L_ADA</name></expr>,			<expr><name pos:line="120" pos:column="193">SCLEX_ADA</name></expr>}</block></expr>,
<expr><block pos:line="121" pos:column="1">{<expr><call><name pos:line="121" pos:column="2">TEXT</name><argument_list pos:line="121" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="7">"verilog"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="121" pos:column="33">TEXT</name><argument_list pos:line="121" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="38">"Verilog"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="121" pos:column="73">TEXT</name><argument_list pos:line="121" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="121" pos:column="78">"Verilog file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="121" pos:column="161">L_VERILOG</name></expr>,		<expr><name pos:line="121" pos:column="185">SCLEX_VERILOG</name></expr>}</block></expr>,
<expr><block pos:line="122" pos:column="1">{<expr><call><name pos:line="122" pos:column="2">TEXT</name><argument_list pos:line="122" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="7">"matlab"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="122" pos:column="33">TEXT</name><argument_list pos:line="122" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="38">"MATLAB"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="122" pos:column="73">TEXT</name><argument_list pos:line="122" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="78">"MATrix LABoratory"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="122" pos:column="161">L_MATLAB</name></expr>,		<expr><name pos:line="122" pos:column="185">SCLEX_MATLAB</name></expr>}</block></expr>,
<expr><block pos:line="123" pos:column="1">{<expr><call><name pos:line="123" pos:column="2">TEXT</name><argument_list pos:line="123" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="7">"haskell"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="123" pos:column="33">TEXT</name><argument_list pos:line="123" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="38">"Haskell"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="123" pos:column="73">TEXT</name><argument_list pos:line="123" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="78">"Haskell"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="123" pos:column="169">L_HASKELL</name></expr>,		<expr><name pos:line="123" pos:column="193">SCLEX_HASKELL</name></expr>}</block></expr>,
<expr><block pos:line="124" pos:column="1">{<expr><call><name pos:line="124" pos:column="2">TEXT</name><argument_list pos:line="124" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="7">"inno"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="124" pos:column="33">TEXT</name><argument_list pos:line="124" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="38">"Inno"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="124" pos:column="73">TEXT</name><argument_list pos:line="124" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="78">"Inno Setup script"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="124" pos:column="161">L_INNO</name></expr>,			<expr><name pos:line="124" pos:column="185">SCLEX_INNOSETUP</name></expr>}</block></expr>,
<expr><block pos:line="125" pos:column="1">{<expr><call><name pos:line="125" pos:column="2">TEXT</name><argument_list pos:line="125" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="7">"searchResult"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><call><name pos:line="125" pos:column="25">TEXT</name><argument_list pos:line="125" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="30">"Internal Search"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><call><name pos:line="125" pos:column="57">TEXT</name><argument_list pos:line="125" pos:column="61">(<argument><expr><lit:literal type="string" pos:line="125" pos:column="62">"Internal Search"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="125" pos:column="145">L_SEARCHRESULT</name></expr>,	<expr><name pos:line="125" pos:column="161">SCLEX_SEARCHRESULT</name></expr>}</block></expr>,
<expr><block pos:line="126" pos:column="1">{<expr><call><name pos:line="126" pos:column="2">TEXT</name><argument_list pos:line="126" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="7">"cmake"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="126" pos:column="33">TEXT</name><argument_list pos:line="126" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="38">"CMAKEFILE"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="126" pos:column="73">TEXT</name><argument_list pos:line="126" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="126" pos:column="78">"CMAKEFILE"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="126" pos:column="169">L_CMAKE</name></expr>,		<expr><name pos:line="126" pos:column="193">SCLEX_CMAKE</name></expr>}</block></expr>,
<expr><block pos:line="127" pos:column="1">{<expr><call><name pos:line="127" pos:column="2">TEXT</name><argument_list pos:line="127" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="7">"yaml"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="127" pos:column="33">TEXT</name><argument_list pos:line="127" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="38">"YAML"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="127" pos:column="73">TEXT</name><argument_list pos:line="127" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="127" pos:column="78">"YAML Ain't Markup Language"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><name pos:line="127" pos:column="153">L_YAML</name></expr>,			<expr><name pos:line="127" pos:column="177">SCLEX_YAML</name></expr>}</block></expr>,
<expr><block pos:line="128" pos:column="1">{<expr><call><name pos:line="128" pos:column="2">TEXT</name><argument_list pos:line="128" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="7">"cobol"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="128" pos:column="33">TEXT</name><argument_list pos:line="128" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="38">"COBOL"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="128" pos:column="73">TEXT</name><argument_list pos:line="128" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="128" pos:column="78">"COmmon Business Oriented Language"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><name pos:line="128" pos:column="145">L_COBOL</name></expr>,		<expr><name pos:line="128" pos:column="169">SCLEX_COBOL</name></expr>}</block></expr>,
<expr><block pos:line="129" pos:column="1">{<expr><call><name pos:line="129" pos:column="2">TEXT</name><argument_list pos:line="129" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="7">"gui4cli"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><call><name pos:line="129" pos:column="33">TEXT</name><argument_list pos:line="129" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="38">"Gui4Cli"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="129" pos:column="73">TEXT</name><argument_list pos:line="129" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="129" pos:column="78">"Gui4Cli file"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="129" pos:column="161">L_GUI4CLI</name></expr>,		<expr><name pos:line="129" pos:column="185">SCLEX_GUI4CLI</name></expr>}</block></expr>,
<expr><block pos:line="130" pos:column="1">{<expr><call><name pos:line="130" pos:column="2">TEXT</name><argument_list pos:line="130" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="7">"d"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="130" pos:column="41">TEXT</name><argument_list pos:line="130" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="46">"D"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><call><name pos:line="130" pos:column="89">TEXT</name><argument_list pos:line="130" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="130" pos:column="94">"D programming language"</lit:literal></expr></argument>)</argument_list></call></expr>,							<expr><name pos:line="130" pos:column="169">L_D</name></expr>,			<expr><name pos:line="130" pos:column="193">SCLEX_D</name></expr>}</block></expr>,
<expr><block pos:line="131" pos:column="1">{<expr><call><name pos:line="131" pos:column="2">TEXT</name><argument_list pos:line="131" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="7">"powershell"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><call><name pos:line="131" pos:column="25">TEXT</name><argument_list pos:line="131" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="30">"PowerShell"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="131" pos:column="65">TEXT</name><argument_list pos:line="131" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="131" pos:column="70">"Windows PowerShell"</lit:literal></expr></argument>)</argument_list></call></expr>,								<expr><name pos:line="131" pos:column="153">L_POWERSHELL</name></expr>,	<expr><name pos:line="131" pos:column="169">SCLEX_POWERSHELL</name></expr>}</block></expr>,
<expr><block pos:line="132" pos:column="1">{<expr><call><name pos:line="132" pos:column="2">TEXT</name><argument_list pos:line="132" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="7">"r"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="132" pos:column="41">TEXT</name><argument_list pos:line="132" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="46">"R"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><call><name pos:line="132" pos:column="89">TEXT</name><argument_list pos:line="132" pos:column="93">(<argument><expr><lit:literal type="string" pos:line="132" pos:column="94">"R programming language"</lit:literal></expr></argument>)</argument_list></call></expr>,							<expr><name pos:line="132" pos:column="169">L_R</name></expr>,			<expr><name pos:line="132" pos:column="193">SCLEX_R</name></expr>}</block></expr>,
<expr><block pos:line="133" pos:column="1">{<expr><call><name pos:line="133" pos:column="2">TEXT</name><argument_list pos:line="133" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="7">"jsp"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="133" pos:column="33">TEXT</name><argument_list pos:line="133" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="38">"JSP"</lit:literal></expr></argument>)</argument_list></call></expr>,				<expr><call><name pos:line="133" pos:column="73">TEXT</name><argument_list pos:line="133" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="133" pos:column="78">"JavaServer Pages script file"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><name pos:line="133" pos:column="145">L_JSP</name></expr>,			<expr><name pos:line="133" pos:column="169">SCLEX_HTML</name></expr>}</block></expr>,
<expr><block pos:line="134" pos:column="1">{<expr><call><name pos:line="134" pos:column="2">TEXT</name><argument_list pos:line="134" pos:column="6">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="7">"ext"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="134" pos:column="33">TEXT</name><argument_list pos:line="134" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="38">"External"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><call><name pos:line="134" pos:column="73">TEXT</name><argument_list pos:line="134" pos:column="77">(<argument><expr><lit:literal type="string" pos:line="134" pos:column="78">"External"</lit:literal></expr></argument>)</argument_list></call></expr>,										<expr><name pos:line="134" pos:column="169">L_EXTERNAL</name></expr>,		<expr><name pos:line="134" pos:column="193">SCLEX_NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="137" pos:column="1">//const int MASK_RED   = 0xFF0000;</comment>
<comment type="line" pos:line="138" pos:column="1">//const int MASK_GREEN = 0x00FF00;</comment>
<comment type="line" pos:line="139" pos:column="1">//const int MASK_BLUE  = 0x0000FF;</comment>

<function><type><name pos:line="141" pos:column="1">int</name></type> <name pos:line="141" pos:column="5">getNbDigits</name><parameter_list pos:line="141" pos:column="16">(<param><decl><type><name pos:line="141" pos:column="17">int</name></type> <name pos:line="141" pos:column="21">aNum</name></decl></param>, <param><decl><type><name pos:line="141" pos:column="27">int</name></type> <name pos:line="141" pos:column="31">base</name></decl></param>)</parameter_list>
<block pos:line="142" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="143" pos:column="9">int</name></type> <name pos:line="143" pos:column="13">nbChiffre</name> <init pos:line="143" pos:column="23">= <expr><lit:literal type="number" pos:line="143" pos:column="25">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="144" pos:column="9">int</name></type> <name pos:line="144" pos:column="13">diviseur</name> <init pos:line="144" pos:column="22">= <expr><name pos:line="144" pos:column="24">base</name></expr></init></decl>;</decl_stmt>
	
	<for pos:line="146" pos:column="9">for (<init pos:line="146" pos:column="14">;</init><condition pos:line="146" pos:column="15">;</condition><incr/>)
	<block pos:line="147" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="148" pos:column="17">int</name></type> <name pos:line="148" pos:column="21">result</name> <init pos:line="148" pos:column="28">= <expr><name pos:line="148" pos:column="30">aNum</name> <op:operator pos:line="148" pos:column="35">/</op:operator> <name pos:line="148" pos:column="37">diviseur</name></expr></init></decl>;</decl_stmt>
		<if pos:line="149" pos:column="17">if <condition pos:line="149" pos:column="20">(<expr><op:operator pos:line="149" pos:column="21">!</op:operator><name pos:line="149" pos:column="22">result</name></expr>)</condition><then pos:line="149" pos:column="29">
			<break pos:line="150" pos:column="25">break;</break></then>
		<else pos:line="151" pos:column="17">else
		<block pos:line="152" pos:column="17">{
			<expr_stmt><expr><name pos:line="153" pos:column="25">diviseur</name> <op:operator pos:line="153" pos:column="34">*=</op:operator> <name pos:line="153" pos:column="37">base</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="154" pos:column="25">nbChiffre</name><op:operator pos:line="154" pos:column="34">++</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<if pos:line="157" pos:column="9">if <condition pos:line="157" pos:column="12">(<expr><op:operator pos:line="157" pos:column="13">(</op:operator><name pos:line="157" pos:column="14">base</name> <op:operator pos:line="157" pos:column="19">==</op:operator> <lit:literal type="number" pos:line="157" pos:column="22">16</lit:literal><op:operator pos:line="157" pos:column="24">)</op:operator> <op:operator pos:line="157" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="157" pos:column="29">(</op:operator><name pos:line="157" pos:column="30">nbChiffre</name> <op:operator pos:line="157" pos:column="40">%</op:operator> <lit:literal type="number" pos:line="157" pos:column="42">2</lit:literal> <op:operator pos:line="157" pos:column="44">!=</op:operator> <lit:literal type="number" pos:line="157" pos:column="47">0</lit:literal><op:operator pos:line="157" pos:column="48">)</op:operator></expr>)</condition><then pos:line="157" pos:column="50">
		<expr_stmt><expr><name pos:line="158" pos:column="17">nbChiffre</name> <op:operator pos:line="158" pos:column="27">+=</op:operator> <lit:literal type="number" pos:line="158" pos:column="30">1</lit:literal></expr>;</expr_stmt></then></if>

	<return pos:line="160" pos:column="9">return <expr><name pos:line="160" pos:column="16">nbChiffre</name></expr>;</return>
}</block></function>

<function><type><name pos:line="163" pos:column="1">void</name></type> <name><name pos:line="163" pos:column="6">ScintillaEditView</name><op:operator pos:line="163" pos:column="23">::</op:operator><name pos:line="163" pos:column="25">init</name></name><parameter_list pos:line="163" pos:column="29">(<param><decl><type><name pos:line="163" pos:column="30">HINSTANCE</name></type> <name pos:line="163" pos:column="40">hInst</name></decl></param>, <param><decl><type><name pos:line="163" pos:column="47">HWND</name></type> <name pos:line="163" pos:column="52">hPere</name></decl></param>)</parameter_list>
<block pos:line="164" pos:column="1">{
	<if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><op:operator pos:line="165" pos:column="13">!</op:operator><name pos:line="165" pos:column="14">_hLib</name></expr>)</condition><then pos:line="165" pos:column="20">
	<block pos:line="166" pos:column="9">{
		<throw pos:line="167" pos:column="17">throw <expr><call><name><name pos:line="167" pos:column="23">std</name><op:operator pos:line="167" pos:column="26">::</op:operator><name pos:line="167" pos:column="28">exception</name></name><argument_list pos:line="167" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="167" pos:column="38">"ScintillaEditView::init : SCINTILLA ERROR - Can not load the dynamic library"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="170" pos:column="9">Window</name><op:operator pos:line="170" pos:column="15">::</op:operator><name pos:line="170" pos:column="17">init</name></name><argument_list pos:line="170" pos:column="21">(<argument><expr><name pos:line="170" pos:column="22">hInst</name></expr></argument>, <argument><expr><name pos:line="170" pos:column="29">hPere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name pos:line="171" pos:column="4">_hSelf</name> <op:operator pos:line="171" pos:column="11">=</op:operator> <call><name><op:operator pos:line="171" pos:column="13">::</op:operator><name pos:line="171" pos:column="15">CreateWindowEx</name></name><argument_list pos:line="171" pos:column="29">(
					<argument><expr><name pos:line="172" pos:column="41">WS_EX_CLIENTEDGE</name></expr></argument>,\
					<argument><expr><call><name pos:line="173" pos:column="41">TEXT</name><argument_list pos:line="173" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="173" pos:column="46">"Scintilla"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,\
					<argument><expr><call><name pos:line="174" pos:column="41">TEXT</name><argument_list pos:line="174" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="174" pos:column="46">"Notepad++"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,\
					<argument><expr><name pos:line="175" pos:column="41">WS_CHILD</name> <op:operator pos:line="175" pos:column="50">|</op:operator> <name pos:line="175" pos:column="52">WS_VSCROLL</name> <op:operator pos:line="175" pos:column="63">|</op:operator> <name pos:line="175" pos:column="65">WS_HSCROLL</name> <op:operator pos:line="175" pos:column="76">|</op:operator> <name pos:line="175" pos:column="78">WS_CLIPCHILDREN</name> <op:operator pos:line="175" pos:column="94">|</op:operator> <name pos:line="175" pos:column="96">WS_EX_RTLREADING</name></expr></argument>,\
					<argument><expr><lit:literal type="number" pos:line="176" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="176" pos:column="44">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="176" pos:column="47">100</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="176" pos:column="52">100</lit:literal></expr></argument>,\
					<argument><expr><name pos:line="177" pos:column="41">_hParent</name></expr></argument>,\
					<argument><expr><name pos:line="178" pos:column="41">NULL</name></expr></argument>,\
					<argument><expr><name pos:line="179" pos:column="41">_hInst</name></expr></argument>,\
					<argument><expr><name pos:line="180" pos:column="41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><op:operator pos:line="182" pos:column="13">!</op:operator><name pos:line="182" pos:column="14">_hSelf</name></expr>)</condition><then pos:line="182" pos:column="21">
	<block pos:line="183" pos:column="9">{
		<throw pos:line="184" pos:column="17">throw <expr><call><name><name pos:line="184" pos:column="23">std</name><op:operator pos:line="184" pos:column="26">::</op:operator><name pos:line="184" pos:column="28">exception</name></name><argument_list pos:line="184" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="184" pos:column="38">"ScintillaEditView::init : CreateWindowEx() function return null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>

	<expr_stmt><expr><name pos:line="187" pos:column="9">_pScintillaFunc</name> <op:operator pos:line="187" pos:column="25">=</op:operator> <op:operator pos:line="187" pos:column="27">(</op:operator><name pos:line="187" pos:column="28">SCINTILLA_FUNC</name><op:operator pos:line="187" pos:column="42">)</op:operator><call><name><op:operator pos:line="187" pos:column="43">::</op:operator><name pos:line="187" pos:column="45">SendMessage</name></name><argument_list pos:line="187" pos:column="56">(<argument><expr><name pos:line="187" pos:column="57">_hSelf</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="65">SCI_GETDIRECTFUNCTION</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="187" pos:column="88">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="187" pos:column="91">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="188" pos:column="9">_pScintillaPtr</name> <op:operator pos:line="188" pos:column="24">=</op:operator> <op:operator pos:line="188" pos:column="26">(</op:operator><name pos:line="188" pos:column="27">SCINTILLA_PTR</name><op:operator pos:line="188" pos:column="40">)</op:operator><call><name><op:operator pos:line="188" pos:column="41">::</op:operator><name pos:line="188" pos:column="43">SendMessage</name></name><argument_list pos:line="188" pos:column="54">(<argument><expr><name pos:line="188" pos:column="55">_hSelf</name></expr></argument>, <argument><expr><name pos:line="188" pos:column="63">SCI_GETDIRECTPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="188" pos:column="85">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="188" pos:column="88">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name pos:line="190" pos:column="5">_userDefineDlg</name><op:operator pos:line="190" pos:column="19">.</op:operator><name pos:line="190" pos:column="20">init</name></name><argument_list pos:line="190" pos:column="24">(<argument><expr><name pos:line="190" pos:column="25">_hInst</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="33">_hParent</name></expr></argument>, <argument><expr><name pos:line="190" pos:column="43">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="192" pos:column="9">if <condition pos:line="192" pos:column="12">(<expr><op:operator pos:line="192" pos:column="13">!</op:operator><name pos:line="192" pos:column="14">_pScintillaFunc</name></expr>)</condition><then pos:line="192" pos:column="30">
	<block pos:line="193" pos:column="9">{
		<throw pos:line="194" pos:column="17">throw <expr><call><name><name pos:line="194" pos:column="23">std</name><op:operator pos:line="194" pos:column="26">::</op:operator><name pos:line="194" pos:column="28">exception</name></name><argument_list pos:line="194" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="194" pos:column="38">"ScintillaEditView::init : SCI_GETDIRECTFUNCTION message failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>

	<if pos:line="197" pos:column="9">if <condition pos:line="197" pos:column="12">(<expr><op:operator pos:line="197" pos:column="13">!</op:operator><name pos:line="197" pos:column="14">_pScintillaPtr</name></expr>)</condition><then pos:line="197" pos:column="29">
	<block pos:line="198" pos:column="9">{
		<throw pos:line="199" pos:column="17">throw <expr><call><name><name pos:line="199" pos:column="23">std</name><op:operator pos:line="199" pos:column="26">::</op:operator><name pos:line="199" pos:column="28">exception</name></name><argument_list pos:line="199" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="199" pos:column="38">"ScintillaEditView::init : SCI_GETDIRECTPOINTER message failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>

    <expr_stmt><expr><call><name pos:line="202" pos:column="5">execute</name><argument_list pos:line="202" pos:column="12">(<argument><expr><name pos:line="202" pos:column="13">SCI_SETMARGINMASKN</name></expr></argument>, <argument><expr><name pos:line="202" pos:column="33">_SC_MARGE_FOLDER</name></expr></argument>, <argument><expr><name pos:line="202" pos:column="51">SC_MASK_FOLDERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="203" pos:column="5">showMargin</name><argument_list pos:line="203" pos:column="15">(<argument><expr><name pos:line="203" pos:column="16">_SC_MARGE_FOLDER</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="203" pos:column="34">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="205" pos:column="5">execute</name><argument_list pos:line="205" pos:column="12">(<argument><expr><name pos:line="205" pos:column="13">SCI_SETMARGINMASKN</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="33">_SC_MARGE_SYBOLE</name></expr></argument>, <argument><expr><op:operator pos:line="205" pos:column="51">(</op:operator><lit:literal type="number" pos:line="205" pos:column="52">1</lit:literal><op:operator pos:line="205" pos:column="53">&lt;&lt;</op:operator><name pos:line="205" pos:column="55">MARK_BOOKMARK</name><op:operator pos:line="205" pos:column="68">)</op:operator> <op:operator pos:line="205" pos:column="70">|</op:operator> <op:operator pos:line="205" pos:column="72">(</op:operator><lit:literal type="number" pos:line="205" pos:column="73">1</lit:literal><op:operator pos:line="205" pos:column="74">&lt;&lt;</op:operator><name pos:line="205" pos:column="76">MARK_HIDELINESBEGIN</name><op:operator pos:line="205" pos:column="95">)</op:operator> <op:operator pos:line="205" pos:column="97">|</op:operator> <op:operator pos:line="205" pos:column="99">(</op:operator><lit:literal type="number" pos:line="205" pos:column="100">1</lit:literal><op:operator pos:line="205" pos:column="101">&lt;&lt;</op:operator><name pos:line="205" pos:column="103">MARK_HIDELINESEND</name><op:operator pos:line="205" pos:column="120">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block" pos:line="206" pos:column="1">/*
	execute(SCI_SETMARGINMASKN, _SC_MARGE_MODIFMARKER, (1&lt;&lt;MARK_LINEMODIFIEDUNSAVED)|(1&lt;&lt;MARK_LINEMODIFIEDSAVED));
	execute(SCI_SETMARGINTYPEN, _SC_MARGE_MODIFMARKER, SC_MARGIN_BACK);
	showMargin(_SC_MARGE_MODIFMARKER, true);

	execute(SCI_MARKERDEFINE, MARK_LINEMODIFIEDSAVED, SCI_MARKERDEFINE);
	execute(SCI_MARKERDEFINE, MARK_LINEMODIFIEDUNSAVED, SCI_MARKERDEFINE);
*/</comment>
	<expr_stmt><expr><call><name pos:line="214" pos:column="9">execute</name><argument_list pos:line="214" pos:column="16">(<argument><expr><name pos:line="214" pos:column="17">SCI_MARKERSETALPHA</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="37">MARK_BOOKMARK</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="214" pos:column="52">70</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="215" pos:column="9">execute</name><argument_list pos:line="215" pos:column="16">(<argument><expr><name pos:line="215" pos:column="17">SCI_MARKERDEFINEPIXMAP</name></expr></argument>, <argument><expr><name pos:line="215" pos:column="41">MARK_BOOKMARK</name></expr></argument>, <argument><expr><op:operator pos:line="215" pos:column="56">(</op:operator><name pos:line="215" pos:column="57">LPARAM</name><op:operator pos:line="215" pos:column="63">)</op:operator><name pos:line="215" pos:column="64">bookmark_xpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="216" pos:column="9">execute</name><argument_list pos:line="216" pos:column="16">(<argument><expr><name pos:line="216" pos:column="17">SCI_MARKERDEFINEPIXMAP</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="41">MARK_HIDELINESBEGIN</name></expr></argument>, <argument><expr><op:operator pos:line="216" pos:column="62">(</op:operator><name pos:line="216" pos:column="63">LPARAM</name><op:operator pos:line="216" pos:column="69">)</op:operator><name pos:line="216" pos:column="70">acTop_xpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="217" pos:column="9">execute</name><argument_list pos:line="217" pos:column="16">(<argument><expr><name pos:line="217" pos:column="17">SCI_MARKERDEFINEPIXMAP</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="41">MARK_HIDELINESEND</name></expr></argument>, <argument><expr><op:operator pos:line="217" pos:column="60">(</op:operator><name pos:line="217" pos:column="61">LPARAM</name><op:operator pos:line="217" pos:column="67">)</op:operator><name pos:line="217" pos:column="68">acBottom_xpm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="219" pos:column="5">execute</name><argument_list pos:line="219" pos:column="12">(<argument><expr><name pos:line="219" pos:column="13">SCI_SETMARGINSENSITIVEN</name></expr></argument>, <argument><expr><name pos:line="219" pos:column="38">_SC_MARGE_FOLDER</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="219" pos:column="56">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="220" pos:column="5">execute</name><argument_list pos:line="220" pos:column="12">(<argument><expr><name pos:line="220" pos:column="13">SCI_SETMARGINSENSITIVEN</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="38">_SC_MARGE_SYBOLE</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="220" pos:column="56">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="222" pos:column="5">execute</name><argument_list pos:line="222" pos:column="12">(<argument><expr><name pos:line="222" pos:column="13">SCI_SETFOLDFLAGS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="222" pos:column="31">16</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="223" pos:column="9">execute</name><argument_list pos:line="223" pos:column="16">(<argument><expr><name pos:line="223" pos:column="17">SCI_SETSCROLLWIDTHTRACKING</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="223" pos:column="45">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="224" pos:column="9">execute</name><argument_list pos:line="224" pos:column="16">(<argument><expr><name pos:line="224" pos:column="17">SCI_SETSCROLLWIDTH</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="224" pos:column="37">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="224" pos:column="41">//default empty document: override default width of 2000</comment>

	<comment type="line" pos:line="226" pos:column="9">// smart hilighting</comment>
	<expr_stmt><expr><call><name pos:line="227" pos:column="9">execute</name><argument_list pos:line="227" pos:column="16">(<argument><expr><name pos:line="227" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="227" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_SMART</name></expr></argument>, <argument><expr><name pos:line="227" pos:column="69">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="228" pos:column="9">execute</name><argument_list pos:line="228" pos:column="16">(<argument><expr><name pos:line="228" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE</name></expr></argument>, <argument><expr><name pos:line="228" pos:column="63">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="229" pos:column="9">execute</name><argument_list pos:line="229" pos:column="16">(<argument><expr><name pos:line="229" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_INC</name></expr></argument>, <argument><expr><name pos:line="229" pos:column="67">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="230" pos:column="9">execute</name><argument_list pos:line="230" pos:column="16">(<argument><expr><name pos:line="230" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="36">SCE_UNIVERSAL_TAGMATCH</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="60">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="231" pos:column="9">execute</name><argument_list pos:line="231" pos:column="16">(<argument><expr><name pos:line="231" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="36">SCE_UNIVERSAL_TAGATTR</name></expr></argument>, <argument><expr><name pos:line="231" pos:column="59">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="232" pos:column="9">execute</name><argument_list pos:line="232" pos:column="16">(<argument><expr><name pos:line="232" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="232" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT1</name></expr></argument>, <argument><expr><name pos:line="232" pos:column="68">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="233" pos:column="9">execute</name><argument_list pos:line="233" pos:column="16">(<argument><expr><name pos:line="233" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="233" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT2</name></expr></argument>, <argument><expr><name pos:line="233" pos:column="68">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="234" pos:column="9">execute</name><argument_list pos:line="234" pos:column="16">(<argument><expr><name pos:line="234" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT3</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="68">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="235" pos:column="9">execute</name><argument_list pos:line="235" pos:column="16">(<argument><expr><name pos:line="235" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT4</name></expr></argument>, <argument><expr><name pos:line="235" pos:column="68">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="236" pos:column="9">execute</name><argument_list pos:line="236" pos:column="16">(<argument><expr><name pos:line="236" pos:column="17">SCI_INDICSETSTYLE</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT5</name></expr></argument>, <argument><expr><name pos:line="236" pos:column="68">INDIC_ROUNDBOX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	

	<expr_stmt><expr><call><name pos:line="238" pos:column="9">execute</name><argument_list pos:line="238" pos:column="16">(<argument><expr><name pos:line="238" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="238" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_SMART</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="238" pos:column="69">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="239" pos:column="9">execute</name><argument_list pos:line="239" pos:column="16">(<argument><expr><name pos:line="239" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="239" pos:column="63">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="240" pos:column="9">execute</name><argument_list pos:line="240" pos:column="16">(<argument><expr><name pos:line="240" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="240" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_INC</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="240" pos:column="67">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="241" pos:column="9">execute</name><argument_list pos:line="241" pos:column="16">(<argument><expr><name pos:line="241" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="241" pos:column="36">SCE_UNIVERSAL_TAGMATCH</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="241" pos:column="60">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="242" pos:column="9">execute</name><argument_list pos:line="242" pos:column="16">(<argument><expr><name pos:line="242" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="242" pos:column="36">SCE_UNIVERSAL_TAGATTR</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="242" pos:column="59">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="243" pos:column="9">execute</name><argument_list pos:line="243" pos:column="16">(<argument><expr><name pos:line="243" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="243" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT1</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="243" pos:column="68">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="244" pos:column="9">execute</name><argument_list pos:line="244" pos:column="16">(<argument><expr><name pos:line="244" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="244" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT2</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="244" pos:column="68">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="245" pos:column="9">execute</name><argument_list pos:line="245" pos:column="16">(<argument><expr><name pos:line="245" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="245" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT3</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="245" pos:column="68">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="246" pos:column="9">execute</name><argument_list pos:line="246" pos:column="16">(<argument><expr><name pos:line="246" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="246" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT4</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="246" pos:column="68">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="247" pos:column="9">execute</name><argument_list pos:line="247" pos:column="16">(<argument><expr><name pos:line="247" pos:column="17">SCI_INDICSETALPHA</name></expr></argument>, <argument><expr><name pos:line="247" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT5</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="247" pos:column="68">100</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	

	<expr_stmt><expr><call><name pos:line="249" pos:column="9">execute</name><argument_list pos:line="249" pos:column="16">(<argument><expr><name pos:line="249" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="249" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_SMART</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="249" pos:column="69">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="250" pos:column="9">execute</name><argument_list pos:line="250" pos:column="16">(<argument><expr><name pos:line="250" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="250" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="250" pos:column="63">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="251" pos:column="9">execute</name><argument_list pos:line="251" pos:column="16">(<argument><expr><name pos:line="251" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="251" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_INC</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="251" pos:column="67">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="252" pos:column="9">execute</name><argument_list pos:line="252" pos:column="16">(<argument><expr><name pos:line="252" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="252" pos:column="36">SCE_UNIVERSAL_TAGMATCH</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="252" pos:column="60">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="253" pos:column="9">execute</name><argument_list pos:line="253" pos:column="16">(<argument><expr><name pos:line="253" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="253" pos:column="36">SCE_UNIVERSAL_TAGATTR</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="253" pos:column="59">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="254" pos:column="9">execute</name><argument_list pos:line="254" pos:column="16">(<argument><expr><name pos:line="254" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="254" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT1</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="254" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="255" pos:column="9">execute</name><argument_list pos:line="255" pos:column="16">(<argument><expr><name pos:line="255" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="255" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT2</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="255" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="256" pos:column="9">execute</name><argument_list pos:line="256" pos:column="16">(<argument><expr><name pos:line="256" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="256" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT3</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="256" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="257" pos:column="9">execute</name><argument_list pos:line="257" pos:column="16">(<argument><expr><name pos:line="257" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="257" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT4</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="257" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="258" pos:column="9">execute</name><argument_list pos:line="258" pos:column="16">(<argument><expr><name pos:line="258" pos:column="17">SCI_INDICSETUNDER</name></expr></argument>, <argument><expr><name pos:line="258" pos:column="36">SCE_UNIVERSAL_FOUND_STYLE_EXT5</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="258" pos:column="68">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<expr_stmt><expr><name pos:line="259" pos:column="9">_pParameter</name> <op:operator pos:line="259" pos:column="21">=</op:operator> <call><name><name pos:line="259" pos:column="23">NppParameters</name><op:operator pos:line="259" pos:column="36">::</op:operator><name pos:line="259" pos:column="38">getInstance</name></name><argument_list pos:line="259" pos:column="49">()</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name pos:line="261" pos:column="9">_codepage</name> <op:operator pos:line="261" pos:column="19">=</op:operator> <call><name><op:operator pos:line="261" pos:column="21">::</op:operator><name pos:line="261" pos:column="23">GetACP</name></name><argument_list pos:line="261" pos:column="29">()</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="263" pos:column="9">//Use either Unicode or ANSI setwindowlong, depending on environment</comment>
	<if pos:line="264" pos:column="9">if <condition pos:line="264" pos:column="12">(<expr><call><name><op:operator pos:line="264" pos:column="13">::</op:operator><name pos:line="264" pos:column="15">IsWindowUnicode</name></name><argument_list pos:line="264" pos:column="30">(<argument><expr><name pos:line="264" pos:column="31">_hSelf</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="264" pos:column="39">
	<block pos:line="265" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="266" pos:column="17">::</op:operator><name pos:line="266" pos:column="19">SetWindowLongPtrW</name></name><argument_list pos:line="266" pos:column="36">(<argument><expr><name pos:line="266" pos:column="37">_hSelf</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="45">GWL_USERDATA</name></expr></argument>, <argument><expr><call><name><name pos:line="266" pos:column="59">reinterpret_cast</name><argument_list pos:line="266" pos:column="75">&lt;<argument><expr><name pos:line="266" pos:column="76">LONG</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="266" pos:column="81">(<argument><expr><name pos:line="266" pos:column="82">this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="267" pos:column="17">_callWindowProc</name> <op:operator pos:line="267" pos:column="33">=</op:operator> <name pos:line="267" pos:column="35">CallWindowProcW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="268" pos:column="17">_scintillaDefaultProc</name> <op:operator pos:line="268" pos:column="39">=</op:operator> <call><name><name pos:line="268" pos:column="41">reinterpret_cast</name><argument_list pos:line="268" pos:column="57">&lt;<argument><expr><name pos:line="268" pos:column="58">WNDPROC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="268" pos:column="66">(<argument><expr><call><name><op:operator pos:line="268" pos:column="67">::</op:operator><name pos:line="268" pos:column="69">SetWindowLongPtrW</name></name><argument_list pos:line="268" pos:column="86">(<argument><expr><name pos:line="268" pos:column="87">_hSelf</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="95">GWL_WNDPROC</name></expr></argument>, <argument><expr><call><name><name pos:line="268" pos:column="108">reinterpret_cast</name><argument_list pos:line="268" pos:column="124">&lt;<argument><expr><name pos:line="268" pos:column="125">LONG</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="268" pos:column="130">(<argument><expr><name pos:line="268" pos:column="131">scintillaStatic_Proc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="270" pos:column="9">else 
	<block pos:line="271" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="272" pos:column="17">::</op:operator><name pos:line="272" pos:column="19">SetWindowLongPtrA</name></name><argument_list pos:line="272" pos:column="36">(<argument><expr><name pos:line="272" pos:column="37">_hSelf</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="45">GWL_USERDATA</name></expr></argument>, <argument><expr><call><name><name pos:line="272" pos:column="59">reinterpret_cast</name><argument_list pos:line="272" pos:column="75">&lt;<argument><expr><name pos:line="272" pos:column="76">LONG</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="272" pos:column="81">(<argument><expr><name pos:line="272" pos:column="82">this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="273" pos:column="17">_callWindowProc</name> <op:operator pos:line="273" pos:column="33">=</op:operator> <name pos:line="273" pos:column="35">CallWindowProcA</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="274" pos:column="17">_scintillaDefaultProc</name> <op:operator pos:line="274" pos:column="39">=</op:operator> <call><name><name pos:line="274" pos:column="41">reinterpret_cast</name><argument_list pos:line="274" pos:column="57">&lt;<argument><expr><name pos:line="274" pos:column="58">WNDPROC</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="274" pos:column="66">(<argument><expr><call><name><op:operator pos:line="274" pos:column="67">::</op:operator><name pos:line="274" pos:column="69">SetWindowLongPtrA</name></name><argument_list pos:line="274" pos:column="86">(<argument><expr><name pos:line="274" pos:column="87">_hSelf</name></expr></argument>, <argument><expr><name pos:line="274" pos:column="95">GWL_WNDPROC</name></expr></argument>, <argument><expr><call><name><name pos:line="274" pos:column="108">reinterpret_cast</name><argument_list pos:line="274" pos:column="124">&lt;<argument><expr><name pos:line="274" pos:column="125">LONG</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="274" pos:column="130">(<argument><expr><name pos:line="274" pos:column="131">scintillaStatic_Proc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<comment type="line" pos:line="277" pos:column="9">//Get the startup document and make a buffer for it so it can be accessed like a file</comment>
	<expr_stmt><expr><call><name pos:line="278" pos:column="9">attachDefaultDoc</name><argument_list pos:line="278" pos:column="25">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="281" pos:column="1">LRESULT</name></type> <name><name pos:line="281" pos:column="9">ScintillaEditView</name><op:operator pos:line="281" pos:column="26">::</op:operator><name pos:line="281" pos:column="28">scintillaNew_Proc</name></name><parameter_list pos:line="281" pos:column="45">(<param><decl><type><name pos:line="281" pos:column="46">HWND</name></type> <name pos:line="281" pos:column="51">hwnd</name></decl></param>, <param><decl><type><name pos:line="281" pos:column="57">UINT</name></type> <name pos:line="281" pos:column="62">Message</name></decl></param>, <param><decl><type><name pos:line="281" pos:column="71">WPARAM</name></type> <name pos:line="281" pos:column="78">wParam</name></decl></param>, <param><decl><type><name pos:line="281" pos:column="86">LPARAM</name></type> <name pos:line="281" pos:column="93">lParam</name></decl></param>)</parameter_list> 
<block pos:line="282" pos:column="1">{
	<switch pos:line="283" pos:column="9">switch <condition pos:line="283" pos:column="16">(<expr><name pos:line="283" pos:column="17">Message</name></expr>)</condition>
	<block pos:line="284" pos:column="9">{
		<case pos:line="285" pos:column="17">case <expr><name pos:line="285" pos:column="22">WM_MOUSEHWHEEL</name></expr> :
		<block pos:line="286" pos:column="17">{
			<expr_stmt><expr><call><name><op:operator pos:line="287" pos:column="25">::</op:operator><name pos:line="287" pos:column="27">CallWindowProc</name></name><argument_list pos:line="287" pos:column="41">(<argument><expr><name pos:line="287" pos:column="42">_scintillaDefaultProc</name></expr></argument>, <argument><expr><name pos:line="287" pos:column="65">hwnd</name></expr></argument>, <argument><expr><name pos:line="287" pos:column="71">WM_HSCROLL</name></expr></argument>, <argument><expr><op:operator pos:line="287" pos:column="83">(</op:operator><op:operator pos:line="287" pos:column="84">(</op:operator><name pos:line="287" pos:column="85">short</name><op:operator pos:line="287" pos:column="90">)</op:operator><call><name pos:line="287" pos:column="91">HIWORD</name><argument_list pos:line="287" pos:column="97">(<argument><expr><name pos:line="287" pos:column="98">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="287" pos:column="106">&gt;</op:operator> <lit:literal type="number" pos:line="287" pos:column="108">0</lit:literal><op:operator pos:line="287" pos:column="109">)</op:operator><op:operator pos:line="287" pos:column="110">?</op:operator><name pos:line="287" pos:column="111">SB_LINERIGHT</name><op:operator pos:line="287" pos:column="123">:</op:operator><name pos:line="287" pos:column="124">SB_LINELEFT</name></expr></argument>, <argument><expr><name pos:line="287" pos:column="137">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break pos:line="288" pos:column="25">break;</break>
		}</block>

		</case><case pos:line="291" pos:column="17">case <expr><name pos:line="291" pos:column="22">WM_MOUSEWHEEL</name></expr> :
		<block pos:line="292" pos:column="17">{
			<if pos:line="293" pos:column="25">if <condition pos:line="293" pos:column="28">(<expr><call><name pos:line="293" pos:column="29">LOWORD</name><argument_list pos:line="293" pos:column="35">(<argument><expr><name pos:line="293" pos:column="36">wParam</name></expr></argument>)</argument_list></call> <op:operator pos:line="293" pos:column="44">&amp;</op:operator> <name pos:line="293" pos:column="46">MK_RBUTTON</name></expr>)</condition><then pos:line="293" pos:column="57">
			<block pos:line="294" pos:column="25">{
				<expr_stmt><expr><call><name><op:operator pos:line="295" pos:column="33">::</op:operator><name pos:line="295" pos:column="35">SendMessage</name></name><argument_list pos:line="295" pos:column="46">(<argument><expr><name pos:line="295" pos:column="47">_hParent</name></expr></argument>, <argument><expr><name pos:line="295" pos:column="57">Message</name></expr></argument>, <argument><expr><name pos:line="295" pos:column="66">wParam</name></expr></argument>, <argument><expr><name pos:line="295" pos:column="74">lParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="296" pos:column="33">return <expr><name pos:line="296" pos:column="40">TRUE</name></expr>;</return>
			}</block></then></if>

			<comment type="line" pos:line="299" pos:column="25">//Have to perform the scroll first, because the first/last line do not get updated untill after the scroll has been parsed</comment>
			<decl_stmt><decl><type><name pos:line="300" pos:column="25">LRESULT</name></type> <name pos:line="300" pos:column="33">scrollResult</name> <init pos:line="300" pos:column="46">= <expr><call><name><op:operator pos:line="300" pos:column="48">::</op:operator><name pos:line="300" pos:column="50">CallWindowProc</name></name><argument_list pos:line="300" pos:column="64">(<argument><expr><name pos:line="300" pos:column="65">_scintillaDefaultProc</name></expr></argument>, <argument><expr><name pos:line="300" pos:column="88">hwnd</name></expr></argument>, <argument><expr><name pos:line="300" pos:column="94">Message</name></expr></argument>, <argument><expr><name pos:line="300" pos:column="103">wParam</name></expr></argument>, <argument><expr><name pos:line="300" pos:column="111">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<return pos:line="301" pos:column="25">return <expr><name pos:line="301" pos:column="32">scrollResult</name></expr>;</return>
			<break pos:line="302" pos:column="25">break;</break>
		}</block>

		</case><case pos:line="305" pos:column="17">case <expr><name pos:line="305" pos:column="22">WM_IME_REQUEST</name></expr>:
		<block pos:line="306" pos:column="17">{
		
			<if pos:line="308" pos:column="25">if <condition pos:line="308" pos:column="28">(<expr><name pos:line="308" pos:column="29">wParam</name> <op:operator pos:line="308" pos:column="36">==</op:operator> <name pos:line="308" pos:column="39">IMR_RECONVERTSTRING</name></expr>)</condition><then pos:line="308" pos:column="59">
			<block pos:line="309" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="310" pos:column="33">int</name></type>					<name pos:line="310" pos:column="73">textLength</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="311" pos:column="33">int</name></type>					<name pos:line="311" pos:column="73">selectSize</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="312" pos:column="33">char</name></type>				<name><name pos:line="312" pos:column="65">smallTextBuffer</name><index pos:line="312" pos:column="80">[<expr><lit:literal type="number" pos:line="312" pos:column="81">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="313" pos:column="33">char</name>			  <type:modifier pos:line="313" pos:column="59">*</type:modifier></type>	<name pos:line="313" pos:column="65">selectedStr</name> <init pos:line="313" pos:column="77">= <expr><name pos:line="313" pos:column="79">smallTextBuffer</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="314" pos:column="33">RECONVERTSTRING</name>   <type:modifier pos:line="314" pos:column="51">*</type:modifier></type>	<name pos:line="314" pos:column="57">reconvert</name> <init pos:line="314" pos:column="67">= <expr><op:operator pos:line="314" pos:column="69">(</op:operator><name pos:line="314" pos:column="70">RECONVERTSTRING</name> <op:operator pos:line="314" pos:column="86">*</op:operator><op:operator pos:line="314" pos:column="87">)</op:operator><name pos:line="314" pos:column="88">lParam</name></expr></init></decl>;</decl_stmt>

				<comment type="line" pos:line="316" pos:column="33">// does nothing with a rectangular selection</comment>
				<if pos:line="317" pos:column="33">if <condition pos:line="317" pos:column="36">(<expr><call><name pos:line="317" pos:column="37">execute</name><argument_list pos:line="317" pos:column="44">(<argument><expr><name pos:line="317" pos:column="45">SCI_SELECTIONISRECTANGLE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="317" pos:column="71">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="317" pos:column="74">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="317" pos:column="77">
					<return pos:line="318" pos:column="41">return <expr><lit:literal type="number" pos:line="318" pos:column="48">0</lit:literal></expr>;</return></then></if>

				<comment type="line" pos:line="320" pos:column="33">// get the codepage of the text</comment>

				<decl_stmt><decl><type><name pos:line="322" pos:column="33">unsigned</name> <name pos:line="322" pos:column="42">int</name></type> <name pos:line="322" pos:column="46">codepage</name> <init pos:line="322" pos:column="55">= <expr><call><name pos:line="322" pos:column="57">execute</name><argument_list pos:line="322" pos:column="64">(<argument><expr><name pos:line="322" pos:column="65">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<comment type="line" pos:line="324" pos:column="33">// get the current text selection</comment>

				<decl_stmt><decl><type><name pos:line="326" pos:column="33">CharacterRange</name></type> <name pos:line="326" pos:column="48">range</name> <init pos:line="326" pos:column="54">= <expr><call><name pos:line="326" pos:column="56">getSelection</name><argument_list pos:line="326" pos:column="68">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="327" pos:column="33">if <condition pos:line="327" pos:column="36">(<expr><name><name pos:line="327" pos:column="37">range</name><op:operator pos:line="327" pos:column="42">.</op:operator><name pos:line="327" pos:column="43">cpMax</name></name> <op:operator pos:line="327" pos:column="49">==</op:operator> <name><name pos:line="327" pos:column="52">range</name><op:operator pos:line="327" pos:column="57">.</op:operator><name pos:line="327" pos:column="58">cpMin</name></name></expr>)</condition><then pos:line="327" pos:column="64">
				<block pos:line="328" pos:column="33">{
					<comment type="line" pos:line="329" pos:column="41">// no selection: select the current word instead</comment>

					<expr_stmt><expr><call><name pos:line="331" pos:column="41">expandWordSelection</name><argument_list pos:line="331" pos:column="60">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="332" pos:column="41">range</name> <op:operator pos:line="332" pos:column="47">=</op:operator> <call><name pos:line="332" pos:column="49">getSelection</name><argument_list pos:line="332" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="334" pos:column="33">selectSize</name> <op:operator pos:line="334" pos:column="44">=</op:operator> <name><name pos:line="334" pos:column="46">range</name><op:operator pos:line="334" pos:column="51">.</op:operator><name pos:line="334" pos:column="52">cpMax</name></name> <op:operator pos:line="334" pos:column="58">-</op:operator> <name><name pos:line="334" pos:column="60">range</name><op:operator pos:line="334" pos:column="65">.</op:operator><name pos:line="334" pos:column="66">cpMin</name></name></expr>;</expr_stmt>

				<comment type="line" pos:line="336" pos:column="33">// does nothing if still no luck with the selection</comment>

				<if pos:line="338" pos:column="33">if <condition pos:line="338" pos:column="36">(<expr><name pos:line="338" pos:column="37">selectSize</name> <op:operator pos:line="338" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="338" pos:column="51">0</lit:literal></expr>)</condition><then pos:line="338" pos:column="53">
					<return pos:line="339" pos:column="41">return <expr><lit:literal type="number" pos:line="339" pos:column="48">0</lit:literal></expr>;</return></then></if>

				<if pos:line="341" pos:column="33">if <condition pos:line="341" pos:column="36">(<expr><name pos:line="341" pos:column="37">selectSize</name> <op:operator pos:line="341" pos:column="48">+</op:operator> <lit:literal type="number" pos:line="341" pos:column="50">1</lit:literal> <op:operator pos:line="341" pos:column="52">&gt;</op:operator> <sizeof pos:line="341" pos:column="54">sizeof<argument_list pos:line="341" pos:column="60">(<argument><expr><name pos:line="341" pos:column="61">smallTextBuffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then pos:line="341" pos:column="78">
					<expr_stmt><expr><name pos:line="342" pos:column="41">selectedStr</name> <op:operator pos:line="342" pos:column="53">=</op:operator> <op:operator pos:line="342" pos:column="55">new</op:operator> <name><name pos:line="342" pos:column="59">char</name><index pos:line="342" pos:column="63">[<expr><name pos:line="342" pos:column="64">selectSize</name> <op:operator pos:line="342" pos:column="75">+</op:operator> <lit:literal type="number" pos:line="342" pos:column="77">1</lit:literal></expr>]</index></name></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><call><name pos:line="343" pos:column="33">getText</name><argument_list pos:line="343" pos:column="40">(<argument><expr><name pos:line="343" pos:column="41">selectedStr</name></expr></argument>, <argument><expr><name><name pos:line="343" pos:column="54">range</name><op:operator pos:line="343" pos:column="59">.</op:operator><name pos:line="343" pos:column="60">cpMin</name></name></expr></argument>, <argument><expr><name><name pos:line="343" pos:column="67">range</name><op:operator pos:line="343" pos:column="72">.</op:operator><name pos:line="343" pos:column="73">cpMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="345" pos:column="33">if <condition pos:line="345" pos:column="36">(<expr><name pos:line="345" pos:column="37">reconvert</name> <op:operator pos:line="345" pos:column="47">==</op:operator> <name pos:line="345" pos:column="50">NULL</name></expr>)</condition><then pos:line="345" pos:column="55">
				<block pos:line="346" pos:column="33">{
					<comment type="line" pos:line="347" pos:column="41">// convert the selection to Unicode, and get the number</comment>
					<comment type="line" pos:line="348" pos:column="41">// of bytes required for the converted text</comment>
					<expr_stmt><expr><name pos:line="349" pos:column="41">textLength</name> <op:operator pos:line="349" pos:column="52">=</op:operator> <sizeof pos:line="349" pos:column="54">sizeof<argument_list pos:line="349" pos:column="60">(<argument><expr><name pos:line="349" pos:column="61">WCHAR</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="349" pos:column="68">*</op:operator> <call><name><op:operator pos:line="349" pos:column="70">::</op:operator><name pos:line="349" pos:column="72">MultiByteToWideChar</name></name><argument_list pos:line="349" pos:column="91">(<argument><expr><name pos:line="349" pos:column="92">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="349" pos:column="102">0</lit:literal></expr></argument>, <argument><expr><name pos:line="349" pos:column="105">selectedStr</name></expr></argument>, <argument><expr><name pos:line="349" pos:column="118">selectSize</name></expr></argument>, <argument><expr><name pos:line="349" pos:column="130">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="349" pos:column="136">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="351" pos:column="33">else
				<block pos:line="352" pos:column="33">{
					<comment type="line" pos:line="353" pos:column="41">// convert the selection to Unicode, and store it at the end of the structure.</comment>
					<comment type="line" pos:line="354" pos:column="41">// Beware: For a Unicode IME, dwStrLen , dwCompStrLen, and dwTargetStrLen</comment>
					<comment type="line" pos:line="355" pos:column="41">// are TCHAR values, that is, character counts. The members dwStrOffset,</comment>
					<comment type="line" pos:line="356" pos:column="41">// dwCompStrOffset, and dwTargetStrOffset specify byte counts.</comment>

					<expr_stmt><expr><name pos:line="358" pos:column="41">textLength</name> <op:operator pos:line="358" pos:column="52">=</op:operator> <call><name><op:operator pos:line="358" pos:column="54">::</op:operator><name pos:line="358" pos:column="56">MultiByteToWideChar</name></name><argument_list pos:line="358" pos:column="75">(	<argument><expr><name pos:line="358" pos:column="81">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="358" pos:column="91">0</lit:literal></expr></argument>,
														<argument><expr><name pos:line="359" pos:column="113">selectedStr</name></expr></argument>, <argument><expr><name pos:line="359" pos:column="126">selectSize</name></expr></argument>,
														<argument><expr><call pos:line="360" pos:column="113">(<name pos:line="360" pos:column="114">LPWSTR</name>)<argument_list pos:line="360" pos:column="121">(<argument><expr><op:operator pos:line="360" pos:column="122">(</op:operator><name pos:line="360" pos:column="123">LPSTR</name><op:operator pos:line="360" pos:column="128">)</op:operator><name pos:line="360" pos:column="129">reconvert</name> <op:operator pos:line="360" pos:column="139">+</op:operator> <sizeof pos:line="360" pos:column="141">sizeof<argument_list pos:line="360" pos:column="147">(<argument><expr><name pos:line="360" pos:column="148">RECONVERTSTRING</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
														<argument><expr><name><name pos:line="361" pos:column="113">reconvert</name><op:operator pos:line="361" pos:column="122">-&gt;</op:operator><name pos:line="361" pos:column="124">dwSize</name></name> <op:operator pos:line="361" pos:column="131">-</op:operator> <sizeof pos:line="361" pos:column="133">sizeof<argument_list pos:line="361" pos:column="139">(<argument><expr><name pos:line="361" pos:column="140">RECONVERTSTRING</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line" pos:line="363" pos:column="41">// fill the structure</comment>
					<expr_stmt><expr><name><name pos:line="364" pos:column="41">reconvert</name><op:operator pos:line="364" pos:column="50">-&gt;</op:operator><name pos:line="364" pos:column="52">dwVersion</name></name>		 <op:operator pos:line="364" pos:column="74">=</op:operator> <lit:literal type="number" pos:line="364" pos:column="76">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="365" pos:column="41">reconvert</name><op:operator pos:line="365" pos:column="50">-&gt;</op:operator><name pos:line="365" pos:column="52">dwStrLen</name></name>			 <op:operator pos:line="365" pos:column="82">=</op:operator> <name pos:line="365" pos:column="84">textLength</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="366" pos:column="41">reconvert</name><op:operator pos:line="366" pos:column="50">-&gt;</op:operator><name pos:line="366" pos:column="52">dwStrOffset</name></name>		 <op:operator pos:line="366" pos:column="74">=</op:operator> <sizeof pos:line="366" pos:column="76">sizeof<argument_list pos:line="366" pos:column="82">(<argument><expr><name pos:line="366" pos:column="83">RECONVERTSTRING</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="367" pos:column="41">reconvert</name><op:operator pos:line="367" pos:column="50">-&gt;</op:operator><name pos:line="367" pos:column="52">dwCompStrLen</name></name>		 <op:operator pos:line="367" pos:column="74">=</op:operator> <name pos:line="367" pos:column="76">textLength</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="368" pos:column="41">reconvert</name><op:operator pos:line="368" pos:column="50">-&gt;</op:operator><name pos:line="368" pos:column="52">dwCompStrOffset</name></name>	 <op:operator pos:line="368" pos:column="74">=</op:operator> <lit:literal type="number" pos:line="368" pos:column="76">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="369" pos:column="41">reconvert</name><op:operator pos:line="369" pos:column="50">-&gt;</op:operator><name pos:line="369" pos:column="52">dwTargetStrLen</name></name>	 <op:operator pos:line="369" pos:column="74">=</op:operator> <name><name pos:line="369" pos:column="76">reconvert</name><op:operator pos:line="369" pos:column="85">-&gt;</op:operator><name pos:line="369" pos:column="87">dwCompStrLen</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="370" pos:column="41">reconvert</name><op:operator pos:line="370" pos:column="50">-&gt;</op:operator><name pos:line="370" pos:column="52">dwTargetStrOffset</name></name> <op:operator pos:line="370" pos:column="70">=</op:operator> <name><name pos:line="370" pos:column="72">reconvert</name><op:operator pos:line="370" pos:column="81">-&gt;</op:operator><name pos:line="370" pos:column="83">dwCompStrOffset</name></name></expr>;</expr_stmt>

					<expr_stmt><expr><name pos:line="372" pos:column="41">textLength</name> <op:operator pos:line="372" pos:column="52">*=</op:operator> <sizeof pos:line="372" pos:column="55">sizeof<argument_list pos:line="372" pos:column="61">(<argument><expr><name pos:line="372" pos:column="62">WCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				}</block></else></if>

				<if pos:line="375" pos:column="33">if <condition pos:line="375" pos:column="36">(<expr><name pos:line="375" pos:column="37">selectedStr</name> <op:operator pos:line="375" pos:column="49">!=</op:operator> <name pos:line="375" pos:column="52">smallTextBuffer</name></expr>)</condition><then pos:line="375" pos:column="68">
					<expr_stmt><expr><op:operator pos:line="376" pos:column="41">delete</op:operator> <index pos:line="376" pos:column="48">[]</index> <name pos:line="376" pos:column="51">selectedStr</name></expr>;</expr_stmt></then></if>

				<comment type="line" pos:line="378" pos:column="33">// return the total length of the structure</comment>
				<return pos:line="379" pos:column="33">return <expr><sizeof pos:line="379" pos:column="40">sizeof<argument_list pos:line="379" pos:column="46">(<argument><expr><name pos:line="379" pos:column="47">RECONVERTSTRING</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="379" pos:column="64">+</op:operator> <name pos:line="379" pos:column="66">textLength</name></expr>;</return>
			}</block></then></if>
			<break pos:line="381" pos:column="25">break;</break>
		}</block>

		</case><case pos:line="384" pos:column="17">case <expr><name pos:line="384" pos:column="22">WM_KEYUP</name></expr> :
		<block pos:line="385" pos:column="17">{
			<if pos:line="386" pos:column="25">if <condition pos:line="386" pos:column="28">(<expr><name pos:line="386" pos:column="29">wParam</name> <op:operator pos:line="386" pos:column="36">==</op:operator> <name pos:line="386" pos:column="39">VK_PRIOR</name> <op:operator pos:line="386" pos:column="48">||</op:operator> <name pos:line="386" pos:column="51">wParam</name> <op:operator pos:line="386" pos:column="58">==</op:operator> <name pos:line="386" pos:column="61">VK_NEXT</name></expr>)</condition><then pos:line="386" pos:column="69">
			<block pos:line="387" pos:column="25">{
				<comment type="line" pos:line="388" pos:column="33">// find hotspots</comment>
				<decl_stmt><decl><type><name pos:line="389" pos:column="33">NMHDR</name></type> <name pos:line="389" pos:column="39">nmhdr</name></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="390" pos:column="33">nmhdr</name><op:operator pos:line="390" pos:column="38">.</op:operator><name pos:line="390" pos:column="39">code</name></name> <op:operator pos:line="390" pos:column="44">=</op:operator> <name pos:line="390" pos:column="46">SCN_PAINTED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="391" pos:column="33">nmhdr</name><op:operator pos:line="391" pos:column="38">.</op:operator><name pos:line="391" pos:column="39">hwndFrom</name></name> <op:operator pos:line="391" pos:column="48">=</op:operator> <name pos:line="391" pos:column="50">_hSelf</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="392" pos:column="33">nmhdr</name><op:operator pos:line="392" pos:column="38">.</op:operator><name pos:line="392" pos:column="39">idFrom</name></name> <op:operator pos:line="392" pos:column="46">=</op:operator> <call><name><op:operator pos:line="392" pos:column="48">::</op:operator><name pos:line="392" pos:column="50">GetDlgCtrlID</name></name><argument_list pos:line="392" pos:column="62">(<argument><expr><name><name pos:line="392" pos:column="63">nmhdr</name><op:operator pos:line="392" pos:column="68">.</op:operator><name pos:line="392" pos:column="69">hwndFrom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="393" pos:column="33">::</op:operator><name pos:line="393" pos:column="35">SendMessage</name></name><argument_list pos:line="393" pos:column="46">(<argument><expr><name pos:line="393" pos:column="47">_hParent</name></expr></argument>, <argument><expr><name pos:line="393" pos:column="57">WM_NOTIFY</name></expr></argument>, <argument><expr><op:operator pos:line="393" pos:column="68">(</op:operator><name pos:line="393" pos:column="69">WPARAM</name><op:operator pos:line="393" pos:column="75">)</op:operator><name pos:line="393" pos:column="76">LINKTRIGGERED</name></expr></argument>, <argument><expr><op:operator pos:line="393" pos:column="91">(</op:operator><name pos:line="393" pos:column="92">LPARAM</name><op:operator pos:line="393" pos:column="98">)</op:operator><op:operator pos:line="393" pos:column="99">&amp;</op:operator><name pos:line="393" pos:column="100">nmhdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>			
			<break pos:line="395" pos:column="25">break;</break>
		}</block>

		</case><case pos:line="398" pos:column="17">case <expr><name pos:line="398" pos:column="22">WM_VSCROLL</name></expr> :
		<block pos:line="399" pos:column="17">{
			<break pos:line="400" pos:column="25">break;</break>
		}</block>
	</case>}</block></switch>
	<return pos:line="403" pos:column="9">return <expr><call><name pos:line="403" pos:column="16">_callWindowProc</name><argument_list pos:line="403" pos:column="31">(<argument><expr><name pos:line="403" pos:column="32">_scintillaDefaultProc</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="55">hwnd</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="61">Message</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="70">wParam</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="78">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name pos:line="407" pos:column="1">void</name></type> <name><name pos:line="407" pos:column="6">ScintillaEditView</name><op:operator pos:line="407" pos:column="23">::</op:operator><name pos:line="407" pos:column="25">setSpecialStyle</name></name><parameter_list pos:line="407" pos:column="40">(<param><decl><type><specifier pos:line="407" pos:column="41">const</specifier> <name pos:line="407" pos:column="47">Style</name> <type:modifier pos:line="407" pos:column="53">&amp;</type:modifier></type> <name pos:line="407" pos:column="55">styleToSet</name></decl></param>)</parameter_list>
<block pos:line="408" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="409" pos:column="9">int</name></type> <name pos:line="409" pos:column="13">styleID</name> <init pos:line="409" pos:column="21">= <expr><name><name pos:line="409" pos:column="23">styleToSet</name><op:operator pos:line="409" pos:column="33">.</op:operator><name pos:line="409" pos:column="34">_styleID</name></name></expr></init></decl>;</decl_stmt>
	<if pos:line="410" pos:column="9">if <condition pos:line="410" pos:column="12">( <expr><name><name pos:line="410" pos:column="14">styleToSet</name><op:operator pos:line="410" pos:column="24">.</op:operator><name pos:line="410" pos:column="25">_colorStyle</name></name> <op:operator pos:line="410" pos:column="37">&amp;</op:operator> <name pos:line="410" pos:column="39">COLORSTYLE_FOREGROUND</name></expr> )</condition><then pos:line="410" pos:column="62">
	    <expr_stmt><expr><call><name pos:line="411" pos:column="13">execute</name><argument_list pos:line="411" pos:column="20">(<argument><expr><name pos:line="411" pos:column="21">SCI_STYLESETFORE</name></expr></argument>, <argument><expr><name pos:line="411" pos:column="39">styleID</name></expr></argument>, <argument><expr><name><name pos:line="411" pos:column="48">styleToSet</name><op:operator pos:line="411" pos:column="58">.</op:operator><name pos:line="411" pos:column="59">_fgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <if pos:line="413" pos:column="5">if <condition pos:line="413" pos:column="8">( <expr><name><name pos:line="413" pos:column="10">styleToSet</name><op:operator pos:line="413" pos:column="20">.</op:operator><name pos:line="413" pos:column="21">_colorStyle</name></name> <op:operator pos:line="413" pos:column="33">&amp;</op:operator> <name pos:line="413" pos:column="35">COLORSTYLE_BACKGROUND</name></expr> )</condition><then pos:line="413" pos:column="58">
	    <expr_stmt><expr><call><name pos:line="414" pos:column="13">execute</name><argument_list pos:line="414" pos:column="20">(<argument><expr><name pos:line="414" pos:column="21">SCI_STYLESETBACK</name></expr></argument>, <argument><expr><name pos:line="414" pos:column="39">styleID</name></expr></argument>, <argument><expr><name><name pos:line="414" pos:column="48">styleToSet</name><op:operator pos:line="414" pos:column="58">.</op:operator><name pos:line="414" pos:column="59">_bgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    
    <if pos:line="416" pos:column="5">if <condition pos:line="416" pos:column="8">(<expr><name><name pos:line="416" pos:column="9">styleToSet</name><op:operator pos:line="416" pos:column="19">.</op:operator><name pos:line="416" pos:column="20">_fontName</name></name> <op:operator pos:line="416" pos:column="30">&amp;&amp;</op:operator> <call><name pos:line="416" pos:column="33">lstrcmp</name><argument_list pos:line="416" pos:column="40">(<argument><expr><name><name pos:line="416" pos:column="41">styleToSet</name><op:operator pos:line="416" pos:column="51">.</op:operator><name pos:line="416" pos:column="52">_fontName</name></name></expr></argument>, <argument><expr><call><name pos:line="416" pos:column="63">TEXT</name><argument_list pos:line="416" pos:column="67">(<argument><expr><lit:literal type="string" pos:line="416" pos:column="68">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="416" pos:column="73">!=</op:operator> <lit:literal type="number" pos:line="416" pos:column="76">0</lit:literal></expr>)</condition><then pos:line="416" pos:column="78">
	<block pos:line="417" pos:column="9">{
<cpp:ifdef pos:line="418" pos:column="1">#<cpp:directive pos:line="418" pos:column="2">ifdef</cpp:directive> <name pos:line="418" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name pos:line="419" pos:column="17">WcharMbcsConvertor</name> <type:modifier pos:line="419" pos:column="36">*</type:modifier></type><name pos:line="419" pos:column="37">wmc</name> <init pos:line="419" pos:column="41">= <expr><call><name><name pos:line="419" pos:column="43">WcharMbcsConvertor</name><op:operator pos:line="419" pos:column="61">::</op:operator><name pos:line="419" pos:column="63">getInstance</name></name><argument_list pos:line="419" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="420" pos:column="17">const</specifier> <name pos:line="420" pos:column="23">char</name> <type:modifier pos:line="420" pos:column="28">*</type:modifier></type> <name pos:line="420" pos:column="30">fontNameA</name> <init pos:line="420" pos:column="40">= <expr><call><name><name pos:line="420" pos:column="42">wmc</name><op:operator pos:line="420" pos:column="45">-&gt;</op:operator><name pos:line="420" pos:column="47">wchar2char</name></name><argument_list pos:line="420" pos:column="57">(<argument><expr><name><name pos:line="420" pos:column="58">styleToSet</name><op:operator pos:line="420" pos:column="68">.</op:operator><name pos:line="420" pos:column="69">_fontName</name></name></expr></argument>, <argument><expr><name pos:line="420" pos:column="80">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="421" pos:column="17">execute</name><argument_list pos:line="421" pos:column="24">(<argument><expr><name pos:line="421" pos:column="25">SCI_STYLESETFONT</name></expr></argument>, <argument><expr><op:operator pos:line="421" pos:column="43">(</op:operator><name pos:line="421" pos:column="44">WPARAM</name><op:operator pos:line="421" pos:column="50">)</op:operator><name pos:line="421" pos:column="51">styleID</name></expr></argument>, <argument><expr><op:operator pos:line="421" pos:column="60">(</op:operator><name pos:line="421" pos:column="61">LPARAM</name><op:operator pos:line="421" pos:column="67">)</op:operator><name pos:line="421" pos:column="68">fontNameA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="422" pos:column="1">#<cpp:directive pos:line="422" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="423" pos:column="17">execute</name><argument_list pos:line="423" pos:column="24">(<argument><expr><name pos:line="423" pos:column="25">SCI_STYLESETFONT</name></expr></argument>, <argument><expr><op:operator pos:line="423" pos:column="43">(</op:operator><name pos:line="423" pos:column="44">WPARAM</name><op:operator pos:line="423" pos:column="50">)</op:operator><name pos:line="423" pos:column="51">styleID</name></expr></argument>, <argument><expr><op:operator pos:line="423" pos:column="60">(</op:operator><name pos:line="423" pos:column="61">LPARAM</name><op:operator pos:line="423" pos:column="67">)</op:operator><name><name pos:line="423" pos:column="68">styleToSet</name><op:operator pos:line="423" pos:column="78">.</op:operator><name pos:line="423" pos:column="79">_fontName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="424" pos:column="1">#<cpp:directive pos:line="424" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="426" pos:column="9">int</name></type> <name pos:line="426" pos:column="13">fontStyle</name> <init pos:line="426" pos:column="23">= <expr><name><name pos:line="426" pos:column="25">styleToSet</name><op:operator pos:line="426" pos:column="35">.</op:operator><name pos:line="426" pos:column="36">_fontStyle</name></name></expr></init></decl>;</decl_stmt>
    <if pos:line="427" pos:column="5">if <condition pos:line="427" pos:column="8">(<expr><name pos:line="427" pos:column="9">fontStyle</name> <op:operator pos:line="427" pos:column="19">!=</op:operator> <name pos:line="427" pos:column="22">STYLE_NOT_USED</name></expr>)</condition><then pos:line="427" pos:column="37">
    <block pos:line="428" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="429" pos:column="9">execute</name><argument_list pos:line="429" pos:column="16">(<argument><expr><name pos:line="429" pos:column="17">SCI_STYLESETBOLD</name></expr></argument>,		<argument><expr><op:operator pos:line="429" pos:column="49">(</op:operator><name pos:line="429" pos:column="50">WPARAM</name><op:operator pos:line="429" pos:column="56">)</op:operator><name pos:line="429" pos:column="57">styleID</name></expr></argument>, <argument><expr><name pos:line="429" pos:column="66">fontStyle</name> <op:operator pos:line="429" pos:column="76">&amp;</op:operator> <name pos:line="429" pos:column="78">FONTSTYLE_BOLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="430" pos:column="9">execute</name><argument_list pos:line="430" pos:column="16">(<argument><expr><name pos:line="430" pos:column="17">SCI_STYLESETITALIC</name></expr></argument>,		<argument><expr><op:operator pos:line="430" pos:column="49">(</op:operator><name pos:line="430" pos:column="50">WPARAM</name><op:operator pos:line="430" pos:column="56">)</op:operator><name pos:line="430" pos:column="57">styleID</name></expr></argument>, <argument><expr><name pos:line="430" pos:column="66">fontStyle</name> <op:operator pos:line="430" pos:column="76">&amp;</op:operator> <name pos:line="430" pos:column="78">FONTSTYLE_ITALIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="431" pos:column="9">execute</name><argument_list pos:line="431" pos:column="16">(<argument><expr><name pos:line="431" pos:column="17">SCI_STYLESETUNDERLINE</name></expr></argument>,	<argument><expr><op:operator pos:line="431" pos:column="41">(</op:operator><name pos:line="431" pos:column="42">WPARAM</name><op:operator pos:line="431" pos:column="48">)</op:operator><name pos:line="431" pos:column="49">styleID</name></expr></argument>, <argument><expr><name pos:line="431" pos:column="58">fontStyle</name> <op:operator pos:line="431" pos:column="68">&amp;</op:operator> <name pos:line="431" pos:column="70">FONTSTYLE_UNDERLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

	<if pos:line="434" pos:column="9">if <condition pos:line="434" pos:column="12">(<expr><name><name pos:line="434" pos:column="13">styleToSet</name><op:operator pos:line="434" pos:column="23">.</op:operator><name pos:line="434" pos:column="24">_fontSize</name></name> <op:operator pos:line="434" pos:column="34">&gt;</op:operator> <lit:literal type="number" pos:line="434" pos:column="36">0</lit:literal></expr>)</condition><then pos:line="434" pos:column="38">
		<expr_stmt><expr><call><name pos:line="435" pos:column="17">execute</name><argument_list pos:line="435" pos:column="24">(<argument><expr><name pos:line="435" pos:column="25">SCI_STYLESETSIZE</name></expr></argument>, <argument><expr><name pos:line="435" pos:column="43">styleID</name></expr></argument>, <argument><expr><name><name pos:line="435" pos:column="52">styleToSet</name><op:operator pos:line="435" pos:column="62">.</op:operator><name pos:line="435" pos:column="63">_fontSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name pos:line="438" pos:column="1">void</name></type> <name><name pos:line="438" pos:column="6">ScintillaEditView</name><op:operator pos:line="438" pos:column="23">::</op:operator><name pos:line="438" pos:column="25">setHotspotStyle</name></name><parameter_list pos:line="438" pos:column="40">(<param><decl><type><name pos:line="438" pos:column="41">Style</name><type:modifier pos:line="438" pos:column="46">&amp;</type:modifier></type> <name pos:line="438" pos:column="48">styleToSet</name></decl></param>)</parameter_list>
<block pos:line="439" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="440" pos:column="9">StyleMap</name><type:modifier pos:line="440" pos:column="17">*</type:modifier></type> <name pos:line="440" pos:column="19">styleMap</name></decl>;</decl_stmt>
	<if pos:line="441" pos:column="9">if<condition pos:line="441" pos:column="11">( <expr><call><name><name pos:line="441" pos:column="13">_hotspotStyles</name><op:operator pos:line="441" pos:column="27">.</op:operator><name pos:line="441" pos:column="28">find</name></name><argument_list pos:line="441" pos:column="32">(<argument><expr><name pos:line="441" pos:column="33">_currentBuffer</name></expr></argument>)</argument_list></call> <op:operator pos:line="441" pos:column="49">==</op:operator> <call><name><name pos:line="441" pos:column="52">_hotspotStyles</name><op:operator pos:line="441" pos:column="66">.</op:operator><name pos:line="441" pos:column="67">end</name></name><argument_list pos:line="441" pos:column="70">()</argument_list></call></expr> )</condition><then pos:line="441" pos:column="74">
	<block pos:line="442" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="443" pos:column="17">_hotspotStyles</name><index pos:line="443" pos:column="31">[<expr><name pos:line="443" pos:column="32">_currentBuffer</name></expr>]</index></name> <op:operator pos:line="443" pos:column="48">=</op:operator> <op:operator pos:line="443" pos:column="50">new</op:operator> <name pos:line="443" pos:column="54">StyleMap</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="445" pos:column="9">styleMap</name> <op:operator pos:line="445" pos:column="18">=</op:operator> <name><name pos:line="445" pos:column="20">_hotspotStyles</name><index pos:line="445" pos:column="34">[<expr><name pos:line="445" pos:column="35">_currentBuffer</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="446" pos:column="9">(</op:operator><op:operator pos:line="446" pos:column="10">*</op:operator><name pos:line="446" pos:column="11">styleMap</name><op:operator pos:line="446" pos:column="19">)</op:operator><index pos:line="446" pos:column="20">[<expr><name><name pos:line="446" pos:column="21">styleToSet</name><op:operator pos:line="446" pos:column="31">.</op:operator><name pos:line="446" pos:column="32">_styleID</name></name></expr>]</index> <op:operator pos:line="446" pos:column="42">=</op:operator> <name pos:line="446" pos:column="44">styleToSet</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name pos:line="448" pos:column="9">setStyle</name><argument_list pos:line="448" pos:column="17">(<argument><expr><name pos:line="448" pos:column="18">styleToSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="451" pos:column="1">void</name></type> <name><name pos:line="451" pos:column="6">ScintillaEditView</name><op:operator pos:line="451" pos:column="23">::</op:operator><name pos:line="451" pos:column="25">setStyle</name></name><parameter_list pos:line="451" pos:column="33">(<param><decl><type><name pos:line="451" pos:column="34">Style</name></type> <name pos:line="451" pos:column="40">styleToSet</name></decl></param>)</parameter_list>
<block pos:line="452" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="453" pos:column="9">GlobalOverride</name> <type:modifier pos:line="453" pos:column="24">&amp;</type:modifier></type> <name pos:line="453" pos:column="26">go</name> <init pos:line="453" pos:column="29">= <expr><call><name><name pos:line="453" pos:column="31">_pParameter</name><op:operator pos:line="453" pos:column="42">-&gt;</op:operator><name pos:line="453" pos:column="44">getGlobalOverrideStyle</name></name><argument_list pos:line="453" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="455" pos:column="9">if <condition pos:line="455" pos:column="12">(<expr><call><name><name pos:line="455" pos:column="13">go</name><op:operator pos:line="455" pos:column="15">.</op:operator><name pos:line="455" pos:column="16">isEnable</name></name><argument_list pos:line="455" pos:column="24">()</argument_list></call></expr>)</condition><then pos:line="455" pos:column="27">
	<block pos:line="456" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="457" pos:column="17">StyleArray</name> <type:modifier pos:line="457" pos:column="28">&amp;</type:modifier></type> <name pos:line="457" pos:column="30">stylers</name> <init pos:line="457" pos:column="38">= <expr><call><name><name pos:line="457" pos:column="40">_pParameter</name><op:operator pos:line="457" pos:column="51">-&gt;</op:operator><name pos:line="457" pos:column="53">getMiscStylerArray</name></name><argument_list pos:line="457" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="458" pos:column="17">int</name></type> <name pos:line="458" pos:column="21">i</name> <init pos:line="458" pos:column="23">= <expr><call><name><name pos:line="458" pos:column="25">stylers</name><op:operator pos:line="458" pos:column="32">.</op:operator><name pos:line="458" pos:column="33">getStylerIndexByName</name></name><argument_list pos:line="458" pos:column="53">(<argument><expr><call><name pos:line="458" pos:column="54">TEXT</name><argument_list pos:line="458" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="458" pos:column="59">"Global override"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="459" pos:column="17">if <condition pos:line="459" pos:column="20">(<expr><name pos:line="459" pos:column="21">i</name> <op:operator pos:line="459" pos:column="23">!=</op:operator> <op:operator pos:line="459" pos:column="26">-</op:operator><lit:literal type="number" pos:line="459" pos:column="27">1</lit:literal></expr>)</condition><then pos:line="459" pos:column="29">
		<block pos:line="460" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="461" pos:column="25">Style</name> <type:modifier pos:line="461" pos:column="31">&amp;</type:modifier></type> <name pos:line="461" pos:column="33">style</name> <init pos:line="461" pos:column="39">= <expr><call><name><name pos:line="461" pos:column="41">stylers</name><op:operator pos:line="461" pos:column="48">.</op:operator><name pos:line="461" pos:column="49">getStyler</name></name><argument_list pos:line="461" pos:column="58">(<argument><expr><name pos:line="461" pos:column="59">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="463" pos:column="25">if <condition pos:line="463" pos:column="28">(<expr><name><name pos:line="463" pos:column="29">go</name><op:operator pos:line="463" pos:column="31">.</op:operator><name pos:line="463" pos:column="32">enableFg</name></name></expr>)</condition><then pos:line="463" pos:column="41"> <block pos:line="463" pos:column="42">{
				<if pos:line="464" pos:column="33">if <condition pos:line="464" pos:column="36">(<expr><name><name pos:line="464" pos:column="37">style</name><op:operator pos:line="464" pos:column="42">.</op:operator><name pos:line="464" pos:column="43">_colorStyle</name></name> <op:operator pos:line="464" pos:column="55">&amp;</op:operator> <name pos:line="464" pos:column="57">COLORSTYLE_FOREGROUND</name></expr>)</condition><then pos:line="464" pos:column="79"> <block pos:line="464" pos:column="80">{
					<expr_stmt><expr><name><name pos:line="465" pos:column="41">styleToSet</name><op:operator pos:line="465" pos:column="51">.</op:operator><name pos:line="465" pos:column="52">_colorStyle</name></name> <op:operator pos:line="465" pos:column="64">|=</op:operator> <name pos:line="465" pos:column="67">COLORSTYLE_FOREGROUND</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="466" pos:column="41">styleToSet</name><op:operator pos:line="466" pos:column="51">.</op:operator><name pos:line="466" pos:column="52">_fgColor</name></name> <op:operator pos:line="466" pos:column="61">=</op:operator> <name><name pos:line="466" pos:column="63">style</name><op:operator pos:line="466" pos:column="68">.</op:operator><name pos:line="466" pos:column="69">_fgColor</name></name></expr>;</expr_stmt>
				}</block></then> <else pos:line="467" pos:column="35">else <block pos:line="467" pos:column="40">{
					<if pos:line="468" pos:column="41">if <condition pos:line="468" pos:column="44">(<expr><name><name pos:line="468" pos:column="45">styleToSet</name><op:operator pos:line="468" pos:column="55">.</op:operator><name pos:line="468" pos:column="56">_styleID</name></name> <op:operator pos:line="468" pos:column="65">==</op:operator> <name pos:line="468" pos:column="68">STYLE_DEFAULT</name></expr>)</condition><then pos:line="468" pos:column="82"> <block pos:line="468" pos:column="83">{	<comment type="line" pos:line="468" pos:column="89">//if global is set to transparent, use default style color</comment>
						<expr_stmt><expr><name><name pos:line="469" pos:column="49">styleToSet</name><op:operator pos:line="469" pos:column="59">.</op:operator><name pos:line="469" pos:column="60">_colorStyle</name></name> <op:operator pos:line="469" pos:column="72">|=</op:operator> <name pos:line="469" pos:column="75">COLORSTYLE_FOREGROUND</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="470" pos:column="43">else <block pos:line="470" pos:column="48">{
						<expr_stmt><expr><name><name pos:line="471" pos:column="49">styleToSet</name><op:operator pos:line="471" pos:column="59">.</op:operator><name pos:line="471" pos:column="60">_colorStyle</name></name> <op:operator pos:line="471" pos:column="72">&amp;=</op:operator> <op:operator pos:line="471" pos:column="75">~</op:operator><name pos:line="471" pos:column="76">COLORSTYLE_FOREGROUND</name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></else></if>
			}</block></then></if>
			<if pos:line="475" pos:column="25">if <condition pos:line="475" pos:column="28">(<expr><name><name pos:line="475" pos:column="29">go</name><op:operator pos:line="475" pos:column="31">.</op:operator><name pos:line="475" pos:column="32">enableBg</name></name></expr>)</condition><then pos:line="475" pos:column="41"> <block pos:line="475" pos:column="42">{
				<if pos:line="476" pos:column="33">if <condition pos:line="476" pos:column="36">(<expr><name><name pos:line="476" pos:column="37">style</name><op:operator pos:line="476" pos:column="42">.</op:operator><name pos:line="476" pos:column="43">_colorStyle</name></name> <op:operator pos:line="476" pos:column="55">&amp;</op:operator> <name pos:line="476" pos:column="57">COLORSTYLE_BACKGROUND</name></expr>)</condition><then pos:line="476" pos:column="79"> <block pos:line="476" pos:column="80">{
					<expr_stmt><expr><name><name pos:line="477" pos:column="41">styleToSet</name><op:operator pos:line="477" pos:column="51">.</op:operator><name pos:line="477" pos:column="52">_colorStyle</name></name> <op:operator pos:line="477" pos:column="64">|=</op:operator> <name pos:line="477" pos:column="67">COLORSTYLE_BACKGROUND</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="478" pos:column="41">styleToSet</name><op:operator pos:line="478" pos:column="51">.</op:operator><name pos:line="478" pos:column="52">_bgColor</name></name> <op:operator pos:line="478" pos:column="61">=</op:operator> <name><name pos:line="478" pos:column="63">style</name><op:operator pos:line="478" pos:column="68">.</op:operator><name pos:line="478" pos:column="69">_bgColor</name></name></expr>;</expr_stmt>
				}</block></then> <else pos:line="479" pos:column="35">else <block pos:line="479" pos:column="40">{
					<if pos:line="480" pos:column="41">if <condition pos:line="480" pos:column="44">(<expr><name><name pos:line="480" pos:column="45">styleToSet</name><op:operator pos:line="480" pos:column="55">.</op:operator><name pos:line="480" pos:column="56">_styleID</name></name> <op:operator pos:line="480" pos:column="65">==</op:operator> <name pos:line="480" pos:column="68">STYLE_DEFAULT</name></expr>)</condition><then pos:line="480" pos:column="82"> <block pos:line="480" pos:column="83">{	<comment type="line" pos:line="480" pos:column="89">//if global is set to transparent, use default style color</comment>
						<expr_stmt><expr><name><name pos:line="481" pos:column="49">styleToSet</name><op:operator pos:line="481" pos:column="59">.</op:operator><name pos:line="481" pos:column="60">_colorStyle</name></name> <op:operator pos:line="481" pos:column="72">|=</op:operator> <name pos:line="481" pos:column="75">COLORSTYLE_BACKGROUND</name></expr>;</expr_stmt>
					}</block></then> <else pos:line="482" pos:column="43">else <block pos:line="482" pos:column="48">{
						<expr_stmt><expr><name><name pos:line="483" pos:column="49">styleToSet</name><op:operator pos:line="483" pos:column="59">.</op:operator><name pos:line="483" pos:column="60">_colorStyle</name></name> <op:operator pos:line="483" pos:column="72">&amp;=</op:operator> <op:operator pos:line="483" pos:column="75">~</op:operator><name pos:line="483" pos:column="76">COLORSTYLE_BACKGROUND</name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></else></if>
			}</block></then></if>
			<if pos:line="487" pos:column="25">if <condition pos:line="487" pos:column="28">(<expr><name><name pos:line="487" pos:column="29">go</name><op:operator pos:line="487" pos:column="31">.</op:operator><name pos:line="487" pos:column="32">enableFont</name></name> <op:operator pos:line="487" pos:column="43">&amp;&amp;</op:operator> <name><name pos:line="487" pos:column="46">style</name><op:operator pos:line="487" pos:column="51">.</op:operator><name pos:line="487" pos:column="52">_fontName</name></name> <op:operator pos:line="487" pos:column="62">&amp;&amp;</op:operator> <name><name pos:line="487" pos:column="65">style</name><op:operator pos:line="487" pos:column="70">.</op:operator><name pos:line="487" pos:column="71">_fontName</name><index pos:line="487" pos:column="80">[<expr><lit:literal type="number" pos:line="487" pos:column="81">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="487" pos:column="84">
				<expr_stmt><expr><name><name pos:line="488" pos:column="33">styleToSet</name><op:operator pos:line="488" pos:column="43">.</op:operator><name pos:line="488" pos:column="44">_fontName</name></name> <op:operator pos:line="488" pos:column="54">=</op:operator> <name><name pos:line="488" pos:column="56">style</name><op:operator pos:line="488" pos:column="61">.</op:operator><name pos:line="488" pos:column="62">_fontName</name></name></expr>;</expr_stmt></then></if>
			<if pos:line="489" pos:column="25">if <condition pos:line="489" pos:column="28">(<expr><name><name pos:line="489" pos:column="29">go</name><op:operator pos:line="489" pos:column="31">.</op:operator><name pos:line="489" pos:column="32">enableFontSize</name></name> <op:operator pos:line="489" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="489" pos:column="50">(</op:operator><name><name pos:line="489" pos:column="51">style</name><op:operator pos:line="489" pos:column="56">.</op:operator><name pos:line="489" pos:column="57">_fontSize</name></name> <op:operator pos:line="489" pos:column="67">&gt;</op:operator> <lit:literal type="number" pos:line="489" pos:column="69">0</lit:literal><op:operator pos:line="489" pos:column="70">)</op:operator></expr>)</condition><then pos:line="489" pos:column="72">
				<expr_stmt><expr><name><name pos:line="490" pos:column="33">styleToSet</name><op:operator pos:line="490" pos:column="43">.</op:operator><name pos:line="490" pos:column="44">_fontSize</name></name> <op:operator pos:line="490" pos:column="54">=</op:operator> <name><name pos:line="490" pos:column="56">style</name><op:operator pos:line="490" pos:column="61">.</op:operator><name pos:line="490" pos:column="62">_fontSize</name></name></expr>;</expr_stmt></then></if>

			<if pos:line="492" pos:column="25">if <condition pos:line="492" pos:column="28">(<expr><name><name pos:line="492" pos:column="29">style</name><op:operator pos:line="492" pos:column="34">.</op:operator><name pos:line="492" pos:column="35">_fontStyle</name></name> <op:operator pos:line="492" pos:column="46">!=</op:operator> <name pos:line="492" pos:column="49">STYLE_NOT_USED</name></expr>)</condition><then pos:line="492" pos:column="64">
			<block pos:line="493" pos:column="25">{	
				<if pos:line="494" pos:column="33">if <condition pos:line="494" pos:column="36">(<expr><name><name pos:line="494" pos:column="37">go</name><op:operator pos:line="494" pos:column="39">.</op:operator><name pos:line="494" pos:column="40">enableBold</name></name></expr>)</condition><then pos:line="494" pos:column="51">
				<block pos:line="495" pos:column="33">{
					<if pos:line="496" pos:column="41">if <condition pos:line="496" pos:column="44">(<expr><name><name pos:line="496" pos:column="45">style</name><op:operator pos:line="496" pos:column="50">.</op:operator><name pos:line="496" pos:column="51">_fontStyle</name></name> <op:operator pos:line="496" pos:column="62">&amp;</op:operator> <name pos:line="496" pos:column="64">FONTSTYLE_BOLD</name></expr>)</condition><then pos:line="496" pos:column="79">
						<expr_stmt><expr><name><name pos:line="497" pos:column="49">styleToSet</name><op:operator pos:line="497" pos:column="59">.</op:operator><name pos:line="497" pos:column="60">_fontStyle</name></name> <op:operator pos:line="497" pos:column="71">|=</op:operator> <name pos:line="497" pos:column="74">FONTSTYLE_BOLD</name></expr>;</expr_stmt></then>
					<else pos:line="498" pos:column="41">else
						<expr_stmt><expr><name><name pos:line="499" pos:column="49">styleToSet</name><op:operator pos:line="499" pos:column="59">.</op:operator><name pos:line="499" pos:column="60">_fontStyle</name></name> <op:operator pos:line="499" pos:column="71">&amp;=</op:operator> <op:operator pos:line="499" pos:column="74">~</op:operator><name pos:line="499" pos:column="75">FONTSTYLE_BOLD</name></expr>;</expr_stmt></else></if>
				}</block></then></if>
				<if pos:line="501" pos:column="33">if <condition pos:line="501" pos:column="36">(<expr><name><name pos:line="501" pos:column="37">go</name><op:operator pos:line="501" pos:column="39">.</op:operator><name pos:line="501" pos:column="40">enableItalic</name></name></expr>)</condition><then pos:line="501" pos:column="53">
				<block pos:line="502" pos:column="33">{
					<if pos:line="503" pos:column="41">if <condition pos:line="503" pos:column="44">(<expr><name><name pos:line="503" pos:column="45">style</name><op:operator pos:line="503" pos:column="50">.</op:operator><name pos:line="503" pos:column="51">_fontStyle</name></name> <op:operator pos:line="503" pos:column="62">&amp;</op:operator> <name pos:line="503" pos:column="64">FONTSTYLE_ITALIC</name></expr>)</condition><then pos:line="503" pos:column="81">
						<expr_stmt><expr><name><name pos:line="504" pos:column="49">styleToSet</name><op:operator pos:line="504" pos:column="59">.</op:operator><name pos:line="504" pos:column="60">_fontStyle</name></name> <op:operator pos:line="504" pos:column="71">|=</op:operator> <name pos:line="504" pos:column="74">FONTSTYLE_ITALIC</name></expr>;</expr_stmt></then>
					<else pos:line="505" pos:column="41">else 
						<expr_stmt><expr><name><name pos:line="506" pos:column="49">styleToSet</name><op:operator pos:line="506" pos:column="59">.</op:operator><name pos:line="506" pos:column="60">_fontStyle</name></name> <op:operator pos:line="506" pos:column="71">&amp;=</op:operator> <op:operator pos:line="506" pos:column="74">~</op:operator><name pos:line="506" pos:column="75">FONTSTYLE_ITALIC</name></expr>;</expr_stmt></else></if>
				}</block></then></if>
				<if pos:line="508" pos:column="33">if <condition pos:line="508" pos:column="36">(<expr><name><name pos:line="508" pos:column="37">go</name><op:operator pos:line="508" pos:column="39">.</op:operator><name pos:line="508" pos:column="40">enableUnderLine</name></name></expr>)</condition><then pos:line="508" pos:column="56">
				<block pos:line="509" pos:column="33">{
					<if pos:line="510" pos:column="41">if <condition pos:line="510" pos:column="44">(<expr><name><name pos:line="510" pos:column="45">style</name><op:operator pos:line="510" pos:column="50">.</op:operator><name pos:line="510" pos:column="51">_fontStyle</name></name> <op:operator pos:line="510" pos:column="62">&amp;</op:operator> <name pos:line="510" pos:column="64">FONTSTYLE_UNDERLINE</name></expr>)</condition><then pos:line="510" pos:column="84">
						<expr_stmt><expr><name><name pos:line="511" pos:column="49">styleToSet</name><op:operator pos:line="511" pos:column="59">.</op:operator><name pos:line="511" pos:column="60">_fontStyle</name></name> <op:operator pos:line="511" pos:column="71">|=</op:operator> <name pos:line="511" pos:column="74">FONTSTYLE_UNDERLINE</name></expr>;</expr_stmt></then>
					<else pos:line="512" pos:column="41">else
						<expr_stmt><expr><name><name pos:line="513" pos:column="49">styleToSet</name><op:operator pos:line="513" pos:column="59">.</op:operator><name pos:line="513" pos:column="60">_fontStyle</name></name> <op:operator pos:line="513" pos:column="71">&amp;=</op:operator> <op:operator pos:line="513" pos:column="74">~</op:operator><name pos:line="513" pos:column="75">FONTSTYLE_UNDERLINE</name></expr>;</expr_stmt></else></if>
				}</block></then></if>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="518" pos:column="9">setSpecialStyle</name><argument_list pos:line="518" pos:column="24">(<argument><expr><name pos:line="518" pos:column="25">styleToSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="522" pos:column="1">void</name></type> <name><name pos:line="522" pos:column="6">ScintillaEditView</name><op:operator pos:line="522" pos:column="23">::</op:operator><name pos:line="522" pos:column="25">setXmlLexer</name></name><parameter_list pos:line="522" pos:column="36">(<param><decl><type><name pos:line="522" pos:column="37">LangType</name></type> <name pos:line="522" pos:column="46">type</name></decl></param>)</parameter_list>
<block pos:line="523" pos:column="1">{
	<if pos:line="524" pos:column="9">if <condition pos:line="524" pos:column="12">(<expr><name pos:line="524" pos:column="13">type</name> <op:operator pos:line="524" pos:column="18">==</op:operator> <name pos:line="524" pos:column="21">L_XML</name></expr>)</condition><then pos:line="524" pos:column="27">
	<block pos:line="525" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="526" pos:column="9">execute</name><argument_list pos:line="526" pos:column="16">(<argument><expr><name pos:line="526" pos:column="17">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="526" pos:column="31">SCLEX_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for pos:line="527" pos:column="17">for (<init><decl><type><name pos:line="527" pos:column="22">int</name></type> <name pos:line="527" pos:column="26">i</name> <init pos:line="527" pos:column="28">= <expr><lit:literal type="number" pos:line="527" pos:column="30">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="527" pos:column="34">i</name> <op:operator pos:line="527" pos:column="36">&lt;</op:operator> <lit:literal type="number" pos:line="527" pos:column="38">4</lit:literal></expr> ;</condition> <incr><expr><name pos:line="527" pos:column="42">i</name><op:operator pos:line="527" pos:column="43">++</op:operator></expr></incr>)
			<expr_stmt><expr><call><name pos:line="528" pos:column="25">execute</name><argument_list pos:line="528" pos:column="32">(<argument><expr><name pos:line="528" pos:column="33">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><name pos:line="528" pos:column="50">i</name></expr></argument>, <argument><expr><call><name><name pos:line="528" pos:column="53">reinterpret_cast</name><argument_list pos:line="528" pos:column="69">&lt;<argument><expr><name pos:line="528" pos:column="70">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="528" pos:column="77">(<argument><expr><call><name pos:line="528" pos:column="78">TEXT</name><argument_list pos:line="528" pos:column="82">(<argument><expr><lit:literal type="string" pos:line="528" pos:column="83">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

        <expr_stmt><expr><call><name pos:line="530" pos:column="9">makeStyle</name><argument_list pos:line="530" pos:column="18">(<argument><expr><name pos:line="530" pos:column="19">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="532" pos:column="9">else <if pos:line="532" pos:column="14">if <condition pos:line="532" pos:column="17">(<expr><op:operator pos:line="532" pos:column="18">(</op:operator><name pos:line="532" pos:column="19">type</name> <op:operator pos:line="532" pos:column="24">==</op:operator> <name pos:line="532" pos:column="27">L_HTML</name><op:operator pos:line="532" pos:column="33">)</op:operator> <op:operator pos:line="532" pos:column="35">||</op:operator> <op:operator pos:line="532" pos:column="38">(</op:operator><name pos:line="532" pos:column="39">type</name> <op:operator pos:line="532" pos:column="44">==</op:operator> <name pos:line="532" pos:column="47">L_PHP</name><op:operator pos:line="532" pos:column="52">)</op:operator> <op:operator pos:line="532" pos:column="54">||</op:operator> <op:operator pos:line="532" pos:column="57">(</op:operator><name pos:line="532" pos:column="58">type</name> <op:operator pos:line="532" pos:column="63">==</op:operator> <name pos:line="532" pos:column="66">L_ASP</name><op:operator pos:line="532" pos:column="71">)</op:operator> <op:operator pos:line="532" pos:column="73">||</op:operator> <op:operator pos:line="532" pos:column="76">(</op:operator><name pos:line="532" pos:column="77">type</name> <op:operator pos:line="532" pos:column="82">==</op:operator> <name pos:line="532" pos:column="85">L_JSP</name><op:operator pos:line="532" pos:column="90">)</op:operator></expr>)</condition><then pos:line="532" pos:column="92">
	<block pos:line="533" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="534" pos:column="9">execute</name><argument_list pos:line="534" pos:column="16">(<argument><expr><name pos:line="534" pos:column="17">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="534" pos:column="31">SCLEX_HTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier pos:line="535" pos:column="9">const</specifier> <name pos:line="535" pos:column="15">TCHAR</name> <type:modifier pos:line="535" pos:column="21">*</type:modifier></type><name pos:line="535" pos:column="22">htmlKeyWords_generic</name> <init pos:line="535" pos:column="43">=<expr><call><name><name pos:line="535" pos:column="44">_pParameter</name><op:operator pos:line="535" pos:column="55">-&gt;</op:operator><name pos:line="535" pos:column="57">getWordList</name></name><argument_list pos:line="535" pos:column="68">(<argument><expr><name pos:line="535" pos:column="69">L_HTML</name></expr></argument>, <argument><expr><name pos:line="535" pos:column="77">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:line="537" pos:column="1">#<cpp:directive pos:line="537" pos:column="2">ifdef</cpp:directive> <name pos:line="537" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name pos:line="538" pos:column="17">WcharMbcsConvertor</name> <type:modifier pos:line="538" pos:column="36">*</type:modifier></type><name pos:line="538" pos:column="37">wmc</name> <init pos:line="538" pos:column="41">= <expr><call><name><name pos:line="538" pos:column="43">WcharMbcsConvertor</name><op:operator pos:line="538" pos:column="61">::</op:operator><name pos:line="538" pos:column="63">getInstance</name></name><argument_list pos:line="538" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="539" pos:column="17">const</specifier> <name pos:line="539" pos:column="23">char</name> <type:modifier pos:line="539" pos:column="28">*</type:modifier></type><name pos:line="539" pos:column="29">htmlKeyWords</name> <init pos:line="539" pos:column="42">= <expr><call><name><name pos:line="539" pos:column="44">wmc</name><op:operator pos:line="539" pos:column="47">-&gt;</op:operator><name pos:line="539" pos:column="49">wchar2char</name></name><argument_list pos:line="539" pos:column="59">(<argument><expr><name pos:line="539" pos:column="60">htmlKeyWords_generic</name></expr></argument>, <argument><expr><name pos:line="539" pos:column="82">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="540" pos:column="17">execute</name><argument_list pos:line="540" pos:column="24">(<argument><expr><name pos:line="540" pos:column="25">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="540" pos:column="42">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="540" pos:column="45">reinterpret_cast</name><argument_list pos:line="540" pos:column="61">&lt;<argument><expr><name pos:line="540" pos:column="62">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="540" pos:column="69">(<argument><expr><name pos:line="540" pos:column="70">htmlKeyWords</name><op:operator pos:line="540" pos:column="82">?</op:operator><name pos:line="540" pos:column="83">htmlKeyWords</name><op:operator pos:line="540" pos:column="95">:</op:operator><lit:literal type="string" pos:line="540" pos:column="96">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="541" pos:column="1">#<cpp:directive pos:line="541" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="542" pos:column="17">execute</name><argument_list pos:line="542" pos:column="24">(<argument><expr><name pos:line="542" pos:column="25">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="542" pos:column="42">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="542" pos:column="45">reinterpret_cast</name><argument_list pos:line="542" pos:column="61">&lt;<argument><expr><name pos:line="542" pos:column="62">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="542" pos:column="69">(<argument><expr><name pos:line="542" pos:column="70">htmlKeyWords_generic</name><op:operator pos:line="542" pos:column="90">?</op:operator><name pos:line="542" pos:column="91">htmlKeyWords_generic</name><op:operator pos:line="542" pos:column="111">:</op:operator><lit:literal type="string" pos:line="542" pos:column="112">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="543" pos:column="1">#<cpp:directive pos:line="543" pos:column="2">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name pos:line="544" pos:column="17">makeStyle</name><argument_list pos:line="544" pos:column="26">(<argument><expr><name pos:line="544" pos:column="27">L_HTML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
        <expr_stmt><expr><call><name pos:line="546" pos:column="9">setEmbeddedJSLexer</name><argument_list pos:line="546" pos:column="27">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="547" pos:column="9">setEmbeddedPhpLexer</name><argument_list pos:line="547" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="548" pos:column="17">setEmbeddedAspLexer</name><argument_list pos:line="548" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></else></if>
	<expr_stmt><expr><call><name pos:line="550" pos:column="9">execute</name><argument_list pos:line="550" pos:column="16">(<argument><expr><name pos:line="550" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="550" pos:column="34">reinterpret_cast</name><argument_list pos:line="550" pos:column="50">&lt;<argument><expr><name pos:line="550" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="550" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="550" pos:column="59">"fold"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="550" pos:column="68">reinterpret_cast</name><argument_list pos:line="550" pos:column="84">&lt;<argument><expr><name pos:line="550" pos:column="85">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="550" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="550" pos:column="93">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="551" pos:column="9">execute</name><argument_list pos:line="551" pos:column="16">(<argument><expr><name pos:line="551" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="551" pos:column="34">reinterpret_cast</name><argument_list pos:line="551" pos:column="50">&lt;<argument><expr><name pos:line="551" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="551" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="551" pos:column="59">"fold.compact"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="551" pos:column="76">reinterpret_cast</name><argument_list pos:line="551" pos:column="92">&lt;<argument><expr><name pos:line="551" pos:column="93">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="551" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="551" pos:column="101">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="552" pos:column="9">execute</name><argument_list pos:line="552" pos:column="16">(<argument><expr><name pos:line="552" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="552" pos:column="34">reinterpret_cast</name><argument_list pos:line="552" pos:column="50">&lt;<argument><expr><name pos:line="552" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="552" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="552" pos:column="59">"fold.html"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="552" pos:column="73">reinterpret_cast</name><argument_list pos:line="552" pos:column="89">&lt;<argument><expr><name pos:line="552" pos:column="90">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="552" pos:column="97">(<argument><expr><lit:literal type="string" pos:line="552" pos:column="98">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="553" pos:column="9">// This allow to fold comment strem in php/javascript code</comment>
	<expr_stmt><expr><call><name pos:line="554" pos:column="9">execute</name><argument_list pos:line="554" pos:column="16">(<argument><expr><name pos:line="554" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="554" pos:column="34">reinterpret_cast</name><argument_list pos:line="554" pos:column="50">&lt;<argument><expr><name pos:line="554" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="554" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="554" pos:column="59">"fold.hypertext.comment"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="554" pos:column="86">reinterpret_cast</name><argument_list pos:line="554" pos:column="102">&lt;<argument><expr><name pos:line="554" pos:column="103">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="554" pos:column="110">(<argument><expr><lit:literal type="string" pos:line="554" pos:column="111">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="557" pos:column="1">void</name></type> <name><name pos:line="557" pos:column="6">ScintillaEditView</name><op:operator pos:line="557" pos:column="23">::</op:operator><name pos:line="557" pos:column="25">setEmbeddedJSLexer</name></name><parameter_list pos:line="557" pos:column="43">()</parameter_list>
<block pos:line="558" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="559" pos:column="9">const</specifier> <name pos:line="559" pos:column="15">TCHAR</name> <type:modifier pos:line="559" pos:column="21">*</type:modifier></type><name><name pos:line="559" pos:column="22">pKwArray</name><index pos:line="559" pos:column="30">[<expr><lit:literal type="number" pos:line="559" pos:column="31">10</lit:literal></expr>]</index></name> <init pos:line="559" pos:column="35">= <expr><block pos:line="559" pos:column="37">{<expr><name pos:line="559" pos:column="38">NULL</name></expr>, <expr><name pos:line="559" pos:column="44">NULL</name></expr>, <expr><name pos:line="559" pos:column="50">NULL</name></expr>, <expr><name pos:line="559" pos:column="56">NULL</name></expr>, <expr><name pos:line="559" pos:column="62">NULL</name></expr>, <expr><name pos:line="559" pos:column="68">NULL</name></expr>, <expr><name pos:line="559" pos:column="74">NULL</name></expr>, <expr><name pos:line="559" pos:column="80">NULL</name></expr>, <expr><name pos:line="559" pos:column="86">NULL</name></expr>, <expr><name pos:line="559" pos:column="92">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="560" pos:column="9">makeStyle</name><argument_list pos:line="560" pos:column="18">(<argument><expr><name pos:line="560" pos:column="19">L_JS</name></expr></argument>, <argument><expr><name pos:line="560" pos:column="25">pKwArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name pos:line="562" pos:column="9">basic_string</name><argument_list pos:line="562" pos:column="21">&lt;<argument><expr><name pos:line="562" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="562" pos:column="28">keywordList</name><argument_list pos:line="562" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="562" pos:column="40">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="563" pos:column="9">if <condition pos:line="563" pos:column="12">(<expr><name><name pos:line="563" pos:column="13">pKwArray</name><index pos:line="563" pos:column="21">[<expr><name pos:line="563" pos:column="22">LANG_INDEX_INSTR</name></expr>]</index></name></expr>)</condition><then pos:line="563" pos:column="40">
	<block pos:line="564" pos:column="9">{
<cpp:ifdef pos:line="565" pos:column="1">#<cpp:directive pos:line="565" pos:column="2">ifdef</cpp:directive> <name pos:line="565" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name pos:line="566" pos:column="17">basic_string</name><argument_list pos:line="566" pos:column="29">&lt;<argument><expr><name pos:line="566" pos:column="30">wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="566" pos:column="39">kwlW</name> <init pos:line="566" pos:column="44">= <expr><name><name pos:line="566" pos:column="46">pKwArray</name><index pos:line="566" pos:column="54">[<expr><name pos:line="566" pos:column="55">LANG_INDEX_INSTR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="567" pos:column="17">keywordList</name> <op:operator pos:line="567" pos:column="29">=</op:operator> <call><name pos:line="567" pos:column="31">wstring2string</name><argument_list pos:line="567" pos:column="45">(<argument><expr><name pos:line="567" pos:column="46">kwlW</name></expr></argument>, <argument><expr><name pos:line="567" pos:column="52">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="568" pos:column="1">#<cpp:directive pos:line="568" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="569" pos:column="17">keywordList</name> <op:operator pos:line="569" pos:column="29">=</op:operator> <name><name pos:line="569" pos:column="31">pKwArray</name><index pos:line="569" pos:column="39">[<expr><name pos:line="569" pos:column="40">LANG_INDEX_INSTR</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="570" pos:column="1">#<cpp:directive pos:line="570" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="573" pos:column="9">execute</name><argument_list pos:line="573" pos:column="16">(<argument><expr><name pos:line="573" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="573" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="573" pos:column="37">(</op:operator><name pos:line="573" pos:column="38">LPARAM</name><op:operator pos:line="573" pos:column="44">)</op:operator><call><name pos:line="573" pos:column="45">getCompleteKeywordList</name><argument_list pos:line="573" pos:column="67">(<argument><expr><name pos:line="573" pos:column="68">keywordList</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="81">L_JS</name></expr></argument>, <argument><expr><name pos:line="573" pos:column="87">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="574" pos:column="9">execute</name><argument_list pos:line="574" pos:column="16">(<argument><expr><name pos:line="574" pos:column="17">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="574" pos:column="40">SCE_HJ_DEFAULT</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="574" pos:column="56">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="575" pos:column="9">execute</name><argument_list pos:line="575" pos:column="16">(<argument><expr><name pos:line="575" pos:column="17">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="575" pos:column="40">SCE_HJ_COMMENT</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="575" pos:column="56">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="576" pos:column="9">execute</name><argument_list pos:line="576" pos:column="16">(<argument><expr><name pos:line="576" pos:column="17">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="576" pos:column="40">SCE_HJ_COMMENTDOC</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="576" pos:column="59">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="579" pos:column="1">void</name></type> <name><name pos:line="579" pos:column="6">ScintillaEditView</name><op:operator pos:line="579" pos:column="23">::</op:operator><name pos:line="579" pos:column="25">setEmbeddedPhpLexer</name></name><parameter_list pos:line="579" pos:column="44">()</parameter_list>
<block pos:line="580" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="581" pos:column="9">const</specifier> <name pos:line="581" pos:column="15">TCHAR</name> <type:modifier pos:line="581" pos:column="21">*</type:modifier></type><name><name pos:line="581" pos:column="22">pKwArray</name><index pos:line="581" pos:column="30">[<expr><lit:literal type="number" pos:line="581" pos:column="31">10</lit:literal></expr>]</index></name> <init pos:line="581" pos:column="35">= <expr><block pos:line="581" pos:column="37">{<expr><name pos:line="581" pos:column="38">NULL</name></expr>, <expr><name pos:line="581" pos:column="44">NULL</name></expr>, <expr><name pos:line="581" pos:column="50">NULL</name></expr>, <expr><name pos:line="581" pos:column="56">NULL</name></expr>, <expr><name pos:line="581" pos:column="62">NULL</name></expr>, <expr><name pos:line="581" pos:column="68">NULL</name></expr>, <expr><name pos:line="581" pos:column="74">NULL</name></expr>, <expr><name pos:line="581" pos:column="80">NULL</name></expr>, <expr><name pos:line="581" pos:column="86">NULL</name></expr>, <expr><name pos:line="581" pos:column="92">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="582" pos:column="9">makeStyle</name><argument_list pos:line="582" pos:column="18">(<argument><expr><name pos:line="582" pos:column="19">L_PHP</name></expr></argument>, <argument><expr><name pos:line="582" pos:column="26">pKwArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name pos:line="584" pos:column="9">basic_string</name><argument_list pos:line="584" pos:column="21">&lt;<argument><expr><name pos:line="584" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="584" pos:column="28">keywordList</name><argument_list pos:line="584" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="584" pos:column="40">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="585" pos:column="9">if <condition pos:line="585" pos:column="12">(<expr><name><name pos:line="585" pos:column="13">pKwArray</name><index pos:line="585" pos:column="21">[<expr><name pos:line="585" pos:column="22">LANG_INDEX_INSTR</name></expr>]</index></name></expr>)</condition><then pos:line="585" pos:column="40">
	<block pos:line="586" pos:column="9">{
<cpp:ifdef pos:line="587" pos:column="1">#<cpp:directive pos:line="587" pos:column="2">ifdef</cpp:directive> <name pos:line="587" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name pos:line="588" pos:column="17">basic_string</name><argument_list pos:line="588" pos:column="29">&lt;<argument><expr><name pos:line="588" pos:column="30">wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="588" pos:column="39">kwlW</name> <init pos:line="588" pos:column="44">= <expr><name><name pos:line="588" pos:column="46">pKwArray</name><index pos:line="588" pos:column="54">[<expr><name pos:line="588" pos:column="55">LANG_INDEX_INSTR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="589" pos:column="17">keywordList</name> <op:operator pos:line="589" pos:column="29">=</op:operator> <call><name pos:line="589" pos:column="31">wstring2string</name><argument_list pos:line="589" pos:column="45">(<argument><expr><name pos:line="589" pos:column="46">kwlW</name></expr></argument>, <argument><expr><name pos:line="589" pos:column="52">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="590" pos:column="1">#<cpp:directive pos:line="590" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="591" pos:column="17">keywordList</name> <op:operator pos:line="591" pos:column="29">=</op:operator> <name><name pos:line="591" pos:column="31">pKwArray</name><index pos:line="591" pos:column="39">[<expr><name pos:line="591" pos:column="40">LANG_INDEX_INSTR</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="592" pos:column="1">#<cpp:directive pos:line="592" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="595" pos:column="9">execute</name><argument_list pos:line="595" pos:column="16">(<argument><expr><name pos:line="595" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="595" pos:column="34">4</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="595" pos:column="37">(</op:operator><name pos:line="595" pos:column="38">LPARAM</name><op:operator pos:line="595" pos:column="44">)</op:operator><call><name pos:line="595" pos:column="45">getCompleteKeywordList</name><argument_list pos:line="595" pos:column="67">(<argument><expr><name pos:line="595" pos:column="68">keywordList</name></expr></argument>, <argument><expr><name pos:line="595" pos:column="81">L_PHP</name></expr></argument>, <argument><expr><name pos:line="595" pos:column="88">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="597" pos:column="9">execute</name><argument_list pos:line="597" pos:column="16">(<argument><expr><name pos:line="597" pos:column="17">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="597" pos:column="40">SCE_HPHP_DEFAULT</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="597" pos:column="58">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="598" pos:column="9">execute</name><argument_list pos:line="598" pos:column="16">(<argument><expr><name pos:line="598" pos:column="17">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="598" pos:column="40">SCE_HPHP_COMMENT</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="598" pos:column="58">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="601" pos:column="1">void</name></type> <name><name pos:line="601" pos:column="6">ScintillaEditView</name><op:operator pos:line="601" pos:column="23">::</op:operator><name pos:line="601" pos:column="25">setEmbeddedAspLexer</name></name><parameter_list pos:line="601" pos:column="44">()</parameter_list>
<block pos:line="602" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="603" pos:column="9">const</specifier> <name pos:line="603" pos:column="15">TCHAR</name> <type:modifier pos:line="603" pos:column="21">*</type:modifier></type><name><name pos:line="603" pos:column="22">pKwArray</name><index pos:line="603" pos:column="30">[<expr><lit:literal type="number" pos:line="603" pos:column="31">10</lit:literal></expr>]</index></name> <init pos:line="603" pos:column="35">= <expr><block pos:line="603" pos:column="37">{<expr><name pos:line="603" pos:column="38">NULL</name></expr>, <expr><name pos:line="603" pos:column="44">NULL</name></expr>, <expr><name pos:line="603" pos:column="50">NULL</name></expr>, <expr><name pos:line="603" pos:column="56">NULL</name></expr>, <expr><name pos:line="603" pos:column="62">NULL</name></expr>, <expr><name pos:line="603" pos:column="68">NULL</name></expr>, <expr><name pos:line="603" pos:column="74">NULL</name></expr>, <expr><name pos:line="603" pos:column="80">NULL</name></expr>, <expr><name pos:line="603" pos:column="86">NULL</name></expr>, <expr><name pos:line="603" pos:column="92">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="604" pos:column="9">makeStyle</name><argument_list pos:line="604" pos:column="18">(<argument><expr><name pos:line="604" pos:column="19">L_ASP</name></expr></argument>, <argument><expr><name pos:line="604" pos:column="26">pKwArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name pos:line="606" pos:column="9">basic_string</name><argument_list pos:line="606" pos:column="21">&lt;<argument><expr><name pos:line="606" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="606" pos:column="28">keywordList</name><argument_list pos:line="606" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="606" pos:column="40">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="607" pos:column="9">if <condition pos:line="607" pos:column="12">(<expr><name><name pos:line="607" pos:column="13">pKwArray</name><index pos:line="607" pos:column="21">[<expr><name pos:line="607" pos:column="22">LANG_INDEX_INSTR</name></expr>]</index></name></expr>)</condition><then pos:line="607" pos:column="40">
	<block pos:line="608" pos:column="9">{
<cpp:ifdef pos:line="609" pos:column="1">#<cpp:directive pos:line="609" pos:column="2">ifdef</cpp:directive> <name pos:line="609" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name pos:line="610" pos:column="17">basic_string</name><argument_list pos:line="610" pos:column="29">&lt;<argument><expr><name pos:line="610" pos:column="30">wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="610" pos:column="39">kwlW</name> <init pos:line="610" pos:column="44">= <expr><name><name pos:line="610" pos:column="46">pKwArray</name><index pos:line="610" pos:column="54">[<expr><name pos:line="610" pos:column="55">LANG_INDEX_INSTR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="611" pos:column="17">keywordList</name> <op:operator pos:line="611" pos:column="29">=</op:operator> <call><name pos:line="611" pos:column="31">wstring2string</name><argument_list pos:line="611" pos:column="45">(<argument><expr><name pos:line="611" pos:column="46">kwlW</name></expr></argument>, <argument><expr><name pos:line="611" pos:column="52">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="612" pos:column="1">#<cpp:directive pos:line="612" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="613" pos:column="17">keywordList</name> <op:operator pos:line="613" pos:column="29">=</op:operator> <name><name pos:line="613" pos:column="31">pKwArray</name><index pos:line="613" pos:column="39">[<expr><name pos:line="613" pos:column="40">LANG_INDEX_INSTR</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="614" pos:column="1">#<cpp:directive pos:line="614" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="617" pos:column="9">execute</name><argument_list pos:line="617" pos:column="16">(<argument><expr><name pos:line="617" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="617" pos:column="34">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="617" pos:column="37">(</op:operator><name pos:line="617" pos:column="38">LPARAM</name><op:operator pos:line="617" pos:column="44">)</op:operator><call><name pos:line="617" pos:column="45">getCompleteKeywordList</name><argument_list pos:line="617" pos:column="67">(<argument><expr><name pos:line="617" pos:column="68">keywordList</name></expr></argument>, <argument><expr><name pos:line="617" pos:column="81">L_VB</name></expr></argument>, <argument><expr><name pos:line="617" pos:column="87">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="619" pos:column="5">execute</name><argument_list pos:line="619" pos:column="12">(<argument><expr><name pos:line="619" pos:column="13">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="619" pos:column="36">SCE_HBA_DEFAULT</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="619" pos:column="53">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="622" pos:column="1">void</name></type> <name><name pos:line="622" pos:column="6">ScintillaEditView</name><op:operator pos:line="622" pos:column="23">::</op:operator><name pos:line="622" pos:column="25">setUserLexer</name></name><parameter_list pos:line="622" pos:column="37">(<param><decl><type><specifier pos:line="622" pos:column="38">const</specifier> <name pos:line="622" pos:column="44">TCHAR</name> <type:modifier pos:line="622" pos:column="50">*</type:modifier></type><name pos:line="622" pos:column="51">userLangName</name></decl></param>)</parameter_list>
<block pos:line="623" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="624" pos:column="9">int</name></type> <name pos:line="624" pos:column="13">setKeywordsCounter</name> <init pos:line="624" pos:column="32">= <expr><lit:literal type="number" pos:line="624" pos:column="34">0</lit:literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name pos:line="625" pos:column="5">execute</name><argument_list pos:line="625" pos:column="12">(<argument><expr><name pos:line="625" pos:column="13">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="625" pos:column="27">SCLEX_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="627" pos:column="9">UserLangContainer</name> <type:modifier pos:line="627" pos:column="27">*</type:modifier></type> <name pos:line="627" pos:column="29">userLangContainer</name> <init pos:line="627" pos:column="47">= <expr><name pos:line="627" pos:column="49">userLangName</name><op:operator pos:line="627" pos:column="61">?</op:operator><call><name><name pos:line="627" pos:column="62">NppParameters</name><op:operator pos:line="627" pos:column="75">::</op:operator><name pos:line="627" pos:column="77">getInstance</name></name><argument_list pos:line="627" pos:column="88">()</argument_list></call><op:operator pos:line="627" pos:column="90">-&gt;</op:operator><call><name pos:line="627" pos:column="92">getULCFromName</name><argument_list pos:line="627" pos:column="106">(<argument><expr><name pos:line="627" pos:column="107">userLangName</name></expr></argument>)</argument_list></call><op:operator pos:line="627" pos:column="120">:</op:operator><name><name pos:line="627" pos:column="121">_userDefineDlg</name><op:operator pos:line="627" pos:column="135">.</op:operator><name pos:line="627" pos:column="136">_pCurrentUserLang</name></name></expr></init></decl>;</decl_stmt>

	<if pos:line="629" pos:column="9">if <condition pos:line="629" pos:column="12">(<expr><op:operator pos:line="629" pos:column="13">!</op:operator><name pos:line="629" pos:column="14">userLangContainer</name></expr>)</condition><then pos:line="629" pos:column="32">
		<return pos:line="630" pos:column="17">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="632" pos:column="9">UINT</name></type> <name pos:line="632" pos:column="14">codepage</name> <init pos:line="632" pos:column="23">= <expr><name pos:line="632" pos:column="25">CP_ACP</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="633" pos:column="9">UniMode</name></type> <name pos:line="633" pos:column="17">unicodeMode</name> <init pos:line="633" pos:column="29">= <expr><call><name><name pos:line="633" pos:column="31">_currentBuffer</name><op:operator pos:line="633" pos:column="45">-&gt;</op:operator><name pos:line="633" pos:column="47">getUnicodeMode</name></name><argument_list pos:line="633" pos:column="61">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="634" pos:column="9">int</name></type> <name pos:line="634" pos:column="13">encoding</name> <init pos:line="634" pos:column="22">= <expr><call><name><name pos:line="634" pos:column="24">_currentBuffer</name><op:operator pos:line="634" pos:column="38">-&gt;</op:operator><name pos:line="634" pos:column="40">getEncoding</name></name><argument_list pos:line="634" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="635" pos:column="9">if <condition pos:line="635" pos:column="12">(<expr><name pos:line="635" pos:column="13">encoding</name> <op:operator pos:line="635" pos:column="22">==</op:operator> <op:operator pos:line="635" pos:column="25">-</op:operator><lit:literal type="number" pos:line="635" pos:column="26">1</lit:literal></expr>)</condition><then pos:line="635" pos:column="28">
	<block pos:line="636" pos:column="9">{
		<if pos:line="637" pos:column="17">if <condition pos:line="637" pos:column="20">(<expr><name pos:line="637" pos:column="21">unicodeMode</name> <op:operator pos:line="637" pos:column="33">==</op:operator> <name pos:line="637" pos:column="36">uniUTF8</name> <op:operator pos:line="637" pos:column="44">||</op:operator> <name pos:line="637" pos:column="47">unicodeMode</name> <op:operator pos:line="637" pos:column="59">==</op:operator> <name pos:line="637" pos:column="62">uniCookie</name></expr>)</condition><then pos:line="637" pos:column="72">
			<expr_stmt><expr><name pos:line="638" pos:column="25">codepage</name> <op:operator pos:line="638" pos:column="34">=</op:operator> <name pos:line="638" pos:column="36">CP_UTF8</name></expr>;</expr_stmt></then></if>
	}</block></then>
	<else pos:line="640" pos:column="9">else
	<block pos:line="641" pos:column="9">{
		<expr_stmt><expr><name pos:line="642" pos:column="17">codepage</name> <op:operator pos:line="642" pos:column="26">=</op:operator> <name pos:line="642" pos:column="28">CP_OEMCP</name></expr>;</expr_stmt>	<comment type="line" pos:line="642" pos:column="41">// system OEM code page might not match user selection for character set, </comment>
								<comment type="line" pos:line="643" pos:column="65">// but this is the best match WideCharToMultiByte offers</comment>
	}</block></else></if>

	<expr_stmt><expr><call><name pos:line="646" pos:column="9">execute</name><argument_list pos:line="646" pos:column="16">(<argument><expr><name pos:line="646" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="646" pos:column="34">reinterpret_cast</name><argument_list pos:line="646" pos:column="50">&lt;<argument><expr><name pos:line="646" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="646" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="646" pos:column="59">"fold"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="646" pos:column="68">reinterpret_cast</name><argument_list pos:line="646" pos:column="84">&lt;<argument><expr><name pos:line="646" pos:column="85">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="646" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="646" pos:column="93">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="647" pos:column="9">execute</name><argument_list pos:line="647" pos:column="16">(<argument><expr><name pos:line="647" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="647" pos:column="34">(</op:operator><name pos:line="647" pos:column="35">WPARAM</name><op:operator pos:line="647" pos:column="41">)</op:operator><lit:literal type="string" pos:line="647" pos:column="42">"userDefine.isCaseIgnored"</lit:literal></expr></argument>,		  <argument><expr><call pos:line="647" pos:column="83">(<name pos:line="647" pos:column="84">LPARAM</name>)<argument_list pos:line="647" pos:column="91">(<argument><expr><name><name pos:line="647" pos:column="92">userLangContainer</name><op:operator pos:line="647" pos:column="109">-&gt;</op:operator><name pos:line="647" pos:column="111">_isCaseIgnored</name></name> <op:operator pos:line="647" pos:column="126">?</op:operator> <lit:literal type="string" pos:line="647" pos:column="128">"1"</lit:literal><op:operator pos:line="647" pos:column="131">:</op:operator><lit:literal type="string" pos:line="647" pos:column="132">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="648" pos:column="9">execute</name><argument_list pos:line="648" pos:column="16">(<argument><expr><name pos:line="648" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="648" pos:column="34">(</op:operator><name pos:line="648" pos:column="35">WPARAM</name><op:operator pos:line="648" pos:column="41">)</op:operator><lit:literal type="string" pos:line="648" pos:column="42">"userDefine.allowFoldOfComments"</lit:literal></expr></argument>,    <argument><expr><call pos:line="648" pos:column="79">(<name pos:line="648" pos:column="80">LPARAM</name>)<argument_list pos:line="648" pos:column="87">(<argument><expr><name><name pos:line="648" pos:column="88">userLangContainer</name><op:operator pos:line="648" pos:column="105">-&gt;</op:operator><name pos:line="648" pos:column="107">_allowFoldOfComments</name></name> <op:operator pos:line="648" pos:column="128">?</op:operator> <lit:literal type="string" pos:line="648" pos:column="130">"1"</lit:literal><op:operator pos:line="648" pos:column="133">:</op:operator><lit:literal type="string" pos:line="648" pos:column="134">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="649" pos:column="9">execute</name><argument_list pos:line="649" pos:column="16">(<argument><expr><name pos:line="649" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="649" pos:column="34">(</op:operator><name pos:line="649" pos:column="35">WPARAM</name><op:operator pos:line="649" pos:column="41">)</op:operator><lit:literal type="string" pos:line="649" pos:column="42">"userDefine.forceLineCommentsAtBOL"</lit:literal></expr></argument>, <argument><expr><call pos:line="649" pos:column="79">(<name pos:line="649" pos:column="80">LPARAM</name>)<argument_list pos:line="649" pos:column="87">(<argument><expr><name><name pos:line="649" pos:column="88">userLangContainer</name><op:operator pos:line="649" pos:column="105">-&gt;</op:operator><name pos:line="649" pos:column="107">_forceLineCommentsAtBOL</name></name> <op:operator pos:line="649" pos:column="131">?</op:operator> <lit:literal type="string" pos:line="649" pos:column="133">"1"</lit:literal><op:operator pos:line="649" pos:column="136">:</op:operator><lit:literal type="string" pos:line="649" pos:column="137">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="650" pos:column="9">execute</name><argument_list pos:line="650" pos:column="16">(<argument><expr><name pos:line="650" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="650" pos:column="34">(</op:operator><name pos:line="650" pos:column="35">WPARAM</name><op:operator pos:line="650" pos:column="41">)</op:operator><lit:literal type="string" pos:line="650" pos:column="42">"userDefine.foldCompact"</lit:literal></expr></argument>,		      <argument><expr><call pos:line="650" pos:column="87">(<name pos:line="650" pos:column="88">LPARAM</name>)<argument_list pos:line="650" pos:column="95">(<argument><expr><name><name pos:line="650" pos:column="96">userLangContainer</name><op:operator pos:line="650" pos:column="113">-&gt;</op:operator><name pos:line="650" pos:column="115">_foldCompact</name></name> <op:operator pos:line="650" pos:column="128">?</op:operator> <lit:literal type="string" pos:line="650" pos:column="130">"1"</lit:literal><op:operator pos:line="650" pos:column="133">:</op:operator><lit:literal type="string" pos:line="650" pos:column="134">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="652" pos:column="9">char</name></type> <name><name pos:line="652" pos:column="14">name</name><index pos:line="652" pos:column="18">[]</index></name> <init pos:line="652" pos:column="21">= <expr><lit:literal type="string" pos:line="652" pos:column="23">"userDefine.prefixKeywords0"</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="653" pos:column="9">for (<init><decl><type><name pos:line="653" pos:column="14">int</name></type> <name pos:line="653" pos:column="18">i</name><init pos:line="653" pos:column="19">=<expr><lit:literal type="number" pos:line="653" pos:column="20">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="653" pos:column="24">i</name><op:operator pos:line="653" pos:column="25">&lt;</op:operator><name pos:line="653" pos:column="26">SCE_USER_TOTAL_KEYWORD_GROUPS</name></expr> ;</condition> <incr><expr><name pos:line="653" pos:column="58">i</name><op:operator pos:line="653" pos:column="59">++</op:operator></expr></incr>)
	<block pos:line="654" pos:column="9">{	
		<expr_stmt><expr><call><name pos:line="655" pos:column="17">itoa</name><argument_list pos:line="655" pos:column="21">(<argument><expr><name pos:line="655" pos:column="22">i</name><op:operator pos:line="655" pos:column="23">+</op:operator><lit:literal type="number" pos:line="655" pos:column="24">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="655" pos:column="27">(</op:operator><name pos:line="655" pos:column="28">name</name><op:operator pos:line="655" pos:column="32">+</op:operator><lit:literal type="number" pos:line="655" pos:column="33">25</lit:literal><op:operator pos:line="655" pos:column="35">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="655" pos:column="38">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="656" pos:column="17">execute</name><argument_list pos:line="656" pos:column="24">(<argument><expr><name pos:line="656" pos:column="25">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="656" pos:column="42">(</op:operator><name pos:line="656" pos:column="43">WPARAM</name><op:operator pos:line="656" pos:column="49">)</op:operator><name pos:line="656" pos:column="50">name</name></expr></argument>, <argument><expr><call pos:line="656" pos:column="56">(<name pos:line="656" pos:column="57">LPARAM</name>)<argument_list pos:line="656" pos:column="64">(<argument><expr><name><name pos:line="656" pos:column="65">userLangContainer</name><op:operator pos:line="656" pos:column="82">-&gt;</op:operator><name pos:line="656" pos:column="84">_isPrefix</name><index pos:line="656" pos:column="93">[<expr><name pos:line="656" pos:column="94">i</name></expr>]</index></name><op:operator pos:line="656" pos:column="96">?</op:operator><lit:literal type="string" pos:line="656" pos:column="97">"1"</lit:literal><op:operator pos:line="656" pos:column="100">:</op:operator><lit:literal type="string" pos:line="656" pos:column="101">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<comment type="line" pos:line="659" pos:column="9">// for (int i = 0 ; i &lt; userLangContainer-&gt;getNbKeywordList() ; i++)</comment>
	<for pos:line="660" pos:column="9">for (<init><decl><type><name pos:line="660" pos:column="14">int</name></type> <name pos:line="660" pos:column="18">i</name> <init pos:line="660" pos:column="20">= <expr><lit:literal type="number" pos:line="660" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="660" pos:column="26">i</name> <op:operator pos:line="660" pos:column="28">&lt;</op:operator> <name pos:line="660" pos:column="30">SCE_USER_KWLIST_TOTAL</name></expr> ;</condition> <incr><expr><name pos:line="660" pos:column="54">i</name><op:operator pos:line="660" pos:column="55">++</op:operator></expr></incr>)
	<block pos:line="661" pos:column="9">{
<cpp:ifndef pos:line="662" pos:column="1">#<cpp:directive pos:line="662" pos:column="2">ifndef</cpp:directive> <name pos:line="662" pos:column="9">UNICODE</name></cpp:ifndef>
		<decl_stmt><decl><type><specifier pos:line="663" pos:column="17">const</specifier> <name pos:line="663" pos:column="23">char</name> <type:modifier pos:line="663" pos:column="28">*</type:modifier></type> <name pos:line="663" pos:column="30">keyWords_char</name> <init pos:line="663" pos:column="44">= <expr><name><name pos:line="663" pos:column="46">userLangContainer</name><op:operator pos:line="663" pos:column="63">-&gt;</op:operator><name pos:line="663" pos:column="65">_keywordLists</name><index pos:line="663" pos:column="78">[<expr><name pos:line="663" pos:column="79">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="664" pos:column="1">#<cpp:directive pos:line="664" pos:column="2">else</cpp:directive></cpp:else>
		<decl_stmt><decl><type><name pos:line="665" pos:column="17">WcharMbcsConvertor</name> <type:modifier pos:line="665" pos:column="36">*</type:modifier></type><name pos:line="665" pos:column="37">wmc</name> <init pos:line="665" pos:column="41">= <expr><call><name><name pos:line="665" pos:column="43">WcharMbcsConvertor</name><op:operator pos:line="665" pos:column="61">::</op:operator><name pos:line="665" pos:column="63">getInstance</name></name><argument_list pos:line="665" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="666" pos:column="17">const</specifier> <name pos:line="666" pos:column="23">char</name> <type:modifier pos:line="666" pos:column="28">*</type:modifier></type> <name pos:line="666" pos:column="30">keyWords_char</name> <init pos:line="666" pos:column="44">= <expr><call><name><name pos:line="666" pos:column="46">wmc</name><op:operator pos:line="666" pos:column="49">-&gt;</op:operator><name pos:line="666" pos:column="51">wchar2char</name></name><argument_list pos:line="666" pos:column="61">(<argument><expr><name><name pos:line="666" pos:column="62">userLangContainer</name><op:operator pos:line="666" pos:column="79">-&gt;</op:operator><name pos:line="666" pos:column="81">_keywordLists</name><index pos:line="666" pos:column="94">[<expr><name pos:line="666" pos:column="95">i</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="666" pos:column="99">codepage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="667" pos:column="1">#<cpp:directive pos:line="667" pos:column="2">endif</cpp:directive></cpp:endif>
		<if pos:line="668" pos:column="17">if <condition pos:line="668" pos:column="20">(<expr><name pos:line="668" pos:column="21">i</name> <op:operator pos:line="668" pos:column="23">==</op:operator> <name pos:line="668" pos:column="26">SCE_USER_KWLIST_COMMENTS</name></expr>)</condition><then pos:line="668" pos:column="51">
		<block pos:line="669" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="670" pos:column="25">execute</name><argument_list pos:line="670" pos:column="32">(<argument><expr><name pos:line="670" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="670" pos:column="50">(</op:operator><name pos:line="670" pos:column="51">WPARAM</name><op:operator pos:line="670" pos:column="57">)</op:operator><lit:literal type="string" pos:line="670" pos:column="58">"userDefine.comments"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="670" pos:column="81">reinterpret_cast</name><argument_list pos:line="670" pos:column="97">&lt;<argument><expr><name pos:line="670" pos:column="98">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="670" pos:column="105">(<argument><expr><name pos:line="670" pos:column="106">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="672" pos:column="17">else <if pos:line="672" pos:column="22">if <condition pos:line="672" pos:column="25">(<expr><name pos:line="672" pos:column="26">i</name> <op:operator pos:line="672" pos:column="28">==</op:operator> <name pos:line="672" pos:column="31">SCE_USER_KWLIST_DELIMITERS</name></expr>)</condition><then pos:line="672" pos:column="58">
		<block pos:line="673" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="674" pos:column="25">execute</name><argument_list pos:line="674" pos:column="32">(<argument><expr><name pos:line="674" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="674" pos:column="50">(</op:operator><name pos:line="674" pos:column="51">WPARAM</name><op:operator pos:line="674" pos:column="57">)</op:operator><lit:literal type="string" pos:line="674" pos:column="58">"userDefine.delimiters"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="674" pos:column="83">reinterpret_cast</name><argument_list pos:line="674" pos:column="99">&lt;<argument><expr><name pos:line="674" pos:column="100">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="674" pos:column="107">(<argument><expr><name pos:line="674" pos:column="108">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="676" pos:column="17">else <if pos:line="676" pos:column="22">if <condition pos:line="676" pos:column="25">(<expr><name pos:line="676" pos:column="26">i</name> <op:operator pos:line="676" pos:column="28">==</op:operator> <name pos:line="676" pos:column="31">SCE_USER_KWLIST_OPERATORS1</name></expr>)</condition><then pos:line="676" pos:column="58">
		<block pos:line="677" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="678" pos:column="25">execute</name><argument_list pos:line="678" pos:column="32">(<argument><expr><name pos:line="678" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="678" pos:column="50">(</op:operator><name pos:line="678" pos:column="51">WPARAM</name><op:operator pos:line="678" pos:column="57">)</op:operator><lit:literal type="string" pos:line="678" pos:column="58">"userDefine.operators1"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="678" pos:column="83">reinterpret_cast</name><argument_list pos:line="678" pos:column="99">&lt;<argument><expr><name pos:line="678" pos:column="100">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="678" pos:column="107">(<argument><expr><name pos:line="678" pos:column="108">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="680" pos:column="17">else <if pos:line="680" pos:column="22">if <condition pos:line="680" pos:column="25">(<expr><name pos:line="680" pos:column="26">i</name> <op:operator pos:line="680" pos:column="28">==</op:operator> <name pos:line="680" pos:column="31">SCE_USER_KWLIST_NUMBER_EXTRA</name></expr>)</condition><then pos:line="680" pos:column="60">
		<block pos:line="681" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="682" pos:column="25">execute</name><argument_list pos:line="682" pos:column="32">(<argument><expr><name pos:line="682" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="682" pos:column="50">(</op:operator><name pos:line="682" pos:column="51">WPARAM</name><op:operator pos:line="682" pos:column="57">)</op:operator><lit:literal type="string" pos:line="682" pos:column="58">"userDefine.numberRanges"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="682" pos:column="85">reinterpret_cast</name><argument_list pos:line="682" pos:column="101">&lt;<argument><expr><name pos:line="682" pos:column="102">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="682" pos:column="109">(<argument><expr><name pos:line="682" pos:column="110">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="684" pos:column="17">else <if pos:line="684" pos:column="22">if <condition pos:line="684" pos:column="25">(<expr><name pos:line="684" pos:column="26">i</name> <op:operator pos:line="684" pos:column="28">==</op:operator> <name pos:line="684" pos:column="31">SCE_USER_KWLIST_NUMBER_PREFIX</name></expr>)</condition><then pos:line="684" pos:column="61">
		<block pos:line="685" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="686" pos:column="25">execute</name><argument_list pos:line="686" pos:column="32">(<argument><expr><name pos:line="686" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="686" pos:column="50">(</op:operator><name pos:line="686" pos:column="51">WPARAM</name><op:operator pos:line="686" pos:column="57">)</op:operator><lit:literal type="string" pos:line="686" pos:column="58">"userDefine.numberPrefixes"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="686" pos:column="87">reinterpret_cast</name><argument_list pos:line="686" pos:column="103">&lt;<argument><expr><name pos:line="686" pos:column="104">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="686" pos:column="111">(<argument><expr><name pos:line="686" pos:column="112">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="688" pos:column="17">else <if pos:line="688" pos:column="22">if <condition pos:line="688" pos:column="25">(<expr><name pos:line="688" pos:column="26">i</name> <op:operator pos:line="688" pos:column="28">==</op:operator> <name pos:line="688" pos:column="31">SCE_USER_KWLIST_NUMBER_EXTRAPREF</name></expr>)</condition><then pos:line="688" pos:column="64">
		<block pos:line="689" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="690" pos:column="25">execute</name><argument_list pos:line="690" pos:column="32">(<argument><expr><name pos:line="690" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="690" pos:column="50">(</op:operator><name pos:line="690" pos:column="51">WPARAM</name><op:operator pos:line="690" pos:column="57">)</op:operator><lit:literal type="string" pos:line="690" pos:column="58">"userDefine.extraCharsInPrefixed"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="690" pos:column="93">reinterpret_cast</name><argument_list pos:line="690" pos:column="109">&lt;<argument><expr><name pos:line="690" pos:column="110">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="690" pos:column="117">(<argument><expr><name pos:line="690" pos:column="118">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="692" pos:column="17">else <if pos:line="692" pos:column="22">if <condition pos:line="692" pos:column="25">(<expr><name pos:line="692" pos:column="26">i</name> <op:operator pos:line="692" pos:column="28">==</op:operator> <name pos:line="692" pos:column="31">SCE_USER_KWLIST_NUMBER_SUFFIX</name></expr>)</condition><then pos:line="692" pos:column="61">
		<block pos:line="693" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="694" pos:column="25">execute</name><argument_list pos:line="694" pos:column="32">(<argument><expr><name pos:line="694" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="694" pos:column="50">(</op:operator><name pos:line="694" pos:column="51">WPARAM</name><op:operator pos:line="694" pos:column="57">)</op:operator><lit:literal type="string" pos:line="694" pos:column="58">"userDefine.numberSuffixes"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="694" pos:column="87">reinterpret_cast</name><argument_list pos:line="694" pos:column="103">&lt;<argument><expr><name pos:line="694" pos:column="104">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="694" pos:column="111">(<argument><expr><name pos:line="694" pos:column="112">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="696" pos:column="17">else <if pos:line="696" pos:column="22">if <condition pos:line="696" pos:column="25">(<expr><name pos:line="696" pos:column="26">i</name> <op:operator pos:line="696" pos:column="28">==</op:operator> <name pos:line="696" pos:column="31">SCE_USER_KWLIST_FOLDERS_IN_CODE1_OPEN</name></expr>)</condition><then pos:line="696" pos:column="69">
		<block pos:line="697" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="698" pos:column="25">execute</name><argument_list pos:line="698" pos:column="32">(<argument><expr><name pos:line="698" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="698" pos:column="50">(</op:operator><name pos:line="698" pos:column="51">WPARAM</name><op:operator pos:line="698" pos:column="57">)</op:operator><lit:literal type="string" pos:line="698" pos:column="58">"userDefine.foldersInCode1Open"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="698" pos:column="91">reinterpret_cast</name><argument_list pos:line="698" pos:column="107">&lt;<argument><expr><name pos:line="698" pos:column="108">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="698" pos:column="115">(<argument><expr><name pos:line="698" pos:column="116">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="700" pos:column="17">else <if pos:line="700" pos:column="22">if <condition pos:line="700" pos:column="25">(<expr><name pos:line="700" pos:column="26">i</name> <op:operator pos:line="700" pos:column="28">==</op:operator> <name pos:line="700" pos:column="31">SCE_USER_KWLIST_FOLDERS_IN_CODE1_MIDDLE</name></expr>)</condition><then pos:line="700" pos:column="71">
		<block pos:line="701" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="702" pos:column="25">execute</name><argument_list pos:line="702" pos:column="32">(<argument><expr><name pos:line="702" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="702" pos:column="50">(</op:operator><name pos:line="702" pos:column="51">WPARAM</name><op:operator pos:line="702" pos:column="57">)</op:operator><lit:literal type="string" pos:line="702" pos:column="58">"userDefine.foldersInCode1Middle"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="702" pos:column="93">reinterpret_cast</name><argument_list pos:line="702" pos:column="109">&lt;<argument><expr><name pos:line="702" pos:column="110">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="702" pos:column="117">(<argument><expr><name pos:line="702" pos:column="118">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="704" pos:column="17">else <if pos:line="704" pos:column="22">if <condition pos:line="704" pos:column="25">(<expr><name pos:line="704" pos:column="26">i</name> <op:operator pos:line="704" pos:column="28">==</op:operator> <name pos:line="704" pos:column="31">SCE_USER_KWLIST_FOLDERS_IN_CODE1_CLOSE</name></expr>)</condition><then pos:line="704" pos:column="70">
		<block pos:line="705" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="706" pos:column="25">execute</name><argument_list pos:line="706" pos:column="32">(<argument><expr><name pos:line="706" pos:column="33">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="706" pos:column="50">(</op:operator><name pos:line="706" pos:column="51">WPARAM</name><op:operator pos:line="706" pos:column="57">)</op:operator><lit:literal type="string" pos:line="706" pos:column="58">"userDefine.foldersInCode1Close"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="706" pos:column="92">reinterpret_cast</name><argument_list pos:line="706" pos:column="108">&lt;<argument><expr><name pos:line="706" pos:column="109">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="706" pos:column="116">(<argument><expr><name pos:line="706" pos:column="117">keyWords_char</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="708" pos:column="17">else <comment type="line" pos:line="708" pos:column="22">// OPERATORS2, FOLDERS_IN_CODE2, FOLDERS_IN_COMMENT, KEYWORDS1-8</comment>
		<block pos:line="709" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="710" pos:column="25">char</name></type> <name><name pos:line="710" pos:column="30">temp</name><index pos:line="710" pos:column="34">[<expr><name pos:line="710" pos:column="35">max_char</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="711" pos:column="25">bool</name></type> <name pos:line="711" pos:column="30">inDoubleQuote</name> <init pos:line="711" pos:column="44">= <expr><lit:literal type="boolean" pos:line="711" pos:column="46">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="712" pos:column="25">bool</name></type> <name pos:line="712" pos:column="30">inSingleQuote</name> <init pos:line="712" pos:column="44">= <expr><lit:literal type="boolean" pos:line="712" pos:column="46">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="713" pos:column="25">bool</name></type> <name pos:line="713" pos:column="30">nonWSFound</name> <init pos:line="713" pos:column="41">= <expr><lit:literal type="boolean" pos:line="713" pos:column="43">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="714" pos:column="25">int</name></type> <name pos:line="714" pos:column="29">index</name> <init pos:line="714" pos:column="35">= <expr><lit:literal type="number" pos:line="714" pos:column="37">0</lit:literal></expr></init></decl>;</decl_stmt>
			<for pos:line="715" pos:column="25">for (<init><decl><type><name pos:line="715" pos:column="30">unsigned</name> <name pos:line="715" pos:column="39">int</name></type> <name pos:line="715" pos:column="43">j</name><init pos:line="715" pos:column="44">=<expr><lit:literal type="number" pos:line="715" pos:column="45">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="715" pos:column="48">j</name><op:operator pos:line="715" pos:column="49">&lt;</op:operator><call><name pos:line="715" pos:column="50">strlen</name><argument_list pos:line="715" pos:column="56">(<argument><expr><name pos:line="715" pos:column="57">keyWords_char</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><op:operator pos:line="715" pos:column="73">++</op:operator><name pos:line="715" pos:column="75">j</name></expr></incr>)
			<block pos:line="716" pos:column="25">{
				<if pos:line="717" pos:column="33">if <condition pos:line="717" pos:column="36">(<expr><op:operator pos:line="717" pos:column="37">!</op:operator><name pos:line="717" pos:column="38">inSingleQuote</name> <op:operator pos:line="717" pos:column="52">&amp;&amp;</op:operator> <name><name pos:line="717" pos:column="55">keyWords_char</name><index pos:line="717" pos:column="68">[<expr><name pos:line="717" pos:column="69">j</name></expr>]</index></name> <op:operator pos:line="717" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="717" pos:column="75">'"'</lit:literal></expr>)</condition><then pos:line="717" pos:column="79">
				<block pos:line="718" pos:column="33">{
					<expr_stmt><expr><name pos:line="719" pos:column="41">inDoubleQuote</name> <op:operator pos:line="719" pos:column="55">=</op:operator> <op:operator pos:line="719" pos:column="57">!</op:operator><name pos:line="719" pos:column="58">inDoubleQuote</name></expr>;</expr_stmt>
					<continue pos:line="720" pos:column="41">continue;</continue>
				}</block></then></if>

				<if pos:line="723" pos:column="33">if <condition pos:line="723" pos:column="36">(<expr><op:operator pos:line="723" pos:column="37">!</op:operator><name pos:line="723" pos:column="38">inDoubleQuote</name> <op:operator pos:line="723" pos:column="52">&amp;&amp;</op:operator> <name><name pos:line="723" pos:column="55">keyWords_char</name><index pos:line="723" pos:column="68">[<expr><name pos:line="723" pos:column="69">j</name></expr>]</index></name> <op:operator pos:line="723" pos:column="72">==</op:operator> <lit:literal type="char" pos:line="723" pos:column="75">'\''</lit:literal></expr>)</condition><then pos:line="723" pos:column="80">
				<block pos:line="724" pos:column="33">{
					<expr_stmt><expr><name pos:line="725" pos:column="41">inSingleQuote</name> <op:operator pos:line="725" pos:column="55">=</op:operator> <op:operator pos:line="725" pos:column="57">!</op:operator><name pos:line="725" pos:column="58">inSingleQuote</name></expr>;</expr_stmt>
					<continue pos:line="726" pos:column="41">continue;</continue>
				}</block></then></if>

				<if pos:line="729" pos:column="33">if <condition pos:line="729" pos:column="36">(<expr><name><name pos:line="729" pos:column="37">keyWords_char</name><index pos:line="729" pos:column="50">[<expr><name pos:line="729" pos:column="51">j</name></expr>]</index></name> <op:operator pos:line="729" pos:column="54">==</op:operator> <lit:literal type="char" pos:line="729" pos:column="57">'\\'</lit:literal> <op:operator pos:line="729" pos:column="62">&amp;&amp;</op:operator> <op:operator pos:line="729" pos:column="65">(</op:operator><name><name pos:line="729" pos:column="66">keyWords_char</name><index pos:line="729" pos:column="79">[<expr><name pos:line="729" pos:column="80">j</name><op:operator pos:line="729" pos:column="81">+</op:operator><lit:literal type="number" pos:line="729" pos:column="82">1</lit:literal></expr>]</index></name> <op:operator pos:line="729" pos:column="85">==</op:operator> <lit:literal type="char" pos:line="729" pos:column="88">'"'</lit:literal> <op:operator pos:line="729" pos:column="92">||</op:operator> <name><name pos:line="729" pos:column="95">keyWords_char</name><index pos:line="729" pos:column="108">[<expr><name pos:line="729" pos:column="109">j</name><op:operator pos:line="729" pos:column="110">+</op:operator><lit:literal type="number" pos:line="729" pos:column="111">1</lit:literal></expr>]</index></name> <op:operator pos:line="729" pos:column="114">==</op:operator> <lit:literal type="char" pos:line="729" pos:column="117">'\''</lit:literal> <op:operator pos:line="729" pos:column="122">||</op:operator> <name><name pos:line="729" pos:column="125">keyWords_char</name><index pos:line="729" pos:column="138">[<expr><name pos:line="729" pos:column="139">j</name><op:operator pos:line="729" pos:column="140">+</op:operator><lit:literal type="number" pos:line="729" pos:column="141">1</lit:literal></expr>]</index></name> <op:operator pos:line="729" pos:column="144">==</op:operator> <lit:literal type="char" pos:line="729" pos:column="147">'\\'</lit:literal><op:operator pos:line="729" pos:column="151">)</op:operator></expr>)</condition><then pos:line="729" pos:column="153">
				<block pos:line="730" pos:column="33">{
					<expr_stmt><expr><op:operator pos:line="731" pos:column="41">++</op:operator><name pos:line="731" pos:column="43">j</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="732" pos:column="41">temp</name><index pos:line="732" pos:column="45">[<expr><name pos:line="732" pos:column="46">index</name><op:operator pos:line="732" pos:column="51">++</op:operator></expr>]</index></name> <op:operator pos:line="732" pos:column="55">=</op:operator> <name><name pos:line="732" pos:column="57">keyWords_char</name><index pos:line="732" pos:column="70">[<expr><name pos:line="732" pos:column="71">j</name></expr>]</index></name></expr>;</expr_stmt>
					<continue pos:line="733" pos:column="41">continue;</continue>
				}</block></then></if>

				<if pos:line="736" pos:column="33">if <condition pos:line="736" pos:column="36">(<expr><name pos:line="736" pos:column="37">inDoubleQuote</name> <op:operator pos:line="736" pos:column="51">||</op:operator> <name pos:line="736" pos:column="54">inSingleQuote</name></expr>)</condition><then pos:line="736" pos:column="68">
				<block pos:line="737" pos:column="33">{
					<if pos:line="738" pos:column="41">if <condition pos:line="738" pos:column="44">(<expr><name><name pos:line="738" pos:column="45">keyWords_char</name><index pos:line="738" pos:column="58">[<expr><name pos:line="738" pos:column="59">j</name></expr>]</index></name> <op:operator pos:line="738" pos:column="62">&gt;</op:operator> <lit:literal type="char" pos:line="738" pos:column="64">' '</lit:literal></expr>)</condition><then pos:line="738" pos:column="68">		<comment type="line" pos:line="738" pos:column="81">// copy non-whitespace unconditionally</comment>
					<block pos:line="739" pos:column="41">{
						<expr_stmt><expr><name><name pos:line="740" pos:column="49">temp</name><index pos:line="740" pos:column="53">[<expr><name pos:line="740" pos:column="54">index</name><op:operator pos:line="740" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="740" pos:column="63">=</op:operator> <name><name pos:line="740" pos:column="65">keyWords_char</name><index pos:line="740" pos:column="78">[<expr><name pos:line="740" pos:column="79">j</name></expr>]</index></name></expr>;</expr_stmt>
						<if pos:line="741" pos:column="49">if <condition pos:line="741" pos:column="52">(<expr><name pos:line="741" pos:column="53">nonWSFound</name> <op:operator pos:line="741" pos:column="64">==</op:operator> <lit:literal type="boolean" pos:line="741" pos:column="67">false</lit:literal></expr>)</condition><then pos:line="741" pos:column="73">
							<expr_stmt><expr><name pos:line="742" pos:column="57">nonWSFound</name> <op:operator pos:line="742" pos:column="68">=</op:operator> <lit:literal type="boolean" pos:line="742" pos:column="70">true</lit:literal></expr>;</expr_stmt></then></if>
					}</block></then>
					<else pos:line="744" pos:column="41">else <if pos:line="744" pos:column="46">if <condition pos:line="744" pos:column="49">(<expr><name pos:line="744" pos:column="50">nonWSFound</name> <op:operator pos:line="744" pos:column="61">==</op:operator> <lit:literal type="boolean" pos:line="744" pos:column="64">true</lit:literal> <op:operator pos:line="744" pos:column="69">&amp;&amp;</op:operator> <name><name pos:line="744" pos:column="72">keyWords_char</name><index pos:line="744" pos:column="85">[<expr><name pos:line="744" pos:column="86">j</name><op:operator pos:line="744" pos:column="87">-</op:operator><lit:literal type="number" pos:line="744" pos:column="88">1</lit:literal></expr>]</index></name> <op:operator pos:line="744" pos:column="91">!=</op:operator> <lit:literal type="char" pos:line="744" pos:column="94">'"'</lit:literal> <op:operator pos:line="744" pos:column="98">&amp;&amp;</op:operator> <name><name pos:line="744" pos:column="101">keyWords_char</name><index pos:line="744" pos:column="114">[<expr><name pos:line="744" pos:column="115">j</name><op:operator pos:line="744" pos:column="116">+</op:operator><lit:literal type="number" pos:line="744" pos:column="117">1</lit:literal></expr>]</index></name> <op:operator pos:line="744" pos:column="120">!=</op:operator> <lit:literal type="char" pos:line="744" pos:column="123">'"'</lit:literal> <op:operator pos:line="744" pos:column="127">&amp;&amp;</op:operator> <name><name pos:line="744" pos:column="130">keyWords_char</name><index pos:line="744" pos:column="143">[<expr><name pos:line="744" pos:column="144">j</name><op:operator pos:line="744" pos:column="145">+</op:operator><lit:literal type="number" pos:line="744" pos:column="146">1</lit:literal></expr>]</index></name> <op:operator pos:line="744" pos:column="149">&gt;</op:operator> <lit:literal type="char" pos:line="744" pos:column="151">' '</lit:literal></expr>)</condition><then pos:line="744" pos:column="155">
					<block pos:line="745" pos:column="41">{
						<expr_stmt><expr><name><name pos:line="746" pos:column="49">temp</name><index pos:line="746" pos:column="53">[<expr><name pos:line="746" pos:column="54">index</name><op:operator pos:line="746" pos:column="59">++</op:operator></expr>]</index></name> <op:operator pos:line="746" pos:column="63">=</op:operator> <name pos:line="746" pos:column="65">inDoubleQuote</name> <op:operator pos:line="746" pos:column="79">?</op:operator> <lit:literal type="char" pos:line="746" pos:column="81">'\v'</lit:literal> <op:operator pos:line="746" pos:column="86">:</op:operator> <lit:literal type="char" pos:line="746" pos:column="88">'\b'</lit:literal></expr>;</expr_stmt>
					}</block></then>
					<else pos:line="748" pos:column="41">else
						<continue pos:line="749" pos:column="49">continue;</continue></else></if></else></if>
				}</block></then>
				<else pos:line="751" pos:column="33">else
				<block pos:line="752" pos:column="33">{
					<expr_stmt><expr><name><name pos:line="753" pos:column="41">temp</name><index pos:line="753" pos:column="45">[<expr><name pos:line="753" pos:column="46">index</name><op:operator pos:line="753" pos:column="51">++</op:operator></expr>]</index></name> <op:operator pos:line="753" pos:column="55">=</op:operator> <name><name pos:line="753" pos:column="57">keyWords_char</name><index pos:line="753" pos:column="70">[<expr><name pos:line="753" pos:column="71">j</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></else></if>

			}</block></for>
			<expr_stmt><expr><name><name pos:line="757" pos:column="25">temp</name><index pos:line="757" pos:column="29">[<expr><name pos:line="757" pos:column="30">index</name><op:operator pos:line="757" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="757" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="757" pos:column="41">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="758" pos:column="25">execute</name><argument_list pos:line="758" pos:column="32">(<argument><expr><name pos:line="758" pos:column="33">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><name pos:line="758" pos:column="50">setKeywordsCounter</name><op:operator pos:line="758" pos:column="68">++</op:operator></expr></argument>, <argument><expr><call><name><name pos:line="758" pos:column="72">reinterpret_cast</name><argument_list pos:line="758" pos:column="88">&lt;<argument><expr><name pos:line="758" pos:column="89">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="758" pos:column="96">(<argument><expr><name pos:line="758" pos:column="97">temp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
	}</block></for>

	<comment type="line" pos:line="762" pos:column="9">// at the end (position SCE_USER_KWLIST_TOTAL) send id values</comment>
	<expr_stmt><expr><call><name pos:line="763" pos:column="9">execute</name><argument_list pos:line="763" pos:column="16">(<argument><expr><name pos:line="763" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="763" pos:column="34">(</op:operator><name pos:line="763" pos:column="35">WPARAM</name><op:operator pos:line="763" pos:column="41">)</op:operator><lit:literal type="string" pos:line="763" pos:column="42">"userDefine.udlName"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="763" pos:column="64">reinterpret_cast</name><argument_list pos:line="763" pos:column="80">&lt;<argument><expr><name pos:line="763" pos:column="81">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="763" pos:column="88">(<argument><expr><call><name><name pos:line="763" pos:column="89">userLangContainer</name><op:operator pos:line="763" pos:column="106">-&gt;</op:operator><name pos:line="763" pos:column="108">getName</name></name><argument_list pos:line="763" pos:column="115">()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="764" pos:column="9">execute</name><argument_list pos:line="764" pos:column="16">(<argument><expr><name pos:line="764" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="764" pos:column="34">(</op:operator><name pos:line="764" pos:column="35">WPARAM</name><op:operator pos:line="764" pos:column="41">)</op:operator><lit:literal type="string" pos:line="764" pos:column="42">"userDefine.currentBufferID"</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="764" pos:column="72">reinterpret_cast</name><argument_list pos:line="764" pos:column="88">&lt;<argument><expr><name pos:line="764" pos:column="89">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="764" pos:column="96">(<argument><expr><name pos:line="764" pos:column="97">_currentBufferID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="766" pos:column="9">char</name></type> <name><name pos:line="766" pos:column="14">intBuffer</name><index pos:line="766" pos:column="23">[<expr><lit:literal type="number" pos:line="766" pos:column="24">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="767" pos:column="9">char</name></type> <name><name pos:line="767" pos:column="14">nestingBuffer</name><index pos:line="767" pos:column="27">[]</index></name> <init pos:line="767" pos:column="30">= <expr><lit:literal type="string" pos:line="767" pos:column="32">"userDefine.nesting.00"</lit:literal></expr></init></decl>;</decl_stmt>
	
	<comment type="line" pos:line="769" pos:column="9">//for (int i = 0 ; i &lt; userLangContainer-&gt;_styleArray.getNbStyler() ; i++)</comment>
	<for pos:line="770" pos:column="9">for (<init><decl><type><name pos:line="770" pos:column="14">int</name></type> <name pos:line="770" pos:column="18">i</name> <init pos:line="770" pos:column="20">= <expr><lit:literal type="number" pos:line="770" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="770" pos:column="26">i</name> <op:operator pos:line="770" pos:column="28">&lt;</op:operator> <name pos:line="770" pos:column="30">SCE_USER_STYLE_TOTAL_STYLES</name></expr> ;</condition> <incr><expr><name pos:line="770" pos:column="60">i</name><op:operator pos:line="770" pos:column="61">++</op:operator></expr></incr>)
	<block pos:line="771" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="772" pos:column="17">Style</name> <type:modifier pos:line="772" pos:column="23">&amp;</type:modifier></type> <name pos:line="772" pos:column="25">style</name> <init pos:line="772" pos:column="31">= <expr><call><name><name pos:line="772" pos:column="33">userLangContainer</name><op:operator pos:line="772" pos:column="50">-&gt;</op:operator><name pos:line="772" pos:column="52">_styleArray</name><op:operator pos:line="772" pos:column="63">.</op:operator><name pos:line="772" pos:column="64">getStyler</name></name><argument_list pos:line="772" pos:column="73">(<argument><expr><name pos:line="772" pos:column="74">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="774" pos:column="17">if <condition pos:line="774" pos:column="20">(<expr><name><name pos:line="774" pos:column="21">style</name><op:operator pos:line="774" pos:column="26">.</op:operator><name pos:line="774" pos:column="27">_styleID</name></name> <op:operator pos:line="774" pos:column="36">==</op:operator> <name pos:line="774" pos:column="39">STYLE_NOT_USED</name></expr>)</condition><then pos:line="774" pos:column="54">
			<continue pos:line="775" pos:column="25">continue;</continue></then></if>

		<if pos:line="777" pos:column="17">if <condition pos:line="777" pos:column="20">(<expr><name pos:line="777" pos:column="21">i</name> <op:operator pos:line="777" pos:column="23">&lt;</op:operator> <lit:literal type="number" pos:line="777" pos:column="25">10</lit:literal></expr>)</condition><then pos:line="777" pos:column="28">	<expr_stmt><expr><call><name pos:line="777" pos:column="33">itoa</name><argument_list pos:line="777" pos:column="37">(<argument><expr><name pos:line="777" pos:column="38">i</name></expr></argument>, <argument><expr><op:operator pos:line="777" pos:column="41">(</op:operator><name pos:line="777" pos:column="42">nestingBuffer</name><op:operator pos:line="777" pos:column="55">+</op:operator><lit:literal type="number" pos:line="777" pos:column="56">20</lit:literal><op:operator pos:line="777" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="777" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="778" pos:column="17">else		<expr_stmt><expr><call><name pos:line="778" pos:column="33">itoa</name><argument_list pos:line="778" pos:column="37">(<argument><expr><name pos:line="778" pos:column="38">i</name></expr></argument>, <argument><expr><op:operator pos:line="778" pos:column="41">(</op:operator><name pos:line="778" pos:column="42">nestingBuffer</name><op:operator pos:line="778" pos:column="55">+</op:operator><lit:literal type="number" pos:line="778" pos:column="56">19</lit:literal><op:operator pos:line="778" pos:column="58">)</op:operator></expr></argument>, <argument><expr><lit:literal type="number" pos:line="778" pos:column="61">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		<expr_stmt><expr><call><name pos:line="779" pos:column="17">execute</name><argument_list pos:line="779" pos:column="24">(<argument><expr><name pos:line="779" pos:column="25">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><op:operator pos:line="779" pos:column="42">(</op:operator><name pos:line="779" pos:column="43">WPARAM</name><op:operator pos:line="779" pos:column="49">)</op:operator><name pos:line="779" pos:column="50">nestingBuffer</name></expr></argument>, <argument><expr><call pos:line="779" pos:column="65">(<name pos:line="779" pos:column="66">LPARAM</name>)<argument_list pos:line="779" pos:column="73">(<argument><expr><call><name pos:line="779" pos:column="74">itoa</name><argument_list pos:line="779" pos:column="78">(<argument><expr><name><name pos:line="779" pos:column="79">style</name><op:operator pos:line="779" pos:column="84">.</op:operator><name pos:line="779" pos:column="85">_nesting</name></name></expr></argument>, <argument><expr><name pos:line="779" pos:column="95">intBuffer</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="779" pos:column="106">10</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="781" pos:column="17">setStyle</name><argument_list pos:line="781" pos:column="25">(<argument><expr><name pos:line="781" pos:column="26">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="785" pos:column="1">void</name></type> <name><name pos:line="785" pos:column="6">ScintillaEditView</name><op:operator pos:line="785" pos:column="23">::</op:operator><name pos:line="785" pos:column="25">setExternalLexer</name></name><parameter_list pos:line="785" pos:column="41">(<param><decl><type><name pos:line="785" pos:column="42">LangType</name></type> <name pos:line="785" pos:column="51">typeDoc</name></decl></param>)</parameter_list>
<block pos:line="786" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="787" pos:column="9">int</name></type> <name pos:line="787" pos:column="13">id</name> <init pos:line="787" pos:column="16">= <expr><name pos:line="787" pos:column="18">typeDoc</name> <op:operator pos:line="787" pos:column="26">-</op:operator> <name pos:line="787" pos:column="28">L_EXTERNAL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="788" pos:column="9">TCHAR</name> <type:modifier pos:line="788" pos:column="15">*</type:modifier></type> <name pos:line="788" pos:column="17">name</name> <init pos:line="788" pos:column="22">= <expr><call><name><name pos:line="788" pos:column="24">NppParameters</name><op:operator pos:line="788" pos:column="37">::</op:operator><name pos:line="788" pos:column="39">getInstance</name></name><argument_list pos:line="788" pos:column="50">()</argument_list></call><op:operator pos:line="788" pos:column="52">-&gt;</op:operator><call><name pos:line="788" pos:column="54">getELCFromIndex</name><argument_list pos:line="788" pos:column="69">(<argument><expr><name pos:line="788" pos:column="70">id</name></expr></argument>)</argument_list></call><op:operator pos:line="788" pos:column="73">.</op:operator><name pos:line="788" pos:column="74">_name</name></expr></init></decl>;</decl_stmt>
	
<cpp:ifdef pos:line="790" pos:column="1">#<cpp:directive pos:line="790" pos:column="2">ifdef</cpp:directive> <name pos:line="790" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="791" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="791" pos:column="28">*</type:modifier></type><name pos:line="791" pos:column="29">wmc</name> <init pos:line="791" pos:column="33">= <expr><call><name><name pos:line="791" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="791" pos:column="53">::</op:operator><name pos:line="791" pos:column="55">getInstance</name></name><argument_list pos:line="791" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="792" pos:column="9">const</specifier> <name pos:line="792" pos:column="15">char</name> <type:modifier pos:line="792" pos:column="20">*</type:modifier></type><name pos:line="792" pos:column="21">pName</name> <init pos:line="792" pos:column="27">= <expr><call><name><name pos:line="792" pos:column="29">wmc</name><op:operator pos:line="792" pos:column="32">-&gt;</op:operator><name pos:line="792" pos:column="34">wchar2char</name></name><argument_list pos:line="792" pos:column="44">(<argument><expr><name pos:line="792" pos:column="45">name</name></expr></argument>, <argument><expr><name pos:line="792" pos:column="51">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="793" pos:column="1">#<cpp:directive pos:line="793" pos:column="2">else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier pos:line="794" pos:column="9">const</specifier> <name pos:line="794" pos:column="15">char</name> <type:modifier pos:line="794" pos:column="20">*</type:modifier></type><name pos:line="794" pos:column="21">pName</name> <init pos:line="794" pos:column="27">= <expr><name pos:line="794" pos:column="29">name</name></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="795" pos:column="1">#<cpp:directive pos:line="795" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name pos:line="796" pos:column="9">execute</name><argument_list pos:line="796" pos:column="16">(<argument><expr><name pos:line="796" pos:column="17">SCI_SETLEXERLANGUAGE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="796" pos:column="39">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="796" pos:column="42">(</op:operator><name pos:line="796" pos:column="43">LPARAM</name><op:operator pos:line="796" pos:column="49">)</op:operator><name pos:line="796" pos:column="50">pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="798" pos:column="9">LexerStyler</name> <type:modifier pos:line="798" pos:column="21">*</type:modifier></type><name pos:line="798" pos:column="22">pStyler</name> <init pos:line="798" pos:column="30">= <expr><op:operator pos:line="798" pos:column="32">(</op:operator><call><name><name pos:line="798" pos:column="33">_pParameter</name><op:operator pos:line="798" pos:column="44">-&gt;</op:operator><name pos:line="798" pos:column="46">getLStylerArray</name></name><argument_list pos:line="798" pos:column="61">()</argument_list></call><op:operator pos:line="798" pos:column="63">)</op:operator><op:operator pos:line="798" pos:column="64">.</op:operator><call><name pos:line="798" pos:column="65">getLexerStylerByName</name><argument_list pos:line="798" pos:column="85">(<argument><expr><name pos:line="798" pos:column="86">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	
	<if pos:line="799" pos:column="9">if <condition pos:line="799" pos:column="12">(<expr><name pos:line="799" pos:column="13">pStyler</name></expr>)</condition><then pos:line="799" pos:column="21">
	<block pos:line="800" pos:column="9">{
		<for pos:line="801" pos:column="17">for (<init><decl><type><name pos:line="801" pos:column="22">int</name></type> <name pos:line="801" pos:column="26">i</name> <init pos:line="801" pos:column="28">= <expr><lit:literal type="number" pos:line="801" pos:column="30">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="801" pos:column="34">i</name> <op:operator pos:line="801" pos:column="36">&lt;</op:operator> <call><name><name pos:line="801" pos:column="38">pStyler</name><op:operator pos:line="801" pos:column="45">-&gt;</op:operator><name pos:line="801" pos:column="47">getNbStyler</name></name><argument_list pos:line="801" pos:column="58">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="801" pos:column="63">i</name><op:operator pos:line="801" pos:column="64">++</op:operator></expr></incr>)
		<block pos:line="802" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="803" pos:column="25">Style</name> <type:modifier pos:line="803" pos:column="31">&amp;</type:modifier></type> <name pos:line="803" pos:column="33">style</name> <init pos:line="803" pos:column="39">= <expr><call><name><name pos:line="803" pos:column="41">pStyler</name><op:operator pos:line="803" pos:column="48">-&gt;</op:operator><name pos:line="803" pos:column="50">getStyler</name></name><argument_list pos:line="803" pos:column="59">(<argument><expr><name pos:line="803" pos:column="60">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name pos:line="805" pos:column="25">setStyle</name><argument_list pos:line="805" pos:column="33">(<argument><expr><name pos:line="805" pos:column="34">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="807" pos:column="25">if <condition pos:line="807" pos:column="28">(<expr><name><name pos:line="807" pos:column="29">style</name><op:operator pos:line="807" pos:column="34">.</op:operator><name pos:line="807" pos:column="35">_keywordClass</name></name> <op:operator pos:line="807" pos:column="49">&gt;=</op:operator> <lit:literal type="number" pos:line="807" pos:column="52">0</lit:literal> <op:operator pos:line="807" pos:column="54">&amp;&amp;</op:operator> <name><name pos:line="807" pos:column="57">style</name><op:operator pos:line="807" pos:column="62">.</op:operator><name pos:line="807" pos:column="63">_keywordClass</name></name> <op:operator pos:line="807" pos:column="77">&lt;=</op:operator> <name pos:line="807" pos:column="80">KEYWORDSET_MAX</name></expr>)</condition><then pos:line="807" pos:column="95">
			<block pos:line="808" pos:column="25">{			
				<decl_stmt><decl><type><name><name pos:line="809" pos:column="33">basic_string</name><argument_list pos:line="809" pos:column="45">&lt;<argument><expr><name pos:line="809" pos:column="46">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="809" pos:column="52">keywordList</name><argument_list pos:line="809" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="809" pos:column="64">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
				<if pos:line="810" pos:column="33">if <condition pos:line="810" pos:column="36">(<expr><name><name pos:line="810" pos:column="37">style</name><op:operator pos:line="810" pos:column="42">.</op:operator><name pos:line="810" pos:column="43">_keywords</name></name></expr>)</condition><then pos:line="810" pos:column="53">
				<block pos:line="811" pos:column="33">{
<cpp:ifdef pos:line="812" pos:column="1">#<cpp:directive pos:line="812" pos:column="2">ifdef</cpp:directive> <name pos:line="812" pos:column="8">UNICODE</name></cpp:ifdef>
					<expr_stmt><expr><name pos:line="813" pos:column="41">keywordList</name> <op:operator pos:line="813" pos:column="53">=</op:operator> <call><name pos:line="813" pos:column="55">wstring2string</name><argument_list pos:line="813" pos:column="69">(<argument><expr><op:operator pos:line="813" pos:column="70">*</op:operator><op:operator pos:line="813" pos:column="71">(</op:operator><name><name pos:line="813" pos:column="72">style</name><op:operator pos:line="813" pos:column="77">.</op:operator><name pos:line="813" pos:column="78">_keywords</name></name><op:operator pos:line="813" pos:column="87">)</op:operator></expr></argument>, <argument><expr><name pos:line="813" pos:column="90">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="814" pos:column="1">#<cpp:directive pos:line="814" pos:column="2">else</cpp:directive></cpp:else>
					<expr_stmt><expr><name pos:line="815" pos:column="41">keywordList</name> <op:operator pos:line="815" pos:column="53">=</op:operator> <op:operator pos:line="815" pos:column="55">*</op:operator><op:operator pos:line="815" pos:column="56">(</op:operator><name><name pos:line="815" pos:column="57">style</name><op:operator pos:line="815" pos:column="62">.</op:operator><name pos:line="815" pos:column="63">_keywords</name></name><op:operator pos:line="815" pos:column="72">)</op:operator></expr>;</expr_stmt>
<cpp:endif pos:line="816" pos:column="1">#<cpp:directive pos:line="816" pos:column="2">endif</cpp:directive></cpp:endif>
				}</block></then></if>
				<expr_stmt><expr><call><name pos:line="818" pos:column="33">execute</name><argument_list pos:line="818" pos:column="40">(<argument><expr><name pos:line="818" pos:column="41">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><name><name pos:line="818" pos:column="58">style</name><op:operator pos:line="818" pos:column="63">.</op:operator><name pos:line="818" pos:column="64">_keywordClass</name></name></expr></argument>, <argument><expr><op:operator pos:line="818" pos:column="79">(</op:operator><name pos:line="818" pos:column="80">LPARAM</name><op:operator pos:line="818" pos:column="86">)</op:operator><call><name pos:line="818" pos:column="87">getCompleteKeywordList</name><argument_list pos:line="818" pos:column="109">(<argument><expr><name pos:line="818" pos:column="110">keywordList</name></expr></argument>, <argument><expr><name pos:line="818" pos:column="123">typeDoc</name></expr></argument>, <argument><expr><name><name pos:line="818" pos:column="132">style</name><op:operator pos:line="818" pos:column="137">.</op:operator><name pos:line="818" pos:column="138">_keywordClass</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="824" pos:column="1">void</name></type> <name><name pos:line="824" pos:column="6">ScintillaEditView</name><op:operator pos:line="824" pos:column="23">::</op:operator><name pos:line="824" pos:column="25">setCppLexer</name></name><parameter_list pos:line="824" pos:column="36">(<param><decl><type><name pos:line="824" pos:column="37">LangType</name></type> <name pos:line="824" pos:column="46">langType</name></decl></param>)</parameter_list>
<block pos:line="825" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="826" pos:column="5">const</specifier> <name pos:line="826" pos:column="11">char</name> <type:modifier pos:line="826" pos:column="16">*</type:modifier></type><name pos:line="826" pos:column="17">cppInstrs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="827" pos:column="5">const</specifier> <name pos:line="827" pos:column="11">char</name> <type:modifier pos:line="827" pos:column="16">*</type:modifier></type><name pos:line="827" pos:column="17">cppTypes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="828" pos:column="5">const</specifier> <name pos:line="828" pos:column="11">TCHAR</name> <type:modifier pos:line="828" pos:column="17">*</type:modifier></type><name pos:line="828" pos:column="18">doxygenKeyWords</name>  <init pos:line="828" pos:column="35">= <expr><call><name><name pos:line="828" pos:column="37">_pParameter</name><op:operator pos:line="828" pos:column="48">-&gt;</op:operator><name pos:line="828" pos:column="50">getWordList</name></name><argument_list pos:line="828" pos:column="61">(<argument><expr><name pos:line="828" pos:column="62">L_CPP</name></expr></argument>, <argument><expr><name pos:line="828" pos:column="69">LANG_INDEX_TYPE2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="830" pos:column="9">const</specifier> <name pos:line="830" pos:column="15">TCHAR</name> <type:modifier pos:line="830" pos:column="21">*</type:modifier></type><name pos:line="830" pos:column="22">lexerName</name> <init pos:line="830" pos:column="32">= <expr><name><name pos:line="830" pos:column="34">ScintillaEditView</name><op:operator pos:line="830" pos:column="51">::</op:operator><name pos:line="830" pos:column="53">langNames</name><index pos:line="830" pos:column="62">[<expr><name pos:line="830" pos:column="63">langType</name></expr>]</index></name><op:operator pos:line="830" pos:column="72">.</op:operator><name pos:line="830" pos:column="73">lexerName</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name pos:line="832" pos:column="5">execute</name><argument_list pos:line="832" pos:column="12">(<argument><expr><name pos:line="832" pos:column="13">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="832" pos:column="27">SCLEX_CPP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="834" pos:column="9">if <condition pos:line="834" pos:column="12">(<expr><op:operator pos:line="834" pos:column="13">(</op:operator><name pos:line="834" pos:column="14">langType</name> <op:operator pos:line="834" pos:column="23">!=</op:operator> <name pos:line="834" pos:column="26">L_RC</name><op:operator pos:line="834" pos:column="30">)</op:operator> <op:operator pos:line="834" pos:column="32">&amp;&amp;</op:operator> <op:operator pos:line="834" pos:column="35">(</op:operator><name pos:line="834" pos:column="36">langType</name> <op:operator pos:line="834" pos:column="45">!=</op:operator> <name pos:line="834" pos:column="48">L_JS</name><op:operator pos:line="834" pos:column="52">)</op:operator></expr>)</condition><then pos:line="834" pos:column="54">
    <block pos:line="835" pos:column="5">{
        <if pos:line="836" pos:column="9">if <condition pos:line="836" pos:column="12">(<expr><name pos:line="836" pos:column="13">doxygenKeyWords</name></expr>)</condition><then pos:line="836" pos:column="29">
		<block pos:line="837" pos:column="17">{
<cpp:ifdef pos:line="838" pos:column="1">#<cpp:directive pos:line="838" pos:column="2">ifdef</cpp:directive> <name pos:line="838" pos:column="8">UNICODE</name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="839" pos:column="25">WcharMbcsConvertor</name> <type:modifier pos:line="839" pos:column="44">*</type:modifier></type><name pos:line="839" pos:column="45">wmc</name> <init pos:line="839" pos:column="49">= <expr><call><name><name pos:line="839" pos:column="51">WcharMbcsConvertor</name><op:operator pos:line="839" pos:column="69">::</op:operator><name pos:line="839" pos:column="71">getInstance</name></name><argument_list pos:line="839" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="840" pos:column="25">const</specifier> <name pos:line="840" pos:column="31">char</name> <type:modifier pos:line="840" pos:column="36">*</type:modifier></type> <name pos:line="840" pos:column="38">doxygenKeyWords_char</name> <init pos:line="840" pos:column="59">= <expr><call><name><name pos:line="840" pos:column="61">wmc</name><op:operator pos:line="840" pos:column="64">-&gt;</op:operator><name pos:line="840" pos:column="66">wchar2char</name></name><argument_list pos:line="840" pos:column="76">(<argument><expr><name pos:line="840" pos:column="77">doxygenKeyWords</name></expr></argument>, <argument><expr><name pos:line="840" pos:column="94">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="841" pos:column="25">execute</name><argument_list pos:line="841" pos:column="32">(<argument><expr><name pos:line="841" pos:column="33">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="841" pos:column="50">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="841" pos:column="53">(</op:operator><name pos:line="841" pos:column="54">LPARAM</name><op:operator pos:line="841" pos:column="60">)</op:operator><name pos:line="841" pos:column="61">doxygenKeyWords_char</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="842" pos:column="1">#<cpp:directive pos:line="842" pos:column="2">else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name pos:line="843" pos:column="25">execute</name><argument_list pos:line="843" pos:column="32">(<argument><expr><name pos:line="843" pos:column="33">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="843" pos:column="50">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="843" pos:column="53">(</op:operator><name pos:line="843" pos:column="54">LPARAM</name><op:operator pos:line="843" pos:column="60">)</op:operator><name pos:line="843" pos:column="61">doxygenKeyWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="844" pos:column="1">#<cpp:directive pos:line="844" pos:column="2">endif</cpp:directive></cpp:endif>
		}</block></then></if>
    }</block></then></if>

	<if pos:line="848" pos:column="9">if <condition pos:line="848" pos:column="12">(<expr><name pos:line="848" pos:column="13">langType</name> <op:operator pos:line="848" pos:column="22">==</op:operator> <name pos:line="848" pos:column="25">L_JS</name></expr>)</condition><then pos:line="848" pos:column="30">
	<block pos:line="849" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="850" pos:column="17">LexerStyler</name> <type:modifier pos:line="850" pos:column="29">*</type:modifier></type><name pos:line="850" pos:column="30">pStyler</name> <init pos:line="850" pos:column="38">= <expr><op:operator pos:line="850" pos:column="40">(</op:operator><call><name><name pos:line="850" pos:column="41">_pParameter</name><op:operator pos:line="850" pos:column="52">-&gt;</op:operator><name pos:line="850" pos:column="54">getLStylerArray</name></name><argument_list pos:line="850" pos:column="69">()</argument_list></call><op:operator pos:line="850" pos:column="71">)</op:operator><op:operator pos:line="850" pos:column="72">.</op:operator><call><name pos:line="850" pos:column="73">getLexerStylerByName</name><argument_list pos:line="850" pos:column="93">(<argument><expr><name pos:line="850" pos:column="94">lexerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	
		<if pos:line="851" pos:column="17">if <condition pos:line="851" pos:column="20">(<expr><name pos:line="851" pos:column="21">pStyler</name></expr>)</condition><then pos:line="851" pos:column="29">
		<block pos:line="852" pos:column="17">{
			<for pos:line="853" pos:column="25">for (<init><decl><type><name pos:line="853" pos:column="30">int</name></type> <name pos:line="853" pos:column="34">i</name> <init pos:line="853" pos:column="36">= <expr><lit:literal type="number" pos:line="853" pos:column="38">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="853" pos:column="42">i</name> <op:operator pos:line="853" pos:column="44">&lt;</op:operator> <call><name><name pos:line="853" pos:column="46">pStyler</name><op:operator pos:line="853" pos:column="53">-&gt;</op:operator><name pos:line="853" pos:column="55">getNbStyler</name></name><argument_list pos:line="853" pos:column="66">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="853" pos:column="71">i</name><op:operator pos:line="853" pos:column="72">++</op:operator></expr></incr>)
			<block pos:line="854" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="855" pos:column="33">Style</name></type> <name pos:line="855" pos:column="39">style</name> <init pos:line="855" pos:column="45">= <expr><call><name><name pos:line="855" pos:column="47">pStyler</name><op:operator pos:line="855" pos:column="54">-&gt;</op:operator><name pos:line="855" pos:column="56">getStyler</name></name><argument_list pos:line="855" pos:column="65">(<argument><expr><name pos:line="855" pos:column="66">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="855" pos:column="73">//not by reference, but copy</comment>
				<decl_stmt><decl><type><name pos:line="856" pos:column="33">int</name></type> <name pos:line="856" pos:column="37">cppID</name> <init pos:line="856" pos:column="43">= <expr><name><name pos:line="856" pos:column="45">style</name><op:operator pos:line="856" pos:column="50">.</op:operator><name pos:line="856" pos:column="51">_styleID</name></name></expr></init></decl>;</decl_stmt> 
				<switch pos:line="857" pos:column="33">switch <condition pos:line="857" pos:column="40">(<expr><name><name pos:line="857" pos:column="41">style</name><op:operator pos:line="857" pos:column="46">.</op:operator><name pos:line="857" pos:column="47">_styleID</name></name></expr>)</condition>
				<block pos:line="858" pos:column="33">{
					<case pos:line="859" pos:column="41">case <expr><name pos:line="859" pos:column="46">SCE_HJ_DEFAULT</name></expr> : <expr_stmt><expr><name pos:line="859" pos:column="63">cppID</name> <op:operator pos:line="859" pos:column="69">=</op:operator> <name pos:line="859" pos:column="71">SCE_C_DEFAULT</name></expr>;</expr_stmt> <break pos:line="859" pos:column="86">break;</break>
					</case><case pos:line="860" pos:column="41">case <expr><name pos:line="860" pos:column="46">SCE_HJ_WORD</name></expr> : <expr_stmt><expr><name pos:line="860" pos:column="60">cppID</name> <op:operator pos:line="860" pos:column="66">=</op:operator> <name pos:line="860" pos:column="68">SCE_C_IDENTIFIER</name></expr>;</expr_stmt> <break pos:line="860" pos:column="86">break;</break>
					</case><case pos:line="861" pos:column="41">case <expr><name pos:line="861" pos:column="46">SCE_HJ_SYMBOLS</name></expr> : <expr_stmt><expr><name pos:line="861" pos:column="63">cppID</name> <op:operator pos:line="861" pos:column="69">=</op:operator> <name pos:line="861" pos:column="71">SCE_C_OPERATOR</name></expr>;</expr_stmt> <break pos:line="861" pos:column="87">break;</break>
					</case><case pos:line="862" pos:column="41">case <expr><name pos:line="862" pos:column="46">SCE_HJ_COMMENT</name></expr> : <expr_stmt><expr><name pos:line="862" pos:column="63">cppID</name> <op:operator pos:line="862" pos:column="69">=</op:operator> <name pos:line="862" pos:column="71">SCE_C_COMMENT</name></expr>;</expr_stmt> <break pos:line="862" pos:column="86">break;</break>
					</case><case pos:line="863" pos:column="41">case <expr><name pos:line="863" pos:column="46">SCE_HJ_COMMENTLINE</name></expr> : <expr_stmt><expr><name pos:line="863" pos:column="67">cppID</name> <op:operator pos:line="863" pos:column="73">=</op:operator> <name pos:line="863" pos:column="75">SCE_C_COMMENTLINE</name></expr>;</expr_stmt> <break pos:line="863" pos:column="94">break;</break>
					</case><case pos:line="864" pos:column="41">case <expr><name pos:line="864" pos:column="46">SCE_HJ_COMMENTDOC</name></expr> : <expr_stmt><expr><name pos:line="864" pos:column="66">cppID</name> <op:operator pos:line="864" pos:column="72">=</op:operator> <name pos:line="864" pos:column="74">SCE_C_COMMENTDOC</name></expr>;</expr_stmt> <break pos:line="864" pos:column="92">break;</break>
					</case><case pos:line="865" pos:column="41">case <expr><name pos:line="865" pos:column="46">SCE_HJ_NUMBER</name></expr> : <expr_stmt><expr><name pos:line="865" pos:column="62">cppID</name> <op:operator pos:line="865" pos:column="68">=</op:operator> <name pos:line="865" pos:column="70">SCE_C_NUMBER</name></expr>;</expr_stmt> <break pos:line="865" pos:column="84">break;</break>
					</case><case pos:line="866" pos:column="41">case <expr><name pos:line="866" pos:column="46">SCE_HJ_KEYWORD</name></expr> : <expr_stmt><expr><name pos:line="866" pos:column="63">cppID</name> <op:operator pos:line="866" pos:column="69">=</op:operator> <name pos:line="866" pos:column="71">SCE_C_WORD</name></expr>;</expr_stmt> <break pos:line="866" pos:column="83">break;</break>
					</case><case pos:line="867" pos:column="41">case <expr><name pos:line="867" pos:column="46">SCE_HJ_DOUBLESTRING</name></expr> : <expr_stmt><expr><name pos:line="867" pos:column="68">cppID</name> <op:operator pos:line="867" pos:column="74">=</op:operator> <name pos:line="867" pos:column="76">SCE_C_STRING</name></expr>;</expr_stmt> <break pos:line="867" pos:column="90">break;</break>
					</case><case pos:line="868" pos:column="41">case <expr><name pos:line="868" pos:column="46">SCE_HJ_SINGLESTRING</name></expr> : <expr_stmt><expr><name pos:line="868" pos:column="68">cppID</name> <op:operator pos:line="868" pos:column="74">=</op:operator> <name pos:line="868" pos:column="76">SCE_C_CHARACTER</name></expr>;</expr_stmt> <break pos:line="868" pos:column="93">break;</break>
					</case><case pos:line="869" pos:column="41">case <expr><name pos:line="869" pos:column="46">SCE_HJ_REGEX</name></expr> : <expr_stmt><expr><name pos:line="869" pos:column="61">cppID</name> <op:operator pos:line="869" pos:column="67">=</op:operator> <name pos:line="869" pos:column="69">SCE_C_REGEX</name></expr>;</expr_stmt> <break pos:line="869" pos:column="82">break;</break>
				</case>}</block></switch>
				<expr_stmt><expr><name><name pos:line="871" pos:column="33">style</name><op:operator pos:line="871" pos:column="38">.</op:operator><name pos:line="871" pos:column="39">_styleID</name></name> <op:operator pos:line="871" pos:column="48">=</op:operator> <name pos:line="871" pos:column="50">cppID</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="872" pos:column="33">setStyle</name><argument_list pos:line="872" pos:column="41">(<argument><expr><name pos:line="872" pos:column="42">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
		<expr_stmt><expr><call><name pos:line="875" pos:column="17">execute</name><argument_list pos:line="875" pos:column="24">(<argument><expr><name pos:line="875" pos:column="25">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="875" pos:column="48">SCE_C_DEFAULT</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="875" pos:column="63">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="876" pos:column="17">execute</name><argument_list pos:line="876" pos:column="24">(<argument><expr><name pos:line="876" pos:column="25">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="48">SCE_C_COMMENTLINE</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="876" pos:column="67">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="877" pos:column="17">execute</name><argument_list pos:line="877" pos:column="24">(<argument><expr><name pos:line="877" pos:column="25">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="877" pos:column="48">SCE_C_COMMENT</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="877" pos:column="63">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="878" pos:column="17">execute</name><argument_list pos:line="878" pos:column="24">(<argument><expr><name pos:line="878" pos:column="25">SCI_STYLESETEOLFILLED</name></expr></argument>, <argument><expr><name pos:line="878" pos:column="48">SCE_C_COMMENTDOC</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="878" pos:column="66">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><specifier pos:line="881" pos:column="9">const</specifier> <name pos:line="881" pos:column="15">TCHAR</name> <type:modifier pos:line="881" pos:column="21">*</type:modifier></type><name><name pos:line="881" pos:column="22">pKwArray</name><index pos:line="881" pos:column="30">[<expr><lit:literal type="number" pos:line="881" pos:column="31">10</lit:literal></expr>]</index></name> <init pos:line="881" pos:column="35">= <expr><block pos:line="881" pos:column="37">{<expr><name pos:line="881" pos:column="38">NULL</name></expr>, <expr><name pos:line="881" pos:column="44">NULL</name></expr>, <expr><name pos:line="881" pos:column="50">NULL</name></expr>, <expr><name pos:line="881" pos:column="56">NULL</name></expr>, <expr><name pos:line="881" pos:column="62">NULL</name></expr>, <expr><name pos:line="881" pos:column="68">NULL</name></expr>, <expr><name pos:line="881" pos:column="74">NULL</name></expr>, <expr><name pos:line="881" pos:column="80">NULL</name></expr>, <expr><name pos:line="881" pos:column="86">NULL</name></expr>, <expr><name pos:line="881" pos:column="92">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="882" pos:column="9">makeStyle</name><argument_list pos:line="882" pos:column="18">(<argument><expr><name pos:line="882" pos:column="19">langType</name></expr></argument>, <argument><expr><name pos:line="882" pos:column="29">pKwArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name pos:line="884" pos:column="9">basic_string</name><argument_list pos:line="884" pos:column="21">&lt;<argument><expr><name pos:line="884" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="884" pos:column="28">keywordListInstruction</name><argument_list pos:line="884" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="884" pos:column="51">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="885" pos:column="9">basic_string</name><argument_list pos:line="885" pos:column="21">&lt;<argument><expr><name pos:line="885" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="885" pos:column="28">keywordListType</name><argument_list pos:line="885" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="885" pos:column="44">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="886" pos:column="9">if <condition pos:line="886" pos:column="12">(<expr><name><name pos:line="886" pos:column="13">pKwArray</name><index pos:line="886" pos:column="21">[<expr><name pos:line="886" pos:column="22">LANG_INDEX_INSTR</name></expr>]</index></name></expr>)</condition><then pos:line="886" pos:column="40">
	<block pos:line="887" pos:column="9">{
<cpp:ifdef pos:line="888" pos:column="1">#<cpp:directive pos:line="888" pos:column="2">ifdef</cpp:directive> <name pos:line="888" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name pos:line="889" pos:column="17">basic_string</name><argument_list pos:line="889" pos:column="29">&lt;<argument><expr><name pos:line="889" pos:column="30">wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="889" pos:column="39">kwlW</name> <init pos:line="889" pos:column="44">= <expr><name><name pos:line="889" pos:column="46">pKwArray</name><index pos:line="889" pos:column="54">[<expr><name pos:line="889" pos:column="55">LANG_INDEX_INSTR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="890" pos:column="17">keywordListInstruction</name> <op:operator pos:line="890" pos:column="40">=</op:operator> <call><name pos:line="890" pos:column="42">wstring2string</name><argument_list pos:line="890" pos:column="56">(<argument><expr><name pos:line="890" pos:column="57">kwlW</name></expr></argument>, <argument><expr><name pos:line="890" pos:column="63">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="891" pos:column="1">#<cpp:directive pos:line="891" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="892" pos:column="17">keywordListInstruction</name> <op:operator pos:line="892" pos:column="40">=</op:operator> <name><name pos:line="892" pos:column="42">pKwArray</name><index pos:line="892" pos:column="50">[<expr><name pos:line="892" pos:column="51">LANG_INDEX_INSTR</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="893" pos:column="1">#<cpp:directive pos:line="893" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="895" pos:column="9">cppInstrs</name> <op:operator pos:line="895" pos:column="19">=</op:operator> <call><name pos:line="895" pos:column="21">getCompleteKeywordList</name><argument_list pos:line="895" pos:column="43">(<argument><expr><name pos:line="895" pos:column="44">keywordListInstruction</name></expr></argument>, <argument><expr><name pos:line="895" pos:column="68">langType</name></expr></argument>, <argument><expr><name pos:line="895" pos:column="78">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="897" pos:column="9">if <condition pos:line="897" pos:column="12">(<expr><name><name pos:line="897" pos:column="13">pKwArray</name><index pos:line="897" pos:column="21">[<expr><name pos:line="897" pos:column="22">LANG_INDEX_TYPE</name></expr>]</index></name></expr>)</condition><then pos:line="897" pos:column="39">
	<block pos:line="898" pos:column="9">{
<cpp:ifdef pos:line="899" pos:column="1">#<cpp:directive pos:line="899" pos:column="2">ifdef</cpp:directive> <name pos:line="899" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name pos:line="900" pos:column="17">basic_string</name><argument_list pos:line="900" pos:column="29">&lt;<argument><expr><name pos:line="900" pos:column="30">wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="900" pos:column="39">kwlW</name> <init pos:line="900" pos:column="44">= <expr><name><name pos:line="900" pos:column="46">pKwArray</name><index pos:line="900" pos:column="54">[<expr><name pos:line="900" pos:column="55">LANG_INDEX_TYPE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="901" pos:column="17">keywordListType</name> <op:operator pos:line="901" pos:column="33">=</op:operator> <call><name pos:line="901" pos:column="35">wstring2string</name><argument_list pos:line="901" pos:column="49">(<argument><expr><name pos:line="901" pos:column="50">kwlW</name></expr></argument>, <argument><expr><name pos:line="901" pos:column="56">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="902" pos:column="1">#<cpp:directive pos:line="902" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="903" pos:column="17">keywordListType</name> <op:operator pos:line="903" pos:column="33">=</op:operator> <name><name pos:line="903" pos:column="35">pKwArray</name><index pos:line="903" pos:column="43">[<expr><name pos:line="903" pos:column="44">LANG_INDEX_TYPE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="904" pos:column="1">#<cpp:directive pos:line="904" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="906" pos:column="9">cppTypes</name> <op:operator pos:line="906" pos:column="18">=</op:operator> <call><name pos:line="906" pos:column="20">getCompleteKeywordList</name><argument_list pos:line="906" pos:column="42">(<argument><expr><name pos:line="906" pos:column="43">keywordListType</name></expr></argument>, <argument><expr><name pos:line="906" pos:column="60">langType</name></expr></argument>, <argument><expr><name pos:line="906" pos:column="70">LANG_INDEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="908" pos:column="9">execute</name><argument_list pos:line="908" pos:column="16">(<argument><expr><name pos:line="908" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="908" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="908" pos:column="37">(</op:operator><name pos:line="908" pos:column="38">LPARAM</name><op:operator pos:line="908" pos:column="44">)</op:operator><name pos:line="908" pos:column="45">cppInstrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="909" pos:column="9">execute</name><argument_list pos:line="909" pos:column="16">(<argument><expr><name pos:line="909" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="909" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="909" pos:column="37">(</op:operator><name pos:line="909" pos:column="38">LPARAM</name><op:operator pos:line="909" pos:column="44">)</op:operator><name pos:line="909" pos:column="45">cppTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="911" pos:column="9">execute</name><argument_list pos:line="911" pos:column="16">(<argument><expr><name pos:line="911" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="911" pos:column="34">reinterpret_cast</name><argument_list pos:line="911" pos:column="50">&lt;<argument><expr><name pos:line="911" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="911" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="911" pos:column="59">"fold"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="911" pos:column="68">reinterpret_cast</name><argument_list pos:line="911" pos:column="84">&lt;<argument><expr><name pos:line="911" pos:column="85">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="911" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="911" pos:column="93">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="912" pos:column="9">execute</name><argument_list pos:line="912" pos:column="16">(<argument><expr><name pos:line="912" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="912" pos:column="34">reinterpret_cast</name><argument_list pos:line="912" pos:column="50">&lt;<argument><expr><name pos:line="912" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="912" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="912" pos:column="59">"fold.compact"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="912" pos:column="76">reinterpret_cast</name><argument_list pos:line="912" pos:column="92">&lt;<argument><expr><name pos:line="912" pos:column="93">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="912" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="912" pos:column="101">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="914" pos:column="9">execute</name><argument_list pos:line="914" pos:column="16">(<argument><expr><name pos:line="914" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="914" pos:column="34">reinterpret_cast</name><argument_list pos:line="914" pos:column="50">&lt;<argument><expr><name pos:line="914" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="914" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="914" pos:column="59">"fold.comment"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="914" pos:column="76">reinterpret_cast</name><argument_list pos:line="914" pos:column="92">&lt;<argument><expr><name pos:line="914" pos:column="93">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="914" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="914" pos:column="101">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="915" pos:column="9">execute</name><argument_list pos:line="915" pos:column="16">(<argument><expr><name pos:line="915" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="915" pos:column="34">reinterpret_cast</name><argument_list pos:line="915" pos:column="50">&lt;<argument><expr><name pos:line="915" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="915" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="915" pos:column="59">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="915" pos:column="81">reinterpret_cast</name><argument_list pos:line="915" pos:column="97">&lt;<argument><expr><name pos:line="915" pos:column="98">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="915" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="915" pos:column="106">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="917" pos:column="9">// Disable track preprocessor to avoid incorrect detection.</comment>
	<comment type="line" pos:line="918" pos:column="9">// In the most of cases, the symbols are defined outside of file.</comment>
	<expr_stmt><expr><call><name pos:line="919" pos:column="9">execute</name><argument_list pos:line="919" pos:column="16">(<argument><expr><name pos:line="919" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="919" pos:column="34">reinterpret_cast</name><argument_list pos:line="919" pos:column="50">&lt;<argument><expr><name pos:line="919" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="919" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="919" pos:column="59">"lexer.cpp.track.preprocessor"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="919" pos:column="92">reinterpret_cast</name><argument_list pos:line="919" pos:column="108">&lt;<argument><expr><name pos:line="919" pos:column="109">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="919" pos:column="116">(<argument><expr><lit:literal type="string" pos:line="919" pos:column="117">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="922" pos:column="1">void</name></type> <name><name pos:line="922" pos:column="6">ScintillaEditView</name><op:operator pos:line="922" pos:column="23">::</op:operator><name pos:line="922" pos:column="25">setTclLexer</name></name><parameter_list pos:line="922" pos:column="36">()</parameter_list>
<block pos:line="923" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="924" pos:column="9">const</specifier> <name pos:line="924" pos:column="15">char</name> <type:modifier pos:line="924" pos:column="20">*</type:modifier></type><name pos:line="924" pos:column="21">tclInstrs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="925" pos:column="5">const</specifier> <name pos:line="925" pos:column="11">char</name> <type:modifier pos:line="925" pos:column="16">*</type:modifier></type><name pos:line="925" pos:column="17">tclTypes</name></decl>;</decl_stmt>


    <expr_stmt><expr><call><name pos:line="928" pos:column="5">execute</name><argument_list pos:line="928" pos:column="12">(<argument><expr><name pos:line="928" pos:column="13">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="928" pos:column="27">SCLEX_TCL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

	<decl_stmt><decl><type><specifier pos:line="930" pos:column="9">const</specifier> <name pos:line="930" pos:column="15">TCHAR</name> <type:modifier pos:line="930" pos:column="21">*</type:modifier></type><name><name pos:line="930" pos:column="22">pKwArray</name><index pos:line="930" pos:column="30">[<expr><lit:literal type="number" pos:line="930" pos:column="31">10</lit:literal></expr>]</index></name> <init pos:line="930" pos:column="35">= <expr><block pos:line="930" pos:column="37">{<expr><name pos:line="930" pos:column="38">NULL</name></expr>, <expr><name pos:line="930" pos:column="44">NULL</name></expr>, <expr><name pos:line="930" pos:column="50">NULL</name></expr>, <expr><name pos:line="930" pos:column="56">NULL</name></expr>, <expr><name pos:line="930" pos:column="62">NULL</name></expr>, <expr><name pos:line="930" pos:column="68">NULL</name></expr>, <expr><name pos:line="930" pos:column="74">NULL</name></expr>, <expr><name pos:line="930" pos:column="80">NULL</name></expr>, <expr><name pos:line="930" pos:column="86">NULL</name></expr>, <expr><name pos:line="930" pos:column="92">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="931" pos:column="9">makeStyle</name><argument_list pos:line="931" pos:column="18">(<argument><expr><name pos:line="931" pos:column="19">L_TCL</name></expr></argument>, <argument><expr><name pos:line="931" pos:column="26">pKwArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name pos:line="933" pos:column="9">basic_string</name><argument_list pos:line="933" pos:column="21">&lt;<argument><expr><name pos:line="933" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="933" pos:column="28">keywordListInstruction</name><argument_list pos:line="933" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="933" pos:column="51">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="934" pos:column="9">basic_string</name><argument_list pos:line="934" pos:column="21">&lt;<argument><expr><name pos:line="934" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="934" pos:column="28">keywordListType</name><argument_list pos:line="934" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="934" pos:column="44">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="935" pos:column="9">if <condition pos:line="935" pos:column="12">(<expr><name><name pos:line="935" pos:column="13">pKwArray</name><index pos:line="935" pos:column="21">[<expr><name pos:line="935" pos:column="22">LANG_INDEX_INSTR</name></expr>]</index></name></expr>)</condition><then pos:line="935" pos:column="40">
	<block pos:line="936" pos:column="9">{
<cpp:ifdef pos:line="937" pos:column="1">#<cpp:directive pos:line="937" pos:column="2">ifdef</cpp:directive> <name pos:line="937" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name pos:line="938" pos:column="17">basic_string</name><argument_list pos:line="938" pos:column="29">&lt;<argument><expr><name pos:line="938" pos:column="30">wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="938" pos:column="39">kwlW</name> <init pos:line="938" pos:column="44">= <expr><name><name pos:line="938" pos:column="46">pKwArray</name><index pos:line="938" pos:column="54">[<expr><name pos:line="938" pos:column="55">LANG_INDEX_INSTR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="939" pos:column="17">keywordListInstruction</name> <op:operator pos:line="939" pos:column="40">=</op:operator> <call><name pos:line="939" pos:column="42">wstring2string</name><argument_list pos:line="939" pos:column="56">(<argument><expr><name pos:line="939" pos:column="57">kwlW</name></expr></argument>, <argument><expr><name pos:line="939" pos:column="63">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="940" pos:column="1">#<cpp:directive pos:line="940" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="941" pos:column="17">keywordListInstruction</name> <op:operator pos:line="941" pos:column="40">=</op:operator> <name><name pos:line="941" pos:column="42">pKwArray</name><index pos:line="941" pos:column="50">[<expr><name pos:line="941" pos:column="51">LANG_INDEX_INSTR</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="942" pos:column="1">#<cpp:directive pos:line="942" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="944" pos:column="9">tclInstrs</name> <op:operator pos:line="944" pos:column="19">=</op:operator> <call><name pos:line="944" pos:column="21">getCompleteKeywordList</name><argument_list pos:line="944" pos:column="43">(<argument><expr><name pos:line="944" pos:column="44">keywordListInstruction</name></expr></argument>, <argument><expr><name pos:line="944" pos:column="68">L_TCL</name></expr></argument>, <argument><expr><name pos:line="944" pos:column="75">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="946" pos:column="9">if <condition pos:line="946" pos:column="12">(<expr><name><name pos:line="946" pos:column="13">pKwArray</name><index pos:line="946" pos:column="21">[<expr><name pos:line="946" pos:column="22">LANG_INDEX_TYPE</name></expr>]</index></name></expr>)</condition><then pos:line="946" pos:column="39">
	<block pos:line="947" pos:column="9">{
<cpp:ifdef pos:line="948" pos:column="1">#<cpp:directive pos:line="948" pos:column="2">ifdef</cpp:directive> <name pos:line="948" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><name><name pos:line="949" pos:column="17">basic_string</name><argument_list pos:line="949" pos:column="29">&lt;<argument><expr><name pos:line="949" pos:column="30">wchar_t</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="949" pos:column="39">kwlW</name> <init pos:line="949" pos:column="44">= <expr><name><name pos:line="949" pos:column="46">pKwArray</name><index pos:line="949" pos:column="54">[<expr><name pos:line="949" pos:column="55">LANG_INDEX_TYPE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="950" pos:column="17">keywordListType</name> <op:operator pos:line="950" pos:column="33">=</op:operator> <call><name pos:line="950" pos:column="35">wstring2string</name><argument_list pos:line="950" pos:column="49">(<argument><expr><name pos:line="950" pos:column="50">kwlW</name></expr></argument>, <argument><expr><name pos:line="950" pos:column="56">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="951" pos:column="1">#<cpp:directive pos:line="951" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="952" pos:column="17">keywordListType</name> <op:operator pos:line="952" pos:column="33">=</op:operator> <name><name pos:line="952" pos:column="35">pKwArray</name><index pos:line="952" pos:column="43">[<expr><name pos:line="952" pos:column="44">LANG_INDEX_TYPE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="953" pos:column="1">#<cpp:directive pos:line="953" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="955" pos:column="9">tclTypes</name> <op:operator pos:line="955" pos:column="18">=</op:operator> <call><name pos:line="955" pos:column="20">getCompleteKeywordList</name><argument_list pos:line="955" pos:column="42">(<argument><expr><name pos:line="955" pos:column="43">keywordListType</name></expr></argument>, <argument><expr><name pos:line="955" pos:column="60">L_TCL</name></expr></argument>, <argument><expr><name pos:line="955" pos:column="67">LANG_INDEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="957" pos:column="9">execute</name><argument_list pos:line="957" pos:column="16">(<argument><expr><name pos:line="957" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="957" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="957" pos:column="37">(</op:operator><name pos:line="957" pos:column="38">LPARAM</name><op:operator pos:line="957" pos:column="44">)</op:operator><name pos:line="957" pos:column="45">tclInstrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="958" pos:column="9">execute</name><argument_list pos:line="958" pos:column="16">(<argument><expr><name pos:line="958" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="958" pos:column="34">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="958" pos:column="37">(</op:operator><name pos:line="958" pos:column="38">LPARAM</name><op:operator pos:line="958" pos:column="44">)</op:operator><name pos:line="958" pos:column="45">tclTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="961" pos:column="1">//used by Objective-C and Actionscript</comment>
<function><type><name pos:line="962" pos:column="1">void</name></type> <name><name pos:line="962" pos:column="6">ScintillaEditView</name><op:operator pos:line="962" pos:column="23">::</op:operator><name pos:line="962" pos:column="25">setObjCLexer</name></name><parameter_list pos:line="962" pos:column="37">(<param><decl><type><name pos:line="962" pos:column="38">LangType</name></type> <name pos:line="962" pos:column="47">langType</name></decl></param>)</parameter_list> 
<block pos:line="963" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="964" pos:column="5">execute</name><argument_list pos:line="964" pos:column="12">(<argument><expr><name pos:line="964" pos:column="13">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="964" pos:column="27">SCLEX_OBJC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier pos:line="966" pos:column="9">const</specifier> <name pos:line="966" pos:column="15">TCHAR</name> <type:modifier pos:line="966" pos:column="21">*</type:modifier></type><name><name pos:line="966" pos:column="22">pKwArray</name><index pos:line="966" pos:column="30">[<expr><lit:literal type="number" pos:line="966" pos:column="31">10</lit:literal></expr>]</index></name> <init pos:line="966" pos:column="35">= <expr><block pos:line="966" pos:column="37">{<expr><name pos:line="966" pos:column="38">NULL</name></expr>, <expr><name pos:line="966" pos:column="44">NULL</name></expr>, <expr><name pos:line="966" pos:column="50">NULL</name></expr>, <expr><name pos:line="966" pos:column="56">NULL</name></expr>, <expr><name pos:line="966" pos:column="62">NULL</name></expr>, <expr><name pos:line="966" pos:column="68">NULL</name></expr>, <expr><name pos:line="966" pos:column="74">NULL</name></expr>, <expr><name pos:line="966" pos:column="80">NULL</name></expr>, <expr><name pos:line="966" pos:column="86">NULL</name></expr>, <expr><name pos:line="966" pos:column="92">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="968" pos:column="9">makeStyle</name><argument_list pos:line="968" pos:column="18">(<argument><expr><name pos:line="968" pos:column="19">langType</name></expr></argument>, <argument><expr><name pos:line="968" pos:column="29">pKwArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name><name pos:line="970" pos:column="9">basic_string</name><argument_list pos:line="970" pos:column="21">&lt;<argument><expr><name pos:line="970" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="970" pos:column="28">objcInstr1Kwl</name><argument_list pos:line="970" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="970" pos:column="42">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="971" pos:column="9">if <condition pos:line="971" pos:column="12">(<expr><name><name pos:line="971" pos:column="13">pKwArray</name><index pos:line="971" pos:column="21">[<expr><name pos:line="971" pos:column="22">LANG_INDEX_INSTR</name></expr>]</index></name></expr>)</condition><then pos:line="971" pos:column="40">
	<block pos:line="972" pos:column="9">{
<cpp:ifdef pos:line="973" pos:column="1">#<cpp:directive pos:line="973" pos:column="2">ifdef</cpp:directive> <name pos:line="973" pos:column="8">UNICODE</name></cpp:ifdef>
		<expr_stmt><expr><name pos:line="974" pos:column="17">objcInstr1Kwl</name> <op:operator pos:line="974" pos:column="31">=</op:operator> <call><name pos:line="974" pos:column="33">wstring2string</name><argument_list pos:line="974" pos:column="47">(<argument><expr><name><name pos:line="974" pos:column="48">pKwArray</name><index pos:line="974" pos:column="56">[<expr><name pos:line="974" pos:column="57">LANG_INDEX_INSTR</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="974" pos:column="76">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="975" pos:column="1">#<cpp:directive pos:line="975" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="976" pos:column="17">objcInstr1Kwl</name> <op:operator pos:line="976" pos:column="31">=</op:operator> <name><name pos:line="976" pos:column="33">pKwArray</name><index pos:line="976" pos:column="41">[<expr><name pos:line="976" pos:column="42">LANG_INDEX_INSTR</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="977" pos:column="1">#<cpp:directive pos:line="977" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<decl_stmt><decl><type><specifier pos:line="979" pos:column="9">const</specifier> <name pos:line="979" pos:column="15">char</name> <type:modifier pos:line="979" pos:column="20">*</type:modifier></type><name pos:line="979" pos:column="21">objcInstrs</name> <init pos:line="979" pos:column="32">= <expr><call><name pos:line="979" pos:column="34">getCompleteKeywordList</name><argument_list pos:line="979" pos:column="56">(<argument><expr><name pos:line="979" pos:column="57">objcInstr1Kwl</name></expr></argument>, <argument><expr><name pos:line="979" pos:column="72">langType</name></expr></argument>, <argument><expr><name pos:line="979" pos:column="82">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name><name pos:line="981" pos:column="9">basic_string</name><argument_list pos:line="981" pos:column="21">&lt;<argument><expr><name pos:line="981" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="981" pos:column="28">objcInstr2Kwl</name><argument_list pos:line="981" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="981" pos:column="42">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="982" pos:column="9">if <condition pos:line="982" pos:column="12">(<expr><name><name pos:line="982" pos:column="13">pKwArray</name><index pos:line="982" pos:column="21">[<expr><name pos:line="982" pos:column="22">LANG_INDEX_INSTR2</name></expr>]</index></name></expr>)</condition><then pos:line="982" pos:column="41">
	<block pos:line="983" pos:column="9">{
<cpp:ifdef pos:line="984" pos:column="1">#<cpp:directive pos:line="984" pos:column="2">ifdef</cpp:directive> <name pos:line="984" pos:column="8">UNICODE</name></cpp:ifdef>
		<expr_stmt><expr><name pos:line="985" pos:column="17">objcInstr2Kwl</name> <op:operator pos:line="985" pos:column="31">=</op:operator> <call><name pos:line="985" pos:column="33">wstring2string</name><argument_list pos:line="985" pos:column="47">(<argument><expr><name><name pos:line="985" pos:column="48">pKwArray</name><index pos:line="985" pos:column="56">[<expr><name pos:line="985" pos:column="57">LANG_INDEX_INSTR2</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="985" pos:column="77">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="986" pos:column="1">#<cpp:directive pos:line="986" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="987" pos:column="17">objcInstr2Kwl</name> <op:operator pos:line="987" pos:column="31">=</op:operator> <name><name pos:line="987" pos:column="33">pKwArray</name><index pos:line="987" pos:column="41">[<expr><name pos:line="987" pos:column="42">LANG_INDEX_INSTR2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="988" pos:column="1">#<cpp:directive pos:line="988" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<decl_stmt><decl><type><specifier pos:line="990" pos:column="9">const</specifier> <name pos:line="990" pos:column="15">char</name> <type:modifier pos:line="990" pos:column="20">*</type:modifier></type><name pos:line="990" pos:column="21">objCDirective</name> <init pos:line="990" pos:column="35">= <expr><call><name pos:line="990" pos:column="37">getCompleteKeywordList</name><argument_list pos:line="990" pos:column="59">(<argument><expr><name pos:line="990" pos:column="60">objcInstr2Kwl</name></expr></argument>, <argument><expr><name pos:line="990" pos:column="75">langType</name></expr></argument>, <argument><expr><name pos:line="990" pos:column="85">LANG_INDEX_INSTR2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name pos:line="992" pos:column="9">basic_string</name><argument_list pos:line="992" pos:column="21">&lt;<argument><expr><name pos:line="992" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="992" pos:column="28">objcTypeKwl</name><argument_list pos:line="992" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="992" pos:column="40">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="993" pos:column="9">if <condition pos:line="993" pos:column="12">(<expr><name><name pos:line="993" pos:column="13">pKwArray</name><index pos:line="993" pos:column="21">[<expr><name pos:line="993" pos:column="22">LANG_INDEX_TYPE</name></expr>]</index></name></expr>)</condition><then pos:line="993" pos:column="39">
	<block pos:line="994" pos:column="9">{
<cpp:ifdef pos:line="995" pos:column="1">#<cpp:directive pos:line="995" pos:column="2">ifdef</cpp:directive> <name pos:line="995" pos:column="8">UNICODE</name></cpp:ifdef>
		<expr_stmt><expr><name pos:line="996" pos:column="17">objcTypeKwl</name> <op:operator pos:line="996" pos:column="29">=</op:operator> <call><name pos:line="996" pos:column="31">wstring2string</name><argument_list pos:line="996" pos:column="45">(<argument><expr><name><name pos:line="996" pos:column="46">pKwArray</name><index pos:line="996" pos:column="54">[<expr><name pos:line="996" pos:column="55">LANG_INDEX_TYPE</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="996" pos:column="73">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="997" pos:column="1">#<cpp:directive pos:line="997" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="998" pos:column="17">objcTypeKwl</name> <op:operator pos:line="998" pos:column="29">=</op:operator> <name><name pos:line="998" pos:column="31">pKwArray</name><index pos:line="998" pos:column="39">[<expr><name pos:line="998" pos:column="40">LANG_INDEX_TYPE</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="999" pos:column="1">#<cpp:directive pos:line="999" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<decl_stmt><decl><type><specifier pos:line="1001" pos:column="9">const</specifier> <name pos:line="1001" pos:column="15">char</name> <type:modifier pos:line="1001" pos:column="20">*</type:modifier></type><name pos:line="1001" pos:column="21">objcTypes</name> <init pos:line="1001" pos:column="31">= <expr><call><name pos:line="1001" pos:column="33">getCompleteKeywordList</name><argument_list pos:line="1001" pos:column="55">(<argument><expr><name pos:line="1001" pos:column="56">objcTypeKwl</name></expr></argument>, <argument><expr><name pos:line="1001" pos:column="69">langType</name></expr></argument>, <argument><expr><name pos:line="1001" pos:column="79">LANG_INDEX_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	

	<decl_stmt><decl><type><name><name pos:line="1004" pos:column="9">basic_string</name><argument_list pos:line="1004" pos:column="21">&lt;<argument><expr><name pos:line="1004" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="1004" pos:column="28">objcType2Kwl</name><argument_list pos:line="1004" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="1004" pos:column="41">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if pos:line="1005" pos:column="9">if <condition pos:line="1005" pos:column="12">(<expr><name><name pos:line="1005" pos:column="13">pKwArray</name><index pos:line="1005" pos:column="21">[<expr><name pos:line="1005" pos:column="22">LANG_INDEX_TYPE2</name></expr>]</index></name></expr>)</condition><then pos:line="1005" pos:column="40">
	<block pos:line="1006" pos:column="9">{
<cpp:ifdef pos:line="1007" pos:column="1">#<cpp:directive pos:line="1007" pos:column="2">ifdef</cpp:directive> <name pos:line="1007" pos:column="8">UNICODE</name></cpp:ifdef>
		<expr_stmt><expr><name pos:line="1008" pos:column="17">objcType2Kwl</name> <op:operator pos:line="1008" pos:column="30">=</op:operator> <call><name pos:line="1008" pos:column="32">wstring2string</name><argument_list pos:line="1008" pos:column="46">(<argument><expr><name><name pos:line="1008" pos:column="47">pKwArray</name><index pos:line="1008" pos:column="55">[<expr><name pos:line="1008" pos:column="56">LANG_INDEX_TYPE2</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1008" pos:column="75">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1009" pos:column="1">#<cpp:directive pos:line="1009" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="1010" pos:column="17">objcType2Kwl</name> <op:operator pos:line="1010" pos:column="30">=</op:operator> <name><name pos:line="1010" pos:column="32">pKwArray</name><index pos:line="1010" pos:column="40">[<expr><name pos:line="1010" pos:column="41">LANG_INDEX_TYPE2</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif pos:line="1011" pos:column="1">#<cpp:directive pos:line="1011" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<decl_stmt><decl><type><specifier pos:line="1013" pos:column="9">const</specifier> <name pos:line="1013" pos:column="15">char</name> <type:modifier pos:line="1013" pos:column="20">*</type:modifier></type><name pos:line="1013" pos:column="21">objCQualifier</name> <init pos:line="1013" pos:column="35">= <expr><call><name pos:line="1013" pos:column="37">getCompleteKeywordList</name><argument_list pos:line="1013" pos:column="59">(<argument><expr><name pos:line="1013" pos:column="60">objcType2Kwl</name></expr></argument>, <argument><expr><name pos:line="1013" pos:column="74">langType</name></expr></argument>, <argument><expr><name pos:line="1013" pos:column="84">LANG_INDEX_TYPE2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><specifier pos:line="1015" pos:column="9">const</specifier> <name pos:line="1015" pos:column="15">TCHAR</name> <type:modifier pos:line="1015" pos:column="21">*</type:modifier></type><name pos:line="1015" pos:column="22">doxygenKeyWords_generic</name> <init pos:line="1015" pos:column="46">= <expr><call><name><name pos:line="1015" pos:column="48">_pParameter</name><op:operator pos:line="1015" pos:column="59">-&gt;</op:operator><name pos:line="1015" pos:column="61">getWordList</name></name><argument_list pos:line="1015" pos:column="72">(<argument><expr><name pos:line="1015" pos:column="73">L_CPP</name></expr></argument>, <argument><expr><name pos:line="1015" pos:column="80">LANG_INDEX_TYPE2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="1016" pos:column="9">const</specifier> <name pos:line="1016" pos:column="15">char</name> <type:modifier pos:line="1016" pos:column="20">*</type:modifier></type> <name pos:line="1016" pos:column="22">doxygenKeyWords</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="1017" pos:column="9">basic_string</name><argument_list pos:line="1017" pos:column="21">&lt;<argument><expr><name pos:line="1017" pos:column="22">char</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="1017" pos:column="28">doxygenKeyWordsString</name><argument_list pos:line="1017" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="1017" pos:column="50">""</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<cpp:ifdef pos:line="1018" pos:column="1">#<cpp:directive pos:line="1018" pos:column="2">ifdef</cpp:directive> <name pos:line="1018" pos:column="8">UNICODE</name></cpp:ifdef>
		<expr_stmt><expr><name pos:line="1019" pos:column="17">doxygenKeyWordsString</name> <op:operator pos:line="1019" pos:column="39">=</op:operator> <call><name pos:line="1019" pos:column="41">wstring2string</name><argument_list pos:line="1019" pos:column="55">(<argument><expr><name pos:line="1019" pos:column="56">doxygenKeyWords_generic</name></expr></argument>, <argument><expr><name pos:line="1019" pos:column="81">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1020" pos:column="17">doxygenKeyWords</name> <op:operator pos:line="1020" pos:column="33">=</op:operator> <call><name><name pos:line="1020" pos:column="35">doxygenKeyWordsString</name><op:operator pos:line="1020" pos:column="56">.</op:operator><name pos:line="1020" pos:column="57">c_str</name></name><argument_list pos:line="1020" pos:column="62">()</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1021" pos:column="1">#<cpp:directive pos:line="1021" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="1022" pos:column="17">doxygenKeyWords</name> <op:operator pos:line="1022" pos:column="33">=</op:operator> <name pos:line="1022" pos:column="35">doxygenKeyWords_generic</name></expr>;</expr_stmt>
<cpp:endif pos:line="1023" pos:column="1">#<cpp:directive pos:line="1023" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name pos:line="1024" pos:column="9">execute</name><argument_list pos:line="1024" pos:column="16">(<argument><expr><name pos:line="1024" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1024" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1024" pos:column="37">(</op:operator><name pos:line="1024" pos:column="38">LPARAM</name><op:operator pos:line="1024" pos:column="44">)</op:operator><name pos:line="1024" pos:column="45">objcInstrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1025" pos:column="5">execute</name><argument_list pos:line="1025" pos:column="12">(<argument><expr><name pos:line="1025" pos:column="13">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1025" pos:column="30">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1025" pos:column="33">(</op:operator><name pos:line="1025" pos:column="34">LPARAM</name><op:operator pos:line="1025" pos:column="40">)</op:operator><name pos:line="1025" pos:column="41">objcTypes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1026" pos:column="9">execute</name><argument_list pos:line="1026" pos:column="16">(<argument><expr><name pos:line="1026" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1026" pos:column="34">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1026" pos:column="37">(</op:operator><name pos:line="1026" pos:column="38">LPARAM</name><op:operator pos:line="1026" pos:column="44">)</op:operator><name pos:line="1026" pos:column="45">doxygenKeyWords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1027" pos:column="9">execute</name><argument_list pos:line="1027" pos:column="16">(<argument><expr><name pos:line="1027" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1027" pos:column="34">3</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1027" pos:column="37">(</op:operator><name pos:line="1027" pos:column="38">LPARAM</name><op:operator pos:line="1027" pos:column="44">)</op:operator><name pos:line="1027" pos:column="45">objCDirective</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1028" pos:column="9">execute</name><argument_list pos:line="1028" pos:column="16">(<argument><expr><name pos:line="1028" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1028" pos:column="34">4</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1028" pos:column="37">(</op:operator><name pos:line="1028" pos:column="38">LPARAM</name><op:operator pos:line="1028" pos:column="44">)</op:operator><name pos:line="1028" pos:column="45">objCQualifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="1030" pos:column="9">execute</name><argument_list pos:line="1030" pos:column="16">(<argument><expr><name pos:line="1030" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="1030" pos:column="34">reinterpret_cast</name><argument_list pos:line="1030" pos:column="50">&lt;<argument><expr><name pos:line="1030" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1030" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1030" pos:column="59">"fold"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1030" pos:column="68">reinterpret_cast</name><argument_list pos:line="1030" pos:column="84">&lt;<argument><expr><name pos:line="1030" pos:column="85">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1030" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="1030" pos:column="93">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1031" pos:column="9">execute</name><argument_list pos:line="1031" pos:column="16">(<argument><expr><name pos:line="1031" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="1031" pos:column="34">reinterpret_cast</name><argument_list pos:line="1031" pos:column="50">&lt;<argument><expr><name pos:line="1031" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1031" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1031" pos:column="59">"fold.compact"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1031" pos:column="76">reinterpret_cast</name><argument_list pos:line="1031" pos:column="92">&lt;<argument><expr><name pos:line="1031" pos:column="93">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1031" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="1031" pos:column="101">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="1033" pos:column="9">execute</name><argument_list pos:line="1033" pos:column="16">(<argument><expr><name pos:line="1033" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="1033" pos:column="34">reinterpret_cast</name><argument_list pos:line="1033" pos:column="50">&lt;<argument><expr><name pos:line="1033" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1033" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1033" pos:column="59">"fold.comment"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1033" pos:column="76">reinterpret_cast</name><argument_list pos:line="1033" pos:column="92">&lt;<argument><expr><name pos:line="1033" pos:column="93">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1033" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="1033" pos:column="101">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1034" pos:column="9">execute</name><argument_list pos:line="1034" pos:column="16">(<argument><expr><name pos:line="1034" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="1034" pos:column="34">reinterpret_cast</name><argument_list pos:line="1034" pos:column="50">&lt;<argument><expr><name pos:line="1034" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1034" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1034" pos:column="59">"fold.preprocessor"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1034" pos:column="81">reinterpret_cast</name><argument_list pos:line="1034" pos:column="97">&lt;<argument><expr><name pos:line="1034" pos:column="98">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1034" pos:column="105">(<argument><expr><lit:literal type="string" pos:line="1034" pos:column="106">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1037" pos:column="1">void</name></type> <name><name pos:line="1037" pos:column="6">ScintillaEditView</name><op:operator pos:line="1037" pos:column="23">::</op:operator><name pos:line="1037" pos:column="25">setKeywords</name></name><parameter_list pos:line="1037" pos:column="36">(<param><decl><type><name pos:line="1037" pos:column="37">LangType</name></type> <name pos:line="1037" pos:column="46">langType</name></decl></param>, <param><decl><type><specifier pos:line="1037" pos:column="56">const</specifier> <name pos:line="1037" pos:column="62">char</name> <type:modifier pos:line="1037" pos:column="67">*</type:modifier></type><name pos:line="1037" pos:column="68">keywords</name></decl></param>, <param><decl><type><name pos:line="1037" pos:column="78">int</name></type> <name pos:line="1037" pos:column="82">index</name></decl></param>)</parameter_list>
<block pos:line="1038" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="1039" pos:column="9">std</name><op:operator pos:line="1039" pos:column="12">::</op:operator><name><name pos:line="1039" pos:column="14">basic_string</name><argument_list pos:line="1039" pos:column="26">&lt;<argument><expr><name pos:line="1039" pos:column="27">char</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1039" pos:column="33">wordList</name></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="1040" pos:column="9">wordList</name> <op:operator pos:line="1040" pos:column="18">=</op:operator> <op:operator pos:line="1040" pos:column="20">(</op:operator><name pos:line="1040" pos:column="21">keywords</name><op:operator pos:line="1040" pos:column="29">)</op:operator><op:operator pos:line="1040" pos:column="30">?</op:operator><name pos:line="1040" pos:column="31">keywords</name><op:operator pos:line="1040" pos:column="39">:</op:operator><lit:literal type="string" pos:line="1040" pos:column="40">""</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1041" pos:column="9">execute</name><argument_list pos:line="1041" pos:column="16">(<argument><expr><name pos:line="1041" pos:column="17">SCI_SETKEYWORDS</name></expr></argument>, <argument><expr><name pos:line="1041" pos:column="34">index</name></expr></argument>, <argument><expr><op:operator pos:line="1041" pos:column="41">(</op:operator><name pos:line="1041" pos:column="42">LPARAM</name><op:operator pos:line="1041" pos:column="48">)</op:operator><call><name pos:line="1041" pos:column="49">getCompleteKeywordList</name><argument_list pos:line="1041" pos:column="71">(<argument><expr><name pos:line="1041" pos:column="72">wordList</name></expr></argument>, <argument><expr><name pos:line="1041" pos:column="82">langType</name></expr></argument>, <argument><expr><name pos:line="1041" pos:column="92">index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1044" pos:column="1">void</name></type> <name><name pos:line="1044" pos:column="6">ScintillaEditView</name><op:operator pos:line="1044" pos:column="23">::</op:operator><name pos:line="1044" pos:column="25">setLexer</name></name><parameter_list pos:line="1044" pos:column="33">(<param><decl><type><name pos:line="1044" pos:column="34">int</name></type> <name pos:line="1044" pos:column="38">lexerID</name></decl></param>, <param><decl><type><name pos:line="1044" pos:column="47">LangType</name></type> <name pos:line="1044" pos:column="56">langType</name></decl></param>, <param><decl><type><name pos:line="1044" pos:column="66">int</name></type> <name pos:line="1044" pos:column="70">whichList</name></decl></param>)</parameter_list>
<block pos:line="1045" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1046" pos:column="9">execute</name><argument_list pos:line="1046" pos:column="16">(<argument><expr><name pos:line="1046" pos:column="17">SCI_SETLEXER</name></expr></argument>, <argument><expr><name pos:line="1046" pos:column="31">lexerID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier pos:line="1048" pos:column="9">const</specifier> <name pos:line="1048" pos:column="15">TCHAR</name> <type:modifier pos:line="1048" pos:column="21">*</type:modifier></type><name><name pos:line="1048" pos:column="22">pKwArray</name><index pos:line="1048" pos:column="30">[<expr><lit:literal type="number" pos:line="1048" pos:column="31">10</lit:literal></expr>]</index></name> <init pos:line="1048" pos:column="35">= <expr><block pos:line="1048" pos:column="37">{<expr><name pos:line="1048" pos:column="38">NULL</name></expr>, <expr><name pos:line="1048" pos:column="44">NULL</name></expr>, <expr><name pos:line="1048" pos:column="50">NULL</name></expr>, <expr><name pos:line="1048" pos:column="56">NULL</name></expr>, <expr><name pos:line="1048" pos:column="62">NULL</name></expr>, <expr><name pos:line="1048" pos:column="68">NULL</name></expr>, <expr><name pos:line="1048" pos:column="74">NULL</name></expr>, <expr><name pos:line="1048" pos:column="80">NULL</name></expr>, <expr><name pos:line="1048" pos:column="86">NULL</name></expr>, <expr><name pos:line="1048" pos:column="92">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name pos:line="1050" pos:column="9">makeStyle</name><argument_list pos:line="1050" pos:column="18">(<argument><expr><name pos:line="1050" pos:column="19">langType</name></expr></argument>, <argument><expr><name pos:line="1050" pos:column="29">pKwArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:line="1052" pos:column="1">#<cpp:directive pos:line="1052" pos:column="2">ifdef</cpp:directive> <name pos:line="1052" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1053" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1053" pos:column="28">*</type:modifier></type><name pos:line="1053" pos:column="29">wmc</name> <init pos:line="1053" pos:column="33">= <expr><call><name><name pos:line="1053" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1053" pos:column="53">::</op:operator><name pos:line="1053" pos:column="55">getInstance</name></name><argument_list pos:line="1053" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="1054" pos:column="1">#<cpp:directive pos:line="1054" pos:column="2">endif</cpp:directive></cpp:endif>

	<if pos:line="1056" pos:column="9">if <condition pos:line="1056" pos:column="12">(<expr><name pos:line="1056" pos:column="13">whichList</name> <op:operator pos:line="1056" pos:column="23">&amp;</op:operator> <name pos:line="1056" pos:column="25">LIST_0</name></expr>)</condition><then pos:line="1056" pos:column="32">
	<block pos:line="1057" pos:column="9">{
<cpp:ifdef pos:line="1058" pos:column="1">#<cpp:directive pos:line="1058" pos:column="2">ifdef</cpp:directive> <name pos:line="1058" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="1059" pos:column="17">const</specifier> <name pos:line="1059" pos:column="23">char</name> <type:modifier pos:line="1059" pos:column="28">*</type:modifier></type> <name pos:line="1059" pos:column="30">keyWords_char</name> <init pos:line="1059" pos:column="44">= <expr><call><name><name pos:line="1059" pos:column="46">wmc</name><op:operator pos:line="1059" pos:column="49">-&gt;</op:operator><name pos:line="1059" pos:column="51">wchar2char</name></name><argument_list pos:line="1059" pos:column="61">(<argument><expr><name><name pos:line="1059" pos:column="62">pKwArray</name><index pos:line="1059" pos:column="70">[<expr><name pos:line="1059" pos:column="71">LANG_INDEX_INSTR</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1059" pos:column="90">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1060" pos:column="17">setKeywords</name><argument_list pos:line="1060" pos:column="28">(<argument><expr><name pos:line="1060" pos:column="29">langType</name></expr></argument>, <argument><expr><name pos:line="1060" pos:column="39">keyWords_char</name></expr></argument>, <argument><expr><name pos:line="1060" pos:column="54">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1061" pos:column="1">#<cpp:directive pos:line="1061" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1062" pos:column="17">setKeywords</name><argument_list pos:line="1062" pos:column="28">(<argument><expr><name pos:line="1062" pos:column="29">langType</name></expr></argument>, <argument><expr><name><name pos:line="1062" pos:column="39">pKwArray</name><index pos:line="1062" pos:column="47">[<expr><name pos:line="1062" pos:column="48">LANG_INDEX_INSTR</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1062" pos:column="67">LANG_INDEX_INSTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1063" pos:column="1">#<cpp:directive pos:line="1063" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>	

	<if pos:line="1066" pos:column="9">if <condition pos:line="1066" pos:column="12">(<expr><name pos:line="1066" pos:column="13">whichList</name> <op:operator pos:line="1066" pos:column="23">&amp;</op:operator> <name pos:line="1066" pos:column="25">LIST_1</name></expr>)</condition><then pos:line="1066" pos:column="32">
	<block pos:line="1067" pos:column="9">{
<cpp:ifdef pos:line="1068" pos:column="1">#<cpp:directive pos:line="1068" pos:column="2">ifdef</cpp:directive> <name pos:line="1068" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="1069" pos:column="17">const</specifier> <name pos:line="1069" pos:column="23">char</name> <type:modifier pos:line="1069" pos:column="28">*</type:modifier></type> <name pos:line="1069" pos:column="30">keyWords_char</name> <init pos:line="1069" pos:column="44">= <expr><call><name><name pos:line="1069" pos:column="46">wmc</name><op:operator pos:line="1069" pos:column="49">-&gt;</op:operator><name pos:line="1069" pos:column="51">wchar2char</name></name><argument_list pos:line="1069" pos:column="61">(<argument><expr><name><name pos:line="1069" pos:column="62">pKwArray</name><index pos:line="1069" pos:column="70">[<expr><name pos:line="1069" pos:column="71">LANG_INDEX_INSTR2</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1069" pos:column="91">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1070" pos:column="17">setKeywords</name><argument_list pos:line="1070" pos:column="28">(<argument><expr><name pos:line="1070" pos:column="29">langType</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="39">keyWords_char</name></expr></argument>, <argument><expr><name pos:line="1070" pos:column="54">LANG_INDEX_INSTR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1071" pos:column="1">#<cpp:directive pos:line="1071" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1072" pos:column="17">setKeywords</name><argument_list pos:line="1072" pos:column="28">(<argument><expr><name pos:line="1072" pos:column="29">langType</name></expr></argument>, <argument><expr><name><name pos:line="1072" pos:column="39">pKwArray</name><index pos:line="1072" pos:column="47">[<expr><name pos:line="1072" pos:column="48">LANG_INDEX_INSTR2</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1072" pos:column="68">LANG_INDEX_INSTR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1073" pos:column="1">#<cpp:directive pos:line="1073" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<if pos:line="1076" pos:column="9">if <condition pos:line="1076" pos:column="12">(<expr><name pos:line="1076" pos:column="13">whichList</name> <op:operator pos:line="1076" pos:column="23">&amp;</op:operator> <name pos:line="1076" pos:column="25">LIST_2</name></expr>)</condition><then pos:line="1076" pos:column="32">
	<block pos:line="1077" pos:column="9">{
<cpp:ifdef pos:line="1078" pos:column="1">#<cpp:directive pos:line="1078" pos:column="2">ifdef</cpp:directive> <name pos:line="1078" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="1079" pos:column="17">const</specifier> <name pos:line="1079" pos:column="23">char</name> <type:modifier pos:line="1079" pos:column="28">*</type:modifier></type> <name pos:line="1079" pos:column="30">keyWords_char</name> <init pos:line="1079" pos:column="44">= <expr><call><name><name pos:line="1079" pos:column="46">wmc</name><op:operator pos:line="1079" pos:column="49">-&gt;</op:operator><name pos:line="1079" pos:column="51">wchar2char</name></name><argument_list pos:line="1079" pos:column="61">(<argument><expr><name><name pos:line="1079" pos:column="62">pKwArray</name><index pos:line="1079" pos:column="70">[<expr><name pos:line="1079" pos:column="71">LANG_INDEX_TYPE</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1079" pos:column="89">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1080" pos:column="17">setKeywords</name><argument_list pos:line="1080" pos:column="28">(<argument><expr><name pos:line="1080" pos:column="29">langType</name></expr></argument>, <argument><expr><name pos:line="1080" pos:column="39">keyWords_char</name></expr></argument>, <argument><expr><name pos:line="1080" pos:column="54">LANG_INDEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1081" pos:column="1">#<cpp:directive pos:line="1081" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1082" pos:column="17">setKeywords</name><argument_list pos:line="1082" pos:column="28">(<argument><expr><name pos:line="1082" pos:column="29">langType</name></expr></argument>, <argument><expr><name><name pos:line="1082" pos:column="39">pKwArray</name><index pos:line="1082" pos:column="47">[<expr><name pos:line="1082" pos:column="48">LANG_INDEX_TYPE</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1082" pos:column="66">LANG_INDEX_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1083" pos:column="1">#<cpp:directive pos:line="1083" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<if pos:line="1086" pos:column="9">if <condition pos:line="1086" pos:column="12">(<expr><name pos:line="1086" pos:column="13">whichList</name> <op:operator pos:line="1086" pos:column="23">&amp;</op:operator> <name pos:line="1086" pos:column="25">LIST_3</name></expr>)</condition><then pos:line="1086" pos:column="32">
	<block pos:line="1087" pos:column="9">{
<cpp:ifdef pos:line="1088" pos:column="1">#<cpp:directive pos:line="1088" pos:column="2">ifdef</cpp:directive> <name pos:line="1088" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="1089" pos:column="17">const</specifier> <name pos:line="1089" pos:column="23">char</name> <type:modifier pos:line="1089" pos:column="28">*</type:modifier></type> <name pos:line="1089" pos:column="30">keyWords_char</name> <init pos:line="1089" pos:column="44">= <expr><call><name><name pos:line="1089" pos:column="46">wmc</name><op:operator pos:line="1089" pos:column="49">-&gt;</op:operator><name pos:line="1089" pos:column="51">wchar2char</name></name><argument_list pos:line="1089" pos:column="61">(<argument><expr><name><name pos:line="1089" pos:column="62">pKwArray</name><index pos:line="1089" pos:column="70">[<expr><name pos:line="1089" pos:column="71">LANG_INDEX_TYPE2</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1089" pos:column="90">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1090" pos:column="17">setKeywords</name><argument_list pos:line="1090" pos:column="28">(<argument><expr><name pos:line="1090" pos:column="29">langType</name></expr></argument>, <argument><expr><name pos:line="1090" pos:column="39">keyWords_char</name></expr></argument>, <argument><expr><name pos:line="1090" pos:column="54">LANG_INDEX_TYPE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1091" pos:column="1">#<cpp:directive pos:line="1091" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1092" pos:column="17">setKeywords</name><argument_list pos:line="1092" pos:column="28">(<argument><expr><name pos:line="1092" pos:column="29">langType</name></expr></argument>, <argument><expr><name><name pos:line="1092" pos:column="39">pKwArray</name><index pos:line="1092" pos:column="47">[<expr><name pos:line="1092" pos:column="48">LANG_INDEX_TYPE2</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1092" pos:column="67">LANG_INDEX_TYPE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1093" pos:column="1">#<cpp:directive pos:line="1093" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<if pos:line="1096" pos:column="9">if <condition pos:line="1096" pos:column="12">(<expr><name pos:line="1096" pos:column="13">whichList</name> <op:operator pos:line="1096" pos:column="23">&amp;</op:operator> <name pos:line="1096" pos:column="25">LIST_4</name></expr>)</condition><then pos:line="1096" pos:column="32">
	<block pos:line="1097" pos:column="9">{
<cpp:ifdef pos:line="1098" pos:column="1">#<cpp:directive pos:line="1098" pos:column="2">ifdef</cpp:directive> <name pos:line="1098" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="1099" pos:column="17">const</specifier> <name pos:line="1099" pos:column="23">char</name> <type:modifier pos:line="1099" pos:column="28">*</type:modifier></type> <name pos:line="1099" pos:column="30">keyWords_char</name> <init pos:line="1099" pos:column="44">= <expr><call><name><name pos:line="1099" pos:column="46">wmc</name><op:operator pos:line="1099" pos:column="49">-&gt;</op:operator><name pos:line="1099" pos:column="51">wchar2char</name></name><argument_list pos:line="1099" pos:column="61">(<argument><expr><name><name pos:line="1099" pos:column="62">pKwArray</name><index pos:line="1099" pos:column="70">[<expr><name pos:line="1099" pos:column="71">LANG_INDEX_TYPE3</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1099" pos:column="90">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1100" pos:column="17">setKeywords</name><argument_list pos:line="1100" pos:column="28">(<argument><expr><name pos:line="1100" pos:column="29">langType</name></expr></argument>, <argument><expr><name pos:line="1100" pos:column="39">keyWords_char</name></expr></argument>, <argument><expr><name pos:line="1100" pos:column="54">LANG_INDEX_TYPE3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1101" pos:column="1">#<cpp:directive pos:line="1101" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1102" pos:column="17">setKeywords</name><argument_list pos:line="1102" pos:column="28">(<argument><expr><name pos:line="1102" pos:column="29">langType</name></expr></argument>, <argument><expr><name><name pos:line="1102" pos:column="39">pKwArray</name><index pos:line="1102" pos:column="47">[<expr><name pos:line="1102" pos:column="48">LANG_INDEX_TYPE3</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1102" pos:column="67">LANG_INDEX_TYPE3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1103" pos:column="1">#<cpp:directive pos:line="1103" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<if pos:line="1106" pos:column="9">if <condition pos:line="1106" pos:column="12">(<expr><name pos:line="1106" pos:column="13">whichList</name> <op:operator pos:line="1106" pos:column="23">&amp;</op:operator> <name pos:line="1106" pos:column="25">LIST_5</name></expr>)</condition><then pos:line="1106" pos:column="32">
	<block pos:line="1107" pos:column="9">{
<cpp:ifdef pos:line="1108" pos:column="1">#<cpp:directive pos:line="1108" pos:column="2">ifdef</cpp:directive> <name pos:line="1108" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="1109" pos:column="17">const</specifier> <name pos:line="1109" pos:column="23">char</name> <type:modifier pos:line="1109" pos:column="28">*</type:modifier></type> <name pos:line="1109" pos:column="30">keyWords_char</name> <init pos:line="1109" pos:column="44">= <expr><call><name><name pos:line="1109" pos:column="46">wmc</name><op:operator pos:line="1109" pos:column="49">-&gt;</op:operator><name pos:line="1109" pos:column="51">wchar2char</name></name><argument_list pos:line="1109" pos:column="61">(<argument><expr><name><name pos:line="1109" pos:column="62">pKwArray</name><index pos:line="1109" pos:column="70">[<expr><name pos:line="1109" pos:column="71">LANG_INDEX_TYPE4</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1109" pos:column="90">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1110" pos:column="17">setKeywords</name><argument_list pos:line="1110" pos:column="28">(<argument><expr><name pos:line="1110" pos:column="29">langType</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="39">keyWords_char</name></expr></argument>, <argument><expr><name pos:line="1110" pos:column="54">LANG_INDEX_TYPE4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1111" pos:column="1">#<cpp:directive pos:line="1111" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1112" pos:column="17">setKeywords</name><argument_list pos:line="1112" pos:column="28">(<argument><expr><name pos:line="1112" pos:column="29">langType</name></expr></argument>, <argument><expr><name><name pos:line="1112" pos:column="39">pKwArray</name><index pos:line="1112" pos:column="47">[<expr><name pos:line="1112" pos:column="48">LANG_INDEX_TYPE4</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1112" pos:column="67">LANG_INDEX_TYPE4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1113" pos:column="1">#<cpp:directive pos:line="1113" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>

	<if pos:line="1116" pos:column="9">if <condition pos:line="1116" pos:column="12">(<expr><name pos:line="1116" pos:column="13">whichList</name> <op:operator pos:line="1116" pos:column="23">&amp;</op:operator> <name pos:line="1116" pos:column="25">LIST_6</name></expr>)</condition><then pos:line="1116" pos:column="32">
	<block pos:line="1117" pos:column="9">{
<cpp:ifdef pos:line="1118" pos:column="1">#<cpp:directive pos:line="1118" pos:column="2">ifdef</cpp:directive> <name pos:line="1118" pos:column="8">UNICODE</name></cpp:ifdef>
		<decl_stmt><decl><type><specifier pos:line="1119" pos:column="17">const</specifier> <name pos:line="1119" pos:column="23">char</name> <type:modifier pos:line="1119" pos:column="28">*</type:modifier></type> <name pos:line="1119" pos:column="30">keyWords_char</name> <init pos:line="1119" pos:column="44">= <expr><call><name><name pos:line="1119" pos:column="46">wmc</name><op:operator pos:line="1119" pos:column="49">-&gt;</op:operator><name pos:line="1119" pos:column="51">wchar2char</name></name><argument_list pos:line="1119" pos:column="61">(<argument><expr><name><name pos:line="1119" pos:column="62">pKwArray</name><index pos:line="1119" pos:column="70">[<expr><name pos:line="1119" pos:column="71">LANG_INDEX_TYPE5</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1119" pos:column="90">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="1120" pos:column="17">setKeywords</name><argument_list pos:line="1120" pos:column="28">(<argument><expr><name pos:line="1120" pos:column="29">langType</name></expr></argument>, <argument><expr><name pos:line="1120" pos:column="39">keyWords_char</name></expr></argument>, <argument><expr><name pos:line="1120" pos:column="54">LANG_INDEX_TYPE5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1121" pos:column="1">#<cpp:directive pos:line="1121" pos:column="2">else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name pos:line="1122" pos:column="17">setKeywords</name><argument_list pos:line="1122" pos:column="28">(<argument><expr><name pos:line="1122" pos:column="29">langType</name></expr></argument>, <argument><expr><name><name pos:line="1122" pos:column="39">pKwArray</name><index pos:line="1122" pos:column="47">[<expr><name pos:line="1122" pos:column="48">LANG_INDEX_TYPE5</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="1122" pos:column="67">LANG_INDEX_TYPE5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1123" pos:column="1">#<cpp:directive pos:line="1123" pos:column="2">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="1125" pos:column="9">execute</name><argument_list pos:line="1125" pos:column="16">(<argument><expr><name pos:line="1125" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="1125" pos:column="34">reinterpret_cast</name><argument_list pos:line="1125" pos:column="50">&lt;<argument><expr><name pos:line="1125" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1125" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1125" pos:column="59">"fold"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1125" pos:column="68">reinterpret_cast</name><argument_list pos:line="1125" pos:column="84">&lt;<argument><expr><name pos:line="1125" pos:column="85">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1125" pos:column="92">(<argument><expr><lit:literal type="string" pos:line="1125" pos:column="93">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1126" pos:column="9">execute</name><argument_list pos:line="1126" pos:column="16">(<argument><expr><name pos:line="1126" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="1126" pos:column="34">reinterpret_cast</name><argument_list pos:line="1126" pos:column="50">&lt;<argument><expr><name pos:line="1126" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1126" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1126" pos:column="59">"fold.compact"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1126" pos:column="76">reinterpret_cast</name><argument_list pos:line="1126" pos:column="92">&lt;<argument><expr><name pos:line="1126" pos:column="93">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1126" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="1126" pos:column="101">"0"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="1128" pos:column="9">execute</name><argument_list pos:line="1128" pos:column="16">(<argument><expr><name pos:line="1128" pos:column="17">SCI_SETPROPERTY</name></expr></argument>, <argument><expr><call><name><name pos:line="1128" pos:column="34">reinterpret_cast</name><argument_list pos:line="1128" pos:column="50">&lt;<argument><expr><name pos:line="1128" pos:column="51">WPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1128" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="1128" pos:column="59">"fold.comment"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name pos:line="1128" pos:column="76">reinterpret_cast</name><argument_list pos:line="1128" pos:column="92">&lt;<argument><expr><name pos:line="1128" pos:column="93">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1128" pos:column="100">(<argument><expr><lit:literal type="string" pos:line="1128" pos:column="101">"1"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1131" pos:column="1">void</name></type> <name><name pos:line="1131" pos:column="6">ScintillaEditView</name><op:operator pos:line="1131" pos:column="23">::</op:operator><name pos:line="1131" pos:column="25">makeStyle</name></name><parameter_list pos:line="1131" pos:column="34">(<param><decl><type><name pos:line="1131" pos:column="35">LangType</name></type> <name pos:line="1131" pos:column="44">language</name></decl></param>, <param><decl><type><specifier pos:line="1131" pos:column="54">const</specifier> <name pos:line="1131" pos:column="60">TCHAR</name> <type:modifier pos:line="1131" pos:column="66">*</type:modifier><type:modifier pos:line="1131" pos:column="67">*</type:modifier></type><name pos:line="1131" pos:column="68">keywordArray</name></decl></param>)</parameter_list>
<block pos:line="1132" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="1133" pos:column="9">const</specifier> <name pos:line="1133" pos:column="15">TCHAR</name> <type:modifier pos:line="1133" pos:column="21">*</type:modifier></type> <name pos:line="1133" pos:column="23">lexerName</name> <init pos:line="1133" pos:column="33">= <expr><name><name pos:line="1133" pos:column="35">ScintillaEditView</name><op:operator pos:line="1133" pos:column="52">::</op:operator><name pos:line="1133" pos:column="54">langNames</name><index pos:line="1133" pos:column="63">[<expr><name pos:line="1133" pos:column="64">language</name></expr>]</index></name><op:operator pos:line="1133" pos:column="73">.</op:operator><name pos:line="1133" pos:column="74">lexerName</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1134" pos:column="9">LexerStyler</name> <type:modifier pos:line="1134" pos:column="21">*</type:modifier></type><name pos:line="1134" pos:column="22">pStyler</name> <init pos:line="1134" pos:column="30">= <expr><op:operator pos:line="1134" pos:column="32">(</op:operator><call><name><name pos:line="1134" pos:column="33">_pParameter</name><op:operator pos:line="1134" pos:column="44">-&gt;</op:operator><name pos:line="1134" pos:column="46">getLStylerArray</name></name><argument_list pos:line="1134" pos:column="61">()</argument_list></call><op:operator pos:line="1134" pos:column="63">)</op:operator><op:operator pos:line="1134" pos:column="64">.</op:operator><call><name pos:line="1134" pos:column="65">getLexerStylerByName</name><argument_list pos:line="1134" pos:column="85">(<argument><expr><name pos:line="1134" pos:column="86">lexerName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1135" pos:column="9">if <condition pos:line="1135" pos:column="12">(<expr><name pos:line="1135" pos:column="13">pStyler</name></expr>)</condition><then pos:line="1135" pos:column="21">
	<block pos:line="1136" pos:column="9">{
		<for pos:line="1137" pos:column="17">for (<init><decl><type><name pos:line="1137" pos:column="22">int</name></type> <name pos:line="1137" pos:column="26">i</name> <init pos:line="1137" pos:column="28">= <expr><lit:literal type="number" pos:line="1137" pos:column="30">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="1137" pos:column="34">i</name> <op:operator pos:line="1137" pos:column="36">&lt;</op:operator> <call><name><name pos:line="1137" pos:column="38">pStyler</name><op:operator pos:line="1137" pos:column="45">-&gt;</op:operator><name pos:line="1137" pos:column="47">getNbStyler</name></name><argument_list pos:line="1137" pos:column="58">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="1137" pos:column="63">i</name><op:operator pos:line="1137" pos:column="64">++</op:operator></expr></incr>)
		<block pos:line="1138" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="1139" pos:column="25">Style</name> <type:modifier pos:line="1139" pos:column="31">&amp;</type:modifier></type> <name pos:line="1139" pos:column="33">style</name> <init pos:line="1139" pos:column="39">= <expr><call><name><name pos:line="1139" pos:column="41">pStyler</name><op:operator pos:line="1139" pos:column="48">-&gt;</op:operator><name pos:line="1139" pos:column="50">getStyler</name></name><argument_list pos:line="1139" pos:column="59">(<argument><expr><name pos:line="1139" pos:column="60">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="1140" pos:column="25">setStyle</name><argument_list pos:line="1140" pos:column="33">(<argument><expr><name pos:line="1140" pos:column="34">style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1141" pos:column="25">if <condition pos:line="1141" pos:column="28">(<expr><name pos:line="1141" pos:column="29">keywordArray</name></expr>)</condition><then pos:line="1141" pos:column="42">
			<block pos:line="1142" pos:column="25">{
				<if pos:line="1143" pos:column="33">if <condition pos:line="1143" pos:column="36">(<expr><op:operator pos:line="1143" pos:column="37">(</op:operator><name><name pos:line="1143" pos:column="38">style</name><op:operator pos:line="1143" pos:column="43">.</op:operator><name pos:line="1143" pos:column="44">_keywordClass</name></name> <op:operator pos:line="1143" pos:column="58">!=</op:operator> <name pos:line="1143" pos:column="61">STYLE_NOT_USED</name><op:operator pos:line="1143" pos:column="75">)</op:operator> <op:operator pos:line="1143" pos:column="77">&amp;&amp;</op:operator> <op:operator pos:line="1143" pos:column="80">(</op:operator><name><name pos:line="1143" pos:column="81">style</name><op:operator pos:line="1143" pos:column="86">.</op:operator><name pos:line="1143" pos:column="87">_keywords</name></name><op:operator pos:line="1143" pos:column="96">)</op:operator></expr>)</condition><then pos:line="1143" pos:column="98">
					<expr_stmt><expr><name><name pos:line="1144" pos:column="41">keywordArray</name><index pos:line="1144" pos:column="53">[<expr><name><name pos:line="1144" pos:column="54">style</name><op:operator pos:line="1144" pos:column="59">.</op:operator><name pos:line="1144" pos:column="60">_keywordClass</name></name></expr>]</index></name> <op:operator pos:line="1144" pos:column="75">=</op:operator> <call><name><name pos:line="1144" pos:column="77">style</name><op:operator pos:line="1144" pos:column="82">.</op:operator><name pos:line="1144" pos:column="83">_keywords</name><op:operator pos:line="1144" pos:column="92">-&gt;</op:operator><name pos:line="1144" pos:column="94">c_str</name></name><argument_list pos:line="1144" pos:column="99">()</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1150" pos:column="1">void</name></type> <name><name pos:line="1150" pos:column="6">ScintillaEditView</name><op:operator pos:line="1150" pos:column="23">::</op:operator><name pos:line="1150" pos:column="25">defineDocType</name></name><parameter_list pos:line="1150" pos:column="38">(<param><decl><type><name pos:line="1150" pos:column="39">LangType</name></type> <name pos:line="1150" pos:column="48">typeDoc</name></decl></param>)</parameter_list>
<block pos:line="1151" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="1152" pos:column="5">StyleArray</name> <type:modifier pos:line="1152" pos:column="16">&amp;</type:modifier></type> <name pos:line="1152" pos:column="18">stylers</name> <init pos:line="1152" pos:column="26">= <expr><call><name><name pos:line="1152" pos:column="28">_pParameter</name><op:operator pos:line="1152" pos:column="39">-&gt;</op:operator><name pos:line="1152" pos:column="41">getMiscStylerArray</name></name><argument_list pos:line="1152" pos:column="59">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="1153" pos:column="5">int</name></type> <name pos:line="1153" pos:column="9">iStyleDefault</name> <init pos:line="1153" pos:column="23">= <expr><call><name><name pos:line="1153" pos:column="25">stylers</name><op:operator pos:line="1153" pos:column="32">.</op:operator><name pos:line="1153" pos:column="33">getStylerIndexByID</name></name><argument_list pos:line="1153" pos:column="51">(<argument><expr><name pos:line="1153" pos:column="52">STYLE_DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1154" pos:column="5">if <condition pos:line="1154" pos:column="8">(<expr><name pos:line="1154" pos:column="9">iStyleDefault</name> <op:operator pos:line="1154" pos:column="23">!=</op:operator> <op:operator pos:line="1154" pos:column="26">-</op:operator><lit:literal type="number" pos:line="1154" pos:column="27">1</lit:literal></expr>)</condition><then pos:line="1154" pos:column="29">
    <block pos:line="1155" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="1156" pos:column="9">Style</name> <type:modifier pos:line="1156" pos:column="15">&amp;</type:modifier></type> <name pos:line="1156" pos:column="17">styleDefault</name> <init pos:line="1156" pos:column="30">= <expr><call><name><name pos:line="1156" pos:column="32">stylers</name><op:operator pos:line="1156" pos:column="39">.</op:operator><name pos:line="1156" pos:column="40">getStyler</name></name><argument_list pos:line="1156" pos:column="49">(<argument><expr><name pos:line="1156" pos:column="50">iStyleDefault</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="1157" pos:column="17">styleDefault</name><op:operator pos:line="1157" pos:column="29">.</op:operator><name pos:line="1157" pos:column="30">_colorStyle</name></name> <op:operator pos:line="1157" pos:column="42">=</op:operator> <name pos:line="1157" pos:column="44">COLORSTYLE_ALL</name></expr>;</expr_stmt>	<comment type="line" pos:line="1157" pos:column="65">//override transparency</comment>
	    <expr_stmt><expr><call><name pos:line="1158" pos:column="13">setStyle</name><argument_list pos:line="1158" pos:column="21">(<argument><expr><name pos:line="1158" pos:column="22">styleDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name pos:line="1161" pos:column="5">execute</name><argument_list pos:line="1161" pos:column="12">(<argument><expr><name pos:line="1161" pos:column="13">SCI_STYLECLEARALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="1163" pos:column="9">Style</name> <type:modifier pos:line="1163" pos:column="15">*</type:modifier></type><name pos:line="1163" pos:column="16">pStyle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1164" pos:column="9">Style</name></type> <name pos:line="1164" pos:column="15">defaultIndicatorStyle</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name pos:line="1166" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1166" pos:column="30">.</op:operator><name pos:line="1166" pos:column="31">_styleID</name></name> <op:operator pos:line="1166" pos:column="40">=</op:operator> <name pos:line="1166" pos:column="42">SCE_UNIVERSAL_FOUND_STYLE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1167" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1167" pos:column="30">.</op:operator><name pos:line="1167" pos:column="31">_bgColor</name></name> <op:operator pos:line="1167" pos:column="40">=</op:operator> <name pos:line="1167" pos:column="42">red</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1168" pos:column="9">pStyle</name> <op:operator pos:line="1168" pos:column="16">=</op:operator> <op:operator pos:line="1168" pos:column="18">&amp;</op:operator><name pos:line="1168" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name pos:line="1169" pos:column="5">int</name></type> <name pos:line="1169" pos:column="9">iFind</name> <init pos:line="1169" pos:column="15">= <expr><call><name><name pos:line="1169" pos:column="17">stylers</name><op:operator pos:line="1169" pos:column="24">.</op:operator><name pos:line="1169" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1169" pos:column="43">(<argument><expr><name pos:line="1169" pos:column="44">SCE_UNIVERSAL_FOUND_STYLE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="1170" pos:column="5">if <condition pos:line="1170" pos:column="8">(<expr><name pos:line="1170" pos:column="9">iFind</name> <op:operator pos:line="1170" pos:column="15">!=</op:operator> <op:operator pos:line="1170" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1170" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1170" pos:column="21">
    <block pos:line="1171" pos:column="5">{
        <expr_stmt><expr><name pos:line="1172" pos:column="9">pStyle</name> <op:operator pos:line="1172" pos:column="16">=</op:operator> <op:operator pos:line="1172" pos:column="18">&amp;</op:operator><op:operator pos:line="1172" pos:column="19">(</op:operator><call><name><name pos:line="1172" pos:column="20">stylers</name><op:operator pos:line="1172" pos:column="27">.</op:operator><name pos:line="1172" pos:column="28">getStyler</name></name><argument_list pos:line="1172" pos:column="37">(<argument><expr><name pos:line="1172" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1172" pos:column="44">)</op:operator></expr>;</expr_stmt>  
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1174" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1174" pos:column="28">(<argument><expr><op:operator pos:line="1174" pos:column="29">*</op:operator><name pos:line="1174" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1176" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1176" pos:column="30">.</op:operator><name pos:line="1176" pos:column="31">_styleID</name></name> <op:operator pos:line="1176" pos:column="40">=</op:operator> <name pos:line="1176" pos:column="42">SCE_UNIVERSAL_FOUND_STYLE_SMART</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1177" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1177" pos:column="30">.</op:operator><name pos:line="1177" pos:column="31">_bgColor</name></name> <op:operator pos:line="1177" pos:column="40">=</op:operator> <name pos:line="1177" pos:column="42">liteGreen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1178" pos:column="9">pStyle</name> <op:operator pos:line="1178" pos:column="16">=</op:operator> <op:operator pos:line="1178" pos:column="18">&amp;</op:operator><name pos:line="1178" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1179" pos:column="9">iFind</name> <op:operator pos:line="1179" pos:column="15">=</op:operator> <call><name><name pos:line="1179" pos:column="17">stylers</name><op:operator pos:line="1179" pos:column="24">.</op:operator><name pos:line="1179" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1179" pos:column="43">(<argument><expr><name pos:line="1179" pos:column="44">SCE_UNIVERSAL_FOUND_STYLE_SMART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1180" pos:column="5">if <condition pos:line="1180" pos:column="8">(<expr><name pos:line="1180" pos:column="9">iFind</name> <op:operator pos:line="1180" pos:column="15">!=</op:operator> <op:operator pos:line="1180" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1180" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1180" pos:column="21">
    <block pos:line="1181" pos:column="5">{
        <expr_stmt><expr><name pos:line="1182" pos:column="9">pStyle</name> <op:operator pos:line="1182" pos:column="16">=</op:operator> <op:operator pos:line="1182" pos:column="18">&amp;</op:operator><op:operator pos:line="1182" pos:column="19">(</op:operator><call><name><name pos:line="1182" pos:column="20">stylers</name><op:operator pos:line="1182" pos:column="27">.</op:operator><name pos:line="1182" pos:column="28">getStyler</name></name><argument_list pos:line="1182" pos:column="37">(<argument><expr><name pos:line="1182" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1182" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1184" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1184" pos:column="28">(<argument><expr><op:operator pos:line="1184" pos:column="29">*</op:operator><name pos:line="1184" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1186" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1186" pos:column="30">.</op:operator><name pos:line="1186" pos:column="31">_styleID</name></name> <op:operator pos:line="1186" pos:column="40">=</op:operator> <name pos:line="1186" pos:column="42">SCE_UNIVERSAL_FOUND_STYLE_INC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1187" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1187" pos:column="30">.</op:operator><name pos:line="1187" pos:column="31">_bgColor</name></name> <op:operator pos:line="1187" pos:column="40">=</op:operator> <name pos:line="1187" pos:column="42">blue</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1188" pos:column="9">pStyle</name> <op:operator pos:line="1188" pos:column="16">=</op:operator> <op:operator pos:line="1188" pos:column="18">&amp;</op:operator><name pos:line="1188" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1189" pos:column="9">iFind</name> <op:operator pos:line="1189" pos:column="15">=</op:operator> <call><name><name pos:line="1189" pos:column="17">stylers</name><op:operator pos:line="1189" pos:column="24">.</op:operator><name pos:line="1189" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1189" pos:column="43">(<argument><expr><name pos:line="1189" pos:column="44">SCE_UNIVERSAL_FOUND_STYLE_INC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1190" pos:column="5">if <condition pos:line="1190" pos:column="8">(<expr><name pos:line="1190" pos:column="9">iFind</name> <op:operator pos:line="1190" pos:column="15">!=</op:operator> <op:operator pos:line="1190" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1190" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1190" pos:column="21">
    <block pos:line="1191" pos:column="5">{
        <expr_stmt><expr><name pos:line="1192" pos:column="9">pStyle</name> <op:operator pos:line="1192" pos:column="16">=</op:operator> <op:operator pos:line="1192" pos:column="18">&amp;</op:operator><op:operator pos:line="1192" pos:column="19">(</op:operator><call><name><name pos:line="1192" pos:column="20">stylers</name><op:operator pos:line="1192" pos:column="27">.</op:operator><name pos:line="1192" pos:column="28">getStyler</name></name><argument_list pos:line="1192" pos:column="37">(<argument><expr><name pos:line="1192" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1192" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1194" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1194" pos:column="28">(<argument><expr><op:operator pos:line="1194" pos:column="29">*</op:operator><name pos:line="1194" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1196" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1196" pos:column="30">.</op:operator><name pos:line="1196" pos:column="31">_styleID</name></name> <op:operator pos:line="1196" pos:column="40">=</op:operator> <name pos:line="1196" pos:column="42">SCE_UNIVERSAL_TAGMATCH</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1197" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1197" pos:column="30">.</op:operator><name pos:line="1197" pos:column="31">_bgColor</name></name> <op:operator pos:line="1197" pos:column="40">=</op:operator> <call><name pos:line="1197" pos:column="42">RGB</name><argument_list pos:line="1197" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="1197" pos:column="46">0x80</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1197" pos:column="52">0x00</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1197" pos:column="58">0xFF</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1198" pos:column="9">pStyle</name> <op:operator pos:line="1198" pos:column="16">=</op:operator> <op:operator pos:line="1198" pos:column="18">&amp;</op:operator><name pos:line="1198" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1199" pos:column="9">iFind</name> <op:operator pos:line="1199" pos:column="15">=</op:operator> <call><name><name pos:line="1199" pos:column="17">stylers</name><op:operator pos:line="1199" pos:column="24">.</op:operator><name pos:line="1199" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1199" pos:column="43">(<argument><expr><name pos:line="1199" pos:column="44">SCE_UNIVERSAL_TAGMATCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1200" pos:column="5">if <condition pos:line="1200" pos:column="8">(<expr><name pos:line="1200" pos:column="9">iFind</name> <op:operator pos:line="1200" pos:column="15">!=</op:operator> <op:operator pos:line="1200" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1200" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1200" pos:column="21">
    <block pos:line="1201" pos:column="5">{
        <expr_stmt><expr><name pos:line="1202" pos:column="9">pStyle</name> <op:operator pos:line="1202" pos:column="16">=</op:operator> <op:operator pos:line="1202" pos:column="18">&amp;</op:operator><op:operator pos:line="1202" pos:column="19">(</op:operator><call><name><name pos:line="1202" pos:column="20">stylers</name><op:operator pos:line="1202" pos:column="27">.</op:operator><name pos:line="1202" pos:column="28">getStyler</name></name><argument_list pos:line="1202" pos:column="37">(<argument><expr><name pos:line="1202" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1202" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1204" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1204" pos:column="28">(<argument><expr><op:operator pos:line="1204" pos:column="29">*</op:operator><name pos:line="1204" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1206" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1206" pos:column="30">.</op:operator><name pos:line="1206" pos:column="31">_styleID</name></name> <op:operator pos:line="1206" pos:column="40">=</op:operator> <name pos:line="1206" pos:column="42">SCE_UNIVERSAL_TAGATTR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1207" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1207" pos:column="30">.</op:operator><name pos:line="1207" pos:column="31">_bgColor</name></name> <op:operator pos:line="1207" pos:column="40">=</op:operator> <name pos:line="1207" pos:column="42">yellow</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1208" pos:column="9">pStyle</name> <op:operator pos:line="1208" pos:column="16">=</op:operator> <op:operator pos:line="1208" pos:column="18">&amp;</op:operator><name pos:line="1208" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1209" pos:column="9">iFind</name> <op:operator pos:line="1209" pos:column="15">=</op:operator> <call><name><name pos:line="1209" pos:column="17">stylers</name><op:operator pos:line="1209" pos:column="24">.</op:operator><name pos:line="1209" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1209" pos:column="43">(<argument><expr><name pos:line="1209" pos:column="44">SCE_UNIVERSAL_TAGATTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1210" pos:column="5">if <condition pos:line="1210" pos:column="8">(<expr><name pos:line="1210" pos:column="9">iFind</name> <op:operator pos:line="1210" pos:column="15">!=</op:operator> <op:operator pos:line="1210" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1210" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1210" pos:column="21">
    <block pos:line="1211" pos:column="5">{
        <expr_stmt><expr><name pos:line="1212" pos:column="9">pStyle</name> <op:operator pos:line="1212" pos:column="16">=</op:operator> <op:operator pos:line="1212" pos:column="18">&amp;</op:operator><op:operator pos:line="1212" pos:column="19">(</op:operator><call><name><name pos:line="1212" pos:column="20">stylers</name><op:operator pos:line="1212" pos:column="27">.</op:operator><name pos:line="1212" pos:column="28">getStyler</name></name><argument_list pos:line="1212" pos:column="37">(<argument><expr><name pos:line="1212" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1212" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1214" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1214" pos:column="28">(<argument><expr><op:operator pos:line="1214" pos:column="29">*</op:operator><name pos:line="1214" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><name><name pos:line="1217" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1217" pos:column="30">.</op:operator><name pos:line="1217" pos:column="31">_styleID</name></name> <op:operator pos:line="1217" pos:column="40">=</op:operator> <name pos:line="1217" pos:column="42">SCE_UNIVERSAL_FOUND_STYLE_EXT1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1218" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1218" pos:column="30">.</op:operator><name pos:line="1218" pos:column="31">_bgColor</name></name> <op:operator pos:line="1218" pos:column="40">=</op:operator> <name pos:line="1218" pos:column="42">cyan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1219" pos:column="9">pStyle</name> <op:operator pos:line="1219" pos:column="16">=</op:operator> <op:operator pos:line="1219" pos:column="18">&amp;</op:operator><name pos:line="1219" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1220" pos:column="9">iFind</name> <op:operator pos:line="1220" pos:column="15">=</op:operator> <call><name><name pos:line="1220" pos:column="17">stylers</name><op:operator pos:line="1220" pos:column="24">.</op:operator><name pos:line="1220" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1220" pos:column="43">(<argument><expr><name pos:line="1220" pos:column="44">SCE_UNIVERSAL_FOUND_STYLE_EXT1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1221" pos:column="5">if <condition pos:line="1221" pos:column="8">(<expr><name pos:line="1221" pos:column="9">iFind</name> <op:operator pos:line="1221" pos:column="15">!=</op:operator> <op:operator pos:line="1221" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1221" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1221" pos:column="21">
    <block pos:line="1222" pos:column="5">{
        <expr_stmt><expr><name pos:line="1223" pos:column="9">pStyle</name> <op:operator pos:line="1223" pos:column="16">=</op:operator> <op:operator pos:line="1223" pos:column="18">&amp;</op:operator><op:operator pos:line="1223" pos:column="19">(</op:operator><call><name><name pos:line="1223" pos:column="20">stylers</name><op:operator pos:line="1223" pos:column="27">.</op:operator><name pos:line="1223" pos:column="28">getStyler</name></name><argument_list pos:line="1223" pos:column="37">(<argument><expr><name pos:line="1223" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1223" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1225" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1225" pos:column="28">(<argument><expr><op:operator pos:line="1225" pos:column="29">*</op:operator><name pos:line="1225" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1227" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1227" pos:column="30">.</op:operator><name pos:line="1227" pos:column="31">_styleID</name></name> <op:operator pos:line="1227" pos:column="40">=</op:operator> <name pos:line="1227" pos:column="42">SCE_UNIVERSAL_FOUND_STYLE_EXT2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1228" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1228" pos:column="30">.</op:operator><name pos:line="1228" pos:column="31">_bgColor</name></name> <op:operator pos:line="1228" pos:column="40">=</op:operator> <name pos:line="1228" pos:column="42">orange</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1229" pos:column="9">pStyle</name> <op:operator pos:line="1229" pos:column="16">=</op:operator> <op:operator pos:line="1229" pos:column="18">&amp;</op:operator><name pos:line="1229" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1230" pos:column="9">iFind</name> <op:operator pos:line="1230" pos:column="15">=</op:operator> <call><name><name pos:line="1230" pos:column="17">stylers</name><op:operator pos:line="1230" pos:column="24">.</op:operator><name pos:line="1230" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1230" pos:column="43">(<argument><expr><name pos:line="1230" pos:column="44">SCE_UNIVERSAL_FOUND_STYLE_EXT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1231" pos:column="5">if <condition pos:line="1231" pos:column="8">(<expr><name pos:line="1231" pos:column="9">iFind</name> <op:operator pos:line="1231" pos:column="15">!=</op:operator> <op:operator pos:line="1231" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1231" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1231" pos:column="21">
    <block pos:line="1232" pos:column="5">{
        <expr_stmt><expr><name pos:line="1233" pos:column="9">pStyle</name> <op:operator pos:line="1233" pos:column="16">=</op:operator> <op:operator pos:line="1233" pos:column="18">&amp;</op:operator><op:operator pos:line="1233" pos:column="19">(</op:operator><call><name><name pos:line="1233" pos:column="20">stylers</name><op:operator pos:line="1233" pos:column="27">.</op:operator><name pos:line="1233" pos:column="28">getStyler</name></name><argument_list pos:line="1233" pos:column="37">(<argument><expr><name pos:line="1233" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1233" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1235" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1235" pos:column="28">(<argument><expr><op:operator pos:line="1235" pos:column="29">*</op:operator><name pos:line="1235" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1237" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1237" pos:column="30">.</op:operator><name pos:line="1237" pos:column="31">_styleID</name></name> <op:operator pos:line="1237" pos:column="40">=</op:operator> <name pos:line="1237" pos:column="42">SCE_UNIVERSAL_FOUND_STYLE_EXT3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1238" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1238" pos:column="30">.</op:operator><name pos:line="1238" pos:column="31">_bgColor</name></name> <op:operator pos:line="1238" pos:column="40">=</op:operator> <name pos:line="1238" pos:column="42">yellow</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1239" pos:column="9">pStyle</name> <op:operator pos:line="1239" pos:column="16">=</op:operator> <op:operator pos:line="1239" pos:column="18">&amp;</op:operator><name pos:line="1239" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1240" pos:column="9">iFind</name> <op:operator pos:line="1240" pos:column="15">=</op:operator> <call><name><name pos:line="1240" pos:column="17">stylers</name><op:operator pos:line="1240" pos:column="24">.</op:operator><name pos:line="1240" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1240" pos:column="43">(<argument><expr><name pos:line="1240" pos:column="44">SCE_UNIVERSAL_FOUND_STYLE_EXT3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1241" pos:column="5">if <condition pos:line="1241" pos:column="8">(<expr><name pos:line="1241" pos:column="9">iFind</name> <op:operator pos:line="1241" pos:column="15">!=</op:operator> <op:operator pos:line="1241" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1241" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1241" pos:column="21">
    <block pos:line="1242" pos:column="5">{
        <expr_stmt><expr><name pos:line="1243" pos:column="9">pStyle</name> <op:operator pos:line="1243" pos:column="16">=</op:operator> <op:operator pos:line="1243" pos:column="18">&amp;</op:operator><op:operator pos:line="1243" pos:column="19">(</op:operator><call><name><name pos:line="1243" pos:column="20">stylers</name><op:operator pos:line="1243" pos:column="27">.</op:operator><name pos:line="1243" pos:column="28">getStyler</name></name><argument_list pos:line="1243" pos:column="37">(<argument><expr><name pos:line="1243" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1243" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1245" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1245" pos:column="28">(<argument><expr><op:operator pos:line="1245" pos:column="29">*</op:operator><name pos:line="1245" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1247" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1247" pos:column="30">.</op:operator><name pos:line="1247" pos:column="31">_styleID</name></name> <op:operator pos:line="1247" pos:column="40">=</op:operator> <name pos:line="1247" pos:column="42">SCE_UNIVERSAL_FOUND_STYLE_EXT4</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1248" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1248" pos:column="30">.</op:operator><name pos:line="1248" pos:column="31">_bgColor</name></name> <op:operator pos:line="1248" pos:column="40">=</op:operator> <name pos:line="1248" pos:column="42">purple</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1249" pos:column="9">pStyle</name> <op:operator pos:line="1249" pos:column="16">=</op:operator> <op:operator pos:line="1249" pos:column="18">&amp;</op:operator><name pos:line="1249" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1250" pos:column="9">iFind</name> <op:operator pos:line="1250" pos:column="15">=</op:operator> <call><name><name pos:line="1250" pos:column="17">stylers</name><op:operator pos:line="1250" pos:column="24">.</op:operator><name pos:line="1250" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1250" pos:column="43">(<argument><expr><name pos:line="1250" pos:column="44">SCE_UNIVERSAL_FOUND_STYLE_EXT4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1251" pos:column="5">if <condition pos:line="1251" pos:column="8">(<expr><name pos:line="1251" pos:column="9">iFind</name> <op:operator pos:line="1251" pos:column="15">!=</op:operator> <op:operator pos:line="1251" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1251" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1251" pos:column="21">
    <block pos:line="1252" pos:column="5">{
        <expr_stmt><expr><name pos:line="1253" pos:column="9">pStyle</name> <op:operator pos:line="1253" pos:column="16">=</op:operator> <op:operator pos:line="1253" pos:column="18">&amp;</op:operator><op:operator pos:line="1253" pos:column="19">(</op:operator><call><name><name pos:line="1253" pos:column="20">stylers</name><op:operator pos:line="1253" pos:column="27">.</op:operator><name pos:line="1253" pos:column="28">getStyler</name></name><argument_list pos:line="1253" pos:column="37">(<argument><expr><name pos:line="1253" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1253" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1255" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1255" pos:column="28">(<argument><expr><op:operator pos:line="1255" pos:column="29">*</op:operator><name pos:line="1255" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="1257" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1257" pos:column="30">.</op:operator><name pos:line="1257" pos:column="31">_styleID</name></name> <op:operator pos:line="1257" pos:column="40">=</op:operator> <name pos:line="1257" pos:column="42">SCE_UNIVERSAL_FOUND_STYLE_EXT5</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1258" pos:column="9">defaultIndicatorStyle</name><op:operator pos:line="1258" pos:column="30">.</op:operator><name pos:line="1258" pos:column="31">_bgColor</name></name> <op:operator pos:line="1258" pos:column="40">=</op:operator> <name pos:line="1258" pos:column="42">darkGreen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1259" pos:column="9">pStyle</name> <op:operator pos:line="1259" pos:column="16">=</op:operator> <op:operator pos:line="1259" pos:column="18">&amp;</op:operator><name pos:line="1259" pos:column="19">defaultIndicatorStyle</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1260" pos:column="9">iFind</name> <op:operator pos:line="1260" pos:column="15">=</op:operator> <call><name><name pos:line="1260" pos:column="17">stylers</name><op:operator pos:line="1260" pos:column="24">.</op:operator><name pos:line="1260" pos:column="25">getStylerIndexByID</name></name><argument_list pos:line="1260" pos:column="43">(<argument><expr><name pos:line="1260" pos:column="44">SCE_UNIVERSAL_FOUND_STYLE_EXT5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="1261" pos:column="5">if <condition pos:line="1261" pos:column="8">(<expr><name pos:line="1261" pos:column="9">iFind</name> <op:operator pos:line="1261" pos:column="15">!=</op:operator> <op:operator pos:line="1261" pos:column="18">-</op:operator><lit:literal type="number" pos:line="1261" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="1261" pos:column="21">
    <block pos:line="1262" pos:column="5">{
        <expr_stmt><expr><name pos:line="1263" pos:column="9">pStyle</name> <op:operator pos:line="1263" pos:column="16">=</op:operator> <op:operator pos:line="1263" pos:column="18">&amp;</op:operator><op:operator pos:line="1263" pos:column="19">(</op:operator><call><name><name pos:line="1263" pos:column="20">stylers</name><op:operator pos:line="1263" pos:column="27">.</op:operator><name pos:line="1263" pos:column="28">getStyler</name></name><argument_list pos:line="1263" pos:column="37">(<argument><expr><name pos:line="1263" pos:column="38">iFind</name></expr></argument>)</argument_list></call><op:operator pos:line="1263" pos:column="44">)</op:operator></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="1265" pos:column="9">setSpecialIndicator</name><argument_list pos:line="1265" pos:column="28">(<argument><expr><op:operator pos:line="1265" pos:column="29">*</op:operator><name pos:line="1265" pos:column="30">pStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
    <comment type="line" pos:line="1267" pos:column="5">// Il faut surtout faire un test ici avant d'exécuter SCI_SETCODEPAGE</comment>
    <comment type="line" pos:line="1268" pos:column="5">// Sinon y'aura un soucis de performance!</comment>
	<if pos:line="1269" pos:column="9">if <condition pos:line="1269" pos:column="12">(<expr><call><name pos:line="1269" pos:column="13">isCJK</name><argument_list pos:line="1269" pos:column="18">()</argument_list></call></expr>)</condition><then pos:line="1269" pos:column="21">
	<block pos:line="1270" pos:column="9">{
		<if pos:line="1271" pos:column="17">if <condition pos:line="1271" pos:column="20">(<expr><call><name pos:line="1271" pos:column="21">getCurrentBuffer</name><argument_list pos:line="1271" pos:column="37">()</argument_list></call><op:operator pos:line="1271" pos:column="39">-&gt;</op:operator><call><name pos:line="1271" pos:column="41">getUnicodeMode</name><argument_list pos:line="1271" pos:column="55">()</argument_list></call> <op:operator pos:line="1271" pos:column="58">==</op:operator> <name pos:line="1271" pos:column="61">uni8Bit</name></expr>)</condition><then pos:line="1271" pos:column="69">
		<block pos:line="1272" pos:column="17">{
			<if pos:line="1273" pos:column="25">if <condition pos:line="1273" pos:column="28">(<expr><name pos:line="1273" pos:column="29">typeDoc</name> <op:operator pos:line="1273" pos:column="37">==</op:operator> <name pos:line="1273" pos:column="40">L_CSS</name> <op:operator pos:line="1273" pos:column="46">||</op:operator> <name pos:line="1273" pos:column="49">typeDoc</name> <op:operator pos:line="1273" pos:column="57">==</op:operator> <name pos:line="1273" pos:column="60">L_CAML</name> <op:operator pos:line="1273" pos:column="67">||</op:operator> <name pos:line="1273" pos:column="70">typeDoc</name> <op:operator pos:line="1273" pos:column="78">==</op:operator> <name pos:line="1273" pos:column="81">L_ASM</name> <op:operator pos:line="1273" pos:column="87">||</op:operator> <name pos:line="1273" pos:column="90">typeDoc</name> <op:operator pos:line="1273" pos:column="98">==</op:operator> <name pos:line="1273" pos:column="101">L_MATLAB</name></expr>)</condition><then pos:line="1273" pos:column="110">
				<expr_stmt><expr><call><name pos:line="1274" pos:column="33">execute</name><argument_list pos:line="1274" pos:column="40">(<argument><expr><name pos:line="1274" pos:column="41">SCI_SETCODEPAGE</name></expr></argument>, <argument><expr><name pos:line="1274" pos:column="58">CP_ACP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="1275" pos:column="25">else
				<expr_stmt><expr><call><name pos:line="1276" pos:column="33">execute</name><argument_list pos:line="1276" pos:column="40">(<argument><expr><name pos:line="1276" pos:column="41">SCI_SETCODEPAGE</name></expr></argument>, <argument><expr><name pos:line="1276" pos:column="58">_codepage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></then></if>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="1280" pos:column="9">NppParameters</name> <type:modifier pos:line="1280" pos:column="23">*</type:modifier></type><name pos:line="1280" pos:column="24">pNppParam</name> <init pos:line="1280" pos:column="34">= <expr><call><name><name pos:line="1280" pos:column="36">NppParameters</name><op:operator pos:line="1280" pos:column="49">::</op:operator><name pos:line="1280" pos:column="51">getInstance</name></name><argument_list pos:line="1280" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1281" pos:column="9">ScintillaViewParams</name> <type:modifier pos:line="1281" pos:column="29">&amp;</type:modifier></type> <name pos:line="1281" pos:column="31">svp</name> <init pos:line="1281" pos:column="35">= <expr><op:operator pos:line="1281" pos:column="37">(</op:operator><name pos:line="1281" pos:column="38">ScintillaViewParams</name> <op:operator pos:line="1281" pos:column="58">&amp;</op:operator><op:operator pos:line="1281" pos:column="59">)</op:operator><call><name><name pos:line="1281" pos:column="60">pNppParam</name><op:operator pos:line="1281" pos:column="69">-&gt;</op:operator><name pos:line="1281" pos:column="71">getSVP</name></name><argument_list pos:line="1281" pos:column="77">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1282" pos:column="9">if <condition pos:line="1282" pos:column="12">(<expr><name><name pos:line="1282" pos:column="13">svp</name><op:operator pos:line="1282" pos:column="16">.</op:operator><name pos:line="1282" pos:column="17">_folderStyle</name></name> <op:operator pos:line="1282" pos:column="30">!=</op:operator> <name pos:line="1282" pos:column="33">FOLDER_STYLE_NONE</name></expr>)</condition><then pos:line="1282" pos:column="51">
		<expr_stmt><expr><call><name pos:line="1283" pos:column="17">showMargin</name><argument_list pos:line="1283" pos:column="27">(<argument><expr><name pos:line="1283" pos:column="28">_SC_MARGE_FOLDER</name></expr></argument>, <argument><expr><call><name pos:line="1283" pos:column="46">isNeededFolderMarge</name><argument_list pos:line="1283" pos:column="65">(<argument><expr><name pos:line="1283" pos:column="66">typeDoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<switch pos:line="1285" pos:column="9">switch <condition pos:line="1285" pos:column="16">(<expr><name pos:line="1285" pos:column="17">typeDoc</name></expr>)</condition>
	<block pos:line="1286" pos:column="9">{
		<case pos:line="1287" pos:column="17">case <expr><name pos:line="1287" pos:column="22">L_C</name></expr> :
		</case><case pos:line="1288" pos:column="17">case <expr><name pos:line="1288" pos:column="22">L_CPP</name></expr> :
		</case><case pos:line="1289" pos:column="17">case <expr><name pos:line="1289" pos:column="22">L_JS</name></expr>:
		</case><case pos:line="1290" pos:column="17">case <expr><name pos:line="1290" pos:column="22">L_JAVA</name></expr> :
		</case><case pos:line="1291" pos:column="17">case <expr><name pos:line="1291" pos:column="22">L_RC</name></expr> :
		</case><case pos:line="1292" pos:column="17">case <expr><name pos:line="1292" pos:column="22">L_CS</name></expr> :
		</case><case pos:line="1293" pos:column="17">case <expr><name pos:line="1293" pos:column="22">L_FLASH</name></expr> :
			<expr_stmt><expr><call><name pos:line="1294" pos:column="25">setCppLexer</name><argument_list pos:line="1294" pos:column="36">(<argument><expr><name pos:line="1294" pos:column="37">typeDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="1294" pos:column="47">break;</break>

		</case><case pos:line="1296" pos:column="17">case <expr><name pos:line="1296" pos:column="22">L_TCL</name></expr> :
            <expr_stmt><expr><call><name pos:line="1297" pos:column="13">setTclLexer</name><argument_list pos:line="1297" pos:column="24">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1297" pos:column="28">break;</break>

		
        </case><case pos:line="1300" pos:column="9">case <expr><name pos:line="1300" pos:column="14">L_OBJC</name></expr> :
            <expr_stmt><expr><call><name pos:line="1301" pos:column="13">setObjCLexer</name><argument_list pos:line="1301" pos:column="25">(<argument><expr><name pos:line="1301" pos:column="26">typeDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="1301" pos:column="36">break;</break>
		
	    </case><case pos:line="1303" pos:column="13">case <expr><name pos:line="1303" pos:column="18">L_PHP</name></expr> :
		</case><case pos:line="1304" pos:column="17">case <expr><name pos:line="1304" pos:column="22">L_ASP</name></expr> :
        </case><case pos:line="1305" pos:column="9">case <expr><name pos:line="1305" pos:column="14">L_JSP</name></expr> :
		</case><case pos:line="1306" pos:column="17">case <expr><name pos:line="1306" pos:column="22">L_HTML</name></expr> :
		</case><case pos:line="1307" pos:column="17">case <expr><name pos:line="1307" pos:column="22">L_XML</name></expr> :
			<expr_stmt><expr><call><name pos:line="1308" pos:column="25">setXmlLexer</name><argument_list pos:line="1308" pos:column="36">(<argument><expr><name pos:line="1308" pos:column="37">typeDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:line="1308" pos:column="47">break;</break>

		</case><case pos:line="1310" pos:column="17">case <expr><name pos:line="1310" pos:column="22">L_CSS</name></expr> :
			<expr_stmt><expr><call><name pos:line="1311" pos:column="25">setCssLexer</name><argument_list pos:line="1311" pos:column="36">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1311" pos:column="40">break;</break>

		</case><case pos:line="1313" pos:column="17">case <expr><name pos:line="1313" pos:column="22">L_LUA</name></expr> :
			<expr_stmt><expr><call><name pos:line="1314" pos:column="25">setLuaLexer</name><argument_list pos:line="1314" pos:column="36">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1314" pos:column="40">break;</break>

		</case><case pos:line="1316" pos:column="17">case <expr><name pos:line="1316" pos:column="22">L_MAKEFILE</name></expr> :
			<expr_stmt><expr><call><name pos:line="1317" pos:column="25">setMakefileLexer</name><argument_list pos:line="1317" pos:column="41">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1317" pos:column="45">break;</break>

		</case><case pos:line="1319" pos:column="17">case <expr><name pos:line="1319" pos:column="22">L_INI</name></expr> :
			<expr_stmt><expr><call><name pos:line="1320" pos:column="25">setIniLexer</name><argument_list pos:line="1320" pos:column="36">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1320" pos:column="40">break;</break>
			
		</case><case pos:line="1322" pos:column="17">case <expr><name pos:line="1322" pos:column="22">L_USER</name></expr> : <block pos:line="1322" pos:column="31">{
			<decl_stmt><decl><type><specifier pos:line="1323" pos:column="25">const</specifier> <name pos:line="1323" pos:column="31">TCHAR</name> <type:modifier pos:line="1323" pos:column="37">*</type:modifier></type> <name pos:line="1323" pos:column="39">langExt</name> <init pos:line="1323" pos:column="47">= <expr><call><name><name pos:line="1323" pos:column="49">_currentBuffer</name><op:operator pos:line="1323" pos:column="63">-&gt;</op:operator><name pos:line="1323" pos:column="65">getUserDefineLangName</name></name><argument_list pos:line="1323" pos:column="86">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="1324" pos:column="25">if <condition pos:line="1324" pos:column="28">(<expr><name><name pos:line="1324" pos:column="29">langExt</name><index pos:line="1324" pos:column="36">[<expr><lit:literal type="number" pos:line="1324" pos:column="37">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="1324" pos:column="40">
				<expr_stmt><expr><call><name pos:line="1325" pos:column="33">setUserLexer</name><argument_list pos:line="1325" pos:column="45">(<argument><expr><name pos:line="1325" pos:column="46">langExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then> 
			<else pos:line="1326" pos:column="25">else
				<expr_stmt><expr><call><name pos:line="1327" pos:column="33">setUserLexer</name><argument_list pos:line="1327" pos:column="45">()</argument_list></call></expr>;</expr_stmt></else></if>
			<break pos:line="1328" pos:column="25">break;</break> }</block>

        </case><case pos:line="1330" pos:column="9">case <expr><name pos:line="1330" pos:column="14">L_ASCII</name></expr> :
		<block pos:line="1331" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="1332" pos:column="25">LexerStyler</name> <type:modifier pos:line="1332" pos:column="37">*</type:modifier></type><name pos:line="1332" pos:column="38">pStyler</name> <init pos:line="1332" pos:column="46">= <expr><op:operator pos:line="1332" pos:column="48">(</op:operator><call><name><name pos:line="1332" pos:column="49">_pParameter</name><op:operator pos:line="1332" pos:column="60">-&gt;</op:operator><name pos:line="1332" pos:column="62">getLStylerArray</name></name><argument_list pos:line="1332" pos:column="77">()</argument_list></call><op:operator pos:line="1332" pos:column="79">)</op:operator><op:operator pos:line="1332" pos:column="80">.</op:operator><call><name pos:line="1332" pos:column="81">getLexerStylerByName</name><argument_list pos:line="1332" pos:column="101">(<argument><expr><call><name pos:line="1332" pos:column="102">TEXT</name><argument_list pos:line="1332" pos:column="106">(<argument><expr><lit:literal type="string" pos:line="1332" pos:column="107">"nfo"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="1334" pos:column="25">Style</name></type> <name pos:line="1334" pos:column="31">nfoStyle</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name pos:line="1335" pos:column="25">nfoStyle</name><op:operator pos:line="1335" pos:column="33">.</op:operator><name pos:line="1335" pos:column="34">_styleID</name></name> <op:operator pos:line="1335" pos:column="43">=</op:operator> <name pos:line="1335" pos:column="45">STYLE_DEFAULT</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1336" pos:column="25">nfoStyle</name><op:operator pos:line="1336" pos:column="33">.</op:operator><name pos:line="1336" pos:column="34">_fontName</name></name> <op:operator pos:line="1336" pos:column="44">=</op:operator> <call><name pos:line="1336" pos:column="46">TEXT</name><argument_list pos:line="1336" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="1336" pos:column="51">"Lucida Console"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="1337" pos:column="25">nfoStyle</name><op:operator pos:line="1337" pos:column="33">.</op:operator><name pos:line="1337" pos:column="34">_fontSize</name></name> <op:operator pos:line="1337" pos:column="44">=</op:operator> <lit:literal type="number" pos:line="1337" pos:column="46">10</lit:literal></expr>;</expr_stmt>

			<if pos:line="1339" pos:column="25">if <condition pos:line="1339" pos:column="28">(<expr><name pos:line="1339" pos:column="29">pStyler</name></expr>)</condition><then pos:line="1339" pos:column="37">
			<block pos:line="1340" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="1341" pos:column="33">int</name></type> <name pos:line="1341" pos:column="37">i</name> <init pos:line="1341" pos:column="39">= <expr><call><name><name pos:line="1341" pos:column="41">pStyler</name><op:operator pos:line="1341" pos:column="48">-&gt;</op:operator><name pos:line="1341" pos:column="50">getStylerIndexByName</name></name><argument_list pos:line="1341" pos:column="70">(<argument><expr><call><name pos:line="1341" pos:column="71">TEXT</name><argument_list pos:line="1341" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="1341" pos:column="76">"DEFAULT"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1342" pos:column="33">if <condition pos:line="1342" pos:column="36">(<expr><name pos:line="1342" pos:column="37">i</name> <op:operator pos:line="1342" pos:column="39">!=</op:operator> <op:operator pos:line="1342" pos:column="42">-</op:operator><lit:literal type="number" pos:line="1342" pos:column="43">1</lit:literal></expr>)</condition><then pos:line="1342" pos:column="45">
				<block pos:line="1343" pos:column="33">{
					<decl_stmt><decl><type><name pos:line="1344" pos:column="41">Style</name> <type:modifier pos:line="1344" pos:column="47">&amp;</type:modifier></type> <name pos:line="1344" pos:column="49">style</name> <init pos:line="1344" pos:column="55">= <expr><call><name><name pos:line="1344" pos:column="57">pStyler</name><op:operator pos:line="1344" pos:column="64">-&gt;</op:operator><name pos:line="1344" pos:column="66">getStyler</name></name><argument_list pos:line="1344" pos:column="75">(<argument><expr><name pos:line="1344" pos:column="76">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name pos:line="1345" pos:column="41">nfoStyle</name><op:operator pos:line="1345" pos:column="49">.</op:operator><name pos:line="1345" pos:column="50">_bgColor</name></name> <op:operator pos:line="1345" pos:column="59">=</op:operator> <name><name pos:line="1345" pos:column="61">style</name><op:operator pos:line="1345" pos:column="66">.</op:operator><name pos:line="1345" pos:column="67">_bgColor</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="1346" pos:column="41">nfoStyle</name><op:operator pos:line="1346" pos:column="49">.</op:operator><name pos:line="1346" pos:column="50">_fgColor</name></name> <op:operator pos:line="1346" pos:column="59">=</op:operator> <name><name pos:line="1346" pos:column="61">style</name><op:operator pos:line="1346" pos:column="66">.</op:operator><name pos:line="1346" pos:column="67">_fgColor</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="1347" pos:column="41">nfoStyle</name><op:operator pos:line="1347" pos:column="49">.</op:operator><name pos:line="1347" pos:column="50">_colorStyle</name></name> <op:operator pos:line="1347" pos:column="62">=</op:operator> <name><name pos:line="1347" pos:column="64">style</name><op:operator pos:line="1347" pos:column="69">.</op:operator><name pos:line="1347" pos:column="70">_colorStyle</name></name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
			<expr_stmt><expr><call><name pos:line="1350" pos:column="25">setSpecialStyle</name><argument_list pos:line="1350" pos:column="40">(<argument><expr><name pos:line="1350" pos:column="41">nfoStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1351" pos:column="25">execute</name><argument_list pos:line="1351" pos:column="32">(<argument><expr><name pos:line="1351" pos:column="33">SCI_STYLECLEARALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="1353" pos:column="25">Buffer</name> <type:modifier pos:line="1353" pos:column="32">*</type:modifier></type> <name pos:line="1353" pos:column="34">buf</name> <init pos:line="1353" pos:column="38">= <expr><call><name><name pos:line="1353" pos:column="40">MainFileManager</name><op:operator pos:line="1353" pos:column="55">-&gt;</op:operator><name pos:line="1353" pos:column="57">getBufferByID</name></name><argument_list pos:line="1353" pos:column="70">(<argument><expr><name pos:line="1353" pos:column="71">_currentBufferID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="1355" pos:column="25">if <condition pos:line="1355" pos:column="28">(<expr><call><name><name pos:line="1355" pos:column="29">buf</name><op:operator pos:line="1355" pos:column="32">-&gt;</op:operator><name pos:line="1355" pos:column="34">getEncoding</name></name><argument_list pos:line="1355" pos:column="45">()</argument_list></call> <op:operator pos:line="1355" pos:column="48">!=</op:operator> <name pos:line="1355" pos:column="51">NPP_CP_DOS_437</name></expr>)</condition><then pos:line="1355" pos:column="66">
			<block pos:line="1356" pos:column="25">{
			   <expr_stmt><expr><call><name><name pos:line="1357" pos:column="28">buf</name><op:operator pos:line="1357" pos:column="31">-&gt;</op:operator><name pos:line="1357" pos:column="33">setEncoding</name></name><argument_list pos:line="1357" pos:column="44">(<argument><expr><name pos:line="1357" pos:column="45">NPP_CP_DOS_437</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			   <expr_stmt><expr><call><name><op:operator pos:line="1358" pos:column="28">::</op:operator><name pos:line="1358" pos:column="30">SendMessage</name></name><argument_list pos:line="1358" pos:column="41">(<argument><expr><name pos:line="1358" pos:column="42">_hParent</name></expr></argument>, <argument><expr><name pos:line="1358" pos:column="52">WM_COMMAND</name></expr></argument>, <argument><expr><name pos:line="1358" pos:column="64">IDM_FILE_RELOAD</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1358" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
		<break pos:line="1361" pos:column="17">break;</break>

		</case><case pos:line="1363" pos:column="17">case <expr><name pos:line="1363" pos:column="22">L_SQL</name></expr> :
			<expr_stmt><expr><call><name pos:line="1364" pos:column="25">setSqlLexer</name><argument_list pos:line="1364" pos:column="36">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1364" pos:column="40">break;</break>

		</case><case pos:line="1366" pos:column="17">case <expr><name pos:line="1366" pos:column="22">L_VB</name></expr> :
			<expr_stmt><expr><call><name pos:line="1367" pos:column="25">setVBLexer</name><argument_list pos:line="1367" pos:column="35">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1367" pos:column="39">break;</break>

		</case><case pos:line="1369" pos:column="17">case <expr><name pos:line="1369" pos:column="22">L_PASCAL</name></expr> :
			<expr_stmt><expr><call><name pos:line="1370" pos:column="25">setPascalLexer</name><argument_list pos:line="1370" pos:column="39">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1370" pos:column="43">break;</break>

		</case><case pos:line="1372" pos:column="17">case <expr><name pos:line="1372" pos:column="22">L_PERL</name></expr> :
			<expr_stmt><expr><call><name pos:line="1373" pos:column="25">setPerlLexer</name><argument_list pos:line="1373" pos:column="37">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1373" pos:column="41">break;</break>

		</case><case pos:line="1375" pos:column="17">case <expr><name pos:line="1375" pos:column="22">L_PYTHON</name></expr> :
			<expr_stmt><expr><call><name pos:line="1376" pos:column="25">setPythonLexer</name><argument_list pos:line="1376" pos:column="39">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1376" pos:column="43">break;</break>

		</case><case pos:line="1378" pos:column="17">case <expr><name pos:line="1378" pos:column="22">L_BATCH</name></expr> :
			<expr_stmt><expr><call><name pos:line="1379" pos:column="25">setBatchLexer</name><argument_list pos:line="1379" pos:column="38">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1379" pos:column="42">break;</break>

		</case><case pos:line="1381" pos:column="17">case <expr><name pos:line="1381" pos:column="22">L_TEX</name></expr> : 
			<expr_stmt><expr><call><name pos:line="1382" pos:column="25">setTeXLexer</name><argument_list pos:line="1382" pos:column="36">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1382" pos:column="40">break;</break>

		</case><case pos:line="1384" pos:column="17">case <expr><name pos:line="1384" pos:column="22">L_NSIS</name></expr> :
			<expr_stmt><expr><call><name pos:line="1385" pos:column="25">setNsisLexer</name><argument_list pos:line="1385" pos:column="37">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1385" pos:column="41">break;</break>

		</case><case pos:line="1387" pos:column="17">case <expr><name pos:line="1387" pos:column="22">L_BASH</name></expr> :
			<expr_stmt><expr><call><name pos:line="1388" pos:column="25">setBashLexer</name><argument_list pos:line="1388" pos:column="37">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1388" pos:column="41">break;</break>

		</case><case pos:line="1390" pos:column="17">case <expr><name pos:line="1390" pos:column="22">L_FORTRAN</name></expr> : 
			<expr_stmt><expr><call><name pos:line="1391" pos:column="25">setFortranLexer</name><argument_list pos:line="1391" pos:column="40">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1391" pos:column="44">break;</break>

		</case><case pos:line="1393" pos:column="17">case <expr><name pos:line="1393" pos:column="22">L_LISP</name></expr> :
            <expr_stmt><expr><call><name pos:line="1394" pos:column="13">setLispLexer</name><argument_list pos:line="1394" pos:column="25">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1394" pos:column="29">break;</break>

		</case><case pos:line="1396" pos:column="17">case <expr><name pos:line="1396" pos:column="22">L_SCHEME</name></expr> :
            <expr_stmt><expr><call><name pos:line="1397" pos:column="13">setSchemeLexer</name><argument_list pos:line="1397" pos:column="27">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1397" pos:column="31">break;</break>

		</case><case pos:line="1399" pos:column="17">case <expr><name pos:line="1399" pos:column="22">L_ASM</name></expr> :
            <expr_stmt><expr><call><name pos:line="1400" pos:column="13">setAsmLexer</name><argument_list pos:line="1400" pos:column="24">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1400" pos:column="28">break;</break>

		</case><case pos:line="1402" pos:column="17">case <expr><name pos:line="1402" pos:column="22">L_DIFF</name></expr> :
            <expr_stmt><expr><call><name pos:line="1403" pos:column="13">setDiffLexer</name><argument_list pos:line="1403" pos:column="25">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1403" pos:column="29">break;</break>

		</case><case pos:line="1405" pos:column="17">case <expr><name pos:line="1405" pos:column="22">L_PROPS</name></expr> :
            <expr_stmt><expr><call><name pos:line="1406" pos:column="13">setPropsLexer</name><argument_list pos:line="1406" pos:column="26">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1406" pos:column="30">break;</break>

		</case><case pos:line="1408" pos:column="17">case <expr><name pos:line="1408" pos:column="22">L_PS</name></expr> :
            <expr_stmt><expr><call><name pos:line="1409" pos:column="13">setPostscriptLexer</name><argument_list pos:line="1409" pos:column="31">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1409" pos:column="35">break;</break>

		</case><case pos:line="1411" pos:column="17">case <expr><name pos:line="1411" pos:column="22">L_RUBY</name></expr> :
            <expr_stmt><expr><call><name pos:line="1412" pos:column="13">setRubyLexer</name><argument_list pos:line="1412" pos:column="25">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1412" pos:column="29">break;</break>

		</case><case pos:line="1414" pos:column="17">case <expr><name pos:line="1414" pos:column="22">L_SMALLTALK</name></expr> :
            <expr_stmt><expr><call><name pos:line="1415" pos:column="13">setSmalltalkLexer</name><argument_list pos:line="1415" pos:column="30">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1415" pos:column="34">break;</break>

		</case><case pos:line="1417" pos:column="17">case <expr><name pos:line="1417" pos:column="22">L_VHDL</name></expr> :
            <expr_stmt><expr><call><name pos:line="1418" pos:column="13">setVhdlLexer</name><argument_list pos:line="1418" pos:column="25">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1418" pos:column="29">break;</break>

		</case><case pos:line="1420" pos:column="17">case <expr><name pos:line="1420" pos:column="22">L_KIX</name></expr> :
            <expr_stmt><expr><call><name pos:line="1421" pos:column="13">setKixLexer</name><argument_list pos:line="1421" pos:column="24">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1421" pos:column="28">break;</break>

		</case><case pos:line="1423" pos:column="17">case <expr><name pos:line="1423" pos:column="22">L_CAML</name></expr> :
            <expr_stmt><expr><call><name pos:line="1424" pos:column="13">setCamlLexer</name><argument_list pos:line="1424" pos:column="25">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1424" pos:column="29">break;</break>

		</case><case pos:line="1426" pos:column="17">case <expr><name pos:line="1426" pos:column="22">L_ADA</name></expr> :
            <expr_stmt><expr><call><name pos:line="1427" pos:column="13">setAdaLexer</name><argument_list pos:line="1427" pos:column="24">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1427" pos:column="28">break;</break>

		</case><case pos:line="1429" pos:column="17">case <expr><name pos:line="1429" pos:column="22">L_VERILOG</name></expr> :
            <expr_stmt><expr><call><name pos:line="1430" pos:column="13">setVerilogLexer</name><argument_list pos:line="1430" pos:column="28">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1430" pos:column="32">break;</break>

		</case><case pos:line="1432" pos:column="17">case <expr><name pos:line="1432" pos:column="22">L_AU3</name></expr> :
            <expr_stmt><expr><call><name pos:line="1433" pos:column="13">setAutoItLexer</name><argument_list pos:line="1433" pos:column="27">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1433" pos:column="31">break;</break>

		</case><case pos:line="1435" pos:column="17">case <expr><name pos:line="1435" pos:column="22">L_MATLAB</name></expr> :
            <expr_stmt><expr><call><name pos:line="1436" pos:column="13">setMatlabLexer</name><argument_list pos:line="1436" pos:column="27">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1436" pos:column="31">break;</break>

		</case><case pos:line="1438" pos:column="17">case <expr><name pos:line="1438" pos:column="22">L_HASKELL</name></expr> :
            <expr_stmt><expr><call><name pos:line="1439" pos:column="13">setHaskellLexer</name><argument_list pos:line="1439" pos:column="28">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1439" pos:column="32">break;</break>

		</case><case pos:line="1441" pos:column="17">case <expr><name pos:line="1441" pos:column="22">L_INNO</name></expr> :
			<expr_stmt><expr><call><name pos:line="1442" pos:column="25">setInnoLexer</name><argument_list pos:line="1442" pos:column="37">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1442" pos:column="41">break;</break>

		</case><case pos:line="1444" pos:column="17">case <expr><name pos:line="1444" pos:column="22">L_CMAKE</name></expr> :
			<expr_stmt><expr><call><name pos:line="1445" pos:column="25">setCmakeLexer</name><argument_list pos:line="1445" pos:column="38">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1445" pos:column="42">break;</break>

		</case><case pos:line="1447" pos:column="17">case <expr><name pos:line="1447" pos:column="22">L_YAML</name></expr> :
			<expr_stmt><expr><call><name pos:line="1448" pos:column="25">setYamlLexer</name><argument_list pos:line="1448" pos:column="37">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1448" pos:column="41">break;</break>

        </case><case pos:line="1450" pos:column="9">case <expr><name pos:line="1450" pos:column="14">L_COBOL</name></expr> :
			<expr_stmt><expr><call><name pos:line="1451" pos:column="25">setCobolLexer</name><argument_list pos:line="1451" pos:column="38">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1451" pos:column="42">break;</break>

        </case><case pos:line="1453" pos:column="9">case <expr><name pos:line="1453" pos:column="14">L_GUI4CLI</name></expr> :
			<expr_stmt><expr><call><name pos:line="1454" pos:column="25">setGui4CliLexer</name><argument_list pos:line="1454" pos:column="40">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1454" pos:column="44">break;</break>

        </case><case pos:line="1456" pos:column="9">case <expr><name pos:line="1456" pos:column="14">L_D</name></expr> :
			<expr_stmt><expr><call><name pos:line="1457" pos:column="25">setDLexer</name><argument_list pos:line="1457" pos:column="34">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1457" pos:column="38">break;</break>

        </case><case pos:line="1459" pos:column="9">case <expr><name pos:line="1459" pos:column="14">L_POWERSHELL</name></expr> :
			<expr_stmt><expr><call><name pos:line="1460" pos:column="25">setPowerShellLexer</name><argument_list pos:line="1460" pos:column="43">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1460" pos:column="47">break;</break>

        </case><case pos:line="1462" pos:column="9">case <expr><name pos:line="1462" pos:column="14">L_R</name></expr> :
			<expr_stmt><expr><call><name pos:line="1463" pos:column="25">setRLexer</name><argument_list pos:line="1463" pos:column="34">()</argument_list></call></expr>;</expr_stmt> <break pos:line="1463" pos:column="38">break;</break>

		</case><case pos:line="1465" pos:column="17">case <expr><name pos:line="1465" pos:column="22">L_TEXT</name></expr> :
		</case><default pos:line="1466" pos:column="17">default :
			<if pos:line="1467" pos:column="25">if <condition pos:line="1467" pos:column="28">(<expr><name pos:line="1467" pos:column="29">typeDoc</name> <op:operator pos:line="1467" pos:column="37">&gt;=</op:operator> <name pos:line="1467" pos:column="40">L_EXTERNAL</name> <op:operator pos:line="1467" pos:column="51">&amp;&amp;</op:operator> <name pos:line="1467" pos:column="54">typeDoc</name> <op:operator pos:line="1467" pos:column="62">&lt;</op:operator> <call><name><name pos:line="1467" pos:column="64">NppParameters</name><op:operator pos:line="1467" pos:column="77">::</op:operator><name pos:line="1467" pos:column="79">getInstance</name></name><argument_list pos:line="1467" pos:column="90">()</argument_list></call><op:operator pos:line="1467" pos:column="92">-&gt;</op:operator><name pos:line="1467" pos:column="94">L_END</name></expr>)</condition><then pos:line="1467" pos:column="100">
				<expr_stmt><expr><call><name pos:line="1468" pos:column="33">setExternalLexer</name><argument_list pos:line="1468" pos:column="49">(<argument><expr><name pos:line="1468" pos:column="50">typeDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="1469" pos:column="25">else
				<expr_stmt><expr><call><name pos:line="1470" pos:column="33">execute</name><argument_list pos:line="1470" pos:column="40">(<argument><expr><name pos:line="1470" pos:column="41">SCI_SETLEXER</name></expr></argument>, <argument><expr><op:operator pos:line="1470" pos:column="55">(</op:operator><name pos:line="1470" pos:column="56">_codepage</name> <op:operator pos:line="1470" pos:column="66">==</op:operator> <name pos:line="1470" pos:column="69">CP_CHINESE_TRADITIONAL</name><op:operator pos:line="1470" pos:column="91">)</op:operator><op:operator pos:line="1470" pos:column="92">?</op:operator><name pos:line="1470" pos:column="93">SCLEX_MAKEFILE</name><op:operator pos:line="1470" pos:column="107">:</op:operator><name pos:line="1470" pos:column="108">SCLEX_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<break pos:line="1471" pos:column="25">break;</break>

	</default>}</block></switch>
	<comment type="line" pos:line="1474" pos:column="9">//All the global styles should put here</comment>
	<decl_stmt><decl><type><name pos:line="1475" pos:column="9">int</name></type> <name pos:line="1475" pos:column="13">indexOfIndentGuide</name> <init pos:line="1475" pos:column="32">= <expr><call><name><name pos:line="1475" pos:column="34">stylers</name><op:operator pos:line="1475" pos:column="41">.</op:operator><name pos:line="1475" pos:column="42">getStylerIndexByID</name></name><argument_list pos:line="1475" pos:column="60">(<argument><expr><name pos:line="1475" pos:column="61">STYLE_INDENTGUIDE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1476" pos:column="9">if <condition pos:line="1476" pos:column="12">(<expr><name pos:line="1476" pos:column="13">indexOfIndentGuide</name> <op:operator pos:line="1476" pos:column="32">!=</op:operator> <op:operator pos:line="1476" pos:column="35">-</op:operator><lit:literal type="number" pos:line="1476" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="1476" pos:column="38">
    <block pos:line="1477" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="1478" pos:column="9">Style</name> <type:modifier pos:line="1478" pos:column="15">&amp;</type:modifier></type> <name pos:line="1478" pos:column="17">styleIG</name> <init pos:line="1478" pos:column="25">= <expr><call><name><name pos:line="1478" pos:column="27">stylers</name><op:operator pos:line="1478" pos:column="34">.</op:operator><name pos:line="1478" pos:column="35">getStyler</name></name><argument_list pos:line="1478" pos:column="44">(<argument><expr><name pos:line="1478" pos:column="45">indexOfIndentGuide</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name pos:line="1479" pos:column="13">setStyle</name><argument_list pos:line="1479" pos:column="21">(<argument><expr><name pos:line="1479" pos:column="22">styleIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
	<decl_stmt><decl><type><name pos:line="1481" pos:column="9">int</name></type> <name pos:line="1481" pos:column="13">indexOfBraceLight</name> <init pos:line="1481" pos:column="31">= <expr><call><name><name pos:line="1481" pos:column="33">stylers</name><op:operator pos:line="1481" pos:column="40">.</op:operator><name pos:line="1481" pos:column="41">getStylerIndexByID</name></name><argument_list pos:line="1481" pos:column="59">(<argument><expr><name pos:line="1481" pos:column="60">STYLE_BRACELIGHT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1482" pos:column="9">if <condition pos:line="1482" pos:column="12">(<expr><name pos:line="1482" pos:column="13">indexOfBraceLight</name> <op:operator pos:line="1482" pos:column="31">!=</op:operator> <op:operator pos:line="1482" pos:column="34">-</op:operator><lit:literal type="number" pos:line="1482" pos:column="35">1</lit:literal></expr>)</condition><then pos:line="1482" pos:column="37">
    <block pos:line="1483" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="1484" pos:column="9">Style</name> <type:modifier pos:line="1484" pos:column="15">&amp;</type:modifier></type> <name pos:line="1484" pos:column="17">styleBL</name> <init pos:line="1484" pos:column="25">= <expr><call><name><name pos:line="1484" pos:column="27">stylers</name><op:operator pos:line="1484" pos:column="34">.</op:operator><name pos:line="1484" pos:column="35">getStyler</name></name><argument_list pos:line="1484" pos:column="44">(<argument><expr><name pos:line="1484" pos:column="45">indexOfBraceLight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name pos:line="1485" pos:column="13">setStyle</name><argument_list pos:line="1485" pos:column="21">(<argument><expr><name pos:line="1485" pos:column="22">styleBL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
	<comment type="line" pos:line="1487" pos:column="9">//setStyle(STYLE_CONTROLCHAR, liteGrey);</comment>
	<decl_stmt><decl><type><name pos:line="1488" pos:column="9">int</name></type> <name pos:line="1488" pos:column="13">indexBadBrace</name> <init pos:line="1488" pos:column="27">= <expr><call><name><name pos:line="1488" pos:column="29">stylers</name><op:operator pos:line="1488" pos:column="36">.</op:operator><name pos:line="1488" pos:column="37">getStylerIndexByID</name></name><argument_list pos:line="1488" pos:column="55">(<argument><expr><name pos:line="1488" pos:column="56">STYLE_BRACEBAD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1489" pos:column="9">if <condition pos:line="1489" pos:column="12">(<expr><name pos:line="1489" pos:column="13">indexBadBrace</name> <op:operator pos:line="1489" pos:column="27">!=</op:operator> <op:operator pos:line="1489" pos:column="30">-</op:operator><lit:literal type="number" pos:line="1489" pos:column="31">1</lit:literal></expr>)</condition><then pos:line="1489" pos:column="33">
    <block pos:line="1490" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="1491" pos:column="9">Style</name> <type:modifier pos:line="1491" pos:column="15">&amp;</type:modifier></type> <name pos:line="1491" pos:column="17">styleBB</name> <init pos:line="1491" pos:column="25">= <expr><call><name><name pos:line="1491" pos:column="27">stylers</name><op:operator pos:line="1491" pos:column="34">.</op:operator><name pos:line="1491" pos:column="35">getStyler</name></name><argument_list pos:line="1491" pos:column="44">(<argument><expr><name pos:line="1491" pos:column="45">indexBadBrace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name pos:line="1492" pos:column="13">setStyle</name><argument_list pos:line="1492" pos:column="21">(<argument><expr><name pos:line="1492" pos:column="22">styleBB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
	<decl_stmt><decl><type><name pos:line="1494" pos:column="9">int</name></type> <name pos:line="1494" pos:column="13">indexLineNumber</name> <init pos:line="1494" pos:column="29">= <expr><call><name><name pos:line="1494" pos:column="31">stylers</name><op:operator pos:line="1494" pos:column="38">.</op:operator><name pos:line="1494" pos:column="39">getStylerIndexByID</name></name><argument_list pos:line="1494" pos:column="57">(<argument><expr><name pos:line="1494" pos:column="58">STYLE_LINENUMBER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1495" pos:column="9">if <condition pos:line="1495" pos:column="12">(<expr><name pos:line="1495" pos:column="13">indexLineNumber</name> <op:operator pos:line="1495" pos:column="29">!=</op:operator> <op:operator pos:line="1495" pos:column="32">-</op:operator><lit:literal type="number" pos:line="1495" pos:column="33">1</lit:literal></expr>)</condition><then pos:line="1495" pos:column="35">
    <block pos:line="1496" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="1497" pos:column="9">Style</name> <type:modifier pos:line="1497" pos:column="15">&amp;</type:modifier></type> <name pos:line="1497" pos:column="17">styleLN</name> <init pos:line="1497" pos:column="25">= <expr><call><name><name pos:line="1497" pos:column="27">stylers</name><op:operator pos:line="1497" pos:column="34">.</op:operator><name pos:line="1497" pos:column="35">getStyler</name></name><argument_list pos:line="1497" pos:column="44">(<argument><expr><name pos:line="1497" pos:column="45">indexLineNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    <expr_stmt><expr><call><name pos:line="1498" pos:column="13">setSpecialStyle</name><argument_list pos:line="1498" pos:column="28">(<argument><expr><name pos:line="1498" pos:column="29">styleLN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="1500" pos:column="5">setTabSettings</name><argument_list pos:line="1500" pos:column="19">(<argument><expr><call><name><name pos:line="1500" pos:column="20">_pParameter</name><op:operator pos:line="1500" pos:column="31">-&gt;</op:operator><name pos:line="1500" pos:column="33">getLangFromID</name></name><argument_list pos:line="1500" pos:column="46">(<argument><expr><name pos:line="1500" pos:column="47">typeDoc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1501" pos:column="9">execute</name><argument_list pos:line="1501" pos:column="16">(<argument><expr><name pos:line="1501" pos:column="17">SCI_SETSTYLEBITS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1501" pos:column="35">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="1501" pos:column="41">// Always use 8 bit mask in Document class (Document::stylingBitsMask),</comment>
									<comment type="line" pos:line="1502" pos:column="73">// in that way Editor::PositionIsHotspot will return correct hotspot styleID.</comment>
									<comment type="line" pos:line="1503" pos:column="73">// This value has no effect on LexAccessor::mask.</comment>
}</block></function>

<function><type><name pos:line="1506" pos:column="1">BufferID</name></type> <name><name pos:line="1506" pos:column="10">ScintillaEditView</name><op:operator pos:line="1506" pos:column="27">::</op:operator><name pos:line="1506" pos:column="29">attachDefaultDoc</name></name><parameter_list pos:line="1506" pos:column="45">()</parameter_list>
<block pos:line="1507" pos:column="1">{
	<comment type="line" pos:line="1508" pos:column="9">// get the doc pointer attached (by default) on the view Scintilla</comment>
	<decl_stmt><decl><type><name pos:line="1509" pos:column="9">Document</name></type> <name pos:line="1509" pos:column="18">doc</name> <init pos:line="1509" pos:column="22">= <expr><call><name pos:line="1509" pos:column="24">execute</name><argument_list pos:line="1509" pos:column="31">(<argument><expr><name pos:line="1509" pos:column="32">SCI_GETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1509" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1509" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1510" pos:column="9">execute</name><argument_list pos:line="1510" pos:column="16">(<argument><expr><name pos:line="1510" pos:column="17">SCI_ADDREFDOCUMENT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1510" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1510" pos:column="40">doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1511" pos:column="9">BufferID</name></type> <name pos:line="1511" pos:column="18">id</name> <init pos:line="1511" pos:column="21">= <expr><call><name><name pos:line="1511" pos:column="23">MainFileManager</name><op:operator pos:line="1511" pos:column="38">-&gt;</op:operator><name pos:line="1511" pos:column="40">bufferFromDocument</name></name><argument_list pos:line="1511" pos:column="58">(<argument><expr><name pos:line="1511" pos:column="59">doc</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1511" pos:column="64">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1511" pos:column="71">true</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line" pos:line="1511" pos:column="77">//true, true);	//keep counter on 1</comment>
	<decl_stmt><decl><type><name pos:line="1512" pos:column="9">Buffer</name> <type:modifier pos:line="1512" pos:column="16">*</type:modifier></type> <name pos:line="1512" pos:column="18">buf</name> <init pos:line="1512" pos:column="22">= <expr><call><name><name pos:line="1512" pos:column="24">MainFileManager</name><op:operator pos:line="1512" pos:column="39">-&gt;</op:operator><name pos:line="1512" pos:column="41">getBufferByID</name></name><argument_list pos:line="1512" pos:column="54">(<argument><expr><name pos:line="1512" pos:column="55">id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name pos:line="1514" pos:column="9">MainFileManager</name><op:operator pos:line="1514" pos:column="24">-&gt;</op:operator><name pos:line="1514" pos:column="26">addBufferReference</name></name><argument_list pos:line="1514" pos:column="44">(<argument><expr><name pos:line="1514" pos:column="45">id</name></expr></argument>, <argument><expr><name pos:line="1514" pos:column="49">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="1514" pos:column="57">//add a reference. Notepad only shows the buffer in tabbar</comment>

	<expr_stmt><expr><name pos:line="1516" pos:column="9">_currentBufferID</name> <op:operator pos:line="1516" pos:column="26">=</op:operator> <name pos:line="1516" pos:column="28">id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1517" pos:column="9">_currentBuffer</name> <op:operator pos:line="1517" pos:column="24">=</op:operator> <name pos:line="1517" pos:column="26">buf</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1518" pos:column="9">bufferUpdated</name><argument_list pos:line="1518" pos:column="22">(<argument><expr><name pos:line="1518" pos:column="23">buf</name></expr></argument>, <argument><expr><name pos:line="1518" pos:column="28">BufferChangeMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="1518" pos:column="49">//make sure everything is in sync with the buffer, since no reference exists</comment>

	<return pos:line="1520" pos:column="9">return <expr><name pos:line="1520" pos:column="16">id</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1523" pos:column="1">void</name></type> <name><name pos:line="1523" pos:column="6">ScintillaEditView</name><op:operator pos:line="1523" pos:column="23">::</op:operator><name pos:line="1523" pos:column="25">saveCurrentPos</name></name><parameter_list pos:line="1523" pos:column="39">()</parameter_list>
<block pos:line="1524" pos:column="1">{
	<comment type="line" pos:line="1525" pos:column="9">//Save data so, that the current topline becomes visible again after restoring.</comment>
	<decl_stmt><decl><type><name pos:line="1526" pos:column="9">int</name></type> <name pos:line="1526" pos:column="13">displayedLine</name> <init pos:line="1526" pos:column="27">= <expr><call><name><name pos:line="1526" pos:column="29">static_cast</name><argument_list pos:line="1526" pos:column="40">&lt;<argument><expr><name pos:line="1526" pos:column="41">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1526" pos:column="45">(<argument><expr><call><name pos:line="1526" pos:column="46">execute</name><argument_list pos:line="1526" pos:column="53">(<argument><expr><name pos:line="1526" pos:column="54">SCI_GETFIRSTVISIBLELINE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1527" pos:column="9">int</name></type> <name pos:line="1527" pos:column="13">docLine</name> <init pos:line="1527" pos:column="21">= <expr><call><name pos:line="1527" pos:column="23">execute</name><argument_list pos:line="1527" pos:column="30">(<argument><expr><name pos:line="1527" pos:column="31">SCI_DOCLINEFROMVISIBLE</name></expr></argument>, <argument><expr><name pos:line="1527" pos:column="55">displayedLine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>		<comment type="line" pos:line="1527" pos:column="81">//linenumber of the line displayed in the top</comment>
	<comment type="line" pos:line="1528" pos:column="9">//int offset = displayedLine - execute(SCI_VISIBLEFROMDOCLINE, docLine);		//use this to calc offset of wrap. If no wrap this should be zero</comment>

	<decl_stmt><decl><type><name pos:line="1530" pos:column="9">Buffer</name> <type:modifier pos:line="1530" pos:column="16">*</type:modifier></type> <name pos:line="1530" pos:column="18">buf</name> <init pos:line="1530" pos:column="22">= <expr><call><name><name pos:line="1530" pos:column="24">MainFileManager</name><op:operator pos:line="1530" pos:column="39">-&gt;</op:operator><name pos:line="1530" pos:column="41">getBufferByID</name></name><argument_list pos:line="1530" pos:column="54">(<argument><expr><name pos:line="1530" pos:column="55">_currentBufferID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="1532" pos:column="9">Position</name></type> <name pos:line="1532" pos:column="18">pos</name></decl>;</decl_stmt>
	<comment type="line" pos:line="1533" pos:column="9">// the correct visible line number</comment>
	<expr_stmt><expr><name><name pos:line="1534" pos:column="9">pos</name><op:operator pos:line="1534" pos:column="12">.</op:operator><name pos:line="1534" pos:column="13">_firstVisibleLine</name></name> <op:operator pos:line="1534" pos:column="31">=</op:operator> <name pos:line="1534" pos:column="33">docLine</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1535" pos:column="9">pos</name><op:operator pos:line="1535" pos:column="12">.</op:operator><name pos:line="1535" pos:column="13">_startPos</name></name> <op:operator pos:line="1535" pos:column="23">=</op:operator> <call><name><name pos:line="1535" pos:column="25">static_cast</name><argument_list pos:line="1535" pos:column="36">&lt;<argument><expr><name pos:line="1535" pos:column="37">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1535" pos:column="41">(<argument><expr><call><name pos:line="1535" pos:column="42">execute</name><argument_list pos:line="1535" pos:column="49">(<argument><expr><name pos:line="1535" pos:column="50">SCI_GETANCHOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1536" pos:column="9">pos</name><op:operator pos:line="1536" pos:column="12">.</op:operator><name pos:line="1536" pos:column="13">_endPos</name></name> <op:operator pos:line="1536" pos:column="21">=</op:operator> <call><name><name pos:line="1536" pos:column="23">static_cast</name><argument_list pos:line="1536" pos:column="34">&lt;<argument><expr><name pos:line="1536" pos:column="35">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1536" pos:column="39">(<argument><expr><call><name pos:line="1536" pos:column="40">execute</name><argument_list pos:line="1536" pos:column="47">(<argument><expr><name pos:line="1536" pos:column="48">SCI_GETCURRENTPOS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1537" pos:column="9">pos</name><op:operator pos:line="1537" pos:column="12">.</op:operator><name pos:line="1537" pos:column="13">_xOffset</name></name> <op:operator pos:line="1537" pos:column="22">=</op:operator> <call><name><name pos:line="1537" pos:column="24">static_cast</name><argument_list pos:line="1537" pos:column="35">&lt;<argument><expr><name pos:line="1537" pos:column="36">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1537" pos:column="40">(<argument><expr><call><name pos:line="1537" pos:column="41">execute</name><argument_list pos:line="1537" pos:column="48">(<argument><expr><name pos:line="1537" pos:column="49">SCI_GETXOFFSET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1538" pos:column="9">pos</name><op:operator pos:line="1538" pos:column="12">.</op:operator><name pos:line="1538" pos:column="13">_selMode</name></name> <op:operator pos:line="1538" pos:column="22">=</op:operator> <call><name pos:line="1538" pos:column="24">execute</name><argument_list pos:line="1538" pos:column="31">(<argument><expr><name pos:line="1538" pos:column="32">SCI_GETSELECTIONMODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1539" pos:column="9">pos</name><op:operator pos:line="1539" pos:column="12">.</op:operator><name pos:line="1539" pos:column="13">_scrollWidth</name></name> <op:operator pos:line="1539" pos:column="26">=</op:operator> <call><name pos:line="1539" pos:column="28">execute</name><argument_list pos:line="1539" pos:column="35">(<argument><expr><name pos:line="1539" pos:column="36">SCI_GETSCROLLWIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="1541" pos:column="9">buf</name><op:operator pos:line="1541" pos:column="12">-&gt;</op:operator><name pos:line="1541" pos:column="14">setPosition</name></name><argument_list pos:line="1541" pos:column="25">(<argument><expr><name pos:line="1541" pos:column="26">pos</name></expr></argument>, <argument><expr><name pos:line="1541" pos:column="31">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1544" pos:column="1">void</name></type> <name><name pos:line="1544" pos:column="6">ScintillaEditView</name><op:operator pos:line="1544" pos:column="23">::</op:operator><name pos:line="1544" pos:column="25">restoreCurrentPos</name></name><parameter_list pos:line="1544" pos:column="42">()</parameter_list>
<block pos:line="1545" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1546" pos:column="9">Buffer</name> <type:modifier pos:line="1546" pos:column="16">*</type:modifier></type> <name pos:line="1546" pos:column="18">buf</name> <init pos:line="1546" pos:column="22">= <expr><call><name><name pos:line="1546" pos:column="24">MainFileManager</name><op:operator pos:line="1546" pos:column="39">-&gt;</op:operator><name pos:line="1546" pos:column="41">getBufferByID</name></name><argument_list pos:line="1546" pos:column="54">(<argument><expr><name pos:line="1546" pos:column="55">_currentBufferID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1547" pos:column="9">Position</name> <type:modifier pos:line="1547" pos:column="18">&amp;</type:modifier></type> <name pos:line="1547" pos:column="20">pos</name> <init pos:line="1547" pos:column="24">= <expr><call><name><name pos:line="1547" pos:column="26">buf</name><op:operator pos:line="1547" pos:column="29">-&gt;</op:operator><name pos:line="1547" pos:column="31">getPosition</name></name><argument_list pos:line="1547" pos:column="42">(<argument><expr><name pos:line="1547" pos:column="43">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="1549" pos:column="9">execute</name><argument_list pos:line="1549" pos:column="16">(<argument><expr><name pos:line="1549" pos:column="17">SCI_GOTOPOS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1549" pos:column="30">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="1549" pos:column="41">//make sure first line visible by setting caret there, will scroll to top of document</comment>

	<expr_stmt><expr><call><name pos:line="1551" pos:column="9">execute</name><argument_list pos:line="1551" pos:column="16">(<argument><expr><name pos:line="1551" pos:column="17">SCI_SETSELECTIONMODE</name></expr></argument>, <argument><expr><name><name pos:line="1551" pos:column="39">pos</name><op:operator pos:line="1551" pos:column="42">.</op:operator><name pos:line="1551" pos:column="43">_selMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="1551" pos:column="57">//enable</comment>
	<expr_stmt><expr><call><name pos:line="1552" pos:column="9">execute</name><argument_list pos:line="1552" pos:column="16">(<argument><expr><name pos:line="1552" pos:column="17">SCI_SETANCHOR</name></expr></argument>, <argument><expr><name><name pos:line="1552" pos:column="32">pos</name><op:operator pos:line="1552" pos:column="35">.</op:operator><name pos:line="1552" pos:column="36">_startPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1553" pos:column="9">execute</name><argument_list pos:line="1553" pos:column="16">(<argument><expr><name pos:line="1553" pos:column="17">SCI_SETCURRENTPOS</name></expr></argument>, <argument><expr><name><name pos:line="1553" pos:column="36">pos</name><op:operator pos:line="1553" pos:column="39">.</op:operator><name pos:line="1553" pos:column="40">_endPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1554" pos:column="9">execute</name><argument_list pos:line="1554" pos:column="16">(<argument><expr><name pos:line="1554" pos:column="17">SCI_CANCEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>							<comment type="line" pos:line="1554" pos:column="81">//disable</comment>
	<if pos:line="1555" pos:column="9">if <condition pos:line="1555" pos:column="12">(<expr><op:operator pos:line="1555" pos:column="13">!</op:operator><call><name pos:line="1555" pos:column="14">isWrap</name><argument_list pos:line="1555" pos:column="20">()</argument_list></call></expr>)</condition><then pos:line="1555" pos:column="23"> <block pos:line="1555" pos:column="24">{	<comment type="line" pos:line="1555" pos:column="33">//only offset if not wrapping, otherwise the offset isnt needed at all</comment>
		<expr_stmt><expr><call><name pos:line="1556" pos:column="17">execute</name><argument_list pos:line="1556" pos:column="24">(<argument><expr><name pos:line="1556" pos:column="25">SCI_SETSCROLLWIDTH</name></expr></argument>, <argument><expr><name><name pos:line="1556" pos:column="45">pos</name><op:operator pos:line="1556" pos:column="48">.</op:operator><name pos:line="1556" pos:column="49">_scrollWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1557" pos:column="17">execute</name><argument_list pos:line="1557" pos:column="24">(<argument><expr><name pos:line="1557" pos:column="25">SCI_SETXOFFSET</name></expr></argument>, <argument><expr><name><name pos:line="1557" pos:column="41">pos</name><op:operator pos:line="1557" pos:column="44">.</op:operator><name pos:line="1557" pos:column="45">_xOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="1559" pos:column="9">execute</name><argument_list pos:line="1559" pos:column="16">(<argument><expr><name pos:line="1559" pos:column="17">SCI_CHOOSECARETX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:line="1559" pos:column="36">// choose current x position</comment>

	<decl_stmt><decl><type><name pos:line="1561" pos:column="9">int</name></type> <name pos:line="1561" pos:column="13">lineToShow</name> <init pos:line="1561" pos:column="24">= <expr><call><name pos:line="1561" pos:column="26">execute</name><argument_list pos:line="1561" pos:column="33">(<argument><expr><name pos:line="1561" pos:column="34">SCI_VISIBLEFROMDOCLINE</name></expr></argument>, <argument><expr><name><name pos:line="1561" pos:column="58">pos</name><op:operator pos:line="1561" pos:column="61">.</op:operator><name pos:line="1561" pos:column="62">_firstVisibleLine</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1562" pos:column="9">scroll</name><argument_list pos:line="1562" pos:column="15">(<argument><expr><lit:literal type="number" pos:line="1562" pos:column="16">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1562" pos:column="19">lineToShow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1565" pos:column="1">void</name></type> <name><name pos:line="1565" pos:column="6">ScintillaEditView</name><op:operator pos:line="1565" pos:column="23">::</op:operator><name pos:line="1565" pos:column="25">restyleBuffer</name></name><parameter_list pos:line="1565" pos:column="38">()</parameter_list> <block pos:line="1565" pos:column="41">{
	<expr_stmt><expr><call><name pos:line="1566" pos:column="9">execute</name><argument_list pos:line="1566" pos:column="16">(<argument><expr><name pos:line="1566" pos:column="17">SCI_CLEARDOCUMENTSTYLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1567" pos:column="9">execute</name><argument_list pos:line="1567" pos:column="16">(<argument><expr><name pos:line="1567" pos:column="17">SCI_COLOURISE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1567" pos:column="32">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1567" pos:column="35">-</op:operator><lit:literal type="number" pos:line="1567" pos:column="36">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="1568" pos:column="9">_currentBuffer</name><op:operator pos:line="1568" pos:column="23">-&gt;</op:operator><name pos:line="1568" pos:column="25">setNeedsLexing</name></name><argument_list pos:line="1568" pos:column="39">(<argument><expr><lit:literal type="boolean" pos:line="1568" pos:column="40">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1571" pos:column="1">void</name></type> <name><name pos:line="1571" pos:column="6">ScintillaEditView</name><op:operator pos:line="1571" pos:column="23">::</op:operator><name pos:line="1571" pos:column="25">styleChange</name></name><parameter_list pos:line="1571" pos:column="36">()</parameter_list> <block pos:line="1571" pos:column="39">{
	<expr_stmt><expr><call><name pos:line="1572" pos:column="9">defineDocType</name><argument_list pos:line="1572" pos:column="22">(<argument><expr><call><name><name pos:line="1572" pos:column="23">_currentBuffer</name><op:operator pos:line="1572" pos:column="37">-&gt;</op:operator><name pos:line="1572" pos:column="39">getLangType</name></name><argument_list pos:line="1572" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1573" pos:column="9">restyleBuffer</name><argument_list pos:line="1573" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1576" pos:column="1">void</name></type> <name><name pos:line="1576" pos:column="6">ScintillaEditView</name><op:operator pos:line="1576" pos:column="23">::</op:operator><name pos:line="1576" pos:column="25">activateBuffer</name></name><parameter_list pos:line="1576" pos:column="39">(<param><decl><type><name pos:line="1576" pos:column="40">BufferID</name></type> <name pos:line="1576" pos:column="49">buffer</name></decl></param>)</parameter_list>
<block pos:line="1577" pos:column="1">{
	<if pos:line="1578" pos:column="9">if <condition pos:line="1578" pos:column="12">(<expr><name pos:line="1578" pos:column="13">buffer</name> <op:operator pos:line="1578" pos:column="20">==</op:operator> <name pos:line="1578" pos:column="23">BUFFER_INVALID</name></expr>)</condition><then pos:line="1578" pos:column="38">
		<return pos:line="1579" pos:column="17">return;</return></then></if>
	<if pos:line="1580" pos:column="9">if <condition pos:line="1580" pos:column="12">(<expr><name pos:line="1580" pos:column="13">buffer</name> <op:operator pos:line="1580" pos:column="20">==</op:operator> <name pos:line="1580" pos:column="23">_currentBuffer</name></expr>)</condition><then pos:line="1580" pos:column="38">
		<return pos:line="1581" pos:column="17">return;</return></then></if>
	<decl_stmt><decl><type><name pos:line="1582" pos:column="9">Buffer</name> <type:modifier pos:line="1582" pos:column="16">*</type:modifier></type> <name pos:line="1582" pos:column="18">newBuf</name> <init pos:line="1582" pos:column="25">= <expr><call><name><name pos:line="1582" pos:column="27">MainFileManager</name><op:operator pos:line="1582" pos:column="42">-&gt;</op:operator><name pos:line="1582" pos:column="44">getBufferByID</name></name><argument_list pos:line="1582" pos:column="57">(<argument><expr><name pos:line="1582" pos:column="58">buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="1584" pos:column="9">// before activating another document, we get the current position</comment>
	<comment type="line" pos:line="1585" pos:column="9">// from the Scintilla view then save it to the current document</comment>
	<expr_stmt><expr><call><name pos:line="1586" pos:column="9">saveCurrentPos</name><argument_list pos:line="1586" pos:column="23">()</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="1588" pos:column="9">// get foldStateInfo of current doc</comment>
	<decl_stmt><decl><type><name><name pos:line="1589" pos:column="9">std</name><op:operator pos:line="1589" pos:column="12">::</op:operator><name><name pos:line="1589" pos:column="14">vector</name><argument_list pos:line="1589" pos:column="20">&lt;<argument><expr><name pos:line="1589" pos:column="21">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name></type> <name pos:line="1589" pos:column="38">lineStateVector</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1590" pos:column="9">getCurrentFoldStates</name><argument_list pos:line="1590" pos:column="29">(<argument><expr><name pos:line="1590" pos:column="30">lineStateVector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="line" pos:line="1592" pos:column="9">// put the state into the future ex buffer</comment>
	<expr_stmt><expr><call><name><name pos:line="1593" pos:column="9">_currentBuffer</name><op:operator pos:line="1593" pos:column="23">-&gt;</op:operator><name pos:line="1593" pos:column="25">setHeaderLineState</name></name><argument_list pos:line="1593" pos:column="43">(<argument><expr><name pos:line="1593" pos:column="44">lineStateVector</name></expr></argument>, <argument><expr><name pos:line="1593" pos:column="61">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="1595" pos:column="9">_currentBufferID</name> <op:operator pos:line="1595" pos:column="26">=</op:operator> <name pos:line="1595" pos:column="28">buffer</name></expr>;</expr_stmt>	<comment type="line" pos:line="1595" pos:column="41">//the magical switch happens here</comment>
	<expr_stmt><expr><name pos:line="1596" pos:column="9">_currentBuffer</name> <op:operator pos:line="1596" pos:column="24">=</op:operator> <name pos:line="1596" pos:column="26">newBuf</name></expr>;</expr_stmt>
	<comment type="line" pos:line="1597" pos:column="9">// change the doc, this operation will decrease </comment>
	<comment type="line" pos:line="1598" pos:column="9">// the ref count of old current doc and increase the one of the new doc. FileManager should manage the rest</comment>
	<comment type="line" pos:line="1599" pos:column="9">// Note that the actual reference in the Buffer itself is NOT decreased, Notepad_plus does that if neccessary</comment>
	<expr_stmt><expr><call><name pos:line="1600" pos:column="9">execute</name><argument_list pos:line="1600" pos:column="16">(<argument><expr><name pos:line="1600" pos:column="17">SCI_SETDOCPOINTER</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1600" pos:column="36">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1600" pos:column="39">_currentBuffer</name><op:operator pos:line="1600" pos:column="53">-&gt;</op:operator><name pos:line="1600" pos:column="55">getDocument</name></name><argument_list pos:line="1600" pos:column="66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="1602" pos:column="9">// Due to execute(SCI_CLEARDOCUMENTSTYLE); in defineDocType() function</comment>
	<comment type="line" pos:line="1603" pos:column="9">// defineDocType() function should be called here, but not be after the fold info loop</comment>
	<expr_stmt><expr><call><name pos:line="1604" pos:column="9">defineDocType</name><argument_list pos:line="1604" pos:column="22">(<argument><expr><call><name><name pos:line="1604" pos:column="23">_currentBuffer</name><op:operator pos:line="1604" pos:column="37">-&gt;</op:operator><name pos:line="1604" pos:column="39">getLangType</name></name><argument_list pos:line="1604" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="1605" pos:column="5">setTabSettings</name><argument_list pos:line="1605" pos:column="19">(<argument><expr><call><name><name pos:line="1605" pos:column="20">_currentBuffer</name><op:operator pos:line="1605" pos:column="34">-&gt;</op:operator><name pos:line="1605" pos:column="36">getCurrentLang</name></name><argument_list pos:line="1605" pos:column="50">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="1607" pos:column="9">if <condition pos:line="1607" pos:column="12">(<expr><call><name><name pos:line="1607" pos:column="13">_currentBuffer</name><op:operator pos:line="1607" pos:column="27">-&gt;</op:operator><name pos:line="1607" pos:column="29">getNeedsLexing</name></name><argument_list pos:line="1607" pos:column="43">()</argument_list></call></expr>)</condition><then pos:line="1607" pos:column="46"> <block pos:line="1607" pos:column="47">{
		<expr_stmt><expr><call><name pos:line="1608" pos:column="17">restyleBuffer</name><argument_list pos:line="1608" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="1611" pos:column="9">// restore the collapsed info</comment>
	<decl_stmt><decl><type><specifier pos:line="1612" pos:column="9">const</specifier> <name><name pos:line="1612" pos:column="15">std</name><op:operator pos:line="1612" pos:column="18">::</op:operator><name><name pos:line="1612" pos:column="20">vector</name><argument_list pos:line="1612" pos:column="26">&lt;<argument><expr><name pos:line="1612" pos:column="27">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="1612" pos:column="44">&amp;</type:modifier></type> <name pos:line="1612" pos:column="46">lineStateVectorNew</name> <init pos:line="1612" pos:column="65">= <expr><call><name><name pos:line="1612" pos:column="67">newBuf</name><op:operator pos:line="1612" pos:column="73">-&gt;</op:operator><name pos:line="1612" pos:column="75">getHeaderLineState</name></name><argument_list pos:line="1612" pos:column="93">(<argument><expr><name pos:line="1612" pos:column="94">this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1613" pos:column="9">syncFoldStateWith</name><argument_list pos:line="1613" pos:column="26">(<argument><expr><name pos:line="1613" pos:column="27">lineStateVectorNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="1615" pos:column="9">restoreCurrentPos</name><argument_list pos:line="1615" pos:column="26">()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="1617" pos:column="9">bufferUpdated</name><argument_list pos:line="1617" pos:column="22">(<argument><expr><name pos:line="1617" pos:column="23">_currentBuffer</name></expr></argument>, <argument><expr><op:operator pos:line="1617" pos:column="39">(</op:operator><name pos:line="1617" pos:column="40">BufferChangeMask</name> <op:operator pos:line="1617" pos:column="57">&amp;</op:operator> <op:operator pos:line="1617" pos:column="59">~</op:operator><name pos:line="1617" pos:column="60">BufferChangeLanguage</name><op:operator pos:line="1617" pos:column="80">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="1617" pos:column="89">//everything should be updated, but the language (which undoes some operations done here like folding)</comment>

	<comment type="line" pos:line="1619" pos:column="9">//setup line number margin</comment>
	<decl_stmt><decl><type><name pos:line="1620" pos:column="9">int</name></type> <name pos:line="1620" pos:column="13">numLines</name> <init pos:line="1620" pos:column="22">= <expr><call><name pos:line="1620" pos:column="24">execute</name><argument_list pos:line="1620" pos:column="31">(<argument><expr><name pos:line="1620" pos:column="32">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="1622" pos:column="9">char</name></type> <name><name pos:line="1622" pos:column="14">numLineStr</name><index pos:line="1622" pos:column="24">[<expr><lit:literal type="number" pos:line="1622" pos:column="25">32</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1623" pos:column="9">itoa</name><argument_list pos:line="1623" pos:column="13">(<argument><expr><name pos:line="1623" pos:column="14">numLines</name></expr></argument>, <argument><expr><name pos:line="1623" pos:column="24">numLineStr</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1623" pos:column="36">10</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="1625" pos:column="9">runMarkers</name><argument_list pos:line="1625" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="1625" pos:column="20">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1625" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1625" pos:column="29">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1625" pos:column="35">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:line="1626" pos:column="5">return;</return>	<comment type="line" pos:line="1626" pos:column="17">//all done</comment>
}</block></function>

<function><type><name pos:line="1629" pos:column="1">void</name></type> <name><name pos:line="1629" pos:column="6">ScintillaEditView</name><op:operator pos:line="1629" pos:column="23">::</op:operator><name pos:line="1629" pos:column="25">getCurrentFoldStates</name></name><parameter_list pos:line="1629" pos:column="45">(<param><decl><type><name><name pos:line="1629" pos:column="46">std</name><op:operator pos:line="1629" pos:column="49">::</op:operator><name><name pos:line="1629" pos:column="51">vector</name><argument_list pos:line="1629" pos:column="57">&lt;<argument><expr><name pos:line="1629" pos:column="58">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="1629" pos:column="75">&amp;</type:modifier></type> <name pos:line="1629" pos:column="77">lineStateVector</name></decl></param>)</parameter_list>
<block pos:line="1630" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1631" pos:column="9">int</name></type> <name pos:line="1631" pos:column="13">maxLine</name> <init pos:line="1631" pos:column="21">= <expr><call><name pos:line="1631" pos:column="23">execute</name><argument_list pos:line="1631" pos:column="30">(<argument><expr><name pos:line="1631" pos:column="31">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for pos:line="1633" pos:column="9">for (<init><decl><type><name pos:line="1633" pos:column="14">int</name></type> <name pos:line="1633" pos:column="18">line</name> <init pos:line="1633" pos:column="23">= <expr><lit:literal type="number" pos:line="1633" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1633" pos:column="28">line</name> <op:operator pos:line="1633" pos:column="33">&lt;</op:operator> <name pos:line="1633" pos:column="35">maxLine</name></expr>;</condition> <incr><expr><name pos:line="1633" pos:column="44">line</name><op:operator pos:line="1633" pos:column="48">++</op:operator></expr></incr>) 
	<block pos:line="1634" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1635" pos:column="17">int</name></type> <name pos:line="1635" pos:column="21">level</name> <init pos:line="1635" pos:column="27">= <expr><call><name pos:line="1635" pos:column="29">execute</name><argument_list pos:line="1635" pos:column="36">(<argument><expr><name pos:line="1635" pos:column="37">SCI_GETFOLDLEVEL</name></expr></argument>, <argument><expr><name pos:line="1635" pos:column="55">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1636" pos:column="17">if <condition pos:line="1636" pos:column="20">(<expr><name pos:line="1636" pos:column="21">level</name> <op:operator pos:line="1636" pos:column="27">&amp;</op:operator> <name pos:line="1636" pos:column="29">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="1636" pos:column="52"> 
		<block pos:line="1637" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="1638" pos:column="25">bool</name></type> <name pos:line="1638" pos:column="30">expanded</name> <init pos:line="1638" pos:column="39">= <expr><op:operator pos:line="1638" pos:column="41">(</op:operator><call><name pos:line="1638" pos:column="42">execute</name><argument_list pos:line="1638" pos:column="49">(<argument><expr><name pos:line="1638" pos:column="50">SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="1638" pos:column="71">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="1638" pos:column="77">!=</op:operator> <lit:literal type="number" pos:line="1638" pos:column="80">0</lit:literal><op:operator pos:line="1638" pos:column="81">)</op:operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="1639" pos:column="25">lineStateVector</name><op:operator pos:line="1639" pos:column="40">.</op:operator><name pos:line="1639" pos:column="41">push_back</name></name><argument_list pos:line="1639" pos:column="50">(<argument><expr><call><name pos:line="1639" pos:column="51">HeaderLineState</name><argument_list pos:line="1639" pos:column="66">(<argument><expr><name pos:line="1639" pos:column="67">line</name></expr></argument>, <argument><expr><name pos:line="1639" pos:column="73">expanded</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="1644" pos:column="1">void</name></type> <name><name pos:line="1644" pos:column="6">ScintillaEditView</name><op:operator pos:line="1644" pos:column="23">::</op:operator><name pos:line="1644" pos:column="25">syncFoldStateWith</name></name><parameter_list pos:line="1644" pos:column="42">(<param><decl><type><specifier pos:line="1644" pos:column="43">const</specifier> <name><name pos:line="1644" pos:column="49">std</name><op:operator pos:line="1644" pos:column="52">::</op:operator><name><name pos:line="1644" pos:column="54">vector</name><argument_list pos:line="1644" pos:column="60">&lt;<argument><expr><name pos:line="1644" pos:column="61">HeaderLineState</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="1644" pos:column="78">&amp;</type:modifier></type> <name pos:line="1644" pos:column="80">lineStateVectorNew</name></decl></param>)</parameter_list>
<block pos:line="1645" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1646" pos:column="9">int</name></type> <name pos:line="1646" pos:column="13">nbLineState</name> <init pos:line="1646" pos:column="25">= <expr><call><name><name pos:line="1646" pos:column="27">lineStateVectorNew</name><op:operator pos:line="1646" pos:column="45">.</op:operator><name pos:line="1646" pos:column="46">size</name></name><argument_list pos:line="1646" pos:column="50">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="1647" pos:column="9">for (<init><decl><type><name pos:line="1647" pos:column="14">int</name></type> <name pos:line="1647" pos:column="18">i</name> <init pos:line="1647" pos:column="20">= <expr><lit:literal type="number" pos:line="1647" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="1647" pos:column="26">i</name> <op:operator pos:line="1647" pos:column="28">&lt;</op:operator> <name pos:line="1647" pos:column="30">nbLineState</name></expr> ;</condition> <incr><expr><name pos:line="1647" pos:column="44">i</name><op:operator pos:line="1647" pos:column="45">++</op:operator></expr></incr>)
	<block pos:line="1648" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="1649" pos:column="17">const</specifier> <name pos:line="1649" pos:column="23">HeaderLineState</name> <type:modifier pos:line="1649" pos:column="39">&amp;</type:modifier></type> <name pos:line="1649" pos:column="41">hls</name> <init pos:line="1649" pos:column="45">= <expr><call><name><name pos:line="1649" pos:column="47">lineStateVectorNew</name><op:operator pos:line="1649" pos:column="65">.</op:operator><name pos:line="1649" pos:column="66">at</name></name><argument_list pos:line="1649" pos:column="68">(<argument><expr><name pos:line="1649" pos:column="69">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="1650" pos:column="17">bool</name></type> <name pos:line="1650" pos:column="22">expanded</name> <init pos:line="1650" pos:column="31">= <expr><call><name pos:line="1650" pos:column="33">isFolded</name><argument_list pos:line="1650" pos:column="41">(<argument><expr><name><name pos:line="1650" pos:column="42">hls</name><op:operator pos:line="1650" pos:column="45">.</op:operator><name pos:line="1650" pos:column="46">_headerLineNumber</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="1651" pos:column="17">// set line to state folded</comment>
		<if pos:line="1652" pos:column="17">if <condition pos:line="1652" pos:column="20">(<expr><name><name pos:line="1652" pos:column="21">hls</name><op:operator pos:line="1652" pos:column="24">.</op:operator><name pos:line="1652" pos:column="25">_isExpanded</name></name> <op:operator pos:line="1652" pos:column="37">!=</op:operator> <name pos:line="1652" pos:column="40">expanded</name></expr>)</condition><then pos:line="1652" pos:column="49">
			<expr_stmt><expr><call><name pos:line="1653" pos:column="25">execute</name><argument_list pos:line="1653" pos:column="32">(<argument><expr><name pos:line="1653" pos:column="33">SCI_TOGGLEFOLD</name></expr></argument>, <argument><expr><name><name pos:line="1653" pos:column="49">hls</name><op:operator pos:line="1653" pos:column="52">.</op:operator><name pos:line="1653" pos:column="53">_headerLineNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="1657" pos:column="1">void</name></type> <name><name pos:line="1657" pos:column="6">ScintillaEditView</name><op:operator pos:line="1657" pos:column="23">::</op:operator><name pos:line="1657" pos:column="25">bufferUpdated</name></name><parameter_list pos:line="1657" pos:column="38">(<param><decl><type><name pos:line="1657" pos:column="39">Buffer</name> <type:modifier pos:line="1657" pos:column="46">*</type:modifier></type> <name pos:line="1657" pos:column="48">buffer</name></decl></param>, <param><decl><type><name pos:line="1657" pos:column="56">int</name></type> <name pos:line="1657" pos:column="60">mask</name></decl></param>)</parameter_list>
<block pos:line="1658" pos:column="1">{
	<comment type="line" pos:line="1659" pos:column="9">//actually only care about language and lexing etc</comment>
	<if pos:line="1660" pos:column="9">if <condition pos:line="1660" pos:column="12">(<expr><name pos:line="1660" pos:column="13">buffer</name> <op:operator pos:line="1660" pos:column="20">==</op:operator> <name pos:line="1660" pos:column="23">_currentBuffer</name></expr>)</condition><then pos:line="1660" pos:column="38"> 
	<block pos:line="1661" pos:column="9">{
		<if pos:line="1662" pos:column="17">if <condition pos:line="1662" pos:column="20">(<expr><name pos:line="1662" pos:column="21">mask</name> <op:operator pos:line="1662" pos:column="26">&amp;</op:operator> <name pos:line="1662" pos:column="28">BufferChangeLanguage</name></expr>)</condition><then pos:line="1662" pos:column="49"> 
		<block pos:line="1663" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="1664" pos:column="25">defineDocType</name><argument_list pos:line="1664" pos:column="38">(<argument><expr><call><name><name pos:line="1664" pos:column="39">buffer</name><op:operator pos:line="1664" pos:column="45">-&gt;</op:operator><name pos:line="1664" pos:column="47">getLangType</name></name><argument_list pos:line="1664" pos:column="58">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1665" pos:column="25">foldAll</name><argument_list pos:line="1665" pos:column="32">(<argument><expr><name pos:line="1665" pos:column="33">fold_uncollapse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if pos:line="1668" pos:column="17">if <condition pos:line="1668" pos:column="20">(<expr><name pos:line="1668" pos:column="21">mask</name> <op:operator pos:line="1668" pos:column="26">&amp;</op:operator> <name pos:line="1668" pos:column="28">BufferChangeLexing</name></expr>)</condition><then pos:line="1668" pos:column="47">
		<block pos:line="1669" pos:column="17">{
			<if pos:line="1670" pos:column="25">if <condition pos:line="1670" pos:column="28">(<expr><call><name><name pos:line="1670" pos:column="29">buffer</name><op:operator pos:line="1670" pos:column="35">-&gt;</op:operator><name pos:line="1670" pos:column="37">getNeedsLexing</name></name><argument_list pos:line="1670" pos:column="51">()</argument_list></call></expr>)</condition><then pos:line="1670" pos:column="54">
			<block pos:line="1671" pos:column="25">{
				<expr_stmt><expr><call><name pos:line="1672" pos:column="33">restyleBuffer</name><argument_list pos:line="1672" pos:column="46">()</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="1672" pos:column="57">//sets to false, this will apply to any other view aswell</comment>
			}</block></then></if>	<comment type="line" pos:line="1673" pos:column="33">//else nothing, otherwise infinite loop</comment>
		}</block></then></if>

		<if pos:line="1676" pos:column="17">if <condition pos:line="1676" pos:column="20">(<expr><name pos:line="1676" pos:column="21">mask</name> <op:operator pos:line="1676" pos:column="26">&amp;</op:operator> <name pos:line="1676" pos:column="28">BufferChangeFormat</name></expr>)</condition><then pos:line="1676" pos:column="47"> 
		<block pos:line="1677" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="1678" pos:column="25">execute</name><argument_list pos:line="1678" pos:column="32">(<argument><expr><name pos:line="1678" pos:column="33">SCI_SETEOLMODE</name></expr></argument>, <argument><expr><call><name><name pos:line="1678" pos:column="49">_currentBuffer</name><op:operator pos:line="1678" pos:column="63">-&gt;</op:operator><name pos:line="1678" pos:column="65">getFormat</name></name><argument_list pos:line="1678" pos:column="74">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="1680" pos:column="17">if <condition pos:line="1680" pos:column="20">(<expr><name pos:line="1680" pos:column="21">mask</name> <op:operator pos:line="1680" pos:column="26">&amp;</op:operator> <name pos:line="1680" pos:column="28">BufferChangeReadonly</name></expr>)</condition><then pos:line="1680" pos:column="49"> 
		<block pos:line="1681" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="1682" pos:column="25">execute</name><argument_list pos:line="1682" pos:column="32">(<argument><expr><name pos:line="1682" pos:column="33">SCI_SETREADONLY</name></expr></argument>, <argument><expr><call><name><name pos:line="1682" pos:column="50">_currentBuffer</name><op:operator pos:line="1682" pos:column="64">-&gt;</op:operator><name pos:line="1682" pos:column="66">isReadOnly</name></name><argument_list pos:line="1682" pos:column="76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="1684" pos:column="17">if <condition pos:line="1684" pos:column="20">(<expr><name pos:line="1684" pos:column="21">mask</name> <op:operator pos:line="1684" pos:column="26">&amp;</op:operator> <name pos:line="1684" pos:column="28">BufferChangeUnicode</name></expr>)</condition><then pos:line="1684" pos:column="48"> 
		<block pos:line="1685" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="1686" pos:column="13">int</name></type> <name pos:line="1686" pos:column="17">enc</name> <init pos:line="1686" pos:column="21">= <expr><name pos:line="1686" pos:column="23">CP_ACP</name></expr></init></decl>;</decl_stmt>
			<if pos:line="1687" pos:column="25">if <condition pos:line="1687" pos:column="28">(<expr><call><name><name pos:line="1687" pos:column="29">buffer</name><op:operator pos:line="1687" pos:column="35">-&gt;</op:operator><name pos:line="1687" pos:column="37">getUnicodeMode</name></name><argument_list pos:line="1687" pos:column="51">()</argument_list></call> <op:operator pos:line="1687" pos:column="54">==</op:operator> <name pos:line="1687" pos:column="57">uni8Bit</name></expr>)</condition><then pos:line="1687" pos:column="65"> 
			<block pos:line="1688" pos:column="25">{	<comment type="line" pos:line="1688" pos:column="33">//either 0 or CJK codepage</comment>
				<decl_stmt><decl><type><name pos:line="1689" pos:column="33">LangType</name></type> <name pos:line="1689" pos:column="42">typeDoc</name> <init pos:line="1689" pos:column="50">= <expr><call><name><name pos:line="1689" pos:column="52">buffer</name><op:operator pos:line="1689" pos:column="58">-&gt;</op:operator><name pos:line="1689" pos:column="60">getLangType</name></name><argument_list pos:line="1689" pos:column="71">()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if pos:line="1690" pos:column="33">if <condition pos:line="1690" pos:column="36">(<expr><call><name pos:line="1690" pos:column="37">isCJK</name><argument_list pos:line="1690" pos:column="42">()</argument_list></call></expr>)</condition><then pos:line="1690" pos:column="45">
				<block pos:line="1691" pos:column="33">{
					<if pos:line="1692" pos:column="41">if <condition pos:line="1692" pos:column="44">(<expr><name pos:line="1692" pos:column="45">typeDoc</name> <op:operator pos:line="1692" pos:column="53">==</op:operator> <name pos:line="1692" pos:column="56">L_CSS</name> <op:operator pos:line="1692" pos:column="62">||</op:operator> <name pos:line="1692" pos:column="65">typeDoc</name> <op:operator pos:line="1692" pos:column="73">==</op:operator> <name pos:line="1692" pos:column="76">L_CAML</name> <op:operator pos:line="1692" pos:column="83">||</op:operator> <name pos:line="1692" pos:column="86">typeDoc</name> <op:operator pos:line="1692" pos:column="94">==</op:operator> <name pos:line="1692" pos:column="97">L_ASM</name> <op:operator pos:line="1692" pos:column="103">||</op:operator> <name pos:line="1692" pos:column="106">typeDoc</name> <op:operator pos:line="1692" pos:column="114">==</op:operator> <name pos:line="1692" pos:column="117">L_MATLAB</name></expr>)</condition><then pos:line="1692" pos:column="126">
						<expr_stmt><expr><name pos:line="1693" pos:column="49">enc</name> <op:operator pos:line="1693" pos:column="53">=</op:operator> <name pos:line="1693" pos:column="55">CP_ACP</name></expr>;</expr_stmt></then>	<comment type="line" pos:line="1693" pos:column="65">//you may also want to set charsets here, not yet implemented</comment>
					<else pos:line="1694" pos:column="41">else 
						<expr_stmt><expr><name pos:line="1695" pos:column="49">enc</name> <op:operator pos:line="1695" pos:column="53">=</op:operator> <name pos:line="1695" pos:column="55">_codepage</name></expr>;</expr_stmt></else></if>
				}</block></then>
                <else pos:line="1697" pos:column="17">else
                    <expr_stmt><expr><name pos:line="1698" pos:column="21">enc</name> <op:operator pos:line="1698" pos:column="25">=</op:operator> <name pos:line="1698" pos:column="27">CP_ACP</name></expr>;</expr_stmt></else></if>
			}</block></then> 
			<else pos:line="1700" pos:column="25">else	<comment type="line" pos:line="1700" pos:column="33">//CP UTF8 for all unicode</comment>
				<expr_stmt><expr><name pos:line="1701" pos:column="33">enc</name> <op:operator pos:line="1701" pos:column="37">=</op:operator> <name pos:line="1701" pos:column="39">SC_CP_UTF8</name></expr>;</expr_stmt></else></if>
            <expr_stmt><expr><call><name pos:line="1702" pos:column="13">execute</name><argument_list pos:line="1702" pos:column="20">(<argument><expr><name pos:line="1702" pos:column="21">SCI_SETCODEPAGE</name></expr></argument>, <argument><expr><name pos:line="1702" pos:column="38">enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1707" pos:column="1">void</name></type> <name><name pos:line="1707" pos:column="6">ScintillaEditView</name><op:operator pos:line="1707" pos:column="23">::</op:operator><name pos:line="1707" pos:column="25">collapse</name></name><parameter_list pos:line="1707" pos:column="33">(<param><decl><type><name pos:line="1707" pos:column="34">int</name></type> <name pos:line="1707" pos:column="38">level2Collapse</name></decl></param>, <param><decl><type><name pos:line="1707" pos:column="54">bool</name></type> <name pos:line="1707" pos:column="59">mode</name></decl></param>)</parameter_list>
<block pos:line="1708" pos:column="1">{
	<comment type="line" pos:line="1709" pos:column="9">// The following code is needed :</comment>
	<decl_stmt><decl><type><name pos:line="1710" pos:column="9">int</name></type> <name pos:line="1710" pos:column="13">startPos</name> <init pos:line="1710" pos:column="22">= <expr><lit:literal type="number" pos:line="1710" pos:column="24">0</lit:literal></expr></init><op:operator pos:line="1710" pos:column="25">,</op:operator> <name pos:line="1710" pos:column="27">endPos</name> <init pos:line="1710" pos:column="34">= <expr><op:operator pos:line="1710" pos:column="36">-</op:operator><lit:literal type="number" pos:line="1710" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1711" pos:column="9">getVisibleStartAndEndPosition</name><argument_list pos:line="1711" pos:column="38">(<argument><expr><op:operator pos:line="1711" pos:column="39">&amp;</op:operator><name pos:line="1711" pos:column="40">startPos</name></expr></argument>, <argument><expr><op:operator pos:line="1711" pos:column="50">&amp;</op:operator><name pos:line="1711" pos:column="51">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1712" pos:column="9">execute</name><argument_list pos:line="1712" pos:column="16">(<argument><expr><name pos:line="1712" pos:column="17">SCI_COLOURISE</name></expr></argument>, <argument><expr><name pos:line="1712" pos:column="32">startPos</name></expr></argument>, <argument><expr><name pos:line="1712" pos:column="42">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="1713" pos:column="9">// according to the Scitilla document :</comment>
	<comment type="line" pos:line="1714" pos:column="9">//    This requests the current lexer or the container (if the lexer is set to SCLEX_CONTAINER)</comment>
	<comment type="line" pos:line="1715" pos:column="9">//    to style the document between startPos and endPos. If endPos is -1, the document is styled from startPos to the end.</comment>
	<comment type="line" pos:line="1716" pos:column="9">//    If the "fold" property is set to "1" and your lexer or container supports folding, fold levels are also set.</comment>
	<comment type="line" pos:line="1717" pos:column="9">//    This message causes a redraw.</comment>

	<decl_stmt><decl><type><name pos:line="1719" pos:column="9">int</name></type> <name pos:line="1719" pos:column="13">maxLine</name> <init pos:line="1719" pos:column="21">= <expr><call><name pos:line="1719" pos:column="23">execute</name><argument_list pos:line="1719" pos:column="30">(<argument><expr><name pos:line="1719" pos:column="31">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for pos:line="1721" pos:column="9">for (<init><decl><type><name pos:line="1721" pos:column="14">int</name></type> <name pos:line="1721" pos:column="18">line</name> <init pos:line="1721" pos:column="23">= <expr><lit:literal type="number" pos:line="1721" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1721" pos:column="28">line</name> <op:operator pos:line="1721" pos:column="33">&lt;</op:operator> <name pos:line="1721" pos:column="35">maxLine</name></expr>;</condition> <incr><expr><name pos:line="1721" pos:column="44">line</name><op:operator pos:line="1721" pos:column="48">++</op:operator></expr></incr>) 
	<block pos:line="1722" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1723" pos:column="17">int</name></type> <name pos:line="1723" pos:column="21">level</name> <init pos:line="1723" pos:column="27">= <expr><call><name pos:line="1723" pos:column="29">execute</name><argument_list pos:line="1723" pos:column="36">(<argument><expr><name pos:line="1723" pos:column="37">SCI_GETFOLDLEVEL</name></expr></argument>, <argument><expr><name pos:line="1723" pos:column="55">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1724" pos:column="17">if <condition pos:line="1724" pos:column="20">(<expr><name pos:line="1724" pos:column="21">level</name> <op:operator pos:line="1724" pos:column="27">&amp;</op:operator> <name pos:line="1724" pos:column="29">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="1724" pos:column="52"> 
		<block pos:line="1725" pos:column="17">{
			<expr_stmt><expr><name pos:line="1726" pos:column="25">level</name> <op:operator pos:line="1726" pos:column="31">-=</op:operator> <name pos:line="1726" pos:column="34">SC_FOLDLEVELBASE</name></expr>;</expr_stmt>
			<if pos:line="1727" pos:column="25">if <condition pos:line="1727" pos:column="28">(<expr><name pos:line="1727" pos:column="29">level2Collapse</name> <op:operator pos:line="1727" pos:column="44">==</op:operator> <op:operator pos:line="1727" pos:column="47">(</op:operator><name pos:line="1727" pos:column="48">level</name> <op:operator pos:line="1727" pos:column="54">&amp;</op:operator> <name pos:line="1727" pos:column="56">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="1727" pos:column="78">)</op:operator></expr>)</condition><then pos:line="1727" pos:column="80">
				<if pos:line="1728" pos:column="33">if <condition pos:line="1728" pos:column="36">(<expr><call><name pos:line="1728" pos:column="37">isFolded</name><argument_list pos:line="1728" pos:column="45">(<argument><expr><name pos:line="1728" pos:column="46">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="1728" pos:column="52">!=</op:operator> <name pos:line="1728" pos:column="55">mode</name></expr>)</condition><then pos:line="1728" pos:column="60">
				<block pos:line="1729" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="1730" pos:column="41">fold</name><argument_list pos:line="1730" pos:column="45">(<argument><expr><name pos:line="1730" pos:column="46">line</name></expr></argument>, <argument><expr><name pos:line="1730" pos:column="52">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></then></if>
		}</block></then></if>
	}</block></for>

	<expr_stmt><expr><call><name pos:line="1735" pos:column="9">runMarkers</name><argument_list pos:line="1735" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="1735" pos:column="20">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1735" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1735" pos:column="29">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="1735" pos:column="35">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1738" pos:column="1">void</name></type> <name><name pos:line="1738" pos:column="6">ScintillaEditView</name><op:operator pos:line="1738" pos:column="23">::</op:operator><name pos:line="1738" pos:column="25">foldCurrentPos</name></name><parameter_list pos:line="1738" pos:column="39">(<param><decl><type><name pos:line="1738" pos:column="40">bool</name></type> <name pos:line="1738" pos:column="45">mode</name></decl></param>)</parameter_list>
<block pos:line="1739" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1740" pos:column="9">int</name></type> <name pos:line="1740" pos:column="13">currentLine</name> <init pos:line="1740" pos:column="25">= <expr><call><name><name pos:line="1740" pos:column="27">this</name><op:operator pos:line="1740" pos:column="31">-&gt;</op:operator><name pos:line="1740" pos:column="33">getCurrentLineNumber</name></name><argument_list pos:line="1740" pos:column="53">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1741" pos:column="9">fold</name><argument_list pos:line="1741" pos:column="13">(<argument><expr><name pos:line="1741" pos:column="14">currentLine</name></expr></argument>, <argument><expr><name pos:line="1741" pos:column="27">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1744" pos:column="1">void</name></type> <name><name pos:line="1744" pos:column="6">ScintillaEditView</name><op:operator pos:line="1744" pos:column="23">::</op:operator><name pos:line="1744" pos:column="25">fold</name></name><parameter_list pos:line="1744" pos:column="29">(<param><decl><type><name pos:line="1744" pos:column="30">int</name></type> <name pos:line="1744" pos:column="34">line</name></decl></param>, <param><decl><type><name pos:line="1744" pos:column="40">bool</name></type> <name pos:line="1744" pos:column="45">mode</name></decl></param>)</parameter_list>
<block pos:line="1745" pos:column="1">{
	<comment type="line" pos:line="1746" pos:column="9">// The following code is needed :</comment>
	<decl_stmt><decl><type><name pos:line="1747" pos:column="9">int</name></type> <name pos:line="1747" pos:column="13">startPos</name> <init pos:line="1747" pos:column="22">= <expr><lit:literal type="number" pos:line="1747" pos:column="24">0</lit:literal></expr></init><op:operator pos:line="1747" pos:column="25">,</op:operator> <name pos:line="1747" pos:column="27">endPos</name> <init pos:line="1747" pos:column="34">= <expr><op:operator pos:line="1747" pos:column="36">-</op:operator><lit:literal type="number" pos:line="1747" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1748" pos:column="9">getVisibleStartAndEndPosition</name><argument_list pos:line="1748" pos:column="38">(<argument><expr><op:operator pos:line="1748" pos:column="39">&amp;</op:operator><name pos:line="1748" pos:column="40">startPos</name></expr></argument>, <argument><expr><op:operator pos:line="1748" pos:column="50">&amp;</op:operator><name pos:line="1748" pos:column="51">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1749" pos:column="9">execute</name><argument_list pos:line="1749" pos:column="16">(<argument><expr><name pos:line="1749" pos:column="17">SCI_COLOURISE</name></expr></argument>, <argument><expr><name pos:line="1749" pos:column="32">startPos</name></expr></argument>, <argument><expr><name pos:line="1749" pos:column="42">endPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="1750" pos:column="9">// according to the Scitilla document :</comment>
	<comment type="line" pos:line="1751" pos:column="9">//    This requests the current lexer or the container (if the lexer is set to SCLEX_CONTAINER)</comment>
	<comment type="line" pos:line="1752" pos:column="9">//    to style the document between startPos and endPos. If endPos is -1, the document is styled from startPos to the end.</comment>
	<comment type="line" pos:line="1753" pos:column="9">//    If the "fold" property is set to "1" and your lexer or container supports folding, fold levels are also set.</comment>
	<comment type="line" pos:line="1754" pos:column="9">//    This message causes a redraw.</comment>

	<decl_stmt><decl><type><name pos:line="1756" pos:column="9">int</name></type> <name pos:line="1756" pos:column="13">headerLine</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1757" pos:column="9">int</name></type> <name pos:line="1757" pos:column="13">level</name> <init pos:line="1757" pos:column="19">= <expr><call><name pos:line="1757" pos:column="21">execute</name><argument_list pos:line="1757" pos:column="28">(<argument><expr><name pos:line="1757" pos:column="29">SCI_GETFOLDLEVEL</name></expr></argument>, <argument><expr><name pos:line="1757" pos:column="47">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
	<if pos:line="1759" pos:column="9">if <condition pos:line="1759" pos:column="12">(<expr><name pos:line="1759" pos:column="13">level</name> <op:operator pos:line="1759" pos:column="19">&amp;</op:operator> <name pos:line="1759" pos:column="21">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="1759" pos:column="44">
		<expr_stmt><expr><name pos:line="1760" pos:column="17">headerLine</name> <op:operator pos:line="1760" pos:column="28">=</op:operator> <name pos:line="1760" pos:column="30">line</name></expr>;</expr_stmt></then>
	<else pos:line="1761" pos:column="9">else
	<block pos:line="1762" pos:column="9">{
		<expr_stmt><expr><name pos:line="1763" pos:column="17">headerLine</name> <op:operator pos:line="1763" pos:column="28">=</op:operator> <call><name pos:line="1763" pos:column="30">execute</name><argument_list pos:line="1763" pos:column="37">(<argument><expr><name pos:line="1763" pos:column="38">SCI_GETFOLDPARENT</name></expr></argument>, <argument><expr><name pos:line="1763" pos:column="57">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="1764" pos:column="17">if <condition pos:line="1764" pos:column="20">(<expr><name pos:line="1764" pos:column="21">headerLine</name> <op:operator pos:line="1764" pos:column="32">==</op:operator> <op:operator pos:line="1764" pos:column="35">-</op:operator><lit:literal type="number" pos:line="1764" pos:column="36">1</lit:literal></expr>)</condition><then pos:line="1764" pos:column="38">
			<return pos:line="1765" pos:column="25">return;</return></then></if>
	}</block></else></if>

	<if pos:line="1768" pos:column="9">if <condition pos:line="1768" pos:column="12">(<expr><call><name pos:line="1768" pos:column="13">isFolded</name><argument_list pos:line="1768" pos:column="21">(<argument><expr><name pos:line="1768" pos:column="22">headerLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="1768" pos:column="34">!=</op:operator> <name pos:line="1768" pos:column="37">mode</name></expr>)</condition><then pos:line="1768" pos:column="42">
	<block pos:line="1769" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="1770" pos:column="17">execute</name><argument_list pos:line="1770" pos:column="24">(<argument><expr><name pos:line="1770" pos:column="25">SCI_TOGGLEFOLD</name></expr></argument>, <argument><expr><name pos:line="1770" pos:column="41">headerLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="1772" pos:column="17">SCNotification</name></type> <name pos:line="1772" pos:column="32">scnN</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="1773" pos:column="17">scnN</name><op:operator pos:line="1773" pos:column="21">.</op:operator><name pos:line="1773" pos:column="22">nmhdr</name><op:operator pos:line="1773" pos:column="27">.</op:operator><name pos:line="1773" pos:column="28">code</name></name> <op:operator pos:line="1773" pos:column="33">=</op:operator> <name pos:line="1773" pos:column="35">SCN_FOLDINGSTATECHANGED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1774" pos:column="17">scnN</name><op:operator pos:line="1774" pos:column="21">.</op:operator><name pos:line="1774" pos:column="22">nmhdr</name><op:operator pos:line="1774" pos:column="27">.</op:operator><name pos:line="1774" pos:column="28">hwndFrom</name></name> <op:operator pos:line="1774" pos:column="37">=</op:operator> <name pos:line="1774" pos:column="39">_hSelf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1775" pos:column="17">scnN</name><op:operator pos:line="1775" pos:column="21">.</op:operator><name pos:line="1775" pos:column="22">nmhdr</name><op:operator pos:line="1775" pos:column="27">.</op:operator><name pos:line="1775" pos:column="28">idFrom</name></name> <op:operator pos:line="1775" pos:column="35">=</op:operator> <lit:literal type="number" pos:line="1775" pos:column="37">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1776" pos:column="17">scnN</name><op:operator pos:line="1776" pos:column="21">.</op:operator><name pos:line="1776" pos:column="22">line</name></name> <op:operator pos:line="1776" pos:column="27">=</op:operator> <name pos:line="1776" pos:column="29">headerLine</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="1777" pos:column="17">scnN</name><op:operator pos:line="1777" pos:column="21">.</op:operator><name pos:line="1777" pos:column="22">foldLevelNow</name></name> <op:operator pos:line="1777" pos:column="35">=</op:operator> <call><name pos:line="1777" pos:column="37">isFolded</name><argument_list pos:line="1777" pos:column="45">(<argument><expr><name pos:line="1777" pos:column="46">headerLine</name></expr></argument>)</argument_list></call><op:operator pos:line="1777" pos:column="57">?</op:operator><lit:literal type="number" pos:line="1777" pos:column="58">1</lit:literal><op:operator pos:line="1777" pos:column="59">:</op:operator><lit:literal type="number" pos:line="1777" pos:column="60">0</lit:literal></expr>;</expr_stmt> <comment type="line" pos:line="1777" pos:column="63">//folded:1, unfolded:0</comment>

		<expr_stmt><expr><call><name><op:operator pos:line="1779" pos:column="17">::</op:operator><name pos:line="1779" pos:column="19">SendMessage</name></name><argument_list pos:line="1779" pos:column="30">(<argument><expr><name pos:line="1779" pos:column="31">_hParent</name></expr></argument>, <argument><expr><name pos:line="1779" pos:column="41">WM_NOTIFY</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1779" pos:column="52">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1779" pos:column="55">(</op:operator><name pos:line="1779" pos:column="56">LPARAM</name><op:operator pos:line="1779" pos:column="62">)</op:operator><op:operator pos:line="1779" pos:column="63">&amp;</op:operator><name pos:line="1779" pos:column="64">scnN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="1783" pos:column="1">void</name></type> <name><name pos:line="1783" pos:column="6">ScintillaEditView</name><op:operator pos:line="1783" pos:column="23">::</op:operator><name pos:line="1783" pos:column="25">foldAll</name></name><parameter_list pos:line="1783" pos:column="32">(<param><decl><type><name pos:line="1783" pos:column="33">bool</name></type> <name pos:line="1783" pos:column="38">mode</name></decl></param>)</parameter_list>
<block pos:line="1784" pos:column="1">{
	<comment type="line" pos:line="1785" pos:column="9">// The following code is needed :</comment>
	<comment type="line" pos:line="1786" pos:column="9">//execute(SCI_COLOURISE, 0, -1);</comment>
	<comment type="line" pos:line="1787" pos:column="9">// according to the Scitilla document :</comment>
	<comment type="line" pos:line="1788" pos:column="9">//    This requests the current lexer or the container (if the lexer is set to SCLEX_CONTAINER)</comment>
	<comment type="line" pos:line="1789" pos:column="9">//    to style the document between startPos and endPos. If endPos is -1, the document is styled from startPos to the end.</comment>
	<comment type="line" pos:line="1790" pos:column="9">//    If the "fold" property is set to "1" and your lexer or container supports folding, fold levels are also set.</comment>
	<comment type="line" pos:line="1791" pos:column="9">//    This message causes a redraw.</comment>

	<decl_stmt><decl><type><name pos:line="1793" pos:column="9">int</name></type> <name pos:line="1793" pos:column="13">maxLine</name> <init pos:line="1793" pos:column="21">= <expr><call><name pos:line="1793" pos:column="23">execute</name><argument_list pos:line="1793" pos:column="30">(<argument><expr><name pos:line="1793" pos:column="31">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for pos:line="1795" pos:column="9">for (<init><decl><type><name pos:line="1795" pos:column="14">int</name></type> <name pos:line="1795" pos:column="18">line</name> <init pos:line="1795" pos:column="23">= <expr><lit:literal type="number" pos:line="1795" pos:column="25">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1795" pos:column="28">line</name> <op:operator pos:line="1795" pos:column="33">&lt;</op:operator> <name pos:line="1795" pos:column="35">maxLine</name></expr>;</condition> <incr><expr><name pos:line="1795" pos:column="44">line</name><op:operator pos:line="1795" pos:column="48">++</op:operator></expr></incr>) 
	<block pos:line="1796" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="1797" pos:column="17">int</name></type> <name pos:line="1797" pos:column="21">level</name> <init pos:line="1797" pos:column="27">= <expr><call><name pos:line="1797" pos:column="29">execute</name><argument_list pos:line="1797" pos:column="36">(<argument><expr><name pos:line="1797" pos:column="37">SCI_GETFOLDLEVEL</name></expr></argument>, <argument><expr><name pos:line="1797" pos:column="55">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1798" pos:column="17">if <condition pos:line="1798" pos:column="20">(<expr><name pos:line="1798" pos:column="21">level</name> <op:operator pos:line="1798" pos:column="27">&amp;</op:operator> <name pos:line="1798" pos:column="29">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="1798" pos:column="52"> 
			<if pos:line="1799" pos:column="25">if <condition pos:line="1799" pos:column="28">(<expr><op:operator pos:line="1799" pos:column="29">(</op:operator><call><name pos:line="1799" pos:column="30">execute</name><argument_list pos:line="1799" pos:column="37">(<argument><expr><name pos:line="1799" pos:column="38">SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="1799" pos:column="59">line</name></expr></argument>)</argument_list></call> <op:operator pos:line="1799" pos:column="65">!=</op:operator> <lit:literal type="number" pos:line="1799" pos:column="68">0</lit:literal><op:operator pos:line="1799" pos:column="69">)</op:operator> <op:operator pos:line="1799" pos:column="71">!=</op:operator> <name pos:line="1799" pos:column="74">mode</name></expr>)</condition><then pos:line="1799" pos:column="79">
				<expr_stmt><expr><call><name pos:line="1800" pos:column="33">execute</name><argument_list pos:line="1800" pos:column="40">(<argument><expr><name pos:line="1800" pos:column="41">SCI_TOGGLEFOLD</name></expr></argument>, <argument><expr><name pos:line="1800" pos:column="57">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="1804" pos:column="1">void</name></type> <name><name pos:line="1804" pos:column="6">ScintillaEditView</name><op:operator pos:line="1804" pos:column="23">::</op:operator><name pos:line="1804" pos:column="25">getText</name></name><parameter_list pos:line="1804" pos:column="32">(<param><decl><type><name pos:line="1804" pos:column="33">char</name> <type:modifier pos:line="1804" pos:column="38">*</type:modifier></type><name pos:line="1804" pos:column="39">dest</name></decl></param>, <param><decl><type><name pos:line="1804" pos:column="45">int</name></type> <name pos:line="1804" pos:column="49">start</name></decl></param>, <param><decl><type><name pos:line="1804" pos:column="56">int</name></type> <name pos:line="1804" pos:column="60">end</name></decl></param>)</parameter_list> <specifier pos:line="1804" pos:column="65">const</specifier>
<block pos:line="1805" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1806" pos:column="9">TextRange</name></type> <name pos:line="1806" pos:column="19">tr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="1807" pos:column="9">tr</name><op:operator pos:line="1807" pos:column="11">.</op:operator><name pos:line="1807" pos:column="12">chrg</name><op:operator pos:line="1807" pos:column="16">.</op:operator><name pos:line="1807" pos:column="17">cpMin</name></name> <op:operator pos:line="1807" pos:column="23">=</op:operator> <name pos:line="1807" pos:column="25">start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1808" pos:column="9">tr</name><op:operator pos:line="1808" pos:column="11">.</op:operator><name pos:line="1808" pos:column="12">chrg</name><op:operator pos:line="1808" pos:column="16">.</op:operator><name pos:line="1808" pos:column="17">cpMax</name></name> <op:operator pos:line="1808" pos:column="23">=</op:operator> <name pos:line="1808" pos:column="25">end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1809" pos:column="9">tr</name><op:operator pos:line="1809" pos:column="11">.</op:operator><name pos:line="1809" pos:column="12">lpstrText</name></name> <op:operator pos:line="1809" pos:column="22">=</op:operator> <name pos:line="1809" pos:column="24">dest</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1810" pos:column="9">execute</name><argument_list pos:line="1810" pos:column="16">(<argument><expr><name pos:line="1810" pos:column="17">SCI_GETTEXTRANGE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1810" pos:column="35">0</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="1810" pos:column="38">reinterpret_cast</name><argument_list pos:line="1810" pos:column="54">&lt;<argument><expr><name pos:line="1810" pos:column="55">LPARAM</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="1810" pos:column="62">(<argument><expr><op:operator pos:line="1810" pos:column="63">&amp;</op:operator><name pos:line="1810" pos:column="64">tr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1813" pos:column="1">void</name></type> <name><name pos:line="1813" pos:column="6">ScintillaEditView</name><op:operator pos:line="1813" pos:column="23">::</op:operator><name pos:line="1813" pos:column="25">getGenericText</name></name><parameter_list pos:line="1813" pos:column="39">(<param><decl><type><name pos:line="1813" pos:column="40">TCHAR</name> <type:modifier pos:line="1813" pos:column="46">*</type:modifier></type><name pos:line="1813" pos:column="47">dest</name></decl></param>, <param><decl><type><name pos:line="1813" pos:column="53">size_t</name></type> <name pos:line="1813" pos:column="60">destlen</name></decl></param>, <param><decl><type><name pos:line="1813" pos:column="69">int</name></type> <name pos:line="1813" pos:column="73">start</name></decl></param>, <param><decl><type><name pos:line="1813" pos:column="80">int</name></type> <name pos:line="1813" pos:column="84">end</name></decl></param>)</parameter_list> <specifier pos:line="1813" pos:column="89">const</specifier>
<block pos:line="1814" pos:column="1">{
<cpp:ifdef pos:line="1815" pos:column="1">#<cpp:directive pos:line="1815" pos:column="2">ifdef</cpp:directive> <name pos:line="1815" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1816" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1816" pos:column="28">*</type:modifier></type><name pos:line="1816" pos:column="29">wmc</name> <init pos:line="1816" pos:column="33">= <expr><call><name><name pos:line="1816" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1816" pos:column="53">::</op:operator><name pos:line="1816" pos:column="55">getInstance</name></name><argument_list pos:line="1816" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1817" pos:column="9">char</name> <type:modifier pos:line="1817" pos:column="14">*</type:modifier></type><name pos:line="1817" pos:column="15">destA</name> <init pos:line="1817" pos:column="21">= <expr><op:operator pos:line="1817" pos:column="23">new</op:operator> <name><name pos:line="1817" pos:column="27">char</name><index pos:line="1817" pos:column="31">[<expr><name pos:line="1817" pos:column="32">end</name> <op:operator pos:line="1817" pos:column="36">-</op:operator> <name pos:line="1817" pos:column="38">start</name> <op:operator pos:line="1817" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="1817" pos:column="46">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1818" pos:column="9">getText</name><argument_list pos:line="1818" pos:column="16">(<argument><expr><name pos:line="1818" pos:column="17">destA</name></expr></argument>, <argument><expr><name pos:line="1818" pos:column="24">start</name></expr></argument>, <argument><expr><name pos:line="1818" pos:column="31">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1819" pos:column="9">unsigned</name> <name pos:line="1819" pos:column="18">int</name></type> <name pos:line="1819" pos:column="22">cp</name> <init pos:line="1819" pos:column="25">= <expr><call><name pos:line="1819" pos:column="27">execute</name><argument_list pos:line="1819" pos:column="34">(<argument><expr><name pos:line="1819" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="1820" pos:column="9">const</specifier> <name pos:line="1820" pos:column="15">TCHAR</name> <type:modifier pos:line="1820" pos:column="21">*</type:modifier></type><name pos:line="1820" pos:column="22">destW</name> <init pos:line="1820" pos:column="28">= <expr><call><name><name pos:line="1820" pos:column="30">wmc</name><op:operator pos:line="1820" pos:column="33">-&gt;</op:operator><name pos:line="1820" pos:column="35">char2wchar</name></name><argument_list pos:line="1820" pos:column="45">(<argument><expr><name pos:line="1820" pos:column="46">destA</name></expr></argument>, <argument><expr><name pos:line="1820" pos:column="53">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1821" pos:column="9">_tcsncpy_s</name><argument_list pos:line="1821" pos:column="19">(<argument><expr><name pos:line="1821" pos:column="20">dest</name></expr></argument>, <argument><expr><name pos:line="1821" pos:column="26">destlen</name></expr></argument>, <argument><expr><name pos:line="1821" pos:column="35">destW</name></expr></argument>, <argument><expr><name pos:line="1821" pos:column="42">_TRUNCATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="1822" pos:column="9">delete</op:operator> <index pos:line="1822" pos:column="16">[]</index> <name pos:line="1822" pos:column="19">destA</name></expr>;</expr_stmt>
<cpp:else pos:line="1823" pos:column="1">#<cpp:directive pos:line="1823" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="1824" pos:column="9">getText</name><argument_list pos:line="1824" pos:column="16">(<argument><expr><name pos:line="1824" pos:column="17">dest</name></expr></argument>, <argument><expr><name pos:line="1824" pos:column="23">start</name></expr></argument>, <argument><expr><name pos:line="1824" pos:column="30">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1825" pos:column="1">#<cpp:directive pos:line="1825" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="line" pos:line="1828" pos:column="1">// "mstart" and "mend" are pointers to indexes in the read string,</comment>
<comment type="line" pos:line="1829" pos:column="1">// which are converted to the corresponding indexes in the returned TCHAR string.</comment>

<cpp:ifdef pos:line="1831" pos:column="1">#<cpp:directive pos:line="1831" pos:column="2">ifdef</cpp:directive> <name pos:line="1831" pos:column="8">UNICODE</name></cpp:ifdef>
<function><type><name pos:line="1832" pos:column="1">void</name></type> <name><name pos:line="1832" pos:column="6">ScintillaEditView</name><op:operator pos:line="1832" pos:column="23">::</op:operator><name pos:line="1832" pos:column="25">getGenericText</name></name><parameter_list pos:line="1832" pos:column="39">(<param><decl><type><name pos:line="1832" pos:column="40">TCHAR</name> <type:modifier pos:line="1832" pos:column="46">*</type:modifier></type><name pos:line="1832" pos:column="47">dest</name></decl></param>, <param><decl><type><name pos:line="1832" pos:column="53">size_t</name></type> <name pos:line="1832" pos:column="60">destlen</name></decl></param>, <param><decl><type><name pos:line="1832" pos:column="69">int</name></type> <name pos:line="1832" pos:column="73">start</name></decl></param>, <param><decl><type><name pos:line="1832" pos:column="80">int</name></type> <name pos:line="1832" pos:column="84">end</name></decl></param>, <param><decl><type><name pos:line="1832" pos:column="89">int</name> <type:modifier pos:line="1832" pos:column="93">*</type:modifier></type><name pos:line="1832" pos:column="94">mstart</name></decl></param>, <param><decl><type><name pos:line="1832" pos:column="102">int</name> <type:modifier pos:line="1832" pos:column="106">*</type:modifier></type><name pos:line="1832" pos:column="107">mend</name></decl></param>)</parameter_list> <specifier pos:line="1832" pos:column="113">const</specifier>
<block pos:line="1833" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="1834" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1834" pos:column="28">*</type:modifier></type><name pos:line="1834" pos:column="29">wmc</name> <init pos:line="1834" pos:column="33">= <expr><call><name><name pos:line="1834" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1834" pos:column="53">::</op:operator><name pos:line="1834" pos:column="55">getInstance</name></name><argument_list pos:line="1834" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1835" pos:column="9">char</name> <type:modifier pos:line="1835" pos:column="14">*</type:modifier></type><name pos:line="1835" pos:column="15">destA</name> <init pos:line="1835" pos:column="21">= <expr><op:operator pos:line="1835" pos:column="23">new</op:operator> <name><name pos:line="1835" pos:column="27">char</name><index pos:line="1835" pos:column="31">[<expr><name pos:line="1835" pos:column="32">end</name> <op:operator pos:line="1835" pos:column="36">-</op:operator> <name pos:line="1835" pos:column="38">start</name> <op:operator pos:line="1835" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="1835" pos:column="46">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1836" pos:column="9">getText</name><argument_list pos:line="1836" pos:column="16">(<argument><expr><name pos:line="1836" pos:column="17">destA</name></expr></argument>, <argument><expr><name pos:line="1836" pos:column="24">start</name></expr></argument>, <argument><expr><name pos:line="1836" pos:column="31">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1837" pos:column="9">unsigned</name> <name pos:line="1837" pos:column="18">int</name></type> <name pos:line="1837" pos:column="22">cp</name> <init pos:line="1837" pos:column="25">= <expr><call><name pos:line="1837" pos:column="27">execute</name><argument_list pos:line="1837" pos:column="34">(<argument><expr><name pos:line="1837" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="1838" pos:column="9">const</specifier> <name pos:line="1838" pos:column="15">TCHAR</name> <type:modifier pos:line="1838" pos:column="21">*</type:modifier></type><name pos:line="1838" pos:column="22">destW</name> <init pos:line="1838" pos:column="28">= <expr><call><name><name pos:line="1838" pos:column="30">wmc</name><op:operator pos:line="1838" pos:column="33">-&gt;</op:operator><name pos:line="1838" pos:column="35">char2wchar</name></name><argument_list pos:line="1838" pos:column="45">(<argument><expr><name pos:line="1838" pos:column="46">destA</name></expr></argument>, <argument><expr><name pos:line="1838" pos:column="53">cp</name></expr></argument>, <argument><expr><name pos:line="1838" pos:column="57">mstart</name></expr></argument>, <argument><expr><name pos:line="1838" pos:column="65">mend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1839" pos:column="9">_tcsncpy_s</name><argument_list pos:line="1839" pos:column="19">(<argument><expr><name pos:line="1839" pos:column="20">dest</name></expr></argument>, <argument><expr><name pos:line="1839" pos:column="26">destlen</name></expr></argument>, <argument><expr><name pos:line="1839" pos:column="35">destW</name></expr></argument>, <argument><expr><name pos:line="1839" pos:column="42">_TRUNCATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="1840" pos:column="9">delete</op:operator> <index pos:line="1840" pos:column="16">[]</index> <name pos:line="1840" pos:column="19">destA</name></expr>;</expr_stmt>
}</block></function>
<cpp:else pos:line="1842" pos:column="1">#<cpp:directive pos:line="1842" pos:column="2">else</cpp:directive></cpp:else>
<function><type><name pos:line="1843" pos:column="1">void</name></type> <name><name pos:line="1843" pos:column="6">ScintillaEditView</name><op:operator pos:line="1843" pos:column="23">::</op:operator><name pos:line="1843" pos:column="25">getGenericText</name></name><parameter_list pos:line="1843" pos:column="39">(<param><decl><type><name pos:line="1843" pos:column="40">TCHAR</name> <type:modifier pos:line="1843" pos:column="46">*</type:modifier></type><name pos:line="1843" pos:column="47">dest</name></decl></param>, <param><decl><type><name pos:line="1843" pos:column="53">int</name></type> <name pos:line="1843" pos:column="57">start</name></decl></param>, <param><decl><type><name pos:line="1843" pos:column="64">int</name></type> <name pos:line="1843" pos:column="68">end</name></decl></param>, <param><decl><type><name pos:line="1843" pos:column="73">int</name> <type:modifier pos:line="1843" pos:column="77">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="1843" pos:column="80">int</name> <type:modifier pos:line="1843" pos:column="84">*</type:modifier></type></decl></param>)</parameter_list> <specifier pos:line="1843" pos:column="87">const</specifier>
<block pos:line="1844" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1845" pos:column="9">getText</name><argument_list pos:line="1845" pos:column="16">(<argument><expr><name pos:line="1845" pos:column="17">dest</name></expr></argument>, <argument><expr><name pos:line="1845" pos:column="23">start</name></expr></argument>, <argument><expr><name pos:line="1845" pos:column="30">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif pos:line="1847" pos:column="1">#<cpp:directive pos:line="1847" pos:column="2">endif</cpp:directive></cpp:endif>


<function><type><name pos:line="1850" pos:column="1">void</name></type> <name><name pos:line="1850" pos:column="6">ScintillaEditView</name><op:operator pos:line="1850" pos:column="23">::</op:operator><name pos:line="1850" pos:column="25">insertGenericTextFrom</name></name><parameter_list pos:line="1850" pos:column="46">(<param><decl><type><name pos:line="1850" pos:column="47">int</name></type> <name pos:line="1850" pos:column="51">position</name></decl></param>, <param><decl><type><specifier pos:line="1850" pos:column="61">const</specifier> <name pos:line="1850" pos:column="67">TCHAR</name> <type:modifier pos:line="1850" pos:column="73">*</type:modifier></type><name pos:line="1850" pos:column="74">text2insert</name></decl></param>)</parameter_list> <specifier pos:line="1850" pos:column="87">const</specifier>
<block pos:line="1851" pos:column="1">{
<cpp:ifdef pos:line="1852" pos:column="1">#<cpp:directive pos:line="1852" pos:column="2">ifdef</cpp:directive> <name pos:line="1852" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1853" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1853" pos:column="28">*</type:modifier></type><name pos:line="1853" pos:column="29">wmc</name> <init pos:line="1853" pos:column="33">= <expr><call><name><name pos:line="1853" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1853" pos:column="53">::</op:operator><name pos:line="1853" pos:column="55">getInstance</name></name><argument_list pos:line="1853" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1854" pos:column="9">unsigned</name> <name pos:line="1854" pos:column="18">int</name></type> <name pos:line="1854" pos:column="22">cp</name> <init pos:line="1854" pos:column="25">= <expr><call><name pos:line="1854" pos:column="27">execute</name><argument_list pos:line="1854" pos:column="34">(<argument><expr><name pos:line="1854" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="1855" pos:column="9">const</specifier> <name pos:line="1855" pos:column="15">char</name> <type:modifier pos:line="1855" pos:column="20">*</type:modifier></type><name pos:line="1855" pos:column="21">text2insertA</name> <init pos:line="1855" pos:column="34">= <expr><call><name><name pos:line="1855" pos:column="36">wmc</name><op:operator pos:line="1855" pos:column="39">-&gt;</op:operator><name pos:line="1855" pos:column="41">wchar2char</name></name><argument_list pos:line="1855" pos:column="51">(<argument><expr><name pos:line="1855" pos:column="52">text2insert</name></expr></argument>, <argument><expr><name pos:line="1855" pos:column="65">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1856" pos:column="9">execute</name><argument_list pos:line="1856" pos:column="16">(<argument><expr><name pos:line="1856" pos:column="17">SCI_INSERTTEXT</name></expr></argument>, <argument><expr><name pos:line="1856" pos:column="33">position</name></expr></argument>, <argument><expr><op:operator pos:line="1856" pos:column="43">(</op:operator><name pos:line="1856" pos:column="44">WPARAM</name><op:operator pos:line="1856" pos:column="50">)</op:operator><name pos:line="1856" pos:column="51">text2insertA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1857" pos:column="1">#<cpp:directive pos:line="1857" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="1858" pos:column="9">execute</name><argument_list pos:line="1858" pos:column="16">(<argument><expr><name pos:line="1858" pos:column="17">SCI_INSERTTEXT</name></expr></argument>, <argument><expr><name pos:line="1858" pos:column="33">position</name></expr></argument>, <argument><expr><op:operator pos:line="1858" pos:column="43">(</op:operator><name pos:line="1858" pos:column="44">WPARAM</name><op:operator pos:line="1858" pos:column="50">)</op:operator><name pos:line="1858" pos:column="51">text2insert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1859" pos:column="1">#<cpp:directive pos:line="1859" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1862" pos:column="1">void</name></type> <name><name pos:line="1862" pos:column="6">ScintillaEditView</name><op:operator pos:line="1862" pos:column="23">::</op:operator><name pos:line="1862" pos:column="25">replaceSelWith</name></name><parameter_list pos:line="1862" pos:column="39">(<param><decl><type><specifier pos:line="1862" pos:column="40">const</specifier> <name pos:line="1862" pos:column="46">char</name> <type:modifier pos:line="1862" pos:column="51">*</type:modifier></type> <name pos:line="1862" pos:column="53">replaceText</name></decl></param>)</parameter_list>
<block pos:line="1863" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1864" pos:column="9">execute</name><argument_list pos:line="1864" pos:column="16">(<argument><expr><name pos:line="1864" pos:column="17">SCI_REPLACESEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1864" pos:column="33">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="1864" pos:column="36">(</op:operator><name pos:line="1864" pos:column="37">WPARAM</name><op:operator pos:line="1864" pos:column="43">)</op:operator><name pos:line="1864" pos:column="44">replaceText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1867" pos:column="1">void</name></type> <name><name pos:line="1867" pos:column="6">ScintillaEditView</name><op:operator pos:line="1867" pos:column="23">::</op:operator><name pos:line="1867" pos:column="25">getVisibleStartAndEndPosition</name></name><parameter_list pos:line="1867" pos:column="54">(<param><decl><type><name pos:line="1867" pos:column="55">int</name> <type:modifier pos:line="1867" pos:column="59">*</type:modifier></type> <name pos:line="1867" pos:column="61">startPos</name></decl></param>, <param><decl><type><name pos:line="1867" pos:column="71">int</name> <type:modifier pos:line="1867" pos:column="75">*</type:modifier></type> <name pos:line="1867" pos:column="77">endPos</name></decl></param>)</parameter_list>
<block pos:line="1868" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1869" pos:column="9">assert</name><argument_list pos:line="1869" pos:column="15">(<argument><expr><name pos:line="1869" pos:column="16">startPos</name> <op:operator pos:line="1869" pos:column="25">!=</op:operator> <name pos:line="1869" pos:column="28">NULL</name> <op:operator pos:line="1869" pos:column="33">&amp;&amp;</op:operator> <name pos:line="1869" pos:column="36">endPos</name> <op:operator pos:line="1869" pos:column="43">!=</op:operator> <name pos:line="1869" pos:column="46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="1871" pos:column="9">int</name></type> <name pos:line="1871" pos:column="13">firstVisibleLine</name> <init pos:line="1871" pos:column="30">= <expr><call><name pos:line="1871" pos:column="32">execute</name><argument_list pos:line="1871" pos:column="39">(<argument><expr><name pos:line="1871" pos:column="40">SCI_GETFIRSTVISIBLELINE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="1872" pos:column="9">*</op:operator><name pos:line="1872" pos:column="10">startPos</name> <op:operator pos:line="1872" pos:column="19">=</op:operator> <call><name pos:line="1872" pos:column="21">execute</name><argument_list pos:line="1872" pos:column="28">(<argument><expr><name pos:line="1872" pos:column="29">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><call><name pos:line="1872" pos:column="51">execute</name><argument_list pos:line="1872" pos:column="58">(<argument><expr><name pos:line="1872" pos:column="59">SCI_DOCLINEFROMVISIBLE</name></expr></argument>, <argument><expr><name pos:line="1872" pos:column="83">firstVisibleLine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="1873" pos:column="9">int</name></type> <name pos:line="1873" pos:column="13">linesOnScreen</name> <init pos:line="1873" pos:column="27">= <expr><call><name pos:line="1873" pos:column="29">execute</name><argument_list pos:line="1873" pos:column="36">(<argument><expr><name pos:line="1873" pos:column="37">SCI_LINESONSCREEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1874" pos:column="9">int</name></type> <name pos:line="1874" pos:column="13">lineCount</name> <init pos:line="1874" pos:column="23">= <expr><call><name pos:line="1874" pos:column="25">execute</name><argument_list pos:line="1874" pos:column="32">(<argument><expr><name pos:line="1874" pos:column="33">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><op:operator pos:line="1875" pos:column="9">*</op:operator><name pos:line="1875" pos:column="10">endPos</name> <op:operator pos:line="1875" pos:column="17">=</op:operator> <call><name pos:line="1875" pos:column="19">execute</name><argument_list pos:line="1875" pos:column="26">(<argument><expr><name pos:line="1875" pos:column="27">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><call><name pos:line="1875" pos:column="49">execute</name><argument_list pos:line="1875" pos:column="56">(<argument><expr><name pos:line="1875" pos:column="57">SCI_DOCLINEFROMVISIBLE</name></expr></argument>, <argument><expr><name pos:line="1875" pos:column="81">firstVisibleLine</name> <op:operator pos:line="1875" pos:column="98">+</op:operator> <call><name pos:line="1875" pos:column="100">min</name><argument_list pos:line="1875" pos:column="103">(<argument><expr><name pos:line="1875" pos:column="104">linesOnScreen</name></expr></argument>, <argument><expr><name pos:line="1875" pos:column="119">lineCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="1878" pos:column="1">char</name> <type:modifier pos:line="1878" pos:column="6">*</type:modifier></type> <name><name pos:line="1878" pos:column="8">ScintillaEditView</name><op:operator pos:line="1878" pos:column="25">::</op:operator><name pos:line="1878" pos:column="27">getWordFromRange</name></name><parameter_list pos:line="1878" pos:column="43">(<param><decl><type><name pos:line="1878" pos:column="44">char</name> <type:modifier pos:line="1878" pos:column="49">*</type:modifier></type> <name pos:line="1878" pos:column="51">txt</name></decl></param>, <param><decl><type><name pos:line="1878" pos:column="56">int</name></type> <name pos:line="1878" pos:column="60">size</name></decl></param>, <param><decl><type><name pos:line="1878" pos:column="66">int</name></type> <name pos:line="1878" pos:column="70">pos1</name></decl></param>, <param><decl><type><name pos:line="1878" pos:column="76">int</name></type> <name pos:line="1878" pos:column="80">pos2</name></decl></param>)</parameter_list>
<block pos:line="1879" pos:column="1">{
    <if pos:line="1880" pos:column="5">if <condition pos:line="1880" pos:column="8">(<expr><op:operator pos:line="1880" pos:column="9">!</op:operator><name pos:line="1880" pos:column="10">size</name></expr>)</condition><then pos:line="1880" pos:column="15">
		<return pos:line="1881" pos:column="17">return <expr><name pos:line="1881" pos:column="24">NULL</name></expr>;</return></then></if>
    <if pos:line="1882" pos:column="5">if <condition pos:line="1882" pos:column="8">(<expr><name pos:line="1882" pos:column="9">pos1</name> <op:operator pos:line="1882" pos:column="14">&gt;</op:operator> <name pos:line="1882" pos:column="16">pos2</name></expr>)</condition><then pos:line="1882" pos:column="21">
    <block pos:line="1883" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="1884" pos:column="9">int</name></type> <name pos:line="1884" pos:column="13">tmp</name> <init pos:line="1884" pos:column="17">= <expr><name pos:line="1884" pos:column="19">pos1</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="1885" pos:column="9">pos1</name> <op:operator pos:line="1885" pos:column="14">=</op:operator> <name pos:line="1885" pos:column="16">pos2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name pos:line="1886" pos:column="9">pos2</name> <op:operator pos:line="1886" pos:column="14">=</op:operator> <name pos:line="1886" pos:column="16">tmp</name></expr>;</expr_stmt>
    }</block></then></if>

    <if pos:line="1889" pos:column="5">if <condition pos:line="1889" pos:column="8">(<expr><name pos:line="1889" pos:column="9">size</name> <op:operator pos:line="1889" pos:column="14">&lt;</op:operator> <name pos:line="1889" pos:column="16">pos2</name><op:operator pos:line="1889" pos:column="20">-</op:operator><name pos:line="1889" pos:column="21">pos1</name></expr>)</condition><then pos:line="1889" pos:column="26">
        <return pos:line="1890" pos:column="9">return <expr><name pos:line="1890" pos:column="16">NULL</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name pos:line="1892" pos:column="5">getText</name><argument_list pos:line="1892" pos:column="12">(<argument><expr><name pos:line="1892" pos:column="13">txt</name></expr></argument>, <argument><expr><name pos:line="1892" pos:column="18">pos1</name></expr></argument>, <argument><expr><name pos:line="1892" pos:column="24">pos2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1893" pos:column="9">return <expr><name pos:line="1893" pos:column="16">txt</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1896" pos:column="1">char</name> <type:modifier pos:line="1896" pos:column="6">*</type:modifier></type> <name><name pos:line="1896" pos:column="8">ScintillaEditView</name><op:operator pos:line="1896" pos:column="25">::</op:operator><name pos:line="1896" pos:column="27">getWordOnCaretPos</name></name><parameter_list pos:line="1896" pos:column="44">(<param><decl><type><name pos:line="1896" pos:column="45">char</name> <type:modifier pos:line="1896" pos:column="50">*</type:modifier></type> <name pos:line="1896" pos:column="52">txt</name></decl></param>, <param><decl><type><name pos:line="1896" pos:column="57">int</name></type> <name pos:line="1896" pos:column="61">size</name></decl></param>)</parameter_list>
<block pos:line="1897" pos:column="1">{
    <if pos:line="1898" pos:column="5">if <condition pos:line="1898" pos:column="8">(<expr><op:operator pos:line="1898" pos:column="9">!</op:operator><name pos:line="1898" pos:column="10">size</name></expr>)</condition><then pos:line="1898" pos:column="15">
		<return pos:line="1899" pos:column="17">return <expr><name pos:line="1899" pos:column="24">NULL</name></expr>;</return></then></if>

    <decl_stmt><decl><type><name><name pos:line="1901" pos:column="5">pair</name><argument_list pos:line="1901" pos:column="9">&lt;<argument><expr><name pos:line="1901" pos:column="10">int</name></expr></argument>,<argument><expr><name pos:line="1901" pos:column="14">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="1901" pos:column="19">range</name> <init pos:line="1901" pos:column="25">= <expr><call><name pos:line="1901" pos:column="27">getWordRange</name><argument_list pos:line="1901" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="1902" pos:column="5">return <expr><call><name pos:line="1902" pos:column="12">getWordFromRange</name><argument_list pos:line="1902" pos:column="28">(<argument><expr><name pos:line="1902" pos:column="29">txt</name></expr></argument>, <argument><expr><name pos:line="1902" pos:column="34">size</name></expr></argument>, <argument><expr><name><name pos:line="1902" pos:column="40">range</name><op:operator pos:line="1902" pos:column="45">.</op:operator><name pos:line="1902" pos:column="46">first</name></name></expr></argument>, <argument><expr><name><name pos:line="1902" pos:column="53">range</name><op:operator pos:line="1902" pos:column="58">.</op:operator><name pos:line="1902" pos:column="59">second</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1905" pos:column="1">TCHAR</name> <type:modifier pos:line="1905" pos:column="7">*</type:modifier></type> <name><name pos:line="1905" pos:column="9">ScintillaEditView</name><op:operator pos:line="1905" pos:column="26">::</op:operator><name pos:line="1905" pos:column="28">getGenericWordOnCaretPos</name></name><parameter_list pos:line="1905" pos:column="52">(<param><decl><type><name pos:line="1905" pos:column="53">TCHAR</name> <type:modifier pos:line="1905" pos:column="59">*</type:modifier></type> <name pos:line="1905" pos:column="61">txt</name></decl></param>, <param><decl><type><name pos:line="1905" pos:column="66">int</name></type> <name pos:line="1905" pos:column="70">size</name></decl></param>)</parameter_list>
<block pos:line="1906" pos:column="1">{
<cpp:ifdef pos:line="1907" pos:column="1">#<cpp:directive pos:line="1907" pos:column="2">ifdef</cpp:directive> <name pos:line="1907" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1908" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1908" pos:column="28">*</type:modifier></type><name pos:line="1908" pos:column="29">wmc</name> <init pos:line="1908" pos:column="33">= <expr><call><name><name pos:line="1908" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1908" pos:column="53">::</op:operator><name pos:line="1908" pos:column="55">getInstance</name></name><argument_list pos:line="1908" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1909" pos:column="9">unsigned</name> <name pos:line="1909" pos:column="18">int</name></type> <name pos:line="1909" pos:column="22">cp</name> <init pos:line="1909" pos:column="25">= <expr><call><name pos:line="1909" pos:column="27">execute</name><argument_list pos:line="1909" pos:column="34">(<argument><expr><name pos:line="1909" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1910" pos:column="9">char</name> <type:modifier pos:line="1910" pos:column="14">*</type:modifier></type><name pos:line="1910" pos:column="15">txtA</name> <init pos:line="1910" pos:column="20">= <expr><op:operator pos:line="1910" pos:column="22">new</op:operator> <name><name pos:line="1910" pos:column="26">char</name><index pos:line="1910" pos:column="30">[<expr><name pos:line="1910" pos:column="31">size</name> <op:operator pos:line="1910" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="1910" pos:column="38">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1911" pos:column="9">getWordOnCaretPos</name><argument_list pos:line="1911" pos:column="26">(<argument><expr><name pos:line="1911" pos:column="27">txtA</name></expr></argument>, <argument><expr><name pos:line="1911" pos:column="33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
	<decl_stmt><decl><type><specifier pos:line="1913" pos:column="9">const</specifier> <name pos:line="1913" pos:column="15">TCHAR</name> <type:modifier pos:line="1913" pos:column="21">*</type:modifier></type> <name pos:line="1913" pos:column="23">txtW</name> <init pos:line="1913" pos:column="28">= <expr><call><name><name pos:line="1913" pos:column="30">wmc</name><op:operator pos:line="1913" pos:column="33">-&gt;</op:operator><name pos:line="1913" pos:column="35">char2wchar</name></name><argument_list pos:line="1913" pos:column="45">(<argument><expr><name pos:line="1913" pos:column="46">txtA</name></expr></argument>, <argument><expr><name pos:line="1913" pos:column="52">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1914" pos:column="9">lstrcpy</name><argument_list pos:line="1914" pos:column="16">(<argument><expr><name pos:line="1914" pos:column="17">txt</name></expr></argument>, <argument><expr><name pos:line="1914" pos:column="22">txtW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="1915" pos:column="9">delete</op:operator> <index pos:line="1915" pos:column="16">[]</index> <name pos:line="1915" pos:column="19">txtA</name></expr>;</expr_stmt>
	<return pos:line="1916" pos:column="9">return <expr><name pos:line="1916" pos:column="16">txt</name></expr>;</return>
<cpp:else pos:line="1917" pos:column="1">#<cpp:directive pos:line="1917" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="1918" pos:column="9">return <expr><call><name pos:line="1918" pos:column="16">getWordOnCaretPos</name><argument_list pos:line="1918" pos:column="33">(<argument><expr><name pos:line="1918" pos:column="34">txt</name></expr></argument>, <argument><expr><name pos:line="1918" pos:column="39">size</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif pos:line="1919" pos:column="1">#<cpp:directive pos:line="1919" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1922" pos:column="1">char</name> <type:modifier pos:line="1922" pos:column="6">*</type:modifier></type> <name><name pos:line="1922" pos:column="8">ScintillaEditView</name><op:operator pos:line="1922" pos:column="25">::</op:operator><name pos:line="1922" pos:column="27">getSelectedText</name></name><parameter_list pos:line="1922" pos:column="42">(<param><decl><type><name pos:line="1922" pos:column="43">char</name> <type:modifier pos:line="1922" pos:column="48">*</type:modifier></type> <name pos:line="1922" pos:column="50">txt</name></decl></param>, <param><decl><type><name pos:line="1922" pos:column="55">int</name></type> <name pos:line="1922" pos:column="59">size</name></decl></param>, <param><decl><type><name pos:line="1922" pos:column="65">bool</name></type> <name pos:line="1922" pos:column="70">expand</name></decl></param>)</parameter_list>
<block pos:line="1923" pos:column="1">{
	<if pos:line="1924" pos:column="9">if <condition pos:line="1924" pos:column="12">(<expr><op:operator pos:line="1924" pos:column="13">!</op:operator><name pos:line="1924" pos:column="14">size</name></expr>)</condition><then pos:line="1924" pos:column="19">
		<return pos:line="1925" pos:column="17">return <expr><name pos:line="1925" pos:column="24">NULL</name></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="1926" pos:column="9">CharacterRange</name></type> <name pos:line="1926" pos:column="24">range</name> <init pos:line="1926" pos:column="30">= <expr><call><name pos:line="1926" pos:column="32">getSelection</name><argument_list pos:line="1926" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="1927" pos:column="9">if <condition pos:line="1927" pos:column="12">(<expr><name><name pos:line="1927" pos:column="13">range</name><op:operator pos:line="1927" pos:column="18">.</op:operator><name pos:line="1927" pos:column="19">cpMax</name></name> <op:operator pos:line="1927" pos:column="25">==</op:operator> <name><name pos:line="1927" pos:column="28">range</name><op:operator pos:line="1927" pos:column="33">.</op:operator><name pos:line="1927" pos:column="34">cpMin</name></name> <op:operator pos:line="1927" pos:column="40">&amp;&amp;</op:operator> <name pos:line="1927" pos:column="43">expand</name></expr>)</condition><then pos:line="1927" pos:column="50">
	<block pos:line="1928" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="1929" pos:column="17">expandWordSelection</name><argument_list pos:line="1929" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="1930" pos:column="17">range</name> <op:operator pos:line="1930" pos:column="23">=</op:operator> <call><name pos:line="1930" pos:column="25">getSelection</name><argument_list pos:line="1930" pos:column="37">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="1932" pos:column="9">if <condition pos:line="1932" pos:column="12">(<expr><op:operator pos:line="1932" pos:column="13">!</op:operator><op:operator pos:line="1932" pos:column="14">(</op:operator><name pos:line="1932" pos:column="15">size</name> <op:operator pos:line="1932" pos:column="20">&gt;</op:operator> <op:operator pos:line="1932" pos:column="22">(</op:operator><name><name pos:line="1932" pos:column="23">range</name><op:operator pos:line="1932" pos:column="28">.</op:operator><name pos:line="1932" pos:column="29">cpMax</name></name> <op:operator pos:line="1932" pos:column="35">-</op:operator> <name><name pos:line="1932" pos:column="37">range</name><op:operator pos:line="1932" pos:column="42">.</op:operator><name pos:line="1932" pos:column="43">cpMin</name></name><op:operator pos:line="1932" pos:column="48">)</op:operator><op:operator pos:line="1932" pos:column="49">)</op:operator></expr>)</condition><then pos:line="1932" pos:column="51">	<comment type="line" pos:line="1932" pos:column="57">//there must be atleast 1 byte left for zero terminator</comment>
	<block pos:line="1933" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="1934" pos:column="17">range</name><op:operator pos:line="1934" pos:column="22">.</op:operator><name pos:line="1934" pos:column="23">cpMax</name></name> <op:operator pos:line="1934" pos:column="29">=</op:operator> <name><name pos:line="1934" pos:column="31">range</name><op:operator pos:line="1934" pos:column="36">.</op:operator><name pos:line="1934" pos:column="37">cpMin</name></name><op:operator pos:line="1934" pos:column="42">+</op:operator><name pos:line="1934" pos:column="43">size</name><op:operator pos:line="1934" pos:column="47">-</op:operator><lit:literal type="number" pos:line="1934" pos:column="48">1</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="1934" pos:column="57">//keep room for zero terminator</comment>
	}</block></then></if>
	<comment type="line" pos:line="1936" pos:column="9">//getText(txt, range.cpMin, range.cpMax);</comment>
	<return pos:line="1937" pos:column="9">return <expr><call><name pos:line="1937" pos:column="16">getWordFromRange</name><argument_list pos:line="1937" pos:column="32">(<argument><expr><name pos:line="1937" pos:column="33">txt</name></expr></argument>, <argument><expr><name pos:line="1937" pos:column="38">size</name></expr></argument>, <argument><expr><name><name pos:line="1937" pos:column="44">range</name><op:operator pos:line="1937" pos:column="49">.</op:operator><name pos:line="1937" pos:column="50">cpMin</name></name></expr></argument>, <argument><expr><name><name pos:line="1937" pos:column="57">range</name><op:operator pos:line="1937" pos:column="62">.</op:operator><name pos:line="1937" pos:column="63">cpMax</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="1940" pos:column="1">TCHAR</name> <type:modifier pos:line="1940" pos:column="7">*</type:modifier></type> <name><name pos:line="1940" pos:column="9">ScintillaEditView</name><op:operator pos:line="1940" pos:column="26">::</op:operator><name pos:line="1940" pos:column="28">getGenericSelectedText</name></name><parameter_list pos:line="1940" pos:column="50">(<param><decl><type><name pos:line="1940" pos:column="51">TCHAR</name> <type:modifier pos:line="1940" pos:column="57">*</type:modifier></type> <name pos:line="1940" pos:column="59">txt</name></decl></param>, <param><decl><type><name pos:line="1940" pos:column="64">int</name></type> <name pos:line="1940" pos:column="68">size</name></decl></param>, <param><decl><type><name pos:line="1940" pos:column="74">bool</name></type> <name pos:line="1940" pos:column="79">expand</name></decl></param>)</parameter_list>
<block pos:line="1941" pos:column="1">{
<cpp:ifdef pos:line="1942" pos:column="1">#<cpp:directive pos:line="1942" pos:column="2">ifdef</cpp:directive> <name pos:line="1942" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1943" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1943" pos:column="28">*</type:modifier></type><name pos:line="1943" pos:column="29">wmc</name> <init pos:line="1943" pos:column="33">= <expr><call><name><name pos:line="1943" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1943" pos:column="53">::</op:operator><name pos:line="1943" pos:column="55">getInstance</name></name><argument_list pos:line="1943" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1944" pos:column="9">unsigned</name> <name pos:line="1944" pos:column="18">int</name></type> <name pos:line="1944" pos:column="22">cp</name> <init pos:line="1944" pos:column="25">= <expr><call><name pos:line="1944" pos:column="27">execute</name><argument_list pos:line="1944" pos:column="34">(<argument><expr><name pos:line="1944" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1945" pos:column="9">char</name> <type:modifier pos:line="1945" pos:column="14">*</type:modifier></type><name pos:line="1945" pos:column="15">txtA</name> <init pos:line="1945" pos:column="20">= <expr><op:operator pos:line="1945" pos:column="22">new</op:operator> <name><name pos:line="1945" pos:column="26">char</name><index pos:line="1945" pos:column="30">[<expr><name pos:line="1945" pos:column="31">size</name> <op:operator pos:line="1945" pos:column="36">+</op:operator> <lit:literal type="number" pos:line="1945" pos:column="38">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1946" pos:column="9">getSelectedText</name><argument_list pos:line="1946" pos:column="24">(<argument><expr><name pos:line="1946" pos:column="25">txtA</name></expr></argument>, <argument><expr><name pos:line="1946" pos:column="31">size</name></expr></argument>, <argument><expr><name pos:line="1946" pos:column="37">expand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
	<decl_stmt><decl><type><specifier pos:line="1948" pos:column="9">const</specifier> <name pos:line="1948" pos:column="15">TCHAR</name> <type:modifier pos:line="1948" pos:column="21">*</type:modifier></type> <name pos:line="1948" pos:column="23">txtW</name> <init pos:line="1948" pos:column="28">= <expr><call><name><name pos:line="1948" pos:column="30">wmc</name><op:operator pos:line="1948" pos:column="33">-&gt;</op:operator><name pos:line="1948" pos:column="35">char2wchar</name></name><argument_list pos:line="1948" pos:column="45">(<argument><expr><name pos:line="1948" pos:column="46">txtA</name></expr></argument>, <argument><expr><name pos:line="1948" pos:column="52">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1949" pos:column="9">lstrcpy</name><argument_list pos:line="1949" pos:column="16">(<argument><expr><name pos:line="1949" pos:column="17">txt</name></expr></argument>, <argument><expr><name pos:line="1949" pos:column="22">txtW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="1950" pos:column="9">delete</op:operator> <index pos:line="1950" pos:column="16">[]</index> <name pos:line="1950" pos:column="19">txtA</name></expr>;</expr_stmt>
	<return pos:line="1951" pos:column="9">return <expr><name pos:line="1951" pos:column="16">txt</name></expr>;</return>
<cpp:else pos:line="1952" pos:column="1">#<cpp:directive pos:line="1952" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="1953" pos:column="9">return <expr><call><name pos:line="1953" pos:column="16">getSelectedText</name><argument_list pos:line="1953" pos:column="31">(<argument><expr><name pos:line="1953" pos:column="32">txt</name></expr></argument>, <argument><expr><name pos:line="1953" pos:column="37">size</name></expr></argument>, <argument><expr><name pos:line="1953" pos:column="43">expand</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif pos:line="1954" pos:column="1">#<cpp:directive pos:line="1954" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1957" pos:column="1">int</name></type> <name><name pos:line="1957" pos:column="5">ScintillaEditView</name><op:operator pos:line="1957" pos:column="22">::</op:operator><name pos:line="1957" pos:column="24">searchInTarget</name></name><parameter_list pos:line="1957" pos:column="38">(<param><decl><type><specifier pos:line="1957" pos:column="39">const</specifier> <name pos:line="1957" pos:column="45">TCHAR</name> <type:modifier pos:line="1957" pos:column="51">*</type:modifier></type> <name pos:line="1957" pos:column="53">text2Find</name></decl></param>, <param><decl><type><name pos:line="1957" pos:column="64">int</name></type> <name pos:line="1957" pos:column="68">lenOfText2Find</name></decl></param>, <param><decl><type><name pos:line="1957" pos:column="84">int</name></type> <name pos:line="1957" pos:column="88">fromPos</name></decl></param>, <param><decl><type><name pos:line="1957" pos:column="97">int</name></type> <name pos:line="1957" pos:column="101">toPos</name></decl></param>)</parameter_list> <specifier pos:line="1957" pos:column="108">const</specifier>
<block pos:line="1958" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="1959" pos:column="9">execute</name><argument_list pos:line="1959" pos:column="16">(<argument><expr><name pos:line="1959" pos:column="17">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="1959" pos:column="37">fromPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1960" pos:column="9">execute</name><argument_list pos:line="1960" pos:column="16">(<argument><expr><name pos:line="1960" pos:column="17">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="1960" pos:column="35">toPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="1961" pos:column="1">#<cpp:directive pos:line="1961" pos:column="2">ifdef</cpp:directive> <name pos:line="1961" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1962" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1962" pos:column="28">*</type:modifier></type><name pos:line="1962" pos:column="29">wmc</name> <init pos:line="1962" pos:column="33">= <expr><call><name><name pos:line="1962" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1962" pos:column="53">::</op:operator><name pos:line="1962" pos:column="55">getInstance</name></name><argument_list pos:line="1962" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1963" pos:column="9">unsigned</name> <name pos:line="1963" pos:column="18">int</name></type> <name pos:line="1963" pos:column="22">cp</name> <init pos:line="1963" pos:column="25">= <expr><call><name pos:line="1963" pos:column="27">execute</name><argument_list pos:line="1963" pos:column="34">(<argument><expr><name pos:line="1963" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="1964" pos:column="9">const</specifier> <name pos:line="1964" pos:column="15">char</name> <type:modifier pos:line="1964" pos:column="20">*</type:modifier></type><name pos:line="1964" pos:column="21">text2FindA</name> <init pos:line="1964" pos:column="32">= <expr><call><name><name pos:line="1964" pos:column="34">wmc</name><op:operator pos:line="1964" pos:column="37">-&gt;</op:operator><name pos:line="1964" pos:column="39">wchar2char</name></name><argument_list pos:line="1964" pos:column="49">(<argument><expr><name pos:line="1964" pos:column="50">text2Find</name></expr></argument>, <argument><expr><name pos:line="1964" pos:column="61">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1965" pos:column="9">size_t</name></type> <name pos:line="1965" pos:column="16">text2FindALen</name> <init pos:line="1965" pos:column="30">= <expr><call><name pos:line="1965" pos:column="32">strlen</name><argument_list pos:line="1965" pos:column="38">(<argument><expr><name pos:line="1965" pos:column="39">text2FindA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1966" pos:column="9">int</name></type> <name pos:line="1966" pos:column="13">len</name> <init pos:line="1966" pos:column="17">= <expr><op:operator pos:line="1966" pos:column="19">(</op:operator><name pos:line="1966" pos:column="20">lenOfText2Find</name> <op:operator pos:line="1966" pos:column="35">&gt;</op:operator> <op:operator pos:line="1966" pos:column="37">(</op:operator><name pos:line="1966" pos:column="38">int</name><op:operator pos:line="1966" pos:column="41">)</op:operator><name pos:line="1966" pos:column="42">text2FindALen</name><op:operator pos:line="1966" pos:column="55">)</op:operator><op:operator pos:line="1966" pos:column="56">?</op:operator><name pos:line="1966" pos:column="57">lenOfText2Find</name><op:operator pos:line="1966" pos:column="71">:</op:operator><name pos:line="1966" pos:column="72">text2FindALen</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1967" pos:column="9">int</name></type> <name pos:line="1967" pos:column="13">targetFound</name> <init pos:line="1967" pos:column="25">= <expr><call><name pos:line="1967" pos:column="27">execute</name><argument_list pos:line="1967" pos:column="34">(<argument><expr><name pos:line="1967" pos:column="35">SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><op:operator pos:line="1967" pos:column="55">(</op:operator><name pos:line="1967" pos:column="56">WPARAM</name><op:operator pos:line="1967" pos:column="62">)</op:operator><name pos:line="1967" pos:column="63">len</name></expr></argument>, <argument><expr><op:operator pos:line="1967" pos:column="68">(</op:operator><name pos:line="1967" pos:column="69">LPARAM</name><op:operator pos:line="1967" pos:column="75">)</op:operator><name pos:line="1967" pos:column="76">text2FindA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="1968" pos:column="9">return <expr><name pos:line="1968" pos:column="16">targetFound</name></expr>;</return>
<cpp:else pos:line="1969" pos:column="1">#<cpp:directive pos:line="1969" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="1970" pos:column="9">return <expr><call><name pos:line="1970" pos:column="16">execute</name><argument_list pos:line="1970" pos:column="23">(<argument><expr><name pos:line="1970" pos:column="24">SCI_SEARCHINTARGET</name></expr></argument>, <argument><expr><op:operator pos:line="1970" pos:column="44">(</op:operator><name pos:line="1970" pos:column="45">WPARAM</name><op:operator pos:line="1970" pos:column="51">)</op:operator><name pos:line="1970" pos:column="52">lenOfText2Find</name></expr></argument>, <argument><expr><op:operator pos:line="1970" pos:column="68">(</op:operator><name pos:line="1970" pos:column="69">LPARAM</name><op:operator pos:line="1970" pos:column="75">)</op:operator><name pos:line="1970" pos:column="76">text2Find</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif pos:line="1971" pos:column="1">#<cpp:directive pos:line="1971" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1974" pos:column="1">void</name></type> <name><name pos:line="1974" pos:column="6">ScintillaEditView</name><op:operator pos:line="1974" pos:column="23">::</op:operator><name pos:line="1974" pos:column="25">appandGenericText</name></name><parameter_list pos:line="1974" pos:column="42">(<param><decl><type><specifier pos:line="1974" pos:column="43">const</specifier> <name pos:line="1974" pos:column="49">TCHAR</name> <type:modifier pos:line="1974" pos:column="55">*</type:modifier></type> <name pos:line="1974" pos:column="57">text2Append</name></decl></param>)</parameter_list> <specifier pos:line="1974" pos:column="70">const</specifier>
<block pos:line="1975" pos:column="1">{
<cpp:ifdef pos:line="1976" pos:column="1">#<cpp:directive pos:line="1976" pos:column="2">ifdef</cpp:directive> <name pos:line="1976" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1977" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1977" pos:column="28">*</type:modifier></type><name pos:line="1977" pos:column="29">wmc</name> <init pos:line="1977" pos:column="33">= <expr><call><name><name pos:line="1977" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1977" pos:column="53">::</op:operator><name pos:line="1977" pos:column="55">getInstance</name></name><argument_list pos:line="1977" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1978" pos:column="9">unsigned</name> <name pos:line="1978" pos:column="18">int</name></type> <name pos:line="1978" pos:column="22">cp</name> <init pos:line="1978" pos:column="25">= <expr><call><name pos:line="1978" pos:column="27">execute</name><argument_list pos:line="1978" pos:column="34">(<argument><expr><name pos:line="1978" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="1979" pos:column="9">const</specifier> <name pos:line="1979" pos:column="15">char</name> <type:modifier pos:line="1979" pos:column="20">*</type:modifier></type><name pos:line="1979" pos:column="21">text2AppendA</name> <init pos:line="1979" pos:column="34">=<expr><call><name><name pos:line="1979" pos:column="35">wmc</name><op:operator pos:line="1979" pos:column="38">-&gt;</op:operator><name pos:line="1979" pos:column="40">wchar2char</name></name><argument_list pos:line="1979" pos:column="50">(<argument><expr><name pos:line="1979" pos:column="51">text2Append</name></expr></argument>, <argument><expr><name pos:line="1979" pos:column="64">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1980" pos:column="9">execute</name><argument_list pos:line="1980" pos:column="16">(<argument><expr><name pos:line="1980" pos:column="17">SCI_APPENDTEXT</name></expr></argument>, <argument><expr><call><name pos:line="1980" pos:column="33">strlen</name><argument_list pos:line="1980" pos:column="39">(<argument><expr><name pos:line="1980" pos:column="40">text2AppendA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1980" pos:column="55">(</op:operator><name pos:line="1980" pos:column="56">LPARAM</name><op:operator pos:line="1980" pos:column="62">)</op:operator><name pos:line="1980" pos:column="63">text2AppendA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1981" pos:column="1">#<cpp:directive pos:line="1981" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="1982" pos:column="9">execute</name><argument_list pos:line="1982" pos:column="16">(<argument><expr><name pos:line="1982" pos:column="17">SCI_APPENDTEXT</name></expr></argument>, <argument><expr><call><name pos:line="1982" pos:column="33">strlen</name><argument_list pos:line="1982" pos:column="39">(<argument><expr><name pos:line="1982" pos:column="40">text2Append</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1982" pos:column="54">(</op:operator><name pos:line="1982" pos:column="55">LPARAM</name><op:operator pos:line="1982" pos:column="61">)</op:operator><name pos:line="1982" pos:column="62">text2Append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1983" pos:column="1">#<cpp:directive pos:line="1983" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="1986" pos:column="1">void</name></type> <name><name pos:line="1986" pos:column="6">ScintillaEditView</name><op:operator pos:line="1986" pos:column="23">::</op:operator><name pos:line="1986" pos:column="25">addGenericText</name></name><parameter_list pos:line="1986" pos:column="39">(<param><decl><type><specifier pos:line="1986" pos:column="40">const</specifier> <name pos:line="1986" pos:column="46">TCHAR</name> <type:modifier pos:line="1986" pos:column="52">*</type:modifier></type> <name pos:line="1986" pos:column="54">text2Append</name></decl></param>)</parameter_list> <specifier pos:line="1986" pos:column="67">const</specifier>
<block pos:line="1987" pos:column="1">{
<cpp:ifdef pos:line="1988" pos:column="1">#<cpp:directive pos:line="1988" pos:column="2">ifdef</cpp:directive> <name pos:line="1988" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="1989" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="1989" pos:column="28">*</type:modifier></type><name pos:line="1989" pos:column="29">wmc</name> <init pos:line="1989" pos:column="33">= <expr><call><name><name pos:line="1989" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="1989" pos:column="53">::</op:operator><name pos:line="1989" pos:column="55">getInstance</name></name><argument_list pos:line="1989" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1990" pos:column="9">unsigned</name> <name pos:line="1990" pos:column="18">int</name></type> <name pos:line="1990" pos:column="22">cp</name> <init pos:line="1990" pos:column="25">= <expr><call><name pos:line="1990" pos:column="27">execute</name><argument_list pos:line="1990" pos:column="34">(<argument><expr><name pos:line="1990" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="1991" pos:column="9">const</specifier> <name pos:line="1991" pos:column="15">char</name> <type:modifier pos:line="1991" pos:column="20">*</type:modifier></type><name pos:line="1991" pos:column="21">text2AppendA</name> <init pos:line="1991" pos:column="34">=<expr><call><name><name pos:line="1991" pos:column="35">wmc</name><op:operator pos:line="1991" pos:column="38">-&gt;</op:operator><name pos:line="1991" pos:column="40">wchar2char</name></name><argument_list pos:line="1991" pos:column="50">(<argument><expr><name pos:line="1991" pos:column="51">text2Append</name></expr></argument>, <argument><expr><name pos:line="1991" pos:column="64">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1992" pos:column="9">execute</name><argument_list pos:line="1992" pos:column="16">(<argument><expr><name pos:line="1992" pos:column="17">SCI_ADDTEXT</name></expr></argument>, <argument><expr><call><name pos:line="1992" pos:column="30">strlen</name><argument_list pos:line="1992" pos:column="36">(<argument><expr><name pos:line="1992" pos:column="37">text2AppendA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1992" pos:column="52">(</op:operator><name pos:line="1992" pos:column="53">LPARAM</name><op:operator pos:line="1992" pos:column="59">)</op:operator><name pos:line="1992" pos:column="60">text2AppendA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="1993" pos:column="1">#<cpp:directive pos:line="1993" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="1994" pos:column="9">execute</name><argument_list pos:line="1994" pos:column="16">(<argument><expr><name pos:line="1994" pos:column="17">SCI_ADDTEXT</name></expr></argument>, <argument><expr><call><name pos:line="1994" pos:column="30">strlen</name><argument_list pos:line="1994" pos:column="36">(<argument><expr><name pos:line="1994" pos:column="37">text2Append</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1994" pos:column="51">(</op:operator><name pos:line="1994" pos:column="52">LPARAM</name><op:operator pos:line="1994" pos:column="58">)</op:operator><name pos:line="1994" pos:column="59">text2Append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="1995" pos:column="1">#<cpp:directive pos:line="1995" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<cpp:ifdef pos:line="1998" pos:column="1">#<cpp:directive pos:line="1998" pos:column="2">ifdef</cpp:directive> <name pos:line="1998" pos:column="8">UNICODE</name></cpp:ifdef>
<function><type><name pos:line="1999" pos:column="1">void</name></type> <name><name pos:line="1999" pos:column="6">ScintillaEditView</name><op:operator pos:line="1999" pos:column="23">::</op:operator><name pos:line="1999" pos:column="25">addGenericText</name></name><parameter_list pos:line="1999" pos:column="39">(<param><decl><type><specifier pos:line="1999" pos:column="40">const</specifier> <name pos:line="1999" pos:column="46">TCHAR</name> <type:modifier pos:line="1999" pos:column="52">*</type:modifier></type> <name pos:line="1999" pos:column="54">text2Append</name></decl></param>, <param><decl><type><name pos:line="1999" pos:column="67">long</name> <type:modifier pos:line="1999" pos:column="72">*</type:modifier></type><name pos:line="1999" pos:column="73">mstart</name></decl></param>, <param><decl><type><name pos:line="1999" pos:column="81">long</name> <type:modifier pos:line="1999" pos:column="86">*</type:modifier></type><name pos:line="1999" pos:column="87">mend</name></decl></param>)</parameter_list> <specifier pos:line="1999" pos:column="93">const</specifier>
<block pos:line="2000" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2001" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="2001" pos:column="28">*</type:modifier></type><name pos:line="2001" pos:column="29">wmc</name> <init pos:line="2001" pos:column="33">= <expr><call><name><name pos:line="2001" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="2001" pos:column="53">::</op:operator><name pos:line="2001" pos:column="55">getInstance</name></name><argument_list pos:line="2001" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2002" pos:column="9">unsigned</name> <name pos:line="2002" pos:column="18">int</name></type> <name pos:line="2002" pos:column="22">cp</name> <init pos:line="2002" pos:column="25">= <expr><call><name pos:line="2002" pos:column="27">execute</name><argument_list pos:line="2002" pos:column="34">(<argument><expr><name pos:line="2002" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="2003" pos:column="9">const</specifier> <name pos:line="2003" pos:column="15">char</name> <type:modifier pos:line="2003" pos:column="20">*</type:modifier></type><name pos:line="2003" pos:column="21">text2AppendA</name> <init pos:line="2003" pos:column="34">=<expr><call><name><name pos:line="2003" pos:column="35">wmc</name><op:operator pos:line="2003" pos:column="38">-&gt;</op:operator><name pos:line="2003" pos:column="40">wchar2char</name></name><argument_list pos:line="2003" pos:column="50">(<argument><expr><name pos:line="2003" pos:column="51">text2Append</name></expr></argument>, <argument><expr><name pos:line="2003" pos:column="64">cp</name></expr></argument>, <argument><expr><name pos:line="2003" pos:column="68">mstart</name></expr></argument>, <argument><expr><name pos:line="2003" pos:column="76">mend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2004" pos:column="9">execute</name><argument_list pos:line="2004" pos:column="16">(<argument><expr><name pos:line="2004" pos:column="17">SCI_ADDTEXT</name></expr></argument>, <argument><expr><call><name pos:line="2004" pos:column="30">strlen</name><argument_list pos:line="2004" pos:column="36">(<argument><expr><name pos:line="2004" pos:column="37">text2AppendA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2004" pos:column="52">(</op:operator><name pos:line="2004" pos:column="53">LPARAM</name><op:operator pos:line="2004" pos:column="59">)</op:operator><name pos:line="2004" pos:column="60">text2AppendA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:else pos:line="2006" pos:column="1">#<cpp:directive pos:line="2006" pos:column="2">else</cpp:directive></cpp:else>
<function><type><name pos:line="2007" pos:column="1">void</name></type> <name><name pos:line="2007" pos:column="6">ScintillaEditView</name><op:operator pos:line="2007" pos:column="23">::</op:operator><name pos:line="2007" pos:column="25">addGenericText</name></name><parameter_list pos:line="2007" pos:column="39">(<param><decl><type><specifier pos:line="2007" pos:column="40">const</specifier> <name pos:line="2007" pos:column="46">TCHAR</name> <type:modifier pos:line="2007" pos:column="52">*</type:modifier></type> <name pos:line="2007" pos:column="54">text2Append</name></decl></param>, <param><decl><type><name pos:line="2007" pos:column="67">long</name> <type:modifier pos:line="2007" pos:column="72">*</type:modifier></type></decl></param>, <param><decl><type><name pos:line="2007" pos:column="75">long</name> <type:modifier pos:line="2007" pos:column="80">*</type:modifier></type></decl></param>)</parameter_list> <specifier pos:line="2007" pos:column="83">const</specifier>
<block pos:line="2008" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="2009" pos:column="9">execute</name><argument_list pos:line="2009" pos:column="16">(<argument><expr><name pos:line="2009" pos:column="17">SCI_ADDTEXT</name></expr></argument>, <argument><expr><call><name pos:line="2009" pos:column="30">strlen</name><argument_list pos:line="2009" pos:column="36">(<argument><expr><name pos:line="2009" pos:column="37">text2Append</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="2009" pos:column="51">(</op:operator><name pos:line="2009" pos:column="52">LPARAM</name><op:operator pos:line="2009" pos:column="58">)</op:operator><name pos:line="2009" pos:column="59">text2Append</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif pos:line="2011" pos:column="1">#<cpp:directive pos:line="2011" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="2013" pos:column="1">int</name></type> <name><name pos:line="2013" pos:column="5">ScintillaEditView</name><op:operator pos:line="2013" pos:column="22">::</op:operator><name pos:line="2013" pos:column="24">replaceTarget</name></name><parameter_list pos:line="2013" pos:column="37">(<param><decl><type><specifier pos:line="2013" pos:column="38">const</specifier> <name pos:line="2013" pos:column="44">TCHAR</name> <type:modifier pos:line="2013" pos:column="50">*</type:modifier></type> <name pos:line="2013" pos:column="52">str2replace</name></decl></param>, <param><decl><type><name pos:line="2013" pos:column="65">int</name></type> <name pos:line="2013" pos:column="69">fromTargetPos</name></decl></param>, <param><decl><type><name pos:line="2013" pos:column="84">int</name></type> <name pos:line="2013" pos:column="88">toTargetPos</name></decl></param>)</parameter_list> <specifier pos:line="2013" pos:column="101">const</specifier>
<block pos:line="2014" pos:column="1">{
	<if pos:line="2015" pos:column="9">if <condition pos:line="2015" pos:column="12">(<expr><name pos:line="2015" pos:column="13">fromTargetPos</name> <op:operator pos:line="2015" pos:column="27">!=</op:operator> <op:operator pos:line="2015" pos:column="30">-</op:operator><lit:literal type="number" pos:line="2015" pos:column="31">1</lit:literal> <op:operator pos:line="2015" pos:column="33">||</op:operator> <name pos:line="2015" pos:column="36">toTargetPos</name> <op:operator pos:line="2015" pos:column="48">!=</op:operator> <op:operator pos:line="2015" pos:column="51">-</op:operator><lit:literal type="number" pos:line="2015" pos:column="52">1</lit:literal></expr>)</condition><then pos:line="2015" pos:column="54">
	<block pos:line="2016" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="2017" pos:column="17">execute</name><argument_list pos:line="2017" pos:column="24">(<argument><expr><name pos:line="2017" pos:column="25">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="2017" pos:column="45">fromTargetPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2018" pos:column="17">execute</name><argument_list pos:line="2018" pos:column="24">(<argument><expr><name pos:line="2018" pos:column="25">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="2018" pos:column="43">toTargetPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:ifdef pos:line="2020" pos:column="1">#<cpp:directive pos:line="2020" pos:column="2">ifdef</cpp:directive> <name pos:line="2020" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="2021" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="2021" pos:column="28">*</type:modifier></type><name pos:line="2021" pos:column="29">wmc</name> <init pos:line="2021" pos:column="33">= <expr><call><name><name pos:line="2021" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="2021" pos:column="53">::</op:operator><name pos:line="2021" pos:column="55">getInstance</name></name><argument_list pos:line="2021" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2022" pos:column="9">unsigned</name> <name pos:line="2022" pos:column="18">int</name></type> <name pos:line="2022" pos:column="22">cp</name> <init pos:line="2022" pos:column="25">= <expr><call><name pos:line="2022" pos:column="27">execute</name><argument_list pos:line="2022" pos:column="34">(<argument><expr><name pos:line="2022" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="2023" pos:column="9">const</specifier> <name pos:line="2023" pos:column="15">char</name> <type:modifier pos:line="2023" pos:column="20">*</type:modifier></type><name pos:line="2023" pos:column="21">str2replaceA</name> <init pos:line="2023" pos:column="34">= <expr><call><name><name pos:line="2023" pos:column="36">wmc</name><op:operator pos:line="2023" pos:column="39">-&gt;</op:operator><name pos:line="2023" pos:column="41">wchar2char</name></name><argument_list pos:line="2023" pos:column="51">(<argument><expr><name pos:line="2023" pos:column="52">str2replace</name></expr></argument>, <argument><expr><name pos:line="2023" pos:column="65">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="2024" pos:column="9">return <expr><call><name pos:line="2024" pos:column="16">execute</name><argument_list pos:line="2024" pos:column="23">(<argument><expr><name pos:line="2024" pos:column="24">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><op:operator pos:line="2024" pos:column="43">(</op:operator><name pos:line="2024" pos:column="44">WPARAM</name><op:operator pos:line="2024" pos:column="50">)</op:operator><op:operator pos:line="2024" pos:column="51">-</op:operator><lit:literal type="number" pos:line="2024" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2024" pos:column="55">(</op:operator><name pos:line="2024" pos:column="56">LPARAM</name><op:operator pos:line="2024" pos:column="62">)</op:operator><name pos:line="2024" pos:column="63">str2replaceA</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else pos:line="2025" pos:column="1">#<cpp:directive pos:line="2025" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="2026" pos:column="9">return <expr><call><name pos:line="2026" pos:column="16">execute</name><argument_list pos:line="2026" pos:column="23">(<argument><expr><name pos:line="2026" pos:column="24">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><op:operator pos:line="2026" pos:column="43">(</op:operator><name pos:line="2026" pos:column="44">WPARAM</name><op:operator pos:line="2026" pos:column="50">)</op:operator><op:operator pos:line="2026" pos:column="51">-</op:operator><lit:literal type="number" pos:line="2026" pos:column="52">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2026" pos:column="55">(</op:operator><name pos:line="2026" pos:column="56">LPARAM</name><op:operator pos:line="2026" pos:column="62">)</op:operator><name pos:line="2026" pos:column="63">str2replace</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif pos:line="2027" pos:column="1">#<cpp:directive pos:line="2027" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2030" pos:column="1">int</name></type> <name><name pos:line="2030" pos:column="5">ScintillaEditView</name><op:operator pos:line="2030" pos:column="22">::</op:operator><name pos:line="2030" pos:column="24">replaceTargetRegExMode</name></name><parameter_list pos:line="2030" pos:column="46">(<param><decl><type><specifier pos:line="2030" pos:column="47">const</specifier> <name pos:line="2030" pos:column="53">TCHAR</name> <type:modifier pos:line="2030" pos:column="59">*</type:modifier></type> <name pos:line="2030" pos:column="61">re</name></decl></param>, <param><decl><type><name pos:line="2030" pos:column="65">int</name></type> <name pos:line="2030" pos:column="69">fromTargetPos</name></decl></param>, <param><decl><type><name pos:line="2030" pos:column="84">int</name></type> <name pos:line="2030" pos:column="88">toTargetPos</name></decl></param>)</parameter_list> <specifier pos:line="2030" pos:column="101">const</specifier>
<block pos:line="2031" pos:column="1">{
	<if pos:line="2032" pos:column="9">if <condition pos:line="2032" pos:column="12">(<expr><name pos:line="2032" pos:column="13">fromTargetPos</name> <op:operator pos:line="2032" pos:column="27">!=</op:operator> <op:operator pos:line="2032" pos:column="30">-</op:operator><lit:literal type="number" pos:line="2032" pos:column="31">1</lit:literal> <op:operator pos:line="2032" pos:column="33">||</op:operator> <name pos:line="2032" pos:column="36">toTargetPos</name> <op:operator pos:line="2032" pos:column="48">!=</op:operator> <op:operator pos:line="2032" pos:column="51">-</op:operator><lit:literal type="number" pos:line="2032" pos:column="52">1</lit:literal></expr>)</condition><then pos:line="2032" pos:column="54">
	<block pos:line="2033" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="2034" pos:column="17">execute</name><argument_list pos:line="2034" pos:column="24">(<argument><expr><name pos:line="2034" pos:column="25">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="2034" pos:column="45">fromTargetPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2035" pos:column="17">execute</name><argument_list pos:line="2035" pos:column="24">(<argument><expr><name pos:line="2035" pos:column="25">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="2035" pos:column="43">toTargetPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
<cpp:ifdef pos:line="2037" pos:column="1">#<cpp:directive pos:line="2037" pos:column="2">ifdef</cpp:directive> <name pos:line="2037" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="2038" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="2038" pos:column="28">*</type:modifier></type><name pos:line="2038" pos:column="29">wmc</name> <init pos:line="2038" pos:column="33">= <expr><call><name><name pos:line="2038" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="2038" pos:column="53">::</op:operator><name pos:line="2038" pos:column="55">getInstance</name></name><argument_list pos:line="2038" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2039" pos:column="9">unsigned</name> <name pos:line="2039" pos:column="18">int</name></type> <name pos:line="2039" pos:column="22">cp</name> <init pos:line="2039" pos:column="25">= <expr><call><name pos:line="2039" pos:column="27">execute</name><argument_list pos:line="2039" pos:column="34">(<argument><expr><name pos:line="2039" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="2040" pos:column="9">const</specifier> <name pos:line="2040" pos:column="15">char</name> <type:modifier pos:line="2040" pos:column="20">*</type:modifier></type><name pos:line="2040" pos:column="21">reA</name> <init pos:line="2040" pos:column="25">= <expr><call><name><name pos:line="2040" pos:column="27">wmc</name><op:operator pos:line="2040" pos:column="30">-&gt;</op:operator><name pos:line="2040" pos:column="32">wchar2char</name></name><argument_list pos:line="2040" pos:column="42">(<argument><expr><name pos:line="2040" pos:column="43">re</name></expr></argument>, <argument><expr><name pos:line="2040" pos:column="47">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return pos:line="2041" pos:column="9">return <expr><call><name pos:line="2041" pos:column="16">execute</name><argument_list pos:line="2041" pos:column="23">(<argument><expr><name pos:line="2041" pos:column="24">SCI_REPLACETARGETRE</name></expr></argument>, <argument><expr><op:operator pos:line="2041" pos:column="45">(</op:operator><name pos:line="2041" pos:column="46">WPARAM</name><op:operator pos:line="2041" pos:column="52">)</op:operator><op:operator pos:line="2041" pos:column="53">-</op:operator><lit:literal type="number" pos:line="2041" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2041" pos:column="57">(</op:operator><name pos:line="2041" pos:column="58">LPARAM</name><op:operator pos:line="2041" pos:column="64">)</op:operator><name pos:line="2041" pos:column="65">reA</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else pos:line="2042" pos:column="1">#<cpp:directive pos:line="2042" pos:column="2">else</cpp:directive></cpp:else>
	<return pos:line="2043" pos:column="9">return <expr><call><name pos:line="2043" pos:column="16">execute</name><argument_list pos:line="2043" pos:column="23">(<argument><expr><name pos:line="2043" pos:column="24">SCI_REPLACETARGETRE</name></expr></argument>, <argument><expr><op:operator pos:line="2043" pos:column="45">(</op:operator><name pos:line="2043" pos:column="46">WPARAM</name><op:operator pos:line="2043" pos:column="52">)</op:operator><op:operator pos:line="2043" pos:column="53">-</op:operator><lit:literal type="number" pos:line="2043" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2043" pos:column="57">(</op:operator><name pos:line="2043" pos:column="58">LPARAM</name><op:operator pos:line="2043" pos:column="64">)</op:operator><name pos:line="2043" pos:column="65">re</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif pos:line="2044" pos:column="1">#<cpp:directive pos:line="2044" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2047" pos:column="1">void</name></type> <name><name pos:line="2047" pos:column="6">ScintillaEditView</name><op:operator pos:line="2047" pos:column="23">::</op:operator><name pos:line="2047" pos:column="25">showAutoComletion</name></name><parameter_list pos:line="2047" pos:column="42">(<param><decl><type><name pos:line="2047" pos:column="43">int</name></type> <name pos:line="2047" pos:column="47">lenEntered</name></decl></param>, <param><decl><type><specifier pos:line="2047" pos:column="59">const</specifier> <name pos:line="2047" pos:column="65">TCHAR</name> <type:modifier pos:line="2047" pos:column="71">*</type:modifier></type> <name pos:line="2047" pos:column="73">list</name></decl></param>)</parameter_list>
<block pos:line="2048" pos:column="1">{
<cpp:ifdef pos:line="2049" pos:column="1">#<cpp:directive pos:line="2049" pos:column="2">ifdef</cpp:directive> <name pos:line="2049" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="2050" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="2050" pos:column="28">*</type:modifier></type><name pos:line="2050" pos:column="29">wmc</name> <init pos:line="2050" pos:column="33">= <expr><call><name><name pos:line="2050" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="2050" pos:column="53">::</op:operator><name pos:line="2050" pos:column="55">getInstance</name></name><argument_list pos:line="2050" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2051" pos:column="9">unsigned</name> <name pos:line="2051" pos:column="18">int</name></type> <name pos:line="2051" pos:column="22">cp</name> <init pos:line="2051" pos:column="25">= <expr><call><name pos:line="2051" pos:column="27">execute</name><argument_list pos:line="2051" pos:column="34">(<argument><expr><name pos:line="2051" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="2052" pos:column="9">const</specifier> <name pos:line="2052" pos:column="15">char</name> <type:modifier pos:line="2052" pos:column="20">*</type:modifier></type><name pos:line="2052" pos:column="21">listA</name> <init pos:line="2052" pos:column="27">= <expr><call><name><name pos:line="2052" pos:column="29">wmc</name><op:operator pos:line="2052" pos:column="32">-&gt;</op:operator><name pos:line="2052" pos:column="34">wchar2char</name></name><argument_list pos:line="2052" pos:column="44">(<argument><expr><name pos:line="2052" pos:column="45">list</name></expr></argument>, <argument><expr><name pos:line="2052" pos:column="51">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2053" pos:column="9">execute</name><argument_list pos:line="2053" pos:column="16">(<argument><expr><name pos:line="2053" pos:column="17">SCI_AUTOCSHOW</name></expr></argument>, <argument><expr><name pos:line="2053" pos:column="32">lenEntered</name></expr></argument>, <argument><expr><call><name pos:line="2053" pos:column="44">WPARAM</name><argument_list pos:line="2053" pos:column="50">(<argument><expr><name pos:line="2053" pos:column="51">listA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2054" pos:column="1">#<cpp:directive pos:line="2054" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="2055" pos:column="9">execute</name><argument_list pos:line="2055" pos:column="16">(<argument><expr><name pos:line="2055" pos:column="17">SCI_AUTOCSHOW</name></expr></argument>, <argument><expr><name pos:line="2055" pos:column="32">lenEntered</name></expr></argument>, <argument><expr><call><name pos:line="2055" pos:column="44">WPARAM</name><argument_list pos:line="2055" pos:column="50">(<argument><expr><name pos:line="2055" pos:column="51">list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2056" pos:column="1">#<cpp:directive pos:line="2056" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2059" pos:column="1">void</name></type> <name><name pos:line="2059" pos:column="6">ScintillaEditView</name><op:operator pos:line="2059" pos:column="23">::</op:operator><name pos:line="2059" pos:column="25">showCallTip</name></name><parameter_list pos:line="2059" pos:column="36">(<param><decl><type><name pos:line="2059" pos:column="37">int</name></type> <name pos:line="2059" pos:column="41">startPos</name></decl></param>, <param><decl><type><specifier pos:line="2059" pos:column="51">const</specifier> <name pos:line="2059" pos:column="57">TCHAR</name> <type:modifier pos:line="2059" pos:column="63">*</type:modifier></type> <name pos:line="2059" pos:column="65">def</name></decl></param>)</parameter_list>
<block pos:line="2060" pos:column="1">{
<cpp:ifdef pos:line="2061" pos:column="1">#<cpp:directive pos:line="2061" pos:column="2">ifdef</cpp:directive> <name pos:line="2061" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="2062" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="2062" pos:column="28">*</type:modifier></type><name pos:line="2062" pos:column="29">wmc</name> <init pos:line="2062" pos:column="33">= <expr><call><name><name pos:line="2062" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="2062" pos:column="53">::</op:operator><name pos:line="2062" pos:column="55">getInstance</name></name><argument_list pos:line="2062" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2063" pos:column="9">unsigned</name> <name pos:line="2063" pos:column="18">int</name></type> <name pos:line="2063" pos:column="22">cp</name> <init pos:line="2063" pos:column="25">= <expr><call><name pos:line="2063" pos:column="27">execute</name><argument_list pos:line="2063" pos:column="34">(<argument><expr><name pos:line="2063" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><type><specifier pos:line="2064" pos:column="9">const</specifier> <name pos:line="2064" pos:column="15">char</name> <type:modifier pos:line="2064" pos:column="20">*</type:modifier></type><name pos:line="2064" pos:column="21">defA</name> <init pos:line="2064" pos:column="26">= <expr><call><name><name pos:line="2064" pos:column="28">wmc</name><op:operator pos:line="2064" pos:column="31">-&gt;</op:operator><name pos:line="2064" pos:column="33">wchar2char</name></name><argument_list pos:line="2064" pos:column="43">(<argument><expr><name pos:line="2064" pos:column="44">def</name></expr></argument>, <argument><expr><name pos:line="2064" pos:column="49">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2065" pos:column="9">execute</name><argument_list pos:line="2065" pos:column="16">(<argument><expr><name pos:line="2065" pos:column="17">SCI_CALLTIPSHOW</name></expr></argument>, <argument><expr><name pos:line="2065" pos:column="34">startPos</name></expr></argument>, <argument><expr><call><name pos:line="2065" pos:column="44">LPARAM</name><argument_list pos:line="2065" pos:column="50">(<argument><expr><name pos:line="2065" pos:column="51">defA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2066" pos:column="1">#<cpp:directive pos:line="2066" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="2067" pos:column="9">execute</name><argument_list pos:line="2067" pos:column="16">(<argument><expr><name pos:line="2067" pos:column="17">SCI_CALLTIPSHOW</name></expr></argument>, <argument><expr><name pos:line="2067" pos:column="34">startPos</name></expr></argument>, <argument><expr><op:operator pos:line="2067" pos:column="44">(</op:operator><name pos:line="2067" pos:column="45">LPARAM</name><op:operator pos:line="2067" pos:column="51">)</op:operator><name pos:line="2067" pos:column="52">def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2068" pos:column="1">#<cpp:directive pos:line="2068" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>


<cpp:ifdef pos:line="2072" pos:column="1">#<cpp:directive pos:line="2072" pos:column="2">ifdef</cpp:directive> <name pos:line="2072" pos:column="8">UNICODE</name></cpp:ifdef>
<function><type><name pos:line="2073" pos:column="1">void</name></type> <name><name pos:line="2073" pos:column="6">ScintillaEditView</name><op:operator pos:line="2073" pos:column="23">::</op:operator><name pos:line="2073" pos:column="25">getLine</name></name><parameter_list pos:line="2073" pos:column="32">(<param><decl><type><name pos:line="2073" pos:column="33">int</name></type> <name pos:line="2073" pos:column="37">lineNumber</name></decl></param>, <param><decl><type><name pos:line="2073" pos:column="49">TCHAR</name> <type:modifier pos:line="2073" pos:column="55">*</type:modifier></type> <name pos:line="2073" pos:column="57">line</name></decl></param>, <param><decl><type><name pos:line="2073" pos:column="63">int</name></type> <name pos:line="2073" pos:column="67">lineBufferLen</name></decl></param>)</parameter_list>
<block pos:line="2074" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2075" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="2075" pos:column="28">*</type:modifier></type><name pos:line="2075" pos:column="29">wmc</name> <init pos:line="2075" pos:column="33">= <expr><call><name><name pos:line="2075" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="2075" pos:column="53">::</op:operator><name pos:line="2075" pos:column="55">getInstance</name></name><argument_list pos:line="2075" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2076" pos:column="9">unsigned</name> <name pos:line="2076" pos:column="18">int</name></type> <name pos:line="2076" pos:column="22">cp</name> <init pos:line="2076" pos:column="25">= <expr><call><name pos:line="2076" pos:column="27">execute</name><argument_list pos:line="2076" pos:column="34">(<argument><expr><name pos:line="2076" pos:column="35">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2077" pos:column="9">char</name> <type:modifier pos:line="2077" pos:column="14">*</type:modifier></type><name pos:line="2077" pos:column="15">lineA</name> <init pos:line="2077" pos:column="21">= <expr><op:operator pos:line="2077" pos:column="23">new</op:operator> <name><name pos:line="2077" pos:column="27">char</name><index pos:line="2077" pos:column="31">[<expr><name pos:line="2077" pos:column="32">lineBufferLen</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2078" pos:column="9">execute</name><argument_list pos:line="2078" pos:column="16">(<argument><expr><name pos:line="2078" pos:column="17">SCI_GETLINE</name></expr></argument>, <argument><expr><name pos:line="2078" pos:column="30">lineNumber</name></expr></argument>, <argument><expr><op:operator pos:line="2078" pos:column="42">(</op:operator><name pos:line="2078" pos:column="43">LPARAM</name><op:operator pos:line="2078" pos:column="49">)</op:operator><name pos:line="2078" pos:column="50">lineA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier pos:line="2079" pos:column="9">const</specifier> <name pos:line="2079" pos:column="15">TCHAR</name> <type:modifier pos:line="2079" pos:column="21">*</type:modifier></type><name pos:line="2079" pos:column="22">lineW</name> <init pos:line="2079" pos:column="28">= <expr><call><name><name pos:line="2079" pos:column="30">wmc</name><op:operator pos:line="2079" pos:column="33">-&gt;</op:operator><name pos:line="2079" pos:column="35">char2wchar</name></name><argument_list pos:line="2079" pos:column="45">(<argument><expr><name pos:line="2079" pos:column="46">lineA</name></expr></argument>, <argument><expr><name pos:line="2079" pos:column="53">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2080" pos:column="9">lstrcpy</name><argument_list pos:line="2080" pos:column="16">(<argument><expr><name pos:line="2080" pos:column="17">line</name></expr></argument>, <argument><expr><name pos:line="2080" pos:column="23">lineW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="2081" pos:column="9">delete</op:operator> <index pos:line="2081" pos:column="16">[]</index> <name pos:line="2081" pos:column="19">lineA</name></expr>;</expr_stmt>
}</block></function>
<cpp:else pos:line="2083" pos:column="1">#<cpp:directive pos:line="2083" pos:column="2">else</cpp:directive></cpp:else>
<function><type><name pos:line="2084" pos:column="1">void</name></type> <name><name pos:line="2084" pos:column="6">ScintillaEditView</name><op:operator pos:line="2084" pos:column="23">::</op:operator><name pos:line="2084" pos:column="25">getLine</name></name><parameter_list pos:line="2084" pos:column="32">(<param><decl><type><name pos:line="2084" pos:column="33">int</name></type> <name pos:line="2084" pos:column="37">lineNumber</name></decl></param>, <param><decl><type><name pos:line="2084" pos:column="49">TCHAR</name> <type:modifier pos:line="2084" pos:column="55">*</type:modifier></type> <name pos:line="2084" pos:column="57">line</name></decl></param>, <param><decl><type><name pos:line="2084" pos:column="63">int</name></type></decl></param>)</parameter_list>
<block pos:line="2085" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="2086" pos:column="9">execute</name><argument_list pos:line="2086" pos:column="16">(<argument><expr><name pos:line="2086" pos:column="17">SCI_GETLINE</name></expr></argument>, <argument><expr><name pos:line="2086" pos:column="30">lineNumber</name></expr></argument>, <argument><expr><op:operator pos:line="2086" pos:column="42">(</op:operator><name pos:line="2086" pos:column="43">LPARAM</name><op:operator pos:line="2086" pos:column="49">)</op:operator><name pos:line="2086" pos:column="50">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif pos:line="2088" pos:column="1">#<cpp:directive pos:line="2088" pos:column="2">endif</cpp:directive></cpp:endif>



<function><type><name pos:line="2092" pos:column="1">void</name></type> <name><name pos:line="2092" pos:column="6">ScintillaEditView</name><op:operator pos:line="2092" pos:column="23">::</op:operator><name pos:line="2092" pos:column="25">addText</name></name><parameter_list pos:line="2092" pos:column="32">(<param><decl><type><name pos:line="2092" pos:column="33">int</name></type> <name pos:line="2092" pos:column="37">length</name></decl></param>, <param><decl><type><specifier pos:line="2092" pos:column="45">const</specifier> <name pos:line="2092" pos:column="51">char</name> <type:modifier pos:line="2092" pos:column="56">*</type:modifier></type><name pos:line="2092" pos:column="57">buf</name></decl></param>)</parameter_list>
<block pos:line="2093" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="2094" pos:column="9">execute</name><argument_list pos:line="2094" pos:column="16">(<argument><expr><name pos:line="2094" pos:column="17">SCI_ADDTEXT</name></expr></argument>, <argument><expr><name pos:line="2094" pos:column="30">length</name></expr></argument>, <argument><expr><op:operator pos:line="2094" pos:column="38">(</op:operator><name pos:line="2094" pos:column="39">LPARAM</name><op:operator pos:line="2094" pos:column="45">)</op:operator><name pos:line="2094" pos:column="46">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2097" pos:column="1">void</name></type> <name><name pos:line="2097" pos:column="6">ScintillaEditView</name><op:operator pos:line="2097" pos:column="23">::</op:operator><name pos:line="2097" pos:column="25">marginClick</name></name><parameter_list pos:line="2097" pos:column="36">(<param><decl><type><name pos:line="2097" pos:column="37">int</name></type> <name pos:line="2097" pos:column="41">position</name></decl></param>, <param><decl><type><name pos:line="2097" pos:column="51">int</name></type> <name pos:line="2097" pos:column="55">modifiers</name></decl></param>)</parameter_list>
<block pos:line="2098" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2099" pos:column="9">int</name></type> <name pos:line="2099" pos:column="13">lineClick</name> <init pos:line="2099" pos:column="23">= <expr><call><name pos:line="2099" pos:column="25">int</name><argument_list pos:line="2099" pos:column="28">(<argument><expr><call><name pos:line="2099" pos:column="29">execute</name><argument_list pos:line="2099" pos:column="36">(<argument><expr><name pos:line="2099" pos:column="37">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="2099" pos:column="59">position</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2099" pos:column="69">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2100" pos:column="9">int</name></type> <name pos:line="2100" pos:column="13">levelClick</name> <init pos:line="2100" pos:column="24">= <expr><call><name pos:line="2100" pos:column="26">int</name><argument_list pos:line="2100" pos:column="29">(<argument><expr><call><name pos:line="2100" pos:column="30">execute</name><argument_list pos:line="2100" pos:column="37">(<argument><expr><name pos:line="2100" pos:column="38">SCI_GETFOLDLEVEL</name></expr></argument>, <argument><expr><name pos:line="2100" pos:column="56">lineClick</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2100" pos:column="67">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2101" pos:column="9">if <condition pos:line="2101" pos:column="12">(<expr><name pos:line="2101" pos:column="13">levelClick</name> <op:operator pos:line="2101" pos:column="24">&amp;</op:operator> <name pos:line="2101" pos:column="26">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="2101" pos:column="49">
    <block pos:line="2102" pos:column="5">{
		<if pos:line="2103" pos:column="17">if <condition pos:line="2103" pos:column="20">(<expr><name pos:line="2103" pos:column="21">modifiers</name> <op:operator pos:line="2103" pos:column="31">&amp;</op:operator> <name pos:line="2103" pos:column="33">SCMOD_SHIFT</name></expr>)</condition><then pos:line="2103" pos:column="45">
        <block pos:line="2104" pos:column="9">{
			<comment type="line" pos:line="2105" pos:column="25">// Ensure all children visible</comment>
			<expr_stmt><expr><call><name pos:line="2106" pos:column="25">execute</name><argument_list pos:line="2106" pos:column="32">(<argument><expr><name pos:line="2106" pos:column="33">SCI_SETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2106" pos:column="54">lineClick</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2106" pos:column="65">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2107" pos:column="25">expand</name><argument_list pos:line="2107" pos:column="31">(<argument><expr><name pos:line="2107" pos:column="32">lineClick</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2107" pos:column="43">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2107" pos:column="49">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2107" pos:column="55">100</lit:literal></expr></argument>, <argument><expr><name pos:line="2107" pos:column="60">levelClick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
        <else pos:line="2109" pos:column="9">else <if pos:line="2109" pos:column="14">if <condition pos:line="2109" pos:column="17">(<expr><name pos:line="2109" pos:column="18">modifiers</name> <op:operator pos:line="2109" pos:column="28">&amp;</op:operator> <name pos:line="2109" pos:column="30">SCMOD_CTRL</name></expr>)</condition><then pos:line="2109" pos:column="41"> 
        <block pos:line="2110" pos:column="9">{
			<if pos:line="2111" pos:column="25">if <condition pos:line="2111" pos:column="28">(<expr><call><name pos:line="2111" pos:column="29">execute</name><argument_list pos:line="2111" pos:column="36">(<argument><expr><name pos:line="2111" pos:column="37">SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2111" pos:column="58">lineClick</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2111" pos:column="69">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2111" pos:column="72"> 
            <block pos:line="2112" pos:column="13">{
				<comment type="line" pos:line="2113" pos:column="33">// Contract this line and all children</comment>
				<expr_stmt><expr><call><name pos:line="2114" pos:column="33">execute</name><argument_list pos:line="2114" pos:column="40">(<argument><expr><name pos:line="2114" pos:column="41">SCI_SETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2114" pos:column="62">lineClick</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2114" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="2115" pos:column="33">expand</name><argument_list pos:line="2115" pos:column="39">(<argument><expr><name pos:line="2115" pos:column="40">lineClick</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2115" pos:column="51">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2115" pos:column="58">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2115" pos:column="64">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2115" pos:column="67">levelClick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> 
            <else pos:line="2117" pos:column="13">else 
            <block pos:line="2118" pos:column="13">{
				<comment type="line" pos:line="2119" pos:column="33">// Expand this line and all children</comment>
				<expr_stmt><expr><call><name pos:line="2120" pos:column="33">execute</name><argument_list pos:line="2120" pos:column="40">(<argument><expr><name pos:line="2120" pos:column="41">SCI_SETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2120" pos:column="62">lineClick</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2120" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="2121" pos:column="33">expand</name><argument_list pos:line="2121" pos:column="39">(<argument><expr><name pos:line="2121" pos:column="40">lineClick</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2121" pos:column="51">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2121" pos:column="57">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2121" pos:column="63">100</lit:literal></expr></argument>, <argument><expr><name pos:line="2121" pos:column="68">levelClick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> 
        <else pos:line="2124" pos:column="9">else 
        <block pos:line="2125" pos:column="9">{
			<comment type="line" pos:line="2126" pos:column="25">// Toggle this line</comment>
			<decl_stmt><decl><type><name pos:line="2127" pos:column="25">bool</name></type> <name pos:line="2127" pos:column="30">mode</name> <init pos:line="2127" pos:column="35">= <expr><call><name pos:line="2127" pos:column="37">isFolded</name><argument_list pos:line="2127" pos:column="45">(<argument><expr><name pos:line="2127" pos:column="46">lineClick</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="2128" pos:column="25">fold</name><argument_list pos:line="2128" pos:column="29">(<argument><expr><name pos:line="2128" pos:column="30">lineClick</name></expr></argument>, <argument><expr><op:operator pos:line="2128" pos:column="41">!</op:operator><name pos:line="2128" pos:column="42">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2129" pos:column="25">runMarkers</name><argument_list pos:line="2129" pos:column="35">(<argument><expr><lit:literal type="boolean" pos:line="2129" pos:column="36">true</lit:literal></expr></argument>, <argument><expr><name pos:line="2129" pos:column="42">lineClick</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2129" pos:column="53">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2129" pos:column="59">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if></else></if>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="2134" pos:column="1">void</name></type> <name><name pos:line="2134" pos:column="6">ScintillaEditView</name><op:operator pos:line="2134" pos:column="23">::</op:operator><name pos:line="2134" pos:column="25">expand</name></name><parameter_list pos:line="2134" pos:column="31">(<param><decl><type><name pos:line="2134" pos:column="32">int</name> <type:modifier pos:line="2134" pos:column="36">&amp;</type:modifier></type><name pos:line="2134" pos:column="37">line</name></decl></param>, <param><decl><type><name pos:line="2134" pos:column="43">bool</name></type> <name pos:line="2134" pos:column="48">doExpand</name></decl></param>, <param><decl><type><name pos:line="2134" pos:column="58">bool</name></type> <name pos:line="2134" pos:column="63">force</name></decl></param>, <param><decl><type><name pos:line="2134" pos:column="70">int</name></type> <name pos:line="2134" pos:column="74">visLevels</name></decl></param>, <param><decl><type><name pos:line="2134" pos:column="85">int</name></type> <name pos:line="2134" pos:column="89">level</name></decl></param>)</parameter_list>
<block pos:line="2135" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2136" pos:column="9">int</name></type> <name pos:line="2136" pos:column="13">lineMaxSubord</name> <init pos:line="2136" pos:column="27">= <expr><call><name pos:line="2136" pos:column="29">int</name><argument_list pos:line="2136" pos:column="32">(<argument><expr><call><name pos:line="2136" pos:column="33">execute</name><argument_list pos:line="2136" pos:column="40">(<argument><expr><name pos:line="2136" pos:column="41">SCI_GETLASTCHILD</name></expr></argument>, <argument><expr><name pos:line="2136" pos:column="59">line</name></expr></argument>, <argument><expr><name pos:line="2136" pos:column="65">level</name> <op:operator pos:line="2136" pos:column="71">&amp;</op:operator> <name pos:line="2136" pos:column="73">SC_FOLDLEVELNUMBERMASK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2137" pos:column="9">line</name><op:operator pos:line="2137" pos:column="13">++</op:operator></expr>;</expr_stmt>
	<while pos:line="2138" pos:column="9">while <condition pos:line="2138" pos:column="15">(<expr><name pos:line="2138" pos:column="16">line</name> <op:operator pos:line="2138" pos:column="21">&lt;=</op:operator> <name pos:line="2138" pos:column="24">lineMaxSubord</name></expr>)</condition>
    <block pos:line="2139" pos:column="5">{
		<if pos:line="2140" pos:column="17">if <condition pos:line="2140" pos:column="20">(<expr><name pos:line="2140" pos:column="21">force</name></expr>)</condition><then pos:line="2140" pos:column="27"> 
        <block pos:line="2141" pos:column="9">{
			<if pos:line="2142" pos:column="25">if <condition pos:line="2142" pos:column="28">(<expr><name pos:line="2142" pos:column="29">visLevels</name> <op:operator pos:line="2142" pos:column="39">&gt;</op:operator> <lit:literal type="number" pos:line="2142" pos:column="41">0</lit:literal></expr>)</condition><then pos:line="2142" pos:column="43">
				<expr_stmt><expr><call><name pos:line="2143" pos:column="33">execute</name><argument_list pos:line="2143" pos:column="40">(<argument><expr><name pos:line="2143" pos:column="41">SCI_SHOWLINES</name></expr></argument>, <argument><expr><name pos:line="2143" pos:column="56">line</name></expr></argument>, <argument><expr><name pos:line="2143" pos:column="62">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="2144" pos:column="25">else
				<expr_stmt><expr><call><name pos:line="2145" pos:column="33">execute</name><argument_list pos:line="2145" pos:column="40">(<argument><expr><name pos:line="2145" pos:column="41">SCI_HIDELINES</name></expr></argument>, <argument><expr><name pos:line="2145" pos:column="56">line</name></expr></argument>, <argument><expr><name pos:line="2145" pos:column="62">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></then> 
        <else pos:line="2147" pos:column="9">else 
        <block pos:line="2148" pos:column="9">{
			<if pos:line="2149" pos:column="25">if <condition pos:line="2149" pos:column="28">(<expr><name pos:line="2149" pos:column="29">doExpand</name></expr>)</condition><then pos:line="2149" pos:column="38">
				<expr_stmt><expr><call><name pos:line="2150" pos:column="33">execute</name><argument_list pos:line="2150" pos:column="40">(<argument><expr><name pos:line="2150" pos:column="41">SCI_SHOWLINES</name></expr></argument>, <argument><expr><name pos:line="2150" pos:column="56">line</name></expr></argument>, <argument><expr><name pos:line="2150" pos:column="62">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block></else></if>
		<decl_stmt><decl><type><name pos:line="2152" pos:column="17">int</name></type> <name pos:line="2152" pos:column="21">levelLine</name> <init pos:line="2152" pos:column="31">= <expr><name pos:line="2152" pos:column="33">level</name></expr></init></decl>;</decl_stmt>
		<if pos:line="2153" pos:column="17">if <condition pos:line="2153" pos:column="20">(<expr><name pos:line="2153" pos:column="21">levelLine</name> <op:operator pos:line="2153" pos:column="31">==</op:operator> <op:operator pos:line="2153" pos:column="34">-</op:operator><lit:literal type="number" pos:line="2153" pos:column="35">1</lit:literal></expr>)</condition><then pos:line="2153" pos:column="37">
			<expr_stmt><expr><name pos:line="2154" pos:column="25">levelLine</name> <op:operator pos:line="2154" pos:column="35">=</op:operator> <call><name pos:line="2154" pos:column="37">int</name><argument_list pos:line="2154" pos:column="40">(<argument><expr><call><name pos:line="2154" pos:column="41">execute</name><argument_list pos:line="2154" pos:column="48">(<argument><expr><name pos:line="2154" pos:column="49">SCI_GETFOLDLEVEL</name></expr></argument>, <argument><expr><name pos:line="2154" pos:column="67">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2154" pos:column="73">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="2155" pos:column="17">if <condition pos:line="2155" pos:column="20">(<expr><name pos:line="2155" pos:column="21">levelLine</name> <op:operator pos:line="2155" pos:column="31">&amp;</op:operator> <name pos:line="2155" pos:column="33">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="2155" pos:column="56">
        <block pos:line="2156" pos:column="9">{
			<if pos:line="2157" pos:column="25">if <condition pos:line="2157" pos:column="28">(<expr><name pos:line="2157" pos:column="29">force</name></expr>)</condition><then pos:line="2157" pos:column="35"> 
            <block pos:line="2158" pos:column="13">{
				<if pos:line="2159" pos:column="33">if <condition pos:line="2159" pos:column="36">(<expr><name pos:line="2159" pos:column="37">visLevels</name> <op:operator pos:line="2159" pos:column="47">&gt;</op:operator> <lit:literal type="number" pos:line="2159" pos:column="49">1</lit:literal></expr>)</condition><then pos:line="2159" pos:column="51">
					<expr_stmt><expr><call><name pos:line="2160" pos:column="41">execute</name><argument_list pos:line="2160" pos:column="48">(<argument><expr><name pos:line="2160" pos:column="49">SCI_SETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2160" pos:column="70">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2160" pos:column="76">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="2161" pos:column="33">else
					<expr_stmt><expr><call><name pos:line="2162" pos:column="41">execute</name><argument_list pos:line="2162" pos:column="48">(<argument><expr><name pos:line="2162" pos:column="49">SCI_SETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2162" pos:column="70">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2162" pos:column="76">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><call><name pos:line="2163" pos:column="33">expand</name><argument_list pos:line="2163" pos:column="39">(<argument><expr><name pos:line="2163" pos:column="40">line</name></expr></argument>, <argument><expr><name pos:line="2163" pos:column="46">doExpand</name></expr></argument>, <argument><expr><name pos:line="2163" pos:column="56">force</name></expr></argument>, <argument><expr><name pos:line="2163" pos:column="63">visLevels</name> <op:operator pos:line="2163" pos:column="73">-</op:operator> <lit:literal type="number" pos:line="2163" pos:column="75">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> 
            <else pos:line="2165" pos:column="13">else
            <block pos:line="2166" pos:column="13">{
				<if pos:line="2167" pos:column="33">if <condition pos:line="2167" pos:column="36">(<expr><name pos:line="2167" pos:column="37">doExpand</name></expr>)</condition><then pos:line="2167" pos:column="46">
                <block pos:line="2168" pos:column="17">{
					<if pos:line="2169" pos:column="41">if <condition pos:line="2169" pos:column="44">(<expr><op:operator pos:line="2169" pos:column="45">!</op:operator><call><name pos:line="2169" pos:column="46">execute</name><argument_list pos:line="2169" pos:column="53">(<argument><expr><name pos:line="2169" pos:column="54">SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2169" pos:column="75">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2169" pos:column="81">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2169" pos:column="84">
						<expr_stmt><expr><call><name pos:line="2170" pos:column="49">execute</name><argument_list pos:line="2170" pos:column="56">(<argument><expr><name pos:line="2170" pos:column="57">SCI_SETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2170" pos:column="78">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2170" pos:column="84">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

					<expr_stmt><expr><call><name pos:line="2172" pos:column="41">expand</name><argument_list pos:line="2172" pos:column="47">(<argument><expr><name pos:line="2172" pos:column="48">line</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2172" pos:column="54">true</lit:literal></expr></argument>, <argument><expr><name pos:line="2172" pos:column="60">force</name></expr></argument>, <argument><expr><name pos:line="2172" pos:column="67">visLevels</name> <op:operator pos:line="2172" pos:column="77">-</op:operator> <lit:literal type="number" pos:line="2172" pos:column="79">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> 
                <else pos:line="2174" pos:column="17">else 
                <block pos:line="2175" pos:column="17">{
					<expr_stmt><expr><call><name pos:line="2176" pos:column="41">expand</name><argument_list pos:line="2176" pos:column="47">(<argument><expr><name pos:line="2176" pos:column="48">line</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2176" pos:column="54">false</lit:literal></expr></argument>, <argument><expr><name pos:line="2176" pos:column="61">force</name></expr></argument>, <argument><expr><name pos:line="2176" pos:column="68">visLevels</name> <op:operator pos:line="2176" pos:column="78">-</op:operator> <lit:literal type="number" pos:line="2176" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></else></if>
		}</block></then>
        <else pos:line="2180" pos:column="9">else
        <block pos:line="2181" pos:column="9">{
			<expr_stmt><expr><name pos:line="2182" pos:column="25">line</name><op:operator pos:line="2182" pos:column="29">++</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>

	<expr_stmt><expr><call><name pos:line="2186" pos:column="9">runMarkers</name><argument_list pos:line="2186" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="2186" pos:column="20">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2186" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2186" pos:column="29">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2186" pos:column="35">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2189" pos:column="1">void</name></type> <name><name pos:line="2189" pos:column="6">ScintillaEditView</name><op:operator pos:line="2189" pos:column="23">::</op:operator><name pos:line="2189" pos:column="25">performGlobalStyles</name></name><parameter_list pos:line="2189" pos:column="44">()</parameter_list> 
<block pos:line="2190" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2191" pos:column="9">StyleArray</name> <type:modifier pos:line="2191" pos:column="20">&amp;</type:modifier></type> <name pos:line="2191" pos:column="22">stylers</name> <init pos:line="2191" pos:column="30">= <expr><call><name><name pos:line="2191" pos:column="32">_pParameter</name><op:operator pos:line="2191" pos:column="43">-&gt;</op:operator><name pos:line="2191" pos:column="45">getMiscStylerArray</name></name><argument_list pos:line="2191" pos:column="63">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="2193" pos:column="9">int</name></type> <name pos:line="2193" pos:column="13">i</name> <init pos:line="2193" pos:column="15">= <expr><call><name><name pos:line="2193" pos:column="17">stylers</name><op:operator pos:line="2193" pos:column="24">.</op:operator><name pos:line="2193" pos:column="25">getStylerIndexByName</name></name><argument_list pos:line="2193" pos:column="45">(<argument><expr><call><name pos:line="2193" pos:column="46">TEXT</name><argument_list pos:line="2193" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="2193" pos:column="51">"Current line background colour"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2194" pos:column="9">if <condition pos:line="2194" pos:column="12">(<expr><name pos:line="2194" pos:column="13">i</name> <op:operator pos:line="2194" pos:column="15">!=</op:operator> <op:operator pos:line="2194" pos:column="18">-</op:operator><lit:literal type="number" pos:line="2194" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="2194" pos:column="21">
	<block pos:line="2195" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2196" pos:column="17">Style</name> <type:modifier pos:line="2196" pos:column="23">&amp;</type:modifier></type> <name pos:line="2196" pos:column="25">style</name> <init pos:line="2196" pos:column="31">= <expr><call><name><name pos:line="2196" pos:column="33">stylers</name><op:operator pos:line="2196" pos:column="40">.</op:operator><name pos:line="2196" pos:column="41">getStyler</name></name><argument_list pos:line="2196" pos:column="50">(<argument><expr><name pos:line="2196" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="2197" pos:column="17">execute</name><argument_list pos:line="2197" pos:column="24">(<argument><expr><name pos:line="2197" pos:column="25">SCI_SETCARETLINEBACK</name></expr></argument>, <argument><expr><name><name pos:line="2197" pos:column="47">style</name><op:operator pos:line="2197" pos:column="52">.</op:operator><name pos:line="2197" pos:column="53">_bgColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

    <decl_stmt><decl><type><name pos:line="2200" pos:column="5">COLORREF</name></type> <name pos:line="2200" pos:column="14">selectColorBack</name> <init pos:line="2200" pos:column="30">= <expr><name pos:line="2200" pos:column="32">grey</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="2202" pos:column="9">i</name> <op:operator pos:line="2202" pos:column="11">=</op:operator> <call><name><name pos:line="2202" pos:column="13">stylers</name><op:operator pos:line="2202" pos:column="20">.</op:operator><name pos:line="2202" pos:column="21">getStylerIndexByName</name></name><argument_list pos:line="2202" pos:column="41">(<argument><expr><call><name pos:line="2202" pos:column="42">TEXT</name><argument_list pos:line="2202" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="2202" pos:column="47">"Selected text colour"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2203" pos:column="9">if <condition pos:line="2203" pos:column="12">(<expr><name pos:line="2203" pos:column="13">i</name> <op:operator pos:line="2203" pos:column="15">!=</op:operator> <op:operator pos:line="2203" pos:column="18">-</op:operator><lit:literal type="number" pos:line="2203" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="2203" pos:column="21">
    <block pos:line="2204" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="2205" pos:column="9">Style</name> <type:modifier pos:line="2205" pos:column="15">&amp;</type:modifier></type> <name pos:line="2205" pos:column="17">style</name> <init pos:line="2205" pos:column="23">= <expr><call><name><name pos:line="2205" pos:column="25">stylers</name><op:operator pos:line="2205" pos:column="32">.</op:operator><name pos:line="2205" pos:column="33">getStyler</name></name><argument_list pos:line="2205" pos:column="42">(<argument><expr><name pos:line="2205" pos:column="43">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2206" pos:column="17">selectColorBack</name> <op:operator pos:line="2206" pos:column="33">=</op:operator> <name><name pos:line="2206" pos:column="35">style</name><op:operator pos:line="2206" pos:column="40">.</op:operator><name pos:line="2206" pos:column="41">_bgColor</name></name></expr>;</expr_stmt>
    }</block></then></if>
	<expr_stmt><expr><call><name pos:line="2208" pos:column="9">execute</name><argument_list pos:line="2208" pos:column="16">(<argument><expr><name pos:line="2208" pos:column="17">SCI_SETSELBACK</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2208" pos:column="33">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2208" pos:column="36">selectColorBack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="2210" pos:column="5">COLORREF</name></type> <name pos:line="2210" pos:column="14">caretColor</name> <init pos:line="2210" pos:column="25">= <expr><name pos:line="2210" pos:column="27">black</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2211" pos:column="9">i</name> <op:operator pos:line="2211" pos:column="11">=</op:operator> <call><name><name pos:line="2211" pos:column="13">stylers</name><op:operator pos:line="2211" pos:column="20">.</op:operator><name pos:line="2211" pos:column="21">getStylerIndexByID</name></name><argument_list pos:line="2211" pos:column="39">(<argument><expr><name pos:line="2211" pos:column="40">SCI_SETCARETFORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2212" pos:column="9">if <condition pos:line="2212" pos:column="12">(<expr><name pos:line="2212" pos:column="13">i</name> <op:operator pos:line="2212" pos:column="15">!=</op:operator> <op:operator pos:line="2212" pos:column="18">-</op:operator><lit:literal type="number" pos:line="2212" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="2212" pos:column="21">
    <block pos:line="2213" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="2214" pos:column="9">Style</name> <type:modifier pos:line="2214" pos:column="15">&amp;</type:modifier></type> <name pos:line="2214" pos:column="17">style</name> <init pos:line="2214" pos:column="23">= <expr><call><name><name pos:line="2214" pos:column="25">stylers</name><op:operator pos:line="2214" pos:column="32">.</op:operator><name pos:line="2214" pos:column="33">getStyler</name></name><argument_list pos:line="2214" pos:column="42">(<argument><expr><name pos:line="2214" pos:column="43">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name pos:line="2215" pos:column="9">caretColor</name> <op:operator pos:line="2215" pos:column="20">=</op:operator> <name><name pos:line="2215" pos:column="22">style</name><op:operator pos:line="2215" pos:column="27">.</op:operator><name pos:line="2215" pos:column="28">_fgColor</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name pos:line="2217" pos:column="5">execute</name><argument_list pos:line="2217" pos:column="12">(<argument><expr><name pos:line="2217" pos:column="13">SCI_SETCARETFORE</name></expr></argument>, <argument><expr><name pos:line="2217" pos:column="31">caretColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="2219" pos:column="9">COLORREF</name></type> <name pos:line="2219" pos:column="18">edgeColor</name> <init pos:line="2219" pos:column="28">= <expr><name pos:line="2219" pos:column="30">liteGrey</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2220" pos:column="9">i</name> <op:operator pos:line="2220" pos:column="11">=</op:operator> <call><name><name pos:line="2220" pos:column="13">stylers</name><op:operator pos:line="2220" pos:column="20">.</op:operator><name pos:line="2220" pos:column="21">getStylerIndexByName</name></name><argument_list pos:line="2220" pos:column="41">(<argument><expr><call><name pos:line="2220" pos:column="42">TEXT</name><argument_list pos:line="2220" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="2220" pos:column="47">"Edge colour"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2221" pos:column="9">if <condition pos:line="2221" pos:column="12">(<expr><name pos:line="2221" pos:column="13">i</name> <op:operator pos:line="2221" pos:column="15">!=</op:operator> <op:operator pos:line="2221" pos:column="18">-</op:operator><lit:literal type="number" pos:line="2221" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="2221" pos:column="21">
	<block pos:line="2222" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2223" pos:column="17">Style</name> <type:modifier pos:line="2223" pos:column="23">&amp;</type:modifier></type> <name pos:line="2223" pos:column="25">style</name> <init pos:line="2223" pos:column="31">= <expr><call><name><name pos:line="2223" pos:column="33">stylers</name><op:operator pos:line="2223" pos:column="40">.</op:operator><name pos:line="2223" pos:column="41">getStyler</name></name><argument_list pos:line="2223" pos:column="50">(<argument><expr><name pos:line="2223" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2224" pos:column="17">edgeColor</name> <op:operator pos:line="2224" pos:column="27">=</op:operator> <name><name pos:line="2224" pos:column="29">style</name><op:operator pos:line="2224" pos:column="34">.</op:operator><name pos:line="2224" pos:column="35">_fgColor</name></name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="2226" pos:column="9">execute</name><argument_list pos:line="2226" pos:column="16">(<argument><expr><name pos:line="2226" pos:column="17">SCI_SETEDGECOLOUR</name></expr></argument>, <argument><expr><name pos:line="2226" pos:column="36">edgeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="2228" pos:column="9">COLORREF</name></type> <name pos:line="2228" pos:column="18">foldMarginColor</name> <init pos:line="2228" pos:column="34">= <expr><name pos:line="2228" pos:column="36">grey</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2229" pos:column="9">COLORREF</name></type> <name pos:line="2229" pos:column="18">foldMarginHiColor</name> <init pos:line="2229" pos:column="36">= <expr><name pos:line="2229" pos:column="38">white</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2230" pos:column="9">i</name> <op:operator pos:line="2230" pos:column="11">=</op:operator> <call><name><name pos:line="2230" pos:column="13">stylers</name><op:operator pos:line="2230" pos:column="20">.</op:operator><name pos:line="2230" pos:column="21">getStylerIndexByName</name></name><argument_list pos:line="2230" pos:column="41">(<argument><expr><call><name pos:line="2230" pos:column="42">TEXT</name><argument_list pos:line="2230" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="2230" pos:column="47">"Fold margin"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2231" pos:column="9">if <condition pos:line="2231" pos:column="12">(<expr><name pos:line="2231" pos:column="13">i</name> <op:operator pos:line="2231" pos:column="15">!=</op:operator> <op:operator pos:line="2231" pos:column="18">-</op:operator><lit:literal type="number" pos:line="2231" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="2231" pos:column="21">
	<block pos:line="2232" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2233" pos:column="17">Style</name> <type:modifier pos:line="2233" pos:column="23">&amp;</type:modifier></type> <name pos:line="2233" pos:column="25">style</name> <init pos:line="2233" pos:column="31">= <expr><call><name><name pos:line="2233" pos:column="33">stylers</name><op:operator pos:line="2233" pos:column="40">.</op:operator><name pos:line="2233" pos:column="41">getStyler</name></name><argument_list pos:line="2233" pos:column="50">(<argument><expr><name pos:line="2233" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2234" pos:column="17">foldMarginHiColor</name> <op:operator pos:line="2234" pos:column="35">=</op:operator> <name><name pos:line="2234" pos:column="37">style</name><op:operator pos:line="2234" pos:column="42">.</op:operator><name pos:line="2234" pos:column="43">_fgColor</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2235" pos:column="17">foldMarginColor</name> <op:operator pos:line="2235" pos:column="33">=</op:operator> <name><name pos:line="2235" pos:column="35">style</name><op:operator pos:line="2235" pos:column="40">.</op:operator><name pos:line="2235" pos:column="41">_bgColor</name></name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="2237" pos:column="9">execute</name><argument_list pos:line="2237" pos:column="16">(<argument><expr><name pos:line="2237" pos:column="17">SCI_SETFOLDMARGINCOLOUR</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2237" pos:column="42">true</lit:literal></expr></argument>, <argument><expr><name pos:line="2237" pos:column="48">foldMarginColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2238" pos:column="9">execute</name><argument_list pos:line="2238" pos:column="16">(<argument><expr><name pos:line="2238" pos:column="17">SCI_SETFOLDMARGINHICOLOUR</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2238" pos:column="44">true</lit:literal></expr></argument>, <argument><expr><name pos:line="2238" pos:column="50">foldMarginHiColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="2240" pos:column="9">COLORREF</name></type> <name pos:line="2240" pos:column="18">foldfgColor</name> <init pos:line="2240" pos:column="30">= <expr><name pos:line="2240" pos:column="32">white</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2241" pos:column="9">COLORREF</name></type> <name pos:line="2241" pos:column="18">foldbgColor</name> <init pos:line="2241" pos:column="30">= <expr><name pos:line="2241" pos:column="32">grey</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2242" pos:column="9">i</name> <op:operator pos:line="2242" pos:column="11">=</op:operator> <call><name><name pos:line="2242" pos:column="13">stylers</name><op:operator pos:line="2242" pos:column="20">.</op:operator><name pos:line="2242" pos:column="21">getStylerIndexByName</name></name><argument_list pos:line="2242" pos:column="41">(<argument><expr><call><name pos:line="2242" pos:column="42">TEXT</name><argument_list pos:line="2242" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="2242" pos:column="47">"Fold"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2243" pos:column="9">if <condition pos:line="2243" pos:column="12">(<expr><name pos:line="2243" pos:column="13">i</name> <op:operator pos:line="2243" pos:column="15">!=</op:operator> <op:operator pos:line="2243" pos:column="18">-</op:operator><lit:literal type="number" pos:line="2243" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="2243" pos:column="21">
	<block pos:line="2244" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2245" pos:column="17">Style</name> <type:modifier pos:line="2245" pos:column="23">&amp;</type:modifier></type> <name pos:line="2245" pos:column="25">style</name> <init pos:line="2245" pos:column="31">= <expr><call><name><name pos:line="2245" pos:column="33">stylers</name><op:operator pos:line="2245" pos:column="40">.</op:operator><name pos:line="2245" pos:column="41">getStyler</name></name><argument_list pos:line="2245" pos:column="50">(<argument><expr><name pos:line="2245" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2246" pos:column="17">foldfgColor</name> <op:operator pos:line="2246" pos:column="29">=</op:operator> <name><name pos:line="2246" pos:column="31">style</name><op:operator pos:line="2246" pos:column="36">.</op:operator><name pos:line="2246" pos:column="37">_bgColor</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2247" pos:column="17">foldbgColor</name> <op:operator pos:line="2247" pos:column="29">=</op:operator> <name><name pos:line="2247" pos:column="31">style</name><op:operator pos:line="2247" pos:column="36">.</op:operator><name pos:line="2247" pos:column="37">_fgColor</name></name></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="2250" pos:column="9">COLORREF</name></type> <name pos:line="2250" pos:column="18">activeFoldFgColor</name> <init pos:line="2250" pos:column="36">= <expr><name pos:line="2250" pos:column="38">red</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2251" pos:column="9">i</name> <op:operator pos:line="2251" pos:column="11">=</op:operator> <call><name><name pos:line="2251" pos:column="13">stylers</name><op:operator pos:line="2251" pos:column="20">.</op:operator><name pos:line="2251" pos:column="21">getStylerIndexByName</name></name><argument_list pos:line="2251" pos:column="41">(<argument><expr><call><name pos:line="2251" pos:column="42">TEXT</name><argument_list pos:line="2251" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="2251" pos:column="47">"Fold active"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2252" pos:column="9">if <condition pos:line="2252" pos:column="12">(<expr><name pos:line="2252" pos:column="13">i</name> <op:operator pos:line="2252" pos:column="15">!=</op:operator> <op:operator pos:line="2252" pos:column="18">-</op:operator><lit:literal type="number" pos:line="2252" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="2252" pos:column="21">
	<block pos:line="2253" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2254" pos:column="17">Style</name> <type:modifier pos:line="2254" pos:column="23">&amp;</type:modifier></type> <name pos:line="2254" pos:column="25">style</name> <init pos:line="2254" pos:column="31">= <expr><call><name><name pos:line="2254" pos:column="33">stylers</name><op:operator pos:line="2254" pos:column="40">.</op:operator><name pos:line="2254" pos:column="41">getStyler</name></name><argument_list pos:line="2254" pos:column="50">(<argument><expr><name pos:line="2254" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2255" pos:column="17">activeFoldFgColor</name> <op:operator pos:line="2255" pos:column="35">=</op:operator> <name><name pos:line="2255" pos:column="37">style</name><op:operator pos:line="2255" pos:column="42">.</op:operator><name pos:line="2255" pos:column="43">_fgColor</name></name></expr>;</expr_stmt>
	}</block></then></if>


	<decl_stmt><decl><type><name pos:line="2259" pos:column="9">ScintillaViewParams</name> <type:modifier pos:line="2259" pos:column="29">&amp;</type:modifier></type> <name pos:line="2259" pos:column="31">svp</name> <init pos:line="2259" pos:column="35">= <expr><op:operator pos:line="2259" pos:column="37">(</op:operator><name pos:line="2259" pos:column="38">ScintillaViewParams</name> <op:operator pos:line="2259" pos:column="58">&amp;</op:operator><op:operator pos:line="2259" pos:column="59">)</op:operator><call><name><name pos:line="2259" pos:column="60">_pParameter</name><op:operator pos:line="2259" pos:column="71">-&gt;</op:operator><name pos:line="2259" pos:column="73">getSVP</name></name><argument_list pos:line="2259" pos:column="79">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for pos:line="2260" pos:column="9">for (<init><decl><type><name pos:line="2260" pos:column="14">int</name></type> <name pos:line="2260" pos:column="18">j</name> <init pos:line="2260" pos:column="20">= <expr><lit:literal type="number" pos:line="2260" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2260" pos:column="26">j</name> <op:operator pos:line="2260" pos:column="28">&lt;</op:operator> <name pos:line="2260" pos:column="30">NB_FOLDER_STATE</name></expr> ;</condition> <incr><expr><name pos:line="2260" pos:column="48">j</name><op:operator pos:line="2260" pos:column="49">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name pos:line="2261" pos:column="17">defineMarker</name><argument_list pos:line="2261" pos:column="29">(<argument><expr><name><name pos:line="2261" pos:column="30">_markersArray</name><index pos:line="2261" pos:column="43">[<expr><name pos:line="2261" pos:column="44">FOLDER_TYPE</name></expr>]</index><index pos:line="2261" pos:column="56">[<expr><name pos:line="2261" pos:column="57">j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="2261" pos:column="61">_markersArray</name><index pos:line="2261" pos:column="74">[<expr><name><name pos:line="2261" pos:column="75">svp</name><op:operator pos:line="2261" pos:column="78">.</op:operator><name pos:line="2261" pos:column="79">_folderStyle</name></name></expr>]</index><index pos:line="2261" pos:column="92">[<expr><name pos:line="2261" pos:column="93">j</name></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="2261" pos:column="97">foldfgColor</name></expr></argument>, <argument><expr><name pos:line="2261" pos:column="110">foldbgColor</name></expr></argument>, <argument><expr><name pos:line="2261" pos:column="123">activeFoldFgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

	<expr_stmt><expr><call><name pos:line="2263" pos:column="9">execute</name><argument_list pos:line="2263" pos:column="16">(<argument><expr><name pos:line="2263" pos:column="17">SCI_MARKERENABLEHIGHLIGHT</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2263" pos:column="44">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="2265" pos:column="9">COLORREF</name></type> <name pos:line="2265" pos:column="18">wsSymbolFgColor</name> <init pos:line="2265" pos:column="34">= <expr><name pos:line="2265" pos:column="36">black</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2266" pos:column="9">i</name> <op:operator pos:line="2266" pos:column="11">=</op:operator> <call><name><name pos:line="2266" pos:column="13">stylers</name><op:operator pos:line="2266" pos:column="20">.</op:operator><name pos:line="2266" pos:column="21">getStylerIndexByName</name></name><argument_list pos:line="2266" pos:column="41">(<argument><expr><call><name pos:line="2266" pos:column="42">TEXT</name><argument_list pos:line="2266" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="2266" pos:column="47">"White space symbol"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="2267" pos:column="9">if <condition pos:line="2267" pos:column="12">(<expr><name pos:line="2267" pos:column="13">i</name> <op:operator pos:line="2267" pos:column="15">!=</op:operator> <op:operator pos:line="2267" pos:column="18">-</op:operator><lit:literal type="number" pos:line="2267" pos:column="19">1</lit:literal></expr>)</condition><then pos:line="2267" pos:column="21">
	<block pos:line="2268" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2269" pos:column="17">Style</name> <type:modifier pos:line="2269" pos:column="23">&amp;</type:modifier></type> <name pos:line="2269" pos:column="25">style</name> <init pos:line="2269" pos:column="31">= <expr><call><name><name pos:line="2269" pos:column="33">stylers</name><op:operator pos:line="2269" pos:column="40">.</op:operator><name pos:line="2269" pos:column="41">getStyler</name></name><argument_list pos:line="2269" pos:column="50">(<argument><expr><name pos:line="2269" pos:column="51">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="2270" pos:column="17">wsSymbolFgColor</name> <op:operator pos:line="2270" pos:column="33">=</op:operator> <name><name pos:line="2270" pos:column="35">style</name><op:operator pos:line="2270" pos:column="40">.</op:operator><name pos:line="2270" pos:column="41">_fgColor</name></name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="2272" pos:column="9">execute</name><argument_list pos:line="2272" pos:column="16">(<argument><expr><name pos:line="2272" pos:column="17">SCI_SETWHITESPACEFORE</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2272" pos:column="40">true</lit:literal></expr></argument>, <argument><expr><name pos:line="2272" pos:column="46">wsSymbolFgColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2275" pos:column="1">void</name></type> <name><name pos:line="2275" pos:column="6">ScintillaEditView</name><op:operator pos:line="2275" pos:column="23">::</op:operator><name pos:line="2275" pos:column="25">setLineIndent</name></name><parameter_list pos:line="2275" pos:column="38">(<param><decl><type><name pos:line="2275" pos:column="39">int</name></type> <name pos:line="2275" pos:column="43">line</name></decl></param>, <param><decl><type><name pos:line="2275" pos:column="49">int</name></type> <name pos:line="2275" pos:column="53">indent</name></decl></param>)</parameter_list> <specifier pos:line="2275" pos:column="61">const</specifier> <block pos:line="2275" pos:column="67">{
	<if pos:line="2276" pos:column="9">if <condition pos:line="2276" pos:column="12">(<expr><name pos:line="2276" pos:column="13">indent</name> <op:operator pos:line="2276" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="2276" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="2276" pos:column="24">
		<return pos:line="2277" pos:column="17">return;</return></then></if>
	<decl_stmt><decl><type><name pos:line="2278" pos:column="9">CharacterRange</name></type> <name pos:line="2278" pos:column="24">crange</name> <init pos:line="2278" pos:column="31">= <expr><call><name pos:line="2278" pos:column="33">getSelection</name><argument_list pos:line="2278" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2279" pos:column="9">int</name></type> <name pos:line="2279" pos:column="13">posBefore</name> <init pos:line="2279" pos:column="23">= <expr><call><name pos:line="2279" pos:column="25">execute</name><argument_list pos:line="2279" pos:column="32">(<argument><expr><name pos:line="2279" pos:column="33">SCI_GETLINEINDENTPOSITION</name></expr></argument>, <argument><expr><name pos:line="2279" pos:column="60">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2280" pos:column="9">execute</name><argument_list pos:line="2280" pos:column="16">(<argument><expr><name pos:line="2280" pos:column="17">SCI_SETLINEINDENTATION</name></expr></argument>, <argument><expr><name pos:line="2280" pos:column="41">line</name></expr></argument>, <argument><expr><name pos:line="2280" pos:column="47">indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="2281" pos:column="9">int</name></type> <name pos:line="2281" pos:column="13">posAfter</name> <init pos:line="2281" pos:column="22">= <expr><call><name pos:line="2281" pos:column="24">execute</name><argument_list pos:line="2281" pos:column="31">(<argument><expr><name pos:line="2281" pos:column="32">SCI_GETLINEINDENTPOSITION</name></expr></argument>, <argument><expr><name pos:line="2281" pos:column="59">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2282" pos:column="9">int</name></type> <name pos:line="2282" pos:column="13">posDifference</name> <init pos:line="2282" pos:column="27">= <expr><name pos:line="2282" pos:column="29">posAfter</name> <op:operator pos:line="2282" pos:column="38">-</op:operator> <name pos:line="2282" pos:column="40">posBefore</name></expr></init></decl>;</decl_stmt>
	<if pos:line="2283" pos:column="9">if <condition pos:line="2283" pos:column="12">(<expr><name pos:line="2283" pos:column="13">posAfter</name> <op:operator pos:line="2283" pos:column="22">&gt;</op:operator> <name pos:line="2283" pos:column="24">posBefore</name></expr>)</condition><then pos:line="2283" pos:column="34"> <block pos:line="2283" pos:column="35">{
		<comment type="line" pos:line="2284" pos:column="17">// Move selection on</comment>
		<if pos:line="2285" pos:column="17">if <condition pos:line="2285" pos:column="20">(<expr><name><name pos:line="2285" pos:column="21">crange</name><op:operator pos:line="2285" pos:column="27">.</op:operator><name pos:line="2285" pos:column="28">cpMin</name></name> <op:operator pos:line="2285" pos:column="34">&gt;=</op:operator> <name pos:line="2285" pos:column="37">posBefore</name></expr>)</condition><then pos:line="2285" pos:column="47"> <block pos:line="2285" pos:column="48">{
			<expr_stmt><expr><name><name pos:line="2286" pos:column="25">crange</name><op:operator pos:line="2286" pos:column="31">.</op:operator><name pos:line="2286" pos:column="32">cpMin</name></name> <op:operator pos:line="2286" pos:column="38">+=</op:operator> <name pos:line="2286" pos:column="41">posDifference</name></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="2288" pos:column="17">if <condition pos:line="2288" pos:column="20">(<expr><name><name pos:line="2288" pos:column="21">crange</name><op:operator pos:line="2288" pos:column="27">.</op:operator><name pos:line="2288" pos:column="28">cpMax</name></name> <op:operator pos:line="2288" pos:column="34">&gt;=</op:operator> <name pos:line="2288" pos:column="37">posBefore</name></expr>)</condition><then pos:line="2288" pos:column="47"> <block pos:line="2288" pos:column="48">{
			<expr_stmt><expr><name><name pos:line="2289" pos:column="25">crange</name><op:operator pos:line="2289" pos:column="31">.</op:operator><name pos:line="2289" pos:column="32">cpMax</name></name> <op:operator pos:line="2289" pos:column="38">+=</op:operator> <name pos:line="2289" pos:column="41">posDifference</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then> <else pos:line="2291" pos:column="11">else <if pos:line="2291" pos:column="16">if <condition pos:line="2291" pos:column="19">(<expr><name pos:line="2291" pos:column="20">posAfter</name> <op:operator pos:line="2291" pos:column="29">&lt;</op:operator> <name pos:line="2291" pos:column="31">posBefore</name></expr>)</condition><then pos:line="2291" pos:column="41"> <block pos:line="2291" pos:column="42">{
		<comment type="line" pos:line="2292" pos:column="17">// Move selection back</comment>
		<if pos:line="2293" pos:column="17">if <condition pos:line="2293" pos:column="20">(<expr><name><name pos:line="2293" pos:column="21">crange</name><op:operator pos:line="2293" pos:column="27">.</op:operator><name pos:line="2293" pos:column="28">cpMin</name></name> <op:operator pos:line="2293" pos:column="34">&gt;=</op:operator> <name pos:line="2293" pos:column="37">posAfter</name></expr>)</condition><then pos:line="2293" pos:column="46"> <block pos:line="2293" pos:column="47">{
			<if pos:line="2294" pos:column="25">if <condition pos:line="2294" pos:column="28">(<expr><name><name pos:line="2294" pos:column="29">crange</name><op:operator pos:line="2294" pos:column="35">.</op:operator><name pos:line="2294" pos:column="36">cpMin</name></name> <op:operator pos:line="2294" pos:column="42">&gt;=</op:operator> <name pos:line="2294" pos:column="45">posBefore</name></expr>)</condition><then pos:line="2294" pos:column="55">
				<expr_stmt><expr><name><name pos:line="2295" pos:column="33">crange</name><op:operator pos:line="2295" pos:column="39">.</op:operator><name pos:line="2295" pos:column="40">cpMin</name></name> <op:operator pos:line="2295" pos:column="46">+=</op:operator> <name pos:line="2295" pos:column="49">posDifference</name></expr>;</expr_stmt></then>
			<else pos:line="2296" pos:column="25">else
				<expr_stmt><expr><name><name pos:line="2297" pos:column="33">crange</name><op:operator pos:line="2297" pos:column="39">.</op:operator><name pos:line="2297" pos:column="40">cpMin</name></name> <op:operator pos:line="2297" pos:column="46">=</op:operator> <name pos:line="2297" pos:column="48">posAfter</name></expr>;</expr_stmt></else></if>
		}</block></then></if>
		<if pos:line="2299" pos:column="17">if <condition pos:line="2299" pos:column="20">(<expr><name><name pos:line="2299" pos:column="21">crange</name><op:operator pos:line="2299" pos:column="27">.</op:operator><name pos:line="2299" pos:column="28">cpMax</name></name> <op:operator pos:line="2299" pos:column="34">&gt;=</op:operator> <name pos:line="2299" pos:column="37">posAfter</name></expr>)</condition><then pos:line="2299" pos:column="46"> <block pos:line="2299" pos:column="47">{
			<if pos:line="2300" pos:column="25">if <condition pos:line="2300" pos:column="28">(<expr><name><name pos:line="2300" pos:column="29">crange</name><op:operator pos:line="2300" pos:column="35">.</op:operator><name pos:line="2300" pos:column="36">cpMax</name></name> <op:operator pos:line="2300" pos:column="42">&gt;=</op:operator> <name pos:line="2300" pos:column="45">posBefore</name></expr>)</condition><then pos:line="2300" pos:column="55">
				<expr_stmt><expr><name><name pos:line="2301" pos:column="33">crange</name><op:operator pos:line="2301" pos:column="39">.</op:operator><name pos:line="2301" pos:column="40">cpMax</name></name> <op:operator pos:line="2301" pos:column="46">+=</op:operator> <name pos:line="2301" pos:column="49">posDifference</name></expr>;</expr_stmt></then>
			<else pos:line="2302" pos:column="25">else
				<expr_stmt><expr><name><name pos:line="2303" pos:column="33">crange</name><op:operator pos:line="2303" pos:column="39">.</op:operator><name pos:line="2303" pos:column="40">cpMax</name></name> <op:operator pos:line="2303" pos:column="46">=</op:operator> <name pos:line="2303" pos:column="48">posAfter</name></expr>;</expr_stmt></else></if>
		}</block></then></if>
	}</block></then></if></else></if>
	<expr_stmt><expr><call><name pos:line="2306" pos:column="9">execute</name><argument_list pos:line="2306" pos:column="16">(<argument><expr><name pos:line="2306" pos:column="17">SCI_SETSEL</name></expr></argument>, <argument><expr><name><name pos:line="2306" pos:column="29">crange</name><op:operator pos:line="2306" pos:column="35">.</op:operator><name pos:line="2306" pos:column="36">cpMin</name></name></expr></argument>, <argument><expr><name><name pos:line="2306" pos:column="43">crange</name><op:operator pos:line="2306" pos:column="49">.</op:operator><name pos:line="2306" pos:column="50">cpMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="2309" pos:column="1">const</specifier> <name pos:line="2309" pos:column="7">char</name> <type:modifier pos:line="2309" pos:column="12">*</type:modifier></type> <name><name pos:line="2309" pos:column="14">ScintillaEditView</name><op:operator pos:line="2309" pos:column="31">::</op:operator><name pos:line="2309" pos:column="33">getCompleteKeywordList</name></name><parameter_list pos:line="2309" pos:column="55">(<param><decl><type><name><name pos:line="2309" pos:column="56">std</name><op:operator pos:line="2309" pos:column="59">::</op:operator><name><name pos:line="2309" pos:column="61">basic_string</name><argument_list pos:line="2309" pos:column="73">&lt;<argument><expr><name pos:line="2309" pos:column="74">char</name></expr></argument>&gt;</argument_list></name></name> <type:modifier pos:line="2309" pos:column="80">&amp;</type:modifier></type> <name pos:line="2309" pos:column="82">kwl</name></decl></param>, <param><decl><type><name pos:line="2309" pos:column="87">LangType</name></type> <name pos:line="2309" pos:column="96">langType</name></decl></param>, <param><decl><type><name pos:line="2309" pos:column="106">int</name></type> <name pos:line="2309" pos:column="110">keywordIndex</name></decl></param>)</parameter_list>
<block pos:line="2310" pos:column="1">{
	<expr_stmt><expr><name pos:line="2311" pos:column="9">kwl</name> <op:operator pos:line="2311" pos:column="13">+=</op:operator> <lit:literal type="string" pos:line="2311" pos:column="16">" "</lit:literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier pos:line="2312" pos:column="9">const</specifier> <name pos:line="2312" pos:column="15">TCHAR</name> <type:modifier pos:line="2312" pos:column="21">*</type:modifier></type><name pos:line="2312" pos:column="22">defKwl_generic</name> <init pos:line="2312" pos:column="37">= <expr><call><name><name pos:line="2312" pos:column="39">_pParameter</name><op:operator pos:line="2312" pos:column="50">-&gt;</op:operator><name pos:line="2312" pos:column="52">getWordList</name></name><argument_list pos:line="2312" pos:column="63">(<argument><expr><name pos:line="2312" pos:column="64">langType</name></expr></argument>, <argument><expr><name pos:line="2312" pos:column="74">keywordIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
<cpp:ifdef pos:line="2314" pos:column="1">#<cpp:directive pos:line="2314" pos:column="2">ifdef</cpp:directive> <name pos:line="2314" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="2315" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="2315" pos:column="28">*</type:modifier></type><name pos:line="2315" pos:column="29">wmc</name> <init pos:line="2315" pos:column="33">= <expr><call><name><name pos:line="2315" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="2315" pos:column="53">::</op:operator><name pos:line="2315" pos:column="55">getInstance</name></name><argument_list pos:line="2315" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="2316" pos:column="9">const</specifier> <name pos:line="2316" pos:column="15">char</name> <type:modifier pos:line="2316" pos:column="20">*</type:modifier></type> <name pos:line="2316" pos:column="22">defKwl</name> <init pos:line="2316" pos:column="29">= <expr><call><name><name pos:line="2316" pos:column="31">wmc</name><op:operator pos:line="2316" pos:column="34">-&gt;</op:operator><name pos:line="2316" pos:column="36">wchar2char</name></name><argument_list pos:line="2316" pos:column="46">(<argument><expr><name pos:line="2316" pos:column="47">defKwl_generic</name></expr></argument>, <argument><expr><name pos:line="2316" pos:column="63">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="2317" pos:column="9">kwl</name> <op:operator pos:line="2317" pos:column="13">+=</op:operator> <name pos:line="2317" pos:column="16">defKwl</name><op:operator pos:line="2317" pos:column="22">?</op:operator><name pos:line="2317" pos:column="23">defKwl</name><op:operator pos:line="2317" pos:column="29">:</op:operator><lit:literal type="string" pos:line="2317" pos:column="30">""</lit:literal></expr>;</expr_stmt>
<cpp:else pos:line="2318" pos:column="1">#<cpp:directive pos:line="2318" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><name pos:line="2319" pos:column="9">kwl</name> <op:operator pos:line="2319" pos:column="13">+=</op:operator> <name pos:line="2319" pos:column="16">defKwl_generic</name><op:operator pos:line="2319" pos:column="30">?</op:operator><name pos:line="2319" pos:column="31">defKwl_generic</name><op:operator pos:line="2319" pos:column="45">:</op:operator><lit:literal type="string" pos:line="2319" pos:column="46">""</lit:literal></expr>;</expr_stmt>
<cpp:endif pos:line="2320" pos:column="1">#<cpp:directive pos:line="2320" pos:column="2">endif</cpp:directive></cpp:endif>

	<return pos:line="2322" pos:column="9">return <expr><call><name><name pos:line="2322" pos:column="16">kwl</name><op:operator pos:line="2322" pos:column="19">.</op:operator><name pos:line="2322" pos:column="20">c_str</name></name><argument_list pos:line="2322" pos:column="25">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2325" pos:column="1">void</name></type> <name><name pos:line="2325" pos:column="6">ScintillaEditView</name><op:operator pos:line="2325" pos:column="23">::</op:operator><name pos:line="2325" pos:column="25">setMultiSelections</name></name><parameter_list pos:line="2325" pos:column="43">(<param><decl><type><specifier pos:line="2325" pos:column="44">const</specifier> <name pos:line="2325" pos:column="50">ColumnModeInfos</name> <type:modifier pos:line="2325" pos:column="66">&amp;</type:modifier></type> <name pos:line="2325" pos:column="68">cmi</name></decl></param>)</parameter_list>
<block pos:line="2326" pos:column="1">{
	<for pos:line="2327" pos:column="9">for (<init><decl><type><name pos:line="2327" pos:column="14">size_t</name></type> <name pos:line="2327" pos:column="21">i</name> <init pos:line="2327" pos:column="23">= <expr><lit:literal type="number" pos:line="2327" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2327" pos:column="29">i</name> <op:operator pos:line="2327" pos:column="31">&lt;</op:operator> <call><name><name pos:line="2327" pos:column="33">cmi</name><op:operator pos:line="2327" pos:column="36">.</op:operator><name pos:line="2327" pos:column="37">size</name></name><argument_list pos:line="2327" pos:column="41">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="2327" pos:column="46">i</name><op:operator pos:line="2327" pos:column="47">++</op:operator></expr></incr>)
	<block pos:line="2328" pos:column="9">{
		<if pos:line="2329" pos:column="17">if <condition pos:line="2329" pos:column="20">(<expr><name><name pos:line="2329" pos:column="21">cmi</name><index pos:line="2329" pos:column="24">[<expr><name pos:line="2329" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="2329" pos:column="27">.</op:operator><call><name pos:line="2329" pos:column="28">isValid</name><argument_list pos:line="2329" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="2329" pos:column="38">
		<block pos:line="2330" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="2331" pos:column="25">int</name></type> <name pos:line="2331" pos:column="29">selStart</name> <init pos:line="2331" pos:column="38">= <expr><name><name pos:line="2331" pos:column="40">cmi</name><index pos:line="2331" pos:column="43">[<expr><name pos:line="2331" pos:column="44">i</name></expr>]</index></name><op:operator pos:line="2331" pos:column="46">.</op:operator><name pos:line="2331" pos:column="47">_direction</name> <op:operator pos:line="2331" pos:column="58">==</op:operator> <name pos:line="2331" pos:column="61">L2R</name><op:operator pos:line="2331" pos:column="64">?</op:operator><name><name pos:line="2331" pos:column="65">cmi</name><index pos:line="2331" pos:column="68">[<expr><name pos:line="2331" pos:column="69">i</name></expr>]</index></name><op:operator pos:line="2331" pos:column="71">.</op:operator><name pos:line="2331" pos:column="72">_selLpos</name><op:operator pos:line="2331" pos:column="80">:</op:operator><name><name pos:line="2331" pos:column="81">cmi</name><index pos:line="2331" pos:column="84">[<expr><name pos:line="2331" pos:column="85">i</name></expr>]</index></name><op:operator pos:line="2331" pos:column="87">.</op:operator><name pos:line="2331" pos:column="88">_selRpos</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2332" pos:column="25">int</name></type> <name pos:line="2332" pos:column="29">selEnd</name>   <init pos:line="2332" pos:column="38">= <expr><name><name pos:line="2332" pos:column="40">cmi</name><index pos:line="2332" pos:column="43">[<expr><name pos:line="2332" pos:column="44">i</name></expr>]</index></name><op:operator pos:line="2332" pos:column="46">.</op:operator><name pos:line="2332" pos:column="47">_direction</name> <op:operator pos:line="2332" pos:column="58">==</op:operator> <name pos:line="2332" pos:column="61">L2R</name><op:operator pos:line="2332" pos:column="64">?</op:operator><name><name pos:line="2332" pos:column="65">cmi</name><index pos:line="2332" pos:column="68">[<expr><name pos:line="2332" pos:column="69">i</name></expr>]</index></name><op:operator pos:line="2332" pos:column="71">.</op:operator><name pos:line="2332" pos:column="72">_selRpos</name><op:operator pos:line="2332" pos:column="80">:</op:operator><name><name pos:line="2332" pos:column="81">cmi</name><index pos:line="2332" pos:column="84">[<expr><name pos:line="2332" pos:column="85">i</name></expr>]</index></name><op:operator pos:line="2332" pos:column="87">.</op:operator><name pos:line="2332" pos:column="88">_selLpos</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="2333" pos:column="25">execute</name><argument_list pos:line="2333" pos:column="32">(<argument><expr><name pos:line="2333" pos:column="33">SCI_SETSELECTIONNSTART</name></expr></argument>, <argument><expr><name pos:line="2333" pos:column="57">i</name></expr></argument>, <argument><expr><name pos:line="2333" pos:column="60">selStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2334" pos:column="25">execute</name><argument_list pos:line="2334" pos:column="32">(<argument><expr><name pos:line="2334" pos:column="33">SCI_SETSELECTIONNEND</name></expr></argument>, <argument><expr><name pos:line="2334" pos:column="55">i</name></expr></argument>, <argument><expr><name pos:line="2334" pos:column="58">selEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="2336" pos:column="17">//if (cmi[i].hasVirtualSpace())</comment>
		<comment type="line" pos:line="2337" pos:column="17">//{</comment>
		<if pos:line="2338" pos:column="17">if <condition pos:line="2338" pos:column="20">(<expr><name><name pos:line="2338" pos:column="21">cmi</name><index pos:line="2338" pos:column="24">[<expr><name pos:line="2338" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="2338" pos:column="27">.</op:operator><name pos:line="2338" pos:column="28">_nbVirtualAnchorSpc</name></expr>)</condition><then pos:line="2338" pos:column="48">
			<expr_stmt><expr><call><name pos:line="2339" pos:column="25">execute</name><argument_list pos:line="2339" pos:column="32">(<argument><expr><name pos:line="2339" pos:column="33">SCI_SETSELECTIONNANCHORVIRTUALSPACE</name></expr></argument>, <argument><expr><name pos:line="2339" pos:column="70">i</name></expr></argument>, <argument><expr><name><name pos:line="2339" pos:column="73">cmi</name><index pos:line="2339" pos:column="76">[<expr><name pos:line="2339" pos:column="77">i</name></expr>]</index></name><op:operator pos:line="2339" pos:column="79">.</op:operator><name pos:line="2339" pos:column="80">_nbVirtualAnchorSpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="2340" pos:column="17">if <condition pos:line="2340" pos:column="20">(<expr><name><name pos:line="2340" pos:column="21">cmi</name><index pos:line="2340" pos:column="24">[<expr><name pos:line="2340" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="2340" pos:column="27">.</op:operator><name pos:line="2340" pos:column="28">_nbVirtualCaretSpc</name></expr>)</condition><then pos:line="2340" pos:column="47">
			<expr_stmt><expr><call><name pos:line="2341" pos:column="25">execute</name><argument_list pos:line="2341" pos:column="32">(<argument><expr><name pos:line="2341" pos:column="33">SCI_SETSELECTIONNCARETVIRTUALSPACE</name></expr></argument>, <argument><expr><name pos:line="2341" pos:column="69">i</name></expr></argument>, <argument><expr><name><name pos:line="2341" pos:column="72">cmi</name><index pos:line="2341" pos:column="75">[<expr><name pos:line="2341" pos:column="76">i</name></expr>]</index></name><op:operator pos:line="2341" pos:column="78">.</op:operator><name pos:line="2341" pos:column="79">_nbVirtualCaretSpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<comment type="line" pos:line="2342" pos:column="17">//}</comment>
	}</block></for>
}</block></function>

<function><type><name pos:line="2346" pos:column="1">void</name></type> <name><name pos:line="2346" pos:column="6">ScintillaEditView</name><op:operator pos:line="2346" pos:column="23">::</op:operator><name pos:line="2346" pos:column="25">currentLineUp</name></name><parameter_list pos:line="2346" pos:column="38">()</parameter_list> <specifier pos:line="2346" pos:column="41">const</specifier> 
<block pos:line="2347" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2348" pos:column="9">int</name></type> <name pos:line="2348" pos:column="13">currentLine</name> <init pos:line="2348" pos:column="25">= <expr><call><name pos:line="2348" pos:column="27">getCurrentLineNumber</name><argument_list pos:line="2348" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2349" pos:column="9">if <condition pos:line="2349" pos:column="12">(<expr><name pos:line="2349" pos:column="13">currentLine</name> <op:operator pos:line="2349" pos:column="25">!=</op:operator> <lit:literal type="number" pos:line="2349" pos:column="28">0</lit:literal></expr>)</condition><then pos:line="2349" pos:column="30">
	<block pos:line="2350" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="2351" pos:column="17">execute</name><argument_list pos:line="2351" pos:column="24">(<argument><expr><name pos:line="2351" pos:column="25">SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2352" pos:column="17">currentLine</name><op:operator pos:line="2352" pos:column="28">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2353" pos:column="17">execute</name><argument_list pos:line="2353" pos:column="24">(<argument><expr><name pos:line="2353" pos:column="25">SCI_LINETRANSPOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2354" pos:column="17">execute</name><argument_list pos:line="2354" pos:column="24">(<argument><expr><name pos:line="2354" pos:column="25">SCI_GOTOLINE</name></expr></argument>, <argument><expr><name pos:line="2354" pos:column="39">currentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2355" pos:column="17">execute</name><argument_list pos:line="2355" pos:column="24">(<argument><expr><name pos:line="2355" pos:column="25">SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="2359" pos:column="1">void</name></type> <name><name pos:line="2359" pos:column="6">ScintillaEditView</name><op:operator pos:line="2359" pos:column="23">::</op:operator><name pos:line="2359" pos:column="25">currentLineDown</name></name><parameter_list pos:line="2359" pos:column="40">()</parameter_list> <specifier pos:line="2359" pos:column="43">const</specifier> 
<block pos:line="2360" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2361" pos:column="9">int</name></type> <name pos:line="2361" pos:column="13">currentLine</name> <init pos:line="2361" pos:column="25">= <expr><call><name pos:line="2361" pos:column="27">getCurrentLineNumber</name><argument_list pos:line="2361" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2362" pos:column="9">if <condition pos:line="2362" pos:column="12">(<expr><name pos:line="2362" pos:column="13">currentLine</name> <op:operator pos:line="2362" pos:column="25">!=</op:operator> <op:operator pos:line="2362" pos:column="28">(</op:operator><call><name pos:line="2362" pos:column="29">execute</name><argument_list pos:line="2362" pos:column="36">(<argument><expr><name pos:line="2362" pos:column="37">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call> <op:operator pos:line="2362" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="2362" pos:column="57">1</lit:literal><op:operator pos:line="2362" pos:column="58">)</op:operator></expr>)</condition><then pos:line="2362" pos:column="60">
	<block pos:line="2363" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="2364" pos:column="17">execute</name><argument_list pos:line="2364" pos:column="24">(<argument><expr><name pos:line="2364" pos:column="25">SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="2365" pos:column="17">currentLine</name><op:operator pos:line="2365" pos:column="28">++</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2366" pos:column="17">execute</name><argument_list pos:line="2366" pos:column="24">(<argument><expr><name pos:line="2366" pos:column="25">SCI_GOTOLINE</name></expr></argument>, <argument><expr><name pos:line="2366" pos:column="39">currentLine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2367" pos:column="17">execute</name><argument_list pos:line="2367" pos:column="24">(<argument><expr><name pos:line="2367" pos:column="25">SCI_LINETRANSPOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2368" pos:column="17">execute</name><argument_list pos:line="2368" pos:column="24">(<argument><expr><name pos:line="2368" pos:column="25">SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>


<function><type><name><name pos:line="2373" pos:column="1">pair</name><argument_list pos:line="2373" pos:column="5">&lt;<argument><expr><name pos:line="2373" pos:column="6">int</name></expr></argument>, <argument><expr><name pos:line="2373" pos:column="11">int</name></expr></argument>&gt;</argument_list></name></type> <name><name pos:line="2373" pos:column="16">ScintillaEditView</name><op:operator pos:line="2373" pos:column="33">::</op:operator><name pos:line="2373" pos:column="35">getSelectionLinesRange</name></name><parameter_list pos:line="2373" pos:column="57">()</parameter_list> <specifier pos:line="2373" pos:column="60">const</specifier>
<block pos:line="2374" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="2375" pos:column="5">pair</name><argument_list pos:line="2375" pos:column="9">&lt;<argument><expr><name pos:line="2375" pos:column="10">int</name></expr></argument>, <argument><expr><name pos:line="2375" pos:column="15">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="2375" pos:column="20">range</name><argument_list pos:line="2375" pos:column="25">(<argument><expr><op:operator pos:line="2375" pos:column="26">-</op:operator><lit:literal type="number" pos:line="2375" pos:column="27">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2375" pos:column="30">-</op:operator><lit:literal type="number" pos:line="2375" pos:column="31">1</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if pos:line="2376" pos:column="5">if <condition pos:line="2376" pos:column="8">(<expr><call><name pos:line="2376" pos:column="9">execute</name><argument_list pos:line="2376" pos:column="16">(<argument><expr><name pos:line="2376" pos:column="17">SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call> <op:operator pos:line="2376" pos:column="36">&gt;</op:operator> <lit:literal type="number" pos:line="2376" pos:column="38">1</lit:literal></expr>)</condition><then pos:line="2376" pos:column="40">
        <return pos:line="2377" pos:column="9">return <expr><name pos:line="2377" pos:column="16">range</name></expr>;</return></then></if>
    <decl_stmt><decl><type><name pos:line="2378" pos:column="5">int</name></type> <name pos:line="2378" pos:column="9">start</name> <init pos:line="2378" pos:column="15">= <expr><call><name pos:line="2378" pos:column="17">execute</name><argument_list pos:line="2378" pos:column="24">(<argument><expr><name pos:line="2378" pos:column="25">SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2379" pos:column="5">int</name></type> <name pos:line="2379" pos:column="9">end</name> <init pos:line="2379" pos:column="13">= <expr><call><name pos:line="2379" pos:column="15">execute</name><argument_list pos:line="2379" pos:column="22">(<argument><expr><name pos:line="2379" pos:column="23">SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name pos:line="2381" pos:column="5">range</name><op:operator pos:line="2381" pos:column="10">.</op:operator><name pos:line="2381" pos:column="11">first</name></name> <op:operator pos:line="2381" pos:column="17">=</op:operator> <call><name pos:line="2381" pos:column="19">execute</name><argument_list pos:line="2381" pos:column="26">(<argument><expr><name pos:line="2381" pos:column="27">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="2381" pos:column="49">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="2382" pos:column="5">range</name><op:operator pos:line="2382" pos:column="10">.</op:operator><name pos:line="2382" pos:column="11">second</name></name> <op:operator pos:line="2382" pos:column="18">=</op:operator> <call><name pos:line="2382" pos:column="20">execute</name><argument_list pos:line="2382" pos:column="27">(<argument><expr><name pos:line="2382" pos:column="28">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><name pos:line="2382" pos:column="50">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if pos:line="2383" pos:column="5">if <condition pos:line="2383" pos:column="8">(<expr><name><name pos:line="2383" pos:column="9">range</name><op:operator pos:line="2383" pos:column="14">.</op:operator><name pos:line="2383" pos:column="15">first</name></name> <op:operator pos:line="2383" pos:column="21">&gt;</op:operator> <name><name pos:line="2383" pos:column="23">range</name><op:operator pos:line="2383" pos:column="28">.</op:operator><name pos:line="2383" pos:column="29">second</name></name></expr>)</condition><then pos:line="2383" pos:column="36">
	<block pos:line="2384" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2385" pos:column="17">int</name></type> <name pos:line="2385" pos:column="21">temp</name> <init pos:line="2385" pos:column="26">= <expr><name><name pos:line="2385" pos:column="28">range</name><op:operator pos:line="2385" pos:column="33">.</op:operator><name pos:line="2385" pos:column="34">first</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="2386" pos:column="17">range</name><op:operator pos:line="2386" pos:column="22">.</op:operator><name pos:line="2386" pos:column="23">first</name></name> <op:operator pos:line="2386" pos:column="29">=</op:operator> <name><name pos:line="2386" pos:column="31">range</name><op:operator pos:line="2386" pos:column="36">.</op:operator><name pos:line="2386" pos:column="37">second</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="2387" pos:column="17">range</name><op:operator pos:line="2387" pos:column="22">.</op:operator><name pos:line="2387" pos:column="23">second</name></name> <op:operator pos:line="2387" pos:column="30">=</op:operator> <name pos:line="2387" pos:column="32">temp</name></expr>;</expr_stmt>
	}</block></then></if>
    <return pos:line="2389" pos:column="5">return <expr><name pos:line="2389" pos:column="12">range</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2392" pos:column="1">void</name></type> <name><name pos:line="2392" pos:column="6">ScintillaEditView</name><op:operator pos:line="2392" pos:column="23">::</op:operator><name pos:line="2392" pos:column="25">currentLinesUp</name></name><parameter_list pos:line="2392" pos:column="39">()</parameter_list> <specifier pos:line="2392" pos:column="42">const</specifier> 
<block pos:line="2393" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="2394" pos:column="9">pair</name><argument_list pos:line="2394" pos:column="13">&lt;<argument><expr><name pos:line="2394" pos:column="14">int</name></expr></argument>, <argument><expr><name pos:line="2394" pos:column="19">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="2394" pos:column="24">lineRange</name> <init pos:line="2394" pos:column="34">= <expr><call><name pos:line="2394" pos:column="36">getSelectionLinesRange</name><argument_list pos:line="2394" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="2395" pos:column="5">if <condition pos:line="2395" pos:column="8">(<expr><op:operator pos:line="2395" pos:column="9">(</op:operator><name><name pos:line="2395" pos:column="10">lineRange</name><op:operator pos:line="2395" pos:column="19">.</op:operator><name pos:line="2395" pos:column="20">first</name></name> <op:operator pos:line="2395" pos:column="26">==</op:operator> <op:operator pos:line="2395" pos:column="29">-</op:operator><lit:literal type="number" pos:line="2395" pos:column="30">1</lit:literal> <op:operator pos:line="2395" pos:column="32">||</op:operator> <name><name pos:line="2395" pos:column="35">lineRange</name><op:operator pos:line="2395" pos:column="44">.</op:operator><name pos:line="2395" pos:column="45">first</name></name> <op:operator pos:line="2395" pos:column="51">==</op:operator> <lit:literal type="number" pos:line="2395" pos:column="54">0</lit:literal><op:operator pos:line="2395" pos:column="55">)</op:operator></expr>)</condition><then pos:line="2395" pos:column="57">
        <return pos:line="2396" pos:column="9">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="2398" pos:column="9">bool</name></type> <name pos:line="2398" pos:column="14">noSel</name> <init pos:line="2398" pos:column="20">= <expr><name><name pos:line="2398" pos:column="22">lineRange</name><op:operator pos:line="2398" pos:column="31">.</op:operator><name pos:line="2398" pos:column="32">first</name></name> <op:operator pos:line="2398" pos:column="38">==</op:operator> <name><name pos:line="2398" pos:column="41">lineRange</name><op:operator pos:line="2398" pos:column="50">.</op:operator><name pos:line="2398" pos:column="51">second</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2399" pos:column="5">int</name></type> <name pos:line="2399" pos:column="9">nbSelLines</name> <init pos:line="2399" pos:column="20">= <expr><name><name pos:line="2399" pos:column="22">lineRange</name><op:operator pos:line="2399" pos:column="31">.</op:operator><name pos:line="2399" pos:column="32">second</name></name> <op:operator pos:line="2399" pos:column="39">-</op:operator> <name><name pos:line="2399" pos:column="41">lineRange</name><op:operator pos:line="2399" pos:column="50">.</op:operator><name pos:line="2399" pos:column="51">first</name></name> <op:operator pos:line="2399" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="2399" pos:column="59">1</lit:literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="2401" pos:column="5">int</name></type> <name pos:line="2401" pos:column="9">line2swap</name> <init pos:line="2401" pos:column="19">= <expr><name><name pos:line="2401" pos:column="21">lineRange</name><op:operator pos:line="2401" pos:column="30">.</op:operator><name pos:line="2401" pos:column="31">first</name></name> <op:operator pos:line="2401" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="2401" pos:column="39">1</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2402" pos:column="5">int</name></type> <name pos:line="2402" pos:column="9">nbChar</name> <init pos:line="2402" pos:column="16">= <expr><call><name pos:line="2402" pos:column="18">execute</name><argument_list pos:line="2402" pos:column="25">(<argument><expr><name pos:line="2402" pos:column="26">SCI_LINELENGTH</name></expr></argument>, <argument><expr><name pos:line="2402" pos:column="42">line2swap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name pos:line="2404" pos:column="5">int</name></type> <name pos:line="2404" pos:column="9">posStart</name> <init pos:line="2404" pos:column="18">= <expr><call><name pos:line="2404" pos:column="20">execute</name><argument_list pos:line="2404" pos:column="27">(<argument><expr><name pos:line="2404" pos:column="28">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name><name pos:line="2404" pos:column="50">lineRange</name><op:operator pos:line="2404" pos:column="59">.</op:operator><name pos:line="2404" pos:column="60">first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2405" pos:column="5">int</name></type> <name pos:line="2405" pos:column="9">posEnd</name> <init pos:line="2405" pos:column="16">= <expr><call><name pos:line="2405" pos:column="18">execute</name><argument_list pos:line="2405" pos:column="25">(<argument><expr><name pos:line="2405" pos:column="26">SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="2405" pos:column="50">lineRange</name><op:operator pos:line="2405" pos:column="59">.</op:operator><name pos:line="2405" pos:column="60">second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name pos:line="2407" pos:column="5">execute</name><argument_list pos:line="2407" pos:column="12">(<argument><expr><name pos:line="2407" pos:column="13">SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="2408" pos:column="5">execute</name><argument_list pos:line="2408" pos:column="12">(<argument><expr><name pos:line="2408" pos:column="13">SCI_GOTOLINE</name></expr></argument>, <argument><expr><name pos:line="2408" pos:column="27">line2swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:line="2410" pos:column="5">for (<init><decl><type><name pos:line="2410" pos:column="10">int</name></type> <name pos:line="2410" pos:column="14">i</name> <init pos:line="2410" pos:column="16">= <expr><lit:literal type="number" pos:line="2410" pos:column="18">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2410" pos:column="22">i</name> <op:operator pos:line="2410" pos:column="24">&lt;</op:operator> <name pos:line="2410" pos:column="26">nbSelLines</name></expr> ;</condition> <incr><expr><name pos:line="2410" pos:column="39">i</name><op:operator pos:line="2410" pos:column="40">++</op:operator></expr></incr>)
    <block pos:line="2411" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="2412" pos:column="9">currentLineDown</name><argument_list pos:line="2412" pos:column="24">()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
	<expr_stmt><expr><call><name pos:line="2414" pos:column="9">execute</name><argument_list pos:line="2414" pos:column="16">(<argument><expr><name pos:line="2414" pos:column="17">SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name pos:line="2416" pos:column="5">execute</name><argument_list pos:line="2416" pos:column="12">(<argument><expr><name pos:line="2416" pos:column="13">SCI_SETSELECTIONSTART</name></expr></argument>, <argument><expr><name pos:line="2416" pos:column="36">posStart</name> <op:operator pos:line="2416" pos:column="45">-</op:operator> <name pos:line="2416" pos:column="47">nbChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2417" pos:column="9">execute</name><argument_list pos:line="2417" pos:column="16">(<argument><expr><name pos:line="2417" pos:column="17">SCI_SETSELECTIONEND</name></expr></argument>, <argument><expr><name pos:line="2417" pos:column="38">noSel</name><op:operator pos:line="2417" pos:column="43">?</op:operator><name pos:line="2417" pos:column="44">posStart</name> <op:operator pos:line="2417" pos:column="53">-</op:operator> <name pos:line="2417" pos:column="55">nbChar</name><op:operator pos:line="2417" pos:column="61">:</op:operator><name pos:line="2417" pos:column="62">posEnd</name> <op:operator pos:line="2417" pos:column="69">-</op:operator> <name pos:line="2417" pos:column="71">nbChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2420" pos:column="1">void</name></type> <name><name pos:line="2420" pos:column="6">ScintillaEditView</name><op:operator pos:line="2420" pos:column="23">::</op:operator><name pos:line="2420" pos:column="25">currentLinesDown</name></name><parameter_list pos:line="2420" pos:column="41">()</parameter_list> <specifier pos:line="2420" pos:column="44">const</specifier> 
<block pos:line="2421" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="2422" pos:column="9">pair</name><argument_list pos:line="2422" pos:column="13">&lt;<argument><expr><name pos:line="2422" pos:column="14">int</name></expr></argument>, <argument><expr><name pos:line="2422" pos:column="19">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="2422" pos:column="24">lineRange</name> <init pos:line="2422" pos:column="34">= <expr><call><name pos:line="2422" pos:column="36">getSelectionLinesRange</name><argument_list pos:line="2422" pos:column="58">()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<if pos:line="2424" pos:column="9">if <condition pos:line="2424" pos:column="12">(<expr><op:operator pos:line="2424" pos:column="13">(</op:operator><name><name pos:line="2424" pos:column="14">lineRange</name><op:operator pos:line="2424" pos:column="23">.</op:operator><name pos:line="2424" pos:column="24">first</name></name> <op:operator pos:line="2424" pos:column="30">==</op:operator> <op:operator pos:line="2424" pos:column="33">-</op:operator><lit:literal type="number" pos:line="2424" pos:column="34">1</lit:literal> <op:operator pos:line="2424" pos:column="36">||</op:operator> <name><name pos:line="2424" pos:column="39">lineRange</name><op:operator pos:line="2424" pos:column="48">.</op:operator><name pos:line="2424" pos:column="49">second</name></name> <op:operator pos:line="2424" pos:column="56">&gt;=</op:operator> <call><name pos:line="2424" pos:column="59">execute</name><argument_list pos:line="2424" pos:column="66">(<argument><expr><name pos:line="2424" pos:column="67">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><call><name pos:line="2424" pos:column="89">getCurrentDocLen</name><argument_list pos:line="2424" pos:column="105">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="2424" pos:column="108">)</op:operator></expr>)</condition><then pos:line="2424" pos:column="110">
        <return pos:line="2425" pos:column="9">return;</return></then></if>

	<decl_stmt><decl><type><name pos:line="2427" pos:column="9">bool</name></type> <name pos:line="2427" pos:column="14">noSel</name> <init pos:line="2427" pos:column="20">= <expr><name><name pos:line="2427" pos:column="22">lineRange</name><op:operator pos:line="2427" pos:column="31">.</op:operator><name pos:line="2427" pos:column="32">first</name></name> <op:operator pos:line="2427" pos:column="38">==</op:operator> <name><name pos:line="2427" pos:column="41">lineRange</name><op:operator pos:line="2427" pos:column="50">.</op:operator><name pos:line="2427" pos:column="51">second</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2428" pos:column="5">int</name></type> <name pos:line="2428" pos:column="9">nbSelLines</name> <init pos:line="2428" pos:column="20">= <expr><name><name pos:line="2428" pos:column="22">lineRange</name><op:operator pos:line="2428" pos:column="31">.</op:operator><name pos:line="2428" pos:column="32">second</name></name> <op:operator pos:line="2428" pos:column="39">-</op:operator> <name><name pos:line="2428" pos:column="41">lineRange</name><op:operator pos:line="2428" pos:column="50">.</op:operator><name pos:line="2428" pos:column="51">first</name></name> <op:operator pos:line="2428" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="2428" pos:column="59">1</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="2430" pos:column="9">int</name></type> <name pos:line="2430" pos:column="13">line2swap</name> <init pos:line="2430" pos:column="23">= <expr><name><name pos:line="2430" pos:column="25">lineRange</name><op:operator pos:line="2430" pos:column="34">.</op:operator><name pos:line="2430" pos:column="35">second</name></name> <op:operator pos:line="2430" pos:column="42">+</op:operator> <lit:literal type="number" pos:line="2430" pos:column="44">1</lit:literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2431" pos:column="5">int</name></type> <name pos:line="2431" pos:column="9">nbChar</name> <init pos:line="2431" pos:column="16">= <expr><call><name pos:line="2431" pos:column="18">execute</name><argument_list pos:line="2431" pos:column="25">(<argument><expr><name pos:line="2431" pos:column="26">SCI_LINELENGTH</name></expr></argument>, <argument><expr><name pos:line="2431" pos:column="42">line2swap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="2433" pos:column="9">if <condition pos:line="2433" pos:column="12">(<expr><op:operator pos:line="2433" pos:column="13">(</op:operator><name pos:line="2433" pos:column="14">line2swap</name> <op:operator pos:line="2433" pos:column="24">+</op:operator> <lit:literal type="number" pos:line="2433" pos:column="26">1</lit:literal><op:operator pos:line="2433" pos:column="27">)</op:operator> <op:operator pos:line="2433" pos:column="29">==</op:operator> <call><name pos:line="2433" pos:column="32">execute</name><argument_list pos:line="2433" pos:column="39">(<argument><expr><name pos:line="2433" pos:column="40">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2433" pos:column="58">
		<expr_stmt><expr><name pos:line="2434" pos:column="17">nbChar</name> <op:operator pos:line="2434" pos:column="24">+=</op:operator> <op:operator pos:line="2434" pos:column="27">(</op:operator><call><name pos:line="2434" pos:column="28">execute</name><argument_list pos:line="2434" pos:column="35">(<argument><expr><name pos:line="2434" pos:column="36">SCI_GETEOLMODE</name></expr></argument>)</argument_list></call><op:operator pos:line="2434" pos:column="51">==</op:operator><name pos:line="2434" pos:column="53">SC_EOL_CRLF</name><op:operator pos:line="2434" pos:column="64">?</op:operator><lit:literal type="number" pos:line="2434" pos:column="65">2</lit:literal><op:operator pos:line="2434" pos:column="66">:</op:operator><lit:literal type="number" pos:line="2434" pos:column="67">1</lit:literal><op:operator pos:line="2434" pos:column="68">)</op:operator></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="2436" pos:column="9">int</name></type> <name pos:line="2436" pos:column="13">posStart</name> <init pos:line="2436" pos:column="22">= <expr><call><name pos:line="2436" pos:column="24">execute</name><argument_list pos:line="2436" pos:column="31">(<argument><expr><name pos:line="2436" pos:column="32">SCI_POSITIONFROMLINE</name></expr></argument>, <argument><expr><name><name pos:line="2436" pos:column="54">lineRange</name><op:operator pos:line="2436" pos:column="63">.</op:operator><name pos:line="2436" pos:column="64">first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="2437" pos:column="5">int</name></type> <name pos:line="2437" pos:column="9">posEnd</name> <init pos:line="2437" pos:column="16">= <expr><call><name pos:line="2437" pos:column="18">execute</name><argument_list pos:line="2437" pos:column="25">(<argument><expr><name pos:line="2437" pos:column="26">SCI_GETLINEENDPOSITION</name></expr></argument>, <argument><expr><name><name pos:line="2437" pos:column="50">lineRange</name><op:operator pos:line="2437" pos:column="59">.</op:operator><name pos:line="2437" pos:column="60">second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name pos:line="2439" pos:column="5">execute</name><argument_list pos:line="2439" pos:column="12">(<argument><expr><name pos:line="2439" pos:column="13">SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="2440" pos:column="5">execute</name><argument_list pos:line="2440" pos:column="12">(<argument><expr><name pos:line="2440" pos:column="13">SCI_GOTOLINE</name></expr></argument>, <argument><expr><name pos:line="2440" pos:column="27">line2swap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:line="2442" pos:column="5">for (<init><decl><type><name pos:line="2442" pos:column="10">int</name></type> <name pos:line="2442" pos:column="14">i</name> <init pos:line="2442" pos:column="16">= <expr><lit:literal type="number" pos:line="2442" pos:column="18">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2442" pos:column="22">i</name> <op:operator pos:line="2442" pos:column="24">&lt;</op:operator> <name pos:line="2442" pos:column="26">nbSelLines</name></expr> ;</condition> <incr><expr><name pos:line="2442" pos:column="39">i</name><op:operator pos:line="2442" pos:column="40">++</op:operator></expr></incr>)
    <block pos:line="2443" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="2444" pos:column="9">currentLineUp</name><argument_list pos:line="2444" pos:column="22">()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
	<expr_stmt><expr><call><name pos:line="2446" pos:column="9">execute</name><argument_list pos:line="2446" pos:column="16">(<argument><expr><name pos:line="2446" pos:column="17">SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="2448" pos:column="9">execute</name><argument_list pos:line="2448" pos:column="16">(<argument><expr><name pos:line="2448" pos:column="17">SCI_SETSELECTIONSTART</name></expr></argument>, <argument><expr><name pos:line="2448" pos:column="40">posStart</name> <op:operator pos:line="2448" pos:column="49">+</op:operator> <name pos:line="2448" pos:column="51">nbChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2449" pos:column="9">execute</name><argument_list pos:line="2449" pos:column="16">(<argument><expr><name pos:line="2449" pos:column="17">SCI_SETSELECTIONEND</name></expr></argument>, <argument><expr><name pos:line="2449" pos:column="38">noSel</name><op:operator pos:line="2449" pos:column="43">?</op:operator><name pos:line="2449" pos:column="44">posStart</name> <op:operator pos:line="2449" pos:column="53">+</op:operator> <name pos:line="2449" pos:column="55">nbChar</name><op:operator pos:line="2449" pos:column="61">:</op:operator><name pos:line="2449" pos:column="62">posEnd</name> <op:operator pos:line="2449" pos:column="69">+</op:operator> <name pos:line="2449" pos:column="71">nbChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name pos:line="2453" pos:column="1">void</name></type> <name><name pos:line="2453" pos:column="6">ScintillaEditView</name><op:operator pos:line="2453" pos:column="23">::</op:operator><name pos:line="2453" pos:column="25">convertSelectedTextTo</name></name><parameter_list pos:line="2453" pos:column="46">(<param><decl><type><name pos:line="2453" pos:column="47">bool</name></type> <name pos:line="2453" pos:column="52">Case</name></decl></param>)</parameter_list>
<block pos:line="2454" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2455" pos:column="9">unsigned</name> <name pos:line="2455" pos:column="18">int</name></type> <name pos:line="2455" pos:column="22">codepage</name> <init pos:line="2455" pos:column="31">= <expr><name pos:line="2455" pos:column="33">_codepage</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2456" pos:column="9">UniMode</name></type> <name pos:line="2456" pos:column="17">um</name> <init pos:line="2456" pos:column="20">= <expr><call><name pos:line="2456" pos:column="22">getCurrentBuffer</name><argument_list pos:line="2456" pos:column="38">()</argument_list></call><op:operator pos:line="2456" pos:column="40">-&gt;</op:operator><call><name pos:line="2456" pos:column="42">getUnicodeMode</name><argument_list pos:line="2456" pos:column="56">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2457" pos:column="9">if <condition pos:line="2457" pos:column="12">(<expr><name pos:line="2457" pos:column="13">um</name> <op:operator pos:line="2457" pos:column="16">!=</op:operator> <name pos:line="2457" pos:column="19">uni8Bit</name></expr>)</condition><then pos:line="2457" pos:column="27">
	<expr_stmt><expr><name pos:line="2458" pos:column="9">codepage</name> <op:operator pos:line="2458" pos:column="18">=</op:operator> <name pos:line="2458" pos:column="20">CP_UTF8</name></expr>;</expr_stmt></then></if>

	<if pos:line="2460" pos:column="9">if <condition pos:line="2460" pos:column="12">(<expr><call><name pos:line="2460" pos:column="13">execute</name><argument_list pos:line="2460" pos:column="20">(<argument><expr><name pos:line="2460" pos:column="21">SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call> <op:operator pos:line="2460" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="2460" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="2460" pos:column="44"> <comment type="line" pos:line="2460" pos:column="45">// Multi-Selection || Column mode</comment>
	<block pos:line="2461" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="2462" pos:column="9">execute</name><argument_list pos:line="2462" pos:column="16">(<argument><expr><name pos:line="2462" pos:column="17">SCI_BEGINUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
		<decl_stmt><decl><type><name pos:line="2464" pos:column="17">ColumnModeInfos</name></type> <name pos:line="2464" pos:column="33">cmi</name> <init pos:line="2464" pos:column="37">= <expr><call><name pos:line="2464" pos:column="39">getColumnModeSelectInfo</name><argument_list pos:line="2464" pos:column="62">()</argument_list></call></expr></init></decl>;</decl_stmt>

		<for pos:line="2466" pos:column="17">for (<init><decl><type><name pos:line="2466" pos:column="22">size_t</name></type> <name pos:line="2466" pos:column="29">i</name> <init pos:line="2466" pos:column="31">= <expr><lit:literal type="number" pos:line="2466" pos:column="33">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2466" pos:column="37">i</name> <op:operator pos:line="2466" pos:column="39">&lt;</op:operator> <call><name><name pos:line="2466" pos:column="41">cmi</name><op:operator pos:line="2466" pos:column="44">.</op:operator><name pos:line="2466" pos:column="45">size</name></name><argument_list pos:line="2466" pos:column="49">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="2466" pos:column="54">i</name><op:operator pos:line="2466" pos:column="55">++</op:operator></expr></incr>)
		<block pos:line="2467" pos:column="17">{
			<decl_stmt><decl><type><specifier pos:line="2468" pos:column="25">const</specifier> <name pos:line="2468" pos:column="31">int</name></type> <name pos:line="2468" pos:column="35">len</name> <init pos:line="2468" pos:column="39">= <expr><name><name pos:line="2468" pos:column="41">cmi</name><index pos:line="2468" pos:column="44">[<expr><name pos:line="2468" pos:column="45">i</name></expr>]</index></name><op:operator pos:line="2468" pos:column="47">.</op:operator><name pos:line="2468" pos:column="48">_selRpos</name> <op:operator pos:line="2468" pos:column="57">-</op:operator> <name><name pos:line="2468" pos:column="59">cmi</name><index pos:line="2468" pos:column="62">[<expr><name pos:line="2468" pos:column="63">i</name></expr>]</index></name><op:operator pos:line="2468" pos:column="65">.</op:operator><name pos:line="2468" pos:column="66">_selLpos</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2469" pos:column="25">char</name> <type:modifier pos:line="2469" pos:column="30">*</type:modifier></type><name pos:line="2469" pos:column="31">srcStr</name> <init pos:line="2469" pos:column="38">= <expr><op:operator pos:line="2469" pos:column="40">new</op:operator> <name><name pos:line="2469" pos:column="44">char</name><index pos:line="2469" pos:column="48">[<expr><name pos:line="2469" pos:column="49">len</name><op:operator pos:line="2469" pos:column="52">+</op:operator><lit:literal type="number" pos:line="2469" pos:column="53">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2470" pos:column="25">wchar_t</name> <type:modifier pos:line="2470" pos:column="33">*</type:modifier></type><name pos:line="2470" pos:column="34">destStr</name> <init pos:line="2470" pos:column="42">= <expr><op:operator pos:line="2470" pos:column="44">new</op:operator> <name><name pos:line="2470" pos:column="48">wchar_t</name><index pos:line="2470" pos:column="55">[<expr><name pos:line="2470" pos:column="56">len</name><op:operator pos:line="2470" pos:column="59">+</op:operator><lit:literal type="number" pos:line="2470" pos:column="60">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name pos:line="2472" pos:column="25">int</name></type> <name pos:line="2472" pos:column="29">start</name> <init pos:line="2472" pos:column="35">= <expr><name><name pos:line="2472" pos:column="37">cmi</name><index pos:line="2472" pos:column="40">[<expr><name pos:line="2472" pos:column="41">i</name></expr>]</index></name><op:operator pos:line="2472" pos:column="43">.</op:operator><name pos:line="2472" pos:column="44">_selLpos</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2473" pos:column="25">int</name></type> <name pos:line="2473" pos:column="29">end</name> <init pos:line="2473" pos:column="33">= <expr><name><name pos:line="2473" pos:column="35">cmi</name><index pos:line="2473" pos:column="38">[<expr><name pos:line="2473" pos:column="39">i</name></expr>]</index></name><op:operator pos:line="2473" pos:column="41">.</op:operator><name pos:line="2473" pos:column="42">_selRpos</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="2474" pos:column="25">getText</name><argument_list pos:line="2474" pos:column="32">(<argument><expr><name pos:line="2474" pos:column="33">srcStr</name></expr></argument>, <argument><expr><name pos:line="2474" pos:column="41">start</name></expr></argument>, <argument><expr><name pos:line="2474" pos:column="48">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="2476" pos:column="25">int</name></type> <name pos:line="2476" pos:column="29">nbChar</name> <init pos:line="2476" pos:column="36">= <expr><call><name><op:operator pos:line="2476" pos:column="38">::</op:operator><name pos:line="2476" pos:column="40">MultiByteToWideChar</name></name><argument_list pos:line="2476" pos:column="59">(<argument><expr><name pos:line="2476" pos:column="60">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2476" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2476" pos:column="73">srcStr</name></expr></argument>, <argument><expr><name pos:line="2476" pos:column="81">len</name></expr></argument>, <argument><expr><name pos:line="2476" pos:column="86">destStr</name></expr></argument>, <argument><expr><name pos:line="2476" pos:column="95">len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<for pos:line="2478" pos:column="25">for (<init><decl><type><name pos:line="2478" pos:column="30">int</name></type> <name pos:line="2478" pos:column="34">j</name> <init pos:line="2478" pos:column="36">= <expr><lit:literal type="number" pos:line="2478" pos:column="38">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2478" pos:column="42">j</name> <op:operator pos:line="2478" pos:column="44">&lt;</op:operator> <name pos:line="2478" pos:column="46">nbChar</name></expr> ;</condition> <incr><expr><name pos:line="2478" pos:column="55">j</name><op:operator pos:line="2478" pos:column="56">++</op:operator></expr></incr>)
			<block pos:line="2479" pos:column="25">{
				<if pos:line="2480" pos:column="33">if <condition pos:line="2480" pos:column="36">(<expr><name pos:line="2480" pos:column="37">Case</name> <op:operator pos:line="2480" pos:column="42">==</op:operator> <name pos:line="2480" pos:column="45">UPPERCASE</name></expr>)</condition><then pos:line="2480" pos:column="55">
					<expr_stmt><expr><name><name pos:line="2481" pos:column="41">destStr</name><index pos:line="2481" pos:column="48">[<expr><name pos:line="2481" pos:column="49">j</name></expr>]</index></name> <op:operator pos:line="2481" pos:column="52">=</op:operator> <op:operator pos:line="2481" pos:column="54">(</op:operator><name pos:line="2481" pos:column="55">wchar_t</name><op:operator pos:line="2481" pos:column="62">)</op:operator><call><name><op:operator pos:line="2481" pos:column="63">::</op:operator><name pos:line="2481" pos:column="65">CharUpperW</name></name><argument_list pos:line="2481" pos:column="75">(<argument><expr><op:operator pos:line="2481" pos:column="76">(</op:operator><name pos:line="2481" pos:column="77">LPWSTR</name><op:operator pos:line="2481" pos:column="83">)</op:operator><name><name pos:line="2481" pos:column="84">destStr</name><index pos:line="2481" pos:column="91">[<expr><name pos:line="2481" pos:column="92">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="2482" pos:column="33">else
					<expr_stmt><expr><name><name pos:line="2483" pos:column="41">destStr</name><index pos:line="2483" pos:column="48">[<expr><name pos:line="2483" pos:column="49">j</name></expr>]</index></name> <op:operator pos:line="2483" pos:column="52">=</op:operator> <op:operator pos:line="2483" pos:column="54">(</op:operator><name pos:line="2483" pos:column="55">wchar_t</name><op:operator pos:line="2483" pos:column="62">)</op:operator><call><name><op:operator pos:line="2483" pos:column="63">::</op:operator><name pos:line="2483" pos:column="65">CharLowerW</name></name><argument_list pos:line="2483" pos:column="75">(<argument><expr><op:operator pos:line="2483" pos:column="76">(</op:operator><name pos:line="2483" pos:column="77">LPWSTR</name><op:operator pos:line="2483" pos:column="83">)</op:operator><name><name pos:line="2483" pos:column="84">destStr</name><index pos:line="2483" pos:column="91">[<expr><name pos:line="2483" pos:column="92">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></for>
			<expr_stmt><expr><call><name><op:operator pos:line="2485" pos:column="25">::</op:operator><name pos:line="2485" pos:column="27">WideCharToMultiByte</name></name><argument_list pos:line="2485" pos:column="46">(<argument><expr><name pos:line="2485" pos:column="47">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2485" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2485" pos:column="60">destStr</name></expr></argument>, <argument><expr><name pos:line="2485" pos:column="69">len</name></expr></argument>, <argument><expr><name pos:line="2485" pos:column="74">srcStr</name></expr></argument>, <argument><expr><name pos:line="2485" pos:column="82">len</name></expr></argument>, <argument><expr><name pos:line="2485" pos:column="87">NULL</name></expr></argument>, <argument><expr><name pos:line="2485" pos:column="93">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name pos:line="2487" pos:column="25">execute</name><argument_list pos:line="2487" pos:column="32">(<argument><expr><name pos:line="2487" pos:column="33">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="2487" pos:column="53">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2488" pos:column="25">execute</name><argument_list pos:line="2488" pos:column="32">(<argument><expr><name pos:line="2488" pos:column="33">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="2488" pos:column="51">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2489" pos:column="25">execute</name><argument_list pos:line="2489" pos:column="32">(<argument><expr><name pos:line="2489" pos:column="33">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><op:operator pos:line="2489" pos:column="52">(</op:operator><name pos:line="2489" pos:column="53">WPARAM</name><op:operator pos:line="2489" pos:column="59">)</op:operator><op:operator pos:line="2489" pos:column="60">-</op:operator><lit:literal type="number" pos:line="2489" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2489" pos:column="64">(</op:operator><name pos:line="2489" pos:column="65">LPARAM</name><op:operator pos:line="2489" pos:column="71">)</op:operator><name pos:line="2489" pos:column="72">srcStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><op:operator pos:line="2491" pos:column="25">delete</op:operator> <index pos:line="2491" pos:column="32">[]</index> <name pos:line="2491" pos:column="35">srcStr</name></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="2492" pos:column="25">delete</op:operator> <index pos:line="2492" pos:column="32">[]</index> <name pos:line="2492" pos:column="35">destStr</name></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><call><name pos:line="2495" pos:column="17">setMultiSelections</name><argument_list pos:line="2495" pos:column="35">(<argument><expr><name pos:line="2495" pos:column="36">cmi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line" pos:line="2497" pos:column="17">//execute(SCI_SETSELECTIONSTART, selStart);</comment>
		<comment type="line" pos:line="2498" pos:column="17">//execute(SCI_SETSELECTIONEND, selEnd);</comment>

		<expr_stmt><expr><call><name pos:line="2500" pos:column="17">execute</name><argument_list pos:line="2500" pos:column="24">(<argument><expr><name pos:line="2500" pos:column="25">SCI_ENDUNDOACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="2501" pos:column="17">return;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="2504" pos:column="9">size_t</name></type> <name pos:line="2504" pos:column="16">selectionStart</name> <init pos:line="2504" pos:column="31">= <expr><call><name pos:line="2504" pos:column="33">execute</name><argument_list pos:line="2504" pos:column="40">(<argument><expr><name pos:line="2504" pos:column="41">SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2505" pos:column="9">size_t</name></type> <name pos:line="2505" pos:column="16">selectionEnd</name> <init pos:line="2505" pos:column="29">= <expr><call><name pos:line="2505" pos:column="31">execute</name><argument_list pos:line="2505" pos:column="38">(<argument><expr><name pos:line="2505" pos:column="39">SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   
	<decl_stmt><decl><type><name pos:line="2507" pos:column="9">int</name></type> <name pos:line="2507" pos:column="13">strSize</name> <init pos:line="2507" pos:column="21">= <expr><op:operator pos:line="2507" pos:column="23">(</op:operator><op:operator pos:line="2507" pos:column="24">(</op:operator><name pos:line="2507" pos:column="25">selectionEnd</name> <op:operator pos:line="2507" pos:column="38">&gt;</op:operator> <name pos:line="2507" pos:column="40">selectionStart</name><op:operator pos:line="2507" pos:column="54">)</op:operator><op:operator pos:line="2507" pos:column="55">?</op:operator><op:operator pos:line="2507" pos:column="56">(</op:operator><name pos:line="2507" pos:column="57">selectionEnd</name> <op:operator pos:line="2507" pos:column="70">-</op:operator> <name pos:line="2507" pos:column="72">selectionStart</name><op:operator pos:line="2507" pos:column="86">)</op:operator><op:operator pos:line="2507" pos:column="87">:</op:operator><op:operator pos:line="2507" pos:column="88">(</op:operator><name pos:line="2507" pos:column="89">selectionStart</name> <op:operator pos:line="2507" pos:column="104">-</op:operator> <name pos:line="2507" pos:column="106">selectionEnd</name><op:operator pos:line="2507" pos:column="118">)</op:operator><op:operator pos:line="2507" pos:column="119">)</op:operator><op:operator pos:line="2507" pos:column="120">+</op:operator><lit:literal type="number" pos:line="2507" pos:column="121">1</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="2508" pos:column="9">if <condition pos:line="2508" pos:column="12">(<expr><name pos:line="2508" pos:column="13">strSize</name></expr>)</condition><then pos:line="2508" pos:column="21">
	<block pos:line="2509" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2510" pos:column="17">char</name> <type:modifier pos:line="2510" pos:column="22">*</type:modifier></type><name pos:line="2510" pos:column="23">selectedStr</name> <init pos:line="2510" pos:column="35">= <expr><op:operator pos:line="2510" pos:column="37">new</op:operator> <name><name pos:line="2510" pos:column="41">char</name><index pos:line="2510" pos:column="45">[<expr><name pos:line="2510" pos:column="46">strSize</name><op:operator pos:line="2510" pos:column="53">+</op:operator><lit:literal type="number" pos:line="2510" pos:column="54">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2511" pos:column="17">int</name></type> <name pos:line="2511" pos:column="21">strWSize</name> <init pos:line="2511" pos:column="30">= <expr><name pos:line="2511" pos:column="32">strSize</name> <op:operator pos:line="2511" pos:column="40">*</op:operator> <lit:literal type="number" pos:line="2511" pos:column="42">2</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2512" pos:column="17">wchar_t</name> <type:modifier pos:line="2512" pos:column="25">*</type:modifier></type><name pos:line="2512" pos:column="26">selectedStrW</name> <init pos:line="2512" pos:column="39">= <expr><op:operator pos:line="2512" pos:column="41">new</op:operator> <name><name pos:line="2512" pos:column="45">wchar_t</name><index pos:line="2512" pos:column="52">[<expr><name pos:line="2512" pos:column="53">strWSize</name><op:operator pos:line="2512" pos:column="61">+</op:operator><lit:literal type="number" pos:line="2512" pos:column="62">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name pos:line="2514" pos:column="17">execute</name><argument_list pos:line="2514" pos:column="24">(<argument><expr><name pos:line="2514" pos:column="25">SCI_GETSELTEXT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2514" pos:column="41">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2514" pos:column="44">(</op:operator><name pos:line="2514" pos:column="45">LPARAM</name><op:operator pos:line="2514" pos:column="51">)</op:operator><name pos:line="2514" pos:column="52">selectedStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="2516" pos:column="17">int</name></type> <name pos:line="2516" pos:column="21">nbChar</name> <init pos:line="2516" pos:column="28">= <expr><call><name><op:operator pos:line="2516" pos:column="30">::</op:operator><name pos:line="2516" pos:column="32">MultiByteToWideChar</name></name><argument_list pos:line="2516" pos:column="51">(<argument><expr><name pos:line="2516" pos:column="52">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2516" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2516" pos:column="65">selectedStr</name></expr></argument>, <argument><expr><name pos:line="2516" pos:column="78">strSize</name></expr></argument>, <argument><expr><name pos:line="2516" pos:column="87">selectedStrW</name></expr></argument>, <argument><expr><name pos:line="2516" pos:column="101">strWSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for pos:line="2518" pos:column="17">for (<init><decl><type><name pos:line="2518" pos:column="22">int</name></type> <name pos:line="2518" pos:column="26">i</name> <init pos:line="2518" pos:column="28">= <expr><lit:literal type="number" pos:line="2518" pos:column="30">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2518" pos:column="34">i</name> <op:operator pos:line="2518" pos:column="36">&lt;</op:operator> <name pos:line="2518" pos:column="38">nbChar</name></expr> ;</condition> <incr><expr><name pos:line="2518" pos:column="47">i</name><op:operator pos:line="2518" pos:column="48">++</op:operator></expr></incr>)
		<block pos:line="2519" pos:column="17">{
			<if pos:line="2520" pos:column="25">if <condition pos:line="2520" pos:column="28">(<expr><name pos:line="2520" pos:column="29">Case</name> <op:operator pos:line="2520" pos:column="34">==</op:operator> <name pos:line="2520" pos:column="37">UPPERCASE</name></expr>)</condition><then pos:line="2520" pos:column="47">
				<expr_stmt><expr><name><name pos:line="2521" pos:column="33">selectedStrW</name><index pos:line="2521" pos:column="45">[<expr><name pos:line="2521" pos:column="46">i</name></expr>]</index></name> <op:operator pos:line="2521" pos:column="49">=</op:operator> <op:operator pos:line="2521" pos:column="51">(</op:operator><name pos:line="2521" pos:column="52">WCHAR</name><op:operator pos:line="2521" pos:column="57">)</op:operator><call><name><op:operator pos:line="2521" pos:column="58">::</op:operator><name pos:line="2521" pos:column="60">CharUpperW</name></name><argument_list pos:line="2521" pos:column="70">(<argument><expr><op:operator pos:line="2521" pos:column="71">(</op:operator><name pos:line="2521" pos:column="72">LPWSTR</name><op:operator pos:line="2521" pos:column="78">)</op:operator><name><name pos:line="2521" pos:column="79">selectedStrW</name><index pos:line="2521" pos:column="91">[<expr><name pos:line="2521" pos:column="92">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="2522" pos:column="25">else
				<expr_stmt><expr><name><name pos:line="2523" pos:column="33">selectedStrW</name><index pos:line="2523" pos:column="45">[<expr><name pos:line="2523" pos:column="46">i</name></expr>]</index></name> <op:operator pos:line="2523" pos:column="49">=</op:operator> <op:operator pos:line="2523" pos:column="51">(</op:operator><name pos:line="2523" pos:column="52">WCHAR</name><op:operator pos:line="2523" pos:column="57">)</op:operator><call><name><op:operator pos:line="2523" pos:column="58">::</op:operator><name pos:line="2523" pos:column="60">CharLowerW</name></name><argument_list pos:line="2523" pos:column="70">(<argument><expr><op:operator pos:line="2523" pos:column="71">(</op:operator><name pos:line="2523" pos:column="72">LPWSTR</name><op:operator pos:line="2523" pos:column="78">)</op:operator><name><name pos:line="2523" pos:column="79">selectedStrW</name><index pos:line="2523" pos:column="91">[<expr><name pos:line="2523" pos:column="92">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></for>
		<expr_stmt><expr><call><name><op:operator pos:line="2525" pos:column="17">::</op:operator><name pos:line="2525" pos:column="19">WideCharToMultiByte</name></name><argument_list pos:line="2525" pos:column="38">(<argument><expr><name pos:line="2525" pos:column="39">codepage</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2525" pos:column="49">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2525" pos:column="52">selectedStrW</name></expr></argument>, <argument><expr><name pos:line="2525" pos:column="66">strWSize</name></expr></argument>, <argument><expr><name pos:line="2525" pos:column="76">selectedStr</name></expr></argument>, <argument><expr><name pos:line="2525" pos:column="89">strSize</name></expr></argument>, <argument><expr><name pos:line="2525" pos:column="98">NULL</name></expr></argument>, <argument><expr><name pos:line="2525" pos:column="104">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="2527" pos:column="17">execute</name><argument_list pos:line="2527" pos:column="24">(<argument><expr><name pos:line="2527" pos:column="25">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name pos:line="2527" pos:column="45">selectionStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2528" pos:column="17">execute</name><argument_list pos:line="2528" pos:column="24">(<argument><expr><name pos:line="2528" pos:column="25">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name pos:line="2528" pos:column="43">selectionEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2529" pos:column="17">execute</name><argument_list pos:line="2529" pos:column="24">(<argument><expr><name pos:line="2529" pos:column="25">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><name pos:line="2529" pos:column="44">strSize</name> <op:operator pos:line="2529" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="2529" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2529" pos:column="57">(</op:operator><name pos:line="2529" pos:column="58">LPARAM</name><op:operator pos:line="2529" pos:column="64">)</op:operator><name pos:line="2529" pos:column="65">selectedStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="2530" pos:column="17">execute</name><argument_list pos:line="2530" pos:column="24">(<argument><expr><name pos:line="2530" pos:column="25">SCI_SETSEL</name></expr></argument>, <argument><expr><name pos:line="2530" pos:column="37">selectionStart</name></expr></argument>, <argument><expr><name pos:line="2530" pos:column="53">selectionEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="2531" pos:column="17">delete</op:operator> <index pos:line="2531" pos:column="24">[]</index> <name pos:line="2531" pos:column="27">selectedStr</name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="2532" pos:column="17">delete</op:operator> <index pos:line="2532" pos:column="24">[]</index> <name pos:line="2532" pos:column="27">selectedStrW</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>



<function><type><name><name pos:line="2538" pos:column="1">pair</name><argument_list pos:line="2538" pos:column="5">&lt;<argument><expr><name pos:line="2538" pos:column="6">int</name></expr></argument>, <argument><expr><name pos:line="2538" pos:column="11">int</name></expr></argument>&gt;</argument_list></name></type> <name><name pos:line="2538" pos:column="16">ScintillaEditView</name><op:operator pos:line="2538" pos:column="33">::</op:operator><name pos:line="2538" pos:column="35">getWordRange</name></name><parameter_list pos:line="2538" pos:column="47">()</parameter_list>
<block pos:line="2539" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="2540" pos:column="5">int</name></type> <name pos:line="2540" pos:column="9">caretPos</name> <init pos:line="2540" pos:column="18">= <expr><call><name pos:line="2540" pos:column="20">execute</name><argument_list pos:line="2540" pos:column="27">(<argument><expr><name pos:line="2540" pos:column="28">SCI_GETCURRENTPOS</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2540" pos:column="47">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2540" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2541" pos:column="9">int</name></type> <name pos:line="2541" pos:column="13">startPos</name> <init pos:line="2541" pos:column="22">= <expr><call><name><name pos:line="2541" pos:column="24">static_cast</name><argument_list pos:line="2541" pos:column="35">&lt;<argument><expr><name pos:line="2541" pos:column="36">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2541" pos:column="40">(<argument><expr><call><name pos:line="2541" pos:column="41">execute</name><argument_list pos:line="2541" pos:column="48">(<argument><expr><name pos:line="2541" pos:column="49">SCI_WORDSTARTPOSITION</name></expr></argument>, <argument><expr><name pos:line="2541" pos:column="72">caretPos</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2541" pos:column="82">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2542" pos:column="9">int</name></type> <name pos:line="2542" pos:column="13">endPos</name> <init pos:line="2542" pos:column="20">= <expr><call><name><name pos:line="2542" pos:column="22">static_cast</name><argument_list pos:line="2542" pos:column="33">&lt;<argument><expr><name pos:line="2542" pos:column="34">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2542" pos:column="38">(<argument><expr><call><name pos:line="2542" pos:column="39">execute</name><argument_list pos:line="2542" pos:column="46">(<argument><expr><name pos:line="2542" pos:column="47">SCI_WORDENDPOSITION</name></expr></argument>, <argument><expr><name pos:line="2542" pos:column="68">caretPos</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2542" pos:column="78">true</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return pos:line="2543" pos:column="5">return <expr><call><name><name pos:line="2543" pos:column="12">pair</name><argument_list pos:line="2543" pos:column="16">&lt;<argument><expr><name pos:line="2543" pos:column="17">int</name></expr></argument>, <argument><expr><name pos:line="2543" pos:column="22">int</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="2543" pos:column="26">(<argument><expr><name pos:line="2543" pos:column="27">startPos</name></expr></argument>, <argument><expr><name pos:line="2543" pos:column="37">endPos</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="2546" pos:column="1">bool</name></type> <name><name pos:line="2546" pos:column="6">ScintillaEditView</name><op:operator pos:line="2546" pos:column="23">::</op:operator><name pos:line="2546" pos:column="25">expandWordSelection</name></name><parameter_list pos:line="2546" pos:column="44">()</parameter_list>
<block pos:line="2547" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="2548" pos:column="5">pair</name><argument_list pos:line="2548" pos:column="9">&lt;<argument><expr><name pos:line="2548" pos:column="10">int</name></expr></argument>, <argument><expr><name pos:line="2548" pos:column="15">int</name></expr></argument>&gt;</argument_list></name></type> <name pos:line="2548" pos:column="20">wordRange</name> <init pos:line="2548" pos:column="30">= 	<expr><call><name pos:line="2548" pos:column="33">getWordRange</name><argument_list pos:line="2548" pos:column="45">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if pos:line="2549" pos:column="5">if <condition pos:line="2549" pos:column="8">(<expr><name><name pos:line="2549" pos:column="9">wordRange</name><op:operator pos:line="2549" pos:column="18">.</op:operator><name pos:line="2549" pos:column="19">first</name></name> <op:operator pos:line="2549" pos:column="25">!=</op:operator> <name><name pos:line="2549" pos:column="28">wordRange</name><op:operator pos:line="2549" pos:column="37">.</op:operator><name pos:line="2549" pos:column="38">second</name></name></expr>)</condition><then pos:line="2549" pos:column="45"> <block pos:line="2549" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="2550" pos:column="9">execute</name><argument_list pos:line="2550" pos:column="16">(<argument><expr><name pos:line="2550" pos:column="17">SCI_SETSELECTIONSTART</name></expr></argument>, <argument><expr><name><name pos:line="2550" pos:column="40">wordRange</name><op:operator pos:line="2550" pos:column="49">.</op:operator><name pos:line="2550" pos:column="50">first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="2551" pos:column="9">execute</name><argument_list pos:line="2551" pos:column="16">(<argument><expr><name pos:line="2551" pos:column="17">SCI_SETSELECTIONEND</name></expr></argument>, <argument><expr><name><name pos:line="2551" pos:column="38">wordRange</name><op:operator pos:line="2551" pos:column="47">.</op:operator><name pos:line="2551" pos:column="48">second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="2552" pos:column="17">return <expr><lit:literal type="boolean" pos:line="2552" pos:column="24">true</lit:literal></expr>;</return>
	}</block></then></if>
	<return pos:line="2554" pos:column="9">return <expr><lit:literal type="boolean" pos:line="2554" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2557" pos:column="1">TCHAR</name> <type:modifier pos:line="2557" pos:column="7">*</type:modifier></type> <name pos:line="2557" pos:column="9">int2str</name><parameter_list pos:line="2557" pos:column="16">(<param><decl><type><name pos:line="2557" pos:column="17">TCHAR</name> <type:modifier pos:line="2557" pos:column="23">*</type:modifier></type><name pos:line="2557" pos:column="24">str</name></decl></param>, <param><decl><type><name pos:line="2557" pos:column="29">int</name></type> <name pos:line="2557" pos:column="33">strLen</name></decl></param>, <param><decl><type><name pos:line="2557" pos:column="41">int</name></type> <name pos:line="2557" pos:column="45">number</name></decl></param>, <param><decl><type><name pos:line="2557" pos:column="53">int</name></type> <name pos:line="2557" pos:column="57">base</name></decl></param>, <param><decl><type><name pos:line="2557" pos:column="63">int</name></type> <name pos:line="2557" pos:column="67">nbChiffre</name></decl></param>, <param><decl><type><name pos:line="2557" pos:column="78">bool</name></type> <name pos:line="2557" pos:column="83">isZeroLeading</name></decl></param>)</parameter_list> 
<block pos:line="2558" pos:column="1">{
	<if pos:line="2559" pos:column="9">if <condition pos:line="2559" pos:column="12">(<expr><name pos:line="2559" pos:column="13">nbChiffre</name> <op:operator pos:line="2559" pos:column="23">&gt;=</op:operator> <name pos:line="2559" pos:column="26">strLen</name></expr>)</condition><then pos:line="2559" pos:column="33"> <return pos:line="2559" pos:column="34">return <expr><name pos:line="2559" pos:column="41">NULL</name></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="2560" pos:column="9">TCHAR</name></type> <name><name pos:line="2560" pos:column="15">f</name><index pos:line="2560" pos:column="16">[<expr><lit:literal type="number" pos:line="2560" pos:column="17">64</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2561" pos:column="9">TCHAR</name></type> <name><name pos:line="2561" pos:column="15">fStr</name><index pos:line="2561" pos:column="19">[<expr><lit:literal type="number" pos:line="2561" pos:column="20">2</lit:literal></expr>]</index></name> <init pos:line="2561" pos:column="23">= <expr><call><name pos:line="2561" pos:column="25">TEXT</name><argument_list pos:line="2561" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="2561" pos:column="30">"d"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2562" pos:column="9">if <condition pos:line="2562" pos:column="12">(<expr><name pos:line="2562" pos:column="13">base</name> <op:operator pos:line="2562" pos:column="18">==</op:operator> <lit:literal type="number" pos:line="2562" pos:column="21">16</lit:literal></expr>)</condition><then pos:line="2562" pos:column="24">
		<expr_stmt><expr><name><name pos:line="2563" pos:column="17">fStr</name><index pos:line="2563" pos:column="21">[<expr><lit:literal type="number" pos:line="2563" pos:column="22">0</lit:literal></expr>]</index></name> <op:operator pos:line="2563" pos:column="25">=</op:operator> <lit:literal type="char" pos:line="2563" pos:column="27">'X'</lit:literal></expr>;</expr_stmt></then>
	<else pos:line="2564" pos:column="9">else <if pos:line="2564" pos:column="14">if <condition pos:line="2564" pos:column="17">(<expr><name pos:line="2564" pos:column="18">base</name> <op:operator pos:line="2564" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="2564" pos:column="26">8</lit:literal></expr>)</condition><then pos:line="2564" pos:column="28">
		<expr_stmt><expr><name><name pos:line="2565" pos:column="17">fStr</name><index pos:line="2565" pos:column="21">[<expr><lit:literal type="number" pos:line="2565" pos:column="22">0</lit:literal></expr>]</index></name> <op:operator pos:line="2565" pos:column="25">=</op:operator> <lit:literal type="char" pos:line="2565" pos:column="27">'o'</lit:literal></expr>;</expr_stmt></then>
	<else pos:line="2566" pos:column="9">else <if pos:line="2566" pos:column="14">if <condition pos:line="2566" pos:column="17">(<expr><name pos:line="2566" pos:column="18">base</name> <op:operator pos:line="2566" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="2566" pos:column="26">2</lit:literal></expr>)</condition><then pos:line="2566" pos:column="28">
	<block pos:line="2567" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="2568" pos:column="17">const</specifier> <name pos:line="2568" pos:column="23">unsigned</name> <name pos:line="2568" pos:column="32">int</name></type> <name pos:line="2568" pos:column="36">MASK_ULONG_BITFORT</name> <init pos:line="2568" pos:column="55">= <expr><lit:literal type="number" pos:line="2568" pos:column="57">0x80000000</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2569" pos:column="17">int</name></type> <name pos:line="2569" pos:column="21">nbBits</name> <init pos:line="2569" pos:column="28">= <expr pos:line="2569" pos:column="30">sizeof<op:operator pos:line="2569" pos:column="36">(</op:operator><name pos:line="2569" pos:column="37">unsigned</name> <name pos:line="2569" pos:column="46">int</name><op:operator pos:line="2569" pos:column="49">)</op:operator> <op:operator pos:line="2569" pos:column="51">*</op:operator> <lit:literal type="number" pos:line="2569" pos:column="53">8</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2570" pos:column="17">int</name></type> <name pos:line="2570" pos:column="21">nbBit2Shift</name> <init pos:line="2570" pos:column="33">= <expr><op:operator pos:line="2570" pos:column="35">(</op:operator><name pos:line="2570" pos:column="36">nbChiffre</name> <op:operator pos:line="2570" pos:column="46">&gt;=</op:operator> <name pos:line="2570" pos:column="49">nbBits</name><op:operator pos:line="2570" pos:column="55">)</op:operator><op:operator pos:line="2570" pos:column="56">?</op:operator><name pos:line="2570" pos:column="57">nbBits</name><op:operator pos:line="2570" pos:column="63">:</op:operator><op:operator pos:line="2570" pos:column="64">(</op:operator><name pos:line="2570" pos:column="65">nbBits</name> <op:operator pos:line="2570" pos:column="72">-</op:operator> <name pos:line="2570" pos:column="74">nbChiffre</name><op:operator pos:line="2570" pos:column="83">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2571" pos:column="17">unsigned</name> <name pos:line="2571" pos:column="26">long</name></type> <name pos:line="2571" pos:column="31">mask</name> <init pos:line="2571" pos:column="36">= <expr><name pos:line="2571" pos:column="38">MASK_ULONG_BITFORT</name> <op:operator pos:line="2571" pos:column="57">&gt;&gt;</op:operator> <name pos:line="2571" pos:column="60">nbBit2Shift</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2572" pos:column="17">int</name></type> <name pos:line="2572" pos:column="21">i</name> <init pos:line="2572" pos:column="23">= <expr><lit:literal type="number" pos:line="2572" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt> 
		<for pos:line="2573" pos:column="17">for (<init pos:line="2573" pos:column="22">;</init> <condition><expr><name pos:line="2573" pos:column="24">mask</name> <op:operator pos:line="2573" pos:column="29">&gt;</op:operator> <lit:literal type="number" pos:line="2573" pos:column="31">0</lit:literal></expr> ;</condition> <incr><expr><name pos:line="2573" pos:column="35">i</name><op:operator pos:line="2573" pos:column="36">++</op:operator></expr></incr>)
		<block pos:line="2574" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="2575" pos:column="25">str</name><index pos:line="2575" pos:column="28">[<expr><name pos:line="2575" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="2575" pos:column="32">=</op:operator> <op:operator pos:line="2575" pos:column="34">(</op:operator><name pos:line="2575" pos:column="35">mask</name> <op:operator pos:line="2575" pos:column="40">&amp;</op:operator> <name pos:line="2575" pos:column="42">number</name><op:operator pos:line="2575" pos:column="48">)</op:operator><op:operator pos:line="2575" pos:column="49">?</op:operator><lit:literal type="char" pos:line="2575" pos:column="50">'1'</lit:literal><op:operator pos:line="2575" pos:column="53">:</op:operator><lit:literal type="char" pos:line="2575" pos:column="54">'0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="2576" pos:column="25">mask</name> <op:operator pos:line="2576" pos:column="30">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="2576" pos:column="34">1</lit:literal></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name pos:line="2578" pos:column="17">str</name><index pos:line="2578" pos:column="20">[<expr><name pos:line="2578" pos:column="21">i</name></expr>]</index></name> <op:operator pos:line="2578" pos:column="24">=</op:operator> <lit:literal type="char" pos:line="2578" pos:column="26">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></then></if></else></if></else></if>

	<if pos:line="2581" pos:column="9">if <condition pos:line="2581" pos:column="12">(<expr><op:operator pos:line="2581" pos:column="13">!</op:operator><name pos:line="2581" pos:column="14">isZeroLeading</name></expr>)</condition><then pos:line="2581" pos:column="28">
	<block pos:line="2582" pos:column="9">{
		<if pos:line="2583" pos:column="17">if <condition pos:line="2583" pos:column="20">(<expr><name pos:line="2583" pos:column="21">base</name> <op:operator pos:line="2583" pos:column="26">==</op:operator> <lit:literal type="number" pos:line="2583" pos:column="29">2</lit:literal></expr>)</condition><then pos:line="2583" pos:column="31">
		<block pos:line="2584" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="2585" pos:column="25">TCHAR</name> <type:modifier pos:line="2585" pos:column="31">*</type:modifier></type><name pos:line="2585" pos:column="32">j</name> <init pos:line="2585" pos:column="34">= <expr><name pos:line="2585" pos:column="36">str</name></expr></init></decl>;</decl_stmt>
			<for pos:line="2586" pos:column="25">for ( <init pos:line="2586" pos:column="31">;</init> <condition><expr><op:operator pos:line="2586" pos:column="33">*</op:operator><name pos:line="2586" pos:column="34">j</name> <op:operator pos:line="2586" pos:column="36">!=</op:operator> <lit:literal type="char" pos:line="2586" pos:column="39">'\0'</lit:literal></expr> ;</condition> <incr><expr><name pos:line="2586" pos:column="46">j</name><op:operator pos:line="2586" pos:column="47">++</op:operator></expr></incr>)
				<if pos:line="2587" pos:column="33">if <condition pos:line="2587" pos:column="36">(<expr><op:operator pos:line="2587" pos:column="37">*</op:operator><name pos:line="2587" pos:column="38">j</name> <op:operator pos:line="2587" pos:column="40">==</op:operator> <lit:literal type="char" pos:line="2587" pos:column="43">'1'</lit:literal></expr>)</condition><then pos:line="2587" pos:column="47">
					<break pos:line="2588" pos:column="41">break;</break></then></if></for>
			<expr_stmt><expr><call><name pos:line="2589" pos:column="25">lstrcpy</name><argument_list pos:line="2589" pos:column="32">(<argument><expr><name pos:line="2589" pos:column="33">str</name></expr></argument>, <argument><expr><name pos:line="2589" pos:column="38">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="2591" pos:column="17">else
		<block pos:line="2592" pos:column="17">{
			<comment type="line" pos:line="2593" pos:column="25">// use sprintf or swprintf instead of wsprintf</comment>
			<comment type="line" pos:line="2594" pos:column="25">// to make octal format work</comment>
			<expr_stmt><expr><call><name pos:line="2595" pos:column="25">generic_sprintf</name><argument_list pos:line="2595" pos:column="40">(<argument><expr><name pos:line="2595" pos:column="41">f</name></expr></argument>, <argument><expr><call><name pos:line="2595" pos:column="44">TEXT</name><argument_list pos:line="2595" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="2595" pos:column="49">"%%%s"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2595" pos:column="58">fStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2596" pos:column="25">generic_sprintf</name><argument_list pos:line="2596" pos:column="40">(<argument><expr><name pos:line="2596" pos:column="41">str</name></expr></argument>, <argument><expr><name pos:line="2596" pos:column="46">f</name></expr></argument>, <argument><expr><name pos:line="2596" pos:column="49">number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<decl_stmt><decl><type><name pos:line="2598" pos:column="17">int</name></type> <name pos:line="2598" pos:column="21">i</name> <init pos:line="2598" pos:column="23">= <expr><call><name pos:line="2598" pos:column="25">lstrlen</name><argument_list pos:line="2598" pos:column="32">(<argument><expr><name pos:line="2598" pos:column="33">str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="2599" pos:column="17">for ( <init pos:line="2599" pos:column="23">;</init> <condition><expr><name pos:line="2599" pos:column="25">i</name> <op:operator pos:line="2599" pos:column="27">&lt;</op:operator> <name pos:line="2599" pos:column="29">nbChiffre</name></expr> ;</condition> <incr><expr><name pos:line="2599" pos:column="41">i</name><op:operator pos:line="2599" pos:column="42">++</op:operator></expr></incr>)
			<expr_stmt><expr><name><name pos:line="2600" pos:column="25">str</name><index pos:line="2600" pos:column="28">[<expr><name pos:line="2600" pos:column="29">i</name></expr>]</index></name> <op:operator pos:line="2600" pos:column="32">=</op:operator> <lit:literal type="char" pos:line="2600" pos:column="34">' '</lit:literal></expr>;</expr_stmt></for>
		<expr_stmt><expr><name><name pos:line="2601" pos:column="17">str</name><index pos:line="2601" pos:column="20">[<expr><name pos:line="2601" pos:column="21">i</name></expr>]</index></name> <op:operator pos:line="2601" pos:column="24">=</op:operator> <lit:literal type="char" pos:line="2601" pos:column="26">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="2603" pos:column="9">else
	<block pos:line="2604" pos:column="9">{
		<if pos:line="2605" pos:column="17">if <condition pos:line="2605" pos:column="20">(<expr><name pos:line="2605" pos:column="21">base</name> <op:operator pos:line="2605" pos:column="26">!=</op:operator> <lit:literal type="number" pos:line="2605" pos:column="29">2</lit:literal></expr>)</condition><then pos:line="2605" pos:column="31">
		<block pos:line="2606" pos:column="17">{
			<comment type="line" pos:line="2607" pos:column="25">// use sprintf or swprintf instead of wsprintf</comment>
			<comment type="line" pos:line="2608" pos:column="25">// to make octal format work</comment>
			<expr_stmt><expr><call><name pos:line="2609" pos:column="25">generic_sprintf</name><argument_list pos:line="2609" pos:column="40">(<argument><expr><name pos:line="2609" pos:column="41">f</name></expr></argument>, <argument><expr><call><name pos:line="2609" pos:column="44">TEXT</name><argument_list pos:line="2609" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="2609" pos:column="49">"%%.%d%s"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="2609" pos:column="61">nbChiffre</name></expr></argument>, <argument><expr><name pos:line="2609" pos:column="72">fStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2610" pos:column="25">generic_sprintf</name><argument_list pos:line="2610" pos:column="40">(<argument><expr><name pos:line="2610" pos:column="41">str</name></expr></argument>, <argument><expr><name pos:line="2610" pos:column="46">f</name></expr></argument>, <argument><expr><name pos:line="2610" pos:column="49">number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line" pos:line="2612" pos:column="17">// else already done.</comment>
	}</block></else></if>
	<return pos:line="2614" pos:column="9">return <expr><name pos:line="2614" pos:column="16">str</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2617" pos:column="1">ColumnModeInfos</name></type> <name><name pos:line="2617" pos:column="17">ScintillaEditView</name><op:operator pos:line="2617" pos:column="34">::</op:operator><name pos:line="2617" pos:column="36">getColumnModeSelectInfo</name></name><parameter_list pos:line="2617" pos:column="59">()</parameter_list>
<block pos:line="2618" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2619" pos:column="9">ColumnModeInfos</name></type> <name pos:line="2619" pos:column="25">columnModeInfos</name></decl>;</decl_stmt>
	<if pos:line="2620" pos:column="9">if <condition pos:line="2620" pos:column="12">(<expr><call><name pos:line="2620" pos:column="13">execute</name><argument_list pos:line="2620" pos:column="20">(<argument><expr><name pos:line="2620" pos:column="21">SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call> <op:operator pos:line="2620" pos:column="40">&gt;</op:operator> <lit:literal type="number" pos:line="2620" pos:column="42">1</lit:literal></expr>)</condition><then pos:line="2620" pos:column="44"> <comment type="line" pos:line="2620" pos:column="45">// Multi-Selection || Column mode</comment>
	<block pos:line="2621" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="2622" pos:column="17">int</name></type> <name pos:line="2622" pos:column="21">nbSel</name> <init pos:line="2622" pos:column="27">= <expr><call><name pos:line="2622" pos:column="29">execute</name><argument_list pos:line="2622" pos:column="36">(<argument><expr><name pos:line="2622" pos:column="37">SCI_GETSELECTIONS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for pos:line="2624" pos:column="17">for (<init><decl><type><name pos:line="2624" pos:column="22">int</name></type> <name pos:line="2624" pos:column="26">i</name> <init pos:line="2624" pos:column="28">= <expr><lit:literal type="number" pos:line="2624" pos:column="30">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2624" pos:column="34">i</name> <op:operator pos:line="2624" pos:column="36">&lt;</op:operator> <name pos:line="2624" pos:column="38">nbSel</name></expr> ;</condition> <incr><expr><name pos:line="2624" pos:column="46">i</name><op:operator pos:line="2624" pos:column="47">++</op:operator></expr></incr>)
		<block pos:line="2625" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="2626" pos:column="25">int</name></type> <name pos:line="2626" pos:column="29">absPosSelStartPerLine</name> <init pos:line="2626" pos:column="51">= <expr><call><name pos:line="2626" pos:column="53">execute</name><argument_list pos:line="2626" pos:column="60">(<argument><expr><name pos:line="2626" pos:column="61">SCI_GETSELECTIONNANCHOR</name></expr></argument>, <argument><expr><name pos:line="2626" pos:column="86">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2627" pos:column="25">int</name></type> <name pos:line="2627" pos:column="29">absPosSelEndPerLine</name> <init pos:line="2627" pos:column="49">= <expr><call><name pos:line="2627" pos:column="51">execute</name><argument_list pos:line="2627" pos:column="58">(<argument><expr><name pos:line="2627" pos:column="59">SCI_GETSELECTIONNCARET</name></expr></argument>, <argument><expr><name pos:line="2627" pos:column="83">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2628" pos:column="25">int</name></type> <name pos:line="2628" pos:column="29">nbVirtualAnchorSpc</name> <init pos:line="2628" pos:column="48">= <expr><call><name pos:line="2628" pos:column="50">execute</name><argument_list pos:line="2628" pos:column="57">(<argument><expr><name pos:line="2628" pos:column="58">SCI_GETSELECTIONNANCHORVIRTUALSPACE</name></expr></argument>, <argument><expr><name pos:line="2628" pos:column="95">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2629" pos:column="25">int</name></type> <name pos:line="2629" pos:column="29">nbVirtualCaretSpc</name> <init pos:line="2629" pos:column="47">= <expr><call><name pos:line="2629" pos:column="49">execute</name><argument_list pos:line="2629" pos:column="56">(<argument><expr><name pos:line="2629" pos:column="57">SCI_GETSELECTIONNCARETVIRTUALSPACE</name></expr></argument>, <argument><expr><name pos:line="2629" pos:column="93">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<if pos:line="2631" pos:column="25">if <condition pos:line="2631" pos:column="28">(<expr><name pos:line="2631" pos:column="29">absPosSelStartPerLine</name> <op:operator pos:line="2631" pos:column="51">==</op:operator> <name pos:line="2631" pos:column="54">absPosSelEndPerLine</name> <op:operator pos:line="2631" pos:column="74">&amp;&amp;</op:operator> <call><name pos:line="2631" pos:column="77">execute</name><argument_list pos:line="2631" pos:column="84">(<argument><expr><name pos:line="2631" pos:column="85">SCI_SELECTIONISRECTANGLE</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2631" pos:column="111">
			<block pos:line="2632" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="2633" pos:column="33">bool</name></type> <name pos:line="2633" pos:column="38">dir</name> <init pos:line="2633" pos:column="42">= <expr><name pos:line="2633" pos:column="44">nbVirtualAnchorSpc</name><op:operator pos:line="2633" pos:column="62">&lt;</op:operator><name pos:line="2633" pos:column="63">nbVirtualCaretSpc</name><op:operator pos:line="2633" pos:column="80">?</op:operator><name pos:line="2633" pos:column="81">L2R</name><op:operator pos:line="2633" pos:column="84">:</op:operator><name pos:line="2633" pos:column="85">R2L</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="2634" pos:column="33">columnModeInfos</name><op:operator pos:line="2634" pos:column="48">.</op:operator><name pos:line="2634" pos:column="49">push_back</name></name><argument_list pos:line="2634" pos:column="58">(<argument><expr><call><name pos:line="2634" pos:column="59">ColumnModeInfo</name><argument_list pos:line="2634" pos:column="73">(<argument><expr><name pos:line="2634" pos:column="74">absPosSelStartPerLine</name></expr></argument>, <argument><expr><name pos:line="2634" pos:column="97">absPosSelEndPerLine</name></expr></argument>, <argument><expr><name pos:line="2634" pos:column="118">i</name></expr></argument>, <argument><expr><name pos:line="2634" pos:column="121">dir</name></expr></argument>, <argument><expr><name pos:line="2634" pos:column="126">nbVirtualAnchorSpc</name></expr></argument>, <argument><expr><name pos:line="2634" pos:column="146">nbVirtualCaretSpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="2636" pos:column="25">else <if pos:line="2636" pos:column="30">if <condition pos:line="2636" pos:column="33">(<expr><name pos:line="2636" pos:column="34">absPosSelStartPerLine</name> <op:operator pos:line="2636" pos:column="56">&gt;</op:operator> <name pos:line="2636" pos:column="58">absPosSelEndPerLine</name></expr>)</condition><then pos:line="2636" pos:column="78">
				<expr_stmt><expr><call><name><name pos:line="2637" pos:column="33">columnModeInfos</name><op:operator pos:line="2637" pos:column="48">.</op:operator><name pos:line="2637" pos:column="49">push_back</name></name><argument_list pos:line="2637" pos:column="58">(<argument><expr><call><name pos:line="2637" pos:column="59">ColumnModeInfo</name><argument_list pos:line="2637" pos:column="73">(<argument><expr><name pos:line="2637" pos:column="74">absPosSelEndPerLine</name></expr></argument>, <argument><expr><name pos:line="2637" pos:column="95">absPosSelStartPerLine</name></expr></argument>, <argument><expr><name pos:line="2637" pos:column="118">i</name></expr></argument>, <argument><expr><name pos:line="2637" pos:column="121">R2L</name></expr></argument>, <argument><expr><name pos:line="2637" pos:column="126">nbVirtualAnchorSpc</name></expr></argument>, <argument><expr><name pos:line="2637" pos:column="146">nbVirtualCaretSpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else pos:line="2638" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="2639" pos:column="33">columnModeInfos</name><op:operator pos:line="2639" pos:column="48">.</op:operator><name pos:line="2639" pos:column="49">push_back</name></name><argument_list pos:line="2639" pos:column="58">(<argument><expr><call><name pos:line="2639" pos:column="59">ColumnModeInfo</name><argument_list pos:line="2639" pos:column="73">(<argument><expr><name pos:line="2639" pos:column="74">absPosSelStartPerLine</name></expr></argument>, <argument><expr><name pos:line="2639" pos:column="97">absPosSelEndPerLine</name></expr></argument>, <argument><expr><name pos:line="2639" pos:column="118">i</name></expr></argument>, <argument><expr><name pos:line="2639" pos:column="121">L2R</name></expr></argument>, <argument><expr><name pos:line="2639" pos:column="126">nbVirtualAnchorSpc</name></expr></argument>, <argument><expr><name pos:line="2639" pos:column="146">nbVirtualCaretSpc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
		}</block></for>
	}</block></then></if>
	<return pos:line="2642" pos:column="9">return <expr><name pos:line="2642" pos:column="16">columnModeInfos</name></expr>;</return>
}</block></function>

<function><type><name pos:line="2645" pos:column="1">void</name></type> <name><name pos:line="2645" pos:column="6">ScintillaEditView</name><op:operator pos:line="2645" pos:column="23">::</op:operator><name pos:line="2645" pos:column="25">columnReplace</name></name><parameter_list pos:line="2645" pos:column="38">(<param><decl><type><name pos:line="2645" pos:column="39">ColumnModeInfos</name> <type:modifier pos:line="2645" pos:column="55">&amp;</type:modifier></type> <name pos:line="2645" pos:column="57">cmi</name></decl></param>, <param><decl><type><specifier pos:line="2645" pos:column="62">const</specifier> <name pos:line="2645" pos:column="68">TCHAR</name> <type:modifier pos:line="2645" pos:column="74">*</type:modifier></type><name pos:line="2645" pos:column="75">str</name></decl></param>)</parameter_list>
<block pos:line="2646" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="2647" pos:column="9">int</name></type> <name pos:line="2647" pos:column="13">totalDiff</name> <init pos:line="2647" pos:column="23">= <expr><lit:literal type="number" pos:line="2647" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="2648" pos:column="9">for (<init><decl><type><name pos:line="2648" pos:column="14">size_t</name></type> <name pos:line="2648" pos:column="21">i</name> <init pos:line="2648" pos:column="23">= <expr><lit:literal type="number" pos:line="2648" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2648" pos:column="29">i</name> <op:operator pos:line="2648" pos:column="31">&lt;</op:operator> <call><name><name pos:line="2648" pos:column="33">cmi</name><op:operator pos:line="2648" pos:column="36">.</op:operator><name pos:line="2648" pos:column="37">size</name></name><argument_list pos:line="2648" pos:column="41">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="2648" pos:column="46">i</name><op:operator pos:line="2648" pos:column="47">++</op:operator></expr></incr>)
	<block pos:line="2649" pos:column="9">{
		<if pos:line="2650" pos:column="17">if <condition pos:line="2650" pos:column="20">(<expr><name><name pos:line="2650" pos:column="21">cmi</name><index pos:line="2650" pos:column="24">[<expr><name pos:line="2650" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="2650" pos:column="27">.</op:operator><call><name pos:line="2650" pos:column="28">isValid</name><argument_list pos:line="2650" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="2650" pos:column="38">
		<block pos:line="2651" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="2652" pos:column="25">int</name></type> <name pos:line="2652" pos:column="29">len2beReplace</name> <init pos:line="2652" pos:column="43">= <expr><name><name pos:line="2652" pos:column="45">cmi</name><index pos:line="2652" pos:column="48">[<expr><name pos:line="2652" pos:column="49">i</name></expr>]</index></name><op:operator pos:line="2652" pos:column="51">.</op:operator><name pos:line="2652" pos:column="52">_selRpos</name> <op:operator pos:line="2652" pos:column="61">-</op:operator> <name><name pos:line="2652" pos:column="63">cmi</name><index pos:line="2652" pos:column="66">[<expr><name pos:line="2652" pos:column="67">i</name></expr>]</index></name><op:operator pos:line="2652" pos:column="69">.</op:operator><name pos:line="2652" pos:column="70">_selLpos</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2653" pos:column="25">int</name></type> <name pos:line="2653" pos:column="29">diff</name> <init pos:line="2653" pos:column="34">= <expr><call><name pos:line="2653" pos:column="36">lstrlen</name><argument_list pos:line="2653" pos:column="43">(<argument><expr><name pos:line="2653" pos:column="44">str</name></expr></argument>)</argument_list></call> <op:operator pos:line="2653" pos:column="49">-</op:operator> <name pos:line="2653" pos:column="51">len2beReplace</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name pos:line="2655" pos:column="25">cmi</name><index pos:line="2655" pos:column="28">[<expr><name pos:line="2655" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="2655" pos:column="31">.</op:operator><name pos:line="2655" pos:column="32">_selLpos</name> <op:operator pos:line="2655" pos:column="41">+=</op:operator> <name pos:line="2655" pos:column="44">totalDiff</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2656" pos:column="25">cmi</name><index pos:line="2656" pos:column="28">[<expr><name pos:line="2656" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="2656" pos:column="31">.</op:operator><name pos:line="2656" pos:column="32">_selRpos</name> <op:operator pos:line="2656" pos:column="41">+=</op:operator> <name pos:line="2656" pos:column="44">totalDiff</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="2657" pos:column="25">bool</name></type> <name pos:line="2657" pos:column="30">hasVirtualSpc</name> <init pos:line="2657" pos:column="44">= <expr><name><name pos:line="2657" pos:column="46">cmi</name><index pos:line="2657" pos:column="49">[<expr><name pos:line="2657" pos:column="50">i</name></expr>]</index></name><op:operator pos:line="2657" pos:column="52">.</op:operator><name pos:line="2657" pos:column="53">_nbVirtualAnchorSpc</name> <op:operator pos:line="2657" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="2657" pos:column="75">0</lit:literal></expr></init></decl>;</decl_stmt>

			<if pos:line="2659" pos:column="25">if <condition pos:line="2659" pos:column="28">(<expr><name pos:line="2659" pos:column="29">hasVirtualSpc</name></expr>)</condition><then pos:line="2659" pos:column="43"> <comment type="line" pos:line="2659" pos:column="44">// if virtual space is present, then insert space</comment>
			<block pos:line="2660" pos:column="25">{
				<for pos:line="2661" pos:column="33">for (<init><decl><type><name pos:line="2661" pos:column="38">int</name></type> <name pos:line="2661" pos:column="42">j</name> <init pos:line="2661" pos:column="44">= <expr><lit:literal type="number" pos:line="2661" pos:column="46">0</lit:literal></expr></init><op:operator pos:line="2661" pos:column="47">,</op:operator> <name pos:line="2661" pos:column="49">k</name> <init pos:line="2661" pos:column="51">= <expr><name><name pos:line="2661" pos:column="53">cmi</name><index pos:line="2661" pos:column="56">[<expr><name pos:line="2661" pos:column="57">i</name></expr>]</index></name><op:operator pos:line="2661" pos:column="59">.</op:operator><name pos:line="2661" pos:column="60">_selLpos</name></expr></init></decl>;</init> <condition><expr><name pos:line="2661" pos:column="70">j</name> <op:operator pos:line="2661" pos:column="72">&lt;</op:operator> <name><name pos:line="2661" pos:column="74">cmi</name><index pos:line="2661" pos:column="77">[<expr><name pos:line="2661" pos:column="78">i</name></expr>]</index></name><op:operator pos:line="2661" pos:column="80">.</op:operator><name pos:line="2661" pos:column="81">_nbVirtualCaretSpc</name></expr> ;</condition> <incr><expr><name pos:line="2661" pos:column="102">j</name><op:operator pos:line="2661" pos:column="103">++</op:operator></expr><op:operator pos:line="2661" pos:column="105">,</op:operator> <expr><name pos:line="2661" pos:column="107">k</name><op:operator pos:line="2661" pos:column="108">++</op:operator></expr></incr>)
				<block pos:line="2662" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="2663" pos:column="41">execute</name><argument_list pos:line="2663" pos:column="48">(<argument><expr><name pos:line="2663" pos:column="49">SCI_INSERTTEXT</name></expr></argument>, <argument><expr><name pos:line="2663" pos:column="65">k</name></expr></argument>, <argument><expr><op:operator pos:line="2663" pos:column="68">(</op:operator><name pos:line="2663" pos:column="69">LPARAM</name><op:operator pos:line="2663" pos:column="75">)</op:operator><lit:literal type="string" pos:line="2663" pos:column="76">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name pos:line="2665" pos:column="33">cmi</name><index pos:line="2665" pos:column="36">[<expr><name pos:line="2665" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2665" pos:column="39">.</op:operator><name pos:line="2665" pos:column="40">_selLpos</name> <op:operator pos:line="2665" pos:column="49">+=</op:operator> <name><name pos:line="2665" pos:column="52">cmi</name><index pos:line="2665" pos:column="55">[<expr><name pos:line="2665" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="2665" pos:column="58">.</op:operator><name pos:line="2665" pos:column="59">_nbVirtualAnchorSpc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="2666" pos:column="33">cmi</name><index pos:line="2666" pos:column="36">[<expr><name pos:line="2666" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2666" pos:column="39">.</op:operator><name pos:line="2666" pos:column="40">_selRpos</name> <op:operator pos:line="2666" pos:column="49">+=</op:operator> <name><name pos:line="2666" pos:column="52">cmi</name><index pos:line="2666" pos:column="55">[<expr><name pos:line="2666" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="2666" pos:column="58">.</op:operator><name pos:line="2666" pos:column="59">_nbVirtualCaretSpc</name></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><call><name pos:line="2669" pos:column="25">execute</name><argument_list pos:line="2669" pos:column="32">(<argument><expr><name pos:line="2669" pos:column="33">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name><name pos:line="2669" pos:column="53">cmi</name><index pos:line="2669" pos:column="56">[<expr><name pos:line="2669" pos:column="57">i</name></expr>]</index></name><op:operator pos:line="2669" pos:column="59">.</op:operator><name pos:line="2669" pos:column="60">_selLpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2670" pos:column="25">execute</name><argument_list pos:line="2670" pos:column="32">(<argument><expr><name pos:line="2670" pos:column="33">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name><name pos:line="2670" pos:column="51">cmi</name><index pos:line="2670" pos:column="54">[<expr><name pos:line="2670" pos:column="55">i</name></expr>]</index></name><op:operator pos:line="2670" pos:column="57">.</op:operator><name pos:line="2670" pos:column="58">_selRpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
<cpp:ifdef pos:line="2672" pos:column="1">#<cpp:directive pos:line="2672" pos:column="2">ifdef</cpp:directive> <name pos:line="2672" pos:column="8">UNICODE</name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="2673" pos:column="25">WcharMbcsConvertor</name> <type:modifier pos:line="2673" pos:column="44">*</type:modifier></type><name pos:line="2673" pos:column="45">wmc</name> <init pos:line="2673" pos:column="49">= <expr><call><name><name pos:line="2673" pos:column="51">WcharMbcsConvertor</name><op:operator pos:line="2673" pos:column="69">::</op:operator><name pos:line="2673" pos:column="71">getInstance</name></name><argument_list pos:line="2673" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2674" pos:column="25">unsigned</name> <name pos:line="2674" pos:column="34">int</name></type> <name pos:line="2674" pos:column="38">cp</name> <init pos:line="2674" pos:column="41">= <expr><call><name pos:line="2674" pos:column="43">execute</name><argument_list pos:line="2674" pos:column="50">(<argument><expr><name pos:line="2674" pos:column="51">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="2675" pos:column="25">const</specifier> <name pos:line="2675" pos:column="31">char</name> <type:modifier pos:line="2675" pos:column="36">*</type:modifier></type><name pos:line="2675" pos:column="37">strA</name> <init pos:line="2675" pos:column="42">= <expr><call><name><name pos:line="2675" pos:column="44">wmc</name><op:operator pos:line="2675" pos:column="47">-&gt;</op:operator><name pos:line="2675" pos:column="49">wchar2char</name></name><argument_list pos:line="2675" pos:column="59">(<argument><expr><name pos:line="2675" pos:column="60">str</name></expr></argument>, <argument><expr><name pos:line="2675" pos:column="65">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="2676" pos:column="25">execute</name><argument_list pos:line="2676" pos:column="32">(<argument><expr><name pos:line="2676" pos:column="33">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><op:operator pos:line="2676" pos:column="52">(</op:operator><name pos:line="2676" pos:column="53">WPARAM</name><op:operator pos:line="2676" pos:column="59">)</op:operator><op:operator pos:line="2676" pos:column="60">-</op:operator><lit:literal type="number" pos:line="2676" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2676" pos:column="64">(</op:operator><name pos:line="2676" pos:column="65">LPARAM</name><op:operator pos:line="2676" pos:column="71">)</op:operator><name pos:line="2676" pos:column="72">strA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2677" pos:column="1">#<cpp:directive pos:line="2677" pos:column="2">else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name pos:line="2678" pos:column="25">execute</name><argument_list pos:line="2678" pos:column="32">(<argument><expr><name pos:line="2678" pos:column="33">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><op:operator pos:line="2678" pos:column="52">(</op:operator><name pos:line="2678" pos:column="53">WPARAM</name><op:operator pos:line="2678" pos:column="59">)</op:operator><op:operator pos:line="2678" pos:column="60">-</op:operator><lit:literal type="number" pos:line="2678" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2678" pos:column="64">(</op:operator><name pos:line="2678" pos:column="65">LPARAM</name><op:operator pos:line="2678" pos:column="71">)</op:operator><name pos:line="2678" pos:column="72">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2679" pos:column="1">#<cpp:directive pos:line="2679" pos:column="2">endif</cpp:directive></cpp:endif>
			
			<if pos:line="2681" pos:column="25">if <condition pos:line="2681" pos:column="28">(<expr><name pos:line="2681" pos:column="29">hasVirtualSpc</name></expr>)</condition><then pos:line="2681" pos:column="43"> 
			<block pos:line="2682" pos:column="25">{
				<expr_stmt><expr><name pos:line="2683" pos:column="33">totalDiff</name> <op:operator pos:line="2683" pos:column="43">+=</op:operator> <name><name pos:line="2683" pos:column="46">cmi</name><index pos:line="2683" pos:column="49">[<expr><name pos:line="2683" pos:column="50">i</name></expr>]</index></name><op:operator pos:line="2683" pos:column="52">.</op:operator><name pos:line="2683" pos:column="53">_nbVirtualAnchorSpc</name> <op:operator pos:line="2683" pos:column="73">+</op:operator> <call><name pos:line="2683" pos:column="75">lstrlen</name><argument_list pos:line="2683" pos:column="82">(<argument><expr><name pos:line="2683" pos:column="83">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line" pos:line="2685" pos:column="33">// Now there's no more virtual space</comment>
				<expr_stmt><expr><name><name pos:line="2686" pos:column="33">cmi</name><index pos:line="2686" pos:column="36">[<expr><name pos:line="2686" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2686" pos:column="39">.</op:operator><name pos:line="2686" pos:column="40">_nbVirtualAnchorSpc</name> <op:operator pos:line="2686" pos:column="60">=</op:operator> <lit:literal type="number" pos:line="2686" pos:column="62">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="2687" pos:column="33">cmi</name><index pos:line="2687" pos:column="36">[<expr><name pos:line="2687" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2687" pos:column="39">.</op:operator><name pos:line="2687" pos:column="40">_nbVirtualCaretSpc</name> <op:operator pos:line="2687" pos:column="59">=</op:operator> <lit:literal type="number" pos:line="2687" pos:column="61">0</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="2689" pos:column="25">else
			<block pos:line="2690" pos:column="25">{
				<expr_stmt><expr><name pos:line="2691" pos:column="33">totalDiff</name> <op:operator pos:line="2691" pos:column="43">+=</op:operator> <name pos:line="2691" pos:column="46">diff</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name><name pos:line="2693" pos:column="25">cmi</name><index pos:line="2693" pos:column="28">[<expr><name pos:line="2693" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="2693" pos:column="31">.</op:operator><name pos:line="2693" pos:column="32">_selRpos</name> <op:operator pos:line="2693" pos:column="41">+=</op:operator> <name pos:line="2693" pos:column="44">diff</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="2698" pos:column="1">void</name></type> <name><name pos:line="2698" pos:column="6">ScintillaEditView</name><op:operator pos:line="2698" pos:column="23">::</op:operator><name pos:line="2698" pos:column="25">columnReplace</name></name><parameter_list pos:line="2698" pos:column="38">(<param><decl><type><name pos:line="2698" pos:column="39">ColumnModeInfos</name> <type:modifier pos:line="2698" pos:column="55">&amp;</type:modifier></type> <name pos:line="2698" pos:column="57">cmi</name></decl></param>, <param><decl><type><name pos:line="2698" pos:column="62">int</name></type> <name pos:line="2698" pos:column="66">initial</name></decl></param>, <param><decl><type><name pos:line="2698" pos:column="75">int</name></type> <name pos:line="2698" pos:column="79">incr</name></decl></param>, <param><decl><type><name pos:line="2698" pos:column="85">UCHAR</name></type> <name pos:line="2698" pos:column="91">format</name></decl></param>)</parameter_list>
<block pos:line="2699" pos:column="1">{
	<comment type="line" pos:line="2700" pos:column="9">// 0000 00 00 : Dec BASE_10</comment>
	<comment type="line" pos:line="2701" pos:column="9">// 0000 00 01 : Hex BASE_16</comment>
	<comment type="line" pos:line="2702" pos:column="9">// 0000 00 10 : Oct BASE_08</comment>
	<comment type="line" pos:line="2703" pos:column="9">// 0000 00 11 : Bin BASE_02</comment>

	<comment type="line" pos:line="2705" pos:column="9">// 0000 01 00 : 0 leading</comment>

	<comment type="line" pos:line="2707" pos:column="9">//Defined in ScintillaEditView.h :</comment>
	<comment type="line" pos:line="2708" pos:column="9">//const UCHAR MASK_FORMAT = 0x03;</comment>
	<comment type="line" pos:line="2709" pos:column="9">//const UCHAR MASK_ZERO_LEADING = 0x04;</comment>

	<decl_stmt><decl><type><name pos:line="2711" pos:column="9">UCHAR</name></type> <name pos:line="2711" pos:column="15">f</name> <init pos:line="2711" pos:column="17">= <expr><name pos:line="2711" pos:column="19">format</name> <op:operator pos:line="2711" pos:column="26">&amp;</op:operator> <name pos:line="2711" pos:column="28">MASK_FORMAT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2712" pos:column="9">bool</name></type> <name pos:line="2712" pos:column="14">isZeroLeading</name> <init pos:line="2712" pos:column="28">= <expr><op:operator pos:line="2712" pos:column="30">(</op:operator><name pos:line="2712" pos:column="31">MASK_ZERO_LEADING</name> <op:operator pos:line="2712" pos:column="49">&amp;</op:operator> <name pos:line="2712" pos:column="51">format</name><op:operator pos:line="2712" pos:column="57">)</op:operator> <op:operator pos:line="2712" pos:column="59">!=</op:operator> <lit:literal type="number" pos:line="2712" pos:column="62">0</lit:literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="2714" pos:column="9">int</name></type> <name pos:line="2714" pos:column="13">base</name> <init pos:line="2714" pos:column="18">= <expr><lit:literal type="number" pos:line="2714" pos:column="20">10</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="2715" pos:column="9">if <condition pos:line="2715" pos:column="12">(<expr><name pos:line="2715" pos:column="13">f</name> <op:operator pos:line="2715" pos:column="15">==</op:operator> <name pos:line="2715" pos:column="18">BASE_16</name></expr>)</condition><then pos:line="2715" pos:column="26">
		<expr_stmt><expr><name pos:line="2716" pos:column="17">base</name> <op:operator pos:line="2716" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="2716" pos:column="24">16</lit:literal></expr>;</expr_stmt></then>
	<else pos:line="2717" pos:column="9">else <if pos:line="2717" pos:column="14">if <condition pos:line="2717" pos:column="17">(<expr><name pos:line="2717" pos:column="18">f</name> <op:operator pos:line="2717" pos:column="20">==</op:operator> <name pos:line="2717" pos:column="23">BASE_08</name></expr>)</condition><then pos:line="2717" pos:column="31">
		<expr_stmt><expr><name pos:line="2718" pos:column="17">base</name> <op:operator pos:line="2718" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="2718" pos:column="24">8</lit:literal></expr>;</expr_stmt></then>
	<else pos:line="2719" pos:column="9">else <if pos:line="2719" pos:column="14">if <condition pos:line="2719" pos:column="17">(<expr><name pos:line="2719" pos:column="18">f</name> <op:operator pos:line="2719" pos:column="20">==</op:operator> <name pos:line="2719" pos:column="23">BASE_02</name></expr>)</condition><then pos:line="2719" pos:column="31">
		<expr_stmt><expr><name pos:line="2720" pos:column="17">base</name> <op:operator pos:line="2720" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="2720" pos:column="24">2</lit:literal></expr>;</expr_stmt></then></if></else></if></else></if>

	<decl_stmt><decl><type><name pos:line="2722" pos:column="9">int</name></type> <name pos:line="2722" pos:column="13">endNumber</name> <init pos:line="2722" pos:column="23">= <expr><name pos:line="2722" pos:column="25">initial</name> <op:operator pos:line="2722" pos:column="33">+</op:operator> <name pos:line="2722" pos:column="35">incr</name> <op:operator pos:line="2722" pos:column="40">*</op:operator> <op:operator pos:line="2722" pos:column="42">(</op:operator><call><name><name pos:line="2722" pos:column="43">cmi</name><op:operator pos:line="2722" pos:column="46">.</op:operator><name pos:line="2722" pos:column="47">size</name></name><argument_list pos:line="2722" pos:column="51">()</argument_list></call> <op:operator pos:line="2722" pos:column="54">-</op:operator> <lit:literal type="number" pos:line="2722" pos:column="56">1</lit:literal><op:operator pos:line="2722" pos:column="57">)</op:operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2723" pos:column="9">int</name></type> <name pos:line="2723" pos:column="13">nbEnd</name> <init pos:line="2723" pos:column="19">= <expr><call><name pos:line="2723" pos:column="21">getNbDigits</name><argument_list pos:line="2723" pos:column="32">(<argument><expr><name pos:line="2723" pos:column="33">endNumber</name></expr></argument>, <argument><expr><name pos:line="2723" pos:column="44">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2724" pos:column="9">int</name></type> <name pos:line="2724" pos:column="13">nbInit</name> <init pos:line="2724" pos:column="20">= <expr><call><name pos:line="2724" pos:column="22">getNbDigits</name><argument_list pos:line="2724" pos:column="33">(<argument><expr><name pos:line="2724" pos:column="34">initial</name></expr></argument>, <argument><expr><name pos:line="2724" pos:column="43">base</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2725" pos:column="9">int</name></type> <name pos:line="2725" pos:column="13">nb</name> <init pos:line="2725" pos:column="16">= <expr><call><name pos:line="2725" pos:column="18">max</name><argument_list pos:line="2725" pos:column="21">(<argument><expr><name pos:line="2725" pos:column="22">nbInit</name></expr></argument>, <argument><expr><name pos:line="2725" pos:column="30">nbEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="2727" pos:column="9">const</specifier> <name pos:line="2727" pos:column="15">int</name></type> <name pos:line="2727" pos:column="19">stringSize</name> <init pos:line="2727" pos:column="30">= <expr><lit:literal type="number" pos:line="2727" pos:column="32">512</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2728" pos:column="9">TCHAR</name></type> <name><name pos:line="2728" pos:column="15">str</name><index pos:line="2728" pos:column="18">[<expr><name pos:line="2728" pos:column="19">stringSize</name></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="2730" pos:column="9">int</name></type> <name pos:line="2730" pos:column="13">totalDiff</name> <init pos:line="2730" pos:column="23">= <expr><lit:literal type="number" pos:line="2730" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="2731" pos:column="9">for (<init><decl><type><name pos:line="2731" pos:column="14">size_t</name></type> <name pos:line="2731" pos:column="21">i</name> <init pos:line="2731" pos:column="23">= <expr><lit:literal type="number" pos:line="2731" pos:column="25">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="2731" pos:column="29">i</name> <op:operator pos:line="2731" pos:column="31">&lt;</op:operator> <call><name><name pos:line="2731" pos:column="33">cmi</name><op:operator pos:line="2731" pos:column="36">.</op:operator><name pos:line="2731" pos:column="37">size</name></name><argument_list pos:line="2731" pos:column="41">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="2731" pos:column="46">i</name><op:operator pos:line="2731" pos:column="47">++</op:operator></expr></incr>)
	<block pos:line="2732" pos:column="9">{
		<if pos:line="2733" pos:column="17">if <condition pos:line="2733" pos:column="20">(<expr><name><name pos:line="2733" pos:column="21">cmi</name><index pos:line="2733" pos:column="24">[<expr><name pos:line="2733" pos:column="25">i</name></expr>]</index></name><op:operator pos:line="2733" pos:column="27">.</op:operator><call><name pos:line="2733" pos:column="28">isValid</name><argument_list pos:line="2733" pos:column="35">()</argument_list></call></expr>)</condition><then pos:line="2733" pos:column="38">
		<block pos:line="2734" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="2735" pos:column="25">int</name></type> <name pos:line="2735" pos:column="29">len2beReplace</name> <init pos:line="2735" pos:column="43">= <expr><name><name pos:line="2735" pos:column="45">cmi</name><index pos:line="2735" pos:column="48">[<expr><name pos:line="2735" pos:column="49">i</name></expr>]</index></name><op:operator pos:line="2735" pos:column="51">.</op:operator><name pos:line="2735" pos:column="52">_selRpos</name> <op:operator pos:line="2735" pos:column="61">-</op:operator> <name><name pos:line="2735" pos:column="63">cmi</name><index pos:line="2735" pos:column="66">[<expr><name pos:line="2735" pos:column="67">i</name></expr>]</index></name><op:operator pos:line="2735" pos:column="69">.</op:operator><name pos:line="2735" pos:column="70">_selLpos</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2736" pos:column="25">int</name></type> <name pos:line="2736" pos:column="29">diff</name> <init pos:line="2736" pos:column="34">= <expr><name pos:line="2736" pos:column="36">nb</name> <op:operator pos:line="2736" pos:column="39">-</op:operator> <name pos:line="2736" pos:column="41">len2beReplace</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name pos:line="2738" pos:column="25">cmi</name><index pos:line="2738" pos:column="28">[<expr><name pos:line="2738" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="2738" pos:column="31">.</op:operator><name pos:line="2738" pos:column="32">_selLpos</name> <op:operator pos:line="2738" pos:column="41">+=</op:operator> <name pos:line="2738" pos:column="44">totalDiff</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="2739" pos:column="25">cmi</name><index pos:line="2739" pos:column="28">[<expr><name pos:line="2739" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="2739" pos:column="31">.</op:operator><name pos:line="2739" pos:column="32">_selRpos</name> <op:operator pos:line="2739" pos:column="41">+=</op:operator> <name pos:line="2739" pos:column="44">totalDiff</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name pos:line="2741" pos:column="25">int2str</name><argument_list pos:line="2741" pos:column="32">(<argument><expr><name pos:line="2741" pos:column="33">str</name></expr></argument>, <argument><expr><name pos:line="2741" pos:column="38">stringSize</name></expr></argument>, <argument><expr><name pos:line="2741" pos:column="50">initial</name></expr></argument>, <argument><expr><name pos:line="2741" pos:column="59">base</name></expr></argument>, <argument><expr><name pos:line="2741" pos:column="65">nb</name></expr></argument>, <argument><expr><name pos:line="2741" pos:column="69">isZeroLeading</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name pos:line="2743" pos:column="25">bool</name></type> <name pos:line="2743" pos:column="30">hasVirtualSpc</name> <init pos:line="2743" pos:column="44">= <expr><name><name pos:line="2743" pos:column="46">cmi</name><index pos:line="2743" pos:column="49">[<expr><name pos:line="2743" pos:column="50">i</name></expr>]</index></name><op:operator pos:line="2743" pos:column="52">.</op:operator><name pos:line="2743" pos:column="53">_nbVirtualAnchorSpc</name> <op:operator pos:line="2743" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="2743" pos:column="75">0</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="2744" pos:column="25">if <condition pos:line="2744" pos:column="28">(<expr><name pos:line="2744" pos:column="29">hasVirtualSpc</name></expr>)</condition><then pos:line="2744" pos:column="43"> <comment type="line" pos:line="2744" pos:column="44">// if virtual space is present, then insert space</comment>
			<block pos:line="2745" pos:column="25">{
				<for pos:line="2746" pos:column="33">for (<init><decl><type><name pos:line="2746" pos:column="38">int</name></type> <name pos:line="2746" pos:column="42">j</name> <init pos:line="2746" pos:column="44">= <expr><lit:literal type="number" pos:line="2746" pos:column="46">0</lit:literal></expr></init><op:operator pos:line="2746" pos:column="47">,</op:operator> <name pos:line="2746" pos:column="49">k</name> <init pos:line="2746" pos:column="51">= <expr><name><name pos:line="2746" pos:column="53">cmi</name><index pos:line="2746" pos:column="56">[<expr><name pos:line="2746" pos:column="57">i</name></expr>]</index></name><op:operator pos:line="2746" pos:column="59">.</op:operator><name pos:line="2746" pos:column="60">_selLpos</name></expr></init></decl>;</init> <condition><expr><name pos:line="2746" pos:column="70">j</name> <op:operator pos:line="2746" pos:column="72">&lt;</op:operator> <name><name pos:line="2746" pos:column="74">cmi</name><index pos:line="2746" pos:column="77">[<expr><name pos:line="2746" pos:column="78">i</name></expr>]</index></name><op:operator pos:line="2746" pos:column="80">.</op:operator><name pos:line="2746" pos:column="81">_nbVirtualCaretSpc</name></expr> ;</condition> <incr><expr><name pos:line="2746" pos:column="102">j</name><op:operator pos:line="2746" pos:column="103">++</op:operator></expr><op:operator pos:line="2746" pos:column="105">,</op:operator> <expr><name pos:line="2746" pos:column="107">k</name><op:operator pos:line="2746" pos:column="108">++</op:operator></expr></incr>)
				<block pos:line="2747" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="2748" pos:column="41">execute</name><argument_list pos:line="2748" pos:column="48">(<argument><expr><name pos:line="2748" pos:column="49">SCI_INSERTTEXT</name></expr></argument>, <argument><expr><name pos:line="2748" pos:column="65">k</name></expr></argument>, <argument><expr><op:operator pos:line="2748" pos:column="68">(</op:operator><name pos:line="2748" pos:column="69">LPARAM</name><op:operator pos:line="2748" pos:column="75">)</op:operator><lit:literal type="string" pos:line="2748" pos:column="76">" "</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name pos:line="2750" pos:column="33">cmi</name><index pos:line="2750" pos:column="36">[<expr><name pos:line="2750" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2750" pos:column="39">.</op:operator><name pos:line="2750" pos:column="40">_selLpos</name> <op:operator pos:line="2750" pos:column="49">+=</op:operator> <name><name pos:line="2750" pos:column="52">cmi</name><index pos:line="2750" pos:column="55">[<expr><name pos:line="2750" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="2750" pos:column="58">.</op:operator><name pos:line="2750" pos:column="59">_nbVirtualAnchorSpc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="2751" pos:column="33">cmi</name><index pos:line="2751" pos:column="36">[<expr><name pos:line="2751" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2751" pos:column="39">.</op:operator><name pos:line="2751" pos:column="40">_selRpos</name> <op:operator pos:line="2751" pos:column="49">+=</op:operator> <name><name pos:line="2751" pos:column="52">cmi</name><index pos:line="2751" pos:column="55">[<expr><name pos:line="2751" pos:column="56">i</name></expr>]</index></name><op:operator pos:line="2751" pos:column="58">.</op:operator><name pos:line="2751" pos:column="59">_nbVirtualCaretSpc</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name pos:line="2753" pos:column="25">execute</name><argument_list pos:line="2753" pos:column="32">(<argument><expr><name pos:line="2753" pos:column="33">SCI_SETTARGETSTART</name></expr></argument>, <argument><expr><name><name pos:line="2753" pos:column="53">cmi</name><index pos:line="2753" pos:column="56">[<expr><name pos:line="2753" pos:column="57">i</name></expr>]</index></name><op:operator pos:line="2753" pos:column="59">.</op:operator><name pos:line="2753" pos:column="60">_selLpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2754" pos:column="25">execute</name><argument_list pos:line="2754" pos:column="32">(<argument><expr><name pos:line="2754" pos:column="33">SCI_SETTARGETEND</name></expr></argument>, <argument><expr><name><name pos:line="2754" pos:column="51">cmi</name><index pos:line="2754" pos:column="54">[<expr><name pos:line="2754" pos:column="55">i</name></expr>]</index></name><op:operator pos:line="2754" pos:column="57">.</op:operator><name pos:line="2754" pos:column="58">_selRpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:line="2755" pos:column="1">#<cpp:directive pos:line="2755" pos:column="2">ifdef</cpp:directive> <name pos:line="2755" pos:column="8">UNICODE</name></cpp:ifdef>
			<decl_stmt><decl><type><name pos:line="2756" pos:column="25">WcharMbcsConvertor</name> <type:modifier pos:line="2756" pos:column="44">*</type:modifier></type><name pos:line="2756" pos:column="45">wmc</name> <init pos:line="2756" pos:column="49">= <expr><call><name><name pos:line="2756" pos:column="51">WcharMbcsConvertor</name><op:operator pos:line="2756" pos:column="69">::</op:operator><name pos:line="2756" pos:column="71">getInstance</name></name><argument_list pos:line="2756" pos:column="82">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="2757" pos:column="25">unsigned</name> <name pos:line="2757" pos:column="34">int</name></type> <name pos:line="2757" pos:column="38">cp</name> <init pos:line="2757" pos:column="41">= <expr><call><name pos:line="2757" pos:column="43">execute</name><argument_list pos:line="2757" pos:column="50">(<argument><expr><name pos:line="2757" pos:column="51">SCI_GETCODEPAGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="2758" pos:column="25">const</specifier> <name pos:line="2758" pos:column="31">char</name> <type:modifier pos:line="2758" pos:column="36">*</type:modifier></type><name pos:line="2758" pos:column="37">strA</name> <init pos:line="2758" pos:column="42">= <expr><call><name><name pos:line="2758" pos:column="44">wmc</name><op:operator pos:line="2758" pos:column="47">-&gt;</op:operator><name pos:line="2758" pos:column="49">wchar2char</name></name><argument_list pos:line="2758" pos:column="59">(<argument><expr><name pos:line="2758" pos:column="60">str</name></expr></argument>, <argument><expr><name pos:line="2758" pos:column="65">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="2759" pos:column="25">execute</name><argument_list pos:line="2759" pos:column="32">(<argument><expr><name pos:line="2759" pos:column="33">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><op:operator pos:line="2759" pos:column="52">(</op:operator><name pos:line="2759" pos:column="53">WPARAM</name><op:operator pos:line="2759" pos:column="59">)</op:operator><op:operator pos:line="2759" pos:column="60">-</op:operator><lit:literal type="number" pos:line="2759" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2759" pos:column="64">(</op:operator><name pos:line="2759" pos:column="65">LPARAM</name><op:operator pos:line="2759" pos:column="71">)</op:operator><name pos:line="2759" pos:column="72">strA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2760" pos:column="1">#<cpp:directive pos:line="2760" pos:column="2">else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name pos:line="2761" pos:column="25">execute</name><argument_list pos:line="2761" pos:column="32">(<argument><expr><name pos:line="2761" pos:column="33">SCI_REPLACETARGET</name></expr></argument>, <argument><expr><op:operator pos:line="2761" pos:column="52">(</op:operator><name pos:line="2761" pos:column="53">WPARAM</name><op:operator pos:line="2761" pos:column="59">)</op:operator><op:operator pos:line="2761" pos:column="60">-</op:operator><lit:literal type="number" pos:line="2761" pos:column="61">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="2761" pos:column="64">(</op:operator><name pos:line="2761" pos:column="65">LPARAM</name><op:operator pos:line="2761" pos:column="71">)</op:operator><name pos:line="2761" pos:column="72">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2762" pos:column="1">#<cpp:directive pos:line="2762" pos:column="2">endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name pos:line="2763" pos:column="25">initial</name> <op:operator pos:line="2763" pos:column="33">+=</op:operator> <name pos:line="2763" pos:column="36">incr</name></expr>;</expr_stmt>
			<if pos:line="2764" pos:column="25">if <condition pos:line="2764" pos:column="28">(<expr><name pos:line="2764" pos:column="29">hasVirtualSpc</name></expr>)</condition><then pos:line="2764" pos:column="43"> 
			<block pos:line="2765" pos:column="25">{
				<expr_stmt><expr><name pos:line="2766" pos:column="33">totalDiff</name> <op:operator pos:line="2766" pos:column="43">+=</op:operator> <name><name pos:line="2766" pos:column="46">cmi</name><index pos:line="2766" pos:column="49">[<expr><name pos:line="2766" pos:column="50">i</name></expr>]</index></name><op:operator pos:line="2766" pos:column="52">.</op:operator><name pos:line="2766" pos:column="53">_nbVirtualAnchorSpc</name> <op:operator pos:line="2766" pos:column="73">+</op:operator> <call><name pos:line="2766" pos:column="75">lstrlen</name><argument_list pos:line="2766" pos:column="82">(<argument><expr><name pos:line="2766" pos:column="83">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line" pos:line="2767" pos:column="33">// Now there's no more virtual space</comment>
				<expr_stmt><expr><name><name pos:line="2768" pos:column="33">cmi</name><index pos:line="2768" pos:column="36">[<expr><name pos:line="2768" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2768" pos:column="39">.</op:operator><name pos:line="2768" pos:column="40">_nbVirtualAnchorSpc</name> <op:operator pos:line="2768" pos:column="60">=</op:operator> <lit:literal type="number" pos:line="2768" pos:column="62">0</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="2769" pos:column="33">cmi</name><index pos:line="2769" pos:column="36">[<expr><name pos:line="2769" pos:column="37">i</name></expr>]</index></name><op:operator pos:line="2769" pos:column="39">.</op:operator><name pos:line="2769" pos:column="40">_nbVirtualCaretSpc</name> <op:operator pos:line="2769" pos:column="59">=</op:operator> <lit:literal type="number" pos:line="2769" pos:column="61">0</lit:literal></expr>;</expr_stmt>
			}</block></then>
			<else pos:line="2771" pos:column="25">else
			<block pos:line="2772" pos:column="25">{
				<expr_stmt><expr><name pos:line="2773" pos:column="33">totalDiff</name> <op:operator pos:line="2773" pos:column="43">+=</op:operator> <name pos:line="2773" pos:column="46">diff</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name><name pos:line="2775" pos:column="25">cmi</name><index pos:line="2775" pos:column="28">[<expr><name pos:line="2775" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="2775" pos:column="31">.</op:operator><name pos:line="2775" pos:column="32">_selRpos</name> <op:operator pos:line="2775" pos:column="41">+=</op:operator> <name pos:line="2775" pos:column="44">diff</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>


<function><type><name pos:line="2781" pos:column="1">void</name></type> <name><name pos:line="2781" pos:column="6">ScintillaEditView</name><op:operator pos:line="2781" pos:column="23">::</op:operator><name pos:line="2781" pos:column="25">foldChanged</name></name><parameter_list pos:line="2781" pos:column="36">(<param><decl><type><name pos:line="2781" pos:column="37">int</name></type> <name pos:line="2781" pos:column="41">line</name></decl></param>, <param><decl><type><name pos:line="2781" pos:column="47">int</name></type> <name pos:line="2781" pos:column="51">levelNow</name></decl></param>, <param><decl><type><name pos:line="2781" pos:column="61">int</name></type> <name pos:line="2781" pos:column="65">levelPrev</name></decl></param>)</parameter_list>
<block pos:line="2782" pos:column="1">{
	<if pos:line="2783" pos:column="9">if <condition pos:line="2783" pos:column="12">(<expr><name pos:line="2783" pos:column="13">levelNow</name> <op:operator pos:line="2783" pos:column="22">&amp;</op:operator> <name pos:line="2783" pos:column="24">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="2783" pos:column="47">		<comment type="line" pos:line="2783" pos:column="57">//line can be folded</comment>
	<block pos:line="2784" pos:column="9">{
		<if pos:line="2785" pos:column="17">if <condition pos:line="2785" pos:column="20">(<expr><op:operator pos:line="2785" pos:column="21">!</op:operator><op:operator pos:line="2785" pos:column="22">(</op:operator><name pos:line="2785" pos:column="23">levelPrev</name> <op:operator pos:line="2785" pos:column="33">&amp;</op:operator> <name pos:line="2785" pos:column="35">SC_FOLDLEVELHEADERFLAG</name><op:operator pos:line="2785" pos:column="57">)</op:operator></expr>)</condition><then pos:line="2785" pos:column="59">	<comment type="line" pos:line="2785" pos:column="65">//but previously couldnt</comment>
		<block pos:line="2786" pos:column="17">{
			<comment type="line" pos:line="2787" pos:column="25">// Adding a fold point.</comment>
			<expr_stmt><expr><call><name pos:line="2788" pos:column="25">execute</name><argument_list pos:line="2788" pos:column="32">(<argument><expr><name pos:line="2788" pos:column="33">SCI_SETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2788" pos:column="54">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2788" pos:column="60">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2789" pos:column="25">expand</name><argument_list pos:line="2789" pos:column="31">(<argument><expr><name pos:line="2789" pos:column="32">line</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2789" pos:column="38">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2789" pos:column="44">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2789" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2789" pos:column="54">levelPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then>
	<else pos:line="2792" pos:column="9">else <if pos:line="2792" pos:column="14">if <condition pos:line="2792" pos:column="17">(<expr><name pos:line="2792" pos:column="18">levelPrev</name> <op:operator pos:line="2792" pos:column="28">&amp;</op:operator> <name pos:line="2792" pos:column="30">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="2792" pos:column="53">
	<block pos:line="2793" pos:column="9">{
		<if pos:line="2794" pos:column="17">if <condition pos:line="2794" pos:column="20">(<expr><op:operator pos:line="2794" pos:column="21">!</op:operator><call><name pos:line="2794" pos:column="22">execute</name><argument_list pos:line="2794" pos:column="29">(<argument><expr><name pos:line="2794" pos:column="30">SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2794" pos:column="51">line</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="2794" pos:column="57">
		<block pos:line="2795" pos:column="17">{
			<comment type="line" pos:line="2796" pos:column="25">// Removing the fold from one that has been contracted so should expand</comment>
			<comment type="line" pos:line="2797" pos:column="25">// otherwise lines are left invisible with no way to make them visible</comment>
			<expr_stmt><expr><call><name pos:line="2798" pos:column="25">execute</name><argument_list pos:line="2798" pos:column="32">(<argument><expr><name pos:line="2798" pos:column="33">SCI_SETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2798" pos:column="54">line</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2798" pos:column="60">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="2799" pos:column="25">expand</name><argument_list pos:line="2799" pos:column="31">(<argument><expr><name pos:line="2799" pos:column="32">line</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2799" pos:column="38">true</lit:literal></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2799" pos:column="44">false</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2799" pos:column="51">0</lit:literal></expr></argument>, <argument><expr><name pos:line="2799" pos:column="54">levelPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then>
	<else pos:line="2802" pos:column="9">else <if pos:line="2802" pos:column="14">if <condition pos:line="2802" pos:column="17">(<expr><op:operator pos:line="2802" pos:column="18">!</op:operator><op:operator pos:line="2802" pos:column="19">(</op:operator><name pos:line="2802" pos:column="20">levelNow</name> <op:operator pos:line="2802" pos:column="29">&amp;</op:operator> <name pos:line="2802" pos:column="31">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="2802" pos:column="52">)</op:operator> <op:operator pos:line="2802" pos:column="54">&amp;&amp;</op:operator>
	        <op:operator pos:line="2803" pos:column="17">(</op:operator><op:operator pos:line="2803" pos:column="18">(</op:operator><name pos:line="2803" pos:column="19">levelPrev</name> <op:operator pos:line="2803" pos:column="29">&amp;</op:operator> <name pos:line="2803" pos:column="31">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="2803" pos:column="53">)</op:operator> <op:operator pos:line="2803" pos:column="55">&gt;</op:operator> <op:operator pos:line="2803" pos:column="57">(</op:operator><name pos:line="2803" pos:column="58">levelNow</name> <op:operator pos:line="2803" pos:column="67">&amp;</op:operator> <name pos:line="2803" pos:column="69">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="2803" pos:column="91">)</op:operator><op:operator pos:line="2803" pos:column="92">)</op:operator></expr>)</condition><then pos:line="2803" pos:column="94">
	<block pos:line="2804" pos:column="9">{
		<comment type="line" pos:line="2805" pos:column="17">// See if should still be hidden</comment>
		<decl_stmt><decl><type><name pos:line="2806" pos:column="17">int</name></type> <name pos:line="2806" pos:column="21">parentLine</name> <init pos:line="2806" pos:column="32">= <expr><call><name pos:line="2806" pos:column="34">execute</name><argument_list pos:line="2806" pos:column="41">(<argument><expr><name pos:line="2806" pos:column="42">SCI_GETFOLDPARENT</name></expr></argument>, <argument><expr><name pos:line="2806" pos:column="61">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="2807" pos:column="17">if <condition pos:line="2807" pos:column="20">(<expr><op:operator pos:line="2807" pos:column="21">(</op:operator><name pos:line="2807" pos:column="22">parentLine</name> <op:operator pos:line="2807" pos:column="33">&lt;</op:operator> <lit:literal type="number" pos:line="2807" pos:column="35">0</lit:literal><op:operator pos:line="2807" pos:column="36">)</op:operator> <op:operator pos:line="2807" pos:column="38">||</op:operator> <op:operator pos:line="2807" pos:column="41">(</op:operator><call><name pos:line="2807" pos:column="42">execute</name><argument_list pos:line="2807" pos:column="49">(<argument><expr><name pos:line="2807" pos:column="50">SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2807" pos:column="71">parentLine</name></expr></argument>)</argument_list></call> <op:operator pos:line="2807" pos:column="83">&amp;&amp;</op:operator> <call><name pos:line="2807" pos:column="86">execute</name><argument_list pos:line="2807" pos:column="93">(<argument><expr><name pos:line="2807" pos:column="94">SCI_GETLINEVISIBLE</name></expr></argument>, <argument><expr><name pos:line="2807" pos:column="114">parentLine</name></expr></argument>)</argument_list></call><op:operator pos:line="2807" pos:column="125">)</op:operator></expr>)</condition><then pos:line="2807" pos:column="127">
			<expr_stmt><expr><call><name pos:line="2808" pos:column="25">execute</name><argument_list pos:line="2808" pos:column="32">(<argument><expr><name pos:line="2808" pos:column="33">SCI_SHOWLINES</name></expr></argument>, <argument><expr><name pos:line="2808" pos:column="48">line</name></expr></argument>, <argument><expr><name pos:line="2808" pos:column="54">line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></then></if></else></if></else></if>
}</block></function>

<function><type><name pos:line="2812" pos:column="1">void</name></type> <name><name pos:line="2812" pos:column="6">ScintillaEditView</name><op:operator pos:line="2812" pos:column="23">::</op:operator><name pos:line="2812" pos:column="25">hideLines</name></name><parameter_list pos:line="2812" pos:column="34">()</parameter_list> <block pos:line="2812" pos:column="37">{
	<comment type="line" pos:line="2813" pos:column="9">//Folding can screw up hide lines badly if it unfolds a hidden section.</comment>
	<comment type="line" pos:line="2814" pos:column="9">//Adding runMarkers(hide, foldstart) directly (folding on single document) can help</comment>

	<comment type="line" pos:line="2816" pos:column="9">//Special func on buffer. If markers are added, create notification with location of start, and hide bool set to true</comment>
	<decl_stmt><decl><type><name pos:line="2817" pos:column="9">int</name></type> <name pos:line="2817" pos:column="13">startLine</name> <init pos:line="2817" pos:column="23">= <expr><call><name pos:line="2817" pos:column="25">execute</name><argument_list pos:line="2817" pos:column="32">(<argument><expr><name pos:line="2817" pos:column="33">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><call><name pos:line="2817" pos:column="55">execute</name><argument_list pos:line="2817" pos:column="62">(<argument><expr><name pos:line="2817" pos:column="63">SCI_GETSELECTIONSTART</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2818" pos:column="9">int</name></type> <name pos:line="2818" pos:column="13">endLine</name> <init pos:line="2818" pos:column="21">= <expr><call><name pos:line="2818" pos:column="23">execute</name><argument_list pos:line="2818" pos:column="30">(<argument><expr><name pos:line="2818" pos:column="31">SCI_LINEFROMPOSITION</name></expr></argument>, <argument><expr><call><name pos:line="2818" pos:column="53">execute</name><argument_list pos:line="2818" pos:column="60">(<argument><expr><name pos:line="2818" pos:column="61">SCI_GETSELECTIONEND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="2819" pos:column="9">//perform range check: cannot hide very first and very last lines</comment>
	<comment type="line" pos:line="2820" pos:column="9">//Offset them one off the edges, and then check if they are within the reasonable</comment>
	<decl_stmt><decl><type><name pos:line="2821" pos:column="9">int</name></type> <name pos:line="2821" pos:column="13">nrLines</name> <init pos:line="2821" pos:column="21">= <expr><call><name pos:line="2821" pos:column="23">execute</name><argument_list pos:line="2821" pos:column="30">(<argument><expr><name pos:line="2821" pos:column="31">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2822" pos:column="9">if <condition pos:line="2822" pos:column="12">(<expr><name pos:line="2822" pos:column="13">nrLines</name> <op:operator pos:line="2822" pos:column="21">&lt;</op:operator> <lit:literal type="number" pos:line="2822" pos:column="23">3</lit:literal></expr>)</condition><then pos:line="2822" pos:column="25">
		<return pos:line="2823" pos:column="17">return;</return></then></if>	<comment type="line" pos:line="2823" pos:column="25">//cannot possibly hide anything</comment>
	<if pos:line="2824" pos:column="9">if <condition pos:line="2824" pos:column="12">(<expr><op:operator pos:line="2824" pos:column="13">!</op:operator><name pos:line="2824" pos:column="14">startLine</name></expr>)</condition><then pos:line="2824" pos:column="24">
		<expr_stmt><expr><name pos:line="2825" pos:column="17">startLine</name><op:operator pos:line="2825" pos:column="26">++</op:operator></expr>;</expr_stmt></then></if>
	<if pos:line="2826" pos:column="9">if <condition pos:line="2826" pos:column="12">(<expr><name pos:line="2826" pos:column="13">endLine</name> <op:operator pos:line="2826" pos:column="21">==</op:operator> <op:operator pos:line="2826" pos:column="24">(</op:operator><name pos:line="2826" pos:column="25">nrLines</name><op:operator pos:line="2826" pos:column="32">-</op:operator><lit:literal type="number" pos:line="2826" pos:column="33">1</lit:literal><op:operator pos:line="2826" pos:column="34">)</op:operator></expr>)</condition><then pos:line="2826" pos:column="36">
		<expr_stmt><expr><name pos:line="2827" pos:column="17">endLine</name><op:operator pos:line="2827" pos:column="24">--</op:operator></expr>;</expr_stmt></then></if>

	<if pos:line="2829" pos:column="9">if <condition pos:line="2829" pos:column="12">(<expr><name pos:line="2829" pos:column="13">startLine</name> <op:operator pos:line="2829" pos:column="23">&gt;</op:operator> <name pos:line="2829" pos:column="25">endLine</name></expr>)</condition><then pos:line="2829" pos:column="33">
		<return pos:line="2830" pos:column="17">return;</return></then></if>	<comment type="line" pos:line="2830" pos:column="25">//tried to hide line at edge</comment>

	<comment type="line" pos:line="2832" pos:column="9">//Hide the lines. We add marks on the outside of the hidden section and hide the lines</comment>
	<comment type="line" pos:line="2833" pos:column="9">//execute(SCI_HIDELINES, startLine, endLine);</comment>
	<comment type="line" pos:line="2834" pos:column="9">//Add markers</comment>
	<expr_stmt><expr><call><name pos:line="2835" pos:column="9">execute</name><argument_list pos:line="2835" pos:column="16">(<argument><expr><name pos:line="2835" pos:column="17">SCI_MARKERADD</name></expr></argument>, <argument><expr><name pos:line="2835" pos:column="32">startLine</name><op:operator pos:line="2835" pos:column="41">-</op:operator><lit:literal type="number" pos:line="2835" pos:column="42">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2835" pos:column="45">MARK_HIDELINESBEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="2836" pos:column="9">execute</name><argument_list pos:line="2836" pos:column="16">(<argument><expr><name pos:line="2836" pos:column="17">SCI_MARKERADD</name></expr></argument>, <argument><expr><name pos:line="2836" pos:column="32">endLine</name><op:operator pos:line="2836" pos:column="39">+</op:operator><lit:literal type="number" pos:line="2836" pos:column="40">1</lit:literal></expr></argument>, <argument><expr><name pos:line="2836" pos:column="43">MARK_HIDELINESEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="2838" pos:column="9">//remove any markers in between</comment>
	<decl_stmt><decl><type><name pos:line="2839" pos:column="9">int</name></type> <name pos:line="2839" pos:column="13">scope</name> <init pos:line="2839" pos:column="19">= <expr><lit:literal type="number" pos:line="2839" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="2840" pos:column="9">for(<init><decl><type><name pos:line="2840" pos:column="13">int</name></type> <name pos:line="2840" pos:column="17">i</name> <init pos:line="2840" pos:column="19">= <expr><name pos:line="2840" pos:column="21">startLine</name></expr></init></decl>;</init> <condition><expr><name pos:line="2840" pos:column="32">i</name> <op:operator pos:line="2840" pos:column="34">&lt;=</op:operator> <name pos:line="2840" pos:column="37">endLine</name></expr>;</condition> <incr><expr><name pos:line="2840" pos:column="46">i</name><op:operator pos:line="2840" pos:column="47">++</op:operator></expr></incr>) <block pos:line="2840" pos:column="51">{
		<decl_stmt><decl><type><name pos:line="2841" pos:column="17">int</name></type> <name pos:line="2841" pos:column="21">state</name> <init pos:line="2841" pos:column="27">= <expr><call><name pos:line="2841" pos:column="29">execute</name><argument_list pos:line="2841" pos:column="36">(<argument><expr><name pos:line="2841" pos:column="37">SCI_MARKERGET</name></expr></argument>, <argument><expr><name pos:line="2841" pos:column="52">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2842" pos:column="17">bool</name></type> <name pos:line="2842" pos:column="22">closePresent</name> <init pos:line="2842" pos:column="35">= <expr><op:operator pos:line="2842" pos:column="37">(</op:operator><op:operator pos:line="2842" pos:column="38">(</op:operator><name pos:line="2842" pos:column="39">state</name> <op:operator pos:line="2842" pos:column="45">&amp;</op:operator> <op:operator pos:line="2842" pos:column="47">(</op:operator><lit:literal type="number" pos:line="2842" pos:column="48">1</lit:literal> <op:operator pos:line="2842" pos:column="50">&lt;&lt;</op:operator> <name pos:line="2842" pos:column="53">MARK_HIDELINESEND</name><op:operator pos:line="2842" pos:column="70">)</op:operator><op:operator pos:line="2842" pos:column="71">)</op:operator> <op:operator pos:line="2842" pos:column="73">!=</op:operator> <lit:literal type="number" pos:line="2842" pos:column="76">0</lit:literal><op:operator pos:line="2842" pos:column="77">)</op:operator></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="2842" pos:column="81">//check close first, then open, since close closes scope</comment>
		<decl_stmt><decl><type><name pos:line="2843" pos:column="17">bool</name></type> <name pos:line="2843" pos:column="22">openPresent</name> <init pos:line="2843" pos:column="34">= <expr><op:operator pos:line="2843" pos:column="36">(</op:operator><op:operator pos:line="2843" pos:column="37">(</op:operator><name pos:line="2843" pos:column="38">state</name> <op:operator pos:line="2843" pos:column="44">&amp;</op:operator> <op:operator pos:line="2843" pos:column="46">(</op:operator><lit:literal type="number" pos:line="2843" pos:column="47">1</lit:literal> <op:operator pos:line="2843" pos:column="49">&lt;&lt;</op:operator> <name pos:line="2843" pos:column="52">MARK_HIDELINESBEGIN</name><op:operator pos:line="2843" pos:column="71">)</op:operator><op:operator pos:line="2843" pos:column="72">)</op:operator> <op:operator pos:line="2843" pos:column="74">!=</op:operator> <lit:literal type="number" pos:line="2843" pos:column="77">0</lit:literal><op:operator pos:line="2843" pos:column="78">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="2844" pos:column="17">if <condition pos:line="2844" pos:column="20">(<expr><name pos:line="2844" pos:column="21">closePresent</name></expr>)</condition><then pos:line="2844" pos:column="34"> <block pos:line="2844" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="2845" pos:column="25">execute</name><argument_list pos:line="2845" pos:column="32">(<argument><expr><name pos:line="2845" pos:column="33">SCI_MARKERDELETE</name></expr></argument>, <argument><expr><name pos:line="2845" pos:column="51">i</name></expr></argument>, <argument><expr><name pos:line="2845" pos:column="54">MARK_HIDELINESEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="2846" pos:column="25">if <condition pos:line="2846" pos:column="28">(<expr><name pos:line="2846" pos:column="29">scope</name> <op:operator pos:line="2846" pos:column="35">&gt;</op:operator> <lit:literal type="number" pos:line="2846" pos:column="37">0</lit:literal></expr>)</condition><then pos:line="2846" pos:column="39"> <expr_stmt><expr><name pos:line="2846" pos:column="40">scope</name><op:operator pos:line="2846" pos:column="45">--</op:operator></expr>;</expr_stmt></then></if>
		}</block></then></if>
		<if pos:line="2848" pos:column="17">if <condition pos:line="2848" pos:column="20">(<expr><name pos:line="2848" pos:column="21">openPresent</name></expr>)</condition><then pos:line="2848" pos:column="33"> <block pos:line="2848" pos:column="34">{
			<expr_stmt><expr><call><name pos:line="2849" pos:column="25">execute</name><argument_list pos:line="2849" pos:column="32">(<argument><expr><name pos:line="2849" pos:column="33">SCI_MARKERDELETE</name></expr></argument>, <argument><expr><name pos:line="2849" pos:column="51">i</name></expr></argument>, <argument><expr><name pos:line="2849" pos:column="54">MARK_HIDELINESBEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="2850" pos:column="25">scope</name><op:operator pos:line="2850" pos:column="30">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="2853" pos:column="9">if <condition pos:line="2853" pos:column="12">(<expr><name pos:line="2853" pos:column="13">scope</name> <op:operator pos:line="2853" pos:column="19">!=</op:operator> <lit:literal type="number" pos:line="2853" pos:column="22">0</lit:literal></expr>)</condition><then pos:line="2853" pos:column="24"> <block pos:line="2853" pos:column="25">{	<comment type="line" pos:line="2853" pos:column="33">//something went wrong</comment>
		<comment type="line" pos:line="2854" pos:column="17">//Someone managed to make overlapping hidelines sections.</comment>
		<comment type="line" pos:line="2855" pos:column="17">//We cant do anything since this isnt supposed to happen</comment>
	}</block></then></if>

	<expr_stmt><expr><call><name><name pos:line="2858" pos:column="9">_currentBuffer</name><op:operator pos:line="2858" pos:column="23">-&gt;</op:operator><name pos:line="2858" pos:column="25">setHideLineChanged</name></name><argument_list pos:line="2858" pos:column="43">(<argument><expr><lit:literal type="boolean" pos:line="2858" pos:column="44">true</lit:literal></expr></argument>, <argument><expr><name pos:line="2858" pos:column="50">startLine</name><op:operator pos:line="2858" pos:column="59">-</op:operator><lit:literal type="number" pos:line="2858" pos:column="60">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="2861" pos:column="1">void</name></type> <name><name pos:line="2861" pos:column="6">ScintillaEditView</name><op:operator pos:line="2861" pos:column="23">::</op:operator><name pos:line="2861" pos:column="25">setHiLiteResultWords</name></name><parameter_list pos:line="2861" pos:column="45">(<param><decl><type><specifier pos:line="2861" pos:column="46">const</specifier> <name pos:line="2861" pos:column="52">TCHAR</name> <type:modifier pos:line="2861" pos:column="58">*</type:modifier></type><name pos:line="2861" pos:column="59">keywords</name></decl></param>)</parameter_list>
<block pos:line="2862" pos:column="1">{
<cpp:ifdef pos:line="2863" pos:column="1">#<cpp:directive pos:line="2863" pos:column="2">ifdef</cpp:directive> <name pos:line="2863" pos:column="8">UNICODE</name></cpp:ifdef>
	<decl_stmt><decl><type><name pos:line="2864" pos:column="9">WcharMbcsConvertor</name> <type:modifier pos:line="2864" pos:column="28">*</type:modifier></type><name pos:line="2864" pos:column="29">wmc</name> <init pos:line="2864" pos:column="33">= <expr><call><name><name pos:line="2864" pos:column="35">WcharMbcsConvertor</name><op:operator pos:line="2864" pos:column="53">::</op:operator><name pos:line="2864" pos:column="55">getInstance</name></name><argument_list pos:line="2864" pos:column="66">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="2865" pos:column="9">const</specifier> <name pos:line="2865" pos:column="15">char</name> <type:modifier pos:line="2865" pos:column="20">*</type:modifier></type> <name pos:line="2865" pos:column="22">word2search</name> <init pos:line="2865" pos:column="34">= <expr><call><name><name pos:line="2865" pos:column="36">wmc</name><op:operator pos:line="2865" pos:column="39">-&gt;</op:operator><name pos:line="2865" pos:column="41">wchar2char</name></name><argument_list pos:line="2865" pos:column="51">(<argument><expr><name pos:line="2865" pos:column="52">keywords</name></expr></argument>, <argument><expr><name pos:line="2865" pos:column="62">CP_ACP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="2866" pos:column="9">setKeywords</name><argument_list pos:line="2866" pos:column="20">(<argument><expr><name pos:line="2866" pos:column="21">L_SEARCHRESULT</name></expr></argument>, <argument><expr><name pos:line="2866" pos:column="37">word2search</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2866" pos:column="50">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="2867" pos:column="1">#<cpp:directive pos:line="2867" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="2868" pos:column="9">setKeywords</name><argument_list pos:line="2868" pos:column="20">(<argument><expr><name pos:line="2868" pos:column="21">L_SEARCHRESULT</name></expr></argument>, <argument><expr><name pos:line="2868" pos:column="37">keywords</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2868" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="2869" pos:column="1">#<cpp:directive pos:line="2869" pos:column="2">endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name pos:line="2872" pos:column="1">bool</name></type> <name><name pos:line="2872" pos:column="6">ScintillaEditView</name><op:operator pos:line="2872" pos:column="23">::</op:operator><name pos:line="2872" pos:column="25">markerMarginClick</name></name><parameter_list pos:line="2872" pos:column="42">(<param><decl><type><name pos:line="2872" pos:column="43">int</name></type> <name pos:line="2872" pos:column="47">lineNumber</name></decl></param>)</parameter_list> <block pos:line="2872" pos:column="59">{

	<decl_stmt><decl><type><name pos:line="2874" pos:column="9">int</name></type> <name pos:line="2874" pos:column="13">state</name> <init pos:line="2874" pos:column="19">= <expr><call><name pos:line="2874" pos:column="21">execute</name><argument_list pos:line="2874" pos:column="28">(<argument><expr><name pos:line="2874" pos:column="29">SCI_MARKERGET</name></expr></argument>, <argument><expr><name pos:line="2874" pos:column="44">lineNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2875" pos:column="9">bool</name></type> <name pos:line="2875" pos:column="14">openPresent</name> <init pos:line="2875" pos:column="26">= <expr><op:operator pos:line="2875" pos:column="28">(</op:operator><op:operator pos:line="2875" pos:column="29">(</op:operator><name pos:line="2875" pos:column="30">state</name> <op:operator pos:line="2875" pos:column="36">&amp;</op:operator> <op:operator pos:line="2875" pos:column="38">(</op:operator><lit:literal type="number" pos:line="2875" pos:column="39">1</lit:literal> <op:operator pos:line="2875" pos:column="41">&lt;&lt;</op:operator> <name pos:line="2875" pos:column="44">MARK_HIDELINESBEGIN</name><op:operator pos:line="2875" pos:column="63">)</op:operator><op:operator pos:line="2875" pos:column="64">)</op:operator> <op:operator pos:line="2875" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="2875" pos:column="69">0</lit:literal><op:operator pos:line="2875" pos:column="70">)</op:operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="2876" pos:column="9">bool</name></type> <name pos:line="2876" pos:column="14">closePresent</name> <init pos:line="2876" pos:column="27">= <expr><op:operator pos:line="2876" pos:column="29">(</op:operator><op:operator pos:line="2876" pos:column="30">(</op:operator><name pos:line="2876" pos:column="31">state</name> <op:operator pos:line="2876" pos:column="37">&amp;</op:operator> <op:operator pos:line="2876" pos:column="39">(</op:operator><lit:literal type="number" pos:line="2876" pos:column="40">1</lit:literal> <op:operator pos:line="2876" pos:column="42">&lt;&lt;</op:operator> <name pos:line="2876" pos:column="45">MARK_HIDELINESEND</name><op:operator pos:line="2876" pos:column="62">)</op:operator><op:operator pos:line="2876" pos:column="63">)</op:operator> <op:operator pos:line="2876" pos:column="65">!=</op:operator> <lit:literal type="number" pos:line="2876" pos:column="68">0</lit:literal><op:operator pos:line="2876" pos:column="69">)</op:operator></expr></init></decl>;</decl_stmt>

	<if pos:line="2878" pos:column="9">if <condition pos:line="2878" pos:column="12">(<expr><op:operator pos:line="2878" pos:column="13">!</op:operator><name pos:line="2878" pos:column="14">openPresent</name> <op:operator pos:line="2878" pos:column="26">&amp;&amp;</op:operator> <op:operator pos:line="2878" pos:column="29">!</op:operator><name pos:line="2878" pos:column="30">closePresent</name></expr>)</condition><then pos:line="2878" pos:column="43">
		<return pos:line="2879" pos:column="17">return <expr><lit:literal type="boolean" pos:line="2879" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<comment type="line" pos:line="2881" pos:column="9">//Special func on buffer. First call show with location of opening marker. Then remove the marker manually</comment>
	<if pos:line="2882" pos:column="9">if <condition pos:line="2882" pos:column="12">(<expr><name pos:line="2882" pos:column="13">openPresent</name></expr>)</condition><then pos:line="2882" pos:column="25"> <block pos:line="2882" pos:column="26">{
		<expr_stmt><expr><call><name><name pos:line="2883" pos:column="17">_currentBuffer</name><op:operator pos:line="2883" pos:column="31">-&gt;</op:operator><name pos:line="2883" pos:column="33">setHideLineChanged</name></name><argument_list pos:line="2883" pos:column="51">(<argument><expr><lit:literal type="boolean" pos:line="2883" pos:column="52">false</lit:literal></expr></argument>, <argument><expr><name pos:line="2883" pos:column="59">lineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="2885" pos:column="9">if <condition pos:line="2885" pos:column="12">(<expr><name pos:line="2885" pos:column="13">closePresent</name></expr>)</condition><then pos:line="2885" pos:column="26"> <block pos:line="2885" pos:column="27">{
		<expr_stmt><expr><name pos:line="2886" pos:column="17">openPresent</name> <op:operator pos:line="2886" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="2886" pos:column="31">false</lit:literal></expr>;</expr_stmt>
		<for pos:line="2887" pos:column="17">for(<init><expr><name pos:line="2887" pos:column="21">lineNumber</name><op:operator pos:line="2887" pos:column="31">--</op:operator></expr>;</init> <condition><expr><name pos:line="2887" pos:column="35">lineNumber</name> <op:operator pos:line="2887" pos:column="46">&gt;=</op:operator> <lit:literal type="number" pos:line="2887" pos:column="49">0</lit:literal> <op:operator pos:line="2887" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="2887" pos:column="54">!</op:operator><name pos:line="2887" pos:column="55">openPresent</name></expr>;</condition> <incr><expr><name pos:line="2887" pos:column="68">lineNumber</name><op:operator pos:line="2887" pos:column="78">--</op:operator></expr></incr>) <block pos:line="2887" pos:column="82">{
			<expr_stmt><expr><name pos:line="2888" pos:column="25">state</name> <op:operator pos:line="2888" pos:column="31">=</op:operator> <call><name pos:line="2888" pos:column="33">execute</name><argument_list pos:line="2888" pos:column="40">(<argument><expr><name pos:line="2888" pos:column="41">SCI_MARKERGET</name></expr></argument>, <argument><expr><name pos:line="2888" pos:column="56">lineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="2889" pos:column="25">openPresent</name> <op:operator pos:line="2889" pos:column="37">=</op:operator> <op:operator pos:line="2889" pos:column="39">(</op:operator><op:operator pos:line="2889" pos:column="40">(</op:operator><name pos:line="2889" pos:column="41">state</name> <op:operator pos:line="2889" pos:column="47">&amp;</op:operator> <op:operator pos:line="2889" pos:column="49">(</op:operator><lit:literal type="number" pos:line="2889" pos:column="50">1</lit:literal> <op:operator pos:line="2889" pos:column="52">&lt;&lt;</op:operator> <name pos:line="2889" pos:column="55">MARK_HIDELINESBEGIN</name><op:operator pos:line="2889" pos:column="74">)</op:operator><op:operator pos:line="2889" pos:column="75">)</op:operator> <op:operator pos:line="2889" pos:column="77">!=</op:operator> <lit:literal type="number" pos:line="2889" pos:column="80">0</lit:literal><op:operator pos:line="2889" pos:column="81">)</op:operator></expr>;</expr_stmt>
		}</block></for>
		<if pos:line="2891" pos:column="17">if <condition pos:line="2891" pos:column="20">(<expr><name pos:line="2891" pos:column="21">openPresent</name></expr>)</condition><then pos:line="2891" pos:column="33"> <block pos:line="2891" pos:column="34">{
			<expr_stmt><expr><call><name><name pos:line="2892" pos:column="25">_currentBuffer</name><op:operator pos:line="2892" pos:column="39">-&gt;</op:operator><name pos:line="2892" pos:column="41">setHideLineChanged</name></name><argument_list pos:line="2892" pos:column="59">(<argument><expr><lit:literal type="boolean" pos:line="2892" pos:column="60">false</lit:literal></expr></argument>, <argument><expr><name pos:line="2892" pos:column="67">lineNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>

	<return pos:line="2896" pos:column="9">return <expr><lit:literal type="boolean" pos:line="2896" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="2899" pos:column="1">void</name></type> <name><name pos:line="2899" pos:column="6">ScintillaEditView</name><op:operator pos:line="2899" pos:column="23">::</op:operator><name pos:line="2899" pos:column="25">notifyMarkers</name></name><parameter_list pos:line="2899" pos:column="38">(<param><decl><type><name pos:line="2899" pos:column="39">Buffer</name> <type:modifier pos:line="2899" pos:column="46">*</type:modifier></type> <name pos:line="2899" pos:column="48">buf</name></decl></param>, <param><decl><type><name pos:line="2899" pos:column="53">bool</name></type> <name pos:line="2899" pos:column="58">isHide</name></decl></param>, <param><decl><type><name pos:line="2899" pos:column="66">int</name></type> <name pos:line="2899" pos:column="70">location</name></decl></param>, <param><decl><type><name pos:line="2899" pos:column="80">bool</name></type> <name pos:line="2899" pos:column="85">del</name></decl></param>)</parameter_list> <block pos:line="2899" pos:column="90">{
	<if pos:line="2900" pos:column="9">if <condition pos:line="2900" pos:column="12">(<expr><name pos:line="2900" pos:column="13">buf</name> <op:operator pos:line="2900" pos:column="17">!=</op:operator> <name pos:line="2900" pos:column="20">_currentBuffer</name></expr>)</condition><then pos:line="2900" pos:column="35">	<comment type="line" pos:line="2900" pos:column="41">//if not visible buffer dont do a thing</comment>
		<return pos:line="2901" pos:column="17">return;</return></then></if>
	<expr_stmt><expr><call><name pos:line="2902" pos:column="9">runMarkers</name><argument_list pos:line="2902" pos:column="19">(<argument><expr><name pos:line="2902" pos:column="20">isHide</name></expr></argument>, <argument><expr><name pos:line="2902" pos:column="28">location</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="2902" pos:column="38">false</lit:literal></expr></argument>, <argument><expr><name pos:line="2902" pos:column="45">del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line" pos:line="2904" pos:column="1">//Run through full document. When switching in or opening folding</comment>
<comment type="line" pos:line="2905" pos:column="1">//hide is false only when user click on margin</comment>
<function><type><name pos:line="2906" pos:column="1">void</name></type> <name><name pos:line="2906" pos:column="6">ScintillaEditView</name><op:operator pos:line="2906" pos:column="23">::</op:operator><name pos:line="2906" pos:column="25">runMarkers</name></name><parameter_list pos:line="2906" pos:column="35">(<param><decl><type><name pos:line="2906" pos:column="36">bool</name></type> <name pos:line="2906" pos:column="41">doHide</name></decl></param>, <param><decl><type><name pos:line="2906" pos:column="49">int</name></type> <name pos:line="2906" pos:column="53">searchStart</name></decl></param>, <param><decl><type><name pos:line="2906" pos:column="66">bool</name></type> <name pos:line="2906" pos:column="71">endOfDoc</name></decl></param>, <param><decl><type><name pos:line="2906" pos:column="81">bool</name></type> <name pos:line="2906" pos:column="86">doDelete</name></decl></param>)</parameter_list> <block pos:line="2906" pos:column="96">{
	<comment type="line" pos:line="2907" pos:column="9">//Removes markers if opening</comment>
	<comment type="block" pos:line="2908" pos:column="9">/*
	AllLines = (start,ENDOFDOCUMENT)
	Hide:
		Run through all lines.
			Find open hiding marker:
				set hiding start
			Find closing:
				if (hiding):
					Hide lines between now and start
					if (endOfDoc = false)
						return
					else
						search for other hidden sections
		
	Show:
		Run through all lines
			Find open hiding marker
				set last start
			Find closing:
				Show from last start. Stop.
			Find closed folding header:
				Show from last start to folding header
				Skip to LASTCHILD
				Set last start to lastchild
	*/</comment>
	<decl_stmt><decl><type><name pos:line="2933" pos:column="9">int</name></type> <name pos:line="2933" pos:column="13">maxLines</name> <init pos:line="2933" pos:column="22">= <expr><call><name pos:line="2933" pos:column="24">execute</name><argument_list pos:line="2933" pos:column="31">(<argument><expr><name pos:line="2933" pos:column="32">SCI_GETLINECOUNT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="2934" pos:column="9">if <condition pos:line="2934" pos:column="12">(<expr><name pos:line="2934" pos:column="13">doHide</name></expr>)</condition><then pos:line="2934" pos:column="20"> <block pos:line="2934" pos:column="21">{
		<decl_stmt><decl><type><name pos:line="2935" pos:column="17">int</name></type> <name pos:line="2935" pos:column="21">startHiding</name> <init pos:line="2935" pos:column="33">= <expr><name pos:line="2935" pos:column="35">searchStart</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2936" pos:column="17">bool</name></type> <name pos:line="2936" pos:column="22">isInSection</name> <init pos:line="2936" pos:column="34">= <expr><lit:literal type="boolean" pos:line="2936" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="2937" pos:column="17">for(<init><decl><type><name pos:line="2937" pos:column="21">int</name></type> <name pos:line="2937" pos:column="25">i</name> <init pos:line="2937" pos:column="27">= <expr><name pos:line="2937" pos:column="29">searchStart</name></expr></init></decl>;</init> <condition><expr><name pos:line="2937" pos:column="42">i</name> <op:operator pos:line="2937" pos:column="44">&lt;</op:operator> <name pos:line="2937" pos:column="46">maxLines</name></expr>;</condition> <incr><expr><name pos:line="2937" pos:column="56">i</name><op:operator pos:line="2937" pos:column="57">++</op:operator></expr></incr>) <block pos:line="2937" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="2938" pos:column="25">int</name></type> <name pos:line="2938" pos:column="29">state</name> <init pos:line="2938" pos:column="35">= <expr><call><name pos:line="2938" pos:column="37">execute</name><argument_list pos:line="2938" pos:column="44">(<argument><expr><name pos:line="2938" pos:column="45">SCI_MARKERGET</name></expr></argument>, <argument><expr><name pos:line="2938" pos:column="60">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="2939" pos:column="25">if <condition pos:line="2939" pos:column="28">( <expr><op:operator pos:line="2939" pos:column="30">(</op:operator><op:operator pos:line="2939" pos:column="31">(</op:operator><name pos:line="2939" pos:column="32">state</name> <op:operator pos:line="2939" pos:column="38">&amp;</op:operator> <op:operator pos:line="2939" pos:column="40">(</op:operator><lit:literal type="number" pos:line="2939" pos:column="41">1</lit:literal> <op:operator pos:line="2939" pos:column="43">&lt;&lt;</op:operator> <name pos:line="2939" pos:column="46">MARK_HIDELINESEND</name><op:operator pos:line="2939" pos:column="63">)</op:operator><op:operator pos:line="2939" pos:column="64">)</op:operator> <op:operator pos:line="2939" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="2939" pos:column="69">0</lit:literal><op:operator pos:line="2939" pos:column="70">)</op:operator></expr> )</condition><then pos:line="2939" pos:column="73"> <block pos:line="2939" pos:column="74">{
				<if pos:line="2940" pos:column="33">if <condition pos:line="2940" pos:column="36">(<expr><name pos:line="2940" pos:column="37">isInSection</name></expr>)</condition><then pos:line="2940" pos:column="49"> <block pos:line="2940" pos:column="50">{
					<expr_stmt><expr><call><name pos:line="2941" pos:column="41">execute</name><argument_list pos:line="2941" pos:column="48">(<argument><expr><name pos:line="2941" pos:column="49">SCI_HIDELINES</name></expr></argument>, <argument><expr><name pos:line="2941" pos:column="64">startHiding</name></expr></argument>, <argument><expr><name pos:line="2941" pos:column="77">i</name><op:operator pos:line="2941" pos:column="78">-</op:operator><lit:literal type="number" pos:line="2941" pos:column="79">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="2942" pos:column="41">if <condition pos:line="2942" pos:column="44">(<expr><op:operator pos:line="2942" pos:column="45">!</op:operator><name pos:line="2942" pos:column="46">endOfDoc</name></expr>)</condition><then pos:line="2942" pos:column="55"> <block pos:line="2942" pos:column="56">{
						<return pos:line="2943" pos:column="49">return;</return>	<comment type="line" pos:line="2943" pos:column="57">//done, only single section requested</comment>
					}</block></then></if>	<comment type="line" pos:line="2944" pos:column="49">//otherwise keep going</comment>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="2946" pos:column="33">isInSection</name> <op:operator pos:line="2946" pos:column="45">=</op:operator> <lit:literal type="boolean" pos:line="2946" pos:column="47">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="2948" pos:column="25">if <condition pos:line="2948" pos:column="28">( <expr><op:operator pos:line="2948" pos:column="30">(</op:operator><op:operator pos:line="2948" pos:column="31">(</op:operator><name pos:line="2948" pos:column="32">state</name> <op:operator pos:line="2948" pos:column="38">&amp;</op:operator> <op:operator pos:line="2948" pos:column="40">(</op:operator><lit:literal type="number" pos:line="2948" pos:column="41">1</lit:literal> <op:operator pos:line="2948" pos:column="43">&lt;&lt;</op:operator> <name pos:line="2948" pos:column="46">MARK_HIDELINESBEGIN</name><op:operator pos:line="2948" pos:column="65">)</op:operator><op:operator pos:line="2948" pos:column="66">)</op:operator> <op:operator pos:line="2948" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="2948" pos:column="71">0</lit:literal><op:operator pos:line="2948" pos:column="72">)</op:operator></expr> )</condition><then pos:line="2948" pos:column="75"> <block pos:line="2948" pos:column="76">{
				<expr_stmt><expr><name pos:line="2949" pos:column="33">isInSection</name> <op:operator pos:line="2949" pos:column="45">=</op:operator> <lit:literal type="boolean" pos:line="2949" pos:column="47">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="2950" pos:column="33">startHiding</name> <op:operator pos:line="2950" pos:column="45">=</op:operator> <name pos:line="2950" pos:column="47">i</name><op:operator pos:line="2950" pos:column="48">+</op:operator><lit:literal type="number" pos:line="2950" pos:column="49">1</lit:literal></expr>;</expr_stmt>
			}</block></then></if>

		}</block></for>
	}</block></then> <else pos:line="2954" pos:column="11">else <block pos:line="2954" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="2955" pos:column="17">int</name></type> <name pos:line="2955" pos:column="21">startShowing</name> <init pos:line="2955" pos:column="34">= <expr><name pos:line="2955" pos:column="36">searchStart</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="2956" pos:column="17">bool</name></type> <name pos:line="2956" pos:column="22">isInSection</name> <init pos:line="2956" pos:column="34">= <expr><lit:literal type="boolean" pos:line="2956" pos:column="36">false</lit:literal></expr></init></decl>;</decl_stmt>
		<for pos:line="2957" pos:column="17">for(<init><decl><type><name pos:line="2957" pos:column="21">int</name></type> <name pos:line="2957" pos:column="25">i</name> <init pos:line="2957" pos:column="27">= <expr><name pos:line="2957" pos:column="29">searchStart</name></expr></init></decl>;</init> <condition><expr><name pos:line="2957" pos:column="42">i</name> <op:operator pos:line="2957" pos:column="44">&lt;</op:operator> <name pos:line="2957" pos:column="46">maxLines</name></expr>;</condition> <incr><expr><name pos:line="2957" pos:column="56">i</name><op:operator pos:line="2957" pos:column="57">++</op:operator></expr></incr>) <block pos:line="2957" pos:column="61">{
			<decl_stmt><decl><type><name pos:line="2958" pos:column="25">int</name></type> <name pos:line="2958" pos:column="29">state</name> <init pos:line="2958" pos:column="35">= <expr><call><name pos:line="2958" pos:column="37">execute</name><argument_list pos:line="2958" pos:column="44">(<argument><expr><name pos:line="2958" pos:column="45">SCI_MARKERGET</name></expr></argument>, <argument><expr><name pos:line="2958" pos:column="60">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="2959" pos:column="25">if <condition pos:line="2959" pos:column="28">( <expr><op:operator pos:line="2959" pos:column="30">(</op:operator><op:operator pos:line="2959" pos:column="31">(</op:operator><name pos:line="2959" pos:column="32">state</name> <op:operator pos:line="2959" pos:column="38">&amp;</op:operator> <op:operator pos:line="2959" pos:column="40">(</op:operator><lit:literal type="number" pos:line="2959" pos:column="41">1</lit:literal> <op:operator pos:line="2959" pos:column="43">&lt;&lt;</op:operator> <name pos:line="2959" pos:column="46">MARK_HIDELINESEND</name><op:operator pos:line="2959" pos:column="63">)</op:operator><op:operator pos:line="2959" pos:column="64">)</op:operator> <op:operator pos:line="2959" pos:column="66">!=</op:operator> <lit:literal type="number" pos:line="2959" pos:column="69">0</lit:literal><op:operator pos:line="2959" pos:column="70">)</op:operator></expr> )</condition><then pos:line="2959" pos:column="73"> <block pos:line="2959" pos:column="74">{
				<if pos:line="2960" pos:column="33">if <condition pos:line="2960" pos:column="36">(<expr><name pos:line="2960" pos:column="37">doDelete</name></expr>)</condition><then pos:line="2960" pos:column="46">
					<expr_stmt><expr><call><name pos:line="2961" pos:column="41">execute</name><argument_list pos:line="2961" pos:column="48">(<argument><expr><name pos:line="2961" pos:column="49">SCI_MARKERDELETE</name></expr></argument>, <argument><expr><name pos:line="2961" pos:column="67">i</name></expr></argument>, <argument><expr><name pos:line="2961" pos:column="70">MARK_HIDELINESEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				 <else pos:line="2962" pos:column="34">else <if pos:line="2962" pos:column="39">if <condition pos:line="2962" pos:column="42">(<expr><name pos:line="2962" pos:column="43">isInSection</name></expr>)</condition><then pos:line="2962" pos:column="55"> <block pos:line="2962" pos:column="56">{
					<if pos:line="2963" pos:column="41">if <condition pos:line="2963" pos:column="44">(<expr><name pos:line="2963" pos:column="45">startShowing</name> <op:operator pos:line="2963" pos:column="58">&gt;=</op:operator> <name pos:line="2963" pos:column="61">i</name></expr>)</condition><then pos:line="2963" pos:column="63"> <block pos:line="2963" pos:column="64">{	<comment type="line" pos:line="2963" pos:column="73">//because of fold skipping, we passed the close tag. In that case we cant do anything</comment>
						<if pos:line="2964" pos:column="49">if <condition pos:line="2964" pos:column="52">(<expr><op:operator pos:line="2964" pos:column="53">!</op:operator><name pos:line="2964" pos:column="54">endOfDoc</name></expr>)</condition><then pos:line="2964" pos:column="63"> <block pos:line="2964" pos:column="64">{
							<return pos:line="2965" pos:column="57">return;</return>
						}</block></then> <else pos:line="2966" pos:column="51">else <block pos:line="2966" pos:column="56">{
							<continue pos:line="2967" pos:column="57">continue;</continue>
						}</block></else></if>
					}</block></then></if>
					<expr_stmt><expr><call><name pos:line="2970" pos:column="41">execute</name><argument_list pos:line="2970" pos:column="48">(<argument><expr><name pos:line="2970" pos:column="49">SCI_SHOWLINES</name></expr></argument>, <argument><expr><name pos:line="2970" pos:column="64">startShowing</name></expr></argument>, <argument><expr><name pos:line="2970" pos:column="78">i</name><op:operator pos:line="2970" pos:column="79">-</op:operator><lit:literal type="number" pos:line="2970" pos:column="80">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="2971" pos:column="41">if <condition pos:line="2971" pos:column="44">(<expr><op:operator pos:line="2971" pos:column="45">!</op:operator><name pos:line="2971" pos:column="46">endOfDoc</name></expr>)</condition><then pos:line="2971" pos:column="55"> <block pos:line="2971" pos:column="56">{
						<return pos:line="2972" pos:column="49">return;</return>	<comment type="line" pos:line="2972" pos:column="57">//done, only single section requested</comment>
					}</block></then></if>	<comment type="line" pos:line="2973" pos:column="49">//otherwise keep going</comment>
					<expr_stmt><expr><name pos:line="2974" pos:column="41">isInSection</name> <op:operator pos:line="2974" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="2974" pos:column="55">false</lit:literal></expr>;</expr_stmt>
				}</block></then></if></else></if>
			}</block></then></if>
			<if pos:line="2977" pos:column="25">if <condition pos:line="2977" pos:column="28">( <expr><op:operator pos:line="2977" pos:column="30">(</op:operator><op:operator pos:line="2977" pos:column="31">(</op:operator><name pos:line="2977" pos:column="32">state</name> <op:operator pos:line="2977" pos:column="38">&amp;</op:operator> <op:operator pos:line="2977" pos:column="40">(</op:operator><lit:literal type="number" pos:line="2977" pos:column="41">1</lit:literal> <op:operator pos:line="2977" pos:column="43">&lt;&lt;</op:operator> <name pos:line="2977" pos:column="46">MARK_HIDELINESBEGIN</name><op:operator pos:line="2977" pos:column="65">)</op:operator><op:operator pos:line="2977" pos:column="66">)</op:operator> <op:operator pos:line="2977" pos:column="68">!=</op:operator> <lit:literal type="number" pos:line="2977" pos:column="71">0</lit:literal><op:operator pos:line="2977" pos:column="72">)</op:operator></expr> )</condition><then pos:line="2977" pos:column="75"> <block pos:line="2977" pos:column="76">{
				<if pos:line="2978" pos:column="33">if <condition pos:line="2978" pos:column="36">(<expr><name pos:line="2978" pos:column="37">doDelete</name></expr>)</condition><then pos:line="2978" pos:column="46">
					<expr_stmt><expr><call><name pos:line="2979" pos:column="41">execute</name><argument_list pos:line="2979" pos:column="48">(<argument><expr><name pos:line="2979" pos:column="49">SCI_MARKERDELETE</name></expr></argument>, <argument><expr><name pos:line="2979" pos:column="67">i</name></expr></argument>, <argument><expr><name pos:line="2979" pos:column="70">MARK_HIDELINESBEGIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="2980" pos:column="33">else <block pos:line="2980" pos:column="38">{
					<expr_stmt><expr><name pos:line="2981" pos:column="41">isInSection</name> <op:operator pos:line="2981" pos:column="53">=</op:operator> <lit:literal type="boolean" pos:line="2981" pos:column="55">true</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="2982" pos:column="41">startShowing</name> <op:operator pos:line="2982" pos:column="54">=</op:operator> <name pos:line="2982" pos:column="56">i</name><op:operator pos:line="2982" pos:column="57">+</op:operator><lit:literal type="number" pos:line="2982" pos:column="58">1</lit:literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>

			<decl_stmt><decl><type><name pos:line="2986" pos:column="25">int</name></type> <name pos:line="2986" pos:column="29">levelLine</name> <init pos:line="2986" pos:column="39">= <expr><call><name pos:line="2986" pos:column="41">execute</name><argument_list pos:line="2986" pos:column="48">(<argument><expr><name pos:line="2986" pos:column="49">SCI_GETFOLDLEVEL</name></expr></argument>, <argument><expr><name pos:line="2986" pos:column="67">i</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="2986" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="2987" pos:column="25">if <condition pos:line="2987" pos:column="28">(<expr><name pos:line="2987" pos:column="29">levelLine</name> <op:operator pos:line="2987" pos:column="39">&amp;</op:operator> <name pos:line="2987" pos:column="41">SC_FOLDLEVELHEADERFLAG</name></expr>)</condition><then pos:line="2987" pos:column="64"> <block pos:line="2987" pos:column="65">{	<comment type="line" pos:line="2987" pos:column="73">//fold section. Dont show lines if fold is closed</comment>
				<if pos:line="2988" pos:column="33">if <condition pos:line="2988" pos:column="36">(<expr><name pos:line="2988" pos:column="37">isInSection</name> <op:operator pos:line="2988" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="2988" pos:column="52">execute</name><argument_list pos:line="2988" pos:column="59">(<argument><expr><name pos:line="2988" pos:column="60">SCI_GETFOLDEXPANDED</name></expr></argument>, <argument><expr><name pos:line="2988" pos:column="81">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="2988" pos:column="84">==</op:operator> <lit:literal type="number" pos:line="2988" pos:column="87">0</lit:literal></expr>)</condition><then pos:line="2988" pos:column="89"> <block pos:line="2988" pos:column="90">{
					<expr_stmt><expr><call><name pos:line="2989" pos:column="41">execute</name><argument_list pos:line="2989" pos:column="48">(<argument><expr><name pos:line="2989" pos:column="49">SCI_SHOWLINES</name></expr></argument>, <argument><expr><name pos:line="2989" pos:column="64">startShowing</name></expr></argument>, <argument><expr><name pos:line="2989" pos:column="78">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="2990" pos:column="41">startShowing</name> <op:operator pos:line="2990" pos:column="54">=</op:operator> <call><name pos:line="2990" pos:column="56">execute</name><argument_list pos:line="2990" pos:column="63">(<argument><expr><name pos:line="2990" pos:column="64">SCI_GETLASTCHILD</name></expr></argument>, <argument><expr><name pos:line="2990" pos:column="82">i</name></expr></argument>, <argument><expr><op:operator pos:line="2990" pos:column="85">(</op:operator><name pos:line="2990" pos:column="86">levelLine</name> <op:operator pos:line="2990" pos:column="96">&amp;</op:operator> <name pos:line="2990" pos:column="98">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="2990" pos:column="120">)</op:operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
	}</block></else></if>
}</block></function>


<function><type><name pos:line="2998" pos:column="1">void</name></type> <name><name pos:line="2998" pos:column="6">ScintillaEditView</name><op:operator pos:line="2998" pos:column="23">::</op:operator><name pos:line="2998" pos:column="25">setTabSettings</name></name><parameter_list pos:line="2998" pos:column="39">(<param><decl><type><name pos:line="2998" pos:column="40">Lang</name> <type:modifier pos:line="2998" pos:column="45">*</type:modifier></type><name pos:line="2998" pos:column="46">lang</name></decl></param>)</parameter_list>
<block pos:line="2999" pos:column="1">{
    <if pos:line="3000" pos:column="5">if <condition pos:line="3000" pos:column="8">(<expr><name pos:line="3000" pos:column="9">lang</name> <op:operator pos:line="3000" pos:column="14">&amp;&amp;</op:operator> <name><name pos:line="3000" pos:column="17">lang</name><op:operator pos:line="3000" pos:column="21">-&gt;</op:operator><name pos:line="3000" pos:column="23">_tabSize</name></name> <op:operator pos:line="3000" pos:column="32">!=</op:operator> <op:operator pos:line="3000" pos:column="35">-</op:operator><lit:literal type="number" pos:line="3000" pos:column="36">1</lit:literal> <op:operator pos:line="3000" pos:column="38">&amp;&amp;</op:operator> <name><name pos:line="3000" pos:column="41">lang</name><op:operator pos:line="3000" pos:column="45">-&gt;</op:operator><name pos:line="3000" pos:column="47">_tabSize</name></name> <op:operator pos:line="3000" pos:column="56">!=</op:operator> <lit:literal type="number" pos:line="3000" pos:column="59">0</lit:literal></expr>)</condition><then pos:line="3000" pos:column="61">
    <block pos:line="3001" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="3002" pos:column="9">execute</name><argument_list pos:line="3002" pos:column="16">(<argument><expr><name pos:line="3002" pos:column="17">SCI_SETTABWIDTH</name></expr></argument>, <argument><expr><name><name pos:line="3002" pos:column="34">lang</name><op:operator pos:line="3002" pos:column="38">-&gt;</op:operator><name pos:line="3002" pos:column="40">_tabSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name pos:line="3003" pos:column="9">execute</name><argument_list pos:line="3003" pos:column="16">(<argument><expr><name pos:line="3003" pos:column="17">SCI_SETUSETABS</name></expr></argument>, <argument><expr><op:operator pos:line="3003" pos:column="33">!</op:operator><name><name pos:line="3003" pos:column="34">lang</name><op:operator pos:line="3003" pos:column="38">-&gt;</op:operator><name pos:line="3003" pos:column="40">_isTabReplacedBySpace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else pos:line="3005" pos:column="5">else
    <block pos:line="3006" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="3007" pos:column="9">const</specifier> <name pos:line="3007" pos:column="15">NppGUI</name> <type:modifier pos:line="3007" pos:column="22">&amp;</type:modifier></type> <name pos:line="3007" pos:column="24">nppgui</name> <init pos:line="3007" pos:column="31">= <expr><op:operator pos:line="3007" pos:column="33">(</op:operator><call><name><name pos:line="3007" pos:column="34">NppParameters</name><op:operator pos:line="3007" pos:column="47">::</op:operator><name pos:line="3007" pos:column="49">getInstance</name></name><argument_list pos:line="3007" pos:column="60">()</argument_list></call><op:operator pos:line="3007" pos:column="62">)</op:operator><op:operator pos:line="3007" pos:column="63">-&gt;</op:operator><call><name pos:line="3007" pos:column="65">getNppGUI</name><argument_list pos:line="3007" pos:column="74">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name pos:line="3008" pos:column="9">execute</name><argument_list pos:line="3008" pos:column="16">(<argument><expr><name pos:line="3008" pos:column="17">SCI_SETTABWIDTH</name></expr></argument>, <argument><expr><name><name pos:line="3008" pos:column="34">nppgui</name><op:operator pos:line="3008" pos:column="40">.</op:operator><name pos:line="3008" pos:column="41">_tabSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="3009" pos:column="17">execute</name><argument_list pos:line="3009" pos:column="24">(<argument><expr><name pos:line="3009" pos:column="25">SCI_SETUSETABS</name></expr></argument>, <argument><expr><op:operator pos:line="3009" pos:column="41">!</op:operator><name><name pos:line="3009" pos:column="42">nppgui</name><op:operator pos:line="3009" pos:column="48">.</op:operator><name pos:line="3009" pos:column="49">_tabReplacedBySpace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
</unit>
