<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\Process\ProcessAvecThread\ProcessThread.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:ifndef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifndef</cpp:directive> <name pos:line="29" pos:column="9">PROCESS_THREAD_H</name></cpp:ifndef>
<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">PROCESS_THREAD_H</name></cpp:macro></cpp:define>

<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"process.h"</lit:literal></cpp:file></cpp:include>

<class pos:line="34" pos:column="1">class <name pos:line="34" pos:column="7">ProcessThread</name>
<block pos:line="35" pos:column="1">{<private type="default" pos:line="35" pos:column="2">
</private><public pos:line="36" pos:column="1">public :
	<constructor><name pos:line="37" pos:column="9">ProcessThread</name><parameter_list pos:line="37" pos:column="22">(<param><decl><type><specifier pos:line="37" pos:column="23">const</specifier> <name pos:line="37" pos:column="29">TCHAR</name> <type:modifier pos:line="37" pos:column="35">*</type:modifier></type><name pos:line="37" pos:column="36">appName</name></decl></param>, <param><decl><type><specifier pos:line="37" pos:column="45">const</specifier> <name pos:line="37" pos:column="51">TCHAR</name> <type:modifier pos:line="37" pos:column="57">*</type:modifier></type><name pos:line="37" pos:column="58">cmd</name></decl></param>, <param><decl><type><specifier pos:line="37" pos:column="63">const</specifier> <name pos:line="37" pos:column="69">TCHAR</name> <type:modifier pos:line="37" pos:column="75">*</type:modifier></type><name pos:line="37" pos:column="76">cDir</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="82">HWND</name></type> <name pos:line="37" pos:column="87">hwnd</name></decl></param>)</parameter_list> <member_list pos:line="37" pos:column="93">: <call><name pos:line="37" pos:column="95">_hwnd</name><argument_list pos:line="37" pos:column="100">(<argument><expr><name pos:line="37" pos:column="101">hwnd</name></expr></argument>)</argument_list></call> </member_list><block pos:line="37" pos:column="107">{
		<expr_stmt><expr><call><name pos:line="38" pos:column="17">lstrcpy</name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">_appName</name></expr></argument>, <argument><expr><name pos:line="38" pos:column="35">appName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="39" pos:column="17">lstrcpy</name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">_command</name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="40" pos:column="17">lstrcpy</name><argument_list pos:line="40" pos:column="24">(<argument><expr><name pos:line="40" pos:column="25">_curDir</name></expr></argument>, <argument><expr><name pos:line="40" pos:column="34">cDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor><empty_stmt pos:line="41" pos:column="10">;</empty_stmt>
	
	<function><type><name pos:line="43" pos:column="9">BOOL</name></type> <name pos:line="43" pos:column="14">run</name><parameter_list pos:line="43" pos:column="17">()</parameter_list><block pos:line="43" pos:column="19">{
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">HANDLE</name></type> <name pos:line="44" pos:column="24">hEvent</name> <init pos:line="44" pos:column="31">= <expr><call><name><op:operator pos:line="44" pos:column="33">::</op:operator><name pos:line="44" pos:column="35">CreateEvent</name></name><argument_list pos:line="44" pos:column="46">(<argument><expr><name pos:line="44" pos:column="47">NULL</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="53">FALSE</name></expr></argument>, <argument><expr><name pos:line="44" pos:column="60">FALSE</name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="67">TEXT</name><argument_list pos:line="44" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="44" pos:column="72">"localVarProcessEvent"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name pos:line="46" pos:column="17">_hProcessThread</name> <op:operator pos:line="46" pos:column="33">=</op:operator> <call><name><op:operator pos:line="46" pos:column="35">::</op:operator><name pos:line="46" pos:column="37">CreateThread</name></name><argument_list pos:line="46" pos:column="49">(<argument><expr><name pos:line="46" pos:column="50">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="46" pos:column="56">0</lit:literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="59">staticLauncher</name></expr></argument>, <argument><expr><name pos:line="46" pos:column="75">this</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="46" pos:column="81">0</lit:literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="84">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><op:operator pos:line="48" pos:column="17">::</op:operator><name pos:line="48" pos:column="19">WaitForSingleObject</name></name><argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">hEvent</name></expr></argument>, <argument><expr><name pos:line="48" pos:column="47">INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><op:operator pos:line="50" pos:column="17">::</op:operator><name pos:line="50" pos:column="19">CloseHandle</name></name><argument_list pos:line="50" pos:column="30">(<argument><expr><name pos:line="50" pos:column="31">hEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="51" pos:column="17">return <expr><name pos:line="51" pos:column="24">TRUE</name></expr>;</return>
	}</block></function><empty_stmt pos:line="52" pos:column="10">;</empty_stmt>

</public><protected pos:line="54" pos:column="1">protected :
	<comment type="line" pos:line="55" pos:column="9">// ENTREES</comment>
	<decl_stmt><decl><type><name pos:line="56" pos:column="9">TCHAR</name></type> <name><name pos:line="56" pos:column="15">_appName</name><index pos:line="56" pos:column="23">[<expr><lit:literal type="number" pos:line="56" pos:column="24">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="57" pos:column="5">TCHAR</name></type> <name><name pos:line="57" pos:column="11">_command</name><index pos:line="57" pos:column="19">[<expr><lit:literal type="number" pos:line="57" pos:column="20">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">TCHAR</name></type> <name><name pos:line="58" pos:column="15">_curDir</name><index pos:line="58" pos:column="22">[<expr><lit:literal type="number" pos:line="58" pos:column="23">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">HWND</name></type> <name pos:line="59" pos:column="14">_hwnd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">HANDLE</name></type> <name pos:line="60" pos:column="16">_hProcessThread</name></decl>;</decl_stmt>

	<function><type><specifier pos:line="62" pos:column="9">static</specifier> <name pos:line="62" pos:column="16">DWORD</name> <name pos:line="62" pos:column="22">WINAPI</name></type> <name pos:line="62" pos:column="29">staticLauncher</name><parameter_list pos:line="62" pos:column="43">(<param><decl><type><name pos:line="62" pos:column="44">void</name> <type:modifier pos:line="62" pos:column="49">*</type:modifier></type><name pos:line="62" pos:column="50">myself</name></decl></param>)</parameter_list> <block pos:line="62" pos:column="58">{
		<expr_stmt><expr><op:operator pos:line="63" pos:column="17">(</op:operator><op:operator pos:line="63" pos:column="18">(</op:operator><name pos:line="63" pos:column="19">ProcessThread</name> <op:operator pos:line="63" pos:column="33">*</op:operator><op:operator pos:line="63" pos:column="34">)</op:operator><name pos:line="63" pos:column="35">myself</name><op:operator pos:line="63" pos:column="41">)</op:operator><op:operator pos:line="63" pos:column="42">-&gt;</op:operator><call><name pos:line="63" pos:column="44">launch</name><argument_list pos:line="63" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="64" pos:column="17">return <expr><name pos:line="64" pos:column="24">TRUE</name></expr>;</return>
	}</block></function><empty_stmt pos:line="65" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="67" pos:column="9">bool</name></type> <name pos:line="67" pos:column="14">launch</name><parameter_list pos:line="67" pos:column="20">()</parameter_list> <block pos:line="67" pos:column="23">{
		<decl_stmt><decl><type><name pos:line="68" pos:column="17">HANDLE</name></type> <name pos:line="68" pos:column="24">hEvent</name> <init pos:line="68" pos:column="31">= <expr><call><name><op:operator pos:line="68" pos:column="33">::</op:operator><name pos:line="68" pos:column="35">OpenEvent</name></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name pos:line="68" pos:column="45">EVENT_ALL_ACCESS</name></expr></argument>, <argument><expr><name pos:line="68" pos:column="63">FALSE</name></expr></argument>, <argument><expr><call><name pos:line="68" pos:column="70">TEXT</name><argument_list pos:line="68" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="68" pos:column="75">"localVarProcessEvent"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="69" pos:column="17">HWND</name></type> <name pos:line="69" pos:column="22">hwnd</name> <init pos:line="69" pos:column="27">= <expr><name pos:line="69" pos:column="29">_hwnd</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="70" pos:column="17">TCHAR</name></type> <name><name pos:line="70" pos:column="23">appName</name><index pos:line="70" pos:column="30">[<expr><lit:literal type="number" pos:line="70" pos:column="31">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="71" pos:column="17">lstrcpy</name><argument_list pos:line="71" pos:column="24">(<argument><expr><name pos:line="71" pos:column="25">appName</name></expr></argument>, <argument><expr><name pos:line="71" pos:column="34">_appName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="72" pos:column="17">HANDLE</name></type> <name pos:line="72" pos:column="24">hMyself</name> <init pos:line="72" pos:column="32">= <expr><name pos:line="72" pos:column="34">_hProcessThread</name></expr></init></decl>;</decl_stmt>

		<function_decl><type><name pos:line="74" pos:column="17">Process</name></type> <name pos:line="74" pos:column="25">process</name><parameter_list pos:line="74" pos:column="32">(<param><decl><type><name pos:line="74" pos:column="33">_command</name></type></decl></param>, <param><decl><type><name pos:line="74" pos:column="43">_curDir</name></type></decl></param>)</parameter_list>;</function_decl>

		<if pos:line="76" pos:column="17">if<condition pos:line="76" pos:column="19">(<expr><op:operator pos:line="76" pos:column="20">!</op:operator><call><name><op:operator pos:line="76" pos:column="21">::</op:operator><name pos:line="76" pos:column="23">SetEvent</name></name><argument_list pos:line="76" pos:column="31">(<argument><expr><name pos:line="76" pos:column="32">hEvent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="40">
		<block pos:line="77" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="78" pos:column="25">systemMessage</name><argument_list pos:line="78" pos:column="38">(<argument><expr><call><name pos:line="78" pos:column="39">TEXT</name><argument_list pos:line="78" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="78" pos:column="44">"Thread launcher"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name><name pos:line="81" pos:column="17">process</name><op:operator pos:line="81" pos:column="24">.</op:operator><name pos:line="81" pos:column="25">run</name></name><argument_list pos:line="81" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name pos:line="83" pos:column="17">int</name></type> <name pos:line="83" pos:column="21">code</name> <init pos:line="83" pos:column="26">= <expr><call><name><name pos:line="83" pos:column="28">process</name><op:operator pos:line="83" pos:column="35">.</op:operator><name pos:line="83" pos:column="36">getExitCode</name></name><argument_list pos:line="83" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="84" pos:column="17">TCHAR</name></type> <name><name pos:line="84" pos:column="23">codeStr</name><index pos:line="84" pos:column="30">[<expr><lit:literal type="number" pos:line="84" pos:column="31">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">generic_sprintf</name><argument_list pos:line="85" pos:column="32">(<argument><expr><name pos:line="85" pos:column="33">codeStr</name></expr></argument>, <argument><expr><call><name pos:line="85" pos:column="42">TEXT</name><argument_list pos:line="85" pos:column="46">(<argument><expr><lit:literal type="string" pos:line="85" pos:column="47">"%s : %0.4X"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="85" pos:column="62">appName</name></expr></argument>, <argument><expr><name pos:line="85" pos:column="71">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="86" pos:column="17">::</op:operator><name pos:line="86" pos:column="19">MessageBox</name></name><argument_list pos:line="86" pos:column="29">(<argument><expr><name pos:line="86" pos:column="30">hwnd</name></expr></argument>, <argument><expr><call><name><name pos:line="86" pos:column="36">process</name><op:operator pos:line="86" pos:column="43">.</op:operator><name pos:line="86" pos:column="44">getStdout</name></name><argument_list pos:line="86" pos:column="53">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="86" pos:column="57">codeStr</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="66">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><call><name><name pos:line="88" pos:column="21">process</name><op:operator pos:line="88" pos:column="28">.</op:operator><name pos:line="88" pos:column="29">hasStderr</name></name><argument_list pos:line="88" pos:column="38">()</argument_list></call></expr>)</condition><then pos:line="88" pos:column="41">
			<expr_stmt><expr><call><name><op:operator pos:line="89" pos:column="25">::</op:operator><name pos:line="89" pos:column="27">MessageBox</name></name><argument_list pos:line="89" pos:column="37">(<argument><expr><name pos:line="89" pos:column="38">hwnd</name></expr></argument>, <argument><expr><call><name><name pos:line="89" pos:column="44">process</name><op:operator pos:line="89" pos:column="51">.</op:operator><name pos:line="89" pos:column="52">getStderr</name></name><argument_list pos:line="89" pos:column="61">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="89" pos:column="65">codeStr</name></expr></argument>, <argument><expr><name pos:line="89" pos:column="74">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><call><name><op:operator pos:line="91" pos:column="17">::</op:operator><name pos:line="91" pos:column="19">CloseHandle</name></name><argument_list pos:line="91" pos:column="30">(<argument><expr><name pos:line="91" pos:column="31">hMyself</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="92" pos:column="17">return <expr><lit:literal type="boolean" pos:line="92" pos:column="24">true</lit:literal></expr>;</return>
	}</block></function><empty_stmt pos:line="93" pos:column="10">;</empty_stmt>
</protected>}</block>;</class>

<cpp:endif pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">endif</cpp:directive> PROCESS_THREAD_H</cpp:endif>
</unit>
