<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexAVE.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// SciTE - Scintilla based Text Editor</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexAVE.cxx
 ** Lexer for Avenue.
 **
  ** Written by Alexey Yutkin &lt;yutkin@geol.msu.ru&gt;.
 **/</comment>
<comment type="line" pos:line="7" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="8" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef</cpp:directive> <name pos:line="28" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="29" pos:column="1">using namespace <name pos:line="29" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif</cpp:directive></cpp:endif>


<function><type><specifier pos:line="33" pos:column="1">static</specifier> <specifier pos:line="33" pos:column="8">inline</specifier> <name pos:line="33" pos:column="15">bool</name></type> <name pos:line="33" pos:column="20">IsAWordChar</name><parameter_list pos:line="33" pos:column="31">(<param><decl><type><specifier pos:line="33" pos:column="32">const</specifier> <name pos:line="33" pos:column="38">int</name></type> <name pos:line="33" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="46">{
	<return pos:line="34" pos:column="9">return <expr><op:operator pos:line="34" pos:column="16">(</op:operator><name pos:line="34" pos:column="17">ch</name> <op:operator pos:line="34" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="34" pos:column="22">0x80</lit:literal><op:operator pos:line="34" pos:column="26">)</op:operator> <op:operator pos:line="34" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="34" pos:column="31">(</op:operator><call><name pos:line="34" pos:column="32">isalnum</name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="34" pos:column="44">||</op:operator> <name pos:line="34" pos:column="47">ch</name> <op:operator pos:line="34" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="53">'.'</lit:literal> <op:operator pos:line="34" pos:column="57">||</op:operator> <name pos:line="34" pos:column="60">ch</name> <op:operator pos:line="34" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="66">'_'</lit:literal><op:operator pos:line="34" pos:column="69">)</op:operator></expr>;</return>
}</block></function>
<function><type><specifier pos:line="36" pos:column="1">static</specifier> <specifier pos:line="36" pos:column="8">inline</specifier> <name pos:line="36" pos:column="15">bool</name></type> <name pos:line="36" pos:column="20">IsEnumChar</name><parameter_list pos:line="36" pos:column="30">(<param><decl><type><specifier pos:line="36" pos:column="31">const</specifier> <name pos:line="36" pos:column="37">int</name></type> <name pos:line="36" pos:column="41">ch</name></decl></param>)</parameter_list> <block pos:line="36" pos:column="45">{
	<return pos:line="37" pos:column="9">return <expr><op:operator pos:line="37" pos:column="16">(</op:operator><name pos:line="37" pos:column="17">ch</name> <op:operator pos:line="37" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="37" pos:column="22">0x80</lit:literal><op:operator pos:line="37" pos:column="26">)</op:operator> <op:operator pos:line="37" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="37" pos:column="31">(</op:operator><call><name pos:line="37" pos:column="32">isalnum</name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="37" pos:column="43">||</op:operator> <name pos:line="37" pos:column="46">ch</name> <op:operator pos:line="37" pos:column="49">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="52">'_'</lit:literal><op:operator pos:line="37" pos:column="55">)</op:operator></expr>;</return>
}</block></function>
<function><type><specifier pos:line="39" pos:column="1">static</specifier> <specifier pos:line="39" pos:column="8">inline</specifier> <name pos:line="39" pos:column="15">bool</name></type> <name pos:line="39" pos:column="20">IsANumberChar</name><parameter_list pos:line="39" pos:column="33">(<param><decl><type><specifier pos:line="39" pos:column="34">const</specifier> <name pos:line="39" pos:column="40">int</name></type> <name pos:line="39" pos:column="44">ch</name></decl></param>)</parameter_list> <block pos:line="39" pos:column="48">{
	<return pos:line="40" pos:column="9">return <expr><op:operator pos:line="40" pos:column="16">(</op:operator><name pos:line="40" pos:column="17">ch</name> <op:operator pos:line="40" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="40" pos:column="22">0x80</lit:literal><op:operator pos:line="40" pos:column="26">)</op:operator> <op:operator pos:line="40" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="40" pos:column="31">(</op:operator><call><name pos:line="40" pos:column="32">isalnum</name><argument_list pos:line="40" pos:column="39">(<argument><expr><name pos:line="40" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="40" pos:column="44">||</op:operator> <name pos:line="40" pos:column="47">ch</name> <op:operator pos:line="40" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="40" pos:column="53">'.'</lit:literal> <op:operator pos:line="40" pos:column="57">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="43" pos:column="1">inline</specifier> <name pos:line="43" pos:column="8">bool</name></type> <name pos:line="43" pos:column="13">IsAWordStart</name><parameter_list pos:line="43" pos:column="25">(<param><decl><type><specifier pos:line="43" pos:column="26">const</specifier> <name pos:line="43" pos:column="32">int</name></type> <name pos:line="43" pos:column="36">ch</name></decl></param>)</parameter_list> <block pos:line="43" pos:column="40">{
	<return pos:line="44" pos:column="9">return <expr><op:operator pos:line="44" pos:column="16">(</op:operator><name pos:line="44" pos:column="17">ch</name> <op:operator pos:line="44" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="44" pos:column="22">0x80</lit:literal><op:operator pos:line="44" pos:column="26">)</op:operator> <op:operator pos:line="44" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="44" pos:column="31">(</op:operator><call><name pos:line="44" pos:column="32">isalnum</name><argument_list pos:line="44" pos:column="39">(<argument><expr><name pos:line="44" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="44" pos:column="44">||</op:operator> <name pos:line="44" pos:column="47">ch</name> <op:operator pos:line="44" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="44" pos:column="53">'_'</lit:literal><op:operator pos:line="44" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="47" pos:column="1">inline</specifier> <name pos:line="47" pos:column="8">bool</name></type> <name pos:line="47" pos:column="13">isAveOperator</name><parameter_list pos:line="47" pos:column="26">(<param><decl><type><name pos:line="47" pos:column="27">char</name></type> <name pos:line="47" pos:column="32">ch</name></decl></param>)</parameter_list> <block pos:line="47" pos:column="36">{
	<if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">isascii</name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="48" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="48" pos:column="28">isalnum</name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="48" pos:column="40">
		<return pos:line="49" pos:column="17">return <expr><lit:literal type="boolean" pos:line="49" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<comment type="line" pos:line="50" pos:column="9">// '.' left out as it is used to make up numbers</comment>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">ch</name> <op:operator pos:line="51" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="19">'*'</lit:literal> <op:operator pos:line="51" pos:column="23">||</op:operator> <name pos:line="51" pos:column="26">ch</name> <op:operator pos:line="51" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="32">'/'</lit:literal> <op:operator pos:line="51" pos:column="36">||</op:operator> <name pos:line="51" pos:column="39">ch</name> <op:operator pos:line="51" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="45">'-'</lit:literal> <op:operator pos:line="51" pos:column="49">||</op:operator> <name pos:line="51" pos:column="52">ch</name> <op:operator pos:line="51" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="58">'+'</lit:literal> <op:operator pos:line="51" pos:column="62">||</op:operator>
		<name pos:line="52" pos:column="17">ch</name> <op:operator pos:line="52" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="23">'('</lit:literal> <op:operator pos:line="52" pos:column="27">||</op:operator> <name pos:line="52" pos:column="30">ch</name> <op:operator pos:line="52" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="36">')'</lit:literal> <op:operator pos:line="52" pos:column="40">||</op:operator> <name pos:line="52" pos:column="43">ch</name> <op:operator pos:line="52" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="52" pos:column="49">'='</lit:literal> <op:operator pos:line="52" pos:column="53">||</op:operator>
		<name pos:line="53" pos:column="17">ch</name> <op:operator pos:line="53" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="23">'{'</lit:literal> <op:operator pos:line="53" pos:column="27">||</op:operator> <name pos:line="53" pos:column="30">ch</name> <op:operator pos:line="53" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="53" pos:column="36">'}'</lit:literal> <op:operator pos:line="53" pos:column="40">||</op:operator>
		<name pos:line="54" pos:column="17">ch</name> <op:operator pos:line="54" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="23">'['</lit:literal> <op:operator pos:line="54" pos:column="27">||</op:operator> <name pos:line="54" pos:column="30">ch</name> <op:operator pos:line="54" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="36">']'</lit:literal> <op:operator pos:line="54" pos:column="40">||</op:operator> <name pos:line="54" pos:column="43">ch</name> <op:operator pos:line="54" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="49">';'</lit:literal> <op:operator pos:line="54" pos:column="53">||</op:operator>
		<name pos:line="55" pos:column="17">ch</name> <op:operator pos:line="55" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="23">'&lt;'</lit:literal> <op:operator pos:line="55" pos:column="27">||</op:operator> <name pos:line="55" pos:column="30">ch</name> <op:operator pos:line="55" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="36">'&gt;'</lit:literal> <op:operator pos:line="55" pos:column="40">||</op:operator> <name pos:line="55" pos:column="43">ch</name> <op:operator pos:line="55" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="55" pos:column="49">','</lit:literal> <op:operator pos:line="55" pos:column="53">||</op:operator>
		<name pos:line="56" pos:column="17">ch</name> <op:operator pos:line="56" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="56" pos:column="23">'.'</lit:literal></expr>  )</condition><then pos:line="56" pos:column="29">
		<return pos:line="57" pos:column="17">return <expr><lit:literal type="boolean" pos:line="57" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="58" pos:column="9">return <expr><lit:literal type="boolean" pos:line="58" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="61" pos:column="1">static</specifier> <name pos:line="61" pos:column="8">void</name></type> <name pos:line="61" pos:column="13">ColouriseAveDoc</name><parameter_list pos:line="61" pos:column="28">(
	<param><decl><type><name pos:line="62" pos:column="9">unsigned</name> <name pos:line="62" pos:column="18">int</name></type> <name pos:line="62" pos:column="22">startPos</name></decl></param>,
	<param><decl><type><name pos:line="63" pos:column="9">int</name></type> <name pos:line="63" pos:column="13">length</name></decl></param>,
	<param><decl><type><name pos:line="64" pos:column="9">int</name></type> <name pos:line="64" pos:column="13">initStyle</name></decl></param>,
	<param><decl><type><name pos:line="65" pos:column="9">WordList</name> <type:modifier pos:line="65" pos:column="18">*</type:modifier></type><name><name pos:line="65" pos:column="19">keywordlists</name><index pos:line="65" pos:column="31">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="66" pos:column="9">Accessor</name> <type:modifier pos:line="66" pos:column="18">&amp;</type:modifier></type><name pos:line="66" pos:column="19">styler</name></decl></param>)</parameter_list> <block pos:line="66" pos:column="27">{

	<decl_stmt><decl><type><name pos:line="68" pos:column="9">WordList</name> <type:modifier pos:line="68" pos:column="18">&amp;</type:modifier></type><name pos:line="68" pos:column="19">keywords</name> <init pos:line="68" pos:column="28">= <expr><op:operator pos:line="68" pos:column="30">*</op:operator><name><name pos:line="68" pos:column="31">keywordlists</name><index pos:line="68" pos:column="43">[<expr><lit:literal type="number" pos:line="68" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">WordList</name> <type:modifier pos:line="69" pos:column="18">&amp;</type:modifier></type><name pos:line="69" pos:column="19">keywords2</name> <init pos:line="69" pos:column="29">= <expr><op:operator pos:line="69" pos:column="31">*</op:operator><name><name pos:line="69" pos:column="32">keywordlists</name><index pos:line="69" pos:column="44">[<expr><lit:literal type="number" pos:line="69" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="70" pos:column="9">WordList</name> <type:modifier pos:line="70" pos:column="18">&amp;</type:modifier></type><name pos:line="70" pos:column="19">keywords3</name> <init pos:line="70" pos:column="29">= <expr><op:operator pos:line="70" pos:column="31">*</op:operator><name><name pos:line="70" pos:column="32">keywordlists</name><index pos:line="70" pos:column="44">[<expr><lit:literal type="number" pos:line="70" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="71" pos:column="9">WordList</name> <type:modifier pos:line="71" pos:column="18">&amp;</type:modifier></type><name pos:line="71" pos:column="19">keywords4</name> <init pos:line="71" pos:column="29">= <expr><op:operator pos:line="71" pos:column="31">*</op:operator><name><name pos:line="71" pos:column="32">keywordlists</name><index pos:line="71" pos:column="44">[<expr><lit:literal type="number" pos:line="71" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">WordList</name> <type:modifier pos:line="72" pos:column="18">&amp;</type:modifier></type><name pos:line="72" pos:column="19">keywords5</name> <init pos:line="72" pos:column="29">= <expr><op:operator pos:line="72" pos:column="31">*</op:operator><name><name pos:line="72" pos:column="32">keywordlists</name><index pos:line="72" pos:column="44">[<expr><lit:literal type="number" pos:line="72" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">WordList</name> <type:modifier pos:line="73" pos:column="18">&amp;</type:modifier></type><name pos:line="73" pos:column="19">keywords6</name> <init pos:line="73" pos:column="29">= <expr><op:operator pos:line="73" pos:column="31">*</op:operator><name><name pos:line="73" pos:column="32">keywordlists</name><index pos:line="73" pos:column="44">[<expr><lit:literal type="number" pos:line="73" pos:column="45">5</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="75" pos:column="9">// Do not leak onto next line</comment>
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">initStyle</name> <op:operator pos:line="76" pos:column="23">==</op:operator> <name pos:line="76" pos:column="26">SCE_AVE_STRINGEOL</name></expr>)</condition><then pos:line="76" pos:column="44"> <block pos:line="76" pos:column="45">{
		<expr_stmt><expr><name pos:line="77" pos:column="17">initStyle</name> <op:operator pos:line="77" pos:column="27">=</op:operator> <name pos:line="77" pos:column="29">SCE_AVE_DEFAULT</name></expr>;</expr_stmt>
	}</block></then></if>

	<function_decl><type><name pos:line="80" pos:column="9">StyleContext</name></type> <name pos:line="80" pos:column="22">sc</name><parameter_list pos:line="80" pos:column="24">(<param><decl><type><name pos:line="80" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="80" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="80" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="80" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="82" pos:column="9">for (<init pos:line="82" pos:column="14">;</init> <condition><expr><call><name><name pos:line="82" pos:column="16">sc</name><op:operator pos:line="82" pos:column="18">.</op:operator><name pos:line="82" pos:column="19">More</name></name><argument_list pos:line="82" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="82" pos:column="27">sc</name><op:operator pos:line="82" pos:column="29">.</op:operator><name pos:line="82" pos:column="30">Forward</name></name><argument_list pos:line="82" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="82" pos:column="41">{
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name><name pos:line="83" pos:column="21">sc</name><op:operator pos:line="83" pos:column="23">.</op:operator><name pos:line="83" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="83" pos:column="34"> <block pos:line="83" pos:column="35">{
			<comment type="line" pos:line="84" pos:column="25">// Update the line state, so it can be seen by next line</comment>
			<decl_stmt><decl><type><name pos:line="85" pos:column="25">int</name></type> <name pos:line="85" pos:column="29">currentLine</name> <init pos:line="85" pos:column="41">= <expr><call><name><name pos:line="85" pos:column="43">styler</name><op:operator pos:line="85" pos:column="49">.</op:operator><name pos:line="85" pos:column="50">GetLine</name></name><argument_list pos:line="85" pos:column="57">(<argument><expr><name><name pos:line="85" pos:column="58">sc</name><op:operator pos:line="85" pos:column="60">.</op:operator><name pos:line="85" pos:column="61">currentPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name pos:line="86" pos:column="25">styler</name><op:operator pos:line="86" pos:column="31">.</op:operator><name pos:line="86" pos:column="32">SetLineState</name></name><argument_list pos:line="86" pos:column="44">(<argument><expr><name pos:line="86" pos:column="45">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="86" pos:column="58">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><name><name pos:line="88" pos:column="21">sc</name><op:operator pos:line="88" pos:column="23">.</op:operator><name pos:line="88" pos:column="24">atLineStart</name></name> <op:operator pos:line="88" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="39">(</op:operator><name><name pos:line="88" pos:column="40">sc</name><op:operator pos:line="88" pos:column="42">.</op:operator><name pos:line="88" pos:column="43">state</name></name> <op:operator pos:line="88" pos:column="49">==</op:operator> <name pos:line="88" pos:column="52">SCE_AVE_STRING</name><op:operator pos:line="88" pos:column="66">)</op:operator></expr>)</condition><then pos:line="88" pos:column="68"> <block pos:line="88" pos:column="69">{
			<comment type="line" pos:line="89" pos:column="25">// Prevent SCE_AVE_STRINGEOL from leaking back to previous line</comment>
			<expr_stmt><expr><call><name><name pos:line="90" pos:column="25">sc</name><op:operator pos:line="90" pos:column="27">.</op:operator><name pos:line="90" pos:column="28">SetState</name></name><argument_list pos:line="90" pos:column="36">(<argument><expr><name pos:line="90" pos:column="37">SCE_AVE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>


		<comment type="line" pos:line="94" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><name><name pos:line="95" pos:column="21">sc</name><op:operator pos:line="95" pos:column="23">.</op:operator><name pos:line="95" pos:column="24">state</name></name> <op:operator pos:line="95" pos:column="30">==</op:operator> <name pos:line="95" pos:column="33">SCE_AVE_OPERATOR</name></expr>)</condition><then pos:line="95" pos:column="50"> <block pos:line="95" pos:column="51">{
			<expr_stmt><expr><call><name><name pos:line="96" pos:column="25">sc</name><op:operator pos:line="96" pos:column="27">.</op:operator><name pos:line="96" pos:column="28">SetState</name></name><argument_list pos:line="96" pos:column="36">(<argument><expr><name pos:line="96" pos:column="37">SCE_AVE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="97" pos:column="19">else <if pos:line="97" pos:column="24">if <condition pos:line="97" pos:column="27">(<expr><name><name pos:line="97" pos:column="28">sc</name><op:operator pos:line="97" pos:column="30">.</op:operator><name pos:line="97" pos:column="31">state</name></name> <op:operator pos:line="97" pos:column="37">==</op:operator> <name pos:line="97" pos:column="40">SCE_AVE_NUMBER</name></expr>)</condition><then pos:line="97" pos:column="55"> <block pos:line="97" pos:column="56">{
			<if pos:line="98" pos:column="25">if <condition pos:line="98" pos:column="28">(<expr><op:operator pos:line="98" pos:column="29">!</op:operator><call><name pos:line="98" pos:column="30">IsANumberChar</name><argument_list pos:line="98" pos:column="43">(<argument><expr><name><name pos:line="98" pos:column="44">sc</name><op:operator pos:line="98" pos:column="46">.</op:operator><name pos:line="98" pos:column="47">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="51"> <block pos:line="98" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="99" pos:column="33">sc</name><op:operator pos:line="99" pos:column="35">.</op:operator><name pos:line="99" pos:column="36">SetState</name></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">SCE_AVE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="101" pos:column="19">else <if pos:line="101" pos:column="24">if <condition pos:line="101" pos:column="27">(<expr><name><name pos:line="101" pos:column="28">sc</name><op:operator pos:line="101" pos:column="30">.</op:operator><name pos:line="101" pos:column="31">state</name></name> <op:operator pos:line="101" pos:column="37">==</op:operator> <name pos:line="101" pos:column="40">SCE_AVE_ENUM</name></expr>)</condition><then pos:line="101" pos:column="53"> <block pos:line="101" pos:column="54">{
			<if pos:line="102" pos:column="25">if <condition pos:line="102" pos:column="28">(<expr><op:operator pos:line="102" pos:column="29">!</op:operator><call><name pos:line="102" pos:column="30">IsEnumChar</name><argument_list pos:line="102" pos:column="40">(<argument><expr><name><name pos:line="102" pos:column="41">sc</name><op:operator pos:line="102" pos:column="43">.</op:operator><name pos:line="102" pos:column="44">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="48"> <block pos:line="102" pos:column="49">{
				<expr_stmt><expr><call><name><name pos:line="103" pos:column="33">sc</name><op:operator pos:line="103" pos:column="35">.</op:operator><name pos:line="103" pos:column="36">SetState</name></name><argument_list pos:line="103" pos:column="44">(<argument><expr><name pos:line="103" pos:column="45">SCE_AVE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="105" pos:column="19">else <if pos:line="105" pos:column="24">if <condition pos:line="105" pos:column="27">(<expr><name><name pos:line="105" pos:column="28">sc</name><op:operator pos:line="105" pos:column="30">.</op:operator><name pos:line="105" pos:column="31">state</name></name> <op:operator pos:line="105" pos:column="37">==</op:operator> <name pos:line="105" pos:column="40">SCE_AVE_IDENTIFIER</name></expr>)</condition><then pos:line="105" pos:column="59"> <block pos:line="105" pos:column="60">{
			<if pos:line="106" pos:column="25">if <condition pos:line="106" pos:column="28">(<expr><op:operator pos:line="106" pos:column="29">!</op:operator><call><name pos:line="106" pos:column="30">IsAWordChar</name><argument_list pos:line="106" pos:column="41">(<argument><expr><name><name pos:line="106" pos:column="42">sc</name><op:operator pos:line="106" pos:column="44">.</op:operator><name pos:line="106" pos:column="45">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="106" pos:column="49">||</op:operator> <op:operator pos:line="106" pos:column="52">(</op:operator><name><name pos:line="106" pos:column="53">sc</name><op:operator pos:line="106" pos:column="55">.</op:operator><name pos:line="106" pos:column="56">ch</name></name> <op:operator pos:line="106" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="106" pos:column="62">'.'</lit:literal><op:operator pos:line="106" pos:column="65">)</op:operator></expr>)</condition><then pos:line="106" pos:column="67"> <block pos:line="106" pos:column="68">{
				<decl_stmt><decl><type><name pos:line="107" pos:column="33">char</name></type> <name><name pos:line="107" pos:column="38">s</name><index pos:line="107" pos:column="39">[<expr><lit:literal type="number" pos:line="107" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<comment type="line" pos:line="108" pos:column="33">//sc.GetCurrent(s, sizeof(s));</comment>
				<expr_stmt><expr><call><name><name pos:line="109" pos:column="33">sc</name><op:operator pos:line="109" pos:column="35">.</op:operator><name pos:line="109" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="109" pos:column="53">(<argument><expr><name pos:line="109" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="109" pos:column="57">sizeof<argument_list pos:line="109" pos:column="63">(<argument><expr><name pos:line="109" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="110" pos:column="33">if <condition pos:line="110" pos:column="36">(<expr><call><name><name pos:line="110" pos:column="37">keywords</name><op:operator pos:line="110" pos:column="45">.</op:operator><name pos:line="110" pos:column="46">InList</name></name><argument_list pos:line="110" pos:column="52">(<argument><expr><name pos:line="110" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="110" pos:column="56"> <block pos:line="110" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="111" pos:column="41">sc</name><op:operator pos:line="111" pos:column="43">.</op:operator><name pos:line="111" pos:column="44">ChangeState</name></name><argument_list pos:line="111" pos:column="55">(<argument><expr><name pos:line="111" pos:column="56">SCE_AVE_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="112" pos:column="35">else <if pos:line="112" pos:column="40">if <condition pos:line="112" pos:column="43">(<expr><call><name><name pos:line="112" pos:column="44">keywords2</name><op:operator pos:line="112" pos:column="53">.</op:operator><name pos:line="112" pos:column="54">InList</name></name><argument_list pos:line="112" pos:column="60">(<argument><expr><name pos:line="112" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="112" pos:column="64"> <block pos:line="112" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="113" pos:column="41">sc</name><op:operator pos:line="113" pos:column="43">.</op:operator><name pos:line="113" pos:column="44">ChangeState</name></name><argument_list pos:line="113" pos:column="55">(<argument><expr><name pos:line="113" pos:column="56">SCE_AVE_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="114" pos:column="35">else <if pos:line="114" pos:column="40">if <condition pos:line="114" pos:column="43">(<expr><call><name><name pos:line="114" pos:column="44">keywords3</name><op:operator pos:line="114" pos:column="53">.</op:operator><name pos:line="114" pos:column="54">InList</name></name><argument_list pos:line="114" pos:column="60">(<argument><expr><name pos:line="114" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="114" pos:column="64"> <block pos:line="114" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="115" pos:column="41">sc</name><op:operator pos:line="115" pos:column="43">.</op:operator><name pos:line="115" pos:column="44">ChangeState</name></name><argument_list pos:line="115" pos:column="55">(<argument><expr><name pos:line="115" pos:column="56">SCE_AVE_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="116" pos:column="35">else <if pos:line="116" pos:column="40">if <condition pos:line="116" pos:column="43">(<expr><call><name><name pos:line="116" pos:column="44">keywords4</name><op:operator pos:line="116" pos:column="53">.</op:operator><name pos:line="116" pos:column="54">InList</name></name><argument_list pos:line="116" pos:column="60">(<argument><expr><name pos:line="116" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="116" pos:column="64"> <block pos:line="116" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="117" pos:column="41">sc</name><op:operator pos:line="117" pos:column="43">.</op:operator><name pos:line="117" pos:column="44">ChangeState</name></name><argument_list pos:line="117" pos:column="55">(<argument><expr><name pos:line="117" pos:column="56">SCE_AVE_WORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="118" pos:column="35">else <if pos:line="118" pos:column="40">if <condition pos:line="118" pos:column="43">(<expr><call><name><name pos:line="118" pos:column="44">keywords5</name><op:operator pos:line="118" pos:column="53">.</op:operator><name pos:line="118" pos:column="54">InList</name></name><argument_list pos:line="118" pos:column="60">(<argument><expr><name pos:line="118" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="118" pos:column="64"> <block pos:line="118" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="119" pos:column="41">sc</name><op:operator pos:line="119" pos:column="43">.</op:operator><name pos:line="119" pos:column="44">ChangeState</name></name><argument_list pos:line="119" pos:column="55">(<argument><expr><name pos:line="119" pos:column="56">SCE_AVE_WORD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="120" pos:column="35">else <if pos:line="120" pos:column="40">if <condition pos:line="120" pos:column="43">(<expr><call><name><name pos:line="120" pos:column="44">keywords6</name><op:operator pos:line="120" pos:column="53">.</op:operator><name pos:line="120" pos:column="54">InList</name></name><argument_list pos:line="120" pos:column="60">(<argument><expr><name pos:line="120" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="120" pos:column="64"> <block pos:line="120" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="121" pos:column="41">sc</name><op:operator pos:line="121" pos:column="43">.</op:operator><name pos:line="121" pos:column="44">ChangeState</name></name><argument_list pos:line="121" pos:column="55">(<argument><expr><name pos:line="121" pos:column="56">SCE_AVE_WORD6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if></else></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="123" pos:column="33">sc</name><op:operator pos:line="123" pos:column="35">.</op:operator><name pos:line="123" pos:column="36">SetState</name></name><argument_list pos:line="123" pos:column="44">(<argument><expr><name pos:line="123" pos:column="45">SCE_AVE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="125" pos:column="19">else <if pos:line="125" pos:column="24">if <condition pos:line="125" pos:column="27">(<expr><name><name pos:line="125" pos:column="28">sc</name><op:operator pos:line="125" pos:column="30">.</op:operator><name pos:line="125" pos:column="31">state</name></name> <op:operator pos:line="125" pos:column="37">==</op:operator> <name pos:line="125" pos:column="40">SCE_AVE_COMMENT</name></expr>)</condition><then pos:line="125" pos:column="56"> <block pos:line="125" pos:column="57">{
			<if pos:line="126" pos:column="25">if <condition pos:line="126" pos:column="28">(<expr><name><name pos:line="126" pos:column="29">sc</name><op:operator pos:line="126" pos:column="31">.</op:operator><name pos:line="126" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="126" pos:column="42"> <block pos:line="126" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="127" pos:column="33">sc</name><op:operator pos:line="127" pos:column="35">.</op:operator><name pos:line="127" pos:column="36">SetState</name></name><argument_list pos:line="127" pos:column="44">(<argument><expr><name pos:line="127" pos:column="45">SCE_AVE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="129" pos:column="19">else <if pos:line="129" pos:column="24">if <condition pos:line="129" pos:column="27">(<expr><name><name pos:line="129" pos:column="28">sc</name><op:operator pos:line="129" pos:column="30">.</op:operator><name pos:line="129" pos:column="31">state</name></name> <op:operator pos:line="129" pos:column="37">==</op:operator> <name pos:line="129" pos:column="40">SCE_AVE_STRING</name></expr>)</condition><then pos:line="129" pos:column="55"> <block pos:line="129" pos:column="56">{
			 <if pos:line="130" pos:column="26">if <condition pos:line="130" pos:column="29">(<expr><name><name pos:line="130" pos:column="30">sc</name><op:operator pos:line="130" pos:column="32">.</op:operator><name pos:line="130" pos:column="33">ch</name></name> <op:operator pos:line="130" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="130" pos:column="39">'\"'</lit:literal></expr>)</condition><then pos:line="130" pos:column="44"> <block pos:line="130" pos:column="45">{
				<expr_stmt><expr><call><name><name pos:line="131" pos:column="33">sc</name><op:operator pos:line="131" pos:column="35">.</op:operator><name pos:line="131" pos:column="36">ForwardSetState</name></name><argument_list pos:line="131" pos:column="51">(<argument><expr><name pos:line="131" pos:column="52">SCE_AVE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="132" pos:column="27">else <if pos:line="132" pos:column="32">if <condition pos:line="132" pos:column="35">(<expr><name><name pos:line="132" pos:column="36">sc</name><op:operator pos:line="132" pos:column="38">.</op:operator><name pos:line="132" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="132" pos:column="49"> <block pos:line="132" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">sc</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">ChangeState</name></name><argument_list pos:line="133" pos:column="47">(<argument><expr><name pos:line="133" pos:column="48">SCE_AVE_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="134" pos:column="33">sc</name><op:operator pos:line="134" pos:column="35">.</op:operator><name pos:line="134" pos:column="36">ForwardSetState</name></name><argument_list pos:line="134" pos:column="51">(<argument><expr><name pos:line="134" pos:column="52">SCE_AVE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if>

		<comment type="line" pos:line="138" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="139" pos:column="17">if <condition pos:line="139" pos:column="20">(<expr><name><name pos:line="139" pos:column="21">sc</name><op:operator pos:line="139" pos:column="23">.</op:operator><name pos:line="139" pos:column="24">state</name></name> <op:operator pos:line="139" pos:column="30">==</op:operator> <name pos:line="139" pos:column="33">SCE_AVE_DEFAULT</name></expr>)</condition><then pos:line="139" pos:column="49"> <block pos:line="139" pos:column="50">{
			<if pos:line="140" pos:column="25">if <condition pos:line="140" pos:column="28">(<expr><call><name pos:line="140" pos:column="29">IsADigit</name><argument_list pos:line="140" pos:column="37">(<argument><expr><name><name pos:line="140" pos:column="38">sc</name><op:operator pos:line="140" pos:column="40">.</op:operator><name pos:line="140" pos:column="41">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="140" pos:column="45">||</op:operator> <op:operator pos:line="140" pos:column="48">(</op:operator><name><name pos:line="140" pos:column="49">sc</name><op:operator pos:line="140" pos:column="51">.</op:operator><name pos:line="140" pos:column="52">ch</name></name> <op:operator pos:line="140" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="58">'.'</lit:literal> <op:operator pos:line="140" pos:column="62">&amp;&amp;</op:operator> <call><name pos:line="140" pos:column="65">IsADigit</name><argument_list pos:line="140" pos:column="73">(<argument><expr><name><name pos:line="140" pos:column="74">sc</name><op:operator pos:line="140" pos:column="76">.</op:operator><name pos:line="140" pos:column="77">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="140" pos:column="84">)</op:operator></expr>)</condition><then pos:line="140" pos:column="86"> <block pos:line="140" pos:column="87">{
				<expr_stmt><expr><call><name><name pos:line="141" pos:column="33">sc</name><op:operator pos:line="141" pos:column="35">.</op:operator><name pos:line="141" pos:column="36">SetState</name></name><argument_list pos:line="141" pos:column="44">(<argument><expr><name pos:line="141" pos:column="45">SCE_AVE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="142" pos:column="27">else <if pos:line="142" pos:column="32">if <condition pos:line="142" pos:column="35">(<expr><call><name pos:line="142" pos:column="36">IsAWordStart</name><argument_list pos:line="142" pos:column="48">(<argument><expr><name><name pos:line="142" pos:column="49">sc</name><op:operator pos:line="142" pos:column="51">.</op:operator><name pos:line="142" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="142" pos:column="56"> <block pos:line="142" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="143" pos:column="33">sc</name><op:operator pos:line="143" pos:column="35">.</op:operator><name pos:line="143" pos:column="36">SetState</name></name><argument_list pos:line="143" pos:column="44">(<argument><expr><name pos:line="143" pos:column="45">SCE_AVE_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="144" pos:column="27">else <if pos:line="144" pos:column="32">if <condition pos:line="144" pos:column="35">(<expr><call><name><name pos:line="144" pos:column="36">sc</name><op:operator pos:line="144" pos:column="38">.</op:operator><name pos:line="144" pos:column="39">Match</name></name><argument_list pos:line="144" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="144" pos:column="45">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="144" pos:column="51"> <block pos:line="144" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">sc</name><op:operator pos:line="145" pos:column="35">.</op:operator><name pos:line="145" pos:column="36">SetState</name></name><argument_list pos:line="145" pos:column="44">(<argument><expr><name pos:line="145" pos:column="45">SCE_AVE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="146" pos:column="27">else <if pos:line="146" pos:column="32">if <condition pos:line="146" pos:column="35">(<expr><call><name><name pos:line="146" pos:column="36">sc</name><op:operator pos:line="146" pos:column="38">.</op:operator><name pos:line="146" pos:column="39">Match</name></name><argument_list pos:line="146" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="146" pos:column="45">'\''</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="146" pos:column="51"> <block pos:line="146" pos:column="52">{
				<expr_stmt><expr><call><name><name pos:line="147" pos:column="33">sc</name><op:operator pos:line="147" pos:column="35">.</op:operator><name pos:line="147" pos:column="36">SetState</name></name><argument_list pos:line="147" pos:column="44">(<argument><expr><name pos:line="147" pos:column="45">SCE_AVE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="148" pos:column="33">sc</name><op:operator pos:line="148" pos:column="35">.</op:operator><name pos:line="148" pos:column="36">Forward</name></name><argument_list pos:line="148" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="149" pos:column="27">else <if pos:line="149" pos:column="32">if <condition pos:line="149" pos:column="35">(<expr><call><name pos:line="149" pos:column="36">isAveOperator</name><argument_list pos:line="149" pos:column="49">(<argument><expr><call><name><name pos:line="149" pos:column="50">static_cast</name><argument_list pos:line="149" pos:column="61">&lt;<argument><expr><name pos:line="149" pos:column="62">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="149" pos:column="67">(<argument><expr><name><name pos:line="149" pos:column="68">sc</name><op:operator pos:line="149" pos:column="70">.</op:operator><name pos:line="149" pos:column="71">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="149" pos:column="76"> <block pos:line="149" pos:column="77">{
				<expr_stmt><expr><call><name><name pos:line="150" pos:column="33">sc</name><op:operator pos:line="150" pos:column="35">.</op:operator><name pos:line="150" pos:column="36">SetState</name></name><argument_list pos:line="150" pos:column="44">(<argument><expr><name pos:line="150" pos:column="45">SCE_AVE_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="151" pos:column="27">else <if pos:line="151" pos:column="32">if <condition pos:line="151" pos:column="35">(<expr><call><name><name pos:line="151" pos:column="36">sc</name><op:operator pos:line="151" pos:column="38">.</op:operator><name pos:line="151" pos:column="39">Match</name></name><argument_list pos:line="151" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="151" pos:column="45">'#'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="151" pos:column="50"> <block pos:line="151" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="152" pos:column="33">sc</name><op:operator pos:line="152" pos:column="35">.</op:operator><name pos:line="152" pos:column="36">SetState</name></name><argument_list pos:line="152" pos:column="44">(<argument><expr><name pos:line="152" pos:column="45">SCE_AVE_ENUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="153" pos:column="33">sc</name><op:operator pos:line="153" pos:column="35">.</op:operator><name pos:line="153" pos:column="36">Forward</name></name><argument_list pos:line="153" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="157" pos:column="9">sc</name><op:operator pos:line="157" pos:column="11">.</op:operator><name pos:line="157" pos:column="12">Complete</name></name><argument_list pos:line="157" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="160" pos:column="1">static</specifier> <name pos:line="160" pos:column="8">void</name></type> <name pos:line="160" pos:column="13">FoldAveDoc</name><parameter_list pos:line="160" pos:column="23">(<param><decl><type><name pos:line="160" pos:column="24">unsigned</name> <name pos:line="160" pos:column="33">int</name></type> <name pos:line="160" pos:column="37">startPos</name></decl></param>, <param><decl><type><name pos:line="160" pos:column="47">int</name></type> <name pos:line="160" pos:column="51">length</name></decl></param>, <param><decl><type><name pos:line="160" pos:column="59">int</name></type></decl></param> <comment type="block" pos:line="160" pos:column="63">/* initStyle */</comment>, <param><decl><type><name><name pos:line="160" pos:column="80">WordList</name> <type:modifier pos:line="160" pos:column="89">*</type:modifier><index pos:line="160" pos:column="90">[]</index></name></type></decl></param>,
                       <param><decl><type><name pos:line="161" pos:column="24">Accessor</name> <type:modifier pos:line="161" pos:column="33">&amp;</type:modifier></type><name pos:line="161" pos:column="34">styler</name></decl></param>)</parameter_list> <block pos:line="161" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="162" pos:column="9">unsigned</name> <name pos:line="162" pos:column="18">int</name></type> <name pos:line="162" pos:column="22">lengthDoc</name> <init pos:line="162" pos:column="32">= <expr><name pos:line="162" pos:column="34">startPos</name> <op:operator pos:line="162" pos:column="43">+</op:operator> <name pos:line="162" pos:column="45">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="163" pos:column="9">int</name></type> <name pos:line="163" pos:column="13">visibleChars</name> <init pos:line="163" pos:column="26">= <expr><lit:literal type="number" pos:line="163" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="164" pos:column="9">int</name></type> <name pos:line="164" pos:column="13">lineCurrent</name> <init pos:line="164" pos:column="25">= <expr><call><name><name pos:line="164" pos:column="27">styler</name><op:operator pos:line="164" pos:column="33">.</op:operator><name pos:line="164" pos:column="34">GetLine</name></name><argument_list pos:line="164" pos:column="41">(<argument><expr><name pos:line="164" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="165" pos:column="9">int</name></type> <name pos:line="165" pos:column="13">levelPrev</name> <init pos:line="165" pos:column="23">= <expr><call><name><name pos:line="165" pos:column="25">styler</name><op:operator pos:line="165" pos:column="31">.</op:operator><name pos:line="165" pos:column="32">LevelAt</name></name><argument_list pos:line="165" pos:column="39">(<argument><expr><name pos:line="165" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="165" pos:column="53">&amp;</op:operator> <name pos:line="165" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="166" pos:column="9">int</name></type> <name pos:line="166" pos:column="13">levelCurrent</name> <init pos:line="166" pos:column="26">= <expr><name pos:line="166" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="167" pos:column="9">char</name></type> <name pos:line="167" pos:column="14">chNext</name> <init pos:line="167" pos:column="21">= <expr><call><name><name pos:line="167" pos:column="23">static_cast</name><argument_list pos:line="167" pos:column="34">&lt;<argument><expr><name pos:line="167" pos:column="35">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="167" pos:column="40">(<argument><expr><call><name pos:line="167" pos:column="41">tolower</name><argument_list pos:line="167" pos:column="48">(<argument><expr><name><name pos:line="167" pos:column="49">styler</name><index pos:line="167" pos:column="55">[<expr><name pos:line="167" pos:column="56">startPos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="168" pos:column="9">bool</name></type> <name pos:line="168" pos:column="14">foldCompact</name> <init pos:line="168" pos:column="26">= <expr><call><name><name pos:line="168" pos:column="28">styler</name><op:operator pos:line="168" pos:column="34">.</op:operator><name pos:line="168" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="168" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="168" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="168" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="168" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="168" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="169" pos:column="9">int</name></type> <name pos:line="169" pos:column="13">styleNext</name> <init pos:line="169" pos:column="23">= <expr><call><name><name pos:line="169" pos:column="25">styler</name><op:operator pos:line="169" pos:column="31">.</op:operator><name pos:line="169" pos:column="32">StyleAt</name></name><argument_list pos:line="169" pos:column="39">(<argument><expr><name pos:line="169" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="170" pos:column="9">char</name></type> <name><name pos:line="170" pos:column="14">s</name><index pos:line="170" pos:column="15">[<expr><lit:literal type="number" pos:line="170" pos:column="16">10</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<for pos:line="172" pos:column="9">for (<init><decl><type><name pos:line="172" pos:column="14">unsigned</name> <name pos:line="172" pos:column="23">int</name></type> <name pos:line="172" pos:column="27">i</name> <init pos:line="172" pos:column="29">= <expr><name pos:line="172" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="172" pos:column="41">i</name> <op:operator pos:line="172" pos:column="43">&lt;</op:operator> <name pos:line="172" pos:column="45">lengthDoc</name></expr>;</condition> <incr><expr><name pos:line="172" pos:column="56">i</name><op:operator pos:line="172" pos:column="57">++</op:operator></expr></incr>) <block pos:line="172" pos:column="61">{
		<decl_stmt><decl><type><name pos:line="173" pos:column="17">char</name></type> <name pos:line="173" pos:column="22">ch</name> <init pos:line="173" pos:column="25">= <expr><call><name><name pos:line="173" pos:column="27">static_cast</name><argument_list pos:line="173" pos:column="38">&lt;<argument><expr><name pos:line="173" pos:column="39">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="173" pos:column="44">(<argument><expr><call><name pos:line="173" pos:column="45">tolower</name><argument_list pos:line="173" pos:column="52">(<argument><expr><name pos:line="173" pos:column="53">chNext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="174" pos:column="17">chNext</name> <op:operator pos:line="174" pos:column="24">=</op:operator> <call><name><name pos:line="174" pos:column="26">static_cast</name><argument_list pos:line="174" pos:column="37">&lt;<argument><expr><name pos:line="174" pos:column="38">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="174" pos:column="43">(<argument><expr><call><name pos:line="174" pos:column="44">tolower</name><argument_list pos:line="174" pos:column="51">(<argument><expr><call><name><name pos:line="174" pos:column="52">styler</name><op:operator pos:line="174" pos:column="58">.</op:operator><name pos:line="174" pos:column="59">SafeGetCharAt</name></name><argument_list pos:line="174" pos:column="72">(<argument><expr><name pos:line="174" pos:column="73">i</name> <op:operator pos:line="174" pos:column="75">+</op:operator> <lit:literal type="number" pos:line="174" pos:column="77">1</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="175" pos:column="17">int</name></type> <name pos:line="175" pos:column="21">style</name> <init pos:line="175" pos:column="27">= <expr><name pos:line="175" pos:column="29">styleNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="176" pos:column="17">styleNext</name> <op:operator pos:line="176" pos:column="27">=</op:operator> <call><name><name pos:line="176" pos:column="29">styler</name><op:operator pos:line="176" pos:column="35">.</op:operator><name pos:line="176" pos:column="36">StyleAt</name></name><argument_list pos:line="176" pos:column="43">(<argument><expr><name pos:line="176" pos:column="44">i</name> <op:operator pos:line="176" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="176" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="177" pos:column="17">bool</name></type> <name pos:line="177" pos:column="22">atEOL</name> <init pos:line="177" pos:column="28">= <expr><op:operator pos:line="177" pos:column="30">(</op:operator><name pos:line="177" pos:column="31">ch</name> <op:operator pos:line="177" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="177" pos:column="37">'\r'</lit:literal> <op:operator pos:line="177" pos:column="42">&amp;&amp;</op:operator> <name pos:line="177" pos:column="45">chNext</name> <op:operator pos:line="177" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="177" pos:column="55">'\n'</lit:literal><op:operator pos:line="177" pos:column="59">)</op:operator> <op:operator pos:line="177" pos:column="61">||</op:operator> <op:operator pos:line="177" pos:column="64">(</op:operator><name pos:line="177" pos:column="65">ch</name> <op:operator pos:line="177" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="177" pos:column="71">'\n'</lit:literal><op:operator pos:line="177" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="178" pos:column="17">if <condition pos:line="178" pos:column="20">(<expr><name pos:line="178" pos:column="21">style</name> <op:operator pos:line="178" pos:column="27">==</op:operator> <name pos:line="178" pos:column="30">SCE_AVE_WORD</name></expr>)</condition><then pos:line="178" pos:column="43"> <block pos:line="178" pos:column="44">{
			<if pos:line="179" pos:column="25">if <condition pos:line="179" pos:column="28">(<expr><name pos:line="179" pos:column="29">ch</name> <op:operator pos:line="179" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="35">'t'</lit:literal> <op:operator pos:line="179" pos:column="39">||</op:operator> <name pos:line="179" pos:column="42">ch</name> <op:operator pos:line="179" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="48">'f'</lit:literal> <op:operator pos:line="179" pos:column="52">||</op:operator> <name pos:line="179" pos:column="55">ch</name> <op:operator pos:line="179" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="61">'w'</lit:literal> <op:operator pos:line="179" pos:column="65">||</op:operator> <name pos:line="179" pos:column="68">ch</name> <op:operator pos:line="179" pos:column="71">==</op:operator> <lit:literal type="char" pos:line="179" pos:column="74">'e'</lit:literal></expr>)</condition><then pos:line="179" pos:column="78"> <block pos:line="179" pos:column="79">{
				<for pos:line="180" pos:column="33">for (<init><decl><type><name pos:line="180" pos:column="38">unsigned</name> <name pos:line="180" pos:column="47">int</name></type> <name pos:line="180" pos:column="51">j</name> <init pos:line="180" pos:column="53">= <expr><lit:literal type="number" pos:line="180" pos:column="55">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="180" pos:column="58">j</name> <op:operator pos:line="180" pos:column="60">&lt;</op:operator> <lit:literal type="number" pos:line="180" pos:column="62">6</lit:literal></expr>;</condition> <incr><expr><name pos:line="180" pos:column="65">j</name><op:operator pos:line="180" pos:column="66">++</op:operator></expr></incr>) <block pos:line="180" pos:column="70">{
					<if pos:line="181" pos:column="41">if <condition pos:line="181" pos:column="44">(<expr><op:operator pos:line="181" pos:column="45">!</op:operator><call><name pos:line="181" pos:column="46">iswordchar</name><argument_list pos:line="181" pos:column="56">(<argument><expr><name><name pos:line="181" pos:column="57">styler</name><index pos:line="181" pos:column="63">[<expr><name pos:line="181" pos:column="64">i</name> <op:operator pos:line="181" pos:column="66">+</op:operator> <name pos:line="181" pos:column="68">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="181" pos:column="72"> <block pos:line="181" pos:column="73">{
						<break pos:line="182" pos:column="49">break;</break>
					}</block></then></if>
					<expr_stmt><expr><name><name pos:line="184" pos:column="41">s</name><index pos:line="184" pos:column="42">[<expr><name pos:line="184" pos:column="43">j</name></expr>]</index></name> <op:operator pos:line="184" pos:column="46">=</op:operator> <call><name><name pos:line="184" pos:column="48">static_cast</name><argument_list pos:line="184" pos:column="59">&lt;<argument><expr><name pos:line="184" pos:column="60">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="184" pos:column="65">(<argument><expr><call><name pos:line="184" pos:column="66">tolower</name><argument_list pos:line="184" pos:column="73">(<argument><expr><name><name pos:line="184" pos:column="74">styler</name><index pos:line="184" pos:column="80">[<expr><name pos:line="184" pos:column="81">i</name> <op:operator pos:line="184" pos:column="83">+</op:operator> <name pos:line="184" pos:column="85">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="185" pos:column="41">s</name><index pos:line="185" pos:column="42">[<expr><name pos:line="185" pos:column="43">j</name> <op:operator pos:line="185" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="185" pos:column="47">1</lit:literal></expr>]</index></name> <op:operator pos:line="185" pos:column="50">=</op:operator> <lit:literal type="char" pos:line="185" pos:column="52">'\0'</lit:literal></expr>;</expr_stmt>
				}</block></for>

				<if pos:line="188" pos:column="33">if <condition pos:line="188" pos:column="36">(<expr><op:operator pos:line="188" pos:column="37">(</op:operator><call><name pos:line="188" pos:column="38">strcmp</name><argument_list pos:line="188" pos:column="44">(<argument><expr><name pos:line="188" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="48">"then"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="188" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="188" pos:column="59">0</lit:literal><op:operator pos:line="188" pos:column="60">)</op:operator> <op:operator pos:line="188" pos:column="62">||</op:operator> <op:operator pos:line="188" pos:column="65">(</op:operator><call><name pos:line="188" pos:column="66">strcmp</name><argument_list pos:line="188" pos:column="72">(<argument><expr><name pos:line="188" pos:column="73">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="76">"for"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="188" pos:column="83">==</op:operator> <lit:literal type="number" pos:line="188" pos:column="86">0</lit:literal><op:operator pos:line="188" pos:column="87">)</op:operator> <op:operator pos:line="188" pos:column="89">||</op:operator> <op:operator pos:line="188" pos:column="92">(</op:operator><call><name pos:line="188" pos:column="93">strcmp</name><argument_list pos:line="188" pos:column="99">(<argument><expr><name pos:line="188" pos:column="100">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="188" pos:column="103">"while"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="188" pos:column="112">==</op:operator> <lit:literal type="number" pos:line="188" pos:column="115">0</lit:literal><op:operator pos:line="188" pos:column="116">)</op:operator></expr>)</condition><then pos:line="188" pos:column="118"> <block pos:line="188" pos:column="119">{
					<expr_stmt><expr><name pos:line="189" pos:column="41">levelCurrent</name><op:operator pos:line="189" pos:column="53">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
				<if pos:line="191" pos:column="33">if <condition pos:line="191" pos:column="36">(<expr><op:operator pos:line="191" pos:column="37">(</op:operator><call><name pos:line="191" pos:column="38">strcmp</name><argument_list pos:line="191" pos:column="44">(<argument><expr><name pos:line="191" pos:column="45">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="191" pos:column="48">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="55">==</op:operator> <lit:literal type="number" pos:line="191" pos:column="58">0</lit:literal><op:operator pos:line="191" pos:column="59">)</op:operator> <op:operator pos:line="191" pos:column="61">||</op:operator> <op:operator pos:line="191" pos:column="64">(</op:operator><call><name pos:line="191" pos:column="65">strcmp</name><argument_list pos:line="191" pos:column="71">(<argument><expr><name pos:line="191" pos:column="72">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="191" pos:column="75">"elseif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="191" pos:column="85">==</op:operator> <lit:literal type="number" pos:line="191" pos:column="88">0</lit:literal><op:operator pos:line="191" pos:column="89">)</op:operator></expr>)</condition><then pos:line="191" pos:column="91"> <block pos:line="191" pos:column="92">{
					<comment type="line" pos:line="192" pos:column="41">// Normally "elseif" and "then" will be on the same line and will cancel</comment>
					<comment type="line" pos:line="193" pos:column="41">// each other out.  // As implemented, this does not support fold.at.else.</comment>
					<expr_stmt><expr><name pos:line="194" pos:column="41">levelCurrent</name><op:operator pos:line="194" pos:column="53">--</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></then> <else pos:line="197" pos:column="19">else <if pos:line="197" pos:column="24">if <condition pos:line="197" pos:column="27">(<expr><name pos:line="197" pos:column="28">style</name> <op:operator pos:line="197" pos:column="34">==</op:operator> <name pos:line="197" pos:column="37">SCE_AVE_OPERATOR</name></expr>)</condition><then pos:line="197" pos:column="54"> <block pos:line="197" pos:column="55">{
			<if pos:line="198" pos:column="25">if <condition pos:line="198" pos:column="28">(<expr><name pos:line="198" pos:column="29">ch</name> <op:operator pos:line="198" pos:column="32">==</op:operator> <lit:literal type="char" pos:line="198" pos:column="35">'{'</lit:literal> <op:operator pos:line="198" pos:column="39">||</op:operator> <name pos:line="198" pos:column="42">ch</name> <op:operator pos:line="198" pos:column="45">==</op:operator> <lit:literal type="char" pos:line="198" pos:column="48">'('</lit:literal></expr>)</condition><then pos:line="198" pos:column="52"> <block pos:line="198" pos:column="53">{
				<expr_stmt><expr><name pos:line="199" pos:column="33">levelCurrent</name><op:operator pos:line="199" pos:column="45">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="200" pos:column="27">else <if pos:line="200" pos:column="32">if <condition pos:line="200" pos:column="35">(<expr><name pos:line="200" pos:column="36">ch</name> <op:operator pos:line="200" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="42">'}'</lit:literal> <op:operator pos:line="200" pos:column="46">||</op:operator> <name pos:line="200" pos:column="49">ch</name> <op:operator pos:line="200" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="200" pos:column="55">')'</lit:literal></expr>)</condition><then pos:line="200" pos:column="59"> <block pos:line="200" pos:column="60">{
				<expr_stmt><expr><name pos:line="201" pos:column="33">levelCurrent</name><op:operator pos:line="201" pos:column="45">--</op:operator></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if></else></if>

		<if pos:line="205" pos:column="17">if <condition pos:line="205" pos:column="20">(<expr><name pos:line="205" pos:column="21">atEOL</name></expr>)</condition><then pos:line="205" pos:column="27"> <block pos:line="205" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="206" pos:column="25">int</name></type> <name pos:line="206" pos:column="29">lev</name> <init pos:line="206" pos:column="33">= <expr><name pos:line="206" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="207" pos:column="25">if <condition pos:line="207" pos:column="28">(<expr><name pos:line="207" pos:column="29">visibleChars</name> <op:operator pos:line="207" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="207" pos:column="45">0</lit:literal> <op:operator pos:line="207" pos:column="47">&amp;&amp;</op:operator> <name pos:line="207" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="207" pos:column="62"> <block pos:line="207" pos:column="63">{
				<expr_stmt><expr><name pos:line="208" pos:column="33">lev</name> <op:operator pos:line="208" pos:column="37">|=</op:operator> <name pos:line="208" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="210" pos:column="25">if <condition pos:line="210" pos:column="28">(<expr><op:operator pos:line="210" pos:column="29">(</op:operator><name pos:line="210" pos:column="30">levelCurrent</name> <op:operator pos:line="210" pos:column="43">&gt;</op:operator> <name pos:line="210" pos:column="45">levelPrev</name><op:operator pos:line="210" pos:column="54">)</op:operator> <op:operator pos:line="210" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="210" pos:column="59">(</op:operator><name pos:line="210" pos:column="60">visibleChars</name> <op:operator pos:line="210" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="210" pos:column="75">0</lit:literal><op:operator pos:line="210" pos:column="76">)</op:operator></expr>)</condition><then pos:line="210" pos:column="78"> <block pos:line="210" pos:column="79">{
				<expr_stmt><expr><name pos:line="211" pos:column="33">lev</name> <op:operator pos:line="211" pos:column="37">|=</op:operator> <name pos:line="211" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><name pos:line="213" pos:column="29">lev</name> <op:operator pos:line="213" pos:column="33">!=</op:operator> <call><name><name pos:line="213" pos:column="36">styler</name><op:operator pos:line="213" pos:column="42">.</op:operator><name pos:line="213" pos:column="43">LevelAt</name></name><argument_list pos:line="213" pos:column="50">(<argument><expr><name pos:line="213" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="213" pos:column="64"> <block pos:line="213" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="214" pos:column="33">styler</name><op:operator pos:line="214" pos:column="39">.</op:operator><name pos:line="214" pos:column="40">SetLevel</name></name><argument_list pos:line="214" pos:column="48">(<argument><expr><name pos:line="214" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="216" pos:column="25">lineCurrent</name><op:operator pos:line="216" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="217" pos:column="25">levelPrev</name> <op:operator pos:line="217" pos:column="35">=</op:operator> <name pos:line="217" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="218" pos:column="25">visibleChars</name> <op:operator pos:line="218" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="218" pos:column="40">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="220" pos:column="17">if <condition pos:line="220" pos:column="20">(<expr><op:operator pos:line="220" pos:column="21">!</op:operator><call><name pos:line="220" pos:column="22">isspacechar</name><argument_list pos:line="220" pos:column="33">(<argument><expr><name pos:line="220" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="220" pos:column="38"> <block pos:line="220" pos:column="39">{
			<expr_stmt><expr><name pos:line="221" pos:column="25">visibleChars</name><op:operator pos:line="221" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<comment type="line" pos:line="224" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>

	<decl_stmt><decl><type><name pos:line="226" pos:column="9">int</name></type> <name pos:line="226" pos:column="13">flagsNext</name> <init pos:line="226" pos:column="23">= <expr><call><name><name pos:line="226" pos:column="25">styler</name><op:operator pos:line="226" pos:column="31">.</op:operator><name pos:line="226" pos:column="32">LevelAt</name></name><argument_list pos:line="226" pos:column="39">(<argument><expr><name pos:line="226" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="226" pos:column="53">&amp;</op:operator> <op:operator pos:line="226" pos:column="55">~</op:operator><name pos:line="226" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="227" pos:column="9">styler</name><op:operator pos:line="227" pos:column="15">.</op:operator><name pos:line="227" pos:column="16">SetLevel</name></name><argument_list pos:line="227" pos:column="24">(<argument><expr><name pos:line="227" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="227" pos:column="38">levelPrev</name> <op:operator pos:line="227" pos:column="48">|</op:operator> <name pos:line="227" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name pos:line="230" pos:column="1">LexerModule</name></type> <name pos:line="230" pos:column="13">lmAVE</name><argument_list pos:line="230" pos:column="18">(<argument><expr><name pos:line="230" pos:column="19">SCLEX_AVE</name></expr></argument>, <argument><expr><name pos:line="230" pos:column="30">ColouriseAveDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="230" pos:column="47">"ave"</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="54">FoldAveDoc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
