<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\MISC\Process\ProcessAvecThread\Process.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"process.h"</lit:literal></cpp:file></cpp:include>
<comment type="line" pos:line="31" pos:column="1">//#include "SysMsg.h"</comment>

<function><type><name pos:line="33" pos:column="1">BOOL</name></type> <name><name pos:line="33" pos:column="6">Process</name><op:operator pos:line="33" pos:column="13">::</op:operator><name pos:line="33" pos:column="15">run</name></name><parameter_list pos:line="33" pos:column="18">()</parameter_list>
<block pos:line="34" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">BOOL</name></type> <name pos:line="35" pos:column="14">result</name> <init pos:line="35" pos:column="21">= <expr><name pos:line="35" pos:column="23">TRUE</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="37" pos:column="9">// stdout &amp; stderr pipes for process to write</comment>
	<decl_stmt><decl><type><name pos:line="38" pos:column="9">HANDLE</name></type> <name pos:line="38" pos:column="16">hPipeOutW</name> <init pos:line="38" pos:column="26">= <expr><name pos:line="38" pos:column="28">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="39" pos:column="9">HANDLE</name></type> <name pos:line="39" pos:column="16">hPipeErrW</name> <init pos:line="39" pos:column="26">= <expr><name pos:line="39" pos:column="28">NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="41" pos:column="9">HANDLE</name></type> <name pos:line="41" pos:column="16">hListenerStdOutThread</name> <init pos:line="41" pos:column="38">= <expr><name pos:line="41" pos:column="40">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="42" pos:column="9">HANDLE</name></type> <name pos:line="42" pos:column="16">hListenerStdErrThread</name> <init pos:line="42" pos:column="38">= <expr><name pos:line="42" pos:column="40">NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="44" pos:column="9">HANDLE</name></type> <name><name pos:line="44" pos:column="16">hListenerEvent</name><index pos:line="44" pos:column="30">[<expr><lit:literal type="number" pos:line="44" pos:column="31">2</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="45" pos:column="9">hListenerEvent</name><index pos:line="45" pos:column="23">[<expr><lit:literal type="number" pos:line="45" pos:column="24">0</lit:literal></expr>]</index></name> <op:operator pos:line="45" pos:column="27">=</op:operator> <name pos:line="45" pos:column="29">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="46" pos:column="9">hListenerEvent</name><index pos:line="46" pos:column="23">[<expr><lit:literal type="number" pos:line="46" pos:column="24">1</lit:literal></expr>]</index></name> <op:operator pos:line="46" pos:column="27">=</op:operator> <name pos:line="46" pos:column="29">NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="48" pos:column="9">SECURITY_ATTRIBUTES</name></type> <name pos:line="48" pos:column="29">sa</name> <init pos:line="48" pos:column="32">= <expr><block pos:line="48" pos:column="34">{<expr><sizeof pos:line="48" pos:column="35">sizeof<argument_list pos:line="48" pos:column="41">(<argument><expr><name pos:line="48" pos:column="42">SECURITY_ATTRIBUTES</name></expr></argument>)</argument_list></sizeof></expr>, <expr><name pos:line="48" pos:column="64">NULL</name></expr>, <expr><name pos:line="48" pos:column="70">TRUE</name></expr> }</block></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="48" pos:column="78">// inheritable handle</comment>

	<try pos:line="50" pos:column="9">try <block pos:line="50" pos:column="13">{
		<comment type="line" pos:line="51" pos:column="17">// Create stdout pipe</comment>
		<if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><op:operator pos:line="52" pos:column="21">!</op:operator><call><name><op:operator pos:line="52" pos:column="22">::</op:operator><name pos:line="52" pos:column="24">CreatePipe</name></name><argument_list pos:line="52" pos:column="34">(<argument><expr><op:operator pos:line="52" pos:column="35">&amp;</op:operator><name pos:line="52" pos:column="36">_hPipeOutR</name></expr></argument>, <argument><expr><op:operator pos:line="52" pos:column="48">&amp;</op:operator><name pos:line="52" pos:column="49">hPipeOutW</name></expr></argument>, <argument><expr><op:operator pos:line="52" pos:column="60">&amp;</op:operator><name pos:line="52" pos:column="61">sa</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="52" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="52" pos:column="68">
			<expr_stmt><expr><call><name pos:line="53" pos:column="25">error</name><argument_list pos:line="53" pos:column="30">(<argument><expr><call><name pos:line="53" pos:column="31">TEXT</name><argument_list pos:line="53" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="36">"CreatePipe"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="53" pos:column="51">result</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="53" pos:column="59">1000</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		
		<comment type="line" pos:line="55" pos:column="17">// Create stderr pipe</comment>
		<if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><op:operator pos:line="56" pos:column="21">!</op:operator><call><name><op:operator pos:line="56" pos:column="22">::</op:operator><name pos:line="56" pos:column="24">CreatePipe</name></name><argument_list pos:line="56" pos:column="34">(<argument><expr><op:operator pos:line="56" pos:column="35">&amp;</op:operator><name pos:line="56" pos:column="36">_hPipeErrR</name></expr></argument>, <argument><expr><op:operator pos:line="56" pos:column="48">&amp;</op:operator><name pos:line="56" pos:column="49">hPipeErrW</name></expr></argument>, <argument><expr><op:operator pos:line="56" pos:column="60">&amp;</op:operator><name pos:line="56" pos:column="61">sa</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="56" pos:column="65">0</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="56" pos:column="68">
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">error</name><argument_list pos:line="57" pos:column="30">(<argument><expr><call><name pos:line="57" pos:column="31">TEXT</name><argument_list pos:line="57" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="57" pos:column="36">"CreatePipe"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="57" pos:column="51">result</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="57" pos:column="59">1001</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<decl_stmt><decl><type><name pos:line="59" pos:column="17">STARTUPINFO</name></type> <name pos:line="59" pos:column="29">startup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="60" pos:column="17">PROCESS_INFORMATION</name></type> <name pos:line="60" pos:column="37">procinfo</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="61" pos:column="17">::</op:operator><name pos:line="61" pos:column="19">ZeroMemory</name></name><argument_list pos:line="61" pos:column="29">(<argument><expr><op:operator pos:line="61" pos:column="30">&amp;</op:operator><name pos:line="61" pos:column="31">startup</name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="40">sizeof<argument_list pos:line="61" pos:column="46">(<argument><expr><name pos:line="61" pos:column="47">startup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="62" pos:column="17">startup</name><op:operator pos:line="62" pos:column="24">.</op:operator><name pos:line="62" pos:column="25">cb</name></name> <op:operator pos:line="62" pos:column="28">=</op:operator> <sizeof pos:line="62" pos:column="30">sizeof<argument_list pos:line="62" pos:column="36">(<argument><expr><name pos:line="62" pos:column="37">startup</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="63" pos:column="17">startup</name><op:operator pos:line="63" pos:column="24">.</op:operator><name pos:line="63" pos:column="25">dwFlags</name></name> <op:operator pos:line="63" pos:column="33">=</op:operator> <name pos:line="63" pos:column="35">STARTF_USESHOWWINDOW</name> <op:operator pos:line="63" pos:column="56">|</op:operator> <name pos:line="63" pos:column="58">STARTF_USESTDHANDLES</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="64" pos:column="17">startup</name><op:operator pos:line="64" pos:column="24">.</op:operator><name pos:line="64" pos:column="25">wShowWindow</name></name> <op:operator pos:line="64" pos:column="37">=</op:operator> <name pos:line="64" pos:column="39">SW_HIDE</name></expr>;</expr_stmt> <comment type="line" pos:line="64" pos:column="48">// hidden console window</comment>
		<expr_stmt><expr><name><name pos:line="65" pos:column="17">startup</name><op:operator pos:line="65" pos:column="24">.</op:operator><name pos:line="65" pos:column="25">hStdInput</name></name> <op:operator pos:line="65" pos:column="35">=</op:operator> <name pos:line="65" pos:column="37">NULL</name></expr>;</expr_stmt> <comment type="line" pos:line="65" pos:column="43">// not used</comment>
		<expr_stmt><expr><name><name pos:line="66" pos:column="17">startup</name><op:operator pos:line="66" pos:column="24">.</op:operator><name pos:line="66" pos:column="25">hStdOutput</name></name> <op:operator pos:line="66" pos:column="36">=</op:operator> <name pos:line="66" pos:column="38">hPipeOutW</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="67" pos:column="17">startup</name><op:operator pos:line="67" pos:column="24">.</op:operator><name pos:line="67" pos:column="25">hStdError</name></name> <op:operator pos:line="67" pos:column="35">=</op:operator> <name pos:line="67" pos:column="37">hPipeErrW</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name pos:line="69" pos:column="17">BOOL</name></type> <name pos:line="69" pos:column="22">started</name> <init pos:line="69" pos:column="30">= <expr><call><name><op:operator pos:line="69" pos:column="32">::</op:operator><name pos:line="69" pos:column="34">CreateProcess</name></name><argument_list pos:line="69" pos:column="47">(<argument><expr><name pos:line="69" pos:column="48">NULL</name></expr></argument>,        <comment type="line" pos:line="69" pos:column="61">// command is part of input string</comment>
						<argument><expr><name pos:line="70" pos:column="49">_command</name></expr></argument>,         <comment type="line" pos:line="70" pos:column="67">// (writeable) command string</comment>
						<argument><expr><name pos:line="71" pos:column="49">NULL</name></expr></argument>,        <comment type="line" pos:line="71" pos:column="62">// process security</comment>
						<argument><expr><name pos:line="72" pos:column="49">NULL</name></expr></argument>,        <comment type="line" pos:line="72" pos:column="62">// thread security</comment>
						<argument><expr><name pos:line="73" pos:column="49">TRUE</name></expr></argument>,        <comment type="line" pos:line="73" pos:column="62">// inherit handles flag</comment>
						<argument><expr><name pos:line="74" pos:column="49">CREATE_SUSPENDED</name></expr></argument>,           <comment type="line" pos:line="74" pos:column="77">// flags</comment>
						<argument><expr><name pos:line="75" pos:column="49">NULL</name></expr></argument>,        <comment type="line" pos:line="75" pos:column="62">// inherit environment</comment>
						<argument><expr><name pos:line="76" pos:column="49">_curDir</name></expr></argument>,        <comment type="line" pos:line="76" pos:column="65">// inherit directory</comment>
						<argument><expr><op:operator pos:line="77" pos:column="49">&amp;</op:operator><name pos:line="77" pos:column="50">startup</name></expr></argument>,    <comment type="line" pos:line="77" pos:column="62">// STARTUPINFO</comment>
						<argument><expr><op:operator pos:line="78" pos:column="49">&amp;</op:operator><name pos:line="78" pos:column="50">procinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="78" pos:column="62">// PROCESS_INFORMATION</comment>
		
		<expr_stmt><expr><name pos:line="80" pos:column="17">_hProcess</name> <op:operator pos:line="80" pos:column="27">=</op:operator> <name><name pos:line="80" pos:column="29">procinfo</name><op:operator pos:line="80" pos:column="37">.</op:operator><name pos:line="80" pos:column="38">hProcess</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="81" pos:column="17">_hProcessThread</name> <op:operator pos:line="81" pos:column="33">=</op:operator> <name><name pos:line="81" pos:column="35">procinfo</name><op:operator pos:line="81" pos:column="43">.</op:operator><name pos:line="81" pos:column="44">hThread</name></name></expr>;</expr_stmt>

		<if pos:line="83" pos:column="17">if<condition pos:line="83" pos:column="19">(<expr><op:operator pos:line="83" pos:column="20">!</op:operator><name pos:line="83" pos:column="21">started</name></expr>)</condition><then pos:line="83" pos:column="29">
			<expr_stmt><expr><call><name pos:line="84" pos:column="25">error</name><argument_list pos:line="84" pos:column="30">(<argument><expr><call><name pos:line="84" pos:column="31">TEXT</name><argument_list pos:line="84" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="36">"CreateProcess"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="84" pos:column="54">result</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="84" pos:column="62">1002</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><name><name pos:line="86" pos:column="17">hListenerEvent</name><index pos:line="86" pos:column="31">[<expr><lit:literal type="number" pos:line="86" pos:column="32">0</lit:literal></expr>]</index></name> <op:operator pos:line="86" pos:column="35">=</op:operator> <call><name><op:operator pos:line="86" pos:column="37">::</op:operator><name pos:line="86" pos:column="39">CreateEvent</name></name><argument_list pos:line="86" pos:column="50">(<argument><expr><name pos:line="86" pos:column="51">NULL</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="57">FALSE</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="64">FALSE</name></expr></argument>, <argument><expr><call><name pos:line="86" pos:column="71">TEXT</name><argument_list pos:line="86" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="86" pos:column="76">"listenerEvent"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="87" pos:column="17">if<condition pos:line="87" pos:column="19">(<expr><op:operator pos:line="87" pos:column="20">!</op:operator><name><name pos:line="87" pos:column="21">hListenerEvent</name><index pos:line="87" pos:column="35">[<expr><lit:literal type="number" pos:line="87" pos:column="36">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="87" pos:column="39">
			<expr_stmt><expr><call><name pos:line="88" pos:column="25">error</name><argument_list pos:line="88" pos:column="30">(<argument><expr><call><name pos:line="88" pos:column="31">TEXT</name><argument_list pos:line="88" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="88" pos:column="36">"CreateEvent"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="88" pos:column="52">result</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="88" pos:column="60">1003</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><name><name pos:line="90" pos:column="17">hListenerEvent</name><index pos:line="90" pos:column="31">[<expr><lit:literal type="number" pos:line="90" pos:column="32">1</lit:literal></expr>]</index></name> <op:operator pos:line="90" pos:column="35">=</op:operator> <call><name><op:operator pos:line="90" pos:column="37">::</op:operator><name pos:line="90" pos:column="39">CreateEvent</name></name><argument_list pos:line="90" pos:column="50">(<argument><expr><name pos:line="90" pos:column="51">NULL</name></expr></argument>, <argument><expr><name pos:line="90" pos:column="57">FALSE</name></expr></argument>, <argument><expr><name pos:line="90" pos:column="64">FALSE</name></expr></argument>, <argument><expr><call><name pos:line="90" pos:column="71">TEXT</name><argument_list pos:line="90" pos:column="75">(<argument><expr><lit:literal type="string" pos:line="90" pos:column="76">"listenerStdErrEvent"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="91" pos:column="17">if<condition pos:line="91" pos:column="19">(<expr><op:operator pos:line="91" pos:column="20">!</op:operator><name><name pos:line="91" pos:column="21">hListenerEvent</name><index pos:line="91" pos:column="35">[<expr><lit:literal type="number" pos:line="91" pos:column="36">1</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="91" pos:column="39">
			<expr_stmt><expr><call><name pos:line="92" pos:column="25">error</name><argument_list pos:line="92" pos:column="30">(<argument><expr><call><name pos:line="92" pos:column="31">TEXT</name><argument_list pos:line="92" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="36">"CreateEvent"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="92" pos:column="52">result</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="92" pos:column="60">1004</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><name pos:line="94" pos:column="17">hListenerStdOutThread</name> <op:operator pos:line="94" pos:column="39">=</op:operator> <call><name><op:operator pos:line="94" pos:column="41">::</op:operator><name pos:line="94" pos:column="43">CreateThread</name></name><argument_list pos:line="94" pos:column="55">(<argument><expr><name pos:line="94" pos:column="56">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="94" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="65">staticListenerStdOut</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="87">this</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="94" pos:column="93">0</lit:literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="96">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><op:operator pos:line="95" pos:column="21">!</op:operator><name pos:line="95" pos:column="22">hListenerStdOutThread</name></expr>)</condition><then pos:line="95" pos:column="44">
			<expr_stmt><expr><call><name pos:line="96" pos:column="25">error</name><argument_list pos:line="96" pos:column="30">(<argument><expr><call><name pos:line="96" pos:column="31">TEXT</name><argument_list pos:line="96" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="96" pos:column="36">"CreateThread"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="96" pos:column="53">result</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="96" pos:column="61">1005</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		
		<expr_stmt><expr><name pos:line="98" pos:column="17">hListenerStdErrThread</name> <op:operator pos:line="98" pos:column="39">=</op:operator> <call><name><op:operator pos:line="98" pos:column="41">::</op:operator><name pos:line="98" pos:column="43">CreateThread</name></name><argument_list pos:line="98" pos:column="55">(<argument><expr><name pos:line="98" pos:column="56">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="98" pos:column="62">0</lit:literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="65">staticListenerStdErr</name></expr></argument>, <argument><expr><name pos:line="98" pos:column="87">this</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="98" pos:column="93">0</lit:literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="96">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><op:operator pos:line="99" pos:column="21">!</op:operator><name pos:line="99" pos:column="22">hListenerStdErrThread</name></expr>)</condition><then pos:line="99" pos:column="44">
			<expr_stmt><expr><call><name pos:line="100" pos:column="25">error</name><argument_list pos:line="100" pos:column="30">(<argument><expr><call><name pos:line="100" pos:column="31">TEXT</name><argument_list pos:line="100" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="100" pos:column="36">"CreateThread"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="100" pos:column="53">result</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="100" pos:column="61">1006</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><call><name><op:operator pos:line="102" pos:column="17">::</op:operator><name pos:line="102" pos:column="19">WaitForSingleObject</name></name><argument_list pos:line="102" pos:column="38">(<argument><expr><name pos:line="102" pos:column="39">_hProcess</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="50">INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="103" pos:column="17">::</op:operator><name pos:line="103" pos:column="19">WaitForMultipleObjects</name></name><argument_list pos:line="103" pos:column="41">(<argument><expr><lit:literal type="number" pos:line="103" pos:column="42">2</lit:literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="45">hListenerEvent</name></expr></argument>, <argument><expr><name pos:line="103" pos:column="61">TRUE</name></expr></argument>, <argument><expr><name pos:line="103" pos:column="67">INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block> <catch pos:line="104" pos:column="11">catch <parameter_list pos:line="104" pos:column="17">(<param><decl><type><name pos:line="104" pos:column="18">int</name></type></decl></param> <comment type="block" pos:line="104" pos:column="22">/*coderr*/</comment>)</parameter_list><block pos:line="104" pos:column="33">{}</block></catch></try>

	<comment type="line" pos:line="106" pos:column="9">// on va fermer toutes les handles</comment>
	<if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><name pos:line="107" pos:column="13">hPipeOutW</name></expr>)</condition><then pos:line="107" pos:column="23">
		<expr_stmt><expr><call><name><op:operator pos:line="108" pos:column="17">::</op:operator><name pos:line="108" pos:column="19">CloseHandle</name></name><argument_list pos:line="108" pos:column="30">(<argument><expr><name pos:line="108" pos:column="31">hPipeOutW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">hPipeErrW</name></expr>)</condition><then pos:line="109" pos:column="23">
		<expr_stmt><expr><call><name><op:operator pos:line="110" pos:column="17">::</op:operator><name pos:line="110" pos:column="19">CloseHandle</name></name><argument_list pos:line="110" pos:column="30">(<argument><expr><name pos:line="110" pos:column="31">hPipeErrW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><name pos:line="111" pos:column="13">_hPipeOutR</name></expr>)</condition><then pos:line="111" pos:column="24">
		<expr_stmt><expr><call><name><op:operator pos:line="112" pos:column="17">::</op:operator><name pos:line="112" pos:column="19">CloseHandle</name></name><argument_list pos:line="112" pos:column="30">(<argument><expr><name pos:line="112" pos:column="31">_hPipeOutR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><name pos:line="113" pos:column="13">_hPipeErrR</name></expr>)</condition><then pos:line="113" pos:column="24">
		<expr_stmt><expr><call><name><op:operator pos:line="114" pos:column="17">::</op:operator><name pos:line="114" pos:column="19">CloseHandle</name></name><argument_list pos:line="114" pos:column="30">(<argument><expr><name pos:line="114" pos:column="31">_hPipeErrR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">(<expr><name pos:line="115" pos:column="13">hListenerStdOutThread</name></expr>)</condition><then pos:line="115" pos:column="35">
		<expr_stmt><expr><call><name><op:operator pos:line="116" pos:column="17">::</op:operator><name pos:line="116" pos:column="19">CloseHandle</name></name><argument_list pos:line="116" pos:column="30">(<argument><expr><name pos:line="116" pos:column="31">hListenerStdOutThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><name pos:line="117" pos:column="13">hListenerStdErrThread</name></expr>)</condition><then pos:line="117" pos:column="35">
		<expr_stmt><expr><call><name><op:operator pos:line="118" pos:column="17">::</op:operator><name pos:line="118" pos:column="19">CloseHandle</name></name><argument_list pos:line="118" pos:column="30">(<argument><expr><name pos:line="118" pos:column="31">hListenerStdErrThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><name><name pos:line="119" pos:column="13">hListenerEvent</name><index pos:line="119" pos:column="27">[<expr><lit:literal type="number" pos:line="119" pos:column="28">0</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="119" pos:column="31">
		<expr_stmt><expr><call><name><op:operator pos:line="120" pos:column="17">::</op:operator><name pos:line="120" pos:column="19">CloseHandle</name></name><argument_list pos:line="120" pos:column="30">(<argument><expr><name><name pos:line="120" pos:column="31">hListenerEvent</name><index pos:line="120" pos:column="45">[<expr><lit:literal type="number" pos:line="120" pos:column="46">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="121" pos:column="9">if <condition pos:line="121" pos:column="12">(<expr><name><name pos:line="121" pos:column="13">hListenerEvent</name><index pos:line="121" pos:column="27">[<expr><lit:literal type="number" pos:line="121" pos:column="28">1</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="121" pos:column="31">
		<expr_stmt><expr><call><name><op:operator pos:line="122" pos:column="17">::</op:operator><name pos:line="122" pos:column="19">CloseHandle</name></name><argument_list pos:line="122" pos:column="30">(<argument><expr><name><name pos:line="122" pos:column="31">hListenerEvent</name><index pos:line="122" pos:column="45">[<expr><lit:literal type="number" pos:line="122" pos:column="46">1</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<return pos:line="124" pos:column="9">return <expr><name pos:line="124" pos:column="16">result</name></expr>;</return>
}</block></function>


<cpp:define pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="128" pos:column="9">MAX_LINE_LENGTH</name></cpp:macro> <cpp:value pos:line="128" pos:column="25">1024</cpp:value></cpp:define>

<function><type><name pos:line="130" pos:column="1">void</name></type> <name><name pos:line="130" pos:column="6">Process</name><op:operator pos:line="130" pos:column="13">::</op:operator><name pos:line="130" pos:column="15">listenerStdOut</name></name><parameter_list pos:line="130" pos:column="29">()</parameter_list>
<block pos:line="131" pos:column="1">{
	<comment type="line" pos:line="132" pos:column="9">//BOOL Result = 0;</comment>
	<comment type="line" pos:line="133" pos:column="9">//DWORD size = 0;</comment>
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">DWORD</name></type> <name pos:line="134" pos:column="15">bytesAvail</name> <init pos:line="134" pos:column="26">= <expr><lit:literal type="number" pos:line="134" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">BOOL</name></type> <name pos:line="135" pos:column="14">result</name> <init pos:line="135" pos:column="21">= <expr><lit:literal type="number" pos:line="135" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">HANDLE</name></type> <name pos:line="136" pos:column="16">hListenerEvent</name> <init pos:line="136" pos:column="31">= <expr><call><name><op:operator pos:line="136" pos:column="33">::</op:operator><name pos:line="136" pos:column="35">OpenEvent</name></name><argument_list pos:line="136" pos:column="44">(<argument><expr><name pos:line="136" pos:column="45">EVENT_ALL_ACCESS</name></expr></argument>, <argument><expr><name pos:line="136" pos:column="63">FALSE</name></expr></argument>, <argument><expr><call><name pos:line="136" pos:column="70">TEXT</name><argument_list pos:line="136" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="136" pos:column="75">"listenerEvent"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="137" pos:column="9">//FILE *fp = NULL;</comment>

	<decl_stmt><decl><type><name pos:line="139" pos:column="9">int</name></type> <name pos:line="139" pos:column="13">taille</name> <init pos:line="139" pos:column="20">= <expr><lit:literal type="number" pos:line="139" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="140" pos:column="9">TCHAR</name></type> <name><name pos:line="140" pos:column="15">bufferOut</name><index pos:line="140" pos:column="24">[<expr><name pos:line="140" pos:column="25">MAX_LINE_LENGTH</name> <op:operator pos:line="140" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="140" pos:column="43">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<comment type="line" pos:line="141" pos:column="9">//TCHAR bufferErr[MAX_LINE_LENGTH + 1];</comment>

	<decl_stmt><decl><type><name pos:line="143" pos:column="9">int</name></type> <name pos:line="143" pos:column="13">nExitCode</name> <init pos:line="143" pos:column="23">= <expr><name pos:line="143" pos:column="25">STILL_ACTIVE</name></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="145" pos:column="9">DWORD</name></type> <name pos:line="145" pos:column="15">outbytesRead</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="147" pos:column="9">::</op:operator><name pos:line="147" pos:column="11">ResumeThread</name></name><argument_list pos:line="147" pos:column="23">(<argument><expr><name pos:line="147" pos:column="24">_hProcessThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="149" pos:column="5">bool</name></type> <name pos:line="149" pos:column="10">goOn</name> <init pos:line="149" pos:column="15">= <expr><lit:literal type="boolean" pos:line="149" pos:column="17">true</lit:literal></expr></init></decl>;</decl_stmt>
	<while pos:line="150" pos:column="9">while <condition pos:line="150" pos:column="15">(<expr><name pos:line="150" pos:column="16">goOn</name></expr>)</condition>
	<block pos:line="151" pos:column="9">{ <comment type="line" pos:line="151" pos:column="11">// got data</comment>
		<expr_stmt><expr><call><name pos:line="152" pos:column="17">memset</name><argument_list pos:line="152" pos:column="23">(<argument><expr><name pos:line="152" pos:column="24">bufferOut</name></expr></argument>,<argument><expr><lit:literal type="number" pos:line="152" pos:column="34">0x00</lit:literal></expr></argument>,<argument><expr><name pos:line="152" pos:column="39">MAX_LINE_LENGTH</name> <op:operator pos:line="152" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="152" pos:column="57">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		<comment type="line" pos:line="153" pos:column="17">//memset(bufferErr,0x00,MAX_LINE_LENGTH + 1);</comment>
		<expr_stmt><expr><name pos:line="154" pos:column="17">taille</name> <op:operator pos:line="154" pos:column="24">=</op:operator> <sizeof pos:line="154" pos:column="26">sizeof<argument_list pos:line="154" pos:column="32">(<argument><expr><name pos:line="154" pos:column="33">bufferOut</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="154" pos:column="44">-</op:operator> <sizeof pos:line="154" pos:column="46">sizeof<argument_list pos:line="154" pos:column="52">(<argument><expr><name pos:line="154" pos:column="53">TCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name pos:line="156" pos:column="17">Sleep</name><argument_list pos:line="156" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="156" pos:column="23">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="158" pos:column="17">if <condition pos:line="158" pos:column="20">(<expr><op:operator pos:line="158" pos:column="21">!</op:operator><call><name><op:operator pos:line="158" pos:column="22">::</op:operator><name pos:line="158" pos:column="24">PeekNamedPipe</name></name><argument_list pos:line="158" pos:column="37">(<argument><expr><name pos:line="158" pos:column="38">_hPipeOutR</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="50">bufferOut</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="61">taille</name></expr></argument>, <argument><expr><op:operator pos:line="158" pos:column="69">&amp;</op:operator><name pos:line="158" pos:column="70">outbytesRead</name></expr></argument>, <argument><expr><op:operator pos:line="158" pos:column="84">&amp;</op:operator><name pos:line="158" pos:column="85">bytesAvail</name></expr></argument>, <argument><expr><name pos:line="158" pos:column="97">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="158" pos:column="103"> 
		<block pos:line="159" pos:column="17">{
			<expr_stmt><expr><name pos:line="160" pos:column="25">bytesAvail</name> <op:operator pos:line="160" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="160" pos:column="38">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="161" pos:column="13">goOn</name> <op:operator pos:line="161" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="161" pos:column="20">false</lit:literal></expr>;</expr_stmt>
			<break pos:line="162" pos:column="25">break;</break>
		}</block></then></if>

		<if pos:line="165" pos:column="17">if<condition pos:line="165" pos:column="19">(<expr><name pos:line="165" pos:column="20">outbytesRead</name></expr>)</condition><then pos:line="165" pos:column="33">
		<block pos:line="166" pos:column="17">{
			<expr_stmt><expr><name pos:line="167" pos:column="25">result</name> <op:operator pos:line="167" pos:column="32">=</op:operator> <call><name><op:operator pos:line="167" pos:column="34">::</op:operator> <name pos:line="167" pos:column="37">ReadFile</name></name><argument_list pos:line="167" pos:column="45">(<argument><expr><name pos:line="167" pos:column="46">_hPipeOutR</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="58">bufferOut</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="69">taille</name></expr></argument>, <argument><expr><op:operator pos:line="167" pos:column="77">&amp;</op:operator><name pos:line="167" pos:column="78">outbytesRead</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="92">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="168" pos:column="25">if <condition pos:line="168" pos:column="28">(<expr><op:operator pos:line="168" pos:column="29">(</op:operator><op:operator pos:line="168" pos:column="30">!</op:operator><name pos:line="168" pos:column="31">result</name><op:operator pos:line="168" pos:column="37">)</op:operator> <op:operator pos:line="168" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="168" pos:column="42">(</op:operator><name pos:line="168" pos:column="43">outbytesRead</name> <op:operator pos:line="168" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="168" pos:column="59">0</lit:literal><op:operator pos:line="168" pos:column="60">)</op:operator></expr>)</condition><then pos:line="168" pos:column="62">
            <block pos:line="169" pos:column="13">{
                <expr_stmt><expr><name pos:line="170" pos:column="17">goOn</name> <op:operator pos:line="170" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="170" pos:column="24">false</lit:literal></expr>;</expr_stmt>
				<break pos:line="171" pos:column="33">break;</break>
            }</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="174" pos:column="17">//outbytesRead = strlen(bufferOut);</comment>
		<expr_stmt><expr><name><name pos:line="175" pos:column="17">bufferOut</name><index pos:line="175" pos:column="26">[<expr><name pos:line="175" pos:column="27">outbytesRead</name></expr>]</index></name> <op:operator pos:line="175" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="175" pos:column="43">'\0'</lit:literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="176" pos:column="17">generic_string</name></type> <name pos:line="176" pos:column="32">s</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="177" pos:column="17">s</name><op:operator pos:line="177" pos:column="18">.</op:operator><name pos:line="177" pos:column="19">assign</name></name><argument_list pos:line="177" pos:column="25">(<argument><expr><name pos:line="177" pos:column="26">bufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="178" pos:column="17">_stdoutStr</name> <op:operator pos:line="178" pos:column="28">+=</op:operator> <name pos:line="178" pos:column="31">s</name></expr>;</expr_stmt>

		<if pos:line="180" pos:column="17">if <condition pos:line="180" pos:column="20">(<expr><call><name><op:operator pos:line="180" pos:column="21">::</op:operator><name pos:line="180" pos:column="23">GetExitCodeProcess</name></name><argument_list pos:line="180" pos:column="41">(<argument><expr><name pos:line="180" pos:column="42">_hProcess</name></expr></argument>, <argument><expr><op:operator pos:line="180" pos:column="53">(</op:operator><name pos:line="180" pos:column="54">unsigned</name> <name pos:line="180" pos:column="63">long</name><op:operator pos:line="180" pos:column="67">*</op:operator><op:operator pos:line="180" pos:column="68">)</op:operator><op:operator pos:line="180" pos:column="69">&amp;</op:operator><name pos:line="180" pos:column="70">nExitCode</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="180" pos:column="81">
		<block pos:line="181" pos:column="17">{
			<if pos:line="182" pos:column="25">if <condition pos:line="182" pos:column="28">(<expr><name pos:line="182" pos:column="29">nExitCode</name> <op:operator pos:line="182" pos:column="39">!=</op:operator> <name pos:line="182" pos:column="42">STILL_ACTIVE</name></expr>)</condition><then pos:line="182" pos:column="55">
            <block pos:line="183" pos:column="13">{
                <expr_stmt><expr><name pos:line="184" pos:column="17">goOn</name> <op:operator pos:line="184" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="184" pos:column="24">false</lit:literal></expr>;</expr_stmt>
				<break pos:line="185" pos:column="33">break;</break> <comment type="line" pos:line="185" pos:column="40">// EOF condition</comment>
            }</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="188" pos:column="17">//else</comment>
			<comment type="line" pos:line="189" pos:column="25">//break;</comment>
	}</block></while>
	<expr_stmt><expr><name pos:line="191" pos:column="9">_exitCode</name> <op:operator pos:line="191" pos:column="19">=</op:operator> <name pos:line="191" pos:column="21">nExitCode</name></expr>;</expr_stmt>

	<if pos:line="193" pos:column="9">if<condition pos:line="193" pos:column="11">(<expr><op:operator pos:line="193" pos:column="12">!</op:operator><call><name><op:operator pos:line="193" pos:column="13">::</op:operator><name pos:line="193" pos:column="15">SetEvent</name></name><argument_list pos:line="193" pos:column="23">(<argument><expr><name pos:line="193" pos:column="24">hListenerEvent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="193" pos:column="40">
	<block pos:line="194" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="195" pos:column="17">systemMessage</name><argument_list pos:line="195" pos:column="30">(<argument><expr><call><name pos:line="195" pos:column="31">TEXT</name><argument_list pos:line="195" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="195" pos:column="36">"Thread listenerStdOut"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="199" pos:column="1">void</name></type> <name><name pos:line="199" pos:column="6">Process</name><op:operator pos:line="199" pos:column="13">::</op:operator><name pos:line="199" pos:column="15">listenerStdErr</name></name><parameter_list pos:line="199" pos:column="29">()</parameter_list>
<block pos:line="200" pos:column="1">{
	<comment type="line" pos:line="201" pos:column="9">//BOOL Result = 0;</comment>
	<comment type="line" pos:line="202" pos:column="9">//DWORD size = 0;</comment>
	<decl_stmt><decl><type><name pos:line="203" pos:column="9">DWORD</name></type> <name pos:line="203" pos:column="15">bytesAvail</name> <init pos:line="203" pos:column="26">= <expr><lit:literal type="number" pos:line="203" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">BOOL</name></type> <name pos:line="204" pos:column="14">result</name> <init pos:line="204" pos:column="21">= <expr><lit:literal type="number" pos:line="204" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="205" pos:column="9">HANDLE</name></type> <name pos:line="205" pos:column="16">hListenerEvent</name> <init pos:line="205" pos:column="31">= <expr><call><name><op:operator pos:line="205" pos:column="33">::</op:operator><name pos:line="205" pos:column="35">OpenEvent</name></name><argument_list pos:line="205" pos:column="44">(<argument><expr><name pos:line="205" pos:column="45">EVENT_ALL_ACCESS</name></expr></argument>, <argument><expr><name pos:line="205" pos:column="63">FALSE</name></expr></argument>, <argument><expr><call><name pos:line="205" pos:column="70">TEXT</name><argument_list pos:line="205" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="205" pos:column="75">"listenerStdErrEvent"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="207" pos:column="9">int</name></type> <name pos:line="207" pos:column="13">taille</name> <init pos:line="207" pos:column="20">= <expr><lit:literal type="number" pos:line="207" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="208" pos:column="9">//TCHAR bufferOut[MAX_LINE_LENGTH + 1];</comment>
	<decl_stmt><decl><type><name pos:line="209" pos:column="9">TCHAR</name></type> <name><name pos:line="209" pos:column="15">bufferErr</name><index pos:line="209" pos:column="24">[<expr><name pos:line="209" pos:column="25">MAX_LINE_LENGTH</name> <op:operator pos:line="209" pos:column="41">+</op:operator> <lit:literal type="number" pos:line="209" pos:column="43">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="211" pos:column="9">int</name></type> <name pos:line="211" pos:column="13">nExitCode</name> <init pos:line="211" pos:column="23">= <expr><name pos:line="211" pos:column="25">STILL_ACTIVE</name></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name pos:line="213" pos:column="9">DWORD</name></type> <name pos:line="213" pos:column="15">errbytesRead</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="215" pos:column="9">::</op:operator><name pos:line="215" pos:column="11">ResumeThread</name></name><argument_list pos:line="215" pos:column="23">(<argument><expr><name pos:line="215" pos:column="24">_hProcessThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name pos:line="217" pos:column="5">bool</name></type> <name pos:line="217" pos:column="10">goOn</name> <init pos:line="217" pos:column="15">= <expr><lit:literal type="boolean" pos:line="217" pos:column="17">true</lit:literal></expr></init></decl>;</decl_stmt> 
	<while pos:line="218" pos:column="9">while <condition pos:line="218" pos:column="15">(<expr><name pos:line="218" pos:column="16">goOn</name></expr>)</condition>
	<block pos:line="219" pos:column="9">{ <comment type="line" pos:line="219" pos:column="11">// got data</comment>
		<expr_stmt><expr><call><name pos:line="220" pos:column="17">memset</name><argument_list pos:line="220" pos:column="23">(<argument><expr><name pos:line="220" pos:column="24">bufferErr</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="220" pos:column="35">0x00</lit:literal></expr></argument>, <argument><expr><name pos:line="220" pos:column="41">MAX_LINE_LENGTH</name> <op:operator pos:line="220" pos:column="57">+</op:operator> <lit:literal type="number" pos:line="220" pos:column="59">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="221" pos:column="17">taille</name> <op:operator pos:line="221" pos:column="24">=</op:operator> <sizeof pos:line="221" pos:column="26">sizeof<argument_list pos:line="221" pos:column="32">(<argument><expr><name pos:line="221" pos:column="33">bufferErr</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="221" pos:column="44">-</op:operator> <sizeof pos:line="221" pos:column="46">sizeof<argument_list pos:line="221" pos:column="52">(<argument><expr><name pos:line="221" pos:column="53">TCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="223" pos:column="17">Sleep</name><argument_list pos:line="223" pos:column="22">(<argument><expr><lit:literal type="number" pos:line="223" pos:column="23">50</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="225" pos:column="17">if <condition pos:line="225" pos:column="20">(<expr><op:operator pos:line="225" pos:column="21">!</op:operator><call><name><op:operator pos:line="225" pos:column="22">::</op:operator><name pos:line="225" pos:column="24">PeekNamedPipe</name></name><argument_list pos:line="225" pos:column="37">(<argument><expr><name pos:line="225" pos:column="38">_hPipeErrR</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="50">bufferErr</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="61">taille</name></expr></argument>, <argument><expr><op:operator pos:line="225" pos:column="69">&amp;</op:operator><name pos:line="225" pos:column="70">errbytesRead</name></expr></argument>, <argument><expr><op:operator pos:line="225" pos:column="84">&amp;</op:operator><name pos:line="225" pos:column="85">bytesAvail</name></expr></argument>, <argument><expr><name pos:line="225" pos:column="97">NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="225" pos:column="103"> 
		<block pos:line="226" pos:column="17">{
			<expr_stmt><expr><name pos:line="227" pos:column="25">bytesAvail</name> <op:operator pos:line="227" pos:column="36">=</op:operator> <lit:literal type="number" pos:line="227" pos:column="38">0</lit:literal></expr>;</expr_stmt>
            <expr_stmt><expr><name pos:line="228" pos:column="13">goOn</name> <op:operator pos:line="228" pos:column="18">=</op:operator> <lit:literal type="boolean" pos:line="228" pos:column="20">false</lit:literal></expr>;</expr_stmt>
			<break pos:line="229" pos:column="25">break;</break>
		}</block></then></if>

		<if pos:line="232" pos:column="17">if<condition pos:line="232" pos:column="19">(<expr><name pos:line="232" pos:column="20">errbytesRead</name></expr>)</condition><then pos:line="232" pos:column="33">
		<block pos:line="233" pos:column="17">{
			<expr_stmt><expr><name pos:line="234" pos:column="25">result</name> <op:operator pos:line="234" pos:column="32">=</op:operator> <call><name><op:operator pos:line="234" pos:column="34">::</op:operator> <name pos:line="234" pos:column="37">ReadFile</name></name><argument_list pos:line="234" pos:column="45">(<argument><expr><name pos:line="234" pos:column="46">_hPipeErrR</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="58">bufferErr</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="69">taille</name></expr></argument>, <argument><expr><op:operator pos:line="234" pos:column="77">&amp;</op:operator><name pos:line="234" pos:column="78">errbytesRead</name></expr></argument>, <argument><expr><name pos:line="234" pos:column="92">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="235" pos:column="25">if <condition pos:line="235" pos:column="28">(<expr><op:operator pos:line="235" pos:column="29">(</op:operator><op:operator pos:line="235" pos:column="30">!</op:operator><name pos:line="235" pos:column="31">result</name><op:operator pos:line="235" pos:column="37">)</op:operator> <op:operator pos:line="235" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="235" pos:column="42">(</op:operator><name pos:line="235" pos:column="43">errbytesRead</name> <op:operator pos:line="235" pos:column="56">==</op:operator> <lit:literal type="number" pos:line="235" pos:column="59">0</lit:literal><op:operator pos:line="235" pos:column="60">)</op:operator></expr>)</condition><then pos:line="235" pos:column="62">
            <block pos:line="236" pos:column="13">{
                <expr_stmt><expr><name pos:line="237" pos:column="17">goOn</name> <op:operator pos:line="237" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="237" pos:column="24">false</lit:literal></expr>;</expr_stmt>
				<break pos:line="238" pos:column="33">break;</break>
            }</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="241" pos:column="17">//outbytesRead = strlen(bufferOut);</comment>
		<expr_stmt><expr><name><name pos:line="242" pos:column="17">bufferErr</name><index pos:line="242" pos:column="26">[<expr><name pos:line="242" pos:column="27">errbytesRead</name></expr>]</index></name> <op:operator pos:line="242" pos:column="41">=</op:operator> <lit:literal type="char" pos:line="242" pos:column="43">'\0'</lit:literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="243" pos:column="17">generic_string</name></type> <name pos:line="243" pos:column="32">s</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name pos:line="244" pos:column="17">s</name><op:operator pos:line="244" pos:column="18">.</op:operator><name pos:line="244" pos:column="19">assign</name></name><argument_list pos:line="244" pos:column="25">(<argument><expr><name pos:line="244" pos:column="26">bufferErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="245" pos:column="17">_stderrStr</name> <op:operator pos:line="245" pos:column="28">+=</op:operator> <name pos:line="245" pos:column="31">s</name></expr>;</expr_stmt>

		<if pos:line="247" pos:column="17">if <condition pos:line="247" pos:column="20">(<expr><call><name><op:operator pos:line="247" pos:column="21">::</op:operator><name pos:line="247" pos:column="23">GetExitCodeProcess</name></name><argument_list pos:line="247" pos:column="41">(<argument><expr><name pos:line="247" pos:column="42">_hProcess</name></expr></argument>, <argument><expr><op:operator pos:line="247" pos:column="53">(</op:operator><name pos:line="247" pos:column="54">unsigned</name> <name pos:line="247" pos:column="63">long</name><op:operator pos:line="247" pos:column="67">*</op:operator><op:operator pos:line="247" pos:column="68">)</op:operator><op:operator pos:line="247" pos:column="69">&amp;</op:operator><name pos:line="247" pos:column="70">nExitCode</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="247" pos:column="81">
		<block pos:line="248" pos:column="17">{
			<if pos:line="249" pos:column="25">if <condition pos:line="249" pos:column="28">(<expr><name pos:line="249" pos:column="29">nExitCode</name> <op:operator pos:line="249" pos:column="39">!=</op:operator> <name pos:line="249" pos:column="42">STILL_ACTIVE</name></expr>)</condition><then pos:line="249" pos:column="55">
            <block pos:line="250" pos:column="13">{
                <expr_stmt><expr><name pos:line="251" pos:column="17">goOn</name> <op:operator pos:line="251" pos:column="22">=</op:operator> <lit:literal type="boolean" pos:line="251" pos:column="24">false</lit:literal></expr>;</expr_stmt>
				<break pos:line="252" pos:column="33">break;</break> <comment type="line" pos:line="252" pos:column="40">// EOF condition</comment>
            }</block></then></if>
		}</block></then></if>
		<comment type="line" pos:line="255" pos:column="17">//else</comment>
			<comment type="line" pos:line="256" pos:column="25">//break;</comment>
	}</block></while>
	<comment type="line" pos:line="258" pos:column="9">//_exitCode = nExitCode;</comment>

	<if pos:line="260" pos:column="9">if<condition pos:line="260" pos:column="11">(<expr><op:operator pos:line="260" pos:column="12">!</op:operator><call><name><op:operator pos:line="260" pos:column="13">::</op:operator><name pos:line="260" pos:column="15">SetEvent</name></name><argument_list pos:line="260" pos:column="23">(<argument><expr><name pos:line="260" pos:column="24">hListenerEvent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="260" pos:column="40">
	<block pos:line="261" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="262" pos:column="17">systemMessage</name><argument_list pos:line="262" pos:column="30">(<argument><expr><call><name pos:line="262" pos:column="31">TEXT</name><argument_list pos:line="262" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="262" pos:column="36">"Thread stdout listener"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name pos:line="266" pos:column="1">void</name></type> <name><name pos:line="266" pos:column="6">Process</name><op:operator pos:line="266" pos:column="13">::</op:operator><name pos:line="266" pos:column="15">error</name></name><parameter_list pos:line="266" pos:column="20">(<param><decl><type><specifier pos:line="266" pos:column="21">const</specifier> <name pos:line="266" pos:column="27">TCHAR</name> <type:modifier pos:line="266" pos:column="33">*</type:modifier></type><name pos:line="266" pos:column="34">txt2display</name></decl></param>, <param><decl><type><name pos:line="266" pos:column="47">BOOL</name> <type:modifier pos:line="266" pos:column="52">&amp;</type:modifier></type> <name pos:line="266" pos:column="54">returnCode</name></decl></param>, <param><decl><type><name pos:line="266" pos:column="66">int</name></type> <name pos:line="266" pos:column="70">errCode</name></decl></param>)</parameter_list>
<block pos:line="267" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="268" pos:column="9">systemMessage</name><argument_list pos:line="268" pos:column="22">(<argument><expr><name pos:line="268" pos:column="23">txt2display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="269" pos:column="9">returnCode</name> <op:operator pos:line="269" pos:column="20">=</op:operator> <name pos:line="269" pos:column="22">FALSE</name></expr>;</expr_stmt>
	<throw pos:line="270" pos:column="9">throw <expr><call><name pos:line="270" pos:column="15">int</name><argument_list pos:line="270" pos:column="18">(<argument><expr><name pos:line="270" pos:column="19">errCode</name></expr></argument>)</argument_list></call></expr>;</throw>
}</block></function>
</unit>
