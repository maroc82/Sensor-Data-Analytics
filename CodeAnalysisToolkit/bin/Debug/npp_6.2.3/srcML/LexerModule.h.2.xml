<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\LexerModule.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexerModule.h
 ** Colourise for particular languages.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">LEXERMODULE_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">LEXERMODULE_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef</cpp:directive> <name pos:line="11" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="12" pos:column="1">namespace <name pos:line="12" pos:column="11">Scintilla</name> <block pos:line="12" pos:column="21">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>

<class_decl pos:line="15" pos:column="1">class <name pos:line="15" pos:column="7">Accessor</name>;</class_decl>
<class_decl pos:line="16" pos:column="1">class <name pos:line="16" pos:column="7">WordList</name>;</class_decl>

<typedef pos:line="18" pos:column="1">typedef <function_decl><type><name pos:line="18" pos:column="9">void</name></type> (<type:modifier pos:line="18" pos:column="15">*</type:modifier><name pos:line="18" pos:column="16">LexerFunction</name>)<parameter_list pos:line="18" pos:column="30">(<param><decl><type><name pos:line="18" pos:column="31">unsigned</name> <name pos:line="18" pos:column="40">int</name></type> <name pos:line="18" pos:column="44">startPos</name></decl></param>, <param><decl><type><name pos:line="18" pos:column="54">int</name></type> <name pos:line="18" pos:column="58">lengthDoc</name></decl></param>, <param><decl><type><name pos:line="18" pos:column="69">int</name></type> <name pos:line="18" pos:column="73">initStyle</name></decl></param>,
                  <param><decl><type><name pos:line="19" pos:column="19">WordList</name> <type:modifier pos:line="19" pos:column="28">*</type:modifier></type><name><name pos:line="19" pos:column="29">keywordlists</name><index pos:line="19" pos:column="41">[]</index></name></decl></param>, <param><decl><type><name pos:line="19" pos:column="45">Accessor</name> <type:modifier pos:line="19" pos:column="54">&amp;</type:modifier></type><name pos:line="19" pos:column="55">styler</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef pos:line="20" pos:column="1">typedef <function_decl><type><name pos:line="20" pos:column="9">ILexer</name> <type:modifier pos:line="20" pos:column="16">*</type:modifier></type>(<type:modifier pos:line="20" pos:column="18">*</type:modifier><name pos:line="20" pos:column="19">LexerFactoryFunction</name>)<parameter_list pos:line="20" pos:column="40">()</parameter_list>;</function_decl></typedef>

<comment type="block" format="doxygen" pos:line="22" pos:column="1">/**
 * A LexerModule is responsible for lexing and folding a particular language.
 * The class maintains a list of LexerModules which can be searched to find a
 * module appropriate to a particular language.
 */</comment>
<class pos:line="27" pos:column="1">class <name pos:line="27" pos:column="7">LexerModule</name> <block pos:line="27" pos:column="19">{<private type="default" pos:line="27" pos:column="20">
</private><protected pos:line="28" pos:column="1">protected:
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">int</name></type> <name pos:line="29" pos:column="13">language</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">LexerFunction</name></type> <name pos:line="30" pos:column="23">fnLexer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">LexerFunction</name></type> <name pos:line="31" pos:column="23">fnFolder</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="32" pos:column="9">LexerFactoryFunction</name></type> <name pos:line="32" pos:column="30">fnFactory</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="33" pos:column="9">const</specifier> <name pos:line="33" pos:column="15">char</name> <type:modifier pos:line="33" pos:column="20">*</type:modifier> <specifier pos:line="33" pos:column="22">const</specifier> <type:modifier pos:line="33" pos:column="28">*</type:modifier></type> <name pos:line="33" pos:column="30">wordListDescriptions</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">int</name></type> <name pos:line="34" pos:column="13">styleBits</name></decl>;</decl_stmt>

</protected><public pos:line="36" pos:column="1">public:
	<decl_stmt><decl><type><specifier pos:line="37" pos:column="9">const</specifier> <name pos:line="37" pos:column="15">char</name> <type:modifier pos:line="37" pos:column="20">*</type:modifier></type><name pos:line="37" pos:column="21">languageName</name></decl>;</decl_stmt>
	<macro><name pos:line="38" pos:column="9">LexerModule</name><argument_list pos:line="38" pos:column="20">(<argument pos:line="38" pos:column="21">int language_</argument>,
		<argument pos:line="39" pos:column="17">LexerFunction fnLexer_</argument>,
		<argument pos:line="40" pos:column="17">const char *languageName_=0</argument>,
		<argument pos:line="41" pos:column="17">LexerFunction fnFolder_=0</argument>,
		<argument pos:line="42" pos:column="17">const char * const wordListDescriptions_[] = NULL</argument>,
		<argument pos:line="43" pos:column="17">int styleBits_=5</argument>)</argument_list></macro><empty_stmt pos:line="43" pos:column="34">;</empty_stmt>
	<constructor_decl><name pos:line="44" pos:column="9">LexerModule</name><parameter_list pos:line="44" pos:column="20">(<param><decl><type><name pos:line="44" pos:column="21">int</name></type> <name pos:line="44" pos:column="25">language_</name></decl></param>,
		<param><decl><type><name pos:line="45" pos:column="17">LexerFactoryFunction</name></type> <name pos:line="45" pos:column="38">fnFactory_</name></decl></param>,
		<param><decl><type><specifier pos:line="46" pos:column="17">const</specifier> <name pos:line="46" pos:column="23">char</name> <type:modifier pos:line="46" pos:column="28">*</type:modifier></type><name pos:line="46" pos:column="29">languageName_</name></decl></param>,
		<param><decl><type><specifier pos:line="47" pos:column="17">const</specifier> <name pos:line="47" pos:column="23">char</name> <type:modifier pos:line="47" pos:column="28">*</type:modifier> <specifier pos:line="47" pos:column="30">const</specifier></type> <name><name pos:line="47" pos:column="36">wordListDescriptions_</name><index pos:line="47" pos:column="57">[]</index></name> <init pos:line="47" pos:column="60">= <expr><name pos:line="47" pos:column="62">NULL</name></expr></init></decl></param>,
		<name pos:line="48" pos:column="17">int</name> <name pos:line="48" pos:column="21">styleBits_</name><op:operator pos:line="48" pos:column="31">=</op:operator><lit:literal type="number" pos:line="48" pos:column="32">8</lit:literal>)</parameter_list>;</constructor_decl>
	<destructor><specifier pos:line="49" pos:column="9">virtual</specifier> <name pos:line="49" pos:column="17">~<name pos:line="49" pos:column="18">LexerModule</name></name><parameter_list pos:line="49" pos:column="29">()</parameter_list> <block pos:line="49" pos:column="32">{
	}</block></destructor>
	<function><type><name pos:line="51" pos:column="9">int</name></type> <name pos:line="51" pos:column="13">GetLanguage</name><parameter_list pos:line="51" pos:column="24">()</parameter_list> <specifier pos:line="51" pos:column="27">const</specifier> <block pos:line="51" pos:column="33">{ <return pos:line="51" pos:column="35">return <expr><name pos:line="51" pos:column="42">language</name></expr>;</return> }</block></function>

	<comment type="line" pos:line="53" pos:column="9">// -1 is returned if no WordList information is available</comment>
	<function_decl><type><name pos:line="54" pos:column="9">int</name></type> <name pos:line="54" pos:column="13">GetNumWordLists</name><parameter_list pos:line="54" pos:column="28">()</parameter_list> <specifier pos:line="54" pos:column="31">const</specifier>;</function_decl>
	<function_decl><type><specifier pos:line="55" pos:column="9">const</specifier> <name pos:line="55" pos:column="15">char</name> <type:modifier pos:line="55" pos:column="20">*</type:modifier></type><name pos:line="55" pos:column="21">GetWordListDescription</name><parameter_list pos:line="55" pos:column="43">(<param><decl><type><name pos:line="55" pos:column="44">int</name></type> <name pos:line="55" pos:column="48">index</name></decl></param>)</parameter_list> <specifier pos:line="55" pos:column="55">const</specifier>;</function_decl>

	<function_decl><type><name pos:line="57" pos:column="9">int</name></type> <name pos:line="57" pos:column="13">GetStyleBitsNeeded</name><parameter_list pos:line="57" pos:column="31">()</parameter_list> <specifier pos:line="57" pos:column="34">const</specifier>;</function_decl>

	<function_decl><type><name pos:line="59" pos:column="9">ILexer</name> <type:modifier pos:line="59" pos:column="16">*</type:modifier></type><name pos:line="59" pos:column="17">Create</name><parameter_list pos:line="59" pos:column="23">()</parameter_list> <specifier pos:line="59" pos:column="26">const</specifier>;</function_decl>

	<function_decl><type><specifier pos:line="61" pos:column="9">virtual</specifier> <name pos:line="61" pos:column="17">void</name></type> <name pos:line="61" pos:column="22">Lex</name><parameter_list pos:line="61" pos:column="25">(<param><decl><type><name pos:line="61" pos:column="26">unsigned</name> <name pos:line="61" pos:column="35">int</name></type> <name pos:line="61" pos:column="39">startPos</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="49">int</name></type> <name pos:line="61" pos:column="53">length</name></decl></param>, <param><decl><type><name pos:line="61" pos:column="61">int</name></type> <name pos:line="61" pos:column="65">initStyle</name></decl></param>,
                  <param><decl><type><name pos:line="62" pos:column="19">WordList</name> <type:modifier pos:line="62" pos:column="28">*</type:modifier></type><name><name pos:line="62" pos:column="29">keywordlists</name><index pos:line="62" pos:column="41">[]</index></name></decl></param>, <param><decl><type><name pos:line="62" pos:column="45">Accessor</name> <type:modifier pos:line="62" pos:column="54">&amp;</type:modifier></type><name pos:line="62" pos:column="55">styler</name></decl></param>)</parameter_list> <specifier pos:line="62" pos:column="63">const</specifier>;</function_decl>
	<function_decl><type><specifier pos:line="63" pos:column="9">virtual</specifier> <name pos:line="63" pos:column="17">void</name></type> <name pos:line="63" pos:column="22">Fold</name><parameter_list pos:line="63" pos:column="26">(<param><decl><type><name pos:line="63" pos:column="27">unsigned</name> <name pos:line="63" pos:column="36">int</name></type> <name pos:line="63" pos:column="40">startPos</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="50">int</name></type> <name pos:line="63" pos:column="54">length</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="62">int</name></type> <name pos:line="63" pos:column="66">initStyle</name></decl></param>,
                  <param><decl><type><name pos:line="64" pos:column="19">WordList</name> <type:modifier pos:line="64" pos:column="28">*</type:modifier></type><name><name pos:line="64" pos:column="29">keywordlists</name><index pos:line="64" pos:column="41">[]</index></name></decl></param>, <param><decl><type><name pos:line="64" pos:column="45">Accessor</name> <type:modifier pos:line="64" pos:column="54">&amp;</type:modifier></type><name pos:line="64" pos:column="55">styler</name></decl></param>)</parameter_list> <specifier pos:line="64" pos:column="63">const</specifier>;</function_decl>

	<class_decl><specifier pos:line="66" pos:column="9">friend</specifier> class <name pos:line="66" pos:column="22">Catalogue</name>;</class_decl>
</public>}</block>;</class>

<function><type><specifier pos:line="69" pos:column="1">inline</specifier> <name pos:line="69" pos:column="8">int</name></type> <name pos:line="69" pos:column="12">Maximum</name><parameter_list pos:line="69" pos:column="19">(<param><decl><type><name pos:line="69" pos:column="20">int</name></type> <name pos:line="69" pos:column="24">a</name></decl></param>, <param><decl><type><name pos:line="69" pos:column="27">int</name></type> <name pos:line="69" pos:column="31">b</name></decl></param>)</parameter_list> <block pos:line="69" pos:column="34">{
	<return pos:line="70" pos:column="9">return <expr><op:operator pos:line="70" pos:column="16">(</op:operator><name pos:line="70" pos:column="17">a</name> <op:operator pos:line="70" pos:column="19">&gt;</op:operator> <name pos:line="70" pos:column="21">b</name><op:operator pos:line="70" pos:column="22">)</op:operator> <op:operator pos:line="70" pos:column="24">?</op:operator> <name pos:line="70" pos:column="26">a</name> <op:operator pos:line="70" pos:column="28">:</op:operator> <name pos:line="70" pos:column="30">b</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="73" pos:column="1">// Shut up annoying Visual C++ warnings:</comment>
<cpp:ifdef pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">ifdef</cpp:directive> <name pos:line="74" pos:column="8">_MSC_VER</name></cpp:ifdef>
<cpp:pragma pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">pragma</cpp:directive> warning(disable: 4244 4309 4514 4710)</cpp:pragma>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">ifdef</cpp:directive> <name pos:line="78" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
