<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\CharacterSet.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file CharacterSet.h
 ** Encapsulates a set of characters. Used to test if a character is within a set.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2007 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">CHARACTERSET_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">CHARACTERSET_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef</cpp:directive> <name pos:line="11" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="12" pos:column="1">namespace <name pos:line="12" pos:column="11">Scintilla</name> <block pos:line="12" pos:column="21">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>

<class pos:line="15" pos:column="1">class <name pos:line="15" pos:column="7">CharacterSet</name> <block pos:line="15" pos:column="20">{<private type="default" pos:line="15" pos:column="21">
	<decl_stmt><decl><type><name pos:line="16" pos:column="9">int</name></type> <name pos:line="16" pos:column="13">size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">bool</name></type> <name pos:line="17" pos:column="14">valueAfter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="18" pos:column="9">bool</name> <type:modifier pos:line="18" pos:column="14">*</type:modifier></type><name pos:line="18" pos:column="15">bset</name></decl>;</decl_stmt>
</private><public pos:line="19" pos:column="1">public:
	<enum pos:line="20" pos:column="9">enum <name pos:line="20" pos:column="14">setBase</name> <block pos:line="20" pos:column="22">{
		<decl><name pos:line="21" pos:column="17">setNone</name><init pos:line="21" pos:column="24">=<expr><lit:literal type="number" pos:line="21" pos:column="25">0</lit:literal></expr></init></decl><op:operator pos:line="21" pos:column="26">,</op:operator>
		<decl><name pos:line="22" pos:column="17">setLower</name><init pos:line="22" pos:column="25">=<expr><lit:literal type="number" pos:line="22" pos:column="26">1</lit:literal></expr></init></decl><op:operator pos:line="22" pos:column="27">,</op:operator>
		<decl><name pos:line="23" pos:column="17">setUpper</name><init pos:line="23" pos:column="25">=<expr><lit:literal type="number" pos:line="23" pos:column="26">2</lit:literal></expr></init></decl><op:operator pos:line="23" pos:column="27">,</op:operator>
		<decl><name pos:line="24" pos:column="17">setDigits</name><init pos:line="24" pos:column="26">=<expr><lit:literal type="number" pos:line="24" pos:column="27">4</lit:literal></expr></init></decl><op:operator pos:line="24" pos:column="28">,</op:operator>
		<decl><name pos:line="25" pos:column="17">setAlpha</name><init pos:line="25" pos:column="25">=<expr><name pos:line="25" pos:column="26">setLower</name><op:operator pos:line="25" pos:column="34">|</op:operator><name pos:line="25" pos:column="35">setUpper</name></expr></init></decl><op:operator pos:line="25" pos:column="43">,</op:operator>
		<decl><name pos:line="26" pos:column="17">setAlphaNum</name><init pos:line="26" pos:column="28">=<expr><name pos:line="26" pos:column="29">setAlpha</name><op:operator pos:line="26" pos:column="37">|</op:operator><name pos:line="26" pos:column="38">setDigits</name></expr></init></decl>
	}</block>;</enum>
	<macro><name pos:line="28" pos:column="9">CharacterSet</name><argument_list pos:line="28" pos:column="21">(<argument pos:line="28" pos:column="22">setBase base=setNone</argument>, <argument pos:line="28" pos:column="44">const char *initialSet=""</argument>, <argument pos:line="28" pos:column="71">int size_=0x80</argument>, <argument pos:line="28" pos:column="87">bool valueAfter_=false</argument>)</argument_list></macro> <block pos:line="28" pos:column="111">{
		<expr_stmt><expr><name pos:line="29" pos:column="17">size</name> <op:operator pos:line="29" pos:column="22">=</op:operator> <name pos:line="29" pos:column="24">size_</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="30" pos:column="17">valueAfter</name> <op:operator pos:line="30" pos:column="28">=</op:operator> <name pos:line="30" pos:column="30">valueAfter_</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="31" pos:column="17">bset</name> <op:operator pos:line="31" pos:column="22">=</op:operator> <op:operator pos:line="31" pos:column="24">new</op:operator> <name><name pos:line="31" pos:column="28">bool</name><index pos:line="31" pos:column="32">[<expr><name pos:line="31" pos:column="33">size</name></expr>]</index></name></expr>;</expr_stmt>
		<for pos:line="32" pos:column="17">for (<init><decl><type><name pos:line="32" pos:column="22">int</name></type> <name pos:line="32" pos:column="26">i</name><init pos:line="32" pos:column="27">=<expr><lit:literal type="number" pos:line="32" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="32" pos:column="31">i</name> <op:operator pos:line="32" pos:column="33">&lt;</op:operator> <name pos:line="32" pos:column="35">size</name></expr>;</condition> <incr><expr><name pos:line="32" pos:column="41">i</name><op:operator pos:line="32" pos:column="42">++</op:operator></expr></incr>) <block pos:line="32" pos:column="46">{
			<expr_stmt><expr><name><name pos:line="33" pos:column="25">bset</name><index pos:line="33" pos:column="29">[<expr><name pos:line="33" pos:column="30">i</name></expr>]</index></name> <op:operator pos:line="33" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="33" pos:column="35">false</lit:literal></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name pos:line="35" pos:column="17">AddString</name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">initialSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">base</name> <op:operator pos:line="36" pos:column="26">&amp;</op:operator> <name pos:line="36" pos:column="28">setLower</name></expr>)</condition><then pos:line="36" pos:column="37">
			<expr_stmt><expr><call><name pos:line="37" pos:column="25">AddString</name><argument_list pos:line="37" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="37" pos:column="35">"abcdefghijklmnopqrstuvwxyz"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="38" pos:column="17">if <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">base</name> <op:operator pos:line="38" pos:column="26">&amp;</op:operator> <name pos:line="38" pos:column="28">setUpper</name></expr>)</condition><then pos:line="38" pos:column="37">
			<expr_stmt><expr><call><name pos:line="39" pos:column="25">AddString</name><argument_list pos:line="39" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="39" pos:column="35">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name pos:line="40" pos:column="21">base</name> <op:operator pos:line="40" pos:column="26">&amp;</op:operator> <name pos:line="40" pos:column="28">setDigits</name></expr>)</condition><then pos:line="40" pos:column="38">
			<expr_stmt><expr><call><name pos:line="41" pos:column="25">AddString</name><argument_list pos:line="41" pos:column="34">(<argument><expr><lit:literal type="string" pos:line="41" pos:column="35">"0123456789"</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	}</block>
	<destructor><name pos:line="43" pos:column="9">~<name pos:line="43" pos:column="10">CharacterSet</name></name><parameter_list pos:line="43" pos:column="22">()</parameter_list> <block pos:line="43" pos:column="25">{
		<expr_stmt><expr><op:operator pos:line="44" pos:column="17">delete</op:operator> <index pos:line="44" pos:column="24">[]</index><name pos:line="44" pos:column="26">bset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="45" pos:column="17">bset</name> <op:operator pos:line="45" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="45" pos:column="24">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="46" pos:column="17">size</name> <op:operator pos:line="46" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="46" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	}</block></destructor>
	<function><type><name pos:line="48" pos:column="9">void</name></type> <name pos:line="48" pos:column="14">Add</name><parameter_list pos:line="48" pos:column="17">(<param><decl><type><name pos:line="48" pos:column="18">int</name></type> <name pos:line="48" pos:column="22">val</name></decl></param>)</parameter_list> <block pos:line="48" pos:column="27">{
		<expr_stmt><expr><call><name pos:line="49" pos:column="17">assert</name><argument_list pos:line="49" pos:column="23">(<argument><expr><name pos:line="49" pos:column="24">val</name> <op:operator pos:line="49" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="49" pos:column="31">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="50" pos:column="17">assert</name><argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">val</name> <op:operator pos:line="50" pos:column="28">&lt;</op:operator> <name pos:line="50" pos:column="30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="51" pos:column="17">bset</name><index pos:line="51" pos:column="21">[<expr><name pos:line="51" pos:column="22">val</name></expr>]</index></name> <op:operator pos:line="51" pos:column="27">=</op:operator> <lit:literal type="boolean" pos:line="51" pos:column="29">true</lit:literal></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="53" pos:column="9">void</name></type> <name pos:line="53" pos:column="14">AddString</name><parameter_list pos:line="53" pos:column="23">(<param><decl><type><specifier pos:line="53" pos:column="24">const</specifier> <name pos:line="53" pos:column="30">char</name> <type:modifier pos:line="53" pos:column="35">*</type:modifier></type><name pos:line="53" pos:column="36">setToAdd</name></decl></param>)</parameter_list> <block pos:line="53" pos:column="46">{
		<for pos:line="54" pos:column="17">for (<init><decl><type><specifier pos:line="54" pos:column="22">const</specifier> <name pos:line="54" pos:column="28">char</name> <type:modifier pos:line="54" pos:column="33">*</type:modifier></type><name pos:line="54" pos:column="34">cp</name><init pos:line="54" pos:column="36">=<expr><name pos:line="54" pos:column="37">setToAdd</name></expr></init></decl>;</init> <condition><expr><op:operator pos:line="54" pos:column="47">*</op:operator><name pos:line="54" pos:column="48">cp</name></expr>;</condition> <incr><expr><name pos:line="54" pos:column="52">cp</name><op:operator pos:line="54" pos:column="54">++</op:operator></expr></incr>) <block pos:line="54" pos:column="58">{
			<decl_stmt><decl><type><name pos:line="55" pos:column="25">int</name></type> <name pos:line="55" pos:column="29">val</name> <init pos:line="55" pos:column="33">= <expr><call><name><name pos:line="55" pos:column="35">static_cast</name><argument_list pos:line="55" pos:column="46">&lt;<argument><expr><name pos:line="55" pos:column="47">unsigned</name> <name pos:line="55" pos:column="56">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="55" pos:column="61">(<argument><expr><op:operator pos:line="55" pos:column="62">*</op:operator><name pos:line="55" pos:column="63">cp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">assert</name><argument_list pos:line="56" pos:column="31">(<argument><expr><name pos:line="56" pos:column="32">val</name> <op:operator pos:line="56" pos:column="36">&gt;=</op:operator> <lit:literal type="number" pos:line="56" pos:column="39">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="57" pos:column="25">assert</name><argument_list pos:line="57" pos:column="31">(<argument><expr><name pos:line="57" pos:column="32">val</name> <op:operator pos:line="57" pos:column="36">&lt;</op:operator> <name pos:line="57" pos:column="38">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="58" pos:column="25">bset</name><index pos:line="58" pos:column="29">[<expr><name pos:line="58" pos:column="30">val</name></expr>]</index></name> <op:operator pos:line="58" pos:column="35">=</op:operator> <lit:literal type="boolean" pos:line="58" pos:column="37">true</lit:literal></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	<function><type><name pos:line="61" pos:column="9">bool</name></type> <name pos:line="61" pos:column="14">Contains</name><parameter_list pos:line="61" pos:column="22">(<param><decl><type><name pos:line="61" pos:column="23">int</name></type> <name pos:line="61" pos:column="27">val</name></decl></param>)</parameter_list> <specifier pos:line="61" pos:column="32">const</specifier> <block pos:line="61" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="62" pos:column="17">assert</name><argument_list pos:line="62" pos:column="23">(<argument><expr><name pos:line="62" pos:column="24">val</name> <op:operator pos:line="62" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="62" pos:column="31">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="63" pos:column="17">if <condition pos:line="63" pos:column="20">(<expr><name pos:line="63" pos:column="21">val</name> <op:operator pos:line="63" pos:column="25">&lt;</op:operator> <lit:literal type="number" pos:line="63" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="63" pos:column="29"> <return pos:line="63" pos:column="30">return <expr><lit:literal type="boolean" pos:line="63" pos:column="37">false</lit:literal></expr>;</return></then></if>
		<return pos:line="64" pos:column="17">return <expr><op:operator pos:line="64" pos:column="24">(</op:operator><name pos:line="64" pos:column="25">val</name> <op:operator pos:line="64" pos:column="29">&lt;</op:operator> <name pos:line="64" pos:column="31">size</name><op:operator pos:line="64" pos:column="35">)</op:operator> <op:operator pos:line="64" pos:column="37">?</op:operator> <name><name pos:line="64" pos:column="39">bset</name><index pos:line="64" pos:column="43">[<expr><name pos:line="64" pos:column="44">val</name></expr>]</index></name> <op:operator pos:line="64" pos:column="49">:</op:operator> <name pos:line="64" pos:column="51">valueAfter</name></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<comment type="line" pos:line="68" pos:column="1">// Functions for classifying characters</comment>

<function><type><specifier pos:line="70" pos:column="1">inline</specifier> <name pos:line="70" pos:column="8">bool</name></type> <name pos:line="70" pos:column="13">IsASpace</name><parameter_list pos:line="70" pos:column="21">(<param><decl><type><name pos:line="70" pos:column="22">int</name></type> <name pos:line="70" pos:column="26">ch</name></decl></param>)</parameter_list> <block pos:line="70" pos:column="30">{
    <return pos:line="71" pos:column="5">return <expr><op:operator pos:line="71" pos:column="12">(</op:operator><name pos:line="71" pos:column="13">ch</name> <op:operator pos:line="71" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="71" pos:column="19">' '</lit:literal><op:operator pos:line="71" pos:column="22">)</op:operator> <op:operator pos:line="71" pos:column="24">||</op:operator> <op:operator pos:line="71" pos:column="27">(</op:operator><op:operator pos:line="71" pos:column="28">(</op:operator><name pos:line="71" pos:column="29">ch</name> <op:operator pos:line="71" pos:column="32">&gt;=</op:operator> <lit:literal type="number" pos:line="71" pos:column="35">0x09</lit:literal><op:operator pos:line="71" pos:column="39">)</op:operator> <op:operator pos:line="71" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="71" pos:column="44">(</op:operator><name pos:line="71" pos:column="45">ch</name> <op:operator pos:line="71" pos:column="48">&lt;=</op:operator> <lit:literal type="number" pos:line="71" pos:column="51">0x0d</lit:literal><op:operator pos:line="71" pos:column="55">)</op:operator><op:operator pos:line="71" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="74" pos:column="1">inline</specifier> <name pos:line="74" pos:column="8">bool</name></type> <name pos:line="74" pos:column="13">IsASpaceOrTab</name><parameter_list pos:line="74" pos:column="26">(<param><decl><type><name pos:line="74" pos:column="27">int</name></type> <name pos:line="74" pos:column="31">ch</name></decl></param>)</parameter_list> <block pos:line="74" pos:column="35">{
	<return pos:line="75" pos:column="9">return <expr><op:operator pos:line="75" pos:column="16">(</op:operator><name pos:line="75" pos:column="17">ch</name> <op:operator pos:line="75" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="23">' '</lit:literal><op:operator pos:line="75" pos:column="26">)</op:operator> <op:operator pos:line="75" pos:column="28">||</op:operator> <op:operator pos:line="75" pos:column="31">(</op:operator><name pos:line="75" pos:column="32">ch</name> <op:operator pos:line="75" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="75" pos:column="38">'\t'</lit:literal><op:operator pos:line="75" pos:column="42">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="78" pos:column="1">inline</specifier> <name pos:line="78" pos:column="8">bool</name></type> <name pos:line="78" pos:column="13">IsADigit</name><parameter_list pos:line="78" pos:column="21">(<param><decl><type><name pos:line="78" pos:column="22">int</name></type> <name pos:line="78" pos:column="26">ch</name></decl></param>)</parameter_list> <block pos:line="78" pos:column="30">{
	<return pos:line="79" pos:column="9">return <expr><op:operator pos:line="79" pos:column="16">(</op:operator><name pos:line="79" pos:column="17">ch</name> <op:operator pos:line="79" pos:column="20">&gt;=</op:operator> <lit:literal type="char" pos:line="79" pos:column="23">'0'</lit:literal><op:operator pos:line="79" pos:column="26">)</op:operator> <op:operator pos:line="79" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="79" pos:column="31">(</op:operator><name pos:line="79" pos:column="32">ch</name> <op:operator pos:line="79" pos:column="35">&lt;=</op:operator> <lit:literal type="char" pos:line="79" pos:column="38">'9'</lit:literal><op:operator pos:line="79" pos:column="41">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="82" pos:column="1">inline</specifier> <name pos:line="82" pos:column="8">bool</name></type> <name pos:line="82" pos:column="13">IsADigit</name><parameter_list pos:line="82" pos:column="21">(<param><decl><type><name pos:line="82" pos:column="22">int</name></type> <name pos:line="82" pos:column="26">ch</name></decl></param>, <param><decl><type><name pos:line="82" pos:column="30">int</name></type> <name pos:line="82" pos:column="34">base</name></decl></param>)</parameter_list> <block pos:line="82" pos:column="40">{
	<if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">base</name> <op:operator pos:line="83" pos:column="18">&lt;=</op:operator> <lit:literal type="number" pos:line="83" pos:column="21">10</lit:literal></expr>)</condition><then pos:line="83" pos:column="24"> <block pos:line="83" pos:column="25">{
		<return pos:line="84" pos:column="17">return <expr><op:operator pos:line="84" pos:column="24">(</op:operator><name pos:line="84" pos:column="25">ch</name> <op:operator pos:line="84" pos:column="28">&gt;=</op:operator> <lit:literal type="char" pos:line="84" pos:column="31">'0'</lit:literal><op:operator pos:line="84" pos:column="34">)</op:operator> <op:operator pos:line="84" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="84" pos:column="39">(</op:operator><name pos:line="84" pos:column="40">ch</name> <op:operator pos:line="84" pos:column="43">&lt;</op:operator> <lit:literal type="char" pos:line="84" pos:column="45">'0'</lit:literal> <op:operator pos:line="84" pos:column="49">+</op:operator> <name pos:line="84" pos:column="51">base</name><op:operator pos:line="84" pos:column="55">)</op:operator></expr>;</return>
	}</block></then> <else pos:line="85" pos:column="11">else <block pos:line="85" pos:column="16">{
		<return pos:line="86" pos:column="17">return <expr><op:operator pos:line="86" pos:column="24">(</op:operator><op:operator pos:line="86" pos:column="25">(</op:operator><name pos:line="86" pos:column="26">ch</name> <op:operator pos:line="86" pos:column="29">&gt;=</op:operator> <lit:literal type="char" pos:line="86" pos:column="32">'0'</lit:literal><op:operator pos:line="86" pos:column="35">)</op:operator> <op:operator pos:line="86" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="86" pos:column="40">(</op:operator><name pos:line="86" pos:column="41">ch</name> <op:operator pos:line="86" pos:column="44">&lt;=</op:operator> <lit:literal type="char" pos:line="86" pos:column="47">'9'</lit:literal><op:operator pos:line="86" pos:column="50">)</op:operator><op:operator pos:line="86" pos:column="51">)</op:operator> <op:operator pos:line="86" pos:column="53">||</op:operator>
		       <op:operator pos:line="87" pos:column="24">(</op:operator><op:operator pos:line="87" pos:column="25">(</op:operator><name pos:line="87" pos:column="26">ch</name> <op:operator pos:line="87" pos:column="29">&gt;=</op:operator> <lit:literal type="char" pos:line="87" pos:column="32">'A'</lit:literal><op:operator pos:line="87" pos:column="35">)</op:operator> <op:operator pos:line="87" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="87" pos:column="40">(</op:operator><name pos:line="87" pos:column="41">ch</name> <op:operator pos:line="87" pos:column="44">&lt;</op:operator> <lit:literal type="char" pos:line="87" pos:column="46">'A'</lit:literal> <op:operator pos:line="87" pos:column="50">+</op:operator> <name pos:line="87" pos:column="52">base</name> <op:operator pos:line="87" pos:column="57">-</op:operator> <lit:literal type="number" pos:line="87" pos:column="59">10</lit:literal><op:operator pos:line="87" pos:column="61">)</op:operator><op:operator pos:line="87" pos:column="62">)</op:operator> <op:operator pos:line="87" pos:column="64">||</op:operator>
		       <op:operator pos:line="88" pos:column="24">(</op:operator><op:operator pos:line="88" pos:column="25">(</op:operator><name pos:line="88" pos:column="26">ch</name> <op:operator pos:line="88" pos:column="29">&gt;=</op:operator> <lit:literal type="char" pos:line="88" pos:column="32">'a'</lit:literal><op:operator pos:line="88" pos:column="35">)</op:operator> <op:operator pos:line="88" pos:column="37">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="40">(</op:operator><name pos:line="88" pos:column="41">ch</name> <op:operator pos:line="88" pos:column="44">&lt;</op:operator> <lit:literal type="char" pos:line="88" pos:column="46">'a'</lit:literal> <op:operator pos:line="88" pos:column="50">+</op:operator> <name pos:line="88" pos:column="52">base</name> <op:operator pos:line="88" pos:column="57">-</op:operator> <lit:literal type="number" pos:line="88" pos:column="59">10</lit:literal><op:operator pos:line="88" pos:column="61">)</op:operator><op:operator pos:line="88" pos:column="62">)</op:operator></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><specifier pos:line="92" pos:column="1">inline</specifier> <name pos:line="92" pos:column="8">bool</name></type> <name pos:line="92" pos:column="13">IsASCII</name><parameter_list pos:line="92" pos:column="20">(<param><decl><type><name pos:line="92" pos:column="21">int</name></type> <name pos:line="92" pos:column="25">ch</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="29">{
	<return pos:line="93" pos:column="9">return <expr><name pos:line="93" pos:column="16">ch</name> <op:operator pos:line="93" pos:column="19">&lt;</op:operator> <lit:literal type="number" pos:line="93" pos:column="21">0x80</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="96" pos:column="1">inline</specifier> <name pos:line="96" pos:column="8">bool</name></type> <name pos:line="96" pos:column="13">IsAlphaNumeric</name><parameter_list pos:line="96" pos:column="27">(<param><decl><type><name pos:line="96" pos:column="28">int</name></type> <name pos:line="96" pos:column="32">ch</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="36">{
	<return pos:line="97" pos:column="9">return
		<expr><op:operator pos:line="98" pos:column="17">(</op:operator><op:operator pos:line="98" pos:column="18">(</op:operator><name pos:line="98" pos:column="19">ch</name> <op:operator pos:line="98" pos:column="22">&gt;=</op:operator> <lit:literal type="char" pos:line="98" pos:column="25">'0'</lit:literal><op:operator pos:line="98" pos:column="28">)</op:operator> <op:operator pos:line="98" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="98" pos:column="33">(</op:operator><name pos:line="98" pos:column="34">ch</name> <op:operator pos:line="98" pos:column="37">&lt;=</op:operator> <lit:literal type="char" pos:line="98" pos:column="40">'9'</lit:literal><op:operator pos:line="98" pos:column="43">)</op:operator><op:operator pos:line="98" pos:column="44">)</op:operator> <op:operator pos:line="98" pos:column="46">||</op:operator>
		<op:operator pos:line="99" pos:column="17">(</op:operator><op:operator pos:line="99" pos:column="18">(</op:operator><name pos:line="99" pos:column="19">ch</name> <op:operator pos:line="99" pos:column="22">&gt;=</op:operator> <lit:literal type="char" pos:line="99" pos:column="25">'a'</lit:literal><op:operator pos:line="99" pos:column="28">)</op:operator> <op:operator pos:line="99" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="99" pos:column="33">(</op:operator><name pos:line="99" pos:column="34">ch</name> <op:operator pos:line="99" pos:column="37">&lt;=</op:operator> <lit:literal type="char" pos:line="99" pos:column="40">'z'</lit:literal><op:operator pos:line="99" pos:column="43">)</op:operator><op:operator pos:line="99" pos:column="44">)</op:operator> <op:operator pos:line="99" pos:column="46">||</op:operator>
		<op:operator pos:line="100" pos:column="17">(</op:operator><op:operator pos:line="100" pos:column="18">(</op:operator><name pos:line="100" pos:column="19">ch</name> <op:operator pos:line="100" pos:column="22">&gt;=</op:operator> <lit:literal type="char" pos:line="100" pos:column="25">'A'</lit:literal><op:operator pos:line="100" pos:column="28">)</op:operator> <op:operator pos:line="100" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="100" pos:column="33">(</op:operator><name pos:line="100" pos:column="34">ch</name> <op:operator pos:line="100" pos:column="37">&lt;=</op:operator> <lit:literal type="char" pos:line="100" pos:column="40">'Z'</lit:literal><op:operator pos:line="100" pos:column="43">)</op:operator><op:operator pos:line="100" pos:column="44">)</op:operator></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="103" pos:column="1">/**
 * Check if a character is a space.
 * This is ASCII specific but is safe with chars &gt;= 0x80.
 */</comment>
<function><type><specifier pos:line="107" pos:column="1">inline</specifier> <name pos:line="107" pos:column="8">bool</name></type> <name pos:line="107" pos:column="13">isspacechar</name><parameter_list pos:line="107" pos:column="24">(<param><decl><type><name pos:line="107" pos:column="25">int</name></type> <name pos:line="107" pos:column="29">ch</name></decl></param>)</parameter_list> <block pos:line="107" pos:column="33">{
    <return pos:line="108" pos:column="5">return <expr><op:operator pos:line="108" pos:column="12">(</op:operator><name pos:line="108" pos:column="13">ch</name> <op:operator pos:line="108" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="108" pos:column="19">' '</lit:literal><op:operator pos:line="108" pos:column="22">)</op:operator> <op:operator pos:line="108" pos:column="24">||</op:operator> <op:operator pos:line="108" pos:column="27">(</op:operator><op:operator pos:line="108" pos:column="28">(</op:operator><name pos:line="108" pos:column="29">ch</name> <op:operator pos:line="108" pos:column="32">&gt;=</op:operator> <lit:literal type="number" pos:line="108" pos:column="35">0x09</lit:literal><op:operator pos:line="108" pos:column="39">)</op:operator> <op:operator pos:line="108" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="108" pos:column="44">(</op:operator><name pos:line="108" pos:column="45">ch</name> <op:operator pos:line="108" pos:column="48">&lt;=</op:operator> <lit:literal type="number" pos:line="108" pos:column="51">0x0d</lit:literal><op:operator pos:line="108" pos:column="55">)</op:operator><op:operator pos:line="108" pos:column="56">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="111" pos:column="1">inline</specifier> <name pos:line="111" pos:column="8">bool</name></type> <name pos:line="111" pos:column="13">iswordchar</name><parameter_list pos:line="111" pos:column="23">(<param><decl><type><name pos:line="111" pos:column="24">int</name></type> <name pos:line="111" pos:column="28">ch</name></decl></param>)</parameter_list> <block pos:line="111" pos:column="32">{
	<return pos:line="112" pos:column="9">return <expr><call><name pos:line="112" pos:column="16">IsASCII</name><argument_list pos:line="112" pos:column="23">(<argument><expr><name pos:line="112" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="112" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="112" pos:column="31">(</op:operator><call><name pos:line="112" pos:column="32">IsAlphaNumeric</name><argument_list pos:line="112" pos:column="46">(<argument><expr><name pos:line="112" pos:column="47">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="112" pos:column="51">||</op:operator> <name pos:line="112" pos:column="54">ch</name> <op:operator pos:line="112" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="60">'.'</lit:literal> <op:operator pos:line="112" pos:column="64">||</op:operator> <name pos:line="112" pos:column="67">ch</name> <op:operator pos:line="112" pos:column="70">==</op:operator> <lit:literal type="char" pos:line="112" pos:column="73">'_'</lit:literal><op:operator pos:line="112" pos:column="76">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="115" pos:column="1">inline</specifier> <name pos:line="115" pos:column="8">bool</name></type> <name pos:line="115" pos:column="13">iswordstart</name><parameter_list pos:line="115" pos:column="24">(<param><decl><type><name pos:line="115" pos:column="25">int</name></type> <name pos:line="115" pos:column="29">ch</name></decl></param>)</parameter_list> <block pos:line="115" pos:column="33">{
	<return pos:line="116" pos:column="9">return <expr><call><name pos:line="116" pos:column="16">IsASCII</name><argument_list pos:line="116" pos:column="23">(<argument><expr><name pos:line="116" pos:column="24">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="116" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="116" pos:column="31">(</op:operator><call><name pos:line="116" pos:column="32">IsAlphaNumeric</name><argument_list pos:line="116" pos:column="46">(<argument><expr><name pos:line="116" pos:column="47">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="116" pos:column="51">||</op:operator> <name pos:line="116" pos:column="54">ch</name> <op:operator pos:line="116" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="116" pos:column="60">'_'</lit:literal><op:operator pos:line="116" pos:column="63">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="119" pos:column="1">inline</specifier> <name pos:line="119" pos:column="8">bool</name></type> <name pos:line="119" pos:column="13">isoperator</name><parameter_list pos:line="119" pos:column="23">(<param><decl><type><name pos:line="119" pos:column="24">int</name></type> <name pos:line="119" pos:column="28">ch</name></decl></param>)</parameter_list> <block pos:line="119" pos:column="32">{
	<if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><call><name pos:line="120" pos:column="13">IsASCII</name><argument_list pos:line="120" pos:column="20">(<argument><expr><name pos:line="120" pos:column="21">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="120" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="120" pos:column="28">IsAlphaNumeric</name><argument_list pos:line="120" pos:column="42">(<argument><expr><name pos:line="120" pos:column="43">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="120" pos:column="47">
		<return pos:line="121" pos:column="17">return <expr><lit:literal type="boolean" pos:line="121" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><name pos:line="122" pos:column="13">ch</name> <op:operator pos:line="122" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="19">'%'</lit:literal> <op:operator pos:line="122" pos:column="23">||</op:operator> <name pos:line="122" pos:column="26">ch</name> <op:operator pos:line="122" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="32">'^'</lit:literal> <op:operator pos:line="122" pos:column="36">||</op:operator> <name pos:line="122" pos:column="39">ch</name> <op:operator pos:line="122" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="45">'&amp;'</lit:literal> <op:operator pos:line="122" pos:column="49">||</op:operator> <name pos:line="122" pos:column="52">ch</name> <op:operator pos:line="122" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="122" pos:column="58">'*'</lit:literal> <op:operator pos:line="122" pos:column="62">||</op:operator>
	        <name pos:line="123" pos:column="17">ch</name> <op:operator pos:line="123" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="123" pos:column="23">'('</lit:literal> <op:operator pos:line="123" pos:column="27">||</op:operator> <name pos:line="123" pos:column="30">ch</name> <op:operator pos:line="123" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="123" pos:column="36">')'</lit:literal> <op:operator pos:line="123" pos:column="40">||</op:operator> <name pos:line="123" pos:column="43">ch</name> <op:operator pos:line="123" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="123" pos:column="49">'-'</lit:literal> <op:operator pos:line="123" pos:column="53">||</op:operator> <name pos:line="123" pos:column="56">ch</name> <op:operator pos:line="123" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="123" pos:column="62">'+'</lit:literal> <op:operator pos:line="123" pos:column="66">||</op:operator>
	        <name pos:line="124" pos:column="17">ch</name> <op:operator pos:line="124" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="23">'='</lit:literal> <op:operator pos:line="124" pos:column="27">||</op:operator> <name pos:line="124" pos:column="30">ch</name> <op:operator pos:line="124" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="36">'|'</lit:literal> <op:operator pos:line="124" pos:column="40">||</op:operator> <name pos:line="124" pos:column="43">ch</name> <op:operator pos:line="124" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="49">'{'</lit:literal> <op:operator pos:line="124" pos:column="53">||</op:operator> <name pos:line="124" pos:column="56">ch</name> <op:operator pos:line="124" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="62">'}'</lit:literal> <op:operator pos:line="124" pos:column="66">||</op:operator>
	        <name pos:line="125" pos:column="17">ch</name> <op:operator pos:line="125" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="23">'['</lit:literal> <op:operator pos:line="125" pos:column="27">||</op:operator> <name pos:line="125" pos:column="30">ch</name> <op:operator pos:line="125" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="36">']'</lit:literal> <op:operator pos:line="125" pos:column="40">||</op:operator> <name pos:line="125" pos:column="43">ch</name> <op:operator pos:line="125" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="49">':'</lit:literal> <op:operator pos:line="125" pos:column="53">||</op:operator> <name pos:line="125" pos:column="56">ch</name> <op:operator pos:line="125" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="62">';'</lit:literal> <op:operator pos:line="125" pos:column="66">||</op:operator>
	        <name pos:line="126" pos:column="17">ch</name> <op:operator pos:line="126" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="23">'&lt;'</lit:literal> <op:operator pos:line="126" pos:column="27">||</op:operator> <name pos:line="126" pos:column="30">ch</name> <op:operator pos:line="126" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="36">'&gt;'</lit:literal> <op:operator pos:line="126" pos:column="40">||</op:operator> <name pos:line="126" pos:column="43">ch</name> <op:operator pos:line="126" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="49">','</lit:literal> <op:operator pos:line="126" pos:column="53">||</op:operator> <name pos:line="126" pos:column="56">ch</name> <op:operator pos:line="126" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="62">'/'</lit:literal> <op:operator pos:line="126" pos:column="66">||</op:operator>
	        <name pos:line="127" pos:column="17">ch</name> <op:operator pos:line="127" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="23">'?'</lit:literal> <op:operator pos:line="127" pos:column="27">||</op:operator> <name pos:line="127" pos:column="30">ch</name> <op:operator pos:line="127" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="36">'!'</lit:literal> <op:operator pos:line="127" pos:column="40">||</op:operator> <name pos:line="127" pos:column="43">ch</name> <op:operator pos:line="127" pos:column="46">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="49">'.'</lit:literal> <op:operator pos:line="127" pos:column="53">||</op:operator> <name pos:line="127" pos:column="56">ch</name> <op:operator pos:line="127" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="127" pos:column="62">'~'</lit:literal></expr>)</condition><then pos:line="127" pos:column="66">
		<return pos:line="128" pos:column="17">return <expr><lit:literal type="boolean" pos:line="128" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="129" pos:column="9">return <expr><lit:literal type="boolean" pos:line="129" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="line" pos:line="132" pos:column="1">// Simple case functions for ASCII.</comment>

<function><type><specifier pos:line="134" pos:column="1">inline</specifier> <name pos:line="134" pos:column="8">char</name></type> <name pos:line="134" pos:column="13">MakeUpperCase</name><parameter_list pos:line="134" pos:column="26">(<param><decl><type><name pos:line="134" pos:column="27">char</name></type> <name pos:line="134" pos:column="32">ch</name></decl></param>)</parameter_list> <block pos:line="134" pos:column="36">{
	<if pos:line="135" pos:column="9">if <condition pos:line="135" pos:column="12">(<expr><name><name pos:line="135" pos:column="13">ch</name> <argument_list pos:line="135" pos:column="16">&lt; <argument><expr><lit:literal type="char" pos:line="135" pos:column="18">'a'</lit:literal> <op:operator pos:line="135" pos:column="22">||</op:operator> <name pos:line="135" pos:column="25">ch</name></expr></argument> &gt;</argument_list></name> <lit:literal type="char" pos:line="135" pos:column="30">'z'</lit:literal></expr>)</condition><then pos:line="135" pos:column="34">
		<return pos:line="136" pos:column="17">return <expr><name pos:line="136" pos:column="24">ch</name></expr>;</return></then>
	<else pos:line="137" pos:column="9">else
		<return pos:line="138" pos:column="17">return <expr><call><name><name pos:line="138" pos:column="24">static_cast</name><argument_list pos:line="138" pos:column="35">&lt;<argument><expr><name pos:line="138" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="138" pos:column="41">(<argument><expr><name pos:line="138" pos:column="42">ch</name> <op:operator pos:line="138" pos:column="45">-</op:operator> <lit:literal type="char" pos:line="138" pos:column="47">'a'</lit:literal> <op:operator pos:line="138" pos:column="51">+</op:operator> <lit:literal type="char" pos:line="138" pos:column="53">'A'</lit:literal></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>

<function_decl><type><name pos:line="141" pos:column="1">int</name></type> <name pos:line="141" pos:column="5">CompareCaseInsensitive</name><parameter_list pos:line="141" pos:column="27">(<param><decl><type><specifier pos:line="141" pos:column="28">const</specifier> <name pos:line="141" pos:column="34">char</name> <type:modifier pos:line="141" pos:column="39">*</type:modifier></type><name pos:line="141" pos:column="40">a</name></decl></param>, <param><decl><type><specifier pos:line="141" pos:column="43">const</specifier> <name pos:line="141" pos:column="49">char</name> <type:modifier pos:line="141" pos:column="54">*</type:modifier></type><name pos:line="141" pos:column="55">b</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="142" pos:column="1">int</name></type> <name pos:line="142" pos:column="5">CompareNCaseInsensitive</name><parameter_list pos:line="142" pos:column="28">(<param><decl><type><specifier pos:line="142" pos:column="29">const</specifier> <name pos:line="142" pos:column="35">char</name> <type:modifier pos:line="142" pos:column="40">*</type:modifier></type><name pos:line="142" pos:column="41">a</name></decl></param>, <param><decl><type><specifier pos:line="142" pos:column="44">const</specifier> <name pos:line="142" pos:column="50">char</name> <type:modifier pos:line="142" pos:column="55">*</type:modifier></type><name pos:line="142" pos:column="56">b</name></decl></param>, <param><decl><type><name pos:line="142" pos:column="59">size_t</name></type> <name pos:line="142" pos:column="66">len</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">ifdef</cpp:directive> <name pos:line="144" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="146" pos:column="1">#<cpp:directive pos:line="146" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="148" pos:column="1">#<cpp:directive pos:line="148" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
