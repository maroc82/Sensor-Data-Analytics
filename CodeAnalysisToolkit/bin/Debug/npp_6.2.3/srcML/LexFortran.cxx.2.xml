<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexFortran.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexFortran.cxx
 ** Lexer for Fortran.
 ** Writen by Chuan-jian Shen, Last changed Sep. 2003
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 1998-2001 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>
<comment type="block" format="doxygen" pos:line="8" pos:column="1">/***************************************/</comment>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<comment type="block" format="doxygen" pos:line="15" pos:column="1">/***************************************/</comment>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>
<comment type="block" format="doxygen" pos:line="26" pos:column="1">/***************************************/</comment>

<cpp:ifdef pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">ifdef</cpp:directive> <name pos:line="28" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="29" pos:column="1">using namespace <name pos:line="29" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:line="32" pos:column="1">/***********************************************/</comment>
<function><type><specifier pos:line="33" pos:column="1">static</specifier> <specifier pos:line="33" pos:column="8">inline</specifier> <name pos:line="33" pos:column="15">bool</name></type> <name pos:line="33" pos:column="20">IsAWordChar</name><parameter_list pos:line="33" pos:column="31">(<param><decl><type><specifier pos:line="33" pos:column="32">const</specifier> <name pos:line="33" pos:column="38">int</name></type> <name pos:line="33" pos:column="42">ch</name></decl></param>)</parameter_list> <block pos:line="33" pos:column="46">{
	<return pos:line="34" pos:column="9">return <expr><op:operator pos:line="34" pos:column="16">(</op:operator><name pos:line="34" pos:column="17">ch</name> <op:operator pos:line="34" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="34" pos:column="22">0x80</lit:literal><op:operator pos:line="34" pos:column="26">)</op:operator> <op:operator pos:line="34" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="34" pos:column="31">(</op:operator><call><name pos:line="34" pos:column="32">isalnum</name><argument_list pos:line="34" pos:column="39">(<argument><expr><name pos:line="34" pos:column="40">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="34" pos:column="44">||</op:operator> <name pos:line="34" pos:column="47">ch</name> <op:operator pos:line="34" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="53">'_'</lit:literal> <op:operator pos:line="34" pos:column="57">||</op:operator> <name pos:line="34" pos:column="60">ch</name> <op:operator pos:line="34" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="34" pos:column="66">'%'</lit:literal><op:operator pos:line="34" pos:column="69">)</op:operator></expr>;</return>
}</block></function>
<comment type="block" format="doxygen" pos:line="36" pos:column="1">/**********************************************/</comment>
<function><type><specifier pos:line="37" pos:column="1">static</specifier> <specifier pos:line="37" pos:column="8">inline</specifier> <name pos:line="37" pos:column="15">bool</name></type> <name pos:line="37" pos:column="20">IsAWordStart</name><parameter_list pos:line="37" pos:column="32">(<param><decl><type><specifier pos:line="37" pos:column="33">const</specifier> <name pos:line="37" pos:column="39">int</name></type> <name pos:line="37" pos:column="43">ch</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="47">{
	<return pos:line="38" pos:column="9">return <expr><op:operator pos:line="38" pos:column="16">(</op:operator><name pos:line="38" pos:column="17">ch</name> <op:operator pos:line="38" pos:column="20">&lt;</op:operator> <lit:literal type="number" pos:line="38" pos:column="22">0x80</lit:literal><op:operator pos:line="38" pos:column="26">)</op:operator> <op:operator pos:line="38" pos:column="28">&amp;&amp;</op:operator> <op:operator pos:line="38" pos:column="31">(</op:operator><call><name pos:line="38" pos:column="32">isalnum</name><argument_list pos:line="38" pos:column="39">(<argument><expr><name pos:line="38" pos:column="40">ch</name></expr></argument>)</argument_list></call><op:operator pos:line="38" pos:column="43">)</op:operator></expr>;</return>
}</block></function>
<comment type="block" format="doxygen" pos:line="40" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="41" pos:column="1">inline</specifier> <name pos:line="41" pos:column="8">bool</name></type> <name pos:line="41" pos:column="13">IsABlank</name><parameter_list pos:line="41" pos:column="21">(<param><decl><type><name pos:line="41" pos:column="22">unsigned</name> <name pos:line="41" pos:column="31">int</name></type> <name pos:line="41" pos:column="35">ch</name></decl></param>)</parameter_list> <block pos:line="41" pos:column="39">{
    <return pos:line="42" pos:column="5">return <expr><op:operator pos:line="42" pos:column="12">(</op:operator><name pos:line="42" pos:column="13">ch</name> <op:operator pos:line="42" pos:column="16">==</op:operator> <lit:literal type="char" pos:line="42" pos:column="19">' '</lit:literal><op:operator pos:line="42" pos:column="22">)</op:operator> <op:operator pos:line="42" pos:column="24">||</op:operator> <op:operator pos:line="42" pos:column="27">(</op:operator><name pos:line="42" pos:column="28">ch</name> <op:operator pos:line="42" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="42" pos:column="34">0x09</lit:literal><op:operator pos:line="42" pos:column="38">)</op:operator> <op:operator pos:line="42" pos:column="40">||</op:operator> <op:operator pos:line="42" pos:column="43">(</op:operator><name pos:line="42" pos:column="44">ch</name> <op:operator pos:line="42" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="42" pos:column="50">0x0b</lit:literal><op:operator pos:line="42" pos:column="54">)</op:operator></expr> ;</return>
}</block></function>
<comment type="block" format="doxygen" pos:line="44" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="45" pos:column="1">inline</specifier> <name pos:line="45" pos:column="8">bool</name></type> <name pos:line="45" pos:column="13">IsALineEnd</name><parameter_list pos:line="45" pos:column="23">(<param><decl><type><name pos:line="45" pos:column="24">char</name></type> <name pos:line="45" pos:column="29">ch</name></decl></param>)</parameter_list> <block pos:line="45" pos:column="33">{
    <return pos:line="46" pos:column="5">return <expr><op:operator pos:line="46" pos:column="12">(</op:operator><op:operator pos:line="46" pos:column="13">(</op:operator><name pos:line="46" pos:column="14">ch</name> <op:operator pos:line="46" pos:column="17">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="20">'\n'</lit:literal><op:operator pos:line="46" pos:column="24">)</op:operator> <op:operator pos:line="46" pos:column="26">||</op:operator> <op:operator pos:line="46" pos:column="29">(</op:operator><name pos:line="46" pos:column="30">ch</name> <op:operator pos:line="46" pos:column="33">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="36">'\r'</lit:literal><op:operator pos:line="46" pos:column="40">)</op:operator><op:operator pos:line="46" pos:column="41">)</op:operator></expr> ;</return>
}</block></function>
<comment type="block" format="doxygen" pos:line="48" pos:column="1">/***************************************/</comment>
<function><type><name pos:line="49" pos:column="1">unsigned</name> <name pos:line="49" pos:column="10">int</name></type> <name pos:line="49" pos:column="14">GetContinuedPos</name><parameter_list pos:line="49" pos:column="29">(<param><decl><type><name pos:line="49" pos:column="30">unsigned</name> <name pos:line="49" pos:column="39">int</name></type> <name pos:line="49" pos:column="43">pos</name></decl></param>, <param><decl><type><name pos:line="49" pos:column="48">Accessor</name> <type:modifier pos:line="49" pos:column="57">&amp;</type:modifier></type><name pos:line="49" pos:column="58">styler</name></decl></param>)</parameter_list> <block pos:line="49" pos:column="66">{
	<while pos:line="50" pos:column="9">while <condition pos:line="50" pos:column="15">(<expr><op:operator pos:line="50" pos:column="16">!</op:operator><call><name pos:line="50" pos:column="17">IsALineEnd</name><argument_list pos:line="50" pos:column="27">(<argument><expr><call><name><name pos:line="50" pos:column="28">styler</name><op:operator pos:line="50" pos:column="34">.</op:operator><name pos:line="50" pos:column="35">SafeGetCharAt</name></name><argument_list pos:line="50" pos:column="48">(<argument><expr><name pos:line="50" pos:column="49">pos</name><op:operator pos:line="50" pos:column="52">++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <continue pos:line="50" pos:column="58">continue;</continue></while>
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><call><name><name pos:line="51" pos:column="13">styler</name><op:operator pos:line="51" pos:column="19">.</op:operator><name pos:line="51" pos:column="20">SafeGetCharAt</name></name><argument_list pos:line="51" pos:column="33">(<argument><expr><name pos:line="51" pos:column="34">pos</name></expr></argument>)</argument_list></call> <op:operator pos:line="51" pos:column="39">==</op:operator> <lit:literal type="char" pos:line="51" pos:column="42">'\n'</lit:literal></expr>)</condition><then pos:line="51" pos:column="47"> <expr_stmt><expr><name pos:line="51" pos:column="48">pos</name><op:operator pos:line="51" pos:column="51">++</op:operator></expr>;</expr_stmt></then></if>
	<while pos:line="52" pos:column="9">while <condition pos:line="52" pos:column="15">(<expr><call><name pos:line="52" pos:column="16">IsABlank</name><argument_list pos:line="52" pos:column="24">(<argument><expr><call><name><name pos:line="52" pos:column="25">styler</name><op:operator pos:line="52" pos:column="31">.</op:operator><name pos:line="52" pos:column="32">SafeGetCharAt</name></name><argument_list pos:line="52" pos:column="45">(<argument><expr><name pos:line="52" pos:column="46">pos</name><op:operator pos:line="52" pos:column="49">++</op:operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <continue pos:line="52" pos:column="55">continue;</continue></while>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">char</name></type> <name pos:line="53" pos:column="14">chCur</name> <init pos:line="53" pos:column="20">= <expr><call><name><name pos:line="53" pos:column="22">styler</name><op:operator pos:line="53" pos:column="28">.</op:operator><name pos:line="53" pos:column="29">SafeGetCharAt</name></name><argument_list pos:line="53" pos:column="42">(<argument><expr><name pos:line="53" pos:column="43">pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">chCur</name> <op:operator pos:line="54" pos:column="19">==</op:operator> <lit:literal type="char" pos:line="54" pos:column="22">'&amp;'</lit:literal></expr>)</condition><then pos:line="54" pos:column="26"> <block pos:line="54" pos:column="27">{
		<while pos:line="55" pos:column="17">while <condition pos:line="55" pos:column="23">(<expr><call><name pos:line="55" pos:column="24">IsABlank</name><argument_list pos:line="55" pos:column="32">(<argument><expr><call><name><name pos:line="55" pos:column="33">styler</name><op:operator pos:line="55" pos:column="39">.</op:operator><name pos:line="55" pos:column="40">SafeGetCharAt</name></name><argument_list pos:line="55" pos:column="53">(<argument><expr><op:operator pos:line="55" pos:column="54">++</op:operator><name pos:line="55" pos:column="56">pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <continue pos:line="55" pos:column="63">continue;</continue></while>
		<return pos:line="56" pos:column="17">return <expr><name pos:line="56" pos:column="24">pos</name></expr>;</return>
	}</block></then> <else pos:line="57" pos:column="11">else <block pos:line="57" pos:column="16">{
		<return pos:line="58" pos:column="17">return <expr><name pos:line="58" pos:column="24">pos</name></expr>;</return>
	}</block></else></if>
}</block></function>
<comment type="block" format="doxygen" pos:line="61" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="62" pos:column="1">static</specifier> <name pos:line="62" pos:column="8">void</name></type> <name pos:line="62" pos:column="13">ColouriseFortranDoc</name><parameter_list pos:line="62" pos:column="32">(<param><decl><type><name pos:line="62" pos:column="33">unsigned</name> <name pos:line="62" pos:column="42">int</name></type> <name pos:line="62" pos:column="46">startPos</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="56">int</name></type> <name pos:line="62" pos:column="60">length</name></decl></param>, <param><decl><type><name pos:line="62" pos:column="68">int</name></type> <name pos:line="62" pos:column="72">initStyle</name></decl></param>,
			<param><decl><type><name pos:line="63" pos:column="25">WordList</name> <type:modifier pos:line="63" pos:column="34">*</type:modifier></type><name><name pos:line="63" pos:column="35">keywordlists</name><index pos:line="63" pos:column="47">[]</index></name></decl></param>, <param><decl><type><name pos:line="63" pos:column="51">Accessor</name> <type:modifier pos:line="63" pos:column="60">&amp;</type:modifier></type><name pos:line="63" pos:column="61">styler</name></decl></param>, <param><decl><type><name pos:line="63" pos:column="69">bool</name></type> <name pos:line="63" pos:column="74">isFixFormat</name></decl></param>)</parameter_list> <block pos:line="63" pos:column="87">{
	<decl_stmt><decl><type><name pos:line="64" pos:column="9">WordList</name> <type:modifier pos:line="64" pos:column="18">&amp;</type:modifier></type><name pos:line="64" pos:column="19">keywords</name> <init pos:line="64" pos:column="28">= <expr><op:operator pos:line="64" pos:column="30">*</op:operator><name><name pos:line="64" pos:column="31">keywordlists</name><index pos:line="64" pos:column="43">[<expr><lit:literal type="number" pos:line="64" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="65" pos:column="9">WordList</name> <type:modifier pos:line="65" pos:column="18">&amp;</type:modifier></type><name pos:line="65" pos:column="19">keywords2</name> <init pos:line="65" pos:column="29">= <expr><op:operator pos:line="65" pos:column="31">*</op:operator><name><name pos:line="65" pos:column="32">keywordlists</name><index pos:line="65" pos:column="44">[<expr><lit:literal type="number" pos:line="65" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">WordList</name> <type:modifier pos:line="66" pos:column="18">&amp;</type:modifier></type><name pos:line="66" pos:column="19">keywords3</name> <init pos:line="66" pos:column="29">= <expr><op:operator pos:line="66" pos:column="31">*</op:operator><name><name pos:line="66" pos:column="32">keywordlists</name><index pos:line="66" pos:column="44">[<expr><lit:literal type="number" pos:line="66" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="block" format="doxygen" pos:line="67" pos:column="9">/***************************************/</comment>
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">int</name></type> <name pos:line="68" pos:column="13">posLineStart</name> <init pos:line="68" pos:column="26">= <expr><lit:literal type="number" pos:line="68" pos:column="28">0</lit:literal></expr></init><op:operator pos:line="68" pos:column="29">,</op:operator> <name pos:line="68" pos:column="31">numNonBlank</name> <init pos:line="68" pos:column="43">= <expr><lit:literal type="number" pos:line="68" pos:column="45">0</lit:literal></expr></init><op:operator pos:line="68" pos:column="46">,</op:operator> <name pos:line="68" pos:column="48">prevState</name> <init pos:line="68" pos:column="58">= <expr><lit:literal type="number" pos:line="68" pos:column="60">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">int</name></type> <name pos:line="69" pos:column="13">endPos</name> <init pos:line="69" pos:column="20">= <expr><name pos:line="69" pos:column="22">startPos</name> <op:operator pos:line="69" pos:column="31">+</op:operator> <name pos:line="69" pos:column="33">length</name></expr></init></decl>;</decl_stmt>
	<comment type="block" format="doxygen" pos:line="70" pos:column="9">/***************************************/</comment>
	<comment type="line" pos:line="71" pos:column="9">// backtrack to the nearest keyword</comment>
	<while pos:line="72" pos:column="9">while <condition pos:line="72" pos:column="15">(<expr><op:operator pos:line="72" pos:column="16">(</op:operator><name pos:line="72" pos:column="17">startPos</name> <op:operator pos:line="72" pos:column="26">&gt;</op:operator> <lit:literal type="number" pos:line="72" pos:column="28">1</lit:literal><op:operator pos:line="72" pos:column="29">)</op:operator> <op:operator pos:line="72" pos:column="31">&amp;&amp;</op:operator> <op:operator pos:line="72" pos:column="34">(</op:operator><call><name><name pos:line="72" pos:column="35">styler</name><op:operator pos:line="72" pos:column="41">.</op:operator><name pos:line="72" pos:column="42">StyleAt</name></name><argument_list pos:line="72" pos:column="49">(<argument><expr><name pos:line="72" pos:column="50">startPos</name></expr></argument>)</argument_list></call> <op:operator pos:line="72" pos:column="60">!=</op:operator> <name pos:line="72" pos:column="63">SCE_F_WORD</name><op:operator pos:line="72" pos:column="73">)</op:operator></expr>)</condition> <block pos:line="72" pos:column="76">{
		<expr_stmt><expr><name pos:line="73" pos:column="17">startPos</name><op:operator pos:line="73" pos:column="25">--</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name pos:line="75" pos:column="9">startPos</name> <op:operator pos:line="75" pos:column="18">=</op:operator> <call><name><name pos:line="75" pos:column="20">styler</name><op:operator pos:line="75" pos:column="26">.</op:operator><name pos:line="75" pos:column="27">LineStart</name></name><argument_list pos:line="75" pos:column="36">(<argument><expr><call><name><name pos:line="75" pos:column="37">styler</name><op:operator pos:line="75" pos:column="43">.</op:operator><name pos:line="75" pos:column="44">GetLine</name></name><argument_list pos:line="75" pos:column="51">(<argument><expr><name pos:line="75" pos:column="52">startPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="76" pos:column="9">initStyle</name> <op:operator pos:line="76" pos:column="19">=</op:operator> <call><name><name pos:line="76" pos:column="21">styler</name><op:operator pos:line="76" pos:column="27">.</op:operator><name pos:line="76" pos:column="28">StyleAt</name></name><argument_list pos:line="76" pos:column="35">(<argument><expr><name pos:line="76" pos:column="36">startPos</name> <op:operator pos:line="76" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="76" pos:column="47">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="77" pos:column="9">StyleContext</name></type> <name pos:line="77" pos:column="22">sc</name><argument_list pos:line="77" pos:column="24">(<argument><expr><name pos:line="77" pos:column="25">startPos</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="35">endPos</name><op:operator pos:line="77" pos:column="41">-</op:operator><name pos:line="77" pos:column="42">startPos</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="52">initStyle</name></expr></argument>, <argument><expr><name pos:line="77" pos:column="63">styler</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<comment type="block" format="doxygen" pos:line="78" pos:column="9">/***************************************/</comment>
	<for pos:line="79" pos:column="9">for (<init pos:line="79" pos:column="14">;</init> <condition><expr><call><name><name pos:line="79" pos:column="16">sc</name><op:operator pos:line="79" pos:column="18">.</op:operator><name pos:line="79" pos:column="19">More</name></name><argument_list pos:line="79" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="79" pos:column="27">sc</name><op:operator pos:line="79" pos:column="29">.</op:operator><name pos:line="79" pos:column="30">Forward</name></name><argument_list pos:line="79" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="79" pos:column="41">{
		<comment type="line" pos:line="80" pos:column="17">// remember the start position of the line</comment>
		<if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name><name pos:line="81" pos:column="21">sc</name><op:operator pos:line="81" pos:column="23">.</op:operator><name pos:line="81" pos:column="24">atLineStart</name></name></expr>)</condition><then pos:line="81" pos:column="36"> <block pos:line="81" pos:column="37">{
			<expr_stmt><expr><name pos:line="82" pos:column="25">posLineStart</name> <op:operator pos:line="82" pos:column="38">=</op:operator> <name><name pos:line="82" pos:column="40">sc</name><op:operator pos:line="82" pos:column="42">.</op:operator><name pos:line="82" pos:column="43">currentPos</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="83" pos:column="25">numNonBlank</name> <op:operator pos:line="83" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="83" pos:column="39">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="84" pos:column="25">sc</name><op:operator pos:line="84" pos:column="27">.</op:operator><name pos:line="84" pos:column="28">SetState</name></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name pos:line="84" pos:column="37">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><op:operator pos:line="86" pos:column="21">!</op:operator><call><name pos:line="86" pos:column="22">IsASpaceOrTab</name><argument_list pos:line="86" pos:column="35">(<argument><expr><name><name pos:line="86" pos:column="36">sc</name><op:operator pos:line="86" pos:column="38">.</op:operator><name pos:line="86" pos:column="39">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="43"> <expr_stmt><expr><name pos:line="86" pos:column="44">numNonBlank</name> <op:operator pos:line="86" pos:column="56">++</op:operator></expr>;</expr_stmt></then></if>
		<comment type="block" format="doxygen" pos:line="87" pos:column="17">/***********************************************/</comment>
		<comment type="line" pos:line="88" pos:column="17">// Handle the fix format generically</comment>
		<decl_stmt><decl><type><name pos:line="89" pos:column="17">int</name></type> <name pos:line="89" pos:column="21">toLineStart</name> <init pos:line="89" pos:column="33">= <expr><name><name pos:line="89" pos:column="35">sc</name><op:operator pos:line="89" pos:column="37">.</op:operator><name pos:line="89" pos:column="38">currentPos</name></name> <op:operator pos:line="89" pos:column="49">-</op:operator> <name pos:line="89" pos:column="51">posLineStart</name></expr></init></decl>;</decl_stmt>
		<if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><name pos:line="90" pos:column="21">isFixFormat</name> <op:operator pos:line="90" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="90" pos:column="36">(</op:operator><name><name pos:line="90" pos:column="37">toLineStart</name> <argument_list pos:line="90" pos:column="49">&lt; <argument><expr><lit:literal type="number" pos:line="90" pos:column="51">6</lit:literal> <op:operator pos:line="90" pos:column="53">||</op:operator> <name pos:line="90" pos:column="56">toLineStart</name></expr></argument> &gt;</argument_list></name> <lit:literal type="number" pos:line="90" pos:column="70">72</lit:literal><op:operator pos:line="90" pos:column="72">)</op:operator></expr>)</condition><then pos:line="90" pos:column="74"> <block pos:line="90" pos:column="75">{
			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><op:operator pos:line="91" pos:column="29">(</op:operator><name pos:line="91" pos:column="30">toLineStart</name> <op:operator pos:line="91" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="91" pos:column="45">0</lit:literal> <op:operator pos:line="91" pos:column="47">&amp;&amp;</op:operator> <op:operator pos:line="91" pos:column="50">(</op:operator><call><name pos:line="91" pos:column="51">tolower</name><argument_list pos:line="91" pos:column="58">(<argument><expr><name><name pos:line="91" pos:column="59">sc</name><op:operator pos:line="91" pos:column="61">.</op:operator><name pos:line="91" pos:column="62">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="91" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="69">'c'</lit:literal> <op:operator pos:line="91" pos:column="73">||</op:operator> <name><name pos:line="91" pos:column="76">sc</name><op:operator pos:line="91" pos:column="78">.</op:operator><name pos:line="91" pos:column="79">ch</name></name> <op:operator pos:line="91" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="85">'*'</lit:literal><op:operator pos:line="91" pos:column="88">)</op:operator><op:operator pos:line="91" pos:column="89">)</op:operator> <op:operator pos:line="91" pos:column="91">||</op:operator> <name><name pos:line="91" pos:column="94">sc</name><op:operator pos:line="91" pos:column="96">.</op:operator><name pos:line="91" pos:column="97">ch</name></name> <op:operator pos:line="91" pos:column="100">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="103">'!'</lit:literal></expr>)</condition><then pos:line="91" pos:column="107"> <block pos:line="91" pos:column="108">{
                <if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><call><name><name pos:line="92" pos:column="21">sc</name><op:operator pos:line="92" pos:column="23">.</op:operator><name pos:line="92" pos:column="24">MatchIgnoreCase</name></name><argument_list pos:line="92" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="40">"cdec$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="92" pos:column="49">||</op:operator> <call><name><name pos:line="92" pos:column="52">sc</name><op:operator pos:line="92" pos:column="54">.</op:operator><name pos:line="92" pos:column="55">MatchIgnoreCase</name></name><argument_list pos:line="92" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="71">"*dec$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="92" pos:column="80">||</op:operator> <call><name><name pos:line="92" pos:column="83">sc</name><op:operator pos:line="92" pos:column="85">.</op:operator><name pos:line="92" pos:column="86">MatchIgnoreCase</name></name><argument_list pos:line="92" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="92" pos:column="102">"!dec$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="92" pos:column="111">||</op:operator>
                    <call><name><name pos:line="93" pos:column="21">sc</name><op:operator pos:line="93" pos:column="23">.</op:operator><name pos:line="93" pos:column="24">MatchIgnoreCase</name></name><argument_list pos:line="93" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="40">"cdir$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="49">||</op:operator> <call><name><name pos:line="93" pos:column="52">sc</name><op:operator pos:line="93" pos:column="54">.</op:operator><name pos:line="93" pos:column="55">MatchIgnoreCase</name></name><argument_list pos:line="93" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="71">"*dir$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="80">||</op:operator> <call><name><name pos:line="93" pos:column="83">sc</name><op:operator pos:line="93" pos:column="85">.</op:operator><name pos:line="93" pos:column="86">MatchIgnoreCase</name></name><argument_list pos:line="93" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="93" pos:column="102">"!dir$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="93" pos:column="111">||</op:operator>
                    <call><name><name pos:line="94" pos:column="21">sc</name><op:operator pos:line="94" pos:column="23">.</op:operator><name pos:line="94" pos:column="24">MatchIgnoreCase</name></name><argument_list pos:line="94" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="40">"cms$"</lit:literal></expr></argument>)</argument_list></call>  <op:operator pos:line="94" pos:column="49">||</op:operator> <call><name><name pos:line="94" pos:column="52">sc</name><op:operator pos:line="94" pos:column="54">.</op:operator><name pos:line="94" pos:column="55">MatchIgnoreCase</name></name><argument_list pos:line="94" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="71">"*ms$"</lit:literal></expr></argument>)</argument_list></call>  <op:operator pos:line="94" pos:column="80">||</op:operator> <call><name><name pos:line="94" pos:column="83">sc</name><op:operator pos:line="94" pos:column="85">.</op:operator><name pos:line="94" pos:column="86">MatchIgnoreCase</name></name><argument_list pos:line="94" pos:column="101">(<argument><expr><lit:literal type="string" pos:line="94" pos:column="102">"!ms$"</lit:literal></expr></argument>)</argument_list></call>  <op:operator pos:line="94" pos:column="111">||</op:operator>
                    <name><name pos:line="95" pos:column="21">sc</name><op:operator pos:line="95" pos:column="23">.</op:operator><name pos:line="95" pos:column="24">chNext</name></name> <op:operator pos:line="95" pos:column="31">==</op:operator> <lit:literal type="char" pos:line="95" pos:column="34">'$'</lit:literal></expr>)</condition><then pos:line="95" pos:column="38"> <block pos:line="95" pos:column="39">{
                    <expr_stmt><expr><call><name><name pos:line="96" pos:column="21">sc</name><op:operator pos:line="96" pos:column="23">.</op:operator><name pos:line="96" pos:column="24">SetState</name></name><argument_list pos:line="96" pos:column="32">(<argument><expr><name pos:line="96" pos:column="33">SCE_F_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="97" pos:column="35">else <block pos:line="97" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="98" pos:column="41">sc</name><op:operator pos:line="98" pos:column="43">.</op:operator><name pos:line="98" pos:column="44">SetState</name></name><argument_list pos:line="98" pos:column="52">(<argument><expr><name pos:line="98" pos:column="53">SCE_F_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>

				<while pos:line="101" pos:column="33">while <condition pos:line="101" pos:column="39">(<expr><op:operator pos:line="101" pos:column="40">!</op:operator><name><name pos:line="101" pos:column="41">sc</name><op:operator pos:line="101" pos:column="43">.</op:operator><name pos:line="101" pos:column="44">atLineEnd</name></name> <op:operator pos:line="101" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="101" pos:column="57">sc</name><op:operator pos:line="101" pos:column="59">.</op:operator><name pos:line="101" pos:column="60">More</name></name><argument_list pos:line="101" pos:column="64">()</argument_list></call></expr>)</condition> <expr_stmt><expr><call><name><name pos:line="101" pos:column="68">sc</name><op:operator pos:line="101" pos:column="70">.</op:operator><name pos:line="101" pos:column="71">Forward</name></name><argument_list pos:line="101" pos:column="78">()</argument_list></call></expr>;</expr_stmt></while> <comment type="line" pos:line="101" pos:column="82">// Until line end</comment>
			}</block></then> <else pos:line="102" pos:column="27">else <if pos:line="102" pos:column="32">if <condition pos:line="102" pos:column="35">(<expr><name pos:line="102" pos:column="36">toLineStart</name> <op:operator pos:line="102" pos:column="48">&gt;</op:operator> <lit:literal type="number" pos:line="102" pos:column="50">72</lit:literal></expr>)</condition><then pos:line="102" pos:column="53"> <block pos:line="102" pos:column="54">{
				<expr_stmt><expr><call><name><name pos:line="103" pos:column="33">sc</name><op:operator pos:line="103" pos:column="35">.</op:operator><name pos:line="103" pos:column="36">SetState</name></name><argument_list pos:line="103" pos:column="44">(<argument><expr><name pos:line="103" pos:column="45">SCE_F_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="104" pos:column="33">while <condition pos:line="104" pos:column="39">(<expr><op:operator pos:line="104" pos:column="40">!</op:operator><name><name pos:line="104" pos:column="41">sc</name><op:operator pos:line="104" pos:column="43">.</op:operator><name pos:line="104" pos:column="44">atLineEnd</name></name> <op:operator pos:line="104" pos:column="54">&amp;&amp;</op:operator> <call><name><name pos:line="104" pos:column="57">sc</name><op:operator pos:line="104" pos:column="59">.</op:operator><name pos:line="104" pos:column="60">More</name></name><argument_list pos:line="104" pos:column="64">()</argument_list></call></expr>)</condition> <expr_stmt><expr><call><name><name pos:line="104" pos:column="68">sc</name><op:operator pos:line="104" pos:column="70">.</op:operator><name pos:line="104" pos:column="71">Forward</name></name><argument_list pos:line="104" pos:column="78">()</argument_list></call></expr>;</expr_stmt></while> <comment type="line" pos:line="104" pos:column="82">// Until line end</comment>
			}</block></then> <else pos:line="105" pos:column="27">else <if pos:line="105" pos:column="32">if <condition pos:line="105" pos:column="35">(<expr><name pos:line="105" pos:column="36">toLineStart</name> <op:operator pos:line="105" pos:column="48">&lt;</op:operator> <lit:literal type="number" pos:line="105" pos:column="50">5</lit:literal></expr>)</condition><then pos:line="105" pos:column="52"> <block pos:line="105" pos:column="53">{
				<if pos:line="106" pos:column="33">if <condition pos:line="106" pos:column="36">(<expr><call><name pos:line="106" pos:column="37">IsADigit</name><argument_list pos:line="106" pos:column="45">(<argument><expr><name><name pos:line="106" pos:column="46">sc</name><op:operator pos:line="106" pos:column="48">.</op:operator><name pos:line="106" pos:column="49">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="106" pos:column="53">
					<expr_stmt><expr><call><name><name pos:line="107" pos:column="41">sc</name><op:operator pos:line="107" pos:column="43">.</op:operator><name pos:line="107" pos:column="44">SetState</name></name><argument_list pos:line="107" pos:column="52">(<argument><expr><name pos:line="107" pos:column="53">SCE_F_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="108" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="109" pos:column="41">sc</name><op:operator pos:line="109" pos:column="43">.</op:operator><name pos:line="109" pos:column="44">SetState</name></name><argument_list pos:line="109" pos:column="52">(<argument><expr><name pos:line="109" pos:column="53">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then> <else pos:line="110" pos:column="27">else <if pos:line="110" pos:column="32">if <condition pos:line="110" pos:column="35">(<expr><name pos:line="110" pos:column="36">toLineStart</name> <op:operator pos:line="110" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="110" pos:column="51">5</lit:literal></expr>)</condition><then pos:line="110" pos:column="53"> <block pos:line="110" pos:column="54">{
				<if pos:line="111" pos:column="33">if <condition pos:line="111" pos:column="36">(<expr><op:operator pos:line="111" pos:column="37">!</op:operator><call><name pos:line="111" pos:column="38">IsASpace</name><argument_list pos:line="111" pos:column="46">(<argument><expr><name><name pos:line="111" pos:column="47">sc</name><op:operator pos:line="111" pos:column="49">.</op:operator><name pos:line="111" pos:column="50">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="111" pos:column="54">&amp;&amp;</op:operator> <name><name pos:line="111" pos:column="57">sc</name><op:operator pos:line="111" pos:column="59">.</op:operator><name pos:line="111" pos:column="60">ch</name></name> <op:operator pos:line="111" pos:column="63">!=</op:operator> <lit:literal type="char" pos:line="111" pos:column="66">'0'</lit:literal></expr>)</condition><then pos:line="111" pos:column="70"> <block pos:line="111" pos:column="71">{
					<expr_stmt><expr><call><name><name pos:line="112" pos:column="41">sc</name><op:operator pos:line="112" pos:column="43">.</op:operator><name pos:line="112" pos:column="44">SetState</name></name><argument_list pos:line="112" pos:column="52">(<argument><expr><name pos:line="112" pos:column="53">SCE_F_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="113" pos:column="41">sc</name><op:operator pos:line="113" pos:column="43">.</op:operator><name pos:line="113" pos:column="44">ForwardSetState</name></name><argument_list pos:line="113" pos:column="59">(<argument><expr><name pos:line="113" pos:column="60">prevState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="114" pos:column="35">else
					<expr_stmt><expr><call><name><name pos:line="115" pos:column="41">sc</name><op:operator pos:line="115" pos:column="43">.</op:operator><name pos:line="115" pos:column="44">SetState</name></name><argument_list pos:line="115" pos:column="52">(<argument><expr><name pos:line="115" pos:column="53">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then></if></else></if></else></if></else></if>
			<continue pos:line="117" pos:column="25">continue;</continue>
		}</block></then></if>
		<comment type="block" format="doxygen" pos:line="119" pos:column="17">/***************************************/</comment>
		<comment type="line" pos:line="120" pos:column="17">// Handle line continuation generically.</comment>
		<if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><op:operator pos:line="121" pos:column="21">!</op:operator><name pos:line="121" pos:column="22">isFixFormat</name> <op:operator pos:line="121" pos:column="34">&amp;&amp;</op:operator> <name><name pos:line="121" pos:column="37">sc</name><op:operator pos:line="121" pos:column="39">.</op:operator><name pos:line="121" pos:column="40">ch</name></name> <op:operator pos:line="121" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="121" pos:column="46">'&amp;'</lit:literal></expr>)</condition><then pos:line="121" pos:column="50"> <block pos:line="121" pos:column="51">{
			<decl_stmt><decl><type><name pos:line="122" pos:column="25">char</name></type> <name pos:line="122" pos:column="30">chTemp</name> <init pos:line="122" pos:column="37">= <expr><lit:literal type="char" pos:line="122" pos:column="39">' '</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="123" pos:column="25">int</name></type> <name pos:line="123" pos:column="29">j</name> <init pos:line="123" pos:column="31">= <expr><lit:literal type="number" pos:line="123" pos:column="33">1</lit:literal></expr></init></decl>;</decl_stmt>
			<while pos:line="124" pos:column="25">while <condition pos:line="124" pos:column="31">(<expr><call><name pos:line="124" pos:column="32">IsABlank</name><argument_list pos:line="124" pos:column="40">(<argument><expr><name pos:line="124" pos:column="41">chTemp</name></expr></argument>)</argument_list></call> <op:operator pos:line="124" pos:column="49">&amp;&amp;</op:operator> <name pos:line="124" pos:column="52">j</name><op:operator pos:line="124" pos:column="53">&lt;</op:operator><lit:literal type="number" pos:line="124" pos:column="54">132</lit:literal></expr>)</condition> <block pos:line="124" pos:column="59">{
				<expr_stmt><expr><name pos:line="125" pos:column="33">chTemp</name> <op:operator pos:line="125" pos:column="40">=</op:operator> <call><name><name pos:line="125" pos:column="42">static_cast</name><argument_list pos:line="125" pos:column="53">&lt;<argument><expr><name pos:line="125" pos:column="54">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="125" pos:column="59">(<argument><expr><call><name><name pos:line="125" pos:column="60">sc</name><op:operator pos:line="125" pos:column="62">.</op:operator><name pos:line="125" pos:column="63">GetRelative</name></name><argument_list pos:line="125" pos:column="74">(<argument><expr><name pos:line="125" pos:column="75">j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="126" pos:column="33">j</name><op:operator pos:line="126" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<if pos:line="128" pos:column="25">if <condition pos:line="128" pos:column="28">(<expr><name pos:line="128" pos:column="29">chTemp</name> <op:operator pos:line="128" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="39">'!'</lit:literal></expr>)</condition><then pos:line="128" pos:column="43"> <block pos:line="128" pos:column="44">{
				<expr_stmt><expr><call><name><name pos:line="129" pos:column="33">sc</name><op:operator pos:line="129" pos:column="35">.</op:operator><name pos:line="129" pos:column="36">SetState</name></name><argument_list pos:line="129" pos:column="44">(<argument><expr><name pos:line="129" pos:column="45">SCE_F_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="130" pos:column="33">if <condition pos:line="130" pos:column="36">(<expr><name><name pos:line="130" pos:column="37">sc</name><op:operator pos:line="130" pos:column="39">.</op:operator><name pos:line="130" pos:column="40">chNext</name></name> <op:operator pos:line="130" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="130" pos:column="50">'!'</lit:literal></expr>)</condition><then pos:line="130" pos:column="54"> <expr_stmt><expr><call><name><name pos:line="130" pos:column="55">sc</name><op:operator pos:line="130" pos:column="57">.</op:operator><name pos:line="130" pos:column="58">ForwardSetState</name></name><argument_list pos:line="130" pos:column="73">(<argument><expr><name pos:line="130" pos:column="74">SCE_F_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="131" pos:column="27">else <if pos:line="131" pos:column="32">if <condition pos:line="131" pos:column="35">(<expr><name pos:line="131" pos:column="36">chTemp</name> <op:operator pos:line="131" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="46">'\r'</lit:literal> <op:operator pos:line="131" pos:column="51">||</op:operator> <name pos:line="131" pos:column="54">chTemp</name> <op:operator pos:line="131" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="131" pos:column="64">'\n'</lit:literal></expr>)</condition><then pos:line="131" pos:column="69"> <block pos:line="131" pos:column="70">{
				<decl_stmt><decl><type><name pos:line="132" pos:column="33">int</name></type> <name pos:line="132" pos:column="37">currentState</name> <init pos:line="132" pos:column="50">= <expr><name><name pos:line="132" pos:column="52">sc</name><op:operator pos:line="132" pos:column="54">.</op:operator><name pos:line="132" pos:column="55">state</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="133" pos:column="33">sc</name><op:operator pos:line="133" pos:column="35">.</op:operator><name pos:line="133" pos:column="36">SetState</name></name><argument_list pos:line="133" pos:column="44">(<argument><expr><name pos:line="133" pos:column="45">SCE_F_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="134" pos:column="33">sc</name><op:operator pos:line="134" pos:column="35">.</op:operator><name pos:line="134" pos:column="36">ForwardSetState</name></name><argument_list pos:line="134" pos:column="51">(<argument><expr><name pos:line="134" pos:column="52">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while pos:line="135" pos:column="33">while <condition pos:line="135" pos:column="39">(<expr><call><name pos:line="135" pos:column="40">IsASpace</name><argument_list pos:line="135" pos:column="48">(<argument><expr><name><name pos:line="135" pos:column="49">sc</name><op:operator pos:line="135" pos:column="51">.</op:operator><name pos:line="135" pos:column="52">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="135" pos:column="56">&amp;&amp;</op:operator> <call><name><name pos:line="135" pos:column="59">sc</name><op:operator pos:line="135" pos:column="61">.</op:operator><name pos:line="135" pos:column="62">More</name></name><argument_list pos:line="135" pos:column="66">()</argument_list></call></expr>)</condition> <expr_stmt><expr><call><name><name pos:line="135" pos:column="70">sc</name><op:operator pos:line="135" pos:column="72">.</op:operator><name pos:line="135" pos:column="73">Forward</name></name><argument_list pos:line="135" pos:column="80">()</argument_list></call></expr>;</expr_stmt></while>
				<if pos:line="136" pos:column="33">if <condition pos:line="136" pos:column="36">(<expr><name><name pos:line="136" pos:column="37">sc</name><op:operator pos:line="136" pos:column="39">.</op:operator><name pos:line="136" pos:column="40">ch</name></name> <op:operator pos:line="136" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="136" pos:column="46">'&amp;'</lit:literal></expr>)</condition><then pos:line="136" pos:column="50"> <block pos:line="136" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="137" pos:column="41">sc</name><op:operator pos:line="137" pos:column="43">.</op:operator><name pos:line="137" pos:column="44">SetState</name></name><argument_list pos:line="137" pos:column="52">(<argument><expr><name pos:line="137" pos:column="53">SCE_F_CONTINUATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="138" pos:column="41">sc</name><op:operator pos:line="138" pos:column="43">.</op:operator><name pos:line="138" pos:column="44">Forward</name></name><argument_list pos:line="138" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name pos:line="140" pos:column="33">sc</name><op:operator pos:line="140" pos:column="35">.</op:operator><name pos:line="140" pos:column="36">SetState</name></name><argument_list pos:line="140" pos:column="44">(<argument><expr><name pos:line="140" pos:column="45">currentState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then></if>
		<comment type="block" format="doxygen" pos:line="143" pos:column="17">/***************************************/</comment>
		<comment type="line" pos:line="144" pos:column="17">// Determine if the current state should terminate.</comment>
		<if pos:line="145" pos:column="17">if <condition pos:line="145" pos:column="20">(<expr><name><name pos:line="145" pos:column="21">sc</name><op:operator pos:line="145" pos:column="23">.</op:operator><name pos:line="145" pos:column="24">state</name></name> <op:operator pos:line="145" pos:column="30">==</op:operator> <name pos:line="145" pos:column="33">SCE_F_OPERATOR</name></expr>)</condition><then pos:line="145" pos:column="48"> <block pos:line="145" pos:column="49">{
			<expr_stmt><expr><call><name><name pos:line="146" pos:column="25">sc</name><op:operator pos:line="146" pos:column="27">.</op:operator><name pos:line="146" pos:column="28">SetState</name></name><argument_list pos:line="146" pos:column="36">(<argument><expr><name pos:line="146" pos:column="37">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="147" pos:column="19">else <if pos:line="147" pos:column="24">if <condition pos:line="147" pos:column="27">(<expr><name><name pos:line="147" pos:column="28">sc</name><op:operator pos:line="147" pos:column="30">.</op:operator><name pos:line="147" pos:column="31">state</name></name> <op:operator pos:line="147" pos:column="37">==</op:operator> <name pos:line="147" pos:column="40">SCE_F_NUMBER</name></expr>)</condition><then pos:line="147" pos:column="53"> <block pos:line="147" pos:column="54">{
			<if pos:line="148" pos:column="25">if <condition pos:line="148" pos:column="28">(<expr><op:operator pos:line="148" pos:column="29">!</op:operator><op:operator pos:line="148" pos:column="30">(</op:operator><call><name pos:line="148" pos:column="31">IsAWordChar</name><argument_list pos:line="148" pos:column="42">(<argument><expr><name><name pos:line="148" pos:column="43">sc</name><op:operator pos:line="148" pos:column="45">.</op:operator><name pos:line="148" pos:column="46">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="148" pos:column="50">||</op:operator> <name><name pos:line="148" pos:column="53">sc</name><op:operator pos:line="148" pos:column="55">.</op:operator><name pos:line="148" pos:column="56">ch</name></name><op:operator pos:line="148" pos:column="58">==</op:operator><lit:literal type="char" pos:line="148" pos:column="60">'\''</lit:literal> <op:operator pos:line="148" pos:column="65">||</op:operator> <name><name pos:line="148" pos:column="68">sc</name><op:operator pos:line="148" pos:column="70">.</op:operator><name pos:line="148" pos:column="71">ch</name></name><op:operator pos:line="148" pos:column="73">==</op:operator><lit:literal type="char" pos:line="148" pos:column="75">'\"'</lit:literal> <op:operator pos:line="148" pos:column="80">||</op:operator> <name><name pos:line="148" pos:column="83">sc</name><op:operator pos:line="148" pos:column="85">.</op:operator><name pos:line="148" pos:column="86">ch</name></name><op:operator pos:line="148" pos:column="88">==</op:operator><lit:literal type="char" pos:line="148" pos:column="90">'.'</lit:literal><op:operator pos:line="148" pos:column="93">)</op:operator></expr>)</condition><then pos:line="148" pos:column="95"> <block pos:line="148" pos:column="96">{
				<expr_stmt><expr><call><name><name pos:line="149" pos:column="33">sc</name><op:operator pos:line="149" pos:column="35">.</op:operator><name pos:line="149" pos:column="36">SetState</name></name><argument_list pos:line="149" pos:column="44">(<argument><expr><name pos:line="149" pos:column="45">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="151" pos:column="19">else <if pos:line="151" pos:column="24">if <condition pos:line="151" pos:column="27">(<expr><name><name pos:line="151" pos:column="28">sc</name><op:operator pos:line="151" pos:column="30">.</op:operator><name pos:line="151" pos:column="31">state</name></name> <op:operator pos:line="151" pos:column="37">==</op:operator> <name pos:line="151" pos:column="40">SCE_F_IDENTIFIER</name></expr>)</condition><then pos:line="151" pos:column="57"> <block pos:line="151" pos:column="58">{
			<if pos:line="152" pos:column="25">if <condition pos:line="152" pos:column="28">(<expr><op:operator pos:line="152" pos:column="29">!</op:operator><call><name pos:line="152" pos:column="30">IsAWordChar</name><argument_list pos:line="152" pos:column="41">(<argument><expr><name><name pos:line="152" pos:column="42">sc</name><op:operator pos:line="152" pos:column="44">.</op:operator><name pos:line="152" pos:column="45">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="152" pos:column="49">||</op:operator> <op:operator pos:line="152" pos:column="52">(</op:operator><name><name pos:line="152" pos:column="53">sc</name><op:operator pos:line="152" pos:column="55">.</op:operator><name pos:line="152" pos:column="56">ch</name></name> <op:operator pos:line="152" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="152" pos:column="62">'%'</lit:literal><op:operator pos:line="152" pos:column="65">)</op:operator></expr>)</condition><then pos:line="152" pos:column="67"> <block pos:line="152" pos:column="68">{
				<decl_stmt><decl><type><name pos:line="153" pos:column="33">char</name></type> <name><name pos:line="153" pos:column="38">s</name><index pos:line="153" pos:column="39">[<expr><lit:literal type="number" pos:line="153" pos:column="40">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name pos:line="154" pos:column="33">sc</name><op:operator pos:line="154" pos:column="35">.</op:operator><name pos:line="154" pos:column="36">GetCurrentLowered</name></name><argument_list pos:line="154" pos:column="53">(<argument><expr><name pos:line="154" pos:column="54">s</name></expr></argument>, <argument><expr><sizeof pos:line="154" pos:column="57">sizeof<argument_list pos:line="154" pos:column="63">(<argument><expr><name pos:line="154" pos:column="64">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="155" pos:column="33">if <condition pos:line="155" pos:column="36">(<expr><call><name><name pos:line="155" pos:column="37">keywords</name><op:operator pos:line="155" pos:column="45">.</op:operator><name pos:line="155" pos:column="46">InList</name></name><argument_list pos:line="155" pos:column="52">(<argument><expr><name pos:line="155" pos:column="53">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="155" pos:column="56"> <block pos:line="155" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="156" pos:column="41">sc</name><op:operator pos:line="156" pos:column="43">.</op:operator><name pos:line="156" pos:column="44">ChangeState</name></name><argument_list pos:line="156" pos:column="55">(<argument><expr><name pos:line="156" pos:column="56">SCE_F_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="157" pos:column="35">else <if pos:line="157" pos:column="40">if <condition pos:line="157" pos:column="43">(<expr><call><name><name pos:line="157" pos:column="44">keywords2</name><op:operator pos:line="157" pos:column="53">.</op:operator><name pos:line="157" pos:column="54">InList</name></name><argument_list pos:line="157" pos:column="60">(<argument><expr><name pos:line="157" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="157" pos:column="64"> <block pos:line="157" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="158" pos:column="41">sc</name><op:operator pos:line="158" pos:column="43">.</op:operator><name pos:line="158" pos:column="44">ChangeState</name></name><argument_list pos:line="158" pos:column="55">(<argument><expr><name pos:line="158" pos:column="56">SCE_F_WORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="159" pos:column="35">else <if pos:line="159" pos:column="40">if <condition pos:line="159" pos:column="43">(<expr><call><name><name pos:line="159" pos:column="44">keywords3</name><op:operator pos:line="159" pos:column="53">.</op:operator><name pos:line="159" pos:column="54">InList</name></name><argument_list pos:line="159" pos:column="60">(<argument><expr><name pos:line="159" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="159" pos:column="64"> <block pos:line="159" pos:column="65">{
					<expr_stmt><expr><call><name><name pos:line="160" pos:column="41">sc</name><op:operator pos:line="160" pos:column="43">.</op:operator><name pos:line="160" pos:column="44">ChangeState</name></name><argument_list pos:line="160" pos:column="55">(<argument><expr><name pos:line="160" pos:column="56">SCE_F_WORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<expr_stmt><expr><call><name><name pos:line="162" pos:column="33">sc</name><op:operator pos:line="162" pos:column="35">.</op:operator><name pos:line="162" pos:column="36">SetState</name></name><argument_list pos:line="162" pos:column="44">(<argument><expr><name pos:line="162" pos:column="45">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="164" pos:column="19">else <if pos:line="164" pos:column="24">if <condition pos:line="164" pos:column="27">(<expr><name><name pos:line="164" pos:column="28">sc</name><op:operator pos:line="164" pos:column="30">.</op:operator><name pos:line="164" pos:column="31">state</name></name> <op:operator pos:line="164" pos:column="37">==</op:operator> <name pos:line="164" pos:column="40">SCE_F_COMMENT</name> <op:operator pos:line="164" pos:column="54">||</op:operator> <name><name pos:line="164" pos:column="57">sc</name><op:operator pos:line="164" pos:column="59">.</op:operator><name pos:line="164" pos:column="60">state</name></name> <op:operator pos:line="164" pos:column="66">==</op:operator> <name pos:line="164" pos:column="69">SCE_F_PREPROCESSOR</name></expr>)</condition><then pos:line="164" pos:column="88"> <block pos:line="164" pos:column="89">{
			<if pos:line="165" pos:column="25">if <condition pos:line="165" pos:column="28">(<expr><name><name pos:line="165" pos:column="29">sc</name><op:operator pos:line="165" pos:column="31">.</op:operator><name pos:line="165" pos:column="32">ch</name></name> <op:operator pos:line="165" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="165" pos:column="38">'\r'</lit:literal> <op:operator pos:line="165" pos:column="43">||</op:operator> <name><name pos:line="165" pos:column="46">sc</name><op:operator pos:line="165" pos:column="48">.</op:operator><name pos:line="165" pos:column="49">ch</name></name> <op:operator pos:line="165" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="165" pos:column="55">'\n'</lit:literal></expr>)</condition><then pos:line="165" pos:column="60"> <block pos:line="165" pos:column="61">{
				<expr_stmt><expr><call><name><name pos:line="166" pos:column="33">sc</name><op:operator pos:line="166" pos:column="35">.</op:operator><name pos:line="166" pos:column="36">SetState</name></name><argument_list pos:line="166" pos:column="44">(<argument><expr><name pos:line="166" pos:column="45">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="168" pos:column="19">else <if pos:line="168" pos:column="24">if <condition pos:line="168" pos:column="27">(<expr><name><name pos:line="168" pos:column="28">sc</name><op:operator pos:line="168" pos:column="30">.</op:operator><name pos:line="168" pos:column="31">state</name></name> <op:operator pos:line="168" pos:column="37">==</op:operator> <name pos:line="168" pos:column="40">SCE_F_STRING1</name></expr>)</condition><then pos:line="168" pos:column="54"> <block pos:line="168" pos:column="55">{
			<expr_stmt><expr><name pos:line="169" pos:column="25">prevState</name> <op:operator pos:line="169" pos:column="35">=</op:operator> <name><name pos:line="169" pos:column="37">sc</name><op:operator pos:line="169" pos:column="39">.</op:operator><name pos:line="169" pos:column="40">state</name></name></expr>;</expr_stmt>
			<if pos:line="170" pos:column="25">if <condition pos:line="170" pos:column="28">(<expr><name><name pos:line="170" pos:column="29">sc</name><op:operator pos:line="170" pos:column="31">.</op:operator><name pos:line="170" pos:column="32">ch</name></name> <op:operator pos:line="170" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="170" pos:column="38">'\''</lit:literal></expr>)</condition><then pos:line="170" pos:column="43"> <block pos:line="170" pos:column="44">{
				<if pos:line="171" pos:column="33">if <condition pos:line="171" pos:column="36">(<expr><name><name pos:line="171" pos:column="37">sc</name><op:operator pos:line="171" pos:column="39">.</op:operator><name pos:line="171" pos:column="40">chNext</name></name> <op:operator pos:line="171" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="171" pos:column="50">'\''</lit:literal></expr>)</condition><then pos:line="171" pos:column="55"> <block pos:line="171" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="172" pos:column="41">sc</name><op:operator pos:line="172" pos:column="43">.</op:operator><name pos:line="172" pos:column="44">Forward</name></name><argument_list pos:line="172" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="173" pos:column="35">else <block pos:line="173" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="174" pos:column="41">sc</name><op:operator pos:line="174" pos:column="43">.</op:operator><name pos:line="174" pos:column="44">ForwardSetState</name></name><argument_list pos:line="174" pos:column="59">(<argument><expr><name pos:line="174" pos:column="60">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="175" pos:column="41">prevState</name> <op:operator pos:line="175" pos:column="51">=</op:operator> <name pos:line="175" pos:column="53">SCE_F_DEFAULT</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="177" pos:column="27">else <if pos:line="177" pos:column="32">if <condition pos:line="177" pos:column="35">(<expr><name><name pos:line="177" pos:column="36">sc</name><op:operator pos:line="177" pos:column="38">.</op:operator><name pos:line="177" pos:column="39">atLineEnd</name></name></expr>)</condition><then pos:line="177" pos:column="49"> <block pos:line="177" pos:column="50">{
				<expr_stmt><expr><call><name><name pos:line="178" pos:column="33">sc</name><op:operator pos:line="178" pos:column="35">.</op:operator><name pos:line="178" pos:column="36">ChangeState</name></name><argument_list pos:line="178" pos:column="47">(<argument><expr><name pos:line="178" pos:column="48">SCE_F_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="179" pos:column="33">sc</name><op:operator pos:line="179" pos:column="35">.</op:operator><name pos:line="179" pos:column="36">ForwardSetState</name></name><argument_list pos:line="179" pos:column="51">(<argument><expr><name pos:line="179" pos:column="52">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="181" pos:column="19">else <if pos:line="181" pos:column="24">if <condition pos:line="181" pos:column="27">(<expr><name><name pos:line="181" pos:column="28">sc</name><op:operator pos:line="181" pos:column="30">.</op:operator><name pos:line="181" pos:column="31">state</name></name> <op:operator pos:line="181" pos:column="37">==</op:operator> <name pos:line="181" pos:column="40">SCE_F_STRING2</name></expr>)</condition><then pos:line="181" pos:column="54"> <block pos:line="181" pos:column="55">{
			<expr_stmt><expr><name pos:line="182" pos:column="25">prevState</name> <op:operator pos:line="182" pos:column="35">=</op:operator> <name><name pos:line="182" pos:column="37">sc</name><op:operator pos:line="182" pos:column="39">.</op:operator><name pos:line="182" pos:column="40">state</name></name></expr>;</expr_stmt>
			<if pos:line="183" pos:column="25">if <condition pos:line="183" pos:column="28">(<expr><name><name pos:line="183" pos:column="29">sc</name><op:operator pos:line="183" pos:column="31">.</op:operator><name pos:line="183" pos:column="32">atLineEnd</name></name></expr>)</condition><then pos:line="183" pos:column="42"> <block pos:line="183" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="184" pos:column="33">sc</name><op:operator pos:line="184" pos:column="35">.</op:operator><name pos:line="184" pos:column="36">ChangeState</name></name><argument_list pos:line="184" pos:column="47">(<argument><expr><name pos:line="184" pos:column="48">SCE_F_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="185" pos:column="33">sc</name><op:operator pos:line="185" pos:column="35">.</op:operator><name pos:line="185" pos:column="36">ForwardSetState</name></name><argument_list pos:line="185" pos:column="51">(<argument><expr><name pos:line="185" pos:column="52">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="186" pos:column="27">else <if pos:line="186" pos:column="32">if <condition pos:line="186" pos:column="35">(<expr><name><name pos:line="186" pos:column="36">sc</name><op:operator pos:line="186" pos:column="38">.</op:operator><name pos:line="186" pos:column="39">ch</name></name> <op:operator pos:line="186" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="186" pos:column="50"> <block pos:line="186" pos:column="51">{
				<if pos:line="187" pos:column="33">if <condition pos:line="187" pos:column="36">(<expr><name><name pos:line="187" pos:column="37">sc</name><op:operator pos:line="187" pos:column="39">.</op:operator><name pos:line="187" pos:column="40">chNext</name></name> <op:operator pos:line="187" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="187" pos:column="50">'\"'</lit:literal></expr>)</condition><then pos:line="187" pos:column="55"> <block pos:line="187" pos:column="56">{
					<expr_stmt><expr><call><name><name pos:line="188" pos:column="41">sc</name><op:operator pos:line="188" pos:column="43">.</op:operator><name pos:line="188" pos:column="44">Forward</name></name><argument_list pos:line="188" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="189" pos:column="35">else <block pos:line="189" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="190" pos:column="41">sc</name><op:operator pos:line="190" pos:column="43">.</op:operator><name pos:line="190" pos:column="44">ForwardSetState</name></name><argument_list pos:line="190" pos:column="59">(<argument><expr><name pos:line="190" pos:column="60">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="191" pos:column="41">prevState</name> <op:operator pos:line="191" pos:column="51">=</op:operator> <name pos:line="191" pos:column="53">SCE_F_DEFAULT</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if></else></if>
		}</block></then> <else pos:line="194" pos:column="19">else <if pos:line="194" pos:column="24">if <condition pos:line="194" pos:column="27">(<expr><name><name pos:line="194" pos:column="28">sc</name><op:operator pos:line="194" pos:column="30">.</op:operator><name pos:line="194" pos:column="31">state</name></name> <op:operator pos:line="194" pos:column="37">==</op:operator> <name pos:line="194" pos:column="40">SCE_F_OPERATOR2</name></expr>)</condition><then pos:line="194" pos:column="56"> <block pos:line="194" pos:column="57">{
			<if pos:line="195" pos:column="25">if <condition pos:line="195" pos:column="28">(<expr><name><name pos:line="195" pos:column="29">sc</name><op:operator pos:line="195" pos:column="31">.</op:operator><name pos:line="195" pos:column="32">ch</name></name> <op:operator pos:line="195" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="195" pos:column="38">'.'</lit:literal></expr>)</condition><then pos:line="195" pos:column="42"> <block pos:line="195" pos:column="43">{
				<expr_stmt><expr><call><name><name pos:line="196" pos:column="33">sc</name><op:operator pos:line="196" pos:column="35">.</op:operator><name pos:line="196" pos:column="36">ForwardSetState</name></name><argument_list pos:line="196" pos:column="51">(<argument><expr><name pos:line="196" pos:column="52">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="198" pos:column="19">else <if pos:line="198" pos:column="24">if <condition pos:line="198" pos:column="27">(<expr><name><name pos:line="198" pos:column="28">sc</name><op:operator pos:line="198" pos:column="30">.</op:operator><name pos:line="198" pos:column="31">state</name></name> <op:operator pos:line="198" pos:column="37">==</op:operator> <name pos:line="198" pos:column="40">SCE_F_CONTINUATION</name></expr>)</condition><then pos:line="198" pos:column="59"> <block pos:line="198" pos:column="60">{
			<expr_stmt><expr><call><name><name pos:line="199" pos:column="25">sc</name><op:operator pos:line="199" pos:column="27">.</op:operator><name pos:line="199" pos:column="28">SetState</name></name><argument_list pos:line="199" pos:column="36">(<argument><expr><name pos:line="199" pos:column="37">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="200" pos:column="19">else <if pos:line="200" pos:column="24">if <condition pos:line="200" pos:column="27">(<expr><name><name pos:line="200" pos:column="28">sc</name><op:operator pos:line="200" pos:column="30">.</op:operator><name pos:line="200" pos:column="31">state</name></name> <op:operator pos:line="200" pos:column="37">==</op:operator> <name pos:line="200" pos:column="40">SCE_F_LABEL</name></expr>)</condition><then pos:line="200" pos:column="52"> <block pos:line="200" pos:column="53">{
			<if pos:line="201" pos:column="25">if <condition pos:line="201" pos:column="28">(<expr><op:operator pos:line="201" pos:column="29">!</op:operator><call><name pos:line="201" pos:column="30">IsADigit</name><argument_list pos:line="201" pos:column="38">(<argument><expr><name><name pos:line="201" pos:column="39">sc</name><op:operator pos:line="201" pos:column="41">.</op:operator><name pos:line="201" pos:column="42">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="201" pos:column="46"> <block pos:line="201" pos:column="47">{
				<expr_stmt><expr><call><name><name pos:line="202" pos:column="33">sc</name><op:operator pos:line="202" pos:column="35">.</op:operator><name pos:line="202" pos:column="36">SetState</name></name><argument_list pos:line="202" pos:column="44">(<argument><expr><name pos:line="202" pos:column="45">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="203" pos:column="27">else <block pos:line="203" pos:column="32">{
				<if pos:line="204" pos:column="33">if <condition pos:line="204" pos:column="36">(<expr><name pos:line="204" pos:column="37">isFixFormat</name> <op:operator pos:line="204" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="204" pos:column="52">sc</name><op:operator pos:line="204" pos:column="54">.</op:operator><name pos:line="204" pos:column="55">currentPos</name></name><op:operator pos:line="204" pos:column="65">-</op:operator><name pos:line="204" pos:column="66">posLineStart</name> <op:operator pos:line="204" pos:column="79">&gt;</op:operator> <lit:literal type="number" pos:line="204" pos:column="81">4</lit:literal></expr>)</condition><then pos:line="204" pos:column="83">
					<expr_stmt><expr><call><name><name pos:line="205" pos:column="41">sc</name><op:operator pos:line="205" pos:column="43">.</op:operator><name pos:line="205" pos:column="44">SetState</name></name><argument_list pos:line="205" pos:column="52">(<argument><expr><name pos:line="205" pos:column="53">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
				<else pos:line="206" pos:column="33">else <if pos:line="206" pos:column="38">if <condition pos:line="206" pos:column="41">(<expr><name pos:line="206" pos:column="42">numNonBlank</name> <op:operator pos:line="206" pos:column="54">&gt;</op:operator> <lit:literal type="number" pos:line="206" pos:column="56">5</lit:literal></expr>)</condition><then pos:line="206" pos:column="58">
					<expr_stmt><expr><call><name><name pos:line="207" pos:column="41">sc</name><op:operator pos:line="207" pos:column="43">.</op:operator><name pos:line="207" pos:column="44">SetState</name></name><argument_list pos:line="207" pos:column="52">(<argument><expr><name pos:line="207" pos:column="53">SCE_F_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
			}</block></else></if>
		}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		<comment type="block" format="doxygen" pos:line="210" pos:column="17">/***************************************/</comment>
		<comment type="line" pos:line="211" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="212" pos:column="17">if <condition pos:line="212" pos:column="20">(<expr><name><name pos:line="212" pos:column="21">sc</name><op:operator pos:line="212" pos:column="23">.</op:operator><name pos:line="212" pos:column="24">state</name></name> <op:operator pos:line="212" pos:column="30">==</op:operator> <name pos:line="212" pos:column="33">SCE_F_DEFAULT</name></expr>)</condition><then pos:line="212" pos:column="47"> <block pos:line="212" pos:column="48">{
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><name><name pos:line="213" pos:column="29">sc</name><op:operator pos:line="213" pos:column="31">.</op:operator><name pos:line="213" pos:column="32">ch</name></name> <op:operator pos:line="213" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="213" pos:column="38">'!'</lit:literal></expr>)</condition><then pos:line="213" pos:column="42"> <block pos:line="213" pos:column="43">{
                <if pos:line="214" pos:column="17">if <condition pos:line="214" pos:column="20">(<expr><call><name><name pos:line="214" pos:column="21">sc</name><op:operator pos:line="214" pos:column="23">.</op:operator><name pos:line="214" pos:column="24">MatchIgnoreCase</name></name><argument_list pos:line="214" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="40">"!dec$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="214" pos:column="49">||</op:operator> <call><name><name pos:line="214" pos:column="52">sc</name><op:operator pos:line="214" pos:column="54">.</op:operator><name pos:line="214" pos:column="55">MatchIgnoreCase</name></name><argument_list pos:line="214" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="71">"!dir$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="214" pos:column="80">||</op:operator>
                    <call><name><name pos:line="215" pos:column="21">sc</name><op:operator pos:line="215" pos:column="23">.</op:operator><name pos:line="215" pos:column="24">MatchIgnoreCase</name></name><argument_list pos:line="215" pos:column="39">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="40">"!ms$"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="215" pos:column="48">||</op:operator> <name><name pos:line="215" pos:column="51">sc</name><op:operator pos:line="215" pos:column="53">.</op:operator><name pos:line="215" pos:column="54">chNext</name></name> <op:operator pos:line="215" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="215" pos:column="64">'$'</lit:literal></expr>)</condition><then pos:line="215" pos:column="68"> <block pos:line="215" pos:column="69">{
					<expr_stmt><expr><call><name><name pos:line="216" pos:column="41">sc</name><op:operator pos:line="216" pos:column="43">.</op:operator><name pos:line="216" pos:column="44">SetState</name></name><argument_list pos:line="216" pos:column="52">(<argument><expr><name pos:line="216" pos:column="53">SCE_F_PREPROCESSOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="217" pos:column="35">else <block pos:line="217" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="218" pos:column="41">sc</name><op:operator pos:line="218" pos:column="43">.</op:operator><name pos:line="218" pos:column="44">SetState</name></name><argument_list pos:line="218" pos:column="52">(<argument><expr><name pos:line="218" pos:column="53">SCE_F_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="220" pos:column="27">else <if pos:line="220" pos:column="32">if <condition pos:line="220" pos:column="35">(<expr><op:operator pos:line="220" pos:column="36">(</op:operator><op:operator pos:line="220" pos:column="37">!</op:operator><name pos:line="220" pos:column="38">isFixFormat</name><op:operator pos:line="220" pos:column="49">)</op:operator> <op:operator pos:line="220" pos:column="51">&amp;&amp;</op:operator> <call><name pos:line="220" pos:column="54">IsADigit</name><argument_list pos:line="220" pos:column="62">(<argument><expr><name><name pos:line="220" pos:column="63">sc</name><op:operator pos:line="220" pos:column="65">.</op:operator><name pos:line="220" pos:column="66">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="220" pos:column="70">&amp;&amp;</op:operator> <name pos:line="220" pos:column="73">numNonBlank</name> <op:operator pos:line="220" pos:column="85">==</op:operator> <lit:literal type="number" pos:line="220" pos:column="88">1</lit:literal></expr>)</condition><then pos:line="220" pos:column="90"> <block pos:line="220" pos:column="91">{
				<expr_stmt><expr><call><name><name pos:line="221" pos:column="33">sc</name><op:operator pos:line="221" pos:column="35">.</op:operator><name pos:line="221" pos:column="36">SetState</name></name><argument_list pos:line="221" pos:column="44">(<argument><expr><name pos:line="221" pos:column="45">SCE_F_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="222" pos:column="27">else <if pos:line="222" pos:column="32">if <condition pos:line="222" pos:column="35">(<expr><call><name pos:line="222" pos:column="36">IsADigit</name><argument_list pos:line="222" pos:column="44">(<argument><expr><name><name pos:line="222" pos:column="45">sc</name><op:operator pos:line="222" pos:column="47">.</op:operator><name pos:line="222" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="222" pos:column="52">||</op:operator> <op:operator pos:line="222" pos:column="55">(</op:operator><name><name pos:line="222" pos:column="56">sc</name><op:operator pos:line="222" pos:column="58">.</op:operator><name pos:line="222" pos:column="59">ch</name></name> <op:operator pos:line="222" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="222" pos:column="65">'.'</lit:literal> <op:operator pos:line="222" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="222" pos:column="72">IsADigit</name><argument_list pos:line="222" pos:column="80">(<argument><expr><name><name pos:line="222" pos:column="81">sc</name><op:operator pos:line="222" pos:column="83">.</op:operator><name pos:line="222" pos:column="84">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="222" pos:column="91">)</op:operator></expr>)</condition><then pos:line="222" pos:column="93"> <block pos:line="222" pos:column="94">{
				<expr_stmt><expr><call><name><name pos:line="223" pos:column="33">sc</name><op:operator pos:line="223" pos:column="35">.</op:operator><name pos:line="223" pos:column="36">SetState</name></name><argument_list pos:line="223" pos:column="44">(<argument><expr><name pos:line="223" pos:column="45">SCE_F_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="224" pos:column="27">else <if pos:line="224" pos:column="32">if <condition pos:line="224" pos:column="35">(<expr><op:operator pos:line="224" pos:column="36">(</op:operator><call><name pos:line="224" pos:column="37">tolower</name><argument_list pos:line="224" pos:column="44">(<argument><expr><name><name pos:line="224" pos:column="45">sc</name><op:operator pos:line="224" pos:column="47">.</op:operator><name pos:line="224" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="224" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="224" pos:column="55">'b'</lit:literal> <op:operator pos:line="224" pos:column="59">||</op:operator> <call><name pos:line="224" pos:column="62">tolower</name><argument_list pos:line="224" pos:column="69">(<argument><expr><name><name pos:line="224" pos:column="70">sc</name><op:operator pos:line="224" pos:column="72">.</op:operator><name pos:line="224" pos:column="73">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="224" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="224" pos:column="80">'o'</lit:literal> <op:operator pos:line="224" pos:column="84">||</op:operator>
					    <call><name pos:line="225" pos:column="45">tolower</name><argument_list pos:line="225" pos:column="52">(<argument><expr><name><name pos:line="225" pos:column="53">sc</name><op:operator pos:line="225" pos:column="55">.</op:operator><name pos:line="225" pos:column="56">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="225" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="225" pos:column="63">'z'</lit:literal><op:operator pos:line="225" pos:column="66">)</op:operator> <op:operator pos:line="225" pos:column="68">&amp;&amp;</op:operator> <op:operator pos:line="225" pos:column="71">(</op:operator><name><name pos:line="225" pos:column="72">sc</name><op:operator pos:line="225" pos:column="74">.</op:operator><name pos:line="225" pos:column="75">chNext</name></name> <op:operator pos:line="225" pos:column="82">==</op:operator> <lit:literal type="char" pos:line="225" pos:column="85">'\"'</lit:literal> <op:operator pos:line="225" pos:column="90">||</op:operator> <name><name pos:line="225" pos:column="93">sc</name><op:operator pos:line="225" pos:column="95">.</op:operator><name pos:line="225" pos:column="96">chNext</name></name> <op:operator pos:line="225" pos:column="103">==</op:operator> <lit:literal type="char" pos:line="225" pos:column="106">'\''</lit:literal><op:operator pos:line="225" pos:column="110">)</op:operator></expr>)</condition><then pos:line="225" pos:column="112"> <block pos:line="225" pos:column="113">{
				<expr_stmt><expr><call><name><name pos:line="226" pos:column="33">sc</name><op:operator pos:line="226" pos:column="35">.</op:operator><name pos:line="226" pos:column="36">SetState</name></name><argument_list pos:line="226" pos:column="44">(<argument><expr><name pos:line="226" pos:column="45">SCE_F_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="227" pos:column="33">sc</name><op:operator pos:line="227" pos:column="35">.</op:operator><name pos:line="227" pos:column="36">Forward</name></name><argument_list pos:line="227" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="228" pos:column="27">else <if pos:line="228" pos:column="32">if <condition pos:line="228" pos:column="35">(<expr><name><name pos:line="228" pos:column="36">sc</name><op:operator pos:line="228" pos:column="38">.</op:operator><name pos:line="228" pos:column="39">ch</name></name> <op:operator pos:line="228" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="228" pos:column="45">'.'</lit:literal> <op:operator pos:line="228" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="228" pos:column="52">isalpha</name><argument_list pos:line="228" pos:column="59">(<argument><expr><name><name pos:line="228" pos:column="60">sc</name><op:operator pos:line="228" pos:column="62">.</op:operator><name pos:line="228" pos:column="63">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="228" pos:column="71"> <block pos:line="228" pos:column="72">{
				<expr_stmt><expr><call><name><name pos:line="229" pos:column="33">sc</name><op:operator pos:line="229" pos:column="35">.</op:operator><name pos:line="229" pos:column="36">SetState</name></name><argument_list pos:line="229" pos:column="44">(<argument><expr><name pos:line="229" pos:column="45">SCE_F_OPERATOR2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="230" pos:column="27">else <if pos:line="230" pos:column="32">if <condition pos:line="230" pos:column="35">(<expr><call><name pos:line="230" pos:column="36">IsAWordStart</name><argument_list pos:line="230" pos:column="48">(<argument><expr><name><name pos:line="230" pos:column="49">sc</name><op:operator pos:line="230" pos:column="51">.</op:operator><name pos:line="230" pos:column="52">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="230" pos:column="56"> <block pos:line="230" pos:column="57">{
				<expr_stmt><expr><call><name><name pos:line="231" pos:column="33">sc</name><op:operator pos:line="231" pos:column="35">.</op:operator><name pos:line="231" pos:column="36">SetState</name></name><argument_list pos:line="231" pos:column="44">(<argument><expr><name pos:line="231" pos:column="45">SCE_F_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="232" pos:column="27">else <if pos:line="232" pos:column="32">if <condition pos:line="232" pos:column="35">(<expr><name><name pos:line="232" pos:column="36">sc</name><op:operator pos:line="232" pos:column="38">.</op:operator><name pos:line="232" pos:column="39">ch</name></name> <op:operator pos:line="232" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="232" pos:column="45">'\"'</lit:literal></expr>)</condition><then pos:line="232" pos:column="50"> <block pos:line="232" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="233" pos:column="33">sc</name><op:operator pos:line="233" pos:column="35">.</op:operator><name pos:line="233" pos:column="36">SetState</name></name><argument_list pos:line="233" pos:column="44">(<argument><expr><name pos:line="233" pos:column="45">SCE_F_STRING2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="234" pos:column="27">else <if pos:line="234" pos:column="32">if <condition pos:line="234" pos:column="35">(<expr><name><name pos:line="234" pos:column="36">sc</name><op:operator pos:line="234" pos:column="38">.</op:operator><name pos:line="234" pos:column="39">ch</name></name> <op:operator pos:line="234" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="45">'\''</lit:literal></expr>)</condition><then pos:line="234" pos:column="50"> <block pos:line="234" pos:column="51">{
				<expr_stmt><expr><call><name><name pos:line="235" pos:column="33">sc</name><op:operator pos:line="235" pos:column="35">.</op:operator><name pos:line="235" pos:column="36">SetState</name></name><argument_list pos:line="235" pos:column="44">(<argument><expr><name pos:line="235" pos:column="45">SCE_F_STRING1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="236" pos:column="27">else <if pos:line="236" pos:column="32">if <condition pos:line="236" pos:column="35">(<expr><call><name pos:line="236" pos:column="36">isoperator</name><argument_list pos:line="236" pos:column="46">(<argument><expr><call><name><name pos:line="236" pos:column="47">static_cast</name><argument_list pos:line="236" pos:column="58">&lt;<argument><expr><name pos:line="236" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="236" pos:column="64">(<argument><expr><name><name pos:line="236" pos:column="65">sc</name><op:operator pos:line="236" pos:column="67">.</op:operator><name pos:line="236" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="236" pos:column="73"> <block pos:line="236" pos:column="74">{
				<expr_stmt><expr><call><name><name pos:line="237" pos:column="33">sc</name><op:operator pos:line="237" pos:column="35">.</op:operator><name pos:line="237" pos:column="36">SetState</name></name><argument_list pos:line="237" pos:column="44">(<argument><expr><name pos:line="237" pos:column="45">SCE_F_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="241" pos:column="9">sc</name><op:operator pos:line="241" pos:column="11">.</op:operator><name pos:line="241" pos:column="12">Complete</name></name><argument_list pos:line="241" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="block" format="doxygen" pos:line="243" pos:column="1">/***************************************/</comment>
<comment type="line" pos:line="244" pos:column="1">// To determine the folding level depending on keywords</comment>
<function><type><specifier pos:line="245" pos:column="1">static</specifier> <name pos:line="245" pos:column="8">int</name></type> <name pos:line="245" pos:column="12">classifyFoldPointFortran</name><parameter_list pos:line="245" pos:column="36">(<param><decl><type><specifier pos:line="245" pos:column="37">const</specifier> <name pos:line="245" pos:column="43">char</name><type:modifier pos:line="245" pos:column="47">*</type:modifier></type> <name pos:line="245" pos:column="49">s</name></decl></param>, <param><decl><type><specifier pos:line="245" pos:column="52">const</specifier> <name pos:line="245" pos:column="58">char</name><type:modifier pos:line="245" pos:column="62">*</type:modifier></type> <name pos:line="245" pos:column="64">prevWord</name></decl></param>, <param><decl><type><specifier pos:line="245" pos:column="74">const</specifier> <name pos:line="245" pos:column="80">char</name></type> <name pos:line="245" pos:column="85">chNextNonBlank</name></decl></param>)</parameter_list> <block pos:line="245" pos:column="101">{
	<decl_stmt><decl><type><name pos:line="246" pos:column="9">int</name></type> <name pos:line="246" pos:column="13">lev</name> <init pos:line="246" pos:column="17">= <expr><lit:literal type="number" pos:line="246" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="247" pos:column="9">if <condition pos:line="247" pos:column="12">(<expr><op:operator pos:line="247" pos:column="13">(</op:operator><call><name pos:line="247" pos:column="14">strcmp</name><argument_list pos:line="247" pos:column="20">(<argument><expr><name pos:line="247" pos:column="21">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="247" pos:column="31">"else"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="247" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="247" pos:column="42">0</lit:literal> <op:operator pos:line="247" pos:column="44">&amp;&amp;</op:operator> <call><name pos:line="247" pos:column="47">strcmp</name><argument_list pos:line="247" pos:column="53">(<argument><expr><name pos:line="247" pos:column="54">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="247" pos:column="57">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="247" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="247" pos:column="66">0</lit:literal><op:operator pos:line="247" pos:column="67">)</op:operator> <op:operator pos:line="247" pos:column="69">||</op:operator> <call><name pos:line="247" pos:column="72">strcmp</name><argument_list pos:line="247" pos:column="78">(<argument><expr><name pos:line="247" pos:column="79">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="247" pos:column="82">"elseif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="247" pos:column="92">==</op:operator> <lit:literal type="number" pos:line="247" pos:column="95">0</lit:literal></expr>)</condition><then pos:line="247" pos:column="97">
		<return pos:line="248" pos:column="17">return <expr><op:operator pos:line="248" pos:column="24">-</op:operator><lit:literal type="number" pos:line="248" pos:column="25">1</lit:literal></expr>;</return></then></if>
	<if pos:line="249" pos:column="9">if <condition pos:line="249" pos:column="12">(<expr><call><name pos:line="249" pos:column="13">strcmp</name><argument_list pos:line="249" pos:column="19">(<argument><expr><name pos:line="249" pos:column="20">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="249" pos:column="23">"associate"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="249" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="249" pos:column="39">0</lit:literal> <op:operator pos:line="249" pos:column="41">||</op:operator> <call><name pos:line="249" pos:column="44">strcmp</name><argument_list pos:line="249" pos:column="50">(<argument><expr><name pos:line="249" pos:column="51">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="249" pos:column="54">"block"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="249" pos:column="63">==</op:operator> <lit:literal type="number" pos:line="249" pos:column="66">0</lit:literal>
	    <op:operator pos:line="250" pos:column="13">||</op:operator> <call><name pos:line="250" pos:column="16">strcmp</name><argument_list pos:line="250" pos:column="22">(<argument><expr><name pos:line="250" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="250" pos:column="26">"blockdata"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="250" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="250" pos:column="42">0</lit:literal> <op:operator pos:line="250" pos:column="44">||</op:operator> <call><name pos:line="250" pos:column="47">strcmp</name><argument_list pos:line="250" pos:column="53">(<argument><expr><name pos:line="250" pos:column="54">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="250" pos:column="57">"select"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="250" pos:column="67">==</op:operator> <lit:literal type="number" pos:line="250" pos:column="70">0</lit:literal>
	    <op:operator pos:line="251" pos:column="13">||</op:operator> <call><name pos:line="251" pos:column="16">strcmp</name><argument_list pos:line="251" pos:column="22">(<argument><expr><name pos:line="251" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="251" pos:column="26">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="251" pos:column="32">==</op:operator> <lit:literal type="number" pos:line="251" pos:column="35">0</lit:literal> <op:operator pos:line="251" pos:column="37">||</op:operator> <call><name pos:line="251" pos:column="40">strcmp</name><argument_list pos:line="251" pos:column="46">(<argument><expr><name pos:line="251" pos:column="47">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="251" pos:column="50">"enum"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="251" pos:column="58">==</op:operator><lit:literal type="number" pos:line="251" pos:column="60">0</lit:literal>
	    <op:operator pos:line="252" pos:column="13">||</op:operator> <call><name pos:line="252" pos:column="16">strcmp</name><argument_list pos:line="252" pos:column="22">(<argument><expr><name pos:line="252" pos:column="23">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="252" pos:column="26">"function"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="252" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="252" pos:column="41">0</lit:literal> <op:operator pos:line="252" pos:column="43">||</op:operator> <call><name pos:line="252" pos:column="46">strcmp</name><argument_list pos:line="252" pos:column="52">(<argument><expr><name pos:line="252" pos:column="53">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="252" pos:column="56">"interface"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="252" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="252" pos:column="72">0</lit:literal>
		<op:operator pos:line="253" pos:column="17">||</op:operator> <call><name pos:line="253" pos:column="20">strcmp</name><argument_list pos:line="253" pos:column="26">(<argument><expr><name pos:line="253" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="253" pos:column="30">"module"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="253" pos:column="40">==</op:operator> <lit:literal type="number" pos:line="253" pos:column="43">0</lit:literal> <op:operator pos:line="253" pos:column="45">||</op:operator> <call><name pos:line="253" pos:column="48">strcmp</name><argument_list pos:line="253" pos:column="54">(<argument><expr><name pos:line="253" pos:column="55">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="253" pos:column="58">"program"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="253" pos:column="69">==</op:operator> <lit:literal type="number" pos:line="253" pos:column="72">0</lit:literal>
		<op:operator pos:line="254" pos:column="17">||</op:operator> <call><name pos:line="254" pos:column="20">strcmp</name><argument_list pos:line="254" pos:column="26">(<argument><expr><name pos:line="254" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="254" pos:column="30">"subroutine"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="254" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="254" pos:column="47">0</lit:literal> <op:operator pos:line="254" pos:column="49">||</op:operator> <call><name pos:line="254" pos:column="52">strcmp</name><argument_list pos:line="254" pos:column="58">(<argument><expr><name pos:line="254" pos:column="59">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="254" pos:column="62">"then"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="254" pos:column="70">==</op:operator> <lit:literal type="number" pos:line="254" pos:column="73">0</lit:literal>
		<op:operator pos:line="255" pos:column="17">||</op:operator> <op:operator pos:line="255" pos:column="20">(</op:operator><call><name pos:line="255" pos:column="21">strcmp</name><argument_list pos:line="255" pos:column="27">(<argument><expr><name pos:line="255" pos:column="28">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="255" pos:column="31">"type"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="255" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="255" pos:column="42">0</lit:literal> <op:operator pos:line="255" pos:column="44">&amp;&amp;</op:operator> <name pos:line="255" pos:column="47">chNextNonBlank</name> <op:operator pos:line="255" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="255" pos:column="65">'('</lit:literal><op:operator pos:line="255" pos:column="68">)</op:operator></expr> )</condition><then><block pos:line="255" pos:column="71">{
			<if pos:line="256" pos:column="25">if <condition pos:line="256" pos:column="28">(<expr><call><name pos:line="256" pos:column="29">strcmp</name><argument_list pos:line="256" pos:column="35">(<argument><expr><name pos:line="256" pos:column="36">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="256" pos:column="46">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="256" pos:column="53">==</op:operator> <lit:literal type="number" pos:line="256" pos:column="56">0</lit:literal></expr>)</condition><then pos:line="256" pos:column="58">
				<expr_stmt><expr><name pos:line="257" pos:column="33">lev</name> <op:operator pos:line="257" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="257" pos:column="39">0</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="258" pos:column="25">else
				<expr_stmt><expr><name pos:line="259" pos:column="33">lev</name> <op:operator pos:line="259" pos:column="37">=</op:operator> <lit:literal type="number" pos:line="259" pos:column="39">1</lit:literal></expr>;</expr_stmt></else></if>
	}</block></then> <else pos:line="260" pos:column="11">else <if pos:line="260" pos:column="16">if <condition pos:line="260" pos:column="19">(<expr><op:operator pos:line="260" pos:column="20">(</op:operator><call><name pos:line="260" pos:column="21">strcmp</name><argument_list pos:line="260" pos:column="27">(<argument><expr><name pos:line="260" pos:column="28">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="260" pos:column="31">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="260" pos:column="38">==</op:operator> <lit:literal type="number" pos:line="260" pos:column="41">0</lit:literal> <op:operator pos:line="260" pos:column="43">&amp;&amp;</op:operator> <name pos:line="260" pos:column="46">chNextNonBlank</name> <op:operator pos:line="260" pos:column="61">!=</op:operator> <lit:literal type="char" pos:line="260" pos:column="64">'='</lit:literal><op:operator pos:line="260" pos:column="67">)</op:operator>
		<op:operator pos:line="261" pos:column="17">||</op:operator> <call><name pos:line="261" pos:column="20">strcmp</name><argument_list pos:line="261" pos:column="26">(<argument><expr><name pos:line="261" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="261" pos:column="30">"endassociate"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="261" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="261" pos:column="49">0</lit:literal> <op:operator pos:line="261" pos:column="51">||</op:operator> <call><name pos:line="261" pos:column="54">strcmp</name><argument_list pos:line="261" pos:column="60">(<argument><expr><name pos:line="261" pos:column="61">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="261" pos:column="64">"endblock"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="261" pos:column="76">==</op:operator> <lit:literal type="number" pos:line="261" pos:column="79">0</lit:literal>
		<op:operator pos:line="262" pos:column="17">||</op:operator> <call><name pos:line="262" pos:column="20">strcmp</name><argument_list pos:line="262" pos:column="26">(<argument><expr><name pos:line="262" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="262" pos:column="30">"endblockdata"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="262" pos:column="46">==</op:operator> <lit:literal type="number" pos:line="262" pos:column="49">0</lit:literal> <op:operator pos:line="262" pos:column="51">||</op:operator> <call><name pos:line="262" pos:column="54">strcmp</name><argument_list pos:line="262" pos:column="60">(<argument><expr><name pos:line="262" pos:column="61">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="262" pos:column="64">"endselect"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="262" pos:column="77">==</op:operator> <lit:literal type="number" pos:line="262" pos:column="80">0</lit:literal>
		<op:operator pos:line="263" pos:column="17">||</op:operator> <call><name pos:line="263" pos:column="20">strcmp</name><argument_list pos:line="263" pos:column="26">(<argument><expr><name pos:line="263" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="263" pos:column="30">"enddo"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="263" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="263" pos:column="42">0</lit:literal> <op:operator pos:line="263" pos:column="44">||</op:operator> <call><name pos:line="263" pos:column="47">strcmp</name><argument_list pos:line="263" pos:column="53">(<argument><expr><name pos:line="263" pos:column="54">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="263" pos:column="57">"endenum"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="263" pos:column="68">==</op:operator><lit:literal type="number" pos:line="263" pos:column="70">0</lit:literal>
		<op:operator pos:line="264" pos:column="17">||</op:operator> <call><name pos:line="264" pos:column="20">strcmp</name><argument_list pos:line="264" pos:column="26">(<argument><expr><name pos:line="264" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="264" pos:column="30">"endif"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="264" pos:column="39">==</op:operator> <lit:literal type="number" pos:line="264" pos:column="42">0</lit:literal> <op:operator pos:line="264" pos:column="44">||</op:operator> <call><name pos:line="264" pos:column="47">strcmp</name><argument_list pos:line="264" pos:column="53">(<argument><expr><name pos:line="264" pos:column="54">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="264" pos:column="57">"endforall"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="264" pos:column="70">==</op:operator> <lit:literal type="number" pos:line="264" pos:column="73">0</lit:literal>
		<op:operator pos:line="265" pos:column="17">||</op:operator> <call><name pos:line="265" pos:column="20">strcmp</name><argument_list pos:line="265" pos:column="26">(<argument><expr><name pos:line="265" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="265" pos:column="30">"endfunction"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="265" pos:column="45">==</op:operator> <lit:literal type="number" pos:line="265" pos:column="48">0</lit:literal> <op:operator pos:line="265" pos:column="50">||</op:operator> <call><name pos:line="265" pos:column="53">strcmp</name><argument_list pos:line="265" pos:column="59">(<argument><expr><name pos:line="265" pos:column="60">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="265" pos:column="63">"endinterface"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="265" pos:column="79">==</op:operator> <lit:literal type="number" pos:line="265" pos:column="82">0</lit:literal>
		<op:operator pos:line="266" pos:column="17">||</op:operator> <call><name pos:line="266" pos:column="20">strcmp</name><argument_list pos:line="266" pos:column="26">(<argument><expr><name pos:line="266" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="266" pos:column="30">"endmodule"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="266" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="266" pos:column="46">0</lit:literal> <op:operator pos:line="266" pos:column="48">||</op:operator> <call><name pos:line="266" pos:column="51">strcmp</name><argument_list pos:line="266" pos:column="57">(<argument><expr><name pos:line="266" pos:column="58">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="266" pos:column="61">"endprogram"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="266" pos:column="75">==</op:operator> <lit:literal type="number" pos:line="266" pos:column="78">0</lit:literal>
		<op:operator pos:line="267" pos:column="17">||</op:operator> <call><name pos:line="267" pos:column="20">strcmp</name><argument_list pos:line="267" pos:column="26">(<argument><expr><name pos:line="267" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="267" pos:column="30">"endsubroutine"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="267" pos:column="47">==</op:operator> <lit:literal type="number" pos:line="267" pos:column="50">0</lit:literal> <op:operator pos:line="267" pos:column="52">||</op:operator> <call><name pos:line="267" pos:column="55">strcmp</name><argument_list pos:line="267" pos:column="61">(<argument><expr><name pos:line="267" pos:column="62">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="267" pos:column="65">"endtype"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="267" pos:column="76">==</op:operator> <lit:literal type="number" pos:line="267" pos:column="79">0</lit:literal>
		<op:operator pos:line="268" pos:column="17">||</op:operator> <call><name pos:line="268" pos:column="20">strcmp</name><argument_list pos:line="268" pos:column="26">(<argument><expr><name pos:line="268" pos:column="27">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="268" pos:column="30">"endwhere"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="268" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="268" pos:column="45">0</lit:literal>
		<op:operator pos:line="269" pos:column="17">||</op:operator> <op:operator pos:line="269" pos:column="20">(</op:operator><call><name pos:line="269" pos:column="21">strcmp</name><argument_list pos:line="269" pos:column="27">(<argument><expr><name pos:line="269" pos:column="28">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="269" pos:column="31">"procedure"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="269" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="269" pos:column="47">0</lit:literal> <op:operator pos:line="269" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="269" pos:column="52">strcmp</name><argument_list pos:line="269" pos:column="58">(<argument><expr><name pos:line="269" pos:column="59">prevWord</name></expr></argument>,<argument><expr><lit:literal type="string" pos:line="269" pos:column="68">"module"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="269" pos:column="77">==</op:operator><lit:literal type="number" pos:line="269" pos:column="79">0</lit:literal><op:operator pos:line="269" pos:column="80">)</op:operator></expr> )</condition><then pos:line="269" pos:column="83"> <block pos:line="269" pos:column="84">{ <comment type="line" pos:line="269" pos:column="86">// Take care of the module procedure statement</comment>
			<expr_stmt><expr><name pos:line="270" pos:column="25">lev</name> <op:operator pos:line="270" pos:column="29">=</op:operator> <op:operator pos:line="270" pos:column="31">-</op:operator><lit:literal type="number" pos:line="270" pos:column="32">1</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="271" pos:column="11">else <if pos:line="271" pos:column="16">if <condition pos:line="271" pos:column="19">(<expr><call><name pos:line="271" pos:column="20">strcmp</name><argument_list pos:line="271" pos:column="26">(<argument><expr><name pos:line="271" pos:column="27">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="37">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="271" pos:column="44">==</op:operator> <lit:literal type="number" pos:line="271" pos:column="47">0</lit:literal> <op:operator pos:line="271" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="271" pos:column="52">strcmp</name><argument_list pos:line="271" pos:column="58">(<argument><expr><name pos:line="271" pos:column="59">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="271" pos:column="62">"if"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="271" pos:column="68">==</op:operator> <lit:literal type="number" pos:line="271" pos:column="71">0</lit:literal></expr>)</condition><then><block pos:line="271" pos:column="73">{ <comment type="line" pos:line="271" pos:column="75">// end if</comment>
			<expr_stmt><expr><name pos:line="272" pos:column="25">lev</name> <op:operator pos:line="272" pos:column="29">=</op:operator> <lit:literal type="number" pos:line="272" pos:column="31">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if></else></if></else></if>
	<return pos:line="274" pos:column="9">return <expr><name pos:line="274" pos:column="16">lev</name></expr>;</return>
}</block></function>
<comment type="line" pos:line="276" pos:column="1">// Folding the code</comment>
<function><type><specifier pos:line="277" pos:column="1">static</specifier> <name pos:line="277" pos:column="8">void</name></type> <name pos:line="277" pos:column="13">FoldFortranDoc</name><parameter_list pos:line="277" pos:column="27">(<param><decl><type><name pos:line="277" pos:column="28">unsigned</name> <name pos:line="277" pos:column="37">int</name></type> <name pos:line="277" pos:column="41">startPos</name></decl></param>, <param><decl><type><name pos:line="277" pos:column="51">int</name></type> <name pos:line="277" pos:column="55">length</name></decl></param>, <param><decl><type><name pos:line="277" pos:column="63">int</name></type> <name pos:line="277" pos:column="67">initStyle</name></decl></param>,
						   <param><decl><type><name pos:line="278" pos:column="52">Accessor</name> <type:modifier pos:line="278" pos:column="61">&amp;</type:modifier></type><name pos:line="278" pos:column="62">styler</name></decl></param>, <param><decl><type><name pos:line="278" pos:column="70">bool</name></type> <name pos:line="278" pos:column="75">isFixFormat</name></decl></param>)</parameter_list> <block pos:line="278" pos:column="88">{
	<comment type="line" pos:line="279" pos:column="9">//</comment>
	<comment type="line" pos:line="280" pos:column="9">// bool foldComment = styler.GetPropertyInt("fold.comment") != 0;</comment>
	<comment type="line" pos:line="281" pos:column="9">// Do not know how to fold the comment at the moment.</comment>
	<comment type="line" pos:line="282" pos:column="9">//</comment>
	<decl_stmt><decl><type><name pos:line="283" pos:column="9">bool</name></type> <name pos:line="283" pos:column="14">foldCompact</name> <init pos:line="283" pos:column="26">= <expr><call><name><name pos:line="283" pos:column="28">styler</name><op:operator pos:line="283" pos:column="34">.</op:operator><name pos:line="283" pos:column="35">GetPropertyInt</name></name><argument_list pos:line="283" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="283" pos:column="50">"fold.compact"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="283" pos:column="66">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="283" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="283" pos:column="72">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="284" pos:column="9">unsigned</name> <name pos:line="284" pos:column="18">int</name></type> <name pos:line="284" pos:column="22">endPos</name> <init pos:line="284" pos:column="29">= <expr><name pos:line="284" pos:column="31">startPos</name> <op:operator pos:line="284" pos:column="40">+</op:operator> <name pos:line="284" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="285" pos:column="9">int</name></type> <name pos:line="285" pos:column="13">visibleChars</name> <init pos:line="285" pos:column="26">= <expr><lit:literal type="number" pos:line="285" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="286" pos:column="9">int</name></type> <name pos:line="286" pos:column="13">lineCurrent</name> <init pos:line="286" pos:column="25">= <expr><call><name><name pos:line="286" pos:column="27">styler</name><op:operator pos:line="286" pos:column="33">.</op:operator><name pos:line="286" pos:column="34">GetLine</name></name><argument_list pos:line="286" pos:column="41">(<argument><expr><name pos:line="286" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="287" pos:column="9">int</name></type> <name pos:line="287" pos:column="13">levelPrev</name> <init pos:line="287" pos:column="23">= <expr><call><name><name pos:line="287" pos:column="25">styler</name><op:operator pos:line="287" pos:column="31">.</op:operator><name pos:line="287" pos:column="32">LevelAt</name></name><argument_list pos:line="287" pos:column="39">(<argument><expr><name pos:line="287" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="287" pos:column="53">&amp;</op:operator> <name pos:line="287" pos:column="55">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="288" pos:column="9">int</name></type> <name pos:line="288" pos:column="13">levelCurrent</name> <init pos:line="288" pos:column="26">= <expr><name pos:line="288" pos:column="28">levelPrev</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="289" pos:column="9">char</name></type> <name pos:line="289" pos:column="14">chNext</name> <init pos:line="289" pos:column="21">= <expr><name><name pos:line="289" pos:column="23">styler</name><index pos:line="289" pos:column="29">[<expr><name pos:line="289" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="290" pos:column="9">char</name></type> <name pos:line="290" pos:column="14">chNextNonBlank</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="291" pos:column="9">int</name></type> <name pos:line="291" pos:column="13">styleNext</name> <init pos:line="291" pos:column="23">= <expr><call><name><name pos:line="291" pos:column="25">styler</name><op:operator pos:line="291" pos:column="31">.</op:operator><name pos:line="291" pos:column="32">StyleAt</name></name><argument_list pos:line="291" pos:column="39">(<argument><expr><name pos:line="291" pos:column="40">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="292" pos:column="9">int</name></type> <name pos:line="292" pos:column="13">style</name> <init pos:line="292" pos:column="19">= <expr><name pos:line="292" pos:column="21">initStyle</name></expr></init></decl>;</decl_stmt>
	<comment type="block" format="doxygen" pos:line="293" pos:column="9">/***************************************/</comment>
	<decl_stmt><decl><type><name pos:line="294" pos:column="9">int</name></type> <name pos:line="294" pos:column="13">lastStart</name> <init pos:line="294" pos:column="23">= <expr><lit:literal type="number" pos:line="294" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="295" pos:column="9">char</name></type> <name><name pos:line="295" pos:column="14">prevWord</name><index pos:line="295" pos:column="22">[<expr><lit:literal type="number" pos:line="295" pos:column="23">32</lit:literal></expr>]</index></name> <init pos:line="295" pos:column="27">= <expr><lit:literal type="string" pos:line="295" pos:column="29">""</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="296" pos:column="9">char</name></type> <name><name pos:line="296" pos:column="14">Label</name><index pos:line="296" pos:column="19">[<expr><lit:literal type="number" pos:line="296" pos:column="20">6</lit:literal></expr>]</index></name> <init pos:line="296" pos:column="23">= <expr><lit:literal type="string" pos:line="296" pos:column="25">""</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="297" pos:column="9">// Variables for do label folding.</comment>
	<decl_stmt><decl><type><specifier pos:line="298" pos:column="9">static</specifier> <name pos:line="298" pos:column="16">int</name></type> <name><name pos:line="298" pos:column="20">doLabels</name><index pos:line="298" pos:column="28">[<expr><lit:literal type="number" pos:line="298" pos:column="29">100</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="299" pos:column="9">static</specifier> <name pos:line="299" pos:column="16">int</name></type> <name pos:line="299" pos:column="20">posLabel</name><init pos:line="299" pos:column="28">=<expr><op:operator pos:line="299" pos:column="29">-</op:operator><lit:literal type="number" pos:line="299" pos:column="30">1</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="block" format="doxygen" pos:line="300" pos:column="9">/***************************************/</comment>
	<for pos:line="301" pos:column="9">for (<init><decl><type><name pos:line="301" pos:column="14">unsigned</name> <name pos:line="301" pos:column="23">int</name></type> <name pos:line="301" pos:column="27">i</name> <init pos:line="301" pos:column="29">= <expr><name pos:line="301" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="301" pos:column="41">i</name> <op:operator pos:line="301" pos:column="43">&lt;</op:operator> <name pos:line="301" pos:column="45">endPos</name></expr>;</condition> <incr><expr><name pos:line="301" pos:column="53">i</name><op:operator pos:line="301" pos:column="54">++</op:operator></expr></incr>) <block pos:line="301" pos:column="58">{
		<decl_stmt><decl><type><name pos:line="302" pos:column="17">char</name></type> <name pos:line="302" pos:column="22">ch</name> <init pos:line="302" pos:column="25">= <expr><name pos:line="302" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="303" pos:column="17">chNext</name> <op:operator pos:line="303" pos:column="24">=</op:operator> <call><name><name pos:line="303" pos:column="26">styler</name><op:operator pos:line="303" pos:column="32">.</op:operator><name pos:line="303" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="303" pos:column="46">(<argument><expr><name pos:line="303" pos:column="47">i</name> <op:operator pos:line="303" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="303" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="304" pos:column="17">chNextNonBlank</name> <op:operator pos:line="304" pos:column="32">=</op:operator> <name pos:line="304" pos:column="34">chNext</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="305" pos:column="17">unsigned</name> <name pos:line="305" pos:column="26">int</name></type> <name pos:line="305" pos:column="30">j</name><init pos:line="305" pos:column="31">=<expr><name pos:line="305" pos:column="32">i</name><op:operator pos:line="305" pos:column="33">+</op:operator><lit:literal type="number" pos:line="305" pos:column="34">1</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="306" pos:column="17">while<condition pos:line="306" pos:column="22">(<expr><call><name pos:line="306" pos:column="23">IsABlank</name><argument_list pos:line="306" pos:column="31">(<argument><expr><name pos:line="306" pos:column="32">chNextNonBlank</name></expr></argument>)</argument_list></call> <op:operator pos:line="306" pos:column="48">&amp;&amp;</op:operator> <name pos:line="306" pos:column="51">j</name><op:operator pos:line="306" pos:column="52">&lt;</op:operator><name pos:line="306" pos:column="53">endPos</name></expr>)</condition> <block pos:line="306" pos:column="61">{
			<expr_stmt><expr><name pos:line="307" pos:column="25">j</name> <op:operator pos:line="307" pos:column="27">++</op:operator></expr> ;</expr_stmt>
			<expr_stmt><expr><name pos:line="308" pos:column="25">chNextNonBlank</name> <op:operator pos:line="308" pos:column="40">=</op:operator> <call><name><name pos:line="308" pos:column="42">styler</name><op:operator pos:line="308" pos:column="48">.</op:operator><name pos:line="308" pos:column="49">SafeGetCharAt</name></name><argument_list pos:line="308" pos:column="62">(<argument><expr><name pos:line="308" pos:column="63">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<decl_stmt><decl><type><name pos:line="310" pos:column="17">int</name></type> <name pos:line="310" pos:column="21">stylePrev</name> <init pos:line="310" pos:column="31">= <expr><name pos:line="310" pos:column="33">style</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="311" pos:column="17">style</name> <op:operator pos:line="311" pos:column="23">=</op:operator> <name pos:line="311" pos:column="25">styleNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="312" pos:column="17">styleNext</name> <op:operator pos:line="312" pos:column="27">=</op:operator> <call><name><name pos:line="312" pos:column="29">styler</name><op:operator pos:line="312" pos:column="35">.</op:operator><name pos:line="312" pos:column="36">StyleAt</name></name><argument_list pos:line="312" pos:column="43">(<argument><expr><name pos:line="312" pos:column="44">i</name> <op:operator pos:line="312" pos:column="46">+</op:operator> <lit:literal type="number" pos:line="312" pos:column="48">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="313" pos:column="17">bool</name></type> <name pos:line="313" pos:column="22">atEOL</name> <init pos:line="313" pos:column="28">= <expr><op:operator pos:line="313" pos:column="30">(</op:operator><name pos:line="313" pos:column="31">ch</name> <op:operator pos:line="313" pos:column="34">==</op:operator> <lit:literal type="char" pos:line="313" pos:column="37">'\r'</lit:literal> <op:operator pos:line="313" pos:column="42">&amp;&amp;</op:operator> <name pos:line="313" pos:column="45">chNext</name> <op:operator pos:line="313" pos:column="52">!=</op:operator> <lit:literal type="char" pos:line="313" pos:column="55">'\n'</lit:literal><op:operator pos:line="313" pos:column="59">)</op:operator> <op:operator pos:line="313" pos:column="61">||</op:operator> <op:operator pos:line="313" pos:column="64">(</op:operator><name pos:line="313" pos:column="65">ch</name> <op:operator pos:line="313" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="313" pos:column="71">'\n'</lit:literal><op:operator pos:line="313" pos:column="75">)</op:operator></expr></init></decl>;</decl_stmt>
		<comment type="line" pos:line="314" pos:column="17">//</comment>
		<if pos:line="315" pos:column="17">if <condition pos:line="315" pos:column="20">(<expr><name pos:line="315" pos:column="21">stylePrev</name> <op:operator pos:line="315" pos:column="31">==</op:operator> <name pos:line="315" pos:column="34">SCE_F_DEFAULT</name> <op:operator pos:line="315" pos:column="48">&amp;&amp;</op:operator> <op:operator pos:line="315" pos:column="51">(</op:operator><name pos:line="315" pos:column="52">style</name> <op:operator pos:line="315" pos:column="58">==</op:operator> <name pos:line="315" pos:column="61">SCE_F_WORD</name> <op:operator pos:line="315" pos:column="72">||</op:operator> <name pos:line="315" pos:column="75">style</name> <op:operator pos:line="315" pos:column="81">==</op:operator> <name pos:line="315" pos:column="84">SCE_F_LABEL</name><op:operator pos:line="315" pos:column="95">)</op:operator></expr>)</condition><then pos:line="315" pos:column="97"> <block pos:line="315" pos:column="98">{
			<comment type="line" pos:line="316" pos:column="25">// Store last word and label start point.</comment>
			<expr_stmt><expr><name pos:line="317" pos:column="25">lastStart</name> <op:operator pos:line="317" pos:column="35">=</op:operator> <name pos:line="317" pos:column="37">i</name></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="block" format="doxygen" pos:line="319" pos:column="17">/***************************************/</comment>
		<if pos:line="320" pos:column="17">if <condition pos:line="320" pos:column="20">(<expr><name pos:line="320" pos:column="21">style</name> <op:operator pos:line="320" pos:column="27">==</op:operator> <name pos:line="320" pos:column="30">SCE_F_WORD</name></expr>)</condition><then pos:line="320" pos:column="41"> <block pos:line="320" pos:column="42">{
			<if pos:line="321" pos:column="25">if<condition pos:line="321" pos:column="27">(<expr><call><name pos:line="321" pos:column="28">iswordchar</name><argument_list pos:line="321" pos:column="38">(<argument><expr><name pos:line="321" pos:column="39">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="321" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="321" pos:column="46">!</op:operator><call><name pos:line="321" pos:column="47">iswordchar</name><argument_list pos:line="321" pos:column="57">(<argument><expr><name pos:line="321" pos:column="58">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="321" pos:column="66"> <block pos:line="321" pos:column="67">{
				<decl_stmt><decl><type><name pos:line="322" pos:column="33">char</name></type> <name><name pos:line="322" pos:column="38">s</name><index pos:line="322" pos:column="39">[<expr><lit:literal type="number" pos:line="322" pos:column="40">32</lit:literal></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="323" pos:column="33">unsigned</name> <name pos:line="323" pos:column="42">int</name></type> <name pos:line="323" pos:column="46">k</name></decl>;</decl_stmt>
				<for pos:line="324" pos:column="33">for(<init><expr><name pos:line="324" pos:column="37">k</name><op:operator pos:line="324" pos:column="38">=</op:operator><lit:literal type="number" pos:line="324" pos:column="39">0</lit:literal></expr>;</init> <condition><expr><op:operator pos:line="324" pos:column="42">(</op:operator><name pos:line="324" pos:column="43">k</name><op:operator pos:line="324" pos:column="44">&lt;</op:operator><lit:literal type="number" pos:line="324" pos:column="45">31</lit:literal> <op:operator pos:line="324" pos:column="48">)</op:operator> <op:operator pos:line="324" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="324" pos:column="53">(</op:operator><name pos:line="324" pos:column="54">k</name><op:operator pos:line="324" pos:column="55">&lt;</op:operator><name pos:line="324" pos:column="56">i</name><op:operator pos:line="324" pos:column="57">-</op:operator><name pos:line="324" pos:column="58">lastStart</name><op:operator pos:line="324" pos:column="67">+</op:operator><lit:literal type="number" pos:line="324" pos:column="68">1</lit:literal> <op:operator pos:line="324" pos:column="70">)</op:operator></expr>;</condition> <incr><expr><name pos:line="324" pos:column="73">k</name><op:operator pos:line="324" pos:column="74">++</op:operator></expr></incr>) <block pos:line="324" pos:column="78">{
					<expr_stmt><expr><name><name pos:line="325" pos:column="41">s</name><index pos:line="325" pos:column="42">[<expr><name pos:line="325" pos:column="43">k</name></expr>]</index></name> <op:operator pos:line="325" pos:column="46">=</op:operator> <call><name><name pos:line="325" pos:column="48">static_cast</name><argument_list pos:line="325" pos:column="59">&lt;<argument><expr><name pos:line="325" pos:column="60">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="325" pos:column="65">(<argument><expr><call><name pos:line="325" pos:column="66">tolower</name><argument_list pos:line="325" pos:column="73">(<argument><expr><name><name pos:line="325" pos:column="74">styler</name><index pos:line="325" pos:column="80">[<expr><name pos:line="325" pos:column="81">lastStart</name><op:operator pos:line="325" pos:column="90">+</op:operator><name pos:line="325" pos:column="91">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name pos:line="327" pos:column="33">s</name><index pos:line="327" pos:column="34">[<expr><name pos:line="327" pos:column="35">k</name></expr>]</index></name> <op:operator pos:line="327" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="327" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
				<comment type="line" pos:line="328" pos:column="33">// Handle the forall and where statement and structure.</comment>
				<if pos:line="329" pos:column="33">if <condition pos:line="329" pos:column="36">(<expr><call><name pos:line="329" pos:column="37">strcmp</name><argument_list pos:line="329" pos:column="43">(<argument><expr><name pos:line="329" pos:column="44">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="329" pos:column="47">"forall"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="329" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="329" pos:column="60">0</lit:literal> <op:operator pos:line="329" pos:column="62">||</op:operator> <call><name pos:line="329" pos:column="65">strcmp</name><argument_list pos:line="329" pos:column="71">(<argument><expr><name pos:line="329" pos:column="72">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="329" pos:column="75">"where"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="329" pos:column="84">==</op:operator> <lit:literal type="number" pos:line="329" pos:column="87">0</lit:literal></expr>)</condition><then pos:line="329" pos:column="89"> <block pos:line="329" pos:column="90">{
					<if pos:line="330" pos:column="41">if <condition pos:line="330" pos:column="44">(<expr><call><name pos:line="330" pos:column="45">strcmp</name><argument_list pos:line="330" pos:column="51">(<argument><expr><name pos:line="330" pos:column="52">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="330" pos:column="62">"end"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="330" pos:column="69">!=</op:operator> <lit:literal type="number" pos:line="330" pos:column="72">0</lit:literal></expr>)</condition><then pos:line="330" pos:column="74"> <block pos:line="330" pos:column="75">{
						<expr_stmt><expr><name pos:line="331" pos:column="49">j</name> <op:operator pos:line="331" pos:column="51">=</op:operator> <name pos:line="331" pos:column="53">i</name> <op:operator pos:line="331" pos:column="55">+</op:operator> <lit:literal type="number" pos:line="331" pos:column="57">1</lit:literal></expr>;</expr_stmt>
						<decl_stmt><decl><type><name pos:line="332" pos:column="49">char</name></type> <name pos:line="332" pos:column="54">chBrace</name> <init pos:line="332" pos:column="62">= <expr><lit:literal type="char" pos:line="332" pos:column="64">'('</lit:literal></expr></init><op:operator pos:line="332" pos:column="67">,</op:operator> <name pos:line="332" pos:column="69">chSeek</name> <init pos:line="332" pos:column="76">= <expr><lit:literal type="char" pos:line="332" pos:column="78">')'</lit:literal></expr></init><op:operator pos:line="332" pos:column="81">,</op:operator> <name pos:line="332" pos:column="83">ch1</name> <init pos:line="332" pos:column="87">= <expr><call><name><name pos:line="332" pos:column="89">styler</name><op:operator pos:line="332" pos:column="95">.</op:operator><name pos:line="332" pos:column="96">SafeGetCharAt</name></name><argument_list pos:line="332" pos:column="109">(<argument><expr><name pos:line="332" pos:column="110">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<comment type="line" pos:line="333" pos:column="49">// Find the position of the first (</comment>
						<while pos:line="334" pos:column="49">while <condition pos:line="334" pos:column="55">(<expr><name pos:line="334" pos:column="56">ch1</name> <op:operator pos:line="334" pos:column="60">!=</op:operator> <name pos:line="334" pos:column="63">chBrace</name> <op:operator pos:line="334" pos:column="71">&amp;&amp;</op:operator> <name pos:line="334" pos:column="74">j</name><op:operator pos:line="334" pos:column="75">&lt;</op:operator><name pos:line="334" pos:column="76">endPos</name></expr>)</condition> <block pos:line="334" pos:column="84">{
							<expr_stmt><expr><name pos:line="335" pos:column="57">j</name><op:operator pos:line="335" pos:column="58">++</op:operator></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="336" pos:column="57">ch1</name> <op:operator pos:line="336" pos:column="61">=</op:operator> <call><name><name pos:line="336" pos:column="63">styler</name><op:operator pos:line="336" pos:column="69">.</op:operator><name pos:line="336" pos:column="70">SafeGetCharAt</name></name><argument_list pos:line="336" pos:column="83">(<argument><expr><name pos:line="336" pos:column="84">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></while>
						<decl_stmt><decl><type><name pos:line="338" pos:column="49">char</name></type> <name pos:line="338" pos:column="54">styBrace</name> <init pos:line="338" pos:column="63">= <expr><call><name><name pos:line="338" pos:column="65">styler</name><op:operator pos:line="338" pos:column="71">.</op:operator><name pos:line="338" pos:column="72">StyleAt</name></name><argument_list pos:line="338" pos:column="79">(<argument><expr><name pos:line="338" pos:column="80">j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="339" pos:column="49">int</name></type> <name pos:line="339" pos:column="53">depth</name> <init pos:line="339" pos:column="59">= <expr><lit:literal type="number" pos:line="339" pos:column="61">1</lit:literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="340" pos:column="49">char</name></type> <name pos:line="340" pos:column="54">chAtPos</name></decl>;</decl_stmt>
						<decl_stmt><decl><type><name pos:line="341" pos:column="49">char</name></type> <name pos:line="341" pos:column="54">styAtPos</name></decl>;</decl_stmt>
						<while pos:line="342" pos:column="49">while <condition pos:line="342" pos:column="55">(<expr><name pos:line="342" pos:column="56">j</name><op:operator pos:line="342" pos:column="57">&lt;</op:operator><name pos:line="342" pos:column="58">endPos</name></expr>)</condition> <block pos:line="342" pos:column="66">{
							<expr_stmt><expr><name pos:line="343" pos:column="57">j</name><op:operator pos:line="343" pos:column="58">++</op:operator></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="344" pos:column="57">chAtPos</name> <op:operator pos:line="344" pos:column="65">=</op:operator> <call><name><name pos:line="344" pos:column="67">styler</name><op:operator pos:line="344" pos:column="73">.</op:operator><name pos:line="344" pos:column="74">SafeGetCharAt</name></name><argument_list pos:line="344" pos:column="87">(<argument><expr><name pos:line="344" pos:column="88">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="345" pos:column="57">styAtPos</name> <op:operator pos:line="345" pos:column="66">=</op:operator> <call><name><name pos:line="345" pos:column="68">styler</name><op:operator pos:line="345" pos:column="74">.</op:operator><name pos:line="345" pos:column="75">StyleAt</name></name><argument_list pos:line="345" pos:column="82">(<argument><expr><name pos:line="345" pos:column="83">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if pos:line="346" pos:column="57">if <condition pos:line="346" pos:column="60">(<expr><name pos:line="346" pos:column="61">styAtPos</name> <op:operator pos:line="346" pos:column="70">==</op:operator> <name pos:line="346" pos:column="73">styBrace</name></expr>)</condition><then pos:line="346" pos:column="82"> <block pos:line="346" pos:column="83">{
								<if pos:line="347" pos:column="65">if <condition pos:line="347" pos:column="68">(<expr><name pos:line="347" pos:column="69">chAtPos</name> <op:operator pos:line="347" pos:column="77">==</op:operator> <name pos:line="347" pos:column="80">chBrace</name></expr>)</condition><then pos:line="347" pos:column="88"> <expr_stmt><expr><name pos:line="347" pos:column="89">depth</name><op:operator pos:line="347" pos:column="94">++</op:operator></expr>;</expr_stmt></then></if>
								<if pos:line="348" pos:column="65">if <condition pos:line="348" pos:column="68">(<expr><name pos:line="348" pos:column="69">chAtPos</name> <op:operator pos:line="348" pos:column="77">==</op:operator> <name pos:line="348" pos:column="80">chSeek</name></expr>)</condition><then pos:line="348" pos:column="87"> <expr_stmt><expr><name pos:line="348" pos:column="88">depth</name><op:operator pos:line="348" pos:column="93">--</op:operator></expr>;</expr_stmt></then></if>
								<if pos:line="349" pos:column="65">if <condition pos:line="349" pos:column="68">(<expr><name pos:line="349" pos:column="69">depth</name> <op:operator pos:line="349" pos:column="75">==</op:operator> <lit:literal type="number" pos:line="349" pos:column="78">0</lit:literal></expr>)</condition><then pos:line="349" pos:column="80"> <break pos:line="349" pos:column="81">break;</break></then></if>
							}</block></then></if>
						}</block></while>
						<while pos:line="352" pos:column="49">while <condition pos:line="352" pos:column="55">(<expr><name pos:line="352" pos:column="56">j</name><op:operator pos:line="352" pos:column="57">&lt;</op:operator><name pos:line="352" pos:column="58">endPos</name></expr>)</condition> <block pos:line="352" pos:column="66">{
							<expr_stmt><expr><name pos:line="353" pos:column="57">j</name><op:operator pos:line="353" pos:column="58">++</op:operator></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="354" pos:column="57">chAtPos</name> <op:operator pos:line="354" pos:column="65">=</op:operator> <call><name><name pos:line="354" pos:column="67">styler</name><op:operator pos:line="354" pos:column="73">.</op:operator><name pos:line="354" pos:column="74">SafeGetCharAt</name></name><argument_list pos:line="354" pos:column="87">(<argument><expr><name pos:line="354" pos:column="88">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><name pos:line="355" pos:column="57">styAtPos</name> <op:operator pos:line="355" pos:column="66">=</op:operator> <call><name><name pos:line="355" pos:column="68">styler</name><op:operator pos:line="355" pos:column="74">.</op:operator><name pos:line="355" pos:column="75">StyleAt</name></name><argument_list pos:line="355" pos:column="82">(<argument><expr><name pos:line="355" pos:column="83">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if pos:line="356" pos:column="57">if <condition pos:line="356" pos:column="60">(<expr><name pos:line="356" pos:column="61">styAtPos</name> <op:operator pos:line="356" pos:column="70">==</op:operator> <name pos:line="356" pos:column="73">SCE_F_COMMENT</name> <op:operator pos:line="356" pos:column="87">||</op:operator> <call><name pos:line="356" pos:column="90">IsABlank</name><argument_list pos:line="356" pos:column="98">(<argument><expr><name pos:line="356" pos:column="99">chAtPos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="356" pos:column="108"> <continue pos:line="356" pos:column="109">continue;</continue></then></if>
							<if pos:line="357" pos:column="57">if <condition pos:line="357" pos:column="60">(<expr><name pos:line="357" pos:column="61">isFixFormat</name></expr>)</condition><then pos:line="357" pos:column="73"> <block pos:line="357" pos:column="74">{
								<if pos:line="358" pos:column="65">if <condition pos:line="358" pos:column="68">(<expr><op:operator pos:line="358" pos:column="69">!</op:operator><call><name pos:line="358" pos:column="70">IsALineEnd</name><argument_list pos:line="358" pos:column="80">(<argument><expr><name pos:line="358" pos:column="81">chAtPos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="358" pos:column="90"> <block pos:line="358" pos:column="91">{
									<break pos:line="359" pos:column="73">break;</break>
								}</block></then> <else pos:line="360" pos:column="67">else <block pos:line="360" pos:column="72">{
									<if pos:line="361" pos:column="73">if <condition pos:line="361" pos:column="76">(<expr><name pos:line="361" pos:column="77">lineCurrent</name> <op:operator pos:line="361" pos:column="89">&lt;</op:operator> <call><name><name pos:line="361" pos:column="91">styler</name><op:operator pos:line="361" pos:column="97">.</op:operator><name pos:line="361" pos:column="98">GetLine</name></name><argument_list pos:line="361" pos:column="105">(<argument><expr><call><name><name pos:line="361" pos:column="106">styler</name><op:operator pos:line="361" pos:column="112">.</op:operator><name pos:line="361" pos:column="113">Length</name></name><argument_list pos:line="361" pos:column="119">()</argument_list></call><op:operator pos:line="361" pos:column="121">-</op:operator><lit:literal type="number" pos:line="361" pos:column="122">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="361" pos:column="125"> <block pos:line="361" pos:column="126">{
										<expr_stmt><expr><name pos:line="362" pos:column="81">j</name> <op:operator pos:line="362" pos:column="83">=</op:operator> <call><name><name pos:line="362" pos:column="85">styler</name><op:operator pos:line="362" pos:column="91">.</op:operator><name pos:line="362" pos:column="92">LineStart</name></name><argument_list pos:line="362" pos:column="101">(<argument><expr><name pos:line="362" pos:column="102">lineCurrent</name><op:operator pos:line="362" pos:column="113">+</op:operator><lit:literal type="number" pos:line="362" pos:column="114">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
										<if pos:line="363" pos:column="81">if <condition pos:line="363" pos:column="84">(<expr><call><name><name pos:line="363" pos:column="85">styler</name><op:operator pos:line="363" pos:column="91">.</op:operator><name pos:line="363" pos:column="92">StyleAt</name></name><argument_list pos:line="363" pos:column="99">(<argument><expr><name pos:line="363" pos:column="100">j</name><op:operator pos:line="363" pos:column="101">+</op:operator><lit:literal type="number" pos:line="363" pos:column="102">5</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="363" pos:column="105">==</op:operator> <name pos:line="363" pos:column="108">SCE_F_CONTINUATION</name></expr>)</condition><then pos:line="363" pos:column="127"> <block pos:line="363" pos:column="128">{
											<expr_stmt><expr><name pos:line="364" pos:column="89">j</name> <op:operator pos:line="364" pos:column="91">+=</op:operator> <lit:literal type="number" pos:line="364" pos:column="94">5</lit:literal></expr>;</expr_stmt>
											<continue pos:line="365" pos:column="89">continue;</continue>
										}</block></then> <else pos:line="366" pos:column="83">else <block pos:line="366" pos:column="88">{
											<expr_stmt><expr><name pos:line="367" pos:column="89">levelCurrent</name><op:operator pos:line="367" pos:column="101">++</op:operator></expr>;</expr_stmt>
											<break pos:line="368" pos:column="89">break;</break>
										}</block></else></if>
									}</block></then></if>
								}</block></else></if>
							}</block></then> <else pos:line="372" pos:column="59">else <block pos:line="372" pos:column="64">{
								<if pos:line="373" pos:column="65">if <condition pos:line="373" pos:column="68">(<expr><name pos:line="373" pos:column="69">chAtPos</name> <op:operator pos:line="373" pos:column="77">==</op:operator> <lit:literal type="char" pos:line="373" pos:column="80">'&amp;'</lit:literal> <op:operator pos:line="373" pos:column="84">&amp;&amp;</op:operator> <call><name><name pos:line="373" pos:column="87">styler</name><op:operator pos:line="373" pos:column="93">.</op:operator><name pos:line="373" pos:column="94">StyleAt</name></name><argument_list pos:line="373" pos:column="101">(<argument><expr><name pos:line="373" pos:column="102">j</name></expr></argument>)</argument_list></call> <op:operator pos:line="373" pos:column="105">==</op:operator> <name pos:line="373" pos:column="108">SCE_F_CONTINUATION</name></expr>)</condition><then pos:line="373" pos:column="127"> <block pos:line="373" pos:column="128">{
									<expr_stmt><expr><name pos:line="374" pos:column="73">j</name> <op:operator pos:line="374" pos:column="75">=</op:operator> <call><name pos:line="374" pos:column="77">GetContinuedPos</name><argument_list pos:line="374" pos:column="92">(<argument><expr><name pos:line="374" pos:column="93">j</name><op:operator pos:line="374" pos:column="94">+</op:operator><lit:literal type="number" pos:line="374" pos:column="95">1</lit:literal></expr></argument>, <argument><expr><name pos:line="374" pos:column="98">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<continue pos:line="375" pos:column="73">continue;</continue>
								}</block></then> <else pos:line="376" pos:column="67">else <if pos:line="376" pos:column="72">if <condition pos:line="376" pos:column="75">(<expr><call><name pos:line="376" pos:column="76">IsALineEnd</name><argument_list pos:line="376" pos:column="86">(<argument><expr><name pos:line="376" pos:column="87">chAtPos</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="376" pos:column="96"> <block pos:line="376" pos:column="97">{
									<expr_stmt><expr><name pos:line="377" pos:column="73">levelCurrent</name> <op:operator pos:line="377" pos:column="86">++</op:operator></expr>;</expr_stmt>
									<break pos:line="378" pos:column="73">break;</break>
								}</block></then> <else pos:line="379" pos:column="67">else <block pos:line="379" pos:column="72">{
									<break pos:line="380" pos:column="73">break;</break>
								}</block></else></if></else></if>
							}</block></else></if>
						}</block></while>
					}</block></then></if>
				}</block></then> <else pos:line="385" pos:column="35">else <block pos:line="385" pos:column="40">{
					<expr_stmt><expr><name pos:line="386" pos:column="41">levelCurrent</name> <op:operator pos:line="386" pos:column="54">+=</op:operator> <call><name pos:line="386" pos:column="57">classifyFoldPointFortran</name><argument_list pos:line="386" pos:column="81">(<argument><expr><name pos:line="386" pos:column="82">s</name></expr></argument>, <argument><expr><name pos:line="386" pos:column="85">prevWord</name></expr></argument>, <argument><expr><name pos:line="386" pos:column="95">chNextNonBlank</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<comment type="line" pos:line="387" pos:column="41">// Store the do Labels into array</comment>
					<if pos:line="388" pos:column="41">if <condition pos:line="388" pos:column="44">(<expr><call><name pos:line="388" pos:column="45">strcmp</name><argument_list pos:line="388" pos:column="51">(<argument><expr><name pos:line="388" pos:column="52">s</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="388" pos:column="55">"do"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="388" pos:column="61">==</op:operator> <lit:literal type="number" pos:line="388" pos:column="64">0</lit:literal> <op:operator pos:line="388" pos:column="66">&amp;&amp;</op:operator> <call><name pos:line="388" pos:column="69">IsADigit</name><argument_list pos:line="388" pos:column="77">(<argument><expr><name pos:line="388" pos:column="78">chNextNonBlank</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="388" pos:column="94"> <block pos:line="388" pos:column="95">{
						<decl_stmt><decl><type><name pos:line="389" pos:column="49">unsigned</name> <name pos:line="389" pos:column="58">int</name></type> <name pos:line="389" pos:column="62">k</name> <init pos:line="389" pos:column="64">= <expr><lit:literal type="number" pos:line="389" pos:column="66">0</lit:literal></expr></init></decl>;</decl_stmt>
						<for pos:line="390" pos:column="49">for (<init><expr><name pos:line="390" pos:column="54">i</name><op:operator pos:line="390" pos:column="55">=</op:operator><name pos:line="390" pos:column="56">j</name></expr>;</init> <condition><expr><op:operator pos:line="390" pos:column="59">(</op:operator><name pos:line="390" pos:column="60">i</name><op:operator pos:line="390" pos:column="61">&lt;</op:operator><name pos:line="390" pos:column="62">j</name><op:operator pos:line="390" pos:column="63">+</op:operator><lit:literal type="number" pos:line="390" pos:column="64">5</lit:literal> <op:operator pos:line="390" pos:column="66">&amp;&amp;</op:operator> <name pos:line="390" pos:column="69">i</name><op:operator pos:line="390" pos:column="70">&lt;</op:operator><name pos:line="390" pos:column="71">endPos</name><op:operator pos:line="390" pos:column="77">)</op:operator></expr>;</condition> <incr><expr><name pos:line="390" pos:column="80">i</name><op:operator pos:line="390" pos:column="81">++</op:operator></expr></incr>) <block pos:line="390" pos:column="85">{
							<expr_stmt><expr><name pos:line="391" pos:column="57">ch</name> <op:operator pos:line="391" pos:column="60">=</op:operator> <call><name><name pos:line="391" pos:column="62">styler</name><op:operator pos:line="391" pos:column="68">.</op:operator><name pos:line="391" pos:column="69">SafeGetCharAt</name></name><argument_list pos:line="391" pos:column="82">(<argument><expr><name pos:line="391" pos:column="83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<if pos:line="392" pos:column="57">if <condition pos:line="392" pos:column="60">(<expr><call><name pos:line="392" pos:column="61">IsADigit</name><argument_list pos:line="392" pos:column="69">(<argument><expr><name pos:line="392" pos:column="70">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="392" pos:column="74">
								<expr_stmt><expr><name><name pos:line="393" pos:column="65">Label</name><index pos:line="393" pos:column="70">[<expr><name pos:line="393" pos:column="71">k</name><op:operator pos:line="393" pos:column="72">++</op:operator></expr>]</index></name> <op:operator pos:line="393" pos:column="76">=</op:operator> <name pos:line="393" pos:column="78">ch</name></expr>;</expr_stmt></then>
							<else pos:line="394" pos:column="57">else
								<break pos:line="395" pos:column="65">break;</break></else></if>
						}</block></for>
						<expr_stmt><expr><name><name pos:line="397" pos:column="49">Label</name><index pos:line="397" pos:column="54">[<expr><name pos:line="397" pos:column="55">k</name></expr>]</index></name> <op:operator pos:line="397" pos:column="58">=</op:operator> <lit:literal type="char" pos:line="397" pos:column="60">'\0'</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="398" pos:column="49">posLabel</name> <op:operator pos:line="398" pos:column="58">++</op:operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name pos:line="399" pos:column="49">doLabels</name><index pos:line="399" pos:column="57">[<expr><name pos:line="399" pos:column="58">posLabel</name></expr>]</index></name> <op:operator pos:line="399" pos:column="68">=</op:operator> <call><name pos:line="399" pos:column="70">atoi</name><argument_list pos:line="399" pos:column="74">(<argument><expr><name pos:line="399" pos:column="75">Label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if>
				<expr_stmt><expr><call><name pos:line="402" pos:column="33">strcpy</name><argument_list pos:line="402" pos:column="39">(<argument><expr><name pos:line="402" pos:column="40">prevWord</name></expr></argument>, <argument><expr><name pos:line="402" pos:column="50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="404" pos:column="19">else <if pos:line="404" pos:column="24">if <condition pos:line="404" pos:column="27">(<expr><name pos:line="404" pos:column="28">style</name> <op:operator pos:line="404" pos:column="34">==</op:operator> <name pos:line="404" pos:column="37">SCE_F_LABEL</name></expr>)</condition><then pos:line="404" pos:column="49"> <block pos:line="404" pos:column="50">{
			<if pos:line="405" pos:column="25">if<condition pos:line="405" pos:column="27">(<expr><call><name pos:line="405" pos:column="28">IsADigit</name><argument_list pos:line="405" pos:column="36">(<argument><expr><name pos:line="405" pos:column="37">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="405" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="405" pos:column="44">!</op:operator><call><name pos:line="405" pos:column="45">IsADigit</name><argument_list pos:line="405" pos:column="53">(<argument><expr><name pos:line="405" pos:column="54">chNext</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="405" pos:column="62"> <block pos:line="405" pos:column="63">{
				<for pos:line="406" pos:column="33">for(<init><expr><name pos:line="406" pos:column="37">j</name> <op:operator pos:line="406" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="406" pos:column="41">0</lit:literal></expr>;</init> <condition><expr><op:operator pos:line="406" pos:column="44">(</op:operator> <name pos:line="406" pos:column="46">j</name> <op:operator pos:line="406" pos:column="48">&lt;</op:operator> <lit:literal type="number" pos:line="406" pos:column="50">5</lit:literal> <op:operator pos:line="406" pos:column="52">)</op:operator> <op:operator pos:line="406" pos:column="54">&amp;&amp;</op:operator> <op:operator pos:line="406" pos:column="57">(</op:operator> <name pos:line="406" pos:column="59">j</name> <op:operator pos:line="406" pos:column="61">&lt;</op:operator> <name pos:line="406" pos:column="63">i</name><op:operator pos:line="406" pos:column="64">-</op:operator><name pos:line="406" pos:column="65">lastStart</name><op:operator pos:line="406" pos:column="74">+</op:operator><lit:literal type="number" pos:line="406" pos:column="75">1</lit:literal> <op:operator pos:line="406" pos:column="77">)</op:operator></expr>;</condition> <incr><expr><name pos:line="406" pos:column="80">j</name><op:operator pos:line="406" pos:column="81">++</op:operator></expr></incr>) <block pos:line="406" pos:column="85">{
					<expr_stmt><expr><name pos:line="407" pos:column="41">ch</name> <op:operator pos:line="407" pos:column="44">=</op:operator> <call><name><name pos:line="407" pos:column="46">styler</name><op:operator pos:line="407" pos:column="52">.</op:operator><name pos:line="407" pos:column="53">SafeGetCharAt</name></name><argument_list pos:line="407" pos:column="66">(<argument><expr><name pos:line="407" pos:column="67">lastStart</name> <op:operator pos:line="407" pos:column="77">+</op:operator> <name pos:line="407" pos:column="79">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="408" pos:column="41">if <condition pos:line="408" pos:column="44">(<expr><call><name pos:line="408" pos:column="45">IsADigit</name><argument_list pos:line="408" pos:column="53">(<argument><expr><name pos:line="408" pos:column="54">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="408" pos:column="58">&amp;&amp;</op:operator> <call><name><name pos:line="408" pos:column="61">styler</name><op:operator pos:line="408" pos:column="67">.</op:operator><name pos:line="408" pos:column="68">StyleAt</name></name><argument_list pos:line="408" pos:column="75">(<argument><expr><name pos:line="408" pos:column="76">lastStart</name><op:operator pos:line="408" pos:column="85">+</op:operator><name pos:line="408" pos:column="86">j</name></expr></argument>)</argument_list></call> <op:operator pos:line="408" pos:column="89">==</op:operator> <name pos:line="408" pos:column="92">SCE_F_LABEL</name></expr>)</condition><then pos:line="408" pos:column="104">
						<expr_stmt><expr><name><name pos:line="409" pos:column="49">Label</name><index pos:line="409" pos:column="54">[<expr><name pos:line="409" pos:column="55">j</name></expr>]</index></name> <op:operator pos:line="409" pos:column="58">=</op:operator> <name pos:line="409" pos:column="60">ch</name></expr>;</expr_stmt></then>
					<else pos:line="410" pos:column="41">else
						<break pos:line="411" pos:column="49">break;</break></else></if>
				}</block></for>
				<expr_stmt><expr><name><name pos:line="413" pos:column="33">Label</name><index pos:line="413" pos:column="38">[<expr><name pos:line="413" pos:column="39">j</name></expr>]</index></name> <op:operator pos:line="413" pos:column="42">=</op:operator> <lit:literal type="char" pos:line="413" pos:column="44">'\0'</lit:literal></expr>;</expr_stmt>
				<while pos:line="414" pos:column="33">while <condition pos:line="414" pos:column="39">(<expr><name><name pos:line="414" pos:column="40">doLabels</name><index pos:line="414" pos:column="48">[<expr><name pos:line="414" pos:column="49">posLabel</name></expr>]</index></name> <op:operator pos:line="414" pos:column="59">==</op:operator> <call><name pos:line="414" pos:column="62">atoi</name><argument_list pos:line="414" pos:column="66">(<argument><expr><name pos:line="414" pos:column="67">Label</name></expr></argument>)</argument_list></call> <op:operator pos:line="414" pos:column="74">&amp;&amp;</op:operator> <name pos:line="414" pos:column="77">posLabel</name> <op:operator pos:line="414" pos:column="86">&gt;</op:operator> <op:operator pos:line="414" pos:column="88">-</op:operator><lit:literal type="number" pos:line="414" pos:column="89">1</lit:literal></expr>)</condition> <block pos:line="414" pos:column="92">{
					<expr_stmt><expr><name pos:line="415" pos:column="41">levelCurrent</name><op:operator pos:line="415" pos:column="53">--</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="416" pos:column="41">posLabel</name><op:operator pos:line="416" pos:column="49">--</op:operator></expr>;</expr_stmt>
				}</block></while>
			}</block></then></if>
		}</block></then></if></else></if>
		<if pos:line="420" pos:column="17">if <condition pos:line="420" pos:column="20">(<expr><name pos:line="420" pos:column="21">atEOL</name></expr>)</condition><then pos:line="420" pos:column="27"> <block pos:line="420" pos:column="28">{
			<decl_stmt><decl><type><name pos:line="421" pos:column="25">int</name></type> <name pos:line="421" pos:column="29">lev</name> <init pos:line="421" pos:column="33">= <expr><name pos:line="421" pos:column="35">levelPrev</name></expr></init></decl>;</decl_stmt>
			<if pos:line="422" pos:column="25">if <condition pos:line="422" pos:column="28">(<expr><name pos:line="422" pos:column="29">visibleChars</name> <op:operator pos:line="422" pos:column="42">==</op:operator> <lit:literal type="number" pos:line="422" pos:column="45">0</lit:literal> <op:operator pos:line="422" pos:column="47">&amp;&amp;</op:operator> <name pos:line="422" pos:column="50">foldCompact</name></expr>)</condition><then pos:line="422" pos:column="62">
				<expr_stmt><expr><name pos:line="423" pos:column="33">lev</name> <op:operator pos:line="423" pos:column="37">|=</op:operator> <name pos:line="423" pos:column="40">SC_FOLDLEVELWHITEFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="424" pos:column="25">if <condition pos:line="424" pos:column="28">(<expr><op:operator pos:line="424" pos:column="29">(</op:operator><name pos:line="424" pos:column="30">levelCurrent</name> <op:operator pos:line="424" pos:column="43">&gt;</op:operator> <name pos:line="424" pos:column="45">levelPrev</name><op:operator pos:line="424" pos:column="54">)</op:operator> <op:operator pos:line="424" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="424" pos:column="59">(</op:operator><name pos:line="424" pos:column="60">visibleChars</name> <op:operator pos:line="424" pos:column="73">&gt;</op:operator> <lit:literal type="number" pos:line="424" pos:column="75">0</lit:literal><op:operator pos:line="424" pos:column="76">)</op:operator></expr>)</condition><then pos:line="424" pos:column="78">
				<expr_stmt><expr><name pos:line="425" pos:column="33">lev</name> <op:operator pos:line="425" pos:column="37">|=</op:operator> <name pos:line="425" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
			<if pos:line="426" pos:column="25">if <condition pos:line="426" pos:column="28">(<expr><name pos:line="426" pos:column="29">lev</name> <op:operator pos:line="426" pos:column="33">!=</op:operator> <call><name><name pos:line="426" pos:column="36">styler</name><op:operator pos:line="426" pos:column="42">.</op:operator><name pos:line="426" pos:column="43">LevelAt</name></name><argument_list pos:line="426" pos:column="50">(<argument><expr><name pos:line="426" pos:column="51">lineCurrent</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="426" pos:column="64"> <block pos:line="426" pos:column="65">{
				<expr_stmt><expr><call><name><name pos:line="427" pos:column="33">styler</name><op:operator pos:line="427" pos:column="39">.</op:operator><name pos:line="427" pos:column="40">SetLevel</name></name><argument_list pos:line="427" pos:column="48">(<argument><expr><name pos:line="427" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="427" pos:column="62">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="429" pos:column="25">lineCurrent</name><op:operator pos:line="429" pos:column="36">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="430" pos:column="25">levelPrev</name> <op:operator pos:line="430" pos:column="35">=</op:operator> <name pos:line="430" pos:column="37">levelCurrent</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="431" pos:column="25">visibleChars</name> <op:operator pos:line="431" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="431" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="432" pos:column="25">strcpy</name><argument_list pos:line="432" pos:column="31">(<argument><expr><name pos:line="432" pos:column="32">prevWord</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="432" pos:column="42">""</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="block" format="doxygen" pos:line="434" pos:column="17">/***************************************/</comment>
		<if pos:line="435" pos:column="17">if <condition pos:line="435" pos:column="20">(<expr><op:operator pos:line="435" pos:column="21">!</op:operator><call><name pos:line="435" pos:column="22">isspacechar</name><argument_list pos:line="435" pos:column="33">(<argument><expr><name pos:line="435" pos:column="34">ch</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="435" pos:column="38"> <expr_stmt><expr><name pos:line="435" pos:column="39">visibleChars</name><op:operator pos:line="435" pos:column="51">++</op:operator></expr>;</expr_stmt></then></if>
	}</block></for>
	<comment type="block" format="doxygen" pos:line="437" pos:column="9">/***************************************/</comment>
	<comment type="line" pos:line="438" pos:column="9">// Fill in the real level of the next line, keeping the current flags as they will be filled in later</comment>
	<decl_stmt><decl><type><name pos:line="439" pos:column="9">int</name></type> <name pos:line="439" pos:column="13">flagsNext</name> <init pos:line="439" pos:column="23">= <expr><call><name><name pos:line="439" pos:column="25">styler</name><op:operator pos:line="439" pos:column="31">.</op:operator><name pos:line="439" pos:column="32">LevelAt</name></name><argument_list pos:line="439" pos:column="39">(<argument><expr><name pos:line="439" pos:column="40">lineCurrent</name></expr></argument>)</argument_list></call> <op:operator pos:line="439" pos:column="53">&amp;</op:operator> <op:operator pos:line="439" pos:column="55">~</op:operator><name pos:line="439" pos:column="56">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="440" pos:column="9">styler</name><op:operator pos:line="440" pos:column="15">.</op:operator><name pos:line="440" pos:column="16">SetLevel</name></name><argument_list pos:line="440" pos:column="24">(<argument><expr><name pos:line="440" pos:column="25">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="440" pos:column="38">levelPrev</name> <op:operator pos:line="440" pos:column="48">|</op:operator> <name pos:line="440" pos:column="50">flagsNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="block" format="doxygen" pos:line="442" pos:column="1">/***************************************/</comment>
<decl_stmt><decl><type><specifier pos:line="443" pos:column="1">static</specifier> <specifier pos:line="443" pos:column="8">const</specifier> <name pos:line="443" pos:column="14">char</name> <type:modifier pos:line="443" pos:column="19">*</type:modifier> <specifier pos:line="443" pos:column="21">const</specifier></type> <name><name pos:line="443" pos:column="27">FortranWordLists</name><index pos:line="443" pos:column="43">[]</index></name> <init pos:line="443" pos:column="46">= <expr><block pos:line="443" pos:column="48">{
	<expr><lit:literal type="string" pos:line="444" pos:column="9">"Primary keywords and identifiers"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="445" pos:column="9">"Intrinsic functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="446" pos:column="9">"Extended and user defined functions"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="447" pos:column="9">0</lit:literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen" pos:line="449" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="450" pos:column="1">static</specifier> <name pos:line="450" pos:column="8">void</name></type> <name pos:line="450" pos:column="13">ColouriseFortranDocFreeFormat</name><parameter_list pos:line="450" pos:column="42">(<param><decl><type><name pos:line="450" pos:column="43">unsigned</name> <name pos:line="450" pos:column="52">int</name></type> <name pos:line="450" pos:column="56">startPos</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="66">int</name></type> <name pos:line="450" pos:column="70">length</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="78">int</name></type> <name pos:line="450" pos:column="82">initStyle</name></decl></param>, <param><decl><type><name pos:line="450" pos:column="93">WordList</name> <type:modifier pos:line="450" pos:column="102">*</type:modifier></type><name><name pos:line="450" pos:column="103">keywordlists</name><index pos:line="450" pos:column="115">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="451" pos:column="29">Accessor</name> <type:modifier pos:line="451" pos:column="38">&amp;</type:modifier></type><name pos:line="451" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="451" pos:column="47">{
	<expr_stmt><expr><call><name pos:line="452" pos:column="9">ColouriseFortranDoc</name><argument_list pos:line="452" pos:column="28">(<argument><expr><name pos:line="452" pos:column="29">startPos</name></expr></argument>, <argument><expr><name pos:line="452" pos:column="39">length</name></expr></argument>, <argument><expr><name pos:line="452" pos:column="47">initStyle</name></expr></argument>, <argument><expr><name pos:line="452" pos:column="58">keywordlists</name></expr></argument>, <argument><expr><name pos:line="452" pos:column="72">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="452" pos:column="80">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="block" format="doxygen" pos:line="454" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="455" pos:column="1">static</specifier> <name pos:line="455" pos:column="8">void</name></type> <name pos:line="455" pos:column="13">ColouriseFortranDocFixFormat</name><parameter_list pos:line="455" pos:column="41">(<param><decl><type><name pos:line="455" pos:column="42">unsigned</name> <name pos:line="455" pos:column="51">int</name></type> <name pos:line="455" pos:column="55">startPos</name></decl></param>, <param><decl><type><name pos:line="455" pos:column="65">int</name></type> <name pos:line="455" pos:column="69">length</name></decl></param>, <param><decl><type><name pos:line="455" pos:column="77">int</name></type> <name pos:line="455" pos:column="81">initStyle</name></decl></param>, <param><decl><type><name pos:line="455" pos:column="92">WordList</name> <type:modifier pos:line="455" pos:column="101">*</type:modifier></type><name><name pos:line="455" pos:column="102">keywordlists</name><index pos:line="455" pos:column="114">[]</index></name></decl></param>,
                            <param><decl><type><name pos:line="456" pos:column="29">Accessor</name> <type:modifier pos:line="456" pos:column="38">&amp;</type:modifier></type><name pos:line="456" pos:column="39">styler</name></decl></param>)</parameter_list> <block pos:line="456" pos:column="47">{
	<expr_stmt><expr><call><name pos:line="457" pos:column="9">ColouriseFortranDoc</name><argument_list pos:line="457" pos:column="28">(<argument><expr><name pos:line="457" pos:column="29">startPos</name></expr></argument>, <argument><expr><name pos:line="457" pos:column="39">length</name></expr></argument>, <argument><expr><name pos:line="457" pos:column="47">initStyle</name></expr></argument>, <argument><expr><name pos:line="457" pos:column="58">keywordlists</name></expr></argument>, <argument><expr><name pos:line="457" pos:column="72">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="457" pos:column="80">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="block" format="doxygen" pos:line="459" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="460" pos:column="1">static</specifier> <name pos:line="460" pos:column="8">void</name></type> <name pos:line="460" pos:column="13">FoldFortranDocFreeFormat</name><parameter_list pos:line="460" pos:column="37">(<param><decl><type><name pos:line="460" pos:column="38">unsigned</name> <name pos:line="460" pos:column="47">int</name></type> <name pos:line="460" pos:column="51">startPos</name></decl></param>, <param><decl><type><name pos:line="460" pos:column="61">int</name></type> <name pos:line="460" pos:column="65">length</name></decl></param>, <param><decl><type><name pos:line="460" pos:column="73">int</name></type> <name pos:line="460" pos:column="77">initStyle</name></decl></param>,
		<param><decl><type><name><name pos:line="461" pos:column="17">WordList</name> <type:modifier pos:line="461" pos:column="26">*</type:modifier><index pos:line="461" pos:column="27">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="461" pos:column="31">Accessor</name> <type:modifier pos:line="461" pos:column="40">&amp;</type:modifier></type><name pos:line="461" pos:column="41">styler</name></decl></param>)</parameter_list> <block pos:line="461" pos:column="49">{
	<expr_stmt><expr><call><name pos:line="462" pos:column="9">FoldFortranDoc</name><argument_list pos:line="462" pos:column="23">(<argument><expr><name pos:line="462" pos:column="24">startPos</name></expr></argument>, <argument><expr><name pos:line="462" pos:column="34">length</name></expr></argument>, <argument><expr><name pos:line="462" pos:column="42">initStyle</name></expr></argument>,<argument><expr><name pos:line="462" pos:column="52">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="462" pos:column="60">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="block" format="doxygen" pos:line="464" pos:column="1">/***************************************/</comment>
<function><type><specifier pos:line="465" pos:column="1">static</specifier> <name pos:line="465" pos:column="8">void</name></type> <name pos:line="465" pos:column="13">FoldFortranDocFixFormat</name><parameter_list pos:line="465" pos:column="36">(<param><decl><type><name pos:line="465" pos:column="37">unsigned</name> <name pos:line="465" pos:column="46">int</name></type> <name pos:line="465" pos:column="50">startPos</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="60">int</name></type> <name pos:line="465" pos:column="64">length</name></decl></param>, <param><decl><type><name pos:line="465" pos:column="72">int</name></type> <name pos:line="465" pos:column="76">initStyle</name></decl></param>,
		<param><decl><type><name><name pos:line="466" pos:column="17">WordList</name> <type:modifier pos:line="466" pos:column="26">*</type:modifier><index pos:line="466" pos:column="27">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="466" pos:column="31">Accessor</name> <type:modifier pos:line="466" pos:column="40">&amp;</type:modifier></type><name pos:line="466" pos:column="41">styler</name></decl></param>)</parameter_list> <block pos:line="466" pos:column="49">{
	<expr_stmt><expr><call><name pos:line="467" pos:column="9">FoldFortranDoc</name><argument_list pos:line="467" pos:column="23">(<argument><expr><name pos:line="467" pos:column="24">startPos</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="34">length</name></expr></argument>, <argument><expr><name pos:line="467" pos:column="42">initStyle</name></expr></argument>,<argument><expr><name pos:line="467" pos:column="52">styler</name></expr></argument>, <argument><expr><lit:literal type="boolean" pos:line="467" pos:column="60">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="block" format="doxygen" pos:line="469" pos:column="1">/***************************************/</comment>
<decl_stmt><decl><type><name pos:line="470" pos:column="1">LexerModule</name></type> <name pos:line="470" pos:column="13">lmFortran</name><argument_list pos:line="470" pos:column="22">(<argument><expr><name pos:line="470" pos:column="23">SCLEX_FORTRAN</name></expr></argument>, <argument><expr><name pos:line="470" pos:column="38">ColouriseFortranDocFreeFormat</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="470" pos:column="69">"fortran"</lit:literal></expr></argument>, <argument><expr><name pos:line="470" pos:column="80">FoldFortranDocFreeFormat</name></expr></argument>, <argument><expr><name pos:line="470" pos:column="106">FortranWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="471" pos:column="1">LexerModule</name></type> <name pos:line="471" pos:column="13">lmF77</name><argument_list pos:line="471" pos:column="18">(<argument><expr><name pos:line="471" pos:column="19">SCLEX_F77</name></expr></argument>, <argument><expr><name pos:line="471" pos:column="30">ColouriseFortranDocFixFormat</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="471" pos:column="60">"f77"</lit:literal></expr></argument>, <argument><expr><name pos:line="471" pos:column="67">FoldFortranDocFixFormat</name></expr></argument>, <argument><expr><name pos:line="471" pos:column="92">FortranWordLists</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
