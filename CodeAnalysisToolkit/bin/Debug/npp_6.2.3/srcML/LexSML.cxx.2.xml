<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexSML.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexSML.cxx
 ** Lexer for SML.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2009 by James Moffatt and Yuzhou Xin</comment>
<comment type="line" pos:line="6" pos:column="1">// Modified from LexCaml.cxx by Robert Roessler &lt;robertr@rftp.com&gt; Copyright 2005</comment>
<comment type="line" pos:line="7" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<function><type><specifier pos:line="27" pos:column="1">inline</specifier> <name pos:line="27" pos:column="8">int</name></type>  <name pos:line="27" pos:column="13">issml</name><parameter_list pos:line="27" pos:column="18">(<param><decl><type><name pos:line="27" pos:column="19">int</name></type> <name pos:line="27" pos:column="23">c</name></decl></param>)</parameter_list> <block pos:line="27" pos:column="26">{<return pos:line="27" pos:column="27">return <expr><call><name pos:line="27" pos:column="34">isalnum</name><argument_list pos:line="27" pos:column="41">(<argument><expr><name pos:line="27" pos:column="42">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="27" pos:column="45">||</op:operator> <name pos:line="27" pos:column="48">c</name> <op:operator pos:line="27" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="27" pos:column="53">'_'</lit:literal></expr>;</return>}</block></function>
<function><type><specifier pos:line="28" pos:column="1">inline</specifier> <name pos:line="28" pos:column="8">int</name></type> <name pos:line="28" pos:column="12">issmlf</name><parameter_list pos:line="28" pos:column="18">(<param><decl><type><name pos:line="28" pos:column="19">int</name></type> <name pos:line="28" pos:column="23">c</name></decl></param>)</parameter_list> <block pos:line="28" pos:column="26">{<return pos:line="28" pos:column="27">return <expr><call><name pos:line="28" pos:column="34">isalpha</name><argument_list pos:line="28" pos:column="41">(<argument><expr><name pos:line="28" pos:column="42">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="28" pos:column="45">||</op:operator> <name pos:line="28" pos:column="48">c</name> <op:operator pos:line="28" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="28" pos:column="53">'_'</lit:literal></expr>;</return>}</block></function>
<function><type><specifier pos:line="29" pos:column="1">inline</specifier> <name pos:line="29" pos:column="8">int</name></type> <name pos:line="29" pos:column="12">issmld</name><parameter_list pos:line="29" pos:column="18">(<param><decl><type><name pos:line="29" pos:column="19">int</name></type> <name pos:line="29" pos:column="23">c</name></decl></param>)</parameter_list> <block pos:line="29" pos:column="26">{<return pos:line="29" pos:column="27">return <expr><call><name pos:line="29" pos:column="34">isdigit</name><argument_list pos:line="29" pos:column="41">(<argument><expr><name pos:line="29" pos:column="42">c</name></expr></argument>)</argument_list></call> <op:operator pos:line="29" pos:column="45">||</op:operator> <name pos:line="29" pos:column="48">c</name> <op:operator pos:line="29" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="29" pos:column="53">'_'</lit:literal></expr>;</return>}</block></function>


<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef</cpp:directive> <name pos:line="32" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="33" pos:column="1">using namespace <name pos:line="33" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="36" pos:column="1">void</name></type> <name pos:line="36" pos:column="6">ColouriseSMLDoc</name><parameter_list pos:line="36" pos:column="21">(
	<param><decl><type><name pos:line="37" pos:column="9">unsigned</name> <name pos:line="37" pos:column="18">int</name></type> <name pos:line="37" pos:column="22">startPos</name></decl></param>, <param><decl><type><name pos:line="37" pos:column="32">int</name></type> <name pos:line="37" pos:column="36">length</name></decl></param>,
	<param><decl><type><name pos:line="38" pos:column="9">int</name></type> <name pos:line="38" pos:column="13">initStyle</name></decl></param>,
	<param><decl><type><name pos:line="39" pos:column="9">WordList</name> <type:modifier pos:line="39" pos:column="18">*</type:modifier></type><name><name pos:line="39" pos:column="19">keywordlists</name><index pos:line="39" pos:column="31">[]</index></name></decl></param>,
	<param><decl><type><name pos:line="40" pos:column="9">Accessor</name> <type:modifier pos:line="40" pos:column="18">&amp;</type:modifier></type><name pos:line="40" pos:column="19">styler</name></decl></param>)</parameter_list>
<block pos:line="41" pos:column="1">{
	<function_decl><type><name pos:line="42" pos:column="9">StyleContext</name></type> <name pos:line="42" pos:column="22">sc</name><parameter_list pos:line="42" pos:column="24">(<param><decl><type><name pos:line="42" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="42" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="42" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="42" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name pos:line="43" pos:column="9">int</name></type> <name pos:line="43" pos:column="13">nesting</name> <init pos:line="43" pos:column="21">= <expr><lit:literal type="number" pos:line="43" pos:column="23">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">sc</name><op:operator pos:line="44" pos:column="15">.</op:operator><name pos:line="44" pos:column="16">state</name></name> <op:operator pos:line="44" pos:column="22">&lt;</op:operator> <name pos:line="44" pos:column="24">SCE_SML_STRING</name></expr>)</condition><then pos:line="44" pos:column="39">
		<expr_stmt><expr><name><name pos:line="45" pos:column="17">sc</name><op:operator pos:line="45" pos:column="19">.</op:operator><name pos:line="45" pos:column="20">state</name></name> <op:operator pos:line="45" pos:column="26">=</op:operator> <name pos:line="45" pos:column="28">SCE_SML_DEFAULT</name></expr>;</expr_stmt></then></if>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name><name pos:line="46" pos:column="13">sc</name><op:operator pos:line="46" pos:column="15">.</op:operator><name pos:line="46" pos:column="16">state</name></name> <op:operator pos:line="46" pos:column="22">&gt;=</op:operator> <name pos:line="46" pos:column="25">SCE_SML_COMMENT</name></expr>)</condition><then pos:line="46" pos:column="41">
		<expr_stmt><expr><name pos:line="47" pos:column="17">nesting</name> <op:operator pos:line="47" pos:column="25">=</op:operator> <op:operator pos:line="47" pos:column="27">(</op:operator><name><name pos:line="47" pos:column="28">sc</name><op:operator pos:line="47" pos:column="30">.</op:operator><name pos:line="47" pos:column="31">state</name></name> <op:operator pos:line="47" pos:column="37">&amp;</op:operator> <lit:literal type="number" pos:line="47" pos:column="39">0x0f</lit:literal><op:operator pos:line="47" pos:column="43">)</op:operator> <op:operator pos:line="47" pos:column="45">-</op:operator> <name pos:line="47" pos:column="47">SCE_SML_COMMENT</name></expr>;</expr_stmt></then></if>

	<decl_stmt><decl><type><name pos:line="49" pos:column="9">int</name></type> <name pos:line="49" pos:column="13">chBase</name> <init pos:line="49" pos:column="20">= <expr><lit:literal type="number" pos:line="49" pos:column="22">0</lit:literal></expr></init><op:operator pos:line="49" pos:column="23">,</op:operator> <name pos:line="49" pos:column="25">chToken</name> <init pos:line="49" pos:column="33">= <expr><lit:literal type="number" pos:line="49" pos:column="35">0</lit:literal></expr></init><op:operator pos:line="49" pos:column="36">,</op:operator> <name pos:line="49" pos:column="38">chLit</name> <init pos:line="49" pos:column="44">= <expr><lit:literal type="number" pos:line="49" pos:column="46">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="50" pos:column="9">WordList</name><type:modifier pos:line="50" pos:column="17">&amp;</type:modifier></type> <name pos:line="50" pos:column="19">keywords</name>  <init pos:line="50" pos:column="29">= <expr><op:operator pos:line="50" pos:column="31">*</op:operator><name><name pos:line="50" pos:column="32">keywordlists</name><index pos:line="50" pos:column="44">[<expr><lit:literal type="number" pos:line="50" pos:column="45">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="51" pos:column="9">WordList</name><type:modifier pos:line="51" pos:column="17">&amp;</type:modifier></type> <name pos:line="51" pos:column="19">keywords2</name> <init pos:line="51" pos:column="29">= <expr><op:operator pos:line="51" pos:column="31">*</op:operator><name><name pos:line="51" pos:column="32">keywordlists</name><index pos:line="51" pos:column="44">[<expr><lit:literal type="number" pos:line="51" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="52" pos:column="9">WordList</name><type:modifier pos:line="52" pos:column="17">&amp;</type:modifier></type> <name pos:line="52" pos:column="19">keywords3</name> <init pos:line="52" pos:column="29">= <expr><op:operator pos:line="52" pos:column="31">*</op:operator><name><name pos:line="52" pos:column="32">keywordlists</name><index pos:line="52" pos:column="44">[<expr><lit:literal type="number" pos:line="52" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="53" pos:column="9">const</specifier> <name pos:line="53" pos:column="15">int</name></type> <name pos:line="53" pos:column="19">useMagic</name> <init pos:line="53" pos:column="28">= <expr><call><name><name pos:line="53" pos:column="30">styler</name><op:operator pos:line="53" pos:column="36">.</op:operator><name pos:line="53" pos:column="37">GetPropertyInt</name></name><argument_list pos:line="53" pos:column="51">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="52">"lexer.caml.magic"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="53" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while pos:line="55" pos:column="9">while <condition pos:line="55" pos:column="15">(<expr><call><name><name pos:line="55" pos:column="16">sc</name><op:operator pos:line="55" pos:column="18">.</op:operator><name pos:line="55" pos:column="19">More</name></name><argument_list pos:line="55" pos:column="23">()</argument_list></call></expr>)</condition> <block pos:line="55" pos:column="27">{
		<decl_stmt><decl><type><name pos:line="56" pos:column="17">int</name></type> <name pos:line="56" pos:column="21">state2</name> <init pos:line="56" pos:column="28">= <expr><op:operator pos:line="56" pos:column="30">-</op:operator><lit:literal type="number" pos:line="56" pos:column="31">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="57" pos:column="17">int</name></type> <name pos:line="57" pos:column="21">chColor</name> <init pos:line="57" pos:column="29">= <expr><name><name pos:line="57" pos:column="31">sc</name><op:operator pos:line="57" pos:column="33">.</op:operator><name pos:line="57" pos:column="34">currentPos</name></name> <op:operator pos:line="57" pos:column="45">-</op:operator> <lit:literal type="number" pos:line="57" pos:column="47">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">bool</name></type> <name pos:line="58" pos:column="22">advance</name> <init pos:line="58" pos:column="30">= <expr><lit:literal type="boolean" pos:line="58" pos:column="32">true</lit:literal></expr></init></decl>;</decl_stmt>

		<switch pos:line="60" pos:column="17">switch <condition pos:line="60" pos:column="24">(<expr><name><name pos:line="60" pos:column="25">sc</name><op:operator pos:line="60" pos:column="27">.</op:operator><name pos:line="60" pos:column="28">state</name></name> <op:operator pos:line="60" pos:column="34">&amp;</op:operator> <lit:literal type="number" pos:line="60" pos:column="36">0x0f</lit:literal></expr>)</condition> <block pos:line="60" pos:column="42">{
		<case pos:line="61" pos:column="17">case <expr><name pos:line="61" pos:column="22">SCE_SML_DEFAULT</name></expr>:
			<expr_stmt><expr><name pos:line="62" pos:column="25">chToken</name> <op:operator pos:line="62" pos:column="33">=</op:operator> <name><name pos:line="62" pos:column="35">sc</name><op:operator pos:line="62" pos:column="37">.</op:operator><name pos:line="62" pos:column="38">currentPos</name></name></expr>;</expr_stmt>
			<if pos:line="63" pos:column="25">if <condition pos:line="63" pos:column="28">(<expr><call><name pos:line="63" pos:column="29">issmlf</name><argument_list pos:line="63" pos:column="35">(<argument><expr><name><name pos:line="63" pos:column="36">sc</name><op:operator pos:line="63" pos:column="38">.</op:operator><name pos:line="63" pos:column="39">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="63" pos:column="43">
				<expr_stmt><expr><name pos:line="64" pos:column="33">state2</name> <op:operator pos:line="64" pos:column="40">=</op:operator> <name pos:line="64" pos:column="42">SCE_SML_IDENTIFIER</name></expr>;</expr_stmt></then>
			<else pos:line="65" pos:column="25">else <if pos:line="65" pos:column="30">if <condition pos:line="65" pos:column="33">(<expr><call><name><name pos:line="65" pos:column="34">sc</name><op:operator pos:line="65" pos:column="36">.</op:operator><name pos:line="65" pos:column="37">Match</name></name><argument_list pos:line="65" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="65" pos:column="43">'`'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="65" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="65" pos:column="51">issmlf</name><argument_list pos:line="65" pos:column="57">(<argument><expr><name><name pos:line="65" pos:column="58">sc</name><op:operator pos:line="65" pos:column="60">.</op:operator><name pos:line="65" pos:column="61">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="65" pos:column="69">
				<expr_stmt><expr><name pos:line="66" pos:column="33">state2</name> <op:operator pos:line="66" pos:column="40">=</op:operator> <name pos:line="66" pos:column="42">SCE_SML_TAGNAME</name></expr>;</expr_stmt></then>
			<else pos:line="67" pos:column="25">else <if pos:line="67" pos:column="30">if <condition pos:line="67" pos:column="33">(<expr><call><name><name pos:line="67" pos:column="34">sc</name><op:operator pos:line="67" pos:column="36">.</op:operator><name pos:line="67" pos:column="37">Match</name></name><argument_list pos:line="67" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="67" pos:column="43">'#'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="67" pos:column="47">&amp;&amp;</op:operator><call><name pos:line="67" pos:column="49">isdigit</name><argument_list pos:line="67" pos:column="56">(<argument><expr><name><name pos:line="67" pos:column="57">sc</name><op:operator pos:line="67" pos:column="59">.</op:operator><name pos:line="67" pos:column="60">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="67" pos:column="68">
					<expr_stmt><expr><name pos:line="68" pos:column="41">state2</name> <op:operator pos:line="68" pos:column="48">=</op:operator> <name pos:line="68" pos:column="50">SCE_SML_LINENUM</name></expr>;</expr_stmt></then>
			<else pos:line="69" pos:column="25">else <if pos:line="69" pos:column="30">if <condition pos:line="69" pos:column="33">(<expr><call><name><name pos:line="69" pos:column="34">sc</name><op:operator pos:line="69" pos:column="36">.</op:operator><name pos:line="69" pos:column="37">Match</name></name><argument_list pos:line="69" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="69" pos:column="43">'#'</lit:literal></expr></argument>,<argument><expr><lit:literal type="char" pos:line="69" pos:column="47">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="69" pos:column="53">{
					<expr_stmt><expr><name pos:line="70" pos:column="41">state2</name> <op:operator pos:line="70" pos:column="48">=</op:operator> <name pos:line="70" pos:column="50">SCE_SML_CHAR</name></expr><op:operator pos:line="70" pos:column="62">,</op:operator><expr><name pos:line="70" pos:column="63">chLit</name> <op:operator pos:line="70" pos:column="69">=</op:operator> <lit:literal type="number" pos:line="70" pos:column="71">0</lit:literal></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="71" pos:column="41">sc</name><op:operator pos:line="71" pos:column="43">.</op:operator><name pos:line="71" pos:column="44">Forward</name></name><argument_list pos:line="71" pos:column="51">()</argument_list></call></expr>;</expr_stmt>

				}</block></then>
			<else pos:line="74" pos:column="25">else <if pos:line="74" pos:column="30">if <condition pos:line="74" pos:column="33">(<expr><call><name pos:line="74" pos:column="34">isdigit</name><argument_list pos:line="74" pos:column="41">(<argument><expr><name><name pos:line="74" pos:column="42">sc</name><op:operator pos:line="74" pos:column="44">.</op:operator><name pos:line="74" pos:column="45">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="74" pos:column="49"> <block pos:line="74" pos:column="50">{
				<expr_stmt><expr><name pos:line="75" pos:column="33">state2</name> <op:operator pos:line="75" pos:column="40">=</op:operator> <name pos:line="75" pos:column="42">SCE_SML_NUMBER</name></expr><op:operator pos:line="75" pos:column="56">,</op:operator> <expr><name pos:line="75" pos:column="58">chBase</name> <op:operator pos:line="75" pos:column="65">=</op:operator> <lit:literal type="number" pos:line="75" pos:column="67">10</lit:literal></expr>;</expr_stmt>
				<if pos:line="76" pos:column="33">if <condition pos:line="76" pos:column="36">(<expr><call><name><name pos:line="76" pos:column="37">sc</name><op:operator pos:line="76" pos:column="39">.</op:operator><name pos:line="76" pos:column="40">Match</name></name><argument_list pos:line="76" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="76" pos:column="46">'0'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="76" pos:column="51">&amp;&amp;</op:operator> <call><name pos:line="76" pos:column="54">strchr</name><argument_list pos:line="76" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="76" pos:column="61">"xX"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="67">sc</name><op:operator pos:line="76" pos:column="69">.</op:operator><name pos:line="76" pos:column="70">chNext</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="76" pos:column="78">
					<expr_stmt><expr><name pos:line="77" pos:column="41">chBase</name> <op:operator pos:line="77" pos:column="48">=</op:operator> <lit:literal type="number" pos:line="77" pos:column="50">16</lit:literal></expr><op:operator pos:line="77" pos:column="52">,</op:operator> <expr><call><name><name pos:line="77" pos:column="54">sc</name><op:operator pos:line="77" pos:column="56">.</op:operator><name pos:line="77" pos:column="57">Forward</name></name><argument_list pos:line="77" pos:column="64">()</argument_list></call></expr>;</expr_stmt></then></if>}</block></then>
			<else pos:line="78" pos:column="25">else <if pos:line="78" pos:column="30">if <condition pos:line="78" pos:column="33">(<expr><call><name><name pos:line="78" pos:column="34">sc</name><op:operator pos:line="78" pos:column="36">.</op:operator><name pos:line="78" pos:column="37">Match</name></name><argument_list pos:line="78" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="78" pos:column="43">'\"'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="78" pos:column="48">&amp;&amp;</op:operator><name><name pos:line="78" pos:column="50">sc</name><op:operator pos:line="78" pos:column="52">.</op:operator><name pos:line="78" pos:column="53">chPrev</name></name><op:operator pos:line="78" pos:column="59">!=</op:operator><lit:literal type="char" pos:line="78" pos:column="61">'#'</lit:literal></expr>)</condition><then pos:line="78" pos:column="65">
				<expr_stmt><expr><name pos:line="79" pos:column="33">state2</name> <op:operator pos:line="79" pos:column="40">=</op:operator> <name pos:line="79" pos:column="42">SCE_SML_STRING</name></expr>;</expr_stmt></then>
			<else pos:line="80" pos:column="25">else <if pos:line="80" pos:column="30">if <condition pos:line="80" pos:column="33">(<expr><call><name><name pos:line="80" pos:column="34">sc</name><op:operator pos:line="80" pos:column="36">.</op:operator><name pos:line="80" pos:column="37">Match</name></name><argument_list pos:line="80" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="80" pos:column="43">'('</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="80" pos:column="48">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then><block pos:line="80" pos:column="53">{
				<expr_stmt><expr><name pos:line="81" pos:column="33">state2</name> <op:operator pos:line="81" pos:column="40">=</op:operator> <name pos:line="81" pos:column="42">SCE_SML_COMMENT</name></expr><op:operator pos:line="81" pos:column="57">,</op:operator>
					<expr><name><name pos:line="82" pos:column="41">sc</name><op:operator pos:line="82" pos:column="43">.</op:operator><name pos:line="82" pos:column="44">ch</name></name> <op:operator pos:line="82" pos:column="47">=</op:operator> <lit:literal type="char" pos:line="82" pos:column="49">' '</lit:literal></expr><op:operator pos:line="82" pos:column="52">,</op:operator>
					<expr><call><name><name pos:line="83" pos:column="41">sc</name><op:operator pos:line="83" pos:column="43">.</op:operator><name pos:line="83" pos:column="44">Forward</name></name><argument_list pos:line="83" pos:column="51">()</argument_list></call></expr>;</expr_stmt>}</block></then>
			<else pos:line="84" pos:column="25">else <if pos:line="84" pos:column="30">if <condition pos:line="84" pos:column="33">(<expr><call><name pos:line="84" pos:column="34">strchr</name><argument_list pos:line="84" pos:column="40">(<argument><expr><lit:literal type="string" pos:line="84" pos:column="41">"!~"</lit:literal>
					<lit:literal type="string" pos:line="85" pos:column="41">"=&lt;&gt;@^+-*/"</lit:literal>
					<lit:literal type="string" pos:line="86" pos:column="41">"()[];,:.#"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="54">sc</name><op:operator pos:line="86" pos:column="56">.</op:operator><name pos:line="86" pos:column="57">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="86" pos:column="61">
				<expr_stmt><expr><name pos:line="87" pos:column="33">state2</name> <op:operator pos:line="87" pos:column="40">=</op:operator> <name pos:line="87" pos:column="42">SCE_SML_OPERATOR</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
			<break pos:line="88" pos:column="25">break;</break>

		</case><case pos:line="90" pos:column="17">case <expr><name pos:line="90" pos:column="22">SCE_SML_IDENTIFIER</name></expr>:
			<if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><op:operator pos:line="91" pos:column="29">!</op:operator><op:operator pos:line="91" pos:column="30">(</op:operator><call><name pos:line="91" pos:column="31">issml</name><argument_list pos:line="91" pos:column="36">(<argument><expr><name><name pos:line="91" pos:column="37">sc</name><op:operator pos:line="91" pos:column="39">.</op:operator><name pos:line="91" pos:column="40">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="91" pos:column="44">||</op:operator> <call><name><name pos:line="91" pos:column="47">sc</name><op:operator pos:line="91" pos:column="49">.</op:operator><name pos:line="91" pos:column="50">Match</name></name><argument_list pos:line="91" pos:column="55">(<argument><expr><lit:literal type="char" pos:line="91" pos:column="56">'\''</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="91" pos:column="61">)</op:operator></expr>)</condition><then pos:line="91" pos:column="63"> <block pos:line="91" pos:column="64">{
				<decl_stmt><decl><type><specifier pos:line="92" pos:column="33">const</specifier> <name pos:line="92" pos:column="39">int</name></type> <name pos:line="92" pos:column="43">n</name> <init pos:line="92" pos:column="45">= <expr><name><name pos:line="92" pos:column="47">sc</name><op:operator pos:line="92" pos:column="49">.</op:operator><name pos:line="92" pos:column="50">currentPos</name></name> <op:operator pos:line="92" pos:column="61">-</op:operator> <name pos:line="92" pos:column="63">chToken</name></expr></init></decl>;</decl_stmt>
				<if pos:line="93" pos:column="33">if <condition pos:line="93" pos:column="36">(<expr><name pos:line="93" pos:column="37">n</name> <op:operator pos:line="93" pos:column="39">&lt;</op:operator> <lit:literal type="number" pos:line="93" pos:column="41">24</lit:literal></expr>)</condition><then pos:line="93" pos:column="44"> <block pos:line="93" pos:column="45">{
					<decl_stmt><decl><type><name pos:line="94" pos:column="41">char</name></type> <name><name pos:line="94" pos:column="46">t</name><index pos:line="94" pos:column="47">[<expr><lit:literal type="number" pos:line="94" pos:column="48">24</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<for pos:line="95" pos:column="41">for (<init><decl><type><name pos:line="95" pos:column="46">int</name></type> <name pos:line="95" pos:column="50">i</name> <init pos:line="95" pos:column="52">= <expr><op:operator pos:line="95" pos:column="54">-</op:operator><name pos:line="95" pos:column="55">n</name></expr></init></decl>;</init> <condition><expr><name pos:line="95" pos:column="58">i</name> <op:operator pos:line="95" pos:column="60">&lt;</op:operator> <lit:literal type="number" pos:line="95" pos:column="62">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="95" pos:column="65">i</name><op:operator pos:line="95" pos:column="66">++</op:operator></expr></incr>)
						<expr_stmt><expr><name><name pos:line="96" pos:column="49">t</name><index pos:line="96" pos:column="50">[<expr><name pos:line="96" pos:column="51">n</name> <op:operator pos:line="96" pos:column="53">+</op:operator> <name pos:line="96" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="96" pos:column="58">=</op:operator> <call><name><name pos:line="96" pos:column="60">static_cast</name><argument_list pos:line="96" pos:column="71">&lt;<argument><expr><name pos:line="96" pos:column="72">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="96" pos:column="77">(<argument><expr><call><name><name pos:line="96" pos:column="78">sc</name><op:operator pos:line="96" pos:column="80">.</op:operator><name pos:line="96" pos:column="81">GetRelative</name></name><argument_list pos:line="96" pos:column="92">(<argument><expr><name pos:line="96" pos:column="93">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
					<expr_stmt><expr><name><name pos:line="97" pos:column="41">t</name><index pos:line="97" pos:column="42">[<expr><name pos:line="97" pos:column="43">n</name></expr>]</index></name> <op:operator pos:line="97" pos:column="46">=</op:operator> <lit:literal type="char" pos:line="97" pos:column="48">'\0'</lit:literal></expr>;</expr_stmt>
					<if pos:line="98" pos:column="41">if <condition pos:line="98" pos:column="44">(<expr><op:operator pos:line="98" pos:column="45">(</op:operator><name pos:line="98" pos:column="46">n</name> <op:operator pos:line="98" pos:column="48">==</op:operator> <lit:literal type="number" pos:line="98" pos:column="51">1</lit:literal> <op:operator pos:line="98" pos:column="53">&amp;&amp;</op:operator> <name><name pos:line="98" pos:column="56">sc</name><op:operator pos:line="98" pos:column="58">.</op:operator><name pos:line="98" pos:column="59">chPrev</name></name> <op:operator pos:line="98" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="98" pos:column="69">'_'</lit:literal><op:operator pos:line="98" pos:column="72">)</op:operator> <op:operator pos:line="98" pos:column="74">||</op:operator> <call><name><name pos:line="98" pos:column="77">keywords</name><op:operator pos:line="98" pos:column="85">.</op:operator><name pos:line="98" pos:column="86">InList</name></name><argument_list pos:line="98" pos:column="92">(<argument><expr><name pos:line="98" pos:column="93">t</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="98" pos:column="96">
						<expr_stmt><expr><call><name><name pos:line="99" pos:column="49">sc</name><op:operator pos:line="99" pos:column="51">.</op:operator><name pos:line="99" pos:column="52">ChangeState</name></name><argument_list pos:line="99" pos:column="63">(<argument><expr><name pos:line="99" pos:column="64">SCE_SML_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="100" pos:column="41">else <if pos:line="100" pos:column="46">if <condition pos:line="100" pos:column="49">(<expr><call><name><name pos:line="100" pos:column="50">keywords2</name><op:operator pos:line="100" pos:column="59">.</op:operator><name pos:line="100" pos:column="60">InList</name></name><argument_list pos:line="100" pos:column="66">(<argument><expr><name pos:line="100" pos:column="67">t</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="100" pos:column="70">
						<expr_stmt><expr><call><name><name pos:line="101" pos:column="49">sc</name><op:operator pos:line="101" pos:column="51">.</op:operator><name pos:line="101" pos:column="52">ChangeState</name></name><argument_list pos:line="101" pos:column="63">(<argument><expr><name pos:line="101" pos:column="64">SCE_SML_KEYWORD2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
					<else pos:line="102" pos:column="41">else <if pos:line="102" pos:column="46">if <condition pos:line="102" pos:column="49">(<expr><call><name><name pos:line="102" pos:column="50">keywords3</name><op:operator pos:line="102" pos:column="59">.</op:operator><name pos:line="102" pos:column="60">InList</name></name><argument_list pos:line="102" pos:column="66">(<argument><expr><name pos:line="102" pos:column="67">t</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="102" pos:column="70">
						<expr_stmt><expr><call><name><name pos:line="103" pos:column="49">sc</name><op:operator pos:line="103" pos:column="51">.</op:operator><name pos:line="103" pos:column="52">ChangeState</name></name><argument_list pos:line="103" pos:column="63">(<argument><expr><name pos:line="103" pos:column="64">SCE_SML_KEYWORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if>
				}</block></then></if>
				<expr_stmt><expr><name pos:line="105" pos:column="33">state2</name> <op:operator pos:line="105" pos:column="40">=</op:operator> <name pos:line="105" pos:column="42">SCE_SML_DEFAULT</name></expr><op:operator pos:line="105" pos:column="57">,</op:operator> <expr><name pos:line="105" pos:column="59">advance</name> <op:operator pos:line="105" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="105" pos:column="69">false</lit:literal></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="107" pos:column="25">break;</break>

		</case><case pos:line="109" pos:column="17">case <expr><name pos:line="109" pos:column="22">SCE_SML_TAGNAME</name></expr>:
			<if pos:line="110" pos:column="25">if <condition pos:line="110" pos:column="28">(<expr><op:operator pos:line="110" pos:column="29">!</op:operator><op:operator pos:line="110" pos:column="30">(</op:operator><call><name pos:line="110" pos:column="31">issml</name><argument_list pos:line="110" pos:column="36">(<argument><expr><name><name pos:line="110" pos:column="37">sc</name><op:operator pos:line="110" pos:column="39">.</op:operator><name pos:line="110" pos:column="40">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="110" pos:column="44">||</op:operator> <call><name><name pos:line="110" pos:column="47">sc</name><op:operator pos:line="110" pos:column="49">.</op:operator><name pos:line="110" pos:column="50">Match</name></name><argument_list pos:line="110" pos:column="55">(<argument><expr><lit:literal type="char" pos:line="110" pos:column="56">'\''</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="110" pos:column="61">)</op:operator></expr>)</condition><then pos:line="110" pos:column="63">
				<expr_stmt><expr><name pos:line="111" pos:column="33">state2</name> <op:operator pos:line="111" pos:column="40">=</op:operator> <name pos:line="111" pos:column="42">SCE_SML_DEFAULT</name></expr><op:operator pos:line="111" pos:column="57">,</op:operator> <expr><name pos:line="111" pos:column="59">advance</name> <op:operator pos:line="111" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="111" pos:column="69">false</lit:literal></expr>;</expr_stmt></then></if>
			<break pos:line="112" pos:column="25">break;</break>

		</case><case pos:line="114" pos:column="17">case <expr><name pos:line="114" pos:column="22">SCE_SML_LINENUM</name></expr>:
			<if pos:line="115" pos:column="25">if <condition pos:line="115" pos:column="28">(<expr><op:operator pos:line="115" pos:column="29">!</op:operator><call><name pos:line="115" pos:column="30">isdigit</name><argument_list pos:line="115" pos:column="37">(<argument><expr><name><name pos:line="115" pos:column="38">sc</name><op:operator pos:line="115" pos:column="40">.</op:operator><name pos:line="115" pos:column="41">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="115" pos:column="45">
				<expr_stmt><expr><name pos:line="116" pos:column="33">state2</name> <op:operator pos:line="116" pos:column="40">=</op:operator> <name pos:line="116" pos:column="42">SCE_SML_DEFAULT</name></expr><op:operator pos:line="116" pos:column="57">,</op:operator> <expr><name pos:line="116" pos:column="59">advance</name> <op:operator pos:line="116" pos:column="67">=</op:operator> <lit:literal type="boolean" pos:line="116" pos:column="69">false</lit:literal></expr>;</expr_stmt></then></if>
			<break pos:line="117" pos:column="25">break;</break>

		</case><case pos:line="119" pos:column="17">case <expr><name pos:line="119" pos:column="22">SCE_SML_OPERATOR</name></expr>: <block pos:line="119" pos:column="40">{
			<decl_stmt><decl><type><specifier pos:line="120" pos:column="25">const</specifier> <name pos:line="120" pos:column="31">char</name><type:modifier pos:line="120" pos:column="35">*</type:modifier></type> <name pos:line="120" pos:column="37">o</name> <init pos:line="120" pos:column="39">= <expr><lit:literal type="number" pos:line="120" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="121" pos:column="25">if <condition pos:line="121" pos:column="28">(<expr><call><name pos:line="121" pos:column="29">issml</name><argument_list pos:line="121" pos:column="34">(<argument><expr><name><name pos:line="121" pos:column="35">sc</name><op:operator pos:line="121" pos:column="37">.</op:operator><name pos:line="121" pos:column="38">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="121" pos:column="42">||</op:operator> <call><name pos:line="121" pos:column="45">isspace</name><argument_list pos:line="121" pos:column="52">(<argument><expr><name><name pos:line="121" pos:column="53">sc</name><op:operator pos:line="121" pos:column="55">.</op:operator><name pos:line="121" pos:column="56">ch</name></name></expr></argument>)</argument_list></call>
				<op:operator pos:line="122" pos:column="33">||</op:operator> <op:operator pos:line="122" pos:column="36">(</op:operator><name pos:line="122" pos:column="37">o</name> <op:operator pos:line="122" pos:column="39">=</op:operator> <call><name pos:line="122" pos:column="41">strchr</name><argument_list pos:line="122" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="122" pos:column="48">")]};,\'\"`#"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="63">sc</name><op:operator pos:line="122" pos:column="65">.</op:operator><name pos:line="122" pos:column="66">ch</name></name></expr></argument>)</argument_list></call><op:operator pos:line="122" pos:column="69">,</op:operator><name pos:line="122" pos:column="70">o</name><op:operator pos:line="122" pos:column="71">)</op:operator>
				<op:operator pos:line="123" pos:column="33">||</op:operator> <op:operator pos:line="123" pos:column="36">!</op:operator><call><name pos:line="123" pos:column="37">strchr</name><argument_list pos:line="123" pos:column="43">(<argument><expr><lit:literal type="string" pos:line="123" pos:column="44">"!$%&amp;*+-./:&lt;=&gt;?@^|~"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="66">sc</name><op:operator pos:line="123" pos:column="68">.</op:operator><name pos:line="123" pos:column="69">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="123" pos:column="73"> <block pos:line="123" pos:column="74">{
				<if pos:line="124" pos:column="33">if <condition pos:line="124" pos:column="36">(<expr><name pos:line="124" pos:column="37">o</name> <op:operator pos:line="124" pos:column="39">&amp;&amp;</op:operator> <call><name pos:line="124" pos:column="42">strchr</name><argument_list pos:line="124" pos:column="48">(<argument><expr><lit:literal type="string" pos:line="124" pos:column="49">")]};,"</lit:literal></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="58">sc</name><op:operator pos:line="124" pos:column="60">.</op:operator><name pos:line="124" pos:column="61">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="124" pos:column="65"> <block pos:line="124" pos:column="66">{
					<if pos:line="125" pos:column="41">if <condition pos:line="125" pos:column="44">(<expr><op:operator pos:line="125" pos:column="45">(</op:operator><call><name><name pos:line="125" pos:column="46">sc</name><op:operator pos:line="125" pos:column="48">.</op:operator><name pos:line="125" pos:column="49">Match</name></name><argument_list pos:line="125" pos:column="54">(<argument><expr><lit:literal type="char" pos:line="125" pos:column="55">')'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="125" pos:column="60">&amp;&amp;</op:operator> <name><name pos:line="125" pos:column="63">sc</name><op:operator pos:line="125" pos:column="65">.</op:operator><name pos:line="125" pos:column="66">chPrev</name></name> <op:operator pos:line="125" pos:column="73">==</op:operator> <lit:literal type="char" pos:line="125" pos:column="76">'('</lit:literal><op:operator pos:line="125" pos:column="79">)</op:operator>
						<op:operator pos:line="126" pos:column="49">||</op:operator> <op:operator pos:line="126" pos:column="52">(</op:operator><call><name><name pos:line="126" pos:column="53">sc</name><op:operator pos:line="126" pos:column="55">.</op:operator><name pos:line="126" pos:column="56">Match</name></name><argument_list pos:line="126" pos:column="61">(<argument><expr><lit:literal type="char" pos:line="126" pos:column="62">']'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="67">&amp;&amp;</op:operator> <name><name pos:line="126" pos:column="70">sc</name><op:operator pos:line="126" pos:column="72">.</op:operator><name pos:line="126" pos:column="73">chPrev</name></name> <op:operator pos:line="126" pos:column="80">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="83">'['</lit:literal><op:operator pos:line="126" pos:column="86">)</op:operator></expr>)</condition><then pos:line="126" pos:column="88">
						<expr_stmt><expr><call><name><name pos:line="127" pos:column="49">sc</name><op:operator pos:line="127" pos:column="51">.</op:operator><name pos:line="127" pos:column="52">ChangeState</name></name><argument_list pos:line="127" pos:column="63">(<argument><expr><name pos:line="127" pos:column="64">SCE_SML_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
					<expr_stmt><expr><name pos:line="128" pos:column="41">chColor</name><op:operator pos:line="128" pos:column="48">++</op:operator></expr>;</expr_stmt>
				}</block></then> <else pos:line="129" pos:column="35">else
					<expr_stmt><expr><name pos:line="130" pos:column="41">advance</name> <op:operator pos:line="130" pos:column="49">=</op:operator> <lit:literal type="boolean" pos:line="130" pos:column="51">false</lit:literal></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><name pos:line="131" pos:column="33">state2</name> <op:operator pos:line="131" pos:column="40">=</op:operator> <name pos:line="131" pos:column="42">SCE_SML_DEFAULT</name></expr>;</expr_stmt>
			}</block></then></if>
			<break pos:line="133" pos:column="25">break;</break>
		}</block>

		</case><case pos:line="136" pos:column="17">case <expr><name pos:line="136" pos:column="22">SCE_SML_NUMBER</name></expr>:
			<if pos:line="137" pos:column="25">if <condition pos:line="137" pos:column="28">(<expr><call><name pos:line="137" pos:column="29">issmld</name><argument_list pos:line="137" pos:column="35">(<argument><expr><name><name pos:line="137" pos:column="36">sc</name><op:operator pos:line="137" pos:column="38">.</op:operator><name pos:line="137" pos:column="39">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="137" pos:column="43">||</op:operator> <call><name pos:line="137" pos:column="46">IsADigit</name><argument_list pos:line="137" pos:column="54">(<argument><expr><name><name pos:line="137" pos:column="55">sc</name><op:operator pos:line="137" pos:column="57">.</op:operator><name pos:line="137" pos:column="58">ch</name></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="62">chBase</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="137" pos:column="70">
				<break pos:line="138" pos:column="33">break;</break></then></if>
			<if pos:line="139" pos:column="25">if <condition pos:line="139" pos:column="28">(<expr><op:operator pos:line="139" pos:column="29">(</op:operator><call><name><name pos:line="139" pos:column="30">sc</name><op:operator pos:line="139" pos:column="32">.</op:operator><name pos:line="139" pos:column="33">Match</name></name><argument_list pos:line="139" pos:column="38">(<argument><expr><lit:literal type="char" pos:line="139" pos:column="39">'l'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="139" pos:column="44">||</op:operator> <call><name><name pos:line="139" pos:column="47">sc</name><op:operator pos:line="139" pos:column="49">.</op:operator><name pos:line="139" pos:column="50">Match</name></name><argument_list pos:line="139" pos:column="55">(<argument><expr><lit:literal type="char" pos:line="139" pos:column="56">'L'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="139" pos:column="61">||</op:operator> <call><name><name pos:line="139" pos:column="64">sc</name><op:operator pos:line="139" pos:column="66">.</op:operator><name pos:line="139" pos:column="67">Match</name></name><argument_list pos:line="139" pos:column="72">(<argument><expr><lit:literal type="char" pos:line="139" pos:column="73">'n'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="139" pos:column="77">)</op:operator>
				<op:operator pos:line="140" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="140" pos:column="36">(</op:operator><call><name pos:line="140" pos:column="37">issmld</name><argument_list pos:line="140" pos:column="43">(<argument><expr><name><name pos:line="140" pos:column="44">sc</name><op:operator pos:line="140" pos:column="46">.</op:operator><name pos:line="140" pos:column="47">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="140" pos:column="55">||</op:operator> <call><name pos:line="140" pos:column="58">IsADigit</name><argument_list pos:line="140" pos:column="66">(<argument><expr><name><name pos:line="140" pos:column="67">sc</name><op:operator pos:line="140" pos:column="69">.</op:operator><name pos:line="140" pos:column="70">chPrev</name></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="78">chBase</name></expr></argument>)</argument_list></call><op:operator pos:line="140" pos:column="85">)</op:operator></expr>)</condition><then pos:line="140" pos:column="87">
				<break pos:line="141" pos:column="33">break;</break></then></if>
			<if pos:line="142" pos:column="25">if <condition pos:line="142" pos:column="28">(<expr><name pos:line="142" pos:column="29">chBase</name> <op:operator pos:line="142" pos:column="36">==</op:operator> <lit:literal type="number" pos:line="142" pos:column="39">10</lit:literal></expr>)</condition><then pos:line="142" pos:column="42"> <block pos:line="142" pos:column="43">{
				<if pos:line="143" pos:column="33">if <condition pos:line="143" pos:column="36">(<expr><call><name><name pos:line="143" pos:column="37">sc</name><op:operator pos:line="143" pos:column="39">.</op:operator><name pos:line="143" pos:column="40">Match</name></name><argument_list pos:line="143" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="143" pos:column="46">'.'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="143" pos:column="51">&amp;&amp;</op:operator> <call><name pos:line="143" pos:column="54">issmld</name><argument_list pos:line="143" pos:column="60">(<argument><expr><name><name pos:line="143" pos:column="61">sc</name><op:operator pos:line="143" pos:column="63">.</op:operator><name pos:line="143" pos:column="64">chPrev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="143" pos:column="72">
					<break pos:line="144" pos:column="41">break;</break></then></if>
				<if pos:line="145" pos:column="33">if <condition pos:line="145" pos:column="36">(<expr><op:operator pos:line="145" pos:column="37">(</op:operator><call><name><name pos:line="145" pos:column="38">sc</name><op:operator pos:line="145" pos:column="40">.</op:operator><name pos:line="145" pos:column="41">Match</name></name><argument_list pos:line="145" pos:column="46">(<argument><expr><lit:literal type="char" pos:line="145" pos:column="47">'e'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="145" pos:column="52">||</op:operator> <call><name><name pos:line="145" pos:column="55">sc</name><op:operator pos:line="145" pos:column="57">.</op:operator><name pos:line="145" pos:column="58">Match</name></name><argument_list pos:line="145" pos:column="63">(<argument><expr><lit:literal type="char" pos:line="145" pos:column="64">'E'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="145" pos:column="68">)</op:operator>
					<op:operator pos:line="146" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="146" pos:column="44">(</op:operator><call><name pos:line="146" pos:column="45">issmld</name><argument_list pos:line="146" pos:column="51">(<argument><expr><name><name pos:line="146" pos:column="52">sc</name><op:operator pos:line="146" pos:column="54">.</op:operator><name pos:line="146" pos:column="55">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="146" pos:column="63">||</op:operator> <name><name pos:line="146" pos:column="66">sc</name><op:operator pos:line="146" pos:column="68">.</op:operator><name pos:line="146" pos:column="69">chPrev</name></name> <op:operator pos:line="146" pos:column="76">==</op:operator> <lit:literal type="char" pos:line="146" pos:column="79">'.'</lit:literal><op:operator pos:line="146" pos:column="82">)</op:operator></expr>)</condition><then pos:line="146" pos:column="84">
					<break pos:line="147" pos:column="41">break;</break></then></if>
				<if pos:line="148" pos:column="33">if <condition pos:line="148" pos:column="36">(<expr><op:operator pos:line="148" pos:column="37">(</op:operator><call><name><name pos:line="148" pos:column="38">sc</name><op:operator pos:line="148" pos:column="40">.</op:operator><name pos:line="148" pos:column="41">Match</name></name><argument_list pos:line="148" pos:column="46">(<argument><expr><lit:literal type="char" pos:line="148" pos:column="47">'+'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="148" pos:column="52">||</op:operator> <call><name><name pos:line="148" pos:column="55">sc</name><op:operator pos:line="148" pos:column="57">.</op:operator><name pos:line="148" pos:column="58">Match</name></name><argument_list pos:line="148" pos:column="63">(<argument><expr><lit:literal type="char" pos:line="148" pos:column="64">'-'</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="148" pos:column="68">)</op:operator>
					<op:operator pos:line="149" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="149" pos:column="44">(</op:operator><name><name pos:line="149" pos:column="45">sc</name><op:operator pos:line="149" pos:column="47">.</op:operator><name pos:line="149" pos:column="48">chPrev</name></name> <op:operator pos:line="149" pos:column="55">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="58">'e'</lit:literal> <op:operator pos:line="149" pos:column="62">||</op:operator> <name><name pos:line="149" pos:column="65">sc</name><op:operator pos:line="149" pos:column="67">.</op:operator><name pos:line="149" pos:column="68">chPrev</name></name> <op:operator pos:line="149" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="149" pos:column="78">'E'</lit:literal><op:operator pos:line="149" pos:column="81">)</op:operator></expr>)</condition><then pos:line="149" pos:column="83">
					<break pos:line="150" pos:column="41">break;</break></then></if>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="152" pos:column="25">state2</name> <op:operator pos:line="152" pos:column="32">=</op:operator> <name pos:line="152" pos:column="34">SCE_SML_DEFAULT</name></expr><op:operator pos:line="152" pos:column="49">,</op:operator> <expr><name pos:line="152" pos:column="51">advance</name> <op:operator pos:line="152" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="152" pos:column="61">false</lit:literal></expr>;</expr_stmt>
			<break pos:line="153" pos:column="25">break;</break>

		</case><case pos:line="155" pos:column="17">case <expr><name pos:line="155" pos:column="22">SCE_SML_CHAR</name></expr>:
			<if pos:line="156" pos:column="25">if <condition pos:line="156" pos:column="28">(<expr><call><name><name pos:line="156" pos:column="29">sc</name><op:operator pos:line="156" pos:column="31">.</op:operator><name pos:line="156" pos:column="32">Match</name></name><argument_list pos:line="156" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="156" pos:column="38">'\\'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="44"> <block pos:line="156" pos:column="45">{
				<expr_stmt><expr><name pos:line="157" pos:column="33">chLit</name> <op:operator pos:line="157" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="157" pos:column="41">1</lit:literal></expr>;</expr_stmt>
				<if pos:line="158" pos:column="33">if <condition pos:line="158" pos:column="36">(<expr><name><name pos:line="158" pos:column="37">sc</name><op:operator pos:line="158" pos:column="39">.</op:operator><name pos:line="158" pos:column="40">chPrev</name></name> <op:operator pos:line="158" pos:column="47">==</op:operator> <lit:literal type="char" pos:line="158" pos:column="50">'\\'</lit:literal></expr>)</condition><then pos:line="158" pos:column="55">
					<expr_stmt><expr><name><name pos:line="159" pos:column="41">sc</name><op:operator pos:line="159" pos:column="43">.</op:operator><name pos:line="159" pos:column="44">ch</name></name> <op:operator pos:line="159" pos:column="47">=</op:operator> <lit:literal type="char" pos:line="159" pos:column="49">' '</lit:literal></expr>;</expr_stmt></then></if>
			}</block></then> <else pos:line="160" pos:column="27">else <if pos:line="160" pos:column="32">if <condition pos:line="160" pos:column="35">(<expr><op:operator pos:line="160" pos:column="36">(</op:operator><call><name><name pos:line="160" pos:column="37">sc</name><op:operator pos:line="160" pos:column="39">.</op:operator><name pos:line="160" pos:column="40">Match</name></name><argument_list pos:line="160" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="160" pos:column="46">'\"'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="160" pos:column="52">&amp;&amp;</op:operator> <name><name pos:line="160" pos:column="55">sc</name><op:operator pos:line="160" pos:column="57">.</op:operator><name pos:line="160" pos:column="58">chPrev</name></name> <op:operator pos:line="160" pos:column="65">!=</op:operator> <lit:literal type="char" pos:line="160" pos:column="68">'\\'</lit:literal><op:operator pos:line="160" pos:column="72">)</op:operator> <op:operator pos:line="160" pos:column="74">||</op:operator> <name><name pos:line="160" pos:column="77">sc</name><op:operator pos:line="160" pos:column="79">.</op:operator><name pos:line="160" pos:column="80">atLineEnd</name></name></expr>)</condition><then pos:line="160" pos:column="90"> <block pos:line="160" pos:column="91">{
				<expr_stmt><expr><name pos:line="161" pos:column="33">state2</name> <op:operator pos:line="161" pos:column="40">=</op:operator> <name pos:line="161" pos:column="42">SCE_SML_DEFAULT</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="162" pos:column="33">chLit</name> <op:operator pos:line="162" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="162" pos:column="41">1</lit:literal></expr>;</expr_stmt>
				<if pos:line="163" pos:column="33">if <condition pos:line="163" pos:column="36">(<expr><call><name><name pos:line="163" pos:column="37">sc</name><op:operator pos:line="163" pos:column="39">.</op:operator><name pos:line="163" pos:column="40">Match</name></name><argument_list pos:line="163" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="163" pos:column="46">'\"'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="163" pos:column="52">
					<expr_stmt><expr><name pos:line="164" pos:column="41">chColor</name><op:operator pos:line="164" pos:column="48">++</op:operator></expr>;</expr_stmt></then>
				<else pos:line="165" pos:column="33">else
					<expr_stmt><expr><call><name><name pos:line="166" pos:column="41">sc</name><op:operator pos:line="166" pos:column="43">.</op:operator><name pos:line="166" pos:column="44">ChangeState</name></name><argument_list pos:line="166" pos:column="55">(<argument><expr><name pos:line="166" pos:column="56">SCE_SML_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			}</block></then> <else pos:line="167" pos:column="27">else <if pos:line="167" pos:column="32">if <condition pos:line="167" pos:column="35">(<expr><name><name pos:line="167" pos:column="36">chLit</name> <argument_list pos:line="167" pos:column="42">&lt; <argument><expr><lit:literal type="number" pos:line="167" pos:column="44">1</lit:literal> <op:operator pos:line="167" pos:column="46">&amp;&amp;</op:operator> <name><name pos:line="167" pos:column="49">sc</name><op:operator pos:line="167" pos:column="51">.</op:operator><name pos:line="167" pos:column="52">currentPos</name></name> <op:operator pos:line="167" pos:column="63">-</op:operator> <name pos:line="167" pos:column="65">chToken</name></expr></argument> &gt;</argument_list></name><op:operator pos:line="167" pos:column="74">=</op:operator> <lit:literal type="number" pos:line="167" pos:column="76">3</lit:literal></expr>)</condition><then pos:line="167" pos:column="78">
				<expr_stmt><expr><call><name><name pos:line="168" pos:column="33">sc</name><op:operator pos:line="168" pos:column="35">.</op:operator><name pos:line="168" pos:column="36">ChangeState</name></name><argument_list pos:line="168" pos:column="47">(<argument><expr><name pos:line="168" pos:column="48">SCE_SML_IDENTIFIER</name></expr></argument>)</argument_list></call></expr><op:operator pos:line="168" pos:column="67">,</op:operator> <expr><name pos:line="168" pos:column="69">advance</name> <op:operator pos:line="168" pos:column="77">=</op:operator> <lit:literal type="boolean" pos:line="168" pos:column="79">false</lit:literal></expr>;</expr_stmt></then></if></else></if></else></if>
			<break pos:line="169" pos:column="25">break;</break>

		</case><case pos:line="171" pos:column="17">case <expr><name pos:line="171" pos:column="22">SCE_SML_STRING</name></expr>:
			<if pos:line="172" pos:column="25">if <condition pos:line="172" pos:column="28">(<expr><call><name><name pos:line="172" pos:column="29">sc</name><op:operator pos:line="172" pos:column="31">.</op:operator><name pos:line="172" pos:column="32">Match</name></name><argument_list pos:line="172" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="172" pos:column="38">'\\'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="172" pos:column="44">&amp;&amp;</op:operator> <name><name pos:line="172" pos:column="47">sc</name><op:operator pos:line="172" pos:column="49">.</op:operator><name pos:line="172" pos:column="50">chPrev</name></name> <op:operator pos:line="172" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="172" pos:column="60">'\\'</lit:literal></expr>)</condition><then pos:line="172" pos:column="65">
				<expr_stmt><expr><name><name pos:line="173" pos:column="33">sc</name><op:operator pos:line="173" pos:column="35">.</op:operator><name pos:line="173" pos:column="36">ch</name></name> <op:operator pos:line="173" pos:column="39">=</op:operator> <lit:literal type="char" pos:line="173" pos:column="41">' '</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="174" pos:column="25">else <if pos:line="174" pos:column="30">if <condition pos:line="174" pos:column="33">(<expr><call><name><name pos:line="174" pos:column="34">sc</name><op:operator pos:line="174" pos:column="36">.</op:operator><name pos:line="174" pos:column="37">Match</name></name><argument_list pos:line="174" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="174" pos:column="43">'\"'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="174" pos:column="49">&amp;&amp;</op:operator> <name><name pos:line="174" pos:column="52">sc</name><op:operator pos:line="174" pos:column="54">.</op:operator><name pos:line="174" pos:column="55">chPrev</name></name> <op:operator pos:line="174" pos:column="62">!=</op:operator> <lit:literal type="char" pos:line="174" pos:column="65">'\\'</lit:literal></expr>)</condition><then pos:line="174" pos:column="70">
				<expr_stmt><expr><name pos:line="175" pos:column="33">state2</name> <op:operator pos:line="175" pos:column="40">=</op:operator> <name pos:line="175" pos:column="42">SCE_SML_DEFAULT</name></expr><op:operator pos:line="175" pos:column="57">,</op:operator> <expr><name pos:line="175" pos:column="59">chColor</name><op:operator pos:line="175" pos:column="66">++</op:operator></expr>;</expr_stmt></then></if></else></if>
			<break pos:line="176" pos:column="25">break;</break>

		</case><case pos:line="178" pos:column="17">case <expr><name pos:line="178" pos:column="22">SCE_SML_COMMENT</name></expr>:
		</case><case pos:line="179" pos:column="17">case <expr><name pos:line="179" pos:column="22">SCE_SML_COMMENT1</name></expr>:
		</case><case pos:line="180" pos:column="17">case <expr><name pos:line="180" pos:column="22">SCE_SML_COMMENT2</name></expr>:
		</case><case pos:line="181" pos:column="17">case <expr><name pos:line="181" pos:column="22">SCE_SML_COMMENT3</name></expr>:
			<if pos:line="182" pos:column="25">if <condition pos:line="182" pos:column="28">(<expr><call><name><name pos:line="182" pos:column="29">sc</name><op:operator pos:line="182" pos:column="31">.</op:operator><name pos:line="182" pos:column="32">Match</name></name><argument_list pos:line="182" pos:column="37">(<argument><expr><lit:literal type="char" pos:line="182" pos:column="38">'('</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="182" pos:column="43">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="182" pos:column="48">
				<expr_stmt><expr><name pos:line="183" pos:column="33">state2</name> <op:operator pos:line="183" pos:column="40">=</op:operator> <name><name pos:line="183" pos:column="42">sc</name><op:operator pos:line="183" pos:column="44">.</op:operator><name pos:line="183" pos:column="45">state</name></name> <op:operator pos:line="183" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="183" pos:column="53">1</lit:literal></expr><op:operator pos:line="183" pos:column="54">,</op:operator> <expr><name pos:line="183" pos:column="56">chToken</name> <op:operator pos:line="183" pos:column="64">=</op:operator> <name><name pos:line="183" pos:column="66">sc</name><op:operator pos:line="183" pos:column="68">.</op:operator><name pos:line="183" pos:column="69">currentPos</name></name></expr><op:operator pos:line="183" pos:column="79">,</op:operator>
					<expr><name><name pos:line="184" pos:column="41">sc</name><op:operator pos:line="184" pos:column="43">.</op:operator><name pos:line="184" pos:column="44">ch</name></name> <op:operator pos:line="184" pos:column="47">=</op:operator> <lit:literal type="char" pos:line="184" pos:column="49">' '</lit:literal></expr><op:operator pos:line="184" pos:column="52">,</op:operator>
					<expr><call><name><name pos:line="185" pos:column="41">sc</name><op:operator pos:line="185" pos:column="43">.</op:operator><name pos:line="185" pos:column="44">Forward</name></name><argument_list pos:line="185" pos:column="51">()</argument_list></call></expr><op:operator pos:line="185" pos:column="53">,</op:operator> <expr><name pos:line="185" pos:column="55">nesting</name><op:operator pos:line="185" pos:column="62">++</op:operator></expr>;</expr_stmt></then>
			<else pos:line="186" pos:column="25">else <if pos:line="186" pos:column="30">if <condition pos:line="186" pos:column="33">(<expr><call><name><name pos:line="186" pos:column="34">sc</name><op:operator pos:line="186" pos:column="36">.</op:operator><name pos:line="186" pos:column="37">Match</name></name><argument_list pos:line="186" pos:column="42">(<argument><expr><lit:literal type="char" pos:line="186" pos:column="43">')'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="186" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="186" pos:column="51">sc</name><op:operator pos:line="186" pos:column="53">.</op:operator><name pos:line="186" pos:column="54">chPrev</name></name> <op:operator pos:line="186" pos:column="61">==</op:operator> <lit:literal type="char" pos:line="186" pos:column="64">'*'</lit:literal></expr>)</condition><then pos:line="186" pos:column="68"> <block pos:line="186" pos:column="69">{
				<if pos:line="187" pos:column="33">if <condition pos:line="187" pos:column="36">(<expr><name pos:line="187" pos:column="37">nesting</name></expr>)</condition><then pos:line="187" pos:column="45">
					<expr_stmt><expr><name pos:line="188" pos:column="41">state2</name> <op:operator pos:line="188" pos:column="48">=</op:operator> <op:operator pos:line="188" pos:column="50">(</op:operator><name><name pos:line="188" pos:column="51">sc</name><op:operator pos:line="188" pos:column="53">.</op:operator><name pos:line="188" pos:column="54">state</name></name> <op:operator pos:line="188" pos:column="60">&amp;</op:operator> <lit:literal type="number" pos:line="188" pos:column="62">0x0f</lit:literal><op:operator pos:line="188" pos:column="66">)</op:operator> <op:operator pos:line="188" pos:column="68">-</op:operator> <lit:literal type="number" pos:line="188" pos:column="70">1</lit:literal></expr><op:operator pos:line="188" pos:column="71">,</op:operator> <expr><name pos:line="188" pos:column="73">chToken</name> <op:operator pos:line="188" pos:column="81">=</op:operator> <lit:literal type="number" pos:line="188" pos:column="83">0</lit:literal></expr><op:operator pos:line="188" pos:column="84">,</op:operator> <expr><name pos:line="188" pos:column="86">nesting</name><op:operator pos:line="188" pos:column="93">--</op:operator></expr>;</expr_stmt></then>
				<else pos:line="189" pos:column="33">else
					<expr_stmt><expr><name pos:line="190" pos:column="41">state2</name> <op:operator pos:line="190" pos:column="48">=</op:operator> <name pos:line="190" pos:column="50">SCE_SML_DEFAULT</name></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><name pos:line="191" pos:column="33">chColor</name><op:operator pos:line="191" pos:column="40">++</op:operator></expr>;</expr_stmt>
			}</block></then> <else pos:line="192" pos:column="27">else <if pos:line="192" pos:column="32">if <condition pos:line="192" pos:column="35">(<expr><name pos:line="192" pos:column="36">useMagic</name> <op:operator pos:line="192" pos:column="45">&amp;&amp;</op:operator> <name><name pos:line="192" pos:column="48">sc</name><op:operator pos:line="192" pos:column="50">.</op:operator><name pos:line="192" pos:column="51">currentPos</name></name> <op:operator pos:line="192" pos:column="62">-</op:operator> <name pos:line="192" pos:column="64">chToken</name> <op:operator pos:line="192" pos:column="72">==</op:operator> <lit:literal type="number" pos:line="192" pos:column="75">4</lit:literal>
				<op:operator pos:line="193" pos:column="33">&amp;&amp;</op:operator> <call><name><name pos:line="193" pos:column="36">sc</name><op:operator pos:line="193" pos:column="38">.</op:operator><name pos:line="193" pos:column="39">Match</name></name><argument_list pos:line="193" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="193" pos:column="45">'c'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="193" pos:column="50">&amp;&amp;</op:operator> <name><name pos:line="193" pos:column="53">sc</name><op:operator pos:line="193" pos:column="55">.</op:operator><name pos:line="193" pos:column="56">chPrev</name></name> <op:operator pos:line="193" pos:column="63">==</op:operator> <lit:literal type="char" pos:line="193" pos:column="66">'r'</lit:literal> <op:operator pos:line="193" pos:column="70">&amp;&amp;</op:operator> <call><name><name pos:line="193" pos:column="73">sc</name><op:operator pos:line="193" pos:column="75">.</op:operator><name pos:line="193" pos:column="76">GetRelative</name></name><argument_list pos:line="193" pos:column="87">(<argument><expr><op:operator pos:line="193" pos:column="88">-</op:operator><lit:literal type="number" pos:line="193" pos:column="89">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="193" pos:column="92">==</op:operator> <lit:literal type="char" pos:line="193" pos:column="95">'@'</lit:literal></expr>)</condition><then pos:line="193" pos:column="99">
				<expr_stmt><expr><name><name pos:line="194" pos:column="33">sc</name><op:operator pos:line="194" pos:column="35">.</op:operator><name pos:line="194" pos:column="36">state</name></name> <op:operator pos:line="194" pos:column="42">|=</op:operator> <lit:literal type="number" pos:line="194" pos:column="45">0x10</lit:literal></expr>;</expr_stmt></then></if></else></if></else></if>
			<break pos:line="195" pos:column="25">break;</break>
		</case>}</block></switch>

		<if pos:line="198" pos:column="17">if <condition pos:line="198" pos:column="20">(<expr><name pos:line="198" pos:column="21">state2</name> <op:operator pos:line="198" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="198" pos:column="31">0</lit:literal></expr>)</condition><then pos:line="198" pos:column="33">
			<expr_stmt><expr><call><name><name pos:line="199" pos:column="25">styler</name><op:operator pos:line="199" pos:column="31">.</op:operator><name pos:line="199" pos:column="32">ColourTo</name></name><argument_list pos:line="199" pos:column="40">(<argument><expr><name pos:line="199" pos:column="41">chColor</name></expr></argument>, <argument><expr><name><name pos:line="199" pos:column="50">sc</name><op:operator pos:line="199" pos:column="52">.</op:operator><name pos:line="199" pos:column="53">state</name></name></expr></argument>)</argument_list></call></expr><op:operator pos:line="199" pos:column="59">,</op:operator> <expr><call><name><name pos:line="199" pos:column="61">sc</name><op:operator pos:line="199" pos:column="63">.</op:operator><name pos:line="199" pos:column="64">ChangeState</name></name><argument_list pos:line="199" pos:column="75">(<argument><expr><name pos:line="199" pos:column="76">state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="200" pos:column="17">if <condition pos:line="200" pos:column="20">(<expr><name pos:line="200" pos:column="21">advance</name></expr>)</condition><then pos:line="200" pos:column="29">
			<expr_stmt><expr><call><name><name pos:line="201" pos:column="25">sc</name><op:operator pos:line="201" pos:column="27">.</op:operator><name pos:line="201" pos:column="28">Forward</name></name><argument_list pos:line="201" pos:column="35">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></while>

	<expr_stmt><expr><call><name><name pos:line="204" pos:column="9">sc</name><op:operator pos:line="204" pos:column="11">.</op:operator><name pos:line="204" pos:column="12">Complete</name></name><argument_list pos:line="204" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="207" pos:column="1">void</name></type> <name pos:line="207" pos:column="6">FoldSMLDoc</name><parameter_list pos:line="207" pos:column="16">(
	<param><decl><type><name pos:line="208" pos:column="9">unsigned</name></type> <name pos:line="208" pos:column="18">int</name></decl></param>, <param><decl><type><name pos:line="208" pos:column="23">int</name></type></decl></param>,
	<param><decl><type><name pos:line="209" pos:column="9">int</name></type></decl></param>,
	<param><decl><type><name><name pos:line="210" pos:column="9">WordList</name> <type:modifier pos:line="210" pos:column="18">*</type:modifier><index pos:line="210" pos:column="19">[]</index></name></type></decl></param>,
	<param><decl><type><name pos:line="211" pos:column="9">Accessor</name> <type:modifier pos:line="211" pos:column="18">&amp;</type:modifier></type></decl></param>)</parameter_list>
<block pos:line="212" pos:column="1">{
}</block></function>

<decl_stmt><decl><type><specifier pos:line="215" pos:column="1">static</specifier> <specifier pos:line="215" pos:column="8">const</specifier> <name pos:line="215" pos:column="14">char</name> <type:modifier pos:line="215" pos:column="19">*</type:modifier> <specifier pos:line="215" pos:column="21">const</specifier></type> <name><name pos:line="215" pos:column="27">SMLWordListDesc</name><index pos:line="215" pos:column="42">[]</index></name> <init pos:line="215" pos:column="45">= <expr><block pos:line="215" pos:column="47">{
	<expr><lit:literal type="string" pos:line="216" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="217" pos:column="9">"Keywords2"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="218" pos:column="9">"Keywords3"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="219" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="222" pos:column="1">LexerModule</name></type> <name pos:line="222" pos:column="13">lmSML</name><argument_list pos:line="222" pos:column="18">(<argument><expr><name pos:line="222" pos:column="19">SCLEX_SML</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="30">ColouriseSMLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="222" pos:column="47">"SML"</lit:literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="54">FoldSMLDoc</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="66">SMLWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>

</unit>
