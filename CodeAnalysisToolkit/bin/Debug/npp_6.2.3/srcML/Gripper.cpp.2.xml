<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\dockingwnd\Gripper.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// this file is part of docking functionality for Notepad++</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2006 Jens Lorenz &lt;jens.plugin.npp@gmx.de&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">// </comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">// </comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">// </comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>
<comment type="line" pos:line="27" pos:column="1">//</comment>
<comment type="line" pos:line="28" pos:column="1">// Changed something around drawRectangle() (for details see there) to enhance </comment>
<comment type="line" pos:line="29" pos:column="1">// speed and consistency of the drag-rectangle - August 2010, Joern Gruel (jg)</comment>


<cpp:include pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="32" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="33" pos:column="10">"Gripper.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"DockingManager.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="35" pos:column="10">"Parameters.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifndef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifndef</cpp:directive> <name pos:line="37" pos:column="9">WH_KEYBOARD_LL</name></cpp:ifndef>
<cpp:define pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="38" pos:column="9">WH_KEYBOARD_LL</name></cpp:macro> <cpp:value pos:line="38" pos:column="24">13</cpp:value></cpp:define>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">ifndef</cpp:directive> <name pos:line="41" pos:column="9">WH_MOUSE_LL</name></cpp:ifndef>
<cpp:define pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="42" pos:column="9">WH_MOUSE_LL</name></cpp:macro> <cpp:value pos:line="42" pos:column="21">14</cpp:value></cpp:define>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif</cpp:directive></cpp:endif>


<decl_stmt><decl><type><name pos:line="46" pos:column="1">BOOL</name></type> <name><name pos:line="46" pos:column="6">Gripper</name><op:operator pos:line="46" pos:column="13">::</op:operator><name pos:line="46" pos:column="15">_isRegistered</name></name>	<init pos:line="46" pos:column="33">= <expr><name pos:line="46" pos:column="35">FALSE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier pos:line="48" pos:column="1">static</specifier> <name pos:line="48" pos:column="8">HWND</name></type>		<name pos:line="48" pos:column="25">hWndServer</name>		<init pos:line="48" pos:column="49">= <expr><name pos:line="48" pos:column="51">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="49" pos:column="1">static</specifier> <name pos:line="49" pos:column="8">HHOOK</name></type>	<name pos:line="49" pos:column="17">hookMouse</name>		<init pos:line="49" pos:column="41">= <expr><name pos:line="49" pos:column="43">NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier pos:line="50" pos:column="1">static</specifier> <name pos:line="50" pos:column="8">HHOOK</name></type>	<name pos:line="50" pos:column="17">hookKeyboard</name>	<init pos:line="50" pos:column="33">= <expr><name pos:line="50" pos:column="35">NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="52" pos:column="1">static</specifier> <name pos:line="52" pos:column="8">LRESULT</name> <name pos:line="52" pos:column="16">CALLBACK</name></type> <name pos:line="52" pos:column="25">hookProcMouse</name><parameter_list pos:line="52" pos:column="38">(<param><decl><type><name pos:line="52" pos:column="39">INT</name></type> <name pos:line="52" pos:column="43">nCode</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="50">WPARAM</name></type> <name pos:line="52" pos:column="57">wParam</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="65">LPARAM</name></type> <name pos:line="52" pos:column="72">lParam</name></decl></param>)</parameter_list>
<block pos:line="53" pos:column="1">{
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><name pos:line="54" pos:column="9">nCode</name> <op:operator pos:line="54" pos:column="15">&gt;=</op:operator> <lit:literal type="number" pos:line="54" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="54" pos:column="20">
    <block pos:line="55" pos:column="5">{
		<switch pos:line="56" pos:column="17">switch <condition pos:line="56" pos:column="24">(<expr><name pos:line="56" pos:column="25">wParam</name></expr>)</condition>
		<block pos:line="57" pos:column="17">{
			<case pos:line="58" pos:column="25">case <expr><name pos:line="58" pos:column="30">WM_MOUSEMOVE</name></expr>:
			</case><case pos:line="59" pos:column="25">case <expr><name pos:line="59" pos:column="30">WM_NCMOUSEMOVE</name></expr>:
				<comment type="line" pos:line="60" pos:column="33">//::PostMessage(hWndServer, wParam, 0, 0);</comment>
				<expr_stmt><expr><call><name><op:operator pos:line="61" pos:column="33">::</op:operator><name pos:line="61" pos:column="35">SendMessage</name></name><argument_list pos:line="61" pos:column="46">(<argument><expr><name pos:line="61" pos:column="47">hWndServer</name></expr></argument>, <argument><expr><name pos:line="61" pos:column="59">wParam</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="61" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="61" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="62" pos:column="33">break;</break>
			</case><case pos:line="63" pos:column="25">case <expr><name pos:line="63" pos:column="30">WM_LBUTTONUP</name></expr>:
			</case><case pos:line="64" pos:column="25">case <expr><name pos:line="64" pos:column="30">WM_NCLBUTTONUP</name></expr>:
				<comment type="line" pos:line="65" pos:column="33">//::PostMessage(hWndServer, wParam, 0, 0);</comment>
				<expr_stmt><expr><call><name><op:operator pos:line="66" pos:column="33">::</op:operator><name pos:line="66" pos:column="35">SendMessage</name></name><argument_list pos:line="66" pos:column="46">(<argument><expr><name pos:line="66" pos:column="47">hWndServer</name></expr></argument>, <argument><expr><name pos:line="66" pos:column="59">wParam</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="66" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="66" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="67" pos:column="33">return <expr><name pos:line="67" pos:column="40">TRUE</name></expr>;</return>
			</case><default pos:line="68" pos:column="25">default: 
				<break pos:line="69" pos:column="33">break;</break>
		</default>}</block></switch>
	}</block></then></if>
	<return pos:line="72" pos:column="9">return <expr><call><name><op:operator pos:line="72" pos:column="16">::</op:operator><name pos:line="72" pos:column="18">CallNextHookEx</name></name><argument_list pos:line="72" pos:column="32">(<argument><expr><name pos:line="72" pos:column="33">hookMouse</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="44">nCode</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="51">wParam</name></expr></argument>, <argument><expr><name pos:line="72" pos:column="59">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier pos:line="75" pos:column="1">static</specifier> <name pos:line="75" pos:column="8">LRESULT</name> <name pos:line="75" pos:column="16">CALLBACK</name></type> <name pos:line="75" pos:column="25">hookProcKeyboard</name><parameter_list pos:line="75" pos:column="41">(<param><decl><type><name pos:line="75" pos:column="42">INT</name></type> <name pos:line="75" pos:column="46">nCode</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="53">WPARAM</name></type> <name pos:line="75" pos:column="60">wParam</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="68">LPARAM</name></type> <name pos:line="75" pos:column="75">lParam</name></decl></param>)</parameter_list>
<block pos:line="76" pos:column="1">{
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name pos:line="77" pos:column="9">nCode</name> <op:operator pos:line="77" pos:column="15">&gt;=</op:operator> <lit:literal type="number" pos:line="77" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="77" pos:column="20">
    <block pos:line="78" pos:column="5">{
		<if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">wParam</name> <op:operator pos:line="79" pos:column="28">==</op:operator> <name pos:line="79" pos:column="31">VK_ESCAPE</name></expr>)</condition><then pos:line="79" pos:column="41">
		<block pos:line="80" pos:column="17">{
			<expr_stmt><expr><call><name><op:operator pos:line="81" pos:column="25">::</op:operator><name pos:line="81" pos:column="27">PostMessage</name></name><argument_list pos:line="81" pos:column="38">(<argument><expr><name pos:line="81" pos:column="39">hWndServer</name></expr></argument>, <argument><expr><name pos:line="81" pos:column="51">DMM_CANCEL_MOVE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="81" pos:column="68">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="81" pos:column="71">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="82" pos:column="25">return <expr><name pos:line="82" pos:column="32">FALSE</name></expr>;</return>
		}</block></then></if>
	}</block></then></if>

	<return pos:line="86" pos:column="9">return <expr><call><name><op:operator pos:line="86" pos:column="16">::</op:operator><name pos:line="86" pos:column="18">CallNextHookEx</name></name><argument_list pos:line="86" pos:column="32">(<argument><expr><name pos:line="86" pos:column="33">hookKeyboard</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="47">nCode</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="54">wParam</name></expr></argument>, <argument><expr><name pos:line="86" pos:column="62">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<constructor><name><name pos:line="89" pos:column="1">Gripper</name><op:operator pos:line="89" pos:column="8">::</op:operator><name pos:line="89" pos:column="10">Gripper</name></name><parameter_list pos:line="89" pos:column="17">()</parameter_list>
<block pos:line="90" pos:column="1">{
	<expr_stmt><expr><name pos:line="91" pos:column="9">_hInst</name>			<op:operator pos:line="91" pos:column="33">=</op:operator> <name pos:line="91" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="92" pos:column="9">_hParent</name>		<op:operator pos:line="92" pos:column="33">=</op:operator> <name pos:line="92" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="93" pos:column="9">_hSelf</name>			<op:operator pos:line="93" pos:column="33">=</op:operator> <name pos:line="93" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="94" pos:column="9">_pDockMgr</name>		<op:operator pos:line="94" pos:column="33">=</op:operator> <name pos:line="94" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="95" pos:column="9">_pCont</name>			<op:operator pos:line="95" pos:column="33">=</op:operator> <name pos:line="95" pos:column="35">NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="97" pos:column="9">_ptOffset</name><op:operator pos:line="97" pos:column="18">.</op:operator><name pos:line="97" pos:column="19">x</name></name>		<op:operator pos:line="97" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="97" pos:column="35">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="98" pos:column="9">_ptOffset</name><op:operator pos:line="98" pos:column="18">.</op:operator><name pos:line="98" pos:column="19">y</name></name>		<op:operator pos:line="98" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="98" pos:column="35">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="100" pos:column="9">_ptOld</name><op:operator pos:line="100" pos:column="15">.</op:operator><name pos:line="100" pos:column="16">x</name></name>		<op:operator pos:line="100" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="100" pos:column="35">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="101" pos:column="9">_ptOld</name><op:operator pos:line="101" pos:column="15">.</op:operator><name pos:line="101" pos:column="16">y</name></name>		<op:operator pos:line="101" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="101" pos:column="35">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="102" pos:column="9">_bPtOldValid</name>		<op:operator pos:line="102" pos:column="33">=</op:operator> <name pos:line="102" pos:column="35">FALSE</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name pos:line="104" pos:column="9">_hTab</name>			<op:operator pos:line="104" pos:column="33">=</op:operator> <name pos:line="104" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="105" pos:column="9">_hTabSource</name>		<op:operator pos:line="105" pos:column="33">=</op:operator> <name pos:line="105" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="106" pos:column="9">_startMovingFromTab</name>	<op:operator pos:line="106" pos:column="33">=</op:operator> <name pos:line="106" pos:column="35">FALSE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="107" pos:column="9">_iItem</name>			<op:operator pos:line="107" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="107" pos:column="35">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="109" pos:column="9">_hdc</name>			<op:operator pos:line="109" pos:column="33">=</op:operator> <name pos:line="109" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="110" pos:column="9">_hbm</name>			<op:operator pos:line="110" pos:column="33">=</op:operator> <name pos:line="110" pos:column="35">NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="111" pos:column="9">_hbrush</name>			<op:operator pos:line="111" pos:column="33">=</op:operator> <name pos:line="111" pos:column="35">NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="113" pos:column="9">memset</name><argument_list pos:line="113" pos:column="15">(<argument><expr><op:operator pos:line="113" pos:column="16">&amp;</op:operator><name pos:line="113" pos:column="17">_rcPrev</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="113" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="113" pos:column="29">sizeof<argument_list pos:line="113" pos:column="35">(<argument><expr><name pos:line="113" pos:column="36">RECT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="114" pos:column="9">memset</name><argument_list pos:line="114" pos:column="15">(<argument><expr><op:operator pos:line="114" pos:column="16">&amp;</op:operator><name pos:line="114" pos:column="17">_rcItem</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="114" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="114" pos:column="29">sizeof<argument_list pos:line="114" pos:column="35">(<argument><expr><name pos:line="114" pos:column="36">RECT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="115" pos:column="9">memset</name><argument_list pos:line="115" pos:column="15">(<argument><expr><op:operator pos:line="115" pos:column="16">&amp;</op:operator><name pos:line="115" pos:column="17">_tcItem</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="115" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="115" pos:column="29">sizeof<argument_list pos:line="115" pos:column="35">(<argument><expr><name pos:line="115" pos:column="36">TCITEM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="116" pos:column="9">memset</name><argument_list pos:line="116" pos:column="15">(<argument><expr><op:operator pos:line="116" pos:column="16">&amp;</op:operator><name pos:line="116" pos:column="17">_dockData</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="116" pos:column="28">0</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="116" pos:column="31">sizeof<argument_list pos:line="116" pos:column="37">(<argument><expr><name pos:line="116" pos:column="38">tDockMgr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>


<function><type><name pos:line="120" pos:column="1">void</name></type> <name><name pos:line="120" pos:column="6">Gripper</name><op:operator pos:line="120" pos:column="13">::</op:operator><name pos:line="120" pos:column="15">startGrip</name></name><parameter_list pos:line="120" pos:column="24">(<param><decl><type><name pos:line="120" pos:column="25">DockingCont</name><type:modifier pos:line="120" pos:column="36">*</type:modifier></type> <name pos:line="120" pos:column="38">pCont</name></decl></param>, <param><decl><type><name pos:line="120" pos:column="45">DockingManager</name><type:modifier pos:line="120" pos:column="59">*</type:modifier></type> <name pos:line="120" pos:column="61">pDockMgr</name></decl></param>)</parameter_list>
<block pos:line="121" pos:column="1">{
	<expr_stmt><expr><name pos:line="122" pos:column="9">_pDockMgr</name>   <op:operator pos:line="122" pos:column="21">=</op:operator> <name pos:line="122" pos:column="23">pDockMgr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="123" pos:column="9">_pCont</name>		<op:operator pos:line="123" pos:column="25">=</op:operator> <name pos:line="123" pos:column="27">pCont</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name pos:line="125" pos:column="9">_pDockMgr</name><op:operator pos:line="125" pos:column="18">-&gt;</op:operator><name pos:line="125" pos:column="20">getDockInfo</name></name><argument_list pos:line="125" pos:column="31">(<argument><expr><op:operator pos:line="125" pos:column="32">&amp;</op:operator><name pos:line="125" pos:column="33">_dockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="127" pos:column="9">if <condition pos:line="127" pos:column="12">(<expr><op:operator pos:line="127" pos:column="13">!</op:operator><name pos:line="127" pos:column="14">_isRegistered</name></expr>)</condition><then pos:line="127" pos:column="28">
	<block pos:line="128" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="129" pos:column="17">WNDCLASS</name></type> <name pos:line="129" pos:column="26">clz</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name pos:line="131" pos:column="17">clz</name><op:operator pos:line="131" pos:column="20">.</op:operator><name pos:line="131" pos:column="21">style</name></name> <op:operator pos:line="131" pos:column="27">=</op:operator> <lit:literal type="number" pos:line="131" pos:column="29">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="132" pos:column="17">clz</name><op:operator pos:line="132" pos:column="20">.</op:operator><name pos:line="132" pos:column="21">lpfnWndProc</name></name> <op:operator pos:line="132" pos:column="33">=</op:operator> <name pos:line="132" pos:column="35">staticWinProc</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="133" pos:column="17">clz</name><op:operator pos:line="133" pos:column="20">.</op:operator><name pos:line="133" pos:column="21">cbClsExtra</name></name> <op:operator pos:line="133" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="133" pos:column="34">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="134" pos:column="17">clz</name><op:operator pos:line="134" pos:column="20">.</op:operator><name pos:line="134" pos:column="21">cbWndExtra</name></name> <op:operator pos:line="134" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="134" pos:column="34">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="135" pos:column="17">clz</name><op:operator pos:line="135" pos:column="20">.</op:operator><name pos:line="135" pos:column="21">hInstance</name></name> <op:operator pos:line="135" pos:column="31">=</op:operator> <name pos:line="135" pos:column="33">_hInst</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="136" pos:column="17">clz</name><op:operator pos:line="136" pos:column="20">.</op:operator><name pos:line="136" pos:column="21">hIcon</name></name> <op:operator pos:line="136" pos:column="27">=</op:operator> <name pos:line="136" pos:column="29">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="137" pos:column="17">clz</name><op:operator pos:line="137" pos:column="20">.</op:operator><name pos:line="137" pos:column="21">hCursor</name></name> <op:operator pos:line="137" pos:column="29">=</op:operator> <call><name><op:operator pos:line="137" pos:column="31">::</op:operator><name pos:line="137" pos:column="33">LoadCursor</name></name><argument_list pos:line="137" pos:column="43">(<argument><expr><name pos:line="137" pos:column="44">NULL</name></expr></argument>, <argument><expr><name pos:line="137" pos:column="50">IDC_ARROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name pos:line="139" pos:column="17">clz</name><op:operator pos:line="139" pos:column="20">.</op:operator><name pos:line="139" pos:column="21">hbrBackground</name></name> <op:operator pos:line="139" pos:column="35">=</op:operator> <name pos:line="139" pos:column="37">NULL</name></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name pos:line="140" pos:column="17">clz</name><op:operator pos:line="140" pos:column="20">.</op:operator><name pos:line="140" pos:column="21">lpszMenuName</name></name> <op:operator pos:line="140" pos:column="34">=</op:operator> <name pos:line="140" pos:column="36">NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="141" pos:column="17">clz</name><op:operator pos:line="141" pos:column="20">.</op:operator><name pos:line="141" pos:column="21">lpszClassName</name></name> <op:operator pos:line="141" pos:column="35">=</op:operator> <name pos:line="141" pos:column="37">MDLG_CLASS_NAME</name></expr>;</expr_stmt>

		<if pos:line="143" pos:column="17">if <condition pos:line="143" pos:column="20">(<expr><op:operator pos:line="143" pos:column="21">!</op:operator><call><name><op:operator pos:line="143" pos:column="22">::</op:operator><name pos:line="143" pos:column="24">RegisterClass</name></name><argument_list pos:line="143" pos:column="37">(<argument><expr><op:operator pos:line="143" pos:column="38">&amp;</op:operator><name pos:line="143" pos:column="39">clz</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="143" pos:column="44">
		<block pos:line="144" pos:column="17">{
			<throw pos:line="145" pos:column="25">throw <expr><call><name><name pos:line="145" pos:column="31">std</name><op:operator pos:line="145" pos:column="34">::</op:operator><name pos:line="145" pos:column="36">runtime_error</name></name><argument_list pos:line="145" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="50">"Gripper::startGrip : RegisterClass() function failed"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="147" pos:column="17">_isRegistered</name> <op:operator pos:line="147" pos:column="31">=</op:operator> <name pos:line="147" pos:column="33">TRUE</name></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><name pos:line="150" pos:column="9">_hSelf</name> <op:operator pos:line="150" pos:column="16">=</op:operator> <call><name><op:operator pos:line="150" pos:column="18">::</op:operator><name pos:line="150" pos:column="20">CreateWindowEx</name></name><argument_list pos:line="150" pos:column="34">(
					<argument><expr><lit:literal type="number" pos:line="151" pos:column="41">0</lit:literal></expr></argument>,
					<argument><expr><name pos:line="152" pos:column="41">MDLG_CLASS_NAME</name></expr></argument>,
					<argument><expr><call><name pos:line="153" pos:column="41">TEXT</name><argument_list pos:line="153" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="46">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="153" pos:column="51">0</lit:literal></expr></argument>,
					<argument><expr><name pos:line="154" pos:column="41">CW_USEDEFAULT</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="56">CW_USEDEFAULT</name></expr></argument>,
					<argument><expr><name pos:line="155" pos:column="41">CW_USEDEFAULT</name></expr></argument>, <argument><expr><name pos:line="155" pos:column="56">CW_USEDEFAULT</name></expr></argument>,
					<argument><expr><name pos:line="156" pos:column="41">NULL</name></expr></argument>,
					<argument><expr><name pos:line="157" pos:column="41">NULL</name></expr></argument>,
					<argument><expr><name pos:line="158" pos:column="41">_hInst</name></expr></argument>,
					<argument><expr><op:operator pos:line="159" pos:column="41">(</op:operator><name pos:line="159" pos:column="42">LPVOID</name><op:operator pos:line="159" pos:column="48">)</op:operator><name pos:line="159" pos:column="49">this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="160" pos:column="9">hWndServer</name> <op:operator pos:line="160" pos:column="20">=</op:operator> <name pos:line="160" pos:column="22">_hSelf</name></expr>;</expr_stmt>

	<if pos:line="162" pos:column="9">if <condition pos:line="162" pos:column="12">(<expr><op:operator pos:line="162" pos:column="13">!</op:operator><name pos:line="162" pos:column="14">_hSelf</name></expr>)</condition><then pos:line="162" pos:column="21">
	<block pos:line="163" pos:column="9">{
		<throw pos:line="164" pos:column="17">throw <expr><call><name><name pos:line="164" pos:column="23">std</name><op:operator pos:line="164" pos:column="26">::</op:operator><name pos:line="164" pos:column="28">runtime_error</name></name><argument_list pos:line="164" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="42">"Gripper::startGrip : CreateWindowEx() function return null"</lit:literal></expr></argument>)</argument_list></call></expr>;</throw>
	}</block></then></if>
}</block></function>


<function><type><name pos:line="169" pos:column="1">LRESULT</name> <name pos:line="169" pos:column="9">CALLBACK</name></type> <name><name pos:line="169" pos:column="18">Gripper</name><op:operator pos:line="169" pos:column="25">::</op:operator><name pos:line="169" pos:column="27">staticWinProc</name></name><parameter_list pos:line="169" pos:column="40">(<param><decl><type><name pos:line="169" pos:column="41">HWND</name></type> <name pos:line="169" pos:column="46">hwnd</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="52">UINT</name></type> <name pos:line="169" pos:column="57">message</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="66">WPARAM</name></type> <name pos:line="169" pos:column="73">wParam</name></decl></param>, <param><decl><type><name pos:line="169" pos:column="81">LPARAM</name></type> <name pos:line="169" pos:column="88">lParam</name></decl></param>)</parameter_list>
<block pos:line="170" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="171" pos:column="9">Gripper</name> <type:modifier pos:line="171" pos:column="17">*</type:modifier></type><name pos:line="171" pos:column="18">pDlgMoving</name> <init pos:line="171" pos:column="29">= <expr><name pos:line="171" pos:column="31">NULL</name></expr></init></decl>;</decl_stmt>
	<switch pos:line="172" pos:column="9">switch <condition pos:line="172" pos:column="16">(<expr><name pos:line="172" pos:column="17">message</name></expr>)</condition>
	<block pos:line="173" pos:column="9">{	
		<case pos:line="174" pos:column="17">case <expr><name pos:line="174" pos:column="22">WM_NCCREATE</name></expr> :
			<expr_stmt><expr><name pos:line="175" pos:column="25">pDlgMoving</name> <op:operator pos:line="175" pos:column="36">=</op:operator> <op:operator pos:line="175" pos:column="38">(</op:operator><name pos:line="175" pos:column="39">Gripper</name> <op:operator pos:line="175" pos:column="47">*</op:operator><op:operator pos:line="175" pos:column="48">)</op:operator><op:operator pos:line="175" pos:column="49">(</op:operator><op:operator pos:line="175" pos:column="50">(</op:operator><op:operator pos:line="175" pos:column="51">(</op:operator><name pos:line="175" pos:column="52">LPCREATESTRUCT</name><op:operator pos:line="175" pos:column="66">)</op:operator><name pos:line="175" pos:column="67">lParam</name><op:operator pos:line="175" pos:column="73">)</op:operator><op:operator pos:line="175" pos:column="74">-&gt;</op:operator><name pos:line="175" pos:column="76">lpCreateParams</name><op:operator pos:line="175" pos:column="90">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="176" pos:column="25">pDlgMoving</name><op:operator pos:line="176" pos:column="35">-&gt;</op:operator><name pos:line="176" pos:column="37">_hSelf</name></name> <op:operator pos:line="176" pos:column="44">=</op:operator> <name pos:line="176" pos:column="46">hwnd</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="177" pos:column="25">::</op:operator><name pos:line="177" pos:column="27">SetWindowLongPtr</name></name><argument_list pos:line="177" pos:column="43">(<argument><expr><name pos:line="177" pos:column="44">hwnd</name></expr></argument>, <argument><expr><name pos:line="177" pos:column="50">GWLP_USERDATA</name></expr></argument>, <argument><expr><op:operator pos:line="177" pos:column="65">(</op:operator><name pos:line="177" pos:column="66">LONG_PTR</name><op:operator pos:line="177" pos:column="74">)</op:operator><name pos:line="177" pos:column="75">pDlgMoving</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="178" pos:column="25">return <expr><name pos:line="178" pos:column="32">TRUE</name></expr>;</return>

		</case><default pos:line="180" pos:column="17">default :
			<expr_stmt><expr><name pos:line="181" pos:column="25">pDlgMoving</name> <op:operator pos:line="181" pos:column="36">=</op:operator> <op:operator pos:line="181" pos:column="38">(</op:operator><name pos:line="181" pos:column="39">Gripper</name> <op:operator pos:line="181" pos:column="47">*</op:operator><op:operator pos:line="181" pos:column="48">)</op:operator><call><name><op:operator pos:line="181" pos:column="49">::</op:operator><name pos:line="181" pos:column="51">GetWindowLongPtr</name></name><argument_list pos:line="181" pos:column="67">(<argument><expr><name pos:line="181" pos:column="68">hwnd</name></expr></argument>, <argument><expr><name pos:line="181" pos:column="74">GWL_USERDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="182" pos:column="25">if <condition pos:line="182" pos:column="28">(<expr><op:operator pos:line="182" pos:column="29">!</op:operator><name pos:line="182" pos:column="30">pDlgMoving</name></expr>)</condition><then pos:line="182" pos:column="41">
				<return pos:line="183" pos:column="33">return <expr><call><name><op:operator pos:line="183" pos:column="40">::</op:operator><name pos:line="183" pos:column="42">DefWindowProc</name></name><argument_list pos:line="183" pos:column="55">(<argument><expr><name pos:line="183" pos:column="56">hwnd</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="62">message</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="71">wParam</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="79">lParam</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
			<return pos:line="184" pos:column="25">return <expr><call><name><name pos:line="184" pos:column="32">pDlgMoving</name><op:operator pos:line="184" pos:column="42">-&gt;</op:operator><name pos:line="184" pos:column="44">runProc</name></name><argument_list pos:line="184" pos:column="51">(<argument><expr><name pos:line="184" pos:column="52">message</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="61">wParam</name></expr></argument>, <argument><expr><name pos:line="184" pos:column="69">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
	</default>}</block></switch>
}</block></function>

<function><type><name pos:line="188" pos:column="1">LRESULT</name></type> <name><name pos:line="188" pos:column="9">Gripper</name><op:operator pos:line="188" pos:column="16">::</op:operator><name pos:line="188" pos:column="18">runProc</name></name><parameter_list pos:line="188" pos:column="25">(<param><decl><type><name pos:line="188" pos:column="26">UINT</name></type> <name pos:line="188" pos:column="31">message</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="40">WPARAM</name></type> <name pos:line="188" pos:column="47">wParam</name></decl></param>, <param><decl><type><name pos:line="188" pos:column="55">LPARAM</name></type> <name pos:line="188" pos:column="62">lParam</name></decl></param>)</parameter_list>
<block pos:line="189" pos:column="1">{
	<switch pos:line="190" pos:column="9">switch <condition pos:line="190" pos:column="16">(<expr><name pos:line="190" pos:column="17">message</name></expr>)</condition>
	<block pos:line="191" pos:column="9">{
		<case pos:line="192" pos:column="17">case <expr><name pos:line="192" pos:column="22">WM_CREATE</name></expr>:
		<block pos:line="193" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="194" pos:column="25">create</name><argument_list pos:line="194" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
			<break pos:line="195" pos:column="25">break;</break>
		}</block>
		</case><case pos:line="197" pos:column="17">case <expr><name pos:line="197" pos:column="22">WM_MOUSEMOVE</name></expr>:
		</case><case pos:line="198" pos:column="17">case <expr><name pos:line="198" pos:column="22">WM_NCMOUSEMOVE</name></expr>:
		<block pos:line="199" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="200" pos:column="25">onMove</name><argument_list pos:line="200" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
			<return pos:line="201" pos:column="25">return <expr><name pos:line="201" pos:column="32">TRUE</name></expr>;</return>
		}</block>
		</case><case pos:line="203" pos:column="17">case <expr><name pos:line="203" pos:column="22">WM_LBUTTONUP</name></expr>:
		</case><case pos:line="204" pos:column="17">case <expr><name pos:line="204" pos:column="22">WM_NCLBUTTONUP</name></expr>:
		<block pos:line="205" pos:column="17">{
			<comment type="block" pos:line="206" pos:column="25">/* end hooking */</comment>
			<if pos:line="207" pos:column="25">if <condition pos:line="207" pos:column="28">(<expr><name pos:line="207" pos:column="29">hookMouse</name></expr>)</condition><then pos:line="207" pos:column="39">
			<block pos:line="208" pos:column="25">{
				<expr_stmt><expr><call><name><op:operator pos:line="209" pos:column="33">::</op:operator><name pos:line="209" pos:column="35">UnhookWindowsHookEx</name></name><argument_list pos:line="209" pos:column="54">(<argument><expr><name pos:line="209" pos:column="55">hookMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="210" pos:column="33">::</op:operator><name pos:line="210" pos:column="35">UnhookWindowsHookEx</name></name><argument_list pos:line="210" pos:column="54">(<argument><expr><name pos:line="210" pos:column="55">hookKeyboard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="211" pos:column="33">hookMouse</name> <op:operator pos:line="211" pos:column="43">=</op:operator> <name pos:line="211" pos:column="45">NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="212" pos:column="33">hookKeyboard</name> <op:operator pos:line="212" pos:column="46">=</op:operator> <name pos:line="212" pos:column="48">NULL</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name pos:line="214" pos:column="25">onButtonUp</name><argument_list pos:line="214" pos:column="35">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="215" pos:column="25">::</op:operator><name pos:line="215" pos:column="27">DestroyWindow</name></name><argument_list pos:line="215" pos:column="40">(<argument><expr><name pos:line="215" pos:column="41">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="216" pos:column="25">return <expr><name pos:line="216" pos:column="32">TRUE</name></expr>;</return>
		}</block>
		</case><case pos:line="218" pos:column="17">case <expr><name pos:line="218" pos:column="22">DMM_CANCEL_MOVE</name></expr>:
		<block pos:line="219" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="220" pos:column="25">POINT</name></type>			<name pos:line="220" pos:column="49">pt</name>			<init pos:line="220" pos:column="73">= <expr><block pos:line="220" pos:column="75">{<expr><lit:literal type="number" pos:line="220" pos:column="76">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="220" pos:column="78">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="221" pos:column="25">POINT</name></type>			<name pos:line="221" pos:column="49">ptBuf</name>		<init pos:line="221" pos:column="65">= <expr><block pos:line="221" pos:column="67">{<expr><lit:literal type="number" pos:line="221" pos:column="68">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="221" pos:column="70">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><op:operator pos:line="223" pos:column="25">::</op:operator><name pos:line="223" pos:column="27">GetCursorPos</name></name><argument_list pos:line="223" pos:column="39">(<argument><expr><op:operator pos:line="223" pos:column="40">&amp;</op:operator><name pos:line="223" pos:column="41">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="224" pos:column="25">getMousePoints</name><argument_list pos:line="224" pos:column="39">(<argument><expr><op:operator pos:line="224" pos:column="40">&amp;</op:operator><name pos:line="224" pos:column="41">pt</name></expr></argument>, <argument><expr><op:operator pos:line="224" pos:column="45">&amp;</op:operator><name pos:line="224" pos:column="46">ptBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block" pos:line="226" pos:column="25">/* erase last drawn rectangle */</comment>
			<expr_stmt><expr><call><name pos:line="227" pos:column="25">drawRectangle</name><argument_list pos:line="227" pos:column="38">(<argument><expr><name pos:line="227" pos:column="39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block" pos:line="229" pos:column="25">/* end hooking */</comment>
			<expr_stmt><expr><call><name><op:operator pos:line="230" pos:column="25">::</op:operator><name pos:line="230" pos:column="27">UnhookWindowsHookEx</name></name><argument_list pos:line="230" pos:column="46">(<argument><expr><name pos:line="230" pos:column="47">hookMouse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="231" pos:column="25">::</op:operator><name pos:line="231" pos:column="27">UnhookWindowsHookEx</name></name><argument_list pos:line="231" pos:column="46">(<argument><expr><name pos:line="231" pos:column="47">hookKeyboard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><op:operator pos:line="233" pos:column="25">::</op:operator><name pos:line="233" pos:column="27">DestroyWindow</name></name><argument_list pos:line="233" pos:column="40">(<argument><expr><name pos:line="233" pos:column="41">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="234" pos:column="25">return <expr><name pos:line="234" pos:column="32">FALSE</name></expr>;</return>
		}</block>
		</case><case pos:line="236" pos:column="17">case <expr><name pos:line="236" pos:column="22">WM_DESTROY</name></expr>:
		<block pos:line="237" pos:column="17">{
			<expr_stmt><expr><call><name pos:line="238" pos:column="25">mouse_event</name><argument_list pos:line="238" pos:column="36">(<argument><expr><name pos:line="238" pos:column="37">MOUSEEVENTF_LEFTUP</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="238" pos:column="57">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="238" pos:column="60">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="238" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="238" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="239" pos:column="25">::</op:operator><name pos:line="239" pos:column="27">SetWindowPos</name></name><argument_list pos:line="239" pos:column="39">(<argument><expr><name pos:line="239" pos:column="40">_hParent</name></expr></argument>, <argument><expr><name pos:line="239" pos:column="50">HWND_NOTOPMOST</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="239" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="239" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="239" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="239" pos:column="75">0</lit:literal></expr></argument>, <argument><expr><name pos:line="239" pos:column="78">SWP_NOSIZE</name> <op:operator pos:line="239" pos:column="89">|</op:operator> <name pos:line="239" pos:column="91">SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="240" pos:column="25">_pCont</name><op:operator pos:line="240" pos:column="31">-&gt;</op:operator><name pos:line="240" pos:column="33">focusClient</name></name><argument_list pos:line="240" pos:column="44">()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="241" pos:column="25">delete</op:operator> <name pos:line="241" pos:column="32">this</name></expr>;</expr_stmt>
			<break pos:line="242" pos:column="25">break;</break>
		}</block>
		</case><default pos:line="244" pos:column="17">default:
			<break pos:line="245" pos:column="25">break;</break>
	</default>}</block></switch>

	<return pos:line="248" pos:column="9">return <expr><call><name><op:operator pos:line="248" pos:column="16">::</op:operator><name pos:line="248" pos:column="18">DefWindowProc</name></name><argument_list pos:line="248" pos:column="31">(<argument><expr><name pos:line="248" pos:column="32">_hSelf</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="40">message</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="49">wParam</name></expr></argument>, <argument><expr><name pos:line="248" pos:column="57">lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

 
<function><type><name pos:line="252" pos:column="1">void</name></type> <name><name pos:line="252" pos:column="6">Gripper</name><op:operator pos:line="252" pos:column="13">::</op:operator><name pos:line="252" pos:column="15">create</name></name><parameter_list pos:line="252" pos:column="21">()</parameter_list>
<block pos:line="253" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="254" pos:column="9">RECT</name></type>		<name pos:line="254" pos:column="25">rc</name>		<init pos:line="254" pos:column="41">= <expr><block pos:line="254" pos:column="43">{<expr><lit:literal type="number" pos:line="254" pos:column="44">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="255" pos:column="9">POINT</name></type>		<name pos:line="255" pos:column="25">pt</name>		<init pos:line="255" pos:column="41">= <expr><block pos:line="255" pos:column="43">{<expr><lit:literal type="number" pos:line="255" pos:column="44">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="257" pos:column="9">// start hooking</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="258" pos:column="9">::</op:operator><name pos:line="258" pos:column="11">SetWindowPos</name></name><argument_list pos:line="258" pos:column="23">(<argument><expr><call><name><name pos:line="258" pos:column="24">_pCont</name><op:operator pos:line="258" pos:column="30">-&gt;</op:operator><name pos:line="258" pos:column="32">getHSelf</name></name><argument_list pos:line="258" pos:column="40">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="258" pos:column="44">HWND_TOPMOST</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="258" pos:column="58">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="258" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="258" pos:column="64">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="258" pos:column="67">0</lit:literal></expr></argument>, <argument><expr><name pos:line="258" pos:column="70">SWP_NOSIZE</name> <op:operator pos:line="258" pos:column="81">|</op:operator> <name pos:line="258" pos:column="83">SWP_NOMOVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="259" pos:column="9">::</op:operator><name pos:line="259" pos:column="11">SetCapture</name></name><argument_list pos:line="259" pos:column="21">(<argument><expr><name pos:line="259" pos:column="22">_hSelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="260" pos:column="9">winVer</name></type> <name pos:line="260" pos:column="16">ver</name> <init pos:line="260" pos:column="20">= <expr><op:operator pos:line="260" pos:column="22">(</op:operator><call><name><name pos:line="260" pos:column="23">NppParameters</name><op:operator pos:line="260" pos:column="36">::</op:operator><name pos:line="260" pos:column="38">getInstance</name></name><argument_list pos:line="260" pos:column="49">()</argument_list></call><op:operator pos:line="260" pos:column="51">)</op:operator><op:operator pos:line="260" pos:column="52">-&gt;</op:operator><call><name pos:line="260" pos:column="54">getWinVersion</name><argument_list pos:line="260" pos:column="67">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="261" pos:column="9">hookMouse</name> <op:operator pos:line="261" pos:column="19">=</op:operator> <call><name><op:operator pos:line="261" pos:column="21">::</op:operator><name pos:line="261" pos:column="23">SetWindowsHookEx</name></name><argument_list pos:line="261" pos:column="39">(<argument><expr><name pos:line="261" pos:column="40">ver</name> <op:operator pos:line="261" pos:column="44">&gt;=</op:operator> <name pos:line="261" pos:column="47">WV_W2K</name><op:operator pos:line="261" pos:column="53">?</op:operator><name pos:line="261" pos:column="54">WH_MOUSE_LL</name><op:operator pos:line="261" pos:column="65">:</op:operator><name pos:line="261" pos:column="66">WH_MOUSE</name></expr></argument>, <argument><expr><op:operator pos:line="261" pos:column="76">(</op:operator><name pos:line="261" pos:column="77">HOOKPROC</name><op:operator pos:line="261" pos:column="85">)</op:operator><name pos:line="261" pos:column="86">hookProcMouse</name></expr></argument>, <argument><expr><name pos:line="261" pos:column="101">_hInst</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="261" pos:column="109">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if pos:line="263" pos:column="5">if <condition pos:line="263" pos:column="8">(<expr><op:operator pos:line="263" pos:column="9">!</op:operator><name pos:line="263" pos:column="10">hookMouse</name></expr>)</condition><then pos:line="263" pos:column="20">
    <block pos:line="264" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="265" pos:column="9">DWORD</name></type> <name pos:line="265" pos:column="15">dwError</name> <init pos:line="265" pos:column="23">= <expr><call><name><op:operator pos:line="265" pos:column="25">::</op:operator><name pos:line="265" pos:column="27">GetLastError</name></name><argument_list pos:line="265" pos:column="39">()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name pos:line="266" pos:column="9">TCHAR</name></type>  <name><name pos:line="266" pos:column="16">str</name><index pos:line="266" pos:column="19">[<expr><lit:literal type="number" pos:line="266" pos:column="20">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><op:operator pos:line="267" pos:column="9">::</op:operator><name pos:line="267" pos:column="11">wsprintf</name></name><argument_list pos:line="267" pos:column="19">(<argument><expr><name pos:line="267" pos:column="20">str</name></expr></argument>, <argument><expr><call><name pos:line="267" pos:column="25">TEXT</name><argument_list pos:line="267" pos:column="29">(<argument><expr><lit:literal type="string" pos:line="267" pos:column="30">"GetLastError() returned %lu"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="267" pos:column="62">dwError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><op:operator pos:line="268" pos:column="9">::</op:operator><name pos:line="268" pos:column="11">MessageBox</name></name><argument_list pos:line="268" pos:column="21">(<argument><expr><name pos:line="268" pos:column="22">NULL</name></expr></argument>, <argument><expr><name pos:line="268" pos:column="28">str</name></expr></argument>, <argument><expr><call><name pos:line="268" pos:column="33">TEXT</name><argument_list pos:line="268" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="268" pos:column="38">"SetWindowsHookEx(MOUSE) failed"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="268" pos:column="73">MB_OK</name> <op:operator pos:line="268" pos:column="79">|</op:operator> <name pos:line="268" pos:column="81">MB_ICONERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

	<if pos:line="271" pos:column="9">if <condition pos:line="271" pos:column="12">(<expr><name pos:line="271" pos:column="13">ver</name> <op:operator pos:line="271" pos:column="17">&lt;</op:operator> <name pos:line="271" pos:column="19">WV_VISTA</name></expr>)</condition><then pos:line="271" pos:column="28">
	<block pos:line="272" pos:column="9">{
		<expr_stmt><expr><name pos:line="273" pos:column="17">hookKeyboard</name> <op:operator pos:line="273" pos:column="30">=</op:operator> <call><name><op:operator pos:line="273" pos:column="32">::</op:operator><name pos:line="273" pos:column="34">SetWindowsHookEx</name></name><argument_list pos:line="273" pos:column="50">(<argument><expr><name pos:line="273" pos:column="51">WH_KEYBOARD</name></expr></argument>, <argument><expr><op:operator pos:line="273" pos:column="64">(</op:operator><name pos:line="273" pos:column="65">HOOKPROC</name><op:operator pos:line="273" pos:column="73">)</op:operator><name pos:line="273" pos:column="74">hookProcKeyboard</name></expr></argument>, <argument><expr><name pos:line="273" pos:column="92">_hInst</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="273" pos:column="100">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="274" pos:column="17">if <condition pos:line="274" pos:column="20">(<expr><op:operator pos:line="274" pos:column="21">!</op:operator><name pos:line="274" pos:column="22">hookKeyboard</name></expr>)</condition><then pos:line="274" pos:column="35">
		<block pos:line="275" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="276" pos:column="25">DWORD</name></type> <name pos:line="276" pos:column="31">dwError</name> <init pos:line="276" pos:column="39">= <expr><call><name><op:operator pos:line="276" pos:column="41">::</op:operator><name pos:line="276" pos:column="43">GetLastError</name></name><argument_list pos:line="276" pos:column="55">()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="277" pos:column="25">TCHAR</name></type>  <name><name pos:line="277" pos:column="32">str</name><index pos:line="277" pos:column="35">[<expr><lit:literal type="number" pos:line="277" pos:column="36">128</lit:literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="278" pos:column="25">::</op:operator><name pos:line="278" pos:column="27">wsprintf</name></name><argument_list pos:line="278" pos:column="35">(<argument><expr><name pos:line="278" pos:column="36">str</name></expr></argument>, <argument><expr><call><name pos:line="278" pos:column="41">TEXT</name><argument_list pos:line="278" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="46">"GetLastError() returned %lu"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="278" pos:column="78">dwError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="279" pos:column="25">::</op:operator><name pos:line="279" pos:column="27">MessageBox</name></name><argument_list pos:line="279" pos:column="37">(<argument><expr><name pos:line="279" pos:column="38">NULL</name></expr></argument>, <argument><expr><name pos:line="279" pos:column="44">str</name></expr></argument>, <argument><expr><call><name pos:line="279" pos:column="49">TEXT</name><argument_list pos:line="279" pos:column="53">(<argument><expr><lit:literal type="string" pos:line="279" pos:column="54">"SetWindowsHookEx(KEYBOARD) failed"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="279" pos:column="92">MB_OK</name> <op:operator pos:line="279" pos:column="98">|</op:operator> <name pos:line="279" pos:column="100">MB_ICONERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
<comment type="line" pos:line="282" pos:column="1">//  Removed regarding W9x systems</comment>
<comment type="line" pos:line="283" pos:column="1">//	mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);</comment>

	<comment type="line" pos:line="285" pos:column="9">// calculate the mouse pt within dialog</comment>
	<expr_stmt><expr><call><name><op:operator pos:line="286" pos:column="9">::</op:operator><name pos:line="286" pos:column="11">GetCursorPos</name></name><argument_list pos:line="286" pos:column="23">(<argument><expr><op:operator pos:line="286" pos:column="24">&amp;</op:operator><name pos:line="286" pos:column="25">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="line" pos:line="288" pos:column="9">// get tab informations</comment>
	<expr_stmt><expr><call><name pos:line="289" pos:column="9">initTabInformation</name><argument_list pos:line="289" pos:column="27">()</argument_list></call></expr>;</expr_stmt>

	<if pos:line="291" pos:column="9">if <condition pos:line="291" pos:column="12">(<expr><call><name><name pos:line="291" pos:column="13">_pCont</name><op:operator pos:line="291" pos:column="19">-&gt;</op:operator><name pos:line="291" pos:column="21">isFloating</name></name><argument_list pos:line="291" pos:column="31">()</argument_list></call> <op:operator pos:line="291" pos:column="34">==</op:operator> <lit:literal type="boolean" pos:line="291" pos:column="37">true</lit:literal></expr>)</condition><then pos:line="291" pos:column="42">
	<block pos:line="292" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="293" pos:column="17">::</op:operator><name pos:line="293" pos:column="19">GetWindowRect</name></name><argument_list pos:line="293" pos:column="32">(<argument><expr><call><name><name pos:line="293" pos:column="33">_pCont</name><op:operator pos:line="293" pos:column="39">-&gt;</op:operator><name pos:line="293" pos:column="41">getHSelf</name></name><argument_list pos:line="293" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="293" pos:column="53">&amp;</op:operator><name pos:line="293" pos:column="54">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="295" pos:column="9">else
	<block pos:line="296" pos:column="9">{
		<expr_stmt><expr><call><name><name pos:line="297" pos:column="17">_pCont</name><op:operator pos:line="297" pos:column="23">-&gt;</op:operator><name pos:line="297" pos:column="25">getClientRect</name></name><argument_list pos:line="297" pos:column="38">(<argument><expr><name pos:line="297" pos:column="39">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="298" pos:column="17">::</op:operator><name pos:line="298" pos:column="19">ScreenToClient</name></name><argument_list pos:line="298" pos:column="33">(<argument><expr><call><name><name pos:line="298" pos:column="34">_pCont</name><op:operator pos:line="298" pos:column="40">-&gt;</op:operator><name pos:line="298" pos:column="42">getHSelf</name></name><argument_list pos:line="298" pos:column="50">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="298" pos:column="54">&amp;</op:operator><name pos:line="298" pos:column="55">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><name><name pos:line="301" pos:column="9">_ptOffset</name><op:operator pos:line="301" pos:column="18">.</op:operator><name pos:line="301" pos:column="19">x</name></name>	<op:operator pos:line="301" pos:column="25">=</op:operator> <name><name pos:line="301" pos:column="27">pt</name><op:operator pos:line="301" pos:column="29">.</op:operator><name pos:line="301" pos:column="30">x</name></name> <op:operator pos:line="301" pos:column="32">-</op:operator> <name><name pos:line="301" pos:column="34">rc</name><op:operator pos:line="301" pos:column="36">.</op:operator><name pos:line="301" pos:column="37">left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="302" pos:column="9">_ptOffset</name><op:operator pos:line="302" pos:column="18">.</op:operator><name pos:line="302" pos:column="19">y</name></name>	<op:operator pos:line="302" pos:column="25">=</op:operator> <name><name pos:line="302" pos:column="27">pt</name><op:operator pos:line="302" pos:column="29">.</op:operator><name pos:line="302" pos:column="30">y</name></name> <op:operator pos:line="302" pos:column="32">-</op:operator> <name><name pos:line="302" pos:column="34">rc</name><op:operator pos:line="302" pos:column="36">.</op:operator><name pos:line="302" pos:column="37">top</name></name></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="306" pos:column="1">void</name></type> <name><name pos:line="306" pos:column="6">Gripper</name><op:operator pos:line="306" pos:column="13">::</op:operator><name pos:line="306" pos:column="15">onMove</name></name><parameter_list pos:line="306" pos:column="21">()</parameter_list>
<block pos:line="307" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="308" pos:column="9">POINT</name></type>		<name pos:line="308" pos:column="25">pt</name>		<init pos:line="308" pos:column="41">= <expr><block pos:line="308" pos:column="43">{<expr><lit:literal type="number" pos:line="308" pos:column="44">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="308" pos:column="46">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="309" pos:column="9">POINT</name></type>		<name pos:line="309" pos:column="25">ptBuf</name>	<init pos:line="309" pos:column="33">= <expr><block pos:line="309" pos:column="35">{<expr><lit:literal type="number" pos:line="309" pos:column="36">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="309" pos:column="38">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="311" pos:column="9">::</op:operator><name pos:line="311" pos:column="11">GetCursorPos</name></name><argument_list pos:line="311" pos:column="23">(<argument><expr><op:operator pos:line="311" pos:column="24">&amp;</op:operator><name pos:line="311" pos:column="25">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="312" pos:column="9">getMousePoints</name><argument_list pos:line="312" pos:column="23">(<argument><expr><op:operator pos:line="312" pos:column="24">&amp;</op:operator><name pos:line="312" pos:column="25">pt</name></expr></argument>, <argument><expr><op:operator pos:line="312" pos:column="29">&amp;</op:operator><name pos:line="312" pos:column="30">ptBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" pos:line="314" pos:column="9">/* tab reordering only when tab was selected */</comment>
	<if pos:line="315" pos:column="9">if <condition pos:line="315" pos:column="12">(<expr><name pos:line="315" pos:column="13">_startMovingFromTab</name> <op:operator pos:line="315" pos:column="33">==</op:operator> <name pos:line="315" pos:column="36">TRUE</name></expr>)</condition><then pos:line="315" pos:column="41">
	<block pos:line="316" pos:column="9">{
		<expr_stmt><expr><call><name pos:line="317" pos:column="17">doTabReordering</name><argument_list pos:line="317" pos:column="32">(<argument><expr><name pos:line="317" pos:column="33">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<expr_stmt><expr><call><name pos:line="320" pos:column="9">drawRectangle</name><argument_list pos:line="320" pos:column="22">(<argument><expr><op:operator pos:line="320" pos:column="23">&amp;</op:operator><name pos:line="320" pos:column="24">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="324" pos:column="1">void</name></type> <name><name pos:line="324" pos:column="6">Gripper</name><op:operator pos:line="324" pos:column="13">::</op:operator><name pos:line="324" pos:column="15">onButtonUp</name></name><parameter_list pos:line="324" pos:column="25">()</parameter_list>
<block pos:line="325" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="326" pos:column="9">POINT</name></type>			<name pos:line="326" pos:column="33">pt</name>			<init pos:line="326" pos:column="57">= <expr><block pos:line="326" pos:column="59">{<expr><lit:literal type="number" pos:line="326" pos:column="60">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="326" pos:column="62">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="327" pos:column="9">POINT</name></type>			<name pos:line="327" pos:column="33">ptBuf</name>		<init pos:line="327" pos:column="49">= <expr><block pos:line="327" pos:column="51">{<expr><lit:literal type="number" pos:line="327" pos:column="52">0</lit:literal></expr>,<expr><lit:literal type="number" pos:line="327" pos:column="54">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="328" pos:column="9">RECT</name></type>			<name pos:line="328" pos:column="33">rc</name>			<init pos:line="328" pos:column="57">= <expr><block pos:line="328" pos:column="59">{<expr><lit:literal type="number" pos:line="328" pos:column="60">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="329" pos:column="9">RECT</name></type>			<name pos:line="329" pos:column="33">rcCorr</name>		<init pos:line="329" pos:column="49">= <expr><block pos:line="329" pos:column="51">{<expr><lit:literal type="number" pos:line="329" pos:column="52">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="330" pos:column="9">DockingCont</name><type:modifier pos:line="330" pos:column="20">*</type:modifier></type>	<name pos:line="330" pos:column="25">pContMove</name>	<init pos:line="330" pos:column="41">= <expr><name pos:line="330" pos:column="43">NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="332" pos:column="9">::</op:operator><name pos:line="332" pos:column="11">GetCursorPos</name></name><argument_list pos:line="332" pos:column="23">(<argument><expr><op:operator pos:line="332" pos:column="24">&amp;</op:operator><name pos:line="332" pos:column="25">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="333" pos:column="9">getMousePoints</name><argument_list pos:line="333" pos:column="23">(<argument><expr><op:operator pos:line="333" pos:column="24">&amp;</op:operator><name pos:line="333" pos:column="25">pt</name></expr></argument>, <argument><expr><op:operator pos:line="333" pos:column="29">&amp;</op:operator><name pos:line="333" pos:column="30">ptBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="335" pos:column="9">// do nothing, when old point is not valid </comment>
	<if pos:line="336" pos:column="9">if <condition pos:line="336" pos:column="12">(<expr><name pos:line="336" pos:column="13">_bPtOldValid</name> <op:operator pos:line="336" pos:column="26">==</op:operator> <name pos:line="336" pos:column="29">FALSE</name></expr>)</condition><then pos:line="336" pos:column="35">
		<return pos:line="337" pos:column="17">return;</return></then></if>

	<comment type="line" pos:line="339" pos:column="9">// erase last drawn rectangle</comment>
	<expr_stmt><expr><call><name pos:line="340" pos:column="9">drawRectangle</name><argument_list pos:line="340" pos:column="22">(<argument><expr><name pos:line="340" pos:column="23">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="342" pos:column="9">// look if current position is within dockable area </comment>
	<decl_stmt><decl><type><name pos:line="343" pos:column="9">DockingCont</name><type:modifier pos:line="343" pos:column="20">*</type:modifier></type>	<name pos:line="343" pos:column="25">pDockCont</name> <init pos:line="343" pos:column="35">= <expr><call><name pos:line="343" pos:column="37">contHitTest</name><argument_list pos:line="343" pos:column="48">(<argument><expr><name pos:line="343" pos:column="49">pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="345" pos:column="9">if <condition pos:line="345" pos:column="12">(<expr><name pos:line="345" pos:column="13">pDockCont</name> <op:operator pos:line="345" pos:column="23">==</op:operator> <name pos:line="345" pos:column="26">NULL</name></expr>)</condition><then pos:line="345" pos:column="31">
	<block pos:line="346" pos:column="9">{
		<expr_stmt><expr><name pos:line="347" pos:column="17">pDockCont</name> <op:operator pos:line="347" pos:column="27">=</op:operator> <call><name pos:line="347" pos:column="29">workHitTest</name><argument_list pos:line="347" pos:column="40">(<argument><expr><name pos:line="347" pos:column="41">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="block" pos:line="350" pos:column="9">/* add dependency to other container class */</comment>
	<if pos:line="351" pos:column="9">if <condition pos:line="351" pos:column="12">(<expr><name pos:line="351" pos:column="13">pDockCont</name> <op:operator pos:line="351" pos:column="23">==</op:operator> <name pos:line="351" pos:column="26">NULL</name></expr>)</condition><then pos:line="351" pos:column="31">
	<block pos:line="352" pos:column="9">{
		<comment type="block" pos:line="353" pos:column="17">/* calculate new position */</comment>
		<expr_stmt><expr><name pos:line="354" pos:column="17">rc</name> <op:operator pos:line="354" pos:column="20">=</op:operator> <call><name><name pos:line="354" pos:column="22">_pCont</name><op:operator pos:line="354" pos:column="28">-&gt;</op:operator><name pos:line="354" pos:column="30">getDataOfActiveTb</name></name><argument_list pos:line="354" pos:column="47">()</argument_list></call><op:operator pos:line="354" pos:column="49">-&gt;</op:operator><name pos:line="354" pos:column="51">rcFloat</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="355" pos:column="17">_pCont</name><op:operator pos:line="355" pos:column="23">-&gt;</op:operator><name pos:line="355" pos:column="25">getClientRect</name></name><argument_list pos:line="355" pos:column="38">(<argument><expr><name pos:line="355" pos:column="39">rcCorr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name pos:line="357" pos:column="17">CalcRectToScreen</name><argument_list pos:line="357" pos:column="33">(<argument><expr><name><name pos:line="357" pos:column="34">_dockData</name><op:operator pos:line="357" pos:column="43">.</op:operator><name pos:line="357" pos:column="44">hWnd</name></name></expr></argument>, <argument><expr><op:operator pos:line="357" pos:column="50">&amp;</op:operator><name pos:line="357" pos:column="51">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="358" pos:column="17">CalcRectToScreen</name><argument_list pos:line="358" pos:column="33">(<argument><expr><name><name pos:line="358" pos:column="34">_dockData</name><op:operator pos:line="358" pos:column="43">.</op:operator><name pos:line="358" pos:column="44">hWnd</name></name></expr></argument>, <argument><expr><op:operator pos:line="358" pos:column="50">&amp;</op:operator><name pos:line="358" pos:column="51">rcCorr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name pos:line="360" pos:column="17">rc</name><op:operator pos:line="360" pos:column="19">.</op:operator><name pos:line="360" pos:column="20">left</name></name>    <op:operator pos:line="360" pos:column="28">=</op:operator> <name><name pos:line="360" pos:column="30">pt</name><op:operator pos:line="360" pos:column="32">.</op:operator><name pos:line="360" pos:column="33">x</name></name> <op:operator pos:line="360" pos:column="35">-</op:operator> <name><name pos:line="360" pos:column="37">_ptOffset</name><op:operator pos:line="360" pos:column="46">.</op:operator><name pos:line="360" pos:column="47">x</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="361" pos:column="17">rc</name><op:operator pos:line="361" pos:column="19">.</op:operator><name pos:line="361" pos:column="20">top</name></name>     <op:operator pos:line="361" pos:column="28">=</op:operator> <name><name pos:line="361" pos:column="30">pt</name><op:operator pos:line="361" pos:column="32">.</op:operator><name pos:line="361" pos:column="33">y</name></name> <op:operator pos:line="361" pos:column="35">-</op:operator> <name><name pos:line="361" pos:column="37">_ptOffset</name><op:operator pos:line="361" pos:column="46">.</op:operator><name pos:line="361" pos:column="47">y</name></name></expr>;</expr_stmt>

		<comment type="block" pos:line="363" pos:column="17">/* correct rectangle position when mouse is not within */</comment>
		<expr_stmt><expr><call><name pos:line="364" pos:column="17">DoCalcGripperRect</name><argument_list pos:line="364" pos:column="34">(<argument><expr><op:operator pos:line="364" pos:column="35">&amp;</op:operator><name pos:line="364" pos:column="36">rc</name></expr></argument>, <argument><expr><name pos:line="364" pos:column="40">rcCorr</name></expr></argument>, <argument><expr><name pos:line="364" pos:column="48">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block" pos:line="366" pos:column="17">/* change location of toolbars */</comment>
		<if pos:line="367" pos:column="17">if <condition pos:line="367" pos:column="20">(<expr><name pos:line="367" pos:column="21">_startMovingFromTab</name> <op:operator pos:line="367" pos:column="41">==</op:operator> <name pos:line="367" pos:column="44">TRUE</name></expr>)</condition><then pos:line="367" pos:column="49">
		<block pos:line="368" pos:column="17">{
			<comment type="block" pos:line="369" pos:column="25">/* when tab is moved */</comment>
			<if pos:line="370" pos:column="25">if <condition pos:line="370" pos:column="28">(<expr><op:operator pos:line="370" pos:column="29">(</op:operator><op:operator pos:line="370" pos:column="30">!</op:operator><call><name><name pos:line="370" pos:column="31">_pCont</name><op:operator pos:line="370" pos:column="37">-&gt;</op:operator><name pos:line="370" pos:column="39">isFloating</name></name><argument_list pos:line="370" pos:column="49">()</argument_list></call><op:operator pos:line="370" pos:column="51">)</op:operator> <op:operator pos:line="370" pos:column="53">||</op:operator> 
				<op:operator pos:line="371" pos:column="33">(</op:operator><op:operator pos:line="371" pos:column="34">(</op:operator><call><name><name pos:line="371" pos:column="35">_pCont</name><op:operator pos:line="371" pos:column="41">-&gt;</op:operator><name pos:line="371" pos:column="43">isFloating</name></name><argument_list pos:line="371" pos:column="53">()</argument_list></call><op:operator pos:line="371" pos:column="55">)</op:operator> <op:operator pos:line="371" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="371" pos:column="60">(</op:operator><call><name><op:operator pos:line="371" pos:column="61">::</op:operator><name pos:line="371" pos:column="63">SendMessage</name></name><argument_list pos:line="371" pos:column="74">(<argument><expr><name pos:line="371" pos:column="75">_hTabSource</name></expr></argument>, <argument><expr><name pos:line="371" pos:column="88">TCM_GETITEMCOUNT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="371" pos:column="106">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="371" pos:column="109">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="371" pos:column="112">&gt;</op:operator> <lit:literal type="number" pos:line="371" pos:column="114">1</lit:literal><op:operator pos:line="371" pos:column="115">)</op:operator><op:operator pos:line="371" pos:column="116">)</op:operator></expr>)</condition><then pos:line="371" pos:column="118">
			<block pos:line="372" pos:column="25">{
				<expr_stmt><expr><name pos:line="373" pos:column="33">pContMove</name> <op:operator pos:line="373" pos:column="43">=</op:operator> <call><name><name pos:line="373" pos:column="45">_pDockMgr</name><op:operator pos:line="373" pos:column="54">-&gt;</op:operator><name pos:line="373" pos:column="56">toggleActiveTb</name></name><argument_list pos:line="373" pos:column="70">(<argument><expr><name pos:line="373" pos:column="71">_pCont</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="79">DMM_FLOAT</name></expr></argument>, <argument><expr><name pos:line="373" pos:column="90">TRUE</name></expr></argument>, <argument><expr><op:operator pos:line="373" pos:column="96">&amp;</op:operator><name pos:line="373" pos:column="97">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<else pos:line="376" pos:column="17">else <if pos:line="376" pos:column="22">if <condition pos:line="376" pos:column="25">(<expr><op:operator pos:line="376" pos:column="26">!</op:operator><call><name><name pos:line="376" pos:column="27">_pCont</name><op:operator pos:line="376" pos:column="33">-&gt;</op:operator><name pos:line="376" pos:column="35">isFloating</name></name><argument_list pos:line="376" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="376" pos:column="48">
		<block pos:line="377" pos:column="17">{
			<comment type="block" pos:line="378" pos:column="25">/* when all windows are moved */</comment>
			<expr_stmt><expr><name pos:line="379" pos:column="25">pContMove</name> <op:operator pos:line="379" pos:column="35">=</op:operator> <call><name><name pos:line="379" pos:column="37">_pDockMgr</name><op:operator pos:line="379" pos:column="46">-&gt;</op:operator><name pos:line="379" pos:column="48">toggleVisTb</name></name><argument_list pos:line="379" pos:column="59">(<argument><expr><name pos:line="379" pos:column="60">_pCont</name></expr></argument>, <argument><expr><name pos:line="379" pos:column="68">DMM_FLOAT</name></expr></argument>, <argument><expr><op:operator pos:line="379" pos:column="79">&amp;</op:operator><name pos:line="379" pos:column="80">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></else></if>

		<comment type="block" pos:line="382" pos:column="17">/* set moving container */</comment>
		<if pos:line="383" pos:column="17">if <condition pos:line="383" pos:column="20">(<expr><name pos:line="383" pos:column="21">pContMove</name> <op:operator pos:line="383" pos:column="31">==</op:operator> <name pos:line="383" pos:column="34">NULL</name></expr>)</condition><then pos:line="383" pos:column="39">
		<block pos:line="384" pos:column="17">{
			<expr_stmt><expr><name pos:line="385" pos:column="25">pContMove</name> <op:operator pos:line="385" pos:column="35">=</op:operator> <name pos:line="385" pos:column="37">_pCont</name></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="block" pos:line="388" pos:column="17">/* update window position */</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="389" pos:column="17">::</op:operator><name pos:line="389" pos:column="19">MoveWindow</name></name><argument_list pos:line="389" pos:column="29">(<argument><expr><call><name><name pos:line="389" pos:column="30">pContMove</name><op:operator pos:line="389" pos:column="39">-&gt;</op:operator><name pos:line="389" pos:column="41">getHSelf</name></name><argument_list pos:line="389" pos:column="49">()</argument_list></call></expr></argument>, <argument><expr><name><name pos:line="389" pos:column="53">rc</name><op:operator pos:line="389" pos:column="55">.</op:operator><name pos:line="389" pos:column="56">left</name></name></expr></argument>, <argument><expr><name><name pos:line="389" pos:column="62">rc</name><op:operator pos:line="389" pos:column="64">.</op:operator><name pos:line="389" pos:column="65">top</name></name></expr></argument>, <argument><expr><name><name pos:line="389" pos:column="70">rc</name><op:operator pos:line="389" pos:column="72">.</op:operator><name pos:line="389" pos:column="73">right</name></name></expr></argument>, <argument><expr><name><name pos:line="389" pos:column="80">rc</name><op:operator pos:line="389" pos:column="82">.</op:operator><name pos:line="389" pos:column="83">bottom</name></name></expr></argument>, <argument><expr><name pos:line="389" pos:column="91">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="390" pos:column="17">::</op:operator><name pos:line="390" pos:column="19">SendMessage</name></name><argument_list pos:line="390" pos:column="30">(<argument><expr><call><name><name pos:line="390" pos:column="31">pContMove</name><op:operator pos:line="390" pos:column="40">-&gt;</op:operator><name pos:line="390" pos:column="42">getHSelf</name></name><argument_list pos:line="390" pos:column="50">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="390" pos:column="54">WM_SIZE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="390" pos:column="63">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="390" pos:column="66">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="392" pos:column="9">else <if pos:line="392" pos:column="14">if <condition pos:line="392" pos:column="17">(<expr><name pos:line="392" pos:column="18">_pCont</name> <op:operator pos:line="392" pos:column="25">!=</op:operator> <name pos:line="392" pos:column="28">pDockCont</name></expr>)</condition><then pos:line="392" pos:column="38">
	<block pos:line="393" pos:column="9">{
		<comment type="block" pos:line="394" pos:column="17">/* change location of toolbars */</comment>
		<if pos:line="395" pos:column="17">if <condition pos:line="395" pos:column="20">(<expr><op:operator pos:line="395" pos:column="21">(</op:operator><name pos:line="395" pos:column="22">_startMovingFromTab</name> <op:operator pos:line="395" pos:column="42">==</op:operator> <name pos:line="395" pos:column="45">TRUE</name><op:operator pos:line="395" pos:column="49">)</op:operator> <op:operator pos:line="395" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="395" pos:column="54">(</op:operator><call><name><op:operator pos:line="395" pos:column="55">::</op:operator><name pos:line="395" pos:column="57">SendMessage</name></name><argument_list pos:line="395" pos:column="68">(<argument><expr><name pos:line="395" pos:column="69">_hTabSource</name></expr></argument>, <argument><expr><name pos:line="395" pos:column="82">TCM_GETITEMCOUNT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="395" pos:column="100">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="395" pos:column="103">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="395" pos:column="106">!=</op:operator> <lit:literal type="number" pos:line="395" pos:column="109">1</lit:literal><op:operator pos:line="395" pos:column="110">)</op:operator></expr>)</condition><then pos:line="395" pos:column="112">
		<block pos:line="396" pos:column="17">{
			<comment type="block" pos:line="397" pos:column="25">/* when tab is moved */</comment>
			<expr_stmt><expr><call><name><name pos:line="398" pos:column="25">_pDockMgr</name><op:operator pos:line="398" pos:column="34">-&gt;</op:operator><name pos:line="398" pos:column="36">toggleActiveTb</name></name><argument_list pos:line="398" pos:column="50">(<argument><expr><name pos:line="398" pos:column="51">_pCont</name></expr></argument>, <argument><expr><name pos:line="398" pos:column="59">pDockCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="400" pos:column="17">else
		<block pos:line="401" pos:column="17">{
			<comment type="block" pos:line="402" pos:column="25">/* when all windows are moved */</comment>
			<expr_stmt><expr><call><name><name pos:line="403" pos:column="25">_pDockMgr</name><op:operator pos:line="403" pos:column="34">-&gt;</op:operator><name pos:line="403" pos:column="36">toggleVisTb</name></name><argument_list pos:line="403" pos:column="47">(<argument><expr><name pos:line="403" pos:column="48">_pCont</name></expr></argument>, <argument><expr><name pos:line="403" pos:column="56">pDockCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if></else></if>
}</block></function>


<function><type><name pos:line="409" pos:column="1">void</name></type> <name><name pos:line="409" pos:column="6">Gripper</name><op:operator pos:line="409" pos:column="13">::</op:operator><name pos:line="409" pos:column="15">doTabReordering</name></name><parameter_list pos:line="409" pos:column="30">(<param><decl><type><name pos:line="409" pos:column="31">POINT</name></type> <name pos:line="409" pos:column="37">pt</name></decl></param>)</parameter_list>
<block pos:line="410" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="411" pos:column="9">vector</name><argument_list pos:line="411" pos:column="15">&lt;<argument><expr><name pos:line="411" pos:column="16">DockingCont</name><type:modifier pos:line="411" pos:column="27">*</type:modifier></expr></argument>&gt;</argument_list></name></type>	<name pos:line="411" pos:column="33">vCont</name>		<init pos:line="411" pos:column="49">= <expr><call><name><name pos:line="411" pos:column="51">_pDockMgr</name><op:operator pos:line="411" pos:column="60">-&gt;</op:operator><name pos:line="411" pos:column="62">getContainerInfo</name></name><argument_list pos:line="411" pos:column="78">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="412" pos:column="9">BOOL</name></type>					<name pos:line="412" pos:column="49">inTab</name>		<init pos:line="412" pos:column="65">= <expr><name pos:line="412" pos:column="67">FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="413" pos:column="9">HWND</name></type>					<name pos:line="413" pos:column="49">hTab</name>		<init pos:line="413" pos:column="65">= <expr><name pos:line="413" pos:column="67">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="414" pos:column="9">HWND</name></type>					<name pos:line="414" pos:column="49">hTabOld</name>		<init pos:line="414" pos:column="65">= <expr><name pos:line="414" pos:column="67">_hTab</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="415" pos:column="9">int</name></type>						<name pos:line="415" pos:column="57">iItem</name>		<init pos:line="415" pos:column="73">= <expr><op:operator pos:line="415" pos:column="75">-</op:operator><lit:literal type="number" pos:line="415" pos:column="76">1</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="416" pos:column="9">int</name></type>						<name pos:line="416" pos:column="57">iItemOld</name>	<init pos:line="416" pos:column="73">= <expr><name pos:line="416" pos:column="75">_iItem</name></expr></init></decl>;</decl_stmt>

	<comment type="block" pos:line="418" pos:column="9">/* search for every tab entry */</comment>
	<for pos:line="419" pos:column="9">for (<init><decl><type><name pos:line="419" pos:column="14">size_t</name></type> <name pos:line="419" pos:column="21">iCont</name> <init pos:line="419" pos:column="27">= <expr><lit:literal type="number" pos:line="419" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="419" pos:column="32">iCont</name> <op:operator pos:line="419" pos:column="38">&lt;</op:operator> <call><name><name pos:line="419" pos:column="40">vCont</name><op:operator pos:line="419" pos:column="45">.</op:operator><name pos:line="419" pos:column="46">size</name></name><argument_list pos:line="419" pos:column="50">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="419" pos:column="54">iCont</name><op:operator pos:line="419" pos:column="59">++</op:operator></expr></incr>)
	<block pos:line="420" pos:column="9">{
		<expr_stmt><expr><name pos:line="421" pos:column="17">hTab</name> <op:operator pos:line="421" pos:column="22">=</op:operator> <name><name pos:line="421" pos:column="24">vCont</name><index pos:line="421" pos:column="29">[<expr><name pos:line="421" pos:column="30">iCont</name></expr>]</index></name><op:operator pos:line="421" pos:column="36">-&gt;</op:operator><call><name pos:line="421" pos:column="38">getTabWnd</name><argument_list pos:line="421" pos:column="47">()</argument_list></call></expr>;</expr_stmt>

		<comment type="block" pos:line="423" pos:column="17">/* search only if container is visible */</comment>
		<if pos:line="424" pos:column="17">if <condition pos:line="424" pos:column="20">(<expr><call><name><op:operator pos:line="424" pos:column="21">::</op:operator><name pos:line="424" pos:column="23">IsWindowVisible</name></name><argument_list pos:line="424" pos:column="38">(<argument><expr><name pos:line="424" pos:column="39">hTab</name></expr></argument>)</argument_list></call> <op:operator pos:line="424" pos:column="45">==</op:operator> <name pos:line="424" pos:column="48">TRUE</name></expr>)</condition><then pos:line="424" pos:column="53">
		<block pos:line="425" pos:column="17">{
			<decl_stmt><decl><type><name pos:line="426" pos:column="25">RECT</name></type>	<name pos:line="426" pos:column="33">rc</name>		<init pos:line="426" pos:column="49">= <expr><block pos:line="426" pos:column="51">{<expr><lit:literal type="number" pos:line="426" pos:column="52">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><op:operator pos:line="428" pos:column="25">::</op:operator><name pos:line="428" pos:column="27">GetWindowRect</name></name><argument_list pos:line="428" pos:column="40">(<argument><expr><name pos:line="428" pos:column="41">hTab</name></expr></argument>, <argument><expr><op:operator pos:line="428" pos:column="47">&amp;</op:operator><name pos:line="428" pos:column="48">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block" pos:line="430" pos:column="25">/* test if cursor points in tab window */</comment>
			<if pos:line="431" pos:column="25">if <condition pos:line="431" pos:column="28">(<expr><call><name><op:operator pos:line="431" pos:column="29">::</op:operator><name pos:line="431" pos:column="31">PtInRect</name></name><argument_list pos:line="431" pos:column="39">(<argument><expr><op:operator pos:line="431" pos:column="40">&amp;</op:operator><name pos:line="431" pos:column="41">rc</name></expr></argument>, <argument><expr><name pos:line="431" pos:column="45">pt</name></expr></argument>)</argument_list></call> <op:operator pos:line="431" pos:column="49">==</op:operator> <name pos:line="431" pos:column="52">TRUE</name></expr>)</condition><then pos:line="431" pos:column="57">
			<block pos:line="432" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="433" pos:column="33">TCHITTESTINFO</name></type>	<name pos:line="433" pos:column="49">info</name>	<init pos:line="433" pos:column="57">= <expr><block pos:line="433" pos:column="59">{<expr><lit:literal type="number" pos:line="433" pos:column="60">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

				<if pos:line="435" pos:column="33">if <condition pos:line="435" pos:column="36">(<expr><name pos:line="435" pos:column="37">_hTab</name> <op:operator pos:line="435" pos:column="43">==</op:operator> <name pos:line="435" pos:column="46">NULL</name></expr>)</condition><then pos:line="435" pos:column="51">
				<block pos:line="436" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="437" pos:column="41">initTabInformation</name><argument_list pos:line="437" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="438" pos:column="41">hTabOld</name>  <op:operator pos:line="438" pos:column="50">=</op:operator> <name pos:line="438" pos:column="52">_hTab</name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="439" pos:column="41">iItemOld</name> <op:operator pos:line="439" pos:column="50">=</op:operator> <name pos:line="439" pos:column="52">_iItem</name></expr>;</expr_stmt>
				}</block></then></if>

				<comment type="block" pos:line="442" pos:column="33">/* get pointed tab item */</comment>
				<expr_stmt><expr><name><name pos:line="443" pos:column="33">info</name><op:operator pos:line="443" pos:column="37">.</op:operator><name pos:line="443" pos:column="38">pt</name></name>	<op:operator pos:line="443" pos:column="41">=</op:operator> <name pos:line="443" pos:column="43">pt</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><op:operator pos:line="444" pos:column="33">::</op:operator><name pos:line="444" pos:column="35">ScreenToClient</name></name><argument_list pos:line="444" pos:column="49">(<argument><expr><name pos:line="444" pos:column="50">hTab</name></expr></argument>, <argument><expr><op:operator pos:line="444" pos:column="56">&amp;</op:operator><name><name pos:line="444" pos:column="57">info</name><op:operator pos:line="444" pos:column="61">.</op:operator><name pos:line="444" pos:column="62">pt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="445" pos:column="33">iItem</name> <op:operator pos:line="445" pos:column="39">=</op:operator> <call><name><op:operator pos:line="445" pos:column="41">::</op:operator><name pos:line="445" pos:column="43">SendMessage</name></name><argument_list pos:line="445" pos:column="54">(<argument><expr><name pos:line="445" pos:column="55">hTab</name></expr></argument>, <argument><expr><name pos:line="445" pos:column="61">TCM_HITTEST</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="445" pos:column="74">0</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="445" pos:column="77">(</op:operator><name pos:line="445" pos:column="78">LPARAM</name><op:operator pos:line="445" pos:column="84">)</op:operator><op:operator pos:line="445" pos:column="85">&amp;</op:operator><name pos:line="445" pos:column="86">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if pos:line="447" pos:column="33">if <condition pos:line="447" pos:column="36">(<expr><name pos:line="447" pos:column="37">iItem</name> <op:operator pos:line="447" pos:column="43">!=</op:operator> <op:operator pos:line="447" pos:column="46">-</op:operator><lit:literal type="number" pos:line="447" pos:column="47">1</lit:literal></expr>)</condition><then pos:line="447" pos:column="49">
				<block pos:line="448" pos:column="33">{
					<comment type="block" pos:line="449" pos:column="41">/* prevent flickering of tabs with different sizes */</comment>
					<expr_stmt><expr><call><name><op:operator pos:line="450" pos:column="41">::</op:operator><name pos:line="450" pos:column="43">SendMessage</name></name><argument_list pos:line="450" pos:column="54">(<argument><expr><name pos:line="450" pos:column="55">hTab</name></expr></argument>, <argument><expr><name pos:line="450" pos:column="61">TCM_GETITEMRECT</name></expr></argument>, <argument><expr><name pos:line="450" pos:column="78">iItem</name></expr></argument>, <argument><expr><op:operator pos:line="450" pos:column="85">(</op:operator><name pos:line="450" pos:column="86">LPARAM</name><op:operator pos:line="450" pos:column="92">)</op:operator><op:operator pos:line="450" pos:column="93">&amp;</op:operator><name pos:line="450" pos:column="94">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="451" pos:column="41">ClientRectToScreenRect</name><argument_list pos:line="451" pos:column="63">(<argument><expr><name pos:line="451" pos:column="64">hTab</name></expr></argument>, <argument><expr><op:operator pos:line="451" pos:column="70">&amp;</op:operator><name pos:line="451" pos:column="71">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if pos:line="453" pos:column="41">if <condition pos:line="453" pos:column="44">(<expr><op:operator pos:line="453" pos:column="45">(</op:operator><name><name pos:line="453" pos:column="46">rc</name><op:operator pos:line="453" pos:column="48">.</op:operator><name pos:line="453" pos:column="49">left</name></name> <op:operator pos:line="453" pos:column="54">+</op:operator> <op:operator pos:line="453" pos:column="56">(</op:operator><name><name pos:line="453" pos:column="57">_rcItem</name><op:operator pos:line="453" pos:column="64">.</op:operator><name pos:line="453" pos:column="65">right</name></name>  <op:operator pos:line="453" pos:column="72">-</op:operator> <name><name pos:line="453" pos:column="74">_rcItem</name><op:operator pos:line="453" pos:column="81">.</op:operator><name pos:line="453" pos:column="82">left</name></name><op:operator pos:line="453" pos:column="86">)</op:operator><op:operator pos:line="453" pos:column="87">)</op:operator> <op:operator pos:line="453" pos:column="89">&lt;</op:operator> <name><name pos:line="453" pos:column="91">pt</name><op:operator pos:line="453" pos:column="93">.</op:operator><name pos:line="453" pos:column="94">x</name></name></expr>)</condition><then pos:line="453" pos:column="96">
					<block pos:line="454" pos:column="41">{
						<return pos:line="455" pos:column="49">return;</return>
					}</block></then></if>

					<expr_stmt><expr><name pos:line="458" pos:column="41">_iItem</name>	<op:operator pos:line="458" pos:column="49">=</op:operator> <name pos:line="458" pos:column="51">iItem</name></expr>;</expr_stmt>
				}</block></then>
				<else pos:line="460" pos:column="33">else <if pos:line="460" pos:column="38">if <condition pos:line="460" pos:column="41">(<expr><op:operator pos:line="460" pos:column="42">(</op:operator><name pos:line="460" pos:column="43">hTab</name> <op:operator pos:line="460" pos:column="48">!=</op:operator> <name pos:line="460" pos:column="51">_hTab</name><op:operator pos:line="460" pos:column="56">)</op:operator> <op:operator pos:line="460" pos:column="58">||</op:operator> <op:operator pos:line="460" pos:column="61">(</op:operator><name pos:line="460" pos:column="62">_iItem</name> <op:operator pos:line="460" pos:column="69">==</op:operator> <op:operator pos:line="460" pos:column="72">-</op:operator><lit:literal type="number" pos:line="460" pos:column="73">1</lit:literal><op:operator pos:line="460" pos:column="74">)</op:operator></expr>)</condition><then pos:line="460" pos:column="76">
				<block pos:line="461" pos:column="33">{
					<comment type="block" pos:line="462" pos:column="41">/* test if cusor points after last tab */</comment>
					<decl_stmt><decl><type><name pos:line="463" pos:column="41">int</name></type>		<name pos:line="463" pos:column="57">iLastItem</name>	<init pos:line="463" pos:column="73">= <expr><call><name><op:operator pos:line="463" pos:column="75">::</op:operator><name pos:line="463" pos:column="77">SendMessage</name></name><argument_list pos:line="463" pos:column="88">(<argument><expr><name pos:line="463" pos:column="89">hTab</name></expr></argument>, <argument><expr><name pos:line="463" pos:column="95">TCM_GETITEMCOUNT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="463" pos:column="113">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="463" pos:column="116">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="463" pos:column="119">-</op:operator> <lit:literal type="number" pos:line="463" pos:column="121">1</lit:literal></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name><op:operator pos:line="465" pos:column="41">::</op:operator><name pos:line="465" pos:column="43">SendMessage</name></name><argument_list pos:line="465" pos:column="54">(<argument><expr><name pos:line="465" pos:column="55">hTab</name></expr></argument>, <argument><expr><name pos:line="465" pos:column="61">TCM_GETITEMRECT</name></expr></argument>, <argument><expr><name pos:line="465" pos:column="78">iLastItem</name></expr></argument>, <argument><expr><op:operator pos:line="465" pos:column="89">(</op:operator><name pos:line="465" pos:column="90">LPARAM</name><op:operator pos:line="465" pos:column="96">)</op:operator><op:operator pos:line="465" pos:column="97">&amp;</op:operator><name pos:line="465" pos:column="98">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="466" pos:column="41">if <condition pos:line="466" pos:column="44">(<expr><op:operator pos:line="466" pos:column="45">(</op:operator><name><name pos:line="466" pos:column="46">rc</name><op:operator pos:line="466" pos:column="48">.</op:operator><name pos:line="466" pos:column="49">left</name></name> <op:operator pos:line="466" pos:column="54">+</op:operator> <name><name pos:line="466" pos:column="56">rc</name><op:operator pos:line="466" pos:column="58">.</op:operator><name pos:line="466" pos:column="59">right</name></name><op:operator pos:line="466" pos:column="64">)</op:operator> <op:operator pos:line="466" pos:column="66">&lt;</op:operator> <name><name pos:line="466" pos:column="68">pt</name><op:operator pos:line="466" pos:column="70">.</op:operator><name pos:line="466" pos:column="71">x</name></name></expr>)</condition><then pos:line="466" pos:column="73">
					<block pos:line="467" pos:column="41">{
						<expr_stmt><expr><name pos:line="468" pos:column="49">_iItem</name> <op:operator pos:line="468" pos:column="56">=</op:operator> <name pos:line="468" pos:column="58">iLastItem</name> <op:operator pos:line="468" pos:column="68">+</op:operator> <lit:literal type="number" pos:line="468" pos:column="70">1</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>

				<expr_stmt><expr><name pos:line="472" pos:column="33">_hTab</name> <op:operator pos:line="472" pos:column="39">=</op:operator> <name pos:line="472" pos:column="41">hTab</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="473" pos:column="33">inTab</name> <op:operator pos:line="473" pos:column="39">=</op:operator> <name pos:line="473" pos:column="41">TRUE</name></expr>;</expr_stmt>
				<break pos:line="474" pos:column="33">break;</break>
			}</block></then></if>
		}</block></then></if>
	}</block></for>

	<comment type="block" pos:line="479" pos:column="9">/* set and remove tabs correct */</comment>
	<if pos:line="480" pos:column="9">if <condition pos:line="480" pos:column="12">(<expr><op:operator pos:line="480" pos:column="13">(</op:operator><name pos:line="480" pos:column="14">inTab</name> <op:operator pos:line="480" pos:column="20">==</op:operator> <name pos:line="480" pos:column="23">TRUE</name><op:operator pos:line="480" pos:column="27">)</op:operator> <op:operator pos:line="480" pos:column="29">&amp;&amp;</op:operator> <op:operator pos:line="480" pos:column="32">(</op:operator><name pos:line="480" pos:column="33">iItemOld</name> <op:operator pos:line="480" pos:column="42">!=</op:operator> <name pos:line="480" pos:column="45">_iItem</name><op:operator pos:line="480" pos:column="51">)</op:operator></expr>)</condition><then pos:line="480" pos:column="53">
	<block pos:line="481" pos:column="9">{
		<if pos:line="482" pos:column="17">if <condition pos:line="482" pos:column="20">(<expr><name pos:line="482" pos:column="21">_hTab</name> <op:operator pos:line="482" pos:column="27">==</op:operator> <name pos:line="482" pos:column="30">_hTabSource</name></expr>)</condition><then pos:line="482" pos:column="42">
		<block pos:line="483" pos:column="17">{
			<comment type="block" pos:line="484" pos:column="25">/* delete item if switching back to source tab */</comment>
			<decl_stmt><decl><type><name pos:line="485" pos:column="25">int</name></type> <name pos:line="485" pos:column="29">iSel</name> <init pos:line="485" pos:column="34">= <expr><call><name><op:operator pos:line="485" pos:column="36">::</op:operator><name pos:line="485" pos:column="38">SendMessage</name></name><argument_list pos:line="485" pos:column="49">(<argument><expr><name pos:line="485" pos:column="50">_hTab</name></expr></argument>, <argument><expr><name pos:line="485" pos:column="57">TCM_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="485" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="485" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><op:operator pos:line="486" pos:column="25">::</op:operator><name pos:line="486" pos:column="27">SendMessage</name></name><argument_list pos:line="486" pos:column="38">(<argument><expr><name pos:line="486" pos:column="39">_hTab</name></expr></argument>, <argument><expr><name pos:line="486" pos:column="46">TCM_DELETEITEM</name></expr></argument>, <argument><expr><name pos:line="486" pos:column="62">iSel</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="486" pos:column="68">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="488" pos:column="17">else <if pos:line="488" pos:column="22">if <condition pos:line="488" pos:column="25">(<expr><name pos:line="488" pos:column="26">_hTab</name> <op:operator pos:line="488" pos:column="32">==</op:operator> <name pos:line="488" pos:column="35">hTabOld</name></expr>)</condition><then pos:line="488" pos:column="43">
		<block pos:line="489" pos:column="17">{
			<comment type="block" pos:line="490" pos:column="25">/* delete item on switch between tabs */</comment>
			<expr_stmt><expr><call><name><op:operator pos:line="491" pos:column="25">::</op:operator><name pos:line="491" pos:column="27">SendMessage</name></name><argument_list pos:line="491" pos:column="38">(<argument><expr><name pos:line="491" pos:column="39">_hTab</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="46">TCM_DELETEITEM</name></expr></argument>, <argument><expr><name pos:line="491" pos:column="62">iItemOld</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="491" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></else></if>
	}</block></then>
	<else pos:line="494" pos:column="9">else <if pos:line="494" pos:column="14">if <condition pos:line="494" pos:column="17">(<expr><name pos:line="494" pos:column="18">inTab</name> <op:operator pos:line="494" pos:column="24">==</op:operator> <name pos:line="494" pos:column="27">FALSE</name></expr>)</condition><then pos:line="494" pos:column="33">
	<block pos:line="495" pos:column="9">{
		<if pos:line="496" pos:column="17">if <condition pos:line="496" pos:column="20">(<expr><name pos:line="496" pos:column="21">hTabOld</name> <op:operator pos:line="496" pos:column="29">!=</op:operator> <name pos:line="496" pos:column="32">_hTabSource</name></expr>)</condition><then pos:line="496" pos:column="44">
		<block pos:line="497" pos:column="17">{
			<expr_stmt><expr><call><name><op:operator pos:line="498" pos:column="25">::</op:operator><name pos:line="498" pos:column="27">SendMessage</name></name><argument_list pos:line="498" pos:column="38">(<argument><expr><name pos:line="498" pos:column="39">hTabOld</name></expr></argument>, <argument><expr><name pos:line="498" pos:column="48">TCM_DELETEITEM</name></expr></argument>, <argument><expr><name pos:line="498" pos:column="64">iItemOld</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="498" pos:column="74">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="500" pos:column="17">_iItem</name> <op:operator pos:line="500" pos:column="24">=</op:operator> <op:operator pos:line="500" pos:column="26">-</op:operator><lit:literal type="number" pos:line="500" pos:column="27">1</lit:literal></expr>;</expr_stmt>
	}</block></then></if></else></if>

	<comment type="block" pos:line="503" pos:column="9">/* insert new entry when mouse doesn't point to current hovered tab */</comment>
	<if pos:line="504" pos:column="9">if <condition pos:line="504" pos:column="12">(<expr><op:operator pos:line="504" pos:column="13">(</op:operator><name pos:line="504" pos:column="14">_hTab</name> <op:operator pos:line="504" pos:column="20">!=</op:operator> <name pos:line="504" pos:column="23">hTabOld</name><op:operator pos:line="504" pos:column="30">)</op:operator> <op:operator pos:line="504" pos:column="32">||</op:operator> <op:operator pos:line="504" pos:column="35">(</op:operator><name pos:line="504" pos:column="36">_iItem</name> <op:operator pos:line="504" pos:column="43">!=</op:operator> <name pos:line="504" pos:column="46">iItemOld</name><op:operator pos:line="504" pos:column="54">)</op:operator></expr>)</condition><then pos:line="504" pos:column="56">
	<block pos:line="505" pos:column="9">{
		<expr_stmt><expr><name><name pos:line="506" pos:column="17">_tcItem</name><op:operator pos:line="506" pos:column="24">.</op:operator><name pos:line="506" pos:column="25">mask</name></name>	<op:operator pos:line="506" pos:column="33">=</op:operator> <name pos:line="506" pos:column="35">TCIF_PARAM</name> <op:operator pos:line="506" pos:column="46">|</op:operator> <op:operator pos:line="506" pos:column="48">(</op:operator><name pos:line="506" pos:column="49">_hTab</name> <op:operator pos:line="506" pos:column="55">==</op:operator> <name pos:line="506" pos:column="58">_hTabSource</name> <op:operator pos:line="506" pos:column="70">?</op:operator> <name pos:line="506" pos:column="72">TCIF_TEXT</name> <op:operator pos:line="506" pos:column="82">:</op:operator> <lit:literal type="number" pos:line="506" pos:column="84">0</lit:literal><op:operator pos:line="506" pos:column="85">)</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="507" pos:column="17">::</op:operator><name pos:line="507" pos:column="19">SendMessage</name></name><argument_list pos:line="507" pos:column="30">(<argument><expr><name pos:line="507" pos:column="31">_hTab</name></expr></argument>, <argument><expr><name pos:line="507" pos:column="38">TCM_INSERTITEM</name></expr></argument>, <argument><expr><name pos:line="507" pos:column="54">_iItem</name></expr></argument>, <argument><expr><op:operator pos:line="507" pos:column="62">(</op:operator><name pos:line="507" pos:column="63">LPARAM</name><op:operator pos:line="507" pos:column="69">)</op:operator><op:operator pos:line="507" pos:column="70">&amp;</op:operator><name pos:line="507" pos:column="71">_tcItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="block" pos:line="510" pos:column="9">/* select the tab only in source tab window */</comment>
	<if pos:line="511" pos:column="9">if <condition pos:line="511" pos:column="12">(<expr><op:operator pos:line="511" pos:column="13">(</op:operator><name pos:line="511" pos:column="14">_hTab</name> <op:operator pos:line="511" pos:column="20">==</op:operator> <name pos:line="511" pos:column="23">_hTabSource</name><op:operator pos:line="511" pos:column="34">)</op:operator> <op:operator pos:line="511" pos:column="36">&amp;&amp;</op:operator> <op:operator pos:line="511" pos:column="39">(</op:operator><name pos:line="511" pos:column="40">_iItem</name> <op:operator pos:line="511" pos:column="47">!=</op:operator> <op:operator pos:line="511" pos:column="50">-</op:operator><lit:literal type="number" pos:line="511" pos:column="51">1</lit:literal><op:operator pos:line="511" pos:column="52">)</op:operator></expr>)</condition><then pos:line="511" pos:column="54">
	<block pos:line="512" pos:column="9">{
		<expr_stmt><expr><call><name><op:operator pos:line="513" pos:column="17">::</op:operator><name pos:line="513" pos:column="19">SendMessage</name></name><argument_list pos:line="513" pos:column="30">(<argument><expr><name pos:line="513" pos:column="31">_hTab</name></expr></argument>, <argument><expr><name pos:line="513" pos:column="38">TCM_SETCURSEL</name></expr></argument>, <argument><expr><name pos:line="513" pos:column="53">_iItem</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="513" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

<cpp:if pos:line="516" pos:column="1">#<cpp:directive pos:line="516" pos:column="2">if</cpp:directive> <expr><lit:literal type="number" pos:line="516" pos:column="5">0</lit:literal></expr></cpp:if>
	extern HWND g_hMainWnd;
	TCHAR str[128];
	wsprintf(str, TEXT("Size: %i"), vCont.size());
	::SetWindowText(g_hMainWnd, str);
<cpp:endif pos:line="521" pos:column="1">#<cpp:directive pos:line="521" pos:column="2">endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name><op:operator pos:line="523" pos:column="9">::</op:operator><name pos:line="523" pos:column="11">UpdateWindow</name></name><argument_list pos:line="523" pos:column="23">(<argument><expr><name pos:line="523" pos:column="24">_hParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="526" pos:column="1">// Changed behaviour (jg): Now this function handles erasing of drag-rectangles and drawing of</comment>
<comment type="line" pos:line="527" pos:column="1">// new ones within one drawing step to the desktop. This is against flickering, but also it is</comment>
<comment type="line" pos:line="528" pos:column="1">// necessary for the Vista Aero style - because in this case the control is given so much to</comment>
<comment type="line" pos:line="529" pos:column="1">// the graphics driver, that accesses (especially read accesses) to the desktop window become </comment>
<comment type="line" pos:line="530" pos:column="1">// too expensive to access it more than absolutely necessary. Besides, usage of the function </comment>
<comment type="line" pos:line="531" pos:column="1">// ::LockWindowUpdate() was added, because with often redrawn windows in the background we had </comment>
<comment type="line" pos:line="532" pos:column="1">// inconsistencies while erasing our drag-rectangle (because it could already have been erased </comment>
<comment type="line" pos:line="533" pos:column="1">// on some places).</comment>
<comment type="line" pos:line="534" pos:column="1">//</comment>
<comment type="line" pos:line="535" pos:column="1">// Parameter pPt==NULL says that only erasing is wanted and the drag-rectangle is no more needed, </comment>
<comment type="line" pos:line="536" pos:column="1">// thatswhy this also leads to a call of ::LockWindowUpdate(NULL) to enable drawing by others again.</comment>
<comment type="line" pos:line="537" pos:column="1">// The previously drawn rectangle is memoried within _rectPrev (and _bPtOldValid says if it already</comment>
<comment type="line" pos:line="538" pos:column="1">// is valid - did not change this members name because didn't want change too much at once).</comment>
<comment type="line" pos:line="539" pos:column="1">//</comment>
<comment type="line" pos:line="540" pos:column="1">// I was too lazy to always draw four rectangles for the four edges of the drag-rectangle - it seems</comment>
<comment type="line" pos:line="541" pos:column="1">// that drawing an outer rectangle first and then erasing the inner stuff by drawing a second,</comment>
<comment type="line" pos:line="542" pos:column="1">// smaller rectangle inside seems to be not slower - wich comes not unawaited, because it is mostly </comment>
<comment type="line" pos:line="543" pos:column="1">// hardware-driven and each single draw has its own fixed costs.</comment>
<comment type="line" pos:line="544" pos:column="1">// </comment>
<comment type="line" pos:line="545" pos:column="1">// For further solutions I think we should leave this classic way of dragging and better use </comment>
<comment type="line" pos:line="546" pos:column="1">// alpha-blending and always move the whole content of the toolbars - so we could leave the </comment>
<comment type="line" pos:line="547" pos:column="1">// ::LockWindowUpdate() behind us.</comment>
<comment type="line" pos:line="548" pos:column="1">//</comment>
<comment type="line" pos:line="549" pos:column="1">// Besides, while debugging into the dragging process please let the ::LockWindowUpdate() out,</comment>
<comment type="line" pos:line="550" pos:column="1">// by #undef the USE_LOCKWINDOWUPDATE in gripper.h, because it works for your debugging window </comment>
<comment type="line" pos:line="551" pos:column="1">// as well, of course. Or just try by this #define what difference it makes.</comment>
<comment type="line" pos:line="552" pos:column="1">//</comment>
<function><type><name pos:line="553" pos:column="1">void</name></type> <name><name pos:line="553" pos:column="6">Gripper</name><op:operator pos:line="553" pos:column="13">::</op:operator><name pos:line="553" pos:column="15">drawRectangle</name></name><parameter_list pos:line="553" pos:column="28">(<param><decl><type><specifier pos:line="553" pos:column="29">const</specifier> <name pos:line="553" pos:column="35">POINT</name><type:modifier pos:line="553" pos:column="40">*</type:modifier></type> <name pos:line="553" pos:column="42">pPt</name></decl></param>)</parameter_list>
<block pos:line="554" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="555" pos:column="9">HBRUSH</name></type> <name pos:line="555" pos:column="16">hbrushOrig</name><init pos:line="555" pos:column="26">= <expr><name pos:line="555" pos:column="28">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="556" pos:column="9">HBITMAP</name></type> <name pos:line="556" pos:column="17">hbmOrig</name>  <init pos:line="556" pos:column="26">= <expr><name pos:line="556" pos:column="28">NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="557" pos:column="9">RECT</name></type>   <name pos:line="557" pos:column="16">rc</name>	 <init pos:line="557" pos:column="26">= <expr><block pos:line="557" pos:column="28">{<expr><lit:literal type="number" pos:line="557" pos:column="29">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="558" pos:column="9">RECT</name></type>   <name pos:line="558" pos:column="16">rcNew</name>	 <init pos:line="558" pos:column="26">= <expr><block pos:line="558" pos:column="28">{<expr><lit:literal type="number" pos:line="558" pos:column="29">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="559" pos:column="9">RECT</name></type>   <name pos:line="559" pos:column="16">rcOld</name>	 <init pos:line="559" pos:column="26">= <expr><name pos:line="559" pos:column="28">_rcPrev</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="561" pos:column="9">// Get a screen device context with backstage redrawing disabled - to have a consistently</comment>
	<comment type="line" pos:line="562" pos:column="9">// and stable drawn rectangle while floating - keep in mind, that we must ensure, that</comment>
	<comment type="line" pos:line="563" pos:column="9">// finally ::LockWindowUpdate(NULL) will be called, to enable drawing for others again.</comment>
	<if pos:line="564" pos:column="9">if <condition pos:line="564" pos:column="12">(<expr><op:operator pos:line="564" pos:column="13">!</op:operator><name pos:line="564" pos:column="14">_hdc</name></expr>)</condition><then pos:line="564" pos:column="19">
	<block pos:line="565" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="566" pos:column="17">HWND</name></type> <name pos:line="566" pos:column="22">hWnd</name><init pos:line="566" pos:column="26">= <expr><call><name><op:operator pos:line="566" pos:column="28">::</op:operator><name pos:line="566" pos:column="30">GetDesktopWindow</name></name><argument_list pos:line="566" pos:column="46">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<cpp:if pos:line="567" pos:column="17">#<cpp:directive pos:line="567" pos:column="18">if</cpp:directive> <expr><call><name pos:line="567" pos:column="21">defined</name> <argument_list pos:line="567" pos:column="29">(<argument><expr><name pos:line="567" pos:column="30">USE_LOCKWINDOWUPDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><name pos:line="568" pos:column="17">_hdc</name><op:operator pos:line="568" pos:column="21">=</op:operator> <call><name><op:operator pos:line="568" pos:column="23">::</op:operator><name pos:line="568" pos:column="25">GetDCEx</name></name><argument_list pos:line="568" pos:column="32">(<argument><expr><name pos:line="568" pos:column="33">hWnd</name></expr></argument>, <argument><expr><name pos:line="568" pos:column="39">NULL</name></expr></argument>, <argument><expr><call><name><op:operator pos:line="568" pos:column="45">::</op:operator><name pos:line="568" pos:column="47">LockWindowUpdate</name></name><argument_list pos:line="568" pos:column="63">(<argument><expr><name pos:line="568" pos:column="64">hWnd</name></expr></argument>)</argument_list></call> <op:operator pos:line="568" pos:column="70">?</op:operator> <name pos:line="568" pos:column="72">DCX_WINDOW</name><op:operator pos:line="568" pos:column="82">|</op:operator><name pos:line="568" pos:column="83">DCX_CACHE</name><op:operator pos:line="568" pos:column="92">|</op:operator><name pos:line="568" pos:column="93">DCX_LOCKWINDOWUPDATE</name> <op:operator pos:line="568" pos:column="114">:</op:operator> <name pos:line="568" pos:column="116">DCX_WINDOW</name><op:operator pos:line="568" pos:column="126">|</op:operator><name pos:line="568" pos:column="127">DCX_CACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<cpp:else pos:line="569" pos:column="17">#<cpp:directive pos:line="569" pos:column="18">else</cpp:directive></cpp:else>
		<expr_stmt><expr><name pos:line="570" pos:column="17">_hdc</name><op:operator pos:line="570" pos:column="21">=</op:operator> <call><name><op:operator pos:line="570" pos:column="23">::</op:operator><name pos:line="570" pos:column="25">GetDCEx</name></name><argument_list pos:line="570" pos:column="32">(<argument><expr><name pos:line="570" pos:column="33">hWnd</name></expr></argument>, <argument><expr><name pos:line="570" pos:column="39">NULL</name></expr></argument>, <argument><expr><name pos:line="570" pos:column="45">DCX_WINDOW</name><op:operator pos:line="570" pos:column="55">|</op:operator><name pos:line="570" pos:column="56">DCX_CACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<cpp:endif pos:line="571" pos:column="17">#<cpp:directive pos:line="571" pos:column="18">endif</cpp:directive></cpp:endif>
	}</block></then></if>
	
	<comment type="line" pos:line="574" pos:column="9">// Create a brush with the appropriate bitmap pattern to draw our drag rectangle</comment>
	<if pos:line="575" pos:column="9">if <condition pos:line="575" pos:column="12">(<expr><op:operator pos:line="575" pos:column="13">!</op:operator><name pos:line="575" pos:column="14">_hbm</name></expr>)</condition><then pos:line="575" pos:column="19">
		<expr_stmt><expr><name pos:line="576" pos:column="17">_hbm</name> <op:operator pos:line="576" pos:column="22">=</op:operator> <call><name><op:operator pos:line="576" pos:column="24">::</op:operator><name pos:line="576" pos:column="26">CreateBitmap</name></name><argument_list pos:line="576" pos:column="38">(<argument><expr><lit:literal type="number" pos:line="576" pos:column="39">8</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="576" pos:column="42">8</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="576" pos:column="45">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="576" pos:column="48">1</lit:literal></expr></argument>, <argument><expr><name pos:line="576" pos:column="51">DotPattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="577" pos:column="9">if <condition pos:line="577" pos:column="12">(<expr><op:operator pos:line="577" pos:column="13">!</op:operator><name pos:line="577" pos:column="14">_hbrush</name></expr>)</condition><then pos:line="577" pos:column="22">
		<expr_stmt><expr><name pos:line="578" pos:column="17">_hbrush</name> <op:operator pos:line="578" pos:column="25">=</op:operator> <call><name><op:operator pos:line="578" pos:column="27">::</op:operator><name pos:line="578" pos:column="29">CreatePatternBrush</name></name><argument_list pos:line="578" pos:column="47">(<argument><expr><name pos:line="578" pos:column="48">_hbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<if pos:line="580" pos:column="9">if <condition pos:line="580" pos:column="12">(<expr><name pos:line="580" pos:column="13">pPt</name> <op:operator pos:line="580" pos:column="17">!=</op:operator> <name pos:line="580" pos:column="20">NULL</name></expr>)</condition><then pos:line="580" pos:column="25">
	<block pos:line="581" pos:column="9">{
		<comment type="line" pos:line="582" pos:column="17">// Determine whether to draw a solid drag rectangle or checkered</comment>
		<comment type="line" pos:line="583" pos:column="17">// ???(jg) solid or checked ??? - must have been an old comment, I didn't </comment>
		<comment type="line" pos:line="584" pos:column="17">// find here this difference, but at least it's a question of drag-rects size</comment>
		<comment type="line" pos:line="585" pos:column="17">//</comment>
		<expr_stmt><expr><call><name pos:line="586" pos:column="17">getMovingRect</name><argument_list pos:line="586" pos:column="30">(<argument><expr><op:operator pos:line="586" pos:column="31">*</op:operator><name pos:line="586" pos:column="32">pPt</name></expr></argument>, <argument><expr><op:operator pos:line="586" pos:column="37">&amp;</op:operator><name pos:line="586" pos:column="38">rcNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="587" pos:column="17">_rcPrev</name><op:operator pos:line="587" pos:column="24">=</op:operator> <name pos:line="587" pos:column="26">rcNew</name></expr>;</expr_stmt>		<comment type="line" pos:line="587" pos:column="41">// save the new drawn rcNew</comment>
	
		<comment type="line" pos:line="589" pos:column="17">// note that from here for handling purposes the right and bottom values of the rects</comment>
		<comment type="line" pos:line="590" pos:column="17">// contain width and height - its handsome, but i find it dangerous, but didn't want to</comment>
		<comment type="line" pos:line="591" pos:column="17">// change that already this time. </comment>

		<if pos:line="593" pos:column="17">if <condition pos:line="593" pos:column="20">(<expr><name pos:line="593" pos:column="21">_bPtOldValid</name></expr>)</condition><then pos:line="593" pos:column="34">
		<block pos:line="594" pos:column="17">{
			<comment type="line" pos:line="595" pos:column="25">// okay, there already a drag-rect has been drawn - and its position </comment>
			<comment type="line" pos:line="596" pos:column="25">// had been saved within the rectangle _rectPrev, wich already had been </comment>
			<comment type="line" pos:line="597" pos:column="25">// copied into rcOld in the beginning, and a new drag position</comment>
			<comment type="line" pos:line="598" pos:column="25">// is available, too.</comment>
			<comment type="line" pos:line="599" pos:column="25">// If now rcOld and rcNew are the same, just stop further handling to not</comment>
			<comment type="line" pos:line="600" pos:column="25">// draw the same drag-rectangle twice (this really happens, it should be </comment>
			<comment type="line" pos:line="601" pos:column="25">// better avoided anywhere earlier)</comment>
			<comment type="line" pos:line="602" pos:column="25">//</comment>
			<if pos:line="603" pos:column="25">if <condition pos:line="603" pos:column="28">(<expr><name><name pos:line="603" pos:column="29">rcOld</name><op:operator pos:line="603" pos:column="34">.</op:operator><name pos:line="603" pos:column="35">left</name></name><op:operator pos:line="603" pos:column="39">==</op:operator><name><name pos:line="603" pos:column="41">rcNew</name><op:operator pos:line="603" pos:column="46">.</op:operator><name pos:line="603" pos:column="47">left</name></name> <op:operator pos:line="603" pos:column="52">&amp;&amp;</op:operator> <name><name pos:line="603" pos:column="55">rcOld</name><op:operator pos:line="603" pos:column="60">.</op:operator><name pos:line="603" pos:column="61">right</name></name><op:operator pos:line="603" pos:column="66">==</op:operator><name><name pos:line="603" pos:column="68">rcNew</name><op:operator pos:line="603" pos:column="73">.</op:operator><name pos:line="603" pos:column="74">right</name></name> <op:operator pos:line="603" pos:column="80">&amp;&amp;</op:operator> <name><name pos:line="603" pos:column="83">rcOld</name><op:operator pos:line="603" pos:column="88">.</op:operator><name pos:line="603" pos:column="89">top</name></name><op:operator pos:line="603" pos:column="92">==</op:operator> <name><name pos:line="603" pos:column="95">rcNew</name><op:operator pos:line="603" pos:column="100">.</op:operator><name pos:line="603" pos:column="101">top</name></name> <op:operator pos:line="603" pos:column="105">&amp;&amp;</op:operator> <name><name pos:line="603" pos:column="108">rcOld</name><op:operator pos:line="603" pos:column="113">.</op:operator><name pos:line="603" pos:column="114">bottom</name></name><op:operator pos:line="603" pos:column="120">==</op:operator><name><name pos:line="603" pos:column="122">rcNew</name><op:operator pos:line="603" pos:column="127">.</op:operator><name pos:line="603" pos:column="128">bottom</name></name></expr>)</condition><then pos:line="603" pos:column="135">
				<return pos:line="604" pos:column="33">return;</return></then></if>

			<expr_stmt><expr><name><name pos:line="606" pos:column="25">rc</name><op:operator pos:line="606" pos:column="27">.</op:operator><name pos:line="606" pos:column="28">left</name></name>   <op:operator pos:line="606" pos:column="35">=</op:operator> <call><name pos:line="606" pos:column="37">min</name><argument_list pos:line="606" pos:column="40">(<argument><expr><name><name pos:line="606" pos:column="41">rcOld</name><op:operator pos:line="606" pos:column="46">.</op:operator><name pos:line="606" pos:column="47">left</name></name></expr></argument>, <argument><expr><name><name pos:line="606" pos:column="53">rcNew</name><op:operator pos:line="606" pos:column="58">.</op:operator><name pos:line="606" pos:column="59">left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="607" pos:column="25">rc</name><op:operator pos:line="607" pos:column="27">.</op:operator><name pos:line="607" pos:column="28">top</name></name>    <op:operator pos:line="607" pos:column="35">=</op:operator> <call><name pos:line="607" pos:column="37">min</name><argument_list pos:line="607" pos:column="40">(<argument><expr><name><name pos:line="607" pos:column="41">rcOld</name><op:operator pos:line="607" pos:column="46">.</op:operator><name pos:line="607" pos:column="47">top</name></name></expr></argument>,  <argument><expr><name><name pos:line="607" pos:column="53">rcNew</name><op:operator pos:line="607" pos:column="58">.</op:operator><name pos:line="607" pos:column="59">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="608" pos:column="25">rc</name><op:operator pos:line="608" pos:column="27">.</op:operator><name pos:line="608" pos:column="28">right</name></name>  <op:operator pos:line="608" pos:column="35">=</op:operator> <call><name pos:line="608" pos:column="37">max</name><argument_list pos:line="608" pos:column="40">(<argument><expr><name><name pos:line="608" pos:column="41">rcOld</name><op:operator pos:line="608" pos:column="46">.</op:operator><name pos:line="608" pos:column="47">left</name></name> <op:operator pos:line="608" pos:column="52">+</op:operator> <name><name pos:line="608" pos:column="54">rcOld</name><op:operator pos:line="608" pos:column="59">.</op:operator><name pos:line="608" pos:column="60">right</name></name></expr></argument>,  <argument><expr><name><name pos:line="608" pos:column="68">rcNew</name><op:operator pos:line="608" pos:column="73">.</op:operator><name pos:line="608" pos:column="74">left</name></name> <op:operator pos:line="608" pos:column="79">+</op:operator> <name><name pos:line="608" pos:column="81">rcNew</name><op:operator pos:line="608" pos:column="86">.</op:operator><name pos:line="608" pos:column="87">right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="609" pos:column="25">rc</name><op:operator pos:line="609" pos:column="27">.</op:operator><name pos:line="609" pos:column="28">bottom</name></name> <op:operator pos:line="609" pos:column="35">=</op:operator> <call><name pos:line="609" pos:column="37">max</name><argument_list pos:line="609" pos:column="40">(<argument><expr><name><name pos:line="609" pos:column="41">rcOld</name><op:operator pos:line="609" pos:column="46">.</op:operator><name pos:line="609" pos:column="47">top</name></name>  <op:operator pos:line="609" pos:column="52">+</op:operator> <name><name pos:line="609" pos:column="54">rcOld</name><op:operator pos:line="609" pos:column="59">.</op:operator><name pos:line="609" pos:column="60">bottom</name></name></expr></argument>, <argument><expr><name><name pos:line="609" pos:column="68">rcNew</name><op:operator pos:line="609" pos:column="73">.</op:operator><name pos:line="609" pos:column="74">top</name></name>  <op:operator pos:line="609" pos:column="79">+</op:operator> <name><name pos:line="609" pos:column="81">rcNew</name><op:operator pos:line="609" pos:column="86">.</op:operator><name pos:line="609" pos:column="87">bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="610" pos:column="25">rc</name><op:operator pos:line="610" pos:column="27">.</op:operator><name pos:line="610" pos:column="28">right</name></name> <op:operator pos:line="610" pos:column="34">-=</op:operator> <name><name pos:line="610" pos:column="37">rc</name><op:operator pos:line="610" pos:column="39">.</op:operator><name pos:line="610" pos:column="40">left</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="611" pos:column="25">rc</name><op:operator pos:line="611" pos:column="27">.</op:operator><name pos:line="611" pos:column="28">bottom</name></name><op:operator pos:line="611" pos:column="34">-=</op:operator> <name><name pos:line="611" pos:column="37">rc</name><op:operator pos:line="611" pos:column="39">.</op:operator><name pos:line="611" pos:column="40">top</name></name></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="613" pos:column="17">else	<expr_stmt><expr><name pos:line="613" pos:column="25">rc</name><op:operator pos:line="613" pos:column="27">=</op:operator> <name pos:line="613" pos:column="29">rcNew</name></expr>;</expr_stmt></else></if>	<comment type="line" pos:line="613" pos:column="41">// only new rect will be drawn</comment>
	}</block></then>
	<else pos:line="615" pos:column="9">else	<expr_stmt><expr><name pos:line="615" pos:column="17">rc</name><op:operator pos:line="615" pos:column="19">=</op:operator> <name pos:line="615" pos:column="21">rcOld</name></expr>;</expr_stmt></else></if>	<comment type="line" pos:line="615" pos:column="33">// only old rect will be drawn - to erase it</comment>

	<comment type="line" pos:line="617" pos:column="9">// now rc contains the rectangle wich encloses all needed, new and/or previous rectangle</comment>
	<comment type="line" pos:line="618" pos:column="9">// because in the following we drive within a memory device context wich is limited to rc,</comment>
	<comment type="line" pos:line="619" pos:column="9">// we have to localize rcNew and rcOld within rc...</comment>
	<comment type="line" pos:line="620" pos:column="9">//</comment>
	<expr_stmt><expr><name><name pos:line="621" pos:column="9">rcOld</name><op:operator pos:line="621" pos:column="14">.</op:operator><name pos:line="621" pos:column="15">left</name></name><op:operator pos:line="621" pos:column="19">=</op:operator> <name><name pos:line="621" pos:column="21">rcOld</name><op:operator pos:line="621" pos:column="26">.</op:operator><name pos:line="621" pos:column="27">left</name></name> <op:operator pos:line="621" pos:column="32">-</op:operator> <name><name pos:line="621" pos:column="34">rc</name><op:operator pos:line="621" pos:column="36">.</op:operator><name pos:line="621" pos:column="37">left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="622" pos:column="9">rcOld</name><op:operator pos:line="622" pos:column="14">.</op:operator><name pos:line="622" pos:column="15">top</name></name> <op:operator pos:line="622" pos:column="19">=</op:operator> <name><name pos:line="622" pos:column="21">rcOld</name><op:operator pos:line="622" pos:column="26">.</op:operator><name pos:line="622" pos:column="27">top</name></name>  <op:operator pos:line="622" pos:column="32">-</op:operator> <name><name pos:line="622" pos:column="34">rc</name><op:operator pos:line="622" pos:column="36">.</op:operator><name pos:line="622" pos:column="37">top</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="623" pos:column="9">rcNew</name><op:operator pos:line="623" pos:column="14">.</op:operator><name pos:line="623" pos:column="15">left</name></name><op:operator pos:line="623" pos:column="19">=</op:operator> <name><name pos:line="623" pos:column="21">rcNew</name><op:operator pos:line="623" pos:column="26">.</op:operator><name pos:line="623" pos:column="27">left</name></name> <op:operator pos:line="623" pos:column="32">-</op:operator> <name><name pos:line="623" pos:column="34">rc</name><op:operator pos:line="623" pos:column="36">.</op:operator><name pos:line="623" pos:column="37">left</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="624" pos:column="9">rcNew</name><op:operator pos:line="624" pos:column="14">.</op:operator><name pos:line="624" pos:column="15">top</name></name> <op:operator pos:line="624" pos:column="19">=</op:operator> <name><name pos:line="624" pos:column="21">rcNew</name><op:operator pos:line="624" pos:column="26">.</op:operator><name pos:line="624" pos:column="27">top</name></name>  <op:operator pos:line="624" pos:column="32">-</op:operator> <name><name pos:line="624" pos:column="34">rc</name><op:operator pos:line="624" pos:column="36">.</op:operator><name pos:line="624" pos:column="37">top</name></name></expr>;</expr_stmt> 

	<decl_stmt><decl><type><name pos:line="626" pos:column="9">HDC</name></type> <name pos:line="626" pos:column="13">hdcMem</name><init pos:line="626" pos:column="19">= <expr><call><name><op:operator pos:line="626" pos:column="21">::</op:operator><name pos:line="626" pos:column="23">CreateCompatibleDC</name></name><argument_list pos:line="626" pos:column="41">(<argument><expr><name pos:line="626" pos:column="42">_hdc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="627" pos:column="9">HBITMAP</name></type> <name pos:line="627" pos:column="17">hBm</name><init pos:line="627" pos:column="20">= <expr><call><name><op:operator pos:line="627" pos:column="22">::</op:operator><name pos:line="627" pos:column="24">CreateCompatibleBitmap</name></name><argument_list pos:line="627" pos:column="46">(<argument><expr><name pos:line="627" pos:column="47">_hdc</name></expr></argument>, <argument><expr><name><name pos:line="627" pos:column="53">rc</name><op:operator pos:line="627" pos:column="55">.</op:operator><name pos:line="627" pos:column="56">right</name></name></expr></argument>, <argument><expr><name><name pos:line="627" pos:column="63">rc</name><op:operator pos:line="627" pos:column="65">.</op:operator><name pos:line="627" pos:column="66">bottom</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="628" pos:column="9">hbrushOrig</name><op:operator pos:line="628" pos:column="19">=</op:operator> <op:operator pos:line="628" pos:column="21">(</op:operator><name pos:line="628" pos:column="22">HBRUSH</name><op:operator pos:line="628" pos:column="28">)</op:operator><call><name><op:operator pos:line="628" pos:column="29">::</op:operator><name pos:line="628" pos:column="31">SelectObject</name></name><argument_list pos:line="628" pos:column="43">(<argument><expr><name pos:line="628" pos:column="44">hdcMem</name></expr></argument>, <argument><expr><name pos:line="628" pos:column="52">hBm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="630" pos:column="9">::</op:operator><name pos:line="630" pos:column="11">SetBrushOrgEx</name></name><argument_list pos:line="630" pos:column="24">(<argument><expr><name pos:line="630" pos:column="25">hdcMem</name></expr></argument>, <argument><expr><name><name pos:line="630" pos:column="33">rc</name><op:operator pos:line="630" pos:column="35">.</op:operator><name pos:line="630" pos:column="36">left</name></name><op:operator pos:line="630" pos:column="40">%</op:operator><lit:literal type="number" pos:line="630" pos:column="41">8</lit:literal></expr></argument>, <argument><expr><name><name pos:line="630" pos:column="44">rc</name><op:operator pos:line="630" pos:column="46">.</op:operator><name pos:line="630" pos:column="47">top</name></name><op:operator pos:line="630" pos:column="50">%</op:operator><lit:literal type="number" pos:line="630" pos:column="51">8</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="630" pos:column="54">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><name pos:line="631" pos:column="9">hbmOrig</name><op:operator pos:line="631" pos:column="16">=</op:operator> <op:operator pos:line="631" pos:column="18">(</op:operator><name pos:line="631" pos:column="19">HBITMAP</name><op:operator pos:line="631" pos:column="26">)</op:operator><call><name><op:operator pos:line="631" pos:column="27">::</op:operator><name pos:line="631" pos:column="29">SelectObject</name></name><argument_list pos:line="631" pos:column="41">(<argument><expr><name pos:line="631" pos:column="42">hdcMem</name></expr></argument>, <argument><expr><name pos:line="631" pos:column="50">_hbrush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><op:operator pos:line="633" pos:column="9">::</op:operator><name pos:line="633" pos:column="11">BitBlt</name></name><argument_list pos:line="633" pos:column="17">(<argument><expr><name pos:line="633" pos:column="18">hdcMem</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="633" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="633" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="633" pos:column="32">rc</name><op:operator pos:line="633" pos:column="34">.</op:operator><name pos:line="633" pos:column="35">right</name></name></expr></argument>, <argument><expr><name><name pos:line="633" pos:column="42">rc</name><op:operator pos:line="633" pos:column="44">.</op:operator><name pos:line="633" pos:column="45">bottom</name></name></expr></argument>, <argument><expr><name pos:line="633" pos:column="53">_hdc</name></expr></argument>, <argument><expr><name><name pos:line="633" pos:column="59">rc</name><op:operator pos:line="633" pos:column="61">.</op:operator><name pos:line="633" pos:column="62">left</name></name></expr></argument>, <argument><expr><name><name pos:line="633" pos:column="68">rc</name><op:operator pos:line="633" pos:column="70">.</op:operator><name pos:line="633" pos:column="71">top</name></name></expr></argument>, <argument><expr><name pos:line="633" pos:column="76">SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="634" pos:column="9">if <condition pos:line="634" pos:column="12">(<expr><name pos:line="634" pos:column="13">_bPtOldValid</name></expr>)</condition><then pos:line="634" pos:column="26">
	<block pos:line="635" pos:column="9">{	<comment type="line" pos:line="635" pos:column="17">// erase the old drag-rectangle</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="636" pos:column="17">::</op:operator><name pos:line="636" pos:column="19">PatBlt</name></name><argument_list pos:line="636" pos:column="25">(<argument><expr><name pos:line="636" pos:column="26">hdcMem</name></expr></argument>, <argument><expr><name><name pos:line="636" pos:column="34">rcOld</name><op:operator pos:line="636" pos:column="39">.</op:operator><name pos:line="636" pos:column="40">left</name></name></expr></argument>  , <argument><expr><name><name pos:line="636" pos:column="48">rcOld</name><op:operator pos:line="636" pos:column="53">.</op:operator><name pos:line="636" pos:column="54">top</name></name></expr></argument>  , <argument><expr><name><name pos:line="636" pos:column="61">rcOld</name><op:operator pos:line="636" pos:column="66">.</op:operator><name pos:line="636" pos:column="67">right</name></name></expr></argument>  , <argument><expr><name><name pos:line="636" pos:column="76">rcOld</name><op:operator pos:line="636" pos:column="81">.</op:operator><name pos:line="636" pos:column="82">bottom</name></name></expr></argument>  , <argument><expr><name pos:line="636" pos:column="92">PATINVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="637" pos:column="17">::</op:operator><name pos:line="637" pos:column="19">PatBlt</name></name><argument_list pos:line="637" pos:column="25">(<argument><expr><name pos:line="637" pos:column="26">hdcMem</name></expr></argument>, <argument><expr><name><name pos:line="637" pos:column="34">rcOld</name><op:operator pos:line="637" pos:column="39">.</op:operator><name pos:line="637" pos:column="40">left</name></name><op:operator pos:line="637" pos:column="44">+</op:operator><lit:literal type="number" pos:line="637" pos:column="45">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="637" pos:column="48">rcOld</name><op:operator pos:line="637" pos:column="53">.</op:operator><name pos:line="637" pos:column="54">top</name></name><op:operator pos:line="637" pos:column="57">+</op:operator><lit:literal type="number" pos:line="637" pos:column="58">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="637" pos:column="61">rcOld</name><op:operator pos:line="637" pos:column="66">.</op:operator><name pos:line="637" pos:column="67">right</name></name><op:operator pos:line="637" pos:column="72">-</op:operator><lit:literal type="number" pos:line="637" pos:column="73">6</lit:literal></expr></argument>, <argument><expr><name><name pos:line="637" pos:column="76">rcOld</name><op:operator pos:line="637" pos:column="81">.</op:operator><name pos:line="637" pos:column="82">bottom</name></name><op:operator pos:line="637" pos:column="88">-</op:operator><lit:literal type="number" pos:line="637" pos:column="89">6</lit:literal></expr></argument>, <argument><expr><name pos:line="637" pos:column="92">PATINVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="639" pos:column="9">if <condition pos:line="639" pos:column="12">(<expr><name pos:line="639" pos:column="13">pPt</name> <op:operator pos:line="639" pos:column="17">!=</op:operator> <name pos:line="639" pos:column="20">NULL</name></expr>)</condition><then pos:line="639" pos:column="25">
	<block pos:line="640" pos:column="9">{	<comment type="line" pos:line="640" pos:column="17">// draw the new drag-rectangle</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="641" pos:column="17">::</op:operator><name pos:line="641" pos:column="19">PatBlt</name></name><argument_list pos:line="641" pos:column="25">(<argument><expr><name pos:line="641" pos:column="26">hdcMem</name></expr></argument>, <argument><expr><name><name pos:line="641" pos:column="34">rcNew</name><op:operator pos:line="641" pos:column="39">.</op:operator><name pos:line="641" pos:column="40">left</name></name></expr></argument>  , <argument><expr><name><name pos:line="641" pos:column="48">rcNew</name><op:operator pos:line="641" pos:column="53">.</op:operator><name pos:line="641" pos:column="54">top</name></name></expr></argument>  , <argument><expr><name><name pos:line="641" pos:column="61">rcNew</name><op:operator pos:line="641" pos:column="66">.</op:operator><name pos:line="641" pos:column="67">right</name></name></expr></argument>  , <argument><expr><name><name pos:line="641" pos:column="76">rcNew</name><op:operator pos:line="641" pos:column="81">.</op:operator><name pos:line="641" pos:column="82">bottom</name></name></expr></argument>  , <argument><expr><name pos:line="641" pos:column="92">PATINVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><op:operator pos:line="642" pos:column="17">::</op:operator><name pos:line="642" pos:column="19">PatBlt</name></name><argument_list pos:line="642" pos:column="25">(<argument><expr><name pos:line="642" pos:column="26">hdcMem</name></expr></argument>, <argument><expr><name><name pos:line="642" pos:column="34">rcNew</name><op:operator pos:line="642" pos:column="39">.</op:operator><name pos:line="642" pos:column="40">left</name></name><op:operator pos:line="642" pos:column="44">+</op:operator><lit:literal type="number" pos:line="642" pos:column="45">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="642" pos:column="48">rcNew</name><op:operator pos:line="642" pos:column="53">.</op:operator><name pos:line="642" pos:column="54">top</name></name><op:operator pos:line="642" pos:column="57">+</op:operator><lit:literal type="number" pos:line="642" pos:column="58">3</lit:literal></expr></argument>, <argument><expr><name><name pos:line="642" pos:column="61">rcNew</name><op:operator pos:line="642" pos:column="66">.</op:operator><name pos:line="642" pos:column="67">right</name></name><op:operator pos:line="642" pos:column="72">-</op:operator><lit:literal type="number" pos:line="642" pos:column="73">6</lit:literal></expr></argument>, <argument><expr><name><name pos:line="642" pos:column="76">rcNew</name><op:operator pos:line="642" pos:column="81">.</op:operator><name pos:line="642" pos:column="82">bottom</name></name><op:operator pos:line="642" pos:column="88">-</op:operator><lit:literal type="number" pos:line="642" pos:column="89">6</lit:literal></expr></argument>, <argument><expr><name pos:line="642" pos:column="92">PATINVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><op:operator pos:line="644" pos:column="9">::</op:operator><name pos:line="644" pos:column="11">BitBlt</name></name><argument_list pos:line="644" pos:column="17">(<argument><expr><name pos:line="644" pos:column="18">_hdc</name></expr></argument>, <argument><expr><name><name pos:line="644" pos:column="24">rc</name><op:operator pos:line="644" pos:column="26">.</op:operator><name pos:line="644" pos:column="27">left</name></name></expr></argument>, <argument><expr><name><name pos:line="644" pos:column="33">rc</name><op:operator pos:line="644" pos:column="35">.</op:operator><name pos:line="644" pos:column="36">top</name></name></expr></argument>, <argument><expr><name><name pos:line="644" pos:column="41">rc</name><op:operator pos:line="644" pos:column="43">.</op:operator><name pos:line="644" pos:column="44">right</name></name></expr></argument>, <argument><expr><name><name pos:line="644" pos:column="51">rc</name><op:operator pos:line="644" pos:column="53">.</op:operator><name pos:line="644" pos:column="54">bottom</name></name></expr></argument>, <argument><expr><name pos:line="644" pos:column="62">hdcMem</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="644" pos:column="70">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="644" pos:column="73">0</lit:literal></expr></argument>, <argument><expr><name pos:line="644" pos:column="76">SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	
	<expr_stmt><expr><call><name pos:line="646" pos:column="9">SelectObject</name><argument_list pos:line="646" pos:column="21">(<argument><expr><name pos:line="646" pos:column="22">hdcMem</name></expr></argument>, <argument><expr><name pos:line="646" pos:column="30">hbrushOrig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="647" pos:column="9">SelectObject</name><argument_list pos:line="647" pos:column="21">(<argument><expr><name pos:line="647" pos:column="22">hdcMem</name></expr></argument>, <argument><expr><name pos:line="647" pos:column="30">hbmOrig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="648" pos:column="9">DeleteObject</name><argument_list pos:line="648" pos:column="21">(<argument><expr><name pos:line="648" pos:column="22">hBm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="649" pos:column="9">DeleteDC</name><argument_list pos:line="649" pos:column="17">(<argument><expr><name pos:line="649" pos:column="18">hdcMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if pos:line="651" pos:column="9">if <condition pos:line="651" pos:column="12">(<expr><name pos:line="651" pos:column="13">pPt</name> <op:operator pos:line="651" pos:column="17">==</op:operator> <name pos:line="651" pos:column="20">NULL</name></expr>)</condition><then pos:line="651" pos:column="25">
	<block pos:line="652" pos:column="9">{
		<cpp:if pos:line="653" pos:column="17">#<cpp:directive pos:line="653" pos:column="18">if</cpp:directive> <expr><call><name pos:line="653" pos:column="21">defined</name><argument_list pos:line="653" pos:column="28">(<argument><expr><name pos:line="653" pos:column="29">USE_LOCKWINDOWUPDATE</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><call><name><op:operator pos:line="654" pos:column="17">::</op:operator><name pos:line="654" pos:column="19">LockWindowUpdate</name></name><argument_list pos:line="654" pos:column="35">(<argument><expr><name pos:line="654" pos:column="36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<cpp:endif pos:line="655" pos:column="17">#<cpp:directive pos:line="655" pos:column="18">endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name pos:line="656" pos:column="17">_bPtOldValid</name><op:operator pos:line="656" pos:column="29">=</op:operator> <name pos:line="656" pos:column="31">FALSE</name></expr>;</expr_stmt>
		<if pos:line="657" pos:column="17">if <condition pos:line="657" pos:column="20">(<expr><name pos:line="657" pos:column="21">_hdc</name></expr>)</condition><then pos:line="657" pos:column="26"> 
		<block pos:line="658" pos:column="17">{
			<expr_stmt><expr><call><name><op:operator pos:line="659" pos:column="25">::</op:operator><name pos:line="659" pos:column="27">ReleaseDC</name></name><argument_list pos:line="659" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="659" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><name pos:line="659" pos:column="40">_hdc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="660" pos:column="25">_hdc</name><op:operator pos:line="660" pos:column="29">=</op:operator> <name pos:line="660" pos:column="31">NULL</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then>
	<else pos:line="663" pos:column="9">else	<expr_stmt><expr><name pos:line="663" pos:column="17">_bPtOldValid</name><op:operator pos:line="663" pos:column="29">=</op:operator> <name pos:line="663" pos:column="31">TRUE</name></expr>;</expr_stmt></else></if>
}</block></function>


<function><type><name pos:line="667" pos:column="1">void</name></type> <name><name pos:line="667" pos:column="6">Gripper</name><op:operator pos:line="667" pos:column="13">::</op:operator><name pos:line="667" pos:column="15">getMousePoints</name></name><parameter_list pos:line="667" pos:column="29">(<param><decl><type><name pos:line="667" pos:column="30">POINT</name><type:modifier pos:line="667" pos:column="35">*</type:modifier></type> <name pos:line="667" pos:column="37">pt</name></decl></param>, <param><decl><type><name pos:line="667" pos:column="41">POINT</name><type:modifier pos:line="667" pos:column="46">*</type:modifier></type> <name pos:line="667" pos:column="48">ptPrev</name></decl></param>)</parameter_list>
<block pos:line="668" pos:column="1">{
	<expr_stmt><expr><op:operator pos:line="669" pos:column="9">*</op:operator><name pos:line="669" pos:column="10">ptPrev</name>	<op:operator pos:line="669" pos:column="17">=</op:operator> <name pos:line="669" pos:column="19">_ptOld</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="670" pos:column="9">_ptOld</name>	<op:operator pos:line="670" pos:column="17">=</op:operator> <op:operator pos:line="670" pos:column="19">*</op:operator><name pos:line="670" pos:column="20">pt</name></expr>;</expr_stmt>
}</block></function>


<function><type><name pos:line="674" pos:column="1">void</name></type> <name><name pos:line="674" pos:column="6">Gripper</name><op:operator pos:line="674" pos:column="13">::</op:operator><name pos:line="674" pos:column="15">getMovingRect</name></name><parameter_list pos:line="674" pos:column="28">(<param><decl><type><name pos:line="674" pos:column="29">POINT</name></type> <name pos:line="674" pos:column="35">pt</name></decl></param>, <param><decl><type><name pos:line="674" pos:column="39">RECT</name> <type:modifier pos:line="674" pos:column="44">*</type:modifier></type><name pos:line="674" pos:column="45">rc</name></decl></param>)</parameter_list>
<block pos:line="675" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="676" pos:column="9">RECT</name></type>			<name pos:line="676" pos:column="33">rcCorr</name>			<init pos:line="676" pos:column="57">= <expr><block pos:line="676" pos:column="59">{<expr><lit:literal type="number" pos:line="676" pos:column="60">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="677" pos:column="9">DockingCont</name><type:modifier pos:line="677" pos:column="20">*</type:modifier></type>	<name pos:line="677" pos:column="25">pContHit</name>		<init pos:line="677" pos:column="49">= <expr><name pos:line="677" pos:column="51">NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block" pos:line="679" pos:column="9">/* test if mouse hits a container */</comment>
	<expr_stmt><expr><name pos:line="680" pos:column="9">pContHit</name> <op:operator pos:line="680" pos:column="18">=</op:operator> <call><name pos:line="680" pos:column="20">contHitTest</name><argument_list pos:line="680" pos:column="31">(<argument><expr><name pos:line="680" pos:column="32">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="682" pos:column="9">if <condition pos:line="682" pos:column="12">(<expr><name pos:line="682" pos:column="13">pContHit</name> <op:operator pos:line="682" pos:column="22">!=</op:operator> <name pos:line="682" pos:column="25">NULL</name></expr>)</condition><then pos:line="682" pos:column="30">
	<block pos:line="683" pos:column="9">{
		<comment type="block" pos:line="684" pos:column="17">/* get rect of client */</comment>
		<expr_stmt><expr><call><name><op:operator pos:line="685" pos:column="17">::</op:operator><name pos:line="685" pos:column="19">GetWindowRect</name></name><argument_list pos:line="685" pos:column="32">(<argument><expr><call><name><name pos:line="685" pos:column="33">pContHit</name><op:operator pos:line="685" pos:column="41">-&gt;</op:operator><name pos:line="685" pos:column="43">getHSelf</name></name><argument_list pos:line="685" pos:column="51">()</argument_list></call></expr></argument>, <argument><expr><name pos:line="685" pos:column="55">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block" pos:line="687" pos:column="17">/* get rect for correction */</comment>
		<if pos:line="688" pos:column="17">if <condition pos:line="688" pos:column="20">(<expr><call><name><name pos:line="688" pos:column="21">_pCont</name><op:operator pos:line="688" pos:column="27">-&gt;</op:operator><name pos:line="688" pos:column="29">isFloating</name></name><argument_list pos:line="688" pos:column="39">()</argument_list></call> <op:operator pos:line="688" pos:column="42">==</op:operator> <name pos:line="688" pos:column="45">TRUE</name></expr>)</condition><then pos:line="688" pos:column="50">
			<expr_stmt><expr><name pos:line="689" pos:column="25">rcCorr</name> <op:operator pos:line="689" pos:column="32">=</op:operator> <call><name><name pos:line="689" pos:column="34">_pCont</name><op:operator pos:line="689" pos:column="40">-&gt;</op:operator><name pos:line="689" pos:column="42">getDataOfActiveTb</name></name><argument_list pos:line="689" pos:column="59">()</argument_list></call><op:operator pos:line="689" pos:column="61">-&gt;</op:operator><name pos:line="689" pos:column="63">rcFloat</name></expr>;</expr_stmt></then>
		<else pos:line="690" pos:column="17">else
			<expr_stmt><expr><call><name><name pos:line="691" pos:column="25">_pCont</name><op:operator pos:line="691" pos:column="31">-&gt;</op:operator><name pos:line="691" pos:column="33">getClientRect</name></name><argument_list pos:line="691" pos:column="46">(<argument><expr><name pos:line="691" pos:column="47">rcCorr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

		<expr_stmt><expr><call><name pos:line="693" pos:column="17">ShrinkRcToSize</name><argument_list pos:line="693" pos:column="31">(<argument><expr><name pos:line="693" pos:column="32">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="694" pos:column="17">ShrinkRcToSize</name><argument_list pos:line="694" pos:column="31">(<argument><expr><op:operator pos:line="694" pos:column="32">&amp;</op:operator><name pos:line="694" pos:column="33">rcCorr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block" pos:line="696" pos:column="17">/* correct rectangle position when mouse is not within */</comment>
		<expr_stmt><expr><call><name pos:line="697" pos:column="17">DoCalcGripperRect</name><argument_list pos:line="697" pos:column="34">(<argument><expr><name pos:line="697" pos:column="35">rc</name></expr></argument>, <argument><expr><name pos:line="697" pos:column="39">rcCorr</name></expr></argument>, <argument><expr><name pos:line="697" pos:column="47">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="699" pos:column="9">else
	<block pos:line="700" pos:column="9">{
		<comment type="block" pos:line="701" pos:column="17">/* test if mouse is within work area */</comment>
		<expr_stmt><expr><name pos:line="702" pos:column="17">pContHit</name> <op:operator pos:line="702" pos:column="26">=</op:operator> <call><name pos:line="702" pos:column="28">workHitTest</name><argument_list pos:line="702" pos:column="39">(<argument><expr><name pos:line="702" pos:column="40">pt</name></expr></argument>, <argument><expr><name pos:line="702" pos:column="44">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block" pos:line="704" pos:column="17">/* calcutlates the rect and its position */</comment>
		<if pos:line="705" pos:column="17">if <condition pos:line="705" pos:column="20">(<expr><name pos:line="705" pos:column="21">pContHit</name> <op:operator pos:line="705" pos:column="30">==</op:operator> <name pos:line="705" pos:column="33">NULL</name></expr>)</condition><then pos:line="705" pos:column="38">
		<block pos:line="706" pos:column="17">{
			<comment type="block" pos:line="707" pos:column="25">/* calcutlates the rect and draws it */</comment>
			<if pos:line="708" pos:column="25">if <condition pos:line="708" pos:column="28">(<expr><op:operator pos:line="708" pos:column="29">!</op:operator><call><name><name pos:line="708" pos:column="30">_pCont</name><op:operator pos:line="708" pos:column="36">-&gt;</op:operator><name pos:line="708" pos:column="38">isFloating</name></name><argument_list pos:line="708" pos:column="48">()</argument_list></call></expr>)</condition><then pos:line="708" pos:column="51">
				<expr_stmt><expr><op:operator pos:line="709" pos:column="33">*</op:operator><name pos:line="709" pos:column="34">rc</name> <op:operator pos:line="709" pos:column="37">=</op:operator> <call><name><name pos:line="709" pos:column="39">_pCont</name><op:operator pos:line="709" pos:column="45">-&gt;</op:operator><name pos:line="709" pos:column="47">getDataOfActiveTb</name></name><argument_list pos:line="709" pos:column="64">()</argument_list></call><op:operator pos:line="709" pos:column="66">-&gt;</op:operator><name pos:line="709" pos:column="68">rcFloat</name></expr>;</expr_stmt></then>
			<else pos:line="710" pos:column="25">else
				<expr_stmt><expr><call><name><name pos:line="711" pos:column="33">_pCont</name><op:operator pos:line="711" pos:column="39">-&gt;</op:operator><name pos:line="711" pos:column="41">getWindowRect</name></name><argument_list pos:line="711" pos:column="54">(<argument><expr><op:operator pos:line="711" pos:column="55">*</op:operator><name pos:line="711" pos:column="56">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><call><name><name pos:line="712" pos:column="25">_pCont</name><op:operator pos:line="712" pos:column="31">-&gt;</op:operator><name pos:line="712" pos:column="33">getClientRect</name></name><argument_list pos:line="712" pos:column="46">(<argument><expr><name pos:line="712" pos:column="47">rcCorr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name pos:line="714" pos:column="25">CalcRectToScreen</name><argument_list pos:line="714" pos:column="41">(<argument><expr><name><name pos:line="714" pos:column="42">_dockData</name><op:operator pos:line="714" pos:column="51">.</op:operator><name pos:line="714" pos:column="52">hWnd</name></name></expr></argument>, <argument><expr><name pos:line="714" pos:column="58">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="715" pos:column="25">CalcRectToScreen</name><argument_list pos:line="715" pos:column="41">(<argument><expr><name><name pos:line="715" pos:column="42">_dockData</name><op:operator pos:line="715" pos:column="51">.</op:operator><name pos:line="715" pos:column="52">hWnd</name></name></expr></argument>, <argument><expr><op:operator pos:line="715" pos:column="58">&amp;</op:operator><name pos:line="715" pos:column="59">rcCorr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name pos:line="717" pos:column="25">rc</name><op:operator pos:line="717" pos:column="27">-&gt;</op:operator><name pos:line="717" pos:column="29">left</name></name>    <op:operator pos:line="717" pos:column="37">=</op:operator> <name><name pos:line="717" pos:column="39">pt</name><op:operator pos:line="717" pos:column="41">.</op:operator><name pos:line="717" pos:column="42">x</name></name> <op:operator pos:line="717" pos:column="44">-</op:operator> <name><name pos:line="717" pos:column="46">_ptOffset</name><op:operator pos:line="717" pos:column="55">.</op:operator><name pos:line="717" pos:column="56">x</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="718" pos:column="25">rc</name><op:operator pos:line="718" pos:column="27">-&gt;</op:operator><name pos:line="718" pos:column="29">top</name></name>     <op:operator pos:line="718" pos:column="37">=</op:operator> <name><name pos:line="718" pos:column="39">pt</name><op:operator pos:line="718" pos:column="41">.</op:operator><name pos:line="718" pos:column="42">y</name></name> <op:operator pos:line="718" pos:column="44">-</op:operator> <name><name pos:line="718" pos:column="46">_ptOffset</name><op:operator pos:line="718" pos:column="55">.</op:operator><name pos:line="718" pos:column="56">y</name></name></expr>;</expr_stmt>

			<comment type="block" pos:line="720" pos:column="25">/* correct rectangle position when mouse is not within */</comment>
			<expr_stmt><expr><call><name pos:line="721" pos:column="25">DoCalcGripperRect</name><argument_list pos:line="721" pos:column="42">(<argument><expr><name pos:line="721" pos:column="43">rc</name></expr></argument>, <argument><expr><name pos:line="721" pos:column="47">rcCorr</name></expr></argument>, <argument><expr><name pos:line="721" pos:column="55">pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
}</block></function>


<function><type><name pos:line="727" pos:column="1">DockingCont</name><type:modifier pos:line="727" pos:column="12">*</type:modifier></type> <name><name pos:line="727" pos:column="14">Gripper</name><op:operator pos:line="727" pos:column="21">::</op:operator><name pos:line="727" pos:column="23">contHitTest</name></name><parameter_list pos:line="727" pos:column="34">(<param><decl><type><name pos:line="727" pos:column="35">POINT</name></type> <name pos:line="727" pos:column="41">pt</name></decl></param>)</parameter_list>
<block pos:line="728" pos:column="1">{
	<decl_stmt><decl><type><name><name pos:line="729" pos:column="9">vector</name><argument_list pos:line="729" pos:column="15">&lt;<argument><expr><name pos:line="729" pos:column="16">DockingCont</name><type:modifier pos:line="729" pos:column="27">*</type:modifier></expr></argument>&gt;</argument_list></name></type>	<name pos:line="729" pos:column="33">vCont</name>	<init pos:line="729" pos:column="41">= <expr><call><name><name pos:line="729" pos:column="43">_pDockMgr</name><op:operator pos:line="729" pos:column="52">-&gt;</op:operator><name pos:line="729" pos:column="54">getContainerInfo</name></name><argument_list pos:line="729" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="730" pos:column="9">HWND</name></type>					<name pos:line="730" pos:column="49">hWnd</name>	<init pos:line="730" pos:column="57">= <expr><call><name><op:operator pos:line="730" pos:column="59">::</op:operator><name pos:line="730" pos:column="61">WindowFromPoint</name></name><argument_list pos:line="730" pos:column="76">(<argument><expr><name pos:line="730" pos:column="77">pt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for pos:line="732" pos:column="9">for (<init><decl><type><name pos:line="732" pos:column="14">UINT</name></type> <name pos:line="732" pos:column="19">iCont</name> <init pos:line="732" pos:column="25">= <expr><lit:literal type="number" pos:line="732" pos:column="27">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="732" pos:column="30">iCont</name> <op:operator pos:line="732" pos:column="36">&lt;</op:operator> <call><name><name pos:line="732" pos:column="38">vCont</name><op:operator pos:line="732" pos:column="43">.</op:operator><name pos:line="732" pos:column="44">size</name></name><argument_list pos:line="732" pos:column="48">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="732" pos:column="52">iCont</name><op:operator pos:line="732" pos:column="57">++</op:operator></expr></incr>)
	<block pos:line="733" pos:column="9">{
		<comment type="block" pos:line="734" pos:column="17">/* test if within caption */</comment>
		<if pos:line="735" pos:column="17">if <condition pos:line="735" pos:column="20">(<expr><name pos:line="735" pos:column="21">hWnd</name> <op:operator pos:line="735" pos:column="26">==</op:operator> <name><name pos:line="735" pos:column="29">vCont</name><index pos:line="735" pos:column="34">[<expr><name pos:line="735" pos:column="35">iCont</name></expr>]</index></name><op:operator pos:line="735" pos:column="41">-&gt;</op:operator><call><name pos:line="735" pos:column="43">getCaptionWnd</name><argument_list pos:line="735" pos:column="56">()</argument_list></call></expr>)</condition><then pos:line="735" pos:column="59">
		<block pos:line="736" pos:column="17">{
			<if pos:line="737" pos:column="25">if <condition pos:line="737" pos:column="28">(<expr><name><name pos:line="737" pos:column="29">vCont</name><index pos:line="737" pos:column="34">[<expr><name pos:line="737" pos:column="35">iCont</name></expr>]</index></name><op:operator pos:line="737" pos:column="41">-&gt;</op:operator><call><name pos:line="737" pos:column="43">isFloating</name><argument_list pos:line="737" pos:column="53">()</argument_list></call></expr>)</condition><then pos:line="737" pos:column="56">
			<block pos:line="738" pos:column="25">{
				<decl_stmt><decl><type><name pos:line="739" pos:column="33">RECT</name></type>	<name pos:line="739" pos:column="41">rc</name>	<init pos:line="739" pos:column="49">= <expr><block pos:line="739" pos:column="51">{<expr><lit:literal type="number" pos:line="739" pos:column="52">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name pos:line="741" pos:column="33">vCont</name><index pos:line="741" pos:column="38">[<expr><name pos:line="741" pos:column="39">iCont</name></expr>]</index></name><op:operator pos:line="741" pos:column="45">-&gt;</op:operator><call><name pos:line="741" pos:column="47">getWindowRect</name><argument_list pos:line="741" pos:column="60">(<argument><expr><name pos:line="741" pos:column="61">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="742" pos:column="33">if <condition pos:line="742" pos:column="36">(<expr><op:operator pos:line="742" pos:column="37">(</op:operator><name><name pos:line="742" pos:column="38">rc</name><op:operator pos:line="742" pos:column="40">.</op:operator><name pos:line="742" pos:column="41">top</name></name> <op:operator pos:line="742" pos:column="45">&lt;</op:operator> <name><name pos:line="742" pos:column="47">pt</name><op:operator pos:line="742" pos:column="49">.</op:operator><name pos:line="742" pos:column="50">y</name></name><op:operator pos:line="742" pos:column="51">)</op:operator> <op:operator pos:line="742" pos:column="53">&amp;&amp;</op:operator> <op:operator pos:line="742" pos:column="56">(</op:operator><name><name pos:line="742" pos:column="57">pt</name><op:operator pos:line="742" pos:column="59">.</op:operator><name pos:line="742" pos:column="60">y</name></name> <op:operator pos:line="742" pos:column="62">&lt;</op:operator> <op:operator pos:line="742" pos:column="64">(</op:operator><name><name pos:line="742" pos:column="65">rc</name><op:operator pos:line="742" pos:column="67">.</op:operator><name pos:line="742" pos:column="68">top</name></name> <op:operator pos:line="742" pos:column="72">+</op:operator> <lit:literal type="number" pos:line="742" pos:column="74">24</lit:literal><op:operator pos:line="742" pos:column="76">)</op:operator><op:operator pos:line="742" pos:column="77">)</op:operator></expr>)</condition><then pos:line="742" pos:column="79">
				<block pos:line="743" pos:column="33">{
					<comment type="block" pos:line="744" pos:column="41">/* when it is the same container start moving immediately */</comment>
					<if pos:line="745" pos:column="41">if <condition pos:line="745" pos:column="44">(<expr><name><name pos:line="745" pos:column="45">vCont</name><index pos:line="745" pos:column="50">[<expr><name pos:line="745" pos:column="51">iCont</name></expr>]</index></name> <op:operator pos:line="745" pos:column="58">==</op:operator> <name pos:line="745" pos:column="61">_pCont</name></expr>)</condition><then pos:line="745" pos:column="68">
					<block pos:line="746" pos:column="41">{
						<return pos:line="747" pos:column="49">return <expr><name pos:line="747" pos:column="56">NULL</name></expr>;</return>
					}</block></then>
					<else pos:line="749" pos:column="41">else
					<block pos:line="750" pos:column="41">{
						<return pos:line="751" pos:column="49">return <expr><name><name pos:line="751" pos:column="56">vCont</name><index pos:line="751" pos:column="61">[<expr><name pos:line="751" pos:column="62">iCont</name></expr>]</index></name></expr>;</return>
					}</block></else></if>
				}</block></then></if>
			}</block></then>
			<else pos:line="755" pos:column="25">else
			<block pos:line="756" pos:column="25">{
				<return pos:line="757" pos:column="33">return <expr><name><name pos:line="757" pos:column="40">vCont</name><index pos:line="757" pos:column="45">[<expr><name pos:line="757" pos:column="46">iCont</name></expr>]</index></name></expr>;</return>
			}</block></else></if>
		}</block></then></if>

		<comment type="block" pos:line="761" pos:column="17">/* test only tabs that are visible */</comment>
		<if pos:line="762" pos:column="17">if <condition pos:line="762" pos:column="20">(<expr><call><name><op:operator pos:line="762" pos:column="21">::</op:operator><name pos:line="762" pos:column="23">IsWindowVisible</name></name><argument_list pos:line="762" pos:column="38">(<argument><expr><name><name pos:line="762" pos:column="39">vCont</name><index pos:line="762" pos:column="44">[<expr><name pos:line="762" pos:column="45">iCont</name></expr>]</index></name><op:operator pos:line="762" pos:column="51">-&gt;</op:operator><call><name pos:line="762" pos:column="53">getTabWnd</name><argument_list pos:line="762" pos:column="62">()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="762" pos:column="66">
		<block pos:line="763" pos:column="17">{
			<comment type="block" pos:line="764" pos:column="25">/* test if within tab (rect test is used, because of drag and drop behaviour) */</comment>
			<decl_stmt><decl><type><name pos:line="765" pos:column="25">RECT</name></type>		<name pos:line="765" pos:column="41">rc</name>	<init pos:line="765" pos:column="49">= <expr><block pos:line="765" pos:column="51">{<expr><lit:literal type="number" pos:line="765" pos:column="52">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><op:operator pos:line="767" pos:column="25">::</op:operator><name pos:line="767" pos:column="27">GetWindowRect</name></name><argument_list pos:line="767" pos:column="40">(<argument><expr><name><name pos:line="767" pos:column="41">vCont</name><index pos:line="767" pos:column="46">[<expr><name pos:line="767" pos:column="47">iCont</name></expr>]</index></name><op:operator pos:line="767" pos:column="53">-&gt;</op:operator><call><name pos:line="767" pos:column="55">getTabWnd</name><argument_list pos:line="767" pos:column="64">()</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="767" pos:column="68">&amp;</op:operator><name pos:line="767" pos:column="69">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="768" pos:column="25">if <condition pos:line="768" pos:column="28">(<expr><call><name><op:operator pos:line="768" pos:column="29">::</op:operator><name pos:line="768" pos:column="31">PtInRect</name></name><argument_list pos:line="768" pos:column="39">(<argument><expr><op:operator pos:line="768" pos:column="40">&amp;</op:operator><name pos:line="768" pos:column="41">rc</name></expr></argument>, <argument><expr><name pos:line="768" pos:column="45">pt</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="768" pos:column="49">
			<block pos:line="769" pos:column="25">{
				<return pos:line="770" pos:column="33">return <expr><name><name pos:line="770" pos:column="40">vCont</name><index pos:line="770" pos:column="45">[<expr><name pos:line="770" pos:column="46">iCont</name></expr>]</index></name></expr>;</return>
			}</block></then></if>
		}</block></then></if>
	}</block></for>

	<comment type="block" pos:line="775" pos:column="9">/* doesn't hit a container */</comment>
	<return pos:line="776" pos:column="9">return <expr><name pos:line="776" pos:column="16">NULL</name></expr>;</return>
}</block></function>


<function><type><name pos:line="780" pos:column="1">DockingCont</name><type:modifier pos:line="780" pos:column="12">*</type:modifier></type> <name><name pos:line="780" pos:column="14">Gripper</name><op:operator pos:line="780" pos:column="21">::</op:operator><name pos:line="780" pos:column="23">workHitTest</name></name><parameter_list pos:line="780" pos:column="34">(<param><decl><type><name pos:line="780" pos:column="35">POINT</name></type> <name pos:line="780" pos:column="41">pt</name></decl></param>, <param><decl><type><name pos:line="780" pos:column="45">RECT</name> <type:modifier pos:line="780" pos:column="50">*</type:modifier></type><name pos:line="780" pos:column="51">rc</name></decl></param>)</parameter_list>
<block pos:line="781" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="782" pos:column="9">RECT</name></type>					<name pos:line="782" pos:column="49">rcCont</name>	<init pos:line="782" pos:column="57">= <expr><block pos:line="782" pos:column="59">{<expr><lit:literal type="number" pos:line="782" pos:column="60">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name pos:line="783" pos:column="9">vector</name><argument_list pos:line="783" pos:column="15">&lt;<argument><expr><name pos:line="783" pos:column="16">DockingCont</name><type:modifier pos:line="783" pos:column="27">*</type:modifier></expr></argument>&gt;</argument_list></name></type>	<name pos:line="783" pos:column="33">vCont</name>	<init pos:line="783" pos:column="41">= <expr><call><name><name pos:line="783" pos:column="43">_pDockMgr</name><op:operator pos:line="783" pos:column="52">-&gt;</op:operator><name pos:line="783" pos:column="54">getContainerInfo</name></name><argument_list pos:line="783" pos:column="70">()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block" pos:line="785" pos:column="9">/* at first test if cursor points into a visible container */</comment>
	<for pos:line="786" pos:column="9">for (<init><decl><type><name pos:line="786" pos:column="14">size_t</name></type> <name pos:line="786" pos:column="21">iCont</name> <init pos:line="786" pos:column="27">= <expr><lit:literal type="number" pos:line="786" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="786" pos:column="32">iCont</name> <op:operator pos:line="786" pos:column="38">&lt;</op:operator> <call><name><name pos:line="786" pos:column="40">vCont</name><op:operator pos:line="786" pos:column="45">.</op:operator><name pos:line="786" pos:column="46">size</name></name><argument_list pos:line="786" pos:column="50">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="786" pos:column="54">iCont</name><op:operator pos:line="786" pos:column="59">++</op:operator></expr></incr>)
	<block pos:line="787" pos:column="9">{
		<if pos:line="788" pos:column="17">if <condition pos:line="788" pos:column="20">(<expr><name><name pos:line="788" pos:column="21">vCont</name><index pos:line="788" pos:column="26">[<expr><name pos:line="788" pos:column="27">iCont</name></expr>]</index></name><op:operator pos:line="788" pos:column="33">-&gt;</op:operator><call><name pos:line="788" pos:column="35">isVisible</name><argument_list pos:line="788" pos:column="44">()</argument_list></call></expr>)</condition><then pos:line="788" pos:column="47">
		<block pos:line="789" pos:column="17">{
			<expr_stmt><expr><name><name pos:line="790" pos:column="25">vCont</name><index pos:line="790" pos:column="30">[<expr><name pos:line="790" pos:column="31">iCont</name></expr>]</index></name><op:operator pos:line="790" pos:column="37">-&gt;</op:operator><call><name pos:line="790" pos:column="39">getWindowRect</name><argument_list pos:line="790" pos:column="52">(<argument><expr><name pos:line="790" pos:column="53">rcCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="792" pos:column="25">if <condition pos:line="792" pos:column="28">(<expr><call><name><op:operator pos:line="792" pos:column="29">::</op:operator><name pos:line="792" pos:column="31">PtInRect</name></name><argument_list pos:line="792" pos:column="39">(<argument><expr><op:operator pos:line="792" pos:column="40">&amp;</op:operator><name pos:line="792" pos:column="41">rcCont</name></expr></argument>, <argument><expr><name pos:line="792" pos:column="49">pt</name></expr></argument>)</argument_list></call> <op:operator pos:line="792" pos:column="53">==</op:operator> <name pos:line="792" pos:column="56">TRUE</name></expr>)</condition><then pos:line="792" pos:column="61">
			<block pos:line="793" pos:column="25">{
				<comment type="block" pos:line="794" pos:column="33">/* when it does, return with non found docking area */</comment>
				<return pos:line="795" pos:column="33">return <expr><name pos:line="795" pos:column="40">NULL</name></expr>;</return>
			}</block></then></if>
		}</block></then></if>
	}</block></for>

	<comment type="block" pos:line="800" pos:column="9">/* now search if cusor hits a possible docking area */</comment>
	<for pos:line="801" pos:column="9">for (<init><decl><type><name pos:line="801" pos:column="14">int</name></type> <name pos:line="801" pos:column="18">iWork</name> <init pos:line="801" pos:column="24">= <expr><lit:literal type="number" pos:line="801" pos:column="26">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="801" pos:column="29">iWork</name> <op:operator pos:line="801" pos:column="35">&lt;</op:operator> <name pos:line="801" pos:column="37">DOCKCONT_MAX</name></expr>;</condition> <incr><expr><name pos:line="801" pos:column="51">iWork</name><op:operator pos:line="801" pos:column="56">++</op:operator></expr></incr>)
	<block pos:line="802" pos:column="9">{
		<if pos:line="803" pos:column="17">if <condition pos:line="803" pos:column="20">(<expr><op:operator pos:line="803" pos:column="21">!</op:operator><name><name pos:line="803" pos:column="22">vCont</name><index pos:line="803" pos:column="27">[<expr><name pos:line="803" pos:column="28">iWork</name></expr>]</index></name><op:operator pos:line="803" pos:column="34">-&gt;</op:operator><call><name pos:line="803" pos:column="36">isVisible</name><argument_list pos:line="803" pos:column="45">()</argument_list></call></expr>)</condition><then pos:line="803" pos:column="48">
		<block pos:line="804" pos:column="17">{
			<expr_stmt><expr><name pos:line="805" pos:column="25">rcCont</name> <op:operator pos:line="805" pos:column="32">=</op:operator> <name><name pos:line="805" pos:column="34">_dockData</name><op:operator pos:line="805" pos:column="43">.</op:operator><name pos:line="805" pos:column="44">rcRegion</name><index pos:line="805" pos:column="52">[<expr><name pos:line="805" pos:column="53">iWork</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="806" pos:column="25">rcCont</name><op:operator pos:line="806" pos:column="31">.</op:operator><name pos:line="806" pos:column="32">right</name></name>  <op:operator pos:line="806" pos:column="39">+=</op:operator> <name><name pos:line="806" pos:column="42">rcCont</name><op:operator pos:line="806" pos:column="48">.</op:operator><name pos:line="806" pos:column="49">left</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="807" pos:column="25">rcCont</name><op:operator pos:line="807" pos:column="31">.</op:operator><name pos:line="807" pos:column="32">bottom</name></name> <op:operator pos:line="807" pos:column="39">+=</op:operator> <name><name pos:line="807" pos:column="42">rcCont</name><op:operator pos:line="807" pos:column="48">.</op:operator><name pos:line="807" pos:column="49">top</name></name></expr>;</expr_stmt>

			<if pos:line="809" pos:column="25">if <condition pos:line="809" pos:column="28">(<expr><name pos:line="809" pos:column="29">rc</name> <op:operator pos:line="809" pos:column="32">!=</op:operator> <name pos:line="809" pos:column="35">NULL</name></expr>)</condition><then pos:line="809" pos:column="40">
			<block pos:line="810" pos:column="25">{
				<expr_stmt><expr><op:operator pos:line="811" pos:column="33">*</op:operator><name pos:line="811" pos:column="34">rc</name> <op:operator pos:line="811" pos:column="37">=</op:operator> <name pos:line="811" pos:column="39">rcCont</name></expr>;</expr_stmt>
			}</block></then></if>

			<comment type="block" pos:line="814" pos:column="25">/* set fix hit test with */</comment>
			<switch pos:line="815" pos:column="25">switch<condition pos:line="815" pos:column="31">(<expr><name pos:line="815" pos:column="32">iWork</name></expr>)</condition>
			<block pos:line="816" pos:column="25">{
				<case pos:line="817" pos:column="33">case <expr><name pos:line="817" pos:column="38">CONT_LEFT</name></expr>:
					<expr_stmt><expr><name><name pos:line="818" pos:column="41">rcCont</name><op:operator pos:line="818" pos:column="47">.</op:operator><name pos:line="818" pos:column="48">right</name></name>   <op:operator pos:line="818" pos:column="56">=</op:operator> <name><name pos:line="818" pos:column="58">rcCont</name><op:operator pos:line="818" pos:column="64">.</op:operator><name pos:line="818" pos:column="65">left</name></name> <op:operator pos:line="818" pos:column="70">+</op:operator> <name pos:line="818" pos:column="72">HIT_TEST_THICKNESS</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="819" pos:column="41">rcCont</name><op:operator pos:line="819" pos:column="47">.</op:operator><name pos:line="819" pos:column="48">left</name></name>   <op:operator pos:line="819" pos:column="55">-=</op:operator> <name pos:line="819" pos:column="58">HIT_TEST_THICKNESS</name></expr>;</expr_stmt>
					<break pos:line="820" pos:column="41">break;</break>
				</case><case pos:line="821" pos:column="33">case <expr><name pos:line="821" pos:column="38">CONT_RIGHT</name></expr>:
					<expr_stmt><expr><name><name pos:line="822" pos:column="41">rcCont</name><op:operator pos:line="822" pos:column="47">.</op:operator><name pos:line="822" pos:column="48">left</name></name>    <op:operator pos:line="822" pos:column="56">=</op:operator> <name><name pos:line="822" pos:column="58">rcCont</name><op:operator pos:line="822" pos:column="64">.</op:operator><name pos:line="822" pos:column="65">right</name></name> <op:operator pos:line="822" pos:column="71">-</op:operator> <name pos:line="822" pos:column="73">HIT_TEST_THICKNESS</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="823" pos:column="41">rcCont</name><op:operator pos:line="823" pos:column="47">.</op:operator><name pos:line="823" pos:column="48">right</name></name>  <op:operator pos:line="823" pos:column="55">+=</op:operator> <name pos:line="823" pos:column="58">HIT_TEST_THICKNESS</name></expr>;</expr_stmt>
					<break pos:line="824" pos:column="41">break;</break>
				</case><case pos:line="825" pos:column="33">case <expr><name pos:line="825" pos:column="38">CONT_TOP</name></expr>:
					<expr_stmt><expr><name><name pos:line="826" pos:column="41">rcCont</name><op:operator pos:line="826" pos:column="47">.</op:operator><name pos:line="826" pos:column="48">bottom</name></name>  <op:operator pos:line="826" pos:column="56">=</op:operator> <name><name pos:line="826" pos:column="58">rcCont</name><op:operator pos:line="826" pos:column="64">.</op:operator><name pos:line="826" pos:column="65">top</name></name> <op:operator pos:line="826" pos:column="69">+</op:operator> <name pos:line="826" pos:column="71">HIT_TEST_THICKNESS</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="827" pos:column="41">rcCont</name><op:operator pos:line="827" pos:column="47">.</op:operator><name pos:line="827" pos:column="48">top</name></name>    <op:operator pos:line="827" pos:column="55">-=</op:operator> <name pos:line="827" pos:column="58">HIT_TEST_THICKNESS</name></expr>;</expr_stmt>
					<break pos:line="828" pos:column="41">break;</break>
				</case><case pos:line="829" pos:column="33">case <expr><name pos:line="829" pos:column="38">CONT_BOTTOM</name></expr>:
					<expr_stmt><expr><name><name pos:line="830" pos:column="41">rcCont</name><op:operator pos:line="830" pos:column="47">.</op:operator><name pos:line="830" pos:column="48">top</name></name>     <op:operator pos:line="830" pos:column="56">=</op:operator> <name><name pos:line="830" pos:column="58">rcCont</name><op:operator pos:line="830" pos:column="64">.</op:operator><name pos:line="830" pos:column="65">bottom</name></name> <op:operator pos:line="830" pos:column="72">-</op:operator> <name pos:line="830" pos:column="74">HIT_TEST_THICKNESS</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="831" pos:column="41">rcCont</name><op:operator pos:line="831" pos:column="47">.</op:operator><name pos:line="831" pos:column="48">bottom</name></name> <op:operator pos:line="831" pos:column="55">+=</op:operator> <name pos:line="831" pos:column="58">HIT_TEST_THICKNESS</name></expr>;</expr_stmt>
					<break pos:line="832" pos:column="41">break;</break>
				</case><default pos:line="833" pos:column="33">default:
					<break pos:line="834" pos:column="41">break;</break>
			</default>}</block></switch>
			<expr_stmt><expr><call><name pos:line="836" pos:column="25">ClientRectToScreenRect</name><argument_list pos:line="836" pos:column="47">(<argument><expr><name><name pos:line="836" pos:column="48">_dockData</name><op:operator pos:line="836" pos:column="57">.</op:operator><name pos:line="836" pos:column="58">hWnd</name></name></expr></argument>, <argument><expr><op:operator pos:line="836" pos:column="64">&amp;</op:operator><name pos:line="836" pos:column="65">rcCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="838" pos:column="25">if <condition pos:line="838" pos:column="28">(<expr><call><name><op:operator pos:line="838" pos:column="29">::</op:operator><name pos:line="838" pos:column="31">PtInRect</name></name><argument_list pos:line="838" pos:column="39">(<argument><expr><op:operator pos:line="838" pos:column="40">&amp;</op:operator><name pos:line="838" pos:column="41">rcCont</name></expr></argument>, <argument><expr><name pos:line="838" pos:column="49">pt</name></expr></argument>)</argument_list></call> <op:operator pos:line="838" pos:column="53">==</op:operator> <name pos:line="838" pos:column="56">TRUE</name></expr>)</condition><then pos:line="838" pos:column="61">
			<block pos:line="839" pos:column="25">{
				<if pos:line="840" pos:column="33">if <condition pos:line="840" pos:column="36">(<expr><name pos:line="840" pos:column="37">rc</name> <op:operator pos:line="840" pos:column="40">!=</op:operator> <name pos:line="840" pos:column="43">NULL</name></expr>)</condition><then pos:line="840" pos:column="48">
				<block pos:line="841" pos:column="33">{
					<expr_stmt><expr><call><name pos:line="842" pos:column="41">ClientRectToScreenRect</name><argument_list pos:line="842" pos:column="63">(<argument><expr><name><name pos:line="842" pos:column="64">_dockData</name><op:operator pos:line="842" pos:column="73">.</op:operator><name pos:line="842" pos:column="74">hWnd</name></name></expr></argument>, <argument><expr><name pos:line="842" pos:column="80">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="843" pos:column="41">rc</name><op:operator pos:line="843" pos:column="43">-&gt;</op:operator><name pos:line="843" pos:column="45">right</name></name>  <op:operator pos:line="843" pos:column="52">-=</op:operator> <name><name pos:line="843" pos:column="55">rc</name><op:operator pos:line="843" pos:column="57">-&gt;</op:operator><name pos:line="843" pos:column="59">left</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="844" pos:column="41">rc</name><op:operator pos:line="844" pos:column="43">-&gt;</op:operator><name pos:line="844" pos:column="45">bottom</name></name> <op:operator pos:line="844" pos:column="52">-=</op:operator> <name><name pos:line="844" pos:column="55">rc</name><op:operator pos:line="844" pos:column="57">-&gt;</op:operator><name pos:line="844" pos:column="59">top</name></name></expr>;</expr_stmt>
				}</block></then></if>
				<return pos:line="846" pos:column="33">return <expr><name><name pos:line="846" pos:column="40">vCont</name><index pos:line="846" pos:column="45">[<expr><name pos:line="846" pos:column="46">iWork</name></expr>]</index></name></expr>;</return>
			}</block></then></if>
		}</block></then></if>
	}</block></for>

	<comment type="block" pos:line="851" pos:column="9">/* no docking area found */</comment>
	<return pos:line="852" pos:column="9">return <expr><name pos:line="852" pos:column="16">NULL</name></expr>;</return>
}</block></function>


<function><type><name pos:line="856" pos:column="1">void</name></type> <name><name pos:line="856" pos:column="6">Gripper</name><op:operator pos:line="856" pos:column="13">::</op:operator><name pos:line="856" pos:column="15">initTabInformation</name></name><parameter_list pos:line="856" pos:column="33">()</parameter_list>
<block pos:line="857" pos:column="1">{
	<comment type="block" pos:line="858" pos:column="9">/* for tab reordering */</comment>

	<comment type="block" pos:line="860" pos:column="9">/* remember handle */</comment>
	<expr_stmt><expr><name pos:line="861" pos:column="9">_hTabSource</name> <op:operator pos:line="861" pos:column="21">=</op:operator> <call><name><name pos:line="861" pos:column="23">_pCont</name><op:operator pos:line="861" pos:column="29">-&gt;</op:operator><name pos:line="861" pos:column="31">getTabWnd</name></name><argument_list pos:line="861" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="862" pos:column="9">_startMovingFromTab</name>	<op:operator pos:line="862" pos:column="33">=</op:operator> <call><name><name pos:line="862" pos:column="35">_pCont</name><op:operator pos:line="862" pos:column="41">-&gt;</op:operator><name pos:line="862" pos:column="43">startMovingFromTab</name></name><argument_list pos:line="862" pos:column="61">()</argument_list></call></expr>;</expr_stmt>
	<if pos:line="863" pos:column="9">if <condition pos:line="863" pos:column="12">(<expr><op:operator pos:line="863" pos:column="13">(</op:operator><name pos:line="863" pos:column="14">_startMovingFromTab</name> <op:operator pos:line="863" pos:column="34">==</op:operator> <name pos:line="863" pos:column="37">FALSE</name><op:operator pos:line="863" pos:column="42">)</op:operator> <op:operator pos:line="863" pos:column="44">&amp;&amp;</op:operator> <op:operator pos:line="863" pos:column="47">(</op:operator><call><name><op:operator pos:line="863" pos:column="48">::</op:operator><name pos:line="863" pos:column="50">SendMessage</name></name><argument_list pos:line="863" pos:column="61">(<argument><expr><name pos:line="863" pos:column="62">_hTabSource</name></expr></argument>, <argument><expr><name pos:line="863" pos:column="75">TCM_GETITEMCOUNT</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="863" pos:column="93">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="863" pos:column="96">0</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="863" pos:column="99">==</op:operator> <lit:literal type="number" pos:line="863" pos:column="102">1</lit:literal><op:operator pos:line="863" pos:column="103">)</op:operator></expr>)</condition><then pos:line="863" pos:column="105">
	<block pos:line="864" pos:column="9">{
		<expr_stmt><expr><name pos:line="865" pos:column="17">_startMovingFromTab</name> <op:operator pos:line="865" pos:column="37">=</op:operator> <name pos:line="865" pos:column="39">TRUE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="866" pos:column="17">_iItem</name>				<op:operator pos:line="866" pos:column="49">=</op:operator> <lit:literal type="number" pos:line="866" pos:column="51">0</lit:literal></expr>;</expr_stmt>
	}</block></then>
	<else pos:line="868" pos:column="9">else
	<block pos:line="869" pos:column="9">{
		<comment type="block" pos:line="870" pos:column="17">/* get active tab item */</comment>
		<expr_stmt><expr><name pos:line="871" pos:column="17">_iItem</name>	<op:operator pos:line="871" pos:column="25">=</op:operator> <call><name><op:operator pos:line="871" pos:column="27">::</op:operator><name pos:line="871" pos:column="29">SendMessage</name></name><argument_list pos:line="871" pos:column="40">(<argument><expr><name pos:line="871" pos:column="41">_hTabSource</name></expr></argument>, <argument><expr><name pos:line="871" pos:column="54">TCM_GETCURSEL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="871" pos:column="69">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="871" pos:column="72">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<comment type="block" pos:line="874" pos:column="9">/* get size of item */</comment>
	<expr_stmt><expr><name pos:line="875" pos:column="9">_hTab</name> <op:operator pos:line="875" pos:column="15">=</op:operator> <name pos:line="875" pos:column="17">_hTabSource</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="876" pos:column="9">::</op:operator><name pos:line="876" pos:column="11">SendMessage</name></name><argument_list pos:line="876" pos:column="22">(<argument><expr><name pos:line="876" pos:column="23">_hTabSource</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="36">TCM_GETITEMRECT</name></expr></argument>, <argument><expr><name pos:line="876" pos:column="53">_iItem</name></expr></argument>, <argument><expr><op:operator pos:line="876" pos:column="61">(</op:operator><name pos:line="876" pos:column="62">LPARAM</name><op:operator pos:line="876" pos:column="68">)</op:operator><op:operator pos:line="876" pos:column="69">&amp;</op:operator><name pos:line="876" pos:column="70">_rcItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block" pos:line="878" pos:column="9">/* store item data */</comment>
	<decl_stmt><decl><type><specifier pos:line="879" pos:column="9">static</specifier> <name pos:line="879" pos:column="16">TCHAR</name></type>	<name><name pos:line="879" pos:column="25">szText</name><index pos:line="879" pos:column="31">[<expr><lit:literal type="number" pos:line="879" pos:column="32">64</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="880" pos:column="9">_tcItem</name><op:operator pos:line="880" pos:column="16">.</op:operator><name pos:line="880" pos:column="17">mask</name></name>		<op:operator pos:line="880" pos:column="33">=</op:operator> <name pos:line="880" pos:column="35">TCIF_PARAM</name> <op:operator pos:line="880" pos:column="46">|</op:operator> <name pos:line="880" pos:column="48">TCIF_TEXT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="881" pos:column="9">_tcItem</name><op:operator pos:line="881" pos:column="16">.</op:operator><name pos:line="881" pos:column="17">pszText</name></name>		<op:operator pos:line="881" pos:column="33">=</op:operator> <name pos:line="881" pos:column="35">szText</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="882" pos:column="9">_tcItem</name><op:operator pos:line="882" pos:column="16">.</op:operator><name pos:line="882" pos:column="17">cchTextMax</name></name>	<op:operator pos:line="882" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="882" pos:column="35">64</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><op:operator pos:line="883" pos:column="9">::</op:operator><name pos:line="883" pos:column="11">SendMessage</name></name><argument_list pos:line="883" pos:column="22">(<argument><expr><name pos:line="883" pos:column="23">_hTabSource</name></expr></argument>, <argument><expr><name pos:line="883" pos:column="36">TCM_GETITEM</name></expr></argument>, <argument><expr><name pos:line="883" pos:column="49">_iItem</name></expr></argument>, <argument><expr><op:operator pos:line="883" pos:column="57">(</op:operator><name pos:line="883" pos:column="58">LPARAM</name><op:operator pos:line="883" pos:column="64">)</op:operator><op:operator pos:line="883" pos:column="65">&amp;</op:operator><name pos:line="883" pos:column="66">_tcItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

</unit>
