<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexFlagship.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexFlagShip.cxx
 ** Lexer for Harbour and FlagShip.
 ** (Syntactically compatible to other xBase dialects, like Clipper, dBase, Clip, FoxPro etc.)
 **/</comment>
<comment type="line" pos:line="6" pos:column="1">// Copyright 2005 by Randy Butler</comment>
<comment type="line" pos:line="7" pos:column="1">// Copyright 2010 by Xavi &lt;jarabal/at/gmail.com&gt; (Harbour)</comment>
<comment type="line" pos:line="8" pos:column="1">// Copyright 1998-2003 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="9" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file pos:line="14" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file pos:line="15" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file pos:line="16" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="18" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="25" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="26" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="27" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef</cpp:directive> <name pos:line="29" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="30" pos:column="1">using namespace <name pos:line="30" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="line" pos:line="33" pos:column="1">// Extended to accept accented characters</comment>
<function><type><specifier pos:line="34" pos:column="1">static</specifier> <specifier pos:line="34" pos:column="8">inline</specifier> <name pos:line="34" pos:column="15">bool</name></type> <name pos:line="34" pos:column="20">IsAWordChar</name><parameter_list pos:line="34" pos:column="31">(<param><decl><type><name pos:line="34" pos:column="32">int</name></type> <name pos:line="34" pos:column="36">ch</name></decl></param>)</parameter_list>
<block pos:line="35" pos:column="1">{
	<return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">ch</name> <op:operator pos:line="36" pos:column="19">&gt;=</op:operator> <lit:literal type="number" pos:line="36" pos:column="22">0x80</lit:literal> <op:operator pos:line="36" pos:column="27">||</op:operator>
				<op:operator pos:line="37" pos:column="33">(</op:operator><call><name pos:line="37" pos:column="34">isalnum</name><argument_list pos:line="37" pos:column="41">(<argument><expr><name pos:line="37" pos:column="42">ch</name></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="46">||</op:operator> <name pos:line="37" pos:column="49">ch</name> <op:operator pos:line="37" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="55">'_'</lit:literal><op:operator pos:line="37" pos:column="58">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="40" pos:column="1">static</specifier> <name pos:line="40" pos:column="8">void</name></type> <name pos:line="40" pos:column="13">ColouriseFlagShipDoc</name><parameter_list pos:line="40" pos:column="33">(<param><decl><type><name pos:line="40" pos:column="34">unsigned</name> <name pos:line="40" pos:column="43">int</name></type> <name pos:line="40" pos:column="47">startPos</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="57">int</name></type> <name pos:line="40" pos:column="61">length</name></decl></param>, <param><decl><type><name pos:line="40" pos:column="69">int</name></type> <name pos:line="40" pos:column="73">initStyle</name></decl></param>,
                                 <param><decl><type><name pos:line="41" pos:column="34">WordList</name> <type:modifier pos:line="41" pos:column="43">*</type:modifier></type><name><name pos:line="41" pos:column="44">keywordlists</name><index pos:line="41" pos:column="56">[]</index></name></decl></param>, <param><decl><type><name pos:line="41" pos:column="60">Accessor</name> <type:modifier pos:line="41" pos:column="69">&amp;</type:modifier></type><name pos:line="41" pos:column="70">styler</name></decl></param>)</parameter_list>
<block pos:line="42" pos:column="1">{

	<decl_stmt><decl><type><name pos:line="44" pos:column="9">WordList</name> <type:modifier pos:line="44" pos:column="18">&amp;</type:modifier></type><name pos:line="44" pos:column="19">keywords</name> <init pos:line="44" pos:column="28">= <expr><op:operator pos:line="44" pos:column="30">*</op:operator><name><name pos:line="44" pos:column="31">keywordlists</name><index pos:line="44" pos:column="43">[<expr><lit:literal type="number" pos:line="44" pos:column="44">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">WordList</name> <type:modifier pos:line="45" pos:column="18">&amp;</type:modifier></type><name pos:line="45" pos:column="19">keywords2</name> <init pos:line="45" pos:column="29">= <expr><op:operator pos:line="45" pos:column="31">*</op:operator><name><name pos:line="45" pos:column="32">keywordlists</name><index pos:line="45" pos:column="44">[<expr><lit:literal type="number" pos:line="45" pos:column="45">1</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="46" pos:column="9">WordList</name> <type:modifier pos:line="46" pos:column="18">&amp;</type:modifier></type><name pos:line="46" pos:column="19">keywords3</name> <init pos:line="46" pos:column="29">= <expr><op:operator pos:line="46" pos:column="31">*</op:operator><name><name pos:line="46" pos:column="32">keywordlists</name><index pos:line="46" pos:column="44">[<expr><lit:literal type="number" pos:line="46" pos:column="45">2</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="47" pos:column="9">WordList</name> <type:modifier pos:line="47" pos:column="18">&amp;</type:modifier></type><name pos:line="47" pos:column="19">keywords4</name> <init pos:line="47" pos:column="29">= <expr><op:operator pos:line="47" pos:column="31">*</op:operator><name><name pos:line="47" pos:column="32">keywordlists</name><index pos:line="47" pos:column="44">[<expr><lit:literal type="number" pos:line="47" pos:column="45">3</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="48" pos:column="9">WordList</name> <type:modifier pos:line="48" pos:column="18">&amp;</type:modifier></type><name pos:line="48" pos:column="19">keywords5</name> <init pos:line="48" pos:column="29">= <expr><op:operator pos:line="48" pos:column="31">*</op:operator><name><name pos:line="48" pos:column="32">keywordlists</name><index pos:line="48" pos:column="44">[<expr><lit:literal type="number" pos:line="48" pos:column="45">4</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="50" pos:column="9">// property lexer.flagship.styling.within.preprocessor</comment>
	<comment type="line" pos:line="51" pos:column="9">//	For Harbour code, determines whether all preprocessor code is styled in the preprocessor style (0) or only from the</comment>
	<comment type="line" pos:line="52" pos:column="9">//	initial # to the end of the command word(1, the default). It also determines how to present text, dump, and disabled code.</comment>
	<decl_stmt><decl><type><name pos:line="53" pos:column="9">bool</name></type> <name pos:line="53" pos:column="14">stylingWithinPreprocessor</name> <init pos:line="53" pos:column="40">= <expr><call><name><name pos:line="53" pos:column="42">styler</name><op:operator pos:line="53" pos:column="48">.</op:operator><name pos:line="53" pos:column="49">GetPropertyInt</name></name><argument_list pos:line="53" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="53" pos:column="64">"lexer.flagship.styling.within.preprocessor"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="53" pos:column="110">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="53" pos:column="113">!=</op:operator> <lit:literal type="number" pos:line="53" pos:column="116">0</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="55" pos:column="9">CharacterSet</name></type> <name pos:line="55" pos:column="22">setDoxygen</name><argument_list pos:line="55" pos:column="32">(<argument><expr><name><name pos:line="55" pos:column="33">CharacterSet</name><op:operator pos:line="55" pos:column="45">::</op:operator><name pos:line="55" pos:column="47">setAlpha</name></name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="55" pos:column="57">"$@\\&amp;&lt;&gt;#{}[]"</lit:literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="57" pos:column="9">int</name></type> <name pos:line="57" pos:column="13">visibleChars</name> <init pos:line="57" pos:column="26">= <expr><lit:literal type="number" pos:line="57" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="58" pos:column="9">int</name></type> <name pos:line="58" pos:column="13">closeStringChar</name> <init pos:line="58" pos:column="29">= <expr><lit:literal type="number" pos:line="58" pos:column="31">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="59" pos:column="9">int</name></type> <name pos:line="59" pos:column="13">styleBeforeDCKeyword</name> <init pos:line="59" pos:column="34">= <expr><name pos:line="59" pos:column="36">SCE_FS_DEFAULT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="60" pos:column="9">bool</name></type> <name pos:line="60" pos:column="14">bEnableCode</name> <init pos:line="60" pos:column="26">= <expr><name pos:line="60" pos:column="28">initStyle</name> <op:operator pos:line="60" pos:column="38">&lt;</op:operator> <name pos:line="60" pos:column="40">SCE_FS_DISABLEDCODE</name></expr></init></decl>;</decl_stmt>

	<function_decl><type><name pos:line="62" pos:column="9">StyleContext</name></type> <name pos:line="62" pos:column="22">sc</name><parameter_list pos:line="62" pos:column="24">(<param><decl><type><name pos:line="62" pos:column="25">startPos</name></type></decl></param>, <param><decl><type><name pos:line="62" pos:column="35">length</name></type></decl></param>, <param><decl><type><name pos:line="62" pos:column="43">initStyle</name></type></decl></param>, <param><decl><type><name pos:line="62" pos:column="54">styler</name></type></decl></param>)</parameter_list>;</function_decl>

	<for pos:line="64" pos:column="9">for (<init pos:line="64" pos:column="14">;</init> <condition><expr><call><name><name pos:line="64" pos:column="16">sc</name><op:operator pos:line="64" pos:column="18">.</op:operator><name pos:line="64" pos:column="19">More</name></name><argument_list pos:line="64" pos:column="23">()</argument_list></call></expr>;</condition> <incr><expr><call><name><name pos:line="64" pos:column="27">sc</name><op:operator pos:line="64" pos:column="29">.</op:operator><name pos:line="64" pos:column="30">Forward</name></name><argument_list pos:line="64" pos:column="37">()</argument_list></call></expr></incr>) <block pos:line="64" pos:column="41">{

		<comment type="line" pos:line="66" pos:column="17">// Determine if the current state should terminate.</comment>
		<switch pos:line="67" pos:column="17">switch <condition pos:line="67" pos:column="24">(<expr><name><name pos:line="67" pos:column="25">sc</name><op:operator pos:line="67" pos:column="27">.</op:operator><name pos:line="67" pos:column="28">state</name></name></expr>)</condition> <block pos:line="67" pos:column="35">{
			<case pos:line="68" pos:column="25">case <expr><name pos:line="68" pos:column="30">SCE_FS_OPERATOR</name></expr>:
			</case><case pos:line="69" pos:column="25">case <expr><name pos:line="69" pos:column="30">SCE_FS_OPERATOR_C</name></expr>:
			</case><case pos:line="70" pos:column="25">case <expr><name pos:line="70" pos:column="30">SCE_FS_WORDOPERATOR</name></expr>:
				<expr_stmt><expr><call><name><name pos:line="71" pos:column="33">sc</name><op:operator pos:line="71" pos:column="35">.</op:operator><name pos:line="71" pos:column="36">SetState</name></name><argument_list pos:line="71" pos:column="44">(<argument><expr><name pos:line="71" pos:column="45">bEnableCode</name> <op:operator pos:line="71" pos:column="57">?</op:operator> <name pos:line="71" pos:column="59">SCE_FS_DEFAULT</name> <op:operator pos:line="71" pos:column="74">:</op:operator> <name pos:line="71" pos:column="76">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="72" pos:column="33">break;</break>
			</case><case pos:line="73" pos:column="25">case <expr><name pos:line="73" pos:column="30">SCE_FS_IDENTIFIER</name></expr>:
			</case><case pos:line="74" pos:column="25">case <expr><name pos:line="74" pos:column="30">SCE_FS_IDENTIFIER_C</name></expr>:
				<if pos:line="75" pos:column="33">if <condition pos:line="75" pos:column="36">(<expr><op:operator pos:line="75" pos:column="37">!</op:operator><call><name pos:line="75" pos:column="38">IsAWordChar</name><argument_list pos:line="75" pos:column="49">(<argument><expr><name><name pos:line="75" pos:column="50">sc</name><op:operator pos:line="75" pos:column="52">.</op:operator><name pos:line="75" pos:column="53">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="75" pos:column="57"> <block pos:line="75" pos:column="58">{
					<decl_stmt><decl><type><name pos:line="76" pos:column="41">char</name></type> <name><name pos:line="76" pos:column="46">s</name><index pos:line="76" pos:column="47">[<expr><lit:literal type="number" pos:line="76" pos:column="48">64</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="77" pos:column="41">sc</name><op:operator pos:line="77" pos:column="43">.</op:operator><name pos:line="77" pos:column="44">GetCurrentLowered</name></name><argument_list pos:line="77" pos:column="61">(<argument><expr><name pos:line="77" pos:column="62">s</name></expr></argument>, <argument><expr><sizeof pos:line="77" pos:column="65">sizeof<argument_list pos:line="77" pos:column="71">(<argument><expr><name pos:line="77" pos:column="72">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="78" pos:column="41">if <condition pos:line="78" pos:column="44">(<expr><call><name><name pos:line="78" pos:column="45">keywords</name><op:operator pos:line="78" pos:column="53">.</op:operator><name pos:line="78" pos:column="54">InList</name></name><argument_list pos:line="78" pos:column="60">(<argument><expr><name pos:line="78" pos:column="61">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="78" pos:column="64"> <block pos:line="78" pos:column="65">{
						<expr_stmt><expr><call><name><name pos:line="79" pos:column="49">sc</name><op:operator pos:line="79" pos:column="51">.</op:operator><name pos:line="79" pos:column="52">ChangeState</name></name><argument_list pos:line="79" pos:column="63">(<argument><expr><name pos:line="79" pos:column="64">bEnableCode</name> <op:operator pos:line="79" pos:column="76">?</op:operator> <name pos:line="79" pos:column="78">SCE_FS_KEYWORD</name> <op:operator pos:line="79" pos:column="93">:</op:operator> <name pos:line="79" pos:column="95">SCE_FS_KEYWORD_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="80" pos:column="43">else <if pos:line="80" pos:column="48">if <condition pos:line="80" pos:column="51">(<expr><call><name><name pos:line="80" pos:column="52">keywords2</name><op:operator pos:line="80" pos:column="61">.</op:operator><name pos:line="80" pos:column="62">InList</name></name><argument_list pos:line="80" pos:column="68">(<argument><expr><name pos:line="80" pos:column="69">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="80" pos:column="72"> <block pos:line="80" pos:column="73">{
						<expr_stmt><expr><call><name><name pos:line="81" pos:column="49">sc</name><op:operator pos:line="81" pos:column="51">.</op:operator><name pos:line="81" pos:column="52">ChangeState</name></name><argument_list pos:line="81" pos:column="63">(<argument><expr><name pos:line="81" pos:column="64">bEnableCode</name> <op:operator pos:line="81" pos:column="76">?</op:operator> <name pos:line="81" pos:column="78">SCE_FS_KEYWORD2</name> <op:operator pos:line="81" pos:column="94">:</op:operator> <name pos:line="81" pos:column="96">SCE_FS_KEYWORD2_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="82" pos:column="43">else <if pos:line="82" pos:column="48">if <condition pos:line="82" pos:column="51">(<expr><name pos:line="82" pos:column="52">bEnableCode</name> <op:operator pos:line="82" pos:column="64">&amp;&amp;</op:operator> <call><name><name pos:line="82" pos:column="67">keywords3</name><op:operator pos:line="82" pos:column="76">.</op:operator><name pos:line="82" pos:column="77">InList</name></name><argument_list pos:line="82" pos:column="83">(<argument><expr><name pos:line="82" pos:column="84">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="82" pos:column="87"> <block pos:line="82" pos:column="88">{
						<expr_stmt><expr><call><name><name pos:line="83" pos:column="49">sc</name><op:operator pos:line="83" pos:column="51">.</op:operator><name pos:line="83" pos:column="52">ChangeState</name></name><argument_list pos:line="83" pos:column="63">(<argument><expr><name pos:line="83" pos:column="64">SCE_FS_KEYWORD3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then> <else pos:line="84" pos:column="43">else <if pos:line="84" pos:column="48">if <condition pos:line="84" pos:column="51">(<expr><name pos:line="84" pos:column="52">bEnableCode</name> <op:operator pos:line="84" pos:column="64">&amp;&amp;</op:operator> <call><name><name pos:line="84" pos:column="67">keywords4</name><op:operator pos:line="84" pos:column="76">.</op:operator><name pos:line="84" pos:column="77">InList</name></name><argument_list pos:line="84" pos:column="83">(<argument><expr><name pos:line="84" pos:column="84">s</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="84" pos:column="87"> <block pos:line="84" pos:column="88">{
						<expr_stmt><expr><call><name><name pos:line="85" pos:column="49">sc</name><op:operator pos:line="85" pos:column="51">.</op:operator><name pos:line="85" pos:column="52">ChangeState</name></name><argument_list pos:line="85" pos:column="63">(<argument><expr><name pos:line="85" pos:column="64">SCE_FS_KEYWORD4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if></else></if></else></if><comment type="line" pos:line="86" pos:column="42">// Else, it is really an identifier...</comment>
					<expr_stmt><expr><call><name><name pos:line="87" pos:column="41">sc</name><op:operator pos:line="87" pos:column="43">.</op:operator><name pos:line="87" pos:column="44">SetState</name></name><argument_list pos:line="87" pos:column="52">(<argument><expr><name pos:line="87" pos:column="53">bEnableCode</name> <op:operator pos:line="87" pos:column="65">?</op:operator> <name pos:line="87" pos:column="67">SCE_FS_DEFAULT</name> <op:operator pos:line="87" pos:column="82">:</op:operator> <name pos:line="87" pos:column="84">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="89" pos:column="33">break;</break>
			</case><case pos:line="90" pos:column="25">case <expr><name pos:line="90" pos:column="30">SCE_FS_NUMBER</name></expr>:
				<if pos:line="91" pos:column="33">if <condition pos:line="91" pos:column="36">(<expr><op:operator pos:line="91" pos:column="37">!</op:operator><call><name pos:line="91" pos:column="38">IsAWordChar</name><argument_list pos:line="91" pos:column="49">(<argument><expr><name><name pos:line="91" pos:column="50">sc</name><op:operator pos:line="91" pos:column="52">.</op:operator><name pos:line="91" pos:column="53">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="91" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="91" pos:column="60">!</op:operator><op:operator pos:line="91" pos:column="61">(</op:operator><name><name pos:line="91" pos:column="62">sc</name><op:operator pos:line="91" pos:column="64">.</op:operator><name pos:line="91" pos:column="65">ch</name></name> <op:operator pos:line="91" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="91" pos:column="71">'.'</lit:literal> <op:operator pos:line="91" pos:column="75">&amp;&amp;</op:operator> <call><name pos:line="91" pos:column="78">IsADigit</name><argument_list pos:line="91" pos:column="86">(<argument><expr><name><name pos:line="91" pos:column="87">sc</name><op:operator pos:line="91" pos:column="89">.</op:operator><name pos:line="91" pos:column="90">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="91" pos:column="97">)</op:operator></expr>)</condition><then pos:line="91" pos:column="99"> <block pos:line="91" pos:column="100">{
					<expr_stmt><expr><call><name><name pos:line="92" pos:column="41">sc</name><op:operator pos:line="92" pos:column="43">.</op:operator><name pos:line="92" pos:column="44">SetState</name></name><argument_list pos:line="92" pos:column="52">(<argument><expr><name pos:line="92" pos:column="53">SCE_FS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="94" pos:column="33">break;</break>
			</case><case pos:line="95" pos:column="25">case <expr><name pos:line="95" pos:column="30">SCE_FS_NUMBER_C</name></expr>:
				<if pos:line="96" pos:column="33">if <condition pos:line="96" pos:column="36">(<expr><op:operator pos:line="96" pos:column="37">!</op:operator><call><name pos:line="96" pos:column="38">IsAWordChar</name><argument_list pos:line="96" pos:column="49">(<argument><expr><name><name pos:line="96" pos:column="50">sc</name><op:operator pos:line="96" pos:column="52">.</op:operator><name pos:line="96" pos:column="53">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="96" pos:column="57">&amp;&amp;</op:operator> <name><name pos:line="96" pos:column="60">sc</name><op:operator pos:line="96" pos:column="62">.</op:operator><name pos:line="96" pos:column="63">ch</name></name> <op:operator pos:line="96" pos:column="66">!=</op:operator> <lit:literal type="char" pos:line="96" pos:column="69">'.'</lit:literal></expr>)</condition><then pos:line="96" pos:column="73"> <block pos:line="96" pos:column="74">{
					<expr_stmt><expr><call><name><name pos:line="97" pos:column="41">sc</name><op:operator pos:line="97" pos:column="43">.</op:operator><name pos:line="97" pos:column="44">SetState</name></name><argument_list pos:line="97" pos:column="52">(<argument><expr><name pos:line="97" pos:column="53">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="99" pos:column="33">break;</break>
			</case><case pos:line="100" pos:column="25">case <expr><name pos:line="100" pos:column="30">SCE_FS_CONSTANT</name></expr>:
				<if pos:line="101" pos:column="33">if <condition pos:line="101" pos:column="36">(<expr><op:operator pos:line="101" pos:column="37">!</op:operator><call><name pos:line="101" pos:column="38">IsAWordChar</name><argument_list pos:line="101" pos:column="49">(<argument><expr><name><name pos:line="101" pos:column="50">sc</name><op:operator pos:line="101" pos:column="52">.</op:operator><name pos:line="101" pos:column="53">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="101" pos:column="57"> <block pos:line="101" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="102" pos:column="41">sc</name><op:operator pos:line="102" pos:column="43">.</op:operator><name pos:line="102" pos:column="44">SetState</name></name><argument_list pos:line="102" pos:column="52">(<argument><expr><name pos:line="102" pos:column="53">SCE_FS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="104" pos:column="33">break;</break>
			</case><case pos:line="105" pos:column="25">case <expr><name pos:line="105" pos:column="30">SCE_FS_STRING</name></expr>:
			</case><case pos:line="106" pos:column="25">case <expr><name pos:line="106" pos:column="30">SCE_FS_STRING_C</name></expr>:
				<if pos:line="107" pos:column="33">if <condition pos:line="107" pos:column="36">(<expr><name><name pos:line="107" pos:column="37">sc</name><op:operator pos:line="107" pos:column="39">.</op:operator><name pos:line="107" pos:column="40">ch</name></name> <op:operator pos:line="107" pos:column="43">==</op:operator> <name pos:line="107" pos:column="46">closeStringChar</name></expr>)</condition><then pos:line="107" pos:column="62"> <block pos:line="107" pos:column="63">{
					<expr_stmt><expr><call><name><name pos:line="108" pos:column="41">sc</name><op:operator pos:line="108" pos:column="43">.</op:operator><name pos:line="108" pos:column="44">ForwardSetState</name></name><argument_list pos:line="108" pos:column="59">(<argument><expr><name pos:line="108" pos:column="60">bEnableCode</name> <op:operator pos:line="108" pos:column="72">?</op:operator> <name pos:line="108" pos:column="74">SCE_FS_DEFAULT</name> <op:operator pos:line="108" pos:column="89">:</op:operator> <name pos:line="108" pos:column="91">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="109" pos:column="35">else <if pos:line="109" pos:column="40">if <condition pos:line="109" pos:column="43">(<expr><name><name pos:line="109" pos:column="44">sc</name><op:operator pos:line="109" pos:column="46">.</op:operator><name pos:line="109" pos:column="47">atLineEnd</name></name></expr>)</condition><then pos:line="109" pos:column="57"> <block pos:line="109" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="110" pos:column="41">sc</name><op:operator pos:line="110" pos:column="43">.</op:operator><name pos:line="110" pos:column="44">ChangeState</name></name><argument_list pos:line="110" pos:column="55">(<argument><expr><name pos:line="110" pos:column="56">bEnableCode</name> <op:operator pos:line="110" pos:column="68">?</op:operator> <name pos:line="110" pos:column="70">SCE_FS_STRINGEOL</name> <op:operator pos:line="110" pos:column="87">:</op:operator> <name pos:line="110" pos:column="89">SCE_FS_STRINGEOL_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="112" pos:column="33">break;</break>
			</case><case pos:line="113" pos:column="25">case <expr><name pos:line="113" pos:column="30">SCE_FS_STRINGEOL</name></expr>:
			</case><case pos:line="114" pos:column="25">case <expr><name pos:line="114" pos:column="30">SCE_FS_STRINGEOL_C</name></expr>:
				<if pos:line="115" pos:column="33">if <condition pos:line="115" pos:column="36">(<expr><name><name pos:line="115" pos:column="37">sc</name><op:operator pos:line="115" pos:column="39">.</op:operator><name pos:line="115" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="115" pos:column="52"> <block pos:line="115" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="116" pos:column="41">sc</name><op:operator pos:line="116" pos:column="43">.</op:operator><name pos:line="116" pos:column="44">SetState</name></name><argument_list pos:line="116" pos:column="52">(<argument><expr><name pos:line="116" pos:column="53">bEnableCode</name> <op:operator pos:line="116" pos:column="65">?</op:operator> <name pos:line="116" pos:column="67">SCE_FS_DEFAULT</name> <op:operator pos:line="116" pos:column="82">:</op:operator> <name pos:line="116" pos:column="84">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="118" pos:column="33">break;</break>
			</case><case pos:line="119" pos:column="25">case <expr><name pos:line="119" pos:column="30">SCE_FS_COMMENTDOC</name></expr>:
			</case><case pos:line="120" pos:column="25">case <expr><name pos:line="120" pos:column="30">SCE_FS_COMMENTDOC_C</name></expr>:
				<if pos:line="121" pos:column="33">if <condition pos:line="121" pos:column="36">(<expr><call><name><name pos:line="121" pos:column="37">sc</name><op:operator pos:line="121" pos:column="39">.</op:operator><name pos:line="121" pos:column="40">Match</name></name><argument_list pos:line="121" pos:column="45">(<argument><expr><lit:literal type="char" pos:line="121" pos:column="46">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="121" pos:column="51">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="121" pos:column="56"> <block pos:line="121" pos:column="57">{
					<expr_stmt><expr><call><name><name pos:line="122" pos:column="41">sc</name><op:operator pos:line="122" pos:column="43">.</op:operator><name pos:line="122" pos:column="44">Forward</name></name><argument_list pos:line="122" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="123" pos:column="41">sc</name><op:operator pos:line="123" pos:column="43">.</op:operator><name pos:line="123" pos:column="44">ForwardSetState</name></name><argument_list pos:line="123" pos:column="59">(<argument><expr><name pos:line="123" pos:column="60">bEnableCode</name> <op:operator pos:line="123" pos:column="72">?</op:operator> <name pos:line="123" pos:column="74">SCE_FS_DEFAULT</name> <op:operator pos:line="123" pos:column="89">:</op:operator> <name pos:line="123" pos:column="91">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="124" pos:column="35">else <if pos:line="124" pos:column="40">if <condition pos:line="124" pos:column="43">(<expr><name><name pos:line="124" pos:column="44">sc</name><op:operator pos:line="124" pos:column="46">.</op:operator><name pos:line="124" pos:column="47">ch</name></name> <op:operator pos:line="124" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="53">'@'</lit:literal> <op:operator pos:line="124" pos:column="57">||</op:operator> <name><name pos:line="124" pos:column="60">sc</name><op:operator pos:line="124" pos:column="62">.</op:operator><name pos:line="124" pos:column="63">ch</name></name> <op:operator pos:line="124" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="69">'\\'</lit:literal></expr>)</condition><then pos:line="124" pos:column="74"> <block pos:line="124" pos:column="75">{ <comment type="line" pos:line="124" pos:column="77">// JavaDoc and Doxygen support</comment>
					<comment type="line" pos:line="125" pos:column="41">// Verify that we have the conditions to mark a comment-doc-keyword</comment>
					<if pos:line="126" pos:column="41">if <condition pos:line="126" pos:column="44">(<expr><op:operator pos:line="126" pos:column="45">(</op:operator><call><name pos:line="126" pos:column="46">IsASpace</name><argument_list pos:line="126" pos:column="54">(<argument><expr><name><name pos:line="126" pos:column="55">sc</name><op:operator pos:line="126" pos:column="57">.</op:operator><name pos:line="126" pos:column="58">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="126" pos:column="66">||</op:operator> <name><name pos:line="126" pos:column="69">sc</name><op:operator pos:line="126" pos:column="71">.</op:operator><name pos:line="126" pos:column="72">chPrev</name></name> <op:operator pos:line="126" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="126" pos:column="82">'*'</lit:literal><op:operator pos:line="126" pos:column="85">)</op:operator> <op:operator pos:line="126" pos:column="87">&amp;&amp;</op:operator> <op:operator pos:line="126" pos:column="90">(</op:operator><op:operator pos:line="126" pos:column="91">!</op:operator><call><name pos:line="126" pos:column="92">IsASpace</name><argument_list pos:line="126" pos:column="100">(<argument><expr><name><name pos:line="126" pos:column="101">sc</name><op:operator pos:line="126" pos:column="103">.</op:operator><name pos:line="126" pos:column="104">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="126" pos:column="111">)</op:operator></expr>)</condition><then pos:line="126" pos:column="113"> <block pos:line="126" pos:column="114">{
						<expr_stmt><expr><name pos:line="127" pos:column="49">styleBeforeDCKeyword</name> <op:operator pos:line="127" pos:column="70">=</op:operator> <name pos:line="127" pos:column="72">bEnableCode</name> <op:operator pos:line="127" pos:column="84">?</op:operator> <name pos:line="127" pos:column="86">SCE_FS_COMMENTDOC</name> <op:operator pos:line="127" pos:column="104">:</op:operator> <name pos:line="127" pos:column="106">SCE_FS_COMMENTDOC_C</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="128" pos:column="49">sc</name><op:operator pos:line="128" pos:column="51">.</op:operator><name pos:line="128" pos:column="52">SetState</name></name><argument_list pos:line="128" pos:column="60">(<argument><expr><name pos:line="128" pos:column="61">SCE_FS_COMMENTDOCKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="131" pos:column="33">break;</break>
			</case><case pos:line="132" pos:column="25">case <expr><name pos:line="132" pos:column="30">SCE_FS_COMMENT</name></expr>:
			</case><case pos:line="133" pos:column="25">case <expr><name pos:line="133" pos:column="30">SCE_FS_COMMENTLINE</name></expr>:
				<if pos:line="134" pos:column="33">if <condition pos:line="134" pos:column="36">(<expr><name><name pos:line="134" pos:column="37">sc</name><op:operator pos:line="134" pos:column="39">.</op:operator><name pos:line="134" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="134" pos:column="52"> <block pos:line="134" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="135" pos:column="41">sc</name><op:operator pos:line="135" pos:column="43">.</op:operator><name pos:line="135" pos:column="44">SetState</name></name><argument_list pos:line="135" pos:column="52">(<argument><expr><name pos:line="135" pos:column="53">SCE_FS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<break pos:line="137" pos:column="33">break;</break>
			</case><case pos:line="138" pos:column="25">case <expr><name pos:line="138" pos:column="30">SCE_FS_COMMENTLINEDOC</name></expr>:
			</case><case pos:line="139" pos:column="25">case <expr><name pos:line="139" pos:column="30">SCE_FS_COMMENTLINEDOC_C</name></expr>:
				<if pos:line="140" pos:column="33">if <condition pos:line="140" pos:column="36">(<expr><name><name pos:line="140" pos:column="37">sc</name><op:operator pos:line="140" pos:column="39">.</op:operator><name pos:line="140" pos:column="40">atLineStart</name></name></expr>)</condition><then pos:line="140" pos:column="52"> <block pos:line="140" pos:column="53">{
					<expr_stmt><expr><call><name><name pos:line="141" pos:column="41">sc</name><op:operator pos:line="141" pos:column="43">.</op:operator><name pos:line="141" pos:column="44">SetState</name></name><argument_list pos:line="141" pos:column="52">(<argument><expr><name pos:line="141" pos:column="53">bEnableCode</name> <op:operator pos:line="141" pos:column="65">?</op:operator> <name pos:line="141" pos:column="67">SCE_FS_DEFAULT</name> <op:operator pos:line="141" pos:column="82">:</op:operator> <name pos:line="141" pos:column="84">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="142" pos:column="35">else <if pos:line="142" pos:column="40">if <condition pos:line="142" pos:column="43">(<expr><name><name pos:line="142" pos:column="44">sc</name><op:operator pos:line="142" pos:column="46">.</op:operator><name pos:line="142" pos:column="47">ch</name></name> <op:operator pos:line="142" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="142" pos:column="53">'@'</lit:literal> <op:operator pos:line="142" pos:column="57">||</op:operator> <name><name pos:line="142" pos:column="60">sc</name><op:operator pos:line="142" pos:column="62">.</op:operator><name pos:line="142" pos:column="63">ch</name></name> <op:operator pos:line="142" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="142" pos:column="69">'\\'</lit:literal></expr>)</condition><then pos:line="142" pos:column="74"> <block pos:line="142" pos:column="75">{ <comment type="line" pos:line="142" pos:column="77">// JavaDoc and Doxygen support</comment>
					<comment type="line" pos:line="143" pos:column="41">// Verify that we have the conditions to mark a comment-doc-keyword</comment>
					<if pos:line="144" pos:column="41">if <condition pos:line="144" pos:column="44">(<expr><op:operator pos:line="144" pos:column="45">(</op:operator><call><name pos:line="144" pos:column="46">IsASpace</name><argument_list pos:line="144" pos:column="54">(<argument><expr><name><name pos:line="144" pos:column="55">sc</name><op:operator pos:line="144" pos:column="57">.</op:operator><name pos:line="144" pos:column="58">chPrev</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="144" pos:column="66">||</op:operator> <name><name pos:line="144" pos:column="69">sc</name><op:operator pos:line="144" pos:column="71">.</op:operator><name pos:line="144" pos:column="72">chPrev</name></name> <op:operator pos:line="144" pos:column="79">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="82">'/'</lit:literal> <op:operator pos:line="144" pos:column="86">||</op:operator> <name><name pos:line="144" pos:column="89">sc</name><op:operator pos:line="144" pos:column="91">.</op:operator><name pos:line="144" pos:column="92">chPrev</name></name> <op:operator pos:line="144" pos:column="99">==</op:operator> <lit:literal type="char" pos:line="144" pos:column="102">'!'</lit:literal><op:operator pos:line="144" pos:column="105">)</op:operator> <op:operator pos:line="144" pos:column="107">&amp;&amp;</op:operator> <op:operator pos:line="144" pos:column="110">(</op:operator><op:operator pos:line="144" pos:column="111">!</op:operator><call><name pos:line="144" pos:column="112">IsASpace</name><argument_list pos:line="144" pos:column="120">(<argument><expr><name><name pos:line="144" pos:column="121">sc</name><op:operator pos:line="144" pos:column="123">.</op:operator><name pos:line="144" pos:column="124">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="144" pos:column="131">)</op:operator></expr>)</condition><then pos:line="144" pos:column="133"> <block pos:line="144" pos:column="134">{
						<expr_stmt><expr><name pos:line="145" pos:column="49">styleBeforeDCKeyword</name> <op:operator pos:line="145" pos:column="70">=</op:operator> <name pos:line="145" pos:column="72">bEnableCode</name> <op:operator pos:line="145" pos:column="84">?</op:operator> <name pos:line="145" pos:column="86">SCE_FS_COMMENTLINEDOC</name> <op:operator pos:line="145" pos:column="108">:</op:operator> <name pos:line="145" pos:column="110">SCE_FS_COMMENTLINEDOC_C</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="146" pos:column="49">sc</name><op:operator pos:line="146" pos:column="51">.</op:operator><name pos:line="146" pos:column="52">SetState</name></name><argument_list pos:line="146" pos:column="60">(<argument><expr><name pos:line="146" pos:column="61">SCE_FS_COMMENTDOCKEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
				<break pos:line="149" pos:column="33">break;</break>
			</case><case pos:line="150" pos:column="25">case <expr><name pos:line="150" pos:column="30">SCE_FS_COMMENTDOCKEYWORD</name></expr>:
				<if pos:line="151" pos:column="33">if <condition pos:line="151" pos:column="36">(<expr><op:operator pos:line="151" pos:column="37">(</op:operator><name pos:line="151" pos:column="38">styleBeforeDCKeyword</name> <op:operator pos:line="151" pos:column="59">==</op:operator> <name pos:line="151" pos:column="62">SCE_FS_COMMENTDOC</name> <op:operator pos:line="151" pos:column="80">||</op:operator> <name pos:line="151" pos:column="83">styleBeforeDCKeyword</name> <op:operator pos:line="151" pos:column="104">==</op:operator> <name pos:line="151" pos:column="107">SCE_FS_COMMENTDOC_C</name><op:operator pos:line="151" pos:column="126">)</op:operator> <op:operator pos:line="151" pos:column="128">&amp;&amp;</op:operator>
						<call><name><name pos:line="152" pos:column="49">sc</name><op:operator pos:line="152" pos:column="51">.</op:operator><name pos:line="152" pos:column="52">Match</name></name><argument_list pos:line="152" pos:column="57">(<argument><expr><lit:literal type="char" pos:line="152" pos:column="58">'*'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="152" pos:column="63">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="152" pos:column="68"> <block pos:line="152" pos:column="69">{
					<expr_stmt><expr><call><name><name pos:line="153" pos:column="41">sc</name><op:operator pos:line="153" pos:column="43">.</op:operator><name pos:line="153" pos:column="44">ChangeState</name></name><argument_list pos:line="153" pos:column="55">(<argument><expr><name pos:line="153" pos:column="56">SCE_FS_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="154" pos:column="41">sc</name><op:operator pos:line="154" pos:column="43">.</op:operator><name pos:line="154" pos:column="44">Forward</name></name><argument_list pos:line="154" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="155" pos:column="41">sc</name><op:operator pos:line="155" pos:column="43">.</op:operator><name pos:line="155" pos:column="44">ForwardSetState</name></name><argument_list pos:line="155" pos:column="59">(<argument><expr><name pos:line="155" pos:column="60">bEnableCode</name> <op:operator pos:line="155" pos:column="72">?</op:operator> <name pos:line="155" pos:column="74">SCE_FS_DEFAULT</name> <op:operator pos:line="155" pos:column="89">:</op:operator> <name pos:line="155" pos:column="91">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="156" pos:column="35">else <if pos:line="156" pos:column="40">if <condition pos:line="156" pos:column="43">(<expr><op:operator pos:line="156" pos:column="44">!</op:operator><call><name><name pos:line="156" pos:column="45">setDoxygen</name><op:operator pos:line="156" pos:column="55">.</op:operator><name pos:line="156" pos:column="56">Contains</name></name><argument_list pos:line="156" pos:column="64">(<argument><expr><name><name pos:line="156" pos:column="65">sc</name><op:operator pos:line="156" pos:column="67">.</op:operator><name pos:line="156" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="156" pos:column="72"> <block pos:line="156" pos:column="73">{
					<decl_stmt><decl><type><name pos:line="157" pos:column="41">char</name></type> <name><name pos:line="157" pos:column="46">s</name><index pos:line="157" pos:column="47">[<expr><lit:literal type="number" pos:line="157" pos:column="48">64</lit:literal></expr>]</index></name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name pos:line="158" pos:column="41">sc</name><op:operator pos:line="158" pos:column="43">.</op:operator><name pos:line="158" pos:column="44">GetCurrentLowered</name></name><argument_list pos:line="158" pos:column="61">(<argument><expr><name pos:line="158" pos:column="62">s</name></expr></argument>, <argument><expr><sizeof pos:line="158" pos:column="65">sizeof<argument_list pos:line="158" pos:column="71">(<argument><expr><name pos:line="158" pos:column="72">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="159" pos:column="41">if <condition pos:line="159" pos:column="44">(<expr><op:operator pos:line="159" pos:column="45">!</op:operator><call><name pos:line="159" pos:column="46">IsASpace</name><argument_list pos:line="159" pos:column="54">(<argument><expr><name><name pos:line="159" pos:column="55">sc</name><op:operator pos:line="159" pos:column="57">.</op:operator><name pos:line="159" pos:column="58">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="159" pos:column="62">||</op:operator> <op:operator pos:line="159" pos:column="65">!</op:operator><call><name><name pos:line="159" pos:column="66">keywords5</name><op:operator pos:line="159" pos:column="75">.</op:operator><name pos:line="159" pos:column="76">InList</name></name><argument_list pos:line="159" pos:column="82">(<argument><expr><name pos:line="159" pos:column="83">s</name> <op:operator pos:line="159" pos:column="85">+</op:operator> <lit:literal type="number" pos:line="159" pos:column="87">1</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="159" pos:column="90"> <block pos:line="159" pos:column="91">{
						<expr_stmt><expr><call><name><name pos:line="160" pos:column="49">sc</name><op:operator pos:line="160" pos:column="51">.</op:operator><name pos:line="160" pos:column="52">ChangeState</name></name><argument_list pos:line="160" pos:column="63">(<argument><expr><name pos:line="160" pos:column="64">SCE_FS_COMMENTDOCKEYWORDERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name pos:line="162" pos:column="41">sc</name><op:operator pos:line="162" pos:column="43">.</op:operator><name pos:line="162" pos:column="44">SetState</name></name><argument_list pos:line="162" pos:column="52">(<argument><expr><name pos:line="162" pos:column="53">styleBeforeDCKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
				<break pos:line="164" pos:column="33">break;</break>
			</case><case pos:line="165" pos:column="25">case <expr><name pos:line="165" pos:column="30">SCE_FS_PREPROCESSOR</name></expr>:
			</case><case pos:line="166" pos:column="25">case <expr><name pos:line="166" pos:column="30">SCE_FS_PREPROCESSOR_C</name></expr>:
				<if pos:line="167" pos:column="33">if <condition pos:line="167" pos:column="36">(<expr><name><name pos:line="167" pos:column="37">sc</name><op:operator pos:line="167" pos:column="39">.</op:operator><name pos:line="167" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="167" pos:column="50"> <block pos:line="167" pos:column="51">{
					<if pos:line="168" pos:column="41">if <condition pos:line="168" pos:column="44">(<expr><op:operator pos:line="168" pos:column="45">!</op:operator><op:operator pos:line="168" pos:column="46">(</op:operator><name><name pos:line="168" pos:column="47">sc</name><op:operator pos:line="168" pos:column="49">.</op:operator><name pos:line="168" pos:column="50">chPrev</name></name> <op:operator pos:line="168" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="60">';'</lit:literal> <op:operator pos:line="168" pos:column="64">||</op:operator> <call><name><name pos:line="168" pos:column="67">sc</name><op:operator pos:line="168" pos:column="69">.</op:operator><name pos:line="168" pos:column="70">GetRelative</name></name><argument_list pos:line="168" pos:column="81">(<argument><expr><op:operator pos:line="168" pos:column="82">-</op:operator><lit:literal type="number" pos:line="168" pos:column="83">2</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="168" pos:column="86">==</op:operator> <lit:literal type="char" pos:line="168" pos:column="89">';'</lit:literal><op:operator pos:line="168" pos:column="92">)</op:operator></expr>)</condition><then pos:line="168" pos:column="94"> <block pos:line="168" pos:column="95">{
						<expr_stmt><expr><call><name><name pos:line="169" pos:column="49">sc</name><op:operator pos:line="169" pos:column="51">.</op:operator><name pos:line="169" pos:column="52">SetState</name></name><argument_list pos:line="169" pos:column="60">(<argument><expr><name pos:line="169" pos:column="61">bEnableCode</name> <op:operator pos:line="169" pos:column="73">?</op:operator> <name pos:line="169" pos:column="75">SCE_FS_DEFAULT</name> <op:operator pos:line="169" pos:column="90">:</op:operator> <name pos:line="169" pos:column="92">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="171" pos:column="35">else <if pos:line="171" pos:column="40">if <condition pos:line="171" pos:column="43">(<expr><name pos:line="171" pos:column="44">stylingWithinPreprocessor</name></expr>)</condition><then pos:line="171" pos:column="70"> <block pos:line="171" pos:column="71">{
					<if pos:line="172" pos:column="41">if <condition pos:line="172" pos:column="44">(<expr><call><name pos:line="172" pos:column="45">IsASpaceOrTab</name><argument_list pos:line="172" pos:column="58">(<argument><expr><name><name pos:line="172" pos:column="59">sc</name><op:operator pos:line="172" pos:column="61">.</op:operator><name pos:line="172" pos:column="62">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="172" pos:column="66"> <block pos:line="172" pos:column="67">{
						<expr_stmt><expr><call><name><name pos:line="173" pos:column="49">sc</name><op:operator pos:line="173" pos:column="51">.</op:operator><name pos:line="173" pos:column="52">SetState</name></name><argument_list pos:line="173" pos:column="60">(<argument><expr><name pos:line="173" pos:column="61">bEnableCode</name> <op:operator pos:line="173" pos:column="73">?</op:operator> <name pos:line="173" pos:column="75">SCE_FS_DEFAULT</name> <op:operator pos:line="173" pos:column="90">:</op:operator> <name pos:line="173" pos:column="92">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="175" pos:column="35">else <if pos:line="175" pos:column="40">if <condition pos:line="175" pos:column="43">(<expr><call><name><name pos:line="175" pos:column="44">sc</name><op:operator pos:line="175" pos:column="46">.</op:operator><name pos:line="175" pos:column="47">Match</name></name><argument_list pos:line="175" pos:column="52">(<argument><expr><lit:literal type="char" pos:line="175" pos:column="53">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="175" pos:column="58">'*'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="175" pos:column="63">||</op:operator> <call><name><name pos:line="175" pos:column="66">sc</name><op:operator pos:line="175" pos:column="68">.</op:operator><name pos:line="175" pos:column="69">Match</name></name><argument_list pos:line="175" pos:column="74">(<argument><expr><lit:literal type="char" pos:line="175" pos:column="75">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="175" pos:column="80">'/'</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="175" pos:column="85">||</op:operator> <call><name><name pos:line="175" pos:column="88">sc</name><op:operator pos:line="175" pos:column="90">.</op:operator><name pos:line="175" pos:column="91">Match</name></name><argument_list pos:line="175" pos:column="96">(<argument><expr><lit:literal type="char" pos:line="175" pos:column="97">'&amp;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="175" pos:column="102">'&amp;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="175" pos:column="107"> <block pos:line="175" pos:column="108">{
					<expr_stmt><expr><call><name><name pos:line="176" pos:column="41">sc</name><op:operator pos:line="176" pos:column="43">.</op:operator><name pos:line="176" pos:column="44">SetState</name></name><argument_list pos:line="176" pos:column="52">(<argument><expr><name pos:line="176" pos:column="53">bEnableCode</name> <op:operator pos:line="176" pos:column="65">?</op:operator> <name pos:line="176" pos:column="67">SCE_FS_DEFAULT</name> <op:operator pos:line="176" pos:column="82">:</op:operator> <name pos:line="176" pos:column="84">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if></else></if>
				<break pos:line="178" pos:column="33">break;</break>
			</case><case pos:line="179" pos:column="25">case <expr><name pos:line="179" pos:column="30">SCE_FS_DISABLEDCODE</name></expr>:
				<if pos:line="180" pos:column="33">if <condition pos:line="180" pos:column="36">(<expr><name><name pos:line="180" pos:column="37">sc</name><op:operator pos:line="180" pos:column="39">.</op:operator><name pos:line="180" pos:column="40">ch</name></name> <op:operator pos:line="180" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="180" pos:column="46">'#'</lit:literal> <op:operator pos:line="180" pos:column="50">&amp;&amp;</op:operator> <name pos:line="180" pos:column="53">visibleChars</name> <op:operator pos:line="180" pos:column="66">==</op:operator> <lit:literal type="number" pos:line="180" pos:column="69">0</lit:literal></expr>)</condition><then pos:line="180" pos:column="71"> <block pos:line="180" pos:column="72">{
					<expr_stmt><expr><call><name><name pos:line="181" pos:column="41">sc</name><op:operator pos:line="181" pos:column="43">.</op:operator><name pos:line="181" pos:column="44">SetState</name></name><argument_list pos:line="181" pos:column="52">(<argument><expr><name pos:line="181" pos:column="53">bEnableCode</name> <op:operator pos:line="181" pos:column="65">?</op:operator> <name pos:line="181" pos:column="67">SCE_FS_PREPROCESSOR</name> <op:operator pos:line="181" pos:column="87">:</op:operator> <name pos:line="181" pos:column="89">SCE_FS_PREPROCESSOR_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<do pos:line="182" pos:column="41">do <block pos:line="182" pos:column="44">{	<comment type="line" pos:line="182" pos:column="49">// Skip whitespace between # and preprocessor word</comment>
						<expr_stmt><expr><call><name><name pos:line="183" pos:column="49">sc</name><op:operator pos:line="183" pos:column="51">.</op:operator><name pos:line="183" pos:column="52">Forward</name></name><argument_list pos:line="183" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block> while <condition pos:line="184" pos:column="49">(<expr><call><name pos:line="184" pos:column="50">IsASpaceOrTab</name><argument_list pos:line="184" pos:column="63">(<argument><expr><name><name pos:line="184" pos:column="64">sc</name><op:operator pos:line="184" pos:column="66">.</op:operator><name pos:line="184" pos:column="67">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="184" pos:column="71">&amp;&amp;</op:operator> <call><name><name pos:line="184" pos:column="74">sc</name><op:operator pos:line="184" pos:column="76">.</op:operator><name pos:line="184" pos:column="77">More</name></name><argument_list pos:line="184" pos:column="81">()</argument_list></call></expr>)</condition>;</do>
					<if pos:line="185" pos:column="41">if <condition pos:line="185" pos:column="44">(<expr><call><name><name pos:line="185" pos:column="45">sc</name><op:operator pos:line="185" pos:column="47">.</op:operator><name pos:line="185" pos:column="48">MatchIgnoreCase</name></name><argument_list pos:line="185" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="185" pos:column="64">"pragma"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="185" pos:column="74"> <block pos:line="185" pos:column="75">{
						<expr_stmt><expr><call><name><name pos:line="186" pos:column="49">sc</name><op:operator pos:line="186" pos:column="51">.</op:operator><name pos:line="186" pos:column="52">Forward</name></name><argument_list pos:line="186" pos:column="59">(<argument><expr><lit:literal type="number" pos:line="186" pos:column="60">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<do pos:line="187" pos:column="49">do <block pos:line="187" pos:column="52">{	<comment type="line" pos:line="187" pos:column="57">// Skip more whitespace until keyword</comment>
							<expr_stmt><expr><call><name><name pos:line="188" pos:column="57">sc</name><op:operator pos:line="188" pos:column="59">.</op:operator><name pos:line="188" pos:column="60">Forward</name></name><argument_list pos:line="188" pos:column="67">()</argument_list></call></expr>;</expr_stmt>
						}</block> while <condition pos:line="189" pos:column="57">(<expr><call><name pos:line="189" pos:column="58">IsASpaceOrTab</name><argument_list pos:line="189" pos:column="71">(<argument><expr><name><name pos:line="189" pos:column="72">sc</name><op:operator pos:line="189" pos:column="74">.</op:operator><name pos:line="189" pos:column="75">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="189" pos:column="79">&amp;&amp;</op:operator> <call><name><name pos:line="189" pos:column="82">sc</name><op:operator pos:line="189" pos:column="84">.</op:operator><name pos:line="189" pos:column="85">More</name></name><argument_list pos:line="189" pos:column="89">()</argument_list></call></expr>)</condition>;</do>
						<if pos:line="190" pos:column="49">if <condition pos:line="190" pos:column="52">(<expr><call><name><name pos:line="190" pos:column="53">sc</name><op:operator pos:line="190" pos:column="55">.</op:operator><name pos:line="190" pos:column="56">MatchIgnoreCase</name></name><argument_list pos:line="190" pos:column="71">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="72">"enddump"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="190" pos:column="83">||</op:operator> <call><name><name pos:line="190" pos:column="86">sc</name><op:operator pos:line="190" pos:column="88">.</op:operator><name pos:line="190" pos:column="89">MatchIgnoreCase</name></name><argument_list pos:line="190" pos:column="104">(<argument><expr><lit:literal type="string" pos:line="190" pos:column="105">"__endtext"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="190" pos:column="118"> <block pos:line="190" pos:column="119">{
							<expr_stmt><expr><name pos:line="191" pos:column="57">bEnableCode</name> <op:operator pos:line="191" pos:column="69">=</op:operator> <lit:literal type="boolean" pos:line="191" pos:column="71">true</lit:literal></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="192" pos:column="57">sc</name><op:operator pos:line="192" pos:column="59">.</op:operator><name pos:line="192" pos:column="60">SetState</name></name><argument_list pos:line="192" pos:column="68">(<argument><expr><name pos:line="192" pos:column="69">SCE_FS_DISABLEDCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="193" pos:column="57">sc</name><op:operator pos:line="193" pos:column="59">.</op:operator><name pos:line="193" pos:column="60">Forward</name></name><argument_list pos:line="193" pos:column="67">(<argument><expr><name><name pos:line="193" pos:column="68">sc</name><op:operator pos:line="193" pos:column="70">.</op:operator><name pos:line="193" pos:column="71">ch</name></name> <op:operator pos:line="193" pos:column="74">==</op:operator> <lit:literal type="char" pos:line="193" pos:column="77">'_'</lit:literal> <op:operator pos:line="193" pos:column="81">?</op:operator> <lit:literal type="number" pos:line="193" pos:column="83">8</lit:literal> <op:operator pos:line="193" pos:column="85">:</op:operator> <lit:literal type="number" pos:line="193" pos:column="87">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="194" pos:column="57">sc</name><op:operator pos:line="194" pos:column="59">.</op:operator><name pos:line="194" pos:column="60">ForwardSetState</name></name><argument_list pos:line="194" pos:column="75">(<argument><expr><name pos:line="194" pos:column="76">SCE_FS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="195" pos:column="51">else <block pos:line="195" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="196" pos:column="57">sc</name><op:operator pos:line="196" pos:column="59">.</op:operator><name pos:line="196" pos:column="60">ChangeState</name></name><argument_list pos:line="196" pos:column="71">(<argument><expr><name pos:line="196" pos:column="72">SCE_FS_DISABLEDCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then> <else pos:line="198" pos:column="43">else <block pos:line="198" pos:column="48">{
						<expr_stmt><expr><call><name><name pos:line="199" pos:column="49">sc</name><op:operator pos:line="199" pos:column="51">.</op:operator><name pos:line="199" pos:column="52">ChangeState</name></name><argument_list pos:line="199" pos:column="63">(<argument><expr><name pos:line="199" pos:column="64">SCE_FS_DISABLEDCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
				<break pos:line="202" pos:column="33">break;</break>
			</case><case pos:line="203" pos:column="25">case <expr><name pos:line="203" pos:column="30">SCE_FS_DATE</name></expr>:
				<if pos:line="204" pos:column="33">if <condition pos:line="204" pos:column="36">(<expr><name><name pos:line="204" pos:column="37">sc</name><op:operator pos:line="204" pos:column="39">.</op:operator><name pos:line="204" pos:column="40">ch</name></name> <op:operator pos:line="204" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="204" pos:column="46">'}'</lit:literal></expr>)</condition><then pos:line="204" pos:column="50"> <block pos:line="204" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="205" pos:column="41">sc</name><op:operator pos:line="205" pos:column="43">.</op:operator><name pos:line="205" pos:column="44">ForwardSetState</name></name><argument_list pos:line="205" pos:column="59">(<argument><expr><name pos:line="205" pos:column="60">SCE_FS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="206" pos:column="35">else <if pos:line="206" pos:column="40">if <condition pos:line="206" pos:column="43">(<expr><name><name pos:line="206" pos:column="44">sc</name><op:operator pos:line="206" pos:column="46">.</op:operator><name pos:line="206" pos:column="47">atLineEnd</name></name></expr>)</condition><then pos:line="206" pos:column="57"> <block pos:line="206" pos:column="58">{
					<expr_stmt><expr><call><name><name pos:line="207" pos:column="41">sc</name><op:operator pos:line="207" pos:column="43">.</op:operator><name pos:line="207" pos:column="44">ChangeState</name></name><argument_list pos:line="207" pos:column="55">(<argument><expr><name pos:line="207" pos:column="56">SCE_FS_STRINGEOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></else></if>
		</case>}</block></switch>

		<comment type="line" pos:line="211" pos:column="17">// Determine if a new state should be entered.</comment>
		<if pos:line="212" pos:column="17">if <condition pos:line="212" pos:column="20">(<expr><name><name pos:line="212" pos:column="21">sc</name><op:operator pos:line="212" pos:column="23">.</op:operator><name pos:line="212" pos:column="24">state</name></name> <op:operator pos:line="212" pos:column="30">==</op:operator> <name pos:line="212" pos:column="33">SCE_FS_DEFAULT</name> <op:operator pos:line="212" pos:column="48">||</op:operator> <name><name pos:line="212" pos:column="51">sc</name><op:operator pos:line="212" pos:column="53">.</op:operator><name pos:line="212" pos:column="54">state</name></name> <op:operator pos:line="212" pos:column="60">==</op:operator> <name pos:line="212" pos:column="63">SCE_FS_DEFAULT_C</name></expr>)</condition><then pos:line="212" pos:column="80"> <block pos:line="212" pos:column="81">{
			<if pos:line="213" pos:column="25">if <condition pos:line="213" pos:column="28">(<expr><name pos:line="213" pos:column="29">bEnableCode</name> <op:operator pos:line="213" pos:column="41">&amp;&amp;</op:operator>
					<op:operator pos:line="214" pos:column="41">(</op:operator><call><name><name pos:line="214" pos:column="42">sc</name><op:operator pos:line="214" pos:column="44">.</op:operator><name pos:line="214" pos:column="45">MatchIgnoreCase</name></name><argument_list pos:line="214" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="61">".and."</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="214" pos:column="70">||</op:operator> <call><name><name pos:line="214" pos:column="73">sc</name><op:operator pos:line="214" pos:column="75">.</op:operator><name pos:line="214" pos:column="76">MatchIgnoreCase</name></name><argument_list pos:line="214" pos:column="91">(<argument><expr><lit:literal type="string" pos:line="214" pos:column="92">".not."</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="214" pos:column="100">)</op:operator></expr>)</condition><then pos:line="214" pos:column="102"> <block pos:line="214" pos:column="103">{
				<expr_stmt><expr><call><name><name pos:line="215" pos:column="33">sc</name><op:operator pos:line="215" pos:column="35">.</op:operator><name pos:line="215" pos:column="36">SetState</name></name><argument_list pos:line="215" pos:column="44">(<argument><expr><name pos:line="215" pos:column="45">SCE_FS_WORDOPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="216" pos:column="33">sc</name><op:operator pos:line="216" pos:column="35">.</op:operator><name pos:line="216" pos:column="36">Forward</name></name><argument_list pos:line="216" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="216" pos:column="44">4</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="217" pos:column="27">else <if pos:line="217" pos:column="32">if <condition pos:line="217" pos:column="35">(<expr><name pos:line="217" pos:column="36">bEnableCode</name> <op:operator pos:line="217" pos:column="48">&amp;&amp;</op:operator> <call><name><name pos:line="217" pos:column="51">sc</name><op:operator pos:line="217" pos:column="53">.</op:operator><name pos:line="217" pos:column="54">MatchIgnoreCase</name></name><argument_list pos:line="217" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="217" pos:column="70">".or."</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="217" pos:column="78"> <block pos:line="217" pos:column="79">{
				<expr_stmt><expr><call><name><name pos:line="218" pos:column="33">sc</name><op:operator pos:line="218" pos:column="35">.</op:operator><name pos:line="218" pos:column="36">SetState</name></name><argument_list pos:line="218" pos:column="44">(<argument><expr><name pos:line="218" pos:column="45">SCE_FS_WORDOPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="219" pos:column="33">sc</name><op:operator pos:line="219" pos:column="35">.</op:operator><name pos:line="219" pos:column="36">Forward</name></name><argument_list pos:line="219" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="219" pos:column="44">3</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="220" pos:column="27">else <if pos:line="220" pos:column="32">if <condition pos:line="220" pos:column="35">(<expr><name pos:line="220" pos:column="36">bEnableCode</name> <op:operator pos:line="220" pos:column="48">&amp;&amp;</op:operator>
					<op:operator pos:line="221" pos:column="41">(</op:operator><call><name><name pos:line="221" pos:column="42">sc</name><op:operator pos:line="221" pos:column="44">.</op:operator><name pos:line="221" pos:column="45">MatchIgnoreCase</name></name><argument_list pos:line="221" pos:column="60">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="61">".t."</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="221" pos:column="68">||</op:operator> <call><name><name pos:line="221" pos:column="71">sc</name><op:operator pos:line="221" pos:column="73">.</op:operator><name pos:line="221" pos:column="74">MatchIgnoreCase</name></name><argument_list pos:line="221" pos:column="89">(<argument><expr><lit:literal type="string" pos:line="221" pos:column="90">".f."</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="221" pos:column="97">||</op:operator>
					<op:operator pos:line="222" pos:column="41">(</op:operator><op:operator pos:line="222" pos:column="42">!</op:operator><call><name pos:line="222" pos:column="43">IsAWordChar</name><argument_list pos:line="222" pos:column="54">(<argument><expr><call><name><name pos:line="222" pos:column="55">sc</name><op:operator pos:line="222" pos:column="57">.</op:operator><name pos:line="222" pos:column="58">GetRelative</name></name><argument_list pos:line="222" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="222" pos:column="70">3</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="222" pos:column="74">&amp;&amp;</op:operator> <call><name><name pos:line="222" pos:column="77">sc</name><op:operator pos:line="222" pos:column="79">.</op:operator><name pos:line="222" pos:column="80">MatchIgnoreCase</name></name><argument_list pos:line="222" pos:column="95">(<argument><expr><lit:literal type="string" pos:line="222" pos:column="96">"nil"</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="222" pos:column="102">)</op:operator><op:operator pos:line="222" pos:column="103">)</op:operator></expr>)</condition><then pos:line="222" pos:column="105"> <block pos:line="222" pos:column="106">{
				<expr_stmt><expr><call><name><name pos:line="223" pos:column="33">sc</name><op:operator pos:line="223" pos:column="35">.</op:operator><name pos:line="223" pos:column="36">SetState</name></name><argument_list pos:line="223" pos:column="44">(<argument><expr><name pos:line="223" pos:column="45">SCE_FS_CONSTANT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="224" pos:column="33">sc</name><op:operator pos:line="224" pos:column="35">.</op:operator><name pos:line="224" pos:column="36">Forward</name></name><argument_list pos:line="224" pos:column="43">(<argument><expr><lit:literal type="number" pos:line="224" pos:column="44">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="225" pos:column="27">else <if pos:line="225" pos:column="32">if <condition pos:line="225" pos:column="35">(<expr><call><name><name pos:line="225" pos:column="36">sc</name><op:operator pos:line="225" pos:column="38">.</op:operator><name pos:line="225" pos:column="39">Match</name></name><argument_list pos:line="225" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="225" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="225" pos:column="50">'*'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="225" pos:column="55"> <block pos:line="225" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="226" pos:column="33">sc</name><op:operator pos:line="226" pos:column="35">.</op:operator><name pos:line="226" pos:column="36">SetState</name></name><argument_list pos:line="226" pos:column="44">(<argument><expr><name pos:line="226" pos:column="45">bEnableCode</name> <op:operator pos:line="226" pos:column="57">?</op:operator> <name pos:line="226" pos:column="59">SCE_FS_COMMENTDOC</name> <op:operator pos:line="226" pos:column="77">:</op:operator> <name pos:line="226" pos:column="79">SCE_FS_COMMENTDOC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="227" pos:column="33">sc</name><op:operator pos:line="227" pos:column="35">.</op:operator><name pos:line="227" pos:column="36">Forward</name></name><argument_list pos:line="227" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="228" pos:column="27">else <if pos:line="228" pos:column="32">if <condition pos:line="228" pos:column="35">(<expr><name pos:line="228" pos:column="36">bEnableCode</name> <op:operator pos:line="228" pos:column="48">&amp;&amp;</op:operator> <call><name><name pos:line="228" pos:column="51">sc</name><op:operator pos:line="228" pos:column="53">.</op:operator><name pos:line="228" pos:column="54">Match</name></name><argument_list pos:line="228" pos:column="59">(<argument><expr><lit:literal type="char" pos:line="228" pos:column="60">'&amp;'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="228" pos:column="65">'&amp;'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="228" pos:column="70"> <block pos:line="228" pos:column="71">{
				<expr_stmt><expr><call><name><name pos:line="229" pos:column="33">sc</name><op:operator pos:line="229" pos:column="35">.</op:operator><name pos:line="229" pos:column="36">SetState</name></name><argument_list pos:line="229" pos:column="44">(<argument><expr><name pos:line="229" pos:column="45">SCE_FS_COMMENTLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="230" pos:column="33">sc</name><op:operator pos:line="230" pos:column="35">.</op:operator><name pos:line="230" pos:column="36">Forward</name></name><argument_list pos:line="230" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="231" pos:column="27">else <if pos:line="231" pos:column="32">if <condition pos:line="231" pos:column="35">(<expr><call><name><name pos:line="231" pos:column="36">sc</name><op:operator pos:line="231" pos:column="38">.</op:operator><name pos:line="231" pos:column="39">Match</name></name><argument_list pos:line="231" pos:column="44">(<argument><expr><lit:literal type="char" pos:line="231" pos:column="45">'/'</lit:literal></expr></argument>, <argument><expr><lit:literal type="char" pos:line="231" pos:column="50">'/'</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="231" pos:column="55"> <block pos:line="231" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="232" pos:column="33">sc</name><op:operator pos:line="232" pos:column="35">.</op:operator><name pos:line="232" pos:column="36">SetState</name></name><argument_list pos:line="232" pos:column="44">(<argument><expr><name pos:line="232" pos:column="45">bEnableCode</name> <op:operator pos:line="232" pos:column="57">?</op:operator> <name pos:line="232" pos:column="59">SCE_FS_COMMENTLINEDOC</name> <op:operator pos:line="232" pos:column="81">:</op:operator> <name pos:line="232" pos:column="83">SCE_FS_COMMENTLINEDOC_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="233" pos:column="33">sc</name><op:operator pos:line="233" pos:column="35">.</op:operator><name pos:line="233" pos:column="36">Forward</name></name><argument_list pos:line="233" pos:column="43">()</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="234" pos:column="27">else <if pos:line="234" pos:column="32">if <condition pos:line="234" pos:column="35">(<expr><name pos:line="234" pos:column="36">bEnableCode</name> <op:operator pos:line="234" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="234" pos:column="51">sc</name><op:operator pos:line="234" pos:column="53">.</op:operator><name pos:line="234" pos:column="54">ch</name></name> <op:operator pos:line="234" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="234" pos:column="60">'*'</lit:literal> <op:operator pos:line="234" pos:column="64">&amp;&amp;</op:operator> <name pos:line="234" pos:column="67">visibleChars</name> <op:operator pos:line="234" pos:column="80">==</op:operator> <lit:literal type="number" pos:line="234" pos:column="83">0</lit:literal></expr>)</condition><then pos:line="234" pos:column="85"> <block pos:line="234" pos:column="86">{
				<expr_stmt><expr><call><name><name pos:line="235" pos:column="33">sc</name><op:operator pos:line="235" pos:column="35">.</op:operator><name pos:line="235" pos:column="36">SetState</name></name><argument_list pos:line="235" pos:column="44">(<argument><expr><name pos:line="235" pos:column="45">SCE_FS_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="236" pos:column="27">else <if pos:line="236" pos:column="32">if <condition pos:line="236" pos:column="35">(<expr><name><name pos:line="236" pos:column="36">sc</name><op:operator pos:line="236" pos:column="38">.</op:operator><name pos:line="236" pos:column="39">ch</name></name> <op:operator pos:line="236" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="236" pos:column="45">'\"'</lit:literal> <op:operator pos:line="236" pos:column="50">||</op:operator> <name><name pos:line="236" pos:column="53">sc</name><op:operator pos:line="236" pos:column="55">.</op:operator><name pos:line="236" pos:column="56">ch</name></name> <op:operator pos:line="236" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="236" pos:column="62">'\''</lit:literal></expr>)</condition><then pos:line="236" pos:column="67"> <block pos:line="236" pos:column="68">{
				<expr_stmt><expr><call><name><name pos:line="237" pos:column="33">sc</name><op:operator pos:line="237" pos:column="35">.</op:operator><name pos:line="237" pos:column="36">SetState</name></name><argument_list pos:line="237" pos:column="44">(<argument><expr><name pos:line="237" pos:column="45">bEnableCode</name> <op:operator pos:line="237" pos:column="57">?</op:operator> <name pos:line="237" pos:column="59">SCE_FS_STRING</name> <op:operator pos:line="237" pos:column="73">:</op:operator> <name pos:line="237" pos:column="75">SCE_FS_STRING_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="238" pos:column="33">closeStringChar</name> <op:operator pos:line="238" pos:column="49">=</op:operator> <name><name pos:line="238" pos:column="51">sc</name><op:operator pos:line="238" pos:column="53">.</op:operator><name pos:line="238" pos:column="54">ch</name></name></expr>;</expr_stmt>
			}</block></then> <else pos:line="239" pos:column="27">else <if pos:line="239" pos:column="32">if <condition pos:line="239" pos:column="35">(<expr><name pos:line="239" pos:column="36">closeStringChar</name> <op:operator pos:line="239" pos:column="52">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="55">'&gt;'</lit:literal> <op:operator pos:line="239" pos:column="59">&amp;&amp;</op:operator> <name><name pos:line="239" pos:column="62">sc</name><op:operator pos:line="239" pos:column="64">.</op:operator><name pos:line="239" pos:column="65">ch</name></name> <op:operator pos:line="239" pos:column="68">==</op:operator> <lit:literal type="char" pos:line="239" pos:column="71">'&lt;'</lit:literal></expr>)</condition><then pos:line="239" pos:column="75"> <block pos:line="239" pos:column="76">{
				<expr_stmt><expr><call><name><name pos:line="240" pos:column="33">sc</name><op:operator pos:line="240" pos:column="35">.</op:operator><name pos:line="240" pos:column="36">SetState</name></name><argument_list pos:line="240" pos:column="44">(<argument><expr><name pos:line="240" pos:column="45">bEnableCode</name> <op:operator pos:line="240" pos:column="57">?</op:operator> <name pos:line="240" pos:column="59">SCE_FS_STRING</name> <op:operator pos:line="240" pos:column="73">:</op:operator> <name pos:line="240" pos:column="75">SCE_FS_STRING_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="241" pos:column="27">else <if pos:line="241" pos:column="32">if <condition pos:line="241" pos:column="35">(<expr><name><name pos:line="241" pos:column="36">sc</name><op:operator pos:line="241" pos:column="38">.</op:operator><name pos:line="241" pos:column="39">ch</name></name> <op:operator pos:line="241" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="241" pos:column="45">'#'</lit:literal> <op:operator pos:line="241" pos:column="49">&amp;&amp;</op:operator> <name pos:line="241" pos:column="52">visibleChars</name> <op:operator pos:line="241" pos:column="65">==</op:operator> <lit:literal type="number" pos:line="241" pos:column="68">0</lit:literal></expr>)</condition><then pos:line="241" pos:column="70"> <block pos:line="241" pos:column="71">{
				<expr_stmt><expr><call><name><name pos:line="242" pos:column="33">sc</name><op:operator pos:line="242" pos:column="35">.</op:operator><name pos:line="242" pos:column="36">SetState</name></name><argument_list pos:line="242" pos:column="44">(<argument><expr><name pos:line="242" pos:column="45">bEnableCode</name> <op:operator pos:line="242" pos:column="57">?</op:operator> <name pos:line="242" pos:column="59">SCE_FS_PREPROCESSOR</name> <op:operator pos:line="242" pos:column="79">:</op:operator> <name pos:line="242" pos:column="81">SCE_FS_PREPROCESSOR_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<do pos:line="243" pos:column="33">do <block pos:line="243" pos:column="36">{	<comment type="line" pos:line="243" pos:column="41">// Skip whitespace between # and preprocessor word</comment>
					<expr_stmt><expr><call><name><name pos:line="244" pos:column="41">sc</name><op:operator pos:line="244" pos:column="43">.</op:operator><name pos:line="244" pos:column="44">Forward</name></name><argument_list pos:line="244" pos:column="51">()</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="245" pos:column="41">(<expr><call><name pos:line="245" pos:column="42">IsASpaceOrTab</name><argument_list pos:line="245" pos:column="55">(<argument><expr><name><name pos:line="245" pos:column="56">sc</name><op:operator pos:line="245" pos:column="58">.</op:operator><name pos:line="245" pos:column="59">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="245" pos:column="63">&amp;&amp;</op:operator> <call><name><name pos:line="245" pos:column="66">sc</name><op:operator pos:line="245" pos:column="68">.</op:operator><name pos:line="245" pos:column="69">More</name></name><argument_list pos:line="245" pos:column="73">()</argument_list></call></expr>)</condition>;</do>
				<if pos:line="246" pos:column="33">if <condition pos:line="246" pos:column="36">(<expr><name><name pos:line="246" pos:column="37">sc</name><op:operator pos:line="246" pos:column="39">.</op:operator><name pos:line="246" pos:column="40">atLineEnd</name></name></expr>)</condition><then pos:line="246" pos:column="50"> <block pos:line="246" pos:column="51">{
					<expr_stmt><expr><call><name><name pos:line="247" pos:column="41">sc</name><op:operator pos:line="247" pos:column="43">.</op:operator><name pos:line="247" pos:column="44">SetState</name></name><argument_list pos:line="247" pos:column="52">(<argument><expr><name pos:line="247" pos:column="53">bEnableCode</name> <op:operator pos:line="247" pos:column="65">?</op:operator> <name pos:line="247" pos:column="67">SCE_FS_DEFAULT</name> <op:operator pos:line="247" pos:column="82">:</op:operator> <name pos:line="247" pos:column="84">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="248" pos:column="35">else <if pos:line="248" pos:column="40">if <condition pos:line="248" pos:column="43">(<expr><call><name><name pos:line="248" pos:column="44">sc</name><op:operator pos:line="248" pos:column="46">.</op:operator><name pos:line="248" pos:column="47">MatchIgnoreCase</name></name><argument_list pos:line="248" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="248" pos:column="63">"include"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="248" pos:column="74"> <block pos:line="248" pos:column="75">{
					<if pos:line="249" pos:column="41">if <condition pos:line="249" pos:column="44">(<expr><name pos:line="249" pos:column="45">stylingWithinPreprocessor</name></expr>)</condition><then pos:line="249" pos:column="71"> <block pos:line="249" pos:column="72">{
						<expr_stmt><expr><name pos:line="250" pos:column="49">closeStringChar</name> <op:operator pos:line="250" pos:column="65">=</op:operator> <lit:literal type="char" pos:line="250" pos:column="67">'&gt;'</lit:literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <else pos:line="252" pos:column="35">else <if pos:line="252" pos:column="40">if <condition pos:line="252" pos:column="43">(<expr><call><name><name pos:line="252" pos:column="44">sc</name><op:operator pos:line="252" pos:column="46">.</op:operator><name pos:line="252" pos:column="47">MatchIgnoreCase</name></name><argument_list pos:line="252" pos:column="62">(<argument><expr><lit:literal type="string" pos:line="252" pos:column="63">"pragma"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="252" pos:column="73"> <block pos:line="252" pos:column="74">{
					<expr_stmt><expr><call><name><name pos:line="253" pos:column="41">sc</name><op:operator pos:line="253" pos:column="43">.</op:operator><name pos:line="253" pos:column="44">Forward</name></name><argument_list pos:line="253" pos:column="51">(<argument><expr><lit:literal type="number" pos:line="253" pos:column="52">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<do pos:line="254" pos:column="41">do <block pos:line="254" pos:column="44">{	<comment type="line" pos:line="254" pos:column="49">// Skip more whitespace until keyword</comment>
						<expr_stmt><expr><call><name><name pos:line="255" pos:column="49">sc</name><op:operator pos:line="255" pos:column="51">.</op:operator><name pos:line="255" pos:column="52">Forward</name></name><argument_list pos:line="255" pos:column="59">()</argument_list></call></expr>;</expr_stmt>
					}</block> while <condition pos:line="256" pos:column="49">(<expr><call><name pos:line="256" pos:column="50">IsASpaceOrTab</name><argument_list pos:line="256" pos:column="63">(<argument><expr><name><name pos:line="256" pos:column="64">sc</name><op:operator pos:line="256" pos:column="66">.</op:operator><name pos:line="256" pos:column="67">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="256" pos:column="71">&amp;&amp;</op:operator> <call><name><name pos:line="256" pos:column="74">sc</name><op:operator pos:line="256" pos:column="76">.</op:operator><name pos:line="256" pos:column="77">More</name></name><argument_list pos:line="256" pos:column="81">()</argument_list></call></expr>)</condition>;</do>
					<if pos:line="257" pos:column="41">if <condition pos:line="257" pos:column="44">(<expr><call><name><name pos:line="257" pos:column="45">sc</name><op:operator pos:line="257" pos:column="47">.</op:operator><name pos:line="257" pos:column="48">MatchIgnoreCase</name></name><argument_list pos:line="257" pos:column="63">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="64">"begindump"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="257" pos:column="77">||</op:operator> <call><name><name pos:line="257" pos:column="80">sc</name><op:operator pos:line="257" pos:column="82">.</op:operator><name pos:line="257" pos:column="83">MatchIgnoreCase</name></name><argument_list pos:line="257" pos:column="98">(<argument><expr><lit:literal type="string" pos:line="257" pos:column="99">"__cstream"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="257" pos:column="112"> <block pos:line="257" pos:column="113">{
						<expr_stmt><expr><name pos:line="258" pos:column="49">bEnableCode</name> <op:operator pos:line="258" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="258" pos:column="63">false</lit:literal></expr>;</expr_stmt>
						<if pos:line="259" pos:column="49">if <condition pos:line="259" pos:column="52">(<expr><name pos:line="259" pos:column="53">stylingWithinPreprocessor</name></expr>)</condition><then pos:line="259" pos:column="79"> <block pos:line="259" pos:column="80">{
							<expr_stmt><expr><call><name><name pos:line="260" pos:column="57">sc</name><op:operator pos:line="260" pos:column="59">.</op:operator><name pos:line="260" pos:column="60">SetState</name></name><argument_list pos:line="260" pos:column="68">(<argument><expr><name pos:line="260" pos:column="69">SCE_FS_DISABLEDCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="261" pos:column="57">sc</name><op:operator pos:line="261" pos:column="59">.</op:operator><name pos:line="261" pos:column="60">Forward</name></name><argument_list pos:line="261" pos:column="67">(<argument><expr><lit:literal type="number" pos:line="261" pos:column="68">8</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name><name pos:line="262" pos:column="57">sc</name><op:operator pos:line="262" pos:column="59">.</op:operator><name pos:line="262" pos:column="60">ForwardSetState</name></name><argument_list pos:line="262" pos:column="75">(<argument><expr><name pos:line="262" pos:column="76">SCE_FS_DEFAULT_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then> <else pos:line="263" pos:column="51">else <block pos:line="263" pos:column="56">{
							<expr_stmt><expr><call><name><name pos:line="264" pos:column="57">sc</name><op:operator pos:line="264" pos:column="59">.</op:operator><name pos:line="264" pos:column="60">SetState</name></name><argument_list pos:line="264" pos:column="68">(<argument><expr><name pos:line="264" pos:column="69">SCE_FS_DISABLEDCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then> <else pos:line="266" pos:column="43">else <if pos:line="266" pos:column="48">if <condition pos:line="266" pos:column="51">(<expr><call><name><name pos:line="266" pos:column="52">sc</name><op:operator pos:line="266" pos:column="54">.</op:operator><name pos:line="266" pos:column="55">MatchIgnoreCase</name></name><argument_list pos:line="266" pos:column="70">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="71">"enddump"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="266" pos:column="82">||</op:operator> <call><name><name pos:line="266" pos:column="85">sc</name><op:operator pos:line="266" pos:column="87">.</op:operator><name pos:line="266" pos:column="88">MatchIgnoreCase</name></name><argument_list pos:line="266" pos:column="103">(<argument><expr><lit:literal type="string" pos:line="266" pos:column="104">"__endtext"</lit:literal></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="266" pos:column="117"> <block pos:line="266" pos:column="118">{
						<expr_stmt><expr><name pos:line="267" pos:column="49">bEnableCode</name> <op:operator pos:line="267" pos:column="61">=</op:operator> <lit:literal type="boolean" pos:line="267" pos:column="63">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="268" pos:column="49">sc</name><op:operator pos:line="268" pos:column="51">.</op:operator><name pos:line="268" pos:column="52">SetState</name></name><argument_list pos:line="268" pos:column="60">(<argument><expr><name pos:line="268" pos:column="61">SCE_FS_DISABLEDCODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="269" pos:column="49">sc</name><op:operator pos:line="269" pos:column="51">.</op:operator><name pos:line="269" pos:column="52">Forward</name></name><argument_list pos:line="269" pos:column="59">(<argument><expr><name><name pos:line="269" pos:column="60">sc</name><op:operator pos:line="269" pos:column="62">.</op:operator><name pos:line="269" pos:column="63">ch</name></name> <op:operator pos:line="269" pos:column="66">==</op:operator> <lit:literal type="char" pos:line="269" pos:column="69">'_'</lit:literal> <op:operator pos:line="269" pos:column="73">?</op:operator> <lit:literal type="number" pos:line="269" pos:column="75">8</lit:literal> <op:operator pos:line="269" pos:column="77">:</op:operator> <lit:literal type="number" pos:line="269" pos:column="79">6</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name pos:line="270" pos:column="49">sc</name><op:operator pos:line="270" pos:column="51">.</op:operator><name pos:line="270" pos:column="52">ForwardSetState</name></name><argument_list pos:line="270" pos:column="67">(<argument><expr><name pos:line="270" pos:column="68">SCE_FS_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>
				}</block></then></if></else></if></else></if>
			}</block></then> <else pos:line="273" pos:column="27">else <if pos:line="273" pos:column="32">if <condition pos:line="273" pos:column="35">(<expr><name pos:line="273" pos:column="36">bEnableCode</name> <op:operator pos:line="273" pos:column="48">&amp;&amp;</op:operator> <name><name pos:line="273" pos:column="51">sc</name><op:operator pos:line="273" pos:column="53">.</op:operator><name pos:line="273" pos:column="54">ch</name></name> <op:operator pos:line="273" pos:column="57">==</op:operator> <lit:literal type="char" pos:line="273" pos:column="60">'{'</lit:literal></expr>)</condition><then pos:line="273" pos:column="64"> <block pos:line="273" pos:column="65">{
				<decl_stmt><decl><type><name pos:line="274" pos:column="33">int</name></type> <name pos:line="274" pos:column="37">p</name> <init pos:line="274" pos:column="39">= <expr><lit:literal type="number" pos:line="274" pos:column="41">0</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="275" pos:column="33">int</name></type> <name pos:line="275" pos:column="37">chSeek</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name pos:line="276" pos:column="33">unsigned</name> <name pos:line="276" pos:column="42">int</name></type> <name pos:line="276" pos:column="46">endPos</name><argument_list pos:line="276" pos:column="52">(<argument><expr><name pos:line="276" pos:column="53">startPos</name> <op:operator pos:line="276" pos:column="62">+</op:operator> <name pos:line="276" pos:column="64">length</name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<do pos:line="277" pos:column="33">do <block pos:line="277" pos:column="36">{	<comment type="line" pos:line="277" pos:column="41">// Skip whitespace</comment>
					<expr_stmt><expr><name pos:line="278" pos:column="41">chSeek</name> <op:operator pos:line="278" pos:column="48">=</op:operator> <call><name><name pos:line="278" pos:column="50">sc</name><op:operator pos:line="278" pos:column="52">.</op:operator><name pos:line="278" pos:column="53">GetRelative</name></name><argument_list pos:line="278" pos:column="64">(<argument><expr><op:operator pos:line="278" pos:column="65">++</op:operator><name pos:line="278" pos:column="67">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block> while <condition pos:line="279" pos:column="41">(<expr><call><name pos:line="279" pos:column="42">IsASpaceOrTab</name><argument_list pos:line="279" pos:column="55">(<argument><expr><name pos:line="279" pos:column="56">chSeek</name></expr></argument>)</argument_list></call> <op:operator pos:line="279" pos:column="64">&amp;&amp;</op:operator> <op:operator pos:line="279" pos:column="67">(</op:operator><name><name pos:line="279" pos:column="68">sc</name><op:operator pos:line="279" pos:column="70">.</op:operator><name pos:line="279" pos:column="71">currentPos</name></name> <op:operator pos:line="279" pos:column="82">+</op:operator> <name pos:line="279" pos:column="84">p</name> <op:operator pos:line="279" pos:column="86">&lt;</op:operator> <name pos:line="279" pos:column="88">endPos</name><op:operator pos:line="279" pos:column="94">)</op:operator></expr>)</condition>;</do>
				<if pos:line="280" pos:column="33">if <condition pos:line="280" pos:column="36">(<expr><name pos:line="280" pos:column="37">chSeek</name> <op:operator pos:line="280" pos:column="44">==</op:operator> <lit:literal type="char" pos:line="280" pos:column="47">'^'</lit:literal></expr>)</condition><then pos:line="280" pos:column="51"> <block pos:line="280" pos:column="52">{
					<expr_stmt><expr><call><name><name pos:line="281" pos:column="41">sc</name><op:operator pos:line="281" pos:column="43">.</op:operator><name pos:line="281" pos:column="44">SetState</name></name><argument_list pos:line="281" pos:column="52">(<argument><expr><name pos:line="281" pos:column="53">SCE_FS_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then> <else pos:line="282" pos:column="35">else <block pos:line="282" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="283" pos:column="41">sc</name><op:operator pos:line="283" pos:column="43">.</op:operator><name pos:line="283" pos:column="44">SetState</name></name><argument_list pos:line="283" pos:column="52">(<argument><expr><name pos:line="283" pos:column="53">SCE_FS_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else pos:line="285" pos:column="27">else <if pos:line="285" pos:column="32">if <condition pos:line="285" pos:column="35">(<expr><call><name pos:line="285" pos:column="36">IsADigit</name><argument_list pos:line="285" pos:column="44">(<argument><expr><name><name pos:line="285" pos:column="45">sc</name><op:operator pos:line="285" pos:column="47">.</op:operator><name pos:line="285" pos:column="48">ch</name></name></expr></argument>)</argument_list></call> <op:operator pos:line="285" pos:column="52">||</op:operator> <op:operator pos:line="285" pos:column="55">(</op:operator><name><name pos:line="285" pos:column="56">sc</name><op:operator pos:line="285" pos:column="58">.</op:operator><name pos:line="285" pos:column="59">ch</name></name> <op:operator pos:line="285" pos:column="62">==</op:operator> <lit:literal type="char" pos:line="285" pos:column="65">'.'</lit:literal> <op:operator pos:line="285" pos:column="69">&amp;&amp;</op:operator> <call><name pos:line="285" pos:column="72">IsADigit</name><argument_list pos:line="285" pos:column="80">(<argument><expr><name><name pos:line="285" pos:column="81">sc</name><op:operator pos:line="285" pos:column="83">.</op:operator><name pos:line="285" pos:column="84">chNext</name></name></expr></argument>)</argument_list></call><op:operator pos:line="285" pos:column="91">)</op:operator></expr>)</condition><then pos:line="285" pos:column="93"> <block pos:line="285" pos:column="94">{
				<expr_stmt><expr><call><name><name pos:line="286" pos:column="33">sc</name><op:operator pos:line="286" pos:column="35">.</op:operator><name pos:line="286" pos:column="36">SetState</name></name><argument_list pos:line="286" pos:column="44">(<argument><expr><name pos:line="286" pos:column="45">bEnableCode</name> <op:operator pos:line="286" pos:column="57">?</op:operator> <name pos:line="286" pos:column="59">SCE_FS_NUMBER</name> <op:operator pos:line="286" pos:column="73">:</op:operator> <name pos:line="286" pos:column="75">SCE_FS_NUMBER_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="287" pos:column="27">else <if pos:line="287" pos:column="32">if <condition pos:line="287" pos:column="35">(<expr><call><name pos:line="287" pos:column="36">IsAWordChar</name><argument_list pos:line="287" pos:column="47">(<argument><expr><name><name pos:line="287" pos:column="48">sc</name><op:operator pos:line="287" pos:column="50">.</op:operator><name pos:line="287" pos:column="51">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="287" pos:column="55"> <block pos:line="287" pos:column="56">{
				<expr_stmt><expr><call><name><name pos:line="288" pos:column="33">sc</name><op:operator pos:line="288" pos:column="35">.</op:operator><name pos:line="288" pos:column="36">SetState</name></name><argument_list pos:line="288" pos:column="44">(<argument><expr><name pos:line="288" pos:column="45">bEnableCode</name> <op:operator pos:line="288" pos:column="57">?</op:operator> <name pos:line="288" pos:column="59">SCE_FS_IDENTIFIER</name> <op:operator pos:line="288" pos:column="77">:</op:operator> <name pos:line="288" pos:column="79">SCE_FS_IDENTIFIER_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="289" pos:column="27">else <if pos:line="289" pos:column="32">if <condition pos:line="289" pos:column="35">(<expr><call><name pos:line="289" pos:column="36">isoperator</name><argument_list pos:line="289" pos:column="46">(<argument><expr><call><name><name pos:line="289" pos:column="47">static_cast</name><argument_list pos:line="289" pos:column="58">&lt;<argument><expr><name pos:line="289" pos:column="59">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="289" pos:column="64">(<argument><expr><name><name pos:line="289" pos:column="65">sc</name><op:operator pos:line="289" pos:column="67">.</op:operator><name pos:line="289" pos:column="68">ch</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <op:operator pos:line="289" pos:column="73">||</op:operator> <op:operator pos:line="289" pos:column="76">(</op:operator><name pos:line="289" pos:column="77">bEnableCode</name> <op:operator pos:line="289" pos:column="89">&amp;&amp;</op:operator> <name><name pos:line="289" pos:column="92">sc</name><op:operator pos:line="289" pos:column="94">.</op:operator><name pos:line="289" pos:column="95">ch</name></name> <op:operator pos:line="289" pos:column="98">==</op:operator> <lit:literal type="char" pos:line="289" pos:column="101">'@'</lit:literal><op:operator pos:line="289" pos:column="104">)</op:operator></expr>)</condition><then pos:line="289" pos:column="106"> <block pos:line="289" pos:column="107">{
				<expr_stmt><expr><call><name><name pos:line="290" pos:column="33">sc</name><op:operator pos:line="290" pos:column="35">.</op:operator><name pos:line="290" pos:column="36">SetState</name></name><argument_list pos:line="290" pos:column="44">(<argument><expr><name pos:line="290" pos:column="45">bEnableCode</name> <op:operator pos:line="290" pos:column="57">?</op:operator> <name pos:line="290" pos:column="59">SCE_FS_OPERATOR</name> <op:operator pos:line="290" pos:column="75">:</op:operator> <name pos:line="290" pos:column="77">SCE_FS_OPERATOR_C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
		}</block></then></if>

		<if pos:line="294" pos:column="17">if <condition pos:line="294" pos:column="20">(<expr><name><name pos:line="294" pos:column="21">sc</name><op:operator pos:line="294" pos:column="23">.</op:operator><name pos:line="294" pos:column="24">atLineEnd</name></name></expr>)</condition><then pos:line="294" pos:column="34"> <block pos:line="294" pos:column="35">{
			<expr_stmt><expr><name pos:line="295" pos:column="25">visibleChars</name> <op:operator pos:line="295" pos:column="38">=</op:operator> <lit:literal type="number" pos:line="295" pos:column="40">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="296" pos:column="25">closeStringChar</name> <op:operator pos:line="296" pos:column="41">=</op:operator> <lit:literal type="number" pos:line="296" pos:column="43">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
		<if pos:line="298" pos:column="17">if <condition pos:line="298" pos:column="20">(<expr><op:operator pos:line="298" pos:column="21">!</op:operator><call><name pos:line="298" pos:column="22">IsASpace</name><argument_list pos:line="298" pos:column="30">(<argument><expr><name><name pos:line="298" pos:column="31">sc</name><op:operator pos:line="298" pos:column="33">.</op:operator><name pos:line="298" pos:column="34">ch</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="298" pos:column="38"> <block pos:line="298" pos:column="39">{
			<expr_stmt><expr><name pos:line="299" pos:column="25">visibleChars</name><op:operator pos:line="299" pos:column="37">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name pos:line="302" pos:column="9">sc</name><op:operator pos:line="302" pos:column="11">.</op:operator><name pos:line="302" pos:column="12">Complete</name></name><argument_list pos:line="302" pos:column="20">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="305" pos:column="1">static</specifier> <name pos:line="305" pos:column="8">void</name></type> <name pos:line="305" pos:column="13">FoldFlagShipDoc</name><parameter_list pos:line="305" pos:column="28">(<param><decl><type><name pos:line="305" pos:column="29">unsigned</name> <name pos:line="305" pos:column="38">int</name></type> <name pos:line="305" pos:column="42">startPos</name></decl></param>, <param><decl><type><name pos:line="305" pos:column="52">int</name></type> <name pos:line="305" pos:column="56">length</name></decl></param>, <param><decl><type><name pos:line="305" pos:column="64">int</name></type></decl></param>,
									<param><decl><type><name><name pos:line="306" pos:column="73">WordList</name> <type:modifier pos:line="306" pos:column="82">*</type:modifier><index pos:line="306" pos:column="83">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="306" pos:column="87">Accessor</name> <type:modifier pos:line="306" pos:column="96">&amp;</type:modifier></type><name pos:line="306" pos:column="97">styler</name></decl></param>)</parameter_list>
<block pos:line="307" pos:column="1">{

	<decl_stmt><decl><type><name pos:line="309" pos:column="9">int</name></type> <name pos:line="309" pos:column="13">endPos</name> <init pos:line="309" pos:column="20">= <expr><name pos:line="309" pos:column="22">startPos</name> <op:operator pos:line="309" pos:column="31">+</op:operator> <name pos:line="309" pos:column="33">length</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="311" pos:column="9">// Backtrack to previous line in case need to fix its fold status</comment>
	<decl_stmt><decl><type><name pos:line="312" pos:column="9">int</name></type> <name pos:line="312" pos:column="13">lineCurrent</name> <init pos:line="312" pos:column="25">= <expr><call><name><name pos:line="312" pos:column="27">styler</name><op:operator pos:line="312" pos:column="33">.</op:operator><name pos:line="312" pos:column="34">GetLine</name></name><argument_list pos:line="312" pos:column="41">(<argument><expr><name pos:line="312" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="313" pos:column="9">if <condition pos:line="313" pos:column="12">(<expr><name pos:line="313" pos:column="13">startPos</name> <op:operator pos:line="313" pos:column="22">&gt;</op:operator> <lit:literal type="number" pos:line="313" pos:column="24">0</lit:literal> <op:operator pos:line="313" pos:column="26">&amp;&amp;</op:operator> <name pos:line="313" pos:column="29">lineCurrent</name> <op:operator pos:line="313" pos:column="41">&gt;</op:operator> <lit:literal type="number" pos:line="313" pos:column="43">0</lit:literal></expr>)</condition><then pos:line="313" pos:column="45"> <block pos:line="313" pos:column="46">{
			<expr_stmt><expr><name pos:line="314" pos:column="25">lineCurrent</name><op:operator pos:line="314" pos:column="36">--</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="315" pos:column="25">startPos</name> <op:operator pos:line="315" pos:column="34">=</op:operator> <call><name><name pos:line="315" pos:column="36">styler</name><op:operator pos:line="315" pos:column="42">.</op:operator><name pos:line="315" pos:column="43">LineStart</name></name><argument_list pos:line="315" pos:column="52">(<argument><expr><name pos:line="315" pos:column="53">lineCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="317" pos:column="9">int</name></type> <name pos:line="317" pos:column="13">spaceFlags</name> <init pos:line="317" pos:column="24">= <expr><lit:literal type="number" pos:line="317" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="318" pos:column="9">int</name></type> <name pos:line="318" pos:column="13">indentCurrent</name> <init pos:line="318" pos:column="27">= <expr><call><name><name pos:line="318" pos:column="29">styler</name><op:operator pos:line="318" pos:column="35">.</op:operator><name pos:line="318" pos:column="36">IndentAmount</name></name><argument_list pos:line="318" pos:column="48">(<argument><expr><name pos:line="318" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="318" pos:column="62">&amp;</op:operator><name pos:line="318" pos:column="63">spaceFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="319" pos:column="9">char</name></type> <name pos:line="319" pos:column="14">chNext</name> <init pos:line="319" pos:column="21">= <expr><name><name pos:line="319" pos:column="23">styler</name><index pos:line="319" pos:column="29">[<expr><name pos:line="319" pos:column="30">startPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for pos:line="320" pos:column="9">for (<init><decl><type><name pos:line="320" pos:column="14">int</name></type> <name pos:line="320" pos:column="18">i</name> <init pos:line="320" pos:column="20">= <expr><name pos:line="320" pos:column="22">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="320" pos:column="32">i</name> <op:operator pos:line="320" pos:column="34">&lt;</op:operator> <name pos:line="320" pos:column="36">endPos</name></expr>;</condition> <incr><expr><name pos:line="320" pos:column="44">i</name><op:operator pos:line="320" pos:column="45">++</op:operator></expr></incr>) <block pos:line="320" pos:column="49">{
		<decl_stmt><decl><type><name pos:line="321" pos:column="17">char</name></type> <name pos:line="321" pos:column="22">ch</name> <init pos:line="321" pos:column="25">= <expr><name pos:line="321" pos:column="27">chNext</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="322" pos:column="17">chNext</name> <op:operator pos:line="322" pos:column="24">=</op:operator> <call><name><name pos:line="322" pos:column="26">styler</name><op:operator pos:line="322" pos:column="32">.</op:operator><name pos:line="322" pos:column="33">SafeGetCharAt</name></name><argument_list pos:line="322" pos:column="46">(<argument><expr><name pos:line="322" pos:column="47">i</name> <op:operator pos:line="322" pos:column="49">+</op:operator> <lit:literal type="number" pos:line="322" pos:column="51">1</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if pos:line="324" pos:column="17">if <condition pos:line="324" pos:column="20">(<expr><op:operator pos:line="324" pos:column="21">(</op:operator><name pos:line="324" pos:column="22">ch</name> <op:operator pos:line="324" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="324" pos:column="28">'\r'</lit:literal> <op:operator pos:line="324" pos:column="33">&amp;&amp;</op:operator> <name pos:line="324" pos:column="36">chNext</name> <op:operator pos:line="324" pos:column="43">!=</op:operator> <lit:literal type="char" pos:line="324" pos:column="46">'\n'</lit:literal><op:operator pos:line="324" pos:column="50">)</op:operator> <op:operator pos:line="324" pos:column="52">||</op:operator> <op:operator pos:line="324" pos:column="55">(</op:operator><name pos:line="324" pos:column="56">ch</name> <op:operator pos:line="324" pos:column="59">==</op:operator> <lit:literal type="char" pos:line="324" pos:column="62">'\n'</lit:literal><op:operator pos:line="324" pos:column="66">)</op:operator> <op:operator pos:line="324" pos:column="68">||</op:operator> <op:operator pos:line="324" pos:column="71">(</op:operator><name pos:line="324" pos:column="72">i</name> <op:operator pos:line="324" pos:column="74">==</op:operator> <name pos:line="324" pos:column="77">endPos</name><op:operator pos:line="324" pos:column="83">-</op:operator><lit:literal type="number" pos:line="324" pos:column="84">1</lit:literal><op:operator pos:line="324" pos:column="85">)</op:operator></expr>)</condition><then pos:line="324" pos:column="87"> <block pos:line="324" pos:column="88">{
			<decl_stmt><decl><type><name pos:line="325" pos:column="25">int</name></type> <name pos:line="325" pos:column="29">lev</name> <init pos:line="325" pos:column="33">= <expr><name pos:line="325" pos:column="35">indentCurrent</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="326" pos:column="25">int</name></type> <name pos:line="326" pos:column="29">indentNext</name> <init pos:line="326" pos:column="40">= <expr><call><name><name pos:line="326" pos:column="42">styler</name><op:operator pos:line="326" pos:column="48">.</op:operator><name pos:line="326" pos:column="49">IndentAmount</name></name><argument_list pos:line="326" pos:column="61">(<argument><expr><name pos:line="326" pos:column="62">lineCurrent</name> <op:operator pos:line="326" pos:column="74">+</op:operator> <lit:literal type="number" pos:line="326" pos:column="76">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="326" pos:column="79">&amp;</op:operator><name pos:line="326" pos:column="80">spaceFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="327" pos:column="25">if <condition pos:line="327" pos:column="28">(<expr><op:operator pos:line="327" pos:column="29">!</op:operator><op:operator pos:line="327" pos:column="30">(</op:operator><name pos:line="327" pos:column="31">indentCurrent</name> <op:operator pos:line="327" pos:column="45">&amp;</op:operator> <name pos:line="327" pos:column="47">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="327" pos:column="68">)</op:operator></expr>)</condition><then pos:line="327" pos:column="70"> <block pos:line="327" pos:column="71">{
				<if pos:line="328" pos:column="33">if <condition pos:line="328" pos:column="36">(<expr><op:operator pos:line="328" pos:column="37">(</op:operator><name pos:line="328" pos:column="38">indentCurrent</name> <op:operator pos:line="328" pos:column="52">&amp;</op:operator> <name pos:line="328" pos:column="54">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="328" pos:column="76">)</op:operator> <op:operator pos:line="328" pos:column="78">&lt;</op:operator> <op:operator pos:line="328" pos:column="80">(</op:operator><name pos:line="328" pos:column="81">indentNext</name> <op:operator pos:line="328" pos:column="92">&amp;</op:operator> <name pos:line="328" pos:column="94">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="328" pos:column="116">)</op:operator></expr>)</condition><then pos:line="328" pos:column="118"> <block pos:line="328" pos:column="119">{
					<expr_stmt><expr><name pos:line="329" pos:column="41">lev</name> <op:operator pos:line="329" pos:column="45">|=</op:operator> <name pos:line="329" pos:column="48">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
				}</block></then> <else pos:line="330" pos:column="35">else <if pos:line="330" pos:column="40">if <condition pos:line="330" pos:column="43">(<expr><name pos:line="330" pos:column="44">indentNext</name> <op:operator pos:line="330" pos:column="55">&amp;</op:operator> <name pos:line="330" pos:column="57">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="330" pos:column="79"> <block pos:line="330" pos:column="80">{
					<decl_stmt><decl><type><name pos:line="331" pos:column="41">int</name></type> <name pos:line="331" pos:column="45">spaceFlags2</name> <init pos:line="331" pos:column="57">= <expr><lit:literal type="number" pos:line="331" pos:column="59">0</lit:literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="332" pos:column="41">int</name></type> <name pos:line="332" pos:column="45">indentNext2</name> <init pos:line="332" pos:column="57">= <expr><call><name><name pos:line="332" pos:column="59">styler</name><op:operator pos:line="332" pos:column="65">.</op:operator><name pos:line="332" pos:column="66">IndentAmount</name></name><argument_list pos:line="332" pos:column="78">(<argument><expr><name pos:line="332" pos:column="79">lineCurrent</name> <op:operator pos:line="332" pos:column="91">+</op:operator> <lit:literal type="number" pos:line="332" pos:column="93">2</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="332" pos:column="96">&amp;</op:operator><name pos:line="332" pos:column="97">spaceFlags2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="333" pos:column="41">if <condition pos:line="333" pos:column="44">(<expr><op:operator pos:line="333" pos:column="45">(</op:operator><name pos:line="333" pos:column="46">indentCurrent</name> <op:operator pos:line="333" pos:column="60">&amp;</op:operator> <name pos:line="333" pos:column="62">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="333" pos:column="84">)</op:operator> <op:operator pos:line="333" pos:column="86">&lt;</op:operator> <op:operator pos:line="333" pos:column="88">(</op:operator><name pos:line="333" pos:column="89">indentNext2</name> <op:operator pos:line="333" pos:column="101">&amp;</op:operator> <name pos:line="333" pos:column="103">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="333" pos:column="125">)</op:operator></expr>)</condition><then pos:line="333" pos:column="127"> <block pos:line="333" pos:column="128">{
						<expr_stmt><expr><name pos:line="334" pos:column="49">lev</name> <op:operator pos:line="334" pos:column="53">|=</op:operator> <name pos:line="334" pos:column="56">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></else></if>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="338" pos:column="25">indentCurrent</name> <op:operator pos:line="338" pos:column="39">=</op:operator> <name pos:line="338" pos:column="41">indentNext</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="339" pos:column="25">styler</name><op:operator pos:line="339" pos:column="31">.</op:operator><name pos:line="339" pos:column="32">SetLevel</name></name><argument_list pos:line="339" pos:column="40">(<argument><expr><name pos:line="339" pos:column="41">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="339" pos:column="54">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="340" pos:column="25">lineCurrent</name><op:operator pos:line="340" pos:column="36">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><specifier pos:line="345" pos:column="1">static</specifier> <specifier pos:line="345" pos:column="8">const</specifier> <name pos:line="345" pos:column="14">char</name> <type:modifier pos:line="345" pos:column="19">*</type:modifier> <specifier pos:line="345" pos:column="21">const</specifier></type> <name><name pos:line="345" pos:column="27">FSWordListDesc</name><index pos:line="345" pos:column="41">[]</index></name> <init pos:line="345" pos:column="44">= <expr><block pos:line="345" pos:column="46">{
	<expr><lit:literal type="string" pos:line="346" pos:column="9">"Keywords Commands"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="347" pos:column="9">"Std Library Functions"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="348" pos:column="9">"Procedure, return, exit"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="349" pos:column="9">"Class (oop)"</lit:literal></expr>,
	<expr><lit:literal type="string" pos:line="350" pos:column="9">"Doxygen keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="351" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name pos:line="354" pos:column="1">LexerModule</name></type> <name pos:line="354" pos:column="13">lmFlagShip</name><argument_list pos:line="354" pos:column="23">(<argument><expr><name pos:line="354" pos:column="24">SCLEX_FLAGSHIP</name></expr></argument>, <argument><expr><name pos:line="354" pos:column="40">ColouriseFlagShipDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="354" pos:column="62">"flagship"</lit:literal></expr></argument>, <argument><expr><name pos:line="354" pos:column="74">FoldFlagShipDoc</name></expr></argument>, <argument><expr><name pos:line="354" pos:column="91">FSWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
