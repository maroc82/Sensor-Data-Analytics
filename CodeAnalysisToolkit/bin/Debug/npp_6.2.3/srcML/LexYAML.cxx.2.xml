<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexers\LexYAML.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexYAML.cxx
 ** Lexer for YAML.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2003- by Sean O'Dell &lt;sean@celsoft.com&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">include</cpp:directive> <cpp:file pos:line="13" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="15" pos:column="10">"ILexer.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="17" pos:column="10">"SciLexer.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="19" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="20" pos:column="10">"LexAccessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="21" pos:column="10">"Accessor.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="22" pos:column="10">"StyleContext.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="23" pos:column="10">"CharacterSet.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="24" pos:column="10">"LexerModule.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef</cpp:directive> <name pos:line="26" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="27" pos:column="1">using namespace <name pos:line="27" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier pos:line="30" pos:column="1">static</specifier> <specifier pos:line="30" pos:column="8">const</specifier> <name pos:line="30" pos:column="14">char</name> <type:modifier pos:line="30" pos:column="19">*</type:modifier> <specifier pos:line="30" pos:column="21">const</specifier></type> <name><name pos:line="30" pos:column="27">yamlWordListDesc</name><index pos:line="30" pos:column="43">[]</index></name> <init pos:line="30" pos:column="46">= <expr><block pos:line="30" pos:column="48">{
	<expr><lit:literal type="string" pos:line="31" pos:column="9">"Keywords"</lit:literal></expr>,
	<expr><lit:literal type="number" pos:line="32" pos:column="9">0</lit:literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier pos:line="35" pos:column="1">static</specifier> <specifier pos:line="35" pos:column="8">inline</specifier> <name pos:line="35" pos:column="15">bool</name></type> <name pos:line="35" pos:column="20">AtEOL</name><parameter_list pos:line="35" pos:column="25">(<param><decl><type><name pos:line="35" pos:column="26">Accessor</name> <type:modifier pos:line="35" pos:column="35">&amp;</type:modifier></type><name pos:line="35" pos:column="36">styler</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="44">unsigned</name> <name pos:line="35" pos:column="53">int</name></type> <name pos:line="35" pos:column="57">i</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="60">{
	<return pos:line="36" pos:column="9">return <expr><op:operator pos:line="36" pos:column="16">(</op:operator><name><name pos:line="36" pos:column="17">styler</name><index pos:line="36" pos:column="23">[<expr><name pos:line="36" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="36" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="36" pos:column="30">'\n'</lit:literal><op:operator pos:line="36" pos:column="34">)</op:operator> <op:operator pos:line="36" pos:column="36">||</op:operator>
		<op:operator pos:line="37" pos:column="17">(</op:operator><op:operator pos:line="37" pos:column="18">(</op:operator><name><name pos:line="37" pos:column="19">styler</name><index pos:line="37" pos:column="25">[<expr><name pos:line="37" pos:column="26">i</name></expr>]</index></name> <op:operator pos:line="37" pos:column="29">==</op:operator> <lit:literal type="char" pos:line="37" pos:column="32">'\r'</lit:literal><op:operator pos:line="37" pos:column="36">)</op:operator> <op:operator pos:line="37" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="37" pos:column="41">(</op:operator><call><name><name pos:line="37" pos:column="42">styler</name><op:operator pos:line="37" pos:column="48">.</op:operator><name pos:line="37" pos:column="49">SafeGetCharAt</name></name><argument_list pos:line="37" pos:column="62">(<argument><expr><name pos:line="37" pos:column="63">i</name> <op:operator pos:line="37" pos:column="65">+</op:operator> <lit:literal type="number" pos:line="37" pos:column="67">1</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="37" pos:column="70">!=</op:operator> <lit:literal type="char" pos:line="37" pos:column="73">'\n'</lit:literal><op:operator pos:line="37" pos:column="77">)</op:operator><op:operator pos:line="37" pos:column="78">)</op:operator></expr>;</return>
}</block></function>

<function><type><specifier pos:line="40" pos:column="1">static</specifier> <name pos:line="40" pos:column="8">unsigned</name> <name pos:line="40" pos:column="17">int</name></type> <name pos:line="40" pos:column="21">SpaceCount</name><parameter_list pos:line="40" pos:column="31">(<param><decl><type><name pos:line="40" pos:column="32">char</name><type:modifier pos:line="40" pos:column="36">*</type:modifier></type> <name pos:line="40" pos:column="38">lineBuffer</name></decl></param>)</parameter_list> <block pos:line="40" pos:column="50">{
	<if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">lineBuffer</name> <op:operator pos:line="41" pos:column="24">==</op:operator> <name pos:line="41" pos:column="27">NULL</name></expr>)</condition><then pos:line="41" pos:column="32">
		<return pos:line="42" pos:column="17">return <expr><lit:literal type="number" pos:line="42" pos:column="24">0</lit:literal></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="44" pos:column="9">char</name><type:modifier pos:line="44" pos:column="13">*</type:modifier></type> <name pos:line="44" pos:column="15">headBuffer</name> <init pos:line="44" pos:column="26">= <expr><name pos:line="44" pos:column="28">lineBuffer</name></expr></init></decl>;</decl_stmt>

	<while pos:line="46" pos:column="9">while <condition pos:line="46" pos:column="15">(<expr><op:operator pos:line="46" pos:column="16">*</op:operator><name pos:line="46" pos:column="17">headBuffer</name> <op:operator pos:line="46" pos:column="28">==</op:operator> <lit:literal type="char" pos:line="46" pos:column="31">' '</lit:literal></expr>)</condition>
		<expr_stmt><expr><name pos:line="47" pos:column="17">headBuffer</name><op:operator pos:line="47" pos:column="27">++</op:operator></expr>;</expr_stmt></while>

	<return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">headBuffer</name> <op:operator pos:line="49" pos:column="27">-</op:operator> <name pos:line="49" pos:column="29">lineBuffer</name></expr>;</return>
}</block></function>

<cpp:define pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="52" pos:column="9">YAML_STATE_BITSIZE</name></cpp:macro> <cpp:value pos:line="52" pos:column="28">16</cpp:value></cpp:define>
<cpp:define pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="53" pos:column="9">YAML_STATE_MASK</name></cpp:macro>			<cpp:value pos:line="53" pos:column="41">(0xFFFF0000)</cpp:value></cpp:define>
<cpp:define pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="54" pos:column="9">YAML_STATE_DOCUMENT</name></cpp:macro>		<cpp:value pos:line="54" pos:column="41">(1 &lt;&lt; YAML_STATE_BITSIZE)</cpp:value></cpp:define>
<cpp:define pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="55" pos:column="9">YAML_STATE_VALUE</name></cpp:macro>			<cpp:value pos:line="55" pos:column="49">(2 &lt;&lt; YAML_STATE_BITSIZE)</cpp:value></cpp:define>
<cpp:define pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="9">YAML_STATE_COMMENT</name></cpp:macro>		<cpp:value pos:line="56" pos:column="41">(3 &lt;&lt; YAML_STATE_BITSIZE)</cpp:value></cpp:define>
<cpp:define pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="57" pos:column="9">YAML_STATE_TEXT_PARENT</name></cpp:macro>	<cpp:value pos:line="57" pos:column="33">(4 &lt;&lt; YAML_STATE_BITSIZE)</cpp:value></cpp:define>
<cpp:define pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="58" pos:column="9">YAML_STATE_TEXT</name></cpp:macro>			<cpp:value pos:line="58" pos:column="41">(5 &lt;&lt; YAML_STATE_BITSIZE)</cpp:value></cpp:define>

<function><type><specifier pos:line="60" pos:column="1">static</specifier> <name pos:line="60" pos:column="8">void</name></type> <name pos:line="60" pos:column="13">ColouriseYAMLLine</name><parameter_list pos:line="60" pos:column="30">(
	<param><decl><type><name pos:line="61" pos:column="9">char</name> <type:modifier pos:line="61" pos:column="14">*</type:modifier></type><name pos:line="61" pos:column="15">lineBuffer</name></decl></param>,
	<param><decl><type><name pos:line="62" pos:column="9">unsigned</name> <name pos:line="62" pos:column="18">int</name></type> <name pos:line="62" pos:column="22">currentLine</name></decl></param>,
	<param><decl><type><name pos:line="63" pos:column="9">unsigned</name> <name pos:line="63" pos:column="18">int</name></type> <name pos:line="63" pos:column="22">lengthLine</name></decl></param>,
	<param><decl><type><name pos:line="64" pos:column="9">unsigned</name> <name pos:line="64" pos:column="18">int</name></type> <name pos:line="64" pos:column="22">startLine</name></decl></param>,
	<param><decl><type><name pos:line="65" pos:column="9">unsigned</name> <name pos:line="65" pos:column="18">int</name></type> <name pos:line="65" pos:column="22">endPos</name></decl></param>,
	<param><decl><type><name pos:line="66" pos:column="9">WordList</name> <type:modifier pos:line="66" pos:column="18">&amp;</type:modifier></type><name pos:line="66" pos:column="19">keywords</name></decl></param>,
	<param><decl><type><name pos:line="67" pos:column="9">Accessor</name> <type:modifier pos:line="67" pos:column="18">&amp;</type:modifier></type><name pos:line="67" pos:column="19">styler</name></decl></param>)</parameter_list> <block pos:line="67" pos:column="27">{

	<decl_stmt><decl><type><name pos:line="69" pos:column="9">unsigned</name> <name pos:line="69" pos:column="18">int</name></type> <name pos:line="69" pos:column="22">i</name> <init pos:line="69" pos:column="24">= <expr><lit:literal type="number" pos:line="69" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="70" pos:column="9">bool</name></type> <name pos:line="70" pos:column="14">bInQuotes</name> <init pos:line="70" pos:column="24">= <expr><lit:literal type="boolean" pos:line="70" pos:column="26">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="71" pos:column="9">unsigned</name> <name pos:line="71" pos:column="18">int</name></type> <name pos:line="71" pos:column="22">indentAmount</name> <init pos:line="71" pos:column="35">= <expr><call><name pos:line="71" pos:column="37">SpaceCount</name><argument_list pos:line="71" pos:column="47">(<argument><expr><name pos:line="71" pos:column="48">lineBuffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">currentLine</name> <op:operator pos:line="73" pos:column="25">&gt;</op:operator> <lit:literal type="number" pos:line="73" pos:column="27">0</lit:literal></expr>)</condition><then pos:line="73" pos:column="29"> <block pos:line="73" pos:column="30">{
		<decl_stmt><decl><type><name pos:line="74" pos:column="17">int</name></type> <name pos:line="74" pos:column="21">parentLineState</name> <init pos:line="74" pos:column="37">= <expr><call><name><name pos:line="74" pos:column="39">styler</name><op:operator pos:line="74" pos:column="45">.</op:operator><name pos:line="74" pos:column="46">GetLineState</name></name><argument_list pos:line="74" pos:column="58">(<argument><expr><name pos:line="74" pos:column="59">currentLine</name> <op:operator pos:line="74" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="74" pos:column="73">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if pos:line="76" pos:column="17">if <condition pos:line="76" pos:column="20">(<expr><op:operator pos:line="76" pos:column="21">(</op:operator><name pos:line="76" pos:column="22">parentLineState</name><op:operator pos:line="76" pos:column="37">&amp;</op:operator><name pos:line="76" pos:column="38">YAML_STATE_MASK</name><op:operator pos:line="76" pos:column="53">)</op:operator> <op:operator pos:line="76" pos:column="55">==</op:operator> <name pos:line="76" pos:column="58">YAML_STATE_TEXT</name> <op:operator pos:line="76" pos:column="74">||</op:operator> <op:operator pos:line="76" pos:column="77">(</op:operator><name pos:line="76" pos:column="78">parentLineState</name><op:operator pos:line="76" pos:column="93">&amp;</op:operator><name pos:line="76" pos:column="94">YAML_STATE_MASK</name><op:operator pos:line="76" pos:column="109">)</op:operator> <op:operator pos:line="76" pos:column="111">==</op:operator> <name pos:line="76" pos:column="114">YAML_STATE_TEXT_PARENT</name></expr>)</condition><then pos:line="76" pos:column="137"> <block pos:line="76" pos:column="138">{
			<decl_stmt><decl><type><name pos:line="77" pos:column="25">unsigned</name> <name pos:line="77" pos:column="34">int</name></type> <name pos:line="77" pos:column="38">parentIndentAmount</name> <init pos:line="77" pos:column="57">= <expr><name pos:line="77" pos:column="59">parentLineState</name><op:operator pos:line="77" pos:column="74">&amp;</op:operator><op:operator pos:line="77" pos:column="75">(</op:operator><op:operator pos:line="77" pos:column="76">~</op:operator><name pos:line="77" pos:column="77">YAML_STATE_MASK</name><op:operator pos:line="77" pos:column="92">)</op:operator></expr></init></decl>;</decl_stmt>
			<if pos:line="78" pos:column="25">if <condition pos:line="78" pos:column="28">(<expr><name pos:line="78" pos:column="29">indentAmount</name> <op:operator pos:line="78" pos:column="42">&gt;</op:operator> <name pos:line="78" pos:column="44">parentIndentAmount</name></expr>)</condition><then pos:line="78" pos:column="63"> <block pos:line="78" pos:column="64">{
				<expr_stmt><expr><call><name><name pos:line="79" pos:column="33">styler</name><op:operator pos:line="79" pos:column="39">.</op:operator><name pos:line="79" pos:column="40">SetLineState</name></name><argument_list pos:line="79" pos:column="52">(<argument><expr><name pos:line="79" pos:column="53">currentLine</name></expr></argument>, <argument><expr><name pos:line="79" pos:column="66">YAML_STATE_TEXT</name> <op:operator pos:line="79" pos:column="82">|</op:operator> <name pos:line="79" pos:column="84">parentIndentAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="80" pos:column="33">styler</name><op:operator pos:line="80" pos:column="39">.</op:operator><name pos:line="80" pos:column="40">ColourTo</name></name><argument_list pos:line="80" pos:column="48">(<argument><expr><name pos:line="80" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="80" pos:column="57">SCE_YAML_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="81" pos:column="33">return;</return>
			}</block></then></if>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><call><name><name pos:line="85" pos:column="9">styler</name><op:operator pos:line="85" pos:column="15">.</op:operator><name pos:line="85" pos:column="16">SetLineState</name></name><argument_list pos:line="85" pos:column="28">(<argument><expr><name pos:line="85" pos:column="29">currentLine</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="85" pos:column="42">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="86" pos:column="9">if <condition pos:line="86" pos:column="12">(<expr><call><name pos:line="86" pos:column="13">strncmp</name><argument_list pos:line="86" pos:column="20">(<argument><expr><name pos:line="86" pos:column="21">lineBuffer</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="86" pos:column="33">"---"</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="86" pos:column="40">3</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="86" pos:column="43">==</op:operator> <lit:literal type="number" pos:line="86" pos:column="46">0</lit:literal></expr>)</condition><then pos:line="86" pos:column="48"> <block pos:line="86" pos:column="49">{	<comment type="line" pos:line="86" pos:column="57">// Document marker</comment>
		<expr_stmt><expr><call><name><name pos:line="87" pos:column="17">styler</name><op:operator pos:line="87" pos:column="23">.</op:operator><name pos:line="87" pos:column="24">SetLineState</name></name><argument_list pos:line="87" pos:column="36">(<argument><expr><name pos:line="87" pos:column="37">currentLine</name></expr></argument>, <argument><expr><name pos:line="87" pos:column="50">YAML_STATE_DOCUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="88" pos:column="17">styler</name><op:operator pos:line="88" pos:column="23">.</op:operator><name pos:line="88" pos:column="24">ColourTo</name></name><argument_list pos:line="88" pos:column="32">(<argument><expr><name pos:line="88" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="88" pos:column="41">SCE_YAML_DOCUMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="89" pos:column="17">return;</return>
	}</block></then></if>
	<comment type="line" pos:line="91" pos:column="9">// Skip initial spaces</comment>
	<while pos:line="92" pos:column="9">while <condition pos:line="92" pos:column="15">(<expr><op:operator pos:line="92" pos:column="16">(</op:operator><name pos:line="92" pos:column="17">i</name> <op:operator pos:line="92" pos:column="19">&lt;</op:operator> <name pos:line="92" pos:column="21">lengthLine</name><op:operator pos:line="92" pos:column="31">)</op:operator> <op:operator pos:line="92" pos:column="33">&amp;&amp;</op:operator> <name><name pos:line="92" pos:column="36">lineBuffer</name><index pos:line="92" pos:column="46">[<expr><name pos:line="92" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="92" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="92" pos:column="53">' '</lit:literal></expr>)</condition> <block pos:line="92" pos:column="58">{ <comment type="line" pos:line="92" pos:column="60">// YAML always uses space, never TABS or anything else</comment>
		<expr_stmt><expr><name pos:line="93" pos:column="17">i</name><op:operator pos:line="93" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name><name pos:line="95" pos:column="13">lineBuffer</name><index pos:line="95" pos:column="23">[<expr><name pos:line="95" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="95" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="95" pos:column="30">'\t'</lit:literal></expr>)</condition><then pos:line="95" pos:column="35"> <block pos:line="95" pos:column="36">{ <comment type="line" pos:line="95" pos:column="38">// if we skipped all spaces, and we are NOT inside a text block, this is wrong</comment>
		<expr_stmt><expr><call><name><name pos:line="96" pos:column="17">styler</name><op:operator pos:line="96" pos:column="23">.</op:operator><name pos:line="96" pos:column="24">ColourTo</name></name><argument_list pos:line="96" pos:column="32">(<argument><expr><name pos:line="96" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="41">SCE_YAML_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="97" pos:column="17">return;</return>
	}</block></then></if>
	<if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><name><name pos:line="99" pos:column="13">lineBuffer</name><index pos:line="99" pos:column="23">[<expr><name pos:line="99" pos:column="24">i</name></expr>]</index></name> <op:operator pos:line="99" pos:column="27">==</op:operator> <lit:literal type="char" pos:line="99" pos:column="30">'#'</lit:literal></expr>)</condition><then pos:line="99" pos:column="34"> <block pos:line="99" pos:column="35">{	<comment type="line" pos:line="99" pos:column="41">// Comment</comment>
		<expr_stmt><expr><call><name><name pos:line="100" pos:column="17">styler</name><op:operator pos:line="100" pos:column="23">.</op:operator><name pos:line="100" pos:column="24">SetLineState</name></name><argument_list pos:line="100" pos:column="36">(<argument><expr><name pos:line="100" pos:column="37">currentLine</name></expr></argument>, <argument><expr><name pos:line="100" pos:column="50">YAML_STATE_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="101" pos:column="17">styler</name><op:operator pos:line="101" pos:column="23">.</op:operator><name pos:line="101" pos:column="24">ColourTo</name></name><argument_list pos:line="101" pos:column="32">(<argument><expr><name pos:line="101" pos:column="33">endPos</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="41">SCE_YAML_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="102" pos:column="17">return;</return>
	}</block></then></if>
	<while pos:line="104" pos:column="9">while <condition pos:line="104" pos:column="15">(<expr><name pos:line="104" pos:column="16">i</name> <op:operator pos:line="104" pos:column="18">&lt;</op:operator> <name pos:line="104" pos:column="20">lengthLine</name></expr>)</condition> <block pos:line="104" pos:column="32">{
		<if pos:line="105" pos:column="17">if <condition pos:line="105" pos:column="20">(<expr><name><name pos:line="105" pos:column="21">lineBuffer</name><index pos:line="105" pos:column="31">[<expr><name pos:line="105" pos:column="32">i</name></expr>]</index></name> <op:operator pos:line="105" pos:column="35">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="38">'\''</lit:literal> <op:operator pos:line="105" pos:column="43">||</op:operator> <name><name pos:line="105" pos:column="46">lineBuffer</name><index pos:line="105" pos:column="56">[<expr><name pos:line="105" pos:column="57">i</name></expr>]</index></name> <op:operator pos:line="105" pos:column="60">==</op:operator> <lit:literal type="char" pos:line="105" pos:column="63">'\"'</lit:literal></expr>)</condition><then pos:line="105" pos:column="68"> <block pos:line="105" pos:column="69">{
			<expr_stmt><expr><name pos:line="106" pos:column="25">bInQuotes</name> <op:operator pos:line="106" pos:column="35">=</op:operator> <op:operator pos:line="106" pos:column="37">!</op:operator><name pos:line="106" pos:column="38">bInQuotes</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="107" pos:column="19">else <if pos:line="107" pos:column="24">if <condition pos:line="107" pos:column="27">(<expr><name><name pos:line="107" pos:column="28">lineBuffer</name><index pos:line="107" pos:column="38">[<expr><name pos:line="107" pos:column="39">i</name></expr>]</index></name> <op:operator pos:line="107" pos:column="42">==</op:operator> <lit:literal type="char" pos:line="107" pos:column="45">':'</lit:literal> <op:operator pos:line="107" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="107" pos:column="52">!</op:operator><name pos:line="107" pos:column="53">bInQuotes</name></expr>)</condition><then pos:line="107" pos:column="63"> <block pos:line="107" pos:column="64">{
			<expr_stmt><expr><call><name><name pos:line="108" pos:column="25">styler</name><op:operator pos:line="108" pos:column="31">.</op:operator><name pos:line="108" pos:column="32">ColourTo</name></name><argument_list pos:line="108" pos:column="40">(<argument><expr><name pos:line="108" pos:column="41">startLine</name> <op:operator pos:line="108" pos:column="51">+</op:operator> <name pos:line="108" pos:column="53">i</name> <op:operator pos:line="108" pos:column="55">-</op:operator> <lit:literal type="number" pos:line="108" pos:column="57">1</lit:literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="60">SCE_YAML_IDENTIFIER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="109" pos:column="25">styler</name><op:operator pos:line="109" pos:column="31">.</op:operator><name pos:line="109" pos:column="32">ColourTo</name></name><argument_list pos:line="109" pos:column="40">(<argument><expr><name pos:line="109" pos:column="41">startLine</name> <op:operator pos:line="109" pos:column="51">+</op:operator> <name pos:line="109" pos:column="53">i</name></expr></argument>, <argument><expr><name pos:line="109" pos:column="56">SCE_YAML_OPERATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="110" pos:column="25">// Non-folding scalar</comment>
			<expr_stmt><expr><name pos:line="111" pos:column="25">i</name><op:operator pos:line="111" pos:column="26">++</op:operator></expr>;</expr_stmt>
			<while pos:line="112" pos:column="25">while <condition pos:line="112" pos:column="31">(<expr><op:operator pos:line="112" pos:column="32">(</op:operator><name pos:line="112" pos:column="33">i</name> <op:operator pos:line="112" pos:column="35">&lt;</op:operator> <name pos:line="112" pos:column="37">lengthLine</name><op:operator pos:line="112" pos:column="47">)</op:operator> <op:operator pos:line="112" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="112" pos:column="52">isspacechar</name><argument_list pos:line="112" pos:column="63">(<argument><expr><name><name pos:line="112" pos:column="64">lineBuffer</name><index pos:line="112" pos:column="74">[<expr><name pos:line="112" pos:column="75">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
				<expr_stmt><expr><name pos:line="113" pos:column="33">i</name><op:operator pos:line="113" pos:column="34">++</op:operator></expr>;</expr_stmt></while>
			<decl_stmt><decl><type><name pos:line="114" pos:column="25">unsigned</name> <name pos:line="114" pos:column="34">int</name></type> <name pos:line="114" pos:column="38">endValue</name> <init pos:line="114" pos:column="47">= <expr><name pos:line="114" pos:column="49">lengthLine</name> <op:operator pos:line="114" pos:column="60">-</op:operator> <lit:literal type="number" pos:line="114" pos:column="62">1</lit:literal></expr></init></decl>;</decl_stmt>
			<while pos:line="115" pos:column="25">while <condition pos:line="115" pos:column="31">(<expr><op:operator pos:line="115" pos:column="32">(</op:operator><name pos:line="115" pos:column="33">endValue</name> <op:operator pos:line="115" pos:column="42">&gt;=</op:operator> <name pos:line="115" pos:column="45">i</name><op:operator pos:line="115" pos:column="46">)</op:operator> <op:operator pos:line="115" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="115" pos:column="51">isspacechar</name><argument_list pos:line="115" pos:column="62">(<argument><expr><name><name pos:line="115" pos:column="63">lineBuffer</name><index pos:line="115" pos:column="73">[<expr><name pos:line="115" pos:column="74">endValue</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
				<expr_stmt><expr><name pos:line="116" pos:column="33">endValue</name><op:operator pos:line="116" pos:column="41">--</op:operator></expr>;</expr_stmt></while>
			<expr_stmt><expr><name><name pos:line="117" pos:column="25">lineBuffer</name><index pos:line="117" pos:column="35">[<expr><name pos:line="117" pos:column="36">endValue</name> <op:operator pos:line="117" pos:column="45">+</op:operator> <lit:literal type="number" pos:line="117" pos:column="47">1</lit:literal></expr>]</index></name> <op:operator pos:line="117" pos:column="50">=</op:operator> <lit:literal type="char" pos:line="117" pos:column="52">'\0'</lit:literal></expr>;</expr_stmt>
			<if pos:line="118" pos:column="25">if <condition pos:line="118" pos:column="28">(<expr><name><name pos:line="118" pos:column="29">lineBuffer</name><index pos:line="118" pos:column="39">[<expr><name pos:line="118" pos:column="40">i</name></expr>]</index></name> <op:operator pos:line="118" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="46">'|'</lit:literal> <op:operator pos:line="118" pos:column="50">||</op:operator> <name><name pos:line="118" pos:column="53">lineBuffer</name><index pos:line="118" pos:column="63">[<expr><name pos:line="118" pos:column="64">i</name></expr>]</index></name> <op:operator pos:line="118" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="118" pos:column="70">'&gt;'</lit:literal></expr>)</condition><then pos:line="118" pos:column="74"> <block pos:line="118" pos:column="75">{
				<expr_stmt><expr><name pos:line="119" pos:column="33">i</name><op:operator pos:line="119" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<if pos:line="120" pos:column="33">if <condition pos:line="120" pos:column="36">(<expr><name><name pos:line="120" pos:column="37">lineBuffer</name><index pos:line="120" pos:column="47">[<expr><name pos:line="120" pos:column="48">i</name></expr>]</index></name> <op:operator pos:line="120" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="54">'+'</lit:literal> <op:operator pos:line="120" pos:column="58">||</op:operator> <name><name pos:line="120" pos:column="61">lineBuffer</name><index pos:line="120" pos:column="71">[<expr><name pos:line="120" pos:column="72">i</name></expr>]</index></name> <op:operator pos:line="120" pos:column="75">==</op:operator> <lit:literal type="char" pos:line="120" pos:column="78">'-'</lit:literal></expr>)</condition><then pos:line="120" pos:column="82">
					<expr_stmt><expr><name pos:line="121" pos:column="41">i</name><op:operator pos:line="121" pos:column="42">++</op:operator></expr>;</expr_stmt></then></if>
				<while pos:line="122" pos:column="33">while <condition pos:line="122" pos:column="39">(<expr><op:operator pos:line="122" pos:column="40">(</op:operator><name pos:line="122" pos:column="41">i</name> <op:operator pos:line="122" pos:column="43">&lt;</op:operator> <name pos:line="122" pos:column="45">lengthLine</name><op:operator pos:line="122" pos:column="55">)</op:operator> <op:operator pos:line="122" pos:column="57">&amp;&amp;</op:operator> <call><name pos:line="122" pos:column="60">isspacechar</name><argument_list pos:line="122" pos:column="71">(<argument><expr><name><name pos:line="122" pos:column="72">lineBuffer</name><index pos:line="122" pos:column="82">[<expr><name pos:line="122" pos:column="83">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
					<expr_stmt><expr><name pos:line="123" pos:column="41">i</name><op:operator pos:line="123" pos:column="42">++</op:operator></expr>;</expr_stmt></while>
				<if pos:line="124" pos:column="33">if <condition pos:line="124" pos:column="36">(<expr><name><name pos:line="124" pos:column="37">lineBuffer</name><index pos:line="124" pos:column="47">[<expr><name pos:line="124" pos:column="48">i</name></expr>]</index></name> <op:operator pos:line="124" pos:column="51">==</op:operator> <lit:literal type="char" pos:line="124" pos:column="54">'\0'</lit:literal></expr>)</condition><then pos:line="124" pos:column="59"> <block pos:line="124" pos:column="60">{
					<expr_stmt><expr><call><name><name pos:line="125" pos:column="41">styler</name><op:operator pos:line="125" pos:column="47">.</op:operator><name pos:line="125" pos:column="48">SetLineState</name></name><argument_list pos:line="125" pos:column="60">(<argument><expr><name pos:line="125" pos:column="61">currentLine</name></expr></argument>, <argument><expr><name pos:line="125" pos:column="74">YAML_STATE_TEXT_PARENT</name> <op:operator pos:line="125" pos:column="97">|</op:operator> <name pos:line="125" pos:column="99">indentAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="126" pos:column="41">styler</name><op:operator pos:line="126" pos:column="47">.</op:operator><name pos:line="126" pos:column="48">ColourTo</name></name><argument_list pos:line="126" pos:column="56">(<argument><expr><name pos:line="126" pos:column="57">endPos</name></expr></argument>, <argument><expr><name pos:line="126" pos:column="65">SCE_YAML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="127" pos:column="41">return;</return>
				}</block></then> <else pos:line="128" pos:column="35">else <if pos:line="128" pos:column="40">if <condition pos:line="128" pos:column="43">(<expr><name><name pos:line="128" pos:column="44">lineBuffer</name><index pos:line="128" pos:column="54">[<expr><name pos:line="128" pos:column="55">i</name></expr>]</index></name> <op:operator pos:line="128" pos:column="58">==</op:operator> <lit:literal type="char" pos:line="128" pos:column="61">'#'</lit:literal></expr>)</condition><then pos:line="128" pos:column="65"> <block pos:line="128" pos:column="66">{
					<expr_stmt><expr><call><name><name pos:line="129" pos:column="41">styler</name><op:operator pos:line="129" pos:column="47">.</op:operator><name pos:line="129" pos:column="48">SetLineState</name></name><argument_list pos:line="129" pos:column="60">(<argument><expr><name pos:line="129" pos:column="61">currentLine</name></expr></argument>, <argument><expr><name pos:line="129" pos:column="74">YAML_STATE_TEXT_PARENT</name> <op:operator pos:line="129" pos:column="97">|</op:operator> <name pos:line="129" pos:column="99">indentAmount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="130" pos:column="41">styler</name><op:operator pos:line="130" pos:column="47">.</op:operator><name pos:line="130" pos:column="48">ColourTo</name></name><argument_list pos:line="130" pos:column="56">(<argument><expr><name pos:line="130" pos:column="57">startLine</name> <op:operator pos:line="130" pos:column="67">+</op:operator> <name pos:line="130" pos:column="69">i</name> <op:operator pos:line="130" pos:column="71">-</op:operator> <lit:literal type="number" pos:line="130" pos:column="73">1</lit:literal></expr></argument>, <argument><expr><name pos:line="130" pos:column="76">SCE_YAML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name pos:line="131" pos:column="41">styler</name><op:operator pos:line="131" pos:column="47">.</op:operator><name pos:line="131" pos:column="48">ColourTo</name></name><argument_list pos:line="131" pos:column="56">(<argument><expr><name pos:line="131" pos:column="57">endPos</name></expr></argument>, <argument><expr><name pos:line="131" pos:column="65">SCE_YAML_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="132" pos:column="41">return;</return>
				}</block></then> <else pos:line="133" pos:column="35">else <block pos:line="133" pos:column="40">{
					<expr_stmt><expr><call><name><name pos:line="134" pos:column="41">styler</name><op:operator pos:line="134" pos:column="47">.</op:operator><name pos:line="134" pos:column="48">ColourTo</name></name><argument_list pos:line="134" pos:column="56">(<argument><expr><name pos:line="134" pos:column="57">endPos</name></expr></argument>, <argument><expr><name pos:line="134" pos:column="65">SCE_YAML_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="135" pos:column="41">return;</return>
				}</block></else></if></else></if>
			}</block></then> <else pos:line="137" pos:column="27">else <if pos:line="137" pos:column="32">if <condition pos:line="137" pos:column="35">(<expr><name><name pos:line="137" pos:column="36">lineBuffer</name><index pos:line="137" pos:column="46">[<expr><name pos:line="137" pos:column="47">i</name></expr>]</index></name> <op:operator pos:line="137" pos:column="50">==</op:operator> <lit:literal type="char" pos:line="137" pos:column="53">'#'</lit:literal></expr>)</condition><then pos:line="137" pos:column="57"> <block pos:line="137" pos:column="58">{
				<expr_stmt><expr><call><name><name pos:line="138" pos:column="33">styler</name><op:operator pos:line="138" pos:column="39">.</op:operator><name pos:line="138" pos:column="40">ColourTo</name></name><argument_list pos:line="138" pos:column="48">(<argument><expr><name pos:line="138" pos:column="49">startLine</name> <op:operator pos:line="138" pos:column="59">+</op:operator> <name pos:line="138" pos:column="61">i</name> <op:operator pos:line="138" pos:column="63">-</op:operator> <lit:literal type="number" pos:line="138" pos:column="65">1</lit:literal></expr></argument>, <argument><expr><name pos:line="138" pos:column="68">SCE_YAML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name pos:line="139" pos:column="33">styler</name><op:operator pos:line="139" pos:column="39">.</op:operator><name pos:line="139" pos:column="40">ColourTo</name></name><argument_list pos:line="139" pos:column="48">(<argument><expr><name pos:line="139" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="57">SCE_YAML_COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="140" pos:column="33">return;</return>
			}</block></then></if></else></if>
			<expr_stmt><expr><call><name><name pos:line="142" pos:column="25">styler</name><op:operator pos:line="142" pos:column="31">.</op:operator><name pos:line="142" pos:column="32">SetLineState</name></name><argument_list pos:line="142" pos:column="44">(<argument><expr><name pos:line="142" pos:column="45">currentLine</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="58">YAML_STATE_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="143" pos:column="25">if <condition pos:line="143" pos:column="28">(<expr><name><name pos:line="143" pos:column="29">lineBuffer</name><index pos:line="143" pos:column="39">[<expr><name pos:line="143" pos:column="40">i</name></expr>]</index></name> <op:operator pos:line="143" pos:column="43">==</op:operator> <lit:literal type="char" pos:line="143" pos:column="46">'&amp;'</lit:literal> <op:operator pos:line="143" pos:column="50">||</op:operator> <name><name pos:line="143" pos:column="53">lineBuffer</name><index pos:line="143" pos:column="63">[<expr><name pos:line="143" pos:column="64">i</name></expr>]</index></name> <op:operator pos:line="143" pos:column="67">==</op:operator> <lit:literal type="char" pos:line="143" pos:column="70">'*'</lit:literal></expr>)</condition><then pos:line="143" pos:column="74"> <block pos:line="143" pos:column="75">{
				<expr_stmt><expr><call><name><name pos:line="144" pos:column="33">styler</name><op:operator pos:line="144" pos:column="39">.</op:operator><name pos:line="144" pos:column="40">ColourTo</name></name><argument_list pos:line="144" pos:column="48">(<argument><expr><name pos:line="144" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="144" pos:column="57">SCE_YAML_REFERENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="145" pos:column="33">return;</return>
			}</block></then></if>
			<if pos:line="147" pos:column="25">if <condition pos:line="147" pos:column="28">(<expr><call><name><name pos:line="147" pos:column="29">keywords</name><op:operator pos:line="147" pos:column="37">.</op:operator><name pos:line="147" pos:column="38">InList</name></name><argument_list pos:line="147" pos:column="44">(<argument><expr><op:operator pos:line="147" pos:column="45">&amp;</op:operator><name><name pos:line="147" pos:column="46">lineBuffer</name><index pos:line="147" pos:column="56">[<expr><name pos:line="147" pos:column="57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="147" pos:column="61"> <block pos:line="147" pos:column="62">{ <comment type="line" pos:line="147" pos:column="64">// Convertible value (true/false, etc.)</comment>
				<expr_stmt><expr><call><name><name pos:line="148" pos:column="33">styler</name><op:operator pos:line="148" pos:column="39">.</op:operator><name pos:line="148" pos:column="40">ColourTo</name></name><argument_list pos:line="148" pos:column="48">(<argument><expr><name pos:line="148" pos:column="49">endPos</name></expr></argument>, <argument><expr><name pos:line="148" pos:column="57">SCE_YAML_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return pos:line="149" pos:column="33">return;</return>
			}</block></then> <else pos:line="150" pos:column="27">else <block pos:line="150" pos:column="32">{
				<decl_stmt><decl><type><name pos:line="151" pos:column="33">unsigned</name> <name pos:line="151" pos:column="42">int</name></type> <name pos:line="151" pos:column="46">i2</name> <init pos:line="151" pos:column="49">= <expr><name pos:line="151" pos:column="51">i</name></expr></init></decl>;</decl_stmt>
				<while pos:line="152" pos:column="33">while <condition pos:line="152" pos:column="39">(<expr><op:operator pos:line="152" pos:column="40">(</op:operator><name pos:line="152" pos:column="41">i</name> <op:operator pos:line="152" pos:column="43">&lt;</op:operator> <name pos:line="152" pos:column="45">lengthLine</name><op:operator pos:line="152" pos:column="55">)</op:operator> <op:operator pos:line="152" pos:column="57">&amp;&amp;</op:operator> <name><name pos:line="152" pos:column="60">lineBuffer</name><index pos:line="152" pos:column="70">[<expr><name pos:line="152" pos:column="71">i</name></expr>]</index></name></expr>)</condition> <block pos:line="152" pos:column="75">{
					<if pos:line="153" pos:column="41">if <condition pos:line="153" pos:column="44">(<expr><op:operator pos:line="153" pos:column="45">!</op:operator><op:operator pos:line="153" pos:column="46">(</op:operator><call><name pos:line="153" pos:column="47">isascii</name><argument_list pos:line="153" pos:column="54">(<argument><expr><name><name pos:line="153" pos:column="55">lineBuffer</name><index pos:line="153" pos:column="65">[<expr><name pos:line="153" pos:column="66">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="153" pos:column="70">&amp;&amp;</op:operator> <call><name pos:line="153" pos:column="73">isdigit</name><argument_list pos:line="153" pos:column="80">(<argument><expr><name><name pos:line="153" pos:column="81">lineBuffer</name><index pos:line="153" pos:column="91">[<expr><name pos:line="153" pos:column="92">i</name></expr>]</index></name></expr></argument>)</argument_list></call><op:operator pos:line="153" pos:column="95">)</op:operator> <op:operator pos:line="153" pos:column="97">&amp;&amp;</op:operator> <name><name pos:line="153" pos:column="100">lineBuffer</name><index pos:line="153" pos:column="110">[<expr><name pos:line="153" pos:column="111">i</name></expr>]</index></name> <op:operator pos:line="153" pos:column="114">!=</op:operator> <lit:literal type="char" pos:line="153" pos:column="117">'-'</lit:literal> <op:operator pos:line="153" pos:column="121">&amp;&amp;</op:operator> <name><name pos:line="153" pos:column="124">lineBuffer</name><index pos:line="153" pos:column="134">[<expr><name pos:line="153" pos:column="135">i</name></expr>]</index></name> <op:operator pos:line="153" pos:column="138">!=</op:operator> <lit:literal type="char" pos:line="153" pos:column="141">'.'</lit:literal> <op:operator pos:line="153" pos:column="145">&amp;&amp;</op:operator> <name><name pos:line="153" pos:column="148">lineBuffer</name><index pos:line="153" pos:column="158">[<expr><name pos:line="153" pos:column="159">i</name></expr>]</index></name> <op:operator pos:line="153" pos:column="162">!=</op:operator> <lit:literal type="char" pos:line="153" pos:column="165">','</lit:literal></expr>)</condition><then pos:line="153" pos:column="169"> <block pos:line="153" pos:column="170">{
						<expr_stmt><expr><call><name><name pos:line="154" pos:column="49">styler</name><op:operator pos:line="154" pos:column="55">.</op:operator><name pos:line="154" pos:column="56">ColourTo</name></name><argument_list pos:line="154" pos:column="64">(<argument><expr><name pos:line="154" pos:column="65">endPos</name></expr></argument>, <argument><expr><name pos:line="154" pos:column="73">SCE_YAML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return pos:line="155" pos:column="49">return;</return>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="157" pos:column="41">i</name><op:operator pos:line="157" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="159" pos:column="33">if <condition pos:line="159" pos:column="36">(<expr><name pos:line="159" pos:column="37">i</name> <op:operator pos:line="159" pos:column="39">&gt;</op:operator> <name pos:line="159" pos:column="41">i2</name></expr>)</condition><then pos:line="159" pos:column="44"> <block pos:line="159" pos:column="45">{
					<expr_stmt><expr><call><name><name pos:line="160" pos:column="41">styler</name><op:operator pos:line="160" pos:column="47">.</op:operator><name pos:line="160" pos:column="48">ColourTo</name></name><argument_list pos:line="160" pos:column="56">(<argument><expr><name pos:line="160" pos:column="57">endPos</name></expr></argument>, <argument><expr><name pos:line="160" pos:column="65">SCE_YAML_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return pos:line="161" pos:column="41">return;</return>
				}</block></then></if>
			}</block></else></if>
			<break pos:line="164" pos:column="25">break;</break> <comment type="line" pos:line="164" pos:column="32">// shouldn't get here, but just in case, the rest of the line is coloured the default</comment>
		}</block></then></if></else></if>
		<expr_stmt><expr><name pos:line="166" pos:column="17">i</name><op:operator pos:line="166" pos:column="18">++</op:operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name><name pos:line="168" pos:column="9">styler</name><op:operator pos:line="168" pos:column="15">.</op:operator><name pos:line="168" pos:column="16">ColourTo</name></name><argument_list pos:line="168" pos:column="24">(<argument><expr><name pos:line="168" pos:column="25">endPos</name></expr></argument>, <argument><expr><name pos:line="168" pos:column="33">SCE_YAML_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier pos:line="171" pos:column="1">static</specifier> <name pos:line="171" pos:column="8">void</name></type> <name pos:line="171" pos:column="13">ColouriseYAMLDoc</name><parameter_list pos:line="171" pos:column="29">(<param><decl><type><name pos:line="171" pos:column="30">unsigned</name> <name pos:line="171" pos:column="39">int</name></type> <name pos:line="171" pos:column="43">startPos</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="53">int</name></type> <name pos:line="171" pos:column="57">length</name></decl></param>, <param><decl><type><name pos:line="171" pos:column="65">int</name></type></decl></param>, <param><decl><type><name pos:line="171" pos:column="70">WordList</name> <type:modifier pos:line="171" pos:column="79">*</type:modifier></type><name><name pos:line="171" pos:column="80">keywordLists</name><index pos:line="171" pos:column="92">[]</index></name></decl></param>, <param><decl><type><name pos:line="171" pos:column="96">Accessor</name> <type:modifier pos:line="171" pos:column="105">&amp;</type:modifier></type><name pos:line="171" pos:column="106">styler</name></decl></param>)</parameter_list> <block pos:line="171" pos:column="114">{
	<decl_stmt><decl><type><name pos:line="172" pos:column="9">char</name></type> <name><name pos:line="172" pos:column="14">lineBuffer</name><index pos:line="172" pos:column="24">[<expr><lit:literal type="number" pos:line="172" pos:column="25">1024</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name pos:line="173" pos:column="9">styler</name><op:operator pos:line="173" pos:column="15">.</op:operator><name pos:line="173" pos:column="16">StartAt</name></name><argument_list pos:line="173" pos:column="23">(<argument><expr><name pos:line="173" pos:column="24">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="174" pos:column="9">styler</name><op:operator pos:line="174" pos:column="15">.</op:operator><name pos:line="174" pos:column="16">StartSegment</name></name><argument_list pos:line="174" pos:column="28">(<argument><expr><name pos:line="174" pos:column="29">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="175" pos:column="9">unsigned</name> <name pos:line="175" pos:column="18">int</name></type> <name pos:line="175" pos:column="22">linePos</name> <init pos:line="175" pos:column="30">= <expr><lit:literal type="number" pos:line="175" pos:column="32">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="176" pos:column="9">unsigned</name> <name pos:line="176" pos:column="18">int</name></type> <name pos:line="176" pos:column="22">startLine</name> <init pos:line="176" pos:column="32">= <expr><name pos:line="176" pos:column="34">startPos</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="177" pos:column="9">unsigned</name> <name pos:line="177" pos:column="18">int</name></type> <name pos:line="177" pos:column="22">endPos</name> <init pos:line="177" pos:column="29">= <expr><name pos:line="177" pos:column="31">startPos</name> <op:operator pos:line="177" pos:column="40">+</op:operator> <name pos:line="177" pos:column="42">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="178" pos:column="9">unsigned</name> <name pos:line="178" pos:column="18">int</name></type> <name pos:line="178" pos:column="22">maxPos</name> <init pos:line="178" pos:column="29">= <expr><call><name><name pos:line="178" pos:column="31">styler</name><op:operator pos:line="178" pos:column="37">.</op:operator><name pos:line="178" pos:column="38">Length</name></name><argument_list pos:line="178" pos:column="44">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="179" pos:column="9">unsigned</name> <name pos:line="179" pos:column="18">int</name></type> <name pos:line="179" pos:column="22">lineCurrent</name> <init pos:line="179" pos:column="34">= <expr><call><name><name pos:line="179" pos:column="36">styler</name><op:operator pos:line="179" pos:column="42">.</op:operator><name pos:line="179" pos:column="43">GetLine</name></name><argument_list pos:line="179" pos:column="50">(<argument><expr><name pos:line="179" pos:column="51">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for pos:line="181" pos:column="9">for (<init><decl><type><name pos:line="181" pos:column="14">unsigned</name> <name pos:line="181" pos:column="23">int</name></type> <name pos:line="181" pos:column="27">i</name> <init pos:line="181" pos:column="29">= <expr><name pos:line="181" pos:column="31">startPos</name></expr></init></decl>;</init> <condition><expr><name pos:line="181" pos:column="41">i</name> <op:operator pos:line="181" pos:column="43">&lt;</op:operator> <name pos:line="181" pos:column="45">maxPos</name> <op:operator pos:line="181" pos:column="52">&amp;&amp;</op:operator> <name pos:line="181" pos:column="55">i</name> <op:operator pos:line="181" pos:column="57">&lt;</op:operator> <name pos:line="181" pos:column="59">endPos</name></expr>;</condition> <incr><expr><name pos:line="181" pos:column="67">i</name><op:operator pos:line="181" pos:column="68">++</op:operator></expr></incr>) <block pos:line="181" pos:column="72">{
		<expr_stmt><expr><name><name pos:line="182" pos:column="17">lineBuffer</name><index pos:line="182" pos:column="27">[<expr><name pos:line="182" pos:column="28">linePos</name><op:operator pos:line="182" pos:column="35">++</op:operator></expr>]</index></name> <op:operator pos:line="182" pos:column="39">=</op:operator> <name><name pos:line="182" pos:column="41">styler</name><index pos:line="182" pos:column="47">[<expr><name pos:line="182" pos:column="48">i</name></expr>]</index></name></expr>;</expr_stmt>
		<if pos:line="183" pos:column="17">if <condition pos:line="183" pos:column="20">(<expr><call><name pos:line="183" pos:column="21">AtEOL</name><argument_list pos:line="183" pos:column="26">(<argument><expr><name pos:line="183" pos:column="27">styler</name></expr></argument>, <argument><expr><name pos:line="183" pos:column="35">i</name></expr></argument>)</argument_list></call> <op:operator pos:line="183" pos:column="38">||</op:operator> <op:operator pos:line="183" pos:column="41">(</op:operator><name pos:line="183" pos:column="42">linePos</name> <op:operator pos:line="183" pos:column="50">&gt;=</op:operator> <sizeof pos:line="183" pos:column="53">sizeof<argument_list pos:line="183" pos:column="59">(<argument><expr><name pos:line="183" pos:column="60">lineBuffer</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="183" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="183" pos:column="74">1</lit:literal><op:operator pos:line="183" pos:column="75">)</op:operator></expr>)</condition><then pos:line="183" pos:column="77"> <block pos:line="183" pos:column="78">{
			<comment type="line" pos:line="184" pos:column="25">// End of line (or of line buffer) met, colourise it</comment>
			<expr_stmt><expr><name><name pos:line="185" pos:column="25">lineBuffer</name><index pos:line="185" pos:column="35">[<expr><name pos:line="185" pos:column="36">linePos</name></expr>]</index></name> <op:operator pos:line="185" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="185" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="186" pos:column="25">ColouriseYAMLLine</name><argument_list pos:line="186" pos:column="42">(<argument><expr><name pos:line="186" pos:column="43">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="55">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="68">linePos</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="77">startLine</name></expr></argument>, <argument><expr><name pos:line="186" pos:column="88">i</name></expr></argument>, <argument><expr><op:operator pos:line="186" pos:column="91">*</op:operator><name><name pos:line="186" pos:column="92">keywordLists</name><index pos:line="186" pos:column="104">[<expr><lit:literal type="number" pos:line="186" pos:column="105">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="109">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="187" pos:column="25">linePos</name> <op:operator pos:line="187" pos:column="33">=</op:operator> <lit:literal type="number" pos:line="187" pos:column="35">0</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="188" pos:column="25">startLine</name> <op:operator pos:line="188" pos:column="35">=</op:operator> <name pos:line="188" pos:column="37">i</name> <op:operator pos:line="188" pos:column="39">+</op:operator> <lit:literal type="number" pos:line="188" pos:column="41">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="189" pos:column="25">lineCurrent</name><op:operator pos:line="189" pos:column="36">++</op:operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if pos:line="192" pos:column="9">if <condition pos:line="192" pos:column="12">(<expr><name pos:line="192" pos:column="13">linePos</name> <op:operator pos:line="192" pos:column="21">&gt;</op:operator> <lit:literal type="number" pos:line="192" pos:column="23">0</lit:literal></expr>)</condition><then pos:line="192" pos:column="25"> <block pos:line="192" pos:column="26">{	<comment type="line" pos:line="192" pos:column="33">// Last line does not have ending characters</comment>
		<expr_stmt><expr><call><name pos:line="193" pos:column="17">ColouriseYAMLLine</name><argument_list pos:line="193" pos:column="34">(<argument><expr><name pos:line="193" pos:column="35">lineBuffer</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="47">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="60">linePos</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="69">startLine</name></expr></argument>, <argument><expr><name pos:line="193" pos:column="80">startPos</name> <op:operator pos:line="193" pos:column="89">+</op:operator> <name pos:line="193" pos:column="91">length</name> <op:operator pos:line="193" pos:column="98">-</op:operator> <lit:literal type="number" pos:line="193" pos:column="100">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="193" pos:column="103">*</op:operator><name><name pos:line="193" pos:column="104">keywordLists</name><index pos:line="193" pos:column="116">[<expr><lit:literal type="number" pos:line="193" pos:column="117">0</lit:literal></expr>]</index></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="121">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><specifier pos:line="197" pos:column="1">static</specifier> <name pos:line="197" pos:column="8">bool</name></type> <name pos:line="197" pos:column="13">IsCommentLine</name><parameter_list pos:line="197" pos:column="26">(<param><decl><type><name pos:line="197" pos:column="27">int</name></type> <name pos:line="197" pos:column="31">line</name></decl></param>, <param><decl><type><name pos:line="197" pos:column="37">Accessor</name> <type:modifier pos:line="197" pos:column="46">&amp;</type:modifier></type><name pos:line="197" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="197" pos:column="55">{
	<decl_stmt><decl><type><name pos:line="198" pos:column="9">int</name></type> <name pos:line="198" pos:column="13">pos</name> <init pos:line="198" pos:column="17">= <expr><call><name><name pos:line="198" pos:column="19">styler</name><op:operator pos:line="198" pos:column="25">.</op:operator><name pos:line="198" pos:column="26">LineStart</name></name><argument_list pos:line="198" pos:column="35">(<argument><expr><name pos:line="198" pos:column="36">line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="199" pos:column="9">if <condition pos:line="199" pos:column="12">(<expr><name><name pos:line="199" pos:column="13">styler</name><index pos:line="199" pos:column="19">[<expr><name pos:line="199" pos:column="20">pos</name></expr>]</index></name> <op:operator pos:line="199" pos:column="25">==</op:operator> <lit:literal type="char" pos:line="199" pos:column="28">'#'</lit:literal></expr>)</condition><then pos:line="199" pos:column="32">
		<return pos:line="200" pos:column="17">return <expr><lit:literal type="boolean" pos:line="200" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<return pos:line="201" pos:column="9">return <expr><lit:literal type="boolean" pos:line="201" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><specifier pos:line="204" pos:column="1">static</specifier> <name pos:line="204" pos:column="8">void</name></type> <name pos:line="204" pos:column="13">FoldYAMLDoc</name><parameter_list pos:line="204" pos:column="24">(<param><decl><type><name pos:line="204" pos:column="25">unsigned</name> <name pos:line="204" pos:column="34">int</name></type> <name pos:line="204" pos:column="38">startPos</name></decl></param>, <param><decl><type><name pos:line="204" pos:column="48">int</name></type> <name pos:line="204" pos:column="52">length</name></decl></param>, <param><decl><type><name pos:line="204" pos:column="60">int</name></type></decl></param> <comment type="block" pos:line="204" pos:column="64">/*initStyle - unused*/</comment>,
                      <param><decl><type><name><name pos:line="205" pos:column="23">WordList</name> <type:modifier pos:line="205" pos:column="32">*</type:modifier><index pos:line="205" pos:column="33">[]</index></name></type></decl></param>, <param><decl><type><name pos:line="205" pos:column="37">Accessor</name> <type:modifier pos:line="205" pos:column="46">&amp;</type:modifier></type><name pos:line="205" pos:column="47">styler</name></decl></param>)</parameter_list> <block pos:line="205" pos:column="55">{
	<decl_stmt><decl><type><specifier pos:line="206" pos:column="9">const</specifier> <name pos:line="206" pos:column="15">int</name></type> <name pos:line="206" pos:column="19">maxPos</name> <init pos:line="206" pos:column="26">= <expr><name pos:line="206" pos:column="28">startPos</name> <op:operator pos:line="206" pos:column="37">+</op:operator> <name pos:line="206" pos:column="39">length</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="207" pos:column="9">const</specifier> <name pos:line="207" pos:column="15">int</name></type> <name pos:line="207" pos:column="19">maxLines</name> <init pos:line="207" pos:column="28">= <expr><call><name><name pos:line="207" pos:column="30">styler</name><op:operator pos:line="207" pos:column="36">.</op:operator><name pos:line="207" pos:column="37">GetLine</name></name><argument_list pos:line="207" pos:column="44">(<argument><expr><name pos:line="207" pos:column="45">maxPos</name> <op:operator pos:line="207" pos:column="52">-</op:operator> <lit:literal type="number" pos:line="207" pos:column="54">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>             <comment type="line" pos:line="207" pos:column="70">// Requested last line</comment>
	<decl_stmt><decl><type><specifier pos:line="208" pos:column="9">const</specifier> <name pos:line="208" pos:column="15">int</name></type> <name pos:line="208" pos:column="19">docLines</name> <init pos:line="208" pos:column="28">= <expr><call><name><name pos:line="208" pos:column="30">styler</name><op:operator pos:line="208" pos:column="36">.</op:operator><name pos:line="208" pos:column="37">GetLine</name></name><argument_list pos:line="208" pos:column="44">(<argument><expr><call><name><name pos:line="208" pos:column="45">styler</name><op:operator pos:line="208" pos:column="51">.</op:operator><name pos:line="208" pos:column="52">Length</name></name><argument_list pos:line="208" pos:column="58">()</argument_list></call> <op:operator pos:line="208" pos:column="61">-</op:operator> <lit:literal type="number" pos:line="208" pos:column="63">1</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line" pos:line="208" pos:column="68">// Available last line</comment>
	<decl_stmt><decl><type><specifier pos:line="209" pos:column="9">const</specifier> <name pos:line="209" pos:column="15">bool</name></type> <name pos:line="209" pos:column="20">foldComment</name> <init pos:line="209" pos:column="32">= <expr><call><name><name pos:line="209" pos:column="34">styler</name><op:operator pos:line="209" pos:column="40">.</op:operator><name pos:line="209" pos:column="41">GetPropertyInt</name></name><argument_list pos:line="209" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="209" pos:column="56">"fold.comment.yaml"</lit:literal></expr></argument>)</argument_list></call> <op:operator pos:line="209" pos:column="77">!=</op:operator> <lit:literal type="number" pos:line="209" pos:column="80">0</lit:literal></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="211" pos:column="9">// Backtrack to previous non-blank line so we can determine indent level</comment>
	<comment type="line" pos:line="212" pos:column="9">// for any white space lines</comment>
	<comment type="line" pos:line="213" pos:column="9">// and so we can fix any preceding fold level (which is why we go back</comment>
	<comment type="line" pos:line="214" pos:column="9">// at least one line in all cases)</comment>
	<decl_stmt><decl><type><name pos:line="215" pos:column="9">int</name></type> <name pos:line="215" pos:column="13">spaceFlags</name> <init pos:line="215" pos:column="24">= <expr><lit:literal type="number" pos:line="215" pos:column="26">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="216" pos:column="9">int</name></type> <name pos:line="216" pos:column="13">lineCurrent</name> <init pos:line="216" pos:column="25">= <expr><call><name><name pos:line="216" pos:column="27">styler</name><op:operator pos:line="216" pos:column="33">.</op:operator><name pos:line="216" pos:column="34">GetLine</name></name><argument_list pos:line="216" pos:column="41">(<argument><expr><name pos:line="216" pos:column="42">startPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="217" pos:column="9">int</name></type> <name pos:line="217" pos:column="13">indentCurrent</name> <init pos:line="217" pos:column="27">= <expr><call><name><name pos:line="217" pos:column="29">styler</name><op:operator pos:line="217" pos:column="35">.</op:operator><name pos:line="217" pos:column="36">IndentAmount</name></name><argument_list pos:line="217" pos:column="48">(<argument><expr><name pos:line="217" pos:column="49">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="217" pos:column="62">&amp;</op:operator><name pos:line="217" pos:column="63">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="217" pos:column="75">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while pos:line="218" pos:column="9">while <condition pos:line="218" pos:column="15">(<expr><name pos:line="218" pos:column="16">lineCurrent</name> <op:operator pos:line="218" pos:column="28">&gt;</op:operator> <lit:literal type="number" pos:line="218" pos:column="30">0</lit:literal></expr>)</condition> <block pos:line="218" pos:column="33">{
		<expr_stmt><expr><name pos:line="219" pos:column="17">lineCurrent</name><op:operator pos:line="219" pos:column="28">--</op:operator></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="220" pos:column="17">indentCurrent</name> <op:operator pos:line="220" pos:column="31">=</op:operator> <call><name><name pos:line="220" pos:column="33">styler</name><op:operator pos:line="220" pos:column="39">.</op:operator><name pos:line="220" pos:column="40">IndentAmount</name></name><argument_list pos:line="220" pos:column="52">(<argument><expr><name pos:line="220" pos:column="53">lineCurrent</name></expr></argument>, <argument><expr><op:operator pos:line="220" pos:column="66">&amp;</op:operator><name pos:line="220" pos:column="67">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="220" pos:column="79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="221" pos:column="17">if <condition pos:line="221" pos:column="20">(<expr><op:operator pos:line="221" pos:column="21">!</op:operator><op:operator pos:line="221" pos:column="22">(</op:operator><name pos:line="221" pos:column="23">indentCurrent</name> <op:operator pos:line="221" pos:column="37">&amp;</op:operator> <name pos:line="221" pos:column="39">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="221" pos:column="60">)</op:operator> <op:operator pos:line="221" pos:column="62">&amp;&amp;</op:operator>
		        <op:operator pos:line="222" pos:column="25">(</op:operator><op:operator pos:line="222" pos:column="26">!</op:operator><call><name pos:line="222" pos:column="27">IsCommentLine</name><argument_list pos:line="222" pos:column="40">(<argument><expr><name pos:line="222" pos:column="41">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="222" pos:column="54">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="222" pos:column="61">)</op:operator></expr>)</condition><then pos:line="222" pos:column="63">
			<break pos:line="223" pos:column="25">break;</break></then></if>
	}</block></while>
	<decl_stmt><decl><type><name pos:line="225" pos:column="9">int</name></type> <name pos:line="225" pos:column="13">indentCurrentLevel</name> <init pos:line="225" pos:column="32">= <expr><name pos:line="225" pos:column="34">indentCurrent</name> <op:operator pos:line="225" pos:column="48">&amp;</op:operator> <name pos:line="225" pos:column="50">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="227" pos:column="9">// Set up initial loop state</comment>
	<decl_stmt><decl><type><name pos:line="228" pos:column="9">int</name></type> <name pos:line="228" pos:column="13">prevComment</name> <init pos:line="228" pos:column="25">= <expr><lit:literal type="number" pos:line="228" pos:column="27">0</lit:literal></expr></init></decl>;</decl_stmt>
	<if pos:line="229" pos:column="9">if <condition pos:line="229" pos:column="12">(<expr><name pos:line="229" pos:column="13">lineCurrent</name> <op:operator pos:line="229" pos:column="25">&gt;=</op:operator> <lit:literal type="number" pos:line="229" pos:column="28">1</lit:literal></expr>)</condition><then pos:line="229" pos:column="30">
		<expr_stmt><expr><name pos:line="230" pos:column="17">prevComment</name> <op:operator pos:line="230" pos:column="29">=</op:operator> <name pos:line="230" pos:column="31">foldComment</name> <op:operator pos:line="230" pos:column="43">&amp;&amp;</op:operator> <call><name pos:line="230" pos:column="46">IsCommentLine</name><argument_list pos:line="230" pos:column="59">(<argument><expr><name pos:line="230" pos:column="60">lineCurrent</name> <op:operator pos:line="230" pos:column="72">-</op:operator> <lit:literal type="number" pos:line="230" pos:column="74">1</lit:literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="77">styler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<comment type="line" pos:line="232" pos:column="9">// Process all characters to end of requested range</comment>
	<comment type="line" pos:line="233" pos:column="9">// or comment that hangs over the end of the range.  Cap processing in all cases</comment>
	<comment type="line" pos:line="234" pos:column="9">// to end of document (in case of unclosed comment at end).</comment>
	<while pos:line="235" pos:column="9">while <condition pos:line="235" pos:column="15">(<expr><op:operator pos:line="235" pos:column="16">(</op:operator><name pos:line="235" pos:column="17">lineCurrent</name> <op:operator pos:line="235" pos:column="29">&lt;=</op:operator> <name pos:line="235" pos:column="32">docLines</name><op:operator pos:line="235" pos:column="40">)</op:operator> <op:operator pos:line="235" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="235" pos:column="45">(</op:operator><op:operator pos:line="235" pos:column="46">(</op:operator><name pos:line="235" pos:column="47">lineCurrent</name> <op:operator pos:line="235" pos:column="59">&lt;=</op:operator> <name pos:line="235" pos:column="62">maxLines</name><op:operator pos:line="235" pos:column="70">)</op:operator> <op:operator pos:line="235" pos:column="72">||</op:operator> <name pos:line="235" pos:column="75">prevComment</name><op:operator pos:line="235" pos:column="86">)</op:operator></expr>)</condition> <block pos:line="235" pos:column="89">{

		<comment type="line" pos:line="237" pos:column="17">// Gather info</comment>
		<decl_stmt><decl><type><name pos:line="238" pos:column="17">int</name></type> <name pos:line="238" pos:column="21">lev</name> <init pos:line="238" pos:column="25">= <expr><name pos:line="238" pos:column="27">indentCurrent</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="239" pos:column="17">int</name></type> <name pos:line="239" pos:column="21">lineNext</name> <init pos:line="239" pos:column="30">= <expr><name pos:line="239" pos:column="32">lineCurrent</name> <op:operator pos:line="239" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="239" pos:column="46">1</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="240" pos:column="17">int</name></type> <name pos:line="240" pos:column="21">indentNext</name> <init pos:line="240" pos:column="32">= <expr><name pos:line="240" pos:column="34">indentCurrent</name></expr></init></decl>;</decl_stmt>
		<if pos:line="241" pos:column="17">if <condition pos:line="241" pos:column="20">(<expr><name pos:line="241" pos:column="21">lineNext</name> <op:operator pos:line="241" pos:column="30">&lt;=</op:operator> <name pos:line="241" pos:column="33">docLines</name></expr>)</condition><then pos:line="241" pos:column="42"> <block pos:line="241" pos:column="43">{
			<comment type="line" pos:line="242" pos:column="25">// Information about next line is only available if not at end of document</comment>
			<expr_stmt><expr><name pos:line="243" pos:column="25">indentNext</name> <op:operator pos:line="243" pos:column="36">=</op:operator> <call><name><name pos:line="243" pos:column="38">styler</name><op:operator pos:line="243" pos:column="44">.</op:operator><name pos:line="243" pos:column="45">IndentAmount</name></name><argument_list pos:line="243" pos:column="57">(<argument><expr><name pos:line="243" pos:column="58">lineNext</name></expr></argument>, <argument><expr><op:operator pos:line="243" pos:column="68">&amp;</op:operator><name pos:line="243" pos:column="69">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="243" pos:column="81">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
		<decl_stmt><decl><type><specifier pos:line="245" pos:column="17">const</specifier> <name pos:line="245" pos:column="23">int</name></type> <name pos:line="245" pos:column="27">comment</name> <init pos:line="245" pos:column="35">= <expr><name pos:line="245" pos:column="37">foldComment</name> <op:operator pos:line="245" pos:column="49">&amp;&amp;</op:operator> <call><name pos:line="245" pos:column="52">IsCommentLine</name><argument_list pos:line="245" pos:column="65">(<argument><expr><name pos:line="245" pos:column="66">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="245" pos:column="79">styler</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="246" pos:column="17">const</specifier> <name pos:line="246" pos:column="23">int</name></type> <name pos:line="246" pos:column="27">comment_start</name> <init pos:line="246" pos:column="41">= <expr><op:operator pos:line="246" pos:column="43">(</op:operator><name pos:line="246" pos:column="44">comment</name> <op:operator pos:line="246" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="246" pos:column="55">!</op:operator><name pos:line="246" pos:column="56">prevComment</name> <op:operator pos:line="246" pos:column="68">&amp;&amp;</op:operator> <op:operator pos:line="246" pos:column="71">(</op:operator><name pos:line="246" pos:column="72">lineNext</name> <op:operator pos:line="246" pos:column="81">&lt;=</op:operator> <name pos:line="246" pos:column="84">docLines</name><op:operator pos:line="246" pos:column="92">)</op:operator> <op:operator pos:line="246" pos:column="94">&amp;&amp;</op:operator>
		                           <call><name pos:line="247" pos:column="44">IsCommentLine</name><argument_list pos:line="247" pos:column="57">(<argument><expr><name pos:line="247" pos:column="58">lineNext</name></expr></argument>, <argument><expr><name pos:line="247" pos:column="68">styler</name></expr></argument>)</argument_list></call> <op:operator pos:line="247" pos:column="76">&amp;&amp;</op:operator> <op:operator pos:line="247" pos:column="79">(</op:operator><name pos:line="247" pos:column="80">lev</name> <op:operator pos:line="247" pos:column="84">&gt;</op:operator> <name pos:line="247" pos:column="86">SC_FOLDLEVELBASE</name><op:operator pos:line="247" pos:column="102">)</op:operator><op:operator pos:line="247" pos:column="103">)</op:operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="248" pos:column="17">const</specifier> <name pos:line="248" pos:column="23">int</name></type> <name pos:line="248" pos:column="27">comment_continue</name> <init pos:line="248" pos:column="44">= <expr><op:operator pos:line="248" pos:column="46">(</op:operator><name pos:line="248" pos:column="47">comment</name> <op:operator pos:line="248" pos:column="55">&amp;&amp;</op:operator> <name pos:line="248" pos:column="58">prevComment</name><op:operator pos:line="248" pos:column="69">)</op:operator></expr></init></decl>;</decl_stmt>
		<if pos:line="249" pos:column="17">if <condition pos:line="249" pos:column="20">(<expr><op:operator pos:line="249" pos:column="21">!</op:operator><name pos:line="249" pos:column="22">comment</name></expr>)</condition><then pos:line="249" pos:column="30">
			<expr_stmt><expr><name pos:line="250" pos:column="25">indentCurrentLevel</name> <op:operator pos:line="250" pos:column="44">=</op:operator> <name pos:line="250" pos:column="46">indentCurrent</name> <op:operator pos:line="250" pos:column="60">&amp;</op:operator> <name pos:line="250" pos:column="62">SC_FOLDLEVELNUMBERMASK</name></expr>;</expr_stmt></then></if>
		<if pos:line="251" pos:column="17">if <condition pos:line="251" pos:column="20">(<expr><name pos:line="251" pos:column="21">indentNext</name> <op:operator pos:line="251" pos:column="32">&amp;</op:operator> <name pos:line="251" pos:column="34">SC_FOLDLEVELWHITEFLAG</name></expr>)</condition><then pos:line="251" pos:column="56">
			<expr_stmt><expr><name pos:line="252" pos:column="25">indentNext</name> <op:operator pos:line="252" pos:column="36">=</op:operator> <name pos:line="252" pos:column="38">SC_FOLDLEVELWHITEFLAG</name> <op:operator pos:line="252" pos:column="60">|</op:operator> <name pos:line="252" pos:column="62">indentCurrentLevel</name></expr>;</expr_stmt></then></if>

		<if pos:line="254" pos:column="17">if <condition pos:line="254" pos:column="20">(<expr><name pos:line="254" pos:column="21">comment_start</name></expr>)</condition><then pos:line="254" pos:column="35"> <block pos:line="254" pos:column="36">{
			<comment type="line" pos:line="255" pos:column="25">// Place fold point at start of a block of comments</comment>
			<expr_stmt><expr><name pos:line="256" pos:column="25">lev</name> <op:operator pos:line="256" pos:column="29">|=</op:operator> <name pos:line="256" pos:column="32">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="257" pos:column="19">else <if pos:line="257" pos:column="24">if <condition pos:line="257" pos:column="27">(<expr><name pos:line="257" pos:column="28">comment_continue</name></expr>)</condition><then pos:line="257" pos:column="45"> <block pos:line="257" pos:column="46">{
			<comment type="line" pos:line="258" pos:column="25">// Add level to rest of lines in the block</comment>
			<expr_stmt><expr><name pos:line="259" pos:column="25">lev</name> <op:operator pos:line="259" pos:column="29">=</op:operator> <name pos:line="259" pos:column="31">lev</name> <op:operator pos:line="259" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="259" pos:column="37">1</lit:literal></expr>;</expr_stmt>
		}</block></then></if></else></if>

		<comment type="line" pos:line="262" pos:column="17">// Skip past any blank lines for next indent level info; we skip also</comment>
		<comment type="line" pos:line="263" pos:column="17">// comments (all comments, not just those starting in column 0)</comment>
		<comment type="line" pos:line="264" pos:column="17">// which effectively folds them into surrounding code rather</comment>
		<comment type="line" pos:line="265" pos:column="17">// than screwing up folding.</comment>

		<while pos:line="267" pos:column="17">while <condition pos:line="267" pos:column="23">(<expr><op:operator pos:line="267" pos:column="24">(</op:operator><name pos:line="267" pos:column="25">lineNext</name> <op:operator pos:line="267" pos:column="34">&lt;</op:operator> <name pos:line="267" pos:column="36">docLines</name><op:operator pos:line="267" pos:column="44">)</op:operator> <op:operator pos:line="267" pos:column="46">&amp;&amp;</op:operator>
		        <op:operator pos:line="268" pos:column="25">(</op:operator><op:operator pos:line="268" pos:column="26">(</op:operator><name pos:line="268" pos:column="27">indentNext</name> <op:operator pos:line="268" pos:column="38">&amp;</op:operator> <name pos:line="268" pos:column="40">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="268" pos:column="61">)</op:operator> <op:operator pos:line="268" pos:column="63">||</op:operator>
		         <op:operator pos:line="269" pos:column="26">(</op:operator><name pos:line="269" pos:column="27">lineNext</name> <op:operator pos:line="269" pos:column="36">&lt;=</op:operator> <name pos:line="269" pos:column="39">docLines</name> <op:operator pos:line="269" pos:column="48">&amp;&amp;</op:operator> <call><name pos:line="269" pos:column="51">IsCommentLine</name><argument_list pos:line="269" pos:column="64">(<argument><expr><name pos:line="269" pos:column="65">lineNext</name></expr></argument>, <argument><expr><name pos:line="269" pos:column="75">styler</name></expr></argument>)</argument_list></call><op:operator pos:line="269" pos:column="82">)</op:operator><op:operator pos:line="269" pos:column="83">)</op:operator></expr>)</condition> <block pos:line="269" pos:column="86">{

			<expr_stmt><expr><name pos:line="271" pos:column="25">lineNext</name><op:operator pos:line="271" pos:column="33">++</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="272" pos:column="25">indentNext</name> <op:operator pos:line="272" pos:column="36">=</op:operator> <call><name><name pos:line="272" pos:column="38">styler</name><op:operator pos:line="272" pos:column="44">.</op:operator><name pos:line="272" pos:column="45">IndentAmount</name></name><argument_list pos:line="272" pos:column="57">(<argument><expr><name pos:line="272" pos:column="58">lineNext</name></expr></argument>, <argument><expr><op:operator pos:line="272" pos:column="68">&amp;</op:operator><name pos:line="272" pos:column="69">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="272" pos:column="81">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<decl_stmt><decl><type><specifier pos:line="275" pos:column="17">const</specifier> <name pos:line="275" pos:column="23">int</name></type> <name pos:line="275" pos:column="27">levelAfterComments</name> <init pos:line="275" pos:column="46">= <expr><name pos:line="275" pos:column="48">indentNext</name> <op:operator pos:line="275" pos:column="59">&amp;</op:operator> <name pos:line="275" pos:column="61">SC_FOLDLEVELNUMBERMASK</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier pos:line="276" pos:column="17">const</specifier> <name pos:line="276" pos:column="23">int</name></type> <name pos:line="276" pos:column="27">levelBeforeComments</name> <init pos:line="276" pos:column="47">= <expr><call><name pos:line="276" pos:column="49">Maximum</name><argument_list pos:line="276" pos:column="56">(<argument><expr><name pos:line="276" pos:column="57">indentCurrentLevel</name></expr></argument>,<argument><expr><name pos:line="276" pos:column="76">levelAfterComments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line" pos:line="278" pos:column="17">// Now set all the indent levels on the lines we skipped</comment>
		<comment type="line" pos:line="279" pos:column="17">// Do this from end to start.  Once we encounter one line</comment>
		<comment type="line" pos:line="280" pos:column="17">// which is indented more than the line after the end of</comment>
		<comment type="line" pos:line="281" pos:column="17">// the comment-block, use the level of the block before</comment>

		<decl_stmt><decl><type><name pos:line="283" pos:column="17">int</name></type> <name pos:line="283" pos:column="21">skipLine</name> <init pos:line="283" pos:column="30">= <expr><name pos:line="283" pos:column="32">lineNext</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="284" pos:column="17">int</name></type> <name pos:line="284" pos:column="21">skipLevel</name> <init pos:line="284" pos:column="31">= <expr><name pos:line="284" pos:column="33">levelAfterComments</name></expr></init></decl>;</decl_stmt>

		<while pos:line="286" pos:column="17">while <condition pos:line="286" pos:column="23">(<expr><op:operator pos:line="286" pos:column="24">--</op:operator><name pos:line="286" pos:column="26">skipLine</name> <op:operator pos:line="286" pos:column="35">&gt;</op:operator> <name pos:line="286" pos:column="37">lineCurrent</name></expr>)</condition> <block pos:line="286" pos:column="50">{
			<decl_stmt><decl><type><name pos:line="287" pos:column="25">int</name></type> <name pos:line="287" pos:column="29">skipLineIndent</name> <init pos:line="287" pos:column="44">= <expr><call><name><name pos:line="287" pos:column="46">styler</name><op:operator pos:line="287" pos:column="52">.</op:operator><name pos:line="287" pos:column="53">IndentAmount</name></name><argument_list pos:line="287" pos:column="65">(<argument><expr><name pos:line="287" pos:column="66">skipLine</name></expr></argument>, <argument><expr><op:operator pos:line="287" pos:column="76">&amp;</op:operator><name pos:line="287" pos:column="77">spaceFlags</name></expr></argument>, <argument><expr><name pos:line="287" pos:column="89">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if pos:line="289" pos:column="25">if <condition pos:line="289" pos:column="28">(<expr><op:operator pos:line="289" pos:column="29">(</op:operator><name pos:line="289" pos:column="30">skipLineIndent</name> <op:operator pos:line="289" pos:column="45">&amp;</op:operator> <name pos:line="289" pos:column="47">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="289" pos:column="69">)</op:operator> <op:operator pos:line="289" pos:column="71">&gt;</op:operator> <name pos:line="289" pos:column="73">levelAfterComments</name></expr>)</condition><then pos:line="289" pos:column="92">
				<expr_stmt><expr><name pos:line="290" pos:column="33">skipLevel</name> <op:operator pos:line="290" pos:column="43">=</op:operator> <name pos:line="290" pos:column="45">levelBeforeComments</name></expr>;</expr_stmt></then></if>

			<decl_stmt><decl><type><name pos:line="292" pos:column="25">int</name></type> <name pos:line="292" pos:column="29">whiteFlag</name> <init pos:line="292" pos:column="39">= <expr><name pos:line="292" pos:column="41">skipLineIndent</name> <op:operator pos:line="292" pos:column="56">&amp;</op:operator> <name pos:line="292" pos:column="58">SC_FOLDLEVELWHITEFLAG</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name><name pos:line="294" pos:column="25">styler</name><op:operator pos:line="294" pos:column="31">.</op:operator><name pos:line="294" pos:column="32">SetLevel</name></name><argument_list pos:line="294" pos:column="40">(<argument><expr><name pos:line="294" pos:column="41">skipLine</name></expr></argument>, <argument><expr><name pos:line="294" pos:column="51">skipLevel</name> <op:operator pos:line="294" pos:column="61">|</op:operator> <name pos:line="294" pos:column="63">whiteFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>

		<comment type="line" pos:line="297" pos:column="17">// Set fold header on non-comment line</comment>
		<if pos:line="298" pos:column="17">if <condition pos:line="298" pos:column="20">(<expr><op:operator pos:line="298" pos:column="21">!</op:operator><name pos:line="298" pos:column="22">comment</name> <op:operator pos:line="298" pos:column="30">&amp;&amp;</op:operator> <op:operator pos:line="298" pos:column="33">!</op:operator><op:operator pos:line="298" pos:column="34">(</op:operator><name pos:line="298" pos:column="35">indentCurrent</name> <op:operator pos:line="298" pos:column="49">&amp;</op:operator> <name pos:line="298" pos:column="51">SC_FOLDLEVELWHITEFLAG</name><op:operator pos:line="298" pos:column="72">)</op:operator></expr> )</condition><then pos:line="298" pos:column="75"> <block pos:line="298" pos:column="76">{
			<if pos:line="299" pos:column="25">if <condition pos:line="299" pos:column="28">(<expr><op:operator pos:line="299" pos:column="29">(</op:operator><name pos:line="299" pos:column="30">indentCurrent</name> <op:operator pos:line="299" pos:column="44">&amp;</op:operator> <name pos:line="299" pos:column="46">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="299" pos:column="68">)</op:operator> <op:operator pos:line="299" pos:column="70">&lt;</op:operator> <op:operator pos:line="299" pos:column="72">(</op:operator><name pos:line="299" pos:column="73">indentNext</name> <op:operator pos:line="299" pos:column="84">&amp;</op:operator> <name pos:line="299" pos:column="86">SC_FOLDLEVELNUMBERMASK</name><op:operator pos:line="299" pos:column="108">)</op:operator></expr>)</condition><then pos:line="299" pos:column="110">
				<expr_stmt><expr><name pos:line="300" pos:column="33">lev</name> <op:operator pos:line="300" pos:column="37">|=</op:operator> <name pos:line="300" pos:column="40">SC_FOLDLEVELHEADERFLAG</name></expr>;</expr_stmt></then></if>
		}</block></then></if>

		<comment type="line" pos:line="303" pos:column="17">// Keep track of block comment state of previous line</comment>
		<expr_stmt><expr><name pos:line="304" pos:column="17">prevComment</name> <op:operator pos:line="304" pos:column="29">=</op:operator> <name pos:line="304" pos:column="31">comment_start</name> <op:operator pos:line="304" pos:column="45">||</op:operator> <name pos:line="304" pos:column="48">comment_continue</name></expr>;</expr_stmt>

		<comment type="line" pos:line="306" pos:column="17">// Set fold level for this line and move to next line</comment>
		<expr_stmt><expr><call><name><name pos:line="307" pos:column="17">styler</name><op:operator pos:line="307" pos:column="23">.</op:operator><name pos:line="307" pos:column="24">SetLevel</name></name><argument_list pos:line="307" pos:column="32">(<argument><expr><name pos:line="307" pos:column="33">lineCurrent</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="46">lev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="308" pos:column="17">indentCurrent</name> <op:operator pos:line="308" pos:column="31">=</op:operator> <name pos:line="308" pos:column="33">indentNext</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="309" pos:column="17">lineCurrent</name> <op:operator pos:line="309" pos:column="29">=</op:operator> <name pos:line="309" pos:column="31">lineNext</name></expr>;</expr_stmt>
	}</block></while>

	<comment type="line" pos:line="312" pos:column="9">// NOTE: Cannot set level of last line here because indentCurrent doesn't have</comment>
	<comment type="line" pos:line="313" pos:column="9">// header flag set; the loop above is crafted to take care of this case!</comment>
	<comment type="line" pos:line="314" pos:column="9">//styler.SetLevel(lineCurrent, indentCurrent);</comment>
}</block></function>

<decl_stmt><decl><type><name pos:line="317" pos:column="1">LexerModule</name></type> <name pos:line="317" pos:column="13">lmYAML</name><argument_list pos:line="317" pos:column="19">(<argument><expr><name pos:line="317" pos:column="20">SCLEX_YAML</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="32">ColouriseYAMLDoc</name></expr></argument>, <argument><expr><lit:literal type="string" pos:line="317" pos:column="50">"yaml"</lit:literal></expr></argument>, <argument><expr><name pos:line="317" pos:column="58">FoldYAMLDoc</name></expr></argument>, <argument><expr><name pos:line="317" pos:column="71">yamlWordListDesc</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</unit>
