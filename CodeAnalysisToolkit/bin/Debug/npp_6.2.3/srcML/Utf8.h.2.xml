<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\Utf8.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Simple functions to test UTF-8 characters.</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2010 Francois-R.Boyer@PolyMtl.ca</comment>
<comment type="line" pos:line="3" pos:column="1">// First version 2010-08</comment>
<comment type="line" pos:line="4" pos:column="1">//</comment>
<comment type="line" pos:line="5" pos:column="1">// Written for notepad++, and distributed under same license:</comment>
<comment type="line" pos:line="6" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="7" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="8" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="9" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>

<comment type="line" pos:line="11" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="12" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="13" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="14" pos:column="1">// GNU General Public License for more details.</comment>

<comment type="line" pos:line="16" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="17" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="18" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<namespace pos:line="20" pos:column="1">namespace <name pos:line="20" pos:column="11">Utf8</name> <block pos:line="20" pos:column="16">{ <comment type="line" pos:line="20" pos:column="18">// could be a static class, instead of a namespace, if it needs private members</comment>
	<comment type="line" pos:line="21" pos:column="9">// basic classification of UTF-8 bytes</comment>
	<function><type><specifier pos:line="22" pos:column="9">inline</specifier> <specifier pos:line="22" pos:column="16">static</specifier> <name pos:line="22" pos:column="23">bool</name></type> <name pos:line="22" pos:column="28">isSingleByte</name><parameter_list pos:line="22" pos:column="40">(<param><decl><type><name pos:line="22" pos:column="41">UCHAR</name></type> <name pos:line="22" pos:column="47">c</name></decl></param>)</parameter_list>       <block pos:line="22" pos:column="56">{ <return pos:line="22" pos:column="58">return <expr><name pos:line="22" pos:column="65">c</name> <op:operator pos:line="22" pos:column="67">&lt;</op:operator> <lit:literal type="number" pos:line="22" pos:column="69">0x80</lit:literal></expr>;</return> }</block></function>
	<function><type><specifier pos:line="23" pos:column="9">inline</specifier> <specifier pos:line="23" pos:column="16">static</specifier> <name pos:line="23" pos:column="23">bool</name></type> <name pos:line="23" pos:column="28">isPartOfMultibyte</name><parameter_list pos:line="23" pos:column="45">(<param><decl><type><name pos:line="23" pos:column="46">UCHAR</name></type> <name pos:line="23" pos:column="52">c</name></decl></param>)</parameter_list>  <block pos:line="23" pos:column="56">{ <return pos:line="23" pos:column="58">return <expr><name pos:line="23" pos:column="65">c</name> <op:operator pos:line="23" pos:column="67">&gt;=</op:operator> <lit:literal type="number" pos:line="23" pos:column="70">0x80</lit:literal></expr>;</return> }</block></function>
	<function><type><specifier pos:line="24" pos:column="9">inline</specifier> <specifier pos:line="24" pos:column="16">static</specifier> <name pos:line="24" pos:column="23">bool</name></type> <name pos:line="24" pos:column="28">isFirstOfMultibyte</name><parameter_list pos:line="24" pos:column="46">(<param><decl><type><name pos:line="24" pos:column="47">UCHAR</name></type> <name pos:line="24" pos:column="53">c</name></decl></param>)</parameter_list> <block pos:line="24" pos:column="56">{ <return pos:line="24" pos:column="58">return <expr><name pos:line="24" pos:column="65">c</name> <op:operator pos:line="24" pos:column="67">&gt;=</op:operator> <lit:literal type="number" pos:line="24" pos:column="70">0xC2</lit:literal> <op:operator pos:line="24" pos:column="75">&amp;&amp;</op:operator> <name pos:line="24" pos:column="78">c</name> <op:operator pos:line="24" pos:column="80">&lt;</op:operator> <lit:literal type="number" pos:line="24" pos:column="82">0xF5</lit:literal></expr>;</return> }</block></function> <comment type="line" pos:line="24" pos:column="90">// 0xF5 to 0xFD are defined by UTF-8, but are not currently valid Unicode</comment>
	<function><type><specifier pos:line="25" pos:column="9">inline</specifier> <specifier pos:line="25" pos:column="16">static</specifier> <name pos:line="25" pos:column="23">bool</name></type> <name pos:line="25" pos:column="28">isContinuation</name><parameter_list pos:line="25" pos:column="42">(<param><decl><type><name pos:line="25" pos:column="43">UCHAR</name></type> <name pos:line="25" pos:column="49">c</name></decl></param>)</parameter_list>     <block pos:line="25" pos:column="56">{ <return pos:line="25" pos:column="58">return <expr><op:operator pos:line="25" pos:column="65">(</op:operator><name pos:line="25" pos:column="66">c</name> <op:operator pos:line="25" pos:column="68">&amp;</op:operator> <lit:literal type="number" pos:line="25" pos:column="70">0xC0</lit:literal><op:operator pos:line="25" pos:column="74">)</op:operator> <op:operator pos:line="25" pos:column="76">==</op:operator> <lit:literal type="number" pos:line="25" pos:column="79">0x80</lit:literal></expr>;</return> }</block></function>
	<function><type><specifier pos:line="26" pos:column="9">inline</specifier> <specifier pos:line="26" pos:column="16">static</specifier> <name pos:line="26" pos:column="23">bool</name></type> <name pos:line="26" pos:column="28">isValid</name><parameter_list pos:line="26" pos:column="35">(<param><decl><type><name pos:line="26" pos:column="36">UCHAR</name></type> <name pos:line="26" pos:column="42">c</name></decl></param>)</parameter_list>            <block pos:line="26" pos:column="56">{ <return pos:line="26" pos:column="58">return <expr><name pos:line="26" pos:column="65">c</name> <op:operator pos:line="26" pos:column="67">&lt;</op:operator> <lit:literal type="number" pos:line="26" pos:column="69">0xC0</lit:literal> <op:operator pos:line="26" pos:column="74">||</op:operator> <call><name pos:line="26" pos:column="77">isFirstOfMultibyte</name><argument_list pos:line="26" pos:column="95">(<argument><expr><name pos:line="26" pos:column="96">c</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>	<comment type="line" pos:line="26" pos:column="105">// validates a byte, out of context</comment>

	<comment type="line" pos:line="28" pos:column="9">// number of continuation bytes for a given valid first character (0 for single byte characters)</comment>
	<function><type><specifier pos:line="29" pos:column="9">inline</specifier> <specifier pos:line="29" pos:column="16">static</specifier> <name pos:line="29" pos:column="23">int</name></type>  <name pos:line="29" pos:column="28">continuationBytes</name><parameter_list pos:line="29" pos:column="45">(<param><decl><type><name pos:line="29" pos:column="46">UCHAR</name></type> <name pos:line="29" pos:column="52">c</name></decl></param>)</parameter_list>  <block pos:line="29" pos:column="56">{
		<decl_stmt><decl><type><specifier pos:line="30" pos:column="17">static</specifier> <specifier pos:line="30" pos:column="24">const</specifier> <name pos:line="30" pos:column="30">char</name></type> <name><name pos:line="30" pos:column="35">_len</name><index pos:line="30" pos:column="39">[]</index></name> <init pos:line="30" pos:column="42">= <expr><block pos:line="30" pos:column="44">{ <expr><lit:literal type="number" pos:line="30" pos:column="46">1</lit:literal></expr>,<expr><lit:literal type="number" pos:line="30" pos:column="48">1</lit:literal></expr>,<expr><lit:literal type="number" pos:line="30" pos:column="50">2</lit:literal></expr>,<expr><lit:literal type="number" pos:line="30" pos:column="52">3</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<return pos:line="31" pos:column="17">return <expr><op:operator pos:line="31" pos:column="24">(</op:operator><name pos:line="31" pos:column="25">c</name> <op:operator pos:line="31" pos:column="27">&lt;</op:operator> <lit:literal type="number" pos:line="31" pos:column="29">0xC0</lit:literal><op:operator pos:line="31" pos:column="33">)</op:operator> <op:operator pos:line="31" pos:column="35">?</op:operator> <lit:literal type="number" pos:line="31" pos:column="37">0</lit:literal> <op:operator pos:line="31" pos:column="39">:</op:operator> <name><name pos:line="31" pos:column="41">_len</name><index pos:line="31" pos:column="45">[<expr><op:operator pos:line="31" pos:column="46">(</op:operator><name pos:line="31" pos:column="47">c</name> <op:operator pos:line="31" pos:column="49">&amp;</op:operator> <lit:literal type="number" pos:line="31" pos:column="51">0x30</lit:literal><op:operator pos:line="31" pos:column="55">)</op:operator> <op:operator pos:line="31" pos:column="57">&gt;&gt;</op:operator>  <lit:literal type="number" pos:line="31" pos:column="61">4</lit:literal></expr>]</index></name></expr>;</return>
	}</block></function> 

	<comment type="line" pos:line="34" pos:column="9">// validates a full character</comment>
	<function><type><specifier pos:line="35" pos:column="9">inline</specifier> <specifier pos:line="35" pos:column="16">static</specifier> <name pos:line="35" pos:column="23">bool</name></type> <name pos:line="35" pos:column="28">isValid</name><parameter_list pos:line="35" pos:column="35">(<param><decl><type><specifier pos:line="35" pos:column="36">const</specifier> <name pos:line="35" pos:column="42">char</name><type:modifier pos:line="35" pos:column="46">*</type:modifier></type> <name pos:line="35" pos:column="48">buf</name></decl></param>, <param><decl><type><name pos:line="35" pos:column="53">int</name></type> <name pos:line="35" pos:column="57">buflen</name></decl></param>)</parameter_list> <block pos:line="35" pos:column="65">{
		<if pos:line="36" pos:column="17">if<condition pos:line="36" pos:column="19">(<expr><call><name pos:line="36" pos:column="20">isSingleByte</name><argument_list pos:line="36" pos:column="32">(<argument><expr><name><name pos:line="36" pos:column="33">buf</name><index pos:line="36" pos:column="36">[<expr><lit:literal type="number" pos:line="36" pos:column="37">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="36" pos:column="41"> <return pos:line="36" pos:column="42">return <expr><lit:literal type="boolean" pos:line="36" pos:column="49">true</lit:literal></expr>;</return></then></if> <comment type="line" pos:line="36" pos:column="55">// single byte is valid</comment>
		<if pos:line="37" pos:column="17">if<condition pos:line="37" pos:column="19">(<expr><op:operator pos:line="37" pos:column="20">!</op:operator><call><name pos:line="37" pos:column="21">isFirstOfMultibyte</name><argument_list pos:line="37" pos:column="39">(<argument><expr><name><name pos:line="37" pos:column="40">buf</name><index pos:line="37" pos:column="43">[<expr><lit:literal type="number" pos:line="37" pos:column="44">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="37" pos:column="48"> <return pos:line="37" pos:column="49">return <expr><lit:literal type="boolean" pos:line="37" pos:column="56">false</lit:literal></expr>;</return></then></if> <comment type="line" pos:line="37" pos:column="63">// not single byte, nor valid multi-byte first byte</comment>
		<decl_stmt><decl><type><name pos:line="38" pos:column="17">int</name></type> <name pos:line="38" pos:column="21">charContinuationBytes</name> <init pos:line="38" pos:column="43">= <expr><call><name pos:line="38" pos:column="45">continuationBytes</name><argument_list pos:line="38" pos:column="62">(<argument><expr><name><name pos:line="38" pos:column="63">buf</name><index pos:line="38" pos:column="66">[<expr><lit:literal type="number" pos:line="38" pos:column="67">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="39" pos:column="17">if<condition pos:line="39" pos:column="19">(<expr><name pos:line="39" pos:column="20">buflen</name> <op:operator pos:line="39" pos:column="27">&lt;</op:operator> <name pos:line="39" pos:column="29">charContinuationBytes</name><op:operator pos:line="39" pos:column="50">+</op:operator><lit:literal type="number" pos:line="39" pos:column="51">1</lit:literal></expr>)</condition><then pos:line="39" pos:column="53"> <return pos:line="39" pos:column="54">return <expr><lit:literal type="boolean" pos:line="39" pos:column="61">false</lit:literal></expr>;</return></then></if> <comment type="line" pos:line="39" pos:column="68">// character does not fit in buffer</comment>
		<for pos:line="40" pos:column="17">for(<init><decl><type><name pos:line="40" pos:column="21">int</name></type> <name pos:line="40" pos:column="25">i</name> <init pos:line="40" pos:column="27">= <expr><name pos:line="40" pos:column="29">charContinuationBytes</name></expr></init></decl>;</init> <condition><expr><name pos:line="40" pos:column="52">i</name><op:operator pos:line="40" pos:column="53">&gt;</op:operator><lit:literal type="number" pos:line="40" pos:column="54">0</lit:literal></expr>;</condition> <incr><expr><op:operator pos:line="40" pos:column="57">--</op:operator><name pos:line="40" pos:column="59">i</name></expr></incr>)
			<if pos:line="41" pos:column="25">if<condition pos:line="41" pos:column="27">(<expr><op:operator pos:line="41" pos:column="28">!</op:operator><call><name pos:line="41" pos:column="29">isContinuation</name><argument_list pos:line="41" pos:column="43">(<argument><expr><op:operator pos:line="41" pos:column="44">*</op:operator><op:operator pos:line="41" pos:column="45">(</op:operator><op:operator pos:line="41" pos:column="46">++</op:operator><name pos:line="41" pos:column="48">buf</name><op:operator pos:line="41" pos:column="51">)</op:operator></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="41" pos:column="54"> <return pos:line="41" pos:column="55">return <expr><lit:literal type="boolean" pos:line="41" pos:column="62">false</lit:literal></expr>;</return></then></if></for> <comment type="line" pos:line="41" pos:column="69">// not enough continuation bytes</comment>
		<return pos:line="42" pos:column="17">return <expr><lit:literal type="boolean" pos:line="42" pos:column="24">true</lit:literal></expr>;</return>  <comment type="line" pos:line="42" pos:column="31">// the character is valid (if there are too many continuation bytes, it is the next character that will be invalid)</comment>
	}</block></function>

	<comment type="line" pos:line="45" pos:column="9">// rewinds to the first byte of a multi-byte character for any valid UTF-8 (and will not rewind too much on any other input)</comment>
	<function><type><specifier pos:line="46" pos:column="9">inline</specifier> <specifier pos:line="46" pos:column="16">static</specifier> <name pos:line="46" pos:column="23">int</name></type> <name pos:line="46" pos:column="27">characterStart</name><parameter_list pos:line="46" pos:column="41">(<param><decl><type><specifier pos:line="46" pos:column="42">const</specifier> <name pos:line="46" pos:column="48">char</name><type:modifier pos:line="46" pos:column="52">*</type:modifier></type> <name pos:line="46" pos:column="54">buf</name></decl></param>, <param><decl><type><name pos:line="46" pos:column="59">int</name></type> <name pos:line="46" pos:column="63">startingIndex</name></decl></param>)</parameter_list> <block pos:line="46" pos:column="78">{
		<decl_stmt><decl><type><name pos:line="47" pos:column="17">int</name></type> <name pos:line="47" pos:column="21">charContinuationBytes</name> <init pos:line="47" pos:column="43">= <expr><lit:literal type="number" pos:line="47" pos:column="45">0</lit:literal></expr></init></decl>;</decl_stmt>
		<while pos:line="48" pos:column="17">while<condition pos:line="48" pos:column="22">(<expr><name pos:line="48" pos:column="23">charContinuationBytes</name> <op:operator pos:line="48" pos:column="45">&lt;</op:operator> <name pos:line="48" pos:column="47">startingIndex</name>	<comment type="line" pos:line="48" pos:column="65">// rewind past start of buffer?</comment>
			<op:operator pos:line="49" pos:column="25">&amp;&amp;</op:operator> <name pos:line="49" pos:column="28">charContinuationBytes</name> <op:operator pos:line="49" pos:column="50">&lt;</op:operator> <lit:literal type="number" pos:line="49" pos:column="52">5</lit:literal>	<comment type="line" pos:line="49" pos:column="57">// UTF-8 support up to 5 continuation bytes (but valid sequences currently do not have more than 3)</comment>
			<op:operator pos:line="50" pos:column="25">&amp;&amp;</op:operator> <call><name pos:line="50" pos:column="28">isContinuation</name><argument_list pos:line="50" pos:column="42">(<argument><expr><name><name pos:line="50" pos:column="43">buf</name><index pos:line="50" pos:column="46">[<expr><name pos:line="50" pos:column="47">startingIndex</name><op:operator pos:line="50" pos:column="60">-</op:operator><name pos:line="50" pos:column="61">charContinuationBytes</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>
			)</condition>
			<expr_stmt><expr><op:operator pos:line="52" pos:column="25">++</op:operator><name pos:line="52" pos:column="27">charContinuationBytes</name></expr>;</expr_stmt></while>
		<return pos:line="53" pos:column="17">return <expr><name pos:line="53" pos:column="24">startingIndex</name><op:operator pos:line="53" pos:column="37">-</op:operator><name pos:line="53" pos:column="38">charContinuationBytes</name></expr>;</return>
	}</block></function>
}</block></namespace><empty_stmt pos:line="55" pos:column="2">;</empty_stmt>
</unit>
