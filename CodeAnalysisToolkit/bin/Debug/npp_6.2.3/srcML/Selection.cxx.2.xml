<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\src\Selection.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file Selection.cxx
 ** Classes maintaining the selection.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 2009 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="12" pos:column="10">"Platform.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"Scintilla.h"</lit:literal></cpp:file></cpp:include>

<cpp:include pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="16" pos:column="10">"Selection.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">ifdef</cpp:directive> <name pos:line="18" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="19" pos:column="1">using namespace <name pos:line="19" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif</cpp:directive></cpp:endif>

<function><type><name pos:line="22" pos:column="1">void</name></type> <name><name pos:line="22" pos:column="6">SelectionPosition</name><op:operator pos:line="22" pos:column="23">::</op:operator><name pos:line="22" pos:column="25">MoveForInsertDelete</name></name><parameter_list pos:line="22" pos:column="44">(<param><decl><type><name pos:line="22" pos:column="45">bool</name></type> <name pos:line="22" pos:column="50">insertion</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="61">int</name></type> <name pos:line="22" pos:column="65">startChange</name></decl></param>, <param><decl><type><name pos:line="22" pos:column="78">int</name></type> <name pos:line="22" pos:column="82">length</name></decl></param>)</parameter_list> <block pos:line="22" pos:column="90">{
	<if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">position</name> <op:operator pos:line="23" pos:column="22">==</op:operator> <name pos:line="23" pos:column="25">startChange</name></expr>)</condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
		<expr_stmt><expr><name pos:line="24" pos:column="17">virtualSpace</name> <op:operator pos:line="24" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="24" pos:column="32">0</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">insertion</name></expr>)</condition><then pos:line="26" pos:column="23"> <block pos:line="26" pos:column="24">{
		<if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><name pos:line="27" pos:column="21">position</name> <op:operator pos:line="27" pos:column="30">&gt;</op:operator> <name pos:line="27" pos:column="32">startChange</name></expr>)</condition><then pos:line="27" pos:column="44"> <block pos:line="27" pos:column="45">{
			<expr_stmt><expr><name pos:line="28" pos:column="25">position</name> <op:operator pos:line="28" pos:column="34">+=</op:operator> <name pos:line="28" pos:column="37">length</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then> <else pos:line="30" pos:column="11">else <block pos:line="30" pos:column="16">{
		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">position</name> <op:operator pos:line="31" pos:column="30">&gt;</op:operator> <name pos:line="31" pos:column="32">startChange</name></expr>)</condition><then pos:line="31" pos:column="44"> <block pos:line="31" pos:column="45">{
			<decl_stmt><decl><type><name pos:line="32" pos:column="25">int</name></type> <name pos:line="32" pos:column="29">endDeletion</name> <init pos:line="32" pos:column="41">= <expr><name pos:line="32" pos:column="43">startChange</name> <op:operator pos:line="32" pos:column="55">+</op:operator> <name pos:line="32" pos:column="57">length</name></expr></init></decl>;</decl_stmt>
			<if pos:line="33" pos:column="25">if <condition pos:line="33" pos:column="28">(<expr><name pos:line="33" pos:column="29">position</name> <op:operator pos:line="33" pos:column="38">&gt;</op:operator> <name pos:line="33" pos:column="40">endDeletion</name></expr>)</condition><then pos:line="33" pos:column="52"> <block pos:line="33" pos:column="53">{
				<expr_stmt><expr><name pos:line="34" pos:column="33">position</name> <op:operator pos:line="34" pos:column="42">-=</op:operator> <name pos:line="34" pos:column="45">length</name></expr>;</expr_stmt>
			}</block></then> <else pos:line="35" pos:column="27">else <block pos:line="35" pos:column="32">{
				<expr_stmt><expr><name pos:line="36" pos:column="33">position</name> <op:operator pos:line="36" pos:column="42">=</op:operator> <name pos:line="36" pos:column="44">startChange</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="37" pos:column="33">virtualSpace</name> <op:operator pos:line="37" pos:column="46">=</op:operator> <lit:literal type="number" pos:line="37" pos:column="48">0</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="43" pos:column="1">bool</name></type> <name><name pos:line="43" pos:column="6">SelectionPosition</name><op:operator pos:line="43" pos:column="23">::</op:operator><name pos:line="43" pos:column="25">operator &lt;</name></name><parameter_list pos:line="43" pos:column="35">(<param><decl><type><specifier pos:line="43" pos:column="36">const</specifier> <name pos:line="43" pos:column="42">SelectionPosition</name> <type:modifier pos:line="43" pos:column="60">&amp;</type:modifier></type><name pos:line="43" pos:column="61">other</name></decl></param>)</parameter_list> <specifier pos:line="43" pos:column="68">const</specifier> <block pos:line="43" pos:column="74">{
	<if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">position</name> <op:operator pos:line="44" pos:column="22">==</op:operator> <name><name pos:line="44" pos:column="25">other</name><op:operator pos:line="44" pos:column="30">.</op:operator><name pos:line="44" pos:column="31">position</name></name></expr>)</condition><then pos:line="44" pos:column="40">
		<return pos:line="45" pos:column="17">return <expr><name pos:line="45" pos:column="24">virtualSpace</name> <op:operator pos:line="45" pos:column="37">&lt;</op:operator> <name><name pos:line="45" pos:column="39">other</name><op:operator pos:line="45" pos:column="44">.</op:operator><name pos:line="45" pos:column="45">virtualSpace</name></name></expr>;</return></then>
	<else pos:line="46" pos:column="9">else
		<return pos:line="47" pos:column="17">return <expr><name pos:line="47" pos:column="24">position</name> <op:operator pos:line="47" pos:column="33">&lt;</op:operator> <name><name pos:line="47" pos:column="35">other</name><op:operator pos:line="47" pos:column="40">.</op:operator><name pos:line="47" pos:column="41">position</name></name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="50" pos:column="1">bool</name></type> <name><name pos:line="50" pos:column="6">SelectionPosition</name><op:operator pos:line="50" pos:column="23">::</op:operator><name pos:line="50" pos:column="25">operator &gt;</name></name><parameter_list pos:line="50" pos:column="35">(<param><decl><type><specifier pos:line="50" pos:column="36">const</specifier> <name pos:line="50" pos:column="42">SelectionPosition</name> <type:modifier pos:line="50" pos:column="60">&amp;</type:modifier></type><name pos:line="50" pos:column="61">other</name></decl></param>)</parameter_list> <specifier pos:line="50" pos:column="68">const</specifier> <block pos:line="50" pos:column="74">{
	<if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">position</name> <op:operator pos:line="51" pos:column="22">==</op:operator> <name><name pos:line="51" pos:column="25">other</name><op:operator pos:line="51" pos:column="30">.</op:operator><name pos:line="51" pos:column="31">position</name></name></expr>)</condition><then pos:line="51" pos:column="40">
		<return pos:line="52" pos:column="17">return <expr><name pos:line="52" pos:column="24">virtualSpace</name> <op:operator pos:line="52" pos:column="37">&gt;</op:operator> <name><name pos:line="52" pos:column="39">other</name><op:operator pos:line="52" pos:column="44">.</op:operator><name pos:line="52" pos:column="45">virtualSpace</name></name></expr>;</return></then>
	<else pos:line="53" pos:column="9">else
		<return pos:line="54" pos:column="17">return <expr><name pos:line="54" pos:column="24">position</name> <op:operator pos:line="54" pos:column="33">&gt;</op:operator> <name><name pos:line="54" pos:column="35">other</name><op:operator pos:line="54" pos:column="40">.</op:operator><name pos:line="54" pos:column="41">position</name></name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="57" pos:column="1">bool</name></type> <name><name pos:line="57" pos:column="6">SelectionPosition</name><op:operator pos:line="57" pos:column="23">::</op:operator><name pos:line="57" pos:column="25">operator &lt;=</name></name><parameter_list pos:line="57" pos:column="36">(<param><decl><type><specifier pos:line="57" pos:column="37">const</specifier> <name pos:line="57" pos:column="43">SelectionPosition</name> <type:modifier pos:line="57" pos:column="61">&amp;</type:modifier></type><name pos:line="57" pos:column="62">other</name></decl></param>)</parameter_list> <specifier pos:line="57" pos:column="69">const</specifier> <block pos:line="57" pos:column="75">{
	<if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">position</name> <op:operator pos:line="58" pos:column="22">==</op:operator> <name><name pos:line="58" pos:column="25">other</name><op:operator pos:line="58" pos:column="30">.</op:operator><name pos:line="58" pos:column="31">position</name></name> <op:operator pos:line="58" pos:column="40">&amp;&amp;</op:operator> <name pos:line="58" pos:column="43">virtualSpace</name> <op:operator pos:line="58" pos:column="56">==</op:operator> <name><name pos:line="58" pos:column="59">other</name><op:operator pos:line="58" pos:column="64">.</op:operator><name pos:line="58" pos:column="65">virtualSpace</name></name></expr>)</condition><then pos:line="58" pos:column="78">
		<return pos:line="59" pos:column="17">return <expr><lit:literal type="boolean" pos:line="59" pos:column="24">true</lit:literal></expr>;</return></then>
	<else pos:line="60" pos:column="9">else
		<return pos:line="61" pos:column="17">return <expr><name pos:line="61" pos:column="24">other</name> <op:operator pos:line="61" pos:column="30">&gt;</op:operator> <op:operator pos:line="61" pos:column="32">*</op:operator><name pos:line="61" pos:column="33">this</name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="64" pos:column="1">bool</name></type> <name><name pos:line="64" pos:column="6">SelectionPosition</name><op:operator pos:line="64" pos:column="23">::</op:operator><name pos:line="64" pos:column="25">operator &gt;=</name></name><parameter_list pos:line="64" pos:column="36">(<param><decl><type><specifier pos:line="64" pos:column="37">const</specifier> <name pos:line="64" pos:column="43">SelectionPosition</name> <type:modifier pos:line="64" pos:column="61">&amp;</type:modifier></type><name pos:line="64" pos:column="62">other</name></decl></param>)</parameter_list> <specifier pos:line="64" pos:column="69">const</specifier> <block pos:line="64" pos:column="75">{
	<if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">position</name> <op:operator pos:line="65" pos:column="22">==</op:operator> <name><name pos:line="65" pos:column="25">other</name><op:operator pos:line="65" pos:column="30">.</op:operator><name pos:line="65" pos:column="31">position</name></name> <op:operator pos:line="65" pos:column="40">&amp;&amp;</op:operator> <name pos:line="65" pos:column="43">virtualSpace</name> <op:operator pos:line="65" pos:column="56">==</op:operator> <name><name pos:line="65" pos:column="59">other</name><op:operator pos:line="65" pos:column="64">.</op:operator><name pos:line="65" pos:column="65">virtualSpace</name></name></expr>)</condition><then pos:line="65" pos:column="78">
		<return pos:line="66" pos:column="17">return <expr><lit:literal type="boolean" pos:line="66" pos:column="24">true</lit:literal></expr>;</return></then>
	<else pos:line="67" pos:column="9">else
		<return pos:line="68" pos:column="17">return <expr><op:operator pos:line="68" pos:column="24">*</op:operator><name pos:line="68" pos:column="25">this</name> <op:operator pos:line="68" pos:column="30">&gt;</op:operator> <name pos:line="68" pos:column="32">other</name></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="71" pos:column="1">int</name></type> <name><name pos:line="71" pos:column="5">SelectionRange</name><op:operator pos:line="71" pos:column="19">::</op:operator><name pos:line="71" pos:column="21">Length</name></name><parameter_list pos:line="71" pos:column="27">()</parameter_list> <specifier pos:line="71" pos:column="30">const</specifier> <block pos:line="71" pos:column="36">{
	<if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">anchor</name> <op:operator pos:line="72" pos:column="20">&gt;</op:operator> <name pos:line="72" pos:column="22">caret</name></expr>)</condition><then pos:line="72" pos:column="28"> <block pos:line="72" pos:column="29">{
		<return pos:line="73" pos:column="17">return <expr><call><name><name pos:line="73" pos:column="24">anchor</name><op:operator pos:line="73" pos:column="30">.</op:operator><name pos:line="73" pos:column="31">Position</name></name><argument_list pos:line="73" pos:column="39">()</argument_list></call> <op:operator pos:line="73" pos:column="42">-</op:operator> <call><name><name pos:line="73" pos:column="44">caret</name><op:operator pos:line="73" pos:column="49">.</op:operator><name pos:line="73" pos:column="50">Position</name></name><argument_list pos:line="73" pos:column="58">()</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="74" pos:column="11">else <block pos:line="74" pos:column="16">{
		<return pos:line="75" pos:column="17">return <expr><call><name><name pos:line="75" pos:column="24">caret</name><op:operator pos:line="75" pos:column="29">.</op:operator><name pos:line="75" pos:column="30">Position</name></name><argument_list pos:line="75" pos:column="38">()</argument_list></call> <op:operator pos:line="75" pos:column="41">-</op:operator> <call><name><name pos:line="75" pos:column="43">anchor</name><op:operator pos:line="75" pos:column="49">.</op:operator><name pos:line="75" pos:column="50">Position</name></name><argument_list pos:line="75" pos:column="58">()</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="79" pos:column="1">bool</name></type> <name><name pos:line="79" pos:column="6">SelectionRange</name><op:operator pos:line="79" pos:column="20">::</op:operator><name pos:line="79" pos:column="22">Contains</name></name><parameter_list pos:line="79" pos:column="30">(<param><decl><type><name pos:line="79" pos:column="31">int</name></type> <name pos:line="79" pos:column="35">pos</name></decl></param>)</parameter_list> <specifier pos:line="79" pos:column="40">const</specifier> <block pos:line="79" pos:column="46">{
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">anchor</name> <op:operator pos:line="80" pos:column="20">&gt;</op:operator> <name pos:line="80" pos:column="22">caret</name></expr>)</condition><then pos:line="80" pos:column="28">
		<return pos:line="81" pos:column="17">return <expr><op:operator pos:line="81" pos:column="24">(</op:operator><name pos:line="81" pos:column="25">pos</name> <op:operator pos:line="81" pos:column="29">&gt;=</op:operator> <call><name><name pos:line="81" pos:column="32">caret</name><op:operator pos:line="81" pos:column="37">.</op:operator><name pos:line="81" pos:column="38">Position</name></name><argument_list pos:line="81" pos:column="46">()</argument_list></call><op:operator pos:line="81" pos:column="48">)</op:operator> <op:operator pos:line="81" pos:column="50">&amp;&amp;</op:operator> <op:operator pos:line="81" pos:column="53">(</op:operator><name pos:line="81" pos:column="54">pos</name> <op:operator pos:line="81" pos:column="58">&lt;=</op:operator> <call><name><name pos:line="81" pos:column="61">anchor</name><op:operator pos:line="81" pos:column="67">.</op:operator><name pos:line="81" pos:column="68">Position</name></name><argument_list pos:line="81" pos:column="76">()</argument_list></call><op:operator pos:line="81" pos:column="78">)</op:operator></expr>;</return></then>
	<else pos:line="82" pos:column="9">else
		<return pos:line="83" pos:column="17">return <expr><op:operator pos:line="83" pos:column="24">(</op:operator><name pos:line="83" pos:column="25">pos</name> <op:operator pos:line="83" pos:column="29">&gt;=</op:operator> <call><name><name pos:line="83" pos:column="32">anchor</name><op:operator pos:line="83" pos:column="38">.</op:operator><name pos:line="83" pos:column="39">Position</name></name><argument_list pos:line="83" pos:column="47">()</argument_list></call><op:operator pos:line="83" pos:column="49">)</op:operator> <op:operator pos:line="83" pos:column="51">&amp;&amp;</op:operator> <op:operator pos:line="83" pos:column="54">(</op:operator><name pos:line="83" pos:column="55">pos</name> <op:operator pos:line="83" pos:column="59">&lt;=</op:operator> <call><name><name pos:line="83" pos:column="62">caret</name><op:operator pos:line="83" pos:column="67">.</op:operator><name pos:line="83" pos:column="68">Position</name></name><argument_list pos:line="83" pos:column="76">()</argument_list></call><op:operator pos:line="83" pos:column="78">)</op:operator></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="86" pos:column="1">bool</name></type> <name><name pos:line="86" pos:column="6">SelectionRange</name><op:operator pos:line="86" pos:column="20">::</op:operator><name pos:line="86" pos:column="22">Contains</name></name><parameter_list pos:line="86" pos:column="30">(<param><decl><type><name pos:line="86" pos:column="31">SelectionPosition</name></type> <name pos:line="86" pos:column="49">sp</name></decl></param>)</parameter_list> <specifier pos:line="86" pos:column="53">const</specifier> <block pos:line="86" pos:column="59">{
	<if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">anchor</name> <op:operator pos:line="87" pos:column="20">&gt;</op:operator> <name pos:line="87" pos:column="22">caret</name></expr>)</condition><then pos:line="87" pos:column="28">
		<return pos:line="88" pos:column="17">return <expr><op:operator pos:line="88" pos:column="24">(</op:operator><name pos:line="88" pos:column="25">sp</name> <op:operator pos:line="88" pos:column="28">&gt;=</op:operator> <name pos:line="88" pos:column="31">caret</name><op:operator pos:line="88" pos:column="36">)</op:operator> <op:operator pos:line="88" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="88" pos:column="41">(</op:operator><name pos:line="88" pos:column="42">sp</name> <op:operator pos:line="88" pos:column="45">&lt;=</op:operator> <name pos:line="88" pos:column="48">anchor</name><op:operator pos:line="88" pos:column="54">)</op:operator></expr>;</return></then>
	<else pos:line="89" pos:column="9">else
		<return pos:line="90" pos:column="17">return <expr><op:operator pos:line="90" pos:column="24">(</op:operator><name pos:line="90" pos:column="25">sp</name> <op:operator pos:line="90" pos:column="28">&gt;=</op:operator> <name pos:line="90" pos:column="31">anchor</name><op:operator pos:line="90" pos:column="37">)</op:operator> <op:operator pos:line="90" pos:column="39">&amp;&amp;</op:operator> <op:operator pos:line="90" pos:column="42">(</op:operator><name pos:line="90" pos:column="43">sp</name> <op:operator pos:line="90" pos:column="46">&lt;=</op:operator> <name pos:line="90" pos:column="49">caret</name><op:operator pos:line="90" pos:column="54">)</op:operator></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="93" pos:column="1">bool</name></type> <name><name pos:line="93" pos:column="6">SelectionRange</name><op:operator pos:line="93" pos:column="20">::</op:operator><name pos:line="93" pos:column="22">ContainsCharacter</name></name><parameter_list pos:line="93" pos:column="39">(<param><decl><type><name pos:line="93" pos:column="40">int</name></type> <name pos:line="93" pos:column="44">posCharacter</name></decl></param>)</parameter_list> <specifier pos:line="93" pos:column="58">const</specifier> <block pos:line="93" pos:column="64">{
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><name pos:line="94" pos:column="13">anchor</name> <op:operator pos:line="94" pos:column="20">&gt;</op:operator> <name pos:line="94" pos:column="22">caret</name></expr>)</condition><then pos:line="94" pos:column="28">
		<return pos:line="95" pos:column="17">return <expr><op:operator pos:line="95" pos:column="24">(</op:operator><name pos:line="95" pos:column="25">posCharacter</name> <op:operator pos:line="95" pos:column="38">&gt;=</op:operator> <call><name><name pos:line="95" pos:column="41">caret</name><op:operator pos:line="95" pos:column="46">.</op:operator><name pos:line="95" pos:column="47">Position</name></name><argument_list pos:line="95" pos:column="55">()</argument_list></call><op:operator pos:line="95" pos:column="57">)</op:operator> <op:operator pos:line="95" pos:column="59">&amp;&amp;</op:operator> <op:operator pos:line="95" pos:column="62">(</op:operator><name pos:line="95" pos:column="63">posCharacter</name> <op:operator pos:line="95" pos:column="76">&lt;</op:operator> <call><name><name pos:line="95" pos:column="78">anchor</name><op:operator pos:line="95" pos:column="84">.</op:operator><name pos:line="95" pos:column="85">Position</name></name><argument_list pos:line="95" pos:column="93">()</argument_list></call><op:operator pos:line="95" pos:column="95">)</op:operator></expr>;</return></then>
	<else pos:line="96" pos:column="9">else
		<return pos:line="97" pos:column="17">return <expr><op:operator pos:line="97" pos:column="24">(</op:operator><name pos:line="97" pos:column="25">posCharacter</name> <op:operator pos:line="97" pos:column="38">&gt;=</op:operator> <call><name><name pos:line="97" pos:column="41">anchor</name><op:operator pos:line="97" pos:column="47">.</op:operator><name pos:line="97" pos:column="48">Position</name></name><argument_list pos:line="97" pos:column="56">()</argument_list></call><op:operator pos:line="97" pos:column="58">)</op:operator> <op:operator pos:line="97" pos:column="60">&amp;&amp;</op:operator> <op:operator pos:line="97" pos:column="63">(</op:operator><name pos:line="97" pos:column="64">posCharacter</name> <op:operator pos:line="97" pos:column="77">&lt;</op:operator> <call><name><name pos:line="97" pos:column="79">caret</name><op:operator pos:line="97" pos:column="84">.</op:operator><name pos:line="97" pos:column="85">Position</name></name><argument_list pos:line="97" pos:column="93">()</argument_list></call><op:operator pos:line="97" pos:column="95">)</op:operator></expr>;</return></else></if>
}</block></function>

<function><type><name pos:line="100" pos:column="1">SelectionSegment</name></type> <name><name pos:line="100" pos:column="18">SelectionRange</name><op:operator pos:line="100" pos:column="32">::</op:operator><name pos:line="100" pos:column="34">Intersect</name></name><parameter_list pos:line="100" pos:column="43">(<param><decl><type><name pos:line="100" pos:column="44">SelectionSegment</name></type> <name pos:line="100" pos:column="61">check</name></decl></param>)</parameter_list> <specifier pos:line="100" pos:column="68">const</specifier> <block pos:line="100" pos:column="74">{
	<function_decl><type><name pos:line="101" pos:column="9">SelectionSegment</name></type> <name pos:line="101" pos:column="26">inOrder</name><parameter_list pos:line="101" pos:column="33">(<param><decl><type><name pos:line="101" pos:column="34">caret</name></type></decl></param>, <param><decl><type><name pos:line="101" pos:column="41">anchor</name></type></decl></param>)</parameter_list>;</function_decl>
	<if pos:line="102" pos:column="9">if <condition pos:line="102" pos:column="12">(<expr><op:operator pos:line="102" pos:column="13">(</op:operator><name><name pos:line="102" pos:column="14">inOrder</name><op:operator pos:line="102" pos:column="21">.</op:operator><name pos:line="102" pos:column="22">start</name></name> <op:operator pos:line="102" pos:column="28">&lt;=</op:operator> <name><name pos:line="102" pos:column="31">check</name><op:operator pos:line="102" pos:column="36">.</op:operator><name pos:line="102" pos:column="37">end</name></name><op:operator pos:line="102" pos:column="40">)</op:operator> <op:operator pos:line="102" pos:column="42">||</op:operator> <op:operator pos:line="102" pos:column="45">(</op:operator><name><name pos:line="102" pos:column="46">inOrder</name><op:operator pos:line="102" pos:column="53">.</op:operator><name pos:line="102" pos:column="54">end</name></name> <op:operator pos:line="102" pos:column="58">&gt;=</op:operator> <name><name pos:line="102" pos:column="61">check</name><op:operator pos:line="102" pos:column="66">.</op:operator><name pos:line="102" pos:column="67">start</name></name><op:operator pos:line="102" pos:column="72">)</op:operator></expr>)</condition><then pos:line="102" pos:column="74"> <block pos:line="102" pos:column="75">{
		<decl_stmt><decl><type><name pos:line="103" pos:column="17">SelectionSegment</name></type> <name pos:line="103" pos:column="34">portion</name> <init pos:line="103" pos:column="42">= <expr><name pos:line="103" pos:column="44">check</name></expr></init></decl>;</decl_stmt>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name><name pos:line="104" pos:column="21">portion</name><op:operator pos:line="104" pos:column="28">.</op:operator><name pos:line="104" pos:column="29">start</name></name> <op:operator pos:line="104" pos:column="35">&lt;</op:operator> <name><name pos:line="104" pos:column="37">inOrder</name><op:operator pos:line="104" pos:column="44">.</op:operator><name pos:line="104" pos:column="45">start</name></name></expr>)</condition><then pos:line="104" pos:column="51">
			<expr_stmt><expr><name><name pos:line="105" pos:column="25">portion</name><op:operator pos:line="105" pos:column="32">.</op:operator><name pos:line="105" pos:column="33">start</name></name> <op:operator pos:line="105" pos:column="39">=</op:operator> <name><name pos:line="105" pos:column="41">inOrder</name><op:operator pos:line="105" pos:column="48">.</op:operator><name pos:line="105" pos:column="49">start</name></name></expr>;</expr_stmt></then></if>
		<if pos:line="106" pos:column="17">if <condition pos:line="106" pos:column="20">(<expr><name><name pos:line="106" pos:column="21">portion</name><op:operator pos:line="106" pos:column="28">.</op:operator><name pos:line="106" pos:column="29">end</name></name> <op:operator pos:line="106" pos:column="33">&gt;</op:operator> <name><name pos:line="106" pos:column="35">inOrder</name><op:operator pos:line="106" pos:column="42">.</op:operator><name pos:line="106" pos:column="43">end</name></name></expr>)</condition><then pos:line="106" pos:column="47">
			<expr_stmt><expr><name><name pos:line="107" pos:column="25">portion</name><op:operator pos:line="107" pos:column="32">.</op:operator><name pos:line="107" pos:column="33">end</name></name> <op:operator pos:line="107" pos:column="37">=</op:operator> <name><name pos:line="107" pos:column="39">inOrder</name><op:operator pos:line="107" pos:column="46">.</op:operator><name pos:line="107" pos:column="47">end</name></name></expr>;</expr_stmt></then></if>
		<if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><name><name pos:line="108" pos:column="21">portion</name><op:operator pos:line="108" pos:column="28">.</op:operator><name pos:line="108" pos:column="29">start</name></name> <op:operator pos:line="108" pos:column="35">&gt;</op:operator> <name><name pos:line="108" pos:column="37">portion</name><op:operator pos:line="108" pos:column="44">.</op:operator><name pos:line="108" pos:column="45">end</name></name></expr>)</condition><then pos:line="108" pos:column="49">
			<return pos:line="109" pos:column="25">return <expr><call><name pos:line="109" pos:column="32">SelectionSegment</name><argument_list pos:line="109" pos:column="48">()</argument_list></call></expr>;</return></then>
		<else pos:line="110" pos:column="17">else
			<return pos:line="111" pos:column="25">return <expr><name pos:line="111" pos:column="32">portion</name></expr>;</return></else></if>
	}</block></then> <else pos:line="112" pos:column="11">else <block pos:line="112" pos:column="16">{
		<return pos:line="113" pos:column="17">return <expr><call><name pos:line="113" pos:column="24">SelectionSegment</name><argument_list pos:line="113" pos:column="40">()</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="117" pos:column="1">bool</name></type> <name><name pos:line="117" pos:column="6">SelectionRange</name><op:operator pos:line="117" pos:column="20">::</op:operator><name pos:line="117" pos:column="22">Trim</name></name><parameter_list pos:line="117" pos:column="26">(<param><decl><type><name pos:line="117" pos:column="27">SelectionRange</name></type> <name pos:line="117" pos:column="42">range</name></decl></param>)</parameter_list> <block pos:line="117" pos:column="49">{
	<decl_stmt><decl><type><name pos:line="118" pos:column="9">SelectionPosition</name></type> <name pos:line="118" pos:column="27">startRange</name> <init pos:line="118" pos:column="38">= <expr><call><name><name pos:line="118" pos:column="40">range</name><op:operator pos:line="118" pos:column="45">.</op:operator><name pos:line="118" pos:column="46">Start</name></name><argument_list pos:line="118" pos:column="51">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="119" pos:column="9">SelectionPosition</name></type> <name pos:line="119" pos:column="27">endRange</name> <init pos:line="119" pos:column="36">= <expr><call><name><name pos:line="119" pos:column="38">range</name><op:operator pos:line="119" pos:column="43">.</op:operator><name pos:line="119" pos:column="44">End</name></name><argument_list pos:line="119" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="120" pos:column="9">SelectionPosition</name></type> <name pos:line="120" pos:column="27">start</name> <init pos:line="120" pos:column="33">= <expr><call><name pos:line="120" pos:column="35">Start</name><argument_list pos:line="120" pos:column="40">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="121" pos:column="9">SelectionPosition</name></type> <name pos:line="121" pos:column="27">end</name> <init pos:line="121" pos:column="31">= <expr><call><name pos:line="121" pos:column="33">End</name><argument_list pos:line="121" pos:column="36">()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="122" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="122" pos:column="24">(<argument><expr><name pos:line="122" pos:column="25">start</name> <op:operator pos:line="122" pos:column="31">&lt;=</op:operator> <name pos:line="122" pos:column="34">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="123" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="123" pos:column="24">(<argument><expr><name pos:line="123" pos:column="25">startRange</name> <op:operator pos:line="123" pos:column="36">&lt;=</op:operator> <name pos:line="123" pos:column="39">endRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="124" pos:column="9">if <condition pos:line="124" pos:column="12">(<expr><op:operator pos:line="124" pos:column="13">(</op:operator><name pos:line="124" pos:column="14">startRange</name> <op:operator pos:line="124" pos:column="25">&lt;=</op:operator> <name pos:line="124" pos:column="28">end</name><op:operator pos:line="124" pos:column="31">)</op:operator> <op:operator pos:line="124" pos:column="33">&amp;&amp;</op:operator> <op:operator pos:line="124" pos:column="36">(</op:operator><name pos:line="124" pos:column="37">endRange</name> <op:operator pos:line="124" pos:column="46">&gt;=</op:operator> <name pos:line="124" pos:column="49">start</name><op:operator pos:line="124" pos:column="54">)</op:operator></expr>)</condition><then pos:line="124" pos:column="56"> <block pos:line="124" pos:column="57">{
		<if pos:line="125" pos:column="17">if <condition pos:line="125" pos:column="20">(<expr><op:operator pos:line="125" pos:column="21">(</op:operator><name pos:line="125" pos:column="22">start</name> <op:operator pos:line="125" pos:column="28">&gt;</op:operator> <name pos:line="125" pos:column="30">startRange</name><op:operator pos:line="125" pos:column="40">)</op:operator> <op:operator pos:line="125" pos:column="42">&amp;&amp;</op:operator> <op:operator pos:line="125" pos:column="45">(</op:operator><name pos:line="125" pos:column="46">end</name> <op:operator pos:line="125" pos:column="50">&lt;</op:operator> <name pos:line="125" pos:column="52">endRange</name><op:operator pos:line="125" pos:column="60">)</op:operator></expr>)</condition><then pos:line="125" pos:column="62"> <block pos:line="125" pos:column="63">{
			<comment type="line" pos:line="126" pos:column="25">// Completely covered by range -&gt; empty at start</comment>
			<expr_stmt><expr><name pos:line="127" pos:column="25">end</name> <op:operator pos:line="127" pos:column="29">=</op:operator> <name pos:line="127" pos:column="31">start</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="128" pos:column="19">else <if pos:line="128" pos:column="24">if <condition pos:line="128" pos:column="27">(<expr><op:operator pos:line="128" pos:column="28">(</op:operator><name pos:line="128" pos:column="29">start</name> <op:operator pos:line="128" pos:column="35">&lt;</op:operator> <name pos:line="128" pos:column="37">startRange</name><op:operator pos:line="128" pos:column="47">)</op:operator> <op:operator pos:line="128" pos:column="49">&amp;&amp;</op:operator> <op:operator pos:line="128" pos:column="52">(</op:operator><name pos:line="128" pos:column="53">end</name> <op:operator pos:line="128" pos:column="57">&gt;</op:operator> <name pos:line="128" pos:column="59">endRange</name><op:operator pos:line="128" pos:column="67">)</op:operator></expr>)</condition><then pos:line="128" pos:column="69"> <block pos:line="128" pos:column="70">{
			<comment type="line" pos:line="129" pos:column="25">// Completely covers range -&gt; empty at start</comment>
			<expr_stmt><expr><name pos:line="130" pos:column="25">end</name> <op:operator pos:line="130" pos:column="29">=</op:operator> <name pos:line="130" pos:column="31">start</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="131" pos:column="19">else <if pos:line="131" pos:column="24">if <condition pos:line="131" pos:column="27">(<expr><name pos:line="131" pos:column="28">start</name> <op:operator pos:line="131" pos:column="34">&lt;=</op:operator> <name pos:line="131" pos:column="37">startRange</name></expr>)</condition><then pos:line="131" pos:column="48"> <block pos:line="131" pos:column="49">{
			<comment type="line" pos:line="132" pos:column="25">// Trim end</comment>
			<expr_stmt><expr><name pos:line="133" pos:column="25">end</name> <op:operator pos:line="133" pos:column="29">=</op:operator> <name pos:line="133" pos:column="31">startRange</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="134" pos:column="19">else <block pos:line="134" pos:column="24">{ <comment type="line" pos:line="134" pos:column="26">//</comment>
			<expr_stmt><expr><call><name pos:line="135" pos:column="25">PLATFORM_ASSERT</name><argument_list pos:line="135" pos:column="40">(<argument><expr><name pos:line="135" pos:column="41">end</name> <op:operator pos:line="135" pos:column="45">&gt;=</op:operator> <name pos:line="135" pos:column="48">endRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line" pos:line="136" pos:column="25">// Trim start</comment>
			<expr_stmt><expr><name pos:line="137" pos:column="25">start</name> <op:operator pos:line="137" pos:column="31">=</op:operator> <name pos:line="137" pos:column="33">endRange</name></expr>;</expr_stmt>
		}</block></else></if></else></if></else></if>
		<if pos:line="139" pos:column="17">if <condition pos:line="139" pos:column="20">(<expr><name pos:line="139" pos:column="21">anchor</name> <op:operator pos:line="139" pos:column="28">&gt;</op:operator> <name pos:line="139" pos:column="30">caret</name></expr>)</condition><then pos:line="139" pos:column="36"> <block pos:line="139" pos:column="37">{
			<expr_stmt><expr><name pos:line="140" pos:column="25">caret</name> <op:operator pos:line="140" pos:column="31">=</op:operator> <name pos:line="140" pos:column="33">start</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="141" pos:column="25">anchor</name> <op:operator pos:line="141" pos:column="32">=</op:operator> <name pos:line="141" pos:column="34">end</name></expr>;</expr_stmt>
		}</block></then> <else pos:line="142" pos:column="19">else <block pos:line="142" pos:column="24">{
			<expr_stmt><expr><name pos:line="143" pos:column="25">anchor</name> <op:operator pos:line="143" pos:column="32">=</op:operator> <name pos:line="143" pos:column="34">start</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="144" pos:column="25">caret</name> <op:operator pos:line="144" pos:column="31">=</op:operator> <name pos:line="144" pos:column="33">end</name></expr>;</expr_stmt>
		}</block></else></if>
		<return pos:line="146" pos:column="17">return <expr><call><name pos:line="146" pos:column="24">Empty</name><argument_list pos:line="146" pos:column="29">()</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="147" pos:column="11">else <block pos:line="147" pos:column="16">{
		<return pos:line="148" pos:column="17">return <expr><lit:literal type="boolean" pos:line="148" pos:column="24">false</lit:literal></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="152" pos:column="1">// If range is all virtual collapse to start of virtual space</comment>
<function><type><name pos:line="153" pos:column="1">void</name></type> <name><name pos:line="153" pos:column="6">SelectionRange</name><op:operator pos:line="153" pos:column="20">::</op:operator><name pos:line="153" pos:column="22">MinimizeVirtualSpace</name></name><parameter_list pos:line="153" pos:column="42">()</parameter_list> <block pos:line="153" pos:column="45">{
	<if pos:line="154" pos:column="9">if <condition pos:line="154" pos:column="12">(<expr><call><name><name pos:line="154" pos:column="13">caret</name><op:operator pos:line="154" pos:column="18">.</op:operator><name pos:line="154" pos:column="19">Position</name></name><argument_list pos:line="154" pos:column="27">()</argument_list></call> <op:operator pos:line="154" pos:column="30">==</op:operator> <call><name><name pos:line="154" pos:column="33">anchor</name><op:operator pos:line="154" pos:column="39">.</op:operator><name pos:line="154" pos:column="40">Position</name></name><argument_list pos:line="154" pos:column="48">()</argument_list></call></expr>)</condition><then pos:line="154" pos:column="51"> <block pos:line="154" pos:column="52">{
		<decl_stmt><decl><type><name pos:line="155" pos:column="17">int</name></type> <name pos:line="155" pos:column="21">virtualSpace</name> <init pos:line="155" pos:column="34">= <expr><call><name><name pos:line="155" pos:column="36">caret</name><op:operator pos:line="155" pos:column="41">.</op:operator><name pos:line="155" pos:column="42">VirtualSpace</name></name><argument_list pos:line="155" pos:column="54">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="156" pos:column="17">if <condition pos:line="156" pos:column="20">(<expr><name pos:line="156" pos:column="21">virtualSpace</name> <op:operator pos:line="156" pos:column="34">&gt;</op:operator> <call><name><name pos:line="156" pos:column="36">anchor</name><op:operator pos:line="156" pos:column="42">.</op:operator><name pos:line="156" pos:column="43">VirtualSpace</name></name><argument_list pos:line="156" pos:column="55">()</argument_list></call></expr>)</condition><then pos:line="156" pos:column="58">
			<expr_stmt><expr><name pos:line="157" pos:column="25">virtualSpace</name> <op:operator pos:line="157" pos:column="38">=</op:operator> <call><name><name pos:line="157" pos:column="40">anchor</name><op:operator pos:line="157" pos:column="46">.</op:operator><name pos:line="157" pos:column="47">VirtualSpace</name></name><argument_list pos:line="157" pos:column="59">()</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name><name pos:line="158" pos:column="17">caret</name><op:operator pos:line="158" pos:column="22">.</op:operator><name pos:line="158" pos:column="23">SetVirtualSpace</name></name><argument_list pos:line="158" pos:column="38">(<argument><expr><name pos:line="158" pos:column="39">virtualSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="159" pos:column="17">anchor</name><op:operator pos:line="159" pos:column="23">.</op:operator><name pos:line="159" pos:column="24">SetVirtualSpace</name></name><argument_list pos:line="159" pos:column="39">(<argument><expr><name pos:line="159" pos:column="40">virtualSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<constructor><name><name pos:line="163" pos:column="1">Selection</name><op:operator pos:line="163" pos:column="10">::</op:operator><name pos:line="163" pos:column="12">Selection</name></name><parameter_list pos:line="163" pos:column="21">()</parameter_list> <member_list pos:line="163" pos:column="24">: <call><name pos:line="163" pos:column="26">mainRange</name><argument_list pos:line="163" pos:column="35">(<argument><expr><lit:literal type="number" pos:line="163" pos:column="36">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="38">,</op:operator> <call><name pos:line="163" pos:column="40">moveExtends</name><argument_list pos:line="163" pos:column="51">(<argument><expr><lit:literal type="boolean" pos:line="163" pos:column="52">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="58">,</op:operator> <call><name pos:line="163" pos:column="60">tentativeMain</name><argument_list pos:line="163" pos:column="73">(<argument><expr><lit:literal type="boolean" pos:line="163" pos:column="74">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="163" pos:column="80">,</op:operator> <call><name pos:line="163" pos:column="82">selType</name><argument_list pos:line="163" pos:column="89">(<argument><expr><name pos:line="163" pos:column="90">selStream</name></expr></argument>)</argument_list></call> </member_list><block pos:line="163" pos:column="101">{
	<expr_stmt><expr><call><name pos:line="164" pos:column="9">AddSelection</name><argument_list pos:line="164" pos:column="21">(<argument><expr><call><name pos:line="164" pos:column="22">SelectionPosition</name><argument_list pos:line="164" pos:column="39">(<argument><expr><lit:literal type="number" pos:line="164" pos:column="40">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="167" pos:column="1">Selection</name><op:operator pos:line="167" pos:column="10">::</op:operator>~<name pos:line="167" pos:column="13">Selection</name></name><parameter_list pos:line="167" pos:column="22">()</parameter_list> <block pos:line="167" pos:column="25">{
}</block></destructor>

<function><type><name pos:line="170" pos:column="1">bool</name></type> <name><name pos:line="170" pos:column="6">Selection</name><op:operator pos:line="170" pos:column="15">::</op:operator><name pos:line="170" pos:column="17">IsRectangular</name></name><parameter_list pos:line="170" pos:column="30">()</parameter_list> <specifier pos:line="170" pos:column="33">const</specifier> <block pos:line="170" pos:column="39">{
	<return pos:line="171" pos:column="9">return <expr><op:operator pos:line="171" pos:column="16">(</op:operator><name pos:line="171" pos:column="17">selType</name> <op:operator pos:line="171" pos:column="25">==</op:operator> <name pos:line="171" pos:column="28">selRectangle</name><op:operator pos:line="171" pos:column="40">)</op:operator> <op:operator pos:line="171" pos:column="42">||</op:operator> <op:operator pos:line="171" pos:column="45">(</op:operator><name pos:line="171" pos:column="46">selType</name> <op:operator pos:line="171" pos:column="54">==</op:operator> <name pos:line="171" pos:column="57">selThin</name><op:operator pos:line="171" pos:column="64">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="174" pos:column="1">int</name></type> <name><name pos:line="174" pos:column="5">Selection</name><op:operator pos:line="174" pos:column="14">::</op:operator><name pos:line="174" pos:column="16">MainCaret</name></name><parameter_list pos:line="174" pos:column="25">()</parameter_list> <specifier pos:line="174" pos:column="28">const</specifier> <block pos:line="174" pos:column="34">{
	<return pos:line="175" pos:column="9">return <expr><name><name pos:line="175" pos:column="16">ranges</name><index pos:line="175" pos:column="22">[<expr><name pos:line="175" pos:column="23">mainRange</name></expr>]</index></name><op:operator pos:line="175" pos:column="33">.</op:operator><call><name><name pos:line="175" pos:column="34">caret</name><op:operator pos:line="175" pos:column="39">.</op:operator><name pos:line="175" pos:column="40">Position</name></name><argument_list pos:line="175" pos:column="48">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="178" pos:column="1">int</name></type> <name><name pos:line="178" pos:column="5">Selection</name><op:operator pos:line="178" pos:column="14">::</op:operator><name pos:line="178" pos:column="16">MainAnchor</name></name><parameter_list pos:line="178" pos:column="26">()</parameter_list> <specifier pos:line="178" pos:column="29">const</specifier> <block pos:line="178" pos:column="35">{
	<return pos:line="179" pos:column="9">return <expr><name><name pos:line="179" pos:column="16">ranges</name><index pos:line="179" pos:column="22">[<expr><name pos:line="179" pos:column="23">mainRange</name></expr>]</index></name><op:operator pos:line="179" pos:column="33">.</op:operator><call><name><name pos:line="179" pos:column="34">anchor</name><op:operator pos:line="179" pos:column="40">.</op:operator><name pos:line="179" pos:column="41">Position</name></name><argument_list pos:line="179" pos:column="49">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="182" pos:column="1">SelectionRange</name> <type:modifier pos:line="182" pos:column="16">&amp;</type:modifier></type><name><name pos:line="182" pos:column="17">Selection</name><op:operator pos:line="182" pos:column="26">::</op:operator><name pos:line="182" pos:column="28">Rectangular</name></name><parameter_list pos:line="182" pos:column="39">()</parameter_list> <block pos:line="182" pos:column="42">{
	<return pos:line="183" pos:column="9">return <expr><name pos:line="183" pos:column="16">rangeRectangular</name></expr>;</return>
}</block></function>

<function><type><name pos:line="186" pos:column="1">SelectionSegment</name></type> <name><name pos:line="186" pos:column="18">Selection</name><op:operator pos:line="186" pos:column="27">::</op:operator><name pos:line="186" pos:column="29">Limits</name></name><parameter_list pos:line="186" pos:column="35">()</parameter_list> <specifier pos:line="186" pos:column="38">const</specifier> <block pos:line="186" pos:column="44">{
	<if pos:line="187" pos:column="9">if <condition pos:line="187" pos:column="12">(<expr><call><name><name pos:line="187" pos:column="13">ranges</name><op:operator pos:line="187" pos:column="19">.</op:operator><name pos:line="187" pos:column="20">empty</name></name><argument_list pos:line="187" pos:column="25">()</argument_list></call></expr>)</condition><then pos:line="187" pos:column="28"> <block pos:line="187" pos:column="29">{
		<return pos:line="188" pos:column="17">return <expr><call><name pos:line="188" pos:column="24">SelectionSegment</name><argument_list pos:line="188" pos:column="40">()</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="189" pos:column="11">else <block pos:line="189" pos:column="16">{
		<decl_stmt><decl><type><name pos:line="190" pos:column="17">SelectionSegment</name></type> <name pos:line="190" pos:column="34">sr</name><argument_list pos:line="190" pos:column="36">(<argument><expr><name><name pos:line="190" pos:column="37">ranges</name><index pos:line="190" pos:column="43">[<expr><lit:literal type="number" pos:line="190" pos:column="44">0</lit:literal></expr>]</index></name><op:operator pos:line="190" pos:column="46">.</op:operator><name pos:line="190" pos:column="47">anchor</name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="55">ranges</name><index pos:line="190" pos:column="61">[<expr><lit:literal type="number" pos:line="190" pos:column="62">0</lit:literal></expr>]</index></name><op:operator pos:line="190" pos:column="64">.</op:operator><name pos:line="190" pos:column="65">caret</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<for pos:line="191" pos:column="17">for (<init><decl><type><name pos:line="191" pos:column="22">size_t</name></type> <name pos:line="191" pos:column="29">i</name><init pos:line="191" pos:column="30">=<expr><lit:literal type="number" pos:line="191" pos:column="31">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="191" pos:column="34">i</name><op:operator pos:line="191" pos:column="35">&lt;</op:operator><call><name><name pos:line="191" pos:column="36">ranges</name><op:operator pos:line="191" pos:column="42">.</op:operator><name pos:line="191" pos:column="43">size</name></name><argument_list pos:line="191" pos:column="47">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="191" pos:column="51">i</name><op:operator pos:line="191" pos:column="52">++</op:operator></expr></incr>) <block pos:line="191" pos:column="56">{
			<expr_stmt><expr><call><name><name pos:line="192" pos:column="25">sr</name><op:operator pos:line="192" pos:column="27">.</op:operator><name pos:line="192" pos:column="28">Extend</name></name><argument_list pos:line="192" pos:column="34">(<argument><expr><name><name pos:line="192" pos:column="35">ranges</name><index pos:line="192" pos:column="41">[<expr><name pos:line="192" pos:column="42">i</name></expr>]</index></name><op:operator pos:line="192" pos:column="44">.</op:operator><name pos:line="192" pos:column="45">anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name pos:line="193" pos:column="25">sr</name><op:operator pos:line="193" pos:column="27">.</op:operator><name pos:line="193" pos:column="28">Extend</name></name><argument_list pos:line="193" pos:column="34">(<argument><expr><name><name pos:line="193" pos:column="35">ranges</name><index pos:line="193" pos:column="41">[<expr><name pos:line="193" pos:column="42">i</name></expr>]</index></name><op:operator pos:line="193" pos:column="44">.</op:operator><name pos:line="193" pos:column="45">caret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return pos:line="195" pos:column="17">return <expr><name pos:line="195" pos:column="24">sr</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="199" pos:column="1">SelectionSegment</name></type> <name><name pos:line="199" pos:column="18">Selection</name><op:operator pos:line="199" pos:column="27">::</op:operator><name pos:line="199" pos:column="29">LimitsForRectangularElseMain</name></name><parameter_list pos:line="199" pos:column="57">()</parameter_list> <specifier pos:line="199" pos:column="60">const</specifier> <block pos:line="199" pos:column="66">{
	<if pos:line="200" pos:column="9">if <condition pos:line="200" pos:column="12">(<expr><call><name pos:line="200" pos:column="13">IsRectangular</name><argument_list pos:line="200" pos:column="26">()</argument_list></call></expr>)</condition><then pos:line="200" pos:column="29"> <block pos:line="200" pos:column="30">{
		<return pos:line="201" pos:column="17">return <expr><call><name pos:line="201" pos:column="24">Limits</name><argument_list pos:line="201" pos:column="30">()</argument_list></call></expr>;</return>
	}</block></then> <else pos:line="202" pos:column="11">else <block pos:line="202" pos:column="16">{
		<return pos:line="203" pos:column="17">return <expr><call><name pos:line="203" pos:column="24">SelectionSegment</name><argument_list pos:line="203" pos:column="40">(<argument><expr><name><name pos:line="203" pos:column="41">ranges</name><index pos:line="203" pos:column="47">[<expr><name pos:line="203" pos:column="48">mainRange</name></expr>]</index></name><op:operator pos:line="203" pos:column="58">.</op:operator><name pos:line="203" pos:column="59">caret</name></expr></argument>, <argument><expr><name><name pos:line="203" pos:column="66">ranges</name><index pos:line="203" pos:column="72">[<expr><name pos:line="203" pos:column="73">mainRange</name></expr>]</index></name><op:operator pos:line="203" pos:column="83">.</op:operator><name pos:line="203" pos:column="84">anchor</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name pos:line="207" pos:column="1">size_t</name></type> <name><name pos:line="207" pos:column="8">Selection</name><op:operator pos:line="207" pos:column="17">::</op:operator><name pos:line="207" pos:column="19">Count</name></name><parameter_list pos:line="207" pos:column="24">()</parameter_list> <specifier pos:line="207" pos:column="27">const</specifier> <block pos:line="207" pos:column="33">{
	<return pos:line="208" pos:column="9">return <expr><call><name><name pos:line="208" pos:column="16">ranges</name><op:operator pos:line="208" pos:column="22">.</op:operator><name pos:line="208" pos:column="23">size</name></name><argument_list pos:line="208" pos:column="27">()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name pos:line="211" pos:column="1">size_t</name></type> <name><name pos:line="211" pos:column="8">Selection</name><op:operator pos:line="211" pos:column="17">::</op:operator><name pos:line="211" pos:column="19">Main</name></name><parameter_list pos:line="211" pos:column="23">()</parameter_list> <specifier pos:line="211" pos:column="26">const</specifier> <block pos:line="211" pos:column="32">{
	<return pos:line="212" pos:column="9">return <expr><name pos:line="212" pos:column="16">mainRange</name></expr>;</return>
}</block></function>

<function><type><name pos:line="215" pos:column="1">void</name></type> <name><name pos:line="215" pos:column="6">Selection</name><op:operator pos:line="215" pos:column="15">::</op:operator><name pos:line="215" pos:column="17">SetMain</name></name><parameter_list pos:line="215" pos:column="24">(<param><decl><type><name pos:line="215" pos:column="25">size_t</name></type> <name pos:line="215" pos:column="32">r</name></decl></param>)</parameter_list> <block pos:line="215" pos:column="35">{
	<expr_stmt><expr><call><name pos:line="216" pos:column="9">PLATFORM_ASSERT</name><argument_list pos:line="216" pos:column="24">(<argument><expr><name pos:line="216" pos:column="25">r</name> <op:operator pos:line="216" pos:column="27">&lt;</op:operator> <call><name><name pos:line="216" pos:column="29">ranges</name><op:operator pos:line="216" pos:column="35">.</op:operator><name pos:line="216" pos:column="36">size</name></name><argument_list pos:line="216" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="217" pos:column="9">mainRange</name> <op:operator pos:line="217" pos:column="19">=</op:operator> <name pos:line="217" pos:column="21">r</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="220" pos:column="1">SelectionRange</name> <type:modifier pos:line="220" pos:column="16">&amp;</type:modifier></type><name><name pos:line="220" pos:column="17">Selection</name><op:operator pos:line="220" pos:column="26">::</op:operator><name pos:line="220" pos:column="28">Range</name></name><parameter_list pos:line="220" pos:column="33">(<param><decl><type><name pos:line="220" pos:column="34">size_t</name></type> <name pos:line="220" pos:column="41">r</name></decl></param>)</parameter_list> <block pos:line="220" pos:column="44">{
	<return pos:line="221" pos:column="9">return <expr><name><name pos:line="221" pos:column="16">ranges</name><index pos:line="221" pos:column="22">[<expr><name pos:line="221" pos:column="23">r</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name pos:line="224" pos:column="1">SelectionRange</name> <type:modifier pos:line="224" pos:column="16">&amp;</type:modifier></type><name><name pos:line="224" pos:column="17">Selection</name><op:operator pos:line="224" pos:column="26">::</op:operator><name pos:line="224" pos:column="28">RangeMain</name></name><parameter_list pos:line="224" pos:column="37">()</parameter_list> <block pos:line="224" pos:column="40">{
	<return pos:line="225" pos:column="9">return <expr><name><name pos:line="225" pos:column="16">ranges</name><index pos:line="225" pos:column="22">[<expr><name pos:line="225" pos:column="23">mainRange</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name pos:line="228" pos:column="1">bool</name></type> <name><name pos:line="228" pos:column="6">Selection</name><op:operator pos:line="228" pos:column="15">::</op:operator><name pos:line="228" pos:column="17">MoveExtends</name></name><parameter_list pos:line="228" pos:column="28">()</parameter_list> <specifier pos:line="228" pos:column="31">const</specifier> <block pos:line="228" pos:column="37">{
	<return pos:line="229" pos:column="9">return <expr><name pos:line="229" pos:column="16">moveExtends</name></expr>;</return>
}</block></function>

<function><type><name pos:line="232" pos:column="1">void</name></type> <name><name pos:line="232" pos:column="6">Selection</name><op:operator pos:line="232" pos:column="15">::</op:operator><name pos:line="232" pos:column="17">SetMoveExtends</name></name><parameter_list pos:line="232" pos:column="31">(<param><decl><type><name pos:line="232" pos:column="32">bool</name></type> <name pos:line="232" pos:column="37">moveExtends_</name></decl></param>)</parameter_list> <block pos:line="232" pos:column="51">{
	<expr_stmt><expr><name pos:line="233" pos:column="9">moveExtends</name> <op:operator pos:line="233" pos:column="21">=</op:operator> <name pos:line="233" pos:column="23">moveExtends_</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="236" pos:column="1">bool</name></type> <name><name pos:line="236" pos:column="6">Selection</name><op:operator pos:line="236" pos:column="15">::</op:operator><name pos:line="236" pos:column="17">Empty</name></name><parameter_list pos:line="236" pos:column="22">()</parameter_list> <specifier pos:line="236" pos:column="25">const</specifier> <block pos:line="236" pos:column="31">{
	<for pos:line="237" pos:column="9">for (<init><decl><type><name pos:line="237" pos:column="14">size_t</name></type> <name pos:line="237" pos:column="21">i</name><init pos:line="237" pos:column="22">=<expr><lit:literal type="number" pos:line="237" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="237" pos:column="26">i</name><op:operator pos:line="237" pos:column="27">&lt;</op:operator><call><name><name pos:line="237" pos:column="28">ranges</name><op:operator pos:line="237" pos:column="34">.</op:operator><name pos:line="237" pos:column="35">size</name></name><argument_list pos:line="237" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="237" pos:column="43">i</name><op:operator pos:line="237" pos:column="44">++</op:operator></expr></incr>) <block pos:line="237" pos:column="48">{
		<if pos:line="238" pos:column="17">if <condition pos:line="238" pos:column="20">(<expr><op:operator pos:line="238" pos:column="21">!</op:operator><name><name pos:line="238" pos:column="22">ranges</name><index pos:line="238" pos:column="28">[<expr><name pos:line="238" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="238" pos:column="31">.</op:operator><call><name pos:line="238" pos:column="32">Empty</name><argument_list pos:line="238" pos:column="37">()</argument_list></call></expr>)</condition><then pos:line="238" pos:column="40">
			<return pos:line="239" pos:column="25">return <expr><lit:literal type="boolean" pos:line="239" pos:column="32">false</lit:literal></expr>;</return></then></if>
	}</block></for>
	<return pos:line="241" pos:column="9">return <expr><lit:literal type="boolean" pos:line="241" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="244" pos:column="1">SelectionPosition</name></type> <name><name pos:line="244" pos:column="19">Selection</name><op:operator pos:line="244" pos:column="28">::</op:operator><name pos:line="244" pos:column="30">Last</name></name><parameter_list pos:line="244" pos:column="34">()</parameter_list> <specifier pos:line="244" pos:column="37">const</specifier> <block pos:line="244" pos:column="43">{
	<decl_stmt><decl><type><name pos:line="245" pos:column="9">SelectionPosition</name></type> <name pos:line="245" pos:column="27">lastPosition</name></decl>;</decl_stmt>
	<for pos:line="246" pos:column="9">for (<init><decl><type><name pos:line="246" pos:column="14">size_t</name></type> <name pos:line="246" pos:column="21">i</name><init pos:line="246" pos:column="22">=<expr><lit:literal type="number" pos:line="246" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="246" pos:column="26">i</name><op:operator pos:line="246" pos:column="27">&lt;</op:operator><call><name><name pos:line="246" pos:column="28">ranges</name><op:operator pos:line="246" pos:column="34">.</op:operator><name pos:line="246" pos:column="35">size</name></name><argument_list pos:line="246" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="246" pos:column="43">i</name><op:operator pos:line="246" pos:column="44">++</op:operator></expr></incr>) <block pos:line="246" pos:column="48">{
		<if pos:line="247" pos:column="17">if <condition pos:line="247" pos:column="20">(<expr><name pos:line="247" pos:column="21">lastPosition</name> <op:operator pos:line="247" pos:column="34">&lt;</op:operator> <name><name pos:line="247" pos:column="36">ranges</name><index pos:line="247" pos:column="42">[<expr><name pos:line="247" pos:column="43">i</name></expr>]</index></name><op:operator pos:line="247" pos:column="45">.</op:operator><name pos:line="247" pos:column="46">caret</name></expr>)</condition><then pos:line="247" pos:column="52">
			<expr_stmt><expr><name pos:line="248" pos:column="25">lastPosition</name> <op:operator pos:line="248" pos:column="38">=</op:operator> <name><name pos:line="248" pos:column="40">ranges</name><index pos:line="248" pos:column="46">[<expr><name pos:line="248" pos:column="47">i</name></expr>]</index></name><op:operator pos:line="248" pos:column="49">.</op:operator><name pos:line="248" pos:column="50">caret</name></expr>;</expr_stmt></then></if>
		<if pos:line="249" pos:column="17">if <condition pos:line="249" pos:column="20">(<expr><name pos:line="249" pos:column="21">lastPosition</name> <op:operator pos:line="249" pos:column="34">&lt;</op:operator> <name><name pos:line="249" pos:column="36">ranges</name><index pos:line="249" pos:column="42">[<expr><name pos:line="249" pos:column="43">i</name></expr>]</index></name><op:operator pos:line="249" pos:column="45">.</op:operator><name pos:line="249" pos:column="46">anchor</name></expr>)</condition><then pos:line="249" pos:column="53">
			<expr_stmt><expr><name pos:line="250" pos:column="25">lastPosition</name> <op:operator pos:line="250" pos:column="38">=</op:operator> <name><name pos:line="250" pos:column="40">ranges</name><index pos:line="250" pos:column="46">[<expr><name pos:line="250" pos:column="47">i</name></expr>]</index></name><op:operator pos:line="250" pos:column="49">.</op:operator><name pos:line="250" pos:column="50">anchor</name></expr>;</expr_stmt></then></if>
	}</block></for>
	<return pos:line="252" pos:column="9">return <expr><name pos:line="252" pos:column="16">lastPosition</name></expr>;</return>
}</block></function>

<function><type><name pos:line="255" pos:column="1">int</name></type> <name><name pos:line="255" pos:column="5">Selection</name><op:operator pos:line="255" pos:column="14">::</op:operator><name pos:line="255" pos:column="16">Length</name></name><parameter_list pos:line="255" pos:column="22">()</parameter_list> <specifier pos:line="255" pos:column="25">const</specifier> <block pos:line="255" pos:column="31">{
	<decl_stmt><decl><type><name pos:line="256" pos:column="9">int</name></type> <name pos:line="256" pos:column="13">len</name> <init pos:line="256" pos:column="17">= <expr><lit:literal type="number" pos:line="256" pos:column="19">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="257" pos:column="9">for (<init><decl><type><name pos:line="257" pos:column="14">size_t</name></type> <name pos:line="257" pos:column="21">i</name><init pos:line="257" pos:column="22">=<expr><lit:literal type="number" pos:line="257" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="257" pos:column="26">i</name><op:operator pos:line="257" pos:column="27">&lt;</op:operator><call><name><name pos:line="257" pos:column="28">ranges</name><op:operator pos:line="257" pos:column="34">.</op:operator><name pos:line="257" pos:column="35">size</name></name><argument_list pos:line="257" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="257" pos:column="43">i</name><op:operator pos:line="257" pos:column="44">++</op:operator></expr></incr>) <block pos:line="257" pos:column="48">{
		<expr_stmt><expr><name pos:line="258" pos:column="17">len</name> <op:operator pos:line="258" pos:column="21">+=</op:operator> <name><name pos:line="258" pos:column="24">ranges</name><index pos:line="258" pos:column="30">[<expr><name pos:line="258" pos:column="31">i</name></expr>]</index></name><op:operator pos:line="258" pos:column="33">.</op:operator><call><name pos:line="258" pos:column="34">Length</name><argument_list pos:line="258" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return pos:line="260" pos:column="9">return <expr><name pos:line="260" pos:column="16">len</name></expr>;</return>
}</block></function>

<function><type><name pos:line="263" pos:column="1">void</name></type> <name><name pos:line="263" pos:column="6">Selection</name><op:operator pos:line="263" pos:column="15">::</op:operator><name pos:line="263" pos:column="17">MovePositions</name></name><parameter_list pos:line="263" pos:column="30">(<param><decl><type><name pos:line="263" pos:column="31">bool</name></type> <name pos:line="263" pos:column="36">insertion</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="47">int</name></type> <name pos:line="263" pos:column="51">startChange</name></decl></param>, <param><decl><type><name pos:line="263" pos:column="64">int</name></type> <name pos:line="263" pos:column="68">length</name></decl></param>)</parameter_list> <block pos:line="263" pos:column="76">{
	<for pos:line="264" pos:column="9">for (<init><decl><type><name pos:line="264" pos:column="14">size_t</name></type> <name pos:line="264" pos:column="21">i</name><init pos:line="264" pos:column="22">=<expr><lit:literal type="number" pos:line="264" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="264" pos:column="26">i</name><op:operator pos:line="264" pos:column="27">&lt;</op:operator><call><name><name pos:line="264" pos:column="28">ranges</name><op:operator pos:line="264" pos:column="34">.</op:operator><name pos:line="264" pos:column="35">size</name></name><argument_list pos:line="264" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="264" pos:column="43">i</name><op:operator pos:line="264" pos:column="44">++</op:operator></expr></incr>) <block pos:line="264" pos:column="48">{
		<expr_stmt><expr><name><name pos:line="265" pos:column="17">ranges</name><index pos:line="265" pos:column="23">[<expr><name pos:line="265" pos:column="24">i</name></expr>]</index></name><op:operator pos:line="265" pos:column="26">.</op:operator><call><name><name pos:line="265" pos:column="27">caret</name><op:operator pos:line="265" pos:column="32">.</op:operator><name pos:line="265" pos:column="33">MoveForInsertDelete</name></name><argument_list pos:line="265" pos:column="52">(<argument><expr><name pos:line="265" pos:column="53">insertion</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="64">startChange</name></expr></argument>, <argument><expr><name pos:line="265" pos:column="77">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="266" pos:column="17">ranges</name><index pos:line="266" pos:column="23">[<expr><name pos:line="266" pos:column="24">i</name></expr>]</index></name><op:operator pos:line="266" pos:column="26">.</op:operator><call><name><name pos:line="266" pos:column="27">anchor</name><op:operator pos:line="266" pos:column="33">.</op:operator><name pos:line="266" pos:column="34">MoveForInsertDelete</name></name><argument_list pos:line="266" pos:column="53">(<argument><expr><name pos:line="266" pos:column="54">insertion</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="65">startChange</name></expr></argument>, <argument><expr><name pos:line="266" pos:column="78">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name pos:line="270" pos:column="1">void</name></type> <name><name pos:line="270" pos:column="6">Selection</name><op:operator pos:line="270" pos:column="15">::</op:operator><name pos:line="270" pos:column="17">TrimSelection</name></name><parameter_list pos:line="270" pos:column="30">(<param><decl><type><name pos:line="270" pos:column="31">SelectionRange</name></type> <name pos:line="270" pos:column="46">range</name></decl></param>)</parameter_list> <block pos:line="270" pos:column="53">{
	<for pos:line="271" pos:column="9">for (<init><decl><type><name pos:line="271" pos:column="14">size_t</name></type> <name pos:line="271" pos:column="21">i</name><init pos:line="271" pos:column="22">=<expr><lit:literal type="number" pos:line="271" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="271" pos:column="26">i</name><op:operator pos:line="271" pos:column="27">&lt;</op:operator><call><name><name pos:line="271" pos:column="28">ranges</name><op:operator pos:line="271" pos:column="34">.</op:operator><name pos:line="271" pos:column="35">size</name></name><argument_list pos:line="271" pos:column="39">()</argument_list></call></expr>;</condition><incr/>) <block pos:line="271" pos:column="44">{
		<if pos:line="272" pos:column="17">if <condition pos:line="272" pos:column="20">(<expr><op:operator pos:line="272" pos:column="21">(</op:operator><name pos:line="272" pos:column="22">i</name> <op:operator pos:line="272" pos:column="24">!=</op:operator> <name pos:line="272" pos:column="27">mainRange</name><op:operator pos:line="272" pos:column="36">)</op:operator> <op:operator pos:line="272" pos:column="38">&amp;&amp;</op:operator> <op:operator pos:line="272" pos:column="41">(</op:operator><name><name pos:line="272" pos:column="42">ranges</name><index pos:line="272" pos:column="48">[<expr><name pos:line="272" pos:column="49">i</name></expr>]</index></name><op:operator pos:line="272" pos:column="51">.</op:operator><call><name pos:line="272" pos:column="52">Trim</name><argument_list pos:line="272" pos:column="56">(<argument><expr><name pos:line="272" pos:column="57">range</name></expr></argument>)</argument_list></call><op:operator pos:line="272" pos:column="63">)</op:operator></expr>)</condition><then pos:line="272" pos:column="65"> <block pos:line="272" pos:column="66">{
			<comment type="line" pos:line="273" pos:column="25">// Trimmed to empty so remove</comment>
			<for pos:line="274" pos:column="25">for (<init><decl><type><name pos:line="274" pos:column="30">size_t</name></type> <name pos:line="274" pos:column="37">j</name><init pos:line="274" pos:column="38">=<expr><name pos:line="274" pos:column="39">i</name></expr></init></decl>;</init> <condition><expr><name pos:line="274" pos:column="42">j</name><op:operator pos:line="274" pos:column="43">&lt;</op:operator><call><name><name pos:line="274" pos:column="44">ranges</name><op:operator pos:line="274" pos:column="50">.</op:operator><name pos:line="274" pos:column="51">size</name></name><argument_list pos:line="274" pos:column="55">()</argument_list></call><op:operator pos:line="274" pos:column="57">-</op:operator><lit:literal type="number" pos:line="274" pos:column="58">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="274" pos:column="61">j</name><op:operator pos:line="274" pos:column="62">++</op:operator></expr></incr>) <block pos:line="274" pos:column="66">{
				<expr_stmt><expr><name><name pos:line="275" pos:column="33">ranges</name><index pos:line="275" pos:column="39">[<expr><name pos:line="275" pos:column="40">j</name></expr>]</index></name> <op:operator pos:line="275" pos:column="43">=</op:operator> <name><name pos:line="275" pos:column="45">ranges</name><index pos:line="275" pos:column="51">[<expr><name pos:line="275" pos:column="52">j</name><op:operator pos:line="275" pos:column="53">+</op:operator><lit:literal type="number" pos:line="275" pos:column="54">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
				<if pos:line="276" pos:column="33">if <condition pos:line="276" pos:column="36">(<expr><name pos:line="276" pos:column="37">j</name> <op:operator pos:line="276" pos:column="39">==</op:operator> <name pos:line="276" pos:column="42">mainRange</name><op:operator pos:line="276" pos:column="51">-</op:operator><lit:literal type="number" pos:line="276" pos:column="52">1</lit:literal></expr>)</condition><then pos:line="276" pos:column="54">
					<expr_stmt><expr><name pos:line="277" pos:column="41">mainRange</name><op:operator pos:line="277" pos:column="50">--</op:operator></expr>;</expr_stmt></then></if>
			}</block></for>
			<expr_stmt><expr><call><name><name pos:line="279" pos:column="25">ranges</name><op:operator pos:line="279" pos:column="31">.</op:operator><name pos:line="279" pos:column="32">pop_back</name></name><argument_list pos:line="279" pos:column="40">()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else pos:line="280" pos:column="19">else <block pos:line="280" pos:column="24">{
			<expr_stmt><expr><name pos:line="281" pos:column="25">i</name><op:operator pos:line="281" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="286" pos:column="1">void</name></type> <name><name pos:line="286" pos:column="6">Selection</name><op:operator pos:line="286" pos:column="15">::</op:operator><name pos:line="286" pos:column="17">SetSelection</name></name><parameter_list pos:line="286" pos:column="29">(<param><decl><type><name pos:line="286" pos:column="30">SelectionRange</name></type> <name pos:line="286" pos:column="45">range</name></decl></param>)</parameter_list> <block pos:line="286" pos:column="52">{
	<expr_stmt><expr><call><name><name pos:line="287" pos:column="9">ranges</name><op:operator pos:line="287" pos:column="15">.</op:operator><name pos:line="287" pos:column="16">clear</name></name><argument_list pos:line="287" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="288" pos:column="9">ranges</name><op:operator pos:line="288" pos:column="15">.</op:operator><name pos:line="288" pos:column="16">push_back</name></name><argument_list pos:line="288" pos:column="25">(<argument><expr><name pos:line="288" pos:column="26">range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="289" pos:column="9">mainRange</name> <op:operator pos:line="289" pos:column="19">=</op:operator> <call><name><name pos:line="289" pos:column="21">ranges</name><op:operator pos:line="289" pos:column="27">.</op:operator><name pos:line="289" pos:column="28">size</name></name><argument_list pos:line="289" pos:column="32">()</argument_list></call> <op:operator pos:line="289" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="289" pos:column="37">1</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="292" pos:column="1">void</name></type> <name><name pos:line="292" pos:column="6">Selection</name><op:operator pos:line="292" pos:column="15">::</op:operator><name pos:line="292" pos:column="17">AddSelection</name></name><parameter_list pos:line="292" pos:column="29">(<param><decl><type><name pos:line="292" pos:column="30">SelectionRange</name></type> <name pos:line="292" pos:column="45">range</name></decl></param>)</parameter_list> <block pos:line="292" pos:column="52">{
	<expr_stmt><expr><call><name pos:line="293" pos:column="9">TrimSelection</name><argument_list pos:line="293" pos:column="22">(<argument><expr><name pos:line="293" pos:column="23">range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="294" pos:column="9">ranges</name><op:operator pos:line="294" pos:column="15">.</op:operator><name pos:line="294" pos:column="16">push_back</name></name><argument_list pos:line="294" pos:column="25">(<argument><expr><name pos:line="294" pos:column="26">range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="295" pos:column="9">mainRange</name> <op:operator pos:line="295" pos:column="19">=</op:operator> <call><name><name pos:line="295" pos:column="21">ranges</name><op:operator pos:line="295" pos:column="27">.</op:operator><name pos:line="295" pos:column="28">size</name></name><argument_list pos:line="295" pos:column="32">()</argument_list></call> <op:operator pos:line="295" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="295" pos:column="37">1</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="298" pos:column="1">void</name></type> <name><name pos:line="298" pos:column="6">Selection</name><op:operator pos:line="298" pos:column="15">::</op:operator><name pos:line="298" pos:column="17">AddSelectionWithoutTrim</name></name><parameter_list pos:line="298" pos:column="40">(<param><decl><type><name pos:line="298" pos:column="41">SelectionRange</name></type> <name pos:line="298" pos:column="56">range</name></decl></param>)</parameter_list> <block pos:line="298" pos:column="63">{
	<expr_stmt><expr><call><name><name pos:line="299" pos:column="9">ranges</name><op:operator pos:line="299" pos:column="15">.</op:operator><name pos:line="299" pos:column="16">push_back</name></name><argument_list pos:line="299" pos:column="25">(<argument><expr><name pos:line="299" pos:column="26">range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="300" pos:column="9">mainRange</name> <op:operator pos:line="300" pos:column="19">=</op:operator> <call><name><name pos:line="300" pos:column="21">ranges</name><op:operator pos:line="300" pos:column="27">.</op:operator><name pos:line="300" pos:column="28">size</name></name><argument_list pos:line="300" pos:column="32">()</argument_list></call> <op:operator pos:line="300" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="300" pos:column="37">1</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="303" pos:column="1">void</name></type> <name><name pos:line="303" pos:column="6">Selection</name><op:operator pos:line="303" pos:column="15">::</op:operator><name pos:line="303" pos:column="17">TentativeSelection</name></name><parameter_list pos:line="303" pos:column="35">(<param><decl><type><name pos:line="303" pos:column="36">SelectionRange</name></type> <name pos:line="303" pos:column="51">range</name></decl></param>)</parameter_list> <block pos:line="303" pos:column="58">{
	<if pos:line="304" pos:column="9">if <condition pos:line="304" pos:column="12">(<expr><op:operator pos:line="304" pos:column="13">!</op:operator><name pos:line="304" pos:column="14">tentativeMain</name></expr>)</condition><then pos:line="304" pos:column="28"> <block pos:line="304" pos:column="29">{
		<expr_stmt><expr><name pos:line="305" pos:column="17">rangesSaved</name> <op:operator pos:line="305" pos:column="29">=</op:operator> <name pos:line="305" pos:column="31">ranges</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="307" pos:column="9">ranges</name> <op:operator pos:line="307" pos:column="16">=</op:operator> <name pos:line="307" pos:column="18">rangesSaved</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="308" pos:column="9">AddSelection</name><argument_list pos:line="308" pos:column="21">(<argument><expr><name pos:line="308" pos:column="22">range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="309" pos:column="9">TrimSelection</name><argument_list pos:line="309" pos:column="22">(<argument><expr><name><name pos:line="309" pos:column="23">ranges</name><index pos:line="309" pos:column="29">[<expr><name pos:line="309" pos:column="30">mainRange</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="310" pos:column="9">tentativeMain</name> <op:operator pos:line="310" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="310" pos:column="25">true</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="313" pos:column="1">void</name></type> <name><name pos:line="313" pos:column="6">Selection</name><op:operator pos:line="313" pos:column="15">::</op:operator><name pos:line="313" pos:column="17">CommitTentative</name></name><parameter_list pos:line="313" pos:column="32">()</parameter_list> <block pos:line="313" pos:column="35">{
	<expr_stmt><expr><call><name><name pos:line="314" pos:column="9">rangesSaved</name><op:operator pos:line="314" pos:column="20">.</op:operator><name pos:line="314" pos:column="21">clear</name></name><argument_list pos:line="314" pos:column="26">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="315" pos:column="9">tentativeMain</name> <op:operator pos:line="315" pos:column="23">=</op:operator> <lit:literal type="boolean" pos:line="315" pos:column="25">false</lit:literal></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="318" pos:column="1">int</name></type> <name><name pos:line="318" pos:column="5">Selection</name><op:operator pos:line="318" pos:column="14">::</op:operator><name pos:line="318" pos:column="16">CharacterInSelection</name></name><parameter_list pos:line="318" pos:column="36">(<param><decl><type><name pos:line="318" pos:column="37">int</name></type> <name pos:line="318" pos:column="41">posCharacter</name></decl></param>)</parameter_list> <specifier pos:line="318" pos:column="55">const</specifier> <block pos:line="318" pos:column="61">{
	<for pos:line="319" pos:column="9">for (<init><decl><type><name pos:line="319" pos:column="14">size_t</name></type> <name pos:line="319" pos:column="21">i</name><init pos:line="319" pos:column="22">=<expr><lit:literal type="number" pos:line="319" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="319" pos:column="26">i</name><op:operator pos:line="319" pos:column="27">&lt;</op:operator><call><name><name pos:line="319" pos:column="28">ranges</name><op:operator pos:line="319" pos:column="34">.</op:operator><name pos:line="319" pos:column="35">size</name></name><argument_list pos:line="319" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="319" pos:column="43">i</name><op:operator pos:line="319" pos:column="44">++</op:operator></expr></incr>) <block pos:line="319" pos:column="48">{
		<if pos:line="320" pos:column="17">if <condition pos:line="320" pos:column="20">(<expr><name><name pos:line="320" pos:column="21">ranges</name><index pos:line="320" pos:column="27">[<expr><name pos:line="320" pos:column="28">i</name></expr>]</index></name><op:operator pos:line="320" pos:column="30">.</op:operator><call><name pos:line="320" pos:column="31">ContainsCharacter</name><argument_list pos:line="320" pos:column="48">(<argument><expr><name pos:line="320" pos:column="49">posCharacter</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="320" pos:column="63">
			<return pos:line="321" pos:column="25">return <expr><name pos:line="321" pos:column="32">i</name> <op:operator pos:line="321" pos:column="34">==</op:operator> <name pos:line="321" pos:column="37">mainRange</name> <op:operator pos:line="321" pos:column="47">?</op:operator> <lit:literal type="number" pos:line="321" pos:column="49">1</lit:literal> <op:operator pos:line="321" pos:column="51">:</op:operator> <lit:literal type="number" pos:line="321" pos:column="53">2</lit:literal></expr>;</return></then></if>
	}</block></for>
	<return pos:line="323" pos:column="9">return <expr><lit:literal type="number" pos:line="323" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="326" pos:column="1">int</name></type> <name><name pos:line="326" pos:column="5">Selection</name><op:operator pos:line="326" pos:column="14">::</op:operator><name pos:line="326" pos:column="16">InSelectionForEOL</name></name><parameter_list pos:line="326" pos:column="33">(<param><decl><type><name pos:line="326" pos:column="34">int</name></type> <name pos:line="326" pos:column="38">pos</name></decl></param>)</parameter_list> <specifier pos:line="326" pos:column="43">const</specifier> <block pos:line="326" pos:column="49">{
	<for pos:line="327" pos:column="9">for (<init><decl><type><name pos:line="327" pos:column="14">size_t</name></type> <name pos:line="327" pos:column="21">i</name><init pos:line="327" pos:column="22">=<expr><lit:literal type="number" pos:line="327" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="327" pos:column="26">i</name><op:operator pos:line="327" pos:column="27">&lt;</op:operator><call><name><name pos:line="327" pos:column="28">ranges</name><op:operator pos:line="327" pos:column="34">.</op:operator><name pos:line="327" pos:column="35">size</name></name><argument_list pos:line="327" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="327" pos:column="43">i</name><op:operator pos:line="327" pos:column="44">++</op:operator></expr></incr>) <block pos:line="327" pos:column="48">{
		<if pos:line="328" pos:column="17">if <condition pos:line="328" pos:column="20">(<expr><op:operator pos:line="328" pos:column="21">!</op:operator><name><name pos:line="328" pos:column="22">ranges</name><index pos:line="328" pos:column="28">[<expr><name pos:line="328" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="328" pos:column="31">.</op:operator><call><name pos:line="328" pos:column="32">Empty</name><argument_list pos:line="328" pos:column="37">()</argument_list></call> <op:operator pos:line="328" pos:column="40">&amp;&amp;</op:operator> <op:operator pos:line="328" pos:column="43">(</op:operator><name pos:line="328" pos:column="44">pos</name> <op:operator pos:line="328" pos:column="48">&gt;</op:operator> <name><name pos:line="328" pos:column="50">ranges</name><index pos:line="328" pos:column="56">[<expr><name pos:line="328" pos:column="57">i</name></expr>]</index></name><op:operator pos:line="328" pos:column="59">.</op:operator><call><name pos:line="328" pos:column="60">Start</name><argument_list pos:line="328" pos:column="65">()</argument_list></call><op:operator pos:line="328" pos:column="67">.</op:operator><call><name pos:line="328" pos:column="68">Position</name><argument_list pos:line="328" pos:column="76">()</argument_list></call><op:operator pos:line="328" pos:column="78">)</op:operator> <op:operator pos:line="328" pos:column="80">&amp;&amp;</op:operator> <op:operator pos:line="328" pos:column="83">(</op:operator><name pos:line="328" pos:column="84">pos</name> <op:operator pos:line="328" pos:column="88">&lt;=</op:operator> <name><name pos:line="328" pos:column="91">ranges</name><index pos:line="328" pos:column="97">[<expr><name pos:line="328" pos:column="98">i</name></expr>]</index></name><op:operator pos:line="328" pos:column="100">.</op:operator><call><name pos:line="328" pos:column="101">End</name><argument_list pos:line="328" pos:column="104">()</argument_list></call><op:operator pos:line="328" pos:column="106">.</op:operator><call><name pos:line="328" pos:column="107">Position</name><argument_list pos:line="328" pos:column="115">()</argument_list></call><op:operator pos:line="328" pos:column="117">)</op:operator></expr>)</condition><then pos:line="328" pos:column="119">
			<return pos:line="329" pos:column="25">return <expr><name pos:line="329" pos:column="32">i</name> <op:operator pos:line="329" pos:column="34">==</op:operator> <name pos:line="329" pos:column="37">mainRange</name> <op:operator pos:line="329" pos:column="47">?</op:operator> <lit:literal type="number" pos:line="329" pos:column="49">1</lit:literal> <op:operator pos:line="329" pos:column="51">:</op:operator> <lit:literal type="number" pos:line="329" pos:column="53">2</lit:literal></expr>;</return></then></if>
	}</block></for>
	<return pos:line="331" pos:column="9">return <expr><lit:literal type="number" pos:line="331" pos:column="16">0</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="334" pos:column="1">int</name></type> <name><name pos:line="334" pos:column="5">Selection</name><op:operator pos:line="334" pos:column="14">::</op:operator><name pos:line="334" pos:column="16">VirtualSpaceFor</name></name><parameter_list pos:line="334" pos:column="31">(<param><decl><type><name pos:line="334" pos:column="32">int</name></type> <name pos:line="334" pos:column="36">pos</name></decl></param>)</parameter_list> <specifier pos:line="334" pos:column="41">const</specifier> <block pos:line="334" pos:column="47">{
	<decl_stmt><decl><type><name pos:line="335" pos:column="9">int</name></type> <name pos:line="335" pos:column="13">virtualSpace</name> <init pos:line="335" pos:column="26">= <expr><lit:literal type="number" pos:line="335" pos:column="28">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="336" pos:column="9">for (<init><decl><type><name pos:line="336" pos:column="14">size_t</name></type> <name pos:line="336" pos:column="21">i</name><init pos:line="336" pos:column="22">=<expr><lit:literal type="number" pos:line="336" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="336" pos:column="26">i</name><op:operator pos:line="336" pos:column="27">&lt;</op:operator><call><name><name pos:line="336" pos:column="28">ranges</name><op:operator pos:line="336" pos:column="34">.</op:operator><name pos:line="336" pos:column="35">size</name></name><argument_list pos:line="336" pos:column="39">()</argument_list></call></expr>;</condition> <incr><expr><name pos:line="336" pos:column="43">i</name><op:operator pos:line="336" pos:column="44">++</op:operator></expr></incr>) <block pos:line="336" pos:column="48">{
		<if pos:line="337" pos:column="17">if <condition pos:line="337" pos:column="20">(<expr><op:operator pos:line="337" pos:column="21">(</op:operator><name><name pos:line="337" pos:column="22">ranges</name><index pos:line="337" pos:column="28">[<expr><name pos:line="337" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="337" pos:column="31">.</op:operator><call><name><name pos:line="337" pos:column="32">caret</name><op:operator pos:line="337" pos:column="37">.</op:operator><name pos:line="337" pos:column="38">Position</name></name><argument_list pos:line="337" pos:column="46">()</argument_list></call> <op:operator pos:line="337" pos:column="49">==</op:operator> <name pos:line="337" pos:column="52">pos</name><op:operator pos:line="337" pos:column="55">)</op:operator> <op:operator pos:line="337" pos:column="57">&amp;&amp;</op:operator> <op:operator pos:line="337" pos:column="60">(</op:operator><name pos:line="337" pos:column="61">virtualSpace</name> <op:operator pos:line="337" pos:column="74">&lt;</op:operator> <name><name pos:line="337" pos:column="76">ranges</name><index pos:line="337" pos:column="82">[<expr><name pos:line="337" pos:column="83">i</name></expr>]</index></name><op:operator pos:line="337" pos:column="85">.</op:operator><call><name><name pos:line="337" pos:column="86">caret</name><op:operator pos:line="337" pos:column="91">.</op:operator><name pos:line="337" pos:column="92">VirtualSpace</name></name><argument_list pos:line="337" pos:column="104">()</argument_list></call><op:operator pos:line="337" pos:column="106">)</op:operator></expr>)</condition><then pos:line="337" pos:column="108">
			<expr_stmt><expr><name pos:line="338" pos:column="25">virtualSpace</name> <op:operator pos:line="338" pos:column="38">=</op:operator> <name><name pos:line="338" pos:column="40">ranges</name><index pos:line="338" pos:column="46">[<expr><name pos:line="338" pos:column="47">i</name></expr>]</index></name><op:operator pos:line="338" pos:column="49">.</op:operator><call><name><name pos:line="338" pos:column="50">caret</name><op:operator pos:line="338" pos:column="55">.</op:operator><name pos:line="338" pos:column="56">VirtualSpace</name></name><argument_list pos:line="338" pos:column="68">()</argument_list></call></expr>;</expr_stmt></then></if>
		<if pos:line="339" pos:column="17">if <condition pos:line="339" pos:column="20">(<expr><op:operator pos:line="339" pos:column="21">(</op:operator><name><name pos:line="339" pos:column="22">ranges</name><index pos:line="339" pos:column="28">[<expr><name pos:line="339" pos:column="29">i</name></expr>]</index></name><op:operator pos:line="339" pos:column="31">.</op:operator><call><name><name pos:line="339" pos:column="32">anchor</name><op:operator pos:line="339" pos:column="38">.</op:operator><name pos:line="339" pos:column="39">Position</name></name><argument_list pos:line="339" pos:column="47">()</argument_list></call> <op:operator pos:line="339" pos:column="50">==</op:operator> <name pos:line="339" pos:column="53">pos</name><op:operator pos:line="339" pos:column="56">)</op:operator> <op:operator pos:line="339" pos:column="58">&amp;&amp;</op:operator> <op:operator pos:line="339" pos:column="61">(</op:operator><name pos:line="339" pos:column="62">virtualSpace</name> <op:operator pos:line="339" pos:column="75">&lt;</op:operator> <name><name pos:line="339" pos:column="77">ranges</name><index pos:line="339" pos:column="83">[<expr><name pos:line="339" pos:column="84">i</name></expr>]</index></name><op:operator pos:line="339" pos:column="86">.</op:operator><call><name><name pos:line="339" pos:column="87">anchor</name><op:operator pos:line="339" pos:column="93">.</op:operator><name pos:line="339" pos:column="94">VirtualSpace</name></name><argument_list pos:line="339" pos:column="106">()</argument_list></call><op:operator pos:line="339" pos:column="108">)</op:operator></expr>)</condition><then pos:line="339" pos:column="110">
			<expr_stmt><expr><name pos:line="340" pos:column="25">virtualSpace</name> <op:operator pos:line="340" pos:column="38">=</op:operator> <name><name pos:line="340" pos:column="40">ranges</name><index pos:line="340" pos:column="46">[<expr><name pos:line="340" pos:column="47">i</name></expr>]</index></name><op:operator pos:line="340" pos:column="49">.</op:operator><call><name><name pos:line="340" pos:column="50">anchor</name><op:operator pos:line="340" pos:column="56">.</op:operator><name pos:line="340" pos:column="57">VirtualSpace</name></name><argument_list pos:line="340" pos:column="69">()</argument_list></call></expr>;</expr_stmt></then></if>
	}</block></for>
	<return pos:line="342" pos:column="9">return <expr><name pos:line="342" pos:column="16">virtualSpace</name></expr>;</return>
}</block></function>

<function><type><name pos:line="345" pos:column="1">void</name></type> <name><name pos:line="345" pos:column="6">Selection</name><op:operator pos:line="345" pos:column="15">::</op:operator><name pos:line="345" pos:column="17">Clear</name></name><parameter_list pos:line="345" pos:column="22">()</parameter_list> <block pos:line="345" pos:column="25">{
	<expr_stmt><expr><call><name><name pos:line="346" pos:column="9">ranges</name><op:operator pos:line="346" pos:column="15">.</op:operator><name pos:line="346" pos:column="16">clear</name></name><argument_list pos:line="346" pos:column="21">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="347" pos:column="9">ranges</name><op:operator pos:line="347" pos:column="15">.</op:operator><name pos:line="347" pos:column="16">push_back</name></name><argument_list pos:line="347" pos:column="25">(<argument><expr><call><name pos:line="347" pos:column="26">SelectionRange</name><argument_list pos:line="347" pos:column="40">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="348" pos:column="9">mainRange</name> <op:operator pos:line="348" pos:column="19">=</op:operator> <call><name><name pos:line="348" pos:column="21">ranges</name><op:operator pos:line="348" pos:column="27">.</op:operator><name pos:line="348" pos:column="28">size</name></name><argument_list pos:line="348" pos:column="32">()</argument_list></call> <op:operator pos:line="348" pos:column="35">-</op:operator> <lit:literal type="number" pos:line="348" pos:column="37">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="349" pos:column="9">selType</name> <op:operator pos:line="349" pos:column="17">=</op:operator> <name pos:line="349" pos:column="19">selStream</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="350" pos:column="9">moveExtends</name> <op:operator pos:line="350" pos:column="21">=</op:operator> <lit:literal type="boolean" pos:line="350" pos:column="23">false</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="351" pos:column="9">ranges</name><index pos:line="351" pos:column="15">[<expr><name pos:line="351" pos:column="16">mainRange</name></expr>]</index></name><op:operator pos:line="351" pos:column="26">.</op:operator><call><name pos:line="351" pos:column="27">Reset</name><argument_list pos:line="351" pos:column="32">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name pos:line="352" pos:column="9">rangeRectangular</name><op:operator pos:line="352" pos:column="25">.</op:operator><name pos:line="352" pos:column="26">Reset</name></name><argument_list pos:line="352" pos:column="31">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="355" pos:column="1">void</name></type> <name><name pos:line="355" pos:column="6">Selection</name><op:operator pos:line="355" pos:column="15">::</op:operator><name pos:line="355" pos:column="17">RemoveDuplicates</name></name><parameter_list pos:line="355" pos:column="33">()</parameter_list> <block pos:line="355" pos:column="36">{
	<for pos:line="356" pos:column="9">for (<init><decl><type><name pos:line="356" pos:column="14">size_t</name></type> <name pos:line="356" pos:column="21">i</name><init pos:line="356" pos:column="22">=<expr><lit:literal type="number" pos:line="356" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="356" pos:column="26">i</name><op:operator pos:line="356" pos:column="27">&lt;</op:operator><call><name><name pos:line="356" pos:column="28">ranges</name><op:operator pos:line="356" pos:column="34">.</op:operator><name pos:line="356" pos:column="35">size</name></name><argument_list pos:line="356" pos:column="39">()</argument_list></call><op:operator pos:line="356" pos:column="41">-</op:operator><lit:literal type="number" pos:line="356" pos:column="42">1</lit:literal></expr>;</condition> <incr><expr><name pos:line="356" pos:column="45">i</name><op:operator pos:line="356" pos:column="46">++</op:operator></expr></incr>) <block pos:line="356" pos:column="50">{
		<if pos:line="357" pos:column="17">if <condition pos:line="357" pos:column="20">(<expr><name><name pos:line="357" pos:column="21">ranges</name><index pos:line="357" pos:column="27">[<expr><name pos:line="357" pos:column="28">i</name></expr>]</index></name><op:operator pos:line="357" pos:column="30">.</op:operator><call><name pos:line="357" pos:column="31">Empty</name><argument_list pos:line="357" pos:column="36">()</argument_list></call></expr>)</condition><then pos:line="357" pos:column="39"> <block pos:line="357" pos:column="40">{
			<decl_stmt><decl><type><name pos:line="358" pos:column="25">size_t</name></type> <name pos:line="358" pos:column="32">j</name><init pos:line="358" pos:column="33">=<expr><name pos:line="358" pos:column="34">i</name><op:operator pos:line="358" pos:column="35">+</op:operator><lit:literal type="number" pos:line="358" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>
			<while pos:line="359" pos:column="25">while <condition pos:line="359" pos:column="31">(<expr><name pos:line="359" pos:column="32">j</name><op:operator pos:line="359" pos:column="33">&lt;</op:operator><call><name><name pos:line="359" pos:column="34">ranges</name><op:operator pos:line="359" pos:column="40">.</op:operator><name pos:line="359" pos:column="41">size</name></name><argument_list pos:line="359" pos:column="45">()</argument_list></call></expr>)</condition> <block pos:line="359" pos:column="49">{
				<if pos:line="360" pos:column="33">if <condition pos:line="360" pos:column="36">(<expr><name><name pos:line="360" pos:column="37">ranges</name><index pos:line="360" pos:column="43">[<expr><name pos:line="360" pos:column="44">i</name></expr>]</index></name> <op:operator pos:line="360" pos:column="47">==</op:operator> <name><name pos:line="360" pos:column="50">ranges</name><index pos:line="360" pos:column="56">[<expr><name pos:line="360" pos:column="57">j</name></expr>]</index></name></expr>)</condition><then pos:line="360" pos:column="60"> <block pos:line="360" pos:column="61">{
					<expr_stmt><expr><call><name><name pos:line="361" pos:column="41">ranges</name><op:operator pos:line="361" pos:column="47">.</op:operator><name pos:line="361" pos:column="48">erase</name></name><argument_list pos:line="361" pos:column="53">(<argument><expr><call><name><name pos:line="361" pos:column="54">ranges</name><op:operator pos:line="361" pos:column="60">.</op:operator><name pos:line="361" pos:column="61">begin</name></name><argument_list pos:line="361" pos:column="66">()</argument_list></call> <op:operator pos:line="361" pos:column="69">+</op:operator> <name pos:line="361" pos:column="71">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="362" pos:column="41">if <condition pos:line="362" pos:column="44">(<expr><name pos:line="362" pos:column="45">mainRange</name> <op:operator pos:line="362" pos:column="55">&gt;=</op:operator> <name pos:line="362" pos:column="58">j</name></expr>)</condition><then pos:line="362" pos:column="60">
						<expr_stmt><expr><name pos:line="363" pos:column="49">mainRange</name><op:operator pos:line="363" pos:column="58">--</op:operator></expr>;</expr_stmt></then></if>
				}</block></then> <else pos:line="364" pos:column="35">else <block pos:line="364" pos:column="40">{
					<expr_stmt><expr><name pos:line="365" pos:column="41">j</name><op:operator pos:line="365" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></else></if>
			}</block></while>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name pos:line="372" pos:column="1">void</name></type> <name><name pos:line="372" pos:column="6">Selection</name><op:operator pos:line="372" pos:column="15">::</op:operator><name pos:line="372" pos:column="17">RotateMain</name></name><parameter_list pos:line="372" pos:column="27">()</parameter_list> <block pos:line="372" pos:column="30">{
	<expr_stmt><expr><name pos:line="373" pos:column="9">mainRange</name> <op:operator pos:line="373" pos:column="19">=</op:operator> <op:operator pos:line="373" pos:column="21">(</op:operator><name pos:line="373" pos:column="22">mainRange</name> <op:operator pos:line="373" pos:column="32">+</op:operator> <lit:literal type="number" pos:line="373" pos:column="34">1</lit:literal><op:operator pos:line="373" pos:column="35">)</op:operator> <op:operator pos:line="373" pos:column="37">%</op:operator> <call><name><name pos:line="373" pos:column="39">ranges</name><op:operator pos:line="373" pos:column="45">.</op:operator><name pos:line="373" pos:column="46">size</name></name><argument_list pos:line="373" pos:column="50">()</argument_list></call></expr>;</expr_stmt>
}</block></function>

</unit>
