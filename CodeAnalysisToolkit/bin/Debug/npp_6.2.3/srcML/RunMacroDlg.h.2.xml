<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\shortcut\RunMacroDlg.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>

<comment type="line" pos:line="28" pos:column="1">// created by Daniel Volk mordorpost@volkarts.com</comment>

<cpp:ifndef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifndef</cpp:directive> <name pos:line="30" pos:column="9">RUN_MACRO_DLG_H</name></cpp:ifndef>
<cpp:define pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="31" pos:column="9">RUN_MACRO_DLG_H</name></cpp:macro></cpp:define>

<cpp:ifndef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifndef</cpp:directive> <name pos:line="33" pos:column="9">RUN_MACRO_DLG_RC_H</name></cpp:ifndef>
<cpp:include pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="34" pos:column="10">"RunMacroDlg_rc.h"</lit:literal></cpp:file></cpp:include>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="35" pos:column="8">//RUN_MACRO_DLG_RC_H</comment>

<using pos:line="37" pos:column="1">using namespace <name pos:line="37" pos:column="17">std</name>;</using>

<cpp:define pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="39" pos:column="9">RM_CANCEL</name></cpp:macro> <cpp:value pos:line="39" pos:column="19">-1</cpp:value></cpp:define>
<cpp:define pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="40" pos:column="9">RM_RUN_MULTI</name></cpp:macro> <cpp:value pos:line="40" pos:column="22">1</cpp:value></cpp:define>
<cpp:define pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="41" pos:column="9">RM_RUN_EOF</name></cpp:macro> <cpp:value pos:line="41" pos:column="20">2</cpp:value></cpp:define>

<class pos:line="43" pos:column="1">class <name pos:line="43" pos:column="7">RunMacroDlg</name> <super pos:line="43" pos:column="19">: <specifier pos:line="43" pos:column="21">public</specifier> <name pos:line="43" pos:column="28">StaticDialog</name></super>
<block pos:line="44" pos:column="1">{<private type="default" pos:line="44" pos:column="2">
</private><public pos:line="45" pos:column="1">public :
	<constructor><name pos:line="46" pos:column="9">RunMacroDlg</name><parameter_list pos:line="46" pos:column="20">()</parameter_list> <member_list pos:line="46" pos:column="23">: <call><name pos:line="46" pos:column="25">StaticDialog</name><argument_list pos:line="46" pos:column="37">()</argument_list></call><op:operator pos:line="46" pos:column="39">,</op:operator> <call><name pos:line="46" pos:column="41">m_Mode</name><argument_list pos:line="46" pos:column="47">(<argument><expr><name pos:line="46" pos:column="48">RM_RUN_MULTI</name></expr></argument>)</argument_list></call><op:operator pos:line="46" pos:column="61">,</op:operator> <call><name pos:line="46" pos:column="63">m_Times</name><argument_list pos:line="46" pos:column="70">(<argument><expr><lit:literal type="number" pos:line="46" pos:column="71">1</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="46" pos:column="74">{}</block></constructor><empty_stmt pos:line="46" pos:column="76">;</empty_stmt>
	<destructor><name pos:line="47" pos:column="9">~<name pos:line="47" pos:column="10">RunMacroDlg</name></name><parameter_list pos:line="47" pos:column="21">()</parameter_list> <block pos:line="47" pos:column="24">{
	}</block></destructor><empty_stmt pos:line="48" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="50" pos:column="9">void</name></type> <name pos:line="50" pos:column="14">init</name><parameter_list pos:line="50" pos:column="18">(<param><decl><type><name pos:line="50" pos:column="19">HINSTANCE</name></type> <name pos:line="50" pos:column="29">hInst</name></decl></param>, <param><decl><type><name pos:line="50" pos:column="36">HWND</name></type> <name pos:line="50" pos:column="41">hPere</name></decl></param><comment type="block" pos:line="50" pos:column="46">/*, ScintillaEditView **ppEditView*/</comment>)</parameter_list> <block pos:line="50" pos:column="84">{
		<expr_stmt><expr><call><name><name pos:line="51" pos:column="17">Window</name><op:operator pos:line="51" pos:column="23">::</op:operator><name pos:line="51" pos:column="25">init</name></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">hInst</name></expr></argument>, <argument><expr><name pos:line="51" pos:column="37">hPere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function><empty_stmt pos:line="52" pos:column="10">;</empty_stmt>

	<function><type><name pos:line="54" pos:column="9">void</name></type> <name pos:line="54" pos:column="14">doDialog</name><parameter_list pos:line="54" pos:column="22">(<param><decl><type><name pos:line="54" pos:column="23">bool</name></type> <name pos:line="54" pos:column="28">isRTL</name> <init pos:line="54" pos:column="34">= <expr><lit:literal type="boolean" pos:line="54" pos:column="36">false</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="54" pos:column="43">{
		<if pos:line="55" pos:column="17">if <condition pos:line="55" pos:column="20">(<expr><op:operator pos:line="55" pos:column="21">!</op:operator><call><name pos:line="55" pos:column="22">isCreated</name><argument_list pos:line="55" pos:column="31">()</argument_list></call></expr>)</condition><then pos:line="55" pos:column="34">
			<expr_stmt><expr><call><name pos:line="56" pos:column="25">create</name><argument_list pos:line="56" pos:column="31">(<argument><expr><name pos:line="56" pos:column="32">IDD_RUN_MACRO_DLG</name></expr></argument>, <argument><expr><name pos:line="56" pos:column="51">isRTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else pos:line="57" pos:column="17">else
			<expr_stmt><expr><call><name><op:operator pos:line="58" pos:column="25">::</op:operator><name pos:line="58" pos:column="27">ShowWindow</name></name><argument_list pos:line="58" pos:column="37">(<argument><expr><name pos:line="58" pos:column="38">_hSelf</name></expr></argument>, <argument><expr><name pos:line="58" pos:column="46">SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></function><empty_stmt pos:line="59" pos:column="10">;</empty_stmt>

	<function_decl><type><name pos:line="61" pos:column="9">void</name></type> <name pos:line="61" pos:column="14">initMacroList</name><parameter_list pos:line="61" pos:column="27">()</parameter_list>;</function_decl>

	<function><type><name pos:line="63" pos:column="9">int</name></type> <name pos:line="63" pos:column="13">getMode</name><parameter_list pos:line="63" pos:column="20">()</parameter_list> <specifier pos:line="63" pos:column="23">const</specifier> <block pos:line="63" pos:column="29">{<return pos:line="63" pos:column="30">return <expr><name pos:line="63" pos:column="37">m_Mode</name></expr>;</return>}</block></function><empty_stmt pos:line="63" pos:column="45">;</empty_stmt>
	<function><type><name pos:line="64" pos:column="9">int</name></type> <name pos:line="64" pos:column="13">getTimes</name><parameter_list pos:line="64" pos:column="21">()</parameter_list> <specifier pos:line="64" pos:column="24">const</specifier> <block pos:line="64" pos:column="30">{<return pos:line="64" pos:column="31">return <expr><name pos:line="64" pos:column="38">m_Times</name></expr>;</return>}</block></function><empty_stmt pos:line="64" pos:column="47">;</empty_stmt>
	<function_decl><type><name pos:line="65" pos:column="9">int</name></type> <name pos:line="65" pos:column="13">getMacro2Exec</name><parameter_list pos:line="65" pos:column="26">()</parameter_list> <specifier pos:line="65" pos:column="29">const</specifier>;</function_decl>

</public><private pos:line="67" pos:column="1">private :
	<function_decl><type><specifier pos:line="68" pos:column="9">virtual</specifier> <name pos:line="68" pos:column="17">BOOL</name> <name pos:line="68" pos:column="22">CALLBACK</name></type> <name pos:line="68" pos:column="31">run_dlgProc</name><parameter_list pos:line="68" pos:column="42">(<param><decl><type><name pos:line="68" pos:column="43">UINT</name></type> <name pos:line="68" pos:column="48">message</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="57">WPARAM</name></type> <name pos:line="68" pos:column="64">wParam</name></decl></param>, <param><decl><type><name pos:line="68" pos:column="72">LPARAM</name></type> <name pos:line="68" pos:column="79">lParam</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name pos:line="69" pos:column="9">void</name></type> <name pos:line="69" pos:column="14">check</name><parameter_list pos:line="69" pos:column="19">(<param><decl><type><name pos:line="69" pos:column="20">int</name></type></decl></param>)</parameter_list>;</function_decl>

	<decl_stmt><decl><type><name pos:line="71" pos:column="9">int</name></type> <name pos:line="71" pos:column="13">m_Mode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="72" pos:column="9">int</name></type> <name pos:line="72" pos:column="13">m_Times</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="73" pos:column="9">int</name></type> <name pos:line="73" pos:column="13">m_macroIndex</name></decl>;</decl_stmt>
</private>}</block>;</class>

<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif</cpp:directive></cpp:endif> <comment type="line" pos:line="76" pos:column="8">//RUN_MACRO_DLG_H</comment>
</unit>
