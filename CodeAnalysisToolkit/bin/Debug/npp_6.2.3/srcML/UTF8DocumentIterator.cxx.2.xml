<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\boostregex\UTF8DocumentIterator.cxx" pos:tabs="8"><cpp:include pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="1" pos:column="10">"UTF8DocumentIterator.h"</lit:literal></cpp:file></cpp:include>


<function><type><name pos:line="4" pos:column="1">void</name></type> <name><name pos:line="4" pos:column="6">UTF8DocumentIterator</name><op:operator pos:line="4" pos:column="26">::</op:operator><name pos:line="4" pos:column="28">readCharacter</name></name><parameter_list pos:line="4" pos:column="41">()</parameter_list>
<block pos:line="5" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">unsigned</name> <name pos:line="6" pos:column="18">char</name></type> <name pos:line="6" pos:column="23">currentChar</name> <init pos:line="6" pos:column="35">= <expr><call><name><name pos:line="6" pos:column="37">m_doc</name><op:operator pos:line="6" pos:column="42">-&gt;</op:operator><name pos:line="6" pos:column="44">CharAt</name></name><argument_list pos:line="6" pos:column="50">(<argument><expr><name pos:line="6" pos:column="51">m_pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">currentChar</name> <op:operator pos:line="7" pos:column="25">&amp;</op:operator> <lit:literal type="number" pos:line="7" pos:column="27">0x80</lit:literal></expr>)</condition><then pos:line="7" pos:column="32">
	<block pos:line="8" pos:column="9">{
		<decl_stmt><decl><type><name pos:line="9" pos:column="17">int</name></type> <name pos:line="9" pos:column="21">mask</name> <init pos:line="9" pos:column="26">= <expr><lit:literal type="number" pos:line="9" pos:column="28">0x40</lit:literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="10" pos:column="17">int</name></type> <name pos:line="10" pos:column="21">nBytes</name> <init pos:line="10" pos:column="28">= <expr><lit:literal type="number" pos:line="10" pos:column="30">1</lit:literal></expr></init></decl>;</decl_stmt>
			
		<do pos:line="12" pos:column="17">do 
		<block pos:line="13" pos:column="17">{
			<expr_stmt><expr><name pos:line="14" pos:column="25">mask</name> <op:operator pos:line="14" pos:column="30">&gt;&gt;=</op:operator> <lit:literal type="number" pos:line="14" pos:column="34">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="15" pos:column="25">++</op:operator><name pos:line="15" pos:column="27">nBytes</name></expr>;</expr_stmt>
		}</block> while <condition pos:line="16" pos:column="25">(<expr><name pos:line="16" pos:column="26">currentChar</name> <op:operator pos:line="16" pos:column="38">&amp;</op:operator> <name pos:line="16" pos:column="40">mask</name></expr>)</condition>;</do>

		<decl_stmt><decl><type><name pos:line="18" pos:column="17">int</name></type> <name pos:line="18" pos:column="21">result</name> <init pos:line="18" pos:column="28">= <expr><name pos:line="18" pos:column="30">currentChar</name> <op:operator pos:line="18" pos:column="42">&amp;</op:operator> <name><name pos:line="18" pos:column="44">m_firstByteMask</name><index pos:line="18" pos:column="59">[<expr><name pos:line="18" pos:column="60">nBytes</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name pos:line="19" pos:column="17">int</name></type> <name pos:line="19" pos:column="21">pos</name> <init pos:line="19" pos:column="25">= <expr><name pos:line="19" pos:column="27">m_pos</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name pos:line="20" pos:column="17">m_utf8Length</name> <op:operator pos:line="20" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="20" pos:column="32">1</lit:literal></expr>;</expr_stmt>
		<comment type="line" pos:line="21" pos:column="17">// work out the unicode point, and count the actual bytes.</comment>
		<comment type="line" pos:line="22" pos:column="17">// If a byte does not start with 10xxxxxx then it's not part of the </comment>
		<comment type="line" pos:line="23" pos:column="17">// the code. Therefore invalid UTF-8 encodings are dealt with, simply by stopping when </comment>
		<comment type="line" pos:line="24" pos:column="17">// the UTF8 extension bytes are no longer valid.</comment>
		<while pos:line="25" pos:column="17">while <condition pos:line="25" pos:column="23">(<expr><op:operator pos:line="25" pos:column="24">(</op:operator><op:operator pos:line="25" pos:column="25">--</op:operator><name pos:line="25" pos:column="27">nBytes</name><op:operator pos:line="25" pos:column="33">)</op:operator> <op:operator pos:line="25" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="25" pos:column="38">(</op:operator><name pos:line="25" pos:column="39">pos</name> <op:operator pos:line="25" pos:column="43">&lt;</op:operator> <name pos:line="25" pos:column="45">m_end</name><op:operator pos:line="25" pos:column="50">)</op:operator> <op:operator pos:line="25" pos:column="52">&amp;&amp;</op:operator> <op:operator pos:line="25" pos:column="55">(</op:operator><lit:literal type="number" pos:line="25" pos:column="56">0x80</lit:literal> <op:operator pos:line="25" pos:column="61">==</op:operator> <op:operator pos:line="25" pos:column="64">(</op:operator><op:operator pos:line="25" pos:column="65">(</op:operator><name pos:line="25" pos:column="66">currentChar</name> <op:operator pos:line="25" pos:column="78">=</op:operator> <call><name><name pos:line="25" pos:column="80">m_doc</name><op:operator pos:line="25" pos:column="85">-&gt;</op:operator><name pos:line="25" pos:column="87">CharAt</name></name><argument_list pos:line="25" pos:column="93">(<argument><expr><op:operator pos:line="25" pos:column="94">++</op:operator><name pos:line="25" pos:column="96">pos</name></expr></argument>)</argument_list></call><op:operator pos:line="25" pos:column="100">)</op:operator> <op:operator pos:line="25" pos:column="102">&amp;</op:operator> <lit:literal type="number" pos:line="25" pos:column="104">0xC0</lit:literal><op:operator pos:line="25" pos:column="108">)</op:operator><op:operator pos:line="25" pos:column="109">)</op:operator></expr>)</condition>
		<block pos:line="26" pos:column="17">{
			<expr_stmt><expr><name pos:line="27" pos:column="25">result</name> <op:operator pos:line="27" pos:column="32">=</op:operator> <op:operator pos:line="27" pos:column="34">(</op:operator><name pos:line="27" pos:column="35">result</name> <op:operator pos:line="27" pos:column="42">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="27" pos:column="45">6</lit:literal><op:operator pos:line="27" pos:column="46">)</op:operator> <op:operator pos:line="27" pos:column="48">|</op:operator> <op:operator pos:line="27" pos:column="50">(</op:operator><name pos:line="27" pos:column="51">currentChar</name> <op:operator pos:line="27" pos:column="63">&amp;</op:operator> <lit:literal type="number" pos:line="27" pos:column="65">0x3F</lit:literal><op:operator pos:line="27" pos:column="69">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="28" pos:column="25">++</op:operator><name pos:line="28" pos:column="27">m_utf8Length</name></expr>;</expr_stmt>
		}</block></while>

		<if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><name pos:line="31" pos:column="21">result</name> <op:operator pos:line="31" pos:column="28">&gt;=</op:operator> <lit:literal type="number" pos:line="31" pos:column="31">0x10000</lit:literal></expr>)</condition><then pos:line="31" pos:column="39">
		<block pos:line="32" pos:column="17">{
			<expr_stmt><expr><name pos:line="33" pos:column="25">result</name> <op:operator pos:line="33" pos:column="32">-=</op:operator> <lit:literal type="number" pos:line="33" pos:column="35">0x10000</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="34" pos:column="25">m_utf16Length</name> <op:operator pos:line="34" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="34" pos:column="41">2</lit:literal></expr>;</expr_stmt>
			<comment type="line" pos:line="35" pos:column="25">// UTF-16 Pair</comment>
			<expr_stmt><expr><name><name pos:line="36" pos:column="25">m_character</name><index pos:line="36" pos:column="36">[<expr><lit:literal type="number" pos:line="36" pos:column="37">0</lit:literal></expr>]</index></name> <op:operator pos:line="36" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="36" pos:column="42">0xD800</lit:literal> <op:operator pos:line="36" pos:column="49">+</op:operator> <op:operator pos:line="36" pos:column="51">(</op:operator><name pos:line="36" pos:column="52">result</name> <op:operator pos:line="36" pos:column="59">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="36" pos:column="62">10</lit:literal><op:operator pos:line="36" pos:column="64">)</op:operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="37" pos:column="25">m_character</name><index pos:line="37" pos:column="36">[<expr><lit:literal type="number" pos:line="37" pos:column="37">1</lit:literal></expr>]</index></name> <op:operator pos:line="37" pos:column="40">=</op:operator> <lit:literal type="number" pos:line="37" pos:column="42">0xDC00</lit:literal> <op:operator pos:line="37" pos:column="49">+</op:operator> <op:operator pos:line="37" pos:column="51">(</op:operator><name pos:line="37" pos:column="52">result</name> <op:operator pos:line="37" pos:column="59">&amp;</op:operator> <lit:literal type="number" pos:line="37" pos:column="61">0x3FF</lit:literal><op:operator pos:line="37" pos:column="66">)</op:operator></expr>;</expr_stmt>
				
		}</block></then>
		<else pos:line="40" pos:column="17">else
		<block pos:line="41" pos:column="17">{
			<expr_stmt><expr><name pos:line="42" pos:column="25">m_utf16Length</name> <op:operator pos:line="42" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="42" pos:column="41">1</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="43" pos:column="25">m_character</name><index pos:line="43" pos:column="36">[<expr><lit:literal type="number" pos:line="43" pos:column="37">0</lit:literal></expr>]</index></name> <op:operator pos:line="43" pos:column="40">=</op:operator> <call><name><name pos:line="43" pos:column="42">static_cast</name><argument_list pos:line="43" pos:column="53">&lt;<argument><expr><name pos:line="43" pos:column="54">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="43" pos:column="62">(<argument><expr><name pos:line="43" pos:column="63">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then>
	<else pos:line="46" pos:column="9">else
	<block pos:line="47" pos:column="9">{
		<expr_stmt><expr><name pos:line="48" pos:column="17">m_utf8Length</name> <op:operator pos:line="48" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="48" pos:column="32">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="49" pos:column="17">m_utf16Length</name> <op:operator pos:line="49" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="49" pos:column="33">1</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="50" pos:column="17">m_characterIndex</name> <op:operator pos:line="50" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="50" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="51" pos:column="17">m_character</name><index pos:line="51" pos:column="28">[<expr><lit:literal type="number" pos:line="51" pos:column="29">0</lit:literal></expr>]</index></name> <op:operator pos:line="51" pos:column="32">=</op:operator> <call><name><name pos:line="51" pos:column="34">static_cast</name><argument_list pos:line="51" pos:column="45">&lt;<argument><expr><name pos:line="51" pos:column="46">wchar_t</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="51" pos:column="54">(<argument><expr><name pos:line="51" pos:column="55">currentChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>
		
		
<decl_stmt><decl><type><specifier pos:line="56" pos:column="1">const</specifier> <name pos:line="56" pos:column="7">unsigned</name> <name pos:line="56" pos:column="16">char</name></type> <name><name pos:line="56" pos:column="21">UTF8DocumentIterator</name><op:operator pos:line="56" pos:column="41">::</op:operator><name pos:line="56" pos:column="43">m_firstByteMask</name><index pos:line="56" pos:column="58">[<expr><lit:literal type="number" pos:line="56" pos:column="59">7</lit:literal></expr>]</index></name> <init pos:line="56" pos:column="62">= <expr><block pos:line="56" pos:column="64">{ <expr><lit:literal type="number" pos:line="56" pos:column="66">0x7F</lit:literal></expr>, <expr><lit:literal type="number" pos:line="56" pos:column="72">0x3F</lit:literal></expr>, <expr><lit:literal type="number" pos:line="56" pos:column="78">0x1F</lit:literal></expr>, <expr><lit:literal type="number" pos:line="56" pos:column="84">0x0F</lit:literal></expr>, <expr><lit:literal type="number" pos:line="56" pos:column="90">0x07</lit:literal></expr>, <expr><lit:literal type="number" pos:line="56" pos:column="96">0x03</lit:literal></expr>, <expr><lit:literal type="number" pos:line="56" pos:column="102">0x01</lit:literal></expr> }</block></expr></init></decl>;</decl_stmt>
		</unit>
