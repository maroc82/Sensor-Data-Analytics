<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\WordList.cxx" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file KeyWords.cxx
 ** Colourise for particular languages.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2002 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:include pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">include</cpp:directive> <cpp:file pos:line="8" pos:column="10">&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">include</cpp:directive> <cpp:file pos:line="9" pos:column="10">&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">include</cpp:directive> <cpp:file pos:line="10" pos:column="10">&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">include</cpp:directive> <cpp:file pos:line="11" pos:column="10">&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">include</cpp:directive> <cpp:file pos:line="12" pos:column="10">&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="14" pos:column="10">"WordList.h"</lit:literal></cpp:file></cpp:include>

<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef</cpp:directive> <name pos:line="16" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<using pos:line="17" pos:column="1">using namespace <name pos:line="17" pos:column="17">Scintilla</name>;</using>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen" pos:line="20" pos:column="1">/**
 * Creates an array that points into each word in the string and puts \0 terminators
 * after each word.
 */</comment>
<function><type><specifier pos:line="24" pos:column="1">static</specifier> <name pos:line="24" pos:column="8">char</name> <type:modifier pos:line="24" pos:column="13">*</type:modifier><type:modifier pos:line="24" pos:column="14">*</type:modifier></type><name pos:line="24" pos:column="15">ArrayFromWordList</name><parameter_list pos:line="24" pos:column="32">(<param><decl><type><name pos:line="24" pos:column="33">char</name> <type:modifier pos:line="24" pos:column="38">*</type:modifier></type><name pos:line="24" pos:column="39">wordlist</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="49">int</name> <type:modifier pos:line="24" pos:column="53">*</type:modifier></type><name pos:line="24" pos:column="54">len</name></decl></param>, <param><decl><type><name pos:line="24" pos:column="59">bool</name></type> <name pos:line="24" pos:column="64">onlyLineEnds</name> <init pos:line="24" pos:column="77">= <expr><lit:literal type="boolean" pos:line="24" pos:column="79">false</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="24" pos:column="86">{
	<decl_stmt><decl><type><name pos:line="25" pos:column="9">int</name></type> <name pos:line="25" pos:column="13">prev</name> <init pos:line="25" pos:column="18">= <expr><lit:literal type="char" pos:line="25" pos:column="20">'\n'</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">int</name></type> <name pos:line="26" pos:column="13">words</name> <init pos:line="26" pos:column="19">= <expr><lit:literal type="number" pos:line="26" pos:column="21">0</lit:literal></expr></init></decl>;</decl_stmt>
	<comment type="line" pos:line="27" pos:column="9">// For rapid determination of whether a character is a separator, build</comment>
	<comment type="line" pos:line="28" pos:column="9">// a look up table.</comment>
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">bool</name></type> <name><name pos:line="29" pos:column="14">wordSeparator</name><index pos:line="29" pos:column="27">[<expr><lit:literal type="number" pos:line="29" pos:column="28">256</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<for pos:line="30" pos:column="9">for (<init><decl><type><name pos:line="30" pos:column="14">int</name></type> <name pos:line="30" pos:column="18">i</name><init pos:line="30" pos:column="19">=<expr><lit:literal type="number" pos:line="30" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="30" pos:column="23">i</name><op:operator pos:line="30" pos:column="24">&lt;</op:operator><lit:literal type="number" pos:line="30" pos:column="25">256</lit:literal></expr>;</condition> <incr><expr><name pos:line="30" pos:column="30">i</name><op:operator pos:line="30" pos:column="31">++</op:operator></expr></incr>) <block pos:line="30" pos:column="35">{
		<expr_stmt><expr><name><name pos:line="31" pos:column="17">wordSeparator</name><index pos:line="31" pos:column="30">[<expr><name pos:line="31" pos:column="31">i</name></expr>]</index></name> <op:operator pos:line="31" pos:column="34">=</op:operator> <lit:literal type="boolean" pos:line="31" pos:column="36">false</lit:literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name pos:line="33" pos:column="9">wordSeparator</name><index pos:line="33" pos:column="22">[<expr><lit:literal type="char" pos:line="33" pos:column="23">'\r'</lit:literal></expr>]</index></name> <op:operator pos:line="33" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="33" pos:column="31">true</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="34" pos:column="9">wordSeparator</name><index pos:line="34" pos:column="22">[<expr><lit:literal type="char" pos:line="34" pos:column="23">'\n'</lit:literal></expr>]</index></name> <op:operator pos:line="34" pos:column="29">=</op:operator> <lit:literal type="boolean" pos:line="34" pos:column="31">true</lit:literal></expr>;</expr_stmt>
	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><op:operator pos:line="35" pos:column="13">!</op:operator><name pos:line="35" pos:column="14">onlyLineEnds</name></expr>)</condition><then pos:line="35" pos:column="27"> <block pos:line="35" pos:column="28">{
		<expr_stmt><expr><name><name pos:line="36" pos:column="17">wordSeparator</name><index pos:line="36" pos:column="30">[<expr><lit:literal type="char" pos:line="36" pos:column="31">' '</lit:literal></expr>]</index></name> <op:operator pos:line="36" pos:column="36">=</op:operator> <lit:literal type="boolean" pos:line="36" pos:column="38">true</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="37" pos:column="17">wordSeparator</name><index pos:line="37" pos:column="30">[<expr><lit:literal type="char" pos:line="37" pos:column="31">'\t'</lit:literal></expr>]</index></name> <op:operator pos:line="37" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="37" pos:column="39">true</lit:literal></expr>;</expr_stmt>
	}</block></then></if>
	<for pos:line="39" pos:column="9">for (<init><decl><type><name pos:line="39" pos:column="14">int</name></type> <name pos:line="39" pos:column="18">j</name> <init pos:line="39" pos:column="20">= <expr><lit:literal type="number" pos:line="39" pos:column="22">0</lit:literal></expr></init></decl>;</init> <condition><expr><name><name pos:line="39" pos:column="25">wordlist</name><index pos:line="39" pos:column="33">[<expr><name pos:line="39" pos:column="34">j</name></expr>]</index></name></expr>;</condition> <incr><expr><name pos:line="39" pos:column="38">j</name><op:operator pos:line="39" pos:column="39">++</op:operator></expr></incr>) <block pos:line="39" pos:column="43">{
		<decl_stmt><decl><type><name pos:line="40" pos:column="17">int</name></type> <name pos:line="40" pos:column="21">curr</name> <init pos:line="40" pos:column="26">= <expr><call><name><name pos:line="40" pos:column="28">static_cast</name><argument_list pos:line="40" pos:column="39">&lt;<argument><expr><name pos:line="40" pos:column="40">unsigned</name> <name pos:line="40" pos:column="49">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="40" pos:column="54">(<argument><expr><name><name pos:line="40" pos:column="55">wordlist</name><index pos:line="40" pos:column="63">[<expr><name pos:line="40" pos:column="64">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><op:operator pos:line="41" pos:column="21">!</op:operator><name><name pos:line="41" pos:column="22">wordSeparator</name><index pos:line="41" pos:column="35">[<expr><name pos:line="41" pos:column="36">curr</name></expr>]</index></name> <op:operator pos:line="41" pos:column="42">&amp;&amp;</op:operator> <name><name pos:line="41" pos:column="45">wordSeparator</name><index pos:line="41" pos:column="58">[<expr><name pos:line="41" pos:column="59">prev</name></expr>]</index></name></expr>)</condition><then pos:line="41" pos:column="65">
			<expr_stmt><expr><name pos:line="42" pos:column="25">words</name><op:operator pos:line="42" pos:column="30">++</op:operator></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="43" pos:column="17">prev</name> <op:operator pos:line="43" pos:column="22">=</op:operator> <name pos:line="43" pos:column="24">curr</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name pos:line="45" pos:column="9">char</name> <type:modifier pos:line="45" pos:column="14">*</type:modifier><type:modifier pos:line="45" pos:column="15">*</type:modifier></type><name pos:line="45" pos:column="16">keywords</name> <init pos:line="45" pos:column="25">= <expr><op:operator pos:line="45" pos:column="27">new</op:operator> <name pos:line="45" pos:column="31">char</name> <op:operator pos:line="45" pos:column="36">*</op:operator><index pos:line="45" pos:column="37">[<expr><name pos:line="45" pos:column="38">words</name> <op:operator pos:line="45" pos:column="44">+</op:operator> <lit:literal type="number" pos:line="45" pos:column="46">1</lit:literal></expr>]</index></expr></init></decl>;</decl_stmt>
	<if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">keywords</name></expr>)</condition><then pos:line="46" pos:column="22"> <block pos:line="46" pos:column="23">{
		<expr_stmt><expr><name pos:line="47" pos:column="17">words</name> <op:operator pos:line="47" pos:column="23">=</op:operator> <lit:literal type="number" pos:line="47" pos:column="25">0</lit:literal></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="48" pos:column="17">prev</name> <op:operator pos:line="48" pos:column="22">=</op:operator> <lit:literal type="char" pos:line="48" pos:column="24">'\0'</lit:literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="49" pos:column="17">size_t</name></type> <name pos:line="49" pos:column="24">slen</name> <init pos:line="49" pos:column="29">= <expr><call><name pos:line="49" pos:column="31">strlen</name><argument_list pos:line="49" pos:column="37">(<argument><expr><name pos:line="49" pos:column="38">wordlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for pos:line="50" pos:column="17">for (<init><decl><type><name pos:line="50" pos:column="22">size_t</name></type> <name pos:line="50" pos:column="29">k</name> <init pos:line="50" pos:column="31">= <expr><lit:literal type="number" pos:line="50" pos:column="33">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="50" pos:column="36">k</name> <op:operator pos:line="50" pos:column="38">&lt;</op:operator> <name pos:line="50" pos:column="40">slen</name></expr>;</condition> <incr><expr><name pos:line="50" pos:column="46">k</name><op:operator pos:line="50" pos:column="47">++</op:operator></expr></incr>) <block pos:line="50" pos:column="51">{
			<if pos:line="51" pos:column="25">if <condition pos:line="51" pos:column="28">(<expr><op:operator pos:line="51" pos:column="29">!</op:operator><name><name pos:line="51" pos:column="30">wordSeparator</name><index pos:line="51" pos:column="43">[<expr><call><name><name pos:line="51" pos:column="44">static_cast</name><argument_list pos:line="51" pos:column="55">&lt;<argument><expr><name pos:line="51" pos:column="56">unsigned</name> <name pos:line="51" pos:column="65">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="51" pos:column="70">(<argument><expr><name><name pos:line="51" pos:column="71">wordlist</name><index pos:line="51" pos:column="79">[<expr><name pos:line="51" pos:column="80">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then pos:line="51" pos:column="85"> <block pos:line="51" pos:column="86">{
				<if pos:line="52" pos:column="33">if <condition pos:line="52" pos:column="36">(<expr><op:operator pos:line="52" pos:column="37">!</op:operator><name pos:line="52" pos:column="38">prev</name></expr>)</condition><then pos:line="52" pos:column="43"> <block pos:line="52" pos:column="44">{
					<expr_stmt><expr><name><name pos:line="53" pos:column="41">keywords</name><index pos:line="53" pos:column="49">[<expr><name pos:line="53" pos:column="50">words</name></expr>]</index></name> <op:operator pos:line="53" pos:column="57">=</op:operator> <op:operator pos:line="53" pos:column="59">&amp;</op:operator><name><name pos:line="53" pos:column="60">wordlist</name><index pos:line="53" pos:column="68">[<expr><name pos:line="53" pos:column="69">k</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="54" pos:column="41">words</name><op:operator pos:line="54" pos:column="46">++</op:operator></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then> <else pos:line="56" pos:column="27">else <block pos:line="56" pos:column="32">{
				<expr_stmt><expr><name><name pos:line="57" pos:column="33">wordlist</name><index pos:line="57" pos:column="41">[<expr><name pos:line="57" pos:column="42">k</name></expr>]</index></name> <op:operator pos:line="57" pos:column="45">=</op:operator> <lit:literal type="char" pos:line="57" pos:column="47">'\0'</lit:literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name pos:line="59" pos:column="25">prev</name> <op:operator pos:line="59" pos:column="30">=</op:operator> <name><name pos:line="59" pos:column="32">wordlist</name><index pos:line="59" pos:column="40">[<expr><name pos:line="59" pos:column="41">k</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name pos:line="61" pos:column="17">keywords</name><index pos:line="61" pos:column="25">[<expr><name pos:line="61" pos:column="26">words</name></expr>]</index></name> <op:operator pos:line="61" pos:column="33">=</op:operator> <op:operator pos:line="61" pos:column="35">&amp;</op:operator><name><name pos:line="61" pos:column="36">wordlist</name><index pos:line="61" pos:column="44">[<expr><name pos:line="61" pos:column="45">slen</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="62" pos:column="17">*</op:operator><name pos:line="62" pos:column="18">len</name> <op:operator pos:line="62" pos:column="22">=</op:operator> <name pos:line="62" pos:column="24">words</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="63" pos:column="11">else <block pos:line="63" pos:column="16">{
		<expr_stmt><expr><op:operator pos:line="64" pos:column="17">*</op:operator><name pos:line="64" pos:column="18">len</name> <op:operator pos:line="64" pos:column="22">=</op:operator> <lit:literal type="number" pos:line="64" pos:column="24">0</lit:literal></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">keywords</name></expr>;</return>
}</block></function>

<function><type><name pos:line="69" pos:column="1">bool</name></type> <name><name pos:line="69" pos:column="6">WordList</name><op:operator pos:line="69" pos:column="14">::</op:operator><name pos:line="69" pos:column="16">operator!=</name></name><parameter_list pos:line="69" pos:column="26">(<param><decl><type><specifier pos:line="69" pos:column="27">const</specifier> <name pos:line="69" pos:column="33">WordList</name> <type:modifier pos:line="69" pos:column="42">&amp;</type:modifier></type><name pos:line="69" pos:column="43">other</name></decl></param>)</parameter_list> <specifier pos:line="69" pos:column="50">const</specifier> <block pos:line="69" pos:column="56">{
	<if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">len</name> <op:operator pos:line="70" pos:column="17">!=</op:operator> <name><name pos:line="70" pos:column="20">other</name><op:operator pos:line="70" pos:column="25">.</op:operator><name pos:line="70" pos:column="26">len</name></name></expr>)</condition><then pos:line="70" pos:column="30">
		<return pos:line="71" pos:column="17">return <expr><lit:literal type="boolean" pos:line="71" pos:column="24">true</lit:literal></expr>;</return></then></if>
	<for pos:line="72" pos:column="9">for (<init><decl><type><name pos:line="72" pos:column="14">int</name></type> <name pos:line="72" pos:column="18">i</name><init pos:line="72" pos:column="19">=<expr><lit:literal type="number" pos:line="72" pos:column="20">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="72" pos:column="23">i</name><op:operator pos:line="72" pos:column="24">&lt;</op:operator><name pos:line="72" pos:column="25">len</name></expr>;</condition> <incr><expr><name pos:line="72" pos:column="30">i</name><op:operator pos:line="72" pos:column="31">++</op:operator></expr></incr>) <block pos:line="72" pos:column="35">{
		<if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><call><name pos:line="73" pos:column="21">strcmp</name><argument_list pos:line="73" pos:column="27">(<argument><expr><name><name pos:line="73" pos:column="28">words</name><index pos:line="73" pos:column="33">[<expr><name pos:line="73" pos:column="34">i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="38">other</name><op:operator pos:line="73" pos:column="43">.</op:operator><name pos:line="73" pos:column="44">words</name><index pos:line="73" pos:column="49">[<expr><name pos:line="73" pos:column="50">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <op:operator pos:line="73" pos:column="54">!=</op:operator> <lit:literal type="number" pos:line="73" pos:column="57">0</lit:literal></expr>)</condition><then pos:line="73" pos:column="59">
			<return pos:line="74" pos:column="25">return <expr><lit:literal type="boolean" pos:line="74" pos:column="32">true</lit:literal></expr>;</return></then></if>
	}</block></for>
	<return pos:line="76" pos:column="9">return <expr><lit:literal type="boolean" pos:line="76" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="79" pos:column="1">void</name></type> <name><name pos:line="79" pos:column="6">WordList</name><op:operator pos:line="79" pos:column="14">::</op:operator><name pos:line="79" pos:column="16">Clear</name></name><parameter_list pos:line="79" pos:column="21">()</parameter_list> <block pos:line="79" pos:column="24">{
	<if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><name pos:line="80" pos:column="13">words</name></expr>)</condition><then pos:line="80" pos:column="19"> <block pos:line="80" pos:column="20">{
		<expr_stmt><expr><op:operator pos:line="81" pos:column="17">delete</op:operator> <index pos:line="81" pos:column="24">[]</index><name pos:line="81" pos:column="26">list</name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="82" pos:column="17">delete</op:operator> <index pos:line="82" pos:column="24">[]</index><name pos:line="82" pos:column="26">words</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="84" pos:column="9">words</name> <op:operator pos:line="84" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="84" pos:column="17">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="85" pos:column="9">list</name> <op:operator pos:line="85" pos:column="14">=</op:operator> <lit:literal type="number" pos:line="85" pos:column="16">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="86" pos:column="9">len</name> <op:operator pos:line="86" pos:column="13">=</op:operator> <lit:literal type="number" pos:line="86" pos:column="15">0</lit:literal></expr>;</expr_stmt>
}</block></function>

<extern pos:line="89" pos:column="1">extern <lit:literal type="string" pos:line="89" pos:column="8">"C"</lit:literal> <function><type><name pos:line="89" pos:column="12">int</name></type> <name pos:line="89" pos:column="16">cmpString</name><parameter_list pos:line="89" pos:column="25">(<param><decl><type><specifier pos:line="89" pos:column="26">const</specifier> <name pos:line="89" pos:column="32">void</name> <type:modifier pos:line="89" pos:column="37">*</type:modifier></type><name pos:line="89" pos:column="38">a1</name></decl></param>, <param><decl><type><specifier pos:line="89" pos:column="42">const</specifier> <name pos:line="89" pos:column="48">void</name> <type:modifier pos:line="89" pos:column="53">*</type:modifier></type><name pos:line="89" pos:column="54">a2</name></decl></param>)</parameter_list> <block pos:line="89" pos:column="58">{
	<comment type="line" pos:line="90" pos:column="9">// Can't work out the correct incantation to use modern casts here</comment>
	<return pos:line="91" pos:column="9">return <expr><call><name pos:line="91" pos:column="16">strcmp</name><argument_list pos:line="91" pos:column="22">(<argument><expr><op:operator pos:line="91" pos:column="23">*</op:operator><op:operator pos:line="91" pos:column="24">(</op:operator><name pos:line="91" pos:column="25">char</name> <op:operator pos:line="91" pos:column="30">*</op:operator><op:operator pos:line="91" pos:column="31">*</op:operator><op:operator pos:line="91" pos:column="32">)</op:operator><op:operator pos:line="91" pos:column="33">(</op:operator><name pos:line="91" pos:column="34">a1</name><op:operator pos:line="91" pos:column="36">)</op:operator></expr></argument>, <argument><expr><op:operator pos:line="91" pos:column="39">*</op:operator><op:operator pos:line="91" pos:column="40">(</op:operator><name pos:line="91" pos:column="41">char</name> <op:operator pos:line="91" pos:column="46">*</op:operator><op:operator pos:line="91" pos:column="47">*</op:operator><op:operator pos:line="91" pos:column="48">)</op:operator><op:operator pos:line="91" pos:column="49">(</op:operator><name pos:line="91" pos:column="50">a2</name><op:operator pos:line="91" pos:column="52">)</op:operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function></extern>

<function><type><specifier pos:line="94" pos:column="1">static</specifier> <name pos:line="94" pos:column="8">void</name></type> <name pos:line="94" pos:column="13">SortWordList</name><parameter_list pos:line="94" pos:column="25">(<param><decl><type><name pos:line="94" pos:column="26">char</name> <type:modifier pos:line="94" pos:column="31">*</type:modifier><type:modifier pos:line="94" pos:column="32">*</type:modifier></type><name pos:line="94" pos:column="33">words</name></decl></param>, <param><decl><type><name pos:line="94" pos:column="40">unsigned</name> <name pos:line="94" pos:column="49">int</name></type> <name pos:line="94" pos:column="53">len</name></decl></param>)</parameter_list> <block pos:line="94" pos:column="58">{
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">qsort</name><argument_list pos:line="95" pos:column="14">(<argument><expr><call><name><name pos:line="95" pos:column="15">reinterpret_cast</name><argument_list pos:line="95" pos:column="31">&lt;<argument><expr><name pos:line="95" pos:column="32">void</name> <op:operator pos:line="95" pos:column="37">*</op:operator></expr></argument>&gt;</argument_list></name><argument_list pos:line="95" pos:column="39">(<argument><expr><name pos:line="95" pos:column="40">words</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="95" pos:column="48">len</name></expr></argument>, <argument><expr><sizeof pos:line="95" pos:column="53">sizeof<argument_list pos:line="95" pos:column="59">(<argument><expr><op:operator pos:line="95" pos:column="60">*</op:operator><name pos:line="95" pos:column="61">words</name></expr></argument>)</argument_list></sizeof></expr></argument>,
	      <argument><expr><name pos:line="96" pos:column="15">cmpString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="99" pos:column="1">void</name></type> <name><name pos:line="99" pos:column="6">WordList</name><op:operator pos:line="99" pos:column="14">::</op:operator><name pos:line="99" pos:column="16">Set</name></name><parameter_list pos:line="99" pos:column="19">(<param><decl><type><specifier pos:line="99" pos:column="20">const</specifier> <name pos:line="99" pos:column="26">char</name> <type:modifier pos:line="99" pos:column="31">*</type:modifier></type><name pos:line="99" pos:column="32">s</name></decl></param>)</parameter_list> <block pos:line="99" pos:column="35">{
	<expr_stmt><expr><call><name pos:line="100" pos:column="9">Clear</name><argument_list pos:line="100" pos:column="14">()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="101" pos:column="9">list</name> <op:operator pos:line="101" pos:column="14">=</op:operator> <op:operator pos:line="101" pos:column="16">new</op:operator> <name><name pos:line="101" pos:column="20">char</name><index pos:line="101" pos:column="24">[<expr><call><name pos:line="101" pos:column="25">strlen</name><argument_list pos:line="101" pos:column="31">(<argument><expr><name pos:line="101" pos:column="32">s</name></expr></argument>)</argument_list></call> <op:operator pos:line="101" pos:column="35">+</op:operator> <lit:literal type="number" pos:line="101" pos:column="37">1</lit:literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="102" pos:column="9">strcpy</name><argument_list pos:line="102" pos:column="15">(<argument><expr><name pos:line="102" pos:column="16">list</name></expr></argument>, <argument><expr><name pos:line="102" pos:column="22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="103" pos:column="9">words</name> <op:operator pos:line="103" pos:column="15">=</op:operator> <call><name pos:line="103" pos:column="17">ArrayFromWordList</name><argument_list pos:line="103" pos:column="34">(<argument><expr><name pos:line="103" pos:column="35">list</name></expr></argument>, <argument><expr><op:operator pos:line="103" pos:column="41">&amp;</op:operator><name pos:line="103" pos:column="42">len</name></expr></argument>, <argument><expr><name pos:line="103" pos:column="47">onlyLineEnds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="104" pos:column="9">SortWordList</name><argument_list pos:line="104" pos:column="21">(<argument><expr><name pos:line="104" pos:column="22">words</name></expr></argument>, <argument><expr><name pos:line="104" pos:column="29">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for pos:line="105" pos:column="9">for (<init><decl><type><name pos:line="105" pos:column="14">unsigned</name> <name pos:line="105" pos:column="23">int</name></type> <name pos:line="105" pos:column="27">k</name> <init pos:line="105" pos:column="29">= <expr><lit:literal type="number" pos:line="105" pos:column="31">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="105" pos:column="34">k</name> <op:operator pos:line="105" pos:column="36">&lt;</op:operator> <op:operator pos:line="105" pos:column="38">(</op:operator><sizeof pos:line="105" pos:column="39">sizeof<argument_list pos:line="105" pos:column="45">(<argument><expr><name pos:line="105" pos:column="46">starts</name></expr></argument>)</argument_list></sizeof> <op:operator pos:line="105" pos:column="54">/</op:operator> <sizeof pos:line="105" pos:column="56">sizeof<argument_list pos:line="105" pos:column="62">(<argument><expr><name><name pos:line="105" pos:column="63">starts</name><index pos:line="105" pos:column="69">[<expr><lit:literal type="number" pos:line="105" pos:column="70">0</lit:literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><op:operator pos:line="105" pos:column="73">)</op:operator></expr>;</condition> <incr><expr><name pos:line="105" pos:column="76">k</name><op:operator pos:line="105" pos:column="77">++</op:operator></expr></incr>)
		<expr_stmt><expr><name><name pos:line="106" pos:column="17">starts</name><index pos:line="106" pos:column="23">[<expr><name pos:line="106" pos:column="24">k</name></expr>]</index></name> <op:operator pos:line="106" pos:column="27">=</op:operator> <op:operator pos:line="106" pos:column="29">-</op:operator><lit:literal type="number" pos:line="106" pos:column="30">1</lit:literal></expr>;</expr_stmt></for>
	<for pos:line="107" pos:column="9">for (<init><decl><type><name pos:line="107" pos:column="14">int</name></type> <name pos:line="107" pos:column="18">l</name> <init pos:line="107" pos:column="20">= <expr><name pos:line="107" pos:column="22">len</name> <op:operator pos:line="107" pos:column="26">-</op:operator> <lit:literal type="number" pos:line="107" pos:column="28">1</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="107" pos:column="31">l</name> <op:operator pos:line="107" pos:column="33">&gt;=</op:operator> <lit:literal type="number" pos:line="107" pos:column="36">0</lit:literal></expr>;</condition> <incr><expr><name pos:line="107" pos:column="39">l</name><op:operator pos:line="107" pos:column="40">--</op:operator></expr></incr>) <block pos:line="107" pos:column="44">{
		<decl_stmt><decl><type><name pos:line="108" pos:column="17">unsigned</name> <name pos:line="108" pos:column="26">char</name></type> <name pos:line="108" pos:column="31">indexChar</name> <init pos:line="108" pos:column="41">= <expr><name><name pos:line="108" pos:column="43">words</name><index pos:line="108" pos:column="48">[<expr><name pos:line="108" pos:column="49">l</name></expr>]</index><index pos:line="108" pos:column="51">[<expr><lit:literal type="number" pos:line="108" pos:column="52">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name pos:line="109" pos:column="17">starts</name><index pos:line="109" pos:column="23">[<expr><name pos:line="109" pos:column="24">indexChar</name></expr>]</index></name> <op:operator pos:line="109" pos:column="35">=</op:operator> <name pos:line="109" pos:column="37">l</name></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<comment type="block" format="doxygen" pos:line="113" pos:column="1">/** Check whether a string is in the list.
 * List elements are either exact matches or prefixes.
 * Prefix elements start with '^' and match all strings that start with the rest of the element
 * so '^GTK_' matches 'GTK_X', 'GTK_MAJOR_VERSION', and 'GTK_'.
 */</comment>
<function><type><name pos:line="118" pos:column="1">bool</name></type> <name><name pos:line="118" pos:column="6">WordList</name><op:operator pos:line="118" pos:column="14">::</op:operator><name pos:line="118" pos:column="16">InList</name></name><parameter_list pos:line="118" pos:column="22">(<param><decl><type><specifier pos:line="118" pos:column="23">const</specifier> <name pos:line="118" pos:column="29">char</name> <type:modifier pos:line="118" pos:column="34">*</type:modifier></type><name pos:line="118" pos:column="35">s</name></decl></param>)</parameter_list> <specifier pos:line="118" pos:column="38">const</specifier> <block pos:line="118" pos:column="44">{
	<if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><lit:literal type="number" pos:line="119" pos:column="13">0</lit:literal> <op:operator pos:line="119" pos:column="15">==</op:operator> <name pos:line="119" pos:column="18">words</name></expr>)</condition><then pos:line="119" pos:column="24">
		<return pos:line="120" pos:column="17">return <expr><lit:literal type="boolean" pos:line="120" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="121" pos:column="9">unsigned</name> <name pos:line="121" pos:column="18">char</name></type> <name pos:line="121" pos:column="23">firstChar</name> <init pos:line="121" pos:column="33">= <expr><name><name pos:line="121" pos:column="35">s</name><index pos:line="121" pos:column="36">[<expr><lit:literal type="number" pos:line="121" pos:column="37">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="122" pos:column="9">int</name></type> <name pos:line="122" pos:column="13">j</name> <init pos:line="122" pos:column="15">= <expr><name><name pos:line="122" pos:column="17">starts</name><index pos:line="122" pos:column="23">[<expr><name pos:line="122" pos:column="24">firstChar</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><name pos:line="123" pos:column="13">j</name> <op:operator pos:line="123" pos:column="15">&gt;=</op:operator> <lit:literal type="number" pos:line="123" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="123" pos:column="20"> <block pos:line="123" pos:column="21">{
		<while pos:line="124" pos:column="17">while <condition pos:line="124" pos:column="23">(<expr><op:operator pos:line="124" pos:column="24">(</op:operator><name pos:line="124" pos:column="25">unsigned</name> <name pos:line="124" pos:column="34">char</name><op:operator pos:line="124" pos:column="38">)</op:operator><name><name pos:line="124" pos:column="39">words</name><index pos:line="124" pos:column="44">[<expr><name pos:line="124" pos:column="45">j</name></expr>]</index><index pos:line="124" pos:column="47">[<expr><lit:literal type="number" pos:line="124" pos:column="48">0</lit:literal></expr>]</index></name> <op:operator pos:line="124" pos:column="51">==</op:operator> <name pos:line="124" pos:column="54">firstChar</name></expr>)</condition> <block pos:line="124" pos:column="65">{
			<if pos:line="125" pos:column="25">if <condition pos:line="125" pos:column="28">(<expr><name><name pos:line="125" pos:column="29">s</name><index pos:line="125" pos:column="30">[<expr><lit:literal type="number" pos:line="125" pos:column="31">1</lit:literal></expr>]</index></name> <op:operator pos:line="125" pos:column="34">==</op:operator> <name><name pos:line="125" pos:column="37">words</name><index pos:line="125" pos:column="42">[<expr><name pos:line="125" pos:column="43">j</name></expr>]</index><index pos:line="125" pos:column="45">[<expr><lit:literal type="number" pos:line="125" pos:column="46">1</lit:literal></expr>]</index></name></expr>)</condition><then pos:line="125" pos:column="49"> <block pos:line="125" pos:column="50">{
				<decl_stmt><decl><type><specifier pos:line="126" pos:column="33">const</specifier> <name pos:line="126" pos:column="39">char</name> <type:modifier pos:line="126" pos:column="44">*</type:modifier></type><name pos:line="126" pos:column="45">a</name> <init pos:line="126" pos:column="47">= <expr><name><name pos:line="126" pos:column="49">words</name><index pos:line="126" pos:column="54">[<expr><name pos:line="126" pos:column="55">j</name></expr>]</index></name> <op:operator pos:line="126" pos:column="58">+</op:operator> <lit:literal type="number" pos:line="126" pos:column="60">1</lit:literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="127" pos:column="33">const</specifier> <name pos:line="127" pos:column="39">char</name> <type:modifier pos:line="127" pos:column="44">*</type:modifier></type><name pos:line="127" pos:column="45">b</name> <init pos:line="127" pos:column="47">= <expr><name pos:line="127" pos:column="49">s</name> <op:operator pos:line="127" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="127" pos:column="53">1</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="128" pos:column="33">while <condition pos:line="128" pos:column="39">(<expr><op:operator pos:line="128" pos:column="40">*</op:operator><name pos:line="128" pos:column="41">a</name> <op:operator pos:line="128" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="128" pos:column="46">*</op:operator><name pos:line="128" pos:column="47">a</name> <op:operator pos:line="128" pos:column="49">==</op:operator> <op:operator pos:line="128" pos:column="52">*</op:operator><name pos:line="128" pos:column="53">b</name></expr>)</condition> <block pos:line="128" pos:column="56">{
					<expr_stmt><expr><name pos:line="129" pos:column="41">a</name><op:operator pos:line="129" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="130" pos:column="41">b</name><op:operator pos:line="130" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="132" pos:column="33">if <condition pos:line="132" pos:column="36">(<expr><op:operator pos:line="132" pos:column="37">!</op:operator><op:operator pos:line="132" pos:column="38">*</op:operator><name pos:line="132" pos:column="39">a</name> <op:operator pos:line="132" pos:column="41">&amp;&amp;</op:operator> <op:operator pos:line="132" pos:column="44">!</op:operator><op:operator pos:line="132" pos:column="45">*</op:operator><name pos:line="132" pos:column="46">b</name></expr>)</condition><then pos:line="132" pos:column="48">
					<return pos:line="133" pos:column="41">return <expr><lit:literal type="boolean" pos:line="133" pos:column="48">true</lit:literal></expr>;</return></then></if>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="135" pos:column="25">j</name><op:operator pos:line="135" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="138" pos:column="9">j</name> <op:operator pos:line="138" pos:column="11">=</op:operator> <name><name pos:line="138" pos:column="13">starts</name><index pos:line="138" pos:column="19">[<expr><lit:literal type="char" pos:line="138" pos:column="20">'^'</lit:literal></expr>]</index></name></expr>;</expr_stmt>
	<if pos:line="139" pos:column="9">if <condition pos:line="139" pos:column="12">(<expr><name pos:line="139" pos:column="13">j</name> <op:operator pos:line="139" pos:column="15">&gt;=</op:operator> <lit:literal type="number" pos:line="139" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="139" pos:column="20"> <block pos:line="139" pos:column="21">{
		<while pos:line="140" pos:column="17">while <condition pos:line="140" pos:column="23">(<expr><name><name pos:line="140" pos:column="24">words</name><index pos:line="140" pos:column="29">[<expr><name pos:line="140" pos:column="30">j</name></expr>]</index><index pos:line="140" pos:column="32">[<expr><lit:literal type="number" pos:line="140" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="140" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="140" pos:column="39">'^'</lit:literal></expr>)</condition> <block pos:line="140" pos:column="44">{
			<decl_stmt><decl><type><specifier pos:line="141" pos:column="25">const</specifier> <name pos:line="141" pos:column="31">char</name> <type:modifier pos:line="141" pos:column="36">*</type:modifier></type><name pos:line="141" pos:column="37">a</name> <init pos:line="141" pos:column="39">= <expr><name><name pos:line="141" pos:column="41">words</name><index pos:line="141" pos:column="46">[<expr><name pos:line="141" pos:column="47">j</name></expr>]</index></name> <op:operator pos:line="141" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="141" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="142" pos:column="25">const</specifier> <name pos:line="142" pos:column="31">char</name> <type:modifier pos:line="142" pos:column="36">*</type:modifier></type><name pos:line="142" pos:column="37">b</name> <init pos:line="142" pos:column="39">= <expr><name pos:line="142" pos:column="41">s</name></expr></init></decl>;</decl_stmt>
			<while pos:line="143" pos:column="25">while <condition pos:line="143" pos:column="31">(<expr><op:operator pos:line="143" pos:column="32">*</op:operator><name pos:line="143" pos:column="33">a</name> <op:operator pos:line="143" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="143" pos:column="38">*</op:operator><name pos:line="143" pos:column="39">a</name> <op:operator pos:line="143" pos:column="41">==</op:operator> <op:operator pos:line="143" pos:column="44">*</op:operator><name pos:line="143" pos:column="45">b</name></expr>)</condition> <block pos:line="143" pos:column="48">{
				<expr_stmt><expr><name pos:line="144" pos:column="33">a</name><op:operator pos:line="144" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="145" pos:column="33">b</name><op:operator pos:line="145" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<if pos:line="147" pos:column="25">if <condition pos:line="147" pos:column="28">(<expr><op:operator pos:line="147" pos:column="29">!</op:operator><op:operator pos:line="147" pos:column="30">*</op:operator><name pos:line="147" pos:column="31">a</name></expr>)</condition><then pos:line="147" pos:column="33">
				<return pos:line="148" pos:column="33">return <expr><lit:literal type="boolean" pos:line="148" pos:column="40">true</lit:literal></expr>;</return></then></if>
			<expr_stmt><expr><name pos:line="149" pos:column="25">j</name><op:operator pos:line="149" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<return pos:line="152" pos:column="9">return <expr><lit:literal type="boolean" pos:line="152" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>

<comment type="block" format="doxygen" pos:line="155" pos:column="1">/** similar to InList, but word s can be a substring of keyword.
 * eg. the keyword define is defined as def~ine. This means the word must start
 * with def to be a keyword, but also defi, defin and define are valid.
 * The marker is ~ in this case.
 */</comment>
<function><type><name pos:line="160" pos:column="1">bool</name></type> <name><name pos:line="160" pos:column="6">WordList</name><op:operator pos:line="160" pos:column="14">::</op:operator><name pos:line="160" pos:column="16">InListAbbreviated</name></name><parameter_list pos:line="160" pos:column="33">(<param><decl><type><specifier pos:line="160" pos:column="34">const</specifier> <name pos:line="160" pos:column="40">char</name> <type:modifier pos:line="160" pos:column="45">*</type:modifier></type><name pos:line="160" pos:column="46">s</name></decl></param>, <param><decl><type><specifier pos:line="160" pos:column="49">const</specifier> <name pos:line="160" pos:column="55">char</name></type> <name pos:line="160" pos:column="60">marker</name></decl></param>)</parameter_list> <specifier pos:line="160" pos:column="68">const</specifier> <block pos:line="160" pos:column="74">{
	<if pos:line="161" pos:column="9">if <condition pos:line="161" pos:column="12">(<expr><lit:literal type="number" pos:line="161" pos:column="13">0</lit:literal> <op:operator pos:line="161" pos:column="15">==</op:operator> <name pos:line="161" pos:column="18">words</name></expr>)</condition><then pos:line="161" pos:column="24">
		<return pos:line="162" pos:column="17">return <expr><lit:literal type="boolean" pos:line="162" pos:column="24">false</lit:literal></expr>;</return></then></if>
	<decl_stmt><decl><type><name pos:line="163" pos:column="9">unsigned</name> <name pos:line="163" pos:column="18">char</name></type> <name pos:line="163" pos:column="23">firstChar</name> <init pos:line="163" pos:column="33">= <expr><name><name pos:line="163" pos:column="35">s</name><index pos:line="163" pos:column="36">[<expr><lit:literal type="number" pos:line="163" pos:column="37">0</lit:literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="164" pos:column="9">int</name></type> <name pos:line="164" pos:column="13">j</name> <init pos:line="164" pos:column="15">= <expr><name><name pos:line="164" pos:column="17">starts</name><index pos:line="164" pos:column="23">[<expr><name pos:line="164" pos:column="24">firstChar</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><name pos:line="165" pos:column="13">j</name> <op:operator pos:line="165" pos:column="15">&gt;=</op:operator> <lit:literal type="number" pos:line="165" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="165" pos:column="20"> <block pos:line="165" pos:column="21">{
		<while pos:line="166" pos:column="17">while <condition pos:line="166" pos:column="23">(<expr><name><name pos:line="166" pos:column="24">words</name><index pos:line="166" pos:column="29">[<expr><name pos:line="166" pos:column="30">j</name></expr>]</index><index pos:line="166" pos:column="32">[<expr><lit:literal type="number" pos:line="166" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="166" pos:column="36">==</op:operator> <name pos:line="166" pos:column="39">firstChar</name></expr>)</condition> <block pos:line="166" pos:column="50">{
			<decl_stmt><decl><type><name pos:line="167" pos:column="25">bool</name></type> <name pos:line="167" pos:column="30">isSubword</name> <init pos:line="167" pos:column="40">= <expr><lit:literal type="boolean" pos:line="167" pos:column="42">false</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="168" pos:column="25">int</name></type> <name pos:line="168" pos:column="29">start</name> <init pos:line="168" pos:column="35">= <expr><lit:literal type="number" pos:line="168" pos:column="37">1</lit:literal></expr></init></decl>;</decl_stmt>
			<if pos:line="169" pos:column="25">if <condition pos:line="169" pos:column="28">(<expr><name><name pos:line="169" pos:column="29">words</name><index pos:line="169" pos:column="34">[<expr><name pos:line="169" pos:column="35">j</name></expr>]</index><index pos:line="169" pos:column="37">[<expr><lit:literal type="number" pos:line="169" pos:column="38">1</lit:literal></expr>]</index></name> <op:operator pos:line="169" pos:column="41">==</op:operator> <name pos:line="169" pos:column="44">marker</name></expr>)</condition><then pos:line="169" pos:column="51"> <block pos:line="169" pos:column="52">{
				<expr_stmt><expr><name pos:line="170" pos:column="33">isSubword</name> <op:operator pos:line="170" pos:column="43">=</op:operator> <lit:literal type="boolean" pos:line="170" pos:column="45">true</lit:literal></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="171" pos:column="33">start</name><op:operator pos:line="171" pos:column="38">++</op:operator></expr>;</expr_stmt>
			}</block></then></if>
			<if pos:line="173" pos:column="25">if <condition pos:line="173" pos:column="28">(<expr><name><name pos:line="173" pos:column="29">s</name><index pos:line="173" pos:column="30">[<expr><lit:literal type="number" pos:line="173" pos:column="31">1</lit:literal></expr>]</index></name> <op:operator pos:line="173" pos:column="34">==</op:operator> <name><name pos:line="173" pos:column="37">words</name><index pos:line="173" pos:column="42">[<expr><name pos:line="173" pos:column="43">j</name></expr>]</index><index pos:line="173" pos:column="45">[<expr><name pos:line="173" pos:column="46">start</name></expr>]</index></name></expr>)</condition><then pos:line="173" pos:column="53"> <block pos:line="173" pos:column="54">{
				<decl_stmt><decl><type><specifier pos:line="174" pos:column="33">const</specifier> <name pos:line="174" pos:column="39">char</name> <type:modifier pos:line="174" pos:column="44">*</type:modifier></type><name pos:line="174" pos:column="45">a</name> <init pos:line="174" pos:column="47">= <expr><name><name pos:line="174" pos:column="49">words</name><index pos:line="174" pos:column="54">[<expr><name pos:line="174" pos:column="55">j</name></expr>]</index></name> <op:operator pos:line="174" pos:column="58">+</op:operator> <name pos:line="174" pos:column="60">start</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier pos:line="175" pos:column="33">const</specifier> <name pos:line="175" pos:column="39">char</name> <type:modifier pos:line="175" pos:column="44">*</type:modifier></type><name pos:line="175" pos:column="45">b</name> <init pos:line="175" pos:column="47">= <expr><name pos:line="175" pos:column="49">s</name> <op:operator pos:line="175" pos:column="51">+</op:operator> <lit:literal type="number" pos:line="175" pos:column="53">1</lit:literal></expr></init></decl>;</decl_stmt>
				<while pos:line="176" pos:column="33">while <condition pos:line="176" pos:column="39">(<expr><op:operator pos:line="176" pos:column="40">*</op:operator><name pos:line="176" pos:column="41">a</name> <op:operator pos:line="176" pos:column="43">&amp;&amp;</op:operator> <op:operator pos:line="176" pos:column="46">*</op:operator><name pos:line="176" pos:column="47">a</name> <op:operator pos:line="176" pos:column="49">==</op:operator> <op:operator pos:line="176" pos:column="52">*</op:operator><name pos:line="176" pos:column="53">b</name></expr>)</condition> <block pos:line="176" pos:column="56">{
					<expr_stmt><expr><name pos:line="177" pos:column="41">a</name><op:operator pos:line="177" pos:column="42">++</op:operator></expr>;</expr_stmt>
					<if pos:line="178" pos:column="41">if <condition pos:line="178" pos:column="44">(<expr><op:operator pos:line="178" pos:column="45">*</op:operator><name pos:line="178" pos:column="46">a</name> <op:operator pos:line="178" pos:column="48">==</op:operator> <name pos:line="178" pos:column="51">marker</name></expr>)</condition><then pos:line="178" pos:column="58"> <block pos:line="178" pos:column="59">{
						<expr_stmt><expr><name pos:line="179" pos:column="49">isSubword</name> <op:operator pos:line="179" pos:column="59">=</op:operator> <lit:literal type="boolean" pos:line="179" pos:column="61">true</lit:literal></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="180" pos:column="49">a</name><op:operator pos:line="180" pos:column="50">++</op:operator></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><name pos:line="182" pos:column="41">b</name><op:operator pos:line="182" pos:column="42">++</op:operator></expr>;</expr_stmt>
				}</block></while>
				<if pos:line="184" pos:column="33">if <condition pos:line="184" pos:column="36">(<expr><op:operator pos:line="184" pos:column="37">(</op:operator><op:operator pos:line="184" pos:column="38">!</op:operator><op:operator pos:line="184" pos:column="39">*</op:operator><name pos:line="184" pos:column="40">a</name> <op:operator pos:line="184" pos:column="42">||</op:operator> <name pos:line="184" pos:column="45">isSubword</name><op:operator pos:line="184" pos:column="54">)</op:operator> <op:operator pos:line="184" pos:column="56">&amp;&amp;</op:operator> <op:operator pos:line="184" pos:column="59">!</op:operator><op:operator pos:line="184" pos:column="60">*</op:operator><name pos:line="184" pos:column="61">b</name></expr>)</condition><then pos:line="184" pos:column="63">
					<return pos:line="185" pos:column="41">return <expr><lit:literal type="boolean" pos:line="185" pos:column="48">true</lit:literal></expr>;</return></then></if>
			}</block></then></if>
			<expr_stmt><expr><name pos:line="187" pos:column="25">j</name><op:operator pos:line="187" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<expr_stmt><expr><name pos:line="190" pos:column="9">j</name> <op:operator pos:line="190" pos:column="11">=</op:operator> <name><name pos:line="190" pos:column="13">starts</name><index pos:line="190" pos:column="19">[<expr><lit:literal type="char" pos:line="190" pos:column="20">'^'</lit:literal></expr>]</index></name></expr>;</expr_stmt>
	<if pos:line="191" pos:column="9">if <condition pos:line="191" pos:column="12">(<expr><name pos:line="191" pos:column="13">j</name> <op:operator pos:line="191" pos:column="15">&gt;=</op:operator> <lit:literal type="number" pos:line="191" pos:column="18">0</lit:literal></expr>)</condition><then pos:line="191" pos:column="20"> <block pos:line="191" pos:column="21">{
		<while pos:line="192" pos:column="17">while <condition pos:line="192" pos:column="23">(<expr><name><name pos:line="192" pos:column="24">words</name><index pos:line="192" pos:column="29">[<expr><name pos:line="192" pos:column="30">j</name></expr>]</index><index pos:line="192" pos:column="32">[<expr><lit:literal type="number" pos:line="192" pos:column="33">0</lit:literal></expr>]</index></name> <op:operator pos:line="192" pos:column="36">==</op:operator> <lit:literal type="char" pos:line="192" pos:column="39">'^'</lit:literal></expr>)</condition> <block pos:line="192" pos:column="44">{
			<decl_stmt><decl><type><specifier pos:line="193" pos:column="25">const</specifier> <name pos:line="193" pos:column="31">char</name> <type:modifier pos:line="193" pos:column="36">*</type:modifier></type><name pos:line="193" pos:column="37">a</name> <init pos:line="193" pos:column="39">= <expr><name><name pos:line="193" pos:column="41">words</name><index pos:line="193" pos:column="46">[<expr><name pos:line="193" pos:column="47">j</name></expr>]</index></name> <op:operator pos:line="193" pos:column="50">+</op:operator> <lit:literal type="number" pos:line="193" pos:column="52">1</lit:literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier pos:line="194" pos:column="25">const</specifier> <name pos:line="194" pos:column="31">char</name> <type:modifier pos:line="194" pos:column="36">*</type:modifier></type><name pos:line="194" pos:column="37">b</name> <init pos:line="194" pos:column="39">= <expr><name pos:line="194" pos:column="41">s</name></expr></init></decl>;</decl_stmt>
			<while pos:line="195" pos:column="25">while <condition pos:line="195" pos:column="31">(<expr><op:operator pos:line="195" pos:column="32">*</op:operator><name pos:line="195" pos:column="33">a</name> <op:operator pos:line="195" pos:column="35">&amp;&amp;</op:operator> <op:operator pos:line="195" pos:column="38">*</op:operator><name pos:line="195" pos:column="39">a</name> <op:operator pos:line="195" pos:column="41">==</op:operator> <op:operator pos:line="195" pos:column="44">*</op:operator><name pos:line="195" pos:column="45">b</name></expr>)</condition> <block pos:line="195" pos:column="48">{
				<expr_stmt><expr><name pos:line="196" pos:column="33">a</name><op:operator pos:line="196" pos:column="34">++</op:operator></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="197" pos:column="33">b</name><op:operator pos:line="197" pos:column="34">++</op:operator></expr>;</expr_stmt>
			}</block></while>
			<if pos:line="199" pos:column="25">if <condition pos:line="199" pos:column="28">(<expr><op:operator pos:line="199" pos:column="29">!</op:operator><op:operator pos:line="199" pos:column="30">*</op:operator><name pos:line="199" pos:column="31">a</name></expr>)</condition><then pos:line="199" pos:column="33">
				<return pos:line="200" pos:column="33">return <expr><lit:literal type="boolean" pos:line="200" pos:column="40">true</lit:literal></expr>;</return></then></if>
			<expr_stmt><expr><name pos:line="201" pos:column="25">j</name><op:operator pos:line="201" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></while>
	}</block></then></if>
	<return pos:line="204" pos:column="9">return <expr><lit:literal type="boolean" pos:line="204" pos:column="16">false</lit:literal></expr>;</return>
}</block></function>
</unit>
