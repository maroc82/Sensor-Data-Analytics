<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\scintilla\lexlib\LexAccessor.h" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// Scintilla source code edit control</comment>
<comment type="block" format="doxygen" pos:line="2" pos:column="1">/** @file LexAccessor.h
 ** Interfaces between Scintilla and lexers.
 **/</comment>
<comment type="line" pos:line="5" pos:column="1">// Copyright 1998-2010 by Neil Hodgson &lt;neilh@scintilla.org&gt;</comment>
<comment type="line" pos:line="6" pos:column="1">// The License.txt file describes the conditions under which this software may be distributed.</comment>

<cpp:ifndef pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">ifndef</cpp:directive> <name pos:line="8" pos:column="9">LEXACCESSOR_H</name></cpp:ifndef>
<cpp:define pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="9" pos:column="9">LEXACCESSOR_H</name></cpp:macro></cpp:define>

<cpp:ifdef pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">ifdef</cpp:directive> <name pos:line="11" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
<namespace pos:line="12" pos:column="1">namespace <name pos:line="12" pos:column="11">Scintilla</name> <block pos:line="12" pos:column="21">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif</cpp:directive></cpp:endif>

<class pos:line="15" pos:column="1">class <name pos:line="15" pos:column="7">LexAccessor</name> <block pos:line="15" pos:column="19">{<private type="default" pos:line="15" pos:column="20">
</private><private pos:line="16" pos:column="1">private:
	<decl_stmt><decl><type><name pos:line="17" pos:column="9">IDocument</name> <type:modifier pos:line="17" pos:column="19">*</type:modifier></type><name pos:line="17" pos:column="20">pAccess</name></decl>;</decl_stmt>
	<enum pos:line="18" pos:column="9">enum <block pos:line="18" pos:column="14">{<decl><name pos:line="18" pos:column="15">extremePosition</name><init pos:line="18" pos:column="30">=<expr><lit:literal type="number" pos:line="18" pos:column="31">0x7FFFFFFF</lit:literal></expr></init></decl>}</block>;</enum>
	<comment type="block" format="doxygen" pos:line="19" pos:column="9">/** @a bufferSize is a trade off between time taken to copy the characters
	 * and retrieval overhead.
	 * @a slopSize positions the buffer before the desired position
	 * in case there is some backtracking. */</comment>
	<enum pos:line="23" pos:column="9">enum <block pos:line="23" pos:column="14">{<decl><name pos:line="23" pos:column="15">bufferSize</name><init pos:line="23" pos:column="25">=<expr><lit:literal type="number" pos:line="23" pos:column="26">4000</lit:literal></expr></init></decl><op:operator pos:line="23" pos:column="30">,</op:operator> <decl><name pos:line="23" pos:column="32">slopSize</name><init pos:line="23" pos:column="40">=<expr><name pos:line="23" pos:column="41">bufferSize</name><op:operator pos:line="23" pos:column="51">/</op:operator><lit:literal type="number" pos:line="23" pos:column="52">8</lit:literal></expr></init></decl>}</block>;</enum>
	<decl_stmt><decl><type><name pos:line="24" pos:column="9">char</name></type> <name><name pos:line="24" pos:column="14">buf</name><index pos:line="24" pos:column="17">[<expr><name pos:line="24" pos:column="18">bufferSize</name><op:operator pos:line="24" pos:column="28">+</op:operator><lit:literal type="number" pos:line="24" pos:column="29">1</lit:literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="25" pos:column="9">int</name></type> <name pos:line="25" pos:column="13">startPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="26" pos:column="9">int</name></type> <name pos:line="26" pos:column="13">endPos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="27" pos:column="9">int</name></type> <name pos:line="27" pos:column="13">codePage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="28" pos:column="9">int</name></type> <name pos:line="28" pos:column="13">lenDoc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="29" pos:column="9">int</name></type> <name pos:line="29" pos:column="13">mask</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="30" pos:column="9">char</name></type> <name><name pos:line="30" pos:column="14">styleBuf</name><index pos:line="30" pos:column="22">[<expr><name pos:line="30" pos:column="23">bufferSize</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="31" pos:column="9">int</name></type> <name pos:line="31" pos:column="13">validLen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="32" pos:column="9">char</name></type> <name pos:line="32" pos:column="14">chFlags</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="33" pos:column="9">char</name></type> <name pos:line="33" pos:column="14">chWhile</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="34" pos:column="9">unsigned</name> <name pos:line="34" pos:column="18">int</name></type> <name pos:line="34" pos:column="22">startSeg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="35" pos:column="9">int</name></type> <name pos:line="35" pos:column="13">startPosStyling</name></decl>;</decl_stmt>

	<function><type><name pos:line="37" pos:column="9">void</name></type> <name pos:line="37" pos:column="14">Fill</name><parameter_list pos:line="37" pos:column="18">(<param><decl><type><name pos:line="37" pos:column="19">int</name></type> <name pos:line="37" pos:column="23">position</name></decl></param>)</parameter_list> <block pos:line="37" pos:column="33">{
		<expr_stmt><expr><name pos:line="38" pos:column="17">startPos</name> <op:operator pos:line="38" pos:column="26">=</op:operator> <name pos:line="38" pos:column="28">position</name> <op:operator pos:line="38" pos:column="37">-</op:operator> <name pos:line="38" pos:column="39">slopSize</name></expr>;</expr_stmt>
		<if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">startPos</name> <op:operator pos:line="39" pos:column="30">+</op:operator> <name pos:line="39" pos:column="32">bufferSize</name> <op:operator pos:line="39" pos:column="43">&gt;</op:operator> <name pos:line="39" pos:column="45">lenDoc</name></expr>)</condition><then pos:line="39" pos:column="52">
			<expr_stmt><expr><name pos:line="40" pos:column="25">startPos</name> <op:operator pos:line="40" pos:column="34">=</op:operator> <name pos:line="40" pos:column="36">lenDoc</name> <op:operator pos:line="40" pos:column="43">-</op:operator> <name pos:line="40" pos:column="45">bufferSize</name></expr>;</expr_stmt></then></if>
		<if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">startPos</name> <op:operator pos:line="41" pos:column="30">&lt;</op:operator> <lit:literal type="number" pos:line="41" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="41" pos:column="34">
			<expr_stmt><expr><name pos:line="42" pos:column="25">startPos</name> <op:operator pos:line="42" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="42" pos:column="36">0</lit:literal></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name pos:line="43" pos:column="17">endPos</name> <op:operator pos:line="43" pos:column="24">=</op:operator> <name pos:line="43" pos:column="26">startPos</name> <op:operator pos:line="43" pos:column="35">+</op:operator> <name pos:line="43" pos:column="37">bufferSize</name></expr>;</expr_stmt>
		<if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">endPos</name> <op:operator pos:line="44" pos:column="28">&gt;</op:operator> <name pos:line="44" pos:column="30">lenDoc</name></expr>)</condition><then pos:line="44" pos:column="37">
			<expr_stmt><expr><name pos:line="45" pos:column="25">endPos</name> <op:operator pos:line="45" pos:column="32">=</op:operator> <name pos:line="45" pos:column="34">lenDoc</name></expr>;</expr_stmt></then></if>

		<expr_stmt><expr><call><name><name pos:line="47" pos:column="17">pAccess</name><op:operator pos:line="47" pos:column="24">-&gt;</op:operator><name pos:line="47" pos:column="26">GetCharRange</name></name><argument_list pos:line="47" pos:column="38">(<argument><expr><name pos:line="47" pos:column="39">buf</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="44">startPos</name></expr></argument>, <argument><expr><name pos:line="47" pos:column="54">endPos</name><op:operator pos:line="47" pos:column="60">-</op:operator><name pos:line="47" pos:column="61">startPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name pos:line="48" pos:column="17">buf</name><index pos:line="48" pos:column="20">[<expr><name pos:line="48" pos:column="21">endPos</name><op:operator pos:line="48" pos:column="27">-</op:operator><name pos:line="48" pos:column="28">startPos</name></expr>]</index></name> <op:operator pos:line="48" pos:column="38">=</op:operator> <lit:literal type="char" pos:line="48" pos:column="40">'\0'</lit:literal></expr>;</expr_stmt>
	}</block></function>

</private><public pos:line="51" pos:column="1">public:
	<constructor><name pos:line="52" pos:column="9">LexAccessor</name><parameter_list pos:line="52" pos:column="20">(<param><decl><type><name pos:line="52" pos:column="21">IDocument</name> <type:modifier pos:line="52" pos:column="31">*</type:modifier></type><name pos:line="52" pos:column="32">pAccess_</name></decl></param>)</parameter_list> <member_list pos:line="52" pos:column="42">:
		<call><name pos:line="53" pos:column="17">pAccess</name><argument_list pos:line="53" pos:column="24">(<argument><expr><name pos:line="53" pos:column="25">pAccess_</name></expr></argument>)</argument_list></call><op:operator pos:line="53" pos:column="34">,</op:operator> <call><name pos:line="53" pos:column="36">startPos</name><argument_list pos:line="53" pos:column="44">(<argument><expr><name pos:line="53" pos:column="45">extremePosition</name></expr></argument>)</argument_list></call><op:operator pos:line="53" pos:column="61">,</op:operator> <call><name pos:line="53" pos:column="63">endPos</name><argument_list pos:line="53" pos:column="69">(<argument><expr><lit:literal type="number" pos:line="53" pos:column="70">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="53" pos:column="72">,</op:operator>
		<call><name pos:line="54" pos:column="17">codePage</name><argument_list pos:line="54" pos:column="25">(<argument><expr><call><name><name pos:line="54" pos:column="26">pAccess</name><op:operator pos:line="54" pos:column="33">-&gt;</op:operator><name pos:line="54" pos:column="35">CodePage</name></name><argument_list pos:line="54" pos:column="43">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="46">,</op:operator> <call><name pos:line="54" pos:column="48">lenDoc</name><argument_list pos:line="54" pos:column="54">(<argument><expr><call><name><name pos:line="54" pos:column="55">pAccess</name><op:operator pos:line="54" pos:column="62">-&gt;</op:operator><name pos:line="54" pos:column="64">Length</name></name><argument_list pos:line="54" pos:column="70">()</argument_list></call></expr></argument>)</argument_list></call><op:operator pos:line="54" pos:column="73">,</op:operator>
		<call><name pos:line="55" pos:column="17">mask</name><argument_list pos:line="55" pos:column="21">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="22">127</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="26">,</op:operator> <call><name pos:line="55" pos:column="28">validLen</name><argument_list pos:line="55" pos:column="36">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="37">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="39">,</op:operator> <call><name pos:line="55" pos:column="41">chFlags</name><argument_list pos:line="55" pos:column="48">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="49">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="51">,</op:operator> <call><name pos:line="55" pos:column="53">chWhile</name><argument_list pos:line="55" pos:column="60">(<argument><expr><lit:literal type="number" pos:line="55" pos:column="61">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="55" pos:column="63">,</op:operator>
		<call><name pos:line="56" pos:column="17">startSeg</name><argument_list pos:line="56" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="56" pos:column="26">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="56" pos:column="28">,</op:operator> <call><name pos:line="56" pos:column="30">startPosStyling</name><argument_list pos:line="56" pos:column="45">(<argument><expr><lit:literal type="number" pos:line="56" pos:column="46">0</lit:literal></expr></argument>)</argument_list></call> </member_list><block pos:line="56" pos:column="49">{
	}</block></constructor>
	<function><type><name pos:line="58" pos:column="9">char</name></type> <name pos:line="58" pos:column="14">operator[]</name><parameter_list pos:line="58" pos:column="24">(<param><decl><type><name pos:line="58" pos:column="25">int</name></type> <name pos:line="58" pos:column="29">position</name></decl></param>)</parameter_list> <block pos:line="58" pos:column="39">{
		<if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name><name pos:line="59" pos:column="21">position</name> <argument_list pos:line="59" pos:column="30">&lt; <argument><expr><name pos:line="59" pos:column="32">startPos</name> <op:operator pos:line="59" pos:column="41">||</op:operator> <name pos:line="59" pos:column="44">position</name></expr></argument> &gt;</argument_list></name><op:operator pos:line="59" pos:column="54">=</op:operator> <name pos:line="59" pos:column="56">endPos</name></expr>)</condition><then pos:line="59" pos:column="63"> <block pos:line="59" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="60" pos:column="25">Fill</name><argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return pos:line="62" pos:column="17">return <expr><name><name pos:line="62" pos:column="24">buf</name><index pos:line="62" pos:column="27">[<expr><name pos:line="62" pos:column="28">position</name> <op:operator pos:line="62" pos:column="37">-</op:operator> <name pos:line="62" pos:column="39">startPos</name></expr>]</index></name></expr>;</return>
	}</block></function>
	<comment type="block" format="doxygen" pos:line="64" pos:column="9">/** Safe version of operator[], returning a defined value for invalid position. */</comment>
	<function><type><name pos:line="65" pos:column="9">char</name></type> <name pos:line="65" pos:column="14">SafeGetCharAt</name><parameter_list pos:line="65" pos:column="27">(<param><decl><type><name pos:line="65" pos:column="28">int</name></type> <name pos:line="65" pos:column="32">position</name></decl></param>, <param><decl><type><name pos:line="65" pos:column="42">char</name></type> <name pos:line="65" pos:column="47">chDefault</name><init pos:line="65" pos:column="56">=<expr><lit:literal type="char" pos:line="65" pos:column="57">' '</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="65" pos:column="62">{
		<if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><name><name pos:line="66" pos:column="21">position</name> <argument_list pos:line="66" pos:column="30">&lt; <argument><expr><name pos:line="66" pos:column="32">startPos</name> <op:operator pos:line="66" pos:column="41">||</op:operator> <name pos:line="66" pos:column="44">position</name></expr></argument> &gt;</argument_list></name><op:operator pos:line="66" pos:column="54">=</op:operator> <name pos:line="66" pos:column="56">endPos</name></expr>)</condition><then pos:line="66" pos:column="63"> <block pos:line="66" pos:column="64">{
			<expr_stmt><expr><call><name pos:line="67" pos:column="25">Fill</name><argument_list pos:line="67" pos:column="29">(<argument><expr><name pos:line="67" pos:column="30">position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="68" pos:column="25">if <condition pos:line="68" pos:column="28">(<expr><name><name pos:line="68" pos:column="29">position</name> <argument_list pos:line="68" pos:column="38">&lt; <argument><expr><name pos:line="68" pos:column="40">startPos</name> <op:operator pos:line="68" pos:column="49">||</op:operator> <name pos:line="68" pos:column="52">position</name></expr></argument> &gt;</argument_list></name><op:operator pos:line="68" pos:column="62">=</op:operator> <name pos:line="68" pos:column="64">endPos</name></expr>)</condition><then pos:line="68" pos:column="71"> <block pos:line="68" pos:column="72">{
				<comment type="line" pos:line="69" pos:column="33">// Position is outside range of document</comment>
				<return pos:line="70" pos:column="33">return <expr><name pos:line="70" pos:column="40">chDefault</name></expr>;</return>
			}</block></then></if>
		}</block></then></if>
		<return pos:line="73" pos:column="17">return <expr><name><name pos:line="73" pos:column="24">buf</name><index pos:line="73" pos:column="27">[<expr><name pos:line="73" pos:column="28">position</name> <op:operator pos:line="73" pos:column="37">-</op:operator> <name pos:line="73" pos:column="39">startPos</name></expr>]</index></name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="75" pos:column="9">bool</name></type> <name pos:line="75" pos:column="14">IsLeadByte</name><parameter_list pos:line="75" pos:column="24">(<param><decl><type><name pos:line="75" pos:column="25">char</name></type> <name pos:line="75" pos:column="30">ch</name></decl></param>)</parameter_list> <block pos:line="75" pos:column="34">{
		<return pos:line="76" pos:column="17">return <expr><call><name><name pos:line="76" pos:column="24">pAccess</name><op:operator pos:line="76" pos:column="31">-&gt;</op:operator><name pos:line="76" pos:column="33">IsDBCSLeadByte</name></name><argument_list pos:line="76" pos:column="47">(<argument><expr><name pos:line="76" pos:column="48">ch</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><name pos:line="79" pos:column="9">bool</name></type> <name pos:line="79" pos:column="14">Match</name><parameter_list pos:line="79" pos:column="19">(<param><decl><type><name pos:line="79" pos:column="20">int</name></type> <name pos:line="79" pos:column="24">pos</name></decl></param>, <param><decl><type><specifier pos:line="79" pos:column="29">const</specifier> <name pos:line="79" pos:column="35">char</name> <type:modifier pos:line="79" pos:column="40">*</type:modifier></type><name pos:line="79" pos:column="41">s</name></decl></param>)</parameter_list> <block pos:line="79" pos:column="44">{
		<for pos:line="80" pos:column="17">for (<init><decl><type><name pos:line="80" pos:column="22">int</name></type> <name pos:line="80" pos:column="26">i</name><init pos:line="80" pos:column="27">=<expr><lit:literal type="number" pos:line="80" pos:column="28">0</lit:literal></expr></init></decl>;</init> <condition><expr><op:operator pos:line="80" pos:column="31">*</op:operator><name pos:line="80" pos:column="32">s</name></expr>;</condition> <incr><expr><name pos:line="80" pos:column="35">i</name><op:operator pos:line="80" pos:column="36">++</op:operator></expr></incr>) <block pos:line="80" pos:column="40">{
			<if pos:line="81" pos:column="25">if <condition pos:line="81" pos:column="28">(<expr><op:operator pos:line="81" pos:column="29">*</op:operator><name pos:line="81" pos:column="30">s</name> <op:operator pos:line="81" pos:column="32">!=</op:operator> <call><name pos:line="81" pos:column="35">SafeGetCharAt</name><argument_list pos:line="81" pos:column="48">(<argument><expr><name pos:line="81" pos:column="49">pos</name><op:operator pos:line="81" pos:column="52">+</op:operator><name pos:line="81" pos:column="53">i</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="81" pos:column="56">
				<return pos:line="82" pos:column="33">return <expr><lit:literal type="boolean" pos:line="82" pos:column="40">false</lit:literal></expr>;</return></then></if>
			<expr_stmt><expr><name pos:line="83" pos:column="25">s</name><op:operator pos:line="83" pos:column="26">++</op:operator></expr>;</expr_stmt>
		}</block></for>
		<return pos:line="85" pos:column="17">return <expr><lit:literal type="boolean" pos:line="85" pos:column="24">true</lit:literal></expr>;</return>
	}</block></function>
	<function><type><name pos:line="87" pos:column="9">char</name></type> <name pos:line="87" pos:column="14">StyleAt</name><parameter_list pos:line="87" pos:column="21">(<param><decl><type><name pos:line="87" pos:column="22">int</name></type> <name pos:line="87" pos:column="26">position</name></decl></param>)</parameter_list> <block pos:line="87" pos:column="36">{
		<return pos:line="88" pos:column="17">return <expr><call><name><name pos:line="88" pos:column="24">static_cast</name><argument_list pos:line="88" pos:column="35">&lt;<argument><expr><name pos:line="88" pos:column="36">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="88" pos:column="41">(<argument><expr><call><name><name pos:line="88" pos:column="42">pAccess</name><op:operator pos:line="88" pos:column="49">-&gt;</op:operator><name pos:line="88" pos:column="51">StyleAt</name></name><argument_list pos:line="88" pos:column="58">(<argument><expr><name pos:line="88" pos:column="59">position</name></expr></argument>)</argument_list></call> <op:operator pos:line="88" pos:column="69">&amp;</op:operator> <name pos:line="88" pos:column="71">mask</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="90" pos:column="9">int</name></type> <name pos:line="90" pos:column="13">GetLine</name><parameter_list pos:line="90" pos:column="20">(<param><decl><type><name pos:line="90" pos:column="21">int</name></type> <name pos:line="90" pos:column="25">position</name></decl></param>)</parameter_list> <block pos:line="90" pos:column="35">{
		<return pos:line="91" pos:column="17">return <expr><call><name><name pos:line="91" pos:column="24">pAccess</name><op:operator pos:line="91" pos:column="31">-&gt;</op:operator><name pos:line="91" pos:column="33">LineFromPosition</name></name><argument_list pos:line="91" pos:column="49">(<argument><expr><name pos:line="91" pos:column="50">position</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="93" pos:column="9">int</name></type> <name pos:line="93" pos:column="13">LineStart</name><parameter_list pos:line="93" pos:column="22">(<param><decl><type><name pos:line="93" pos:column="23">int</name></type> <name pos:line="93" pos:column="27">line</name></decl></param>)</parameter_list> <block pos:line="93" pos:column="33">{
		<return pos:line="94" pos:column="17">return <expr><call><name><name pos:line="94" pos:column="24">pAccess</name><op:operator pos:line="94" pos:column="31">-&gt;</op:operator><name pos:line="94" pos:column="33">LineStart</name></name><argument_list pos:line="94" pos:column="42">(<argument><expr><name pos:line="94" pos:column="43">line</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="96" pos:column="9">int</name></type> <name pos:line="96" pos:column="13">LevelAt</name><parameter_list pos:line="96" pos:column="20">(<param><decl><type><name pos:line="96" pos:column="21">int</name></type> <name pos:line="96" pos:column="25">line</name></decl></param>)</parameter_list> <block pos:line="96" pos:column="31">{
		<return pos:line="97" pos:column="17">return <expr><call><name><name pos:line="97" pos:column="24">pAccess</name><op:operator pos:line="97" pos:column="31">-&gt;</op:operator><name pos:line="97" pos:column="33">GetLevel</name></name><argument_list pos:line="97" pos:column="41">(<argument><expr><name pos:line="97" pos:column="42">line</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="99" pos:column="9">int</name></type> <name pos:line="99" pos:column="13">Length</name><parameter_list pos:line="99" pos:column="19">()</parameter_list> <specifier pos:line="99" pos:column="22">const</specifier> <block pos:line="99" pos:column="28">{
		<return pos:line="100" pos:column="17">return <expr><name pos:line="100" pos:column="24">lenDoc</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="102" pos:column="9">void</name></type> <name pos:line="102" pos:column="14">Flush</name><parameter_list pos:line="102" pos:column="19">()</parameter_list> <block pos:line="102" pos:column="22">{
		<expr_stmt><expr><name pos:line="103" pos:column="17">startPos</name> <op:operator pos:line="103" pos:column="26">=</op:operator> <name pos:line="103" pos:column="28">extremePosition</name></expr>;</expr_stmt>
		<if pos:line="104" pos:column="17">if <condition pos:line="104" pos:column="20">(<expr><name pos:line="104" pos:column="21">validLen</name> <op:operator pos:line="104" pos:column="30">&gt;</op:operator> <lit:literal type="number" pos:line="104" pos:column="32">0</lit:literal></expr>)</condition><then pos:line="104" pos:column="34"> <block pos:line="104" pos:column="35">{
			<expr_stmt><expr><call><name><name pos:line="105" pos:column="25">pAccess</name><op:operator pos:line="105" pos:column="32">-&gt;</op:operator><name pos:line="105" pos:column="34">SetStyles</name></name><argument_list pos:line="105" pos:column="43">(<argument><expr><name pos:line="105" pos:column="44">validLen</name></expr></argument>, <argument><expr><name pos:line="105" pos:column="54">styleBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="106" pos:column="25">startPosStyling</name> <op:operator pos:line="106" pos:column="41">+=</op:operator> <name pos:line="106" pos:column="44">validLen</name></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="107" pos:column="25">validLen</name> <op:operator pos:line="107" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="107" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><type><name pos:line="110" pos:column="9">int</name></type> <name pos:line="110" pos:column="13">GetLineState</name><parameter_list pos:line="110" pos:column="25">(<param><decl><type><name pos:line="110" pos:column="26">int</name></type> <name pos:line="110" pos:column="30">line</name></decl></param>)</parameter_list> <block pos:line="110" pos:column="36">{
		<return pos:line="111" pos:column="17">return <expr><call><name><name pos:line="111" pos:column="24">pAccess</name><op:operator pos:line="111" pos:column="31">-&gt;</op:operator><name pos:line="111" pos:column="33">GetLineState</name></name><argument_list pos:line="111" pos:column="45">(<argument><expr><name pos:line="111" pos:column="46">line</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name pos:line="113" pos:column="9">int</name></type> <name pos:line="113" pos:column="13">SetLineState</name><parameter_list pos:line="113" pos:column="25">(<param><decl><type><name pos:line="113" pos:column="26">int</name></type> <name pos:line="113" pos:column="30">line</name></decl></param>, <param><decl><type><name pos:line="113" pos:column="36">int</name></type> <name pos:line="113" pos:column="40">state</name></decl></param>)</parameter_list> <block pos:line="113" pos:column="47">{
		<return pos:line="114" pos:column="17">return <expr><call><name><name pos:line="114" pos:column="24">pAccess</name><op:operator pos:line="114" pos:column="31">-&gt;</op:operator><name pos:line="114" pos:column="33">SetLineState</name></name><argument_list pos:line="114" pos:column="45">(<argument><expr><name pos:line="114" pos:column="46">line</name></expr></argument>, <argument><expr><name pos:line="114" pos:column="52">state</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<comment type="line" pos:line="116" pos:column="9">// Style setting</comment>
	<function><type><name pos:line="117" pos:column="9">void</name></type> <name pos:line="117" pos:column="14">StartAt</name><parameter_list pos:line="117" pos:column="21">(<param><decl><type><name pos:line="117" pos:column="22">unsigned</name> <name pos:line="117" pos:column="31">int</name></type> <name pos:line="117" pos:column="35">start</name></decl></param>, <param><decl><type><name pos:line="117" pos:column="42">char</name></type> <name pos:line="117" pos:column="47">chMask</name><init pos:line="117" pos:column="53">=<expr><lit:literal type="number" pos:line="117" pos:column="54">31</lit:literal></expr></init></decl></param>)</parameter_list> <block pos:line="117" pos:column="58">{
		<comment type="line" pos:line="118" pos:column="17">// Store the mask specified for use with StyleAt.</comment>
		<expr_stmt><expr><name pos:line="119" pos:column="17">mask</name> <op:operator pos:line="119" pos:column="22">=</op:operator> <name pos:line="119" pos:column="24">chMask</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="120" pos:column="17">pAccess</name><op:operator pos:line="120" pos:column="24">-&gt;</op:operator><name pos:line="120" pos:column="26">StartStyling</name></name><argument_list pos:line="120" pos:column="38">(<argument><expr><name pos:line="120" pos:column="39">start</name></expr></argument>, <argument><expr><name pos:line="120" pos:column="46">chMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="121" pos:column="17">startPosStyling</name> <op:operator pos:line="121" pos:column="33">=</op:operator> <name pos:line="121" pos:column="35">start</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="123" pos:column="9">void</name></type> <name pos:line="123" pos:column="14">SetFlags</name><parameter_list pos:line="123" pos:column="22">(<param><decl><type><name pos:line="123" pos:column="23">char</name></type> <name pos:line="123" pos:column="28">chFlags_</name></decl></param>, <param><decl><type><name pos:line="123" pos:column="38">char</name></type> <name pos:line="123" pos:column="43">chWhile_</name></decl></param>)</parameter_list> <block pos:line="123" pos:column="53">{
		<expr_stmt><expr><name pos:line="124" pos:column="17">chFlags</name> <op:operator pos:line="124" pos:column="25">=</op:operator> <name pos:line="124" pos:column="27">chFlags_</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="125" pos:column="17">chWhile</name> <op:operator pos:line="125" pos:column="25">=</op:operator> <name pos:line="125" pos:column="27">chWhile_</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="127" pos:column="9">unsigned</name> <name pos:line="127" pos:column="18">int</name></type> <name pos:line="127" pos:column="22">GetStartSegment</name><parameter_list pos:line="127" pos:column="37">()</parameter_list> <specifier pos:line="127" pos:column="40">const</specifier> <block pos:line="127" pos:column="46">{
		<return pos:line="128" pos:column="17">return <expr><name pos:line="128" pos:column="24">startSeg</name></expr>;</return>
	}</block></function>
	<function><type><name pos:line="130" pos:column="9">void</name></type> <name pos:line="130" pos:column="14">StartSegment</name><parameter_list pos:line="130" pos:column="26">(<param><decl><type><name pos:line="130" pos:column="27">unsigned</name> <name pos:line="130" pos:column="36">int</name></type> <name pos:line="130" pos:column="40">pos</name></decl></param>)</parameter_list> <block pos:line="130" pos:column="45">{
		<expr_stmt><expr><name pos:line="131" pos:column="17">startSeg</name> <op:operator pos:line="131" pos:column="26">=</op:operator> <name pos:line="131" pos:column="28">pos</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="133" pos:column="9">void</name></type> <name pos:line="133" pos:column="14">ColourTo</name><parameter_list pos:line="133" pos:column="22">(<param><decl><type><name pos:line="133" pos:column="23">unsigned</name> <name pos:line="133" pos:column="32">int</name></type> <name pos:line="133" pos:column="36">pos</name></decl></param>, <param><decl><type><name pos:line="133" pos:column="41">int</name></type> <name pos:line="133" pos:column="45">chAttr</name></decl></param>)</parameter_list> <block pos:line="133" pos:column="53">{
		<comment type="line" pos:line="134" pos:column="17">// Only perform styling if non empty range</comment>
		<if pos:line="135" pos:column="17">if <condition pos:line="135" pos:column="20">(<expr><name pos:line="135" pos:column="21">pos</name> <op:operator pos:line="135" pos:column="25">!=</op:operator> <name pos:line="135" pos:column="28">startSeg</name> <op:operator pos:line="135" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="135" pos:column="39">1</lit:literal></expr>)</condition><then pos:line="135" pos:column="41"> <block pos:line="135" pos:column="42">{
			<expr_stmt><expr><call><name pos:line="136" pos:column="25">assert</name><argument_list pos:line="136" pos:column="31">(<argument><expr><name pos:line="136" pos:column="32">pos</name> <op:operator pos:line="136" pos:column="36">&gt;=</op:operator> <name pos:line="136" pos:column="39">startSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="137" pos:column="25">if <condition pos:line="137" pos:column="28">(<expr><name pos:line="137" pos:column="29">pos</name> <op:operator pos:line="137" pos:column="33">&lt;</op:operator> <name pos:line="137" pos:column="35">startSeg</name></expr>)</condition><then pos:line="137" pos:column="44"> <block pos:line="137" pos:column="45">{
				<return pos:line="138" pos:column="33">return;</return>
			}</block></then></if>

			<if pos:line="141" pos:column="25">if <condition pos:line="141" pos:column="28">(<expr><name pos:line="141" pos:column="29">validLen</name> <op:operator pos:line="141" pos:column="38">+</op:operator> <op:operator pos:line="141" pos:column="40">(</op:operator><name pos:line="141" pos:column="41">pos</name> <op:operator pos:line="141" pos:column="45">-</op:operator> <name pos:line="141" pos:column="47">startSeg</name> <op:operator pos:line="141" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="141" pos:column="58">1</lit:literal><op:operator pos:line="141" pos:column="59">)</op:operator> <op:operator pos:line="141" pos:column="61">&gt;=</op:operator> <name pos:line="141" pos:column="64">bufferSize</name></expr>)</condition><then pos:line="141" pos:column="75">
				<expr_stmt><expr><call><name pos:line="142" pos:column="33">Flush</name><argument_list pos:line="142" pos:column="38">()</argument_list></call></expr>;</expr_stmt></then></if>
			<if pos:line="143" pos:column="25">if <condition pos:line="143" pos:column="28">(<expr><name pos:line="143" pos:column="29">validLen</name> <op:operator pos:line="143" pos:column="38">+</op:operator> <op:operator pos:line="143" pos:column="40">(</op:operator><name pos:line="143" pos:column="41">pos</name> <op:operator pos:line="143" pos:column="45">-</op:operator> <name pos:line="143" pos:column="47">startSeg</name> <op:operator pos:line="143" pos:column="56">+</op:operator> <lit:literal type="number" pos:line="143" pos:column="58">1</lit:literal><op:operator pos:line="143" pos:column="59">)</op:operator> <op:operator pos:line="143" pos:column="61">&gt;=</op:operator> <name pos:line="143" pos:column="64">bufferSize</name></expr>)</condition><then pos:line="143" pos:column="75"> <block pos:line="143" pos:column="76">{
				<comment type="line" pos:line="144" pos:column="33">// Too big for buffer so send directly</comment>
				<expr_stmt><expr><call><name><name pos:line="145" pos:column="33">pAccess</name><op:operator pos:line="145" pos:column="40">-&gt;</op:operator><name pos:line="145" pos:column="42">SetStyleFor</name></name><argument_list pos:line="145" pos:column="53">(<argument><expr><name pos:line="145" pos:column="54">pos</name> <op:operator pos:line="145" pos:column="58">-</op:operator> <name pos:line="145" pos:column="60">startSeg</name> <op:operator pos:line="145" pos:column="69">+</op:operator> <lit:literal type="number" pos:line="145" pos:column="71">1</lit:literal></expr></argument>, <argument><expr><call><name><name pos:line="145" pos:column="74">static_cast</name><argument_list pos:line="145" pos:column="85">&lt;<argument><expr><name pos:line="145" pos:column="86">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="145" pos:column="91">(<argument><expr><name pos:line="145" pos:column="92">chAttr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="146" pos:column="27">else <block pos:line="146" pos:column="32">{
				<if pos:line="147" pos:column="33">if <condition pos:line="147" pos:column="36">(<expr><name pos:line="147" pos:column="37">chAttr</name> <op:operator pos:line="147" pos:column="44">!=</op:operator> <name pos:line="147" pos:column="47">chWhile</name></expr>)</condition><then pos:line="147" pos:column="55">
					<expr_stmt><expr><name pos:line="148" pos:column="41">chFlags</name> <op:operator pos:line="148" pos:column="49">=</op:operator> <lit:literal type="number" pos:line="148" pos:column="51">0</lit:literal></expr>;</expr_stmt></then></if>
				<expr_stmt><expr><name pos:line="149" pos:column="33">chAttr</name> <op:operator pos:line="149" pos:column="40">|=</op:operator> <name pos:line="149" pos:column="43">chFlags</name></expr>;</expr_stmt>
				<for pos:line="150" pos:column="33">for (<init><decl><type><name pos:line="150" pos:column="38">unsigned</name> <name pos:line="150" pos:column="47">int</name></type> <name pos:line="150" pos:column="51">i</name> <init pos:line="150" pos:column="53">= <expr><name pos:line="150" pos:column="55">startSeg</name></expr></init></decl>;</init> <condition><expr><name pos:line="150" pos:column="65">i</name> <op:operator pos:line="150" pos:column="67">&lt;=</op:operator> <name pos:line="150" pos:column="70">pos</name></expr>;</condition> <incr><expr><name pos:line="150" pos:column="75">i</name><op:operator pos:line="150" pos:column="76">++</op:operator></expr></incr>) <block pos:line="150" pos:column="80">{
					<expr_stmt><expr><call><name pos:line="151" pos:column="41">assert</name><argument_list pos:line="151" pos:column="47">(<argument><expr><op:operator pos:line="151" pos:column="48">(</op:operator><name pos:line="151" pos:column="49">startPosStyling</name> <op:operator pos:line="151" pos:column="65">+</op:operator> <name pos:line="151" pos:column="67">validLen</name><op:operator pos:line="151" pos:column="75">)</op:operator> <op:operator pos:line="151" pos:column="77">&lt;</op:operator> <call><name pos:line="151" pos:column="79">Length</name><argument_list pos:line="151" pos:column="85">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name pos:line="152" pos:column="41">styleBuf</name><index pos:line="152" pos:column="49">[<expr><name pos:line="152" pos:column="50">validLen</name><op:operator pos:line="152" pos:column="58">++</op:operator></expr>]</index></name> <op:operator pos:line="152" pos:column="62">=</op:operator> <call><name><name pos:line="152" pos:column="64">static_cast</name><argument_list pos:line="152" pos:column="75">&lt;<argument><expr><name pos:line="152" pos:column="76">char</name></expr></argument>&gt;</argument_list></name><argument_list pos:line="152" pos:column="81">(<argument><expr><name pos:line="152" pos:column="82">chAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></else></if>
		}</block></then></if>
		<expr_stmt><expr><name pos:line="156" pos:column="17">startSeg</name> <op:operator pos:line="156" pos:column="26">=</op:operator> <name pos:line="156" pos:column="28">pos</name><op:operator pos:line="156" pos:column="31">+</op:operator><lit:literal type="number" pos:line="156" pos:column="32">1</lit:literal></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="158" pos:column="9">void</name></type> <name pos:line="158" pos:column="14">SetLevel</name><parameter_list pos:line="158" pos:column="22">(<param><decl><type><name pos:line="158" pos:column="23">int</name></type> <name pos:line="158" pos:column="27">line</name></decl></param>, <param><decl><type><name pos:line="158" pos:column="33">int</name></type> <name pos:line="158" pos:column="37">level</name></decl></param>)</parameter_list> <block pos:line="158" pos:column="44">{
		<expr_stmt><expr><call><name><name pos:line="159" pos:column="17">pAccess</name><op:operator pos:line="159" pos:column="24">-&gt;</op:operator><name pos:line="159" pos:column="26">SetLevel</name></name><argument_list pos:line="159" pos:column="34">(<argument><expr><name pos:line="159" pos:column="35">line</name></expr></argument>, <argument><expr><name pos:line="159" pos:column="41">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name pos:line="161" pos:column="9">void</name></type> <name pos:line="161" pos:column="14">IndicatorFill</name><parameter_list pos:line="161" pos:column="27">(<param><decl><type><name pos:line="161" pos:column="28">int</name></type> <name pos:line="161" pos:column="32">start</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="39">int</name></type> <name pos:line="161" pos:column="43">end</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="48">int</name></type> <name pos:line="161" pos:column="52">indicator</name></decl></param>, <param><decl><type><name pos:line="161" pos:column="63">int</name></type> <name pos:line="161" pos:column="67">value</name></decl></param>)</parameter_list> <block pos:line="161" pos:column="74">{
		<expr_stmt><expr><call><name><name pos:line="162" pos:column="17">pAccess</name><op:operator pos:line="162" pos:column="24">-&gt;</op:operator><name pos:line="162" pos:column="26">DecorationSetCurrentIndicator</name></name><argument_list pos:line="162" pos:column="55">(<argument><expr><name pos:line="162" pos:column="56">indicator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="163" pos:column="17">pAccess</name><op:operator pos:line="163" pos:column="24">-&gt;</op:operator><name pos:line="163" pos:column="26">DecorationFillRange</name></name><argument_list pos:line="163" pos:column="45">(<argument><expr><name pos:line="163" pos:column="46">start</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="53">value</name></expr></argument>, <argument><expr><name pos:line="163" pos:column="60">end</name> <op:operator pos:line="163" pos:column="64">-</op:operator> <name pos:line="163" pos:column="66">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name pos:line="166" pos:column="9">void</name></type> <name pos:line="166" pos:column="14">ChangeLexerState</name><parameter_list pos:line="166" pos:column="30">(<param><decl><type><name pos:line="166" pos:column="31">int</name></type> <name pos:line="166" pos:column="35">start</name></decl></param>, <param><decl><type><name pos:line="166" pos:column="42">int</name></type> <name pos:line="166" pos:column="46">end</name></decl></param>)</parameter_list> <block pos:line="166" pos:column="51">{
		<expr_stmt><expr><call><name><name pos:line="167" pos:column="17">pAccess</name><op:operator pos:line="167" pos:column="24">-&gt;</op:operator><name pos:line="167" pos:column="26">ChangeLexerState</name></name><argument_list pos:line="167" pos:column="42">(<argument><expr><name pos:line="167" pos:column="43">start</name></expr></argument>, <argument><expr><name pos:line="167" pos:column="50">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</class>

<cpp:ifdef pos:line="171" pos:column="1">#<cpp:directive pos:line="171" pos:column="2">ifdef</cpp:directive> <name pos:line="171" pos:column="8">SCI_NAMESPACE</name></cpp:ifdef>
}</block></namespace>
<cpp:endif pos:line="173" pos:column="1">#<cpp:directive pos:line="173" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:endif pos:line="175" pos:column="1">#<cpp:directive pos:line="175" pos:column="2">endif</cpp:directive></cpp:endif>
</unit>
