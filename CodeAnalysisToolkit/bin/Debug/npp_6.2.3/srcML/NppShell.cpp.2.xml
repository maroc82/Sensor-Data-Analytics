<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\tools\NppShell\src\NppShell.cpp" pos:tabs="8"><cpp:include pos:line="1" pos:column="1">#<cpp:directive pos:line="1" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="1" pos:column="10">"NppShell.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="2" pos:column="1">#<cpp:directive pos:line="2" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="2" pos:column="10">"Bitmap.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="3" pos:column="10">"resource.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">include</cpp:directive> <cpp:file pos:line="4" pos:column="10">&lt;shellapi.h&gt;</cpp:file></cpp:include>
<cpp:include pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">include</cpp:directive> <cpp:file pos:line="5" pos:column="10">&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:ifndef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifndef</cpp:directive> <name pos:line="7" pos:column="9">RGBA</name></cpp:ifndef>
<cpp:define pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="8" pos:column="9">RGBA</name><parameter_list pos:line="8" pos:column="13">(<param><type><name pos:line="8" pos:column="14">r</name></type></param>,<param><type><name pos:line="8" pos:column="16">g</name></type></param>,<param><type><name pos:line="8" pos:column="18">b</name></type></param>,<param><type><name pos:line="8" pos:column="20">a</name></type></param>)</parameter_list></cpp:macro>        <cpp:value pos:line="8" pos:column="30">((COLORREF)( (((DWORD)(BYTE)(a))&lt;&lt;24) |     RGB(r,g,b) ))</cpp:value></cpp:define>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif</cpp:directive></cpp:endif>



<comment type="line" pos:line="13" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="14" pos:column="1">//  Global variables</comment>
<comment type="line" pos:line="15" pos:column="1">//---------------------------------------------------------------------------</comment>
<decl_stmt><decl><type><name pos:line="16" pos:column="1">UINT</name></type> <name pos:line="16" pos:column="6">_cRef</name> <init pos:line="16" pos:column="12">= <expr><lit:literal type="number" pos:line="16" pos:column="14">0</lit:literal></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="16" pos:column="17">// COM Reference count.</comment>
<decl_stmt><decl><type><name pos:line="17" pos:column="1">HINSTANCE</name></type> <name pos:line="17" pos:column="11">_hModule</name> <init pos:line="17" pos:column="20">= <expr><name pos:line="17" pos:column="22">NULL</name></expr></init></decl>;</decl_stmt> <comment type="line" pos:line="17" pos:column="28">// DLL Module.</comment>

<comment type="line" pos:line="19" pos:column="1">//Some global default values for registering the DLL</comment>

<comment type="line" pos:line="21" pos:column="1">//Menu</comment>
<decl_stmt><decl><type><name pos:line="22" pos:column="1">TCHAR</name></type> <name><name pos:line="22" pos:column="7">szNppName</name><index pos:line="22" pos:column="16">[]</index></name> <init pos:line="22" pos:column="19">= <expr><call><name pos:line="22" pos:column="21">TEXT</name><argument_list pos:line="22" pos:column="25">(<argument><expr><lit:literal type="string" pos:line="22" pos:column="26">"notepad++.exe"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="23" pos:column="1">TCHAR</name></type> <name><name pos:line="23" pos:column="7">szDefaultMenutext</name><index pos:line="23" pos:column="24">[]</index></name> <init pos:line="23" pos:column="27">= <expr><call><name pos:line="23" pos:column="29">TEXT</name><argument_list pos:line="23" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="23" pos:column="34">"Edit with &amp;Notepad++"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef</cpp:directive> <name pos:line="25" pos:column="8">WIN64</name></cpp:ifdef>
<decl_stmt><decl><type><name pos:line="26" pos:column="1">TCHAR</name></type> <name><name pos:line="26" pos:column="7">szShellExtensionTitle</name><index pos:line="26" pos:column="28">[]</index></name> <init pos:line="26" pos:column="31">= <expr><call><name pos:line="26" pos:column="33">TEXT</name><argument_list pos:line="26" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="26" pos:column="38">"ANotepad++64"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="27" pos:column="1">TCHAR</name></type> <name><name pos:line="27" pos:column="7">szShellExtensionKey</name><index pos:line="27" pos:column="26">[]</index></name> <init pos:line="27" pos:column="29">= <expr><call><name pos:line="27" pos:column="31">TEXT</name><argument_list pos:line="27" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="27" pos:column="36">"*\\shellex\\ContextMenuHandlers\\ANotepad++64"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name pos:line="29" pos:column="1">TCHAR</name></type> <name><name pos:line="29" pos:column="7">szShellExtensionTitle</name><index pos:line="29" pos:column="28">[]</index></name> <init pos:line="29" pos:column="31">= <expr><call><name pos:line="29" pos:column="33">TEXT</name><argument_list pos:line="29" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="29" pos:column="38">"ANotepad++"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="30" pos:column="1">TCHAR</name></type> <name><name pos:line="30" pos:column="7">szShellExtensionKey</name><index pos:line="30" pos:column="26">[]</index></name> <init pos:line="30" pos:column="29">= <expr><call><name pos:line="30" pos:column="31">TEXT</name><argument_list pos:line="30" pos:column="35">(<argument><expr><lit:literal type="string" pos:line="30" pos:column="36">"*\\shellex\\ContextMenuHandlers\\ANotepad++"</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif</cpp:directive></cpp:endif>

<cpp:define pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="33" pos:column="9">szHelpTextA</name></cpp:macro> <cpp:value pos:line="33" pos:column="21">"Edits the selected file(s) with Notepad++"</cpp:value></cpp:define>
<cpp:define pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="34" pos:column="9">szHelpTextW</name></cpp:macro> <cpp:value pos:line="34" pos:column="21">L"Edits the selected file(s) with Notepad++"</cpp:value></cpp:define>
<decl_stmt><decl><type><name pos:line="35" pos:column="1">TCHAR</name></type> <name><name pos:line="35" pos:column="7">szMenuTitle</name><index pos:line="35" pos:column="18">[<expr><name pos:line="35" pos:column="19">TITLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="36" pos:column="1">TCHAR</name></type> <name><name pos:line="36" pos:column="7">szDefaultCustomcommand</name><index pos:line="36" pos:column="29">[]</index></name> <init pos:line="36" pos:column="32">= <expr><call><name pos:line="36" pos:column="34">TEXT</name><argument_list pos:line="36" pos:column="38">(<argument><expr><lit:literal type="string" pos:line="36" pos:column="39">""</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line" pos:line="37" pos:column="1">//Icon</comment>
<decl_stmt><decl><type><name pos:line="38" pos:column="1">DWORD</name></type> <name pos:line="38" pos:column="7">isDynamic</name> <init pos:line="38" pos:column="17">= <expr><lit:literal type="number" pos:line="38" pos:column="19">1</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="39" pos:column="1">DWORD</name></type> <name pos:line="39" pos:column="7">maxText</name> <init pos:line="39" pos:column="15">= <expr><lit:literal type="number" pos:line="39" pos:column="17">25</lit:literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name pos:line="40" pos:column="1">DWORD</name></type> <name pos:line="40" pos:column="7">showIcon</name> <init pos:line="40" pos:column="16">= <expr><lit:literal type="number" pos:line="40" pos:column="18">1</lit:literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:line="42" pos:column="1">//Forward function declarations</comment>
<extern pos:line="43" pos:column="1">extern <lit:literal type="string" pos:line="43" pos:column="8">"C"</lit:literal> <function_decl><type><name pos:line="43" pos:column="12">int</name> <name pos:line="43" pos:column="16">APIENTRY</name></type> <name pos:line="43" pos:column="25">DllMain</name><parameter_list pos:line="43" pos:column="32">(<param><decl><type><name pos:line="43" pos:column="33">HINSTANCE</name></type> <name pos:line="43" pos:column="43">hInstance</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="54">DWORD</name></type> <name pos:line="43" pos:column="60">dwReason</name></decl></param>, <param><decl><type><name pos:line="43" pos:column="70">LPVOID</name></type> <name pos:line="43" pos:column="77">lpReserved</name></decl></param>)</parameter_list>;</function_decl></extern>
<function_decl><type><name pos:line="44" pos:column="1">STDAPI</name></type> <name pos:line="44" pos:column="8">DllRegisterServer</name><parameter_list pos:line="44" pos:column="25">(<param><decl><type><name pos:line="44" pos:column="26">void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="45" pos:column="1">STDAPI</name></type> <name pos:line="45" pos:column="8">DllUnregisterServer</name><parameter_list pos:line="45" pos:column="27">(<param><decl><type><name pos:line="45" pos:column="28">void</name></type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name pos:line="47" pos:column="1">BOOL</name></type> <name pos:line="47" pos:column="6">RegisterServer</name><parameter_list pos:line="47" pos:column="20">()</parameter_list>;</function_decl>
<function_decl><type><name pos:line="48" pos:column="1">BOOL</name></type> <name pos:line="48" pos:column="6">UnregisterServer</name><parameter_list pos:line="48" pos:column="22">()</parameter_list>;</function_decl>
<function_decl><type><name pos:line="49" pos:column="1">void</name></type> <name pos:line="49" pos:column="6">MsgBox</name><parameter_list pos:line="49" pos:column="12">(<param><decl><type><name pos:line="49" pos:column="13">LPCTSTR</name></type> <name pos:line="49" pos:column="21">lpszMsg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="50" pos:column="1">void</name></type> <name pos:line="50" pos:column="6">MsgBoxError</name><parameter_list pos:line="50" pos:column="17">(<param><decl><type><name pos:line="50" pos:column="18">LPCTSTR</name></type> <name pos:line="50" pos:column="26">lpszMsg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="51" pos:column="1">BOOL</name></type> <name pos:line="51" pos:column="6">CheckNpp</name><parameter_list pos:line="51" pos:column="14">(<param><decl><type><name pos:line="51" pos:column="15">LPCTSTR</name></type> <name pos:line="51" pos:column="23">path</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="52" pos:column="1">INT_PTR</name> <name pos:line="52" pos:column="9">CALLBACK</name></type> <name pos:line="52" pos:column="18">DlgProcSettings</name><parameter_list pos:line="52" pos:column="33">(<param><decl><type><name pos:line="52" pos:column="34">HWND</name></type> <name pos:line="52" pos:column="39">hwndDlg</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="48">UINT</name></type> <name pos:line="52" pos:column="53">uMsg</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="59">WPARAM</name></type> <name pos:line="52" pos:column="66">wParam</name></decl></param>, <param><decl><type><name pos:line="52" pos:column="74">LPARAM</name></type> <name pos:line="52" pos:column="81">lParam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name pos:line="53" pos:column="1">void</name></type> <name pos:line="53" pos:column="6">InvalidateIcon</name><parameter_list pos:line="53" pos:column="20">(<param><decl><type><name pos:line="53" pos:column="21">HICON</name> <type:modifier pos:line="53" pos:column="27">*</type:modifier></type> <name pos:line="53" pos:column="29">iconSmall</name></decl></param>, <param><decl><type><name pos:line="53" pos:column="40">HICON</name> <type:modifier pos:line="53" pos:column="46">*</type:modifier></type> <name pos:line="53" pos:column="48">iconLarge</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">ifdef</cpp:directive> <name pos:line="55" pos:column="8">UNICODE</name></cpp:ifdef>
<cpp:define pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="56" pos:column="9">_ttoi</name></cpp:macro> <cpp:value pos:line="56" pos:column="15">_wtoi</cpp:value></cpp:define>
<cpp:else pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">else</cpp:directive></cpp:else>
<cpp:define pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">define</cpp:directive> <cpp:macro><name pos:line="58" pos:column="9">_ttoi</name></cpp:macro> <cpp:value pos:line="58" pos:column="15">atoi</cpp:value></cpp:define>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif</cpp:directive></cpp:endif>



<comment type="line" pos:line="63" pos:column="1">//Types</comment>
<struct pos:line="64" pos:column="1">struct <name pos:line="64" pos:column="8">DOREGSTRUCT</name> <block pos:line="64" pos:column="20">{<public type="default" pos:line="64" pos:column="21">
	<decl_stmt><decl><type><name pos:line="65" pos:column="9">HKEY</name></type>	<name pos:line="65" pos:column="17">hRootKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="66" pos:column="9">LPCTSTR</name></type>	<name pos:line="66" pos:column="17">szSubKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="67" pos:column="9">LPCTSTR</name></type>	<name pos:line="67" pos:column="17">lpszValueName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="68" pos:column="9">DWORD</name></type>	<name pos:line="68" pos:column="17">type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="69" pos:column="9">LPCTSTR</name></type>	<name pos:line="69" pos:column="17">szData</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="line" pos:line="72" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="73" pos:column="1">// DllMain</comment>
<comment type="line" pos:line="74" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="75" pos:column="1">int</name> <name pos:line="75" pos:column="5">APIENTRY</name></type> <name pos:line="75" pos:column="14">DllMain</name><parameter_list pos:line="75" pos:column="21">(<param><decl><type><name pos:line="75" pos:column="22">HINSTANCE</name></type> <name pos:line="75" pos:column="32">hInstance</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="43">DWORD</name></type> <name pos:line="75" pos:column="49">dwReason</name></decl></param>, <param><decl><type><name pos:line="75" pos:column="59">LPVOID</name></type></decl></param> <comment type="block" pos:line="75" pos:column="66">/*lpReserved*/</comment>)</parameter_list> <block pos:line="75" pos:column="82">{
	<if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">dwReason</name> <op:operator pos:line="76" pos:column="22">==</op:operator> <name pos:line="76" pos:column="25">DLL_PROCESS_ATTACH</name></expr>)</condition><then pos:line="76" pos:column="44"> <block pos:line="76" pos:column="45">{
		<expr_stmt><expr><name pos:line="77" pos:column="17">_hModule</name> <op:operator pos:line="77" pos:column="26">=</op:operator> <name pos:line="77" pos:column="28">hInstance</name></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="79" pos:column="9">return <expr><name pos:line="79" pos:column="16">TRUE</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="82" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="83" pos:column="1">// DllCanUnloadNow</comment>
<comment type="line" pos:line="84" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="85" pos:column="1">STDAPI</name></type> <name pos:line="85" pos:column="8">DllCanUnloadNow</name><parameter_list pos:line="85" pos:column="23">(<param><decl><type><name pos:line="85" pos:column="24">void</name></type></decl></param>)</parameter_list> <block pos:line="85" pos:column="30">{
	<return pos:line="86" pos:column="9">return <expr><op:operator pos:line="86" pos:column="16">(</op:operator><name pos:line="86" pos:column="17">_cRef</name> <op:operator pos:line="86" pos:column="23">==</op:operator> <lit:literal type="number" pos:line="86" pos:column="26">0</lit:literal> <op:operator pos:line="86" pos:column="28">?</op:operator> <name pos:line="86" pos:column="30">S_OK</name> <op:operator pos:line="86" pos:column="35">:</op:operator> <name pos:line="86" pos:column="37">S_FALSE</name><op:operator pos:line="86" pos:column="44">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="89" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="90" pos:column="1">// DllGetClassObject</comment>
<comment type="line" pos:line="91" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="92" pos:column="1">STDAPI</name></type> <name pos:line="92" pos:column="8">DllGetClassObject</name><parameter_list pos:line="92" pos:column="25">(<param><decl><type><name pos:line="92" pos:column="26">REFCLSID</name></type> <name pos:line="92" pos:column="35">rclsid</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="43">REFIID</name></type> <name pos:line="92" pos:column="50">riid</name></decl></param>, <param><decl><type><name pos:line="92" pos:column="56">LPVOID</name> <type:modifier pos:line="92" pos:column="63">*</type:modifier></type><name pos:line="92" pos:column="64">ppvOut</name></decl></param>)</parameter_list> <block pos:line="92" pos:column="72">{
	<expr_stmt><expr><op:operator pos:line="93" pos:column="9">*</op:operator><name pos:line="93" pos:column="10">ppvOut</name> <op:operator pos:line="93" pos:column="17">=</op:operator> <name pos:line="93" pos:column="19">NULL</name></expr>;</expr_stmt>
	<if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><call><name pos:line="94" pos:column="13">IsEqualIID</name><argument_list pos:line="94" pos:column="23">(<argument><expr><name pos:line="94" pos:column="24">rclsid</name></expr></argument>, <argument><expr><name pos:line="94" pos:column="32">CLSID_ShellExtension</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="94" pos:column="54"> <block pos:line="94" pos:column="55">{
		<decl_stmt><decl><type><name pos:line="95" pos:column="17">CShellExtClassFactory</name> <type:modifier pos:line="95" pos:column="39">*</type:modifier></type><name pos:line="95" pos:column="40">pcf</name> <init pos:line="95" pos:column="44">= <expr><op:operator pos:line="95" pos:column="46">new</op:operator> <name pos:line="95" pos:column="50">CShellExtClassFactory</name></expr></init></decl>;</decl_stmt>
		<return pos:line="96" pos:column="17">return <expr><call><name><name pos:line="96" pos:column="24">pcf</name><op:operator pos:line="96" pos:column="27">-&gt;</op:operator><name pos:line="96" pos:column="29">QueryInterface</name></name><argument_list pos:line="96" pos:column="43">(<argument><expr><name pos:line="96" pos:column="44">riid</name></expr></argument>, <argument><expr><name pos:line="96" pos:column="50">ppvOut</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if>
	<return pos:line="98" pos:column="9">return <expr><name pos:line="98" pos:column="16">CLASS_E_CLASSNOTAVAILABLE</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="101" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="102" pos:column="1">// DllRegisterServer</comment>
<comment type="line" pos:line="103" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="104" pos:column="1">STDAPI</name></type> <name pos:line="104" pos:column="8">DllRegisterServer</name><parameter_list pos:line="104" pos:column="25">(<param><decl><type><name pos:line="104" pos:column="26">void</name></type></decl></param>)</parameter_list> <block pos:line="104" pos:column="32">{
	<return pos:line="105" pos:column="9">return <expr><op:operator pos:line="105" pos:column="16">(</op:operator><call><name pos:line="105" pos:column="17">RegisterServer</name><argument_list pos:line="105" pos:column="31">()</argument_list></call> <op:operator pos:line="105" pos:column="34">?</op:operator> <name pos:line="105" pos:column="36">S_OK</name> <op:operator pos:line="105" pos:column="41">:</op:operator> <name pos:line="105" pos:column="43">E_FAIL</name><op:operator pos:line="105" pos:column="49">)</op:operator></expr>;</return>
}</block></function>

<comment type="line" pos:line="108" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="109" pos:column="1">// DllUnregisterServer</comment>
<comment type="line" pos:line="110" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="111" pos:column="1">STDAPI</name></type> <name pos:line="111" pos:column="8">DllUnregisterServer</name><parameter_list pos:line="111" pos:column="27">(<param><decl><type><name pos:line="111" pos:column="28">void</name></type></decl></param>)</parameter_list> <block pos:line="111" pos:column="34">{
	<return pos:line="112" pos:column="9">return <expr><op:operator pos:line="112" pos:column="16">(</op:operator><call><name pos:line="112" pos:column="17">UnregisterServer</name><argument_list pos:line="112" pos:column="33">()</argument_list></call> <op:operator pos:line="112" pos:column="36">?</op:operator> <name pos:line="112" pos:column="38">S_OK</name> <op:operator pos:line="112" pos:column="43">:</op:operator> <name pos:line="112" pos:column="45">E_FAIL</name><op:operator pos:line="112" pos:column="51">)</op:operator></expr>;</return>
}</block></function>

<function><type><name pos:line="115" pos:column="1">STDAPI</name></type> <name pos:line="115" pos:column="8">DllInstall</name><parameter_list pos:line="115" pos:column="18">(<param><decl><type><name pos:line="115" pos:column="19">BOOL</name></type> <name pos:line="115" pos:column="24">bInstall</name></decl></param>, <param><decl><type><name pos:line="115" pos:column="34">LPCWSTR</name></type></decl></param> <comment type="block" pos:line="115" pos:column="42">/*pszCmdLine*/</comment>)</parameter_list> <block pos:line="115" pos:column="58">{
	<if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><name pos:line="116" pos:column="13">bInstall</name></expr>)</condition><then pos:line="116" pos:column="22"> <block pos:line="116" pos:column="23">{
		<expr_stmt><expr><call><name pos:line="117" pos:column="17">DialogBox</name><argument_list pos:line="117" pos:column="26">(<argument><expr><name pos:line="117" pos:column="27">_hModule</name></expr></argument>, <argument><expr><call><name pos:line="117" pos:column="37">MAKEINTRESOURCE</name><argument_list pos:line="117" pos:column="52">(<argument><expr><name pos:line="117" pos:column="53">IDD_DIALOG_SETTINGS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="117" pos:column="75">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="117" pos:column="81">(</op:operator><name pos:line="117" pos:column="82">DLGPROC</name><op:operator pos:line="117" pos:column="89">)</op:operator><op:operator pos:line="117" pos:column="90">&amp;</op:operator><name pos:line="117" pos:column="91">DlgProcSettings</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="118" pos:column="17">return <expr><name pos:line="118" pos:column="24">S_OK</name></expr>;</return>
	}</block></then> <else pos:line="119" pos:column="11">else <block pos:line="119" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="120" pos:column="17">MsgBoxError</name><argument_list pos:line="120" pos:column="28">(<argument><expr><call><name pos:line="120" pos:column="29">TEXT</name><argument_list pos:line="120" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="120" pos:column="34">"Uninstalling not supported, use DllUnregisterServer instead"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="121" pos:column="17">return <expr><name pos:line="121" pos:column="24">E_NOTIMPL</name></expr>;</return>
	}</block></else></if>
}</block></function>

<comment type="line" pos:line="125" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="126" pos:column="1">// RegisterServer</comment>
<comment type="line" pos:line="127" pos:column="1">// Create registry entries and setup the shell extension</comment>
<comment type="line" pos:line="128" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="129" pos:column="1">BOOL</name></type> <name pos:line="129" pos:column="6">RegisterServer</name><parameter_list pos:line="129" pos:column="20">()</parameter_list> <block pos:line="129" pos:column="23">{
	<decl_stmt><decl><type><name pos:line="130" pos:column="9">int</name></type>      <name pos:line="130" pos:column="18">i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="131" pos:column="9">HKEY</name></type>     <name pos:line="131" pos:column="18">hKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="132" pos:column="9">LRESULT</name></type>  <name pos:line="132" pos:column="18">lResult</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="133" pos:column="9">DWORD</name></type>    <name pos:line="133" pos:column="18">dwDisp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="134" pos:column="9">TCHAR</name></type>    <name><name pos:line="134" pos:column="18">szSubKey</name><index pos:line="134" pos:column="26">[<expr><name pos:line="134" pos:column="27">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="135" pos:column="9">TCHAR</name></type>    <name><name pos:line="135" pos:column="18">szModule</name><index pos:line="135" pos:column="26">[<expr><name pos:line="135" pos:column="27">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="136" pos:column="9">TCHAR</name></type>    <name><name pos:line="136" pos:column="18">szDefaultPath</name><index pos:line="136" pos:column="31">[<expr><name pos:line="136" pos:column="32">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="138" pos:column="9">GetModuleFileName</name><argument_list pos:line="138" pos:column="26">(<argument><expr><name pos:line="138" pos:column="27">_hModule</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="37">szDefaultPath</name></expr></argument>, <argument><expr><name pos:line="138" pos:column="52">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="139" pos:column="9">TCHAR</name><type:modifier pos:line="139" pos:column="14">*</type:modifier></type> <name pos:line="139" pos:column="16">pDest</name> <init pos:line="139" pos:column="22">= <expr><call><name pos:line="139" pos:column="24">StrRChr</name><argument_list pos:line="139" pos:column="31">(<argument><expr><name pos:line="139" pos:column="32">szDefaultPath</name></expr></argument>, <argument><expr><name pos:line="139" pos:column="47">NULL</name></expr></argument>, <argument><expr><call><name pos:line="139" pos:column="53">TEXT</name><argument_list pos:line="139" pos:column="57">(<argument><expr><lit:literal type="char" pos:line="139" pos:column="58">'\\'</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name pos:line="140" pos:column="9">pDest</name><op:operator pos:line="140" pos:column="14">++</op:operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="141" pos:column="9">pDest</name><index pos:line="141" pos:column="14">[<expr><lit:literal type="number" pos:line="141" pos:column="15">0</lit:literal></expr>]</index></name> <op:operator pos:line="141" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="141" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="142" pos:column="9">lstrcat</name><argument_list pos:line="142" pos:column="16">(<argument><expr><name pos:line="142" pos:column="17">szDefaultPath</name></expr></argument>, <argument><expr><name pos:line="142" pos:column="32">szNppName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><op:operator pos:line="144" pos:column="13">!</op:operator><call><name pos:line="144" pos:column="14">CheckNpp</name><argument_list pos:line="144" pos:column="22">(<argument><expr><name pos:line="144" pos:column="23">szDefaultPath</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="144" pos:column="38"> <block pos:line="144" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="145" pos:column="17">MsgBoxError</name><argument_list pos:line="145" pos:column="28">(<argument><expr><call><name pos:line="145" pos:column="29">TEXT</name><argument_list pos:line="145" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="145" pos:column="34">"To register the Notepad++ shell extension properly,\r\nplace NppShell.dll in the same directory as the Notepad++ executable."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line" pos:line="146" pos:column="17">//return FALSE;</comment>
	}</block></then></if>

	<comment type="line" pos:line="149" pos:column="9">//get this app's path and file name</comment>
	<expr_stmt><expr><call><name pos:line="150" pos:column="9">GetModuleFileName</name><argument_list pos:line="150" pos:column="26">(<argument><expr><name pos:line="150" pos:column="27">_hModule</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="37">szModule</name></expr></argument>, <argument><expr><name pos:line="150" pos:column="47">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier pos:line="152" pos:column="9">static</specifier> <name pos:line="152" pos:column="16">DOREGSTRUCT</name></type> <name><name pos:line="152" pos:column="28">ClsidEntries</name><index pos:line="152" pos:column="40">[]</index></name> <init pos:line="152" pos:column="43">= <expr><block pos:line="152" pos:column="45">{
		<expr><block pos:line="153" pos:column="17">{<expr><name pos:line="153" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="153" pos:column="41">TEXT</name><argument_list pos:line="153" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="153" pos:column="46">"CLSID\\%s"</lit:literal></expr></argument>)</argument_list></call></expr>,									<expr><name pos:line="153" pos:column="129">NULL</name></expr>,					<expr><name pos:line="153" pos:column="169">REG_SZ</name></expr>,		<expr><name pos:line="153" pos:column="185">szShellExtensionTitle</name></expr>}</block></expr>,
		<expr><block pos:line="154" pos:column="17">{<expr><name pos:line="154" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="154" pos:column="41">TEXT</name><argument_list pos:line="154" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="154" pos:column="46">"CLSID\\%s\\InprocServer32"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><name pos:line="154" pos:column="113">NULL</name></expr>,					<expr><name pos:line="154" pos:column="153">REG_SZ</name></expr>,		<expr><name pos:line="154" pos:column="169">szModule</name></expr>}</block></expr>,
		<expr><block pos:line="155" pos:column="17">{<expr><name pos:line="155" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="155" pos:column="41">TEXT</name><argument_list pos:line="155" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="46">"CLSID\\%s\\InprocServer32"</lit:literal></expr></argument>)</argument_list></call></expr>,					<expr><call><name pos:line="155" pos:column="113">TEXT</name><argument_list pos:line="155" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="155" pos:column="118">"ThreadingModel"</lit:literal></expr></argument>)</argument_list></call></expr>,	<expr><name pos:line="155" pos:column="137">REG_SZ</name></expr>,		<macro><name pos:line="155" pos:column="153">TEXT</name><argument_list pos:line="155" pos:column="157">(<argument pos:line="155" pos:column="158">"Apartment"</argument>)</argument_list></macro>}</block></expr>,

		<comment type="line" pos:line="157" pos:column="17">//Settings</comment>
		<comment type="line" pos:line="158" pos:column="17">// Context menu</comment>
		<expr><block pos:line="159" pos:column="17">{<expr><name pos:line="159" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="159" pos:column="41">TEXT</name><argument_list pos:line="159" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="46">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><call><name pos:line="159" pos:column="113">TEXT</name><argument_list pos:line="159" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="159" pos:column="118">"Title"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><name pos:line="159" pos:column="145">REG_SZ</name></expr>,		<expr><name pos:line="159" pos:column="161">szDefaultMenutext</name></expr>}</block></expr>,
		<expr><block pos:line="160" pos:column="17">{<expr><name pos:line="160" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="160" pos:column="41">TEXT</name><argument_list pos:line="160" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="46">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><call><name pos:line="160" pos:column="113">TEXT</name><argument_list pos:line="160" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="160" pos:column="118">"Path"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><name pos:line="160" pos:column="145">REG_SZ</name></expr>,		<expr><name pos:line="160" pos:column="161">szDefaultPath</name></expr>}</block></expr>,
		<expr><block pos:line="161" pos:column="17">{<expr><name pos:line="161" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="161" pos:column="41">TEXT</name><argument_list pos:line="161" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="46">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><call><name pos:line="161" pos:column="113">TEXT</name><argument_list pos:line="161" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="161" pos:column="118">"Custom"</lit:literal></expr></argument>)</argument_list></call></expr>,			<expr><name pos:line="161" pos:column="145">REG_SZ</name></expr>,		<expr><name pos:line="161" pos:column="161">szDefaultCustomcommand</name></expr>}</block></expr>,
		<expr><block pos:line="162" pos:column="17">{<expr><name pos:line="162" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="162" pos:column="41">TEXT</name><argument_list pos:line="162" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="46">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><call><name pos:line="162" pos:column="113">TEXT</name><argument_list pos:line="162" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="162" pos:column="118">"ShowIcon"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><name pos:line="162" pos:column="145">REG_DWORD</name></expr>,	<expr><op:operator pos:line="162" pos:column="161">(</op:operator><name pos:line="162" pos:column="162">LPTSTR</name><op:operator pos:line="162" pos:column="168">)</op:operator><op:operator pos:line="162" pos:column="169">&amp;</op:operator><name pos:line="162" pos:column="170">showIcon</name></expr>}</block></expr>,
		<comment type="line" pos:line="163" pos:column="17">// Icon</comment>
		<expr><block pos:line="164" pos:column="17">{<expr><name pos:line="164" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="164" pos:column="41">TEXT</name><argument_list pos:line="164" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="46">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><call><name pos:line="164" pos:column="113">TEXT</name><argument_list pos:line="164" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="164" pos:column="118">"Dynamic"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><name pos:line="164" pos:column="145">REG_DWORD</name></expr>,	<expr><op:operator pos:line="164" pos:column="161">(</op:operator><name pos:line="164" pos:column="162">LPTSTR</name><op:operator pos:line="164" pos:column="168">)</op:operator><op:operator pos:line="164" pos:column="169">&amp;</op:operator><name pos:line="164" pos:column="170">isDynamic</name></expr>}</block></expr>,
		<expr><block pos:line="165" pos:column="17">{<expr><name pos:line="165" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><call><name pos:line="165" pos:column="41">TEXT</name><argument_list pos:line="165" pos:column="45">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="46">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr>,						<expr><call><name pos:line="165" pos:column="113">TEXT</name><argument_list pos:line="165" pos:column="117">(<argument><expr><lit:literal type="string" pos:line="165" pos:column="118">"Maxtext"</lit:literal></expr></argument>)</argument_list></call></expr>,		<expr><name pos:line="165" pos:column="145">REG_DWORD</name></expr>,	<expr><op:operator pos:line="165" pos:column="161">(</op:operator><name pos:line="165" pos:column="162">LPTSTR</name><op:operator pos:line="165" pos:column="168">)</op:operator><op:operator pos:line="165" pos:column="169">&amp;</op:operator><name pos:line="165" pos:column="170">maxText</name></expr>}</block></expr>,

		<comment type="line" pos:line="167" pos:column="17">//Registration</comment>
		<comment type="line" pos:line="168" pos:column="17">// Context menu</comment>
		<expr><block pos:line="169" pos:column="17">{<expr><name pos:line="169" pos:column="18">HKEY_CLASSES_ROOT</name></expr>,	<expr><name pos:line="169" pos:column="41">szShellExtensionKey</name></expr>,	<expr><name pos:line="169" pos:column="65">NULL</name></expr>,					<expr><name pos:line="169" pos:column="105">REG_SZ</name></expr>,		<expr><name pos:line="169" pos:column="121">szGUID</name></expr>}</block></expr>,
		<comment type="line" pos:line="170" pos:column="17">// Icon</comment>
		<comment type="line" pos:line="171" pos:column="17">//{HKEY_CLASSES_ROOT,	TEXT("Notepad++_file\\shellex\\IconHandler"),		NULL,					REG_SZ,		szGUID},</comment>

		<expr><block pos:line="173" pos:column="17">{<expr><name pos:line="173" pos:column="18">NULL</name></expr>,				<expr><name pos:line="173" pos:column="49">NULL</name></expr>,												<expr><name pos:line="173" pos:column="145">NULL</name></expr>,					<expr><name pos:line="173" pos:column="185">REG_SZ</name></expr>,		<expr><name pos:line="173" pos:column="201">NULL</name></expr>}</block></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<comment type="line" pos:line="176" pos:column="9">// First clear any old entries</comment>
	<expr_stmt><expr><call><name pos:line="177" pos:column="9">UnregisterServer</name><argument_list pos:line="177" pos:column="25">()</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="179" pos:column="9">// Register the CLSID entries</comment>
	<for pos:line="180" pos:column="9">for(<init><expr><name pos:line="180" pos:column="13">i</name> <op:operator pos:line="180" pos:column="15">=</op:operator> <lit:literal type="number" pos:line="180" pos:column="17">0</lit:literal></expr>;</init> <condition><expr><name><name pos:line="180" pos:column="20">ClsidEntries</name><index pos:line="180" pos:column="32">[<expr><name pos:line="180" pos:column="33">i</name></expr>]</index></name><op:operator pos:line="180" pos:column="35">.</op:operator><name pos:line="180" pos:column="36">hRootKey</name></expr>;</condition> <incr><expr><name pos:line="180" pos:column="46">i</name><op:operator pos:line="180" pos:column="47">++</op:operator></expr></incr>) <block pos:line="180" pos:column="51">{
		<expr_stmt><expr><call><name pos:line="181" pos:column="17">wsprintf</name><argument_list pos:line="181" pos:column="25">(<argument><expr><name pos:line="181" pos:column="26">szSubKey</name></expr></argument>, <argument><expr><name><name pos:line="181" pos:column="36">ClsidEntries</name><index pos:line="181" pos:column="48">[<expr><name pos:line="181" pos:column="49">i</name></expr>]</index></name><op:operator pos:line="181" pos:column="51">.</op:operator><name pos:line="181" pos:column="52">szSubKey</name></expr></argument>, <argument><expr><name pos:line="181" pos:column="62">szGUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="182" pos:column="17">lResult</name> <op:operator pos:line="182" pos:column="25">=</op:operator> <call><name pos:line="182" pos:column="27">RegCreateKeyEx</name><argument_list pos:line="182" pos:column="41">(<argument><expr><name><name pos:line="182" pos:column="42">ClsidEntries</name><index pos:line="182" pos:column="54">[<expr><name pos:line="182" pos:column="55">i</name></expr>]</index></name><op:operator pos:line="182" pos:column="57">.</op:operator><name pos:line="182" pos:column="58">hRootKey</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="68">szSubKey</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="182" pos:column="78">0</lit:literal></expr></argument>, <argument><expr><name pos:line="182" pos:column="81">NULL</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="87">REG_OPTION_NON_VOLATILE</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="112">KEY_WRITE</name></expr></argument>, <argument><expr><name pos:line="182" pos:column="123">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="182" pos:column="129">&amp;</op:operator><name pos:line="182" pos:column="130">hKey</name></expr></argument>, <argument><expr><op:operator pos:line="182" pos:column="136">&amp;</op:operator><name pos:line="182" pos:column="137">dwDisp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="183" pos:column="17">if <condition pos:line="183" pos:column="20">(<expr><name pos:line="183" pos:column="21">NOERROR</name> <op:operator pos:line="183" pos:column="29">==</op:operator> <name pos:line="183" pos:column="32">lResult</name></expr>)</condition><then pos:line="183" pos:column="40"> <block pos:line="183" pos:column="41">{
			<decl_stmt><decl><type><name pos:line="184" pos:column="25">TCHAR</name></type> <name><name pos:line="184" pos:column="31">szData</name><index pos:line="184" pos:column="37">[<expr><name pos:line="184" pos:column="38">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
			<comment type="line" pos:line="185" pos:column="25">// If necessary, create the value string</comment>
			<if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><name><name pos:line="186" pos:column="29">ClsidEntries</name><index pos:line="186" pos:column="41">[<expr><name pos:line="186" pos:column="42">i</name></expr>]</index></name><op:operator pos:line="186" pos:column="44">.</op:operator><name pos:line="186" pos:column="45">type</name> <op:operator pos:line="186" pos:column="50">==</op:operator> <name pos:line="186" pos:column="53">REG_SZ</name></expr>)</condition><then pos:line="186" pos:column="60"> <block pos:line="186" pos:column="61">{
				<expr_stmt><expr><call><name pos:line="187" pos:column="33">wsprintf</name><argument_list pos:line="187" pos:column="41">(<argument><expr><name pos:line="187" pos:column="42">szData</name></expr></argument>, <argument><expr><name><name pos:line="187" pos:column="50">ClsidEntries</name><index pos:line="187" pos:column="62">[<expr><name pos:line="187" pos:column="63">i</name></expr>]</index></name><op:operator pos:line="187" pos:column="65">.</op:operator><name pos:line="187" pos:column="66">szData</name></expr></argument>, <argument><expr><name pos:line="187" pos:column="74">szModule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="188" pos:column="33">lResult</name> <op:operator pos:line="188" pos:column="41">=</op:operator> <call><name pos:line="188" pos:column="43">RegSetValueEx</name><argument_list pos:line="188" pos:column="56">(<argument><expr><name pos:line="188" pos:column="57">hKey</name></expr></argument>, <argument><expr><name><name pos:line="188" pos:column="63">ClsidEntries</name><index pos:line="188" pos:column="75">[<expr><name pos:line="188" pos:column="76">i</name></expr>]</index></name><op:operator pos:line="188" pos:column="78">.</op:operator><name pos:line="188" pos:column="79">lpszValueName</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="188" pos:column="94">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="188" pos:column="97">ClsidEntries</name><index pos:line="188" pos:column="109">[<expr><name pos:line="188" pos:column="110">i</name></expr>]</index></name><op:operator pos:line="188" pos:column="112">.</op:operator><name pos:line="188" pos:column="113">type</name></expr></argument>, <argument><expr><op:operator pos:line="188" pos:column="119">(</op:operator><name pos:line="188" pos:column="120">LPBYTE</name><op:operator pos:line="188" pos:column="126">)</op:operator><name pos:line="188" pos:column="127">szData</name></expr></argument>, <argument><expr><op:operator pos:line="188" pos:column="135">(</op:operator><call><name pos:line="188" pos:column="136">lstrlen</name><argument_list pos:line="188" pos:column="143">(<argument><expr><name pos:line="188" pos:column="144">szData</name></expr></argument>)</argument_list></call> <op:operator pos:line="188" pos:column="152">+</op:operator> <lit:literal type="number" pos:line="188" pos:column="154">1</lit:literal><op:operator pos:line="188" pos:column="155">)</op:operator> <op:operator pos:line="188" pos:column="157">*</op:operator> <sizeof pos:line="188" pos:column="159">sizeof<argument_list pos:line="188" pos:column="165">(<argument><expr><name pos:line="188" pos:column="166">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else pos:line="189" pos:column="27">else <block pos:line="189" pos:column="32">{
				<expr_stmt><expr><name pos:line="190" pos:column="33">lResult</name> <op:operator pos:line="190" pos:column="41">=</op:operator> <call><name pos:line="190" pos:column="43">RegSetValueEx</name><argument_list pos:line="190" pos:column="56">(<argument><expr><name pos:line="190" pos:column="57">hKey</name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="63">ClsidEntries</name><index pos:line="190" pos:column="75">[<expr><name pos:line="190" pos:column="76">i</name></expr>]</index></name><op:operator pos:line="190" pos:column="78">.</op:operator><name pos:line="190" pos:column="79">lpszValueName</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="190" pos:column="94">0</lit:literal></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="97">ClsidEntries</name><index pos:line="190" pos:column="109">[<expr><name pos:line="190" pos:column="110">i</name></expr>]</index></name><op:operator pos:line="190" pos:column="112">.</op:operator><name pos:line="190" pos:column="113">type</name></expr></argument>, <argument><expr><op:operator pos:line="190" pos:column="119">(</op:operator><name pos:line="190" pos:column="120">LPBYTE</name><op:operator pos:line="190" pos:column="126">)</op:operator><name><name pos:line="190" pos:column="127">ClsidEntries</name><index pos:line="190" pos:column="139">[<expr><name pos:line="190" pos:column="140">i</name></expr>]</index></name><op:operator pos:line="190" pos:column="142">.</op:operator><name pos:line="190" pos:column="143">szData</name></expr></argument>, <argument><expr><sizeof pos:line="190" pos:column="151">sizeof<argument_list pos:line="190" pos:column="157">(<argument><expr><name pos:line="190" pos:column="158">DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name pos:line="192" pos:column="25">RegCloseKey</name><argument_list pos:line="192" pos:column="36">(<argument><expr><name pos:line="192" pos:column="37">hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else pos:line="194" pos:column="17">else
			<return pos:line="195" pos:column="25">return <expr><name pos:line="195" pos:column="32">FALSE</name></expr>;</return></else></if>
	}</block></for>
	<return pos:line="197" pos:column="9">return <expr><name pos:line="197" pos:column="16">TRUE</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="200" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="201" pos:column="1">// UnregisterServer</comment>
<comment type="line" pos:line="202" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="203" pos:column="1">BOOL</name></type> <name pos:line="203" pos:column="6">UnregisterServer</name><parameter_list pos:line="203" pos:column="22">()</parameter_list> <block pos:line="203" pos:column="25">{
	<decl_stmt><decl><type><name pos:line="204" pos:column="9">TCHAR</name></type> <name><name pos:line="204" pos:column="15">szKeyTemp</name><index pos:line="204" pos:column="24">[<expr><name pos:line="204" pos:column="25">MAX_PATH</name> <op:operator pos:line="204" pos:column="34">+</op:operator> <name pos:line="204" pos:column="36">GUID_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="206" pos:column="9">RegDeleteKey</name><argument_list pos:line="206" pos:column="21">(<argument><expr><name pos:line="206" pos:column="22">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="206" pos:column="41">szShellExtensionKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="208" pos:column="9">wsprintf</name><argument_list pos:line="208" pos:column="17">(<argument><expr><name pos:line="208" pos:column="18">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="208" pos:column="29">TEXT</name><argument_list pos:line="208" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="208" pos:column="34">"Notepad++_file\\shellex\\IconHandler"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="209" pos:column="9">RegDeleteKey</name><argument_list pos:line="209" pos:column="21">(<argument><expr><name pos:line="209" pos:column="22">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="209" pos:column="41">szKeyTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="210" pos:column="9">wsprintf</name><argument_list pos:line="210" pos:column="17">(<argument><expr><name pos:line="210" pos:column="18">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="210" pos:column="29">TEXT</name><argument_list pos:line="210" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="210" pos:column="34">"Notepad++_file\\shellex"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="211" pos:column="9">RegDeleteKey</name><argument_list pos:line="211" pos:column="21">(<argument><expr><name pos:line="211" pos:column="22">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="211" pos:column="41">szKeyTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="213" pos:column="9">wsprintf</name><argument_list pos:line="213" pos:column="17">(<argument><expr><name pos:line="213" pos:column="18">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="213" pos:column="29">TEXT</name><argument_list pos:line="213" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="213" pos:column="34">"CLSID\\%s\\InprocServer32"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="213" pos:column="64">szGUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="214" pos:column="9">RegDeleteKey</name><argument_list pos:line="214" pos:column="21">(<argument><expr><name pos:line="214" pos:column="22">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="214" pos:column="41">szKeyTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="215" pos:column="9">wsprintf</name><argument_list pos:line="215" pos:column="17">(<argument><expr><name pos:line="215" pos:column="18">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="215" pos:column="29">TEXT</name><argument_list pos:line="215" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="215" pos:column="34">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="215" pos:column="58">szGUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="216" pos:column="9">RegDeleteKey</name><argument_list pos:line="216" pos:column="21">(<argument><expr><name pos:line="216" pos:column="22">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="216" pos:column="41">szKeyTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="217" pos:column="9">wsprintf</name><argument_list pos:line="217" pos:column="17">(<argument><expr><name pos:line="217" pos:column="18">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="217" pos:column="29">TEXT</name><argument_list pos:line="217" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="217" pos:column="34">"CLSID\\%s"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="217" pos:column="48">szGUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="218" pos:column="9">RegDeleteKey</name><argument_list pos:line="218" pos:column="21">(<argument><expr><name pos:line="218" pos:column="22">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="218" pos:column="41">szKeyTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:line="220" pos:column="9">return <expr><name pos:line="220" pos:column="16">TRUE</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="223" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="224" pos:column="1">// MsgBox</comment>
<comment type="line" pos:line="225" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="226" pos:column="1">void</name></type> <name pos:line="226" pos:column="6">MsgBox</name><parameter_list pos:line="226" pos:column="12">(<param><decl><type><name pos:line="226" pos:column="13">LPCTSTR</name></type> <name pos:line="226" pos:column="21">lpszMsg</name></decl></param>)</parameter_list> <block pos:line="226" pos:column="30">{
	<expr_stmt><expr><call><name pos:line="227" pos:column="9">MessageBox</name><argument_list pos:line="227" pos:column="19">(<argument><expr><name pos:line="227" pos:column="20">NULL</name></expr></argument>,
		<argument><expr><name pos:line="228" pos:column="17">lpszMsg</name></expr></argument>,
		<argument><expr><call><name pos:line="229" pos:column="17">TEXT</name><argument_list pos:line="229" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="229" pos:column="22">"Notepad++ Extension"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name pos:line="230" pos:column="17">MB_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="233" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="234" pos:column="1">// MsgBoxError</comment>
<comment type="line" pos:line="235" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="236" pos:column="1">void</name></type> <name pos:line="236" pos:column="6">MsgBoxError</name><parameter_list pos:line="236" pos:column="17">(<param><decl><type><name pos:line="236" pos:column="18">LPCTSTR</name></type> <name pos:line="236" pos:column="26">lpszMsg</name></decl></param>)</parameter_list> <block pos:line="236" pos:column="35">{
	<expr_stmt><expr><call><name pos:line="237" pos:column="9">MessageBox</name><argument_list pos:line="237" pos:column="19">(<argument><expr><name pos:line="237" pos:column="20">NULL</name></expr></argument>,
		<argument><expr><name pos:line="238" pos:column="17">lpszMsg</name></expr></argument>,
		<argument><expr><call><name pos:line="239" pos:column="17">TEXT</name><argument_list pos:line="239" pos:column="21">(<argument><expr><lit:literal type="string" pos:line="239" pos:column="22">"Notepad++ Extension: Error"</lit:literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name pos:line="240" pos:column="17">MB_OK</name> <op:operator pos:line="240" pos:column="23">|</op:operator> <name pos:line="240" pos:column="25">MB_ICONWARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" pos:line="243" pos:column="1">//---------------------------------------------------------------------------</comment>
<comment type="line" pos:line="244" pos:column="1">// CheckNpp</comment>
<comment type="line" pos:line="245" pos:column="1">// Check if the shell handler resides in the same directory as notepad++</comment>
<comment type="line" pos:line="246" pos:column="1">//---------------------------------------------------------------------------</comment>
<function><type><name pos:line="247" pos:column="1">BOOL</name></type> <name pos:line="247" pos:column="6">CheckNpp</name><parameter_list pos:line="247" pos:column="14">(<param><decl><type><name pos:line="247" pos:column="15">LPCTSTR</name></type> <name pos:line="247" pos:column="23">path</name></decl></param>)</parameter_list> <block pos:line="247" pos:column="29">{
	<decl_stmt><decl><type><name pos:line="248" pos:column="9">WIN32_FIND_DATA</name></type> <name pos:line="248" pos:column="25">fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="249" pos:column="9">HANDLE</name></type> <name pos:line="249" pos:column="16">findHandle</name></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="251" pos:column="9">findHandle</name> <op:operator pos:line="251" pos:column="20">=</op:operator> <call><name pos:line="251" pos:column="22">FindFirstFile</name><argument_list pos:line="251" pos:column="35">(<argument><expr><name pos:line="251" pos:column="36">path</name></expr></argument>, <argument><expr><op:operator pos:line="251" pos:column="42">&amp;</op:operator><name pos:line="251" pos:column="43">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="252" pos:column="9">if <condition pos:line="252" pos:column="12">(<expr><name pos:line="252" pos:column="13">findHandle</name> <op:operator pos:line="252" pos:column="24">==</op:operator> <name pos:line="252" pos:column="27">INVALID_HANDLE_VALUE</name></expr>)</condition><then pos:line="252" pos:column="48"> <block pos:line="252" pos:column="49">{
		<return pos:line="253" pos:column="17">return <expr><name pos:line="253" pos:column="24">FALSE</name></expr>;</return>
	}</block></then> <else pos:line="254" pos:column="11">else <block pos:line="254" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="255" pos:column="17">FindClose</name><argument_list pos:line="255" pos:column="26">(<argument><expr><name pos:line="255" pos:column="27">findHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<return pos:line="257" pos:column="9">return <expr><name pos:line="257" pos:column="16">TRUE</name></expr>;</return>
}</block></function>

<function><type><name pos:line="260" pos:column="1">INT_PTR</name> <name pos:line="260" pos:column="9">CALLBACK</name></type> <name pos:line="260" pos:column="18">DlgProcSettings</name><parameter_list pos:line="260" pos:column="33">(<param><decl><type><name pos:line="260" pos:column="34">HWND</name></type> <name pos:line="260" pos:column="39">hwndDlg</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="48">UINT</name></type> <name pos:line="260" pos:column="53">uMsg</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="59">WPARAM</name></type> <name pos:line="260" pos:column="66">wParam</name></decl></param>, <param><decl><type><name pos:line="260" pos:column="74">LPARAM</name></type> <name pos:line="260" pos:column="81">lParam</name></decl></param>)</parameter_list> <block pos:line="260" pos:column="89">{
	<decl_stmt><decl><type><specifier pos:line="261" pos:column="9">static</specifier> <name pos:line="261" pos:column="16">TCHAR</name></type> <name><name pos:line="261" pos:column="22">customCommand</name><index pos:line="261" pos:column="35">[<expr><name pos:line="261" pos:column="36">MAX_PATH</name></expr>]</index></name> <init pos:line="261" pos:column="46">= <expr><block pos:line="261" pos:column="48">{<expr><lit:literal type="number" pos:line="261" pos:column="49">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="262" pos:column="9">static</specifier> <name pos:line="262" pos:column="16">TCHAR</name></type> <name><name pos:line="262" pos:column="22">customText</name><index pos:line="262" pos:column="32">[<expr><name pos:line="262" pos:column="33">TITLE_SIZE</name></expr>]</index></name> <init pos:line="262" pos:column="45">= <expr><block pos:line="262" pos:column="47">{<expr><lit:literal type="number" pos:line="262" pos:column="48">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="263" pos:column="9">static</specifier> <name pos:line="263" pos:column="16">TCHAR</name></type> <name><name pos:line="263" pos:column="22">szKeyTemp</name><index pos:line="263" pos:column="31">[<expr><name pos:line="263" pos:column="32">MAX_PATH</name> <op:operator pos:line="263" pos:column="41">+</op:operator> <name pos:line="263" pos:column="43">GUID_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier pos:line="265" pos:column="9">static</specifier> <name pos:line="265" pos:column="16">DWORD</name></type> <name pos:line="265" pos:column="22">showMenu</name> <init pos:line="265" pos:column="31">= <expr><lit:literal type="number" pos:line="265" pos:column="33">2</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="265" pos:column="41">//0 off, 1 on, 2 unknown</comment>
	<decl_stmt><decl><type><specifier pos:line="266" pos:column="9">static</specifier> <name pos:line="266" pos:column="16">DWORD</name></type> <name pos:line="266" pos:column="22">useMenuIcon</name> <init pos:line="266" pos:column="34">= <expr><lit:literal type="number" pos:line="266" pos:column="36">1</lit:literal></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="266" pos:column="41">// 0 off, otherwise on</comment>

	<decl_stmt><decl><type><name pos:line="268" pos:column="9">HKEY</name></type> <name pos:line="268" pos:column="14">settingKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="269" pos:column="9">LONG</name></type> <name pos:line="269" pos:column="14">result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="270" pos:column="9">DWORD</name></type> <name pos:line="270" pos:column="15">size</name> <init pos:line="270" pos:column="20">= <expr><lit:literal type="number" pos:line="270" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>

	<switch pos:line="272" pos:column="9">switch<condition pos:line="272" pos:column="15">(<expr><name pos:line="272" pos:column="16">uMsg</name></expr>)</condition> <block pos:line="272" pos:column="22">{
		<case pos:line="273" pos:column="17">case <expr><name pos:line="273" pos:column="22">WM_INITDIALOG</name></expr>: <block pos:line="273" pos:column="37">{
			<expr_stmt><expr><call><name pos:line="274" pos:column="25">wsprintf</name><argument_list pos:line="274" pos:column="33">(<argument><expr><name pos:line="274" pos:column="34">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="274" pos:column="45">TEXT</name><argument_list pos:line="274" pos:column="49">(<argument><expr><lit:literal type="string" pos:line="274" pos:column="50">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="274" pos:column="74">szGUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="275" pos:column="25">result</name> <op:operator pos:line="275" pos:column="32">=</op:operator> <call><name pos:line="275" pos:column="34">RegOpenKeyEx</name><argument_list pos:line="275" pos:column="46">(<argument><expr><name pos:line="275" pos:column="47">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="275" pos:column="66">szKeyTemp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="275" pos:column="77">0</lit:literal></expr></argument>, <argument><expr><name pos:line="275" pos:column="80">KEY_READ</name></expr></argument>, <argument><expr><op:operator pos:line="275" pos:column="90">&amp;</op:operator><name pos:line="275" pos:column="91">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if pos:line="276" pos:column="25">if <condition pos:line="276" pos:column="28">(<expr><name pos:line="276" pos:column="29">result</name> <op:operator pos:line="276" pos:column="36">==</op:operator> <name pos:line="276" pos:column="39">ERROR_SUCCESS</name></expr>)</condition><then pos:line="276" pos:column="53"> <block pos:line="276" pos:column="54">{
				<expr_stmt><expr><name pos:line="277" pos:column="33">size</name> <op:operator pos:line="277" pos:column="38">=</op:operator> <sizeof pos:line="277" pos:column="40">sizeof<argument_list pos:line="277" pos:column="46">(<argument><expr><name pos:line="277" pos:column="47">TCHAR</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="277" pos:column="53">*</op:operator><name pos:line="277" pos:column="54">TITLE_SIZE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="278" pos:column="33">result</name> <op:operator pos:line="278" pos:column="40">=</op:operator> <call><name pos:line="278" pos:column="42">RegQueryValueEx</name><argument_list pos:line="278" pos:column="57">(<argument><expr><name pos:line="278" pos:column="58">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="278" pos:column="70">TEXT</name><argument_list pos:line="278" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="278" pos:column="75">"Title"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="278" pos:column="85">NULL</name></expr></argument>, <argument><expr><name pos:line="278" pos:column="91">NULL</name></expr></argument>, <argument><expr><call pos:line="278" pos:column="97">(<name pos:line="278" pos:column="98">LPBYTE</name>)<argument_list pos:line="278" pos:column="105">(<argument><expr><name pos:line="278" pos:column="106">customText</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="278" pos:column="119">&amp;</op:operator><name pos:line="278" pos:column="120">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="279" pos:column="33">if <condition pos:line="279" pos:column="36">(<expr><name pos:line="279" pos:column="37">result</name> <op:operator pos:line="279" pos:column="44">!=</op:operator> <name pos:line="279" pos:column="47">ERROR_SUCCESS</name></expr>)</condition><then pos:line="279" pos:column="61"> <block pos:line="279" pos:column="62">{
					<expr_stmt><expr><call><name pos:line="280" pos:column="41">lstrcpyn</name><argument_list pos:line="280" pos:column="49">(<argument><expr><name pos:line="280" pos:column="50">customText</name></expr></argument>, <argument><expr><name pos:line="280" pos:column="62">szDefaultMenutext</name></expr></argument>, <argument><expr><name pos:line="280" pos:column="81">TITLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

				<expr_stmt><expr><name pos:line="283" pos:column="33">size</name> <op:operator pos:line="283" pos:column="38">=</op:operator> <sizeof pos:line="283" pos:column="40">sizeof<argument_list pos:line="283" pos:column="46">(<argument><expr><name pos:line="283" pos:column="47">TCHAR</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="283" pos:column="53">*</op:operator><name pos:line="283" pos:column="54">MAX_PATH</name></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="284" pos:column="33">result</name> <op:operator pos:line="284" pos:column="40">=</op:operator> <call><name pos:line="284" pos:column="42">RegQueryValueEx</name><argument_list pos:line="284" pos:column="57">(<argument><expr><name pos:line="284" pos:column="58">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="284" pos:column="70">TEXT</name><argument_list pos:line="284" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="284" pos:column="75">"Custom"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="284" pos:column="86">NULL</name></expr></argument>, <argument><expr><name pos:line="284" pos:column="92">NULL</name></expr></argument>, <argument><expr><call pos:line="284" pos:column="98">(<name pos:line="284" pos:column="99">LPBYTE</name>)<argument_list pos:line="284" pos:column="106">(<argument><expr><name pos:line="284" pos:column="107">customCommand</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="284" pos:column="123">&amp;</op:operator><name pos:line="284" pos:column="124">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="285" pos:column="33">if <condition pos:line="285" pos:column="36">(<expr><name pos:line="285" pos:column="37">result</name> <op:operator pos:line="285" pos:column="44">!=</op:operator> <name pos:line="285" pos:column="47">ERROR_SUCCESS</name></expr>)</condition><then pos:line="285" pos:column="61"> <block pos:line="285" pos:column="62">{
					<expr_stmt><expr><call><name pos:line="286" pos:column="41">lstrcpyn</name><argument_list pos:line="286" pos:column="49">(<argument><expr><name pos:line="286" pos:column="50">customCommand</name></expr></argument>, <argument><expr><call><name pos:line="286" pos:column="65">TEXT</name><argument_list pos:line="286" pos:column="69">(<argument><expr><lit:literal type="string" pos:line="286" pos:column="70">""</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="286" pos:column="75">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>

				<expr_stmt><expr><name pos:line="289" pos:column="33">size</name> <op:operator pos:line="289" pos:column="38">=</op:operator> <sizeof pos:line="289" pos:column="40">sizeof<argument_list pos:line="289" pos:column="46">(<argument><expr><name pos:line="289" pos:column="47">DWORD</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="290" pos:column="33">result</name> <op:operator pos:line="290" pos:column="40">=</op:operator> <call><name pos:line="290" pos:column="42">RegQueryValueEx</name><argument_list pos:line="290" pos:column="57">(<argument><expr><name pos:line="290" pos:column="58">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="290" pos:column="70">TEXT</name><argument_list pos:line="290" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="290" pos:column="75">"Dynamic"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="290" pos:column="87">NULL</name></expr></argument>, <argument><expr><name pos:line="290" pos:column="93">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="290" pos:column="99">(</op:operator><name pos:line="290" pos:column="100">BYTE</name><op:operator pos:line="290" pos:column="104">*</op:operator><op:operator pos:line="290" pos:column="105">)</op:operator><op:operator pos:line="290" pos:column="106">(</op:operator><op:operator pos:line="290" pos:column="107">&amp;</op:operator><name pos:line="290" pos:column="108">isDynamic</name><op:operator pos:line="290" pos:column="117">)</op:operator></expr></argument>, <argument><expr><op:operator pos:line="290" pos:column="120">&amp;</op:operator><name pos:line="290" pos:column="121">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="291" pos:column="33">if <condition pos:line="291" pos:column="36">(<expr><name pos:line="291" pos:column="37">result</name> <op:operator pos:line="291" pos:column="44">!=</op:operator> <name pos:line="291" pos:column="47">ERROR_SUCCESS</name></expr>)</condition><then pos:line="291" pos:column="61"> <block pos:line="291" pos:column="62">{
					<expr_stmt><expr><name pos:line="292" pos:column="41">isDynamic</name> <op:operator pos:line="292" pos:column="51">=</op:operator> <lit:literal type="number" pos:line="292" pos:column="53">1</lit:literal></expr>;</expr_stmt>
				}</block></then></if>

				<expr_stmt><expr><name pos:line="295" pos:column="33">size</name> <op:operator pos:line="295" pos:column="38">=</op:operator> <sizeof pos:line="295" pos:column="40">sizeof<argument_list pos:line="295" pos:column="46">(<argument><expr><name pos:line="295" pos:column="47">DWORD</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<expr_stmt><expr><name pos:line="296" pos:column="33">result</name> <op:operator pos:line="296" pos:column="40">=</op:operator> <call><name pos:line="296" pos:column="42">RegQueryValueEx</name><argument_list pos:line="296" pos:column="57">(<argument><expr><name pos:line="296" pos:column="58">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="296" pos:column="70">TEXT</name><argument_list pos:line="296" pos:column="74">(<argument><expr><lit:literal type="string" pos:line="296" pos:column="75">"ShowIcon"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="296" pos:column="88">NULL</name></expr></argument>, <argument><expr><name pos:line="296" pos:column="94">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="296" pos:column="100">(</op:operator><name pos:line="296" pos:column="101">BYTE</name><op:operator pos:line="296" pos:column="105">*</op:operator><op:operator pos:line="296" pos:column="106">)</op:operator><op:operator pos:line="296" pos:column="107">(</op:operator><op:operator pos:line="296" pos:column="108">&amp;</op:operator><name pos:line="296" pos:column="109">useMenuIcon</name><op:operator pos:line="296" pos:column="120">)</op:operator></expr></argument>, <argument><expr><op:operator pos:line="296" pos:column="123">&amp;</op:operator><name pos:line="296" pos:column="124">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if pos:line="297" pos:column="33">if <condition pos:line="297" pos:column="36">(<expr><name pos:line="297" pos:column="37">result</name> <op:operator pos:line="297" pos:column="44">!=</op:operator> <name pos:line="297" pos:column="47">ERROR_SUCCESS</name></expr>)</condition><then pos:line="297" pos:column="61"> <block pos:line="297" pos:column="62">{
					<expr_stmt><expr><name pos:line="298" pos:column="41">useMenuIcon</name> <op:operator pos:line="298" pos:column="53">=</op:operator> <lit:literal type="number" pos:line="298" pos:column="55">1</lit:literal></expr>;</expr_stmt>
				}</block></then></if>

				<expr_stmt><expr><call><name pos:line="301" pos:column="33">RegCloseKey</name><argument_list pos:line="301" pos:column="44">(<argument><expr><name pos:line="301" pos:column="45">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><call><name pos:line="304" pos:column="25">Button_SetCheck</name><argument_list pos:line="304" pos:column="40">(<argument><expr><call><name pos:line="304" pos:column="41">GetDlgItem</name><argument_list pos:line="304" pos:column="51">(<argument><expr><name pos:line="304" pos:column="52">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="304" pos:column="61">IDC_CHECK_USECONTEXT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="304" pos:column="84">BST_INDETERMINATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="305" pos:column="25">Button_SetCheck</name><argument_list pos:line="305" pos:column="40">(<argument><expr><call><name pos:line="305" pos:column="41">GetDlgItem</name><argument_list pos:line="305" pos:column="51">(<argument><expr><name pos:line="305" pos:column="52">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="305" pos:column="61">IDC_CHECK_USEICON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="305" pos:column="81">BST_INDETERMINATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name pos:line="307" pos:column="25">Button_SetCheck</name><argument_list pos:line="307" pos:column="40">(<argument><expr><call><name pos:line="307" pos:column="41">GetDlgItem</name><argument_list pos:line="307" pos:column="51">(<argument><expr><name pos:line="307" pos:column="52">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="307" pos:column="61">IDC_CHECK_CONTEXTICON</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="307" pos:column="85">useMenuIcon</name><op:operator pos:line="307" pos:column="96">?</op:operator><name pos:line="307" pos:column="97">BST_CHECKED</name><op:operator pos:line="307" pos:column="108">:</op:operator><name pos:line="307" pos:column="109">BST_UNCHECKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="308" pos:column="25">Button_SetCheck</name><argument_list pos:line="308" pos:column="40">(<argument><expr><call><name pos:line="308" pos:column="41">GetDlgItem</name><argument_list pos:line="308" pos:column="51">(<argument><expr><name pos:line="308" pos:column="52">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="308" pos:column="61">IDC_CHECK_ISDYNAMIC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="308" pos:column="83">isDynamic</name><op:operator pos:line="308" pos:column="92">?</op:operator><name pos:line="308" pos:column="93">BST_CHECKED</name><op:operator pos:line="308" pos:column="104">:</op:operator><name pos:line="308" pos:column="105">BST_UNCHECKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name pos:line="310" pos:column="25">SetDlgItemText</name><argument_list pos:line="310" pos:column="39">(<argument><expr><name pos:line="310" pos:column="40">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="310" pos:column="49">IDC_EDIT_MENU</name></expr></argument>, <argument><expr><name pos:line="310" pos:column="64">customText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="311" pos:column="25">SetDlgItemText</name><argument_list pos:line="311" pos:column="39">(<argument><expr><name pos:line="311" pos:column="40">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="311" pos:column="49">IDC_EDIT_COMMAND</name></expr></argument>, <argument><expr><name pos:line="311" pos:column="67">customCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:line="313" pos:column="25">return <expr><name pos:line="313" pos:column="32">TRUE</name></expr>;</return>
			<break pos:line="314" pos:column="25">break;</break> }</block>
		</case><case pos:line="315" pos:column="17">case <expr><name pos:line="315" pos:column="22">WM_COMMAND</name></expr>: <block pos:line="315" pos:column="34">{
			<switch pos:line="316" pos:column="25">switch<condition pos:line="316" pos:column="31">(<expr><call><name pos:line="316" pos:column="32">LOWORD</name><argument_list pos:line="316" pos:column="38">(<argument><expr><name pos:line="316" pos:column="39">wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:line="316" pos:column="48">{
				<case pos:line="317" pos:column="33">case <expr><name pos:line="317" pos:column="38">IDOK</name></expr>: <block pos:line="317" pos:column="44">{
					<comment type="line" pos:line="318" pos:column="41">//Store settings</comment>
					<expr_stmt><expr><call><name pos:line="319" pos:column="41">GetDlgItemText</name><argument_list pos:line="319" pos:column="55">(<argument><expr><name pos:line="319" pos:column="56">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="65">IDC_EDIT_MENU</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="80">customText</name></expr></argument>, <argument><expr><name pos:line="319" pos:column="92">TITLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="320" pos:column="41">GetDlgItemText</name><argument_list pos:line="320" pos:column="55">(<argument><expr><name pos:line="320" pos:column="56">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="65">IDC_EDIT_COMMAND</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="83">customCommand</name></expr></argument>, <argument><expr><name pos:line="320" pos:column="98">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name pos:line="321" pos:column="41">int</name></type> <name pos:line="321" pos:column="45">textLen</name> <init pos:line="321" pos:column="53">= <expr><call><name pos:line="321" pos:column="55">lstrlen</name><argument_list pos:line="321" pos:column="62">(<argument><expr><name pos:line="321" pos:column="63">customText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name pos:line="322" pos:column="41">int</name></type> <name pos:line="322" pos:column="45">commandLen</name> <init pos:line="322" pos:column="56">= <expr><call><name pos:line="322" pos:column="58">lstrlen</name><argument_list pos:line="322" pos:column="65">(<argument><expr><name pos:line="322" pos:column="66">customCommand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><call><name pos:line="324" pos:column="41">wsprintf</name><argument_list pos:line="324" pos:column="49">(<argument><expr><name pos:line="324" pos:column="50">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="324" pos:column="61">TEXT</name><argument_list pos:line="324" pos:column="65">(<argument><expr><lit:literal type="string" pos:line="324" pos:column="66">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="324" pos:column="90">szGUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name pos:line="325" pos:column="41">result</name> <op:operator pos:line="325" pos:column="48">=</op:operator> <call><name pos:line="325" pos:column="50">RegCreateKeyEx</name><argument_list pos:line="325" pos:column="64">(<argument><expr><name pos:line="325" pos:column="65">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="84">szKeyTemp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="325" pos:column="95">0</lit:literal></expr></argument>, <argument><expr><name pos:line="325" pos:column="98">NULL</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="104">REG_OPTION_NON_VOLATILE</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="129">KEY_WRITE</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="140">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="325" pos:column="146">&amp;</op:operator><name pos:line="325" pos:column="147">settingKey</name></expr></argument>, <argument><expr><name pos:line="325" pos:column="159">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if pos:line="326" pos:column="41">if <condition pos:line="326" pos:column="44">(<expr><name pos:line="326" pos:column="45">result</name> <op:operator pos:line="326" pos:column="52">==</op:operator> <name pos:line="326" pos:column="55">ERROR_SUCCESS</name></expr>)</condition><then pos:line="326" pos:column="69"> <block pos:line="326" pos:column="70">{

						<expr_stmt><expr><name pos:line="328" pos:column="49">result</name> <op:operator pos:line="328" pos:column="56">=</op:operator> <call><name pos:line="328" pos:column="58">RegSetValueEx</name><argument_list pos:line="328" pos:column="71">(<argument><expr><name pos:line="328" pos:column="72">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="328" pos:column="84">TEXT</name><argument_list pos:line="328" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="328" pos:column="89">"Title"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="328" pos:column="99">0</lit:literal></expr></argument>,<argument><expr><name pos:line="328" pos:column="101">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="328" pos:column="109">(</op:operator><name pos:line="328" pos:column="110">LPBYTE</name><op:operator pos:line="328" pos:column="116">)</op:operator><name pos:line="328" pos:column="117">customText</name></expr></argument>, <argument><expr><op:operator pos:line="328" pos:column="129">(</op:operator><name pos:line="328" pos:column="130">textLen</name><op:operator pos:line="328" pos:column="137">+</op:operator><lit:literal type="number" pos:line="328" pos:column="138">1</lit:literal><op:operator pos:line="328" pos:column="139">)</op:operator><op:operator pos:line="328" pos:column="140">*</op:operator><sizeof pos:line="328" pos:column="141">sizeof<argument_list pos:line="328" pos:column="147">(<argument><expr><name pos:line="328" pos:column="148">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="329" pos:column="49">result</name> <op:operator pos:line="329" pos:column="56">=</op:operator> <call><name pos:line="329" pos:column="58">RegSetValueEx</name><argument_list pos:line="329" pos:column="71">(<argument><expr><name pos:line="329" pos:column="72">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="329" pos:column="84">TEXT</name><argument_list pos:line="329" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="329" pos:column="89">"Custom"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="329" pos:column="100">0</lit:literal></expr></argument>,<argument><expr><name pos:line="329" pos:column="102">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="329" pos:column="110">(</op:operator><name pos:line="329" pos:column="111">LPBYTE</name><op:operator pos:line="329" pos:column="117">)</op:operator><name pos:line="329" pos:column="118">customCommand</name></expr></argument>, <argument><expr><op:operator pos:line="329" pos:column="133">(</op:operator><name pos:line="329" pos:column="134">commandLen</name><op:operator pos:line="329" pos:column="144">+</op:operator><lit:literal type="number" pos:line="329" pos:column="145">1</lit:literal><op:operator pos:line="329" pos:column="146">)</op:operator><op:operator pos:line="329" pos:column="147">*</op:operator><sizeof pos:line="329" pos:column="148">sizeof<argument_list pos:line="329" pos:column="154">(<argument><expr><name pos:line="329" pos:column="155">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><name pos:line="331" pos:column="49">result</name> <op:operator pos:line="331" pos:column="56">=</op:operator> <call><name pos:line="331" pos:column="58">RegSetValueEx</name><argument_list pos:line="331" pos:column="71">(<argument><expr><name pos:line="331" pos:column="72">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="331" pos:column="84">TEXT</name><argument_list pos:line="331" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="331" pos:column="89">"Dynamic"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="331" pos:column="101">0</lit:literal></expr></argument>, <argument><expr><name pos:line="331" pos:column="104">REG_DWORD</name></expr></argument>, <argument><expr><op:operator pos:line="331" pos:column="115">(</op:operator><name pos:line="331" pos:column="116">LPBYTE</name><op:operator pos:line="331" pos:column="122">)</op:operator><op:operator pos:line="331" pos:column="123">&amp;</op:operator><name pos:line="331" pos:column="124">isDynamic</name></expr></argument>, <argument><expr><sizeof pos:line="331" pos:column="135">sizeof<argument_list pos:line="331" pos:column="141">(<argument><expr><name pos:line="331" pos:column="142">DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name pos:line="332" pos:column="49">result</name> <op:operator pos:line="332" pos:column="56">=</op:operator> <call><name pos:line="332" pos:column="58">RegSetValueEx</name><argument_list pos:line="332" pos:column="71">(<argument><expr><name pos:line="332" pos:column="72">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="332" pos:column="84">TEXT</name><argument_list pos:line="332" pos:column="88">(<argument><expr><lit:literal type="string" pos:line="332" pos:column="89">"ShowIcon"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="332" pos:column="102">0</lit:literal></expr></argument>, <argument><expr><name pos:line="332" pos:column="105">REG_DWORD</name></expr></argument>, <argument><expr><op:operator pos:line="332" pos:column="116">(</op:operator><name pos:line="332" pos:column="117">LPBYTE</name><op:operator pos:line="332" pos:column="123">)</op:operator><op:operator pos:line="332" pos:column="124">&amp;</op:operator><name pos:line="332" pos:column="125">useMenuIcon</name></expr></argument>, <argument><expr><sizeof pos:line="332" pos:column="138">sizeof<argument_list pos:line="332" pos:column="144">(<argument><expr><name pos:line="332" pos:column="145">DWORD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

						<expr_stmt><expr><call><name pos:line="334" pos:column="49">RegCloseKey</name><argument_list pos:line="334" pos:column="60">(<argument><expr><name pos:line="334" pos:column="61">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>

					<if pos:line="337" pos:column="41">if <condition pos:line="337" pos:column="44">(<expr><name pos:line="337" pos:column="45">showMenu</name> <op:operator pos:line="337" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="337" pos:column="57">1</lit:literal></expr>)</condition><then pos:line="337" pos:column="59"> <block pos:line="337" pos:column="60">{
						<expr_stmt><expr><name pos:line="338" pos:column="49">result</name> <op:operator pos:line="338" pos:column="56">=</op:operator> <call><name pos:line="338" pos:column="58">RegCreateKeyEx</name><argument_list pos:line="338" pos:column="72">(<argument><expr><name pos:line="338" pos:column="73">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="92">szShellExtensionKey</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="338" pos:column="113">0</lit:literal></expr></argument>, <argument><expr><name pos:line="338" pos:column="116">NULL</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="122">REG_OPTION_NON_VOLATILE</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="147">KEY_WRITE</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="158">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="338" pos:column="164">&amp;</op:operator><name pos:line="338" pos:column="165">settingKey</name></expr></argument>, <argument><expr><name pos:line="338" pos:column="177">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="339" pos:column="49">if <condition pos:line="339" pos:column="52">(<expr><name pos:line="339" pos:column="53">result</name> <op:operator pos:line="339" pos:column="60">==</op:operator> <name pos:line="339" pos:column="63">ERROR_SUCCESS</name></expr>)</condition><then pos:line="339" pos:column="77"> <block pos:line="339" pos:column="78">{
							<expr_stmt><expr><name pos:line="340" pos:column="57">result</name> <op:operator pos:line="340" pos:column="64">=</op:operator> <call><name pos:line="340" pos:column="66">RegSetValueEx</name><argument_list pos:line="340" pos:column="79">(<argument><expr><name pos:line="340" pos:column="80">settingKey</name></expr></argument>, <argument><expr><name pos:line="340" pos:column="92">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="340" pos:column="98">0</lit:literal></expr></argument>,<argument><expr><name pos:line="340" pos:column="100">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="340" pos:column="108">(</op:operator><name pos:line="340" pos:column="109">LPBYTE</name><op:operator pos:line="340" pos:column="115">)</op:operator><name pos:line="340" pos:column="116">szGUID</name></expr></argument>, <argument><expr><op:operator pos:line="340" pos:column="124">(</op:operator><call><name pos:line="340" pos:column="125">lstrlen</name><argument_list pos:line="340" pos:column="132">(<argument><expr><name pos:line="340" pos:column="133">szGUID</name></expr></argument>)</argument_list></call><op:operator pos:line="340" pos:column="140">+</op:operator><lit:literal type="number" pos:line="340" pos:column="141">1</lit:literal><op:operator pos:line="340" pos:column="142">)</op:operator><op:operator pos:line="340" pos:column="143">*</op:operator><sizeof pos:line="340" pos:column="144">sizeof<argument_list pos:line="340" pos:column="150">(<argument><expr><name pos:line="340" pos:column="151">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="341" pos:column="57">RegCloseKey</name><argument_list pos:line="341" pos:column="68">(<argument><expr><name pos:line="341" pos:column="69">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then> <else pos:line="343" pos:column="43">else <if pos:line="343" pos:column="48">if <condition pos:line="343" pos:column="51">(<expr><name pos:line="343" pos:column="52">showMenu</name> <op:operator pos:line="343" pos:column="61">==</op:operator> <lit:literal type="number" pos:line="343" pos:column="64">0</lit:literal></expr>)</condition><then pos:line="343" pos:column="66"> <block pos:line="343" pos:column="67">{
						<expr_stmt><expr><call><name pos:line="344" pos:column="49">RegDeleteKey</name><argument_list pos:line="344" pos:column="61">(<argument><expr><name pos:line="344" pos:column="62">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="344" pos:column="81">szShellExtensionKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>

					<if pos:line="347" pos:column="41">if <condition pos:line="347" pos:column="44">(<expr><name pos:line="347" pos:column="45">showIcon</name> <op:operator pos:line="347" pos:column="54">==</op:operator> <lit:literal type="number" pos:line="347" pos:column="57">1</lit:literal></expr>)</condition><then pos:line="347" pos:column="59"> <block pos:line="347" pos:column="60">{
						<expr_stmt><expr><name pos:line="348" pos:column="49">result</name> <op:operator pos:line="348" pos:column="56">=</op:operator> <call><name pos:line="348" pos:column="58">RegCreateKeyEx</name><argument_list pos:line="348" pos:column="72">(<argument><expr><name pos:line="348" pos:column="73">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><call><name pos:line="348" pos:column="92">TEXT</name><argument_list pos:line="348" pos:column="96">(<argument><expr><lit:literal type="string" pos:line="348" pos:column="97">"Notepad++_file\\shellex\\IconHandler"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lit:literal type="number" pos:line="348" pos:column="138">0</lit:literal></expr></argument>, <argument><expr><name pos:line="348" pos:column="141">NULL</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="147">REG_OPTION_NON_VOLATILE</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="172">KEY_WRITE</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="183">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="348" pos:column="189">&amp;</op:operator><name pos:line="348" pos:column="190">settingKey</name></expr></argument>, <argument><expr><name pos:line="348" pos:column="202">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if pos:line="349" pos:column="49">if <condition pos:line="349" pos:column="52">(<expr><name pos:line="349" pos:column="53">result</name> <op:operator pos:line="349" pos:column="60">==</op:operator> <name pos:line="349" pos:column="63">ERROR_SUCCESS</name></expr>)</condition><then pos:line="349" pos:column="77"> <block pos:line="349" pos:column="78">{
							<expr_stmt><expr><name pos:line="350" pos:column="57">result</name> <op:operator pos:line="350" pos:column="64">=</op:operator> <call><name pos:line="350" pos:column="66">RegSetValueEx</name><argument_list pos:line="350" pos:column="79">(<argument><expr><name pos:line="350" pos:column="80">settingKey</name></expr></argument>, <argument><expr><name pos:line="350" pos:column="92">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="350" pos:column="98">0</lit:literal></expr></argument>,<argument><expr><name pos:line="350" pos:column="100">REG_SZ</name></expr></argument>, <argument><expr><op:operator pos:line="350" pos:column="108">(</op:operator><name pos:line="350" pos:column="109">LPBYTE</name><op:operator pos:line="350" pos:column="115">)</op:operator><name pos:line="350" pos:column="116">szGUID</name></expr></argument>, <argument><expr><op:operator pos:line="350" pos:column="124">(</op:operator><call><name pos:line="350" pos:column="125">lstrlen</name><argument_list pos:line="350" pos:column="132">(<argument><expr><name pos:line="350" pos:column="133">szGUID</name></expr></argument>)</argument_list></call><op:operator pos:line="350" pos:column="140">+</op:operator><lit:literal type="number" pos:line="350" pos:column="141">1</lit:literal><op:operator pos:line="350" pos:column="142">)</op:operator><op:operator pos:line="350" pos:column="143">*</op:operator><sizeof pos:line="350" pos:column="144">sizeof<argument_list pos:line="350" pos:column="150">(<argument><expr><name pos:line="350" pos:column="151">TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<expr_stmt><expr><call><name pos:line="351" pos:column="57">RegCloseKey</name><argument_list pos:line="351" pos:column="68">(<argument><expr><name pos:line="351" pos:column="69">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then> <else pos:line="353" pos:column="43">else <if pos:line="353" pos:column="48">if <condition pos:line="353" pos:column="51">(<expr><name pos:line="353" pos:column="52">showIcon</name> <op:operator pos:line="353" pos:column="61">==</op:operator> <lit:literal type="number" pos:line="353" pos:column="64">0</lit:literal></expr>)</condition><then pos:line="353" pos:column="66"> <block pos:line="353" pos:column="67">{
						<expr_stmt><expr><call><name pos:line="354" pos:column="49">RegDeleteKey</name><argument_list pos:line="354" pos:column="61">(<argument><expr><name pos:line="354" pos:column="62">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><call><name pos:line="354" pos:column="81">TEXT</name><argument_list pos:line="354" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="354" pos:column="86">"Notepad++_file\\shellex\\IconHandler"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name pos:line="355" pos:column="49">RegDeleteKey</name><argument_list pos:line="355" pos:column="61">(<argument><expr><name pos:line="355" pos:column="62">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><call><name pos:line="355" pos:column="81">TEXT</name><argument_list pos:line="355" pos:column="85">(<argument><expr><lit:literal type="string" pos:line="355" pos:column="86">"Notepad++_file\\shellex"</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></else></if>

					<expr_stmt><expr><call><name pos:line="358" pos:column="41">PostMessage</name><argument_list pos:line="358" pos:column="52">(<argument><expr><name pos:line="358" pos:column="53">hwndDlg</name></expr></argument>, <argument><expr><name pos:line="358" pos:column="62">WM_CLOSE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="358" pos:column="72">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="358" pos:column="75">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break pos:line="359" pos:column="41">break;</break> }</block>
				</case><case pos:line="360" pos:column="33">case <expr><name pos:line="360" pos:column="38">IDC_CHECK_USECONTEXT</name></expr>: <block pos:line="360" pos:column="60">{
					<decl_stmt><decl><type><name pos:line="361" pos:column="41">int</name></type> <name pos:line="361" pos:column="45">state</name> <init pos:line="361" pos:column="51">= <expr><call><name pos:line="361" pos:column="53">Button_GetCheck</name><argument_list pos:line="361" pos:column="68">(<argument><expr><op:operator pos:line="361" pos:column="69">(</op:operator><name pos:line="361" pos:column="70">HWND</name><op:operator pos:line="361" pos:column="74">)</op:operator><name pos:line="361" pos:column="75">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="362" pos:column="41">if <condition pos:line="362" pos:column="44">(<expr><name pos:line="362" pos:column="45">state</name> <op:operator pos:line="362" pos:column="51">==</op:operator> <name pos:line="362" pos:column="54">BST_CHECKED</name></expr>)</condition><then pos:line="362" pos:column="66">
						<expr_stmt><expr><name pos:line="363" pos:column="49">showMenu</name> <op:operator pos:line="363" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="363" pos:column="60">1</lit:literal></expr>;</expr_stmt></then>
					<else pos:line="364" pos:column="41">else <if pos:line="364" pos:column="46">if <condition pos:line="364" pos:column="49">(<expr><name pos:line="364" pos:column="50">state</name> <op:operator pos:line="364" pos:column="56">==</op:operator> <name pos:line="364" pos:column="59">BST_UNCHECKED</name></expr>)</condition><then pos:line="364" pos:column="73">
						<expr_stmt><expr><name pos:line="365" pos:column="49">showMenu</name> <op:operator pos:line="365" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="365" pos:column="60">0</lit:literal></expr>;</expr_stmt></then>
					<else pos:line="366" pos:column="41">else
						<expr_stmt><expr><name pos:line="367" pos:column="49">showMenu</name> <op:operator pos:line="367" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="367" pos:column="60">2</lit:literal></expr>;</expr_stmt></else></if></else></if>
					<break pos:line="368" pos:column="41">break;</break> }</block>
				</case><case pos:line="369" pos:column="33">case <expr><name pos:line="369" pos:column="38">IDC_CHECK_USEICON</name></expr>: <block pos:line="369" pos:column="57">{
					<decl_stmt><decl><type><name pos:line="370" pos:column="41">int</name></type> <name pos:line="370" pos:column="45">state</name> <init pos:line="370" pos:column="51">= <expr><call><name pos:line="370" pos:column="53">Button_GetCheck</name><argument_list pos:line="370" pos:column="68">(<argument><expr><op:operator pos:line="370" pos:column="69">(</op:operator><name pos:line="370" pos:column="70">HWND</name><op:operator pos:line="370" pos:column="74">)</op:operator><name pos:line="370" pos:column="75">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="371" pos:column="41">if <condition pos:line="371" pos:column="44">(<expr><name pos:line="371" pos:column="45">state</name> <op:operator pos:line="371" pos:column="51">==</op:operator> <name pos:line="371" pos:column="54">BST_CHECKED</name></expr>)</condition><then pos:line="371" pos:column="66">
						<expr_stmt><expr><name pos:line="372" pos:column="49">showIcon</name> <op:operator pos:line="372" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="372" pos:column="60">1</lit:literal></expr>;</expr_stmt></then>
					<else pos:line="373" pos:column="41">else <if pos:line="373" pos:column="46">if <condition pos:line="373" pos:column="49">(<expr><name pos:line="373" pos:column="50">state</name> <op:operator pos:line="373" pos:column="56">==</op:operator> <name pos:line="373" pos:column="59">BST_UNCHECKED</name></expr>)</condition><then pos:line="373" pos:column="73">
						<expr_stmt><expr><name pos:line="374" pos:column="49">showIcon</name> <op:operator pos:line="374" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="374" pos:column="60">0</lit:literal></expr>;</expr_stmt></then>
					<else pos:line="375" pos:column="41">else
						<expr_stmt><expr><name pos:line="376" pos:column="49">showIcon</name> <op:operator pos:line="376" pos:column="58">=</op:operator> <lit:literal type="number" pos:line="376" pos:column="60">2</lit:literal></expr>;</expr_stmt></else></if></else></if>
					<break pos:line="377" pos:column="41">break;</break> }</block>
				</case><case pos:line="378" pos:column="33">case <expr><name pos:line="378" pos:column="38">IDC_CHECK_CONTEXTICON</name></expr>: <block pos:line="378" pos:column="61">{
					<decl_stmt><decl><type><name pos:line="379" pos:column="41">int</name></type> <name pos:line="379" pos:column="45">state</name> <init pos:line="379" pos:column="51">= <expr><call><name pos:line="379" pos:column="53">Button_GetCheck</name><argument_list pos:line="379" pos:column="68">(<argument><expr><op:operator pos:line="379" pos:column="69">(</op:operator><name pos:line="379" pos:column="70">HWND</name><op:operator pos:line="379" pos:column="74">)</op:operator><name pos:line="379" pos:column="75">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="380" pos:column="41">if <condition pos:line="380" pos:column="44">(<expr><name pos:line="380" pos:column="45">state</name> <op:operator pos:line="380" pos:column="51">==</op:operator> <name pos:line="380" pos:column="54">BST_CHECKED</name></expr>)</condition><then pos:line="380" pos:column="66">
						<expr_stmt><expr><name pos:line="381" pos:column="49">useMenuIcon</name> <op:operator pos:line="381" pos:column="61">=</op:operator> <lit:literal type="number" pos:line="381" pos:column="63">1</lit:literal></expr>;</expr_stmt></then>
					<else pos:line="382" pos:column="41">else
						<expr_stmt><expr><name pos:line="383" pos:column="49">useMenuIcon</name> <op:operator pos:line="383" pos:column="61">=</op:operator> <lit:literal type="number" pos:line="383" pos:column="63">0</lit:literal></expr>;</expr_stmt></else></if>
					<break pos:line="384" pos:column="41">break;</break> }</block>
				</case><case pos:line="385" pos:column="33">case <expr><name pos:line="385" pos:column="38">IDC_CHECK_ISDYNAMIC</name></expr>: <block pos:line="385" pos:column="59">{
					<decl_stmt><decl><type><name pos:line="386" pos:column="41">int</name></type> <name pos:line="386" pos:column="45">state</name> <init pos:line="386" pos:column="51">= <expr><call><name pos:line="386" pos:column="53">Button_GetCheck</name><argument_list pos:line="386" pos:column="68">(<argument><expr><op:operator pos:line="386" pos:column="69">(</op:operator><name pos:line="386" pos:column="70">HWND</name><op:operator pos:line="386" pos:column="74">)</op:operator><name pos:line="386" pos:column="75">lParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<if pos:line="387" pos:column="41">if <condition pos:line="387" pos:column="44">(<expr><name pos:line="387" pos:column="45">state</name> <op:operator pos:line="387" pos:column="51">==</op:operator> <name pos:line="387" pos:column="54">BST_CHECKED</name></expr>)</condition><then pos:line="387" pos:column="66">
						<expr_stmt><expr><name pos:line="388" pos:column="49">isDynamic</name> <op:operator pos:line="388" pos:column="59">=</op:operator> <lit:literal type="number" pos:line="388" pos:column="61">1</lit:literal></expr>;</expr_stmt></then>
					<else pos:line="389" pos:column="41">else
						<expr_stmt><expr><name pos:line="390" pos:column="49">isDynamic</name> <op:operator pos:line="390" pos:column="59">=</op:operator> <lit:literal type="number" pos:line="390" pos:column="61">0</lit:literal></expr>;</expr_stmt></else></if>
					<break pos:line="391" pos:column="41">break;</break> }</block>
				</case><default pos:line="392" pos:column="33">default:
					<break pos:line="393" pos:column="41">break;</break>
			</default>}</block></switch>

			<return pos:line="396" pos:column="25">return <expr><name pos:line="396" pos:column="32">TRUE</name></expr>;</return>
			<break pos:line="397" pos:column="25">break;</break> }</block>
		</case><case pos:line="398" pos:column="17">case <expr><name pos:line="398" pos:column="22">WM_CLOSE</name></expr>: <block pos:line="398" pos:column="32">{
			<expr_stmt><expr><call><name pos:line="399" pos:column="25">EndDialog</name><argument_list pos:line="399" pos:column="34">(<argument><expr><name pos:line="399" pos:column="35">hwndDlg</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="399" pos:column="44">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return pos:line="400" pos:column="25">return <expr><name pos:line="400" pos:column="32">TRUE</name></expr>;</return>
			<break pos:line="401" pos:column="25">break;</break> }</block>
		</case><default pos:line="402" pos:column="17">default:
			<break pos:line="403" pos:column="25">break;</break>
	</default>}</block></switch>

	<return pos:line="406" pos:column="9">return <expr><name pos:line="406" pos:column="16">FALSE</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="409" pos:column="1">// --- CShellExtClassFactory ---</comment>
<constructor><name><name pos:line="410" pos:column="1">CShellExtClassFactory</name><op:operator pos:line="410" pos:column="22">::</op:operator><name pos:line="410" pos:column="24">CShellExtClassFactory</name></name><parameter_list pos:line="410" pos:column="45">()</parameter_list> <member_list pos:line="410" pos:column="48">:
	<call><name pos:line="411" pos:column="9">m_cRef</name><argument_list pos:line="411" pos:column="15">(<argument><expr><lit:literal type="number" pos:line="411" pos:column="16">0L</lit:literal></expr></argument>)</argument_list></call>
</member_list><block pos:line="412" pos:column="1">{
	<expr_stmt><expr><name pos:line="413" pos:column="9">_cRef</name><op:operator pos:line="413" pos:column="14">++</op:operator></expr>;</expr_stmt>
}</block></constructor>

<destructor><name><name pos:line="416" pos:column="1">CShellExtClassFactory</name><op:operator pos:line="416" pos:column="22">::</op:operator>~<name pos:line="416" pos:column="25">CShellExtClassFactory</name></name><parameter_list pos:line="416" pos:column="46">()</parameter_list> <block pos:line="416" pos:column="49">{
	<expr_stmt><expr><name pos:line="417" pos:column="9">_cRef</name><op:operator pos:line="417" pos:column="14">--</op:operator></expr>;</expr_stmt>
}</block></destructor>

<comment type="line" pos:line="420" pos:column="1">// *** IUnknown methods ***</comment>
<function><type><name pos:line="421" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="421" pos:column="14">CShellExtClassFactory</name><op:operator pos:line="421" pos:column="35">::</op:operator><name pos:line="421" pos:column="37">QueryInterface</name></name><parameter_list pos:line="421" pos:column="51">(<param><decl><type><name pos:line="421" pos:column="52">REFIID</name></type> <name pos:line="421" pos:column="59">riid</name></decl></param>, <param><decl><type><name pos:line="421" pos:column="65">LPVOID</name> <name pos:line="421" pos:column="72">FAR</name> <type:modifier pos:line="421" pos:column="76">*</type:modifier></type><name pos:line="421" pos:column="77">ppv</name></decl></param>)</parameter_list> <block pos:line="421" pos:column="82">{
	<expr_stmt><expr><op:operator pos:line="422" pos:column="9">*</op:operator><name pos:line="422" pos:column="10">ppv</name> <op:operator pos:line="422" pos:column="14">=</op:operator> <name pos:line="422" pos:column="16">NULL</name></expr>;</expr_stmt>
	<if pos:line="423" pos:column="9">if <condition pos:line="423" pos:column="12">(<expr><call><name pos:line="423" pos:column="13">IsEqualIID</name><argument_list pos:line="423" pos:column="23">(<argument><expr><name pos:line="423" pos:column="24">riid</name></expr></argument>, <argument><expr><name pos:line="423" pos:column="30">IID_IUnknown</name></expr></argument>)</argument_list></call> <op:operator pos:line="423" pos:column="44">||</op:operator> <call><name pos:line="423" pos:column="47">IsEqualIID</name><argument_list pos:line="423" pos:column="57">(<argument><expr><name pos:line="423" pos:column="58">riid</name></expr></argument>, <argument><expr><name pos:line="423" pos:column="64">IID_IClassFactory</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="423" pos:column="83"> <block pos:line="423" pos:column="84">{
		<expr_stmt><expr><op:operator pos:line="424" pos:column="17">*</op:operator><name pos:line="424" pos:column="18">ppv</name> <op:operator pos:line="424" pos:column="22">=</op:operator> <op:operator pos:line="424" pos:column="24">(</op:operator><name pos:line="424" pos:column="25">LPCLASSFACTORY</name><op:operator pos:line="424" pos:column="39">)</op:operator><name pos:line="424" pos:column="40">this</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="425" pos:column="17">AddRef</name><argument_list pos:line="425" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="426" pos:column="17">return <expr><name pos:line="426" pos:column="24">NOERROR</name></expr>;</return>
	}</block></then></if>
	<return pos:line="428" pos:column="9">return <expr><name pos:line="428" pos:column="16">E_NOINTERFACE</name></expr>;</return>
}</block></function>

<macro><name pos:line="431" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="431" pos:column="14">(<argument pos:line="431" pos:column="15">ULONG</argument>)</argument_list></macro> <macro><name pos:line="431" pos:column="22">CShellExtClassFactory</name></macro><expr_stmt><expr><name><op:operator pos:line="431" pos:column="43">::</op:operator><name pos:line="431" pos:column="45">AddRef</name></name><op:operator pos:line="431" pos:column="51">(</op:operator><op:operator pos:line="431" pos:column="52">)</op:operator> <block pos:line="431" pos:column="54">{
	<return pos:line="432" pos:column="9">return <expr><op:operator pos:line="432" pos:column="16">++</op:operator><name pos:line="432" pos:column="18">m_cRef</name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name pos:line="435" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="435" pos:column="14">(<argument pos:line="435" pos:column="15">ULONG</argument>)</argument_list></macro> <macro><name pos:line="435" pos:column="22">CShellExtClassFactory</name></macro><expr_stmt><expr><name><op:operator pos:line="435" pos:column="43">::</op:operator><name pos:line="435" pos:column="45">Release</name></name><op:operator pos:line="435" pos:column="52">(</op:operator><op:operator pos:line="435" pos:column="53">)</op:operator>
<block pos:line="436" pos:column="1">{
	<if pos:line="437" pos:column="9">if <condition pos:line="437" pos:column="12">(<expr><op:operator pos:line="437" pos:column="13">--</op:operator><name pos:line="437" pos:column="15">m_cRef</name></expr>)</condition><then pos:line="437" pos:column="22">
		<return pos:line="438" pos:column="17">return <expr><name pos:line="438" pos:column="24">m_cRef</name></expr>;</return></then></if>
	<op:operator pos:line="439" pos:column="9">delete</op:operator> <name pos:line="439" pos:column="16">this</name></block></expr>;</expr_stmt>
	<return pos:line="440" pos:column="9">return <expr><lit:literal type="number" pos:line="440" pos:column="16">0L</lit:literal></expr>;</return>
}

<comment type="line" pos:line="443" pos:column="1">// *** IClassFactory methods ***</comment>
STDMETHODIMP <macro><name pos:line="444" pos:column="14">CShellExtClassFactory</name></macro><expr_stmt><expr><name><op:operator pos:line="444" pos:column="35">::</op:operator><name pos:line="444" pos:column="37">CreateInstance</name></name><op:operator pos:line="444" pos:column="51">(</op:operator><name pos:line="444" pos:column="52">LPUNKNOWN</name> <name pos:line="444" pos:column="62">pUnkOuter</name><op:operator pos:line="444" pos:column="71">,</op:operator> <name pos:line="444" pos:column="73">REFIID</name> <name pos:line="444" pos:column="80">riid</name><op:operator pos:line="444" pos:column="84">,</op:operator> <name pos:line="444" pos:column="86">LPVOID</name> <op:operator pos:line="444" pos:column="93">*</op:operator><name pos:line="444" pos:column="94">ppvObj</name><op:operator pos:line="444" pos:column="100">)</op:operator> <block pos:line="444" pos:column="102">{
	<expr><op:operator pos:line="445" pos:column="9">*</op:operator><name pos:line="445" pos:column="10">ppvObj</name> <op:operator pos:line="445" pos:column="17">=</op:operator> <name pos:line="445" pos:column="19">NULL</name></expr>;
	<if pos:line="446" pos:column="9">if <condition pos:line="446" pos:column="12">(<expr><name pos:line="446" pos:column="13">pUnkOuter</name></expr>)</condition><then pos:line="446" pos:column="23">
		<return pos:line="447" pos:column="17">return <expr><name pos:line="447" pos:column="24">CLASS_E_NOAGGREGATION</name></expr>;</return></then></if>
	<name pos:line="448" pos:column="9">CShellExt</name> <op:operator pos:line="448" pos:column="19">*</op:operator> <name pos:line="448" pos:column="21">pShellExt</name> <op:operator pos:line="448" pos:column="31">=</op:operator> <op:operator pos:line="448" pos:column="33">new</op:operator> <call><name pos:line="448" pos:column="37">CShellExt</name><argument_list pos:line="448" pos:column="46">()</argument_list></call></block></expr>;</expr_stmt>
	<if pos:line="449" pos:column="9">if <condition pos:line="449" pos:column="12">(<expr><op:operator pos:line="449" pos:column="13">!</op:operator><name pos:line="449" pos:column="14">pShellExt</name></expr>)</condition><then pos:line="449" pos:column="24">
		<return pos:line="450" pos:column="17">return <expr><name pos:line="450" pos:column="24">E_OUTOFMEMORY</name></expr>;</return></then></if>
	<return pos:line="451" pos:column="9">return <expr><call><name><name pos:line="451" pos:column="16">pShellExt</name><op:operator pos:line="451" pos:column="25">-&gt;</op:operator><name pos:line="451" pos:column="27">QueryInterface</name></name><argument_list pos:line="451" pos:column="41">(<argument><expr><name pos:line="451" pos:column="42">riid</name></expr></argument>, <argument><expr><name pos:line="451" pos:column="48">ppvObj</name></expr></argument>)</argument_list></call></expr>;</return>
}

STDMETHODIMP <macro><name pos:line="454" pos:column="14">CShellExtClassFactory</name></macro><expr_stmt><expr><name><op:operator pos:line="454" pos:column="35">::</op:operator><name pos:line="454" pos:column="37">LockServer</name></name><op:operator pos:line="454" pos:column="47">(</op:operator><name pos:line="454" pos:column="48">BOOL</name> <comment type="block" pos:line="454" pos:column="53">/*fLock*/</comment><op:operator pos:line="454" pos:column="62">)</op:operator> <block pos:line="454" pos:column="64">{
	<return pos:line="455" pos:column="9">return <expr><name pos:line="455" pos:column="16">NOERROR</name></expr>;</return>
}</block></expr></expr_stmt>

<comment type="line" pos:line="458" pos:column="1">// --- CShellExt ---</comment>
<constructor><name><name pos:line="459" pos:column="1">CShellExt</name><op:operator pos:line="459" pos:column="10">::</op:operator><name pos:line="459" pos:column="12">CShellExt</name></name><parameter_list pos:line="459" pos:column="21">()</parameter_list> <member_list pos:line="459" pos:column="24">:
	<call><name pos:line="460" pos:column="9">m_cRef</name><argument_list pos:line="460" pos:column="15">(<argument><expr><lit:literal type="number" pos:line="460" pos:column="16">0L</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="460" pos:column="19">,</op:operator>
	<call><name pos:line="461" pos:column="9">m_cbFiles</name><argument_list pos:line="461" pos:column="18">(<argument><expr><lit:literal type="number" pos:line="461" pos:column="19">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="461" pos:column="21">,</op:operator>
	<call><name pos:line="462" pos:column="9">m_pDataObj</name><argument_list pos:line="462" pos:column="19">(<argument><expr><name pos:line="462" pos:column="20">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="462" pos:column="25">,</op:operator>
	<call><name pos:line="463" pos:column="9">m_menuID</name><argument_list pos:line="463" pos:column="17">(<argument><expr><lit:literal type="number" pos:line="463" pos:column="18">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="463" pos:column="20">,</op:operator>
	<call><name pos:line="464" pos:column="9">m_hMenu</name><argument_list pos:line="464" pos:column="16">(<argument><expr><name pos:line="464" pos:column="17">NULL</name></expr></argument>)</argument_list></call><op:operator pos:line="464" pos:column="22">,</op:operator>
	<call><name pos:line="465" pos:column="9">m_showIcon</name><argument_list pos:line="465" pos:column="19">(<argument><expr><lit:literal type="boolean" pos:line="465" pos:column="20">true</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="465" pos:column="25">,</op:operator>
	<call><name pos:line="466" pos:column="9">m_useCustom</name><argument_list pos:line="466" pos:column="20">(<argument><expr><lit:literal type="boolean" pos:line="466" pos:column="21">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="466" pos:column="27">,</op:operator>
	<call><name pos:line="467" pos:column="9">m_nameLength</name><argument_list pos:line="467" pos:column="21">(<argument><expr><lit:literal type="number" pos:line="467" pos:column="22">0</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="467" pos:column="24">,</op:operator>
	<call><name pos:line="468" pos:column="9">m_nameMaxLength</name><argument_list pos:line="468" pos:column="24">(<argument><expr><name pos:line="468" pos:column="25">maxText</name></expr></argument>)</argument_list></call><op:operator pos:line="468" pos:column="33">,</op:operator>
	<call><name pos:line="469" pos:column="9">m_isDynamic</name><argument_list pos:line="469" pos:column="20">(<argument><expr><lit:literal type="boolean" pos:line="469" pos:column="21">false</lit:literal></expr></argument>)</argument_list></call><op:operator pos:line="469" pos:column="27">,</op:operator>
	<call><name pos:line="470" pos:column="9">m_winVer</name><argument_list pos:line="470" pos:column="17">(<argument><expr><lit:literal type="number" pos:line="470" pos:column="18">0</lit:literal></expr></argument>)</argument_list></call>
</member_list><block pos:line="471" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="472" pos:column="9">TCHAR</name></type> <name><name pos:line="472" pos:column="15">szKeyTemp</name> <index pos:line="472" pos:column="25">[<expr><name pos:line="472" pos:column="26">MAX_PATH</name> <op:operator pos:line="472" pos:column="35">+</op:operator> <name pos:line="472" pos:column="37">GUID_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="473" pos:column="9">ZeroMemory</name><argument_list pos:line="473" pos:column="19">(<argument><expr><op:operator pos:line="473" pos:column="20">&amp;</op:operator><name pos:line="473" pos:column="21">m_stgMedium</name></expr></argument>, <argument><expr><sizeof pos:line="473" pos:column="34">sizeof<argument_list pos:line="473" pos:column="40">(<argument><expr><name pos:line="473" pos:column="41">m_stgMedium</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="474" pos:column="9">_cRef</name><op:operator pos:line="474" pos:column="14">++</op:operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="476" pos:column="9">GetModuleFileName</name><argument_list pos:line="476" pos:column="26">(<argument><expr><name pos:line="476" pos:column="27">_hModule</name></expr></argument>, <argument><expr><name pos:line="476" pos:column="37">m_szModule</name></expr></argument>, <argument><expr><name pos:line="476" pos:column="49">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="478" pos:column="9">OSVERSIONINFOEX</name></type> <name pos:line="478" pos:column="25">inf</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="479" pos:column="9">ZeroMemory</name><argument_list pos:line="479" pos:column="19">(<argument><expr><op:operator pos:line="479" pos:column="20">&amp;</op:operator><name pos:line="479" pos:column="21">inf</name></expr></argument>, <argument><expr><sizeof pos:line="479" pos:column="26">sizeof<argument_list pos:line="479" pos:column="32">(<argument><expr><name pos:line="479" pos:column="33">OSVERSIONINFOEX</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="480" pos:column="5">inf</name><op:operator pos:line="480" pos:column="8">.</op:operator><name pos:line="480" pos:column="9">dwOSVersionInfoSize</name></name> <op:operator pos:line="480" pos:column="29">=</op:operator> <sizeof pos:line="480" pos:column="31">sizeof<argument_list pos:line="480" pos:column="37">(<argument><expr><name pos:line="480" pos:column="38">OSVERSIONINFOEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="481" pos:column="5">GetVersionEx</name><argument_list pos:line="481" pos:column="17">(<argument><expr><op:operator pos:line="481" pos:column="18">(</op:operator><name pos:line="481" pos:column="19">OSVERSIONINFO</name> <op:operator pos:line="481" pos:column="33">*</op:operator><op:operator pos:line="481" pos:column="34">)</op:operator><op:operator pos:line="481" pos:column="35">&amp;</op:operator><name pos:line="481" pos:column="36">inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="482" pos:column="9">m_winVer</name> <op:operator pos:line="482" pos:column="18">=</op:operator> <call><name pos:line="482" pos:column="20">MAKEWORD</name><argument_list pos:line="482" pos:column="28">(<argument><expr><name><name pos:line="482" pos:column="29">inf</name><op:operator pos:line="482" pos:column="32">.</op:operator><name pos:line="482" pos:column="33">dwMinorVersion</name></name></expr></argument>, <argument><expr><name><name pos:line="482" pos:column="49">inf</name><op:operator pos:line="482" pos:column="52">.</op:operator><name pos:line="482" pos:column="53">dwMajorVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="484" pos:column="9">if <condition pos:line="484" pos:column="12">(<expr><name pos:line="484" pos:column="13">m_winVer</name> <op:operator pos:line="484" pos:column="22">&gt;=</op:operator> <name pos:line="484" pos:column="25">WINVER_VISTA</name></expr>)</condition><then pos:line="484" pos:column="38"> <block pos:line="484" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="485" pos:column="17">InitTheming</name><argument_list pos:line="485" pos:column="28">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<decl_stmt><decl><type><name pos:line="488" pos:column="9">HKEY</name></type> <name pos:line="488" pos:column="14">settingKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="489" pos:column="9">LONG</name></type> <name pos:line="489" pos:column="14">result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="490" pos:column="9">DWORD</name></type> <name pos:line="490" pos:column="15">size</name> <init pos:line="490" pos:column="20">= <expr><lit:literal type="number" pos:line="490" pos:column="22">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="491" pos:column="9">DWORD</name></type> <name pos:line="491" pos:column="15">dyn</name> <init pos:line="491" pos:column="19">= <expr><lit:literal type="number" pos:line="491" pos:column="21">0</lit:literal></expr></init><op:operator pos:line="491" pos:column="22">,</op:operator> <name pos:line="491" pos:column="24">siz</name> <init pos:line="491" pos:column="28">= <expr><lit:literal type="number" pos:line="491" pos:column="30">0</lit:literal></expr></init><op:operator pos:line="491" pos:column="31">,</op:operator> <name pos:line="491" pos:column="33">showicon</name> <init pos:line="491" pos:column="42">= <expr><lit:literal type="number" pos:line="491" pos:column="44">0</lit:literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="493" pos:column="9">wsprintf</name><argument_list pos:line="493" pos:column="17">(<argument><expr><name pos:line="493" pos:column="18">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="493" pos:column="29">TEXT</name><argument_list pos:line="493" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="493" pos:column="34">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="493" pos:column="58">szGUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="494" pos:column="9">result</name> <op:operator pos:line="494" pos:column="16">=</op:operator> <call><name pos:line="494" pos:column="18">RegOpenKeyEx</name><argument_list pos:line="494" pos:column="30">(<argument><expr><name pos:line="494" pos:column="31">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="494" pos:column="50">szKeyTemp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="494" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><name pos:line="494" pos:column="64">KEY_READ</name></expr></argument>, <argument><expr><op:operator pos:line="494" pos:column="74">&amp;</op:operator><name pos:line="494" pos:column="75">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="495" pos:column="9">if <condition pos:line="495" pos:column="12">(<expr><name pos:line="495" pos:column="13">result</name> <op:operator pos:line="495" pos:column="20">==</op:operator> <name pos:line="495" pos:column="23">ERROR_SUCCESS</name></expr>)</condition><then pos:line="495" pos:column="37"> <block pos:line="495" pos:column="38">{
		<expr_stmt><expr><name pos:line="496" pos:column="17">size</name> <op:operator pos:line="496" pos:column="22">=</op:operator> <sizeof pos:line="496" pos:column="24">sizeof<argument_list pos:line="496" pos:column="30">(<argument><expr><name pos:line="496" pos:column="31">TCHAR</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="496" pos:column="37">*</op:operator><name pos:line="496" pos:column="38">TITLE_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="497" pos:column="17">result</name> <op:operator pos:line="497" pos:column="24">=</op:operator> <call><name pos:line="497" pos:column="26">RegQueryValueEx</name><argument_list pos:line="497" pos:column="41">(<argument><expr><name pos:line="497" pos:column="42">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="497" pos:column="54">TEXT</name><argument_list pos:line="497" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="497" pos:column="59">"Title"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="497" pos:column="69">NULL</name></expr></argument>, <argument><expr><name pos:line="497" pos:column="75">NULL</name></expr></argument>, <argument><expr><call pos:line="497" pos:column="81">(<name pos:line="497" pos:column="82">LPBYTE</name>)<argument_list pos:line="497" pos:column="89">(<argument><expr><name pos:line="497" pos:column="90">m_szMenuTitle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="497" pos:column="106">&amp;</op:operator><name pos:line="497" pos:column="107">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="498" pos:column="17">if <condition pos:line="498" pos:column="20">(<expr><name pos:line="498" pos:column="21">result</name> <op:operator pos:line="498" pos:column="28">!=</op:operator> <name pos:line="498" pos:column="31">ERROR_SUCCESS</name></expr>)</condition><then pos:line="498" pos:column="45"> <block pos:line="498" pos:column="46">{
			<expr_stmt><expr><call><name pos:line="499" pos:column="25">lstrcpyn</name><argument_list pos:line="499" pos:column="33">(<argument><expr><name pos:line="499" pos:column="34">m_szMenuTitle</name></expr></argument>, <argument><expr><name pos:line="499" pos:column="49">szDefaultMenutext</name></expr></argument>, <argument><expr><name pos:line="499" pos:column="68">TITLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="502" pos:column="17">size</name> <op:operator pos:line="502" pos:column="22">=</op:operator> <sizeof pos:line="502" pos:column="24">sizeof<argument_list pos:line="502" pos:column="30">(<argument><expr><name pos:line="502" pos:column="31">DWORD</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="503" pos:column="17">result</name> <op:operator pos:line="503" pos:column="24">=</op:operator> <call><name pos:line="503" pos:column="26">RegQueryValueEx</name><argument_list pos:line="503" pos:column="41">(<argument><expr><name pos:line="503" pos:column="42">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="503" pos:column="54">TEXT</name><argument_list pos:line="503" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="503" pos:column="59">"Dynamic"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="503" pos:column="71">NULL</name></expr></argument>, <argument><expr><name pos:line="503" pos:column="77">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="503" pos:column="83">(</op:operator><name pos:line="503" pos:column="84">BYTE</name><op:operator pos:line="503" pos:column="88">*</op:operator><op:operator pos:line="503" pos:column="89">)</op:operator><op:operator pos:line="503" pos:column="90">(</op:operator><op:operator pos:line="503" pos:column="91">&amp;</op:operator><name pos:line="503" pos:column="92">dyn</name><op:operator pos:line="503" pos:column="95">)</op:operator></expr></argument>, <argument><expr><op:operator pos:line="503" pos:column="98">&amp;</op:operator><name pos:line="503" pos:column="99">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="504" pos:column="17">if <condition pos:line="504" pos:column="20">(<expr><name pos:line="504" pos:column="21">result</name> <op:operator pos:line="504" pos:column="28">==</op:operator> <name pos:line="504" pos:column="31">ERROR_SUCCESS</name> <op:operator pos:line="504" pos:column="45">&amp;&amp;</op:operator> <name pos:line="504" pos:column="48">dyn</name> <op:operator pos:line="504" pos:column="52">!=</op:operator> <lit:literal type="number" pos:line="504" pos:column="55">0</lit:literal></expr>)</condition><then pos:line="504" pos:column="57"> <block pos:line="504" pos:column="58">{
			<expr_stmt><expr><name pos:line="505" pos:column="25">m_isDynamic</name> <op:operator pos:line="505" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="505" pos:column="39">true</lit:literal></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="508" pos:column="17">size</name> <op:operator pos:line="508" pos:column="22">=</op:operator> <sizeof pos:line="508" pos:column="24">sizeof<argument_list pos:line="508" pos:column="30">(<argument><expr><name pos:line="508" pos:column="31">DWORD</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="509" pos:column="17">result</name> <op:operator pos:line="509" pos:column="24">=</op:operator> <call><name pos:line="509" pos:column="26">RegQueryValueEx</name><argument_list pos:line="509" pos:column="41">(<argument><expr><name pos:line="509" pos:column="42">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="509" pos:column="54">TEXT</name><argument_list pos:line="509" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="509" pos:column="59">"Maxtext"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="509" pos:column="71">NULL</name></expr></argument>, <argument><expr><name pos:line="509" pos:column="77">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="509" pos:column="83">(</op:operator><name pos:line="509" pos:column="84">BYTE</name><op:operator pos:line="509" pos:column="88">*</op:operator><op:operator pos:line="509" pos:column="89">)</op:operator><op:operator pos:line="509" pos:column="90">(</op:operator><op:operator pos:line="509" pos:column="91">&amp;</op:operator><name pos:line="509" pos:column="92">siz</name><op:operator pos:line="509" pos:column="95">)</op:operator></expr></argument>, <argument><expr><op:operator pos:line="509" pos:column="98">&amp;</op:operator><name pos:line="509" pos:column="99">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="510" pos:column="17">if <condition pos:line="510" pos:column="20">(<expr><name pos:line="510" pos:column="21">result</name> <op:operator pos:line="510" pos:column="28">==</op:operator> <name pos:line="510" pos:column="31">ERROR_SUCCESS</name></expr>)</condition><then pos:line="510" pos:column="45"> <block pos:line="510" pos:column="46">{
			<expr_stmt><expr><name pos:line="511" pos:column="25">m_nameMaxLength</name> <op:operator pos:line="511" pos:column="41">=</op:operator> <call><name><name pos:line="511" pos:column="43">std</name><op:operator pos:line="511" pos:column="46">::</op:operator><name pos:line="511" pos:column="48">max</name></name><argument_list pos:line="511" pos:column="51">(<argument><expr><op:operator pos:line="511" pos:column="52">(</op:operator><name pos:line="511" pos:column="53">DWORD</name><op:operator pos:line="511" pos:column="58">)</op:operator><lit:literal type="number" pos:line="511" pos:column="59">0</lit:literal></expr></argument>,<argument><expr><name pos:line="511" pos:column="61">siz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="514" pos:column="17">size</name> <op:operator pos:line="514" pos:column="22">=</op:operator> <sizeof pos:line="514" pos:column="24">sizeof<argument_list pos:line="514" pos:column="30">(<argument><expr><name pos:line="514" pos:column="31">DWORD</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="515" pos:column="17">result</name> <op:operator pos:line="515" pos:column="24">=</op:operator> <call><name pos:line="515" pos:column="26">RegQueryValueEx</name><argument_list pos:line="515" pos:column="41">(<argument><expr><name pos:line="515" pos:column="42">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="515" pos:column="54">TEXT</name><argument_list pos:line="515" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="515" pos:column="59">"ShowIcon"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="515" pos:column="72">NULL</name></expr></argument>, <argument><expr><name pos:line="515" pos:column="78">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="515" pos:column="84">(</op:operator><name pos:line="515" pos:column="85">BYTE</name><op:operator pos:line="515" pos:column="89">*</op:operator><op:operator pos:line="515" pos:column="90">)</op:operator><op:operator pos:line="515" pos:column="91">(</op:operator><op:operator pos:line="515" pos:column="92">&amp;</op:operator><name pos:line="515" pos:column="93">showicon</name><op:operator pos:line="515" pos:column="101">)</op:operator></expr></argument>, <argument><expr><op:operator pos:line="515" pos:column="104">&amp;</op:operator><name pos:line="515" pos:column="105">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="516" pos:column="17">if <condition pos:line="516" pos:column="20">(<expr><name pos:line="516" pos:column="21">result</name> <op:operator pos:line="516" pos:column="28">==</op:operator> <name pos:line="516" pos:column="31">ERROR_SUCCESS</name></expr>)</condition><then pos:line="516" pos:column="45"> <block pos:line="516" pos:column="46">{
			<expr_stmt><expr><name pos:line="517" pos:column="25">m_showIcon</name> <op:operator pos:line="517" pos:column="36">=</op:operator> <op:operator pos:line="517" pos:column="38">(</op:operator><name pos:line="517" pos:column="39">showicon</name> <op:operator pos:line="517" pos:column="48">!=</op:operator> <lit:literal type="number" pos:line="517" pos:column="51">0</lit:literal><op:operator pos:line="517" pos:column="52">)</op:operator></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><name pos:line="520" pos:column="17">result</name> <op:operator pos:line="520" pos:column="24">=</op:operator> <call><name pos:line="520" pos:column="26">RegQueryValueEx</name><argument_list pos:line="520" pos:column="41">(<argument><expr><name pos:line="520" pos:column="42">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="520" pos:column="54">TEXT</name><argument_list pos:line="520" pos:column="58">(<argument><expr><lit:literal type="string" pos:line="520" pos:column="59">"CustomIcon"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="520" pos:column="74">NULL</name></expr></argument>, <argument><expr><name pos:line="520" pos:column="80">NULL</name></expr></argument>, <argument><expr><name pos:line="520" pos:column="86">NULL</name></expr></argument>, <argument><expr><name pos:line="520" pos:column="92">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if pos:line="521" pos:column="17">if <condition pos:line="521" pos:column="20">(<expr><name pos:line="521" pos:column="21">result</name> <op:operator pos:line="521" pos:column="28">==</op:operator> <name pos:line="521" pos:column="31">ERROR_SUCCESS</name></expr>)</condition><then pos:line="521" pos:column="45"> <block pos:line="521" pos:column="46">{
			<expr_stmt><expr><name pos:line="522" pos:column="25">m_useCustom</name> <op:operator pos:line="522" pos:column="37">=</op:operator> <lit:literal type="boolean" pos:line="522" pos:column="39">true</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="523" pos:column="25">size</name> <op:operator pos:line="523" pos:column="30">=</op:operator> <name pos:line="523" pos:column="32">MAX_PATH</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="524" pos:column="25">RegQueryValueEx</name><argument_list pos:line="524" pos:column="40">(<argument><expr><name pos:line="524" pos:column="41">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="524" pos:column="53">TEXT</name><argument_list pos:line="524" pos:column="57">(<argument><expr><lit:literal type="string" pos:line="524" pos:column="58">"CustomIcon"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="524" pos:column="73">NULL</name></expr></argument>, <argument><expr><name pos:line="524" pos:column="79">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="524" pos:column="85">(</op:operator><name pos:line="524" pos:column="86">BYTE</name><op:operator pos:line="524" pos:column="90">*</op:operator><op:operator pos:line="524" pos:column="91">)</op:operator><name pos:line="524" pos:column="92">m_szCustomPath</name></expr></argument>, <argument><expr><op:operator pos:line="524" pos:column="108">&amp;</op:operator><name pos:line="524" pos:column="109">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<expr_stmt><expr><call><name pos:line="527" pos:column="17">RegCloseKey</name><argument_list pos:line="527" pos:column="28">(<argument><expr><name pos:line="527" pos:column="29">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></constructor>

<destructor><name><name pos:line="531" pos:column="1">CShellExt</name><op:operator pos:line="531" pos:column="10">::</op:operator>~<name pos:line="531" pos:column="13">CShellExt</name></name><parameter_list pos:line="531" pos:column="22">()</parameter_list> <block pos:line="531" pos:column="25">{
	<if pos:line="532" pos:column="9">if <condition pos:line="532" pos:column="12">(<expr><name pos:line="532" pos:column="13">m_winVer</name> <op:operator pos:line="532" pos:column="22">&gt;=</op:operator> <name pos:line="532" pos:column="25">WINVER_VISTA</name></expr>)</condition><then pos:line="532" pos:column="38"> <block pos:line="532" pos:column="39">{
		<expr_stmt><expr><call><name pos:line="533" pos:column="17">DeinitTheming</name><argument_list pos:line="533" pos:column="30">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="536" pos:column="9">if <condition pos:line="536" pos:column="12">(<expr><name pos:line="536" pos:column="13">m_pDataObj</name></expr>)</condition><then pos:line="536" pos:column="24">
		<expr_stmt><expr><call><name><name pos:line="537" pos:column="17">m_pDataObj</name><op:operator pos:line="537" pos:column="27">-&gt;</op:operator><name pos:line="537" pos:column="29">Release</name></name><argument_list pos:line="537" pos:column="36">()</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt><expr><name pos:line="538" pos:column="9">_cRef</name><op:operator pos:line="538" pos:column="14">--</op:operator></expr>;</expr_stmt>
}</block></destructor>
<comment type="line" pos:line="540" pos:column="1">// *** IUnknown methods ***</comment>
<function><type><name pos:line="541" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="541" pos:column="14">CShellExt</name><op:operator pos:line="541" pos:column="23">::</op:operator><name pos:line="541" pos:column="25">QueryInterface</name></name><parameter_list pos:line="541" pos:column="39">(<param><decl><type><name pos:line="541" pos:column="40">REFIID</name></type> <name pos:line="541" pos:column="47">riid</name></decl></param>, <param><decl><type><name pos:line="541" pos:column="53">LPVOID</name> <name pos:line="541" pos:column="60">FAR</name> <type:modifier pos:line="541" pos:column="64">*</type:modifier></type><name pos:line="541" pos:column="65">ppv</name></decl></param>)</parameter_list> <block pos:line="541" pos:column="70">{
	<expr_stmt><expr><op:operator pos:line="542" pos:column="9">*</op:operator><name pos:line="542" pos:column="10">ppv</name> <op:operator pos:line="542" pos:column="14">=</op:operator> <name pos:line="542" pos:column="16">NULL</name></expr>;</expr_stmt>
	<if pos:line="543" pos:column="9">if <condition pos:line="543" pos:column="12">(<expr><call><name pos:line="543" pos:column="13">IsEqualIID</name><argument_list pos:line="543" pos:column="23">(<argument><expr><name pos:line="543" pos:column="24">riid</name></expr></argument>, <argument><expr><name pos:line="543" pos:column="30">IID_IUnknown</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="543" pos:column="44"> <block pos:line="543" pos:column="45">{
		<comment type="line" pos:line="544" pos:column="17">//*ppv = (LPUNKNOWN)this;</comment>
		<expr_stmt><expr><op:operator pos:line="545" pos:column="17">*</op:operator><name pos:line="545" pos:column="18">ppv</name> <op:operator pos:line="545" pos:column="22">=</op:operator> <op:operator pos:line="545" pos:column="24">(</op:operator><name pos:line="545" pos:column="25">LPSHELLEXTINIT</name><op:operator pos:line="545" pos:column="39">)</op:operator><name pos:line="545" pos:column="40">this</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="546" pos:column="11">else <if pos:line="546" pos:column="16">if <condition pos:line="546" pos:column="19">(<expr><call><name pos:line="546" pos:column="20">IsEqualIID</name><argument_list pos:line="546" pos:column="30">(<argument><expr><name pos:line="546" pos:column="31">riid</name></expr></argument>, <argument><expr><name pos:line="546" pos:column="37">IID_IShellExtInit</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="546" pos:column="56"> <block pos:line="546" pos:column="57">{
		<expr_stmt><expr><op:operator pos:line="547" pos:column="17">*</op:operator><name pos:line="547" pos:column="18">ppv</name> <op:operator pos:line="547" pos:column="22">=</op:operator> <op:operator pos:line="547" pos:column="24">(</op:operator><name pos:line="547" pos:column="25">LPSHELLEXTINIT</name><op:operator pos:line="547" pos:column="39">)</op:operator><name pos:line="547" pos:column="40">this</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="548" pos:column="11">else <if pos:line="548" pos:column="16">if <condition pos:line="548" pos:column="19">(<expr><call><name pos:line="548" pos:column="20">IsEqualIID</name><argument_list pos:line="548" pos:column="30">(<argument><expr><name pos:line="548" pos:column="31">riid</name></expr></argument>, <argument><expr><name pos:line="548" pos:column="37">IID_IContextMenu</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="548" pos:column="55"> <block pos:line="548" pos:column="56">{
		<expr_stmt><expr><op:operator pos:line="549" pos:column="17">*</op:operator><name pos:line="549" pos:column="18">ppv</name> <op:operator pos:line="549" pos:column="22">=</op:operator> <op:operator pos:line="549" pos:column="24">(</op:operator><name pos:line="549" pos:column="25">LPCONTEXTMENU</name><op:operator pos:line="549" pos:column="38">)</op:operator><name pos:line="549" pos:column="39">this</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="550" pos:column="11">else <if pos:line="550" pos:column="16">if <condition pos:line="550" pos:column="19">(<expr><call><name pos:line="550" pos:column="20">IsEqualIID</name><argument_list pos:line="550" pos:column="30">(<argument><expr><name pos:line="550" pos:column="31">riid</name></expr></argument>, <argument><expr><name pos:line="550" pos:column="37">IID_IContextMenu2</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="550" pos:column="56"> <block pos:line="550" pos:column="57">{
		<expr_stmt><expr><op:operator pos:line="551" pos:column="17">*</op:operator><name pos:line="551" pos:column="18">ppv</name> <op:operator pos:line="551" pos:column="22">=</op:operator> <op:operator pos:line="551" pos:column="24">(</op:operator><name pos:line="551" pos:column="25">LPCONTEXTMENU2</name><op:operator pos:line="551" pos:column="39">)</op:operator><name pos:line="551" pos:column="40">this</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="552" pos:column="11">else <if pos:line="552" pos:column="16">if <condition pos:line="552" pos:column="19">(<expr><call><name pos:line="552" pos:column="20">IsEqualIID</name><argument_list pos:line="552" pos:column="30">(<argument><expr><name pos:line="552" pos:column="31">riid</name></expr></argument>, <argument><expr><name pos:line="552" pos:column="37">IID_IContextMenu3</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="552" pos:column="56"> <block pos:line="552" pos:column="57">{
		<expr_stmt><expr><op:operator pos:line="553" pos:column="17">*</op:operator><name pos:line="553" pos:column="18">ppv</name> <op:operator pos:line="553" pos:column="22">=</op:operator> <op:operator pos:line="553" pos:column="24">(</op:operator><name pos:line="553" pos:column="25">LPCONTEXTMENU3</name><op:operator pos:line="553" pos:column="39">)</op:operator><name pos:line="553" pos:column="40">this</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="554" pos:column="11">else <if pos:line="554" pos:column="16">if <condition pos:line="554" pos:column="19">(<expr><call><name pos:line="554" pos:column="20">IsEqualIID</name><argument_list pos:line="554" pos:column="30">(<argument><expr><name pos:line="554" pos:column="31">riid</name></expr></argument>, <argument><expr><name pos:line="554" pos:column="37">IID_IPersistFile</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="554" pos:column="55"> <block pos:line="554" pos:column="56">{
		<expr_stmt><expr><op:operator pos:line="555" pos:column="17">*</op:operator><name pos:line="555" pos:column="18">ppv</name> <op:operator pos:line="555" pos:column="22">=</op:operator> <op:operator pos:line="555" pos:column="24">(</op:operator><name pos:line="555" pos:column="25">LPPERSISTFILE</name><op:operator pos:line="555" pos:column="38">)</op:operator><name pos:line="555" pos:column="39">this</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="556" pos:column="11">else <if pos:line="556" pos:column="16">if <condition pos:line="556" pos:column="19">(<expr><call><name pos:line="556" pos:column="20">IsEqualIID</name><argument_list pos:line="556" pos:column="30">(<argument><expr><name pos:line="556" pos:column="31">riid</name></expr></argument>, <argument><expr><name pos:line="556" pos:column="37">IID_IExtractIcon</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="556" pos:column="55"> <block pos:line="556" pos:column="56">{
		<expr_stmt><expr><op:operator pos:line="557" pos:column="17">*</op:operator><name pos:line="557" pos:column="18">ppv</name> <op:operator pos:line="557" pos:column="22">=</op:operator> <op:operator pos:line="557" pos:column="24">(</op:operator><name pos:line="557" pos:column="25">LPEXTRACTICON</name><op:operator pos:line="557" pos:column="38">)</op:operator><name pos:line="557" pos:column="39">this</name></expr>;</expr_stmt>
	}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
	<if pos:line="559" pos:column="9">if <condition pos:line="559" pos:column="12">(<expr><op:operator pos:line="559" pos:column="13">*</op:operator><name pos:line="559" pos:column="14">ppv</name></expr>)</condition><then pos:line="559" pos:column="18"> <block pos:line="559" pos:column="19">{
		<expr_stmt><expr><call><name pos:line="560" pos:column="17">AddRef</name><argument_list pos:line="560" pos:column="23">()</argument_list></call></expr>;</expr_stmt>
		<return pos:line="561" pos:column="17">return <expr><name pos:line="561" pos:column="24">NOERROR</name></expr>;</return>
	}</block></then></if>
	<return pos:line="563" pos:column="9">return <expr><name pos:line="563" pos:column="16">E_NOINTERFACE</name></expr>;</return>
}</block></function>

<macro><name pos:line="566" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="566" pos:column="14">(<argument pos:line="566" pos:column="15">ULONG</argument>)</argument_list></macro> <macro><name pos:line="566" pos:column="22">CShellExt</name></macro><expr_stmt><expr><name><op:operator pos:line="566" pos:column="31">::</op:operator><name pos:line="566" pos:column="33">AddRef</name></name><op:operator pos:line="566" pos:column="39">(</op:operator><op:operator pos:line="566" pos:column="40">)</op:operator> <block pos:line="566" pos:column="42">{
	<return pos:line="567" pos:column="9">return <expr><op:operator pos:line="567" pos:column="16">++</op:operator><name pos:line="567" pos:column="18">m_cRef</name></expr>;</return>
}</block></expr></expr_stmt>

<macro><name pos:line="570" pos:column="1">STDMETHODIMP_</name><argument_list pos:line="570" pos:column="14">(<argument pos:line="570" pos:column="15">ULONG</argument>)</argument_list></macro> <macro><name pos:line="570" pos:column="22">CShellExt</name></macro><expr_stmt><expr><name><op:operator pos:line="570" pos:column="31">::</op:operator><name pos:line="570" pos:column="33">Release</name></name><op:operator pos:line="570" pos:column="40">(</op:operator><op:operator pos:line="570" pos:column="41">)</op:operator> <block pos:line="570" pos:column="43">{
	<if pos:line="571" pos:column="9">if <condition pos:line="571" pos:column="12">(<expr><op:operator pos:line="571" pos:column="13">--</op:operator><name pos:line="571" pos:column="15">m_cRef</name></expr>)</condition><then pos:line="571" pos:column="22">
		<return pos:line="572" pos:column="17">return <expr><name pos:line="572" pos:column="24">m_cRef</name></expr>;</return></then></if>
	<op:operator pos:line="573" pos:column="9">delete</op:operator> <name pos:line="573" pos:column="16">this</name></block></expr>;</expr_stmt>
	<return pos:line="574" pos:column="9">return <expr><lit:literal type="number" pos:line="574" pos:column="16">0L</lit:literal></expr>;</return>
}

<comment type="line" pos:line="577" pos:column="1">// *** IShellExtInit methods ***</comment>
STDMETHODIMP <macro><name pos:line="578" pos:column="14">CShellExt</name></macro><expr_stmt><expr><name><op:operator pos:line="578" pos:column="23">::</op:operator><name pos:line="578" pos:column="25">Initialize</name></name><op:operator pos:line="578" pos:column="35">(</op:operator><name pos:line="578" pos:column="36">LPCITEMIDLIST</name> <comment type="block" pos:line="578" pos:column="50">/*pIDFolder*/</comment><op:operator pos:line="578" pos:column="63">,</op:operator> <name pos:line="578" pos:column="65">LPDATAOBJECT</name> <name pos:line="578" pos:column="78">pDataObj</name><op:operator pos:line="578" pos:column="86">,</op:operator> <name pos:line="578" pos:column="88">HKEY</name> <comment type="block" pos:line="578" pos:column="93">/*hRegKey*/</comment><op:operator pos:line="578" pos:column="104">)</op:operator> <block pos:line="578" pos:column="106">{
	<if pos:line="579" pos:column="9">if <condition pos:line="579" pos:column="12">(<expr><name pos:line="579" pos:column="13">m_pDataObj</name></expr>)</condition><then pos:line="579" pos:column="24"> <block pos:line="579" pos:column="25">{
		<expr_stmt><expr><call><name><name pos:line="580" pos:column="17">m_pDataObj</name><op:operator pos:line="580" pos:column="27">-&gt;</op:operator><name pos:line="580" pos:column="29">Release</name></name><argument_list pos:line="580" pos:column="36">()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="581" pos:column="17">m_pDataObj</name> <op:operator pos:line="581" pos:column="28">=</op:operator> <name pos:line="581" pos:column="30">NULL</name></expr>;</expr_stmt>
	<expr_stmt/></block></then></if>}</block></expr></expr_stmt>
	<if pos:line="583" pos:column="9">if <condition pos:line="583" pos:column="12">(<expr><name pos:line="583" pos:column="13">pDataObj</name></expr>)</condition><then pos:line="583" pos:column="22"> <block pos:line="583" pos:column="23">{
		<expr_stmt><expr><name pos:line="584" pos:column="17">m_pDataObj</name> <op:operator pos:line="584" pos:column="28">=</op:operator> <name pos:line="584" pos:column="30">pDataObj</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name pos:line="585" pos:column="17">pDataObj</name><op:operator pos:line="585" pos:column="25">-&gt;</op:operator><name pos:line="585" pos:column="27">AddRef</name></name><argument_list pos:line="585" pos:column="33">()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return pos:line="587" pos:column="9">return <expr><name pos:line="587" pos:column="16">NOERROR</name></expr>;</return>
}

<comment type="line" pos:line="590" pos:column="1">// *** IContextMenu methods ***</comment>
STDMETHODIMP <macro><name pos:line="591" pos:column="14">CShellExt</name></macro><expr_stmt><expr><name><op:operator pos:line="591" pos:column="23">::</op:operator><name pos:line="591" pos:column="25">QueryContextMenu</name></name><op:operator pos:line="591" pos:column="41">(</op:operator><name pos:line="591" pos:column="42">HMENU</name> <name pos:line="591" pos:column="48">hMenu</name><op:operator pos:line="591" pos:column="53">,</op:operator> <name pos:line="591" pos:column="55">UINT</name> <name pos:line="591" pos:column="60">indexMenu</name><op:operator pos:line="591" pos:column="69">,</op:operator> <name pos:line="591" pos:column="71">UINT</name> <name pos:line="591" pos:column="76">idCmdFirst</name><op:operator pos:line="591" pos:column="86">,</op:operator> <name pos:line="591" pos:column="88">UINT</name> <comment type="block" pos:line="591" pos:column="93">/*idCmdLast*/</comment><op:operator pos:line="591" pos:column="106">,</op:operator> <name pos:line="591" pos:column="108">UINT</name> <comment type="block" pos:line="591" pos:column="113">/*uFlags*/</comment><op:operator pos:line="591" pos:column="123">)</op:operator> <block pos:line="591" pos:column="125">{
	<expr><name pos:line="592" pos:column="9">UINT</name> <name pos:line="592" pos:column="14">idCmd</name> <op:operator pos:line="592" pos:column="20">=</op:operator> <name pos:line="592" pos:column="22">idCmdFirst</name></expr>;

	<expr><name pos:line="594" pos:column="9">FORMATETC</name> <name pos:line="594" pos:column="19">fmte</name> <op:operator pos:line="594" pos:column="24">=</op:operator> <block pos:line="594" pos:column="26">{
		<expr><name pos:line="595" pos:column="17">CF_HDROP</name></expr><op:operator pos:line="595" pos:column="25">,</op:operator>
		<expr><op:operator pos:line="596" pos:column="17">(</op:operator><name pos:line="596" pos:column="18">DVTARGETDEVICE</name> <name pos:line="596" pos:column="33">FAR</name> <op:operator pos:line="596" pos:column="37">*</op:operator><op:operator pos:line="596" pos:column="38">)</op:operator><name pos:line="596" pos:column="39">NULL</name></expr><op:operator pos:line="596" pos:column="43">,</op:operator>
		<expr><name pos:line="597" pos:column="17">DVASPECT_CONTENT</name></expr><op:operator pos:line="597" pos:column="33">,</op:operator>
		<expr><op:operator pos:line="598" pos:column="17">-</op:operator><lit:literal type="number" pos:line="598" pos:column="18">1</lit:literal></expr><op:operator pos:line="598" pos:column="19">,</op:operator>
		<expr><name pos:line="599" pos:column="17">TYMED_HGLOBAL</name></expr>
	}</block></expr>;

	<expr><name pos:line="602" pos:column="9">HRESULT</name> <name pos:line="602" pos:column="17">hres</name> <op:operator pos:line="602" pos:column="22">=</op:operator> <call><name><name pos:line="602" pos:column="24">m_pDataObj</name><op:operator pos:line="602" pos:column="34">-&gt;</op:operator><name pos:line="602" pos:column="36">GetData</name></name><argument_list pos:line="602" pos:column="43">(<argument><expr><op:operator pos:line="602" pos:column="44">&amp;</op:operator><name pos:line="602" pos:column="45">fmte</name></expr></argument>, <argument><expr><op:operator pos:line="602" pos:column="51">&amp;</op:operator><name pos:line="602" pos:column="52">m_stgMedium</name></expr></argument>)</argument_list></call></expr>;

	<if pos:line="604" pos:column="9">if <condition pos:line="604" pos:column="12">(<expr><call><name pos:line="604" pos:column="13">SUCCEEDED</name><argument_list pos:line="604" pos:column="22">(<argument><expr><name pos:line="604" pos:column="23">hres</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="604" pos:column="29"> <block pos:line="604" pos:column="30">{
		<if pos:line="605" pos:column="17">if <condition pos:line="605" pos:column="20">(<expr><name><name pos:line="605" pos:column="21">m_stgMedium</name><op:operator pos:line="605" pos:column="32">.</op:operator><name pos:line="605" pos:column="33">hGlobal</name></name></expr>)</condition><then pos:line="605" pos:column="41">
			<expr_stmt><expr><name pos:line="606" pos:column="25">m_cbFiles</name> <op:operator pos:line="606" pos:column="35">=</op:operator> <call><name pos:line="606" pos:column="37">DragQueryFile</name><argument_list pos:line="606" pos:column="50">(<argument><expr><op:operator pos:line="606" pos:column="51">(</op:operator><name pos:line="606" pos:column="52">HDROP</name><op:operator pos:line="606" pos:column="57">)</op:operator><name><name pos:line="606" pos:column="58">m_stgMedium</name><op:operator pos:line="606" pos:column="69">.</op:operator><name pos:line="606" pos:column="70">hGlobal</name></name></expr></argument>, <argument><expr><op:operator pos:line="606" pos:column="79">(</op:operator><name pos:line="606" pos:column="80">UINT</name><op:operator pos:line="606" pos:column="84">)</op:operator><op:operator pos:line="606" pos:column="85">-</op:operator><lit:literal type="number" pos:line="606" pos:column="86">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="606" pos:column="89">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="606" pos:column="92">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<expr_stmt/></block></then></if>}</block>

	<name pos:line="609" pos:column="9">UINT</name> <name pos:line="609" pos:column="14">nIndex</name> <op:operator pos:line="609" pos:column="21">=</op:operator> <name pos:line="609" pos:column="23">indexMenu</name><op:operator pos:line="609" pos:column="32">++</op:operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name pos:line="611" pos:column="9">InsertMenu</name><argument_list pos:line="611" pos:column="19">(<argument><expr><name pos:line="611" pos:column="20">hMenu</name></expr></argument>, <argument><expr><name pos:line="611" pos:column="27">nIndex</name></expr></argument>, <argument><expr><name pos:line="611" pos:column="35">MF_STRING</name><op:operator pos:line="611" pos:column="44">|</op:operator><name pos:line="611" pos:column="45">MF_BYPOSITION</name></expr></argument>, <argument><expr><name pos:line="611" pos:column="60">idCmd</name><op:operator pos:line="611" pos:column="65">++</op:operator></expr></argument>, <argument><expr><name pos:line="611" pos:column="69">m_szMenuTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<if pos:line="614" pos:column="9">if <condition pos:line="614" pos:column="12">(<expr><name pos:line="614" pos:column="13">m_showIcon</name></expr>)</condition><then pos:line="614" pos:column="24"> <block pos:line="614" pos:column="25">{
		<decl_stmt><decl><type><name pos:line="615" pos:column="17">HBITMAP</name></type> <name pos:line="615" pos:column="25">icon</name> <init pos:line="615" pos:column="30">= <expr><name pos:line="615" pos:column="32">NULL</name></expr></init></decl>;</decl_stmt>
		<if pos:line="616" pos:column="17">if <condition pos:line="616" pos:column="20">(<expr><name pos:line="616" pos:column="21">m_winVer</name> <op:operator pos:line="616" pos:column="30">&gt;=</op:operator> <name pos:line="616" pos:column="33">WINVER_VISTA</name></expr>)</condition><then pos:line="616" pos:column="46"> <block pos:line="616" pos:column="47">{
			<expr_stmt><expr><name pos:line="617" pos:column="25">icon</name> <op:operator pos:line="617" pos:column="30">=</op:operator> <name pos:line="617" pos:column="32">NULL</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="618" pos:column="25">HICON</name></type> <name pos:line="618" pos:column="31">hicon</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="619" pos:column="25">DWORD</name></type> <name pos:line="619" pos:column="31">menuIconWidth</name> <init pos:line="619" pos:column="45">= <expr><call><name pos:line="619" pos:column="47">GetSystemMetrics</name><argument_list pos:line="619" pos:column="63">(<argument><expr><name pos:line="619" pos:column="64">SM_CXMENUCHECK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="620" pos:column="25">DWORD</name></type> <name pos:line="620" pos:column="31">menuIconHeight</name> <init pos:line="620" pos:column="46">= <expr><call><name pos:line="620" pos:column="48">GetSystemMetrics</name><argument_list pos:line="620" pos:column="64">(<argument><expr><name pos:line="620" pos:column="65">SM_CYMENUCHECK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name pos:line="621" pos:column="25">HRESULT</name></type> <name pos:line="621" pos:column="33">hr</name> <init pos:line="621" pos:column="36">= <expr><call><name pos:line="621" pos:column="38">LoadShellIcon</name><argument_list pos:line="621" pos:column="51">(<argument><expr><name pos:line="621" pos:column="52">menuIconWidth</name></expr></argument>, <argument><expr><name pos:line="621" pos:column="67">menuIconHeight</name></expr></argument>, <argument><expr><op:operator pos:line="621" pos:column="83">&amp;</op:operator><name pos:line="621" pos:column="84">hicon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if pos:line="622" pos:column="25">if <condition pos:line="622" pos:column="28">(<expr><call><name pos:line="622" pos:column="29">SUCCEEDED</name><argument_list pos:line="622" pos:column="38">(<argument><expr><name pos:line="622" pos:column="39">hr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="622" pos:column="43"> <block pos:line="622" pos:column="44">{
				<expr_stmt><expr><name pos:line="623" pos:column="33">icon</name> <op:operator pos:line="623" pos:column="38">=</op:operator> <call><name pos:line="623" pos:column="40">IconToBitmapPARGB32</name><argument_list pos:line="623" pos:column="59">(<argument><expr><name pos:line="623" pos:column="60">hicon</name></expr></argument>, <argument><expr><name pos:line="623" pos:column="67">menuIconWidth</name></expr></argument>, <argument><expr><name pos:line="623" pos:column="82">menuIconHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="624" pos:column="33">DestroyIcon</name><argument_list pos:line="624" pos:column="44">(<argument><expr><name pos:line="624" pos:column="45">hicon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="626" pos:column="19">else <block pos:line="626" pos:column="24">{
			<expr_stmt><expr><name pos:line="627" pos:column="25">icon</name> <op:operator pos:line="627" pos:column="30">=</op:operator> <name pos:line="627" pos:column="32">HBMMENU_CALLBACK</name></expr>;</expr_stmt>
		}</block></else></if>

		<if pos:line="630" pos:column="17">if <condition pos:line="630" pos:column="20">(<expr><name pos:line="630" pos:column="21">icon</name> <op:operator pos:line="630" pos:column="26">!=</op:operator> <name pos:line="630" pos:column="29">NULL</name></expr>)</condition><then pos:line="630" pos:column="34"> <block pos:line="630" pos:column="35">{
			<decl_stmt><decl><type><name pos:line="631" pos:column="25">MENUITEMINFO</name></type> <name pos:line="631" pos:column="38">mii</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="632" pos:column="25">ZeroMemory</name><argument_list pos:line="632" pos:column="35">(<argument><expr><op:operator pos:line="632" pos:column="36">&amp;</op:operator><name pos:line="632" pos:column="37">mii</name></expr></argument>, <argument><expr><sizeof pos:line="632" pos:column="42">sizeof<argument_list pos:line="632" pos:column="48">(<argument><expr><name pos:line="632" pos:column="49">mii</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="633" pos:column="25">mii</name><op:operator pos:line="633" pos:column="28">.</op:operator><name pos:line="633" pos:column="29">cbSize</name></name> <op:operator pos:line="633" pos:column="36">=</op:operator> <sizeof pos:line="633" pos:column="38">sizeof<argument_list pos:line="633" pos:column="44">(<argument><expr><name pos:line="633" pos:column="45">mii</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="634" pos:column="25">mii</name><op:operator pos:line="634" pos:column="28">.</op:operator><name pos:line="634" pos:column="29">fMask</name></name> <op:operator pos:line="634" pos:column="35">=</op:operator> <name pos:line="634" pos:column="37">MIIM_BITMAP</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name pos:line="635" pos:column="25">mii</name><op:operator pos:line="635" pos:column="28">.</op:operator><name pos:line="635" pos:column="29">hbmpItem</name></name> <op:operator pos:line="635" pos:column="38">=</op:operator> <name pos:line="635" pos:column="40">icon</name></expr>;</expr_stmt>
			<comment type="line" pos:line="636" pos:column="25">//mii.hbmpChecked = icon;</comment>
			<comment type="line" pos:line="637" pos:column="25">//mii.hbmpUnchecked = icon;</comment>

			<expr_stmt><expr><call><name pos:line="639" pos:column="25">SetMenuItemInfo</name><argument_list pos:line="639" pos:column="40">(<argument><expr><name pos:line="639" pos:column="41">hMenu</name></expr></argument>, <argument><expr><name pos:line="639" pos:column="48">nIndex</name></expr></argument>, <argument><expr><name pos:line="639" pos:column="56">MF_BYPOSITION</name></expr></argument>, <argument><expr><op:operator pos:line="639" pos:column="71">&amp;</op:operator><name pos:line="639" pos:column="72">mii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if pos:line="641" pos:column="25">if <condition pos:line="641" pos:column="28">(<expr><name pos:line="641" pos:column="29">m_winVer</name> <op:operator pos:line="641" pos:column="38">&gt;=</op:operator> <name pos:line="641" pos:column="41">WINVER_VISTA</name></expr>)</condition><then pos:line="641" pos:column="54"> <block pos:line="641" pos:column="55">{
				<decl_stmt><decl><type><name pos:line="642" pos:column="33">MENUINFO</name></type> <name pos:line="642" pos:column="42">MenuInfo</name></decl>;</decl_stmt>
				<expr_stmt><expr><name><name pos:line="643" pos:column="33">MenuInfo</name><op:operator pos:line="643" pos:column="41">.</op:operator><name pos:line="643" pos:column="42">cbSize</name></name> <op:operator pos:line="643" pos:column="49">=</op:operator> <sizeof pos:line="643" pos:column="51">sizeof<argument_list pos:line="643" pos:column="57">(<argument><expr><name pos:line="643" pos:column="58">MenuInfo</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="644" pos:column="33">MenuInfo</name><op:operator pos:line="644" pos:column="41">.</op:operator><name pos:line="644" pos:column="42">fMask</name></name> <op:operator pos:line="644" pos:column="48">=</op:operator> <name pos:line="644" pos:column="50">MIM_STYLE</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name pos:line="645" pos:column="33">MenuInfo</name><op:operator pos:line="645" pos:column="41">.</op:operator><name pos:line="645" pos:column="42">dwStyle</name></name> <op:operator pos:line="645" pos:column="50">=</op:operator> <name pos:line="645" pos:column="52">MNS_CHECKORBMP</name></expr>;</expr_stmt>

				<expr_stmt><expr><call><name pos:line="647" pos:column="33">SetMenuInfo</name><argument_list pos:line="647" pos:column="44">(<argument><expr><name pos:line="647" pos:column="45">hMenu</name></expr></argument>, <argument><expr><op:operator pos:line="647" pos:column="52">&amp;</op:operator><name pos:line="647" pos:column="53">MenuInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

		}</block></then></if>
	}</block></then></if>

	<expr_stmt><expr><name pos:line="653" pos:column="9">m_hMenu</name> <op:operator pos:line="653" pos:column="17">=</op:operator> <name pos:line="653" pos:column="19">hMenu</name></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="654" pos:column="9">m_menuID</name> <op:operator pos:line="654" pos:column="18">=</op:operator> <name pos:line="654" pos:column="20">idCmd</name></expr>;</expr_stmt>

	<return pos:line="656" pos:column="9">return <expr><call><name pos:line="656" pos:column="16">ResultFromShort</name><argument_list pos:line="656" pos:column="31">(<argument><expr><name pos:line="656" pos:column="32">idCmd</name><op:operator pos:line="656" pos:column="37">-</op:operator><name pos:line="656" pos:column="38">idCmdFirst</name></expr></argument>)</argument_list></call></expr>;</return>
}

STDMETHODIMP <macro><name pos:line="659" pos:column="14">CShellExt</name></macro><expr_stmt><expr><name><op:operator pos:line="659" pos:column="23">::</op:operator><name pos:line="659" pos:column="25">InvokeCommand</name></name><op:operator pos:line="659" pos:column="38">(</op:operator><name pos:line="659" pos:column="39">LPCMINVOKECOMMANDINFO</name> <name pos:line="659" pos:column="61">lpcmi</name><op:operator pos:line="659" pos:column="66">)</op:operator> <block pos:line="659" pos:column="68">{
	<expr><name pos:line="660" pos:column="9">HRESULT</name> <name pos:line="660" pos:column="17">hr</name> <op:operator pos:line="660" pos:column="20">=</op:operator> <name pos:line="660" pos:column="22">E_INVALIDARG</name></expr>;

	<if pos:line="662" pos:column="9">if <condition pos:line="662" pos:column="12">(<expr><op:operator pos:line="662" pos:column="13">!</op:operator><call><name pos:line="662" pos:column="14">HIWORD</name><argument_list pos:line="662" pos:column="20">(<argument><expr><name><name pos:line="662" pos:column="21">lpcmi</name><op:operator pos:line="662" pos:column="26">-&gt;</op:operator><name pos:line="662" pos:column="28">lpVerb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="662" pos:column="36"> <block pos:line="662" pos:column="37">{
		<decl_stmt><decl><type><name pos:line="663" pos:column="17">UINT</name></type> <name pos:line="663" pos:column="22">idCmd</name> <init pos:line="663" pos:column="28">= <expr><call><name pos:line="663" pos:column="30">LOWORD</name><argument_list pos:line="663" pos:column="36">(<argument><expr><name><name pos:line="663" pos:column="37">lpcmi</name><op:operator pos:line="663" pos:column="42">-&gt;</op:operator><name pos:line="663" pos:column="44">lpVerb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<switch pos:line="664" pos:column="17">switch<condition pos:line="664" pos:column="23">(<expr><name pos:line="664" pos:column="24">idCmd</name></expr>)</condition> <block pos:line="664" pos:column="31">{
			<case pos:line="665" pos:column="25">case <expr><lit:literal type="number" pos:line="665" pos:column="30">0</lit:literal></expr>:
				<expr_stmt><expr><name pos:line="666" pos:column="33">hr</name> <op:operator pos:line="666" pos:column="36">=</op:operator> <call><name pos:line="666" pos:column="38">InvokeNPP</name><argument_list pos:line="666" pos:column="47">(<argument><expr><name><name pos:line="666" pos:column="48">lpcmi</name><op:operator pos:line="666" pos:column="53">-&gt;</op:operator><name pos:line="666" pos:column="55">hwnd</name></name></expr></argument>, <argument><expr><name><name pos:line="666" pos:column="61">lpcmi</name><op:operator pos:line="666" pos:column="66">-&gt;</op:operator><name pos:line="666" pos:column="68">lpDirectory</name></name></expr></argument>, <argument><expr><name><name pos:line="666" pos:column="81">lpcmi</name><op:operator pos:line="666" pos:column="86">-&gt;</op:operator><name pos:line="666" pos:column="88">lpVerb</name></name></expr></argument>, <argument><expr><name><name pos:line="666" pos:column="96">lpcmi</name><op:operator pos:line="666" pos:column="101">-&gt;</op:operator><name pos:line="666" pos:column="103">lpParameters</name></name></expr></argument>, <argument><expr><name><name pos:line="666" pos:column="117">lpcmi</name><op:operator pos:line="666" pos:column="122">-&gt;</op:operator><name pos:line="666" pos:column="124">nShow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break pos:line="667" pos:column="33">break;</break>
			</case><default pos:line="668" pos:column="25">default:
				<break pos:line="669" pos:column="33">break;</break>
		<expr_stmt/></default></block></switch></block></then></if>}</block></expr></expr_stmt>
	}
	return <expr_stmt><expr><name pos:line="672" pos:column="16">hr</name></expr>;</expr_stmt>
}

STDMETHODIMP <macro><name pos:line="675" pos:column="14">CShellExt</name></macro><expr_stmt><expr><name><op:operator pos:line="675" pos:column="23">::</op:operator><name pos:line="675" pos:column="25">GetCommandString</name></name><op:operator pos:line="675" pos:column="41">(</op:operator><name pos:line="675" pos:column="42">UINT_PTR</name><op:operator pos:line="675" pos:column="50">,</op:operator> <name pos:line="675" pos:column="52">UINT</name> <name pos:line="675" pos:column="57">uFlags</name><op:operator pos:line="675" pos:column="63">,</op:operator> <name pos:line="675" pos:column="65">UINT</name> <name pos:line="675" pos:column="70">FAR</name> <op:operator pos:line="675" pos:column="74">*</op:operator><op:operator pos:line="675" pos:column="75">,</op:operator> <name pos:line="675" pos:column="77">LPSTR</name> <name pos:line="675" pos:column="83">pszName</name><op:operator pos:line="675" pos:column="90">,</op:operator> <name pos:line="675" pos:column="92">UINT</name> <name pos:line="675" pos:column="97">cchMax</name><op:operator pos:line="675" pos:column="103">)</op:operator> <block pos:line="675" pos:column="105">{
	<expr><name pos:line="676" pos:column="9">LPWSTR</name> <name pos:line="676" pos:column="16">wBuffer</name> <op:operator pos:line="676" pos:column="24">=</op:operator> <op:operator pos:line="676" pos:column="26">(</op:operator><name pos:line="676" pos:column="27">LPWSTR</name><op:operator pos:line="676" pos:column="33">)</op:operator> <name pos:line="676" pos:column="35">pszName</name></expr>;
	<if pos:line="677" pos:column="9">if <condition pos:line="677" pos:column="12">(<expr><name pos:line="677" pos:column="13">uFlags</name> <op:operator pos:line="677" pos:column="20">==</op:operator> <name pos:line="677" pos:column="23">GCS_HELPTEXTA</name></expr>)</condition><then pos:line="677" pos:column="37"> <block pos:line="677" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="678" pos:column="17">lstrcpynA</name><argument_list pos:line="678" pos:column="26">(<argument><expr><name pos:line="678" pos:column="27">pszName</name></expr></argument>, <argument><expr><name pos:line="678" pos:column="36">szHelpTextA</name></expr></argument>, <argument><expr><name pos:line="678" pos:column="49">cchMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="679" pos:column="17">return <expr><name pos:line="679" pos:column="24">S_OK</name></expr>;</return>
	<expr_stmt/></block></then></if>}</block></expr></expr_stmt> <else pos:line="680" pos:column="11">else <if pos:line="680" pos:column="16">if <condition pos:line="680" pos:column="19">(<expr><name pos:line="680" pos:column="20">uFlags</name> <op:operator pos:line="680" pos:column="27">==</op:operator> <name pos:line="680" pos:column="30">GCS_HELPTEXTW</name></expr>)</condition><then pos:line="680" pos:column="44"> <block pos:line="680" pos:column="45">{
		<expr_stmt><expr><call><name pos:line="681" pos:column="17">lstrcpynW</name><argument_list pos:line="681" pos:column="26">(<argument><expr><name pos:line="681" pos:column="27">wBuffer</name></expr></argument>, <argument><expr><name pos:line="681" pos:column="36">szHelpTextW</name></expr></argument>, <argument><expr><name pos:line="681" pos:column="49">cchMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="682" pos:column="17">return <expr><name pos:line="682" pos:column="24">S_OK</name></expr>;</return>
	}</block></then></if></else>
	<return pos:line="684" pos:column="9">return <expr><name pos:line="684" pos:column="16">E_NOTIMPL</name></expr>;</return>
}

STDMETHODIMP <macro><name pos:line="687" pos:column="14">CShellExt</name></macro><expr_stmt><expr><name><op:operator pos:line="687" pos:column="23">::</op:operator><name pos:line="687" pos:column="25">HandleMenuMsg2</name></name><op:operator pos:line="687" pos:column="39">(</op:operator><name pos:line="687" pos:column="40">UINT</name> <name pos:line="687" pos:column="45">uMsg</name><op:operator pos:line="687" pos:column="49">,</op:operator> <name pos:line="687" pos:column="51">WPARAM</name> <comment type="block" pos:line="687" pos:column="58">/*wParam*/</comment><op:operator pos:line="687" pos:column="68">,</op:operator> <name pos:line="687" pos:column="70">LPARAM</name> <name pos:line="687" pos:column="77">lParam</name><op:operator pos:line="687" pos:column="83">,</op:operator> <name pos:line="687" pos:column="85">LRESULT</name> <op:operator pos:line="687" pos:column="93">*</op:operator><name pos:line="687" pos:column="94">plResult</name><op:operator pos:line="687" pos:column="102">)</op:operator> <block pos:line="687" pos:column="104">{

	<comment type="line" pos:line="689" pos:column="9">//Setup popup menu stuff (ownerdrawn)</comment>
	<expr><name pos:line="690" pos:column="9">DWORD</name> <name pos:line="690" pos:column="15">menuIconWidth</name> <op:operator pos:line="690" pos:column="29">=</op:operator> <call><name pos:line="690" pos:column="31">GetSystemMetrics</name><argument_list pos:line="690" pos:column="47">(<argument><expr><name pos:line="690" pos:column="48">SM_CXMENUCHECK</name></expr></argument>)</argument_list></call></expr>;
	<expr><name pos:line="691" pos:column="9">DWORD</name> <name pos:line="691" pos:column="15">menuIconHeight</name> <op:operator pos:line="691" pos:column="30">=</op:operator> <call><name pos:line="691" pos:column="32">GetSystemMetrics</name><argument_list pos:line="691" pos:column="48">(<argument><expr><name pos:line="691" pos:column="49">SM_CYMENUCHECK</name></expr></argument>)</argument_list></call></expr>;
	<expr><name pos:line="692" pos:column="9">DWORD</name> <name pos:line="692" pos:column="15">menuIconPadding</name> <op:operator pos:line="692" pos:column="31">=</op:operator> <lit:literal type="number" pos:line="692" pos:column="33">2</lit:literal></expr>;	<comment type="line" pos:line="692" pos:column="41">//+1 pixels on each side, is this fixed?</comment>

	<switch pos:line="694" pos:column="9">switch<condition pos:line="694" pos:column="15">(<expr><name pos:line="694" pos:column="16">uMsg</name></expr>)</condition> <block pos:line="694" pos:column="22">{
		<case pos:line="695" pos:column="17">case <expr><name pos:line="695" pos:column="22">WM_MEASUREITEM</name></expr>: <block pos:line="695" pos:column="38">{	<comment type="line" pos:line="695" pos:column="41">//for owner drawn menu</comment>
			<decl_stmt><decl><type><name pos:line="696" pos:column="25">MEASUREITEMSTRUCT</name> <type:modifier pos:line="696" pos:column="43">*</type:modifier></type> <name pos:line="696" pos:column="45">lpdis</name> <init pos:line="696" pos:column="51">= <expr><op:operator pos:line="696" pos:column="53">(</op:operator><name pos:line="696" pos:column="54">MEASUREITEMSTRUCT</name><op:operator pos:line="696" pos:column="71">*</op:operator><op:operator pos:line="696" pos:column="72">)</op:operator> <name pos:line="696" pos:column="74">lParam</name></expr></init></decl>;</decl_stmt>

			<if pos:line="698" pos:column="25">if <condition pos:line="698" pos:column="28">(<expr><name pos:line="698" pos:column="29">lpdis</name> <op:operator pos:line="698" pos:column="35">==</op:operator> <name pos:line="698" pos:column="38">NULL</name></expr>)</condition><then><comment type="line" pos:line="698" pos:column="43">// || lpdis-&gt;itemID != m_menuID)</comment>
				<break pos:line="699" pos:column="33">break;</break></then></if>

			<if pos:line="701" pos:column="25">if <condition pos:line="701" pos:column="28">(<expr><name pos:line="701" pos:column="29">m_showIcon</name></expr>)</condition><then pos:line="701" pos:column="40"> <block pos:line="701" pos:column="41">{
				<expr_stmt><expr><name><name pos:line="702" pos:column="33">lpdis</name><op:operator pos:line="702" pos:column="38">-&gt;</op:operator><name pos:line="702" pos:column="40">itemWidth</name></name> <op:operator pos:line="702" pos:column="50">=</op:operator> <lit:literal type="number" pos:line="702" pos:column="52">0</lit:literal></expr>;</expr_stmt>	<comment type="line" pos:line="702" pos:column="57">//0 seems to work for 98 and up</comment>
				<if pos:line="703" pos:column="33">if <condition pos:line="703" pos:column="36">(<expr><name><name pos:line="703" pos:column="37">lpdis</name><op:operator pos:line="703" pos:column="42">-&gt;</op:operator><name pos:line="703" pos:column="44">itemHeight</name></name> <op:operator pos:line="703" pos:column="55">&lt;</op:operator> <name pos:line="703" pos:column="57">menuIconHeight</name></expr>)</condition><then pos:line="703" pos:column="72">
					<expr_stmt><expr><name><name pos:line="704" pos:column="41">lpdis</name><op:operator pos:line="704" pos:column="46">-&gt;</op:operator><name pos:line="704" pos:column="48">itemHeight</name></name> <op:operator pos:line="704" pos:column="59">=</op:operator> <name pos:line="704" pos:column="61">menuIconHeight</name></expr>;</expr_stmt></then></if>
			<expr_stmt/></block></then></if></block></case></block></switch>}</block></expr></expr_stmt>

			<if pos:line="707" pos:column="25">if <condition pos:line="707" pos:column="28">(<expr><name pos:line="707" pos:column="29">plResult</name></expr>)</condition><then pos:line="707" pos:column="38">
				<expr_stmt><expr><op:operator pos:line="708" pos:column="33">*</op:operator><name pos:line="708" pos:column="34">plResult</name> <op:operator pos:line="708" pos:column="43">=</op:operator> <name pos:line="708" pos:column="45">TRUE</name></expr>;</expr_stmt></then></if>
			<break pos:line="709" pos:column="25">break;</break> }
		case <label><name pos:line="710" pos:column="22">WM_DRAWITEM</name>:</label> <block pos:line="710" pos:column="35">{		<comment type="line" pos:line="710" pos:column="49">//for owner drawn menu</comment>
			<comment type="line" pos:line="711" pos:column="25">//Assumes proper font already been set</comment>
			<decl_stmt><decl><type><name pos:line="712" pos:column="25">DRAWITEMSTRUCT</name> <type:modifier pos:line="712" pos:column="40">*</type:modifier></type> <name pos:line="712" pos:column="42">lpdis</name> <init pos:line="712" pos:column="48">= <expr><op:operator pos:line="712" pos:column="50">(</op:operator><name pos:line="712" pos:column="51">DRAWITEMSTRUCT</name><op:operator pos:line="712" pos:column="65">*</op:operator><op:operator pos:line="712" pos:column="66">)</op:operator> <name pos:line="712" pos:column="68">lParam</name></expr></init></decl>;</decl_stmt>
			<if pos:line="713" pos:column="25">if <condition pos:line="713" pos:column="28">(<expr><op:operator pos:line="713" pos:column="29">(</op:operator><name pos:line="713" pos:column="30">lpdis</name> <op:operator pos:line="713" pos:column="36">==</op:operator> <name pos:line="713" pos:column="39">NULL</name><op:operator pos:line="713" pos:column="43">)</op:operator> <op:operator pos:line="713" pos:column="45">||</op:operator> <op:operator pos:line="713" pos:column="48">(</op:operator><name><name pos:line="713" pos:column="49">lpdis</name><op:operator pos:line="713" pos:column="54">-&gt;</op:operator><name pos:line="713" pos:column="56">CtlType</name></name> <op:operator pos:line="713" pos:column="64">!=</op:operator> <name pos:line="713" pos:column="67">ODT_MENU</name><op:operator pos:line="713" pos:column="75">)</op:operator></expr>)</condition><then pos:line="713" pos:column="77">
				<break pos:line="714" pos:column="33">break;</break></then></if>

			<if pos:line="716" pos:column="25">if <condition pos:line="716" pos:column="28">(<expr><name pos:line="716" pos:column="29">m_showIcon</name></expr>)</condition><then pos:line="716" pos:column="40"> <block pos:line="716" pos:column="41">{
				<decl_stmt><decl><type><name pos:line="717" pos:column="33">HICON</name></type> <name pos:line="717" pos:column="39">nppIcon</name> <init pos:line="717" pos:column="47">= <expr><name pos:line="717" pos:column="49">NULL</name></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name pos:line="719" pos:column="33">HRESULT</name></type> <name pos:line="719" pos:column="41">hr</name> <init pos:line="719" pos:column="44">= <expr><call><name pos:line="719" pos:column="46">LoadShellIcon</name><argument_list pos:line="719" pos:column="59">(<argument><expr><name pos:line="719" pos:column="60">menuIconWidth</name></expr></argument>, <argument><expr><name pos:line="719" pos:column="75">menuIconHeight</name></expr></argument>, <argument><expr><op:operator pos:line="719" pos:column="91">&amp;</op:operator><name pos:line="719" pos:column="92">nppIcon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if pos:line="721" pos:column="33">if <condition pos:line="721" pos:column="36">(<expr><call><name pos:line="721" pos:column="37">SUCCEEDED</name><argument_list pos:line="721" pos:column="46">(<argument><expr><name pos:line="721" pos:column="47">hr</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="721" pos:column="51"> <block pos:line="721" pos:column="52">{
					<expr_stmt><expr><call><name pos:line="722" pos:column="41">DrawIconEx</name><argument_list pos:line="722" pos:column="51">(<argument><expr><name><name pos:line="722" pos:column="52">lpdis</name><op:operator pos:line="722" pos:column="57">-&gt;</op:operator><name pos:line="722" pos:column="59">hDC</name></name></expr></argument>, <argument><expr><name pos:line="722" pos:column="64">menuIconPadding</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="81">menuIconPadding</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="98">nppIcon</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="107">menuIconWidth</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="122">menuIconHeight</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="722" pos:column="138">0</lit:literal></expr></argument>, <argument><expr><name pos:line="722" pos:column="141">NULL</name></expr></argument>, <argument><expr><name pos:line="722" pos:column="147">DI_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name pos:line="723" pos:column="41">DestroyIcon</name><argument_list pos:line="723" pos:column="52">(<argument><expr><name pos:line="723" pos:column="53">nppIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>

			<if pos:line="727" pos:column="25">if <condition pos:line="727" pos:column="28">(<expr><name pos:line="727" pos:column="29">plResult</name></expr>)</condition><then pos:line="727" pos:column="38">
				<expr_stmt><expr><op:operator pos:line="728" pos:column="33">*</op:operator><name pos:line="728" pos:column="34">plResult</name> <op:operator pos:line="728" pos:column="43">=</op:operator> <name pos:line="728" pos:column="45">TRUE</name></expr>;</expr_stmt></then></if>

			<break pos:line="730" pos:column="25">break;</break> }</block>
		<default pos:line="731" pos:column="17">default:
			<break pos:line="732" pos:column="25">break;</break>
	</default>}

	return <expr_stmt><expr><name pos:line="735" pos:column="16">S_OK</name></expr>;</expr_stmt>
}

<comment type="line" pos:line="738" pos:column="1">// *** IPersistFile methods ***</comment>
HRESULT <function><type><name pos:line="739" pos:column="9">STDMETHODCALLTYPE</name></type> <name><name pos:line="739" pos:column="27">CShellExt</name><op:operator pos:line="739" pos:column="36">::</op:operator><name pos:line="739" pos:column="38">Load</name></name><parameter_list pos:line="739" pos:column="42">(<param><decl><type><name pos:line="739" pos:column="43">LPCOLESTR</name></type> <name pos:line="739" pos:column="53">pszFileName</name></decl></param>, <param><decl><type><name pos:line="739" pos:column="66">DWORD</name></type></decl></param> <comment type="block" pos:line="739" pos:column="72">/*dwMode*/</comment>)</parameter_list> <block pos:line="739" pos:column="84">{
	<decl_stmt><decl><type><name pos:line="740" pos:column="9">LPTSTR</name></type> <name><name pos:line="740" pos:column="16">file</name><index pos:line="740" pos:column="20">[<expr><name pos:line="740" pos:column="21">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifdef pos:line="741" pos:column="1">#<cpp:directive pos:line="741" pos:column="2">ifdef</cpp:directive> <name pos:line="741" pos:column="8">UNICODE</name></cpp:ifdef>
	<expr_stmt><expr><call><name pos:line="742" pos:column="9">lstrcpyn</name><argument_list pos:line="742" pos:column="17">(<argument><expr><op:operator pos:line="742" pos:column="18">(</op:operator><name pos:line="742" pos:column="19">LPWSTR</name><op:operator pos:line="742" pos:column="25">)</op:operator><name pos:line="742" pos:column="26">file</name></expr></argument>, <argument><expr><name pos:line="742" pos:column="32">pszFileName</name></expr></argument>, <argument><expr><name pos:line="742" pos:column="45">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else pos:line="743" pos:column="1">#<cpp:directive pos:line="743" pos:column="2">else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name pos:line="744" pos:column="9">WideCharToMultiByte</name><argument_list pos:line="744" pos:column="28">(<argument><expr><name pos:line="744" pos:column="29">CP_ACP</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="744" pos:column="37">0</lit:literal></expr></argument>, <argument><expr><name pos:line="744" pos:column="40">pszFileName</name></expr></argument>, <argument><expr><op:operator pos:line="744" pos:column="53">-</op:operator><lit:literal type="number" pos:line="744" pos:column="54">1</lit:literal></expr></argument>, <argument><expr><op:operator pos:line="744" pos:column="57">(</op:operator><name pos:line="744" pos:column="58">LPSTR</name><op:operator pos:line="744" pos:column="63">)</op:operator><name pos:line="744" pos:column="64">file</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="70">MAX_PATH</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="80">NULL</name></expr></argument>, <argument><expr><name pos:line="744" pos:column="86">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:line="745" pos:column="1">#<cpp:directive pos:line="745" pos:column="2">endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name pos:line="746" pos:column="9">m_szFilePath</name><index pos:line="746" pos:column="21">[<expr><lit:literal type="number" pos:line="746" pos:column="22">0</lit:literal></expr>]</index></name> <op:operator pos:line="746" pos:column="25">=</op:operator> <lit:literal type="number" pos:line="746" pos:column="27">0</lit:literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="748" pos:column="9">LPTSTR</name></type> <name pos:line="748" pos:column="16">ext</name> <init pos:line="748" pos:column="20">= <expr><call><name pos:line="748" pos:column="22">PathFindExtension</name><argument_list pos:line="748" pos:column="39">(<argument><expr><op:operator pos:line="748" pos:column="40">(</op:operator><name pos:line="748" pos:column="41">LPTSTR</name><op:operator pos:line="748" pos:column="47">)</op:operator><name pos:line="748" pos:column="48">file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if pos:line="749" pos:column="9">if <condition pos:line="749" pos:column="12">(<expr><name><name pos:line="749" pos:column="13">ext</name><index pos:line="749" pos:column="16">[<expr><lit:literal type="number" pos:line="749" pos:column="17">0</lit:literal></expr>]</index></name> <op:operator pos:line="749" pos:column="20">==</op:operator> <lit:literal type="char" pos:line="749" pos:column="23">'.'</lit:literal></expr>)</condition><then pos:line="749" pos:column="27"> <block pos:line="749" pos:column="28">{
		<expr_stmt><expr><name pos:line="750" pos:column="17">ext</name><op:operator pos:line="750" pos:column="20">++</op:operator></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name pos:line="752" pos:column="9">int</name></type> <name pos:line="752" pos:column="13">copySize</name> <init pos:line="752" pos:column="22">= <expr><call><name><name pos:line="752" pos:column="24">std</name><op:operator pos:line="752" pos:column="27">::</op:operator><name pos:line="752" pos:column="29">min</name></name><argument_list pos:line="752" pos:column="32">(<argument><expr><name pos:line="752" pos:column="33">m_nameMaxLength</name><op:operator pos:line="752" pos:column="48">+</op:operator><lit:literal type="number" pos:line="752" pos:column="49">1</lit:literal></expr></argument>, <argument><expr><name pos:line="752" pos:column="52">MAX_PATH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	<comment type="line" pos:line="752" pos:column="65">//+1 to take zero terminator in account</comment>
	<expr_stmt><expr><call><name pos:line="753" pos:column="9">lstrcpyn</name><argument_list pos:line="753" pos:column="17">(<argument><expr><name pos:line="753" pos:column="18">m_szFilePath</name></expr></argument>, <argument><expr><name pos:line="753" pos:column="32">ext</name></expr></argument>, <argument><expr><name pos:line="753" pos:column="37">copySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="754" pos:column="9">m_nameLength</name> <op:operator pos:line="754" pos:column="22">=</op:operator> <call><name pos:line="754" pos:column="24">lstrlen</name><argument_list pos:line="754" pos:column="31">(<argument><expr><name pos:line="754" pos:column="32">m_szFilePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="755" pos:column="9">CharUpperBuff</name><argument_list pos:line="755" pos:column="22">(<argument><expr><name pos:line="755" pos:column="23">m_szFilePath</name></expr></argument>, <argument><expr><name pos:line="755" pos:column="37">m_nameLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="756" pos:column="9">return <expr><name pos:line="756" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<comment type="line" pos:line="759" pos:column="1">// *** IExtractIcon methods ***</comment>
<function><type><name pos:line="760" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="760" pos:column="14">CShellExt</name><op:operator pos:line="760" pos:column="23">::</op:operator><name pos:line="760" pos:column="25">GetIconLocation</name></name><parameter_list pos:line="760" pos:column="40">(<param><decl><type><name pos:line="760" pos:column="41">UINT</name></type> <name pos:line="760" pos:column="46">uFlags</name></decl></param>, <param><decl><type><name pos:line="760" pos:column="54">LPTSTR</name></type> <name pos:line="760" pos:column="61">szIconFile</name></decl></param>, <param><decl><type><name pos:line="760" pos:column="73">UINT</name></type> <name pos:line="760" pos:column="78">cchMax</name></decl></param>, <param><decl><type><name pos:line="760" pos:column="86">int</name> <type:modifier pos:line="760" pos:column="90">*</type:modifier></type> <name pos:line="760" pos:column="92">piIndex</name></decl></param>, <param><decl><type><name pos:line="760" pos:column="101">UINT</name> <type:modifier pos:line="760" pos:column="106">*</type:modifier></type> <name pos:line="760" pos:column="108">pwFlags</name></decl></param>)</parameter_list> <block pos:line="760" pos:column="117">{
	<expr_stmt><expr><op:operator pos:line="761" pos:column="9">*</op:operator><name pos:line="761" pos:column="10">pwFlags</name> <op:operator pos:line="761" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="761" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<if pos:line="762" pos:column="9">if <condition pos:line="762" pos:column="12">(<expr><name pos:line="762" pos:column="13">uFlags</name> <op:operator pos:line="762" pos:column="20">&amp;</op:operator> <name pos:line="762" pos:column="22">GIL_DEFAULTICON</name> <op:operator pos:line="762" pos:column="38">||</op:operator> <name><name pos:line="762" pos:column="41">m_szFilePath</name><index pos:line="762" pos:column="53">[<expr><lit:literal type="number" pos:line="762" pos:column="54">0</lit:literal></expr>]</index></name> <op:operator pos:line="762" pos:column="57">==</op:operator> <lit:literal type="number" pos:line="762" pos:column="60">0</lit:literal> <op:operator pos:line="762" pos:column="62">||</op:operator> <op:operator pos:line="762" pos:column="65">!</op:operator><name pos:line="762" pos:column="66">m_isDynamic</name></expr>)</condition><then pos:line="762" pos:column="78"> <block pos:line="762" pos:column="79">{	<comment type="line" pos:line="762" pos:column="81">//return regular N++ icon if requested OR the extension is bad OR static icon</comment>
		<if pos:line="763" pos:column="17">if <condition pos:line="763" pos:column="20">(<expr><op:operator pos:line="763" pos:column="21">!</op:operator><name pos:line="763" pos:column="22">m_useCustom</name></expr>)</condition><then pos:line="763" pos:column="34"> <block pos:line="763" pos:column="35">{
			<expr_stmt><expr><call><name pos:line="764" pos:column="25">lstrcpyn</name><argument_list pos:line="764" pos:column="33">(<argument><expr><name pos:line="764" pos:column="34">szIconFile</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="46">m_szModule</name></expr></argument>, <argument><expr><name pos:line="764" pos:column="58">cchMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="765" pos:column="25">*</op:operator><name pos:line="765" pos:column="26">piIndex</name> <op:operator pos:line="765" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="765" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></then> <else pos:line="766" pos:column="19">else <block pos:line="766" pos:column="24">{
			<expr_stmt><expr><call><name pos:line="767" pos:column="25">lstrcpyn</name><argument_list pos:line="767" pos:column="33">(<argument><expr><name pos:line="767" pos:column="34">szIconFile</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="46">m_szCustomPath</name></expr></argument>, <argument><expr><name pos:line="767" pos:column="62">cchMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="768" pos:column="25">*</op:operator><name pos:line="768" pos:column="26">piIndex</name> <op:operator pos:line="768" pos:column="34">=</op:operator> <lit:literal type="number" pos:line="768" pos:column="36">0</lit:literal></expr>;</expr_stmt>
		}</block></else></if>
		<return pos:line="770" pos:column="17">return <expr><name pos:line="770" pos:column="24">S_OK</name></expr>;</return>
	}</block></then></if>

	<if pos:line="773" pos:column="9">if<condition pos:line="773" pos:column="11">(<expr><name pos:line="773" pos:column="12">cchMax</name> <op:operator pos:line="773" pos:column="19">&gt;</op:operator> <lit:literal type="number" pos:line="773" pos:column="21">0</lit:literal></expr>)</condition><then pos:line="773" pos:column="23"> <block pos:line="773" pos:column="24">{
		<expr_stmt><expr><call><name pos:line="774" pos:column="17">lstrcpyn</name><argument_list pos:line="774" pos:column="25">(<argument><expr><name pos:line="774" pos:column="26">szIconFile</name></expr></argument>, <argument><expr><call><name pos:line="774" pos:column="38">TEXT</name><argument_list pos:line="774" pos:column="42">(<argument><expr><lit:literal type="string" pos:line="774" pos:column="43">"NppShellIcon"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="774" pos:column="60">cchMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name pos:line="775" pos:column="17">int</name></type> <name pos:line="775" pos:column="21">len</name> <init pos:line="775" pos:column="25">= <expr><call><name pos:line="775" pos:column="27">lstrlen</name><argument_list pos:line="775" pos:column="34">(<argument><expr><name pos:line="775" pos:column="35">szIconFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name pos:line="776" pos:column="17">lstrcpyn</name><argument_list pos:line="776" pos:column="25">(<argument><expr><name pos:line="776" pos:column="26">szIconFile</name></expr></argument>, <argument><expr><name pos:line="776" pos:column="38">m_szFilePath</name></expr></argument>, <argument><expr><name pos:line="776" pos:column="52">cchMax</name><op:operator pos:line="776" pos:column="58">-</op:operator><name pos:line="776" pos:column="59">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><op:operator pos:line="778" pos:column="9">*</op:operator><name pos:line="778" pos:column="10">piIndex</name> <op:operator pos:line="778" pos:column="18">=</op:operator> <lit:literal type="number" pos:line="778" pos:column="20">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="779" pos:column="9">*</op:operator><name pos:line="779" pos:column="10">pwFlags</name> <op:operator pos:line="779" pos:column="18">|=</op:operator> <name pos:line="779" pos:column="21">GIL_NOTFILENAME</name></expr>;</expr_stmt><comment type="line" pos:line="779" pos:column="37">//|GIL_DONTCACHE|GIL_PERINSTANCE;</comment>

	<return pos:line="781" pos:column="9">return <expr><name pos:line="781" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="784" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="784" pos:column="14">CShellExt</name><op:operator pos:line="784" pos:column="23">::</op:operator><name pos:line="784" pos:column="25">Extract</name></name><parameter_list pos:line="784" pos:column="32">(<param><decl><type><name pos:line="784" pos:column="33">LPCTSTR</name></type></decl></param> <comment type="block" pos:line="784" pos:column="41">/*pszFile*/</comment>, <param><decl><type><name pos:line="784" pos:column="54">UINT</name></type></decl></param> <comment type="block" pos:line="784" pos:column="59">/*nIconIndex*/</comment>, <param><decl><type><name pos:line="784" pos:column="75">HICON</name> <type:modifier pos:line="784" pos:column="81">*</type:modifier></type> <name pos:line="784" pos:column="83">phiconLarge</name></decl></param>, <param><decl><type><name pos:line="784" pos:column="96">HICON</name> <type:modifier pos:line="784" pos:column="102">*</type:modifier></type> <name pos:line="784" pos:column="104">phiconSmall</name></decl></param>, <param><decl><type><name pos:line="784" pos:column="117">UINT</name></type> <name pos:line="784" pos:column="122">nIconSize</name></decl></param>)</parameter_list> <block pos:line="784" pos:column="133">{
	<decl_stmt><decl><type><name pos:line="785" pos:column="9">WORD</name></type> <name pos:line="785" pos:column="14">sizeSmall</name> <init pos:line="785" pos:column="24">= <expr><call><name pos:line="785" pos:column="26">HIWORD</name><argument_list pos:line="785" pos:column="32">(<argument><expr><name pos:line="785" pos:column="33">nIconSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="786" pos:column="9">WORD</name></type> <name pos:line="786" pos:column="14">sizeLarge</name> <init pos:line="786" pos:column="24">= <expr><call><name pos:line="786" pos:column="26">LOWORD</name><argument_list pos:line="786" pos:column="32">(<argument><expr><name pos:line="786" pos:column="33">nIconSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="787" pos:column="9">ICONINFO</name></type> <name pos:line="787" pos:column="18">iconinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="788" pos:column="9">BOOL</name></type> <name pos:line="788" pos:column="14">res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="789" pos:column="9">HRESULT</name></type> <name pos:line="789" pos:column="17">hrSmall</name> <init pos:line="789" pos:column="25">= <expr><name pos:line="789" pos:column="27">S_OK</name></expr></init><op:operator pos:line="789" pos:column="31">,</op:operator> <name pos:line="789" pos:column="33">hrLarge</name> <init pos:line="789" pos:column="41">= <expr><name pos:line="789" pos:column="43">S_OK</name></expr></init></decl>;</decl_stmt>

	<if pos:line="791" pos:column="9">if <condition pos:line="791" pos:column="12">(<expr><name pos:line="791" pos:column="13">phiconSmall</name></expr>)</condition><then pos:line="791" pos:column="25">
		<expr_stmt><expr><name pos:line="792" pos:column="17">hrSmall</name> <op:operator pos:line="792" pos:column="25">=</op:operator> <call><name pos:line="792" pos:column="27">LoadShellIcon</name><argument_list pos:line="792" pos:column="40">(<argument><expr><name pos:line="792" pos:column="41">sizeSmall</name></expr></argument>, <argument><expr><name pos:line="792" pos:column="52">sizeSmall</name></expr></argument>, <argument><expr><name pos:line="792" pos:column="63">phiconSmall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	<if pos:line="793" pos:column="9">if <condition pos:line="793" pos:column="12">(<expr><name pos:line="793" pos:column="13">phiconLarge</name></expr>)</condition><then pos:line="793" pos:column="25">
		<expr_stmt><expr><name pos:line="794" pos:column="17">hrLarge</name> <op:operator pos:line="794" pos:column="25">=</op:operator> <call><name pos:line="794" pos:column="27">LoadShellIcon</name><argument_list pos:line="794" pos:column="40">(<argument><expr><name pos:line="794" pos:column="41">sizeLarge</name></expr></argument>, <argument><expr><name pos:line="794" pos:column="52">sizeLarge</name></expr></argument>, <argument><expr><name pos:line="794" pos:column="63">phiconLarge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

	<if pos:line="796" pos:column="9">if <condition pos:line="796" pos:column="12">(<expr><call><name pos:line="796" pos:column="13">FAILED</name><argument_list pos:line="796" pos:column="19">(<argument><expr><name pos:line="796" pos:column="20">hrSmall</name></expr></argument>)</argument_list></call> <op:operator pos:line="796" pos:column="29">||</op:operator> <call><name pos:line="796" pos:column="32">FAILED</name><argument_list pos:line="796" pos:column="38">(<argument><expr><name pos:line="796" pos:column="39">hrLarge</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="796" pos:column="48"> <block pos:line="796" pos:column="49">{
		<expr_stmt><expr><call><name pos:line="797" pos:column="17">InvalidateIcon</name><argument_list pos:line="797" pos:column="31">(<argument><expr><name pos:line="797" pos:column="32">phiconSmall</name></expr></argument>, <argument><expr><name pos:line="797" pos:column="45">phiconLarge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="798" pos:column="17">return <expr><name pos:line="798" pos:column="24">S_FALSE</name></expr>;</return>
	}</block></then></if>

	<if pos:line="801" pos:column="9">if <condition pos:line="801" pos:column="12">(<expr><op:operator pos:line="801" pos:column="13">!</op:operator><name pos:line="801" pos:column="14">m_isDynamic</name> <op:operator pos:line="801" pos:column="26">||</op:operator> <op:operator pos:line="801" pos:column="29">!</op:operator><name pos:line="801" pos:column="30">phiconLarge</name> <op:operator pos:line="801" pos:column="42">||</op:operator> <name pos:line="801" pos:column="45">sizeLarge</name> <op:operator pos:line="801" pos:column="55">&lt;</op:operator> <lit:literal type="number" pos:line="801" pos:column="57">32</lit:literal></expr>)</condition><then pos:line="801" pos:column="60">	<comment type="line" pos:line="801" pos:column="65">//No modifications required</comment>
		<return pos:line="802" pos:column="17">return <expr><name pos:line="802" pos:column="24">S_OK</name></expr>;</return></then></if>

	<decl_stmt><decl><type><name pos:line="804" pos:column="9">HDC</name></type> <name pos:line="804" pos:column="13">dcEditColor</name></decl><op:operator pos:line="804" pos:column="24">,</op:operator> <decl><type ref="prev"/><name pos:line="804" pos:column="26">dcEditMask</name></decl><op:operator pos:line="804" pos:column="36">,</op:operator> <decl><type ref="prev"/><name pos:line="804" pos:column="38">dcEditTemp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="805" pos:column="9">HFONT</name></type> <name pos:line="805" pos:column="15">font</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="806" pos:column="9">HBRUSH</name></type> <name pos:line="806" pos:column="16">brush</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="807" pos:column="9">HPEN</name></type> <name pos:line="807" pos:column="14">pen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="808" pos:column="9">BITMAPINFO</name></type> <name pos:line="808" pos:column="20">bmi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="809" pos:column="5">HBITMAP</name></type> <name pos:line="809" pos:column="13">hbm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name pos:line="810" pos:column="5">LPDWORD</name></type> <name pos:line="810" pos:column="13">pPix</name></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="812" pos:column="9">res</name> <op:operator pos:line="812" pos:column="13">=</op:operator> <call><name pos:line="812" pos:column="15">GetIconInfo</name><argument_list pos:line="812" pos:column="26">(<argument><expr><op:operator pos:line="812" pos:column="27">*</op:operator><name pos:line="812" pos:column="28">phiconLarge</name></expr></argument>, <argument><expr><op:operator pos:line="812" pos:column="41">&amp;</op:operator><name pos:line="812" pos:column="42">iconinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="813" pos:column="9">if <condition pos:line="813" pos:column="12">(<expr><op:operator pos:line="813" pos:column="13">!</op:operator><name pos:line="813" pos:column="14">res</name></expr>)</condition><then pos:line="813" pos:column="18">
		<return pos:line="814" pos:column="17">return <expr><name pos:line="814" pos:column="24">S_OK</name></expr>;</return></then></if>	<comment type="line" pos:line="814" pos:column="33">//abort, the icon is still valid</comment>

	<expr_stmt><expr><name pos:line="816" pos:column="9">res</name> <op:operator pos:line="816" pos:column="13">=</op:operator> <call><name pos:line="816" pos:column="15">DestroyIcon</name><argument_list pos:line="816" pos:column="26">(<argument><expr><op:operator pos:line="816" pos:column="27">*</op:operator><name pos:line="816" pos:column="28">phiconLarge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="817" pos:column="9">if <condition pos:line="817" pos:column="12">(<expr><op:operator pos:line="817" pos:column="13">!</op:operator><name pos:line="817" pos:column="14">res</name></expr>)</condition><then pos:line="817" pos:column="18">
		<return pos:line="818" pos:column="17">return <expr><name pos:line="818" pos:column="24">S_OK</name></expr>;</return></then>
	<else pos:line="819" pos:column="9">else
		<expr_stmt><expr><op:operator pos:line="820" pos:column="17">*</op:operator><name pos:line="820" pos:column="18">phiconLarge</name> <op:operator pos:line="820" pos:column="30">=</op:operator> <name pos:line="820" pos:column="32">NULL</name></expr>;</expr_stmt></else></if>

	<expr_stmt><expr><name pos:line="822" pos:column="9">dcEditColor</name> <op:operator pos:line="822" pos:column="21">=</op:operator> <call><name pos:line="822" pos:column="23">CreateCompatibleDC</name><argument_list pos:line="822" pos:column="41">(<argument><expr><call><name pos:line="822" pos:column="42">GetDC</name><argument_list pos:line="822" pos:column="47">(<argument><expr><lit:literal type="number" pos:line="822" pos:column="48">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="823" pos:column="9">dcEditMask</name> <op:operator pos:line="823" pos:column="20">=</op:operator> <call><name pos:line="823" pos:column="22">CreateCompatibleDC</name><argument_list pos:line="823" pos:column="40">(<argument><expr><call><name pos:line="823" pos:column="41">GetDC</name><argument_list pos:line="823" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="823" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="824" pos:column="9">dcEditTemp</name> <op:operator pos:line="824" pos:column="20">=</op:operator> <call><name pos:line="824" pos:column="22">CreateCompatibleDC</name><argument_list pos:line="824" pos:column="40">(<argument><expr><call><name pos:line="824" pos:column="41">GetDC</name><argument_list pos:line="824" pos:column="46">(<argument><expr><lit:literal type="number" pos:line="824" pos:column="47">0</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:line="826" pos:column="5">// Create temp bitmap to render rectangle to</comment>
    <expr_stmt><expr><call><name pos:line="827" pos:column="5">ZeroMemory</name><argument_list pos:line="827" pos:column="15">(<argument><expr><op:operator pos:line="827" pos:column="16">&amp;</op:operator><name pos:line="827" pos:column="17">bmi</name></expr></argument>, <argument><expr><sizeof pos:line="827" pos:column="22">sizeof<argument_list pos:line="827" pos:column="28">(<argument><expr><name pos:line="827" pos:column="29">bmi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="828" pos:column="5">bmi</name><op:operator pos:line="828" pos:column="8">.</op:operator><name pos:line="828" pos:column="9">bmiHeader</name><op:operator pos:line="828" pos:column="18">.</op:operator><name pos:line="828" pos:column="19">biSize</name></name> <op:operator pos:line="828" pos:column="26">=</op:operator> <sizeof pos:line="828" pos:column="28">sizeof<argument_list pos:line="828" pos:column="34">(<argument><expr><name pos:line="828" pos:column="35">BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="829" pos:column="5">bmi</name><op:operator pos:line="829" pos:column="8">.</op:operator><name pos:line="829" pos:column="9">bmiHeader</name><op:operator pos:line="829" pos:column="18">.</op:operator><name pos:line="829" pos:column="19">biWidth</name></name> <op:operator pos:line="829" pos:column="27">=</op:operator> <name pos:line="829" pos:column="29">sizeLarge</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="830" pos:column="5">bmi</name><op:operator pos:line="830" pos:column="8">.</op:operator><name pos:line="830" pos:column="9">bmiHeader</name><op:operator pos:line="830" pos:column="18">.</op:operator><name pos:line="830" pos:column="19">biHeight</name></name> <op:operator pos:line="830" pos:column="28">=</op:operator> <name pos:line="830" pos:column="30">sizeLarge</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="831" pos:column="5">bmi</name><op:operator pos:line="831" pos:column="8">.</op:operator><name pos:line="831" pos:column="9">bmiHeader</name><op:operator pos:line="831" pos:column="18">.</op:operator><name pos:line="831" pos:column="19">biPlanes</name></name> <op:operator pos:line="831" pos:column="28">=</op:operator> <lit:literal type="number" pos:line="831" pos:column="30">1</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="832" pos:column="5">bmi</name><op:operator pos:line="832" pos:column="8">.</op:operator><name pos:line="832" pos:column="9">bmiHeader</name><op:operator pos:line="832" pos:column="18">.</op:operator><name pos:line="832" pos:column="19">biBitCount</name></name> <op:operator pos:line="832" pos:column="30">=</op:operator> <lit:literal type="number" pos:line="832" pos:column="32">32</lit:literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name pos:line="833" pos:column="5">bmi</name><op:operator pos:line="833" pos:column="8">.</op:operator><name pos:line="833" pos:column="9">bmiHeader</name><op:operator pos:line="833" pos:column="18">.</op:operator><name pos:line="833" pos:column="19">biCompression</name></name> <op:operator pos:line="833" pos:column="33">=</op:operator> <name pos:line="833" pos:column="35">BI_RGB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name pos:line="834" pos:column="5">hbm</name> <op:operator pos:line="834" pos:column="9">=</op:operator> <call><name pos:line="834" pos:column="11">CreateDIBSection</name><argument_list pos:line="834" pos:column="27">(<argument><expr><name pos:line="834" pos:column="28">dcEditTemp</name></expr></argument>, <argument><expr><op:operator pos:line="834" pos:column="40">&amp;</op:operator><name pos:line="834" pos:column="41">bmi</name></expr></argument>, <argument><expr><name pos:line="834" pos:column="46">DIB_RGB_COLORS</name></expr></argument>, <argument><expr><op:operator pos:line="834" pos:column="62">(</op:operator><name pos:line="834" pos:column="63">VOID</name><op:operator pos:line="834" pos:column="67">*</op:operator><op:operator pos:line="834" pos:column="68">*</op:operator><op:operator pos:line="834" pos:column="69">)</op:operator><op:operator pos:line="834" pos:column="70">&amp;</op:operator><name pos:line="834" pos:column="71">pPix</name></expr></argument>, <argument><expr><name pos:line="834" pos:column="77">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="834" pos:column="83">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name pos:line="835" pos:column="5">memset</name><argument_list pos:line="835" pos:column="11">(<argument><expr><name pos:line="835" pos:column="12">pPix</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="835" pos:column="18">0x00FFFFFF</lit:literal></expr></argument>, <argument><expr><sizeof pos:line="835" pos:column="30">sizeof<argument_list pos:line="835" pos:column="36">(<argument><expr><name pos:line="835" pos:column="37">DWORD</name></expr></argument>)</argument_list></sizeof><op:operator pos:line="835" pos:column="43">*</op:operator><name pos:line="835" pos:column="44">sizeLarge</name><op:operator pos:line="835" pos:column="53">*</op:operator><name pos:line="835" pos:column="54">sizeLarge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="835" pos:column="73">//initialize to white pixels, no alpha</comment>

	<expr_stmt><expr><call><name pos:line="837" pos:column="9">SelectObject</name><argument_list pos:line="837" pos:column="21">(<argument><expr><name pos:line="837" pos:column="22">dcEditColor</name></expr></argument>, <argument><expr><name><name pos:line="837" pos:column="35">iconinfo</name><op:operator pos:line="837" pos:column="43">.</op:operator><name pos:line="837" pos:column="44">hbmColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="838" pos:column="9">SelectObject</name><argument_list pos:line="838" pos:column="21">(<argument><expr><name pos:line="838" pos:column="22">dcEditMask</name></expr></argument>, <argument><expr><name><name pos:line="838" pos:column="34">iconinfo</name><op:operator pos:line="838" pos:column="42">.</op:operator><name pos:line="838" pos:column="43">hbmMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="839" pos:column="9">SelectObject</name><argument_list pos:line="839" pos:column="21">(<argument><expr><name pos:line="839" pos:column="22">dcEditTemp</name></expr></argument>, <argument><expr><name pos:line="839" pos:column="34">hbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name pos:line="841" pos:column="9">LONG</name></type> <name pos:line="841" pos:column="14">calSize</name> <init pos:line="841" pos:column="22">= <expr><call pos:line="841" pos:column="24">(<name pos:line="841" pos:column="25">LONG</name>)<argument_list pos:line="841" pos:column="30">(<argument><expr><name pos:line="841" pos:column="31">sizeLarge</name><op:operator pos:line="841" pos:column="40">*</op:operator><lit:literal type="number" pos:line="841" pos:column="41">2</lit:literal><op:operator pos:line="841" pos:column="42">/</op:operator><lit:literal type="number" pos:line="841" pos:column="43">5</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="843" pos:column="9">LOGFONT</name></type> <name pos:line="843" pos:column="17">lf</name> <init pos:line="843" pos:column="20">= <expr><block pos:line="843" pos:column="22">{<expr><lit:literal type="number" pos:line="843" pos:column="23">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="26">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="29">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="32">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="35">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="38">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="41">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="44">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="47">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="50">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="53">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="56">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="843" pos:column="59">0</lit:literal></expr>, <expr><block pos:line="843" pos:column="62">{<expr><lit:literal type="number" pos:line="843" pos:column="63">0</lit:literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="844" pos:column="9">lf</name><op:operator pos:line="844" pos:column="11">.</op:operator><name pos:line="844" pos:column="12">lfHeight</name></name> <op:operator pos:line="844" pos:column="21">=</op:operator> <name pos:line="844" pos:column="23">calSize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="845" pos:column="9">lf</name><op:operator pos:line="845" pos:column="11">.</op:operator><name pos:line="845" pos:column="12">lfWeight</name></name> <op:operator pos:line="845" pos:column="21">=</op:operator> <name pos:line="845" pos:column="23">FW_NORMAL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="846" pos:column="9">lf</name><op:operator pos:line="846" pos:column="11">.</op:operator><name pos:line="846" pos:column="12">lfCharSet</name></name> <op:operator pos:line="846" pos:column="22">=</op:operator> <name pos:line="846" pos:column="24">DEFAULT_CHARSET</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="847" pos:column="9">lstrcpyn</name><argument_list pos:line="847" pos:column="17">(<argument><expr><name><name pos:line="847" pos:column="18">lf</name><op:operator pos:line="847" pos:column="20">.</op:operator><name pos:line="847" pos:column="21">lfFaceName</name></name></expr></argument>, <argument><expr><call><name pos:line="847" pos:column="33">TEXT</name><argument_list pos:line="847" pos:column="37">(<argument><expr><lit:literal type="string" pos:line="847" pos:column="38">"Courier New"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="847" pos:column="54">LF_FACESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name pos:line="848" pos:column="9">RECT</name></type> <name pos:line="848" pos:column="14">rectText</name> <init pos:line="848" pos:column="23">= <expr><block pos:line="848" pos:column="25">{<expr><lit:literal type="number" pos:line="848" pos:column="26">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="848" pos:column="29">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="848" pos:column="32">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="848" pos:column="35">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="849" pos:column="9">RECT</name></type> <name pos:line="849" pos:column="14">rectBox</name> <init pos:line="849" pos:column="22">= <expr><block pos:line="849" pos:column="24">{<expr><lit:literal type="number" pos:line="849" pos:column="25">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="849" pos:column="28">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="849" pos:column="31">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="849" pos:column="34">0</lit:literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="850" pos:column="9">COLORREF</name></type> <name pos:line="850" pos:column="18">backGround</name> <init pos:line="850" pos:column="29">= <expr><call><name pos:line="850" pos:column="31">RGB</name><argument_list pos:line="850" pos:column="34">(<argument><expr><lit:literal type="number" pos:line="850" pos:column="35">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="850" pos:column="38">1</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="850" pos:column="41">60</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="851" pos:column="9">COLORREF</name></type> <name pos:line="851" pos:column="18">textColor</name> <init pos:line="851" pos:column="28">= <expr><call><name pos:line="851" pos:column="30">RGB</name><argument_list pos:line="851" pos:column="33">(<argument><expr><lit:literal type="number" pos:line="851" pos:column="34">250</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="851" pos:column="38">250</lit:literal></expr></argument>,<argument><expr><lit:literal type="number" pos:line="851" pos:column="42">250</lit:literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name pos:line="853" pos:column="9">font</name> <op:operator pos:line="853" pos:column="14">=</op:operator> <call><name pos:line="853" pos:column="16">CreateFontIndirect</name><argument_list pos:line="853" pos:column="34">(<argument><expr><op:operator pos:line="853" pos:column="35">&amp;</op:operator><name pos:line="853" pos:column="36">lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="854" pos:column="9">brush</name> <op:operator pos:line="854" pos:column="15">=</op:operator> <call><name pos:line="854" pos:column="17">CreateSolidBrush</name><argument_list pos:line="854" pos:column="33">(<argument><expr><name pos:line="854" pos:column="34">backGround</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="855" pos:column="9">pen</name> <op:operator pos:line="855" pos:column="13">=</op:operator> <call><name pos:line="855" pos:column="15">CreatePen</name><argument_list pos:line="855" pos:column="24">(<argument><expr><name pos:line="855" pos:column="25">PS_NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="855" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><name pos:line="855" pos:column="37">backGround</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="856" pos:column="9">SelectObject</name><argument_list pos:line="856" pos:column="21">(<argument><expr><name pos:line="856" pos:column="22">dcEditTemp</name></expr></argument>, <argument><expr><name pos:line="856" pos:column="34">font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="857" pos:column="9">SelectObject</name><argument_list pos:line="857" pos:column="21">(<argument><expr><name pos:line="857" pos:column="22">dcEditTemp</name></expr></argument>, <argument><expr><name pos:line="857" pos:column="34">brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="858" pos:column="9">SelectObject</name><argument_list pos:line="858" pos:column="21">(<argument><expr><name pos:line="858" pos:column="22">dcEditTemp</name></expr></argument>, <argument><expr><name pos:line="858" pos:column="34">pen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="859" pos:column="9">SetBkMode</name><argument_list pos:line="859" pos:column="18">(<argument><expr><name pos:line="859" pos:column="19">dcEditTemp</name></expr></argument>, <argument><expr><name pos:line="859" pos:column="31">TRANSPARENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="line" pos:line="859" pos:column="49">//dont clear background when drawing text</comment>
	<expr_stmt><expr><call><name pos:line="860" pos:column="9">SetBkColor</name><argument_list pos:line="860" pos:column="19">(<argument><expr><name pos:line="860" pos:column="20">dcEditTemp</name></expr></argument>,  <argument><expr><name pos:line="860" pos:column="33">backGround</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="861" pos:column="9">SetTextColor</name><argument_list pos:line="861" pos:column="21">(<argument><expr><name pos:line="861" pos:column="22">dcEditTemp</name></expr></argument>, <argument><expr><name pos:line="861" pos:column="34">textColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="863" pos:column="9">//Calculate size of the displayed string</comment>
	<decl_stmt><decl><type><name pos:line="864" pos:column="9">SIZE</name></type> <name pos:line="864" pos:column="14">stringSize</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="865" pos:column="9">GetTextExtentPoint32</name><argument_list pos:line="865" pos:column="29">(<argument><expr><name pos:line="865" pos:column="30">dcEditTemp</name></expr></argument>, <argument><expr><name pos:line="865" pos:column="42">m_szFilePath</name></expr></argument>, <argument><expr><name pos:line="865" pos:column="56">m_nameLength</name></expr></argument>, <argument><expr><op:operator pos:line="865" pos:column="70">&amp;</op:operator><name pos:line="865" pos:column="71">stringSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="866" pos:column="9">stringSize</name><op:operator pos:line="866" pos:column="19">.</op:operator><name pos:line="866" pos:column="20">cx</name></name> <op:operator pos:line="866" pos:column="23">=</op:operator> <call><name><name pos:line="866" pos:column="25">std</name><op:operator pos:line="866" pos:column="28">::</op:operator><name pos:line="866" pos:column="30">min</name></name><argument_list pos:line="866" pos:column="33">(<argument><expr><name><name pos:line="866" pos:column="34">stringSize</name><op:operator pos:line="866" pos:column="44">.</op:operator><name pos:line="866" pos:column="45">cx</name></name></expr></argument>, <argument><expr><op:operator pos:line="866" pos:column="49">(</op:operator><name pos:line="866" pos:column="50">LONG</name><op:operator pos:line="866" pos:column="54">)</op:operator><name pos:line="866" pos:column="55">sizeLarge</name><op:operator pos:line="866" pos:column="64">-</op:operator><lit:literal type="number" pos:line="866" pos:column="65">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="867" pos:column="9">stringSize</name><op:operator pos:line="867" pos:column="19">.</op:operator><name pos:line="867" pos:column="20">cy</name></name> <op:operator pos:line="867" pos:column="23">=</op:operator> <call><name><name pos:line="867" pos:column="25">std</name><op:operator pos:line="867" pos:column="28">::</op:operator><name pos:line="867" pos:column="30">min</name></name><argument_list pos:line="867" pos:column="33">(<argument><expr><name><name pos:line="867" pos:column="34">stringSize</name><op:operator pos:line="867" pos:column="44">.</op:operator><name pos:line="867" pos:column="45">cy</name></name></expr></argument>, <argument><expr><op:operator pos:line="867" pos:column="49">(</op:operator><name pos:line="867" pos:column="50">LONG</name><op:operator pos:line="867" pos:column="54">)</op:operator><name pos:line="867" pos:column="55">sizeLarge</name><op:operator pos:line="867" pos:column="64">-</op:operator><lit:literal type="number" pos:line="867" pos:column="65">2</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="869" pos:column="9">rectText</name><op:operator pos:line="869" pos:column="17">.</op:operator><name pos:line="869" pos:column="18">top</name></name> <op:operator pos:line="869" pos:column="22">=</op:operator> <name pos:line="869" pos:column="24">sizeLarge</name> <op:operator pos:line="869" pos:column="34">-</op:operator> <name><name pos:line="869" pos:column="36">stringSize</name><op:operator pos:line="869" pos:column="46">.</op:operator><name pos:line="869" pos:column="47">cy</name></name> <op:operator pos:line="869" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="869" pos:column="52">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="870" pos:column="9">rectText</name><op:operator pos:line="870" pos:column="17">.</op:operator><name pos:line="870" pos:column="18">left</name></name> <op:operator pos:line="870" pos:column="23">=</op:operator> <name pos:line="870" pos:column="25">sizeLarge</name> <op:operator pos:line="870" pos:column="35">-</op:operator> <name><name pos:line="870" pos:column="37">stringSize</name><op:operator pos:line="870" pos:column="47">.</op:operator><name pos:line="870" pos:column="48">cx</name></name> <op:operator pos:line="870" pos:column="51">-</op:operator> <lit:literal type="number" pos:line="870" pos:column="53">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="871" pos:column="9">rectText</name><op:operator pos:line="871" pos:column="17">.</op:operator><name pos:line="871" pos:column="18">bottom</name></name> <op:operator pos:line="871" pos:column="25">=</op:operator> <name pos:line="871" pos:column="27">sizeLarge</name> <op:operator pos:line="871" pos:column="37">-</op:operator> <lit:literal type="number" pos:line="871" pos:column="39">1</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="872" pos:column="9">rectText</name><op:operator pos:line="872" pos:column="17">.</op:operator><name pos:line="872" pos:column="18">right</name></name> <op:operator pos:line="872" pos:column="24">=</op:operator> <name pos:line="872" pos:column="26">sizeLarge</name> <op:operator pos:line="872" pos:column="36">-</op:operator> <lit:literal type="number" pos:line="872" pos:column="38">1</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name pos:line="874" pos:column="9">rectBox</name><op:operator pos:line="874" pos:column="16">.</op:operator><name pos:line="874" pos:column="17">top</name></name> <op:operator pos:line="874" pos:column="21">=</op:operator> <name pos:line="874" pos:column="23">sizeLarge</name> <op:operator pos:line="874" pos:column="33">-</op:operator> <name><name pos:line="874" pos:column="35">stringSize</name><op:operator pos:line="874" pos:column="45">.</op:operator><name pos:line="874" pos:column="46">cy</name></name> <op:operator pos:line="874" pos:column="49">-</op:operator> <lit:literal type="number" pos:line="874" pos:column="51">2</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="875" pos:column="9">rectBox</name><op:operator pos:line="875" pos:column="16">.</op:operator><name pos:line="875" pos:column="17">left</name></name> <op:operator pos:line="875" pos:column="22">=</op:operator> <name pos:line="875" pos:column="24">sizeLarge</name> <op:operator pos:line="875" pos:column="34">-</op:operator> <name><name pos:line="875" pos:column="36">stringSize</name><op:operator pos:line="875" pos:column="46">.</op:operator><name pos:line="875" pos:column="47">cx</name></name> <op:operator pos:line="875" pos:column="50">-</op:operator> <lit:literal type="number" pos:line="875" pos:column="52">2</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="876" pos:column="9">rectBox</name><op:operator pos:line="876" pos:column="16">.</op:operator><name pos:line="876" pos:column="17">bottom</name></name> <op:operator pos:line="876" pos:column="24">=</op:operator> <name pos:line="876" pos:column="26">sizeLarge</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="877" pos:column="9">rectBox</name><op:operator pos:line="877" pos:column="16">.</op:operator><name pos:line="877" pos:column="17">right</name></name> <op:operator pos:line="877" pos:column="23">=</op:operator> <name pos:line="877" pos:column="25">sizeLarge</name></expr>;</expr_stmt>

	<comment type="line" pos:line="879" pos:column="9">//Draw the background (rounded) rectangle</comment>
	<decl_stmt><decl><type><name pos:line="880" pos:column="9">int</name></type> <name pos:line="880" pos:column="13">elipsSize</name> <init pos:line="880" pos:column="23">= <expr><name pos:line="880" pos:column="25">calSize</name><op:operator pos:line="880" pos:column="32">/</op:operator><lit:literal type="number" pos:line="880" pos:column="33">3</lit:literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="881" pos:column="9">RoundRect</name><argument_list pos:line="881" pos:column="18">(<argument><expr><name pos:line="881" pos:column="19">dcEditTemp</name></expr></argument>, <argument><expr><name><name pos:line="881" pos:column="31">rectBox</name><op:operator pos:line="881" pos:column="38">.</op:operator><name pos:line="881" pos:column="39">left</name></name></expr></argument>, <argument><expr><name><name pos:line="881" pos:column="45">rectBox</name><op:operator pos:line="881" pos:column="52">.</op:operator><name pos:line="881" pos:column="53">top</name></name></expr></argument>, <argument><expr><name><name pos:line="881" pos:column="58">rectBox</name><op:operator pos:line="881" pos:column="65">.</op:operator><name pos:line="881" pos:column="66">right</name></name></expr></argument>, <argument><expr><name><name pos:line="881" pos:column="73">rectBox</name><op:operator pos:line="881" pos:column="80">.</op:operator><name pos:line="881" pos:column="81">bottom</name></name></expr></argument>, <argument><expr><name pos:line="881" pos:column="89">elipsSize</name></expr></argument>, <argument><expr><name pos:line="881" pos:column="100">elipsSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line" pos:line="882" pos:column="9">//Draw text in the rectangle</comment>
	<expr_stmt><expr><call><name pos:line="883" pos:column="9">DrawText</name><argument_list pos:line="883" pos:column="17">(<argument><expr><name pos:line="883" pos:column="18">dcEditTemp</name></expr></argument>, <argument><expr><name pos:line="883" pos:column="30">m_szFilePath</name></expr></argument>, <argument><expr><name pos:line="883" pos:column="44">m_nameLength</name></expr></argument>, <argument><expr><op:operator pos:line="883" pos:column="58">&amp;</op:operator><name pos:line="883" pos:column="59">rectText</name></expr></argument>, <argument><expr><name pos:line="883" pos:column="69">DT_BOTTOM</name><op:operator pos:line="883" pos:column="78">|</op:operator><name pos:line="883" pos:column="79">DT_SINGLELINE</name><op:operator pos:line="883" pos:column="92">|</op:operator><name pos:line="883" pos:column="93">DT_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="885" pos:column="9">//set alpha of non white pixels back to 255</comment>
	<comment type="line" pos:line="886" pos:column="9">//premultiply alpha</comment>
	<comment type="line" pos:line="887" pos:column="9">//Fill in the mask bitmap (anything not 100% alpha is transparent)</comment>
	<decl_stmt><decl><type><name pos:line="888" pos:column="9">int</name></type> <name pos:line="888" pos:column="13">red</name></decl><op:operator pos:line="888" pos:column="16">,</op:operator> <decl><type ref="prev"/><name pos:line="888" pos:column="18">green</name></decl><op:operator pos:line="888" pos:column="23">,</op:operator> <decl><type ref="prev"/><name pos:line="888" pos:column="25">blue</name></decl><op:operator pos:line="888" pos:column="29">,</op:operator> <decl><type ref="prev"/><name pos:line="888" pos:column="31">alpha</name></decl>;</decl_stmt>
	<for pos:line="889" pos:column="9">for(<init><decl><type><name pos:line="889" pos:column="13">int</name></type> <name pos:line="889" pos:column="17">y</name> <init pos:line="889" pos:column="19">= <expr><lit:literal type="number" pos:line="889" pos:column="21">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="889" pos:column="24">y</name> <op:operator pos:line="889" pos:column="26">&lt;</op:operator> <name pos:line="889" pos:column="28">sizeLarge</name></expr>;</condition> <incr><expr><name pos:line="889" pos:column="39">y</name><op:operator pos:line="889" pos:column="40">++</op:operator></expr></incr>) <block pos:line="889" pos:column="44">{
		<for pos:line="890" pos:column="17">for(<init><decl><type><name pos:line="890" pos:column="21">int</name></type> <name pos:line="890" pos:column="25">x</name> <init pos:line="890" pos:column="27">= <expr><lit:literal type="number" pos:line="890" pos:column="29">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="890" pos:column="32">x</name> <op:operator pos:line="890" pos:column="34">&lt;</op:operator> <name pos:line="890" pos:column="36">sizeLarge</name></expr>;</condition> <incr><expr><name pos:line="890" pos:column="47">x</name><op:operator pos:line="890" pos:column="48">++</op:operator></expr></incr>) <block pos:line="890" pos:column="52">{
			<decl_stmt><decl><type><name pos:line="891" pos:column="25">DWORD</name> <type:modifier pos:line="891" pos:column="31">*</type:modifier></type> <name pos:line="891" pos:column="33">pix</name> <init pos:line="891" pos:column="37">= <expr><name pos:line="891" pos:column="39">pPix</name><op:operator pos:line="891" pos:column="43">+</op:operator><op:operator pos:line="891" pos:column="44">(</op:operator><name pos:line="891" pos:column="45">y</name><op:operator pos:line="891" pos:column="46">*</op:operator><name pos:line="891" pos:column="47">sizeLarge</name><op:operator pos:line="891" pos:column="56">+</op:operator><name pos:line="891" pos:column="57">x</name><op:operator pos:line="891" pos:column="58">)</op:operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name pos:line="892" pos:column="25">red</name> <op:operator pos:line="892" pos:column="29">=</op:operator> <op:operator pos:line="892" pos:column="31">*</op:operator><name pos:line="892" pos:column="32">pix</name> <op:operator pos:line="892" pos:column="36">&amp;</op:operator> <lit:literal type="number" pos:line="892" pos:column="38">0xFF</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="893" pos:column="25">green</name> <op:operator pos:line="893" pos:column="31">=</op:operator> <op:operator pos:line="893" pos:column="33">*</op:operator><name pos:line="893" pos:column="34">pix</name> <op:operator pos:line="893" pos:column="38">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="893" pos:column="41">8</lit:literal> <op:operator pos:line="893" pos:column="43">&amp;</op:operator> <lit:literal type="number" pos:line="893" pos:column="45">0xFF</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="894" pos:column="25">blue</name> <op:operator pos:line="894" pos:column="30">=</op:operator> <op:operator pos:line="894" pos:column="32">*</op:operator><name pos:line="894" pos:column="33">pix</name> <op:operator pos:line="894" pos:column="37">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="894" pos:column="40">16</lit:literal> <op:operator pos:line="894" pos:column="43">&amp;</op:operator> <lit:literal type="number" pos:line="894" pos:column="45">0xFF</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="895" pos:column="25">alpha</name> <op:operator pos:line="895" pos:column="31">=</op:operator> <op:operator pos:line="895" pos:column="33">*</op:operator><name pos:line="895" pos:column="34">pix</name> <op:operator pos:line="895" pos:column="38">&gt;&gt;</op:operator> <lit:literal type="number" pos:line="895" pos:column="41">24</lit:literal> <op:operator pos:line="895" pos:column="44">&amp;</op:operator> <lit:literal type="number" pos:line="895" pos:column="46">0xFF</lit:literal></expr>;</expr_stmt>
			<if pos:line="896" pos:column="25">if <condition pos:line="896" pos:column="28">(<expr><op:operator pos:line="896" pos:column="29">(</op:operator><op:operator pos:line="896" pos:column="30">*</op:operator><name pos:line="896" pos:column="31">pix</name> <op:operator pos:line="896" pos:column="35">&lt;&lt;</op:operator> <lit:literal type="number" pos:line="896" pos:column="38">8</lit:literal><op:operator pos:line="896" pos:column="39">)</op:operator> <op:operator pos:line="896" pos:column="41">==</op:operator> <lit:literal type="number" pos:line="896" pos:column="44">0xFFFFFF00</lit:literal></expr>)</condition><then pos:line="896" pos:column="55">
				<expr_stmt><expr><name pos:line="897" pos:column="33">alpha</name> <op:operator pos:line="897" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="897" pos:column="41">0x00</lit:literal></expr>;</expr_stmt></then>
			<else pos:line="898" pos:column="25">else
				<expr_stmt><expr><name pos:line="899" pos:column="33">alpha</name> <op:operator pos:line="899" pos:column="39">=</op:operator> <lit:literal type="number" pos:line="899" pos:column="41">0xFF</lit:literal></expr>;</expr_stmt></else></if>
			<expr_stmt><expr><name pos:line="900" pos:column="25">red</name> <op:operator pos:line="900" pos:column="29">=</op:operator> <op:operator pos:line="900" pos:column="31">(</op:operator><name pos:line="900" pos:column="32">red</name><op:operator pos:line="900" pos:column="35">*</op:operator><name pos:line="900" pos:column="36">alpha</name><op:operator pos:line="900" pos:column="41">)</op:operator><op:operator pos:line="900" pos:column="42">/</op:operator><lit:literal type="number" pos:line="900" pos:column="43">0xFF</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="901" pos:column="25">green</name> <op:operator pos:line="901" pos:column="31">=</op:operator> <op:operator pos:line="901" pos:column="33">(</op:operator><name pos:line="901" pos:column="34">green</name><op:operator pos:line="901" pos:column="39">*</op:operator><name pos:line="901" pos:column="40">alpha</name><op:operator pos:line="901" pos:column="45">)</op:operator><op:operator pos:line="901" pos:column="46">/</op:operator><lit:literal type="number" pos:line="901" pos:column="47">0xFF</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><name pos:line="902" pos:column="25">blue</name> <op:operator pos:line="902" pos:column="30">=</op:operator> <op:operator pos:line="902" pos:column="32">(</op:operator><name pos:line="902" pos:column="33">blue</name><op:operator pos:line="902" pos:column="37">*</op:operator><name pos:line="902" pos:column="38">alpha</name><op:operator pos:line="902" pos:column="43">)</op:operator><op:operator pos:line="902" pos:column="44">/</op:operator><lit:literal type="number" pos:line="902" pos:column="45">0xFF</lit:literal></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="903" pos:column="25">*</op:operator><name pos:line="903" pos:column="26">pix</name> <op:operator pos:line="903" pos:column="30">=</op:operator> <call><name pos:line="903" pos:column="32">RGBA</name><argument_list pos:line="903" pos:column="36">(<argument><expr><name pos:line="903" pos:column="37">red</name></expr></argument>, <argument><expr><name pos:line="903" pos:column="42">green</name></expr></argument>, <argument><expr><name pos:line="903" pos:column="49">blue</name></expr></argument>, <argument><expr><name pos:line="903" pos:column="55">alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="907" pos:column="9">BLENDFUNCTION</name></type> <name pos:line="907" pos:column="23">ftn</name> <init pos:line="907" pos:column="27">= <expr><block pos:line="907" pos:column="29">{ <expr><name pos:line="907" pos:column="31">AC_SRC_OVER</name></expr>, <expr><lit:literal type="number" pos:line="907" pos:column="44">0</lit:literal></expr>, <expr><lit:literal type="number" pos:line="907" pos:column="47">0xFF</lit:literal></expr>, <expr><name pos:line="907" pos:column="53">AC_SRC_ALPHA</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="908" pos:column="9">int</name></type> <name pos:line="908" pos:column="13">width</name> <init pos:line="908" pos:column="19">= <expr><name><name pos:line="908" pos:column="21">rectBox</name><op:operator pos:line="908" pos:column="28">.</op:operator><name pos:line="908" pos:column="29">right</name></name> <op:operator pos:line="908" pos:column="35">-</op:operator> <name><name pos:line="908" pos:column="37">rectBox</name><op:operator pos:line="908" pos:column="44">.</op:operator><name pos:line="908" pos:column="45">left</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="909" pos:column="9">int</name></type> <name pos:line="909" pos:column="13">height</name> <init pos:line="909" pos:column="20">= <expr><name><name pos:line="909" pos:column="22">rectBox</name><op:operator pos:line="909" pos:column="29">.</op:operator><name pos:line="909" pos:column="30">bottom</name></name> <op:operator pos:line="909" pos:column="37">-</op:operator> <name><name pos:line="909" pos:column="39">rectBox</name><op:operator pos:line="909" pos:column="46">.</op:operator><name pos:line="909" pos:column="47">top</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="910" pos:column="9">AlphaBlend</name><argument_list pos:line="910" pos:column="19">(<argument><expr><name pos:line="910" pos:column="20">dcEditColor</name></expr></argument>, <argument><expr><name><name pos:line="910" pos:column="33">rectBox</name><op:operator pos:line="910" pos:column="40">.</op:operator><name pos:line="910" pos:column="41">left</name></name></expr></argument>, <argument><expr><name><name pos:line="910" pos:column="47">rectBox</name><op:operator pos:line="910" pos:column="54">.</op:operator><name pos:line="910" pos:column="55">top</name></name></expr></argument>, <argument><expr><name><name pos:line="910" pos:column="60">stringSize</name><op:operator pos:line="910" pos:column="70">.</op:operator><name pos:line="910" pos:column="71">cx</name></name></expr></argument>, <argument><expr><name><name pos:line="910" pos:column="75">stringSize</name><op:operator pos:line="910" pos:column="85">.</op:operator><name pos:line="910" pos:column="86">cy</name></name></expr></argument>, <argument><expr><name pos:line="910" pos:column="90">dcEditTemp</name></expr></argument>, <argument><expr><name><name pos:line="910" pos:column="102">rectBox</name><op:operator pos:line="910" pos:column="109">.</op:operator><name pos:line="910" pos:column="110">left</name></name></expr></argument>, <argument><expr><name><name pos:line="910" pos:column="116">rectBox</name><op:operator pos:line="910" pos:column="123">.</op:operator><name pos:line="910" pos:column="124">top</name></name></expr></argument>, <argument><expr><name pos:line="910" pos:column="129">width</name></expr></argument>, <argument><expr><name pos:line="910" pos:column="136">height</name></expr></argument>, <argument><expr><name pos:line="910" pos:column="144">ftn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:line="912" pos:column="9">//Adjust the mask image: simply draw the rectangle to it</comment>
	<expr_stmt><expr><name pos:line="913" pos:column="9">backGround</name> <op:operator pos:line="913" pos:column="20">=</op:operator> <call><name pos:line="913" pos:column="22">RGB</name><argument_list pos:line="913" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="913" pos:column="26">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="913" pos:column="29">0</lit:literal></expr></argument>, <argument><expr><lit:literal type="number" pos:line="913" pos:column="32">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="914" pos:column="9">DeleteBrush</name><argument_list pos:line="914" pos:column="20">(<argument><expr><name pos:line="914" pos:column="21">brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="915" pos:column="9">DeletePen</name><argument_list pos:line="915" pos:column="18">(<argument><expr><name pos:line="915" pos:column="19">pen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="916" pos:column="9">brush</name> <op:operator pos:line="916" pos:column="15">=</op:operator> <call><name pos:line="916" pos:column="17">CreateSolidBrush</name><argument_list pos:line="916" pos:column="33">(<argument><expr><name pos:line="916" pos:column="34">backGround</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="917" pos:column="9">pen</name> <op:operator pos:line="917" pos:column="13">=</op:operator> <call><name pos:line="917" pos:column="15">CreatePen</name><argument_list pos:line="917" pos:column="24">(<argument><expr><name pos:line="917" pos:column="25">PS_NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="917" pos:column="34">0</lit:literal></expr></argument>, <argument><expr><name pos:line="917" pos:column="37">backGround</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="918" pos:column="9">SelectObject</name><argument_list pos:line="918" pos:column="21">(<argument><expr><name pos:line="918" pos:column="22">dcEditMask</name></expr></argument>, <argument><expr><name pos:line="918" pos:column="34">brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="919" pos:column="9">SelectObject</name><argument_list pos:line="919" pos:column="21">(<argument><expr><name pos:line="919" pos:column="22">dcEditMask</name></expr></argument>, <argument><expr><name pos:line="919" pos:column="34">pen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="920" pos:column="9">RoundRect</name><argument_list pos:line="920" pos:column="18">(<argument><expr><name pos:line="920" pos:column="19">dcEditMask</name></expr></argument>, <argument><expr><name><name pos:line="920" pos:column="31">rectBox</name><op:operator pos:line="920" pos:column="38">.</op:operator><name pos:line="920" pos:column="39">left</name></name></expr></argument>, <argument><expr><name><name pos:line="920" pos:column="45">rectBox</name><op:operator pos:line="920" pos:column="52">.</op:operator><name pos:line="920" pos:column="53">top</name></name></expr></argument>, <argument><expr><name><name pos:line="920" pos:column="58">rectBox</name><op:operator pos:line="920" pos:column="65">.</op:operator><name pos:line="920" pos:column="66">right</name></name></expr></argument>, <argument><expr><name><name pos:line="920" pos:column="73">rectBox</name><op:operator pos:line="920" pos:column="80">.</op:operator><name pos:line="920" pos:column="81">bottom</name></name></expr></argument>, <argument><expr><name pos:line="920" pos:column="89">elipsSize</name></expr></argument>, <argument><expr><name pos:line="920" pos:column="100">elipsSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name pos:line="923" pos:column="9">DeleteDC</name><argument_list pos:line="923" pos:column="17">(<argument><expr><name pos:line="923" pos:column="18">dcEditColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="924" pos:column="9">DeleteDC</name><argument_list pos:line="924" pos:column="17">(<argument><expr><name pos:line="924" pos:column="18">dcEditMask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="925" pos:column="9">DeleteDC</name><argument_list pos:line="925" pos:column="17">(<argument><expr><name pos:line="925" pos:column="18">dcEditTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="926" pos:column="9">DeleteBrush</name><argument_list pos:line="926" pos:column="20">(<argument><expr><name pos:line="926" pos:column="21">brush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="927" pos:column="9">DeletePen</name><argument_list pos:line="927" pos:column="18">(<argument><expr><name pos:line="927" pos:column="19">pen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="928" pos:column="9">DeleteFont</name><argument_list pos:line="928" pos:column="19">(<argument><expr><name pos:line="928" pos:column="20">font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="929" pos:column="9">DeleteBitmap</name><argument_list pos:line="929" pos:column="21">(<argument><expr><name pos:line="929" pos:column="22">hbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><op:operator pos:line="931" pos:column="9">*</op:operator><name pos:line="931" pos:column="10">phiconLarge</name> <op:operator pos:line="931" pos:column="22">=</op:operator> <call><name pos:line="931" pos:column="24">CreateIconIndirect</name><argument_list pos:line="931" pos:column="42">(<argument><expr><op:operator pos:line="931" pos:column="43">&amp;</op:operator><name pos:line="931" pos:column="44">iconinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="932" pos:column="9">DeleteBitmap</name><argument_list pos:line="932" pos:column="21">(<argument><expr><name><name pos:line="932" pos:column="22">iconinfo</name><op:operator pos:line="932" pos:column="30">.</op:operator><name pos:line="932" pos:column="31">hbmColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="933" pos:column="9">DeleteBitmap</name><argument_list pos:line="933" pos:column="21">(<argument><expr><name><name pos:line="933" pos:column="22">iconinfo</name><op:operator pos:line="933" pos:column="30">.</op:operator><name pos:line="933" pos:column="31">hbmMask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if pos:line="935" pos:column="9">if <condition pos:line="935" pos:column="12">(<expr><op:operator pos:line="935" pos:column="13">*</op:operator><name pos:line="935" pos:column="14">phiconLarge</name> <op:operator pos:line="935" pos:column="26">==</op:operator> <name pos:line="935" pos:column="29">NULL</name></expr>)</condition><then pos:line="935" pos:column="34"> <block pos:line="935" pos:column="35">{
		<expr_stmt><expr><call><name pos:line="936" pos:column="17">InvalidateIcon</name><argument_list pos:line="936" pos:column="31">(<argument><expr><name pos:line="936" pos:column="32">phiconSmall</name></expr></argument>, <argument><expr><name pos:line="936" pos:column="45">phiconLarge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="937" pos:column="17">return <expr><name pos:line="937" pos:column="24">S_FALSE</name></expr>;</return>
	}</block></then></if>

	<return pos:line="940" pos:column="9">return <expr><name pos:line="940" pos:column="16">S_OK</name></expr>;</return>
}</block></function>

<function><type><name pos:line="943" pos:column="1">void</name></type> <name pos:line="943" pos:column="6">InvalidateIcon</name><parameter_list pos:line="943" pos:column="20">(<param><decl><type><name pos:line="943" pos:column="21">HICON</name> <type:modifier pos:line="943" pos:column="27">*</type:modifier></type> <name pos:line="943" pos:column="29">iconSmall</name></decl></param>, <param><decl><type><name pos:line="943" pos:column="40">HICON</name> <type:modifier pos:line="943" pos:column="46">*</type:modifier></type> <name pos:line="943" pos:column="48">iconLarge</name></decl></param>)</parameter_list> <block pos:line="943" pos:column="59">{
	<if pos:line="944" pos:column="9">if <condition pos:line="944" pos:column="12">(<expr><name pos:line="944" pos:column="13">iconSmall</name> <op:operator pos:line="944" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="944" pos:column="26">*</op:operator><name pos:line="944" pos:column="27">iconSmall</name></expr>)</condition><then pos:line="944" pos:column="37"> <block pos:line="944" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="945" pos:column="17">DestroyIcon</name><argument_list pos:line="945" pos:column="28">(<argument><expr><op:operator pos:line="945" pos:column="29">*</op:operator><name pos:line="945" pos:column="30">iconSmall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="946" pos:column="17">*</op:operator><name pos:line="946" pos:column="18">iconSmall</name> <op:operator pos:line="946" pos:column="28">=</op:operator> <name pos:line="946" pos:column="30">NULL</name></expr>;</expr_stmt>
	}</block></then></if>
	<if pos:line="948" pos:column="9">if <condition pos:line="948" pos:column="12">(<expr><name pos:line="948" pos:column="13">iconLarge</name> <op:operator pos:line="948" pos:column="23">&amp;&amp;</op:operator> <op:operator pos:line="948" pos:column="26">*</op:operator><name pos:line="948" pos:column="27">iconLarge</name></expr>)</condition><then pos:line="948" pos:column="37"> <block pos:line="948" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="949" pos:column="17">DestroyIcon</name><argument_list pos:line="949" pos:column="28">(<argument><expr><op:operator pos:line="949" pos:column="29">*</op:operator><name pos:line="949" pos:column="30">iconLarge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="950" pos:column="17">*</op:operator><name pos:line="950" pos:column="18">iconLarge</name> <op:operator pos:line="950" pos:column="28">=</op:operator> <name pos:line="950" pos:column="30">NULL</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<comment type="line" pos:line="954" pos:column="1">// *** Private methods ***</comment>
<function><type><name pos:line="955" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="955" pos:column="14">CShellExt</name><op:operator pos:line="955" pos:column="23">::</op:operator><name pos:line="955" pos:column="25">InvokeNPP</name></name><parameter_list pos:line="955" pos:column="34">(<param><decl><type><name pos:line="955" pos:column="35">HWND</name></type></decl></param> <comment type="block" pos:line="955" pos:column="40">/*hParent*/</comment>, <param><decl><type><name pos:line="955" pos:column="53">LPCSTR</name></type></decl></param> <comment type="block" pos:line="955" pos:column="60">/*pszWorkingDir*/</comment>, <param><decl><type><name pos:line="955" pos:column="79">LPCSTR</name></type></decl></param> <comment type="block" pos:line="955" pos:column="86">/*pszCmd*/</comment>, <param><decl><type><name pos:line="955" pos:column="98">LPCSTR</name></type></decl></param> <comment type="block" pos:line="955" pos:column="105">/*pszParam*/</comment>, <param><decl><type><name pos:line="955" pos:column="119">int</name></type> <name pos:line="955" pos:column="123">iShowCmd</name></decl></param>)</parameter_list> <block pos:line="955" pos:column="133">{
	<decl_stmt><decl><type><name pos:line="956" pos:column="9">TCHAR</name></type> <name><name pos:line="956" pos:column="15">szFilename</name><index pos:line="956" pos:column="25">[<expr><name pos:line="956" pos:column="26">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="957" pos:column="9">TCHAR</name></type> <name><name pos:line="957" pos:column="15">szCustom</name><index pos:line="957" pos:column="23">[<expr><name pos:line="957" pos:column="24">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="958" pos:column="9">LPTSTR</name></type> <name pos:line="958" pos:column="16">pszCommand</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="959" pos:column="9">size_t</name></type> <name pos:line="959" pos:column="16">bytesRequired</name> <init pos:line="959" pos:column="30">= <expr><lit:literal type="number" pos:line="959" pos:column="32">1</lit:literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name pos:line="961" pos:column="9">TCHAR</name></type> <name><name pos:line="961" pos:column="15">szKeyTemp</name><index pos:line="961" pos:column="24">[<expr><name pos:line="961" pos:column="25">MAX_PATH</name> <op:operator pos:line="961" pos:column="34">+</op:operator> <name pos:line="961" pos:column="36">GUID_STRING_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="962" pos:column="9">DWORD</name></type> <name pos:line="962" pos:column="15">regSize</name> <init pos:line="962" pos:column="23">= <expr><lit:literal type="number" pos:line="962" pos:column="25">0</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="963" pos:column="9">DWORD</name></type> <name pos:line="963" pos:column="15">pathSize</name> <init pos:line="963" pos:column="24">= <expr><name pos:line="963" pos:column="26">MAX_PATH</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="964" pos:column="9">HKEY</name></type> <name pos:line="964" pos:column="14">settingKey</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="965" pos:column="9">LONG</name></type> <name pos:line="965" pos:column="14">result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name pos:line="967" pos:column="9">wsprintf</name><argument_list pos:line="967" pos:column="17">(<argument><expr><name pos:line="967" pos:column="18">szKeyTemp</name></expr></argument>, <argument><expr><call><name pos:line="967" pos:column="29">TEXT</name><argument_list pos:line="967" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="967" pos:column="34">"CLSID\\%s\\Settings"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="967" pos:column="58">szGUID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="968" pos:column="9">result</name> <op:operator pos:line="968" pos:column="16">=</op:operator> <call><name pos:line="968" pos:column="18">RegOpenKeyEx</name><argument_list pos:line="968" pos:column="30">(<argument><expr><name pos:line="968" pos:column="31">HKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name pos:line="968" pos:column="50">szKeyTemp</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="968" pos:column="61">0</lit:literal></expr></argument>, <argument><expr><name pos:line="968" pos:column="64">KEY_READ</name></expr></argument>, <argument><expr><op:operator pos:line="968" pos:column="74">&amp;</op:operator><name pos:line="968" pos:column="75">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="969" pos:column="9">if <condition pos:line="969" pos:column="12">(<expr><name pos:line="969" pos:column="13">result</name> <op:operator pos:line="969" pos:column="20">!=</op:operator> <name pos:line="969" pos:column="23">ERROR_SUCCESS</name></expr>)</condition><then pos:line="969" pos:column="37"> <block pos:line="969" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="970" pos:column="17">MsgBoxError</name><argument_list pos:line="970" pos:column="28">(<argument><expr><call><name pos:line="970" pos:column="29">TEXT</name><argument_list pos:line="970" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="970" pos:column="34">"Unable to open registry key."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="971" pos:column="17">return <expr><name pos:line="971" pos:column="24">E_FAIL</name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name pos:line="974" pos:column="9">result</name> <op:operator pos:line="974" pos:column="16">=</op:operator> <call><name pos:line="974" pos:column="18">RegQueryValueEx</name><argument_list pos:line="974" pos:column="33">(<argument><expr><name pos:line="974" pos:column="34">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="974" pos:column="46">TEXT</name><argument_list pos:line="974" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="974" pos:column="51">"Path"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="974" pos:column="60">NULL</name></expr></argument>, <argument><expr><name pos:line="974" pos:column="66">NULL</name></expr></argument>, <argument><expr><name pos:line="974" pos:column="72">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="974" pos:column="78">&amp;</op:operator><name pos:line="974" pos:column="79">regSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="975" pos:column="9">if <condition pos:line="975" pos:column="12">(<expr><name pos:line="975" pos:column="13">result</name> <op:operator pos:line="975" pos:column="20">==</op:operator> <name pos:line="975" pos:column="23">ERROR_SUCCESS</name></expr>)</condition><then pos:line="975" pos:column="37"> <block pos:line="975" pos:column="38">{
		<expr_stmt><expr><name pos:line="976" pos:column="17">bytesRequired</name> <op:operator pos:line="976" pos:column="31">+=</op:operator> <name pos:line="976" pos:column="34">regSize</name><op:operator pos:line="976" pos:column="41">+</op:operator><lit:literal type="number" pos:line="976" pos:column="42">2</lit:literal></expr>;</expr_stmt>
	}</block></then> <else pos:line="977" pos:column="11">else <block pos:line="977" pos:column="16">{
		<expr_stmt><expr><call><name pos:line="978" pos:column="17">MsgBoxError</name><argument_list pos:line="978" pos:column="28">(<argument><expr><call><name pos:line="978" pos:column="29">TEXT</name><argument_list pos:line="978" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="978" pos:column="34">"Cannot read path to executable."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="979" pos:column="17">RegCloseKey</name><argument_list pos:line="979" pos:column="28">(<argument><expr><name pos:line="979" pos:column="29">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="980" pos:column="17">return <expr><name pos:line="980" pos:column="24">E_FAIL</name></expr>;</return>
	}</block></else></if>

	<expr_stmt><expr><name pos:line="983" pos:column="9">result</name> <op:operator pos:line="983" pos:column="16">=</op:operator> <call><name pos:line="983" pos:column="18">RegQueryValueEx</name><argument_list pos:line="983" pos:column="33">(<argument><expr><name pos:line="983" pos:column="34">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="983" pos:column="46">TEXT</name><argument_list pos:line="983" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="983" pos:column="51">"Custom"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="983" pos:column="62">NULL</name></expr></argument>, <argument><expr><name pos:line="983" pos:column="68">NULL</name></expr></argument>, <argument><expr><name pos:line="983" pos:column="74">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="983" pos:column="80">&amp;</op:operator><name pos:line="983" pos:column="81">regSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="984" pos:column="9">if <condition pos:line="984" pos:column="12">(<expr><name pos:line="984" pos:column="13">result</name> <op:operator pos:line="984" pos:column="20">==</op:operator> <name pos:line="984" pos:column="23">ERROR_SUCCESS</name></expr>)</condition><then pos:line="984" pos:column="37"> <block pos:line="984" pos:column="38">{
		<expr_stmt><expr><name pos:line="985" pos:column="17">bytesRequired</name> <op:operator pos:line="985" pos:column="31">+=</op:operator> <name pos:line="985" pos:column="34">regSize</name></expr>;</expr_stmt>
	}</block></then></if>

	<for pos:line="988" pos:column="9">for (<init><decl><type><name pos:line="988" pos:column="14">UINT</name></type> <name pos:line="988" pos:column="19">i</name> <init pos:line="988" pos:column="21">= <expr><lit:literal type="number" pos:line="988" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="988" pos:column="26">i</name> <op:operator pos:line="988" pos:column="28">&lt;</op:operator> <name pos:line="988" pos:column="30">m_cbFiles</name></expr>;</condition> <incr><expr><name pos:line="988" pos:column="41">i</name><op:operator pos:line="988" pos:column="42">++</op:operator></expr></incr>) <block pos:line="988" pos:column="46">{
		<expr_stmt><expr><name pos:line="989" pos:column="17">bytesRequired</name> <op:operator pos:line="989" pos:column="31">+=</op:operator> <call><name pos:line="989" pos:column="34">DragQueryFile</name><argument_list pos:line="989" pos:column="47">(<argument><expr><op:operator pos:line="989" pos:column="48">(</op:operator><name pos:line="989" pos:column="49">HDROP</name><op:operator pos:line="989" pos:column="54">)</op:operator><name><name pos:line="989" pos:column="55">m_stgMedium</name><op:operator pos:line="989" pos:column="66">.</op:operator><name pos:line="989" pos:column="67">hGlobal</name></name></expr></argument>, <argument><expr><name pos:line="989" pos:column="76">i</name></expr></argument>, <argument><expr><name pos:line="989" pos:column="79">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="989" pos:column="85">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name pos:line="990" pos:column="17">bytesRequired</name> <op:operator pos:line="990" pos:column="31">+=</op:operator> <lit:literal type="number" pos:line="990" pos:column="34">3</lit:literal></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name pos:line="993" pos:column="9">bytesRequired</name> <op:operator pos:line="993" pos:column="23">*=</op:operator> <sizeof pos:line="993" pos:column="26">sizeof<argument_list pos:line="993" pos:column="32">(<argument><expr><name pos:line="993" pos:column="33">TCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="994" pos:column="9">pszCommand</name> <op:operator pos:line="994" pos:column="20">=</op:operator> <op:operator pos:line="994" pos:column="22">(</op:operator><name pos:line="994" pos:column="23">LPTSTR</name><op:operator pos:line="994" pos:column="29">)</op:operator><call><name pos:line="994" pos:column="30">CoTaskMemAlloc</name><argument_list pos:line="994" pos:column="44">(<argument><expr><name pos:line="994" pos:column="45">bytesRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="995" pos:column="9">if <condition pos:line="995" pos:column="12">(<expr><op:operator pos:line="995" pos:column="13">!</op:operator><name pos:line="995" pos:column="14">pszCommand</name></expr>)</condition><then pos:line="995" pos:column="25"> <block pos:line="995" pos:column="26">{
		<expr_stmt><expr><call><name pos:line="996" pos:column="17">MsgBoxError</name><argument_list pos:line="996" pos:column="28">(<argument><expr><call><name pos:line="996" pos:column="29">TEXT</name><argument_list pos:line="996" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="996" pos:column="34">"Insufficient memory available."</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="997" pos:column="17">RegCloseKey</name><argument_list pos:line="997" pos:column="28">(<argument><expr><name pos:line="997" pos:column="29">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return pos:line="998" pos:column="17">return <expr><name pos:line="998" pos:column="24">E_FAIL</name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><op:operator pos:line="1000" pos:column="9">*</op:operator><name pos:line="1000" pos:column="10">pszCommand</name> <op:operator pos:line="1000" pos:column="21">=</op:operator> <lit:literal type="number" pos:line="1000" pos:column="23">0</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><name pos:line="1002" pos:column="9">regSize</name> <op:operator pos:line="1002" pos:column="17">=</op:operator> <op:operator pos:line="1002" pos:column="19">(</op:operator><name pos:line="1002" pos:column="20">DWORD</name><op:operator pos:line="1002" pos:column="25">)</op:operator><name pos:line="1002" pos:column="26">MAX_PATH</name><op:operator pos:line="1002" pos:column="34">*</op:operator><sizeof pos:line="1002" pos:column="35">sizeof<argument_list pos:line="1002" pos:column="41">(<argument><expr><name pos:line="1002" pos:column="42">TCHAR</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1003" pos:column="9">result</name> <op:operator pos:line="1003" pos:column="16">=</op:operator> <call><name pos:line="1003" pos:column="18">RegQueryValueEx</name><argument_list pos:line="1003" pos:column="33">(<argument><expr><name pos:line="1003" pos:column="34">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="1003" pos:column="46">TEXT</name><argument_list pos:line="1003" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="1003" pos:column="51">"Path"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1003" pos:column="60">NULL</name></expr></argument>, <argument><expr><name pos:line="1003" pos:column="66">NULL</name></expr></argument>, <argument><expr><call pos:line="1003" pos:column="72">(<name pos:line="1003" pos:column="73">LPBYTE</name>)<argument_list pos:line="1003" pos:column="80">(<argument><expr><name pos:line="1003" pos:column="81">szFilename</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1003" pos:column="94">&amp;</op:operator><name pos:line="1003" pos:column="95">regSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1004" pos:column="9">szFilename</name><index pos:line="1004" pos:column="19">[<expr><name pos:line="1004" pos:column="20">MAX_PATH</name><op:operator pos:line="1004" pos:column="28">-</op:operator><lit:literal type="number" pos:line="1004" pos:column="29">1</lit:literal></expr>]</index></name> <op:operator pos:line="1004" pos:column="32">=</op:operator> <lit:literal type="number" pos:line="1004" pos:column="34">0</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1005" pos:column="9">lstrcat</name><argument_list pos:line="1005" pos:column="16">(<argument><expr><name pos:line="1005" pos:column="17">pszCommand</name></expr></argument>, <argument><expr><call><name pos:line="1005" pos:column="29">TEXT</name><argument_list pos:line="1005" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="1005" pos:column="34">"\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1006" pos:column="9">lstrcat</name><argument_list pos:line="1006" pos:column="16">(<argument><expr><name pos:line="1006" pos:column="17">pszCommand</name></expr></argument>, <argument><expr><name pos:line="1006" pos:column="29">szFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="1007" pos:column="9">lstrcat</name><argument_list pos:line="1007" pos:column="16">(<argument><expr><name pos:line="1007" pos:column="17">pszCommand</name></expr></argument>, <argument><expr><call><name pos:line="1007" pos:column="29">TEXT</name><argument_list pos:line="1007" pos:column="33">(<argument><expr><lit:literal type="string" pos:line="1007" pos:column="34">"\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="1008" pos:column="9">result</name> <op:operator pos:line="1008" pos:column="16">=</op:operator> <call><name pos:line="1008" pos:column="18">RegQueryValueEx</name><argument_list pos:line="1008" pos:column="33">(<argument><expr><name pos:line="1008" pos:column="34">settingKey</name></expr></argument>, <argument><expr><call><name pos:line="1008" pos:column="46">TEXT</name><argument_list pos:line="1008" pos:column="50">(<argument><expr><lit:literal type="string" pos:line="1008" pos:column="51">"Custom"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1008" pos:column="62">NULL</name></expr></argument>, <argument><expr><name pos:line="1008" pos:column="68">NULL</name></expr></argument>, <argument><expr><call pos:line="1008" pos:column="74">(<name pos:line="1008" pos:column="75">LPBYTE</name>)<argument_list pos:line="1008" pos:column="82">(<argument><expr><name pos:line="1008" pos:column="83">szCustom</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><op:operator pos:line="1008" pos:column="94">&amp;</op:operator><name pos:line="1008" pos:column="95">pathSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if pos:line="1009" pos:column="9">if <condition pos:line="1009" pos:column="12">(<expr><name pos:line="1009" pos:column="13">result</name> <op:operator pos:line="1009" pos:column="20">==</op:operator> <name pos:line="1009" pos:column="23">ERROR_SUCCESS</name></expr>)</condition><then pos:line="1009" pos:column="37"> <block pos:line="1009" pos:column="38">{
		<expr_stmt><expr><call><name pos:line="1010" pos:column="17">lstrcat</name><argument_list pos:line="1010" pos:column="24">(<argument><expr><name pos:line="1010" pos:column="25">pszCommand</name></expr></argument>, <argument><expr><call><name pos:line="1010" pos:column="37">TEXT</name><argument_list pos:line="1010" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1010" pos:column="42">" "</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1011" pos:column="17">lstrcat</name><argument_list pos:line="1011" pos:column="24">(<argument><expr><name pos:line="1011" pos:column="25">pszCommand</name></expr></argument>, <argument><expr><name pos:line="1011" pos:column="37">szCustom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name pos:line="1013" pos:column="9">RegCloseKey</name><argument_list pos:line="1013" pos:column="20">(<argument><expr><name pos:line="1013" pos:column="21">settingKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:line="1015" pos:column="9">for (<init><decl><type><name pos:line="1015" pos:column="14">UINT</name></type> <name pos:line="1015" pos:column="19">i</name> <init pos:line="1015" pos:column="21">= <expr><lit:literal type="number" pos:line="1015" pos:column="23">0</lit:literal></expr></init></decl>;</init> <condition><expr><name pos:line="1015" pos:column="26">i</name> <op:operator pos:line="1015" pos:column="28">&lt;</op:operator> <name pos:line="1015" pos:column="30">m_cbFiles</name></expr>;</condition> <incr><expr><name pos:line="1015" pos:column="41">i</name><op:operator pos:line="1015" pos:column="42">++</op:operator></expr></incr>) <block pos:line="1015" pos:column="46">{
		<expr_stmt><expr><call><name pos:line="1016" pos:column="17">DragQueryFile</name><argument_list pos:line="1016" pos:column="30">(<argument><expr><op:operator pos:line="1016" pos:column="31">(</op:operator><name pos:line="1016" pos:column="32">HDROP</name><op:operator pos:line="1016" pos:column="37">)</op:operator><name><name pos:line="1016" pos:column="38">m_stgMedium</name><op:operator pos:line="1016" pos:column="49">.</op:operator><name pos:line="1016" pos:column="50">hGlobal</name></name></expr></argument>, <argument><expr><name pos:line="1016" pos:column="59">i</name></expr></argument>, <argument><expr><name pos:line="1016" pos:column="62">szFilename</name></expr></argument>, <argument><expr><name pos:line="1016" pos:column="74">MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1017" pos:column="17">lstrcat</name><argument_list pos:line="1017" pos:column="24">(<argument><expr><name pos:line="1017" pos:column="25">pszCommand</name></expr></argument>, <argument><expr><call><name pos:line="1017" pos:column="37">TEXT</name><argument_list pos:line="1017" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1017" pos:column="42">" \""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1018" pos:column="17">lstrcat</name><argument_list pos:line="1018" pos:column="24">(<argument><expr><name pos:line="1018" pos:column="25">pszCommand</name></expr></argument>, <argument><expr><name pos:line="1018" pos:column="37">szFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name pos:line="1019" pos:column="17">lstrcat</name><argument_list pos:line="1019" pos:column="24">(<argument><expr><name pos:line="1019" pos:column="25">pszCommand</name></expr></argument>, <argument><expr><call><name pos:line="1019" pos:column="37">TEXT</name><argument_list pos:line="1019" pos:column="41">(<argument><expr><lit:literal type="string" pos:line="1019" pos:column="42">"\""</lit:literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name pos:line="1022" pos:column="9">STARTUPINFO</name></type> <name pos:line="1022" pos:column="21">si</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1023" pos:column="9">PROCESS_INFORMATION</name></type> <name pos:line="1023" pos:column="29">pi</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name pos:line="1024" pos:column="9">ZeroMemory</name><argument_list pos:line="1024" pos:column="19">(<argument><expr><op:operator pos:line="1024" pos:column="20">&amp;</op:operator><name pos:line="1024" pos:column="21">si</name></expr></argument>, <argument><expr><sizeof pos:line="1024" pos:column="25">sizeof<argument_list pos:line="1024" pos:column="31">(<argument><expr><name pos:line="1024" pos:column="32">si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1025" pos:column="9">si</name><op:operator pos:line="1025" pos:column="11">.</op:operator><name pos:line="1025" pos:column="12">cb</name></name> <op:operator pos:line="1025" pos:column="15">=</op:operator> <sizeof pos:line="1025" pos:column="17">sizeof<argument_list pos:line="1025" pos:column="23">(<argument><expr><name pos:line="1025" pos:column="24">si</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1026" pos:column="9">si</name><op:operator pos:line="1026" pos:column="11">.</op:operator><name pos:line="1026" pos:column="12">dwFlags</name></name> <op:operator pos:line="1026" pos:column="20">=</op:operator> <name pos:line="1026" pos:column="22">STARTF_USESHOWWINDOW</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="1027" pos:column="9">si</name><op:operator pos:line="1027" pos:column="11">.</op:operator><name pos:line="1027" pos:column="12">wShowWindow</name></name> <op:operator pos:line="1027" pos:column="24">=</op:operator> <op:operator pos:line="1027" pos:column="26">(</op:operator><name pos:line="1027" pos:column="27">WORD</name><op:operator pos:line="1027" pos:column="31">)</op:operator><name pos:line="1027" pos:column="32">iShowCmd</name></expr>;</expr_stmt>	<comment type="line" pos:line="1027" pos:column="49">//SW_RESTORE;</comment>
	<if pos:line="1028" pos:column="9">if <condition pos:line="1028" pos:column="12">(<expr><op:operator pos:line="1028" pos:column="13">!</op:operator><call><name pos:line="1028" pos:column="14">CreateProcess</name> <argument_list pos:line="1028" pos:column="28">(<argument><expr><name pos:line="1028" pos:column="29">NULL</name></expr></argument>, <argument><expr><name pos:line="1028" pos:column="35">pszCommand</name></expr></argument>, <argument><expr><name pos:line="1028" pos:column="47">NULL</name></expr></argument>, <argument><expr><name pos:line="1028" pos:column="53">NULL</name></expr></argument>, <argument><expr><name pos:line="1028" pos:column="59">FALSE</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1028" pos:column="66">0</lit:literal></expr></argument>, <argument><expr><name pos:line="1028" pos:column="69">NULL</name></expr></argument>, <argument><expr><name pos:line="1028" pos:column="75">NULL</name></expr></argument>, <argument><expr><op:operator pos:line="1028" pos:column="81">&amp;</op:operator><name pos:line="1028" pos:column="82">si</name></expr></argument>, <argument><expr><op:operator pos:line="1028" pos:column="86">&amp;</op:operator><name pos:line="1028" pos:column="87">pi</name></expr></argument>)</argument_list></call></expr>)</condition><then pos:line="1028" pos:column="91"> <block pos:line="1028" pos:column="92">{
		<decl_stmt><decl><type><name pos:line="1029" pos:column="17">DWORD</name></type> <name pos:line="1029" pos:column="23">errorCode</name> <init pos:line="1029" pos:column="33">= <expr><call><name pos:line="1029" pos:column="35">GetLastError</name><argument_list pos:line="1029" pos:column="47">()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if pos:line="1030" pos:column="17">if <condition pos:line="1030" pos:column="20">(<expr><name pos:line="1030" pos:column="21">errorCode</name> <op:operator pos:line="1030" pos:column="31">==</op:operator> <name pos:line="1030" pos:column="34">ERROR_ELEVATION_REQUIRED</name></expr>)</condition><then pos:line="1030" pos:column="59"> <block pos:line="1030" pos:column="60">{	<comment type="line" pos:line="1030" pos:column="65">//Fallback to shellexecute</comment>
			<expr_stmt><expr><call><name pos:line="1031" pos:column="25">CoInitializeEx</name><argument_list pos:line="1031" pos:column="39">(<argument><expr><name pos:line="1031" pos:column="40">NULL</name></expr></argument>, <argument><expr><lit:literal type="number" pos:line="1031" pos:column="46">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name pos:line="1032" pos:column="25">HINSTANCE</name></type> <name pos:line="1032" pos:column="35">execVal</name> <init pos:line="1032" pos:column="43">= <expr><call><name pos:line="1032" pos:column="45">ShellExecute</name><argument_list pos:line="1032" pos:column="57">(<argument><expr><name pos:line="1032" pos:column="58">NULL</name></expr></argument>, <argument><expr><call><name pos:line="1032" pos:column="64">TEXT</name><argument_list pos:line="1032" pos:column="68">(<argument><expr><lit:literal type="string" pos:line="1032" pos:column="69">"runas"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1032" pos:column="79">pszCommand</name></expr></argument>, <argument><expr><name pos:line="1032" pos:column="91">NULL</name></expr></argument>, <argument><expr><name pos:line="1032" pos:column="97">NULL</name></expr></argument>, <argument><expr><name pos:line="1032" pos:column="103">iShowCmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="1033" pos:column="25">CoUninitialize</name><argument_list pos:line="1033" pos:column="39">()</argument_list></call></expr>;</expr_stmt>
			<if pos:line="1034" pos:column="25">if <condition pos:line="1034" pos:column="28">(<expr><name pos:line="1034" pos:column="29">execVal</name> <op:operator pos:line="1034" pos:column="37">&lt;=</op:operator> <op:operator pos:line="1034" pos:column="40">(</op:operator><name pos:line="1034" pos:column="41">HINSTANCE</name><op:operator pos:line="1034" pos:column="50">)</op:operator><lit:literal type="number" pos:line="1034" pos:column="51">32</lit:literal></expr>)</condition><then pos:line="1034" pos:column="54"> <block pos:line="1034" pos:column="55">{
				<decl_stmt><decl><type><name pos:line="1035" pos:column="33">TCHAR</name> <type:modifier pos:line="1035" pos:column="39">*</type:modifier></type> <name pos:line="1035" pos:column="41">message</name> <init pos:line="1035" pos:column="49">= <expr><op:operator pos:line="1035" pos:column="51">new</op:operator> <name><name pos:line="1035" pos:column="55">TCHAR</name><index pos:line="1035" pos:column="60">[<expr><lit:literal type="number" pos:line="1035" pos:column="61">512</lit:literal><op:operator pos:line="1035" pos:column="64">+</op:operator><name pos:line="1035" pos:column="65">bytesRequired</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name pos:line="1036" pos:column="33">wsprintf</name><argument_list pos:line="1036" pos:column="41">(<argument><expr><name pos:line="1036" pos:column="42">message</name></expr></argument>, <argument><expr><call><name pos:line="1036" pos:column="51">TEXT</name><argument_list pos:line="1036" pos:column="55">(<argument><expr><lit:literal type="string" pos:line="1036" pos:column="56">"ShellExecute failed (%d): Is this command correct?\r\n%s"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1036" pos:column="117">execVal</name></expr></argument>, <argument><expr><name pos:line="1036" pos:column="126">pszCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name pos:line="1037" pos:column="33">MsgBoxError</name><argument_list pos:line="1037" pos:column="44">(<argument><expr><name pos:line="1037" pos:column="45">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><op:operator pos:line="1038" pos:column="33">delete</op:operator> <index pos:line="1038" pos:column="40">[]</index> <name pos:line="1038" pos:column="43">message</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else pos:line="1040" pos:column="19">else <block pos:line="1040" pos:column="24">{
			<decl_stmt><decl><type><name pos:line="1041" pos:column="25">TCHAR</name> <type:modifier pos:line="1041" pos:column="31">*</type:modifier></type> <name pos:line="1041" pos:column="33">message</name> <init pos:line="1041" pos:column="41">= <expr><op:operator pos:line="1041" pos:column="43">new</op:operator> <name><name pos:line="1041" pos:column="47">TCHAR</name><index pos:line="1041" pos:column="52">[<expr><lit:literal type="number" pos:line="1041" pos:column="53">512</lit:literal><op:operator pos:line="1041" pos:column="56">+</op:operator><name pos:line="1041" pos:column="57">bytesRequired</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name pos:line="1042" pos:column="25">wsprintf</name><argument_list pos:line="1042" pos:column="33">(<argument><expr><name pos:line="1042" pos:column="34">message</name></expr></argument>, <argument><expr><call><name pos:line="1042" pos:column="43">TEXT</name><argument_list pos:line="1042" pos:column="47">(<argument><expr><lit:literal type="string" pos:line="1042" pos:column="48">"Error in CreateProcess (%d): Is this command correct?\r\n%s"</lit:literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1042" pos:column="112">errorCode</name></expr></argument>, <argument><expr><name pos:line="1042" pos:column="123">pszCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name pos:line="1043" pos:column="25">MsgBoxError</name><argument_list pos:line="1043" pos:column="36">(<argument><expr><name pos:line="1043" pos:column="37">message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><op:operator pos:line="1044" pos:column="25">delete</op:operator> <index pos:line="1044" pos:column="32">[]</index> <name pos:line="1044" pos:column="35">message</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if>



	<expr_stmt><expr><call><name pos:line="1050" pos:column="9">CoTaskMemFree</name><argument_list pos:line="1050" pos:column="22">(<argument><expr><name pos:line="1050" pos:column="23">pszCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="1051" pos:column="9">return <expr><name pos:line="1051" pos:column="16">NOERROR</name></expr>;</return>
}</block></function>

<function><type><name pos:line="1054" pos:column="1">STDMETHODIMP</name></type> <name><name pos:line="1054" pos:column="14">CShellExt</name><op:operator pos:line="1054" pos:column="23">::</op:operator><name pos:line="1054" pos:column="25">LoadShellIcon</name></name><parameter_list pos:line="1054" pos:column="38">(<param><decl><type><name pos:line="1054" pos:column="39">int</name></type> <name pos:line="1054" pos:column="43">cx</name></decl></param>, <param><decl><type><name pos:line="1054" pos:column="47">int</name></type> <name pos:line="1054" pos:column="51">cy</name></decl></param>, <param><decl><type><name pos:line="1054" pos:column="55">HICON</name> <type:modifier pos:line="1054" pos:column="61">*</type:modifier></type> <name pos:line="1054" pos:column="63">phicon</name></decl></param>)</parameter_list> <block pos:line="1054" pos:column="71">{
	<decl_stmt><decl><type><name pos:line="1055" pos:column="9">HRESULT</name></type> <name pos:line="1055" pos:column="17">hr</name> <init pos:line="1055" pos:column="20">= <expr><name pos:line="1055" pos:column="22">E_OUTOFMEMORY</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="1056" pos:column="9">HICON</name></type> <name pos:line="1056" pos:column="15">hicon</name> <init pos:line="1056" pos:column="21">= <expr><name pos:line="1056" pos:column="23">NULL</name></expr></init></decl>;</decl_stmt>

	<if pos:line="1058" pos:column="9">if <condition pos:line="1058" pos:column="12">(<expr><name pos:line="1058" pos:column="13">m_useCustom</name></expr>)</condition><then pos:line="1058" pos:column="25"> <block pos:line="1058" pos:column="26">{
		<expr_stmt><expr><name pos:line="1059" pos:column="17">hicon</name> <op:operator pos:line="1059" pos:column="23">=</op:operator> <op:operator pos:line="1059" pos:column="25">(</op:operator><name pos:line="1059" pos:column="26">HICON</name><op:operator pos:line="1059" pos:column="31">)</op:operator><call><name pos:line="1059" pos:column="32">LoadImage</name><argument_list pos:line="1059" pos:column="41">(<argument><expr><name pos:line="1059" pos:column="42">NULL</name></expr></argument>, <argument><expr><name pos:line="1059" pos:column="48">m_szCustomPath</name></expr></argument>, <argument><expr><name pos:line="1059" pos:column="64">IMAGE_ICON</name></expr></argument>, <argument><expr><name pos:line="1059" pos:column="76">cx</name></expr></argument>, <argument><expr><name pos:line="1059" pos:column="80">cy</name></expr></argument>, <argument><expr><name pos:line="1059" pos:column="84">LR_DEFAULTCOLOR</name><op:operator pos:line="1059" pos:column="99">|</op:operator><name pos:line="1059" pos:column="100">LR_LOADFROMFILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line" pos:line="1062" pos:column="9">//Either no custom defined, or failed and use fallback</comment>
	<if pos:line="1063" pos:column="9">if <condition pos:line="1063" pos:column="12">(<expr><name pos:line="1063" pos:column="13">hicon</name> <op:operator pos:line="1063" pos:column="19">==</op:operator> <name pos:line="1063" pos:column="22">NULL</name></expr>)</condition><then pos:line="1063" pos:column="27"> <block pos:line="1063" pos:column="28">{
		<expr_stmt><expr><name pos:line="1064" pos:column="17">hicon</name> <op:operator pos:line="1064" pos:column="23">=</op:operator> <op:operator pos:line="1064" pos:column="25">(</op:operator><name pos:line="1064" pos:column="26">HICON</name><op:operator pos:line="1064" pos:column="31">)</op:operator><call><name pos:line="1064" pos:column="32">LoadImage</name><argument_list pos:line="1064" pos:column="41">(<argument><expr><name pos:line="1064" pos:column="42">_hModule</name></expr></argument>, <argument><expr><call><name pos:line="1064" pos:column="52">MAKEINTRESOURCE</name><argument_list pos:line="1064" pos:column="67">(<argument><expr><name pos:line="1064" pos:column="68">IDI_ICON_NPP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name pos:line="1064" pos:column="83">IMAGE_ICON</name></expr></argument>, <argument><expr><name pos:line="1064" pos:column="95">cx</name></expr></argument>, <argument><expr><name pos:line="1064" pos:column="99">cy</name></expr></argument>, <argument><expr><name pos:line="1064" pos:column="103">LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<if pos:line="1067" pos:column="9">if <condition pos:line="1067" pos:column="12">(<expr><name pos:line="1067" pos:column="13">hicon</name> <op:operator pos:line="1067" pos:column="19">==</op:operator> <name pos:line="1067" pos:column="22">NULL</name></expr>)</condition><then pos:line="1067" pos:column="27"> <block pos:line="1067" pos:column="28">{
		<expr_stmt><expr><name pos:line="1068" pos:column="17">hr</name> <op:operator pos:line="1068" pos:column="20">=</op:operator> <name pos:line="1068" pos:column="22">E_OUTOFMEMORY</name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="1069" pos:column="17">*</op:operator><name pos:line="1069" pos:column="18">phicon</name> <op:operator pos:line="1069" pos:column="25">=</op:operator> <name pos:line="1069" pos:column="27">NULL</name></expr>;</expr_stmt>
	}</block></then> <else pos:line="1070" pos:column="11">else <block pos:line="1070" pos:column="16">{
		<expr_stmt><expr><name pos:line="1071" pos:column="17">hr</name> <op:operator pos:line="1071" pos:column="20">=</op:operator> <name pos:line="1071" pos:column="22">S_OK</name></expr>;</expr_stmt>
		<expr_stmt><expr><op:operator pos:line="1072" pos:column="17">*</op:operator><name pos:line="1072" pos:column="18">phicon</name> <op:operator pos:line="1072" pos:column="25">=</op:operator> <name pos:line="1072" pos:column="27">hicon</name></expr>;</expr_stmt>
	}</block></else></if>

	<return pos:line="1075" pos:column="9">return <expr><name pos:line="1075" pos:column="16">hr</name></expr>;</return>
}</block></function>
</unit>
