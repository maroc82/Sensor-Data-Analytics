<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" xmlns:lit="http://www.sdml.info/srcML/literal" xmlns:op="http://www.sdml.info/srcML/operator" xmlns:type="http://www.sdml.info/srcML/modifier" xmlns:pos="http://www.sdml.info/srcML/position" language="C++" filename="C:\School\Grad School (Comp Sci)\CSCI 685 (Software Engneering)\CodeAnalysisToolkit\projects\npp_6.2.3\PowerEditor\src\WinControls\TabBar\ControlsTab.cpp" pos:tabs="8"><comment type="line" pos:line="1" pos:column="1">// This file is part of Notepad++ project</comment>
<comment type="line" pos:line="2" pos:column="1">// Copyright (C)2003 Don HO &lt;don.h@free.fr&gt;</comment>
<comment type="line" pos:line="3" pos:column="1">//</comment>
<comment type="line" pos:line="4" pos:column="1">// This program is free software; you can redistribute it and/or</comment>
<comment type="line" pos:line="5" pos:column="1">// modify it under the terms of the GNU General Public License</comment>
<comment type="line" pos:line="6" pos:column="1">// as published by the Free Software Foundation; either</comment>
<comment type="line" pos:line="7" pos:column="1">// version 2 of the License, or (at your option) any later version.</comment>
<comment type="line" pos:line="8" pos:column="1">//</comment>
<comment type="line" pos:line="9" pos:column="1">// Note that the GPL places important restrictions on "derived works", yet</comment>
<comment type="line" pos:line="10" pos:column="1">// it does not provide a detailed definition of that term.  To avoid      </comment>
<comment type="line" pos:line="11" pos:column="1">// misunderstandings, we consider an application to constitute a          </comment>
<comment type="line" pos:line="12" pos:column="1">// "derivative work" for the purpose of this license if it does any of the</comment>
<comment type="line" pos:line="13" pos:column="1">// following:                                                             </comment>
<comment type="line" pos:line="14" pos:column="1">// 1. Integrates source code from Notepad++.</comment>
<comment type="line" pos:line="15" pos:column="1">// 2. Integrates/includes/aggregates Notepad++ into a proprietary executable</comment>
<comment type="line" pos:line="16" pos:column="1">//    installer, such as those produced by InstallShield.</comment>
<comment type="line" pos:line="17" pos:column="1">// 3. Links to a library or executes a program that does any of the above.</comment>
<comment type="line" pos:line="18" pos:column="1">//</comment>
<comment type="line" pos:line="19" pos:column="1">// This program is distributed in the hope that it will be useful,</comment>
<comment type="line" pos:line="20" pos:column="1">// but WITHOUT ANY WARRANTY; without even the implied warranty of</comment>
<comment type="line" pos:line="21" pos:column="1">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</comment>
<comment type="line" pos:line="22" pos:column="1">// GNU General Public License for more details.</comment>
<comment type="line" pos:line="23" pos:column="1">//</comment>
<comment type="line" pos:line="24" pos:column="1">// You should have received a copy of the GNU General Public License</comment>
<comment type="line" pos:line="25" pos:column="1">// along with this program; if not, write to the Free Software</comment>
<comment type="line" pos:line="26" pos:column="1">// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</comment>


<cpp:include pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="29" pos:column="10">"precompiledHeaders.h"</lit:literal></cpp:file></cpp:include>
<cpp:include pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">include</cpp:directive> <cpp:file><lit:literal type="string" pos:line="30" pos:column="10">"ControlsTab.h"</lit:literal></cpp:file></cpp:include>

<function><type><name pos:line="32" pos:column="1">void</name></type> <name><name pos:line="32" pos:column="6">ControlsTab</name><op:operator pos:line="32" pos:column="17">::</op:operator><name pos:line="32" pos:column="19">createTabs</name></name><parameter_list pos:line="32" pos:column="29">(<param><decl><type><name pos:line="32" pos:column="30">WindowVector</name> <type:modifier pos:line="32" pos:column="43">&amp;</type:modifier></type> <name pos:line="32" pos:column="45">winVector</name></decl></param>)</parameter_list>
<block pos:line="33" pos:column="1">{
	<expr_stmt><expr><name pos:line="34" pos:column="9">_pWinVector</name> <op:operator pos:line="34" pos:column="21">=</op:operator> <op:operator pos:line="34" pos:column="23">&amp;</op:operator><name pos:line="34" pos:column="24">winVector</name></expr>;</expr_stmt>

	<for pos:line="36" pos:column="9">for (<init><decl><type><name pos:line="36" pos:column="14">int</name></type> <name pos:line="36" pos:column="18">i</name> <init pos:line="36" pos:column="20">= <expr><lit:literal type="number" pos:line="36" pos:column="22">0</lit:literal></expr></init></decl> ;</init> <condition><expr><name pos:line="36" pos:column="26">i</name> <op:operator pos:line="36" pos:column="28">&lt;</op:operator> <call><name pos:line="36" pos:column="30">int</name><argument_list pos:line="36" pos:column="33">(<argument><expr><call><name><name pos:line="36" pos:column="34">winVector</name><op:operator pos:line="36" pos:column="43">.</op:operator><name pos:line="36" pos:column="44">size</name></name><argument_list pos:line="36" pos:column="48">()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="36" pos:column="54">i</name><op:operator pos:line="36" pos:column="55">++</op:operator></expr></incr>)
		<expr_stmt><expr><call><name><name pos:line="37" pos:column="17">TabBar</name><op:operator pos:line="37" pos:column="23">::</op:operator><name pos:line="37" pos:column="25">insertAtEnd</name></name><argument_list pos:line="37" pos:column="36">(<argument><expr><name><name pos:line="37" pos:column="37">winVector</name><index pos:line="37" pos:column="46">[<expr><name pos:line="37" pos:column="47">i</name></expr>]</index></name><op:operator pos:line="37" pos:column="49">.</op:operator><call><name><name pos:line="37" pos:column="50">_name</name><op:operator pos:line="37" pos:column="55">.</op:operator><name pos:line="37" pos:column="56">c_str</name></name><argument_list pos:line="37" pos:column="61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

	<expr_stmt><expr><call><name><name pos:line="39" pos:column="9">TabBar</name><op:operator pos:line="39" pos:column="15">::</op:operator><name pos:line="39" pos:column="17">activateAt</name></name><argument_list pos:line="39" pos:column="27">(<argument><expr><lit:literal type="number" pos:line="39" pos:column="28">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">activateWindowAt</name><argument_list pos:line="40" pos:column="25">(<argument><expr><lit:literal type="number" pos:line="40" pos:column="26">0</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="43" pos:column="1">void</name></type> <name><name pos:line="43" pos:column="6">ControlsTab</name><op:operator pos:line="43" pos:column="17">::</op:operator><name pos:line="43" pos:column="19">activateWindowAt</name></name><parameter_list pos:line="43" pos:column="35">(<param><decl><type><name pos:line="43" pos:column="36">int</name></type> <name pos:line="43" pos:column="40">index</name></decl></param>)</parameter_list>
<block pos:line="44" pos:column="1">{
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">index</name> <op:operator pos:line="45" pos:column="15">==</op:operator> <name pos:line="45" pos:column="18">_current</name></expr>)</condition><then pos:line="45" pos:column="27">  <return pos:line="45" pos:column="29">return;</return></then></if>
	<expr_stmt><expr><op:operator pos:line="46" pos:column="9">(</op:operator><op:operator pos:line="46" pos:column="10">*</op:operator><name pos:line="46" pos:column="11">_pWinVector</name><op:operator pos:line="46" pos:column="22">)</op:operator><index pos:line="46" pos:column="23">[<expr><name pos:line="46" pos:column="24">_current</name></expr>]</index><op:operator pos:line="46" pos:column="33">.</op:operator><call><name><name pos:line="46" pos:column="34">_dlg</name><op:operator pos:line="46" pos:column="38">-&gt;</op:operator><name pos:line="46" pos:column="40">display</name></name><argument_list pos:line="46" pos:column="47">(<argument><expr><lit:literal type="boolean" pos:line="46" pos:column="48">false</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="47" pos:column="9">(</op:operator><op:operator pos:line="47" pos:column="10">*</op:operator><name pos:line="47" pos:column="11">_pWinVector</name><op:operator pos:line="47" pos:column="22">)</op:operator><index pos:line="47" pos:column="23">[<expr><name pos:line="47" pos:column="24">index</name></expr>]</index><op:operator pos:line="47" pos:column="30">.</op:operator><call><name><name pos:line="47" pos:column="31">_dlg</name><op:operator pos:line="47" pos:column="35">-&gt;</op:operator><name pos:line="47" pos:column="37">display</name></name><argument_list pos:line="47" pos:column="44">(<argument><expr><lit:literal type="boolean" pos:line="47" pos:column="45">true</lit:literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name pos:line="48" pos:column="9">_current</name> <op:operator pos:line="48" pos:column="18">=</op:operator> <name pos:line="48" pos:column="20">index</name></expr>;</expr_stmt>
}</block></function>

<function><type><name pos:line="51" pos:column="1">void</name></type> <name><name pos:line="51" pos:column="6">ControlsTab</name><op:operator pos:line="51" pos:column="17">::</op:operator><name pos:line="51" pos:column="19">reSizeTo</name></name><parameter_list pos:line="51" pos:column="27">(<param><decl><type><name pos:line="51" pos:column="28">RECT</name> <type:modifier pos:line="51" pos:column="33">&amp;</type:modifier></type> <name pos:line="51" pos:column="35">rc</name></decl></param>)</parameter_list>
<block pos:line="52" pos:column="1">{
	<expr_stmt><expr><call><name><name pos:line="53" pos:column="9">TabBar</name><op:operator pos:line="53" pos:column="15">::</op:operator><name pos:line="53" pos:column="17">reSizeTo</name></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name pos:line="53" pos:column="26">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="54" pos:column="9">rc</name><op:operator pos:line="54" pos:column="11">.</op:operator><name pos:line="54" pos:column="12">left</name></name> <op:operator pos:line="54" pos:column="17">+=</op:operator> <name pos:line="54" pos:column="20">marge</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="55" pos:column="9">rc</name><op:operator pos:line="55" pos:column="11">.</op:operator><name pos:line="55" pos:column="12">top</name></name> <op:operator pos:line="55" pos:column="16">+=</op:operator> <name pos:line="55" pos:column="19">marge</name></expr>;</expr_stmt>
	
	<comment type="line" pos:line="57" pos:column="9">//-- We do those dirty things </comment>
	<comment type="line" pos:line="58" pos:column="9">//-- because it's a "vertical" tab control</comment>
    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">_isVertical</name></expr>)</condition><then pos:line="59" pos:column="21">
    <block pos:line="60" pos:column="5">{
	    <expr_stmt><expr><name><name pos:line="61" pos:column="13">rc</name><op:operator pos:line="61" pos:column="15">.</op:operator><name pos:line="61" pos:column="16">right</name></name> <op:operator pos:line="61" pos:column="22">-=</op:operator> <lit:literal type="number" pos:line="61" pos:column="25">40</lit:literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name pos:line="62" pos:column="13">rc</name><op:operator pos:line="62" pos:column="15">.</op:operator><name pos:line="62" pos:column="16">bottom</name></name> <op:operator pos:line="62" pos:column="23">-=</op:operator> <lit:literal type="number" pos:line="62" pos:column="26">20</lit:literal></expr>;</expr_stmt>
	    <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><call><name pos:line="63" pos:column="17">getRowCount</name><argument_list pos:line="63" pos:column="28">()</argument_list></call> <op:operator pos:line="63" pos:column="31">==</op:operator> <lit:literal type="number" pos:line="63" pos:column="34">2</lit:literal></expr>)</condition><then pos:line="63" pos:column="36">
	    <block pos:line="64" pos:column="13">{
		    <expr_stmt><expr><name><name pos:line="65" pos:column="21">rc</name><op:operator pos:line="65" pos:column="23">.</op:operator><name pos:line="65" pos:column="24">right</name></name> <op:operator pos:line="65" pos:column="30">-=</op:operator> <lit:literal type="number" pos:line="65" pos:column="33">20</lit:literal></expr>;</expr_stmt>
	    }</block></then></if>
    }</block></then></if>
	<comment type="line" pos:line="68" pos:column="9">//-- end of dirty things</comment>
	<expr_stmt><expr><name><name pos:line="69" pos:column="9">rc</name><op:operator pos:line="69" pos:column="11">.</op:operator><name pos:line="69" pos:column="12">bottom</name></name> <op:operator pos:line="69" pos:column="19">-=</op:operator> <lit:literal type="number" pos:line="69" pos:column="22">55</lit:literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="70" pos:column="9">rc</name><op:operator pos:line="70" pos:column="11">.</op:operator><name pos:line="70" pos:column="12">right</name></name> <op:operator pos:line="70" pos:column="18">-=</op:operator> <lit:literal type="number" pos:line="70" pos:column="21">20</lit:literal></expr>;</expr_stmt>

	<expr_stmt><expr><op:operator pos:line="72" pos:column="9">(</op:operator><op:operator pos:line="72" pos:column="10">*</op:operator><name pos:line="72" pos:column="11">_pWinVector</name><op:operator pos:line="72" pos:column="22">)</op:operator><index pos:line="72" pos:column="23">[<expr><name pos:line="72" pos:column="24">_current</name></expr>]</index><op:operator pos:line="72" pos:column="33">.</op:operator><call><name><name pos:line="72" pos:column="34">_dlg</name><op:operator pos:line="72" pos:column="38">-&gt;</op:operator><name pos:line="72" pos:column="40">reSizeTo</name></name><argument_list pos:line="72" pos:column="48">(<argument><expr><name pos:line="72" pos:column="49">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><op:operator pos:line="73" pos:column="9">(</op:operator><op:operator pos:line="73" pos:column="10">*</op:operator><name pos:line="73" pos:column="11">_pWinVector</name><op:operator pos:line="73" pos:column="22">)</op:operator><index pos:line="73" pos:column="23">[<expr><name pos:line="73" pos:column="24">_current</name></expr>]</index><op:operator pos:line="73" pos:column="33">.</op:operator><call><name><name pos:line="73" pos:column="34">_dlg</name><op:operator pos:line="73" pos:column="38">-&gt;</op:operator><name pos:line="73" pos:column="40">redraw</name></name><argument_list pos:line="73" pos:column="46">()</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name pos:line="77" pos:column="1">bool</name></type> <name><name pos:line="77" pos:column="6">ControlsTab</name><op:operator pos:line="77" pos:column="17">::</op:operator><name pos:line="77" pos:column="19">renameTab</name></name><parameter_list pos:line="77" pos:column="28">(<param><decl><type><specifier pos:line="77" pos:column="29">const</specifier> <name pos:line="77" pos:column="35">TCHAR</name> <type:modifier pos:line="77" pos:column="41">*</type:modifier></type><name pos:line="77" pos:column="42">internalName</name></decl></param>, <param><decl><type><specifier pos:line="77" pos:column="56">const</specifier> <name pos:line="77" pos:column="62">TCHAR</name> <type:modifier pos:line="77" pos:column="68">*</type:modifier></type><name pos:line="77" pos:column="69">newName</name></decl></param>)</parameter_list>
<block pos:line="78" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="79" pos:column="9">bool</name></type> <name pos:line="79" pos:column="14">foundIt</name> <init pos:line="79" pos:column="22">= <expr><lit:literal type="boolean" pos:line="79" pos:column="24">false</lit:literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">size_t</name></type> <name pos:line="80" pos:column="16">i</name> <init pos:line="80" pos:column="18">= <expr><lit:literal type="number" pos:line="80" pos:column="20">0</lit:literal></expr></init></decl>;</decl_stmt>
	<for pos:line="81" pos:column="9">for ( <init pos:line="81" pos:column="15">;</init> <condition><expr><name pos:line="81" pos:column="17">i</name> <op:operator pos:line="81" pos:column="19">&lt;</op:operator> <call><name><name pos:line="81" pos:column="21">_pWinVector</name><op:operator pos:line="81" pos:column="32">-&gt;</op:operator><name pos:line="81" pos:column="34">size</name></name><argument_list pos:line="81" pos:column="38">()</argument_list></call></expr> ;</condition> <incr><expr><name pos:line="81" pos:column="43">i</name><op:operator pos:line="81" pos:column="44">++</op:operator></expr></incr>)
	<block pos:line="82" pos:column="9">{
		<if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><op:operator pos:line="83" pos:column="21">(</op:operator><op:operator pos:line="83" pos:column="22">*</op:operator><name pos:line="83" pos:column="23">_pWinVector</name><op:operator pos:line="83" pos:column="34">)</op:operator><index pos:line="83" pos:column="35">[<expr><name pos:line="83" pos:column="36">i</name></expr>]</index><op:operator pos:line="83" pos:column="38">.</op:operator><name pos:line="83" pos:column="39">_internalName</name> <op:operator pos:line="83" pos:column="53">==</op:operator> <name pos:line="83" pos:column="56">internalName</name></expr>)</condition><then pos:line="83" pos:column="69">
		<block pos:line="84" pos:column="17">{
			<expr_stmt><expr><name pos:line="85" pos:column="25">foundIt</name> <op:operator pos:line="85" pos:column="33">=</op:operator> <lit:literal type="boolean" pos:line="85" pos:column="35">true</lit:literal></expr>;</expr_stmt>
			<break pos:line="86" pos:column="25">break;</break>
		}</block></then></if>
	}</block></for>
	<if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><op:operator pos:line="89" pos:column="13">!</op:operator><name pos:line="89" pos:column="14">foundIt</name></expr>)</condition><then pos:line="89" pos:column="22">
		<return pos:line="90" pos:column="17">return <expr><lit:literal type="boolean" pos:line="90" pos:column="24">false</lit:literal></expr>;</return></then></if>

	<expr_stmt><expr><call><name pos:line="92" pos:column="9">renameTab</name><argument_list pos:line="92" pos:column="18">(<argument><expr><name pos:line="92" pos:column="19">i</name></expr></argument>, <argument><expr><name pos:line="92" pos:column="22">newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return pos:line="93" pos:column="9">return <expr><lit:literal type="boolean" pos:line="93" pos:column="16">true</lit:literal></expr>;</return>
}</block></function>

<function><type><name pos:line="96" pos:column="1">void</name></type> <name><name pos:line="96" pos:column="6">ControlsTab</name><op:operator pos:line="96" pos:column="17">::</op:operator><name pos:line="96" pos:column="19">renameTab</name></name><parameter_list pos:line="96" pos:column="28">(<param><decl><type><name pos:line="96" pos:column="29">int</name></type> <name pos:line="96" pos:column="33">index</name></decl></param>, <param><decl><type><specifier pos:line="96" pos:column="40">const</specifier> <name pos:line="96" pos:column="46">TCHAR</name> <type:modifier pos:line="96" pos:column="52">*</type:modifier></type><name pos:line="96" pos:column="53">newName</name></decl></param>)</parameter_list>
<block pos:line="97" pos:column="1">{
	<decl_stmt><decl><type><name pos:line="98" pos:column="9">TCITEM</name></type> <name pos:line="98" pos:column="16">tie</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name pos:line="99" pos:column="9">tie</name><op:operator pos:line="99" pos:column="12">.</op:operator><name pos:line="99" pos:column="13">mask</name></name> <op:operator pos:line="99" pos:column="18">=</op:operator> <name pos:line="99" pos:column="20">TCIF_TEXT</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name pos:line="100" pos:column="9">tie</name><op:operator pos:line="100" pos:column="12">.</op:operator><name pos:line="100" pos:column="13">pszText</name></name> <op:operator pos:line="100" pos:column="21">=</op:operator> <op:operator pos:line="100" pos:column="23">(</op:operator><name pos:line="100" pos:column="24">TCHAR</name> <op:operator pos:line="100" pos:column="30">*</op:operator><op:operator pos:line="100" pos:column="31">)</op:operator><name pos:line="100" pos:column="32">newName</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name pos:line="101" pos:column="9">TabCtrl_SetItem</name><argument_list pos:line="101" pos:column="24">(<argument><expr><name pos:line="101" pos:column="25">_hSelf</name></expr></argument>, <argument><expr><name pos:line="101" pos:column="33">index</name></expr></argument>, <argument><expr><op:operator pos:line="101" pos:column="40">&amp;</op:operator><name pos:line="101" pos:column="41">tie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
